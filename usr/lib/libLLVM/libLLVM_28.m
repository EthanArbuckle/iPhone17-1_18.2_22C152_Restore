unint64_t llvm::VPReductionIntrinsic::getStartParamPos(llvm::VPReductionIntrinsic *this)
{
  return (unint64_t)((this - 354) < 0xD) << 32;
}

uint64_t llvm::BinaryOpIntrinsic::getBinaryOp(llvm::BinaryOpIntrinsic *this)
{
  int v1 = *(_DWORD *)(*((void *)this - 4) + 36);
  uint64_t result = 13;
  char v3 = v1 - 6;
  if (((1 << v3) & 0xC000000003) == 0)
  {
    if (((1 << v3) & 0x6000000600000) != 0) {
      return 15;
    }
    else {
      return 17;
    }
  }
  return result;
}

uint64_t llvm::BinaryOpIntrinsic::isSigned(llvm::BinaryOpIntrinsic *this)
{
  unsigned int v1 = *(_DWORD *)(*((void *)this - 4) + 36) - 262;
  return (v1 < 0x17) & (0x610003u >> v1);
}

uint64_t sub_1CC5E541C(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = *(unsigned __int8 *)(a3 + 16);
  if (a2 + 28 != v5)
  {
    if (v5 != 5 || *(unsigned __int16 *)(a3 + 18) != a2) {
      return 0;
    }
    if (!sub_1CD497E24((void **)a1, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)))
      || (sub_1CD5CBA60((llvm::DataLayout **)(a1 + 8), *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32)) & 1) == 0)
    {
      uint64_t result = sub_1CD497E24((void **)a1, *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF) + 32));
      if (result)
      {
        uint64_t v11 = *(void *)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
        return sub_1CD5CBA60((llvm::DataLayout **)(a1 + 8), v11);
      }
      return result;
    }
    return 1;
  }
  uint64_t v6 = *(void *)(a3 - 64);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v6 + 16) == 16;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    v8 = (void *)(v6 + 24);
    uint64_t v9 = *(unsigned int *)(v6 + 32);
    if (v9 >= 0x41)
    {
      int v12 = 0;
      int64_t v13 = (unint64_t)(v9 + 63) >> 6;
      do
      {
        BOOL v14 = v13-- < 1;
        if (v14) {
          break;
        }
        unint64_t v15 = *(void *)(*v8 + 8 * v13);
        v12 += __clz(v15);
      }
      while (!v15);
      int v16 = v9 | 0xFFFFFFC0;
      if ((v9 & 0x3F) == 0) {
        int v16 = 0;
      }
      if ((v9 - v12 - v16) > 0x40) {
        goto LABEL_26;
      }
      v8 = (void *)*v8;
    }
    **(void **)a1 = *v8;
    if (sub_1CC5E5624((llvm::DataLayout **)(a1 + 8), *(void *)(a3 - 32))) {
      return 1;
    }
  }
LABEL_26:
  uint64_t v17 = *(void *)(a3 - 32);
  if (v17) {
    BOOL v18 = *(unsigned char *)(v17 + 16) == 16;
  }
  else {
    BOOL v18 = 0;
  }
  if (!v18) {
    return 0;
  }
  v19 = (void *)(v17 + 24);
  uint64_t v20 = *(unsigned int *)(v17 + 32);
  if (v20 < 0x41) {
    goto LABEL_32;
  }
  int v22 = 0;
  int64_t v23 = (unint64_t)(v20 + 63) >> 6;
  do
  {
    BOOL v14 = v23-- < 1;
    if (v14) {
      break;
    }
    unint64_t v24 = *(void *)(*v19 + 8 * v23);
    v22 += __clz(v24);
  }
  while (!v24);
  uint64_t result = 0;
  int v25 = v20 | 0xFFFFFFC0;
  if ((v20 & 0x3F) == 0) {
    int v25 = 0;
  }
  if ((v20 - v22 - v25) <= 0x40)
  {
    v19 = (void *)*v19;
LABEL_32:
    **(void **)a1 = *v19;
    uint64_t v21 = *(void *)(a3 - 64);
    return sub_1CC5E5624((llvm::DataLayout **)(a1 + 8), v21);
  }
  return result;
}

uint64_t sub_1CC5E5624(llvm::DataLayout **a1, uint64_t a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a2 + 16) == 84)
    {
      uint64_t v4 = *(void *)(a2 - 32);
      if (v4)
      {
        if (!*(unsigned char *)(v4 + 16) && *(void *)(v4 + 24) == *(void *)(a2 + 72) && *(_DWORD *)(v4 + 36) == 382) {
          return 1;
        }
      }
    }
  }
  uint64_t v22 = 0;
  uint64_t v20 = (uint64_t)&v22;
  uint64_t result = sub_1CC03F934((void **)&v20, a2);
  if (result)
  {
    int v5 = *(unsigned __int8 *)(v22 + 16);
    if (v5 != 62 && (v5 != 5 || *(_WORD *)(v22 + 18) != 34)) {
      return 0;
    }
    uint64_t v6 = 64;
    if (v5 != 62) {
      uint64_t v6 = 24;
    }
    int v7 = *(_DWORD *)(v22 + 20);
    if ((v7 & 0x7FFFFFF) != 2) {
      return 0;
    }
    v8 = *(llvm::Type **)(v22 + v6);
    if (*((unsigned char *)v8 + 8) != 19) {
      return 0;
    }
    BOOL v18 = v8;
    uint64_t v19 = v22;
    uint64_t v9 = (v7 & 0x40000000) != 0 ? *(llvm::Constant ***)(v22 - 8) : (llvm::Constant **)(v22 - 64);
    v10 = *v9;
    unsigned int v11 = *((unsigned __int8 *)*v9 + 16);
    if (!v10 || v11 > 0x14) {
      return 0;
    }
    if (llvm::Constant::isNullValue(v10))
    {
      uint64_t v13 = v19;
    }
    else
    {
      char v16 = sub_1CC03F414((uint64_t)&v20, v10);
      uint64_t v13 = v19;
      if ((v16 & 1) == 0) {
        return 0;
      }
    }
    unsigned int v21 = 64;
    uint64_t v20 = 1;
    int v14 = *(_DWORD *)(v13 + 20);
    if ((v14 & 0x40000000) != 0) {
      uint64_t v15 = *(void *)(v19 - 8);
    }
    else {
      uint64_t v15 = v19 - 32 * (v14 & 0x7FFFFFF);
    }
    BOOL v17 = sub_1CBF53154((llvm::APInt *)&v20, *(unsigned __int8 **)(v15 + 32)) && sub_1CC5CA218(*a1, v18) == 8;
    if (v21 >= 0x41)
    {
      if (v20) {
        MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
      }
    }
    return v17;
  }
  return result;
}

void llvm::LLVMContext::LLVMContext(llvm::LLVMContext *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t llvm::LLVMContext::getMDKindID(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v4 = *a1;
  int v5 = *(_DWORD *)(*a1 + 2460);
  unsigned int v6 = *(_DWORD *)(*a1 + 2456);
  if (!v6)
  {
    *(void *)(v4 + 2460) = 0;
    unsigned int v21 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v21) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v21[16] = 2;
    *(void *)(v4 + 2448) = v21;
    unsigned int v6 = 16;
    *(_DWORD *)(v4 + 2456) = 16;
  }
  int v27 = v5;
  int v7 = 0;
  if (a3)
  {
    size_t v8 = a3;
    uint64_t v9 = a2;
    do
    {
      int v10 = *v9++;
      int v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(v4 + 2448);
  unsigned int v12 = v6 - 1;
  uint64_t v13 = v11 + 8 * v6 + 8;
  int v14 = -1;
  int v15 = 1;
  int v16 = v7;
  while (1)
  {
    uint64_t v17 = v16 & v12;
    uint64_t v18 = *(void *)(v11 + 8 * v17);
    if (!v18) {
      break;
    }
    if (v18 == -8)
    {
      if (v14 == -1) {
        int v14 = v16 & v12;
      }
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v7 {
           && a3 == *(void *)v18
    }
           && (!a3 || !memcmp(a2, (const void *)(v18 + *(unsigned int *)(v4 + 2468)), a3)))
    {
      goto LABEL_17;
    }
    int v16 = v15 + v17;
    ++v15;
  }
  uint64_t v19 = v14;
  if (v14 == -1)
  {
    uint64_t v19 = v17;
    uint64_t v17 = v17;
  }
  else
  {
    uint64_t v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v7;
  uint64_t v18 = *(void *)(v11 + 8 * v17);
LABEL_17:
  if (v18)
  {
    if (v18 != -8) {
      return *(unsigned int *)(v18 + 8);
    }
    --*(_DWORD *)(v4 + 2464);
  }
  uint64_t v22 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  int64_t v23 = v22;
  unint64_t v24 = v22 + 16;
  if (a3) {
    memcpy(v22 + 16, a2, a3);
  }
  v24[a3] = 0;
  *(void *)int64_t v23 = a3;
  *((_DWORD *)v23 + 2) = v27;
  *(void *)(v11 + 8 * v17) = v23;
  ++*(_DWORD *)(v4 + 2460);
  for (i = (uint64_t *)(*(void *)(v4 + 2448)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v4 + 2448), v17));
        ;
        ++i)
  {
    uint64_t v18 = *i;
    if (*i && v18 != -8) {
      break;
    }
  }
  return *(unsigned int *)(v18 + 8);
}

void llvm::LLVMContext::~LLVMContext(llvm::LLVMContextImpl **this, llvm::Constant *a2)
{
  v2 = *this;
  if (v2)
  {
    llvm::LLVMContextImpl::~LLVMContextImpl(v2, a2);
    MEMORY[0x1D25D9CE0]();
  }
}

{
  llvm::LLVMContextImpl *v2;

  v2 = *this;
  if (v2)
  {
    llvm::LLVMContextImpl::~LLVMContextImpl(v2, a2);
    MEMORY[0x1D25D9CE0]();
  }
}

void llvm::LLVMContext::addModule(llvm::SmallPtrSetImplBase **this, llvm::Module *a2)
{
  char v3 = *this;
  uint64_t v4 = *((void *)*this + 1);
  uint64_t v5 = *((unsigned int *)*this + 5);
  if (v4 != *(void *)*this)
  {
    unsigned int v9 = *((_DWORD *)v3 + 4);
    goto LABEL_13;
  }
  if (!v5)
  {
LABEL_9:
    unsigned int v9 = *((_DWORD *)v3 + 4);
    if (v5 < v9)
    {
      *((_DWORD *)v3 + 5) = v5 + 1;
      *(void *)(v4 + 8 * v5) = a2;
      return;
    }
LABEL_13:
    if (3 * v9 <= 4 * ((int)v5 - *((_DWORD *)v3 + 6)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_15;
    }
    llvm::SmallPtrSetImplBase::Grow(*this, v9);
    unsigned int v9 = *((_DWORD *)v3 + 4);
    uint64_t v4 = *((void *)v3 + 1);
LABEL_15:
    unsigned int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v12 = (llvm::Module **)(v4 + 8 * v11);
    uint64_t v13 = *v12;
    if (*v12 == (llvm::Module *)-1)
    {
      int v14 = 0;
LABEL_27:
      if (v14) {
        uint64_t v18 = v14;
      }
      else {
        uint64_t v18 = v12;
      }
      if (*v18 != a2)
      {
        if (*v18 == (llvm::Module *)-2) {
          --*((_DWORD *)v3 + 6);
        }
        else {
          ++*((_DWORD *)v3 + 5);
        }
        *uint64_t v18 = a2;
      }
    }
    else
    {
      int v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v13 == (llvm::Module *)-2;
        }
        if (v16) {
          int v14 = v12;
        }
        unsigned int v17 = v11 + v15++;
        unsigned int v11 = v17 & v10;
        unsigned int v12 = (llvm::Module **)(v4 + 8 * (v17 & v10));
        uint64_t v13 = *v12;
        if (*v12 == (llvm::Module *)-1) {
          goto LABEL_27;
        }
      }
    }
    return;
  }
  unsigned int v6 = 0;
  uint64_t v7 = 8 * v5;
  size_t v8 = (void *)*((void *)*this + 1);
  while ((llvm::Module *)*v8 != a2)
  {
    if (*v8 == -2) {
      unsigned int v6 = v8;
    }
    ++v8;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_9;
      }
      *unsigned int v6 = a2;
      --*((_DWORD *)v3 + 6);
      return;
    }
  }
}

uint64_t llvm::LLVMContext::removeModule(uint64_t result, uint64_t a2)
{
  v2 = *(unsigned int **)result;
  uint64_t v4 = **(void **)result;
  uint64_t v3 = *(void *)(*(void *)result + 8);
  if (v3 == v4)
  {
    uint64_t v5 = v2[5];
    unsigned int v6 = (void *)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v5;
      while (*(void *)(v3 + v7) != a2)
      {
        v7 += 8;
        if (v8 == v7) {
          goto LABEL_6;
        }
      }
      unsigned int v6 = (void *)(v3 + v7);
    }
LABEL_6:
    uint64_t v4 = *(void *)(*(void *)result + 8);
  }
  else
  {
    uint64_t v10 = v2[4];
    unsigned int v11 = v10 - 1;
    unsigned int v12 = (v10 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v6 = (void *)(v3 + 8 * v12);
    uint64_t v13 = *v6;
    if (*v6 == -1)
    {
      int v14 = 0;
LABEL_25:
      if (v14) {
        unsigned int v6 = v14;
      }
      if (*v6 != a2) {
        unsigned int v6 = (void *)(v3 + 8 * v10);
      }
    }
    else
    {
      int v14 = 0;
      uint64_t result = 1;
      while (v13 != a2)
      {
        if (v14) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v13 == -2;
        }
        if (v15) {
          int v14 = v6;
        }
        int v16 = v12 + result;
        uint64_t result = (result + 1);
        unsigned int v12 = v16 & v11;
        unsigned int v6 = (void *)(v3 + 8 * (v16 & v11));
        uint64_t v13 = *v6;
        if (*v6 == -1) {
          goto LABEL_25;
        }
      }
    }
  }
  BOOL v15 = v3 == v4;
  uint64_t v9 = 4;
  if (v15) {
    uint64_t v9 = 5;
  }
  if (v6 != (void *)(v3 + 8 * v2[v9]))
  {
    *unsigned int v6 = -2;
    ++v2[6];
  }
  return result;
}

uint64_t *llvm::LLVMContext::setDiagnosticHandlerCallBack(uint64_t *result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *(void *)(*(void *)(*result + 72) + 16) = a2;
  *(void *)(*(void *)(v4 + 72) + 8) = a3;
  *(unsigned char *)(v4 + 80) = a4;
  return result;
}

uint64_t llvm::LLVMContext::setDiagnosticHandler(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(v5 + 72);
  *(void *)(v5 + 72) = v6;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(unsigned char *)(*a1 + 80) = a3;
  return result;
}

uint64_t llvm::LLVMContext::getDiagnosticsHotnessRequested(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(void *)this + 81);
}

uint64_t llvm::LLVMContext::getDiagnosticsHotnessThreshold(llvm::LLVMContext *this)
{
  if (*(unsigned char *)(*(void *)this + 96)) {
    return *(void *)(*(void *)this + 88);
  }
  else {
    return -1;
  }
}

uint64_t llvm::LLVMContext::getMainRemarkStreamer(llvm::LLVMContext *this)
{
  return *(void *)(*(void *)this + 64);
}

{
  return *(void *)(*(void *)this + 64);
}

uint64_t llvm::LLVMContext::getLLVMRemarkStreamer(llvm::LLVMContext *this)
{
  return *(void *)(*(void *)this + 128);
}

{
  return *(void *)(*(void *)this + 128);
}

uint64_t llvm::LLVMContext::getDiagnosticHandlerCallBack(llvm::LLVMContext *this)
{
  return *(void *)(*(void *)(*(void *)this + 72) + 16);
}

uint64_t llvm::LLVMContext::getDiagnosticContext(llvm::LLVMContext *this)
{
  return *(void *)(*(void *)(*(void *)this + 72) + 8);
}

uint64_t *llvm::LLVMContext::setYieldCallback(uint64_t *this, void (*a2)(llvm::LLVMContext *, void *), void *a3)
{
  uint64_t v3 = *this;
  *(void *)(v3 + 136) = a2;
  *(void *)(v3 + 144) = a3;
  return this;
}

uint64_t llvm::LLVMContext::yield(uint64_t this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)this + 136);
  if (v1) {
    return v1();
  }
  return this;
}

uint64_t llvm::LLVMContext::diagnose(uint64_t this, const llvm::DiagnosticInfo *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = *(void *)this;
  if ((*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7)
  {
    this = *(void *)(v4 + 128);
    if (this)
    {
      llvm::LLVMRemarkStreamer::emit((llvm::LLVMRemarkStreamer *)this, a2);
      uint64_t v4 = *(void *)v3;
    }
  }
  if (!*(void *)(v4 + 72)
    || *(unsigned char *)(v4 + 80)
    && (*((_DWORD *)a2 + 2) - 18) >= 0xFFFFFFF7
    && ((this = (*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(void *)a2 + 32))(a2), !this)
     || *((unsigned char *)a2 + 352) && !*((unsigned char *)a2 + 72))
    || (this = (*(uint64_t (**)(void, const llvm::DiagnosticInfo *))(**(void **)(*(void *)v3 + 72)
                                                                               + 16))(*(void *)(*(void *)v3 + 72), a2), (this & 1) == 0))
  {
    if ((*((_DWORD *)a2 + 2) - 18) < 0xFFFFFFF7
      || (this = (*(uint64_t (**)(const llvm::DiagnosticInfo *))(*(void *)a2 + 32))(a2), this)
      && (!*((unsigned char *)a2 + 352) || *((unsigned char *)a2 + 72)))
    {
      unsigned int v11 = &unk_1F26169D0;
      unsigned int v12 = (llvm *)llvm::errs((llvm *)this);
      uint64_t v5 = (llvm::raw_ostream *)llvm::errs(v12);
      uint64_t v6 = (&off_1E6849918)[*((char *)a2 + 12)];
      size_t v7 = strlen(v6);
      uint64_t v8 = (_WORD *)*((void *)v5 + 4);
      if (v7 <= *((void *)v5 + 3) - (void)v8)
      {
        if (v7)
        {
          memcpy(v8, v6, v7);
          uint64_t v8 = (_WORD *)(*((void *)v5 + 4) + v7);
          *((void *)v5 + 4) = v8;
        }
      }
      else
      {
        uint64_t v5 = llvm::raw_ostream::write(v5, v6, v7);
        uint64_t v8 = (_WORD *)*((void *)v5 + 4);
      }
      if (*((void *)v5 + 3) - (void)v8 > 1uLL)
      {
        _WORD *v8 = 8250;
        *((void *)v5 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v5, ": ", 2uLL);
      }
      uint64_t v9 = (llvm *)(*(uint64_t (**)(const llvm::DiagnosticInfo *, void **))(*(void *)a2 + 24))(a2, &v11);
      this = (uint64_t)llvm::errs(v9);
      uint64_t v10 = *(unsigned char **)(this + 32);
      if (*(unsigned char **)(this + 24) == v10)
      {
        this = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)this, "\n", 1uLL);
      }
      else
      {
        unsigned char *v10 = 10;
        ++*(void *)(this + 32);
      }
      if (!*((unsigned char *)a2 + 12)) {
        exit(1);
      }
    }
  }
  return this;
}

char *llvm::LLVMContext::getDiagnosticMessagePrefix(int a1)
{
  return (&off_1E6849918)[a1];
}

void llvm::LLVMContext::getMDKindNames(uint64_t a1, void *a2)
{
  sub_1CC5E6800((uint64_t)a2, *(unsigned int *)(*(void *)a1 + 2460));
  uint64_t v4 = *(unsigned int *)(*(void *)a1 + 2456);
  if (v4)
  {
    for (i = *(uint64_t ***)(*(void *)a1 + 2448); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = *(uint64_t ***)(*(void *)a1 + 2448);
  }
  uint64_t v7 = *(void *)(*(void *)a1 + 2448) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    uint64_t v8 = *i;
    do
    {
      uint64_t v9 = v8 + 2;
      uint64_t v10 = (uint64_t *)*v8;
      unsigned int v11 = (uint64_t **)(*a2 + 16 * *((unsigned int *)v8 + 2));
      *unsigned int v11 = v9;
      v11[1] = v10;
      do
      {
        unsigned int v12 = i[1];
        ++i;
        uint64_t v8 = v12;
        if (v12) {
          BOOL v13 = v8 + 1 == 0;
        }
        else {
          BOOL v13 = 1;
        }
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

void llvm::LLVMContext::getOperandBundleTags(uint64_t *a1, void *a2)
{
}

uint64_t llvm::LLVMContext::getOrInsertSyncScopeID(void *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (llvm::StringMapImpl *)(*a1 + 2608);
  v6[0] = *(_DWORD *)(v3 + 2620);
  return *(unsigned __int8 *)(*sub_1CC5ED9A0(v4, a2, a3, v6) + 8);
}

void llvm::LLVMContext::getSyncScopeNames(uint64_t *a1, void *a2)
{
}

uint64_t llvm::LLVMContext::shouldDiscardValueNames(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(void *)this + 2664);
}

uint64_t llvm::LLVMContext::isODRUniquingDebugTypes(llvm::LLVMContext *this)
{
  return *(unsigned __int8 *)(*(void *)this + 1184);
}

uint64_t *llvm::LLVMContext::disableDebugTypeODRUniquing(uint64_t *this)
{
  if (*(unsigned char *)(*this + 1184))
  {
    uint64_t v1 = *this;
    this = (uint64_t *)MEMORY[0x1D25D9CD0](*(void *)(*this + 1160), 8);
    *(unsigned char *)(v1 + 1184) = 0;
  }
  return this;
}

uint64_t llvm::LLVMContext::getOptPassGate(llvm::LLVMContextImpl **this)
{
  return llvm::LLVMContextImpl::getOptPassGate(*this);
}

uint64_t llvm::LLVMContext::setOptPassGate(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)result + 2672) = a2;
  return result;
}

uint64_t llvm::LLVMContext::getDiagHandlerPtr(llvm::LLVMContext *this)
{
  return *(void *)(*(void *)this + 72);
}

uint64_t llvm::LLVMContext::getDiagnosticHandler@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)this + 72);
  *(void *)(*(void *)this + 72) = 0;
  *a2 = v2;
  return this;
}

BOOL llvm::LLVMContext::supportsTypedPointers(llvm::LLVMContext *this)
{
  uint64_t v1 = *(void *)this;
  if (*(unsigned char *)(*(void *)this + 2681))
  {
    int v2 = *(unsigned __int8 *)(v1 + 2680);
  }
  else if (getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT"))
  {
    *(_WORD *)(v1 + 2680) = 257;
    int v2 = 1;
  }
  else
  {
    int v2 = byte_1EBD06638;
    *(unsigned char *)(v1 + 2680) = byte_1EBD06638;
    *(unsigned char *)(v1 + 2681) = 1;
  }
  return v2 == 0;
}

void sub_1CC5E6800(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v2 != a2) {
        bzero((void *)(*(void *)a1 + 16 * v2), 16 * a2 - 16 * v2);
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

uint64_t sub_1CC5E6878(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v1 = result;
    uint64_t result = MEMORY[0x1D25D9CD0](*(void *)result, 8);
    *(unsigned char *)(v1 + 24) = 0;
  }
  return result;
}

void llvm::LLVMContextImpl::LLVMContextImpl(llvm::LLVMContextImpl *this, llvm::LLVMContext *a2)
{
  *(void *)this = (char *)this + 32;
  *((void *)this + 1) = (char *)this + 32;
  *((void *)this + 2) = 4;
  *((_DWORD *)this + 6) = 0;
  *((void *)this + 8) = 0;
  operator new();
}

void llvm::LLVMContextImpl::~LLVMContextImpl(llvm::LLVMContextImpl *this, llvm::Constant *a2)
{
  uint64_t v1069 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)this + 5);
  int v4 = *((_DWORD *)this + 6);
  while (v3 != v4)
  {
    uint64_t v5 = (llvm::Module **)*((void *)this + 1);
    if (v5 == *(llvm::Module ***)this) {
      uint64_t v6 = 20;
    }
    else {
      uint64_t v6 = 16;
    }
    uint64_t v7 = *(unsigned int *)((char *)this + v6);
    if (v7)
    {
      uint64_t v8 = 8 * v7;
      uint64_t v9 = &v5[v7];
      while (1)
      {
        uint64_t v10 = *v5;
        if ((unint64_t)*v5 < 0xFFFFFFFFFFFFFFFELL) {
          break;
        }
        ++v5;
        v8 -= 8;
        if (!v8)
        {
          uint64_t v5 = v9;
          goto LABEL_10;
        }
      }
    }
    else
    {
LABEL_10:
      uint64_t v10 = *v5;
    }
    if (v10)
    {
      llvm::Module::~Module(v10);
      MEMORY[0x1D25D9CE0]();
      int v3 = *((_DWORD *)this + 5);
      int v4 = *((_DWORD *)this + 6);
    }
  }
  unsigned int v11 = (llvm::DIArgList **)*((void *)this + 149);
  unsigned int v12 = (llvm::DIArgList **)*((void *)this + 150);
  while (v11 != v12)
  {
    BOOL v13 = *v11;
    if (*(unsigned char *)*v11 == 32) {
      llvm::DIArgList::dropAllReferences(v13);
    }
    else {
      llvm::MDNode::dropAllReferences((uint64_t)v13);
    }
    ++v11;
  }
  uint64_t v14 = *((void *)this + 55);
  uint64_t v15 = *((unsigned int *)this + 114);
  int v16 = (uint64_t *)(v14 + 8 * v15);
  if (*((_DWORD *)this + 112))
  {
    if (v15)
    {
      uint64_t v17 = 8 * v15;
      uint64_t v18 = (uint64_t *)*((void *)this + 55);
      while ((*v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v18;
        v17 -= 8;
        if (!v17) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      uint64_t v18 = (uint64_t *)*((void *)this + 55);
    }
  }
  else
  {
LABEL_25:
    uint64_t v18 = (uint64_t *)(v14 + 8 * v15);
  }
  uint64_t v19 = (uint64_t *)(v14 + 8 * v15);
LABEL_28:
  while (v18 != v19)
  {
    uint64_t v20 = v18 + 1;
    llvm::MDNode::dropAllReferences(*v18);
    uint64_t v18 = v16;
    if (v20 != v16)
    {
      uint64_t v18 = v20;
      while ((*v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v18 == v16)
        {
          uint64_t v18 = v16;
          goto LABEL_28;
        }
      }
    }
  }
  uint64_t v21 = *((void *)this + 58);
  uint64_t v22 = *((unsigned int *)this + 120);
  int64_t v23 = (uint64_t *)(v21 + 8 * v22);
  if (*((_DWORD *)this + 118))
  {
    if (v22)
    {
      uint64_t v24 = 8 * v22;
      int v25 = (uint64_t *)*((void *)this + 58);
      while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v25;
        v24 -= 8;
        if (!v24) {
          goto LABEL_39;
        }
      }
    }
    else
    {
      int v25 = (uint64_t *)*((void *)this + 58);
    }
  }
  else
  {
LABEL_39:
    int v25 = (uint64_t *)(v21 + 8 * v22);
  }
  v26 = (uint64_t *)(v21 + 8 * v22);
LABEL_42:
  while (v25 != v26)
  {
    int v27 = v25 + 1;
    llvm::MDNode::dropAllReferences(*v25);
    int v25 = v23;
    if (v27 != v23)
    {
      int v25 = v27;
      while ((*v25 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v25 == v23)
        {
          int v25 = v23;
          goto LABEL_42;
        }
      }
    }
  }
  uint64_t v28 = *((void *)this + 61);
  uint64_t v29 = *((unsigned int *)this + 126);
  v30 = (uint64_t *)(v28 + 8 * v29);
  if (*((_DWORD *)this + 124))
  {
    if (v29)
    {
      uint64_t v31 = 8 * v29;
      v32 = (uint64_t *)*((void *)this + 61);
      while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v32;
        v31 -= 8;
        if (!v31) {
          goto LABEL_53;
        }
      }
    }
    else
    {
      v32 = (uint64_t *)*((void *)this + 61);
    }
  }
  else
  {
LABEL_53:
    v32 = (uint64_t *)(v28 + 8 * v29);
  }
  v33 = (uint64_t *)(v28 + 8 * v29);
LABEL_56:
  while (v32 != v33)
  {
    v34 = v32 + 1;
    llvm::MDNode::dropAllReferences(*v32);
    v32 = v30;
    if (v34 != v30)
    {
      v32 = v34;
      while ((*v32 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v32 == v30)
        {
          v32 = v30;
          goto LABEL_56;
        }
      }
    }
  }
  uint64_t v35 = *((void *)this + 64);
  uint64_t v36 = *((unsigned int *)this + 132);
  v37 = (uint64_t *)(v35 + 8 * v36);
  if (*((_DWORD *)this + 130))
  {
    if (v36)
    {
      uint64_t v38 = 8 * v36;
      v39 = (uint64_t *)*((void *)this + 64);
      while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v39;
        v38 -= 8;
        if (!v38) {
          goto LABEL_67;
        }
      }
    }
    else
    {
      v39 = (uint64_t *)*((void *)this + 64);
    }
  }
  else
  {
LABEL_67:
    v39 = (uint64_t *)(v35 + 8 * v36);
  }
  v40 = (uint64_t *)(v35 + 8 * v36);
LABEL_70:
  while (v39 != v40)
  {
    v41 = v39 + 1;
    llvm::MDNode::dropAllReferences(*v39);
    v39 = v37;
    if (v41 != v37)
    {
      v39 = v41;
      while ((*v39 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v39 == v37)
        {
          v39 = v37;
          goto LABEL_70;
        }
      }
    }
  }
  uint64_t v42 = *((void *)this + 67);
  uint64_t v43 = *((unsigned int *)this + 138);
  v44 = (uint64_t *)(v42 + 8 * v43);
  if (*((_DWORD *)this + 136))
  {
    if (v43)
    {
      uint64_t v45 = 8 * v43;
      v46 = (uint64_t *)*((void *)this + 67);
      while ((*v46 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v46;
        v45 -= 8;
        if (!v45) {
          goto LABEL_81;
        }
      }
    }
    else
    {
      v46 = (uint64_t *)*((void *)this + 67);
    }
  }
  else
  {
LABEL_81:
    v46 = (uint64_t *)(v42 + 8 * v43);
  }
  v47 = (uint64_t *)(v42 + 8 * v43);
LABEL_84:
  while (v46 != v47)
  {
    v48 = v46 + 1;
    llvm::MDNode::dropAllReferences(*v46);
    v46 = v44;
    if (v48 != v44)
    {
      v46 = v48;
      while ((*v46 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v46 == v44)
        {
          v46 = v44;
          goto LABEL_84;
        }
      }
    }
  }
  uint64_t v49 = *((void *)this + 70);
  uint64_t v50 = *((unsigned int *)this + 144);
  v51 = (uint64_t *)(v49 + 8 * v50);
  if (*((_DWORD *)this + 142))
  {
    if (v50)
    {
      uint64_t v52 = 8 * v50;
      v53 = (uint64_t *)*((void *)this + 70);
      while ((*v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v53;
        v52 -= 8;
        if (!v52) {
          goto LABEL_95;
        }
      }
    }
    else
    {
      v53 = (uint64_t *)*((void *)this + 70);
    }
  }
  else
  {
LABEL_95:
    v53 = (uint64_t *)(v49 + 8 * v50);
  }
  v54 = (uint64_t *)(v49 + 8 * v50);
LABEL_98:
  while (v53 != v54)
  {
    v55 = v53 + 1;
    llvm::MDNode::dropAllReferences(*v53);
    v53 = v51;
    if (v55 != v51)
    {
      v53 = v55;
      while ((*v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v53 == v51)
        {
          v53 = v51;
          goto LABEL_98;
        }
      }
    }
  }
  uint64_t v56 = *((void *)this + 73);
  uint64_t v57 = *((unsigned int *)this + 150);
  v58 = (uint64_t *)(v56 + 8 * v57);
  if (*((_DWORD *)this + 148))
  {
    if (v57)
    {
      uint64_t v59 = 8 * v57;
      v60 = (uint64_t *)*((void *)this + 73);
      while ((*v60 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v60;
        v59 -= 8;
        if (!v59) {
          goto LABEL_109;
        }
      }
    }
    else
    {
      v60 = (uint64_t *)*((void *)this + 73);
    }
  }
  else
  {
LABEL_109:
    v60 = (uint64_t *)(v56 + 8 * v57);
  }
  v61 = (uint64_t *)(v56 + 8 * v57);
LABEL_112:
  while (v60 != v61)
  {
    v62 = v60 + 1;
    llvm::MDNode::dropAllReferences(*v60);
    v60 = v58;
    if (v62 != v58)
    {
      v60 = v62;
      while ((*v60 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v60 == v58)
        {
          v60 = v58;
          goto LABEL_112;
        }
      }
    }
  }
  uint64_t v63 = *((void *)this + 76);
  uint64_t v64 = *((unsigned int *)this + 156);
  v65 = (uint64_t *)(v63 + 8 * v64);
  if (*((_DWORD *)this + 154))
  {
    if (v64)
    {
      uint64_t v66 = 8 * v64;
      v67 = (uint64_t *)*((void *)this + 76);
      while ((*v67 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v67;
        v66 -= 8;
        if (!v66) {
          goto LABEL_123;
        }
      }
    }
    else
    {
      v67 = (uint64_t *)*((void *)this + 76);
    }
  }
  else
  {
LABEL_123:
    v67 = (uint64_t *)(v63 + 8 * v64);
  }
  v68 = (uint64_t *)(v63 + 8 * v64);
LABEL_126:
  while (v67 != v68)
  {
    v69 = v67 + 1;
    llvm::MDNode::dropAllReferences(*v67);
    v67 = v65;
    if (v69 != v65)
    {
      v67 = v69;
      while ((*v67 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v67 == v65)
        {
          v67 = v65;
          goto LABEL_126;
        }
      }
    }
  }
  uint64_t v70 = *((void *)this + 79);
  uint64_t v71 = *((unsigned int *)this + 162);
  v72 = (uint64_t *)(v70 + 8 * v71);
  if (*((_DWORD *)this + 160))
  {
    if (v71)
    {
      uint64_t v73 = 8 * v71;
      v74 = (uint64_t *)*((void *)this + 79);
      while ((*v74 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v74;
        v73 -= 8;
        if (!v73) {
          goto LABEL_137;
        }
      }
    }
    else
    {
      v74 = (uint64_t *)*((void *)this + 79);
    }
  }
  else
  {
LABEL_137:
    v74 = (uint64_t *)(v70 + 8 * v71);
  }
  v75 = (uint64_t *)(v70 + 8 * v71);
LABEL_140:
  while (v74 != v75)
  {
    v76 = v74 + 1;
    llvm::MDNode::dropAllReferences(*v74);
    v74 = v72;
    if (v76 != v72)
    {
      v74 = v76;
      while ((*v74 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v74 == v72)
        {
          v74 = v72;
          goto LABEL_140;
        }
      }
    }
  }
  uint64_t v77 = *((void *)this + 82);
  uint64_t v78 = *((unsigned int *)this + 168);
  v79 = (uint64_t *)(v77 + 8 * v78);
  if (*((_DWORD *)this + 166))
  {
    if (v78)
    {
      uint64_t v80 = 8 * v78;
      v81 = (uint64_t *)*((void *)this + 82);
      while ((*v81 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v81;
        v80 -= 8;
        if (!v80) {
          goto LABEL_151;
        }
      }
    }
    else
    {
      v81 = (uint64_t *)*((void *)this + 82);
    }
  }
  else
  {
LABEL_151:
    v81 = (uint64_t *)(v77 + 8 * v78);
  }
  v82 = (uint64_t *)(v77 + 8 * v78);
LABEL_154:
  while (v81 != v82)
  {
    v83 = v81 + 1;
    llvm::MDNode::dropAllReferences(*v81);
    v81 = v79;
    if (v83 != v79)
    {
      v81 = v83;
      while ((*v81 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v81 == v79)
        {
          v81 = v79;
          goto LABEL_154;
        }
      }
    }
  }
  uint64_t v84 = *((void *)this + 85);
  uint64_t v85 = *((unsigned int *)this + 174);
  v86 = (uint64_t *)(v84 + 8 * v85);
  if (*((_DWORD *)this + 172))
  {
    if (v85)
    {
      uint64_t v87 = 8 * v85;
      v88 = (uint64_t *)*((void *)this + 85);
      while ((*v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v88;
        v87 -= 8;
        if (!v87) {
          goto LABEL_165;
        }
      }
    }
    else
    {
      v88 = (uint64_t *)*((void *)this + 85);
    }
  }
  else
  {
LABEL_165:
    v88 = (uint64_t *)(v84 + 8 * v85);
  }
  v89 = (uint64_t *)(v84 + 8 * v85);
LABEL_168:
  while (v88 != v89)
  {
    v90 = v88 + 1;
    llvm::MDNode::dropAllReferences(*v88);
    v88 = v86;
    if (v90 != v86)
    {
      v88 = v90;
      while ((*v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v88 == v86)
        {
          v88 = v86;
          goto LABEL_168;
        }
      }
    }
  }
  uint64_t v91 = *((void *)this + 88);
  uint64_t v92 = *((unsigned int *)this + 180);
  v93 = (uint64_t *)(v91 + 8 * v92);
  if (*((_DWORD *)this + 178))
  {
    if (v92)
    {
      uint64_t v94 = 8 * v92;
      v95 = (uint64_t *)*((void *)this + 88);
      while ((*v95 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v95;
        v94 -= 8;
        if (!v94) {
          goto LABEL_179;
        }
      }
    }
    else
    {
      v95 = (uint64_t *)*((void *)this + 88);
    }
  }
  else
  {
LABEL_179:
    v95 = (uint64_t *)(v91 + 8 * v92);
  }
  v96 = (uint64_t *)(v91 + 8 * v92);
LABEL_182:
  while (v95 != v96)
  {
    v97 = v95 + 1;
    llvm::MDNode::dropAllReferences(*v95);
    v95 = v93;
    if (v97 != v93)
    {
      v95 = v97;
      while ((*v95 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v95 == v93)
        {
          v95 = v93;
          goto LABEL_182;
        }
      }
    }
  }
  uint64_t v98 = *((void *)this + 91);
  uint64_t v99 = *((unsigned int *)this + 186);
  v100 = (uint64_t *)(v98 + 8 * v99);
  if (*((_DWORD *)this + 184))
  {
    if (v99)
    {
      uint64_t v101 = 8 * v99;
      v102 = (uint64_t *)*((void *)this + 91);
      while ((*v102 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v102;
        v101 -= 8;
        if (!v101) {
          goto LABEL_193;
        }
      }
    }
    else
    {
      v102 = (uint64_t *)*((void *)this + 91);
    }
  }
  else
  {
LABEL_193:
    v102 = (uint64_t *)(v98 + 8 * v99);
  }
  v103 = (uint64_t *)(v98 + 8 * v99);
LABEL_196:
  while (v102 != v103)
  {
    v104 = v102 + 1;
    llvm::MDNode::dropAllReferences(*v102);
    v102 = v100;
    if (v104 != v100)
    {
      v102 = v104;
      while ((*v102 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v102 == v100)
        {
          v102 = v100;
          goto LABEL_196;
        }
      }
    }
  }
  uint64_t v105 = *((void *)this + 94);
  uint64_t v106 = *((unsigned int *)this + 192);
  v107 = (uint64_t *)(v105 + 8 * v106);
  if (*((_DWORD *)this + 190))
  {
    if (v106)
    {
      uint64_t v108 = 8 * v106;
      v109 = (uint64_t *)*((void *)this + 94);
      while ((*v109 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v109;
        v108 -= 8;
        if (!v108) {
          goto LABEL_207;
        }
      }
    }
    else
    {
      v109 = (uint64_t *)*((void *)this + 94);
    }
  }
  else
  {
LABEL_207:
    v109 = (uint64_t *)(v105 + 8 * v106);
  }
  v110 = (uint64_t *)(v105 + 8 * v106);
LABEL_210:
  while (v109 != v110)
  {
    v111 = v109 + 1;
    llvm::MDNode::dropAllReferences(*v109);
    v109 = v107;
    if (v111 != v107)
    {
      v109 = v111;
      while ((*v109 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v109 == v107)
        {
          v109 = v107;
          goto LABEL_210;
        }
      }
    }
  }
  uint64_t v112 = *((void *)this + 97);
  uint64_t v113 = *((unsigned int *)this + 198);
  v114 = (uint64_t *)(v112 + 8 * v113);
  if (*((_DWORD *)this + 196))
  {
    if (v113)
    {
      uint64_t v115 = 8 * v113;
      v116 = (uint64_t *)*((void *)this + 97);
      while ((*v116 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v116;
        v115 -= 8;
        if (!v115) {
          goto LABEL_221;
        }
      }
    }
    else
    {
      v116 = (uint64_t *)*((void *)this + 97);
    }
  }
  else
  {
LABEL_221:
    v116 = (uint64_t *)(v112 + 8 * v113);
  }
  v117 = (uint64_t *)(v112 + 8 * v113);
LABEL_224:
  while (v116 != v117)
  {
    v118 = v116 + 1;
    llvm::MDNode::dropAllReferences(*v116);
    v116 = v114;
    if (v118 != v114)
    {
      v116 = v118;
      while ((*v116 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v116 == v114)
        {
          v116 = v114;
          goto LABEL_224;
        }
      }
    }
  }
  uint64_t v119 = *((void *)this + 100);
  uint64_t v120 = *((unsigned int *)this + 204);
  v121 = (uint64_t *)(v119 + 8 * v120);
  if (*((_DWORD *)this + 202))
  {
    if (v120)
    {
      uint64_t v122 = 8 * v120;
      v123 = (uint64_t *)*((void *)this + 100);
      while ((*v123 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v123;
        v122 -= 8;
        if (!v122) {
          goto LABEL_235;
        }
      }
    }
    else
    {
      v123 = (uint64_t *)*((void *)this + 100);
    }
  }
  else
  {
LABEL_235:
    v123 = (uint64_t *)(v119 + 8 * v120);
  }
  v124 = (uint64_t *)(v119 + 8 * v120);
LABEL_238:
  while (v123 != v124)
  {
    v125 = v123 + 1;
    llvm::MDNode::dropAllReferences(*v123);
    v123 = v121;
    if (v125 != v121)
    {
      v123 = v125;
      while ((*v123 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v123 == v121)
        {
          v123 = v121;
          goto LABEL_238;
        }
      }
    }
  }
  uint64_t v126 = *((void *)this + 103);
  uint64_t v127 = *((unsigned int *)this + 210);
  v128 = (uint64_t *)(v126 + 8 * v127);
  if (*((_DWORD *)this + 208))
  {
    if (v127)
    {
      uint64_t v129 = 8 * v127;
      v130 = (uint64_t *)*((void *)this + 103);
      while ((*v130 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v130;
        v129 -= 8;
        if (!v129) {
          goto LABEL_249;
        }
      }
    }
    else
    {
      v130 = (uint64_t *)*((void *)this + 103);
    }
  }
  else
  {
LABEL_249:
    v130 = (uint64_t *)(v126 + 8 * v127);
  }
  v131 = (uint64_t *)(v126 + 8 * v127);
LABEL_252:
  while (v130 != v131)
  {
    v132 = v130 + 1;
    llvm::MDNode::dropAllReferences(*v130);
    v130 = v128;
    if (v132 != v128)
    {
      v130 = v132;
      while ((*v130 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v130 == v128)
        {
          v130 = v128;
          goto LABEL_252;
        }
      }
    }
  }
  uint64_t v133 = *((void *)this + 106);
  uint64_t v134 = *((unsigned int *)this + 216);
  v135 = (uint64_t *)(v133 + 8 * v134);
  if (*((_DWORD *)this + 214))
  {
    if (v134)
    {
      uint64_t v136 = 8 * v134;
      v137 = (uint64_t *)*((void *)this + 106);
      while ((*v137 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v137;
        v136 -= 8;
        if (!v136) {
          goto LABEL_263;
        }
      }
    }
    else
    {
      v137 = (uint64_t *)*((void *)this + 106);
    }
  }
  else
  {
LABEL_263:
    v137 = (uint64_t *)(v133 + 8 * v134);
  }
  v138 = (uint64_t *)(v133 + 8 * v134);
LABEL_266:
  while (v137 != v138)
  {
    v139 = v137 + 1;
    llvm::MDNode::dropAllReferences(*v137);
    v137 = v135;
    if (v139 != v135)
    {
      v137 = v139;
      while ((*v137 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v137 == v135)
        {
          v137 = v135;
          goto LABEL_266;
        }
      }
    }
  }
  uint64_t v140 = *((void *)this + 109);
  uint64_t v141 = *((unsigned int *)this + 222);
  v142 = (uint64_t *)(v140 + 8 * v141);
  if (*((_DWORD *)this + 220))
  {
    if (v141)
    {
      uint64_t v143 = 8 * v141;
      v144 = (uint64_t *)*((void *)this + 109);
      while ((*v144 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v144;
        v143 -= 8;
        if (!v143) {
          goto LABEL_277;
        }
      }
    }
    else
    {
      v144 = (uint64_t *)*((void *)this + 109);
    }
  }
  else
  {
LABEL_277:
    v144 = (uint64_t *)(v140 + 8 * v141);
  }
  v145 = (uint64_t *)(v140 + 8 * v141);
LABEL_280:
  while (v144 != v145)
  {
    v146 = v144 + 1;
    llvm::MDNode::dropAllReferences(*v144);
    v144 = v142;
    if (v146 != v142)
    {
      v144 = v146;
      while ((*v144 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v144 == v142)
        {
          v144 = v142;
          goto LABEL_280;
        }
      }
    }
  }
  uint64_t v147 = *((void *)this + 112);
  uint64_t v148 = *((unsigned int *)this + 228);
  v149 = (uint64_t *)(v147 + 8 * v148);
  if (*((_DWORD *)this + 226))
  {
    if (v148)
    {
      uint64_t v150 = 8 * v148;
      v151 = (uint64_t *)*((void *)this + 112);
      while ((*v151 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v151;
        v150 -= 8;
        if (!v150) {
          goto LABEL_291;
        }
      }
    }
    else
    {
      v151 = (uint64_t *)*((void *)this + 112);
    }
  }
  else
  {
LABEL_291:
    v151 = (uint64_t *)(v147 + 8 * v148);
  }
  v152 = (uint64_t *)(v147 + 8 * v148);
LABEL_294:
  while (v151 != v152)
  {
    v153 = v151 + 1;
    llvm::MDNode::dropAllReferences(*v151);
    v151 = v149;
    if (v153 != v149)
    {
      v151 = v153;
      while ((*v151 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v151 == v149)
        {
          v151 = v149;
          goto LABEL_294;
        }
      }
    }
  }
  uint64_t v154 = *((void *)this + 115);
  uint64_t v155 = *((unsigned int *)this + 234);
  v156 = (uint64_t *)(v154 + 8 * v155);
  if (*((_DWORD *)this + 232))
  {
    if (v155)
    {
      uint64_t v157 = 8 * v155;
      v158 = (uint64_t *)*((void *)this + 115);
      while ((*v158 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v158;
        v157 -= 8;
        if (!v157) {
          goto LABEL_305;
        }
      }
    }
    else
    {
      v158 = (uint64_t *)*((void *)this + 115);
    }
  }
  else
  {
LABEL_305:
    v158 = (uint64_t *)(v154 + 8 * v155);
  }
  v159 = (uint64_t *)(v154 + 8 * v155);
LABEL_308:
  while (v158 != v159)
  {
    v160 = v158 + 1;
    llvm::MDNode::dropAllReferences(*v158);
    v158 = v156;
    if (v160 != v156)
    {
      v158 = v160;
      while ((*v158 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v158 == v156)
        {
          v158 = v156;
          goto LABEL_308;
        }
      }
    }
  }
  uint64_t v161 = *((void *)this + 118);
  uint64_t v162 = *((unsigned int *)this + 240);
  v163 = (uint64_t *)(v161 + 8 * v162);
  if (*((_DWORD *)this + 238))
  {
    if (v162)
    {
      uint64_t v164 = 8 * v162;
      v165 = (uint64_t *)*((void *)this + 118);
      while ((*v165 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v165;
        v164 -= 8;
        if (!v164) {
          goto LABEL_319;
        }
      }
    }
    else
    {
      v165 = (uint64_t *)*((void *)this + 118);
    }
  }
  else
  {
LABEL_319:
    v165 = (uint64_t *)(v161 + 8 * v162);
  }
  v166 = (uint64_t *)(v161 + 8 * v162);
LABEL_322:
  while (v165 != v166)
  {
    v167 = v165 + 1;
    llvm::MDNode::dropAllReferences(*v165);
    v165 = v163;
    if (v167 != v163)
    {
      v165 = v167;
      while ((*v165 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v165 == v163)
        {
          v165 = v163;
          goto LABEL_322;
        }
      }
    }
  }
  uint64_t v168 = *((void *)this + 121);
  uint64_t v169 = *((unsigned int *)this + 246);
  v170 = (uint64_t *)(v168 + 8 * v169);
  if (*((_DWORD *)this + 244))
  {
    if (v169)
    {
      uint64_t v171 = 8 * v169;
      v172 = (uint64_t *)*((void *)this + 121);
      while ((*v172 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v172;
        v171 -= 8;
        if (!v171) {
          goto LABEL_333;
        }
      }
    }
    else
    {
      v172 = (uint64_t *)*((void *)this + 121);
    }
  }
  else
  {
LABEL_333:
    v172 = (uint64_t *)(v168 + 8 * v169);
  }
  v173 = (uint64_t *)(v168 + 8 * v169);
LABEL_336:
  while (v172 != v173)
  {
    v174 = v172 + 1;
    llvm::MDNode::dropAllReferences(*v172);
    v172 = v170;
    if (v174 != v170)
    {
      v172 = v174;
      while ((*v172 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v172 == v170)
        {
          v172 = v170;
          goto LABEL_336;
        }
      }
    }
  }
  uint64_t v175 = *((void *)this + 124);
  uint64_t v176 = *((unsigned int *)this + 252);
  v177 = (uint64_t *)(v175 + 8 * v176);
  if (*((_DWORD *)this + 250))
  {
    if (v176)
    {
      uint64_t v178 = 8 * v176;
      v179 = (uint64_t *)*((void *)this + 124);
      while ((*v179 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v179;
        v178 -= 8;
        if (!v178) {
          goto LABEL_347;
        }
      }
    }
    else
    {
      v179 = (uint64_t *)*((void *)this + 124);
    }
  }
  else
  {
LABEL_347:
    v179 = (uint64_t *)(v175 + 8 * v176);
  }
  v180 = (uint64_t *)(v175 + 8 * v176);
LABEL_350:
  while (v179 != v180)
  {
    v181 = v179 + 1;
    llvm::MDNode::dropAllReferences(*v179);
    v179 = v177;
    if (v181 != v177)
    {
      v179 = v181;
      while ((*v179 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v179 == v177)
        {
          v179 = v177;
          goto LABEL_350;
        }
      }
    }
  }
  uint64_t v182 = *((void *)this + 127);
  uint64_t v183 = *((unsigned int *)this + 258);
  v184 = (uint64_t *)(v182 + 8 * v183);
  if (*((_DWORD *)this + 256))
  {
    if (v183)
    {
      uint64_t v185 = 8 * v183;
      v186 = (uint64_t *)*((void *)this + 127);
      while ((*v186 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v186;
        v185 -= 8;
        if (!v185) {
          goto LABEL_361;
        }
      }
    }
    else
    {
      v186 = (uint64_t *)*((void *)this + 127);
    }
  }
  else
  {
LABEL_361:
    v186 = (uint64_t *)(v182 + 8 * v183);
  }
  v187 = (uint64_t *)(v182 + 8 * v183);
LABEL_364:
  while (v186 != v187)
  {
    v188 = v186 + 1;
    llvm::MDNode::dropAllReferences(*v186);
    v186 = v184;
    if (v188 != v184)
    {
      v186 = v188;
      while ((*v186 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v186 == v184)
        {
          v186 = v184;
          goto LABEL_364;
        }
      }
    }
  }
  uint64_t v189 = *((void *)this + 130);
  uint64_t v190 = *((unsigned int *)this + 264);
  v191 = (uint64_t *)(v189 + 8 * v190);
  if (*((_DWORD *)this + 262))
  {
    if (v190)
    {
      uint64_t v192 = 8 * v190;
      v193 = (uint64_t *)*((void *)this + 130);
      while ((*v193 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v193;
        v192 -= 8;
        if (!v192) {
          goto LABEL_375;
        }
      }
    }
    else
    {
      v193 = (uint64_t *)*((void *)this + 130);
    }
  }
  else
  {
LABEL_375:
    v193 = (uint64_t *)(v189 + 8 * v190);
  }
  v194 = (uint64_t *)(v189 + 8 * v190);
LABEL_378:
  while (v193 != v194)
  {
    v195 = v193 + 1;
    llvm::MDNode::dropAllReferences(*v193);
    v193 = v191;
    if (v195 != v191)
    {
      v193 = v195;
      while ((*v193 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v193 == v191)
        {
          v193 = v191;
          goto LABEL_378;
        }
      }
    }
  }
  uint64_t v196 = *((void *)this + 133);
  uint64_t v197 = *((unsigned int *)this + 270);
  v198 = (uint64_t *)(v196 + 8 * v197);
  if (*((_DWORD *)this + 268))
  {
    if (v197)
    {
      uint64_t v199 = 8 * v197;
      v200 = (uint64_t *)*((void *)this + 133);
      while ((*v200 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v200;
        v199 -= 8;
        if (!v199) {
          goto LABEL_389;
        }
      }
    }
    else
    {
      v200 = (uint64_t *)*((void *)this + 133);
    }
  }
  else
  {
LABEL_389:
    v200 = (uint64_t *)(v196 + 8 * v197);
  }
  v201 = (uint64_t *)(v196 + 8 * v197);
LABEL_392:
  while (v200 != v201)
  {
    v202 = v200 + 1;
    llvm::MDNode::dropAllReferences(*v200);
    v200 = v198;
    if (v202 != v198)
    {
      v200 = v202;
      while ((*v200 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v200 == v198)
        {
          v200 = v198;
          goto LABEL_392;
        }
      }
    }
  }
  uint64_t v203 = *((void *)this + 136);
  uint64_t v204 = *((unsigned int *)this + 276);
  v205 = (llvm::DIArgList **)(v203 + 8 * v204);
  if (*((_DWORD *)this + 274))
  {
    if (v204)
    {
      uint64_t v206 = 8 * v204;
      v207 = (llvm::DIArgList **)*((void *)this + 136);
      while (((unint64_t)*v207 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v207;
        v206 -= 8;
        if (!v206) {
          goto LABEL_403;
        }
      }
    }
    else
    {
      v207 = (llvm::DIArgList **)*((void *)this + 136);
    }
  }
  else
  {
LABEL_403:
    v207 = (llvm::DIArgList **)(v203 + 8 * v204);
  }
  v208 = (llvm::DIArgList **)(v203 + 8 * v204);
LABEL_406:
  while (v207 != v208)
  {
    v209 = v207 + 1;
    llvm::DIArgList::dropAllReferences(*v207);
    v207 = v205;
    if (v209 != v205)
    {
      v207 = v209;
      while (((unint64_t)*v207 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v207 == v205)
        {
          v207 = v205;
          goto LABEL_406;
        }
      }
    }
  }
  uint64_t v210 = *((void *)this + 139);
  uint64_t v211 = *((unsigned int *)this + 282);
  v212 = (uint64_t *)(v210 + 8 * v211);
  if (*((_DWORD *)this + 280))
  {
    if (v211)
    {
      uint64_t v213 = 8 * v211;
      v214 = (uint64_t *)*((void *)this + 139);
      while ((*v214 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v214;
        v213 -= 8;
        if (!v213) {
          goto LABEL_417;
        }
      }
    }
    else
    {
      v214 = (uint64_t *)*((void *)this + 139);
    }
  }
  else
  {
LABEL_417:
    v214 = (uint64_t *)(v210 + 8 * v211);
  }
  v215 = (uint64_t *)(v210 + 8 * v211);
LABEL_420:
  while (v214 != v215)
  {
    v216 = v214 + 1;
    llvm::MDNode::dropAllReferences(*v214);
    v214 = v212;
    if (v216 != v212)
    {
      v214 = v216;
      while ((*v214 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v214 == v212)
        {
          v214 = v212;
          goto LABEL_420;
        }
      }
    }
  }
  uint64_t v217 = *((void *)this + 142);
  uint64_t v218 = *((unsigned int *)this + 288);
  v219 = (uint64_t *)(v217 + 8 * v218);
  if (*((_DWORD *)this + 286))
  {
    if (v218)
    {
      uint64_t v220 = 8 * v218;
      v221 = (uint64_t *)*((void *)this + 142);
      while ((*v221 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v221;
        v220 -= 8;
        if (!v220) {
          goto LABEL_431;
        }
      }
    }
    else
    {
      v221 = (uint64_t *)*((void *)this + 142);
    }
  }
  else
  {
LABEL_431:
    v221 = (uint64_t *)(v217 + 8 * v218);
  }
  v222 = (uint64_t *)(v217 + 8 * v218);
LABEL_434:
  while (v221 != v222)
  {
    v223 = v221 + 1;
    llvm::MDNode::dropAllReferences(*v221);
    v221 = v219;
    if (v223 != v219)
    {
      v221 = v223;
      while ((*v221 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v221 == v219)
        {
          v221 = v219;
          goto LABEL_434;
        }
      }
    }
  }
  uint64_t v224 = *((void *)this + 49);
  uint64_t v225 = *((unsigned int *)this + 102);
  v226 = (void *)(v224 + 16 * v225);
  if (*((_DWORD *)this + 100))
  {
    if (v225)
    {
      uint64_t v227 = 16 * v225;
      v228 = (void *)*((void *)this + 49);
      while ((*v228 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v228 += 2;
        v227 -= 16;
        if (!v227) {
          goto LABEL_445;
        }
      }
    }
    else
    {
      v228 = (void *)*((void *)this + 49);
    }
  }
  else
  {
LABEL_445:
    v228 = (void *)(v224 + 16 * v225);
  }
  v229 = (void *)(v224 + 16 * v225);
LABEL_448:
  while (v228 != v229)
  {
    llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v228[1] + 8), 0);
    v230 = v228 + 2;
    v228 = v226;
    if (v230 != v226)
    {
      v228 = v230;
      while ((*v228 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v228 += 2;
        if (v228 == v226)
        {
          v228 = v226;
          goto LABEL_448;
        }
      }
    }
  }
  uint64_t v231 = *((void *)this + 52);
  uint64_t v232 = *((unsigned int *)this + 108);
  v233 = (void *)(v231 + 16 * v232);
  if (*((_DWORD *)this + 106))
  {
    if (v232)
    {
      uint64_t v234 = 16 * v232;
      v235 = (void *)*((void *)this + 52);
      while ((*v235 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v235 += 2;
        v234 -= 16;
        if (!v234) {
          goto LABEL_459;
        }
      }
    }
    else
    {
      v235 = (void *)*((void *)this + 52);
    }
  }
  else
  {
LABEL_459:
    v235 = (void *)(v231 + 16 * v232);
  }
  v236 = (void *)(v231 + 16 * v232);
LABEL_462:
  while (v235 != v236)
  {
    *(void *)(v235[1] + 24) = 0;
    v237 = v235 + 2;
    v235 = v233;
    if (v237 != v233)
    {
      v235 = v237;
      while ((*v235 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v235 += 2;
        if (v235 == v233)
        {
          v235 = v233;
          goto LABEL_462;
        }
      }
    }
  }
  v238 = (llvm::MDNode **)*((void *)this + 149);
  v239 = (llvm::MDNode **)*((void *)this + 150);
  while (v238 != v239)
  {
    v240 = *v238++;
    llvm::MDNode::deleteAsSubclass(v240);
  }
  uint64_t v241 = *((void *)this + 55);
  uint64_t v242 = *((unsigned int *)this + 114);
  v243 = (uint64_t *)(v241 + 8 * v242);
  if (*((_DWORD *)this + 112))
  {
    if (v242)
    {
      uint64_t v244 = 8 * v242;
      v245 = (uint64_t *)*((void *)this + 55);
      while ((*v245 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v245;
        v244 -= 8;
        if (!v244) {
          goto LABEL_476;
        }
      }
    }
    else
    {
      v245 = (uint64_t *)*((void *)this + 55);
    }
  }
  else
  {
LABEL_476:
    v245 = (uint64_t *)(v241 + 8 * v242);
  }
  v246 = (uint64_t *)(v241 + 8 * v242);
LABEL_479:
  while (v245 != v246)
  {
    uint64_t v247 = *v245;
    if (*v245)
    {
      llvm::MDNode::dropAllReferences(*v245);
      sub_1CC5ECC54((uint64_t *)(v247 + 16));
      uint64_t v248 = *(unsigned int *)(v247 + 8);
      if (v248)
      {
        v249 = (unsigned __int8 **)(v247 - 8);
        for (uint64_t i = -8 * v248; i; i += 8)
        {
          v251 = *v249;
          if (*v249)
          {
            int v252 = *v251;
            if ((v252 - 4) > 0x1E)
            {
              if ((v252 - 3) >= 0xFFFFFFFE) {
                v255 = *v249;
              }
              else {
                v255 = 0;
              }
              if ((v252 - 3) < 0xFFFFFFFE)
              {
                if (v252 == 3) {
                  *((void *)v251 + 1) = 0;
                }
                goto LABEL_484;
              }
              unint64_t v254 = (unint64_t)(v255 + 8);
            }
            else
            {
              if ((v251[1] & 0x7F) != 2 && !*((_DWORD *)v251 + 3)) {
                goto LABEL_484;
              }
              uint64_t v253 = *((void *)v251 + 2);
              if ((v253 & 4) == 0) {
                goto LABEL_484;
              }
              unint64_t v254 = v253 & 0xFFFFFFFFFFFFFFF8;
              if (!v254) {
                goto LABEL_484;
              }
            }
            __src = v249;
            sub_1CC5FA668(v254 + 16, &__src);
          }
LABEL_484:
          --v249;
        }
      }
      operator delete((void *)(v247 - 8 * v248));
    }
    v256 = v245 + 1;
    v245 = v243;
    if (v256 != v243)
    {
      v245 = v256;
      while ((*v245 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v245 == v243)
        {
          v245 = v243;
          goto LABEL_479;
        }
      }
    }
  }
  uint64_t v257 = *((void *)this + 58);
  uint64_t v258 = *((unsigned int *)this + 120);
  v259 = (uint64_t *)(v257 + 8 * v258);
  if (*((_DWORD *)this + 118))
  {
    if (v258)
    {
      uint64_t v260 = 8 * v258;
      v261 = (uint64_t *)*((void *)this + 58);
      while ((*v261 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v261;
        v260 -= 8;
        if (!v260) {
          goto LABEL_511;
        }
      }
    }
    else
    {
      v261 = (uint64_t *)*((void *)this + 58);
    }
  }
  else
  {
LABEL_511:
    v261 = (uint64_t *)(v257 + 8 * v258);
  }
  v262 = (uint64_t *)(v257 + 8 * v258);
LABEL_514:
  while (v261 != v262)
  {
    uint64_t v263 = *v261;
    if (*v261)
    {
      llvm::MDNode::dropAllReferences(*v261);
      sub_1CC5ECC54((uint64_t *)(v263 + 16));
      uint64_t v264 = *(unsigned int *)(v263 + 8);
      if (v264)
      {
        v265 = (unsigned __int8 **)(v263 - 8);
        for (uint64_t j = -8 * v264; j; j += 8)
        {
          v267 = *v265;
          if (*v265)
          {
            int v268 = *v267;
            if ((v268 - 4) > 0x1E)
            {
              if ((v268 - 3) >= 0xFFFFFFFE) {
                v271 = *v265;
              }
              else {
                v271 = 0;
              }
              if ((v268 - 3) < 0xFFFFFFFE)
              {
                if (v268 == 3) {
                  *((void *)v267 + 1) = 0;
                }
                goto LABEL_519;
              }
              unint64_t v270 = (unint64_t)(v271 + 8);
            }
            else
            {
              if ((v267[1] & 0x7F) != 2 && !*((_DWORD *)v267 + 3)) {
                goto LABEL_519;
              }
              uint64_t v269 = *((void *)v267 + 2);
              if ((v269 & 4) == 0) {
                goto LABEL_519;
              }
              unint64_t v270 = v269 & 0xFFFFFFFFFFFFFFF8;
              if (!v270) {
                goto LABEL_519;
              }
            }
            __src = v265;
            sub_1CC5FA668(v270 + 16, &__src);
          }
LABEL_519:
          --v265;
        }
      }
      operator delete((void *)(v263 - 8 * v264));
    }
    v272 = v261 + 1;
    v261 = v259;
    if (v272 != v259)
    {
      v261 = v272;
      while ((*v261 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v261 == v259)
        {
          v261 = v259;
          goto LABEL_514;
        }
      }
    }
  }
  uint64_t v273 = *((void *)this + 61);
  uint64_t v274 = *((unsigned int *)this + 126);
  v275 = (uint64_t **)(v273 + 8 * v274);
  if (*((_DWORD *)this + 124))
  {
    if (v274)
    {
      uint64_t v276 = 8 * v274;
      v277 = (uint64_t **)*((void *)this + 61);
      while (((unint64_t)*v277 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v277;
        v276 -= 8;
        if (!v276) {
          goto LABEL_546;
        }
      }
    }
    else
    {
      v277 = (uint64_t **)*((void *)this + 61);
    }
  }
  else
  {
LABEL_546:
    v277 = (uint64_t **)(v273 + 8 * v274);
  }
  v278 = (uint64_t **)(v273 + 8 * v274);
LABEL_549:
  while (v277 != v278)
  {
    v279 = *v277;
    if (*v277)
    {
      sub_1CC5ECCB4(*v277);
      uint64_t v280 = *((unsigned int *)v279 + 2);
      if (v280)
      {
        v281 = v279 - 1;
        for (uint64_t k = -8 * v280; k; k += 8)
        {
          v283 = (unsigned __int8 *)*v281;
          if (*v281)
          {
            int v284 = *v283;
            if ((v284 - 4) > 0x1E)
            {
              if ((v284 - 3) >= 0xFFFFFFFE) {
                uint64_t v287 = *v281;
              }
              else {
                uint64_t v287 = 0;
              }
              if ((v284 - 3) < 0xFFFFFFFE)
              {
                if (v284 == 3) {
                  *((void *)v283 + 1) = 0;
                }
                goto LABEL_554;
              }
              unint64_t v286 = v287 + 8;
            }
            else
            {
              if ((v283[1] & 0x7F) != 2 && !*((_DWORD *)v283 + 3)) {
                goto LABEL_554;
              }
              uint64_t v285 = *((void *)v283 + 2);
              if ((v285 & 4) == 0) {
                goto LABEL_554;
              }
              unint64_t v286 = v285 & 0xFFFFFFFFFFFFFFF8;
              if (!v286) {
                goto LABEL_554;
              }
            }
            __src = v281;
            sub_1CC5FA668(v286 + 16, &__src);
          }
LABEL_554:
          --v281;
        }
      }
      operator delete(&v279[-v280]);
    }
    v288 = v277 + 1;
    v277 = v275;
    if (v288 != v275)
    {
      v277 = v288;
      while (((unint64_t)*v277 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v277 == v275)
        {
          v277 = v275;
          goto LABEL_549;
        }
      }
    }
  }
  uint64_t v289 = *((void *)this + 64);
  uint64_t v290 = *((unsigned int *)this + 132);
  v291 = (uint64_t *)(v289 + 8 * v290);
  if (*((_DWORD *)this + 130))
  {
    if (v290)
    {
      uint64_t v292 = 8 * v290;
      v293 = (uint64_t *)*((void *)this + 64);
      while ((*v293 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v293;
        v292 -= 8;
        if (!v292) {
          goto LABEL_581;
        }
      }
    }
    else
    {
      v293 = (uint64_t *)*((void *)this + 64);
    }
  }
  else
  {
LABEL_581:
    v293 = (uint64_t *)(v289 + 8 * v290);
  }
  v294 = (uint64_t *)(v289 + 8 * v290);
LABEL_584:
  while (v293 != v294)
  {
    uint64_t v295 = *v293;
    if (*v293)
    {
      sub_1CC5ECC54((uint64_t *)(v295 + 16));
      uint64_t v296 = *(unsigned int *)(v295 + 8);
      if (v296)
      {
        v297 = (unsigned __int8 **)(v295 - 8);
        for (uint64_t m = -8 * v296; m; m += 8)
        {
          v299 = *v297;
          if (*v297)
          {
            int v300 = *v299;
            if ((v300 - 4) > 0x1E)
            {
              if ((v300 - 3) >= 0xFFFFFFFE) {
                v303 = *v297;
              }
              else {
                v303 = 0;
              }
              if ((v300 - 3) < 0xFFFFFFFE)
              {
                if (v300 == 3) {
                  *((void *)v299 + 1) = 0;
                }
                goto LABEL_589;
              }
              unint64_t v302 = (unint64_t)(v303 + 8);
            }
            else
            {
              if ((v299[1] & 0x7F) != 2 && !*((_DWORD *)v299 + 3)) {
                goto LABEL_589;
              }
              uint64_t v301 = *((void *)v299 + 2);
              if ((v301 & 4) == 0) {
                goto LABEL_589;
              }
              unint64_t v302 = v301 & 0xFFFFFFFFFFFFFFF8;
              if (!v302) {
                goto LABEL_589;
              }
            }
            __src = v297;
            sub_1CC5FA668(v302 + 16, &__src);
          }
LABEL_589:
          --v297;
        }
      }
      operator delete((void *)(v295 - 8 * v296));
    }
    v304 = v293 + 1;
    v293 = v291;
    if (v304 != v291)
    {
      v293 = v304;
      while ((*v293 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v293 == v291)
        {
          v293 = v291;
          goto LABEL_584;
        }
      }
    }
  }
  uint64_t v305 = *((void *)this + 67);
  uint64_t v306 = *((unsigned int *)this + 138);
  v307 = (uint64_t *)(v305 + 8 * v306);
  if (*((_DWORD *)this + 136))
  {
    if (v306)
    {
      uint64_t v308 = 8 * v306;
      v309 = (uint64_t *)*((void *)this + 67);
      while ((*v309 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v309;
        v308 -= 8;
        if (!v308) {
          goto LABEL_616;
        }
      }
    }
    else
    {
      v309 = (uint64_t *)*((void *)this + 67);
    }
  }
  else
  {
LABEL_616:
    v309 = (uint64_t *)(v305 + 8 * v306);
  }
  v310 = (uint64_t *)(v305 + 8 * v306);
LABEL_619:
  while (v309 != v310)
  {
    uint64_t v311 = *v309;
    if (*v309)
    {
      llvm::MDNode::dropAllReferences(*v309);
      sub_1CC5ECC54((uint64_t *)(v311 + 16));
      uint64_t v312 = *(unsigned int *)(v311 + 8);
      if (v312)
      {
        v313 = (unsigned __int8 **)(v311 - 8);
        for (uint64_t n = -8 * v312; n; n += 8)
        {
          v315 = *v313;
          if (*v313)
          {
            int v316 = *v315;
            if ((v316 - 4) > 0x1E)
            {
              if ((v316 - 3) >= 0xFFFFFFFE) {
                v319 = *v313;
              }
              else {
                v319 = 0;
              }
              if ((v316 - 3) < 0xFFFFFFFE)
              {
                if (v316 == 3) {
                  *((void *)v315 + 1) = 0;
                }
                goto LABEL_624;
              }
              unint64_t v318 = (unint64_t)(v319 + 8);
            }
            else
            {
              if ((v315[1] & 0x7F) != 2 && !*((_DWORD *)v315 + 3)) {
                goto LABEL_624;
              }
              uint64_t v317 = *((void *)v315 + 2);
              if ((v317 & 4) == 0) {
                goto LABEL_624;
              }
              unint64_t v318 = v317 & 0xFFFFFFFFFFFFFFF8;
              if (!v318) {
                goto LABEL_624;
              }
            }
            __src = v313;
            sub_1CC5FA668(v318 + 16, &__src);
          }
LABEL_624:
          --v313;
        }
      }
      operator delete((void *)(v311 - 8 * v312));
    }
    v320 = v309 + 1;
    v309 = v307;
    if (v320 != v307)
    {
      v309 = v320;
      while ((*v309 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v309 == v307)
        {
          v309 = v307;
          goto LABEL_619;
        }
      }
    }
  }
  uint64_t v321 = *((void *)this + 70);
  uint64_t v322 = *((unsigned int *)this + 144);
  v323 = (uint64_t *)(v321 + 8 * v322);
  if (*((_DWORD *)this + 142))
  {
    if (v322)
    {
      uint64_t v324 = 8 * v322;
      v325 = (uint64_t *)*((void *)this + 70);
      while ((*v325 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v325;
        v324 -= 8;
        if (!v324) {
          goto LABEL_651;
        }
      }
    }
    else
    {
      v325 = (uint64_t *)*((void *)this + 70);
    }
  }
  else
  {
LABEL_651:
    v325 = (uint64_t *)(v321 + 8 * v322);
  }
  v326 = (uint64_t *)(v321 + 8 * v322);
LABEL_654:
  while (v325 != v326)
  {
    uint64_t v327 = *v325;
    if (*v325)
    {
      sub_1CC5ECC54((uint64_t *)(v327 + 16));
      uint64_t v328 = *(unsigned int *)(v327 + 8);
      if (v328)
      {
        v329 = (unsigned __int8 **)(v327 - 8);
        for (iuint64_t i = -8 * v328; ii; ii += 8)
        {
          v331 = *v329;
          if (*v329)
          {
            int v332 = *v331;
            if ((v332 - 4) > 0x1E)
            {
              if ((v332 - 3) >= 0xFFFFFFFE) {
                v335 = *v329;
              }
              else {
                v335 = 0;
              }
              if ((v332 - 3) < 0xFFFFFFFE)
              {
                if (v332 == 3) {
                  *((void *)v331 + 1) = 0;
                }
                goto LABEL_659;
              }
              unint64_t v334 = (unint64_t)(v335 + 8);
            }
            else
            {
              if ((v331[1] & 0x7F) != 2 && !*((_DWORD *)v331 + 3)) {
                goto LABEL_659;
              }
              uint64_t v333 = *((void *)v331 + 2);
              if ((v333 & 4) == 0) {
                goto LABEL_659;
              }
              unint64_t v334 = v333 & 0xFFFFFFFFFFFFFFF8;
              if (!v334) {
                goto LABEL_659;
              }
            }
            __src = v329;
            sub_1CC5FA668(v334 + 16, &__src);
          }
LABEL_659:
          --v329;
        }
      }
      operator delete((void *)(v327 - 8 * v328));
    }
    v336 = v325 + 1;
    v325 = v323;
    if (v336 != v323)
    {
      v325 = v336;
      while ((*v325 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v325 == v323)
        {
          v325 = v323;
          goto LABEL_654;
        }
      }
    }
  }
  uint64_t v337 = *((void *)this + 73);
  uint64_t v338 = *((unsigned int *)this + 150);
  v339 = (uint64_t *)(v337 + 8 * v338);
  if (*((_DWORD *)this + 148))
  {
    if (v338)
    {
      uint64_t v340 = 8 * v338;
      v341 = (uint64_t *)*((void *)this + 73);
      while ((*v341 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v341;
        v340 -= 8;
        if (!v340) {
          goto LABEL_686;
        }
      }
    }
    else
    {
      v341 = (uint64_t *)*((void *)this + 73);
    }
  }
  else
  {
LABEL_686:
    v341 = (uint64_t *)(v337 + 8 * v338);
  }
  v342 = (uint64_t *)(v337 + 8 * v338);
LABEL_689:
  while (v341 != v342)
  {
    uint64_t v343 = *v341;
    if (*v341)
    {
      if (*(_DWORD *)(v343 + 32) >= 0x41u)
      {
        uint64_t v344 = *(void *)(v343 + 24);
        if (v344) {
          MEMORY[0x1D25D9CB0](v344, 0x1000C8000313F17);
        }
      }
      sub_1CC5ECC54((uint64_t *)(v343 + 16));
      uint64_t v345 = *(unsigned int *)(v343 + 8);
      if (v345)
      {
        v346 = (unsigned __int8 **)(v343 - 8);
        for (juint64_t j = -8 * v345; jj; jj += 8)
        {
          v348 = *v346;
          if (*v346)
          {
            int v349 = *v348;
            if ((v349 - 4) > 0x1E)
            {
              if ((v349 - 3) >= 0xFFFFFFFE) {
                v352 = *v346;
              }
              else {
                v352 = 0;
              }
              if ((v349 - 3) < 0xFFFFFFFE)
              {
                if (v349 == 3) {
                  *((void *)v348 + 1) = 0;
                }
                goto LABEL_697;
              }
              unint64_t v351 = (unint64_t)(v352 + 8);
            }
            else
            {
              if ((v348[1] & 0x7F) != 2 && !*((_DWORD *)v348 + 3)) {
                goto LABEL_697;
              }
              uint64_t v350 = *((void *)v348 + 2);
              if ((v350 & 4) == 0) {
                goto LABEL_697;
              }
              unint64_t v351 = v350 & 0xFFFFFFFFFFFFFFF8;
              if (!v351) {
                goto LABEL_697;
              }
            }
            __src = v346;
            sub_1CC5FA668(v351 + 16, &__src);
          }
LABEL_697:
          --v346;
        }
      }
      operator delete((void *)(v343 - 8 * v345));
    }
    v353 = v341 + 1;
    v341 = v339;
    if (v353 != v339)
    {
      v341 = v353;
      while ((*v341 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v341 == v339)
        {
          v341 = v339;
          goto LABEL_689;
        }
      }
    }
  }
  uint64_t v354 = *((void *)this + 76);
  uint64_t v355 = *((unsigned int *)this + 156);
  v356 = (uint64_t *)(v354 + 8 * v355);
  if (*((_DWORD *)this + 154))
  {
    if (v355)
    {
      uint64_t v357 = 8 * v355;
      v358 = (uint64_t *)*((void *)this + 76);
      while ((*v358 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v358;
        v357 -= 8;
        if (!v357) {
          goto LABEL_724;
        }
      }
    }
    else
    {
      v358 = (uint64_t *)*((void *)this + 76);
    }
  }
  else
  {
LABEL_724:
    v358 = (uint64_t *)(v354 + 8 * v355);
  }
  v359 = (uint64_t *)(v354 + 8 * v355);
LABEL_727:
  while (v358 != v359)
  {
    uint64_t v360 = *v358;
    if (*v358)
    {
      sub_1CC5ECC54((uint64_t *)(v360 + 16));
      uint64_t v361 = *(unsigned int *)(v360 + 8);
      if (v361)
      {
        v362 = (unsigned __int8 **)(v360 - 8);
        for (kuint64_t k = -8 * v361; kk; kk += 8)
        {
          v364 = *v362;
          if (*v362)
          {
            int v365 = *v364;
            if ((v365 - 4) > 0x1E)
            {
              if ((v365 - 3) >= 0xFFFFFFFE) {
                v368 = *v362;
              }
              else {
                v368 = 0;
              }
              if ((v365 - 3) < 0xFFFFFFFE)
              {
                if (v365 == 3) {
                  *((void *)v364 + 1) = 0;
                }
                goto LABEL_732;
              }
              unint64_t v367 = (unint64_t)(v368 + 8);
            }
            else
            {
              if ((v364[1] & 0x7F) != 2 && !*((_DWORD *)v364 + 3)) {
                goto LABEL_732;
              }
              uint64_t v366 = *((void *)v364 + 2);
              if ((v366 & 4) == 0) {
                goto LABEL_732;
              }
              unint64_t v367 = v366 & 0xFFFFFFFFFFFFFFF8;
              if (!v367) {
                goto LABEL_732;
              }
            }
            __src = v362;
            sub_1CC5FA668(v367 + 16, &__src);
          }
LABEL_732:
          --v362;
        }
      }
      operator delete((void *)(v360 - 8 * v361));
    }
    v369 = v358 + 1;
    v358 = v356;
    if (v369 != v356)
    {
      v358 = v369;
      while ((*v358 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v358 == v356)
        {
          v358 = v356;
          goto LABEL_727;
        }
      }
    }
  }
  uint64_t v370 = *((void *)this + 79);
  uint64_t v371 = *((unsigned int *)this + 162);
  v372 = (uint64_t *)(v370 + 8 * v371);
  if (*((_DWORD *)this + 160))
  {
    if (v371)
    {
      uint64_t v373 = 8 * v371;
      v374 = (uint64_t *)*((void *)this + 79);
      while ((*v374 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v374;
        v373 -= 8;
        if (!v373) {
          goto LABEL_759;
        }
      }
    }
    else
    {
      v374 = (uint64_t *)*((void *)this + 79);
    }
  }
  else
  {
LABEL_759:
    v374 = (uint64_t *)(v370 + 8 * v371);
  }
  v375 = (uint64_t *)(v370 + 8 * v371);
LABEL_762:
  while (v374 != v375)
  {
    uint64_t v376 = *v374;
    if (*v374)
    {
      sub_1CC5ECC54((uint64_t *)(v376 + 16));
      uint64_t v377 = *(unsigned int *)(v376 + 8);
      if (v377)
      {
        v378 = (unsigned __int8 **)(v376 - 8);
        for (muint64_t m = -8 * v377; mm; mm += 8)
        {
          v380 = *v378;
          if (*v378)
          {
            int v381 = *v380;
            if ((v381 - 4) > 0x1E)
            {
              if ((v381 - 3) >= 0xFFFFFFFE) {
                v384 = *v378;
              }
              else {
                v384 = 0;
              }
              if ((v381 - 3) < 0xFFFFFFFE)
              {
                if (v381 == 3) {
                  *((void *)v380 + 1) = 0;
                }
                goto LABEL_767;
              }
              unint64_t v383 = (unint64_t)(v384 + 8);
            }
            else
            {
              if ((v380[1] & 0x7F) != 2 && !*((_DWORD *)v380 + 3)) {
                goto LABEL_767;
              }
              uint64_t v382 = *((void *)v380 + 2);
              if ((v382 & 4) == 0) {
                goto LABEL_767;
              }
              unint64_t v383 = v382 & 0xFFFFFFFFFFFFFFF8;
              if (!v383) {
                goto LABEL_767;
              }
            }
            __src = v378;
            sub_1CC5FA668(v383 + 16, &__src);
          }
LABEL_767:
          --v378;
        }
      }
      operator delete((void *)(v376 - 8 * v377));
    }
    v385 = v374 + 1;
    v374 = v372;
    if (v385 != v372)
    {
      v374 = v385;
      while ((*v374 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v374 == v372)
        {
          v374 = v372;
          goto LABEL_762;
        }
      }
    }
  }
  uint64_t v386 = *((void *)this + 82);
  uint64_t v387 = *((unsigned int *)this + 168);
  v388 = (uint64_t *)(v386 + 8 * v387);
  if (*((_DWORD *)this + 166))
  {
    if (v387)
    {
      uint64_t v389 = 8 * v387;
      v390 = (uint64_t *)*((void *)this + 82);
      while ((*v390 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v390;
        v389 -= 8;
        if (!v389) {
          goto LABEL_794;
        }
      }
    }
    else
    {
      v390 = (uint64_t *)*((void *)this + 82);
    }
  }
  else
  {
LABEL_794:
    v390 = (uint64_t *)(v386 + 8 * v387);
  }
  v391 = (uint64_t *)(v386 + 8 * v387);
LABEL_797:
  while (v390 != v391)
  {
    uint64_t v392 = *v390;
    if (*v390)
    {
      sub_1CC5ECC54((uint64_t *)(v392 + 16));
      uint64_t v393 = *(unsigned int *)(v392 + 8);
      if (v393)
      {
        v394 = (unsigned __int8 **)(v392 - 8);
        for (nuint64_t n = -8 * v393; nn; nn += 8)
        {
          v396 = *v394;
          if (*v394)
          {
            int v397 = *v396;
            if ((v397 - 4) > 0x1E)
            {
              if ((v397 - 3) >= 0xFFFFFFFE) {
                v400 = *v394;
              }
              else {
                v400 = 0;
              }
              if ((v397 - 3) < 0xFFFFFFFE)
              {
                if (v397 == 3) {
                  *((void *)v396 + 1) = 0;
                }
                goto LABEL_802;
              }
              unint64_t v399 = (unint64_t)(v400 + 8);
            }
            else
            {
              if ((v396[1] & 0x7F) != 2 && !*((_DWORD *)v396 + 3)) {
                goto LABEL_802;
              }
              uint64_t v398 = *((void *)v396 + 2);
              if ((v398 & 4) == 0) {
                goto LABEL_802;
              }
              unint64_t v399 = v398 & 0xFFFFFFFFFFFFFFF8;
              if (!v399) {
                goto LABEL_802;
              }
            }
            __src = v394;
            sub_1CC5FA668(v399 + 16, &__src);
          }
LABEL_802:
          --v394;
        }
      }
      operator delete((void *)(v392 - 8 * v393));
    }
    v401 = v390 + 1;
    v390 = v388;
    if (v401 != v388)
    {
      v390 = v401;
      while ((*v390 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v390 == v388)
        {
          v390 = v388;
          goto LABEL_797;
        }
      }
    }
  }
  uint64_t v402 = *((void *)this + 85);
  uint64_t v403 = *((unsigned int *)this + 174);
  v404 = (uint64_t *)(v402 + 8 * v403);
  if (*((_DWORD *)this + 172))
  {
    if (v403)
    {
      uint64_t v405 = 8 * v403;
      v406 = (uint64_t *)*((void *)this + 85);
      while ((*v406 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v406;
        v405 -= 8;
        if (!v405) {
          goto LABEL_829;
        }
      }
    }
    else
    {
      v406 = (uint64_t *)*((void *)this + 85);
    }
  }
  else
  {
LABEL_829:
    v406 = (uint64_t *)(v402 + 8 * v403);
  }
  v407 = (uint64_t *)(v402 + 8 * v403);
LABEL_832:
  while (v406 != v407)
  {
    uint64_t v408 = *v406;
    if (*v406)
    {
      sub_1CC5ECC54((uint64_t *)(v408 + 16));
      uint64_t v409 = *(unsigned int *)(v408 + 8);
      if (v409)
      {
        v410 = (unsigned __int8 **)(v408 - 8);
        for (uint64_t i1 = -8 * v409; i1; i1 += 8)
        {
          v412 = *v410;
          if (*v410)
          {
            int v413 = *v412;
            if ((v413 - 4) > 0x1E)
            {
              if ((v413 - 3) >= 0xFFFFFFFE) {
                v416 = *v410;
              }
              else {
                v416 = 0;
              }
              if ((v413 - 3) < 0xFFFFFFFE)
              {
                if (v413 == 3) {
                  *((void *)v412 + 1) = 0;
                }
                goto LABEL_837;
              }
              unint64_t v415 = (unint64_t)(v416 + 8);
            }
            else
            {
              if ((v412[1] & 0x7F) != 2 && !*((_DWORD *)v412 + 3)) {
                goto LABEL_837;
              }
              uint64_t v414 = *((void *)v412 + 2);
              if ((v414 & 4) == 0) {
                goto LABEL_837;
              }
              unint64_t v415 = v414 & 0xFFFFFFFFFFFFFFF8;
              if (!v415) {
                goto LABEL_837;
              }
            }
            __src = v410;
            sub_1CC5FA668(v415 + 16, &__src);
          }
LABEL_837:
          --v410;
        }
      }
      operator delete((void *)(v408 - 8 * v409));
    }
    v417 = v406 + 1;
    v406 = v404;
    if (v417 != v404)
    {
      v406 = v417;
      while ((*v406 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v406 == v404)
        {
          v406 = v404;
          goto LABEL_832;
        }
      }
    }
  }
  uint64_t v418 = *((void *)this + 88);
  uint64_t v419 = *((unsigned int *)this + 180);
  v420 = (uint64_t *)(v418 + 8 * v419);
  if (*((_DWORD *)this + 178))
  {
    if (v419)
    {
      uint64_t v421 = 8 * v419;
      v422 = (uint64_t *)*((void *)this + 88);
      while ((*v422 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v422;
        v421 -= 8;
        if (!v421) {
          goto LABEL_864;
        }
      }
    }
    else
    {
      v422 = (uint64_t *)*((void *)this + 88);
    }
  }
  else
  {
LABEL_864:
    v422 = (uint64_t *)(v418 + 8 * v419);
  }
  v423 = (uint64_t *)(v418 + 8 * v419);
LABEL_867:
  while (v422 != v423)
  {
    uint64_t v424 = *v422;
    if (*v422)
    {
      sub_1CC5ECC54((uint64_t *)(v424 + 16));
      uint64_t v425 = *(unsigned int *)(v424 + 8);
      if (v425)
      {
        v426 = (unsigned __int8 **)(v424 - 8);
        for (uint64_t i2 = -8 * v425; i2; i2 += 8)
        {
          v428 = *v426;
          if (*v426)
          {
            int v429 = *v428;
            if ((v429 - 4) > 0x1E)
            {
              if ((v429 - 3) >= 0xFFFFFFFE) {
                v432 = *v426;
              }
              else {
                v432 = 0;
              }
              if ((v429 - 3) < 0xFFFFFFFE)
              {
                if (v429 == 3) {
                  *((void *)v428 + 1) = 0;
                }
                goto LABEL_872;
              }
              unint64_t v431 = (unint64_t)(v432 + 8);
            }
            else
            {
              if ((v428[1] & 0x7F) != 2 && !*((_DWORD *)v428 + 3)) {
                goto LABEL_872;
              }
              uint64_t v430 = *((void *)v428 + 2);
              if ((v430 & 4) == 0) {
                goto LABEL_872;
              }
              unint64_t v431 = v430 & 0xFFFFFFFFFFFFFFF8;
              if (!v431) {
                goto LABEL_872;
              }
            }
            __src = v426;
            sub_1CC5FA668(v431 + 16, &__src);
          }
LABEL_872:
          --v426;
        }
      }
      operator delete((void *)(v424 - 8 * v425));
    }
    v433 = v422 + 1;
    v422 = v420;
    if (v433 != v420)
    {
      v422 = v433;
      while ((*v422 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v422 == v420)
        {
          v422 = v420;
          goto LABEL_867;
        }
      }
    }
  }
  uint64_t v434 = *((void *)this + 91);
  uint64_t v435 = *((unsigned int *)this + 186);
  v436 = (uint64_t *)(v434 + 8 * v435);
  if (*((_DWORD *)this + 184))
  {
    if (v435)
    {
      uint64_t v437 = 8 * v435;
      v438 = (uint64_t *)*((void *)this + 91);
      while ((*v438 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v438;
        v437 -= 8;
        if (!v437) {
          goto LABEL_899;
        }
      }
    }
    else
    {
      v438 = (uint64_t *)*((void *)this + 91);
    }
  }
  else
  {
LABEL_899:
    v438 = (uint64_t *)(v434 + 8 * v435);
  }
  v439 = (uint64_t *)(v434 + 8 * v435);
LABEL_902:
  while (v438 != v439)
  {
    uint64_t v440 = *v438;
    if (*v438)
    {
      sub_1CC5ECC54((uint64_t *)(v440 + 16));
      uint64_t v441 = *(unsigned int *)(v440 + 8);
      if (v441)
      {
        v442 = (unsigned __int8 **)(v440 - 8);
        for (uint64_t i3 = -8 * v441; i3; i3 += 8)
        {
          v444 = *v442;
          if (*v442)
          {
            int v445 = *v444;
            if ((v445 - 4) > 0x1E)
            {
              if ((v445 - 3) >= 0xFFFFFFFE) {
                v448 = *v442;
              }
              else {
                v448 = 0;
              }
              if ((v445 - 3) < 0xFFFFFFFE)
              {
                if (v445 == 3) {
                  *((void *)v444 + 1) = 0;
                }
                goto LABEL_907;
              }
              unint64_t v447 = (unint64_t)(v448 + 8);
            }
            else
            {
              if ((v444[1] & 0x7F) != 2 && !*((_DWORD *)v444 + 3)) {
                goto LABEL_907;
              }
              uint64_t v446 = *((void *)v444 + 2);
              if ((v446 & 4) == 0) {
                goto LABEL_907;
              }
              unint64_t v447 = v446 & 0xFFFFFFFFFFFFFFF8;
              if (!v447) {
                goto LABEL_907;
              }
            }
            __src = v442;
            sub_1CC5FA668(v447 + 16, &__src);
          }
LABEL_907:
          --v442;
        }
      }
      operator delete((void *)(v440 - 8 * v441));
    }
    v449 = v438 + 1;
    v438 = v436;
    if (v449 != v436)
    {
      v438 = v449;
      while ((*v438 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v438 == v436)
        {
          v438 = v436;
          goto LABEL_902;
        }
      }
    }
  }
  uint64_t v450 = *((void *)this + 94);
  uint64_t v451 = *((unsigned int *)this + 192);
  v452 = (uint64_t *)(v450 + 8 * v451);
  if (*((_DWORD *)this + 190))
  {
    if (v451)
    {
      uint64_t v453 = 8 * v451;
      v454 = (uint64_t *)*((void *)this + 94);
      while ((*v454 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v454;
        v453 -= 8;
        if (!v453) {
          goto LABEL_934;
        }
      }
    }
    else
    {
      v454 = (uint64_t *)*((void *)this + 94);
    }
  }
  else
  {
LABEL_934:
    v454 = (uint64_t *)(v450 + 8 * v451);
  }
  v455 = (uint64_t *)(v450 + 8 * v451);
LABEL_937:
  while (v454 != v455)
  {
    uint64_t v456 = *v454;
    if (*v454)
    {
      sub_1CC5ECC54((uint64_t *)(v456 + 16));
      uint64_t v457 = *(unsigned int *)(v456 + 8);
      if (v457)
      {
        v458 = (unsigned __int8 **)(v456 - 8);
        for (uint64_t i4 = -8 * v457; i4; i4 += 8)
        {
          v460 = *v458;
          if (*v458)
          {
            int v461 = *v460;
            if ((v461 - 4) > 0x1E)
            {
              if ((v461 - 3) >= 0xFFFFFFFE) {
                v464 = *v458;
              }
              else {
                v464 = 0;
              }
              if ((v461 - 3) < 0xFFFFFFFE)
              {
                if (v461 == 3) {
                  *((void *)v460 + 1) = 0;
                }
                goto LABEL_942;
              }
              unint64_t v463 = (unint64_t)(v464 + 8);
            }
            else
            {
              if ((v460[1] & 0x7F) != 2 && !*((_DWORD *)v460 + 3)) {
                goto LABEL_942;
              }
              uint64_t v462 = *((void *)v460 + 2);
              if ((v462 & 4) == 0) {
                goto LABEL_942;
              }
              unint64_t v463 = v462 & 0xFFFFFFFFFFFFFFF8;
              if (!v463) {
                goto LABEL_942;
              }
            }
            __src = v458;
            sub_1CC5FA668(v463 + 16, &__src);
          }
LABEL_942:
          --v458;
        }
      }
      operator delete((void *)(v456 - 8 * v457));
    }
    v465 = v454 + 1;
    v454 = v452;
    if (v465 != v452)
    {
      v454 = v465;
      while ((*v454 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v454 == v452)
        {
          v454 = v452;
          goto LABEL_937;
        }
      }
    }
  }
  uint64_t v466 = *((void *)this + 97);
  uint64_t v467 = *((unsigned int *)this + 198);
  v468 = (uint64_t *)(v466 + 8 * v467);
  if (*((_DWORD *)this + 196))
  {
    if (v467)
    {
      uint64_t v469 = 8 * v467;
      v470 = (uint64_t *)*((void *)this + 97);
      while ((*v470 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v470;
        v469 -= 8;
        if (!v469) {
          goto LABEL_969;
        }
      }
    }
    else
    {
      v470 = (uint64_t *)*((void *)this + 97);
    }
  }
  else
  {
LABEL_969:
    v470 = (uint64_t *)(v466 + 8 * v467);
  }
  v471 = (uint64_t *)(v466 + 8 * v467);
LABEL_972:
  while (v470 != v471)
  {
    uint64_t v472 = *v470;
    if (*v470)
    {
      sub_1CC5ECC54((uint64_t *)(v472 + 16));
      uint64_t v473 = *(unsigned int *)(v472 + 8);
      if (v473)
      {
        v474 = (unsigned __int8 **)(v472 - 8);
        for (uint64_t i5 = -8 * v473; i5; i5 += 8)
        {
          v476 = *v474;
          if (*v474)
          {
            int v477 = *v476;
            if ((v477 - 4) > 0x1E)
            {
              if ((v477 - 3) >= 0xFFFFFFFE) {
                v480 = *v474;
              }
              else {
                v480 = 0;
              }
              if ((v477 - 3) < 0xFFFFFFFE)
              {
                if (v477 == 3) {
                  *((void *)v476 + 1) = 0;
                }
                goto LABEL_977;
              }
              unint64_t v479 = (unint64_t)(v480 + 8);
            }
            else
            {
              if ((v476[1] & 0x7F) != 2 && !*((_DWORD *)v476 + 3)) {
                goto LABEL_977;
              }
              uint64_t v478 = *((void *)v476 + 2);
              if ((v478 & 4) == 0) {
                goto LABEL_977;
              }
              unint64_t v479 = v478 & 0xFFFFFFFFFFFFFFF8;
              if (!v479) {
                goto LABEL_977;
              }
            }
            __src = v474;
            sub_1CC5FA668(v479 + 16, &__src);
          }
LABEL_977:
          --v474;
        }
      }
      operator delete((void *)(v472 - 8 * v473));
    }
    v481 = v470 + 1;
    v470 = v468;
    if (v481 != v468)
    {
      v470 = v481;
      while ((*v470 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v470 == v468)
        {
          v470 = v468;
          goto LABEL_972;
        }
      }
    }
  }
  uint64_t v482 = *((void *)this + 100);
  uint64_t v483 = *((unsigned int *)this + 204);
  v484 = (uint64_t *)(v482 + 8 * v483);
  if (*((_DWORD *)this + 202))
  {
    if (v483)
    {
      uint64_t v485 = 8 * v483;
      v486 = (uint64_t *)*((void *)this + 100);
      while ((*v486 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v486;
        v485 -= 8;
        if (!v485) {
          goto LABEL_1004;
        }
      }
    }
    else
    {
      v486 = (uint64_t *)*((void *)this + 100);
    }
  }
  else
  {
LABEL_1004:
    v486 = (uint64_t *)(v482 + 8 * v483);
  }
  v487 = (uint64_t *)(v482 + 8 * v483);
LABEL_1007:
  while (v486 != v487)
  {
    uint64_t v488 = *v486;
    if (*v486)
    {
      sub_1CC5ECC54((uint64_t *)(v488 + 16));
      uint64_t v489 = *(unsigned int *)(v488 + 8);
      if (v489)
      {
        v490 = (unsigned __int8 **)(v488 - 8);
        for (uint64_t i6 = -8 * v489; i6; i6 += 8)
        {
          v492 = *v490;
          if (*v490)
          {
            int v493 = *v492;
            if ((v493 - 4) > 0x1E)
            {
              if ((v493 - 3) >= 0xFFFFFFFE) {
                v496 = *v490;
              }
              else {
                v496 = 0;
              }
              if ((v493 - 3) < 0xFFFFFFFE)
              {
                if (v493 == 3) {
                  *((void *)v492 + 1) = 0;
                }
                goto LABEL_1012;
              }
              unint64_t v495 = (unint64_t)(v496 + 8);
            }
            else
            {
              if ((v492[1] & 0x7F) != 2 && !*((_DWORD *)v492 + 3)) {
                goto LABEL_1012;
              }
              uint64_t v494 = *((void *)v492 + 2);
              if ((v494 & 4) == 0) {
                goto LABEL_1012;
              }
              unint64_t v495 = v494 & 0xFFFFFFFFFFFFFFF8;
              if (!v495) {
                goto LABEL_1012;
              }
            }
            __src = v490;
            sub_1CC5FA668(v495 + 16, &__src);
          }
LABEL_1012:
          --v490;
        }
      }
      operator delete((void *)(v488 - 8 * v489));
    }
    v497 = v486 + 1;
    v486 = v484;
    if (v497 != v484)
    {
      v486 = v497;
      while ((*v486 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v486 == v484)
        {
          v486 = v484;
          goto LABEL_1007;
        }
      }
    }
  }
  uint64_t v498 = *((void *)this + 103);
  uint64_t v499 = *((unsigned int *)this + 210);
  v500 = (uint64_t *)(v498 + 8 * v499);
  if (*((_DWORD *)this + 208))
  {
    if (v499)
    {
      uint64_t v501 = 8 * v499;
      v502 = (uint64_t *)*((void *)this + 103);
      while ((*v502 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v502;
        v501 -= 8;
        if (!v501) {
          goto LABEL_1039;
        }
      }
    }
    else
    {
      v502 = (uint64_t *)*((void *)this + 103);
    }
  }
  else
  {
LABEL_1039:
    v502 = (uint64_t *)(v498 + 8 * v499);
  }
  v503 = (uint64_t *)(v498 + 8 * v499);
LABEL_1042:
  while (v502 != v503)
  {
    uint64_t v504 = *v502;
    if (*v502)
    {
      sub_1CC5ECC54((uint64_t *)(v504 + 16));
      uint64_t v505 = *(unsigned int *)(v504 + 8);
      if (v505)
      {
        v506 = (unsigned __int8 **)(v504 - 8);
        for (uint64_t i7 = -8 * v505; i7; i7 += 8)
        {
          v508 = *v506;
          if (*v506)
          {
            int v509 = *v508;
            if ((v509 - 4) > 0x1E)
            {
              if ((v509 - 3) >= 0xFFFFFFFE) {
                v512 = *v506;
              }
              else {
                v512 = 0;
              }
              if ((v509 - 3) < 0xFFFFFFFE)
              {
                if (v509 == 3) {
                  *((void *)v508 + 1) = 0;
                }
                goto LABEL_1047;
              }
              unint64_t v511 = (unint64_t)(v512 + 8);
            }
            else
            {
              if ((v508[1] & 0x7F) != 2 && !*((_DWORD *)v508 + 3)) {
                goto LABEL_1047;
              }
              uint64_t v510 = *((void *)v508 + 2);
              if ((v510 & 4) == 0) {
                goto LABEL_1047;
              }
              unint64_t v511 = v510 & 0xFFFFFFFFFFFFFFF8;
              if (!v511) {
                goto LABEL_1047;
              }
            }
            __src = v506;
            sub_1CC5FA668(v511 + 16, &__src);
          }
LABEL_1047:
          --v506;
        }
      }
      operator delete((void *)(v504 - 8 * v505));
    }
    v513 = v502 + 1;
    v502 = v500;
    if (v513 != v500)
    {
      v502 = v513;
      while ((*v502 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v502 == v500)
        {
          v502 = v500;
          goto LABEL_1042;
        }
      }
    }
  }
  uint64_t v514 = *((void *)this + 106);
  uint64_t v515 = *((unsigned int *)this + 216);
  v516 = (uint64_t *)(v514 + 8 * v515);
  if (*((_DWORD *)this + 214))
  {
    if (v515)
    {
      uint64_t v517 = 8 * v515;
      v518 = (uint64_t *)*((void *)this + 106);
      while ((*v518 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v518;
        v517 -= 8;
        if (!v517) {
          goto LABEL_1074;
        }
      }
    }
    else
    {
      v518 = (uint64_t *)*((void *)this + 106);
    }
  }
  else
  {
LABEL_1074:
    v518 = (uint64_t *)(v514 + 8 * v515);
  }
  v519 = (uint64_t *)(v514 + 8 * v515);
LABEL_1077:
  while (v518 != v519)
  {
    uint64_t v520 = *v518;
    if (*v518)
    {
      sub_1CC5ECC54((uint64_t *)(v520 + 16));
      uint64_t v521 = *(unsigned int *)(v520 + 8);
      if (v521)
      {
        v522 = (unsigned __int8 **)(v520 - 8);
        for (uint64_t i8 = -8 * v521; i8; i8 += 8)
        {
          v524 = *v522;
          if (*v522)
          {
            int v525 = *v524;
            if ((v525 - 4) > 0x1E)
            {
              if ((v525 - 3) >= 0xFFFFFFFE) {
                v528 = *v522;
              }
              else {
                v528 = 0;
              }
              if ((v525 - 3) < 0xFFFFFFFE)
              {
                if (v525 == 3) {
                  *((void *)v524 + 1) = 0;
                }
                goto LABEL_1082;
              }
              unint64_t v527 = (unint64_t)(v528 + 8);
            }
            else
            {
              if ((v524[1] & 0x7F) != 2 && !*((_DWORD *)v524 + 3)) {
                goto LABEL_1082;
              }
              uint64_t v526 = *((void *)v524 + 2);
              if ((v526 & 4) == 0) {
                goto LABEL_1082;
              }
              unint64_t v527 = v526 & 0xFFFFFFFFFFFFFFF8;
              if (!v527) {
                goto LABEL_1082;
              }
            }
            __src = v522;
            sub_1CC5FA668(v527 + 16, &__src);
          }
LABEL_1082:
          --v522;
        }
      }
      operator delete((void *)(v520 - 8 * v521));
    }
    v529 = v518 + 1;
    v518 = v516;
    if (v529 != v516)
    {
      v518 = v529;
      while ((*v518 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v518 == v516)
        {
          v518 = v516;
          goto LABEL_1077;
        }
      }
    }
  }
  uint64_t v530 = *((void *)this + 109);
  uint64_t v531 = *((unsigned int *)this + 222);
  v532 = (uint64_t *)(v530 + 8 * v531);
  if (*((_DWORD *)this + 220))
  {
    if (v531)
    {
      uint64_t v533 = 8 * v531;
      v534 = (uint64_t *)*((void *)this + 109);
      while ((*v534 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v534;
        v533 -= 8;
        if (!v533) {
          goto LABEL_1109;
        }
      }
    }
    else
    {
      v534 = (uint64_t *)*((void *)this + 109);
    }
  }
  else
  {
LABEL_1109:
    v534 = (uint64_t *)(v530 + 8 * v531);
  }
  v535 = (uint64_t *)(v530 + 8 * v531);
LABEL_1112:
  while (v534 != v535)
  {
    uint64_t v536 = *v534;
    if (*v534)
    {
      sub_1CC5ECC54((uint64_t *)(v536 + 16));
      uint64_t v537 = *(unsigned int *)(v536 + 8);
      if (v537)
      {
        v538 = (unsigned __int8 **)(v536 - 8);
        for (uint64_t i9 = -8 * v537; i9; i9 += 8)
        {
          v540 = *v538;
          if (*v538)
          {
            int v541 = *v540;
            if ((v541 - 4) > 0x1E)
            {
              if ((v541 - 3) >= 0xFFFFFFFE) {
                v544 = *v538;
              }
              else {
                v544 = 0;
              }
              if ((v541 - 3) < 0xFFFFFFFE)
              {
                if (v541 == 3) {
                  *((void *)v540 + 1) = 0;
                }
                goto LABEL_1117;
              }
              unint64_t v543 = (unint64_t)(v544 + 8);
            }
            else
            {
              if ((v540[1] & 0x7F) != 2 && !*((_DWORD *)v540 + 3)) {
                goto LABEL_1117;
              }
              uint64_t v542 = *((void *)v540 + 2);
              if ((v542 & 4) == 0) {
                goto LABEL_1117;
              }
              unint64_t v543 = v542 & 0xFFFFFFFFFFFFFFF8;
              if (!v543) {
                goto LABEL_1117;
              }
            }
            __src = v538;
            sub_1CC5FA668(v543 + 16, &__src);
          }
LABEL_1117:
          --v538;
        }
      }
      operator delete((void *)(v536 - 8 * v537));
    }
    v545 = v534 + 1;
    v534 = v532;
    if (v545 != v532)
    {
      v534 = v545;
      while ((*v534 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v534 == v532)
        {
          v534 = v532;
          goto LABEL_1112;
        }
      }
    }
  }
  uint64_t v546 = *((void *)this + 112);
  uint64_t v547 = *((unsigned int *)this + 228);
  v548 = (uint64_t *)(v546 + 8 * v547);
  if (*((_DWORD *)this + 226))
  {
    if (v547)
    {
      uint64_t v549 = 8 * v547;
      v550 = (uint64_t *)*((void *)this + 112);
      while ((*v550 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v550;
        v549 -= 8;
        if (!v549) {
          goto LABEL_1144;
        }
      }
    }
    else
    {
      v550 = (uint64_t *)*((void *)this + 112);
    }
  }
  else
  {
LABEL_1144:
    v550 = (uint64_t *)(v546 + 8 * v547);
  }
  v551 = (uint64_t *)(v546 + 8 * v547);
LABEL_1147:
  while (v550 != v551)
  {
    uint64_t v552 = *v550;
    if (*v550)
    {
      sub_1CC5ECC54((uint64_t *)(v552 + 16));
      uint64_t v553 = *(unsigned int *)(v552 + 8);
      if (v553)
      {
        v554 = (unsigned __int8 **)(v552 - 8);
        for (uint64_t i10 = -8 * v553; i10; i10 += 8)
        {
          v556 = *v554;
          if (*v554)
          {
            int v557 = *v556;
            if ((v557 - 4) > 0x1E)
            {
              if ((v557 - 3) >= 0xFFFFFFFE) {
                v560 = *v554;
              }
              else {
                v560 = 0;
              }
              if ((v557 - 3) < 0xFFFFFFFE)
              {
                if (v557 == 3) {
                  *((void *)v556 + 1) = 0;
                }
                goto LABEL_1152;
              }
              unint64_t v559 = (unint64_t)(v560 + 8);
            }
            else
            {
              if ((v556[1] & 0x7F) != 2 && !*((_DWORD *)v556 + 3)) {
                goto LABEL_1152;
              }
              uint64_t v558 = *((void *)v556 + 2);
              if ((v558 & 4) == 0) {
                goto LABEL_1152;
              }
              unint64_t v559 = v558 & 0xFFFFFFFFFFFFFFF8;
              if (!v559) {
                goto LABEL_1152;
              }
            }
            __src = v554;
            sub_1CC5FA668(v559 + 16, &__src);
          }
LABEL_1152:
          --v554;
        }
      }
      operator delete((void *)(v552 - 8 * v553));
    }
    v561 = v550 + 1;
    v550 = v548;
    if (v561 != v548)
    {
      v550 = v561;
      while ((*v550 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v550 == v548)
        {
          v550 = v548;
          goto LABEL_1147;
        }
      }
    }
  }
  uint64_t v562 = *((void *)this + 115);
  uint64_t v563 = *((unsigned int *)this + 234);
  v564 = (uint64_t *)(v562 + 8 * v563);
  if (*((_DWORD *)this + 232))
  {
    if (v563)
    {
      uint64_t v565 = 8 * v563;
      v566 = (uint64_t *)*((void *)this + 115);
      while ((*v566 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v566;
        v565 -= 8;
        if (!v565) {
          goto LABEL_1179;
        }
      }
    }
    else
    {
      v566 = (uint64_t *)*((void *)this + 115);
    }
  }
  else
  {
LABEL_1179:
    v566 = (uint64_t *)(v562 + 8 * v563);
  }
  v567 = (uint64_t *)(v562 + 8 * v563);
LABEL_1182:
  while (v566 != v567)
  {
    uint64_t v568 = *v566;
    if (*v566)
    {
      sub_1CC5ECC54((uint64_t *)(v568 + 16));
      uint64_t v569 = *(unsigned int *)(v568 + 8);
      if (v569)
      {
        v570 = (unsigned __int8 **)(v568 - 8);
        for (uint64_t i11 = -8 * v569; i11; i11 += 8)
        {
          v572 = *v570;
          if (*v570)
          {
            int v573 = *v572;
            if ((v573 - 4) > 0x1E)
            {
              if ((v573 - 3) >= 0xFFFFFFFE) {
                v576 = *v570;
              }
              else {
                v576 = 0;
              }
              if ((v573 - 3) < 0xFFFFFFFE)
              {
                if (v573 == 3) {
                  *((void *)v572 + 1) = 0;
                }
                goto LABEL_1187;
              }
              unint64_t v575 = (unint64_t)(v576 + 8);
            }
            else
            {
              if ((v572[1] & 0x7F) != 2 && !*((_DWORD *)v572 + 3)) {
                goto LABEL_1187;
              }
              uint64_t v574 = *((void *)v572 + 2);
              if ((v574 & 4) == 0) {
                goto LABEL_1187;
              }
              unint64_t v575 = v574 & 0xFFFFFFFFFFFFFFF8;
              if (!v575) {
                goto LABEL_1187;
              }
            }
            __src = v570;
            sub_1CC5FA668(v575 + 16, &__src);
          }
LABEL_1187:
          --v570;
        }
      }
      operator delete((void *)(v568 - 8 * v569));
    }
    v577 = v566 + 1;
    v566 = v564;
    if (v577 != v564)
    {
      v566 = v577;
      while ((*v566 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v566 == v564)
        {
          v566 = v564;
          goto LABEL_1182;
        }
      }
    }
  }
  uint64_t v578 = *((void *)this + 118);
  uint64_t v579 = *((unsigned int *)this + 240);
  v580 = (uint64_t *)(v578 + 8 * v579);
  if (*((_DWORD *)this + 238))
  {
    if (v579)
    {
      uint64_t v581 = 8 * v579;
      v582 = (uint64_t *)*((void *)this + 118);
      while ((*v582 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v582;
        v581 -= 8;
        if (!v581) {
          goto LABEL_1214;
        }
      }
    }
    else
    {
      v582 = (uint64_t *)*((void *)this + 118);
    }
  }
  else
  {
LABEL_1214:
    v582 = (uint64_t *)(v578 + 8 * v579);
  }
  v583 = (uint64_t *)(v578 + 8 * v579);
LABEL_1217:
  while (v582 != v583)
  {
    uint64_t v584 = *v582;
    if (*v582)
    {
      sub_1CC5ECC54((uint64_t *)(v584 + 16));
      uint64_t v585 = *(unsigned int *)(v584 + 8);
      if (v585)
      {
        v586 = (unsigned __int8 **)(v584 - 8);
        for (uint64_t i12 = -8 * v585; i12; i12 += 8)
        {
          v588 = *v586;
          if (*v586)
          {
            int v589 = *v588;
            if ((v589 - 4) > 0x1E)
            {
              if ((v589 - 3) >= 0xFFFFFFFE) {
                v592 = *v586;
              }
              else {
                v592 = 0;
              }
              if ((v589 - 3) < 0xFFFFFFFE)
              {
                if (v589 == 3) {
                  *((void *)v588 + 1) = 0;
                }
                goto LABEL_1222;
              }
              unint64_t v591 = (unint64_t)(v592 + 8);
            }
            else
            {
              if ((v588[1] & 0x7F) != 2 && !*((_DWORD *)v588 + 3)) {
                goto LABEL_1222;
              }
              uint64_t v590 = *((void *)v588 + 2);
              if ((v590 & 4) == 0) {
                goto LABEL_1222;
              }
              unint64_t v591 = v590 & 0xFFFFFFFFFFFFFFF8;
              if (!v591) {
                goto LABEL_1222;
              }
            }
            __src = v586;
            sub_1CC5FA668(v591 + 16, &__src);
          }
LABEL_1222:
          --v586;
        }
      }
      operator delete((void *)(v584 - 8 * v585));
    }
    v593 = v582 + 1;
    v582 = v580;
    if (v593 != v580)
    {
      v582 = v593;
      while ((*v582 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v582 == v580)
        {
          v582 = v580;
          goto LABEL_1217;
        }
      }
    }
  }
  uint64_t v594 = *((void *)this + 121);
  uint64_t v595 = *((unsigned int *)this + 246);
  v596 = (uint64_t *)(v594 + 8 * v595);
  if (*((_DWORD *)this + 244))
  {
    if (v595)
    {
      uint64_t v597 = 8 * v595;
      v598 = (uint64_t *)*((void *)this + 121);
      while ((*v598 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v598;
        v597 -= 8;
        if (!v597) {
          goto LABEL_1249;
        }
      }
    }
    else
    {
      v598 = (uint64_t *)*((void *)this + 121);
    }
  }
  else
  {
LABEL_1249:
    v598 = (uint64_t *)(v594 + 8 * v595);
  }
  v599 = (uint64_t *)(v594 + 8 * v595);
LABEL_1252:
  while (v598 != v599)
  {
    uint64_t v600 = *v598;
    if (*v598)
    {
      sub_1CC5ECC54((uint64_t *)(v600 + 16));
      uint64_t v601 = *(unsigned int *)(v600 + 8);
      if (v601)
      {
        v602 = (unsigned __int8 **)(v600 - 8);
        for (uint64_t i13 = -8 * v601; i13; i13 += 8)
        {
          v604 = *v602;
          if (*v602)
          {
            int v605 = *v604;
            if ((v605 - 4) > 0x1E)
            {
              if ((v605 - 3) >= 0xFFFFFFFE) {
                v608 = *v602;
              }
              else {
                v608 = 0;
              }
              if ((v605 - 3) < 0xFFFFFFFE)
              {
                if (v605 == 3) {
                  *((void *)v604 + 1) = 0;
                }
                goto LABEL_1257;
              }
              unint64_t v607 = (unint64_t)(v608 + 8);
            }
            else
            {
              if ((v604[1] & 0x7F) != 2 && !*((_DWORD *)v604 + 3)) {
                goto LABEL_1257;
              }
              uint64_t v606 = *((void *)v604 + 2);
              if ((v606 & 4) == 0) {
                goto LABEL_1257;
              }
              unint64_t v607 = v606 & 0xFFFFFFFFFFFFFFF8;
              if (!v607) {
                goto LABEL_1257;
              }
            }
            __src = v602;
            sub_1CC5FA668(v607 + 16, &__src);
          }
LABEL_1257:
          --v602;
        }
      }
      operator delete((void *)(v600 - 8 * v601));
    }
    v609 = v598 + 1;
    v598 = v596;
    if (v609 != v596)
    {
      v598 = v609;
      while ((*v598 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v598 == v596)
        {
          v598 = v596;
          goto LABEL_1252;
        }
      }
    }
  }
  uint64_t v610 = *((void *)this + 124);
  uint64_t v611 = *((unsigned int *)this + 252);
  v612 = (uint64_t *)(v610 + 8 * v611);
  if (*((_DWORD *)this + 250))
  {
    if (v611)
    {
      uint64_t v613 = 8 * v611;
      v614 = (uint64_t *)*((void *)this + 124);
      while ((*v614 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v614;
        v613 -= 8;
        if (!v613) {
          goto LABEL_1284;
        }
      }
    }
    else
    {
      v614 = (uint64_t *)*((void *)this + 124);
    }
  }
  else
  {
LABEL_1284:
    v614 = (uint64_t *)(v610 + 8 * v611);
  }
  v615 = (uint64_t *)(v610 + 8 * v611);
LABEL_1287:
  while (v614 != v615)
  {
    uint64_t v616 = *v614;
    if (*v614)
    {
      sub_1CC5ECC54((uint64_t *)(v616 + 16));
      uint64_t v617 = *(unsigned int *)(v616 + 8);
      if (v617)
      {
        v618 = (unsigned __int8 **)(v616 - 8);
        for (uint64_t i14 = -8 * v617; i14; i14 += 8)
        {
          v620 = *v618;
          if (*v618)
          {
            int v621 = *v620;
            if ((v621 - 4) > 0x1E)
            {
              if ((v621 - 3) >= 0xFFFFFFFE) {
                v624 = *v618;
              }
              else {
                v624 = 0;
              }
              if ((v621 - 3) < 0xFFFFFFFE)
              {
                if (v621 == 3) {
                  *((void *)v620 + 1) = 0;
                }
                goto LABEL_1292;
              }
              unint64_t v623 = (unint64_t)(v624 + 8);
            }
            else
            {
              if ((v620[1] & 0x7F) != 2 && !*((_DWORD *)v620 + 3)) {
                goto LABEL_1292;
              }
              uint64_t v622 = *((void *)v620 + 2);
              if ((v622 & 4) == 0) {
                goto LABEL_1292;
              }
              unint64_t v623 = v622 & 0xFFFFFFFFFFFFFFF8;
              if (!v623) {
                goto LABEL_1292;
              }
            }
            __src = v618;
            sub_1CC5FA668(v623 + 16, &__src);
          }
LABEL_1292:
          --v618;
        }
      }
      operator delete((void *)(v616 - 8 * v617));
    }
    v625 = v614 + 1;
    v614 = v612;
    if (v625 != v612)
    {
      v614 = v625;
      while ((*v614 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v614 == v612)
        {
          v614 = v612;
          goto LABEL_1287;
        }
      }
    }
  }
  uint64_t v626 = *((void *)this + 127);
  uint64_t v627 = *((unsigned int *)this + 258);
  v628 = (uint64_t *)(v626 + 8 * v627);
  if (*((_DWORD *)this + 256))
  {
    if (v627)
    {
      uint64_t v629 = 8 * v627;
      v630 = (uint64_t *)*((void *)this + 127);
      while ((*v630 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v630;
        v629 -= 8;
        if (!v629) {
          goto LABEL_1319;
        }
      }
    }
    else
    {
      v630 = (uint64_t *)*((void *)this + 127);
    }
  }
  else
  {
LABEL_1319:
    v630 = (uint64_t *)(v626 + 8 * v627);
  }
  v631 = (uint64_t *)(v626 + 8 * v627);
LABEL_1322:
  while (v630 != v631)
  {
    uint64_t v632 = *v630;
    if (*v630)
    {
      sub_1CC5ECC54((uint64_t *)(v632 + 16));
      uint64_t v633 = *(unsigned int *)(v632 + 8);
      if (v633)
      {
        v634 = (unsigned __int8 **)(v632 - 8);
        for (uint64_t i15 = -8 * v633; i15; i15 += 8)
        {
          v636 = *v634;
          if (*v634)
          {
            int v637 = *v636;
            if ((v637 - 4) > 0x1E)
            {
              if ((v637 - 3) >= 0xFFFFFFFE) {
                v640 = *v634;
              }
              else {
                v640 = 0;
              }
              if ((v637 - 3) < 0xFFFFFFFE)
              {
                if (v637 == 3) {
                  *((void *)v636 + 1) = 0;
                }
                goto LABEL_1327;
              }
              unint64_t v639 = (unint64_t)(v640 + 8);
            }
            else
            {
              if ((v636[1] & 0x7F) != 2 && !*((_DWORD *)v636 + 3)) {
                goto LABEL_1327;
              }
              uint64_t v638 = *((void *)v636 + 2);
              if ((v638 & 4) == 0) {
                goto LABEL_1327;
              }
              unint64_t v639 = v638 & 0xFFFFFFFFFFFFFFF8;
              if (!v639) {
                goto LABEL_1327;
              }
            }
            __src = v634;
            sub_1CC5FA668(v639 + 16, &__src);
          }
LABEL_1327:
          --v634;
        }
      }
      operator delete((void *)(v632 - 8 * v633));
    }
    v641 = v630 + 1;
    v630 = v628;
    if (v641 != v628)
    {
      v630 = v641;
      while ((*v630 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v630 == v628)
        {
          v630 = v628;
          goto LABEL_1322;
        }
      }
    }
  }
  uint64_t v642 = *((void *)this + 130);
  uint64_t v643 = *((unsigned int *)this + 264);
  v644 = (uint64_t *)(v642 + 8 * v643);
  if (*((_DWORD *)this + 262))
  {
    if (v643)
    {
      uint64_t v645 = 8 * v643;
      v646 = (uint64_t *)*((void *)this + 130);
      while ((*v646 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v646;
        v645 -= 8;
        if (!v645) {
          goto LABEL_1354;
        }
      }
    }
    else
    {
      v646 = (uint64_t *)*((void *)this + 130);
    }
  }
  else
  {
LABEL_1354:
    v646 = (uint64_t *)(v642 + 8 * v643);
  }
  v647 = (uint64_t *)(v642 + 8 * v643);
LABEL_1357:
  while (v646 != v647)
  {
    uint64_t v648 = *v646;
    if (*v646)
    {
      sub_1CC5ECC54((uint64_t *)(v648 + 16));
      uint64_t v649 = *(unsigned int *)(v648 + 8);
      if (v649)
      {
        v650 = (unsigned __int8 **)(v648 - 8);
        for (uint64_t i16 = -8 * v649; i16; i16 += 8)
        {
          v652 = *v650;
          if (*v650)
          {
            int v653 = *v652;
            if ((v653 - 4) > 0x1E)
            {
              if ((v653 - 3) >= 0xFFFFFFFE) {
                v656 = *v650;
              }
              else {
                v656 = 0;
              }
              if ((v653 - 3) < 0xFFFFFFFE)
              {
                if (v653 == 3) {
                  *((void *)v652 + 1) = 0;
                }
                goto LABEL_1362;
              }
              unint64_t v655 = (unint64_t)(v656 + 8);
            }
            else
            {
              if ((v652[1] & 0x7F) != 2 && !*((_DWORD *)v652 + 3)) {
                goto LABEL_1362;
              }
              uint64_t v654 = *((void *)v652 + 2);
              if ((v654 & 4) == 0) {
                goto LABEL_1362;
              }
              unint64_t v655 = v654 & 0xFFFFFFFFFFFFFFF8;
              if (!v655) {
                goto LABEL_1362;
              }
            }
            __src = v650;
            sub_1CC5FA668(v655 + 16, &__src);
          }
LABEL_1362:
          --v650;
        }
      }
      operator delete((void *)(v648 - 8 * v649));
    }
    v657 = v646 + 1;
    v646 = v644;
    if (v657 != v644)
    {
      v646 = v657;
      while ((*v646 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v646 == v644)
        {
          v646 = v644;
          goto LABEL_1357;
        }
      }
    }
  }
  uint64_t v658 = *((void *)this + 133);
  uint64_t v659 = *((unsigned int *)this + 270);
  v660 = (uint64_t *)(v658 + 8 * v659);
  if (*((_DWORD *)this + 268))
  {
    if (v659)
    {
      uint64_t v661 = 8 * v659;
      v662 = (uint64_t *)*((void *)this + 133);
      while ((*v662 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v662;
        v661 -= 8;
        if (!v661) {
          goto LABEL_1389;
        }
      }
    }
    else
    {
      v662 = (uint64_t *)*((void *)this + 133);
    }
  }
  else
  {
LABEL_1389:
    v662 = (uint64_t *)(v658 + 8 * v659);
  }
  v663 = (uint64_t *)(v658 + 8 * v659);
LABEL_1392:
  while (v662 != v663)
  {
    uint64_t v664 = *v662;
    if (*v662)
    {
      sub_1CC5ECC54((uint64_t *)(v664 + 16));
      uint64_t v665 = *(unsigned int *)(v664 + 8);
      if (v665)
      {
        v666 = (unsigned __int8 **)(v664 - 8);
        for (uint64_t i17 = -8 * v665; i17; i17 += 8)
        {
          v668 = *v666;
          if (*v666)
          {
            int v669 = *v668;
            if ((v669 - 4) > 0x1E)
            {
              if ((v669 - 3) >= 0xFFFFFFFE) {
                v672 = *v666;
              }
              else {
                v672 = 0;
              }
              if ((v669 - 3) < 0xFFFFFFFE)
              {
                if (v669 == 3) {
                  *((void *)v668 + 1) = 0;
                }
                goto LABEL_1397;
              }
              unint64_t v671 = (unint64_t)(v672 + 8);
            }
            else
            {
              if ((v668[1] & 0x7F) != 2 && !*((_DWORD *)v668 + 3)) {
                goto LABEL_1397;
              }
              uint64_t v670 = *((void *)v668 + 2);
              if ((v670 & 4) == 0) {
                goto LABEL_1397;
              }
              unint64_t v671 = v670 & 0xFFFFFFFFFFFFFFF8;
              if (!v671) {
                goto LABEL_1397;
              }
            }
            __src = v666;
            sub_1CC5FA668(v671 + 16, &__src);
          }
LABEL_1397:
          --v666;
        }
      }
      operator delete((void *)(v664 - 8 * v665));
    }
    v673 = v662 + 1;
    v662 = v660;
    if (v673 != v660)
    {
      v662 = v673;
      while ((*v662 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v662 == v660)
        {
          v662 = v660;
          goto LABEL_1392;
        }
      }
    }
  }
  uint64_t v674 = *((void *)this + 136);
  uint64_t v675 = *((unsigned int *)this + 276);
  v676 = (uint64_t *)(v674 + 8 * v675);
  if (*((_DWORD *)this + 274))
  {
    if (v675)
    {
      uint64_t v677 = 8 * v675;
      v678 = (uint64_t *)*((void *)this + 136);
      while ((*v678 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v678;
        v677 -= 8;
        if (!v677) {
          goto LABEL_1424;
        }
      }
    }
    else
    {
      v678 = (uint64_t *)*((void *)this + 136);
    }
  }
  else
  {
LABEL_1424:
    v678 = (uint64_t *)(v674 + 8 * v675);
  }
  v679 = (uint64_t *)(v674 + 8 * v675);
LABEL_1427:
  while (v678 != v679)
  {
    uint64_t v680 = *v678;
    if (*v678)
    {
      sub_1CC5ECCF0(*v678);
      uint64_t v681 = *(unsigned int *)(v680 + 8);
      if (v681)
      {
        v682 = (unsigned __int8 **)(v680 - 8);
        for (uint64_t i18 = -8 * v681; i18; i18 += 8)
        {
          v684 = *v682;
          if (*v682)
          {
            int v685 = *v684;
            if ((v685 - 4) > 0x1E)
            {
              if ((v685 - 3) >= 0xFFFFFFFE) {
                v688 = *v682;
              }
              else {
                v688 = 0;
              }
              if ((v685 - 3) < 0xFFFFFFFE)
              {
                if (v685 == 3) {
                  *((void *)v684 + 1) = 0;
                }
                goto LABEL_1432;
              }
              unint64_t v687 = (unint64_t)(v688 + 8);
            }
            else
            {
              if ((v684[1] & 0x7F) != 2 && !*((_DWORD *)v684 + 3)) {
                goto LABEL_1432;
              }
              uint64_t v686 = *((void *)v684 + 2);
              if ((v686 & 4) == 0) {
                goto LABEL_1432;
              }
              unint64_t v687 = v686 & 0xFFFFFFFFFFFFFFF8;
              if (!v687) {
                goto LABEL_1432;
              }
            }
            __src = v682;
            sub_1CC5FA668(v687 + 16, &__src);
          }
LABEL_1432:
          --v682;
        }
      }
      operator delete((void *)(v680 - 8 * v681));
    }
    v689 = v678 + 1;
    v678 = v676;
    if (v689 != v676)
    {
      v678 = v689;
      while ((*v678 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v678 == v676)
        {
          v678 = v676;
          goto LABEL_1427;
        }
      }
    }
  }
  uint64_t v690 = *((void *)this + 139);
  uint64_t v691 = *((unsigned int *)this + 282);
  v692 = (uint64_t *)(v690 + 8 * v691);
  if (*((_DWORD *)this + 280))
  {
    if (v691)
    {
      uint64_t v693 = 8 * v691;
      v694 = (uint64_t *)*((void *)this + 139);
      while ((*v694 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v694;
        v693 -= 8;
        if (!v693) {
          goto LABEL_1459;
        }
      }
    }
    else
    {
      v694 = (uint64_t *)*((void *)this + 139);
    }
  }
  else
  {
LABEL_1459:
    v694 = (uint64_t *)(v690 + 8 * v691);
  }
  v695 = (uint64_t *)(v690 + 8 * v691);
LABEL_1462:
  while (v694 != v695)
  {
    uint64_t v696 = *v694;
    if (*v694)
    {
      sub_1CC5ECC54((uint64_t *)(v696 + 16));
      uint64_t v697 = *(unsigned int *)(v696 + 8);
      if (v697)
      {
        v698 = (unsigned __int8 **)(v696 - 8);
        for (uint64_t i19 = -8 * v697; i19; i19 += 8)
        {
          v700 = *v698;
          if (*v698)
          {
            int v701 = *v700;
            if ((v701 - 4) > 0x1E)
            {
              if ((v701 - 3) >= 0xFFFFFFFE) {
                v704 = *v698;
              }
              else {
                v704 = 0;
              }
              if ((v701 - 3) < 0xFFFFFFFE)
              {
                if (v701 == 3) {
                  *((void *)v700 + 1) = 0;
                }
                goto LABEL_1467;
              }
              unint64_t v703 = (unint64_t)(v704 + 8);
            }
            else
            {
              if ((v700[1] & 0x7F) != 2 && !*((_DWORD *)v700 + 3)) {
                goto LABEL_1467;
              }
              uint64_t v702 = *((void *)v700 + 2);
              if ((v702 & 4) == 0) {
                goto LABEL_1467;
              }
              unint64_t v703 = v702 & 0xFFFFFFFFFFFFFFF8;
              if (!v703) {
                goto LABEL_1467;
              }
            }
            __src = v698;
            sub_1CC5FA668(v703 + 16, &__src);
          }
LABEL_1467:
          --v698;
        }
      }
      operator delete((void *)(v696 - 8 * v697));
    }
    v705 = v694 + 1;
    v694 = v692;
    if (v705 != v692)
    {
      v694 = v705;
      while ((*v694 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v694 == v692)
        {
          v694 = v692;
          goto LABEL_1462;
        }
      }
    }
  }
  uint64_t v706 = *((void *)this + 142);
  uint64_t v707 = *((unsigned int *)this + 288);
  v708 = (uint64_t *)(v706 + 8 * v707);
  if (*((_DWORD *)this + 286))
  {
    if (v707)
    {
      uint64_t v709 = 8 * v707;
      v710 = (uint64_t *)*((void *)this + 142);
      while ((*v710 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v710;
        v709 -= 8;
        if (!v709) {
          goto LABEL_1494;
        }
      }
    }
    else
    {
      v710 = (uint64_t *)*((void *)this + 142);
    }
  }
  else
  {
LABEL_1494:
    v710 = (uint64_t *)(v706 + 8 * v707);
  }
  v711 = (uint64_t *)(v706 + 8 * v707);
LABEL_1497:
  while (v710 != v711)
  {
    uint64_t v712 = *v710;
    if (*v710)
    {
      sub_1CC5ECC54((uint64_t *)(v712 + 16));
      uint64_t v713 = *(unsigned int *)(v712 + 8);
      if (v713)
      {
        v714 = (unsigned __int8 **)(v712 - 8);
        for (uint64_t i20 = -8 * v713; i20; i20 += 8)
        {
          v716 = *v714;
          if (*v714)
          {
            int v717 = *v716;
            if ((v717 - 4) > 0x1E)
            {
              if ((v717 - 3) >= 0xFFFFFFFE) {
                v720 = *v714;
              }
              else {
                v720 = 0;
              }
              if ((v717 - 3) < 0xFFFFFFFE)
              {
                if (v717 == 3) {
                  *((void *)v716 + 1) = 0;
                }
                goto LABEL_1502;
              }
              unint64_t v719 = (unint64_t)(v720 + 8);
            }
            else
            {
              if ((v716[1] & 0x7F) != 2 && !*((_DWORD *)v716 + 3)) {
                goto LABEL_1502;
              }
              uint64_t v718 = *((void *)v716 + 2);
              if ((v718 & 4) == 0) {
                goto LABEL_1502;
              }
              unint64_t v719 = v718 & 0xFFFFFFFFFFFFFFF8;
              if (!v719) {
                goto LABEL_1502;
              }
            }
            __src = v714;
            sub_1CC5FA668(v719 + 16, &__src);
          }
LABEL_1502:
          --v714;
        }
      }
      operator delete((void *)(v712 - 8 * v713));
    }
    v721 = v710 + 1;
    v710 = v708;
    if (v721 != v708)
    {
      v710 = v721;
      while ((*v710 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v710 == v708)
        {
          v710 = v708;
          goto LABEL_1497;
        }
      }
    }
  }
  int v722 = *((_DWORD *)this + 380);
  uint64_t v723 = *((void *)this + 189);
  uint64_t v724 = *((unsigned int *)this + 382);
  v725 = (uint64_t *)(v723 + 8 * v724);
  unsigned int v726 = *((_DWORD *)this + 382);
  v727 = v725;
  if (v722)
  {
    if (v724)
    {
      uint64_t v728 = 8 * v724;
      v727 = (uint64_t *)*((void *)this + 189);
      while ((*v727 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v727;
        v728 -= 8;
        if (!v728)
        {
          unsigned int v726 = *((_DWORD *)this + 382);
          v727 = (uint64_t *)(v723 + 8 * v724);
          goto LABEL_1532;
        }
      }
      unsigned int v726 = *((_DWORD *)this + 382);
    }
    else
    {
      unsigned int v726 = 0;
      v727 = (uint64_t *)*((void *)this + 189);
    }
  }
LABEL_1532:
  v729 = (uint64_t *)(v723 + 8 * v726);
LABEL_1533:
  while (v727 != v729)
  {
    uint64_t v730 = *v727;
    int v731 = *(_DWORD *)(*v727 + 20);
    if ((v731 & 0x40000000) != 0)
    {
      uint64_t v733 = *(void *)(v730 - 8);
      uint64_t v732 = v731 & 0x7FFFFFF;
      if (v732)
      {
LABEL_1536:
        uint64_t v734 = 32 * v732;
        v735 = (void **)(v733 + 16);
        do
        {
          if (*(v735 - 2))
          {
            void **v735 = *(v735 - 1);
            uint64_t v736 = (uint64_t)*(v735 - 1);
            if (v736) {
              *(void *)(v736 + 16) = *v735;
            }
          }
          *(v735 - 2) = 0;
          v735 += 4;
          v734 -= 32;
        }
        while (v734);
      }
    }
    else
    {
      uint64_t v732 = v731 & 0x7FFFFFF;
      uint64_t v733 = v730 - 32 * v732;
      if (v732) {
        goto LABEL_1536;
      }
    }
    v737 = v727 + 1;
    v727 = v725;
    if (v737 != v725)
    {
      v727 = v737;
      while ((*v727 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v727 == v725)
        {
          v727 = v725;
          goto LABEL_1533;
        }
      }
    }
  }
  int v738 = *((_DWORD *)this + 312);
  uint64_t v739 = *((void *)this + 155);
  uint64_t v740 = *((unsigned int *)this + 314);
  v741 = (uint64_t *)(v739 + 8 * v740);
  unsigned int v742 = *((_DWORD *)this + 314);
  v743 = v741;
  if (v738)
  {
    if (v740)
    {
      uint64_t v744 = 8 * v740;
      v743 = (uint64_t *)*((void *)this + 155);
      while ((*v743 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v743;
        v744 -= 8;
        if (!v744)
        {
          unsigned int v742 = *((_DWORD *)this + 314);
          v743 = (uint64_t *)(v739 + 8 * v740);
          goto LABEL_1556;
        }
      }
      unsigned int v742 = *((_DWORD *)this + 314);
    }
    else
    {
      unsigned int v742 = 0;
      v743 = (uint64_t *)*((void *)this + 155);
    }
  }
LABEL_1556:
  v745 = (uint64_t *)(v739 + 8 * v742);
LABEL_1557:
  while (2)
  {
    if (v743 != v745)
    {
      uint64_t v746 = *v743;
      int v747 = *(_DWORD *)(*v743 + 20);
      if ((v747 & 0x40000000) != 0)
      {
        uint64_t v749 = *(void *)(v746 - 8);
        uint64_t v748 = v747 & 0x7FFFFFF;
        if (v748) {
          goto LABEL_1560;
        }
      }
      else
      {
        uint64_t v748 = v747 & 0x7FFFFFF;
        uint64_t v749 = v746 - 32 * v748;
        if (v748)
        {
LABEL_1560:
          uint64_t v750 = 32 * v748;
          v751 = (void **)(v749 + 16);
          do
          {
            if (*(v751 - 2))
            {
              void **v751 = *(v751 - 1);
              uint64_t v752 = (uint64_t)*(v751 - 1);
              if (v752) {
                *(void *)(v752 + 16) = *v751;
              }
            }
            *(v751 - 2) = 0;
            v751 += 4;
            v750 -= 32;
          }
          while (v750);
        }
      }
      v753 = v743 + 1;
      v743 = v741;
      if (v753 != v741)
      {
        v743 = v753;
        while ((*v743 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v743 == v741)
          {
            v743 = v741;
            goto LABEL_1557;
          }
        }
      }
      continue;
    }
    break;
  }
  uint64_t v754 = *((void *)this + 158);
  uint64_t v755 = *((unsigned int *)this + 320);
  v756 = (uint64_t *)(v754 + 8 * v755);
  if (*((_DWORD *)this + 318))
  {
    if (v755)
    {
      uint64_t v757 = 8 * v755;
      v758 = (uint64_t *)*((void *)this + 158);
      while ((*v758 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v758;
        v757 -= 8;
        if (!v757) {
          goto LABEL_1577;
        }
      }
    }
    else
    {
      v758 = (uint64_t *)*((void *)this + 158);
    }
  }
  else
  {
LABEL_1577:
    v758 = (uint64_t *)(v754 + 8 * v755);
  }
  v759 = (uint64_t *)(v754 + 8 * v755);
LABEL_1580:
  while (2)
  {
    if (v758 != v759)
    {
      uint64_t v760 = *v758;
      int v761 = *(_DWORD *)(*v758 + 20);
      if ((v761 & 0x40000000) != 0)
      {
        uint64_t v763 = *(void *)(v760 - 8);
        uint64_t v762 = v761 & 0x7FFFFFF;
        if (v762) {
          goto LABEL_1583;
        }
      }
      else
      {
        uint64_t v762 = v761 & 0x7FFFFFF;
        uint64_t v763 = v760 - 32 * v762;
        if (v762)
        {
LABEL_1583:
          uint64_t v764 = 32 * v762;
          v765 = (void **)(v763 + 16);
          do
          {
            if (*(v765 - 2))
            {
              void **v765 = *(v765 - 1);
              uint64_t v766 = (uint64_t)*(v765 - 1);
              if (v766) {
                *(void *)(v766 + 16) = *v765;
              }
            }
            *(v765 - 2) = 0;
            v765 += 4;
            v764 -= 32;
          }
          while (v764);
        }
      }
      v767 = v758 + 1;
      v758 = v756;
      if (v767 != v756)
      {
        v758 = v767;
        while ((*v758 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v758 == v756)
          {
            v758 = v756;
            goto LABEL_1580;
          }
        }
      }
      continue;
    }
    break;
  }
  uint64_t v768 = *((void *)this + 161);
  uint64_t v769 = *((unsigned int *)this + 326);
  v770 = (uint64_t *)(v768 + 8 * v769);
  if (*((_DWORD *)this + 324))
  {
    if (v769)
    {
      uint64_t v771 = 8 * v769;
      v772 = (uint64_t *)*((void *)this + 161);
      while ((*v772 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v772;
        v771 -= 8;
        if (!v771) {
          goto LABEL_1600;
        }
      }
    }
    else
    {
      v772 = (uint64_t *)*((void *)this + 161);
    }
  }
  else
  {
LABEL_1600:
    v772 = (uint64_t *)(v768 + 8 * v769);
  }
  v773 = (uint64_t *)(v768 + 8 * v769);
LABEL_1603:
  while (2)
  {
    if (v772 != v773)
    {
      uint64_t v774 = *v772;
      int v775 = *(_DWORD *)(*v772 + 20);
      if ((v775 & 0x40000000) != 0)
      {
        uint64_t v777 = *(void *)(v774 - 8);
        uint64_t v776 = v775 & 0x7FFFFFF;
        if (v776) {
          goto LABEL_1606;
        }
      }
      else
      {
        uint64_t v776 = v775 & 0x7FFFFFF;
        uint64_t v777 = v774 - 32 * v776;
        if (v776)
        {
LABEL_1606:
          uint64_t v778 = 32 * v776;
          v779 = (void **)(v777 + 16);
          do
          {
            if (*(v779 - 2))
            {
              void **v779 = *(v779 - 1);
              uint64_t v780 = (uint64_t)*(v779 - 1);
              if (v780) {
                *(void *)(v780 + 16) = *v779;
              }
            }
            *(v779 - 2) = 0;
            v779 += 4;
            v778 -= 32;
          }
          while (v778);
        }
      }
      v781 = v772 + 1;
      v772 = v770;
      if (v781 != v770)
      {
        v772 = v781;
        while ((*v772 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v772 == v770)
          {
            v772 = v770;
            goto LABEL_1603;
          }
        }
      }
      continue;
    }
    break;
  }
  uint64_t v782 = *((void *)this + 189);
  v783 = (llvm **)(v782 + 8 * v724);
  if (v722)
  {
    if (v724)
    {
      uint64_t v885 = 8 * v724;
      v784 = (llvm **)*((void *)this + 189);
      while (((unint64_t)*v784 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v784;
        v885 -= 8;
        if (!v885) {
          goto LABEL_1619;
        }
      }
    }
    else
    {
      v784 = (llvm **)*((void *)this + 189);
    }
  }
  else
  {
LABEL_1619:
    v784 = (llvm **)(v782 + 8 * v724);
  }
  v785 = (llvm **)(v782 + 8 * v724);
  if (v784 != v785)
  {
    do
    {
      v786 = v784 + 1;
      llvm::deleteConstant(*v784, a2);
      v784 = v783;
      if (v786 != v783)
      {
        v784 = v786;
        while (((unint64_t)*v784 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (++v784 == v783)
          {
            v784 = v783;
            break;
          }
        }
      }
    }
    while (v784 != v785);
    int v738 = *((_DWORD *)this + 312);
    uint64_t v740 = *((unsigned int *)this + 314);
  }
  uint64_t v787 = *((void *)this + 155);
  v788 = (llvm **)(v787 + 8 * v740);
  if (v738)
  {
    if (v740)
    {
      uint64_t v1029 = 8 * v740;
      v789 = (llvm **)*((void *)this + 155);
      while (*v789 == (llvm *)-4096 || *v789 == (llvm *)-8192)
      {
        ++v789;
        v1029 -= 8;
        if (!v1029) {
          goto LABEL_1629;
        }
      }
    }
    else
    {
      v789 = (llvm **)*((void *)this + 155);
    }
  }
  else
  {
LABEL_1629:
    v789 = (llvm **)(v787 + 8 * v740);
  }
  v790 = (llvm **)(v787 + 8 * v740);
LABEL_1631:
  while (v789 != v790)
  {
    v791 = v789 + 1;
    llvm::deleteConstant(*v789, a2);
    v789 = v788;
    if (v791 != v788)
    {
      v789 = v791;
      while (*v789 == (llvm *)-4096 || *v789 == (llvm *)-8192)
      {
        if (++v789 == v788)
        {
          v789 = v788;
          goto LABEL_1631;
        }
      }
    }
  }
  uint64_t v792 = *((void *)this + 158);
  uint64_t v793 = *((unsigned int *)this + 320);
  v794 = (llvm **)(v792 + 8 * v793);
  if (*((_DWORD *)this + 318))
  {
    if (v793)
    {
      uint64_t v1028 = 8 * v793;
      v795 = (llvm **)*((void *)this + 158);
      while (*v795 == (llvm *)-4096 || *v795 == (llvm *)-8192)
      {
        ++v795;
        v1028 -= 8;
        if (!v1028) {
          goto LABEL_1640;
        }
      }
    }
    else
    {
      v795 = (llvm **)*((void *)this + 158);
    }
  }
  else
  {
LABEL_1640:
    v795 = (llvm **)(v792 + 8 * v793);
  }
  v796 = (llvm **)(v792 + 8 * v793);
LABEL_1642:
  while (v795 != v796)
  {
    v797 = v795 + 1;
    llvm::deleteConstant(*v795, a2);
    v795 = v794;
    if (v797 != v794)
    {
      v795 = v797;
      while (((unint64_t)*v795 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v795 == v794)
        {
          v795 = v794;
          goto LABEL_1642;
        }
      }
    }
  }
  uint64_t v798 = *((void *)this + 161);
  uint64_t v799 = *((unsigned int *)this + 326);
  v800 = (llvm **)(v798 + 8 * v799);
  if (*((_DWORD *)this + 324))
  {
    if (v799)
    {
      uint64_t v801 = 8 * v799;
      v802 = (llvm **)*((void *)this + 161);
      while (*v802 == (llvm *)-4096 || *v802 == (llvm *)-8192)
      {
        ++v802;
        v801 -= 8;
        if (!v801) {
          goto LABEL_1656;
        }
      }
    }
    else
    {
      v802 = (llvm **)*((void *)this + 161);
    }
  }
  else
  {
LABEL_1656:
    v802 = (llvm **)(v798 + 8 * v799);
  }
  v803 = (llvm **)(v798 + 8 * v799);
LABEL_1658:
  while (v802 != v803)
  {
    v804 = v802 + 1;
    llvm::deleteConstant(*v802, a2);
    v802 = v800;
    if (v804 != v800)
    {
      v802 = v804;
      while (*v802 == (llvm *)-4096 || *v802 == (llvm *)-8192)
      {
        if (++v802 == v800)
        {
          v802 = v800;
          goto LABEL_1658;
        }
      }
    }
  }
  uint64_t v805 = *((void *)this + 192);
  uint64_t v806 = *((unsigned int *)this + 388);
  v807 = (void ***)(v805 + 8 * v806);
  if (*((_DWORD *)this + 386))
  {
    if (v806)
    {
      uint64_t v1050 = 8 * v806;
      v808 = (void ***)*((void *)this + 192);
      while (((unint64_t)*v808 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v808;
        v1050 -= 8;
        if (!v1050) {
          goto LABEL_1667;
        }
      }
    }
    else
    {
      v808 = (void ***)*((void *)this + 192);
    }
  }
  else
  {
LABEL_1667:
    v808 = (void ***)(v805 + 8 * v806);
  }
  v809 = (void ***)(v805 + 8 * v806);
LABEL_1669:
  while (v808 != v809)
  {
    if (*v808)
    {
      sub_1CD5C599C(*v808, a2);
      MEMORY[0x1D25D9CE0]();
    }
    v810 = v808 + 1;
    v808 = v807;
    if (v810 != v807)
    {
      v808 = v810;
      while (((unint64_t)*v808 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v808 == v807)
        {
          v808 = v807;
          goto LABEL_1669;
        }
      }
    }
  }
  v811 = (unsigned int *)((char *)this + 1216);
  int v812 = *((_DWORD *)this + 306);
  if (v812 || *((_DWORD *)this + 307))
  {
    uint64_t v813 = *((unsigned int *)this + 308);
    if (v813 > 4 * v812 && v813 >= 0x41)
    {
      sub_1CD5CC6A0((unsigned int *)this + 304, a2);
    }
    else
    {
      if (v813)
      {
        v814 = *(void **)v811;
        uint64_t v815 = *(void *)v811 + 16 * v813;
        do
        {
          if (*v814 != -4096)
          {
            if (*v814 != -8192)
            {
              v816 = (llvm::Value *)v814[1];
              v814[1] = 0;
              if (v816)
              {
                llvm::Value::~Value(v816, a2);
                int v817 = *((_DWORD *)v816 + 5);
                if ((v817 & 0x40000000) != 0)
                {
                  v824 = (char *)*((void *)v816 - 1);
                  v822 = (char *)v816 - 8;
                  v823 = v824;
                  uint64_t v825 = v817 & 0x7FFFFFF;
                  if (v825)
                  {
                    uint64_t v826 = 32 * v825;
                    do
                    {
                      v827 = &v823[v826];
                      if (*(void *)&v823[v826 - 32])
                      {
                        **((void **)v827 - 2) = *((void *)v827 - 3);
                        uint64_t v828 = *((void *)v827 - 3);
                        if (v828) {
                          *(void *)(v828 + 16) = *((void *)v827 - 2);
                        }
                      }
                      v826 -= 32;
                    }
                    while (v826);
                  }
                  operator delete(v823);
                }
                else
                {
                  uint64_t v818 = v817 & 0x7FFFFFF;
                  if (v818)
                  {
                    v819 = (void **)((char *)v816 - 16);
                    uint64_t v820 = -32 * v818;
                    do
                    {
                      if (*(v819 - 2))
                      {
                        void **v819 = *(v819 - 1);
                        uint64_t v821 = (uint64_t)*(v819 - 1);
                        if (v821) {
                          *(void *)(v821 + 16) = *v819;
                        }
                      }
                      v819 -= 4;
                      v820 += 32;
                    }
                    while (v820);
                  }
                  v822 = (char *)v816 - 32 * v818;
                  if (v817 < 0) {
                    v822 = &v822[-*((void *)v822 - 1) - 8];
                  }
                }
                operator delete(v822);
              }
            }
            void *v814 = -4096;
          }
          v814 += 2;
        }
        while (v814 != (void *)v815);
      }
      *((void *)this + 153) = 0;
    }
  }
  v829 = (unsigned int *)((char *)this + 1312);
  int v830 = *((_DWORD *)this + 330);
  if (v830 || *((_DWORD *)this + 331))
  {
    uint64_t v831 = *((unsigned int *)this + 332);
    if (v831 > 4 * v830 && v831 >= 0x41)
    {
      sub_1CD5CC6A0((unsigned int *)this + 328, a2);
    }
    else
    {
      if (v831)
      {
        v832 = *(void **)v829;
        uint64_t v833 = *(void *)v829 + 16 * v831;
        do
        {
          if (*v832 != -4096)
          {
            if (*v832 != -8192)
            {
              v834 = (llvm::Value *)v832[1];
              v832[1] = 0;
              if (v834)
              {
                llvm::Value::~Value(v834, a2);
                int v835 = *((_DWORD *)v834 + 5);
                if ((v835 & 0x40000000) != 0)
                {
                  v842 = (char *)*((void *)v834 - 1);
                  v840 = (char *)v834 - 8;
                  v841 = v842;
                  uint64_t v843 = v835 & 0x7FFFFFF;
                  if (v843)
                  {
                    uint64_t v844 = 32 * v843;
                    do
                    {
                      v845 = &v841[v844];
                      if (*(void *)&v841[v844 - 32])
                      {
                        **((void **)v845 - 2) = *((void *)v845 - 3);
                        uint64_t v846 = *((void *)v845 - 3);
                        if (v846) {
                          *(void *)(v846 + 16) = *((void *)v845 - 2);
                        }
                      }
                      v844 -= 32;
                    }
                    while (v844);
                  }
                  operator delete(v841);
                }
                else
                {
                  uint64_t v836 = v835 & 0x7FFFFFF;
                  if (v836)
                  {
                    v837 = (void **)((char *)v834 - 16);
                    uint64_t v838 = -32 * v836;
                    do
                    {
                      if (*(v837 - 2))
                      {
                        void **v837 = *(v837 - 1);
                        uint64_t v839 = (uint64_t)*(v837 - 1);
                        if (v839) {
                          *(void *)(v839 + 16) = *v837;
                        }
                      }
                      v837 -= 4;
                      v838 += 32;
                    }
                    while (v838);
                  }
                  v840 = (char *)v834 - 32 * v836;
                  if (v835 < 0) {
                    v840 = &v840[-*((void *)v840 - 1) - 8];
                  }
                }
                operator delete(v840);
              }
            }
            void *v832 = -4096;
          }
          v832 += 2;
        }
        while (v832 != (void *)v833);
      }
      *((void *)this + 165) = 0;
    }
  }
  v847 = (unsigned int *)((char *)this + 1336);
  int v848 = *((_DWORD *)this + 336);
  if (v848 || *((_DWORD *)this + 337))
  {
    uint64_t v1034 = *((unsigned int *)this + 338);
    if (v1034 > 4 * v848 && v1034 >= 0x41)
    {
      sub_1CD5CC75C((unsigned int *)this + 334, a2);
      goto LABEL_1739;
    }
    if (!v1034)
    {
LABEL_2141:
      *((void *)this + 168) = 0;
      goto LABEL_1739;
    }
    v1035 = *(void **)v847;
    uint64_t v1036 = *(void *)v847 + 16 * v1034;
    while (1)
    {
      if (*v1035 == -8192) {
        goto LABEL_2131;
      }
      if (*v1035 != -4096) {
        break;
      }
LABEL_2132:
      v1035 += 2;
      if (v1035 == (void *)v1036) {
        goto LABEL_2141;
      }
    }
    v1037 = (llvm::Value *)v1035[1];
    v1035[1] = 0;
    if (v1037)
    {
      llvm::Value::~Value(v1037, a2);
      int v1038 = *((_DWORD *)v1037 + 5);
      if ((v1038 & 0x40000000) != 0)
      {
        v1045 = (char *)*((void *)v1037 - 1);
        v1043 = (char *)v1037 - 8;
        v1044 = v1045;
        uint64_t v1046 = v1038 & 0x7FFFFFF;
        if (v1046)
        {
          uint64_t v1047 = 32 * v1046;
          do
          {
            v1048 = &v1044[v1047];
            if (*(void *)&v1044[v1047 - 32])
            {
              **((void **)v1048 - 2) = *((void *)v1048 - 3);
              uint64_t v1049 = *((void *)v1048 - 3);
              if (v1049) {
                *(void *)(v1049 + 16) = *((void *)v1048 - 2);
              }
            }
            v1047 -= 32;
          }
          while (v1047);
        }
        operator delete(v1044);
      }
      else
      {
        uint64_t v1039 = v1038 & 0x7FFFFFF;
        if (v1039)
        {
          v1040 = (void **)((char *)v1037 - 16);
          uint64_t v1041 = -32 * v1039;
          do
          {
            if (*(v1040 - 2))
            {
              void **v1040 = *(v1040 - 1);
              uint64_t v1042 = (uint64_t)*(v1040 - 1);
              if (v1042) {
                *(void *)(v1042 + 16) = *v1040;
              }
            }
            v1040 -= 4;
            v1041 += 32;
          }
          while (v1041);
        }
        v1043 = (char *)v1037 - 32 * v1039;
        if (v1038 < 0) {
          v1043 = &v1043[-*((void *)v1043 - 1) - 8];
        }
      }
      operator delete(v1043);
    }
LABEL_2131:
    void *v1035 = -4096;
    goto LABEL_2132;
  }
LABEL_1739:
  v849 = (void **)((char *)this + 1360);
  int v850 = *((_DWORD *)this + 342);
  if (v850 || *((_DWORD *)this + 343))
  {
    uint64_t v851 = *((unsigned int *)this + 344);
    if (v851 > 4 * v850 && v851 >= 0x41)
    {
      sub_1CD5CC6A0((unsigned int *)this + 340, a2);
    }
    else
    {
      if (v851)
      {
        v852 = *v849;
        uint64_t v853 = (uint64_t)&(*v849)[2 * v851];
        do
        {
          if (*v852 != -4096)
          {
            if (*v852 != -8192)
            {
              v854 = (llvm::Value *)v852[1];
              v852[1] = 0;
              if (v854)
              {
                llvm::Value::~Value(v854, a2);
                int v855 = *((_DWORD *)v854 + 5);
                if ((v855 & 0x40000000) != 0)
                {
                  v862 = (char *)*((void *)v854 - 1);
                  v860 = (char *)v854 - 8;
                  v861 = v862;
                  uint64_t v863 = v855 & 0x7FFFFFF;
                  if (v863)
                  {
                    uint64_t v864 = 32 * v863;
                    do
                    {
                      v865 = &v861[v864];
                      if (*(void *)&v861[v864 - 32])
                      {
                        **((void **)v865 - 2) = *((void *)v865 - 3);
                        uint64_t v866 = *((void *)v865 - 3);
                        if (v866) {
                          *(void *)(v866 + 16) = *((void *)v865 - 2);
                        }
                      }
                      v864 -= 32;
                    }
                    while (v864);
                  }
                  operator delete(v861);
                }
                else
                {
                  uint64_t v856 = v855 & 0x7FFFFFF;
                  if (v856)
                  {
                    v857 = (void **)((char *)v854 - 16);
                    uint64_t v858 = -32 * v856;
                    do
                    {
                      if (*(v857 - 2))
                      {
                        void **v857 = *(v857 - 1);
                        uint64_t v859 = (uint64_t)*(v857 - 1);
                        if (v859) {
                          *(void *)(v859 + 16) = *v857;
                        }
                      }
                      v857 -= 4;
                      v858 += 32;
                    }
                    while (v858);
                  }
                  v860 = (char *)v854 - 32 * v856;
                  if (v855 < 0) {
                    v860 = &v860[-*((void *)v860 - 1) - 8];
                  }
                }
                operator delete(v860);
              }
            }
            void *v852 = -4096;
          }
          v852 += 2;
        }
        while (v852 != (void *)v853);
      }
      *((void *)this + 171) = 0;
    }
  }
  v867 = (void **)((char *)this + 1384);
  int v868 = *((_DWORD *)this + 348);
  if (v868 || *((_DWORD *)this + 349))
  {
    uint64_t v869 = *((unsigned int *)this + 350);
    if (v869 > 4 * v868 && v869 >= 0x41)
    {
      sub_1CD5CC6A0((unsigned int *)this + 346, a2);
    }
    else
    {
      if (v869)
      {
        v870 = *v867;
        uint64_t v871 = (uint64_t)&(*v867)[2 * v869];
        do
        {
          if (*v870 != -4096)
          {
            if (*v870 != -8192)
            {
              v872 = (llvm::Value *)v870[1];
              v870[1] = 0;
              if (v872)
              {
                llvm::Value::~Value(v872, a2);
                int v873 = *((_DWORD *)v872 + 5);
                if ((v873 & 0x40000000) != 0)
                {
                  v880 = (char *)*((void *)v872 - 1);
                  v878 = (char *)v872 - 8;
                  v879 = v880;
                  uint64_t v881 = v873 & 0x7FFFFFF;
                  if (v881)
                  {
                    uint64_t v882 = 32 * v881;
                    do
                    {
                      v883 = &v879[v882];
                      if (*(void *)&v879[v882 - 32])
                      {
                        **((void **)v883 - 2) = *((void *)v883 - 3);
                        uint64_t v884 = *((void *)v883 - 3);
                        if (v884) {
                          *(void *)(v884 + 16) = *((void *)v883 - 2);
                        }
                      }
                      v882 -= 32;
                    }
                    while (v882);
                  }
                  operator delete(v879);
                }
                else
                {
                  uint64_t v874 = v873 & 0x7FFFFFF;
                  if (v874)
                  {
                    v875 = (void **)((char *)v872 - 16);
                    uint64_t v876 = -32 * v874;
                    do
                    {
                      if (*(v875 - 2))
                      {
                        void **v875 = *(v875 - 1);
                        uint64_t v877 = (uint64_t)*(v875 - 1);
                        if (v877) {
                          *(void *)(v877 + 16) = *v875;
                        }
                      }
                      v875 -= 4;
                      v876 += 32;
                    }
                    while (v876);
                  }
                  v878 = (char *)v872 - 32 * v874;
                  if (v873 < 0) {
                    v878 = &v878[-*((void *)v878 - 1) - 8];
                  }
                }
                operator delete(v878);
              }
            }
            void *v870 = -4096;
          }
          v870 += 2;
        }
        while (v870 != (void *)v871);
      }
      *((void *)this + 174) = 0;
    }
  }
  v886 = (uint64_t *)((char *)this + 176);
  int v887 = *((_DWORD *)this + 46);
  if (!v887 && !*((_DWORD *)this + 47)) {
    goto LABEL_1831;
  }
  uint64_t v888 = *((unsigned int *)this + 48);
  if (v888 > 4 * v887 && v888 >= 0x41)
  {
    sub_1CD5CC818((uint64_t)this + 176);
    goto LABEL_1831;
  }
  v1060[0] = 0;
  __src = 0;
  LODWORD(v1065) = 0;
  uint64_t v1064 = 1;
  if (!v888)
  {
    *((void *)this + 23) = 0;
    goto LABEL_1830;
  }
  uint64_t v889 = *v886;
  uint64_t v890 = 24 * v888;
  while (2)
  {
    unsigned int v891 = *(_DWORD *)(v889 + 8);
    unsigned int v892 = v1060[0];
    if (v891 == v1060[0])
    {
      if (v891 > 0x40)
      {
        if (!llvm::APInt::equalSlowCase((const void **)v889, (const void **)&__src)) {
          goto LABEL_1809;
        }
      }
      else if (*(void **)v889 != __src)
      {
        goto LABEL_1809;
      }
    }
    else
    {
LABEL_1809:
      if (v891 != v1065)
      {
LABEL_1810:
        uint64_t v893 = *(void *)(v889 + 16);
        *(void *)(v889 + 16) = 0;
        if (v893)
        {
          sub_1CC57080C(v889 + 16, v893);
          unsigned int v891 = *(_DWORD *)(v889 + 8);
          unsigned int v892 = v1060[0];
        }
        goto LABEL_1812;
      }
      if (v891 > 0x40)
      {
        if (!llvm::APInt::equalSlowCase((const void **)v889, (const void **)&v1064)) {
          goto LABEL_1810;
        }
      }
      else
      {
        if (*(void *)v889 != v1064) {
          goto LABEL_1810;
        }
LABEL_1812:
        if (v891 <= 0x40 && v892 <= 0x40)
        {
          *(void *)uint64_t v889 = __src;
          *(_DWORD *)(v889 + 8) = v892;
          goto LABEL_1817;
        }
      }
      if ((void **)v889 != &__src)
      {
        llvm::APInt::reallocate(v889, v892);
        uint64_t v894 = *(unsigned int *)(v889 + 8);
        if (v894 <= 0x40) {
          *(void *)uint64_t v889 = __src;
        }
        else {
          memcpy(*(void **)v889, __src, ((unint64_t)(v894 + 63) >> 3) & 0x3FFFFFF8);
        }
      }
    }
LABEL_1817:
    v889 += 24;
    v890 -= 24;
    if (v890) {
      continue;
    }
    break;
  }
  unsigned int v895 = v1065;
  *((void *)this + 23) = 0;
  if (v895 >= 0x41 && v1064) {
    MEMORY[0x1D25D9CB0](v1064, 0x1000C8000313F17);
  }
LABEL_1830:
  if (v1060[0] >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
LABEL_1831:
  v1057 = (uint64_t *)((char *)this + 200);
  int v896 = *((_DWORD *)this + 52);
  if (v896 || *((_DWORD *)this + 53))
  {
    unsigned int v897 = *((_DWORD *)this + 54);
    if (v897 > 4 * v896 && v897 >= 0x41)
    {
      sub_1CD5CC8BC(v1057);
      v829 = (unsigned int *)((char *)this + 1312);
      v811 = (unsigned int *)((char *)this + 1216);
      v886 = (uint64_t *)((char *)this + 176);
      v847 = (unsigned int *)((char *)this + 1336);
      goto LABEL_1916;
    }
    unsigned __int8 v1063 = 2;
    int v1062 = -1;
    *(void *)v1060 = &unk_1CFB2E394;
    uint64_t v1061 = 1;
    llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)v1060, 1, 0);
    unsigned __int8 v1068 = v1068 & 0xF0 | 2;
    int v1067 = -1;
    v1065 = &unk_1CFB2E394;
    uint64_t v1066 = 2;
    llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v1065, 1, 0);
    unsigned int v898 = *((_DWORD *)this + 54);
    if (!v898)
    {
LABEL_1909:
      *((void *)this + 26) = 0;
      if (v1065 == (_DWORD *)&unk_1CFB2E344)
      {
        sub_1CB845718(&v1066);
        v847 = (unsigned int *)((char *)this + 1336);
      }
      else
      {
        v847 = (unsigned int *)((char *)this + 1336);
        if ((v1065[2] - 64) <= 0xFFFFFF7F && v1066) {
          MEMORY[0x1D25D9CB0](v1066, 0x1000C8000313F17);
        }
      }
      v886 = (uint64_t *)((char *)this + 176);
      if (*(_UNKNOWN **)v1060 == &unk_1CFB2E344)
      {
        sub_1CB845718(&v1061);
        v829 = (unsigned int *)((char *)this + 1312);
        v811 = (unsigned int *)((char *)this + 1216);
      }
      else
      {
        v829 = (unsigned int *)((char *)this + 1312);
        v811 = (unsigned int *)((char *)this + 1216);
        if ((*(_DWORD *)(*(void *)v1060 + 8) - 64) <= 0xFFFFFF7F && v1061) {
          MEMORY[0x1D25D9CB0](v1061, 0x1000C8000313F17);
        }
      }
      goto LABEL_1916;
    }
    uint64_t v899 = *((void *)this + 25);
    uint64_t v900 = v899 + 40 * v898;
    while (1)
    {
      v902 = (void **)(v899 + 8);
      v901 = *(_DWORD **)(v899 + 8);
      if (v901 != *(_DWORD **)v1060) {
        goto LABEL_1854;
      }
      if (v901 != (_DWORD *)&unk_1CFB2E344) {
        break;
      }
      if ((llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(v899 + 8), (const llvm::detail::DoubleAPFloat *)v1060) & 1) == 0)
      {
        v901 = *v902;
        goto LABEL_1854;
      }
LABEL_1875:
      v899 += 40;
      if (v899 == v900) {
        goto LABEL_1909;
      }
    }
    if ((void **)v899 == &__src) {
      goto LABEL_1875;
    }
    int v903 = *(unsigned __int8 *)(v899 + 28);
    if ((v903 & 7) == (v1063 & 7) && ((v1063 ^ v903) & 8) == 0)
    {
      if ((v903 & 7) == 3 || (v903 & 7) == 0) {
        goto LABEL_1875;
      }
      if ((v903 & 6) == 0 || *(_DWORD *)(v899 + 24) == v1062)
      {
        int v904 = v901[2];
        unsigned int v905 = v904 - 64;
        v906 = (void *)(v899 + 16);
        if ((v904 - 64) <= 0xFFFFFF7F) {
          v906 = (void *)*v906;
        }
        unsigned int v907 = v904 + 64;
        v908 = v905 >= 0xFFFFFF80 ? &v1061 : (uint64_t *)v1061;
        if (!memcmp(v906, v908, (v907 >> 3) & 0x1FFFFFF8)) {
          goto LABEL_1875;
        }
      }
    }
LABEL_1854:
    if (v901 == v1065)
    {
      if (v901 == (_DWORD *)&unk_1CFB2E344)
      {
        if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(v899 + 8), (const llvm::detail::DoubleAPFloat *)&v1065))
        {
LABEL_1870:
          v915 = *v902;
          if (*v902 == &unk_1CFB2E344 || *(void *)v1060 == (void)&unk_1CFB2E344)
          {
            if (v915 == (_DWORD *)&unk_1CFB2E344 && *(_UNKNOWN **)v1060 == &unk_1CFB2E344)
            {
              llvm::detail::DoubleAPFloat::operator=((const llvm::detail::DoubleAPFloat *)(v899 + 8), (const llvm::detail::DoubleAPFloat *)v1060);
            }
            else if ((void **)v899 != &__src)
            {
              if (v915 == (_DWORD *)&unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)(v899 + 16));
              }
              else if ((v915[2] - 64) <= 0xFFFFFF7F)
              {
                uint64_t v928 = *(void *)(v899 + 16);
                if (v928) {
                  MEMORY[0x1D25D9CB0](v928, 0x1000C8000313F17);
                }
              }
              uint64_t v917 = *(void *)v1060;
              if (*(_UNKNOWN **)v1060 == &unk_1CFB2E344)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)(v899 + 8), (const llvm::detail::DoubleAPFloat *)v1060);
              }
              else
              {
                *v902 = *(void **)v1060;
                if ((*(_DWORD *)(v917 + 8) + 64) >= 0x80) {
                  operator new[]();
                }
                char v918 = *(unsigned char *)(v899 + 28) & 0xF7 | v1063 & 8;
                *(unsigned char *)(v899 + 28) = v918;
                unsigned __int8 v919 = v1063;
                int v920 = v1063 & 7;
                *(unsigned char *)(v899 + 28) = v918 & 0xF8 | v1063 & 7;
                *(_DWORD *)(v899 + 24) = v1062;
                BOOL v922 = (v919 & 6) != 0 && v920 != 3;
                if (v920 == 1 || v922)
                {
                  uint64_t v923 = *(unsigned int *)(*(void *)(v899 + 8) + 8);
                  v924 = (void *)(v899 + 16);
                  if ((v923 - 64) <= 0xFFFFFF7F) {
                    v924 = (void *)*v924;
                  }
                  if ((*(_DWORD *)(*(void *)v1060 + 8) - 64) >= 0xFFFFFF80) {
                    v925 = &v1061;
                  }
                  else {
                    v925 = (uint64_t *)v1061;
                  }
                  if (v923 <= 0xFFFFFFBF)
                  {
                    unint64_t v926 = (unint64_t)(v923 + 64) >> 6;
                    do
                    {
                      uint64_t v927 = *v925++;
                      *v924++ = v927;
                      --v926;
                    }
                    while (v926);
                  }
                }
              }
            }
          }
          else
          {
            llvm::detail::IEEEFloat::operator=((void *)(v899 + 8), v1060);
          }
          goto LABEL_1875;
        }
      }
      else
      {
        if ((uint64_t *)v899 == &v1064) {
          goto LABEL_1870;
        }
        int v909 = *(unsigned __int8 *)(v899 + 28);
        if ((v909 & 7) == (v1068 & 7) && ((v1068 ^ v909) & 8) == 0)
        {
          if ((v909 & 7) == 3 || (v909 & 7) == 0) {
            goto LABEL_1870;
          }
          if ((v909 & 6) == 0 || *(_DWORD *)(v899 + 24) == v1067)
          {
            int v910 = v901[2];
            unsigned int v911 = v910 - 64;
            v912 = (void *)(v899 + 16);
            if ((v910 - 64) <= 0xFFFFFF7F) {
              v912 = (void *)*v912;
            }
            unsigned int v913 = v910 + 64;
            v914 = v911 >= 0xFFFFFF80 ? &v1066 : (uint64_t *)v1066;
            if (!memcmp(v912, v914, (v913 >> 3) & 0x1FFFFFF8)) {
              goto LABEL_1870;
            }
          }
        }
      }
    }
    sub_1CC567FD8((uint64_t *)(v899 + 32), 0);
    goto LABEL_1870;
  }
LABEL_1916:
  if (*((_DWORD *)this + 355))
  {
    uint64_t v929 = *((unsigned int *)this + 354);
    if (v929)
    {
      uint64_t v930 = 0;
      uint64_t v931 = 8 * v929;
      do
      {
        uint64_t v932 = *((void *)this + 176);
        uint64_t v933 = *(void *)(v932 + v930);
        if (v933) {
          BOOL v934 = v933 == -8;
        }
        else {
          BOOL v934 = 1;
        }
        if (!v934) {
          sub_1CC5748CC(v933);
        }
        *(void *)(v932 + v930) = 0;
        v930 += 8;
      }
      while (v931 != v930);
    }
    *(void *)((char *)this + 1420) = 0;
  }
  v1058 = (_DWORD *)((char *)this + 416);
  v935 = (void **)*((void *)this + 32);
  for (i21 = v935; ; ++i21)
  {
    v937 = *i21;
    if (*i21)
    {
      if (v937 == (void *)-1) {
        break;
      }
      if (v937 && ((unint64_t)*i21 & 1) == 0) {
        break;
      }
    }
  }
  __src = *i21;
  for (i22 = &v935[*((unsigned int *)this + 66)]; ; ++i22)
  {
    v940 = (void *)*i22;
    if (*i22)
    {
      if (v940 == (void *)-1) {
        break;
      }
      if (v940 && (*i22 & 1) == 0) {
        break;
      }
    }
  }
  while (v937 != v940)
  {
    llvm::FoldingSetIteratorImpl::advance((unint64_t **)&__src);
    MEMORY[0x1D25D9CD0](v937[3], 8);
    operator delete(v937);
    v937 = __src;
  }
  __src = &v1061;
  *(void *)v1060 = 0x800000000;
  unsigned int v942 = *((_DWORD *)this + 106);
  if (v942 >= 9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v943 = *((void *)this + 52);
  uint64_t v944 = *((unsigned int *)this + 108);
  v945 = (void *)(v943 + 16 * v944);
  if (v942)
  {
    if (v944)
    {
      uint64_t v946 = 16 * v944;
      v947 = (void *)*((void *)this + 52);
      while ((*v947 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v947 += 2;
        v946 -= 16;
        if (!v946) {
          goto LABEL_1951;
        }
      }
    }
    else
    {
      v947 = (void *)*((void *)this + 52);
    }
  }
  else
  {
LABEL_1951:
    v947 = (void *)(v943 + 16 * v944);
  }
  v948 = (void *)(v943 + 16 * v944);
  if (v947 != v948)
  {
    unsigned int v949 = v1060[0];
    do
    {
      if (v949 >= v1060[1]) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)__src + v949) = v947[1];
      unsigned int v949 = ++v1060[0];
      v950 = v947 + 2;
      v947 = v945;
      if (v950 != v945)
      {
        v947 = v950;
        while ((*v947 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v947 += 2;
          if (v947 == v945)
          {
            v947 = v945;
            break;
          }
        }
      }
    }
    while (v947 != v948);
    unsigned int v942 = *((_DWORD *)this + 106);
  }
  if (v942 || *((_DWORD *)this + 107))
  {
    uint64_t v1018 = *((unsigned int *)this + 108);
    if (v1018 > 4 * v942 && v1018 >= 0x41)
    {
      sub_1CBA7B248(v1058);
    }
    else
    {
      if (v1018)
      {
        v1019 = *(void **)v1058;
        uint64_t v1020 = 16 * v1018;
        do
        {
          void *v1019 = -4096;
          v1019 += 2;
          v1020 -= 16;
        }
        while (v1020);
      }
      *((void *)this + 53) = 0;
    }
  }
  v951 = (int32x2_t *****)__src;
  if (v1060[0])
  {
    uint64_t v952 = 8 * v1060[0];
    do
    {
      if (*v951)
      {
        llvm::MetadataAsValue::~MetadataAsValue(*v951);
        MEMORY[0x1D25D9CE0]();
      }
      ++v951;
      v952 -= 8;
    }
    while (v952);
    v951 = (int32x2_t *****)__src;
  }
  if (v951 != (int32x2_t *****)&v1061) {
    free(v951);
  }
  uint64_t v953 = *((void *)this + 49);
  uint64_t v954 = *((unsigned int *)this + 102);
  v955 = (void *)(v953 + 16 * v954);
  if (*((_DWORD *)this + 100))
  {
    if (v954)
    {
      uint64_t v956 = 16 * v954;
      v957 = (void *)*((void *)this + 49);
      while ((*v957 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v957 += 2;
        v956 -= 16;
        if (!v956) {
          goto LABEL_1979;
        }
      }
    }
    else
    {
      v957 = (void *)*((void *)this + 49);
    }
  }
  else
  {
LABEL_1979:
    v957 = (void *)(v953 + 16 * v954);
  }
  v958 = (void *)(v953 + 16 * v954);
LABEL_1982:
  while (v957 != v958)
  {
    uint64_t v959 = v957[1];
    if (v959)
    {
      if ((*(unsigned char *)(v959 + 24) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v959 + 32), 8);
      }
      MEMORY[0x1D25D9CE0](v959, 0x1020C4072C728BCLL);
    }
    v960 = v957 + 2;
    v957 = v955;
    if (v960 != v955)
    {
      v957 = v960;
      while ((*v957 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v957 += 2;
        if (v957 == v955)
        {
          v957 = v955;
          goto LABEL_1982;
        }
      }
    }
  }
  uint64_t v961 = *((unsigned int *)this + 664);
  uint64_t v962 = *((void *)this + 330);
  if (v961)
  {
    uint64_t v1051 = 32 * v961;
    do
    {
      if ((*(void *)v962 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(char *)(v962 + 31) < 0) {
        operator delete(*(void **)(v962 + 8));
      }
      v962 += 32;
      v1051 -= 32;
    }
    while (v1051);
    uint64_t v962 = *((void *)this + 330);
  }
  MEMORY[0x1D25D9CD0](v962, 8);
  if (*((_DWORD *)this + 655))
  {
    uint64_t v963 = *((unsigned int *)this + 654);
    if (v963)
    {
      uint64_t v964 = 0;
      uint64_t v965 = 8 * v963;
      do
      {
        uint64_t v966 = *(void *)(*((void *)this + 326) + v964);
        if (v966) {
          BOOL v967 = v966 == -8;
        }
        else {
          BOOL v967 = 1;
        }
        if (!v967) {
          MEMORY[0x1D25D9CD0]();
        }
        v964 += 8;
      }
      while (v965 != v964);
    }
  }
  free(*((void **)this + 326));
  sub_1CC3724DC((uint64_t)this + 2576);
  MEMORY[0x1D25D9CD0](*((void *)this + 319), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 316), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 313), 8);
  unsigned int v968 = *((_DWORD *)this + 624);
  uint64_t v969 = *((void *)this + 310);
  if (v968)
  {
    uint64_t v970 = v969 + 40 * v968;
    while ((*(void *)v969 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
LABEL_2005:
      v969 += 40;
      if (v969 == v970)
      {
        uint64_t v969 = *((void *)this + 310);
        goto LABEL_2029;
      }
    }
    v971 = *(char **)(v969 + 8);
    uint64_t v972 = *(unsigned int *)(v969 + 16);
    if (!v972)
    {
LABEL_2027:
      if (v971 != (char *)(v969 + 24)) {
        free(v971);
      }
      goto LABEL_2005;
    }
    v973 = v971 - 8;
    uint64_t v974 = 16 * v972;
    while (1)
    {
      v975 = *(unsigned __int8 **)&v973[v974];
      if (v975)
      {
        int v976 = *v975;
        if ((v976 - 4) > 0x1E)
        {
          if ((v976 - 3) >= 0xFFFFFFFE) {
            uint64_t v977 = *(void *)&v973[v974];
          }
          else {
            uint64_t v977 = 0;
          }
          if ((v976 - 3) < 0xFFFFFFFE)
          {
            if (v976 == 3) {
              *((void *)v975 + 1) = 0;
            }
            goto LABEL_2013;
          }
          unint64_t v978 = v977 + 8;
        }
        else
        {
          if ((v975[1] & 0x7F) != 2 && !*((_DWORD *)v975 + 3)) {
            goto LABEL_2013;
          }
          uint64_t v979 = *((void *)v975 + 2);
          if ((v979 & 4) == 0) {
            goto LABEL_2013;
          }
          unint64_t v978 = v979 & 0xFFFFFFFFFFFFFFF8;
          if (!v978) {
            goto LABEL_2013;
          }
        }
        __src = &v973[v974];
        sub_1CC5FA668(v978 + 16, &__src);
      }
LABEL_2013:
      v974 -= 16;
      if (!v974)
      {
        v971 = *(char **)(v969 + 8);
        goto LABEL_2027;
      }
    }
  }
LABEL_2029:
  MEMORY[0x1D25D9CD0](v969, 8);
  sub_1CC3724DC((uint64_t)this + 2448);
  MEMORY[0x1D25D9CD0](*((void *)this + 303), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 300), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 297), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 294), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 291), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 288), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 285), 8);
  if (*((_DWORD *)this + 563))
  {
    uint64_t v980 = *((unsigned int *)this + 562);
    if (v980)
    {
      uint64_t v981 = 0;
      uint64_t v982 = 8 * v980;
      do
      {
        uint64_t v983 = *(void *)(*((void *)this + 280) + v981);
        if (v983) {
          BOOL v984 = v983 == -8;
        }
        else {
          BOOL v984 = 1;
        }
        if (!v984) {
          MEMORY[0x1D25D9CD0]();
        }
        v981 += 8;
      }
      while (v982 != v981);
    }
  }
  free(*((void **)this + 280));
  MEMORY[0x1D25D9CD0](*((void *)this + 277), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 274), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 271), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 268), 8);
  uint64_t v986 = *((unsigned int *)this + 516);
  if (v986)
  {
    v987 = (uint64_t *)*((void *)this + 257);
    uint64_t v988 = 8 * v986;
    do
    {
      uint64_t v989 = *v987++;
      MEMORY[0x1D25D9CD0](v989, 8);
      v988 -= 8;
    }
    while (v988);
  }
  v990 = (uint64_t *)*((void *)this + 263);
  uint64_t v991 = *((unsigned int *)this + 528);
  if (v991)
  {
    uint64_t v1030 = 16 * v991;
    do
    {
      uint64_t v1031 = *v990;
      v990 += 2;
      MEMORY[0x1D25D9CD0](v1031, 8);
      v1030 -= 16;
    }
    while (v1030);
    v990 = (uint64_t *)*((void *)this + 263);
  }
  if (v990 != (uint64_t *)((char *)this + 2120)) {
    free(v990);
  }
  v992 = (char *)*((void *)this + 257);
  if (v992 != (char *)this + 2072) {
    free(v992);
  }
  v993 = (llvm::Value *)*((void *)this + 254);
  *((void *)this + 254) = 0;
  if (v993)
  {
    llvm::Value::~Value(v993, v985);
    int v994 = *((_DWORD *)v993 + 5);
    if ((v994 & 0x40000000) != 0)
    {
      v1023 = (char *)*((void *)v993 - 1);
      v1022 = (char *)v993 - 8;
      v1021 = v1023;
      uint64_t v1024 = v994 & 0x7FFFFFF;
      if (v1024)
      {
        uint64_t v1025 = 32 * v1024;
        do
        {
          v1026 = &v1021[v1025];
          if (*(void *)&v1021[v1025 - 32])
          {
            **((void **)v1026 - 2) = *((void *)v1026 - 3);
            uint64_t v1027 = *((void *)v1026 - 3);
            if (v1027) {
              *(void *)(v1027 + 16) = *((void *)v1026 - 2);
            }
          }
          v1025 -= 32;
        }
        while (v1025);
      }
      operator delete(v1021);
      v996 = v1022;
    }
    else
    {
      uint64_t v995 = v994 & 0x7FFFFFF;
      v996 = (char *)v993 - 32 * v995;
      if (v995)
      {
        v997 = (void **)((char *)v993 - 16);
        uint64_t v998 = -32 * v995;
        do
        {
          if (*(v997 - 2))
          {
            void **v997 = *(v997 - 1);
            uint64_t v999 = (uint64_t)*(v997 - 1);
            if (v999) {
              *(void *)(v999 + 16) = *v997;
            }
          }
          v997 -= 4;
          v998 += 32;
        }
        while (v998);
      }
      if (v994 < 0) {
        v996 = &v996[-*((void *)v996 - 1) - 8];
      }
    }
    operator delete(v996);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 192), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 189), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 186), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 183), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 180), 8);
  if (*((_DWORD *)this + 355))
  {
    uint64_t v1052 = *((unsigned int *)this + 354);
    if (v1052)
    {
      uint64_t v1053 = 0;
      uint64_t v1054 = 8 * v1052;
      do
      {
        uint64_t v1055 = *(void *)(*((void *)this + 176) + v1053);
        if (v1055 != -8 && v1055 != 0) {
          sub_1CC5748CC(v1055);
        }
        v1053 += 8;
      }
      while (v1054 != v1053);
    }
  }
  free(*((void **)this + 176));
  sub_1CC5ED4CC((unsigned int *)this + 346, v1000);
  MEMORY[0x1D25D9CD0](*((void *)this + 173), 8);
  sub_1CC5ED4CC((unsigned int *)this + 340, v1001);
  MEMORY[0x1D25D9CD0](*((void *)this + 170), 8);
  sub_1CC5ED53C(v847, v1002);
  MEMORY[0x1D25D9CD0](*((void *)this + 167), 8);
  sub_1CC5ED4CC(v829, v1003);
  MEMORY[0x1D25D9CD0](*((void *)this + 164), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 161), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 158), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 155), 8);
  sub_1CC5ED4CC(v811, v1004);
  MEMORY[0x1D25D9CD0](*((void *)this + 152), 8);
  v1005 = (void *)*((void *)this + 149);
  if (v1005)
  {
    *((void *)this + 150) = v1005;
    operator delete(v1005);
  }
  if (*((unsigned char *)this + 1184))
  {
    MEMORY[0x1D25D9CD0](*((void *)this + 145), 8);
    *((unsigned char *)this + 1184) = 0;
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 142), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 139), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 136), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 133), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 130), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 127), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 124), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 121), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 118), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 115), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 112), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 109), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 106), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 103), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 100), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 97), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 94), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 91), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 88), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 85), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 82), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 79), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 76), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 73), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 70), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 67), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 64), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 61), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 58), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 55), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 52), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 49), 8);
  free(*((void **)this + 34));
  uint64_t v1006 = *((unsigned int *)this + 80);
  if (v1006)
  {
    v1007 = (uint64_t *)*((void *)this + 39);
    uint64_t v1008 = 8 * v1006;
    do
    {
      uint64_t v1009 = *v1007++;
      MEMORY[0x1D25D9CD0](v1009, 8);
      v1008 -= 8;
    }
    while (v1008);
  }
  v1010 = (uint64_t *)*((void *)this + 45);
  uint64_t v1011 = *((unsigned int *)this + 92);
  if (v1011)
  {
    uint64_t v1032 = 16 * v1011;
    do
    {
      uint64_t v1033 = *v1010;
      v1010 += 2;
      MEMORY[0x1D25D9CD0](v1033, 8);
      v1032 -= 16;
    }
    while (v1032);
    v1010 = (uint64_t *)*((void *)this + 45);
  }
  if (v1010 != (uint64_t *)((char *)this + 376)) {
    free(v1010);
  }
  v1012 = (char *)*((void *)this + 39);
  if (v1012 != (char *)this + 328) {
    free(v1012);
  }
  free(*((void **)this + 32));
  free(*((void **)this + 30));
  free(*((void **)this + 28));
  sub_1CC5ED00C(v1057);
  MEMORY[0x1D25D9CD0](*((void *)this + 25), 8);
  sub_1CC5ECE64((uint64_t)v886);
  MEMORY[0x1D25D9CD0](*((void *)this + 22), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 19), 8);
  uint64_t v1013 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v1013) {
    MEMORY[0x1D25D9CE0](v1013, 0x20C4093837F09);
  }
  uint64_t v1014 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v1014) {
    (*(void (**)(uint64_t))(*(void *)v1014 + 8))(v1014);
  }
  v1015 = (void **)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v1015)
  {
    v1017 = sub_1CD5CC020(v1015);
    MEMORY[0x1D25D9CE0](v1017, 0x1032C409CCD290BLL);
  }
  v1016 = (void *)*((void *)this + 1);
  if (v1016 != *(void **)this) {
    free(v1016);
  }
}

unint64_t llvm::MDNodeOpsKey::calculateHash(llvm::MDNodeOpsKey *this, llvm::MDNode *a2)
{
  return sub_1CC5ED5A4((uint64_t)this + 8 * a2 + -8 * *((unsigned int *)this + 2), (uint64_t)this);
}

unint64_t llvm::MDNodeOpsKey::calculateHash(void *a1, uint64_t a2)
{
  return sub_1CC571B50(a1, (uint64_t)&a1[a2]);
}

void *llvm::LLVMContextImpl::getOrInsertBundleTag(_DWORD *a1, unsigned __int8 *a2, size_t a3)
{
  int v5 = a1[647];
  unsigned int v6 = a1[646];
  if (!v6)
  {
    *(void *)(a1 + 647) = 0;
    uint64_t v21 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v21) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v21[16] = 2;
    *((void *)a1 + 322) = v21;
    unsigned int v6 = 16;
    a1[646] = 16;
  }
  int v27 = v5;
  int v7 = 0;
  if (a3)
  {
    size_t v8 = a3;
    uint64_t v9 = a2;
    do
    {
      int v10 = *v9++;
      int v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *((void *)a1 + 322);
  unsigned int v12 = v6 - 1;
  uint64_t v13 = v11 + 8 * v6 + 8;
  int v14 = -1;
  int v15 = 1;
  int v16 = v7;
  while (1)
  {
    uint64_t v17 = v16 & v12;
    uint64_t v18 = *(void **)(v11 + 8 * v17);
    if (!v18) {
      break;
    }
    if (v18 == (void *)-8)
    {
      if (v14 == -1) {
        int v14 = v16 & v12;
      }
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v7 {
           && a3 == *v18
    }
           && (!a3 || !memcmp(a2, (char *)v18 + a1[649], a3)))
    {
      goto LABEL_17;
    }
    int v16 = v15 + v17;
    ++v15;
  }
  uint64_t v19 = v14;
  if (v14 == -1)
  {
    uint64_t v19 = v17;
    uint64_t v17 = v17;
  }
  else
  {
    uint64_t v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v7;
  uint64_t v18 = *(void **)(v11 + 8 * v17);
LABEL_17:
  if (v18)
  {
    if (v18 != (void *)-8) {
      return v18;
    }
    --a1[648];
  }
  uint64_t v22 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  int64_t v23 = v22;
  uint64_t v24 = v22 + 16;
  if (a3) {
    memcpy(v22 + 16, a2, a3);
  }
  v24[a3] = 0;
  *(void *)int64_t v23 = a3;
  *((_DWORD *)v23 + 2) = v27;
  *(void *)(v11 + 8 * v17) = v23;
  ++a1[647];
  for (uint64_t i = (void **)(*((void *)a1 + 322)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 644), v17)); ; ++i)
  {
    uint64_t v18 = *i;
    if (*i && v18 + 1 != 0) {
      break;
    }
  }
  return v18;
}

void llvm::LLVMContextImpl::getOperandBundleTags(uint64_t a1, void *a2)
{
  sub_1CC5E6800((uint64_t)a2, *(unsigned int *)(a1 + 2588));
  uint64_t v4 = *(unsigned int *)(a1 + 2584);
  if (v4)
  {
    for (uint64_t i = *(uint64_t ***)(a1 + 2576); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    uint64_t i = *(uint64_t ***)(a1 + 2576);
  }
  uint64_t v7 = *(void *)(a1 + 2576) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    size_t v8 = *i;
    do
    {
      uint64_t v9 = v8 + 2;
      int v10 = (uint64_t *)*v8;
      uint64_t v11 = (uint64_t **)(*a2 + 16 * *((unsigned int *)v8 + 2));
      *uint64_t v11 = v9;
      v11[1] = v10;
      do
      {
        unsigned int v12 = i[1];
        ++i;
        size_t v8 = v12;
        if (v12) {
          BOOL v13 = v8 + 1 == 0;
        }
        else {
          BOOL v13 = 1;
        }
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

uint64_t llvm::LLVMContextImpl::getOrInsertSyncScopeID(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  v4[0] = *(_DWORD *)(a1 + 2620);
  return *(unsigned __int8 *)(*sub_1CC5ED9A0((llvm::StringMapImpl *)(a1 + 2608), a2, a3, v4) + 8);
}

void llvm::LLVMContextImpl::getSyncScopeNames(uint64_t a1, void *a2)
{
  sub_1CC5E6800((uint64_t)a2, *(unsigned int *)(a1 + 2620));
  uint64_t v4 = *(unsigned int *)(a1 + 2616);
  if (v4)
  {
    for (uint64_t i = *(uint64_t ***)(a1 + 2608); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    uint64_t i = *(uint64_t ***)(a1 + 2608);
  }
  uint64_t v7 = *(void *)(a1 + 2608) + 8 * v4;
  if (i != (uint64_t **)v7)
  {
    size_t v8 = *i;
    do
    {
      uint64_t v9 = v8 + 2;
      int v10 = (uint64_t *)*v8;
      uint64_t v11 = (uint64_t **)(*a2 + 16 * *((unsigned __int8 *)v8 + 8));
      *uint64_t v11 = v9;
      v11[1] = v10;
      do
      {
        unsigned int v12 = i[1];
        ++i;
        size_t v8 = v12;
        if (v12) {
          BOOL v13 = v8 + 1 == 0;
        }
        else {
          BOOL v13 = 1;
        }
      }
      while (v13);
    }
    while (i != (uint64_t **)v7);
  }
}

uint64_t llvm::LLVMContextImpl::getOptPassGate(llvm::LLVMContextImpl *this)
{
  uint64_t v1 = *((void *)this + 334);
  if (!v1)
  {
    if (!atomic_load_explicit(&llvm::OptBisector, memory_order_acquire))
    {
      int v3 = this;
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1CD5CC960, (void (*)(void *))sub_1CD5CC9B4);
      this = v3;
    }
    uint64_t v1 = llvm::OptBisector;
    *((void *)this + 334) = llvm::OptBisector;
  }
  return v1;
}

uint64_t llvm::LLVMContextImpl::setOptPassGate(uint64_t result, uint64_t a2)
{
  *(void *)(result + 2672) = a2;
  return result;
}

BOOL llvm::LLVMContextImpl::getOpaquePointers(llvm::LLVMContextImpl *this)
{
  if (*((unsigned char *)this + 2681))
  {
    int v2 = *((unsigned __int8 *)this + 2680);
  }
  else if (getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT"))
  {
    *((_WORD *)this + 1340) = 257;
    int v2 = 1;
  }
  else
  {
    int v2 = byte_1EBD06638;
    *((unsigned char *)this + 2680) = byte_1EBD06638;
    *((unsigned char *)this + 2681) = 1;
  }
  return v2 != 0;
}

uint64_t *sub_1CC5ECC54(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if ((*(unsigned char *)(v3 + 16) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v3 + 24), 8);
      }
      MEMORY[0x1D25D9CE0](v3, 0x1020C408B843D01);
    }
  }
  return a1;
}

uint64_t *sub_1CC5ECCB4(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = (uint64_t)v2;
    operator delete(v2);
  }
  sub_1CC5ECC54(a1 + 2);
  return a1;
}

uint64_t sub_1CC5ECCF0(uint64_t a1)
{
  llvm::DIArgList::untrack(a1);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40)) {
    free(v2);
  }
  sub_1CC5ECC54((uint64_t *)(a1 + 16));
  return a1;
}

uint64_t sub_1CC5ECD34(uint64_t result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *(_DWORD *)(result + 16) = v4;
    *(void *)uint64_t result = operator new(24 * v4, (std::align_val_t)8uLL);
    return sub_1CC5705D0(v2);
  }
  else
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  return result;
}

uint64_t *sub_1CC5ECDCC(uint64_t *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    *uint64_t result = (uint64_t)operator new(40 * v4, (std::align_val_t)8uLL);
    return sub_1CC5710E0(v2);
  }
  else
  {
    *uint64_t result = 0;
    result[1] = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void sub_1CC5ECE64(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (!v1) {
    return;
  }
  unsigned int v21 = 0;
  uint64_t v20 = 0;
  unsigned int v19 = 0;
  uint64_t v18 = 1;
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = 24 * v1;
  do
  {
    unsigned int v4 = *((_DWORD *)v2 + 2);
    if (v4 == v21)
    {
      if (v4 > 0x40)
      {
        int v16 = v2;
        int v5 = (const void **)v2;
        uint64_t v6 = v3;
        unsigned int v12 = v4;
        BOOL v7 = llvm::APInt::equalSlowCase(v5, &v20);
        unsigned int v4 = v12;
        uint64_t v3 = v6;
        uint64_t v2 = v16;
        if (v7) {
          goto LABEL_11;
        }
      }
      else if ((const void *)*v2 == v20)
      {
        goto LABEL_6;
      }
    }
    uint64_t v15 = v3;
    if (v4 == v19)
    {
      unsigned int v13 = v4;
      if (v4 > 0x40)
      {
        BOOL v8 = llvm::APInt::equalSlowCase((const void **)v2, (const void **)&v18);
        uint64_t v3 = v15;
        unsigned int v4 = v13;
        if (v8) {
          goto LABEL_11;
        }
      }
      else if (*v2 == v18)
      {
        goto LABEL_6;
      }
    }
    uint64_t v17 = v2;
    uint64_t v11 = v2[2];
    int v10 = v2 + 2;
    uint64_t v9 = v11;
    void *v10 = 0;
    if (v11)
    {
      sub_1CC57080C((uint64_t)v10, v9);
      unsigned int v4 = *((_DWORD *)v17 + 2);
    }
    uint64_t v3 = v15;
    uint64_t v2 = v17;
    if (v4 >= 0x41)
    {
LABEL_11:
      if (*v2)
      {
        uint64_t v14 = v3;
        MEMORY[0x1D25D9CB0](*v2, 0x1000C8000313F17);
        uint64_t v3 = v14;
      }
    }
LABEL_6:
    v2 += 3;
    v3 -= 24;
  }
  while (v3);
  if (v19 >= 0x41 && v18) {
    MEMORY[0x1D25D9CB0](v18, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    if (v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
  }
}

void sub_1CC5ED00C(uint64_t *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a1 + 4))
  {
    unsigned __int8 v33 = 2;
    int v32 = -1;
    v30 = &unk_1CFB2E394;
    uint64_t v31 = 1;
    llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v30, 1, 0);
    unsigned __int8 v28 = v28 & 0xF0 | 2;
    int v27 = -1;
    int v25 = &unk_1CFB2E394;
    uint64_t v26 = 2;
    llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v25, 1, 0);
    uint64_t v2 = *((unsigned int *)a1 + 4);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = *a1;
      uint64_t v5 = 40 * v2;
      do
      {
        uint64_t v6 = (char *)(v4 + v3);
        uint64_t v8 = v4 + v3 + 8;
        uint64_t v7 = *(void *)v8;
        if (*(_DWORD **)v8 == v30)
        {
          if ((_UNKNOWN *)v7 == &unk_1CFB2E344)
          {
            if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(v4 + v3 + 8), (const llvm::detail::DoubleAPFloat *)&v30))goto LABEL_38; {
            uint64_t v7 = *(void *)v8;
            }
          }
          else
          {
            if (v6 == &v29) {
              goto LABEL_38;
            }
            int v9 = *(unsigned __int8 *)(v4 + v3 + 28);
            int v10 = v9 & 7;
            if (v10 == (v33 & 7) && ((v33 ^ v9) & 8) == 0)
            {
              if (v10 == 3 || v10 == 0) {
                goto LABEL_38;
              }
              if ((v9 & 6) == 0 || v10 == 3 || *(_DWORD *)(v4 + v3 + 24) == v32)
              {
                int v12 = *(_DWORD *)(v7 + 8);
                unsigned int v13 = v12 - 64;
                uint64_t v14 = (void *)(v4 + v3 + 16);
                if ((v12 - 64) <= 0xFFFFFF7F) {
                  uint64_t v14 = (void *)*v14;
                }
                unsigned int v15 = v12 + 64;
                int v16 = v13 >= 0xFFFFFF80 ? &v31 : (uint64_t *)v31;
                if (!memcmp(v14, v16, (v15 >> 3) & 0x1FFFFFF8)) {
                  goto LABEL_38;
                }
              }
            }
          }
        }
        if ((_DWORD *)v7 == v25)
        {
          if ((_UNKNOWN *)v7 == &unk_1CFB2E344)
          {
            if (llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(v4 + v3 + 8), (const llvm::detail::DoubleAPFloat *)&v25))goto LABEL_38; {
          }
            }
          else
          {
            if (v6 == &v24) {
              goto LABEL_38;
            }
            int v17 = *(unsigned __int8 *)(v4 + v3 + 28);
            if ((v17 & 7) == (v28 & 7) && ((v28 ^ v17) & 8) == 0)
            {
              if ((v17 & 7) == 3 || (v17 & 7) == 0) {
                goto LABEL_38;
              }
              if ((v17 & 6) == 0 || *(_DWORD *)(v4 + v3 + 24) == v27)
              {
                int v18 = *(_DWORD *)(v7 + 8);
                unsigned int v19 = v18 - 64;
                uint64_t v20 = (void *)(v4 + v3 + 16);
                if ((v18 - 64) <= 0xFFFFFF7F) {
                  uint64_t v20 = (void *)*v20;
                }
                unsigned int v21 = v18 + 64;
                uint64_t v22 = v19 >= 0xFFFFFF80 ? &v26 : (uint64_t *)v26;
                if (!memcmp(v20, v22, (v21 >> 3) & 0x1FFFFFF8)) {
                  goto LABEL_38;
                }
              }
            }
          }
        }
        sub_1CC567FD8((uint64_t *)(v4 + v3 + 32), 0);
LABEL_38:
        if (*(_UNKNOWN **)v8 == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)(v4 + v3 + 16));
        }
        else if ((*(_DWORD *)(*(void *)v8 + 8) - 64) <= 0xFFFFFF7F)
        {
          uint64_t v23 = *(void *)(v4 + v3 + 16);
          if (v23) {
            MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
          }
        }
        v3 += 40;
      }
      while (v5 != v3);
    }
    if (v25 == (_DWORD *)&unk_1CFB2E344)
    {
      sub_1CB845718(&v26);
    }
    else if ((v25[2] - 64) <= 0xFFFFFF7F && v26)
    {
      MEMORY[0x1D25D9CB0](v26, 0x1000C8000313F17);
    }
    if (v30 == (_DWORD *)&unk_1CFB2E344)
    {
      sub_1CB845718(&v31);
    }
    else if ((v30[2] - 64) <= 0xFFFFFF7F)
    {
      if (v31) {
        MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
      }
    }
  }
}

uint64_t sub_1CC5ED3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != *(void *)(a2 + 8)) {
    return 0;
  }
  if ((_UNKNOWN *)v2 != &unk_1CFB2E344)
  {
    if (a1 == a2) {
      return 1;
    }
    int v3 = *(unsigned __int8 *)(a1 + 28);
    int v4 = *(unsigned __int8 *)(a2 + 28);
    if ((v3 & 7) == (v4 & 7) && ((v4 ^ v3) & 8) == 0)
    {
      uint64_t v5 = 1;
      if ((v3 & 7) == 3 || (v3 & 7) == 0) {
        return v5;
      }
      if ((v3 & 6) == 0 || *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24))
      {
        int v6 = *(_DWORD *)(v2 + 8);
        unsigned int v7 = v6 - 64;
        uint64_t v8 = (void *)(a1 + 16);
        if ((v6 - 64) <= 0xFFFFFF7F) {
          uint64_t v8 = (void *)*v8;
        }
        unsigned int v9 = v6 + 64;
        int v12 = *(const void **)(a2 + 16);
        int v10 = (const void *)(a2 + 16);
        uint64_t v11 = v12;
        if (v7 < 0xFFFFFF80) {
          int v10 = v11;
        }
        return memcmp(v8, v10, (v9 >> 3) & 0x1FFFFFF8) == 0;
      }
    }
    return 0;
  }
  uint64_t v14 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  unsigned int v15 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);

  return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v14, v15);
}

void sub_1CC5ED4CC(unsigned int *a1, llvm::Value *a2)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = 16 * v2;
    int v4 = (llvm::Value **)(*(void *)a1 + 8);
    do
    {
      uint64_t v5 = (uint64_t)*(v4 - 1);
      if (v5 != -4096 && v5 != -8192)
      {
        int v6 = *v4;
        *int v4 = 0;
        if (v6)
        {
          uint64_t v8 = v4;
          uint64_t v9 = v3;
          llvm::Value::~Value(v6, a2);
          llvm::User::operator delete(v7);
          int v4 = v8;
          uint64_t v3 = v9;
        }
      }
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
}

void sub_1CC5ED53C(unsigned int *a1, llvm::Value *a2)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = 16 * v2;
    int v4 = (llvm::Value **)(*(void *)a1 + 8);
    do
    {
      if (((unint64_t)*(v4 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v5 = *v4;
        *int v4 = 0;
        if (v5)
        {
          llvm::Value::~Value(v5, a2);
          llvm::User::operator delete(v6);
        }
      }
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
}

unint64_t sub_1CC5ED5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v41 = a1;
    int v42 = __cxa_guard_acquire(&qword_1EBCBE588);
    a1 = v41;
    if (v42)
    {
      unint64_t v43 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v43 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v43;
      __cxa_guard_release(&qword_1EBCBE588);
      a1 = v41;
    }
  }
  unint64_t v3 = qword_1EBCBE580;
  if (a1 == a2)
  {
    unint64_t v5 = 0;
    return sub_1CBAE06B8(&v46, v5, v3);
  }
  else
  {
    for (unint64_t i = 0; i <= 0x38; i += 8)
    {
      unint64_t v5 = i + 8;
      *(uint64_t *)((char *)&v46 + i) = *(void *)(a1 + i);
      uint64_t v6 = a1 + i + 8;
      if (v6 == a2) {
        return sub_1CBAE06B8(&v46, v5, v3);
      }
    }
    unint64_t v8 = 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v3 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
    uint64_t v9 = __ROR8__(v3 ^ 0xB492B66FBE98F273, 49);
    unint64_t v10 = v3 ^ (v3 >> 47);
    unint64_t v11 = v3 ^ (((0x9DDFEA08EB382D69 * (v10 ^ (0xB492B66FBE98F273 * v3))) ^ v3) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                            * (v10 ^ (0xB492B66FBE98F273 * v3)));
    uint64_t v12 = v9 + v3;
    unint64_t v13 = v51 + v9 - 0x4B6D499041670D8DLL * __ROR8__(v52 + v3 - 0x4B6D499041670D8DLL * v3, 42);
    uint64_t v14 = v46 - 0x6D8ED9027DD26057 * v3;
    uint64_t v15 = v10 + v14;
    uint64_t v16 = v14 + v47 + v48;
    uint64_t v17 = __ROR8__(v16, 44) + v14;
    unint64_t v18 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v11) ^ ((0x9DDFEA08EB382D69 * v11) >> 47));
    unint64_t v19 = (0xB492B66FBE98F273 * __ROR8__(v12 + v47, 37)) ^ v18;
    uint64_t v20 = v17 + __ROR8__(v19 + v15 + v49, 21);
    uint64_t v21 = __ROR8__(v10 - 0x622015F714C7D297 * (v8 ^ (v8 >> 47)), 33);
    unint64_t v22 = 0xB492B66FBE98F273 * v21;
    uint64_t v23 = v18 + v50 - 0x4B6D499041670D8DLL * v21;
    uint64_t v24 = v16 + v49;
    uint64_t v25 = __ROR8__(v51 + v52 + v23, 44) + v23 + __ROR8__(v13 + v48 + v53 + v23, 21);
    uint64_t v26 = v51 + v52 + v23 + v53;
    uint64_t v27 = a1 + i;
    unint64_t v28 = 64;
    if (a1 + i != a2)
    {
      do
      {
        unint64_t v29 = 0;
        unint64_t v30 = v19;
        do
        {
          unint64_t v31 = v29 + 8;
          uint64_t v32 = v27 + v29 + 8;
          *(uint64_t *)((char *)&v46 + v29) = *(void *)(v27 + v29);
          if (v32 == a2) {
            break;
          }
          BOOL v33 = v29 >= 0x31;
          v29 += 8;
        }
        while (!v33);
        if ((v31 & 0x7FFFFFFFFFFFFFB8) != 0)
        {
          unint64_t v44 = v19;
          uint64_t v45 = v20;
          sub_1CBFFD29C(&v46, (unsigned char *)&v46 + v31, &v54);
          unint64_t v30 = v44;
          uint64_t v20 = v45;
        }
        uint64_t v34 = v13 + v22 + v24 + v47;
        unint64_t v13 = v51 + v24 - 0x4B6D499041670D8DLL * __ROR8__(v20 + v13 + v52, 42);
        uint64_t v35 = v46 - 0x4B6D499041670D8DLL * v20;
        unint64_t v19 = (0xB492B66FBE98F273 * __ROR8__(v34, 37)) ^ v25;
        uint64_t v20 = __ROR8__(v35 + v47 + v48, 44) + v35 + __ROR8__(v19 + v26 + v35 + v49, 21);
        v27 += v31;
        unint64_t v22 = 0xB492B66FBE98F273 * __ROR8__(v26 + v30, 33);
        unint64_t v36 = v22 + v25 + v50;
        uint64_t v24 = v35 + v47 + v48 + v49;
        uint64_t v25 = __ROR8__(v51 + v52 + v36, 44) + v36 + __ROR8__(v13 + v48 + v36 + v53, 21);
        uint64_t v26 = v51 + v52 + v36 + v53;
        v28 += v31;
      }
      while (v32 != a2);
    }
    unint64_t v37 = 0x9DDFEA08EB382D69
        * (v26 ^ ((0x9DDFEA08EB382D69 * (v24 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v24 ^ v26)));
    uint64_t v38 = v19 - 0x4B6D499041670D8DLL * (v13 ^ (v13 >> 47)) - 0x622015F714C7D297 * (v37 ^ (v37 >> 47));
    unint64_t v39 = 0x9DDFEA08EB382D69
        * (v25 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v25)));
    uint64_t v40 = v22 - 0x4B6D499041670D8DLL * (v28 ^ (v28 >> 47)) - 0x622015F714C7D297 * (v39 ^ (v39 >> 47));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v40 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v40)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v40)))) >> 47));
  }
}

void *sub_1CC5ED9A0(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, char *a4)
{
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v27 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v27) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v27[16] = 2;
    *(void *)a1 = v27;
    unsigned int v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  unint64_t v28 = a4;
  int v8 = 0;
  if (__n)
  {
    size_t v9 = __n;
    unint64_t v10 = a2;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *(void *)a1;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *(void *)a1 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    unint64_t v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 {
           && __n == *v19
    }
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  unint64_t v19 = *(void **)(v12 + 8 * v18);
LABEL_17:
  unint64_t i = (void *)(v12 + 8 * v18);
  if (v19)
  {
    if (v19 != (void *)-8) {
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  unint64_t v22 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  uint64_t v23 = v22;
  uint64_t v24 = v22 + 16;
  if (__n) {
    memcpy(v22 + 16, a2, __n);
  }
  v24[__n] = 0;
  *(void *)uint64_t v23 = __n;
  v23[8] = *v28;
  void *i = v23;
  ++*((_DWORD *)a1 + 3);
  for (unint64_t i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1CC5EDBB4()
{
  *(void *)&long long v3 = "Use opaque pointers";
  *((void *)&v3 + 1) = 19;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBD065B8, "opaque-pointers", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD065B8, &dword_1CB82C000);
}

void sub_1CC5EDC34()
{
}

void llvm::setupLLVMOptimizationRemarks(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *a1;
  if (a7) {
    *(unsigned char *)(v10 + 81) = 1;
  }
  *(void *)(v10 + 88) = a9;
  *(void *)(v10 + 96) = a10;
  llvm::remarks::parseFormat(a5, a6, (uint64_t)&v13);
  if (v14)
  {
    uint64_t v12 = v13;
    uint64_t v13 = 0;
    if (v12) {
      operator new();
    }
    int v11 = 0;
  }
  else
  {
    int v11 = v13;
  }
  llvm::remarks::createRemarkSerializer(v11);
}

void sub_1CC5EE0B0()
{
}

char **sub_1CC5EE170(char **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *uint64_t result = 0;
  if (v2)
  {
    if ((*(unsigned int (**)(char *, void *))(*(void *)v2 + 48))(v2, &llvm::ErrorList::ID))
    {
      uint64_t v10 = 0;
      int v4 = (uint64_t *)*((void *)v2 + 1);
      unint64_t v5 = (uint64_t *)*((void *)v2 + 2);
      if (v4 != v5)
      {
        uint64_t v6 = 0;
        do
        {
          uint64_t v13 = v6;
          uint64_t v7 = *v4;
          *int v4 = 0;
          uint64_t v11 = v7;
          sub_1CC5EE364((uint64_t *)&v12, &v11, a2);
          sub_1CD451630(&v13, &v12, &v14);
          uint64_t v6 = v14;
          char v14 = 0;
          if (v12) {
            (*(void (**)(char *))(*(void *)v12 + 8))(v12);
          }
          uint64_t v8 = v11;
          uint64_t v11 = 0;
          if (v8) {
            (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
          }
          if (v13) {
            (*(void (**)(char *))(*(void *)v13 + 8))(v13);
          }
          ++v4;
        }
        while (v4 != v5);
        uint64_t v10 = v6;
      }
      return (char **)(*(uint64_t (**)(char *))(*(void *)v2 + 8))(v2);
    }
    else
    {
      char v14 = v2;
      sub_1CC5EE364((uint64_t *)&v10, (uint64_t *)&v14, a2);
      uint64_t result = (char **)v14;
      if (v14)
      {
        size_t v9 = *(uint64_t (**)(void))(*(void *)v14 + 8);
        return (char **)v9();
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  return result;
}

uint64_t sub_1CC5EE364(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t v7 = *a2;
  *a2 = 0;
  if (result)
  {
    sub_1CD5CD468(*a3, v7);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    uint64_t v7 = 0;
  }
  *a1 = v7;
  return result;
}

void sub_1CC5EE410()
{
}

void sub_1CC5EE4D0()
{
}

void *sub_1CC5EE590(void *a1)
{
  *a1 = &unk_1F2617868;
  uint64_t v2 = a1 + 71;
  long long v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F26178D0;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }

  return sub_1CB87DD48(a1);
}

BOOL llvm::PMDataManager::isPassDebuggingExecutionsOrMore(llvm::PMDataManager *this)
{
  return dword_1EBD066F8 > 2;
}

void llvm::PMDataManager::emitInstrCountChangedRemark(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5, uint64_t a6, uint64_t **a7)
{
  uint64_t v190 = *MEMORY[0x1E4F143B8];
  v173 = a7;
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2)) {
    return;
  }
  uint64_t v150 = a6;
  if (a7)
  {
    int InstructionCount = llvm::Function::getInstructionCount((llvm::Function *)a7);
    int v147 = *((_DWORD *)a7 + 5);
    int v149 = InstructionCount;
    if ((v147 & 0x10000000) != 0)
    {
      uint64_t v54 = *(void *)**a7;
      uint64_t v55 = *(void *)(v54 + 152);
      uint64_t v56 = *(unsigned int *)(v54 + 168);
      if (v56)
      {
        LODWORD(v57) = (v56 - 1) & ((a7 >> 4) ^ (a7 >> 9));
        v58 = (uint64_t ***)(v55 + 16 * v57);
        uint64_t v59 = *v58;
        if (*v58 != a7)
        {
          int v60 = 1;
          do
          {
            if (v59 == (uint64_t **)-4096) {
              goto LABEL_66;
            }
            int v61 = v57 + v60++;
            uint64_t v57 = v61 & (v56 - 1);
            uint64_t v59 = *(uint64_t ***)(v55 + 16 * v57);
          }
          while (v59 != a7);
          v58 = (uint64_t ***)(v55 + 16 * v57);
        }
      }
      else
      {
LABEL_66:
        v58 = (uint64_t ***)(v55 + 16 * v56);
      }
      unsigned int v63 = *(_DWORD *)(a6 + 8);
      if (!v63)
      {
LABEL_85:
        if ((v147 & 0x10000000) != 0)
        {
          uint64_t v81 = *(void *)**a7;
          uint64_t v82 = *(void *)(v81 + 152);
          uint64_t v83 = *(unsigned int *)(v81 + 168);
          unsigned int v62 = a5;
          int v80 = v149;
          if (v83)
          {
            LODWORD(v84) = (v83 - 1) & ((a7 >> 4) ^ (a7 >> 9));
            uint64_t v85 = (uint64_t ***)(v82 + 16 * v84);
            v86 = *v85;
            if (*v85 != a7)
            {
              int v87 = 1;
              do
              {
                if (v86 == (uint64_t **)-4096) {
                  goto LABEL_92;
                }
                int v88 = v84 + v87++;
                uint64_t v84 = v88 & (v83 - 1);
                v86 = *(uint64_t ***)(v82 + 16 * v84);
              }
              while (v86 != a7);
              uint64_t v85 = (uint64_t ***)(v82 + 16 * v84);
            }
          }
          else
          {
LABEL_92:
            uint64_t v85 = (uint64_t ***)(v82 + 16 * v83);
          }
          v89 = v85[1];
          size_t v90 = (size_t)*v89;
          v65 = (unsigned __int8 *)(v89 + 2);
          size_t v66 = v90;
          goto LABEL_94;
        }
        size_t v66 = 0;
        v65 = (unsigned __int8 *)&byte_1CFBCE98E;
LABEL_182:
        unsigned int v62 = a5;
        int v80 = v149;
LABEL_94:
        uint64_t v91 = sub_1CD5CF708(v150, v65, v66);
        v79 = *v91;
        *((_DWORD *)*v91 + 2) = 0;
        goto LABEL_95;
      }
      uint64_t v64 = v58[1];
      size_t v67 = (size_t)*v64;
      v65 = (unsigned __int8 *)(v64 + 2);
      size_t v66 = v67;
      if (v67)
      {
        uint64_t v68 = 0;
        int v69 = 0;
        do
          int v69 = 33 * v69 + v65[v68++];
        while (v66 != v68);
        char v70 = 0;
        goto LABEL_72;
      }
    }
    else
    {
      size_t v66 = 0;
      unsigned int v63 = *(_DWORD *)(a6 + 8);
      v65 = (unsigned __int8 *)&byte_1CFBCE98E;
      if (!v63) {
        goto LABEL_182;
      }
    }
    int v69 = 0;
    char v70 = 1;
LABEL_72:
    unsigned int v71 = v63 - 1;
    uint64_t v72 = *(void *)a6;
    uint64_t v144 = v63;
    uint64_t v73 = *(void *)v150 + 8 * v63 + 8;
    uint64_t v74 = *(unsigned int *)(v150 + 20);
    int v75 = 1;
    int v76 = v69;
    while (1)
    {
      uint64_t v77 = v76 & v71;
      uint64_t v78 = *(void **)(v72 + 8 * v77);
      if (v78 != (void *)-8)
      {
        if (!v78) {
          goto LABEL_85;
        }
        if (*(_DWORD *)(v73 + 4 * v77) == v69
          && v66 == *v78
          && ((v70 & 1) != 0 || !memcmp(v65, (char *)v78 + v74, v66)))
        {
          break;
        }
      }
      int v76 = v75 + v77;
      ++v75;
    }
    if (v77 != -1 && (int)v77 != v144)
    {
      v79 = *(size_t **)(v72 + 8 * (int)v77);
      unsigned int v62 = a5;
      int v80 = v149;
LABEL_95:
      *((_DWORD *)v79 + 3) = v80;
      uint64_t v51 = a7;
      goto LABEL_96;
    }
    goto LABEL_85;
  }
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v141 = a3 + 24;
  if (v9 == a3 + 24) {
    return;
  }
  uint64_t v139 = a3;
  do
  {
    if (v9) {
      uint64_t v10 = (llvm::Function *)(v9 - 56);
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v148 = v9;
    int v146 = llvm::Function::getInstructionCount(v10);
    unsigned int v142 = v10 >> 4;
    uint64_t v143 = v10;
    int v145 = *((_DWORD *)v10 + 5);
    if ((v145 & 0x10000000) == 0)
    {
      size_t v21 = 0;
      unsigned int v19 = *(_DWORD *)(a6 + 8);
      if (!v19)
      {
        uint64_t v47 = (unsigned __int8 *)&byte_1CFBCE98E;
        goto LABEL_49;
      }
      int v25 = 0;
      char v26 = 1;
      unint64_t v22 = &byte_1CFBCE98E;
      goto LABEL_23;
    }
    uint64_t v11 = ***(void ***)v10;
    uint64_t v12 = *(void *)(v11 + 152);
    uint64_t v13 = *(unsigned int *)(v11 + 168);
    if (!v13) {
      goto LABEL_16;
    }
    LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v15 = (llvm::Function **)(v12 + 16 * v14);
    int v16 = *v15;
    if (*v15 != v10)
    {
      int v17 = 1;
      while (v16 != (llvm::Function *)-4096)
      {
        int v18 = v14 + v17++;
        uint64_t v14 = v18 & (v13 - 1);
        int v16 = *(llvm::Function **)(v12 + 16 * v14);
        if (v16 == v10)
        {
          uint64_t v15 = (llvm::Function **)(v12 + 16 * v14);
          goto LABEL_17;
        }
      }
LABEL_16:
      uint64_t v15 = (llvm::Function **)(v12 + 16 * v13);
    }
LABEL_17:
    unsigned int v19 = *(_DWORD *)(a6 + 8);
    if (!v19) {
      goto LABEL_34;
    }
    uint64_t v20 = v15[1];
    size_t v23 = *(void *)v20;
    unint64_t v22 = (char *)v20 + 16;
    size_t v21 = v23;
    if (v23)
    {
      uint64_t v24 = 0;
      int v25 = 0;
      do
        int v25 = 33 * v25 + v22[v24++];
      while (v21 != v24);
      char v26 = 0;
    }
    else
    {
      int v25 = 0;
      char v26 = 1;
    }
    a6 = v150;
LABEL_23:
    unsigned int v27 = v19 - 1;
    uint64_t v28 = *(void *)a6;
    uint64_t v140 = v19;
    uint64_t v29 = *(void *)a6 + 8 * v19 + 8;
    uint64_t v30 = *(unsigned int *)(a6 + 20);
    int v31 = 1;
    int v32 = v25;
    while (1)
    {
      uint64_t v33 = v32 & v27;
      uint64_t v34 = *(void **)(v28 + 8 * v33);
      if (v34 != (void *)-8)
      {
        if (!v34) {
          goto LABEL_34;
        }
        if (*(_DWORD *)(v29 + 4 * v33) == v25
          && v21 == *v34
          && ((v26 & 1) != 0 || !memcmp(v22, (char *)v34 + v30, v21)))
        {
          break;
        }
      }
      int v32 = v31 + v33;
      ++v31;
    }
    if (v33 != -1 && (int)v33 != v140)
    {
      uint64_t v35 = *(size_t **)(v28 + 8 * (int)v33);
      uint64_t v36 = v148;
      a6 = v150;
      a3 = v139;
      int v37 = v146;
      goto LABEL_44;
    }
LABEL_34:
    if ((v145 & 0x10000000) == 0)
    {
      size_t v21 = 0;
      uint64_t v47 = (unsigned __int8 *)&byte_1CFBCE98E;
      a6 = v150;
      a3 = v139;
LABEL_49:
      uint64_t v36 = v148;
      int v37 = v146;
      goto LABEL_43;
    }
    uint64_t v38 = ***(void ***)v143;
    uint64_t v39 = *(void *)(v38 + 152);
    uint64_t v40 = *(unsigned int *)(v38 + 168);
    uint64_t v36 = v148;
    a6 = v150;
    a3 = v139;
    int v37 = v146;
    if (!v40) {
      goto LABEL_41;
    }
    LODWORD(v41) = (v40 - 1) & (v142 ^ (v143 >> 9));
    int v42 = (llvm::Function **)(v39 + 16 * v41);
    unint64_t v43 = *v42;
    if (*v42 != v143)
    {
      int v44 = 1;
      while (v43 != (llvm::Function *)-4096)
      {
        int v45 = v41 + v44++;
        uint64_t v41 = v45 & (v40 - 1);
        unint64_t v43 = *(llvm::Function **)(v39 + 16 * v41);
        if (v43 == v143)
        {
          int v42 = (llvm::Function **)(v39 + 16 * v41);
          goto LABEL_42;
        }
      }
LABEL_41:
      int v42 = (llvm::Function **)(v39 + 16 * v40);
    }
LABEL_42:
    uint64_t v46 = v42[1];
    size_t v48 = *(void *)v46;
    uint64_t v47 = (unsigned __int8 *)v46 + 16;
    size_t v21 = v48;
LABEL_43:
    uint64_t v49 = sub_1CD5CF708(a6, v47, v21);
    uint64_t v35 = *v49;
    *((_DWORD *)*v49 + 2) = 0;
LABEL_44:
    *((_DWORD *)v35 + 3) = v37;
    uint64_t v9 = *(void *)(v36 + 8);
  }
  while (v9 != v141);
  for (uint64_t i = *(void *)(a3 + 32); ; uint64_t i = *(void *)(i + 8))
  {
    if (i == v141) {
      return;
    }
    uint64_t v51 = (uint64_t **)(i - 56);
    uint64_t v52 = i ? i - 56 : 0;
    if (*(void *)(v52 + 72) != v52 + 72) {
      break;
    }
  }
  v173 = (uint64_t **)v52;
  unsigned int v62 = a5;
LABEL_96:
  uint64_t v92 = v51[10];
  if (v92) {
    v93 = v92 - 3;
  }
  else {
    v93 = 0;
  }
  uint64_t v94 = (void *)v93[7];
  int v175 = 11;
  char v176 = 2;
  v177 = v94;
  uint64_t v178 = 0;
  uint64_t v179 = 0;
  v180 = "size-info";
  v181 = "IRSizeChange";
  uint64_t v182 = 12;
  char v183 = 0;
  char v184 = 0;
  uint64_t v185 = v187;
  uint64_t v186 = 0x400000000;
  v187[256] = 0;
  int v188 = -1;
  uint64_t v189 = v93;
  v174 = &unk_1F26165E0;
  v95 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v169, "Pass", 4uLL, v95, v96);
  uint64_t v97 = sub_1CD3D6290((uint64_t)&v174, (long long *)v169);
  *(void *)&long long v155 = ": IR instruction count changed from ";
  *((void *)&v155 + 1) = 36;
  sub_1CC59ADEC((uint64_t *)(v97 + 80), (uint64_t)&v155);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v166, "IRInstrsBefore", 0xEuLL, v62);
  uint64_t v98 = sub_1CD3D6290(v97, (long long *)&v166);
  *(void *)&long long v155 = " to ";
  *((void *)&v155 + 1) = 4;
  sub_1CC59ADEC((uint64_t *)(v98 + 80), (uint64_t)&v155);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v163, "IRInstrsAfter", 0xDuLL, a4 + v62);
  uint64_t v99 = sub_1CD3D6290(v98, (long long *)&v163);
  *(void *)&long long v155 = "; Delta: ";
  *((void *)&v155 + 1) = 9;
  sub_1CC59ADEC((uint64_t *)(v99 + 80), (uint64_t)&v155);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v160, "DeltaInstrCount", 0xFuLL, a4);
  sub_1CD3D6290(v99, (long long *)&v160);
  if (v162 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v160.__r_.__value_.__l.__data_);
  }
  if (v165 < 0) {
    operator delete(v164);
  }
  if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v163.__r_.__value_.__l.__data_);
  }
  if (v168 < 0) {
    operator delete(v167);
  }
  if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v166.__r_.__value_.__l.__data_);
  }
  if (v172 < 0) {
    operator delete(v171);
  }
  if (v170 < 0) {
    operator delete(v169[0]);
  }
  llvm::LLVMContext::diagnose(**v173, (const llvm::DiagnosticInfo *)&v174);
  uint64_t v100 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  if (!v100)
  {
    __dst = 0;
    size_t v158 = 0;
    unint64_t v159 = 0;
    uint64_t v105 = a7;
    goto LABEL_126;
  }
  size_t v102 = v101;
  if (v101 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_184;
  }
  v103 = (const void *)v100;
  if (v101 >= 0x17)
  {
    uint64_t v106 = (v101 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v101 | 7) != 0x17) {
      uint64_t v106 = v101 | 7;
    }
    uint64_t v107 = v106 + 1;
    p_dst = (void **)operator new(v106 + 1);
    size_t v158 = v102;
    unint64_t v159 = v107 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_124;
  }
  HIBYTE(v159) = v101;
  p_dst = (void **)&__dst;
  if (v101) {
LABEL_124:
  }
    memmove(p_dst, v103, v102);
  uint64_t v105 = a7;
  *((unsigned char *)p_dst + v102) = 0;
LABEL_126:
  *(void *)&long long v155 = v150;
  *((void *)&v155 + 1) = &v173;
  *(void *)&long long v156 = v93;
  *((void *)&v156 + 1) = &__dst;
  if (!v105)
  {
    uint64_t v116 = *(unsigned int *)(v150 + 8);
    if (v116)
    {
      for (uint64_t j = *(uint64_t **)v150; !*j || *j == -8; ++j)
        ;
    }
    else
    {
      uint64_t j = *(uint64_t **)v150;
    }
    uint64_t v119 = *(void *)v150 + 8 * v116;
    v154[0] = v155;
    v154[1] = v156;
    if (j != (uint64_t *)v119)
    {
      uint64_t v120 = *j;
      do
      {
        sub_1CC5EF1B0((uint64_t)v154, (unsigned __int8 *)(v120 + 16), *(void *)v120);
        do
        {
          uint64_t v121 = j[1];
          ++j;
          uint64_t v120 = v121;
          if (v121) {
            BOOL v122 = v120 == -8;
          }
          else {
            BOOL v122 = 1;
          }
        }
        while (v122);
      }
      while (j != (uint64_t *)v119);
    }
    goto LABEL_169;
  }
  if ((*((unsigned char *)v173 + 23) & 0x10) == 0)
  {
    size_t v124 = 0;
    HIBYTE(v153) = 0;
    uint64_t v127 = &v151;
    goto LABEL_161;
  }
  uint64_t v108 = *(void *)**v173;
  uint64_t v109 = *(void *)(v108 + 152);
  uint64_t v110 = *(unsigned int *)(v108 + 168);
  if (!v110) {
    goto LABEL_152;
  }
  LODWORD(v111) = (v110 - 1) & ((v173 >> 4) ^ (v173 >> 9));
  uint64_t v112 = (uint64_t ***)(v109 + 16 * v111);
  uint64_t v113 = *v112;
  if (*v112 != v173)
  {
    int v114 = 1;
    while (v113 != (uint64_t **)-4096)
    {
      int v115 = v111 + v114++;
      uint64_t v111 = v115 & (v110 - 1);
      uint64_t v113 = *(uint64_t ***)(v109 + 16 * v111);
      if (v113 == v173)
      {
        uint64_t v112 = (uint64_t ***)(v109 + 16 * v111);
        goto LABEL_153;
      }
    }
LABEL_152:
    uint64_t v112 = (uint64_t ***)(v109 + 16 * v110);
  }
LABEL_153:
  v123 = (unint64_t *)v112[1];
  unint64_t v126 = *v123;
  v125 = v123 + 2;
  size_t v124 = v126;
  if (v126 > 0x7FFFFFFFFFFFFFF7) {
LABEL_184:
  }
    abort();
  if (v124 >= 0x17)
  {
    uint64_t v128 = (v124 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v124 | 7) != 0x17) {
      uint64_t v128 = v124 | 7;
    }
    uint64_t v129 = v128 + 1;
    uint64_t v127 = operator new(v128 + 1);
    size_t v152 = v124;
    int64_t v153 = v129 | 0x8000000000000000;
    v151 = v127;
  }
  else
  {
    HIBYTE(v153) = v124;
    uint64_t v127 = &v151;
    if (!v124) {
      goto LABEL_161;
    }
  }
  memmove(v127, v125, v124);
LABEL_161:
  *((unsigned char *)v127 + v124) = 0;
  if (v153 >= 0) {
    v130 = (unsigned __int8 *)&v151;
  }
  else {
    v130 = (unsigned __int8 *)v151;
  }
  if (v153 >= 0) {
    size_t v131 = HIBYTE(v153) & 0x7F;
  }
  else {
    size_t v131 = v152;
  }
  sub_1CC5EF1B0((uint64_t)&v155, v130, v131);
  if (SHIBYTE(v153) < 0) {
    operator delete(v151);
  }
LABEL_169:
  if (SHIBYTE(v159) < 0) {
    operator delete(__dst);
  }
  v174 = &unk_1F2616800;
  v132 = (char *)v185;
  if (v186)
  {
    unint64_t v133 = (unint64_t)v186 << 6;
    do
    {
      uint64_t v134 = (void **)&v132[v133];
      if (v132[v133 - 17] < 0) {
        operator delete(*(v134 - 5));
      }
      if (*((char *)v134 - 41) < 0) {
        operator delete(*(v134 - 8));
      }
      v133 -= 64;
    }
    while (v133);
    v132 = (char *)v185;
  }
  if (v132 != v187) {
    free(v132);
  }
}

void sub_1CC5EF1B0(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = sub_1CD5CF708(*(void *)a1, a2, a3);
  uint64_t v7 = *v6;
  uint64_t v9 = *((unsigned int *)*v6 + 2);
  uint64_t v8 = *((unsigned int *)*v6 + 3);
  if (v8 != v9)
  {
    unint64_t v10 = v8 - v9;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(v11 + 56);
    int v44 = 11;
    char v45 = 2;
    uint64_t v46 = v12;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = "size-info";
    uint64_t v50 = "FunctionIRSizeChange";
    uint64_t v51 = 20;
    char v52 = 0;
    char v53 = 0;
    uint64_t v54 = v56;
    uint64_t v55 = 0x400000000;
    v56[256] = 0;
    int v57 = -1;
    uint64_t v58 = v11;
    unint64_t v43 = &unk_1F26165E0;
    uint64_t v13 = *(void *)(a1 + 24);
    char v14 = *(unsigned char *)(v13 + 23);
    if (v14 >= 0) {
      uint64_t v15 = *(void **)(a1 + 24);
    }
    else {
      uint64_t v15 = *(void **)v13;
    }
    if (v14 >= 0) {
      size_t v16 = v14 & 0x7F;
    }
    else {
      size_t v16 = *(void *)(v13 + 8);
    }
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(__dst, "Pass", 4uLL, v15, v16);
    uint64_t v17 = sub_1CD3D6290((uint64_t)&v43, (long long *)__dst);
    uint64_t v41 = ": Function: ";
    uint64_t v42 = 12;
    sub_1CC59ADEC((uint64_t *)(v17 + 80), (uint64_t)&v41);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v33, "Function", 8uLL, a2, a3);
    uint64_t v18 = sub_1CD3D6290(v17, (long long *)v33);
    uint64_t v41 = ": IR instruction count changed from ";
    uint64_t v42 = 36;
    sub_1CC59ADEC((uint64_t *)(v18 + 80), (uint64_t)&v41);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v30, "IRInstrsBefore", 0xEuLL, v9);
    uint64_t v19 = sub_1CD3D6290(v18, (long long *)&v30);
    uint64_t v41 = " to ";
    uint64_t v42 = 4;
    sub_1CC59ADEC((uint64_t *)(v19 + 80), (uint64_t)&v41);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v27, "IRInstrsAfter", 0xDuLL, v8);
    uint64_t v20 = sub_1CD3D6290(v19, (long long *)&v27);
    uint64_t v41 = "; Delta: ";
    uint64_t v42 = 9;
    sub_1CC59ADEC((uint64_t *)(v20 + 80), (uint64_t)&v41);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v24, "DeltaInstrCount", 0xFuLL, v10);
    sub_1CD3D6290(v20, (long long *)&v24);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (v36 < 0) {
      operator delete(v35);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    if (v40 < 0) {
      operator delete(v39);
    }
    if (v38 < 0) {
      operator delete(__dst[0]);
    }
    llvm::LLVMContext::diagnose(****(void ****)(a1 + 8), (const llvm::DiagnosticInfo *)&v43);
    *((_DWORD *)v7 + 2) = v8;
    unint64_t v43 = &unk_1F2616800;
    size_t v21 = (char *)v54;
    if (v55)
    {
      unint64_t v22 = (unint64_t)v55 << 6;
      do
      {
        size_t v23 = (void **)&v21[v22];
        if (v21[v22 - 17] < 0) {
          operator delete(*(v23 - 5));
        }
        if (*((char *)v23 - 41) < 0) {
          operator delete(*(v23 - 8));
        }
        v22 -= 64;
      }
      while (v22);
      size_t v21 = (char *)v54;
    }
    if (v21 != v56) {
      free(v21);
    }
  }
}

BOOL llvm::legacy::debugPassSpecified(llvm::legacy *this)
{
  return dword_1EBD066F8 != 0;
}

uint64_t llvm::legacy::FunctionPassManagerImpl::doInitialization(llvm::legacy::FunctionPassManagerImpl *this, llvm::Module *a2)
{
  int v4 = (char *)this + 416;
  llvm::PMTopLevelManager::dumpArguments((llvm::legacy::FunctionPassManagerImpl *)((char *)this + 416));
  llvm::PMTopLevelManager::dumpPasses((uint64_t)v4);
  uint64_t v5 = *((unsigned int *)this + 166);
  if (v5)
  {
    int v6 = 0;
    uint64_t v11 = (uint64_t *)*((void *)this + 82);
    uint64_t v12 = 8 * v5;
    do
    {
      uint64_t v13 = *v11++;
      v6 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(void *)v13 + 24))(v13, a2);
      v12 -= 8;
    }
    while (v12);
  }
  else
  {
    int v6 = 0;
  }
  if (*((_DWORD *)this + 114))
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*((void *)this + 56) + 8 * v7);
      if (v8) {
        uint64_t v9 = v8 - 32;
      }
      else {
        uint64_t v9 = 0;
      }
      v6 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(void *)v9 + 24))(v9, a2);
      ++v7;
    }
    while (v7 < *((unsigned int *)this + 114));
  }
  return v6 & 1;
}

llvm *llvm::PMTopLevelManager::dumpArguments(llvm *this)
{
  if (dword_1EBD066F8 >= 1)
  {
    char v1 = this;
    uint64_t v2 = llvm::dbgs(this);
    AnalysisPassInfo = sub_1CB8E509C(v2, "Pass Arguments: ");
    uint64_t v4 = *((unsigned int *)v1 + 62);
    if (v4)
    {
      uint64_t v10 = *((void *)v1 + 30);
      uint64_t v11 = 8 * v4;
      do
      {
        AnalysisPassInfo = (llvm *)llvm::PMTopLevelManager::findAnalysisPassInfo(v1, *(const void **)(*(void *)v10 + 16));
        if (AnalysisPassInfo)
        {
          uint64_t v12 = AnalysisPassInfo;
          if (!*((unsigned char *)AnalysisPassInfo + 42))
          {
            uint64_t v13 = llvm::dbgs(AnalysisPassInfo);
            char v14 = sub_1CB8E509C(v13, " -");
            uint64_t v15 = (const void *)*((void *)v12 + 2);
            size_t v16 = *((void *)v12 + 3);
            AnalysisPassInfo = (llvm *)*((void *)v14 + 4);
            if (v16 <= *((void *)v14 + 3) - (void)AnalysisPassInfo)
            {
              if (v16)
              {
                AnalysisPassInfo = (llvm *)memcpy(AnalysisPassInfo, v15, v16);
                *((void *)v14 + 4) += v16;
              }
            }
            else
            {
              AnalysisPassInfo = llvm::raw_ostream::write(v14, (const char *)v15, v16);
            }
          }
        }
        v10 += 8;
        v11 -= 8;
      }
      while (v11);
    }
    uint64_t v5 = *((unsigned int *)v1 + 10);
    if (v5)
    {
      int v6 = (llvm::PMTopLevelManager ***)*((void *)v1 + 4);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        AnalysisPassInfo = (llvm *)llvm::PMDataManager::dumpPassArguments(v8);
        v7 -= 8;
      }
      while (v7);
    }
    uint64_t v9 = llvm::dbgs(AnalysisPassInfo);
    return sub_1CB8E509C(v9, "\n");
  }
  return this;
}

uint64_t llvm::PMTopLevelManager::dumpPasses(uint64_t this)
{
  if (dword_1EBD066F8 >= 2)
  {
    uint64_t v1 = this;
    uint64_t v2 = *(unsigned int *)(this + 248);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        this = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(v1 + 240) + v3) + 128))(*(void *)(*(void *)(v1 + 240) + v3), 0);
        v3 += 8;
      }
      while (v4 != v3);
    }
    uint64_t v5 = *(unsigned int *)(v1 + 40);
    if (v5)
    {
      int v6 = *(uint64_t **)(v1 + 32);
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *v6++;
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8);
        this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 128))(v9, 1);
        v7 -= 8;
      }
      while (v7);
    }
  }
  return this;
}

uint64_t llvm::legacy::FunctionPassManagerImpl::doFinalization(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  if (*(_DWORD *)(a1 + 456) - 1 >= 0)
  {
    uint64_t v5 = 8 * (*(_DWORD *)(a1 + 456) - 1);
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 448) + v5);
      if (v6) {
        uint64_t v7 = v6 - 32;
      }
      else {
        uint64_t v7 = 0;
      }
      v4 |= (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a2);
      v5 -= 8;
    }
    while (v5 != -8);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 664);
  if (v8)
  {
    uint64_t v10 = *(uint64_t **)(a1 + 656);
    uint64_t v11 = 8 * v8;
    do
    {
      uint64_t v12 = *v10++;
      v4 |= (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, a2);
      v11 -= 8;
    }
    while (v11);
  }
  return v4 & 1;
}

uint64_t llvm::legacy::FunctionPassManagerImpl::releaseMemoryOnTheFly(uint64_t this)
{
  if (*(unsigned char *)(this + 1096))
  {
    uint64_t v1 = this;
    unint64_t v2 = *(unsigned int *)(this + 456);
    if (v2)
    {
      for (unint64_t i = 0; i < v2; ++i)
      {
        uint64_t v4 = *(void *)(*(void *)(v1 + 448) + 8 * i);
        if (v4) {
          uint64_t v5 = v4 - 32;
        }
        else {
          uint64_t v5 = 0;
        }
        if (*(_DWORD *)(v5 + 56))
        {
          unint64_t v6 = 0;
          do
          {
            uint64_t v7 = *(void *)(*(void *)(v5 + 48) + 8 * v6);
            this = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
            ++v6;
          }
          while (v6 < *(unsigned int *)(v5 + 56));
          unint64_t v2 = *(unsigned int *)(v1 + 456);
        }
      }
    }
    *(unsigned char *)(v1 + 1096) = 0;
  }
  return this;
}

uint64_t llvm::legacy::FunctionPassManagerImpl::run(llvm::legacy::FunctionPassManagerImpl *this, llvm::Function *a2)
{
  llvm::PMTopLevelManager::initializeAllAnalysisInfo((_DWORD *)this + 104);
  if (*((_DWORD *)this + 114))
  {
    unint64_t v5 = 0;
    char v4 = 0;
    do
    {
      uint64_t v6 = *(void *)(*((void *)this + 56) + 8 * v5);
      if (v6) {
        uint64_t v7 = (llvm::FPPassManager *)(v6 - 32);
      }
      else {
        uint64_t v7 = 0;
      }
      char v8 = llvm::FPPassManager::runOnFunction(v7, a2);
      uint64_t v9 = **(void **)a2;
      uint64_t v10 = *(void (**)(uint64_t, void))(*(void *)v9 + 136);
      if (v10)
      {
        char v20 = v8;
        v10(v9, *(void *)(*(void *)v9 + 144));
        char v8 = v20;
      }
      v4 |= v8;
      ++v5;
      unint64_t v11 = *((unsigned int *)this + 114);
    }
    while (v5 < v11);
    if (v11)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)this + 56);
      do
      {
        uint64_t v14 = *(void *)(v13 + 8 * v12);
        uint64_t v15 = v14 - 32;
        if (!v14) {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(unsigned int *)(v15 + 56);
        if (v16)
        {
          uint64_t v17 = *(uint64_t **)(v15 + 48);
          do
          {
            uint64_t v18 = *v17++;
            *(void *)(*(void *)(v18 + 8) + 8) = **(void **)(v18 + 8);
            --v16;
          }
          while (v16);
        }
        ++v12;
      }
      while (v12 != v11);
    }
  }
  else
  {
    char v4 = 0;
  }
  *((unsigned char *)this + 1096) = 1;
  return v4 & 1;
}

_DWORD *llvm::PMTopLevelManager::initializeAllAnalysisInfo(_DWORD *this)
{
  uint64_t v1 = this[10];
  if (v1)
  {
    unint64_t v2 = (uint64_t *)*((void *)this + 4);
    uint64_t v3 = &v2[v1];
    long long v4 = 0uLL;
    do
    {
      uint64_t v5 = *v2;
      int v6 = *(_DWORD *)(*v2 + 216);
      if (v6 || *(_DWORD *)(v5 + 220))
      {
        uint64_t v7 = *(unsigned int *)(v5 + 224);
        if (v7 > 4 * v6 && v7 >= 0x41)
        {
          int v25 = this;
          uint64_t v19 = v3;
          size_t v21 = v2;
          uint64_t v23 = *v2;
          sub_1CD3C8060((_DWORD *)(v5 + 208));
          long long v4 = 0uLL;
          unint64_t v2 = v21;
          uint64_t v5 = v23;
          uint64_t v3 = v19;
          this = v25;
        }
        else
        {
          if (v7)
          {
            char v8 = *(void **)(v5 + 208);
            uint64_t v9 = 16 * v7;
            do
            {
              void *v8 = -4096;
              v8 += 2;
              v9 -= 16;
            }
            while (v9);
          }
          *(void *)(v5 + 216) = 0;
        }
      }
      *(_OWORD *)(v5 + 176) = v4;
      *(_OWORD *)(v5 + 192) = v4;
      *(_OWORD *)(v5 + 160) = v4;
      ++v2;
    }
    while (v2 != v3);
  }
  uint64_t v10 = this[30];
  if (v10)
  {
    unint64_t v11 = (uint64_t *)*((void *)this + 14);
    uint64_t v12 = &v11[v10];
    long long v13 = 0uLL;
    do
    {
      uint64_t v14 = *v11;
      int v15 = *(_DWORD *)(*v11 + 216);
      if (v15 || *(_DWORD *)(v14 + 220))
      {
        this = (_DWORD *)(v14 + 208);
        uint64_t v16 = *(unsigned int *)(v14 + 224);
        if (v16 > 4 * v15 && v16 >= 0x41)
        {
          std::string v24 = v11;
          char v20 = v12;
          uint64_t v22 = *v11;
          this = sub_1CD3C8060(this);
          long long v13 = 0uLL;
          uint64_t v12 = v20;
          uint64_t v14 = v22;
          unint64_t v11 = v24;
        }
        else
        {
          if (v16)
          {
            uint64_t v17 = *(void **)this;
            uint64_t v18 = 16 * v16;
            do
            {
              *uint64_t v17 = -4096;
              v17 += 2;
              v18 -= 16;
            }
            while (v18);
          }
          *(void *)(v14 + 216) = 0;
        }
      }
      *(_OWORD *)(v14 + 176) = v13;
      *(_OWORD *)(v14 + 192) = v13;
      *(_OWORD *)(v14 + 160) = v13;
      ++v11;
    }
    while (v11 != v12);
  }
  return this;
}

uint64_t llvm::FPPassManager::runOnFunction(llvm::FPPassManager *this, llvm::Function *a2)
{
  uint64_t v3 = this;
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
    {
LABEL_3:
      LOBYTE(v4) = 0;
      return v4 & 1;
    }
  }
  else if (!*((unsigned char *)a2 + 16) {
         && *((llvm::Function **)a2 + 9) == (llvm::Function *)((char *)a2 + 72)
  }
         && (*((unsigned char *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v6 = *((void *)a2 + 5);
  uint64_t v7 = (llvm::FPPassManager *)((char *)this + 32);
  uint64_t v9 = *(void *)(*((void *)this + 5) + 8);
  uint64_t v8 = *(void *)(*((void *)this + 5) + 16);
  if (v8 != v9)
  {
    unsigned int v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(v8 - 8);
      v8 -= 8;
      uint64_t v12 = (char *)v7 + 8 * v10++;
      *((void *)v12 + 20) = v11 + 208;
    }
    while (v8 != v9);
  }
  uint64_t v112 = 0;
  uint64_t v113 = 0;
  uint64_t v114 = 0x1000000000;
  uint64_t v13 = (*(uint64_t (**)(void, const char *, uint64_t))(**(void **)(**(void **)v6 + 72) + 24))(*(void *)(**(void **)v6 + 72), "size-info", 9);
  int v108 = v13;
  if (v13)
  {
    unsigned int inited = llvm::PMDataManager::initSizeRemarkInfo(v13, v6, (uint64_t)&v112);
    unsigned int InstructionCount = llvm::Function::getInstructionCount(a2);
  }
  else
  {
    unsigned int InstructionCount = 0;
    unsigned int inited = 0;
  }
  unsigned int v16 = a2 >> 4;
  if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
  {
    uint64_t v17 = ***(void ***)a2;
    uint64_t v18 = *(void *)(v17 + 152);
    int v19 = *(_DWORD *)(v17 + 168);
    if (v19)
    {
      unsigned int v20 = (v19 - 1) & (v16 ^ (a2 >> 9));
      size_t v21 = *(llvm::Function **)(v18 + 16 * v20);
      if (v21 != a2)
      {
        int v22 = 1;
        do
        {
          if (v21 == (llvm::Function *)-4096) {
            break;
          }
          unsigned int v23 = v20 + v22++;
          unsigned int v20 = v23 & (v19 - 1);
          size_t v21 = *(llvm::Function **)(v18 + 16 * v20);
        }
        while (v21 != a2);
      }
    }
  }
  std::string v24 = (llvm *)off_1EC7DFC00();
  std::string v27 = v24;
  if (*(void *)v24) {
    llvm::timeTraceProfilerBegin((uint64_t)"OptFunction", 11, v25, v26);
  }
  if (*((_DWORD *)v3 + 14))
  {
    unsigned int v103 = InstructionCount;
    unsigned int v104 = inited;
    uint64_t v105 = v6;
    uint64_t v106 = v27;
    uint64_t v28 = 0;
    int v4 = 0;
    unsigned int v110 = v16 ^ (a2 >> 9);
    uint64_t v107 = v3;
    uint64_t v111 = (llvm::FPPassManager *)((char *)v3 + 32);
    while (1)
    {
      char v29 = *(llvm::Pass **)(*((void *)v3 + 6) + 8 * v28);
      uint64_t v30 = (*(uint64_t (**)(llvm::Pass *))(*(void *)v29 + 16))(v29);
      if (*(void *)v27) {
        llvm::timeTraceProfilerBegin((uint64_t)"RunPass", 7, v30, v31);
      }
      if ((*((unsigned char *)a2 + 23) & 0x10) != 0) {
        break;
      }
      size_t v42 = 0;
      uint64_t v41 = &byte_1CFBCE98E;
LABEL_33:
      int v109 = v4;
      llvm::PMDataManager::dumpPassInfo(v7, (uint64_t)v29, 0, 3, v41, v42);
      if (dword_1EBD066F8 >= 4)
      {
        int v115 = v117;
        uint64_t v116 = 0x800000000;
        v118 = v120;
        uint64_t v119 = 0x200000000;
        uint64_t v121 = v123;
        uint64_t v122 = 0x200000000;
        size_t v124 = &v126;
        uint64_t v125 = 0;
        char v126 = 0;
        (*(void (**)(llvm::Pass *, void **))(*(void *)v29 + 80))(v29, &v115);
        llvm::PMDataManager::dumpAnalysisUsage(v111, "Required", 8uLL, (unint64_t)v29, (uint64_t)&v115);
        sub_1CC5F62A0((uint64_t)&v115);
      }
      uint64_t AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(*((llvm::PMTopLevelManager **)v3 + 5), v29);
      uint64_t v46 = *(unsigned int *)(AnalysisUsage + 8);
      if (v46)
      {
        uint64_t v47 = *(const void ***)AnalysisUsage;
        uint64_t v48 = *(void *)AnalysisUsage + 8 * v46;
        do
        {
          uint64_t v49 = *v47;
          uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v111, *v47, 1);
          if (AnalysisPass)
          {
            uint64_t v51 = AnalysisPass;
            uint64_t v52 = *((void *)v29 + 1);
            uint64_t v54 = *(char **)v52;
            char v53 = *(char **)(v52 + 8);
            if (*(char **)v52 == v53)
            {
LABEL_81:
              uint64_t v56 = 0;
            }
            else
            {
              uint64_t v55 = *(char **)v52;
              while (*(const void **)v55 != v49)
              {
                v55 += 16;
                if (v55 == v53) {
                  goto LABEL_81;
                }
              }
              uint64_t v56 = *((void *)v55 + 1);
            }
            if (v56 != AnalysisPass)
            {
              unint64_t v85 = *(void *)(v52 + 16);
              if ((unint64_t)v53 >= v85)
              {
                uint64_t v101 = (v53 - v54) >> 4;
                unint64_t v87 = v101 + 1;
                if ((unint64_t)(v101 + 1) >> 60) {
                  abort();
                }
                uint64_t v88 = v85 - (void)v54;
                if (v88 >> 3 > v87) {
                  unint64_t v87 = v88 >> 3;
                }
                BOOL v89 = (unint64_t)v88 >= 0x7FFFFFFFFFFFFFF0;
                unint64_t v90 = 0xFFFFFFFFFFFFFFFLL;
                if (!v89) {
                  unint64_t v90 = v87;
                }
                unint64_t v102 = v90;
                if (v90)
                {
                  if (v90 >> 60) {
                    sub_1CB833614();
                  }
                  uint64_t v91 = (char *)operator new(16 * v90);
                }
                else
                {
                  uint64_t v91 = 0;
                }
                uint64_t v92 = &v91[16 * v101];
                *(void *)uint64_t v92 = v49;
                *((void *)v92 + 1) = v51;
                v93 = v92;
                if (v54 != v53)
                {
                  do
                  {
                    *((_OWORD *)v93 - 1) = *((_OWORD *)v53 - 1);
                    v93 -= 16;
                    v53 -= 16;
                  }
                  while (v53 != v54);
                  uint64_t v54 = *(char **)v52;
                }
                v86 = v92 + 16;
                *(void *)uint64_t v52 = v93;
                *(void *)(v52 + 8) = v92 + 16;
                *(void *)(v52 + 16) = &v91[16 * v102];
                if (v54) {
                  operator delete(v54);
                }
              }
              else
              {
                *(void *)char v53 = v49;
                *((void *)v53 + 1) = AnalysisPass;
                v86 = v53 + 16;
              }
              *(void *)(v52 + 8) = v86;
            }
          }
          ++v47;
        }
        while (v47 != (const void **)v48);
      }
      LODWORD(v116) = 0;
      int v115 = &unk_1F26174E8;
      v117[1] = v29;
      v117[2] = a2;
      v117[3] = 0;
      PassTimer = (llvm::Timer *)llvm::getPassTimer(v29, v45);
      uint64_t v58 = PassTimer;
      if (PassTimer) {
        llvm::Timer::startTimer(PassTimer);
      }
      int v59 = (*(uint64_t (**)(llvm::Pass *, llvm::Function *))(*(void *)v29 + 136))(v29, a2);
      if (v108)
      {
        uint64_t v94 = llvm::Function::getInstructionCount(a2);
        if (v94 != v103)
        {
          unsigned int v95 = v94;
          int v96 = v94 - v103;
          llvm::PMDataManager::emitInstrCountChangedRemark(v94, (uint64_t)v29, v105, v94 - (unint64_t)v103, v104, (uint64_t)&v112, (uint64_t **)a2);
          unsigned int v103 = v95;
          v104 += v96;
        }
      }
      if (v58) {
        llvm::Timer::stopTimer(v58);
      }
      if (!v59)
      {
        uint64_t v7 = v111;
        if (dword_1EBD066F8 >= 4)
        {
          int v115 = v117;
          uint64_t v116 = 0x800000000;
          v118 = v120;
          uint64_t v119 = 0x200000000;
          uint64_t v121 = v123;
          uint64_t v122 = 0x200000000;
          size_t v124 = &v126;
          uint64_t v125 = 0;
          char v126 = 0;
          (*(void (**)(llvm::Pass *, void **))(*(void *)v29 + 80))(v29, &v115);
          uint64_t v7 = v111;
          llvm::PMDataManager::dumpAnalysisUsage(v111, "Preserved", 9uLL, (unint64_t)v29, (uint64_t)&v121);
          sub_1CC5F62A0((uint64_t)&v115);
          if (dword_1EBD066F8 >= 4)
          {
            int v115 = v117;
            uint64_t v116 = 0x800000000;
            v118 = v120;
            uint64_t v119 = 0x200000000;
            uint64_t v121 = v123;
            uint64_t v122 = 0x200000000;
            size_t v124 = &v126;
            uint64_t v125 = 0;
            char v126 = 0;
            (*(void (**)(llvm::Pass *, void **))(*(void *)v29 + 80))(v29, &v115);
            uint64_t v7 = v111;
            llvm::PMDataManager::dumpAnalysisUsage(v111, "Used", 4uLL, (unint64_t)v29, (uint64_t)&v124);
            sub_1CC5F62A0((uint64_t)&v115);
          }
        }
        goto LABEL_53;
      }
      uint64_t v7 = v111;
      if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
      {
        uint64_t v73 = ***(void ***)a2;
        uint64_t v74 = *(void *)(v73 + 152);
        uint64_t v75 = *(unsigned int *)(v73 + 168);
        if (!v75) {
          goto LABEL_79;
        }
        LODWORD(v76) = (v75 - 1) & v110;
        uint64_t v77 = v74 + 16 * v76;
        uint64_t v78 = *(llvm::Function **)v77;
        if (*(llvm::Function **)v77 != a2)
        {
          int v79 = 1;
          while (v78 != (llvm::Function *)-4096)
          {
            int v80 = v76 + v79++;
            uint64_t v76 = v80 & (v75 - 1);
            uint64_t v78 = *(llvm::Function **)(v74 + 16 * v76);
            if (v78 == a2)
            {
              uint64_t v77 = v74 + 16 * v76;
              goto LABEL_74;
            }
          }
LABEL_79:
          uint64_t v77 = v74 + 16 * v75;
        }
LABEL_74:
        uint64_t v81 = *(void **)(v77 + 8);
        size_t v84 = *v81;
        uint64_t v82 = (char *)(v81 + 2);
        size_t v83 = v84;
        goto LABEL_75;
      }
      size_t v83 = 0;
      uint64_t v82 = &byte_1CFBCE98E;
LABEL_75:
      llvm::PMDataManager::dumpPassInfo(v111, (uint64_t)v29, 1, 3, v82, v83);
      if (dword_1EBD066F8 >= 4)
      {
        int v115 = v117;
        uint64_t v116 = 0x800000000;
        v118 = v120;
        uint64_t v119 = 0x200000000;
        uint64_t v121 = v123;
        uint64_t v122 = 0x200000000;
        size_t v124 = &v126;
        uint64_t v125 = 0;
        char v126 = 0;
        (*(void (**)(llvm::Pass *, void **))(*(void *)v29 + 80))(v29, &v115);
        uint64_t v7 = v111;
        llvm::PMDataManager::dumpAnalysisUsage(v111, "Preserved", 9uLL, (unint64_t)v29, (uint64_t)&v121);
        sub_1CC5F62A0((uint64_t)&v115);
        if (dword_1EBD066F8 >= 4)
        {
          int v115 = v117;
          uint64_t v116 = 0x800000000;
          v118 = v120;
          uint64_t v119 = 0x200000000;
          uint64_t v121 = v123;
          uint64_t v122 = 0x200000000;
          size_t v124 = &v126;
          uint64_t v125 = 0;
          char v126 = 0;
          (*(void (**)(llvm::Pass *, void **))(*(void *)v29 + 80))(v29, &v115);
          uint64_t v7 = v111;
          llvm::PMDataManager::dumpAnalysisUsage(v111, "Used", 4uLL, (unint64_t)v29, (uint64_t)&v124);
          sub_1CC5F62A0((uint64_t)&v115);
        }
      }
      llvm::PMDataManager::removeNotPreservedAnalysis(v7, v29);
LABEL_53:
      llvm::PMDataManager::recordAvailableAnalysis(v7, v29);
      if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
      {
        size_t v71 = 0;
        char v70 = &byte_1CFBCE98E;
        std::string v27 = v106;
        uint64_t v3 = v107;
        int v63 = v109;
        goto LABEL_61;
      }
      uint64_t v60 = ***(void ***)a2;
      uint64_t v61 = *(void *)(v60 + 152);
      uint64_t v62 = *(unsigned int *)(v60 + 168);
      std::string v27 = v106;
      uint64_t v3 = v107;
      int v63 = v109;
      if (!v62) {
        goto LABEL_66;
      }
      LODWORD(v64) = (v62 - 1) & v110;
      uint64_t v65 = v61 + 16 * v64;
      size_t v66 = *(llvm::Function **)v65;
      if (*(llvm::Function **)v65 != a2)
      {
        int v67 = 1;
        while (v66 != (llvm::Function *)-4096)
        {
          int v68 = v64 + v67++;
          uint64_t v64 = v68 & (v62 - 1);
          size_t v66 = *(llvm::Function **)(v61 + 16 * v64);
          if (v66 == a2)
          {
            uint64_t v65 = v61 + 16 * v64;
            goto LABEL_60;
          }
        }
LABEL_66:
        uint64_t v65 = v61 + 16 * v62;
      }
LABEL_60:
      int v69 = *(void **)(v65 + 8);
      size_t v72 = *v69;
      char v70 = (char *)(v69 + 2);
      size_t v71 = v72;
LABEL_61:
      llvm::PMDataManager::removeDeadPasses((int32x2_t *)v7, (uint64_t)v29, v70, v71, 3);
      if (*(void *)v27) {
        std::string v24 = (llvm *)llvm::timeTraceProfilerEnd(v24);
      }
      int v4 = v63 | v59;
      if (++v28 >= (unint64_t)*((unsigned int *)v3 + 14)) {
        goto LABEL_87;
      }
    }
    uint64_t v32 = ***(void ***)a2;
    uint64_t v33 = *(void *)(v32 + 152);
    uint64_t v34 = *(unsigned int *)(v32 + 168);
    if (v34)
    {
      LODWORD(v35) = (v34 - 1) & v110;
      uint64_t v36 = v33 + 16 * v35;
      int v37 = *(llvm::Function **)v36;
      if (*(llvm::Function **)v36 == a2)
      {
LABEL_32:
        char v40 = *(void **)(v36 + 8);
        size_t v43 = *v40;
        uint64_t v41 = (char *)(v40 + 2);
        size_t v42 = v43;
        goto LABEL_33;
      }
      int v38 = 1;
      while (v37 != (llvm::Function *)-4096)
      {
        int v39 = v35 + v38++;
        uint64_t v35 = v39 & (v34 - 1);
        int v37 = *(llvm::Function **)(v33 + 16 * v35);
        if (v37 == a2)
        {
          uint64_t v36 = v33 + 16 * v35;
          goto LABEL_32;
        }
      }
    }
    uint64_t v36 = v33 + 16 * v34;
    goto LABEL_32;
  }
  LOBYTE(v4) = 0;
LABEL_87:
  if (*(void *)v27) {
    llvm::timeTraceProfilerEnd(v24);
  }
  if (HIDWORD(v113) && v113)
  {
    uint64_t v97 = 0;
    uint64_t v98 = 8 * v113;
    do
    {
      uint64_t v99 = *(void *)((char *)v112 + v97);
      if (v99 != -8 && v99 != 0) {
        MEMORY[0x1D25D9CD0]();
      }
      v97 += 8;
    }
    while (v98 != v97);
  }
  free(v112);
  return v4 & 1;
}

uint64_t llvm::FPPassManager::cleanup(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 56);
  if (v1)
  {
    unint64_t v2 = *(uint64_t **)(this + 48);
    do
    {
      uint64_t v3 = *v2++;
      *(void *)(*(void *)(v3 + 8) + 8) = **(void **)(v3 + 8);
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t llvm::legacy::PassManagerImpl::run(llvm::legacy::PassManagerImpl *this, llvm::Module *a2)
{
  uint64_t v3 = this;
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  int v4 = (_DWORD *)((char *)this + 416);
  llvm::PMTopLevelManager::dumpArguments((llvm::legacy::PassManagerImpl *)((char *)this + 416));
  llvm::PMTopLevelManager::dumpPasses((uint64_t)v4);
  uint64_t v5 = *((unsigned int *)v3 + 166);
  if (v5)
  {
    int v6 = 0;
    uint64_t v7 = (uint64_t *)*((void *)v3 + 82);
    uint64_t v8 = 8 * v5;
    do
    {
      uint64_t v9 = *v7++;
      v6 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(void *)v9 + 24))(v9, a2);
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    int v6 = 0;
  }
  llvm::PMTopLevelManager::initializeAllAnalysisInfo(v4);
  if (*((_DWORD *)v3 + 114))
  {
    unsigned int v10 = (char *)a2 + 168;
    uint64_t v11 = (void *)off_1EC7DFC00();
    unint64_t v12 = 0;
    unsigned int v95 = (char *)a2 + 168;
    int v96 = a2;
    BOOL v89 = v11;
    unint64_t v90 = v3;
    do
    {
      uint64_t v13 = *(void *)(*((void *)v3 + 56) + 8 * v12);
      if (v13) {
        uint64_t v14 = v13 - 32;
      }
      else {
        uint64_t v14 = 0;
      }
      if (*v11)
      {
        char v80 = *((unsigned char *)a2 + 191);
        if (v80 >= 0) {
          uint64_t v81 = (uint64_t)v10;
        }
        else {
          uint64_t v81 = *((void *)a2 + 21);
        }
        if (v80 >= 0) {
          uint64_t v82 = v80 & 0x7F;
        }
        else {
          uint64_t v82 = *((void *)a2 + 22);
        }
        llvm::timeTraceProfilerBegin((uint64_t)"OptModule", 9, v81, v82);
      }
      uint64_t v15 = *(void *)(v14 + 440);
      uint64_t v16 = *(void *)(v14 + 448);
      if (v15 == v16)
      {
        int v17 = 0;
      }
      else
      {
        int v17 = 0;
        do
        {
          v17 |= (*(uint64_t (**)(void, llvm::Module *))(**(void **)(v15 + 8) + 24))(*(void *)(v15 + 8), a2);
          v15 += 16;
        }
        while (v15 != v16);
      }
      if (*(_DWORD *)(v14 + 56))
      {
        unint64_t v18 = 0;
        do
        {
          uint64_t v19 = *(void *)(*(void *)(v14 + 48) + 8 * v18);
          v17 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(void *)v19 + 24))(v19, a2);
          ++v18;
        }
        while (v18 < *(unsigned int *)(v14 + 56));
      }
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      uint64_t v100 = 0x1000000000;
      uint64_t v20 = (*(uint64_t (**)(void, const char *, uint64_t))(**(void **)(**(void **)a2 + 72) + 24))(*(void *)(**(void **)a2 + 72), "size-info", 9);
      int v94 = v20;
      if (v20) {
        unsigned int inited = llvm::PMDataManager::initSizeRemarkInfo(v20, (uint64_t)a2, (uint64_t)&v98);
      }
      else {
        unsigned int inited = 0;
      }
      if (*(_DWORD *)(v14 + 56))
      {
        unsigned int v88 = inited;
        unint64_t v91 = v12;
        int v92 = v6;
        unint64_t v22 = 0;
        unsigned int v23 = (llvm *)(v14 + 32);
        uint64_t v97 = (llvm *)(v14 + 32);
        uint64_t v93 = v14;
        do
        {
          std::string v24 = *(llvm::Pass **)(*(void *)(v14 + 48) + 8 * v22);
          char v25 = *((unsigned char *)a2 + 191);
          BOOL v26 = v25 < 0;
          if (v25 >= 0) {
            std::string v27 = v10;
          }
          else {
            std::string v27 = (const void *)*((void *)a2 + 21);
          }
          size_t v28 = v25 & 0x7F;
          if (v26) {
            size_t v29 = *((void *)a2 + 22);
          }
          else {
            size_t v29 = v28;
          }
          llvm::PMDataManager::dumpPassInfo(v23, *(void *)(*(void *)(v14 + 48) + 8 * v22), 0, 4, v27, v29);
          if (dword_1EBD066F8 >= 4)
          {
            uint64_t v101 = v103;
            uint64_t v102 = 0x800000000;
            unsigned int v104 = v106;
            uint64_t v105 = 0x200000000;
            uint64_t v107 = v109;
            uint64_t v108 = 0x200000000;
            unsigned int v110 = &v112;
            uint64_t v111 = 0;
            char v112 = 0;
            (*(void (**)(llvm::Pass *, void **))(*(void *)v24 + 80))(v24, &v101);
            llvm::PMDataManager::dumpAnalysisUsage(v23, "Required", 8uLL, (unint64_t)v24, (uint64_t)&v101);
            sub_1CC5F62A0((uint64_t)&v101);
          }
          uint64_t AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(*(llvm::PMTopLevelManager **)(v14 + 40), v24);
          uint64_t v32 = *(unsigned int *)(AnalysisUsage + 8);
          if (v32)
          {
            uint64_t v33 = *(const void ***)AnalysisUsage;
            uint64_t v34 = *(void *)AnalysisUsage + 8 * v32;
            do
            {
              uint64_t v35 = *v33;
              uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v23, *v33, 1);
              if (AnalysisPass)
              {
                uint64_t v37 = AnalysisPass;
                uint64_t v38 = *((void *)v24 + 1);
                char v40 = *(char **)v38;
                int v39 = *(char **)(v38 + 8);
                if (*(char **)v38 == v39)
                {
LABEL_64:
                  uint64_t v42 = 0;
                }
                else
                {
                  uint64_t v41 = *(char **)v38;
                  while (*(const void **)v41 != v35)
                  {
                    v41 += 16;
                    if (v41 == v39) {
                      goto LABEL_64;
                    }
                  }
                  uint64_t v42 = *((void *)v41 + 1);
                }
                if (v42 != AnalysisPass)
                {
                  unint64_t v58 = *(void *)(v38 + 16);
                  if ((unint64_t)v39 >= v58)
                  {
                    uint64_t v72 = (v39 - v40) >> 4;
                    unint64_t v73 = v72 + 1;
                    if ((unint64_t)(v72 + 1) >> 60) {
                      abort();
                    }
                    uint64_t v74 = v58 - (void)v40;
                    if (v74 >> 3 > v73) {
                      unint64_t v73 = v74 >> 3;
                    }
                    if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0) {
                      unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
                    }
                    unint64_t v87 = v73;
                    if (v73)
                    {
                      if (v73 >> 60) {
                        sub_1CB833614();
                      }
                      uint64_t v75 = (char *)operator new(16 * v73);
                      uint64_t v72 = (v39 - v40) >> 4;
                    }
                    else
                    {
                      uint64_t v75 = 0;
                    }
                    uint64_t v76 = &v75[16 * v72];
                    *(void *)uint64_t v76 = v35;
                    *((void *)v76 + 1) = v37;
                    uint64_t v77 = v76;
                    if (v40 != v39)
                    {
                      do
                      {
                        *((_OWORD *)v77 - 1) = *((_OWORD *)v39 - 1);
                        v77 -= 16;
                        v39 -= 16;
                      }
                      while (v39 != v40);
                      char v40 = *(char **)v38;
                    }
                    int v59 = v76 + 16;
                    *(void *)uint64_t v38 = v77;
                    *(void *)(v38 + 8) = v76 + 16;
                    *(void *)(v38 + 16) = &v75[16 * v87];
                    if (v40) {
                      operator delete(v40);
                    }
                  }
                  else
                  {
                    *(void *)int v39 = v35;
                    *((void *)v39 + 1) = AnalysisPass;
                    int v59 = v39 + 16;
                  }
                  *(void *)(v38 + 8) = v59;
                }
              }
              ++v33;
              unsigned int v23 = v97;
            }
            while (v33 != (const void **)v34);
          }
          LODWORD(v102) = 0;
          uint64_t v101 = &unk_1F26174E8;
          v103[1] = v24;
          v103[2] = 0;
          size_t v43 = v96;
          v103[3] = v96;
          PassTimer = (llvm::Timer *)llvm::getPassTimer(v24, v31);
          char v45 = PassTimer;
          if (PassTimer) {
            llvm::Timer::startTimer(PassTimer);
          }
          int v46 = (*(uint64_t (**)(llvm::Pass *, llvm::Module *))(*(void *)v24 + 136))(v24, v96);
          if (v94)
          {
            uint64_t InstructionCount = llvm::Module::getInstructionCount(v96);
            if (InstructionCount == v88)
            {
              size_t v43 = v96;
            }
            else
            {
              unsigned int v79 = InstructionCount;
              size_t v43 = v96;
              llvm::PMDataManager::emitInstrCountChangedRemark(InstructionCount, (uint64_t)v24, (uint64_t)v96, InstructionCount - (unint64_t)v88, v88, (uint64_t)&v98, 0);
              unsigned int v88 = v79;
            }
            unsigned int v23 = v97;
          }
          if (v45) {
            llvm::Timer::stopTimer(v45);
          }
          if (v46)
          {
            char v53 = *((unsigned char *)v43 + 191);
            BOOL v54 = v53 < 0;
            unsigned int v10 = v95;
            if (v53 >= 0) {
              uint64_t v55 = v95;
            }
            else {
              uint64_t v55 = (const void *)*((void *)v43 + 21);
            }
            size_t v56 = v53 & 0x7F;
            if (v54) {
              size_t v57 = *((void *)v43 + 22);
            }
            else {
              size_t v57 = v56;
            }
            llvm::PMDataManager::dumpPassInfo(v23, (uint64_t)v24, 1, 4, v55, v57);
            if (dword_1EBD066F8 >= 4)
            {
              uint64_t v101 = v103;
              uint64_t v102 = 0x800000000;
              unsigned int v104 = v106;
              uint64_t v105 = 0x200000000;
              uint64_t v107 = v109;
              uint64_t v108 = 0x200000000;
              unsigned int v110 = &v112;
              uint64_t v111 = 0;
              char v112 = 0;
              (*(void (**)(llvm::Pass *, void **))(*(void *)v24 + 80))(v24, &v101);
              unsigned int v10 = v95;
              llvm::PMDataManager::dumpAnalysisUsage(v23, "Preserved", 9uLL, (unint64_t)v24, (uint64_t)&v107);
              sub_1CC5F62A0((uint64_t)&v101);
              if (dword_1EBD066F8 >= 4)
              {
                uint64_t v101 = v103;
                uint64_t v102 = 0x800000000;
                unsigned int v104 = v106;
                uint64_t v105 = 0x200000000;
                uint64_t v107 = v109;
                uint64_t v108 = 0x200000000;
                unsigned int v110 = &v112;
                uint64_t v111 = 0;
                char v112 = 0;
                (*(void (**)(llvm::Pass *, void **))(*(void *)v24 + 80))(v24, &v101);
                unsigned int v10 = v95;
                llvm::PMDataManager::dumpAnalysisUsage(v23, "Used", 4uLL, (unint64_t)v24, (uint64_t)&v110);
                sub_1CC5F62A0((uint64_t)&v101);
              }
            }
            llvm::PMDataManager::removeNotPreservedAnalysis(v23, v24);
          }
          else
          {
            unsigned int v10 = v95;
            if (dword_1EBD066F8 >= 4)
            {
              uint64_t v101 = v103;
              uint64_t v102 = 0x800000000;
              unsigned int v104 = v106;
              uint64_t v105 = 0x200000000;
              uint64_t v107 = v109;
              uint64_t v108 = 0x200000000;
              unsigned int v110 = &v112;
              uint64_t v111 = 0;
              char v112 = 0;
              (*(void (**)(llvm::Pass *, void **))(*(void *)v24 + 80))(v24, &v101);
              unsigned int v10 = v95;
              llvm::PMDataManager::dumpAnalysisUsage(v97, "Preserved", 9uLL, (unint64_t)v24, (uint64_t)&v107);
              sub_1CC5F62A0((uint64_t)&v101);
              if (dword_1EBD066F8 >= 4)
              {
                uint64_t v101 = v103;
                uint64_t v102 = 0x800000000;
                unsigned int v104 = v106;
                uint64_t v105 = 0x200000000;
                uint64_t v107 = v109;
                uint64_t v108 = 0x200000000;
                unsigned int v110 = &v112;
                uint64_t v111 = 0;
                char v112 = 0;
                (*(void (**)(llvm::Pass *, void **))(*(void *)v24 + 80))(v24, &v101);
                unsigned int v10 = v95;
                llvm::PMDataManager::dumpAnalysisUsage(v97, "Used", 4uLL, (unint64_t)v24, (uint64_t)&v110);
                sub_1CC5F62A0((uint64_t)&v101);
              }
            }
          }
          v17 |= v46;
          unsigned int v23 = v97;
          llvm::PMDataManager::recordAvailableAnalysis(v97, v24);
          a2 = v96;
          char v47 = *((unsigned char *)v96 + 191);
          BOOL v48 = v47 < 0;
          if (v47 >= 0) {
            uint64_t v49 = v10;
          }
          else {
            uint64_t v49 = (const void *)*((void *)v96 + 21);
          }
          size_t v50 = v47 & 0x7F;
          if (v48) {
            size_t v51 = *((void *)v96 + 22);
          }
          else {
            size_t v51 = v50;
          }
          llvm::PMDataManager::removeDeadPasses((int32x2_t *)v97, (uint64_t)v24, v49, v51, 4);
          ++v22;
          uint64_t v14 = v93;
          unint64_t v52 = *(unsigned int *)(v93 + 56);
        }
        while (v22 < v52);
        int v60 = v52 - 1;
        if (v60 < 0)
        {
          int v6 = v92;
          uint64_t v11 = v89;
          uint64_t v3 = v90;
          unint64_t v12 = v91;
        }
        else
        {
          uint64_t v61 = 8 * v60;
          int v6 = v92;
          uint64_t v11 = v89;
          uint64_t v3 = v90;
          unint64_t v12 = v91;
          do
          {
            v17 |= (*(uint64_t (**)(void, llvm::Module *))(**(void **)(*(void *)(v93 + 48) + v61) + 32))(*(void *)(*(void *)(v93 + 48) + v61), v96);
            v61 -= 8;
          }
          while (v61 != -8);
        }
      }
      uint64_t v62 = *(void *)(v14 + 440);
      uint64_t v63 = *(void *)(v14 + 448);
      while (v62 != v63)
      {
        uint64_t v64 = *(void *)(v62 + 8);
        llvm::legacy::FunctionPassManagerImpl::releaseMemoryOnTheFly(v64);
        v17 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(void *)v64 + 32))(v64, a2);
        v62 += 16;
      }
      if (HIDWORD(v99) && v99)
      {
        uint64_t v83 = 0;
        uint64_t v84 = 8 * v99;
        do
        {
          uint64_t v85 = *(void *)((char *)v98 + v83);
          if (v85 != -8 && v85 != 0) {
            MEMORY[0x1D25D9CD0]();
          }
          v83 += 8;
          a2 = v96;
          uint64_t v11 = v89;
          uint64_t v3 = v90;
        }
        while (v84 != v83);
      }
      free(v98);
      unsigned int v10 = v95;
      if (*v11) {
        llvm::timeTraceProfilerEnd(v65);
      }
      size_t v66 = *(void (**)(void))(**(void **)a2 + 136);
      if (v66) {
        v66();
      }
      v6 |= v17;
      ++v12;
    }
    while (v12 < *((unsigned int *)v3 + 114));
  }
  uint64_t v67 = *((unsigned int *)v3 + 166);
  if (v67)
  {
    int v68 = (uint64_t *)*((void *)v3 + 82);
    uint64_t v69 = 8 * v67;
    do
    {
      uint64_t v70 = *v68++;
      v6 |= (*(uint64_t (**)(uint64_t, llvm::Module *))(*(void *)v70 + 32))(v70, a2);
      v69 -= 8;
    }
    while (v69);
  }
  return v6 & 1;
}

void llvm::PMTopLevelManager::setLastUser(llvm::PMTopLevelManager *a1, llvm::Pass **a2, uint64_t a3, uint64_t a4)
{
  int v4 = a2;
  v103[12] = *MEMORY[0x1E4F143B8];
  uint64_t v97 = a4;
  uint64_t v6 = *(void *)(a4 + 8);
  if (v6) {
    unsigned int v94 = *(_DWORD *)(*(void *)(v6 + 24) + 376);
  }
  else {
    unsigned int v94 = 0;
  }
  if (a3)
  {
    uint64_t v93 = (uint64_t)a1 + 192;
    int v92 = &a2[a3];
    while (1)
    {
      uint64_t v7 = *v4;
      int v96 = *v4;
      uint64_t v8 = sub_1CC5F6CF0(v93, (uint64_t *)&v96) + 1;
      if (!*v8) {
        goto LABEL_18;
      }
      sub_1CC5F6FD8((uint64_t)a1 + 216, v8);
      uint64_t v11 = *(void *)(v9 + 8);
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10 == v11)
      {
        uint64_t v12 = *(unsigned int *)(v9 + 28);
        uint64_t v13 = (llvm::Pass **)(v10 + 8 * v12);
        if (v12)
        {
          uint64_t v14 = 0;
          while (*(llvm::Pass **)(v10 + v14) != v7)
          {
            v14 += 8;
            if (8 * v12 == v14) {
              goto LABEL_12;
            }
          }
          uint64_t v13 = (llvm::Pass **)(v10 + v14);
        }
LABEL_12:
        uint64_t v11 = *(void *)(v9 + 16);
        goto LABEL_13;
      }
      uint64_t v59 = *(unsigned int *)(v9 + 24);
      int v60 = v59 - 1;
      unsigned int v61 = (v59 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v13 = (llvm::Pass **)(v10 + 8 * v61);
      uint64_t v62 = *v13;
      if (*v13 != (llvm::Pass *)-1) {
        break;
      }
      uint64_t v63 = 0;
LABEL_113:
      if (v63) {
        uint64_t v13 = v63;
      }
      if (*v13 == v7) {
        goto LABEL_87;
      }
      LODWORD(v12) = *(_DWORD *)(v9 + 28);
      uint64_t v13 = (llvm::Pass **)(v10 + 8 * v59);
LABEL_13:
      if (v10 == v11) {
        unsigned int v15 = v12;
      }
      else {
        unsigned int v15 = *(_DWORD *)(v9 + 24);
      }
      if (v13 != (llvm::Pass **)(v10 + 8 * v15))
      {
        *uint64_t v13 = (llvm::Pass *)-2;
        ++*(_DWORD *)(v9 + 32);
        uint64_t v7 = v96;
      }
LABEL_18:
      uint64_t v16 = v97;
      uint64_t *v8 = v97;
      sub_1CC5F6FD8((uint64_t)a1 + 216, &v97);
      uint64_t v18 = v17;
      uint64_t v20 = *(void *)(v17 + 8);
      uint64_t v19 = (llvm::SmallPtrSetImplBase *)(v17 + 8);
      uint64_t v21 = *(void *)(v18 + 16);
      uint64_t v22 = *(unsigned int *)(v18 + 28);
      if (v21 != v20)
      {
        unsigned int v26 = *(_DWORD *)(v18 + 24);
LABEL_52:
        if (3 * v26 <= 4 * ((int)v22 - *(_DWORD *)(v18 + 32)))
        {
          if (v26 >= 0x40) {
            v26 *= 2;
          }
          else {
            unsigned int v26 = 128;
          }
        }
        else if (v26 - v22 >= v26 >> 3)
        {
          goto LABEL_54;
        }
        llvm::SmallPtrSetImplBase::Grow(v19, v26);
        unsigned int v26 = *(_DWORD *)(v18 + 24);
        uint64_t v21 = *(void *)(v18 + 16);
LABEL_54:
        unsigned int v51 = v26 - 1;
        unsigned int v52 = (v26 - 1) & ((v7 >> 4) ^ (v7 >> 9));
        char v53 = (llvm::Pass **)(v21 + 8 * v52);
        BOOL v54 = *v53;
        if (*v53 == (llvm::Pass *)-1)
        {
          uint64_t v55 = 0;
LABEL_89:
          if (v55) {
            unint64_t v73 = v55;
          }
          else {
            unint64_t v73 = v53;
          }
          if (*v73 != v7)
          {
            if (*v73 == (llvm::Pass *)-2) {
              --*(_DWORD *)(v18 + 32);
            }
            else {
              ++*(_DWORD *)(v18 + 28);
            }
            *unint64_t v73 = v7;
          }
        }
        else
        {
          uint64_t v55 = 0;
          int v56 = 1;
          while (v54 != v7)
          {
            if (v55) {
              BOOL v57 = 0;
            }
            else {
              BOOL v57 = v54 == (llvm::Pass *)-2;
            }
            if (v57) {
              uint64_t v55 = v53;
            }
            unsigned int v58 = v52 + v56++;
            unsigned int v52 = v58 & v51;
            char v53 = (llvm::Pass **)(v21 + 8 * (v58 & v51));
            BOOL v54 = *v53;
            if (*v53 == (llvm::Pass *)-1) {
              goto LABEL_89;
            }
          }
        }
        goto LABEL_28;
      }
      if (v22)
      {
        unsigned int v23 = 0;
        uint64_t v24 = 8 * v22;
        char v25 = *(llvm::Pass ***)(v18 + 16);
        while (*v25 != v7)
        {
          if (*v25 == (llvm::Pass *)-2) {
            unsigned int v23 = v25;
          }
          ++v25;
          v24 -= 8;
          if (!v24)
          {
            if (!v23) {
              goto LABEL_26;
            }
            *unsigned int v23 = v7;
            --*(_DWORD *)(v18 + 32);
            goto LABEL_28;
          }
        }
        goto LABEL_28;
      }
LABEL_26:
      unsigned int v26 = *(_DWORD *)(v18 + 24);
      if (v22 >= v26) {
        goto LABEL_52;
      }
      *(_DWORD *)(v18 + 28) = v22 + 1;
      *(void *)(v21 + 8 * v22) = v7;
LABEL_28:
      if ((llvm::Pass *)v16 == v7) {
        goto LABEL_49;
      }
      uint64_t AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(a1, v7);
      uint64_t v101 = v103;
      uint64_t v102 = 0xC00000000;
      uint64_t v98 = v100;
      uint64_t v99 = 0xC00000000;
      uint64_t v28 = *(unsigned int *)(AnalysisUsage + 88);
      if (!v28)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v103;
        goto LABEL_31;
      }
      uint64_t v67 = *(const void ***)(AnalysisUsage + 80);
      uint64_t v68 = 8 * v28;
      do
      {
        uint64_t AnalysisPass = llvm::PMTopLevelManager::findAnalysisPass(a1, *v67);
        unsigned int v70 = *(_DWORD *)(*(void *)(*(void *)(AnalysisPass + 8) + 24) + 376);
        if (v94 == v70)
        {
          uint64_t v71 = v102;
          if (v102 >= (unint64_t)HIDWORD(v102)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v72 = &v101;
LABEL_80:
          *((void *)*v72 + v71) = AnalysisPass;
          ++*((_DWORD *)v72 + 2);
          goto LABEL_81;
        }
        if (v94 > v70)
        {
          uint64_t v71 = v99;
          if (v99 >= (unint64_t)HIDWORD(v99)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v72 = &v98;
          goto LABEL_80;
        }
LABEL_81:
        ++v67;
        v68 -= 8;
      }
      while (v68);
      uint64_t v30 = v101;
      uint64_t v29 = v102;
LABEL_31:
      llvm::PMTopLevelManager::setLastUser(a1, v30, v29, v16);
      uint64_t v31 = *(void *)(v16 + 8);
      if (v31)
      {
        uint64_t v32 = v98;
        uint64_t v33 = v99;
        uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(v31 + 24) + 16))(*(void *)(v31 + 24));
        llvm::PMTopLevelManager::setLastUser(a1, v32, v33, v34);
      }
      sub_1CC5F6FD8((uint64_t)a1 + 216, (uint64_t *)&v96);
      uint64_t v36 = v35;
      uint64_t v37 = (void **)(v35 + 8);
      uint64_t v38 = *(void *)(v35 + 16);
      if (v38 == *(void *)(v35 + 8)) {
        int v39 = (unsigned int *)(v35 + 28);
      }
      else {
        int v39 = (unsigned int *)(v35 + 24);
      }
      uint64_t v40 = *v39;
      if (v40)
      {
        uint64_t v74 = 8 * v40;
        uint64_t v41 = *(uint64_t **)(v35 + 16);
        while ((unint64_t)*v41 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v41;
          v74 -= 8;
          if (!v74) {
            goto LABEL_39;
          }
        }
      }
      else
      {
        uint64_t v41 = *(uint64_t **)(v35 + 16);
      }
      uint64_t v42 = (void *)(v38 + 8 * v40);
      if (v41 != v42)
      {
LABEL_117:
        uint64_t v95 = 0;
        uint64_t v79 = *v41;
        uint64_t v78 = (unint64_t *)(v41 + 1);
        uint64_t v95 = v79;
        sub_1CC5F6CF0(v93, &v95)[1] = v16;
        while (v78 != v42)
        {
          unint64_t v80 = *v78++;
          if (v80 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v41 = (uint64_t *)(v78 - 1);
            goto LABEL_117;
          }
        }
      }
LABEL_39:
      sub_1CC5F6FD8((uint64_t)a1 + 216, &v97);
      uint64_t v44 = v43;
      int v46 = *(char **)(v36 + 8);
      char v45 = *(char **)(v36 + 16);
      char v47 = (unsigned int *)(v36 + 28);
      if (v45 != v46) {
        char v47 = (unsigned int *)(v36 + 24);
      }
      uint64_t v48 = *v47;
      uint64_t v49 = *(const void ***)(v36 + 16);
      if (v48)
      {
        uint64_t v75 = 0;
        while (*(void *)&v45[v75] >= 0xFFFFFFFFFFFFFFFELL)
        {
          v75 += 8;
          if (8 * v48 == v75) {
            goto LABEL_43;
          }
        }
        uint64_t v49 = (const void **)&v45[v75];
      }
      size_t v50 = &v45[8 * v48];
      if (v49 != (const void **)v50)
      {
        uint64_t v81 = (llvm::SmallPtrSetImplBase *)(v44 + 8);
        uint64_t v82 = *(void **)(v44 + 8);
        uint64_t v83 = *(void **)(v44 + 16);
        uint64_t v84 = *v49;
        if (v83 != v82) {
          goto LABEL_137;
        }
LABEL_123:
        uint64_t v85 = *(unsigned int *)(v44 + 28);
        if (v85)
        {
          v86 = 0;
          uint64_t v87 = 8 * v85;
          unsigned int v88 = v82;
          while ((const void *)*v88 != v84)
          {
            if (*v88 == -2) {
              v86 = v88;
            }
            ++v88;
            v87 -= 8;
            if (!v87)
            {
              if (!v86) {
                goto LABEL_131;
              }
              void *v86 = v84;
              --*(_DWORD *)(v44 + 32);
              goto LABEL_133;
            }
          }
          goto LABEL_133;
        }
LABEL_131:
        if (v85 < *(_DWORD *)(v44 + 24))
        {
          *(_DWORD *)(v44 + 28) = v85 + 1;
          v82[v85] = v84;
        }
        else
        {
LABEL_137:
          unint64_t v91 = v81;
          llvm::SmallPtrSetImplBase::insert_imp_big(v81, v84);
          uint64_t v81 = v91;
        }
LABEL_133:
        uint64_t v82 = *(void **)(v44 + 8);
        uint64_t v83 = *(void **)(v44 + 16);
        BOOL v89 = (unint64_t *)(v49 + 1);
        while (v89 != (unint64_t *)v50)
        {
          unint64_t v90 = *v89++;
          uint64_t v84 = (const void *)v90;
          if (v90 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v49 = (const void **)(v89 - 1);
            goto LABEL_123;
          }
        }
        int v46 = *(char **)(v36 + 8);
        char v45 = *(char **)(v36 + 16);
      }
LABEL_43:
      if (v45 == v46) {
        goto LABEL_44;
      }
      uint64_t v76 = *(unsigned int *)(v36 + 24);
      if (v76 < 0x21 || 4 * (*(_DWORD *)(v36 + 28) - *(_DWORD *)(v36 + 32)) >= v76)
      {
        memset(v45, 255, 8 * v76);
LABEL_44:
        *(_DWORD *)(v36 + 28) = 0;
        *(_DWORD *)(v36 + 32) = 0;
      }
      else
      {
        llvm::SmallPtrSetImplBase::shrink_and_clear(v37);
      }
      if (v98 != v100) {
        free(v98);
      }
      if (v101 != v103) {
        free(v101);
      }
LABEL_49:
      if (++v4 == v92) {
        return;
      }
    }
    uint64_t v63 = 0;
    int v64 = 1;
    while (v62 != v7)
    {
      if (v63) {
        BOOL v65 = 0;
      }
      else {
        BOOL v65 = v62 == (llvm::Pass *)-2;
      }
      if (v65) {
        uint64_t v63 = v13;
      }
      unsigned int v66 = v61 + v64++;
      unsigned int v61 = v66 & v60;
      uint64_t v13 = (llvm::Pass **)(v10 + 8 * (v66 & v60));
      uint64_t v62 = *v13;
      if (*v13 == (llvm::Pass *)-1) {
        goto LABEL_113;
      }
    }
LABEL_87:
    LODWORD(v12) = *(_DWORD *)(v9 + 28);
    goto LABEL_13;
  }
}

uint64_t llvm::PMTopLevelManager::findAnalysisUsage(llvm::PMTopLevelManager *this, llvm::Pass *a2)
{
  v45[16] = *MEMORY[0x1E4F143B8];
  std::string v27 = a2;
  uint64_t v2 = *((void *)this + 79);
  uint64_t v3 = *((unsigned int *)this + 162);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = v2 + 16 * v4;
    uint64_t v6 = *(llvm::Pass **)v5;
    if (*(llvm::Pass **)v5 == a2) {
      goto LABEL_3;
    }
    int v9 = 1;
    while (v6 != (llvm::Pass *)-4096)
    {
      int v10 = v4 + v9++;
      uint64_t v4 = v10 & (v3 - 1);
      uint64_t v6 = *(llvm::Pass **)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = v2 + 16 * v4;
        goto LABEL_3;
      }
    }
  }
  uint64_t v5 = v2 + 16 * v3;
LABEL_3:
  if (v5 != v2 + 16 * v3) {
    return *(void *)(v5 + 8);
  }
  unsigned int v26 = (_DWORD *)((char *)this + 632);
  uint64_t v31 = v33;
  uint64_t v32 = 0x800000000;
  uint64_t v34 = v36;
  uint64_t v35 = 0x200000000;
  uint64_t v37 = v39;
  uint64_t v38 = 0x200000000;
  uint64_t v40 = &v42;
  uint64_t v41 = 0;
  char v42 = 0;
  (*(void (**)(llvm::Pass *, void **))(*(void *)a2 + 80))(a2, &v31);
  uint64_t v28 = v30;
  uint64_t v29 = 0x2000000000;
  sub_1CC5F20DC((uint64_t)&v28, (uint64_t)&v31);
  unint64_t v12 = sub_1CC13A6B8(v28, (uint64_t)v28 + 4 * v29);
  uint64_t v14 = *((void *)this + 65) + 8 * ((*((_DWORD *)this + 132) - 1) & v12);
  uint64_t v15 = *(void *)v14;
  uint64_t v43 = v45;
  uint64_t v44 = 0x2000000000;
  if (v15) {
    BOOL v16 = (v15 & 1) == 0;
  }
  else {
    BOOL v16 = 0;
  }
  if (!v16) {
    goto LABEL_36;
  }
  while (1)
  {
    LOBYTE(v12) = sub_1CC5F7364(v12, v15, (uint64_t)&v28, v13, (uint64_t)&v43);
    if (v12) {
      break;
    }
    LODWORD(v44) = 0;
    uint64_t v15 = *(void *)v15;
    if (v15) {
      BOOL v17 = (v15 & 1) == 0;
    }
    else {
      BOOL v17 = 0;
    }
    if (!v17)
    {
      uint64_t v15 = 0;
      goto LABEL_23;
    }
  }
  uint64_t v14 = 0;
LABEL_23:
  if (v43 != v45) {
    free(v43);
  }
  if (!v15)
  {
LABEL_36:
    *((void *)this + 77) += 176;
    uint64_t v18 = *((void *)this + 67);
    if (((v18 + 7) & 0xFFFFFFFFFFFFFFF8) - v18 + 176 > *((void *)this + 68) - v18)
    {
      unsigned int v22 = *((_DWORD *)this + 140) >> 7;
      if (v22 >= 0x1E) {
        LOBYTE(v22) = 30;
      }
      uint64_t v25 = 4096 << v22;
      uint64_t v15 = (uint64_t)operator new(4096 << v22, (std::align_val_t)8uLL);
      unsigned int v23 = *((_DWORD *)this + 140);
      if (v23 >= *((_DWORD *)this + 141)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*((void *)this + 69) + 8 * v23) = v15;
      ++*((_DWORD *)this + 140);
      *((void *)this + 68) = v15 + v25;
    }
    else
    {
      uint64_t v15 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 67) = v15 + 176;
    *(void *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = v15 + 24;
    *(void *)(v15 + 16) = 0x800000000;
    if (v32) {
      sub_1CBB08064(v15 + 8, (uint64_t)&v31);
    }
    *(void *)(v15 + 88) = v15 + 104;
    *(void *)(v15 + 96) = 0x200000000;
    if (v35) {
      sub_1CBB08064(v15 + 88, (uint64_t)&v34);
    }
    *(void *)(v15 + 120) = v15 + 136;
    *(void *)(v15 + 128) = 0x200000000;
    if (v38) {
      sub_1CBB08064(v15 + 120, (uint64_t)&v37);
    }
    *(void *)(v15 + 152) = v15 + 168;
    *(void *)(v15 + 160) = 0;
    if (v41) {
      sub_1CBB08064(v15 + 152, (uint64_t)&v40);
    }
    *(unsigned char *)(v15 + 168) = v42;
    unsigned int v19 = *((_DWORD *)this + 133) + 1;
    int v20 = *((_DWORD *)this + 132);
    if (v19 > 2 * v20)
    {
      llvm::FoldingSetBase::GrowBucketCount((uint64_t)this + 520, 2 * v20, (uint64_t)off_1F2617A90);
      uint64_t v43 = v45;
      uint64_t v44 = 0x2000000000;
      uint64_t v14 = *((void *)this + 65)
          + 8 * ((*((_DWORD *)this + 132) - 1) & sub_1CD5CF810(v24, v15, (uint64_t)&v43));
      if (v43 != v45) {
        free(v43);
      }
      unsigned int v19 = *((_DWORD *)this + 133) + 1;
    }
    *((_DWORD *)this + 133) = v19;
    uint64_t v21 = *(void *)v14;
    if (!*(void *)v14) {
      uint64_t v21 = v14 | 1;
    }
    *(void *)uint64_t v15 = v21;
    *(void *)uint64_t v14 = v15;
  }
  uint64_t v7 = v15 + 8;
  sub_1CC5F73C4(v26, &v27)[1] = v7;
  if (v28 != v30) {
    free(v28);
  }
  if (v40 != &v42) {
    free(v40);
  }
  if (v37 != v39) {
    free(v37);
  }
  if (v34 != v36) {
    free(v34);
  }
  if (v31 != v33) {
    free(v31);
  }
  return v7;
}

uint64_t llvm::PMTopLevelManager::findAnalysisPass(llvm::PMTopLevelManager *this, const void *a2)
{
  unsigned int v2 = a2 >> 4;
  if (*((unsigned char *)this + 384))
  {
    uint64_t v4 = (char *)this + 392;
    int v3 = 8;
  }
  else
  {
    int v3 = *((_DWORD *)this + 100);
    if (!v3) {
      goto LABEL_11;
    }
    uint64_t v4 = (char *)*((void *)this + 49);
  }
  int v5 = v3 - 1;
  uint64_t v6 = (v3 - 1) & (v2 ^ (a2 >> 9));
  uint64_t v7 = *(const void **)&v4[16 * v6];
  if (v7 != a2)
  {
    int v10 = 1;
    while (v7 != (const void *)-4096)
    {
      int v11 = v6 + v10++;
      uint64_t v6 = v11 & v5;
      uint64_t v7 = *(const void **)&v4[16 * v6];
      if (v7 == a2) {
        goto LABEL_5;
      }
    }
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v8 = *(void *)&v4[16 * v6 + 8];
  if (!v8)
  {
LABEL_11:
    uint64_t v12 = *((unsigned int *)this + 10);
    if (v12)
    {
      uint64_t v13 = *((void *)this + 4);
      uint64_t v14 = v13 + 8 * v12;
      while (1)
      {
        uint64_t v15 = *(void *)(*(void *)v13 + 208);
        uint64_t v16 = *(unsigned int *)(*(void *)v13 + 224);
        if (!v16) {
          goto LABEL_19;
        }
        LODWORD(v17) = (v16 - 1) & (v2 ^ (a2 >> 9));
        uint64_t v18 = v15 + 16 * v17;
        unsigned int v19 = *(const void **)v18;
        if (*(const void **)v18 != a2) {
          break;
        }
LABEL_20:
        if (v18 != v15 + 16 * v16)
        {
          uint64_t v8 = *(void *)(v18 + 8);
          if (v8) {
            return v8;
          }
        }
        v13 += 8;
        if (v13 == v14) {
          goto LABEL_25;
        }
      }
      int v20 = 1;
      while (v19 != (const void *)-4096)
      {
        int v21 = v17 + v20++;
        uint64_t v17 = v21 & (v16 - 1);
        unsigned int v19 = *(const void **)(v15 + 16 * v17);
        if (v19 == a2)
        {
          uint64_t v18 = v15 + 16 * v17;
          goto LABEL_20;
        }
      }
LABEL_19:
      uint64_t v18 = v15 + 16 * v16;
      goto LABEL_20;
    }
LABEL_25:
    uint64_t v22 = *((unsigned int *)this + 30);
    if (!v22) {
      return 0;
    }
    uint64_t v23 = *((void *)this + 14);
    uint64_t v24 = v23 + 8 * v22;
    unsigned int v25 = v2 ^ (a2 >> 9);
    while (1)
    {
      uint64_t v26 = *(void *)(*(void *)v23 + 208);
      uint64_t v27 = *(unsigned int *)(*(void *)v23 + 224);
      if (!v27) {
        goto LABEL_33;
      }
      LODWORD(v28) = (v27 - 1) & v25;
      uint64_t v29 = v26 + 16 * v28;
      uint64_t v30 = *(const void **)v29;
      if (*(const void **)v29 != a2) {
        break;
      }
LABEL_34:
      if (v29 != v26 + 16 * v27)
      {
        uint64_t v8 = *(void *)(v29 + 8);
        if (v8) {
          return v8;
        }
      }
      v23 += 8;
      if (v23 == v24) {
        return 0;
      }
    }
    int v31 = 1;
    while (v30 != (const void *)-4096)
    {
      int v32 = v28 + v31++;
      uint64_t v28 = v32 & (v27 - 1);
      uint64_t v30 = *(const void **)(v26 + 16 * v28);
      if (v30 == a2)
      {
        uint64_t v29 = v26 + 16 * v28;
        goto LABEL_34;
      }
    }
LABEL_33:
    uint64_t v29 = v26 + 16 * v27;
    goto LABEL_34;
  }
  return v8;
}

uint64_t *llvm::PMTopLevelManager::collectLastUses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1CC5F2068((uint64_t *)(a1 + 216), a3);
  if ((uint64_t *)(*(void *)(a1 + 216) + 104 * *(unsigned int *)(a1 + 232)) != result)
  {
    uint64_t v6 = (unint64_t *)result[2];
    uint64_t v7 = 24;
    if (v6 == (unint64_t *)result[1]) {
      uint64_t v7 = 28;
    }
    uint64_t v8 = *(unsigned int *)((char *)result + v7);
    int v9 = &v6[v8];
    if (v8)
    {
      uint64_t v10 = 8 * v8;
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v6;
        v10 -= 8;
        if (!v10) {
          goto LABEL_16;
        }
      }
    }
    if (v6 == v9)
    {
LABEL_16:
      uint64_t v11 = 0;
      char v15 = 1;
      uint64_t v6 = v9;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = v6;
LABEL_11:
      ++v11;
      uint64_t v13 = v12 + 1;
      while (v13 != v9)
      {
        unint64_t v14 = *v13++;
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v12 = v13 - 1;
          goto LABEL_11;
        }
      }
      char v15 = 0;
    }
    uint64_t v16 = *(unsigned int *)(a2 + 8);
    if (v11 + v16 > (unint64_t)*(unsigned int *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v15 & 1) == 0)
    {
      uint64_t v17 = (unint64_t *)(*(void *)a2 + 8 * v16);
      unint64_t v18 = *v6;
LABEL_20:
      *uint64_t v17 = v18;
      unsigned int v19 = v6 + 1;
      while (v19 != v9)
      {
        unint64_t v20 = *v19++;
        unint64_t v18 = v20;
        if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          ++v17;
          uint64_t v6 = v19 - 1;
          goto LABEL_20;
        }
      }
    }
    *(_DWORD *)(a2 + 8) = v16 + v11;
  }
  return result;
}

uint64_t *sub_1CC5F2068(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 4);
  if (!v3) {
    return (uint64_t *)(v2 + 104 * v3);
  }
  unsigned int v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t result = (uint64_t *)(v2 + 104 * v4);
  uint64_t v6 = *result;
  if (*result != a2)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & (v3 - 1);
      uint64_t result = (uint64_t *)(v2 + 104 * v4);
      uint64_t v6 = *result;
      if (*result == a2) {
        return result;
      }
    }
    return (uint64_t *)(v2 + 104 * v3);
  }
  return result;
}

uint64_t sub_1CC5F20DC(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v2) = *(unsigned __int8 *)(a2 + 160);
  unsigned int v3 = *(_DWORD *)(result + 12);
  unsigned int v4 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v4;
  if (v4 >= v3) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v4) = *(_DWORD *)(a2 + 8);
  unsigned int v5 = *(_DWORD *)(result + 12);
  unsigned int v6 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v6;
  if (v6 >= v5) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v6) = 0;
  unsigned int v7 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v7;
  uint64_t v8 = *(unsigned int *)(a2 + 8);
  if (v8)
  {
    int v9 = *(uint64_t **)a2;
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9;
      if (v7 >= *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v7) = v11;
      unsigned int v12 = *(_DWORD *)(result + 12);
      unsigned int v13 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v13;
      if (v13 >= v12) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v13) = HIDWORD(v11);
      unsigned int v7 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v7;
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  if (v7 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v7) = *(_DWORD *)(a2 + 88);
  unsigned int v14 = *(_DWORD *)(result + 12);
  unsigned int v15 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v15;
  if (v15 >= v14) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v15) = 0;
  unsigned int v16 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v16;
  uint64_t v17 = *(unsigned int *)(a2 + 88);
  if (v17)
  {
    int v31 = *(uint64_t **)(a2 + 80);
    uint64_t v32 = 8 * v17;
    do
    {
      uint64_t v33 = *v31;
      if (v16 >= *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v16) = v33;
      unsigned int v34 = *(_DWORD *)(result + 12);
      unsigned int v35 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v35;
      if (v35 >= v34) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v35) = HIDWORD(v33);
      unsigned int v16 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v16;
      ++v31;
      v32 -= 8;
    }
    while (v32);
  }
  if (v16 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v16) = *(_DWORD *)(a2 + 120);
  unsigned int v18 = *(_DWORD *)(result + 12);
  unsigned int v19 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v19;
  if (v19 >= v18) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v19) = 0;
  unsigned int v20 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v20;
  uint64_t v21 = *(unsigned int *)(a2 + 120);
  if (v21)
  {
    uint64_t v22 = *(uint64_t **)(a2 + 112);
    uint64_t v23 = 8 * v21;
    do
    {
      uint64_t v24 = *v22;
      if (v20 >= *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v20) = v24;
      unsigned int v25 = *(_DWORD *)(result + 12);
      unsigned int v26 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v26;
      if (v26 >= v25) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v26) = HIDWORD(v24);
      unsigned int v20 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v20;
      ++v22;
      v23 -= 8;
    }
    while (v23);
  }
  if (v20 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v20) = *(_DWORD *)(a2 + 152);
  unsigned int v27 = *(_DWORD *)(result + 12);
  unsigned int v28 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v28;
  if (v28 >= v27) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)result + 4 * v28) = 0;
  unsigned int v29 = *(_DWORD *)(result + 8) + 1;
  *(_DWORD *)(result + 8) = v29;
  uint64_t v30 = *(unsigned int *)(a2 + 152);
  if (v30)
  {
    uint64_t v36 = *(uint64_t **)(a2 + 144);
    uint64_t v37 = 8 * v30;
    do
    {
      uint64_t v38 = *v36;
      if (v29 >= *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v29) = v38;
      unsigned int v39 = *(_DWORD *)(result + 12);
      unsigned int v40 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v40;
      if (v40 >= v39) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)result + 4 * v40) = HIDWORD(v38);
      unsigned int v29 = *(_DWORD *)(result + 8) + 1;
      *(_DWORD *)(result + 8) = v29;
      ++v36;
      v37 -= 8;
    }
    while (v37);
  }
  return result;
}

llvm *llvm::PMTopLevelManager::schedulePass(int32x2_t *this, llvm::Pass *a2)
{
  uint64_t v127 = a2;
  unsigned int v4 = this + 1;
  unsigned int v5 = (void *)(*(uint64_t (**)(llvm::Pass *, int32x2_t *))(*(void *)a2 + 64))(a2, this + 1);
  uint64_t v6 = *((void *)a2 + 2);
  v122[0] = v6;
  v111[3] = this + 82;
  __int32 v7 = this[84].i32[0];
  if (v7)
  {
    int32x2_t v8 = this[82];
    __int32 v9 = v7 - 1;
    unsigned int v10 = v9 & ((v6 >> 4) ^ (v6 >> 9));
    uint64_t v11 = (void *)(*(void *)&v8 + 16 * v10);
    uint64_t v12 = *v11;
    if (*v11 == v6) {
      goto LABEL_11;
    }
    unsigned int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        unsigned int v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      uint64_t v11 = (void *)(*(void *)&v8 + 16 * v10);
      uint64_t v12 = *v11;
      if (*v11 == v6) {
        goto LABEL_11;
      }
    }
    if (v13) {
      unsigned int v103 = v13;
    }
    else {
      unsigned int v103 = v11;
    }
  }
  else
  {
    unsigned int v103 = 0;
  }
  unsigned int v5 = sub_1CC5F7650((_DWORD *)v111[3], (uint64_t)v122, v122, v103);
  uint64_t v11 = v5;
  *unsigned int v5 = v122[0];
  v5[1] = 0;
LABEL_11:
  uint64_t v17 = v11[1];
  if (v17) {
    goto LABEL_12;
  }
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v5);
  uint64_t v95 = v122[0];
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)PassRegistry);
  int v96 = *(_DWORD *)(PassRegistry + 192);
  if (!v96) {
    goto LABEL_147;
  }
  uint64_t v97 = *(void *)(PassRegistry + 176);
  unsigned int v98 = v96 - 1;
  uint64_t v99 = (v96 - 1) & ((v95 >> 4) ^ (v95 >> 9));
  uint64_t v100 = *(void *)(v97 + 16 * v99);
  if (v100 != v95)
  {
    int v101 = 1;
    while (v100 != -4096)
    {
      int v102 = v99 + v101++;
      uint64_t v99 = v102 & v98;
      uint64_t v100 = *(void *)(v97 + 16 * v99);
      if (v100 == v95) {
        goto LABEL_128;
      }
    }
LABEL_147:
    v111[1] = v4;
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
    v111[0] = 0;
    v11[1] = 0;
    goto LABEL_130;
  }
LABEL_128:
  uint64_t v17 = *(void *)(v97 + 16 * v99 + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
  v11[1] = v17;
  if (v17)
  {
LABEL_12:
    if (*(unsigned char *)(v17 + 41)
      && llvm::PMTopLevelManager::findAnalysisPass((llvm::PMTopLevelManager *)this, *((const void **)a2 + 2)))
    {
      v122[0] = 0;
      if (sub_1CBA0E618((uint64_t)&this[79], &v127, v122))
      {
        *(void *)v122[0] = -8192;
        this[80] = vadd_s32(this[80], (int32x2_t)0x1FFFFFFFFLL);
      }
      uint64_t result = v127;
      if (v127) {
        return (llvm *)(*(uint64_t (**)(llvm::Pass *))(*(void *)v127 + 8))(v127);
      }
      return result;
    }
    v111[0] = v17;
    v111[1] = v4;
    LODWORD(v110[5]) = 0;
    goto LABEL_19;
  }
  v111[0] = 0;
  v111[1] = v4;
LABEL_130:
  LODWORD(v110[5]) = 1;
LABEL_19:
  uint64_t AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage((llvm::PMTopLevelManager *)this, a2);
  do
  {
    uint64_t v20 = *(unsigned int *)(AnalysisUsage + 8);
    if (!v20) {
      break;
    }
    char v21 = 0;
    uint64_t v22 = *(const void ***)AnalysisUsage;
    uint64_t v23 = *(void *)AnalysisUsage + 8 * v20;
    do
    {
      uint64_t v24 = *v22;
      uint64_t AnalysisPass = (void *)llvm::PMTopLevelManager::findAnalysisPass((llvm::PMTopLevelManager *)this, *v22);
      if (AnalysisPass) {
        goto LABEL_39;
      }
      v122[0] = v24;
      __int32 v26 = this[84].i32[0];
      if (!v26)
      {
        size_t v50 = 0;
LABEL_51:
        uint64_t AnalysisPass = sub_1CC5F7650((_DWORD *)v111[3], (uint64_t)v122, v122, v50);
        uint64_t v30 = AnalysisPass;
        *uint64_t AnalysisPass = v122[0];
        AnalysisPass[1] = 0;
        goto LABEL_33;
      }
      int32x2_t v27 = this[82];
      __int32 v28 = v26 - 1;
      unsigned int v29 = v28 & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v30 = (void *)(*(void *)&v27 + 16 * v29);
      int v31 = (const void *)*v30;
      if ((const void *)*v30 != v24)
      {
        uint64_t v32 = 0;
        int v33 = 1;
        while (v31 != (const void *)-4096)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == (const void *)-8192;
          }
          if (v34) {
            uint64_t v32 = v30;
          }
          unsigned int v35 = v29 + v33++;
          unsigned int v29 = v35 & v28;
          uint64_t v30 = (void *)(*(void *)&v27 + 16 * v29);
          int v31 = (const void *)*v30;
          if ((const void *)*v30 == v24) {
            goto LABEL_33;
          }
        }
        if (v32) {
          size_t v50 = v32;
        }
        else {
          size_t v50 = v30;
        }
        goto LABEL_51;
      }
LABEL_33:
      uint64_t v36 = v30[1];
      if (!v36)
      {
        atomic_ullong v40 = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)AnalysisPass);
        uint64_t v41 = v122[0];
        std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)v40);
        int v42 = *(_DWORD *)(v40 + 192);
        if (!v42) {
          goto LABEL_64;
        }
        uint64_t v43 = *(void *)(v40 + 176);
        unsigned int v44 = v42 - 1;
        uint64_t v45 = (v42 - 1) & ((v41 >> 4) ^ (v41 >> 9));
        uint64_t v46 = *(void *)(v43 + 16 * v45);
        if (v46 != v41)
        {
          int v47 = 1;
          while (v46 != -4096)
          {
            int v48 = v45 + v47++;
            uint64_t v45 = v48 & v44;
            uint64_t v46 = *(void *)(v43 + 16 * v45);
            if (v46 == v41) {
              goto LABEL_46;
            }
          }
LABEL_64:
          std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v40);
          v30[1] = 0;
LABEL_65:
          uint64_t v59 = llvm::dbgs(v49);
          int v60 = v59;
          uint64_t v61 = *((void *)v59 + 4);
          if ((unint64_t)(*((void *)v59 + 3) - v61) > 5)
          {
            *(_WORD *)(v61 + 4) = 10016;
            *(_DWORD *)uint64_t v61 = 1936941392;
            *((void *)v59 + 4) += 6;
          }
          else
          {
            llvm::raw_ostream::write(v59, "Pass '", 6uLL);
          }
          uint64_t v63 = (const void *)(*(uint64_t (**)(llvm::Pass *))(*(void *)a2 + 16))(a2);
          size_t v64 = v62;
          BOOL v65 = (llvm::raw_ostream *)*((void *)v60 + 4);
          if (v62 <= *((void *)v60 + 3) - (void)v65)
          {
            if (v62)
            {
              memcpy(v65, v63, v62);
              BOOL v65 = (llvm::raw_ostream *)(*((void *)v60 + 4) + v64);
              *((void *)v60 + 4) = v65;
            }
          }
          else
          {
            llvm::raw_ostream::write(v60, (const char *)v63, v62);
            BOOL v65 = (llvm::raw_ostream *)*((void *)v60 + 4);
          }
          if (*((void *)v60 + 3) - (void)v65 > 0x14uLL)
          {
            qmemcpy(v65, "' is not initialized.", 21);
            unsigned int v66 = (unsigned char *)(*((void *)v60 + 4) + 21);
            *((void *)v60 + 4) = v66;
          }
          else
          {
            BOOL v65 = llvm::raw_ostream::write(v60, "' is not initialized.", 0x15uLL);
            unsigned int v66 = (unsigned char *)*((void *)v60 + 4);
          }
          if (*((unsigned char **)v60 + 3) == v66)
          {
            BOOL v65 = llvm::raw_ostream::write(v60, "\n", 1uLL);
          }
          else
          {
            *unsigned int v66 = 10;
            ++*((void *)v60 + 4);
          }
          uint64_t v67 = llvm::dbgs(v65);
          uint64_t v68 = (void *)*((void *)v67 + 4);
          if (*((void *)v67 + 3) - (void)v68 > 0x2AuLL)
          {
            qmemcpy(v68, "Verify if there is a pass dependency cycle.", 43);
            uint64_t v69 = (unsigned char *)(*((void *)v67 + 4) + 43);
            *((void *)v67 + 4) = v69;
          }
          else
          {
            uint64_t v67 = llvm::raw_ostream::write(v67, "Verify if there is a pass dependency cycle.", 0x2BuLL);
            uint64_t v69 = (unsigned char *)*((void *)v67 + 4);
          }
          if (*((unsigned char **)v67 + 3) == v69)
          {
            uint64_t v67 = llvm::raw_ostream::write(v67, "\n", 1uLL);
          }
          else
          {
            unsigned char *v69 = 10;
            ++*((void *)v67 + 4);
          }
          unsigned int v70 = llvm::dbgs(v67);
          uint64_t v71 = (_OWORD *)*((void *)v70 + 4);
          if (*((void *)v70 + 3) - (void)v71 > 0xFuLL)
          {
            *uint64_t v71 = *(_OWORD *)"Required Passes:";
            uint64_t v72 = (unsigned char *)(*((void *)v70 + 4) + 16);
            *((void *)v70 + 4) = v72;
          }
          else
          {
            unsigned int v70 = llvm::raw_ostream::write(v70, "Required Passes:", 0x10uLL);
            uint64_t v72 = (unsigned char *)*((void *)v70 + 4);
          }
          if (*((unsigned char **)v70 + 3) == v72)
          {
            llvm::raw_ostream::write(v70, "\n", 1uLL);
          }
          else
          {
            unsigned char *v72 = 10;
            ++*((void *)v70 + 4);
          }
          unint64_t v73 = *(const void ***)AnalysisUsage;
          uint64_t v74 = 8 * *(unsigned int *)(AnalysisUsage + 8) - 8;
          qmemcpy(v111, "Registrythe global PassR- Corruption of ", sizeof(v111));
          qmemcpy(v110, "Possible causes:pass not found! Error: Required  missing macros)uration (e.g.: m- Pass misconfig", sizeof(v110));
          while (2)
          {
            uint64_t v75 = (llvm *)llvm::PMTopLevelManager::findAnalysisPass((llvm::PMTopLevelManager *)this, *v73);
            uint64_t v76 = llvm::dbgs(v75);
            uint64_t v77 = v76;
            uint64_t v79 = (unsigned char *)*((void *)v76 + 3);
            uint64_t v78 = (unsigned char *)*((void *)v76 + 4);
            if (v75)
            {
              if (v79 == v78)
              {
                llvm::raw_ostream::write(v76, "\t", 1uLL);
              }
              else
              {
                *uint64_t v78 = 9;
                ++*((void *)v76 + 4);
              }
              unint64_t v90 = (const void *)(*(uint64_t (**)(llvm *))(*(void *)v75 + 16))(v75);
              size_t v91 = v89;
              int v92 = (unsigned char *)*((void *)v77 + 4);
              if (v89 <= *((void *)v77 + 3) - (void)v92)
              {
                if (v89)
                {
                  memcpy(v92, v90, v89);
                  int v92 = (unsigned char *)(*((void *)v77 + 4) + v91);
                  *((void *)v77 + 4) = v92;
                }
              }
              else
              {
                llvm::raw_ostream::write(v77, (const char *)v90, v89);
                int v92 = (unsigned char *)*((void *)v77 + 4);
              }
              if (*((unsigned char **)v77 + 3) != v92)
              {
                *int v92 = 10;
                ++*((void *)v77 + 4);
                goto LABEL_114;
              }
              uint64_t v85 = v77;
            }
            else
            {
              if (v79 == v78)
              {
                uint64_t v76 = llvm::raw_ostream::write(v76, "\t", 1uLL);
                uint64_t v93 = (_OWORD *)*((void *)v77 + 4);
              }
              else
              {
                *uint64_t v78 = 9;
                uint64_t v93 = (_OWORD *)(*((void *)v76 + 4) + 1);
                *((void *)v76 + 4) = v93;
              }
              if (*((void *)v77 + 3) - (void)v93 > 0x2FuLL)
              {
                _OWORD *v93 = v110[2];
                v93[1] = v110[1];
                v93[2] = v110[0];
                unint64_t v80 = (unsigned char *)(*((void *)v77 + 4) + 48);
                *((void *)v77 + 4) = v80;
              }
              else
              {
                uint64_t v76 = llvm::raw_ostream::write(v77, "Error: Required pass not found! Possible causes:", 0x30uLL);
                unint64_t v80 = (unsigned char *)*((void *)v77 + 4);
              }
              if (*((unsigned char **)v77 + 3) == v80)
              {
                uint64_t v76 = llvm::raw_ostream::write(v77, "\n", 1uLL);
              }
              else
              {
                *unint64_t v80 = 10;
                ++*((void *)v77 + 4);
              }
              uint64_t v81 = llvm::dbgs(v76);
              uint64_t v82 = (_WORD *)*((void *)v81 + 4);
              if (*((void *)v81 + 3) - (void)v82 > 1uLL)
              {
                _WORD *v82 = 2313;
                uint64_t v83 = (_OWORD *)(*((void *)v81 + 4) + 2);
                *((void *)v81 + 4) = v83;
              }
              else
              {
                uint64_t v81 = llvm::raw_ostream::write(v81, "\t\t", 2uLL);
                uint64_t v83 = (_OWORD *)*((void *)v81 + 4);
              }
              if (*((void *)v81 + 3) - (void)v83 > 0x2DuLL)
              {
                _OWORD *v83 = v110[5];
                v83[1] = v110[4];
                *(_OWORD *)((char *)v83 + 30) = v110[3];
                uint64_t v84 = (unsigned char *)(*((void *)v81 + 4) + 46);
                *((void *)v81 + 4) = v84;
              }
              else
              {
                uint64_t v81 = llvm::raw_ostream::write(v81, "- Pass misconfiguration (e.g.: missing macros)", 0x2EuLL);
                uint64_t v84 = (unsigned char *)*((void *)v81 + 4);
              }
              if (*((unsigned char **)v81 + 3) == v84)
              {
                uint64_t v81 = llvm::raw_ostream::write(v81, "\n", 1uLL);
              }
              else
              {
                *uint64_t v84 = 10;
                ++*((void *)v81 + 4);
              }
              uint64_t v85 = llvm::dbgs(v81);
              v86 = (_WORD *)*((void *)v85 + 4);
              if (*((void *)v85 + 3) - (void)v86 > 1uLL)
              {
                _WORD *v86 = 2313;
                uint64_t v87 = *((void *)v85 + 4) + 2;
                *((void *)v85 + 4) = v87;
              }
              else
              {
                uint64_t v85 = llvm::raw_ostream::write(v85, "\t\t", 2uLL);
                uint64_t v87 = *((void *)v85 + 4);
              }
              if ((unint64_t)(*((void *)v85 + 3) - v87) > 0x26)
              {
                *(_OWORD *)uint64_t v87 = *(_OWORD *)&v111[3];
                *(_OWORD *)(v87 + 16) = *(_OWORD *)&v111[1];
                *(void *)(v87 + 31) = v111[0];
                unsigned int v88 = (unsigned char *)(*((void *)v85 + 4) + 39);
                *((void *)v85 + 4) = v88;
              }
              else
              {
                uint64_t v85 = llvm::raw_ostream::write(v85, "- Corruption of the global PassRegistry", 0x27uLL);
                unsigned int v88 = (unsigned char *)*((void *)v85 + 4);
              }
              if (*((unsigned char **)v85 + 3) != v88)
              {
                unsigned char *v88 = 10;
                ++*((void *)v85 + 4);
LABEL_114:
                ++v73;
                v74 -= 8;
                continue;
              }
            }
            break;
          }
          llvm::raw_ostream::write(v85, "\n", 1uLL);
          goto LABEL_114;
        }
LABEL_46:
        uint64_t v36 = *(void *)(v43 + 16 * v45 + 8);
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)v40);
        v30[1] = v36;
        if (!v36) {
          goto LABEL_65;
        }
      }
      uint64_t v37 = (llvm::Pass *)(*(uint64_t (**)(void))(v36 + 72))();
      int v38 = (*(uint64_t (**)(llvm::Pass *))(*(void *)a2 + 72))(a2);
      if (v38 == (*(unsigned int (**)(llvm::Pass *))(*(void *)v37 + 72))(v37))
      {
        llvm::PMTopLevelManager::schedulePass((llvm::PMTopLevelManager *)this, v37);
      }
      else
      {
        int v39 = (*(uint64_t (**)(llvm::Pass *))(*(void *)a2 + 72))(a2);
        if (v39 <= (*(int (**)(llvm::Pass *))(*(void *)v37 + 72))(v37))
        {
          (*(void (**)(llvm::Pass *))(*(void *)v37 + 8))(v37);
        }
        else
        {
          llvm::PMTopLevelManager::schedulePass((llvm::PMTopLevelManager *)this, v37);
          char v21 = 1;
        }
      }
LABEL_39:
      ++v22;
    }
    while (v22 != (const void **)v23);
  }
  while ((v21 & 1) != 0);
  if ((*(uint64_t (**)(llvm::Pass *))(*(void *)a2 + 104))(a2))
  {
    (**(void (***)(int32x2_t *))this)(this);
    operator new();
  }
  if ((v110[5] & 1) == 0 && !*(unsigned char *)(v111[0] + 41))
  {
    BOOL shouldPrintBeforePass = llvm::shouldPrintBeforePass(*(void **)(v111[0] + 16), *(void *)(v111[0] + 24));
    if (shouldPrintBeforePass)
    {
      unsigned int v104 = v127;
      uint64_t v105 = llvm::dbgs((llvm *)shouldPrintBeforePass);
      uint64_t v106 = (*(uint64_t (**)(llvm::Pass *))(*(void *)v104 + 16))(v104);
      __int16 v115 = 1283;
      v112[0] = "*** IR Dump Before ";
      uint64_t v113 = v106;
      uint64_t v114 = v107;
      v116[0] = v112;
      v117 = " (";
      __int16 v118 = 770;
      v119[0] = v116;
      long long v120 = *(_OWORD *)(v111[0] + 16);
      __int16 v121 = 1282;
      v122[0] = v119;
      v123 = ") ***";
      __int16 v124 = 770;
      llvm::Twine::str((llvm::Twine *)v122, v125);
      uint64_t v108 = (*(uint64_t (**)(llvm::Pass *, llvm *, void **))(*(void *)v104 + 48))(v104, v105, v125);
      if (v126 < 0) {
        operator delete(v125[0]);
      }
      uint64_t v109 = (*(uint64_t (**)(int32x2_t *))(*(void *)this + 8))(this);
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)v108 + 56))(v108, v111[1], v109);
    }
  }
  unsigned int v52 = v127;
  uint64_t v53 = (*(uint64_t (**)(int32x2_t *))(*(void *)this + 8))(this);
  uint64_t result = (llvm *)(*(uint64_t (**)(llvm::Pass *, void, uint64_t))(*(void *)v52 + 56))(v52, v111[1], v53);
  if ((v110[5] & 1) == 0 && !*(unsigned char *)(v111[0] + 41))
  {
    uint64_t result = (llvm *)llvm::shouldPrintAfterPass(*(void **)(v111[0] + 16), *(void *)(v111[0] + 24));
    if (result)
    {
      BOOL v54 = llvm::dbgs(result);
      uint64_t v55 = (*(uint64_t (**)(llvm::Pass *))(*(void *)v52 + 16))(v52);
      __int16 v115 = 1283;
      v112[0] = "*** IR Dump After ";
      uint64_t v113 = v55;
      uint64_t v114 = v56;
      v116[0] = v112;
      v117 = " (";
      __int16 v118 = 770;
      v119[0] = v116;
      long long v120 = *(_OWORD *)(v111[0] + 16);
      __int16 v121 = 1282;
      v122[0] = v119;
      v123 = ") ***";
      __int16 v124 = 770;
      llvm::Twine::str((llvm::Twine *)v122, v125);
      uint64_t v57 = (*(uint64_t (**)(llvm::Pass *, llvm *, void **))(*(void *)v52 + 48))(v52, v54, v125);
      if (v126 < 0) {
        operator delete(v125[0]);
      }
      uint64_t v58 = (*(uint64_t (**)(int32x2_t *))(*(void *)this + 8))(this);
      return (llvm *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v57 + 56))(v57, v111[1], v58);
    }
  }
  return result;
}

uint64_t llvm::PMTopLevelManager::findAnalysisPassInfo(llvm::PMTopLevelManager *this, const void *a2)
{
  uint64_t v24 = a2;
  int v2 = *((_DWORD *)this + 168);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 82);
    int v4 = v2 - 1;
    unsigned int v5 = v4 & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (llvm::PMTopLevelManager *)(v3 + 16 * v5);
    __int32 v7 = *(const void **)v6;
    if (*(const void **)v6 == a2) {
      goto LABEL_11;
    }
    int32x2_t v8 = 0;
    int v9 = 1;
    while (v7 != (const void *)-4096)
    {
      if (v8) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v7 == (const void *)-8192;
      }
      if (v10) {
        int32x2_t v8 = v6;
      }
      unsigned int v11 = v5 + v9++;
      unsigned int v5 = v11 & v4;
      uint64_t v6 = (llvm::PMTopLevelManager *)(v3 + 16 * v5);
      __int32 v7 = *(const void **)v6;
      if (*(const void **)v6 == a2) {
        goto LABEL_11;
      }
    }
    if (v8) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v6;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  this = (llvm::PMTopLevelManager *)sub_1CC5F7650((_DWORD *)this + 164, (uint64_t)&v24, &v24, v23);
  uint64_t v6 = this;
  *(void *)this = v24;
  *((void *)this + 1) = 0;
LABEL_11:
  uint64_t v12 = *((void *)v6 + 1);
  if (!v12)
  {
    atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
    BOOL v15 = v24;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)PassRegistry);
    int v16 = *(_DWORD *)(PassRegistry + 192);
    if (v16)
    {
      uint64_t v17 = *(void *)(PassRegistry + 176);
      unsigned int v18 = v16 - 1;
      uint64_t v19 = (v16 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      uint64_t v20 = *(const void **)(v17 + 16 * v19);
      if (v20 == v15)
      {
LABEL_18:
        uint64_t v12 = *(void *)(v17 + 16 * v19 + 8);
LABEL_19:
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
        *((void *)v6 + 1) = v12;
        return v12;
      }
      int v21 = 1;
      while (v20 != (const void *)-4096)
      {
        int v22 = v19 + v21++;
        uint64_t v19 = v22 & v18;
        uint64_t v20 = *(const void **)(v17 + 16 * v19);
        if (v20 == v15) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v12 = 0;
    goto LABEL_19;
  }
  return v12;
}

void llvm::PMDataManager::initializeAnalysisImpl(llvm::PMTopLevelManager **this, const void ****a2)
{
  uint64_t AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(this[1], (llvm::Pass *)a2);
  uint64_t v5 = *(unsigned int *)(AnalysisUsage + 8);
  if (v5)
  {
    uint64_t v6 = *(const void ***)AnalysisUsage;
    uint64_t v7 = *(void *)AnalysisUsage + 8 * v5;
    do
    {
      int32x2_t v8 = *v6;
      uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)this, *v6, 1);
      if (AnalysisPass)
      {
        BOOL v10 = a2[1];
        uint64_t v12 = *v10;
        unsigned int v11 = v10[1];
        if (*v10 == v11)
        {
LABEL_13:
          int v14 = 0;
        }
        else
        {
          unsigned int v13 = *v10;
          while (*v13 != v8)
          {
            v13 += 2;
            if (v13 == v11) {
              goto LABEL_13;
            }
          }
          int v14 = v13[1];
        }
        if (v14 != (const void *)AnalysisPass)
        {
          unint64_t v15 = (unint64_t)v10[2];
          if ((unint64_t)v11 >= v15)
          {
            unsigned int v25 = (char **)a2[1];
            __p = *v10;
            uint64_t v17 = v10[1];
            uint64_t v18 = ((char *)v11 - (char *)v12) >> 4;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 60) {
              abort();
            }
            uint64_t v20 = AnalysisPass;
            if ((uint64_t)(v15 - (void)v12) >> 3 > v19) {
              unint64_t v19 = (uint64_t)(v15 - (void)v12) >> 3;
            }
            if (v15 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
            }
            unint64_t v24 = v19;
            if (v19)
            {
              if (v19 >> 60) {
                sub_1CB833614();
              }
              int v21 = (char *)operator new(16 * v19);
            }
            else
            {
              int v21 = 0;
            }
            int v22 = &v21[16 * v18];
            *(void *)int v22 = v8;
            *((void *)v22 + 1) = v20;
            if (__p == v17)
            {
              uint64_t v23 = &v21[16 * v18];
            }
            else
            {
              uint64_t v23 = &v21[16 * v18];
              do
              {
                *((_OWORD *)v23 - 1) = *((_OWORD *)v17 - 1);
                v23 -= 16;
                v17 -= 2;
              }
              while (v17 != __p);
              __p = (const void **)*v25;
            }
            int v16 = (const void **)(v22 + 16);
            *unsigned int v25 = v23;
            v25[1] = v22 + 16;
            v25[2] = &v21[16 * v24];
            if (__p) {
              operator delete(__p);
            }
            BOOL v10 = (const void ***)v25;
          }
          else
          {
            *unsigned int v11 = v8;
            v11[1] = (const void *)AnalysisPass;
            int v16 = v11 + 2;
          }
          v10[1] = v16;
        }
      }
      ++v6;
    }
    while (v6 != (const void **)v7);
  }
}

void llvm::PMDataManager::recordAvailableAnalysis(llvm::PMDataManager *this, llvm::Pass *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v5 = (char *)this + 208;
  uint64_t v4 = *((void *)this + 26);
  unsigned int v6 = *((_DWORD *)this + 56);
  unsigned int v7 = v3 >> 4;
  if (v6)
  {
    unsigned int v8 = v6 - 1;
    unsigned int v9 = (v7 ^ (v3 >> 9)) & (v6 - 1);
    BOOL v10 = (uint64_t *)(v4 + 16 * v9);
    uint64_t v11 = *v10;
    if (v3 == *v10) {
      goto LABEL_19;
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        uint64_t v12 = v10;
      }
      unsigned int v15 = v9 + v13++;
      unsigned int v9 = v15 & v8;
      BOOL v10 = (uint64_t *)(v4 + 16 * (v15 & v8));
      uint64_t v11 = *v10;
      if (v3 == *v10) {
        goto LABEL_19;
      }
    }
    if (v12) {
      BOOL v10 = v12;
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  int v16 = *((_DWORD *)this + 54);
  if (4 * v16 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_46;
  }
  if (v6 + ~v16 - *((_DWORD *)this + 55) <= v6 >> 3)
  {
LABEL_46:
    uint64_t v41 = this;
    uint64_t v42 = v3;
    sub_1CBFB070C((uint64_t)this + 208, v6);
    unsigned int v44 = 0;
    sub_1CBF8BDAC(*((void *)v41 + 26), *((_DWORD *)v41 + 56), v42, &v44);
    this = v41;
    uint64_t v3 = v42;
    BOOL v10 = v44;
  }
  ++*((_DWORD *)this + 54);
  if (*v10 != -4096) {
    --*((_DWORD *)this + 55);
  }
  uint64_t *v10 = v3;
  v10[1] = 0;
LABEL_19:
  v10[1] = (uint64_t)a2;
  uint64_t v17 = *((void *)this + 1);
  unsigned int v44 = (uint64_t *)v3;
  int v18 = *(_DWORD *)(v17 + 672);
  if (v18)
  {
    uint64_t v19 = *(void *)(v17 + 656);
    int v20 = v18 - 1;
    unsigned int v21 = v20 & (v7 ^ (v3 >> 9));
    int v22 = (llvm::PMDataManager *)(v19 + 16 * v21);
    uint64_t v23 = *(void *)v22;
    if (*(void *)v22 == v3) {
      goto LABEL_29;
    }
    unint64_t v24 = 0;
    int v25 = 1;
    while (v23 != -4096)
    {
      if (v24) {
        BOOL v26 = 0;
      }
      else {
        BOOL v26 = v23 == -8192;
      }
      if (v26) {
        unint64_t v24 = v22;
      }
      unsigned int v27 = v21 + v25++;
      unsigned int v21 = v27 & v20;
      int v22 = (llvm::PMDataManager *)(v19 + 16 * v21);
      uint64_t v23 = *(void *)v22;
      if (*(void *)v22 == v3) {
        goto LABEL_29;
      }
    }
    if (v24) {
      atomic_ullong v40 = v24;
    }
    else {
      atomic_ullong v40 = v22;
    }
  }
  else
  {
    atomic_ullong v40 = 0;
  }
  this = (llvm::PMDataManager *)sub_1CC5F7650((_DWORD *)(v17 + 656), (uint64_t)&v44, &v44, v40);
  int v22 = this;
  *(void *)this = v44;
  *((void *)this + 1) = 0;
LABEL_29:
  uint64_t v28 = *((void *)v22 + 1);
  if (!v28)
  {
    atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
    uint64_t v32 = (uint64_t)v44;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)PassRegistry);
    int v33 = *(_DWORD *)(PassRegistry + 192);
    if (v33)
    {
      uint64_t v34 = *(void *)(PassRegistry + 176);
      unsigned int v35 = v33 - 1;
      uint64_t v36 = (v33 - 1) & ((v32 >> 4) ^ (v32 >> 9));
      uint64_t v37 = *(void *)(v34 + 16 * v36);
      if (v37 == v32)
      {
LABEL_38:
        uint64_t v28 = *(void *)(v34 + 16 * v36 + 8);
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
        *((void *)v22 + 1) = v28;
        if (!v28) {
          return;
        }
        goto LABEL_30;
      }
      int v38 = 1;
      while (v37 != -4096)
      {
        int v39 = v36 + v38++;
        uint64_t v36 = v39 & v35;
        uint64_t v37 = *(void *)(v34 + 16 * v36);
        if (v37 == v32) {
          goto LABEL_38;
        }
      }
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
    *((void *)v22 + 1) = 0;
    return;
  }
LABEL_30:
  unsigned int v29 = *(uint64_t **)(v28 + 48);
  uint64_t v30 = *(uint64_t **)(v28 + 56);
  while (v29 != v30)
  {
    uint64_t v43 = *v29++;
    unsigned int v44 = *(uint64_t **)(v43 + 32);
    sub_1CD5CFB60((uint64_t)v5, (uint64_t *)&v44)[1] = a2;
  }
}

uint64_t llvm::PMDataManager::findAnalysisPass(llvm::PMDataManager *this, const void *a2, int a3)
{
  uint64_t v3 = *((void *)this + 26);
  uint64_t v4 = *((unsigned int *)this + 56);
  unsigned int v5 = a2 >> 4;
  if (v4)
  {
    LODWORD(v6) = (v4 - 1) & (v5 ^ (a2 >> 9));
    uint64_t v7 = v3 + 16 * v6;
    unsigned int v8 = *(const void **)v7;
    if (*(const void **)v7 == a2) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != (const void *)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v4 - 1);
      unsigned int v8 = *(const void **)(v3 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = v3 + 16 * v6;
        goto LABEL_8;
      }
    }
  }
  uint64_t v7 = v3 + 16 * v4;
LABEL_8:
  if (v7 != v3 + 16 * v4) {
    return *(void *)(v7 + 8);
  }
  if (!a3) {
    return 0;
  }
  uint64_t v12 = *((void *)this + 1);
  if (*(unsigned char *)(v12 + 384))
  {
    uint64_t v14 = v12 + 392;
    int v13 = 8;
  }
  else
  {
    int v13 = *(_DWORD *)(v12 + 400);
    if (!v13) {
      goto LABEL_22;
    }
    uint64_t v14 = *(void *)(v12 + 392);
  }
  int v15 = v13 - 1;
  uint64_t v16 = (v13 - 1) & (v5 ^ (a2 >> 9));
  uint64_t v17 = *(const void **)(v14 + 16 * v16);
  if (v17 != a2)
  {
    int v18 = 1;
    while (v17 != (const void *)-4096)
    {
      int v19 = v16 + v18++;
      uint64_t v16 = v19 & v15;
      uint64_t v17 = *(const void **)(v14 + 16 * v16);
      if (v17 == a2) {
        goto LABEL_15;
      }
    }
    goto LABEL_22;
  }
LABEL_15:
  uint64_t result = *(void *)(v14 + 16 * v16 + 8);
  if (!result)
  {
LABEL_22:
    uint64_t v20 = *(unsigned int *)(v12 + 40);
    if (v20)
    {
      uint64_t v21 = *(void *)(v12 + 32);
      uint64_t v22 = v21 + 8 * v20;
      while (1)
      {
        uint64_t v23 = *(void *)(*(void *)v21 + 208);
        uint64_t v24 = *(unsigned int *)(*(void *)v21 + 224);
        if (!v24) {
          goto LABEL_30;
        }
        LODWORD(v25) = (v24 - 1) & (v5 ^ (a2 >> 9));
        uint64_t v26 = v23 + 16 * v25;
        unsigned int v27 = *(const void **)v26;
        if (*(const void **)v26 != a2) {
          break;
        }
LABEL_31:
        if (v26 != v23 + 16 * v24)
        {
          uint64_t result = *(void *)(v26 + 8);
          if (result) {
            return result;
          }
        }
        v21 += 8;
        if (v21 == v22) {
          goto LABEL_36;
        }
      }
      int v28 = 1;
      while (v27 != (const void *)-4096)
      {
        int v29 = v25 + v28++;
        uint64_t v25 = v29 & (v24 - 1);
        unsigned int v27 = *(const void **)(v23 + 16 * v25);
        if (v27 == a2)
        {
          uint64_t v26 = v23 + 16 * v25;
          goto LABEL_31;
        }
      }
LABEL_30:
      uint64_t v26 = v23 + 16 * v24;
      goto LABEL_31;
    }
LABEL_36:
    uint64_t v30 = *(unsigned int *)(v12 + 120);
    if (!v30) {
      return 0;
    }
    uint64_t v31 = *(void *)(v12 + 112);
    uint64_t v32 = v31 + 8 * v30;
    unsigned int v33 = v5 ^ (a2 >> 9);
    while (1)
    {
      uint64_t v34 = *(void *)(*(void *)v31 + 208);
      uint64_t v35 = *(unsigned int *)(*(void *)v31 + 224);
      if (!v35) {
        goto LABEL_44;
      }
      LODWORD(v36) = (v35 - 1) & v33;
      uint64_t v37 = v34 + 16 * v36;
      int v38 = *(const void **)v37;
      if (*(const void **)v37 != a2) {
        break;
      }
LABEL_45:
      if (v37 == v34 + 16 * v35 || (uint64_t result = *(void *)(v37 + 8)) == 0)
      {
        uint64_t result = 0;
        v31 += 8;
        if (v31 != v32) {
          continue;
        }
      }
      return result;
    }
    int v39 = 1;
    while (v38 != (const void *)-4096)
    {
      int v40 = v36 + v39++;
      uint64_t v36 = v40 & (v35 - 1);
      int v38 = *(const void **)(v34 + 16 * v36);
      if (v38 == a2)
      {
        uint64_t v37 = v34 + 16 * v36;
        goto LABEL_45;
      }
    }
LABEL_44:
    uint64_t v37 = v34 + 16 * v35;
    goto LABEL_45;
  }
  return result;
}

void llvm::PMTopLevelManager::~PMTopLevelManager(llvm::PMTopLevelManager *this)
{
  *(void *)this = &unk_1F2617428;
  uint64_t v2 = *((unsigned int *)this + 10);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 4);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  uint64_t v5 = *((unsigned int *)this + 62);
  if (v5)
  {
    uint64_t v6 = (void *)*((void *)this + 30);
    uint64_t v7 = 8 * v5;
    do
    {
      if (*v6) {
        (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
      }
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 82), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 79), 8);
  sub_1CC5F6B7C((uint64_t)this + 536);
  sub_1CBFFBA64((uint64_t)this + 536);
  llvm::FoldingSetBase::~FoldingSetBase((void **)this + 65);
  if ((*((unsigned char *)this + 384) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*((void *)this + 49), 8);
  }
  unsigned int v8 = (char *)*((void *)this + 30);
  if (v8 != (char *)this + 256) {
    free(v8);
  }
  sub_1CC5F6B14((_DWORD *)this + 54);
  MEMORY[0x1D25D9CD0](*((void *)this + 27), 8);
  MEMORY[0x1D25D9CD0](*((void *)this + 24), 8);
  int v9 = (char *)*((void *)this + 14);
  if (v9 != (char *)this + 128) {
    free(v9);
  }
  int v10 = (char *)*((void *)this + 4);
  if (v10 != (char *)this + 48) {
    free(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 1);
  if (v11)
  {
    *((void *)this + 2) = v11;
    operator delete(v11);
  }
}

uint64_t llvm::PMDataManager::preserveHigherLevelAnalysis(llvm::PMTopLevelManager **this, llvm::Pass *a2)
{
  uint64_t AnalysisUsage = llvm::PMTopLevelManager::findAnalysisUsage(this[1], a2);
  if (*(unsigned char *)(AnalysisUsage + 160)) {
    return 1;
  }
  uint64_t v4 = *((unsigned int *)this + 60);
  if (!v4) {
    return 1;
  }
  uint64_t v5 = AnalysisUsage;
  uint64_t v6 = this[29];
  uint64_t v7 = (llvm::PMTopLevelManager *)((char *)v6 + 8 * v4);
  while (1)
  {
    uint64_t v8 = *(void *)v6;
    if (!(*(uint64_t (**)(void))(**(void **)v6 + 104))(*(void *)v6))
    {
      uint64_t v9 = *(void *)(v5 + 112);
      uint64_t v10 = *(unsigned int *)(v5 + 120);
      if (v10)
      {
        uint64_t v11 = 8 * v10;
        uint64_t v12 = *(void **)(v5 + 112);
        while (*v12 != *(void *)(v8 + 16))
        {
          ++v12;
          v11 -= 8;
          if (!v11)
          {
            uint64_t v12 = (void *)(v9 + 8 * v10);
            break;
          }
        }
      }
      else
      {
        uint64_t v12 = *(void **)(v5 + 112);
      }
      if (v10 == ((uint64_t)v12 - v9) >> 3) {
        return 0;
      }
    }
    uint64_t v6 = (llvm::PMTopLevelManager *)((char *)v6 + 8);
    if (v6 == v7) {
      return 1;
    }
  }
}

llvm::raw_ostream *llvm::PMDataManager::removeNotPreservedAnalysis(llvm::PMDataManager *this, llvm::Pass *a2)
{
  uint64_t result = (llvm::raw_ostream *)llvm::PMTopLevelManager::findAnalysisUsage(*((llvm::PMTopLevelManager **)this + 1), a2);
  if (!*((unsigned char *)result + 160))
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v6 = (int32x2_t **)((char *)this + 208);
    uint64_t v5 = *((void *)this + 26);
    uint64_t v7 = *((unsigned int *)this + 56);
    uint64_t v8 = (void *)(v5 + 16 * v7);
    if (*((_DWORD *)this + 54))
    {
      if (v7)
      {
        uint64_t v9 = 16 * v7;
        uint64_t v10 = (void *)*((void *)this + 26);
        while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v10 += 2;
          v9 -= 16;
          if (!v9) {
            goto LABEL_7;
          }
        }
      }
      else
      {
        uint64_t v10 = (void *)*((void *)this + 26);
      }
    }
    else
    {
LABEL_7:
      uint64_t v10 = (void *)(v5 + 16 * v7);
    }
    uint64_t v11 = (void *)(v5 + 16 * v7);
    uint64_t v12 = (int *)&unk_1EBD06000;
    while (v10 != v11)
    {
      int v13 = v10;
      uint64_t v14 = v10 + 2;
      uint64_t v10 = v8;
      if (v14 != v8)
      {
        while ((*v14 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v14 += 2;
          if (v14 == v8)
          {
            uint64_t v10 = v8;
            goto LABEL_14;
          }
        }
        uint64_t v10 = v14;
      }
LABEL_14:
      uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(void))(*(void *)v13[1] + 104))(v13[1]);
      if (!result)
      {
        uint64_t v15 = *(void *)(v4 + 112);
        uint64_t v16 = *(unsigned int *)(v4 + 120);
        if (v16)
        {
          uint64_t v17 = 8 * v16;
          int v18 = *(void **)(v4 + 112);
          while (*v18 != *v13)
          {
            ++v18;
            v17 -= 8;
            if (!v17)
            {
              int v18 = (void *)(v15 + 8 * v16);
              break;
            }
          }
        }
        else
        {
          int v18 = *(void **)(v4 + 112);
        }
        if (v16 == ((uint64_t)v18 - v15) >> 3)
        {
          if (v12[446] >= 4)
          {
            uint64_t v63 = v10;
            BOOL v65 = v11;
            size_t v62 = v8;
            uint64_t v32 = v12;
            unsigned int v33 = v6;
            uint64_t v34 = v13[1];
            uint64_t v35 = llvm::dbgs(0);
            uint64_t v36 = sub_1CB8E509C(v35, " -- '");
            int v38 = (const void *)(*(uint64_t (**)(llvm::Pass *))(*(void *)a2 + 16))(a2);
            size_t v39 = v37;
            int v40 = (void *)*((void *)v36 + 4);
            if (v37 <= *((void *)v36 + 3) - (void)v40)
            {
              if (v37)
              {
                memcpy(v40, v38, v37);
                *((void *)v36 + 4) += v39;
              }
            }
            else
            {
              llvm::raw_ostream::write(v36, (const char *)v38, v37);
            }
            uint64_t v41 = sub_1CB8E509C(v36, "' is not preserving '");
            uint64_t v42 = llvm::dbgs(v41);
            unsigned int v44 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 16))(v34);
            size_t v45 = v43;
            uint64_t v46 = (void *)*((void *)v42 + 4);
            if (v43 <= *((void *)v42 + 3) - (void)v46)
            {
              if (v43)
              {
                memcpy(v46, v44, v43);
                *((void *)v42 + 4) += v45;
              }
            }
            else
            {
              llvm::raw_ostream::write(v42, (const char *)v44, v43);
            }
            uint64_t result = sub_1CB8E509C(v42, "'\n");
            uint64_t v6 = v33;
            uint64_t v12 = v32;
            uint64_t v8 = v62;
            uint64_t v10 = v63;
            uint64_t v11 = v65;
          }
          *int v13 = -8192;
          *((int32x2_t *)this + 27) = vadd_s32(*(int32x2_t *)((char *)this + 216), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
    }
    int v19 = (int32x2_t **)((char *)this + 160);
    do
    {
      uint64_t v20 = *v19;
      if (*v19)
      {
        uint64_t v21 = v20[2].u32[0];
        uint64_t v22 = *(void *)v20 + 16 * v21;
        if (v20[1].i32[0])
        {
          if (v20[2].i32[0])
          {
            uint64_t v31 = 16 * v21;
            uint64_t v23 = (void *)*v20;
            while (*v23 == -4096 || *v23 == -8192)
            {
              v23 += 2;
              v31 -= 16;
              if (!v31) {
                goto LABEL_30;
              }
            }
          }
          else
          {
            uint64_t v23 = (void *)*v20;
          }
        }
        else
        {
LABEL_30:
          uint64_t v23 = (void *)(*(void *)v20 + 16 * v21);
        }
        uint64_t v24 = *(void *)v20 + 16 * v21;
        while (v23 != (void *)v24)
        {
          uint64_t v25 = v23;
          uint64_t v26 = v23 + 2;
          uint64_t v23 = (void *)v22;
          if (v26 != (void *)v22)
          {
            uint64_t v23 = v26;
            while ((*v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v23 += 2;
              if (v23 == (void *)v22)
              {
                uint64_t v23 = (void *)v22;
                break;
              }
            }
          }
          uint64_t result = (llvm::raw_ostream *)(*(uint64_t (**)(void))(*(void *)v25[1] + 104))(v25[1]);
          if (!result)
          {
            uint64_t v27 = *(void *)(v4 + 112);
            uint64_t v28 = *(unsigned int *)(v4 + 120);
            if (v28)
            {
              uint64_t v29 = 8 * v28;
              uint64_t v30 = *(void **)(v4 + 112);
              while (*v30 != *v25)
              {
                ++v30;
                v29 -= 8;
                if (!v29)
                {
                  uint64_t v30 = (void *)(v27 + 8 * v28);
                  break;
                }
              }
            }
            else
            {
              uint64_t v30 = *(void **)(v4 + 112);
            }
            if (v28 == ((uint64_t)v30 - v27) >> 3)
            {
              if (v12[446] >= 4)
              {
                uint64_t v64 = v22;
                unsigned int v66 = v23;
                int v47 = v12;
                int v48 = v6;
                uint64_t v49 = v25[1];
                size_t v50 = llvm::dbgs(0);
                unsigned int v51 = sub_1CB8E509C(v50, " -- '");
                uint64_t v53 = (const void *)(*(uint64_t (**)(llvm::Pass *))(*(void *)a2 + 16))(a2);
                size_t v54 = v52;
                uint64_t v55 = (void *)*((void *)v51 + 4);
                if (v52 <= *((void *)v51 + 3) - (void)v55)
                {
                  if (v52)
                  {
                    memcpy(v55, v53, v52);
                    *((void *)v51 + 4) += v54;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v51, (const char *)v53, v52);
                }
                uint64_t v56 = sub_1CB8E509C(v51, "' is not preserving '");
                uint64_t v57 = llvm::dbgs(v56);
                uint64_t v59 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 16))(v49);
                size_t v60 = v58;
                uint64_t v61 = (void *)*((void *)v57 + 4);
                if (v58 <= *((void *)v57 + 3) - (void)v61)
                {
                  if (v58)
                  {
                    memcpy(v61, v59, v58);
                    *((void *)v57 + 4) += v60;
                  }
                }
                else
                {
                  llvm::raw_ostream::write(v57, (const char *)v59, v58);
                }
                uint64_t result = sub_1CB8E509C(v57, "'\n");
                uint64_t v6 = v48;
                uint64_t v12 = v47;
                uint64_t v22 = v64;
                uint64_t v23 = v66;
              }
              *uint64_t v25 = -8192;
              v20[1] = vadd_s32(v20[1], (int32x2_t)0x1FFFFFFFFLL);
            }
          }
        }
      }
      ++v19;
    }
    while (v19 != v6);
  }
  return result;
}

void llvm::PMDataManager::removeDeadPasses(int32x2_t *a1, uint64_t a2, const void *a3, size_t a4, int a5)
{
  v29[12] = *MEMORY[0x1E4F143B8];
  uint64_t v27 = v29;
  uint64_t v28 = 0xC00000000;
  uint64_t v6 = (uint64_t)a1[1];
  if (v6)
  {
    Uses = llvm::PMTopLevelManager::collectLastUses(v6, (uint64_t)&v27, a2);
    unsigned int v12 = v28;
    if (dword_1EBD066F8 >= 4 && v28 != 0)
    {
      uint64_t v17 = llvm::dbgs((llvm *)Uses);
      int v18 = sub_1CB8E509C(v17, " -*- '");
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      uint64_t v21 = (const void *)v19;
      size_t v22 = v20;
      uint64_t v23 = (void *)*((void *)v18 + 4);
      if (v20 <= *((void *)v18 + 3) - (void)v23)
      {
        if (v20)
        {
          uint64_t v23 = memcpy(v23, v21, v20);
          *((void *)v18 + 4) += v22;
        }
      }
      else
      {
        uint64_t v23 = llvm::raw_ostream::write(v18, (const char *)v21, v20);
      }
      uint64_t v24 = llvm::dbgs((llvm *)v23);
      uint64_t v25 = sub_1CB8E509C(v24, "' is the last user of following pass instances.");
      uint64_t v26 = llvm::dbgs(v25);
      sub_1CB8E509C(v26, " Free these instances\n");
      unsigned int v12 = v28;
    }
    uint64_t v14 = (llvm **)v27;
    if (v12)
    {
      uint64_t v15 = 8 * v12;
      do
      {
        uint64_t v16 = *v14++;
        llvm::PMDataManager::freePass(a1, v16, a3, a4, a5);
        v15 -= 8;
      }
      while (v15);
      uint64_t v14 = (llvm **)v27;
    }
    if (v14 != v29) {
      free(v14);
    }
  }
}

void llvm::PMDataManager::freePass(int32x2_t *a1, llvm *a2, const void *a3, size_t a4, int a5)
{
  llvm::PMDataManager::dumpPassInfo((llvm *)a1, (uint64_t)a2, 2, a5, a3, a4);
  int v54 = 0;
  uint64_t v53 = &unk_1F26174E8;
  uint64_t v55 = a2;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  PassTimer = (llvm::Timer *)llvm::getPassTimer(a2, v7);
  uint64_t v10 = PassTimer;
  if (PassTimer) {
    v9.n128_f64[0] = llvm::Timer::startTimer(PassTimer);
  }
  uint64_t v11 = (void *)(*(uint64_t (**)(llvm *, __n128))(*(void *)a2 + 88))(a2, v9);
  if (v10) {
    uint64_t v11 = (void *)llvm::Timer::stopTimer(v10);
  }
  unsigned int v12 = (void *)*((void *)a2 + 2);
  int32x2_t v13 = a1[1];
  uint64_t v53 = v12;
  int v14 = *(_DWORD *)(*(void *)&v13 + 672);
  unsigned int v15 = v12 >> 4;
  if (v14)
  {
    uint64_t v16 = *(void *)(*(void *)&v13 + 656);
    int v17 = v14 - 1;
    unsigned int v18 = v17 & (v15 ^ (v12 >> 9));
    uint64_t v19 = (void *)(v16 + 16 * v18);
    size_t v20 = (void *)*v19;
    if ((void *)*v19 == v12) {
      goto LABEL_15;
    }
    uint64_t v21 = 0;
    int v22 = 1;
    while (v20 != (void *)-4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == (void *)-8192;
      }
      if (v23) {
        uint64_t v21 = v19;
      }
      unsigned int v24 = v18 + v22++;
      unsigned int v18 = v24 & v17;
      uint64_t v19 = (void *)(v16 + 16 * v18);
      size_t v20 = (void *)*v19;
      if ((void *)*v19 == v12) {
        goto LABEL_15;
      }
    }
    if (v21) {
      size_t v52 = v21;
    }
    else {
      size_t v52 = v19;
    }
  }
  else
  {
    size_t v52 = 0;
  }
  uint64_t v11 = sub_1CC5F7650((_DWORD *)(*(void *)&v13 + 656), (uint64_t)&v53, &v53, v52);
  uint64_t v19 = v11;
  *uint64_t v11 = v53;
  v11[1] = 0;
LABEL_15:
  uint64_t v25 = v19[1];
  if (!v25)
  {
    atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v11);
    unsigned int v44 = v53;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)PassRegistry);
    int v45 = *(_DWORD *)(PassRegistry + 192);
    if (v45)
    {
      uint64_t v46 = *(void *)(PassRegistry + 176);
      unsigned int v47 = v45 - 1;
      uint64_t v48 = (v45 - 1) & ((v44 >> 4) ^ (v44 >> 9));
      uint64_t v49 = *(void **)(v46 + 16 * v48);
      if (v49 == v44)
      {
LABEL_42:
        uint64_t v25 = *(void *)(v46 + 16 * v48 + 8);
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
        v19[1] = v25;
        if (!v25) {
          return;
        }
        goto LABEL_16;
      }
      int v50 = 1;
      while (v49 != (void *)-4096)
      {
        int v51 = v48 + v50++;
        uint64_t v48 = v51 & v47;
        uint64_t v49 = *(void **)(v46 + 16 * v48);
        if (v49 == v44) {
          goto LABEL_42;
        }
      }
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
    v19[1] = 0;
    return;
  }
LABEL_16:
  uint64_t v26 = a1[28].u32[0];
  if (v26)
  {
    int32x2_t v27 = a1[26];
    LODWORD(v28) = (v26 - 1) & (v15 ^ (v12 >> 9));
    uint64_t v29 = (void **)(*(void *)&v27 + 16 * v28);
    uint64_t v30 = *v29;
    if (v12 == *v29)
    {
LABEL_22:
      *uint64_t v29 = (void *)-8192;
      a1[27] = vadd_s32(a1[27], (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      int v31 = 1;
      while (v30 != (void *)-4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v26 - 1);
        uint64_t v30 = *(void **)(*(void *)&v27 + 16 * v28);
        if (v12 == v30)
        {
          uint64_t v29 = (void **)(*(void *)&v27 + 16 * v28);
          goto LABEL_22;
        }
      }
    }
  }
  uint64_t v33 = *(void *)(v25 + 48);
  uint64_t v34 = *(void *)(v25 + 56);
  if (v33 != v34)
  {
    unsigned int v35 = v26 - 1;
    while (1)
    {
      int32x2_t v36 = a1[26];
      if (!v26) {
        goto LABEL_31;
      }
      uint64_t v37 = *(void *)(*(void *)v33 + 32);
      LODWORD(v38) = ((v37 >> 4) ^ (v37 >> 9)) & v35;
      size_t v39 = (uint64_t *)(*(void *)&v36 + 16 * v38);
      uint64_t v40 = *v39;
      if (v37 != *v39) {
        break;
      }
LABEL_32:
      if (v39 != (uint64_t *)(*(void *)&v36 + 16 * v26) && (llvm *)v39[1] == a2)
      {
        uint64_t *v39 = -8192;
        a1[27] = vadd_s32(a1[27], (int32x2_t)0x1FFFFFFFFLL);
      }
      v33 += 8;
      if (v33 == v34) {
        return;
      }
    }
    int v41 = 1;
    while (v40 != -4096)
    {
      int v42 = v38 + v41++;
      uint64_t v38 = v42 & v35;
      uint64_t v40 = *(void *)(*(void *)&v36 + 16 * v38);
      if (v37 == v40)
      {
        size_t v39 = (uint64_t *)(*(void *)&v36 + 16 * v38);
        goto LABEL_32;
      }
    }
LABEL_31:
    size_t v39 = (uint64_t *)(*(void *)&v36 + 16 * v26);
    goto LABEL_32;
  }
}

void llvm::PMDataManager::dumpPassInfo(llvm *a1, uint64_t a2, int a3, int a4, const void *a5, size_t a6)
{
  if (dword_1EBD066F8 < 3) {
    return;
  }
  uint64_t v8 = llvm::dbgs(a1);
  __n128 v9 = sub_1CB8E509C(v8, "[");
  v10.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
  uint64_t v11 = llvm::operator<<(v9, 1000 * v10.__d_.__rep_);
  unsigned int v12 = sub_1CB8E509C(v11, "] ");
  int32x2_t v13 = llvm::raw_ostream::operator<<(v12, (unint64_t)a1);
  std::string::__init(&v31, (2 * *((_DWORD *)a1 + 94)) | 1u, 32);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v14 = &v31;
  }
  else {
    int v14 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v31.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v31.__r_.__value_.__l.__size_;
  }
  uint64_t v16 = llvm::raw_ostream::write(v13, (const char *)v14, size);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  switch(a3)
  {
    case 2:
      uint64_t v19 = llvm::dbgs(v16);
      size_t v20 = " Freeing Pass '";
      goto LABEL_18;
    case 1:
      uint64_t v19 = llvm::dbgs(v16);
      size_t v20 = "Made Modification '";
      goto LABEL_18;
    case 0:
      uint64_t v19 = llvm::dbgs(v16);
      size_t v20 = "Executing Pass '";
LABEL_18:
      uint64_t v21 = sub_1CB8E509C(v19, v20);
      BOOL v23 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
      size_t v24 = v22;
      uint64_t v16 = (llvm *)*((void *)v21 + 4);
      if (v22 <= *((void *)v21 + 3) - (void)v16)
      {
        if (v22)
        {
          uint64_t v16 = (llvm *)memcpy(v16, v23, v22);
          *((void *)v21 + 4) += v24;
        }
      }
      else
      {
        uint64_t v16 = llvm::raw_ostream::write(v21, (const char *)v23, v22);
      }
      break;
  }
  switch(a4)
  {
    case 3:
      int v17 = llvm::dbgs(v16);
      unsigned int v18 = "' on Function '";
      goto LABEL_26;
    case 4:
      int v17 = llvm::dbgs(v16);
      unsigned int v18 = "' on Module '";
      goto LABEL_26;
    case 5:
      int v17 = llvm::dbgs(v16);
      unsigned int v18 = "' on Region '";
      goto LABEL_26;
    case 6:
      int v17 = llvm::dbgs(v16);
      unsigned int v18 = "' on Loop '";
      goto LABEL_26;
    case 7:
      int v17 = llvm::dbgs(v16);
      unsigned int v18 = "' on Call Graph Nodes '";
LABEL_26:
      uint64_t v25 = sub_1CB8E509C(v17, v18);
      uint64_t v26 = (void *)*((void *)v25 + 4);
      if (a6 <= *((void *)v25 + 3) - (void)v26)
      {
        if (a6)
        {
          memcpy(v26, a5, a6);
          *((void *)v25 + 4) += a6;
        }
      }
      else
      {
        llvm::raw_ostream::write(v25, (const char *)a5, a6);
      }
      sub_1CB8E509C(v25, "'...\n");
      break;
    default:
      return;
  }
}

void llvm::PMDataManager::add(llvm::PMDataManager *this, llvm::Pass *a2)
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  operator new();
}

uint64_t llvm::PMDataManager::collectRequiredAndUsedAnalyses(llvm::PMTopLevelManager **a1, uint64_t a2, uint64_t a3, llvm::Pass *a4)
{
  uint64_t result = llvm::PMTopLevelManager::findAnalysisUsage(a1[1], a4);
  uint64_t v8 = result;
  uint64_t v9 = *(unsigned int *)(result + 152);
  if (v9)
  {
    unsigned int v18 = *(const void ***)(result + 144);
    uint64_t v19 = 8 * v9;
    do
    {
      uint64_t result = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)a1, *v18, 1);
      if (result)
      {
        unint64_t v20 = *(unsigned int *)(a2 + 8);
        if (v20 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v20) = result;
        ++*(_DWORD *)(a2 + 8);
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  uint64_t v10 = *(unsigned int *)(v8 + 8);
  if (v10)
  {
    uint64_t v11 = *(const void ***)v8;
    uint64_t v12 = 8 * v10;
    do
    {
      int32x2_t v13 = *v11;
      uint64_t result = llvm::PMDataManager::findAnalysisPass((llvm::PMDataManager *)a1, *v11, 1);
      if (result)
      {
        uint64_t v14 = result;
        unint64_t v15 = *(unsigned int *)(a2 + 8);
        unint64_t v16 = *(unsigned int *)(a2 + 12);
        uint64_t v17 = a2;
      }
      else
      {
        unint64_t v15 = *(unsigned int *)(a3 + 8);
        unint64_t v16 = *(unsigned int *)(a3 + 12);
        uint64_t v17 = a3;
        uint64_t v14 = (uint64_t)v13;
      }
      if (v15 >= v16) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)v17 + 8 * v15) = v14;
      ++*(_DWORD *)(v17 + 8);
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

llvm *llvm::PMDataManager::dumpRequiredSet(llvm *this, const llvm::Pass *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (dword_1EBD066F8 >= 4)
  {
    v4[0] = v5;
    v4[1] = 0x800000000;
    v5[8] = v6;
    v5[9] = 0x200000000;
    v6[2] = v7;
    v6[3] = 0x200000000;
    v7[2] = &v8;
    v7[3] = 0;
    char v8 = 0;
    uint64_t v3 = this;
    (*(void (**)(const llvm::Pass *, void *))(*(void *)a2 + 80))(a2, v4);
    llvm::PMDataManager::dumpAnalysisUsage(v3, "Required", 8uLL, (unint64_t)a2, (uint64_t)v4);
    return (llvm *)sub_1CC5F62A0((uint64_t)v4);
  }
  return this;
}

llvm *llvm::PMDataManager::dumpPreservedSet(llvm *this, const llvm::Pass *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (dword_1EBD066F8 >= 4)
  {
    v4[0] = v5;
    v4[1] = 0x800000000;
    v5[8] = &v6;
    v5[9] = 0x200000000;
    v7[0] = v8;
    v7[1] = 0x200000000;
    v8[2] = &v9;
    v8[3] = 0;
    char v9 = 0;
    uint64_t v3 = this;
    (*(void (**)(const llvm::Pass *, void *))(*(void *)a2 + 80))(a2, v4);
    llvm::PMDataManager::dumpAnalysisUsage(v3, "Preserved", 9uLL, (unint64_t)a2, (uint64_t)v7);
    return (llvm *)sub_1CC5F62A0((uint64_t)v4);
  }
  return this;
}

llvm *llvm::PMDataManager::dumpUsedSet(llvm *this, const llvm::Pass *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (dword_1EBD066F8 >= 4)
  {
    v4[0] = v5;
    v4[1] = 0x800000000;
    v5[8] = v6;
    v5[9] = 0x200000000;
    v6[2] = &v7;
    v6[3] = 0x200000000;
    v8[0] = &v9;
    v8[1] = 0;
    char v9 = 0;
    uint64_t v3 = this;
    (*(void (**)(const llvm::Pass *, void *))(*(void *)a2 + 80))(a2, v4);
    llvm::PMDataManager::dumpAnalysisUsage(v3, "Used", 4uLL, (unint64_t)a2, (uint64_t)v8);
    return (llvm *)sub_1CC5F62A0((uint64_t)v4);
  }
  return this;
}

void llvm::PMDataManager::~PMDataManager(llvm::PMDataManager *this)
{
  *(void *)this = &unk_1F2617458;
  uint64_t v2 = *((unsigned int *)this + 6);
  if (v2)
  {
    uint64_t v3 = (void *)*((void *)this + 2);
    uint64_t v4 = 8 * v2;
    do
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  uint64_t v5 = (char *)*((void *)this + 29);
  if (v5 != (char *)this + 248) {
    free(v5);
  }
  MEMORY[0x1D25D9CD0](*((void *)this + 26), 8);
  uint64_t v6 = (char *)*((void *)this + 2);
  if (v6 != (char *)this + 32) {
    free(v6);
  }
}

uint64_t llvm::AnalysisResolver::getAnalysisIfAvailable(llvm::PMDataManager **this, const void *a2)
{
  return llvm::PMDataManager::findAnalysisPass(this[3], a2, 1);
}

uint64_t llvm::AnalysisResolver::findImplPass(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 32))();
}

void llvm::legacy::FunctionPassManager::~FunctionPassManager(llvm::legacy::FunctionPassManager *this)
{
  *(void *)this = &unk_1F2617498;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_1F2617498;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
}

{
  uint64_t v1;
  uint64_t vars8;

  *(void *)this = &unk_1F2617498;
  uint64_t v1 = *((void *)this + 1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::legacy::FunctionPassManager::run(llvm::legacy::FunctionPassManagerImpl **this, llvm::Module **a2)
{
  llvm::Module::materialize(a2[5], (llvm::GlobalValue *)a2, &v12);
  uint64_t v4 = v12;
  uint64_t v12 = 0;
  if (!v4)
  {
    int32x2_t v13 = 0;
    goto LABEL_19;
  }
  if ((*(unsigned int (**)(char *, void *))(*(void *)v4 + 48))(v4, &llvm::ErrorList::ID))
  {
    uint64_t v5 = (uint64_t *)*((void *)v4 + 1);
    uint64_t v6 = (uint64_t *)*((void *)v4 + 2);
    if (v5 == v6)
    {
      uint64_t v7 = 0;
    }
    else
    {
      uint64_t v7 = 0;
      do
      {
        unint64_t v16 = v7;
        uint64_t v8 = *v5;
        *uint64_t v5 = 0;
        uint64_t v14 = v8;
        sub_1CC5F7884(&v15, &v14);
        sub_1CD451630(&v16, &v15, &v17);
        uint64_t v7 = v17;
        uint64_t v17 = 0;
        if (v15) {
          (*(void (**)(char *))(*(void *)v15 + 8))(v15);
        }
        uint64_t v9 = v14;
        uint64_t v14 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
        if (v16) {
          (*(void (**)(char *))(*(void *)v16 + 8))(v16);
        }
        ++v5;
      }
      while (v5 != v6);
    }
    int32x2_t v13 = v7;
    uint64_t v10 = *(void (**)(void))(*(void *)v4 + 8);
  }
  else
  {
    uint64_t v17 = v4;
    sub_1CC5F7884(&v13, &v17);
    if (!v17) {
      goto LABEL_19;
    }
    uint64_t v10 = *(void (**)(void))(*(void *)v17 + 8);
  }
  v10();
LABEL_19:
  if (v12) {
    (*(void (**)(char *))(*(void *)v12 + 8))(v12);
  }
  return llvm::legacy::FunctionPassManagerImpl::run(this[1], (llvm::Function *)a2);
}

uint64_t llvm::FPPassManager::runOnModule(llvm::FPPassManager *this, llvm::Module *a2)
{
  uint64_t v2 = (char *)a2 + 24;
  uint64_t v3 = (char *)*((void *)a2 + 4);
  if (v3 == (char *)a2 + 24)
  {
    LOBYTE(v5) = 0;
  }
  else
  {
    int v5 = 0;
    do
    {
      if (v3) {
        uint64_t v6 = (llvm::Function *)(v3 - 56);
      }
      else {
        uint64_t v6 = 0;
      }
      v5 |= llvm::FPPassManager::runOnFunction(this, v6);
      uint64_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v5 & 1;
}

uint64_t llvm::FPPassManager::doInitialization(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 56))
  {
    unint64_t v4 = 0;
    int v5 = 0;
    do
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8 * v4);
      v5 |= (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2);
      ++v4;
    }
    while (v4 < *(unsigned int *)(a1 + 56));
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  return v5 & 1;
}

uint64_t llvm::FPPassManager::doFinalization(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 56) - 1 < 0)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    int v4 = 0;
    uint64_t v5 = 8 * (*(_DWORD *)(a1 + 56) - 1);
    do
    {
      v4 |= (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 48) + v5) + 32))(*(void *)(*(void *)(a1 + 48) + v5), a2);
      v5 -= 8;
    }
    while (v5 != -8);
  }
  return v4 & 1;
}

llvm *llvm::legacy::PassManager::add(llvm::legacy::PassManager *this, llvm::Pass *a2)
{
  return llvm::PMTopLevelManager::schedulePass((int32x2_t *)(*((void *)this + 1) + 416), a2);
}

uint64_t llvm::legacy::PassManager::run(llvm::legacy::PassManagerImpl **this, llvm::Module *a2)
{
  return llvm::legacy::PassManagerImpl::run(this[1], a2);
}

void llvm::ModulePass::assignPassManager(llvm::Pass *a1, uint64_t a2, int a3)
{
  for (uint64_t i = *(void *)(*(void *)(a2 + 8) - 8); ; uint64_t i = *(void *)(v10 - 16))
  {
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)i + 40))(i);
    if (v7 < 2 || v7 == a3) {
      break;
    }
    uint64_t v9 = *(void *)(*(void *)(a2 + 8) - 8);
    sub_1CBB8977C((_DWORD *)(v9 + 208));
    *(_OWORD *)(v9 + 176) = 0u;
    *(_OWORD *)(v9 + 192) = 0u;
    *(_OWORD *)(v9 + 160) = 0u;
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = v10 - 8;
  }
  uint64_t v11 = *(llvm::PMDataManager **)(*(void *)(a2 + 8) - 8);

  llvm::PMDataManager::add(v11, a1);
}

void llvm::FunctionPass::assignPassManager(llvm::Pass *a1, uint64_t a2)
{
  int v4 = *(llvm::PMDataManager **)(*(void *)(a2 + 8) - 8);
  if ((*(int (**)(llvm::PMDataManager *))(*(void *)v4 + 40))(v4) >= 4)
  {
    do
    {
      uint64_t v5 = *(void *)(*(void *)(a2 + 8) - 8);
      sub_1CBB8977C((_DWORD *)(v5 + 208));
      *(_OWORD *)(v5 + 176) = 0u;
      *(_OWORD *)(v5 + 192) = 0u;
      *(_OWORD *)(v5 + 160) = 0u;
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = v6 - 8;
      int v4 = *(llvm::PMDataManager **)(v6 - 16);
    }
    while ((*(int (**)(llvm::PMDataManager *))(*(void *)v4 + 40))(v4) > 3);
  }
  if ((*(unsigned int (**)(llvm::PMDataManager *))(*(void *)v4 + 40))(v4) == 3)
  {
    llvm::PMDataManager::add(v4, a1);
  }
  operator new();
}

uint64_t sub_1CC5F5E3C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1CC5F5E44(uint64_t a1)
{
  return a1 - 32;
}

uint64_t sub_1CC5F5E4C()
{
  return 3;
}

uint64_t sub_1CC5F5E54()
{
  return 1;
}

void *sub_1CC5F5E5C(void *a1)
{
  *a1 = &unk_1F26178D0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CC5F5EB0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v7 = a1;
  int v18 = 0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 160) + 24);
  if (v8) {
    a4 = a6;
  }
  if (v8) {
    a3 = a5;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 176);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 168);
    while (1)
    {
      if (*(void *)(v12 + 8) == a4)
      {
        if (!a4) {
          break;
        }
        a1 = memcmp(*(const void **)v12, a3, a4);
        if (!a1) {
          break;
        }
      }
      v12 += 48;
      if (!--v11) {
        goto LABEL_13;
      }
    }
    int v15 = *(_DWORD *)(v12 + 40);
    int v18 = v15;
  }
  else
  {
LABEL_13:
    __int16 v20 = 1283;
    v19[0] = "Cannot find option named '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "'!";
    __int16 v22 = 770;
    int32x2_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    if (llvm::cl::Option::error((void *)v7, (llvm::Twine *)v21, 0, 0, v13)) {
      return 1;
    }
    int v15 = 0;
  }
  *(_DWORD *)(v7 + 128) = v15;
  *(_WORD *)(v7 + 12) = a2;
  uint64_t v16 = *(void *)(v7 + 592);
  if (v16)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v16 + 48))(v16, &v18);
    return 0;
  }
  else
  {
    sub_1CB920400();
    return sub_1CC5F5FEC(v17);
  }
}

uint64_t sub_1CC5F5FEC(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 160) + 24)) {
    return 2;
  }
  else {
    return 3;
  }
}

void sub_1CC5F6004(void *a1)
{
  *a1 = &unk_1F2617868;
  uint64_t v2 = a1 + 71;
  uint64_t v3 = (void *)a1[74];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  a1[19] = &unk_1F26178D0;
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23) {
    free(v4);
  }
  sub_1CB87DD48(a1);

  JUMPOUT(0x1D25D9CE0);
}

unint64_t sub_1CC5F6100(llvm::cl::Option *a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth((llvm::cl::Option *)((char *)a1 + 152), a1);
}

uint64_t sub_1CC5F610C(llvm::cl::Option *a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

llvm::raw_ostream *sub_1CC5F611C(llvm::raw_ostream *result, int a2, int a3)
{
  if (a3)
  {
    int v3 = *((_DWORD *)result + 32);
LABEL_5:
    int v4 = &unk_1F2617920;
    char v6 = 1;
    int v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((unsigned char *)result + 148))
  {
    int v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3) {
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t sub_1CC5F61A0(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 148);
  if (*(unsigned char *)(result + 148)) {
    int v1 = *(_DWORD *)(result + 144);
  }
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void *sub_1CC5F61B4(uint64_t a1, uint64_t a2)
{
  return sub_1CD42FB24((void *)(a1 + 152), a2);
}

void sub_1CC5F61BC(void *a1)
{
  *a1 = &unk_1F26178D0;
  uint64_t v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC5F6230(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC5F6238(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1CC5F624C(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1CC5F6260(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1CC5F6274(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 12) && *(unsigned char *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1CC5F62A0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 144);
  if (v2 != (void *)(a1 + 160)) {
    free(v2);
  }
  int v3 = *(void **)(a1 + 112);
  if (v3 != (void *)(a1 + 128)) {
    free(v3);
  }
  int v4 = *(void **)(a1 + 80);
  if (v4 != (void *)(a1 + 96)) {
    free(v4);
  }
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

void sub_1CC5F6320(void *a1)
{
  *a1 = &unk_1F2617960;
  uint64_t v2 = (llvm::PMDataManager *)(a1 + 4);
  a1[4] = &unk_1F2617A18;
  uint64_t v3 = a1[55];
  uint64_t v4 = a1[56];
  while (v3 != v4)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    v3 += 16;
  }
  sub_1CC189978(a1 + 52);
  llvm::PMDataManager::~PMDataManager(v2);

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC5F63E8(void *a1)
{
  sub_1CC5F6320(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC5F6420()
{
  return "Module Pass Manager";
}

void sub_1CC5F6430()
{
}

void sub_1CC5F6440(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC5F644C(uint64_t a1)
{
  return a1 + 32;
}

void sub_1CC5F6454(uint64_t a1, int a2)
{
  uint64_t v4 = llvm::dbgs((llvm *)a1);
  uint64_t v5 = llvm::raw_ostream::indent(v4, 2 * a2);
  uint64_t v6 = *((void *)v5 + 4);
  if ((unint64_t)(*((void *)v5 + 3) - v6) > 0x12)
  {
    *(_DWORD *)(v6 + 15) = 175269223;
    *(_OWORD *)uint64_t v6 = *(_OWORD *)"ModulePass Manager\n";
    *((void *)v5 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v5, "ModulePass Manager\n", 0x13uLL);
  }
  if (*(_DWORD *)(a1 + 56))
  {
    unint64_t v7 = 0;
    uint64_t v8 = (a2 + 1);
    uint64_t v9 = (a2 + 2);
    do
    {
      uint64_t v10 = *(llvm::Pass **)(*(void *)(a1 + 48) + 8 * v7);
      (*(void (**)(llvm::Pass *, uint64_t))(*(void *)v10 + 128))(v10, v8);
      uint64_t v11 = sub_1CD5CF530(a1 + 416, (uint64_t)v10);
      if (*(void *)(a1 + 448) != v11) {
        (*(void (**)(void, uint64_t))(**(void **)(v11 + 8) + 128))(*(void *)(v11 + 8), v9);
      }
      llvm::PMDataManager::dumpLastUses((llvm::PMDataManager *)(a1 + 32), v10, v8);
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 56));
  }
}

void sub_1CC5F659C(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = a2;
  v35[1] = *(llvm::Pass **)MEMORY[0x1E4F143B8];
  uint64_t v33 = a2;
  uint64_t v6 = (int32x2_t **)sub_1CC5F68F4(a1 + 416, &v33);
  unint64_t v7 = *v6;
  if (!*v6) {
    operator new();
  }
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = (int32x2_t *)a3[2];
  v34[0] = v9;
  int v10 = *(_DWORD *)(v8 + 672);
  if (v10)
  {
    uint64_t v11 = *(void *)(v8 + 656);
    int v12 = v10 - 1;
    unsigned int v13 = v12 & ((v9 >> 4) ^ (v9 >> 9));
    uint64_t v14 = (int32x2_t **)(v11 + 16 * v13);
    int v15 = *v14;
    if (*v14 == v9) {
      goto LABEL_12;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != (int32x2_t *)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == (int32x2_t *)-8192;
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (int32x2_t **)(v11 + 16 * v13);
      int v15 = *v14;
      if (*v14 == v9) {
        goto LABEL_12;
      }
    }
    if (v16) {
      int v32 = v16;
    }
    else {
      int v32 = v14;
    }
  }
  else
  {
    int v32 = 0;
  }
  uint64_t v6 = (int32x2_t **)sub_1CC5F7650((_DWORD *)(v8 + 656), (uint64_t)v34, v34, v32);
  uint64_t v14 = v6;
  *uint64_t v6 = (int32x2_t *)v34[0];
  v6[1] = 0;
LABEL_12:
  __int16 v20 = v14[1];
  if (!v20)
  {
    atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v6);
    size_t v24 = v34[0];
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)PassRegistry);
    int v25 = *(_DWORD *)(PassRegistry + 192);
    if (v25)
    {
      uint64_t v26 = *(void *)(PassRegistry + 176);
      unsigned int v27 = v25 - 1;
      uint64_t v28 = (v25 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v29 = *(void **)(v26 + 16 * v28);
      if (v29 == v24)
      {
LABEL_27:
        __int16 v20 = *(int32x2_t **)(v26 + 16 * v28 + 8);
        std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
        v14[1] = v20;
        if (v20) {
          goto LABEL_13;
        }
LABEL_18:
        llvm::PMTopLevelManager::schedulePass(v7 + 52, (llvm::Pass *)a3);
        uint64_t v4 = v33;
        uint64_t AnalysisPass = (llvm::Pass *)a3;
        goto LABEL_19;
      }
      int v30 = 1;
      while (v29 != (void *)-4096)
      {
        int v31 = v28 + v30++;
        uint64_t v28 = v31 & v27;
        uint64_t v29 = *(void **)(v26 + 16 * v28);
        if (v29 == v24) {
          goto LABEL_27;
        }
      }
    }
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
    v14[1] = 0;
    goto LABEL_18;
  }
LABEL_13:
  if (!v20[5].i8[1]) {
    goto LABEL_18;
  }
  uint64_t v21 = v7 ? (llvm::PMTopLevelManager *)&v7[52] : 0;
  uint64_t AnalysisPass = (llvm::Pass *)llvm::PMTopLevelManager::findAnalysisPass(v21, a3[2]);
  if (!AnalysisPass) {
    goto LABEL_18;
  }
LABEL_19:
  v34[0] = v35;
  v35[0] = AnalysisPass;
  v34[1] = (void *)0x100000001;
  llvm::PMTopLevelManager::setLastUser((llvm::PMTopLevelManager *)&v7[52], v35, 1, v4);
  if (v34[0] != v35) {
    free(v34[0]);
  }
}

uint64_t sub_1CC5F680C(uint64_t a1, uint64_t a2, const void *a3, llvm::Function *a4)
{
  uint64_t v9 = a2;
  uint64_t v6 = *(llvm::legacy::FunctionPassManagerImpl **)sub_1CC5F68F4(a1 + 416, &v9);
  llvm::legacy::FunctionPassManagerImpl::releaseMemoryOnTheFly((uint64_t)v6);
  llvm::legacy::FunctionPassManagerImpl::run(v6, a4);
  if (v6) {
    unint64_t v7 = (llvm::legacy::FunctionPassManagerImpl *)((char *)v6 + 416);
  }
  else {
    unint64_t v7 = 0;
  }
  return llvm::PMTopLevelManager::findAnalysisPass(v7, a3);
}

uint64_t sub_1CC5F6888()
{
  return 1;
}

void sub_1CC5F6890(uint64_t a1)
{
}

void sub_1CC5F6898(uint64_t a1)
{
  sub_1CC5F6320((void *)(a1 - 32));

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC5F68D4(uint64_t a1)
{
  return a1 - 32;
}

void sub_1CC5F68DC(uint64_t a1, uint64_t a2, const void **a3)
{
}

uint64_t sub_1CC5F68E4(uint64_t a1, uint64_t a2, const void *a3, llvm::Function *a4)
{
  return sub_1CC5F680C(a1 - 32, a2, a3, a4);
}

uint64_t sub_1CC5F68EC()
{
  return 1;
}

uint64_t sub_1CC5F68F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v14 = v4;
  int v15 = 0;
  *(void *)&long long v13 = 0;
  if (sub_1CC076DC4(*(void *)a1, *(_DWORD *)(a1 + 16), v4, &v13))
  {
    unsigned int v5 = *(_DWORD *)(v13 + 8);
    uint64_t v6 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v8 = sub_1CD5CF5A0(a1, &v14, (void *)v13);
    uint64_t v9 = a2;
    int v10 = v8;
    void *v8 = v4;
    *((_DWORD *)v8 + 2) = 0;
    long long v13 = (unint64_t)*v9;
    uint64_t v11 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v11 < *(void *)(a1 + 40))
    {
      *uint64_t v11 = v13;
      int v12 = v11 + 1;
    }
    else
    {
      int v12 = sub_1CC00319C((void **)(a1 + 24), &v13);
    }
    *(void *)(a1 + 32) = v12;
    uint64_t v6 = *(void *)(a1 + 24);
    unsigned int v5 = (((unint64_t)v12 - v6) >> 4) - 1;
    *((_DWORD *)v10 + 2) = v5;
  }
  return v6 + 16 * v5 + 8;
}

void *sub_1CC5F69CC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5CF658(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1CC5F6A9C()
{
}

void *sub_1CC5F6AB0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2617A58;
  return result;
}

void sub_1CC5F6AE8(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2617A58;
}

void sub_1CC5F6B14(_DWORD *a1)
{
  unsigned int v1 = a1[4];
  if (v1)
  {
    uint64_t v2 = 104 * v1;
    uint64_t v3 = (void **)(*(void *)a1 + 16);
    do
    {
      if (((unint64_t)*(v3 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v3 != *(v3 - 1)) {
        free(*v3);
      }
      v3 += 13;
      v2 -= 104;
    }
    while (v2);
  }
}

uint64_t sub_1CC5F6B7C(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = &v3[v2];
    do
    {
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v6 = *v3;
      if (*v3 == *(void *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        unint64_t v8 = *(void *)a1;
      }
      else
      {
        uint64_t v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E) {
          LOBYTE(v7) = 30;
        }
        unint64_t v8 = v6 + (4096 << v7);
      }
      for (unint64_t i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 176; i <= v8; i += 176)
      {
        uint64_t v10 = *(void **)(i - 24);
        if ((void *)(i - 8) != v10) {
          free(v10);
        }
        uint64_t v11 = *(void **)(i - 56);
        if ((void *)(i - 40) != v11) {
          free(v11);
        }
        int v12 = *(void **)(i - 88);
        if ((void *)(i - 72) != v12) {
          free(v12);
        }
        long long v13 = *(void **)(i - 168);
        if ((void *)(i - 152) != v13) {
          free(v13);
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v14 = *(unsigned int *)(a1 + 72);
  if (v14)
  {
    uint64_t v16 = *(void **)(a1 + 64);
    int v17 = &v16[2 * v14];
    do
    {
      unint64_t v18 = *v16 + v16[1];
      for (unint64_t j = ((*v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 176; j <= v18; j += 176)
        sub_1CC5F62A0(j - 168);
      v16 += 2;
    }
    while (v16 != v17);
  }

  return sub_1CBFFBB10(a1);
}

uint64_t *sub_1CC5F6CF0(uint64_t a1, uint64_t *a2)
{
  unint64_t v8 = 0;
  char v4 = sub_1CC5F6DD4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1CC5F6E5C(a1, v7);
    unint64_t v8 = 0;
    sub_1CC5F6DD4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    uint64_t result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *uint64_t result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1CC5F6DD4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(a1 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        int v6 = (void *)(a1 + 16 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

void *sub_1CC5F6E5C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC5F6F28(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC5F6F28(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC5F6DD4(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

double sub_1CC5F6FD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = 0;
  char v4 = sub_1CC5F70D4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  uint64_t v6 = v9;
  if (v4) {
    return result;
  }
  int v7 = *(_DWORD *)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_8;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_8:
    sub_1CC5F7160(a1, v8);
    uint64_t v9 = 0;
    sub_1CC5F70D4(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    uint64_t v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)v6 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t v6 = *a2;
  *(void *)(v6 + 8) = v6 + 40;
  *(void *)(v6 + 16) = v6 + 40;
  *(void *)&double result = 8;
  *(void *)(v6 + 24) = 8;
  *(_DWORD *)(v6 + 32) = 0;
  return result;
}

uint64_t sub_1CC5F70D4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 104 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(a1 + 104 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

void *sub_1CC5F7160(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(104 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC5F7238(a1, v4, v4 + 104 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 104 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 13;
      v11 -= 104;
    }
    while (v11);
  }
  return result;
}

void sub_1CC5F7238(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 104 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 13;
      v8 -= 104;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *(void *)v4;
      if ((*(void *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v15 = 0;
        sub_1CC5F70D4(*(void *)a1, *(_DWORD *)(a1 + 16), v9, &v15);
        unsigned int v10 = v15;
        uint64_t v11 = v15 + 5;
        *int v15 = *(void *)v4;
        v10[1] = v11;
        int v12 = *(void **)(v4 + 8);
        long long v13 = *(void **)(v4 + 16);
        if (v13 == v12)
        {
          v10[2] = v11;
          uint64_t v14 = *(unsigned int *)(v4 + 28);
          int v12 = *(void **)(v4 + 16);
          if (v14)
          {
            memmove(v11, v12, 8 * v14);
            long long v13 = *(void **)(v4 + 8);
            int v12 = *(void **)(v4 + 16);
          }
        }
        else
        {
          v10[2] = v13;
          *(void *)(v4 + 16) = v12;
          long long v13 = v12;
        }
        v10[3] = *(void *)(v4 + 24);
        *((_DWORD *)v10 + 8) = *(_DWORD *)(v4 + 32);
        *(void *)(v4 + 24) = 8;
        *(_DWORD *)(v4 + 32) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (v12 != v13) {
          free(v12);
        }
      }
      v4 += 104;
    }
    while (v4 != a3);
  }
}

BOOL sub_1CC5F7364(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1CC5F20DC(a5, a2 + 8);
  uint64_t v7 = *(unsigned int *)(a3 + 8);
  return v7 == *(_DWORD *)(a5 + 8) && memcmp(*(const void **)a5, *(const void **)a3, 4 * v7) == 0;
}

void *sub_1CC5F73C4(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBA0E618((uint64_t)a1, a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC5F7424(a1, (uint64_t)a2, a2, v7);
    *unint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC5F7424(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC5F74D8((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CBA0E618((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

void *sub_1CC5F74D8(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  char v4 = *(void **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD40E788(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC5F75A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_6;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      int v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    if (v10) {
      int v7 = v10;
    }
  }
LABEL_6:
  *a3 = v7;
  return result;
}

void *sub_1CC5F7650(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CB883C50((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CB883B0C((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

uint64_t sub_1CC5F7704(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    void *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    uint64_t v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      BOOL v12 = 0;
      uint64_t result = sub_1CC5F75A4((uint64_t)v5, v10, &v12);
      int v11 = v12;
      *BOOL v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void *sub_1CC5F77C8(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v3 = a1[2];
  unsigned int v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  uint64_t v7 = a1;
  sub_1CBFB070C((uint64_t)a1, v4);
  uint64_t v8 = 0;
  sub_1CBF8BDAC(*(void *)v7, v7[4], *a2, &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*a3 != -4096) {
    --a1[3];
  }
  return a3;
}

uint64_t sub_1CC5F7884(void *a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void, void *))(*(void *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  uint64_t result = *a2;
  *a2 = 0;
  if (v4)
  {
    uint64_t v9 = "Error reading bitcode file: ";
    __int16 v10 = 259;
    (*(void (**)(void *__return_ptr))(*(void *)result + 24))(v6);
    __int16 v8 = 260;
    v7[0] = (uint64_t)v6;
    sub_1CD3E3950((uint64_t *)&v9, v7, (uint64_t)v11);
    llvm::report_fatal_error((llvm *)v11, (const llvm::Twine *)1);
  }
  *a1 = result;
  return result;
}

void sub_1CC5F795C()
{
}

llvm::MDNode *llvm::MDBuilder::createRange(llvm::IntegerType **this, const llvm::APInt *a2, const llvm::APInt *a3)
{
  uint64_t v6 = llvm::IntegerType::get(*this, (llvm::LLVMContext *)*((unsigned int *)a2 + 2));
  Splat = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v6, a2, v7);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v6 + 32) | ((unint64_t)(*(_DWORD *)(v6 + 8) == 19) << 32)), (uint64_t)Splat);
  }
  __int16 v10 = (llvm::Constant *)llvm::ConstantInt::get(*(llvm::ConstantInt **)v6, a3, v8);
  if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
    __int16 v10 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v6 + 32) | ((unint64_t)(*(_DWORD *)(v6 + 8) == 19) << 32)), (uint64_t)v10);
  }

  return llvm::MDBuilder::createRange((llvm::MDBuilder *)this, Splat, v10);
}

llvm::MDNode *llvm::MDBuilder::createRange(llvm::MDBuilder *this, llvm::Constant *a2, llvm::Constant *a3)
{
  void v7[2] = *MEMORY[0x1E4F143B8];
  if (a3 == a2) {
    return 0;
  }
  uint64_t v4 = *(void *)this;
  v7[0] = llvm::ValueAsMetadata::get(a2, a2);
  v7[1] = llvm::ValueAsMetadata::get(a3, v5);
  return llvm::MDTuple::getImpl(v4, v7, 2, 0, 1);
}

llvm::MDNode *llvm::MDBuilder::mergeCallbackEncodings(llvm::MDBuilder *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    uint64_t v8 = *(void *)this;
    unsigned int v13 = a3;
    return llvm::MDTuple::getImpl(v8, &v13, 1, 0, 1);
  }
  unsigned int v13 = v15;
  uint64_t v14 = 0x400000000;
  uint64_t v6 = *((unsigned int *)a2 + 2);
  uint64_t v7 = (v6 + 1);
  if (v6 == -1)
  {
    uint64_t v7 = 0;
  }
  else
  {
    if (v7 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(v13, 8 * v7);
    LODWORD(v14) = v6 + 1;
    if (!v6)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 1;
      goto LABEL_10;
    }
  }
  uint64_t v10 = 0;
  int v11 = (char *)a2 - 8 * *((unsigned int *)a2 + 2);
  do
  {
    *((void *)v13 + v10) = *(void *)&v11[8 * v10];
    ++v10;
  }
  while (v6 != v10);
LABEL_10:
  *((void *)v13 + v6) = a3;
  Impl = llvm::MDTuple::getImpl(*(void *)this, v13, v7, 0, 1);
  if (v13 != v15) {
    free(v13);
  }
  return Impl;
}

llvm::MDNode *llvm::MDBuilder::createAnonymousAARoot(uint64_t **a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  v14[3] = *MEMORY[0x1E4F143B8];
  BOOL v12 = v14;
  uint64_t v13 = 0x300000000;
  sub_1CB90CB08((uint64_t)&v12, 1uLL, 0);
  if (a4)
  {
    if (v13 >= HIDWORD(v13)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v12 + v13) = a4;
    LODWORD(v13) = v13 + 1;
  }
  if (a3)
  {
    uint64_t v8 = llvm::MDString::get(*a1, a2, a3);
    if (v13 >= HIDWORD(v13)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v12 + v13) = v8;
    unsigned int v9 = v13 + 1;
    LODWORD(v13) = v13 + 1;
  }
  else
  {
    unsigned int v9 = v13;
  }
  Impl = llvm::MDTuple::getImpl((uint64_t)*a1, v12, v9, 1, 1);
  llvm::MDNode::replaceOperandWith(Impl, 0, Impl);
  if (v12 != v14) {
    free(v12);
  }
  return Impl;
}

llvm::MDNode *llvm::MDBuilder::createTBAANode(uint64_t **a1, unsigned __int8 *a2, const llvm::APInt *a3, uint64_t a4, int a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  if (a5)
  {
    uint64_t v10 = *v8;
    int v11 = *(llvm::ConstantInt **)(*v8 + 1984);
    unsigned int v12 = *(_DWORD *)(v10 + 1992);
    LODWORD(v21) = v12 >> 8;
    if (v12 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v13 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v12) + 63);
    if (v12 <= 0xFF) {
      LOBYTE(v13) = 0;
    }
    __int16 v20 = (void *)(v13 & 1);
    uint64_t v14 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v20, a3);
    if (v21 >= 0x41 && v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
    int v15 = *a1;
    __int16 v20 = llvm::MDString::get(v15, a2, (size_t)a3);
    uint64_t v21 = a4;
    uint64_t v22 = llvm::ValueAsMetadata::get(v14, v16);
    uint64_t v17 = (uint64_t)v15;
    uint64_t v18 = 3;
  }
  else
  {
    __int16 v20 = llvm::MDString::get(*a1, a2, (size_t)a3);
    uint64_t v21 = a4;
    uint64_t v17 = (uint64_t)v8;
    uint64_t v18 = 2;
  }
  return llvm::MDTuple::getImpl(v17, &v20, v18, 0, 1);
}

llvm::MDNode *llvm::MDBuilder::createAliasScopeDomain(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  int v3 = *a1;
  int v5 = llvm::MDString::get(*a1, a2, a3);
  return llvm::MDTuple::getImpl((uint64_t)v3, &v5, 1, 0, 1);
}

llvm::MDNode *llvm::MDBuilder::createAliasScope(uint64_t **a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  void v7[2] = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  v7[0] = llvm::MDString::get(*a1, a2, a3);
  v7[1] = a4;
  return llvm::MDTuple::getImpl((uint64_t)v5, v7, 2, 0, 1);
}

llvm::MDNode *llvm::MDBuilder::createTBAAStructNode(void **a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3 = a3;
  v22[4] = *MEMORY[0x1E4F143B8];
  __int16 v20 = v22;
  uint64_t v21 = 0x400000000;
  sub_1CB90CB08((uint64_t)&v20, 3 * a3, 0);
  uint64_t v6 = *a1;
  uint64_t v7 = v3;
  if (v3)
  {
    uint64_t v8 = (llvm::ConstantInt *)(*v6 + 1984);
    unsigned int v9 = (uint64_t *)(a2 + 16);
    unsigned int v10 = 2;
    do
    {
      int v11 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v8, *(v9 - 2), 0);
      uint64_t v13 = llvm::ValueAsMetadata::get(v11, v12);
      *((void *)v20 + v10 - 2) = v13;
      uint64_t v14 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v8, *(v9 - 1), 0);
      uint64_t v16 = llvm::ValueAsMetadata::get(v14, v15);
      *((void *)v20 + v10 - 1) = v16;
      uint64_t v17 = *v9;
      v9 += 3;
      *((void *)v20 + v10) = v17;
      v10 += 3;
      --v7;
    }
    while (v7);
    uint64_t v6 = *a1;
  }
  Impl = llvm::MDTuple::getImpl((uint64_t)v6, v20, v21, 0, 1);
  if (v20 != v22) {
    free(v20);
  }
  return Impl;
}

llvm::MDNode *llvm::MDBuilder::createTBAAStructTypeNode(uint64_t **a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5 = a5;
  void v21[4] = *MEMORY[0x1E4F143B8];
  unsigned int v19 = v21;
  uint64_t v20 = 0x400000000;
  sub_1CB90CB08((uint64_t)&v19, (2 * a5) | 1, 0);
  uint64_t v10 = **a1;
  int v11 = llvm::MDString::get(*a1, a2, a3);
  *(void *)unsigned int v19 = v11;
  if (v5)
  {
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (void *)(a4 + 8 * v12);
      *((void *)v19 + (v12 + 1)) = *v13;
      uint64_t v14 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(v10 + 1984), v13[1], 0);
      uint64_t v16 = llvm::ValueAsMetadata::get(v14, v15);
      v12 += 2;
      *((void *)v19 + v12) = v16;
    }
    while (2 * v5 != v12);
  }
  Impl = llvm::MDTuple::getImpl((uint64_t)*a1, v19, v20, 0, 1);
  if (v19 != v21) {
    free(v19);
  }
  return Impl;
}

llvm::MDNode *llvm::MDBuilder::createTBAAScalarTypeNode(uint64_t **a1, unsigned __int8 *a2, const llvm::APInt *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = **a1;
  uint64_t v10 = *(llvm::ConstantInt **)(v9 + 1984);
  unint64_t v11 = *(unsigned int *)(v9 + 1992);
  LODWORD(v18) = v11 >> 8;
  if (v11 >> 8 > 0x40) {
    operator new[]();
  }
  if (v11 <= 0xFF) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
  }
  uint64_t v17 = (void *)(v12 & a5);
  uint64_t v13 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v17, a3);
  if (v18 >= 0x41 && v17) {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
  }
  uint64_t v14 = *a1;
  uint64_t v17 = llvm::MDString::get(v14, a2, (size_t)a3);
  uint64_t v18 = a4;
  uint64_t v19 = llvm::ValueAsMetadata::get(v13, v15);
  return llvm::MDTuple::getImpl((uint64_t)v14, &v17, 3, 0, 1);
}

llvm::MDNode *llvm::MDBuilder::createTBAAStructTagNode(uint64_t **this, llvm::MDNode *a2, llvm::MDNode *a3, uint64_t a4, int a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = **this;
  uint64_t v10 = *(llvm::ConstantInt **)(v9 + 1984);
  unsigned int v11 = *(_DWORD *)(v9 + 1992);
  LODWORD(v22) = v11 >> 8;
  if (v11 >> 8 > 0x40) {
    operator new[]();
  }
  if (v11 <= 0xFF) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v11) + 63);
  }
  uint64_t v21 = (llvm::MDNode *)(v12 & a4);
  uint64_t v14 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v21, a3);
  if (v22 >= 0x41 && v21) {
    MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
  }
  int v15 = *this;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = llvm::ValueAsMetadata::get(v14, v13);
  if (a5)
  {
    uint64_t v19 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(v9 + 1984), 1uLL, 0);
    uint64_t v24 = llvm::ValueAsMetadata::get(v19, v20);
    uint64_t v16 = (uint64_t)v15;
    uint64_t v17 = 4;
  }
  else
  {
    uint64_t v16 = (uint64_t)v15;
    uint64_t v17 = 3;
  }
  return llvm::MDTuple::getImpl(v16, &v21, v17, 0, 1);
}

void llvm::Mangler::getNameWithPrefix(uint64_t a1, void **a2, uint64_t a3)
{
  int v4 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  uint64_t v11 = a1;
  int v10 = 0;
  unsigned int v3 = (char *)&unk_1F2646FA8;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1CC5F8C10(&v3, a2, 0, a3, 0x5F005F0000uLL >> (8 * *(_DWORD *)(a3 + 28)));
  unsigned int v3 = (char *)&unk_1F2646B98;
  if (v10 == 1)
  {
    if (v5) {
      MEMORY[0x1D25D9CB0](v5, 0x1000C8077774924);
    }
  }
}

void sub_1CC5F8C10(char **this, void **a2, int a3, uint64_t a4, char a5)
{
  v41[32] = *MEMORY[0x1E4F143B8];
  size_t v39 = v41;
  long long v40 = xmmword_1CD96DBF0;
  char v10 = *((unsigned char *)a2 + 32);
  if (*((unsigned char *)a2 + 33) == 1)
  {
    size_t v11 = 0;
    unint64_t v12 = 0;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        unint64_t v12 = (const char *)*a2;
        if (*a2) {
          size_t v11 = strlen((const char *)*a2);
        }
        else {
          size_t v11 = 0;
        }
        break;
      case 4:
        char v29 = *((unsigned char *)*a2 + 23);
        if (v29 >= 0) {
          unint64_t v12 = (const char *)*a2;
        }
        else {
          unint64_t v12 = (const char *)**a2;
        }
        if (v29 >= 0) {
          size_t v11 = v29 & 0x7F;
        }
        else {
          size_t v11 = (*a2)[1];
        }
        break;
      case 5:
        unint64_t v12 = (const char *)*a2;
        size_t v11 = (size_t)a2[1];
        break;
      default:
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    int v31 = 0;
    char v35 = 0;
    uint64_t v36 = 0;
    uint64_t v38 = &v39;
    int v37 = 0;
    int v30 = &unk_1F2646FA8;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v13 = llvm::Twine::printOneChild((llvm::raw_ostream *)this, (llvm::raw_ostream *)&v30, (uint64_t)*a2, (size_t)a2[1], v10);
    llvm::Twine::printOneChild(v13, (llvm::raw_ostream *)&v30, (uint64_t)a2[2], (size_t)a2[3], *((unsigned char *)a2 + 33));
    int v30 = &unk_1F2646B98;
    if (v37 == 1 && v32) {
      MEMORY[0x1D25D9CB0](v32, 0x1000C8077774924);
    }
    unint64_t v12 = (const char *)v39;
    size_t v11 = v40;
  }
  int v14 = *(unsigned __int8 *)v12;
  if (v14 == 1)
  {
    uint64_t v15 = v11 != 0;
    if (v11) {
      uint64_t v16 = v12 + 1;
    }
    else {
      uint64_t v16 = v12;
    }
    size_t v17 = v11 - v15;
    uint64_t v18 = this[4];
    if (v11 - v15 > this[3] - v18)
    {
      uint64_t v19 = (llvm::raw_ostream *)this;
      size_t v20 = v11 - v15;
LABEL_44:
      llvm::raw_ostream::write(v19, v16, v20);
      goto LABEL_48;
    }
    if (v11 == v15) {
      goto LABEL_48;
    }
    memcpy(v18, v16, v11 - v15);
    size_t v25 = (size_t)&this[4][v17];
    goto LABEL_47;
  }
  int v21 = *(_DWORD *)(a4 + 28);
  if ((v21 - 3) < 2 && v14 == 63) {
    a5 = 0;
  }
  if (a3 == 2)
  {
    size_t v24 = v21 == 2;
    uint64_t v26 = this[4];
    if (this[3] - v26 >= v24)
    {
      if (v21 == 2)
      {
        uint64_t v23 = "l";
LABEL_37:
        memcpy(v26, v23, v24);
        this[4] += v24;
      }
    }
    else
    {
      if (v21 == 2) {
        uint64_t v23 = "l";
      }
      else {
        uint64_t v23 = "";
      }
LABEL_36:
      llvm::raw_ostream::write((llvm::raw_ostream *)this, v23, v24);
    }
  }
  else if (a3 == 1)
  {
    uint64_t v23 = ".L";
    size_t v24 = 2;
    switch(*(_DWORD *)(a4 + 28))
    {
      case 1:
      case 3:
        goto LABEL_35;
      case 2:
      case 4:
        uint64_t v23 = "L";
        goto LABEL_34;
      case 5:
        uint64_t v23 = "@";
        goto LABEL_34;
      case 6:
        uint64_t v23 = "$";
LABEL_34:
        size_t v24 = 1;
        goto LABEL_35;
      case 7:
        uint64_t v23 = "L..";
        size_t v24 = 3;
LABEL_35:
        uint64_t v26 = this[4];
        if (v24 > this[3] - v26) {
          goto LABEL_36;
        }
        goto LABEL_37;
      default:
        break;
    }
  }
  if (a5)
  {
    unsigned int v27 = this[4];
    if (v27 >= this[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)this, a5);
    }
    else
    {
      this[4] = v27 + 1;
      *unsigned int v27 = a5;
    }
  }
  uint64_t v28 = this[4];
  if (v11 > this[3] - v28)
  {
    uint64_t v19 = (llvm::raw_ostream *)this;
    uint64_t v16 = v12;
    size_t v20 = v11;
    goto LABEL_44;
  }
  if (v11)
  {
    memcpy(v28, v12, v11);
    size_t v25 = (size_t)&this[4][v11];
LABEL_47:
    this[4] = (char *)v25;
  }
LABEL_48:
  if (v39 != v41) {
    free(v39);
  }
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *this, char **a2, const llvm::GlobalValue *a3, int a4)
{
  BOOL v65 = a3;
  if (a4) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  if ((*((_DWORD *)a3 + 8) & 0xF) == 8) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = *((void *)a3 + 5);
  char v8 = (const llvm::DataLayout *)(v7 + 272);
  if ((*((unsigned char *)a3 + 23) & 0x10) == 0)
  {
    int v30 = sub_1CD5D0D10((uint64_t *)this, (uint64_t *)&v65);
    unsigned int v31 = *((_DWORD *)v30 + 2);
    if (!v31)
    {
      unsigned int v31 = *((_DWORD *)this + 2);
      *((_DWORD *)v30 + 2) = v31;
    }
    uint64_t v61 = "__unnamed_";
    uint64_t v63 = v31;
    __int16 v64 = 2051;
    char v27 = 0x5F005F0000uLL >> (8 * *(_DWORD *)(v7 + 300));
    goto LABEL_32;
  }
  uint64_t v9 = ***(void ***)a3;
  uint64_t v10 = *(void *)(v9 + 152);
  uint64_t v11 = *(unsigned int *)(v9 + 168);
  if (v11)
  {
    LODWORD(v12) = (v11 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v13 = v10 + 16 * v12;
    int v14 = *(const llvm::GlobalValue **)v13;
    if (*(const llvm::GlobalValue **)v13 == a3) {
      goto LABEL_15;
    }
    int v15 = 1;
    while (v14 != (const llvm::GlobalValue *)-4096)
    {
      int v16 = v12 + v15++;
      uint64_t v12 = v16 & (v11 - 1);
      int v14 = *(const llvm::GlobalValue **)(v10 + 16 * v12);
      if (v14 == a3)
      {
        uint64_t v13 = v10 + 16 * v12;
        goto LABEL_15;
      }
    }
  }
  uint64_t v13 = v10 + 16 * v11;
LABEL_15:
  size_t v17 = *(void **)(v13 + 8);
  uint64_t v20 = *v17;
  uint64_t v18 = (const char *)(v17 + 2);
  uint64_t v19 = v20;
  unint64_t v21 = 0x5F005F0000uLL >> (8 * *(unsigned char *)(v7 + 300));
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  LODWORD(v63) = 0;
  uint64_t v22 = sub_1CC5BE54C((uint64_t)a3, (uint64_t)&v61);
  MEMORY[0x1D25D9CD0](v61, 8);
  if (v22 && *(unsigned char *)(v22 + 16)) {
    uint64_t v22 = 0;
  }
  if (!v19) {
    goto LABEL_27;
  }
  int v23 = *(unsigned __int8 *)v18;
  if (v23 == 1) {
    goto LABEL_31;
  }
  int v24 = *(_DWORD *)(v7 + 300);
  if ((v24 - 3) > 1)
  {
LABEL_27:
    if (v22)
    {
      int v24 = *(_DWORD *)(v7 + 300);
      goto LABEL_29;
    }
LABEL_31:
    __int16 v64 = 261;
    uint64_t v61 = v18;
    uint64_t v62 = v19;
    char v27 = v21;
LABEL_32:
    sub_1CC5F8C10(a2, (void **)&v61, v6, v7 + 272, v27);
    return;
  }
  if (v23 == 63 || v22 == 0) {
    goto LABEL_31;
  }
LABEL_29:
  int v26 = (*(unsigned __int16 *)(v22 + 18) >> 4) & 0x3FF;
  if (v24 != 4 && v26 != 80) {
    goto LABEL_31;
  }
  if (v26 == 65)
  {
    LOBYTE(v21) = 64;
  }
  else if (v26 == 80)
  {
    LOBYTE(v21) = 0;
  }
  __int16 v64 = 261;
  uint64_t v61 = v18;
  uint64_t v62 = v19;
  sub_1CC5F8C10(a2, (void **)&v61, v6, v7 + 272, v21);
  if (v26 == 80)
  {
    uint64_t v28 = a2[4];
    if (v28 >= a2[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a2, 64);
    }
    else
    {
      a2[4] = v28 + 1;
      *uint64_t v28 = 64;
    }
  }
  else if ((v26 - 64) > 0x10 || ((1 << (v26 - 64)) & 0x10003) == 0)
  {
    return;
  }
  uint64_t v32 = *(void *)(v22 + 24);
  if (*(_DWORD *)(v32 + 8) < 0x100u
    || (int v33 = *(_DWORD *)(v32 + 12), v33 == 1)
    || v33 == 2
    && (uint64_t v34 = *(void *)(v22 + 112)) != 0
    && (unsigned int v35 = *(_DWORD *)(v34 + 8), v35 >= 3)
    && ((uint64_t v36 = *(void *)(v34 + 56)) != 0 && (*(unsigned char *)(v36 + 21) & 2) != 0
     || v35 >= 4 && (uint64_t v37 = *(void *)(v34 + 64)) != 0 && (*(unsigned char *)(v37 + 21) & 2) != 0))
  {
    size_t v60 = (llvm::raw_ostream *)a2;
    uint64_t v38 = *(unsigned int *)(*(void *)(v7 + 504) + 4);
    uint64_t v39 = sub_1CB923B44((llvm::Function *)v22);
    if (v39 == v40)
    {
      unsigned int v43 = 0;
    }
    else
    {
      uint64_t v41 = v39;
      uint64_t v42 = v40;
      unsigned int v43 = 0;
      unint64_t v44 = (unint64_t)(v38 + 7) >> 3;
      do
      {
        if (*(unsigned char *)(*(void *)v41 + 8) != 15
          || (uint64_t v45 = *(void *)(*(void *)(v41 + 24) + 112)) == 0
          || (unsigned int v46 = *(_DWORD *)(v41 + 32) + 2, v46 >= *(_DWORD *)(v45 + 8))
          || (uint64_t v56 = *(void *)(v45 + 8 * v46 + 40)) == 0
          || (*(unsigned char *)(v56 + 21) & 2) == 0)
        {
          if (llvm::Argument::hasPassPointeeByValueCopyAttr((llvm::Argument *)v41))
          {
            PassPointeeByValueCopySize = llvm::Argument::getPassPointeeByValueCopySize((llvm::Argument *)v41, v8);
          }
          else
          {
            unsigned int v47 = *(llvm::Type **)v41;
            unint64_t v48 = (unint64_t)(sub_1CB83544C((uint64_t)v8, *(void *)v41) + 7) >> 3;
            BOOL v50 = v49 == 1;
            char Alignment = llvm::DataLayout::getAlignment(v8, v47, 1);
            uint64_t v53 = (1 << Alignment) + v48 - 1;
            uint64_t v54 = -(1 << Alignment);
            PassPointeeByValueCopySize = (llvm::Type *)(v53 & v54);
            if (v50)
            {
              uint64_t v57 = (llvm::Type *)(v53 & v54);
              PassPointeeByValueCopySize = v57;
            }
          }
          v43 += ((unint64_t)PassPointeeByValueCopySize + v44 - 1) / v44 * v44;
        }
        v41 += 40;
      }
      while (v41 != v42);
    }
    size_t v58 = v60;
    uint64_t v59 = (unsigned char *)*((void *)v60 + 4);
    if ((unint64_t)v59 >= *((void *)v60 + 3))
    {
      size_t v58 = llvm::raw_ostream::write(v60, 64);
    }
    else
    {
      *((void *)v60 + 4) = v59 + 1;
      *uint64_t v59 = 64;
    }
    sub_1CD098D14(v58, v43, 0, 0, 0);
  }
}

void llvm::Mangler::getNameWithPrefix(llvm::Mangler *a1, uint64_t a2, const llvm::GlobalValue *a3, int a4)
{
  int v5 = 0;
  char v9 = 0;
  uint64_t v10 = 0;
  uint64_t v12 = a2;
  int v11 = 0;
  int v4 = (char *)&unk_1F2646FA8;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  llvm::Mangler::getNameWithPrefix(a1, &v4, a3, a4);
  int v4 = (char *)&unk_1F2646B98;
  if (v11 == 1)
  {
    if (v6) {
      MEMORY[0x1D25D9CB0](v6, 0x1000C8077774924);
    }
  }
}

void llvm::emitLinkerFlagsForUsedCOFF(llvm *this, llvm::raw_ostream *a2, const llvm::GlobalValue *a3, const llvm::Triple *a4, llvm::Mangler *a5)
{
  if (*((_DWORD *)a3 + 9) != 15 || (*((_DWORD *)a3 + 10) & 0xFFFFFFEF) != 0) {
    return;
  }
  uint64_t v9 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v9) > 9)
  {
    *(_WORD *)(v9 + 8) = 14917;
    *(void *)uint64_t v9 = *(void *)" /INCLUDE:";
    *((void *)this + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(this, " /INCLUDE:", 0xAuLL);
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
LABEL_27:
    llvm::Mangler::getNameWithPrefix(a4, (char **)this, a2, 0);
    return;
  }
  uint64_t v10 = ***(void ***)a2;
  uint64_t v11 = *(void *)(v10 + 152);
  uint64_t v12 = *(unsigned int *)(v10 + 168);
  if (!v12) {
    goto LABEL_15;
  }
  LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = v11 + 16 * v13;
  int v15 = *(llvm::raw_ostream **)v14;
  if (*(llvm::raw_ostream **)v14 != a2)
  {
    int v16 = 1;
    while (v15 != (llvm::raw_ostream *)-4096)
    {
      int v17 = v13 + v16++;
      uint64_t v13 = v17 & (v12 - 1);
      int v15 = *(llvm::raw_ostream **)(v11 + 16 * v13);
      if (v15 == a2)
      {
        uint64_t v14 = v11 + 16 * v13;
        goto LABEL_16;
      }
    }
LABEL_15:
    uint64_t v14 = v11 + 16 * v12;
  }
LABEL_16:
  uint64_t v18 = *(void **)(v14 + 8);
  uint64_t v19 = *v18;
  if (*v18)
  {
    uint64_t v20 = (unsigned __int8 *)(v18 + 2);
    while (1)
    {
      int v21 = *v20;
      if (v21 != 64)
      {
        BOOL v22 = v21 != 95 && (v21 - 48) >= 0xA;
        if (v22 && (v21 & 0xFFFFFFDF) - 65 >= 0x1A) {
          break;
        }
      }
      ++v20;
      if (!--v19) {
        goto LABEL_27;
      }
    }
  }
  int v24 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v24)
  {
    llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *int v24 = 34;
    ++*((void *)this + 4);
  }
  llvm::Mangler::getNameWithPrefix(a4, (char **)this, a2, 0);
  size_t v25 = (unsigned char *)*((void *)this + 4);
  if (*((unsigned char **)this + 3) == v25)
  {
    llvm::raw_ostream::write(this, "\"", 1uLL);
  }
  else
  {
    *size_t v25 = 34;
    ++*((void *)this + 4);
  }
}

uint64_t llvm::MetadataAsValue::MetadataAsValue(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 23;
  *(_DWORD *)(a1 + 20) = v4;
  *(void *)(a1 + 24) = a3;
  uint64_t v5 = a1 + 24;
  if (a3) {
    llvm::MetadataTracking::track(v5, a3, a1);
  }
  return a1;
}

{
  unsigned int v4;
  uint64_t v5;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  unsigned int v4 = *(_DWORD *)(a1 + 20) & 0xC0000000;
  *(_DWORD *)(a1 + 16) = 23;
  *(_DWORD *)(a1 + 20) = v4;
  *(void *)(a1 + 24) = a3;
  uint64_t v5 = a1 + 24;
  if (a3) {
    llvm::MetadataTracking::track(v5, a3, a1);
  }
  return a1;
}

uint64_t llvm::MetadataAsValue::track(llvm::MetadataAsValue *this)
{
  unsigned int v4 = (unsigned __int8 *)*((void *)this + 3);
  uint64_t result = (uint64_t)this + 24;
  unsigned int v3 = v4;
  if (v4) {
    return llvm::MetadataTracking::track(result, v3, (uint64_t)this);
  }
  return result;
}

void llvm::MetadataAsValue::~MetadataAsValue(int32x2_t ****this)
{
  uint64_t v2 = (unsigned __int8 **)(this + 3);
  unsigned int v3 = ***this;
  int v16 = 0;
  if (sub_1CBA0E618((uint64_t)&v3[52], this + 3, &v16))
  {
    *(void *)int v16 = -8192;
    v3[53] = vadd_s32(v3[53], (int32x2_t)0x1FFFFFFFFLL);
  }
  unsigned int v4 = *v2;
  if (*v2) {
    llvm::MetadataTracking::untrack((uint64_t)v2, v4);
  }
  if (*((unsigned char *)this + 17)) {
    llvm::ValueHandleBase::ValueIsDeleted((llvm::ValueHandleBase *)this, (llvm::Value *)v4);
  }
  int v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x8000000) != 0)
  {
    uint64_t v7 = ***this;
    int32x2_t v8 = v7[49];
    uint64_t v9 = v7[51].u32[0];
    if (v9)
    {
      LODWORD(v10) = (v9 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v11 = *(void *)&v8 + 16 * v10;
      uint64_t v12 = *(llvm::MetadataAsValue **)v11;
      if (*(int32x2_t *****)v11 == this) {
        goto LABEL_13;
      }
      int v14 = 1;
      while (v12 != (llvm::MetadataAsValue *)-4096)
      {
        int v15 = v10 + v14++;
        uint64_t v10 = v15 & (v9 - 1);
        uint64_t v12 = *(llvm::MetadataAsValue **)(*(void *)&v8 + 16 * v10);
        if (v12 == (llvm::MetadataAsValue *)this)
        {
          uint64_t v11 = *(void *)&v8 + 16 * v10;
          goto LABEL_13;
        }
      }
    }
    uint64_t v11 = *(void *)&v8 + 16 * v9;
LABEL_13:
    if (v11 != *(void *)&v8 + 16 * v9)
    {
      uint64_t v13 = *(void *)(v11 + 8);
      *(void *)uint64_t v11 = -8192;
      v7[50] = vadd_s32(v7[50], (int32x2_t)0x1FFFFFFFFLL);
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v13 + 8), 0);
      if (v13)
      {
        if ((*(unsigned char *)(v13 + 24) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v13 + 32), 8);
        }
        MEMORY[0x1D25D9CE0](v13, 0x1020C4072C728BCLL);
      }
    }
    int v5 = *((_DWORD *)this + 5);
  }
  if ((v5 & 0x20000000) != 0)
  {
    uint64_t v6 = ***this + 310;
    int v16 = (llvm::MetadataAsValue *)this;
    sub_1CC6035CC(v6, &v16);
    *((_DWORD *)this + 5) &= ~0x20000000u;
  }
  llvm::Value::destroyValueName((uint64_t)this);
}

uint64_t llvm::MetadataAsValue::untrack(llvm::MetadataAsValue *this)
{
  unsigned int v3 = (unsigned __int8 *)*((void *)this + 3);
  uint64_t result = (uint64_t)this + 24;
  uint64_t v2 = v3;
  if (v3)
  {
    int v4 = *v2;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        int v5 = v2;
      }
      else {
        int v5 = 0;
      }
      if ((v4 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v6 = (unint64_t)(v5 + 8);
LABEL_11:
        uint64_t v8 = result;
        return sub_1CC5FA668(v6 + 16, &v8);
      }
      if (v4 == 3) {
        *((void *)v2 + 1) = 0;
      }
    }
    else if ((v2[1] & 0x7F) == 2 || *((_DWORD *)v2 + 3))
    {
      uint64_t v7 = *((void *)v2 + 2);
      if ((v7 & 4) != 0)
      {
        unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::MetadataAsValue::get(uint64_t a1, unsigned __int8 *a2)
{
  int v5 = sub_1CC5F9AC8(a1, a2);
  uint64_t v3 = sub_1CC60538C((_DWORD *)(*(void *)a1 + 416), &v5)[1];
  if (!v3) {
    operator new();
  }
  return v3;
}

llvm::MDNode *sub_1CC5F9AC8(uint64_t a1, unsigned __int8 *a2)
{
  if (a2)
  {
    if (*a2 - 4 > 0x1E || *((_DWORD *)a2 + 2) != 1) {
      return (llvm::MDNode *)a2;
    }
    uint64_t v2 = (unsigned char *)*((void *)a2 - 1);
    if (v2)
    {
      if (*v2 != 1) {
        uint64_t v2 = 0;
      }
      if (v2) {
        return (llvm::MDNode *)v2;
      }
      return (llvm::MDNode *)a2;
    }
    a2 = 0;
  }
  return llvm::MDTuple::getImpl(a1, a2, 0, 0, 1);
}

uint64_t llvm::MetadataAsValue::getIfExists(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_1CC5F9AC8((uint64_t)a1, a2);
  int v4 = (uint64_t *)(*a1 + 416);
  uint64_t v6 = 0;
  uint64_t v7 = v3;
  if (sub_1CBFA3AF4(v4, &v7, &v6)) {
    return *(void *)(v6 + 8);
  }
  else {
    return 0;
  }
}

uint64_t llvm::MetadataAsValue::handleChangedMetadata(int32x2_t ****this, llvm::Metadata *a2)
{
  uint64_t v3 = (llvm::MDNode **)(this + 3);
  int v4 = **this;
  int v16 = sub_1CC5F9AC8((uint64_t)v4, (unsigned __int8 *)a2);
  int v5 = *v4;
  uint64_t v6 = *v4 + 52;
  int v17 = 0;
  if (sub_1CBA0E618((uint64_t)v6, v3, &v17))
  {
    *int v17 = (llvm::MDNode *)-8192;
    v5[53] = vadd_s32(v5[53], (int32x2_t)0x1FFFFFFFFLL);
  }
  uint64_t v7 = *v3;
  if (*v3)
  {
    int v8 = *(unsigned __int8 *)v7;
    if ((v8 - 4) <= 0x1E)
    {
      if ((*((unsigned char *)v7 + 1) & 0x7F) != 2 && !*((_DWORD *)v7 + 3)) {
        goto LABEL_7;
      }
      uint64_t v15 = *((void *)v7 + 2);
      if ((v15 & 4) == 0) {
        goto LABEL_7;
      }
      unint64_t v12 = v15 & 0xFFFFFFFFFFFFFFF8;
      if (!v12) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
    if ((v8 - 3) >= 0xFFFFFFFE) {
      uint64_t v11 = *v3;
    }
    else {
      uint64_t v11 = 0;
    }
    if ((v8 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v12 = (unint64_t)v11 + 8;
LABEL_14:
      int v17 = v3;
      sub_1CC5FA668(v12 + 16, &v17);
      goto LABEL_7;
    }
    if (v8 == 3) {
      *((void *)v7 + 1) = 0;
    }
  }
LABEL_7:
  *uint64_t v3 = 0;
  uint64_t result = (uint64_t)sub_1CC60538C(v6, &v16);
  uint64_t v10 = *(llvm::Value **)(result + 8);
  if (v10)
  {
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)this, v10, (llvm::Value *)1);
    llvm::MetadataAsValue::~MetadataAsValue(this);
    return MEMORY[0x1D25D9CE0]();
  }
  else
  {
    uint64_t v13 = result;
    int v14 = (unsigned __int8 *)v16;
    *uint64_t v3 = v16;
    if (v14) {
      uint64_t result = llvm::MetadataTracking::track((uint64_t)v3, v14, (uint64_t)this);
    }
    *(void *)(v13 + 8) = this;
  }
  return result;
}

uint64_t llvm::MetadataTracking::track(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v6 = *a2;
  if ((v6 - 4) <= 0x1E)
  {
    if ((a2[1] & 0x7F) != 2 && !*((_DWORD *)a2 + 3)) {
      return 0;
    }
    unint64_t v9 = sub_1CC5FB168((void *)a2 + 2);
    if (!v9)
    {
      int v6 = *a2;
      goto LABEL_10;
    }
LABEL_13:
    uint64_t v10 = *(void *)(v9 + 8);
    *(void *)&long long v24 = a3;
    *((void *)&v24 + 1) = v10;
    LOBYTE(v10) = *(unsigned char *)(v9 + 16);
    uint64_t v23 = a1;
    if (v10)
    {
      unint64_t v11 = v9 + 24;
      int v12 = 4;
    }
    else
    {
      int v12 = *(_DWORD *)(v9 + 32);
      if (!v12)
      {
        int v21 = 0;
        goto LABEL_30;
      }
      unint64_t v11 = *(void *)(v9 + 24);
    }
    int v13 = v12 - 1;
    unsigned int v14 = v13 & ((a1 >> 4) ^ (a1 >> 9));
    uint64_t v15 = (void *)(v11 + 24 * v14);
    uint64_t v16 = *v15;
    if (*v15 == a1)
    {
LABEL_31:
      ++*(void *)(v9 + 8);
      return 1;
    }
    int v17 = 0;
    int v18 = 1;
    while (v16 != -4096)
    {
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = v16 == -8192;
      }
      if (v19) {
        int v17 = v15;
      }
      unsigned int v20 = v14 + v18++;
      unsigned int v14 = v20 & v13;
      uint64_t v15 = (void *)(v11 + 24 * v14);
      uint64_t v16 = *v15;
      if (*v15 == a1) {
        goto LABEL_31;
      }
    }
    if (v17) {
      int v21 = v17;
    }
    else {
      int v21 = v15;
    }
LABEL_30:
    BOOL v22 = sub_1CC605550(v9 + 16, (uint64_t)&v23, &v23, v21);
    *BOOL v22 = v23;
    *(_OWORD *)(v22 + 1) = v24;
    goto LABEL_31;
  }
  if ((v6 - 3) >= 0xFFFFFFFE) {
    int v8 = a2;
  }
  else {
    int v8 = 0;
  }
  if ((v6 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v9 = (unint64_t)(v8 + 8);
    goto LABEL_13;
  }
LABEL_10:
  if (v6 == 3)
  {
    *((void *)a2 + 1) = a1;
    return 1;
  }
  return 0;
}

unint64_t llvm::ReplaceableMetadataImpl::getOrCreate(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 - 4) > 0x1E)
  {
    unsigned int v3 = v1 - 3;
    BOOL v4 = __CFADD__(v3, 2);
    if (v3 >= 0xFFFFFFFE) {
      int v5 = a1;
    }
    else {
      int v5 = 0;
    }
    int v6 = v5 + 8;
    if (v4) {
      return (unint64_t)v6;
    }
    else {
      return 0;
    }
  }
  else if ((a1[1] & 0x7F) == 2 || *((_DWORD *)a1 + 3))
  {
    return sub_1CC5FB168((void *)a1 + 2);
  }
  else
  {
    return 0;
  }
}

void *llvm::ReplaceableMetadataImpl::addRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = *(unsigned char *)(a1 + 16);
  uint64_t result = (void *)(a1 + 16);
  uint64_t v6 = *(result - 1);
  uint64_t v18 = a2;
  *(void *)&long long v19 = a3;
  *((void *)&v19 + 1) = v6;
  if (v5)
  {
    uint64_t v7 = result + 1;
    int v8 = 4;
  }
  else
  {
    int v8 = *(_DWORD *)(a1 + 32);
    if (!v8)
    {
      int v17 = 0;
LABEL_18:
      uint64_t result = sub_1CC605550((uint64_t)result, (uint64_t)&v18, &v18, v17);
      *uint64_t result = v18;
      *(_OWORD *)(result + 1) = v19;
      uint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_19;
    }
    uint64_t v7 = *(void **)(a1 + 24);
  }
  int v9 = v8 - 1;
  unsigned int v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v11 = &v7[3 * v10];
  uint64_t v12 = *v11;
  if (*v11 != a2)
  {
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      unint64_t v11 = &v7[3 * v10];
      uint64_t v12 = *v11;
      if (*v11 == a2) {
        goto LABEL_19;
      }
    }
    if (v13) {
      int v17 = v13;
    }
    else {
      int v17 = v11;
    }
    goto LABEL_18;
  }
LABEL_19:
  *(void *)(a1 + 8) = v6 + 1;
  return result;
}

uint64_t llvm::MetadataTracking::untrack(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *a2;
  if ((v2 - 4) > 0x1E)
  {
    if ((v2 - 3) >= 0xFFFFFFFE) {
      unsigned int v3 = a2;
    }
    else {
      unsigned int v3 = 0;
    }
    if ((v2 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v4 = (unint64_t)(v3 + 8);
LABEL_10:
      uint64_t v6 = result;
      return sub_1CC5FA668(v4 + 16, &v6);
    }
    if (v2 == 3) {
      *((void *)a2 + 1) = 0;
    }
  }
  else if ((a2[1] & 0x7F) == 2 || *((_DWORD *)a2 + 3))
  {
    uint64_t v5 = *((void *)a2 + 2);
    if ((v5 & 4) != 0)
    {
      unint64_t v4 = v5 & 0xFFFFFFFFFFFFFFF8;
      if (v4) {
        goto LABEL_10;
      }
    }
  }
  return result;
}

unint64_t llvm::ReplaceableMetadataImpl::getIfExists(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 - 4) > 0x1E)
  {
    unsigned int v3 = v1 - 3;
    BOOL v4 = __CFADD__(v3, 2);
    if (v3 >= 0xFFFFFFFE) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = v5 + 8;
    if (v4) {
      return (unint64_t)v6;
    }
    else {
      return 0;
    }
  }
  else if ((a1[1] & 0x7F) == 2 || *((_DWORD *)a1 + 3))
  {
    return *((void *)a1 + 2) & ((uint64_t)(*((void *)a1 + 2) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::ReplaceableMetadataImpl::dropRef(llvm::ReplaceableMetadataImpl *this, void *a2)
{
  unsigned int v3 = a2;
  return sub_1CC5FA668((uint64_t)this + 16, &v3);
}

uint64_t llvm::MetadataTracking::retrack(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = *a2;
  if ((v4 - 4) > 0x1E)
  {
    unsigned int v6 = v4 - 3;
    BOOL v7 = __CFADD__(v6, 2);
    if (v6 >= 0xFFFFFFFE) {
      int v8 = a2;
    }
    else {
      int v8 = 0;
    }
    if (!v7) {
      return 0;
    }
    unint64_t v9 = (unint64_t)(v8 + 8);
    goto LABEL_12;
  }
  if ((a2[1] & 0x7F) != 2 && !*((_DWORD *)a2 + 3)) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v10 = *((void *)a2 + 2);
  if ((v10 & 4) != 0)
  {
    unint64_t v9 = v10 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
LABEL_12:
      llvm::ReplaceableMetadataImpl::moveRef(v9, a1, a3);
      return 1;
    }
  }
  return result;
}

double llvm::ReplaceableMetadataImpl::moveRef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  char v5 = v6;
  uint64_t v7 = v4 + 8;
  if (v6)
  {
    int v8 = 4;
    uint64_t v9 = v4 + 8;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
    int v8 = *(_DWORD *)(a1 + 32);
    if (!v8)
    {
      unsigned int v27 = 0;
      goto LABEL_25;
    }
  }
  int v10 = v8 - 1;
  unsigned int v11 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v12 = v9 + 24 * v11;
  uint64_t v13 = *(void *)v12;
  if (*(void *)v12 == a2) {
    goto LABEL_4;
  }
  int v28 = 1;
  while (v13 != -4096)
  {
    unsigned int v29 = v11 + v28++;
    unsigned int v11 = v29 & v10;
    uint64_t v12 = v9 + 24 * v11;
    uint64_t v13 = *(void *)v12;
    if (*(void *)v12 == a2) {
      goto LABEL_4;
    }
  }
  if (v5)
  {
    unsigned int v27 = 4;
    uint64_t v9 = v4 + 8;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 24);
    unsigned int v27 = *(_DWORD *)(a1 + 32);
  }
LABEL_25:
  uint64_t v12 = v9 + 24 * v27;
LABEL_4:
  long long v14 = *(_OWORD *)(v12 + 8);
  *(void *)uint64_t v12 = -8192;
  int v15 = *(_DWORD *)(a1 + 16);
  int v16 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 16) = v15 - 2;
  *(_DWORD *)(a1 + 20) = v16;
  uint64_t v31 = a3;
  long long v32 = v14;
  long long v33 = v14;
  if (v15)
  {
    int v17 = 4;
  }
  else
  {
    int v17 = *(_DWORD *)(a1 + 32);
    if (!v17)
    {
      size_t v25 = 0;
LABEL_19:
      int v26 = sub_1CC605550(v4, (uint64_t)&v31, &v31, v25);
      void *v26 = v31;
      *(void *)&long long v14 = v32;
      *(_OWORD *)(v26 + 1) = v32;
      return *(double *)&v14;
    }
    uint64_t v7 = *(void *)(a1 + 24);
  }
  unsigned int v18 = (v17 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  long long v19 = (void *)(v7 + 24 * v18);
  uint64_t v20 = *v19;
  if (*v19 != a3)
  {
    int v21 = 0;
    int v22 = 1;
    while (v20 != -4096)
    {
      if (v21) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v20 == -8192;
      }
      if (v23) {
        int v21 = v19;
      }
      unsigned int v24 = v18 + v22++;
      unsigned int v18 = v24 & (v17 - 1);
      long long v19 = (void *)(v7 + 24 * v18);
      uint64_t v20 = *v19;
      if (*v19 == a3) {
        return *(double *)&v14;
      }
    }
    if (v21) {
      size_t v25 = v21;
    }
    else {
      size_t v25 = v19;
    }
    goto LABEL_19;
  }
  return *(double *)&v14;
}

uint64_t llvm::MetadataTracking::isReplaceable(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 - 4) > 0x1E) {
    return (v1 - 1) < 2;
  }
  if ((a1[1] & 0x7F) == 2) {
    return 1;
  }
  return *((_DWORD *)a1 + 3) != 0;
}

uint64_t llvm::ReplaceableMetadataImpl::isReplaceable(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 - 4) > 0x1E) {
    return (v1 - 1) < 2;
  }
  if ((a1[1] & 0x7F) == 2) {
    return 1;
  }
  return *((_DWORD *)a1 + 3) != 0;
}

void llvm::ReplaceableMetadataImpl::getAllArgListUsers(llvm::ReplaceableMetadataImpl *this@<X0>, uint64_t a2@<X8>)
{
  v33[6] = *MEMORY[0x1E4F143B8];
  uint64_t v31 = v33;
  uint64_t v32 = 0x600000000;
  unsigned int v3 = (char *)this + 16;
  unsigned int v4 = *((_DWORD *)this + 4);
  if (v4 <= 1)
  {
    if (v4)
    {
      long long v19 = (char *)this + 24;
      unsigned int v20 = 4;
    }
    else
    {
      long long v19 = (char *)*((void *)this + 3);
      unsigned int v20 = *((_DWORD *)this + 8);
    }
    uint64_t v7 = &v19[24 * v20];
    int v6 = v7;
  }
  else
  {
    if (v4)
    {
      char v5 = (char *)this + 24;
      int v6 = (char *)this + 120;
    }
    else
    {
      char v5 = (char *)*((void *)this + 3);
      int v18 = *((_DWORD *)this + 8);
      if (!v18)
      {
        unsigned int v9 = 0;
        uint64_t v7 = (char *)*((void *)this + 3);
        int v8 = v7;
        goto LABEL_12;
      }
      int v6 = &v5[24 * v18];
    }
    unsigned int v4 = *((_DWORD *)this + 4) & 1;
    uint64_t v7 = v5;
    while (*(void *)v7 == -4096 || *(void *)v7 == -8192)
    {
      v7 += 24;
      if (v7 == v6)
      {
        uint64_t v7 = v6;
        break;
      }
    }
  }
  if (v4)
  {
    int v8 = (char *)this + 24;
    unsigned int v9 = 4;
  }
  else
  {
    int v8 = (char *)*((void *)this + 3);
    unsigned int v9 = *((_DWORD *)this + 8);
  }
  char v5 = v6;
LABEL_12:
  int v10 = &v8[24 * v9];
  if (v7 == v10)
  {
    unsigned int v11 = v33;
    uint64_t v12 = v33;
LABEL_14:
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  unsigned int v15 = 0;
  do
  {
    uint64_t v16 = *((void *)v7 + 2);
    long long v29 = *(_OWORD *)v7;
    uint64_t v30 = v16;
    if ((BYTE8(v29) & 2) != 0 && *(unsigned char *)(*((void *)&v29 + 1) & 0xFFFFFFFFFFFFFFFCLL) == 32)
    {
      unsigned int v27 = v5;
      int v28 = v10;
      int v26 = v7;
      unsigned int v24 = v3;
      size_t v25 = sub_1CD5D2BC8((uint64_t)v3, (uint64_t *)&v29);
      if (v32 >= (unint64_t)HIDWORD(v32)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v31 + v32) = v25 + 1;
      unsigned int v15 = v32 + 1;
      LODWORD(v32) = v32 + 1;
      unsigned int v3 = v24;
      uint64_t v7 = v26;
      char v5 = v27;
      int v10 = v28;
    }
    int v17 = v7 + 24;
    uint64_t v7 = v5;
    if (v17 != v5)
    {
      uint64_t v7 = v17;
      while (*(void *)v7 == -4096 || *(void *)v7 == -8192)
      {
        v7 += 24;
        if (v7 == v5)
        {
          uint64_t v7 = v5;
          break;
        }
      }
    }
  }
  while (v7 != v10);
  uint64_t v12 = (uint64_t *)v31;
  unsigned int v11 = (uint64_t *)((char *)v31 + 8 * v15);
  if (!v15) {
    goto LABEL_14;
  }
  uint64_t v13 = 126 - 2 * __clz(v15);
LABEL_15:
  sub_1CC605AE8(v12, v11, v13, 1);
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x600000000;
  long long v14 = v31;
  if (v32)
  {
    int v21 = (void **)v31;
    unsigned int v22 = 0;
    uint64_t v23 = 8 * v32;
    do
    {
      if (v22 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v22) = **v21 & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v22 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v22;
      ++v21;
      v23 -= 8;
    }
    while (v23);
    long long v14 = v31;
  }
  if (v14 != v33) {
    free(v14);
  }
}

uint64_t sub_1CC5FA668(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v3 = 4;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & v4;
  int v6 = (uint64_t *)(v2 + 24 * v5);
  uint64_t v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_9:
    *int v6 = -8192;
    int v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  int v8 = 1;
  while (v7 != -4096)
  {
    unsigned int v9 = v5 + v8++;
    unsigned int v5 = v9 & v4;
    int v6 = (uint64_t *)(v2 + 24 * v5);
    uint64_t v7 = *v6;
    if (*a2 == *v6) {
      goto LABEL_9;
    }
  }
  return 0;
}

void llvm::ReplaceableMetadataImpl::replaceAllUsesWith(llvm::ReplaceableMetadataImpl *this, llvm::Metadata *a2)
{
  v36[24] = *MEMORY[0x1E4F143B8];
  int v3 = (char *)this + 16;
  unsigned int v2 = *((_DWORD *)this + 4);
  if (v2 >= 2)
  {
    int v6 = (char *)this + 24;
    if (v2)
    {
      uint64_t v7 = (char *)this + 120;
      int v8 = (char *)this + 24;
LABEL_4:
      unsigned int v9 = v8;
      while (*(void *)v9 == -4096 || *(void *)v9 == -8192)
      {
        v9 += 24;
        if (v9 == v7)
        {
          unsigned int v9 = v7;
          if (v2)
          {
LABEL_14:
            unsigned int v11 = 4;
            int v8 = v7;
            int v10 = (char *)this + 24;
            goto LABEL_15;
          }
LABEL_10:
          int v10 = (char *)*((void *)this + 3);
          unsigned int v11 = *((_DWORD *)this + 8);
          int v8 = v7;
          goto LABEL_15;
        }
      }
      if (v2) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
    int v8 = (char *)*((void *)this + 3);
    int v12 = *((_DWORD *)this + 8);
    if (v12)
    {
      uint64_t v7 = &v8[24 * v12];
      goto LABEL_4;
    }
    unsigned int v11 = 0;
    unsigned int v9 = (char *)*((void *)this + 3);
    int v10 = v9;
LABEL_15:
    uint64_t v13 = &v10[24 * v11];
    if (v9 == v13)
    {
      unsigned int v21 = 0;
    }
    else
    {
      unint64_t v14 = 0;
      unsigned int v15 = v9;
      do
      {
        unint64_t v16 = v14;
        int v17 = v15 + 24;
        unsigned int v15 = v8;
        if (v17 != v8)
        {
          unsigned int v15 = v17;
          while (*(void *)v15 == -4096 || *(void *)v15 == -8192)
          {
            v15 += 24;
            if (v15 == v8)
            {
              unsigned int v15 = v8;
              break;
            }
          }
        }
        ++v14;
      }
      while (v15 != v13);
      if (v16 >= 8) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v18 = v36;
      do
      {
        long long v19 = *(_OWORD *)v9;
        v18[2] = *((void *)v9 + 2);
        *(_OWORD *)int v18 = v19;
        unsigned int v20 = v9 + 24;
        unsigned int v9 = v8;
        if (v20 != v8)
        {
          unsigned int v9 = v20;
          while (*(void *)v9 == -4096 || *(void *)v9 == -8192)
          {
            v9 += 24;
            if (v9 == v8)
            {
              unsigned int v9 = v8;
              break;
            }
          }
        }
        v18 += 3;
      }
      while (v9 != v13);
      unsigned int v21 = v14;
    }
    unsigned int v35 = v21;
    unint64_t v22 = 126 - 2 * __clz(v21);
    uint64_t v23 = v21 ? v22 : 0;
    sub_1CC606540((unint64_t)v36, &v36[3 * v21], v23, 1);
    unsigned int v24 = (unsigned __int8 **)v36;
    if (v35)
    {
      while (1)
      {
        size_t v25 = *v24;
        if (*v3) {
          break;
        }
        int v26 = *((_DWORD *)this + 8);
        if (v26)
        {
          unsigned int v27 = (char *)*((void *)this + 3);
LABEL_41:
          int v28 = v26 - 1;
          unsigned int v29 = v28 & ((v25 >> 4) ^ (v25 >> 9));
          uint64_t v30 = *(unsigned __int8 **)&v27[24 * v29];
          if (v25 == v30)
          {
LABEL_42:
            unint64_t v31 = (unint64_t)v24[1];
            if (v31 <= 3)
            {
              *(void *)size_t v25 = a2;
              if (a2) {
                llvm::MetadataTracking::track((uint64_t)v25, (unsigned __int8 *)a2, 2);
              }
              sub_1CC5FA668((uint64_t)v3, v24);
            }
            else
            {
              uint64_t v32 = (llvm::DIArgList *)(v31 & 0xFFFFFFFFFFFFFFFCLL);
              if ((v31 & 2) != 0)
              {
                if (*(unsigned char *)v32 == 32) {
                  llvm::DIArgList::handleChangedOperand(v32, v25, a2);
                }
                else {
                  llvm::MDNode::handleChangedOperand((uint64_t)v32, (char *)v25, a2);
                }
              }
              else
              {
                llvm::MetadataAsValue::handleChangedMetadata((int32x2_t ****)v32, a2);
              }
            }
          }
          else
          {
            int v33 = 1;
            while (v30 != (unsigned __int8 *)-4096)
            {
              unsigned int v34 = v29 + v33++;
              unsigned int v29 = v34 & v28;
              uint64_t v30 = *(unsigned __int8 **)&v27[24 * v29];
              if (v25 == v30) {
                goto LABEL_42;
              }
            }
          }
        }
        v24 += 3;
        if (v24 == &v36[3 * v35]) {
          return;
        }
      }
      int v26 = 4;
      unsigned int v27 = v6;
      goto LABEL_41;
    }
  }
}

void llvm::MDNode::handleChangedOperand(uint64_t this, char *a2, llvm::Metadata *a3)
{
  int v4 = (char *)(this - 8 * *(unsigned int *)(this + 8));
  unint64_t v5 = a2 - v4;
  if ((*(unsigned char *)(this + 1) & 0x7F) != 0)
  {
    int v17 = &v4[v5 & 0x7FFFFFFF8];
    int v18 = *(unsigned __int8 **)v17;
    if (!*(void *)v17) {
      goto LABEL_35;
    }
    int v19 = *v18;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        unint64_t v22 = *(unsigned __int8 **)v17;
      }
      else {
        unint64_t v22 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v18 + 1) = 0;
        }
        goto LABEL_35;
      }
      unint64_t v21 = (unint64_t)(v22 + 8);
    }
    else if ((v18[1] & 0x7F) != 2 && !*((_DWORD *)v18 + 3) {
           || (uint64_t v20 = *((void *)v18 + 2), (v20 & 4) == 0)
    }
           || (unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_35:
      *(void *)int v17 = a3;
      if (a3) {
        llvm::MetadataTracking::track((uint64_t)v17, (unsigned __int8 *)a3, 2);
      }
      return;
    }
    unsigned int v27 = v17;
    sub_1CC5FA668(v21 + 16, &v27);
    goto LABEL_35;
  }
  llvm::MDNode::eraseFromStore((llvm::MDNode *)this);
  uint64_t v7 = (char *)(this - 8 * *(unsigned int *)(this + 8) + (v5 & 0x7FFFFFFF8));
  int v8 = *(unsigned __int8 **)v7;
  char v9 = *(unsigned char *)(this + 1);
  if (*(void *)v7)
  {
    int v11 = *v8;
    if ((v11 - 4) > 0x1E)
    {
      if ((v11 - 3) >= 0xFFFFFFFE) {
        unint64_t v14 = *(unsigned __int8 **)v7;
      }
      else {
        unint64_t v14 = 0;
      }
      if ((v11 - 3) < 0xFFFFFFFE)
      {
        if (v11 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v13 = (unint64_t)(v14 + 8);
    }
    else
    {
      if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
        goto LABEL_3;
      }
      uint64_t v12 = *((void *)v8 + 2);
      if ((v12 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v13) {
        goto LABEL_3;
      }
    }
    unsigned int v27 = v7;
    sub_1CC5FA668(v13 + 16, &v27);
  }
LABEL_3:
  *(void *)uint64_t v7 = a3;
  if (a3)
  {
    if ((v9 & 0x7F) != 0) {
      unint64_t v10 = 2;
    }
    else {
      unint64_t v10 = this | 2;
    }
    llvm::MetadataTracking::track((uint64_t)v7, (unsigned __int8 *)a3, v10);
  }
  if (a3 == (llvm::Metadata *)this || !a3 && v8 && *v8 == 1)
  {
    if ((*(unsigned char *)(this + 1) & 0x7F) == 2 || *(_DWORD *)(this + 12))
    {
      *(_DWORD *)(this + 12) = 0;
      llvm::MDNode::dropReplaceableUses(this);
    }
    goto LABEL_14;
  }
  unsigned int v15 = llvm::MDNode::uniquify((llvm::MDNode *)this);
  int v16 = *(unsigned char *)(this + 1) & 0x7F;
  if (v15 == (unsigned int *)this)
  {
    if (v16 == 2 || *(_DWORD *)(this + 12)) {
      llvm::MDNode::resolveAfterOperandChange(this, (llvm::Metadata *)v8, a3);
    }
  }
  else
  {
    uint64_t v23 = (llvm::Metadata *)v15;
    if (v16 != 2 && !*(_DWORD *)(this + 12))
    {
LABEL_14:
      llvm::MDNode::storeDistinctInContext((llvm::MDNode *)this);
      return;
    }
    int v24 = *(_DWORD *)(this + 8);
    if (v24)
    {
      for (unsigned int i = 0; i != v24; ++i)
        llvm::MDNode::setOperand(this, i, 0);
    }
    uint64_t v26 = *(void *)(this + 16);
    if ((v26 & 4) != 0) {
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v26 & 0xFFFFFFFFFFFFFFF8), v23);
    }
    llvm::MDNode::deleteAsSubclass((llvm::MDNode *)this);
  }
}

void llvm::ReplaceableMetadataImpl::resolveAllUses(llvm::ReplaceableMetadataImpl *this, char a2)
{
  v35[23] = *MEMORY[0x1E4F143B8];
  int v3 = (void *)((char *)this + 16);
  unsigned int v2 = *((_DWORD *)this + 4);
  if (v2 < 2) {
    return;
  }
  if ((a2 & 1) == 0)
  {
    char v9 = (void *)((char *)this + 16);
    sub_1CC5FB0C0(v9);
    return;
  }
  int v4 = (char *)this + 24;
  if (v2)
  {
    unint64_t v5 = (char *)this + 120;
    int v6 = (char *)this + 24;
    goto LABEL_5;
  }
  int v6 = (char *)*((void *)this + 3);
  int v10 = *((_DWORD *)this + 8);
  if (v10)
  {
    unint64_t v5 = &v6[24 * v10];
LABEL_5:
    uint64_t v7 = v6;
    while (*(void *)v7 == -4096 || *(void *)v7 == -8192)
    {
      v7 += 24;
      if (v7 == v5)
      {
        uint64_t v7 = v5;
        if (v2) {
          goto LABEL_18;
        }
LABEL_11:
        int v4 = (char *)*((void *)this + 3);
        unsigned int v8 = *((_DWORD *)this + 8);
        goto LABEL_19;
      }
    }
    if ((v2 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_18:
    unsigned int v8 = 4;
LABEL_19:
    int v6 = v5;
    goto LABEL_20;
  }
  unsigned int v8 = 0;
  uint64_t v7 = (char *)*((void *)this + 3);
  int v4 = v7;
LABEL_20:
  int v11 = &v4[24 * v8];
  if (v7 == v11)
  {
    unsigned int v19 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v13 = v7;
    do
    {
      unint64_t v14 = v12;
      unsigned int v15 = v13 + 24;
      unint64_t v13 = v6;
      if (v15 != v6)
      {
        unint64_t v13 = v15;
        while (*(void *)v13 == -4096 || *(void *)v13 == -8192)
        {
          v13 += 24;
          if (v13 == v6)
          {
            unint64_t v13 = v6;
            break;
          }
        }
      }
      unint64_t v12 = v14 + 1;
    }
    while (v13 != v11);
    if (v14 >= 8) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v16 = &v34;
    do
    {
      long long v17 = *(_OWORD *)v7;
      v16[2] = *((void *)v7 + 2);
      *(_OWORD *)int v16 = v17;
      int v18 = v7 + 24;
      uint64_t v7 = v6;
      if (v18 != v6)
      {
        uint64_t v7 = v18;
        while (*(void *)v7 == -4096 || *(void *)v7 == -8192)
        {
          v7 += 24;
          if (v7 == v6)
          {
            uint64_t v7 = v6;
            break;
          }
        }
      }
      v16 += 3;
    }
    while (v7 != v11);
    unsigned int v19 = v12;
  }
  unsigned int v33 = v19;
  unint64_t v20 = 126 - 2 * __clz(v19);
  if (v19) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  sub_1CC607274((unint64_t)&v34, &v35[3 * v19 - 1], v21, 1);
  sub_1CC5FB0C0(v3);
  if (v33)
  {
    uint64_t v22 = 24 * v33;
    uint64_t v23 = v35;
    do
    {
      unint64_t v25 = *v23;
      v23 += 3;
      unint64_t v24 = v25;
      unint64_t v26 = v25 & 2;
      if (v25 >= 4 && v26 != 0)
      {
        unint64_t v28 = v24 & 0xFFFFFFFFFFFFFFFCLL;
        unsigned int v29 = *(unsigned __int8 *)(v24 & 0xFFFFFFFFFFFFFFFCLL) - 4;
        if (v28) {
          BOOL v30 = v29 > 0x1E;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30 && (*(unsigned char *)(v28 + 1) & 0x7F) != 2)
        {
          int v31 = *(_DWORD *)(v28 + 12);
          if (v31)
          {
            int v32 = v31 - 1;
            *(_DWORD *)(v28 + 12) = v32;
            if (!v32) {
              llvm::MDNode::dropReplaceableUses((llvm::MDNode *)v28);
            }
          }
        }
      }
      v22 -= 24;
    }
    while (v22);
  }
}

void *sub_1CC5FB0C0(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      int v3 = result + 1;
      int v4 = result + 13;
    }
    else
    {
      unsigned int v2 = *((_DWORD *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41) {
        return sub_1CD5D2C30(result);
      }
      if (!v2)
      {
        int v5 = 0;
LABEL_9:
        *(_DWORD *)uint64_t result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      int v3 = (void *)result[1];
      int v4 = &v3[3 * v2];
    }
    do
    {
      *int v3 = -4096;
      v3 += 3;
    }
    while (v3 != v4);
    int v5 = *(_DWORD *)result & 1;
    goto LABEL_9;
  }
  return result;
}

uint64_t llvm::MDNode::decrementUnresolvedOperandCount(uint64_t this)
{
  if ((*(unsigned char *)(this + 1) & 0x7F) != 2)
  {
    int v1 = *(_DWORD *)(this + 12) - 1;
    *(_DWORD *)(this + 12) = v1;
    if (!v1) {
      return llvm::MDNode::dropReplaceableUses(this);
    }
  }
  return this;
}

unint64_t sub_1CC5FB168(void *a1)
{
  if ((*a1 & 4) == 0) {
    operator new();
  }
  return *a1 & ((uint64_t)(*a1 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
}

uint64_t llvm::ValueAsMetadata::get(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  int v16 = this;
  uint64_t v3 = ***(void ***)this;
  int v4 = *(_DWORD *)(v3 + 408);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 392);
    int v6 = v4 - 1;
    unsigned int v7 = v6 & ((this >> 4) ^ (this >> 9));
    unsigned int v8 = (uint64_t *)(v5 + 16 * v7);
    char v9 = (llvm::ValueAsMetadata *)*v8;
    if ((llvm::ValueAsMetadata *)*v8 == this) {
      goto LABEL_16;
    }
    int v10 = 0;
    int v11 = 1;
    while (v9 != (llvm::ValueAsMetadata *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (llvm::ValueAsMetadata *)-8192;
      }
      if (v12) {
        int v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      unsigned int v8 = (uint64_t *)(v5 + 16 * v7);
      char v9 = (llvm::ValueAsMetadata *)*v8;
      if ((llvm::ValueAsMetadata *)*v8 == this) {
        goto LABEL_16;
      }
    }
    if (v10) {
      unint64_t v14 = v10;
    }
    else {
      unint64_t v14 = v8;
    }
  }
  else
  {
    unint64_t v14 = 0;
  }
  unsigned int v8 = sub_1CC607D88(v3 + 392, (uint64_t *)&v16, v14);
  uint64_t *v8 = (uint64_t)this;
  v8[1] = 0;
LABEL_16:
  uint64_t result = v8[1];
  if (!result)
  {
    *((_DWORD *)this + 5) |= 0x8000000u;
    operator new();
  }
  return result;
}

uint64_t llvm::ValueAsMetadata::getIfExists(uint64_t ***a1)
{
  uint64_t v1 = ***a1;
  int v2 = *(_DWORD *)(v1 + 408);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 392);
    unsigned int v4 = v2 - 1;
    uint64_t v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    int v6 = *(uint64_t ****)(v3 + 16 * v5);
    if (v6 == a1) {
      return *(void *)(v3 + 16 * v5 + 8);
    }
    int v8 = 1;
    while (v6 != (uint64_t ***)-4096)
    {
      int v9 = v5 + v8++;
      uint64_t v5 = v9 & v4;
      int v6 = *(uint64_t ****)(v3 + 16 * v5);
      if (v6 == a1) {
        return *(void *)(v3 + 16 * v5 + 8);
      }
    }
  }
  return 0;
}

void llvm::ValueAsMetadata::handleDeletion(llvm::ValueAsMetadata *this, llvm::Value *a2)
{
  int v2 = ***(int32x2_t ****)this;
  int32x2_t v3 = v2[49];
  uint64_t v4 = v2[51].u32[0];
  if (!v4)
  {
LABEL_14:
    uint64_t v6 = *(void *)&v3 + 16 * v4;
    goto LABEL_3;
  }
  LODWORD(v5) = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v6 = *(void *)&v3 + 16 * v5;
  unsigned int v7 = *(llvm::ValueAsMetadata **)v6;
  if (*(llvm::ValueAsMetadata **)v6 != this)
  {
    int v9 = 1;
    while (v7 != (llvm::ValueAsMetadata *)-4096)
    {
      int v10 = v5 + v9++;
      uint64_t v5 = v10 & (v4 - 1);
      unsigned int v7 = *(llvm::ValueAsMetadata **)(*(void *)&v3 + 16 * v5);
      if (v7 == this)
      {
        uint64_t v6 = *(void *)&v3 + 16 * v5;
        goto LABEL_3;
      }
    }
    goto LABEL_14;
  }
LABEL_3:
  if (v6 != *(void *)&v3 + 16 * v4)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    *(void *)uint64_t v6 = -8192;
    v2[50] = vadd_s32(v2[50], (int32x2_t)0x1FFFFFFFFLL);
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v8 + 8), 0);
    if (v8)
    {
      if ((*(unsigned char *)(v8 + 24) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v8 + 32), 8);
      }
      JUMPOUT(0x1D25D9CE0);
    }
  }
}

uint64_t *llvm::ValueAsMetadata::handleRAUW(uint64_t *this, llvm::Value *a2, llvm::Value *a3)
{
  uint64_t v4 = this;
  unint64_t v28 = a2;
  uint64_t v5 = **(int32x2_t ***)*this;
  int32x2_t v6 = v5[49];
  uint64_t v7 = v5[51].u32[0];
  if (v7)
  {
    LODWORD(v8) = (v7 - 1) & ((this >> 4) ^ (this >> 9));
    int v9 = (uint64_t **)(*(void *)&v6 + 16 * v8);
    int v10 = *v9;
    if (*v9 == this) {
      goto LABEL_7;
    }
    int v11 = 1;
    while (v10 != (uint64_t *)-4096)
    {
      int v12 = v8 + v11++;
      uint64_t v8 = v12 & (v7 - 1);
      int v10 = *(uint64_t **)(*(void *)&v6 + 16 * v8);
      if (v10 == this)
      {
        int v9 = (uint64_t **)(*(void *)&v6 + 16 * v8);
        goto LABEL_7;
      }
    }
  }
  int v9 = (uint64_t **)(*(void *)&v6 + 16 * v7);
LABEL_7:
  if (v9 == (uint64_t **)(*(void *)&v6 + 16 * v7)) {
    return this;
  }
  *((_DWORD *)this + 5) &= ~0x8000000u;
  uint64_t v13 = (uint64_t)v9[1];
  *int v9 = (uint64_t *)-8192;
  v5[50] = vadd_s32(v5[50], (int32x2_t)0x1FFFFFFFFLL);
  unsigned int v14 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned char *)v13 == 2)
  {
    if (v14 <= 0x14)
    {
      long long v17 = (llvm::Metadata *)llvm::ValueAsMetadata::get(a2, a2);
      goto LABEL_34;
    }
    if (sub_1CC5FB794((uint64_t)this))
    {
      if (sub_1CC5FB794((uint64_t)a2))
      {
        unsigned int v15 = sub_1CC5FB794((uint64_t)v4);
        if (v15 != sub_1CC5FB794((uint64_t)a2)) {
          goto LABEL_13;
        }
      }
    }
  }
  else if (v14 >= 0x15)
  {
LABEL_13:
    int v16 = (llvm::ReplaceableMetadataImpl *)(v13 + 8);
    long long v17 = 0;
    goto LABEL_35;
  }
  __int32 v18 = v5[51].i32[0];
  if (v18)
  {
    int32x2_t v19 = v5[49];
    __int32 v20 = v18 - 1;
    unsigned int v21 = v20 & ((a2 >> 4) ^ (a2 >> 9));
    this = (uint64_t *)(*(void *)&v19 + 16 * v21);
    uint64_t v22 = (int32x2_t ***)*this;
    if ((llvm::Value *)*this == a2) {
      goto LABEL_30;
    }
    uint64_t v23 = 0;
    int v24 = 1;
    while (v22 != (int32x2_t ***)-4096)
    {
      if (v23) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = v22 == (int32x2_t ***)-8192;
      }
      if (v25) {
        uint64_t v23 = this;
      }
      unsigned int v26 = v21 + v24++;
      unsigned int v21 = v26 & v20;
      this = (uint64_t *)(*(void *)&v19 + 16 * v21);
      uint64_t v22 = (int32x2_t ***)*this;
      if ((llvm::Value *)*this == a2) {
        goto LABEL_30;
      }
    }
    if (v23) {
      unsigned int v27 = v23;
    }
    else {
      unsigned int v27 = this;
    }
  }
  else
  {
    unsigned int v27 = 0;
  }
  this = sub_1CC607D88((uint64_t)&v5[49], (uint64_t *)&v28, v27);
  *this = (uint64_t)a2;
  this[1] = 0;
LABEL_30:
  long long v17 = (llvm::Metadata *)this[1];
  if (v17)
  {
LABEL_34:
    int v16 = (llvm::ReplaceableMetadataImpl *)(v13 + 8);
LABEL_35:
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith(v16, v17);
    if ((*(unsigned char *)(v13 + 24) & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)(v13 + 32), 8);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  *((_DWORD *)a2 + 5) |= 0x8000000u;
  *(void *)(v13 + 128) = a2;
  this[1] = v13;
  return this;
}

uint64_t **sub_1CC5FB794(uint64_t a1)
{
  if (!a1 || *(unsigned char *)(a1 + 16) != 21)
  {
    uint64_t v17 = *(void *)(a1 + 40);
    if (!v17) {
      return 0;
    }
    uint64_t v18 = *(void *)(v17 + 56);
    if (!v18 || (*(unsigned char *)(v18 + 23) & 0x20) == 0) {
      return 0;
    }
    uint64_t v19 = ***(void ***)v18;
    uint64_t v36 = v18;
    int v20 = *(_DWORD *)(v19 + 2496);
    if (v20)
    {
      uint64_t v21 = *(void *)(v19 + 2480);
      int v22 = v20 - 1;
      unsigned int v23 = v22 & ((v18 >> 4) ^ (v18 >> 9));
      int v24 = (void *)(v21 + 40 * v23);
      uint64_t v25 = *v24;
      if (*v24 == v18) {
        goto LABEL_33;
      }
      unsigned int v26 = 0;
      int v27 = 1;
      while (v25 != -4096)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == -8192;
        }
        if (v28) {
          unsigned int v26 = v24;
        }
        unsigned int v29 = v23 + v27++;
        unsigned int v23 = v29 & v22;
        int v24 = (void *)(v21 + 40 * v23);
        uint64_t v25 = *v24;
        if (*v24 == v18) {
          goto LABEL_33;
        }
      }
      if (v26) {
        uint64_t v34 = v26;
      }
      else {
        uint64_t v34 = v24;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    int v24 = sub_1CC609054(v19 + 2480, (uint64_t)&v36, &v36, v34);
    uint64_t v35 = v36;
    v24[3] = 0;
    v24[4] = 0;
    *int v24 = v35;
    v24[1] = v24 + 3;
    v24[2] = 0x100000000;
LABEL_33:
    uint64_t v30 = *((unsigned int *)v24 + 4);
    if (v30)
    {
      unsigned int v14 = (uint64_t ***)v24[1];
      uint64_t v31 = 16 * v30;
      uint64_t result = 0;
      while (*(_DWORD *)v14)
      {
        v14 += 2;
        v31 -= 16;
        if (!v31) {
          return result;
        }
      }
      return v14[1];
    }
    return 0;
  }
  uint64_t v1 = *(uint64_t ****)(a1 + 24);
  if (!v1 || (*((unsigned char *)v1 + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v2 = ***v1;
  uint64_t v36 = *(void *)(a1 + 24);
  int v3 = *(_DWORD *)(v2 + 2496);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 2480);
    int v5 = v3 - 1;
    unsigned int v6 = v5 & ((v1 >> 4) ^ (v1 >> 9));
    uint64_t v7 = (uint64_t ****)(v4 + 40 * v6);
    uint64_t v8 = *v7;
    if (*v7 == v1) {
      goto LABEL_15;
    }
    int v9 = 0;
    int v10 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == (uint64_t ***)-8192;
      }
      if (v11) {
        int v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (uint64_t ****)(v4 + 40 * v6);
      uint64_t v8 = *v7;
      if (*v7 == v1) {
        goto LABEL_15;
      }
    }
    if (v9) {
      int v32 = v9;
    }
    else {
      int v32 = v7;
    }
  }
  else
  {
    int v32 = 0;
  }
  uint64_t v7 = (uint64_t ****)sub_1CC609054(v2 + 2480, (uint64_t)&v36, &v36, v32);
  uint64_t v33 = v36;
  void v7[3] = 0;
  uint64_t v7[4] = 0;
  *uint64_t v7 = (uint64_t ***)v33;
  v7[1] = (uint64_t ***)(v7 + 3);
  void v7[2] = (uint64_t ***)0x100000000;
LABEL_15:
  uint64_t v13 = *((unsigned int *)v7 + 4);
  if (!v13) {
    return 0;
  }
  unsigned int v14 = v7[1];
  uint64_t v15 = 16 * v13;
  uint64_t result = 0;
  while (*(_DWORD *)v14)
  {
    v14 += 2;
    v15 -= 16;
    if (!v15) {
      return result;
    }
  }
  return v14[1];
}

void *llvm::MDString::get(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v4 = *a1;
  unsigned int v5 = *(_DWORD *)(*a1 + 280);
  if (!v5)
  {
    *(void *)(v4 + 284) = 0;
    uint64_t v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *(void *)(v4 + 272) = v25;
    unsigned int v5 = 16;
    *(_DWORD *)(v4 + 280) = 16;
  }
  int v6 = 0;
  if (a3)
  {
    size_t v7 = a3;
    uint64_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)(v4 + 272);
  unsigned int v11 = v5 - 1;
  uint64_t v12 = v10 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    uint64_t v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && a3 == *v17
    }
           && (!a3 || !memcmp(a2, (char *)v17 + *(unsigned int *)(v4 + 292), a3)))
    {
      goto LABEL_17;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  uint64_t v17 = *(void **)(v10 + 8 * v16);
LABEL_17:
  if (v17)
  {
    if (v17 != (void *)-8) {
      return v17 + 1;
    }
    --*(_DWORD *)(v4 + 288);
  }
  uint64_t v19 = sub_1CB906F34((uint64_t *)(v4 + 296), a3 + 25, 3);
  int v20 = (void *)v19;
  uint64_t v21 = v19 + 24;
  if (a3) {
    memcpy((void *)(v19 + 24), a2, a3);
  }
  *(unsigned char *)(v21 + a3) = 0;
  v20[1] = 0;
  v20[2] = 0;
  *int v20 = a3;
  *(void *)(v10 + 8 * v16) = v20;
  ++*(_DWORD *)(v4 + 284);
  for (unsigned int i = (void **)(*(void *)(v4 + 272)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v4 + 272), v16)); ; ++i)
  {
    uint64_t v17 = *i;
    if (*i && v17 + 1 != 0) {
      break;
    }
  }
  v17[2] = v17;
  return v17 + 1;
}

void *sub_1CC5FBBE4(uint64_t *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *a1 = (uint64_t)v25;
    unsigned int v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    uint64_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *a1;
  unsigned int v11 = v5 - 1;
  uint64_t v12 = *a1 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    uint64_t v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && __n == *v17
    }
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  uint64_t v17 = *(void **)(v10 + 8 * v16);
LABEL_17:
  unsigned int i = (void *)(v10 + 8 * v16);
  if (v17)
  {
    if (v17 != (void *)-8) {
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  uint64_t v20 = sub_1CB906F34(a1 + 3, __n + 25, 3);
  uint64_t v21 = (void *)v20;
  uint64_t v22 = v20 + 24;
  if (__n) {
    memcpy((void *)(v20 + 24), a2, __n);
  }
  *(unsigned char *)(v22 + __n) = 0;
  v21[1] = 0;
  v21[2] = 0;
  *uint64_t v21 = __n;
  void *i = v21;
  ++*((_DWORD *)a1 + 3);
  for (unsigned int i = (void *)(*a1 + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::MDString::getString(llvm::MDString *this)
{
  return *((void *)this + 1) + 24;
}

uint64_t llvm::MDNode::operator new(llvm::MDNode *this, unsigned int a2)
{
  size_t v3 = 8 * a2;
  uint64_t v4 = operator new((size_t)this + v3);
  unsigned int v5 = v4;
  if (a2) {
    bzero(v4, v3);
  }
  return (uint64_t)v5 + v3;
}

void llvm::MDNode::operator delete(unsigned int *a1)
{
  uint64_t v1 = a1[2];
  if (v1)
  {
    uint64_t v2 = -8 * v1;
    size_t v3 = (unsigned __int8 **)(a1 - 2);
    do
    {
      if (*v3)
      {
        uint64_t v8 = a1;
        uint64_t v5 = v1;
        int v6 = v3;
        uint64_t v7 = v2;
        llvm::MetadataTracking::untrack((uint64_t)v3, *v3);
        size_t v3 = v6;
        uint64_t v2 = v7;
        uint64_t v1 = v5;
        a1 = v8;
      }
      --v3;
      v2 += 8;
    }
    while (v2);
  }
  uint64_t v4 = &a1[-2 * v1];

  operator delete(v4);
}

uint64_t llvm::MDNode::MDNode(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7, uint64_t a8)
{
  *(unsigned char *)a1 = a3;
  *(unsigned char *)(a1 + 1) = a4 & 0x7F;
  *(_WORD *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = (a8 + a6);
  *(void *)(a1 + 16) = a2;
  if (!a6)
  {
    LODWORD(v11) = 0;
    if (!a8) {
      goto LABEL_51;
    }
    goto LABEL_28;
  }
  uint64_t v37 = a8;
  uint64_t v11 = 0;
  uint64_t v12 = 8 * a6;
  do
  {
    int v13 = *(unsigned __int8 **)(a5 + 8 * v11);
    int v14 = (unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v11);
    char v15 = *(unsigned char *)(a1 + 1);
    uint64_t v16 = *v14;
    if (!*v14) {
      goto LABEL_7;
    }
    int v17 = *v16;
    if ((v17 - 4) > 0x1E)
    {
      if ((v17 - 3) >= 0xFFFFFFFE) {
        uint64_t v19 = *v14;
      }
      else {
        uint64_t v19 = 0;
      }
      if ((v17 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v20 = (unint64_t)(v19 + 8);
LABEL_19:
        uint64_t v38 = a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v11;
        sub_1CC5FA668(v20 + 16, &v38);
        goto LABEL_7;
      }
      if (v17 == 3) {
        *((void *)v16 + 1) = 0;
      }
    }
    else if ((v16[1] & 0x7F) == 2 || *((_DWORD *)v16 + 3))
    {
      uint64_t v21 = *((void *)v16 + 2);
      if ((v21 & 4) != 0)
      {
        unint64_t v20 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (v20) {
          goto LABEL_19;
        }
      }
    }
LABEL_7:
    *int v14 = v13;
    if (v13)
    {
      if ((v15 & 0x7F) != 0) {
        uint64_t v18 = 2;
      }
      else {
        uint64_t v18 = a1 | 2;
      }
      llvm::MetadataTracking::track((uint64_t)v14, v13, v18);
    }
    ++v11;
    v12 -= 8;
  }
  while (v12);
  a8 = v37;
  if (v37)
  {
LABEL_28:
    for (uint64_t i = 8 * a8; i; i -= 8)
    {
      unsigned int v23 = *a7;
      int v24 = (unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v11);
      char v25 = *(unsigned char *)(a1 + 1);
      unsigned int v26 = *v24;
      if (*v24)
      {
        int v27 = *v26;
        if ((v27 - 4) > 0x1E)
        {
          if ((v27 - 3) >= 0xFFFFFFFE) {
            unsigned int v29 = *v24;
          }
          else {
            unsigned int v29 = 0;
          }
          if ((v27 - 3) < 0xFFFFFFFE)
          {
            if (v27 == 3) {
              *((void *)v26 + 1) = 0;
            }
            goto LABEL_33;
          }
          unint64_t v30 = (unint64_t)(v29 + 8);
        }
        else
        {
          if ((v26[1] & 0x7F) != 2 && !*((_DWORD *)v26 + 3)) {
            goto LABEL_33;
          }
          uint64_t v31 = *((void *)v26 + 2);
          if ((v31 & 4) == 0) {
            goto LABEL_33;
          }
          unint64_t v30 = v31 & 0xFFFFFFFFFFFFFFF8;
          if (!v30) {
            goto LABEL_33;
          }
        }
        uint64_t v38 = a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v11;
        sub_1CC5FA668(v30 + 16, &v38);
      }
LABEL_33:
      *int v24 = v23;
      if (v23)
      {
        if ((v25 & 0x7F) != 0) {
          uint64_t v28 = 2;
        }
        else {
          uint64_t v28 = a1 | 2;
        }
        llvm::MetadataTracking::track((uint64_t)v24, v23, v28);
      }
      ++a7;
      LODWORD(v11) = v11 + 1;
    }
  }
LABEL_51:
  if ((*(unsigned char *)(a1 + 1) & 0x7F) == 0)
  {
    uint64_t v32 = *(unsigned int *)(a1 + 8);
    if (v32)
    {
      int v33 = 0;
      uint64_t v34 = -8 * v32;
      do
      {
        uint64_t v35 = *(unsigned __int8 **)(a1 + v34);
        if (v35)
        {
          if (*v35 - 4 > 0x1E) {
            LODWORD(v35) = 0;
          }
          else {
            LODWORD(v35) = (v35[1] & 0x7F) == 2 || *((_DWORD *)v35 + 3) != 0;
          }
        }
        v33 += (int)v35;
        v34 += 8;
      }
      while (v34);
    }
    else
    {
      int v33 = 0;
    }
    *(_DWORD *)(a1 + 12) = v33;
  }
  return a1;
}

uint64_t llvm::MDNode::setOperand(uint64_t result, unsigned int a2, unsigned __int8 *a3)
{
  uint64_t v4 = result;
  uint64_t v5 = (unsigned __int8 **)(result - 8 * *(unsigned int *)(result + 8) + 8 * a2);
  char v6 = *(unsigned char *)(result + 1);
  uint64_t v7 = *v5;
  if (!*v5) {
    goto LABEL_2;
  }
  int v9 = *v7;
  if ((v9 - 4) > 0x1E)
  {
    if ((v9 - 3) >= 0xFFFFFFFE) {
      uint64_t v12 = *v5;
    }
    else {
      uint64_t v12 = 0;
    }
    if ((v9 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v11 = (unint64_t)(v12 + 8);
LABEL_19:
      uint64_t v13 = result - 8 * *(unsigned int *)(result + 8) + 8 * a2;
      uint64_t result = sub_1CC5FA668(v11 + 16, &v13);
      goto LABEL_2;
    }
    if (v9 == 3) {
      *((void *)v7 + 1) = 0;
    }
  }
  else if ((v7[1] & 0x7F) == 2 || *((_DWORD *)v7 + 3))
  {
    uint64_t v10 = *((void *)v7 + 2);
    if ((v10 & 4) != 0)
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if (v11) {
        goto LABEL_19;
      }
    }
  }
LABEL_2:
  *uint64_t v5 = a3;
  if (a3)
  {
    if ((v6 & 0x7F) != 0) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = v4 | 2;
    }
    return llvm::MetadataTracking::track((uint64_t)v5, a3, v8);
  }
  return result;
}

uint64_t llvm::MDNode::countUnresolvedOperands(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 8);
  if (v1)
  {
    int v2 = 0;
    uint64_t v3 = -8 * v1;
    do
    {
      uint64_t v4 = *(unsigned __int8 **)(this + v3);
      if (v4)
      {
        if (*v4 - 4 > 0x1E) {
          LODWORD(v4) = 0;
        }
        else {
          LODWORD(v4) = (v4[1] & 0x7F) == 2 || *((_DWORD *)v4 + 3) != 0;
        }
      }
      v2 += (int)v4;
      v3 += 8;
    }
    while (v3);
  }
  else
  {
    int v2 = 0;
  }
  *(_DWORD *)(this + 12) = v2;
  return this;
}

void llvm::MDNode::clone(llvm::MDNode *this@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  v24[4] = *MEMORY[0x1E4F143B8];
  switch(*(unsigned char *)this)
  {
    case 5:
      sub_1CD5D0D74(a8, (uint64_t)this);
      return;
    case 6:
      sub_1CD5D0DE4((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 7:
      uint64_t v17 = *((void *)this + 2);
      uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 4) != 0) {
        uint64_t v18 = (void *)*v18;
      }
      uint64_t v19 = (uint64_t *)((char *)this - 8 * *((unsigned int *)this + 2));
      Impl = llvm::DIGlobalVariableExpression::getImpl(v18, *v19, v19[1], 2, 1);
      goto LABEL_10;
    case 8:
      sub_1CD5D0E34((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 9:
      sub_1CD5D0F28((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0xA:
      sub_1CD5D0F78((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0xB:
      sub_1CD5D1078((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0xC:
      sub_1CD5D10E8(a8, (uint64_t)this);
      return;
    case 0xD:
      sub_1CD5D11BC(a8, (uint64_t)this);
      return;
    case 0xE:
      uint64_t v14 = *((void *)this + 2);
      char v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 4) != 0) {
        char v15 = (void *)*v15;
      }
      llvm::DISubroutineType::getImpl(v15, *((_DWORD *)this + 7), *((unsigned char *)this + 52), ((void *)this - *((unsigned int *)this + 2))[3], 2, 1);
      goto LABEL_10;
    case 0xF:
      sub_1CD5D12B4((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x10:
      sub_1CD5D13B8((char **)a8, (uint64_t)this);
      return;
    case 0x11:
      sub_1CC582EF0(this, a8);
      return;
    case 0x12:
      sub_1CD5D154C((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x13:
      sub_1CD5D15B8((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x14:
      sub_1CD5D1620((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x15:
      sub_1CD5D1688((llvm::MDNode **)a8, (uint64_t)this, a2, a3, a4, a5, a6, a7);
      return;
    case 0x16:
      sub_1CD5D1780((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x17:
      sub_1CD5D17E4((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x18:
      sub_1CD5D1850((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x19:
      sub_1CD5D190C((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x1A:
      sub_1CD5D1990((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x1B:
      sub_1CD5D19F8((unsigned int **)a8, (uint64_t)this, a2, a3, a4, a5, a6, a7);
      return;
    case 0x1C:
      sub_1CD5D1AB8((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x1D:
      sub_1CD5D1B34((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x1E:
      sub_1CD5D1BCC((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x1F:
      sub_1CD5D1C24((llvm::MDNode **)a8, (uint64_t)this);
      return;
    case 0x20:
      uint64_t v20 = *((void *)this + 2);
      uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFF8);
      if ((v20 & 4) != 0) {
        uint64_t v21 = (void *)*v21;
      }
      Impl = llvm::DIArgList::getImpl(v21, *((unsigned char **)this + 3), (const void *)*((unsigned int *)this + 8), 2, 1);
LABEL_10:
      *a8 = (uint64_t)Impl;
      break;
    case 0x21:
      sub_1CD5D1C90((llvm::MDNode **)a8, (uint64_t)this);
      break;
    case 0x22:
      sub_1CD5D1D00((llvm::MDNode **)a8, (uint64_t)this);
      break;
    default:
      uint64_t v10 = *((void *)this + 2);
      unint64_t v11 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((v10 & 4) != 0) {
        unint64_t v11 = (void *)*v11;
      }
      uint64_t v12 = (char *)this - 8 * *((unsigned int *)this + 2);
      uint64_t v22 = v24;
      uint64_t v23 = 0x400000000;
      sub_1CB91FB58((uint64_t)&v22, v12, (char *)this);
      uint64_t v13 = llvm::MDTuple::getImpl((uint64_t)v11, v22, v23, 2, 1);
      if (v22 != v24) {
        free(v22);
      }
      *a8 = (uint64_t)v13;
      break;
  }
}

uint64_t llvm::MDNode::makeUniqued(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(unsigned int *)(this + 8);
  if (!v2)
  {
    *(unsigned char *)(this + 1) &= 0x80u;
    goto LABEL_34;
  }
  uint64_t v3 = -8 * v2;
  do
  {
    uint64_t v4 = (void *)(v1 + v3);
    uint64_t v5 = *(unsigned __int8 **)(v1 + v3);
    if (v5)
    {
      int v6 = *v5;
      if ((v6 - 4) > 0x1E)
      {
        if ((v6 - 3) >= 0xFFFFFFFE) {
          uint64_t v7 = *(void *)(v1 + v3);
        }
        else {
          uint64_t v7 = 0;
        }
        if ((v6 - 3) < 0xFFFFFFFE)
        {
          if (v6 == 3) {
            *((void *)v5 + 1) = 0;
          }
          goto LABEL_7;
        }
        unint64_t v8 = v7 + 8;
      }
      else
      {
        if ((v5[1] & 0x7F) != 2 && !*((_DWORD *)v5 + 3)) {
          goto LABEL_7;
        }
        uint64_t v9 = *((void *)v5 + 2);
        if ((v9 & 4) == 0) {
          goto LABEL_7;
        }
        unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFF8;
        if (!v8) {
          goto LABEL_7;
        }
      }
      uint64_t v14 = v1 + v3;
      sub_1CC5FA668(v8 + 16, &v14);
LABEL_7:
      *uint64_t v4 = v5;
      this = llvm::MetadataTracking::track(v1 + v3, v5, v1 | 2);
      goto LABEL_9;
    }
    *uint64_t v4 = 0;
LABEL_9:
    v3 += 8;
  }
  while (v3);
  uint64_t v10 = *(unsigned int *)(v1 + 8);
  *(unsigned char *)(v1 + 1) &= 0x80u;
  if (!v10)
  {
LABEL_34:
    *(_DWORD *)(v1 + 12) = 0;
    return llvm::MDNode::dropReplaceableUses(v1);
  }
  int v11 = 0;
  uint64_t v12 = -8 * v10;
  do
  {
    uint64_t v13 = *(unsigned __int8 **)(v1 + v12);
    if (v13)
    {
      if (*v13 - 4 > 0x1E) {
        LODWORD(v13) = 0;
      }
      else {
        LODWORD(v13) = (v13[1] & 0x7F) == 2 || *((_DWORD *)v13 + 3) != 0;
      }
    }
    v11 += (int)v13;
    v12 += 8;
  }
  while (v12);
  *(_DWORD *)(v1 + 12) = v11;
  if (!v11) {
    return llvm::MDNode::dropReplaceableUses(v1);
  }
  return this;
}

uint64_t llvm::MDNode::dropReplaceableUses(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if ((v1 & 4) != 0)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(this + 16) = *(void *)(v1 & 0xFFFFFFFFFFFFFFF8) & 0xFFFFFFFFFFFFFFFBLL;
    llvm::ReplaceableMetadataImpl::resolveAllUses((llvm::ReplaceableMetadataImpl *)(v1 & 0xFFFFFFFFFFFFFFF8), 1);
    if ((*(unsigned char *)(v2 + 16) & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)(v2 + 24), 8);
    }
    JUMPOUT(0x1D25D9CE0);
  }
  return this;
}

void llvm::MDNode::makeDistinct(llvm::MDNode *this)
{
  llvm::MDNode::dropReplaceableUses((uint64_t)this);

  llvm::MDNode::storeDistinctInContext(this);
}

void llvm::MDNode::storeDistinctInContext(llvm::MDNode *this)
{
  *((unsigned char *)this + 1) = *((unsigned char *)this + 1) & 0x80 | 1;
  int v2 = *(unsigned __int8 *)this;
  if (v2 == 4 || ((1 << v2) & 0x7FFFFFEE0) == 0) {
    *((_DWORD *)this + 1) = 0;
  }
  uint64_t v3 = *((void *)this + 2);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 4) != 0) {
    unint64_t v4 = *(void *)v4;
  }
  uint64_t v5 = *(void **)v4;
  int v6 = *(void **)(*(void *)v4 + 1200);
  unint64_t v7 = *(void *)(*(void *)v4 + 1208);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = (void *)v5[149];
    uint64_t v10 = v6 - v9;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61) {
      abort();
    }
    uint64_t v12 = v7 - (void)v9;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        sub_1CB833614();
      }
      uint64_t v14 = (char *)operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    char v15 = &v14[8 * v10];
    *(void *)char v15 = this;
    unint64_t v8 = v15 + 8;
    if (v6 != v9)
    {
      do
      {
        uint64_t v16 = *--v6;
        *((void *)v15 - 1) = v16;
        v15 -= 8;
      }
      while (v6 != v9);
      int v6 = (void *)v5[149];
    }
    v5[149] = v15;
    v5[150] = v8;
    v5[151] = &v14[8 * v13];
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *int v6 = this;
    unint64_t v8 = v6 + 1;
  }
  v5[150] = v8;
}

uint64_t llvm::MDNode::resolveAfterOperandChange(uint64_t this, llvm::Metadata *a2, llvm::Metadata *a3)
{
  if (a2
    && *(unsigned __int8 *)a2 - 4 <= 0x1E
    && ((*((unsigned char *)a2 + 1) & 0x7F) == 2 || *((_DWORD *)a2 + 3)))
  {
    if ((!a3
       || *(unsigned __int8 *)a3 - 4 > 0x1E
       || (*((unsigned char *)a3 + 1) & 0x7F) != 2 && !*((_DWORD *)a3 + 3))
      && (*(unsigned char *)(this + 1) & 0x7F) != 2)
    {
      int v3 = *(_DWORD *)(this + 12) - 1;
      *(_DWORD *)(this + 12) = v3;
      if (!v3) {
        return llvm::MDNode::dropReplaceableUses(this);
      }
    }
  }
  else if (a3 {
         && *(unsigned __int8 *)a3 - 4 <= 0x1E
  }
         && ((*((unsigned char *)a3 + 1) & 0x7F) == 2 || *((_DWORD *)a3 + 3)))
  {
    ++*(_DWORD *)(this + 12);
  }
  return this;
}

llvm::MDNode *llvm::MDNode::replaceWithDistinctImpl(llvm::MDNode *this)
{
  return this;
}

llvm::MDNode *llvm::MDNode::replaceWithUniquedImpl(llvm::MDNode *this)
{
  int v2 = llvm::MDNode::uniquify(this);
  if (v2 == (unsigned int *)this)
  {
    llvm::MDNode::makeUniqued((uint64_t)this);
    return this;
  }
  else
  {
    uint64_t v5 = (llvm::Metadata *)v2;
    uint64_t v4 = *((void *)this + 2);
    if ((v4 & 4) != 0) {
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v4 & 0xFFFFFFFFFFFFFFF8), (llvm::Metadata *)v2);
    }
    llvm::MDNode::deleteAsSubclass(this);
    return v5;
  }
}

unsigned int *llvm::MDNode::uniquify(llvm::MDNode *this)
{
  int v2 = (void *)*(unsigned __int8 *)this;
  switch(*(unsigned char *)this)
  {
    case 5:
      uint64_t v50 = *((void *)this + 2);
      int v51 = (void *)(v50 & 0xFFFFFFFFFFFFFFF8);
      if ((v50 & 4) != 0) {
        int v51 = (void *)*v51;
      }
      uint64_t v1 = (void *)*v51;
      size_t v52 = (uint64_t *)(*v51 + 464);
      v216 = (unsigned int *)this;
      int v53 = *((unsigned __int16 *)this + 1);
      uint64_t v54 = *((unsigned int *)this + 2);
      *(_DWORD *)v212 = *((_DWORD *)this + 1);
      *(_DWORD *)&v212[4] = v53;
      uint64_t v55 = (void *)((char *)this - 8 * v54);
      *(void *)&v212[8] = *v55;
      if (v54 == 2) {
        uint64_t v56 = v55[1];
      }
      else {
        uint64_t v56 = 0;
      }
      *(void *)&v212[16] = v56;
      v212[24] = *((unsigned char *)this + 1) >> 7;
      uint64_t v217 = 0;
      if (sub_1CC592C38(v52, v212, &v217)) {
        BOOL v102 = v217 == (uint64_t *)(v1[58] + 8 * *((unsigned int *)v1 + 120));
      }
      else {
        BOOL v102 = 1;
      }
      if (!v102)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      *(void *)v212 = 0;
      if (sub_1CC593034(v52, (uint64_t *)&v216, v212)) {
        return v216;
      }
      int v103 = *((_DWORD *)v1 + 118);
      unsigned int v104 = *((_DWORD *)v1 + 120);
      if (4 * v103 + 4 >= 3 * v104)
      {
        v104 *= 2;
      }
      else if (v104 + ~v103 - *((_DWORD *)v1 + 119) > v104 >> 3)
      {
        goto LABEL_130;
      }
      sub_1CC593238((uint64_t)v52, v104);
      *(void *)v212 = 0;
      sub_1CC593034(v52, (uint64_t *)&v216, v212);
LABEL_130:
      int v2 = *(void **)v212;
      ++*((_DWORD *)v1 + 118);
      if (*v2 != -4096) {
        goto LABEL_279;
      }
      goto LABEL_131;
    case 6:
      uint64_t v184 = *((void *)this + 2);
      uint64_t v185 = (void *)(v184 & 0xFFFFFFFFFFFFFFF8);
      if ((v184 & 4) != 0) {
        uint64_t v185 = (void *)*v185;
      }
      uint64_t v186 = (void *)*v185;
      v187 = (uint64_t *)(*v185 + 488);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      uint64_t v188 = (uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 3;
      *(void *)v212 = *((void *)this + 3);
      *(void *)&v212[8] = v188;
      if (sub_1CD5B7E4C(v187, (uint64_t)v212, &v217)) {
        BOOL v189 = v217 == (uint64_t *)(v186[61] + 8 * *((unsigned int *)v186 + 126));
      }
      else {
        BOOL v189 = 1;
      }
      if (!v189)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B7FA0((uint64_t)v187, &v216, (uint64_t)v212);
      return v216;
    case 7:
      uint64_t v173 = *((void *)this + 2);
      v174 = (void *)(v173 & 0xFFFFFFFFFFFFFFF8);
      if ((v173 & 4) != 0) {
        v174 = (void *)*v174;
      }
      int v175 = (void *)*v174;
      char v176 = (uint64_t *)(*v174 + 512);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_OWORD *)v212 = *(_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      if (sub_1CD5B8254(v176, (uint64_t *)v212, &v217)) {
        BOOL v177 = v217 == (uint64_t *)(v175[64] + 8 * *((unsigned int *)v175 + 132));
      }
      else {
        BOOL v177 = 1;
      }
      if (!v177)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B8340((uint64_t)v176, &v216, (uint64_t)v212);
      return v216;
    case 8:
      int v67 = sub_1CC5ED5A4((uint64_t)this - 8 * *((unsigned int *)this + 2) + 8, (uint64_t)this);
      *((_DWORD *)this + 1) = v67;
      uint64_t v68 = *((void *)this + 2);
      uint64_t v69 = (void *)(v68 & 0xFFFFFFFFFFFFFFF8);
      if ((v68 & 4) != 0) {
        uint64_t v69 = (void *)*v69;
      }
      unsigned int v70 = (void *)*v69;
      uint64_t v71 = (uint64_t *)(*v69 + 536);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_OWORD *)v212 = 0uLL;
      uint64_t v72 = (uint64_t *)((char *)this - 8 * *((unsigned int *)this + 2));
      uint64_t v73 = *v72;
      *(void *)&v212[16] = v72 + 1;
      *(void *)&v212[24] = (this - (llvm::MDNode *)(v72 + 1)) >> 3;
      LODWORD(v72) = *((unsigned __int16 *)this + 1);
      *(_DWORD *)&v212[32] = v67;
      *(_DWORD *)&v212[36] = v72;
      *(void *)&v212[40] = v73;
      if (sub_1CD5B2CFC(v71, (uint64_t)v212, &v217)) {
        BOOL v74 = v217 == (uint64_t *)(v70[67] + 8 * *((unsigned int *)v70 + 138));
      }
      else {
        BOOL v74 = 1;
      }
      if (!v74)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B2FAC((uint64_t)v71, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 9:
      uint64_t v123 = *((void *)this + 2);
      __int16 v124 = (void *)(v123 & 0xFFFFFFFFFFFFFFF8);
      if ((v123 & 4) != 0) {
        __int16 v124 = (void *)*v124;
      }
      uint64_t v125 = (void *)*v124;
      char v126 = (uint64_t *)(*v124 + 560);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      uint64_t v127 = (_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      long long v128 = v127[1];
      *(_OWORD *)v212 = *v127;
      *(_OWORD *)&v212[16] = v128;
      if (sub_1CD5B3380(v126, (uint64_t *)v212, &v217)) {
        BOOL v129 = v217 == (uint64_t *)(v125[70] + 8 * *((unsigned int *)v125 + 144));
      }
      else {
        BOOL v129 = 1;
      }
      if (!v129)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B36B8((uint64_t)v126, &v216, (uint64_t)v212);
      return v216;
    case 0xA:
      uint64_t v164 = *((void *)this + 2);
      char v165 = (void *)(v164 & 0xFFFFFFFFFFFFFFF8);
      if ((v164 & 4) != 0) {
        char v165 = (void *)*v165;
      }
      std::string v166 = (void *)*v165;
      v167 = (uint64_t *)(*v165 + 584);
      v216 = (unsigned int *)this;
      *(_DWORD *)&v212[8] = *((_DWORD *)this + 8);
      if (*(_DWORD *)&v212[8] > 0x40u) {
        operator new[]();
      }
      int v208 = *((_DWORD *)this + 1);
      uint64_t v209 = *((void *)this - *((unsigned int *)this + 2));
      *(void *)v212 = *((void *)this + 3);
      *(void *)&v212[16] = v209;
      v212[24] = v208 != 0;
      uint64_t v217 = 0;
      int v210 = sub_1CD5B3EA8(v167, (llvm *)v212, &v217);
      uint64_t v15 = 0;
      if (v210) {
        BOOL v211 = v217 == (uint64_t *)(v166[73] + 8 * *((unsigned int *)v166 + 150));
      }
      else {
        BOOL v211 = 1;
      }
      if (!v211) {
        uint64_t v15 = *v217;
      }
      if (*(_DWORD *)&v212[8] >= 0x41u && *(void *)v212) {
        MEMORY[0x1D25D9CB0](*(void *)v212, 0x1000C8000313F17);
      }
      if (v15) {
        return (unsigned int *)v15;
      }
      sub_1CD5B4028((uint64_t)v167, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0xB:
      uint64_t v178 = *((void *)this + 2);
      uint64_t v179 = (void *)(v178 & 0xFFFFFFFFFFFFFFF8);
      if ((v178 & 4) != 0) {
        uint64_t v179 = (void *)*v179;
      }
      v180 = (void *)*v179;
      v181 = (uint64_t *)(*v179 + 608);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_DWORD *)v212 = *((unsigned __int16 *)this + 1);
      uint64_t v182 = *((void *)this + 4);
      *(void *)&v212[8] = ((void *)this - *((unsigned int *)this + 2))[2];
      *(void *)&v212[16] = v182;
      *(void *)&v212[24] = *((void *)this + 6);
      *(_DWORD *)&v212[32] = *((_DWORD *)this + 7);
      if (sub_1CD5B42F0(v181, (uint64_t)v212, &v217)) {
        BOOL v183 = v217 == (uint64_t *)(v180[76] + 8 * *((unsigned int *)v180 + 156));
      }
      else {
        BOOL v183 = 1;
      }
      if (!v183)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B44E8((uint64_t)v181, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0xC:
      uint64_t v62 = *((void *)this + 2);
      uint64_t v63 = (void *)(v62 & 0xFFFFFFFFFFFFFFF8);
      if ((v62 & 4) != 0) {
        uint64_t v63 = (void *)*v63;
      }
      __int16 v64 = (void *)*v63;
      BOOL v65 = (uint64_t *)(*v63 + 632);
      v216 = (unsigned int *)this;
      sub_1CC594474((uint64_t)v212, (uint64_t)this);
      uint64_t v217 = 0;
      if (sub_1CC593B04(v65, (uint64_t)v212, &v217)) {
        BOOL v66 = v217 == (uint64_t *)(v64[79] + 8 * *((unsigned int *)v64 + 162));
      }
      else {
        BOOL v66 = 1;
      }
      if (!v66)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CC5942D0((uint64_t)v65, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0xD:
      uint64_t v159 = *((void *)this + 2);
      std::string v160 = (void *)(v159 & 0xFFFFFFFFFFFFFFF8);
      if ((v159 & 4) != 0) {
        std::string v160 = (void *)*v160;
      }
      uint64_t v161 = (void *)*v160;
      char v162 = (uint64_t *)(*v160 + 656);
      v216 = (unsigned int *)this;
      sub_1CD5B5234((uint64_t)v212, (uint64_t)this);
      uint64_t v217 = 0;
      if (sub_1CD5B4E44(v162, (uint64_t)v212, &v217)) {
        BOOL v163 = v217 == (uint64_t *)(v161[82] + 8 * *((unsigned int *)v161 + 168));
      }
      else {
        BOOL v163 = 1;
      }
      if (!v163)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B50B4((uint64_t)v162, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0xE:
      uint64_t v57 = *((void *)this + 2);
      size_t v58 = (void *)(v57 & 0xFFFFFFFFFFFFFFF8);
      if ((v57 & 4) != 0) {
        size_t v58 = (void *)*v58;
      }
      uint64_t v59 = (void *)*v58;
      size_t v60 = (uint64_t *)(*v58 + 680);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_DWORD *)v212 = *((_DWORD *)this + 7);
      v212[4] = *((unsigned char *)this + 52);
      *(void *)&v212[8] = ((void *)this - *((unsigned int *)this + 2))[3];
      if (sub_1CC594AB4(v60, (uint64_t)v212, &v217)) {
        BOOL v61 = v217 == (uint64_t *)(v59[85] + 8 * *((unsigned int *)v59 + 174));
      }
      else {
        BOOL v61 = 1;
      }
      if (!v61)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CC594D94((uint64_t)v60, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0xF:
      uint64_t v37 = *((void *)this + 2);
      uint64_t v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((v37 & 4) != 0) {
        uint64_t v38 = (void *)*v38;
      }
      uint64_t v39 = (void *)*v38;
      uint64_t v40 = (uint64_t *)(*v38 + 704);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      long long v41 = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)v212 = *(_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      *(_OWORD *)&v212[16] = v41;
      *(void *)&v212[32] = *((void *)this + 5);
      *(_OWORD *)&v212[40] = *((_OWORD *)this + 3);
      if (sub_1CC595140(v40, (uint64_t)v212, &v217)) {
        BOOL v42 = v217 == (uint64_t *)(v39[88] + 8 * *((unsigned int *)v39 + 180));
      }
      else {
        BOOL v42 = 1;
      }
      if (!v42)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CC595504((uint64_t)v40, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x10:
      __break(1u);
LABEL_279:
      --*((_DWORD *)v1 + 119);
LABEL_131:
      void *v2 = v216;
      return v216;
    case 0x11:
      uint64_t v83 = *((void *)this + 2);
      uint64_t v84 = (void *)(v83 & 0xFFFFFFFFFFFFFFF8);
      if ((v83 & 4) != 0) {
        uint64_t v84 = (void *)*v84;
      }
      uint64_t v85 = (void *)*v84;
      v86 = (uint64_t *)(*v84 + 728);
      v216 = (unsigned int *)this;
      sub_1CC5962EC((uint64_t)v212, (uint64_t)this);
      uint64_t v217 = 0;
      if (sub_1CC595B64(v86, (uint64_t)v212, &v217)) {
        BOOL v87 = v217 == (uint64_t *)(v85[91] + 8 * *((unsigned int *)v85 + 186));
      }
      else {
        BOOL v87 = 1;
      }
      if (!v87)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CC596170((uint64_t)v86, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x12:
      uint64_t v145 = *((void *)this + 2);
      int v146 = (void *)(v145 & 0xFFFFFFFFFFFFFFF8);
      if ((v145 & 4) != 0) {
        int v146 = (void *)*v146;
      }
      int v147 = (void *)*v146;
      uint64_t v148 = (uint64_t *)(*v146 + 752);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      uint64_t v149 = *((void *)this - *((unsigned int *)this + 2));
      *(void *)v212 = ((void *)this - *((unsigned int *)this + 2))[1];
      *(void *)&v212[8] = v149;
      int v150 = *((unsigned __int16 *)this + 14);
      *(_DWORD *)&v212[16] = *((_DWORD *)this + 6);
      *(_DWORD *)&v212[20] = v150;
      if (sub_1CD5B5420(v148, (uint64_t)v212, &v217)) {
        BOOL v151 = v217 == (uint64_t *)(v147[94] + 8 * *((unsigned int *)v147 + 192));
      }
      else {
        BOOL v151 = 1;
      }
      if (!v151)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B563C((uint64_t)v148, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x13:
      uint64_t v95 = *((void *)this + 2);
      int v96 = (void *)(v95 & 0xFFFFFFFFFFFFFFF8);
      if ((v95 & 4) != 0) {
        int v96 = (void *)*v96;
      }
      uint64_t v97 = (void *)*v96;
      unsigned int v98 = (uint64_t *)(*v96 + 776);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      uint64_t v99 = *((void *)this - *((unsigned int *)this + 2));
      *(void *)v212 = ((void *)this - *((unsigned int *)this + 2))[1];
      *(void *)&v212[8] = v99;
      *(_DWORD *)&v212[16] = *((_DWORD *)this + 6);
      if (sub_1CC5965F8(v98, (uint64_t)v212, &v217)) {
        BOOL v100 = v217 == (uint64_t *)(v97[97] + 8 * *((unsigned int *)v97 + 198));
      }
      else {
        BOOL v100 = 1;
      }
      if (!v100)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CC596820((uint64_t)v98, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x14:
      uint64_t v168 = *((void *)this + 2);
      uint64_t v169 = (void *)(v168 & 0xFFFFFFFFFFFFFFF8);
      if ((v168 & 4) != 0) {
        uint64_t v169 = (void *)*v169;
      }
      char v170 = (void *)*v169;
      uint64_t v171 = (uint64_t *)(*v169 + 800);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_OWORD *)v212 = *(_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2) + 8);
      v212[16] = *((unsigned char *)this + 24) & 1;
      if (sub_1CD5B5A1C(v171, (uint64_t)v212, &v217)) {
        BOOL v172 = v217 == (uint64_t *)(v170[100] + 8 * *((unsigned int *)v170 + 204));
      }
      else {
        BOOL v172 = 1;
      }
      if (!v172)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B5B9C((uint64_t)v171, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x15:
      uint64_t v43 = *((void *)this + 2);
      unint64_t v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFF8);
      if ((v43 & 4) != 0) {
        unint64_t v44 = (void *)*v44;
      }
      uint64_t v45 = (void *)*v44;
      unsigned int v46 = (uint64_t *)(*v44 + 824);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      unsigned int v47 = (_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      long long v48 = v47[1];
      *(_OWORD *)v212 = *v47;
      *(_OWORD *)&v212[16] = v48;
      *(_OWORD *)&v212[32] = v47[2];
      *(_DWORD *)&v212[48] = *((_DWORD *)this + 6);
      v212[52] = *((unsigned char *)this + 28);
      if (sub_1CC596D5C(v46, (uint64_t *)v212, &v217)) {
        BOOL v49 = v217 == (uint64_t *)(v45[103] + 8 * *((unsigned int *)v45 + 210));
      }
      else {
        BOOL v49 = 1;
      }
      if (!v49)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CC596F54((uint64_t)v46, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x16:
      uint64_t v106 = *((void *)this + 2);
      uint64_t v107 = (void *)(v106 & 0xFFFFFFFFFFFFFFF8);
      if ((v106 & 4) != 0) {
        uint64_t v107 = (void *)*v107;
      }
      uint64_t v108 = (void *)*v107;
      uint64_t v109 = (uint64_t *)(*v107 + 848);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_OWORD *)v212 = *(_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      v212[16] = *((unsigned char *)this + 24);
      if (sub_1CD5B65C4(v109, (uint64_t)v212, &v217)) {
        BOOL v110 = v217 == (uint64_t *)(v108[106] + 8 * *((unsigned int *)v108 + 216));
      }
      else {
        BOOL v110 = 1;
      }
      if (!v110)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B66CC((uint64_t)v109, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x17:
      uint64_t v24 = *((void *)this + 2);
      char v25 = (void *)(v24 & 0xFFFFFFFFFFFFFFF8);
      if ((v24 & 4) != 0) {
        char v25 = (void *)*v25;
      }
      unsigned int v26 = (void *)*v25;
      int v27 = (uint64_t *)(*v25 + 872);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_DWORD *)v212 = *((unsigned __int16 *)this + 1);
      uint64_t v28 = (char *)this - 8 * *((unsigned int *)this + 2);
      *(_OWORD *)&v212[8] = *(_OWORD *)v28;
      v212[24] = *((unsigned char *)this + 24);
      *(void *)&v212[32] = *((void *)v28 + 2);
      if (sub_1CD5B69AC(v27, (uint64_t)v212, &v217)) {
        BOOL v29 = v217 == (uint64_t *)(v26[109] + 8 * *((unsigned int *)v26 + 222));
      }
      else {
        BOOL v29 = 1;
      }
      if (!v29)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B6C4C((uint64_t)v27, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x18:
      uint64_t v196 = *((void *)this + 2);
      uint64_t v197 = (void *)(v196 & 0xFFFFFFFFFFFFFFF8);
      if ((v196 & 4) != 0) {
        uint64_t v197 = (void *)*v197;
      }
      v198 = (void *)*v197;
      uint64_t v199 = (char *)this - 8 * *((unsigned int *)this + 2);
      uint64_t v200 = *((void *)v199 + 2);
      uint64_t v201 = *((void *)v199 + 3);
      *(void *)&v212[16] = *((void *)v199 + 5);
      *(void *)&v212[24] = v200;
      LODWORD(v200) = *((_DWORD *)this + 7);
      *(_DWORD *)&v212[32] = *((_DWORD *)this + 6);
      *(void *)&v212[40] = v201;
      uint64_t v202 = (uint64_t)(v198 + 112);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_OWORD *)v212 = *(_OWORD *)v199;
      *(_WORD *)&v212[48] = *((_WORD *)this + 16);
      long long v213 = *((_OWORD *)v199 + 3);
      int v214 = v200;
      uint64_t v215 = *((void *)v199 + 8);
      if (sub_1CD5B6F44(v198 + 112, (uint64_t)v212, &v217))
      {
        if (v217 != (uint64_t *)(v198[112] + 8 * *((unsigned int *)v198 + 228)))
        {
          uint64_t v15 = *v217;
          if (*v217) {
            return (unsigned int *)v15;
          }
        }
      }
      sub_1CD5B74C4(v202, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x19:
      uint64_t v30 = *((void *)this + 2);
      uint64_t v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFF8);
      if ((v30 & 4) != 0) {
        uint64_t v31 = (void *)*v31;
      }
      uint64_t v32 = (void *)*v31;
      int v33 = (char *)this - 8 * *((unsigned int *)this + 2);
      uint64_t v34 = *((void *)v33 + 3);
      *(void *)&v212[16] = *((void *)v33 + 2);
      int v35 = *((_DWORD *)this + 7);
      *(_DWORD *)&v212[24] = *((_DWORD *)this + 6);
      uint64_t v36 = (uint64_t)(v32 + 115);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_OWORD *)v212 = *(_OWORD *)v33;
      *(void *)&v212[32] = v34;
      LODWORD(v34) = *((_DWORD *)this + 9);
      *(_DWORD *)&v212[40] = *((unsigned __int16 *)this + 16);
      *(_DWORD *)&v212[44] = v34;
      *(_DWORD *)&v212[48] = v35;
      *(void *)&long long v213 = *((void *)v33 + 4);
      if (sub_1CC5975C0(v32 + 115, (uint64_t)v212, &v217))
      {
        if (v217 != (uint64_t *)(v32[115] + 8 * *((unsigned int *)v32 + 234)))
        {
          uint64_t v15 = *v217;
          if (*v217) {
            return (unsigned int *)v15;
          }
        }
      }
      sub_1CC597A9C(v36, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x1A:
      uint64_t v111 = *((void *)this + 2);
      char v112 = (void *)(v111 & 0xFFFFFFFFFFFFFFF8);
      if ((v111 & 4) != 0) {
        char v112 = (void *)*v112;
      }
      uint64_t v113 = (void *)*v112;
      uint64_t v114 = (uint64_t *)(*v112 + 944);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      __int16 v115 = (char *)this - 8 * *((unsigned int *)this + 2);
      *(_OWORD *)v212 = *(_OWORD *)v115;
      *(void *)&v212[16] = *((void *)v115 + 2);
      *(_DWORD *)&v212[24] = *((_DWORD *)this + 6);
      if (sub_1CD5B78D0(v114, (uint64_t)v212, &v217)) {
        BOOL v116 = v217 == (uint64_t *)(v113[118] + 8 * *((unsigned int *)v113 + 240));
      }
      else {
        BOOL v116 = 1;
      }
      if (!v116)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B7A9C((uint64_t)v114, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x1B:
      uint64_t v130 = *((void *)this + 2);
      size_t v131 = (void *)(v130 & 0xFFFFFFFFFFFFFFF8);
      if ((v130 & 4) != 0) {
        size_t v131 = (void *)*v131;
      }
      v132 = (void *)*v131;
      unint64_t v133 = (char *)this - 8 * *((unsigned int *)this + 2);
      long long v134 = *((_OWORD *)v133 + 1);
      *(_OWORD *)v212 = *(_OWORD *)v133;
      uint64_t v135 = (uint64_t)(v132 + 121);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      int v136 = *((_DWORD *)this + 7);
      *(_DWORD *)&v212[16] = *((_DWORD *)this + 6);
      *(_OWORD *)&v212[24] = v134;
      *(_DWORD *)&v212[40] = v136;
      *(void *)&v212[48] = *((void *)v133 + 4);
      if (sub_1CD5B86E0(v132 + 121, (uint64_t)v212, (unsigned int ***)&v217)) {
        BOOL v137 = v217 == (uint64_t *)(v132[121] + 8 * *((unsigned int *)v132 + 246));
      }
      else {
        BOOL v137 = 1;
      }
      if (!v137)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B8A70(v135, &v216, (uint64_t)v212);
      return v216;
    case 0x1C:
      uint64_t v75 = *((void *)this + 2);
      uint64_t v76 = (void *)(v75 & 0xFFFFFFFFFFFFFFF8);
      if ((v75 & 4) != 0) {
        uint64_t v76 = (void *)*v76;
      }
      uint64_t v77 = (void *)*v76;
      *(_DWORD *)v212 = *((unsigned __int16 *)this + 1);
      uint64_t v78 = (char *)this - 8 * *((unsigned int *)this + 2);
      uint64_t v79 = *((void *)v78 + 2);
      *(void *)&v212[24] = *((void *)v78 + 3);
      uint64_t v80 = (uint64_t)(v77 + 124);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_OWORD *)&v212[8] = *(_OWORD *)v78;
      *(_DWORD *)&v212[32] = *((_DWORD *)this + 6);
      uint64_t v81 = *((void *)v78 + 4);
      *(void *)&v212[40] = v79;
      *(void *)&v212[48] = v81;
      if (sub_1CC5982CC(v77 + 124, (uint64_t)v212, &v217)) {
        BOOL v82 = v217 == (uint64_t *)(v77[124] + 8 * *((unsigned int *)v77 + 252));
      }
      else {
        BOOL v82 = 1;
      }
      if (!v82)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CC5985B0(v80, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x1D:
      uint64_t v190 = *((void *)this + 2);
      v191 = (void *)(v190 & 0xFFFFFFFFFFFFFFF8);
      if ((v190 & 4) != 0) {
        v191 = (void *)*v191;
      }
      uint64_t v192 = (void *)*v191;
      v193 = (uint64_t *)(*v191 + 1016);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      int v194 = *((_DWORD *)this + 6);
      *(_DWORD *)v212 = *((unsigned __int16 *)this + 1);
      *(_DWORD *)&v212[4] = v194;
      *(_OWORD *)&v212[8] = *(_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      if (sub_1CD5B8F7C(v193, (uint64_t)v212, &v217)) {
        BOOL v195 = v217 == (uint64_t *)(v192[127] + 8 * *((unsigned int *)v192 + 258));
      }
      else {
        BOOL v195 = 1;
      }
      if (v195) {
        goto LABEL_249;
      }
      uint64_t v15 = *v217;
      if (!*v217) {
        goto LABEL_249;
      }
      return (unsigned int *)v15;
    case 0x1E:
      uint64_t v203 = *((void *)this + 2);
      uint64_t v204 = (void *)(v203 & 0xFFFFFFFFFFFFFFF8);
      if ((v203 & 4) != 0) {
        uint64_t v204 = (void *)*v204;
      }
      v205 = (void *)*v204;
      v193 = (uint64_t *)(*v204 + 1040);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      int v206 = *((_DWORD *)this + 6);
      *(_DWORD *)v212 = *((unsigned __int16 *)this + 1);
      *(_DWORD *)&v212[4] = v206;
      *(_OWORD *)&v212[8] = *(_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      if (sub_1CD5B8F7C(v193, (uint64_t)v212, &v217)) {
        BOOL v207 = v217 == (uint64_t *)(v205[130] + 8 * *((unsigned int *)v205 + 264));
      }
      else {
        BOOL v207 = 1;
      }
      if (!v207)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
LABEL_249:
      sub_1CD5B91F0((uint64_t)v193, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x1F:
      uint64_t v138 = *((void *)this + 2);
      uint64_t v139 = (void *)(v138 & 0xFFFFFFFFFFFFFFF8);
      if ((v138 & 4) != 0) {
        uint64_t v139 = (void *)*v139;
      }
      uint64_t v140 = (void *)*v139;
      uint64_t v141 = (uint64_t *)(*v139 + 1064);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      unsigned int v142 = (_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      long long v143 = v142[1];
      *(_OWORD *)v212 = *v142;
      *(_OWORD *)&v212[16] = v143;
      *(_DWORD *)&v212[32] = *((_DWORD *)this + 6);
      if (sub_1CD5B5E7C(v141, (uint64_t)v212, &v217)) {
        BOOL v144 = v217 == (uint64_t *)(v140[133] + 8 * *((unsigned int *)v140 + 270));
      }
      else {
        BOOL v144 = 1;
      }
      if (!v144)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B60B0((uint64_t)v141, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x20:
      uint64_t v117 = *((void *)this + 2);
      __int16 v118 = (void *)(v117 & 0xFFFFFFFFFFFFFFF8);
      if ((v117 & 4) != 0) {
        __int16 v118 = (void *)*v118;
      }
      uint64_t v119 = (void *)*v118;
      long long v120 = (uint64_t *)(*v118 + 1088);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      uint64_t v121 = *((unsigned int *)this + 8);
      *(void *)v212 = *((void *)this + 3);
      *(void *)&v212[8] = v121;
      if (sub_1CD5B95A0(v120, (const void **)v212, &v217)) {
        BOOL v122 = v217 == (uint64_t *)(v119[136] + 8 * *((unsigned int *)v119 + 276));
      }
      else {
        BOOL v122 = 1;
      }
      if (!v122)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B9694((uint64_t)v120, &v216, (uint64_t)v212);
      return v216;
    case 0x21:
      uint64_t v88 = *((void *)this + 2);
      size_t v89 = (void *)(v88 & 0xFFFFFFFFFFFFFFF8);
      if ((v88 & 4) != 0) {
        size_t v89 = (void *)*v89;
      }
      unint64_t v90 = (void *)*v89;
      size_t v91 = (char *)this - 8 * *((unsigned int *)this + 2);
      long long v92 = *((_OWORD *)v91 + 2);
      *(_OWORD *)&v212[8] = *((_OWORD *)v91 + 1);
      uint64_t v93 = (uint64_t)(v90 + 139);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      *(_DWORD *)v212 = *((unsigned __int16 *)this + 1);
      *(_OWORD *)&v212[24] = v92;
      *(void *)&v212[40] = *((void *)this + 4);
      *(void *)&v212[48] = *((void *)this + 6);
      if (sub_1CD5B47E4(v90 + 139, (uint64_t)v212, &v217)) {
        BOOL v94 = v217 == (uint64_t *)(v90[139] + 8 * *((unsigned int *)v90 + 282));
      }
      else {
        BOOL v94 = 1;
      }
      if (!v94)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B4A74(v93, (uint64_t *)&v216, (uint64_t)v212);
      return v216;
    case 0x22:
      uint64_t v152 = *((void *)this + 2);
      int64_t v153 = (void *)(v152 & 0xFFFFFFFFFFFFFFF8);
      if ((v152 & 4) != 0) {
        int64_t v153 = (void *)*v153;
      }
      uint64_t v154 = (void *)*v153;
      long long v155 = (uint64_t *)(*v153 + 1136);
      v216 = (unsigned int *)this;
      uint64_t v217 = 0;
      long long v156 = (_OWORD *)((char *)this - 8 * *((unsigned int *)this + 2));
      long long v157 = v156[1];
      *(_OWORD *)v212 = *v156;
      *(_OWORD *)&v212[16] = v157;
      if (sub_1CD5B398C(v155, (uint64_t *)v212, &v217)) {
        BOOL v158 = v217 == (uint64_t *)(v154[142] + 8 * *((unsigned int *)v154 + 288));
      }
      else {
        BOOL v158 = 1;
      }
      if (!v158)
      {
        uint64_t v15 = *v217;
        if (*v217) {
          return (unsigned int *)v15;
        }
      }
      sub_1CD5B3B0C((uint64_t)v155, &v216, (uint64_t)v212);
      return v216;
    default:
      unsigned int v4 = sub_1CC5ED5A4((uint64_t)this - 8 * *((unsigned int *)this + 2), (uint64_t)this);
      *((_DWORD *)this + 1) = v4;
      uint64_t v5 = *((void *)this + 2);
      int v6 = (void *)(v5 & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 4) != 0) {
        int v6 = (void *)*v6;
      }
      unint64_t v7 = (void *)*v6;
      *(void *)v212 = this;
      int v8 = *((_DWORD *)v7 + 114);
      if (!v8)
      {
        int v101 = 0;
        goto LABEL_119;
      }
      uint64_t v9 = *((unsigned int *)this + 2);
      uint64_t v10 = v7[55];
      int v11 = v8 - 1;
      int v12 = 1;
      unsigned int v13 = v4;
      while (2)
      {
        unsigned int v14 = v13 & v11;
        uint64_t v15 = *(void *)(v10 + 8 * v14);
        if (v15 == -4096) {
          goto LABEL_16;
        }
        if (v15 == -8192 || __PAIR64__(v9, v4) != *(void *)(v15 + 4)) {
          goto LABEL_9;
        }
        if (v9)
        {
          uint64_t v16 = -8 * v9;
          while (*(void *)((char *)this + v16) == *(void *)(v15 + v16))
          {
            v16 += 8;
            if (!v16) {
              goto LABEL_14;
            }
          }
LABEL_9:
          unsigned int v13 = v14 + v12++;
          continue;
        }
        break;
      }
LABEL_14:
      if (v14 == v8 || !v15)
      {
LABEL_16:
        unsigned int v17 = v11 & v4;
        uint64_t v18 = (llvm::MDNode **)(v10 + 8 * (v11 & v4));
        uint64_t v19 = *v18;
        if (*v18 != this)
        {
          uint64_t v20 = 0;
          int v21 = 1;
          while (v19 != (llvm::MDNode *)-4096)
          {
            if (v20) {
              BOOL v22 = 0;
            }
            else {
              BOOL v22 = v19 == (llvm::MDNode *)-8192;
            }
            if (v22) {
              uint64_t v20 = v18;
            }
            unsigned int v23 = v17 + v21++;
            unsigned int v17 = v23 & v11;
            uint64_t v18 = (llvm::MDNode **)(v10 + 8 * v17);
            uint64_t v19 = *v18;
            if (*v18 == this) {
              return (unsigned int *)this;
            }
          }
          if (v20) {
            int v101 = v20;
          }
          else {
            int v101 = v18;
          }
LABEL_119:
          *sub_1CC607EC0((uint64_t)(v7 + 55), (uint64_t *)v212, v101) = this;
        }
        return (unsigned int *)this;
      }
      return (unsigned int *)v15;
  }
}

void llvm::MDNode::deleteAsSubclass(llvm::MDNode *this)
{
  switch(*(unsigned char *)this)
  {
    case 5:
      llvm::MDNode::dropAllReferences((uint64_t)this);
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v116 = -8 * v2;
      uint64_t v117 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        __int16 v118 = *v117;
        if (*v117)
        {
          uint64_t v267 = v116;
          uint64_t v298 = v2;
          int v119 = *v118;
          if ((v119 - 4) > 0x1E)
          {
            if ((v119 - 3) >= 0xFFFFFFFE) {
              BOOL v122 = *v117;
            }
            else {
              BOOL v122 = 0;
            }
            if ((v119 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v119 == 3;
              uint64_t v116 = v267;
              uint64_t v2 = v298;
              if (v11) {
                *((void *)v118 + 1) = 0;
              }
              goto LABEL_285;
            }
            unint64_t v121 = (unint64_t)(v122 + 8);
          }
          else
          {
            uint64_t v2 = v298;
            if ((v118[1] & 0x7F) != 2 && !*((_DWORD *)v118 + 3)) {
              goto LABEL_285;
            }
            uint64_t v120 = *((void *)v118 + 2);
            if ((v120 & 4) == 0) {
              goto LABEL_285;
            }
            unint64_t v121 = v120 & 0xFFFFFFFFFFFFFFF8;
            if (!v121) {
              goto LABEL_285;
            }
          }
          uint64_t v123 = v117;
          v315 = v117;
          sub_1CC5FA668(v121 + 16, &v315);
          uint64_t v117 = v123;
          uint64_t v116 = v267;
          uint64_t v2 = v298;
        }
LABEL_285:
        --v117;
        v116 += 8;
        if (!v116) {
          goto LABEL_626;
        }
      }
    case 6:
      sub_1CC5ECCB4((uint64_t *)this);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v84 = -8 * v2;
      uint64_t v85 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        v86 = *v85;
        if (*v85)
        {
          uint64_t v263 = v84;
          uint64_t v294 = v2;
          int v87 = *v86;
          if ((v87 - 4) > 0x1E)
          {
            if ((v87 - 3) >= 0xFFFFFFFE) {
              unint64_t v90 = *v85;
            }
            else {
              unint64_t v90 = 0;
            }
            if ((v87 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v87 == 3;
              uint64_t v84 = v263;
              uint64_t v2 = v294;
              if (v11) {
                *((void *)v86 + 1) = 0;
              }
              goto LABEL_205;
            }
            unint64_t v89 = (unint64_t)(v90 + 8);
          }
          else
          {
            uint64_t v2 = v294;
            if ((v86[1] & 0x7F) != 2 && !*((_DWORD *)v86 + 3)) {
              goto LABEL_205;
            }
            uint64_t v88 = *((void *)v86 + 2);
            if ((v88 & 4) == 0) {
              goto LABEL_205;
            }
            unint64_t v89 = v88 & 0xFFFFFFFFFFFFFFF8;
            if (!v89) {
              goto LABEL_205;
            }
          }
          size_t v91 = v85;
          v315 = v85;
          sub_1CC5FA668(v89 + 16, &v315);
          uint64_t v85 = v91;
          uint64_t v84 = v263;
          uint64_t v2 = v294;
        }
LABEL_205:
        --v85;
        v84 += 8;
        if (!v84) {
          goto LABEL_626;
        }
      }
    case 7:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v100 = -8 * v2;
      int v101 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        BOOL v102 = *v101;
        if (*v101)
        {
          uint64_t v265 = v100;
          uint64_t v296 = v2;
          int v103 = *v102;
          if ((v103 - 4) > 0x1E)
          {
            if ((v103 - 3) >= 0xFFFFFFFE) {
              uint64_t v106 = *v101;
            }
            else {
              uint64_t v106 = 0;
            }
            if ((v103 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v103 == 3;
              uint64_t v100 = v265;
              uint64_t v2 = v296;
              if (v11) {
                *((void *)v102 + 1) = 0;
              }
              goto LABEL_245;
            }
            unint64_t v105 = (unint64_t)(v106 + 8);
          }
          else
          {
            uint64_t v2 = v296;
            if ((v102[1] & 0x7F) != 2 && !*((_DWORD *)v102 + 3)) {
              goto LABEL_245;
            }
            uint64_t v104 = *((void *)v102 + 2);
            if ((v104 & 4) == 0) {
              goto LABEL_245;
            }
            unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFF8;
            if (!v105) {
              goto LABEL_245;
            }
          }
          uint64_t v107 = v101;
          v315 = v101;
          sub_1CC5FA668(v105 + 16, &v315);
          int v101 = v107;
          uint64_t v100 = v265;
          uint64_t v2 = v296;
        }
LABEL_245:
        --v101;
        v100 += 8;
        if (!v100) {
          goto LABEL_626;
        }
      }
    case 8:
      llvm::MDNode::dropAllReferences((uint64_t)this);
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v44 = -8 * v2;
      uint64_t v45 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        unsigned int v46 = *v45;
        if (*v45)
        {
          uint64_t v258 = v44;
          uint64_t v289 = v2;
          int v47 = *v46;
          if ((v47 - 4) > 0x1E)
          {
            if ((v47 - 3) >= 0xFFFFFFFE) {
              uint64_t v50 = *v45;
            }
            else {
              uint64_t v50 = 0;
            }
            if ((v47 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v47 == 3;
              uint64_t v44 = v258;
              uint64_t v2 = v289;
              if (v11) {
                *((void *)v46 + 1) = 0;
              }
              goto LABEL_105;
            }
            unint64_t v49 = (unint64_t)(v50 + 8);
          }
          else
          {
            uint64_t v2 = v289;
            if ((v46[1] & 0x7F) != 2 && !*((_DWORD *)v46 + 3)) {
              goto LABEL_105;
            }
            uint64_t v48 = *((void *)v46 + 2);
            if ((v48 & 4) == 0) {
              goto LABEL_105;
            }
            unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
            if (!v49) {
              goto LABEL_105;
            }
          }
          int v51 = v45;
          v315 = v45;
          sub_1CC5FA668(v49 + 16, &v315);
          uint64_t v45 = v51;
          uint64_t v44 = v258;
          uint64_t v2 = v289;
        }
LABEL_105:
        --v45;
        v44 += 8;
        if (!v44) {
          goto LABEL_626;
        }
      }
    case 9:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v140 = -8 * v2;
      uint64_t v141 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        unsigned int v142 = *v141;
        if (*v141)
        {
          uint64_t v270 = v140;
          uint64_t v301 = v2;
          int v143 = *v142;
          if ((v143 - 4) > 0x1E)
          {
            if ((v143 - 3) >= 0xFFFFFFFE) {
              int v146 = *v141;
            }
            else {
              int v146 = 0;
            }
            if ((v143 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v143 == 3;
              uint64_t v140 = v270;
              uint64_t v2 = v301;
              if (v11) {
                *((void *)v142 + 1) = 0;
              }
              goto LABEL_345;
            }
            unint64_t v145 = (unint64_t)(v146 + 8);
          }
          else
          {
            uint64_t v2 = v301;
            if ((v142[1] & 0x7F) != 2 && !*((_DWORD *)v142 + 3)) {
              goto LABEL_345;
            }
            uint64_t v144 = *((void *)v142 + 2);
            if ((v144 & 4) == 0) {
              goto LABEL_345;
            }
            unint64_t v145 = v144 & 0xFFFFFFFFFFFFFFF8;
            if (!v145) {
              goto LABEL_345;
            }
          }
          int v147 = v141;
          v315 = v141;
          sub_1CC5FA668(v145 + 16, &v315);
          uint64_t v141 = v147;
          uint64_t v140 = v270;
          uint64_t v2 = v301;
        }
LABEL_345:
        --v141;
        v140 += 8;
        if (!v140) {
          goto LABEL_626;
        }
      }
    case 0xA:
      if (*((_DWORD *)this + 8) >= 0x41u)
      {
        uint64_t v164 = *((void *)this + 3);
        if (v164) {
          MEMORY[0x1D25D9CB0](v164, 0x1000C8000313F17);
        }
      }
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v165 = -8 * v2;
      std::string v166 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        v167 = *v166;
        if (*v166)
        {
          uint64_t v273 = v165;
          uint64_t v304 = v2;
          int v168 = *v167;
          if ((v168 - 4) > 0x1E)
          {
            if ((v168 - 3) >= 0xFFFFFFFE) {
              uint64_t v171 = *v166;
            }
            else {
              uint64_t v171 = 0;
            }
            if ((v168 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v168 == 3;
              uint64_t v165 = v273;
              uint64_t v2 = v304;
              if (v11) {
                *((void *)v167 + 1) = 0;
              }
              goto LABEL_408;
            }
            unint64_t v170 = (unint64_t)(v171 + 8);
          }
          else
          {
            uint64_t v2 = v304;
            if ((v167[1] & 0x7F) != 2 && !*((_DWORD *)v167 + 3)) {
              goto LABEL_408;
            }
            uint64_t v169 = *((void *)v167 + 2);
            if ((v169 & 4) == 0) {
              goto LABEL_408;
            }
            unint64_t v170 = v169 & 0xFFFFFFFFFFFFFFF8;
            if (!v170) {
              goto LABEL_408;
            }
          }
          BOOL v172 = v166;
          v315 = v166;
          sub_1CC5FA668(v170 + 16, &v315);
          std::string v166 = v172;
          uint64_t v165 = v273;
          uint64_t v2 = v304;
        }
LABEL_408:
        --v166;
        v165 += 8;
        if (!v165) {
          goto LABEL_626;
        }
      }
    case 0xB:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v108 = -8 * v2;
      uint64_t v109 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        BOOL v110 = *v109;
        if (*v109)
        {
          uint64_t v266 = v108;
          uint64_t v297 = v2;
          int v111 = *v110;
          if ((v111 - 4) > 0x1E)
          {
            if ((v111 - 3) >= 0xFFFFFFFE) {
              uint64_t v114 = *v109;
            }
            else {
              uint64_t v114 = 0;
            }
            if ((v111 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v111 == 3;
              uint64_t v108 = v266;
              uint64_t v2 = v297;
              if (v11) {
                *((void *)v110 + 1) = 0;
              }
              goto LABEL_265;
            }
            unint64_t v113 = (unint64_t)(v114 + 8);
          }
          else
          {
            uint64_t v2 = v297;
            if ((v110[1] & 0x7F) != 2 && !*((_DWORD *)v110 + 3)) {
              goto LABEL_265;
            }
            uint64_t v112 = *((void *)v110 + 2);
            if ((v112 & 4) == 0) {
              goto LABEL_265;
            }
            unint64_t v113 = v112 & 0xFFFFFFFFFFFFFFF8;
            if (!v113) {
              goto LABEL_265;
            }
          }
          __int16 v115 = v109;
          v315 = v109;
          sub_1CC5FA668(v113 + 16, &v315);
          uint64_t v109 = v115;
          uint64_t v108 = v266;
          uint64_t v2 = v297;
        }
LABEL_265:
        --v109;
        v108 += 8;
        if (!v108) {
          goto LABEL_626;
        }
      }
    case 0xC:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v189 = -8 * v2;
      uint64_t v190 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        v191 = *v190;
        if (*v190)
        {
          uint64_t v276 = v189;
          uint64_t v307 = v2;
          int v192 = *v191;
          if ((v192 - 4) > 0x1E)
          {
            if ((v192 - 3) >= 0xFFFFFFFE) {
              BOOL v195 = *v190;
            }
            else {
              BOOL v195 = 0;
            }
            if ((v192 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v192 == 3;
              uint64_t v189 = v276;
              uint64_t v2 = v307;
              if (v11) {
                *((void *)v191 + 1) = 0;
              }
              goto LABEL_468;
            }
            unint64_t v194 = (unint64_t)(v195 + 8);
          }
          else
          {
            uint64_t v2 = v307;
            if ((v191[1] & 0x7F) != 2 && !*((_DWORD *)v191 + 3)) {
              goto LABEL_468;
            }
            uint64_t v193 = *((void *)v191 + 2);
            if ((v193 & 4) == 0) {
              goto LABEL_468;
            }
            unint64_t v194 = v193 & 0xFFFFFFFFFFFFFFF8;
            if (!v194) {
              goto LABEL_468;
            }
          }
          uint64_t v196 = v190;
          v315 = v190;
          sub_1CC5FA668(v194 + 16, &v315);
          uint64_t v190 = v196;
          uint64_t v189 = v276;
          uint64_t v2 = v307;
        }
LABEL_468:
        --v190;
        v189 += 8;
        if (!v189) {
          goto LABEL_626;
        }
      }
    case 0xD:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v60 = -8 * v2;
      BOOL v61 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v62 = *v61;
        if (*v61)
        {
          uint64_t v260 = v60;
          uint64_t v291 = v2;
          int v63 = *v62;
          if ((v63 - 4) > 0x1E)
          {
            if ((v63 - 3) >= 0xFFFFFFFE) {
              BOOL v66 = *v61;
            }
            else {
              BOOL v66 = 0;
            }
            if ((v63 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v63 == 3;
              uint64_t v60 = v260;
              uint64_t v2 = v291;
              if (v11) {
                *((void *)v62 + 1) = 0;
              }
              goto LABEL_145;
            }
            unint64_t v65 = (unint64_t)(v66 + 8);
          }
          else
          {
            uint64_t v2 = v291;
            if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
              goto LABEL_145;
            }
            uint64_t v64 = *((void *)v62 + 2);
            if ((v64 & 4) == 0) {
              goto LABEL_145;
            }
            unint64_t v65 = v64 & 0xFFFFFFFFFFFFFFF8;
            if (!v65) {
              goto LABEL_145;
            }
          }
          int v67 = v61;
          v315 = v61;
          sub_1CC5FA668(v65 + 16, &v315);
          BOOL v61 = v67;
          uint64_t v60 = v260;
          uint64_t v2 = v291;
        }
LABEL_145:
        --v61;
        v60 += 8;
        if (!v60) {
          goto LABEL_626;
        }
      }
    case 0xE:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v181 = -8 * v2;
      uint64_t v182 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        BOOL v183 = *v182;
        if (*v182)
        {
          uint64_t v275 = v181;
          uint64_t v306 = v2;
          int v184 = *v183;
          if ((v184 - 4) > 0x1E)
          {
            if ((v184 - 3) >= 0xFFFFFFFE) {
              v187 = *v182;
            }
            else {
              v187 = 0;
            }
            if ((v184 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v184 == 3;
              uint64_t v181 = v275;
              uint64_t v2 = v306;
              if (v11) {
                *((void *)v183 + 1) = 0;
              }
              goto LABEL_448;
            }
            unint64_t v186 = (unint64_t)(v187 + 8);
          }
          else
          {
            uint64_t v2 = v306;
            if ((v183[1] & 0x7F) != 2 && !*((_DWORD *)v183 + 3)) {
              goto LABEL_448;
            }
            uint64_t v185 = *((void *)v183 + 2);
            if ((v185 & 4) == 0) {
              goto LABEL_448;
            }
            unint64_t v186 = v185 & 0xFFFFFFFFFFFFFFF8;
            if (!v186) {
              goto LABEL_448;
            }
          }
          uint64_t v188 = v182;
          v315 = v182;
          sub_1CC5FA668(v186 + 16, &v315);
          uint64_t v182 = v188;
          uint64_t v181 = v275;
          uint64_t v2 = v306;
        }
LABEL_448:
        --v182;
        v181 += 8;
        if (!v181) {
          goto LABEL_626;
        }
      }
    case 0xF:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v36 = -8 * v2;
      uint64_t v37 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v38 = *v37;
        if (*v37)
        {
          uint64_t v257 = v36;
          uint64_t v288 = v2;
          int v39 = *v38;
          if ((v39 - 4) > 0x1E)
          {
            if ((v39 - 3) >= 0xFFFFFFFE) {
              BOOL v42 = *v37;
            }
            else {
              BOOL v42 = 0;
            }
            if ((v39 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v39 == 3;
              uint64_t v36 = v257;
              uint64_t v2 = v288;
              if (v11) {
                *((void *)v38 + 1) = 0;
              }
              goto LABEL_85;
            }
            unint64_t v41 = (unint64_t)(v42 + 8);
          }
          else
          {
            uint64_t v2 = v288;
            if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
              goto LABEL_85;
            }
            uint64_t v40 = *((void *)v38 + 2);
            if ((v40 & 4) == 0) {
              goto LABEL_85;
            }
            unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
            if (!v41) {
              goto LABEL_85;
            }
          }
          uint64_t v43 = v37;
          v315 = v37;
          sub_1CC5FA668(v41 + 16, &v315);
          uint64_t v37 = v43;
          uint64_t v36 = v257;
          uint64_t v2 = v288;
        }
LABEL_85:
        --v37;
        v36 += 8;
        if (!v36) {
          goto LABEL_626;
        }
      }
    case 0x10:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v52 = -8 * v2;
      int v53 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v54 = *v53;
        if (*v53)
        {
          uint64_t v259 = v52;
          uint64_t v290 = v2;
          int v55 = *v54;
          if ((v55 - 4) > 0x1E)
          {
            if ((v55 - 3) >= 0xFFFFFFFE) {
              size_t v58 = *v53;
            }
            else {
              size_t v58 = 0;
            }
            if ((v55 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v55 == 3;
              uint64_t v52 = v259;
              uint64_t v2 = v290;
              if (v11) {
                *((void *)v54 + 1) = 0;
              }
              goto LABEL_125;
            }
            unint64_t v57 = (unint64_t)(v58 + 8);
          }
          else
          {
            uint64_t v2 = v290;
            if ((v54[1] & 0x7F) != 2 && !*((_DWORD *)v54 + 3)) {
              goto LABEL_125;
            }
            uint64_t v56 = *((void *)v54 + 2);
            if ((v56 & 4) == 0) {
              goto LABEL_125;
            }
            unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
            if (!v57) {
              goto LABEL_125;
            }
          }
          uint64_t v59 = v53;
          v315 = v53;
          sub_1CC5FA668(v57 + 16, &v315);
          int v53 = v59;
          uint64_t v52 = v259;
          uint64_t v2 = v290;
        }
LABEL_125:
        --v53;
        v52 += 8;
        if (!v52) {
          goto LABEL_626;
        }
      }
    case 0x11:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v156 = -8 * v2;
      long long v157 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        BOOL v158 = *v157;
        if (*v157)
        {
          uint64_t v272 = v156;
          uint64_t v303 = v2;
          int v159 = *v158;
          if ((v159 - 4) > 0x1E)
          {
            if ((v159 - 3) >= 0xFFFFFFFE) {
              char v162 = *v157;
            }
            else {
              char v162 = 0;
            }
            if ((v159 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v159 == 3;
              uint64_t v156 = v272;
              uint64_t v2 = v303;
              if (v11) {
                *((void *)v158 + 1) = 0;
              }
              goto LABEL_385;
            }
            unint64_t v161 = (unint64_t)(v162 + 8);
          }
          else
          {
            uint64_t v2 = v303;
            if ((v158[1] & 0x7F) != 2 && !*((_DWORD *)v158 + 3)) {
              goto LABEL_385;
            }
            uint64_t v160 = *((void *)v158 + 2);
            if ((v160 & 4) == 0) {
              goto LABEL_385;
            }
            unint64_t v161 = v160 & 0xFFFFFFFFFFFFFFF8;
            if (!v161) {
              goto LABEL_385;
            }
          }
          BOOL v163 = v157;
          v315 = v157;
          sub_1CC5FA668(v161 + 16, &v315);
          long long v157 = v163;
          uint64_t v156 = v272;
          uint64_t v2 = v303;
        }
LABEL_385:
        --v157;
        v156 += 8;
        if (!v156) {
          goto LABEL_626;
        }
      }
    case 0x12:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v28 = -8 * v2;
      BOOL v29 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v30 = *v29;
        if (*v29)
        {
          uint64_t v256 = v28;
          uint64_t v287 = v2;
          int v31 = *v30;
          if ((v31 - 4) > 0x1E)
          {
            if ((v31 - 3) >= 0xFFFFFFFE) {
              uint64_t v34 = *v29;
            }
            else {
              uint64_t v34 = 0;
            }
            if ((v31 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v31 == 3;
              uint64_t v28 = v256;
              uint64_t v2 = v287;
              if (v11) {
                *((void *)v30 + 1) = 0;
              }
              goto LABEL_65;
            }
            unint64_t v33 = (unint64_t)(v34 + 8);
          }
          else
          {
            uint64_t v2 = v287;
            if ((v30[1] & 0x7F) != 2 && !*((_DWORD *)v30 + 3)) {
              goto LABEL_65;
            }
            uint64_t v32 = *((void *)v30 + 2);
            if ((v32 & 4) == 0) {
              goto LABEL_65;
            }
            unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
            if (!v33) {
              goto LABEL_65;
            }
          }
          int v35 = v29;
          v315 = v29;
          sub_1CC5FA668(v33 + 16, &v315);
          BOOL v29 = v35;
          uint64_t v28 = v256;
          uint64_t v2 = v287;
        }
LABEL_65:
        --v29;
        v28 += 8;
        if (!v28) {
          goto LABEL_626;
        }
      }
    case 0x13:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v92 = -8 * v2;
      uint64_t v93 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        BOOL v94 = *v93;
        if (*v93)
        {
          uint64_t v264 = v92;
          uint64_t v295 = v2;
          int v95 = *v94;
          if ((v95 - 4) > 0x1E)
          {
            if ((v95 - 3) >= 0xFFFFFFFE) {
              unsigned int v98 = *v93;
            }
            else {
              unsigned int v98 = 0;
            }
            if ((v95 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v95 == 3;
              uint64_t v92 = v264;
              uint64_t v2 = v295;
              if (v11) {
                *((void *)v94 + 1) = 0;
              }
              goto LABEL_225;
            }
            unint64_t v97 = (unint64_t)(v98 + 8);
          }
          else
          {
            uint64_t v2 = v295;
            if ((v94[1] & 0x7F) != 2 && !*((_DWORD *)v94 + 3)) {
              goto LABEL_225;
            }
            uint64_t v96 = *((void *)v94 + 2);
            if ((v96 & 4) == 0) {
              goto LABEL_225;
            }
            unint64_t v97 = v96 & 0xFFFFFFFFFFFFFFF8;
            if (!v97) {
              goto LABEL_225;
            }
          }
          uint64_t v99 = v93;
          v315 = v93;
          sub_1CC5FA668(v97 + 16, &v315);
          uint64_t v93 = v99;
          uint64_t v92 = v264;
          uint64_t v2 = v295;
        }
LABEL_225:
        --v93;
        v92 += 8;
        if (!v92) {
          goto LABEL_626;
        }
      }
    case 0x14:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v20 = -8 * v2;
      int v21 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        BOOL v22 = *v21;
        if (*v21)
        {
          uint64_t v255 = v20;
          uint64_t v286 = v2;
          int v23 = *v22;
          if ((v23 - 4) > 0x1E)
          {
            if ((v23 - 3) >= 0xFFFFFFFE) {
              unsigned int v26 = *v21;
            }
            else {
              unsigned int v26 = 0;
            }
            if ((v23 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v23 == 3;
              uint64_t v20 = v255;
              uint64_t v2 = v286;
              if (v11) {
                *((void *)v22 + 1) = 0;
              }
              goto LABEL_45;
            }
            unint64_t v25 = (unint64_t)(v26 + 8);
          }
          else
          {
            uint64_t v2 = v286;
            if ((v22[1] & 0x7F) != 2 && !*((_DWORD *)v22 + 3)) {
              goto LABEL_45;
            }
            uint64_t v24 = *((void *)v22 + 2);
            if ((v24 & 4) == 0) {
              goto LABEL_45;
            }
            unint64_t v25 = v24 & 0xFFFFFFFFFFFFFFF8;
            if (!v25) {
              goto LABEL_45;
            }
          }
          int v27 = v21;
          v315 = v21;
          sub_1CC5FA668(v25 + 16, &v315);
          int v21 = v27;
          uint64_t v20 = v255;
          uint64_t v2 = v286;
        }
LABEL_45:
        --v21;
        v20 += 8;
        if (!v20) {
          goto LABEL_626;
        }
      }
    case 0x15:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v124 = -8 * v2;
      uint64_t v125 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        char v126 = *v125;
        if (*v125)
        {
          uint64_t v268 = v124;
          uint64_t v299 = v2;
          int v127 = *v126;
          if ((v127 - 4) > 0x1E)
          {
            if ((v127 - 3) >= 0xFFFFFFFE) {
              uint64_t v130 = *v125;
            }
            else {
              uint64_t v130 = 0;
            }
            if ((v127 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v127 == 3;
              uint64_t v124 = v268;
              uint64_t v2 = v299;
              if (v11) {
                *((void *)v126 + 1) = 0;
              }
              goto LABEL_305;
            }
            unint64_t v129 = (unint64_t)(v130 + 8);
          }
          else
          {
            uint64_t v2 = v299;
            if ((v126[1] & 0x7F) != 2 && !*((_DWORD *)v126 + 3)) {
              goto LABEL_305;
            }
            uint64_t v128 = *((void *)v126 + 2);
            if ((v128 & 4) == 0) {
              goto LABEL_305;
            }
            unint64_t v129 = v128 & 0xFFFFFFFFFFFFFFF8;
            if (!v129) {
              goto LABEL_305;
            }
          }
          size_t v131 = v125;
          v315 = v125;
          sub_1CC5FA668(v129 + 16, &v315);
          uint64_t v125 = v131;
          uint64_t v124 = v268;
          uint64_t v2 = v299;
        }
LABEL_305:
        --v125;
        v124 += 8;
        if (!v124) {
          goto LABEL_626;
        }
      }
    case 0x16:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v173 = -8 * v2;
      v174 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        int v175 = *v174;
        if (*v174)
        {
          uint64_t v274 = v173;
          uint64_t v305 = v2;
          int v176 = *v175;
          if ((v176 - 4) > 0x1E)
          {
            if ((v176 - 3) >= 0xFFFFFFFE) {
              uint64_t v179 = *v174;
            }
            else {
              uint64_t v179 = 0;
            }
            if ((v176 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v176 == 3;
              uint64_t v173 = v274;
              uint64_t v2 = v305;
              if (v11) {
                *((void *)v175 + 1) = 0;
              }
              goto LABEL_428;
            }
            unint64_t v178 = (unint64_t)(v179 + 8);
          }
          else
          {
            uint64_t v2 = v305;
            if ((v175[1] & 0x7F) != 2 && !*((_DWORD *)v175 + 3)) {
              goto LABEL_428;
            }
            uint64_t v177 = *((void *)v175 + 2);
            if ((v177 & 4) == 0) {
              goto LABEL_428;
            }
            unint64_t v178 = v177 & 0xFFFFFFFFFFFFFFF8;
            if (!v178) {
              goto LABEL_428;
            }
          }
          v180 = v174;
          v315 = v174;
          sub_1CC5FA668(v178 + 16, &v315);
          v174 = v180;
          uint64_t v173 = v274;
          uint64_t v2 = v305;
        }
LABEL_428:
        --v174;
        v173 += 8;
        if (!v173) {
          goto LABEL_626;
        }
      }
    case 0x17:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v213 = -8 * v2;
      int v214 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v215 = *v214;
        if (*v214)
        {
          uint64_t v279 = v213;
          uint64_t v310 = v2;
          int v216 = *v215;
          if ((v216 - 4) > 0x1E)
          {
            if ((v216 - 3) >= 0xFFFFFFFE) {
              v219 = *v214;
            }
            else {
              v219 = 0;
            }
            if ((v216 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v216 == 3;
              uint64_t v213 = v279;
              uint64_t v2 = v310;
              if (v11) {
                *((void *)v215 + 1) = 0;
              }
              goto LABEL_528;
            }
            unint64_t v218 = (unint64_t)(v219 + 8);
          }
          else
          {
            uint64_t v2 = v310;
            if ((v215[1] & 0x7F) != 2 && !*((_DWORD *)v215 + 3)) {
              goto LABEL_528;
            }
            uint64_t v217 = *((void *)v215 + 2);
            if ((v217 & 4) == 0) {
              goto LABEL_528;
            }
            unint64_t v218 = v217 & 0xFFFFFFFFFFFFFFF8;
            if (!v218) {
              goto LABEL_528;
            }
          }
          uint64_t v220 = v214;
          v315 = v214;
          sub_1CC5FA668(v218 + 16, &v315);
          int v214 = v220;
          uint64_t v213 = v279;
          uint64_t v2 = v310;
        }
LABEL_528:
        --v214;
        v213 += 8;
        if (!v213) {
          goto LABEL_626;
        }
      }
    case 0x18:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v132 = -8 * v2;
      unint64_t v133 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        long long v134 = *v133;
        if (*v133)
        {
          uint64_t v269 = v132;
          uint64_t v300 = v2;
          int v135 = *v134;
          if ((v135 - 4) > 0x1E)
          {
            if ((v135 - 3) >= 0xFFFFFFFE) {
              uint64_t v138 = *v133;
            }
            else {
              uint64_t v138 = 0;
            }
            if ((v135 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v135 == 3;
              uint64_t v132 = v269;
              uint64_t v2 = v300;
              if (v11) {
                *((void *)v134 + 1) = 0;
              }
              goto LABEL_325;
            }
            unint64_t v137 = (unint64_t)(v138 + 8);
          }
          else
          {
            uint64_t v2 = v300;
            if ((v134[1] & 0x7F) != 2 && !*((_DWORD *)v134 + 3)) {
              goto LABEL_325;
            }
            uint64_t v136 = *((void *)v134 + 2);
            if ((v136 & 4) == 0) {
              goto LABEL_325;
            }
            unint64_t v137 = v136 & 0xFFFFFFFFFFFFFFF8;
            if (!v137) {
              goto LABEL_325;
            }
          }
          uint64_t v139 = v133;
          v315 = v133;
          sub_1CC5FA668(v137 + 16, &v315);
          unint64_t v133 = v139;
          uint64_t v132 = v269;
          uint64_t v2 = v300;
        }
LABEL_325:
        --v133;
        v132 += 8;
        if (!v132) {
          goto LABEL_626;
        }
      }
    case 0x19:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v148 = -8 * v2;
      uint64_t v149 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        int v150 = *v149;
        if (*v149)
        {
          uint64_t v271 = v148;
          uint64_t v302 = v2;
          int v151 = *v150;
          if ((v151 - 4) > 0x1E)
          {
            if ((v151 - 3) >= 0xFFFFFFFE) {
              uint64_t v154 = *v149;
            }
            else {
              uint64_t v154 = 0;
            }
            if ((v151 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v151 == 3;
              uint64_t v148 = v271;
              uint64_t v2 = v302;
              if (v11) {
                *((void *)v150 + 1) = 0;
              }
              goto LABEL_365;
            }
            unint64_t v153 = (unint64_t)(v154 + 8);
          }
          else
          {
            uint64_t v2 = v302;
            if ((v150[1] & 0x7F) != 2 && !*((_DWORD *)v150 + 3)) {
              goto LABEL_365;
            }
            uint64_t v152 = *((void *)v150 + 2);
            if ((v152 & 4) == 0) {
              goto LABEL_365;
            }
            unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFF8;
            if (!v153) {
              goto LABEL_365;
            }
          }
          long long v155 = v149;
          v315 = v149;
          sub_1CC5FA668(v153 + 16, &v315);
          uint64_t v149 = v155;
          uint64_t v148 = v271;
          uint64_t v2 = v302;
        }
LABEL_365:
        --v149;
        v148 += 8;
        if (!v148) {
          goto LABEL_626;
        }
      }
    case 0x1A:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v205 = -8 * v2;
      int v206 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        BOOL v207 = *v206;
        if (*v206)
        {
          uint64_t v278 = v205;
          uint64_t v309 = v2;
          int v208 = *v207;
          if ((v208 - 4) > 0x1E)
          {
            if ((v208 - 3) >= 0xFFFFFFFE) {
              BOOL v211 = *v206;
            }
            else {
              BOOL v211 = 0;
            }
            if ((v208 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v208 == 3;
              uint64_t v205 = v278;
              uint64_t v2 = v309;
              if (v11) {
                *((void *)v207 + 1) = 0;
              }
              goto LABEL_508;
            }
            unint64_t v210 = (unint64_t)(v211 + 8);
          }
          else
          {
            uint64_t v2 = v309;
            if ((v207[1] & 0x7F) != 2 && !*((_DWORD *)v207 + 3)) {
              goto LABEL_508;
            }
            uint64_t v209 = *((void *)v207 + 2);
            if ((v209 & 4) == 0) {
              goto LABEL_508;
            }
            unint64_t v210 = v209 & 0xFFFFFFFFFFFFFFF8;
            if (!v210) {
              goto LABEL_508;
            }
          }
          v212 = v206;
          v315 = v206;
          sub_1CC5FA668(v210 + 16, &v315);
          int v206 = v212;
          uint64_t v205 = v278;
          uint64_t v2 = v309;
        }
LABEL_508:
        --v206;
        v205 += 8;
        if (!v205) {
          goto LABEL_626;
        }
      }
    case 0x1B:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v221 = -8 * v2;
      v222 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        v223 = *v222;
        if (*v222)
        {
          uint64_t v280 = v221;
          uint64_t v311 = v2;
          int v224 = *v223;
          if ((v224 - 4) > 0x1E)
          {
            if ((v224 - 3) >= 0xFFFFFFFE) {
              uint64_t v227 = *v222;
            }
            else {
              uint64_t v227 = 0;
            }
            if ((v224 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v224 == 3;
              uint64_t v221 = v280;
              uint64_t v2 = v311;
              if (v11) {
                *((void *)v223 + 1) = 0;
              }
              goto LABEL_548;
            }
            unint64_t v226 = (unint64_t)(v227 + 8);
          }
          else
          {
            uint64_t v2 = v311;
            if ((v223[1] & 0x7F) != 2 && !*((_DWORD *)v223 + 3)) {
              goto LABEL_548;
            }
            uint64_t v225 = *((void *)v223 + 2);
            if ((v225 & 4) == 0) {
              goto LABEL_548;
            }
            unint64_t v226 = v225 & 0xFFFFFFFFFFFFFFF8;
            if (!v226) {
              goto LABEL_548;
            }
          }
          v228 = v222;
          v315 = v222;
          sub_1CC5FA668(v226 + 16, &v315);
          v222 = v228;
          uint64_t v221 = v280;
          uint64_t v2 = v311;
        }
LABEL_548:
        --v222;
        v221 += 8;
        if (!v221) {
          goto LABEL_626;
        }
      }
    case 0x1C:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v76 = -8 * v2;
      uint64_t v77 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v78 = *v77;
        if (*v77)
        {
          uint64_t v262 = v76;
          uint64_t v293 = v2;
          int v79 = *v78;
          if ((v79 - 4) > 0x1E)
          {
            if ((v79 - 3) >= 0xFFFFFFFE) {
              BOOL v82 = *v77;
            }
            else {
              BOOL v82 = 0;
            }
            if ((v79 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v79 == 3;
              uint64_t v76 = v262;
              uint64_t v2 = v293;
              if (v11) {
                *((void *)v78 + 1) = 0;
              }
              goto LABEL_185;
            }
            unint64_t v81 = (unint64_t)(v82 + 8);
          }
          else
          {
            uint64_t v2 = v293;
            if ((v78[1] & 0x7F) != 2 && !*((_DWORD *)v78 + 3)) {
              goto LABEL_185;
            }
            uint64_t v80 = *((void *)v78 + 2);
            if ((v80 & 4) == 0) {
              goto LABEL_185;
            }
            unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
            if (!v81) {
              goto LABEL_185;
            }
          }
          uint64_t v83 = v77;
          v315 = v77;
          sub_1CC5FA668(v81 + 16, &v315);
          uint64_t v77 = v83;
          uint64_t v76 = v262;
          uint64_t v2 = v293;
        }
LABEL_185:
        --v77;
        v76 += 8;
        if (!v76) {
          goto LABEL_626;
        }
      }
    case 0x1D:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v68 = -8 * v2;
      uint64_t v69 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        unsigned int v70 = *v69;
        if (*v69)
        {
          uint64_t v261 = v68;
          uint64_t v292 = v2;
          int v71 = *v70;
          if ((v71 - 4) > 0x1E)
          {
            if ((v71 - 3) >= 0xFFFFFFFE) {
              BOOL v74 = *v69;
            }
            else {
              BOOL v74 = 0;
            }
            if ((v71 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v71 == 3;
              uint64_t v68 = v261;
              uint64_t v2 = v292;
              if (v11) {
                *((void *)v70 + 1) = 0;
              }
              goto LABEL_165;
            }
            unint64_t v73 = (unint64_t)(v74 + 8);
          }
          else
          {
            uint64_t v2 = v292;
            if ((v70[1] & 0x7F) != 2 && !*((_DWORD *)v70 + 3)) {
              goto LABEL_165;
            }
            uint64_t v72 = *((void *)v70 + 2);
            if ((v72 & 4) == 0) {
              goto LABEL_165;
            }
            unint64_t v73 = v72 & 0xFFFFFFFFFFFFFFF8;
            if (!v73) {
              goto LABEL_165;
            }
          }
          uint64_t v75 = v69;
          v315 = v69;
          sub_1CC5FA668(v73 + 16, &v315);
          uint64_t v69 = v75;
          uint64_t v68 = v261;
          uint64_t v2 = v292;
        }
LABEL_165:
        --v69;
        v68 += 8;
        if (!v68) {
          goto LABEL_626;
        }
      }
    case 0x1E:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v245 = -8 * v2;
      v246 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v247 = *v246;
        if (*v246)
        {
          uint64_t v283 = v245;
          uint64_t v314 = v2;
          int v248 = *v247;
          if ((v248 - 4) > 0x1E)
          {
            if ((v248 - 3) >= 0xFFFFFFFE) {
              v251 = *v246;
            }
            else {
              v251 = 0;
            }
            if ((v248 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v248 == 3;
              uint64_t v245 = v283;
              uint64_t v2 = v314;
              if (v11) {
                *((void *)v247 + 1) = 0;
              }
              goto LABEL_608;
            }
            unint64_t v250 = (unint64_t)(v251 + 8);
          }
          else
          {
            uint64_t v2 = v314;
            if ((v247[1] & 0x7F) != 2 && !*((_DWORD *)v247 + 3)) {
              goto LABEL_608;
            }
            uint64_t v249 = *((void *)v247 + 2);
            if ((v249 & 4) == 0) {
              goto LABEL_608;
            }
            unint64_t v250 = v249 & 0xFFFFFFFFFFFFFFF8;
            if (!v250) {
              goto LABEL_608;
            }
          }
          int v252 = v246;
          v315 = v246;
          sub_1CC5FA668(v250 + 16, &v315);
          v246 = v252;
          uint64_t v245 = v283;
          uint64_t v2 = v314;
        }
LABEL_608:
        --v246;
        v245 += 8;
        if (!v245) {
          goto LABEL_626;
        }
      }
    case 0x1F:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v12 = -8 * v2;
      unsigned int v13 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        unsigned int v14 = *v13;
        if (*v13)
        {
          uint64_t v254 = v12;
          uint64_t v285 = v2;
          int v15 = *v14;
          if ((v15 - 4) > 0x1E)
          {
            if ((v15 - 3) >= 0xFFFFFFFE) {
              uint64_t v18 = *v13;
            }
            else {
              uint64_t v18 = 0;
            }
            if ((v15 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v15 == 3;
              uint64_t v12 = v254;
              uint64_t v2 = v285;
              if (v11) {
                *((void *)v14 + 1) = 0;
              }
              goto LABEL_25;
            }
            unint64_t v17 = (unint64_t)(v18 + 8);
          }
          else
          {
            uint64_t v2 = v285;
            if ((v14[1] & 0x7F) != 2 && !*((_DWORD *)v14 + 3)) {
              goto LABEL_25;
            }
            uint64_t v16 = *((void *)v14 + 2);
            if ((v16 & 4) == 0) {
              goto LABEL_25;
            }
            unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
            if (!v17) {
              goto LABEL_25;
            }
          }
          uint64_t v19 = v13;
          v315 = v13;
          sub_1CC5FA668(v17 + 16, &v315);
          unsigned int v13 = v19;
          uint64_t v12 = v254;
          uint64_t v2 = v285;
        }
LABEL_25:
        --v13;
        v12 += 8;
        if (!v12) {
          goto LABEL_626;
        }
      }
    case 0x20:
      sub_1CC5ECCF0((uint64_t)this);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v229 = -8 * v2;
      v230 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v231 = *v230;
        if (*v230)
        {
          uint64_t v281 = v229;
          uint64_t v312 = v2;
          int v232 = *v231;
          if ((v232 - 4) > 0x1E)
          {
            if ((v232 - 3) >= 0xFFFFFFFE) {
              v235 = *v230;
            }
            else {
              v235 = 0;
            }
            if ((v232 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v232 == 3;
              uint64_t v229 = v281;
              uint64_t v2 = v312;
              if (v11) {
                *((void *)v231 + 1) = 0;
              }
              goto LABEL_568;
            }
            unint64_t v234 = (unint64_t)(v235 + 8);
          }
          else
          {
            uint64_t v2 = v312;
            if ((v231[1] & 0x7F) != 2 && !*((_DWORD *)v231 + 3)) {
              goto LABEL_568;
            }
            uint64_t v233 = *((void *)v231 + 2);
            if ((v233 & 4) == 0) {
              goto LABEL_568;
            }
            unint64_t v234 = v233 & 0xFFFFFFFFFFFFFFF8;
            if (!v234) {
              goto LABEL_568;
            }
          }
          v236 = v230;
          v315 = v230;
          sub_1CC5FA668(v234 + 16, &v315);
          v230 = v236;
          uint64_t v229 = v281;
          uint64_t v2 = v312;
        }
LABEL_568:
        --v230;
        v229 += 8;
        if (!v229) {
          goto LABEL_626;
        }
      }
    case 0x21:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v237 = -8 * v2;
      v238 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        v239 = *v238;
        if (*v238)
        {
          uint64_t v282 = v237;
          uint64_t v313 = v2;
          int v240 = *v239;
          if ((v240 - 4) > 0x1E)
          {
            if ((v240 - 3) >= 0xFFFFFFFE) {
              v243 = *v238;
            }
            else {
              v243 = 0;
            }
            if ((v240 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v240 == 3;
              uint64_t v237 = v282;
              uint64_t v2 = v313;
              if (v11) {
                *((void *)v239 + 1) = 0;
              }
              goto LABEL_588;
            }
            unint64_t v242 = (unint64_t)(v243 + 8);
          }
          else
          {
            uint64_t v2 = v313;
            if ((v239[1] & 0x7F) != 2 && !*((_DWORD *)v239 + 3)) {
              goto LABEL_588;
            }
            uint64_t v241 = *((void *)v239 + 2);
            if ((v241 & 4) == 0) {
              goto LABEL_588;
            }
            unint64_t v242 = v241 & 0xFFFFFFFFFFFFFFF8;
            if (!v242) {
              goto LABEL_588;
            }
          }
          uint64_t v244 = v238;
          v315 = v238;
          sub_1CC5FA668(v242 + 16, &v315);
          v238 = v244;
          uint64_t v237 = v282;
          uint64_t v2 = v313;
        }
LABEL_588:
        --v238;
        v237 += 8;
        if (!v237) {
          goto LABEL_626;
        }
      }
    case 0x22:
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (!v2) {
        goto LABEL_625;
      }
      uint64_t v197 = -8 * v2;
      v198 = (unsigned __int8 **)((char *)this - 8);
      while (1)
      {
        uint64_t v199 = *v198;
        if (*v198)
        {
          uint64_t v277 = v197;
          uint64_t v308 = v2;
          int v200 = *v199;
          if ((v200 - 4) > 0x1E)
          {
            if ((v200 - 3) >= 0xFFFFFFFE) {
              uint64_t v203 = *v198;
            }
            else {
              uint64_t v203 = 0;
            }
            if ((v200 - 3) < 0xFFFFFFFE)
            {
              BOOL v11 = v200 == 3;
              uint64_t v197 = v277;
              uint64_t v2 = v308;
              if (v11) {
                *((void *)v199 + 1) = 0;
              }
              goto LABEL_488;
            }
            unint64_t v202 = (unint64_t)(v203 + 8);
          }
          else
          {
            uint64_t v2 = v308;
            if ((v199[1] & 0x7F) != 2 && !*((_DWORD *)v199 + 3)) {
              goto LABEL_488;
            }
            uint64_t v201 = *((void *)v199 + 2);
            if ((v201 & 4) == 0) {
              goto LABEL_488;
            }
            unint64_t v202 = v201 & 0xFFFFFFFFFFFFFFF8;
            if (!v202) {
              goto LABEL_488;
            }
          }
          uint64_t v204 = v198;
          v315 = v198;
          sub_1CC5FA668(v202 + 16, &v315);
          v198 = v204;
          uint64_t v197 = v277;
          uint64_t v2 = v308;
        }
LABEL_488:
        --v198;
        v197 += 8;
        if (!v197) {
          goto LABEL_626;
        }
      }
    default:
      llvm::MDNode::dropAllReferences((uint64_t)this);
      sub_1CC5ECC54((uint64_t *)this + 2);
      uint64_t v2 = *((unsigned int *)this + 2);
      if (v2)
      {
        uint64_t v3 = -8 * v2;
        unsigned int v4 = (unsigned __int8 **)((char *)this - 8);
        while (1)
        {
          uint64_t v5 = *v4;
          if (*v4)
          {
            uint64_t v253 = v3;
            uint64_t v284 = v2;
            int v6 = *v5;
            if ((v6 - 4) > 0x1E)
            {
              if ((v6 - 3) >= 0xFFFFFFFE) {
                uint64_t v9 = *v4;
              }
              else {
                uint64_t v9 = 0;
              }
              if ((v6 - 3) < 0xFFFFFFFE)
              {
                BOOL v11 = v6 == 3;
                uint64_t v3 = v253;
                uint64_t v2 = v284;
                if (v11) {
                  *((void *)v5 + 1) = 0;
                }
                goto LABEL_5;
              }
              unint64_t v8 = (unint64_t)(v9 + 8);
            }
            else
            {
              uint64_t v2 = v284;
              if ((v5[1] & 0x7F) != 2 && !*((_DWORD *)v5 + 3)) {
                goto LABEL_5;
              }
              uint64_t v7 = *((void *)v5 + 2);
              if ((v7 & 4) == 0) {
                goto LABEL_5;
              }
              unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
              if (!v8) {
                goto LABEL_5;
              }
            }
            uint64_t v10 = v4;
            v315 = v4;
            sub_1CC5FA668(v8 + 16, &v315);
            unsigned int v4 = v10;
            uint64_t v3 = v253;
            uint64_t v2 = v284;
          }
LABEL_5:
          --v4;
          v3 += 8;
          if (!v3) {
            goto LABEL_626;
          }
        }
      }
LABEL_625:
      uint64_t v2 = 0;
LABEL_626:
      operator delete((char *)this - 8 * v2);
      return;
  }
}

unint64_t llvm::MDTuple::recalculateHash(llvm::MDTuple *this)
{
  unint64_t result = sub_1CC5ED5A4((uint64_t)this - 8 * *((unsigned int *)this + 2), (uint64_t)this);
  *((_DWORD *)this + 1) = result;
  return result;
}

uint64_t llvm::MDNode::dropAllReferences(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(unsigned int *)(this + 8);
  if (v2)
  {
    uint64_t v3 = this;
    do
    {
      unsigned int v4 = (unsigned __int8 **)(v3 - 8 * *(unsigned int *)(v1 + 8));
      uint64_t v5 = *v4;
      if (*v4)
      {
        int v6 = *v5;
        if ((v6 - 4) > 0x1E)
        {
          if ((v6 - 3) >= 0xFFFFFFFE) {
            uint64_t v7 = *v4;
          }
          else {
            uint64_t v7 = 0;
          }
          if ((v6 - 3) < 0xFFFFFFFE)
          {
            if (v6 == 3) {
              *((void *)v5 + 1) = 0;
            }
            goto LABEL_4;
          }
          unint64_t v8 = (unint64_t)(v7 + 8);
        }
        else
        {
          if ((v5[1] & 0x7F) != 2 && !*((_DWORD *)v5 + 3)) {
            goto LABEL_4;
          }
          uint64_t v14 = *((void *)v5 + 2);
          if ((v14 & 4) == 0) {
            goto LABEL_4;
          }
          unint64_t v8 = v14 & 0xFFFFFFFFFFFFFFF8;
          if (!v8) {
            goto LABEL_4;
          }
        }
        uint64_t v15 = v3 - 8 * *(unsigned int *)(v1 + 8);
        this = sub_1CC5FA668(v8 + 16, &v15);
      }
LABEL_4:
      *unsigned int v4 = 0;
      v3 += 8;
      --v2;
    }
    while (v2);
  }
  uint64_t v9 = *(void *)(v1 + 16);
  if ((v9 & 4) != 0)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v13 = *(_DWORD *)(v11 + 16);
    uint64_t v12 = (void *)(v11 + 16);
    if (v13 >= 2)
    {
      sub_1CC5FB0C0(v12);
      unint64_t v10 = *(void *)(v1 + 16) & ((uint64_t)(*(void *)(v1 + 16) << 61) >> 63) & 0xFFFFFFFFFFFFFFF8;
    }
    *(void *)(v1 + 16) = *(void *)v10 & 0xFFFFFFFFFFFFFFFBLL;
    if ((*(unsigned char *)(v10 + 16) & 1) == 0) {
      MEMORY[0x1D25D9CD0](*(void *)(v10 + 24), 8);
    }
    return MEMORY[0x1D25D9CE0]();
  }
  return this;
}

int32x2_t llvm::MDNode::eraseFromStore(llvm::MDNode *this)
{
  if (*(unsigned char *)this == 4)
  {
    uint64_t v1 = *((void *)this + 2);
    uint64_t v2 = (int32x2_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    if ((v1 & 4) != 0) {
      uint64_t v2 = (int32x2_t **)*v2;
    }
    uint64_t v3 = *v2;
    __int32 v4 = v3[57].i32[0];
    if (v4)
    {
      int32x2_t v5 = v3[55];
      __int32 v6 = v4 - 1;
      LODWORD(v7) = *((_DWORD *)this + 1) & (v4 - 1);
      unint64_t v8 = (llvm::MDNode **)(*(void *)&v5 + 8 * v7);
      uint64_t v9 = *v8;
      if (*v8 == this)
      {
LABEL_6:
        void *v8 = (llvm::MDNode *)-8192;
        int32x2_t result = vadd_s32(v3[56], (int32x2_t)0x1FFFFFFFFLL);
        v3[56] = result;
      }
      else
      {
        int v11 = 1;
        while (v9 != (llvm::MDNode *)-4096)
        {
          int v12 = v7 + v11++;
          uint64_t v7 = v12 & v6;
          uint64_t v9 = *(llvm::MDNode **)(*(void *)&v5 + 8 * v7);
          if (v9 == this)
          {
            unint64_t v8 = (llvm::MDNode **)(*(void *)&v5 + 8 * v7);
            goto LABEL_6;
          }
        }
      }
    }
  }
  else
  {
    switch(*(unsigned char *)this)
    {
      case 6:
        uint64_t v17 = *((void *)this + 2);
        uint64_t v18 = (int32x2_t **)(v17 & 0xFFFFFFFFFFFFFFF8);
        if ((v17 & 4) != 0) {
          uint64_t v18 = (int32x2_t **)*v18;
        }
        uint64_t v19 = *v18;
        uint64_t v20 = (uint64_t *)&(*v18)[61];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B8028(v20, (uint64_t)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v19[62], (int32x2_t)0x1FFFFFFFFLL);
          v19[62] = result;
        }
        break;
      case 7:
        uint64_t v21 = *((void *)this + 2);
        BOOL v22 = (int32x2_t **)(v21 & 0xFFFFFFFFFFFFFFF8);
        if ((v21 & 4) != 0) {
          BOOL v22 = (int32x2_t **)*v22;
        }
        int v23 = *v22;
        uint64_t v24 = (uint64_t *)&(*v22)[64];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B83C8(v24, (uint64_t)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v23[65], (int32x2_t)0x1FFFFFFFFLL);
          v23[65] = result;
        }
        break;
      case 8:
        uint64_t v25 = *((void *)this + 2);
        unsigned int v26 = (int32x2_t **)(v25 & 0xFFFFFFFFFFFFFFF8);
        if ((v25 & 4) != 0) {
          unsigned int v26 = (int32x2_t **)*v26;
        }
        int v27 = *v26;
        uint64_t v28 = (uint64_t *)&(*v26)[67];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B3034(v28, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v27[68], (int32x2_t)0x1FFFFFFFFLL);
          v27[68] = result;
        }
        break;
      case 9:
        uint64_t v29 = *((void *)this + 2);
        uint64_t v30 = (int32x2_t **)(v29 & 0xFFFFFFFFFFFFFFF8);
        if ((v29 & 4) != 0) {
          uint64_t v30 = (int32x2_t **)*v30;
        }
        int v31 = *v30;
        uint64_t v32 = (uint64_t *)&(*v30)[70];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B3740(v32, (uint64_t)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v31[71], (int32x2_t)0x1FFFFFFFFLL);
          v31[71] = result;
        }
        break;
      case 0xA:
        uint64_t v41 = *((void *)this + 2);
        BOOL v42 = (int32x2_t **)(v41 & 0xFFFFFFFFFFFFFFF8);
        if ((v41 & 4) != 0) {
          BOOL v42 = (int32x2_t **)*v42;
        }
        uint64_t v43 = *v42;
        uint64_t v44 = (uint64_t *)&(*v42)[73];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC5937E0(v44, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v43[74], (int32x2_t)0x1FFFFFFFFLL);
          v43[74] = result;
        }
        break;
      case 0xB:
        uint64_t v45 = *((void *)this + 2);
        unsigned int v46 = (int32x2_t **)(v45 & 0xFFFFFFFFFFFFFFF8);
        if ((v45 & 4) != 0) {
          unsigned int v46 = (int32x2_t **)*v46;
        }
        int v47 = *v46;
        uint64_t v48 = (uint64_t *)&(*v46)[76];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B4570(v48, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v47[77], (int32x2_t)0x1FFFFFFFFLL);
          v47[77] = result;
        }
        break;
      case 0xC:
        uint64_t v49 = *((void *)this + 2);
        uint64_t v50 = (int32x2_t **)(v49 & 0xFFFFFFFFFFFFFFF8);
        if ((v49 & 4) != 0) {
          uint64_t v50 = (int32x2_t **)*v50;
        }
        int v51 = *v50;
        uint64_t v52 = (uint64_t *)&(*v50)[79];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC594358(v52, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v51[80], (int32x2_t)0x1FFFFFFFFLL);
          v51[80] = result;
        }
        break;
      case 0xD:
        uint64_t v53 = *((void *)this + 2);
        uint64_t v54 = (int32x2_t **)(v53 & 0xFFFFFFFFFFFFFFF8);
        if ((v53 & 4) != 0) {
          uint64_t v54 = (int32x2_t **)*v54;
        }
        int v55 = *v54;
        uint64_t v56 = (uint64_t *)&(*v54)[82];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B513C(v56, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v55[83], (int32x2_t)0x1FFFFFFFFLL);
          v55[83] = result;
        }
        break;
      case 0xE:
        uint64_t v57 = *((void *)this + 2);
        size_t v58 = (int32x2_t **)(v57 & 0xFFFFFFFFFFFFFFF8);
        if ((v57 & 4) != 0) {
          size_t v58 = (int32x2_t **)*v58;
        }
        uint64_t v59 = *v58;
        uint64_t v60 = (uint64_t *)&(*v58)[85];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC594E1C(v60, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v59[86], (int32x2_t)0x1FFFFFFFFLL);
          v59[86] = result;
        }
        break;
      case 0xF:
        uint64_t v61 = *((void *)this + 2);
        uint64_t v62 = (int32x2_t **)(v61 & 0xFFFFFFFFFFFFFFF8);
        if ((v61 & 4) != 0) {
          uint64_t v62 = (int32x2_t **)*v62;
        }
        int v63 = *v62;
        uint64_t v64 = (uint64_t *)&(*v62)[88];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC59558C(v64, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v63[89], (int32x2_t)0x1FFFFFFFFLL);
          v63[89] = result;
        }
        break;
      case 0x10:
        __break(1u);
        JUMPOUT(0x1CC6008A8);
      case 0x11:
        uint64_t v97 = *((void *)this + 2);
        unsigned int v98 = (int32x2_t **)(v97 & 0xFFFFFFFFFFFFFFF8);
        if ((v97 & 4) != 0) {
          unsigned int v98 = (int32x2_t **)*v98;
        }
        uint64_t v99 = *v98;
        uint64_t v100 = (uint64_t *)&(*v98)[91];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC5961F8(v100, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v99[92], (int32x2_t)0x1FFFFFFFFLL);
          v99[92] = result;
        }
        break;
      case 0x12:
        uint64_t v33 = *((void *)this + 2);
        uint64_t v34 = (int32x2_t **)(v33 & 0xFFFFFFFFFFFFFFF8);
        if ((v33 & 4) != 0) {
          uint64_t v34 = (int32x2_t **)*v34;
        }
        int v35 = *v34;
        uint64_t v36 = (uint64_t *)&(*v34)[94];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B56C4(v36, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v35[95], (int32x2_t)0x1FFFFFFFFLL);
          v35[95] = result;
        }
        break;
      case 0x13:
        uint64_t v65 = *((void *)this + 2);
        BOOL v66 = (int32x2_t **)(v65 & 0xFFFFFFFFFFFFFFF8);
        if ((v65 & 4) != 0) {
          BOOL v66 = (int32x2_t **)*v66;
        }
        int v67 = *v66;
        uint64_t v68 = (uint64_t *)&(*v66)[97];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC5968A8(v68, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v67[98], (int32x2_t)0x1FFFFFFFFLL);
          v67[98] = result;
        }
        break;
      case 0x14:
        uint64_t v101 = *((void *)this + 2);
        BOOL v102 = (int32x2_t **)(v101 & 0xFFFFFFFFFFFFFFF8);
        if ((v101 & 4) != 0) {
          BOOL v102 = (int32x2_t **)*v102;
        }
        int v103 = *v102;
        uint64_t v104 = (uint64_t *)&(*v102)[100];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B5C24(v104, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v103[101], (int32x2_t)0x1FFFFFFFFLL);
          v103[101] = result;
        }
        break;
      case 0x15:
        uint64_t v69 = *((void *)this + 2);
        unsigned int v70 = (int32x2_t **)(v69 & 0xFFFFFFFFFFFFFFF8);
        if ((v69 & 4) != 0) {
          unsigned int v70 = (int32x2_t **)*v70;
        }
        int v71 = *v70;
        uint64_t v72 = (uint64_t *)&(*v70)[103];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC596FDC(v72, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v71[104], (int32x2_t)0x1FFFFFFFFLL);
          v71[104] = result;
        }
        break;
      case 0x16:
        uint64_t v105 = *((void *)this + 2);
        uint64_t v106 = (int32x2_t **)(v105 & 0xFFFFFFFFFFFFFFF8);
        if ((v105 & 4) != 0) {
          uint64_t v106 = (int32x2_t **)*v106;
        }
        uint64_t v107 = *v106;
        uint64_t v108 = (uint64_t *)&(*v106)[106];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B6754(v108, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v107[107], (int32x2_t)0x1FFFFFFFFLL);
          v107[107] = result;
        }
        break;
      case 0x17:
        uint64_t v73 = *((void *)this + 2);
        BOOL v74 = (int32x2_t **)(v73 & 0xFFFFFFFFFFFFFFF8);
        if ((v73 & 4) != 0) {
          BOOL v74 = (int32x2_t **)*v74;
        }
        uint64_t v75 = *v74;
        uint64_t v76 = (uint64_t *)&(*v74)[109];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B6CD4(v76, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v75[110], (int32x2_t)0x1FFFFFFFFLL);
          v75[110] = result;
        }
        break;
      case 0x18:
        uint64_t v77 = *((void *)this + 2);
        uint64_t v78 = (int32x2_t **)(v77 & 0xFFFFFFFFFFFFFFF8);
        if ((v77 & 4) != 0) {
          uint64_t v78 = (int32x2_t **)*v78;
        }
        int v79 = *v78;
        uint64_t v80 = (uint64_t *)&(*v78)[112];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B754C(v80, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v79[113], (int32x2_t)0x1FFFFFFFFLL);
          v79[113] = result;
        }
        break;
      case 0x19:
        uint64_t v109 = *((void *)this + 2);
        BOOL v110 = (int32x2_t **)(v109 & 0xFFFFFFFFFFFFFFF8);
        if ((v109 & 4) != 0) {
          BOOL v110 = (int32x2_t **)*v110;
        }
        int v111 = *v110;
        uint64_t v112 = (uint64_t *)&(*v110)[115];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC597B24(v112, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v111[116], (int32x2_t)0x1FFFFFFFFLL);
          v111[116] = result;
        }
        break;
      case 0x1A:
        uint64_t v81 = *((void *)this + 2);
        BOOL v82 = (int32x2_t **)(v81 & 0xFFFFFFFFFFFFFFF8);
        if ((v81 & 4) != 0) {
          BOOL v82 = (int32x2_t **)*v82;
        }
        uint64_t v83 = *v82;
        uint64_t v84 = (uint64_t *)&(*v82)[118];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B7B24(v84, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v83[119], (int32x2_t)0x1FFFFFFFFLL);
          v83[119] = result;
        }
        break;
      case 0x1B:
        uint64_t v85 = *((void *)this + 2);
        v86 = (int32x2_t **)(v85 & 0xFFFFFFFFFFFFFFF8);
        if ((v85 & 4) != 0) {
          v86 = (int32x2_t **)*v86;
        }
        int v87 = *v86;
        uint64_t v88 = (uint64_t *)&(*v86)[121];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B8AF8(v88, &v129, (unsigned int ***)&v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v87[122], (int32x2_t)0x1FFFFFFFFLL);
          v87[122] = result;
        }
        break;
      case 0x1C:
        uint64_t v113 = *((void *)this + 2);
        uint64_t v114 = (int32x2_t **)(v113 & 0xFFFFFFFFFFFFFFF8);
        if ((v113 & 4) != 0) {
          uint64_t v114 = (int32x2_t **)*v114;
        }
        __int16 v115 = *v114;
        uint64_t v116 = (uint64_t *)&(*v114)[124];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC598638(v116, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v115[125], (int32x2_t)0x1FFFFFFFFLL);
          v115[125] = result;
        }
        break;
      case 0x1D:
        uint64_t v117 = *((void *)this + 2);
        __int16 v118 = (int32x2_t **)(v117 & 0xFFFFFFFFFFFFFFF8);
        if ((v117 & 4) != 0) {
          __int16 v118 = (int32x2_t **)*v118;
        }
        int v119 = *v118;
        uint64_t v120 = (uint64_t *)&(*v118)[127];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B9278(v120, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v119[128], (int32x2_t)0x1FFFFFFFFLL);
          v119[128] = result;
        }
        break;
      case 0x1E:
        uint64_t v89 = *((void *)this + 2);
        unint64_t v90 = (int32x2_t **)(v89 & 0xFFFFFFFFFFFFFFF8);
        if ((v89 & 4) != 0) {
          unint64_t v90 = (int32x2_t **)*v90;
        }
        size_t v91 = *v90;
        uint64_t v92 = (uint64_t *)&(*v90)[130];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B9278(v92, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v91[131], (int32x2_t)0x1FFFFFFFFLL);
          v91[131] = result;
        }
        break;
      case 0x1F:
        uint64_t v93 = *((void *)this + 2);
        BOOL v94 = (int32x2_t **)(v93 & 0xFFFFFFFFFFFFFFF8);
        if ((v93 & 4) != 0) {
          BOOL v94 = (int32x2_t **)*v94;
        }
        int v95 = *v94;
        uint64_t v96 = (uint64_t *)&(*v94)[133];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B6138(v96, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v95[134], (int32x2_t)0x1FFFFFFFFLL);
          v95[134] = result;
        }
        break;
      case 0x20:
        uint64_t v121 = *((void *)this + 2);
        BOOL v122 = (int32x2_t **)(v121 & 0xFFFFFFFFFFFFFFF8);
        if ((v121 & 4) != 0) {
          BOOL v122 = (int32x2_t **)*v122;
        }
        uint64_t v123 = *v122;
        uint64_t v124 = (uint64_t *)&(*v122)[136];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B971C(v124, (uint64_t)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v123[137], (int32x2_t)0x1FFFFFFFFLL);
          v123[137] = result;
        }
        break;
      case 0x21:
        uint64_t v37 = *((void *)this + 2);
        uint64_t v38 = (int32x2_t **)(v37 & 0xFFFFFFFFFFFFFFF8);
        if ((v37 & 4) != 0) {
          uint64_t v38 = (int32x2_t **)*v38;
        }
        int v39 = *v38;
        uint64_t v40 = (uint64_t *)&(*v38)[139];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B4AFC(v40, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v39[140], (int32x2_t)0x1FFFFFFFFLL);
          v39[140] = result;
        }
        break;
      case 0x22:
        uint64_t v125 = *((void *)this + 2);
        char v126 = (int32x2_t **)(v125 & 0xFFFFFFFFFFFFFFF8);
        if ((v125 & 4) != 0) {
          char v126 = (int32x2_t **)*v126;
        }
        int v127 = *v126;
        uint64_t v128 = (uint64_t *)&(*v126)[142];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CD5B3B94(v128, (uint64_t)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v127[143], (int32x2_t)0x1FFFFFFFFLL);
          v127[143] = result;
        }
        break;
      default:
        uint64_t v13 = *((void *)this + 2);
        uint64_t v14 = (int32x2_t **)(v13 & 0xFFFFFFFFFFFFFFF8);
        if ((v13 & 4) != 0) {
          uint64_t v14 = (int32x2_t **)*v14;
        }
        uint64_t v15 = *v14;
        uint64_t v16 = (uint64_t *)&(*v14)[58];
        unint64_t v129 = (unsigned int *)this;
        uint64_t v130 = 0;
        if (sub_1CC593034(v16, (uint64_t *)&v129, &v130))
        {
          uint64_t *v130 = -8192;
          int32x2_t result = vadd_s32(v15[59], (int32x2_t)0x1FFFFFFFFLL);
          v15[59] = result;
        }
        break;
    }
  }
  return result;
}

llvm::MDNode *llvm::MDTuple::getImpl(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  if (a4)
  {
    unsigned int v9 = 0;
  }
  else
  {
    unsigned int v11 = sub_1CC571B50(a2, (uint64_t)&a2[a3]);
    unsigned int v9 = v11;
    int v12 = *(_DWORD *)(*(void *)a1 + 456);
    if (v12)
    {
      uint64_t v13 = *(void *)(*(void *)a1 + 440);
      int v14 = 1;
      for (unsigned int i = v11; ; unsigned int i = v16 + v14++)
      {
        unsigned int v16 = i & (v12 - 1);
        uint64_t v17 = *(void *)(v13 + 8 * v16);
        if (v17 == -4096) {
          break;
        }
        if (v17 != -8192 && *(_DWORD *)(v17 + 4) == v11)
        {
          uint64_t v18 = *(unsigned int *)(v17 + 8);
          if (a3)
          {
            if (a3 == v18)
            {
              uint64_t v19 = -8 * a3;
              uint64_t v20 = a2;
              while (*v20 == *(void *)(v17 + v19))
              {
                ++v20;
                v19 += 8;
                if (!v19) {
                  goto LABEL_16;
                }
              }
            }
          }
          else if (!v18)
          {
LABEL_16:
            if (v16 == v12) {
              uint64_t v21 = 0;
            }
            else {
              uint64_t v21 = *(llvm::MDNode **)(v13 + 8 * v16);
            }
            goto LABEL_20;
          }
        }
      }
    }
    uint64_t v21 = 0;
LABEL_20:
    if (v21 || !a5) {
      return v21;
    }
  }
  BOOL v22 = (char *)operator new(8 * a3 + 24);
  uint64_t v21 = (llvm::MDNode *)&v22[8 * a3];
  if (a3) {
    bzero(v22, 8 * a3);
  }
  llvm::MDNode::MDNode((uint64_t)v21, a1, 4, a4, (uint64_t)a2, a3, 0, 0);
  *((_DWORD *)v21 + 1) = v9;
  uint64_t v23 = *(void *)a1;
  uint64_t v36 = v21;
  if (a4)
  {
    if (a4 == 1) {
      llvm::MDNode::storeDistinctInContext(v21);
    }
  }
  else
  {
    int v24 = *(_DWORD *)(v23 + 456);
    if (!v24)
    {
      uint64_t v34 = 0;
LABEL_39:
      *sub_1CC607EC0(v23 + 440, (uint64_t *)&v36, v34) = v21;
      return v21;
    }
    uint64_t v25 = *(void *)(v23 + 440);
    int v26 = v24 - 1;
    unsigned int v27 = v26 & v9;
    uint64_t v28 = (void *)(v25 + 8 * (v26 & v9));
    uint64_t v29 = (_DWORD *)*v28;
    if ((llvm::MDNode *)*v28 != v21)
    {
      uint64_t v30 = 0;
      int v31 = 1;
      while (v29 != (_DWORD *)-4096)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == (_DWORD *)-8192;
        }
        if (v32) {
          uint64_t v30 = v28;
        }
        unsigned int v33 = v27 + v31++;
        unsigned int v27 = v33 & v26;
        uint64_t v28 = (void *)(v25 + 8 * v27);
        uint64_t v29 = (_DWORD *)*v28;
        if ((llvm::MDNode *)*v28 == v21) {
          return v21;
        }
      }
      if (v30) {
        uint64_t v34 = v30;
      }
      else {
        uint64_t v34 = v28;
      }
      goto LABEL_39;
    }
  }
  return v21;
}

void llvm::MDNode::deleteTemporary(llvm::MDNode *this, llvm::MDNode *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 4) != 0) {
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v3 & 0xFFFFFFFFFFFFFFF8), 0);
  }

  llvm::MDNode::deleteAsSubclass(this);
}

void llvm::MDNode::replaceOperandWith(llvm::MDNode *this, int a2, llvm::Metadata *a3)
{
  uint64_t v3 = (llvm::Metadata **)((char *)this + 8 * a2 + -8 * *((unsigned int *)this + 2));
  __int32 v4 = *v3;
  if (*v3 != a3)
  {
    if ((*((unsigned char *)this + 1) & 0x7F) != 0)
    {
      if (v4)
      {
        int v6 = *(unsigned __int8 *)v4;
        if ((v6 - 4) > 0x1E)
        {
          if ((v6 - 3) >= 0xFFFFFFFE) {
            unsigned int v9 = *v3;
          }
          else {
            unsigned int v9 = 0;
          }
          if ((v6 - 3) < 0xFFFFFFFE)
          {
            if (v6 == 3) {
              *((void *)v4 + 1) = 0;
            }
            goto LABEL_4;
          }
          unint64_t v8 = (unint64_t)v9 + 8;
        }
        else
        {
          if ((*((unsigned char *)v4 + 1) & 0x7F) != 2 && !*((_DWORD *)v4 + 3)) {
            goto LABEL_4;
          }
          uint64_t v7 = *((void *)v4 + 2);
          if ((v7 & 4) == 0) {
            goto LABEL_4;
          }
          unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
          if (!v8) {
            goto LABEL_4;
          }
        }
        unsigned int v11 = (char *)this + 8 * a2 + -8 * *((unsigned int *)this + 2);
        sub_1CC5FA668(v8 + 16, &v11);
      }
LABEL_4:
      *uint64_t v3 = a3;
      if (a3) {
        llvm::MetadataTracking::track((uint64_t)v3, (unsigned __int8 *)a3, 2);
      }
      return;
    }
    unint64_t v10 = (char *)this + 8 * a2 + -8 * *((unsigned int *)this + 2);
    llvm::MDNode::handleChangedOperand((uint64_t)this, v10, a3);
  }
}

llvm::MDNode *llvm::MDNode::concatenate(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t v3 = a2;
  void v14[4] = *MEMORY[0x1E4F143B8];
  if (this)
  {
    if (a2)
    {
      uint64_t v6 = *((unsigned int *)this + 2);
      uint64_t v9 = 1;
      int64x2_t v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      int64x2_t v11 = v10;
      int v12 = v14;
      uint64_t v13 = 0x400000000;
      sub_1CC600D90(&v9, (uint64_t *)this - v6, (uint64_t *)this);
      sub_1CC600D90(&v9, (uint64_t *)v3 - *((unsigned int *)v3 + 2), (uint64_t *)v3);
      uint64_t v7 = *((void *)this + 2);
      unint64_t v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 4) != 0) {
        unint64_t v8 = (void *)*v8;
      }
      uint64_t v3 = sub_1CC600EF0((uint64_t)v8, (unsigned __int8 **)v12, v13);
      if (v12 != v14) {
        free(v12);
      }
      if ((v9 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v10.i64[0], 8);
      }
    }
    else
    {
      return this;
    }
  }
  return v3;
}

void *sub_1CC600D90(void *result, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    v22[9] = v3;
    v22[10] = v4;
    uint64_t v6 = a2;
    uint64_t v7 = (uint64_t)result;
    unint64_t v8 = result + 1;
    do
    {
      uint64_t v9 = *v6;
      v22[0] = *v6;
      if (*(unsigned char *)v7)
      {
        int v10 = 4;
        int64x2_t v11 = v8;
      }
      else
      {
        int v10 = *(_DWORD *)(v7 + 16);
        if (!v10)
        {
          uint64_t v20 = 0;
LABEL_19:
          int32x2_t result = sub_1CC189E38(v7, (uint64_t)v22, v22, v20);
          *int32x2_t result = v22[0];
          unint64_t v21 = *(unsigned int *)(v7 + 48);
          if (v21 >= *(unsigned int *)(v7 + 52)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v7 + 40) + 8 * v21) = *v6;
          ++*(_DWORD *)(v7 + 48);
          goto LABEL_21;
        }
        int64x2_t v11 = *(void **)(v7 + 8);
      }
      int v12 = v10 - 1;
      unsigned int v13 = v12 & ((v9 >> 4) ^ (v9 >> 9));
      int v14 = &v11[v13];
      uint64_t v15 = *v14;
      if (v9 != *v14)
      {
        unsigned int v16 = 0;
        int v17 = 1;
        while (v15 != -4096)
        {
          if (v16) {
            BOOL v18 = 0;
          }
          else {
            BOOL v18 = v15 == -8192;
          }
          if (v18) {
            unsigned int v16 = v14;
          }
          unsigned int v19 = v13 + v17++;
          unsigned int v13 = v19 & v12;
          int v14 = &v11[v13];
          uint64_t v15 = *v14;
          if (v9 == *v14) {
            goto LABEL_21;
          }
        }
        if (v16) {
          uint64_t v20 = v16;
        }
        else {
          uint64_t v20 = v14;
        }
        goto LABEL_19;
      }
LABEL_21:
      ++v6;
    }
    while (v6 != a3);
  }
  return result;
}

llvm::MDNode *sub_1CC600EF0(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  if (!a3) {
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  }
  uint64_t v3 = *a2;
  if (!*a2) {
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  }
  if (*v3 - 4 > 0x1E) {
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  }
  if (a3 != *((_DWORD *)v3 + 2)) {
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  }
  uint64_t v4 = (unsigned __int8 **)&v3[-8 * a3];
  if (v3 != *v4) {
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  }
  if (a3 != 1)
  {
    unsigned int v6 = 1;
    while (a2[v6] == v4[v6])
    {
      if (a3 == ++v6) {
        return (llvm::MDNode *)*a2;
      }
    }
    return llvm::MDTuple::getImpl(a1, a2, a3, 0, 1);
  }
  return (llvm::MDNode *)*a2;
}

llvm::MDNode *llvm::MDNode::intersect(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t v3 = 0;
  v46[4] = *MEMORY[0x1E4F143B8];
  if (this && a2)
  {
    uint64_t v6 = *((unsigned int *)this + 2);
    uint64_t v41 = 1;
    int64x2_t v42 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    int64x2_t v43 = v42;
    uint64_t v44 = v46;
    uint64_t v45 = 0x400000000;
    sub_1CC600D90(&v41, (uint64_t *)this - v6, (uint64_t *)this);
    uint64_t v7 = *((unsigned int *)a2 + 2);
    unint64_t v8 = v40;
    uint64_t v36 = v40;
    uint64_t v37 = v40;
    uint64_t v38 = 4;
    int v39 = 0;
    if (v7)
    {
      unsigned int v9 = 4;
      int v10 = v40;
      int64x2_t v11 = (llvm::MDNode *)((char *)a2 - 8 * v7);
      while (1)
      {
        uint64_t v12 = *(void *)v11;
        uint64_t v13 = HIDWORD(v38);
        if (v10 != v8) {
          break;
        }
        if (HIDWORD(v38))
        {
          int v14 = 0;
          uint64_t v15 = 8 * HIDWORD(v38);
          unsigned int v16 = v8;
          while (*v16 != v12)
          {
            if (*v16 == -2) {
              int v14 = v16;
            }
            ++v16;
            v15 -= 8;
            if (!v15)
            {
              if (!v14) {
                goto LABEL_13;
              }
              *int v14 = v12;
              --v39;
              goto LABEL_15;
            }
          }
          goto LABEL_15;
        }
LABEL_13:
        if (HIDWORD(v38) >= v9) {
          break;
        }
        ++HIDWORD(v38);
        *(void *)&v8[8 * v13] = v12;
LABEL_15:
        unint64_t v8 = v36;
        int v10 = v37;
        int64x2_t v11 = (llvm::MDNode *)((char *)v11 + 8);
        if (v11 == a2) {
          goto LABEL_39;
        }
      }
      if (3 * v9 <= 4 * (HIDWORD(v38) - v39))
      {
        if (v9 >= 0x40) {
          v9 *= 2;
        }
        else {
          unsigned int v9 = 128;
        }
      }
      else if (v9 - HIDWORD(v38) >= v9 >> 3)
      {
        goto LABEL_19;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v36, v9);
      unsigned int v9 = v38;
      int v10 = v37;
LABEL_19:
      unsigned int v17 = v9 - 1;
      unsigned int v18 = (v9 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      unsigned int v19 = &v10[8 * v18];
      uint64_t v20 = *v19;
      if (*v19 == -1)
      {
        unint64_t v21 = 0;
LABEL_31:
        if (v21) {
          uint64_t v25 = v21;
        }
        else {
          uint64_t v25 = v19;
        }
        if (*v25 != v12)
        {
          if (*v25 == -2) {
            --v39;
          }
          else {
            ++HIDWORD(v38);
          }
          *uint64_t v25 = v12;
        }
      }
      else
      {
        unint64_t v21 = 0;
        int v22 = 1;
        while (v20 != v12)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v20 == -2;
          }
          if (v23) {
            unint64_t v21 = v19;
          }
          unsigned int v24 = v18 + v22++;
          unsigned int v18 = v24 & v17;
          unsigned int v19 = &v10[8 * (v24 & v17)];
          uint64_t v20 = *v19;
          if (*v19 == -1) {
            goto LABEL_31;
          }
        }
      }
      goto LABEL_15;
    }
LABEL_39:
    int v26 = (uint64_t *)v44;
    if (!v45) {
      goto LABEL_65;
    }
    unsigned int v27 = (uint64_t *)((char *)v44 + 8 * v45);
    uint64_t v28 = 8 * v45 - 8;
    uint64_t v29 = (uint64_t *)v44;
    do
    {
      uint64_t v30 = *v29++;
      if (sub_1CC6081B0((uint64_t *)&v36, (uint64_t)&v41, v30)) {
        break;
      }
      v28 -= 8;
      int v26 = v29;
    }
    while (v29 != v27);
    if (v29 == v27)
    {
LABEL_65:
      unsigned int v27 = v26;
    }
    else
    {
      uint64_t v35 = 1;
      unsigned int v27 = v26;
      do
      {
        if (!sub_1CC6081B0((uint64_t *)&v36, (uint64_t)&v41, v26[v35])) {
          *v27++ = v26[v35];
        }
        ++v35;
        v28 -= 8;
      }
      while (v28);
    }
    LODWORD(v31) = v45;
    if (v27 != (uint64_t *)((char *)v44 + 8 * v45))
    {
      unint64_t v31 = (unint64_t)((char *)v27 - (unsigned char *)v44) >> 3;
      LODWORD(v45) = v31;
    }
    uint64_t v32 = *((void *)this + 2);
    unsigned int v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFF8);
    if ((v32 & 4) != 0) {
      unsigned int v33 = (void *)*v33;
    }
    uint64_t v3 = sub_1CC600EF0((uint64_t)v33, (unsigned __int8 **)v44, v31);
    if (v37 != v36) {
      free(v37);
    }
    if (v44 != v46) {
      free(v44);
    }
    if ((v41 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v42.i64[0], 8);
    }
  }
  return v3;
}

llvm::MDNode *llvm::MDNode::getMostGenericAliasScope(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t v3 = 0;
  v95[4] = *MEMORY[0x1E4F143B8];
  if (this && a2)
  {
    uint64_t v6 = v89;
    uint64_t v85 = v89;
    v86 = v89;
    uint64_t v87 = 16;
    int v88 = 0;
    uint64_t v80 = v84;
    uint64_t v81 = v84;
    uint64_t v82 = 16;
    int v83 = 0;
    uint64_t v90 = 1;
    int64x2_t v91 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    int64x2_t v92 = v91;
    uint64_t v93 = (unsigned __int8 **)v95;
    uint64_t v94 = 0x400000000;
    uint64_t v7 = *((unsigned int *)this + 2);
    if (v7)
    {
      unsigned int v8 = 0;
      unsigned int v9 = 16;
      int v10 = v89;
      int64x2_t v11 = (llvm::MDNode *)((char *)this - 8 * v7);
      while (1)
      {
        uint64_t v12 = *(void *)v11;
        if (**(unsigned __int8 **)v11 - 4 > 0x1E) {
          goto LABEL_41;
        }
        uint64_t v13 = *(unsigned int *)(v12 + 8);
        if (v13 < 2) {
          goto LABEL_41;
        }
        int v14 = *(unsigned __int8 **)(v12 - 8 * v13 + 8);
        if (!v14 || *v14 - 4 > 0x1E) {
          goto LABEL_41;
        }
        if (v10 != v6) {
          break;
        }
        if (v8)
        {
          uint64_t v15 = 0;
          uint64_t v16 = 8 * v8;
          unsigned int v17 = (unsigned __int8 **)v6;
          while (*v17 != v14)
          {
            if (*v17 == (unsigned __int8 *)-2) {
              uint64_t v15 = v17;
            }
            ++v17;
            v16 -= 8;
            if (!v16)
            {
              if (!v15) {
                goto LABEL_17;
              }
              *uint64_t v15 = v14;
              --v88;
              goto LABEL_40;
            }
          }
          goto LABEL_40;
        }
LABEL_17:
        if (v9 <= v8) {
          break;
        }
        HIDWORD(v87) = v8 + 1;
        *(void *)&v6[8 * v8] = v14;
LABEL_40:
        uint64_t v6 = v85;
        int v10 = v86;
        unsigned int v9 = v87;
        unsigned int v8 = HIDWORD(v87);
LABEL_41:
        int64x2_t v11 = (llvm::MDNode *)((char *)v11 + 8);
        if (v11 == this) {
          goto LABEL_49;
        }
      }
      if (3 * v9 <= 4 * (v8 - v88))
      {
        if (v9 >= 0x40) {
          v9 *= 2;
        }
        else {
          unsigned int v9 = 128;
        }
      }
      else if (v9 - v8 >= v9 >> 3)
      {
        goto LABEL_21;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v85, v9);
      unsigned int v9 = v87;
      int v10 = v86;
LABEL_21:
      unsigned int v18 = v9 - 1;
      unsigned int v19 = (v9 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      uint64_t v20 = (unsigned __int8 **)&v10[8 * v19];
      unint64_t v21 = *v20;
      if (*v20 == (unsigned __int8 *)-1)
      {
        int v22 = 0;
LABEL_33:
        if (v22) {
          int v26 = v22;
        }
        else {
          int v26 = v20;
        }
        if (*v26 != v14)
        {
          if (*v26 == (unsigned __int8 *)-2) {
            --v88;
          }
          else {
            ++HIDWORD(v87);
          }
          uint64_t *v26 = v14;
        }
      }
      else
      {
        int v22 = 0;
        int v23 = 1;
        while (v21 != v14)
        {
          if (v22) {
            BOOL v24 = 0;
          }
          else {
            BOOL v24 = v21 == (unsigned __int8 *)-2;
          }
          if (v24) {
            int v22 = v20;
          }
          unsigned int v25 = v19 + v23++;
          unsigned int v19 = v25 & v18;
          uint64_t v20 = (unsigned __int8 **)&v10[8 * (v25 & v18)];
          unint64_t v21 = *v20;
          if (*v20 == (unsigned __int8 *)-1) {
            goto LABEL_33;
          }
        }
      }
      goto LABEL_40;
    }
LABEL_49:
    uint64_t v27 = *((unsigned int *)a2 + 2);
    if (v27)
    {
      uint64_t v28 = (llvm::MDNode *)((char *)a2 - 8 * v27);
      while (1)
      {
        uint64_t v29 = *(void *)v28;
        if (**(unsigned __int8 **)v28 - 4 > 0x1E) {
          goto LABEL_112;
        }
        uint64_t v30 = *(unsigned int *)(v29 + 8);
        if (v30 < 2) {
          goto LABEL_112;
        }
        unint64_t v31 = *(unsigned __int8 **)(v29 - 8 * v30 + 8);
        if (!v31 || *v31 - 4 > 0x1E) {
          goto LABEL_112;
        }
        uint64_t v32 = v85;
        if (v86 == v85)
        {
          int v33 = HIDWORD(v87);
          uint64_t v34 = &v86[8 * HIDWORD(v87)];
          if (HIDWORD(v87))
          {
            uint64_t v35 = 0;
            while (*(unsigned __int8 **)&v86[v35] != v31)
            {
              v35 += 8;
              if (8 * HIDWORD(v87) == v35) {
                goto LABEL_74;
              }
            }
            uint64_t v34 = &v86[v35];
          }
LABEL_74:
          uint64_t v32 = v86;
        }
        else
        {
          int v36 = v87 - 1;
          unsigned int v37 = (v87 - 1) & ((v31 >> 4) ^ (v31 >> 9));
          uint64_t v34 = &v86[8 * v37];
          uint64_t v38 = *(unsigned __int8 **)v34;
          if (*(void *)v34 == -1)
          {
            int v39 = 0;
LABEL_115:
            if (v39) {
              uint64_t v34 = v39;
            }
            int v33 = HIDWORD(v87);
            if (*(unsigned __int8 **)v34 != v31) {
              uint64_t v34 = &v86[8 * v87];
            }
          }
          else
          {
            int v39 = 0;
            int v40 = 1;
            while (v38 != v31)
            {
              if (v39) {
                BOOL v41 = 0;
              }
              else {
                BOOL v41 = v38 == (unsigned __int8 *)-2;
              }
              if (v41) {
                int v39 = v34;
              }
              unsigned int v42 = v37 + v40++;
              unsigned int v37 = v42 & v36;
              uint64_t v34 = &v86[8 * (v42 & v36)];
              uint64_t v38 = *(unsigned __int8 **)v34;
              if (*(void *)v34 == -1) {
                goto LABEL_115;
              }
            }
            int v33 = HIDWORD(v87);
          }
        }
        int v43 = v86 == v32 ? v33 : v87;
        if (v34 == &v86[8 * v43]) {
          goto LABEL_112;
        }
        uint64_t v44 = v81;
        uint64_t v45 = HIDWORD(v82);
        if (v81 != v80) {
          break;
        }
        if (HIDWORD(v82))
        {
          unsigned int v46 = 0;
          uint64_t v47 = 8 * HIDWORD(v82);
          uint64_t v48 = (unsigned __int8 **)v81;
          while (*v48 != v31)
          {
            if (*v48 == (unsigned __int8 *)-2) {
              unsigned int v46 = v48;
            }
            ++v48;
            v47 -= 8;
            if (!v47)
            {
              if (!v46) {
                goto LABEL_87;
              }
              unsigned __int8 *v46 = v31;
              --v83;
              goto LABEL_111;
            }
          }
          goto LABEL_111;
        }
LABEL_87:
        unsigned int v49 = v82;
        if (HIDWORD(v82) >= v82) {
          goto LABEL_90;
        }
        ++HIDWORD(v82);
        *(void *)&v81[8 * v45] = v31;
LABEL_111:
        uint64_t v79 = *(void *)v28;
        sub_1CC189BDC((uint64_t)&v90, &v79);
LABEL_112:
        uint64_t v28 = (llvm::MDNode *)((char *)v28 + 8);
        if (v28 == a2) {
          goto LABEL_126;
        }
      }
      unsigned int v49 = v82;
LABEL_90:
      if (3 * v49 <= 4 * (HIDWORD(v82) - v83))
      {
        if (v49 >= 0x40) {
          v49 *= 2;
        }
        else {
          unsigned int v49 = 128;
        }
      }
      else if (v49 - HIDWORD(v82) >= v49 >> 3)
      {
        goto LABEL_92;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v80, v49);
      unsigned int v49 = v82;
      uint64_t v44 = v81;
LABEL_92:
      unsigned int v50 = v49 - 1;
      unsigned int v51 = (v49 - 1) & ((v31 >> 4) ^ (v31 >> 9));
      uint64_t v52 = &v44[8 * v51];
      uint64_t v53 = *(unsigned __int8 **)v52;
      if (*(void *)v52 == -1)
      {
        uint64_t v54 = 0;
LABEL_104:
        if (v54) {
          size_t v58 = v54;
        }
        else {
          size_t v58 = (unsigned __int8 **)v52;
        }
        if (*v58 != v31)
        {
          if (*v58 == (unsigned __int8 *)-2) {
            --v83;
          }
          else {
            ++HIDWORD(v82);
          }
          unsigned __int8 *v58 = v31;
        }
      }
      else
      {
        uint64_t v54 = 0;
        int v55 = 1;
        while (v53 != v31)
        {
          if (v54) {
            BOOL v56 = 0;
          }
          else {
            BOOL v56 = v53 == (unsigned __int8 *)-2;
          }
          if (v56) {
            uint64_t v54 = (unsigned __int8 **)v52;
          }
          unsigned int v57 = v51 + v55++;
          unsigned int v51 = v57 & v50;
          uint64_t v52 = &v44[8 * (v57 & v50)];
          uint64_t v53 = *(unsigned __int8 **)v52;
          if (*(void *)v52 == -1) {
            goto LABEL_104;
          }
        }
      }
      goto LABEL_111;
    }
LABEL_126:
    uint64_t v59 = *((unsigned int *)this + 2);
    if (v59)
    {
      uint64_t v60 = (llvm::MDNode *)((char *)this - 8 * v59);
      do
      {
        uint64_t v61 = *(void *)v60;
        if (**(unsigned __int8 **)v60 - 4 <= 0x1E)
        {
          uint64_t v62 = *(unsigned int *)(v61 + 8);
          if (v62 >= 2)
          {
            int v63 = *(unsigned __int8 **)(v61 - 8 * v62 + 8);
            if (v63)
            {
              if (*v63 - 4 <= 0x1E)
              {
                uint64_t v64 = v80;
                if (v81 == v80)
                {
                  int v65 = HIDWORD(v82);
                  BOOL v66 = &v81[8 * HIDWORD(v82)];
                  if (HIDWORD(v82))
                  {
                    uint64_t v67 = 0;
                    while (*(unsigned __int8 **)&v81[v67] != v63)
                    {
                      v67 += 8;
                      if (8 * HIDWORD(v82) == v67) {
                        goto LABEL_151;
                      }
                    }
                    BOOL v66 = &v81[v67];
                  }
LABEL_151:
                  uint64_t v64 = v81;
                }
                else
                {
                  int v68 = v82 - 1;
                  unsigned int v69 = (v82 - 1) & ((v63 >> 4) ^ (v63 >> 9));
                  BOOL v66 = &v81[8 * v69];
                  unsigned int v70 = *(unsigned __int8 **)v66;
                  if (*(void *)v66 == -1)
                  {
                    int v71 = 0;
LABEL_159:
                    if (v71) {
                      BOOL v66 = v71;
                    }
                    int v65 = HIDWORD(v82);
                    if (*(unsigned __int8 **)v66 != v63) {
                      BOOL v66 = &v81[8 * v82];
                    }
                  }
                  else
                  {
                    int v71 = 0;
                    int v72 = 1;
                    while (v70 != v63)
                    {
                      if (v71) {
                        BOOL v73 = 0;
                      }
                      else {
                        BOOL v73 = v70 == (unsigned __int8 *)-2;
                      }
                      if (v73) {
                        int v71 = v66;
                      }
                      unsigned int v74 = v69 + v72++;
                      unsigned int v69 = v74 & v68;
                      BOOL v66 = &v81[8 * (v74 & v68)];
                      unsigned int v70 = *(unsigned __int8 **)v66;
                      if (*(void *)v66 == -1) {
                        goto LABEL_159;
                      }
                    }
                    int v65 = HIDWORD(v82);
                  }
                }
                int v75 = v82;
                if (v81 == v64) {
                  int v75 = v65;
                }
                if (v66 != &v81[8 * v75])
                {
                  uint64_t v79 = *(void *)v60;
                  sub_1CC189BDC((uint64_t)&v90, &v79);
                }
              }
            }
          }
        }
        uint64_t v60 = (llvm::MDNode *)((char *)v60 + 8);
      }
      while (v60 != this);
    }
    if (v94)
    {
      uint64_t v76 = *((void *)this + 2);
      uint64_t v77 = (void *)(v76 & 0xFFFFFFFFFFFFFFF8);
      if ((v76 & 4) != 0) {
        uint64_t v77 = (void *)*v77;
      }
      uint64_t v3 = sub_1CC600EF0((uint64_t)v77, v93, v94);
    }
    else
    {
      uint64_t v3 = 0;
    }
    if (v93 != v95) {
      free(v93);
    }
    if ((v90 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v91.i64[0], 8);
    }
    if (v81 != v80) {
      free(v81);
    }
    if (v86 != v85) {
      free(v86);
    }
  }
  return v3;
}

llvm::MDNode *llvm::MDNode::getMostGenericRange(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  int32x2_t result = 0;
  v43[4] = *MEMORY[0x1E4F143B8];
  if (!this || !a2) {
    return result;
  }
  if (this == a2) {
    return this;
  }
  BOOL v41 = v43;
  uint64_t v42 = 0x400000000;
  int v36 = this;
  unsigned int v5 = *((_DWORD *)this + 2);
  signed int v6 = v5 >> 1;
  unsigned int v8 = *((_DWORD *)a2 + 2);
  signed int v35 = v8 >> 1;
  if (v5 >= 2 && v8 >= 2)
  {
    signed int v11 = 0;
    signed int v10 = 0;
    do
    {
      uint64_t v20 = (char *)v36 - 8 * *((unsigned int *)v36 + 2);
      uint64_t v21 = *(void *)(*(void *)&v20[16 * v11] + 128);
      int v22 = (char *)a2 - 8 * *((unsigned int *)a2 + 2);
      uint64_t v23 = *(void *)(*(void *)&v22[16 * v10] + 128);
      if ((llvm::APInt::compareSigned((llvm::APInt *)(v21 + 24), (const llvm::APInt *)(v23 + 24)) & 0x80000000) != 0) {
        sub_1CC601DEC((uint64_t)&v41, v21, *(uint64_t **)(*(void *)&v20[8 * ((2 * v11++) | 1)] + 128));
      }
      else {
        sub_1CC601DEC((uint64_t)&v41, v23, *(uint64_t **)(*(void *)&v22[8 * ((2 * v10++) | 1)] + 128));
      }
    }
    while (v11 < v6 && v10 < v35);
  }
  else
  {
    signed int v10 = 0;
    signed int v11 = 0;
  }
  int v12 = v6 - v11;
  if (v6 > v11)
  {
    unsigned int v13 = 2 * v11;
    do
    {
      int v14 = (char *)v36 - 8 * *((unsigned int *)v36 + 2);
      sub_1CC601DEC((uint64_t)&v41, *(void *)(*(void *)&v14[8 * v13] + 128), *(uint64_t **)(*(void *)&v14[8 * v13 + 8] + 128));
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  int v15 = v35 - v10;
  if (v35 > v10)
  {
    unsigned int v16 = 2 * v10;
    do
    {
      unsigned int v17 = (char *)a2 - 8 * *((unsigned int *)a2 + 2);
      sub_1CC601DEC((uint64_t)&v41, *(void *)(*(void *)&v17[8 * v16] + 128), *(uint64_t **)(*(void *)&v17[8 * v16 + 8] + 128));
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  unsigned int v18 = v42;
  if (v42 >= 5)
  {
    if (sub_1CC601EB4((uint64_t)&v41, *(void *)v41, *((uint64_t **)v41 + 1)))
    {
      uint64_t v34 = 0;
      do
      {
        *(void *)((char *)v41 + v34) = *(void *)((char *)v41 + v34 + 16);
        v34 += 8;
      }
      while (8 * (v18 - 2) != v34);
      sub_1CD42769C((uint64_t)&v41, v18 - 2);
    }
    unsigned int v18 = v42;
  }
  if (v18 != 2) {
    goto LABEL_37;
  }
  if (*(_DWORD *)(*(void *)v41 + 32) > 0x40u) {
    operator new[]();
  }
  unsigned int v19 = *(void **)(*(void *)v41 + 24);
  uint64_t v24 = *((void *)v41 + 1);
  unsigned int v25 = *(_DWORD *)(v24 + 32);
  if (v25 > 0x40) {
    operator new[]();
  }
  uint64_t v26 = *(void *)(v24 + 24);
  LODWORD(v38) = *(_DWORD *)(*(void *)v41 + 32);
  unsigned int v37 = v19;
  unsigned int v40 = v25;
  uint64_t v39 = v26;
  BOOL isFullSet = llvm::ConstantRange::isFullSet((const void **)&v37);
  sub_1CC05EB8C((uint64_t)&v37);
  if (!isFullSet)
  {
    unsigned int v18 = v42;
LABEL_37:
    unsigned int v37 = &v39;
    uint64_t v38 = 0x400000000;
    if (v18 >= 5) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v18)
    {
      uint64_t v29 = (llvm::ValueAsMetadata **)v41;
      uint64_t v30 = 8 * v18;
      do
      {
        uint64_t v31 = llvm::ValueAsMetadata::get(*v29, a2);
        if (v38 >= (unint64_t)HIDWORD(v38)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v37 + v38) = v31;
        LODWORD(v38) = v38 + 1;
        ++v29;
        v30 -= 8;
      }
      while (v30);
    }
    uint64_t v32 = *((void *)v36 + 2);
    int v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFF8);
    if ((v32 & 4) != 0) {
      int v33 = (void *)*v33;
    }
    Impl = llvm::MDTuple::getImpl((uint64_t)v33, v37, v38, 0, 1);
    if (v37 != &v39) {
      free(v37);
    }
    goto LABEL_47;
  }
  Impl = 0;
LABEL_47:
  if (v41 != v43) {
    free(v41);
  }
  return Impl;
}

uint64_t sub_1CC601DEC(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = result;
  unsigned int v6 = *(_DWORD *)(result + 8);
  if (v6)
  {
    int32x2_t result = sub_1CC601EB4(result, a2, a3);
    if (result) {
      return result;
    }
    unsigned int v6 = *(_DWORD *)(v5 + 8);
  }
  if (v6 >= *(_DWORD *)(v5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v5 + 8 * v6) = a2;
  unsigned int v7 = *(_DWORD *)(v5 + 12);
  unsigned int v8 = *(_DWORD *)(v5 + 8) + 1;
  *(_DWORD *)(v5 + 8) = v8;
  if (v8 >= v7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)v5 + 8 * v8) = a3;
  ++*(_DWORD *)(v5 + 8);
  return result;
}

uint64_t sub_1CC601EB4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (*(_DWORD *)(a2 + 32) > 0x40u) {
    operator new[]();
  }
  uint64_t v5 = *(void **)(a2 + 24);
  unsigned int v6 = *((_DWORD *)a3 + 8);
  if (v6 > 0x40) {
    operator new[]();
  }
  unsigned int v7 = (void *)a3[3];
  unsigned int v39 = *(_DWORD *)(a2 + 32);
  uint64_t v38 = v5;
  unsigned int v41 = v6;
  unsigned int v40 = v7;
  int v8 = *(_DWORD *)(a1 + 8);
  uint64_t v9 = *(void *)(*(void *)a1 + 8 * (v8 - 2));
  unsigned int v10 = *(_DWORD *)(v9 + 32);
  uint64_t v33 = (v8 - 2);
  if (v10 > 0x40) {
    operator new[]();
  }
  signed int v11 = *(void **)(v9 + 24);
  uint64_t v12 = (v8 - 1);
  uint64_t v13 = *(void *)(*(void *)a1 + 8 * v12);
  unsigned int v14 = *(_DWORD *)(v13 + 32);
  if (v14 > 0x40) {
    operator new[]();
  }
  int v15 = *(void **)(v13 + 24);
  unsigned int v35 = v10;
  uint64_t v34 = v11;
  unsigned int v37 = v14;
  int v36 = v15;
  llvm::ConstantRange::intersectWith((uint64_t)&v38, (llvm::ConstantRange *)&v34, 0, (uint64_t)&__s1);
  uint64_t v16 = v43;
  if (v43 >= 0x41)
  {
    unsigned int v17 = __s2;
    uint64_t v32 = __s1;
    if (memcmp(__s1, __s2, (((unint64_t)v43 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_14;
    }
    int v19 = 0;
    int64_t v20 = (unint64_t)(v16 + 63) >> 6;
    do
    {
      if (v20-- < 1) {
        break;
      }
      unint64_t v22 = v32[v20];
      v19 += __clz(v22);
    }
    while (!v22);
    int v23 = v16 | 0xFFFFFFC0;
    if ((v16 & 0x3F) == 0) {
      int v23 = 0;
    }
    if (v19 + v23 != v16) {
      goto LABEL_14;
    }
  }
  else
  {
    unsigned int v17 = __s2;
    if ((unint64_t)__s2 | (unint64_t)__s1)
    {
LABEL_14:
      uint64_t v18 = 1;
      goto LABEL_32;
    }
  }
  if (v41 > 0x40)
  {
    if (!memcmp(v40, v34, (((unint64_t)v41 + 63) >> 3) & 0x3FFFFFF8)) {
      goto LABEL_14;
    }
  }
  else if (v40 == v34)
  {
    goto LABEL_14;
  }
  if (v39 > 0x40) {
    BOOL v24 = memcmp(v38, v36, (((unint64_t)v39 + 63) >> 3) & 0x3FFFFFF8) == 0;
  }
  else {
    BOOL v24 = v38 == v36;
  }
  uint64_t v18 = v24;
LABEL_32:
  if (v45 >= 0x41 && v17 != 0)
  {
    MEMORY[0x1D25D9CB0](v17, 0x1000C8000313F17);
    LODWORD(v16) = v43;
  }
  if (v16 >= 0x41 && __s1) {
    MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
  }
  if (v18)
  {
    llvm::ConstantRange::unionWith((uint64_t)&v34, (unsigned int *)&v38, 0, (uint64_t)&__s1);
    uint64_t v26 = *a3;
    Splat = llvm::ConstantInt::get(*(llvm::ConstantInt **)v26, (llvm::LLVMContext *)&__s1, v27);
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
      Splat = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v26 + 32) | ((unint64_t)(*(_DWORD *)(v26 + 8) == 19) << 32)), (uint64_t)Splat);
    }
    *(void *)(*(void *)a1 + 8 * v33) = Splat;
    uint64_t v30 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v26, (llvm::LLVMContext *)&__s2, v29);
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12) {
      uint64_t v30 = llvm::ConstantVector::getSplat((llvm::Type *)(*(unsigned int *)(v26 + 32) | ((unint64_t)(*(_DWORD *)(v26 + 8) == 19) << 32)), (uint64_t)v30);
    }
    *(void *)(*(void *)a1 + 8 * v12) = v30;
    if (v45 >= 0x41 && __s2) {
      MEMORY[0x1D25D9CB0](__s2, 0x1000C8000313F17);
    }
    if (v43 >= 0x41 && __s1) {
      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
  }
  if (v37 >= 0x41 && v36) {
    MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
  }
  if (v35 >= 0x41 && v34) {
    MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
  }
  if (v41 >= 0x41 && v40) {
    MEMORY[0x1D25D9CB0](v40, 0x1000C8000313F17);
  }
  if (v39 >= 0x41 && v38) {
    MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
  }
  return v18;
}

void llvm::NamedMDNode::NamedMDNode(llvm::NamedMDNode *this, const llvm::Twine *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  llvm::Twine::str(a2, (void *)this + 2);
  *((void *)this + 5) = 0;
  operator new();
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  llvm::Twine::str(a2, (void *)this + 2);
  *((void *)this + 5) = 0;
  operator new();
}

void llvm::NamedMDNode::~NamedMDNode(llvm::NamedMDNode *this)
{
  uint64_t v2 = (char **)*((void *)this + 6);
  uint64_t v3 = *v2;
  uint64_t v4 = *((unsigned int *)v2 + 2);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    unsigned int v6 = v3 - 8;
    while (1)
    {
      unsigned int v7 = *(unsigned __int8 **)&v6[v5];
      if (v7)
      {
        int v8 = *v7;
        if ((v8 - 4) > 0x1E)
        {
          if ((v8 - 3) >= 0xFFFFFFFE) {
            uint64_t v9 = *(void *)&v6[v5];
          }
          else {
            uint64_t v9 = 0;
          }
          if ((v8 - 3) < 0xFFFFFFFE)
          {
            if (v8 == 3) {
              *((void *)v7 + 1) = 0;
            }
            goto LABEL_7;
          }
          unint64_t v10 = v9 + 8;
        }
        else
        {
          if ((v7[1] & 0x7F) != 2 && !*((_DWORD *)v7 + 3)) {
            goto LABEL_7;
          }
          uint64_t v13 = *((void *)v7 + 2);
          if ((v13 & 4) == 0) {
            goto LABEL_7;
          }
          unint64_t v10 = v13 & 0xFFFFFFFFFFFFFFF8;
          if (!v10) {
            goto LABEL_7;
          }
        }
        unsigned int v17 = &v6[v5];
        sub_1CC5FA668(v10 + 16, &v17);
      }
LABEL_7:
      v5 -= 8;
      if (!v5)
      {
        signed int v11 = (char **)*((void *)this + 6);
        uint64_t v3 = *v11;
        goto LABEL_17;
      }
    }
  }
  signed int v11 = v2;
LABEL_17:
  *((_DWORD *)v2 + 2) = 0;
  uint64_t v12 = *((unsigned int *)v11 + 2);
  if (v12)
  {
    uint64_t v14 = 8 * v12;
    int v15 = v3 - 8;
    do
    {
      uint64_t v16 = *(unsigned __int8 **)&v15[v14];
      if (v16) {
        llvm::MetadataTracking::untrack((uint64_t)&v15[v14], v16);
      }
      v14 -= 8;
    }
    while (v14);
    uint64_t v3 = *v11;
  }
  if (v3 != (char *)(v11 + 2)) {
    free(v3);
  }
  MEMORY[0x1D25D9CE0](v11, 0x1080C40ED926357);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

uint64_t llvm::NamedMDNode::getNumOperands(llvm::NamedMDNode *this)
{
  return *(unsigned int *)(*((void *)this + 6) + 8);
}

uint64_t llvm::NamedMDNode::getOperand(llvm::NamedMDNode *this, unsigned int a2)
{
  return *(void *)(**((void **)this + 6) + 8 * a2);
}

void *llvm::NamedMDNode::addOperand(llvm::NamedMDNode *this, llvm::MDNode *a2)
{
  uint64_t v5 = (unsigned __int8 *)a2;
  uint64_t v2 = *((void *)this + 6);
  uint64_t v3 = *(unsigned int *)(v2 + 8);
  if (v3 >= *(_DWORD *)(v2 + 12)) {
    return (void *)sub_1CC608328(*((void *)this + 6), &v5);
  }
  int32x2_t result = (void *)(*(void *)v2 + 8 * v3);
  *int32x2_t result = a2;
  if (a2)
  {
    int32x2_t result = (void *)llvm::MetadataTracking::track((uint64_t)result, (unsigned __int8 *)a2, 2);
    LODWORD(v3) = *(_DWORD *)(v2 + 8);
  }
  *(_DWORD *)(v2 + 8) = v3 + 1;
  return result;
}

unsigned __int8 **llvm::NamedMDNode::setOperand(llvm::NamedMDNode *this, unsigned int a2, llvm::MDNode *a3)
{
  return sub_1CC19E068((unsigned __int8 **)(**((void **)this + 6) + 8 * a2), (unsigned __int8 *)a3);
}

void llvm::NamedMDNode::eraseFromParent(llvm::Module **this)
{
}

uint64_t llvm::NamedMDNode::clearOperands(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 48);
  uint64_t v2 = *(unsigned int *)(v1 + 8);
  if (v2)
  {
    uint64_t v3 = 8 * v2;
    uint64_t v4 = *(void *)v1 - 8;
    do
    {
      uint64_t v5 = *(unsigned __int8 **)(v4 + v3);
      if (v5)
      {
        int v6 = *v5;
        if ((v6 - 4) > 0x1E)
        {
          if ((v6 - 3) >= 0xFFFFFFFE) {
            uint64_t v7 = *(void *)(v4 + v3);
          }
          else {
            uint64_t v7 = 0;
          }
          if ((v6 - 3) < 0xFFFFFFFE)
          {
            if (v6 == 3) {
              *((void *)v5 + 1) = 0;
            }
            goto LABEL_7;
          }
          unint64_t v8 = v7 + 8;
        }
        else
        {
          if ((v5[1] & 0x7F) != 2 && !*((_DWORD *)v5 + 3)) {
            goto LABEL_7;
          }
          uint64_t v9 = *((void *)v5 + 2);
          if ((v9 & 4) == 0) {
            goto LABEL_7;
          }
          unint64_t v8 = v9 & 0xFFFFFFFFFFFFFFF8;
          if (!v8) {
            goto LABEL_7;
          }
        }
        uint64_t v10 = v4 + v3;
        this = sub_1CC5FA668(v8 + 16, &v10);
      }
LABEL_7:
      v3 -= 8;
    }
    while (v3);
  }
  *(_DWORD *)(v1 + 8) = 0;
  return this;
}

char *llvm::NamedMDNode::getName(llvm::NamedMDNode *this)
{
  uint64_t v3 = *((void *)this + 2);
  uint64_t v1 = (char *)this + 16;
  uint64_t v2 = v3;
  if (v1[23] >= 0) {
    return v1;
  }
  return (char *)v2;
}

uint64_t llvm::MDAttachments::lookup(llvm::MDAttachments *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)this + 8;
  uint64_t v4 = 16 * v2;
  while (*(_DWORD *)(v3 - 8) != a2)
  {
    v3 += 16;
    v4 -= 16;
    if (!v4) {
      return 0;
    }
  }
  return *(void *)v3;
}

unsigned int *llvm::MDAttachments::get(unsigned int *result, int a2, uint64_t a3)
{
  uint64_t v3 = result[2];
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    uint64_t v5 = (void *)(*(void *)result + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) == a2)
      {
        unint64_t v6 = *(unsigned int *)(a3 + 8);
        if (v6 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v6) = *v5;
        ++*(_DWORD *)(a3 + 8);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  return result;
}

void llvm::MDAttachments::getAll(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = *a1;
    uint64_t v5 = *a1 + 16 * v3;
    do
    {
      sub_1CB846294(a2, (unsigned int *)v4, (uint64_t *)(v4 + 8));
      v4 += 16;
    }
    while (v4 != v5);
  }
  unint64_t v6 = *(unsigned int *)(a2 + 8);
  if (v6 > 1)
  {
    uint64_t v7 = *(__n128 **)a2;
    unint64_t v8 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    for (unint64_t i = v6; ; i >>= 1)
    {
      uint64_t v10 = (__n128 *)operator new(16 * i, v8);
      if (v10) {
        break;
      }
      if (i <= 1)
      {
        sub_1CC6084C4(v7, &v7[v6], (uint64_t)&v14, v6, 0, 0, v11);
        return;
      }
    }
    uint64_t v13 = v10;
    sub_1CC6084C4(v7, &v7[v6], (uint64_t)&v14, v6, v10, i, v11);
    operator delete(v13);
  }
}

void llvm::MDAttachments::set(llvm::MDAttachments *this, int a2, llvm::MDNode *a3)
{
  llvm::MDAttachments::erase(this, a2);
  if (!a3) {
    return;
  }
  int v10 = a2;
  __n128 v11 = a3;
  llvm::MetadataTracking::track((uint64_t)&v11, (unsigned __int8 *)a3, 2);
  sub_1CC602D78((uint64_t)this, (unint64_t)&v10);
  if (!v11) {
    return;
  }
  int v6 = *(unsigned __int8 *)v11;
  if ((v6 - 4) > 0x1E)
  {
    if ((v6 - 3) >= 0xFFFFFFFE) {
      uint64_t v9 = v11;
    }
    else {
      uint64_t v9 = 0;
    }
    if ((v6 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v8 = (unint64_t)v9 + 8;
LABEL_15:
      uint64_t v12 = &v11;
      sub_1CC5FA668(v8 + 16, &v12);
      return;
    }
    if (v6 == 3) {
      *((void *)v11 + 1) = 0;
    }
  }
  else if ((*((unsigned char *)v11 + 1) & 0x7F) == 2 || *((_DWORD *)v11 + 3))
  {
    uint64_t v7 = *((void *)v11 + 2);
    if ((v7 & 4) != 0)
    {
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v8) {
        goto LABEL_15;
      }
    }
  }
}

BOOL llvm::MDAttachments::erase(llvm::MDAttachments *this, int a2)
{
  uint64_t v4 = *((unsigned int *)this + 2);
  if (v4 == 1)
  {
    uint64_t v5 = *(_DWORD **)this;
    if (**(_DWORD **)this != a2) {
      goto LABEL_3;
    }
    *((_DWORD *)this + 2) = 0;
    int v15 = (unsigned __int8 *)*((void *)v5 + 1);
    uint64_t v13 = (unsigned __int8 **)(v5 + 2);
    char v14 = v15;
    if (v15)
    {
      int v16 = *v14;
      if ((v16 - 4) > 0x1E)
      {
        if ((v16 - 3) >= 0xFFFFFFFE) {
          unsigned int v17 = v14;
        }
        else {
          unsigned int v17 = 0;
        }
        if ((v16 - 3) < 0xFFFFFFFE)
        {
          if (v16 == 3) {
            *((void *)v14 + 1) = 0;
          }
          return 1;
        }
        unint64_t v18 = (unint64_t)(v17 + 8);
      }
      else
      {
        if ((v14[1] & 0x7F) != 2 && !*((_DWORD *)v14 + 3)) {
          return 1;
        }
        uint64_t v30 = *((void *)v14 + 2);
        BOOL result = 1;
        if ((v30 & 4) == 0) {
          return result;
        }
        unint64_t v18 = v30 & 0xFFFFFFFFFFFFFFF8;
        if (!v18) {
          return result;
        }
      }
      uint64_t v31 = v13;
      sub_1CC5FA668(v18 + 16, &v31);
    }
    return 1;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(_DWORD **)this;
LABEL_3:
  unint64_t v6 = 0;
  uint64_t v7 = &v5[4 * v4];
  uint64_t v8 = 16 * v4;
  while (v5[v6 / 4] != a2)
  {
    v6 += 16;
    if (v8 == v6) {
      goto LABEL_6;
    }
  }
  uint64_t v7 = &v5[v6 / 4];
  if (16 * v4 - 16 == v6)
  {
LABEL_6:
    uint64_t v9 = *((unsigned int *)this + 2);
    goto LABEL_7;
  }
  int v19 = (unsigned __int8 **)(v7 + 6);
  uint64_t v20 = v8 - v6 - 16;
  do
  {
    int v21 = *((_DWORD *)v19 - 2);
    if (v21 != a2)
    {
      unint64_t v22 = (unsigned __int8 **)(v7 + 2);
      *uint64_t v7 = v21;
      v7 += 4;
      sub_1CB8F69CC(v22, v19);
    }
    v19 += 2;
    v20 -= 16;
  }
  while (v20);
  uint64_t v5 = *(_DWORD **)this;
  uint64_t v9 = *((unsigned int *)this + 2);
LABEL_7:
  int v10 = &v5[4 * v9];
  if (v10 == v7) {
    goto LABEL_8;
  }
  int v23 = (unsigned __int8 **)(v10 - 2);
  do
  {
    BOOL v24 = *v23;
    if (!*v23) {
      goto LABEL_34;
    }
    int v26 = *v24;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = *v23;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v26 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v28 = (unint64_t)(v29 + 8);
LABEL_48:
        uint64_t v31 = v23;
        sub_1CC5FA668(v28 + 16, &v31);
        goto LABEL_34;
      }
      if (v26 == 3) {
        *((void *)v24 + 1) = 0;
      }
    }
    else if ((v24[1] & 0x7F) == 2 || *((_DWORD *)v24 + 3))
    {
      uint64_t v27 = *((void *)v24 + 2);
      if ((v27 & 4) != 0)
      {
        unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
        if (v28) {
          goto LABEL_48;
        }
      }
    }
LABEL_34:
    unsigned int v25 = v23 - 1;
    v23 -= 2;
  }
  while (v25 != (unsigned __int8 **)v7);
  uint64_t v5 = *(_DWORD **)this;
LABEL_8:
  unint64_t v11 = (unint64_t)((char *)v7 - (char *)v5) >> 4;
  *((_DWORD *)this + 2) = v11;
  return v4 != v11;
}

void llvm::MDAttachments::insert(llvm::MDAttachments *this, int a2, llvm::MDNode *a3)
{
  int v4 = a2;
  uint64_t v5 = (unsigned __int8 *)a3;
  llvm::MetadataTracking::track((uint64_t)&v5, (unsigned __int8 *)a3, 2);
  sub_1CC602D78((uint64_t)this, (unint64_t)&v4);
  if (v5) {
    llvm::MetadataTracking::untrack((uint64_t)&v5, v5);
  }
}

void sub_1CC602D78(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  unint64_t v5 = *(void *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v14 = v4 + 1;
    unint64_t v15 = v5 + 16 * v4;
    if (v5 <= a2 && v15 > a2)
    {
      unint64_t v18 = a2 - v5;
      sub_1CC608DE8(a1, v14);
      unint64_t v5 = *(void *)a1;
      a2 = *(void *)a1 + v18;
    }
    else
    {
      sub_1CC608DE8(a1, v14);
      unint64_t v5 = *(void *)a1;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 8);
  *(_DWORD *)(v5 + 16 * v6) = *(_DWORD *)a2;
  unint64_t v7 = v5 + 16 * v6;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v8 = (unsigned __int8 **)(a2 + 8);
  *(void *)(v7 + 8) = v9;
  uint64_t v10 = v7 + 8;
  unint64_t v11 = *v8;
  if (*v8)
  {
    int v12 = *v11;
    if ((v12 - 4) > 0x1E)
    {
      if ((v12 - 3) < 0xFFFFFFFE)
      {
LABEL_6:
        const std::nothrow_t *v8 = 0;
        goto LABEL_7;
      }
      unint64_t v13 = (unint64_t)(v11 + 8);
    }
    else
    {
      if ((v11[1] & 0x7F) != 2 && !*((_DWORD *)v11 + 3)) {
        goto LABEL_6;
      }
      uint64_t v17 = *((void *)v11 + 2);
      if ((v17 & 4) == 0) {
        goto LABEL_6;
      }
      unint64_t v13 = v17 & 0xFFFFFFFFFFFFFFF8;
      if ((v17 & 0xFFFFFFFFFFFFFFF8) == 0) {
        goto LABEL_6;
      }
    }
    llvm::ReplaceableMetadataImpl::moveRef(v13, (uint64_t)v8, v10);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
    goto LABEL_6;
  }
LABEL_7:
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t llvm::Value::getMetadata(llvm::Value *this, int a2)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = ***(void ***)this;
  uint64_t v20 = this;
  int v4 = *(_DWORD *)(v3 + 2496);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 2480);
    int v6 = v4 - 1;
    unsigned int v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v8 = (llvm::Value **)(v5 + 40 * v7);
    uint64_t v9 = *v8;
    if (*v8 == this) {
      goto LABEL_4;
    }
    unint64_t v14 = 0;
    int v15 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      if (v14) {
        BOOL v16 = 0;
      }
      else {
        BOOL v16 = v9 == (llvm::Value *)-8192;
      }
      if (v16) {
        unint64_t v14 = v8;
      }
      unsigned int v17 = v7 + v15++;
      unsigned int v7 = v17 & v6;
      uint64_t v8 = (llvm::Value **)(v5 + 40 * (v17 & v6));
      uint64_t v9 = *v8;
      if (*v8 == this) {
        goto LABEL_4;
      }
    }
    if (v14) {
      unint64_t v18 = v14;
    }
    else {
      unint64_t v18 = v8;
    }
  }
  else
  {
    unint64_t v18 = 0;
  }
  uint64_t v8 = (llvm::Value **)sub_1CC609054(v3 + 2480, (uint64_t)&v20, (uint64_t *)&v20, v18);
  int v19 = v20;
  v8[3] = 0;
  void v8[4] = 0;
  const std::nothrow_t *v8 = v19;
  v8[1] = (llvm::Value *)(v8 + 3);
  void v8[2] = (llvm::Value *)0x100000000;
LABEL_4:
  uint64_t v10 = *((unsigned int *)v8 + 4);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = (uint64_t)v8[1] + 8;
  uint64_t v12 = 16 * v10;
  while (*(_DWORD *)(v11 - 8) != a2)
  {
    uint64_t result = 0;
    v11 += 16;
    v12 -= 16;
    if (!v12) {
      return result;
    }
  }
  return *(void *)v11;
}

uint64_t llvm::Value::getMetadata(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  if ((*(unsigned char *)(a1 + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v8 = *(uint64_t ***)a1;
  uint64_t v9 = ***(void ***)a1;
  uint64_t v26 = a1;
  int v10 = *(_DWORD *)(v9 + 2496);
  if (v10)
  {
    uint64_t v11 = *(void *)(v9 + 2480);
    int v12 = v10 - 1;
    unsigned int v13 = v12 & ((a1 >> 4) ^ (a1 >> 9));
    unint64_t v14 = (void *)(v11 + 40 * v13);
    uint64_t v15 = *v14;
    if (*v14 == a1) {
      goto LABEL_6;
    }
    uint64_t v20 = 0;
    int v21 = 1;
    while (v15 != -4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v15 == -8192;
      }
      if (v22) {
        uint64_t v20 = v14;
      }
      unsigned int v23 = v13 + v21++;
      unsigned int v13 = v23 & v12;
      unint64_t v14 = (void *)(v11 + 40 * v13);
      uint64_t v15 = *v14;
      if (*v14 == a1) {
        goto LABEL_6;
      }
    }
    if (v20) {
      BOOL v24 = v20;
    }
    else {
      BOOL v24 = v14;
    }
  }
  else
  {
    BOOL v24 = 0;
  }
  unint64_t v14 = sub_1CC609054(v9 + 2480, (uint64_t)&v26, &v26, v24);
  uint64_t v25 = v26;
  void v14[4] = 0;
  v14[3] = 0;
  *unint64_t v14 = v25;
  v14[1] = v14 + 3;
  v14[2] = 0x100000000;
  uint64_t v8 = *(uint64_t ***)a1;
LABEL_6:
  int MDKindID = llvm::LLVMContext::getMDKindID(*v8, a2, a3);
  uint64_t v17 = *((unsigned int *)v14 + 4);
  if (!v17) {
    return 0;
  }
  uint64_t v18 = v14[1] + 8;
  uint64_t v19 = 16 * v17;
  while (*(_DWORD *)(v18 - 8) != MDKindID)
  {
    uint64_t v3 = 0;
    v18 += 16;
    v19 -= 16;
    if (!v19) {
      return v3;
    }
  }
  return *(void *)v18;
}

unsigned int *llvm::Value::getMetadata(unsigned int *result, int a2, uint64_t a3)
{
  if ((*((unsigned char *)result + 23) & 0x20) != 0)
  {
    uint64_t v5 = ***(void ***)result;
    uint64_t v18 = result;
    int v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 2480);
      int v8 = v6 - 1;
      unsigned int v9 = (v6 - 1) & ((result >> 4) ^ (result >> 9));
      int v10 = (unsigned int *)(v7 + 40 * v9);
      uint64_t v11 = *(void *)v10;
      if (*(unsigned int **)v10 == result) {
        return llvm::MDAttachments::get(v10 + 2, a2, a3);
      }
      int v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          int v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        int v10 = (unsigned int *)(v7 + 40 * (v15 & v8));
        uint64_t v11 = *(void *)v10;
        if (*(unsigned int **)v10 == result) {
          return llvm::MDAttachments::get(v10 + 2, a2, a3);
        }
      }
      if (v12) {
        BOOL v16 = v12;
      }
      else {
        BOOL v16 = v10;
      }
    }
    else
    {
      BOOL v16 = 0;
    }
    int v10 = (unsigned int *)sub_1CC609054(v5 + 2480, (uint64_t)&v18, (uint64_t *)&v18, v16);
    uint64_t v17 = (uint64_t)v18;
    *((void *)v10 + 3) = 0;
    *((void *)v10 + 4) = 0;
    *(void *)int v10 = v17;
    *((void *)v10 + 1) = v10 + 6;
    *((void *)v10 + 2) = 0x100000000;
    return llvm::MDAttachments::get(v10 + 2, a2, a3);
  }
  return result;
}

unsigned int *llvm::Value::getMetadata(unsigned int *result, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  if ((*((unsigned char *)result + 23) & 0x20) != 0)
  {
    uint64_t v5 = result;
    int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)result, a2, a3);
    return llvm::Value::getMetadata(v5, MDKindID, a4);
  }
  return result;
}

void llvm::Value::getAllMetadata(unsigned char *a1, uint64_t a2)
{
  if ((a1[23] & 0x20) != 0)
  {
    uint64_t v3 = sub_1CC6032E4((uint64_t *)(***(void ***)a1 + 2480), (uint64_t)a1) + 1;
    llvm::MDAttachments::getAll(v3, a2);
  }
}

uint64_t *sub_1CC6032E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((_DWORD *)a1 + 4);
  if (!v3) {
    return (uint64_t *)(v2 + 40 * v3);
  }
  unsigned int v4 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t result = (uint64_t *)(v2 + 40 * v4);
  uint64_t v6 = *result;
  if (*result != a2)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & (v3 - 1);
      uint64_t result = (uint64_t *)(v2 + 40 * v4);
      uint64_t v6 = *result;
      if (*result == a2) {
        return result;
      }
    }
    return (uint64_t *)(v2 + 40 * v3);
  }
  return result;
}

void llvm::Value::setMetadata(uint64_t ***this, int a2, llvm::MDNode *a3)
{
  if (!a3)
  {
    if ((*((unsigned char *)this + 23) & 0x20) == 0) {
      return;
    }
    uint64_t v5 = ***this;
    uint64_t v34 = (llvm::Value *)this;
    int v6 = *(_DWORD *)(v5 + 2496);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 2480);
      int v8 = v6 - 1;
      unsigned int v9 = v8 & ((this >> 4) ^ (this >> 9));
      int v10 = (llvm::Value **)(v7 + 40 * v9);
      uint64_t v11 = *v10;
      if (*v10 == (llvm::Value *)this) {
        goto LABEL_5;
      }
      BOOL v22 = 0;
      int v23 = 1;
      while (v11 != (llvm::Value *)-4096)
      {
        if (v22) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v11 == (llvm::Value *)-8192;
        }
        if (v24) {
          BOOL v22 = v10;
        }
        unsigned int v25 = v9 + v23++;
        unsigned int v9 = v25 & v8;
        int v10 = (llvm::Value **)(v7 + 40 * v9);
        uint64_t v11 = *v10;
        if (*v10 == (llvm::Value *)this) {
          goto LABEL_5;
        }
      }
      if (v22) {
        uint64_t v30 = v22;
      }
      else {
        uint64_t v30 = v10;
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    int v10 = (llvm::Value **)sub_1CC609054(v5 + 2480, (uint64_t)&v34, (uint64_t *)&v34, v30);
    uint64_t v31 = v34;
    v10[3] = 0;
    v10[4] = 0;
    unsigned int *v10 = v31;
    v10[1] = (llvm::Value *)(v10 + 3);
    v10[2] = (llvm::Value *)0x100000000;
LABEL_5:
    llvm::MDAttachments::erase((llvm::MDAttachments *)(v10 + 1), a2);
    if (!*((_DWORD *)v10 + 4))
    {
      int v12 = (int32x2_t *)(***this + 2480);
      uint64_t v34 = (llvm::Value *)this;
      sub_1CC6035CC(v12, &v34);
      *((_DWORD *)this + 5) &= ~0x20000000u;
    }
    return;
  }
  uint64_t v14 = ***this;
  uint64_t v34 = (llvm::Value *)this;
  int v15 = *(_DWORD *)(v14 + 2496);
  if (!v15)
  {
    uint64_t v32 = 0;
LABEL_39:
    uint64_t v19 = (llvm::Value **)sub_1CC609054(v14 + 2480, (uint64_t)&v34, (uint64_t *)&v34, v32);
    uint64_t v33 = v34;
    v19[3] = 0;
    void v19[4] = 0;
    llvm::Value *v19 = v33;
    v19[1] = (llvm::Value *)(v19 + 3);
    v19[2] = (llvm::Value *)0x100000000;
    goto LABEL_9;
  }
  uint64_t v16 = *(void *)(v14 + 2480);
  int v17 = v15 - 1;
  unsigned int v18 = v17 & ((this >> 4) ^ (this >> 9));
  uint64_t v19 = (llvm::Value **)(v16 + 40 * v18);
  uint64_t v20 = *v19;
  if (*v19 != (llvm::Value *)this)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v20 != (llvm::Value *)-4096)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v20 == (llvm::Value *)-8192;
      }
      if (v28) {
        uint64_t v26 = v19;
      }
      unsigned int v29 = v18 + v27++;
      unsigned int v18 = v29 & v17;
      uint64_t v19 = (llvm::Value **)(v16 + 40 * v18);
      uint64_t v20 = *v19;
      if (*v19 == (llvm::Value *)this) {
        goto LABEL_9;
      }
    }
    if (v26) {
      uint64_t v32 = v26;
    }
    else {
      uint64_t v32 = v19;
    }
    goto LABEL_39;
  }
LABEL_9:
  uint64_t v21 = (uint64_t)(v19 + 1);
  if (!*((_DWORD *)v19 + 4)) {
    *((_DWORD *)this + 5) |= 0x20000000u;
  }
  llvm::MDAttachments::erase((llvm::MDAttachments *)(v19 + 1), a2);
  LODWORD(v34) = a2;
  unsigned int v35 = (unsigned __int8 *)a3;
  llvm::MetadataTracking::track((uint64_t)&v35, (unsigned __int8 *)a3, 2);
  sub_1CC602D78(v21, (unint64_t)&v34);
  if (v35) {
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  }
}

uint64_t sub_1CC6035CC(int32x2_t *a1, void *a2)
{
  __int32 v2 = a1[2].i32[0];
  if (!v2) {
    return 0;
  }
  __int32 v4 = v2 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & v4;
  uint64_t v6 = *(void *)a1 + 40 * v5;
  uint64_t v7 = *(void *)v6;
  if (*a2 != *(void *)v6)
  {
    int v11 = 1;
    while (v7 != -4096)
    {
      unsigned int v12 = v5 + v11++;
      unsigned int v5 = v12 & v4;
      uint64_t v6 = *(void *)a1 + 40 * v5;
      uint64_t v7 = *(void *)v6;
      if (*a2 == *(void *)v6) {
        goto LABEL_3;
      }
    }
    return 0;
  }
LABEL_3:
  int v8 = *(char **)(v6 + 8);
  uint64_t v9 = *(unsigned int *)(v6 + 16);
  if (!v9) {
    goto LABEL_4;
  }
  int v13 = v8 - 8;
  uint64_t v14 = 16 * v9;
  do
  {
    int v15 = *(unsigned __int8 **)&v13[v14];
    if (!v15) {
      goto LABEL_16;
    }
    int v16 = *v15;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) >= 0xFFFFFFFE) {
        uint64_t v17 = *(void *)&v13[v14];
      }
      else {
        uint64_t v17 = 0;
      }
      if ((v16 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v18 = v17 + 8;
LABEL_23:
        uint64_t v20 = &v13[v14];
        sub_1CC5FA668(v18 + 16, &v20);
        goto LABEL_16;
      }
      if (v16 == 3) {
        *((void *)v15 + 1) = 0;
      }
    }
    else if ((v15[1] & 0x7F) == 2 || *((_DWORD *)v15 + 3))
    {
      uint64_t v19 = *((void *)v15 + 2);
      if ((v19 & 4) != 0)
      {
        unint64_t v18 = v19 & 0xFFFFFFFFFFFFFFF8;
        if (v18) {
          goto LABEL_23;
        }
      }
    }
LABEL_16:
    v14 -= 16;
  }
  while (v14);
  int v8 = *(char **)(v6 + 8);
LABEL_4:
  if (v8 != (char *)(v6 + 24)) {
    free(v8);
  }
  *(void *)uint64_t v6 = -8192;
  a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  return 1;
}

void llvm::Value::addMetadata(llvm::Value *this, int a2, llvm::MDNode *a3)
{
  int v5 = *((_DWORD *)this + 5);
  if ((v5 & 0x20000000) == 0) {
    *((_DWORD *)this + 5) = v5 | 0x20000000;
  }
  uint64_t v6 = ***(void ***)this + 2480;
  int v8 = this;
  uint64_t v7 = sub_1CC608F78(v6, (uint64_t *)&v8) + 1;
  int v9 = a2;
  int v10 = (unsigned __int8 *)a3;
  llvm::MetadataTracking::track((uint64_t)&v10, (unsigned __int8 *)a3, 2);
  sub_1CC602D78((uint64_t)v7, (unint64_t)&v9);
  if (v10) {
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  }
}

void llvm::Value::addMetadata(uint64_t ***a1, unsigned __int8 *a2, size_t a3, llvm::MDNode *a4)
{
  int MDKindID = llvm::LLVMContext::getMDKindID(**a1, a2, a3);

  llvm::Value::addMetadata((llvm::Value *)a1, MDKindID, a4);
}

BOOL llvm::Value::eraseMetadata(llvm::Value *this, int a2)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = ***(void ***)this + 2480;
  int v8 = this;
  int v5 = sub_1CC608F78(v3, (uint64_t *)&v8);
  BOOL v7 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v5 + 1), a2);
  if (!*((_DWORD *)v5 + 4)) {
    llvm::Value::clearMetadata((uint64_t)this);
  }
  return v7;
}

uint64_t llvm::Value::clearMetadata(uint64_t this)
{
  if ((*(unsigned char *)(this + 23) & 0x20) != 0)
  {
    uint64_t v1 = this;
    __int32 v2 = (int32x2_t *)(***(void ***)this + 2480);
    uint64_t v3 = v1;
    this = sub_1CC6035CC(v2, &v3);
    *(_DWORD *)(v1 + 20) &= ~0x20000000u;
  }
  return this;
}

BOOL llvm::Value::eraseMetadata(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)a1, a2, a3);
  if ((*(unsigned char *)(a1 + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v6 = ***(void ***)a1 + 2480;
  uint64_t v11 = a1;
  int v7 = MDKindID;
  int v8 = sub_1CC608F78(v6, &v11);
  BOOL v10 = llvm::MDAttachments::erase((llvm::MDAttachments *)(v8 + 1), v7);
  if (!*((_DWORD *)v8 + 4) && (*(unsigned char *)(a1 + 23) & 0x20) != 0)
  {
    int v9 = (int32x2_t *)(***(void ***)a1 + 2480);
    uint64_t v11 = a1;
    sub_1CC6035CC(v9, &v11);
    *(_DWORD *)(a1 + 20) &= ~0x20000000u;
  }
  return v10;
}

void llvm::Instruction::setMetadata(uint64_t a1, unsigned __int8 *a2, size_t a3, llvm::MDNode *a4)
{
  if (a4 || *(void *)(a1 + 48) || (*(unsigned char *)(a1 + 23) & 0x20) != 0)
  {
    int MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)a1, a2, a3);
    llvm::Instruction::setMetadata((llvm::Instruction *)a1, MDKindID, a4);
  }
}

void llvm::Instruction::setMetadata(llvm::Instruction *this, int a2, llvm::MDNode *a3)
{
  if (a3)
  {
    if (!a2)
    {
      int v8 = (unsigned __int8 *)a3;
      llvm::MetadataTracking::track((uint64_t)&v8, (unsigned __int8 *)a3, 2);
      goto LABEL_11;
    }
LABEL_7:
    llvm::Value::setMetadata((uint64_t ***)this, a2, a3);
    return;
  }
  if (!*((void *)this + 6) && (*((unsigned char *)this + 23) & 0x20) == 0) {
    return;
  }
  if (a2) {
    goto LABEL_7;
  }
  int v8 = 0;
LABEL_11:
  sub_1CB8F69CC((unsigned __int8 **)this + 6, &v8);
  if (v8)
  {
    int v4 = *v8;
    if ((v4 - 4) > 0x1E)
    {
      if ((v4 - 3) >= 0xFFFFFFFE) {
        int v5 = v8;
      }
      else {
        int v5 = 0;
      }
      if ((v4 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v6 = (unint64_t)(v5 + 8);
LABEL_21:
        int v9 = &v8;
        sub_1CC5FA668(v6 + 16, &v9);
        return;
      }
      if (v4 == 3) {
        *((void *)v8 + 1) = 0;
      }
    }
    else if ((v8[1] & 0x7F) == 2 || *((_DWORD *)v8 + 3))
    {
      uint64_t v7 = *((void *)v8 + 2);
      if ((v7 & 4) != 0)
      {
        unint64_t v6 = v7 & 0xFFFFFFFFFFFFFFF8;
        if (v6) {
          goto LABEL_21;
        }
      }
    }
  }
}

uint64_t llvm::Instruction::getMetadataImpl(uint64_t ***a1, unsigned __int8 *a2, size_t a3)
{
  int MDKindID = llvm::LLVMContext::getMDKindID(**a1, a2, a3);
  if (MDKindID)
  {
    if ((*((unsigned char *)a1 + 23) & 0x20) == 0) {
      return 0;
    }
    int v5 = MDKindID;
    uint64_t v6 = ***a1;
    int v23 = a1;
    int v7 = *(_DWORD *)(v6 + 2496);
    if (v7)
    {
      uint64_t v8 = *(void *)(v6 + 2480);
      int v9 = v7 - 1;
      unsigned int v10 = v9 & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v11 = (uint64_t ****)(v8 + 40 * v10);
      unsigned int v12 = *v11;
      if (*v11 == a1) {
        goto LABEL_5;
      }
      uint64_t v17 = 0;
      int v18 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        if (v17) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v12 == (uint64_t ***)-8192;
        }
        if (v19) {
          uint64_t v17 = v11;
        }
        unsigned int v20 = v10 + v18++;
        unsigned int v10 = v20 & v9;
        uint64_t v11 = (uint64_t ****)(v8 + 40 * v10);
        unsigned int v12 = *v11;
        if (*v11 == a1) {
          goto LABEL_5;
        }
      }
      if (v17) {
        uint64_t v21 = v17;
      }
      else {
        uint64_t v21 = v11;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v11 = (uint64_t ****)sub_1CC609054(v6 + 2480, (uint64_t)&v23, (uint64_t *)&v23, v21);
    uint64_t v22 = (uint64_t)v23;
    v11[3] = 0;
    v11[4] = 0;
    *uint64_t v11 = (uint64_t ***)v22;
    v11[1] = (uint64_t ***)(v11 + 3);
    v11[2] = (uint64_t ***)0x100000000;
LABEL_5:
    uint64_t v13 = *((unsigned int *)v11 + 4);
    if (v13)
    {
      uint64_t v14 = (uint64_t)(v11[1] + 1);
      uint64_t v15 = 16 * v13;
      while (*(_DWORD *)(v14 - 8) != v5)
      {
        uint64_t result = 0;
        v14 += 16;
        v15 -= 16;
        if (!v15) {
          return result;
        }
      }
      return *(void *)v14;
    }
    return 0;
  }
  uint64_t v14 = (uint64_t)(a1 + 6);
  return *(void *)v14;
}

uint64_t llvm::Instruction::getMetadataImpl(llvm::Instruction *this, int a2)
{
  if (a2)
  {
    if ((*((unsigned char *)this + 23) & 0x20) == 0) {
      return 0;
    }
    uint64_t v3 = ***(void ***)this;
    unsigned int v20 = this;
    int v4 = *(_DWORD *)(v3 + 2496);
    if (v4)
    {
      uint64_t v5 = *(void *)(v3 + 2480);
      int v6 = v4 - 1;
      unsigned int v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v8 = (llvm::Instruction **)(v5 + 40 * v7);
      int v9 = *v8;
      if (*v8 == this) {
        goto LABEL_5;
      }
      uint64_t v14 = 0;
      int v15 = 1;
      while (v9 != (llvm::Instruction *)-4096)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v9 == (llvm::Instruction *)-8192;
        }
        if (v16) {
          uint64_t v14 = v8;
        }
        unsigned int v17 = v7 + v15++;
        unsigned int v7 = v17 & v6;
        uint64_t v8 = (llvm::Instruction **)(v5 + 40 * (v17 & v6));
        int v9 = *v8;
        if (*v8 == this) {
          goto LABEL_5;
        }
      }
      if (v14) {
        int v18 = v14;
      }
      else {
        int v18 = v8;
      }
    }
    else
    {
      int v18 = 0;
    }
    uint64_t v8 = (llvm::Instruction **)sub_1CC609054(v3 + 2480, (uint64_t)&v20, (uint64_t *)&v20, v18);
    BOOL v19 = v20;
    v8[3] = 0;
    void v8[4] = 0;
    unsigned __int8 *v8 = v19;
    v8[1] = (llvm::Instruction *)(v8 + 3);
    void v8[2] = (llvm::Instruction *)0x100000000;
LABEL_5:
    uint64_t v10 = *((unsigned int *)v8 + 4);
    if (v10)
    {
      uint64_t v11 = (char *)v8[1] + 8;
      uint64_t v12 = 16 * v10;
      while (*((_DWORD *)v11 - 2) != a2)
      {
        uint64_t result = 0;
        v11 += 16;
        v12 -= 16;
        if (!v12) {
          return result;
        }
      }
      return *(void *)v11;
    }
    return 0;
  }
  uint64_t v11 = (char *)this + 48;
  return *(void *)v11;
}

void llvm::Instruction::dropUnknownNonDebugMetadata(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(a1 + 23) & 0x20) == 0) {
    return;
  }
  if (!a3)
  {
    int v4 = (int32x2_t *)(***(void ***)a1 + 2480);
    unsigned int v41 = (void *)a1;
    sub_1CC6035CC(v4, &v41);
    *(_DWORD *)(a1 + 20) &= ~0x20000000u;
    return;
  }
  unsigned int v41 = v43;
  uint64_t v42 = 0x400000000;
  unsigned int v45 = 0;
  uint64_t v46 = 0;
  uint64_t v44 = &v45;
  uint64_t v6 = 4 * a3;
  do
  {
    sub_1CB918828((uint64_t)&v41, a2++);
    v6 -= 4;
  }
  while (v6);
  uint64_t v7 = ***(void ***)a1 + 2480;
  unsigned int v40 = (unsigned __int8 **)a1;
  uint64_t v8 = sub_1CC608F78(v7, (uint64_t *)&v40);
  uint64_t v9 = v8[1];
  uint64_t v10 = *((unsigned int *)v8 + 4);
  if (!v10)
  {
    unsigned int v17 = (unsigned int *)v8[1];
    goto LABEL_25;
  }
  uint64_t v11 = (unsigned int *)(v9 + 16 * v10);
  uint64_t v12 = (unsigned int *)v8[1];
  while (!v46)
  {
    if (!v42) {
      goto LABEL_23;
    }
    unsigned int v20 = v41;
    uint64_t v21 = 4 * v42;
    while (*v20 != *v12)
    {
      ++v20;
      v21 -= 4;
      if (!v21) {
        goto LABEL_23;
      }
    }
    if (!v21) {
      goto LABEL_23;
    }
LABEL_17:
    v12 += 4;
    if (v12 == v11)
    {
      unsigned int v17 = (unsigned int *)(v9 + 16 * v10);
      goto LABEL_25;
    }
  }
  if (v45)
  {
    unsigned int v13 = *v12;
    uint64_t v14 = v45;
    do
    {
      unsigned int v15 = *((_DWORD *)v14 + 7);
      if (v13 >= v15)
      {
        if (v15 >= v13) {
          goto LABEL_17;
        }
        ++v14;
      }
      uint64_t v14 = (void *)*v14;
    }
    while (v14);
  }
LABEL_23:
  BOOL v16 = v12 + 4;
  if (v12 + 4 == v11)
  {
    unsigned int v17 = v12;
    goto LABEL_25;
  }
  unsigned int v17 = v12;
  do
  {
    uint64_t v22 = (unsigned __int8 **)v12;
    uint64_t v12 = v16;
    if (v46)
    {
      uint64_t v26 = v16;
      unsigned int v37 = v11;
      uint64_t v38 = v8;
      int v27 = v45;
      if (v45)
      {
        unsigned int v24 = *v16;
        do
        {
          unsigned int v28 = *((_DWORD *)v27 + 7);
          if (v24 >= v28)
          {
            if (v28 >= v24) {
              goto LABEL_69;
            }
            ++v27;
          }
          int v27 = (void *)*v27;
        }
        while (v27);
      }
    }
    else
    {
      if (!v42) {
        goto LABEL_38;
      }
      int v23 = v41;
      unsigned int v24 = *v12;
      uint64_t v25 = 4 * v42;
      while (*v23 != v24)
      {
        ++v23;
        v25 -= 4;
        if (!v25) {
          goto LABEL_38;
        }
      }
      uint64_t v26 = v12;
      unsigned int v37 = v11;
      uint64_t v38 = v8;
      if (v25)
      {
LABEL_69:
        int v36 = (unsigned __int8 **)(v17 + 2);
        *unsigned int v17 = v24;
        v17 += 4;
        sub_1CB8F69CC(v36, v22 + 3);
      }
    }
    uint64_t v11 = v37;
    uint64_t v8 = v38;
    uint64_t v12 = v26;
LABEL_38:
    BOOL v16 = v12 + 4;
  }
  while (v12 + 4 != v11);
  uint64_t v9 = v8[1];
  LODWORD(v10) = *((_DWORD *)v8 + 4);
LABEL_25:
  if ((unsigned int *)(v9 + 16 * v10) != v17)
  {
    unsigned int v39 = v8;
    unsigned int v29 = (unsigned __int8 **)(v9 + 16 * v10 - 8);
    while (1)
    {
      uint64_t v30 = *v29;
      if (*v29)
      {
        int v32 = *v30;
        if ((v32 - 4) > 0x1E)
        {
          if ((v32 - 3) >= 0xFFFFFFFE) {
            unsigned int v35 = *v29;
          }
          else {
            unsigned int v35 = 0;
          }
          if ((v32 - 3) < 0xFFFFFFFE)
          {
            if (v32 == 3) {
              *((void *)v30 + 1) = 0;
            }
            goto LABEL_49;
          }
          unint64_t v34 = (unint64_t)(v35 + 8);
        }
        else
        {
          if ((v30[1] & 0x7F) != 2 && !*((_DWORD *)v30 + 3)) {
            goto LABEL_49;
          }
          uint64_t v33 = *((void *)v30 + 2);
          if ((v33 & 4) == 0) {
            goto LABEL_49;
          }
          unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
          if (!v34) {
            goto LABEL_49;
          }
        }
        unsigned int v40 = v29;
        sub_1CC5FA668(v34 + 16, &v40);
      }
LABEL_49:
      uint64_t v31 = v29 - 1;
      v29 -= 2;
      if (v31 == (unsigned __int8 **)v17)
      {
        uint64_t v8 = v39;
        uint64_t v9 = v39[1];
        break;
      }
    }
  }
  unint64_t v18 = ((unint64_t)v17 - v9) >> 4;
  *((_DWORD *)v8 + 4) = v18;
  if (!v18 && (*(unsigned char *)(a1 + 23) & 0x20) != 0)
  {
    BOOL v19 = (int32x2_t *)(***(void ***)a1 + 2480);
    unsigned int v40 = (unsigned __int8 **)a1;
    sub_1CC6035CC(v19, &v40);
    *(_DWORD *)(a1 + 20) &= ~0x20000000u;
  }
  sub_1CB833A08((uint64_t)&v44, v45);
  if (v41 != v43) {
    free(v41);
  }
}

uint64_t ***llvm::Instruction::getAAMetadata@<X0>(uint64_t ***this@<X0>, void *a2@<X8>)
{
  __int32 v2 = this;
  uint64_t v4 = 0;
  a2[2] = 0;
  a2[3] = 0;
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_2;
  }
  uint64_t v8 = ***this;
  int v68 = this;
  int v9 = *(_DWORD *)(v8 + 2496);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 2480);
    int v11 = v9 - 1;
    unsigned int v12 = v11 & ((this >> 4) ^ (this >> 9));
    this = (uint64_t ***)(v10 + 40 * v12);
    unsigned int v13 = *this;
    if (*this == (uint64_t **)v2) {
      goto LABEL_11;
    }
    uint64_t v44 = 0;
    int v45 = 1;
    while (v13 != (uint64_t **)-4096)
    {
      if (v44) {
        BOOL v46 = 0;
      }
      else {
        BOOL v46 = v13 == (uint64_t **)-8192;
      }
      if (v46) {
        uint64_t v44 = this;
      }
      unsigned int v47 = v12 + v45++;
      unsigned int v12 = v47 & v11;
      this = (uint64_t ***)(v10 + 40 * v12);
      unsigned int v13 = *this;
      if (*this == (uint64_t **)v2) {
        goto LABEL_11;
      }
    }
    if (v44) {
      uint64_t v60 = v44;
    }
    else {
      uint64_t v60 = this;
    }
  }
  else
  {
    uint64_t v60 = 0;
  }
  this = (uint64_t ***)sub_1CC609054(v8 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v60);
  uint64_t v61 = (uint64_t **)v68;
  this[3] = 0;
  this[4] = 0;
  *this = v61;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_11:
  uint64_t v14 = *((unsigned int *)this + 4);
  if (v14)
  {
    unsigned int v15 = this[1] + 1;
    uint64_t v16 = 16 * v14;
    while (*((_DWORD *)v15 - 2) != 1)
    {
      uint64_t v4 = 0;
      v15 += 2;
      v16 -= 16;
      if (!v16) {
        goto LABEL_2;
      }
    }
    uint64_t v4 = *v15;
  }
  else
  {
    uint64_t v4 = 0;
  }
LABEL_2:
  *a2 = v4;
  if ((*((unsigned char *)v2 + 23) & 0x20) == 0)
  {
LABEL_3:
    uint64_t v5 = 0;
    goto LABEL_4;
  }
  uint64_t v17 = ***v2;
  int v68 = v2;
  int v18 = *(_DWORD *)(v17 + 2496);
  if (v18)
  {
    uint64_t v19 = *(void *)(v17 + 2480);
    int v20 = v18 - 1;
    unsigned int v21 = v20 & ((v2 >> 4) ^ (v2 >> 9));
    this = (uint64_t ***)(v19 + 40 * v21);
    uint64_t v22 = *this;
    if (*this == (uint64_t **)v2) {
      goto LABEL_18;
    }
    uint64_t v48 = 0;
    int v49 = 1;
    while (v22 != (uint64_t **)-4096)
    {
      if (v48) {
        BOOL v50 = 0;
      }
      else {
        BOOL v50 = v22 == (uint64_t **)-8192;
      }
      if (v50) {
        uint64_t v48 = this;
      }
      unsigned int v51 = v21 + v49++;
      unsigned int v21 = v51 & v20;
      this = (uint64_t ***)(v19 + 40 * v21);
      uint64_t v22 = *this;
      if (*this == (uint64_t **)v2) {
        goto LABEL_18;
      }
    }
    if (v48) {
      uint64_t v62 = v48;
    }
    else {
      uint64_t v62 = this;
    }
  }
  else
  {
    uint64_t v62 = 0;
  }
  this = (uint64_t ***)sub_1CC609054(v17 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v62);
  int v63 = (uint64_t **)v68;
  this[3] = 0;
  this[4] = 0;
  *this = v63;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_18:
  uint64_t v23 = *((unsigned int *)this + 4);
  if (!v23) {
    goto LABEL_3;
  }
  unsigned int v24 = this[1] + 1;
  uint64_t v25 = 16 * v23;
  while (*((_DWORD *)v24 - 2) != 5)
  {
    uint64_t v5 = 0;
    v24 += 2;
    v25 -= 16;
    if (!v25) {
      goto LABEL_4;
    }
  }
  uint64_t v5 = *v24;
LABEL_4:
  a2[1] = v5;
  if ((*((unsigned char *)v2 + 23) & 0x20) == 0)
  {
LABEL_5:
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v26 = ***v2;
  int v68 = v2;
  int v27 = *(_DWORD *)(v26 + 2496);
  if (v27)
  {
    uint64_t v28 = *(void *)(v26 + 2480);
    int v29 = v27 - 1;
    unsigned int v30 = v29 & ((v2 >> 4) ^ (v2 >> 9));
    this = (uint64_t ***)(v28 + 40 * v30);
    uint64_t v31 = *this;
    if (*this == (uint64_t **)v2) {
      goto LABEL_25;
    }
    uint64_t v52 = 0;
    int v53 = 1;
    while (v31 != (uint64_t **)-4096)
    {
      if (v52) {
        BOOL v54 = 0;
      }
      else {
        BOOL v54 = v31 == (uint64_t **)-8192;
      }
      if (v54) {
        uint64_t v52 = this;
      }
      unsigned int v55 = v30 + v53++;
      unsigned int v30 = v55 & v29;
      this = (uint64_t ***)(v28 + 40 * v30);
      uint64_t v31 = *this;
      if (*this == (uint64_t **)v2) {
        goto LABEL_25;
      }
    }
    if (v52) {
      uint64_t v64 = v52;
    }
    else {
      uint64_t v64 = this;
    }
  }
  else
  {
    uint64_t v64 = 0;
  }
  this = (uint64_t ***)sub_1CC609054(v26 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v64);
  int v65 = (uint64_t **)v68;
  this[3] = 0;
  this[4] = 0;
  *this = v65;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_25:
  uint64_t v32 = *((unsigned int *)this + 4);
  if (!v32) {
    goto LABEL_5;
  }
  uint64_t v33 = this[1] + 1;
  uint64_t v34 = 16 * v32;
  while (*((_DWORD *)v33 - 2) != 7)
  {
    uint64_t v6 = 0;
    v33 += 2;
    v34 -= 16;
    if (!v34) {
      goto LABEL_6;
    }
  }
  uint64_t v6 = *v33;
LABEL_6:
  a2[2] = v6;
  if ((*((unsigned char *)v2 + 23) & 0x20) == 0)
  {
LABEL_7:
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v35 = ***v2;
  int v68 = v2;
  int v36 = *(_DWORD *)(v35 + 2496);
  if (v36)
  {
    uint64_t v37 = *(void *)(v35 + 2480);
    int v38 = v36 - 1;
    unsigned int v39 = v38 & ((v2 >> 4) ^ (v2 >> 9));
    this = (uint64_t ***)(v37 + 40 * v39);
    unsigned int v40 = *this;
    if (*this == (uint64_t **)v2) {
      goto LABEL_32;
    }
    BOOL v56 = 0;
    int v57 = 1;
    while (v40 != (uint64_t **)-4096)
    {
      if (v56) {
        BOOL v58 = 0;
      }
      else {
        BOOL v58 = v40 == (uint64_t **)-8192;
      }
      if (v58) {
        BOOL v56 = this;
      }
      unsigned int v59 = v39 + v57++;
      unsigned int v39 = v59 & v38;
      this = (uint64_t ***)(v37 + 40 * v39);
      unsigned int v40 = *this;
      if (*this == (uint64_t **)v2) {
        goto LABEL_32;
      }
    }
    if (v56) {
      BOOL v66 = v56;
    }
    else {
      BOOL v66 = this;
    }
  }
  else
  {
    BOOL v66 = 0;
  }
  this = (uint64_t ***)sub_1CC609054(v35 + 2480, (uint64_t)&v68, (uint64_t *)&v68, v66);
  uint64_t v67 = (uint64_t **)v68;
  this[3] = 0;
  this[4] = 0;
  *this = v67;
  this[1] = (uint64_t **)(this + 3);
  this[2] = (uint64_t **)0x100000000;
LABEL_32:
  uint64_t v41 = *((unsigned int *)this + 4);
  if (!v41) {
    goto LABEL_7;
  }
  uint64_t v42 = this[1] + 1;
  uint64_t v43 = 16 * v41;
  while (*((_DWORD *)v42 - 2) != 8)
  {
    uint64_t v7 = 0;
    v42 += 2;
    v43 -= 16;
    if (!v43) {
      goto LABEL_8;
    }
  }
  uint64_t v7 = *v42;
LABEL_8:
  a2[3] = v7;
  return this;
}

void llvm::Instruction::setAAMetadata(uint64_t ***this, llvm::MDNode **a2)
{
  if (*a2 || this[6] || (*((unsigned char *)this + 23) & 0x20) != 0) {
    llvm::Value::setMetadata(this, 1, *a2);
  }
  uint64_t v4 = a2[1];
  if (v4 || this[6] || (*((unsigned char *)this + 23) & 0x20) != 0) {
    llvm::Value::setMetadata(this, 5, v4);
  }
  uint64_t v5 = a2[2];
  if (v5 || this[6] || (*((unsigned char *)this + 23) & 0x20) != 0) {
    llvm::Value::setMetadata(this, 7, v5);
  }
  uint64_t v6 = a2[3];
  if (v6 || this[6] || (*((unsigned char *)this + 23) & 0x20) != 0)
  {
    llvm::Value::setMetadata(this, 8, v6);
  }
}

void llvm::Instruction::getAllMetadataImpl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    if (!*(_DWORD *)(a2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v3 = *(void **)a2;
    *uint64_t v3 = 0;
    v3[1] = v2;
    ++*(_DWORD *)(a2 + 8);
  }

  llvm::Value::getAllMetadata((unsigned char *)a1, a2);
}

uint64_t llvm::Instruction::extractProfMetadata(llvm::Instruction *this, unint64_t *a2, unint64_t *a3)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v6 = ***(void ***)this;
  uint64_t v34 = this;
  int v7 = *(_DWORD *)(v6 + 2496);
  if (!v7)
  {
    uint64_t v32 = 0;
LABEL_45:
    int v11 = (llvm::Instruction **)sub_1CC609054(v6 + 2480, (uint64_t)&v34, (uint64_t *)&v34, v32);
    uint64_t v33 = v34;
    v11[3] = 0;
    v11[4] = 0;
    *int v11 = v33;
    v11[1] = (llvm::Instruction *)(v11 + 3);
    v11[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(v6 + 2480);
  int v9 = v7 - 1;
  unsigned int v10 = (v7 - 1) & ((this >> 4) ^ (this >> 9));
  int v11 = (llvm::Instruction **)(v8 + 40 * v10);
  unsigned int v12 = *v11;
  if (*v11 != this)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v12 != (llvm::Instruction *)-4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v12 == (llvm::Instruction *)-8192;
      }
      if (v18) {
        uint64_t v16 = v11;
      }
      unsigned int v19 = v10 + v17++;
      unsigned int v10 = v19 & v9;
      int v11 = (llvm::Instruction **)(v8 + 40 * (v19 & v9));
      unsigned int v12 = *v11;
      if (*v11 == this) {
        goto LABEL_6;
      }
    }
    if (v16) {
      uint64_t v32 = v16;
    }
    else {
      uint64_t v32 = v11;
    }
    goto LABEL_45;
  }
LABEL_6:
  uint64_t v13 = *((unsigned int *)v11 + 4);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = (void *)((char *)v11[1] + 8);
  uint64_t v15 = 16 * v13;
  while (*((_DWORD *)v14 - 2) != 2)
  {
    uint64_t result = 0;
    v14 += 2;
    v15 -= 16;
    if (!v15) {
      return result;
    }
  }
  uint64_t v20 = *v14;
  if (!v20) {
    return 0;
  }
  if (*(_DWORD *)(v20 + 8) != 3) {
    return 0;
  }
  uint64_t v21 = *(void *)(v20 - 24);
  if (*(unsigned char *)v21) {
    return 0;
  }
  uint64_t v22 = *(void **)(v21 + 8);
  if (*v22 != 14) {
    return 0;
  }
  uint64_t v23 = v22[3];
  uint64_t v24 = *(void *)((char *)v22 + 30);
  if (v23 != 0x775F68636E617262 || v24 != 0x737468676965775FLL) {
    return 0;
  }
  uint64_t v26 = *(void *)(v20 - 16);
  if (*(unsigned char *)v26 == 1)
  {
    uint64_t v27 = *(void *)(v26 + 128);
    if (*(unsigned char *)(v27 + 16) != 16) {
      uint64_t v27 = 0;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  uint64_t v28 = *(void *)(v20 - 8);
  if (*(unsigned char *)v28 != 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v29 = *(void *)(v28 + 128);
  if (*(unsigned char *)(v29 + 16) != 16) {
    uint64_t v29 = 0;
  }
  if (v27 && v29)
  {
    unsigned int v30 = (void *)(v27 + 24);
    if (*(_DWORD *)(v27 + 32) >= 0x41u) {
      unsigned int v30 = (void *)*v30;
    }
    *a2 = *v30;
    uint64_t v31 = (void *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u) {
      uint64_t v31 = (void *)*v31;
    }
    *a3 = *v31;
    return 1;
  }
  return result;
}

uint64_t llvm::Instruction::extractProfTotalWeight(llvm::Instruction *this, unint64_t *a2)
{
  *a2 = 0;
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v3 = ***(void ***)this;
  uint64_t v35 = this;
  int v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    uint64_t v31 = 0;
LABEL_39:
    uint64_t v8 = (llvm::Instruction **)sub_1CC609054(v3 + 2480, (uint64_t)&v35, (uint64_t *)&v35, v31);
    uint64_t v32 = v35;
    v8[3] = 0;
    void v8[4] = 0;
    void *v8 = v32;
    v8[1] = (llvm::Instruction *)(v8 + 3);
    void v8[2] = (llvm::Instruction *)0x100000000;
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(v3 + 2480);
  int v6 = v4 - 1;
  unsigned int v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v8 = (llvm::Instruction **)(v5 + 40 * v7);
  int v9 = *v8;
  if (*v8 != this)
  {
    unsigned int v10 = 0;
    int v11 = 1;
    while (v9 != (llvm::Instruction *)-4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v9 == (llvm::Instruction *)-8192;
      }
      if (v12) {
        unsigned int v10 = v8;
      }
      unsigned int v13 = v7 + v11++;
      unsigned int v7 = v13 & v6;
      uint64_t v8 = (llvm::Instruction **)(v5 + 40 * (v13 & v6));
      int v9 = *v8;
      if (*v8 == this) {
        goto LABEL_12;
      }
    }
    if (v10) {
      uint64_t v31 = v10;
    }
    else {
      uint64_t v31 = v8;
    }
    goto LABEL_39;
  }
LABEL_12:
  uint64_t v14 = *((unsigned int *)v8 + 4);
  if (!v14) {
    return 0;
  }
  uint64_t v15 = (void *)((char *)v8[1] + 8);
  uint64_t v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 2)
  {
    uint64_t result = 0;
    v15 += 2;
    v16 -= 16;
    if (!v16) {
      return result;
    }
  }
  uint64_t v18 = *v15;
  if (!*v15) {
    return 0;
  }
  uint64_t v19 = v18 + 8;
  uint64_t v20 = *(unsigned int *)(v18 + 8);
  uint64_t v21 = (void *)(v18 - 8 * v20);
  if (*(unsigned char *)*v21) {
    return 0;
  }
  uint64_t v22 = *(void **)(*v21 + 8);
  if (*v22 != 2)
  {
    if (*v22 != 14) {
      return 0;
    }
    uint64_t v23 = v22[3];
    uint64_t v24 = *(void *)((char *)v22 + 30);
    if (v23 != 0x775F68636E617262 || v24 != 0x737468676965775FLL) {
      return 0;
    }
    *a2 = 0;
    if (v20 >= 2)
    {
      unint64_t v26 = 0;
      uint64_t v27 = -8 * v20;
      uint64_t result = 1;
      while (1)
      {
        uint64_t v28 = *(void *)(v19 + v27);
        if (*(unsigned char *)v28 != 1) {
          break;
        }
        uint64_t v29 = *(void *)(v28 + 128);
        if (*(unsigned char *)(v29 + 16) != 16) {
          break;
        }
        unsigned int v30 = (void *)(v29 + 24);
        if (*(_DWORD *)(v29 + 32) >= 0x41u) {
          unsigned int v30 = (void *)*v30;
        }
        v26 += *v30;
        *a2 = v26;
        v27 += 8;
        if (v27 == -8) {
          return result;
        }
      }
      return 0;
    }
    return 1;
  }
  uint64_t result = 0;
  if (v20 >= 4 && *((_WORD *)v22 + 12) == 20566)
  {
    if (*(unsigned char *)(*(void *)(v21[2] + 128) + 16) == 16) {
      uint64_t v33 = *(void *)(v21[2] + 128);
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = (void *)(v33 + 24);
    if (*(_DWORD *)(v33 + 32) >= 0x41u) {
      uint64_t v34 = (void *)*v34;
    }
    *a2 = *v34;
    return 1;
  }
  return result;
}

void llvm::GlobalObject::copyMetadata(llvm::GlobalObject *this, const llvm::GlobalObject *a2, unsigned int a3)
{
  v40[16] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = v40;
  int v38 = v40;
  uint64_t v39 = 0x800000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v38);
  int v6 = v38;
  if (!v39) {
    goto LABEL_2;
  }
  uint64_t v7 = 16 * v39;
  uint64_t v8 = (llvm::MDNode **)((char *)v38 + 8);
  do
  {
    if (!a3)
    {
      int v9 = *v8;
LABEL_8:
      llvm::Value::addMetadata(this, *((_DWORD *)v8 - 2), v9);
      goto LABEL_9;
    }
    uint64_t v31 = v8;
    uint64_t v32 = v7;
    unsigned int v30 = v5;
    int v10 = *((_DWORD *)v8 - 2);
    uint64_t v33 = (uint64_t)*v8;
    if (!v10)
    {
      if (*(unsigned char *)v33 == 24
        || (uint64_t v28 = (uint64_t *)(v33 - 8 * *(unsigned int *)(v33 + 8)), v33 = *v28, (v29 = v28[1]) == 0))
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 2;
      }
      else
      {
        uint64_t v15 = *(const void **)(v29 + 24);
        uint64_t v16 = (uint64_t)(*(void *)(v29 + 32) - (void)v15) >> 3;
        uint64_t v17 = v16 + 2;
        if ((unint64_t)(v16 + 2) >> 61) {
          abort();
        }
      }
      int64_t v18 = 8 * v17;
      uint64_t v19 = operator new(8 * v17);
      bzero(v19, v18);
      void *v19 = 35;
      v19[1] = a3;
      if (v16) {
        memmove(v19 + 2, v15, 8 * v16);
      }
      Impl = llvm::DIExpression::getImpl(**(void ***)this, v19, v18 >> 3, 0, 1);
      uint64_t v21 = llvm::DIGlobalVariableExpression::getImpl(**(void ***)this, v33, (uint64_t)Impl, 0, 1);
      operator delete(v19);
      int v9 = v21;
      goto LABEL_21;
    }
    if (v10 != 19)
    {
      int v9 = *v8;
LABEL_21:
      uint64_t v5 = v30;
      uint64_t v8 = v31;
      uint64_t v7 = v32;
      goto LABEL_8;
    }
    int v11 = (void *)(v33 - 8 * *(unsigned int *)(v33 + 8));
    uint64_t v12 = v11[1];
    uint64_t v13 = *(void *)(*v11 + 128);
    uint64_t v14 = *(llvm::ConstantInt ***)v13;
    unsigned int v35 = *(_DWORD *)(v13 + 32);
    if (v35 > 0x40) {
      operator new[]();
    }
    uint64_t v34 = *(void *)(v13 + 24);
    llvm::APInt::operator+=((uint64_t)&v34, a3);
    LODWORD(v37) = v35;
    uint64_t v36 = v34;
    unsigned int v35 = 0;
    uint64_t v23 = llvm::ConstantInt::get(v14, (llvm::Type *)&v36, v22);
    uint64_t v25 = llvm::ValueAsMetadata::get(v23, v24);
    if (v37 >= 0x41 && v36) {
      MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
    }
    if (v35 >= 0x41 && v34) {
      MEMORY[0x1D25D9CB0](v34, 0x1000C8000313F17);
    }
    uint64_t v26 = **(void **)this;
    uint64_t v36 = v25;
    uint64_t v37 = v12;
    uint64_t v27 = llvm::MDTuple::getImpl(v26, &v36, 2, 0, 1);
    llvm::Value::addMetadata(this, 19, v27);
    uint64_t v5 = v30;
    uint64_t v8 = v31;
    uint64_t v7 = v32;
LABEL_9:
    v8 += 2;
    v7 -= 16;
  }
  while (v7);
  int v6 = v38;
LABEL_2:
  if (v6 != v5) {
    free(v6);
  }
}

void llvm::Function::setSubprogram(uint64_t ***this, llvm::DISubprogram *a2)
{
}

uint64_t llvm::Function::getSubprogram(llvm::Function *this)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    return 0;
  }
  uint64_t v1 = ***(void ***)this;
  int64_t v18 = this;
  int v2 = *(_DWORD *)(v1 + 2496);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 2480);
    int v4 = v2 - 1;
    unsigned int v5 = (v2 - 1) & ((this >> 4) ^ (this >> 9));
    int v6 = (llvm::Function **)(v3 + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 == this) {
      goto LABEL_4;
    }
    uint64_t v12 = 0;
    int v13 = 1;
    while (v7 != (llvm::Function *)-4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v7 == (llvm::Function *)-8192;
      }
      if (v14) {
        uint64_t v12 = v6;
      }
      unsigned int v15 = v5 + v13++;
      unsigned int v5 = v15 & v4;
      int v6 = (llvm::Function **)(v3 + 40 * (v15 & v4));
      uint64_t v7 = *v6;
      if (*v6 == this) {
        goto LABEL_4;
      }
    }
    if (v12) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = v6;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  int v6 = (llvm::Function **)sub_1CC609054(v1 + 2480, (uint64_t)&v18, (uint64_t *)&v18, v16);
  uint64_t v17 = v18;
  void v6[3] = 0;
  void v6[4] = 0;
  *int v6 = v17;
  v6[1] = (llvm::Function *)(v6 + 3);
  v6[2] = (llvm::Function *)0x100000000;
LABEL_4:
  uint64_t v8 = *((unsigned int *)v6 + 4);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v6[1] + 8;
  uint64_t v10 = 16 * v8;
  uint64_t result = 0;
  while (*(_DWORD *)(v9 - 8))
  {
    v9 += 16;
    v10 -= 16;
    if (!v10) {
      return result;
    }
  }
  return *(void *)v9;
}

uint64_t llvm::Function::isDebugInfoForProfiling(llvm::Function *this)
{
  if ((*((unsigned char *)this + 23) & 0x20) == 0) {
    goto LABEL_9;
  }
  uint64_t v2 = ***(void ***)this;
  uint64_t v19 = this;
  int v3 = *(_DWORD *)(v2 + 2496);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 2480);
    int v5 = v3 - 1;
    unsigned int v6 = (v3 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v7 = (llvm::Function **)(v4 + 40 * v6);
    uint64_t v8 = *v7;
    if (*v7 == this) {
      goto LABEL_4;
    }
    int v13 = 0;
    int v14 = 1;
    while (v8 != (llvm::Function *)-4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v8 == (llvm::Function *)-8192;
      }
      if (v15) {
        int v13 = v7;
      }
      unsigned int v16 = v6 + v14++;
      unsigned int v6 = v16 & v5;
      uint64_t v7 = (llvm::Function **)(v4 + 40 * (v16 & v5));
      uint64_t v8 = *v7;
      if (*v7 == this) {
        goto LABEL_4;
      }
    }
    if (v13) {
      uint64_t v17 = v13;
    }
    else {
      uint64_t v17 = v7;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v7 = (llvm::Function **)sub_1CC609054(v2 + 2480, (uint64_t)&v19, (uint64_t *)&v19, v17);
  int64_t v18 = v19;
  void v7[3] = 0;
  uint64_t v7[4] = 0;
  *uint64_t v7 = v18;
  v7[1] = (llvm::Function *)(v7 + 3);
  void v7[2] = (llvm::Function *)0x100000000;
LABEL_4:
  uint64_t v1 = *((unsigned int *)v7 + 4);
  if (!v1)
  {
LABEL_9:
    LODWORD(v11) = 0;
    return v1 & v11;
  }
  uint64_t v9 = (void *)((char *)v7[1] + 8);
  uint64_t v10 = 16 * v1;
  while (*((_DWORD *)v9 - 2))
  {
    LODWORD(v11) = 0;
    v9 += 2;
    v10 -= 16;
    if (!v10) {
      return v1 & v11;
    }
  }
  uint64_t v11 = *v9;
  if (*v9)
  {
    uint64_t v11 = *(void *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 40);
    if (v11)
    {
      LODWORD(v1) = *(unsigned __int8 *)(v11 + 49) != 0;
      LODWORD(v11) = 1;
    }
  }
  return v1 & v11;
}

void llvm::GlobalVariable::getDebugInfo(unsigned int *a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = v9;
  uint64_t v8 = 0x100000000;
  llvm::Value::getMetadata(a1, 0, (uint64_t)&v7);
  int v3 = v7;
  if (v8)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    uint64_t v5 = 8 * v8;
    do
    {
      uint64_t v6 = v5;
      if (v4 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a2 + 8 * v4) = *v3;
      unsigned int v4 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v4;
      ++v3;
      v5 -= 8;
    }
    while (v6 != 8);
    int v3 = v7;
  }
  if (v3 != v9) {
    free(v3);
  }
}

uint64_t *sub_1CC60527C(uint64_t *result, void *a2)
{
  if ((*result & 4) != 0)
  {
    unint64_t v2 = *result & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      unsigned int v4 = result;
      uint64_t v5 = a2;
      unint64_t v6 = *result & 0xFFFFFFFFFFFFFFF8;
      if ((*(unsigned char *)(v2 + 16) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v2 + 24), 8);
      }
      MEMORY[0x1D25D9CE0](v6, 0x1020C408B843D01);
      uint64_t result = v4;
      a2 = v5;
    }
  }
  uint64_t v3 = *a2;
  *a2 = 0;
  *uint64_t result = v3 | 4;
  return result;
}

void *sub_1CC6052FC(void *a1, unsigned int a2)
{
  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    uint64_t result = a1 + 1;
    unsigned int v4 = a1 + 13;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  uint64_t result = operator new(24 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  unsigned int v4 = &result[3 * v5];
  do
  {
LABEL_4:
    *uint64_t result = -4096;
    result += 3;
  }
  while (result != v4);
  return result;
}

void *sub_1CC60538C(_DWORD *a1, void *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CBA0E618((uint64_t)a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC6053EC(a1, (uint64_t)a2, a2, v7);
    *uint64_t v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

void *sub_1CC6053EC(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = a1[2];
  unsigned int v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1CD40E6BC((uint64_t)a1, v7);
  uint64_t v9 = 0;
  sub_1CBA0E618((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  ++a1[2];
  if (*a4 != -4096) {
    --a1[3];
  }
  return a4;
}

uint64_t sub_1CC6054A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      unsigned int v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v7 = (void *)(v3 + 24 * v6);
  uint64_t v8 = *v7;
  if (*v7 == a2)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      unsigned int v7 = (void *)(v3 + 24 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_15;
      }
    }
    uint64_t result = 0;
    if (v9) {
      unsigned int v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

void *sub_1CC605550(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      int v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1CC605730(a1, v8);
    uint64_t v20 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v21 = 4;
LABEL_26:
      int v9 = *(_DWORD *)a1 & 1;
      int v22 = v21 - 1;
      unsigned int v23 = ((*a3 >> 4) ^ (*a3 >> 9)) & v22;
      a4 = (void *)(v20 + 24 * v23);
      uint64_t v24 = *a4;
      if (*a3 == *a4) {
        goto LABEL_6;
      }
      unsigned int v16 = 0;
      int v25 = 1;
      while (v24 != -4096)
      {
        if (v16) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v24 == -8192;
        }
        if (v26) {
          unsigned int v16 = a4;
        }
        unsigned int v27 = v23 + v25++;
        unsigned int v23 = v27 & v22;
        a4 = (void *)(v20 + 24 * v23);
        uint64_t v24 = *a4;
        if (*a3 == *a4) {
          goto LABEL_6;
        }
      }
      goto LABEL_36;
    }
    int v21 = *(_DWORD *)(a1 + 16);
    if (v21)
    {
      uint64_t v20 = *(void *)(a1 + 8);
      goto LABEL_26;
    }
LABEL_41:
    int v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1CC605730(a1, 2 * v8);
  uint64_t v11 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 4;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12) {
      goto LABEL_41;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
  a4 = (void *)(v11 + 24 * v14);
  uint64_t v15 = *a4;
  if (*a3 == *a4) {
    goto LABEL_6;
  }
  unsigned int v16 = 0;
  int v17 = 1;
  while (v15 != -4096)
  {
    if (v16) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v15 == -8192;
    }
    if (v18) {
      unsigned int v16 = a4;
    }
    unsigned int v19 = v14 + v17++;
    unsigned int v14 = v19 & v13;
    a4 = (void *)(v11 + 24 * v14);
    uint64_t v15 = *a4;
    if (*a3 == *a4) {
      goto LABEL_6;
    }
  }
LABEL_36:
  if (v16) {
    a4 = v16;
  }
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

uint64_t sub_1CC605730(uint64_t result, unsigned int a2)
{
  uint64_t v2 = result;
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)result & 1) == 0)
  {
    int v25 = *(uint64_t **)(result + 8);
    unsigned int v26 = *(_DWORD *)(result + 16);
    if (a2 <= 4)
    {
      *(_DWORD *)result |= 1u;
    }
    else
    {
      uint64_t v27 = a2;
      *(void *)(result + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(void *)(v2 + 16) = v27;
    }
    sub_1CC6059D8((int *)v2, v25, &v25[3 * v26]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v28;
  do
  {
    uint64_t v8 = *(void *)(result + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)int v7 = v8;
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(result + v6 + 16);
      v7 += 24;
    }
    v6 += 24;
  }
  while (v6 != 96);
  int v9 = *(_DWORD *)result;
  if (a2 > 4)
  {
    *(_DWORD *)uint64_t result = v9 & 0xFFFFFFFE;
    uint64_t v10 = a2;
    uint64_t result = (uint64_t)operator new(24 * a2, (std::align_val_t)8uLL);
    *(void *)(v2 + 8) = result;
    *(void *)(v2 + 16) = v10;
    int v9 = *(_DWORD *)v2;
  }
  *(void *)uint64_t v2 = v9 & 1;
  if (v9)
  {
    int v13 = (void *)(v2 + 104);
    int v12 = (void *)(v2 + 8);
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(v2 + 16);
    if (!v11) {
      goto LABEL_16;
    }
    int v12 = *(void **)(v2 + 8);
    int v13 = &v12[3 * v11];
  }
  do
  {
    *int v12 = -4096;
    v12 += 3;
  }
  while (v12 != v13);
LABEL_16:
  if (v28 != v7)
  {
    unsigned int v14 = v28;
    do
    {
      uint64_t v15 = *(void *)v14;
      if ((*(void *)v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)v2)
        {
          int v16 = 4;
          uint64_t v17 = v2 + 8;
        }
        else
        {
          uint64_t v17 = *(void *)(v2 + 8);
          int v16 = *(_DWORD *)(v2 + 16);
        }
        int v18 = v16 - 1;
        unsigned int v19 = (v16 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        uint64_t v20 = (uint64_t *)(v17 + 24 * v19);
        uint64_t v21 = *v20;
        if (v15 != *v20)
        {
          int v22 = 0;
          uint64_t result = 1;
          while (v21 != -4096)
          {
            if (v22) {
              BOOL v23 = 0;
            }
            else {
              BOOL v23 = v21 == -8192;
            }
            if (v23) {
              int v22 = v20;
            }
            int v24 = v19 + result;
            uint64_t result = (result + 1);
            unsigned int v19 = v24 & v18;
            uint64_t v20 = (uint64_t *)(v17 + 24 * (v24 & v18));
            uint64_t v21 = *v20;
            if (v15 == *v20) {
              goto LABEL_33;
            }
          }
          if (v22) {
            uint64_t v20 = v22;
          }
        }
LABEL_33:
        *uint64_t v20 = v15;
        *(_OWORD *)(v20 + 1) = *(_OWORD *)(v14 + 8);
        *(_DWORD *)v2 += 2;
      }
      v14 += 24;
    }
    while (v14 != v7);
  }
  return result;
}

int *sub_1CC6059D8(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 26;
    int v5 = result + 2;
  }
  else
  {
    unsigned int v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[3 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 3;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v8 = 4;
        int v9 = result + 2;
      }
      else
      {
        int v9 = (int *)*((void *)result + 1);
        int v8 = result[4];
      }
      int v10 = v8 - 1;
      unsigned int v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      int v12 = (uint64_t *)&v9[6 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          int v12 = (uint64_t *)&v9[6 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_21;
          }
        }
        if (v14) {
          int v12 = v14;
        }
      }
LABEL_21:
      *int v12 = v7;
      *(_OWORD *)(v12 + 1) = *(_OWORD *)(a2 + 1);
      *result += 2;
    }
    a2 += 3;
  }
  return result;
}

uint64_t *sub_1CC605AE8(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  int v9 = result;
  while (2)
  {
    int v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          int v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(void *)(v39 + 8) < *(void *)(*v10 + 8))
                {
                  uint64_t *v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                uint64_t result = sub_1CC606214(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = sub_1CC6064A8(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                uint64_t v41 = v10 + 1;
                uint64_t v42 = v10 + 2;
                uint64_t v43 = v10 + 3;
                uint64_t result = sub_1CC6064A8(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(void *)(v44 + 8) < *(void *)(v45 + 8))
                {
                  *uint64_t v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  unint64_t v48 = *(void *)(*v43 + 8);
                  if (v48 < *(void *)(*v42 + 8))
                  {
                    *uint64_t v42 = v46;
                    *uint64_t v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 < *(void *)(*v41 + 8))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 < *(void *)(*v10 + 8))
                      {
                        uint64_t *v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                unsigned int v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  unsigned int v55 = v51;
                  unint64_t v58 = *(void *)(v56 + 8);
                  if (v58 < *(void *)(v57 + 8))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        uint64_t v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 < *(void *)(v57 + 8));
                    uint64_t v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    uint64_t *v61 = v56;
                  }
                  unsigned int v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                int v9 = v51;
                unint64_t v92 = *(void *)(v90 + 8);
                if (v92 < *(void *)(v91 + 8))
                {
                  do
                  {
                    uint64_t *v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 < *(void *)(v91 + 8));
                  uint64_t *v51 = v90;
                }
                unsigned int v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  BOOL v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(void *)(v67 + 8) < *(void *)(v66[1] + 8))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  uint64_t result = &v10[v64];
                  uint64_t v68 = *result;
                  unint64_t v69 = *(void *)(*result + 8);
                  if (*(void *)(v67 + 8) >= v69)
                  {
                    do
                    {
                      unsigned int v70 = v66;
                      *uint64_t result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      BOOL v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(void *)(v67 + 8) < *(void *)(v66[1] + 8))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      uint64_t result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(void *)(v67 + 8) >= v69);
                    *unsigned int v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                int v75 = v10;
                do
                {
                  uint64_t v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  uint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    uint64_t result = *(uint64_t **)(v78 + 8);
                    if ((unint64_t)result < *(void *)(v77[1] + 8))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  uint64_t *v75 = v78;
                  int v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *uint64_t v77 = v74;
                }
                else
                {
                  *uint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    uint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    unint64_t v87 = *(void *)(*v77 + 8);
                    if (*(void *)(*v84 + 8) < v87)
                    {
                      do
                      {
                        int v88 = v84;
                        *uint64_t v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        uint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        uint64_t v77 = v88;
                      }
                      while (*(void *)(*v84 + 8) < v87);
                      uint64_t *v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unsigned int v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC606214(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CC606214(v9 + 1, v14 - 1, a2 - 2);
            sub_1CC606214(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = sub_1CC606214(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *int v9 = *v14;
            *unsigned int v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CC606214(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unint64_t v17 = *(void *)(v16 + 8);
          if (*(void *)(*(v9 - 1) + 8) < v17) {
            goto LABEL_13;
          }
          if (v17 >= *(void *)(*(a2 - 1) + 8))
          {
            uint64_t v31 = v9 + 1;
            do
            {
              int v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 >= *(void *)(*v10 + 8));
          }
          else
          {
            int v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 >= *(void *)(v30 + 8));
          }
          uint64_t v32 = a2;
          if (v10 < a2)
          {
            uint64_t v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 < *(void *)(v33 + 8));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              uint64_t *v10 = v35;
              uint64_t *v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 >= *(void *)(v36 + 8));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 < *(void *)(v37 + 8));
            }
            while (v10 < v32);
          }
          int v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *int v9 = *v38;
          }
          a4 = 0;
          *int v38 = v16;
        }
        unint64_t v17 = *(void *)(v16 + 8);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(void *)(v19 + 8) < v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(void *)(v23 + 8) >= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(void *)(v22 + 8) >= v17);
        }
        if (v20 >= v21)
        {
          int v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          int v10 = &v9[v18];
          int v25 = v21;
          do
          {
            uint64_t *v10 = v24;
            *int v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(void *)(v26 + 8) < v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(void *)(v27 + 8) >= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *int v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = (uint64_t *)sub_1CC605AE8(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CC60629C(v9, v10 - 1);
      uint64_t result = (uint64_t *)sub_1CC60629C(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC606214(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unint64_t v5 = *(void *)(*a2 + 8);
  unint64_t v6 = *(void *)(*result + 8);
  uint64_t v7 = *a3;
  unint64_t v8 = *(void *)(*a3 + 8);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(void *)(*a2 + 8) < *(void *)(*result + 8))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*(void *)(*a3 + 8) >= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CC60629C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(void *)(v6 + 8) < *(void *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC606214(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC6064A8(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      sub_1CC6064A8(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(void *)(v21 + 8) < *(void *)(v22 + 8))
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unint64_t v25 = *(void *)(*v20 + 8);
        if (v25 < *(void *)(*v19 + 8))
        {
          uint64_t *v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 < *(void *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 < *(void *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      sub_1CC606214(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unint64_t v14 = *(void *)(*v9 + 8);
    if (v14 < *(void *)(*v8 + 8))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(void *)(v13 + 8))
        {
          unint64_t v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unint64_t v17 = a1;
LABEL_13:
      *unint64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC6064A8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC606214(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(void *)(*a4 + 8) < *(void *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(void *)(*a3 + 8) < *(void *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(void *)(*a2 + 8) < *(void *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unint64_t sub_1CC606540(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = (uint64_t *)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*(a2 - 1) < (unint64_t)v10[2])
                {
                  uint64_t v50 = *v10;
                  uint64_t *v10 = *(a2 - 3);
                  *(a2 - 3) = v50;
                  uint64_t v51 = v10[1];
                  v10[1] = *(a2 - 2);
                  *(a2 - 2) = v51;
                  uint64_t v52 = v10[2];
                  v10[2] = *(a2 - 1);
                  *(a2 - 1) = v52;
                }
                break;
              case 3:
                BOOL result = (unint64_t)sub_1CC606DF0(v10, v10 + 3, a2 - 3);
                break;
              case 4:
                BOOL result = (unint64_t)sub_1CC60717C(v10, v10 + 3, v10 + 6, a2 - 3);
                break;
              case 5:
                BOOL result = (unint64_t)sub_1CC60717C(v10, v10 + 3, v10 + 6, v10 + 9);
                if (*(a2 - 1) < (unint64_t)v10[11])
                {
                  uint64_t v53 = v10[9];
                  v10[9] = *(a2 - 3);
                  *(a2 - 3) = v53;
                  uint64_t v54 = v10[10];
                  v10[10] = *(a2 - 2);
                  *(a2 - 2) = v54;
                  uint64_t v55 = v10[11];
                  v10[11] = *(a2 - 1);
                  *(a2 - 1) = v55;
                  unint64_t v56 = v10[11];
                  unint64_t v57 = v10[8];
                  if (v56 < v57)
                  {
                    uint64_t v59 = v10[6];
                    uint64_t v58 = v10[7];
                    uint64_t v60 = v10[9];
                    uint64_t v61 = v10[10];
                    unint64_t v62 = v10[5];
                    v10[6] = v60;
                    v10[7] = v61;
                    v10[8] = v56;
                    v10[9] = v59;
                    v10[10] = v58;
                    v10[11] = v57;
                    if (v56 < v62)
                    {
                      uint64_t v64 = v10[3];
                      uint64_t v63 = v10[4];
                      unint64_t v65 = v10[2];
                      v10[3] = v60;
                      v10[4] = v61;
                      v10[5] = v56;
                      v10[6] = v64;
                      v10[7] = v63;
                      v10[8] = v62;
                      if (v56 < v65)
                      {
                        uint64_t v66 = *v10;
                        uint64_t v67 = v10[1];
                        uint64_t *v10 = v60;
                        v10[1] = v61;
                        v10[2] = v56;
                        v10[3] = v66;
                        v10[4] = v67;
                        v10[5] = v65;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 575)
          {
            uint64_t v68 = v10 + 3;
            BOOL v70 = v10 == a2 || v68 == a2;
            if (a4)
            {
              if (!v70)
              {
                uint64_t v71 = 0;
                uint64_t v72 = v10;
                do
                {
                  uint64_t v73 = v68;
                  unint64_t v74 = v72[5];
                  if (v74 < v72[2])
                  {
                    uint64_t v75 = *v73;
                    uint64_t v76 = v72[4];
                    uint64_t v77 = v71;
                    while (1)
                    {
                      uint64_t v78 = (char *)v10 + v77;
                      *(_OWORD *)(v78 + 24) = *(_OWORD *)((char *)v10 + v77);
                      *((void *)v78 + 5) = *(uint64_t *)((char *)v10 + v77 + 16);
                      if (!v77) {
                        break;
                      }
                      v77 -= 24;
                      if (v74 >= *((void *)v78 - 1))
                      {
                        uint64_t v79 = (uint64_t *)((char *)v10 + v77 + 24);
                        goto LABEL_85;
                      }
                    }
                    uint64_t v79 = v10;
LABEL_85:
                    uint64_t *v79 = v75;
                    v79[1] = v76;
                    v79[2] = v74;
                  }
                  uint64_t v68 = v73 + 3;
                  v71 += 24;
                  uint64_t v72 = v73;
                }
                while (v73 + 3 != a2);
              }
            }
            else if (!v70)
            {
              uint64_t v113 = v10 + 5;
              do
              {
                uint64_t v114 = v68;
                unint64_t v115 = *(void *)(v9 + 40);
                if (v115 < *(void *)(v9 + 16))
                {
                  uint64_t v116 = *v114;
                  uint64_t v117 = *(void *)(v9 + 32);
                  __int16 v118 = v113;
                  do
                  {
                    int v119 = v118;
                    *((_OWORD *)v118 - 1) = *(_OWORD *)(v118 - 5);
                    uint64_t v120 = *(v118 - 3);
                    v118 -= 3;
                    *int v119 = v120;
                  }
                  while (v115 < *(v119 - 6));
                  *(v118 - 2) = v116;
                  *(v118 - 1) = v117;
                  uint64_t *v118 = v115;
                }
                uint64_t v68 = v114 + 3;
                v113 += 3;
                unint64_t v9 = (unint64_t)v114;
              }
              while (v114 + 3 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v80 = (unint64_t)(v12 - 2) >> 1;
              int64_t v81 = v80;
              do
              {
                int64_t v82 = v81;
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  uint64_t v84 = &v10[3 * v83];
                  if (2 * v82 + 2 < v12)
                  {
                    unint64_t v85 = v10[3 * v83 + 2];
                    unint64_t v86 = v84[5];
                    v84 += 3 * (v85 < v86);
                    if (v85 < v86) {
                      uint64_t v83 = 2 * v82 + 2;
                    }
                  }
                  unint64_t v87 = v10[3 * v82 + 2];
                  if (v84[2] >= v87)
                  {
                    int v88 = &v10[3 * v82];
                    uint64_t v89 = *v88;
                    uint64_t v90 = v88[1];
                    do
                    {
                      uint64_t v91 = v88;
                      int v88 = v84;
                      *uint64_t v91 = *v84;
                      v91[1] = v84[1];
                      v91[2] = v84[2];
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v92 = (2 * v83) | 1;
                      uint64_t v84 = &v10[3 * v92];
                      uint64_t v93 = 2 * v83 + 2;
                      if (v93 < v12)
                      {
                        unint64_t v94 = v10[3 * v92 + 2];
                        unint64_t v95 = v84[5];
                        v84 += 3 * (v94 < v95);
                        if (v94 < v95) {
                          uint64_t v92 = v93;
                        }
                      }
                      uint64_t v83 = v92;
                    }
                    while (v84[2] >= v87);
                    uint64_t *v88 = v89;
                    v88[1] = v90;
                    v88[2] = v87;
                  }
                }
                int64_t v81 = v82 - 1;
              }
              while (v82);
              do
              {
                BOOL result = 0;
                uint64_t v96 = *v10;
                uint64_t v97 = v10[1];
                uint64_t v98 = v10[2];
                uint64_t v99 = v10;
                do
                {
                  uint64_t v100 = (char *)(result + 1);
                  uint64_t v101 = &v99[3 * result + 3];
                  uint64_t v102 = (2 * result) | 1;
                  uint64_t v103 = 2 * result + 2;
                  if (v103 < v12)
                  {
                    unint64_t v104 = v99[3 * (void)v100 + 2];
                    unint64_t v105 = v101[5];
                    v101 += 3 * (v104 < v105);
                    if (v104 < v105) {
                      uint64_t v102 = v103;
                    }
                  }
                  *uint64_t v99 = *v101;
                  v99[1] = v101[1];
                  v99[2] = v101[2];
                  uint64_t v99 = v101;
                  BOOL result = v102;
                }
                while (v102 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v101 == a2 - 3)
                {
                  *uint64_t v101 = v96;
                  v101[1] = v97;
                  v101[2] = v98;
                }
                else
                {
                  *uint64_t v101 = *(a2 - 3);
                  v101[1] = *(a2 - 2);
                  v101[2] = *(a2 - 1);
                  *(a2 - 3) = v96;
                  *(a2 - 2) = v97;
                  *(a2 - 1) = v98;
                  uint64_t v106 = (char *)v101 - (char *)v10 + 24;
                  if (v106 >= 25)
                  {
                    unint64_t v107 = (v106 / 0x18uLL - 2) >> 1;
                    unint64_t v108 = v101[2];
                    if (v10[3 * v107 + 2] < v108)
                    {
                      uint64_t v109 = *v101;
                      uint64_t v110 = v101[1];
                      do
                      {
                        int v111 = v101;
                        uint64_t v101 = &v10[3 * v107];
                        uint64_t *v111 = *v101;
                        v111[1] = v101[1];
                        BOOL result = (unint64_t)(v101 + 2);
                        v111[2] = v101[2];
                        if (!v107) {
                          break;
                        }
                        unint64_t v107 = (v107 - 1) >> 1;
                      }
                      while (v10[3 * v107 + 2] < v108);
                      *uint64_t v101 = v109;
                      v101[1] = v110;
                      *(void *)BOOL result = v108;
                    }
                  }
                }
                a2 -= 3;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_1CC606DF0((uint64_t *)v9, (uint64_t *)(v9 + 24 * ((unint64_t)v12 >> 1)), a2 - 3);
            unint64_t v15 = v9 + 24 * v13;
            sub_1CC606DF0((uint64_t *)(v9 + 24), (uint64_t *)(v15 - 24), a2 - 6);
            sub_1CC606DF0((uint64_t *)(v9 + 48), (uint64_t *)(v9 + 24 + 24 * v13), a2 - 9);
            BOOL result = (unint64_t)sub_1CC606DF0((uint64_t *)(v15 - 24), v14, (uint64_t *)(v9 + 24 + 24 * v13));
            uint64_t v16 = *(void *)v9;
            *(void *)unint64_t v9 = *v14;
            *unint64_t v14 = v16;
            long long v17 = *(_OWORD *)(v9 + 8);
            *(_OWORD *)(v9 + 8) = *(_OWORD *)(v15 + 8);
            *(_OWORD *)(v15 + 8) = v17;
          }
          else
          {
            BOOL result = (unint64_t)sub_1CC606DF0((uint64_t *)(v9 + 24 * ((unint64_t)v12 >> 1)), (uint64_t *)v9, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v18 = *(void *)(v9 + 16);
          if (*(void *)(v9 - 8) < v18) {
            goto LABEL_13;
          }
          if (v18 >= *(a2 - 1))
          {
            int v38 = (uint64_t *)(v9 + 24);
            do
            {
              uint64_t v10 = v38;
              if (v38 >= a2) {
                break;
              }
              unint64_t v39 = v38[2];
              v38 += 3;
            }
            while (v18 >= v39);
          }
          else
          {
            unint64_t v36 = v9;
            do
            {
              uint64_t v10 = (uint64_t *)(v36 + 24);
              unint64_t v37 = *(void *)(v36 + 40);
              v36 += 24;
            }
            while (v18 >= v37);
          }
          uint64_t v40 = a2;
          if (v10 < a2)
          {
            uint64_t v41 = a2;
            do
            {
              uint64_t v40 = v41 - 3;
              unint64_t v42 = *(v41 - 1);
              v41 -= 3;
            }
            while (v18 < v42);
          }
          uint64_t v43 = *(void *)v9;
          uint64_t v44 = *(void *)(v9 + 8);
          while (v10 < v40)
          {
            uint64_t v45 = *v10;
            uint64_t *v10 = *v40;
            uint64_t *v40 = v45;
            uint64_t v46 = v10[1];
            v10[1] = v40[1];
            v40[1] = v46;
            uint64_t v47 = v10[2];
            v10[2] = v40[2];
            v40[2] = v47;
            do
            {
              unint64_t v48 = v10[5];
              v10 += 3;
            }
            while (v18 >= v48);
            do
            {
              unint64_t v49 = *(v40 - 1);
              v40 -= 3;
            }
            while (v18 < v49);
          }
          BOOL v4 = (unint64_t)(v10 - 3) >= v9;
          BOOL v5 = v10 - 3 == (uint64_t *)v9;
          if (v10 - 3 != (uint64_t *)v9)
          {
            *(void *)unint64_t v9 = *(v10 - 3);
            *(void *)(v9 + 8) = *(v10 - 2);
            *(void *)(v9 + 16) = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 3) = v43;
          *(v10 - 2) = v44;
          *(v10 - 1) = v18;
        }
        unint64_t v18 = *(void *)(v9 + 16);
LABEL_13:
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)v9;
        uint64_t v21 = *(void *)(v9 + 8);
        do
        {
          unint64_t v22 = *(void *)(v9 + v19 + 40);
          v19 += 24;
        }
        while (v22 < v18);
        uint64_t v23 = (uint64_t *)(v9 + v19);
        uint64_t v24 = a2;
        if (v19 == 24)
        {
          uint64_t v27 = a2;
          while (v23 < v27)
          {
            unint64_t v25 = v27 - 3;
            unint64_t v28 = *(v27 - 1);
            v27 -= 3;
            if (v28 < v18) {
              goto LABEL_23;
            }
          }
          unint64_t v25 = v27;
        }
        else
        {
          do
          {
            unint64_t v25 = v24 - 3;
            unint64_t v26 = *(v24 - 1);
            v24 -= 3;
          }
          while (v26 >= v18);
        }
LABEL_23:
        uint64_t v10 = v23;
        if (v23 < v25)
        {
          BOOL v29 = v25;
          do
          {
            uint64_t v30 = *v10;
            uint64_t *v10 = *v29;
            *BOOL v29 = v30;
            uint64_t v31 = v10[1];
            v10[1] = v29[1];
            v29[1] = v31;
            uint64_t v32 = v10[2];
            v10[2] = v29[2];
            v29[2] = v32;
            do
            {
              unint64_t v33 = v10[5];
              v10 += 3;
            }
            while (v33 < v18);
            do
            {
              unint64_t v34 = *(v29 - 1);
              v29 -= 3;
            }
            while (v34 >= v18);
          }
          while (v10 < v29);
        }
        if (v10 - 3 != (uint64_t *)v9)
        {
          *(void *)unint64_t v9 = *(v10 - 3);
          *(void *)(v9 + 8) = *(v10 - 2);
          *(void *)(v9 + 16) = *(v10 - 1);
        }
        *(v10 - 3) = v20;
        *(v10 - 2) = v21;
        *(v10 - 1) = v18;
        if (v23 >= v25) {
          break;
        }
LABEL_34:
        BOOL result = sub_1CC606540(v9, v10 - 3, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = sub_1CC606F18((uint64_t *)v9, v10 - 3);
      BOOL result = sub_1CC606F18(v10, a2);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 3;
    if (!v35) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC606DF0(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2 + 2;
  unint64_t v4 = a2[2];
  BOOL v5 = result + 2;
  unint64_t v6 = a3[2];
  if (v4 < result[2])
  {
    uint64_t v7 = *result;
    if (v6 >= v4)
    {
      *BOOL result = *a2;
      *a2 = v7;
      uint64_t v13 = result[1];
      result[1] = a2[1];
      a2[1] = v13;
      unint64_t v14 = result[2];
      result[2] = a2[2];
      a2[2] = v14;
      if (a3[2] >= v14) {
        return result;
      }
      uint64_t v15 = *a2;
      *a2 = *a3;
      *a3 = v15;
      BOOL result = a2 + 1;
      unint64_t v8 = a3 + 1;
      BOOL v5 = a2 + 2;
    }
    else
    {
      *BOOL result = *a3;
      *a3 = v7;
      ++result;
      unint64_t v8 = a3 + 1;
    }
    uint64_t v3 = a3 + 2;
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    uint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    unint64_t v8 = a2 + 1;
    uint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    uint64_t v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    if (a2[2] < (unint64_t)*v5)
    {
      uint64_t v12 = *result;
      *result++ = *a2;
      *a2 = v12;
LABEL_10:
      uint64_t v16 = *result;
      *BOOL result = *v8;
      uint64_t *v8 = v16;
      uint64_t v17 = *v5;
      *BOOL v5 = *v3;
      *uint64_t v3 = v17;
    }
  }
  return result;
}

BOOL sub_1CC606F18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        uint64_t v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3uLL:
      sub_1CC606DF0(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_1CC60717C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_1CC60717C(a1, a1 + 3, a1 + 6, a1 + 9);
      if (*(a2 - 1) < (unint64_t)a1[11])
      {
        uint64_t v19 = a1[9];
        a1[9] = *(a2 - 3);
        *(a2 - 3) = v19;
        uint64_t v20 = a1[10];
        a1[10] = *(a2 - 2);
        *(a2 - 2) = v20;
        uint64_t v21 = a1[11];
        a1[11] = *(a2 - 1);
        *(a2 - 1) = v21;
        unint64_t v22 = a1[11];
        unint64_t v23 = a1[8];
        if (v22 < v23)
        {
          uint64_t v25 = a1[6];
          uint64_t v24 = a1[7];
          uint64_t v26 = a1[9];
          uint64_t v27 = a1[10];
          unint64_t v28 = a1[5];
          a1[6] = v26;
          a1[7] = v27;
          a1[8] = v22;
          a1[9] = v25;
          a1[10] = v24;
          a1[11] = v23;
          if (v22 < v28)
          {
            uint64_t v30 = a1[3];
            uint64_t v29 = a1[4];
            unint64_t v31 = a1[2];
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v22;
            a1[6] = v30;
            a1[7] = v29;
            a1[8] = v28;
            if (v22 < v31)
            {
              uint64_t v32 = *a1;
              uint64_t v33 = a1[1];
              *a1 = v26;
              a1[1] = v27;
              a1[2] = v22;
              a1[3] = v32;
              a1[4] = v33;
              a1[5] = v31;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 6;
      sub_1CC606DF0(a1, a1 + 3, a1 + 6);
      uint64_t v10 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = v10[2];
    if (v13 < v9[2])
    {
      uint64_t v14 = *v10;
      uint64_t v15 = v10[1];
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = (char *)a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)((char *)a1 + v16 + 48);
        *((void *)v17 + 11) = *(uint64_t *)((char *)a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v13 >= *((void *)v17 + 5))
        {
          unint64_t v18 = (uint64_t *)((char *)a1 + v16 + 72);
          goto LABEL_13;
        }
      }
      unint64_t v18 = a1;
LABEL_13:
      *unint64_t v18 = v14;
      v18[1] = v15;
      v18[2] = v13;
      if (++v12 == 8) {
        return v10 + 3 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC60717C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC606DF0(a1, a2, a3);
  if (a4[2] < (unint64_t)a3[2])
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    uint64_t v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    if (a3[2] < (unint64_t)a2[2])
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t v13 = a2[1];
      a2[1] = a3[1];
      a3[1] = v13;
      uint64_t v14 = a2[2];
      a2[2] = a3[2];
      a3[2] = v14;
      if (a2[2] < (unint64_t)a1[2])
      {
        uint64_t v15 = *a1;
        *a1 = *a2;
        *a2 = v15;
        uint64_t v16 = a1[1];
        a1[1] = a2[1];
        a2[1] = v16;
        uint64_t v17 = a1[2];
        a1[2] = a2[2];
        a2[2] = v17;
      }
    }
  }
  return result;
}

unint64_t sub_1CC607274(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = (uint64_t *)v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = (unint64_t)v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                if (*(a2 - 1) < (unint64_t)v10[2])
                {
                  uint64_t v50 = *v10;
                  uint64_t *v10 = *(a2 - 3);
                  *(a2 - 3) = v50;
                  uint64_t v51 = v10[1];
                  v10[1] = *(a2 - 2);
                  *(a2 - 2) = v51;
                  uint64_t v52 = v10[2];
                  v10[2] = *(a2 - 1);
                  *(a2 - 1) = v52;
                }
                break;
              case 3:
                BOOL result = (unint64_t)sub_1CC606DF0(v10, v10 + 3, a2 - 3);
                break;
              case 4:
                BOOL result = (unint64_t)sub_1CC60717C(v10, v10 + 3, v10 + 6, a2 - 3);
                break;
              case 5:
                BOOL result = (unint64_t)sub_1CC60717C(v10, v10 + 3, v10 + 6, v10 + 9);
                if (*(a2 - 1) < (unint64_t)v10[11])
                {
                  uint64_t v53 = v10[9];
                  v10[9] = *(a2 - 3);
                  *(a2 - 3) = v53;
                  uint64_t v54 = v10[10];
                  v10[10] = *(a2 - 2);
                  *(a2 - 2) = v54;
                  uint64_t v55 = v10[11];
                  v10[11] = *(a2 - 1);
                  *(a2 - 1) = v55;
                  unint64_t v56 = v10[11];
                  unint64_t v57 = v10[8];
                  if (v56 < v57)
                  {
                    uint64_t v59 = v10[6];
                    uint64_t v58 = v10[7];
                    uint64_t v60 = v10[9];
                    uint64_t v61 = v10[10];
                    unint64_t v62 = v10[5];
                    v10[6] = v60;
                    v10[7] = v61;
                    v10[8] = v56;
                    v10[9] = v59;
                    v10[10] = v58;
                    v10[11] = v57;
                    if (v56 < v62)
                    {
                      uint64_t v64 = v10[3];
                      uint64_t v63 = v10[4];
                      unint64_t v65 = v10[2];
                      v10[3] = v60;
                      v10[4] = v61;
                      v10[5] = v56;
                      v10[6] = v64;
                      v10[7] = v63;
                      v10[8] = v62;
                      if (v56 < v65)
                      {
                        uint64_t v66 = *v10;
                        uint64_t v67 = v10[1];
                        uint64_t *v10 = v60;
                        v10[1] = v61;
                        v10[2] = v56;
                        v10[3] = v66;
                        v10[4] = v67;
                        v10[5] = v65;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 575)
          {
            uint64_t v68 = v10 + 3;
            BOOL v70 = v10 == a2 || v68 == a2;
            if (a4)
            {
              if (!v70)
              {
                uint64_t v71 = 0;
                uint64_t v72 = v10;
                do
                {
                  uint64_t v73 = v68;
                  unint64_t v74 = v72[5];
                  if (v74 < v72[2])
                  {
                    uint64_t v75 = *v73;
                    uint64_t v76 = v72[4];
                    uint64_t v77 = v71;
                    while (1)
                    {
                      uint64_t v78 = (char *)v10 + v77;
                      *(_OWORD *)(v78 + 24) = *(_OWORD *)((char *)v10 + v77);
                      *((void *)v78 + 5) = *(uint64_t *)((char *)v10 + v77 + 16);
                      if (!v77) {
                        break;
                      }
                      v77 -= 24;
                      if (v74 >= *((void *)v78 - 1))
                      {
                        uint64_t v79 = (uint64_t *)((char *)v10 + v77 + 24);
                        goto LABEL_85;
                      }
                    }
                    uint64_t v79 = v10;
LABEL_85:
                    uint64_t *v79 = v75;
                    v79[1] = v76;
                    v79[2] = v74;
                  }
                  uint64_t v68 = v73 + 3;
                  v71 += 24;
                  uint64_t v72 = v73;
                }
                while (v73 + 3 != a2);
              }
            }
            else if (!v70)
            {
              uint64_t v113 = v10 + 5;
              do
              {
                uint64_t v114 = v68;
                unint64_t v115 = *(void *)(v9 + 40);
                if (v115 < *(void *)(v9 + 16))
                {
                  uint64_t v116 = *v114;
                  uint64_t v117 = *(void *)(v9 + 32);
                  __int16 v118 = v113;
                  do
                  {
                    int v119 = v118;
                    *((_OWORD *)v118 - 1) = *(_OWORD *)(v118 - 5);
                    uint64_t v120 = *(v118 - 3);
                    v118 -= 3;
                    *int v119 = v120;
                  }
                  while (v115 < *(v119 - 6));
                  *(v118 - 2) = v116;
                  *(v118 - 1) = v117;
                  uint64_t *v118 = v115;
                }
                uint64_t v68 = v114 + 3;
                v113 += 3;
                unint64_t v9 = (unint64_t)v114;
              }
              while (v114 + 3 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v80 = (unint64_t)(v12 - 2) >> 1;
              int64_t v81 = v80;
              do
              {
                int64_t v82 = v81;
                if (v80 >= v81)
                {
                  uint64_t v83 = (2 * v81) | 1;
                  uint64_t v84 = &v10[3 * v83];
                  if (2 * v82 + 2 < v12)
                  {
                    unint64_t v85 = v10[3 * v83 + 2];
                    unint64_t v86 = v84[5];
                    v84 += 3 * (v85 < v86);
                    if (v85 < v86) {
                      uint64_t v83 = 2 * v82 + 2;
                    }
                  }
                  unint64_t v87 = v10[3 * v82 + 2];
                  if (v84[2] >= v87)
                  {
                    int v88 = &v10[3 * v82];
                    uint64_t v89 = *v88;
                    uint64_t v90 = v88[1];
                    do
                    {
                      uint64_t v91 = v88;
                      int v88 = v84;
                      *uint64_t v91 = *v84;
                      v91[1] = v84[1];
                      v91[2] = v84[2];
                      if (v80 < v83) {
                        break;
                      }
                      uint64_t v92 = (2 * v83) | 1;
                      uint64_t v84 = &v10[3 * v92];
                      uint64_t v93 = 2 * v83 + 2;
                      if (v93 < v12)
                      {
                        unint64_t v94 = v10[3 * v92 + 2];
                        unint64_t v95 = v84[5];
                        v84 += 3 * (v94 < v95);
                        if (v94 < v95) {
                          uint64_t v92 = v93;
                        }
                      }
                      uint64_t v83 = v92;
                    }
                    while (v84[2] >= v87);
                    uint64_t *v88 = v89;
                    v88[1] = v90;
                    v88[2] = v87;
                  }
                }
                int64_t v81 = v82 - 1;
              }
              while (v82);
              do
              {
                BOOL result = 0;
                uint64_t v96 = *v10;
                uint64_t v97 = v10[1];
                uint64_t v98 = v10[2];
                uint64_t v99 = v10;
                do
                {
                  uint64_t v100 = (char *)(result + 1);
                  uint64_t v101 = &v99[3 * result + 3];
                  uint64_t v102 = (2 * result) | 1;
                  uint64_t v103 = 2 * result + 2;
                  if (v103 < v12)
                  {
                    unint64_t v104 = v99[3 * (void)v100 + 2];
                    unint64_t v105 = v101[5];
                    v101 += 3 * (v104 < v105);
                    if (v104 < v105) {
                      uint64_t v102 = v103;
                    }
                  }
                  *uint64_t v99 = *v101;
                  v99[1] = v101[1];
                  v99[2] = v101[2];
                  uint64_t v99 = v101;
                  BOOL result = v102;
                }
                while (v102 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v101 == a2 - 3)
                {
                  *uint64_t v101 = v96;
                  v101[1] = v97;
                  v101[2] = v98;
                }
                else
                {
                  *uint64_t v101 = *(a2 - 3);
                  v101[1] = *(a2 - 2);
                  v101[2] = *(a2 - 1);
                  *(a2 - 3) = v96;
                  *(a2 - 2) = v97;
                  *(a2 - 1) = v98;
                  uint64_t v106 = (char *)v101 - (char *)v10 + 24;
                  if (v106 >= 25)
                  {
                    unint64_t v107 = (v106 / 0x18uLL - 2) >> 1;
                    unint64_t v108 = v101[2];
                    if (v10[3 * v107 + 2] < v108)
                    {
                      uint64_t v109 = *v101;
                      uint64_t v110 = v101[1];
                      do
                      {
                        int v111 = v101;
                        uint64_t v101 = &v10[3 * v107];
                        uint64_t *v111 = *v101;
                        v111[1] = v101[1];
                        BOOL result = (unint64_t)(v101 + 2);
                        v111[2] = v101[2];
                        if (!v107) {
                          break;
                        }
                        unint64_t v107 = (v107 - 1) >> 1;
                      }
                      while (v10[3 * v107 + 2] < v108);
                      *uint64_t v101 = v109;
                      v101[1] = v110;
                      *(void *)BOOL result = v108;
                    }
                  }
                }
                a2 -= 3;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[3 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_1CC606DF0((uint64_t *)v9, (uint64_t *)(v9 + 24 * ((unint64_t)v12 >> 1)), a2 - 3);
            unint64_t v15 = v9 + 24 * v13;
            sub_1CC606DF0((uint64_t *)(v9 + 24), (uint64_t *)(v15 - 24), a2 - 6);
            sub_1CC606DF0((uint64_t *)(v9 + 48), (uint64_t *)(v9 + 24 + 24 * v13), a2 - 9);
            BOOL result = (unint64_t)sub_1CC606DF0((uint64_t *)(v15 - 24), v14, (uint64_t *)(v9 + 24 + 24 * v13));
            uint64_t v16 = *(void *)v9;
            *(void *)unint64_t v9 = *v14;
            *uint64_t v14 = v16;
            long long v17 = *(_OWORD *)(v9 + 8);
            *(_OWORD *)(v9 + 8) = *(_OWORD *)(v15 + 8);
            *(_OWORD *)(v15 + 8) = v17;
          }
          else
          {
            BOOL result = (unint64_t)sub_1CC606DF0((uint64_t *)(v9 + 24 * ((unint64_t)v12 >> 1)), (uint64_t *)v9, a2 - 3);
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v18 = *(void *)(v9 + 16);
          if (*(void *)(v9 - 8) < v18) {
            goto LABEL_13;
          }
          if (v18 >= *(a2 - 1))
          {
            int v38 = (uint64_t *)(v9 + 24);
            do
            {
              uint64_t v10 = v38;
              if (v38 >= a2) {
                break;
              }
              unint64_t v39 = v38[2];
              v38 += 3;
            }
            while (v18 >= v39);
          }
          else
          {
            unint64_t v36 = v9;
            do
            {
              uint64_t v10 = (uint64_t *)(v36 + 24);
              unint64_t v37 = *(void *)(v36 + 40);
              v36 += 24;
            }
            while (v18 >= v37);
          }
          uint64_t v40 = a2;
          if (v10 < a2)
          {
            uint64_t v41 = a2;
            do
            {
              uint64_t v40 = v41 - 3;
              unint64_t v42 = *(v41 - 1);
              v41 -= 3;
            }
            while (v18 < v42);
          }
          uint64_t v43 = *(void *)v9;
          uint64_t v44 = *(void *)(v9 + 8);
          while (v10 < v40)
          {
            uint64_t v45 = *v10;
            uint64_t *v10 = *v40;
            uint64_t *v40 = v45;
            uint64_t v46 = v10[1];
            v10[1] = v40[1];
            v40[1] = v46;
            uint64_t v47 = v10[2];
            v10[2] = v40[2];
            v40[2] = v47;
            do
            {
              unint64_t v48 = v10[5];
              v10 += 3;
            }
            while (v18 >= v48);
            do
            {
              unint64_t v49 = *(v40 - 1);
              v40 -= 3;
            }
            while (v18 < v49);
          }
          BOOL v4 = (unint64_t)(v10 - 3) >= v9;
          BOOL v5 = v10 - 3 == (uint64_t *)v9;
          if (v10 - 3 != (uint64_t *)v9)
          {
            *(void *)unint64_t v9 = *(v10 - 3);
            *(void *)(v9 + 8) = *(v10 - 2);
            *(void *)(v9 + 16) = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 3) = v43;
          *(v10 - 2) = v44;
          *(v10 - 1) = v18;
        }
        unint64_t v18 = *(void *)(v9 + 16);
LABEL_13:
        uint64_t v19 = 0;
        uint64_t v20 = *(void *)v9;
        uint64_t v21 = *(void *)(v9 + 8);
        do
        {
          unint64_t v22 = *(void *)(v9 + v19 + 40);
          v19 += 24;
        }
        while (v22 < v18);
        unint64_t v23 = (uint64_t *)(v9 + v19);
        uint64_t v24 = a2;
        if (v19 == 24)
        {
          uint64_t v27 = a2;
          while (v23 < v27)
          {
            uint64_t v25 = v27 - 3;
            unint64_t v28 = *(v27 - 1);
            v27 -= 3;
            if (v28 < v18) {
              goto LABEL_23;
            }
          }
          uint64_t v25 = v27;
        }
        else
        {
          do
          {
            uint64_t v25 = v24 - 3;
            unint64_t v26 = *(v24 - 1);
            v24 -= 3;
          }
          while (v26 >= v18);
        }
LABEL_23:
        uint64_t v10 = v23;
        if (v23 < v25)
        {
          uint64_t v29 = v25;
          do
          {
            uint64_t v30 = *v10;
            uint64_t *v10 = *v29;
            *uint64_t v29 = v30;
            uint64_t v31 = v10[1];
            v10[1] = v29[1];
            v29[1] = v31;
            uint64_t v32 = v10[2];
            v10[2] = v29[2];
            v29[2] = v32;
            do
            {
              unint64_t v33 = v10[5];
              v10 += 3;
            }
            while (v33 < v18);
            do
            {
              unint64_t v34 = *(v29 - 1);
              v29 -= 3;
            }
            while (v34 >= v18);
          }
          while (v10 < v29);
        }
        if (v10 - 3 != (uint64_t *)v9)
        {
          *(void *)unint64_t v9 = *(v10 - 3);
          *(void *)(v9 + 8) = *(v10 - 2);
          *(void *)(v9 + 16) = *(v10 - 1);
        }
        *(v10 - 3) = v20;
        *(v10 - 2) = v21;
        *(v10 - 1) = v18;
        if (v23 >= v25) {
          break;
        }
LABEL_34:
        BOOL result = sub_1CC607274(v9, v10 - 3, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = sub_1CC607B24((uint64_t *)v9, v10 - 3);
      BOOL result = sub_1CC607B24(v10, a2);
      if (result) {
        break;
      }
      if (!v35) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 3;
    if (!v35) {
      continue;
    }
    return result;
  }
}

BOOL sub_1CC607B24(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 1) < (unint64_t)a1[2])
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        uint64_t v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3uLL:
      sub_1CC606DF0(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_1CC60717C(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_1CC60717C(a1, a1 + 3, a1 + 6, a1 + 9);
      if (*(a2 - 1) < (unint64_t)a1[11])
      {
        uint64_t v19 = a1[9];
        a1[9] = *(a2 - 3);
        *(a2 - 3) = v19;
        uint64_t v20 = a1[10];
        a1[10] = *(a2 - 2);
        *(a2 - 2) = v20;
        uint64_t v21 = a1[11];
        a1[11] = *(a2 - 1);
        *(a2 - 1) = v21;
        unint64_t v22 = a1[11];
        unint64_t v23 = a1[8];
        if (v22 < v23)
        {
          uint64_t v25 = a1[6];
          uint64_t v24 = a1[7];
          uint64_t v26 = a1[9];
          uint64_t v27 = a1[10];
          unint64_t v28 = a1[5];
          a1[6] = v26;
          a1[7] = v27;
          a1[8] = v22;
          a1[9] = v25;
          a1[10] = v24;
          a1[11] = v23;
          if (v22 < v28)
          {
            uint64_t v30 = a1[3];
            uint64_t v29 = a1[4];
            unint64_t v31 = a1[2];
            a1[3] = v26;
            a1[4] = v27;
            a1[5] = v22;
            a1[6] = v30;
            a1[7] = v29;
            a1[8] = v28;
            if (v22 < v31)
            {
              uint64_t v32 = *a1;
              uint64_t v33 = a1[1];
              *a1 = v26;
              a1[1] = v27;
              a1[2] = v22;
              a1[3] = v32;
              a1[4] = v33;
              a1[5] = v31;
            }
          }
        }
      }
      return 1;
    default:
      unint64_t v9 = a1 + 6;
      sub_1CC606DF0(a1, a1 + 3, a1 + 6);
      uint64_t v10 = a1 + 9;
      if (a1 + 9 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = v10[2];
    if (v13 < v9[2])
    {
      uint64_t v14 = *v10;
      uint64_t v15 = v10[1];
      uint64_t v16 = v11;
      while (1)
      {
        long long v17 = (char *)a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)((char *)a1 + v16 + 48);
        *((void *)v17 + 11) = *(uint64_t *)((char *)a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v13 >= *((void *)v17 + 5))
        {
          unint64_t v18 = (uint64_t *)((char *)a1 + v16 + 72);
          goto LABEL_13;
        }
      }
      unint64_t v18 = a1;
LABEL_13:
      *unint64_t v18 = v14;
      v18[1] = v15;
      v18[2] = v13;
      if (++v12 == 8) {
        return v10 + 3 == a2;
      }
    }
    unint64_t v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC607D88(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CC02A420(a1, v6);
      uint64_t v16 = 0;
      sub_1CC0B17CC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    uint64_t v7 = *a3;
    goto LABEL_5;
  }
  sub_1CC02A420(a1, 2 * v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(void *)a1 + 16 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    int v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        int v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (uint64_t *)(*(void *)a1 + 16 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC607EC0(uint64_t a1, uint64_t *a2, void *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    sub_1CC608034(a1, 2 * v6);
    uint64_t v7 = *a2;
    int v9 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v10 = *(_DWORD *)(*a2 + 4) & v9;
    a3 = (void *)(*(void *)a1 + 8 * v10);
    uint64_t v11 = *a3;
    if (*a2 != *a3)
    {
      int v12 = 0;
      int v13 = 1;
      while (v11 != -4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -8192;
        }
        if (v14) {
          int v12 = a3;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & v9;
        a3 = (void *)(*(void *)a1 + 8 * v10);
        uint64_t v11 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
    {
LABEL_3:
      uint64_t v7 = *a3;
      goto LABEL_4;
    }
    sub_1CC608034(a1, v6);
    uint64_t v7 = *a2;
    int v16 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v17 = *(_DWORD *)(*a2 + 4) & v16;
    a3 = (void *)(*(void *)a1 + 8 * v17);
    uint64_t v18 = *a3;
    if (*a2 != *a3)
    {
      int v12 = 0;
      int v19 = 1;
      while (v18 != -4096)
      {
        if (v12) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v18 == -8192;
        }
        if (v20) {
          int v12 = a3;
        }
        unsigned int v21 = v17 + v19++;
        unsigned int v17 = v21 & v16;
        a3 = (void *)(*(void *)a1 + 8 * v17);
        uint64_t v18 = *a3;
        if (v7 == *a3) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v12) {
        a3 = v12;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC608034(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      do
      {
        *result++ = -4096;
        v13 -= 8;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = 0;
      int v15 = v12 - 1;
      int v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v18 = *(_DWORD *)(v17 + 4) & v15;
          int v19 = (void *)(*(void *)a1 + 8 * v18);
          uint64_t v20 = *v19;
          if (v17 != *v19)
          {
            unsigned int v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v20 == -8192;
              }
              if (v23) {
                unsigned int v21 = v19;
              }
              unsigned int v24 = v18 + v22++;
              unsigned int v18 = v24 & v15;
              int v19 = (void *)(*(void *)a1 + 8 * (v24 & v15));
              uint64_t v20 = *v19;
              if (v17 == *v19) {
                goto LABEL_27;
              }
            }
            if (v21) {
              int v19 = v21;
            }
          }
LABEL_27:
          void *v19 = v17;
          *(_DWORD *)(a1 + 8) = ++v14;
        }
        ++v16;
      }
      while (v16 != &v4[v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1CC6081B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3 == *a1)
  {
    uint64_t v5 = *((unsigned int *)a1 + 5);
    unint64_t v6 = (void *)(v3 + 8 * v5);
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 8 * v5;
      while (*(void *)(v3 + v7) != a3)
      {
        v7 += 8;
        if (v8 == v7) {
          goto LABEL_19;
        }
      }
      unint64_t v6 = (void *)(v3 + v7);
    }
LABEL_19:
    uint64_t v4 = a1[1];
  }
  else
  {
    uint64_t v9 = *((unsigned int *)a1 + 4);
    int v10 = v9 - 1;
    unsigned int v11 = (v9 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    unint64_t v6 = (void *)(v3 + 8 * v11);
    uint64_t v12 = *v6;
    if (*v6 == -1)
    {
      uint64_t v13 = 0;
LABEL_28:
      if (v13) {
        unint64_t v6 = v13;
      }
      if (*v6 != a3) {
        unint64_t v6 = (void *)(v3 + 8 * v9);
      }
    }
    else
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != a3)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -2;
        }
        if (v15) {
          uint64_t v13 = v6;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        unint64_t v6 = (void *)(v3 + 8 * (v16 & v10));
        uint64_t v12 = *v6;
        if (*v6 == -1) {
          goto LABEL_28;
        }
      }
    }
  }
  BOOL v15 = v3 == v4;
  uint64_t v17 = 16;
  if (v15) {
    uint64_t v17 = 20;
  }
  unsigned int v18 = (void *)(v3 + 8 * *(unsigned int *)((char *)a1 + v17));
  if (v6 == v18)
  {
    uint64_t v20 = a2 + 8;
    if (*(unsigned char *)a2)
    {
      int v21 = 4;
    }
    else
    {
      int v21 = *(_DWORD *)(a2 + 16);
      if (!v21) {
        return v6 == v18;
      }
      uint64_t v20 = *(void *)(a2 + 8);
    }
    int v22 = v21 - 1;
    LODWORD(v23) = (v21 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    unsigned int v24 = (uint64_t *)(v20 + 8 * v23);
    uint64_t v25 = *v24;
    if (*v24 == a3)
    {
LABEL_38:
      *unsigned int v24 = -8192;
      int v28 = *(_DWORD *)(a2 + 4) + 1;
      *(_DWORD *)a2 -= 2;
      *(_DWORD *)(a2 + 4) = v28;
    }
    else
    {
      int v26 = 1;
      while (v25 != -4096)
      {
        int v27 = v23 + v26++;
        uint64_t v23 = v27 & v22;
        uint64_t v25 = *(void *)(v20 + 8 * v23);
        if (v25 == a3)
        {
          unsigned int v24 = (uint64_t *)(v20 + 8 * v23);
          goto LABEL_38;
        }
      }
    }
  }
  return v6 == v18;
}

uint64_t sub_1CC608328(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 12);
  if (v2 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v5 = (2 * v2) | 1;
  if (v5 >= 0xFFFFFFFF) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = (char *)malloc_type_malloc(8 * v6, 0x4065EBACuLL);
  if (!v7) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  int v10 = (unsigned __int8 **)&v7[8 * v9];
  unsigned int v11 = *a2;
  uint64_t *v10 = *a2;
  if (v11)
  {
    llvm::MetadataTracking::track((uint64_t)v10, v11, 2);
    uint64_t v9 = *(unsigned int *)(a1 + 8);
  }
  uint64_t v12 = *(void **)a1;
  if (v9)
  {
    uint64_t v13 = 8 * v9;
    int v14 = v8;
    while (1)
    {
      *int v14 = *v12;
      BOOL v15 = (unsigned __int8 *)*v12;
      if (*v12) {
        break;
      }
LABEL_15:
      ++v12;
      ++v14;
      v13 -= 8;
      if (!v13)
      {
        uint64_t v12 = *(void **)a1;
        uint64_t v18 = *(unsigned int *)(a1 + 8);
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = v12 - 1;
          do
          {
            int v21 = (unsigned __int8 *)v20[v19];
            if (v21) {
              llvm::MetadataTracking::untrack((uint64_t)&v20[v19], v21);
            }
            --v19;
          }
          while (v19 * 8);
          uint64_t v12 = *(void **)a1;
        }
        goto LABEL_26;
      }
    }
    int v16 = *v15;
    if ((v16 - 4) > 0x1E)
    {
      if ((v16 - 3) < 0xFFFFFFFE)
      {
LABEL_14:
        *uint64_t v12 = 0;
        goto LABEL_15;
      }
      unint64_t v17 = (unint64_t)(v15 + 8);
    }
    else
    {
      if ((v15[1] & 0x7F) != 2 && !*((_DWORD *)v15 + 3)) {
        goto LABEL_14;
      }
      uint64_t v24 = *((void *)v15 + 2);
      if ((v24 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v17 = v24 & 0xFFFFFFFFFFFFFFF8;
      if ((v24 & 0xFFFFFFFFFFFFFFF8) == 0) {
        goto LABEL_14;
      }
    }
    llvm::ReplaceableMetadataImpl::moveRef(v17, (uint64_t)v12, (uint64_t)v14);
    goto LABEL_14;
  }
LABEL_26:
  if (v12 != (void *)(a1 + 16)) {
    free(v12);
  }
  *(void *)a1 = v8;
  unsigned int v22 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v22;
  *(_DWORD *)(a1 + 12) = v6;
  return (uint64_t)&v8[v22 - 1];
}

void sub_1CC6084C4(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, __n128 a7)
{
  uint64_t v8 = a1;
  if (a4 == 2)
  {
    unsigned __int32 v9 = a2[-1].n128_u32[0];
    unsigned __int32 v10 = a1->n128_u32[0];
    if (v9 < a1->n128_u32[0])
    {
      a1->n128_u32[0] = v9;
      a2[-1].n128_u32[0] = v10;
      unint64_t v28 = a1->n128_u64[1];
      a1->n128_u64[1] = a2[-1].n128_u64[1];
      a2[-1].n128_u64[1] = v28;
    }
  }
  else if (a4 >= 2)
  {
    if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        uint64_t v32 = a1 + 1;
        if (&a1[1] != a2)
        {
          uint64_t v33 = 0;
          unint64_t v34 = a1;
          do
          {
            BOOL v35 = v32;
            unsigned __int32 v36 = v34[1].n128_u32[0];
            unsigned __int32 v37 = v34->n128_u32[0];
            if (v36 < v34->n128_u32[0])
            {
              unint64_t v38 = v34[1].n128_u64[1];
              uint64_t v39 = v33;
              while (1)
              {
                uint64_t v40 = (char *)a1 + v39;
                *((_DWORD *)v40 + 4) = v37;
                *((void *)v40 + 3) = *(unint64_t *)((char *)&a1->n128_u64[1] + v39);
                if (!v39) {
                  break;
                }
                unsigned __int32 v37 = *((_DWORD *)v40 - 4);
                v39 -= 16;
                if (v36 >= v37)
                {
                  uint64_t v41 = (uint64_t)&a1[1] + v39;
                  goto LABEL_34;
                }
              }
              uint64_t v41 = (uint64_t)a1;
LABEL_34:
              *(_DWORD *)uint64_t v41 = v36;
              *(void *)(v41 + 8) = v38;
            }
            uint64_t v32 = v35 + 1;
            v33 += 16;
            unint64_t v34 = v35;
          }
          while (&v35[1] != a2);
        }
      }
    }
    else
    {
      uint64_t v13 = (char *)a5;
      unint64_t v15 = a4 >> 1;
      int v16 = &a1[a4 >> 1];
      unint64_t v17 = a4 >> 1;
      if ((uint64_t)a4 > a6)
      {
        sub_1CC6084C4(a1, v16, a3, v17, a5, a6);
        sub_1CC6084C4(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v13, a6);
        sub_1CC60899C((char *)v8, (char *)&v8[a4 >> 1], (char *)a2, a4 >> 1, a4 - (a4 >> 1), v13, a6);
      }
      else
      {
        __n128 v18 = sub_1CC60874C(a1, v16, a3, v17, a5, a7);
        uint64_t v19 = (__n128 *)&v13[16 * v15];
        sub_1CC60874C(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v19, v18);
        uint64_t v20 = &v13[16 * a4];
        int v21 = v19;
        while (v21 != (__n128 *)v20)
        {
          unsigned __int32 v22 = v21->n128_u32[0];
          if (v21->n128_u32[0] < *(_DWORD *)v13)
          {
            uint64_t v23 = v21;
          }
          else
          {
            unsigned __int32 v22 = *(_DWORD *)v13;
            uint64_t v23 = (__n128 *)v13;
          }
          unint64_t v24 = v23->n128_u64[1];
          if (v21->n128_u32[0] < *(_DWORD *)v13) {
            ++v21;
          }
          else {
            v13 += 16;
          }
          v8->n128_u32[0] = v22;
          v8->n128_u64[1] = v24;
          ++v8;
          if (v13 == (char *)v19)
          {
            if (v21 != (__n128 *)v20)
            {
              uint64_t v25 = 0;
              do
              {
                int v26 = &v21[v25];
                int v27 = &v8[v25];
                v27->n128_u32[0] = v21[v25].n128_u32[0];
                v27->n128_u64[1] = v21[v25++].n128_u64[1];
              }
              while (&v26[1] != (__n128 *)v20);
            }
            return;
          }
        }
        if (v13 != (char *)v19)
        {
          unint64_t v29 = 0;
          do
          {
            uint64_t v30 = &v8[v29 / 0x10];
            unint64_t v31 = (__n128 *)&v13[v29];
            v30->n128_u32[0] = *(_DWORD *)&v13[v29];
            v30->n128_u64[1] = *(void *)&v13[v29 + 8];
            v29 += 16;
          }
          while (&v31[1] != v19);
        }
      }
    }
  }
}

__n128 sub_1CC60874C(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, __n128 result)
{
  if (a4 == 2)
  {
    unsigned __int32 v7 = a2[-1].n128_u32[0];
    uint64_t v6 = a2 - 1;
    if (v7 < a1->n128_u32[0])
    {
      *a5 = *v6;
      BOOL result = *a1;
    }
    else
    {
      *a5 = *a1;
      BOOL result = *v6;
    }
    a5[1] = result;
  }
  else if (a4 == 1)
  {
    BOOL result = *a1;
    *a5 = *a1;
  }
  else if (a4)
  {
    uint64_t v8 = a1;
    unsigned __int32 v9 = a5;
    if ((uint64_t)a4 > 8)
    {
      unint64_t v20 = a4 >> 1;
      int v21 = &a1[a4 >> 1];
      sub_1CC6084C4(a1, v21, a3, a4 >> 1, a5, a4 >> 1);
      sub_1CC6084C4(v21, a2, a3, a4 - (a4 >> 1), &v9[v20], a4 - (a4 >> 1));
      uint64_t v23 = v21;
      while (v23 != a2)
      {
        if (v23->n128_u32[0] >= v8->n128_u32[0])
        {
          __n128 v25 = *v8++;
          BOOL result = v25;
        }
        else
        {
          __n128 v24 = *v23++;
          BOOL result = v24;
        }
        *v9++ = result;
        if (v8 == v21)
        {
          if (v23 != a2)
          {
            uint64_t v26 = 0;
            do
            {
              BOOL result = v23[v26];
              v9[v26++] = result;
            }
            while (&v23[v26] != a2);
          }
          return result;
        }
      }
      if (v8 != v21)
      {
        uint64_t v27 = 0;
        do
        {
          BOOL result = v8[v27];
          v9[v27++] = result;
        }
        while (&v8[v27] != v21);
      }
    }
    else if (a1 != a2)
    {
      BOOL result = *a1;
      *a5 = *a1;
      unsigned __int32 v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        uint64_t v11 = 0;
        uint64_t v12 = a5;
        uint64_t v13 = a5;
        do
        {
          int v14 = v10;
          unsigned __int32 v15 = v13->n128_u32[0];
          ++v13;
          if (v8[1].n128_u32[0] >= v15)
          {
            BOOL result = *v10;
            *uint64_t v13 = *v10;
          }
          else
          {
            BOOL result = *v12;
            *uint64_t v13 = *v12;
            int v16 = a5;
            if (v12 != a5)
            {
              uint64_t v17 = v11;
              while (1)
              {
                int v16 = (__n128 *)((char *)a5 + v17);
                unsigned __int32 v18 = *(unsigned __int32 *)((char *)a5[-1].n128_u32 + v17);
                if (v14->n128_u32[0] >= v18) {
                  break;
                }
                v16->n128_u32[0] = v18;
                v16->n128_u64[1] = v16[-1].n128_u64[1];
                v17 -= 16;
                if (!v17)
                {
                  int v16 = a5;
                  break;
                }
              }
            }
            v16->n128_u32[0] = v14->n128_u32[0];
            v16->n128_u64[1] = v8[1].n128_u64[1];
          }
          unsigned __int32 v10 = v14 + 1;
          v11 += 16;
          uint64_t v12 = v13;
          uint64_t v8 = v14;
        }
        while (&v14[1] != a2);
      }
    }
  }
  return result;
}

char *sub_1CC60899C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v9 = 0;
      unsigned int v10 = *(_DWORD *)a2;
      uint64_t v11 = -a4;
      while (1)
      {
        unsigned int v12 = *(_DWORD *)&result[v9];
        if (v10 < v12) {
          break;
        }
        v9 += 16;
        BOOL v52 = __CFADD__(v11++, 1);
        if (v52) {
          return result;
        }
      }
      uint64_t v13 = &result[v9];
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          uint64_t v61 = &result[v9];
          *(_DWORD *)uint64_t v61 = v10;
          *(_DWORD *)a2 = v12;
          uint64_t v62 = *(void *)&result[v9 + 8];
          *((void *)v61 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v62;
          return result;
        }
        if (v11 <= 0) {
          uint64_t v24 = -v11;
        }
        else {
          uint64_t v24 = 1 - v11;
        }
        uint64_t v23 = v24 >> 1;
        uint64_t v17 = &result[16 * (v24 >> 1) + v9];
        int v16 = a3;
        if (a3 != a2)
        {
          unint64_t v25 = (a3 - a2) >> 4;
          int v16 = a2;
          do
          {
            unint64_t v26 = v25 >> 1;
            uint64_t v27 = &v16[16 * (v25 >> 1)];
            unsigned int v29 = *(_DWORD *)v27;
            unint64_t v28 = v27 + 16;
            v25 += ~(v25 >> 1);
            if (v29 < *(_DWORD *)v17) {
              int v16 = v28;
            }
            else {
              unint64_t v25 = v26;
            }
          }
          while (v25);
        }
        uint64_t v15 = (v16 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v14 = a5;
        }
        else {
          uint64_t v14 = a5 + 1;
        }
        uint64_t v15 = v14 >> 1;
        int v16 = &a2[16 * (v14 >> 1)];
        uint64_t v17 = a2;
        if (v13 != a2)
        {
          unint64_t v18 = (a2 - result - v9) >> 4;
          uint64_t v17 = &result[v9];
          do
          {
            unint64_t v19 = v18 >> 1;
            unint64_t v20 = (unsigned int *)&v17[16 * (v18 >> 1)];
            unsigned int v22 = *v20;
            int v21 = (char *)(v20 + 4);
            v18 += ~(v18 >> 1);
            if (*(_DWORD *)v16 < v22) {
              unint64_t v18 = v19;
            }
            else {
              uint64_t v17 = v21;
            }
          }
          while (v18);
        }
        uint64_t v23 = (v17 - result - v9) >> 4;
      }
      uint64_t v30 = v16;
      if (v17 != a2)
      {
        uint64_t v30 = v17;
        if (a2 != v16)
        {
          int v31 = *(_DWORD *)v17;
          *(_DWORD *)uint64_t v17 = v10;
          *(_DWORD *)a2 = v31;
          uint64_t v32 = *((void *)v17 + 1);
          *((void *)v17 + 1) = *((void *)a2 + 1);
          *((void *)a2 + 1) = v32;
          uint64_t v30 = v17 + 16;
          for (unint64_t i = a2 + 16; i != v16; i += 16)
          {
            if (v30 == a2) {
              a2 = i;
            }
            int v34 = *(_DWORD *)v30;
            *(_DWORD *)uint64_t v30 = *(_DWORD *)i;
            *(_DWORD *)unint64_t i = v34;
            uint64_t v35 = *((void *)v30 + 1);
            *((void *)v30 + 1) = *((void *)i + 1);
            *((void *)i + 1) = v35;
            v30 += 16;
          }
          if (v30 == a2)
          {
            uint64_t v30 = a2;
          }
          else
          {
            unsigned __int32 v36 = v30;
            unsigned __int32 v37 = a2;
            do
            {
              while (1)
              {
                int v38 = *(_DWORD *)v36;
                *(_DWORD *)unsigned __int32 v36 = *(_DWORD *)a2;
                *(_DWORD *)a2 = v38;
                uint64_t v39 = *((void *)v36 + 1);
                *((void *)v36 + 1) = *((void *)a2 + 1);
                *((void *)a2 + 1) = v39;
                v36 += 16;
                a2 += 16;
                if (a2 == v16) {
                  break;
                }
                if (v36 == v37) {
                  unsigned __int32 v37 = a2;
                }
              }
              a2 = v37;
            }
            while (v36 != v37);
          }
        }
      }
      a4 = -(v23 + v11);
      uint64_t v40 = a5 - v15;
      if (v23 + v15 >= a5 - (v23 + v15) - v11)
      {
        uint64_t v45 = v16;
        uint64_t v46 = a6;
        sub_1CC60899C(v30, v45, a3, a4, a5 - v15, a6, a7);
        a6 = v46;
        int v16 = v17;
        uint64_t v40 = v15;
        a4 = v23;
        a3 = v30;
      }
      else
      {
        uint64_t v41 = v13;
        unint64_t v42 = a3;
        uint64_t v43 = v15;
        uint64_t v44 = a6;
        sub_1CC60899C(v41, v17, v30, v23, v43, a6, a7);
        a3 = v42;
        a6 = v44;
        uint64_t v13 = v30;
      }
      a5 = v40;
      BOOL result = v13;
      a2 = v16;
      if (!v40) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        uint64_t v55 = 0;
        do
        {
          *(_OWORD *)&a6[v55] = *(_OWORD *)&result[v55];
          v55 += 16;
        }
        while (&result[v55] != a2);
        if (v55)
        {
          unint64_t v56 = &a6[v55];
          uint64_t v57 = (uint64_t)&a6[v55 - 16];
          while (a2 != a3)
          {
            unsigned int v58 = *(_DWORD *)a2;
            if (*(_DWORD *)a2 < *(_DWORD *)a6)
            {
              uint64_t v59 = a2;
            }
            else
            {
              unsigned int v58 = *(_DWORD *)a6;
              uint64_t v59 = a6;
            }
            uint64_t v60 = *((void *)v59 + 1);
            if (*(_DWORD *)a2 < *(_DWORD *)a6) {
              a2 += 16;
            }
            else {
              a6 += 16;
            }
            *(_DWORD *)BOOL result = v58;
            *((void *)result + 1) = v60;
            result += 16;
            if (v56 == a6) {
              return result;
            }
          }
          if (v56 != a6)
          {
            uint64_t v65 = 0;
            do
            {
              uint64_t v66 = &result[v65];
              uint64_t v67 = &a6[v65];
              *(_DWORD *)uint64_t v66 = *(_DWORD *)&a6[v65];
              *((void *)v66 + 1) = *(void *)&a6[v65 + 8];
              v65 += 16;
            }
            while ((char *)v57 != v67);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      uint64_t v47 = 0;
      do
      {
        *(_OWORD *)&a6[v47] = *(_OWORD *)&a2[v47];
        v47 += 16;
      }
      while (&a2[v47] != a3);
      if (v47)
      {
        unint64_t v48 = &a6[v47];
        unint64_t v49 = a3 - 8;
        while (a2 != result)
        {
          unsigned int v50 = *((_DWORD *)a2 - 4);
          unsigned int v51 = *((_DWORD *)v48 - 4);
          BOOL v52 = v51 >= v50;
          if (v51 < v50)
          {
            uint64_t v53 = a2;
          }
          else
          {
            unsigned int v50 = *((_DWORD *)v48 - 4);
            uint64_t v53 = v48;
          }
          if (!v52) {
            a2 -= 16;
          }
          uint64_t v54 = *((void *)v53 - 1);
          if (v52) {
            v48 -= 16;
          }
          *((_DWORD *)v49 - 2) = v50;
          *(void *)unint64_t v49 = v54;
          v49 -= 16;
          if (v48 == a6) {
            return result;
          }
        }
        if (v48 != a6)
        {
          unint64_t v63 = 0;
          do
          {
            uint64_t v64 = &v49[v63];
            *((_DWORD *)v64 - 2) = *(_DWORD *)&v48[v63 - 16];
            *(void *)uint64_t v64 = *(void *)&v48[v63 - 8];
            v63 -= 16;
          }
          while (&v48[v63] != a6);
        }
      }
    }
  }
  return result;
}

void sub_1CC608DE8(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(16 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unsigned __int32 v7 = v6;
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    unsigned int v10 = v7 + 8;
    uint64_t v11 = 16 * v9;
    unsigned int v12 = v8 + 1;
    while (1)
    {
      *((_DWORD *)v10 - 2) = *((_DWORD *)v12 - 2);
      void *v10 = *v12;
      uint64_t v13 = (unsigned __int8 *)*v12;
      if (*v12) {
        break;
      }
LABEL_16:
      v10 += 2;
      v12 += 2;
      v11 -= 16;
      if (!v11)
      {
        uint64_t v8 = *(void **)a1;
        uint64_t v16 = *(unsigned int *)(a1 + 8);
        if (v16)
        {
          uint64_t v17 = (char *)(v8 - 1);
          uint64_t v18 = 16 * v16;
          do
          {
            unint64_t v19 = *(unsigned __int8 **)&v17[v18];
            if (v19) {
              llvm::MetadataTracking::untrack((uint64_t)&v17[v18], v19);
            }
            v18 -= 16;
          }
          while (v18);
          uint64_t v8 = *(void **)a1;
        }
        goto LABEL_27;
      }
    }
    int v14 = *v13;
    if ((v14 - 4) > 0x1E)
    {
      if ((v14 - 3) < 0xFFFFFFFE)
      {
LABEL_15:
        *unsigned int v12 = 0;
        goto LABEL_16;
      }
      unint64_t v15 = (unint64_t)(v13 + 8);
    }
    else
    {
      if ((v13[1] & 0x7F) != 2 && !*((_DWORD *)v13 + 3)) {
        goto LABEL_15;
      }
      uint64_t v20 = *((void *)v13 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_15;
      }
      unint64_t v15 = v20 & 0xFFFFFFFFFFFFFFF8;
      if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0) {
        goto LABEL_15;
      }
    }
    llvm::ReplaceableMetadataImpl::moveRef(v15, (uint64_t)v12, (uint64_t)v10);
    goto LABEL_15;
  }
LABEL_27:
  if (v8 != (void *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void *sub_1CC608F78(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    uint64_t v13 = 0;
LABEL_16:
    uint64_t v6 = sub_1CC609054(a1, (uint64_t)a2, a2, v13);
    uint64_t v14 = *a2;
    void v6[3] = 0;
    void v6[4] = 0;
    *uint64_t v6 = v14;
    v6[1] = v6 + 3;
    v6[2] = 0x100000000;
    return v6;
  }
  int v4 = v3 - 1;
  unsigned int v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
  uint64_t v6 = (void *)(*(void *)a1 + 40 * v5);
  uint64_t v7 = *v6;
  if (*a2 != *v6)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v7 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v7 == -8192;
      }
      if (v11) {
        uint64_t v9 = v6;
      }
      unsigned int v12 = v5 + v10++;
      unsigned int v5 = v12 & v4;
      uint64_t v6 = (void *)(*(void *)a1 + 40 * (v12 & v4));
      uint64_t v7 = *v6;
      if (*a2 == *v6) {
        return v6;
      }
    }
    if (v9) {
      uint64_t v13 = v9;
    }
    else {
      uint64_t v13 = v6;
    }
    goto LABEL_16;
  }
  return v6;
}

void *sub_1CC609054(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC6091D8(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (void *)(*(void *)a1 + 40 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          uint64_t v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 40 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CC6091D8(a1, v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (void *)(*(void *)a1 + 40 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      uint64_t v13 = 0;
      int v20 = 1;
      while (v19 != -4096)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -8192;
        }
        if (v21) {
          uint64_t v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 40 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC6091D8(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC6092B0(a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 40 * v10;
    do
    {
      *BOOL result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void sub_1CC6092B0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 40 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 == a3) {
    return;
  }
  do
  {
    uint64_t v9 = *v4;
    if ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000) {
      goto LABEL_32;
    }
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
    uint64_t v12 = *(void *)a1 + 40 * v11;
    uint64_t v13 = *(void *)v12;
    if (v9 != *(void *)v12)
    {
      uint64_t v27 = 0;
      int v28 = 1;
      while (v13 != -4096)
      {
        if (v27) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = v13 == -8192;
        }
        if (v29) {
          uint64_t v27 = v12;
        }
        unsigned int v30 = v11 + v28++;
        unsigned int v11 = v30 & v10;
        uint64_t v12 = *(void *)a1 + 40 * v11;
        uint64_t v13 = *(void *)v12;
        if (v9 == *(void *)v12) {
          goto LABEL_7;
        }
      }
      if (v27) {
        uint64_t v12 = v27;
      }
    }
LABEL_7:
    *(void *)uint64_t v12 = v9;
    *(void *)(v12 + 8) = v12 + 24;
    *(void *)(v12 + 16) = 0x100000000;
    uint64_t v14 = *((unsigned int *)v4 + 4);
    if (!v14)
    {
      ++*(_DWORD *)(a1 + 8);
LABEL_52:
      BOOL v15 = (uint64_t *)v4[1];
      goto LABEL_30;
    }
    if ((uint64_t *)v12 == v4)
    {
      ++*(_DWORD *)(a1 + 8);
      uint64_t v33 = v4[1] - 8;
      uint64_t v34 = 16 * v14;
      while (1)
      {
        uint64_t v35 = *(unsigned __int8 **)(v33 + v34);
        if (v35)
        {
          int v36 = *v35;
          if ((v36 - 4) > 0x1E)
          {
            if ((v36 - 3) >= 0xFFFFFFFE) {
              uint64_t v37 = *(void *)(v33 + v34);
            }
            else {
              uint64_t v37 = 0;
            }
            if ((v36 - 3) < 0xFFFFFFFE)
            {
              if (v36 == 3) {
                *((void *)v35 + 1) = 0;
              }
              goto LABEL_58;
            }
            unint64_t v38 = v37 + 8;
          }
          else
          {
            if ((v35[1] & 0x7F) != 2 && !*((_DWORD *)v35 + 3)) {
              goto LABEL_58;
            }
            uint64_t v40 = *((void *)v35 + 2);
            if ((v40 & 4) == 0) {
              goto LABEL_58;
            }
            unint64_t v38 = v40 & 0xFFFFFFFFFFFFFFF8;
            if (!v38) {
              goto LABEL_58;
            }
          }
          uint64_t v41 = v33 + v34;
          sub_1CC5FA668(v38 + 16, &v41);
        }
LABEL_58:
        v34 -= 16;
        if (!v34) {
          goto LABEL_52;
        }
      }
    }
    BOOL v15 = (uint64_t *)v4[1];
    if (v15 != v4 + 3)
    {
      *(void *)(v12 + 8) = v15;
      int v31 = *((_DWORD *)v4 + 5);
      *(_DWORD *)(v12 + 16) = v14;
      *(_DWORD *)(v12 + 20) = v31;
      v4[1] = (uint64_t)(v4 + 3);
      *((_DWORD *)v4 + 5) = 0;
      BOOL v15 = v4 + 3;
      goto LABEL_29;
    }
    if (v14 > 1)
    {
      sub_1CC608DE8(v12 + 8, *((unsigned int *)v4 + 4));
      BOOL v15 = (uint64_t *)v4[1];
      uint64_t v39 = *((unsigned int *)v4 + 4);
      if (!v39) {
        goto LABEL_23;
      }
      unsigned int v16 = (char *)&v15[2 * v39];
    }
    else
    {
      unsigned int v16 = (char *)&v15[2 * v14];
    }
    int v17 = (void *)(*(void *)(v12 + 8) + 8);
    unsigned int v18 = v15 + 1;
    do
    {
      *((_DWORD *)v17 - 2) = *((_DWORD *)v18 - 2);
      *int v17 = *v18;
      uint64_t v19 = (unsigned __int8 *)*v18;
      if (!*v18) {
        goto LABEL_18;
      }
      int v20 = *v19;
      if ((v20 - 4) <= 0x1E)
      {
        if ((v19[1] & 0x7F) != 2 && !*((_DWORD *)v19 + 3)) {
          goto LABEL_17;
        }
        uint64_t v32 = *((void *)v19 + 2);
        if ((v32 & 4) == 0) {
          goto LABEL_17;
        }
        unint64_t v22 = v32 & 0xFFFFFFFFFFFFFFF8;
        if ((v32 & 0xFFFFFFFFFFFFFFF8) == 0) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
      if ((v20 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v22 = (unint64_t)(v19 + 8);
LABEL_22:
        llvm::ReplaceableMetadataImpl::moveRef(v22, (uint64_t)v18, (uint64_t)v17);
      }
LABEL_17:
      *unsigned int v18 = 0;
LABEL_18:
      v17 += 2;
      BOOL v21 = (char *)(v18 + 1);
      v18 += 2;
    }
    while (v21 != v16);
    BOOL v15 = (uint64_t *)v4[1];
LABEL_23:
    *(_DWORD *)(v12 + 16) = v14;
    uint64_t v23 = *((unsigned int *)v4 + 4);
    if (v23)
    {
      uint64_t v24 = (char *)(v15 - 1);
      uint64_t v25 = 16 * v23;
      do
      {
        unint64_t v26 = *(unsigned __int8 **)&v24[v25];
        if (v26) {
          llvm::MetadataTracking::untrack((uint64_t)&v24[v25], v26);
        }
        v25 -= 16;
      }
      while (v25);
      BOOL v15 = (uint64_t *)v4[1];
    }
LABEL_29:
    *((_DWORD *)v4 + 4) = 0;
    ++*(_DWORD *)(a1 + 8);
LABEL_30:
    if (v15 != v4 + 3) {
      free(v15);
    }
LABEL_32:
    v4 += 5;
  }
  while (v4 != a3);
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::getListOwner(uint64_t a1)
{
  return a1 - 24;
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::getList(uint64_t a1)
{
  return a1 + 24;
}

uint64_t llvm::SymbolTableListTraits<llvm::Function>::getSymTab(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

void llvm::SymbolTableListTraits<llvm::Function>::addNodeToList(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) = a1 - 24;
  if ((*(unsigned char *)(a2 + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(llvm::ValueSymbolTable **)(a1 + 88);
    if (v2) {
      llvm::ValueSymbolTable::reinsertValue(v2, (llvm::Value *)a2);
    }
  }
}

void llvm::SymbolTableListTraits<llvm::Function>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v4 = a3;
    int v31 = *(llvm::ValueSymbolTable **)(a1 + 88);
    uint64_t v32 = (uint64_t **)(a1 - 24);
    uint64_t v35 = *(llvm::ValueSymbolTable **)(a2 + 88);
    if (v31 == v35)
    {
      if (a3 != a4)
      {
        do
        {
          uint64_t v29 = v4 - 56;
          if (!v4) {
            uint64_t v29 = 0;
          }
          *(void *)(v29 + 40) = v32;
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4 != a4);
      }
    }
    else if (a3 != a4)
    {
      while (1)
      {
        unint64_t v5 = v4 ? (uint64_t ***)(v4 - 56) : 0;
        int v34 = *((_DWORD *)v5 + 5) & 0x10000000;
        if (v35)
        {
          if (v34) {
            break;
          }
        }
LABEL_29:
        v5[5] = v32;
        if (v31)
        {
          if (v34) {
            llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)v5);
          }
        }
        uint64_t v4 = *(void *)(v4 + 8);
        if (v4 == a4) {
          return;
        }
      }
      uint64_t v6 = ***v5;
      uint64_t v7 = *(void *)(v6 + 152);
      uint64_t v8 = *(unsigned int *)(v6 + 168);
      if (v8)
      {
        LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        int v10 = (uint64_t ****)(v7 + 16 * v9);
        unsigned int v11 = *v10;
        if (*v10 == v5) {
          goto LABEL_16;
        }
        int v12 = 1;
        while (v11 != (uint64_t ***)-4096)
        {
          int v13 = v9 + v12++;
          uint64_t v9 = v13 & (v8 - 1);
          unsigned int v11 = *(uint64_t ****)(v7 + 16 * v9);
          if (v11 == v5)
          {
            int v10 = (uint64_t ****)(v7 + 16 * v9);
            goto LABEL_16;
          }
        }
      }
      int v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_16:
      uint64_t v14 = *((unsigned int *)v35 + 2);
      if (v14)
      {
        BOOL v15 = (size_t *)v10[1];
        uint64_t v33 = *((unsigned int *)v35 + 5);
        unsigned int v16 = (unsigned __int8 *)v15 + v33;
        size_t v17 = *v15;
        if (*v15)
        {
          int v18 = 0;
          size_t v19 = *v15;
          int v20 = v16;
          do
          {
            int v21 = *v20++;
            int v18 = 33 * v18 + v21;
            --v19;
          }
          while (v19);
        }
        else
        {
          int v18 = 0;
        }
        unsigned int v22 = v14 - 1;
        uint64_t v23 = *(void *)v35;
        uint64_t v24 = *(void *)v35 + 8 * v14 + 8;
        int v25 = 1;
        int v26 = v18;
        while (1)
        {
          uint64_t v27 = v26 & v22;
          int v28 = *(void **)(v23 + 8 * v27);
          if (v28 != (void *)-8)
          {
            if (!v28) {
              goto LABEL_29;
            }
            if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v33, v17))) {
              break;
            }
          }
          int v26 = v25 + v27;
          ++v25;
        }
        *(void *)(v23 + 8 * (int)v27) = -8;
        *(int32x2_t *)((char *)v35 + 12) = vadd_s32(*(int32x2_t *)((char *)v35 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_29;
    }
  }
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::getListOwner(uint64_t a1)
{
  return a1 - 8;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::getList(uint64_t a1)
{
  return a1 + 8;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::getSymTab(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

void llvm::SymbolTableListTraits<llvm::GlobalVariable>::addNodeToList(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 40) = a1 - 8;
  if ((*(unsigned char *)(a2 + 23) & 0x10) != 0)
  {
    uint64_t v2 = *(llvm::ValueSymbolTable **)(a1 + 104);
    if (v2) {
      llvm::ValueSymbolTable::reinsertValue(v2, (llvm::Value *)a2);
    }
  }
}

int32x2_t llvm::SymbolTableListTraits<llvm::GlobalVariable>::removeNodeFromList(uint64_t a1, uint64_t ***a2)
{
  a2[5] = 0;
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    return result;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 104);
  if (!v2) {
    return result;
  }
  uint64_t v3 = ***a2;
  uint64_t v4 = *(void *)(v3 + 152);
  uint64_t v5 = *(unsigned int *)(v3 + 168);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == a2) {
      goto LABEL_9;
    }
    int v9 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(uint64_t ****)(v4 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
        goto LABEL_9;
      }
    }
  }
  uint64_t v7 = (uint64_t ****)(v4 + 16 * v5);
LABEL_9:
  uint64_t v11 = *((unsigned int *)v2 + 2);
  if (v11)
  {
    int v12 = (size_t *)v7[1];
    uint64_t v13 = *((unsigned int *)v2 + 5);
    uint64_t v14 = (unsigned __int8 *)v12 + v13;
    size_t v15 = *v12;
    if (*v12)
    {
      int v16 = 0;
      size_t v17 = *v12;
      int v18 = v14;
      do
      {
        int v19 = *v18++;
        int v16 = 33 * v16 + v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      int v16 = 0;
    }
    unsigned int v20 = v11 - 1;
    uint64_t v21 = *v2;
    uint64_t v22 = *v2 + 8 * v11 + 8;
    int v23 = 1;
    int v24 = v16;
    while (1)
    {
      uint64_t v25 = v24 & v20;
      int v26 = *(void **)(v21 + 8 * v25);
      if (v26 != (void *)-8)
      {
        if (!v26) {
          return result;
        }
        if (*(_DWORD *)(v22 + 4 * v25) == v16 && v15 == *v26 && (!v15 || !memcmp(v14, (char *)v26 + v13, v15))) {
          break;
        }
      }
      int v24 = v23 + v25;
      ++v23;
    }
    *(void *)(v21 + 8 * (int)v25) = -8;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)v2 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)v2 + 12) = (uint64_t)result;
  }
  return result;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::getListOwner(uint64_t a1)
{
  return a1 - 40;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::getList(uint64_t a1)
{
  return a1 + 40;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalAlias>::getSymTab(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

void llvm::SymbolTableListTraits<llvm::GlobalAlias>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v4 = a3;
    int v31 = *(llvm::ValueSymbolTable **)(a1 + 72);
    uint64_t v32 = (uint64_t **)(a1 - 40);
    uint64_t v35 = *(llvm::ValueSymbolTable **)(a2 + 72);
    if (v31 == v35)
    {
      if (a3 != a4)
      {
        do
        {
          uint64_t v29 = v4 - 48;
          if (!v4) {
            uint64_t v29 = 0;
          }
          *(void *)(v29 + 40) = v32;
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4 != a4);
      }
    }
    else if (a3 != a4)
    {
      while (1)
      {
        uint64_t v5 = v4 ? (uint64_t ***)(v4 - 48) : 0;
        int v34 = *((_DWORD *)v5 + 5) & 0x10000000;
        if (v35)
        {
          if (v34) {
            break;
          }
        }
LABEL_29:
        v5[5] = v32;
        if (v31)
        {
          if (v34) {
            llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)v5);
          }
        }
        uint64_t v4 = *(void *)(v4 + 8);
        if (v4 == a4) {
          return;
        }
      }
      uint64_t v6 = ***v5;
      uint64_t v7 = *(void *)(v6 + 152);
      uint64_t v8 = *(unsigned int *)(v6 + 168);
      if (v8)
      {
        LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        int v10 = (uint64_t ****)(v7 + 16 * v9);
        uint64_t v11 = *v10;
        if (*v10 == v5) {
          goto LABEL_16;
        }
        int v12 = 1;
        while (v11 != (uint64_t ***)-4096)
        {
          int v13 = v9 + v12++;
          uint64_t v9 = v13 & (v8 - 1);
          uint64_t v11 = *(uint64_t ****)(v7 + 16 * v9);
          if (v11 == v5)
          {
            int v10 = (uint64_t ****)(v7 + 16 * v9);
            goto LABEL_16;
          }
        }
      }
      int v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_16:
      uint64_t v14 = *((unsigned int *)v35 + 2);
      if (v14)
      {
        size_t v15 = (size_t *)v10[1];
        uint64_t v33 = *((unsigned int *)v35 + 5);
        int v16 = (unsigned __int8 *)v15 + v33;
        size_t v17 = *v15;
        if (*v15)
        {
          int v18 = 0;
          size_t v19 = *v15;
          unsigned int v20 = v16;
          do
          {
            int v21 = *v20++;
            int v18 = 33 * v18 + v21;
            --v19;
          }
          while (v19);
        }
        else
        {
          int v18 = 0;
        }
        unsigned int v22 = v14 - 1;
        uint64_t v23 = *(void *)v35;
        uint64_t v24 = *(void *)v35 + 8 * v14 + 8;
        int v25 = 1;
        int v26 = v18;
        while (1)
        {
          uint64_t v27 = v26 & v22;
          int v28 = *(void **)(v23 + 8 * v27);
          if (v28 != (void *)-8)
          {
            if (!v28) {
              goto LABEL_29;
            }
            if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v33, v17))) {
              break;
            }
          }
          int v26 = v25 + v27;
          ++v25;
        }
        *(void *)(v23 + 8 * (int)v27) = -8;
        *(int32x2_t *)((char *)v35 + 12) = vadd_s32(*(int32x2_t *)((char *)v35 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_29;
    }
  }
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::getListOwner(uint64_t a1)
{
  return a1 - 56;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::getList(uint64_t a1)
{
  return a1 + 56;
}

uint64_t llvm::SymbolTableListTraits<llvm::GlobalIFunc>::getSymTab(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

void llvm::SymbolTableListTraits<llvm::GlobalIFunc>::transferNodesFromList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v4 = a3;
    int v31 = *(llvm::ValueSymbolTable **)(a1 + 56);
    uint64_t v32 = (uint64_t **)(a1 - 56);
    uint64_t v35 = *(llvm::ValueSymbolTable **)(a2 + 56);
    if (v31 == v35)
    {
      if (a3 != a4)
      {
        do
        {
          uint64_t v29 = v4 - 56;
          if (!v4) {
            uint64_t v29 = 0;
          }
          *(void *)(v29 + 40) = v32;
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4 != a4);
      }
    }
    else if (a3 != a4)
    {
      while (1)
      {
        uint64_t v5 = v4 ? (uint64_t ***)(v4 - 56) : 0;
        int v34 = *((_DWORD *)v5 + 5) & 0x10000000;
        if (v35)
        {
          if (v34) {
            break;
          }
        }
LABEL_29:
        v5[5] = v32;
        if (v31)
        {
          if (v34) {
            llvm::ValueSymbolTable::reinsertValue(v31, (llvm::Value *)v5);
          }
        }
        uint64_t v4 = *(void *)(v4 + 8);
        if (v4 == a4) {
          return;
        }
      }
      uint64_t v6 = ***v5;
      uint64_t v7 = *(void *)(v6 + 152);
      uint64_t v8 = *(unsigned int *)(v6 + 168);
      if (v8)
      {
        LODWORD(v9) = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
        int v10 = (uint64_t ****)(v7 + 16 * v9);
        uint64_t v11 = *v10;
        if (*v10 == v5) {
          goto LABEL_16;
        }
        int v12 = 1;
        while (v11 != (uint64_t ***)-4096)
        {
          int v13 = v9 + v12++;
          uint64_t v9 = v13 & (v8 - 1);
          uint64_t v11 = *(uint64_t ****)(v7 + 16 * v9);
          if (v11 == v5)
          {
            int v10 = (uint64_t ****)(v7 + 16 * v9);
            goto LABEL_16;
          }
        }
      }
      int v10 = (uint64_t ****)(v7 + 16 * v8);
LABEL_16:
      uint64_t v14 = *((unsigned int *)v35 + 2);
      if (v14)
      {
        size_t v15 = (size_t *)v10[1];
        uint64_t v33 = *((unsigned int *)v35 + 5);
        int v16 = (unsigned __int8 *)v15 + v33;
        size_t v17 = *v15;
        if (*v15)
        {
          int v18 = 0;
          size_t v19 = *v15;
          unsigned int v20 = v16;
          do
          {
            int v21 = *v20++;
            int v18 = 33 * v18 + v21;
            --v19;
          }
          while (v19);
        }
        else
        {
          int v18 = 0;
        }
        unsigned int v22 = v14 - 1;
        uint64_t v23 = *(void *)v35;
        uint64_t v24 = *(void *)v35 + 8 * v14 + 8;
        int v25 = 1;
        int v26 = v18;
        while (1)
        {
          uint64_t v27 = v26 & v22;
          int v28 = *(void **)(v23 + 8 * v27);
          if (v28 != (void *)-8)
          {
            if (!v28) {
              goto LABEL_29;
            }
            if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v33, v17))) {
              break;
            }
          }
          int v26 = v25 + v27;
          ++v25;
        }
        *(void *)(v23 + 8 * (int)v27) = -8;
        *(int32x2_t *)((char *)v35 + 12) = vadd_s32(*(int32x2_t *)((char *)v35 + 12), (int32x2_t)0x1FFFFFFFFLL);
      }
      goto LABEL_29;
    }
  }
}

void llvm::Module::Module(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  a1[1] = a1 + 1;
  a1[2] = a1 + 1;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = a1 + 5;
  a1[6] = a1 + 5;
  a1[7] = a1 + 7;
  a1[8] = a1 + 7;
  a1[9] = a1 + 9;
  a1[10] = a1 + 9;
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  operator new();
}

void llvm::Module::~Module(llvm::Module *this)
{
  uint64_t v1 = this;
  llvm::LLVMContext::removeModule(*(void *)this, (uint64_t)this);
  llvm::Module::dropAllReferences(v1);
  uint64_t v69 = (uint64_t)v1 + 8;
  sub_1CC60DC14((uint64_t)v1 + 8, *((void *)v1 + 2), (uint64_t)v1 + 8);
  uint64_t v2 = (uint64_t)v1 + 24;
  uint64_t v3 = (void *)*((void *)v1 + 4);
  unint64_t v74 = v1;
  if ((void *)((char *)v1 + 24) != v3)
  {
    BOOL v70 = (char *)v1 + 24;
    while (1)
    {
      uint64_t v72 = v3;
      uint64_t v73 = (void *)v3[1];
      uint64_t v71 = (int32x2_t ****)(v3 - 7);
      uint64_t v4 = v3 ? (uint64_t)(v3 - 7) : 0;
      *(void *)(v4 + 40) = 0;
      if ((*(unsigned char *)(v4 + 23) & 0x10) != 0)
      {
        uint64_t v75 = (uint64_t *)*((void *)v74 + 14);
        if (v75) {
          break;
        }
      }
LABEL_28:
      uint64_t v29 = *(void *)(v4 + 56);
      unsigned int v30 = *(void **)(v4 + 64);
      void *v30 = v29;
      *(void *)(v29 + 8) = v30;
      *(void *)(v4 + 56) = 0;
      *(void *)(v4 + 64) = 0;
      llvm::Function::~Function(v71);
      int v32 = *((_DWORD *)v72 - 9);
      if ((v32 & 0x40000000) != 0)
      {
        uint64_t v37 = (char *)(v72 - 8);
        uint64_t v39 = (char *)*(v72 - 8);
        uint64_t v40 = v32 & 0x7FFFFFF;
        uint64_t v2 = (uint64_t)v70;
        unint64_t v38 = v73;
        if (v40)
        {
          uint64_t v41 = 32 * v40;
          do
          {
            unint64_t v42 = &v39[v41];
            if (*(void *)&v39[v41 - 32])
            {
              **((void **)v42 - 2) = *((void *)v42 - 3);
              uint64_t v43 = *((void *)v42 - 3);
              if (v43) {
                *(void *)(v43 + 16) = *((void *)v42 - 2);
              }
            }
            v41 -= 32;
          }
          while (v41);
        }
        operator delete(v39);
      }
      else
      {
        uint64_t v33 = v32 & 0x7FFFFFF;
        uint64_t v2 = (uint64_t)v70;
        if (v33)
        {
          int v34 = v72 - 11;
          uint64_t v35 = -32 * v33;
          do
          {
            if (*v34)
            {
              *(void *)v34[2] = v34[1];
              uint64_t v36 = v34[1];
              if (v36) {
                *(void *)(v36 + 16) = v34[2];
              }
            }
            v34 -= 4;
            v35 += 32;
          }
          while (v35);
        }
        uint64_t v37 = (char *)(v31 - 32 * v33);
        unint64_t v38 = v73;
        if (v32 < 0) {
          uint64_t v37 = &v37[-*((void *)v37 - 1) - 8];
        }
      }
      uint64_t v1 = v74;
      operator delete(v37);
      uint64_t v3 = v38;
      if ((void *)v2 == v38) {
        goto LABEL_49;
      }
    }
    uint64_t v5 = ***(void ***)v4;
    uint64_t v6 = *(void *)(v5 + 152);
    uint64_t v7 = *(unsigned int *)(v5 + 168);
    if (v7)
    {
      LODWORD(v8) = (v7 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 == v4) {
        goto LABEL_14;
      }
      int v11 = 1;
      while (v10 != -4096)
      {
        int v12 = v8 + v11++;
        uint64_t v8 = v12 & (v7 - 1);
        uint64_t v10 = *(void *)(v6 + 16 * v8);
        if (v10 == v4)
        {
          uint64_t v9 = (uint64_t *)(v6 + 16 * v8);
          goto LABEL_14;
        }
      }
    }
    uint64_t v9 = (uint64_t *)(v6 + 16 * v7);
LABEL_14:
    uint64_t v13 = *((unsigned int *)v75 + 2);
    if (v13)
    {
      uint64_t v14 = (size_t *)v9[1];
      uint64_t v15 = *((unsigned int *)v75 + 5);
      int v16 = (unsigned __int8 *)v14 + v15;
      size_t v17 = *v14;
      if (*v14)
      {
        int v18 = 0;
        size_t v19 = *v14;
        unsigned int v20 = v16;
        do
        {
          int v21 = *v20++;
          int v18 = 33 * v18 + v21;
          --v19;
        }
        while (v19);
      }
      else
      {
        int v18 = 0;
      }
      unsigned int v22 = v13 - 1;
      uint64_t v23 = *v75;
      uint64_t v24 = *v75 + 8 * v13 + 8;
      int v25 = 1;
      int v26 = v18;
      while (1)
      {
        uint64_t v27 = v26 & v22;
        int v28 = *(void **)(v23 + 8 * v27);
        if (v28 != (void *)-8)
        {
          if (!v28) {
            goto LABEL_28;
          }
          if (*(_DWORD *)(v24 + 4 * v27) == v18 && v17 == *v28 && (!v17 || !memcmp(v16, (char *)v28 + v15, v17))) {
            break;
          }
        }
        int v26 = v25 + v27;
        ++v25;
      }
      *(void *)(v23 + 8 * (int)v27) = -8;
      *(uint64_t *)((char *)v75 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v75 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_28;
  }
LABEL_49:
  uint64_t v44 = (uint64_t)v1 + 40;
  sub_1CC60E1F0((uint64_t)v1 + 40, *((void *)v1 + 6), (uint64_t)v1 + 40);
  uint64_t v45 = (char *)v1 + 56;
  if ((llvm::Module *)((char *)v1 + 56) != *((llvm::Module **)v1 + 8)) {
    sub_1CD5C1338();
  }
  MEMORY[0x1D25D9CD0](*((void *)v1 + 92), 8);
  sub_1CC3724DC((uint64_t)v1 + 704);
  llvm::DataLayout::~DataLayout((llvm::Module *)((char *)v1 + 272));
  if (*((_DWORD *)v1 + 63))
  {
    uint64_t v46 = *((unsigned int *)v1 + 62);
    if (v46)
    {
      uint64_t v47 = 0;
      uint64_t v48 = 8 * v46;
      do
      {
        uint64_t v49 = *(void *)(*((void *)v1 + 30) + v47);
        if (v49) {
          BOOL v50 = v49 == -8;
        }
        else {
          BOOL v50 = 1;
        }
        if (!v50) {
          MEMORY[0x1D25D9CD0]();
        }
        v47 += 8;
      }
      while (v48 != v47);
    }
  }
  free(*((void **)v1 + 30));
  if (*((char *)v1 + 239) < 0) {
    operator delete(*((void **)v1 + 27));
  }
  if (*((char *)v1 + 215) < 0) {
    operator delete(*((void **)v1 + 24));
  }
  if (*((char *)v1 + 191) < 0) {
    operator delete(*((void **)v1 + 21));
  }
  uint64_t v51 = *((void *)v1 + 20);
  *((void *)v1 + 20) = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = *((void *)v1 + 19);
  *((void *)v1 + 19) = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  if (*((_DWORD *)v1 + 33))
  {
    uint64_t v58 = *((unsigned int *)v1 + 32);
    if (v58)
    {
      uint64_t v59 = 0;
      uint64_t v60 = 8 * v58;
      do
      {
        uint64_t v61 = *(void *)(*((void *)v1 + 15) + v59);
        if (v61 != -8 && v61 != 0)
        {
          unint64_t v63 = *(void **)(v61 + 32);
          if (v63 != *(void **)(v61 + 24)) {
            free(v63);
          }
          MEMORY[0x1D25D9CD0](v61, 8);
        }
        v59 += 8;
        uint64_t v1 = v74;
      }
      while (v60 != v59);
    }
  }
  free(*((void **)v1 + 15));
  uint64_t v53 = *((void *)v1 + 14);
  *((void *)v1 + 14) = 0;
  if (v53)
  {
    if (*(_DWORD *)(v53 + 12))
    {
      uint64_t v64 = *(unsigned int *)(v53 + 8);
      if (v64)
      {
        uint64_t v65 = 0;
        uint64_t v66 = 8 * v64;
        uint64_t v1 = v74;
        do
        {
          uint64_t v67 = *(void *)(*(void *)v53 + v65);
          if (v67 != -8 && v67 != 0) {
            MEMORY[0x1D25D9CD0]();
          }
          v65 += 8;
        }
        while (v66 != v65);
      }
    }
    free(*(void **)v53);
    MEMORY[0x1D25D9CE0](v53, 0x1080C402C9B36C6);
  }
  if (*((char *)v1 + 111) < 0) {
    operator delete(*((void **)v1 + 11));
  }
  uint64_t v54 = (llvm::NamedMDNode *)*((void *)v1 + 10);
  if (v54 != (llvm::Module *)((char *)v1 + 72))
  {
    do
    {
      uint64_t v55 = *(void *)v54;
      unint64_t v56 = (llvm::NamedMDNode *)*((void *)v54 + 1);
      *(void *)unint64_t v56 = *(void *)v54;
      *(void *)(v55 + 8) = v56;
      *(void *)uint64_t v54 = 0;
      *((void *)v54 + 1) = 0;
      llvm::NamedMDNode::~NamedMDNode(v54);
      MEMORY[0x1D25D9CE0]();
      uint64_t v54 = v56;
    }
    while (v56 != (llvm::Module *)((char *)v1 + 72));
  }
  if (v45 != *((char **)v1 + 8)) {
    sub_1CD5C1338();
  }
  sub_1CC60E1F0(v44, *((void *)v1 + 6), v44);
  for (uint64_t i = *((void *)v1 + 4); v2 != i; uint64_t i = sub_1CC60DF60(v2, i))
    ;
  sub_1CC60DC14(v69, *((void *)v1 + 2), v69);
}

void *llvm::Module::dropAllReferences(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this + 3;
  for (uint64_t i = (void *)this[4]; i != v2; uint64_t i = (void *)i[1])
  {
    if (i) {
      uint64_t v4 = (uint64_t)(i - 7);
    }
    else {
      uint64_t v4 = 0;
    }
    this = (void *)llvm::Function::dropAllReferences(v4);
  }
  for (unint64_t j = (void *)v1[2]; j != v1 + 1; unint64_t j = (void *)j[1])
  {
    if (j) {
      uint64_t v6 = (int32x2_t ****)(j - 7);
    }
    else {
      uint64_t v6 = 0;
    }
    int v7 = *((_DWORD *)v6 + 5);
    if ((v7 & 0x40000000) != 0)
    {
      uint64_t v9 = (int32x2_t ****)*(v6 - 1);
      uint64_t v8 = v7 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v8 = v7 & 0x7FFFFFF;
      uint64_t v9 = &v6[-4 * v8];
    }
    if (v8)
    {
      uint64_t v10 = 32 * v8;
      int v11 = v9 + 2;
      do
      {
        if (*(v11 - 2))
        {
          **int v11 = *(v11 - 1);
          uint64_t v12 = (uint64_t)*(v11 - 1);
          if (v12) {
            *(void *)(v12 + 16) = *v11;
          }
        }
        *(v11 - 2) = 0;
        v11 += 4;
        v10 -= 32;
      }
      while (v10);
      int v7 = *((_DWORD *)v6 + 5);
    }
    if ((v7 & 0x20000000) != 0)
    {
      uint64_t v13 = ***v6 + 310;
      size_t v19 = v6;
      this = (void *)sub_1CC6035CC(v13, &v19);
      *((_DWORD *)v6 + 5) &= ~0x20000000u;
    }
  }
  for (uint64_t k = (void *)v1[6]; k != v1 + 5; uint64_t k = (void *)k[1])
  {
    if (k) {
      uint64_t v17 = (uint64_t)(k - 6);
    }
    else {
      uint64_t v17 = 0;
    }
    this = (void *)sub_1CC0BCC78(v17);
  }
  uint64_t v15 = v1 + 7;
  for (uint64_t m = (void *)v1[8]; m != v15; uint64_t m = (void *)m[1])
  {
    if (m) {
      uint64_t v18 = (uint64_t)(m - 7);
    }
    else {
      uint64_t v18 = 0;
    }
    this = (void *)sub_1CC0BCC78(v18);
  }
  return this;
}

void llvm::Module::createRNG(uint64_t a1, const void *a2, size_t a3)
{
  void v21[4] = *MEMORY[0x1E4F143B8];
  size_t v19 = v21;
  long long v20 = xmmword_1CDC7F9D0;
  if (a3 < 0x21)
  {
    uint64_t v5 = 0;
    if (a3)
    {
      memcpy(v19, a2, a3);
      uint64_t v5 = v20;
    }
    *(void *)&long long v20 = v5 + a3;
    uint64_t v8 = *(void *)(a1 + 168);
    uint64_t v7 = a1 + 168;
    uint64_t v6 = v8;
    char v9 = *(unsigned char *)(v7 + 23);
    int v10 = v9;
    if (v9 >= 0) {
      uint64_t v6 = v7;
    }
    uint64_t v11 = v9 & 0x7F;
    if (v10 < 0) {
      uint64_t v11 = *(void *)(v7 + 8);
    }
    uint64_t v15 = 0;
    size_t v16 = 0;
    v14[0] = v6;
    v14[1] = v11;
    uint64_t v17 = v11;
    int v18 = 0;
    llvm::sys::path::reverse_iterator::operator++((uint64_t)v14);
    size_t v12 = v16;
    uint64_t v13 = v20;
    if (*((void *)&v20 + 1) >= v16 + (unint64_t)v20)
    {
      if (v16)
      {
        memcpy((char *)v19 + v20, v15, v16);
        uint64_t v13 = v20;
      }
      *(void *)&long long v20 = v13 + v12;
      operator new();
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod();
}

uint64_t llvm::Module::getNamedValue(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 112);
  unint64_t v4 = *((unsigned int *)v3 + 8);
  if (v4 <= 1) {
    unint64_t v5 = 1;
  }
  else {
    unint64_t v5 = v4;
  }
  if (a3 < v5) {
    unint64_t v5 = a3;
  }
  if (a3 <= v4) {
    unint64_t v5 = a3;
  }
  if ((v4 & 0x80000000) == 0) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = a3;
  }
  uint64_t v8 = *((unsigned int *)v3 + 2);
  if (!v8) {
    return 0;
  }
  int v9 = 0;
  if (v7)
  {
    size_t v10 = v7;
    uint64_t v11 = a2;
    do
    {
      int v12 = *v11++;
      int v9 = 33 * v9 + v12;
      --v10;
    }
    while (v10);
  }
  uint64_t v13 = *v3;
  uint64_t v14 = *v3 + 8 * v8 + 8;
  int v15 = 1;
  int v16 = v9;
  while (1)
  {
    uint64_t v17 = v16 & (v8 - 1);
    int v18 = *(void **)(v13 + 8 * v17);
    if (v18 != (void *)-8)
    {
      if (!v18) {
        return 0;
      }
      if (*(_DWORD *)(v14 + 4 * v17) == v9
        && v7 == *v18
        && (!v7 || !memcmp(a2, (char *)v18 + *((unsigned int *)v3 + 5), v7)))
      {
        break;
      }
    }
    int v16 = v15 + v17;
    ++v15;
  }
  if (v17 == -1 || (int)v17 == v8) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v13 + 8 * (int)v17) + 8);
  }
}

uint64_t llvm::Module::getNumNamedValues(llvm::Module *this)
{
  return *(unsigned int *)(*((void *)this + 14) + 12);
}

uint64_t llvm::Module::getMDKindID(uint64_t **a1, unsigned __int8 *a2, size_t a3)
{
  return llvm::LLVMContext::getMDKindID(*a1, a2, a3);
}

void llvm::Module::getMDKindNames(uint64_t *a1, void *a2)
{
}

void llvm::Module::getOperandBundleTags(uint64_t **a1, void *a2)
{
}

llvm::PointerType *llvm::Module::getOrInsertFunction(uint64_t a1, unsigned __int8 *a2, const char *a3, llvm::PointerType *a4, uint64_t a5)
{
  uint64_t v6 = *(uint64_t **)(a1 + 112);
  unint64_t v7 = *((unsigned int *)v6 + 8);
  size_t v8 = (size_t)a3;
  if ((v7 & 0x80000000) == 0)
  {
    size_t v8 = (size_t)a3;
    if ((unint64_t)a3 > v7)
    {
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      else {
        unint64_t v7 = v7;
      }
      if ((unint64_t)a3 >= v7) {
        size_t v8 = v7;
      }
      else {
        size_t v8 = (size_t)a3;
      }
    }
  }
  uint64_t v9 = *((unsigned int *)v6 + 2);
  if (!v9) {
    goto LABEL_20;
  }
  int v10 = 0;
  if (v8)
  {
    size_t v11 = v8;
    int v12 = a2;
    do
    {
      int v13 = *v12++;
      int v10 = 33 * v10 + v13;
      --v11;
    }
    while (v11);
  }
  uint64_t v14 = *v6;
  uint64_t v15 = *v6 + 8 * v9 + 8;
  int v16 = 1;
  int v17 = v10;
  while (1)
  {
    uint64_t v18 = v17 & (v9 - 1);
    size_t v19 = *(void **)(v14 + 8 * v18);
    if (v19 != (void *)-8)
    {
      if (!v19) {
        goto LABEL_20;
      }
      if (*(_DWORD *)(v15 + 4 * v18) == v10
        && v8 == *v19
        && (!v8 || !memcmp(a2, (char *)v19 + *((unsigned int *)v6 + 5), v8)))
      {
        break;
      }
    }
    int v17 = v16 + v18;
    ++v16;
  }
  if (v18 == -1
    || (int)v18 == v9
    || (long long v20 = *(llvm::detail::IEEEFloat **)(*(void *)(v14 + 8 * (int)v18) + 8)) == 0)
  {
LABEL_20:
    uint64_t v23 = (llvm::Type *)*(unsigned int *)(a1 + 284);
    __int16 v35 = 261;
    v34[0] = (const char *)a2;
    v34[1] = a3;
    uint64_t v24 = (char *)operator new(0x80uLL);
    *((_DWORD *)v24 + 7) = *((_DWORD *)v24 + 7) & 0x38000000 | 0x40000000;
    *(void *)uint64_t v24 = 0;
    int v21 = a4;
    llvm::Function::Function((unint64_t *)v24 + 1, a4, 0, v23, v34, 0);
    if ((v24[41] & 0x20) == 0) {
      *((void *)v24 + 15) = a5;
    }
    int v25 = (uint64_t *)(a1 + 24);
    *((void *)v24 + 6) = a1;
    if ((v24[31] & 0x10) != 0)
    {
      int v26 = *(llvm::ValueSymbolTable **)(a1 + 112);
      if (v26) {
        llvm::ValueSymbolTable::reinsertValue(v26, (llvm::Value *)(v24 + 8));
      }
    }
    uint64_t v27 = *v25;
    *((void *)v24 + 8) = *v25;
    *((void *)v24 + 9) = v25;
    int v28 = v24 + 64;
    *(void *)(v27 + 8) = v28;
    *int v25 = (uint64_t)v28;
  }
  else
  {
    int v21 = a4;
    unsigned int v22 = (llvm::Constant *)llvm::PointerType::get(a4, (llvm::Type *)(*(_DWORD *)(*(void *)v20 + 8) >> 8));
    if (*(llvm::Constant **)v20 != v22) {
      llvm::ConstantExpr::getBitCast(v20, v22, 0);
    }
  }
  return v21;
}

llvm::PointerType *llvm::Module::getOrInsertFunction(uint64_t a1, unsigned __int8 *a2, const char *a3, llvm::PointerType *a4)
{
  return llvm::Module::getOrInsertFunction(a1, a2, a3, a4, 0);
}

uint64_t llvm::Module::getFunction(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 112);
  unint64_t v4 = *((unsigned int *)v3 + 8);
  if (v4 <= 1) {
    unint64_t v5 = 1;
  }
  else {
    unint64_t v5 = v4;
  }
  if (a3 < v5) {
    unint64_t v5 = a3;
  }
  if (a3 <= v4) {
    unint64_t v5 = a3;
  }
  if ((v4 & 0x80000000) == 0) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = a3;
  }
  uint64_t v8 = *((unsigned int *)v3 + 2);
  if (!v8) {
    return 0;
  }
  int v9 = 0;
  if (v7)
  {
    size_t v10 = v7;
    size_t v11 = a2;
    do
    {
      unsigned __int8 v12 = *v11++;
      int v9 = 33 * v9 + v12;
      --v10;
    }
    while (v10);
  }
  uint64_t v13 = *v3;
  uint64_t v14 = *v3 + 8 * v8 + 8;
  int v15 = 1;
  int v16 = v9;
  while (1)
  {
    uint64_t v17 = v16 & (v8 - 1);
    uint64_t v18 = *(void **)(v13 + 8 * v17);
    if (v18 != (void *)-8)
    {
      if (!v18) {
        return 0;
      }
      if (*(_DWORD *)(v14 + 4 * v17) == v9
        && v7 == *v18
        && (!v7 || !memcmp(a2, (char *)v18 + *((unsigned int *)v3 + 5), v7)))
      {
        break;
      }
    }
    int v16 = v15 + v17;
    ++v15;
  }
  if ((v17 == -1 || (int)v17 == v8) && (v17 == -1 || (int)v17 == v8)) {
    return 0;
  }
  uint64_t v19 = *(void *)(*(void *)(v13 + 8 * (int)v17) + 8);
  if (!v19) {
    return 0;
  }
  if (*(unsigned char *)(v19 + 16)) {
    return 0;
  }
  return *(void *)(*(void *)(v13 + 8 * (int)v17) + 8);
}

uint64_t llvm::Module::getGlobalVariable(uint64_t a1, unsigned __int8 *a2, unint64_t a3, char a4)
{
  unint64_t v4 = *(uint64_t **)(a1 + 112);
  unint64_t v5 = *((unsigned int *)v4 + 8);
  if (v5 <= 1) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = v5;
  }
  if (a3 < v6) {
    unint64_t v6 = a3;
  }
  if (a3 <= v5) {
    unint64_t v6 = a3;
  }
  if ((v5 & 0x80000000) == 0) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = a3;
  }
  uint64_t v9 = *((unsigned int *)v4 + 2);
  if (!v9) {
    return 0;
  }
  int v10 = 0;
  if (v8)
  {
    size_t v11 = v8;
    unsigned __int8 v12 = a2;
    do
    {
      int v13 = *v12++;
      int v10 = 33 * v10 + v13;
      --v11;
    }
    while (v11);
  }
  uint64_t v14 = *v4;
  uint64_t v15 = *v4 + 8 * v9 + 8;
  int v16 = 1;
  int v17 = v10;
  while (1)
  {
    uint64_t v18 = v17 & (v9 - 1);
    uint64_t v19 = *(void **)(v14 + 8 * v18);
    if (v19 != (void *)-8)
    {
      if (!v19) {
        return 0;
      }
      if (*(_DWORD *)(v15 + 4 * v18) == v10
        && v8 == *v19
        && (!v8 || !memcmp(a2, (char *)v19 + *((unsigned int *)v4 + 5), v8)))
      {
        break;
      }
    }
    int v17 = v16 + v18;
    ++v16;
  }
  if (v18 == -1) {
    return 0;
  }
  if ((int)v18 == v9) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(v14 + 8 * (int)v18) + 8);
  if (!result || *(unsigned char *)(result + 16) != 3 || (a4 & 1) == 0 && (*(_DWORD *)(result + 32) & 0xFu) - 7 <= 1) {
    return 0;
  }
  return result;
}

uint64_t llvm::Module::getNamedIFunc(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 112);
  unint64_t v4 = *((unsigned int *)v3 + 8);
  if (v4 <= 1) {
    unint64_t v5 = 1;
  }
  else {
    unint64_t v5 = v4;
  }
  if (a3 < v5) {
    unint64_t v5 = a3;
  }
  if (a3 <= v4) {
    unint64_t v5 = a3;
  }
  if ((v4 & 0x80000000) == 0) {
    size_t v7 = v5;
  }
  else {
    size_t v7 = a3;
  }
  uint64_t v8 = *((unsigned int *)v3 + 2);
  if (!v8) {
    return 0;
  }
  int v9 = 0;
  if (v7)
  {
    size_t v10 = v7;
    size_t v11 = a2;
    do
    {
      int v12 = *v11++;
      int v9 = 33 * v9 + v12;
      --v10;
    }
    while (v10);
  }
  uint64_t v13 = *v3;
  uint64_t v14 = *v3 + 8 * v8 + 8;
  int v15 = 1;
  int v16 = v9;
  while (1)
  {
    uint64_t v17 = v16 & (v8 - 1);
    uint64_t v18 = *(void **)(v13 + 8 * v17);
    if (v18 != (void *)-8)
    {
      if (!v18) {
        return 0;
      }
      if (*(_DWORD *)(v14 + 4 * v17) == v9
        && v7 == *v18
        && (!v7 || !memcmp(a2, (char *)v18 + *((unsigned int *)v3 + 5), v7)))
      {
        break;
      }
    }
    int v16 = v15 + v17;
    ++v15;
  }
  if (v17 == -1) {
    return 0;
  }
  if ((int)v17 == v8) {
    return 0;
  }
  uint64_t v19 = *(void *)(*(void *)(v13 + 8 * (int)v17) + 8);
  if (!v19) {
    return 0;
  }
  if (*(unsigned char *)(v19 + 16) == 2) {
    return *(void *)(*(void *)(v13 + 8 * (int)v17) + 8);
  }
  return 0;
}

uint64_t llvm::Module::getNamedMetadata(llvm::Module *this, const char **a2)
{
  v23[32] = *MEMORY[0x1E4F143B8];
  int v21 = v23;
  long long v22 = xmmword_1CD96DBF0;
  if (*((unsigned char *)a2 + 33) == 1)
  {
    size_t v3 = 0;
    unint64_t v4 = 0;
    unint64_t v5 = v23;
    switch(*((unsigned char *)a2 + 32))
    {
      case 1:
        break;
      case 3:
        unint64_t v4 = *a2;
        if (*a2) {
          size_t v3 = strlen(*a2);
        }
        else {
          size_t v3 = 0;
        }
        goto LABEL_6;
      case 4:
        uint64_t v18 = *a2;
        char v19 = (*a2)[23];
        if (v19 >= 0) {
          unint64_t v4 = *a2;
        }
        else {
          unint64_t v4 = *(const char **)v18;
        }
        if (v19 >= 0) {
          size_t v3 = v19 & 0x7F;
        }
        else {
          size_t v3 = *((void *)v18 + 1);
        }
        goto LABEL_6;
      case 5:
        unint64_t v4 = *a2;
        size_t v3 = (size_t)a2[1];
LABEL_6:
        unint64_t v5 = v23;
        break;
      default:
        goto LABEL_23;
    }
  }
  else
  {
LABEL_23:
    llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v21);
    unint64_t v5 = v21;
    size_t v3 = v22;
    unint64_t v4 = (const char *)v21;
  }
  uint64_t v6 = *((unsigned int *)this + 62);
  long long v20 = v5;
  if (v6)
  {
    int v7 = 0;
    if (v3)
    {
      size_t v8 = v3;
      int v9 = v4;
      do
      {
        unsigned __int8 v10 = *v9++;
        int v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    uint64_t v11 = *((void *)this + 30);
    int v12 = 1;
    int v13 = v7;
    while (1)
    {
      uint64_t v14 = v13 & (v6 - 1);
      int v15 = *(void **)(v11 + 8 * v14);
      if (v15 != (void *)-8)
      {
        if (!v15) {
          goto LABEL_19;
        }
        if (*(_DWORD *)(v11 + 8 * v6 + 8 + 4 * v14) == v7
          && v3 == *v15
          && (!v3 || !memcmp(v4, (char *)v15 + *((unsigned int *)this + 65), v3)))
        {
          break;
        }
      }
      int v13 = v12 + v14;
      ++v12;
    }
    if (v14 != -1 && (int)v14 != v6 || (uint64_t v16 = 0, (int)v14 != v6) && v14 != -1) {
      uint64_t v16 = *(void *)(*(void *)(v11 + 8 * (int)v14) + 8);
    }
  }
  else
  {
LABEL_19:
    uint64_t v16 = 0;
  }
  if (v20 != v23) {
    free(v20);
  }
  return v16;
}

uint64_t llvm::Module::getOrInsertNamedMetadata(_DWORD *a1, unsigned __int8 *a2, size_t a3)
{
  unsigned int v5 = a1[62];
  if (!v5)
  {
    a1[63] = 0;
    a1[64] = 0;
    int v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v25[16] = 2;
    *((void *)a1 + 30) = v25;
    unsigned int v5 = 16;
    a1[62] = 16;
  }
  int v6 = 0;
  if (a3)
  {
    size_t v7 = a3;
    size_t v8 = a2;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  uint64_t v10 = *((void *)a1 + 30);
  unsigned int v11 = v5 - 1;
  uint64_t v12 = v10 + 8 * v5 + 8;
  int v13 = -1;
  int v14 = 1;
  int v15 = v6;
  while (1)
  {
    uint64_t v16 = v15 & v11;
    uint64_t v17 = *(void **)(v10 + 8 * v16);
    if (!v17) {
      break;
    }
    if (v17 == (void *)-8)
    {
      if (v13 == -1) {
        int v13 = v15 & v11;
      }
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6 {
           && a3 == *v17
    }
           && (!a3 || !memcmp(a2, (char *)v17 + a1[65], a3)))
    {
      goto LABEL_17;
    }
    int v15 = v14 + v16;
    ++v14;
  }
  uint64_t v18 = v13;
  if (v13 == -1)
  {
    uint64_t v18 = v16;
    uint64_t v16 = v16;
  }
  else
  {
    uint64_t v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  uint64_t v17 = *(void **)(v10 + 8 * v16);
LABEL_17:
  if (v17)
  {
    if (v17 != (void *)-8) {
      goto LABEL_25;
    }
    --a1[64];
  }
  char v19 = operator new(a3 + 17, (std::align_val_t)8uLL);
  long long v20 = v19;
  int v21 = (char *)(v19 + 2);
  if (a3) {
    memcpy(v19 + 2, a2, a3);
  }
  v21[a3] = 0;
  *long long v20 = a3;
  v20[1] = 0;
  *(void *)(v10 + 8 * v16) = v20;
  ++a1[63];
  for (uint64_t i = (void **)(*((void *)a1 + 30)
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 60), v16)); ; ++i)
  {
    uint64_t v17 = *i;
    if (*i && v17 + 1 != 0) {
      break;
    }
  }
LABEL_25:
  uint64_t result = v17[1];
  if (!result) {
    operator new();
  }
  return result;
}

void llvm::Module::eraseNamedMetadata(llvm::Module *this, llvm::NamedMDNode *a2)
{
  size_t v3 = (uint64_t *)((char *)this + 240);
  char v4 = *((unsigned char *)a2 + 39);
  int v5 = v4;
  if (v4 >= 0) {
    int v6 = (unsigned __int8 *)a2 + 16;
  }
  else {
    int v6 = (unsigned __int8 *)*((void *)a2 + 2);
  }
  size_t v7 = v4 & 0x7F;
  if (v5 >= 0) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = *((void *)a2 + 3);
  }
  sub_1CC60B704(v3, v6, v8);
  uint64_t v10 = *(void *)a2;
  int v9 = (void *)*((void *)a2 + 1);
  *int v9 = *(void *)a2;
  *(void *)(v10 + 8) = v9;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  llvm::NamedMDNode::~NamedMDNode(a2);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC60B704(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (!v3) {
    return 0;
  }
  int v6 = 0;
  if (__n)
  {
    size_t v7 = __n;
    size_t v8 = __s1;
    do
    {
      int v9 = *v8++;
      int v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  unsigned int v10 = v3 - 1;
  uint64_t v11 = *a1;
  uint64_t v12 = *a1 + 8 * v3 + 8;
  int v13 = 1;
  int v14 = v6;
  while (1)
  {
    uint64_t v15 = v14 & v10;
    uint64_t v16 = *(void **)(v11 + 8 * v15);
    if (v16 != (void *)-8)
    {
      if (!v16) {
        return 0;
      }
      if (*(_DWORD *)(v12 + 4 * v15) == v6 && __n == *v16)
      {
        uint64_t v17 = *((unsigned int *)a1 + 5);
        if (!__n || !memcmp(__s1, (char *)v16 + v17, __n)) {
          break;
        }
      }
    }
    int v14 = v13 + v15;
    ++v13;
  }
  if (v15 == -1 || (int)v15 == v3) {
    return 0;
  }
  char v19 = *(size_t **)(v11 + 8 * (int)v15);
  size_t v20 = *v19;
  if (*v19)
  {
    int v21 = 0;
    size_t v22 = *v19;
    uint64_t v23 = (unsigned __int8 *)v19 + v17;
    do
    {
      int v24 = *v23++;
      int v21 = 33 * v21 + v24;
      --v22;
    }
    while (v22);
  }
  else
  {
    int v21 = 0;
  }
  int v25 = 1;
  int v26 = v21;
  while (1)
  {
    uint64_t v27 = v26 & v10;
    int v28 = *(void **)(v11 + 8 * v27);
    if (v28 != (void *)-8)
    {
      if (!v28) {
        goto LABEL_28;
      }
      if (*(_DWORD *)(v12 + 4 * v27) == v21
        && v20 == *v28
        && (!v20 || !memcmp((char *)v19 + v17, (char *)v28 + v17, v20)))
      {
        break;
      }
    }
    int v26 = v25 + v27;
    ++v25;
  }
  *(void *)(v11 + 8 * (int)v27) = -8;
  *(uint64_t *)((char *)a1 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
LABEL_28:
  MEMORY[0x1D25D9CD0](v19, 8);
  return 1;
}

uint64_t llvm::Module::isValidModFlagBehavior(uint64_t result, _DWORD *a2)
{
  if (!result) {
    return result;
  }
  if (*(unsigned char *)result != 1) {
    return 0;
  }
  uint64_t v2 = *(void *)(result + 128);
  if (*(unsigned char *)(v2 + 16) != 16) {
    return 0;
  }
  uint64_t v3 = (void *)(v2 + 24);
  uint64_t v4 = *(unsigned int *)(v2 + 32);
  if (v4 >= 0x41)
  {
    int v5 = 0;
    int64_t v6 = (unint64_t)(v4 + 63) >> 6;
    do
    {
      if (v6-- < 1) {
        break;
      }
      unint64_t v8 = *(void *)(*v3 + 8 * v6);
      v5 += __clz(v8);
    }
    while (!v8);
    uint64_t result = 0;
    int v9 = v4 | 0xFFFFFFC0;
    if ((v4 & 0x3F) == 0) {
      int v9 = 0;
    }
    if ((v4 - v5 - v9) > 0x40) {
      return result;
    }
    uint64_t v3 = (void *)*v3;
  }
  unsigned int v10 = (void *)*v3;
  if ((unint64_t)v10 - 9 < 0xFFFFFFFFFFFFFFF8) {
    return 0;
  }
  *a2 = v10;
  return 1;
}

uint64_t llvm::Module::isValidModuleFlag(uint64_t a1, _DWORD *a2, void *a3, void *a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 < 3) {
    return 0;
  }
  uint64_t result = llvm::Module::isValidModFlagBehavior(*(void *)(a1 - 8 * v4), a2);
  if (result)
  {
    uint64_t v9 = a1 - 8 * *(unsigned int *)(a1 + 8);
    unsigned int v10 = *(unsigned char **)(v9 + 8);
    if (!v10 || *v10) {
      return 0;
    }
    *a3 = v10;
    *a4 = *(void *)(v9 + 16);
    return 1;
  }
  return result;
}

uint64_t llvm::Module::getModuleFlagsMetadata(llvm::Module *a1, uint64_t a2)
{
  *(void *)&long long v17 = "llvm.module.flags";
  __int16 v19 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(a1, (const char **)&v17);
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(unsigned int *)(*(void *)(result + 48) + 8);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 8 * v5;
      do
      {
        uint64_t v8 = *(void *)(**(void **)(v4 + 48) + v6);
        int v16 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t result = llvm::Module::isValidModuleFlag(v8, &v16, &v15, &v14);
        if (result)
        {
          LODWORD(v17) = v16;
          *((void *)&v17 + 1) = v15;
          uint64_t v18 = v14;
          unsigned int v9 = *(_DWORD *)(a2 + 8);
          unint64_t v10 = *(void *)a2;
          if (v9 >= *(_DWORD *)(a2 + 12))
          {
            BOOL v13 = v10 + 24 * v9 > (unint64_t)&v17;
            if (v10 <= (unint64_t)&v17 && v13) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v11 = v10 + 24 * *(unsigned int *)(a2 + 8);
          long long v12 = v17;
          *(void *)(v11 + 16) = v18;
          *(_OWORD *)uint64_t v11 = v12;
          ++*(_DWORD *)(a2 + 8);
        }
        v6 += 8;
      }
      while (v7 != v6);
    }
  }
  return result;
}

uint64_t llvm::Module::getModuleFlagsMetadata(llvm::Module *this)
{
  uint64_t v2 = "llvm.module.flags";
  __int16 v3 = 259;
  return llvm::Module::getNamedMetadata(this, &v2);
}

uint64_t llvm::Module::getModuleFlag(llvm::Module *a1, const void *a2, size_t a3)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  BOOL v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(a1, (uint64_t)&v13);
  uint64_t v5 = v13;
  if (v14)
  {
    uint64_t v6 = (uint64_t *)((char *)v13 + 16);
    uint64_t v7 = 24 * v14;
    while (1)
    {
      uint64_t v8 = *(uint64_t **)(*(v6 - 1) + 8);
      uint64_t v10 = *v8;
      unsigned int v9 = v8 + 3;
      if (a3 == v10 && (!a3 || !memcmp(a2, v9, a3))) {
        break;
      }
      v6 += 3;
      v7 -= 24;
      if (!v7) {
        goto LABEL_5;
      }
    }
    uint64_t v11 = *v6;
  }
  else
  {
LABEL_5:
    uint64_t v11 = 0;
  }
  if (v5 != v15) {
    free(v5);
  }
  return v11;
}

void *llvm::Module::addModuleFlag(uint64_t **a1, llvm::Type *a2, unsigned __int8 *a3, size_t a4, uint64_t a5)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  unsigned int v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(**a1 + 1960), a2, 0);
  v18[0] = llvm::ValueAsMetadata::get(v9, v10);
  v18[1] = llvm::MDString::get(*a1, a3, a4);
  v18[2] = a5;
  uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(a1, "llvm.module.flags", 0x11uLL);
  Impl = (unsigned __int8 *)llvm::MDTuple::getImpl((uint64_t)*a1, v18, 3, 0, 1);
  long long v17 = Impl;
  uint64_t v13 = *(void *)(inserted + 48);
  uint64_t v14 = *(unsigned int *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12)) {
    return (void *)sub_1CC608328(v13, &v17);
  }
  uint64_t v15 = Impl;
  uint64_t result = (void *)(*(void *)v13 + 8 * v14);
  *uint64_t result = v15;
  if (v15)
  {
    uint64_t result = (void *)llvm::MetadataTracking::track((uint64_t)result, v15, 2);
    LODWORD(v14) = *(_DWORD *)(v13 + 8);
  }
  *(_DWORD *)(v13 + 8) = v14 + 1;
  return result;
}

void *llvm::Module::addModuleFlag(uint64_t **a1, llvm::Type *a2, unsigned __int8 *a3, size_t a4, llvm::Type *a5)
{
  unsigned int v9 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(**a1 + 1960), a5, 0);
  uint64_t v11 = llvm::ValueAsMetadata::get(v9, v10);

  return llvm::Module::addModuleFlag(a1, a2, a3, a4, v11);
}

void *llvm::Module::addModuleFlag(llvm::Module *this, llvm::MDNode *a2)
{
  uint64_t inserted = llvm::Module::getOrInsertNamedMetadata(this, "llvm.module.flags", 0x11uLL);
  uint64_t v7 = (unsigned __int8 *)a2;
  uint64_t v4 = *(void *)(inserted + 48);
  uint64_t v5 = *(unsigned int *)(v4 + 8);
  if (v5 >= *(_DWORD *)(v4 + 12)) {
    return (void *)sub_1CC608328(*(void *)(inserted + 48), &v7);
  }
  uint64_t result = (void *)(*(void *)v4 + 8 * v5);
  *uint64_t result = a2;
  if (a2)
  {
    uint64_t result = (void *)llvm::MetadataTracking::track((uint64_t)result, (unsigned __int8 *)a2, 2);
    LODWORD(v5) = *(_DWORD *)(v4 + 8);
  }
  *(_DWORD *)(v4 + 8) = v5 + 1;
  return result;
}

void llvm::Module::setDataLayout(uint64_t a1, const void *a2, unint64_t a3)
{
}

uint64_t llvm::Module::setDataLayout(llvm::Module *this, const llvm::DataLayout *a2)
{
  return sub_1CB94E404((uint64_t)this + 272, (uint64_t)a2);
}

uint64_t llvm::Module::getDataLayout(llvm::Module *this)
{
  return (uint64_t)this + 272;
}

uint64_t llvm::Module::debug_compile_units_iterator::operator*(unsigned int *a1)
{
  return *(void *)(**(void **)(*(void *)a1 + 48) + 8 * a1[2]);
}

uint64_t llvm::Module::debug_compile_units_iterator::operator->(unsigned int *a1)
{
  return *(void *)(**(void **)(*(void *)a1 + 48) + 8 * a1[2]);
}

unsigned int *llvm::Module::debug_compile_units_iterator::SkipNoDebugCUs(unsigned int *this)
{
  if (*(void *)this)
  {
    uint64_t v1 = this[2];
    uint64_t v2 = *(uint64_t **)(*(void *)this + 48);
    unsigned int v3 = *((_DWORD *)v2 + 2);
    if (v1 < v3)
    {
      uint64_t v4 = *v2;
      do
      {
        if (*(_DWORD *)(*(void *)(v4 + 8 * v1) + 36)) {
          break;
        }
        this[2] = ++v1;
      }
      while (v1 < v3);
    }
  }
  return this;
}

uint64_t llvm::Module::global_objects@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 32);
  a2[1] = v2;
  a2[2] = this + 24;
  a2[3] = this + 8;
  a2[4] = this + 24;
  a2[5] = this + 8;
  a2[6] = this + 24;
  a2[7] = this + 8;
  return this;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 32);
  a2[1] = v2;
  a2[2] = this + 24;
  a2[3] = this + 8;
  a2[4] = this + 24;
  a2[5] = this + 8;
  a2[6] = this + 24;
  a2[7] = this + 8;
  return this;
}

void *llvm::Module::global_values@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[2];
  uint64_t v3 = this[6];
  uint64_t v4 = this[8];
  *a2 = this[4];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = this + 3;
  a2[5] = this + 1;
  a2[6] = this + 5;
  a2[7] = this + 7;
  a2[8] = this + 3;
  a2[9] = this + 1;
  a2[10] = this + 5;
  a2[11] = this + 7;
  a2[12] = this + 3;
  a2[13] = this + 1;
  a2[14] = this + 5;
  a2[15] = this + 7;
  return this;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v2 = this[2];
  uint64_t v3 = this[6];
  uint64_t v4 = this[8];
  *a2 = this[4];
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  a2[4] = this + 3;
  a2[5] = this + 1;
  a2[6] = this + 5;
  a2[7] = this + 7;
  a2[8] = this + 3;
  a2[9] = this + 1;
  a2[10] = this + 5;
  a2[11] = this + 7;
  a2[12] = this + 3;
  a2[13] = this + 1;
  a2[14] = this + 5;
  a2[15] = this + 7;
  return this;
}

uint64_t llvm::Module::setMaterializer(llvm::Module *this, llvm::GVMaterializer *a2)
{
  uint64_t result = *((void *)this + 20);
  *((void *)this + 20) = a2;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t llvm::Module::materializeAll@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 160);
  if (v2)
  {
    *(void *)(this + 160) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
    uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);
    return v3(v2);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t llvm::Module::materializeMetadata@<X0>(llvm::Module *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 20);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  *a2 = 0;
  return result;
}

void sub_1CC60C09C(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  v4[0] = a2;
  v4[1] = a3;
  void v4[2] = ".";
  __int16 v5 = 773;
  v6[0] = v4;
  v6[2] = a4;
  __int16 v7 = 2050;
  llvm::Twine::str((llvm::Twine *)v6, a1);
}

uint64_t llvm::Module::getNumberRegisterParameters(llvm::Module *this)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v13);
  if (v14)
  {
    uint64_t v1 = (uint64_t *)((char *)v13 + 16);
    uint64_t v2 = 24 * v14;
    while (1)
    {
      uint64_t v3 = *(void **)(*(v1 - 1) + 8);
      if (*v3 == 21)
      {
        uint64_t v4 = v3[3];
        uint64_t v5 = v3[4];
        uint64_t v6 = *(void *)((char *)v3 + 37);
        BOOL v7 = v4 == 0x73696765526D754ELL && v5 == 0x6D61726150726574;
        if (v7 && v6 == 0x73726574656D6172) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_15;
      }
    }
    uint64_t v9 = *v1;
  }
  else
  {
LABEL_15:
    uint64_t v9 = 0;
  }
  if (v13 != v15)
  {
    free(v13);
    if (v9) {
      goto LABEL_18;
    }
    return 0;
  }
  if (!v9) {
    return 0;
  }
LABEL_18:
  uint64_t v10 = *(void *)(v9 + 128);
  uint64_t v11 = (unsigned int *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u) {
    uint64_t v11 = *(unsigned int **)v11;
  }
  return *v11;
}

uint64_t llvm::Module::getDwarfVersion(llvm::Module *this)
{
  v13[24] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = v13;
  uint64_t v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v11);
  if (v12)
  {
    uint64_t v1 = (uint64_t *)((char *)v11 + 16);
    uint64_t v2 = 24 * v12;
    while (1)
    {
      uint64_t v3 = *(void **)(*(v1 - 1) + 8);
      if (*v3 == 13)
      {
        uint64_t v8 = v3[3];
        uint64_t v9 = *(void *)((char *)v3 + 29);
        if (v8 == 0x6556206672617744 && v9 == 0x6E6F697372655620) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = *v1;
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }
  if (v11 != v13) {
    free(v11);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 128);
  uint64_t v6 = (unsigned int *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u) {
    uint64_t v6 = *(unsigned int **)v6;
  }
  return *v6;
}

BOOL llvm::Module::isDwarf64(llvm::Module *this)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v13);
  if (v14)
  {
    uint64_t v1 = (uint64_t *)((char *)v13 + 16);
    uint64_t v2 = 24 * v14;
    while (1)
    {
      uint64_t v3 = *(void *)(*(v1 - 1) + 8);
      if (*(void *)v3 == 7)
      {
        int v6 = *(_DWORD *)(v3 + 24);
        int v7 = *(_DWORD *)(v3 + 27);
        if (v6 == 1380013892 && v7 == 875972178) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = *v1;
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }
  if (v13 != v15) {
    free(v13);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v9 = *(void *)(v4 + 128);
  uint64_t v10 = (llvm::APInt *)(v9 + 24);
  unsigned int v11 = *(_DWORD *)(v9 + 32);
  if (v11 > 0x40) {
    return llvm::APInt::countLeadingZerosSlowCase(v10) == v11 - 1;
  }
  else {
    return *(void *)v10 == 1;
  }
}

uint64_t llvm::Module::getCodeViewFlag(llvm::Module *this)
{
  v10[24] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = v10;
  uint64_t v9 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v8);
  if (v9)
  {
    uint64_t v1 = (uint64_t *)((char *)v8 + 16);
    uint64_t v2 = 24 * v9;
    while (1)
    {
      uint64_t v3 = *(void **)(*(v1 - 1) + 8);
      if (*v3 == 8 && v3[3] == 0x7765695665646F43) {
        break;
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = *v1;
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }
  if (v8 != v10) {
    free(v8);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 128);
  int v7 = (unsigned int *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u) {
    int v7 = *(unsigned int **)v7;
  }
  return *v7;
}

uint64_t llvm::Module::getPICLevel(llvm::Module *this)
{
  v13[24] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = v13;
  uint64_t v12 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v11);
  if (v12)
  {
    uint64_t v1 = (uint64_t *)((char *)v11 + 16);
    uint64_t v2 = 24 * v12;
    while (1)
    {
      uint64_t v3 = *(void *)(*(v1 - 1) + 8);
      if (*(void *)v3 == 9)
      {
        uint64_t v8 = *(void *)(v3 + 24);
        int v9 = *(unsigned __int8 *)(v3 + 32);
        if (v8 == 0x6576654C20434950 && v9 == 108) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = *v1;
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }
  if (v11 != v13) {
    free(v11);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v6 = *(void *)(v4 + 128);
  int v7 = (unsigned int *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u) {
    int v7 = *(unsigned int **)v7;
  }
  return *v7;
}

uint64_t llvm::Module::getProfileSummary(llvm::Module *this, int a2)
{
  v18[24] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    int v16 = v18;
    uint64_t v17 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v16);
    uint64_t v2 = v16;
    if (v17)
    {
      uint64_t v3 = (uint64_t *)((char *)v16 + 16);
      uint64_t v6 = 24 * v17;
      do
      {
        int v7 = *(void **)(*(v3 - 1) + 8);
        if (*v7 == 16)
        {
          uint64_t v14 = v7[3];
          uint64_t v13 = v7[4];
          if (v14 == 0x6C69666F72505343 && v13 == 0x7972616D6D755365) {
            goto LABEL_26;
          }
        }
        v3 += 3;
        v6 -= 24;
      }
      while (v6);
    }
LABEL_11:
    uint64_t v8 = 0;
    goto LABEL_12;
  }
  int v16 = v18;
  uint64_t v17 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v16);
  uint64_t v2 = v16;
  if (!v17) {
    goto LABEL_11;
  }
  uint64_t v3 = (uint64_t *)((char *)v16 + 16);
  uint64_t v4 = 24 * v17;
  while (1)
  {
    uint64_t v5 = *(void **)(*(v3 - 1) + 8);
    if (*v5 == 14)
    {
      uint64_t v10 = v5[3];
      uint64_t v11 = *(void *)((char *)v5 + 30);
      if (v10 == 0x53656C69666F7250 && v11 == 0x7972616D6D755365) {
        break;
      }
    }
    v3 += 3;
    v4 -= 24;
    if (!v4) {
      goto LABEL_11;
    }
  }
LABEL_26:
  uint64_t v8 = *v3;
LABEL_12:
  if (v2 != v18) {
    free(v2);
  }
  return v8;
}

BOOL llvm::Module::getSemanticInterposition(llvm::Module *this)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v13);
  if (v14)
  {
    uint64_t v1 = (uint64_t *)((char *)v13 + 16);
    uint64_t v2 = 24 * v14;
    while (1)
    {
      uint64_t v3 = *(void **)(*(v1 - 1) + 8);
      if (*v3 == 21)
      {
        uint64_t v6 = v3[3];
        uint64_t v7 = v3[4];
        uint64_t v8 = *(void *)((char *)v3 + 37);
        BOOL v9 = v6 == 0x6369746E616D6553 && v7 == 0x736F707265746E49;
        if (v9 && v8 == 0x6E6F697469736F70) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = *v1;
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }
  if (v13 != v15) {
    free(v13);
  }
  if (!v4) {
    return 0;
  }
  uint64_t v11 = *(void *)(v4 + 128);
  uint64_t v12 = (void *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    uint64_t v12 = (void *)*v12;
  }
  return *v12 != 0;
}

uint64_t llvm::Module::getStackProtectorGuardReg(llvm::Module *this)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v13);
  if (v14)
  {
    uint64_t v1 = (uint64_t *)((char *)v13 + 16);
    uint64_t v2 = 24 * v14;
    while (1)
    {
      uint64_t v3 = *(void *)(*(v1 - 1) + 8);
      if (*(void *)v3 == 25)
      {
        uint64_t v4 = *(void *)(v3 + 24);
        uint64_t v5 = *(void *)(v3 + 32);
        uint64_t v6 = *(void *)(v3 + 40);
        int v7 = *(unsigned __int8 *)(v3 + 48);
        BOOL v8 = v4 == 0x72702D6B63617473 && v5 == 0x2D726F746365746FLL;
        BOOL v9 = v8 && v6 == 0x65722D6472617567;
        if (v9 && v7 == 103) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_18;
      }
    }
    uint64_t v11 = *v1;
  }
  else
  {
LABEL_18:
    uint64_t v11 = 0;
  }
  if (v13 == v15)
  {
    if (!v11) {
      return 0;
    }
  }
  else
  {
    free(v13);
    if (!v11) {
      return 0;
    }
  }
  if (*(unsigned char *)v11) {
    return 0;
  }
  return *(void *)(v11 + 8) + 24;
}

uint64_t llvm::Module::getStackProtectorGuardOffset(llvm::Module *this)
{
  v17[24] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = v17;
  uint64_t v16 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v15);
  if (v16)
  {
    uint64_t v1 = (uint64_t *)((char *)v15 + 16);
    uint64_t v2 = 24 * v16;
    while (1)
    {
      uint64_t v3 = *(void *)(*(v1 - 1) + 8);
      if (*(void *)v3 == 28)
      {
        uint64_t v4 = *(void *)(v3 + 24);
        uint64_t v5 = *(void *)(v3 + 32);
        uint64_t v6 = *(void *)(v3 + 40);
        int v7 = *(_DWORD *)(v3 + 48);
        BOOL v8 = v4 == 0x72702D6B63617473 && v5 == 0x2D726F746365746FLL;
        BOOL v9 = v8 && v6 == 0x666F2D6472617567;
        if (v9 && v7 == 1952805734) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_18;
      }
    }
    uint64_t v11 = *v1;
  }
  else
  {
LABEL_18:
    uint64_t v11 = 0;
  }
  if (v15 != v17)
  {
    free(v15);
    if (v11) {
      goto LABEL_21;
    }
    return 0x7FFFFFFFLL;
  }
  if (!v11) {
    return 0x7FFFFFFFLL;
  }
LABEL_21:
  if (*(unsigned char *)v11 != 1) {
    return 0x7FFFFFFFLL;
  }
  uint64_t v12 = *(void *)(v11 + 128);
  if (*(unsigned char *)(v12 + 16) != 16) {
    return 0x7FFFFFFFLL;
  }
  unsigned int v13 = *(_DWORD *)(v12 + 32);
  if (v13 > 0x40) {
    return **(void **)(v12 + 24);
  }
  else {
    return (uint64_t)(*(void *)(v12 + 24) << -(char)v13) >> -(char)v13;
  }
}

uint64_t llvm::Module::getOverrideStackAlignment(llvm::Module *this)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  unsigned int v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v13);
  if (v14)
  {
    uint64_t v1 = (uint64_t *)((char *)v13 + 16);
    uint64_t v2 = 24 * v14;
    while (1)
    {
      uint64_t v3 = *(void **)(*(v1 - 1) + 8);
      if (*v3 == 24)
      {
        uint64_t v4 = v3[3];
        uint64_t v5 = v3[4];
        uint64_t v6 = v3[5];
        BOOL v7 = v4 == 0x656469727265766FLL && v5 == 0x612D6B636174732DLL;
        if (v7 && v6 == 0x746E656D6E67696CLL) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_15;
      }
    }
    uint64_t v9 = *v1;
  }
  else
  {
LABEL_15:
    uint64_t v9 = 0;
  }
  if (v13 != v15)
  {
    free(v13);
    if (v9) {
      goto LABEL_18;
    }
    return 0;
  }
  if (!v9) {
    return 0;
  }
LABEL_18:
  if (*(unsigned char *)v9 != 1) {
    return 0;
  }
  uint64_t v10 = *(void *)(v9 + 128);
  if (*(unsigned char *)(v10 + 16) != 16) {
    return 0;
  }
  uint64_t v11 = (unsigned int *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u) {
    uint64_t v11 = *(unsigned int **)v11;
  }
  return *v11;
}

void sub_1CC60CDA8(uint64_t a1, int a2, uint64_t **a3, unsigned __int8 *a4, size_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  v14[0] = a1;
  if (a1 < 0)
  {
    uint64_t v8 = 2;
    v14[1] = HIDWORD(a1) & 0x7FFFFFFF;
    if (a2 < 0)
    {
      uint64_t v8 = 3;
      void v14[2] = a2 & 0x7FFFFFFF;
    }
  }
  else
  {
    uint64_t v8 = 1;
  }
  uint64_t v9 = (llvm::Type *)(4 * v8);
  uint64_t v10 = llvm::ArrayType::get((llvm::ArrayType *)(**a3 + 1960), (llvm::Type *)v8);
  Impl = llvm::ConstantDataSequential::getImpl(v14, v9, v10);
  uint64_t v13 = llvm::ValueAsMetadata::get(Impl, v12);
  llvm::Module::addModuleFlag(a3, (llvm::Type *)2, a4, a5, v13);
}

unint64_t llvm::Module::getSDKVersion(llvm::Module *this)
{
  v11[24] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = v11;
  uint64_t v10 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v9);
  if (v10)
  {
    uint64_t v1 = (uint64_t *)((char *)v9 + 16);
    uint64_t v2 = 24 * v10;
    while (1)
    {
      uint64_t v3 = *(void **)(*(v1 - 1) + 8);
      if (*v3 == 11)
      {
        uint64_t v6 = v3[3];
        uint64_t v7 = *(void *)((char *)v3 + 27);
        if (v6 == 0x73726556204B4453 && v7 == 0x6E6F697372655620) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = *v1;
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }
  if (v9 != v11) {
    free(v9);
  }
  return sub_1CC60CFBC(v4);
}

unint64_t sub_1CC60CFBC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (*(unsigned char *)a1 != 1) {
    return 0;
  }
  uint64_t v1 = *(llvm::ConstantDataSequential **)(a1 + 128);
  if (!v1 || *((unsigned char *)v1 + 16) != 14 || !*(_DWORD *)(*(void *)v1 + 32)) {
    return 0;
  }
  uint64_t ElementAsInteger = llvm::ConstantDataSequential::getElementAsInteger(*(llvm::ConstantDataSequential **)(a1 + 128), 0);
  if (*(_DWORD *)(*(void *)v1 + 32) >= 2u)
  {
    uint64_t v3 = ElementAsInteger | (llvm::ConstantDataSequential::getElementAsInteger(v1, 1u) << 32);
    if (*(_DWORD *)(*(void *)v1 + 32) >= 3u) {
      llvm::ConstantDataSequential::getElementAsInteger(v1, 2u);
    }
    return v3 | 0x8000000000000000;
  }
  return ElementAsInteger;
}

void llvm::Module::getPtrAuthABIVersions(llvm::Module *this@<X0>, uint64_t a2@<X8>)
{
  v43[24] = *MEMORY[0x1E4F143B8];
  __src = v40;
  uint64_t v39 = 0x200000000;
  uint64_t v41 = v43;
  uint64_t v42 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v41);
  if (v42)
  {
    uint64_t v3 = (uint64_t *)((char *)v41 + 16);
    uint64_t v4 = 24 * v42;
    while (1)
    {
      uint64_t v5 = *(void **)(*(v3 - 1) + 8);
      if (*v5 == 19)
      {
        uint64_t v6 = v5[3];
        uint64_t v7 = v5[4];
        uint64_t v8 = *(void *)((char *)v5 + 35);
        BOOL v9 = v6 == 0x2E68747561727470 && v7 == 0x737265762D696261;
        if (v9 && v8 == 0x6E6F69737265762DLL) {
          break;
        }
      }
      v3 += 3;
      v4 -= 24;
      if (!v4) {
        goto LABEL_15;
      }
    }
    uint64_t v11 = *v3;
  }
  else
  {
LABEL_15:
    uint64_t v11 = 0;
  }
  if (v41 == v43)
  {
    if (!v11) {
      goto LABEL_25;
    }
  }
  else
  {
    free(v41);
    if (!v11) {
      goto LABEL_25;
    }
  }
  uint64_t v12 = *(unsigned int *)(v11 + 8);
  if (v12 == 1)
  {
    uint64_t v13 = (void *)(*(void *)(v11 - 8) - 8 * *(unsigned int *)(*(void *)(v11 - 8) + 8));
    uint64_t v14 = *(void *)(*v13 + 128);
    unsigned int v15 = *(_DWORD *)(v14 + 32);
    if (v15 > 0x40) {
      LODWORD(v14) = **(_DWORD **)(v14 + 24);
    }
    else {
      uint64_t v14 = (uint64_t)(*(void *)(v14 + 24) << -(char)v15) >> -(char)v15;
    }
    if (v14 == 0xFFFFFFFFLL)
    {
LABEL_25:
      *(void *)a2 = a2 + 16;
      *(void *)(a2 + 8) = 0x200000000;
      unsigned int v19 = v39;
      BOOL v20 = &__src == (void **)a2;
      if (!v39) {
        goto LABEL_53;
      }
      goto LABEL_46;
    }
    uint64_t v24 = *(void *)(v13[1] + 128);
    unsigned int v25 = *(_DWORD *)(v24 + 32);
    if (v25 > 0x40) {
      uint64_t v26 = **(void **)(v24 + 24);
    }
    else {
      uint64_t v26 = (uint64_t)(*(void *)(v24 + 24) << -(char)v25) >> -(char)v25;
    }
    unint64_t v35 = v14 | ((unint64_t)(v26 != 0) << 32);
    unsigned int v27 = v39;
  }
  else
  {
    uint64_t v16 = (void *)(*(void *)(v11 - 8 * v12) - 8 * *(unsigned int *)(*(void *)(v11 - 8 * v12) + 8));
    uint64_t v17 = *(void *)(*v16 + 128);
    unsigned int v18 = *(_DWORD *)(v17 + 32);
    if (v18 > 0x40) {
      LODWORD(v17) = **(_DWORD **)(v17 + 24);
    }
    else {
      uint64_t v17 = (uint64_t)(*(void *)(v17 + 24) << -(char)v18) >> -(char)v18;
    }
    uint64_t v21 = *(void *)(v16[1] + 128);
    unsigned int v22 = *(_DWORD *)(v21 + 32);
    if (v22 > 0x40) {
      uint64_t v23 = **(void **)(v21 + 24);
    }
    else {
      uint64_t v23 = (uint64_t)(*(void *)(v21 + 24) << -(char)v22) >> -(char)v22;
    }
    *((void *)__src + v39) = v17 | ((unint64_t)(v23 != 0) << 32);
    unsigned int v27 = v39 + 1;
    LODWORD(v39) = v39 + 1;
    uint64_t v28 = *(void *)(v11 - 8 * *(unsigned int *)(v11 + 8) + 8);
    uint64_t v29 = (void *)(v28 - 8 * *(unsigned int *)(v28 + 8));
    uint64_t v30 = *(void *)(*v29 + 128);
    unsigned int v31 = *(_DWORD *)(v30 + 32);
    if (v31 > 0x40) {
      LODWORD(v30) = **(_DWORD **)(v30 + 24);
    }
    else {
      uint64_t v30 = (uint64_t)(*(void *)(v30 + 24) << -(char)v31) >> -(char)v31;
    }
    uint64_t v32 = *(void *)(v29[1] + 128);
    unsigned int v33 = *(_DWORD *)(v32 + 32);
    if (v33 > 0x40) {
      uint64_t v34 = **(void **)(v32 + 24);
    }
    else {
      uint64_t v34 = (uint64_t)(*(void *)(v32 + 24) << -(char)v33) >> -(char)v33;
    }
    unint64_t v35 = v30 | ((unint64_t)(v34 != 0) << 32);
  }
  if (v27 >= HIDWORD(v39)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((void *)__src + v27) = v35;
  unsigned int v19 = v39 + 1;
  BOOL v36 = v39 == -1;
  LODWORD(v39) = v39 + 1;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x200000000;
  BOOL v20 = &__src == (void **)a2;
  if (!v36)
  {
LABEL_46:
    if (!v20)
    {
      if (__src == v40)
      {
        if (v19 >= 3)
        {
          *(_DWORD *)(a2 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(*(void **)a2, __src, 8 * v19);
        *(_DWORD *)(a2 + 8) = v19;
      }
      else
      {
        *(void *)a2 = __src;
        int v37 = HIDWORD(v39);
        *(_DWORD *)(a2 + 8) = v19;
        *(_DWORD *)(a2 + 12) = v37;
        __src = v40;
        HIDWORD(v39) = 0;
      }
      LODWORD(v39) = 0;
    }
  }
LABEL_53:
  if (__src != v40) {
    free(__src);
  }
}

unint64_t llvm::Module::getPtrAuthABIVersion(llvm::Module *this)
{
  void v7[2] = *MEMORY[0x1E4F143B8];
  llvm::Module::getPtrAuthABIVersions(this, (uint64_t)&v5);
  uint64_t v1 = v6;
  if (v6)
  {
    if (v6 == 1)
    {
      int v2 = *(_DWORD *)v5;
      if (*(_DWORD *)v5 == -1)
      {
        uint64_t v1 = 0;
        unint64_t v3 = 0;
      }
      else
      {
        if (v2 >= 64) {
          int v2 = 64;
        }
        unint64_t v3 = v2 & 0xFFFFFF00 | ((unint64_t)*((unsigned __int8 *)v5 + 4) << 32);
        uint64_t v1 = v2;
      }
    }
    else
    {
      unint64_t v3 = 0;
      uint64_t v1 = 64;
    }
  }
  else
  {
    unint64_t v3 = 0;
  }
  if (v5 != v7) {
    free(v5);
  }
  return v3 | v1;
}

uint64_t llvm::collectUsedGlobalVariables(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3 = 9;
  if (a3) {
    unint64_t v3 = 18;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 112);
  unint64_t v5 = *((unsigned int *)v4 + 8);
  if (v5 <= 1) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v3 < v6) {
    unint64_t v6 = v3;
  }
  if (v3 <= v5) {
    unint64_t v6 = v3;
  }
  if ((v5 & 0x80000000) == 0) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = v3;
  }
  uint64_t v8 = *((unsigned int *)v4 + 2);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v11 = a3 ? "llvm.compiler.used" : "llvm.used";
  do
    int v10 = 33 * v10 + v11[v9++];
  while (v7 != v9);
  uint64_t v12 = *v4;
  uint64_t v13 = *v4 + 8 * v8 + 8;
  int v14 = 1;
  int v15 = v10;
  while (1)
  {
    uint64_t v16 = v15 & (v8 - 1);
    uint64_t v17 = *(void **)(v12 + 8 * v16);
    if (v17 != (void *)-8)
    {
      if (!v17) {
        return 0;
      }
      if (*(_DWORD *)(v13 + 4 * v16) == v10 && v7 == *v17 && !memcmp(v11, (char *)v17 + *((unsigned int *)v4 + 5), v7)) {
        break;
      }
    }
    int v15 = v14 + v16;
    ++v14;
  }
  if (v16 == -1 || (int)v16 == v8) {
    return 0;
  }
  uint64_t v18 = *(void *)(*(void *)(v12 + 8 * (int)v16) + 8);
  if (!v18) {
    return v18;
  }
  if (*(unsigned char *)(v18 + 16) != 3 || (*(_DWORD *)(v18 + 32) & 0xFu) - 7 < 2) {
    return 0;
  }
  if ((*(_DWORD *)(v18 + 20) & 0x7FFFFFF) != 0)
  {
    uint64_t v19 = *(void *)(v18 - 32);
    int v20 = *(_DWORD *)(v19 + 20);
    if ((v20 & 0x40000000) != 0)
    {
      unsigned int v22 = *(llvm::Value ***)(v19 - 8);
      uint64_t v21 = v20 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v21 = v20 & 0x7FFFFFF;
      unsigned int v22 = (llvm::Value **)(v19 - 32 * v21);
    }
    if (v21)
    {
      uint64_t v23 = 32 * v21;
      do
      {
        uint64_t v24 = llvm::Value::stripPointerCasts(*v22);
        unint64_t v25 = *(unsigned int *)(a2 + 8);
        if (v25 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v25) = v24;
        ++*(_DWORD *)(a2 + 8);
        v22 += 4;
        v23 -= 32;
      }
      while (v23);
    }
  }
  return v18;
}

void llvm::Module::setPartialSampleProfileRatio(llvm::Module *this, const llvm::ModuleSummaryIndex *a2)
{
  v17[24] = *MEMORY[0x1E4F143B8];
  int v15 = v17;
  uint64_t v16 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v15);
  if (v16)
  {
    uint64_t v4 = (uint64_t *)((char *)v15 + 16);
    uint64_t v5 = 24 * v16;
    while (1)
    {
      unint64_t v6 = *(void **)(*(v4 - 1) + 8);
      if (*v6 == 14)
      {
        uint64_t v7 = v6[3];
        uint64_t v8 = *(void *)((char *)v6 + 30);
        if (v7 == 0x53656C69666F7250 && v8 == 0x7972616D6D755365) {
          break;
        }
      }
      v4 += 3;
      v5 -= 24;
      if (!v5) {
        goto LABEL_12;
      }
    }
    uint64_t v10 = *v4;
  }
  else
  {
LABEL_12:
    uint64_t v10 = 0;
  }
  if (v15 == v17)
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    free(v15);
    if (!v10) {
      return;
    }
  }
  uint64_t v11 = (_DWORD *)llvm::ProfileSummary::getFromMD(v10);
  int v15 = v11;
  if (!v11) {
    return;
  }
  if (*v11 != 2 || !*((unsigned char *)v11 + 72) || (unsigned int v12 = v11[16]) == 0)
  {
    int v15 = 0;
    uint64_t v13 = v11;
LABEL_20:
    sub_1CC025ED8((uint64_t)&v15, (uint64_t)v13);
    return;
  }
  *((double *)v11 + 10) = (double)*((unint64_t *)a2 + 37) / (double)v12;
  MD = llvm::ProfileSummary::getMD((llvm::ProfileSummary *)v11, *(llvm::LLVMContext **)this, 1, 1);
  llvm::Module::setModuleFlag((uint64_t **)this, (llvm::Type *)1, "ProfileSummary", 0xEuLL, MD);
  uint64_t v13 = v15;
  int v15 = 0;
  if (v13) {
    goto LABEL_20;
  }
}

const char *llvm::Module::getDarwinTargetVariantTriple(llvm::Module *this)
{
  v15[24] = *MEMORY[0x1E4F143B8];
  uint64_t v13 = v15;
  uint64_t v14 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v13);
  if (v14)
  {
    uint64_t v1 = (uint64_t *)((char *)v13 + 16);
    uint64_t v2 = 24 * v14;
    while (1)
    {
      uint64_t v3 = *(void *)(*(v1 - 1) + 8);
      if (*(void *)v3 == 28)
      {
        uint64_t v6 = *(void *)(v3 + 24);
        uint64_t v7 = *(void *)(v3 + 32);
        uint64_t v8 = *(void *)(v3 + 40);
        int v9 = *(_DWORD *)(v3 + 48);
        BOOL v10 = v6 == 0x742E6E6977726164 && v7 == 0x61765F7465677261;
        BOOL v11 = v10 && v8 == 0x72742E746E616972;
        if (v11 && v9 == 1701605481) {
          break;
        }
      }
      v1 += 3;
      v2 -= 24;
      if (!v2) {
        goto LABEL_5;
      }
    }
    uint64_t v4 = *v1;
  }
  else
  {
LABEL_5:
    uint64_t v4 = 0;
  }
  if (v13 != v15) {
    free(v13);
  }
  if (v4) {
    return (const char *)(*(void *)(v4 + 8) + 24);
  }
  else {
    return "";
  }
}

unint64_t llvm::Module::getDarwinTargetVariantSDKVersion(llvm::Module *this)
{
  v9[24] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = v9;
  uint64_t v8 = 0x800000000;
  llvm::Module::getModuleFlagsMetadata(this, (uint64_t)&v7);
  uint64_t v1 = v7;
  if (v8)
  {
    uint64_t v2 = (uint64_t *)((char *)v7 + 16);
    uint64_t v3 = 24 * v8;
    while (1)
    {
      uint64_t v4 = *(void **)(*(v2 - 1) + 8);
      if (*v4 == 33 && !memcmp("darwin.target_variant.SDK Version", v4 + 3, 0x21uLL)) {
        break;
      }
      v2 += 3;
      v3 -= 24;
      if (!v3) {
        goto LABEL_5;
      }
    }
    uint64_t v5 = *v2;
  }
  else
  {
LABEL_5:
    uint64_t v5 = 0;
  }
  if (v1 != v9) {
    free(v1);
  }
  return sub_1CC60CFBC(v5);
}

void *sub_1CC60DBB0(void *a1)
{
  uint64_t v2 = (void *)a1[12];
  if (v2)
  {
    a1[13] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[9], 8);
  MEMORY[0x1D25D9CD0](a1[6], 8);
  MEMORY[0x1D25D9CD0](a1[3], 8);
  MEMORY[0x1D25D9CD0](*a1, 8);
  return a1;
}

uint64_t sub_1CC60DC14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    while (1)
    {
      uint64_t v50 = a2;
      uint64_t v51 = *(void *)(a2 + 8);
      uint64_t v3 = a2 ? (int32x2_t ****)(a2 - 56) : 0;
      v3[5] = 0;
      if ((*((unsigned char *)v3 + 23) & 0x10) != 0)
      {
        uint64_t v52 = *(uint64_t **)(a1 + 104);
        if (v52) {
          break;
        }
      }
LABEL_27:
      uint64_t v28 = v3[7];
      uint64_t v29 = v3[8];
      *uint64_t v29 = (int32x2_t **)v28;
      v28[1] = (int32x2_t **)v29;
      v3[7] = 0;
      v3[8] = 0;
      int v30 = *((_DWORD *)v3 + 5);
      if ((v30 & 0x40000000) != 0)
      {
        uint64_t v32 = (int32x2_t ****)*(v3 - 1);
        uint64_t v31 = v30 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v31 = v30 & 0x7FFFFFF;
        uint64_t v32 = &v3[-4 * v31];
      }
      if (v31)
      {
        uint64_t v33 = 32 * v31;
        uint64_t v34 = v32 + 2;
        do
        {
          if (*(v34 - 2))
          {
            *void *v34 = *(v34 - 1);
            uint64_t v35 = (uint64_t)*(v34 - 1);
            if (v35) {
              *(void *)(v35 + 16) = *v34;
            }
          }
          *(v34 - 2) = 0;
          v34 += 4;
          v33 -= 32;
        }
        while (v33);
        int v30 = *((_DWORD *)v3 + 5);
      }
      if ((v30 & 0x20000000) != 0)
      {
        BOOL v36 = ***v3 + 310;
        uint64_t v53 = v3;
        sub_1CC6035CC(v36, &v53);
        *((_DWORD *)v3 + 5) &= ~0x20000000u;
      }
      uint64_t v37 = (uint64_t)v3[6];
      if (v37) {
        llvm::Comdat::removeUser(v37, (uint64_t)v3);
      }
      v3[6] = 0;
      llvm::Constant::removeDeadConstantUsers((uint64_t)v3);
      llvm::Value::~Value((llvm::Value *)v3, v38);
      int v39 = *((_DWORD *)v3 + 5);
      unsigned int v40 = v39 & 0xF8000000 | 1;
      *((_DWORD *)v3 + 5) = v40;
      if ((v39 & 0x40000000) != 0)
      {
        uint64_t v45 = *(v3 - 1);
        uint64_t v43 = v3 - 1;
        uint64_t v44 = v45;
        if (*v45)
        {
          *(void *)v44[2] = v44[1];
          uint64_t v47 = v44[1];
          if (v47) {
            *(void *)(v47 + 16) = v44[2];
          }
        }
        operator delete(v44);
      }
      else
      {
        uint64_t v41 = (int32x2_t ****)(v50 - 24);
        do
        {
          if (*(v41 - 8))
          {
            **(v41 - 6) = (int32x2_t **)*(v41 - 7);
            uint64_t v42 = (uint64_t)*(v41 - 7);
            if (v42) {
              *(void *)(v42 + 16) = *(v41 - 6);
            }
          }
          v41 -= 4;
        }
        while (v41 != v3);
        if ((v40 & 0x80000000) != 0) {
          uint64_t v43 = (int32x2_t ****)((char *)(v3 - 5) - (char *)*(v3 - 5));
        }
        else {
          uint64_t v43 = v3 - 4;
        }
      }
      operator delete(v43);
      a2 = v51;
      if (v51 == a3) {
        return a3;
      }
    }
    uint64_t v4 = ***v3;
    int32x2_t v5 = v4[19];
    uint64_t v6 = v4[21].u32[0];
    if (v6)
    {
      LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v8 = (int32x2_t *****)(*(void *)&v5 + 16 * v7);
      int v9 = *v8;
      if (*v8 == v3) {
        goto LABEL_13;
      }
      int v10 = 1;
      while (v9 != (int32x2_t ****)-4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & (v6 - 1);
        int v9 = *(int32x2_t *****)(*(void *)&v5 + 16 * v7);
        if (v9 == v3)
        {
          uint64_t v8 = (int32x2_t *****)(*(void *)&v5 + 16 * v7);
          goto LABEL_13;
        }
      }
    }
    uint64_t v8 = (int32x2_t *****)(*(void *)&v5 + 16 * v6);
LABEL_13:
    uint64_t v12 = *((unsigned int *)v52 + 2);
    if (v12)
    {
      uint64_t v13 = (size_t *)v8[1];
      uint64_t v14 = *((unsigned int *)v52 + 5);
      int v15 = (unsigned __int8 *)v13 + v14;
      size_t v16 = *v13;
      if (*v13)
      {
        int v17 = 0;
        size_t v18 = *v13;
        uint64_t v19 = v15;
        do
        {
          int v20 = *v19++;
          int v17 = 33 * v17 + v20;
          --v18;
        }
        while (v18);
      }
      else
      {
        int v17 = 0;
      }
      unsigned int v21 = v12 - 1;
      uint64_t v22 = *v52;
      uint64_t v23 = *v52 + 8 * v12 + 8;
      int v24 = 1;
      int v25 = v17;
      while (1)
      {
        uint64_t v26 = v25 & v21;
        unsigned int v27 = *(void **)(v22 + 8 * v26);
        if (v27 != (void *)-8)
        {
          if (!v27) {
            goto LABEL_27;
          }
          if (*(_DWORD *)(v23 + 4 * v26) == v17 && v16 == *v27 && (!v16 || !memcmp(v15, (char *)v27 + v14, v16))) {
            break;
          }
        }
        int v25 = v24 + v26;
        ++v24;
      }
      *(void *)(v22 + 8 * (int)v26) = -8;
      *(uint64_t *)((char *)v52 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v52 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_27;
  }
  return a3;
}

uint64_t sub_1CC60DF60(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = *(void *)(a2 + 8);
  uint64_t v42 = (int32x2_t ****)(a2 - 56);
  if (a2) {
    uint64_t v2 = (uint64_t ***)(a2 - 56);
  }
  else {
    uint64_t v2 = 0;
  }
  v2[5] = 0;
  if ((*((unsigned char *)v2 + 23) & 0x10) == 0) {
    goto LABEL_26;
  }
  uint64_t v45 = *(uint64_t **)(a1 + 88);
  if (!v45) {
    goto LABEL_26;
  }
  uint64_t v3 = ***v2;
  uint64_t v4 = *(void *)(v3 + 152);
  uint64_t v5 = *(unsigned int *)(v3 + 168);
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == v2) {
      goto LABEL_12;
    }
    int v9 = 1;
    while (v8 != (uint64_t ***)-4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(uint64_t ****)(v4 + 16 * v6);
      if (v8 == v2)
      {
        uint64_t v7 = (uint64_t ****)(v4 + 16 * v6);
        goto LABEL_12;
      }
    }
  }
  uint64_t v7 = (uint64_t ****)(v4 + 16 * v5);
LABEL_12:
  uint64_t v11 = *((unsigned int *)v45 + 2);
  if (v11)
  {
    uint64_t v12 = (size_t *)v7[1];
    uint64_t v13 = *((unsigned int *)v45 + 5);
    uint64_t v14 = (unsigned __int8 *)v12 + v13;
    size_t v15 = *v12;
    if (*v12)
    {
      int v16 = 0;
      size_t v17 = *v12;
      size_t v18 = v14;
      do
      {
        int v19 = *v18++;
        int v16 = 33 * v16 + v19;
        --v17;
      }
      while (v17);
    }
    else
    {
      int v16 = 0;
    }
    unsigned int v20 = v11 - 1;
    uint64_t v21 = *v45;
    uint64_t v22 = *v45 + 8 * v11 + 8;
    int v23 = 1;
    int v24 = v16;
    while (1)
    {
      uint64_t v25 = v24 & v20;
      uint64_t v26 = *(void **)(v21 + 8 * v25);
      if (v26 != (void *)-8)
      {
        if (!v26) {
          goto LABEL_26;
        }
        if (*(_DWORD *)(v22 + 4 * v25) == v16 && v15 == *v26 && (!v15 || !memcmp(v14, (char *)v26 + v13, v15))) {
          break;
        }
      }
      int v24 = v23 + v25;
      ++v23;
    }
    *(void *)(v21 + 8 * (int)v25) = -8;
    *(uint64_t *)((char *)v45 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v45 + 12), (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_26:
  unsigned int v27 = v2[7];
  uint64_t v28 = v2[8];
  *uint64_t v28 = (uint64_t *)v27;
  v27[1] = (uint64_t *)v28;
  v2[7] = 0;
  v2[8] = 0;
  if (a2)
  {
    llvm::Function::~Function(v42);
    int v30 = *(_DWORD *)(a2 - 36);
    if ((v30 & 0x40000000) != 0)
    {
      uint64_t v37 = *(char **)(a2 - 64);
      uint64_t v38 = v30 & 0x7FFFFFF;
      if (v38)
      {
        uint64_t v39 = 32 * v38;
        do
        {
          unsigned int v40 = &v37[v39];
          if (*(void *)&v37[v39 - 32])
          {
            **((void **)v40 - 2) = *((void *)v40 - 3);
            uint64_t v41 = *((void *)v40 - 3);
            if (v41) {
              *(void *)(v41 + 16) = *((void *)v40 - 2);
            }
          }
          v39 -= 32;
        }
        while (v39);
      }
      operator delete(v37);
      uint64_t v32 = (char *)(a2 - 64);
    }
    else
    {
      uint64_t v31 = v30 & 0x7FFFFFF;
      uint64_t v32 = (char *)(v29 - 32 * v31);
      if (v31)
      {
        uint64_t v33 = a2 - 88;
        uint64_t v34 = -32 * v31;
        do
        {
          if (*(void *)v33)
          {
            **(void **)(v33 + 16) = *(void *)(v33 + 8);
            uint64_t v35 = *(void *)(v33 + 8);
            if (v35) {
              *(void *)(v35 + 16) = *(void *)(v33 + 16);
            }
          }
          v33 -= 32;
          v34 += 32;
        }
        while (v34);
      }
      if (v30 < 0) {
        uint64_t v32 = &v32[-*((void *)v32 - 1) - 8];
      }
    }
    operator delete(v32);
  }
  return v44;
}

uint64_t sub_1CC60E1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3) {
    llvm::SymbolTableListTraits<llvm::GlobalAlias>::removeNodeFromList();
  }
  return a3;
}

unint64_t *sub_1CC60E26C(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = (char *)operator new(0x78uLL);
  *((_DWORD *)v3 + 13) = *((_DWORD *)v3 + 13) & 0x38000000 | 1;
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *((void *)v3 + 3) = v3 + 32;
  uint64_t v4 = *(const char ***)(a1 + 16);
  uint64_t v5 = **(llvm::PointerType ***)(a1 + 8);
  __int16 v10 = 261;
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  v9[0] = v6;
  v9[1] = v7;
  return llvm::GlobalVariable::GlobalVariable((unint64_t *)v3 + 4, v2, v5, 0, 0, 0, v9, 0, 0, 0, 0);
}

void *sub_1CC60E308(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  int v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 61) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61) {
LABEL_23:
    }
      abort();
    uint64_t result = operator new(8 * v11);
    int v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    void v7[2] = &result[v11];
    size_t v12 = a3 - v6;
    if (v12) {
      uint64_t result = memmove(result, v6, v12);
    }
    uint64_t v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v13 = (void **)(result + 1);
  uint64_t v14 = (unsigned char *)result[1];
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
  {
    size_t v12 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    size_t v17 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  int v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, 8 * v15);
    int v9 = (char *)*v13;
  }
  size_t v12 = a3 - v16;
  if (v12)
  {
    size_t v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v13 = &v9[v12];
  return result;
}

void *sub_1CC60E44C(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, _DWORD *a4)
{
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    int v23 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v23) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v23[16] = 2;
    *(void *)a1 = v23;
    unsigned int v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  uint64_t v28 = a4;
  int v8 = 0;
  if (__n)
  {
    size_t v9 = __n;
    uint64_t v10 = a2;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *(void *)a1;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *(void *)a1 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    int v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 {
           && __n == *v19
    }
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  int v19 = *(void **)(v12 + 8 * v18);
LABEL_17:
  uint64_t i = (void *)(v12 + 8 * v18);
  if (v19)
  {
    if (v19 != (void *)-8) {
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  int v24 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  uint64_t v25 = v24;
  uint64_t v26 = v24 + 16;
  if (__n) {
    memcpy(v24 + 16, a2, __n);
  }
  v26[__n] = 0;
  *(void *)uint64_t v25 = __n;
  *((_DWORD *)v25 + 2) = *v28;
  void *i = v25;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t llvm::ValueInfo::getELFVisibility(llvm::ValueInfo *this)
{
  unint64_t v1 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = v3 - v2;
  if (v3 == v2) {
    return 0;
  }
  char v5 = 0;
  uint64_t v6 = 8 * (v4 >> 3);
  do
  {
    int v7 = (*(unsigned __int16 *)(*(void *)v2 + 12) >> 4) & 3;
    if (v7 == 1) {
      return 1;
    }
    v5 |= v7 == 2;
    v2 += 8;
    v6 -= 8;
  }
  while (v6);
  if (v5) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t llvm::ValueInfo::canAutoHide(llvm::ValueInfo *this)
{
  unint64_t v1 = *(void *)this & 0xFFFFFFFFFFFFFFF8;
  uint64_t v2 = *(uint64_t **)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32) - (void)v2;
  if (!v3) {
    return 0;
  }
  unint64_t v4 = (v3 & 0xFFFFFFFFFFFFFFF8) - 8;
  do
  {
    uint64_t v5 = *v2++;
    unsigned int v6 = *(unsigned __int16 *)(v5 + 12);
    uint64_t result = (v6 >> 9) & 1;
    if ((v6 & 0x200) == 0) {
      break;
    }
    unint64_t v8 = v4;
    v4 -= 8;
  }
  while (v8);
  return result;
}

uint64_t llvm::ModuleSummaryIndex::isGUIDLive(llvm::ModuleSummaryIndex *this, unint64_t a2)
{
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (!v3) {
    goto LABEL_12;
  }
  unint64_t v4 = (char *)this + 8;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      int v7 = v3;
    }
    else {
      int v7 = v3 + 1;
    }
    if (v6) {
      unint64_t v4 = (char *)v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == v2 || *((void *)v4 + 4) > a2) {
LABEL_12:
  }
    unint64_t v4 = (char *)this + 8;
  if (v4 == v2) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = (unint64_t)(v4 + 32);
  }
  unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
    return 1;
  }
  uint64_t v10 = *(uint64_t **)(v9 + 24);
  uint64_t v11 = *(void *)(v9 + 32) - (void)v10;
  if (!v11 || !*((unsigned char *)this + 128)) {
    return 1;
  }
  uint64_t v12 = 8 * (v11 >> 3) - 8;
  do
  {
    uint64_t v13 = *v10++;
    unsigned int v14 = *(unsigned __int16 *)(v13 + 12);
    uint64_t result = (v14 >> 7) & 1;
    if ((v14 & 0x80) != 0) {
      break;
    }
    uint64_t v16 = v12;
    v12 -= 8;
  }
  while (v16);
  return result;
}

void *llvm::ModuleSummaryIndex::propagateAttributes(void *result, uint64_t a2)
{
  if (!byte_1EBCD8958) {
    return result;
  }
  uint64_t v2 = result;
  v45[0] = 0;
  v45[1] = 0;
  int v46 = 0;
  uint64_t v3 = (void *)*result;
  uint64_t v44 = result + 1;
  if ((void *)*result != result + 1)
  {
    while (1)
    {
      unint64_t v5 = (uint64_t *)v3[7];
      BOOL v6 = (uint64_t *)v3[8];
      if (v5 != v6) {
        break;
      }
LABEL_58:
      BOOL v36 = (void *)v3[1];
      if (v36)
      {
        do
        {
          uint64_t v37 = v36;
          BOOL v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          uint64_t v37 = (void *)v3[2];
          BOOL v10 = *v37 == (void)v3;
          uint64_t v3 = v37;
        }
        while (!v10);
      }
      uint64_t v3 = v37;
      if (v37 == v44) {
        goto LABEL_68;
      }
    }
    LOBYTE(v7) = 1;
    while (1)
    {
      uint64_t v8 = *v5;
      if (*((unsigned char *)v2 + 128) && (*(_WORD *)(v8 + 12) & 0x80) == 0)
      {
LABEL_57:
        if ((v7 & 1) == 0)
        {
          uint64_t v38 = (uint64_t *)v3[7];
          uint64_t v39 = (uint64_t *)v3[8];
          while (v38 != v39)
          {
            uint64_t v40 = *v38++;
            *(_WORD *)(v40 + 12) &= ~0x100u;
          }
        }
        goto LABEL_58;
      }
      int v9 = *(_DWORD *)(v8 + 8);
      if (v8) {
        BOOL v10 = v9 == 0;
      }
      else {
        BOOL v10 = 0;
      }
      if (v10)
      {
        uint64_t v11 = *(void *)(v8 + 72);
        if (v11) {
          BOOL v12 = *(_DWORD *)(v11 + 8) == 2;
        }
        else {
          BOOL v12 = 0;
        }
        if (!v12) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v11 = *v5;
        if (v9 != 2) {
          goto LABEL_23;
        }
      }
      __int16 v13 = *(_WORD *)(v8 + 12);
      if (((1 << (v13 & 0xF)) & 0x1EB) == 0 || (v13 & 0x40) != 0) {
        goto LABEL_22;
      }
      int v14 = *(_DWORD *)(a2 + 16);
      if (!v14) {
        goto LABEL_23;
      }
      uint64_t v15 = v3[4];
      int v16 = v14 - 1;
      unsigned int v17 = (37 * v15) & v16;
      uint64_t v18 = *(void *)(*(void *)a2 + 8 * v17);
      if (v15 == v18)
      {
LABEL_22:
        *(unsigned char *)(v11 + 72) &= 0xFCu;
        uint64_t v8 = *v5;
      }
      else
      {
        int v34 = 1;
        while (v18 != -1)
        {
          unsigned int v35 = v17 + v34++;
          unsigned int v17 = v35 & v16;
          uint64_t v18 = *(void *)(*(void *)a2 + 8 * v17);
          if (v15 == v18) {
            goto LABEL_22;
          }
        }
      }
LABEL_23:
      int v19 = *(uint64_t **)(v8 + 40);
      uint64_t v20 = *(uint64_t **)(v8 + 48);
      if (v20 != v19)
      {
        while (1)
        {
          uint64_t v21 = *v19;
          if ((*v19 & 6) != 0)
          {
            if (!v46) {
              goto LABEL_35;
            }
            unsigned int v24 = v21 & (v46 - 1) & 0xFFFFFFF8;
            unint64_t v25 = *(void *)(v45[0] + 8 * v24) & 0xFFFFFFFFFFFFFFF8;
            if ((v21 & 0xFFFFFFFFFFFFFFF8) != v25)
            {
              int v22 = 1;
              while (v25 != -8)
              {
                unsigned int v23 = v24 + v22++;
                unsigned int v24 = v23 & (v46 - 1);
                unint64_t v25 = *(void *)(v45[0] + 8 * v24) & 0xFFFFFFFFFFFFFFF8;
                if ((v21 & 0xFFFFFFFFFFFFFFF8) == v25) {
                  goto LABEL_34;
                }
              }
              goto LABEL_35;
            }
LABEL_34:
            if (v24 == v46) {
              goto LABEL_35;
            }
          }
          else
          {
            sub_1CD4AD7E0((uint64_t)v45, v19, (uint64_t)v47);
            if (v47[16])
            {
              uint64_t v21 = *v19;
LABEL_35:
              unint64_t v26 = v21 & 0xFFFFFFFFFFFFFFF8;
              unsigned int v27 = *(uint64_t **)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
              uint64_t v28 = *(void *)(v26 + 32) - (void)v27;
              if (v28)
              {
                uint64_t v29 = 8 * (v28 >> 3);
                do
                {
                  uint64_t v30 = *v27;
                  int v31 = *(_DWORD *)(*v27 + 8);
                  if (*v27) {
                    BOOL v32 = v31 == 0;
                  }
                  else {
                    BOOL v32 = 0;
                  }
                  if (v32)
                  {
                    uint64_t v30 = *(void *)(v30 + 72);
                    int v31 = *(_DWORD *)(v30 + 8);
                  }
                  if (v31 == 2)
                  {
                    uint64_t v33 = *v19;
                    if ((*v19 & 2) == 0)
                    {
                      *(unsigned char *)(v30 + 72) &= ~1u;
                      uint64_t v33 = *v19;
                    }
                    if ((v33 & 4) == 0) {
                      *(unsigned char *)(v30 + 72) &= ~2u;
                    }
                  }
                  ++v27;
                  v29 -= 8;
                }
                while (v29);
              }
            }
          }
          if (++v19 == v20)
          {
            uint64_t v8 = *v5;
            break;
          }
        }
      }
      v7 &= (unsigned __int16)(*(_WORD *)(v8 + 12) & 0x100) >> 8;
      if (++v5 == v6) {
        goto LABEL_57;
      }
    }
  }
LABEL_68:
  *(_WORD *)((char *)v2 + 129) = 257;
  if ((byte_1EBD0C080 & 1) != 0 || byte_1EA61F098)
  {
    uint64_t v41 = (void *)*v2;
    if ((void *)*v2 != v44)
    {
      do
      {
        uint64_t v42 = (void *)v41[1];
        if (v42)
        {
          do
          {
            uint64_t v43 = v42;
            uint64_t v42 = (void *)*v42;
          }
          while (v42);
        }
        else
        {
          do
          {
            uint64_t v43 = (void *)v41[2];
            BOOL v10 = *v43 == (void)v41;
            uint64_t v41 = v43;
          }
          while (!v10);
        }
        uint64_t v41 = v43;
      }
      while (v43 != v44);
    }
  }
  return (void *)MEMORY[0x1D25D9CD0](v45[0], 8);
}

BOOL llvm::ModuleSummaryIndex::canImportGlobalVar(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    uint64_t v3 = a2;
    if (!*(_DWORD *)(a2 + 8)) {
      uint64_t v3 = *(void *)(a2 + 72);
    }
  }
  __int16 v4 = *(_WORD *)(a2 + 12);
  BOOL v5 = 0;
  if (((1 << (v4 & 0xF)) & 0x1EB) != 0)
  {
    BOOL v5 = (v4 & 0x40) == 0;
    if (v4 & 0x40) == 0 && (a3) {
      return byte_1EBD06950 && (*(unsigned char *)(v3 + 72) & 4) != 0
    }
          || *(unsigned char *)(a1 + 129) && (*(unsigned char *)(v3 + 72) & 3) != 0
          || *(void *)(v3 + 48) == *(void *)(v3 + 40);
  }
  return v5;
}

void llvm::ModuleSummaryIndex::exportToDot(uint64_t **a1, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v229 = *MEMORY[0x1E4F143B8];
  __p = 0;
  unint64_t v218 = 0;
  uint64_t v219 = 0;
  v215[0] = 0;
  v215[1] = 0;
  unsigned int v216 = 0;
  v214[0] = 0;
  v214[1] = 0;
  uint64_t v213 = v214;
  uint64_t v201 = a1;
  sub_1CD5D46D4(a1, (uint64_t)&v213);
  *(void *)unint64_t v210 = a2;
  BOOL v211 = &v212;
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 0x11)
  {
    *(_WORD *)(v4 + 16) = 2683;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"digraph Summary {\n";
    *((void *)a2 + 4) += 18;
  }
  else
  {
    llvm::raw_ostream::write(a2, "digraph Summary {\n", 0x12uLL);
  }
  BOOL v5 = v213;
  uint64_t v199 = a2;
  if (v213 != v214)
  {
    uint64_t v196 = v201 + 1;
    while (1)
    {
      unint64_t __val = 0;
      uint64_t v11 = *((unsigned int *)v201 + 8);
      if (!v11) {
        goto LABEL_321;
      }
      __int16 v13 = (const void *)v5[4];
      size_t v12 = v5[5];
      int v14 = 0;
      if (v12)
      {
        uint64_t v15 = v5[5];
        int v16 = (unsigned __int8 *)v5[4];
        do
        {
          int v17 = *v16++;
          int v14 = 33 * v14 + v17;
          --v15;
        }
        while (v15);
      }
      unsigned int v18 = v11 - 1;
      int v19 = v201[3];
      uint64_t v200 = *((unsigned int *)v201 + 8);
      uint64_t v20 = (uint64_t)&v19[v11 + 1];
      int v21 = 1;
      int v22 = v14;
      while (1)
      {
        uint64_t v23 = v22 & v18;
        unsigned int v24 = (void *)v19[v23];
        if (v24 != (void *)-8)
        {
          if (!v24)
          {
            a2 = v199;
            goto LABEL_26;
          }
          if (*(_DWORD *)(v20 + 4 * v23) == v14
            && v12 == *v24
            && (!v12 || !memcmp(v13, (char *)v24 + *((unsigned int *)v201 + 11), v12)))
          {
            break;
          }
        }
        int v22 = v21 + v23;
        ++v21;
      }
      a2 = v199;
      if (v23 == -1 || (int)v23 == v200) {
LABEL_321:
      }
        unsigned int v24 = 0;
      else {
        unsigned int v24 = *(void **)(v19[(int)v23] + 8);
      }
LABEL_26:
      unint64_t __val = (unint64_t)v24;
      unint64_t v25 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v25 > 0xCuLL)
      {
        qmemcpy(v25, "  // Module: ", 13);
        unint64_t v26 = (unsigned char *)(*((void *)a2 + 4) + 13);
        *((void *)a2 + 4) = v26;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  // Module: ", 0xDuLL);
        unint64_t v26 = (unsigned char *)*((void *)a2 + 4);
      }
      unsigned int v27 = (const void *)v5[4];
      unint64_t v28 = v5[5];
      if (v28 <= *((void *)a2 + 3) - (void)v26)
      {
        if (v28)
        {
          memcpy(v26, v27, v5[5]);
          unint64_t v26 = (unsigned char *)(*((void *)a2 + 4) + v28);
          *((void *)a2 + 4) = v26;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, (const char *)v27, v5[5]);
        unint64_t v26 = (unsigned char *)*((void *)a2 + 4);
      }
      if (*((unsigned char **)a2 + 3) == v26)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
        uint64_t v29 = *((void *)a2 + 4);
      }
      else
      {
        unsigned char *v26 = 10;
        uint64_t v29 = *((void *)a2 + 4) + 1;
        *((void *)a2 + 4) = v29;
      }
      if ((unint64_t)(*((void *)a2 + 3) - v29) > 0x12)
      {
        *(_DWORD *)(v29 + 15) = 1601332596;
        *(_OWORD *)uint64_t v29 = *(_OWORD *)"  subgraph cluster_";
        *((void *)a2 + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  subgraph cluster_", 0x13uLL);
      }
      std::to_string((std::string *)v225, __val);
      if (v225[23] >= 0) {
        uint64_t v30 = v225;
      }
      else {
        uint64_t v30 = *(const char **)v225;
      }
      if (v225[23] >= 0) {
        size_t v31 = v225[23] & 0x7F;
      }
      else {
        size_t v31 = *(void *)&v225[8];
      }
      llvm::raw_ostream::write(a2, v30, v31);
      uint64_t v32 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v32) > 2)
      {
        *(unsigned char *)(v32 + 2) = 10;
        *(_WORD *)uint64_t v32 = 31520;
        *((void *)a2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a2, " {\n", 3uLL);
      }
      if ((v225[23] & 0x80000000) != 0) {
        operator delete(*(void **)v225);
      }
      uint64_t v33 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v33) > 0x13)
      {
        *(_DWORD *)(v33 + 16) = 171664485;
        *(_OWORD *)uint64_t v33 = *(_OWORD *)"    style = filled;\n";
        int v34 = (void *)(*((void *)a2 + 4) + 20);
        *((void *)a2 + 4) = v34;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    style = filled;\n", 0x14uLL);
        int v34 = (void *)*((void *)a2 + 4);
      }
      if (*((void *)a2 + 3) - (void)v34 > 0x16uLL)
      {
        qmemcpy(v34, "    color = lightgrey;\n", 23);
        unsigned int v35 = (void *)(*((void *)a2 + 4) + 23);
        *((void *)a2 + 4) = v35;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    color = lightgrey;\n", 0x17uLL);
        unsigned int v35 = (void *)*((void *)a2 + 4);
      }
      if (*((void *)a2 + 3) - (void)v35 > 0xCuLL)
      {
        qmemcpy(v35, "    label = \"", 13);
        *((void *)a2 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    label = \"", 0xDuLL);
      }
      uint64_t v36 = v5[4];
      unint64_t v37 = v5[5];
      *(void *)&v225[24] = 0;
      *(void *)uint64_t v225 = v36;
      *(_OWORD *)&v225[8] = v37;
      *(void *)&long long v226 = v37;
      DWORD2(v226) = 0;
      llvm::sys::path::reverse_iterator::operator++((uint64_t)v225);
      uint64_t v38 = *(void *)&v225[24];
      uint64_t v39 = (unsigned char *)*((void *)a2 + 4);
      if (*(void *)&v225[24] <= *((void *)a2 + 3) - (void)v39)
      {
        if (*(void *)&v225[24])
        {
          memcpy(v39, *(const void **)&v225[16], *(size_t *)&v225[24]);
          uint64_t v39 = (unsigned char *)(*((void *)a2 + 4) + v38);
          *((void *)a2 + 4) = v39;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, *(const char **)&v225[16], *(size_t *)&v225[24]);
        uint64_t v39 = (unsigned char *)*((void *)a2 + 4);
      }
      if (*((void *)a2 + 3) - (void)v39 > 2uLL)
      {
        v39[2] = 10;
        *(_WORD *)uint64_t v39 = 15138;
        uint64_t v40 = (void *)(*((void *)a2 + 4) + 3);
        *((void *)a2 + 4) = v40;
      }
      else
      {
        llvm::raw_ostream::write(a2, "\";\n", 3uLL);
        uint64_t v40 = (void *)*((void *)a2 + 4);
      }
      if (*((void *)a2 + 3) - (void)v40 > 0x2CuLL)
      {
        qmemcpy(v40, "    node [style=filled,fillcolor=lightblue];\n", 45);
        *((void *)a2 + 4) += 45;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    node [style=filled,fillcolor=lightblue];\n", 0x2DuLL);
      }
      uint64_t v41 = (void *)v5[6];
      v208[0] = v5 + 6;
      v208[1] = &__p;
      v208[2] = &__val;
      v208[3] = v210;
      v198 = v5 + 6;
      uint64_t v42 = v5 + 7;
      if (v41 != v5 + 7) {
        break;
      }
LABEL_285:
      int v143 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v143 > 0xDuLL)
      {
        qmemcpy(v143, "    // Edges:\n", 14);
        *((void *)a2 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    // Edges:\n", 0xEuLL);
      }
      uint64_t v144 = (void *)*v198;
      if ((void *)*v198 != v42)
      {
        do
        {
          uint64_t v145 = v144[5];
          int v146 = *(uint64_t **)(v145 + 40);
          uint64_t v147 = *(void *)(v145 + 48) - (void)v146;
          if (!v147) {
            goto LABEL_298;
          }
          uint64_t v148 = 8 * (v147 >> 3);
          do
          {
            uint64_t v150 = *v146++;
            char v149 = v150;
            unint64_t v151 = *(void *)(v150 & 0xFFFFFFFFFFFFFFF8);
            if ((v150 & 2) != 0) {
              int v152 = -2;
            }
            else {
              int v152 = -3;
            }
            if ((v149 & 4) != 0) {
              int v153 = -1;
            }
            else {
              int v153 = v152;
            }
            sub_1CC6107A8((uint64_t)v208, v144[4], v151, v153);
            v148 -= 8;
          }
          while (v148);
          uint64_t v145 = v144[5];
          if (v145)
          {
LABEL_298:
            int v154 = *(_DWORD *)(v145 + 8);
            if (v154)
            {
              if (v154 == 1)
              {
                uint64_t v155 = *(void *)(v145 + 80);
                for (uint64_t i = *(void *)(v145 + 88); v155 != i; v155 += 16)
                  sub_1CC6107A8((uint64_t)v208, v144[4], *(void *)(*(void *)v155 & 0xFFFFFFFFFFFFFFF8), *(_DWORD *)(v155 + 8) & 7);
              }
            }
            else
            {
              sub_1CC6107A8((uint64_t)v208, v144[4], *(void *)(*(void *)(v145 + 64) & 0xFFFFFFFFFFFFFFF8), -4);
            }
          }
          long long v157 = (void *)v144[1];
          if (v157)
          {
            do
            {
              BOOL v158 = v157;
              long long v157 = (void *)*v157;
            }
            while (v157);
          }
          else
          {
            do
            {
              BOOL v158 = (void *)v144[2];
              BOOL v140 = *v158 == (void)v144;
              uint64_t v144 = v158;
            }
            while (!v140);
          }
          uint64_t v144 = v158;
        }
        while (v158 != v42);
      }
      int v159 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v159 > 3uLL)
      {
        _DWORD *v159 = 175972384;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  }\n", 4uLL);
      }
      uint64_t v160 = (void *)v5[1];
      if (v160)
      {
        do
        {
          unint64_t v161 = (void **)v160;
          uint64_t v160 = (void *)*v160;
        }
        while (v160);
      }
      else
      {
        do
        {
          unint64_t v161 = (void **)v5[2];
          BOOL v140 = *v161 == v5;
          BOOL v5 = v161;
        }
        while (!v140);
      }
      BOOL v5 = v161;
      if (v161 == v214) {
        goto LABEL_4;
      }
    }
    while (1)
    {
      uint64_t v43 = v41 + 4;
      uint64_t v44 = sub_1CD5D4D7C((uint64_t)v215, v41 + 4);
      uint64_t v45 = v44;
      uint64_t v47 = (unint64_t *)v44[2];
      unint64_t v46 = v44[3];
      if ((unint64_t)v47 >= v46)
      {
        uint64_t v49 = (unint64_t *)v44[1];
        uint64_t v50 = v47 - v49;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 61) {
          goto LABEL_406;
        }
        uint64_t v52 = v46 - (void)v49;
        if (v52 >> 2 > v51) {
          unint64_t v51 = v52 >> 2;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          if (v53 >> 61) {
LABEL_407:
          }
            sub_1CB833614();
          uint64_t v54 = (char *)operator new(8 * v53);
        }
        else
        {
          uint64_t v54 = 0;
        }
        uint64_t v55 = (unint64_t *)&v54[8 * v50];
        unint64_t *v55 = __val;
        uint64_t v48 = v55 + 1;
        while (v47 != v49)
        {
          unint64_t v56 = *--v47;
          *--uint64_t v55 = v56;
        }
        v45[1] = v55;
        void v45[2] = v48;
        v45[3] = &v54[8 * v53];
        if (v49) {
          operator delete(v49);
        }
        a2 = v199;
      }
      else
      {
        unint64_t *v47 = __val;
        uint64_t v48 = v47 + 1;
      }
      void v45[2] = v48;
      int v57 = *(_DWORD *)(v41[5] + 12);
      long long v226 = 0u;
      memset(v225, 0, sizeof(v225));
      int v58 = *(_DWORD *)(v41[5] + 8);
      if (!v58)
      {
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"style";
        __int16 v207 = 259;
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)"dotted,filled";
        __int16 v205 = 259;
        v202.__r_.__value_.__r.__words[0] = (std::string::size_type)"alias";
        __int16 v203 = 259;
        sub_1CC610450((unint64_t *)v225, (llvm::Twine *)&v206, (llvm::Twine *)&v204, (unsigned __int8 *)&v202);
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"shape";
        __int16 v207 = 259;
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)"box";
        __int16 v205 = 259;
        __int16 v203 = 257;
        sub_1CC610450((unint64_t *)v225, (llvm::Twine *)&v206, (llvm::Twine *)&v204, (unsigned __int8 *)&v202);
        goto LABEL_96;
      }
      if (v58 == 1)
      {
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"shape";
        __int16 v207 = 259;
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)"record";
        __int16 v205 = 259;
        v202.__r_.__value_.__r.__words[0] = (std::string::size_type)"function";
        __int16 v203 = 259;
        sub_1CC610450((unint64_t *)v225, (llvm::Twine *)&v206, (llvm::Twine *)&v204, (unsigned __int8 *)&v202);
        goto LABEL_96;
      }
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"shape";
      __int16 v207 = 259;
      v204.__r_.__value_.__r.__words[0] = (std::string::size_type)"Mrecord";
      __int16 v205 = 259;
      v202.__r_.__value_.__r.__words[0] = (std::string::size_type)"variable";
      __int16 v203 = 259;
      sub_1CC610450((unint64_t *)v225, (llvm::Twine *)&v206, (llvm::Twine *)&v204, (unsigned __int8 *)&v202);
      if ((v57 & 0x80) == 0) {
        goto LABEL_96;
      }
      uint64_t v59 = v41[5];
      int v60 = *(_DWORD *)(v59 + 8);
      if (!v59 || v60 != 2) {
        goto LABEL_89;
      }
      char v61 = *(unsigned char *)(v59 + 72);
      if (v61) {
        break;
      }
LABEL_91:
      if ((v61 & 2) != 0)
      {
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"writeOnly";
        __int16 v207 = 259;
        sub_1CC610560((uint64_t)v225, (unsigned __int8 *)&v206);
        uint64_t v62 = v41[5];
        if (*(_DWORD *)(v62 + 8) != 2) {
          goto LABEL_96;
        }
        char v61 = *(unsigned char *)(v62 + 72);
      }
      if ((v61 & 4) != 0)
      {
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"constant";
        __int16 v207 = 259;
        sub_1CC610560((uint64_t)v225, (unsigned __int8 *)&v206);
      }
LABEL_96:
      if ((v57 & 0x30) != 0)
      {
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"visibility";
        __int16 v207 = 259;
        sub_1CC610560((uint64_t)v225, (unsigned __int8 *)&v206);
      }
      if ((v57 & 0x100) != 0)
      {
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"dsoLocal";
        __int16 v207 = 259;
        sub_1CC610560((uint64_t)v225, (unsigned __int8 *)&v206);
      }
      if ((v57 & 0x200) != 0)
      {
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"canAutoHide";
        __int16 v207 = 259;
        sub_1CC610560((uint64_t)v225, (unsigned __int8 *)&v206);
      }
      int v63 = *(_DWORD *)(a3 + 16);
      unint64_t v64 = *v43;
      if (v63)
      {
        int v65 = v63 - 1;
        unsigned int v66 = (37 * v64) & v65;
        uint64_t v67 = *(void *)(*(void *)a3 + 8 * v66);
        if (v64 == v67)
        {
LABEL_104:
          v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"preserved";
          __int16 v207 = 259;
          sub_1CC610560((uint64_t)v225, (unsigned __int8 *)&v206);
          unint64_t v64 = *v43;
        }
        else
        {
          int v141 = 1;
          while (v67 != -1)
          {
            unsigned int v142 = v66 + v141++;
            unsigned int v66 = v142 & v65;
            uint64_t v67 = *(void *)(*(void *)a3 + 8 * v66);
            if (v64 == v67) {
              goto LABEL_104;
            }
          }
        }
      }
      uint64_t v68 = (void *)*v196;
      if (!*v196) {
        goto LABEL_116;
      }
      uint64_t v69 = v196;
      do
      {
        unint64_t v70 = v68[4];
        BOOL v71 = v70 >= v64;
        if (v70 >= v64) {
          uint64_t v72 = v68;
        }
        else {
          uint64_t v72 = v68 + 1;
        }
        if (v71) {
          uint64_t v69 = v68;
        }
        uint64_t v68 = (void *)*v72;
      }
      while (*v72);
      if (v69 == v196 || v69[4] > v64) {
LABEL_116:
      }
        uint64_t v69 = v196;
      if (v69 == v196) {
        unint64_t v73 = 0;
      }
      else {
        unint64_t v73 = (unint64_t)(v69 + 4);
      }
      unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFF8 | *((unsigned __int8 *)v201 + 133);
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"label";
      __int16 v207 = 259;
      uint64_t v75 = v41[5];
      int v76 = *(_DWORD *)(v75 + 8);
      if (!v76)
      {
        sub_1CC610B50((uint64_t)&v223, v74);
        goto LABEL_203;
      }
      if (v76 == 1)
      {
        *((unsigned char *)&v224.__r_.__value_.__s + 23) = 6;
        strcpy((char *)&v224, "inst: ");
        std::to_string(&v223, *(_DWORD *)(v75 + 64));
        if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v77 = &v223;
        }
        else {
          uint64_t v77 = (std::string *)v223.__r_.__value_.__r.__words[0];
        }
        if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = *((unsigned char *)&v223.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type size = v223.__r_.__value_.__l.__size_;
        }
        uint64_t v79 = std::string::append(&v224, (const std::string::value_type *)v77, size);
        std::string::size_type v80 = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v202.__r_.__value_.__r.__words[2] = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        int64_t v81 = std::string::append(&v202, ", ffl: ");
        std::string::size_type v82 = v81->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v204.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
        v204.__r_.__value_.__r.__words[2] = v82;
        v81->__r_.__value_.__l.__size_ = 0;
        v81->__r_.__value_.__r.__words[2] = 0;
        v81->__r_.__value_.__r.__words[0] = 0;
        unsigned int v83 = *(unsigned __int16 *)(v75 + 68);
        *(int8x8_t *)__s = vbsl_s8(vmovn_s16(vceqzq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(v83), (int8x16_t)xmmword_1CFB1B6E0))), (int8x8_t)0x3030303030303030, (int8x8_t)0x3131313131313131);
        if ((v83 & 0x100) != 0) {
          char v84 = 49;
        }
        else {
          char v84 = 48;
        }
        __s[8] = v84;
        if ((v83 & 0x200) != 0) {
          char v85 = 49;
        }
        else {
          char v85 = 48;
        }
        __s[9] = v85;
        __s[10] = 0;
        size_t v86 = strlen(__s);
        if (v86 >= 0x7FFFFFFFFFFFFFF8) {
LABEL_406:
        }
          abort();
        size_t v87 = v86;
        char v195 = v57;
        if (v86 >= 0x17)
        {
          uint64_t v89 = (v86 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v86 | 7) != 0x17) {
            uint64_t v89 = v86 | 7;
          }
          uint64_t v90 = v89 + 1;
          p_dst = (void **)operator new(v89 + 1);
          unint64_t v91 = v90 | 0x8000000000000000;
          uint64_t v43 = v41 + 4;
          std::string::size_type v221 = v87;
          int64_t v222 = v91;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v222) = v86;
          p_dst = (void **)&__dst;
          if (!v86) {
            goto LABEL_144;
          }
        }
        memcpy(p_dst, __s, v87);
LABEL_144:
        *((unsigned char *)p_dst + v87) = 0;
        if (v222 >= 0) {
          uint64_t v92 = (const std::string::value_type *)&__dst;
        }
        else {
          uint64_t v92 = (const std::string::value_type *)__dst;
        }
        if (v222 >= 0) {
          std::string::size_type v93 = HIBYTE(v222) & 0x7F;
        }
        else {
          std::string::size_type v93 = v221;
        }
        unint64_t v94 = std::string::append(&v204, v92, v93);
        std::string::size_type v95 = v94->__r_.__value_.__r.__words[2];
        *(_OWORD *)__s = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
        uint64_t v228 = v95;
        v94->__r_.__value_.__l.__size_ = 0;
        v94->__r_.__value_.__r.__words[2] = 0;
        v94->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v222) < 0) {
          operator delete(__dst);
        }
        a2 = v199;
        LOBYTE(v57) = v195;
        if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v204.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v202.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v223.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v224.__r_.__value_.__l.__data_);
        }
        goto LABEL_160;
      }
      HIBYTE(v228) = 0;
      __s[0] = 0;
LABEL_160:
      sub_1CC610B50((uint64_t)&v202, v74);
      uint64_t v96 = std::string::append(&v202, "|");
      std::string::size_type v97 = v96->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v204.__r_.__value_.__l.__data_ = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
      v204.__r_.__value_.__r.__words[2] = v97;
      v96->__r_.__value_.__l.__size_ = 0;
      v96->__r_.__value_.__r.__words[2] = 0;
      v96->__r_.__value_.__r.__words[0] = 0;
      switch(*(_WORD *)(v75 + 12) & 0xF)
      {
        case 0:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 6;
          LODWORD(v224.__r_.__value_.__l.__data_) = 1702131813;
          __int16 v98 = 28274;
          goto LABEL_173;
        case 1:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 6;
          LODWORD(v224.__r_.__value_.__l.__data_) = 1700755041;
          __int16 v98 = 29816;
          goto LABEL_173;
        case 2:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 8;
          std::string::size_type v99 = 0x65636E6F6B6E696CLL;
          goto LABEL_169;
        case 3:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 12;
          strcpy((char *)&v224, "linkonce_odr");
          std::string::size_type v100 = 12;
          break;
        case 4:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 4;
          strcpy((char *)&v224, "weak");
          std::string::size_type v100 = 4;
          break;
        case 5:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 8;
          std::string::size_type v99 = 0x72646F5F6B616577;
          goto LABEL_169;
        case 6:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 9;
          LOWORD(v224.__r_.__value_.__r.__words[1]) = 103;
          uint64_t v101 = "appending";
          goto LABEL_175;
        case 7:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 8;
          std::string::size_type v99 = 0x6C616E7265746E69;
LABEL_169:
          v224.__r_.__value_.__r.__words[0] = v99;
          std::string::size_type v100 = 8;
          v224.__r_.__value_.__s.__data_[8] = 0;
          break;
        case 8:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 7;
          strcpy((char *)&v224, "private");
          std::string::size_type v100 = 7;
          break;
        case 9:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 11;
          strcpy((char *)&v224, "extern_weak");
          std::string::size_type v100 = 11;
          break;
        case 0xA:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 6;
          LODWORD(v224.__r_.__value_.__l.__data_) = 1835888483;
          __int16 v98 = 28271;
LABEL_173:
          WORD2(v224.__r_.__value_.__r.__words[0]) = v98;
          std::string::size_type v100 = 6;
          v224.__r_.__value_.__s.__data_[6] = 0;
          break;
        default:
          *((unsigned char *)&v224.__r_.__value_.__s + 23) = 9;
          LOWORD(v224.__r_.__value_.__r.__words[1]) = 62;
          uint64_t v101 = "<unknown>";
LABEL_175:
          v224.__r_.__value_.__r.__words[0] = *(void *)v101;
          std::string::size_type v100 = 9;
          break;
      }
      uint64_t v102 = std::string::append(&v204, (const std::string::value_type *)&v224, v100);
      std::string::size_type v103 = v102->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v223.__r_.__value_.__l.__data_ = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
      v223.__r_.__value_.__r.__words[2] = v103;
      v102->__r_.__value_.__l.__size_ = 0;
      v102->__r_.__value_.__r.__words[2] = 0;
      v102->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v224.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v204.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v202.__r_.__value_.__l.__data_);
      }
      if (v228 >= 0) {
        std::string::size_type v104 = HIBYTE(v228) & 0x7F;
      }
      else {
        std::string::size_type v104 = *(void *)&__s[8];
      }
      if (v104)
      {
        *((unsigned char *)&v224.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v224, " (");
        if (v228 >= 0) {
          unint64_t v105 = __s;
        }
        else {
          unint64_t v105 = *(char **)__s;
        }
        uint64_t v106 = std::string::append(&v224, v105, v104);
        std::string::size_type v107 = v106->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v202.__r_.__value_.__l.__data_ = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
        v202.__r_.__value_.__r.__words[2] = v107;
        v106->__r_.__value_.__l.__size_ = 0;
        v106->__r_.__value_.__r.__words[2] = 0;
        v106->__r_.__value_.__r.__words[0] = 0;
        unint64_t v108 = std::string::append(&v202, ")");
        std::string::size_type v109 = v108->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v204.__r_.__value_.__l.__data_ = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
        v204.__r_.__value_.__r.__words[2] = v109;
        v108->__r_.__value_.__l.__size_ = 0;
        v108->__r_.__value_.__r.__words[2] = 0;
        v108->__r_.__value_.__r.__words[0] = 0;
        if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v110 = &v204;
        }
        else {
          uint64_t v110 = (std::string *)v204.__r_.__value_.__r.__words[0];
        }
        if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v111 = *((unsigned char *)&v204.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v111 = v204.__r_.__value_.__l.__size_;
        }
        std::string::append(&v223, (const std::string::value_type *)v110, v111);
        if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v204.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v202.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v224.__r_.__value_.__l.__data_);
        }
      }
      std::string::append(&v223, "}");
      if (SHIBYTE(v228) < 0) {
        operator delete(*(void **)__s);
      }
LABEL_203:
      __int16 v205 = 260;
      v204.__r_.__value_.__r.__words[0] = (std::string::size_type)&v223;
      __int16 v203 = 257;
      sub_1CC610450((unint64_t *)v225, (llvm::Twine *)&v206, (llvm::Twine *)&v204, (unsigned __int8 *)&v202);
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v223.__r_.__value_.__l.__data_);
        if ((v57 & 0x80) == 0)
        {
LABEL_205:
          v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"fillcolor";
          __int16 v207 = 259;
          v204.__r_.__value_.__r.__words[0] = (std::string::size_type)"red";
          __int16 v205 = 259;
          uint64_t v112 = "dead";
LABEL_209:
          v202.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
          __int16 v203 = 259;
          sub_1CC610450((unint64_t *)v225, (llvm::Twine *)&v206, (llvm::Twine *)&v204, (unsigned __int8 *)&v202);
          goto LABEL_210;
        }
      }
      else if ((v57 & 0x80) == 0)
      {
        goto LABEL_205;
      }
      if ((v57 & 0x40) != 0)
      {
        v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"fillcolor";
        __int16 v207 = 259;
        v204.__r_.__value_.__r.__words[0] = (std::string::size_type)"yellow";
        __int16 v205 = 259;
        uint64_t v112 = "not eligible to import";
        goto LABEL_209;
      }
LABEL_210:
      uint64_t v113 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v113 > 3uLL)
      {
        *uint64_t v113 = 538976288;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, "    ", 4uLL);
      }
      sub_1CC610620(&v204, __val, *v43);
      if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v114 = &v204;
      }
      else {
        uint64_t v114 = (std::string *)v204.__r_.__value_.__r.__words[0];
      }
      if ((v204.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v115 = *((unsigned char *)&v204.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        size_t v115 = v204.__r_.__value_.__l.__size_;
      }
      llvm::raw_ostream::write(a2, (const char *)v114, v115);
      uint64_t v116 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v116)
      {
        llvm::raw_ostream::write(a2, " ", 1uLL);
      }
      else
      {
        unsigned char *v116 = 32;
        ++*((void *)a2 + 4);
      }
      __int16 v118 = *(const void ***)&v225[8];
      uint64_t v117 = *(const void ***)v225;
      if (*(void *)v225 == *(void *)&v225[8])
      {
        char v130 = 0;
        *((unsigned char *)&v202.__r_.__value_.__s + 23) = 0;
        v202.__r_.__value_.__s.__data_[0] = 0;
        uint64_t v42 = v5 + 7;
      }
      else
      {
        *((unsigned char *)&v202.__r_.__value_.__s + 23) = 1;
        LOWORD(v202.__r_.__value_.__l.__data_) = 91;
        do
        {
          char v119 = *((unsigned char *)v117 + 23);
          int v120 = v119;
          size_t v121 = v119 & 0x7F;
          if (v120 >= 0) {
            size_t v122 = v121;
          }
          else {
            size_t v122 = (size_t)v117[1];
          }
          sub_1CB907098((uint64_t)&v206, v122 + 1);
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v123 = &v206;
          }
          else {
            uint64_t v123 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          if (v122)
          {
            if (*((char *)v117 + 23) >= 0) {
              uint64_t v124 = v117;
            }
            else {
              uint64_t v124 = *v117;
            }
            memmove(v123, v124, v122);
          }
          *(_WORD *)((char *)&v123->__r_.__value_.__l.__data_ + v122) = 44;
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v125 = &v206;
          }
          else {
            uint64_t v125 = (std::string *)v206.__r_.__value_.__r.__words[0];
          }
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v126 = *((unsigned char *)&v206.__r_.__value_.__s + 23) & 0x7F;
          }
          else {
            std::string::size_type v126 = v206.__r_.__value_.__l.__size_;
          }
          std::string::append(&v202, (const std::string::value_type *)v125, v126);
          if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v206.__r_.__value_.__l.__data_);
          }
          v117 += 3;
        }
        while (v117 != v118);
        std::string::size_type v127 = v202.__r_.__value_.__l.__size_;
        if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v127 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
        }
        uint64_t v128 = &v202;
        if ((v202.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v128 = (std::string *)v202.__r_.__value_.__r.__words[0];
        }
        std::string::size_type v129 = v127 - 1;
        if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
          v202.__r_.__value_.__l.__size_ = v129;
        }
        else {
          *((unsigned char *)&v202.__r_.__value_.__s + 23) = v129 & 0x7F;
        }
        uint64_t v42 = v5 + 7;
        v128->__r_.__value_.__s.__data_[v129] = 0;
        std::string::append(&v202, "];");
        if (v226 >= 0) {
          size_t v131 = &v225[24];
        }
        else {
          size_t v131 = *(const std::string::value_type **)&v225[24];
        }
        if (v226 >= 0) {
          std::string::size_type v132 = HIBYTE(v226) & 0x7F;
        }
        else {
          std::string::size_type v132 = v226;
        }
        std::string::append(&v202, v131, v132);
        char v130 = HIBYTE(v202.__r_.__value_.__r.__words[2]);
      }
      BOOL v133 = v130 < 0;
      if (v130 >= 0) {
        long long v134 = &v202;
      }
      else {
        long long v134 = (std::string *)v202.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v135 = v130 & 0x7F;
      if (v133) {
        std::string::size_type v136 = v202.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type v136 = v135;
      }
      llvm::raw_ostream::write(a2, (const char *)v134, v136);
      unint64_t v137 = (unsigned char *)*((void *)a2 + 4);
      if (*((unsigned char **)a2 + 3) == v137)
      {
        llvm::raw_ostream::write(a2, "\n", 1uLL);
      }
      else
      {
        unsigned char *v137 = 10;
        ++*((void *)a2 + 4);
      }
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v202.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v204.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v226) < 0) {
        operator delete(*(void **)&v225[24]);
      }
      v206.__r_.__value_.__r.__words[0] = (std::string::size_type)v225;
      sub_1CB8338B8((void ***)&v206);
      uint64_t v138 = (void *)v41[1];
      if (v138)
      {
        do
        {
          uint64_t v139 = v138;
          uint64_t v138 = (void *)*v138;
        }
        while (v138);
      }
      else
      {
        do
        {
          uint64_t v139 = (void *)v41[2];
          BOOL v140 = *v139 == (void)v41;
          uint64_t v41 = v139;
        }
        while (!v140);
      }
      uint64_t v41 = v139;
      if (v139 == v42) {
        goto LABEL_285;
      }
    }
    v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"immutable";
    __int16 v207 = 259;
    sub_1CC610560((uint64_t)v225, (unsigned __int8 *)&v206);
    uint64_t v59 = v41[5];
    int v60 = *(_DWORD *)(v59 + 8);
LABEL_89:
    if (v60 != 2) {
      goto LABEL_96;
    }
    char v61 = *(unsigned char *)(v59 + 72);
    goto LABEL_91;
  }
LABEL_4:
  BOOL v6 = (void *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v6 > 0x18uLL)
  {
    qmemcpy(v6, "  // Cross-module edges:\n", 25);
    *((void *)a2 + 4) += 25;
  }
  else
  {
    llvm::raw_ostream::write(a2, "  // Cross-module edges:\n", 0x19uLL);
  }
  int v7 = (char *)__p;
  uint64_t v8 = v218;
  if (__p != v218)
  {
    char v162 = v201 + 1;
    do
    {
      BOOL v163 = sub_1CD5D4D7C((uint64_t)v215, (uint64_t *)v7 + 3);
      uint64_t v164 = (unint64_t *)v163[1];
      uint64_t v165 = (unint64_t *)v163[2];
      if (v164 == v165)
      {
        std::string v166 = v163;
        unint64_t v167 = *((void *)v7 + 3);
        int v168 = (void *)*v162;
        if (!*v162) {
          goto LABEL_347;
        }
        uint64_t v169 = v162;
        do
        {
          unint64_t v170 = v168[4];
          BOOL v171 = v170 >= v167;
          if (v170 >= v167) {
            BOOL v172 = v168;
          }
          else {
            BOOL v172 = v168 + 1;
          }
          if (v171) {
            uint64_t v169 = v168;
          }
          int v168 = (void *)*v172;
        }
        while (*v172);
        if (v169 == v162 || v169[4] > v167) {
LABEL_347:
        }
          uint64_t v169 = v162;
        uint64_t v173 = *((unsigned __int8 *)v201 + 133);
        if (v169 == v162) {
          unint64_t v174 = 0;
        }
        else {
          unint64_t v174 = (unint64_t)(v169 + 4);
        }
        std::to_string((std::string *)v225, *((void *)v7 + 3));
        int v175 = v199;
        int v176 = (_WORD *)*((void *)v199 + 4);
        if (*((void *)v199 + 3) - (void)v176 > 1uLL)
        {
          *int v176 = 8224;
          *((void *)v199 + 4) += 2;
        }
        else
        {
          int v175 = llvm::raw_ostream::write(v199, "  ", 2uLL);
        }
        if (v225[23] >= 0) {
          uint64_t v177 = v225;
        }
        else {
          uint64_t v177 = *(const char **)v225;
        }
        if (v225[23] >= 0) {
          size_t v178 = v225[23] & 0x7F;
        }
        else {
          size_t v178 = *(void *)&v225[8];
        }
        uint64_t v179 = llvm::raw_ostream::write(v175, v177, v178);
        uint64_t v180 = *((void *)v179 + 4);
        if ((unint64_t)(*((void *)v179 + 3) - v180) > 8)
        {
          *(unsigned char *)(v180 + 8) = 34;
          *(void *)uint64_t v180 = *(void *)" [label=\"";
          *((void *)v179 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v179, " [label=\"", 9uLL);
        }
        unint64_t v181 = v174 & 0xFFFFFFFFFFFFFFF8 | v173;
        if (v181 < 8) {
          sub_1CC610D1C(&v206, v167);
        }
        else {
          sub_1CC610B50((uint64_t)&v206, v181);
        }
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v182 = &v206;
        }
        else {
          uint64_t v182 = (std::string *)v206.__r_.__value_.__r.__words[0];
        }
        if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v183 = *((unsigned char *)&v206.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t v183 = v206.__r_.__value_.__l.__size_;
        }
        llvm::raw_ostream::write(v199, (const char *)v182, v183);
        if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v206.__r_.__value_.__l.__data_);
        }
        int v184 = (void *)*((void *)v199 + 4);
        if (*((void *)v199 + 3) - (void)v184 > 0x19uLL)
        {
          qmemcpy(v184, "\""];
          *((void *)v199 + 4) += 26;
        }
        else
        {
          llvm::raw_ostream::write(v199, "\""];
        }
        if ((v225[23] & 0x80000000) != 0) {
          operator delete(*(void **)v225);
        }
        unint64_t v186 = (char *)v166[2];
        unint64_t v185 = v166[3];
        if ((unint64_t)v186 >= v185)
        {
          v187 = (char *)v166[1];
          uint64_t v188 = (v186 - v187) >> 3;
          unint64_t v189 = v188 + 1;
          if ((unint64_t)(v188 + 1) >> 61) {
            goto LABEL_406;
          }
          uint64_t v190 = v185 - (void)v187;
          if (v190 >> 2 > v189) {
            unint64_t v189 = v190 >> 2;
          }
          if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v191 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v191 = v189;
          }
          if (v191)
          {
            if (v191 >> 61) {
              goto LABEL_407;
            }
            int v192 = (char *)operator new(8 * v191);
          }
          else
          {
            int v192 = 0;
          }
          uint64_t v193 = &v192[8 * v188];
          *(void *)uint64_t v193 = -1;
          uint64_t v165 = (unint64_t *)(v193 + 8);
          while (v186 != v187)
          {
            uint64_t v194 = *((void *)v186 - 1);
            v186 -= 8;
            *((void *)v193 - 1) = v194;
            v193 -= 8;
          }
          v166[1] = v193;
          v166[2] = v165;
          v166[3] = &v192[8 * v191];
          if (v187) {
            operator delete(v187);
          }
        }
        else
        {
          *(void *)unint64_t v186 = -1;
          uint64_t v165 = (unint64_t *)(v186 + 8);
        }
        v166[2] = v165;
        uint64_t v164 = (unint64_t *)v166[1];
      }
      while (v164 != v165)
      {
        if (*v164 != *(void *)v7) {
          sub_1CC610940(*(llvm::raw_ostream **)v210, "  ", *(void *)v7, *((void *)v7 + 2), *v164, *((void *)v7 + 3), *((_DWORD *)v7 + 2));
        }
        ++v164;
      }
      v7 += 32;
    }
    while (v7 != v8);
  }
  int v9 = (unsigned char *)*((void *)v199 + 4);
  if (*((unsigned char **)v199 + 3) == v9)
  {
    llvm::raw_ostream::write(v199, "}", 1uLL);
  }
  else
  {
    *int v9 = 125;
    ++*((void *)v199 + 4);
  }
  sub_1CD5D4BD0(v214[0]);
  uint64_t v10 = v215[0];
  sub_1CD5D4B7C(v215[0], v216);
  MEMORY[0x1D25D9CD0](v10, 8);
  if (__p)
  {
    unint64_t v218 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1CC610450(unint64_t *a1, llvm::Twine *this, llvm::Twine *a3, unsigned __int8 *a4)
{
  llvm::Twine::str(this, &v14);
  std::string::append(&v14, "=\"");
  llvm::Twine::str(a3, __p);
  if (v13 >= 0) {
    int v7 = __p;
  }
  else {
    int v7 = (void **)__p[0];
  }
  if (v13 >= 0) {
    std::string::size_type v8 = v13 & 0x7F;
  }
  else {
    std::string::size_type v8 = (std::string::size_type)__p[1];
  }
  std::string::append(&v14, (const std::string::value_type *)v7, v8);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  std::string::append(&v14, "\"");
  unint64_t v9 = a1[1];
  if (v9 >= a1[2])
  {
    uint64_t v11 = sub_1CBF64E70(a1, (uint64_t)&v14);
  }
  else
  {
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1CB8BDF7C(a1[1], v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v10 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
      *(void *)(v9 + 16) = *((void *)&v14.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v9 = v10;
    }
    uint64_t v11 = v9 + 24;
  }
  a1[1] = v11;
  sub_1CC610560((uint64_t)a1, a4);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_1CC610560(uint64_t a1, unsigned __int8 *a2)
{
  if (a2[32] < 2u) {
    return;
  }
  uint64_t v3 = (std::string *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(void *)(a1 + 32)) {
      goto LABEL_4;
    }
LABEL_6:
    MEMORY[0x1D25D9630](a1 + 24, " // ");
    goto LABEL_7;
  }
  if (!*(unsigned char *)(a1 + 47)) {
    goto LABEL_6;
  }
LABEL_4:
  std::string::append((std::string *)(a1 + 24), ", ");
LABEL_7:
  llvm::Twine::str((llvm::Twine *)a2, __p);
  if (v7 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if (v7 >= 0) {
    std::string::size_type v5 = v7 & 0x7F;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  std::string::append(v3, (const std::string::value_type *)v4, v5);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CC610620(std::string *retstr, unint64_t __val, unint64_t a3)
{
  if (__val == -1)
  {
    std::to_string(retstr, a3);
  }
  else
  {
    *((unsigned char *)&v17.__r_.__value_.__s + 23) = 1;
    LOWORD(v17.__r_.__value_.__l.__data_) = 77;
    std::to_string(&v16, __val);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v5 = &v16;
    }
    else {
      std::string::size_type v5 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = *((unsigned char *)&v16.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type size = v16.__r_.__value_.__l.__size_;
    }
    char v7 = std::string::append(&v17, (const std::string::value_type *)v5, size);
    std::string::size_type v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    unint64_t v9 = std::string::append(&v18, "_");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v15, a3);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v15;
    }
    else {
      uint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v12 = *((unsigned char *)&v15.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      std::string::size_type v12 = v15.__r_.__value_.__l.__size_;
    }
    char v13 = std::string::append(&v19, (const std::string::value_type *)v11, v12);
    std::string::size_type v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    retstr->__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1CC6107A8(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  char v7 = *(void **)(*(void *)a1 + 8);
  if (!v7)
  {
LABEL_6:
    unint64_t v9 = *(char ***)(a1 + 8);
    uint64_t v10 = **(void **)(a1 + 16);
    std::string::size_type v12 = v9[1];
    unint64_t v11 = (unint64_t)v9[2];
    if ((unint64_t)v12 >= v11)
    {
      std::string::size_type v14 = *v9;
      uint64_t v15 = (v12 - *v9) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        abort();
      }
      uint64_t v17 = v11 - (void)v14;
      if (v17 >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          sub_1CB833614();
        }
        std::string v19 = (char *)operator new(32 * v18);
      }
      else
      {
        std::string v19 = 0;
      }
      int v22 = &v19[32 * v15];
      *(void *)int v22 = v10;
      *((_DWORD *)v22 + 2) = a4;
      *((void *)v22 + 2) = a2;
      *((void *)v22 + 3) = a3;
      char v13 = v22 + 32;
      if (v12 != v14)
      {
        do
        {
          long long v23 = *((_OWORD *)v12 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v12 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v12 -= 32;
        }
        while (v12 != v14);
        std::string::size_type v12 = *v9;
      }
      *unint64_t v9 = v22;
      v9[1] = v13;
      void v9[2] = &v19[32 * v18];
      if (v12) {
        operator delete(v12);
      }
    }
    else
    {
      *(void *)std::string::size_type v12 = v10;
      *((_DWORD *)v12 + 2) = a4;
      char v13 = v12 + 32;
      *((void *)v12 + 2) = a2;
      *((void *)v12 + 3) = a3;
    }
    v9[1] = v13;
    return;
  }
  while (1)
  {
    unint64_t v8 = v7[4];
    if (v8 <= a3) {
      break;
    }
LABEL_5:
    char v7 = (void *)*v7;
    if (!v7) {
      goto LABEL_6;
    }
  }
  if (v8 < a3)
  {
    ++v7;
    goto LABEL_5;
  }
  unint64_t v20 = **(void **)(a1 + 16);
  int v21 = **(llvm::raw_ostream ***)(a1 + 24);

  sub_1CC610940(v21, "    ", v20, a2, v20, a3, a4);
}

void sub_1CC610940(llvm::raw_ostream *a1, char *__s, unint64_t __val, unint64_t a4, unint64_t a5, unint64_t a6, int a7)
{
  uint64_t v12 = a7 + 4;
  if (__s)
  {
    size_t v14 = strlen(__s);
    uint64_t v15 = (void *)*((void *)a1 + 4);
    if (v14 <= *((void *)a1 + 3) - (void)v15)
    {
      if (v14)
      {
        memcpy(v15, __s, v14);
        *((void *)a1 + 4) += v14;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, __s, v14);
    }
  }
  sub_1CC610620(&v25, __val, a4);
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v16 = &v25;
  }
  else {
    unint64_t v16 = (std::string *)v25.__r_.__value_.__r.__words[0];
  }
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v25.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v25.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(a1, (const char *)v16, size);
  unint64_t v18 = (_DWORD *)*((void *)a1 + 4);
  if (*((void *)a1 + 3) - (void)v18 > 3uLL)
  {
    *unint64_t v18 = 540945696;
    *((void *)a1 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(a1, " -> ", 4uLL);
  }
  sub_1CC610620(&__p, a5, a6);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v20 = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t v20 = __p.__r_.__value_.__l.__size_;
  }
  llvm::raw_ostream::write(a1, (const char *)p_p, v20);
  int v21 = (&off_1E6849938)[v12];
  size_t v22 = strlen(v21);
  long long v23 = (unsigned char *)*((void *)a1 + 4);
  if (v22 <= *((void *)a1 + 3) - (void)v23)
  {
    if (v22)
    {
      memcpy(v23, v21, v22);
      long long v23 = (unsigned char *)(*((void *)a1 + 4) + v22);
      *((void *)a1 + 4) = v23;
    }
  }
  else
  {
    llvm::raw_ostream::write(a1, v21, v22);
    long long v23 = (unsigned char *)*((void *)a1 + 4);
  }
  if (*((unsigned char **)a1 + 3) == v23)
  {
    llvm::raw_ostream::write(a1, "\n", 1uLL);
  }
  else
  {
    *long long v23 = 10;
    ++*((void *)a1 + 4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1CC610B50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  uint64_t v3 = (unint64_t *)(a2 & 0xFFFFFFFFFFFFFFF8);
  if (a2)
  {
    unint64_t v6 = v3[1];
    if ((*(unsigned char *)(v6 + 23) & 0x10) == 0) {
      goto LABEL_22;
    }
    uint64_t v7 = ***(void ***)v6;
    uint64_t v8 = *(void *)(v7 + 152);
    uint64_t v9 = *(unsigned int *)(v7 + 168);
    unsigned int v10 = v6 >> 4;
    if (v9)
    {
      LODWORD(v11) = (v9 - 1) & (v10 ^ (v6 >> 9));
      uint64_t v12 = (uint64_t *)(v8 + 16 * v11);
      uint64_t v13 = *v12;
      if (*v12 == v6)
      {
        if (!*(void *)v12[1]) {
          goto LABEL_22;
        }
LABEL_17:
        LODWORD(v16) = (v9 - 1) & (v10 ^ (v6 >> 9));
        uint64_t v17 = (uint64_t *)(v8 + 16 * v16);
        uint64_t v18 = *v17;
        if (*v17 == v6)
        {
LABEL_26:
          size_t v22 = (size_t *)v17[1];
          size_t v23 = *v22;
          std::string::size_type v5 = v22 + 2;
          size_t v4 = v23;
          goto LABEL_27;
        }
        int v19 = 1;
        while (v18 != -4096)
        {
          int v20 = v16 + v19++;
          uint64_t v16 = v20 & (v9 - 1);
          uint64_t v18 = *(void *)(v8 + 16 * v16);
          if (v18 == v6)
          {
            uint64_t v17 = (uint64_t *)(v8 + 16 * v16);
            goto LABEL_26;
          }
        }
LABEL_25:
        uint64_t v17 = (uint64_t *)(v8 + 16 * v9);
        goto LABEL_26;
      }
      int v14 = 1;
      while (v13 != -4096)
      {
        int v15 = v11 + v14++;
        uint64_t v11 = v15 & (v9 - 1);
        uint64_t v13 = *(void *)(v8 + 16 * v11);
        if (v13 == v6) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v11 = v9;
LABEL_15:
    if (!**(void **)(v8 + 16 * v11 + 8)) {
      goto LABEL_22;
    }
    if (!v9) {
      goto LABEL_25;
    }
    goto LABEL_17;
  }
  size_t v4 = v3[2];
  if (v4)
  {
    std::string::size_type v5 = (const void *)v3[1];
    if (!v5)
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      return;
    }
LABEL_27:
    if (v4 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    if (v4 >= 0x17)
    {
      uint64_t v24 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17) {
        uint64_t v24 = v4 | 7;
      }
      uint64_t v25 = v24 + 1;
      unint64_t v26 = operator new(v24 + 1);
      v2[1] = v4;
      v2[2] = v25 | 0x8000000000000000;
      void *v2 = v26;
      uint64_t v2 = v26;
    }
    else
    {
      *(unsigned char *)(a1 + 23) = v4;
      if (!v4) {
        goto LABEL_35;
      }
    }
    memmove(v2, v5, v4);
LABEL_35:
    *((unsigned char *)v2 + v4) = 0;
    return;
  }
LABEL_22:
  unint64_t v21 = *v3;

  sub_1CC610D1C((std::string *)a1, v21);
}

void sub_1CC610D1C(std::string *a1, unint64_t __val)
{
  *((unsigned char *)&v7.__r_.__value_.__s + 23) = 1;
  LOWORD(v7.__r_.__value_.__l.__data_) = 64;
  std::to_string(&__p, __val);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = *((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v5 = std::string::append(&v7, (const std::string::value_type *)p_p, size);
  *a1 = *v5;
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_1CC610DC0()
{
  char v2 = 1;
  int v1 = 1;
  uint64_t v3 = &v2;
  __p.n128_u64[0] = (unint64_t)"Propagate attributes in index";
  __p.n128_u64[1] = 29;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCD88D8, "propagate-attrs", &v3, &v1, &__p);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD88D8, &dword_1CB82C000);
  char v2 = 1;
  int v1 = 1;
  uint64_t v3 = &v2;
  __p.n128_u64[0] = (unint64_t)"Import constant global variables with references";
  __p.n128_u64[1] = 48;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBD068D0, "import-constants-with-refs", &v3, &v1, &__p);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD068D0, &dword_1CB82C000);
  __n128 __p = 0uLL;
  uint64_t v5 = 0;
  sub_1CD4CBAB0(&__p, (uint64_t)&llvm::FunctionSummary::ExternalNode);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1CD4AEEB4, &llvm::FunctionSummary::ExternalNode, &dword_1CB82C000);
}

BOOL llvm::Operator::hasPoisonGeneratingFlags(llvm::Operator *this)
{
  if (this && (unsigned int v2 = *((unsigned __int8 *)this + 16), v2 > 0x1B)) {
    unsigned int v3 = v2 - 28;
  }
  else {
    unsigned int v3 = *((unsigned __int16 *)this + 9);
  }
  if (v3 <= 0x22)
  {
    if (((1 << v3) & 0x202A000) != 0)
    {
      unsigned int v8 = *((unsigned __int8 *)this + 17);
      if ((v8 & 2) != 0) {
        return 1;
      }
      else {
        return (v8 >> 2) & 1;
      }
    }
    if (((1 << v3) & 0xC180000) != 0) {
      return (*((unsigned __int8 *)this + 17) >> 1) & 1;
    }
    if (v3 == 34) {
      return *((unsigned __int8 *)this + 17) > 1u;
    }
  }
  BOOL v4 = sub_1CB845E74((uint64_t)this);
  if (v4)
  {
    unsigned int v7 = *((unsigned __int8 *)this + 17);
    if ((v7 & 4) != 0) {
      int v5 = 1;
    }
    else {
      int v5 = (v7 >> 3) & 1;
    }
  }
  return v4 & v5;
}

uint64_t llvm::GEPOperator::getSourceElementType(llvm::GEPOperator *this)
{
  BOOL v1 = *((unsigned char *)this + 16) != 62 || this == 0;
  uint64_t v2 = 64;
  if (v1) {
    uint64_t v2 = 24;
  }
  return *(void *)((char *)this + v2);
}

uint64_t llvm::GEPOperator::getResultElementType(llvm::GEPOperator *this)
{
  BOOL v1 = *((unsigned char *)this + 16) != 62 || this == 0;
  uint64_t v2 = 72;
  if (v1) {
    uint64_t v2 = 32;
  }
  return *(void *)((char *)this + v2);
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::DataLayout *a2, llvm::APInt *a3, unsigned int (*a4)(uint64_t, llvm::Constant *, void **), uint64_t a5)
{
  v16[6] = *(llvm::Constant **)MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v7 = *(void *)(a1 - 8);
    uint64_t v6 = v5 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v6 = v5 & 0x7FFFFFF;
    uint64_t v7 = a1 - 32 * v6;
  }
  unint64_t v8 = 32 * v6 - 32;
  if (v8 >= 0xC1) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v6 != 1)
  {
    uint64_t v9 = (llvm::Constant **)(v7 + 32);
    unsigned int v10 = v16;
    uint64_t v11 = 32 * v6 - 32;
    do
    {
      uint64_t v12 = *v9;
      v9 += 4;
      *v10++ = v12;
      v11 -= 32;
    }
    while (v11);
  }
  BOOL v13 = *(unsigned char *)(a1 + 16) != 62 || a1 == 0;
  uint64_t v14 = 64;
  if (v13) {
    uint64_t v14 = 24;
  }
  return llvm::GEPOperator::accumulateConstantOffset(*(void *)(a1 + v14), v16, (v8 >> 5), a2, a3, a4, a5);
}

uint64_t llvm::GEPOperator::accumulateConstantOffset(uint64_t a1, llvm::Constant **a2, uint64_t a3, llvm::DataLayout *this, llvm::APInt *a5, unsigned int (*a6)(uint64_t, llvm::Constant *, void **), uint64_t a7)
{
  char v75 = 0;
  v74[0] = a5;
  v74[1] = (llvm::APInt *)&v75;
  uint64_t v72 = a2;
  uint64_t v73 = a1 | 4;
  if (!a3) {
    return 1;
  }
  uint64_t v11 = &a2[a3];
  while (1)
  {
    uint64_t v12 = v73 & 4;
    BOOL v13 = (llvm::Type *)(v73 & 0xFFFFFFFFFFFFFFF8);
    if ((v73 & 4) != 0 && v13)
    {
      unint64_t v14 = v73 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v15 = v73 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      AggregateElement = *a2;
      if (*a2) {
        BOOL v17 = *((unsigned char *)*a2 + 16) == 16;
      }
      else {
        BOOL v17 = 0;
      }
      if (!v17)
      {
        AggregateElement = (llvm::Constant *)llvm::Constant::getAggregateElement(AggregateElement, 0);
        a2 = v72;
        uint64_t v12 = v73 & 4;
      }
      unint64_t v14 = v73 & 0xFFFFFFFFFFFFFFF8;
      int v20 = (unsigned int *)*((void *)AggregateElement + 3);
      uint64_t v18 = (unsigned int *)((char *)AggregateElement + 24);
      int v19 = v20;
      if (v18[2] < 0x41) {
        int v19 = v18;
      }
      unint64_t v15 = *(void *)(*((void *)v13 + 2) + 8 * *v19);
      BOOL v13 = (llvm::Type *)(v73 & 0xFFFFFFFFFFFFFFF8);
    }
    int v21 = *(unsigned __int8 *)(v15 + 8);
    size_t v22 = *a2;
    size_t v23 = v12 ? 0 : v13;
    if (!v22 || *((unsigned char *)v22 + 16) != 16) {
      break;
    }
    unsigned int v27 = (void *)((char *)v22 + 24);
    uint64_t v28 = *((unsigned int *)v22 + 8);
    if (v28 > 0x40)
    {
      int v30 = 0;
      int64_t v31 = (unint64_t)(v28 + 63) >> 6;
      do
      {
        if (v31-- < 1) {
          break;
        }
        unint64_t v33 = *(void *)(*v27 + 8 * v31);
        v30 += __clz(v33);
      }
      while (!v33);
      int v34 = v28 | 0xFFFFFFC0;
      if ((v28 & 0x3F) == 0) {
        int v34 = 0;
      }
      BOOL v29 = v30 + v34 == v28;
    }
    else
    {
      BOOL v29 = *v27 == 0;
    }
    int v35 = v29;
    if (v35) {
      int v26 = 4;
    }
    else {
      int v26 = 1;
    }
    if ((v35 & 1) != 0 || v21 == 19) {
      goto LABEL_72;
    }
    if (v23)
    {
      if (v28 >= 0x41) {
        unsigned int v27 = (void *)*v27;
      }
      uint64_t v36 = *(unsigned int *)v27;
      StructLayout = llvm::DataLayout::getStructLayout(this, v23);
      unsigned int v38 = *((_DWORD *)a5 + 2);
      uint64_t v39 = *((void *)StructLayout + v36 + 2);
      unsigned int v71 = v38;
      if (v38 > 0x40) {
        operator new[]();
      }
      if (v38) {
        unint64_t v40 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v38;
      }
      else {
        unint64_t v40 = 0;
      }
      unint64_t v70 = v40 & v39;
      char v41 = sub_1CC61171C(v74, (llvm::APInt *)&v70, 1);
      if (v71 >= 0x41)
      {
        uint64_t v42 = (void *)v70;
        if (v70) {
          goto LABEL_88;
        }
      }
    }
    else
    {
      unsigned int v69 = v28;
      if (v28 > 0x40) {
        operator new[]();
      }
      uint64_t v68 = (void *)*v27;
      if (!v14 || !v12)
      {
        uint64_t v54 = *v72;
        if (!*v72 || *((unsigned char *)v54 + 16) != 16) {
          uint64_t v54 = (llvm::Constant *)llvm::Constant::getAggregateElement(v54, 0);
        }
        int v57 = (unsigned int *)*((void *)v54 + 3);
        uint64_t v55 = (unsigned int *)((char *)v54 + 24);
        unint64_t v56 = v57;
        if (v55[2] < 0x41) {
          unint64_t v56 = v55;
        }
        BOOL v13 = *(llvm::Type **)(*((void *)v13 + 2) + 8 * *v56);
      }
      uint64_t v58 = sub_1CB83544C((uint64_t)this, (uint64_t)v13);
      BOOL v60 = v59 == 1;
      char Alignment = llvm::DataLayout::getAlignment(this, v13, 1);
      if (v60) {
      char v41 = sub_1CC61171C(v74, (llvm::APInt *)&v68, ((1 << Alignment) + ((unint64_t)(v58 + 7) >> 3) - 1) & -(1 << Alignment));
      }
      if (v69 >= 0x41)
      {
        uint64_t v42 = v68;
        if (v68) {
LABEL_88:
        }
          MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
      }
    }
    if ((v41 & 1) == 0) {
      return 0;
    }
LABEL_90:
    sub_1CB90797C((uint64_t)&v72);
    a2 = v72;
    if (v72 == v11) {
      return 1;
    }
  }
  if (a6)
  {
    if (!v23 && v21 != 19)
    {
      int v26 = 1;
      unsigned int v67 = 1;
      __src = 0;
      if (a6(a7, v22, &__src))
      {
        char v75 = 1;
        unsigned int v65 = v67;
        if (v67 > 0x40) {
          operator new[]();
        }
        unint64_t v64 = __src;
        uint64_t v43 = (llvm::Type *)(v73 & 0xFFFFFFFFFFFFFFF8);
        if ((v73 & 4) == 0 || !v43)
        {
          uint64_t v44 = *v72;
          if (!*v72 || *((unsigned char *)v44 + 16) != 16) {
            uint64_t v44 = (llvm::Constant *)llvm::Constant::getAggregateElement(v44, 0);
          }
          uint64_t v47 = (unsigned int *)*((void *)v44 + 3);
          uint64_t v45 = (unsigned int *)((char *)v44 + 24);
          unint64_t v46 = v47;
          if (v45[2] < 0x41) {
            unint64_t v46 = v45;
          }
          uint64_t v43 = *(llvm::Type **)(*((void *)v43 + 2) + 8 * *v46);
        }
        uint64_t v48 = sub_1CB83544C((uint64_t)this, (uint64_t)v43);
        BOOL v50 = v49 == 1;
        char v52 = llvm::DataLayout::getAlignment(this, v43, 1);
        if (v50) {
        int v53 = sub_1CC61171C(v74, (llvm::APInt *)&v64, ((1 << v52) + ((unint64_t)(v48 + 7) >> 3) - 1) & -(1 << v52));
        }
        if (v65 >= 0x41 && v64) {
          MEMORY[0x1D25D9CB0](v64, 0x1000C8000313F17);
        }
        int v26 = v53 ^ 1;
      }
      if (v67 >= 0x41)
      {
        if (__src) {
          MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
        }
      }
LABEL_72:
      if ((v26 | 4) != 4) {
        return 0;
      }
      goto LABEL_90;
    }
  }
  return 0;
}

uint64_t sub_1CC61171C(llvm::APInt **a1, llvm::APInt *this, uint64_t a3)
{
  llvm::APInt::sextOrTrunc((uint64_t)this, *((_DWORD *)*a1 + 2), (uint64_t)&v29);
  if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
    MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
  }
  *(void *)this = v29;
  *((_DWORD *)this + 2) = v30;
  unsigned int v6 = *((_DWORD *)*a1 + 2);
  unsigned int v30 = v6;
  if (v6 > 0x40) {
    operator new[]();
  }
  unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  if (!v6) {
    unint64_t v7 = 0;
  }
  unint64_t v29 = v7 & a3;
  if (!*(unsigned char *)a1[1])
  {
    llvm::APInt::operator*((uint64_t)this, &v29, (uint64_t)&v27);
    unint64_t v8 = (uint64_t *)*a1;
    uint64_t v9 = *((unsigned int *)*a1 + 2);
    if (v9 >= 0x41)
    {
      uint64_t v16 = 0;
      BOOL v17 = 0;
      uint64_t v18 = *v8;
      uint64_t v10 = v27;
      unint64_t v19 = (unint64_t)(v9 + 63) >> 6;
      do
      {
        unint64_t v20 = *(void *)(v18 + v16);
        unint64_t v21 = *(void *)(v10 + v16) + v20;
        BOOL v22 = v21 < v20;
        BOOL v23 = v21 + 1 <= v20;
        if (v17)
        {
          ++v21;
          BOOL v17 = v23;
        }
        else
        {
          BOOL v17 = v22;
        }
        *(void *)(v18 + v16) = v21;
        v16 += 8;
      }
      while (8 * v19 != v16);
      *(void *)(*v8 + 8 * (v19 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    }
    else
    {
      uint64_t v10 = v27;
      if (v9) {
        unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
      }
      else {
        unint64_t v11 = 0;
      }
      uint64_t *v8 = v11 & (*v8 + v27);
    }
    if (v28 >= 0x41 && v10) {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
    }
    goto LABEL_28;
  }
  BOOL v26 = 0;
  llvm::APInt::smul_ov((const void **)this, (const llvm::APInt *)&v29, &v26, (llvm::APInt *)&v27);
  if (!v26)
  {
    llvm::APInt::sadd_ov(*a1, (const llvm::APInt *)&v27, &v26, (uint64_t)&v24);
    uint64_t v12 = *a1;
    if (*((_DWORD *)v12 + 2) >= 0x41u && *(void *)v12) {
      MEMORY[0x1D25D9CB0](*(void *)v12, 0x1000C8000313F17);
    }
    *(void *)uint64_t v12 = v24;
    *((_DWORD *)v12 + 2) = v25;
    BOOL v13 = v26;
    if (v28 >= 0x41 && v27) {
      MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
    }
    if (v13) {
      goto LABEL_27;
    }
LABEL_28:
    uint64_t v14 = 1;
    goto LABEL_29;
  }
  if (v28 >= 0x41 && v27) {
    MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
  }
LABEL_27:
  uint64_t v14 = 0;
LABEL_29:
  if (v30 >= 0x41 && v29) {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
  }
  return v14;
}

uint64_t llvm::GEPOperator::collectOffset(uint64_t a1, llvm::DataLayout *a2, unsigned int a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v86 = a3;
  v85[0] = &v86;
  v85[1] = a5;
  unint64_t v8 = (llvm::Constant **)sub_1CD5D5300(a1);
  unsigned int v83 = v8;
  uint64_t v84 = v9;
  int v10 = *(_DWORD *)(a1 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    uint64_t v12 = *(void *)(a1 - 8);
    uint64_t v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    uint64_t v11 = v10 & 0x7FFFFFF;
    uint64_t v12 = a1 - 32 * v11;
  }
  BOOL v13 = (llvm::Constant **)(v12 + 32 * v11);
  if (v13 == v8) {
    return 1;
  }
  while (1)
  {
    uint64_t v14 = v84 & 4;
    unint64_t v15 = (llvm::Type *)(v84 & 0xFFFFFFFFFFFFFFF8);
    if ((v84 & 4) != 0 && v15)
    {
      unint64_t v16 = v84 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v17 = v84 & 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      AggregateElement = *v8;
      if (*v8) {
        BOOL v19 = *((unsigned char *)*v8 + 16) == 16;
      }
      else {
        BOOL v19 = 0;
      }
      if (!v19)
      {
        AggregateElement = llvm::Constant::getAggregateElement(*v8, 0);
        unint64_t v8 = v83;
        uint64_t v14 = v84 & 4;
      }
      unint64_t v16 = v84 & 0xFFFFFFFFFFFFFFF8;
      BOOL v22 = (unsigned int *)AggregateElement[3];
      unint64_t v20 = (unsigned int *)(AggregateElement + 3);
      unint64_t v21 = v22;
      if (v20[2] >= 0x41) {
        unint64_t v20 = v21;
      }
      unint64_t v17 = *(void *)(*((void *)v15 + 2) + 8 * *v20);
      unint64_t v15 = (llvm::Type *)(v84 & 0xFFFFFFFFFFFFFFF8);
    }
    int v23 = *(unsigned __int8 *)(v17 + 8);
    std::string::size_type v82 = 0;
    uint64_t v24 = *v8;
    std::string::size_type v82 = *v8;
    int v25 = v14 ? 0 : v15;
    if (!v24 || *((unsigned char *)v24 + 16) != 16) {
      break;
    }
    uint64_t v44 = (void *)((char *)v24 + 24);
    uint64_t v45 = *((unsigned int *)v24 + 8);
    if (v45 > 0x40)
    {
      int v47 = 0;
      int64_t v48 = (unint64_t)(v45 + 63) >> 6;
      do
      {
        if (v48-- < 1) {
          break;
        }
        unint64_t v50 = *(void *)(*v44 + 8 * v48);
        v47 += __clz(v50);
      }
      while (!v50);
      int v51 = v45 | 0xFFFFFFC0;
      if ((v45 & 0x3F) == 0) {
        int v51 = 0;
      }
      BOOL v46 = v47 + v51 == v45;
    }
    else
    {
      BOOL v46 = *v44 == 0;
    }
    int v52 = v46;
    if ((v52 & 1) != 0 || v23 == 19)
    {
      if (!v52) {
        return 0;
      }
    }
    else
    {
      if (v25)
      {
        if (v45 >= 0x41) {
          uint64_t v44 = (void *)*v44;
        }
        uint64_t v53 = *(unsigned int *)v44;
        uint64_t v54 = *((void *)llvm::DataLayout::getStructLayout(a2, v25) + v53 + 2);
        unsigned int v81 = v86;
        if (v86 > 0x40) {
          operator new[]();
        }
        if (v86) {
          unint64_t v55 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v86;
        }
        else {
          unint64_t v55 = 0;
        }
        unint64_t v80 = v55 & v54;
        sub_1CC6120FC(v85, (llvm::APInt *)&v80, 1);
        if (v81 < 0x41) {
          goto LABEL_89;
        }
        unint64_t v56 = (void *)v80;
        if (!v80) {
          goto LABEL_89;
        }
      }
      else
      {
        unsigned int v79 = v45;
        if (v45 > 0x40) {
          operator new[]();
        }
        uint64_t v78 = (void *)*v44;
        if (!v16 || !v14)
        {
          int v57 = *v83;
          if (!*v83 || *((unsigned char *)v57 + 16) != 16) {
            int v57 = (llvm::Constant *)llvm::Constant::getAggregateElement(v57, 0);
          }
          BOOL v60 = (unsigned int *)*((void *)v57 + 3);
          uint64_t v58 = (unsigned int *)((char *)v57 + 24);
          int v59 = v60;
          if (v58[2] < 0x41) {
            int v59 = v58;
          }
          unint64_t v15 = *(llvm::Type **)(*((void *)v15 + 2) + 8 * *v59);
        }
        uint64_t v61 = sub_1CB83544C((uint64_t)a2, (uint64_t)v15);
        BOOL v63 = v62 == 1;
        char Alignment = llvm::DataLayout::getAlignment(a2, v15, 1);
        if (v63) {
        sub_1CC6120FC(v85, (llvm::APInt *)&v78, ((1 << Alignment) + ((unint64_t)(v61 + 7) >> 3) - 1) & -(1 << Alignment));
        }
        if (v79 < 0x41) {
          goto LABEL_89;
        }
        unint64_t v56 = v78;
        if (!v78) {
          goto LABEL_89;
        }
      }
      MEMORY[0x1D25D9CB0](v56, 0x1000C8000313F17);
    }
LABEL_89:
    sub_1CB8460E4((uint64_t)&v83);
    unint64_t v8 = v83;
    if (v83 == v13) {
      return 1;
    }
  }
  if (v25) {
    BOOL v27 = 1;
  }
  else {
    BOOL v27 = v23 == 19;
  }
  if (!v27)
  {
    unsigned int v28 = v86;
    if (!v16 || !v14)
    {
      unint64_t v29 = *v8;
      if (!v29 || *((unsigned char *)v29 + 16) != 16) {
        unint64_t v29 = (llvm::Constant *)llvm::Constant::getAggregateElement(v29, 0);
      }
      uint64_t v32 = (unsigned int *)*((void *)v29 + 3);
      unsigned int v30 = (unsigned int *)((char *)v29 + 24);
      int64_t v31 = v32;
      if (v30[2] < 0x41) {
        int64_t v31 = v30;
      }
      unint64_t v15 = *(llvm::Type **)(*((void *)v15 + 2) + 8 * *v31);
    }
    uint64_t v33 = sub_1CB83544C((uint64_t)a2, (uint64_t)v15);
    BOOL v35 = v34 == 1;
    char v37 = llvm::DataLayout::getAlignment(a2, v15, 1);
    if (v35) {
    unint64_t v38 = ((1 << v37) + ((unint64_t)(v33 + 7) >> 3) - 1) & -(1 << v37);
    }
    if (v28 > 0x40) {
      operator new[]();
    }
    unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
    if (!v28) {
      unint64_t v39 = 0;
    }
    unint64_t v40 = (uint64_t *)(v39 & v38);
    if ((v39 & v38) != 0)
    {
      if (v86 >= 0x41) {
        operator new[]();
      }
      unsigned int v77 = v86;
      char v75 = v82;
      uint64_t v76 = 0;
      sub_1CD5D5450(a4, (uint64_t *)&v75, (uint64_t)&v76);
      if (v77 >= 0x41 && v76) {
        MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
      }
      uint64_t v41 = sub_1CD5D5344(a4, (uint64_t *)&v82);
      uint64_t v42 = *(unsigned int *)(v41 + 8);
      if (v42 >= 0x41)
      {
        uint64_t v66 = 0;
        unsigned int v67 = *(unint64_t **)v41;
        unint64_t v68 = (unint64_t)(v42 + 63) >> 6;
        unsigned int v69 = v40;
        unint64_t v70 = v68;
        do
        {
          uint64_t v71 = *v69++;
          unint64_t v72 = v71 + *v67;
          BOOL v73 = v72 + 1 <= *v67;
          if (v66)
          {
            ++v72;
            uint64_t v66 = v73;
          }
          else
          {
            uint64_t v66 = v72 < *v67;
          }
          *v67++ = v72;
          --v70;
        }
        while (v70);
        *(void *)(*(void *)v41 + 8 * (v68 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v42;
      }
      else
      {
        if (v42) {
          unint64_t v43 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v42;
        }
        else {
          unint64_t v43 = 0;
        }
        *(void *)uint64_t v41 = v43 & ((unint64_t)v40 + *(void *)v41);
      }
    }
    goto LABEL_89;
  }
  return 0;
}

uint64_t sub_1CC6120FC(unsigned int **a1, llvm::APInt *this, uint64_t a3)
{
  llvm::APInt::sextOrTrunc((uint64_t)this, **a1, (uint64_t)&v22);
  if (*((_DWORD *)this + 2) >= 0x41u && *(void *)this) {
    MEMORY[0x1D25D9CB0](*(void *)this, 0x1000C8000313F17);
  }
  *(void *)this = v22;
  *((_DWORD *)this + 2) = v23;
  unsigned int v6 = **a1;
  unsigned int v23 = v6;
  if (v6 > 0x40) {
    operator new[]();
  }
  unint64_t v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
  if (!v6) {
    unint64_t v7 = 0;
  }
  unint64_t v22 = v7 & a3;
  llvm::APInt::operator*((uint64_t)this, &v22, (uint64_t)&v20);
  unint64_t v8 = a1[1];
  uint64_t v9 = v8[2];
  if (v9 >= 0x41)
  {
    uint64_t v12 = 0;
    BOOL v13 = 0;
    uint64_t v14 = *(void *)v8;
    uint64_t result = v20;
    unint64_t v15 = (unint64_t)(v9 + 63) >> 6;
    do
    {
      unint64_t v16 = *(void *)(v14 + v12);
      unint64_t v17 = *(void *)(result + v12) + v16;
      BOOL v18 = v17 < v16;
      BOOL v19 = v17 + 1 <= v16;
      if (v13)
      {
        ++v17;
        BOOL v13 = v19;
      }
      else
      {
        BOOL v13 = v18;
      }
      *(void *)(v14 + v12) = v17;
      v12 += 8;
    }
    while (8 * v15 != v12);
    *(void *)(*(void *)v8 + 8 * (v15 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
  }
  else
  {
    uint64_t result = v20;
    if (v9) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v9;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)unint64_t v8 = v11 & (*(void *)v8 + v20);
  }
  if (v21 >= 0x41)
  {
    if (result) {
      return MEMORY[0x1D25D9CB0](result, 0x1000C8000313F17);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::FastMathFlags::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  if (*(_DWORD *)this == -1)
  {
    uint64_t v3 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v3) <= 4)
    {
      BOOL v4 = " fast";
      int v5 = a2;
      size_t v6 = 5;
LABEL_4:
      return llvm::raw_ostream::write(v5, v4, v6);
    }
    *(unsigned char *)(v3 + 4) = 116;
    *(_DWORD *)uint64_t v3 = 1935762976;
    uint64_t v13 = *((void *)a2 + 4) + 5;
    goto LABEL_26;
  }
  unint64_t v7 = this;
  if (*(_DWORD *)this)
  {
    unint64_t v15 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v15 > 7uLL)
    {
      *unint64_t v15 = 0x636F737361657220;
      *((void *)a2 + 4) += 8;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " reassoc", 8uLL);
    }
  }
  if ((*(unsigned char *)v7 & 2) != 0)
  {
    uint64_t v9 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v9) > 4)
    {
      *(unsigned char *)(v9 + 4) = 110;
      *(_DWORD *)uint64_t v9 = 1634627104;
      *((void *)a2 + 4) += 5;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " nnan", 5uLL);
    }
  }
  if ((*(unsigned char *)v7 & 4) != 0)
  {
    uint64_t v10 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v10) > 4)
    {
      *(unsigned char *)(v10 + 4) = 102;
      *(_DWORD *)uint64_t v10 = 1852403232;
      *((void *)a2 + 4) += 5;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " ninf", 5uLL);
    }
  }
  if ((*(unsigned char *)v7 & 8) != 0)
  {
    unint64_t v11 = (_DWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v11 > 3uLL)
    {
      *unint64_t v11 = 2054385184;
      *((void *)a2 + 4) += 4;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " nsz", 4uLL);
    }
  }
  if ((*(unsigned char *)v7 & 0x10) != 0)
  {
    uint64_t v8 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v8) > 4)
    {
      *(unsigned char *)(v8 + 4) = 112;
      *(_DWORD *)uint64_t v8 = 1668440352;
      *((void *)a2 + 4) += 5;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " arcp", 5uLL);
    }
  }
  if ((*(unsigned char *)v7 & 0x20) != 0)
  {
    uint64_t v12 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v12) > 8)
    {
      *(unsigned char *)(v12 + 8) = 116;
      *(void *)uint64_t v12 = *(void *)" contract";
      *((void *)a2 + 4) += 9;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " contract", 9uLL);
    }
  }
  if ((*(unsigned char *)v7 & 0x40) != 0)
  {
    uint64_t v14 = (_DWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v14 <= 3uLL)
    {
      BOOL v4 = " afn";
      int v5 = a2;
      size_t v6 = 4;
      goto LABEL_4;
    }
    *uint64_t v14 = 1852203296;
    uint64_t v13 = *((void *)a2 + 4) + 4;
LABEL_26:
    *((void *)a2 + 4) = v13;
  }
  return this;
}

uint64_t *sub_1CC6125EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)a1;
    unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
    uint64_t result = (uint64_t *)(*(void *)a1 + 16 * v10);
    uint64_t v12 = *result;
    if (*a2 == *result)
    {
LABEL_17:
      char v16 = 0;
      goto LABEL_9;
    }
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v12 == -8192;
      }
      if (v17) {
        uint64_t v13 = result;
      }
      unsigned int v18 = v10 + v14++;
      unsigned int v10 = v18 & (v8 - 1);
      uint64_t result = (uint64_t *)(v9 + 16 * v10);
      uint64_t v12 = *result;
      if (*a2 == *result) {
        goto LABEL_17;
      }
    }
    if (v13) {
      unint64_t v15 = v13;
    }
    else {
      unint64_t v15 = result;
    }
  }
  else
  {
    unint64_t v15 = 0;
  }
  uint64_t result = sub_1CBFFD5B4(a1, (uint64_t)a2, a2, v15);
  *uint64_t result = *a2;
  *((_DWORD *)result + 2) = *a3;
  uint64_t v9 = *(void *)a1;
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  char v16 = 1;
LABEL_9:
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a4 + 16) = v16;
  return result;
}

char *sub_1CC6126DC(char **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  BOOL v4 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unsigned int v8 = a1[2];
  if (0x5555555555555556 * ((v8 - v3) >> 3) > v6) {
    unint64_t v6 = 0x5555555555555556 * ((v8 - v3) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - v3) >> 3) >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v6;
  }
  void v21[4] = a1 + 2;
  if (v9 > 0xAAAAAAAAAAAAAAALL) {
    sub_1CB833614();
  }
  uint64_t v12 = (char *)operator new(24 * v9);
  uint64_t v13 = &v12[24 * v5];
  uint64_t v14 = *a2;
  *((_DWORD *)v13 + 4) = *((_DWORD *)a3 + 2);
  uint64_t v15 = *a3;
  *(void *)uint64_t v13 = v14;
  *((void *)v13 + 1) = v15;
  *((_DWORD *)a3 + 2) = 0;
  char v16 = v13;
  if (v4 != v3)
  {
    uint64_t v17 = 0;
    do
    {
      unsigned int v18 = &v13[v17];
      *((void *)v18 - 3) = *(void *)&v4[v17 - 24];
      *((_DWORD *)v18 - 2) = *(_DWORD *)&v4[v17 - 8];
      *((void *)v18 - 2) = *(void *)&v4[v17 - 16];
      *(_DWORD *)&v4[v17 - 8] = 0;
      v17 -= 24;
    }
    while (&v4[v17] != v3);
    char v16 = &v13[v17];
  }
  BOOL v19 = v13 + 24;
  *a1 = v16;
  a1[1] = v13 + 24;
  a1[2] = &v12[24 * v9];
  v21[2] = v4;
  v21[3] = v8;
  v21[0] = v3;
  v21[1] = v3;
  sub_1CD5D5540((uint64_t)v21);
  return v19;
}

char *sub_1CC612830(char **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  unint64_t v7 = a1[2];
  if (0x5555555555555556 * ((v7 - v2) >> 3) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((v7 - v2) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v2) >> 3) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v5;
  }
  void v18[4] = a1 + 2;
  if (v8 > 0xAAAAAAAAAAAAAAALL) {
    sub_1CB833614();
  }
  unsigned int v10 = (char *)operator new(24 * v8);
  unint64_t v11 = &v10[24 * v4];
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)unint64_t v11 = *(void *)a2;
  *((void *)v11 + 1) = v12;
  *(_DWORD *)(a2 + 16) = 0;
  uint64_t v13 = v11;
  if (v3 != v2)
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = &v11[v14];
      *((void *)v15 - 3) = *(void *)&v3[v14 - 24];
      *((_DWORD *)v15 - 2) = *(_DWORD *)&v3[v14 - 8];
      *((void *)v15 - 2) = *(void *)&v3[v14 - 16];
      *(_DWORD *)&v3[v14 - 8] = 0;
      v14 -= 24;
    }
    while (&v3[v14] != v2);
    uint64_t v13 = &v11[v14];
  }
  char v16 = v11 + 24;
  *a1 = v13;
  a1[1] = v11 + 24;
  a1[2] = &v10[24 * v8];
  v18[2] = v3;
  v18[3] = v7;
  v18[0] = v2;
  v18[1] = v2;
  sub_1CD5D5540((uint64_t)v18);
  return v16;
}

BOOL sub_1CC61297C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) != 0x7FFFFFFF;
}

void sub_1CC612994()
{
}

void *sub_1CC6129A8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F2617AE8;
  return result;
}

void sub_1CC6129E0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2617AE8;
}

void sub_1CC612A08(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (!atomic_load_explicit(&llvm::OptBisector, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::OptBisector, (void *(*)(void))sub_1CD5CC960, (void (*)(void *))sub_1CD5CC9B4);
  }
  uint64_t v3 = llvm::OptBisector;
  *(_DWORD *)(llvm::OptBisector + 8) = v2;
  *(_DWORD *)(v3 + 12) = 0;
}

uint64_t sub_1CC612A70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC612B08(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  sub_1CC612A70((uint64_t)v5, a1);
  unint64_t v8 = 0;
  BOOL v1 = v6;
  if (v6)
  {
    int v2 = operator new(0x28uLL);
    uint64_t v3 = v2;
    void *v2 = &unk_1F2617B30;
    if (v1 == v5)
    {
      v2[4] = v2 + 1;
      (*(void (**)(void *))(v5[0] + 24))(v5);
    }
    else
    {
      v2[4] = v1;
      unint64_t v6 = 0;
    }
    unint64_t v8 = v3;
  }
  sub_1CC612CC8(qword_1EBCD8A38, (uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void *sub_1CC612CC8(void *a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CC612D98((uint64_t)v4, a2);
  sub_1CC612E30(v4, a1);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return a1;
}

uint64_t sub_1CC612D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1CC612E30(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void *sub_1CC613098(void *a1)
{
  *a1 = &unk_1F2617B30;
  int v2 = a1 + 1;
  uint64_t v3 = (void *)a1[4];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void sub_1CC61313C(void *a1)
{
  *a1 = &unk_1F2617B30;
  BOOL v1 = a1 + 1;
  int v2 = (void *)a1[4];
  if (v2 == v1)
  {
    (*(void (**)(void *))(*v1 + 32))(v1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CC613200(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  int v2 = operator new(0x28uLL);
  void *v2 = &unk_1F2617B30;
  sub_1CC612A70((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1CC613254(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2617B30;
  return sub_1CC612A70((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_1CC613280()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v4 = 1;
  uint64_t v3 = (int *)&llvm::OptBisect::Disabled;
  int v2 = 0;
  v5[0] = &unk_1F2617AE8;
  uint64_t v6 = v5;
  unint64_t v8 = v7;
  v7[0] = &unk_1F2617AE8;
  v1.n128_u64[0] = (unint64_t)"Maximum optimization to perform";
  v1.n128_u64[1] = 31;
  sub_1CD5D5890(&v4, &v3, &v2, (uint64_t)v7, &v1);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCD8998, &dword_1CB82C000);
}

void llvm::Pass::~Pass(llvm::Pass *this)
{
  *(void *)this = &unk_1F2617EB0;
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    int v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    MEMORY[0x1D25D9CE0](v1, 0x20C40DC1BFBCFLL);
  }
}

uint64_t llvm::ModulePass::getPotentialPassManagerType(llvm::ModulePass *this)
{
  return 1;
}

uint64_t llvm::ModulePass::skipModule(llvm::ModulePass *this, llvm::LLVMContextImpl ***a2)
{
  uint64_t OptPassGate = llvm::LLVMContextImpl::getOptPassGate(**a2);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)OptPassGate + 24))(OptPassGate)) {
    return 0;
  }
  char v7 = *((unsigned char *)a2 + 191);
  if (v7 >= 0) {
    unint64_t v8 = (const std::string::value_type *)(a2 + 21);
  }
  else {
    unint64_t v8 = (const std::string::value_type *)a2[21];
  }
  if (v8)
  {
    int v9 = v7;
    std::string::size_type v10 = v7 & 0x7F;
    if (v9 >= 0) {
      std::string::size_type v11 = v10;
    }
    else {
      std::string::size_type v11 = (std::string::size_type)a2[22];
    }
    std::string::__init(&v20, v8, v11);
  }
  else
  {
    memset(&v20, 0, sizeof(v20));
  }
  uint64_t v12 = std::string::insert(&v20, 0, "module (");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v21, ")");
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  uint64_t v19 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v19 >= 0) {
    char v16 = __p;
  }
  else {
    char v16 = (void **)__p[0];
  }
  if (v19 >= 0) {
    uint64_t v17 = (void *)(HIBYTE(v19) & 0x7F);
  }
  else {
    uint64_t v17 = __p[1];
  }
  uint64_t v5 = (*(unsigned int (**)(uint64_t, llvm::ModulePass *, void **, void *))(*(void *)OptPassGate + 16))(OptPassGate, this, v16, v17) ^ 1;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

BOOL llvm::Pass::mustPreserveAnalysisID(llvm::Pass *this, char *a2)
{
  return llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((void *)this + 1) + 24), a2, 1) != 0;
}

const char *llvm::Pass::getPassName(llvm::Pass *this)
{
  uint64_t v1 = *((void *)this + 2);
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)PassRegistry);
  int v3 = *(_DWORD *)(PassRegistry + 192);
  if (!v3)
  {
LABEL_8:
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
    return "Unnamed pass: implement Pass::getPassName()";
  }
  uint64_t v4 = *(void *)(PassRegistry + 176);
  unsigned int v5 = v3 - 1;
  uint64_t v6 = (v3 - 1) & ((v1 >> 4) ^ (v1 >> 9));
  uint64_t v7 = *(void *)(v4 + 16 * v6);
  if (v7 != v1)
  {
    int v8 = 1;
    while (v7 != -4096)
    {
      int v9 = v6 + v8++;
      uint64_t v6 = v9 & v5;
      uint64_t v7 = *(void *)(v4 + 16 * v6);
      if (v7 == v1) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v10 = *(void *)(v4 + 16 * v6 + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
  if (v10) {
    return *(const char **)v10;
  }
  return "Unnamed pass: implement Pass::getPassName()";
}

uint64_t llvm::Pass::getAsImmutablePass(llvm::Pass *this)
{
  return 0;
}

uint64_t llvm::Pass::getAsPMDataManager(llvm::Pass *this)
{
  return 0;
}

uint64_t llvm::Pass::setResolver(uint64_t this, llvm::AnalysisResolver *a2)
{
  *(void *)(this + 8) = a2;
  return this;
}

void llvm::ImmutablePass::~ImmutablePass(llvm::ImmutablePass *this)
{
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::FunctionPass::getPotentialPassManagerType(llvm::FunctionPass *this)
{
  return 3;
}

uint64_t llvm::FunctionPass::skipFunction(llvm::FunctionPass *this, llvm::LLVMContextImpl ****a2)
{
  uint64_t OptPassGate = llvm::LLVMContextImpl::getOptPassGate(***a2);
  if ((*(unsigned int (**)(uint64_t))(*(void *)OptPassGate + 24))(OptPassGate))
  {
    Name = llvm::Value::getName((llvm::Value *)a2);
    if (Name) {
      std::string::__init(&v18, Name, v8);
    }
    else {
      memset(&v18, 0, sizeof(v18));
    }
    int v9 = std::string::insert(&v18, 0, "function (");
    std::string::size_type v10 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v11 = std::string::append(&v19, ")");
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)__n128 __p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    uint64_t v17 = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    std::string::size_type v13 = v17 >= 0 ? __p : (void **)__p[0];
    uint64_t v14 = v17 >= 0 ? (void *)(HIBYTE(v17) & 0x7F) : __p[1];
    int v15 = (*(uint64_t (**)(uint64_t, llvm::FunctionPass *, void **, void *))(*(void *)OptPassGate + 16))(OptPassGate, this, v13, v14);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (!v15) {
      return 1;
    }
  }
  unsigned int v5 = a2[14];
  if (v5) {
    return (*((unsigned __int8 *)v5 + 17) >> 3) & 1;
  }
  else {
    return 0;
  }
}

uint64_t llvm::Pass::lookupPassInfo(llvm::PassRegistry *a1, size_t a2)
{
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);

  return llvm::PassRegistry::getPassInfo(PassRegistry, (unsigned __int8 *)a1, a2);
}

uint64_t llvm::Pass::createPass(llvm::Pass *this, const void *a2)
{
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)PassRegistry);
  int v4 = *(_DWORD *)(PassRegistry + 192);
  if (!v4)
  {
LABEL_10:
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
    return 0;
  }
  uint64_t v5 = *(void *)(PassRegistry + 176);
  unsigned int v6 = v4 - 1;
  uint64_t v7 = (v4 - 1) & ((this >> 4) ^ (this >> 9));
  std::string::size_type v8 = *(llvm::Pass **)(v5 + 16 * v7);
  if (v8 != this)
  {
    int v9 = 1;
    while (v8 != (llvm::Pass *)-4096)
    {
      int v10 = v7 + v9++;
      uint64_t v7 = v10 & v6;
      std::string::size_type v8 = *(llvm::Pass **)(v5 + 16 * v7);
      if (v8 == this) {
        goto LABEL_6;
      }
    }
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v11 = *(void *)(v5 + 16 * v7 + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)PassRegistry);
  if (!v11) {
    return 0;
  }
  std::string::size_type v12 = *(uint64_t (**)(void))(v11 + 72);

  return v12();
}

uint64_t llvm::RegisterAGBase::RegisterAGBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a4;
  *(_WORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 42) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  llvm::PassRegistry::registerAnalysisGroup(PassRegistry, a4, a5, (void *)a1, a6, 0);
  return a1;
}

{
  atomic_ullong PassRegistry;

  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a4;
  *(_WORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 42) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  llvm::PassRegistry::registerAnalysisGroup(PassRegistry, a4, a5, (void *)a1, a6, 0);
  return a1;
}

void llvm::PassRegistrationListener::enumeratePasses(llvm::PassRegistrationListener *this)
{
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);

  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)this);
}

llvm::PassNameParser *llvm::PassNameParser::PassNameParser(llvm::PassNameParser *this, llvm::cl::Option *a2)
{
  *((void *)this + 2) = a2;
  *((void *)this + 3) = (char *)this + 40;
  *((void *)this + 4) = 0x800000000;
  *(void *)this = &unk_1F2617B78;
  *((void *)this + 1) = &unk_1F2617BB8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  llvm::PassRegistry::addRegistrationListener(PassRegistry, (uint64_t)this);
  return this;
}

{
  atomic_ullong PassRegistry;

  *((void *)this + 2) = a2;
  *((void *)this + 3) = (char *)this + 40;
  *((void *)this + 4) = 0x800000000;
  *(void *)this = &unk_1F2617B78;
  *((void *)this + 1) = &unk_1F2617BB8;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  llvm::PassRegistry::addRegistrationListener(PassRegistry, (uint64_t)this);
  return this;
}

void llvm::PassNameParser::~PassNameParser(llvm::PassNameParser *this)
{
  *((void *)this + 1) = &unk_1F2617DF0;
  int v2 = (char *)*((void *)this + 3);
  if (v2 != (char *)this + 40) {
    free(v2);
  }
}

{
  char *v2;

  *((void *)this + 1) = &unk_1F2617DF0;
  int v2 = (char *)*((void *)this + 3);
  if (v2 != (char *)this + 40) {
    free(v2);
  }
}

{
  char *v2;
  uint64_t vars8;

  *((void *)this + 1) = &unk_1F2617DF0;
  int v2 = (char *)*((void *)this + 3);
  if (v2 != (char *)this + 40) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void non-virtual thunk to'llvm::PassNameParser::~PassNameParser(llvm::PassNameParser *this)
{
  *(void *)this = &unk_1F2617DF0;
  int v2 = (char *)*((void *)this + 2);
  if (v2 != (char *)this + 32) {
    free(v2);
  }
}

{
  llvm::PassNameParser::~PassNameParser((llvm::PassNameParser *)((char *)this - 8));
}

void llvm::AnalysisUsage::setPreservesCFG(llvm::AnalysisUsage *this)
{
  v2[0] = &unk_1F2617E40;
  v2[1] = (char *)this + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v2);
}

llvm::PassRegistry *llvm::AnalysisUsage::addPreserved(llvm::PassRegistry *a1, unsigned __int8 *a2, size_t a3)
{
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  uint64_t PassInfo = llvm::PassRegistry::getPassInfo(PassRegistry, a2, a3);
  if (PassInfo) {
    sub_1CB843600((uint64_t)a1, (uint64_t)a1 + 112, *(void *)(PassInfo + 32));
  }
  return a1;
}

llvm::AnalysisUsage *llvm::AnalysisUsage::addRequiredID(llvm::AnalysisUsage *this, uint64_t a2)
{
  return this;
}

llvm::AnalysisUsage *llvm::AnalysisUsage::addRequiredID(llvm::AnalysisUsage *this, char *a2)
{
  return this;
}

llvm::AnalysisUsage *llvm::AnalysisUsage::addRequiredTransitiveID(llvm::AnalysisUsage *this, char *a2)
{
  return this;
}

void sub_1CC613F0C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 24)
    && *(void *)(a2 + 72)
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, a2) & 1) == 0)
  {
    int v4 = *(const void **)(a2 + 16);
    if (v4) {
      size_t v5 = strlen(*(const char **)(a2 + 16));
    }
    else {
      size_t v5 = 0;
    }
    Optiouint64_t n = llvm::cl::generic_parser_base::findOption(a1 + 8, v4, v5);
    uint64_t v7 = (llvm *)(*(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 16))(a1 + 8);
    if (Option == v7)
    {
      std::string::size_type v8 = *(unsigned __int8 **)(a2 + 16);
      if (v8) {
        size_t v9 = strlen(*(const char **)(a2 + 16));
      }
      else {
        size_t v9 = 0;
      }
      int v10 = *(const char **)a2;
      if (*(void *)a2) {
        size_t v11 = strlen(*(const char **)a2);
      }
      else {
        size_t v11 = 0;
      }
      v25[0] = *(void *)(a2 + 16);
      v25[1] = v9;
      v25[2] = v10;
      v25[3] = v11;
      std::string::size_type v12 = (char *)v25;
      char v26 = 1;
      v25[4] = &unk_1F2617E70;
      v25[5] = a2;
      uint64_t v14 = (unint64_t *)(a1 + 24);
      unint64_t v13 = *(void *)(a1 + 24);
      uint64_t v15 = *(unsigned int *)(a1 + 32);
      if (v15 >= *(_DWORD *)(a1 + 36))
      {
        unint64_t v19 = v15 + 1;
        BOOL v20 = v13 + 56 * v15 > (unint64_t)v25;
        if (v13 <= (unint64_t)v25 && v20)
        {
          std::string v21 = (char *)v25 - v13;
          sub_1CC61441C(a1 + 24, v19);
          unint64_t v13 = *v14;
          std::string::size_type v12 = &v21[*v14];
        }
        else
        {
          sub_1CC61441C(a1 + 24, v19);
          unint64_t v13 = *v14;
          std::string::size_type v12 = (char *)v25;
        }
      }
      uint64_t v16 = v13 + 56 * *(unsigned int *)(a1 + 32);
      long long v17 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v12;
      *(_OWORD *)(v16 + 16) = v17;
      *(void *)(v16 + 32) = &unk_1F2617E90;
      uint64_t v18 = *((void *)v12 + 5);
      *(unsigned char *)(v16 + 48) = v12[48];
      *(void *)(v16 + 32) = &unk_1F2617E70;
      *(void *)(v16 + 40) = v18;
      ++*(_DWORD *)(a1 + 32);
      llvm::cl::AddLiteralOption(*(void *)(a1 + 16), v8, v9);
    }
    else
    {
      unint64_t v22 = (llvm::raw_ostream *)llvm::errs(v7);
      unsigned int v23 = sub_1CB8E509C(v22, "Two passes with the same argument (-");
      uint64_t v24 = sub_1CD5D5C70(v23, *(const void **)(a2 + 16), *(void *)(a2 + 24));
      sub_1CB8E509C(v24, ") attempted to be registered!\n");
      __break(1u);
    }
  }
}

uint64_t sub_1CC614154(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t sub_1CC614178()
{
  return 0;
}

uint64_t sub_1CC614180(uint64_t a1, llvm::cl::Option *a2, unsigned int a3)
{
  size_t v6 = *(unsigned int *)(a1 + 32);
  if (v6 >= 2) {
    qsort(*(void **)(a1 + 24), v6, 0x38uLL, (int (__cdecl *)(const void *, const void *))sub_1CC614548);
  }

  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 8), a2, a3);
}

uint64_t sub_1CC6141F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1CC6141FC(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 56 * a2);
}

uint64_t sub_1CC614210(uint64_t a1, unsigned int a2)
{
  return *(void *)(*(void *)(a1 + 16) + 56 * a2 + 16);
}

uint64_t sub_1CC614224(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 16) + 56 * a2 + 32;
}

uint64_t sub_1CC614238(void **this, llvm::cl::Option *a2, unsigned int a3)
{
  size_t v6 = *((unsigned int *)this + 6);
  if (v6 >= 2) {
    qsort(this[2], v6, 0x38uLL, (int (__cdecl *)(const void *, const void *))sub_1CC614548);
  }

  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)this, a2, a3);
}

void *sub_1CC6142AC(void *a1)
{
  *a1 = &unk_1F2617DF0;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }
  return a1;
}

void sub_1CC614300(void *a1)
{
  *a1 = &unk_1F2617DF0;
  int v2 = (void *)a1[2];
  if (v2 != a1 + 4) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC614374()
{
}

uint64_t sub_1CC614388(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v2 = *(void *)(result + 8);
    unsigned int v3 = *(_DWORD *)(v2 + 8);
    if (v3 >= *(_DWORD *)(v2 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)v2 + 8 * v3) = *(void *)(a2 + 32);
    ++*(_DWORD *)(v2 + 8);
  }
  return result;
}

BOOL sub_1CC6143F0(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a2 + 16) && *(unsigned char *)(a1 + 16) && *(void *)(a1 + 8) != *(void *)(a2 + 8);
}

void sub_1CC61441C(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  size_t v6 = (char *)malloc_type_malloc(56 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  std::string::size_type v8 = *(char **)a1;
  unsigned int v9 = *(_DWORD *)(a1 + 8);
  if (v9)
  {
    int v10 = &v8[56 * v9];
    size_t v11 = v7 + 32;
    std::string::size_type v12 = v7;
    do
    {
      long long v13 = *((_OWORD *)v8 + 1);
      *(_OWORD *)std::string::size_type v12 = *(_OWORD *)v8;
      *((_OWORD *)v12 + 1) = v13;
      *((void *)v12 + 4) = &unk_1F2617E90;
      uint64_t v14 = *((void *)v8 + 5);
      v12[48] = v8[48];
      *((void *)v12 + 4) = &unk_1F2617E70;
      *((void *)v12 + 5) = v14;
      v11 += 56;
      v8 += 56;
      v12 += 56;
    }
    while (v8 != v10);
    std::string::size_type v8 = *(char **)a1;
  }
  if (v8 != (char *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t sub_1CC614548(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  unint64_t v3 = *(void *)(a1 + 8);
  if (v2 >= v3) {
    size_t v4 = *(void *)(a1 + 8);
  }
  else {
    size_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    int v5 = memcmp(*(const void **)a1, *(const void **)a2, v4);
    if (v5) {
      return (v5 >> 31) | 1u;
    }
  }
  if (v3 < v2) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = 1;
  }
  if (v3 == v2) {
    return 0;
  }
  else {
    return v7;
  }
}

void *llvm::AllAnalysesOn<llvm::Module>::ID()
{
  return &llvm::AllAnalysesOn<llvm::Module>::SetKey;
}

void *llvm::AllAnalysesOn<llvm::Function>::ID()
{
  return &llvm::AllAnalysesOn<llvm::Function>::SetKey;
}

__n128 llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::PassManager(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void *llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::operator=(void *a1, uint64_t a2)
{
  size_t v4 = (void *)*a1;
  if (*a1)
  {
    int v5 = (void *)a1[1];
    size_t v6 = (void *)*a1;
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        *int v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      size_t v6 = (void *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return a1;
}

void llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  llvm::AnalysisManager<llvm::Module>::getResultImpl();
}

uint64_t sub_1CC6149D0(uint64_t *a1, uint64_t a2)
{
  if (*a1)
  {
    char v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    uint64_t v5 = *a1;
    if ((v4 & 1) == 0 && *(_DWORD *)(v5 + 8))
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      operator new();
    }
    if (*(_DWORD *)(v5 + 296))
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      operator new();
    }
  }
  return 1;
}

uint64_t sub_1CC614DA0(uint64_t result, uint64_t a2)
{
  if (*(void *)result)
  {
    if (*(_DWORD *)(*(void *)result + 440))
    {
      (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
      uint64_t v2 = 0;
      operator new();
    }
  }
  return result;
}

void llvm::AnalysisManager<llvm::Module>::invalidate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!sub_1CBFA534C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Module>::SetKey))
  {
    uint64_t v22 = 1;
    for (uint64_t i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v22 + i) = -4096;
    v21[0] = &v22;
    v21[1] = a1 + 48;
    uint64_t v20 = a2;
    uint64_t v7 = sub_1CBFA4CB4((uint64_t *)(a1 + 24), &v20);
    uint64_t v8 = v7 + 1;
    long long v17 = v7;
    unsigned int v9 = (void *)v7[2];
    if (v9 != v7 + 1)
    {
      do
      {
        uint64_t v10 = v9[2];
        uint64_t v11 = v9[3];
        uint64_t v12 = sub_1CBF5BF34((uint64_t)&v22, v10);
        if (v22) {
          long long v13 = &v23;
        }
        else {
          long long v13 = v23;
        }
        unsigned int v14 = v24;
        if (v22) {
          unsigned int v14 = 8;
        }
        if (&v13[2 * v14] == (void *)v12)
        {
          char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void *))(*(void *)v11 + 16))(v11, a2, a3, v21);
          uint64_t v18 = v10;
          v19[0] = v15;
          sub_1CBF5C150((uint64_t)&v22, &v18, v19, (uint64_t)&v20);
        }
        unsigned int v9 = (void *)v9[1];
      }
      while (v9 != v8);
    }
    if (v22 >= 2)
    {
      for (unint64_t j = (void *)v17[2]; j != v8; unint64_t j = (void *)j[1])
      {
        uint64_t v20 = j[2];
        uint64_t v18 = 0;
        if (sub_1CBF5BFB4((uint64_t)&v22, &v20, &v18) && *(unsigned char *)(v18 + 8)) {
          llvm::AnalysisManager<llvm::Module>::getCachedResultImpl();
        }
      }
    }
    if (!v17[3])
    {
      uint64_t v20 = a2;
      sub_1CD5D6284(a1 + 24, &v20);
    }
    if ((v22 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v23, 8);
    }
  }
}

BOOL llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::isEmpty(void *a1)
{
  return *a1 == a1[1];
}

uint64_t llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::isRequired()
{
  return 1;
}

__n128 llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::PassManager(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void *llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::operator=(void *a1, uint64_t a2)
{
  char v4 = (void *)*a1;
  if (*a1)
  {
    uint64_t v5 = (void *)a1[1];
    size_t v6 = (void *)*a1;
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        *uint64_t v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      size_t v6 = (void *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return a1;
}

void llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::run(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v2 = a1 + 80;
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  llvm::AnalysisManager<llvm::Function>::getResultImpl();
}

uint64_t llvm::AnalysisManager<llvm::Function>::invalidate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t result = sub_1CBFA534C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
  if ((result & 1) == 0)
  {
    uint64_t v21 = 1;
    for (uint64_t i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v21 + i) = -4096;
    v20[0] = &v21;
    v20[1] = a1 + 48;
    uint64_t v19 = a2;
    uint64_t result = (uint64_t)sub_1CBFA6DC4((uint64_t *)(a1 + 24), &v19);
    uint64_t v8 = (void *)(result + 8);
    uint64_t v16 = result;
    unsigned int v9 = *(void **)(result + 16);
    if (v9 != (void *)(result + 8))
    {
      do
      {
        uint64_t v10 = v9[2];
        uint64_t v11 = v9[3];
        uint64_t result = sub_1CBF5BF34((uint64_t)&v21, v10);
        if (v21) {
          uint64_t v12 = &v22;
        }
        else {
          uint64_t v12 = v22;
        }
        unsigned int v13 = v23;
        if (v21) {
          unsigned int v13 = 8;
        }
        if (&v12[2 * v13] == (void *)result)
        {
          char v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void *))(*(void *)v11 + 16))(v11, a2, a3, v20);
          uint64_t v17 = v10;
          v18[0] = v14;
          uint64_t result = sub_1CBF5C150((uint64_t)&v21, &v17, v18, (uint64_t)&v19);
        }
        unsigned int v9 = (void *)v9[1];
      }
      while (v9 != v8);
    }
    if (v21 >= 2)
    {
      for (unint64_t j = *(void **)(v16 + 16); j != v8; unint64_t j = (void *)j[1])
      {
        uint64_t v19 = j[2];
        uint64_t v17 = 0;
        uint64_t result = sub_1CBF5BFB4((uint64_t)&v21, &v19, &v17);
        if (result && *(unsigned char *)(v17 + 8)) {
          llvm::AnalysisManager<llvm::Function>::getCachedResultImpl();
        }
      }
    }
    if (!*(void *)(v16 + 24))
    {
      uint64_t v19 = a2;
      uint64_t result = sub_1CBFA7270(a1 + 24, &v19);
    }
    if ((v21 & 1) == 0) {
      return MEMORY[0x1D25D9CD0](v22, 8);
    }
  }
  return result;
}

BOOL llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::isEmpty(void *a1)
{
  return *a1 == a1[1];
}

uint64_t llvm::PassManager<llvm::Function,llvm::AnalysisManager<llvm::Function>>::isRequired()
{
  return 1;
}

void *llvm::AnalysisManager<llvm::Module>::Invalidator::Invalidator(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Module>::AnalysisManager(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Module>::AnalysisManager(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  int v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  int v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

void *llvm::AnalysisManager<llvm::Module>::operator=(void *a1, uint64_t a2)
{
  sub_1CC5C4C3C((unsigned int *)a1);
  MEMORY[0x1D25D9CD0](*a1, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *(void *)a2;
  *(void *)a2 = 0;
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v5 = a1 + 3;
  uint64_t v4 = a1[3];
  int v6 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v6;
  int v7 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v7;
  uint64_t v8 = *((unsigned int *)a1 + 10);
  if (v8)
  {
    unsigned int v9 = (uint64_t *)(v4 + 8);
    uint64_t v10 = 32 * v8;
    do
    {
      if ((*(v9 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        sub_1CBFA4F3C(v9);
      }
      v9 += 4;
      v10 -= 32;
    }
    while (v10);
    uint64_t v4 = *v5;
  }
  MEMORY[0x1D25D9CD0](v4, 8);
  *int v5 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v11 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v11;
  int v12 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v12;
  MEMORY[0x1D25D9CD0](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *((_DWORD *)a1 + 14) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v13 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v13;
  int v14 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v14;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::Module>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::Module>::clear()
{
}

void llvm::AnalysisManager<llvm::Module>::clear(_DWORD *a1)
{
  int v2 = a1[14];
  if (v2 || a1[15])
  {
    int v3 = a1 + 12;
    unsigned int v4 = a1[16];
    if (v4 > 4 * v2 && v4 >= 0x41)
    {
      sub_1CD4A0040(v3);
    }
    else
    {
      if (v4)
      {
        int v5 = *(void **)v3;
        uint64_t v6 = *(void *)v3 + 24 * v4;
        do
        {
          *int v5 = -4096;
          v5[1] = -4096;
          v5 += 3;
        }
        while (v5 != (void *)v6);
      }
      *((void *)a1 + 7) = 0;
    }
  }
  int v7 = a1[8];
  if (v7 || a1[9])
  {
    uint64_t v8 = a1 + 6;
    uint64_t v9 = a1[10];
    if (v9 > 4 * v7 && v9 >= 0x41)
    {
      sub_1CD5D63A0(v8);
    }
    else
    {
      if (v9)
      {
        uint64_t v10 = (uint64_t *)(*(void *)v8 + 8);
        uint64_t v11 = 32 * v9;
        do
        {
          uint64_t v12 = *(v10 - 1);
          if (v12 != -4096)
          {
            if (v12 != -8192) {
              sub_1CBFA4F3C(v10);
            }
            *(v10 - 1) = -4096;
          }
          v10 += 4;
          v11 -= 32;
        }
        while (v11);
      }
      *((void *)a1 + 4) = 0;
    }
  }
}

uint64_t llvm::AnalysisManager<llvm::Module>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  if (sub_1CBFA3AF4((uint64_t *)a1, &v5, &v6)) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = 0;
  uint64_t v6 = a2;
  if (sub_1CBFA3AF4((uint64_t *)a1, &v6, &v5)) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::Module>::getResultImpl(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 48);
  v18[0] = (uint64_t)a2;
  v18[1] = a3;
  uint64_t v19 = 0;
  sub_1CBFA4904(a1 + 48, v18, &v19, (uint64_t)v20);
  if (v21)
  {
    v18[0] = (uint64_t)a2;
    v20[0] = 0;
    if (sub_1CBFA3AF4((uint64_t *)a1, v18, v20)) {
      uint64_t v9 = v20[0];
    }
    else {
      uint64_t v9 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v17 = 0;
    if (a2 != &llvm::PassInstrumentationAnalysis::Key)
    {
      uint64_t v17 = *(void *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3)+ 8);
      sub_1CBFA465C((uint64_t)&v17, v10);
    }
    v20[0] = a3;
    uint64_t v11 = sub_1CBFA4CB4((uint64_t *)(a1 + 24), v20);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v20, v10, a3, a1);
    uint64_t v12 = operator new(0x20uLL);
    uint64_t v14 = v11[1];
    int v13 = v11 + 1;
    uint64_t v15 = v20[0];
    v12[2] = a2;
    v12[3] = v15;
    *uint64_t v12 = v14;
    v12[1] = v13;
    *(void *)(v14 + 8) = v12;
    *int v13 = (uint64_t)v12;
    ++v13[2];
    sub_1CBFA47B0((uint64_t)&v17, v10);
    v20[0] = (uint64_t)a2;
    v20[1] = a3;
    v18[0] = 0;
    if (sub_1CBFA49A4(v6, v20, v18)) {
      uint64_t v16 = v18[0];
    }
    else {
      uint64_t v16 = *(void *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
    }
    uint64_t v7 = *v13;
    *(void *)(v16 + 16) = *v13;
  }
  else
  {
    uint64_t v7 = *(void *)(v20[0] + 16);
  }
  return *(void *)(v7 + 24);
}

uint64_t llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v9 = 0;
  if (sub_1CBFA49A4((uint64_t *)(a1 + 48), v8, &v9))
  {
    uint64_t v4 = v9;
    uint64_t v5 = *(void *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 64);
    uint64_t v4 = v5 + 24 * v6;
  }
  if (v4 == v5 + 24 * v6) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v4 + 16) + 24);
  }
}

void *llvm::AnalysisManager<llvm::Function>::Invalidator::Invalidator(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

{
  *uint64_t result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Function>::AnalysisManager(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::Function>::AnalysisManager(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  int v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)uint64_t result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  int v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

void *llvm::AnalysisManager<llvm::Function>::operator=(void *a1, uint64_t a2)
{
  sub_1CBF54128((unsigned int *)a1);
  MEMORY[0x1D25D9CD0](*a1, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *(void *)a2;
  *(void *)a2 = 0;
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v5 = a1 + 3;
  uint64_t v4 = a1[3];
  int v6 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v6;
  int v7 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v7;
  uint64_t v8 = *((unsigned int *)a1 + 10);
  if (v8)
  {
    uint64_t v9 = (uint64_t *)(v4 + 8);
    uint64_t v10 = 32 * v8;
    do
    {
      if ((*(v9 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        sub_1CBF5408C(v9);
      }
      v9 += 4;
      v10 -= 32;
    }
    while (v10);
    uint64_t v4 = *v5;
  }
  MEMORY[0x1D25D9CD0](v4, 8);
  *int v5 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *((_DWORD *)a1 + 8) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v11 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v11;
  int v12 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v12;
  MEMORY[0x1D25D9CD0](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *((_DWORD *)a1 + 14) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v13 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v13;
  int v14 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v14;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::Function>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::Function>::clear()
{
}

{
  while (1)
    ;
}

void llvm::AnalysisManager<llvm::Function>::clear(uint64_t a1)
{
  sub_1CBF9BC38((_DWORD *)(a1 + 48));

  sub_1CC6168A0((_DWORD *)(a1 + 24));
}

void sub_1CC6168A0(_DWORD *a1)
{
  int v2 = a1[2];
  if (v2 || a1[3])
  {
    uint64_t v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1CC617AC0(a1);
    }
    else
    {
      if (v3)
      {
        uint64_t v4 = 32 * v3;
        int v5 = (uint64_t *)(*(void *)a1 + 8);
        do
        {
          uint64_t v6 = *(v5 - 1);
          if (v6 != -4096)
          {
            if (v6 != -8192) {
              sub_1CBF5408C(v5);
            }
            *(v5 - 1) = -4096;
          }
          v5 += 4;
          v4 -= 32;
        }
        while (v4);
      }
      *((void *)a1 + 1) = 0;
    }
  }
}

uint64_t llvm::AnalysisManager<llvm::Function>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  if (sub_1CBFA3AF4((uint64_t *)a1, &v5, &v6)) {
    uint64_t v3 = v6;
  }
  else {
    uint64_t v3 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = 0;
  uint64_t v6 = a2;
  if (sub_1CBFA3AF4((uint64_t *)a1, &v6, &v5)) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::Function>::getResultImpl(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 48);
  v18[0] = (uint64_t)a2;
  v18[1] = a3;
  uint64_t v19 = 0;
  sub_1CBFA6BE4(a1 + 48, v18, &v19, (uint64_t)v20);
  if (v21)
  {
    v18[0] = (uint64_t)a2;
    v20[0] = 0;
    if (sub_1CBFA3AF4((uint64_t *)a1, v18, v20)) {
      uint64_t v9 = v20[0];
    }
    else {
      uint64_t v9 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
    }
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v17 = 0;
    if (a2 != &llvm::PassInstrumentationAnalysis::Key)
    {
      uint64_t v17 = *(void *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3)+ 8);
      sub_1CBFA693C((uint64_t)&v17, v10);
    }
    v20[0] = a3;
    int v11 = sub_1CBFA6DC4((uint64_t *)(a1 + 24), v20);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 16))(v20, v10, a3, a1);
    int v12 = operator new(0x20uLL);
    uint64_t v14 = v11[1];
    int v13 = v11 + 1;
    uint64_t v15 = v20[0];
    v12[2] = a2;
    v12[3] = v15;
    *int v12 = v14;
    v12[1] = v13;
    *(void *)(v14 + 8) = v12;
    *int v13 = (uint64_t)v12;
    ++v13[2];
    sub_1CBFA6A90((uint64_t)&v17, v10);
    v20[0] = (uint64_t)a2;
    v20[1] = a3;
    v18[0] = 0;
    if (sub_1CBF5C064(v6, v20, v18)) {
      uint64_t v16 = v18[0];
    }
    else {
      uint64_t v16 = *(void *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
    }
    uint64_t v7 = *v13;
    *(void *)(v16 + 16) = *v13;
  }
  else
  {
    uint64_t v7 = *(void *)(v20[0] + 16);
  }
  return *(void *)(v7 + 24);
}

uint64_t llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = a2;
  v8[1] = a3;
  uint64_t v9 = 0;
  if (sub_1CBF5C064((uint64_t *)(a1 + 48), v8, &v9))
  {
    uint64_t v4 = v9;
    uint64_t v5 = *(void *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 64);
    uint64_t v4 = v5 + 24 * v6;
  }
  if (v4 == v5 + 24 * v6) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v4 + 16) + 24);
  }
}

void *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::Result(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

void *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::Result(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

uint64_t *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::~Result(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    sub_1CBF9BC38((_DWORD *)(v2 + 48));
    sub_1CC6168A0((_DWORD *)(v2 + 24));
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *a1;
  if (*a1)
  {
    sub_1CBF9BC38((_DWORD *)(v2 + 48));
    sub_1CC6168A0((_DWORD *)(v2 + 24));
  }
  return a1;
}

void *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::operator=(void *result, void *a2)
{
  *uint64_t result = *a2;
  *a2 = 0;
  return result;
}

uint64_t llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::getManager(uint64_t a1)
{
  return *(void *)a1;
}

void *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::InnerAnalysisManagerProxy(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

void *llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::run@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Result::Result(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  result[1] = 1;
  for (uint64_t i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

{
  uint64_t i;

  *uint64_t result = a2;
  result[1] = 1;
  for (uint64_t i = 2; i != 6; i += 2)
    result[i] = -4096;
  return result;
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Result::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v30[4] = *MEMORY[0x1E4F143B8];
  unsigned int v28 = v30;
  uint64_t v29 = 0x400000000;
  uint64_t v8 = (_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 8);
  if (v7 <= 1)
  {
    if (v7)
    {
      uint64_t v9 = a1 + 16;
      uint64_t v10 = 2;
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = *(unsigned int *)(a1 + 24);
    }
    int v11 = (void *)(v9 + 16 * v10);
    int v12 = v11;
    if (v7)
    {
LABEL_5:
      int v13 = (void *)(a1 + 16);
      uint64_t v14 = 2;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v7)
  {
    int v12 = (void *)(a1 + 16);
    uint64_t v15 = (void *)(a1 + 48);
LABEL_8:
    int v11 = v12;
    while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v11 += 2;
      if (v11 == v15)
      {
        int v11 = v15;
        break;
      }
    }
    int v12 = v15;
    if (*(_DWORD *)(a1 + 8)) {
      goto LABEL_5;
    }
LABEL_13:
    int v13 = *(void **)(a1 + 16);
    uint64_t v14 = *(unsigned int *)(a1 + 24);
    goto LABEL_14;
  }
  int v12 = *(void **)(a1 + 16);
  uint64_t v25 = *(unsigned int *)(a1 + 24);
  if (v25)
  {
    uint64_t v15 = &v12[2 * v25];
    goto LABEL_8;
  }
  uint64_t v14 = 0;
  int v11 = *(void **)(a1 + 16);
  int v13 = v11;
LABEL_14:
  uint64_t v16 = &v13[2 * v14];
  if (v11 != v16)
  {
    do
    {
      uint64_t v17 = *v11;
      v27[0] = a4;
      v27[1] = a2;
      v27[2] = a3;
      sub_1CC616FB4(v11 + 1, (uint64_t)v27);
      unint64_t v18 = v11[1];
      if (v18 < 8 || (v18 & 4) != 0 && (unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8) != 0 && !*(_DWORD *)(v19 + 8))
      {
        if (v29 >= (unint64_t)HIDWORD(v29)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v28 + v29) = v17;
        LODWORD(v29) = v29 + 1;
      }
      uint64_t v20 = v11 + 2;
      int v11 = v12;
      if (v20 != v12)
      {
        int v11 = v20;
        while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v11 += 2;
          if (v11 == v12)
          {
            int v11 = v12;
            break;
          }
        }
      }
    }
    while (v11 != v16);
    char v21 = (uint64_t *)v28;
    if (v29)
    {
      uint64_t v22 = 8 * v29;
      do
      {
        uint64_t v23 = *v21++;
        uint64_t v26 = v23;
        sub_1CBF9CADC(v8, &v26);
        v22 -= 8;
      }
      while (v22);
      char v21 = (uint64_t *)v28;
    }
    if (v21 != v30) {
      free(v21);
    }
  }
  return 0;
}

unint64_t *sub_1CC616FB4(uint64_t *a1, uint64_t a2)
{
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v3 = sub_1CC617BCC(a1, &v7);
  unint64_t v4 = *a1;
  if ((*a1 & 4) != 0) {
    uint64_t v5 = (unint64_t *)(*(void *)(v4 & 0xFFFFFFFFFFFFFFF8)
  }
                            + 8 * *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8));
  else {
    uint64_t v5 = (unint64_t *)&a1[v4 > 7];
  }
  return sub_1CBFA5ABC((unint64_t *)a1, (unint64_t *)v3, v5);
}

uint64_t llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::Result::getOuterInvalidations(uint64_t a1)
{
  return a1 + 8;
}

void *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::OuterAnalysisManagerProxy(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

{
  *uint64_t result = a2;
  return result;
}

void *llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::Function>::run@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = 0;
  *a2 = *result;
  a2[1] = 1;
  uint64_t v3 = a2 + 2;
  do
  {
    v3[v2] = -4096;
    v2 += 2;
  }
  while (v2 != 4);
  return result;
}

uint64_t llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Result::invalidate(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 68);
  if (v6 == *(_DWORD *)(a3 + 72))
  {
    uint64_t v8 = *(void **)a3;
    long long v7 = *(void **)(a3 + 8);
    if (v7 == *(void **)a3)
    {
      uint64_t v9 = *(unsigned int *)(a3 + 20);
      uint64_t v10 = (void **)&v7[v9];
      if (v9)
      {
        uint64_t v11 = 0;
        while ((_UNKNOWN *)v7[v11] != &llvm::PreservedAnalyses::AllAnalysesKey)
        {
          if (v9 == ++v11) {
            goto LABEL_7;
          }
        }
        uint64_t v10 = (void **)&v7[v11];
      }
LABEL_7:
      uint64_t v8 = *(void **)(a3 + 8);
    }
    else
    {
      uint64_t v27 = *(unsigned int *)(a3 + 16);
      int v28 = v27 - 1;
      unsigned int v29 = (v27 - 1) & ((&llvm::PreservedAnalyses::AllAnalysesKey >> 4) ^ (&llvm::PreservedAnalyses::AllAnalysesKey >> 9));
      uint64_t v10 = (void **)&v7[v29];
      unsigned int v30 = *v10;
      if (*v10 == (void *)-1)
      {
        int64_t v31 = 0;
LABEL_57:
        if (v31) {
          uint64_t v10 = v31;
        }
        if (*v10 != &llvm::PreservedAnalyses::AllAnalysesKey)
        {
          LODWORD(v9) = *(_DWORD *)(a3 + 20);
          uint64_t v10 = (void **)&v7[v27];
          goto LABEL_8;
        }
      }
      else
      {
        int64_t v31 = 0;
        int v32 = 1;
        while (v30 != &llvm::PreservedAnalyses::AllAnalysesKey)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v30 == (void *)-2;
          }
          if (v33) {
            int64_t v31 = v10;
          }
          unsigned int v34 = v29 + v32++;
          unsigned int v29 = v34 & v28;
          uint64_t v10 = (void **)&v7[v34 & v28];
          unsigned int v30 = *v10;
          if (*v10 == (void *)-1) {
            goto LABEL_57;
          }
        }
      }
      LODWORD(v9) = *(_DWORD *)(a3 + 20);
    }
LABEL_8:
    if (v7 == v8) {
      int v12 = v9;
    }
    else {
      int v12 = *(_DWORD *)(a3 + 16);
    }
    if (v10 != &v7[v12]) {
      return 0;
    }
  }
  v35[0] = (void **)a3;
  v35[1] = (void **)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
  uint64_t v14 = *(void *)(a3 + 48);
  uint64_t v13 = *(void *)(a3 + 56);
  if (v13 == v14)
  {
    uint64_t v15 = (void **)(v13 + 8 * v6);
    if (v6)
    {
      uint64_t v16 = 0;
      while (*(_UNKNOWN **)(v13 + v16) != &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key)
      {
        v16 += 8;
        if (8 * v6 == v16) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = (void **)(v13 + v16);
    }
LABEL_17:
    uint64_t v14 = *(void *)(a3 + 56);
  }
  else
  {
    uint64_t v19 = *(unsigned int *)(a3 + 64);
    int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key >> 4) ^ (&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key >> 9));
    uint64_t v15 = (void **)(v13 + 8 * v21);
    uint64_t v22 = *v15;
    if (*v15 == (void *)-1)
    {
      uint64_t v23 = 0;
LABEL_48:
      if (v23) {
        uint64_t v15 = v23;
      }
      if (*v15 != &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key) {
        uint64_t v15 = (void **)(v13 + 8 * v19);
      }
    }
    else
    {
      uint64_t v23 = 0;
      int v24 = 1;
      while (v22 != &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == (void *)-2;
        }
        if (v25) {
          uint64_t v23 = v15;
        }
        unsigned int v26 = v21 + v24++;
        unsigned int v21 = v26 & v20;
        uint64_t v15 = (void **)(v13 + 8 * (v26 & v20));
        uint64_t v22 = *v15;
        if (*v15 == (void *)-1) {
          goto LABEL_48;
        }
      }
    }
  }
  if (v13 != v14) {
    LODWORD(v6) = *(_DWORD *)(a3 + 64);
  }
  BOOL v36 = v15 != (void **)(v13 + 8 * v6);
  if (!sub_1CBF75724(v35) && !sub_1CBFA10B0((uint64_t)v35))
  {
    uint64_t v17 = *a1;
    sub_1CBF9BC38((_DWORD *)(*a1 + 48));
    sub_1CC6168A0((_DWORD *)(v17 + 24));
    return 1;
  }
  sub_1CBFA534C((uint64_t *)a3, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
  if (*(void *)(a2 + 32) != a2 + 24) {
    llvm::AnalysisManager<llvm::Function>::getCachedResultImpl();
  }
  return 0;
}

void llvm::ModuleToFunctionPassAdaptor::run()
{
}

void sub_1CC617AC0(_DWORD *a1)
{
  uint64_t v2 = a1[4];
  int v3 = a1[2];
  if (v2)
  {
    uint64_t v4 = 32 * v2;
    uint64_t v5 = (uint64_t *)(*(void *)a1 + 8);
    do
    {
      uint64_t v6 = *(v5 - 1);
      if (v6 != -4096 && v6 != -8192) {
        sub_1CBF5408C(v5);
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
  }
  if (v3)
  {
    int v7 = 1 << (33 - __clz(v3 - 1));
    if (v7 <= 64) {
      unsigned int v8 = 64;
    }
    else {
      unsigned int v8 = v7;
    }
    uint64_t v9 = *(void **)a1;
    if (v8 == a1[4])
    {
      *((void *)a1 + 1) = 0;
      uint64_t v10 = 32 * v8;
      do
      {
        *uint64_t v9 = -4096;
        v9 += 4;
        v10 -= 32;
      }
      while (v10);
      return;
    }
  }
  else
  {
    if (!a1[4])
    {
      *((void *)a1 + 1) = 0;
      return;
    }
    unsigned int v8 = 0;
  }
  MEMORY[0x1D25D9CD0]();

  sub_1CBC04C8C(a1, v8);
}

uint64_t *sub_1CC617BCC(uint64_t *a1, long long *a2)
{
  unint64_t v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    unint64_t v5 = v2 & 0xFFFFFFFFFFFFFFF8;
    a1 = *(uint64_t **)v5;
    int v3 = (uint64_t *)(*(void *)v5 + 8 * *(unsigned int *)(v5 + 8));
  }
  else
  {
    int v3 = &a1[v2 > 7];
  }
  long long v6 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  return sub_1CBFA5D08(a1, v3, (uint64_t)&v6);
}

atomic_ullong llvm::PassRegistry::getPassRegistry(llvm::PassRegistry *this)
{
  if (!atomic_load_explicit(qword_1EBCD8A58, memory_order_acquire)) {
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCD8A58, (void *(*)(void))sub_1CD5D6518, (void (*)(void *))sub_1CD5D65A0);
  }
  return qword_1EBCD8A58[0];
}

void llvm::PassRegistry::~PassRegistry(llvm::PassRegistry *this)
{
  unint64_t v2 = (void *)*((void *)this + 32);
  if (v2)
  {
    *((void *)this + 33) = v2;
    operator delete(v2);
  }
  int v3 = (void **)((char *)this + 232);
  sub_1CC618768(&v3);
  sub_1CC3724DC((uint64_t)this + 200);
  MEMORY[0x1D25D9CD0](*((void *)this + 22), 8);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 64));

  std::mutex::~mutex((std::mutex *)this);
}

uint64_t llvm::PassRegistry::getPassInfo(std::__shared_mutex_base *this, const void *a2)
{
  std::__shared_mutex_base::lock_shared(this);
  int v4 = *(_DWORD *)&this[1].__mut_.__m_.__opaque[16];
  if (!v4)
  {
LABEL_8:
    uint64_t v11 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)this[1].__mut_.__m_.__opaque;
  unsigned int v6 = v4 - 1;
  uint64_t v7 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v8 = *(const void **)(v5 + 16 * v7);
  if (v8 != a2)
  {
    int v9 = 1;
    while (v8 != (const void *)-4096)
    {
      int v10 = v7 + v9++;
      uint64_t v7 = v10 & v6;
      unsigned int v8 = *(const void **)(v5 + 16 * v7);
      if (v8 == a2) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v11 = *(void *)(v5 + 16 * v7 + 8);
LABEL_7:
  std::__shared_mutex_base::unlock_shared(this);
  return v11;
}

void llvm::PassRegistry::registerPass(uint64_t a1, void *a2, char a3)
{
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = a2[4];
  uint64_t v61 = v7;
  v62.i64[0] = (uint64_t)a2;
  int v8 = *(_DWORD *)(a1 + 192);
  if (!v8)
  {
    unint64_t v38 = 0;
LABEL_37:
    unint64_t v39 = sub_1CC5F7650((_DWORD *)(a1 + 176), (uint64_t)&v61, &v61, v38);
    void *v39 = v61;
    v39[1] = v62.i64[0];
    goto LABEL_11;
  }
  int v9 = v8 - 1;
  unsigned int v10 = ((v7 >> 4) ^ (v7 >> 9)) & v9;
  uint64_t v11 = (void *)(v6 + 16 * v10);
  uint64_t v12 = *v11;
  if (v7 != *v11)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = v11;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & v9;
      uint64_t v11 = (void *)(v6 + 16 * v10);
      uint64_t v12 = *v11;
      if (v7 == *v11) {
        goto LABEL_11;
      }
    }
    if (v13) {
      unint64_t v38 = v13;
    }
    else {
      unint64_t v38 = v11;
    }
    goto LABEL_37;
  }
LABEL_11:
  size_t v17 = a2[3];
  __src = (unsigned __int8 *)a2[2];
  unsigned int v18 = *(_DWORD *)(a1 + 208);
  if (!v18)
  {
    *(_DWORD *)(a1 + 212) = 0;
    *(_DWORD *)(a1 + 216) = 0;
    unint64_t v40 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v40) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unsigned char v40[16] = 2;
    *(void *)(a1 + 200) = v40;
    unsigned int v18 = 16;
    *(_DWORD *)(a1 + 208) = 16;
  }
  char v58 = a3;
  int v57 = (llvm::StringMapImpl *)(a1 + 200);
  int v19 = 0;
  if (v17)
  {
    size_t v20 = v17;
    unsigned int v21 = __src;
    do
    {
      int v22 = *v21++;
      int v19 = 33 * v19 + v22;
      --v20;
    }
    while (v20);
  }
  uint64_t v59 = a1;
  uint64_t v23 = *(void *)(a1 + 200);
  unsigned int v24 = v18 - 1;
  uint64_t v25 = v23 + 8 * v18 + 8;
  int v26 = -1;
  int v27 = 1;
  int v28 = v19;
  while (1)
  {
    uint64_t v29 = v28 & v24;
    unsigned int v30 = *(void **)(v23 + 8 * v29);
    if (!v30) {
      break;
    }
    if (v30 == (void *)-8)
    {
      if (v26 == -1) {
        int v26 = v28 & v24;
      }
    }
    else if (*(_DWORD *)(v25 + 4 * v29) == v19 {
           && v17 == *v30
    }
           && (!v17 || !memcmp(__src, (char *)v30 + *(unsigned int *)(v59 + 220), v17)))
    {
      goto LABEL_30;
    }
    int v28 = v27 + v29;
    ++v27;
  }
  uint64_t v31 = v26;
  if (v26 == -1)
  {
    uint64_t v31 = v29;
    uint64_t v29 = v29;
  }
  else
  {
    uint64_t v29 = v26;
  }
  *(_DWORD *)(v25 + 4 * v31) = v19;
  unsigned int v30 = *(void **)(v23 + 8 * v29);
LABEL_30:
  if (v30)
  {
    if (v30 != (void *)-8)
    {
      uint64_t v36 = v59;
      char v35 = v58;
      goto LABEL_48;
    }
    --*(_DWORD *)(v59 + 216);
  }
  int v32 = operator new(v17 + 17, (std::align_val_t)8uLL);
  BOOL v33 = v32;
  unsigned int v34 = (char *)(v32 + 2);
  char v35 = v58;
  if (v17) {
    memcpy(v32 + 2, __src, v17);
  }
  v34[v17] = 0;
  size_t *v33 = v17;
  v33[1] = 0;
  *(void *)(v23 + 8 * v29) = v33;
  uint64_t v36 = v59;
  ++*(_DWORD *)(v59 + 212);
  for (uint64_t i = (void **)(*(void *)(v59 + 200) + 8 * llvm::StringMapImpl::RehashTable(v57, v29)); ; ++i)
  {
    unsigned int v30 = *i;
    if (*i && v30 + 1 != 0) {
      break;
    }
  }
LABEL_48:
  v30[1] = a2;
  uint64_t v42 = *(uint64_t **)(v36 + 256);
  unint64_t v43 = *(uint64_t **)(v36 + 264);
  while (v42 != v43)
  {
    uint64_t v44 = *v42++;
    (*(void (**)(uint64_t, void *))(*(void *)v44 + 16))(v44, a2);
  }
  if (v35)
  {
    unint64_t v45 = *(void *)(v36 + 248);
    BOOL v46 = *(void **)(v36 + 240);
    if ((unint64_t)v46 >= v45)
    {
      int64_t v48 = *(void **)(v36 + 232);
      uint64_t v49 = v46 - v48;
      unint64_t v50 = v49 + 1;
      if ((unint64_t)(v49 + 1) >> 61) {
        abort();
      }
      if ((uint64_t)(v45 - (void)v48) >> 2 > v50) {
        unint64_t v50 = (uint64_t)(v45 - (void)v48) >> 2;
      }
      if (v45 - (unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v51 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      uint64_t v64 = v36 + 248;
      if (v51)
      {
        if (v51 >> 61) {
          sub_1CB833614();
        }
        int v52 = (char *)operator new(8 * v51);
      }
      else
      {
        int v52 = 0;
      }
      uint64_t v53 = &v52[8 * v49];
      *(void *)uint64_t v53 = a2;
      uint64_t v54 = &v52[8 * v51];
      v62.i64[1] = (uint64_t)(v53 + 8);
      BOOL v63 = v54;
      if (v46 == v48)
      {
        int64x2_t v56 = vdupq_n_s64((unint64_t)v46);
        int v47 = v53 + 8;
      }
      else
      {
        do
        {
          uint64_t v55 = *--v46;
          void *v46 = 0;
          *((void *)v53 - 1) = v55;
          v53 -= 8;
        }
        while (v46 != v48);
        int64x2_t v56 = *(int64x2_t *)(v36 + 232);
        int v47 = (void *)v62.i64[1];
        uint64_t v54 = v63;
        unint64_t v45 = *(void *)(v36 + 248);
      }
      *(void *)(v36 + 232) = v53;
      *(void *)(v36 + 240) = v47;
      int64x2_t v62 = v56;
      *(void *)(v36 + 248) = v54;
      BOOL v63 = (char *)v45;
      uint64_t v61 = v56.i64[0];
      sub_1CC618844((uint64_t)&v61);
    }
    else
    {
      void *v46 = a2;
      int v47 = v46 + 1;
    }
    *(void *)(v36 + 240) = v47;
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)v36);
}

void llvm::PassRegistry::enumerateWith(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  uint64_t v4 = *(void *)(a1 + 176);
  uint64_t v5 = *(unsigned int *)(a1 + 192);
  uint64_t v6 = (void *)(v4 + 16 * v5);
  if (*(_DWORD *)(a1 + 184))
  {
    if (v5)
    {
      uint64_t v7 = 16 * v5;
      int v8 = *(void **)(a1 + 176);
      while (*v8 == -4096 || *v8 == -8192)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7) {
          goto LABEL_18;
        }
      }
    }
    else
    {
      int v8 = *(void **)(a1 + 176);
    }
  }
  else
  {
LABEL_18:
    int v8 = (void *)(v4 + 16 * v5);
  }
  int v9 = (void *)(v4 + 16 * v5);
LABEL_9:
  while (v8 != v9)
  {
    (*(void (**)(uint64_t, void))(*(void *)a2 + 24))(a2, v8[1]);
    unsigned int v10 = v8 + 2;
    int v8 = v6;
    if (v10 != v6)
    {
      int v8 = v10;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        if (v8 == v6)
        {
          int v8 = v6;
          goto LABEL_9;
        }
      }
    }
  }

  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
}

void llvm::PassRegistry::registerAnalysisGroup(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  int v12 = *(_DWORD *)(a1 + 192);
  if (!v12)
  {
LABEL_10:
    std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
    goto LABEL_11;
  }
  uint64_t v13 = *(void *)(a1 + 176);
  unsigned int v14 = v12 - 1;
  uint64_t v15 = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v16 = *(void *)(v13 + 16 * v15);
  if (v16 != a2)
  {
    int v17 = 1;
    while (v16 != -4096)
    {
      int v18 = v15 + v17++;
      uint64_t v15 = v18 & v14;
      uint64_t v16 = *(void *)(v13 + 16 * v15);
      if (v16 == a2) {
        goto LABEL_6;
      }
    }
    goto LABEL_10;
  }
LABEL_6:
  int v19 = *(void **)(v13 + 16 * v15 + 8);
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  if (v19)
  {
    if (a3) {
      goto LABEL_12;
    }
LABEL_8:
    if (!a6) {
      return;
    }
    goto LABEL_38;
  }
LABEL_11:
  llvm::PassRegistry::registerPass(a1, a4, 0);
  int v19 = a4;
  if (!a3) {
    goto LABEL_8;
  }
LABEL_12:
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  int v20 = *(_DWORD *)(a1 + 192);
  if (v20)
  {
    uint64_t v21 = *(void *)(a1 + 176);
    unsigned int v22 = v20 - 1;
    uint64_t v23 = (v20 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v24 = *(void *)(v21 + 16 * v23);
    if (v24 == a3)
    {
LABEL_17:
      int v27 = *(void **)(v21 + 16 * v23 + 8);
      goto LABEL_18;
    }
    int v25 = 1;
    while (v24 != -4096)
    {
      int v26 = v23 + v25++;
      uint64_t v23 = v26 & v22;
      uint64_t v24 = *(void *)(v21 + 16 * v23);
      if (v24 == a3) {
        goto LABEL_17;
      }
    }
  }
  int v27 = 0;
LABEL_18:
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)a1);
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  uint64_t v29 = (void *)v27[7];
  unint64_t v28 = v27[8];
  if ((unint64_t)v29 >= v28)
  {
    uint64_t v31 = (void *)v27[6];
    uint64_t v32 = v29 - v31;
    unint64_t v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 61) {
      goto LABEL_58;
    }
    uint64_t v34 = v28 - (void)v31;
    if (v34 >> 2 > v33) {
      unint64_t v33 = v34 >> 2;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      if (v35 >> 61) {
        goto LABEL_59;
      }
      uint64_t v36 = (char *)operator new(8 * v35);
    }
    else
    {
      uint64_t v36 = 0;
    }
    char v37 = &v36[8 * v32];
    *(void *)char v37 = v19;
    unsigned int v30 = v37 + 8;
    if (v29 != v31)
    {
      do
      {
        uint64_t v38 = *--v29;
        *((void *)v37 - 1) = v38;
        v37 -= 8;
      }
      while (v29 != v31);
      uint64_t v29 = (void *)v27[6];
    }
    v27[6] = v37;
    v27[7] = v30;
    v27[8] = &v36[8 * v35];
    if (v29) {
      operator delete(v29);
    }
  }
  else
  {
    *uint64_t v29 = v19;
    unsigned int v30 = v29 + 1;
  }
  v27[7] = v30;
  if (a5) {
    v19[9] = v27[9];
  }
  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
  if (a6)
  {
LABEL_38:
    unint64_t v39 = *(void *)(a1 + 248);
    unint64_t v40 = *(void **)(a1 + 240);
    if ((unint64_t)v40 < v39)
    {
      void *v40 = a4;
      uint64_t v41 = v40 + 1;
LABEL_55:
      *(void *)(a1 + 240) = v41;
      return;
    }
    uint64_t v42 = *(void **)(a1 + 232);
    uint64_t v43 = v40 - v42;
    unint64_t v44 = v43 + 1;
    if (!((unint64_t)(v43 + 1) >> 61))
    {
      if ((uint64_t)(v39 - (void)v42) >> 2 > v44) {
        unint64_t v44 = (uint64_t)(v39 - (void)v42) >> 2;
      }
      if (v39 - (unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v45 = v44;
      }
      uint64_t v54 = a1 + 248;
      if (!v45)
      {
        BOOL v46 = 0;
        goto LABEL_50;
      }
      if (!(v45 >> 61))
      {
        BOOL v46 = (char *)operator new(8 * v45);
LABEL_50:
        int v47 = &v46[8 * v43];
        *(void *)int v47 = a4;
        int64_t v48 = &v46[8 * v45];
        v52.i64[1] = (uint64_t)(v47 + 8);
        uint64_t v53 = v48;
        if (v40 == v42)
        {
          int64x2_t v50 = vdupq_n_s64((unint64_t)v40);
          uint64_t v41 = v47 + 8;
        }
        else
        {
          do
          {
            uint64_t v49 = *--v40;
            void *v40 = 0;
            *((void *)v47 - 1) = v49;
            v47 -= 8;
          }
          while (v40 != v42);
          int64x2_t v50 = *(int64x2_t *)(a1 + 232);
          uint64_t v41 = (void *)v52.i64[1];
          int64_t v48 = v53;
          unint64_t v39 = *(void *)(a1 + 248);
        }
        *(void *)(a1 + 232) = v47;
        *(void *)(a1 + 240) = v41;
        int64x2_t v52 = v50;
        *(void *)(a1 + 248) = v48;
        uint64_t v53 = (char *)v39;
        uint64_t v51 = v50.i64[0];
        sub_1CC618844((uint64_t)&v51);
        goto LABEL_55;
      }
LABEL_59:
      sub_1CB833614();
    }
LABEL_58:
    abort();
  }
}

void llvm::PassRegistry::addRegistrationListener(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  uint64_t v5 = *(void **)(a1 + 264);
  unint64_t v4 = *(void *)(a1 + 272);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(void **)(a1 + 256);
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      int v12 = (char *)operator new(8 * v11);
    }
    else
    {
      int v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = a2;
    uint64_t v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = *(void **)(a1 + 256);
    }
    *(void *)(a1 + 256) = v13;
    *(void *)(a1 + 264) = v6;
    *(void *)(a1 + 272) = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 264) = v6;

  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
}

void llvm::PassRegistry::removeRegistrationListener(uint64_t a1, uint64_t a2)
{
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  uint64_t v5 = *(char **)(a1 + 256);
  unint64_t v4 = *(char **)(a1 + 264);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 264);
        break;
      }
    }
  }
  int64_t v6 = v4 - (v5 + 8);
  if (v4 != v5 + 8) {
    memmove(v5, v5 + 8, v4 - (v5 + 8));
  }
  *(void *)(a1 + 264) = &v5[v6];

  std::__shared_mutex_base::unlock((std::__shared_mutex_base *)a1);
}

void sub_1CC618768(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *unint64_t v4 = 0;
        if (v7) {
          sub_1CC6187F0(v6);
        }
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC6187F0(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC618844(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      sub_1CC6187F0(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::getPassTimer(llvm *this, llvm::Pass *a2)
{
  uint64_t v3 = (llvm::StringMapImpl *)qword_1EBD06A28;
  if (llvm::TimePassesIsEnabled) {
    BOOL v4 = qword_1EBD06A28 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (!atomic_load_explicit(qword_1EBCD8A70, memory_order_acquire)) {
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCD8A70, (void *(*)(void))sub_1CC61907C, (void (*)(void *))sub_1CC6190EC);
    }
    uint64_t v3 = (llvm::StringMapImpl *)qword_1EBCD8A70[0];
    qword_1EBD06A28 = qword_1EBCD8A70[0];
  }
  if (v3)
  {
    uint64_t v53 = this;
    if (!(*(uint64_t (**)(llvm *, llvm::Pass *))(*(void *)this + 112))(this, a2))
    {
      if (llvm::TimePassesIsEnabled) {
        BOOL v7 = qword_1EBD06A28 == 0;
      }
      else {
        BOOL v7 = 0;
      }
      if (v7)
      {
        if (!atomic_load_explicit(qword_1EBCD8A70, memory_order_acquire)) {
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EBCD8A70, (void *(*)(void))sub_1CC61907C, (void (*)(void *))sub_1CC6190EC);
        }
        qword_1EBD06A28 = qword_1EBCD8A70[0];
      }
      if (!atomic_load_explicit(&qword_1EBCD8A88, memory_order_acquire)) {
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EBCD8A88, (void *(*)(void))sub_1CD5D7578, (void (*)(void *))sub_1CD5D75BC);
      }
      uint64_t v8 = (std::recursive_mutex *)qword_1EBCD8A88;
      std::recursive_mutex::lock((std::recursive_mutex *)qword_1EBCD8A88);
      uint64_t v5 = sub_1CD5D75FC((uint64_t)v3 + 32, (uint64_t *)&v53)[1];
      if (v5)
      {
        std::recursive_mutex::unlock(v8);
        return v5;
      }
      unint64_t v9 = (llvm::PassRegistry *)(*(uint64_t (**)(llvm *))(*(void *)this + 16))(this);
      size_t v11 = v10;
      int v12 = (const void *)*((void *)this + 2);
      atomic_ullong PassRegistry = (std::__shared_mutex_base *)llvm::PassRegistry::getPassRegistry(v9);
      uint64_t PassInfo = llvm::PassRegistry::getPassInfo(PassRegistry, v12);
      if (PassInfo)
      {
        uint64_t v16 = *(llvm::PassRegistry **)(PassInfo + 16);
        size_t v15 = *(void *)(PassInfo + 24);
      }
      else
      {
        size_t v15 = 0;
        uint64_t v16 = 0;
      }
      if (v15) {
        int v17 = v16;
      }
      else {
        int v17 = v9;
      }
      if (v15) {
        size_t v18 = v15;
      }
      else {
        size_t v18 = v11;
      }
      v61[0] = v9;
      v61[1] = v11;
      unsigned int v19 = *((_DWORD *)v3 + 2);
      __s1 = v17;
      __uint64_t n = v18;
      __leuint64_t n = v11;
      uint64_t v49 = v9;
      if (!v19)
      {
        *((_DWORD *)v3 + 3) = 0;
        *((_DWORD *)v3 + 4) = 0;
        unint64_t v39 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v39) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        unsigned char v39[16] = 2;
        *(void *)uint64_t v3 = v39;
        unsigned int v19 = 16;
        *((_DWORD *)v3 + 2) = 16;
        size_t v18 = __n;
      }
      int v20 = 0;
      if (v18)
      {
        uint64_t v21 = __s1;
        do
        {
          int v22 = *(unsigned __int8 *)v21;
          uint64_t v21 = (llvm::PassRegistry *)((char *)v21 + 1);
          int v20 = 33 * v20 + v22;
          --v18;
        }
        while (v18);
      }
      uint64_t v23 = *(void *)v3;
      unsigned int v24 = v19 - 1;
      uint64_t v25 = *(void *)v3 + 8 * v19 + 8;
      int v50 = -1;
      int v26 = 1;
      int v27 = v20;
      size_t v28 = __n;
      while (1)
      {
        uint64_t v29 = v27 & v24;
        uint64_t v30 = *(void *)(v23 + 8 * v29);
        if (!v30) {
          break;
        }
        if (v30 == -8)
        {
          if (v50 == -1) {
            int v32 = v27 & v24;
          }
          else {
            int v32 = v50;
          }
          int v50 = v32;
        }
        else if (*(_DWORD *)(v25 + 4 * v29) == v20 && v28 == *(void *)v30)
        {
          if (!v28) {
            goto LABEL_54;
          }
          int v31 = memcmp(__s1, (const void *)(v30 + *((unsigned int *)v3 + 5)), v28);
          size_t v28 = __n;
          if (!v31) {
            goto LABEL_54;
          }
        }
        int v27 = v26 + v29;
        ++v26;
      }
      uint64_t v33 = v50;
      if (v50 == -1)
      {
        uint64_t v33 = v29;
        uint64_t v29 = v29;
      }
      else
      {
        uint64_t v29 = v50;
      }
      *(_DWORD *)(v25 + 4 * v33) = v20;
      uint64_t v30 = *(void *)(v23 + 8 * v29);
LABEL_54:
      if (v30)
      {
        if (v30 != -8) {
          goto LABEL_67;
        }
        --*((_DWORD *)v3 + 4);
        size_t v28 = __n;
      }
      uint64_t v34 = (char *)operator new(v28 + 17, (std::align_val_t)8uLL);
      size_t v35 = __n;
      uint64_t v36 = v34;
      char v37 = v34 + 16;
      if (__n)
      {
        memcpy(v34 + 16, __s1, __n);
        size_t v35 = __n;
      }
      v37[v35] = 0;
      *(void *)uint64_t v36 = v35;
      *((_DWORD *)v36 + 2) = 0;
      *(void *)(v23 + 8 * v29) = v36;
      ++*((_DWORD *)v3 + 3);
      for (uint64_t i = (uint64_t *)(*(void *)v3 + 8 * llvm::StringMapImpl::RehashTable(v3, v29)); ; ++i)
      {
        uint64_t v30 = *i;
        if (*i && v30 != -8) {
          break;
        }
      }
LABEL_67:
      int v42 = *(_DWORD *)(v30 + 8);
      uint64_t v41 = (_DWORD *)(v30 + 8);
      _DWORD *v41 = v42 + 1;
      if ((v42 + 1) > 1)
      {
        v54[0] = "{0} #{1}";
        v54[1] = 8;
        v54[2] = v57;
        v54[3] = 2;
        v55[0] = &unk_1F2617F90;
        v55[1] = v61;
        v56[0] = &unk_1F2617FC0;
        v56[1] = v41;
        v57[0] = v55;
        v57[1] = v56;
        sub_1CD465B2C((uint64_t)v54, &__dst);
        goto LABEL_80;
      }
      uint64_t v43 = v49;
      if (!v49)
      {
        __dst = 0;
        size_t v59 = 0;
        unint64_t v60 = 0;
        goto LABEL_80;
      }
      size_t v44 = __len;
      if (__len >= 0x7FFFFFFFFFFFFFF8) {
        abort();
      }
      if (__len >= 0x17)
      {
        uint64_t v46 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((__len | 7) != 0x17) {
          uint64_t v46 = __len | 7;
        }
        uint64_t v47 = v46 + 1;
        p_dst = operator new(v46 + 1);
        size_t v44 = __len;
        uint64_t v43 = v49;
        size_t v59 = __len;
        unint64_t v60 = v47 | 0x8000000000000000;
        __dst = p_dst;
      }
      else
      {
        HIBYTE(v60) = __len;
        p_dst = &__dst;
        if (!__len) {
          goto LABEL_79;
        }
      }
      memmove(p_dst, v43, v44);
LABEL_79:
      *((unsigned char *)p_dst + v44) = 0;
LABEL_80:
      operator new();
    }
  }
  return 0;
}

void llvm::reportAndResetTimings(llvm *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = qword_1EBD06A28;
  if (qword_1EBD06A28)
  {
    if (!this) {
      llvm::CreateInfoOutputFile(0);
    }
    llvm::TimerGroup::print((llvm::TimerGroup *)(v2 + 56), this, 1);
  }
}

void llvm::enableTimePasses(llvm *this)
{
  llvm::TimePassesIsEnabled = 1;
}

double llvm::TimePassesHandler::TimePassesHandler(llvm::TimePassesHandler *this, char a2, char a3)
{
  uint64_t v5 = llvm::TimerGroup::TimerGroup((uint64_t)this, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0x3800000000;
  *(void *)(v5 + 128) = v5 + 144;
  *(void *)&double result = 0x800000000;
  *(void *)(v5 + 136) = 0x800000000;
  *(void *)(v5 + 208) = 0;
  *(unsigned char *)(v5 + 216) = a2;
  *(unsigned char *)(v5 + 217) = a3;
  return result;
}

{
  uint64_t v5;
  double result;

  uint64_t v5 = llvm::TimerGroup::TimerGroup((uint64_t)this, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  *(void *)(v5 + 96) = 0;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0x3800000000;
  *(void *)(v5 + 128) = v5 + 144;
  *(void *)&double result = 0x800000000;
  *(void *)(v5 + 136) = 0x800000000;
  *(void *)(v5 + 208) = 0;
  *(unsigned char *)(v5 + 216) = a2;
  *(unsigned char *)(v5 + 217) = a3;
  return result;
}

double llvm::TimePassesHandler::TimePassesHandler(llvm::TimePassesHandler *this)
{
  char v1 = llvm::TimePassesIsEnabled;
  char v2 = llvm::TimePassesPerRun;
  uint64_t v3 = llvm::TimerGroup::TimerGroup((uint64_t)this, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0x3800000000;
  *(void *)(v3 + 128) = v3 + 144;
  *(void *)&double result = 0x800000000;
  *(void *)(v3 + 136) = 0x800000000;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = v1;
  *(unsigned char *)(v3 + 217) = v2;
  return result;
}

{
  char v1;
  char v2;
  uint64_t v3;
  double result;

  char v1 = llvm::TimePassesIsEnabled;
  char v2 = llvm::TimePassesPerRun;
  uint64_t v3 = llvm::TimerGroup::TimerGroup((uint64_t)this, "pass", 4uLL, "... Pass execution timing report ...", 0x24uLL);
  *(void *)(v3 + 96) = 0;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0x3800000000;
  *(void *)(v3 + 128) = v3 + 144;
  *(void *)&double result = 0x800000000;
  *(void *)(v3 + 136) = 0x800000000;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = v1;
  *(unsigned char *)(v3 + 217) = v2;
  return result;
}

uint64_t llvm::TimePassesHandler::setOutStream(uint64_t result, uint64_t a2)
{
  *(void *)(result + 208) = a2;
  return result;
}

llvm::Timer *llvm::TimePassesHandler::stopTimer(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 136);
  double result = *(llvm::Timer **)(*(void *)(a1 + 128) + 8 * v2 - 8);
  *(_DWORD *)(a1 + 136) = v2 - 1;
  if (*((unsigned char *)result + 128)) {
    return (llvm::Timer *)llvm::Timer::stopTimer(result);
  }
  return result;
}

void sub_1CC61907C()
{
}

uint64_t sub_1CC6190EC(uint64_t result)
{
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = (unsigned int *)(result + 32);
    sub_1CD5D7368((unsigned int *)(result + 32));
    llvm::TimerGroup::~TimerGroup((llvm::TimerGroup *)(v2 + 56));
    sub_1CD5D7500(v3);
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 32), 8);
    sub_1CC3724DC(v2);
    JUMPOUT(0x1D25D9CE0);
  }
  return result;
}

void sub_1CC619168()
{
}

void *sub_1CC61917C()
{
  double result = operator new(0x10uLL);
  *double result = &unk_1F2617F48;
  return result;
}

void sub_1CC6191B4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F2617F48;
}

void sub_1CC6191DC()
{
  llvm::TimePassesIsEnabled = 1;
}

uint64_t sub_1CC6191EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1CC619284(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  sub_1CC6191EC((uint64_t)v2, a1);
  sub_1CC619354(qword_1EBCD8C00, (uint64_t)v2);
  uint64_t result = (uint64_t)v3;
  if (v3 == v2) {
    return (*(uint64_t (**)(void *))(v2[0] + 32))(v2);
  }
  if (v3) {
    return (*(uint64_t (**)(void))(*v3 + 40))();
  }
  return result;
}

void *sub_1CC619354(void *a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  sub_1CC6191EC((uint64_t)v4, a2);
  sub_1CC619424(v4, a1);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  return a1;
}

void *sub_1CC619424(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void *sub_1CC61968C(void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60) {
      abort();
    }
    size_t v6 = 16 * a3;
    BOOL v7 = (char *)operator new(16 * a3);
    *a1 = v7;
    a1[1] = v7;
    uint64_t v8 = &v7[16 * a3];
    a1[2] = v8;
    memmove(v7, a2, v6);
    a1[1] = v8;
  }
  return a1;
}

long long *sub_1CC619700(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      *(void *)(a3 + 24) = 0;
      uint64_t v6 = *((void *)v4 + 3);
      *(void *)(a3 + 24) = v6;
      if (*((void *)v4 + 3) >= 8uLL)
      {
        if ((v6 & 2) != 0 && (v6 & 4) != 0)
        {
          (*(void (**)(uint64_t, long long *))((v6 & 0xFFFFFFFFFFFFFFF8) + 8))(a3, v4);
        }
        else
        {
          long long v7 = *v4;
          *(void *)(a3 + 16) = *((void *)v4 + 2);
          *(_OWORD *)a3 = v7;
        }
        *((void *)v4 + 3) = 0;
      }
      v4 += 2;
      a3 += 32;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1CC6197A0(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  v5.n128_f64[0] = llvm::TimePassesHandler::runBeforePass(*a1, a2, a3);
  if (v4)
  {
    uint64_t v6 = *(void (**)(uint64_t, __n128))(*(void *)v4 + 8);
    v6(v4, v5);
  }
}

void sub_1CC619810(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  llvm::TimePassesHandler::runAfterPass(*a1, a2, a3);
  if (v4)
  {
    __n128 v5 = *(void (**)(uint64_t))(*(void *)v4 + 8);
    v5(v4);
  }
}

void sub_1CC619880(uint64_t *a1, char *a2, size_t a3)
{
}

void sub_1CC619888(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  v5.n128_f64[0] = llvm::TimePassesHandler::runBeforePass(*a1, a2, a3);
  if (v4)
  {
    uint64_t v6 = *(void (**)(uint64_t, __n128))(*(void *)v4 + 8);
    v6(v4, v5);
  }
}

void sub_1CC6198F8(uint64_t *a1, char *a2, size_t a3, uint64_t *a4)
{
  uint64_t v4 = *a4;
  *a4 = 0;
  llvm::TimePassesHandler::runAfterPass(*a1, a2, a3);
  if (v4)
  {
    __n128 v5 = *(void (**)(uint64_t))(*(void *)v4 + 8);
    v5(v4);
  }
}

uint64_t sub_1CC619968()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v1 = &llvm::TimePassesIsEnabled;
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Time each pass, printing elapsed time for each on exit";
  v4.n128_u64[1] = 54;
  sub_1CD5D78CC((unsigned char **)&v1, &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCD8AA0, &dword_1CB82C000);
  int v2 = 1;
  *(void *)&long long v1 = "Time each pass run, printing elapsed time for each run on exit";
  *((void *)&v1 + 1) = 62;
  __n128 v5 = &v4;
  uint64_t v3 = &llvm::TimePassesPerRun;
  v4.n128_u64[0] = (unint64_t)&unk_1F2617F48;
  sub_1CD5D7A38(&v3, &v2, &v1, (uint64_t)&v4);
  if (v5 == &v4)
  {
    (*(void (**)(__n128 *))(v4.n128_u64[0] + 32))(&v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(v5->n128_u64[0] + 40))();
  }
  return __cxa_atexit((void (*)(void *))sub_1CC086C1C, &qword_1EBCD8B60, &dword_1CB82C000);
}

BOOL llvm::shouldPrintBeforePass(void *a1, size_t a2)
{
  return byte_1EBD06C60
      || sub_1CC619B20(a1, a2, qword_1EBD06AB0, 0xAAAAAAAAAAAAAAABLL * ((unk_1EBD06AB8 - qword_1EBD06AB0) >> 3));
}

BOOL sub_1CC619B20(void *__s2, size_t __n, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v8 = 24 * a4;
    uint64_t v9 = a3;
    while (1)
    {
      char v10 = *(unsigned char *)(v9 + 23);
      BOOL v11 = v10 < 0;
      int v12 = v10 >= 0 ? (const void *)v9 : *(const void **)v9;
      uint64_t v13 = v10 & 0x7F;
      if (v11) {
        uint64_t v13 = *(void *)(v9 + 8);
      }
      if (v13 == __n && (!__n || !memcmp(v12, __s2, __n))) {
        break;
      }
      v9 += 24;
      v8 -= 24;
      if (!v8)
      {
        uint64_t v9 = a3 + 24 * a4;
        return 0xAAAAAAAAAAAAAAABLL * ((v9 - a3) >> 3) != a4;
      }
    }
  }
  else
  {
    uint64_t v9 = a3;
  }
  return 0xAAAAAAAAAAAAAAABLL * ((v9 - a3) >> 3) != a4;
}

BOOL llvm::shouldPrintAfterPass(void *a1, size_t a2)
{
  return byte_1EBD06D20
      || sub_1CC619B20(a1, a2, qword_1EBD06B88, 0xAAAAAAAAAAAAAAABLL * ((unk_1EBD06B90 - qword_1EBD06B88) >> 3));
}

uint64_t *sub_1CC619C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v5 = (unsigned char *)a2;
  char v7 = *(unsigned char *)(a2 + 23);
  BOOL v8 = v7 < 0;
  unint64_t v9 = *(void *)(a2 + 8);
  if (v7 < 0) {
    a2 = *(void *)a2;
  }
  unint64_t v10 = v7 & 0x7F;
  if (v8) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = v10;
  }
  unint64_t v12 = sub_1CBF4D6C0((uint64_t)v37, (uint64_t *)a2, v11);
  unint64_t v13 = v12;
  unint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    uint8x8_t v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    unint64_t v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      unint64_t v3 = v12;
      if (v12 >= v14) {
        unint64_t v3 = v12 % v14;
      }
    }
    else
    {
      unint64_t v3 = (v14 - 1) & v12;
    }
    int v17 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v17)
    {
      size_t v18 = *v17;
      if (*v17)
      {
        char v19 = v5[23];
        int v20 = v19;
        uint64_t v21 = v19 & 0x7F;
        if (v20 >= 0) {
          uint64_t v22 = v21;
        }
        else {
          uint64_t v22 = *((void *)v5 + 1);
        }
        if (v20 < 0) {
          __n128 v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v23 = v18[1];
          if (v23 == v13)
          {
            char v24 = *((unsigned char *)v18 + 39);
            uint64_t v25 = v24 & 0x7F;
            if (v24 >= 0) {
              uint64_t v26 = v24 & 0x7F;
            }
            else {
              uint64_t v26 = v18[3];
            }
            if (v26 == v22)
            {
              if ((*((unsigned char *)v18 + 39) & 0x80) != 0)
              {
                if (!memcmp((const void *)v18[2], v5, v18[3])) {
                  return v18;
                }
              }
              else
              {
                if ((v24 & 0x7F) == 0) {
                  return v18;
                }
                uint64_t v27 = 0;
                while (*((unsigned __int8 *)v18 + v27 + 16) == v5[v27])
                {
                  if (v25 == ++v27) {
                    return v18;
                  }
                }
              }
            }
          }
          else
          {
            if (v16 > 1)
            {
              if (v23 >= v14) {
                v23 %= v14;
              }
            }
            else
            {
              v23 &= v14 - 1;
            }
            if (v23 != v3) {
              break;
            }
          }
          size_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
  sub_1CD5D8444(a1, v13, a3, (uint64_t)v37);
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v14 || (float)(v30 * (float)v14) < v29)
  {
    BOOL v31 = 1;
    if (v14 >= 3) {
      BOOL v31 = (v14 & (v14 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v14);
    unint64_t v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33) {
      size_t v34 = v33;
    }
    else {
      size_t v34 = v32;
    }
    sub_1CC619EF0(a1, v34);
    unint64_t v14 = *(void *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14) {
        unint64_t v3 = v13 % v14;
      }
      else {
        unint64_t v3 = v13;
      }
    }
    else
    {
      unint64_t v3 = (v14 - 1) & v13;
    }
  }
  size_t v35 = *(void **)(*(void *)a1 + 8 * v3);
  if (v35)
  {
    *(void *)v37[0] = *v35;
    *size_t v35 = v37[0];
  }
  else
  {
    *(void *)v37[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v37[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v37[0])
    {
      unint64_t v36 = *(void *)(*(void *)v37[0] + 8);
      if ((v14 & (v14 - 1)) != 0)
      {
        if (v36 >= v14) {
          v36 %= v14;
        }
      }
      else
      {
        v36 &= v14 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v36) = v37[0];
    }
  }
  size_t v18 = (uint64_t *)v37[0];
  ++*(void *)(a1 + 24);
  return v18;
}

void sub_1CC619EF0(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_17;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_17:
      sub_1CD5D84B4(a1, prime);
    }
  }
}

unsigned __int8 *sub_1CC619FE0(void *a1, uint64_t a2)
{
  int v2 = (unsigned __int8 *)a2;
  char v4 = *(unsigned char *)(a2 + 23);
  BOOL v5 = v4 < 0;
  unint64_t v6 = *(void *)(a2 + 8);
  if (v4 < 0) {
    a2 = *(void *)a2;
  }
  unint64_t v7 = v4 & 0x7F;
  if (v5) {
    unint64_t v8 = v6;
  }
  else {
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_1CBF4D6C0((uint64_t)&v19, (uint64_t *)a2, v8);
  int8x8_t v10 = (int8x8_t)a1[1];
  if (!*(void *)&v10) {
    return 0;
  }
  unint64_t v12 = v9;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v10);
  v13.i16[0] = vaddlv_u8(v13);
  unint64_t v14 = v13.u32[0];
  if (v13.u32[0] <= 1uLL) {
    uint64_t v15 = (*(void *)&v10 - 1) & v9;
  }
  else {
    uint64_t v15 = v9 < *(void *)&v10 ? v9 : v9 % *(void *)&v10;
  }
  unint64_t v16 = *(unsigned __int8 ***)(*a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = *v16;
  if (!*v16) {
    return 0;
  }
  while (1)
  {
    unint64_t v18 = *((void *)v17 + 1);
    if (v12 == v18) {
      break;
    }
    if (v14 <= 1)
    {
      v18 &= *(void *)&v10 - 1;
    }
    else if (v18 >= *(void *)&v10)
    {
      v18 %= *(void *)&v10;
    }
    if (v18 != v15) {
      return 0;
    }
LABEL_18:
    uint64_t result = 0;
    int v17 = *(unsigned __int8 **)v17;
    if (!v17) {
      return result;
    }
  }
  if (!sub_1CBAD746C(v17 + 16, v2)) {
    goto LABEL_18;
  }
  return v17;
}

uint64_t sub_1CC61A100()
{
  v4.n128_u64[0] = (unint64_t)"Print IR before specified passes";
  v4.n128_u64[1] = 32;
  int v2 = 1;
  v3.n128_u32[0] = 1;
  sub_1CD5D80BC((long long *)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EBD06A30, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Print IR after specified passes";
  v4.n128_u64[1] = 31;
  int v2 = 1;
  v3.n128_u32[0] = 1;
  sub_1CD5D81C4((long long *)&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EBD06B08, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Print IR before each pass";
  v4.n128_u64[1] = 25;
  LOBYTE(v1) = 0;
  v3.n128_u64[0] = (unint64_t)&v1;
  int v2 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBD06BE0, "print-before-all", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD06BE0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Print IR after each pass";
  v4.n128_u64[1] = 24;
  LOBYTE(v1) = 0;
  v3.n128_u64[0] = (unint64_t)&v1;
  int v2 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBD06CA0, "print-after-all", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD06CA0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"When printing IR for print-[before|after]{-all} always print a module IR";
  v4.n128_u64[1] = 72;
  LOBYTE(v1) = 0;
  v3.n128_u64[0] = (unint64_t)&v1;
  int v2 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBD06D60, "print-module-scope", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBD06D60, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"function names";
  v4.n128_u64[1] = 14;
  v3.n128_u64[0] = (unint64_t)"Only print IR for functions whose name match this for all print-[before|after][-all] options";
  v3.n128_u64[1] = 92;
  int v1 = 1;
  int v2 = 1;
  sub_1CD5D82CC((long long *)&v4, &v3, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CD510A20, &qword_1EBCD8C50, &dword_1CB82C000);
}

void sub_1CC61A310(void *a1, uint64_t a2, uint64_t a3)
{
  v38[4] = *MEMORY[0x1E4F143B8];
  *a1 = a3;
  if (*(void *)(a2 + 80) != a2 + 72) {
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::isReachableFromEntry();
  }
  uint64_t v29 = a2;
  char v24 = 0;
  uint64_t v25 = 0;
  unint64_t v23 = 0;
  sub_1CBF8C36C(&v23, (uint64_t)&v29);
  BOOL v5 = v23;
  __n128 v4 = v24;
  if (v24 != v23)
  {
    int64x2_t v22 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      uint64_t v6 = *((void *)v4 - 1);
      v4 -= 8;
      uint64_t v7 = *(void *)(v6 + 40);
      if (v7 != v6 + 40)
      {
        uint64_t v8 = v7 - 24;
        if (!v7) {
          uint64_t v8 = 0;
        }
        unsigned int v9 = *(unsigned __int8 *)(v8 + 16) - 40;
        if (v9 < 0xFFFFFFF5) {
          uint64_t v8 = 0;
        }
        if (v7)
        {
          if (*(unsigned char *)(v8 + 16) == 30 && v9 >= 0xFFFFFFF5)
          {
            int v11 = *(_DWORD *)(v8 + 20);
            if ((v11 & 0x7FFFFFF) == 3)
            {
              uint64_t v12 = v8 - 96;
              uint64_t v13 = *(void *)(v8 - 96);
              unsigned int v14 = *(unsigned __int8 *)(v13 + 16);
              if (v14 <= 0x14 && v14 == 16 && *(void *)(v8 - 32) != *(void *)(v8 - 64))
              {
                unint64_t v16 = (void *)(v13 + 24);
                if (*(_DWORD *)(v13 + 32) >= 0x41u) {
                  unint64_t v16 = (void *)*v16;
                }
                if ((v11 & 0x40000000) != 0) {
                  uint64_t v12 = *(void *)(v8 - 8);
                }
                uint64_t v17 = 64;
                if (*v16) {
                  uint64_t v17 = 32;
                }
                unint64_t v18 = (uint64_t *)(v12 + v17);
                uint64_t v29 = v12 + v17;
                if (sub_1CC61C590(a1 + 7, &v29))
                {
                  uint64_t v19 = *v18;
                  if ((sub_1CC61C6B0((uint64_t)a1, *(void *)(v19 + 8)) & 1) == 0)
                  {
                    size_t v35 = v38;
                    int v37 = 4;
                    uint64_t v29 = 1;
                    int64x2_t v30 = v22;
                    int64x2_t v31 = v22;
                    unint64_t v32 = v34;
                    uint64_t v33 = 0x400000000;
                    unsigned int v20 = 1;
                    v38[0] = v19;
                    do
                    {
                      uint64_t v21 = (void *)v35[v20 - 1];
                      unsigned int v36 = v20 - 1;
                      v27[0] = v21;
                      uint64_t v26 = 0;
                      if ((sub_1CD420258(a1 + 1, v27, &v26) & 1) == 0)
                      {
                        v27[0] = &v28;
                        v27[1] = (void *)0x800000000;
                        llvm::DominatorTreeBase<llvm::BasicBlock,false>::getDescendants();
                      }
                      unsigned int v20 = v36;
                    }
                    while (v36);
                    if (v32 != v34) {
                      free(v32);
                    }
                    if ((v29 & 1) == 0) {
                      MEMORY[0x1D25D9CD0](v30.i64[0], 8);
                    }
                    if (v35 != v38) {
                      free(v35);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    while (v4 != v5);
    __n128 v4 = v23;
  }
  if (v4)
  {
    char v24 = v4;
    operator delete(v4);
  }
}

void sub_1CC61A9E0(llvm *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v327 = *MEMORY[0x1E4F143B8];
  if (byte_1EBCD8DA8)
  {
    uint64_t v6 = llvm::dbgs(a1);
    uint64_t v7 = v6;
    uint64_t v8 = (void *)*((void *)v6 + 4);
    if (*((void *)v6 + 3) - (void)v8 > 0x22uLL)
    {
      qmemcpy(v8, "Verifying gc pointers in function: ", 35);
      *((void *)v6 + 4) += 35;
    }
    else
    {
      llvm::raw_ostream::write(v6, "Verifying gc pointers in function: ", 0x23uLL);
    }
    if ((*((unsigned char *)a1 + 23) & 0x10) == 0) {
      goto LABEL_14;
    }
    uint64_t v9 = ***(void ***)a1;
    uint64_t v10 = *(void *)(v9 + 152);
    uint64_t v11 = *(unsigned int *)(v9 + 168);
    if (v11)
    {
      LODWORD(v12) = (v11 - 1) & ((a1 >> 4) ^ (a1 >> 9));
      uint64_t v13 = (llvm **)(v10 + 16 * v12);
      unsigned int v14 = *v13;
      if (*v13 == a1)
      {
LABEL_12:
        uint64_t v17 = (size_t *)v13[1];
        size_t v20 = *v17;
        unint64_t v18 = v17 + 2;
        size_t v19 = v20;
        uint64_t v21 = (unsigned char *)*((void *)v7 + 4);
        if (v20 <= *((void *)v7 + 3) - (void)v21)
        {
          if (v19)
          {
            memcpy(v21, v18, v19);
            uint64_t v21 = (unsigned char *)(*((void *)v7 + 4) + v19);
            *((void *)v7 + 4) = v21;
          }
          goto LABEL_17;
        }
        llvm::raw_ostream::write(v7, (const char *)v18, v19);
LABEL_14:
        uint64_t v21 = (unsigned char *)*((void *)v7 + 4);
LABEL_17:
        if (*((unsigned char **)v7 + 3) == v21)
        {
          llvm::raw_ostream::write(v7, "\n", 1uLL);
        }
        else
        {
          *uint64_t v21 = 10;
          ++*((void *)v7 + 4);
        }
        goto LABEL_19;
      }
      int v15 = 1;
      while (v14 != (llvm *)-4096)
      {
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v11 - 1);
        unsigned int v14 = *(llvm **)(v10 + 16 * v12);
        if (v14 == a1)
        {
          uint64_t v13 = (llvm **)(v10 + 16 * v12);
          goto LABEL_12;
        }
      }
    }
    uint64_t v13 = (llvm **)(v10 + 16 * v11);
    goto LABEL_12;
  }
LABEL_19:
  uint64_t v313 = (uint64_t)a1;
  uint64_t v314 = a3;
  unint64_t v315 = 0;
  unint64_t v316 = 0;
  uint64_t v317 = v319;
  uint64_t v318 = 0x400000000;
  int64x2_t v22 = a1;
  unint64_t v23 = (char *)a1 + 72;
  memset(v321, 0, 44);
  v322[0] = 0;
  v322[1] = 0;
  uint64_t v296 = v22;
  v320 = &v321[1];
  int v323 = 0;
  uint64_t v324 = 0;
  int32x2_t v325 = 0;
  int v326 = 0;
  uint64_t v24 = *((void *)v22 + 10);
  uint64_t v300 = a2;
  if ((unsigned char *)v24 == v23)
  {
    unsigned int v25 = 0;
    uint64_t v26 = 0;
  }
  else
  {
    uint64_t v27 = (uint64_t *)(a3 + 8);
    do
    {
      if (v24) {
        uint64_t v28 = v24 - 24;
      }
      else {
        uint64_t v28 = 0;
      }
      uint64_t v303 = (char *)v28;
      v312[0] = 0;
      if ((sub_1CD420258(v27, &v303, v312) & 1) == 0)
      {
        v321[1] += 80;
        if (((v315 + 7) & 0xFFFFFFFFFFFFFFF8) - v315 + 80 > v316 - v315)
        {
          unsigned int v32 = v318 >> 7;
          if (v318 >> 7 >= 0x1E) {
            LOBYTE(v32) = 30;
          }
          uint64_t v33 = 4096 << v32;
          unint64_t v29 = (unint64_t)operator new(4096 << v32, (std::align_val_t)8uLL);
          if (v318 >= (unint64_t)HIDWORD(v318)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v317 + v318) = v29;
          LODWORD(v318) = v318 + 1;
          unint64_t v316 = v29 + v33;
        }
        else
        {
          unint64_t v29 = (v315 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v29 + 48) = 0;
        *(unsigned char *)(v29 + 72) = 0;
        unint64_t v315 = v29 + 80;
        *(void *)unint64_t v29 = 0;
        *(void *)(v29 + 8) = 0;
        *(_DWORD *)(v29 + 16) = 0;
        *(void *)(v29 + 24) = 0;
        *(void *)(v29 + 32) = 0;
        *(_DWORD *)(v29 + 40) = 0;
        *(void *)(v29 + 56) = 0;
        *(_DWORD *)(v29 + 64) = 0;
        for (uint64_t i = *(void *)(v28 + 48); i != v28 + 40; uint64_t i = *(void *)(i + 8))
        {
          if (i) {
            int64x2_t v31 = (uint64_t *)(i - 24);
          }
          else {
            int64x2_t v31 = 0;
          }
          sub_1CC61C864(v31, (unsigned char *)(v29 + 72), (_DWORD *)(v29 + 48));
        }
        uint64_t v303 = (char *)v28;
        sub_1CD467E2C((uint64_t)&v321[3], (uint64_t *)&v303)[1] = v29;
      }
      uint64_t v24 = *(void *)(v24 + 8);
    }
    while ((unsigned char *)v24 != v23);
    uint64_t v26 = (void *)v321[3];
    int v34 = v321[4];
    unsigned int v25 = v321[5];
    if (LODWORD(v321[4]))
    {
      uint64_t v36 = v321[3] + 16 * LODWORD(v321[5]);
      a2 = v300;
      if (LODWORD(v321[5]))
      {
        uint64_t v284 = 0;
        while ((*(void *)(v321[3] + v284) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v284 += 16;
          if (16 * LODWORD(v321[5]) == v284)
          {
            size_t v35 = (uint64_t *)(v321[3] + 16 * LODWORD(v321[5]));
            goto LABEL_45;
          }
        }
        size_t v35 = (uint64_t *)(v321[3] + v284);
      }
      else
      {
        size_t v35 = (uint64_t *)v321[3];
      }
      goto LABEL_45;
    }
    a2 = v300;
  }
  int v34 = 0;
  size_t v35 = &v26[2 * v25];
  uint64_t v36 = (uint64_t)v35;
LABEL_45:
  uint64_t v299 = &v26[2 * v25];
  if (v35 == v299)
  {
    uint64_t v37 = v25;
    goto LABEL_106;
  }
  do
  {
    uint64_t v38 = *v35;
    uint64_t v39 = *(unsigned int *)(a2 + 40);
    if (!v39) {
      goto LABEL_55;
    }
    uint64_t v40 = *(void *)(a2 + 24);
    LODWORD(v41) = ((v38 >> 4) ^ (v38 >> 9)) & (v39 - 1);
    int v42 = (uint64_t *)(v40 + 16 * v41);
    uint64_t v43 = *v42;
    if (v38 != *v42)
    {
      int v44 = 1;
      while (v43 != -4096)
      {
        int v45 = v41 + v44++;
        uint64_t v41 = v45 & (v39 - 1);
        uint64_t v43 = *(void *)(v40 + 16 * v41);
        if (v38 == v43)
        {
          int v42 = (uint64_t *)(v40 + 16 * v41);
          goto LABEL_53;
        }
      }
LABEL_55:
      uint64_t v46 = 0;
      goto LABEL_56;
    }
LABEL_53:
    if (v42 == (uint64_t *)(v40 + 16 * v39)) {
      goto LABEL_55;
    }
    uint64_t v46 = (void *)v42[1];
LABEL_56:
    uint64_t v47 = v35[1];
    while (1)
    {
      uint64_t v46 = (void *)v46[1];
      if (!v46) {
        break;
      }
      uint64_t v48 = ((*v46 >> 4) ^ (*v46 >> 9)) & (LODWORD(v321[5]) - 1);
      if (*v46 != *(void *)(v321[3] + 16 * v48))
      {
        int v67 = 1;
        do
        {
          int v68 = v48 + v67++;
          uint64_t v48 = v68 & (LODWORD(v321[5]) - 1);
        }
        while (*v46 != *(void *)(v321[3] + 16 * v48));
      }
      uint64_t v49 = *(void *)(v321[3] + 16 * v48 + 8);
      uint64_t v50 = *(void *)(v49 + 48);
      uint64_t v51 = *(unsigned int *)(v49 + 64);
      int64x2_t v52 = (void *)(v50 + 8 * v51);
      if (*(_DWORD *)(v49 + 56))
      {
        if (*(_DWORD *)(v49 + 64))
        {
          uint64_t v53 = 8 * v51;
          uint64_t v54 = *(void **)(v49 + 48);
          while ((*v54 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            ++v54;
            v53 -= 8;
            if (!v53) {
              goto LABEL_64;
            }
          }
        }
        else
        {
          uint64_t v54 = *(void **)(v49 + 48);
        }
      }
      else
      {
LABEL_64:
        uint64_t v54 = (void *)(v50 + 8 * v51);
      }
      uint64_t v55 = (void *)(v50 + 8 * v51);
LABEL_67:
      while (v54 != v55)
      {
        int v56 = *(_DWORD *)(v47 + 16);
        if (!v56)
        {
          unsigned int v65 = 0;
LABEL_82:
          *sub_1CBFE4230(v47, (uint64_t)v54, v54, v65) = *v54;
          goto LABEL_83;
        }
        int v57 = v56 - 1;
        unsigned int v58 = ((*v54 >> 4) ^ (*v54 >> 9)) & v57;
        size_t v59 = (void *)(*(void *)v47 + 8 * v58);
        uint64_t v60 = *v59;
        if (*v54 != *v59)
        {
          uint64_t v61 = 0;
          int v62 = 1;
          while (v60 != -4096)
          {
            if (v61) {
              BOOL v63 = 0;
            }
            else {
              BOOL v63 = v60 == -8192;
            }
            if (v63) {
              uint64_t v61 = v59;
            }
            unsigned int v64 = v58 + v62++;
            unsigned int v58 = v64 & v57;
            size_t v59 = (void *)(*(void *)v47 + 8 * v58);
            uint64_t v60 = *v59;
            if (*v54 == *v59) {
              goto LABEL_83;
            }
          }
          if (v61) {
            unsigned int v65 = v61;
          }
          else {
            unsigned int v65 = v59;
          }
          goto LABEL_82;
        }
LABEL_83:
        uint64_t v66 = v54 + 1;
        uint64_t v54 = v52;
        if (v66 != v52)
        {
          uint64_t v54 = v66;
          while ((*v54 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            if (++v54 == v52)
            {
              uint64_t v54 = v52;
              goto LABEL_67;
            }
          }
        }
      }
      if (*(unsigned char *)(v49 + 72)) {
        goto LABEL_99;
      }
    }
    uint64_t v69 = sub_1CB923B44(*(llvm::Function **)(v38 + 56));
    if ((uint64_t *)v69 != v70)
    {
      uint64_t v71 = (uint64_t *)v69;
      unint64_t v72 = v70;
      do
      {
        if (sub_1CC61C9B0(*v71))
        {
          v312[0] = (uint64_t)v71;
          sub_1CD48410C(v47, v312, (uint64_t)&v303);
        }
        v71 += 5;
      }
      while (v71 != v72);
    }
LABEL_99:
    sub_1CC61C8FC((unsigned char *)v35[1], 1);
    BOOL v73 = v35 + 2;
    size_t v35 = (uint64_t *)v36;
    a2 = v300;
    if (v73 != (uint64_t *)v36)
    {
      size_t v35 = v73;
      while ((*v35 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v35 += 2;
        if (v35 == (uint64_t *)v36)
        {
          size_t v35 = (uint64_t *)v36;
          break;
        }
      }
    }
  }
  while (v35 != v299);
  uint64_t v26 = (void *)v321[3];
  int v34 = v321[4];
  uint64_t v37 = LODWORD(v321[5]);
  unsigned int v25 = v321[5];
LABEL_106:
  uint64_t v303 = 0;
  uint64_t v304 = 0;
  LODWORD(v305) = 0;
  uint64_t v307 = 0;
  uint64_t v308 = 0;
  unint64_t v74 = &v26[2 * v37];
  uint64_t v306 = 0;
  if (v34)
  {
    if (v25)
    {
      uint64_t v76 = 16 * v37;
      char v75 = v26;
      while ((*v75 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v75 += 2;
        v76 -= 16;
        if (!v76) {
          goto LABEL_114;
        }
      }
    }
    else
    {
      char v75 = v26;
    }
  }
  else
  {
LABEL_114:
    char v75 = &v26[2 * v37];
  }
  unsigned int v77 = &v26[2 * v25];
  if (v75 != v77)
  {
    do
    {
      sub_1CC61C480(&v303, v75);
      uint64_t v78 = v75 + 2;
      char v75 = v74;
      if (v78 != v74)
      {
        char v75 = v78;
        while ((*v75 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v75 += 2;
          if (v75 == v74)
          {
            char v75 = v74;
            break;
          }
        }
      }
    }
    while (v75 != v77);
    uint64_t v79 = v307;
    if (v306 != v307)
    {
      while (1)
      {
        size_t v183 = *(void **)(v79 - 8);
        sub_1CD5D8AA0((uint64_t)&v303);
        int v184 = v321[5];
        if (LODWORD(v321[5]))
        {
          uint64_t v185 = v321[3];
          uint64_t v186 = ((v183 >> 4) ^ (v183 >> 9)) & (LODWORD(v321[5]) - 1);
          v187 = *(void **)(v321[3] + 16 * v186);
          if (v183 != v187)
          {
            int v282 = 1;
            while (v187 != (void *)-4096)
            {
              int v283 = v186 + v282++;
              uint64_t v186 = v283 & (LODWORD(v321[5]) - 1);
              v187 = *(void **)(v321[3] + 16 * v186);
              if (v183 == v187) {
                goto LABEL_267;
              }
            }
            goto LABEL_418;
          }
LABEL_267:
          uint64_t v188 = *(int32x2_t **)(v321[3] + 16 * v186 + 8);
          if (v188) {
            break;
          }
        }
LABEL_418:
        uint64_t v79 = v307;
        if (v306 == v307) {
          goto LABEL_123;
        }
      }
      uint64_t v189 = v183[1];
      __int32 v298 = v188[1].i32[0];
      if (v189)
      {
        while (1)
        {
          uint64_t v190 = *(void *)(v189 + 24);
          unsigned int v191 = *(unsigned __int8 *)(v190 + 16);
          BOOL v192 = v190 && v191 >= 0x1C;
          if (v192 && v191 - 29 <= 0xA) {
            break;
          }
          uint64_t v189 = *(void *)(v189 + 8);
          if (!v189) {
            goto LABEL_278;
          }
        }
LABEL_279:
        if (!v184) {
          goto LABEL_282;
        }
        uint64_t v194 = *(void *)(v190 + 40);
        unsigned int v195 = v184 - 1;
        uint64_t v196 = ((v194 >> 4) ^ (v194 >> 9)) & (v184 - 1);
        uint64_t v197 = *(void *)(v185 + 16 * v196);
        if (v194 != v197)
        {
          int v204 = 1;
          do
          {
            if (v197 == -4096) {
              goto LABEL_282;
            }
            int v205 = v196 + v204++;
            uint64_t v196 = v205 & v195;
            uint64_t v197 = *(void *)(v185 + 16 * v196);
          }
          while (v194 != v197);
        }
        uint64_t v198 = *(void *)(v185 + 16 * v196 + 8);
        if (v198)
        {
          int v202 = *(_DWORD *)(v190 + 20);
          uint64_t v203 = (v202 & 0x40000000) != 0 ? *(void *)(v190 - 8) : v190 - 32 * (v202 & 0x7FFFFFF);
          v312[0] = v203 + ((v189 - v203) & 0x1FFFFFFFE0);
          v310[0] = 0;
          if ((sub_1CD420258((uint64_t *)(v314 + 56), v312, v310) & 1) == 0) {
            sub_1CD5D88AC((uint64_t)v188, (uint64_t *)(v198 + 24));
          }
        }
LABEL_282:
        while (1)
        {
          uint64_t v189 = *(void *)(v189 + 8);
          if (!v189) {
            break;
          }
          uint64_t v190 = *(void *)(v189 + 24);
          unsigned int v199 = *(unsigned __int8 *)(v190 + 16);
          if (v190) {
            BOOL v200 = v199 >= 0x1C;
          }
          else {
            BOOL v200 = 0;
          }
          if (v200 && v199 - 29 <= 0xA)
          {
            uint64_t v185 = v321[3];
            int v184 = v321[5];
            goto LABEL_279;
          }
        }
        __int32 v297 = v188[1].i32[0];
      }
      else
      {
LABEL_278:
        __int32 v297 = v188[1].i32[0];
      }
      v310[0] = 0;
      v310[1] = 0;
      int v311 = 0;
      sub_1CBFCB9AC((uint64_t)v310, (uint64_t)v188);
      char v302 = 0;
      std::string v206 = v183 + 5;
      __int16 v207 = (void *)v183[6];
      if (v207 == v183 + 5)
      {
LABEL_302:
        MEMORY[0x1D25D9CD0](v310[0], 8);
        if (v298 != v297 || (v302 & 1) != 0)
        {
          __int32 v208 = v188[4].i32[0];
          sub_1CC61C8FC(v188, v302 & 1);
          if (v208 != v188[4].i32[0])
          {
            uint64_t v209 = (void *)*v206;
            if ((void *)*v206 == v206)
            {
              uint64_t v210 = 0;
              BOOL v211 = 0;
LABEL_416:
              int v281 = 0;
            }
            else
            {
              uint64_t v210 = (uint64_t)(v209 - 3);
              if (v209) {
                uint64_t v277 = (llvm::Instruction *)(v209 - 3);
              }
              else {
                uint64_t v277 = 0;
              }
              int v278 = *((unsigned __int8 *)v277 + 16);
              int v279 = v278 - 29;
              if ((v278 - 29) >= 0xB) {
                BOOL v211 = 0;
              }
              else {
                BOOL v211 = v277;
              }
              if (v278 != 30)
              {
                int v280 = 0;
                switch(v279)
                {
                  case 0:
                  case 5:
                  case 6:
                    goto LABEL_414;
                  case 1:
                    __break(1u);
                    JUMPOUT(0x1CC61C180);
                  case 2:
                    int v280 = (*((_DWORD *)v277 + 5) >> 1) & 0x3FFFFFF;
                    goto LABEL_414;
                  case 3:
                  case 9:
                    int v280 = (*((_DWORD *)v277 + 5) & 0x7FFFFFF) - 1;
                    goto LABEL_414;
                  case 4:
                    int v280 = 2;
                    goto LABEL_414;
                  case 7:
                    int v280 = *((_WORD *)v277 + 9) & 1;
                    goto LABEL_414;
                  case 8:
                    int v280 = 1;
                    goto LABEL_414;
                  case 10:
                    int v280 = *((_DWORD *)v277 + 20) + 1;
                    goto LABEL_414;
                  default:
                    uint64_t v210 = 0;
                    goto LABEL_416;
                }
              }
              if ((*((_DWORD *)v277 + 5) & 0x7FFFFFF) == 3) {
                int v280 = 2;
              }
              else {
                int v280 = 1;
              }
LABEL_414:
              int v281 = v280;
            }
            sub_1CD5D89EC(&v303, v211, 0, v210, v281);
          }
        }
        goto LABEL_418;
      }
      char v302 = 0;
      while (1)
      {
        if (v207) {
          uint64_t v212 = (uint64_t)(v207 - 3);
        }
        else {
          uint64_t v212 = 0;
        }
        int v213 = *(unsigned __int8 *)(v212 + 16);
        if (v213 == 83) {
          uint64_t v214 = v212;
        }
        else {
          uint64_t v214 = 0;
        }
        if (v207 && v213 == 83)
        {
          if (sub_1CC61C9B0(*(void *)v214))
          {
            int v215 = *(_DWORD *)(v214 + 20);
            uint64_t v216 = v215 & 0x7FFFFFF;
            if ((v215 & 0x7FFFFFF) != 0)
            {
              uint64_t v217 = 0;
              int v218 = 0;
              int v219 = 0;
              do
              {
                v312[0] = 0;
                int v220 = *(_DWORD *)(v214 + 20);
                if ((v220 & 0x40000000) != 0) {
                  uint64_t v221 = *(void *)(v214 - 8);
                }
                else {
                  uint64_t v221 = v214 - 32 * (v220 & 0x7FFFFFF);
                }
                uint64_t v222 = *(void *)(v221 + 32 * *(unsigned int *)(v214 + 60) + 8 * v217);
                v312[0] = v222;
                if (LODWORD(v321[5]))
                {
                  unsigned int v223 = ((v222 >> 4) ^ (v222 >> 9)) & (LODWORD(v321[5]) - 1);
                  uint64_t v224 = *(void *)(v321[3] + 16 * v223);
                  if (v222 == v224)
                  {
LABEL_324:
                    if (v223 != LODWORD(v321[5])
                      && sub_1CC61CB60(v314, *(void *)(*(void *)(v214 + 40) + 8), v222))
                    {
                      int v225 = *(_DWORD *)(v214 + 20);
                      uint64_t v226 = (v225 & 0x40000000) != 0 ? *(void *)(v214 - 8) : v214 - 32 * (v225 & 0x7FFFFFF);
                      uint64_t v227 = *(void *)(v226 + 32 * v217);
                      if (sub_1CC61CC4C(v227) == 1)
                      {
                        if (v326)
                        {
                          unsigned int v237 = (v326 - 1) & ((v227 >> 4) ^ (v227 >> 9));
                          uint64_t v238 = *(void *)(v324 + 8 * v237);
                          if (v227 == v238) {
                            goto LABEL_359;
                          }
                          int v239 = 1;
                          while (v238 != -4096)
                          {
                            unsigned int v240 = v237 + v239++;
                            unsigned int v237 = v240 & (v326 - 1);
                            uint64_t v238 = *(void *)(v324 + 8 * v237);
                            if (v227 == v238) {
                              goto LABEL_359;
                            }
                          }
                        }
                        uint64_t v228 = sub_1CD467E2C((uint64_t)&v321[3], v312)[1];
                        int v229 = *(_DWORD *)(v228 + 40);
                        if (v229)
                        {
                          uint64_t v230 = *(void *)(v228 + 24);
                          int v231 = v229 - 1;
                          unsigned int v232 = v231 & ((v227 >> 4) ^ (v227 >> 9));
                          uint64_t v233 = *(void *)(v230 + 8 * v232);
                          if (v227 == v233)
                          {
                            BOOL v235 = 1;
                          }
                          else
                          {
                            int v234 = 1;
                            do
                            {
                              BOOL v235 = v233 != -4096;
                              if (v233 == -4096) {
                                break;
                              }
                              unsigned int v236 = v232 + v234++;
                              unsigned int v232 = v236 & v231;
                              uint64_t v233 = *(void *)(v230 + 8 * v232);
                            }
                            while (v227 != v233);
                          }
                        }
                        else
                        {
                          BOOL v235 = 0;
                        }
                        v219 |= v235;
                        v218 |= !v235;
                      }
                    }
                  }
                  else
                  {
                    int v241 = 1;
                    while (v224 != -4096)
                    {
                      unsigned int v242 = v223 + v241++;
                      unsigned int v223 = v242 & (LODWORD(v321[5]) - 1);
                      uint64_t v224 = *(void *)(v321[3] + 16 * v223);
                      if (v222 == v224) {
                        goto LABEL_324;
                      }
                    }
                  }
                }
                ++v217;
              }
              while (v217 != v216);
              if (!(v219 & 1 | ((v218 & 1) == 0))) {
                goto LABEL_383;
              }
              if (v218 & v219) {
                goto LABEL_359;
              }
            }
          }
        }
        else if ((v213 == 77 || v213 == 62) && sub_1CC61C9B0(*(void *)v212))
        {
          int v243 = *(_DWORD *)(v212 + 20);
          if ((v243 & 0x40000000) != 0)
          {
            uint64_t v245 = *(uint64_t ***)(v212 - 8);
            uint64_t v244 = v243 & 0x7FFFFFF;
            if (v244)
            {
LABEL_368:
              uint64_t v254 = &v245[4 * v244];
              while (1)
              {
                uint64_t v255 = *v245;
                if (sub_1CC61C9B0(**v245) && sub_1CC61CC4C((uint64_t)v255) == 1)
                {
                  if (!v311) {
                    goto LABEL_382;
                  }
                  unsigned int v256 = (v311 - 1) & ((v255 >> 4) ^ (v255 >> 9));
                  uint64_t v257 = *(uint64_t **)(v310[0] + 8 * v256);
                  if (v255 != v257) {
                    break;
                  }
                }
LABEL_373:
                v245 += 4;
                if (v245 == v254) {
                  goto LABEL_379;
                }
              }
              int v258 = 1;
              while (v257 != (uint64_t *)-4096)
              {
                unsigned int v259 = v256 + v258++;
                unsigned int v256 = v259 & (v311 - 1);
                uint64_t v257 = *(uint64_t **)(v310[0] + 8 * v256);
                if (v255 == v257) {
                  goto LABEL_373;
                }
              }
LABEL_382:
              if (v326)
              {
                unsigned int v271 = (v326 - 1) & ((v255 >> 4) ^ (v255 >> 9));
                uint64_t v272 = *(uint64_t **)(v324 + 8 * v271);
                if (v255 != v272)
                {
                  int v273 = 1;
                  while (v272 != (uint64_t *)-4096)
                  {
                    unsigned int v274 = v271 + v273++;
                    unsigned int v271 = v274 & (v326 - 1);
                    uint64_t v272 = *(uint64_t **)(v324 + 8 * v271);
                    if (v255 == v272) {
                      goto LABEL_359;
                    }
                  }
                  goto LABEL_383;
                }
LABEL_359:
                __int32 v246 = v188[8].i32[0];
                if (v246)
                {
                  int32x2_t v247 = v188[6];
                  __int32 v248 = v246 - 1;
                  LODWORD(v249) = (v246 - 1) & ((v212 >> 4) ^ (v212 >> 9));
                  unint64_t v250 = (uint64_t *)(*(void *)&v247 + 8 * v249);
                  uint64_t v251 = *v250;
                  if (v212 == *v250)
                  {
LABEL_365:
                    *unint64_t v250 = -8192;
                    v188[7] = vadd_s32(v188[7], (int32x2_t)0x1FFFFFFFFLL);
                  }
                  else
                  {
                    int v252 = 1;
                    while (v251 != -4096)
                    {
                      int v253 = v249 + v252++;
                      uint64_t v249 = v253 & v248;
                      uint64_t v251 = *(void *)(*(void *)&v247 + 8 * v249);
                      if (v212 == v251)
                      {
                        unint64_t v250 = (uint64_t *)(*(void *)&v247 + 8 * v249);
                        goto LABEL_365;
                      }
                    }
                  }
                }
                uint64_t v309 = v212;
                sub_1CD48410C((uint64_t)&v324, &v309, (uint64_t)v312);
              }
              else
              {
LABEL_383:
                __int32 v260 = v188[8].i32[0];
                if (v260)
                {
                  int32x2_t v261 = v188[6];
                  __int32 v262 = v260 - 1;
                  LODWORD(v263) = (v260 - 1) & ((v212 >> 4) ^ (v212 >> 9));
                  uint64_t v264 = (uint64_t *)(*(void *)&v261 + 8 * v263);
                  uint64_t v265 = *v264;
                  if (v212 == *v264)
                  {
LABEL_389:
                    *uint64_t v264 = -8192;
                    v188[7] = vadd_s32(v188[7], (int32x2_t)0x1FFFFFFFFLL);
                  }
                  else
                  {
                    int v266 = 1;
                    while (v265 != -4096)
                    {
                      int v267 = v263 + v266++;
                      uint64_t v263 = v267 & v262;
                      uint64_t v265 = *(void *)(*(void *)&v261 + 8 * v263);
                      if (v212 == v265)
                      {
                        uint64_t v264 = (uint64_t *)(*(void *)&v261 + 8 * v263);
                        goto LABEL_389;
                      }
                    }
                  }
                }
                if (v326)
                {
                  LODWORD(v268) = (v326 - 1) & ((v212 >> 4) ^ (v212 >> 9));
                  uint64_t v269 = (uint64_t *)(v324 + 8 * v268);
                  uint64_t v270 = *v269;
                  if (v212 == *v269)
                  {
LABEL_392:
                    *uint64_t v269 = -8192;
                    int32x2_t v325 = vadd_s32(v325, (int32x2_t)0x1FFFFFFFFLL);
                  }
                  else
                  {
                    int v275 = 1;
                    while (v270 != -4096)
                    {
                      int v276 = v268 + v275++;
                      uint64_t v268 = v276 & (v326 - 1);
                      uint64_t v270 = *(void *)(v324 + 8 * v268);
                      if (v212 == v270)
                      {
                        uint64_t v269 = (uint64_t *)(v324 + 8 * v268);
                        goto LABEL_392;
                      }
                    }
                  }
                }
                uint64_t v309 = v212;
                sub_1CD484194((uint64_t)v312, (uint64_t)v322, &v309);
              }
              char v302 = 1;
              goto LABEL_380;
            }
          }
          else
          {
            uint64_t v244 = v243 & 0x7FFFFFF;
            uint64_t v245 = (uint64_t **)(v212 - 32 * v244);
            if (v244) {
              goto LABEL_368;
            }
          }
        }
LABEL_379:
        LOBYTE(v312[0]) = 0;
        sub_1CC61C864((uint64_t *)v212, v312, v310);
LABEL_380:
        __int16 v207 = (void *)v207[1];
        if (v207 == v206) {
          goto LABEL_302;
        }
      }
    }
  }
LABEL_123:
  sub_1CD456CB4(&v303);
  LOBYTE(v310[0]) = 0;
  v312[0] = v313;
  uint64_t v304 = 0;
  uint64_t v305 = 0;
  uint64_t v303 = 0;
  sub_1CBF8C36C(&v303, (uint64_t)v312);
  unsigned int v81 = v304;
  uint64_t v301 = v303;
  if (v304 == v303) {
    goto LABEL_249;
  }
  while (2)
  {
    uint64_t v83 = *((void *)v81 - 1);
    v81 -= 8;
    uint64_t v82 = v83;
    if (LODWORD(v321[5]))
    {
      uint64_t v84 = ((v82 >> 4) ^ (v82 >> 9)) & (LODWORD(v321[5]) - 1);
      uint64_t v85 = *(void *)(v321[3] + 16 * v84);
      if (v82 == v85)
      {
LABEL_126:
        unsigned int v86 = *(_DWORD **)(v321[3] + 16 * v84 + 8);
        if (v86)
        {
          uint64_t v87 = v82 + 40;
          for (uint64_t j = *(void *)(v82 + 48); ; uint64_t j = *(void *)(j + 8))
          {
            if (j == v87) {
              goto LABEL_247;
            }
            if (j) {
              uint64_t v89 = j - 24;
            }
            else {
              uint64_t v89 = 0;
            }
            if (v323)
            {
              unsigned int v90 = ((v89 >> 4) ^ (v89 >> 9)) & (v323 - 1);
              uint64_t v91 = *(void *)(v322[0] + 8 * v90);
              if (v89 == v91) {
                continue;
              }
              int v92 = 1;
              while (v91 != -4096)
              {
                unsigned int v93 = v90 + v92++;
                unsigned int v90 = v93 & (v323 - 1);
                uint64_t v91 = *(void *)(v322[0] + 8 * v90);
                if (v89 == v91) {
                  goto LABEL_202;
                }
              }
            }
            if (v326)
            {
              unsigned int v94 = (v326 - 1) & ((v89 >> 4) ^ (v89 >> 9));
              uint64_t v95 = *(void *)(v324 + 8 * v94);
              if (v89 == v95) {
                continue;
              }
              int v96 = 1;
              while (v95 != -4096)
              {
                unsigned int v97 = v94 + v96++;
                unsigned int v94 = v97 & (v326 - 1);
                uint64_t v95 = *(void *)(v324 + 8 * v94);
                if (v89 == v95) {
                  goto LABEL_202;
                }
              }
            }
            int v98 = *(unsigned __int8 *)(v89 + 16);
            if (v98 == 83) {
              std::string::size_type v99 = (llvm::Value *)v89;
            }
            else {
              std::string::size_type v99 = 0;
            }
            if (v98 == 83)
            {
              if (sub_1CC61C9B0(*(void *)v89))
              {
                int v100 = *(_DWORD *)(v89 + 20);
                uint64_t v101 = v100 & 0x7FFFFFF;
                if ((v100 & 0x7FFFFFF) != 0)
                {
                  uint64_t v102 = 0;
                  while (2)
                  {
                    int v103 = *(_DWORD *)(v89 + 20);
                    if ((v103 & 0x40000000) != 0) {
                      std::string::size_type v104 = *(char **)(v89 - 8);
                    }
                    else {
                      std::string::size_type v104 = (char *)v99 - 32 * (v103 & 0x7FFFFFF);
                    }
                    if (LODWORD(v321[5]))
                    {
                      uint64_t v105 = *(void *)&v104[32 * *(unsigned int *)(v89 + 60) + 8 * v102];
                      uint64_t v106 = ((v105 >> 4) ^ (v105 >> 9)) & (LODWORD(v321[5]) - 1);
                      uint64_t v107 = *(void *)(v321[3] + 16 * v106);
                      if (v105 != v107)
                      {
                        int v119 = 1;
                        while (v107 != -4096)
                        {
                          int v120 = v106 + v119++;
                          uint64_t v106 = v120 & (LODWORD(v321[5]) - 1);
                          uint64_t v107 = *(void *)(v321[3] + 16 * v106);
                          if (v105 == v107) {
                            goto LABEL_156;
                          }
                        }
                        goto LABEL_169;
                      }
LABEL_156:
                      uint64_t v108 = *(void *)(v321[3] + 16 * v106 + 8);
                      if (v108 && sub_1CC61CB60(v314, *(void *)(*(void *)(v89 + 40) + 8), v105))
                      {
                        int v109 = *(_DWORD *)(v89 + 20);
                        uint64_t v110 = (v109 & 0x40000000) != 0
                             ? *(llvm::Value **)(v89 - 8)
                             : (llvm::Value *)((char *)v99 - 32 * (v109 & 0x7FFFFFF));
                        std::string::size_type v111 = (llvm::Value *)*((void *)v110 + 4 * v102);
                        if (sub_1CC61CC4C((uint64_t)v111) == 1)
                        {
                          int v112 = *(_DWORD *)(v108 + 40);
                          if (!v112) {
                            goto LABEL_168;
                          }
                          uint64_t v113 = *(void *)(v108 + 24);
                          int v114 = v112 - 1;
                          unsigned int v115 = v114 & ((v111 >> 4) ^ (v111 >> 9));
                          uint64_t v116 = *(llvm::Value **)(v113 + 8 * v115);
                          if (v111 != v116)
                          {
                            int v117 = 1;
                            while (v116 != (llvm::Value *)-4096)
                            {
                              unsigned int v118 = v115 + v117++;
                              unsigned int v115 = v118 & v114;
                              uint64_t v116 = *(llvm::Value **)(v113 + 8 * v115);
                              if (v111 == v116) {
                                goto LABEL_169;
                              }
                            }
LABEL_168:
                            sub_1CC61CF50((llvm *)v310, v111, v99);
                          }
                        }
                      }
                    }
LABEL_169:
                    if (++v102 == v101) {
                      goto LABEL_201;
                    }
                    continue;
                  }
                }
              }
              goto LABEL_201;
            }
            int v121 = *(_DWORD *)(v89 + 20);
            if ((v98 - 81) > 1)
            {
              if ((v121 & 0x40000000) == 0)
              {
LABEL_180:
                uint64_t v124 = v121 & 0x7FFFFFF;
                uint64_t v125 = (uint64_t **)(v89 - 32 * v124);
                if ((v121 & 0x7FFFFFF) != 0) {
                  goto LABEL_190;
                }
                goto LABEL_201;
              }
LABEL_189:
              uint64_t v125 = *(uint64_t ***)(v89 - 8);
              uint64_t v124 = v121 & 0x7FFFFFF;
              if ((v121 & 0x7FFFFFF) == 0) {
                goto LABEL_201;
              }
LABEL_190:
              uint64_t v138 = &v125[4 * v124];
              while (2)
              {
                uint64_t v139 = *v125;
                if (sub_1CC61C9B0(**v125) && sub_1CC61CC4C((uint64_t)v139) == 1)
                {
                  int v140 = v86[4];
                  if (!v140) {
                    goto LABEL_199;
                  }
                  int v141 = v140 - 1;
                  unsigned int v142 = v141 & ((v139 >> 4) ^ (v139 >> 9));
                  int v143 = *(uint64_t **)(*(void *)v86 + 8 * v142);
                  if (v139 != v143)
                  {
                    int v144 = 1;
                    while (v143 != (uint64_t *)-4096)
                    {
                      unsigned int v145 = v142 + v144++;
                      unsigned int v142 = v145 & v141;
                      int v143 = *(uint64_t **)(*(void *)v86 + 8 * v142);
                      if (v139 == v143) {
                        goto LABEL_200;
                      }
                    }
LABEL_199:
                    sub_1CC61CF50((llvm *)v310, (llvm::Value *)v139, (llvm::Value *)v89);
                  }
                }
LABEL_200:
                v125 += 4;
                if (v125 == v138) {
                  goto LABEL_201;
                }
                continue;
              }
            }
            if ((v121 & 0x40000000) != 0)
            {
              uint64_t v122 = *(void *)(v89 - 8);
              uint64_t v123 = *(uint64_t **)v122;
              if (!sub_1CC61C9B0(**(void **)v122)) {
                goto LABEL_189;
              }
            }
            else
            {
              uint64_t v122 = v89 - 32 * (v121 & 0x7FFFFFF);
              uint64_t v123 = *(uint64_t **)v122;
              if ((sub_1CC61C9B0(**(void **)v122) & 1) == 0) {
                goto LABEL_180;
              }
            }
            std::string::size_type v126 = *(llvm::Value **)(v122 + 32);
            int v127 = sub_1CC61CC4C((uint64_t)v123);
            int v128 = sub_1CC61CC4C((uint64_t)v126);
            int v129 = v128;
            uint64_t v130 = *(void *)v86;
            int v131 = v86[4];
            unsigned int v132 = v123 >> 4;
            if (v131)
            {
              int v133 = v131 - 1;
              unsigned int v134 = (v131 - 1) & (v132 ^ (v123 >> 9));
              std::string::size_type v135 = *(uint64_t **)(v130 + 8 * v134);
              if (v123 == v135) {
                goto LABEL_207;
              }
              int v136 = 1;
              while (v135 != (uint64_t *)-4096)
              {
                unsigned int v137 = v134 + v136++;
                unsigned int v134 = v137 & v133;
                std::string::size_type v135 = *(uint64_t **)(v130 + 8 * v134);
                if (v123 == v135) {
                  goto LABEL_207;
                }
              }
              unsigned int v146 = v133 & ((v126 >> 4) ^ (v126 >> 9));
              uint64_t v147 = *(llvm::Value **)(v130 + 8 * v146);
              if (v126 == v147) {
                goto LABEL_207;
              }
              int v148 = 1;
              while (v147 != (llvm::Value *)-4096)
              {
                unsigned int v149 = v146 + v148++;
                unsigned int v146 = v149 & v133;
                uint64_t v147 = *(llvm::Value **)(v130 + 8 * v146);
                if (v126 == v147) {
                  goto LABEL_207;
                }
              }
            }
            if (v127 != 3 || v128 != 1) {
              break;
            }
LABEL_217:
            if (!v131) {
              goto LABEL_223;
            }
            int v155 = v131 - 1;
            unsigned int v156 = v155 & ((v126 >> 4) ^ (v126 >> 9));
            long long v157 = *(llvm::Value **)(v130 + 8 * v156);
            if (v126 != v157)
            {
              int v158 = 1;
              while (v157 != (llvm::Value *)-4096)
              {
                unsigned int v159 = v156 + v158++;
                unsigned int v156 = v159 & v155;
                long long v157 = *(llvm::Value **)(v130 + 8 * v156);
                if (v126 == v157) {
                  goto LABEL_201;
                }
              }
LABEL_223:
              sub_1CC61CF50((llvm *)v310, v126, (llvm::Value *)v89);
            }
LABEL_201:
            LOBYTE(v312[0]) = 0;
            unint64_t v80 = (llvm *)sub_1CC61C864((uint64_t *)v89, v312, v86);
LABEL_202:
            ;
          }
          if (v127 == 1 && v128 == 3) {
            goto LABEL_208;
          }
          if (!v326) {
            goto LABEL_201;
          }
          int v160 = v326 - 1;
          unsigned int v161 = (v326 - 1) & (v132 ^ (v123 >> 9));
          char v162 = *(uint64_t **)(v324 + 8 * v161);
          if (v123 == v162)
          {
LABEL_230:
            if (v128 == 2) {
              goto LABEL_231;
            }
LABEL_207:
            if (v127 == 1) {
              goto LABEL_208;
            }
LABEL_215:
            if (v129 != 1) {
              goto LABEL_201;
            }
            uint64_t v130 = *(void *)v86;
            int v131 = v86[4];
            goto LABEL_217;
          }
          int v165 = 1;
          while (v162 != (uint64_t *)-4096)
          {
            unsigned int v166 = v161 + v165++;
            unsigned int v161 = v166 & v160;
            char v162 = *(uint64_t **)(v324 + 8 * v161);
            if (v123 == v162) {
              goto LABEL_230;
            }
          }
LABEL_231:
          unsigned int v163 = v160 & ((v126 >> 4) ^ (v126 >> 9));
          uint64_t v164 = *(llvm::Value **)(v324 + 8 * v163);
          if (v126 != v164)
          {
            int v167 = 1;
            while (v164 != (llvm::Value *)-4096)
            {
              unsigned int v168 = v163 + v167++;
              unsigned int v163 = v168 & v160;
              uint64_t v164 = *(llvm::Value **)(v324 + 8 * v163);
              if (v126 == v164) {
                goto LABEL_232;
              }
            }
            goto LABEL_201;
          }
LABEL_232:
          if (v127 != 1)
          {
            if (v127 == 2) {
              goto LABEL_201;
            }
            goto LABEL_215;
          }
LABEL_208:
          if (v131)
          {
            int v150 = v131 - 1;
            unsigned int v151 = v150 & (v132 ^ (v123 >> 9));
            int v152 = *(uint64_t **)(v130 + 8 * v151);
            if (v123 == v152) {
              goto LABEL_215;
            }
            int v153 = 1;
            while (v152 != (uint64_t *)-4096)
            {
              unsigned int v154 = v151 + v153++;
              unsigned int v151 = v154 & v150;
              int v152 = *(uint64_t **)(v130 + 8 * v151);
              if (v123 == v152) {
                goto LABEL_215;
              }
            }
          }
          sub_1CC61CF50((llvm *)v310, (llvm::Value *)v123, (llvm::Value *)v89);
          goto LABEL_215;
        }
      }
      else
      {
        int v169 = 1;
        while (v85 != -4096)
        {
          int v170 = v84 + v169++;
          uint64_t v84 = v170 & (LODWORD(v321[5]) - 1);
          uint64_t v85 = *(void *)(v321[3] + 16 * v84);
          if (v82 == v85) {
            goto LABEL_126;
          }
        }
      }
    }
LABEL_247:
    if (v81 != v301) {
      continue;
    }
    break;
  }
  unsigned int v81 = v303;
LABEL_249:
  if (v81)
  {
    uint64_t v304 = v81;
    operator delete(v81);
  }
  if (byte_1EBCD8DA8) {
    BOOL v171 = LOBYTE(v310[0]) == 0;
  }
  else {
    BOOL v171 = 0;
  }
  if (v171)
  {
    BOOL v172 = llvm::dbgs(v80);
    uint64_t v173 = v172;
    unint64_t v174 = (void *)*((void *)v172 + 4);
    if (*((void *)v172 + 3) - (void)v174 > 0x30uLL)
    {
      qmemcpy(v174, "No illegal uses found by SafepointIRVerifier in: ", 49);
      *((void *)v172 + 4) += 49;
    }
    else
    {
      llvm::raw_ostream::write(v172, "No illegal uses found by SafepointIRVerifier in: ", 0x31uLL);
    }
    if ((*((unsigned char *)v296 + 23) & 0x10) == 0) {
      goto LABEL_438;
    }
    uint64_t v175 = ***(void ***)v296;
    uint64_t v176 = *(void *)(v175 + 152);
    uint64_t v177 = *(unsigned int *)(v175 + 168);
    if (v177)
    {
      LODWORD(v178) = (v177 - 1) & ((v296 >> 4) ^ (v296 >> 9));
      uint64_t v179 = (llvm **)(v176 + 16 * v178);
      uint64_t v180 = *v179;
      if (*v179 == v296)
      {
LABEL_436:
        uint64_t v285 = (size_t *)v179[1];
        size_t v288 = *v285;
        uint64_t v286 = v285 + 2;
        size_t v287 = v288;
        uint64_t v289 = (unsigned char *)*((void *)v173 + 4);
        if (v288 <= *((void *)v173 + 3) - (void)v289)
        {
          if (v287)
          {
            memcpy(v289, v286, v287);
            uint64_t v289 = (unsigned char *)(*((void *)v173 + 4) + v287);
            *((void *)v173 + 4) = v289;
          }
          goto LABEL_441;
        }
        llvm::raw_ostream::write(v173, (const char *)v286, v287);
LABEL_438:
        uint64_t v289 = (unsigned char *)*((void *)v173 + 4);
LABEL_441:
        if (*((unsigned char **)v173 + 3) == v289)
        {
          llvm::raw_ostream::write(v173, "\n", 1uLL);
        }
        else
        {
          *uint64_t v289 = 10;
          ++*((void *)v173 + 4);
        }
        goto LABEL_443;
      }
      int v181 = 1;
      while (v180 != (llvm *)-4096)
      {
        int v182 = v178 + v181++;
        uint64_t v178 = v182 & (v177 - 1);
        uint64_t v180 = *(llvm **)(v176 + 16 * v178);
        if (v180 == v296)
        {
          uint64_t v179 = (llvm **)(v176 + 16 * v178);
          goto LABEL_436;
        }
      }
    }
    uint64_t v179 = (llvm **)(v176 + 16 * v177);
    goto LABEL_436;
  }
LABEL_443:
  MEMORY[0x1D25D9CD0](v324, 8);
  MEMORY[0x1D25D9CD0](v322[0], 8);
  MEMORY[0x1D25D9CD0](v321[3], 8);
  sub_1CD5D8B0C((uint64_t)&v315);
  if (v318)
  {
    uint64_t v290 = (uint64_t *)v317;
    uint64_t v291 = 8 * v318;
    do
    {
      uint64_t v292 = *v290++;
      MEMORY[0x1D25D9CD0](v292, 8);
      v291 -= 8;
    }
    while (v291);
  }
  uint64_t v293 = (uint64_t *)v320;
  if (LODWORD(v321[0]))
  {
    uint64_t v294 = 16 * LODWORD(v321[0]);
    do
    {
      uint64_t v295 = *v293;
      v293 += 2;
      MEMORY[0x1D25D9CD0](v295, 8);
      v294 -= 16;
    }
    while (v294);
    uint64_t v293 = (uint64_t *)v320;
  }
  if (v293 != &v321[1]) {
    free(v293);
  }
  if (v317 != v319) {
    free(v317);
  }
}

void llvm::verifySafepointIR(llvm *this, llvm::Function *a2)
{
  sub_1CC61C1F0((uint64_t)v3);
  sub_1CC61C2A0((uint64_t)v3, this);
  llvm::Pass::~Pass((llvm::Pass *)v3);
}

uint64_t sub_1CC61C1F0(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCD8DE8;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)a1 = &unk_1F2617FF0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD8DF0, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC61C3E0;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCD8DF0, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t sub_1CC61C2A0(uint64_t a1, llvm *a2)
{
  __n128 v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::DominatorTreeWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::DominatorTreeWrapperPass::ID) + 32;
  uint64_t v9 = 0;
  v10[0] = 0;
  int v11 = 0;
  v10[1] = 0;
  long long v12 = 0u;
  memset(v13, 0, 28);
  memset(&v13[4], 0, 24);
  sub_1CC61A310(&v9, (uint64_t)a2, v7);
  sub_1CC61A9E0(a2, v7, (uint64_t)&v9);
  sub_1CD456CB4(&v13[1]);
  sub_1CD456CB4(v10);
  return 0;
}

void llvm::createSafepointIRVerifierPass(llvm *this)
{
}

void sub_1CC61C3E0(uint64_t a1)
{
}

void sub_1CC61C480(void *a1, void *a2)
{
  sub_1CD4201D0((uint64_t)a1, a2, (uint64_t)v15);
  if (v15[16])
  {
    uint64_t v5 = (void *)a1[4];
    unint64_t v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = (void *)a1[3];
      uint64_t v8 = v5 - v7;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 61) {
          sub_1CB833614();
        }
        long long v12 = (char *)operator new(8 * v11);
      }
      else
      {
        long long v12 = 0;
      }
      uint64_t v13 = &v12[8 * v8];
      *(void *)uint64_t v13 = *a2;
      uint64_t v6 = v13 + 8;
      if (v5 != v7)
      {
        do
        {
          uint64_t v14 = *--v5;
          *((void *)v13 - 1) = v14;
          v13 -= 8;
        }
        while (v5 != v7);
        uint64_t v5 = (void *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *uint64_t v5 = *a2;
      uint64_t v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

BOOL sub_1CC61C590(void *a1, void *a2)
{
  sub_1CD4201D0((uint64_t)a1, a2, (uint64_t)&v17);
  int v4 = v18;
  if (v18)
  {
    uint64_t v6 = (void *)a1[4];
    unint64_t v5 = a1[5];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (void *)a1[3];
      uint64_t v9 = v6 - v8;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          sub_1CB833614();
        }
        uint64_t v13 = (char *)operator new(8 * v12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = &v13[8 * v9];
      *(void *)uint64_t v14 = *a2;
      uint64_t v7 = v14 + 8;
      if (v6 != v8)
      {
        do
        {
          uint64_t v15 = *--v6;
          *((void *)v14 - 1) = v15;
          v14 -= 8;
        }
        while (v6 != v8);
        uint64_t v6 = (void *)a1[3];
      }
      a1[3] = v14;
      a1[4] = v7;
      a1[5] = &v13[8 * v12];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *uint64_t v6 = *a2;
      uint64_t v7 = v6 + 1;
    }
    a1[4] = v7;
  }
  return v4 != 0;
}

uint64_t sub_1CC61C6B0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  while (1)
  {
    uint64_t v3 = *(void *)(v2 + 24);
    unsigned int v4 = *(unsigned __int8 *)(v3 + 16);
    BOOL v5 = v3 && v4 >= 0x1C;
    if (v5 && v4 - 29 < 0xB) {
      break;
    }
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return 0;
    }
  }
  uint64_t v8 = (uint64_t *)(a1 + 8);
  uint64_t v9 = (uint64_t *)(a1 + 56);
LABEL_15:
  int v10 = *(_DWORD *)(v3 + 20);
  if ((v10 & 0x40000000) != 0) {
    uint64_t v11 = *(void *)(v3 - 8);
  }
  else {
    uint64_t v11 = v3 - 32 * (v10 & 0x7FFFFFF);
  }
  uint64_t v12 = *(void *)(v3 + 40);
  uint64_t v16 = 0;
  uint64_t v17 = v12;
  if ((sub_1CD420258(v8, &v17, &v16) & 1) != 0
    || (uint64_t v16 = 0, v17 = v11 + ((v2 - v11) & 0x1FFFFFFFE0), sub_1CD420258(v9, &v17, &v16)))
  {
    while (1)
    {
      uint64_t v2 = *(void *)(v2 + 8);
      if (!v2) {
        return 0;
      }
      uint64_t v3 = *(void *)(v2 + 24);
      unsigned int v13 = *(unsigned __int8 *)(v3 + 16);
      if (v3) {
        BOOL v14 = v13 >= 0x1C;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14 && v13 - 29 < 0xB) {
        goto LABEL_15;
      }
    }
  }
  return 1;
}

void sub_1CC61C7A8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC61C7E0()
{
  return "safepoint verifier";
}

void sub_1CC61C7F0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

void sub_1CC61C828()
{
}

_DWORD *sub_1CC61C864(uint64_t *a1, unsigned char *a2, _DWORD *a3)
{
  if (sub_1CC27FA84((uint64_t)a1))
  {
    *a2 = 1;
    return sub_1CD47558C(a3);
  }
  else
  {
    uint64_t result = (_DWORD *)sub_1CC61C9B0(*a1);
    if (result)
    {
      uint64_t v7 = a1;
      return (_DWORD *)sub_1CD48410C((uint64_t)a3, (uint64_t *)&v7, (uint64_t)v8);
    }
  }
  return result;
}

unsigned char *sub_1CC61C8FC(unsigned char *result, int a2)
{
  uint64_t v2 = (uint64_t)result;
  if (result[72])
  {
    if (a2)
    {
      uint64_t v3 = (uint64_t)(result + 24);
      return sub_1CBFCB9AC(v3, v2 + 48);
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    sub_1CBFCB9AC((uint64_t)&v4, (uint64_t)(result + 48));
    sub_1CD5D87E0(&v4, v2);
    MEMORY[0x1D25D9CD0](*(void *)(v2 + 24), 8);
    *(void *)(v2 + 24) = v4;
    *(void *)(v2 + 32) = v5;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    *(_DWORD *)(v2 + 40) = v6;
    int v6 = 0;
    return (unsigned char *)MEMORY[0x1D25D9CD0](0, 8);
  }
  return result;
}

uint64_t sub_1CC61C9B0(uint64_t a1)
{
  while (1)
  {
    if (a1 && *(_DWORD *)(a1 + 8) == 271) {
      return 1;
    }
    if ((*(_DWORD *)(a1 + 8) & 0xFE) == 0x12)
    {
      uint64_t v3 = **(void **)(a1 + 16);
      if (v3) {
        BOOL v4 = *(_DWORD *)(v3 + 8) == 15;
      }
      else {
        BOOL v4 = 0;
      }
      if (v4) {
        return (*(_DWORD *)(v3 + 8) & 0xFFFFFF00) == 256;
      }
      return 0;
    }
    int v1 = *(_DWORD *)(a1 + 8);
    if (v1 != 17) {
      break;
    }
    a1 = *(void *)(a1 + 24);
  }
  if (v1 != 16 || a1 == 0) {
    return 0;
  }
  uint64_t v5 = *(unsigned int *)(a1 + 12);
  if (!v5) {
    return 0;
  }
  int v6 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = 8 * v5 - 8;
  do
  {
    uint64_t v8 = *v6++;
    uint64_t result = sub_1CC61C9B0(v8);
    if (result) {
      break;
    }
    uint64_t v9 = v7;
    v7 -= 8;
  }
  while (v9);
  return result;
}

void *sub_1CC61CA7C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v6 = *(_DWORD *)(a2 + 16);
  if (!v6)
  {
    uint64_t v16 = 0;
LABEL_16:
    uint64_t result = sub_1CBFE4230(a2, (uint64_t)a3, a3, v16);
    *uint64_t result = *a3;
    uint64_t v7 = *(void *)a2;
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    char v15 = 1;
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)a2;
  unsigned int v8 = ((*a3 >> 4) ^ (*a3 >> 9)) & (v6 - 1);
  uint64_t result = (void *)(*(void *)a2 + 8 * v8);
  uint64_t v10 = *result;
  if (*a3 != *result)
  {
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != -4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == -8192;
      }
      if (v13) {
        uint64_t v11 = result;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & (v6 - 1);
      uint64_t result = (void *)(v7 + 8 * v8);
      uint64_t v10 = *result;
      if (*a3 == *result) {
        goto LABEL_11;
      }
    }
    if (v11) {
      uint64_t v16 = v11;
    }
    else {
      uint64_t v16 = result;
    }
    goto LABEL_16;
  }
LABEL_11:
  char v15 = 0;
LABEL_12:
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v7 + 8 * v6;
  *(unsigned char *)(a1 + 16) = v15;
  return result;
}

uint64_t sub_1CC61CB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = a2;
  while (1)
  {
    uint64_t v5 = *(void *)(v4 + 24);
    unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
    BOOL v7 = v5 && v6 >= 0x1C;
    if (v7 && v6 - 29 < 0xB) {
      break;
    }
    uint64_t v4 = *(void *)(v4 + 8);
    if (!v4) {
      return 0;
    }
  }
  uint64_t v10 = (uint64_t *)(a1 + 56);
LABEL_15:
  if (*(void *)(v5 + 40) != a3
    || ((int v14 = *(_DWORD *)(v5 + 20), (v14 & 0x40000000) != 0)
      ? (uint64_t v15 = *(void *)(v5 - 8))
      : (uint64_t v15 = v5 - 32 * (v14 & 0x7FFFFFF)),
        uint64_t v16 = 0,
        uint64_t v17 = v15 + ((v4 - v15) & 0x1FFFFFFFE0),
        sub_1CD420258(v10, &v17, &v16)))
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (!v4) {
        return 0;
      }
      uint64_t v5 = *(void *)(v4 + 24);
      unsigned int v11 = *(unsigned __int8 *)(v5 + 16);
      if (v5) {
        BOOL v12 = v11 >= 0x1C;
      }
      else {
        BOOL v12 = 0;
      }
      if (v12 && v11 - 29 < 0xB) {
        goto LABEL_15;
      }
    }
  }
  return 1;
}

uint64_t sub_1CC61CC4C(uint64_t a1)
{
  unsigned char v34[32] = *MEMORY[0x1E4F143B8];
  int64x2_t v31 = v34;
  unsigned int v33 = 32;
  v29[0] = 0;
  v29[1] = 0;
  int v30 = 0;
  v34[0] = a1;
  char v1 = 1;
  unsigned int v2 = 1;
  do
  {
    while (1)
    {
      uint64_t v28 = 0;
      uint64_t v3 = (llvm::Value *)*((void *)v31 + v2 - 1);
      unsigned int v32 = v2 - 1;
      uint64_t v28 = v3;
      if (!v30)
      {
        unsigned int v11 = 0;
        goto LABEL_17;
      }
      unsigned int v4 = (v30 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v5 = (llvm::Value **)(v29[0] + 8 * v4);
      unsigned int v6 = *v5;
      if (v3 != *v5) {
        break;
      }
LABEL_12:
      unsigned int v2 = v32;
      if (!v32) {
        goto LABEL_51;
      }
    }
    BOOL v7 = 0;
    int v8 = 1;
    while (v6 != (llvm::Value *)-4096)
    {
      if (v7) {
        BOOL v9 = 0;
      }
      else {
        BOOL v9 = v6 == (llvm::Value *)-8192;
      }
      if (v9) {
        BOOL v7 = v5;
      }
      unsigned int v10 = v4 + v8++;
      unsigned int v4 = v10 & (v30 - 1);
      uint64_t v5 = (llvm::Value **)(v29[0] + 8 * v4);
      unsigned int v6 = *v5;
      if (v3 == *v5) {
        goto LABEL_12;
      }
    }
    if (v7) {
      unsigned int v11 = v7;
    }
    else {
      unsigned int v11 = v5;
    }
LABEL_17:
    BOOL v12 = sub_1CBFE4230((uint64_t)v29, (uint64_t)&v28, (uint64_t *)&v28, v11);
    *BOOL v12 = v28;
    BOOL v13 = v28;
    unsigned int v14 = *((unsigned __int8 *)v28 + 16);
    if (v28)
    {
      if (v14 >= 0x1C && v14 - 79 >= 0xFFFFFFF3)
      {
        DerivedPtr = llvm::Value::stripPointerCasts(v28);
        goto LABEL_24;
      }
    }
    if (v28 && v14 == 62)
    {
      uint64_t v17 = (llvm::Value *)*((void *)v28 - 4 * (*((_DWORD *)v28 + 5) & 0x7FFFFFF));
      goto LABEL_28;
    }
    if (v28 && v14 == 83)
    {
      int v18 = *((_DWORD *)v28 + 5);
      if ((v18 & 0x40000000) != 0)
      {
        size_t v20 = (char *)*((void *)v28 - 1);
        uint64_t v19 = v18 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v19 = v18 & 0x7FFFFFF;
        size_t v20 = (char *)v28 - 32 * v19;
      }
      sub_1CBF74A6C((uint64_t)&v31, (uint64_t)v31 + 8 * v32, v20, &v20[32 * v19]);
      goto LABEL_12;
    }
    if (!v28 || v14 != 85)
    {
      if (!sub_1CC070820((uint64_t)v28))
      {
        unsigned int v25 = v28;
        if (*((unsigned __int8 *)v28 + 16) > 0x14u)
        {
          uint64_t v26 = 1;
          goto LABEL_54;
        }
        v1 &= v25 == llvm::Constant::getNullValue(*(llvm::Constant **)v28, v23, v24);
        goto LABEL_12;
      }
      DerivedPtr = (llvm::Value *)llvm::GCRelocateInst::getDerivedPtr(v13);
LABEL_24:
      uint64_t v17 = DerivedPtr;
LABEL_28:
      if (v32 >= (unint64_t)v33) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v31 + v32) = v17;
      goto LABEL_30;
    }
    if (v32 >= (unint64_t)v33) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v31 + v32) = *((void *)v28 - 8);
    unsigned int v21 = v32 + 1;
    unsigned int v32 = v21;
    uint64_t v22 = *((void *)v13 - 4);
    if (v21 >= v33) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v31 + v21) = v22;
LABEL_30:
    unsigned int v2 = v32 + 1;
    unsigned int v32 = v2;
  }
  while (v2);
LABEL_51:
  if (v1) {
    uint64_t v26 = 2;
  }
  else {
    uint64_t v26 = 3;
  }
LABEL_54:
  MEMORY[0x1D25D9CD0](v29[0], 8);
  if (v31 != v34) {
    free(v31);
  }
  return v26;
}

void sub_1CC61CF50(llvm *a1, llvm::Value *a2, llvm::Value *a3)
{
  unsigned int v6 = (llvm::raw_ostream *)llvm::errs(a1);
  BOOL v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0x27uLL)
  {
    qmemcpy(v7, "Illegal use of unrelocated value found!\n", 40);
    *((void *)v6 + 4) += 40;
  }
  else
  {
    unsigned int v6 = llvm::raw_ostream::write(v6, "Illegal use of unrelocated value found!\n", 0x28uLL);
  }
  int v8 = (llvm::raw_ostream *)llvm::errs(v6);
  BOOL v9 = v8;
  uint64_t v10 = *((void *)v8 + 4);
  if ((unint64_t)(*((void *)v8 + 3) - v10) > 4)
  {
    *(unsigned char *)(v10 + 4) = 32;
    *(_DWORD *)uint64_t v10 = 979789124;
    *((void *)v8 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v8, "Def: ", 5uLL);
  }
  llvm::Value::print(a2, v9, 0);
  BOOL v12 = (unsigned char *)*((void *)v9 + 4);
  if (*((unsigned char **)v9 + 3) == v12)
  {
    unsigned int v11 = llvm::raw_ostream::write(v9, "\n", 1uLL);
  }
  else
  {
    *BOOL v12 = 10;
    ++*((void *)v9 + 4);
  }
  BOOL v13 = (llvm::raw_ostream *)llvm::errs(v11);
  unsigned int v14 = v13;
  uint64_t v15 = *((void *)v13 + 4);
  if ((unint64_t)(*((void *)v13 + 3) - v15) > 4)
  {
    *(unsigned char *)(v15 + 4) = 32;
    *(_DWORD *)uint64_t v15 = 979727189;
    *((void *)v13 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v13, "Use: ", 5uLL);
  }
  llvm::Value::print(a3, v14, 0);
  uint64_t v16 = (unsigned char *)*((void *)v14 + 4);
  if (*((unsigned char **)v14 + 3) == v16)
  {
    llvm::raw_ostream::write(v14, "\n", 1uLL);
  }
  else
  {
    *uint64_t v16 = 10;
    ++*((void *)v14 + 4);
  }
  if (!byte_1EBCD8DA8) {
    abort();
  }
  *(unsigned char *)a1 = 1;
}

uint64_t sub_1CC61D114()
{
  char v1 = 0;
  unsigned int v2 = &v1;
  sub_1CD5D8C68(&v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, qword_1EBCD8D28, &dword_1CB82C000);
}

llvm::MDNode *sub_1CC61D168(uint64_t *a1, char *__s, unint64_t a3)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  if (__s) {
    size_t v7 = strlen(__s);
  }
  else {
    size_t v7 = 0;
  }
  v11[0] = llvm::MDString::get(a1, (unsigned __int8 *)__s, v7);
  int v8 = (llvm::ValueAsMetadata *)llvm::ConstantInt::get((llvm::ConstantInt *)(v6 + 1984), a3, 0);
  v11[1] = llvm::ValueAsMetadata::get(v8, v9);
  return llvm::MDTuple::getImpl((uint64_t)a1, v11, 2, 0, 1);
}

BOOL sub_1CC61D22C(BOOL result, char *__s)
{
  if (result)
  {
    if (*(_DWORD *)(result + 8) != 2) {
      return 0;
    }
    uint64_t v3 = *(void *)(result - 16);
    uint64_t v2 = *(void *)(result - 8);
    char v4 = *(unsigned char *)v3 | *(unsigned char *)v2;
    if (*(unsigned char *)v2) {
      uint64_t v2 = 0;
    }
    if (v4) {
      return 0;
    }
    uint64_t v5 = *(void **)(v3 + 8);
    if (*v5 != 13) {
      return 0;
    }
    uint64_t v6 = v5[3];
    uint64_t v7 = *(void *)((char *)v5 + 29);
    if (v6 != 0x46656C69666F7250 || v7 != 0x74616D726F46656CLL) {
      return 0;
    }
    uint64_t v10 = *(size_t **)(v2 + 8);
    size_t v13 = *v10;
    BOOL v12 = v10 + 3;
    size_t v11 = v13;
    if (__s)
    {
      if (v11 != strlen(__s)) {
        return 0;
      }
      if (!v11) {
        return 1;
      }
      return memcmp(v12, __s, v11) == 0;
    }
    else
    {
      return v11 == 0;
    }
  }
  return result;
}

BOOL sub_1CC61D31C(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v6 = *a2;
  if (**(unsigned char **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v6) == 4) {
    uint64_t v7 = *(unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * v6);
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = sub_1CC61DC3C(v7, "IsPartialProfile");
  if (!v8) {
    return 1;
  }
  uint64_t v9 = *((void *)v8 + 16);
  uint64_t v10 = (void *)(v9 + 24);
  if (*(_DWORD *)(v9 + 32) >= 0x41u) {
    uint64_t v10 = (void *)*v10;
  }
  *a3 = *v10;
  *a2 = v6 + 1;
  return (v6 + 1) < *(_DWORD *)(a1 + 8);
}

BOOL sub_1CC61D3B4(uint64_t a1, unsigned int *a2, double *a3)
{
  if (**(unsigned char **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2) == 4) {
    uint64_t v6 = *(unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8 * *a2);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = sub_1CC61DC3C(v6, "PartialProfileRatio");
  if (!v7) {
    return 1;
  }
  *a3 = llvm::APFloat::convertToDouble((llvm::APFloat *)(*((void *)v7 + 16) + 24));
  unsigned int v8 = *a2 + 1;
  *a2 = v8;
  return v8 < *(_DWORD *)(a1 + 8);
}

uint64_t sub_1CC61D440(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(_DWORD *)(result + 8) == 2)
    {
      uint64_t v2 = *(void *)(result - 16);
      if (!*(unsigned char *)v2)
      {
        uint64_t v3 = *(void **)(v2 + 8);
        if (*v3 == 15)
        {
          uint64_t v4 = v3[3];
          uint64_t v5 = *(void *)((char *)v3 + 31);
          if (v4 == 0x64656C6961746544 && v5 == 0x7972616D6D755364)
          {
            uint64_t v7 = *(void *)(result - 8);
            if (*(unsigned char *)v7 == 4)
            {
              uint64_t v8 = *(unsigned int *)(v7 + 8);
              if (!v8) {
                return 1;
              }
              uint64_t v10 = (void *)(v7 - 8 * v8);
              while (1)
              {
                size_t v11 = (unsigned char *)*v10;
                if (*(unsigned char *)*v10 != 4 || *((_DWORD *)v11 + 2) != 3) {
                  break;
                }
                uint64_t v12 = *((void *)v11 - 3);
                int v13 = **((unsigned __int8 **)v11 - 2);
                uint64_t v14 = v13 == 1 ? *((void *)v11 - 2) : 0;
                uint64_t v15 = (unsigned __int8 *)*((void *)v11 - 1);
                int v16 = *v15;
                uint64_t v17 = v16 == 1 ? v15 : 0;
                BOOL v18 = *(unsigned char *)v12 == 1 && v13 == 1;
                if (!v18 || v16 != 1) {
                  break;
                }
                uint64_t v20 = *(void *)(v12 + 128);
                unsigned int v21 = (void *)(v20 + 24);
                if (*(_DWORD *)(v20 + 32) >= 0x41u) {
                  unsigned int v21 = (void *)*v21;
                }
                uint64_t v22 = *(void *)(v14 + 128);
                unint64_t v23 = (void *)(v22 + 24);
                if (*(_DWORD *)(v22 + 32) >= 0x41u) {
                  unint64_t v23 = (void *)*v23;
                }
                uint64_t v24 = *((void *)v17 + 16);
                unsigned int v25 = (void *)(v24 + 24);
                if (*(_DWORD *)(v24 + 32) >= 0x41u) {
                  unsigned int v25 = (void *)*v25;
                }
                uint64_t v26 = (void *)*v21;
                uint64_t v27 = (void *)*v23;
                uint64_t v28 = (void *)*v25;
                int v30 = *(void **)(a2 + 8);
                unint64_t v29 = *(void *)(a2 + 16);
                if ((unint64_t)v30 >= v29)
                {
                  unsigned int v32 = *(void **)a2;
                  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v30 - *(void *)a2) >> 3);
                  unint64_t v34 = v33 + 1;
                  if (v33 + 1 > 0xAAAAAAAAAAAAAAALL) {
                    abort();
                  }
                  unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - (void)v32) >> 3);
                  if (2 * v35 > v34) {
                    unint64_t v34 = 2 * v35;
                  }
                  if (v35 >= 0x555555555555555) {
                    unint64_t v36 = 0xAAAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v36 = v34;
                  }
                  if (v36 > 0xAAAAAAAAAAAAAAALL) {
                    sub_1CB833614();
                  }
                  uint64_t v37 = 3 * v36;
                  uint64_t v38 = (char *)operator new(24 * v36);
                  uint64_t v39 = &v38[24 * v33];
                  *(_DWORD *)uint64_t v39 = v26;
                  *((void *)v39 + 1) = v27;
                  *((void *)v39 + 2) = v28;
                  if (v30 == v32)
                  {
                    uint64_t v41 = &v38[24 * v33];
                  }
                  else
                  {
                    uint64_t v40 = &v38[24 * v33];
                    do
                    {
                      uint64_t v41 = v40 - 24;
                      long long v42 = *(_OWORD *)(v30 - 3);
                      *((void *)v40 - 1) = *(v30 - 1);
                      *(_OWORD *)(v40 - 24) = v42;
                      v30 -= 3;
                      v40 -= 24;
                    }
                    while (v30 != v32);
                  }
                  int64x2_t v31 = v39 + 24;
                  *(void *)a2 = v41;
                  *(void *)(a2 + 8) = v39 + 24;
                  *(void *)(a2 + 16) = &v38[8 * v37];
                  if (v32) {
                    operator delete(v32);
                  }
                }
                else
                {
                  *(_DWORD *)int v30 = v26;
                  int64x2_t v31 = (char *)(v30 + 3);
                  v30[1] = v27;
                  v30[2] = v28;
                }
                *(void *)(a2 + 8) = v31;
                ++v10;
                uint64_t result = 1;
                if (v10 == (void *)v7) {
                  return result;
                }
              }
            }
          }
        }
      }
    }
    return 0;
  }
  return result;
}

llvm::raw_ostream *llvm::ProfileSummary::printSummary(llvm::ProfileSummary *this, llvm::raw_ostream *a2)
{
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 0x10)
  {
    *(unsigned char *)(v4 + 16) = 32;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"Total functions: ";
    *((void *)a2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Total functions: ", 0x11uLL);
  }
  sub_1CD098D14(a2, *((unsigned int *)this + 17), 0, 0, 0);
  uint64_t v5 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v5)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v6 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *uint64_t v5 = 10;
    uint64_t v6 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v6;
  }
  if (*((void *)a2 + 3) - (void)v6 > 0x17uLL)
  {
    qmemcpy(v6, "Maximum function count: ", 24);
    *((void *)a2 + 4) += 24;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Maximum function count: ", 0x18uLL);
  }
  sub_1CD098D14(a2, *((void *)this + 7), 0, 0, 0);
  uint64_t v7 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v7)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v8 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *uint64_t v7 = 10;
    uint64_t v8 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v8;
  }
  if (*((void *)a2 + 3) - (void)v8 > 0x14uLL)
  {
    qmemcpy(v8, "Maximum block count: ", 21);
    *((void *)a2 + 4) += 21;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Maximum block count: ", 0x15uLL);
  }
  sub_1CD098D14(a2, *((void *)this + 5), 0, 0, 0);
  uint64_t v9 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v9)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v10 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *uint64_t v9 = 10;
    uint64_t v10 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v10;
  }
  if (*((void *)a2 + 3) - (void)v10 > 0x17uLL)
  {
    qmemcpy(v10, "Total number of blocks: ", 24);
    *((void *)a2 + 4) += 24;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Total number of blocks: ", 0x18uLL);
  }
  sub_1CD098D14(a2, *((unsigned int *)this + 16), 0, 0, 0);
  size_t v11 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v11)
  {
    llvm::raw_ostream::write(a2, "\n", 1uLL);
    uint64_t v12 = (void *)*((void *)a2 + 4);
  }
  else
  {
    *size_t v11 = 10;
    uint64_t v12 = (void *)(*((void *)a2 + 4) + 1);
    *((void *)a2 + 4) = v12;
  }
  if (*((void *)a2 + 3) - (void)v12 > 0xCuLL)
  {
    qmemcpy(v12, "Total count: ", 13);
    *((void *)a2 + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Total count: ", 0xDuLL);
  }
  uint64_t result = sub_1CD098D14(a2, *((void *)this + 4), 0, 0, 0);
  uint64_t v14 = (unsigned char *)*((void *)a2 + 4);
  if (*((unsigned char **)a2 + 3) == v14)
  {
    return llvm::raw_ostream::write(a2, "\n", 1uLL);
  }
  else
  {
    *uint64_t v14 = 10;
    ++*((void *)a2 + 4);
  }
  return result;
}

llvm::raw_ostream *llvm::ProfileSummary::printDetailedSummary(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v4 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v4) > 0x11)
  {
    *(_WORD *)(v4 + 16) = 2618;
    *(_OWORD *)uint64_t v4 = *(_OWORD *)"Detailed summary:\n";
    *((void *)a2 + 4) += 18;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, "Detailed summary:\n", 0x12uLL);
  }
  uint64_t v5 = *(void *)(v3 + 8);
  for (uint64_t i = *(void *)(v3 + 16); v5 != i; v5 += 24)
  {
    sub_1CD098D14(a2, *(void *)(v5 + 16), 0, 0, 0);
    uint64_t v7 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v7 > 0x15uLL)
    {
      qmemcpy(v7, " blocks with count >= ", 22);
      *((void *)a2 + 4) += 22;
    }
    else
    {
      llvm::raw_ostream::write(a2, " blocks with count >= ", 0x16uLL);
    }
    sub_1CD098D14(a2, *(void *)(v5 + 8), 0, 0, 0);
    uint64_t v8 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v8 > 0xCuLL)
    {
      qmemcpy(v8, " account for ", 13);
      *((void *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, " account for ", 0xDuLL);
    }
    *(float *)&unsigned int v9 = (float)((float)*(unsigned int *)v5 / 1000000.0) * 100.0;
    v11[0] = &unk_1F2618090;
    v11[1] = "%0.6g";
    v11[2] = v9;
    this = llvm::raw_ostream::operator<<(a2, (uint64_t)v11);
    uint64_t v10 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v10 > 0x20uLL)
    {
      qmemcpy(v10, " percentage of the total counts.\n", 33);
      *((void *)a2 + 4) += 33;
    }
    else
    {
      this = llvm::raw_ostream::write(a2, " percentage of the total counts.\n", 0x21uLL);
    }
  }
  return this;
}

unsigned __int8 *sub_1CC61DC3C(unsigned __int8 *result, char *__s)
{
  if (!result) {
    return result;
  }
  uint64_t v2 = (uint64_t)result;
  if (*((_DWORD *)result + 2) != 2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = *(void *)(v2 - 16);
  uint64_t v3 = *(unsigned __int8 **)(v2 - 8);
  int v5 = *v3;
  if (v5 == 1) {
    uint64_t v6 = v3;
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(unsigned char *)v4) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 == 1;
  }
  if (v7)
  {
    unsigned int v9 = *(size_t **)(v4 + 8);
    size_t v12 = *v9;
    size_t v11 = v9 + 3;
    size_t v10 = v12;
    if (!__s)
    {
      BOOL v13 = v10 == 0;
LABEL_18:
      if (v13) {
        return v6;
      }
      else {
        return 0;
      }
    }
    if (v10 == strlen(__s))
    {
      if (!v10) {
        return v6;
      }
      BOOL v13 = memcmp(v11, __s, v10) == 0;
      goto LABEL_18;
    }
    return 0;
  }
  return result;
}

uint64_t llvm::extractProbe@<X0>(llvm *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1CC27D470((uint64_t)this);
  if (result)
  {
    uint64_t v6 = (void *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    uint64_t v7 = v6[4];
    uint64_t v8 = (void *)(v7 + 24);
    if (*(_DWORD *)(v7 + 32) >= 0x41u) {
      uint64_t v8 = (void *)*v8;
    }
    uint64_t v9 = v6[8];
    size_t v10 = (void *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u) {
      size_t v10 = (void *)*v10;
    }
    int v11 = *(_DWORD *)v8;
    int v12 = *(_DWORD *)v10;
    uint64_t v13 = v6[12];
    uint64_t v14 = (void *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u) {
      uint64_t v14 = (void *)*v14;
    }
    float v15 = (float)(unint64_t)*v14 * 5.421e-20;
    *(_DWORD *)a2 = v11;
    *(_DWORD *)(a2 + 4) = 0;
    *(_DWORD *)(a2 + 8) = v12;
    *(float *)(a2 + 12) = v15;
    *(unsigned char *)(a2 + 16) = 1;
    return result;
  }
  int v16 = *((unsigned __int8 *)this + 16);
  if (v16 == 84)
  {
    uint64_t v17 = *((void *)this - 4);
    if (!v17
      || *(unsigned char *)(v17 + 16)
      || *(void *)(v17 + 24) != *((void *)this + 9)
      || (*(unsigned char *)(v17 + 33) & 0x20) == 0)
    {
      goto LABEL_18;
    }
LABEL_17:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    return result;
  }
  if (v16 != 33 && v16 != 39) {
    goto LABEL_17;
  }
LABEL_18:

  return llvm::extractProbeFromDiscriminator((uint64_t)this, a2);
}

void llvm::setProbeDistributionFactor(llvm *this, llvm::Instruction *a2, float a3)
{
  v58[1] = *MEMORY[0x1E4F143B8];
  if (sub_1CC27D470((uint64_t)this))
  {
    uint64_t v5 = 0;
    uint64_t v6 = **(void **)this;
    v46[0] = v47;
    v46[1] = (void *)0x200000000;
    uint64_t v48 = v6;
    uint64_t v49 = &v57;
    uint64_t v50 = v58;
    uint64_t v51 = 0;
    int v52 = 0;
    __int16 v53 = 512;
    char v54 = 7;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    int v57 = &unk_1F2616E88;
    v58[0] = &unk_1F2617008;
    uint64_t v7 = (unsigned __int8 *)*((void *)this + 6);
    v47[4] = *((void *)this + 5);
    v47[5] = (char *)this + 24;
    uint64_t v43 = v7;
    if (v7)
    {
      llvm::MetadataTracking::track((uint64_t)&v43, v7, 2);
      uint64_t v5 = (uint64_t)v43;
    }
    sub_1CB8461A4((uint64_t)v46, 0, v5);
    if (!v43) {
      goto LABEL_5;
    }
    int v24 = *v43;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        uint64_t v27 = v43;
      }
      else {
        uint64_t v27 = 0;
      }
      if ((v24 - 3) < 0xFFFFFFFE)
      {
        if (v24 == 3) {
          *((void *)v43 + 1) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v26 = (unint64_t)(v27 + 8);
    }
    else
    {
      if ((v43[1] & 0x7F) != 2 && !*((_DWORD *)v43 + 3)) {
        goto LABEL_5;
      }
      uint64_t v25 = *((void *)v43 + 2);
      if ((v25 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      if (!v26) {
        goto LABEL_5;
      }
    }
    int v44 = &v43;
    sub_1CC5FA668(v26 + 16, &v44);
LABEL_5:
    unint64_t v9 = vcvts_n_u32_f32(a3, 0x40uLL);
    if (a3 >= 1.0) {
      unint64_t v9 = -1;
    }
    size_t v10 = (_DWORD *)((void *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[12];
    int v11 = v10 + 6;
    if (v10[8] >= 0x41u) {
      int v11 = (void *)*v11;
    }
    if (v9 != *v11)
    {
      int v12 = *(llvm::ConstantInt **)(*(void *)v48 + 1984);
      unsigned int v13 = *(_DWORD *)(*(void *)v48 + 1992);
      unsigned int v45 = v13 >> 8;
      if (v13 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v14 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v13) + 63);
      if (v13 <= 0xFF) {
        unint64_t v14 = 0;
      }
      int v44 = (unsigned __int8 **)(v14 & v9);
      float v15 = (llvm::Value *)llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v44, v8);
      if (v45 >= 0x41 && v44)
      {
        uint64_t v37 = v15;
        MEMORY[0x1D25D9CB0](v44, 0x1000C8000313F17);
        float v15 = v37;
      }
      llvm::User::replaceUsesOfWith(this, (llvm::Value *)v10, v15);
    }
    if (v46[0] != v47) {
      free(v46[0]);
    }
    return;
  }
  int v16 = *((unsigned __int8 *)this + 16);
  if (v16 != 33 && v16 != 39)
  {
    if (v16 != 84) {
      return;
    }
    uint64_t v17 = *((void *)this - 4);
    if (v17)
    {
      if (!*(unsigned char *)(v17 + 16) && *(void *)(v17 + 24) == *((void *)this + 9) && (*(unsigned char *)(v17 + 33) & 0x20) != 0) {
        return;
      }
    }
  }
  uint64_t v20 = *((void *)this + 6);
  uint64_t v19 = (unsigned __int8 **)((char *)this + 48);
  uint64_t v18 = v20;
  if (!v20) {
    return;
  }
  uint64_t v21 = *(void *)(v18 - 8 * *(unsigned int *)(v18 + 8));
  if (*(unsigned char *)v21 != 19) {
    return;
  }
  unsigned int v22 = *(_DWORD *)(v21 + 24);
  if (v22 < 8 || (v22 & 7) != 7) {
    return;
  }
  unsigned int v28 = ((float)(a3 * 100.0) << 19) | 7;
  int v29 = v22 & 0x1C07FFF8;
  if (a3 >= 1.0) {
    unsigned int v28 = 52428807;
  }
  int v30 = (unsigned __int8 *)sub_1CD5519E8(v18, v29 | v28);
  long long v42 = v30;
  if (v30) {
    llvm::MetadataTracking::track((uint64_t)&v42, v30, 2);
  }
  if (&v42 != v19)
  {
    int64x2_t v31 = *v19;
    if (!*v19) {
      goto LABEL_49;
    }
    int v33 = *v31;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        unint64_t v36 = *v19;
      }
      else {
        unint64_t v36 = 0;
      }
      if ((v33 - 3) < 0xFFFFFFFE)
      {
        if (v33 == 3) {
          *((void *)v31 + 1) = 0;
        }
        goto LABEL_49;
      }
      unint64_t v35 = (unint64_t)(v36 + 8);
    }
    else if ((v31[1] & 0x7F) != 2 && !*((_DWORD *)v31 + 3) {
           || (uint64_t v34 = *((void *)v31 + 2), (v34 & 4) == 0)
    }
           || (unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_49:
      unsigned int v32 = v42;
      void *v19 = v42;
      if (v32) {
        llvm::MetadataTracking::retrack((uint64_t)&v42, v32, (uint64_t)v19);
      }
      return;
    }
    v46[0] = v19;
    sub_1CC5FA668(v35 + 16, v46);
    goto LABEL_49;
  }
  if (!v42) {
    return;
  }
  int v38 = *v42;
  if ((v38 - 4) <= 0x1E)
  {
    if ((v42[1] & 0x7F) != 2 && !*((_DWORD *)v42 + 3)) {
      return;
    }
    uint64_t v39 = *((void *)v42 + 2);
    if ((v39 & 4) == 0) {
      return;
    }
    unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8;
    if (!v40) {
      return;
    }
LABEL_82:
    v46[0] = &v42;
    sub_1CC5FA668(v40 + 16, v46);
    return;
  }
  if ((v38 - 3) >= 0xFFFFFFFE) {
    uint64_t v41 = v42;
  }
  else {
    uint64_t v41 = 0;
  }
  if ((v38 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v40 = (unint64_t)(v41 + 8);
    goto LABEL_82;
  }
  if (v38 == 3) {
    *((void *)v42 + 1) = 0;
  }
}

void llvm::convertConstantExprsToInstructions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = v6;
  llvm::collectConstantExprPaths(a1, a2, (uint64_t **)&v5);
  llvm::convertConstantExprsToInstructions(a1, (uint64_t)&v5, a3);
  sub_1CC6202C0(v6[0]);
}

void llvm::collectConstantExprPaths(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  int v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    uint64_t v5 = *(uint64_t **)(a1 - 8);
    uint64_t v4 = v3 & 0x7FFFFFF;
    if (!v4) {
      return;
    }
  }
  else
  {
    uint64_t v4 = v3 & 0x7FFFFFF;
    uint64_t v5 = (uint64_t *)(a1 - 32 * v4);
    if (!v4) {
      return;
    }
  }
  uint64_t v6 = &v5[4 * v4];
  unint64_t v70 = v6;
  do
  {
    uint64_t v7 = *v5;
    if (*v5) {
      BOOL v8 = *(unsigned char *)(*v5 + 16) == 5;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      goto LABEL_97;
    }
    uint64_t v71 = v5;
    unsigned int v77 = 0;
    uint64_t v78 = 0;
    unint64_t v79 = 0;
    unint64_t v9 = (char *)operator new(0x18uLL);
    size_t v10 = v9 + 24;
    unint64_t v74 = (const void ***)v9;
    uint64_t v76 = v9 + 24;
    int v11 = (uint64_t *)operator new(8uLL);
    *(void *)unint64_t v9 = v11;
    *v11++ = v7;
    *((void *)v9 + 1) = v11;
    *((void *)v9 + 2) = v11;
    char v75 = v9 + 24;
    int v12 = (char *)v74;
    while (v12 != v10)
    {
      float v15 = (unsigned char *)*((void *)v10 - 3);
      unsigned int v13 = (unsigned char *)*((void *)v10 - 2);
      unint64_t v14 = (void **)(v10 - 24);
      int64_t v16 = v13 - v15;
      if (v13 == v15)
      {
        uint64_t v17 = 0;
        uint64_t v73 = 0;
        if (v15) {
          goto LABEL_16;
        }
      }
      else
      {
        if (v16 < 0) {
          goto LABEL_99;
        }
        uint64_t v17 = operator new(v13 - v15);
        uint64_t v73 = (uint64_t)v17 + 8 * (v16 >> 3);
        memmove(v17, v15, v16);
        float v15 = *v14;
        if (*v14)
        {
LABEL_16:
          *((void *)v10 - 2) = v15;
          operator delete(v15);
        }
      }
      char v75 = v10 - 24;
      uint64_t v18 = *(void *)(v73 - 8);
      if (v18 == a2)
      {
        unsigned int v22 = v78;
        if ((unint64_t)v78 >= v79)
        {
          unint64_t v23 = (const void **)sub_1CC620324((char **)&v77, v17, v73);
        }
        else
        {
          *uint64_t v78 = 0;
          v22[1] = 0;
          v22[2] = 0;
          sub_1CBFCBA2C(v22, v17, v73, (v73 - (uint64_t)v17) >> 3);
          unint64_t v23 = v22 + 3;
        }
        uint64_t v78 = v23;
        if (v17) {
          goto LABEL_55;
        }
      }
      else
      {
        int v19 = *(_DWORD *)(v18 + 20);
        if ((v19 & 0x40000000) != 0)
        {
          uint64_t v21 = *(uint64_t **)(v18 - 8);
          uint64_t v20 = v19 & 0x7FFFFFF;
          if (v20)
          {
LABEL_26:
            size_t v24 = v73 - (void)v17;
            for (uint64_t i = 32 * v20; i; i -= 32)
            {
              uint64_t v26 = *v21;
              if (*v21) {
                BOOL v27 = *(unsigned char *)(*v21 + 16) == 5;
              }
              else {
                BOOL v27 = 0;
              }
              if (v27)
              {
                if ((void *)v73 == v17)
                {
                  unsigned int v28 = 0;
                  int v29 = 0;
                }
                else
                {
                  if ((v24 & 0x8000000000000000) != 0) {
                    goto LABEL_99;
                  }
                  unsigned int v28 = (char *)operator new(v24);
                  int v29 = &v28[8 * ((v73 - (uint64_t)v17) >> 3)];
                  memcpy(v28, v17, v24);
                }
                uint64_t v30 = v29 - v28;
                uint64_t v31 = (v29 - v28) >> 3;
                unint64_t v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61) {
                  goto LABEL_99;
                }
                if (v30 >> 2 > v32) {
                  unint64_t v32 = v30 >> 2;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
                }
                if (v32)
                {
                  if (v32 >> 61) {
                    sub_1CB833614();
                  }
                  int v33 = (char *)operator new(8 * v32);
                }
                else
                {
                  int v33 = 0;
                }
                uint64_t v34 = &v33[8 * v31];
                *(void *)uint64_t v34 = v26;
                uint64_t v35 = (uint64_t)(v34 + 8);
                if (v29 != v28)
                {
                  unint64_t v36 = (v29 - 8 - v28) & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v34 = &v33[v30 - v36 - 8];
                  memcpy(v34, &v29[-v36 - 8], v36 + 8);
                }
                if (v28) {
                  operator delete(v28);
                }
                uint64_t v37 = v75;
                if (v75 >= v76)
                {
                  int v38 = (char *)sub_1CC620324((char **)&v74, v34, v35);
                }
                else
                {
                  *(void *)char v75 = 0;
                  *((void *)v37 + 1) = 0;
                  *((void *)v37 + 2) = 0;
                  sub_1CBFCBA2C(v37, v34, v35, (v35 - (uint64_t)v34) >> 3);
                  int v38 = v37 + 24;
                }
                char v75 = v38;
                operator delete(v34);
              }
              v21 += 4;
            }
          }
        }
        else
        {
          uint64_t v20 = v19 & 0x7FFFFFF;
          uint64_t v21 = (uint64_t *)(v18 - 32 * v20);
          if (v20) {
            goto LABEL_26;
          }
        }
        if (v17) {
LABEL_55:
        }
          operator delete(v17);
      }
      int v12 = (char *)v74;
      size_t v10 = v75;
    }
    uint64_t v5 = v71;
    if (v77 != v78)
    {
      unint64_t v80 = (char **)v71;
      uint64_t v39 = sub_1CD4F40F4(a3, (unint64_t)v71, (uint64_t **)&v80);
      unint64_t v40 = v39 + 5;
      if (v39 + 5 != (uint64_t **)&v77)
      {
        uint64_t v41 = v39;
        uint64_t v43 = v77;
        long long v42 = v78;
        unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * (v78 - v77);
        uint64_t v45 = (uint64_t)v39[7];
        uint64_t v46 = (uint64_t)v39[5];
        if (0xAAAAAAAAAAAAAAABLL * ((v45 - v46) >> 3) >= v44)
        {
          if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39[6] - v46) >> 3) >= v44)
          {
            unsigned int v64 = sub_1CC620498(v77, v78, v46);
            unsigned int v65 = (char **)v41[6];
            if (v65 != v64)
            {
              uint64_t v66 = (char **)v41[6];
              do
              {
                int v68 = *(v66 - 3);
                v66 -= 3;
                int v67 = v68;
                if (v68)
                {
                  *(v65 - 2) = v67;
                  operator delete(v67);
                }
                unsigned int v65 = v66;
              }
              while (v66 != v64);
            }
            v41[6] = (uint64_t *)v64;
          }
          else
          {
            size_t v59 = (char *)&v77[((uint64_t)v39[6] - v46) >> 3];
            sub_1CC620498(v77, (const void **)v59, v46);
            uint64_t v60 = v41[6];
            if (v59 != (char *)v42)
            {
              uint64_t v61 = v41[6];
              do
              {
                uint64_t *v61 = 0;
                v61[1] = 0;
                v61[2] = 0;
                int v62 = *(const void **)v59;
                uint64_t v63 = *((void *)v59 + 1);
                v59 += 24;
                sub_1CBFCBA2C(v61, v62, v63, (v63 - (uint64_t)v62) >> 3);
                v61 += 3;
                v60 += 3;
              }
              while (v59 != (char *)v42);
            }
            v41[6] = v60;
          }
          uint64_t v5 = v71;
        }
        else
        {
          if (v46)
          {
            uint64_t v47 = v39[6];
            uint64_t v48 = v39[5];
            if (v47 != (uint64_t *)v46)
            {
              uint64_t v49 = v41[6];
              do
              {
                uint64_t v51 = (void *)*(v49 - 3);
                v49 -= 3;
                uint64_t v50 = v51;
                if (v51)
                {
                  *(v47 - 2) = (uint64_t)v50;
                  operator delete(v50);
                }
                uint64_t v47 = v49;
              }
              while (v49 != (uint64_t *)v46);
              uint64_t v48 = *v40;
            }
            v41[6] = (uint64_t *)v46;
            operator delete(v48);
            uint64_t v45 = 0;
            char *v40 = 0;
            v40[1] = 0;
            v40[2] = 0;
          }
          if (v44 > 0xAAAAAAAAAAAAAAALL) {
            goto LABEL_99;
          }
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (v45 >> 3);
          uint64_t v53 = 2 * v52;
          if (2 * v52 <= v44) {
            uint64_t v53 = v44;
          }
          unint64_t v54 = v52 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v53;
          if (v54 > 0xAAAAAAAAAAAAAAALL) {
LABEL_99:
          }
            abort();
          uint64_t v55 = 3 * v54;
          uint64_t v56 = (uint64_t *)operator new(24 * v54);
          v41[5] = v56;
          v41[6] = v56;
          v41[7] = &v56[v55];
          if (v43 == v42)
          {
            uint64_t v5 = v71;
          }
          else
          {
            uint64_t v5 = v71;
            do
            {
              *uint64_t v56 = 0;
              v56[1] = 0;
              void v56[2] = 0;
              int v57 = *v43;
              uint64_t v58 = (uint64_t)v43[1];
              v43 += 3;
              sub_1CBFCBA2C(v56, v57, v58, (v58 - (uint64_t)v57) >> 3);
              v56 += 3;
            }
            while (v43 != v42);
          }
          v41[6] = v56;
        }
      }
    }
    unint64_t v80 = (char **)&v74;
    sub_1CBF7EDF0((void ***)&v80);
    unint64_t v74 = &v77;
    sub_1CBF7EDF0((void ***)&v74);
    uint64_t v6 = v70;
LABEL_97:
    v5 += 4;
  }
  while (v5 != v6);
}

uint64_t llvm::convertConstantExprsToInstructions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v76 = 128;
  unint64_t v74 = operator new(0x1800uLL, (std::align_val_t)8uLL);
  sub_1CC620264((uint64_t *)&v74);
  LOBYTE(v77[0]) = 0;
  char v78 = 0;
  int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v70 = a1;
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t v7 = *(uint64_t **)(a1 - 8);
    uint64_t v6 = v5 & 0x7FFFFFF;
    if (!v6) {
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  uint64_t v6 = v5 & 0x7FFFFFF;
  uint64_t v7 = (uint64_t *)(a1 - 32 * v6);
  if (v6)
  {
LABEL_5:
    uint64_t v71 = &v7[4 * v6];
    do
    {
      BOOL v8 = *(void **)(a2 + 8);
      if (!v8) {
        goto LABEL_84;
      }
      do
      {
        unint64_t v9 = v8[4];
        if ((unint64_t)v7 < v9) {
          goto LABEL_10;
        }
        if (v9 >= (unint64_t)v7)
        {
          AsInstructiouint64_t n = (llvm::Instruction *)v70;
          if (*(unsigned char *)(v70 + 16) == 83)
          {
            int v11 = *(_DWORD *)(v70 + 20);
            if ((v11 & 0x40000000) != 0) {
              uint64_t v12 = *(void *)(v70 - 8);
            }
            else {
              uint64_t v12 = v70 - 32 * (v11 & 0x7FFFFFF);
            }
            uint64_t v13 = *(void *)(v12
                            + 32 * *(unsigned int *)(v70 + 60)
                            + 8 * (((unint64_t)v7 - v12) >> 5));
            uint64_t v14 = v13 + 40;
            for (uint64_t i = *(void *)(v13 + 48); ; uint64_t i = *(void *)(i + 8))
            {
              if (i == v14) {
                goto LABEL_28;
              }
              uint64_t v16 = i - 24;
              if (!i) {
                uint64_t v16 = 0;
              }
              if (*(unsigned char *)(v16 + 16) != 83) {
                break;
              }
            }
            unsigned int v17 = *(unsigned __int8 *)(i - 8) - 38;
            BOOL v18 = v17 > 0x38;
            uint64_t v19 = (1 << v17) & 0x100060000000001;
            if (v18 || v19 == 0) {
              uint64_t v14 = i;
            }
            else {
              uint64_t v14 = *(void *)(i + 8);
            }
LABEL_28:
            if (v14) {
              AsInstructiouint64_t n = (llvm::Instruction *)(v14 - 24);
            }
            else {
              AsInstructiouint64_t n = 0;
            }
          }
          uint64_t v73 = v7;
          uint64_t v21 = sub_1CD4F40F4((uint64_t **)a2, (unint64_t)v7, &v73);
          unsigned int v22 = v21[5];
          unint64_t v23 = v21[6];
          if (v22 == v23) {
            break;
          }
          size_t v24 = (llvm::User *)v70;
LABEL_33:
          uint64_t v25 = (int32x2_t *****)*v22;
          uint64_t v26 = (int32x2_t *****)v22[1];
          while (1)
          {
            if (v25 == v26)
            {
              v22 += 3;
              if (v22 == v23) {
                goto LABEL_84;
              }
              goto LABEL_33;
            }
            BOOL v27 = *v25;
            if (v76)
            {
              unsigned int v28 = ((v27 >> 4) ^ (v27 >> 9)) & (v76 - 1);
              int v29 = &v74[6 * v28];
              uint64_t v30 = (int32x2_t ****)v29[3];
              if (v30 == v27)
              {
LABEL_37:
                if (v29 != &v74[6 * v76])
                {
                  AsInstructiouint64_t n = *(llvm::Instruction **)sub_1CC61EEB4((uint64_t)&v74, *v25);
                  goto LABEL_76;
                }
              }
              else
              {
                int v31 = 1;
                while (v30 != (int32x2_t ****)-4096)
                {
                  unsigned int v32 = v28 + v31++;
                  unsigned int v28 = v32 & (v76 - 1);
                  int v29 = &v74[6 * v28];
                  uint64_t v30 = (int32x2_t ****)v29[3];
                  if (v30 == v27) {
                    goto LABEL_37;
                  }
                }
              }
            }
            AsInstructiouint64_t n = (llvm::Instruction *)llvm::ConstantExpr::getAsInstruction((llvm::ConstantExpr *)*v25, AsInstruction);
            *(void *)sub_1CC61EEB4((uint64_t)&v74, v27) = AsInstruction;
            if (a3)
            {
              uint64_t v33 = *(void *)(a3 + 8);
              uint64_t v34 = *(unsigned int *)(a3 + 20);
              if (v33 != *(void *)a3)
              {
                unsigned int v38 = *(_DWORD *)(a3 + 16);
                goto LABEL_55;
              }
              if (!v34)
              {
LABEL_52:
                unsigned int v38 = *(_DWORD *)(a3 + 16);
                if (v34 < v38)
                {
                  *(_DWORD *)(a3 + 20) = v34 + 1;
                  *(void *)(v33 + 8 * v34) = AsInstruction;
                  goto LABEL_76;
                }
LABEL_55:
                if (3 * v38 <= 4 * ((int)v34 - *(_DWORD *)(a3 + 24)))
                {
                  if (v38 >= 0x40) {
                    v38 *= 2;
                  }
                  else {
                    unsigned int v38 = 128;
                  }
                }
                else if (v38 - v34 >= v38 >> 3)
                {
                  goto LABEL_57;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a3, v38);
                unsigned int v38 = *(_DWORD *)(a3 + 16);
                uint64_t v33 = *(void *)(a3 + 8);
LABEL_57:
                unsigned int v39 = v38 - 1;
                unsigned int v40 = (v38 - 1) & ((AsInstruction >> 4) ^ (AsInstruction >> 9));
                uint64_t v41 = (llvm::Instruction **)(v33 + 8 * v40);
                long long v42 = *v41;
                if (*v41 == (llvm::Instruction *)-1)
                {
                  uint64_t v43 = 0;
LABEL_69:
                  if (v43) {
                    uint64_t v47 = v43;
                  }
                  else {
                    uint64_t v47 = v41;
                  }
                  if (*v47 != AsInstruction)
                  {
                    if (*v47 == (llvm::Instruction *)-2) {
                      --*(_DWORD *)(a3 + 24);
                    }
                    else {
                      ++*(_DWORD *)(a3 + 20);
                    }
                    uint64_t *v47 = AsInstruction;
                  }
                }
                else
                {
                  uint64_t v43 = 0;
                  int v44 = 1;
                  while (v42 != AsInstruction)
                  {
                    if (v43) {
                      BOOL v45 = 0;
                    }
                    else {
                      BOOL v45 = v42 == (llvm::Instruction *)-2;
                    }
                    if (v45) {
                      uint64_t v43 = v41;
                    }
                    unsigned int v46 = v40 + v44++;
                    unsigned int v40 = v46 & v39;
                    uint64_t v41 = (llvm::Instruction **)(v33 + 8 * (v46 & v39));
                    long long v42 = *v41;
                    if (*v41 == (llvm::Instruction *)-1) {
                      goto LABEL_69;
                    }
                  }
                }
                goto LABEL_76;
              }
              uint64_t v35 = 0;
              uint64_t v36 = 8 * v34;
              uint64_t v37 = *(llvm::Instruction ***)(a3 + 8);
              while (*v37 != AsInstruction)
              {
                if (*v37 == (llvm::Instruction *)-2) {
                  uint64_t v35 = v37;
                }
                ++v37;
                v36 -= 8;
                if (!v36)
                {
                  if (!v35) {
                    goto LABEL_52;
                  }
                  *uint64_t v35 = AsInstruction;
                  --*(_DWORD *)(a3 + 24);
                  break;
                }
              }
            }
LABEL_76:
            llvm::User::replaceUsesOfWith(v24, (llvm::Value *)v27, AsInstruction);
            ++v25;
            size_t v24 = AsInstruction;
          }
        }
        ++v8;
LABEL_10:
        BOOL v8 = (void *)*v8;
      }
      while (v8);
LABEL_84:
      v7 += 4;
    }
    while (v7 != v71);
  }
LABEL_85:
  uint64_t v48 = (char *)&v74[6 * v76];
  if (v75)
  {
    if (v76)
    {
      uint64_t v49 = 48 * v76;
      uint64_t v50 = (uint64_t)v74;
      while ((*(void *)(v50 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v50 += 48;
        v49 -= 48;
        if (!v49) {
          goto LABEL_90;
        }
      }
    }
    else
    {
      uint64_t v50 = (uint64_t)v74;
    }
  }
  else
  {
LABEL_90:
    uint64_t v50 = (uint64_t)&v74[6 * v76];
  }
  uint64_t v51 = (char *)&v74[6 * v76];
LABEL_93:
  while ((char *)v50 != v51)
  {
    llvm::Constant::removeDeadConstantUsers(*(void *)(v50 + 24));
    uint64_t v52 = v50 + 48;
    uint64_t v50 = (uint64_t)v48;
    if ((char *)v52 != v48)
    {
      uint64_t v50 = v52;
      while ((*(void *)(v50 + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v50 += 48;
        if ((char *)v50 == v48)
        {
          uint64_t v50 = (uint64_t)v48;
          goto LABEL_93;
        }
      }
    }
  }
  if (v78)
  {
    sub_1CC009394((uint64_t)v77);
    MEMORY[0x1D25D9CD0](v77[0], 8);
    char v78 = 0;
  }
  uint64_t v53 = v74;
  if (v76)
  {
    unint64_t v54 = &v74[6 * v76];
    do
    {
      uint64_t v55 = v53[3];
      if (v55 != -8192 && v55 != -4096 && v55 != 0)
      {
        unint64_t v57 = v53[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v57 = v53[2];
        uint64_t v58 = (unint64_t *)v53[2];
        if (v58)
        {
          unint64_t *v58 = *v58 & 7 | v57;
        }
        else
        {
          uint64_t v59 = v53[3];
          uint64_t v60 = ***(int32x2_t ****)v59;
          unint64_t v61 = (unint64_t)v60[303];
          if (v61 <= v57)
          {
            uint64_t v62 = v60[305].u32[0];
            if (v61 + 16 * v62 > v57)
            {
              unsigned int v63 = v62 - 1;
              LODWORD(v64) = v63 & ((v59 >> 4) ^ (v59 >> 9));
              unsigned int v65 = (uint64_t *)(v61 + 16 * v64);
              uint64_t v66 = *v65;
              if (v59 == *v65)
              {
LABEL_119:
                uint64_t *v65 = -8192;
                v60[304] = vadd_s32(v60[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v59 = v53[3];
              }
              else
              {
                int v67 = 1;
                while (v66 != -4096)
                {
                  int v68 = v64 + v67++;
                  uint64_t v64 = v68 & v63;
                  uint64_t v66 = *(void *)(v61 + 16 * v64);
                  if (v59 == v66)
                  {
                    unsigned int v65 = (uint64_t *)(v61 + 16 * v64);
                    goto LABEL_119;
                  }
                }
              }
              *(unsigned char *)(v59 + 17) &= ~1u;
            }
          }
        }
      }
      v53 += 6;
    }
    while (v53 != v54);
    uint64_t v53 = v74;
  }
  return MEMORY[0x1D25D9CD0](v53, 8);
}

uint64_t sub_1CC61EEB4(uint64_t a1, int32x2_t ****a2)
{
  uint64_t v2 = (uint64_t)a2;
  uint64_t v39 = 2;
  unsigned int v40 = 0;
  uint64_t v41 = a2;
  if (a2 != (int32x2_t ****)-8192 && a2 != (int32x2_t ****)-4096 && a2)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v39);
    uint64_t v2 = (uint64_t)v41;
  }
  unsigned int v38 = &unk_1F26180B0;
  uint64_t v42 = a1;
  uint64_t v43 = 0;
  char v4 = sub_1CC61FB80(*(void *)a1, *(_DWORD *)(a1 + 16), v2, &v43);
  uint64_t v5 = v43;
  if ((v4 & 1) == 0)
  {
    uint64_t v6 = (void *)sub_1CC61FC18(a1, (uint64_t)&v38, v43);
    uint64_t v5 = (uint64_t)v6;
    uint64_t v7 = (int32x2_t ****)v6[3];
    BOOL v8 = v41;
    if (v7 != v41)
    {
      BOOL v9 = v7 == (int32x2_t ****)-4096 || v7 == 0;
      if (!v9 && v7 != (int32x2_t ****)-8192)
      {
        unint64_t v25 = v6[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v25 = v6[2];
        uint64_t v26 = (unint64_t *)v6[2];
        if (v26)
        {
          unint64_t *v26 = *v26 & 7 | v25;
        }
        else
        {
          uint64_t v27 = v6[3];
          unsigned int v28 = ***(int32x2_t ****)v27;
          unint64_t v29 = (unint64_t)v28[303];
          if (v29 <= v25)
          {
            uint64_t v30 = v28[305].u32[0];
            if (v29 + 16 * v30 > v25)
            {
              unsigned int v31 = v30 - 1;
              LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
              uint64_t v33 = (uint64_t *)(v29 + 16 * v32);
              uint64_t v34 = *v33;
              if (v27 == *v33)
              {
LABEL_42:
                uint64_t *v33 = -8192;
                v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v27 = v6[3];
              }
              else
              {
                int v35 = 1;
                while (v34 != -4096)
                {
                  int v36 = v32 + v35++;
                  uint64_t v32 = v36 & v31;
                  uint64_t v34 = *(void *)(v29 + 16 * v32);
                  if (v27 == v34)
                  {
                    uint64_t v33 = (uint64_t *)(v29 + 16 * v32);
                    goto LABEL_42;
                  }
                }
              }
              *(unsigned char *)(v27 + 17) &= ~1u;
            }
          }
        }
        BOOL v8 = v41;
      }
      void v6[3] = v8;
      if (v8 != (int32x2_t ****)-4096 && v8 != (int32x2_t ****)-8192 && v8 != 0)
      {
        uint64_t v11 = v39;
        uint64_t v12 = (void *)(v39 & 0xFFFFFFFFFFFFFFF8);
        v6[2] = *(void *)(v39 & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v12 = v6 + 1;
        v6[1] = v11 & 0xFFFFFFFFFFFFFFF8 | v6[1] & 7;
        uint64_t v13 = (unint64_t *)v6[2];
        if (v13) {
          *uint64_t v13 = *v13 & 7 | (unint64_t)(v6 + 2);
        }
      }
    }
    void v6[4] = v42;
    v6[5] = 0;
  }
  if (v41 != (int32x2_t ****)-8192 && v41 != (int32x2_t ****)-4096 && v41)
  {
    unint64_t v14 = v39 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v39 & 0xFFFFFFFFFFFFFFF8) = v40;
    if (v40)
    {
      unint64_t *v40 = *v40 & 7 | v14;
    }
    else
    {
      float v15 = v41;
      uint64_t v16 = ***v41;
      unint64_t v17 = (unint64_t)v16[303];
      if (v17 <= v14)
      {
        uint64_t v18 = v16[305].u32[0];
        if (v17 + 16 * v18 > v14)
        {
          unsigned int v19 = v18 - 1;
          LODWORD(v20) = v19 & ((v41 >> 4) ^ (v41 >> 9));
          uint64_t v21 = (int32x2_t *****)(v17 + 16 * v20);
          unsigned int v22 = *v21;
          if (v41 == *v21)
          {
LABEL_31:
            *uint64_t v21 = (int32x2_t ****)-8192;
            v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
            float v15 = v41;
          }
          else
          {
            int v23 = 1;
            while (v22 != (int32x2_t ****)-4096)
            {
              int v24 = v20 + v23++;
              uint64_t v20 = v24 & v19;
              unsigned int v22 = *(int32x2_t *****)(v17 + 16 * v20);
              if (v41 == v22)
              {
                uint64_t v21 = (int32x2_t *****)(v17 + 16 * v20);
                goto LABEL_31;
              }
            }
          }
          *((unsigned char *)v15 + 17) &= ~1u;
        }
      }
    }
  }
  return v5 + 40;
}

uint64_t sub_1CC61F19C(void *a1)
{
  uint64_t v1 = a1[1];
  unint64_t v33 = v1 & 6;
  uint64_t v34 = 0;
  uint64_t v2 = (void ***)a1[3];
  int v35 = v2;
  if (v2 != (void ***)-8192 && v2 != (void ***)-4096 && v2 != 0)
  {
    uint64_t v34 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(v1 & 0xFFFFFFFFFFFFFFF8) = &v33;
    unint64_t v33 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v34) {
      unint64_t *v34 = *v34 & 7 | (unint64_t)&v34;
    }
  }
  uint64_t v4 = a1[4];
  uint64_t v36 = v4;
  uint64_t v37 = 0;
  uint64_t result = sub_1CC61FB80(*(void *)v4, *(_DWORD *)(v4 + 16), (uint64_t)v35, &v37);
  if (result)
  {
    uint64_t v6 = v37;
    uint64_t v7 = v37[3];
    if (v7 != -8192)
    {
      if (v7 != -4096 && v7 != 0)
      {
        unint64_t v21 = v37[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v21 = v37[2];
        unsigned int v22 = (unint64_t *)v6[2];
        if (v22)
        {
          *unsigned int v22 = *v22 & 7 | v21;
        }
        else
        {
          uint64_t v23 = v6[3];
          int v24 = ***(int32x2_t ****)v23;
          unint64_t v25 = (unint64_t)v24[303];
          if (v25 <= v21)
          {
            uint64_t v26 = v24[305].u32[0];
            if (v25 + 16 * v26 > v21)
            {
              unsigned int v27 = v26 - 1;
              LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
              unint64_t v29 = (uint64_t *)(v25 + 16 * v28);
              uint64_t v30 = *v29;
              if (v23 == *v29)
              {
LABEL_42:
                *unint64_t v29 = -8192;
                v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v23 = v6[3];
              }
              else
              {
                int v31 = 1;
                while (v30 != -4096)
                {
                  int v32 = v28 + v31++;
                  uint64_t v28 = v32 & v27;
                  uint64_t v30 = *(void *)(v25 + 16 * v28);
                  if (v23 == v30)
                  {
                    unint64_t v29 = (uint64_t *)(v25 + 16 * v28);
                    goto LABEL_42;
                  }
                }
              }
              *(unsigned char *)(v23 + 17) &= ~1u;
            }
          }
        }
      }
      void v6[3] = -8192;
    }
    void v6[4] = 0;
    *(int32x2_t *)(v4 + 8) = vadd_s32(*(int32x2_t *)(v4 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  if (v35 != (void ***)-8192 && v35 != (void ***)-4096 && v35 != 0)
  {
    unint64_t v10 = v33 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = v34;
    if (v34)
    {
      unint64_t *v34 = *v34 & 7 | v10;
    }
    else
    {
      uint64_t v11 = v35;
      uint64_t v12 = (int32x2_t *)***v35;
      unint64_t v13 = (unint64_t)v12[303];
      if (v13 <= v10)
      {
        uint64_t v14 = v12[305].u32[0];
        if (v13 + 16 * v14 > v10)
        {
          unsigned int v15 = v14 - 1;
          LODWORD(v16) = v15 & ((v35 >> 4) ^ (v35 >> 9));
          unint64_t v17 = (void *)(v13 + 16 * v16);
          uint64_t v18 = (void ***)*v17;
          if (v35 == (void ***)*v17)
          {
LABEL_32:
            *unint64_t v17 = -8192;
            v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v11 = v35;
          }
          else
          {
            int v19 = 1;
            while (v18 != (void ***)-4096)
            {
              int v20 = v16 + v19++;
              uint64_t v16 = v20 & v15;
              uint64_t v18 = *(void ****)(v13 + 16 * v16);
              if (v35 == v18)
              {
                unint64_t v17 = (void *)(v13 + 16 * v16);
                goto LABEL_32;
              }
            }
          }
          *((unsigned char *)v11 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC61F458(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v82 = v3 & 6;
  uint64_t v83 = 0;
  uint64_t v4 = (void ***)a1[3];
  uint64_t v84 = v4;
  if (v4 != (void ***)-8192 && v4 != (void ***)-4096 && v4 != 0)
  {
    uint64_t v83 = *(unint64_t **)(v3 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(v3 & 0xFFFFFFFFFFFFFFF8) = &v82;
    unint64_t v82 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (v83) {
      unint64_t *v83 = *v83 & 7 | (unint64_t)&v83;
    }
  }
  uint64_t v6 = (int32x2_t *)a1[4];
  uint64_t v85 = v6;
  uint64_t v91 = 0;
  uint64_t result = sub_1CC61FB80((uint64_t)*v6, v6[2].i32[0], (uint64_t)v84, &v91);
  BOOL v8 = (void *)(*(void *)v6 + 48 * v6[2].u32[0]);
  if (result) {
    BOOL v8 = v91;
  }
  BOOL v9 = v85;
  if ((void *)(*(void *)v85 + 48 * v85[2].u32[0]) != v8)
  {
    uint64_t v10 = v8[5];
    uint64_t v11 = v8[3];
    if (v11 != -8192)
    {
      if (v11 != -4096 && v11 != 0)
      {
        unint64_t v58 = v8[1] & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v58 = v8[2];
        uint64_t v59 = (unint64_t *)v8[2];
        if (v59)
        {
          *uint64_t v59 = *v59 & 7 | v58;
        }
        else
        {
          uint64_t v60 = v8[3];
          unint64_t v61 = ***(int32x2_t ****)v60;
          unint64_t v62 = (unint64_t)v61[303];
          if (v62 <= v58)
          {
            uint64_t v63 = v61[305].u32[0];
            if (v62 + 16 * v63 > v58)
            {
              unsigned int v64 = v63 - 1;
              LODWORD(v65) = v64 & ((v60 >> 4) ^ (v60 >> 9));
              uint64_t v66 = (uint64_t *)(v62 + 16 * v65);
              uint64_t v67 = *v66;
              if (v60 == *v66)
              {
LABEL_97:
                *uint64_t v66 = -8192;
                v61[304] = vadd_s32(v61[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v60 = v8[3];
              }
              else
              {
                int v68 = 1;
                while (v67 != -4096)
                {
                  int v69 = v65 + v68++;
                  uint64_t v65 = v69 & v64;
                  uint64_t v67 = *(void *)(v62 + 16 * v65);
                  if (v60 == v67)
                  {
                    uint64_t v66 = (uint64_t *)(v62 + 16 * v65);
                    goto LABEL_97;
                  }
                }
              }
              *(unsigned char *)(v60 + 17) &= ~1u;
            }
          }
        }
      }
      v8[3] = -8192;
    }
    void v8[4] = 0;
    v9[1] = vadd_s32(v9[1], (int32x2_t)0x1FFFFFFFFLL);
    uint64_t v13 = (uint64_t)v85;
    uint64_t v14 = 2;
    uint64_t v87 = 2;
    int v88 = 0;
    uint64_t v89 = (int32x2_t ****)a2;
    if (a2 != -8192 && a2 != -4096 && a2)
    {
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v87);
      uint64_t v14 = v87;
      a2 = (uint64_t)v89;
    }
    unsigned int v86 = &unk_1F26180B0;
    uint64_t v90 = v13;
    unint64_t v92 = v14 & 6;
    unsigned int v93 = 0;
    unsigned int v94 = (int32x2_t ****)a2;
    if (a2 == -8192 || a2 == -4096)
    {
      uint64_t v15 = v13;
    }
    else
    {
      uint64_t v15 = v13;
      if (a2)
      {
        unsigned int v93 = *(unint64_t **)(v14 & 0xFFFFFFFFFFFFFFF8);
        *(void *)(v14 & 0xFFFFFFFFFFFFFFF8) = &v92;
        unint64_t v92 = v14 & 0xFFFFFFFFFFFFFFFELL;
        if (v93) {
          unint64_t *v93 = *v93 & 7 | (unint64_t)&v93;
        }
        uint64_t v15 = v90;
        a2 = (uint64_t)v94;
      }
    }
    uint64_t v91 = &unk_1F26180B0;
    uint64_t v95 = v15;
    uint64_t v96 = v10;
    uint64_t v97 = 0;
    uint64_t result = sub_1CC61FB80(*(void *)v13, *(_DWORD *)(v13 + 16), a2, &v97);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1CC61FC18(v13, (uint64_t)&v91, v97);
      uint64_t v16 = *(int32x2_t *****)(result + 24);
      unint64_t v17 = v94;
      if (v16 != v94)
      {
        if (v16 != (int32x2_t ****)-4096 && v16 && v16 != (int32x2_t ****)-8192)
        {
          unint64_t v70 = *(void *)(result + 8) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v70 = *(void *)(result + 16);
          uint64_t v71 = *(unint64_t **)(result + 16);
          if (v71)
          {
            *uint64_t v71 = *v71 & 7 | v70;
          }
          else
          {
            uint64_t v72 = *(void *)(result + 24);
            uint64_t v73 = ***(int32x2_t ****)v72;
            unint64_t v74 = (unint64_t)v73[303];
            if (v74 <= v70)
            {
              uint64_t v75 = v73[305].u32[0];
              if (v74 + 16 * v75 > v70)
              {
                unsigned int v76 = v75 - 1;
                LODWORD(v77) = v76 & ((v72 >> 4) ^ (v72 >> 9));
                char v78 = (uint64_t *)(v74 + 16 * v77);
                uint64_t v79 = *v78;
                if (v72 == *v78)
                {
LABEL_110:
                  *char v78 = -8192;
                  v73[304] = vadd_s32(v73[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v72 = *(void *)(result + 24);
                }
                else
                {
                  int v80 = 1;
                  while (v79 != -4096)
                  {
                    int v81 = v77 + v80++;
                    uint64_t v77 = v81 & v76;
                    uint64_t v79 = *(void *)(v74 + 16 * v77);
                    if (v72 == v79)
                    {
                      char v78 = (uint64_t *)(v74 + 16 * v77);
                      goto LABEL_110;
                    }
                  }
                }
                *(unsigned char *)(v72 + 17) &= ~1u;
              }
            }
          }
          unint64_t v17 = v94;
        }
        *(void *)(result + 24) = v17;
        if (v17 != (int32x2_t ****)-4096 && v17 != (int32x2_t ****)-8192 && v17 != 0)
        {
          unint64_t v19 = v92;
          int v20 = (void *)(v92 & 0xFFFFFFFFFFFFFFF8);
          *(void *)(result + 16) = *(void *)(v92 & 0xFFFFFFFFFFFFFFF8);
          *int v20 = result + 8;
          *(void *)(result + 8) = v19 & 0xFFFFFFFFFFFFFFF8 | *(void *)(result + 8) & 7;
          unint64_t v21 = *(uint64_t **)(result + 16);
          if (v21) {
            *unint64_t v21 = *v21 & 7 | (result + 16);
          }
        }
      }
      *(void *)(result + 32) = v95;
      *(void *)(result + 40) = v96;
    }
    if (v94 != (int32x2_t ****)-8192 && v94 != (int32x2_t ****)-4096 && v94 != 0)
    {
      unint64_t v36 = v92 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v92 & 0xFFFFFFFFFFFFFFF8) = v93;
      if (v93)
      {
        unint64_t *v93 = *v93 & 7 | v36;
      }
      else
      {
        uint64_t v37 = v94;
        unsigned int v38 = ***v94;
        unint64_t v39 = (unint64_t)v38[303];
        if (v39 <= v36)
        {
          uint64_t v40 = v38[305].u32[0];
          if (v39 + 16 * v40 > v36)
          {
            unsigned int v41 = v40 - 1;
            LODWORD(v42) = v41 & ((v94 >> 4) ^ (v94 >> 9));
            uint64_t v43 = (int32x2_t *****)(v39 + 16 * v42);
            int v44 = *v43;
            if (v94 == *v43)
            {
LABEL_77:
              *uint64_t v43 = (int32x2_t ****)-8192;
              v38[304] = vadd_s32(v38[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v37 = v94;
            }
            else
            {
              int v45 = 1;
              while (v44 != (int32x2_t ****)-4096)
              {
                int v46 = v42 + v45++;
                uint64_t v42 = v46 & v41;
                int v44 = *(int32x2_t *****)(v39 + 16 * v42);
                if (v94 == v44)
                {
                  uint64_t v43 = (int32x2_t *****)(v39 + 16 * v42);
                  goto LABEL_77;
                }
              }
            }
            *((unsigned char *)v37 + 17) &= ~1u;
          }
        }
      }
    }
    if (v89 != (int32x2_t ****)-8192 && v89 != (int32x2_t ****)-4096 && v89 != 0)
    {
      unint64_t v47 = v87 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v87 & 0xFFFFFFFFFFFFFFF8) = v88;
      if (v88)
      {
        unint64_t *v88 = *v88 & 7 | v47;
      }
      else
      {
        uint64_t v48 = v89;
        uint64_t v49 = ***v89;
        unint64_t v50 = (unint64_t)v49[303];
        if (v50 <= v47)
        {
          uint64_t v51 = v49[305].u32[0];
          if (v50 + 16 * v51 > v47)
          {
            unsigned int v52 = v51 - 1;
            LODWORD(v53) = v52 & ((v89 >> 4) ^ (v89 >> 9));
            unint64_t v54 = (int32x2_t *****)(v50 + 16 * v53);
            uint64_t v55 = *v54;
            if (v89 == *v54)
            {
LABEL_87:
              void *v54 = (int32x2_t ****)-8192;
              v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v48 = v89;
            }
            else
            {
              int v56 = 1;
              while (v55 != (int32x2_t ****)-4096)
              {
                int v57 = v53 + v56++;
                uint64_t v53 = v57 & v52;
                uint64_t v55 = *(int32x2_t *****)(v50 + 16 * v53);
                if (v89 == v55)
                {
                  unint64_t v54 = (int32x2_t *****)(v50 + 16 * v53);
                  goto LABEL_87;
                }
              }
            }
            *((unsigned char *)v48 + 17) &= ~1u;
          }
        }
      }
    }
  }
  if (v84 != (void ***)-8192 && v84 != (void ***)-4096 && v84 != 0)
  {
    unint64_t v25 = v82 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v82 & 0xFFFFFFFFFFFFFFF8) = v83;
    if (v83)
    {
      unint64_t *v83 = *v83 & 7 | v25;
    }
    else
    {
      uint64_t v26 = v84;
      unsigned int v27 = (int32x2_t *)***v84;
      unint64_t v28 = (unint64_t)v27[303];
      if (v28 <= v25)
      {
        uint64_t v29 = v27[305].u32[0];
        if (v28 + 16 * v29 > v25)
        {
          unsigned int v30 = v29 - 1;
          LODWORD(v31) = v30 & ((v84 >> 4) ^ (v84 >> 9));
          int v32 = (void *)(v28 + 16 * v31);
          unint64_t v33 = (void ***)*v32;
          if (v84 == (void ***)*v32)
          {
LABEL_67:
            void *v32 = -8192;
            v27[304] = vadd_s32(v27[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v26 = v84;
          }
          else
          {
            int v34 = 1;
            while (v33 != (void ***)-4096)
            {
              int v35 = v31 + v34++;
              uint64_t v31 = v35 & v30;
              unint64_t v33 = *(void ****)(v28 + 16 * v31);
              if (v84 == v33)
              {
                int v32 = (void *)(v28 + 16 * v31);
                goto LABEL_67;
              }
            }
          }
          *((unsigned char *)v26 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CC61FB80(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = a1 + 48 * v5;
    uint64_t v7 = *(void *)(v6 + 24);
    if (v7 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = a1 + 48 * (v13 & v4);
        uint64_t v7 = *(void *)(v6 + 24);
        uint64_t v8 = 1;
        if (v7 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t sub_1CC61FC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC61FCCC(a1, v6);
  uint64_t v8 = 0;
  sub_1CC61FB80(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)(a2 + 24), &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)(a3 + 24) != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

uint64_t *sub_1CC61FCCC(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  *(void *)a1 = operator new(48 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1CC620264((uint64_t *)a1);
    if (v3)
    {
      BOOL v9 = (void *)(v4 + 48 * v3);
      uint64_t v10 = (void *)v4;
      do
      {
        uint64_t v11 = v10[3];
        if (v11 != -4096 && v11 != -8192)
        {
          int v46 = 0;
          sub_1CC61FB80(*(void *)a1, *(_DWORD *)(a1 + 16), v11, &v46);
          unsigned int v13 = v46;
          uint64_t v14 = v46[3];
          uint64_t v15 = v10[3];
          if (v14 != v15)
          {
            BOOL v16 = v14 == -4096 || v14 == 0;
            if (!v16 && v14 != -8192)
            {
              unint64_t v33 = v46[1] & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v33 = v46[2];
              int v34 = (unint64_t *)v13[2];
              if (v34)
              {
                unint64_t *v34 = *v34 & 7 | v33;
              }
              else
              {
                uint64_t v35 = v13[3];
                unint64_t v36 = ***(int32x2_t ****)v35;
                unint64_t v37 = (unint64_t)v36[303];
                if (v37 <= v33)
                {
                  uint64_t v38 = v36[305].u32[0];
                  if (v37 + 16 * v38 > v33)
                  {
                    unsigned int v39 = v38 - 1;
                    LODWORD(v40) = v39 & ((v35 >> 4) ^ (v35 >> 9));
                    unsigned int v41 = (uint64_t *)(v37 + 16 * v40);
                    uint64_t v42 = *v41;
                    if (v35 != *v41)
                    {
                      int v43 = 1;
                      do
                      {
                        if (v42 == -4096) {
                          goto LABEL_53;
                        }
                        int v44 = v40 + v43++;
                        uint64_t v40 = v44 & v39;
                        uint64_t v42 = *(void *)(v37 + 16 * v40);
                      }
                      while (v35 != v42);
                      unsigned int v41 = (uint64_t *)(v37 + 16 * v40);
                    }
                    uint64_t *v41 = -8192;
                    v36[304] = vadd_s32(v36[304], (int32x2_t)0x1FFFFFFFFLL);
                    uint64_t v35 = v13[3];
LABEL_53:
                    *(unsigned char *)(v35 + 17) &= ~1u;
                  }
                }
              }
              uint64_t v15 = v10[3];
            }
            v13[3] = v15;
            if (v15 != -4096 && v15 != -8192 && v15 != 0)
            {
              uint64_t v18 = v10[1];
              v13[2] = *(void *)(v18 & 0xFFFFFFFFFFFFFFF8);
              *(void *)(v18 & 0xFFFFFFFFFFFFFFF8) = v13 + 1;
              v13[1] = v18 & 0xFFFFFFFFFFFFFFF8 | v13[1] & 7;
              unint64_t v19 = (unint64_t *)v13[2];
              if (v19) {
                unint64_t *v19 = *v19 & 7 | (unint64_t)(v13 + 2);
              }
            }
          }
          v13[4] = v10[4];
          v13[5] = v10[5];
          ++*(_DWORD *)(a1 + 8);
          uint64_t v11 = v10[3];
        }
        if (v11 != -8192 && v11 != -4096 && v11 != 0)
        {
          unint64_t v21 = v10[1] & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v21 = v10[2];
          unsigned int v22 = (unint64_t *)v10[2];
          if (v22)
          {
            *unsigned int v22 = *v22 & 7 | v21;
          }
          else
          {
            uint64_t v23 = v10[3];
            int v24 = ***(int32x2_t ****)v23;
            unint64_t v25 = (unint64_t)v24[303];
            if (v25 <= v21)
            {
              uint64_t v26 = v24[305].u32[0];
              if (v25 + 16 * v26 > v21)
              {
                unsigned int v27 = v26 - 1;
                LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
                uint64_t v29 = (uint64_t *)(v25 + 16 * v28);
                uint64_t v30 = *v29;
                if (v23 != *v29)
                {
                  int v31 = 1;
                  do
                  {
                    if (v30 == -4096) {
                      goto LABEL_42;
                    }
                    int v32 = v28 + v31++;
                    uint64_t v28 = v32 & v27;
                    uint64_t v30 = *(void *)(v25 + 16 * v28);
                  }
                  while (v23 != v30);
                  uint64_t v29 = (uint64_t *)(v25 + 16 * v28);
                }
                *uint64_t v29 = -8192;
                v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
                uint64_t v23 = v10[3];
LABEL_42:
                *(unsigned char *)(v23 + 17) &= ~1u;
              }
            }
          }
        }
        v10 += 6;
      }
      while (v10 != v9);
    }
    JUMPOUT(0x1D25D9CD0);
  }

  return sub_1CC620264((uint64_t *)a1);
}

uint64_t *sub_1CC620264(uint64_t *result)
{
  result[1] = 0;
  uint64_t v1 = *((unsigned int *)result + 4);
  if (v1)
  {
    uint64_t v2 = 3 * v1;
    uint64_t v3 = *result;
    uint64_t v4 = 16 * v2;
    unint64_t v5 = (void *)(*result + 16);
    do
    {
      *(v5 - 1) = 2;
      *unint64_t v5 = 0;
      v5[1] = -4096;
      void v5[2] = 0;
      *(v5 - 2) = &unk_1F26180B0;
      v5 += 6;
      v3 += 48;
      v4 -= 48;
    }
    while (v4);
  }
  return result;
}

void sub_1CC6202C0(char *a1)
{
  if (a1)
  {
    sub_1CC6202C0(*(void *)a1);
    sub_1CC6202C0(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    sub_1CBF7EDF0(&v2);
    operator delete(a1);
  }
}

void *sub_1CC620324(char **a1, const void *a2, uint64_t a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6 > 0xAAAAAAAAAAAAAAALL) {
    sub_1CB833614();
  }
  BOOL v9 = (char *)operator new(24 * v6);
  uint64_t v10 = &v9[24 * v3];
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = 0;
  sub_1CBFCBA2C(v10, a2, a3, (a3 - (uint64_t)a2) >> 3);
  uint64_t v11 = *a1;
  BOOL v12 = a1[1];
  if (v12 == *a1)
  {
    BOOL v16 = v10 + 24;
    *a1 = v10;
    a1[1] = v10 + 24;
    a1[2] = &v9[24 * v6];
    if (!v12) {
      return v16;
    }
    goto LABEL_17;
  }
  unsigned int v13 = v10;
  do
  {
    long long v14 = *(_OWORD *)(v12 - 24);
    v12 -= 24;
    *(_OWORD *)(v13 - 24) = v14;
    v13 -= 24;
    *((void *)v13 + 2) = *((void *)v12 + 2);
    *(void *)BOOL v12 = 0;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
  }
  while (v12 != v11);
  BOOL v12 = *a1;
  uint64_t v15 = a1[1];
  BOOL v16 = v10 + 24;
  *a1 = v13;
  a1[1] = v10 + 24;
  a1[2] = &v9[24 * v6];
  if (v15 != v12)
  {
    unint64_t v17 = v15;
    do
    {
      unint64_t v19 = (void *)*((void *)v17 - 3);
      v17 -= 24;
      uint64_t v18 = v19;
      if (v19)
      {
        *((void *)v15 - 2) = v18;
        operator delete(v18);
      }
      uint64_t v15 = v17;
    }
    while (v17 != v12);
  }
  if (v12) {
LABEL_17:
  }
    operator delete(v12);
  return v16;
}

char **sub_1CC620498(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    unint64_t v5 = (char **)(a3 + 8);
    while (v4 == (const void **)(v5 - 1))
    {
LABEL_26:
      v4 += 3;
      v3 += 24;
      v5 += 3;
      if (v4 == a2) {
        return v5 - 1;
      }
    }
    unint64_t v6 = (char *)*v4;
    int v7 = (char *)v4[1];
    int64_t v8 = v7 - (unsigned char *)*v4;
    unint64_t v9 = v8 >> 3;
    uint64_t v10 = (uint64_t)v5[1];
    uint64_t v11 = *(v5 - 1);
    if (v8 >> 3 > (unint64_t)((v10 - (uint64_t)v11) >> 3))
    {
      if (v11)
      {
        *unint64_t v5 = v11;
        operator delete(v11);
        uint64_t v10 = 0;
        *(v5 - 1) = 0;
        *unint64_t v5 = 0;
        v5[1] = 0;
      }
      if (v8 < 0) {
        goto LABEL_29;
      }
      uint64_t v12 = v10 >> 2;
      if (v10 >> 2 <= v9) {
        uint64_t v12 = v8 >> 3;
      }
      unint64_t v13 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v12;
      if (v13 >> 61) {
LABEL_29:
      }
        abort();
      long long v14 = (char *)operator new(8 * v13);
      uint64_t v11 = v14;
      *(v5 - 1) = v14;
      *unint64_t v5 = v14;
      v5[1] = &v14[8 * v13];
      if (v7 != v6) {
        memcpy(v14, v6, v8);
      }
      uint64_t v15 = v5;
      goto LABEL_25;
    }
    uint64_t v15 = (char **)(v3 + 8);
    int64_t v16 = *v5 - v11;
    uint64_t v17 = v16 >> 3;
    if (v16 >> 3 >= v9)
    {
      if (v7 == v6)
      {
LABEL_25:
        *uint64_t v15 = &v11[v8];
        goto LABEL_26;
      }
      unint64_t v19 = *(v5 - 1);
      uint64_t v18 = (char *)*v4;
    }
    else
    {
      if (*v5 != v11)
      {
        memmove(*(v5 - 1), *v4, v16);
        uint64_t v11 = *v5;
      }
      uint64_t v18 = &v6[8 * v17];
      int64_t v8 = v7 - v18;
      if (v7 == v18) {
        goto LABEL_25;
      }
      unint64_t v19 = v11;
    }
    memmove(v19, v18, v8);
    goto LABEL_25;
  }
  return (char **)v3;
}

uint64_t llvm::parseStatepointDirectivesFromAttrs@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[4] = 0;
  a2[8] = 0;
  a2[16] = 0;
  if (!result || !*(_DWORD *)(result + 8)) {
    return result;
  }
  uint64_t v2 = *(void *)(result + 40);
  uint64_t v3 = &unk_1EBCBE000;
  if (!v2) {
    goto LABEL_34;
  }
  int v4 = *(_DWORD *)(v2 + 40);
  if (!v4) {
    goto LABEL_34;
  }
  uint64_t v5 = *(void *)(v2 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v51 = result;
    uint64_t v55 = a2;
    uint64_t v50 = v5;
    int v53 = v4;
    int v45 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v4 = v53;
    uint64_t v3 = &unk_1EBCBE000;
    a2 = v55;
    int v46 = v45;
    uint64_t v5 = v50;
    uint64_t result = v51;
    if (v46)
    {
      unint64_t v47 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v47 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v47;
      __cxa_guard_release(&qword_1EBCBE588);
      int v4 = v53;
      uint64_t v5 = v50;
      uint64_t result = v51;
      uint64_t v3 = (void *)&unk_1EBCBE000;
      a2 = v55;
    }
  }
  unint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3[176] ^ 0x1284532C1FC20738)) ^ ((0x9DDFEA08EB382D69
                                                                    * (v3[176] ^ 0x1284532C1FC20738)) >> 47) ^ 0x7BEB23496BA3734BLL);
  unsigned int v7 = (-348639895 * ((v6 >> 47) ^ v6)) ^ 0x6E696F70;
  int v8 = v4 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v10 = v7 & v8;
    uint64_t v11 = v5 + 24 * v10;
    uint64_t v12 = *(void **)v11;
    if (*(void *)v11 == -1)
    {
      if ("statepoint-id" == (char *)-1) {
        goto LABEL_20;
      }
      goto LABEL_9;
    }
    if (v12 != (void *)-2) {
      break;
    }
    if ("statepoint-id" == (char *)-2) {
      goto LABEL_20;
    }
LABEL_9:
    if (v12 == (void *)-1) {
      goto LABEL_34;
    }
    unsigned int v7 = i + v10;
  }
  if (*(void *)(v11 + 8) != 13) {
    goto LABEL_9;
  }
  if (*v12 != 0x696F706574617473 || *(void *)((char *)v12 + 5) != 0x64692D746E696F70) {
    goto LABEL_9;
  }
LABEL_20:
  uint64_t v14 = *(void *)(v11 + 16);
  if (v14)
  {
    if (*(unsigned char *)(v14 + 8) == 2)
    {
      uint64_t v15 = *(unsigned int *)(v14 + 16);
      if (v15)
      {
        unint64_t v16 = 0;
        uint64_t v17 = (unsigned __int8 *)(*(unsigned int *)(v14 + 12) + v14 + 25);
        while (1)
        {
          int v19 = *v17++;
          int v18 = v19;
          if ((v19 - 48) >= 0xA)
          {
            if ((v18 - 97) >= 0x1A)
            {
              if ((v18 - 65) > 0x19) {
                break;
              }
              int v20 = -55;
            }
            else
            {
              int v20 = -87;
            }
          }
          else
          {
            int v20 = -48;
          }
          unsigned int v21 = v20 + v18;
          if (v21 > 9) {
            break;
          }
          unint64_t v22 = 10 * v16 + v21;
          if (v16 > v22 / 0xA) {
            break;
          }
          unint64_t v16 = v22;
          if (!--v15)
          {
            *((void *)a2 + 1) = v22;
            a2[16] = 1;
            break;
          }
        }
      }
    }
  }
LABEL_34:
  if (!*(_DWORD *)(result + 8)) {
    return result;
  }
  uint64_t v23 = *(void *)(result + 40);
  if (!v23) {
    return result;
  }
  int v24 = *(_DWORD *)(v23 + 40);
  if (!v24) {
    return result;
  }
  uint64_t v25 = *(void *)(v23 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v56 = a2;
    uint64_t v54 = v25;
    int v52 = v24;
    int v48 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v24 = v52;
    uint64_t v25 = v54;
    uint64_t v3 = &unk_1EBCBE000;
    a2 = v56;
    if (v48)
    {
      unint64_t v49 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v49 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v49;
      __cxa_guard_release(&qword_1EBCBE588);
      int v24 = v52;
      uint64_t v25 = v54;
      uint64_t v3 = (void *)&unk_1EBCBE000;
      a2 = v56;
    }
  }
  uint64_t v26 = v3[176];
  uint64_t v27 = __ROR8__(v26 ^ 0x816DE6868ACBF68DLL, 30);
  unint64_t v28 = 0x9DDFEA08EB382D69
      * ((v26 + 0x7233C8CEA7033321) ^ ((0x9DDFEA08EB382D69
                                        * ((v27 + 0x485D97F83713B1EFLL) ^ (v26 + 0x7233C8CEA7033321))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v27 + 0x485D97F83713B1EFLL) ^ (v26 + 0x7233C8CEA7033321))));
  int v29 = -348639895 * ((v28 >> 47) ^ v28);
  int v30 = 1;
  while (2)
  {
    uint64_t result = v29 & (v24 - 1);
    int v31 = (uint64_t *)(v25 + 24 * result);
    uint64_t v32 = *v31;
    if (*v31 == -1)
    {
      if ("statepoint-num-patch-bytes" == (char *)-1) {
        break;
      }
      goto LABEL_41;
    }
    if (v32 == -2)
    {
      if ("statepoint-num-patch-bytes" == (char *)-2) {
        break;
      }
      goto LABEL_41;
    }
    if (v31[1] != 26
      || (*(void *)v32 == 0x696F706574617473 ? (BOOL v33 = *(void *)(v32 + 8) == 0x702D6D756E2D746ELL) : (BOOL v33 = 0),
          v33 ? (BOOL v34 = *(void *)(v32 + 16) == 0x7479622D68637461) : (BOOL v34 = 0),
          v34 ? (BOOL v35 = *(unsigned __int16 *)(v32 + 24) == 29541) : (BOOL v35 = 0),
          !v35))
    {
LABEL_41:
      if (v32 == -1) {
        return result;
      }
      int v29 = v30 + result;
      ++v30;
      continue;
    }
    break;
  }
  uint64_t v36 = v31[2];
  if (v36)
  {
    if (*(unsigned char *)(v36 + 8) == 2)
    {
      uint64_t v37 = *(unsigned int *)(v36 + 16);
      if (v37)
      {
        unint64_t v38 = 0;
        unsigned int v39 = (unsigned __int8 *)(*(unsigned int *)(v36 + 12) + v36 + 25);
        while (1)
        {
          int v41 = *v39++;
          int v40 = v41;
          if ((v41 - 48) >= 0xA)
          {
            if ((v40 - 97) >= 0x1A)
            {
              if ((v40 - 65) > 0x19) {
                return result;
              }
              int v42 = -55;
            }
            else
            {
              int v42 = -87;
            }
          }
          else
          {
            int v42 = -48;
          }
          unsigned int v43 = v42 + v40;
          if (v43 > 9) {
            break;
          }
          unint64_t v44 = 10 * v38 + v43;
          if (v38 > v44 / 0xA) {
            break;
          }
          unint64_t v38 = v44;
          if (!--v37)
          {
            if (!HIDWORD(v44))
            {
              *(_DWORD *)a2 = v44;
              a2[4] = 1;
            }
            return result;
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::Type::getPrimitiveType(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
      uint64_t result = *a1 + 1624;
      break;
    case 1:
      uint64_t result = *a1 + 1648;
      break;
    case 2:
      uint64_t result = *a1 + 1672;
      break;
    case 3:
      uint64_t result = *a1 + 1696;
      break;
    case 4:
      uint64_t result = *a1 + 1768;
      break;
    case 5:
      uint64_t result = *a1 + 1792;
      break;
    case 6:
      uint64_t result = *a1 + 1816;
      break;
    case 7:
      uint64_t result = *a1 + 1576;
      break;
    case 8:
      uint64_t result = *a1 + 1600;
      break;
    case 9:
      uint64_t result = *a1 + 1720;
      break;
    case 10:
      uint64_t result = *a1 + 1840;
      break;
    case 11:
      uint64_t result = *a1 + 1864;
      break;
    case 12:
      uint64_t result = *a1 + 1744;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Type::getVoidTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1576;
}

uint64_t llvm::Type::getHalfTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1624;
}

uint64_t llvm::Type::getFloatTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1672;
}

uint64_t llvm::Type::getPPC_FP128Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1816;
}

uint64_t llvm::Type::getLabelTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1600;
}

uint64_t llvm::Type::getMetadataTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1720;
}

BOOL llvm::Type::isIntegerTy(llvm::Type *this, int a2)
{
  return *((_DWORD *)this + 2) == 13 && a2 == *((_DWORD *)this + 2) >> 8;
}

BOOL llvm::Type::isOpaquePointerTy(llvm::Type *this)
{
  BOOL result = 0;
  if (this)
  {
    if (*((unsigned char *)this + 8) == 15) {
      return *((void *)this + 3) == 0;
    }
  }
  return result;
}

void *llvm::Type::getFltSemantics(llvm::Type *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  if (v1 == 2) {
    return &unk_1CFB2E308;
  }
  BOOL result = &unk_1CFB2E2E0;
  switch(v1)
  {
    case 1:
      BOOL result = &unk_1CFB2E2F4;
      break;
    case 2:
      __break(1u);
      goto LABEL_6;
    case 3:
LABEL_6:
      BOOL result = llvm::APFloatBase::IEEEdouble((llvm::APFloatBase *)&unk_1CFB2E2E0);
      break;
    case 4:
      BOOL result = llvm::APFloatBase::x87DoubleExtended((llvm::APFloatBase *)&unk_1CFB2E2E0);
      break;
    case 5:
      BOOL result = llvm::APFloatBase::IEEEquad((llvm::APFloatBase *)&unk_1CFB2E2E0);
      break;
    case 6:
      BOOL result = &unk_1CFB2E344;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::Type::getFloatingPointTy(llvm::APFloatBase *a1, void *a2)
{
  if (a2 == &unk_1CFB2E2E0) {
    return *(void *)a1 + 1624;
  }
  if (a2 == &unk_1CFB2E2F4) {
    return *(void *)a1 + 1648;
  }
  if (a2 == &unk_1CFB2E308) {
    return *(void *)a1 + 1672;
  }
  int v4 = (llvm::APFloatBase *)llvm::APFloatBase::IEEEdouble(a1);
  if (v4 == a2) {
    return *(void *)a1 + 1696;
  }
  uint64_t v5 = (llvm::APFloatBase *)llvm::APFloatBase::x87DoubleExtended(v4);
  if (v5 == a2) {
    return *(void *)a1 + 1768;
  }
  if (llvm::APFloatBase::IEEEquad(v5) == a2) {
    return *(void *)a1 + 1792;
  }
  return *(void *)a1 + 1816;
}

BOOL llvm::Type::canLosslesslyBitCastTo(llvm::Type *this, llvm::Type *a2)
{
  if (this == a2) {
    return 1;
  }
  unsigned int v2 = *((_DWORD *)this + 2);
  if (v2 == 7 || v2 == 14) {
    return 0;
  }
  int v5 = *((_DWORD *)a2 + 2);
  if (v5 == 7 || v5 == 14) {
    return 0;
  }
  if ((v2 & 0xFE) != 0x12 || (v5 & 0xFE) != 18)
  {
    uint64_t v7 = 0;
    switch((char)v2)
    {
      case 10:
        if (v5 != 18) {
          return 0;
        }
        this = a2;
        goto LABEL_32;
      case 11:
        if (v5 != 18) {
          return 0;
        }
        this = a2;
        goto LABEL_34;
      case 15:
        BOOL v14 = (v5 ^ v2) < 0x100;
        return *((_DWORD *)a2 + 2) == 15 && v14;
      case 18:
        if (v5 == 11)
        {
LABEL_34:
          if (llvm::Type::getPrimitiveSizeInBits(this) != 0x2000) {
            return 0;
          }
        }
        else
        {
          if (v5 != 10) {
            return 0;
          }
LABEL_32:
          if (llvm::Type::getPrimitiveSizeInBits(this) != 64) {
            return 0;
          }
        }
        break;
      default:
        return v7;
    }
    return 1;
  }
  unint64_t PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  int v11 = v10;
  return PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits(a2) && v11 == v12;
}

unint64_t llvm::Type::getPrimitiveSizeInBits(llvm::Type *this)
{
  int v1 = *((_DWORD *)this + 2);
  if (v1 == 13) {
    return (unint64_t)*((unsigned int *)this + 2) >> 8;
  }
  unint64_t result = 16;
  switch(v1)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t result = 32;
      break;
    case 3:
    case 10:
      unint64_t result = 64;
      break;
    case 4:
      unint64_t result = 80;
      break;
    case 5:
    case 6:
      unint64_t result = 128;
      break;
    case 11:
      unint64_t result = 0x2000;
      break;
    case 18:
    case 19:
      uint64_t v4 = *((unsigned int *)this + 8);
      unint64_t result = llvm::Type::getPrimitiveSizeInBits(*((llvm::Type **)this + 3)) * v4;
      break;
    default:
      unint64_t result = 0;
      break;
  }
  return result;
}

uint64_t llvm::Type::isEmptyTy(llvm::Type *this)
{
  int v1 = *((unsigned __int8 *)this + 8);
  if (this && v1 == 17)
  {
    while (*((_DWORD *)this + 8))
    {
      this = (llvm::Type *)*((void *)this + 3);
      int v1 = *((unsigned __int8 *)this + 8);
      if (this) {
        BOOL v2 = v1 == 17;
      }
      else {
        BOOL v2 = 0;
      }
      if (!v2) {
        goto LABEL_8;
      }
    }
    return 1;
  }
LABEL_8:
  if (v1 != 16) {
    return 0;
  }
  uint64_t v3 = *((unsigned int *)this + 3);
  if (!v3) {
    return 1;
  }
  uint64_t v4 = (llvm::Type **)*((void *)this + 2);
  uint64_t v5 = v3 - 1;
  do
  {
    unint64_t v6 = *v4++;
    uint64_t result = llvm::Type::isEmptyTy(v6);
    BOOL v9 = v5-- != 0;
  }
  while (result && v9);
  return result;
}

unint64_t llvm::Type::getScalarSizeInBits(llvm::Type *this)
{
  if ((*((_DWORD *)this + 2) & 0xFE) == 0x12) {
    this = (llvm::Type *)**((void **)this + 2);
  }
  return llvm::Type::getPrimitiveSizeInBits(this);
}

uint64_t llvm::Type::getFPMantissaWidth(llvm::Type *this)
{
  int v1 = *((_DWORD *)this + 2);
  unsigned int v2 = v1;
  if (this && (v1 & 0xFE) == 0x12)
  {
    do
    {
      this = (llvm::Type *)*((void *)this + 3);
      unsigned int v2 = *((_DWORD *)this + 2);
      if (this) {
        BOOL v4 = (*((_DWORD *)this + 2) & 0xFE) == 18;
      }
      else {
        BOOL v4 = 0;
      }
    }
    while (v4);
  }
  if (v2 < 5) {
    return dword_1CFB1B750[(char)v2];
  }
  if (v2 == 5) {
    return 113;
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::Type::isSizedDerivedType(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    int v4 = *(_DWORD *)(a1 + 8);
    if ((!a1 || v4 != 17) && (!a1 || (v4 & 0xFE) != 0x12)) {
      break;
    }
    a1 = *(void *)(a1 + 24);
    unsigned int v5 = *(unsigned __int8 *)(a1 + 8);
    if (v5 > 0x11) {
      goto LABEL_17;
    }
    if (((1 << v5) & 0xAC7F) != 0) {
      return 1;
    }
    if (((1 << v5) & 0x30000) == 0)
    {
LABEL_17:
      if ((v5 & 0xFE) != 0x12 && v5 != 21) {
        return 0;
      }
    }
  }
  if (!a1 || v4 != 21)
  {
    if ((v4 & 0x800) != 0) {
      return 1;
    }
    if ((v4 & 0x100) == 0) {
      return 0;
    }
    if (!a2)
    {
LABEL_21:
      uint64_t v8 = *(unsigned int *)(a1 + 12);
      if (!v8)
      {
LABEL_36:
        *(_DWORD *)(a1 + 8) |= 0x800u;
        return 1;
      }
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v10 = 8 * v8;
      while (1)
      {
        unsigned int v11 = *(unsigned __int8 *)(*(void *)v9 + 8);
        if (v11 == 19) {
          return 0;
        }
        if (v11 > 0x11) {
          goto LABEL_29;
        }
        if (((1 << v11) & 0xAC7F) != 0) {
          goto LABEL_26;
        }
        if (((1 << v11) & 0x30000) == 0)
        {
LABEL_29:
          if ((v11 & 0xFE) != 0x12 && v11 != 21) {
            return 0;
          }
        }
        uint64_t result = llvm::Type::isSizedDerivedType();
        if (!result) {
          return result;
        }
LABEL_26:
        v9 += 8;
        v10 -= 8;
        if (!v10) {
          goto LABEL_36;
        }
      }
    }
    uint64_t v13 = *(void *)(a2 + 8);
    uint64_t v14 = *(unsigned int *)(a2 + 20);
    if (v13 == *(void *)a2)
    {
      if (v14)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 8 * v14;
        uint64_t v17 = *(void **)(a2 + 8);
        do
        {
          if (*v17 == a1) {
            return 0;
          }
          if (*v17 == -2) {
            uint64_t v15 = v17;
          }
          ++v17;
          v16 -= 8;
        }
        while (v16);
        if (v15)
        {
          *uint64_t v15 = a1;
          --*(_DWORD *)(a2 + 24);
          goto LABEL_21;
        }
      }
      unsigned int v18 = *(_DWORD *)(a2 + 16);
      if (v14 < v18)
      {
        *(_DWORD *)(a2 + 20) = v14 + 1;
        *(void *)(v13 + 8 * v14) = a1;
        goto LABEL_21;
      }
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(a2 + 16);
    }
    if (3 * v18 <= 4 * ((int)v14 - *(_DWORD *)(a2 + 24)))
    {
      if (v18 >= 0x40) {
        v18 *= 2;
      }
      else {
        unsigned int v18 = 128;
      }
    }
    else if (v18 - v14 >= v18 >> 3)
    {
      goto LABEL_50;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v18);
    unsigned int v18 = *(_DWORD *)(a2 + 16);
    uint64_t v13 = *(void *)(a2 + 8);
LABEL_50:
    unsigned int v19 = v18 - 1;
    unsigned int v20 = (v18 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    unsigned int v21 = (void *)(v13 + 8 * v20);
    uint64_t v22 = *v21;
    if (*v21 == -1)
    {
      uint64_t v23 = 0;
LABEL_62:
      if (v23) {
        uint64_t v27 = v23;
      }
      else {
        uint64_t v27 = v21;
      }
      if (*v27 != a1)
      {
        if (*v27 == -2) {
          --*(_DWORD *)(a2 + 24);
        }
        else {
          ++*(_DWORD *)(a2 + 20);
        }
        *uint64_t v27 = a1;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v23 = 0;
      int v24 = 1;
      while (v22 != a1)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == -2;
        }
        if (v25) {
          uint64_t v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & v19;
        unsigned int v21 = (void *)(v13 + 8 * (v26 & v19));
        uint64_t v22 = *v21;
        if (*v21 == -1) {
          goto LABEL_62;
        }
      }
    }
    return 0;
  }
  unint64_t LayoutType = llvm::TargetExtType::getLayoutType((llvm::TargetExtType *)a1);

  return sub_1CC621538(LayoutType);
}

uint64_t sub_1CC621538(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 0x11) {
    goto LABEL_5;
  }
  uint64_t v2 = 1;
  if (((1 << v1) & 0xAC7F) != 0) {
    return v2;
  }
  if (((1 << v1) & 0x30000) == 0)
  {
LABEL_5:
    if ((v1 & 0xFE) != 0x12 && v1 != 21) {
      return 0;
    }
  }
  return llvm::Type::isSizedDerivedType();
}

uint64_t llvm::StructType::isSized(uint64_t a1, llvm::SmallPtrSetImplBase *this)
{
  int v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x800) != 0) {
    return 1;
  }
  if ((v2 & 0x100) != 0)
  {
    if (!this || (sub_1CB89694C(this, a1), v8))
    {
      uint64_t v5 = *(unsigned int *)(a1 + 12);
      if (!v5)
      {
LABEL_10:
        *(_DWORD *)(a1 + 8) |= 0x800u;
        return 1;
      }
      unint64_t v6 = *(uint64_t **)(a1 + 16);
      uint64_t v7 = 8 * v5;
      while (*(unsigned char *)(*v6 + 8) != 19 && (sub_1CC621538(*v6) & 1) != 0)
      {
        ++v6;
        v7 -= 8;
        if (!v7) {
          goto LABEL_10;
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::Type::getInt1Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1888;
}

uint64_t llvm::Type::getInt8Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1912;
}

uint64_t llvm::Type::getInt16Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1936;
}

uint64_t llvm::Type::getInt32Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1960;
}

uint64_t llvm::Type::getInt64Ty(llvm::Type *this, llvm::LLVMContext *a2)
{
  return *(void *)this + 1984;
}

uint64_t llvm::IntegerType::get(llvm::IntegerType *this, llvm::LLVMContext *a2)
{
  int v26 = (int)a2;
  if ((int)a2 <= 63)
  {
    if ((int)a2 <= 31)
    {
      switch(a2)
      {
        case 0x10:
          return *(void *)this + 1936;
        case 8:
          return *(void *)this + 1912;
        case 1:
          return *(void *)this + 1888;
      }
    }
    else if (a2 == 32)
    {
      return *(void *)this + 1960;
    }
  }
  else
  {
    if (a2 == 64) {
      return *(void *)this + 1984;
    }
    if (a2 == 128) {
      return *(void *)this + 2008;
    }
  }
  uint64_t v5 = *(void *)this;
  int v6 = *(_DWORD *)(*(void *)this + 2184);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 2168);
    int v8 = v6 - 1;
    unsigned int v9 = v8 & (37 * a2);
    uint64_t v10 = (_DWORD *)(v7 + 16 * v9);
    int v11 = *v10;
    if (*v10 == a2) {
      goto LABEL_18;
    }
    uint64_t v15 = 0;
    int v16 = 1;
    while (v11 != -1)
    {
      if (v15) {
        BOOL v17 = 0;
      }
      else {
        BOOL v17 = v11 == -2;
      }
      if (v17) {
        uint64_t v15 = v10;
      }
      unsigned int v18 = v9 + v16++;
      unsigned int v9 = v18 & v8;
      uint64_t v10 = (_DWORD *)(v7 + 16 * v9);
      int v11 = *v10;
      if (*v10 == a2) {
        goto LABEL_18;
      }
    }
    if (v15) {
      unsigned int v19 = v15;
    }
    else {
      unsigned int v19 = v10;
    }
  }
  else
  {
    unsigned int v19 = 0;
  }
  uint64_t v10 = sub_1CC407648(v5 + 2168, (uint64_t)&v26, &v26, v19);
  _DWORD *v10 = v26;
  *((void *)v10 + 1) = 0;
LABEL_18:
  uint64_t v3 = (void *)*((void *)v10 + 1);
  if (!v3)
  {
    uint64_t v12 = *(void *)this;
    *(void *)(v12 + 2120) = *(void *)(*(void *)this + 2120) + 24;
    uint64_t v13 = *(void *)(v12 + 2040);
    if (((v13 + 7) & 0xFFFFFFFFFFFFFFF8) - v13 + 24 > *(void *)(v12 + 2048) - v13)
    {
      int v24 = v10;
      unsigned int v20 = *(_DWORD *)(v12 + 2064) >> 7;
      if (v20 >= 0x1E) {
        LOBYTE(v20) = 30;
      }
      uint64_t v21 = v12;
      uint64_t v22 = 4096 << v20;
      BOOL v25 = operator new(4096 << v20, (std::align_val_t)8uLL);
      unsigned int v23 = *(_DWORD *)(v21 + 2064);
      if (v23 >= *(_DWORD *)(v21 + 2068)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v3 = v25;
      *(void *)(*(void *)(v21 + 2056) + 8 * v23) = v25;
      ++*(_DWORD *)(v21 + 2064);
      uint64_t v12 = v21;
      *(void *)(v21 + 2048) = (char *)v25 + v22;
      uint64_t v10 = v24;
    }
    else
    {
      uint64_t v3 = (void *)((v13 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(void *)(v12 + 2040) = v3 + 3;
    int v14 = v26;
    *uint64_t v3 = this;
    v3[2] = 0;
    v3[1] = (v14 << 8) | 0xDu;
    *((void *)v10 + 1) = v3;
  }
  return (uint64_t)v3;
}

unint64_t llvm::Type::getHalfPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1624), a2);
}

unint64_t llvm::Type::getBFloatPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1648), a2);
}

unint64_t llvm::Type::getFloatPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1672), a2);
}

unint64_t llvm::Type::getDoublePtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1696), a2);
}

unint64_t llvm::Type::getX86_FP80PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1768), a2);
}

unint64_t llvm::Type::getFP128PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1792), a2);
}

unint64_t llvm::Type::getPPC_FP128PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1816), a2);
}

unint64_t llvm::Type::getX86_MMXPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1840), a2);
}

unint64_t llvm::Type::getX86_AMXPtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1864), a2);
}

unint64_t llvm::Type::getInt1PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1888), a2);
}

unint64_t llvm::Type::getInt8PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1912), a2);
}

unint64_t llvm::Type::getInt32PtrTy(llvm::Type *this, llvm::LLVMContext *a2)
{
  return llvm::PointerType::get((llvm::PointerType *)(*(void *)this + 1960), a2);
}

uint64_t llvm::IntegerType::getMask@<X0>(uint64_t this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v2 = *(_DWORD *)(this + 8);
  *((_DWORD *)a2 + 2) = v2 >> 8;
  if (v2 >> 8 > 0x40) {
    llvm::APInt::initSlowCase(a2);
  }
  if (v2 <= 0xFF) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v2);
  }
  *(void *)a2 = v3;
  return this;
}

uint64_t llvm::FunctionType::FunctionType(uint64_t result, void *a2, uint64_t *a3, unsigned int a4, int a5)
{
  *(void *)uint64_t result = *a2;
  *(void *)(result + 24) = a2;
  *(void *)(result + 16) = 0;
  if (a5) {
    int v5 = 270;
  }
  else {
    int v5 = 14;
  }
  *(_DWORD *)(result + 8) = v5;
  if (a4)
  {
    uint64_t v6 = a4;
    uint64_t v7 = (void *)(result + 32);
    do
    {
      uint64_t v8 = *a3++;
      *v7++ = v8;
      --v6;
    }
    while (v6);
  }
  *(void *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a4 + 1;
  return result;
}

{
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  *(void *)uint64_t result = *a2;
  *(void *)(result + 24) = a2;
  *(void *)(result + 16) = 0;
  if (a5) {
    int v5 = 270;
  }
  else {
    int v5 = 14;
  }
  *(_DWORD *)(result + 8) = v5;
  if (a4)
  {
    uint64_t v6 = a4;
    uint64_t v7 = (void *)(result + 32);
    do
    {
      uint64_t v8 = *a3++;
      *v7++ = v8;
      --v6;
    }
    while (v6);
  }
  *(void *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a4 + 1;
  return result;
}

uint64_t llvm::FunctionType::get(uint64_t **a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = (uint64_t *)a2;
  uint64_t v8 = **a1;
  v18[0] = (uint64_t)a1;
  v18[1] = a2;
  uint64_t v18[2] = a3;
  char v19 = a4;
  unsigned int v20 = 0;
  char v9 = sub_1CC623140((uint64_t *)(v8 + 2192), v18, &v20);
  uint64_t v10 = v20;
  if (v9) {
    return *v20;
  }
  int v12 = *(_DWORD *)(v8 + 2200);
  unsigned int v13 = *(_DWORD *)(v8 + 2208);
  if (4 * v12 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_15;
  }
  if (v13 + ~v12 - *(_DWORD *)(v8 + 2204) <= v13 >> 3)
  {
LABEL_15:
    sub_1CC6233D4(v8 + 2192, v13);
    unsigned int v20 = 0;
    sub_1CC623140((uint64_t *)(v8 + 2192), v18, &v20);
    uint64_t v10 = v20;
  }
  ++*(_DWORD *)(v8 + 2200);
  if (*v10 != -4096) {
    --*(_DWORD *)(v8 + 2204);
  }
  uint64_t *v10 = 0;
  uint64_t result = sub_1CB906F34((uint64_t *)(v8 + 2040), 8 * a3 + 32, 3);
  *(void *)uint64_t result = *a1;
  *(void *)(result + 24) = a1;
  *(void *)(result + 16) = 0;
  if (a4) {
    int v14 = 270;
  }
  else {
    int v14 = 14;
  }
  *(_DWORD *)(result + 8) = v14;
  if (a3)
  {
    uint64_t v15 = a3;
    int v16 = (void *)(result + 32);
    do
    {
      uint64_t v17 = *v6++;
      *v16++ = v17;
      --v15;
    }
    while (v15);
  }
  *(void *)(result + 16) = result + 24;
  *(_DWORD *)(result + 12) = a3 + 1;
  uint64_t *v10 = result;
  return result;
}

uint64_t llvm::FunctionType::get(uint64_t **this, llvm::Type *a2)
{
  return llvm::FunctionType::get(this, 0, 0, (int)a2);
}

BOOL llvm::FunctionType::isValidArgumentType(llvm::FunctionType *this, llvm::Type *a2)
{
  int v2 = *((unsigned __int8 *)this + 8);
  return v2 != 14 && v2 != 7;
}

uint64_t llvm::StructType::get(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *a1;
  v17[0] = a2;
  v17[1] = a3;
  char v18 = a4;
  uint64_t v19 = 0;
  sub_1CC623740(v8 + 2216, &v19, (uint64_t)v17, (uint64_t)&v20);
  char v9 = v20;
  if (!v21) {
    return *v20;
  }
  uint64_t v10 = *a1;
  *(void *)(v10 + 2120) = *(void *)(*a1 + 2120) + 32;
  uint64_t v11 = *(void *)(v10 + 2040);
  if (((v11 + 7) & 0xFFFFFFFFFFFFFFF8) - v11 + 32 > *(void *)(v10 + 2048) - v11)
  {
    unsigned int v14 = *(_DWORD *)(v10 + 2064) >> 7;
    if (v14 >= 0x1E) {
      LOBYTE(v14) = 30;
    }
    uint64_t v15 = 4096 << v14;
    uint64_t v12 = (uint64_t)operator new(4096 << v14, (std::align_val_t)8uLL);
    unsigned int v16 = *(_DWORD *)(v10 + 2064);
    if (v16 >= *(_DWORD *)(v10 + 2068)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v10 + 2056) + 8 * v16) = v12;
    ++*(_DWORD *)(v10 + 2064);
    *(void *)(v10 + 2048) = v12 + v15;
  }
  else
  {
    uint64_t v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v10 + 2040) = v12 + 32;
  *(void *)uint64_t v12 = a1;
  *(void *)(v12 + 20) = 0;
  *(void *)(v12 + 12) = 0;
  *(_DWORD *)(v12 + 28) = 0;
  *(_DWORD *)(v12 + 8) = 1040;
  llvm::StructType::setBody(v12, a2, a3, a4);
  *char v9 = v12;
  return v12;
}

uint64_t llvm::StructType::setBody(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4) {
    int v5 = 768;
  }
  else {
    int v5 = 256;
  }
  *(_DWORD *)(a1 + 8) |= v5;
  *(_DWORD *)(a1 + 12) = a3;
  if (a3)
  {
    uint64_t v7 = 8 * a3;
    uint64_t result = sub_1CB906F34((uint64_t *)(**(void **)a1 + 2040), 8 * a3, 3);
    uint64_t v9 = 0;
    do
    {
      *(void *)(result + v9) = *(void *)(a2 + v9);
      v9 += 8;
    }
    while (v7 != v9);
  }
  else
  {
    uint64_t result = 0;
  }
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t llvm::StructType::containsScalableVectorType(llvm::StructType *this)
{
  uint64_t v1 = *((unsigned int *)this + 3);
  if (!v1) {
    return 0;
  }
  int v2 = (llvm::StructType **)*((void *)this + 2);
  uint64_t v3 = 8 * v1;
  while (1)
  {
    int v4 = *((unsigned __int8 *)*v2 + 8);
    if (v4 == 16) {
      break;
    }
    if (v4 == 19) {
      return 1;
    }
LABEL_7:
    ++v2;
    v3 -= 8;
    if (!v3) {
      return 0;
    }
  }
  if ((llvm::StructType::containsScalableVectorType(*v2) & 1) == 0) {
    goto LABEL_7;
  }
  return 1;
}

uint64_t llvm::StructType::setName(uint64_t result, unsigned __int8 *a2, size_t a3)
{
  int v5 = (uint64_t **)result;
  v37[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(size_t **)(result + 24);
  if (!v6)
  {
    if (!a3) {
      return result;
    }
    goto LABEL_3;
  }
  if (a3 != *v6 || a3 && (uint64_t result = memcmp(a2, v6 + 2, a3), result))
  {
    *(int32x2_t *)&double v17 = llvm::StringMapImpl::RemoveKey((uint64_t *)(**v5 + 2240), v6);
    if (a3)
    {
LABEL_3:
      uint64_t v7 = (llvm::StringMapImpl *)(**v5 + 2240);
      uint64_t v32 = a2;
      size_t v33 = a3;
      BOOL v34 = v5;
      uint64_t result = (uint64_t)sub_1CC623BC4(v7, a2, a3, (uint64_t *)&v34);
      if (!v8)
      {
        BOOL v35 = v37;
        long long v36 = xmmword_1CD96DBD0;
        if (a3 >= 0x41) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        memcpy(v37, a2, a3);
        uint64_t v10 = v36 + a3;
        *(void *)&long long v36 = v10;
        if ((unint64_t)(v10 + 1) > *((void *)&v36 + 1)) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *((unsigned char *)v35 + v10) = 46;
        *(void *)&long long v36 = v36 + 1;
        int v24 = 0;
        char v28 = 0;
        uint64_t v29 = 0;
        int v31 = &v35;
        int v30 = 0;
        unint64_t v11 = (a3 + 1);
        unsigned int v23 = &unk_1F2646FA8;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        do
        {
          if ((void)v36 != v11)
          {
            if ((unint64_t)v36 <= v11)
            {
              if (*((void *)&v36 + 1) < v11) {
                llvm::SmallVectorBase<unsigned long long>::grow_pod();
              }
              if (v11 != (void)v36) {
                bzero((char *)v35 + v36, v11 - v36);
              }
            }
            *(void *)&long long v36 = v11;
          }
          uint64_t v12 = **v5;
          unint64_t v13 = *(unsigned int *)(v12 + 2272);
          *(_DWORD *)(v12 + 2272) = v13 + 1;
          sub_1CD098D14((llvm::raw_ostream *)&v23, v13, 0, 0, 0);
          unsigned int v14 = (llvm::StringMapImpl *)(**v5 + 2240);
          unsigned int v20 = (unsigned __int8 *)*v31;
          size_t v21 = (size_t)v31[1];
          uint64_t v22 = v5;
          uint64_t result = (uint64_t)sub_1CC623BC4(v14, v20, v21, (uint64_t *)&v22);
        }
        while (!v15);
        unsigned int v23 = &unk_1F2646B98;
        if (v30 == 1 && v25)
        {
          uint64_t v19 = result;
          MEMORY[0x1D25D9CB0](v25, 0x1000C8077774924);
          uint64_t result = v19;
        }
        if (v35 != v37)
        {
          uint64_t v16 = result;
          free(v35);
          uint64_t result = v16;
        }
      }
      if (v5[3])
      {
        uint64_t v18 = result;
        MEMORY[0x1D25D9CD0](v5[3], 8);
        uint64_t result = v18;
      }
      uint64_t v9 = *(uint64_t **)result;
      goto LABEL_7;
    }
    uint64_t result = (uint64_t)v5[3];
    if (result)
    {
      uint64_t result = MEMORY[0x1D25D9CD0](result, 8, v17);
      uint64_t v9 = 0;
LABEL_7:
      void v5[3] = v9;
    }
  }
  return result;
}

uint64_t llvm::StructType::getName(llvm::StructType *this)
{
  uint64_t result = *((void *)this + 3);
  if (result) {
    result += 16;
  }
  return result;
}

uint64_t llvm::StructType::create(uint64_t *a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = *a1;
  *(void *)(v6 + 2120) = *(void *)(*a1 + 2120) + 32;
  uint64_t v7 = *(void *)(v6 + 2040);
  if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v7 + 32 > *(void *)(v6 + 2048) - v7)
  {
    unsigned int v10 = *(_DWORD *)(v6 + 2064) >> 7;
    if (v10 >= 0x1E) {
      LOBYTE(v10) = 30;
    }
    uint64_t v11 = 4096 << v10;
    uint64_t v8 = (uint64_t)operator new(4096 << v10, (std::align_val_t)8uLL);
    unsigned int v12 = *(_DWORD *)(v6 + 2064);
    if (v12 >= *(_DWORD *)(v6 + 2068)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v6 + 2056) + 8 * v12) = v8;
    ++*(_DWORD *)(v6 + 2064);
    *(void *)(v6 + 2048) = v8 + v11;
  }
  else
  {
    uint64_t v8 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v6 + 2040) = v8 + 32;
  *(void *)uint64_t v8 = a1;
  *(_DWORD *)(v8 + 8) = 16;
  *(void *)(v8 + 20) = 0;
  *(void *)(v8 + 12) = 0;
  *(_DWORD *)(v8 + 28) = 0;
  if (a3) {
    llvm::StructType::setName(v8, a2, a3);
  }
  return v8;
}

uint64_t llvm::StructType::create(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = llvm::StructType::create(a1, 0, 0);
  llvm::StructType::setBody(v5, a2, a3, 0);
  return v5;
}

uint64_t llvm::StructType::create(llvm::StructType *this, llvm::LLVMContext *a2)
{
  return llvm::StructType::create((uint64_t *)this, 0, 0);
}

uint64_t llvm::StructType::create(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4 = llvm::StructType::create(**a1, 0, 0);
  llvm::StructType::setBody(v4, (uint64_t)a1, a2, 0);
  return v4;
}

uint64_t llvm::StructType::getTypeAtIndex(llvm::StructType *this, const llvm::Value *AggregateElement)
{
  if (!AggregateElement || *((unsigned char *)AggregateElement + 16) != 16)
  {
    uint64_t v6 = this;
    AggregateElement = (const llvm::Value *)llvm::Constant::getAggregateElement(AggregateElement, 0);
    this = v6;
  }
  uint64_t v4 = (unsigned int *)*((void *)AggregateElement + 3);
  int v2 = (char *)AggregateElement + 24;
  uint64_t v3 = v4;
  if (*((_DWORD *)v2 + 2) < 0x41u) {
    uint64_t v3 = (unsigned int *)v2;
  }
  return *(void *)(*((void *)this + 2) + 8 * *v3);
}

unsigned __int8 *llvm::StructType::indexValid(llvm::StructType *this, const llvm::Value *a2)
{
  int v2 = *(_DWORD *)(*(void *)a2 + 8);
  int v3 = v2 & 0xFE;
  int v4 = v2;
  if (v3 == 18) {
    int v4 = *(_DWORD *)(**(void **)(*(void *)a2 + 16) + 8);
  }
  if (v2 == 19 || v4 != 8205) {
    return 0;
  }
  unsigned int v6 = *((unsigned __int8 *)a2 + 16);
  if (v6 > 0x14) {
    return 0;
  }
  if (v3 == 18)
  {
    uint64_t v9 = this;
    uint64_t result = (unsigned __int8 *)llvm::Constant::getSplatValue(a2, 0);
    if (!result) {
      return result;
    }
    a2 = (const llvm::Value *)result;
    unsigned int v6 = result[16];
    this = v9;
  }
  if (v6 != 16) {
    return 0;
  }
  uint64_t v7 = (void *)((char *)a2 + 24);
  if (*((_DWORD *)a2 + 8) >= 0x41u) {
    uint64_t v7 = (void *)*v7;
  }
  return (unsigned __int8 *)(*v7 < (unint64_t)*((unsigned int *)this + 3));
}

uint64_t llvm::StructType::getTypeByName(uint64_t *a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(unsigned int *)(*a1 + 2248);
  if (!v4) {
    return 0;
  }
  int v7 = 0;
  if (__n)
  {
    size_t v8 = __n;
    uint64_t v9 = __s1;
    do
    {
      int v10 = *v9++;
      int v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  uint64_t v11 = *(void *)(v3 + 2240);
  int v12 = 1;
  int v13 = v7;
  while (1)
  {
    uint64_t v14 = v13 & (v4 - 1);
    char v15 = *(void **)(v11 + 8 * v14);
    if (v15 != (void *)-8)
    {
      if (!v15) {
        return 0;
      }
      if (*(_DWORD *)(v11 + 8 * v4 + 8 + 4 * v14) == v7
        && __n == *v15
        && (!__n || !memcmp(__s1, (char *)v15 + *(unsigned int *)(v3 + 2260), __n)))
      {
        break;
      }
    }
    int v13 = v12 + v14;
    ++v12;
  }
  if (v14 == -1 || (int)v14 == v4) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v11 + 8 * (int)v14) + 8);
  }
}

double llvm::ArrayType::ArrayType(llvm::ArrayType *this, llvm::Type *a2, uint64_t a3)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  *((void *)this + 2) = (char *)this + 24;
  *(void *)&double result = 0x100000011;
  *((void *)this + 1) = 0x100000011;
  return result;
}

{
  double result;

  *(void *)this = *(void *)a2;
  *((void *)this + 3) = a2;
  *((void *)this + 4) = a3;
  *((void *)this + 2) = (char *)this + 24;
  *(void *)&double result = 0x100000011;
  *((void *)this + 1) = 0x100000011;
  return result;
}

llvm::ArrayType *llvm::ArrayType::get(llvm::ArrayType *this, llvm::Type *a2)
{
  uint64_t v4 = **(void **)this;
  unsigned int v5 = *(_DWORD *)(v4 + 2320);
  unsigned int v6 = this >> 4;
  if (v5)
  {
    uint64_t v7 = *(void *)(v4 + 2304);
    unint64_t v8 = (37 * a2)
       + ~((unint64_t)(37 * a2) << 32)
       + ((unint64_t)(v6 ^ (this >> 9)) << 32);
    unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
    unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
    unsigned int v11 = (v5 - 1) & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)));
    int v12 = (llvm::ArrayType **)(v7 + 24 * v11);
    int v13 = *v12;
    uint64_t v14 = v12[1];
    if (*v12 == this && v14 == a2) {
      goto LABEL_20;
    }
    uint64_t v16 = 0;
    int v17 = 1;
    while (v13 != (llvm::ArrayType *)-4096 || v14 != (llvm::Type *)-1)
    {
      if (v16) {
        BOOL v36 = 0;
      }
      else {
        BOOL v36 = v14 == (llvm::Type *)-2;
      }
      if (v36 && v13 == (llvm::ArrayType *)-8192) {
        uint64_t v16 = v12;
      }
      unsigned int v38 = v11 + v17++;
      unsigned int v11 = v38 & (v5 - 1);
      int v12 = (llvm::ArrayType **)(v7 + 24 * v11);
      int v13 = *v12;
      uint64_t v14 = v12[1];
      if (*v12 == this && v14 == a2) {
        goto LABEL_20;
      }
    }
    if (v16) {
      int v12 = v16;
    }
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v18 = v4 + 2304;
  int v19 = *(_DWORD *)(v4 + 2312);
  if (4 * v19 + 4 >= 3 * v5)
  {
    sub_1CC623EB0(v18, 2 * v5);
    int v24 = *(_DWORD *)(v4 + 2320);
    if (v24)
    {
      uint64_t v25 = *(void *)(v4 + 2304);
      unint64_t v26 = (37 * a2)
          + ~((unint64_t)(37 * a2) << 32)
          + ((unint64_t)(v6 ^ (this >> 9)) << 32);
      unint64_t v27 = (v26 ^ (v26 >> 22)) + ~((v26 ^ (v26 >> 22)) << 13);
      unint64_t v28 = (9 * (v27 ^ (v27 >> 8))) ^ ((9 * (v27 ^ (v27 >> 8))) >> 15);
      int v29 = v24 - 1;
      unsigned int v30 = v29 & (((v28 + ~(v28 << 27)) >> 31) ^ (v28 + ~(v28 << 27)));
      int v12 = (llvm::ArrayType **)(v25 + 24 * v30);
      int v31 = *v12;
      uint64_t v32 = v12[1];
      if (*v12 != this || v32 != a2)
      {
        BOOL v34 = 0;
        int v35 = 1;
        while (v31 != (llvm::ArrayType *)-4096 || v32 != (llvm::Type *)-1)
        {
          if (v34) {
            BOOL v43 = 0;
          }
          else {
            BOOL v43 = v32 == (llvm::Type *)-2;
          }
          if (v43 && v31 == (llvm::ArrayType *)-8192) {
            BOOL v34 = v12;
          }
          unsigned int v45 = v30 + v35++;
          unsigned int v30 = v45 & v29;
          int v12 = (llvm::ArrayType **)(v25 + 24 * v30);
          int v31 = *v12;
          uint64_t v32 = v12[1];
          if (*v12 == this && v32 == a2) {
            goto LABEL_14;
          }
        }
        if (v34) {
          int v12 = v34;
        }
      }
    }
    else
    {
      int v12 = 0;
    }
  }
  else if (v5 + ~v19 - *(_DWORD *)(v4 + 2316) <= v5 >> 3)
  {
    sub_1CC623EB0(v18, v5);
    unint64_t v47 = 0;
    sub_1CC623DD8(*(void *)(v4 + 2304), *(_DWORD *)(v4 + 2320), (uint64_t)this, (uint64_t)a2, &v47);
    int v12 = v47;
  }
LABEL_14:
  ++*(_DWORD *)(v4 + 2312);
  if (*v12 != (llvm::ArrayType *)-4096 || (llvm::ArrayType *)((char *)v12[1] + 1) != 0) {
    --*(_DWORD *)(v4 + 2316);
  }
  *int v12 = this;
  v12[1] = a2;
  v12[2] = 0;
LABEL_20:
  size_t v21 = v12[2];
  if (!v21)
  {
    *(void *)(v4 + 2120) += 40;
    uint64_t v22 = *(void *)(v4 + 2040);
    if (((v22 + 7) & 0xFFFFFFFFFFFFFFF8) - v22 + 40 > *(void *)(v4 + 2048) - v22)
    {
      unsigned int v40 = *(_DWORD *)(v4 + 2064) >> 7;
      if (v40 >= 0x1E) {
        LOBYTE(v40) = 30;
      }
      uint64_t v41 = 4096 << v40;
      size_t v21 = (llvm::ArrayType *)operator new(4096 << v40, (std::align_val_t)8uLL);
      unsigned int v42 = *(_DWORD *)(v4 + 2064);
      if (v42 >= *(_DWORD *)(v4 + 2068)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v4 + 2056) + 8 * v42) = v21;
      ++*(_DWORD *)(v4 + 2064);
      *(void *)(v4 + 2048) = (char *)v21 + v41;
    }
    else
    {
      size_t v21 = (llvm::ArrayType *)((v22 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
    *(void *)(v4 + 2040) = (char *)v21 + 40;
    *(void *)size_t v21 = *(void *)this;
    *((void *)v21 + 3) = this;
    *((void *)v21 + 4) = a2;
    *((void *)v21 + 2) = (char *)v21 + 24;
    *((void *)v21 + 1) = 0x100000011;
    v12[2] = v21;
  }
  return v21;
}

BOOL llvm::ArrayType::isValidElementType(llvm::ArrayType *this, llvm::Type *a2)
{
  int v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 8u || ((0xB7u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 19;
}

uint64_t llvm::VectorType::VectorType(uint64_t result, void *a2, int a3, unsigned __int8 a4)
{
  *(void *)double result = *a2;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = a3;
  *(void *)(result + 16) = result + 24;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = 1;
  return result;
}

{
  *(void *)double result = *a2;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = a3;
  *(void *)(result + 16) = result + 24;
  *(_DWORD *)(result + 8) = a4;
  *(_DWORD *)(result + 12) = 1;
  return result;
}

double llvm::VectorType::get(llvm::FixedVectorType *this, llvm::Type *a2)
{
  if ((unint64_t)a2 >> 32 == 1) {
    return llvm::ScalableVectorType::get((uint64_t **)this, a2);
  }
  else {
    return llvm::FixedVectorType::get(this, a2);
  }
}

double llvm::FixedVectorType::get(llvm::FixedVectorType *this, llvm::Type *a2)
{
  int v2 = (int)a2;
  uint64_t v4 = **(void **)this;
  unint64_t v28 = this;
  uint64_t v29 = a2;
  int v5 = *(_DWORD *)(v4 + 2344);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v8 = ~((unint64_t)(37 * a2) << 32)
       + (37 * a2)
       + ((unint64_t)((this >> 4) ^ (this >> 9)) << 32);
    unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
    unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
    int v11 = v5 - 1;
    unsigned int v12 = v11 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)));
    for (int i = 1; ; ++i)
    {
      uint64_t v7 = *(void *)(v4 + 2328);
      uint64_t v14 = v7 + 24 * v12;
      char v15 = *(llvm::FixedVectorType **)v14;
      if (*(llvm::FixedVectorType **)v14 == this && *(_DWORD *)(v14 + 8) == a2 && *(_DWORD *)(v14 + 12) == 0)
      {
        if (!*(void *)(v14 + 16)) {
          goto LABEL_26;
        }
        return result;
      }
      if (v15 == (llvm::FixedVectorType *)-4096) {
        break;
      }
      if (v15 != (llvm::FixedVectorType *)-8192) {
        goto LABEL_13;
      }
      BOOL v17 = *(_DWORD *)(v14 + 8) == -2 && *(_DWORD *)(v14 + 12) == 0;
LABEL_14:
      if (v17 && v6 == 0) {
        uint64_t v6 = v7 + 24 * v12;
      }
      unsigned int v18 = v12 + i;
      unsigned int v12 = v18 & v11;
    }
    if (*(_DWORD *)(v14 + 8) == -1 && *(_DWORD *)(v14 + 12) == 1)
    {
      if (v6) {
        uint64_t v20 = v6;
      }
      else {
        uint64_t v20 = v7 + 24 * v12;
      }
      goto LABEL_25;
    }
LABEL_13:
    BOOL v17 = 0;
    goto LABEL_14;
  }
  uint64_t v20 = 0;
LABEL_25:
  uint64_t v14 = sub_1CC6241D8(v4 + 2328, (uint64_t)&v28, (uint64_t)&v28, v20);
  *(void *)uint64_t v14 = v28;
  *(void *)(v14 + 8) = v29;
  *(void *)(v14 + 16) = 0;
LABEL_26:
  *(void *)(v4 + 2120) += 40;
  uint64_t v21 = *(void *)(v4 + 2040);
  if (((v21 + 7) & 0xFFFFFFFFFFFFFFF8) - v21 + 40 > *(void *)(v4 + 2048) - v21)
  {
    unsigned int v24 = *(_DWORD *)(v4 + 2064) >> 7;
    if (v24 >= 0x1E) {
      LOBYTE(v24) = 30;
    }
    uint64_t v25 = 4096 << v24;
    unint64_t v22 = (unint64_t)operator new(4096 << v24, (std::align_val_t)8uLL);
    unsigned int v26 = *(_DWORD *)(v4 + 2064);
    if (v26 >= *(_DWORD *)(v4 + 2068)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(v4 + 2056) + 8 * v26) = v22;
    ++*(_DWORD *)(v4 + 2064);
    *(void *)(v4 + 2048) = v22 + v25;
  }
  else
  {
    unint64_t v22 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(v4 + 2040) = v22 + 40;
  *(void *)unint64_t v22 = *(void *)this;
  *(void *)(v22 + 24) = this;
  *(_DWORD *)(v22 + 32) = v2;
  *(void *)(v22 + 16) = v22 + 24;
  *(void *)&double result = 0x100000012;
  *(void *)(v22 + 8) = 0x100000012;
  *(void *)(v14 + 16) = v22;
  return result;
}

uint64_t llvm::VectorType::isValidElementType(llvm::VectorType *this, llvm::Type *a2)
{
  return (*((unsigned __int8 *)this + 8) < 0x15u) & (0x10A07Fu >> *((unsigned char *)this + 8));
}

unint64_t llvm::PointerType::get(llvm::PointerType *this, llvm::Type *a2)
{
  int v46 = this;
  uint64_t v4 = *(uint64_t ***)this;
  uint64_t v5 = **(void **)this;
  if (*(unsigned char *)(v5 + 2681))
  {
    int v6 = *(unsigned __int8 *)(v5 + 2680);
  }
  else
  {
    if (getenv("ENABLE_OPAQUE_POINTERS_BY_DEFAULT"))
    {
      *(_WORD *)(v5 + 2680) = 257;
      goto LABEL_62;
    }
    int v6 = byte_1EBD06638;
    *(unsigned char *)(v5 + 2680) = byte_1EBD06638;
    *(unsigned char *)(v5 + 2681) = 1;
  }
  if (!v6)
  {
    if (a2)
    {
      unint64_t v44 = this;
      uint64_t v45 = a2;
      int v7 = *(_DWORD *)(v5 + 2392);
      if (v7)
      {
        uint64_t v8 = *(void *)(v5 + 2376);
        unint64_t v9 = ~((unint64_t)(37 * a2) << 32)
           + (37 * a2)
           + ((unint64_t)((this >> 4) ^ (this >> 9)) << 32);
        unint64_t v10 = (v9 ^ (v9 >> 22)) + ~((v9 ^ (v9 >> 22)) << 13);
        unint64_t v11 = (9 * (v10 ^ (v10 >> 8))) ^ ((9 * (v10 ^ (v10 >> 8))) >> 15);
        int v12 = v7 - 1;
        unsigned int v13 = v12 & (((v11 + ~(v11 << 27)) >> 31) ^ (v11 + ~(v11 << 27)));
        uint64_t v14 = v8 + 24 * v13;
        char v15 = *(llvm::PointerType **)v14;
        int v16 = *(_DWORD *)(v14 + 8);
        if (*(llvm::PointerType **)v14 == this && v16 == a2) {
          goto LABEL_11;
        }
        uint64_t v21 = 0;
        int v22 = 1;
        while (v15 != (llvm::PointerType *)-4096 || v16 != -1)
        {
          if (v21) {
            BOOL v23 = 0;
          }
          else {
            BOOL v23 = v16 == -2;
          }
          if (v23 && v15 == (llvm::PointerType *)-8192) {
            uint64_t v21 = v14;
          }
          unsigned int v25 = v13 + v22++;
          unsigned int v13 = v25 & v12;
          uint64_t v14 = v8 + 24 * v13;
          char v15 = *(llvm::PointerType **)v14;
          int v16 = *(_DWORD *)(v14 + 8);
          if (*(llvm::PointerType **)v14 == this && v16 == a2) {
            goto LABEL_11;
          }
        }
        if (v21) {
          uint64_t v35 = v21;
        }
        else {
          uint64_t v35 = v14;
        }
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v14 = sub_1CC6248D4(v5 + 2376, (uint64_t)&v44, (uint64_t)&v44, v35);
      *(void *)uint64_t v14 = v44;
      *(_DWORD *)(v14 + 8) = v45;
      *(void *)(v14 + 16) = 0;
LABEL_11:
      unsigned int v18 = (unint64_t *)(v14 + 16);
LABEL_12:
      unint64_t v19 = *v18;
      if (!*v18)
      {
        *(void *)(v5 + 2120) += 32;
        uint64_t v33 = *(void *)(v5 + 2040);
        if (((v33 + 7) & 0xFFFFFFFFFFFFFFF8) - v33 + 32 > *(void *)(v5 + 2048) - v33)
        {
          unsigned int v41 = *(_DWORD *)(v5 + 2064) >> 7;
          if (v41 >= 0x1E) {
            LOBYTE(v41) = 30;
          }
          uint64_t v42 = 4096 << v41;
          unint64_t v19 = (unint64_t)operator new(4096 << v41, (std::align_val_t)8uLL);
          unsigned int v43 = *(_DWORD *)(v5 + 2064);
          if (v43 >= *(_DWORD *)(v5 + 2068)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(void *)(*(void *)(v5 + 2056) + 8 * v43) = v19;
          ++*(_DWORD *)(v5 + 2064);
          *(void *)(v5 + 2048) = v19 + v42;
        }
        else
        {
          unint64_t v19 = (v33 + 7) & 0xFFFFFFFFFFFFFFF8;
        }
        *(void *)(v5 + 2040) = v19 + 32;
        BOOL v34 = v46;
        *(void *)unint64_t v19 = *(void *)v46;
        *(void *)(v19 + 24) = v34;
        *(void *)(v19 + 16) = v19 + 24;
        *(_DWORD *)(v19 + 8) = (a2 << 8) | 0xF;
        *(_DWORD *)(v19 + 12) = 1;
        *unsigned int v18 = v19;
      }
      return v19;
    }
    int v27 = *(_DWORD *)(v5 + 2368);
    if (v27)
    {
      uint64_t v28 = *(void *)(v5 + 2352);
      int v29 = v27 - 1;
      unsigned int v30 = v29 & ((this >> 4) ^ (this >> 9));
      int v31 = (void *)(v28 + 16 * v30);
      uint64_t v32 = (llvm::PointerType *)*v31;
      if ((llvm::PointerType *)*v31 == this)
      {
LABEL_31:
        unsigned int v18 = v31 + 1;
        goto LABEL_12;
      }
      BOOL v36 = 0;
      int v37 = 1;
      while (v32 != (llvm::PointerType *)-4096)
      {
        if (v36) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v32 == (llvm::PointerType *)-8192;
        }
        if (v38) {
          BOOL v36 = v31;
        }
        unsigned int v39 = v30 + v37++;
        unsigned int v30 = v39 & v29;
        int v31 = (void *)(v28 + 16 * v30);
        uint64_t v32 = (llvm::PointerType *)*v31;
        if ((llvm::PointerType *)*v31 == this) {
          goto LABEL_31;
        }
      }
      if (v36) {
        unsigned int v40 = v36;
      }
      else {
        unsigned int v40 = v31;
      }
    }
    else
    {
      unsigned int v40 = 0;
    }
    int v31 = sub_1CC62462C(v5 + 2352, (uint64_t)&v46, (uint64_t *)&v46, v40);
    *int v31 = v46;
    v31[1] = 0;
    goto LABEL_31;
  }
LABEL_62:

  return llvm::PointerType::get(v4, a2);
}

uint64_t llvm::PointerType::PointerType(uint64_t this, llvm::Type *a2, int a3)
{
  *(void *)this = *(void *)a2;
  *(void *)(this + 24) = a2;
  *(void *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0xF;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

{
  *(void *)this = *(void *)a2;
  *(void *)(this + 24) = a2;
  *(void *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0xF;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

uint64_t llvm::PointerType::PointerType(uint64_t this, llvm::LLVMContext *a2, int a3)
{
  *(void *)this = a2;
  *(void *)(this + 20) = 0;
  *(void *)(this + 12) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0xF;
  return this;
}

{
  *(void *)this = a2;
  *(void *)(this + 20) = 0;
  *(void *)(this + 12) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0xF;
  return this;
}

BOOL llvm::PointerType::isValidElementType(llvm::PointerType *this, llvm::Type *a2)
{
  int v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 6u || ((0x27u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 11;
}

BOOL llvm::PointerType::isLoadableOrStorableType(llvm::PointerType *this, llvm::Type *a2)
{
  int v2 = *((_DWORD *)this + 2);
  if (v2 - 7) < 6u && ((0x27u >> (v2 - 7))) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 2);
  return v3 != 11 && v3 != 14;
}

unint64_t llvm::TargetExtType::getLayoutType(llvm::TargetExtType *this)
{
  uint64_t v1 = *(void *)this;
  if (*((void *)this + 4) >= 6uLL
    && ((v2 = (int *)*((void *)this + 3), int v3 = *v2, v4 = *((unsigned __int16 *)v2 + 2), v3 == 1919512691)
      ? (BOOL v5 = v4 == 11894)
      : (BOOL v5 = 0),
        v5))
  {
    return llvm::PointerType::get((llvm::PointerType *)(*(void *)v1 + 1912), 0);
  }
  else
  {
    return *(void *)v1 + 1576;
  }
}

uint64_t sub_1CC623140(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    BOOL v17 = 0;
    uint64_t result = 0;
    goto LABEL_24;
  }
  int v29 = a3;
  uint64_t v5 = *a1;
  unint64_t v6 = sub_1CC13A6B8((void *)a2[1], a2[1] + 8 * a2[2]);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    unint64_t v26 = v6;
    int v27 = __cxa_guard_acquire(&qword_1EBCBE588);
    unint64_t v6 = v26;
    if (v27)
    {
      unint64_t v28 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v28 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v28;
      __cxa_guard_release(&qword_1EBCBE588);
      unint64_t v6 = v26;
    }
  }
  int v7 = 0;
  uint64_t v8 = *a2;
  *(void *)unsigned int v30 = *a2;
  *(void *)&v30[8] = v6;
  int v9 = *((unsigned __int8 *)a2 + 24);
  v30[16] = *((unsigned char *)a2 + 24);
  uint64_t v10 = __ROR8__(0xB492B66FBE98F273 * *a2 - v6, 43)
      - 0x3C5A37A36834CED9 * *(void *)&v30[1]
      + __ROR8__((0x9AE16A3B2F90404FLL * *(void *)&v30[9]) ^ qword_1EBCBE580, 30);
  unint64_t v11 = __ROR8__(v6 ^ 0xC949D7C7509E6557, 20)
      + qword_1EBCBE580
      - 0x4B6D499041670D8DLL * *a2
      - 0x9AE16A3B2F90404FLL * *(void *)&v30[9]
      + 17;
  unint64_t v12 = 0x9DDFEA08EB382D69
      * (v11 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)));
  unsigned int v13 = -348639895 * ((v12 >> 47) ^ v12);
  int v14 = v3 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v16 = v13 & v14;
    BOOL v17 = (uint64_t *)(v5 + 8 * (v13 & v14));
    uint64_t v18 = *v17;
    if (*v17 == -8192) {
      goto LABEL_13;
    }
    if (v18 == -4096) {
      break;
    }
    unint64_t v19 = *(uint64_t **)(v18 + 16);
    uint64_t v21 = *v19;
    uint64_t v20 = v19 + 1;
    if (v8 == v21 && v9 == *(_DWORD *)(v18 + 8) > 0xFFu)
    {
      int64_t v23 = 8 * *(unsigned int *)(v18 + 12) - 8;
      if (a2[2] == v23 >> 3 && !memcmp((const void *)a2[1], v20, v23))
      {
        uint64_t result = 1;
        goto LABEL_23;
      }
    }
LABEL_13:
    if (v7) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v18 == -8192;
    }
    if (v24) {
      int v7 = (uint64_t *)(v5 + 8 * v16);
    }
    unsigned int v13 = i + v16;
  }
  uint64_t result = 0;
  if (v7) {
    BOOL v17 = v7;
  }
LABEL_23:
  a3 = v29;
LABEL_24:
  *a3 = v17;
  return result;
}

void *sub_1CC6233D4(unint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC6234A0(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1CC6234A0(unint64_t result, uint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  unint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v10 = *(void *)v5;
        int v11 = *(_DWORD *)(v5 + 16);
        unint64_t v12 = *(uint64_t **)(v9 + 16);
        uint64_t v13 = *v12;
        unsigned int v14 = *(_DWORD *)(v9 + 8);
        uint64_t result = sub_1CC13A6B8(v12 + 1, (uint64_t)&v12[*(unsigned int *)(v9 + 12)]);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
        {
          unint64_t v30 = result;
          int v28 = __cxa_guard_acquire(&qword_1EBCBE588);
          uint64_t result = v30;
          if (v28)
          {
            unint64_t v29 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v29 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v29;
            __cxa_guard_release(&qword_1EBCBE588);
            uint64_t result = v30;
          }
        }
        *(void *)int v31 = v13;
        *(void *)&v31[8] = result;
        v31[16] = v14 > 0xFF;
        uint64_t v15 = __ROR8__(0xB492B66FBE98F273 * v13 - result, 43)
            - 0x3C5A37A36834CED9 * *(void *)&v31[1]
            + __ROR8__((0x9AE16A3B2F90404FLL * *(void *)&v31[9]) ^ qword_1EBCBE580, 30);
        unint64_t v16 = 0xB492B66FBE98F273 * v13
            + __ROR8__(result ^ 0xC949D7C7509E6557, 20)
            + qword_1EBCBE580
            - 0x9AE16A3B2F90404FLL * *(void *)&v31[9]
            + 17;
        unint64_t v17 = 0x9DDFEA08EB382D69
            * (v16 ^ ((0x9DDFEA08EB382D69 * (v15 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v15 ^ v16)));
        int v18 = -348639895 * ((v17 >> 47) ^ v17);
        int v19 = v11 - 1;
        uint64_t v20 = *v4;
        unsigned int v21 = v18 & (v11 - 1);
        int v22 = (void *)(v10 + 8 * v21);
        uint64_t v23 = *v22;
        if (*v4 != *v22)
        {
          BOOL v24 = 0;
          int v25 = 1;
          while (v23 != -4096)
          {
            if (v24) {
              BOOL v26 = 0;
            }
            else {
              BOOL v26 = v23 == -8192;
            }
            if (v26) {
              BOOL v24 = v22;
            }
            unsigned int v27 = v21 + v25++;
            unsigned int v21 = v27 & v19;
            int v22 = (void *)(v10 + 8 * (v27 & v19));
            uint64_t v23 = *v22;
            if (v20 == *v22) {
              goto LABEL_19;
            }
          }
          if (v24) {
            int v22 = v24;
          }
        }
LABEL_19:
        *int v22 = v20;
        ++*(_DWORD *)(v5 + 8);
      }
      ++v4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1CC623740@<X0>(unint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v12 = 0;
  uint64_t result = sub_1CC6237D0((uint64_t *)a1, a3, &v12);
  uint64_t v9 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CC623A44(a1, (uint64_t)a2, a3, v12);
    uint64_t v9 = (uint64_t *)result;
    *(void *)uint64_t result = *a2;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v11;
  *(unsigned char *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1CC6237D0(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unint64_t v16 = sub_1CC13A6B8(*(void **)a2, *(void *)a2 + 8 * *(void *)(a2 + 8));
    int v7 = v4 - 1;
    unsigned int v8 = (v4 - 1) & sub_1CC623948(&v16, (unsigned char *)(a2 + 16));
    uint64_t v9 = (uint64_t *)(v6 + 8 * v8);
    if (sub_1CC6238D8(a2, *v9))
    {
      uint64_t result = 1;
    }
    else
    {
      char v10 = 0;
      int v11 = 1;
      while (*v9 != -4096)
      {
        if (v10) {
          BOOL v13 = 0;
        }
        else {
          BOOL v13 = *v9 == -8192;
        }
        if (v13) {
          char v10 = v9;
        }
        int v14 = v11 + 1;
        unsigned int v8 = (v8 + v11) & v7;
        uint64_t v9 = (uint64_t *)(v6 + 8 * v8);
        BOOL v15 = sub_1CC6238D8(a2, *v9);
        uint64_t result = 1;
        int v11 = v14;
        if (v15) {
          goto LABEL_7;
        }
      }
      uint64_t result = 0;
      if (v10) {
        uint64_t v9 = v10;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
  }
LABEL_7:
  *a3 = v9;
  return result;
}

BOOL sub_1CC6238D8(uint64_t a1, uint64_t a2)
{
  if ((a2 | 0x1000) == 0xFFFFFFFFFFFFF000) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 16) == ((*(_DWORD *)(a2 + 8) >> 9) & 1))
  {
    uint64_t v3 = *(unsigned int *)(a2 + 12);
    if (*(void *)(a1 + 8) == v3) {
      return memcmp(*(const void **)a1, *(const void **)(a2 + 16), 8 * v3) == 0;
    }
  }
  return 0;
}

unint64_t sub_1CC623948(void *a1, unsigned char *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  int v2 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v7 = a2;
    unsigned int v8 = a1;
    int v4 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v2 = &unk_1EBCBE000;
    int v5 = v4;
    a2 = v7;
    a1 = v8;
    if (v5)
    {
      unint64_t v6 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v6 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v6;
      __cxa_guard_release(&qword_1EBCBE588);
      int v2 = (void *)&unk_1EBCBE000;
      a2 = v7;
      a1 = v8;
    }
  }
  unint64_t v11 = v2[176];
  *(void *)&v9[0] = *a1;
  BYTE8(v9[0]) = *a2;
  return sub_1CBAE06B8(v9, 9uLL, v11);
}

uint64_t *sub_1CC623A44(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1CC623AF8(a1, v7);
    uint64_t v9 = 0;
    sub_1CC6237D0((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3) {
    goto LABEL_3;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC623AF8(unint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD5D9DE4(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void *sub_1CC623BC4(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n, uint64_t *a4)
{
  unsigned int v7 = *((_DWORD *)a1 + 2);
  if (!v7)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    int v28 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v28) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v28[16] = 2;
    *(void *)a1 = v28;
    unsigned int v7 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  unint64_t v29 = a4;
  int v8 = 0;
  if (__n)
  {
    size_t v9 = __n;
    uint64_t v10 = a2;
    do
    {
      int v11 = *v10++;
      int v8 = 33 * v8 + v11;
      --v9;
    }
    while (v9);
  }
  uint64_t v12 = *(void *)a1;
  unsigned int v13 = v7 - 1;
  uint64_t v14 = *(void *)a1 + 8 * v7 + 8;
  int v15 = -1;
  int v16 = 1;
  int v17 = v8;
  while (1)
  {
    uint64_t v18 = v17 & v13;
    int v19 = *(void **)(v12 + 8 * v18);
    if (!v19) {
      break;
    }
    if (v19 == (void *)-8)
    {
      if (v15 == -1) {
        int v15 = v17 & v13;
      }
    }
    else if (*(_DWORD *)(v14 + 4 * v18) == v8 {
           && __n == *v19
    }
           && (!__n || !memcmp(a2, (char *)v19 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_17;
    }
    int v17 = v16 + v18;
    ++v16;
  }
  uint64_t v20 = v15;
  if (v15 == -1)
  {
    uint64_t v20 = v18;
    uint64_t v18 = v18;
  }
  else
  {
    uint64_t v18 = v15;
  }
  *(_DWORD *)(v14 + 4 * v20) = v8;
  int v19 = *(void **)(v12 + 8 * v18);
LABEL_17:
  int i = (void *)(v12 + 8 * v18);
  if (v19)
  {
    if (v19 != (void *)-8) {
      return i;
    }
    --*((_DWORD *)a1 + 4);
  }
  int v22 = operator new(__n + 17, (std::align_val_t)8uLL);
  uint64_t v23 = v22;
  BOOL v24 = (char *)(v22 + 2);
  if (__n) {
    memcpy(v22 + 2, a2, __n);
  }
  v24[__n] = 0;
  uint64_t v25 = *v29;
  *uint64_t v23 = __n;
  v23[1] = v25;
  void *i = v23;
  ++*((_DWORD *)a1 + 3);
  for (int i = (void *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v18));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1CC623DD8(uint64_t result, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = (37 * a4)
       + ~((unint64_t)(37 * a4) << 32)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v10 = (void *)(result + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != a3 || v12 != a4)
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v14) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = v12 == -2;
        }
        if (v16 && v11 == -8192) {
          uint64_t v14 = v10;
        }
        unsigned int v18 = v9 + v15++;
        unsigned int v9 = v18 & v8;
        uint64_t v10 = (void *)(result + 24 * (v18 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_11;
        }
      }
      if (v14) {
        uint64_t v10 = v14;
      }
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_11:
  *a5 = v10;
  return result;
}

_OWORD *sub_1CC623EB0(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC623F8C(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFB1B710;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC623F8C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_OWORD **)result;
    uint64_t v8 = 24 * v6;
    do
    {
      *int v7 = xmmword_1CFB1B710;
      int v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if ((*a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      int v15 = 0;
      uint64_t result = sub_1CC623DD8(*(void *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v15);
      unsigned int v13 = v15;
      uint64_t v14 = a2[1];
      *int v15 = *a2;
      v13[1] = v14;
      v13[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

void *sub_1CC624050(uint64_t *a1, void *a2)
{
  int v7 = 0;
  char v4 = sub_1CC6240BC(a1, (uint64_t)a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = (void *)sub_1CC6241D8((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, (uint64_t)v7);
    *uint64_t v5 = *a2;
    v5[1] = a2[1];
    void v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1CC6240BC(uint64_t *a1, uint64_t a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (!v3)
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    goto LABEL_10;
  }
  char v4 = 0;
  uint64_t v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  int v7 = *(_DWORD *)(a2 + 12);
  unint64_t v8 = ((37 * v6 - (v7 == 1)) | ((unint64_t)((*(void *)a2 >> 4) ^ (*(void *)a2 >> 9)) << 32))
     + ~((unint64_t)(37 * v6 - (v7 == 1)) << 32);
  unint64_t v9 = (v8 ^ (v8 >> 22)) + ~((v8 ^ (v8 >> 22)) << 13);
  unint64_t v10 = (9 * (v9 ^ (v9 >> 8))) ^ ((9 * (v9 ^ (v9 >> 8))) >> 15);
  int v11 = v3 - 1;
  unsigned int v12 = v11 & (((v10 + ~(v10 << 27)) >> 31) ^ (v10 + ~(v10 << 27)));
  for (int i = 1; ; ++i)
  {
    uint64_t v14 = (uint64_t *)(v5 + 24 * v12);
    uint64_t v15 = *v14;
    if (*(void *)a2 == *v14 && v6 == *((_DWORD *)v14 + 2) && v7 == *((_DWORD *)v14 + 3))
    {
      uint64_t result = 1;
      goto LABEL_10;
    }
    if (v15 == -4096) {
      break;
    }
    if (v15 != -8192) {
      goto LABEL_13;
    }
    BOOL v18 = *((_DWORD *)v14 + 2) == -2 && *((_DWORD *)v14 + 3) == 0;
LABEL_14:
    if (v18 && v4 == 0) {
      char v4 = (uint64_t *)(v5 + 24 * v12);
    }
    unsigned int v19 = v12 + i;
    unsigned int v12 = v19 & v11;
  }
  if (*((_DWORD *)v14 + 2) != -1 || *((_DWORD *)v14 + 3) != 1)
  {
LABEL_13:
    BOOL v18 = 0;
    goto LABEL_14;
  }
  uint64_t result = 0;
  if (v4) {
    uint64_t v14 = v4;
  }
LABEL_10:
  *a3 = v14;
  return result;
}

uint64_t sub_1CC6241D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC6243B4(a1, 2 * v7);
    int v9 = *(_DWORD *)(a1 + 16);
    if (!v9)
    {
      a4 = 0;
      goto LABEL_4;
    }
    uint64_t v10 = 0;
    int v11 = *(_DWORD *)(a3 + 8);
    int v12 = *(_DWORD *)(a3 + 12);
    unint64_t v13 = ((37 * v11 - (v12 == 1)) | ((unint64_t)((*(void *)a3 >> 4) ^ (*(void *)a3 >> 9)) << 32))
        + ~((unint64_t)(37 * v11 - (v12 == 1)) << 32);
    unint64_t v14 = (v13 ^ (v13 >> 22)) + ~((v13 ^ (v13 >> 22)) << 13);
    unint64_t v15 = (9 * (v14 ^ (v14 >> 8))) ^ ((9 * (v14 ^ (v14 >> 8))) >> 15);
    int v16 = v9 - 1;
    unsigned int v17 = v16 & (((v15 + ~(v15 << 27)) >> 31) ^ (v15 + ~(v15 << 27)));
    for (int i = 1; ; ++i)
    {
      a4 = *(void *)a1 + 24 * v17;
      uint64_t v19 = *(void *)a4;
      if (*(void *)a3 == *(void *)a4 && v11 == *(_DWORD *)(a4 + 8) && v12 == *(_DWORD *)(a4 + 12)) {
        goto LABEL_4;
      }
      if (v19 == -4096) {
        break;
      }
      if (v19 != -8192) {
        goto LABEL_17;
      }
      BOOL v21 = *(_DWORD *)(a4 + 8) == -2 && *(_DWORD *)(a4 + 12) == 0;
LABEL_18:
      if (v21 && v10 == 0) {
        uint64_t v10 = *(void *)a1 + 24 * v17;
      }
      unsigned int v22 = v17 + i;
      unsigned int v17 = v22 & v16;
    }
    if (*(_DWORD *)(a4 + 8) == -1 && *(_DWORD *)(a4 + 12) == 1)
    {
      if (v10) {
        a4 = v10;
      }
      goto LABEL_4;
    }
LABEL_17:
    BOOL v21 = 0;
    goto LABEL_18;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC6243B4(a1, v7);
    uint64_t v25 = 0;
    sub_1CC6240BC((uint64_t *)a1, a3, &v25);
    a4 = v25;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1 || *(_DWORD *)(a4 + 12) != 1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *sub_1CC6243B4(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  char v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC624490(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFB1B720;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC624490(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    char v4 = *(_OWORD **)result;
    uint64_t v5 = 24 * v3;
    do
    {
      *char v4 = xmmword_1CFB1B720;
      char v4 = (_OWORD *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    uint64_t v6 = *a2;
    if (*a2 == -4096)
    {
      int v7 = *((_DWORD *)a2 + 2);
      int v8 = *((_DWORD *)a2 + 3);
      if (v7 != -1 || v8 != 1) {
        goto LABEL_8;
      }
    }
    else
    {
      if (v6 != -8192)
      {
        int v7 = *((_DWORD *)a2 + 2);
        int v8 = *((_DWORD *)a2 + 3);
LABEL_8:
        uint64_t v9 = 0;
        unint64_t v10 = ((37 * v7 - (v8 == 1)) | ((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32))
            + ~((unint64_t)(37 * v7 - (v8 == 1)) << 32);
        unint64_t v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
        unint64_t v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
        int v13 = *(_DWORD *)(result + 16) - 1;
        unsigned int v14 = v13 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27)));
        int v15 = 1;
LABEL_9:
        uint64_t v16 = *(void *)result + 24 * v14;
        uint64_t v17 = *(void *)v16;
        if (v6 == *(void *)v16 && v7 == *(_DWORD *)(v16 + 8) && v8 == *(_DWORD *)(v16 + 12))
        {
LABEL_15:
          *(void *)uint64_t v16 = v6;
          *(void *)(v16 + 8) = a2[1];
          *(void *)(v16 + 16) = a2[2];
          ++*(_DWORD *)(result + 8);
          continue;
        }
        if (v17 == -4096)
        {
          if (*(_DWORD *)(v16 + 8) == -1 && *(_DWORD *)(v16 + 12) == 1)
          {
            if (v9) {
              uint64_t v16 = v9;
            }
            goto LABEL_15;
          }
LABEL_25:
          BOOL v20 = 0;
        }
        else
        {
          if (v17 != -8192) {
            goto LABEL_25;
          }
          BOOL v20 = *(_DWORD *)(v16 + 8) == -2 && *(_DWORD *)(v16 + 12) == 0;
        }
        if (v20 && v9 == 0) {
          uint64_t v9 = *(void *)result + 24 * v14;
        }
        unsigned int v21 = v14 + v15++;
        unsigned int v14 = v21 & v13;
        goto LABEL_9;
      }
      int v7 = *((_DWORD *)a2 + 2);
      int v8 = *((_DWORD *)a2 + 3);
      if (v7 != -2 || v8 != 0) {
        goto LABEL_8;
      }
    }
  }
  return result;
}

void *sub_1CC62462C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CC0A1AEC(a1, v7);
      uint64_t v17 = 0;
      sub_1CB915048((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CC0A1AEC(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    int v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        int v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CC624760(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC6247D0(a1, a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CC6248D4((uint64_t)a1, a2, a2, v7);
    *(void *)uint64_t v5 = *(void *)a2;
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a2 + 8);
    *(void *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_1CC6247D0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = *(_DWORD *)(a2 + 8);
    unint64_t v6 = ~((unint64_t)(37 * v5) << 32)
       + (37 * v5)
       + ((unint64_t)((*(void *)a2 >> 4) ^ (*(void *)a2 >> 9)) << 32);
    unint64_t v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
    unint64_t v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
    int v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~(v8 << 27));
    int v10 = v3 - 1;
    unsigned int v11 = (v3 - 1) & v9;
    uint64_t v12 = *a1 + 24 * v11;
    uint64_t v13 = *(void *)v12;
    int v14 = *(_DWORD *)(v12 + 8);
    if (*(void *)a2 == *(void *)v12 && v5 == v14)
    {
      uint64_t result = 1;
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      uint64_t result = 1;
      while (v13 != -4096 || v14 != -1)
      {
        if (v16) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v14 == -2;
        }
        if (v19 && v13 == -8192) {
          uint64_t v16 = v12;
        }
        unsigned int v21 = v11 + v17++;
        unsigned int v11 = v21 & v10;
        uint64_t v12 = v4 + 24 * (v21 & v10);
        uint64_t v13 = *(void *)v12;
        int v14 = *(_DWORD *)(v12 + 8);
        if (*(void *)a2 == *(void *)v12 && v5 == v14) {
          goto LABEL_8;
        }
      }
      uint64_t result = 0;
      if (v16) {
        uint64_t v12 = v16;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_8:
  *a3 = v12;
  return result;
}

uint64_t sub_1CC6248D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC624A84(a1, 2 * v7);
    int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      int v11 = *(_DWORD *)(a3 + 8);
      unint64_t v12 = ~((unint64_t)(37 * v11) << 32)
          + (37 * v11)
          + ((unint64_t)((*(void *)a3 >> 4) ^ (*(void *)a3 >> 9)) << 32);
      unint64_t v13 = (v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13);
      unint64_t v14 = (9 * (v13 ^ (v13 >> 8))) ^ ((9 * (v13 ^ (v13 >> 8))) >> 15);
      int v15 = v10 - 1;
      unsigned int v16 = v15 & (((v14 + ~(v14 << 27)) >> 31) ^ (v14 + ~(v14 << 27)));
      a4 = *(void *)a1 + 24 * v16;
      uint64_t v17 = *(void *)a4;
      int v18 = *(_DWORD *)(a4 + 8);
      if (*(void *)a3 != *(void *)a4 || v11 != v18)
      {
        uint64_t v20 = 0;
        int v21 = 1;
        while (v17 != -4096 || v18 != -1)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v18 == -2;
          }
          if (v22 && v17 == -8192) {
            uint64_t v20 = a4;
          }
          unsigned int v24 = v16 + v21++;
          unsigned int v16 = v24 & v15;
          a4 = *(void *)a1 + 24 * v16;
          uint64_t v17 = *(void *)a4;
          int v18 = *(_DWORD *)(a4 + 8);
          if (*(void *)a3 == *(void *)a4 && v11 == v18) {
            goto LABEL_4;
          }
        }
        if (v20) {
          a4 = v20;
        }
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC624A84(a1, v7);
    uint64_t v26 = 0;
    sub_1CC6247D0((uint64_t *)a1, a3, &v26);
    a4 = v26;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a4 != -4096 || *(_DWORD *)(a4 + 8) != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_OWORD *sub_1CC624A84(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC624B60(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = xmmword_1CFAC30E0;
      uint64_t result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC624B60(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  *(void *)(result + 8) = 0;
  uint64_t v3 = *(unsigned int *)(result + 16);
  if (v3)
  {
    uint64_t v4 = *(_OWORD **)result;
    uint64_t v5 = 24 * v3;
    do
    {
      *uint64_t v4 = xmmword_1CFAC30E0;
      uint64_t v4 = (_OWORD *)((char *)v4 + 24);
      v5 -= 24;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 3)
  {
    uint64_t v6 = *a2;
    int v7 = *((_DWORD *)a2 + 2);
    if ((*a2 != -4096 || v7 != -1) && (v6 != -8192 || v7 != -2))
    {
      unint64_t v10 = ~((unint64_t)(37 * v7) << 32)
          + (37 * v7)
          + ((unint64_t)((v6 >> 4) ^ (v6 >> 9)) << 32);
      unint64_t v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
      unint64_t v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
      int v13 = ((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27));
      int v14 = *(_DWORD *)(result + 16) - 1;
      unsigned int v15 = v14 & v13;
      uint64_t v16 = *(void *)result + 24 * v15;
      uint64_t v17 = *(void *)v16;
      int v18 = *(_DWORD *)(v16 + 8);
      if (v6 != *(void *)v16 || v7 != v18)
      {
        uint64_t v20 = 0;
        int v21 = 1;
        while (v17 != -4096 || v18 != -1)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v18 == -2;
          }
          if (v22 && v17 == -8192) {
            uint64_t v20 = v16;
          }
          unsigned int v24 = v15 + v21++;
          unsigned int v15 = v24 & v14;
          uint64_t v16 = *(void *)result + 24 * (v24 & v14);
          uint64_t v17 = *(void *)v16;
          int v18 = *(_DWORD *)(v16 + 8);
          if (v6 == *(void *)v16 && v7 == v18) {
            goto LABEL_18;
          }
        }
        if (v20) {
          uint64_t v16 = v20;
        }
      }
LABEL_18:
      *(void *)uint64_t v16 = v6;
      *(_DWORD *)(v16 + 8) = v7;
      *(void *)(v16 + 16) = a2[2];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t llvm::TypedPointerType::TypedPointerType(uint64_t this, llvm::Type *a2, int a3)
{
  *(void *)this = *(void *)a2;
  *(void *)(this + 24) = a2;
  *(void *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0x14;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

{
  *(void *)this = *(void *)a2;
  *(void *)(this + 24) = a2;
  *(void *)(this + 16) = this + 24;
  *(_DWORD *)(this + 8) = (a3 << 8) | 0x14;
  *(_DWORD *)(this + 12) = 1;
  return this;
}

BOOL llvm::TypedPointerType::isValidElementType(llvm::TypedPointerType *this, llvm::Type *a2)
{
  int v2 = *((_DWORD *)this + 2);
  return ((v2 - 7) >= 6u || ((0x27u >> (v2 - 7)) & 1) == 0)
      && *((_DWORD *)this + 2) != 11;
}

void llvm::TypeFinder::run(llvm::TypeFinder *this, const llvm::Module *a2, char a3)
{
  v52[8] = *MEMORY[0x1E4F143B8];
  *((unsigned char *)this + 120) = a3;
  uint64_t v5 = (char *)a2 + 8;
  for (uint64_t i = *((void *)a2 + 2); (char *)i != v5; uint64_t i = *(void *)(i + 8))
  {
    if (i) {
      uint64_t v7 = i - 56;
    }
    else {
      uint64_t v7 = 0;
    }
    llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v7 + 24));
    if (i && *(unsigned char *)(v7 + 16) == 3)
    {
      if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0) {
        goto LABEL_13;
      }
    }
    else if (*(unsigned char *)(v7 + 16) || *(void *)(v7 + 72) != v7 + 72 || (*(unsigned char *)(v7 + 34) & 0x80) != 0)
    {
LABEL_13:
      llvm::TypeFinder::incorporateValue(this, *(const llvm::Value **)(v7 - 32));
      continue;
    }
  }
  for (uint64_t j = (void *)*((void *)a2 + 6); j != (void *)((char *)a2 + 40); uint64_t j = (void *)j[1])
  {
    if (j) {
      int v9 = j - 6;
    }
    else {
      int v9 = 0;
    }
    llvm::TypeFinder::incorporateType(this, (llvm::Type *)v9[3]);
    unint64_t v10 = (const llvm::Value *)*(v9 - 4);
    if (v10) {
      llvm::TypeFinder::incorporateValue(this, v10);
    }
  }
  for (uint64_t k = (void *)*((void *)a2 + 8); k != (void *)((char *)a2 + 56); uint64_t k = (void *)k[1])
  {
    unint64_t v12 = k - 7;
    if (!k) {
      unint64_t v12 = 0;
    }
    llvm::TypeFinder::incorporateType(this, (llvm::Type *)v12[3]);
  }
  uint64_t v50 = v52;
  uint64_t v51 = 0x400000000;
  unint64_t v47 = a2;
  int v48 = (const llvm::Module *)((char *)a2 + 24);
  int v13 = (const llvm::Module *)*((void *)a2 + 4);
  if (v13 != (const llvm::Module *)((char *)a2 + 24))
  {
    do
    {
      if (v13) {
        int v14 = (char *)v13 - 56;
      }
      else {
        int v14 = 0;
      }
      llvm::TypeFinder::incorporateType(this, *((llvm::Type **)v14 + 3));
      llvm::TypeFinder::incorporateAttributes((uint64_t)this, *((void *)v14 + 14));
      int v15 = *((_DWORD *)v14 + 5);
      unint64_t v49 = v13;
      if ((v15 & 0x40000000) != 0)
      {
        uint64_t v17 = (const llvm::Value **)*((void *)v14 - 1);
        uint64_t v16 = v15 & 0x7FFFFFF;
        if (v16)
        {
LABEL_36:
          uint64_t v18 = 32 * v16;
          do
          {
            BOOL v19 = *v17;
            v17 += 4;
            llvm::TypeFinder::incorporateValue(this, v19);
            v18 -= 32;
          }
          while (v18);
        }
      }
      else
      {
        uint64_t v16 = v15 & 0x7FFFFFF;
        uint64_t v17 = (const llvm::Value **)&v14[-32 * v16];
        if (v16) {
          goto LABEL_36;
        }
      }
      uint64_t v20 = sub_1CB923B44((llvm::Function *)v14);
      if ((const llvm::Value *)v20 != v21)
      {
        BOOL v22 = (const llvm::Value *)v20;
        uint64_t v23 = v21;
        do
        {
          llvm::TypeFinder::incorporateValue(this, v22);
          BOOL v22 = (const llvm::Value *)((char *)v22 + 40);
        }
        while (v22 != v23);
      }
      unsigned int v24 = v14 + 72;
      uint64_t v25 = *((void *)v14 + 10);
      while (2)
      {
        if ((char *)v25 != v24)
        {
          uint64_t v26 = v25 - 24;
          if (!v25) {
            uint64_t v26 = 0;
          }
          uint64_t v27 = v26 + 40;
          uint64_t v28 = *(void *)(v26 + 48);
LABEL_46:
          if (v28 == v27)
          {
            uint64_t v25 = *(void *)(v25 + 8);
            continue;
          }
          if (v28) {
            uint64_t v29 = v28 - 24;
          }
          else {
            uint64_t v29 = 0;
          }
          llvm::TypeFinder::incorporateType(this, *(llvm::Type **)v29);
          int v30 = *(_DWORD *)(v29 + 20);
          if ((v30 & 0x40000000) != 0)
          {
            uint64_t v32 = *(unsigned __int8 ***)(v29 - 8);
            uint64_t v31 = v30 & 0x7FFFFFF;
            if (!v31) {
              goto LABEL_59;
            }
          }
          else
          {
            uint64_t v31 = v30 & 0x7FFFFFF;
            uint64_t v32 = (unsigned __int8 **)(v29 - 32 * v31);
            if (!v31)
            {
LABEL_59:
              int v35 = *(unsigned __int8 *)(v29 + 16);
              if (v28 && v35 == 62)
              {
                llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v29 + 64));
                int v35 = *(unsigned __int8 *)(v29 + 16);
              }
              if (v28 && v35 == 59)
              {
                llvm::TypeFinder::incorporateType(this, *(llvm::Type **)(v29 + 64));
                int v35 = *(unsigned __int8 *)(v29 + 16);
              }
              unsigned int v36 = v35 - 33;
              BOOL v37 = v36 > 0x33;
              uint64_t v38 = (1 << v36) & 0x8000000000041;
              if (!v37 && v38 != 0) {
                llvm::TypeFinder::incorporateAttributes((uint64_t)this, *(void *)(v28 + 40));
              }
              llvm::Value::getAllMetadata((unsigned char *)v29, (uint64_t)&v50);
              if (v51)
              {
                uint64_t v40 = 16 * v51;
                unsigned int v41 = (const llvm::MDNode **)((char *)v50 + 8);
                do
                {
                  uint64_t v42 = *v41;
                  v41 += 2;
                  llvm::TypeFinder::incorporateMDNode(this, v42);
                  v40 -= 16;
                }
                while (v40);
              }
              LODWORD(v51) = 0;
              uint64_t v28 = *(void *)(v28 + 8);
              goto LABEL_46;
            }
          }
          uint64_t v33 = 32 * v31;
          do
          {
            BOOL v34 = *v32;
            if (*v32 && v34[16] <= 0x1Bu) {
              llvm::TypeFinder::incorporateValue(this, (const llvm::Value *)v34);
            }
            v32 += 4;
            v33 -= 32;
          }
          while (v33);
          goto LABEL_59;
        }
        break;
      }
      int v13 = (const llvm::Module *)*((void *)v49 + 1);
    }
    while (v13 != v48);
  }
  for (uint64_t m = (void *)*((void *)v47 + 10); m != (void *)((char *)v47 + 72); uint64_t m = (void *)m[1])
  {
    uint64_t v44 = *(unsigned int *)(m[6] + 8);
    if (v44)
    {
      uint64_t v45 = 0;
      uint64_t v46 = 8 * v44;
      do
      {
        llvm::TypeFinder::incorporateMDNode(this, *(const llvm::MDNode **)(*(void *)m[6] + v45));
        v45 += 8;
      }
      while (v46 != v45);
    }
  }
  if (v50 != v52) {
    free(v50);
  }
}

void llvm::TypeFinder::incorporateType(llvm::TypeFinder *this, llvm::Type *a2)
{
  v51[4] = *MEMORY[0x1E4F143B8];
  unint64_t v47 = a2;
  uint64_t v5 = (char *)this + 72;
  uint64_t v4 = *((void *)this + 9);
  int v6 = *((_DWORD *)this + 22);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    int v9 = (llvm::Type **)(v4 + 8 * v8);
    unint64_t v10 = *v9;
    if (*v9 == a2) {
      return;
    }
    unint64_t v11 = 0;
    int v12 = 1;
    while (v10 != (llvm::Type *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (llvm::Type *)-8192;
      }
      if (v13) {
        unint64_t v11 = (uint64_t *)v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      int v9 = (llvm::Type **)(v4 + 8 * v8);
      unint64_t v10 = *v9;
      if (*v9 == a2) {
        return;
      }
    }
    if (v11) {
      int v15 = v11;
    }
    else {
      int v15 = (uint64_t *)v9;
    }
  }
  else
  {
    int v15 = 0;
  }
  *sub_1CC625AB4((uint64_t)this + 72, (uint64_t *)&v47, v15) = (uint64_t)a2;
  int v48 = v51;
  unsigned int v50 = 4;
  v51[0] = a2;
  unsigned int v16 = 1;
  do
  {
    uint64_t v17 = *((void *)v48 + v16 - 1);
    unsigned int v49 = v16 - 1;
    unint64_t v47 = (llvm::Type *)v17;
    if (v17) {
      BOOL v18 = *(unsigned char *)(v17 + 8) == 16;
    }
    else {
      BOOL v18 = 0;
    }
    if (v18 && (!*((unsigned char *)this + 120) || *(void *)(v17 + 24)))
    {
      uint64_t v20 = (uint64_t *)*((void *)this + 13);
      unint64_t v19 = *((void *)this + 14);
      if ((unint64_t)v20 >= v19)
      {
        BOOL v22 = (void *)*((void *)this + 12);
        uint64_t v23 = v20 - v22;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61) {
          abort();
        }
        uint64_t v25 = v19 - (void)v22;
        if (v25 >> 2 > v24) {
          unint64_t v24 = v25 >> 2;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          if (v26 >> 61) {
            sub_1CB833614();
          }
          uint64_t v27 = (char *)operator new(8 * v26);
        }
        else
        {
          uint64_t v27 = 0;
        }
        uint64_t v28 = (uint64_t *)&v27[8 * v23];
        *uint64_t v28 = v17;
        int v21 = v28 + 1;
        if (v20 != v22)
        {
          do
          {
            uint64_t v29 = *--v20;
            *--uint64_t v28 = v29;
          }
          while (v20 != v22);
          uint64_t v20 = (uint64_t *)*((void *)this + 12);
        }
        *((void *)this + 12) = v28;
        *((void *)this + 13) = v21;
        *((void *)this + 14) = &v27[8 * v26];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *uint64_t v20 = v17;
        int v21 = v20 + 1;
      }
      *((void *)this + 13) = v21;
      uint64_t v17 = (uint64_t)v47;
    }
    uint64_t v30 = *(unsigned int *)(v17 + 12);
    if (v30)
    {
      uint64_t v31 = *(void *)(v17 + 16);
      uint64_t v32 = v31 + 8 * v30;
      while (1)
      {
        uint64_t v34 = *(void *)(v32 - 8);
        v32 -= 8;
        uint64_t v33 = v34;
        uint64_t v46 = v34;
        int v35 = *((_DWORD *)this + 22);
        if (!v35) {
          break;
        }
        uint64_t v36 = *((void *)this + 9);
        int v37 = v35 - 1;
        unsigned int v38 = ((v33 >> 4) ^ (v33 >> 9)) & v37;
        unsigned int v39 = (uint64_t *)(v36 + 8 * v38);
        uint64_t v40 = *v39;
        if (v33 != *v39)
        {
          unsigned int v41 = 0;
          int v42 = 1;
          while (v40 != -4096)
          {
            if (v41) {
              BOOL v43 = 0;
            }
            else {
              BOOL v43 = v40 == -8192;
            }
            if (v43) {
              unsigned int v41 = v39;
            }
            unsigned int v44 = v38 + v42++;
            unsigned int v38 = v44 & v37;
            unsigned int v39 = (uint64_t *)(v36 + 8 * v38);
            uint64_t v40 = *v39;
            if (v33 == *v39) {
              goto LABEL_59;
            }
          }
          if (v41) {
            uint64_t v45 = v41;
          }
          else {
            uint64_t v45 = v39;
          }
          goto LABEL_57;
        }
LABEL_59:
        if (v32 == v31) {
          goto LABEL_63;
        }
      }
      uint64_t v45 = 0;
LABEL_57:
      *sub_1CC625AB4((uint64_t)v5, &v46, v45) = v33;
      if (v49 >= (unint64_t)v50) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v48 + v49++) = v33;
      goto LABEL_59;
    }
LABEL_63:
    unsigned int v16 = v49;
  }
  while (v49);
  if (v48 != v51) {
    free(v48);
  }
}

void llvm::TypeFinder::incorporateValue(llvm::TypeFinder *this, const llvm::Value *a2)
{
  int v3 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v3 == 23)
  {
    while (1)
    {
      uint64_t v4 = (const llvm::MDNode *)*((void *)a2 + 3);
      int v5 = *(unsigned __int8 *)v4;
      if ((v5 - 4) <= 0x1E) {
        break;
      }
      if ((v5 - 3) < 0xFFFFFFFE) {
        return;
      }
      a2 = (const llvm::Value *)*((void *)v4 + 16);
      int v3 = *((unsigned __int8 *)a2 + 16);
      if (a2) {
        BOOL v6 = v3 == 23;
      }
      else {
        BOOL v6 = 0;
      }
      if (!v6) {
        goto LABEL_9;
      }
    }
    llvm::TypeFinder::incorporateMDNode(this, v4);
  }
  else
  {
LABEL_9:
    uint64_t v25 = a2;
    if ((v3 - 21) < 0xFFFFFFEF) {
      return;
    }
    int v7 = *((_DWORD *)this + 4);
    if (v7)
    {
      int v8 = v7 - 1;
      unsigned int v9 = v8 & ((a2 >> 4) ^ (a2 >> 9));
      unint64_t v10 = (const llvm::Value **)(*(void *)this + 8 * v9);
      unint64_t v11 = *v10;
      if (a2 == *v10) {
        return;
      }
      int v12 = 0;
      int v13 = 1;
      while (v11 != (const llvm::Value *)-4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == (const llvm::Value *)-8192;
        }
        if (v14) {
          int v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        unint64_t v10 = (const llvm::Value **)(*(void *)this + 8 * v9);
        unint64_t v11 = *v10;
        if (a2 == *v10) {
          return;
        }
      }
      if (v12) {
        unsigned int v16 = v12;
      }
      else {
        unsigned int v16 = v10;
      }
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = sub_1CBFE4230((uint64_t)this, (uint64_t)&v25, (uint64_t *)&v25, v16);
    *uint64_t v17 = v25;
    llvm::TypeFinder::incorporateType(this, *(llvm::Type **)v25);
    BOOL v18 = v25;
    unsigned int v19 = *((unsigned __int8 *)v25 + 16);
    if (v19 <= 0x1B)
    {
      if (v19 == 5 && *((_WORD *)v25 + 9) == 34)
      {
        llvm::TypeFinder::incorporateType(this, *((llvm::Type **)v25 + 3));
        BOOL v18 = v25;
      }
      int v20 = *((_DWORD *)v18 + 5);
      if ((v20 & 0x40000000) != 0)
      {
        BOOL v22 = (const llvm::Value **)*((void *)v18 - 1);
        uint64_t v21 = v20 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v21 = v20 & 0x7FFFFFF;
        BOOL v22 = (const llvm::Value **)((char *)v18 - 32 * v21);
      }
      if (v21)
      {
        uint64_t v23 = 32 * v21;
        do
        {
          unint64_t v24 = *v22;
          v22 += 4;
          llvm::TypeFinder::incorporateValue(this, v24);
          v23 -= 32;
        }
        while (v23);
      }
    }
  }
}

void llvm::TypeFinder::incorporateAttributes(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v5 = a1 + 48;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v17 = 0;
  if (sub_1CC625D74(v4, *(_DWORD *)(v5 + 16), a2, &v17)) {
    return;
  }
  unsigned int v6 = *(_DWORD *)(v5 + 16);
  int v7 = *(_DWORD *)(a1 + 56);
  if (4 * v7 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_26;
  }
  if (v6 + ~v7 - *(_DWORD *)(a1 + 60) <= v6 >> 3)
  {
LABEL_26:
    sub_1CC625E08(v5, v6);
    uint64_t v17 = 0;
    sub_1CC625D74(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), v2, &v17);
  }
  int v8 = v17;
  ++*(_DWORD *)(a1 + 56);
  if (*v8 != -4) {
    --*(_DWORD *)(a1 + 60);
  }
  uint64_t *v8 = v2;
  if (v2) {
    unsigned int v9 = (void *)(v2 + 40);
  }
  else {
    unsigned int v9 = 0;
  }
  if (v2) {
    v2 += 40 + 8 * *(unsigned int *)(v2 + 8);
  }
  while (v9 != (void *)v2)
  {
    uint64_t v10 = *v9;
    if (*v9) {
      unint64_t v11 = (void *)(*v9 + 48);
    }
    else {
      unint64_t v11 = 0;
    }
    if (v10) {
      uint64_t v12 = *v9 + 48 + 8 * *(unsigned int *)(v10 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
    while (v11 != (void *)v12)
    {
      uint64_t v13 = *v11;
      uint64_t v17 = (uint64_t *)v13;
      if (v13)
      {
        if (*(unsigned char *)(v13 + 8) == 3)
        {
          uint64_t v15 = v12;
          unsigned int v16 = v11;
          ValueAsType = (llvm::Type *)llvm::Attribute::getValueAsType((llvm::Attribute *)&v17);
          llvm::TypeFinder::incorporateType((llvm::TypeFinder *)a1, ValueAsType);
          uint64_t v12 = v15;
          unint64_t v11 = v16;
        }
      }
      ++v11;
    }
    ++v9;
  }
}

void *llvm::TypeFinder::incorporateMDNode(llvm::TypeFinder *this, const llvm::MDNode *a2)
{
  uint64_t v25 = a2;
  uint64_t v5 = *((void *)this + 3);
  uint64_t result = (void *)((char *)this + 24);
  uint64_t v4 = v5;
  int v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
    unsigned int v9 = (const llvm::MDNode **)(v4 + 8 * v8);
    uint64_t v10 = *v9;
    if (*v9 == a2) {
      return result;
    }
    unint64_t v11 = 0;
    int v12 = 1;
    while (v10 != (const llvm::MDNode *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (const llvm::MDNode *)-8192;
      }
      if (v13) {
        unint64_t v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      unsigned int v9 = (const llvm::MDNode **)(v4 + 8 * v8);
      uint64_t v10 = *v9;
      if (*v9 == a2) {
        return result;
      }
    }
    if (v11) {
      uint64_t v15 = v11;
    }
    else {
      uint64_t v15 = v9;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t result = sub_1CC3D79E0((uint64_t)result, (uint64_t)&v25, (uint64_t *)&v25, v15);
  *uint64_t result = v25;
  unsigned int v16 = v25;
  if (*(unsigned char *)v25 == 32)
  {
    uint64_t v17 = *((unsigned int *)v25 + 8);
    if (v17)
    {
      BOOL v18 = (uint64_t *)*((void *)v25 + 3);
      uint64_t v19 = 8 * v17;
      do
      {
        uint64_t v20 = *v18++;
        uint64_t result = (void *)llvm::TypeFinder::incorporateValue(this, *(const llvm::Value **)(v20 + 128));
        v19 -= 8;
      }
      while (v19);
    }
  }
  else
  {
    uint64_t v21 = *((unsigned int *)v25 + 2);
    if (v21)
    {
      uint64_t v22 = -8 * v21;
      do
      {
        uint64_t v23 = *(const llvm::Value ***)((char *)v16 + v22);
        if (v23)
        {
          int v24 = *(unsigned __int8 *)v23;
          if ((v24 - 4) > 0x1E)
          {
            if (v24 == 1) {
              uint64_t result = (void *)llvm::TypeFinder::incorporateValue(this, v23[16]);
            }
          }
          else
          {
            uint64_t result = (void *)llvm::TypeFinder::incorporateMDNode(this, (const llvm::MDNode *)v23);
          }
        }
        v22 += 8;
      }
      while (v22);
    }
  }
  return result;
}

void *llvm::TypeFinder::clear(llvm::TypeFinder *this)
{
  uint64_t result = sub_1CD47558C(this);
  int v3 = (void *)((char *)this + 72);
  int v4 = *((_DWORD *)this + 20);
  if (v4)
  {
    unsigned int v5 = *((_DWORD *)this + 22);
    if (v5 > 4 * v4 && v5 >= 0x41)
    {
      int v6 = 1 << (33 - __clz(v4 - 1));
      if (v6 <= 64) {
        int v7 = 64;
      }
      else {
        int v7 = v6;
      }
LABEL_10:
      if (v7 == v5)
      {
        *((void *)this + 10) = 0;
        uint64_t v8 = 8 * v5;
        unsigned int v9 = (void *)*((void *)this + 9);
        do
        {
          *v9++ = -4096;
          v8 -= 8;
        }
        while (v8);
      }
      else
      {
        uint64_t result = (void *)MEMORY[0x1D25D9CD0](*v3, 8);
        if (v7)
        {
          unint64_t v12 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
          unint64_t v13 = v12 | (v12 >> 2) | ((v12 | (v12 >> 2)) >> 4);
          LODWORD(v13) = (((v13 | (v13 >> 8)) >> 16) | v13 | (v13 >> 8)) + 1;
          *((_DWORD *)this + 22) = v13;
          uint64_t result = operator new(8 * v13, (std::align_val_t)8uLL);
          *((void *)this + 9) = result;
          *((void *)this + 10) = 0;
          uint64_t v14 = *((unsigned int *)this + 22);
          if (v14)
          {
            uint64_t v15 = 8 * v14;
            do
            {
              *result++ = -4096;
              v15 -= 8;
            }
            while (v15);
          }
        }
        else
        {
          *int v3 = 0;
          *((void *)this + 10) = 0;
          *((_DWORD *)this + 22) = 0;
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 21)) {
      goto LABEL_18;
    }
    unsigned int v5 = *((_DWORD *)this + 22);
    if (v5 > 0x40)
    {
      int v7 = 0;
      goto LABEL_10;
    }
  }
  if (v5)
  {
    uint64_t v10 = (void *)*v3;
    uint64_t v11 = 8 * v5;
    do
    {
      *v10++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  *((void *)this + 10) = 0;
LABEL_18:
  *((void *)this + 13) = *((void *)this + 12);
  return result;
}

uint64_t sub_1CC625A34(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    int v6 = (void *)(result + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        int v6 = (void *)(result + 8 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        int v6 = v8;
      }
    }
  }
  else
  {
    int v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

uint64_t *sub_1CC625AB4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
    {
      sub_1CC625BEC(a1, v6);
      unsigned int v16 = 0;
      sub_1CC625A34(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v16);
      a3 = v16;
    }
LABEL_4:
    uint64_t v7 = *a3;
    goto LABEL_5;
  }
  sub_1CC625BEC(a1, 2 * v6);
  uint64_t v7 = *a2;
  int v9 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & v9;
  a3 = (uint64_t *)(*(void *)a1 + 8 * v10);
  uint64_t v11 = *a3;
  if (*a2 != *a3)
  {
    unint64_t v12 = 0;
    int v13 = 1;
    while (v11 != -4096)
    {
      if (v12) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v11 == -8192;
      }
      if (v14) {
        unint64_t v12 = a3;
      }
      unsigned int v15 = v10 + v13++;
      unsigned int v10 = v15 & v9;
      a3 = (uint64_t *)(*(void *)a1 + 8 * v10);
      uint64_t v11 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v12) {
      a3 = v12;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC625BEC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      do
      {
        *result++ = -4096;
        v13 -= 8;
      }
      while (v13);
    }
    if (v3)
    {
      int v14 = 0;
      int v15 = v12 - 1;
      unsigned int v16 = v4;
      do
      {
        uint64_t v17 = *v16;
        if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unsigned int v18 = ((v17 >> 4) ^ (v17 >> 9)) & v15;
          uint64_t v19 = (void *)(*(void *)a1 + 8 * v18);
          uint64_t v20 = *v19;
          if (v17 != *v19)
          {
            uint64_t v21 = 0;
            int v22 = 1;
            while (v20 != -4096)
            {
              if (v21) {
                BOOL v23 = 0;
              }
              else {
                BOOL v23 = v20 == -8192;
              }
              if (v23) {
                uint64_t v21 = v19;
              }
              unsigned int v24 = v18 + v22++;
              unsigned int v18 = v24 & v15;
              uint64_t v19 = (void *)(*(void *)a1 + 8 * (v24 & v15));
              uint64_t v20 = *v19;
              if (v17 == *v19) {
                goto LABEL_16;
              }
            }
            if (v21) {
              uint64_t v19 = v21;
            }
          }
LABEL_16:
          void *v19 = v17;
          *(_DWORD *)(a1 + 8) = ++v14;
        }
        ++v16;
      }
      while (v16 != &v4[v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC625D74(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (void *)(a1 + 8 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

void *sub_1CC625E08(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC625ED4(a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC625ED4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 8 * v6;
    do
    {
      *v7++ = -4;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *a2;
    if ((*a2 | 4) != 0xFFFFFFFFFFFFFFFCLL)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CC625D74(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v10);
      uint64_t *v10 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t *llvm::Use::swap(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  if (*result != *a2)
  {
    *uint64_t result = *a2;
    *a2 = v2;
    uint64_t v3 = result[1];
    result[1] = a2[1];
    a2[1] = v3;
    uint64_t v4 = result[2];
    result[2] = a2[2];
    a2[2] = v4;
    *(void *)result[2] = result;
    uint64_t v5 = result[1];
    if (v5) {
      *(void *)(v5 + 16) = result + 1;
    }
    *(void *)a2[2] = a2;
    uint64_t v6 = a2[1];
    if (v6) {
      *(void *)(v6 + 16) = a2 + 1;
    }
  }
  return result;
}

unint64_t llvm::Use::getOperandNo(llvm::Use *this)
{
  uint64_t v1 = *((void *)this + 3);
  int v2 = *(_DWORD *)(v1 + 20);
  if ((v2 & 0x40000000) != 0) {
    uint64_t v3 = *(void *)(v1 - 8);
  }
  else {
    uint64_t v3 = v1 - 32 * (v2 & 0x7FFFFFF);
  }
  return ((unint64_t)this - v3) >> 5;
}

void llvm::Use::zap(void *this, llvm::Use *a2, const llvm::Use *a3)
{
  if (a2 != this)
  {
    uint64_t v3 = a2;
    do
    {
      uint64_t v4 = *((void *)v3 - 4);
      uint64_t v3 = (llvm::Use *)((char *)v3 - 32);
      if (v4)
      {
        **((void **)a2 - 2) = *((void *)a2 - 3);
        uint64_t v5 = *((void *)a2 - 3);
        if (v5) {
          *(void *)(v5 + 16) = *((void *)a2 - 2);
        }
      }
      a2 = v3;
    }
    while (v3 != this);
  }
  if (a3) {
    operator delete(this);
  }
}

void llvm::User::replaceUsesOfWith(llvm::User *this, llvm::Value *a2, llvm::Value *a3)
{
  if (a2 != a3)
  {
    int v6 = *((_DWORD *)this + 5);
    uint64_t v7 = v6 & 0x7FFFFFF;
    if ((v6 & 0x7FFFFFF) != 0)
    {
      uint64_t v8 = 0;
      uint64_t v9 = (char **)((char *)a3 + 8);
      uint64_t v10 = 32 * v7;
      do
      {
        int v11 = *((_DWORD *)this + 5);
        if ((v11 & 0x40000000) != 0) {
          BOOL v12 = (char *)*((void *)this - 1);
        }
        else {
          BOOL v12 = (char *)this - 32 * (v11 & 0x7FFFFFF);
        }
        if (*(llvm::Value **)&v12[v8] == a2)
        {
          unsigned int v13 = &v12[v8];
          if (a2)
          {
            **((void **)v13 + 2) = *((void *)v13 + 1);
            uint64_t v14 = *((void *)v13 + 1);
            if (v14) {
              *(void *)(v14 + 16) = *((void *)v13 + 2);
            }
          }
          *(void *)unsigned int v13 = a3;
          if (a3)
          {
            int v15 = *v9;
            unsigned int v16 = &v12[v8];
            *((void *)v16 + 1) = *v9;
            if (v15) {
              *((void *)v15 + 2) = v16 + 8;
            }
            *((void *)v16 + 2) = v9;
            *uint64_t v9 = v13;
          }
        }
        v8 += 32;
      }
      while (v10 != v8);
    }
    if (sub_1CC5817B4((uint64_t)this))
    {
      llvm::DbgVariableIntrinsic::location_ops((uint64_t)this, v22);
      uint64_t v17 = v22[0];
      while (v17 != v22[1])
      {
        unsigned int v18 = (unint64_t *)(v17 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFF8;
        if ((v17 & 4) != 0) {
          unint64_t v19 = *v18;
        }
        if (*(llvm::Value **)(v19 + 128) == a2)
        {
          llvm::DbgVariableIntrinsic::replaceVariableLocationOp((uint64_t **)this, a2, a3);
          return;
        }
        uint64_t v20 = (unint64_t)(v18 + 1) | 4;
        uint64_t v21 = v18 + 17;
        if ((v17 & 4) != 0) {
          uint64_t v17 = v20;
        }
        else {
          uint64_t v17 = (uint64_t)v21;
        }
      }
    }
  }
}

void *llvm::User::allocHungoffUses(llvm::User *this, unsigned int a2, int a3)
{
  if (a3) {
    size_t v5 = 40 * a2;
  }
  else {
    size_t v5 = 32 * a2;
  }
  uint64_t result = operator new(v5);
  *((void *)this - 1) = result;
  if (a2)
  {
    uint64_t v7 = &result[4 * a2];
    do
    {
      *uint64_t result = 0;
      result[1] = 0;
      result[2] = 0;
      result[3] = this;
      result += 4;
    }
    while (result != v7);
  }
  return result;
}

void llvm::User::growHungoffUses(llvm::User *this, unsigned int a2, int a3)
{
  int v6 = *((_DWORD *)this + 5);
  uint64_t v7 = v6 & 0x7FFFFFF;
  if ((v6 & 0x40000000) != 0) {
    uint64_t v8 = (uint64_t *)*((void *)this - 1);
  }
  else {
    uint64_t v8 = (uint64_t *)((char *)this - 32 * v7);
  }
  if (a3) {
    size_t v9 = 40 * a2;
  }
  else {
    size_t v9 = 32 * a2;
  }
  uint64_t v10 = operator new(v9);
  *((void *)this - 1) = v10;
  if (a2)
  {
    int v11 = v10;
    do
    {
      *int v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      void v11[3] = this;
      v11 += 4;
    }
    while (v11 != &v10[4 * a2]);
  }
  int v12 = *((_DWORD *)this + 5);
  if ((v12 & 0x40000000) != 0) {
    unsigned int v13 = (char *)v10;
  }
  else {
    unsigned int v13 = (char *)this - 32 * (v12 & 0x7FFFFFF);
  }
  sub_1CC5E4108((uint64_t)&v17, v8, &v8[4 * v7], (uint64_t)v13);
  if (v7 && a3)
  {
    memmove(&v13[32 * a2], &v8[4 * v7], 8 * v7);
  }
  else if (!v7)
  {
    goto LABEL_22;
  }
  uint64_t v14 = 4 * v7;
  do
  {
    int v15 = &v8[v14];
    if (v8[v14 - 4])
    {
      *(void *)*(v15 - 2) = *(v15 - 3);
      uint64_t v16 = *(v15 - 3);
      if (v16) {
        *(void *)(v16 + 16) = *(v15 - 2);
      }
    }
    v14 -= 4;
  }
  while (v14 * 8);
LABEL_22:
  operator delete(v8);
}

char *llvm::User::getDescriptor(llvm::User *this)
{
  uint64_t v1 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  return &v1[-*((void *)v1 - 1) - 8];
}

{
  char *v1;

  uint64_t v1 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
  return &v1[-*((void *)v1 - 1) - 8];
}

BOOL llvm::User::isDroppable(llvm::User *this)
{
  if (sub_1CBF698E4((uint64_t)this)) {
    return 1;
  }

  return sub_1CC27D470((uint64_t)this);
}

void *llvm::User::operator new(llvm::User *this, unsigned int a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = operator new((size_t)this + 32 * a2);
  uint64_t result = &v4[4 * v3];
  *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0x38000000 | a2 & 0x7FFFFFF;
  if (a2)
  {
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      void v4[3] = result;
      v4 += 4;
    }
    while (v4 != result);
  }
  return result;
}

char *llvm::User::operator new(llvm::User *this, unsigned int a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v6 = a3 + 8;
    uint64_t v7 = (char *)operator new((size_t)this + 32 * a2 + v6);
    uint64_t v8 = &v7[v6];
    uint64_t result = &v7[32 * a2 + v6];
    *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0x38000000 | a2 & 0x7FFFFFF | 0x80000000;
    if (a2)
    {
      do
      {
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
        *((void *)v8 + 2) = 0;
        *((void *)v8 + 3) = result;
        v8 += 32;
      }
      while (v8 != result);
    }
    *(void *)&v7[a3] = a3;
  }
  else
  {
    uint64_t v4 = (char *)operator new((size_t)this + 32 * a2);
    uint64_t result = &v4[32 * a2];
    *((_DWORD *)result + 5) = *((_DWORD *)result + 5) & 0x38000000 | a2 & 0x7FFFFFF;
    if (a2)
    {
      do
      {
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *((void *)v4 + 3) = result;
        v4 += 32;
      }
      while (v4 != result);
    }
  }
  return result;
}

_DWORD *llvm::User::operator new(llvm::User *this)
{
  uint64_t v1 = operator new((size_t)this + 8);
  v1[7] = v1[7] & 0x38000000 | 0x40000000;
  *(void *)uint64_t v1 = 0;
  return v1 + 2;
}

void llvm::User::operator delete(_DWORD *a1)
{
  int v2 = a1[5];
  if ((v2 & 0x40000000) != 0)
  {
    size_t v9 = (char *)(a1 - 2);
    uint64_t v8 = (char *)*((void *)a1 - 1);
    uint64_t v10 = v2 & 0x7FFFFFF;
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        int v12 = &v8[v11];
        if (*(void *)&v8[v11 - 32])
        {
          **((void **)v12 - 2) = *((void *)v12 - 3);
          uint64_t v13 = *((void *)v12 - 3);
          if (v13) {
            *(void *)(v13 + 16) = *((void *)v12 - 2);
          }
        }
        v11 -= 32;
      }
      while (v11);
    }
    operator delete(v8);
    uint64_t v4 = v9;
  }
  else
  {
    uint64_t v3 = v2 & 0x7FFFFFF;
    uint64_t v4 = (char *)&a1[-8 * v3];
    if (v3)
    {
      size_t v5 = (void **)(a1 - 4);
      uint64_t v6 = -32 * v3;
      do
      {
        if (*(v5 - 2))
        {
          **size_t v5 = *(v5 - 1);
          uint64_t v7 = (uint64_t)*(v5 - 1);
          if (v7) {
            *(void *)(v7 + 16) = *v5;
          }
        }
        v5 -= 4;
        v6 += 32;
      }
      while (v6);
    }
    if (v2 < 0) {
      uint64_t v4 = &v4[-*((void *)v4 - 1) - 8];
    }
  }

  operator delete(v4);
}

uint64_t llvm::Value::Value(uint64_t this, llvm::Type *a2, char a3)
{
  *(void *)this = a2;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = a3;
  *(unsigned char *)(this + 17) = 0;
  *(_WORD *)(this + 18) = 0;
  *(_DWORD *)(this + 20) &= 0xC0000000;
  return this;
}

{
  *(void *)this = a2;
  *(void *)(this + 8) = 0;
  *(unsigned char *)(this + 16) = a3;
  *(unsigned char *)(this + 17) = 0;
  *(_WORD *)(this + 18) = 0;
  *(_DWORD *)(this + 20) &= 0xC0000000;
  return this;
}

void llvm::Value::~Value(llvm::Value *this, llvm::Value *a2)
{
  if (*((unsigned char *)this + 17)) {
    llvm::ValueHandleBase::ValueIsDeleted(this, a2);
  }
  int v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x8000000) != 0)
  {
    size_t v5 = ***(int32x2_t ****)this;
    int32x2_t v6 = v5[49];
    uint64_t v7 = v5[51].u32[0];
    if (v7)
    {
      LODWORD(v8) = (v7 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v9 = *(void *)&v6 + 16 * v8;
      uint64_t v10 = *(llvm::Value **)v9;
      if (*(llvm::Value **)v9 == this) {
        goto LABEL_9;
      }
      int v12 = 1;
      while (v10 != (llvm::Value *)-4096)
      {
        int v13 = v8 + v12++;
        uint64_t v8 = v13 & (v7 - 1);
        uint64_t v10 = *(llvm::Value **)(*(void *)&v6 + 16 * v8);
        if (v10 == this)
        {
          uint64_t v9 = *(void *)&v6 + 16 * v8;
          goto LABEL_9;
        }
      }
    }
    uint64_t v9 = *(void *)&v6 + 16 * v7;
LABEL_9:
    if (v9 != *(void *)&v6 + 16 * v7)
    {
      uint64_t v11 = *(void *)(v9 + 8);
      *(void *)uint64_t v9 = -8192;
      v5[50] = vadd_s32(v5[50], (int32x2_t)0x1FFFFFFFFLL);
      llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v11 + 8), 0);
      if (v11)
      {
        if ((*(unsigned char *)(v11 + 24) & 1) == 0) {
          MEMORY[0x1D25D9CD0](*(void *)(v11 + 32), 8);
        }
        MEMORY[0x1D25D9CE0](v11, 0x1020C4072C728BCLL);
      }
    }
    int v3 = *((_DWORD *)this + 5);
  }
  if ((v3 & 0x20000000) != 0)
  {
    uint64_t v4 = (int32x2_t *)(***(void ***)this + 2480);
    uint64_t v14 = this;
    sub_1CC6035CC(v4, &v14);
    *((_DWORD *)this + 5) &= ~0x20000000u;
  }
  llvm::Value::destroyValueName((uint64_t)this);
}

{
  int v3;
  int32x2_t *v4;
  int32x2_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  int v10;
  int v11;
  uint64_t v12;
  int32x2_t *v13;
  llvm::Value *v14;

  if (*((unsigned char *)this + 17)) {
    llvm::ValueHandleBase::ValueIsDeleted(this, a2);
  }
  int v3 = *((_DWORD *)this + 5);
  if ((v3 & 0x8000000) == 0)
  {
    if ((v3 & 0x20000000) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    int v13 = (int32x2_t *)(***(void ***)this + 2480);
    uint64_t v14 = this;
    sub_1CC6035CC(v13, &v14);
    *((_DWORD *)this + 5) &= ~0x20000000u;
    goto LABEL_5;
  }
  uint64_t v4 = ***(int32x2_t ****)this;
  size_t v5 = v4[49];
  int32x2_t v6 = v4[51].u32[0];
  if (!v6) {
    goto LABEL_19;
  }
  LODWORD(v7) = (v6 - 1) & ((this >> 4) ^ (this >> 9));
  uint64_t v8 = *(void *)&v5 + 16 * v7;
  uint64_t v9 = *(llvm::Value **)v8;
  if (*(llvm::Value **)v8 != this)
  {
    uint64_t v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      uint64_t v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      uint64_t v9 = *(llvm::Value **)(*(void *)&v5 + 16 * v7);
      if (v9 == this)
      {
        uint64_t v8 = *(void *)&v5 + 16 * v7;
        goto LABEL_12;
      }
    }
LABEL_19:
    uint64_t v8 = *(void *)&v5 + 16 * v6;
  }
LABEL_12:
  if (v8 != *(void *)&v5 + 16 * v6)
  {
    int v12 = *(void *)(v8 + 8);
    *(void *)uint64_t v8 = -8192;
    v4[50] = vadd_s32(v4[50], (int32x2_t)0x1FFFFFFFFLL);
    llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v12 + 8), 0);
    if (v12)
    {
      if ((*(unsigned char *)(v12 + 24) & 1) == 0) {
        MEMORY[0x1D25D9CD0](*(void *)(v12 + 32), 8);
      }
      MEMORY[0x1D25D9CE0](v12, 0x1020C4072C728BCLL);
    }
  }
  if ((*((_DWORD *)this + 5) & 0x20000000) != 0) {
    goto LABEL_18;
  }
LABEL_5:
  llvm::Value::destroyValueName((uint64_t)this);
}

unint64_t *llvm::ValueHandleBase::ValueIsDeleted(llvm::ValueHandleBase *this, llvm::Value *a2)
{
  unint64_t v61 = this;
  uint64_t v2 = ***(void ***)this;
  int v3 = *(_DWORD *)(v2 + 2440);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 2424);
    int v5 = v3 - 1;
    unsigned int v6 = (v3 - 1) & ((this >> 4) ^ (this >> 9));
    uint64_t v7 = (llvm::ValueHandleBase **)(v4 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == this) {
      goto LABEL_16;
    }
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != (llvm::ValueHandleBase *)-4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == (llvm::ValueHandleBase *)-8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (llvm::ValueHandleBase **)(v4 + 16 * (v12 & v5));
      uint64_t v8 = *v7;
      if (*v7 == this) {
        goto LABEL_16;
      }
    }
    if (v9) {
      int v13 = v9;
    }
    else {
      int v13 = v7;
    }
  }
  else
  {
    int v13 = 0;
  }
  uint64_t v7 = (llvm::ValueHandleBase **)sub_1CC630A80(v2 + 2424, (uint64_t)&v61, (uint64_t *)&v61, v13);
  *uint64_t v7 = v61;
  v7[1] = 0;
LABEL_16:
  uint64_t v14 = 0;
  uint64_t result = (unint64_t *)v7[1];
  unint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v16 = (int32x2_t ****)result[2];
  uint64_t v60 = v16;
  if (v16 != (int32x2_t ****)-8192 && v16 != 0 && v16 != (int32x2_t ****)-4096)
  {
    unsigned int v18 = (unint64_t **)(*result & 0xFFFFFFFFFFFFFFF8);
    uint64_t v59 = *v18;
    *unsigned int v18 = &v58;
    unint64_t v58 = (unint64_t)v18;
    uint64_t v14 = v59;
    if (v59) {
      *uint64_t v59 = *v59 & 7 | (unint64_t)&v59;
    }
  }
  do
  {
    char v19 = v58;
    unint64_t v20 = v58 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v58 & 0xFFFFFFFFFFFFFFF8) = v14;
    if (v59)
    {
      *uint64_t v59 = *v59 & 7 | v20;
      char v19 = v58;
    }
    else
    {
      uint64_t v21 = v60;
      int v22 = ***v60;
      unint64_t v23 = (unint64_t)v22[303];
      if (v23 <= v20)
      {
        uint64_t v24 = v22[305].u32[0];
        if (v23 + 16 * v24 > v20)
        {
          unsigned int v25 = v24 - 1;
          LODWORD(v26) = v25 & ((v60 >> 4) ^ (v60 >> 9));
          uint64_t v27 = (int32x2_t *****)(v23 + 16 * v26);
          uint64_t v28 = *v27;
          if (v60 == *v27)
          {
LABEL_31:
            *uint64_t v27 = (int32x2_t ****)-8192;
            v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v21 = v60;
          }
          else
          {
            int v29 = 1;
            while (v28 != (int32x2_t ****)-4096)
            {
              int v30 = v26 + v29++;
              uint64_t v26 = v30 & v25;
              uint64_t v28 = *(int32x2_t *****)(v23 + 16 * v26);
              if (v60 == v28)
              {
                uint64_t v27 = (int32x2_t *****)(v23 + 16 * v26);
                goto LABEL_31;
              }
            }
          }
          *((unsigned char *)v21 + 17) &= ~1u;
        }
      }
    }
    uint64_t v31 = (unint64_t **)(result + 1);
    uint64_t v32 = (unint64_t *)result[1];
    unint64_t v58 = v19 & 7 | (unint64_t)(result + 1);
    uint64_t v59 = v32;
    result[1] = (unint64_t)&v58;
    if (v59) {
      *uint64_t v59 = *v59 & 7 | (unint64_t)&v59;
    }
    unint64_t v33 = *result;
    unsigned int v34 = (*result >> 1) & 3;
    if (v34 == 1)
    {
      (*(void (**)(void))(*(result - 1) + 8))();
    }
    else if (v34 - 2 <= 1)
    {
      unint64_t v35 = result[2];
      if (v35)
      {
        if ((v35 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          unint64_t v36 = v33 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v33 & 0xFFFFFFFFFFFFFFF8) = &v58;
          if (*v31)
          {
            **uint64_t v31 = **v31 & 7 | v36;
          }
          else
          {
            unint64_t v37 = result[2];
            unsigned int v38 = ***(int32x2_t ****)v37;
            unint64_t v39 = (unint64_t)v38[303];
            if (v39 <= v36)
            {
              uint64_t v40 = v38[305].u32[0];
              if (v39 + 16 * v40 > v36)
              {
                unsigned int v41 = v40 - 1;
                LODWORD(v42) = v41 & ((v37 >> 4) ^ (v37 >> 9));
                BOOL v43 = (uint64_t *)(v39 + 16 * v42);
                uint64_t v44 = *v43;
                if (v37 == *v43)
                {
LABEL_69:
                  *BOOL v43 = -8192;
                  v38[304] = vadd_s32(v38[304], (int32x2_t)0x1FFFFFFFFLL);
                  unint64_t v37 = result[2];
                }
                else
                {
                  int v45 = 1;
                  while (v44 != -4096)
                  {
                    int v46 = v42 + v45++;
                    uint64_t v42 = v46 & v41;
                    uint64_t v44 = *(void *)(v39 + 16 * v42);
                    if (v37 == v44)
                    {
                      BOOL v43 = (uint64_t *)(v39 + 16 * v42);
                      goto LABEL_69;
                    }
                  }
                }
                *(unsigned char *)(v37 + 17) &= ~1u;
              }
            }
          }
        }
        result[2] = 0;
      }
    }
    uint64_t v14 = v59;
    uint64_t result = v59;
  }
  while (v59);
  if (v60 != (int32x2_t ****)-8192 && v60 != (int32x2_t ****)-4096 && v60)
  {
    unint64_t v47 = v58 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v58 & 0xFFFFFFFFFFFFFFF8) = 0;
    if (v59)
    {
      *uint64_t v59 = *v59 & 7 | v47;
    }
    else
    {
      int v48 = v60;
      unsigned int v49 = ***v60;
      unint64_t v50 = (unint64_t)v49[303];
      if (v50 <= v47)
      {
        uint64_t v51 = v49[305].u32[0];
        if (v50 + 16 * v51 > v47)
        {
          unsigned int v52 = v51 - 1;
          LODWORD(v53) = v52 & ((v60 >> 4) ^ (v60 >> 9));
          uint64_t v54 = (int32x2_t *****)(v50 + 16 * v53);
          uint64_t v55 = *v54;
          if (v60 == *v54)
          {
LABEL_65:
            void *v54 = (int32x2_t ****)-8192;
            v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
            int v48 = v60;
          }
          else
          {
            int v56 = 1;
            while (v55 != (int32x2_t ****)-4096)
            {
              int v57 = v53 + v56++;
              uint64_t v53 = v57 & v52;
              uint64_t v55 = *(int32x2_t *****)(v50 + 16 * v53);
              if (v60 == v55)
              {
                uint64_t v54 = (int32x2_t *****)(v50 + 16 * v53);
                goto LABEL_65;
              }
            }
          }
          *((unsigned char *)v48 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::Value::destroyValueName(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 20);
  if ((v2 & 0x10000000) == 0) {
    goto LABEL_16;
  }
  int v3 = ***(int32x2_t ****)this;
  int32x2_t v4 = v3[19];
  uint64_t v5 = v3[21].u32[0];
  unsigned int v6 = this >> 4;
  if (!v5) {
    goto LABEL_19;
  }
  LODWORD(v7) = (v5 - 1) & (v6 ^ (this >> 9));
  uint64_t v8 = (uint64_t *)(*(void *)&v4 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 != this)
  {
    int v10 = 1;
    while (v9 != -4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(void *)(*(void *)&v4 + 16 * v7);
      if (v9 == this)
      {
        uint64_t v8 = (uint64_t *)(*(void *)&v4 + 16 * v7);
        goto LABEL_8;
      }
    }
LABEL_19:
    uint64_t v8 = (uint64_t *)(*(void *)&v4 + 16 * v5);
  }
LABEL_8:
  this = v8[1];
  if (this)
  {
    this = MEMORY[0x1D25D9CD0](this, 8);
    int v2 = *(_DWORD *)(v1 + 20);
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_16;
    }
    int v3 = ***(int32x2_t ****)v1;
    int32x2_t v4 = v3[19];
    LODWORD(v5) = v3[21].i32[0];
  }
  if (v5)
  {
    unsigned int v12 = v5 - 1;
    LODWORD(v5) = (v5 - 1) & (v6 ^ (v1 >> 9));
    int v13 = (uint64_t *)(*(void *)&v4 + 16 * v5);
    uint64_t v14 = *v13;
    if (*v13 == v1)
    {
LABEL_15:
      *int v13 = -8192;
      v3[20] = vadd_s32(v3[20], (int32x2_t)0x1FFFFFFFFLL);
      int v2 = *(_DWORD *)(v1 + 20);
    }
    else
    {
      int v15 = 1;
      while (v14 != -4096)
      {
        int v16 = v5 + v15++;
        uint64_t v5 = v16 & v12;
        uint64_t v14 = *(void *)(*(void *)&v4 + 16 * v5);
        if (v14 == v1)
        {
          int v13 = (uint64_t *)(*(void *)&v4 + 16 * v5);
          goto LABEL_15;
        }
      }
    }
  }
LABEL_16:
  *(_DWORD *)(v1 + 20) = v2 & 0xEFFFFFFF;
  return this;
}

void llvm::Value::deleteValue(void (**this)(void), llvm::Value *a2)
{
  switch(*((unsigned char *)this + 16))
  {
    case 0x16:
      goto LABEL_1708;
    case 0x17:
      llvm::MetadataAsValue::~MetadataAsValue((llvm::MetadataAsValue *)this);
      goto LABEL_453;
    case 0x18:
      sub_1CD5C599C((void **)this, a2);
      goto LABEL_453;
    case 0x19:
    case 0x1A:
    case 0x1B:
      uint64_t v21 = this[3];
      v21();
      return;
    case 0x1C:
    case 0x56:
    case 0x57:
      __break(1u);
LABEL_1708:
      llvm::BasicBlock::~BasicBlock((llvm::BasicBlock *)this);
      goto LABEL_453;
    case 0x1D:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v824 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v824, v825);
      }
      int v229 = this[6];
      if (!v229) {
        goto LABEL_482;
      }
      int v548 = *(unsigned __int8 *)v229;
      if ((v548 - 4) > 0x1E)
      {
        if ((v548 - 3) >= 0xFFFFFFFE) {
          uint64_t v629 = this[6];
        }
        else {
          uint64_t v629 = 0;
        }
        if ((v548 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v550 = (unint64_t)v629 + 8;
LABEL_1370:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v550 + 16, &v857);
          goto LABEL_482;
        }
        if (v548 == 3) {
          *((void *)v229 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v229 + 1) & 0x7F) == 2 || *((_DWORD *)v229 + 3))
      {
        uint64_t v549 = *((void *)v229 + 2);
        if ((v549 & 4) != 0)
        {
          unint64_t v550 = v549 & 0xFFFFFFFFFFFFFFF8;
          if (v550) {
            goto LABEL_1370;
          }
        }
      }
LABEL_482:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v230 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v230];
        if (v230)
        {
          int v231 = this - 2;
          uint64_t v232 = -32 * v230;
          do
          {
            if (*(v231 - 2))
            {
              *(void *)*int v231 = *(v231 - 1);
              uint64_t v233 = (uint64_t)*(v231 - 1);
              if (v233) {
                *(void *)(v233 + 16) = *v231;
              }
            }
            v231 -= 4;
            v232 += 32;
          }
          while (v232);
        }
        goto LABEL_1597;
      }
      v570 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v570;
      uint64_t v571 = v11 & 0x7FFFFFF;
      if (v571)
      {
        uint64_t v572 = 32 * v571;
        do
        {
          int v573 = &v174[v572];
          if (*(void *)&v174[v572 - 32])
          {
            **((void **)v573 - 2) = *((void *)v573 - 3);
            uint64_t v574 = *((void *)v573 - 3);
            if (v574) {
              *(void *)(v574 + 16) = *((void *)v573 - 2);
            }
          }
          v572 -= 32;
        }
        while (v572);
      }
      goto LABEL_1689;
    case 0x1E:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v764 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v764, v765);
      }
      unint64_t v82 = this[6];
      if (!v82) {
        goto LABEL_173;
      }
      int v314 = *(unsigned __int8 *)v82;
      if ((v314 - 4) > 0x1E)
      {
        if ((v314 - 3) >= 0xFFFFFFFE) {
          v427 = this[6];
        }
        else {
          v427 = 0;
        }
        if ((v314 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v316 = (unint64_t)v427 + 8;
LABEL_905:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v316 + 16, &v857);
          goto LABEL_173;
        }
        if (v314 == 3) {
          *((void *)v82 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v82 + 1) & 0x7F) == 2 || *((_DWORD *)v82 + 3))
      {
        uint64_t v315 = *((void *)v82 + 2);
        if ((v315 & 4) != 0)
        {
          unint64_t v316 = v315 & 0xFFFFFFFFFFFFFFF8;
          if (v316) {
            goto LABEL_905;
          }
        }
      }
LABEL_173:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v83 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v83];
        if (v83)
        {
          uint64_t v84 = this - 2;
          uint64_t v85 = -32 * v83;
          do
          {
            if (*(v84 - 2))
            {
              *(void *)*uint64_t v84 = *(v84 - 1);
              uint64_t v86 = (uint64_t)*(v84 - 1);
              if (v86) {
                *(void *)(v86 + 16) = *v84;
              }
            }
            v84 -= 4;
            v85 += 32;
          }
          while (v85);
        }
        goto LABEL_1597;
      }
      v347 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v347;
      uint64_t v348 = v11 & 0x7FFFFFF;
      if (v348)
      {
        uint64_t v349 = 32 * v348;
        do
        {
          uint64_t v350 = &v174[v349];
          if (*(void *)&v174[v349 - 32])
          {
            **((void **)v350 - 2) = *((void *)v350 - 3);
            uint64_t v351 = *((void *)v350 - 3);
            if (v351) {
              *(void *)(v351 + 16) = *((void *)v350 - 2);
            }
          }
          v349 -= 32;
        }
        while (v349);
      }
      goto LABEL_1689;
    case 0x1F:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v841 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v841, v842);
      }
      uint64_t v440 = this[6];
      if (!v440) {
        goto LABEL_933;
      }
      int v656 = *(unsigned __int8 *)v440;
      if ((v656 - 4) > 0x1E)
      {
        if ((v656 - 3) >= 0xFFFFFFFE) {
          uint64_t v702 = this[6];
        }
        else {
          uint64_t v702 = 0;
        }
        if ((v656 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v658 = (unint64_t)v702 + 8;
LABEL_1561:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v658 + 16, &v857);
          goto LABEL_933;
        }
        if (v656 == 3) {
          *((void *)v440 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v440 + 1) & 0x7F) == 2 || *((_DWORD *)v440 + 3))
      {
        uint64_t v657 = *((void *)v440 + 2);
        if ((v657 & 4) != 0)
        {
          unint64_t v658 = v657 & 0xFFFFFFFFFFFFFFF8;
          if (v658) {
            goto LABEL_1561;
          }
        }
      }
LABEL_933:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v441 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v441];
        if (v441)
        {
          v442 = this - 2;
          uint64_t v443 = -32 * v441;
          do
          {
            if (*(v442 - 2))
            {
              *(void *)*v442 = *(v442 - 1);
              uint64_t v444 = (uint64_t)*(v442 - 1);
              if (v444) {
                *(void *)(v444 + 16) = *v442;
              }
            }
            v442 -= 4;
            v443 += 32;
          }
          while (v443);
        }
        goto LABEL_1597;
      }
      v676 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v676;
      uint64_t v677 = v11 & 0x7FFFFFF;
      if (v677)
      {
        uint64_t v678 = 32 * v677;
        do
        {
          v679 = &v174[v678];
          if (*(void *)&v174[v678 - 32])
          {
            **((void **)v679 - 2) = *((void *)v679 - 3);
            uint64_t v680 = *((void *)v679 - 3);
            if (v680) {
              *(void *)(v680 + 16) = *((void *)v679 - 2);
            }
          }
          v678 -= 32;
        }
        while (v678);
      }
      goto LABEL_1689;
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x34:
    case 0x3F:
    case 0x4F:
    case 0x50:
    case 0x58:
    case 0x5E:
      llvm::Instruction::~Instruction((llvm::UndefValue **)this, a2);
      llvm::User::operator delete(v747);
      return;
    case 0x23:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v773 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v773, v774);
      }
      int v103 = this[6];
      if (!v103) {
        goto LABEL_219;
      }
      int v365 = *(unsigned __int8 *)v103;
      if ((v365 - 4) > 0x1E)
      {
        if ((v365 - 3) >= 0xFFFFFFFE) {
          unint64_t v495 = this[6];
        }
        else {
          unint64_t v495 = 0;
        }
        if ((v365 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v367 = (unint64_t)v495 + 8;
LABEL_1057:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v367 + 16, &v857);
          goto LABEL_219;
        }
        if (v365 == 3) {
          *((void *)v103 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v103 + 1) & 0x7F) == 2 || *((_DWORD *)v103 + 3))
      {
        uint64_t v366 = *((void *)v103 + 2);
        if ((v366 & 4) != 0)
        {
          unint64_t v367 = v366 & 0xFFFFFFFFFFFFFFF8;
          if (v367) {
            goto LABEL_1057;
          }
        }
      }
LABEL_219:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v104 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v104];
        if (v104)
        {
          uint64_t v105 = this - 2;
          uint64_t v106 = -32 * v104;
          do
          {
            if (*(v105 - 2))
            {
              *(void *)*uint64_t v105 = *(v105 - 1);
              uint64_t v107 = (uint64_t)*(v105 - 1);
              if (v107) {
                *(void *)(v107 + 16) = *v105;
              }
            }
            v105 -= 4;
            v106 += 32;
          }
          while (v106);
        }
        goto LABEL_1597;
      }
      uint64_t v393 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v393;
      uint64_t v394 = v11 & 0x7FFFFFF;
      if (v394)
      {
        uint64_t v395 = 32 * v394;
        do
        {
          v396 = &v174[v395];
          if (*(void *)&v174[v395 - 32])
          {
            **((void **)v396 - 2) = *((void *)v396 - 3);
            uint64_t v397 = *((void *)v396 - 3);
            if (v397) {
              *(void *)(v397 + 16) = *((void *)v396 - 2);
            }
          }
          v395 -= 32;
        }
        while (v395);
      }
      goto LABEL_1689;
    case 0x28:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v803 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v803, v804);
      }
      unsigned int v163 = this[6];
      if (!v163) {
        goto LABEL_350;
      }
      int v470 = *(unsigned __int8 *)v163;
      if ((v470 - 4) > 0x1E)
      {
        if ((v470 - 3) >= 0xFFFFFFFE) {
          v604 = this[6];
        }
        else {
          v604 = 0;
        }
        if ((v470 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v472 = (unint64_t)v604 + 8;
LABEL_1290:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v472 + 16, &v857);
          goto LABEL_350;
        }
        if (v470 == 3) {
          *((void *)v163 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v163 + 1) & 0x7F) == 2 || *((_DWORD *)v163 + 3))
      {
        uint64_t v471 = *((void *)v163 + 2);
        if ((v471 & 4) != 0)
        {
          unint64_t v472 = v471 & 0xFFFFFFFFFFFFFFF8;
          if (v472) {
            goto LABEL_1290;
          }
        }
      }
LABEL_350:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v164 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v164];
        if (v164)
        {
          int v165 = this - 2;
          uint64_t v166 = -32 * v164;
          do
          {
            if (*(v165 - 2))
            {
              *(void *)unint64_t *v165 = *(v165 - 1);
              uint64_t v167 = (uint64_t)*(v165 - 1);
              if (v167) {
                *(void *)(v167 + 16) = *v165;
              }
            }
            v165 -= 4;
            v166 += 32;
          }
          while (v166);
        }
        goto LABEL_1597;
      }
      uint64_t v517 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v517;
      uint64_t v518 = v11 & 0x7FFFFFF;
      if (v518)
      {
        uint64_t v519 = 32 * v518;
        do
        {
          uint64_t v520 = &v174[v519];
          if (*(void *)&v174[v519 - 32])
          {
            **((void **)v520 - 2) = *((void *)v520 - 3);
            uint64_t v521 = *((void *)v520 - 3);
            if (v521) {
              *(void *)(v521 + 16) = *((void *)v520 - 2);
            }
          }
          v519 -= 32;
        }
        while (v519);
      }
      goto LABEL_1689;
    case 0x29:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v766 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v766, v767);
      }
      uint64_t v87 = this[6];
      if (!v87) {
        goto LABEL_184;
      }
      int v334 = *(unsigned __int8 *)v87;
      if ((v334 - 4) > 0x1E)
      {
        if ((v334 - 3) >= 0xFFFFFFFE) {
          int v445 = this[6];
        }
        else {
          int v445 = 0;
        }
        if ((v334 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v336 = (unint64_t)v445 + 8;
LABEL_946:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v336 + 16, &v857);
          goto LABEL_184;
        }
        if (v334 == 3) {
          *((void *)v87 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v87 + 1) & 0x7F) == 2 || *((_DWORD *)v87 + 3))
      {
        uint64_t v335 = *((void *)v87 + 2);
        if ((v335 & 4) != 0)
        {
          unint64_t v336 = v335 & 0xFFFFFFFFFFFFFFF8;
          if (v336) {
            goto LABEL_946;
          }
        }
      }
LABEL_184:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v88 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v88];
        if (v88)
        {
          uint64_t v89 = this - 2;
          uint64_t v90 = -32 * v88;
          do
          {
            if (*(v89 - 2))
            {
              *(void *)void *v89 = *(v89 - 1);
              uint64_t v91 = (uint64_t)*(v89 - 1);
              if (v91) {
                *(void *)(v91 + 16) = *v89;
              }
            }
            v89 -= 4;
            v90 += 32;
          }
          while (v90);
        }
        goto LABEL_1597;
      }
      uint64_t v360 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v360;
      uint64_t v361 = v11 & 0x7FFFFFF;
      if (v361)
      {
        uint64_t v362 = 32 * v361;
        do
        {
          v363 = &v174[v362];
          if (*(void *)&v174[v362 - 32])
          {
            **((void **)v363 - 2) = *((void *)v363 - 3);
            uint64_t v364 = *((void *)v363 - 3);
            if (v364) {
              *(void *)(v364 + 16) = *((void *)v363 - 2);
            }
          }
          v362 -= 32;
        }
        while (v362);
      }
      goto LABEL_1689;
    case 0x2A:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v752 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v752, v753);
      }
      unsigned int v52 = this[6];
      if (!v52) {
        goto LABEL_107;
      }
      int v270 = *(unsigned __int8 *)v52;
      if ((v270 - 4) > 0x1E)
      {
        if ((v270 - 3) >= 0xFFFFFFFE) {
          uint64_t v403 = this[6];
        }
        else {
          uint64_t v403 = 0;
        }
        if ((v270 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v272 = (unint64_t)v403 + 8;
LABEL_830:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v272 + 16, &v857);
          goto LABEL_107;
        }
        if (v270 == 3) {
          *((void *)v52 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v52 + 1) & 0x7F) == 2 || *((_DWORD *)v52 + 3))
      {
        uint64_t v271 = *((void *)v52 + 2);
        if ((v271 & 4) != 0)
        {
          unint64_t v272 = v271 & 0xFFFFFFFFFFFFFFF8;
          if (v272) {
            goto LABEL_830;
          }
        }
      }
LABEL_107:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v53 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v53];
        if (v53)
        {
          uint64_t v54 = this - 2;
          uint64_t v55 = -32 * v53;
          do
          {
            if (*(v54 - 2))
            {
              *(void *)void *v54 = *(v54 - 1);
              uint64_t v56 = (uint64_t)*(v54 - 1);
              if (v56) {
                *(void *)(v56 + 16) = *v54;
              }
            }
            v54 -= 4;
            v55 += 32;
          }
          while (v55);
        }
        goto LABEL_1597;
      }
      uint64_t v299 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v299;
      uint64_t v300 = v11 & 0x7FFFFFF;
      if (v300)
      {
        uint64_t v301 = 32 * v300;
        do
        {
          char v302 = &v174[v301];
          if (*(void *)&v174[v301 - 32])
          {
            **((void **)v302 - 2) = *((void *)v302 - 3);
            uint64_t v303 = *((void *)v302 - 3);
            if (v303) {
              *(void *)(v303 + 16) = *((void *)v302 - 2);
            }
          }
          v301 -= 32;
        }
        while (v301);
      }
      goto LABEL_1689;
    case 0x2B:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        int v812 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v812, v813);
      }
      int v204 = this[6];
      if (!v204) {
        goto LABEL_422;
      }
      int v523 = *(unsigned __int8 *)v204;
      if ((v523 - 4) > 0x1E)
      {
        if ((v523 - 3) >= 0xFFFFFFFE) {
          v618 = this[6];
        }
        else {
          v618 = 0;
        }
        if ((v523 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v525 = (unint64_t)v618 + 8;
LABEL_1331:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v525 + 16, &v857);
          goto LABEL_422;
        }
        if (v523 == 3) {
          *((void *)v204 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v204 + 1) & 0x7F) == 2 || *((_DWORD *)v204 + 3))
      {
        uint64_t v524 = *((void *)v204 + 2);
        if ((v524 & 4) != 0)
        {
          unint64_t v525 = v524 & 0xFFFFFFFFFFFFFFF8;
          if (v525) {
            goto LABEL_1331;
          }
        }
      }
LABEL_422:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v205 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v205];
        if (v205)
        {
          std::string v206 = this - 2;
          uint64_t v207 = -32 * v205;
          do
          {
            if (*(v206 - 2))
            {
              *(void *)*std::string v206 = *(v206 - 1);
              uint64_t v208 = (uint64_t)*(v206 - 1);
              if (v208) {
                *(void *)(v208 + 16) = *v206;
              }
            }
            v206 -= 4;
            v207 += 32;
          }
          while (v207);
        }
        goto LABEL_1597;
      }
      v551 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v551;
      uint64_t v552 = v11 & 0x7FFFFFF;
      if (v552)
      {
        uint64_t v553 = 32 * v552;
        do
        {
          v554 = &v174[v553];
          if (*(void *)&v174[v553 - 32])
          {
            **((void **)v554 - 2) = *((void *)v554 - 3);
            uint64_t v555 = *((void *)v554 - 3);
            if (v555) {
              *(void *)(v555 + 16) = *((void *)v554 - 2);
            }
          }
          v553 -= 32;
        }
        while (v553);
      }
      goto LABEL_1689;
    case 0x2C:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v769 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v769, v770);
      }
      unint64_t v92 = this[6];
      if (!v92) {
        goto LABEL_195;
      }
      int v352 = *(unsigned __int8 *)v92;
      if ((v352 - 4) > 0x1E)
      {
        if ((v352 - 3) >= 0xFFFFFFFE) {
          uint64_t v473 = this[6];
        }
        else {
          uint64_t v473 = 0;
        }
        if ((v352 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v354 = (unint64_t)v473 + 8;
LABEL_1007:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v354 + 16, &v857);
          goto LABEL_195;
        }
        if (v352 == 3) {
          *((void *)v92 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v92 + 1) & 0x7F) == 2 || *((_DWORD *)v92 + 3))
      {
        uint64_t v353 = *((void *)v92 + 2);
        if ((v353 & 4) != 0)
        {
          unint64_t v354 = v353 & 0xFFFFFFFFFFFFFFF8;
          if (v354) {
            goto LABEL_1007;
          }
        }
      }
LABEL_195:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v93 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v93];
        if (v93)
        {
          unsigned int v94 = this - 2;
          uint64_t v95 = -32 * v93;
          do
          {
            if (*(v94 - 2))
            {
              *(void *)*unsigned int v94 = *(v94 - 1);
              uint64_t v96 = (uint64_t)*(v94 - 1);
              if (v96) {
                *(void *)(v96 + 16) = *v94;
              }
            }
            v94 -= 4;
            v95 += 32;
          }
          while (v95);
        }
        goto LABEL_1597;
      }
      v380 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v380;
      uint64_t v381 = v11 & 0x7FFFFFF;
      if (v381)
      {
        uint64_t v382 = 32 * v381;
        do
        {
          unint64_t v383 = &v174[v382];
          if (*(void *)&v174[v382 - 32])
          {
            **((void **)v383 - 2) = *((void *)v383 - 3);
            uint64_t v384 = *((void *)v383 - 3);
            if (v384) {
              *(void *)(v384 + 16) = *((void *)v383 - 2);
            }
          }
          v382 -= 32;
        }
        while (v382);
      }
      goto LABEL_1689;
    case 0x2D:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v791 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v791, v792);
      }
      uint64_t v130 = this[6];
      if (!v130) {
        goto LABEL_278;
      }
      int v431 = *(unsigned __int8 *)v130;
      if ((v431 - 4) > 0x1E)
      {
        if ((v431 - 3) >= 0xFFFFFFFE) {
          uint64_t v579 = this[6];
        }
        else {
          uint64_t v579 = 0;
        }
        if ((v431 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v433 = (unint64_t)v579 + 8;
LABEL_1230:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v433 + 16, &v857);
          goto LABEL_278;
        }
        if (v431 == 3) {
          *((void *)v130 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v130 + 1) & 0x7F) == 2 || *((_DWORD *)v130 + 3))
      {
        uint64_t v432 = *((void *)v130 + 2);
        if ((v432 & 4) != 0)
        {
          unint64_t v433 = v432 & 0xFFFFFFFFFFFFFFF8;
          if (v433) {
            goto LABEL_1230;
          }
        }
      }
LABEL_278:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v131 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v131];
        if (v131)
        {
          unsigned int v132 = this - 2;
          uint64_t v133 = -32 * v131;
          do
          {
            if (*(v132 - 2))
            {
              *(void *)void *v132 = *(v132 - 1);
              uint64_t v134 = (uint64_t)*(v132 - 1);
              if (v134) {
                *(void *)(v134 + 16) = *v132;
              }
            }
            v132 -= 4;
            v133 += 32;
          }
          while (v133);
        }
        goto LABEL_1597;
      }
      unint64_t v479 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v479;
      uint64_t v480 = v11 & 0x7FFFFFF;
      if (v480)
      {
        uint64_t v481 = 32 * v480;
        do
        {
          uint64_t v482 = &v174[v481];
          if (*(void *)&v174[v481 - 32])
          {
            **((void **)v482 - 2) = *((void *)v482 - 3);
            uint64_t v483 = *((void *)v482 - 3);
            if (v483) {
              *(void *)(v483 + 16) = *((void *)v482 - 2);
            }
          }
          v481 -= 32;
        }
        while (v481);
      }
      goto LABEL_1689;
    case 0x2E:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v735 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v735, v736);
      }
      uint64_t v27 = this[6];
      if (!v27) {
        goto LABEL_52;
      }
      int v209 = *(unsigned __int8 *)v27;
      if ((v209 - 4) > 0x1E)
      {
        if ((v209 - 3) >= 0xFFFFFFFE) {
          v356 = this[6];
        }
        else {
          v356 = 0;
        }
        if ((v209 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v211 = (unint64_t)v356 + 8;
LABEL_720:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v211 + 16, &v857);
          goto LABEL_52;
        }
        if (v209 == 3) {
          *((void *)v27 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v27 + 1) & 0x7F) == 2 || *((_DWORD *)v27 + 3))
      {
        uint64_t v210 = *((void *)v27 + 2);
        if ((v210 & 4) != 0)
        {
          unint64_t v211 = v210 & 0xFFFFFFFFFFFFFFF8;
          if (v211) {
            goto LABEL_720;
          }
        }
      }
LABEL_52:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v28 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v28];
        if (v28)
        {
          int v29 = this - 2;
          uint64_t v30 = -32 * v28;
          do
          {
            if (*(v29 - 2))
            {
              *(void *)*int v29 = *(v29 - 1);
              uint64_t v31 = (uint64_t)*(v29 - 1);
              if (v31) {
                *(void *)(v31 + 16) = *v29;
              }
            }
            v29 -= 4;
            v30 += 32;
          }
          while (v30);
        }
        goto LABEL_1597;
      }
      int v239 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v239;
      uint64_t v240 = v11 & 0x7FFFFFF;
      if (v240)
      {
        uint64_t v241 = 32 * v240;
        do
        {
          unsigned int v242 = &v174[v241];
          if (*(void *)&v174[v241 - 32])
          {
            **((void **)v242 - 2) = *((void *)v242 - 3);
            uint64_t v243 = *((void *)v242 - 3);
            if (v243) {
              *(void *)(v243 + 16) = *((void *)v242 - 2);
            }
          }
          v241 -= 32;
        }
        while (v241);
      }
      goto LABEL_1689;
    case 0x2F:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v843 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v843, v844);
      }
      uint64_t v446 = this[6];
      if (!v446) {
        goto LABEL_950;
      }
      int v659 = *(unsigned __int8 *)v446;
      if ((v659 - 4) > 0x1E)
      {
        if ((v659 - 3) >= 0xFFFFFFFE) {
          unint64_t v703 = this[6];
        }
        else {
          unint64_t v703 = 0;
        }
        if ((v659 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v661 = (unint64_t)v703 + 8;
LABEL_1567:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v661 + 16, &v857);
          goto LABEL_950;
        }
        if (v659 == 3) {
          *((void *)v446 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v446 + 1) & 0x7F) == 2 || *((_DWORD *)v446 + 3))
      {
        uint64_t v660 = *((void *)v446 + 2);
        if ((v660 & 4) != 0)
        {
          unint64_t v661 = v660 & 0xFFFFFFFFFFFFFFF8;
          if (v661) {
            goto LABEL_1567;
          }
        }
      }
LABEL_950:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v447 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v447];
        if (v447)
        {
          v448 = this - 2;
          uint64_t v449 = -32 * v447;
          do
          {
            if (*(v448 - 2))
            {
              *(void *)unsigned __int8 *v448 = *(v448 - 1);
              uint64_t v450 = (uint64_t)*(v448 - 1);
              if (v450) {
                *(void *)(v450 + 16) = *v448;
              }
            }
            v448 -= 4;
            v449 += 32;
          }
          while (v449);
        }
        goto LABEL_1597;
      }
      uint64_t v681 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v681;
      uint64_t v682 = v11 & 0x7FFFFFF;
      if (v682)
      {
        uint64_t v683 = 32 * v682;
        do
        {
          v684 = &v174[v683];
          if (*(void *)&v174[v683 - 32])
          {
            **((void **)v684 - 2) = *((void *)v684 - 3);
            uint64_t v685 = *((void *)v684 - 3);
            if (v685) {
              *(void *)(v685 + 16) = *((void *)v684 - 2);
            }
          }
          v683 -= 32;
        }
        while (v683);
      }
      goto LABEL_1689;
    case 0x30:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v849 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v849, v850);
      }
      uint64_t v633 = this[6];
      if (!v633) {
        goto LABEL_1388;
      }
      int v711 = *(unsigned __int8 *)v633;
      if ((v711 - 4) > 0x1E)
      {
        if ((v711 - 3) >= 0xFFFFFFFE) {
          uint64_t v746 = this[6];
        }
        else {
          uint64_t v746 = 0;
        }
        if ((v711 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v713 = (unint64_t)v746 + 8;
LABEL_1649:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v713 + 16, &v857);
          goto LABEL_1388;
        }
        if (v711 == 3) {
          *((void *)v633 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v633 + 1) & 0x7F) == 2 || *((_DWORD *)v633 + 3))
      {
        uint64_t v712 = *((void *)v633 + 2);
        if ((v712 & 4) != 0)
        {
          unint64_t v713 = v712 & 0xFFFFFFFFFFFFFFF8;
          if (v713) {
            goto LABEL_1649;
          }
        }
      }
LABEL_1388:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v634 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v634];
        if (v634)
        {
          v635 = this - 2;
          uint64_t v636 = -32 * v634;
          do
          {
            if (*(v635 - 2))
            {
              *(void *)*v635 = *(v635 - 1);
              uint64_t v637 = (uint64_t)*(v635 - 1);
              if (v637) {
                *(void *)(v637 + 16) = *v635;
              }
            }
            v635 -= 4;
            v636 += 32;
          }
          while (v636);
        }
        goto LABEL_1597;
      }
      v716 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v716;
      uint64_t v717 = v11 & 0x7FFFFFF;
      if (v717)
      {
        uint64_t v718 = 32 * v717;
        do
        {
          unint64_t v719 = &v174[v718];
          if (*(void *)&v174[v718 - 32])
          {
            **((void **)v719 - 2) = *((void *)v719 - 3);
            uint64_t v720 = *((void *)v719 - 3);
            if (v720) {
              *(void *)(v720 + 16) = *((void *)v719 - 2);
            }
          }
          v718 -= 32;
        }
        while (v718);
      }
      goto LABEL_1689;
    case 0x31:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v810 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v810, v811);
      }
      uint64_t v186 = this[6];
      if (!v186) {
        goto LABEL_391;
      }
      int v514 = *(unsigned __int8 *)v186;
      if ((v514 - 4) > 0x1E)
      {
        if ((v514 - 3) >= 0xFFFFFFFE) {
          v612 = this[6];
        }
        else {
          v612 = 0;
        }
        if ((v514 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v516 = (unint64_t)v612 + 8;
LABEL_1318:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v516 + 16, &v857);
          goto LABEL_391;
        }
        if (v514 == 3) {
          *((void *)v186 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v186 + 1) & 0x7F) == 2 || *((_DWORD *)v186 + 3))
      {
        uint64_t v515 = *((void *)v186 + 2);
        if ((v515 & 4) != 0)
        {
          unint64_t v516 = v515 & 0xFFFFFFFFFFFFFFF8;
          if (v516) {
            goto LABEL_1318;
          }
        }
      }
LABEL_391:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v187 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v187];
        if (v187)
        {
          uint64_t v188 = this - 2;
          uint64_t v189 = -32 * v187;
          do
          {
            if (*(v188 - 2))
            {
              *(void *)int32x2_t *v188 = *(v188 - 1);
              uint64_t v190 = (uint64_t)*(v188 - 1);
              if (v190) {
                *(void *)(v190 + 16) = *v188;
              }
            }
            v188 -= 4;
            v189 += 32;
          }
          while (v189);
        }
        goto LABEL_1597;
      }
      v538 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v538;
      uint64_t v539 = v11 & 0x7FFFFFF;
      if (v539)
      {
        uint64_t v540 = 32 * v539;
        do
        {
          int v541 = &v174[v540];
          if (*(void *)&v174[v540 - 32])
          {
            **((void **)v541 - 2) = *((void *)v541 - 3);
            uint64_t v542 = *((void *)v541 - 3);
            if (v542) {
              *(void *)(v542 + 16) = *((void *)v541 - 2);
            }
          }
          v540 -= 32;
        }
        while (v540);
      }
      goto LABEL_1689;
    case 0x32:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v839 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v839, v840);
      }
      v422 = this[6];
      if (!v422) {
        goto LABEL_888;
      }
      int v652 = *(unsigned __int8 *)v422;
      if ((v652 - 4) > 0x1E)
      {
        if ((v652 - 3) >= 0xFFFFFFFE) {
          uint64_t v696 = this[6];
        }
        else {
          uint64_t v696 = 0;
        }
        if ((v652 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v654 = (unint64_t)v696 + 8;
LABEL_1544:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v654 + 16, &v857);
          goto LABEL_888;
        }
        if (v652 == 3) {
          *((void *)v422 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v422 + 1) & 0x7F) == 2 || *((_DWORD *)v422 + 3))
      {
        uint64_t v653 = *((void *)v422 + 2);
        if ((v653 & 4) != 0)
        {
          unint64_t v654 = v653 & 0xFFFFFFFFFFFFFFF8;
          if (v654) {
            goto LABEL_1544;
          }
        }
      }
LABEL_888:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v423 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v423];
        if (v423)
        {
          uint64_t v424 = this - 2;
          uint64_t v425 = -32 * v423;
          do
          {
            if (*(v424 - 2))
            {
              *(void *)*uint64_t v424 = *(v424 - 1);
              uint64_t v426 = (uint64_t)*(v424 - 1);
              if (v426) {
                *(void *)(v426 + 16) = *v424;
              }
            }
            v424 -= 4;
            v425 += 32;
          }
          while (v425);
        }
        goto LABEL_1597;
      }
      v663 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v663;
      uint64_t v664 = v11 & 0x7FFFFFF;
      if (v664)
      {
        uint64_t v665 = 32 * v664;
        do
        {
          v666 = &v174[v665];
          if (*(void *)&v174[v665 - 32])
          {
            **((void **)v666 - 2) = *((void *)v666 - 3);
            uint64_t v667 = *((void *)v666 - 3);
            if (v667) {
              *(void *)(v667 + 16) = *((void *)v666 - 2);
            }
          }
          v665 -= 32;
        }
        while (v665);
      }
      goto LABEL_1689;
    case 0x33:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v851 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v851, v852);
      }
      unint64_t v671 = this[6];
      if (!v671) {
        goto LABEL_1486;
      }
      int v730 = *(unsigned __int8 *)v671;
      if ((v730 - 4) > 0x1E)
      {
        if ((v730 - 3) >= 0xFFFFFFFE) {
          uint64_t v768 = this[6];
        }
        else {
          uint64_t v768 = 0;
        }
        if ((v730 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v732 = (unint64_t)v768 + 8;
LABEL_1660:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v732 + 16, &v857);
          goto LABEL_1486;
        }
        if (v730 == 3) {
          *((void *)v671 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v671 + 1) & 0x7F) == 2 || *((_DWORD *)v671 + 3))
      {
        uint64_t v731 = *((void *)v671 + 2);
        if ((v731 & 4) != 0)
        {
          unint64_t v732 = v731 & 0xFFFFFFFFFFFFFFF8;
          if (v732) {
            goto LABEL_1660;
          }
        }
      }
LABEL_1486:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v672 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v672];
        if (v672)
        {
          v673 = this - 2;
          uint64_t v674 = -32 * v672;
          do
          {
            if (*(v673 - 2))
            {
              *(void *)uint64_t *v673 = *(v673 - 1);
              uint64_t v675 = (uint64_t)*(v673 - 1);
              if (v675) {
                *(void *)(v675 + 16) = *v673;
              }
            }
            v673 -= 4;
            v674 += 32;
          }
          while (v674);
        }
        goto LABEL_1597;
      }
      v741 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v741;
      uint64_t v742 = v11 & 0x7FFFFFF;
      if (v742)
      {
        uint64_t v743 = 32 * v742;
        do
        {
          uint64_t v744 = &v174[v743];
          if (*(void *)&v174[v743 - 32])
          {
            **((void **)v744 - 2) = *((void *)v744 - 3);
            uint64_t v745 = *((void *)v744 - 3);
            if (v745) {
              *(void *)(v745 + 16) = *((void *)v744 - 2);
            }
          }
          v743 -= 32;
        }
        while (v743);
      }
      goto LABEL_1689;
    case 0x35:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v819 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v819, v820);
      }
      uint64_t v212 = this[6];
      if (!v212) {
        goto LABEL_439;
      }
      int v526 = *(unsigned __int8 *)v212;
      if ((v526 - 4) > 0x1E)
      {
        if ((v526 - 3) >= 0xFFFFFFFE) {
          v619 = this[6];
        }
        else {
          v619 = 0;
        }
        if ((v526 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v528 = (unint64_t)v619 + 8;
LABEL_1345:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v528 + 16, &v857);
          goto LABEL_439;
        }
        if (v526 == 3) {
          *((void *)v212 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v212 + 1) & 0x7F) == 2 || *((_DWORD *)v212 + 3))
      {
        uint64_t v527 = *((void *)v212 + 2);
        if ((v527 & 4) != 0)
        {
          unint64_t v528 = v527 & 0xFFFFFFFFFFFFFFF8;
          if (v528) {
            goto LABEL_1345;
          }
        }
      }
LABEL_439:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v213 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v213];
        if (v213)
        {
          uint64_t v214 = this - 2;
          uint64_t v215 = -32 * v213;
          do
          {
            if (*(v214 - 2))
            {
              *(void *)uint64_t *v214 = *(v214 - 1);
              uint64_t v216 = (uint64_t)*(v214 - 1);
              if (v216) {
                *(void *)(v216 + 16) = *v214;
              }
            }
            v214 -= 4;
            v215 += 32;
          }
          while (v215);
        }
        goto LABEL_1597;
      }
      int v557 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v557;
      uint64_t v558 = v11 & 0x7FFFFFF;
      if (v558)
      {
        uint64_t v559 = 32 * v558;
        do
        {
          v560 = &v174[v559];
          if (*(void *)&v174[v559 - 32])
          {
            **((void **)v560 - 2) = *((void *)v560 - 3);
            uint64_t v561 = *((void *)v560 - 3);
            if (v561) {
              *(void *)(v561 + 16) = *((void *)v560 - 2);
            }
          }
          v559 -= 32;
        }
        while (v559);
      }
      goto LABEL_1689;
    case 0x36:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v760 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v760, v761);
      }
      uint64_t v72 = this[6];
      if (!v72) {
        goto LABEL_151;
      }
      int v283 = *(unsigned __int8 *)v72;
      if ((v283 - 4) > 0x1E)
      {
        if ((v283 - 3) >= 0xFFFFFFFE) {
          v412 = this[6];
        }
        else {
          v412 = 0;
        }
        if ((v283 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v285 = (unint64_t)v412 + 8;
LABEL_861:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v285 + 16, &v857);
          goto LABEL_151;
        }
        if (v283 == 3) {
          *((void *)v72 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v72 + 1) & 0x7F) == 2 || *((_DWORD *)v72 + 3))
      {
        uint64_t v284 = *((void *)v72 + 2);
        if ((v284 & 4) != 0)
        {
          unint64_t v285 = v284 & 0xFFFFFFFFFFFFFFF8;
          if (v285) {
            goto LABEL_861;
          }
        }
      }
LABEL_151:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v73 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v73];
        if (v73)
        {
          unint64_t v74 = this - 2;
          uint64_t v75 = -32 * v73;
          do
          {
            if (*(v74 - 2))
            {
              *(void *)void *v74 = *(v74 - 1);
              uint64_t v76 = (uint64_t)*(v74 - 1);
              if (v76) {
                *(void *)(v76 + 16) = *v74;
              }
            }
            v74 -= 4;
            v75 += 32;
          }
          while (v75);
        }
        goto LABEL_1597;
      }
      v329 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v329;
      uint64_t v330 = v11 & 0x7FFFFFF;
      if (v330)
      {
        uint64_t v331 = 32 * v330;
        do
        {
          int v332 = &v174[v331];
          if (*(void *)&v174[v331 - 32])
          {
            **((void **)v332 - 2) = *((void *)v332 - 3);
            uint64_t v333 = *((void *)v332 - 3);
            if (v333) {
              *(void *)(v333 + 16) = *((void *)v332 - 2);
            }
          }
          v331 -= 32;
        }
        while (v331);
      }
      goto LABEL_1689;
    case 0x37:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v845 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v845, v846);
      }
      v459 = this[6];
      if (!v459) {
        goto LABEL_974;
      }
      int v668 = *(unsigned __int8 *)v459;
      if ((v668 - 4) > 0x1E)
      {
        if ((v668 - 3) >= 0xFFFFFFFE) {
          v704 = this[6];
        }
        else {
          v704 = 0;
        }
        if ((v668 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v670 = (unint64_t)v704 + 8;
LABEL_1573:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v670 + 16, &v857);
          goto LABEL_974;
        }
        if (v668 == 3) {
          *((void *)v459 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v459 + 1) & 0x7F) == 2 || *((_DWORD *)v459 + 3))
      {
        uint64_t v669 = *((void *)v459 + 2);
        if ((v669 & 4) != 0)
        {
          unint64_t v670 = v669 & 0xFFFFFFFFFFFFFFF8;
          if (v670) {
            goto LABEL_1573;
          }
        }
      }
LABEL_974:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v460 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v460];
        if (v460)
        {
          int v461 = this - 2;
          uint64_t v462 = -32 * v460;
          do
          {
            if (*(v461 - 2))
            {
              *(void *)*int v461 = *(v461 - 1);
              uint64_t v463 = (uint64_t)*(v461 - 1);
              if (v463) {
                *(void *)(v463 + 16) = *v461;
              }
            }
            v461 -= 4;
            v462 += 32;
          }
          while (v462);
        }
        goto LABEL_1597;
      }
      unint64_t v687 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v687;
      uint64_t v688 = v11 & 0x7FFFFFF;
      if (v688)
      {
        uint64_t v689 = 32 * v688;
        do
        {
          uint64_t v690 = &v174[v689];
          if (*(void *)&v174[v689 - 32])
          {
            **((void **)v690 - 2) = *((void *)v690 - 3);
            uint64_t v691 = *((void *)v690 - 3);
            if (v691) {
              *(void *)(v691 + 16) = *((void *)v690 - 2);
            }
          }
          v689 -= 32;
        }
        while (v689);
      }
      goto LABEL_1689;
    case 0x38:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v758 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v758, v759);
      }
      uint64_t v67 = this[6];
      if (!v67) {
        goto LABEL_140;
      }
      int v279 = *(unsigned __int8 *)v67;
      if ((v279 - 4) > 0x1E)
      {
        if ((v279 - 3) >= 0xFFFFFFFE) {
          v411 = this[6];
        }
        else {
          v411 = 0;
        }
        if ((v279 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v281 = (unint64_t)v411 + 8;
LABEL_855:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v281 + 16, &v857);
          goto LABEL_140;
        }
        if (v279 == 3) {
          *((void *)v67 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v67 + 1) & 0x7F) == 2 || *((_DWORD *)v67 + 3))
      {
        uint64_t v280 = *((void *)v67 + 2);
        if ((v280 & 4) != 0)
        {
          unint64_t v281 = v280 & 0xFFFFFFFFFFFFFFF8;
          if (v281) {
            goto LABEL_855;
          }
        }
      }
LABEL_140:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v68 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v68];
        if (v68)
        {
          int v69 = this - 2;
          uint64_t v70 = -32 * v68;
          do
          {
            if (*(v69 - 2))
            {
              *(void *)uint64_t *v69 = *(v69 - 1);
              uint64_t v71 = (uint64_t)*(v69 - 1);
              if (v71) {
                *(void *)(v71 + 16) = *v69;
              }
            }
            v69 -= 4;
            v70 += 32;
          }
          while (v70);
        }
        goto LABEL_1597;
      }
      uint64_t v317 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v317;
      uint64_t v318 = v11 & 0x7FFFFFF;
      if (v318)
      {
        uint64_t v319 = 32 * v318;
        do
        {
          v320 = &v174[v319];
          if (*(void *)&v174[v319 - 32])
          {
            **((void **)v320 - 2) = *((void *)v320 - 3);
            uint64_t v321 = *((void *)v320 - 3);
            if (v321) {
              *(void *)(v321 + 16) = *((void *)v320 - 2);
            }
          }
          v319 -= 32;
        }
        while (v319);
      }
      goto LABEL_1689;
    case 0x39:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v808 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v808, v809);
      }
      int v181 = this[6];
      if (!v181) {
        goto LABEL_380;
      }
      int v511 = *(unsigned __int8 *)v181;
      if ((v511 - 4) > 0x1E)
      {
        if ((v511 - 3) >= 0xFFFFFFFE) {
          v608 = this[6];
        }
        else {
          v608 = 0;
        }
        if ((v511 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v513 = (unint64_t)v608 + 8;
LABEL_1304:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v513 + 16, &v857);
          goto LABEL_380;
        }
        if (v511 == 3) {
          *((void *)v181 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v181 + 1) & 0x7F) == 2 || *((_DWORD *)v181 + 3))
      {
        uint64_t v512 = *((void *)v181 + 2);
        if ((v512 & 4) != 0)
        {
          unint64_t v513 = v512 & 0xFFFFFFFFFFFFFFF8;
          if (v513) {
            goto LABEL_1304;
          }
        }
      }
LABEL_380:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v182 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v182];
        if (v182)
        {
          size_t v183 = this - 2;
          uint64_t v184 = -32 * v182;
          do
          {
            if (*(v183 - 2))
            {
              *(void *)*size_t v183 = *(v183 - 1);
              uint64_t v185 = (uint64_t)*(v183 - 1);
              if (v185) {
                *(void *)(v185 + 16) = *v183;
              }
            }
            v183 -= 4;
            v184 += 32;
          }
          while (v184);
        }
        goto LABEL_1597;
      }
      uint64_t v530 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v530;
      uint64_t v531 = v11 & 0x7FFFFFF;
      if (v531)
      {
        uint64_t v532 = 32 * v531;
        do
        {
          uint64_t v533 = &v174[v532];
          if (*(void *)&v174[v532 - 32])
          {
            **((void **)v533 - 2) = *((void *)v533 - 3);
            uint64_t v534 = *((void *)v533 - 3);
            if (v534) {
              *(void *)(v534 + 16) = *((void *)v533 - 2);
            }
          }
          v532 -= 32;
        }
        while (v532);
      }
      goto LABEL_1689;
    case 0x3A:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v828 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v828, v829);
      }
      __int32 v262 = this[6];
      if (!v262) {
        goto LABEL_538;
      }
      int v575 = *(unsigned __int8 *)v262;
      if ((v575 - 4) > 0x1E)
      {
        if ((v575 - 3) >= 0xFFFFFFFE) {
          uint64_t v649 = this[6];
        }
        else {
          uint64_t v649 = 0;
        }
        if ((v575 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v577 = (unint64_t)v649 + 8;
LABEL_1421:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v577 + 16, &v857);
          goto LABEL_538;
        }
        if (v575 == 3) {
          *((void *)v262 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v262 + 1) & 0x7F) == 2 || *((_DWORD *)v262 + 3))
      {
        uint64_t v576 = *((void *)v262 + 2);
        if ((v576 & 4) != 0)
        {
          unint64_t v577 = v576 & 0xFFFFFFFFFFFFFFF8;
          if (v577) {
            goto LABEL_1421;
          }
        }
      }
LABEL_538:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v263 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v263];
        if (v263)
        {
          uint64_t v264 = this - 2;
          uint64_t v265 = -32 * v263;
          do
          {
            if (*(v264 - 2))
            {
              *(void *)*uint64_t v264 = *(v264 - 1);
              uint64_t v266 = (uint64_t)*(v264 - 1);
              if (v266) {
                *(void *)(v266 + 16) = *v264;
              }
            }
            v264 -= 4;
            v265 += 32;
          }
          while (v265);
        }
        goto LABEL_1597;
      }
      unint64_t v591 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v591;
      uint64_t v592 = v11 & 0x7FFFFFF;
      if (v592)
      {
        uint64_t v593 = 32 * v592;
        do
        {
          uint64_t v594 = &v174[v593];
          if (*(void *)&v174[v593 - 32])
          {
            **((void **)v594 - 2) = *((void *)v594 - 3);
            uint64_t v595 = *((void *)v594 - 3);
            if (v595) {
              *(void *)(v595 + 16) = *((void *)v594 - 2);
            }
          }
          v593 -= 32;
        }
        while (v593);
      }
      goto LABEL_1689;
    case 0x3B:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v795 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v795, v796);
      }
      int v143 = this[6];
      if (!v143) {
        goto LABEL_306;
      }
      int v437 = *(unsigned __int8 *)v143;
      if ((v437 - 4) > 0x1E)
      {
        if ((v437 - 3) >= 0xFFFFFFFE) {
          uint64_t v581 = this[6];
        }
        else {
          uint64_t v581 = 0;
        }
        if ((v437 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v439 = (unint64_t)v581 + 8;
LABEL_1242:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v439 + 16, &v857);
          goto LABEL_306;
        }
        if (v437 == 3) {
          *((void *)v143 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v143 + 1) & 0x7F) == 2 || *((_DWORD *)v143 + 3))
      {
        uint64_t v438 = *((void *)v143 + 2);
        if ((v438 & 4) != 0)
        {
          unint64_t v439 = v438 & 0xFFFFFFFFFFFFFFF8;
          if (v439) {
            goto LABEL_1242;
          }
        }
      }
LABEL_306:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v144 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v144];
        if (v144)
        {
          unsigned int v145 = this - 2;
          uint64_t v146 = -32 * v144;
          do
          {
            if (*(v145 - 2))
            {
              *(void *)uint64_t *v145 = *(v145 - 1);
              uint64_t v147 = (uint64_t)*(v145 - 1);
              if (v147) {
                *(void *)(v147 + 16) = *v145;
              }
            }
            v145 -= 4;
            v146 += 32;
          }
          while (v146);
        }
        goto LABEL_1597;
      }
      uint64_t v489 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v489;
      uint64_t v490 = v11 & 0x7FFFFFF;
      if (v490)
      {
        uint64_t v491 = 32 * v490;
        do
        {
          v492 = &v174[v491];
          if (*(void *)&v174[v491 - 32])
          {
            **((void **)v492 - 2) = *((void *)v492 - 3);
            uint64_t v493 = *((void *)v492 - 3);
            if (v493) {
              *(void *)(v493 + 16) = *((void *)v492 - 2);
            }
          }
          v491 -= 32;
        }
        while (v491);
      }
      goto LABEL_1689;
    case 0x3C:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v721 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v721, v722);
      }
      int v10 = this[6];
      if (!v10) {
        goto LABEL_16;
      }
      int v168 = *(unsigned __int8 *)v10;
      if ((v168 - 4) > 0x1E)
      {
        if ((v168 - 3) >= 0xFFFFFFFE) {
          uint64_t v322 = this[6];
        }
        else {
          uint64_t v322 = 0;
        }
        if ((v168 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v170 = (unint64_t)v322 + 8;
LABEL_647:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v170 + 16, &v857);
          goto LABEL_16;
        }
        if (v168 == 3) {
          *((void *)v10 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v10 + 1) & 0x7F) == 2 || *((_DWORD *)v10 + 3))
      {
        uint64_t v169 = *((void *)v10 + 2);
        if ((v169 & 4) != 0)
        {
          unint64_t v170 = v169 & 0xFFFFFFFFFFFFFFF8;
          if (v170) {
            goto LABEL_647;
          }
        }
      }
LABEL_16:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v12 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v12];
        if (v12)
        {
          int v13 = this - 2;
          uint64_t v14 = -32 * v12;
          do
          {
            if (*(v13 - 2))
            {
              *(void *)*int v13 = *(v13 - 1);
              uint64_t v15 = (uint64_t)*(v13 - 1);
              if (v15) {
                *(void *)(v15 + 16) = *v13;
              }
            }
            v13 -= 4;
            v14 += 32;
          }
          while (v14);
        }
        goto LABEL_1597;
      }
      unsigned int v191 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v191;
      uint64_t v192 = v11 & 0x7FFFFFF;
      if (v192)
      {
        uint64_t v193 = 32 * v192;
        do
        {
          uint64_t v194 = &v174[v193];
          if (*(void *)&v174[v193 - 32])
          {
            **((void **)v194 - 2) = *((void *)v194 - 3);
            uint64_t v195 = *((void *)v194 - 3);
            if (v195) {
              *(void *)(v195 + 16) = *((void *)v194 - 2);
            }
          }
          v193 -= 32;
        }
        while (v193);
      }
      goto LABEL_1689;
    case 0x3D:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v756 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v756, v757);
      }
      unint64_t v62 = this[6];
      if (!v62) {
        goto LABEL_129;
      }
      int v276 = *(unsigned __int8 *)v62;
      if ((v276 - 4) > 0x1E)
      {
        if ((v276 - 3) >= 0xFFFFFFFE) {
          uint64_t v405 = this[6];
        }
        else {
          uint64_t v405 = 0;
        }
        if ((v276 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v278 = (unint64_t)v405 + 8;
LABEL_842:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v278 + 16, &v857);
          goto LABEL_129;
        }
        if (v276 == 3) {
          *((void *)v62 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v62 + 1) & 0x7F) == 2 || *((_DWORD *)v62 + 3))
      {
        uint64_t v277 = *((void *)v62 + 2);
        if ((v277 & 4) != 0)
        {
          unint64_t v278 = v277 & 0xFFFFFFFFFFFFFFF8;
          if (v278) {
            goto LABEL_842;
          }
        }
      }
LABEL_129:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v63 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v63];
        if (v63)
        {
          unsigned int v64 = this - 2;
          uint64_t v65 = -32 * v63;
          do
          {
            if (*(v64 - 2))
            {
              *(void *)*unsigned int v64 = *(v64 - 1);
              uint64_t v66 = (uint64_t)*(v64 - 1);
              if (v66) {
                *(void *)(v66 + 16) = *v64;
              }
            }
            v64 -= 4;
            v65 += 32;
          }
          while (v65);
        }
        goto LABEL_1597;
      }
      uint64_t v309 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v309;
      uint64_t v310 = v11 & 0x7FFFFFF;
      if (v310)
      {
        uint64_t v311 = 32 * v310;
        do
        {
          uint64_t v312 = &v174[v311];
          if (*(void *)&v174[v311 - 32])
          {
            **((void **)v312 - 2) = *((void *)v312 - 3);
            uint64_t v313 = *((void *)v312 - 3);
            if (v313) {
              *(void *)(v313 + 16) = *((void *)v312 - 2);
            }
          }
          v311 -= 32;
        }
        while (v311);
      }
      goto LABEL_1689;
    case 0x3E:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v737 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v737, v738);
      }
      uint64_t v32 = this[6];
      if (!v32) {
        goto LABEL_63;
      }
      int v218 = *(unsigned __int8 *)v32;
      if ((v218 - 4) > 0x1E)
      {
        if ((v218 - 3) >= 0xFFFFFFFE) {
          uint64_t v373 = this[6];
        }
        else {
          uint64_t v373 = 0;
        }
        if ((v218 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v220 = (unint64_t)v373 + 8;
LABEL_758:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v220 + 16, &v857);
          goto LABEL_63;
        }
        if (v218 == 3) {
          *((void *)v32 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v32 + 1) & 0x7F) == 2 || *((_DWORD *)v32 + 3))
      {
        uint64_t v219 = *((void *)v32 + 2);
        if ((v219 & 4) != 0)
        {
          unint64_t v220 = v219 & 0xFFFFFFFFFFFFFFF8;
          if (v220) {
            goto LABEL_758;
          }
        }
      }
LABEL_63:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v33 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v33];
        if (v33)
        {
          unsigned int v34 = this - 2;
          uint64_t v35 = -32 * v33;
          do
          {
            if (*(v34 - 2))
            {
              *(void *)unsigned __int8 *v34 = *(v34 - 1);
              uint64_t v36 = (uint64_t)*(v34 - 1);
              if (v36) {
                *(void *)(v36 + 16) = *v34;
              }
            }
            v34 -= 4;
            v35 += 32;
          }
          while (v35);
        }
        goto LABEL_1597;
      }
      uint64_t v244 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v244;
      uint64_t v245 = v11 & 0x7FFFFFF;
      if (v245)
      {
        uint64_t v246 = 32 * v245;
        do
        {
          int32x2_t v247 = &v174[v246];
          if (*(void *)&v174[v246 - 32])
          {
            **((void **)v247 - 2) = *((void *)v247 - 3);
            uint64_t v248 = *((void *)v247 - 3);
            if (v248) {
              *(void *)(v248 + 16) = *((void *)v247 - 2);
            }
          }
          v246 -= 32;
        }
        while (v246);
      }
      goto LABEL_1689;
    case 0x40:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v853 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v853, v854);
      }
      uint64_t v706 = this[6];
      if (!v706) {
        goto LABEL_1589;
      }
      int v779 = *(unsigned __int8 *)v706;
      if ((v779 - 4) > 0x1E)
      {
        if ((v779 - 3) >= 0xFFFFFFFE) {
          uint64_t v821 = this[6];
        }
        else {
          uint64_t v821 = 0;
        }
        if ((v779 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v781 = (unint64_t)v821 + 8;
LABEL_1695:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v781 + 16, &v857);
          goto LABEL_1589;
        }
        if (v779 == 3) {
          *((void *)v706 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v706 + 1) & 0x7F) == 2 || *((_DWORD *)v706 + 3))
      {
        uint64_t v780 = *((void *)v706 + 2);
        if ((v780 & 4) != 0)
        {
          unint64_t v781 = v780 & 0xFFFFFFFFFFFFFFF8;
          if (v781) {
            goto LABEL_1695;
          }
        }
      }
LABEL_1589:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v707 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v707];
        if (v707)
        {
          v708 = this - 2;
          uint64_t v709 = -32 * v707;
          do
          {
            if (*(v708 - 2))
            {
              *(void *)uint64_t *v708 = *(v708 - 1);
              uint64_t v710 = (uint64_t)*(v708 - 1);
              if (v710) {
                *(void *)(v710 + 16) = *v708;
              }
            }
            v708 -= 4;
            v709 += 32;
          }
          while (v709);
        }
        goto LABEL_1597;
      }
      v784 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v784;
      uint64_t v785 = v11 & 0x7FFFFFF;
      if (v785)
      {
        uint64_t v786 = 32 * v785;
        do
        {
          uint64_t v787 = &v174[v786];
          if (*(void *)&v174[v786 - 32])
          {
            **((void **)v787 - 2) = *((void *)v787 - 3);
            uint64_t v788 = *((void *)v787 - 3);
            if (v788) {
              *(void *)(v788 + 16) = *((void *)v787 - 2);
            }
          }
          v786 -= 32;
        }
        while (v786);
      }
      goto LABEL_1689;
    case 0x41:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        int v835 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v835, v836);
      }
      v368 = this[6];
      if (!v368) {
        goto LABEL_745;
      }
      int v620 = *(unsigned __int8 *)v368;
      if ((v620 - 4) > 0x1E)
      {
        if ((v620 - 3) >= 0xFFFFFFFE) {
          uint64_t v686 = this[6];
        }
        else {
          uint64_t v686 = 0;
        }
        if ((v620 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v622 = (unint64_t)v686 + 8;
LABEL_1515:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v622 + 16, &v857);
          goto LABEL_745;
        }
        if (v620 == 3) {
          *((void *)v368 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v368 + 1) & 0x7F) == 2 || *((_DWORD *)v368 + 3))
      {
        uint64_t v621 = *((void *)v368 + 2);
        if ((v621 & 4) != 0)
        {
          unint64_t v622 = v621 & 0xFFFFFFFFFFFFFFF8;
          if (v622) {
            goto LABEL_1515;
          }
        }
      }
LABEL_745:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v369 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v369];
        if (v369)
        {
          uint64_t v370 = this - 2;
          uint64_t v371 = -32 * v369;
          do
          {
            if (*(v370 - 2))
            {
              *(void *)*uint64_t v370 = *(v370 - 1);
              uint64_t v372 = (uint64_t)*(v370 - 1);
              if (v372) {
                *(void *)(v372 + 16) = *v370;
              }
            }
            v370 -= 4;
            v371 += 32;
          }
          while (v371);
        }
        goto LABEL_1597;
      }
      uint64_t v638 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v638;
      uint64_t v639 = v11 & 0x7FFFFFF;
      if (v639)
      {
        uint64_t v640 = 32 * v639;
        do
        {
          v641 = &v174[v640];
          if (*(void *)&v174[v640 - 32])
          {
            **((void **)v641 - 2) = *((void *)v641 - 3);
            uint64_t v642 = *((void *)v641 - 3);
            if (v642) {
              *(void *)(v642 + 16) = *((void *)v641 - 2);
            }
          }
          v640 -= 32;
        }
        while (v640);
      }
      goto LABEL_1689;
    case 0x42:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v762 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v762, v763);
      }
      uint64_t v77 = this[6];
      if (!v77) {
        goto LABEL_162;
      }
      int v286 = *(unsigned __int8 *)v77;
      if ((v286 - 4) > 0x1E)
      {
        if ((v286 - 3) >= 0xFFFFFFFE) {
          int v413 = this[6];
        }
        else {
          int v413 = 0;
        }
        if ((v286 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v288 = (unint64_t)v413 + 8;
LABEL_869:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v288 + 16, &v857);
          goto LABEL_162;
        }
        if (v286 == 3) {
          *((void *)v77 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v77 + 1) & 0x7F) == 2 || *((_DWORD *)v77 + 3))
      {
        uint64_t v287 = *((void *)v77 + 2);
        if ((v287 & 4) != 0)
        {
          unint64_t v288 = v287 & 0xFFFFFFFFFFFFFFF8;
          if (v288) {
            goto LABEL_869;
          }
        }
      }
LABEL_162:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v78 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v78];
        if (v78)
        {
          uint64_t v79 = this - 2;
          uint64_t v80 = -32 * v78;
          do
          {
            if (*(v79 - 2))
            {
              *(void *)std::string *v79 = *(v79 - 1);
              uint64_t v81 = (uint64_t)*(v79 - 1);
              if (v81) {
                *(void *)(v81 + 16) = *v79;
              }
            }
            v79 -= 4;
            v80 += 32;
          }
          while (v80);
        }
        goto LABEL_1597;
      }
      uint64_t v337 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v337;
      uint64_t v338 = v11 & 0x7FFFFFF;
      if (v338)
      {
        uint64_t v339 = 32 * v338;
        do
        {
          uint64_t v340 = &v174[v339];
          if (*(void *)&v174[v339 - 32])
          {
            **((void **)v340 - 2) = *((void *)v340 - 3);
            uint64_t v341 = *((void *)v340 - 3);
            if (v341) {
              *(void *)(v341 + 16) = *((void *)v340 - 2);
            }
          }
          v339 -= 32;
        }
        while (v339);
      }
      goto LABEL_1689;
    case 0x43:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        int v775 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v775, v776);
      }
      uint64_t v108 = this[6];
      if (!v108) {
        goto LABEL_230;
      }
      int v385 = *(unsigned __int8 *)v108;
      if ((v385 - 4) > 0x1E)
      {
        if ((v385 - 3) >= 0xFFFFFFFE) {
          v522 = this[6];
        }
        else {
          v522 = 0;
        }
        if ((v385 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v387 = (unint64_t)v522 + 8;
LABEL_1107:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v387 + 16, &v857);
          goto LABEL_230;
        }
        if (v385 == 3) {
          *((void *)v108 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v108 + 1) & 0x7F) == 2 || *((_DWORD *)v108 + 3))
      {
        uint64_t v386 = *((void *)v108 + 2);
        if ((v386 & 4) != 0)
        {
          unint64_t v387 = v386 & 0xFFFFFFFFFFFFFFF8;
          if (v387) {
            goto LABEL_1107;
          }
        }
      }
LABEL_230:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v109 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v109];
        if (v109)
        {
          uint64_t v110 = this - 2;
          uint64_t v111 = -32 * v109;
          do
          {
            if (*(v110 - 2))
            {
              *(void *)llvm::Value *v110 = *(v110 - 1);
              uint64_t v112 = (uint64_t)*(v110 - 1);
              if (v112) {
                *(void *)(v112 + 16) = *v110;
              }
            }
            v110 -= 4;
            v111 += 32;
          }
          while (v111);
        }
        goto LABEL_1597;
      }
      v406 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v406;
      uint64_t v407 = v11 & 0x7FFFFFF;
      if (v407)
      {
        uint64_t v408 = 32 * v407;
        do
        {
          uint64_t v409 = &v174[v408];
          if (*(void *)&v174[v408 - 32])
          {
            **((void **)v409 - 2) = *((void *)v409 - 3);
            uint64_t v410 = *((void *)v409 - 3);
            if (v410) {
              *(void *)(v410 + 16) = *((void *)v409 - 2);
            }
          }
          v408 -= 32;
        }
        while (v408);
      }
      goto LABEL_1689;
    case 0x44:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v799 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v799, v800);
      }
      int v153 = this[6];
      if (!v153) {
        goto LABEL_328;
      }
      int v464 = *(unsigned __int8 *)v153;
      if ((v464 - 4) > 0x1E)
      {
        if ((v464 - 3) >= 0xFFFFFFFE) {
          int v589 = this[6];
        }
        else {
          int v589 = 0;
        }
        if ((v464 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v466 = (unint64_t)v589 + 8;
LABEL_1263:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v466 + 16, &v857);
          goto LABEL_328;
        }
        if (v464 == 3) {
          *((void *)v153 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v153 + 1) & 0x7F) == 2 || *((_DWORD *)v153 + 3))
      {
        uint64_t v465 = *((void *)v153 + 2);
        if ((v465 & 4) != 0)
        {
          unint64_t v466 = v465 & 0xFFFFFFFFFFFFFFF8;
          if (v466) {
            goto LABEL_1263;
          }
        }
      }
LABEL_328:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v154 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v154];
        if (v154)
        {
          int v155 = this - 2;
          uint64_t v156 = -32 * v154;
          do
          {
            if (*(v155 - 2))
            {
              *(void *)*int v155 = *(v155 - 1);
              uint64_t v157 = (uint64_t)*(v155 - 1);
              if (v157) {
                *(void *)(v157 + 16) = *v155;
              }
            }
            v155 -= 4;
            v156 += 32;
          }
          while (v156);
        }
        goto LABEL_1597;
      }
      uint64_t v501 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v501;
      uint64_t v502 = v11 & 0x7FFFFFF;
      if (v502)
      {
        uint64_t v503 = 32 * v502;
        do
        {
          uint64_t v504 = &v174[v503];
          if (*(void *)&v174[v503 - 32])
          {
            **((void **)v504 - 2) = *((void *)v504 - 3);
            uint64_t v505 = *((void *)v504 - 3);
            if (v505) {
              *(void *)(v505 + 16) = *((void *)v504 - 2);
            }
          }
          v503 -= 32;
        }
        while (v503);
      }
      goto LABEL_1689;
    case 0x45:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v833 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v833, v834);
      }
      v342 = this[6];
      if (!v342) {
        goto LABEL_688;
      }
      int v609 = *(unsigned __int8 *)v342;
      if ((v609 - 4) > 0x1E)
      {
        if ((v609 - 3) >= 0xFFFFFFFE) {
          v662 = this[6];
        }
        else {
          v662 = 0;
        }
        if ((v609 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v611 = (unint64_t)v662 + 8;
LABEL_1467:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v611 + 16, &v857);
          goto LABEL_688;
        }
        if (v609 == 3) {
          *((void *)v342 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v342 + 1) & 0x7F) == 2 || *((_DWORD *)v342 + 3))
      {
        uint64_t v610 = *((void *)v342 + 2);
        if ((v610 & 4) != 0)
        {
          unint64_t v611 = v610 & 0xFFFFFFFFFFFFFFF8;
          if (v611) {
            goto LABEL_1467;
          }
        }
      }
LABEL_688:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v343 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v343];
        if (v343)
        {
          uint64_t v344 = this - 2;
          uint64_t v345 = -32 * v343;
          do
          {
            if (*(v344 - 2))
            {
              *(void *)*uint64_t v344 = *(v344 - 1);
              uint64_t v346 = (uint64_t)*(v344 - 1);
              if (v346) {
                *(void *)(v346 + 16) = *v344;
              }
            }
            v344 -= 4;
            v345 += 32;
          }
          while (v345);
        }
        goto LABEL_1597;
      }
      v624 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v624;
      uint64_t v625 = v11 & 0x7FFFFFF;
      if (v625)
      {
        uint64_t v626 = 32 * v625;
        do
        {
          uint64_t v627 = &v174[v626];
          if (*(void *)&v174[v626 - 32])
          {
            **((void **)v627 - 2) = *((void *)v627 - 3);
            uint64_t v628 = *((void *)v627 - 3);
            if (v628) {
              *(void *)(v628 + 16) = *((void *)v627 - 2);
            }
          }
          v626 -= 32;
        }
        while (v626);
      }
      goto LABEL_1689;
    case 0x46:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v837 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v837, v838);
      }
      v375 = this[6];
      if (!v375) {
        goto LABEL_768;
      }
      int v630 = *(unsigned __int8 *)v375;
      if ((v630 - 4) > 0x1E)
      {
        if ((v630 - 3) >= 0xFFFFFFFE) {
          v692 = this[6];
        }
        else {
          v692 = 0;
        }
        if ((v630 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v632 = (unint64_t)v692 + 8;
LABEL_1528:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v632 + 16, &v857);
          goto LABEL_768;
        }
        if (v630 == 3) {
          *((void *)v375 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v375 + 1) & 0x7F) == 2 || *((_DWORD *)v375 + 3))
      {
        uint64_t v631 = *((void *)v375 + 2);
        if ((v631 & 4) != 0)
        {
          unint64_t v632 = v631 & 0xFFFFFFFFFFFFFFF8;
          if (v632) {
            goto LABEL_1528;
          }
        }
      }
LABEL_768:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v376 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v376];
        if (v376)
        {
          uint64_t v377 = this - 2;
          uint64_t v378 = -32 * v376;
          do
          {
            if (*(v377 - 2))
            {
              *(void *)*uint64_t v377 = *(v377 - 1);
              uint64_t v379 = (uint64_t)*(v377 - 1);
              if (v379) {
                *(void *)(v379 + 16) = *v377;
              }
            }
            v377 -= 4;
            v378 += 32;
          }
          while (v378);
        }
        goto LABEL_1597;
      }
      v644 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v644;
      uint64_t v645 = v11 & 0x7FFFFFF;
      if (v645)
      {
        uint64_t v646 = 32 * v645;
        do
        {
          v647 = &v174[v646];
          if (*(void *)&v174[v646 - 32])
          {
            **((void **)v647 - 2) = *((void *)v647 - 3);
            uint64_t v648 = *((void *)v647 - 3);
            if (v648) {
              *(void *)(v648 + 16) = *((void *)v647 - 2);
            }
          }
          v646 -= 32;
        }
        while (v646);
      }
      goto LABEL_1689;
    case 0x47:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v826 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v826, v827);
      }
      uint64_t v249 = this[6];
      if (!v249) {
        goto LABEL_514;
      }
      int v562 = *(unsigned __int8 *)v249;
      if ((v562 - 4) > 0x1E)
      {
        if ((v562 - 3) >= 0xFFFFFFFE) {
          uint64_t v643 = this[6];
        }
        else {
          uint64_t v643 = 0;
        }
        if ((v562 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v564 = (unint64_t)v643 + 8;
LABEL_1408:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v564 + 16, &v857);
          goto LABEL_514;
        }
        if (v562 == 3) {
          *((void *)v249 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v249 + 1) & 0x7F) == 2 || *((_DWORD *)v249 + 3))
      {
        uint64_t v563 = *((void *)v249 + 2);
        if ((v563 & 4) != 0)
        {
          unint64_t v564 = v563 & 0xFFFFFFFFFFFFFFF8;
          if (v564) {
            goto LABEL_1408;
          }
        }
      }
LABEL_514:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v250 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v250];
        if (v250)
        {
          uint64_t v251 = this - 2;
          uint64_t v252 = -32 * v250;
          do
          {
            if (*(v251 - 2))
            {
              *(void *)unsigned __int8 *v251 = *(v251 - 1);
              uint64_t v253 = (uint64_t)*(v251 - 1);
              if (v253) {
                *(void *)(v253 + 16) = *v251;
              }
            }
            v251 -= 4;
            v252 += 32;
          }
          while (v252);
        }
        goto LABEL_1597;
      }
      v583 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v583;
      uint64_t v584 = v11 & 0x7FFFFFF;
      if (v584)
      {
        uint64_t v585 = 32 * v584;
        do
        {
          v586 = &v174[v585];
          if (*(void *)&v174[v585 - 32])
          {
            **((void **)v586 - 2) = *((void *)v586 - 3);
            uint64_t v587 = *((void *)v586 - 3);
            if (v587) {
              *(void *)(v587 + 16) = *((void *)v586 - 2);
            }
          }
          v585 -= 32;
        }
        while (v585);
      }
      goto LABEL_1689;
    case 0x48:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        int v830 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v830, v831);
      }
      uint64_t v324 = this[6];
      if (!v324) {
        goto LABEL_657;
      }
      int v605 = *(unsigned __int8 *)v324;
      if ((v605 - 4) > 0x1E)
      {
        if ((v605 - 3) >= 0xFFFFFFFE) {
          unint64_t v655 = this[6];
        }
        else {
          unint64_t v655 = 0;
        }
        if ((v605 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v607 = (unint64_t)v655 + 8;
LABEL_1447:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v607 + 16, &v857);
          goto LABEL_657;
        }
        if (v605 == 3) {
          *((void *)v324 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v324 + 1) & 0x7F) == 2 || *((_DWORD *)v324 + 3))
      {
        uint64_t v606 = *((void *)v324 + 2);
        if ((v606 & 4) != 0)
        {
          unint64_t v607 = v606 & 0xFFFFFFFFFFFFFFF8;
          if (v607) {
            goto LABEL_1447;
          }
        }
      }
LABEL_657:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v325 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v325];
        if (v325)
        {
          int v326 = this - 2;
          uint64_t v327 = -32 * v325;
          do
          {
            if (*(v326 - 2))
            {
              *(void *)uint64_t *v326 = *(v326 - 1);
              uint64_t v328 = (uint64_t)*(v326 - 1);
              if (v328) {
                *(void *)(v328 + 16) = *v326;
              }
            }
            v326 -= 4;
            v327 += 32;
          }
          while (v327);
        }
        goto LABEL_1597;
      }
      uint64_t v613 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v613;
      uint64_t v614 = v11 & 0x7FFFFFF;
      if (v614)
      {
        uint64_t v615 = 32 * v614;
        do
        {
          uint64_t v616 = &v174[v615];
          if (*(void *)&v174[v615 - 32])
          {
            **((void **)v616 - 2) = *((void *)v616 - 3);
            uint64_t v617 = *((void *)v616 - 3);
            if (v617) {
              *(void *)(v617 + 16) = *((void *)v616 - 2);
            }
          }
          v615 -= 32;
        }
        while (v615);
      }
      goto LABEL_1689;
    case 0x49:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v797 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v797, v798);
      }
      int v148 = this[6];
      if (!v148) {
        goto LABEL_317;
      }
      int v456 = *(unsigned __int8 *)v148;
      if ((v456 - 4) > 0x1E)
      {
        if ((v456 - 3) >= 0xFFFFFFFE) {
          v588 = this[6];
        }
        else {
          v588 = 0;
        }
        if ((v456 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v458 = (unint64_t)v588 + 8;
LABEL_1257:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v458 + 16, &v857);
          goto LABEL_317;
        }
        if (v456 == 3) {
          *((void *)v148 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v148 + 1) & 0x7F) == 2 || *((_DWORD *)v148 + 3))
      {
        uint64_t v457 = *((void *)v148 + 2);
        if ((v457 & 4) != 0)
        {
          unint64_t v458 = v457 & 0xFFFFFFFFFFFFFFF8;
          if (v458) {
            goto LABEL_1257;
          }
        }
      }
LABEL_317:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v149 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v149];
        if (v149)
        {
          int v150 = this - 2;
          uint64_t v151 = -32 * v149;
          do
          {
            if (*(v150 - 2))
            {
              *(void *)*int v150 = *(v150 - 1);
              uint64_t v152 = (uint64_t)*(v150 - 1);
              if (v152) {
                *(void *)(v152 + 16) = *v150;
              }
            }
            v150 -= 4;
            v151 += 32;
          }
          while (v151);
        }
        goto LABEL_1597;
      }
      v496 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v496;
      uint64_t v497 = v11 & 0x7FFFFFF;
      if (v497)
      {
        uint64_t v498 = 32 * v497;
        do
        {
          uint64_t v499 = &v174[v498];
          if (*(void *)&v174[v498 - 32])
          {
            **((void **)v499 - 2) = *((void *)v499 - 3);
            uint64_t v500 = *((void *)v499 - 3);
            if (v500) {
              *(void *)(v500 + 16) = *((void *)v499 - 2);
            }
          }
          v498 -= 32;
        }
        while (v498);
      }
      goto LABEL_1689;
    case 0x4A:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v822 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v822, v823);
      }
      uint64_t v224 = this[6];
      if (!v224) {
        goto LABEL_471;
      }
      int v535 = *(unsigned __int8 *)v224;
      if ((v535 - 4) > 0x1E)
      {
        if ((v535 - 3) >= 0xFFFFFFFE) {
          unint64_t v623 = this[6];
        }
        else {
          unint64_t v623 = 0;
        }
        if ((v535 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v537 = (unint64_t)v623 + 8;
LABEL_1357:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v537 + 16, &v857);
          goto LABEL_471;
        }
        if (v535 == 3) {
          *((void *)v224 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v224 + 1) & 0x7F) == 2 || *((_DWORD *)v224 + 3))
      {
        uint64_t v536 = *((void *)v224 + 2);
        if ((v536 & 4) != 0)
        {
          unint64_t v537 = v536 & 0xFFFFFFFFFFFFFFF8;
          if (v537) {
            goto LABEL_1357;
          }
        }
      }
LABEL_471:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v225 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v225];
        if (v225)
        {
          uint64_t v226 = this - 2;
          uint64_t v227 = -32 * v225;
          do
          {
            if (*(v226 - 2))
            {
              *(void *)void *v226 = *(v226 - 1);
              uint64_t v228 = (uint64_t)*(v226 - 1);
              if (v228) {
                *(void *)(v228 + 16) = *v226;
              }
            }
            v226 -= 4;
            v227 += 32;
          }
          while (v227);
        }
        goto LABEL_1597;
      }
      uint64_t v565 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v565;
      uint64_t v566 = v11 & 0x7FFFFFF;
      if (v566)
      {
        uint64_t v567 = 32 * v566;
        do
        {
          uint64_t v568 = &v174[v567];
          if (*(void *)&v174[v567 - 32])
          {
            **((void **)v568 - 2) = *((void *)v568 - 3);
            uint64_t v569 = *((void *)v568 - 3);
            if (v569) {
              *(void *)(v569 + 16) = *((void *)v568 - 2);
            }
          }
          v567 -= 32;
        }
        while (v567);
      }
      goto LABEL_1689;
    case 0x4B:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v789 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v789, v790);
      }
      uint64_t v125 = this[6];
      if (!v125) {
        goto LABEL_267;
      }
      int v428 = *(unsigned __int8 *)v125;
      if ((v428 - 4) > 0x1E)
      {
        if ((v428 - 3) >= 0xFFFFFFFE) {
          uint64_t v578 = this[6];
        }
        else {
          uint64_t v578 = 0;
        }
        if ((v428 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v430 = (unint64_t)v578 + 8;
LABEL_1224:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v430 + 16, &v857);
          goto LABEL_267;
        }
        if (v428 == 3) {
          *((void *)v125 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v125 + 1) & 0x7F) == 2 || *((_DWORD *)v125 + 3))
      {
        uint64_t v429 = *((void *)v125 + 2);
        if ((v429 & 4) != 0)
        {
          unint64_t v430 = v429 & 0xFFFFFFFFFFFFFFF8;
          if (v430) {
            goto LABEL_1224;
          }
        }
      }
LABEL_267:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v126 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v126];
        if (v126)
        {
          int v127 = this - 2;
          uint64_t v128 = -32 * v126;
          do
          {
            if (*(v127 - 2))
            {
              *(void *)*int v127 = *(v127 - 1);
              uint64_t v129 = (uint64_t)*(v127 - 1);
              if (v129) {
                *(void *)(v129 + 16) = *v127;
              }
            }
            v127 -= 4;
            v128 += 32;
          }
          while (v128);
        }
        goto LABEL_1597;
      }
      v474 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v474;
      uint64_t v475 = v11 & 0x7FFFFFF;
      if (v475)
      {
        uint64_t v476 = 32 * v475;
        do
        {
          int v477 = &v174[v476];
          if (*(void *)&v174[v476 - 32])
          {
            **((void **)v477 - 2) = *((void *)v477 - 3);
            uint64_t v478 = *((void *)v477 - 3);
            if (v478) {
              *(void *)(v478 + 16) = *((void *)v477 - 2);
            }
          }
          v476 -= 32;
        }
        while (v476);
      }
      goto LABEL_1689;
    case 0x4C:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v801 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v801, v802);
      }
      int v158 = this[6];
      if (!v158) {
        goto LABEL_339;
      }
      int v467 = *(unsigned __int8 *)v158;
      if ((v467 - 4) > 0x1E)
      {
        if ((v467 - 3) >= 0xFFFFFFFE) {
          uint64_t v590 = this[6];
        }
        else {
          uint64_t v590 = 0;
        }
        if ((v467 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v469 = (unint64_t)v590 + 8;
LABEL_1269:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v469 + 16, &v857);
          goto LABEL_339;
        }
        if (v467 == 3) {
          *((void *)v158 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v158 + 1) & 0x7F) == 2 || *((_DWORD *)v158 + 3))
      {
        uint64_t v468 = *((void *)v158 + 2);
        if ((v468 & 4) != 0)
        {
          unint64_t v469 = v468 & 0xFFFFFFFFFFFFFFF8;
          if (v469) {
            goto LABEL_1269;
          }
        }
      }
LABEL_339:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v159 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v159];
        if (v159)
        {
          int v160 = this - 2;
          uint64_t v161 = -32 * v159;
          do
          {
            if (*(v160 - 2))
            {
              *(void *)void *v160 = *(v160 - 1);
              uint64_t v162 = (uint64_t)*(v160 - 1);
              if (v162) {
                *(void *)(v162 + 16) = *v160;
              }
            }
            v160 -= 4;
            v161 += 32;
          }
          while (v161);
        }
        goto LABEL_1597;
      }
      v506 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v506;
      uint64_t v507 = v11 & 0x7FFFFFF;
      if (v507)
      {
        uint64_t v508 = 32 * v507;
        do
        {
          int v509 = &v174[v508];
          if (*(void *)&v174[v508 - 32])
          {
            **((void **)v509 - 2) = *((void *)v509 - 3);
            uint64_t v510 = *((void *)v509 - 3);
            if (v510) {
              *(void *)(v510 + 16) = *((void *)v509 - 2);
            }
          }
          v508 -= 32;
        }
        while (v508);
      }
      goto LABEL_1689;
    case 0x4D:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v739 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v739, v740);
      }
      unint64_t v37 = this[6];
      if (!v37) {
        goto LABEL_74;
      }
      int v221 = *(unsigned __int8 *)v37;
      if ((v221 - 4) > 0x1E)
      {
        if ((v221 - 3) >= 0xFFFFFFFE) {
          v374 = this[6];
        }
        else {
          v374 = 0;
        }
        if ((v221 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v223 = (unint64_t)v374 + 8;
LABEL_764:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v223 + 16, &v857);
          goto LABEL_74;
        }
        if (v221 == 3) {
          *((void *)v37 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v37 + 1) & 0x7F) == 2 || *((_DWORD *)v37 + 3))
      {
        uint64_t v222 = *((void *)v37 + 2);
        if ((v222 & 4) != 0)
        {
          unint64_t v223 = v222 & 0xFFFFFFFFFFFFFFF8;
          if (v223) {
            goto LABEL_764;
          }
        }
      }
LABEL_74:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v38 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v38];
        if (v38)
        {
          unint64_t v39 = this - 2;
          uint64_t v40 = -32 * v38;
          do
          {
            if (*(v39 - 2))
            {
              *(void *)uint64_t *v39 = *(v39 - 1);
              uint64_t v41 = (uint64_t)*(v39 - 1);
              if (v41) {
                *(void *)(v41 + 16) = *v39;
              }
            }
            v39 -= 4;
            v40 += 32;
          }
          while (v40);
        }
        goto LABEL_1597;
      }
      uint64_t v254 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v254;
      uint64_t v255 = v11 & 0x7FFFFFF;
      if (v255)
      {
        uint64_t v256 = 32 * v255;
        do
        {
          uint64_t v257 = &v174[v256];
          if (*(void *)&v174[v256 - 32])
          {
            **((void **)v257 - 2) = *((void *)v257 - 3);
            uint64_t v258 = *((void *)v257 - 3);
            if (v258) {
              *(void *)(v258 + 16) = *((void *)v257 - 2);
            }
          }
          v256 -= 32;
        }
        while (v256);
      }
      goto LABEL_1689;
    case 0x4E:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v847 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v847, v848);
      }
      unint64_t v543 = this[6];
      if (!v543) {
        goto LABEL_1153;
      }
      int v693 = *(unsigned __int8 *)v543;
      if ((v693 - 4) > 0x1E)
      {
        if ((v693 - 3) >= 0xFFFFFFFE) {
          v705 = this[6];
        }
        else {
          v705 = 0;
        }
        if ((v693 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v695 = (unint64_t)v705 + 8;
LABEL_1585:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v695 + 16, &v857);
          goto LABEL_1153;
        }
        if (v693 == 3) {
          *((void *)v543 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v543 + 1) & 0x7F) == 2 || *((_DWORD *)v543 + 3))
      {
        uint64_t v694 = *((void *)v543 + 2);
        if ((v694 & 4) != 0)
        {
          unint64_t v695 = v694 & 0xFFFFFFFFFFFFFFF8;
          if (v695) {
            goto LABEL_1585;
          }
        }
      }
LABEL_1153:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v544 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v544];
        if (v544)
        {
          v545 = this - 2;
          uint64_t v546 = -32 * v544;
          do
          {
            if (*(v545 - 2))
            {
              *(void *)uint64_t *v545 = *(v545 - 1);
              uint64_t v547 = (uint64_t)*(v545 - 1);
              if (v547) {
                *(void *)(v547 + 16) = *v545;
              }
            }
            v545 -= 4;
            v546 += 32;
          }
          while (v546);
        }
        goto LABEL_1597;
      }
      uint64_t v697 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v697;
      uint64_t v698 = v11 & 0x7FFFFFF;
      if (v698)
      {
        uint64_t v699 = 32 * v698;
        do
        {
          v700 = &v174[v699];
          if (*(void *)&v174[v699 - 32])
          {
            **((void **)v700 - 2) = *((void *)v700 - 3);
            uint64_t v701 = *((void *)v700 - 3);
            if (v701) {
              *(void *)(v701 + 16) = *((void *)v700 - 2);
            }
          }
          v699 -= 32;
        }
        while (v699);
      }
      goto LABEL_1689;
    case 0x51:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v748 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v748, v749);
      }
      uint64_t v42 = this[6];
      if (!v42) {
        goto LABEL_85;
      }
      int v259 = *(unsigned __int8 *)v42;
      if ((v259 - 4) > 0x1E)
      {
        if ((v259 - 3) >= 0xFFFFFFFE) {
          uint64_t v398 = this[6];
        }
        else {
          uint64_t v398 = 0;
        }
        if ((v259 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v261 = (unint64_t)v398 + 8;
LABEL_812:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v261 + 16, &v857);
          goto LABEL_85;
        }
        if (v259 == 3) {
          *((void *)v42 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v42 + 1) & 0x7F) == 2 || *((_DWORD *)v42 + 3))
      {
        uint64_t v260 = *((void *)v42 + 2);
        if ((v260 & 4) != 0)
        {
          unint64_t v261 = v260 & 0xFFFFFFFFFFFFFFF8;
          if (v261) {
            goto LABEL_812;
          }
        }
      }
LABEL_85:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v43 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v43];
        if (v43)
        {
          uint64_t v44 = this - 2;
          uint64_t v45 = -32 * v43;
          do
          {
            if (*(v44 - 2))
            {
              *(void *)llvm::PointerType *v44 = *(v44 - 1);
              uint64_t v46 = (uint64_t)*(v44 - 1);
              if (v46) {
                *(void *)(v46 + 16) = *v44;
              }
            }
            v44 -= 4;
            v45 += 32;
          }
          while (v45);
        }
        goto LABEL_1597;
      }
      uint64_t v289 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v289;
      uint64_t v290 = v11 & 0x7FFFFFF;
      if (v290)
      {
        uint64_t v291 = 32 * v290;
        do
        {
          uint64_t v292 = &v174[v291];
          if (*(void *)&v174[v291 - 32])
          {
            **((void **)v292 - 2) = *((void *)v292 - 3);
            uint64_t v293 = *((void *)v292 - 3);
            if (v293) {
              *(void *)(v293 + 16) = *((void *)v292 - 2);
            }
          }
          v291 -= 32;
        }
        while (v291);
      }
      goto LABEL_1689;
    case 0x52:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v793 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v793, v794);
      }
      std::string::size_type v135 = this[6];
      if (!v135) {
        goto LABEL_289;
      }
      int v434 = *(unsigned __int8 *)v135;
      if ((v434 - 4) > 0x1E)
      {
        if ((v434 - 3) >= 0xFFFFFFFE) {
          v580 = this[6];
        }
        else {
          v580 = 0;
        }
        if ((v434 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v436 = (unint64_t)v580 + 8;
LABEL_1236:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v436 + 16, &v857);
          goto LABEL_289;
        }
        if (v434 == 3) {
          *((void *)v135 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v135 + 1) & 0x7F) == 2 || *((_DWORD *)v135 + 3))
      {
        uint64_t v435 = *((void *)v135 + 2);
        if ((v435 & 4) != 0)
        {
          unint64_t v436 = v435 & 0xFFFFFFFFFFFFFFF8;
          if (v436) {
            goto LABEL_1236;
          }
        }
      }
LABEL_289:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) == 0)
      {
        uint64_t v136 = v11 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v136];
        if (v136)
        {
          unsigned int v137 = this - 2;
          uint64_t v138 = -32 * v136;
          do
          {
            if (*(v137 - 2))
            {
              *(void *)unsigned char *v137 = *(v137 - 1);
              uint64_t v139 = (uint64_t)*(v137 - 1);
              if (v139) {
                *(void *)(v139 + 16) = *v137;
              }
            }
            v137 -= 4;
            v138 += 32;
          }
          while (v138);
        }
        goto LABEL_1597;
      }
      v484 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v484;
      uint64_t v485 = v11 & 0x7FFFFFF;
      if (v485)
      {
        uint64_t v486 = 32 * v485;
        do
        {
          v487 = &v174[v486];
          if (*(void *)&v174[v486 - 32])
          {
            **((void **)v487 - 2) = *((void *)v487 - 3);
            uint64_t v488 = *((void *)v487 - 3);
            if (v488) {
              *(void *)(v488 + 16) = *((void *)v487 - 2);
            }
          }
          v486 -= 32;
        }
        while (v486);
      }
      goto LABEL_1689;
    case 0x53:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v750 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v750, v751);
      }
      unint64_t v47 = this[6];
      if (!v47) {
        goto LABEL_96;
      }
      int v267 = *(unsigned __int8 *)v47;
      if ((v267 - 4) > 0x1E)
      {
        if ((v267 - 3) >= 0xFFFFFFFE) {
          uint64_t v402 = this[6];
        }
        else {
          uint64_t v402 = 0;
        }
        if ((v267 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v269 = (unint64_t)v402 + 8;
LABEL_824:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v269 + 16, &v857);
          goto LABEL_96;
        }
        if (v267 == 3) {
          *((void *)v47 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v47 + 1) & 0x7F) == 2 || *((_DWORD *)v47 + 3))
      {
        uint64_t v268 = *((void *)v47 + 2);
        if ((v268 & 4) != 0)
        {
          unint64_t v269 = v268 & 0xFFFFFFFFFFFFFFF8;
          if (v269) {
            goto LABEL_824;
          }
        }
      }
LABEL_96:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v11 = *((_DWORD *)this + 5);
      if ((v11 & 0x40000000) != 0)
      {
        uint64_t v294 = (char *)*(this - 1);
        uint64_t v175 = (char *)(this - 1);
        unint64_t v174 = v294;
        uint64_t v295 = v11 & 0x7FFFFFF;
        if (v295)
        {
          uint64_t v296 = 32 * v295;
          do
          {
            __int32 v297 = &v174[v296];
            if (*(void *)&v174[v296 - 32])
            {
              **((void **)v297 - 2) = *((void *)v297 - 3);
              uint64_t v298 = *((void *)v297 - 3);
              if (v298) {
                *(void *)(v298 + 16) = *((void *)v297 - 2);
              }
            }
            v296 -= 32;
          }
          while (v296);
        }
        goto LABEL_1689;
      }
      uint64_t v48 = v11 & 0x7FFFFFF;
      unsigned int v6 = (char *)&this[-4 * v48];
      if (v48)
      {
        unsigned int v49 = this - 2;
        uint64_t v50 = -32 * v48;
        do
        {
          if (*(v49 - 2))
          {
            *(void *)*unsigned int v49 = *(v49 - 1);
            uint64_t v51 = (uint64_t)*(v49 - 1);
            if (v51) {
              *(void *)(v51 + 16) = *v49;
            }
          }
          v49 -= 4;
          v50 += 32;
        }
        while (v50);
      }
LABEL_1597:
      if (v11 < 0) {
        goto LABEL_1711;
      }
      goto LABEL_1628;
    case 0x54:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v733 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v733, v734);
      }
      int v22 = this[6];
      if (!v22) {
        goto LABEL_41;
      }
      int v196 = *(unsigned __int8 *)v22;
      if ((v196 - 4) > 0x1E)
      {
        if ((v196 - 3) >= 0xFFFFFFFE) {
          uint64_t v355 = this[6];
        }
        else {
          uint64_t v355 = 0;
        }
        if ((v196 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v198 = (unint64_t)v355 + 8;
LABEL_714:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v198 + 16, &v857);
          goto LABEL_41;
        }
        if (v196 == 3) {
          *((void *)v22 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v22 + 1) & 0x7F) == 2 || *((_DWORD *)v22 + 3))
      {
        uint64_t v197 = *((void *)v22 + 2);
        if ((v197 & 4) != 0)
        {
          unint64_t v198 = v197 & 0xFFFFFFFFFFFFFFF8;
          if (v198) {
            goto LABEL_714;
          }
        }
      }
LABEL_41:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v4 = *((_DWORD *)this + 5);
      if ((v4 & 0x40000000) == 0)
      {
        uint64_t v23 = v4 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v23];
        if (v23)
        {
          uint64_t v24 = this - 2;
          uint64_t v25 = -32 * v23;
          do
          {
            if (*(v24 - 2))
            {
              *(void *)*uint64_t v24 = *(v24 - 1);
              uint64_t v26 = (uint64_t)*(v24 - 1);
              if (v26) {
                *(void *)(v26 + 16) = *v24;
              }
            }
            v24 -= 4;
            v25 += 32;
          }
          while (v25);
        }
        goto LABEL_1627;
      }
      int v234 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v234;
      uint64_t v235 = v4 & 0x7FFFFFF;
      if (v235)
      {
        uint64_t v236 = 32 * v235;
        do
        {
          unsigned int v237 = &v174[v236];
          if (*(void *)&v174[v236 - 32])
          {
            **((void **)v237 - 2) = *((void *)v237 - 3);
            uint64_t v238 = *((void *)v237 - 3);
            if (v238) {
              *(void *)(v238 + 16) = *((void *)v237 - 2);
            }
          }
          v236 -= 32;
        }
        while (v236);
      }
      goto LABEL_1689;
    case 0x55:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v754 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v754, v755);
      }
      int v57 = this[6];
      if (!v57) {
        goto LABEL_118;
      }
      int v273 = *(unsigned __int8 *)v57;
      if ((v273 - 4) > 0x1E)
      {
        if ((v273 - 3) >= 0xFFFFFFFE) {
          v404 = this[6];
        }
        else {
          v404 = 0;
        }
        if ((v273 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v275 = (unint64_t)v404 + 8;
LABEL_836:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v275 + 16, &v857);
          goto LABEL_118;
        }
        if (v273 == 3) {
          *((void *)v57 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v57 + 1) & 0x7F) == 2 || *((_DWORD *)v57 + 3))
      {
        uint64_t v274 = *((void *)v57 + 2);
        if ((v274 & 4) != 0)
        {
          unint64_t v275 = v274 & 0xFFFFFFFFFFFFFFF8;
          if (v275) {
            goto LABEL_836;
          }
        }
      }
LABEL_118:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v4 = *((_DWORD *)this + 5);
      if ((v4 & 0x40000000) == 0)
      {
        uint64_t v58 = v4 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v58];
        if (v58)
        {
          uint64_t v59 = this - 2;
          uint64_t v60 = -32 * v58;
          do
          {
            if (*(v59 - 2))
            {
              *(void *)*uint64_t v59 = *(v59 - 1);
              uint64_t v61 = (uint64_t)*(v59 - 1);
              if (v61) {
                *(void *)(v61 + 16) = *v59;
              }
            }
            v59 -= 4;
            v60 += 32;
          }
          while (v60);
        }
        goto LABEL_1627;
      }
      uint64_t v304 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v304;
      uint64_t v305 = v4 & 0x7FFFFFF;
      if (v305)
      {
        uint64_t v306 = 32 * v305;
        do
        {
          uint64_t v307 = &v174[v306];
          if (*(void *)&v174[v306 - 32])
          {
            **((void **)v307 - 2) = *((void *)v307 - 3);
            uint64_t v308 = *((void *)v307 - 3);
            if (v308) {
              *(void *)(v308 + 16) = *((void *)v307 - 2);
            }
          }
          v306 -= 32;
        }
        while (v306);
      }
      goto LABEL_1689;
    case 0x59:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        v714 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v714, v715);
      }
      int v3 = this[6];
      if (!v3) {
        goto LABEL_5;
      }
      int v140 = *(unsigned __int8 *)v3;
      if ((v140 - 4) > 0x1E)
      {
        if ((v140 - 3) >= 0xFFFFFFFE) {
          int v282 = this[6];
        }
        else {
          int v282 = 0;
        }
        if ((v140 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v142 = (unint64_t)v282 + 8;
LABEL_581:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v142 + 16, &v857);
          goto LABEL_5;
        }
        if (v140 == 3) {
          *((void *)v3 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v3 + 1) & 0x7F) == 2 || *((_DWORD *)v3 + 3))
      {
        uint64_t v141 = *((void *)v3 + 2);
        if ((v141 & 4) != 0)
        {
          unint64_t v142 = v141 & 0xFFFFFFFFFFFFFFF8;
          if (v142) {
            goto LABEL_581;
          }
        }
      }
LABEL_5:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v4 = *((_DWORD *)this + 5);
      if ((v4 & 0x40000000) == 0)
      {
        uint64_t v5 = v4 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v5];
        if (v5)
        {
          uint64_t v7 = this - 2;
          uint64_t v8 = -32 * v5;
          do
          {
            if (*(v7 - 2))
            {
              *(void *)*uint64_t v7 = *(v7 - 1);
              uint64_t v9 = (uint64_t)*(v7 - 1);
              if (v9) {
                *(void *)(v9 + 16) = *v7;
              }
            }
            v7 -= 4;
            v8 += 32;
          }
          while (v8);
        }
        goto LABEL_1627;
      }
      uint64_t v176 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v176;
      uint64_t v177 = v4 & 0x7FFFFFF;
      if (v177)
      {
        uint64_t v178 = 32 * v177;
        do
        {
          uint64_t v179 = &v174[v178];
          if (*(void *)&v174[v178 - 32])
          {
            **((void **)v179 - 2) = *((void *)v179 - 3);
            uint64_t v180 = *((void *)v179 - 3);
            if (v180) {
              *(void *)(v180 + 16) = *((void *)v179 - 2);
            }
          }
          v178 -= 32;
        }
        while (v178);
      }
      goto LABEL_1689;
    case 0x5A:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v723 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v723, v724);
      }
      int v16 = this[6];
      if (!v16) {
        goto LABEL_27;
      }
      int v171 = *(unsigned __int8 *)v16;
      if ((v171 - 4) > 0x1E)
      {
        if ((v171 - 3) >= 0xFFFFFFFE) {
          int v323 = this[6];
        }
        else {
          int v323 = 0;
        }
        if ((v171 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v173 = (unint64_t)v323 + 8;
LABEL_653:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v173 + 16, &v857);
          goto LABEL_27;
        }
        if (v171 == 3) {
          *((void *)v16 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v16 + 1) & 0x7F) == 2 || *((_DWORD *)v16 + 3))
      {
        uint64_t v172 = *((void *)v16 + 2);
        if ((v172 & 4) != 0)
        {
          unint64_t v173 = v172 & 0xFFFFFFFFFFFFFFF8;
          if (v173) {
            goto LABEL_653;
          }
        }
      }
LABEL_27:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v4 = *((_DWORD *)this + 5);
      if ((v4 & 0x40000000) == 0)
      {
        uint64_t v17 = v4 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v17];
        if (v17)
        {
          unsigned int v18 = this - 2;
          uint64_t v19 = -32 * v17;
          do
          {
            if (*(v18 - 2))
            {
              *(void *)*unsigned int v18 = *(v18 - 1);
              uint64_t v20 = (uint64_t)*(v18 - 1);
              if (v20) {
                *(void *)(v20 + 16) = *v18;
              }
            }
            v18 -= 4;
            v19 += 32;
          }
          while (v19);
        }
        goto LABEL_1627;
      }
      unsigned int v199 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v199;
      uint64_t v200 = v4 & 0x7FFFFFF;
      if (v200)
      {
        uint64_t v201 = 32 * v200;
        do
        {
          int v202 = &v174[v201];
          if (*(void *)&v174[v201 - 32])
          {
            **((void **)v202 - 2) = *((void *)v202 - 3);
            uint64_t v203 = *((void *)v202 - 3);
            if (v203) {
              *(void *)(v203 + 16) = *((void *)v202 - 2);
            }
          }
          v201 -= 32;
        }
        while (v201);
      }
      goto LABEL_1689;
    case 0x5B:
      uint64_t v97 = (void (**)(void))this[8];
      if (v97 != this + 10) {
        free(v97);
      }
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v771 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v771, v772);
      }
      int v98 = this[6];
      if (!v98) {
        goto LABEL_208;
      }
      int v357 = *(unsigned __int8 *)v98;
      if ((v357 - 4) > 0x1E)
      {
        if ((v357 - 3) >= 0xFFFFFFFE) {
          uint64_t v494 = this[6];
        }
        else {
          uint64_t v494 = 0;
        }
        if ((v357 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v359 = (unint64_t)v494 + 8;
LABEL_1049:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v359 + 16, &v857);
          goto LABEL_208;
        }
        if (v357 == 3) {
          *((void *)v98 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v98 + 1) & 0x7F) == 2 || *((_DWORD *)v98 + 3))
      {
        uint64_t v358 = *((void *)v98 + 2);
        if ((v358 & 4) != 0)
        {
          unint64_t v359 = v358 & 0xFFFFFFFFFFFFFFF8;
          if (v359) {
            goto LABEL_1049;
          }
        }
      }
LABEL_208:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v4 = *((_DWORD *)this + 5);
      if ((v4 & 0x40000000) == 0)
      {
        uint64_t v99 = v4 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v99];
        if (v99)
        {
          int v100 = this - 2;
          uint64_t v101 = -32 * v99;
          do
          {
            if (*(v100 - 2))
            {
              *(void *)char *v100 = *(v100 - 1);
              uint64_t v102 = (uint64_t)*(v100 - 1);
              if (v102) {
                *(void *)(v102 + 16) = *v100;
              }
            }
            v100 -= 4;
            v101 += 32;
          }
          while (v101);
        }
        goto LABEL_1627;
      }
      v388 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v388;
      uint64_t v389 = v4 & 0x7FFFFFF;
      if (v389)
      {
        uint64_t v390 = 32 * v389;
        do
        {
          v391 = &v174[v390];
          if (*(void *)&v174[v390 - 32])
          {
            **((void **)v391 - 2) = *((void *)v391 - 3);
            uint64_t v392 = *((void *)v391 - 3);
            if (v392) {
              *(void *)(v392 + 16) = *((void *)v391 - 2);
            }
          }
          v390 -= 32;
        }
        while (v390);
      }
      goto LABEL_1689;
    case 0x5C:
      uint64_t v113 = (void (**)(void))this[8];
      if (v113 != this + 10) {
        free(v113);
      }
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v777 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v777, v778);
      }
      int v114 = this[6];
      if (!v114) {
        goto LABEL_243;
      }
      int v399 = *(unsigned __int8 *)v114;
      if ((v399 - 4) > 0x1E)
      {
        if ((v399 - 3) >= 0xFFFFFFFE) {
          v529 = this[6];
        }
        else {
          v529 = 0;
        }
        if ((v399 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v401 = (unint64_t)v529 + 8;
LABEL_1129:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v401 + 16, &v857);
          goto LABEL_243;
        }
        if (v399 == 3) {
          *((void *)v114 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v114 + 1) & 0x7F) == 2 || *((_DWORD *)v114 + 3))
      {
        uint64_t v400 = *((void *)v114 + 2);
        if ((v400 & 4) != 0)
        {
          unint64_t v401 = v400 & 0xFFFFFFFFFFFFFFF8;
          if (v401) {
            goto LABEL_1129;
          }
        }
      }
LABEL_243:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v4 = *((_DWORD *)this + 5);
      if ((v4 & 0x40000000) == 0)
      {
        uint64_t v115 = v4 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v115];
        if (v115)
        {
          uint64_t v116 = this - 2;
          uint64_t v117 = -32 * v115;
          do
          {
            if (*(v116 - 2))
            {
              *(void *)llvm::Value *v116 = *(v116 - 1);
              uint64_t v118 = (uint64_t)*(v116 - 1);
              if (v118) {
                *(void *)(v118 + 16) = *v116;
              }
            }
            v116 -= 4;
            v117 += 32;
          }
          while (v117);
        }
        goto LABEL_1627;
      }
      v417 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v417;
      uint64_t v418 = v4 & 0x7FFFFFF;
      if (v418)
      {
        uint64_t v419 = 32 * v418;
        do
        {
          v420 = &v174[v419];
          if (*(void *)&v174[v419 - 32])
          {
            **((void **)v420 - 2) = *((void *)v420 - 3);
            uint64_t v421 = *((void *)v420 - 3);
            if (v421) {
              *(void *)(v421 + 16) = *((void *)v420 - 2);
            }
          }
          v419 -= 32;
        }
        while (v419);
      }
      goto LABEL_1689;
    case 0x5D:
      int v119 = (void (**)(void))this[8];
      if (v119 != this + 10) {
        free(v119);
      }
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        uint64_t v782 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v782, v783);
      }
      int v120 = this[6];
      if (!v120) {
        goto LABEL_256;
      }
      int v414 = *(unsigned __int8 *)v120;
      if ((v414 - 4) > 0x1E)
      {
        if ((v414 - 3) >= 0xFFFFFFFE) {
          v556 = this[6];
        }
        else {
          v556 = 0;
        }
        if ((v414 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v416 = (unint64_t)v556 + 8;
LABEL_1183:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v416 + 16, &v857);
          goto LABEL_256;
        }
        if (v414 == 3) {
          *((void *)v120 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v120 + 1) & 0x7F) == 2 || *((_DWORD *)v120 + 3))
      {
        uint64_t v415 = *((void *)v120 + 2);
        if ((v415 & 4) != 0)
        {
          unint64_t v416 = v415 & 0xFFFFFFFFFFFFFFF8;
          if (v416) {
            goto LABEL_1183;
          }
        }
      }
LABEL_256:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v4 = *((_DWORD *)this + 5);
      if ((v4 & 0x40000000) == 0)
      {
        uint64_t v121 = v4 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v121];
        if (v121)
        {
          uint64_t v122 = this - 2;
          uint64_t v123 = -32 * v121;
          do
          {
            if (*(v122 - 2))
            {
              *(void *)*uint64_t v122 = *(v122 - 1);
              uint64_t v124 = (uint64_t)*(v122 - 1);
              if (v124) {
                *(void *)(v124 + 16) = *v122;
              }
            }
            v122 -= 4;
            v123 += 32;
          }
          while (v123);
        }
        goto LABEL_1627;
      }
      uint64_t v451 = (char *)*(this - 1);
      uint64_t v175 = (char *)(this - 1);
      unint64_t v174 = v451;
      uint64_t v452 = v4 & 0x7FFFFFF;
      if (v452)
      {
        uint64_t v453 = 32 * v452;
        do
        {
          v454 = &v174[v453];
          if (*(void *)&v174[v453 - 32])
          {
            **((void **)v454 - 2) = *((void *)v454 - 3);
            uint64_t v455 = *((void *)v454 - 3);
            if (v455) {
              *(void *)(v455 + 16) = *((void *)v454 - 2);
            }
          }
          v453 -= 32;
        }
        while (v453);
      }
      goto LABEL_1689;
    case 0x5F:
      if ((*((unsigned char *)this + 23) & 8) != 0)
      {
        int v855 = llvm::UndefValue::get((llvm::UndefValue *)*this, a2);
        llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, v855, v856);
      }
      v725 = this[6];
      if (!v725) {
        goto LABEL_1619;
      }
      int v805 = *(unsigned __int8 *)v725;
      if ((v805 - 4) > 0x1E)
      {
        if ((v805 - 3) >= 0xFFFFFFFE) {
          v832 = this[6];
        }
        else {
          v832 = 0;
        }
        if ((v805 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v807 = (unint64_t)v832 + 8;
LABEL_1704:
          v857 = (llvm::Value *)(this + 6);
          sub_1CC5FA668(v807 + 16, &v857);
          goto LABEL_1619;
        }
        if (v805 == 3) {
          *((void *)v725 + 1) = 0;
        }
      }
      else if ((*((unsigned char *)v725 + 1) & 0x7F) == 2 || *((_DWORD *)v725 + 3))
      {
        uint64_t v806 = *((void *)v725 + 2);
        if ((v806 & 4) != 0)
        {
          unint64_t v807 = v806 & 0xFFFFFFFFFFFFFFF8;
          if (v807) {
            goto LABEL_1704;
          }
        }
      }
LABEL_1619:
      llvm::Value::~Value((llvm::Value *)this, a2);
      int v4 = *((_DWORD *)this + 5);
      if ((v4 & 0x40000000) != 0)
      {
        v814 = (char *)*(this - 1);
        uint64_t v175 = (char *)(this - 1);
        unint64_t v174 = v814;
        uint64_t v815 = v4 & 0x7FFFFFF;
        if (v815)
        {
          uint64_t v816 = 32 * v815;
          do
          {
            int v817 = &v174[v816];
            if (*(void *)&v174[v816 - 32])
            {
              **((void **)v817 - 2) = *((void *)v817 - 3);
              uint64_t v818 = *((void *)v817 - 3);
              if (v818) {
                *(void *)(v818 + 16) = *((void *)v817 - 2);
              }
            }
            v816 -= 32;
          }
          while (v816);
        }
LABEL_1689:
        operator delete(v174);
        unsigned int v6 = v175;
      }
      else
      {
        uint64_t v726 = v4 & 0x7FFFFFF;
        unsigned int v6 = (char *)&this[-4 * v726];
        if (v726)
        {
          v727 = this - 2;
          uint64_t v728 = -32 * v726;
          do
          {
            if (*(v727 - 2))
            {
              *(void *)uint64_t *v727 = *(v727 - 1);
              uint64_t v729 = (uint64_t)*(v727 - 1);
              if (v729) {
                *(void *)(v729 + 16) = *v727;
              }
            }
            v727 -= 4;
            v728 += 32;
          }
          while (v728);
        }
LABEL_1627:
        if (v4 < 0) {
LABEL_1711:
        }
          unsigned int v6 = &v6[-*((void *)v6 - 1) - 8];
      }
LABEL_1628:
      operator delete(v6);
      return;
    default:
      if (*((unsigned char *)this + 17)) {
        llvm::ValueHandleBase::ValueIsDeleted((llvm::ValueHandleBase *)this, a2);
      }
      int v217 = *((_DWORD *)this + 5);
      if ((v217 & 0x8000000) == 0) {
        goto LABEL_450;
      }
      v596 = **(int32x2_t ***)*this;
      int32x2_t v597 = v596[49];
      uint64_t v598 = v596[51].u32[0];
      if (!v598) {
        goto LABEL_1696;
      }
      LODWORD(v599) = (v598 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v600 = *(void *)&v597 + 16 * v599;
      uint64_t v601 = *(llvm::Value **)v600;
      if (*(void (***)(void))v600 == this) {
        goto LABEL_1279;
      }
      int v650 = 1;
      while (v601 != (llvm::Value *)-4096)
      {
        int v651 = v599 + v650++;
        uint64_t v599 = v651 & (v598 - 1);
        uint64_t v601 = *(llvm::Value **)(*(void *)&v597 + 16 * v599);
        if (v601 == (llvm::Value *)this)
        {
          uint64_t v600 = *(void *)&v597 + 16 * v599;
          goto LABEL_1279;
        }
      }
LABEL_1696:
      uint64_t v600 = *(void *)&v597 + 16 * v598;
LABEL_1279:
      if (v600 != *(void *)&v597 + 16 * v598)
      {
        uint64_t v602 = *(void *)(v600 + 8);
        *(void *)uint64_t v600 = -8192;
        v596[50] = vadd_s32(v596[50], (int32x2_t)0x1FFFFFFFFLL);
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v602 + 8), 0);
        if (v602)
        {
          uint64_t v603 = v602;
          if ((*(unsigned char *)(v602 + 24) & 1) == 0)
          {
            MEMORY[0x1D25D9CD0](*(void *)(v602 + 32), 8);
            uint64_t v603 = v602;
          }
          MEMORY[0x1D25D9CE0](v603, 0x1020C4072C728BCLL);
        }
      }
      int v217 = *((_DWORD *)this + 5);
LABEL_450:
      if ((v217 & 0x20000000) != 0)
      {
        v582 = (int32x2_t *)(**(void **)*this + 2480);
        v857 = (llvm::Value *)this;
        sub_1CC6035CC(v582, &v857);
        *((_DWORD *)this + 5) &= ~0x20000000u;
      }
      llvm::Value::destroyValueName((uint64_t)this);
LABEL_453:
      JUMPOUT(0x1D25D9CE0);
  }
}

uint64_t llvm::Value::getValueName(llvm::Value *this)
{
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v1 = ***(void ***)this;
    uint64_t v2 = *(void *)(v1 + 152);
    uint64_t v3 = *(unsigned int *)(v1 + 168);
    if (v3)
    {
      LODWORD(v4) = (v3 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v5 = v2 + 16 * v4;
      unsigned int v6 = *(llvm::Value **)v5;
      if (*(llvm::Value **)v5 == this) {
        return *(void *)(v5 + 8);
      }
      int v7 = 1;
      while (v6 != (llvm::Value *)-4096)
      {
        int v8 = v4 + v7++;
        uint64_t v4 = v8 & (v3 - 1);
        unsigned int v6 = *(llvm::Value **)(v2 + 16 * v4);
        if (v6 == this)
        {
          uint64_t v5 = v2 + 16 * v4;
          return *(void *)(v5 + 8);
        }
      }
    }
    uint64_t v5 = v2 + 16 * v3;
    return *(void *)(v5 + 8);
  }
  return 0;
}

int32x2_t ****llvm::Value::setValueName(int32x2_t ****result, int32x2_t ***a2)
{
  uint64_t v2 = **result;
  int v3 = *((_DWORD *)result + 5);
  if (a2)
  {
    *((_DWORD *)result + 5) = v3 | 0x10000000;
    uint64_t v5 = (uint64_t)&(*v2)[19];
    uint64_t v6 = *(void *)v5;
    uint64_t v26 = result;
    int v7 = *(_DWORD *)(v5 + 16);
    if (v7)
    {
      int v8 = v7 - 1;
      unsigned int v9 = (v7 - 1) & ((result >> 4) ^ (result >> 9));
      int v10 = (int32x2_t ****)(v6 + 16 * v9);
      int v11 = (int32x2_t ****)*v10;
      if (*v10 == (int32x2_t ***)result)
      {
LABEL_15:
        v10[1] = a2;
        return result;
      }
      uint64_t v12 = 0;
      int v13 = 1;
      while (v11 != (int32x2_t ****)-4096)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == (int32x2_t ****)-8192;
        }
        if (v14) {
          uint64_t v12 = v10;
        }
        unsigned int v15 = v9 + v13++;
        unsigned int v9 = v15 & v8;
        int v10 = (int32x2_t ****)(v6 + 16 * (v15 & v8));
        int v11 = (int32x2_t ****)*v10;
        if (*v10 == (int32x2_t ***)result) {
          goto LABEL_15;
        }
      }
      if (v12) {
        uint64_t v25 = v12;
      }
      else {
        uint64_t v25 = v10;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t result = (int32x2_t ****)sub_1CC6308D4(v5, (uint64_t)&v26, (uint64_t *)&v26, v25);
    int v10 = result;
    *uint64_t result = (int32x2_t ***)v26;
    result[1] = 0;
    goto LABEL_15;
  }
  if ((v3 & 0x10000000) != 0)
  {
    int v16 = *v2;
    __int32 v17 = v16[21].i32[0];
    if (v17)
    {
      int32x2_t v18 = v16[19];
      __int32 v19 = v17 - 1;
      LODWORD(v20) = (v17 - 1) & ((result >> 4) ^ (result >> 9));
      uint64_t v21 = (int32x2_t *****)(*(void *)&v18 + 16 * v20);
      int v22 = *v21;
      if (*v21 == result)
      {
LABEL_22:
        *uint64_t v21 = (int32x2_t ****)-8192;
        v16[20] = vadd_s32(v16[20], (int32x2_t)0x1FFFFFFFFLL);
        int v3 = *((_DWORD *)result + 5);
      }
      else
      {
        int v23 = 1;
        while (v22 != (int32x2_t ****)-4096)
        {
          int v24 = v20 + v23++;
          uint64_t v20 = v24 & v19;
          int v22 = *(int32x2_t *****)(*(void *)&v18 + 16 * v20);
          if (v22 == result)
          {
            uint64_t v21 = (int32x2_t *****)(*(void *)&v18 + 16 * v20);
            goto LABEL_22;
          }
        }
      }
    }
  }
  *((_DWORD *)result + 5) = v3 & 0xEFFFFFFF;
  return result;
}

BOOL llvm::Value::hasNUses(llvm::Value *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (!a2) {
    return v2 == 0;
  }
  while (v2)
  {
    uint64_t v2 = *(void *)(v2 + 8);
    if (!--a2) {
      return v2 == 0;
    }
  }
  return 0;
}

BOOL llvm::Value::hasNUsesOrMore(llvm::Value *this, int a2)
{
  BOOL result = a2 == 0;
  if (a2)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4)
    {
      int v5 = a2 - 1;
      do
      {
        BOOL result = v5 == 0;
        if (!v5) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 8);
        --v5;
      }
      while (v4);
    }
  }
  return result;
}

BOOL llvm::Value::hasOneUser(llvm::Value *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 1;
  }
  do
  {
    uint64_t v3 = *(void *)(v2 + 24);
    uint64_t v4 = *(void *)(v1 + 24);
    BOOL result = v3 == v4;
    if (v3 != v4) {
      break;
    }
    uint64_t v1 = *(void *)(v1 + 8);
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2);
  return result;
}

uint64_t llvm::Value::getUniqueUndroppableUser(llvm::Value *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1)
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = *(void *)(v1 + 24);
      if (sub_1CBF698E4(v3) || sub_1CC27D470(v3))
      {
        uint64_t v3 = v2;
      }
      else if (v2 && v2 != v3)
      {
        return 0;
      }
      uint64_t v1 = *(void *)(v1 + 8);
      uint64_t v2 = v3;
      if (!v1) {
        return v3;
      }
    }
  }
  return 0;
}

BOOL llvm::Value::hasNUndroppableUses(llvm::Value *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (a2)
  {
    int v3 = a2;
    while (v2)
    {
      uint64_t v4 = *(void *)(v2 + 24);
      BOOL v5 = sub_1CBF698E4(v4) || sub_1CC27D470(v4);
      uint64_t v2 = *(void *)(v2 + 8);
      v3 -= !v5;
      if (!v3) {
        goto LABEL_8;
      }
    }
    return 0;
  }
  else
  {
LABEL_8:
    if (v2)
    {
      while (1)
      {
        uint64_t v6 = *(void *)(v2 + 24);
        if (!sub_1CBF698E4(v6))
        {
          BOOL result = sub_1CC27D470(v6);
          if (!result) {
            break;
          }
        }
        uint64_t v2 = *(void *)(v2 + 8);
        if (!v2) {
          return 1;
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL llvm::Value::hasNUndroppableUsesOrMore(llvm::Value *this, int a2)
{
  BOOL result = a2 == 0;
  if (a2)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4)
    {
      int v5 = a2;
      do
      {
        uint64_t v6 = *(void *)(v4 + 24);
        BOOL v7 = sub_1CBF698E4(v6) || sub_1CC27D470(v6);
        v5 -= !v7;
        BOOL result = v5 == 0;
        if (!v5) {
          break;
        }
        uint64_t v4 = *(void *)(v4 + 8);
      }
      while (v4);
    }
  }
  return result;
}

void llvm::Value::dropDroppableUses(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  v12[8] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    do
    {
      uint64_t v6 = *(void *)(v3 + 24);
      if ((sub_1CBF698E4(v6) || sub_1CC27D470(v6)) && a2(a3, v3))
      {
        if (v11 >= 8uLL) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v12[v11++] = v3;
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3);
    int v8 = (llvm::Value **)v12;
    if (v11)
    {
      uint64_t v9 = 8 * v11;
      do
      {
        int v10 = *v8++;
        llvm::Value::dropDroppableUse(v10, v7);
        v9 -= 8;
      }
      while (v9);
    }
  }
}

uint64_t llvm::Value::dropDroppableUse(llvm::Value *this, llvm::Use *a2)
{
  uint64_t v3 = (void *)((char *)this + 8);
  **((void **)this + 2) = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    *(void *)(v4 + 16) = *((void *)this + 2);
  }
  int v5 = (char *)*((void *)this + 3);
  uint64_t result = sub_1CBF698E4((uint64_t)v5);
  if (v5) {
    BOOL v9 = result == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    uint64_t v10 = *((void *)this + 3);
    int v11 = *(_DWORD *)(v10 + 20);
    if ((v11 & 0x40000000) != 0) {
      uint64_t v12 = *(void *)(v10 - 8);
    }
    else {
      uint64_t v12 = v10 - 32 * (v11 & 0x7FFFFFF);
    }
    unint64_t v13 = ((unint64_t)this - v12) >> 5;
    if (v13)
    {
      uint64_t v21 = llvm::UndefValue::get(**(llvm::UndefValue ***)this, v7);
      if (*(void *)this)
      {
        **((void **)this + 2) = *((void *)this + 1);
        uint64_t v22 = *((void *)this + 1);
        if (v22) {
          *(void *)(v22 + 16) = *((void *)this + 2);
        }
      }
      *(void *)this = v21;
      if (v21)
      {
        uint64_t v25 = *((void *)v21 + 1);
        int v23 = (void *)((char *)v21 + 8);
        uint64_t v24 = v25;
        *uint64_t v3 = v25;
        if (v25) {
          *(void *)(v24 + 16) = v3;
        }
        *((void *)this + 2) = v23;
        *int v23 = this;
      }
      BundleOpInfoForOperand = llvm::CallBase::getBundleOpInfoForOperand(v5, v13);
      uint64_t result = (uint64_t)llvm::LLVMContextImpl::getOrInsertBundleTag(***(_DWORD ****)v5, "ignore", 6uLL);
      *(void *)BundleOpInfoForOperand = result;
    }
    else
    {
      BOOL v14 = **(uint64_t ***)v5;
      uint64_t v15 = *v14;
      uint64_t v16 = *(void *)(*v14 + 1560);
      if (!v16)
      {
        uint64_t v27 = *(llvm::ConstantInt **)(v15 + 1888);
        unsigned int v28 = *(_DWORD *)(v15 + 1896);
        unsigned int v31 = v28 >> 8;
        if (v28 >> 8 > 0x40) {
          operator new[]();
        }
        unint64_t v29 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v28) + 63);
        if (v28 <= 0xFF) {
          LOBYTE(v29) = 0;
        }
        uint64_t v30 = v29 & 1;
        uint64_t result = (uint64_t)llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v30, v8);
        uint64_t v16 = result;
        if (v31 >= 0x41)
        {
          uint64_t result = v30;
          if (v30) {
            uint64_t result = MEMORY[0x1D25D9CB0](v30, 0x1000C8000313F17);
          }
        }
        *(void *)(v15 + 1560) = v16;
      }
      if (*(void *)this)
      {
        **((void **)this + 2) = *((void *)this + 1);
        uint64_t v17 = *((void *)this + 1);
        if (v17) {
          *(void *)(v17 + 16) = *((void *)this + 2);
        }
      }
      *(void *)this = v16;
      if (v16)
      {
        uint64_t v20 = *(void *)(v16 + 8);
        __int32 v19 = (void *)(v16 + 8);
        uint64_t v18 = v20;
        *uint64_t v3 = v20;
        if (v20) {
          *(void *)(v18 + 16) = v3;
        }
        *((void *)this + 2) = v19;
        void *v19 = this;
      }
    }
  }
  return result;
}

uint64_t llvm::Value::getContext(llvm::Value *this)
{
  return **(void **)this;
}

uint64_t llvm::Value::isUsedInBasicBlock(llvm::Value *this, const llvm::BasicBlock *a2)
{
  uint64_t v2 = (void *)*((void *)a2 + 6);
  for (uint64_t i = *((void *)this + 1); ; uint64_t i = *(void *)(i + 8))
  {
    if (v2 == (void *)((char *)a2 + 40) || i == 0) {
      return 0;
    }
    uint64_t v5 = v2 ? (uint64_t)(v2 - 3) : 0;
    int v6 = *(_DWORD *)(v5 + 20);
    if ((v6 & 0x40000000) != 0)
    {
      int v8 = *(llvm::Value ***)(v5 - 8);
      uint64_t v7 = v6 & 0x7FFFFFF;
      if (!v7)
      {
LABEL_16:
        uint64_t v10 = v8;
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v7 = v6 & 0x7FFFFFF;
      int v8 = (llvm::Value **)(v5 - 32 * v7);
      if (!v7) {
        goto LABEL_16;
      }
    }
    uint64_t v9 = 32 * v7;
    uint64_t v10 = v8;
    while (*v10 != this)
    {
      v10 += 4;
      v9 -= 32;
      if (!v9)
      {
        uint64_t v10 = &v8[4 * v7];
        break;
      }
    }
LABEL_17:
    if (v7 != ((char *)v10 - (char *)v8) >> 5) {
      break;
    }
    uint64_t v11 = *(void *)(i + 24);
    BOOL v12 = v11 && *(unsigned __int8 *)(v11 + 16) >= 0x1Cu;
    if (v12 && *(const llvm::BasicBlock **)(v11 + 40) == a2) {
      break;
    }
    uint64_t v2 = (void *)v2[1];
  }
  return 1;
}

uint64_t llvm::Value::getNumUses(llvm::Value *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (!v1) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    uint64_t result = (result + 1);
    uint64_t v1 = *(void *)(v1 + 8);
  }
  while (v1);
  return result;
}

char *llvm::Value::getName(llvm::Value *this)
{
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    uint64_t v1 = ***(void ***)this;
    uint64_t v2 = *(void *)(v1 + 152);
    uint64_t v3 = *(unsigned int *)(v1 + 168);
    if (v3)
    {
      LODWORD(v4) = (v3 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v5 = v2 + 16 * v4;
      int v6 = *(llvm::Value **)v5;
      if (*(llvm::Value **)v5 == this) {
        return (char *)(*(void *)(v5 + 8) + 16);
      }
      int v7 = 1;
      while (v6 != (llvm::Value *)-4096)
      {
        int v8 = v4 + v7++;
        uint64_t v4 = v8 & (v3 - 1);
        int v6 = *(llvm::Value **)(v2 + 16 * v4);
        if (v6 == this)
        {
          uint64_t v5 = v2 + 16 * v4;
          return (char *)(*(void *)(v5 + 8) + 16);
        }
      }
    }
    uint64_t v5 = v2 + 16 * v3;
    return (char *)(*(void *)(v5 + 8) + 16);
  }
  return &byte_1CFBCE98E;
}

void llvm::Value::setNameImpl(llvm::Value *this, const char **a2)
{
  v78[32] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(***(void ***)this + 2664) || *((unsigned __int8 *)this + 16) <= 3u)
  {
    unsigned int v3 = *((unsigned __int8 *)a2 + 32);
    if (v3 > 1 || (*((unsigned char *)this + 23) & 0x10) != 0)
    {
      uint64_t v76 = v78;
      long long v77 = xmmword_1CD96DBF0;
      if (*((unsigned char *)a2 + 33) == 1)
      {
        size_t v4 = 0;
        uint64_t v5 = 0;
        int v6 = v78;
        switch(v3)
        {
          case 1u:
            break;
          case 3u:
            uint64_t v5 = (void *)*a2;
            if (*a2) {
              size_t v4 = strlen(*a2);
            }
            else {
              size_t v4 = 0;
            }
            goto LABEL_10;
          case 4u:
            unsigned int v34 = *a2;
            char v35 = (*a2)[23];
            if (v35 >= 0) {
              uint64_t v5 = (void *)*a2;
            }
            else {
              uint64_t v5 = *(void **)v34;
            }
            if (v35 >= 0) {
              size_t v4 = v35 & 0x7F;
            }
            else {
              size_t v4 = *((void *)v34 + 1);
            }
            goto LABEL_10;
          case 5u:
            uint64_t v5 = (void *)*a2;
            size_t v4 = (size_t)a2[1];
LABEL_10:
            int v6 = v78;
            break;
          default:
            goto LABEL_39;
        }
      }
      else
      {
LABEL_39:
        llvm::Twine::toVector((uint64_t)a2, (uint64_t)&v76);
        int v6 = v76;
        size_t v4 = v77;
        uint64_t v5 = v76;
      }
      int v7 = *((_DWORD *)this + 5);
      if ((v7 & 0x10000000) == 0)
      {
        uint64_t v8 = 0;
        uint64_t v9 = &byte_1CFBCE98E;
LABEL_13:
        if (v8 == v4 && (!v4 || !memcmp(v9, v5, v4))) {
          goto LABEL_19;
        }
        unint64_t v74 = 0;
        if (sub_1CC62C13C((uint64_t)this, &v74))
        {
LABEL_18:
          int v6 = v76;
LABEL_19:
          if (v6 != v78) {
            free(v6);
          }
          return;
        }
        uint64_t v10 = v74;
        if (v74)
        {
          if ((v7 & 0x10000000) == 0)
          {
LABEL_17:
            ValueName = (int32x2_t ***)llvm::ValueSymbolTable::createValueName((llvm::StringMapImpl *)v10, (unsigned __int8 *)v5, v4, (size_t)this);
            llvm::Value::setValueName((int32x2_t ****)this, ValueName);
            goto LABEL_18;
          }
          uint64_t v46 = ***(void ***)this;
          uint64_t v47 = *(void *)(v46 + 152);
          uint64_t v48 = *(unsigned int *)(v46 + 168);
          if (v48)
          {
            LODWORD(v49) = (v48 - 1) & ((this >> 4) ^ (this >> 9));
            uint64_t v50 = v47 + 16 * v49;
            uint64_t v51 = *(llvm::Value **)v50;
            if (*(llvm::Value **)v50 == this) {
              goto LABEL_69;
            }
            int v52 = 1;
            while (v51 != (llvm::Value *)-4096)
            {
              int v53 = v49 + v52++;
              uint64_t v49 = v53 & (v48 - 1);
              uint64_t v51 = *(llvm::Value **)(v47 + 16 * v49);
              if (v51 == this)
              {
                uint64_t v50 = v47 + 16 * v49;
                goto LABEL_69;
              }
            }
          }
          uint64_t v50 = v47 + 16 * v48;
LABEL_69:
          uint64_t v54 = *((unsigned int *)v74 + 2);
          if (v54)
          {
            uint64_t v55 = *(size_t **)(v50 + 8);
            uint64_t v73 = *((unsigned int *)v74 + 5);
            uint64_t v56 = (unsigned __int8 *)v55 + v73;
            size_t v57 = *v55;
            if (*v55)
            {
              int v58 = 0;
              size_t v59 = *v55;
              uint64_t v60 = v56;
              do
              {
                int v61 = *v60++;
                int v58 = 33 * v58 + v61;
                --v59;
              }
              while (v59);
            }
            else
            {
              int v58 = 0;
            }
            unsigned int v62 = v54 - 1;
            uint64_t v63 = *v74;
            uint64_t v64 = *v74 + 8 * v54 + 8;
            int v65 = 1;
            int v66 = v58;
            uint64_t v72 = v56;
            unsigned int v71 = v62;
            uint64_t v70 = *v74;
            while (1)
            {
              uint64_t v67 = v66 & v62;
              uint64_t v68 = *(void **)(v63 + 8 * v67);
              if (v68 != (void *)-8)
              {
                if (!v68) {
                  goto LABEL_84;
                }
                if (*(_DWORD *)(v64 + 4 * v67) == v58 && v57 == *v68)
                {
                  if (!v57) {
                    break;
                  }
                  int v69 = memcmp(v56, (char *)v68 + v73, v57);
                  unsigned int v62 = v71;
                  uint64_t v63 = v70;
                  uint64_t v56 = v72;
                  if (!v69) {
                    break;
                  }
                }
              }
              int v66 = v65 + v67;
              ++v65;
            }
            *(void *)(v63 + 8 * (int)v67) = -8;
            *(uint64_t *)((char *)v10 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)v10 + 12), (int32x2_t)0x1FFFFFFFFLL);
          }
LABEL_84:
          llvm::Value::destroyValueName((uint64_t)this);
          if (!v4) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        llvm::Value::destroyValueName((uint64_t)this);
        if (!v4) {
          goto LABEL_18;
        }
        BOOL v12 = operator new(v4 + 17, (std::align_val_t)8uLL);
        memcpy(v12 + 2, v5, v4);
        *((unsigned char *)v12 + v4 + 16) = 0;
        *BOOL v12 = v4;
        v12[1] = 0;
        unint64_t v13 = **(void ***)this;
        *((_DWORD *)this + 5) |= 0x10000000u;
        uint64_t v14 = *v13 + 152;
        uint64_t v15 = *(void *)v14;
        uint64_t v75 = this;
        int v16 = *(_DWORD *)(v14 + 16);
        if (v16)
        {
          int v17 = v16 - 1;
          unsigned int v18 = (v16 - 1) & ((this >> 4) ^ (this >> 9));
          __int32 v19 = (llvm::Value **)(v15 + 16 * v18);
          uint64_t v20 = *v19;
          if (*v19 == this) {
            goto LABEL_32;
          }
          uint64_t v21 = 0;
          int v22 = 1;
          while (v20 != (llvm::Value *)-4096)
          {
            if (v21) {
              BOOL v23 = 0;
            }
            else {
              BOOL v23 = v20 == (llvm::Value *)-8192;
            }
            if (v23) {
              uint64_t v21 = v19;
            }
            unsigned int v24 = v18 + v22++;
            unsigned int v18 = v24 & v17;
            __int32 v19 = (llvm::Value **)(v15 + 16 * (v24 & v17));
            uint64_t v20 = *v19;
            if (*v19 == this) {
              goto LABEL_32;
            }
          }
          if (v21) {
            uint64_t v33 = v21;
          }
          else {
            uint64_t v33 = v19;
          }
        }
        else
        {
          uint64_t v33 = 0;
        }
        __int32 v19 = (llvm::Value **)sub_1CC6308D4(v14, (uint64_t)&v75, (uint64_t *)&v75, v33);
        void *v19 = v75;
        v19[1] = 0;
LABEL_32:
        v19[1] = (llvm::Value *)v12;
        uint64_t v25 = ***(void ***)this;
        uint64_t v26 = *(void *)(v25 + 152);
        uint64_t v27 = *(unsigned int *)(v25 + 168);
        if (v27)
        {
          LODWORD(v28) = (v27 - 1) & ((this >> 4) ^ (this >> 9));
          uint64_t v29 = v26 + 16 * v28;
          uint64_t v30 = *(llvm::Value **)v29;
          if (*(llvm::Value **)v29 == this)
          {
LABEL_38:
            *(void *)(*(void *)(v29 + 8) + 8) = this;
            goto LABEL_18;
          }
          int v31 = 1;
          while (v30 != (llvm::Value *)-4096)
          {
            int v32 = v28 + v31++;
            uint64_t v28 = v32 & (v27 - 1);
            uint64_t v30 = *(llvm::Value **)(v26 + 16 * v28);
            if (v30 == this)
            {
              uint64_t v29 = v26 + 16 * v28;
              goto LABEL_38;
            }
          }
        }
        uint64_t v29 = v26 + 16 * v27;
        goto LABEL_38;
      }
      uint64_t v36 = ***(void ***)this;
      uint64_t v37 = *(void *)(v36 + 152);
      uint64_t v38 = *(unsigned int *)(v36 + 168);
      if (v38)
      {
        LODWORD(v39) = (v38 - 1) & ((this >> 4) ^ (this >> 9));
        uint64_t v40 = v37 + 16 * v39;
        uint64_t v41 = *(llvm::Value **)v40;
        if (*(llvm::Value **)v40 == this)
        {
LABEL_62:
          uint64_t v44 = *(void **)(v40 + 8);
          uint64_t v45 = *v44;
          uint64_t v9 = (char *)(v44 + 2);
          uint64_t v8 = v45;
          goto LABEL_13;
        }
        int v42 = 1;
        while (v41 != (llvm::Value *)-4096)
        {
          int v43 = v39 + v42++;
          uint64_t v39 = v43 & (v38 - 1);
          uint64_t v41 = *(llvm::Value **)(v37 + 16 * v39);
          if (v41 == this)
          {
            uint64_t v40 = v37 + 16 * v39;
            goto LABEL_62;
          }
        }
      }
      uint64_t v40 = v37 + 16 * v38;
      goto LABEL_62;
    }
  }
}

uint64_t sub_1CC62C13C(uint64_t a1, void *a2)
{
  *a2 = 0;
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v2 >= 0x1C)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3) {
      return v3;
    }
    uint64_t v3 = *(void *)(v3 + 56);
    if (!v3) {
      return v3;
    }
    goto LABEL_17;
  }
  if (a1 && v2 == 22)
  {
    uint64_t v3 = *(void *)(a1 + 56);
    if (!v3) {
      return v3;
    }
    goto LABEL_17;
  }
  if (a1 && v2 <= 3)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (!v3) {
      return v3;
    }
    size_t v4 = (void *)(v3 + 112);
LABEL_18:
    uint64_t v3 = 0;
    *a2 = *v4;
    return v3;
  }
  uint64_t v3 = 1;
  if (a1)
  {
    if (v2 == 21)
    {
      uint64_t v3 = *(void *)(a1 + 24);
      if (v3)
      {
LABEL_17:
        size_t v4 = (void *)(v3 + 104);
        goto LABEL_18;
      }
    }
  }
  return v3;
}

void llvm::Value::setName(llvm::Value *this, const char **a2)
{
  llvm::Value::setNameImpl(this, a2);
  if (this && !*((unsigned char *)this + 16))
  {
    if ((*((unsigned char *)this + 23) & 0x10) == 0) {
      goto LABEL_19;
    }
    uint64_t v3 = ***(void ***)this;
    uint64_t v4 = *(void *)(v3 + 152);
    uint64_t v5 = *(unsigned int *)(v3 + 168);
    if (v5)
    {
      LODWORD(v6) = (v5 - 1) & ((this >> 4) ^ (this >> 9));
      uint64_t v7 = v4 + 16 * v6;
      uint64_t v8 = *(llvm::Value **)v7;
      if (*(llvm::Value **)v7 == this)
      {
LABEL_11:
        uint64_t v11 = *(void **)(v7 + 8);
        unint64_t v14 = *v11;
        BOOL v12 = v11 + 2;
        unint64_t v13 = v14;
        if (v14 >= 5 && *(_DWORD *)v12 == *(_DWORD *)"llvm." && v12[4] == aLlvm_1[4])
        {
          *((_DWORD *)this + 8) |= 0x2000u;
          int v16 = llvm::Function::lookupIntrinsicID(v12, v13);
LABEL_18:
          *((_DWORD *)this + 9) = v16;
          return;
        }
LABEL_19:
        int v16 = 0;
        *((_DWORD *)this + 8) &= ~0x2000u;
        goto LABEL_18;
      }
      int v9 = 1;
      while (v8 != (llvm::Value *)-4096)
      {
        int v10 = v6 + v9++;
        uint64_t v6 = v10 & (v5 - 1);
        uint64_t v8 = *(llvm::Value **)(v4 + 16 * v6);
        if (v8 == this)
        {
          uint64_t v7 = v4 + 16 * v6;
          goto LABEL_11;
        }
      }
    }
    uint64_t v7 = v4 + 16 * v5;
    goto LABEL_11;
  }
}

void llvm::Value::takeName(int32x2_t ****this, llvm::Value *a2)
{
  unsigned int v2 = a2;
  uint64_t v3 = this;
  uint64_t v118 = 0;
  if ((*((unsigned char *)this + 23) & 0x10) != 0)
  {
    if (sub_1CC62C13C((uint64_t)this, &v118))
    {
      if ((*((unsigned char *)v2 + 23) & 0x10) == 0) {
        return;
      }
      goto LABEL_108;
    }
    uint64_t v115 = v118;
    if (!v118) {
      goto LABEL_73;
    }
    uint64_t v86 = ***v3;
    int32x2_t v87 = v86[19];
    uint64_t v88 = v86[21].u32[0];
    if (v88)
    {
      LODWORD(v89) = (v88 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      uint64_t v90 = (int32x2_t *****)(*(void *)&v87 + 16 * v89);
      uint64_t v91 = *v90;
      if (*v90 == v3) {
        goto LABEL_92;
      }
      int v92 = 1;
      while (v91 != (int32x2_t ****)-4096)
      {
        int v93 = v89 + v92++;
        uint64_t v89 = v93 & (v88 - 1);
        uint64_t v91 = *(int32x2_t *****)(*(void *)&v87 + 16 * v89);
        if (v91 == v3)
        {
          uint64_t v90 = (int32x2_t *****)(*(void *)&v87 + 16 * v89);
          goto LABEL_92;
        }
      }
    }
    uint64_t v90 = (int32x2_t *****)(*(void *)&v87 + 16 * v88);
LABEL_92:
    uint64_t v94 = v118[2];
    if (v94)
    {
      uint64_t v95 = (size_t *)v90[1];
      uint64_t v113 = v118[5];
      uint64_t v96 = (unsigned __int8 *)v95 + v113;
      size_t v97 = *v95;
      if (*v95)
      {
        int v98 = 0;
        size_t v99 = *v95;
        int v100 = v96;
        do
        {
          int v101 = *v100++;
          int v98 = 33 * v98 + v101;
          --v99;
        }
        while (v99);
      }
      else
      {
        int v98 = 0;
      }
      unsigned int v102 = v94 - 1;
      uint64_t v103 = *(void *)v118;
      uint64_t v104 = *(void *)v118 + 8 * v94 + 8;
      int v105 = 1;
      int v106 = v98;
      while (1)
      {
        uint64_t v107 = v106 & v102;
        uint64_t v108 = *(void **)(v103 + 8 * v107);
        if (v108 != (void *)-8)
        {
          if (!v108) {
            goto LABEL_73;
          }
          if (*(_DWORD *)(v104 + 4 * v107) == v98 && v97 == *v108 && (!v97 || !memcmp(v96, (char *)v108 + v113, v97))) {
            break;
          }
        }
        int v106 = v105 + v107;
        ++v105;
      }
      *(void *)(v103 + 8 * (int)v107) = -8;
      *(int32x2_t *)(v115 + 3) = vadd_s32(*(int32x2_t *)(v115 + 3), (int32x2_t)0x1FFFFFFFFLL);
    }
LABEL_73:
    llvm::Value::destroyValueName((uint64_t)v3);
    if ((*((unsigned char *)v2 + 23) & 0x10) == 0) {
      return;
    }
    uint64_t v4 = (unsigned int *)((char *)v2 + 20);
    uint64_t v5 = (llvm::ValueSymbolTable *)v115;
    if (v115)
    {
LABEL_7:
      v116[0] = 0;
      sub_1CC62C13C((uint64_t)v2, v116);
      uint64_t v6 = v116[0];
      if (v5 != (llvm::ValueSymbolTable *)v116[0])
      {
        uint64_t v7 = *(int32x2_t ****)v2;
        unsigned int v8 = v2 >> 4;
        if (!v116[0]) {
          goto LABEL_45;
        }
        uint64_t v110 = v4;
        int v9 = **v7;
        int32x2_t v10 = v9[19];
        uint64_t v11 = v9[21].u32[0];
        if (v11)
        {
          LODWORD(v12) = (v11 - 1) & (v8 ^ (v2 >> 9));
          unint64_t v13 = (llvm::Value **)(*(void *)&v10 + 16 * v12);
          unint64_t v14 = *v13;
          if (*v13 == v2)
          {
LABEL_15:
            unsigned int v109 = v2 >> 4;
            uint64_t v112 = v3;
            int v114 = v5;
            uint64_t v111 = v2;
            uint64_t v17 = *((unsigned int *)v116[0] + 2);
            if (v17)
            {
              unsigned int v18 = (size_t *)v13[1];
              uint64_t v19 = *((unsigned int *)v116[0] + 5);
              uint64_t v20 = (unsigned __int8 *)v18 + v19;
              size_t v21 = *v18;
              if (*v18)
              {
                int v22 = 0;
                size_t v23 = *v18;
                unsigned int v24 = v20;
                do
                {
                  int v25 = *v24++;
                  int v22 = 33 * v22 + v25;
                  --v23;
                }
                while (v23);
              }
              else
              {
                int v22 = 0;
              }
              unsigned int v26 = v17 - 1;
              uint64_t v27 = *(void *)v116[0];
              uint64_t v28 = *(void *)v116[0] + 8 * v17 + 8;
              int v29 = 1;
              int v30 = v22;
              while (1)
              {
                uint64_t v31 = v30 & v26;
                int v32 = *(void **)(v27 + 8 * v31);
                if (v32 != (void *)-8)
                {
                  if (!v32) {
                    goto LABEL_43;
                  }
                  if (*(_DWORD *)(v28 + 4 * v31) == v22
                    && v21 == *v32
                    && (!v21 || !memcmp(v20, (char *)v32 + v19, v21)))
                  {
                    break;
                  }
                }
                int v30 = v29 + v31;
                ++v29;
              }
              *(void *)(v27 + 8 * (int)v31) = -8;
              *(int32x2_t *)(v6 + 12) = vadd_s32(*(int32x2_t *)(v6 + 12), (int32x2_t)0x1FFFFFFFFLL);
            }
LABEL_43:
            uint64_t v4 = v110;
            if ((*((unsigned char *)v110 + 3) & 0x10) == 0)
            {
              int v58 = 0;
              unsigned int v2 = v111;
              uint64_t v3 = v112;
              uint64_t v5 = v114;
              unsigned int v8 = v109;
              goto LABEL_52;
            }
            unsigned int v2 = v111;
            uint64_t v3 = v112;
            uint64_t v7 = *(int32x2_t ****)v111;
            uint64_t v5 = v114;
            unsigned int v8 = v109;
LABEL_45:
            uint64_t v50 = **v7;
            int32x2_t v51 = v50[19];
            uint64_t v52 = v50[21].u32[0];
            if (v52)
            {
              LODWORD(v53) = (v52 - 1) & (v8 ^ (v2 >> 9));
              uint64_t v54 = (llvm::Value **)(*(void *)&v51 + 16 * v53);
              uint64_t v55 = *v54;
              if (*v54 == v2)
              {
LABEL_51:
                int v58 = (int32x2_t ***)v54[1];
LABEL_52:
                llvm::Value::setValueName(v3, v58);
                unsigned int v59 = *v4;
                if ((*v4 & 0x10000000) != 0)
                {
                  uint64_t v68 = ***(int32x2_t ****)v2;
                  __int32 v69 = v68[21].i32[0];
                  if (v69)
                  {
                    int32x2_t v70 = v68[19];
                    __int32 v71 = v69 - 1;
                    LODWORD(v72) = (v69 - 1) & (v8 ^ (v2 >> 9));
                    uint64_t v73 = (llvm::Value **)(*(void *)&v70 + 16 * v72);
                    unint64_t v74 = *v73;
                    if (*v73 == v2)
                    {
LABEL_69:
                      *uint64_t v73 = (llvm::Value *)-8192;
                      v68[20] = vadd_s32(v68[20], (int32x2_t)0x1FFFFFFFFLL);
                      unsigned int v59 = *v4;
                    }
                    else
                    {
                      int v75 = 1;
                      while (v74 != (llvm::Value *)-4096)
                      {
                        int v76 = v72 + v75++;
                        uint64_t v72 = v76 & v71;
                        unint64_t v74 = *(llvm::Value **)(*(void *)&v70 + 16 * v72);
                        if (v74 == v2)
                        {
                          uint64_t v73 = (llvm::Value **)(*(void *)&v70 + 16 * v72);
                          goto LABEL_69;
                        }
                      }
                    }
                  }
                }
                *uint64_t v4 = v59 & 0xEFFFFFFF;
                uint64_t v60 = ***v3;
                int32x2_t v61 = v60[19];
                uint64_t v62 = v60[21].u32[0];
                if (v62)
                {
                  LODWORD(v63) = (v62 - 1) & ((v3 >> 4) ^ (v3 >> 9));
                  uint64_t v64 = (int32x2_t *****)(*(void *)&v61 + 16 * v63);
                  int v65 = *v64;
                  if (*v64 == v3) {
                    goto LABEL_59;
                  }
                  int v66 = 1;
                  while (v65 != (int32x2_t ****)-4096)
                  {
                    int v67 = v63 + v66++;
                    uint64_t v63 = v67 & (v62 - 1);
                    int v65 = *(int32x2_t *****)(*(void *)&v61 + 16 * v63);
                    if (v65 == v3)
                    {
                      uint64_t v64 = (int32x2_t *****)(*(void *)&v61 + 16 * v63);
                      goto LABEL_59;
                    }
                  }
                }
                uint64_t v64 = (int32x2_t *****)(*(void *)&v61 + 16 * v62);
LABEL_59:
                v64[1][1] = (int32x2_t ***)v3;
                if (v5) {
                  llvm::ValueSymbolTable::reinsertValue(v5, (llvm::Value *)v3);
                }
                return;
              }
              int v56 = 1;
              while (v55 != (llvm::Value *)-4096)
              {
                int v57 = v53 + v56++;
                uint64_t v53 = v57 & (v52 - 1);
                uint64_t v55 = *(llvm::Value **)(*(void *)&v51 + 16 * v53);
                if (v55 == v2)
                {
                  uint64_t v54 = (llvm::Value **)(*(void *)&v51 + 16 * v53);
                  goto LABEL_51;
                }
              }
            }
            uint64_t v54 = (llvm::Value **)(*(void *)&v51 + 16 * v52);
            goto LABEL_51;
          }
          int v15 = 1;
          while (v14 != (llvm::Value *)-4096)
          {
            int v16 = v12 + v15++;
            uint64_t v12 = v16 & (v11 - 1);
            unint64_t v14 = *(llvm::Value **)(*(void *)&v10 + 16 * v12);
            if (v14 == v2)
            {
              unint64_t v13 = (llvm::Value **)(*(void *)&v10 + 16 * v12);
              goto LABEL_15;
            }
          }
        }
        unint64_t v13 = (llvm::Value **)(*(void *)&v10 + 16 * v11);
        goto LABEL_15;
      }
      uint64_t v33 = ***(void ***)v2;
      uint64_t v34 = *(void *)(v33 + 152);
      uint64_t v35 = *(unsigned int *)(v33 + 168);
      if (v35)
      {
        LODWORD(v36) = (v35 - 1) & ((v2 >> 4) ^ (v2 >> 9));
        uint64_t v37 = v34 + 16 * v36;
        uint64_t v38 = *(llvm::Value **)v37;
        if (*(llvm::Value **)v37 == v2)
        {
LABEL_33:
          llvm::Value::setValueName(v3, *(int32x2_t ****)(v37 + 8));
          unsigned int v41 = *v4;
          if ((*v4 & 0x10000000) != 0)
          {
            long long v77 = ***(int32x2_t ****)v2;
            __int32 v78 = v77[21].i32[0];
            if (v78)
            {
              int32x2_t v79 = v77[19];
              __int32 v80 = v78 - 1;
              LODWORD(v81) = (v78 - 1) & ((v2 >> 4) ^ (v2 >> 9));
              unint64_t v82 = (llvm::Value **)(*(void *)&v79 + 16 * v81);
              uint64_t v83 = *v82;
              if (*v82 == v2)
              {
LABEL_84:
                llvm::Constant *v82 = (llvm::Value *)-8192;
                v77[20] = vadd_s32(v77[20], (int32x2_t)0x1FFFFFFFFLL);
                unsigned int v41 = *v4;
              }
              else
              {
                int v84 = 1;
                while (v83 != (llvm::Value *)-4096)
                {
                  int v85 = v81 + v84++;
                  uint64_t v81 = v85 & v80;
                  uint64_t v83 = *(llvm::Value **)(*(void *)&v79 + 16 * v81);
                  if (v83 == v2)
                  {
                    unint64_t v82 = (llvm::Value **)(*(void *)&v79 + 16 * v81);
                    goto LABEL_84;
                  }
                }
              }
            }
          }
          *uint64_t v4 = v41 & 0xEFFFFFFF;
          int v42 = ***v3;
          int32x2_t v43 = v42[19];
          uint64_t v44 = v42[21].u32[0];
          if (v44)
          {
            LODWORD(v45) = (v44 - 1) & ((v3 >> 4) ^ (v3 >> 9));
            uint64_t v46 = (int32x2_t *****)(*(void *)&v43 + 16 * v45);
            uint64_t v47 = *v46;
            if (*v46 == v3)
            {
LABEL_40:
              v46[1][1] = (int32x2_t ***)v3;
              return;
            }
            int v48 = 1;
            while (v47 != (int32x2_t ****)-4096)
            {
              int v49 = v45 + v48++;
              uint64_t v45 = v49 & (v44 - 1);
              uint64_t v47 = *(int32x2_t *****)(*(void *)&v43 + 16 * v45);
              if (v47 == v3)
              {
                uint64_t v46 = (int32x2_t *****)(*(void *)&v43 + 16 * v45);
                goto LABEL_40;
              }
            }
          }
          uint64_t v46 = (int32x2_t *****)(*(void *)&v43 + 16 * v44);
          goto LABEL_40;
        }
        int v39 = 1;
        while (v38 != (llvm::Value *)-4096)
        {
          int v40 = v36 + v39++;
          uint64_t v36 = v40 & (v35 - 1);
          uint64_t v38 = *(llvm::Value **)(v34 + 16 * v36);
          if (v38 == v2)
          {
            uint64_t v37 = v34 + 16 * v36;
            goto LABEL_33;
          }
        }
      }
      uint64_t v37 = v34 + 16 * v35;
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0) {
    return;
  }
  uint64_t v4 = (unsigned int *)((char *)a2 + 20);
LABEL_5:
  if (!sub_1CC62C13C((uint64_t)v3, &v118))
  {
    uint64_t v5 = (llvm::ValueSymbolTable *)v118;
    goto LABEL_7;
  }
LABEL_108:
  __int16 v117 = 257;
  llvm::Value::setNameImpl(v2, v116);
  if (!*((unsigned char *)v2 + 16)) {
    llvm::Function::recalculateIntrinsicID(v2);
  }
}

void llvm::Value::doRAUW(llvm::ValueAsMetadata *this, llvm::Value *a2, llvm::Value *a3)
{
  int v3 = (int)a3;
  if (*((unsigned char *)this + 17)) {
    llvm::ValueHandleBase::ValueIsRAUWd(this, a2, a3);
  }
  if (v3 == 1 && (*((unsigned char *)this + 23) & 8) != 0) {
    llvm::ValueAsMetadata::handleRAUW((uint64_t *)this, a2, a3);
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    uint64_t v7 = (uint64_t *)((char *)a2 + 8);
    do
    {
      uint64_t v8 = *(void *)(v6 + 24);
      if (v8) {
        BOOL v9 = *(unsigned __int8 *)(v8 + 16) - 21 >= 0xFFFFFFEF;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9)
      {
        llvm::Constant::handleOperandChange((uint64_t ***)v8, this, a2);
      }
      else
      {
        if (*(void *)v6)
        {
          **(void **)(v6 + 16) = *(void *)(v6 + 8);
          uint64_t v10 = *(void *)(v6 + 8);
          if (v10) {
            *(void *)(v10 + 16) = *(void *)(v6 + 16);
          }
        }
        *(void *)uint64_t v6 = a2;
        if (a2)
        {
          uint64_t v11 = *v7;
          *(void *)(v6 + 8) = *v7;
          if (v11) {
            *(void *)(v11 + 16) = v6 + 8;
          }
          *(void *)(v6 + 16) = v7;
          *uint64_t v7 = v6;
        }
      }
      uint64_t v6 = *((void *)this + 1);
    }
    while (v6);
  }
  if (*((unsigned char *)this + 16) == 22)
  {
    llvm::BasicBlock::replaceSuccessorsPhiUsesWith(this, this, a2);
  }
}

llvm::ValueHandleBase *llvm::ValueHandleBase::ValueIsRAUWd(llvm::ValueHandleBase *this, llvm::Value *a2, llvm::Value *a3)
{
  int v49 = this;
  uint64_t v4 = ***(void ***)this;
  int v5 = *(_DWORD *)(v4 + 2440);
  if (v5)
  {
    uint64_t v6 = *(void *)(v4 + 2424);
    int v7 = v5 - 1;
    unsigned int v8 = (v5 - 1) & ((this >> 4) ^ (this >> 9));
    BOOL v9 = (llvm::ValueHandleBase **)(v6 + 16 * v8);
    uint64_t v10 = *v9;
    if (*v9 == this) {
      goto LABEL_16;
    }
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != (llvm::ValueHandleBase *)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (llvm::ValueHandleBase *)-8192;
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      BOOL v9 = (llvm::ValueHandleBase **)(v6 + 16 * (v14 & v7));
      uint64_t v10 = *v9;
      if (*v9 == this) {
        goto LABEL_16;
      }
    }
    if (v11) {
      int v15 = v11;
    }
    else {
      int v15 = v9;
    }
  }
  else
  {
    int v15 = 0;
  }
  BOOL v9 = (llvm::ValueHandleBase **)sub_1CC630A80(v4 + 2424, (uint64_t)&v49, (uint64_t *)&v49, v15);
  *BOOL v9 = v49;
  v9[1] = 0;
LABEL_16:
  int v16 = 0;
  uint64_t result = v9[1];
  unint64_t v46 = 0;
  uint64_t v47 = 0;
  unsigned int v18 = (int32x2_t ****)*((void *)result + 2);
  int v48 = v18;
  if (v18 != (int32x2_t ****)-8192 && v18 != 0 && v18 != (int32x2_t ****)-4096)
  {
    uint64_t v20 = (unint64_t **)(*(void *)result & 0xFFFFFFFFFFFFFFF8);
    uint64_t v47 = *v20;
    *uint64_t v20 = &v46;
    unint64_t v46 = (unint64_t)v20;
    int v16 = v47;
    if (v47) {
      unint64_t *v47 = *v47 & 7 | (unint64_t)&v47;
    }
  }
  do
  {
    char v21 = v46;
    unint64_t v22 = v46 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v46 & 0xFFFFFFFFFFFFFFF8) = v16;
    if (v47)
    {
      unint64_t *v47 = *v47 & 7 | v22;
      char v21 = v46;
    }
    else
    {
      size_t v23 = v48;
      unsigned int v24 = ***v48;
      unint64_t v25 = (unint64_t)v24[303];
      if (v25 <= v22)
      {
        uint64_t v26 = v24[305].u32[0];
        if (v25 + 16 * v26 > v22)
        {
          unsigned int v27 = v26 - 1;
          LODWORD(v28) = v27 & ((v48 >> 4) ^ (v48 >> 9));
          int v29 = (int32x2_t *****)(v25 + 16 * v28);
          int v30 = *v29;
          if (v48 == *v29)
          {
LABEL_40:
            *int v29 = (int32x2_t ****)-8192;
            v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
            size_t v23 = v48;
          }
          else
          {
            int v31 = 1;
            while (v30 != (int32x2_t ****)-4096)
            {
              int v32 = v28 + v31++;
              uint64_t v28 = v32 & v27;
              int v30 = *(int32x2_t *****)(v25 + 16 * v28);
              if (v48 == v30)
              {
                int v29 = (int32x2_t *****)(v25 + 16 * v28);
                goto LABEL_40;
              }
            }
          }
          *((unsigned char *)v23 + 17) &= ~1u;
        }
      }
    }
    uint64_t v33 = (unint64_t *)*((void *)result + 1);
    unint64_t v46 = v21 & 7 | ((unint64_t)result + 8);
    uint64_t v47 = v33;
    *((void *)result + 1) = &v46;
    if (v47) {
      unint64_t *v47 = *v47 & 7 | (unint64_t)&v47;
    }
    int v34 = (*(_DWORD *)result >> 1) & 3;
    if (v34 == 1)
    {
      (*(void (**)(void))(*((void *)result - 1) + 16))();
    }
    else if (v34 == 3)
    {
      sub_1CC002D7C(result, (uint64_t)a2);
    }
    int v16 = v47;
    uint64_t result = (llvm::ValueHandleBase *)v47;
  }
  while (v47);
  if (v48 != (int32x2_t ****)-8192 && v48 != (int32x2_t ****)-4096 && v48)
  {
    unint64_t v35 = v46 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v46 & 0xFFFFFFFFFFFFFFF8) = 0;
    if (v47)
    {
      unint64_t *v47 = *v47 & 7 | v35;
    }
    else
    {
      uint64_t v36 = v48;
      uint64_t v37 = ***v48;
      unint64_t v38 = (unint64_t)v37[303];
      if (v38 <= v35)
      {
        uint64_t v39 = v37[305].u32[0];
        if (v38 + 16 * v39 > v35)
        {
          unsigned int v40 = v39 - 1;
          LODWORD(v41) = v40 & ((v48 >> 4) ^ (v48 >> 9));
          int v42 = (int32x2_t *****)(v38 + 16 * v41);
          int32x2_t v43 = *v42;
          if (v48 == *v42)
          {
LABEL_53:
            *int v42 = (int32x2_t ****)-8192;
            v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
            uint64_t v36 = v48;
          }
          else
          {
            int v44 = 1;
            while (v43 != (int32x2_t ****)-4096)
            {
              int v45 = v41 + v44++;
              uint64_t v41 = v45 & v40;
              int32x2_t v43 = *(int32x2_t *****)(v38 + 16 * v41);
              if (v48 == v43)
              {
                int v42 = (int32x2_t *****)(v38 + 16 * v41);
                goto LABEL_53;
              }
            }
          }
          *((unsigned char *)v36 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::Value::replaceAllUsesWith(llvm::Value *this, llvm::Value *a2)
{
  return llvm::Value::doRAUW(this, a2);
}

void llvm::Value::replaceUsesWithIf(llvm::Value *a1, llvm::Value *a2, unsigned int (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  v81[24] = *MEMORY[0x1E4F143B8];
  int32x2_t v79 = v81;
  uint64_t v80 = 0x800000000;
  unint64_t v74 = v78;
  int v75 = v78;
  uint64_t v76 = 8;
  int v77 = 0;
  uint64_t v4 = *((void *)a1 + 1);
  if (!v4) {
    goto LABEL_89;
  }
  unsigned int v8 = (uint64_t *)((char *)a2 + 8);
  do
  {
    uint64_t v9 = v4;
    uint64_t v10 = (uint64_t *)(v4 + 8);
    uint64_t v4 = *(void *)(v4 + 8);
    if (!a3(a4, v9)) {
      continue;
    }
    uint64_t v11 = *(void *)(v9 + 24);
    if (v11) {
      BOOL v12 = *(unsigned __int8 *)(v11 + 16) - 21 >= 0xFFFFFFEF;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12)
    {
      if (*(void *)v9)
      {
        **(void **)(v9 + 16) = *(void *)(v9 + 8);
        uint64_t v13 = *(void *)(v9 + 8);
        if (v13) {
          *(void *)(v13 + 16) = *(void *)(v9 + 16);
        }
      }
      *(void *)uint64_t v9 = a2;
      if (a2)
      {
        uint64_t v14 = *v8;
        uint64_t *v10 = *v8;
        if (v14) {
          *(void *)(v14 + 16) = v10;
        }
        *(void *)(v9 + 16) = v8;
        uint64_t *v8 = v9;
      }
      continue;
    }
    int v15 = v75;
    uint64_t v16 = HIDWORD(v76);
    if (v75 == v74)
    {
      if (HIDWORD(v76))
      {
        uint64_t v17 = 0;
        uint64_t v18 = 8 * HIDWORD(v76);
        uint64_t v19 = (uint64_t *)v75;
        while (*v19 != v11)
        {
          if (*v19 == -2) {
            uint64_t v17 = v19;
          }
          ++v19;
          v18 -= 8;
          if (!v18)
          {
            if (!v17) {
              goto LABEL_23;
            }
            *uint64_t v17 = v11;
            --v77;
            goto LABEL_47;
          }
        }
        continue;
      }
LABEL_23:
      unsigned int v20 = v76;
      if (HIDWORD(v76) < v76)
      {
        ++HIDWORD(v76);
        *(void *)&v75[8 * v16] = v11;
        goto LABEL_47;
      }
    }
    else
    {
      unsigned int v20 = v76;
    }
    if (3 * v20 <= 4 * (HIDWORD(v76) - v77))
    {
      if (v20 >= 0x40) {
        v20 *= 2;
      }
      else {
        unsigned int v20 = 128;
      }
    }
    else if (v20 - HIDWORD(v76) >= v20 >> 3)
    {
      goto LABEL_28;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v74, v20);
    unsigned int v20 = v76;
    int v15 = v75;
LABEL_28:
    unsigned int v21 = v20 - 1;
    unsigned int v22 = (v20 - 1) & ((v11 >> 4) ^ (v11 >> 9));
    size_t v23 = &v15[8 * v22];
    uint64_t v24 = *(void *)v23;
    if (*(void *)v23 == -1)
    {
      unint64_t v25 = 0;
LABEL_40:
      if (v25) {
        int v29 = v25;
      }
      else {
        int v29 = (uint64_t *)v23;
      }
      if (*v29 != v11)
      {
        if (*v29 == -2) {
          --v77;
        }
        else {
          ++HIDWORD(v76);
        }
        *int v29 = v11;
LABEL_47:
        unint64_t v71 = 6;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        sub_1CC002D7C((llvm::ValueHandleBase *)&v71, v11);
        int v30 = (void *)sub_1CD5DB0E4((uint64_t)&v79, (unint64_t)&v71);
        sub_1CC630870((unint64_t *)v79 + 3 * v80, v30);
        LODWORD(v80) = v80 + 1;
        if (v73 != (llvm::Constant *)-8192 && v73 != (llvm::Constant *)-4096 && v73)
        {
          unint64_t v31 = v71 & 0xFFFFFFFFFFFFFFF8;
          *(void *)(v71 & 0xFFFFFFFFFFFFFFF8) = v72;
          if (v72)
          {
            unint64_t *v72 = *v72 & 7 | v31;
          }
          else
          {
            int v32 = v73;
            uint64_t v33 = ***(int32x2_t ****)v73;
            unint64_t v34 = (unint64_t)v33[303];
            if (v34 <= v31)
            {
              uint64_t v35 = v33[305].u32[0];
              if (v34 + 16 * v35 > v31)
              {
                unsigned int v36 = v35 - 1;
                LODWORD(v37) = v36 & ((v73 >> 4) ^ (v73 >> 9));
                unint64_t v38 = (llvm::Constant **)(v34 + 16 * v37);
                uint64_t v39 = *v38;
                if (v73 == *v38)
                {
LABEL_58:
                  *unint64_t v38 = (llvm::Constant *)-8192;
                  v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
                  int v32 = v73;
                }
                else
                {
                  int v40 = 1;
                  while (v39 != (llvm::Constant *)-4096)
                  {
                    int v41 = v37 + v40++;
                    uint64_t v37 = v41 & v36;
                    uint64_t v39 = *(llvm::Constant **)(v34 + 16 * v37);
                    if (v73 == v39)
                    {
                      unint64_t v38 = (llvm::Constant **)(v34 + 16 * v37);
                      goto LABEL_58;
                    }
                  }
                }
                *((unsigned char *)v32 + 17) &= ~1u;
              }
            }
          }
        }
      }
    }
    else
    {
      unint64_t v25 = 0;
      int v26 = 1;
      while (v24 != v11)
      {
        if (v25) {
          BOOL v27 = 0;
        }
        else {
          BOOL v27 = v24 == -2;
        }
        if (v27) {
          unint64_t v25 = (uint64_t *)v23;
        }
        unsigned int v28 = v22 + v26++;
        unsigned int v22 = v28 & v21;
        size_t v23 = &v15[8 * (v28 & v21)];
        uint64_t v24 = *(void *)v23;
        if (*(void *)v23 == -1) {
          goto LABEL_40;
        }
      }
    }
  }
  while (v4);
  while (v80)
  {
    sub_1CD5DABA0(&v71, (uint64_t)&v79);
    llvm::Constant::handleOperandChange((uint64_t ***)v73, a1, a2);
    if (v73 != (llvm::Constant *)-8192 && v73 != (llvm::Constant *)-4096 && v73 != 0)
    {
      unint64_t v43 = v71 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v71 & 0xFFFFFFFFFFFFFFF8) = v72;
      if (v72)
      {
        unint64_t *v72 = *v72 & 7 | v43;
      }
      else
      {
        int v44 = v73;
        int v45 = ***(int32x2_t ****)v73;
        unint64_t v46 = (unint64_t)v45[303];
        if (v46 <= v43)
        {
          uint64_t v47 = v45[305].u32[0];
          if (v46 + 16 * v47 > v43)
          {
            unsigned int v48 = v47 - 1;
            LODWORD(v49) = v48 & ((v73 >> 4) ^ (v73 >> 9));
            uint64_t v50 = (llvm::Constant **)(v46 + 16 * v49);
            int32x2_t v51 = *v50;
            if (v73 == *v50)
            {
LABEL_86:
              *uint64_t v50 = (llvm::Constant *)-8192;
              v45[304] = vadd_s32(v45[304], (int32x2_t)0x1FFFFFFFFLL);
              int v44 = v73;
            }
            else
            {
              int v52 = 1;
              while (v51 != (llvm::Constant *)-4096)
              {
                int v53 = v49 + v52++;
                uint64_t v49 = v53 & v48;
                int32x2_t v51 = *(llvm::Constant **)(v46 + 16 * v49);
                if (v73 == v51)
                {
                  uint64_t v50 = (llvm::Constant **)(v46 + 16 * v49);
                  goto LABEL_86;
                }
              }
            }
            *((unsigned char *)v44 + 17) &= ~1u;
          }
        }
      }
    }
  }
LABEL_89:
  if (v75 == v74)
  {
LABEL_111:
    uint64_t v54 = (char *)v79;
  }
  else
  {
    free(v75);
    uint64_t v54 = (char *)v79;
    if (v80)
    {
      uint64_t v55 = (char *)v79 + 24 * v80;
      do
      {
        uint64_t v56 = *((void *)v55 - 1);
        if (v56 != -8192 && v56 != -4096 && v56 != 0)
        {
          unint64_t v58 = *((void *)v55 - 3) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v58 = *((void *)v55 - 2);
          unsigned int v59 = (unint64_t *)*((void *)v55 - 2);
          if (v59)
          {
            *unsigned int v59 = *v59 & 7 | v58;
          }
          else
          {
            uint64_t v60 = *((void *)v55 - 1);
            int32x2_t v61 = ***(int32x2_t ****)v60;
            unint64_t v62 = (unint64_t)v61[303];
            if (v62 <= v58)
            {
              uint64_t v63 = v61[305].u32[0];
              if (v62 + 16 * v63 > v58)
              {
                unsigned int v64 = v63 - 1;
                LODWORD(v65) = v64 & ((v60 >> 4) ^ (v60 >> 9));
                int v66 = (uint64_t *)(v62 + 16 * v65);
                uint64_t v67 = *v66;
                if (v60 == *v66)
                {
LABEL_108:
                  *int v66 = -8192;
                  v61[304] = vadd_s32(v61[304], (int32x2_t)0x1FFFFFFFFLL);
                  uint64_t v60 = *((void *)v55 - 1);
                }
                else
                {
                  int v68 = 1;
                  while (v67 != -4096)
                  {
                    int v69 = v65 + v68++;
                    uint64_t v65 = v69 & v64;
                    uint64_t v67 = *(void *)(v62 + 16 * v65);
                    if (v60 == v67)
                    {
                      int v66 = (uint64_t *)(v62 + 16 * v65);
                      goto LABEL_108;
                    }
                  }
                }
                *(unsigned char *)(v60 + 17) &= ~1u;
              }
            }
          }
        }
        v55 -= 24;
      }
      while (v55 != v54);
      goto LABEL_111;
    }
  }
  if (v54 != (char *)v81) {
    free(v54);
  }
}

llvm::Value *llvm::Value::stripPointerCasts(llvm::Value *this)
{
  unsigned int v2 = this;
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return v2;
  }
  unsigned int v36 = (char *)v40;
  uint64_t v37 = (char *)v40;
  int v39 = 0;
  uint64_t v38 = 0x100000004;
  v40[0] = this;
  while (1)
  {
    while (1)
    {
      unsigned int v3 = *((unsigned __int8 *)v2 + 16);
      if (v3 == 62)
      {
LABEL_8:
        if (!sub_1CC543B10((uint64_t)v2)) {
          goto LABEL_88;
        }
LABEL_9:
        int v5 = *((_DWORD *)v2 + 5);
        if ((v5 & 0x40000000) != 0) {
          uint64_t v6 = (llvm::Value **)*((void *)v2 - 1);
        }
        else {
          uint64_t v6 = (llvm::Value **)((char *)v2 - 32 * (v5 & 0x7FFFFFF));
        }
        unsigned int v2 = *v6;
        goto LABEL_36;
      }
      if (v3 == 5)
      {
        int v4 = *((unsigned __int16 *)v2 + 9);
        switch(v4)
        {
          case '2':
            goto LABEL_9;
          case '1':
            goto LABEL_16;
          case '""':
            goto LABEL_8;
        }
LABEL_29:
        unsigned int v12 = 0;
        uint64_t v1 = v2;
        goto LABEL_30;
      }
      if (v3 < 0x1C) {
        goto LABEL_29;
      }
      if (*((unsigned __int8 *)v2 + 16) <= 0x4Cu)
      {
        if (v3 != 33 && v3 != 39) {
          goto LABEL_29;
        }
      }
      else if (v3 != 84)
      {
        if (v3 == 78) {
          goto LABEL_9;
        }
        if (v3 == 77)
        {
LABEL_16:
          int v7 = *((_DWORD *)v2 + 5);
          if ((v7 & 0x40000000) != 0) {
            unsigned int v8 = (llvm::Value **)*((void *)v2 - 1);
          }
          else {
            unsigned int v8 = (llvm::Value **)((char *)v2 - 32 * (v7 & 0x7FFFFFF));
          }
          unsigned int v2 = *v8;
          uint64_t v13 = *v8;
          if (*(unsigned char *)(*(void *)*v8 + 8) != 15) {
            goto LABEL_89;
          }
          goto LABEL_36;
        }
        goto LABEL_29;
      }
      uint64_t v9 = *((void *)v2 + 8);
      if (v9 && (*(unsigned char *)(v9 + 29) & 0x40) != 0)
      {
        uint64_t v29 = *(unsigned int *)(v9 + 8);
        if (!v29) {
          goto LABEL_85;
        }
        uint64_t v30 = v9 + 40;
        int v31 = -1;
        while (!*(void *)v30 || (*(unsigned char *)(*(void *)v30 + 17) & 0x40) == 0)
        {
          ++v31;
          v30 += 8;
          if (!--v29) {
            goto LABEL_85;
          }
        }
      }
      else
      {
        uint64_t v10 = *((void *)v2 - 4);
        if (!v10) {
          goto LABEL_29;
        }
        if (*(unsigned char *)(v10 + 16)) {
          goto LABEL_29;
        }
        if (*(void *)(v10 + 24) != *((void *)v2 + 9)) {
          goto LABEL_29;
        }
        uint64_t v11 = *(void *)(v10 + 112);
        if (!v11 || (*(unsigned char *)(v11 + 29) & 0x40) == 0) {
          goto LABEL_29;
        }
        uint64_t v32 = *(unsigned int *)(v11 + 8);
        if (!v32)
        {
LABEL_85:
          int v31 = 0;
          goto LABEL_86;
        }
        uint64_t v33 = v11 + 40;
        int v31 = -1;
        while (!*(void *)v33 || (*(unsigned char *)(*(void *)v33 + 17) & 0x40) == 0)
        {
          ++v31;
          v33 += 8;
          if (!--v32) {
            goto LABEL_85;
          }
        }
      }
LABEL_86:
      unint64_t v34 = (llvm::Value *)*((void *)v2 + 4 * (v31 - 1) + -4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
      if (!v34) {
        goto LABEL_29;
      }
      unsigned int v12 = 3;
      unsigned int v2 = v34;
LABEL_30:
      if (v12 <= 1) {
        unsigned int v12 = 1;
      }
      uint64_t v13 = v1;
      if (v12 != 3) {
        goto LABEL_89;
      }
LABEL_36:
      uint64_t v14 = v37;
      uint64_t v15 = HIDWORD(v38);
      if (v37 != v36) {
        break;
      }
      if (HIDWORD(v38))
      {
        uint64_t v16 = 0;
        uint64_t v17 = 8 * HIDWORD(v38);
        uint64_t v18 = (llvm::Value **)v37;
        do
        {
          if (*v18 == v2) {
            return v2;
          }
          if (*v18 == (llvm::Value *)-2) {
            uint64_t v16 = v18;
          }
          ++v18;
          v17 -= 8;
        }
        while (v17);
        if (!v16) {
          goto LABEL_44;
        }
        *uint64_t v16 = v2;
        --v39;
      }
      else
      {
LABEL_44:
        unsigned int v19 = v38;
        if (HIDWORD(v38) >= v38) {
          goto LABEL_47;
        }
        ++HIDWORD(v38);
        *(void *)&v37[8 * v15] = v2;
      }
    }
    unsigned int v19 = v38;
LABEL_47:
    if (3 * v19 <= 4 * (HIDWORD(v38) - v39))
    {
      if (v19 >= 0x40) {
        v19 *= 2;
      }
      else {
        unsigned int v19 = 128;
      }
    }
    else if (v19 - HIDWORD(v38) >= v19 >> 3)
    {
      goto LABEL_49;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v36, v19);
    unsigned int v19 = v38;
    uint64_t v14 = v37;
LABEL_49:
    unsigned int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    unsigned int v22 = &v14[8 * v21];
    size_t v23 = *(llvm::Value **)v22;
    if (*(void *)v22 != -1) {
      break;
    }
    uint64_t v24 = 0;
LABEL_61:
    if (v24) {
      unsigned int v28 = v24;
    }
    else {
      unsigned int v28 = (llvm::Value **)v22;
    }
    if (*v28 == v2) {
      goto LABEL_88;
    }
    if (*v28 == (llvm::Value *)-2) {
      --v39;
    }
    else {
      ++HIDWORD(v38);
    }
    *unsigned int v28 = v2;
  }
  uint64_t v24 = 0;
  int v25 = 1;
  while (v23 != v2)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == (llvm::Value *)-2;
    }
    if (v26) {
      uint64_t v24 = (llvm::Value **)v22;
    }
    unsigned int v27 = v21 + v25++;
    unsigned int v21 = v27 & v20;
    unsigned int v22 = &v14[8 * (v27 & v20)];
    size_t v23 = *(llvm::Value **)v22;
    if (*(void *)v22 == -1) {
      goto LABEL_61;
    }
  }
LABEL_88:
  uint64_t v13 = v2;
LABEL_89:
  if (v37 != v36) {
    free(v37);
  }
  return v13;
}

llvm::Value *llvm::Value::stripPointerCastsAndAliases(llvm::Value *this)
{
  unsigned int v2 = this;
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return v2;
  }
  uint64_t v37 = (char *)v41;
  uint64_t v38 = (char *)v41;
  int v40 = 0;
  uint64_t v39 = 0x100000004;
  v41[0] = this;
  while (1)
  {
    while (1)
    {
      unsigned int v3 = *((unsigned __int8 *)v2 + 16);
      if (v3 == 62)
      {
LABEL_7:
        if (!sub_1CC543B10((uint64_t)v2)) {
          goto LABEL_91;
        }
LABEL_8:
        int v5 = *((_DWORD *)v2 + 5);
        if ((v5 & 0x40000000) != 0) {
          uint64_t v6 = (llvm::Value **)*((void *)v2 - 1);
        }
        else {
          uint64_t v6 = (llvm::Value **)((char *)v2 - 32 * (v5 & 0x7FFFFFF));
        }
LABEL_18:
        unsigned int v2 = *v6;
        goto LABEL_19;
      }
      if (v3 == 5)
      {
        unsigned int v4 = *((unsigned __int16 *)v2 + 9);
        if (v4 == 49) {
          goto LABEL_12;
        }
        if (v4 == 34) {
          goto LABEL_7;
        }
      }
      else
      {
        unsigned int v4 = v3 - 28;
        if (v3 < 0x1C) {
          goto LABEL_16;
        }
        if (v3 == 77)
        {
LABEL_12:
          int v7 = *((_DWORD *)v2 + 5);
          if ((v7 & 0x40000000) != 0) {
            unsigned int v8 = (llvm::Value **)*((void *)v2 - 1);
          }
          else {
            unsigned int v8 = (llvm::Value **)((char *)v2 - 32 * (v7 & 0x7FFFFFF));
          }
          unsigned int v2 = *v8;
          int v29 = *(unsigned __int8 *)(*(void *)*v8 + 8);
          BOOL v21 = v29 == 15;
          unsigned int v28 = v29 != 15;
          if (!v21) {
            uint64_t v1 = v2;
          }
          if (!v28) {
            goto LABEL_19;
          }
          goto LABEL_69;
        }
      }
      if (v4 == 50) {
        goto LABEL_8;
      }
LABEL_16:
      if (v3 == 1)
      {
        uint64_t v6 = (llvm::Value **)((char *)v2 - 32);
        goto LABEL_18;
      }
      if (v3 < 0x1C || (unsigned int v24 = v3 - 33, v24 > 0x33) || ((1 << v24) & 0x8000000000041) == 0)
      {
LABEL_61:
        unsigned int v28 = 0;
        uint64_t v1 = v2;
        goto LABEL_62;
      }
      uint64_t v25 = *((void *)v2 + 8);
      if (v25 && (*(unsigned char *)(v25 + 29) & 0x40) != 0)
      {
        uint64_t v30 = *(unsigned int *)(v25 + 8);
        if (!v30) {
          goto LABEL_88;
        }
        uint64_t v31 = v25 + 40;
        int v32 = -1;
        while (!*(void *)v31 || (*(unsigned char *)(*(void *)v31 + 17) & 0x40) == 0)
        {
          ++v32;
          v31 += 8;
          if (!--v30) {
            goto LABEL_88;
          }
        }
      }
      else
      {
        uint64_t v26 = *((void *)v2 - 4);
        if (!v26) {
          goto LABEL_61;
        }
        if (*(unsigned char *)(v26 + 16)) {
          goto LABEL_61;
        }
        if (*(void *)(v26 + 24) != *((void *)v2 + 9)) {
          goto LABEL_61;
        }
        uint64_t v27 = *(void *)(v26 + 112);
        if (!v27 || (*(unsigned char *)(v27 + 29) & 0x40) == 0) {
          goto LABEL_61;
        }
        uint64_t v33 = *(unsigned int *)(v27 + 8);
        if (!v33)
        {
LABEL_88:
          int v32 = 0;
          goto LABEL_89;
        }
        uint64_t v34 = v27 + 40;
        int v32 = -1;
        while (!*(void *)v34 || (*(unsigned char *)(*(void *)v34 + 17) & 0x40) == 0)
        {
          ++v32;
          v34 += 8;
          if (!--v33) {
            goto LABEL_88;
          }
        }
      }
LABEL_89:
      uint64_t v35 = (llvm::Value *)*((void *)v2 + 4 * (v32 - 1) + -4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
      if (!v35) {
        goto LABEL_61;
      }
      unsigned int v28 = 3;
      unsigned int v2 = v35;
LABEL_62:
      if (v28 <= 1) {
        unsigned int v28 = 1;
      }
LABEL_69:
      if (v28 != 3) {
        goto LABEL_92;
      }
LABEL_19:
      uint64_t v9 = v38;
      uint64_t v10 = HIDWORD(v39);
      if (v38 != v37) {
        break;
      }
      if (HIDWORD(v39))
      {
        uint64_t v11 = 0;
        uint64_t v12 = 8 * HIDWORD(v39);
        uint64_t v13 = (llvm::Value **)v38;
        do
        {
          if (*v13 == v2) {
            return v2;
          }
          if (*v13 == (llvm::Value *)-2) {
            uint64_t v11 = v13;
          }
          ++v13;
          v12 -= 8;
        }
        while (v12);
        if (!v11) {
          goto LABEL_27;
        }
        *uint64_t v11 = v2;
        --v40;
      }
      else
      {
LABEL_27:
        unsigned int v14 = v39;
        if (HIDWORD(v39) >= v39) {
          goto LABEL_30;
        }
        ++HIDWORD(v39);
        *(void *)&v38[8 * v10] = v2;
      }
    }
    unsigned int v14 = v39;
LABEL_30:
    if (3 * v14 <= 4 * (HIDWORD(v39) - v40))
    {
      if (v14 >= 0x40) {
        v14 *= 2;
      }
      else {
        unsigned int v14 = 128;
      }
    }
    else if (v14 - HIDWORD(v39) >= v14 >> 3)
    {
      goto LABEL_32;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v37, v14);
    unsigned int v14 = v39;
    uint64_t v9 = v38;
LABEL_32:
    unsigned int v15 = v14 - 1;
    unsigned int v16 = (v14 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    uint64_t v17 = &v9[8 * v16];
    uint64_t v18 = *(llvm::Value **)v17;
    if (*(void *)v17 != -1) {
      break;
    }
    unsigned int v19 = 0;
LABEL_44:
    if (v19) {
      size_t v23 = v19;
    }
    else {
      size_t v23 = (llvm::Value **)v17;
    }
    if (*v23 == v2) {
      goto LABEL_91;
    }
    if (*v23 == (llvm::Value *)-2) {
      --v40;
    }
    else {
      ++HIDWORD(v39);
    }
    *size_t v23 = v2;
  }
  unsigned int v19 = 0;
  int v20 = 1;
  while (v18 != v2)
  {
    if (v19) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v18 == (llvm::Value *)-2;
    }
    if (v21) {
      unsigned int v19 = (llvm::Value **)v17;
    }
    unsigned int v22 = v16 + v20++;
    unsigned int v16 = v22 & v15;
    uint64_t v17 = &v9[8 * (v22 & v15)];
    uint64_t v18 = *(llvm::Value **)v17;
    if (*(void *)v17 == -1) {
      goto LABEL_44;
    }
  }
LABEL_91:
  uint64_t v1 = v2;
LABEL_92:
  if (v38 != v37) {
    free(v38);
  }
  return v1;
}

llvm::Value *llvm::Value::stripPointerCastsSameRepresentation(llvm::Value *this)
{
  unsigned int v2 = this;
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return v2;
  }
  unsigned int v36 = (char *)v40;
  uint64_t v37 = (char *)v40;
  int v39 = 0;
  uint64_t v38 = 0x100000004;
  v40[0] = this;
  while (1)
  {
    while (1)
    {
      unsigned int v3 = *((unsigned __int8 *)v2 + 16);
      if (v3 == 62) {
        goto LABEL_7;
      }
      if (v3 != 5)
      {
        if (v3 < 0x1C) {
          goto LABEL_28;
        }
        if (*((unsigned __int8 *)v2 + 16) > 0x4Cu)
        {
          if (v3 != 84)
          {
            if (v3 == 77)
            {
LABEL_19:
              int v7 = *((_DWORD *)v2 + 5);
              if ((v7 & 0x40000000) != 0) {
                unsigned int v8 = (llvm::Value **)*((void *)v2 - 1);
              }
              else {
                unsigned int v8 = (llvm::Value **)((char *)v2 - 32 * (v7 & 0x7FFFFFF));
              }
              unsigned int v2 = *v8;
              uint64_t v13 = *v8;
              if (*(unsigned char *)(*(void *)*v8 + 8) != 15) {
                goto LABEL_88;
              }
              goto LABEL_35;
            }
            goto LABEL_28;
          }
        }
        else if (v3 != 33 && v3 != 39)
        {
          goto LABEL_28;
        }
        uint64_t v9 = *((void *)v2 + 8);
        if (v9 && (*(unsigned char *)(v9 + 29) & 0x40) != 0)
        {
          uint64_t v29 = *(unsigned int *)(v9 + 8);
          if (v29)
          {
            uint64_t v30 = v9 + 40;
            int v31 = -1;
            while (!*(void *)v30 || (*(unsigned char *)(*(void *)v30 + 17) & 0x40) == 0)
            {
              ++v31;
              v30 += 8;
              if (!--v29) {
                goto LABEL_84;
              }
            }
LABEL_85:
            uint64_t v34 = (llvm::Value *)*((void *)v2 + 4 * (v31 - 1) + -4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
            if (v34)
            {
              unsigned int v12 = 3;
              unsigned int v2 = v34;
LABEL_29:
              if (v12 <= 1) {
                unsigned int v12 = 1;
              }
              uint64_t v13 = v1;
              if (v12 != 3) {
                goto LABEL_88;
              }
              goto LABEL_35;
            }
LABEL_28:
            unsigned int v12 = 0;
            uint64_t v1 = v2;
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v10 = *((void *)v2 - 4);
          if (!v10) {
            goto LABEL_28;
          }
          if (*(unsigned char *)(v10 + 16)) {
            goto LABEL_28;
          }
          if (*(void *)(v10 + 24) != *((void *)v2 + 9)) {
            goto LABEL_28;
          }
          uint64_t v11 = *(void *)(v10 + 112);
          if (!v11 || (*(unsigned char *)(v11 + 29) & 0x40) == 0) {
            goto LABEL_28;
          }
          uint64_t v32 = *(unsigned int *)(v11 + 8);
          if (v32)
          {
            uint64_t v33 = v11 + 40;
            int v31 = -1;
            while (!*(void *)v33 || (*(unsigned char *)(*(void *)v33 + 17) & 0x40) == 0)
            {
              ++v31;
              v33 += 8;
              if (!--v32) {
                goto LABEL_84;
              }
            }
            goto LABEL_85;
          }
        }
LABEL_84:
        int v31 = 0;
        goto LABEL_85;
      }
      int v4 = *((unsigned __int16 *)v2 + 9);
      if (v4 == 49) {
        goto LABEL_19;
      }
      if (v4 != 34) {
        goto LABEL_28;
      }
LABEL_7:
      if (!sub_1CC543B10((uint64_t)v2)) {
        goto LABEL_87;
      }
      int v5 = *((_DWORD *)v2 + 5);
      uint64_t v6 = (v5 & 0x40000000) != 0
         ? (llvm::Value **)*((void *)v2 - 1)
         : (llvm::Value **)((char *)v2 - 32 * (v5 & 0x7FFFFFF));
      unsigned int v2 = *v6;
LABEL_35:
      unsigned int v14 = v37;
      uint64_t v15 = HIDWORD(v38);
      if (v37 != v36) {
        break;
      }
      if (HIDWORD(v38))
      {
        unsigned int v16 = 0;
        uint64_t v17 = 8 * HIDWORD(v38);
        uint64_t v18 = (llvm::Value **)v37;
        do
        {
          if (*v18 == v2) {
            return v2;
          }
          if (*v18 == (llvm::Value *)-2) {
            unsigned int v16 = v18;
          }
          ++v18;
          v17 -= 8;
        }
        while (v17);
        if (!v16) {
          goto LABEL_43;
        }
        *unsigned int v16 = v2;
        --v39;
      }
      else
      {
LABEL_43:
        unsigned int v19 = v38;
        if (HIDWORD(v38) >= v38) {
          goto LABEL_46;
        }
        ++HIDWORD(v38);
        *(void *)&v37[8 * v15] = v2;
      }
    }
    unsigned int v19 = v38;
LABEL_46:
    if (3 * v19 <= 4 * (HIDWORD(v38) - v39))
    {
      if (v19 >= 0x40) {
        v19 *= 2;
      }
      else {
        unsigned int v19 = 128;
      }
    }
    else if (v19 - HIDWORD(v38) >= v19 >> 3)
    {
      goto LABEL_48;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v36, v19);
    unsigned int v19 = v38;
    unsigned int v14 = v37;
LABEL_48:
    unsigned int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    unsigned int v22 = &v14[8 * v21];
    size_t v23 = *(llvm::Value **)v22;
    if (*(void *)v22 != -1) {
      break;
    }
    unsigned int v24 = 0;
LABEL_60:
    if (v24) {
      unsigned int v28 = v24;
    }
    else {
      unsigned int v28 = (llvm::Value **)v22;
    }
    if (*v28 == v2) {
      goto LABEL_87;
    }
    if (*v28 == (llvm::Value *)-2) {
      --v39;
    }
    else {
      ++HIDWORD(v38);
    }
    *unsigned int v28 = v2;
  }
  unsigned int v24 = 0;
  int v25 = 1;
  while (v23 != v2)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == (llvm::Value *)-2;
    }
    if (v26) {
      unsigned int v24 = (llvm::Value **)v22;
    }
    unsigned int v27 = v21 + v25++;
    unsigned int v21 = v27 & v20;
    unsigned int v22 = &v14[8 * (v27 & v20)];
    size_t v23 = *(llvm::Value **)v22;
    if (*(void *)v22 == -1) {
      goto LABEL_60;
    }
  }
LABEL_87:
  uint64_t v13 = v2;
LABEL_88:
  if (v37 != v36) {
    free(v37);
  }
  return v13;
}

llvm::Value *llvm::Value::stripInBoundsConstantOffsets(llvm::Value *this)
{
  unsigned int v2 = this;
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return v2;
  }
  unsigned int v3 = (llvm::Value **)v45;
  int v41 = (llvm::Value **)v45;
  int v42 = (llvm::Value **)v45;
  int v44 = 0;
  uint64_t v43 = 0x100000004;
  v45[0] = this;
  unsigned int v4 = 4;
  for (uint64_t i = (llvm::Value **)v45; ; uint64_t i = v42)
  {
    unsigned int v6 = *((unsigned __int8 *)v2 + 16);
    if (v6 == 62)
    {
LABEL_8:
      int v8 = *((_DWORD *)v2 + 5);
      if ((v8 & 0x40000000) != 0)
      {
        uint64_t v10 = (char *)*((void *)v2 - 1);
        uint64_t v9 = v8 & 0x7FFFFFF;
      }
      else
      {
        uint64_t v9 = v8 & 0x7FFFFFF;
        uint64_t v10 = (char *)v2 - 32 * v9;
      }
      uint64_t v13 = (uint64_t *)(v10 + 32);
      uint64_t v14 = 32 * v9 - 32;
      while (v14)
      {
        uint64_t v15 = *v13;
        v13 += 4;
        v14 -= 32;
        if (*(unsigned char *)(v15 + 16) != 16) {
          goto LABEL_97;
        }
      }
      if ((*((unsigned char *)v2 + 17) & 2) == 0) {
        goto LABEL_97;
      }
      if ((v8 & 0x40000000) == 0)
      {
        unsigned int v16 = (llvm::Value **)((char *)v2 - 32 * v9);
LABEL_28:
        unsigned int v2 = *v16;
        goto LABEL_45;
      }
LABEL_27:
      unsigned int v16 = (llvm::Value **)*((void *)v2 - 1);
      goto LABEL_28;
    }
    if (v6 == 5)
    {
      int v7 = *((unsigned __int16 *)v2 + 9);
      switch(v7)
      {
        case '2':
          goto LABEL_25;
        case '1':
LABEL_15:
          int v11 = *((_DWORD *)v2 + 5);
          if ((v11 & 0x40000000) != 0) {
            unsigned int v12 = (llvm::Value **)*((void *)v2 - 1);
          }
          else {
            unsigned int v12 = (llvm::Value **)((char *)v2 - 32 * (v11 & 0x7FFFFFF));
          }
          unsigned int v2 = *v12;
          if (*(unsigned char *)(*(void *)*v12 + 8) != 15) {
            goto LABEL_97;
          }
          goto LABEL_45;
        case '""':
          goto LABEL_8;
      }
      goto LABEL_38;
    }
    if (v6 < 0x1C) {
      goto LABEL_38;
    }
    if (*((unsigned __int8 *)v2 + 16) <= 0x4Cu)
    {
      if (v6 != 33 && v6 != 39) {
        goto LABEL_38;
      }
    }
    else if (v6 != 84)
    {
      if (v6 != 78)
      {
        if (v6 == 77) {
          goto LABEL_15;
        }
LABEL_38:
        unsigned int v21 = 0;
        uint64_t v1 = v2;
        goto LABEL_39;
      }
LABEL_25:
      int v17 = *((_DWORD *)v2 + 5);
      if ((v17 & 0x40000000) == 0)
      {
        unsigned int v16 = (llvm::Value **)((char *)v2 - 32 * (v17 & 0x7FFFFFF));
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    uint64_t v18 = *((void *)v2 + 8);
    if (v18 && (*(unsigned char *)(v18 + 29) & 0x40) != 0)
    {
      uint64_t v34 = *(unsigned int *)(v18 + 8);
      if (!v34) {
        goto LABEL_93;
      }
      uint64_t v35 = v18 + 40;
      int v36 = -1;
      while (!*(void *)v35 || (*(unsigned char *)(*(void *)v35 + 17) & 0x40) == 0)
      {
        ++v36;
        v35 += 8;
        if (!--v34) {
          goto LABEL_93;
        }
      }
    }
    else
    {
      uint64_t v19 = *((void *)v2 - 4);
      if (!v19) {
        goto LABEL_38;
      }
      if (*(unsigned char *)(v19 + 16)) {
        goto LABEL_38;
      }
      if (*(void *)(v19 + 24) != *((void *)v2 + 9)) {
        goto LABEL_38;
      }
      uint64_t v20 = *(void *)(v19 + 112);
      if (!v20 || (*(unsigned char *)(v20 + 29) & 0x40) == 0) {
        goto LABEL_38;
      }
      uint64_t v37 = *(unsigned int *)(v20 + 8);
      if (!v37)
      {
LABEL_93:
        int v36 = 0;
        goto LABEL_94;
      }
      uint64_t v38 = v20 + 40;
      int v36 = -1;
      while (!*(void *)v38 || (*(unsigned char *)(*(void *)v38 + 17) & 0x40) == 0)
      {
        ++v36;
        v38 += 8;
        if (!--v37) {
          goto LABEL_93;
        }
      }
    }
LABEL_94:
    int v39 = (llvm::Value *)*((void *)v2 + 4 * (v36 - 1) + -4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
    if (!v39) {
      goto LABEL_38;
    }
    unsigned int v21 = 3;
    unsigned int v2 = v39;
LABEL_39:
    if (v21 <= 1) {
      unsigned int v21 = 1;
    }
    if (v21 != 3)
    {
      unsigned int v2 = v1;
      goto LABEL_97;
    }
LABEL_45:
    uint64_t v22 = HIDWORD(v43);
    if (i != v3) {
      goto LABEL_55;
    }
    if (HIDWORD(v43)) {
      break;
    }
LABEL_53:
    if (HIDWORD(v43) < v4)
    {
      ++HIDWORD(v43);
      v3[v22] = v2;
      goto LABEL_75;
    }
LABEL_55:
    if (3 * v4 <= 4 * (HIDWORD(v43) - v44))
    {
      if (v4 >= 0x40) {
        v4 *= 2;
      }
      else {
        unsigned int v4 = 128;
      }
LABEL_81:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v41, v4);
      unsigned int v4 = v43;
      uint64_t i = v42;
      goto LABEL_57;
    }
    if (v4 - HIDWORD(v43) < v4 >> 3) {
      goto LABEL_81;
    }
LABEL_57:
    unsigned int v26 = v4 - 1;
    unsigned int v27 = (v4 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    unsigned int v28 = &i[v27];
    uint64_t v29 = *v28;
    if (*v28 != (llvm::Value *)-1)
    {
      uint64_t v30 = 0;
      int v31 = 1;
      while (v29 != v2)
      {
        if (v30) {
          BOOL v32 = 0;
        }
        else {
          BOOL v32 = v29 == (llvm::Value *)-2;
        }
        if (v32) {
          uint64_t v30 = v28;
        }
        unsigned int v33 = v27 + v31++;
        unsigned int v27 = v33 & v26;
        unsigned int v28 = &i[v33 & v26];
        uint64_t v29 = *v28;
        if (*v28 == (llvm::Value *)-1) {
          goto LABEL_69;
        }
      }
LABEL_96:
      unsigned int v3 = v41;
      uint64_t i = v42;
LABEL_97:
      if (i != v3) {
        free(i);
      }
      return v2;
    }
    uint64_t v30 = 0;
LABEL_69:
    if (v30) {
      unsigned int v28 = v30;
    }
    if (*v28 == v2) {
      goto LABEL_96;
    }
    if (*v28 == (llvm::Value *)-2) {
      --v44;
    }
    else {
      ++HIDWORD(v43);
    }
    *unsigned int v28 = v2;
LABEL_75:
    unsigned int v3 = v41;
  }
  size_t v23 = 0;
  uint64_t v24 = 8 * HIDWORD(v43);
  int v25 = v3;
  while (*v25 != v2)
  {
    if (*v25 == (llvm::Value *)-2) {
      size_t v23 = v25;
    }
    ++v25;
    v24 -= 8;
    if (!v24)
    {
      if (!v23) {
        goto LABEL_53;
      }
      *size_t v23 = v2;
      --v44;
      goto LABEL_75;
    }
  }
  return v2;
}

llvm::Value *llvm::Value::stripPointerCastsForAliasAnalysis(llvm::Value *this)
{
  unsigned int v2 = this;
  if (*(unsigned char *)(*(void *)this + 8) != 15) {
    return v2;
  }
  int v36 = (char *)v40;
  uint64_t v37 = (char *)v40;
  int v39 = 0;
  uint64_t v38 = 0x100000004;
  v40[0] = this;
  while (1)
  {
    while (1)
    {
      unsigned int v3 = *((unsigned __int8 *)v2 + 16);
      if (v3 == 62)
      {
LABEL_8:
        if (!sub_1CC543B10((uint64_t)v2)) {
          goto LABEL_101;
        }
LABEL_9:
        int v5 = *((_DWORD *)v2 + 5);
        if ((v5 & 0x40000000) != 0) {
LABEL_45:
        }
          unsigned int v6 = (llvm::Value **)*((void *)v2 - 1);
        else {
          unsigned int v6 = (llvm::Value **)((char *)v2 - 32 * (v5 & 0x7FFFFFF));
        }
LABEL_46:
        unsigned int v2 = *v6;
        goto LABEL_47;
      }
      if (v3 == 5)
      {
        int v4 = *((unsigned __int16 *)v2 + 9);
        switch(v4)
        {
          case '2':
            goto LABEL_9;
          case '1':
LABEL_18:
            int v9 = *((_DWORD *)v2 + 5);
            if ((v9 & 0x40000000) != 0) {
              int v7 = (char *)*((void *)v2 - 1);
            }
            else {
              int v7 = (char *)v2 - 32 * (v9 & 0x7FFFFFF);
            }
            unsigned int v2 = *(llvm::Value **)v7;
            int v12 = *(unsigned __int8 *)(**(void **)v7 + 8);
            BOOL v26 = v12 == 15;
            LODWORD(v7) = v12 != 15;
            if (!v26) {
              uint64_t v1 = v2;
            }
            if (!v7) {
              goto LABEL_47;
            }
            goto LABEL_40;
          case '""':
            goto LABEL_8;
        }
      }
      else if (v3 >= 0x1C)
      {
        LODWORD(v7) = 0;
        int v8 = v2;
        switch(*((unsigned char *)v2 + 16))
        {
          case 'M':
            goto LABEL_18;
          case 'N':
            goto LABEL_9;
          case 'O':
          case 'P':
          case 'Q':
          case 'R':
            goto LABEL_14;
          case 'S':
            int v13 = *((_DWORD *)v2 + 5);
            if ((v13 & 0x7FFFFFF) != 1) {
              goto LABEL_12;
            }
            if ((v13 & 0x40000000) != 0) {
              goto LABEL_45;
            }
            unsigned int v6 = (llvm::Value **)((char *)v2 - 32);
            goto LABEL_46;
          case 'T':
            goto LABEL_22;
          default:
            if (v3 != 33 && v3 != 39) {
              goto LABEL_13;
            }
LABEL_22:
            uint64_t v10 = *((void *)v2 + 8);
            if (v10 && (*(unsigned char *)(v10 + 29) & 0x40) != 0)
            {
              uint64_t v29 = *(unsigned int *)(v10 + 8);
              if (!v29) {
                goto LABEL_96;
              }
              uint64_t v30 = v10 + 40;
              int v31 = -1;
              while (!*(void *)v30 || (*(unsigned char *)(*(void *)v30 + 17) & 0x40) == 0)
              {
                ++v31;
                v30 += 8;
                if (!--v29) {
                  goto LABEL_96;
                }
              }
            }
            else
            {
              int v7 = (char *)*((void *)v2 - 4);
              if (!v7) {
                goto LABEL_13;
              }
              if (v7[16]) {
                goto LABEL_29;
              }
              if (*((void *)v7 + 3) != *((void *)v2 + 9)) {
                goto LABEL_29;
              }
              uint64_t v11 = *((void *)v7 + 14);
              if (!v11 || (*(unsigned char *)(v11 + 29) & 0x40) == 0) {
                goto LABEL_29;
              }
              uint64_t v32 = *(unsigned int *)(v11 + 8);
              if (!v32)
              {
LABEL_96:
                int v31 = 0;
                goto LABEL_97;
              }
              uint64_t v33 = v11 + 40;
              int v31 = -1;
              while (!*(void *)v33 || (*(unsigned char *)(*(void *)v33 + 17) & 0x40) == 0)
              {
                ++v31;
                v33 += 8;
                if (!--v32) {
                  goto LABEL_96;
                }
              }
            }
LABEL_97:
            uint64_t v34 = (llvm::Value *)*((void *)v2 + 4 * (v31 - 1) + -4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
            if (v34)
            {
              LODWORD(v7) = 3;
              unsigned int v2 = v34;
              goto LABEL_35;
            }
            int v7 = (char *)*((void *)v2 - 4);
            if (v7)
            {
LABEL_29:
              if (!v7[16]
                && (*((void *)v7 + 3) == *((void *)v2 + 9) && *((_DWORD *)v7 + 9) == 166
                 || *((void *)v7 + 3) == *((void *)v2 + 9) && *((_DWORD *)v7 + 9) == 290))
              {
                unsigned int v2 = (llvm::Value *)*((void *)v2 - 4 * (*((_DWORD *)v2 + 5) & 0x7FFFFFF));
                LODWORD(v7) = 3;
LABEL_35:
                int v8 = v1;
                goto LABEL_14;
              }
              goto LABEL_12;
            }
            break;
        }
        goto LABEL_13;
      }
LABEL_12:
      LODWORD(v7) = 0;
LABEL_13:
      int v8 = v2;
LABEL_14:
      if (v7 <= 1) {
        LODWORD(v7) = 1;
      }
      uint64_t v1 = v8;
LABEL_40:
      if (v7 != 3) {
        goto LABEL_102;
      }
LABEL_47:
      uint64_t v14 = v37;
      uint64_t v15 = HIDWORD(v38);
      if (v37 != v36) {
        break;
      }
      if (!HIDWORD(v38)) {
        goto LABEL_55;
      }
      unsigned int v16 = 0;
      uint64_t v17 = 8 * HIDWORD(v38);
      uint64_t v18 = (llvm::Value **)v37;
      do
      {
        if (*v18 == v2) {
          return v2;
        }
        if (*v18 == (llvm::Value *)-2) {
          unsigned int v16 = v18;
        }
        ++v18;
        v17 -= 8;
      }
      while (v17);
      if (v16)
      {
        *unsigned int v16 = v2;
        --v39;
      }
      else
      {
LABEL_55:
        unsigned int v19 = v38;
        if (HIDWORD(v38) >= v38) {
          goto LABEL_58;
        }
        ++HIDWORD(v38);
        *(void *)&v37[8 * v15] = v2;
      }
    }
    unsigned int v19 = v38;
LABEL_58:
    if (3 * v19 <= 4 * (HIDWORD(v38) - v39))
    {
      if (v19 >= 0x40) {
        v19 *= 2;
      }
      else {
        unsigned int v19 = 128;
      }
    }
    else if (v19 - HIDWORD(v38) >= v19 >> 3)
    {
      goto LABEL_60;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v36, v19);
    unsigned int v19 = v38;
    uint64_t v14 = v37;
LABEL_60:
    unsigned int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    uint64_t v22 = &v14[8 * v21];
    size_t v23 = *(llvm::Value **)v22;
    if (*(void *)v22 != -1) {
      break;
    }
    uint64_t v24 = 0;
LABEL_72:
    if (v24) {
      unsigned int v28 = v24;
    }
    else {
      unsigned int v28 = (llvm::Value **)v22;
    }
    if (*v28 == v2) {
      goto LABEL_101;
    }
    if (*v28 == (llvm::Value *)-2) {
      --v39;
    }
    else {
      ++HIDWORD(v38);
    }
    *unsigned int v28 = v2;
  }
  uint64_t v24 = 0;
  int v25 = 1;
  while (v23 != v2)
  {
    if (v24) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v23 == (llvm::Value *)-2;
    }
    if (v26) {
      uint64_t v24 = (llvm::Value **)v22;
    }
    unsigned int v27 = v21 + v25++;
    unsigned int v21 = v27 & v20;
    uint64_t v22 = &v14[8 * (v27 & v20)];
    size_t v23 = *(llvm::Value **)v22;
    if (*(void *)v22 == -1) {
      goto LABEL_72;
    }
  }
LABEL_101:
  uint64_t v1 = v2;
LABEL_102:
  if (v37 != v36) {
    free(v37);
  }
  return v1;
}

llvm::GlobalValue *llvm::Value::stripAndAccumulateConstantOffsets(llvm::GlobalValue *this, llvm::DataLayout *a2, llvm::APInt *a3, char a4, int a5, unsigned int (*a6)(uint64_t, llvm::Constant *, void **), uint64_t a7)
{
  int v12 = this;
  v107[6] = *MEMORY[0x1E4F143B8];
  if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
    int v13 = *(unsigned __int8 *)(**(void **)(*(void *)this + 16) + 8);
  }
  else {
    int v13 = *(_DWORD *)(*(void *)this + 8);
  }
  if (v13 != 15) {
    return v12;
  }
  unsigned int v94 = *((_DWORD *)a3 + 2);
  uint64_t v14 = v104;
  int v100 = v104;
  int v101 = v104;
  int v103 = 0;
  uint64_t v102 = 0x100000004;
  v104[0] = this;
  for (uint64_t i = v104; ; uint64_t i = v101)
  {
    unsigned int v16 = *((unsigned __int8 *)v12 + 16);
    if (v16 == 62) {
      goto LABEL_10;
    }
    if (v16 != 5)
    {
      unsigned int v17 = v16 - 28;
      if (v16 >= 0x1C)
      {
        if (v16 == 77) {
          goto LABEL_35;
        }
LABEL_34:
        if (v17 == 50)
        {
LABEL_35:
          int v37 = *((_DWORD *)v12 + 5);
          if ((v37 & 0x40000000) != 0)
          {
            uint64_t v38 = (llvm::GlobalValue **)*((void *)v12 - 1);
            goto LABEL_55;
          }
LABEL_36:
          uint64_t v38 = (llvm::GlobalValue **)((char *)v12 - 32 * (v37 & 0x7FFFFFF));
LABEL_55:
          int v12 = *v38;
          goto LABEL_117;
        }
      }
      if (v16 == 1)
      {
        if (llvm::GlobalValue::isInterposable(v12)) {
          goto LABEL_117;
        }
        uint64_t v38 = (llvm::GlobalValue **)((char *)v12 - 32);
        goto LABEL_55;
      }
      if (v16 < 0x1C || v16 - 33 > 0x33 || ((1 << (v16 - 33)) & 0x8000000000041) == 0) {
        goto LABEL_117;
      }
      uint64_t v46 = *((void *)v12 + 8);
      if (v46 && (*(unsigned char *)(v46 + 29) & 0x40) != 0)
      {
        uint64_t v81 = *(unsigned int *)(v46 + 8);
        if (v81)
        {
          uint64_t v82 = v46 + 40;
          int v83 = -1;
          while (!*(void *)v82 || (*(unsigned char *)(*(void *)v82 + 17) & 0x40) == 0)
          {
            ++v83;
            v82 += 8;
            if (!--v81) {
              goto LABEL_167;
            }
          }
          goto LABEL_168;
        }
      }
      else
      {
        uint64_t v47 = *((void *)v12 - 4);
        if (!v47) {
          goto LABEL_67;
        }
        if (*(unsigned char *)(v47 + 16) || *(void *)(v47 + 24) != *((void *)v12 + 9)) {
          goto LABEL_66;
        }
        uint64_t v47 = *(void *)(v47 + 112);
        if (!v47)
        {
LABEL_67:
          if (v47) {
            unsigned int v48 = (llvm::GlobalValue *)v47;
          }
          else {
            unsigned int v48 = v12;
          }
          if (!a5 || !llvm::Instruction::isLaunderOrStripInvariantGroup(v12))
          {
            int v12 = v48;
            goto LABEL_117;
          }
          int v37 = *((_DWORD *)v12 + 5);
          goto LABEL_36;
        }
        if ((*(unsigned char *)(v47 + 29) & 0x40) == 0)
        {
LABEL_66:
          uint64_t v47 = 0;
          goto LABEL_67;
        }
        uint64_t v84 = *(unsigned int *)(v47 + 8);
        if (v84)
        {
          uint64_t v85 = v47 + 40;
          int v83 = -1;
          while (!*(void *)v85 || (*(unsigned char *)(*(void *)v85 + 17) & 0x40) == 0)
          {
            ++v83;
            v85 += 8;
            if (!--v84) {
              goto LABEL_167;
            }
          }
          goto LABEL_168;
        }
      }
LABEL_167:
      int v83 = 0;
LABEL_168:
      uint64_t v47 = *((void *)v12 + 4 * (v83 - 1) + -4 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF));
      goto LABEL_67;
    }
    unsigned int v17 = *((unsigned __int16 *)v12 + 9);
    if (v17 == 49) {
      goto LABEL_35;
    }
    if (v17 != 34) {
      goto LABEL_34;
    }
LABEL_10:
    if ((a4 & 1) == 0 && (*((unsigned char *)v12 + 17) & 2) == 0) {
      goto LABEL_181;
    }
    unsigned int v18 = *(_DWORD *)(*(void *)v12 + 8);
    if ((v18 & 0xFE) == 0x12) {
      unsigned int v18 = *(_DWORD *)(**(void **)(*(void *)v12 + 16) + 8);
    }
    if (v18 < 0x100) {
      goto LABEL_23;
    }
    unsigned int v19 = v18 >> 8;
    uint64_t v20 = *((unsigned int *)a2 + 60);
    uint64_t v21 = *((void *)a2 + 29);
    if (v20)
    {
      uint64_t v21 = *((void *)a2 + 29);
      unint64_t v22 = *((unsigned int *)a2 + 60);
      do
      {
        unint64_t v23 = v22 >> 1;
        uint64_t v24 = v21 + 16 * (v22 >> 1);
        unsigned int v25 = *(_DWORD *)(v24 + 8);
        uint64_t v26 = v24 + 16;
        v22 += ~(v22 >> 1);
        if (v25 < v19) {
          uint64_t v21 = v26;
        }
        else {
          unint64_t v22 = v23;
        }
      }
      while (v22);
    }
    if (v21 == *((void *)a2 + 29) + 16 * v20 || *(_DWORD *)(v21 + 8) != v19) {
LABEL_23:
    }
      uint64_t v21 = *((void *)a2 + 29);
    unsigned int v99 = *(_DWORD *)(v21 + 12);
    if (v99 > 0x40) {
      operator new[]();
    }
    unint64_t v98 = 0;
    int v27 = *((_DWORD *)v12 + 5);
    if ((v27 & 0x40000000) != 0)
    {
      uint64_t v29 = (char *)*((void *)v12 - 1);
      uint64_t v28 = v27 & 0x7FFFFFF;
    }
    else
    {
      uint64_t v28 = v27 & 0x7FFFFFF;
      uint64_t v29 = (char *)v12 - 32 * v28;
    }
    int v105 = v107;
    uint64_t v106 = 0x600000000;
    unint64_t v30 = 32 * v28 - 32;
    if (v30 >= 0xC1) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v31 = (llvm::Constant **)v107;
    if (v28 == 1)
    {
      unsigned int v35 = v94;
    }
    else
    {
      uint64_t v32 = (uint64_t *)(v29 + 32);
      uint64_t v33 = v107;
      uint64_t v34 = 32 * v28 - 32;
      unsigned int v35 = v94;
      do
      {
        uint64_t v36 = *v32;
        v32 += 4;
        *v33++ = v36;
        v34 -= 32;
      }
      while (v34);
      int v31 = (llvm::Constant **)v105;
    }
    LODWORD(v106) = v30 >> 5;
    BOOL v39 = *((unsigned char *)v12 + 16) != 62 || v12 == 0;
    uint64_t v40 = 64;
    if (v39) {
      uint64_t v40 = 24;
    }
    int v41 = llvm::GEPOperator::accumulateConstantOffset(*(void *)((char *)v12 + v40), v31, (v30 >> 5), a2, (llvm::APInt *)&v98, a6, a7);
    if (v105 != v107) {
      free(v105);
    }
    unsigned int v42 = v99;
    if (!v41) {
      goto LABEL_53;
    }
    unsigned int v43 = v99 - 1;
    if (v99 > 0x40)
    {
      if ((*(void *)(v98 + 8 * (v43 >> 6)) >> v43))
      {
        int v44 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v98);
      }
      else
      {
        int v86 = 0;
        int64_t v87 = ((unint64_t)v99 + 63) >> 6;
        do
        {
          if (v87-- < 1) {
            break;
          }
          unint64_t v89 = *(void *)(v98 + 8 * v87);
          v86 += __clz(v89);
        }
        while (!v89);
        unsigned int v90 = v99 | 0xFFFFFFC0;
        if ((v99 & 0x3F) == 0) {
          unsigned int v90 = 0;
        }
        int v44 = v86 + v90;
      }
      unsigned int v35 = v94;
    }
    else if ((v98 >> v43))
    {
      int v44 = v99 ? __clz(~(v98 << -(char)v99)) : 0;
    }
    else
    {
      int v44 = v99 + __clz(v98) - 64;
    }
    if (v42 - v44 + 1 > v35)
    {
LABEL_53:
      int v45 = 1;
      int v93 = v12;
      goto LABEL_113;
    }
    llvm::APInt::sextOrTrunc((uint64_t)&v98, v35, (uint64_t)&v105);
    if (!a6)
    {
      uint64_t v51 = *((unsigned int *)a3 + 2);
      if (v51 >= 0x41)
      {
        uint64_t v56 = 0;
        int v57 = *(unint64_t **)a3;
        unint64_t v58 = (uint64_t *)v105;
        unint64_t v59 = (unint64_t)(v51 + 63) >> 6;
        unint64_t v60 = v59;
        do
        {
          uint64_t v61 = *v58++;
          unint64_t v62 = v61 + *v57;
          BOOL v63 = v62 + 1 <= *v57;
          if (v56)
          {
            ++v62;
            uint64_t v56 = v63;
          }
          else
          {
            uint64_t v56 = v62 < *v57;
          }
          *v57++ = v62;
          --v60;
        }
        while (v60);
        *(void *)(*(void *)a3 + 8 * (v59 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
      }
      else
      {
        if (v51) {
          unint64_t v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
        }
        else {
          unint64_t v52 = 0;
        }
        *(void *)a3 = v52 & ((unint64_t)v105 + *(void *)a3);
      }
LABEL_105:
      int v64 = *((_DWORD *)v12 + 5);
      if ((v64 & 0x40000000) != 0) {
        uint64_t v65 = (llvm::GlobalValue **)*((void *)v12 - 1);
      }
      else {
        uint64_t v65 = (llvm::GlobalValue **)((char *)v12 - 32 * (v64 & 0x7FFFFFF));
      }
      int v45 = 0;
      int v12 = *v65;
      goto LABEL_109;
    }
    BOOL v97 = 0;
    unsigned int v49 = *((_DWORD *)a3 + 2);
    if (v49 > 0x40) {
      operator new[]();
    }
    uint64_t v50 = *(unint64_t **)a3;
    llvm::APInt::sadd_ov(a3, (const llvm::APInt *)&v105, &v97, (uint64_t)&v95);
    if (*((_DWORD *)a3 + 2) >= 0x41u && *(void *)a3) {
      MEMORY[0x1D25D9CB0](*(void *)a3, 0x1000C8000313F17);
    }
    *(void *)a3 = v95;
    unsigned int v53 = v96;
    *((_DWORD *)a3 + 2) = v96;
    BOOL v54 = v97;
    if (v97)
    {
      if (v53 <= 0x40)
      {
        *(void *)a3 = v50;
        *((_DWORD *)a3 + 2) = v49;
        int v45 = 1;
        int v93 = v12;
        goto LABEL_109;
      }
      llvm::APInt::reallocate((uint64_t)a3, v49);
      uint64_t v55 = *((unsigned int *)a3 + 2);
      if (v55 <= 0x40) {
        *(void *)a3 = v50;
      }
      else {
        memcpy(*(void **)a3, v50, ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8);
      }
      int v93 = v12;
    }
    if (!v54) {
      goto LABEL_105;
    }
    int v45 = 1;
LABEL_109:
    if (v106 >= 0x41 && v105) {
      MEMORY[0x1D25D9CB0](v105, 0x1000C8000313F17);
    }
    unsigned int v42 = v99;
LABEL_113:
    if (v42 >= 0x41 && v98) {
      MEMORY[0x1D25D9CB0](v98, 0x1000C8000313F17);
    }
    if (v45)
    {
      uint64_t v14 = v100;
      uint64_t i = v101;
      int v12 = v93;
      goto LABEL_181;
    }
LABEL_117:
    int v66 = v101;
    uint64_t v67 = HIDWORD(v102);
    if (v101 != v100)
    {
      unsigned int v71 = v102;
      goto LABEL_128;
    }
    if (HIDWORD(v102)) {
      break;
    }
LABEL_125:
    unsigned int v71 = v102;
    if (HIDWORD(v102) < v102)
    {
      ++HIDWORD(v102);
      v101[v67] = v12;
      goto LABEL_149;
    }
LABEL_128:
    if (3 * v71 <= 4 * (HIDWORD(v102) - v103))
    {
      if (v71 >= 0x40) {
        v71 *= 2;
      }
      else {
        unsigned int v71 = 128;
      }
LABEL_155:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v100, v71);
      unsigned int v71 = v102;
      int v66 = v101;
      goto LABEL_130;
    }
    if (v71 - HIDWORD(v102) < v71 >> 3) {
      goto LABEL_155;
    }
LABEL_130:
    unsigned int v72 = v71 - 1;
    unsigned int v73 = (v71 - 1) & ((v12 >> 4) ^ (v12 >> 9));
    unint64_t v74 = (llvm::GlobalValue **)&v66[v73];
    int v75 = *v74;
    if (*v74 != (llvm::GlobalValue *)-1)
    {
      uint64_t v76 = 0;
      int v77 = 1;
      while (v75 != v12)
      {
        if (v76) {
          BOOL v78 = 0;
        }
        else {
          BOOL v78 = v75 == (llvm::GlobalValue *)-2;
        }
        if (v78) {
          uint64_t v76 = v74;
        }
        unsigned int v79 = v73 + v77++;
        unsigned int v73 = v79 & v72;
        unint64_t v74 = (llvm::GlobalValue **)&v66[v79 & v72];
        int v75 = *v74;
        if (*v74 == (llvm::GlobalValue *)-1) {
          goto LABEL_142;
        }
      }
LABEL_180:
      uint64_t v14 = v100;
      uint64_t i = v101;
LABEL_181:
      if (i != v14) {
        free(i);
      }
      return v12;
    }
    uint64_t v76 = 0;
LABEL_142:
    if (v76) {
      uint64_t v80 = v76;
    }
    else {
      uint64_t v80 = v74;
    }
    if (*v80 == v12) {
      goto LABEL_180;
    }
    if (*v80 == (llvm::GlobalValue *)-2) {
      --v103;
    }
    else {
      ++HIDWORD(v102);
    }
    *uint64_t v80 = v12;
LABEL_149:
    uint64_t v14 = v100;
  }
  int v68 = 0;
  uint64_t v69 = 8 * HIDWORD(v102);
  int32x2_t v70 = (llvm::GlobalValue **)v101;
  while (*v70 != v12)
  {
    if (*v70 == (llvm::GlobalValue *)-2) {
      int v68 = v70;
    }
    ++v70;
    v69 -= 8;
    if (!v69)
    {
      if (!v68) {
        goto LABEL_125;
      }
      int32x2_t *v68 = v12;
      --v103;
      goto LABEL_149;
    }
  }
  return v12;
}

uint64_t llvm::Value::stripInBoundsOffsets(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4 = a1;
  if (*(unsigned char *)(*(void *)a1 + 8) != 15) {
    return v4;
  }
  uint64_t v40 = (char *)v44;
  int v41 = (char *)v44;
  int v43 = 0;
  uint64_t v42 = 0x100000004;
  v44[0] = a1;
  while (1)
  {
    while (1)
    {
      a2(a3, v4);
      unsigned int v7 = *(unsigned __int8 *)(v4 + 16);
      if (v7 == 62)
      {
LABEL_8:
        if ((*(unsigned char *)(v4 + 17) & 2) == 0) {
          goto LABEL_88;
        }
LABEL_9:
        int v9 = *(_DWORD *)(v4 + 20);
        if ((v9 & 0x40000000) != 0) {
          uint64_t v10 = *(uint64_t **)(v4 - 8);
        }
        else {
          uint64_t v10 = (uint64_t *)(v4 - 32 * (v9 & 0x7FFFFFF));
        }
        uint64_t v4 = *v10;
        goto LABEL_36;
      }
      if (v7 == 5)
      {
        int v8 = *(unsigned __int16 *)(v4 + 18);
        switch(v8)
        {
          case '2':
            goto LABEL_9;
          case '1':
            goto LABEL_16;
          case '""':
            goto LABEL_8;
        }
LABEL_29:
        unsigned int v16 = 0;
        uint64_t v3 = v4;
        goto LABEL_30;
      }
      if (v7 < 0x1C) {
        goto LABEL_29;
      }
      if (*(unsigned __int8 *)(v4 + 16) <= 0x4Cu)
      {
        if (v7 != 33 && v7 != 39) {
          goto LABEL_29;
        }
      }
      else if (v7 != 84)
      {
        if (v7 == 78) {
          goto LABEL_9;
        }
        if (v7 == 77)
        {
LABEL_16:
          int v11 = *(_DWORD *)(v4 + 20);
          if ((v11 & 0x40000000) != 0) {
            int v12 = *(uint64_t **)(v4 - 8);
          }
          else {
            int v12 = (uint64_t *)(v4 - 32 * (v11 & 0x7FFFFFF));
          }
          uint64_t v4 = *v12;
          uint64_t v17 = *v12;
          if (*(unsigned char *)(*(void *)*v12 + 8) != 15) {
            goto LABEL_89;
          }
          goto LABEL_36;
        }
        goto LABEL_29;
      }
      uint64_t v13 = *(void *)(v4 + 64);
      if (v13 && (*(unsigned char *)(v13 + 29) & 0x40) != 0)
      {
        uint64_t v33 = *(unsigned int *)(v13 + 8);
        if (!v33) {
          goto LABEL_85;
        }
        uint64_t v34 = v13 + 40;
        int v35 = -1;
        while (!*(void *)v34 || (*(unsigned char *)(*(void *)v34 + 17) & 0x40) == 0)
        {
          ++v35;
          v34 += 8;
          if (!--v33) {
            goto LABEL_85;
          }
        }
      }
      else
      {
        uint64_t v14 = *(void *)(v4 - 32);
        if (!v14) {
          goto LABEL_29;
        }
        if (*(unsigned char *)(v14 + 16)) {
          goto LABEL_29;
        }
        if (*(void *)(v14 + 24) != *(void *)(v4 + 72)) {
          goto LABEL_29;
        }
        uint64_t v15 = *(void *)(v14 + 112);
        if (!v15 || (*(unsigned char *)(v15 + 29) & 0x40) == 0) {
          goto LABEL_29;
        }
        uint64_t v36 = *(unsigned int *)(v15 + 8);
        if (!v36)
        {
LABEL_85:
          int v35 = 0;
          goto LABEL_86;
        }
        uint64_t v37 = v15 + 40;
        int v35 = -1;
        while (!*(void *)v37 || (*(unsigned char *)(*(void *)v37 + 17) & 0x40) == 0)
        {
          ++v35;
          v37 += 8;
          if (!--v36) {
            goto LABEL_85;
          }
        }
      }
LABEL_86:
      uint64_t v38 = *(void *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * (v35 - 1));
      if (!v38) {
        goto LABEL_29;
      }
      unsigned int v16 = 3;
      uint64_t v4 = v38;
LABEL_30:
      if (v16 <= 1) {
        unsigned int v16 = 1;
      }
      uint64_t v17 = v3;
      if (v16 != 3) {
        goto LABEL_89;
      }
LABEL_36:
      unsigned int v18 = v41;
      uint64_t v19 = HIDWORD(v42);
      if (v41 != v40) {
        break;
      }
      if (HIDWORD(v42))
      {
        uint64_t v20 = 0;
        uint64_t v21 = 8 * HIDWORD(v42);
        unint64_t v22 = v41;
        do
        {
          if (*(void *)v22 == v4) {
            return v4;
          }
          if (*(void *)v22 == -2) {
            uint64_t v20 = v22;
          }
          v22 += 8;
          v21 -= 8;
        }
        while (v21);
        if (!v20) {
          goto LABEL_44;
        }
        *(void *)uint64_t v20 = v4;
        --v43;
      }
      else
      {
LABEL_44:
        unsigned int v23 = v42;
        if (HIDWORD(v42) >= v42) {
          goto LABEL_47;
        }
        ++HIDWORD(v42);
        *(void *)&v41[8 * v19] = v4;
      }
    }
    unsigned int v23 = v42;
LABEL_47:
    if (3 * v23 <= 4 * (HIDWORD(v42) - v43))
    {
      if (v23 >= 0x40) {
        v23 *= 2;
      }
      else {
        unsigned int v23 = 128;
      }
    }
    else if (v23 - HIDWORD(v42) >= v23 >> 3)
    {
      goto LABEL_49;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v40, v23);
    unsigned int v23 = v42;
    unsigned int v18 = v41;
LABEL_49:
    unsigned int v24 = v23 - 1;
    unsigned int v25 = (v23 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    uint64_t v26 = &v18[8 * v25];
    uint64_t v27 = *(void *)v26;
    if (*(void *)v26 != -1) {
      break;
    }
    uint64_t v28 = 0;
LABEL_61:
    if (v28) {
      uint64_t v32 = v28;
    }
    else {
      uint64_t v32 = v26;
    }
    if (*(void *)v32 == v4) {
      goto LABEL_88;
    }
    if (*(void *)v32 == -2) {
      --v43;
    }
    else {
      ++HIDWORD(v42);
    }
    *(void *)uint64_t v32 = v4;
  }
  uint64_t v28 = 0;
  int v29 = 1;
  while (v27 != v4)
  {
    if (v28) {
      BOOL v30 = 0;
    }
    else {
      BOOL v30 = v27 == -2;
    }
    if (v30) {
      uint64_t v28 = v26;
    }
    unsigned int v31 = v25 + v29++;
    unsigned int v25 = v31 & v24;
    uint64_t v26 = &v18[8 * (v31 & v24)];
    uint64_t v27 = *(void *)v26;
    if (*(void *)v26 == -1) {
      goto LABEL_61;
    }
  }
LABEL_88:
  uint64_t v17 = v4;
LABEL_89:
  if (v41 != v40) {
    free(v41);
  }
  return v17;
}

uint64_t llvm::Value::getPointerDereferenceableBytes(uint64_t ***this, const llvm::DataLayout *a2, BOOL *a3, BOOL *a4)
{
  BOOL canBeFreed = 0;
  *a3 = 0;
  if (dword_1EBCD8E78) {
    BOOL canBeFreed = llvm::Value::canBeFreed((llvm::Value *)this);
  }
  *a4 = canBeFreed;
  unsigned int v9 = *((unsigned __int8 *)this + 16);
  if (this && v9 == 21)
  {
    uint64_t result = llvm::Argument::getDereferenceableBytes((llvm::Argument *)this);
    if (result) {
      return result;
    }
    uint64_t PointeeInMemoryValueType = llvm::Argument::getPointeeInMemoryValueType((llvm::Argument *)this);
    if (!PointeeInMemoryValueType) {
      goto LABEL_79;
    }
    uint64_t v68 = PointeeInMemoryValueType;
    unsigned int v69 = *(unsigned __int8 *)(PointeeInMemoryValueType + 8);
    if (v69 - 16 < 2) {
      goto LABEL_163;
    }
    if (v69 <= 0xF && ((1 << v69) & 0xAC7F) != 0)
    {
LABEL_106:
      unint64_t v70 = sub_1CB83544C((uint64_t)a2, v68);
      if (v70 != 0 && v70 < 0xFFFFFFFFFFFFFFF9) {
        return (v70 + 7) >> 3;
      }
      goto LABEL_79;
    }
    if ((v69 & 0xFE) == 0x12 || v69 == 21)
    {
LABEL_163:
      if (llvm::Type::isSizedDerivedType(PointeeInMemoryValueType, 0)) {
        goto LABEL_106;
      }
    }
LABEL_79:
    uint64_t result = llvm::AttributeList::getParamDereferenceableOrNullBytes((llvm::AttributeList *)(this[3] + 14), *((_DWORD *)this + 8));
    goto LABEL_16;
  }
  if (v9 < 0x1C)
  {
    uint64_t result = 0;
    if (!this || v9 != 3) {
      return result;
    }
    uint64_t v12 = (uint64_t)this[3];
    unsigned int v13 = *(unsigned __int8 *)(v12 + 8);
    if (v13 - 16 >= 2)
    {
      if (v13 <= 0xF && ((1 << v13) & 0xAC7F) != 0)
      {
LABEL_28:
        if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)this) & 1) == 0)
        {
          uint64_t v11 = (uint64_t)this[3];
          goto LABEL_30;
        }
        return 0;
      }
      if ((v13 & 0xFE) != 0x12 && v13 != 21) {
        return 0;
      }
    }
    if (!llvm::Type::isSizedDerivedType(v12, 0)) {
      return 0;
    }
    goto LABEL_28;
  }
  if (v9 - 33 > 0x33 || ((1 << (v9 - 33)) & 0x8000000000041) == 0)
  {
    if (this && v9 == 60)
    {
      if ((*((unsigned char *)this + 23) & 0x20) == 0) {
        goto LABEL_14;
      }
      uint64_t v14 = ***this;
      BOOL v97 = (llvm::Value *)this;
      int v15 = *(_DWORD *)(v14 + 2496);
      if (v15)
      {
        uint64_t v16 = *(void *)(v14 + 2480);
        int v17 = v15 - 1;
        unsigned int v18 = v17 & ((this >> 4) ^ (this >> 9));
        uint64_t v19 = (llvm::Value **)(v16 + 40 * v18);
        uint64_t v20 = *v19;
        if (*v19 == (llvm::Value *)this) {
          goto LABEL_33;
        }
        uint64_t v34 = 0;
        int v35 = 1;
        while (v20 != (llvm::Value *)-4096)
        {
          if (v34) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v20 == (llvm::Value *)-8192;
          }
          if (v36) {
            uint64_t v34 = v19;
          }
          unsigned int v37 = v18 + v35++;
          unsigned int v18 = v37 & v17;
          uint64_t v19 = (llvm::Value **)(v16 + 40 * v18);
          uint64_t v20 = *v19;
          if (*v19 == (llvm::Value *)this) {
            goto LABEL_33;
          }
        }
        if (v34) {
          int v64 = v34;
        }
        else {
          int v64 = v19;
        }
      }
      else
      {
        int v64 = 0;
      }
      uint64_t v19 = (llvm::Value **)sub_1CC609054(v14 + 2480, (uint64_t)&v97, (uint64_t *)&v97, v64);
      uint64_t v65 = v97;
      v19[3] = 0;
      void v19[4] = 0;
      uint64_t *v19 = v65;
      v19[1] = (llvm::Value *)(v19 + 3);
      v19[2] = (llvm::Value *)0x100000000;
LABEL_33:
      uint64_t v21 = *((unsigned int *)v19 + 4);
      if (!v21) {
        goto LABEL_14;
      }
      unint64_t v22 = (void *)((char *)v19[1] + 8);
      uint64_t v23 = 16 * v21;
      while (*((_DWORD *)v22 - 2) != 12)
      {
        v22 += 2;
        v23 -= 16;
        if (!v23) {
          goto LABEL_14;
        }
      }
      uint64_t v44 = *v22;
      if (!v44) {
        goto LABEL_14;
      }
      uint64_t v45 = *(void *)(*(void *)(v44 - 8 * *(unsigned int *)(v44 + 8)) + 128);
      uint64_t v46 = (uint64_t *)(v45 + 24);
      unsigned int v47 = *(_DWORD *)(v45 + 32);
      if (v47 < 0x41)
      {
LABEL_75:
        uint64_t result = *v46;
        if (*v46) {
          return result;
        }
LABEL_14:
        if ((*((unsigned char *)this + 23) & 0x20) == 0) {
          goto LABEL_15;
        }
        uint64_t v24 = ***this;
        BOOL v97 = (llvm::Value *)this;
        int v25 = *(_DWORD *)(v24 + 2496);
        if (v25)
        {
          uint64_t v26 = *(void *)(v24 + 2480);
          int v27 = v25 - 1;
          unsigned int v28 = v27 & ((this >> 4) ^ (this >> 9));
          int v29 = (llvm::Value **)(v26 + 40 * v28);
          BOOL v30 = *v29;
          if (*v29 == (llvm::Value *)this)
          {
LABEL_40:
            uint64_t v31 = *((unsigned int *)v29 + 4);
            if (!v31) {
              goto LABEL_15;
            }
            uint64_t v32 = (void *)((char *)v29[1] + 8);
            uint64_t v33 = 16 * v31;
            while (*((_DWORD *)v32 - 2) != 13)
            {
              uint64_t result = 0;
              v32 += 2;
              v33 -= 16;
              if (!v33) {
                goto LABEL_16;
              }
            }
            goto LABEL_89;
          }
          uint64_t v38 = 0;
          int v39 = 1;
          while (v30 != (llvm::Value *)-4096)
          {
            if (v38) {
              BOOL v40 = 0;
            }
            else {
              BOOL v40 = v30 == (llvm::Value *)-8192;
            }
            if (v40) {
              uint64_t v38 = v29;
            }
            unsigned int v41 = v28 + v39++;
            unsigned int v28 = v41 & v27;
            int v29 = (llvm::Value **)(v26 + 40 * v28);
            BOOL v30 = *v29;
            if (*v29 == (llvm::Value *)this) {
              goto LABEL_40;
            }
          }
          if (v38) {
            int v66 = v38;
          }
          else {
            int v66 = v29;
          }
        }
        else
        {
          int v66 = 0;
        }
        int v29 = (llvm::Value **)sub_1CC609054(v24 + 2480, (uint64_t)&v97, (uint64_t *)&v97, v66);
        uint64_t v67 = v97;
        v29[3] = 0;
        v29[4] = 0;
        *int v29 = v67;
        v29[1] = (llvm::Value *)(v29 + 3);
        void v29[2] = (llvm::Value *)0x100000000;
        goto LABEL_40;
      }
      if (v47 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v45 + 24)) <= 0x40)
      {
        uint64_t v46 = (uint64_t *)*v46;
        goto LABEL_75;
      }
      return -1;
    }
    if (!this || v9 != 76)
    {
      uint64_t result = 0;
      if (!this || v9 != 59) {
        return result;
      }
      if ((llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)this) & 1) == 0)
      {
        uint64_t v11 = (uint64_t)this[8];
LABEL_30:
        uint64_t result = (unint64_t)(sub_1CB83544C((uint64_t)a2, v11) + 7) >> 3;
        *a3 = 0;
        *a4 = 0;
        return result;
      }
      return 0;
    }
    if ((*((unsigned char *)this + 23) & 0x20) == 0)
    {
LABEL_81:
      if ((*((unsigned char *)this + 23) & 0x20) == 0) {
        goto LABEL_15;
      }
      uint64_t v49 = ***this;
      BOOL v97 = (llvm::Value *)this;
      int v50 = *(_DWORD *)(v49 + 2496);
      if (v50)
      {
        uint64_t v51 = *(void *)(v49 + 2480);
        int v52 = v50 - 1;
        unsigned int v53 = v52 & ((this >> 4) ^ (this >> 9));
        BOOL v54 = (llvm::Value **)(v51 + 40 * v53);
        uint64_t v55 = *v54;
        if (*v54 == (llvm::Value *)this)
        {
LABEL_84:
          uint64_t v56 = *((unsigned int *)v54 + 4);
          if (!v56) {
            goto LABEL_15;
          }
          uint64_t v32 = (void *)((char *)v54[1] + 8);
          uint64_t v57 = 16 * v56;
          while (*((_DWORD *)v32 - 2) != 13)
          {
            uint64_t result = 0;
            v32 += 2;
            v57 -= 16;
            if (!v57) {
              goto LABEL_16;
            }
          }
LABEL_89:
          uint64_t v58 = *v32;
          if (v58)
          {
            uint64_t v59 = *(void *)(*(void *)(v58 - 8 * *(unsigned int *)(v58 + 8)) + 128);
            unint64_t v60 = (void *)(v59 + 24);
            unsigned int v61 = *(_DWORD *)(v59 + 32);
            if (v61 >= 0x41)
            {
              if (v61 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v59 + 24)) > 0x40)
              {
                uint64_t result = -1;
                goto LABEL_16;
              }
              unint64_t v60 = (void *)*v60;
            }
            uint64_t result = *v60;
LABEL_16:
            *a3 = 1;
            return result;
          }
LABEL_15:
          uint64_t result = 0;
          goto LABEL_16;
        }
        uint64_t v81 = 0;
        int v82 = 1;
        while (v55 != (llvm::Value *)-4096)
        {
          if (v81) {
            BOOL v83 = 0;
          }
          else {
            BOOL v83 = v55 == (llvm::Value *)-8192;
          }
          if (v83) {
            uint64_t v81 = v54;
          }
          unsigned int v84 = v53 + v82++;
          unsigned int v53 = v84 & v52;
          BOOL v54 = (llvm::Value **)(v51 + 40 * v53);
          uint64_t v55 = *v54;
          if (*v54 == (llvm::Value *)this) {
            goto LABEL_84;
          }
        }
        if (v81) {
          int v93 = v81;
        }
        else {
          int v93 = v54;
        }
      }
      else
      {
        int v93 = 0;
      }
      BOOL v54 = (llvm::Value **)sub_1CC609054(v49 + 2480, (uint64_t)&v97, (uint64_t *)&v97, v93);
      unsigned int v94 = v97;
      v54[3] = 0;
      void v54[4] = 0;
      char *v54 = v94;
      v54[1] = (llvm::Value *)(v54 + 3);
      v54[2] = (llvm::Value *)0x100000000;
      goto LABEL_84;
    }
    uint64_t v71 = ***this;
    BOOL v97 = (llvm::Value *)this;
    int v72 = *(_DWORD *)(v71 + 2496);
    if (v72)
    {
      uint64_t v73 = *(void *)(v71 + 2480);
      int v74 = v72 - 1;
      unsigned int v75 = v74 & ((this >> 4) ^ (this >> 9));
      uint64_t v76 = (llvm::Value **)(v73 + 40 * v75);
      int v77 = *v76;
      if (*v76 == (llvm::Value *)this)
      {
LABEL_111:
        uint64_t v78 = *((unsigned int *)v76 + 4);
        if (v78)
        {
          unsigned int v79 = (void *)((char *)v76[1] + 8);
          uint64_t v80 = 16 * v78;
          while (*((_DWORD *)v79 - 2) != 12)
          {
            v79 += 2;
            v80 -= 16;
            if (!v80) {
              goto LABEL_81;
            }
          }
          uint64_t v89 = *v79;
          if (v89)
          {
            uint64_t v90 = *(void *)(*(void *)(v89 - 8 * *(unsigned int *)(v89 + 8)) + 128);
            uint64_t v91 = (void *)(v90 + 24);
            unsigned int v92 = *(_DWORD *)(v90 + 32);
            if (v92 >= 0x41)
            {
              if (v92 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v90 + 24)) > 0x40) {
                return -1;
              }
              uint64_t v91 = (void *)*v91;
            }
            uint64_t result = *v91;
            if (*v91) {
              return result;
            }
          }
        }
        goto LABEL_81;
      }
      uint64_t v85 = 0;
      int v86 = 1;
      while (v77 != (llvm::Value *)-4096)
      {
        if (v85) {
          BOOL v87 = 0;
        }
        else {
          BOOL v87 = v77 == (llvm::Value *)-8192;
        }
        if (v87) {
          uint64_t v85 = v76;
        }
        unsigned int v88 = v75 + v86++;
        unsigned int v75 = v88 & v74;
        uint64_t v76 = (llvm::Value **)(v73 + 40 * v75);
        int v77 = *v76;
        if (*v76 == (llvm::Value *)this) {
          goto LABEL_111;
        }
      }
      if (v85) {
        uint64_t v95 = v85;
      }
      else {
        uint64_t v95 = v76;
      }
    }
    else
    {
      uint64_t v95 = 0;
    }
    uint64_t v76 = (llvm::Value **)sub_1CC609054(v71 + 2480, (uint64_t)&v97, (uint64_t *)&v97, v95);
    unsigned int v96 = v97;
    v76[3] = 0;
    v76[4] = 0;
    void *v76 = v96;
    v76[1] = (llvm::Value *)(v76 + 3);
    v76[2] = (llvm::Value *)0x100000000;
    goto LABEL_111;
  }
  unint64_t v62 = (llvm::AttributeList *)(this + 8);
  uint64_t result = llvm::AttributeList::getRetDereferenceableBytes(v62);
  if (!result)
  {
    uint64_t result = llvm::AttributeList::getRetDereferenceableOrNullBytes(v62);
    goto LABEL_16;
  }
  return result;
}

uint64_t llvm::Value::getPointerAlignment(llvm::Value *this, const llvm::DataLayout *a2)
{
  unsigned int v4 = *((unsigned __int8 *)this + 16);
  if (v4 > 0x14)
  {
    if (v4 != 21)
    {
      if (v4 == 59) {
        return __clz(1 << *((_WORD *)this + 9)) ^ 0x3F;
      }
      goto LABEL_29;
    }
    uint64_t v9 = *((void *)this + 3);
    uint64_t v12 = *(void *)(v9 + 112);
    uint64_t v10 = (llvm::AttributeList *)(v9 + 112);
    uint64_t v11 = v12;
    if (!v12) {
      return 0;
    }
    int v13 = *((_DWORD *)this + 8);
    unsigned int v14 = v13 + 2;
    if ((v13 + 2) < *(_DWORD *)(v11 + 8))
    {
      int v15 = *(llvm::AttributeSetNode **)(v11 + 8 * v14 + 40);
      if (v15)
      {
        uint64_t result = llvm::AttributeSetNode::getAlignment(v15);
        if ((unsigned __int16)result > 0xFFu) {
          return result;
        }
      }
    }
    if (*(unsigned char *)(*(void *)this + 8) != 15) {
      return 0;
    }
    if (v14 >= *(_DWORD *)(v11 + 8)) {
      return 0;
    }
    uint64_t v16 = *(void *)(v11 + 8 * v14 + 40);
    if (!v16 || (*(unsigned char *)(v16 + 21) & 2) == 0) {
      return 0;
    }
    uint64_t ParamStructRetType = llvm::AttributeList::getParamStructRetType(v10, v13);
    unsigned int v18 = (llvm::Type *)ParamStructRetType;
    unsigned int v19 = *(unsigned __int8 *)(ParamStructRetType + 8);
    if (v19 > 0x11) {
      goto LABEL_127;
    }
    if (((1 << v19) & 0xAC7F) != 0)
    {
LABEL_28:
      uint64_t v20 = a2;
      uint64_t v21 = v18;
LABEL_95:
      return llvm::DataLayout::getAlignment(v20, v21, 1);
    }
    if (((1 << v19) & 0x30000) == 0)
    {
LABEL_127:
      if ((v19 & 0xFE) != 0x12 && v19 != 21) {
        return 0;
      }
    }
    uint64_t result = llvm::Type::isSizedDerivedType(ParamStructRetType, 0);
    if (!result) {
      return result;
    }
    goto LABEL_28;
  }
  if (v4 - 2 >= 2)
  {
    if (!*((unsigned char *)this + 16))
    {
      if (*((unsigned __int16 *)a2 + 10) <= 0x100u) {
        uint64_t result = 256;
      }
      else {
        uint64_t result = *((unsigned __int16 *)a2 + 10);
      }
      if (*((_DWORD *)a2 + 6))
      {
        unsigned __int8 v8 = (*((_WORD *)this + 17) & 0x3F) - 1;
        if ((*((_WORD *)this + 17) & 0x3F) == 0) {
          unsigned __int8 v8 = 0;
        }
        if (v8 <= result) {
          return result;
        }
        else {
          return v8;
        }
      }
      return result;
    }
LABEL_29:
    if (v4 < 0x1C)
    {
      if (v4 <= 0x14)
      {
        int v25 = llvm::Value::stripPointerCasts(this);
        uint64_t v26 = *(void *)this;
        unsigned int v27 = *(_DWORD *)(v26 + 8);
        if ((v27 & 0xFE) == 0x12) {
          unsigned int v27 = *(_DWORD *)(**(void **)(v26 + 16) + 8);
        }
        if (v27 < 0x100) {
          goto LABEL_54;
        }
        unsigned int v28 = v27 >> 8;
        uint64_t v29 = *((unsigned int *)a2 + 60);
        uint64_t v30 = *((void *)a2 + 29);
        if (v29)
        {
          uint64_t v30 = *((void *)a2 + 29);
          unint64_t v31 = *((unsigned int *)a2 + 60);
          do
          {
            unint64_t v32 = v31 >> 1;
            uint64_t v33 = v30 + 16 * (v31 >> 1);
            unsigned int v34 = *(_DWORD *)(v33 + 8);
            uint64_t v35 = v33 + 16;
            v31 += ~(v31 >> 1);
            if (v34 < v28) {
              uint64_t v30 = v35;
            }
            else {
              unint64_t v31 = v32;
            }
          }
          while (v31);
        }
        if (v30 == *((void *)a2 + 29) + 16 * v29 || *(_DWORD *)(v30 + 8) != v28) {
LABEL_54:
        }
          uint64_t v30 = *((void *)a2 + 29);
        BOOL v36 = (llvm::FixedVectorType *)llvm::IntegerType::get(*(llvm::IntegerType **)v26, (llvm::LLVMContext *)*(unsigned int *)(v30 + 4));
        uint64_t v38 = v36;
        if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12)
        {
          llvm::VectorType::get(v36, (llvm::Type *)(*(unsigned int *)(v26 + 32) | ((unint64_t)(*(_DWORD *)(v26 + 8) == 19) << 32)));
          uint64_t v38 = v72;
        }
        uint64_t result = llvm::ConstantFoldCastInstruction((llvm *)0x2F, v25, v38, v37);
        if (!result) {
          return result;
        }
        if (*(unsigned char *)(result + 16) == 16)
        {
          unsigned int v39 = *(_DWORD *)(result + 32);
          if (v39 > 0x40)
          {
            unsigned int v41 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)(result + 24));
          }
          else
          {
            unsigned int v40 = __clz(__rbit64(*(void *)(result + 24)));
            if (v39 >= v40) {
              unsigned int v41 = v40;
            }
            else {
              unsigned int v41 = *(_DWORD *)(result + 32);
            }
          }
          unsigned int v57 = __clz(1 << v41) ^ 0x3F;
          if (v41 >= 0x20) {
            return 32;
          }
          else {
            return v57;
          }
        }
      }
      return 0;
    }
    uint64_t result = 0;
    if ((int)v4 <= 59)
    {
      if (v4 != 33 && v4 != 39) {
        return result;
      }
      goto LABEL_65;
    }
    if (v4 != 60)
    {
      if (v4 != 84) {
        return result;
      }
LABEL_65:
      uint64_t result = sub_1CC63020C((uint64_t)this);
      if ((unsigned __int16)result > 0xFFu) {
        return result;
      }
      uint64_t v42 = *((void *)this - 4);
      if (v42)
      {
        if (!*(unsigned char *)(v42 + 16) && *(void *)(v42 + 24) == *((void *)this + 9))
        {
          uint64_t v73 = *(llvm::Value **)(v42 + 112);
          uint64_t result = llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v73);
          if ((unsigned __int16)result > 0xFFu) {
            return result;
          }
        }
      }
      return 0;
    }
    if ((*((unsigned char *)this + 23) & 0x20) == 0) {
      return 0;
    }
    uint64_t v43 = ***(void ***)this;
    uint64_t v73 = this;
    int v44 = *(_DWORD *)(v43 + 2496);
    if (v44)
    {
      uint64_t v45 = *(void *)(v43 + 2480);
      int v46 = v44 - 1;
      unsigned int v47 = v46 & ((this >> 4) ^ (this >> 9));
      unsigned int v48 = (llvm::Value **)(v45 + 40 * v47);
      uint64_t v49 = *v48;
      if (*v48 == this)
      {
LABEL_82:
        uint64_t v54 = *((unsigned int *)v48 + 4);
        if (!v54) {
          return 0;
        }
        uint64_t v55 = (void *)((char *)v48[1] + 8);
        uint64_t v56 = 16 * v54;
        while (*((_DWORD *)v55 - 2) != 17)
        {
          uint64_t result = 0;
          v55 += 2;
          v56 -= 16;
          if (!v56) {
            return result;
          }
        }
        uint64_t v59 = *v55;
        if (!v59) {
          return 0;
        }
        uint64_t v60 = *(void *)(*(void *)(v59 - 8 * *(unsigned int *)(v59 + 8)) + 128);
        unsigned int v61 = (unint64_t *)(v60 + 24);
        uint64_t v62 = *(unsigned int *)(v60 + 32);
        if (v62 >= 0x41)
        {
          int v63 = 0;
          int64_t v64 = (unint64_t)(v62 + 63) >> 6;
          do
          {
            if (v64-- < 1) {
              break;
            }
            unint64_t v66 = *(void *)(*v61 + 8 * v64);
            v63 += __clz(v66);
          }
          while (!v66);
          int v67 = v62 | 0xFFFFFFC0;
          if ((v62 & 0x3F) == 0) {
            int v67 = 0;
          }
          if ((v62 - v63 - v67) > 0x40)
          {
            unint64_t v68 = -1;
            return 63 - __clz(v68);
          }
          unsigned int v61 = (unint64_t *)*v61;
        }
        unint64_t v68 = *v61;
        return 63 - __clz(v68);
      }
      int v50 = 0;
      int v51 = 1;
      while (v49 != (llvm::Value *)-4096)
      {
        if (v50) {
          BOOL v52 = 0;
        }
        else {
          BOOL v52 = v49 == (llvm::Value *)-8192;
        }
        if (v52) {
          int v50 = v48;
        }
        unsigned int v53 = v47 + v51++;
        unsigned int v47 = v53 & v46;
        unsigned int v48 = (llvm::Value **)(v45 + 40 * v47);
        uint64_t v49 = *v48;
        if (*v48 == this) {
          goto LABEL_82;
        }
      }
      if (v50) {
        unsigned int v69 = v50;
      }
      else {
        unsigned int v69 = v48;
      }
    }
    else
    {
      unsigned int v69 = 0;
    }
    unsigned int v48 = (llvm::Value **)sub_1CC609054(v43 + 2480, (uint64_t)&v73, (uint64_t *)&v73, v69);
    unint64_t v70 = v73;
    v48[3] = 0;
    v48[4] = 0;
    llvm::GlobalValue *v48 = v70;
    v48[1] = (llvm::Value *)(v48 + 3);
    v48[2] = (llvm::Value *)0x100000000;
    goto LABEL_82;
  }
  unsigned int v5 = *((_DWORD *)this + 8);
  int v6 = HIWORD(v5) & 0x3F;
  if (v6) {
    return (v6 - 1);
  }
  if (v4 != 3) {
    return 0;
  }
  unint64_t v22 = (unsigned __int8 *)*((void *)this + 3);
  unsigned int v23 = v22[8];
  if (v23 > 0x11) {
    goto LABEL_105;
  }
  if (((1 << v23) & 0xAC7F) != 0) {
    goto LABEL_37;
  }
  if (((1 << v23) & 0x30000) == 0)
  {
LABEL_105:
    if ((v23 & 0xFE) != 0x12 && v23 != 21) {
      return 0;
    }
  }
  uint64_t result = llvm::Type::isSizedDerivedType(*((void *)this + 3), 0);
  if (!result) {
    return result;
  }
  unsigned int v5 = *((_DWORD *)this + 8);
LABEL_37:
  unsigned int v24 = v5 & 0xF;
  if (v24 == 1) {
    goto LABEL_94;
  }
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_94;
    }
  }
  else if (*((llvm::Value **)this + 9) == (llvm::Value *)((char *)this + 72) && (v5 & 0x800000) == 0)
  {
    goto LABEL_94;
  }
  if (v24 <= 0xA && ((1 << v24) & 0x63C) != 0)
  {
LABEL_94:
    uint64_t v20 = a2;
    uint64_t v21 = (llvm::Type *)v22;
    goto LABEL_95;
  }

  return llvm::DataLayout::getPreferredAlign(a2, this);
}

uint64_t sub_1CC63020C(uint64_t a1)
{
  Retchar Alignment = llvm::AttributeList::getRetAlignment((llvm::AttributeList *)(a1 + 64));
  LODWORD(v3) = HIBYTE(RetAlignment);
  if (!HIBYTE(RetAlignment))
  {
    uint64_t v3 = *(void *)(a1 - 32);
    if (v3)
    {
      if (!*(unsigned char *)(v3 + 16) && *(void *)(v3 + 24) == *(void *)(a1 + 72))
      {
        uint64_t v5 = *(void *)(v3 + 112);
        Retchar Alignment = llvm::AttributeList::getRetAlignment((llvm::AttributeList *)&v5);
        LODWORD(v3) = HIBYTE(RetAlignment);
        return RetAlignment | (v3 << 8);
      }
      LODWORD(v3) = 0;
    }
    LOBYTE(RetAlignment) = 0;
  }
  return RetAlignment | (v3 << 8);
}

uint64_t llvm::Value::DoPHITranslation(uint64_t this, const llvm::BasicBlock *a2, const llvm::BasicBlock *a3)
{
  if (this && *(unsigned char *)(this + 16) == 83 && *(const llvm::BasicBlock **)(this + 40) == a2) {
    return sub_1CBF73380(this, (uint64_t)a3);
  }
  return this;
}

void *llvm::Value::reverseUseList(llvm::Value *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t result = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 8);
    if (v4)
    {
      *(void *)(v2 + 8) = 0;
      do
      {
        uint64_t v5 = v4;
        int v6 = (void *)(v4 + 8);
        uint64_t v4 = *(void *)(v4 + 8);
        *int v6 = v2;
        *(void *)(v2 + 16) = v6;
        uint64_t v2 = v5;
      }
      while (v4);
      *uint64_t result = v5;
      *(void *)(v5 + 16) = result;
    }
  }
  return result;
}

BOOL llvm::Value::isSwiftError(llvm::Value *this)
{
  int v2 = *((unsigned __int8 *)this + 16);
  if (this && v2 == 21)
  {
    uint64_t v4 = *(void *)(*((void *)this + 3) + 112);
    if (v4 && (unsigned int v5 = *((_DWORD *)this + 8) + 2, v5 < *(_DWORD *)(v4 + 8)) && (v6 = *(void *)(v4 + 8 * v5 + 40)) != 0) {
      return *(char *)(v6 + 19) < 0;
    }
    else {
      return 0;
    }
  }
  else
  {
    BOOL result = 0;
    if (this)
    {
      if (v2 == 59) {
        return (*((unsigned __int16 *)this + 9) >> 7) & 1;
      }
    }
  }
  return result;
}

unint64_t *llvm::ValueHandleBase::AddToExistingUseList(unint64_t *result, unint64_t a2)
{
  result[1] = *(void *)a2;
  *(void *)a2 = result;
  *BOOL result = *result & 7 | a2;
  int v2 = (unint64_t *)result[1];
  if (v2) {
    unint64_t *v2 = *v2 & 7 | (unint64_t)(result + 1);
  }
  return result;
}

unint64_t *llvm::ValueHandleBase::AddToExistingUseListAfter(unint64_t *result, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  unint64_t v2 = a2 + 8;
  result[1] = v3;
  *BOOL result = *result & 7 | v2;
  *(void *)unint64_t v2 = result;
  uint64_t v4 = (unint64_t *)result[1];
  if (v4) {
    *uint64_t v4 = *v4 & 7 | (unint64_t)(result + 1);
  }
  return result;
}

uint64_t ****llvm::ValueHandleBase::AddToUseList(llvm::ValueHandleBase *this)
{
  unint64_t v2 = (uint64_t ***)*((void *)this + 2);
  uint64_t v3 = ***v2;
  uint64_t v4 = (void *)(v3 + 2424);
  if (*((unsigned char *)v2 + 17))
  {
    uint64_t v42 = (uint64_t ***)*((void *)this + 2);
    int v20 = *(_DWORD *)(v3 + 2440);
    if (v20)
    {
      uint64_t v21 = *(void *)(v3 + 2424);
      int v22 = v20 - 1;
      unsigned int v23 = v22 & ((v2 >> 4) ^ (v2 >> 9));
      unsigned int v24 = (uint64_t ****)(v21 + 16 * v23);
      int v25 = *v24;
      if (v2 == *v24) {
        goto LABEL_37;
      }
      uint64_t v26 = 0;
      int v27 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        if (v26) {
          BOOL v28 = 0;
        }
        else {
          BOOL v28 = v25 == (uint64_t ***)-8192;
        }
        if (v28) {
          uint64_t v26 = v24;
        }
        unsigned int v29 = v23 + v27++;
        unsigned int v23 = v29 & v22;
        unsigned int v24 = (uint64_t ****)(v21 + 16 * v23);
        int v25 = *v24;
        if (v2 == *v24) {
          goto LABEL_37;
        }
      }
      if (v26) {
        uint64_t v30 = v26;
      }
      else {
        uint64_t v30 = v24;
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    unsigned int v24 = (uint64_t ****)sub_1CC630A80(v3 + 2424, (uint64_t)&v42, (uint64_t *)&v42, v30);
    *unsigned int v24 = v42;
    v24[1] = 0;
LABEL_37:
    unint64_t v31 = v24[1];
    BOOL result = v24 + 1;
    *((void *)this + 1) = v31;
    *BOOL result = (uint64_t ***)this;
    *(void *)this = *(void *)this & 7 | (unint64_t)result;
    unint64_t v32 = (unint64_t *)*((void *)this + 1);
    if (v32) {
      unint64_t *v32 = *v32 & 7 | ((unint64_t)this + 8);
    }
    return result;
  }
  unint64_t v5 = *(void *)(v3 + 2424);
  uint64_t v42 = (uint64_t ***)*((void *)this + 2);
  int v6 = *(_DWORD *)(v3 + 2440);
  if (v6)
  {
    int v7 = v6 - 1;
    unsigned int v8 = v7 & ((v2 >> 4) ^ (v2 >> 9));
    uint64_t v9 = (uint64_t ****)(v5 + 16 * v8);
    uint64_t v10 = *v9;
    if (v2 == *v9) {
      goto LABEL_17;
    }
    uint64_t v11 = 0;
    int v12 = 1;
    while (v10 != (uint64_t ***)-4096)
    {
      if (v11) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v10 == (uint64_t ***)-8192;
      }
      if (v13) {
        uint64_t v11 = v9;
      }
      unsigned int v14 = v8 + v12++;
      unsigned int v8 = v14 & v7;
      uint64_t v9 = (uint64_t ****)(v5 + 16 * v8);
      uint64_t v10 = *v9;
      if (v2 == *v9) {
        goto LABEL_17;
      }
    }
    if (v11) {
      int v15 = v11;
    }
    else {
      int v15 = v9;
    }
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v9 = (uint64_t ****)sub_1CC630A80(v3 + 2424, (uint64_t)&v42, (uint64_t *)&v42, v15);
  *uint64_t v9 = v42;
  v9[1] = 0;
LABEL_17:
  int v17 = v9[1];
  BOOL result = v9 + 1;
  *((void *)this + 1) = v17;
  *BOOL result = (uint64_t ***)this;
  *(void *)this = *(void *)this & 7 | (unint64_t)result;
  unsigned int v18 = (unint64_t *)*((void *)this + 1);
  if (v18) {
    *unsigned int v18 = *v18 & 7 | ((unint64_t)this + 8);
  }
  *(unsigned char *)(*((void *)this + 2) + 17) |= 1u;
  unsigned int v19 = (void *)*v4;
  if (*v4 > v5 || (unint64_t)&v19[2 * *(unsigned int *)(v3 + 2440)] <= v5)
  {
    int v33 = *(_DWORD *)(v3 + 2432);
    if (v33 != 1)
    {
      if (v33)
      {
        uint64_t v34 = *(unsigned int *)(v3 + 2440);
        uint64_t v35 = &v19[2 * v34];
        if (v34)
        {
          uint64_t v36 = 16 * v34;
          unsigned int v37 = (void *)*v4;
          while ((*v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v37 += 2;
            v36 -= 16;
            if (!v36)
            {
              unsigned int v37 = &v19[2 * v34];
              break;
            }
          }
        }
        else
        {
          unsigned int v37 = (void *)*v4;
        }
      }
      else
      {
        uint64_t v34 = *(unsigned int *)(v3 + 2440);
        unsigned int v37 = &v19[2 * v34];
        uint64_t v35 = v37;
      }
      uint64_t v38 = &v19[2 * v34];
LABEL_51:
      while (v37 != v38)
      {
        unsigned int v40 = (uint64_t *)v37[1];
        unint64_t v39 = (unint64_t)(v37 + 1);
        uint64_t *v40 = *v40 & 7 | v39;
        unsigned int v41 = (void *)(v39 + 8);
        unsigned int v37 = v35;
        if (v41 != v35)
        {
          unsigned int v37 = v41;
          while ((*v37 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v37 += 2;
            if (v37 == v35)
            {
              unsigned int v37 = v35;
              goto LABEL_51;
            }
          }
        }
      }
    }
  }
  return result;
}

void *llvm::ValueHandleBase::RemoveFromUseList(void *this)
{
  unint64_t v1 = *this & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v1 = this[1];
  unint64_t v2 = (unint64_t *)this[1];
  if (v2)
  {
    unint64_t *v2 = *v2 & 7 | v1;
  }
  else
  {
    uint64_t v3 = this[2];
    uint64_t v4 = ***(int32x2_t ****)v3;
    unint64_t v5 = (unint64_t)v4[303];
    if (v5 <= v1)
    {
      uint64_t v6 = v4[305].u32[0];
      if (v5 + 16 * v6 > v1)
      {
        unsigned int v7 = v6 - 1;
        LODWORD(v8) = v7 & ((v3 >> 4) ^ (v3 >> 9));
        uint64_t v9 = (uint64_t *)(v5 + 16 * v8);
        uint64_t v10 = *v9;
        if (v3 == *v9)
        {
LABEL_9:
          *uint64_t v9 = -8192;
          v4[304] = vadd_s32(v4[304], (int32x2_t)0x1FFFFFFFFLL);
          uint64_t v3 = this[2];
        }
        else
        {
          int v11 = 1;
          while (v10 != -4096)
          {
            int v12 = v8 + v11++;
            uint64_t v8 = v12 & v7;
            uint64_t v10 = *(void *)(v5 + 16 * v8);
            if (v3 == v10)
            {
              uint64_t v9 = (uint64_t *)(v5 + 16 * v8);
              goto LABEL_9;
            }
          }
        }
        *(unsigned char *)(v3 + 17) &= ~1u;
      }
    }
  }
  return this;
}

void *sub_1CC630784(void *result)
{
  uint64_t v1 = result[3];
  if (v1)
  {
    if ((v1 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      unint64_t v2 = result[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v2 = result[2];
      uint64_t v3 = (unint64_t *)result[2];
      if (v3)
      {
        *uint64_t v3 = *v3 & 7 | v2;
      }
      else
      {
        uint64_t v4 = result[3];
        unint64_t v5 = ***(int32x2_t ****)v4;
        unint64_t v6 = (unint64_t)v5[303];
        if (v6 <= v2)
        {
          uint64_t v7 = v5[305].u32[0];
          if (v6 + 16 * v7 > v2)
          {
            unsigned int v8 = v7 - 1;
            LODWORD(v9) = v8 & ((v4 >> 4) ^ (v4 >> 9));
            uint64_t v10 = (uint64_t *)(v6 + 16 * v9);
            uint64_t v11 = *v10;
            if (v4 == *v10)
            {
LABEL_13:
              uint64_t *v10 = -8192;
              v5[304] = vadd_s32(v5[304], (int32x2_t)0x1FFFFFFFFLL);
              uint64_t v4 = result[3];
            }
            else
            {
              int v12 = 1;
              while (v11 != -4096)
              {
                int v13 = v9 + v12++;
                uint64_t v9 = v13 & v8;
                uint64_t v11 = *(void *)(v6 + 16 * v9);
                if (v4 == v11)
                {
                  uint64_t v10 = (uint64_t *)(v6 + 16 * v9);
                  goto LABEL_13;
                }
              }
            }
            *(unsigned char *)(v4 + 17) &= ~1u;
          }
        }
      }
    }
    result[3] = 0;
  }
  return result;
}

unint64_t *sub_1CC630870(unint64_t *result, void *a2)
{
  *BOOL result = 6;
  result[1] = 0;
  unint64_t v2 = a2[2];
  result[2] = v2;
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
  {
    unint64_t v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
    result[1] = *(void *)v4;
    *(void *)unint64_t v4 = result;
    *BOOL result = v4 | 6;
    unint64_t v5 = (unint64_t *)result[1];
    if (v5) {
      *unint64_t v5 = *v5 & 7 | (unint64_t)(result + 1);
    }
  }
  return result;
}

void *sub_1CC6308D4(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CB883C50(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (void *)(*(void *)a1 + 16 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      int v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          int v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 16 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CB883C50(a1, v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (void *)(*(void *)a1 + 16 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      int v13 = 0;
      int v20 = 1;
      while (v19 != -4096)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -8192;
        }
        if (v21) {
          int v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 16 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

BOOL sub_1CC630A50(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2) {
    BOOL v3 = *(unsigned __int8 *)(v2 + 16) >= 0x1Cu;
  }
  else {
    BOOL v3 = 0;
  }
  return !v3 || *(void *)(v2 + 40) != *a1;
}

void *sub_1CC630A80(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC08BF68(a1, 2 * v7);
    uint64_t v8 = *a3;
    int v10 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
    a4 = (void *)(*(void *)a1 + 16 * v11);
    uint64_t v12 = *a4;
    if (*a3 != *a4)
    {
      int v13 = 0;
      int v14 = 1;
      while (v12 != -4096)
      {
        if (v13) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v12 == -8192;
        }
        if (v15) {
          int v13 = a4;
        }
        unsigned int v16 = v11 + v14++;
        unsigned int v11 = v16 & v10;
        a4 = (void *)(*(void *)a1 + 16 * v11);
        uint64_t v12 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      uint64_t v8 = *a4;
      goto LABEL_4;
    }
    sub_1CC08BF68(a1, v7);
    uint64_t v8 = *a3;
    int v17 = *(_DWORD *)(a1 + 16) - 1;
    unsigned int v18 = ((*a3 >> 4) ^ (*a3 >> 9)) & v17;
    a4 = (void *)(*(void *)a1 + 16 * v18);
    uint64_t v19 = *a4;
    if (*a3 != *a4)
    {
      int v13 = 0;
      int v20 = 1;
      while (v19 != -4096)
      {
        if (v13) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v19 == -8192;
        }
        if (v21) {
          int v13 = a4;
        }
        unsigned int v22 = v18 + v20++;
        unsigned int v18 = v22 & v17;
        a4 = (void *)(*(void *)a1 + 16 * v18);
        uint64_t v19 = *a4;
        if (v8 == *a4) {
          goto LABEL_4;
        }
      }
LABEL_27:
      if (v13) {
        a4 = v13;
      }
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CC630BF8()
{
  int v4 = 1;
  char v2 = 0;
  BOOL v3 = &v2;
  *(void *)&long long v1 = "Deref attributes and metadata infer facts at definition only";
  *((void *)&v1 + 1) = 60;
  sub_1CD5DAFBC(&v4, (unsigned __int8 **)&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBCD8DF8, &dword_1CB82C000);
}

void llvm::ValueSymbolTable::~ValueSymbolTable(llvm::ValueSymbolTable *this)
{
  if (*((_DWORD *)this + 3))
  {
    uint64_t v2 = *((unsigned int *)this + 2);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)this + v3);
        if (v5 != -8 && v5 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_DWORD *)this + 3))
  {
    uint64_t v2 = *((unsigned int *)this + 2);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)this + v3);
        if (v5 != -8 && v5 != 0) {
          MEMORY[0x1D25D9CD0]();
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)this);
}

uint64_t llvm::ValueSymbolTable::makeUniqueName(llvm::StringMapImpl *a1, size_t a2, void *a3)
{
  uint64_t v3 = a3;
  size_t v4 = a2;
  unint64_t v6 = a3[1];
  unint64_t v7 = v6;
  for (i = v6; ; unint64_t v7 = i)
  {
    if (v6 != v7)
    {
      if (v6 <= v7)
      {
        if (v3[2] < v7) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        if (v7 != v6) {
          bzero((void *)(*v3 + v6), v7 - v6);
        }
      }
      v3[1] = v7;
    }
    int v44 = 0;
    char v48 = 0;
    uint64_t v49 = 0;
    uint64_t v43 = &unk_1F2646FA8;
    int v51 = v3;
    int v50 = 0;
    int v46 = 0;
    unsigned int v47 = 0;
    uint64_t v45 = 0;
    if (!v4 || *(unsigned __int8 *)(v4 + 16) > 3u) {
      goto LABEL_5;
    }
    uint64_t v31 = *(void *)(v4 + 40);
    if (!v31) {
      goto LABEL_49;
    }
    __int16 v39 = 260;
    v38[0] = v31 + 216;
    llvm::Triple::Triple((llvm::Triple *)&__p, (const llvm::Twine *)v38);
    int v32 = v42;
    if (v41 < 0) {
      operator delete(__p);
    }
    if ((v32 & 0xFFFFFFFE) == 0x2C) {
      goto LABEL_5;
    }
    if (v46 != v47) {
      *v47++ = 46;
    }
    else {
LABEL_49:
    }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v43, ".", 1uLL);
LABEL_5:
    unint64_t v8 = (*((_DWORD *)a1 + 9) + 1);
    *((_DWORD *)a1 + 9) = v8;
    sub_1CD098D14((llvm::raw_ostream *)&v43, v8, 0, 0, 0);
    size_t v9 = v3[1];
    __s1 = (unsigned __int8 *)*v3;
    unsigned int v10 = *((_DWORD *)a1 + 2);
    if (!v10)
    {
      *((_DWORD *)a1 + 3) = 0;
      *((_DWORD *)a1 + 4) = 0;
      int v33 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
      if (!v33) {
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      v33[16] = 2;
      *(void *)a1 = v33;
      unsigned int v10 = 16;
      *((_DWORD *)a1 + 2) = 16;
    }
    int v11 = 0;
    if (v9)
    {
      size_t v12 = v9;
      int v13 = __s1;
      do
      {
        int v14 = *v13++;
        int v11 = 33 * v11 + v14;
        --v12;
      }
      while (v12);
    }
    uint64_t v15 = *(void *)a1;
    unsigned int v16 = v10 - 1;
    uint64_t v17 = *(void *)a1 + 8 * v10 + 8;
    int v18 = -1;
    int v19 = 1;
    int v20 = v11;
    while (1)
    {
      uint64_t v21 = v20 & v16;
      unsigned int v22 = *(void **)(v15 + 8 * v21);
      if (!v22) {
        break;
      }
      if (v22 == (void *)-8)
      {
        if (v18 == -1) {
          int v18 = v20 & v16;
        }
      }
      else if (*(_DWORD *)(v17 + 4 * v21) == v11 {
             && v9 == *v22
      }
             && (!v9 || !memcmp(__s1, (char *)v22 + *((unsigned int *)a1 + 5), v9)))
      {
        goto LABEL_21;
      }
      int v20 = v19 + v21;
      ++v19;
    }
    uint64_t v23 = v18;
    if (v18 == -1)
    {
      uint64_t v23 = v21;
      uint64_t v21 = v21;
    }
    else
    {
      uint64_t v21 = v18;
    }
    *(_DWORD *)(v17 + 4 * v23) = v11;
    unsigned int v22 = *(void **)(v15 + 8 * v21);
LABEL_21:
    if (!v22) {
      goto LABEL_29;
    }
    if (v22 == (void *)-8) {
      break;
    }
    uint64_t v43 = &unk_1F2646B98;
    if (v50 == 1)
    {
      if (v45) {
        MEMORY[0x1D25D9CB0](v45, 0x1000C8077774924);
      }
    }
    uint64_t v3 = a3;
    size_t v4 = a2;
    unint64_t v6 = a3[1];
  }
  --*((_DWORD *)a1 + 4);
LABEL_29:
  unsigned int v24 = operator new(v9 + 17, (std::align_val_t)8uLL);
  int v25 = v24;
  uint64_t v26 = (char *)(v24 + 2);
  if (v9) {
    memcpy(v24 + 2, __s1, v9);
  }
  v26[v9] = 0;
  *int v25 = v9;
  v25[1] = a2;
  *(void *)(v15 + 8 * v21) = v25;
  ++*((_DWORD *)a1 + 3);
  for (uint64_t j = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v21)); ; ++j)
  {
    uint64_t v28 = *j;
    if (*j && v28 != -8) {
      break;
    }
  }
  uint64_t v43 = &unk_1F2646B98;
  if (v50 == 1 && v45) {
    MEMORY[0x1D25D9CB0](v45, 0x1000C8077774924);
  }
  return v28;
}

void llvm::ValueSymbolTable::reinsertValue(llvm::ValueSymbolTable *this, llvm::Value *a2)
{
  uint64_t v3 = this;
  v74[32] = *MEMORY[0x1E4F143B8];
  if ((*((unsigned char *)a2 + 23) & 0x10) == 0)
  {
    size_t v12 = 0;
    goto LABEL_9;
  }
  uint64_t v4 = ***(void ***)a2;
  uint64_t v5 = *(void *)(v4 + 152);
  uint64_t v6 = *(unsigned int *)(v4 + 168);
  if (!v6) {
    goto LABEL_35;
  }
  LODWORD(v7) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = v5 + 16 * v7;
  size_t v9 = *(llvm::Value **)v8;
  if (*(llvm::Value **)v8 != a2)
  {
    int v10 = 1;
    while (v9 != (llvm::Value *)-4096)
    {
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v6 - 1);
      size_t v9 = *(llvm::Value **)(v5 + 16 * v7);
      if (v9 == a2)
      {
        uint64_t v8 = v5 + 16 * v7;
        goto LABEL_8;
      }
    }
LABEL_35:
    uint64_t v8 = v5 + 16 * v6;
  }
LABEL_8:
  size_t v12 = *(size_t **)(v8 + 8);
LABEL_9:
  size_t v13 = *v12;
  __s1 = v12 + 2;
  unsigned int v14 = *((_DWORD *)this + 2);
  if (!v14)
  {
    *((_DWORD *)this + 3) = 0;
    *((_DWORD *)this + 4) = 0;
    int v63 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v63) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v63[16] = 2;
    *(void *)this = v63;
    unsigned int v14 = 16;
    *((_DWORD *)this + 2) = 16;
    uint64_t v3 = this;
  }
  unsigned int v69 = (int32x2_t ****)a2;
  unint64_t v70 = v12;
  int v15 = 0;
  if (v13)
  {
    size_t v16 = v13;
    uint64_t v17 = (unsigned __int8 *)(v12 + 2);
    do
    {
      int v18 = *v17++;
      int v15 = 33 * v15 + v18;
      --v16;
    }
    while (v16);
  }
  uint64_t v19 = *(void *)v3;
  unsigned int v20 = v14 - 1;
  uint64_t v21 = *(void *)v3 + 8 * v14 + 8;
  int v22 = -1;
  int v23 = 1;
  int v24 = v15;
  while (1)
  {
    uint64_t v25 = v24 & v20;
    uint64_t v26 = *(void **)(v19 + 8 * v25);
    if (!v26) {
      break;
    }
    if (v26 == (void *)-8)
    {
      if (v22 == -1) {
        int v22 = v24 & v20;
      }
    }
    else if (*(_DWORD *)(v21 + 4 * v25) == v15 && v13 == *v26)
    {
      if (!v13) {
        goto LABEL_25;
      }
      int v27 = v3;
      int v28 = memcmp(__s1, (char *)v26 + *((unsigned int *)v3 + 5), v13);
      uint64_t v3 = v27;
      if (!v28) {
        goto LABEL_25;
      }
    }
    int v24 = v23 + v25;
    ++v23;
  }
  uint64_t v29 = v22;
  if (v22 == -1)
  {
    uint64_t v29 = v25;
    uint64_t v25 = v25;
  }
  else
  {
    uint64_t v25 = v22;
  }
  *(_DWORD *)(v21 + 4 * v29) = v15;
  uint64_t v26 = *(void **)(v19 + 8 * v25);
LABEL_25:
  if (!v26) {
    goto LABEL_26;
  }
  if (v26 == (void *)-8)
  {
    --*((_DWORD *)v3 + 4);
LABEL_26:
    *(void *)(v19 + 8 * v25) = v70;
    ++*((_DWORD *)v3 + 3);
    llvm::StringMapImpl::RehashTable(v3, 0);
    return;
  }
  if ((*((unsigned char *)v69 + 23) & 0x10) == 0)
  {
    uint64_t v38 = v3;
    int v46 = 0;
    __int16 v39 = &byte_1CFBCE98E;
    unsigned int v47 = &byte_1CFBCE98E;
    goto LABEL_50;
  }
  uint64_t v30 = ***v69;
  int32x2_t v31 = v30[19];
  uint64_t v32 = v30[21].u32[0];
  if (v32)
  {
    LODWORD(v33) = (v32 - 1) & ((v69 >> 4) ^ (v69 >> 9));
    uint64_t v34 = (int32x2_t *****)(*(void *)&v31 + 16 * v33);
    uint64_t v35 = *v34;
    if (*v34 == v69)
    {
      uint64_t v38 = v3;
      __int16 v39 = (char *)(v34[1] + 2);
      goto LABEL_44;
    }
    int v36 = 1;
    while (v35 != (int32x2_t ****)-4096)
    {
      int v37 = v33 + v36++;
      uint64_t v33 = v37 & (v32 - 1);
      uint64_t v35 = *(int32x2_t *****)(*(void *)&v31 + 16 * v33);
      if (v35 == v69)
      {
        uint64_t v38 = v3;
        goto LABEL_43;
      }
    }
  }
  uint64_t v38 = v3;
  uint64_t v33 = v32;
LABEL_43:
  __int16 v39 = (char *)(*(void *)(*(void *)&v31 + 16 * v33 + 8) + 16);
  if (!v32) {
    goto LABEL_65;
  }
LABEL_44:
  LODWORD(v40) = (v32 - 1) & ((v69 >> 4) ^ (v69 >> 9));
  char v41 = (int32x2_t *****)(*(void *)&v31 + 16 * v40);
  int v42 = *v41;
  if (*v41 != v69)
  {
    int v43 = 1;
    while (v42 != (int32x2_t ****)-4096)
    {
      int v44 = v40 + v43++;
      uint64_t v40 = v44 & (v32 - 1);
      int v42 = *(int32x2_t *****)(*(void *)&v31 + 16 * v40);
      if (v42 == v69)
      {
        char v41 = (int32x2_t *****)(*(void *)&v31 + 16 * v40);
        goto LABEL_49;
      }
    }
LABEL_65:
    char v41 = (int32x2_t *****)(*(void *)&v31 + 16 * v32);
  }
LABEL_49:
  uint64_t v45 = v41[1];
  char v48 = *v45;
  unsigned int v47 = (char *)(v45 + 2);
  int v46 = v48;
LABEL_50:
  uint64_t v49 = (char *)v46 + (void)v47;
  __dst = v74;
  long long v73 = xmmword_1CD96DBF0;
  BOOL v50 = v49 != v39;
  size_t v51 = v49 - v39;
  if ((unint64_t)(v49 - v39) > 0x100 || v49 == v39)
  {
    if (v51 >= 0x101) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v64 = 0;
    if (v50)
    {
      memcpy(__dst, v39, v51);
      uint64_t v64 = v73;
    }
    *(void *)&long long v73 = v64 + v51;
    if ((*((unsigned char *)v69 + 23) & 0x10) != 0)
    {
      uint64_t v65 = ***v69;
      int32x2_t v53 = v65[19];
      uint64_t v54 = v65[21].u32[0];
      if (v54)
      {
        LODWORD(v55) = (v54 - 1) & ((v69 >> 4) ^ (v69 >> 9));
        uint64_t v56 = (int32x2_t *****)(*(void *)&v53 + 16 * v55);
        unint64_t v66 = *v56;
        if (*v56 != v69)
        {
          int v67 = 1;
          while (v66 != (int32x2_t ****)-4096)
          {
            int v68 = v55 + v67++;
            uint64_t v55 = v68 & (v54 - 1);
            unint64_t v66 = *(int32x2_t *****)(*(void *)&v53 + 16 * v55);
            if (v66 == v69)
            {
LABEL_58:
              uint64_t v56 = (int32x2_t *****)(*(void *)&v53 + 16 * v55);
              goto LABEL_59;
            }
          }
          goto LABEL_80;
        }
        goto LABEL_59;
      }
LABEL_80:
      uint64_t v56 = (int32x2_t *****)(*(void *)&v53 + 16 * v54);
      goto LABEL_59;
    }
  }
  else
  {
    memcpy(__dst, v39, v49 - v39);
    *(void *)&long long v73 = v73 + v51;
    if ((*((unsigned char *)v69 + 23) & 0x10) != 0)
    {
      BOOL v52 = ***v69;
      int32x2_t v53 = v52[19];
      uint64_t v54 = v52[21].u32[0];
      if (v54)
      {
        LODWORD(v55) = (v54 - 1) & ((v69 >> 4) ^ (v69 >> 9));
        uint64_t v56 = (int32x2_t *****)(*(void *)&v53 + 16 * v55);
        unsigned int v57 = *v56;
        if (*v56 != v69)
        {
          int v58 = 1;
          while (v57 != (int32x2_t ****)-4096)
          {
            int v59 = v55 + v58++;
            uint64_t v55 = v59 & (v54 - 1);
            unsigned int v57 = *(int32x2_t *****)(*(void *)&v53 + 16 * v55);
            if (v57 == v69) {
              goto LABEL_58;
            }
          }
          goto LABEL_80;
        }
LABEL_59:
        uint64_t v60 = v56[1];
        goto LABEL_60;
      }
      goto LABEL_80;
    }
  }
  uint64_t v60 = 0;
LABEL_60:
  MEMORY[0x1D25D9CD0](v60, 8);
  UniqueName = (int32x2_t ***)llvm::ValueSymbolTable::makeUniqueName(v38, (size_t)v69, &__dst);
  llvm::Value::setValueName(v69, UniqueName);
  if (__dst != v74) {
    free(__dst);
  }
}

int32x2_t llvm::ValueSymbolTable::removeValueName(uint64_t *a1, size_t *a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  if (v2)
  {
    uint64_t v4 = *((unsigned int *)a1 + 5);
    uint64_t v5 = (char *)a2 + v4;
    size_t v6 = *a2;
    if (*a2)
    {
      int v7 = 0;
      size_t v8 = *a2;
      size_t v9 = (unsigned __int8 *)a2 + v4;
      do
      {
        int v10 = *v9++;
        int v7 = 33 * v7 + v10;
        --v8;
      }
      while (v8);
    }
    else
    {
      int v7 = 0;
    }
    unsigned int v11 = v2 - 1;
    uint64_t v12 = *a1;
    uint64_t v13 = *a1 + 8 * v2 + 8;
    int v14 = 1;
    int v15 = v7;
    while (1)
    {
      uint64_t v16 = v15 & v11;
      uint64_t v17 = *(void **)(v12 + 8 * v16);
      if (v17 != (void *)-8)
      {
        if (!v17) {
          return result;
        }
        if (*(_DWORD *)(v13 + 4 * v16) == v7 && v6 == *v17 && (!v6 || !memcmp(v5, (char *)v17 + v4, v6))) {
          break;
        }
      }
      int v15 = v14 + v16;
      ++v14;
    }
    *(void *)(v12 + 8 * (int)v16) = -8;
    int32x2_t result = vadd_s32(*(int32x2_t *)((char *)a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
    *(uint64_t *)((char *)a1 + 12) = (uint64_t)result;
  }
  return result;
}

uint64_t llvm::ValueSymbolTable::createValueName(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t a3, size_t a4)
{
  size_t v5 = a3;
  v41[32] = *MEMORY[0x1E4F143B8];
  size_t v8 = *((unsigned int *)a1 + 8);
  if ((v8 & 0x80000000) == 0)
  {
    if (v8 <= 1) {
      unint64_t v9 = 1;
    }
    else {
      unint64_t v9 = v8;
    }
    if (a3 < v9) {
      unint64_t v9 = a3;
    }
    if (a3 > v8) {
      size_t v5 = v9;
    }
  }
  unsigned int v10 = *((_DWORD *)a1 + 2);
  if (!v10)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    uint64_t v35 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v35) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v35[16] = 2;
    *(void *)a1 = v35;
    unsigned int v10 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  size_t v37 = a4;
  int v11 = 0;
  if (v5)
  {
    size_t v12 = v5;
    uint64_t v13 = a2;
    do
    {
      int v14 = *v13++;
      int v11 = 33 * v11 + v14;
      --v12;
    }
    while (v12);
  }
  __s1 = a2;
  int v36 = &a2[v5];
  unsigned int v15 = v10 - 1;
  uint64_t v16 = *(void *)a1;
  uint64_t v17 = *(void *)a1 + 8 * v10 + 8;
  int v18 = -1;
  int v19 = 1;
  int v20 = v11;
  while (1)
  {
    uint64_t v21 = v20 & v15;
    int v22 = *(void **)(v16 + 8 * v21);
    if (!v22) {
      break;
    }
    if (v22 == (void *)-8)
    {
      if (v18 == -1) {
        int v18 = v20 & v15;
      }
    }
    else if (*(_DWORD *)(v17 + 4 * v21) == v11 {
           && v5 == *v22
    }
           && (!v5 || !memcmp(__s1, (char *)v22 + *((unsigned int *)a1 + 5), v5)))
    {
      goto LABEL_25;
    }
    int v20 = v19 + v21;
    ++v19;
  }
  uint64_t v23 = v18;
  if (v18 == -1)
  {
    uint64_t v23 = v21;
    uint64_t v21 = v21;
  }
  else
  {
    uint64_t v21 = v18;
  }
  *(_DWORD *)(v17 + 4 * v23) = v11;
  int v22 = *(void **)(v16 + 8 * v21);
LABEL_25:
  if (!v22) {
    goto LABEL_26;
  }
  if (v22 == (void *)-8)
  {
    --*((_DWORD *)a1 + 4);
LABEL_26:
    int v24 = operator new(v5 + 17, (std::align_val_t)8uLL);
    uint64_t v25 = v24;
    uint64_t v26 = (char *)(v24 + 2);
    if (v5) {
      memcpy(v24 + 2, __s1, v5);
    }
    v26[v5] = 0;
    *uint64_t v25 = v5;
    v25[1] = v37;
    *(void *)(v16 + 8 * v21) = v25;
    ++*((_DWORD *)a1 + 3);
    for (unint64_t i = (uint64_t *)(*(void *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v21)); ; ++i)
    {
      uint64_t UniqueName = *i;
      if (*i && UniqueName != -8) {
        break;
      }
    }
    return UniqueName;
  }
  __dst = v41;
  long long v40 = xmmword_1CD96DBF0;
  size_t v31 = v36 - (unsigned char *)__s1;
  if ((unint64_t)(v36 - (unsigned char *)__s1) <= 0x100 && v5)
  {
    uint64_t v32 = __dst;
    size_t v33 = v37;
  }
  else
  {
    size_t v33 = v37;
    if (v31 >= 0x101) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    uint64_t v34 = 0;
    if (!v5) {
      goto LABEL_39;
    }
    uint64_t v32 = __dst;
  }
  memcpy(v32, __s1, v31);
  uint64_t v34 = v40;
LABEL_39:
  *(void *)&long long v40 = v34 + v31;
  uint64_t UniqueName = llvm::ValueSymbolTable::makeUniqueName(a1, v33, &__dst);
  if (__dst != v41) {
    free(__dst);
  }
  return UniqueName;
}

uint64_t llvm::VectorBuilder::handleError(uint64_t this, llvm *a2)
{
  if (*(_DWORD *)(this + 8) != 1) {
    llvm::report_fatal_error(a2, (const llvm::Twine *)1);
  }
  return this;
}

uint64_t llvm::VectorBuilder::getModule(llvm::VectorBuilder *this)
{
  return *(void *)(*(void *)(*(void *)(*(void *)this + 48) + 56) + 40);
}

void *llvm::VectorBuilder::getAllTrueMask(llvm::VectorBuilder *this)
{
  uint64_t v2 = (uint64_t **)(**(void **)(*(void *)this + 64) + 1888);
  uint64_t v3 = (llvm::Type *)*((void *)this + 4);
  if ((unint64_t)v3 >> 32 == 1) {
    llvm::ScalableVectorType::get(v2, v3);
  }
  else {
    llvm::FixedVectorType::get((llvm::FixedVectorType *)v2, v3);
  }

  return llvm::Constant::getAllOnesValue(v4, v5, v6);
}

void *llvm::VectorBuilder::requestMask(llvm::VectorBuilder *this)
{
  int32x2_t result = (void *)*((void *)this + 2);
  if (!result)
  {
    uint64_t v3 = (uint64_t **)(**(void **)(*(void *)this + 64) + 1888);
    uint64_t v4 = (llvm::Type *)*((void *)this + 4);
    if ((unint64_t)v4 >> 32 == 1) {
      llvm::ScalableVectorType::get(v3, v4);
    }
    else {
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v3, v4);
    }
    return llvm::Constant::getAllOnesValue(v5, v6, v7);
  }
  return result;
}

void *llvm::VectorBuilder::requestEVL(llvm::VectorBuilder *this, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t v3 = (void *)*((void *)this + 3);
  if (!v3)
  {
    uint64_t v4 = **(void **)(*(void *)this + 64);
    uint64_t v5 = *((unsigned int *)this + 8);
    size_t v6 = *(llvm::ConstantInt **)(v4 + 1960);
    unsigned int v7 = *(_DWORD *)(v4 + 1968);
    unsigned int v11 = v7 >> 8;
    if (v7 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v8 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v7) + 63);
    if (v7 <= 0xFF) {
      unint64_t v8 = 0;
    }
    unint64_t v10 = v8 & v5;
    uint64_t v3 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v10, a3);
    if (v11 >= 0x41 && v10) {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
    }
  }
  return v3;
}

uint64_t llvm::VectorBuilder::createVectorInstruction(llvm::VectorBuilder *a1, llvm::VPIntrinsic *this, uint64_t a3, unsigned char *a4, unint64_t a5, uint64_t a6)
{
  v39[6] = *MEMORY[0x1E4F143B8];
  unsigned int v11 = (llvm::VPIntrinsic *)llvm::VPIntrinsic::getForOpcode(this);
  if (v11)
  {
    int v14 = v11;
    uint64_t MaskParamPos = llvm::VPIntrinsic::getMaskParamPos(v11);
    uint64_t VectorLengthParamPos = llvm::VPIntrinsic::getVectorLengthParamPos(v14);
    if (BYTE4(MaskParamPos)) {
      unint64_t v17 = a5 + 1;
    }
    else {
      unint64_t v17 = a5;
    }
    if (BYTE4(MaskParamPos)) {
      unsigned int v18 = MaskParamPos;
    }
    else {
      unsigned int v18 = a5;
    }
    int v19 = BYTE4(VectorLengthParamPos);
    if (BYTE4(VectorLengthParamPos)) {
      unint64_t v20 = v17 + 1;
    }
    else {
      unint64_t v20 = v17;
    }
    size_t v37 = (uint64_t **)v39;
    uint64_t v38 = 0x600000000;
    unint64_t v21 = v18;
    int v36 = VectorLengthParamPos;
    if (BYTE4(VectorLengthParamPos)) {
      unsigned int v22 = VectorLengthParamPos;
    }
    else {
      unsigned int v22 = a5;
    }
    if (v22 < (unint64_t)v18) {
      unint64_t v21 = v22;
    }
    if (v21 >= a5)
    {
      sub_1CC188254((unsigned int *)&v37, a4, &a4[8 * a5]);
      sub_1CD42769C((uint64_t)&v37, v20);
    }
    else
    {
      BOOL v35 = BYTE4(VectorLengthParamPos) != 0;
      sub_1CD42769C((uint64_t)&v37, v20);
      if (v20)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        do
        {
          if (v19) {
            BOOL v27 = v36 == v26;
          }
          else {
            BOOL v27 = 0;
          }
          char v28 = v27;
          BOOL v29 = MaskParamPos != v26 || BYTE4(MaskParamPos) == 0;
          if (v29 && (v28 & 1) == 0)
          {
            uint64_t v30 = *(uint64_t **)&a4[8 * v25++];
            v37[v26] = v30;
          }
          ++v26;
        }
        while (a5 + v35 + (BYTE4(MaskParamPos) != 0) != v26);
      }
    }
    if (BYTE4(MaskParamPos))
    {
      size_t v31 = (uint64_t *)llvm::VectorBuilder::requestMask(a1);
      v37[MaskParamPos] = v31;
    }
    if (v19)
    {
      uint64_t v32 = llvm::VectorBuilder::requestEVL(a1, v23, v24);
      v37[v36] = v32;
    }
    uint64_t DeclarationForParams = llvm::VPIntrinsic::getDeclarationForParams(*(uint64_t ***)(*(void *)(*(void *)(*(void *)a1 + 48) + 56) + 40), (int)v14, a3, v37);
    if (DeclarationForParams) {
      uint64_t v34 = *(uint64_t ***)(DeclarationForParams + 24);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v12 = sub_1CB845BAC(*(uint64_t **)a1, v34, (uint64_t **)DeclarationForParams, (uint64_t *)v37, v38, a6, 0);
    if (v37 != v39) {
      free(v37);
    }
  }
  else
  {
    if (*((_DWORD *)a1 + 2) != 1) {
      llvm::report_fatal_error((llvm *)"No VPIntrinsic for this opcode", (const llvm::Twine *)1);
    }
    return 0;
  }
  return v12;
}

uint64_t sub_1CC631F04(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a4;
  *(void *)(a1 + 16) = &unk_1F26160C0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 257;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  __int16 v9 = 260;
  unint64_t v8 = a4 + 27;
  llvm::Triple::Triple((llvm::Triple *)(a1 + 128), (const llvm::Twine *)&v8);
  *(void *)(a1 + 176) = a4 + 34;
  *(void *)(a1 + 184) = *a4;
  *(_WORD *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 216;
  *(void *)(a1 + 208) = 0x100000000;
  *(_DWORD *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(unsigned char *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = a1 + 304;
  *(void *)(a1 + 280) = a1 + 304;
  *(void *)(a1 + 288) = 16;
  *(_DWORD *)(a1 + 296) = 0;
  *(void *)(a1 + 432) = a1 + 464;
  *(void *)(a1 + 440) = a1 + 464;
  *(void *)(a1 + 448) = 32;
  *(_DWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 744) = a1 + 776;
  *(void *)(a1 + 752) = a1 + 776;
  *(void *)(a1 + 760) = 2;
  *(_DWORD *)(a1 + 768) = 0;
  *(void *)(a1 + 792) = 0;
  *(_WORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 804) = 0x8000;
  *(_DWORD *)(a1 + 824) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_DWORD *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 856) = 0u;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 888) = 0;
  *(void *)(a1 + 904) = a1 + 936;
  *(void *)(a1 + 912) = a1 + 936;
  *(void *)(a1 + 920) = 32;
  *(_DWORD *)(a1 + 928) = 0;
  *(void *)(a1 + 1192) = a1 + 1208;
  *(void *)(a1 + 1200) = 0x400000000;
  *(void *)(a1 + 1240) = a1 + 1272;
  *(void *)(a1 + 1248) = a1 + 1272;
  *(void *)(a1 + 1256) = 32;
  *(_DWORD *)(a1 + 1264) = 0;
  *(void *)(a1 + 1528) = a1 + 1560;
  *(void *)(a1 + 1536) = a1 + 1560;
  *(void *)(a1 + 1544) = 32;
  *(_DWORD *)(a1 + 1552) = 0;
  *(void *)(a1 + 1816) = a1 + 1832;
  *(void *)(a1 + 1824) = 0x1000000000;
  *(void *)(a1 + 1960) = a1;
  *(void *)(a1 + 1976) = 0;
  *(void *)(a1 + 1968) = 0;
  *(_DWORD *)(a1 + 1984) = 0;
  *(void *)(a1 + 2000) = 0;
  *(void *)(a1 + 1992) = 0;
  *(_DWORD *)(a1 + 2008) = 0;
  *(void *)(a1 + 2016) = a1 + 2032;
  *(void *)(a1 + 2024) = 0x400000000;
  *(unsigned char *)(a1 + 194) = a3;
  return a1;
}

BOOL sub_1CC632100(unint64_t a1, uint64_t ***a2)
{
  v358[8] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t **)(a2 + 9);
  if (a2[9] != (uint64_t **)(a2 + 9))
  {
    *(void *)(a1 + 256) = a2;
    sub_1CC5A43B0(a1 + 200, 0);
  }
  for (unint64_t i = a2[10]; i != v4; unint64_t i = (uint64_t **)i[1])
  {
    if (i) {
      size_t v6 = (unint64_t *)(i - 3);
    }
    else {
      size_t v6 = 0;
    }
    unsigned int v7 = (unint64_t *)v6[5];
    if (v7 != v6 + 5)
    {
      uint64_t v8 = v7 ? (uint64_t)(v7 - 3) : 0;
      if (*(unsigned __int8 *)(v8 + 16) - 29 < 0xB) {
        continue;
      }
    }
    unint64_t v17 = *(llvm::raw_ostream **)a1;
    if (*(void *)a1)
    {
      unsigned int v18 = (void *)*((void *)v17 + 4);
      if (*((void *)v17 + 3) - (void)v18 > 0x18uLL)
      {
        qmemcpy(v18, "Basic Block in function '", 25);
        *((void *)v17 + 4) += 25;
      }
      else
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "Basic Block in function '", 0x19uLL);
      }
      if ((*((unsigned char *)a2 + 23) & 0x10) != 0)
      {
        uint64_t v19 = ***a2;
        uint64_t v20 = *(void *)(v19 + 152);
        uint64_t v21 = *(unsigned int *)(v19 + 168);
        if (!v21) {
          goto LABEL_207;
        }
        LODWORD(v22) = (v21 - 1) & ((a2 >> 4) ^ (a2 >> 9));
        uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
        int v24 = *v23;
        if (*v23 != a2)
        {
          int v25 = 1;
          while (v24 != (uint64_t ***)-4096)
          {
            int v26 = v22 + v25++;
            uint64_t v22 = v26 & (v21 - 1);
            int v24 = *(uint64_t ****)(v20 + 16 * v22);
            if (v24 == a2)
            {
              uint64_t v23 = (uint64_t ****)(v20 + 16 * v22);
              goto LABEL_208;
            }
          }
LABEL_207:
          uint64_t v23 = (uint64_t ****)(v20 + 16 * v21);
        }
LABEL_208:
        uint64_t v124 = v23[1];
        size_t v127 = (size_t)*v124;
        uint64_t v125 = (const char *)(v124 + 2);
        size_t v126 = v127;
        uint64_t v128 = (void *)*((void *)v17 + 4);
        if (v127 > *((void *)v17 + 3) - (void)v128)
        {
          llvm::raw_ostream::write(v17, v125, v126);
          goto LABEL_210;
        }
        if (v126)
        {
          memcpy(v128, v125, v126);
          uint64_t v128 = (void *)(*((void *)v17 + 4) + v126);
          *((void *)v17 + 4) = v128;
        }
      }
      else
      {
LABEL_210:
        uint64_t v128 = (void *)*((void *)v17 + 4);
      }
      if (*((void *)v17 + 3) - (void)v128 > 0x1BuLL)
      {
        qmemcpy(v128, "' does not have terminator!\n", 28);
        *((void *)v17 + 4) += 28;
      }
      else
      {
        llvm::raw_ostream::write(v17, "' does not have terminator!\n", 0x1CuLL);
      }
      sub_1CC4F9C88(v6, *(llvm::raw_ostream **)a1, 1, (llvm::ModuleSlotTracker *)(a1 + 16));
      uint64_t v129 = *(llvm::raw_ostream **)a1;
      uint64_t v130 = *(unsigned char **)(*(void *)a1 + 32);
      if (*(unsigned char **)(*(void *)a1 + 24) != v130)
      {
        BOOL result = 0;
        unsigned char *v130 = 10;
        ++*((void *)v129 + 4);
        return result;
      }
      llvm::raw_ostream::write(*(llvm::raw_ostream **)a1, "\n", 1uLL);
    }
    return 0;
  }
  *(unsigned char *)(a1 + 192) = 0;
  sub_1CC6387C4(a1, (llvm::GlobalValue *)a2);
  uint64_t v9 = (uint64_t)a2[3];
  v341[0] = (llvm::Type *)v9;
  uint64_t v340 = v4;
  if (*(uint64_t **)(a1 + 184) != **a2)
  {
    int v158 = "Function context does not match Module context!";
LABEL_286:
    uint64_t v346 = v158;
    v350[0] = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
    if (!*(void *)a1) {
      goto LABEL_336;
    }
    uint64_t v159 = (llvm::raw_ostream **)a1;
    int v160 = (llvm::Value *)a2;
    goto LABEL_288;
  }
  unsigned int v10 = *((_DWORD *)a2 + 8);
  if ((v10 & 0xF) == 0xA)
  {
    int v158 = "Functions may not have common linkage";
    goto LABEL_286;
  }
  int v11 = *(_DWORD *)(v9 + 12);
  if (v11 - 1 != *((_DWORD *)a2 + 24))
  {
    uint64_t v346 = "# formal arguments must match # of arguments for function type!";
    v350[0] = 259;
    uint64_t v355 = (llvm::Value **)a2;
    sub_1CD5DBB8C((llvm::raw_ostream *)a1, (llvm::Twine *)&v346, (llvm::Value **)&v355, v341);
    goto LABEL_336;
  }
  int v12 = *(unsigned __int8 *)(**(void **)(v9 + 16) + 8);
  if (v12 == 14)
  {
    int v158 = "Functions cannot return aggregate values!";
    goto LABEL_286;
  }
  uint64_t v13 = a2[14];
  if (v13)
  {
    unsigned int v14 = *((_DWORD *)v13 + 2);
    if (v14 < 3)
    {
LABEL_20:
      if (v14 > v11 + 1)
      {
        uint64_t v16 = "Attribute after last parameter!";
        goto LABEL_333;
      }
      int v15 = (v10 >> 13) & 1;
      sub_1CC638F10(a1, v9, (uint64_t)a2[14], (llvm::Value *)a2, (a2[4] & 0x2000) != 0, 0);
      if ((*((unsigned char *)v13 + 12) & 0x10) != 0)
      {
        uint64_t v16 = "Attribute 'builtin' can only be applied to a callsite.";
        goto LABEL_333;
      }
      if (((_BYTE)v13[4] & 0x40) != 0)
      {
        uint64_t v16 = "Attribute 'elementtype' can only be applied to a callsite.";
        goto LABEL_333;
      }
      goto LABEL_35;
    }
    uint64_t v161 = v13[7];
    if (v161 && (*((unsigned char *)v161 + 21) & 2) != 0)
    {
      if (v12 == 7) {
        goto LABEL_20;
      }
    }
    else
    {
      if (v14 < 4) {
        goto LABEL_20;
      }
      uint64_t v162 = v13[8];
      if (!v162) {
        goto LABEL_20;
      }
      int v163 = *((unsigned char *)v162 + 21) & 2;
      if (v12 == 7 || v163 == 0) {
        goto LABEL_20;
      }
    }
    uint64_t v16 = "Invalid struct return type!";
    goto LABEL_333;
  }
  int v15 = (v10 >> 13) & 1;
  sub_1CC638F10(a1, v9, 0, (llvm::Value *)a2, (a2[4] & 0x2000) != 0, 0);
LABEL_35:
  unsigned int v27 = *((unsigned __int16 *)a2 + 9);
  int v28 = (v27 >> 4) & 0x3FF;
  switch(v28)
  {
    case 'G':
    case 'H':
    case 'M':
      goto LABEL_60;
    case 'I':
    case 'J':
    case 'K':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case '\\':
      goto LABEL_61;
    case 'L':
    case '[':
      if (*(unsigned char *)(*a2[3][2] + 8) == 7) {
        goto LABEL_37;
      }
      uint64_t v16 = "Calling convention requires void return type";
      goto LABEL_333;
    case 'S':
      if (!a2[12]) {
        goto LABEL_61;
      }
      if (v13)
      {
        if (*((_DWORD *)v13 + 2) >= 3u)
        {
          uint64_t v339 = v13[7];
          if (v339)
          {
            if ((*((unsigned char *)v339 + 20) & 0x20) != 0) {
              goto LABEL_61;
            }
          }
        }
      }
      uint64_t v16 = "Calling convention parameter requires byval";
      goto LABEL_333;
    case 'W':
    case 'X':
    case 'Y':
    case 'Z':
    case ']':
LABEL_37:
      BOOL v29 = a2[14];
      if (v29)
      {
        unsigned int v30 = *((_DWORD *)v29 + 2);
        if (v30 >= 3
          && ((unint64_t v170 = v29[7]) != 0 && (*((unsigned char *)v170 + 21) & 2) != 0
           || v30 >= 4 && (int v171 = v29[8]) != 0 && (*((unsigned char *)v171 + 21) & 2) != 0))
        {
          uint64_t v16 = "Calling convention does not allow sret";
          goto LABEL_333;
        }
      }
      if ((v27 & 0x3FF0) == 0x4C0) {
        goto LABEL_60;
      }
      int v31 = *(_DWORD *)(*(void *)(a1 + 176) + 4);
      uint64_t v32 = sub_1CB923B44((llvm::Function *)a2);
      if (v32 == v33) {
        goto LABEL_60;
      }
      uint64_t v34 = v13 + 5;
      unsigned int v35 = 2;
      break;
    default:
      if ((v28 - 8) < 2 || v28 == 255) {
        goto LABEL_60;
      }
      goto LABEL_61;
  }
  do
  {
    if (v13 && v35 < *((_DWORD *)v13 + 2))
    {
      int v36 = v34[v35];
      if (v36 && (*((unsigned char *)v36 + 20) & 0x20) != 0)
      {
        uint64_t v16 = "Calling convention disallows byval";
        goto LABEL_333;
      }
      size_t v37 = v34[v35];
      if (v37 && (*((unsigned char *)v37 + 21) & 1) != 0)
      {
        uint64_t v16 = "Calling convention disallows preallocated";
        goto LABEL_333;
      }
      uint64_t v38 = v34[v35];
      if (v38 && *((char *)v38 + 20) < 0)
      {
        uint64_t v16 = "Calling convention disallows inalloca";
LABEL_333:
        uint64_t v346 = v16;
        v350[0] = 259;
        sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
        if (*(void *)a1) {
          sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)a2);
        }
        goto LABEL_335;
      }
      __int16 v39 = v34[v35];
      if (v39 && (*((unsigned char *)v39 + 20) & 0x10) != 0)
      {
        unsigned int v40 = *(_DWORD *)(*(void *)v32 + 8);
        if ((v40 & 0xFE) == 0x12) {
          unsigned int v40 = *(_DWORD *)(**(void **)(*(void *)v32 + 16) + 8);
        }
        if (v31 == v40 >> 8)
        {
          uint64_t v16 = "Calling convention disallows stack byref";
          goto LABEL_333;
        }
      }
    }
    v32 += 40;
    ++v35;
  }
  while (v32 != v33);
LABEL_60:
  if (*((_DWORD *)a2[3] + 2) >= 0x100u)
  {
    uint64_t v16 = "Calling convention does not support varargs or perfect forwarding!";
    goto LABEL_333;
  }
LABEL_61:
  uint64_t v41 = sub_1CB923B44((llvm::Function *)a2);
  if ((llvm::Value **)v41 != v42)
  {
    int v43 = (llvm::Value **)v41;
    int v44 = v42;
    unsigned int v45 = 2;
    while (1)
    {
      uint64_t v46 = *(void *)(v9 + 16);
      uint64_t v47 = v45 - 1;
      if (*v43 != *(llvm::Value **)(v46 + 8 * v47))
      {
        uint64_t v346 = "Argument value does not match function argument type!";
        v350[0] = 259;
        uint64_t v355 = v43;
        uint64_t v351 = *(llvm::User **)(v46 + 8 * v47);
        sub_1CD5DBB8C((llvm::raw_ostream *)a1, (llvm::Twine *)&v346, (llvm::Value **)&v355, &v351);
        goto LABEL_335;
      }
      int v48 = *((_DWORD *)*v43 + 2);
      BOOL v49 = v48 == 14 || v48 == 7;
      if (v49) {
        break;
      }
      if ((v15 & 1) == 0)
      {
        switch(v48)
        {
          case 0xCu:
            uint64_t v172 = "Function takes token but isn't an intrinsic";
            goto LABEL_307;
          case 0xBu:
            uint64_t v172 = "Function takes x86_amx but isn't an intrinsic";
LABEL_307:
            uint64_t v346 = v172;
            v350[0] = 259;
            uint64_t v355 = v43;
            uint64_t v351 = (llvm::User *)a2;
            sub_1CD5DBC00((llvm::raw_ostream *)a1, (llvm::Twine *)&v346, (llvm::Value **)&v355, &v351);
LABEL_335:
            uint64_t v4 = v340;
            goto LABEL_336;
          case 9u:
            uint64_t v172 = "Function takes metadata but isn't an intrinsic";
            goto LABEL_307;
        }
      }
      if (v13)
      {
        if (v45 < *((_DWORD *)v13 + 2))
        {
          BOOL v50 = v13[v45 + 5];
          if (v50)
          {
            if (*((char *)v50 + 19) < 0) {
              sub_1CC639C78(a1, (llvm::Value *)v43);
            }
          }
        }
      }
      v43 += 5;
      ++v45;
      if (v43 == v44) {
        goto LABEL_79;
      }
    }
    uint64_t v346 = "Function arguments must have first-class types!";
    v350[0] = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
    uint64_t v4 = v340;
    if (!*(void *)a1) {
      goto LABEL_336;
    }
    uint64_t v159 = (llvm::raw_ostream **)a1;
    int v160 = (llvm::Value *)v43;
LABEL_288:
    sub_1CD5DBED0(v159, v160);
    goto LABEL_336;
  }
LABEL_79:
  uint64_t v4 = v340;
  if ((v15 & 1) == 0)
  {
    int v51 = *(unsigned __int8 *)(*a2[3][2] + 8);
    if (v51 == 11)
    {
      int v158 = "Function returns a x86_amx but isn't an intrinsic";
      goto LABEL_286;
    }
    if (v51 == 12)
    {
      int v158 = "Function returns a token but isn't an intrinsic";
      goto LABEL_286;
    }
  }
  uint64_t v355 = (llvm::Value **)v357;
  uint64_t v356 = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v355);
  if (v356)
  {
    uint64_t v53 = 16 * v356;
    uint64_t v54 = (char *)(v355 + 1);
    while (1)
    {
      if (*((_DWORD *)v54 - 2) == 2)
      {
        uint64_t v55 = *(llvm::Metadata **)v54;
        uint64_t v56 = *(unsigned int *)(*(void *)v54 + 8);
        if (v56 <= 1)
        {
          uint64_t v169 = "!prof annotations should have no less than 2 operands";
          goto LABEL_319;
        }
        unsigned int v57 = (uint64_t *)((char *)v55 - 8 * v56);
        uint64_t v58 = *v57;
        if (!*v57)
        {
          uint64_t v169 = "first operand should not be null";
          goto LABEL_319;
        }
        if (*(unsigned char *)v58)
        {
          uint64_t v169 = "expected string with name of the !prof annotation";
          goto LABEL_319;
        }
        int v59 = *(void **)(v58 + 8);
        if (*v59 == 30)
        {
          BOOL v52 = (const llvm::BasicBlock *)v59[3];
          uint64_t v64 = v59[4];
          uint64_t v65 = v59[5];
          uint64_t v66 = *(void *)((char *)v59 + 46);
          if (v52 != (const llvm::BasicBlock *)0x69746568746E7973
            || v64 != 0x6974636E75665F63
            || v65 != 0x7972746E655F6E6FLL
            || v66 != 0x746E756F635F7972)
          {
LABEL_296:
            uint64_t v169 = "first operand should be 'function_entry_count' or 'synthetic_function_entry_count'";
            goto LABEL_319;
          }
        }
        else
        {
          if (*v59 != 20) {
            goto LABEL_296;
          }
          BOOL v52 = (const llvm::BasicBlock *)v59[3];
          uint64_t v60 = v59[4];
          int v61 = *((_DWORD *)v59 + 10);
          BOOL v62 = v52 == (const llvm::BasicBlock *)0x6E6F6974636E7566 && v60 == 0x635F7972746E655FLL;
          if (!v62 || v61 != 1953396079) {
            goto LABEL_296;
          }
        }
        unint64_t v70 = (unsigned char *)v57[1];
        if (!v70)
        {
          uint64_t v169 = "second operand should not be null";
          goto LABEL_319;
        }
        if (*v70 != 1) {
          break;
        }
      }
      v54 += 16;
      v53 -= 16;
      if (!v53) {
        goto LABEL_112;
      }
    }
    uint64_t v169 = "expected integer argument to function_entry_count";
LABEL_319:
    uint64_t v346 = v169;
    v350[0] = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
    if (*(void *)a1) {
      sub_1CD5DC50C((llvm::raw_ostream **)a1, v55);
    }
  }
LABEL_112:
  if ((*((_WORD *)a2 + 9) & 8) != 0)
  {
    int v71 = *((_DWORD *)a2 + 5);
    int v72 = (v71 & 0x40000000) != 0 ? (llvm::Value **)*(a2 - 1) : (llvm::Value **)&a2[-4 * (v71 & 0x7FFFFFF)];
    long long v73 = llvm::Value::stripPointerCasts(*v72);
    int v74 = *((unsigned char *)v73 + 16) ? 0 : v73;
    uint64_t v351 = v74;
    if (v74)
    {
      uint64_t v75 = *((void *)v74 + 5);
      if ((uint64_t **)v75 != a2[5])
      {
        uint64_t v345 = a2[5];
        uint64_t v346 = "Referencing personality function in another module!";
        v350[0] = 259;
        v342[0] = (llvm::Value *)a2;
        uint64_t v344 = v75;
        sub_1CD5DBC7C((llvm::raw_ostream *)a1, (llvm::Twine *)&v346, v342, (uint64_t *)&v345, &v351, &v344);
        goto LABEL_194;
      }
    }
  }
  if ((*((unsigned char *)a2 + 34) & 0x80) != 0)
  {
    if (v356)
    {
      uint64_t v346 = "unmaterialized function cannot have metadata";
      v350[0] = 259;
      uint64_t v351 = (llvm::User *)a2;
      v342[0] = v355[1];
      int v165 = v342;
      uint64_t v166 = (llvm::raw_ostream *)a1;
LABEL_290:
      sub_1CD5DBD0C(v166, (llvm::Twine *)&v346, &v351, v165);
      goto LABEL_291;
    }
    goto LABEL_166;
  }
  if (*((unsigned char *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0) {
      goto LABEL_125;
    }
LABEL_197:
    if (v356)
    {
      uint64_t v118 = 16 * v356;
      int v119 = (char *)(v355 + 1);
      do
      {
        int v120 = *((_DWORD *)v119 - 2);
        if (v120)
        {
          if (v120 == 2)
          {
            int v101 = "function declaration may not have a !prof attachment";
            goto LABEL_324;
          }
          uint64_t v121 = *(void *)v119;
        }
        else
        {
          uint64_t v121 = *(void *)v119;
          if ((*(unsigned char *)(*(void *)v119 + 1) & 0x7F) == 1)
          {
            uint64_t v346 = "function declaration may only have a unique !dbg attachment";
            v350[0] = 259;
            sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
LABEL_325:
            if (*(void *)a1) {
              goto LABEL_326;
            }
            goto LABEL_194;
          }
        }
        sub_1CC639E3C(a1, v121, 1);
        v119 += 16;
        v118 -= 16;
      }
      while (v118);
    }
    if ((*((_WORD *)a2 + 9) & 8) != 0)
    {
      uint64_t v346 = "Function declaration shouldn't have a personality routine";
      v350[0] = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
      if (!*(void *)a1) {
        goto LABEL_291;
      }
      uint64_t v122 = (llvm::raw_ostream **)a1;
      uint64_t v123 = (llvm::Value *)a2;
      goto LABEL_707;
    }
LABEL_166:
    if ((*((unsigned char *)a2 + 33) & 0x20) == 0
      || a2[5][20]
      || (uint64_t v351 = 0, !llvm::Function::hasAddressTaken((llvm::Function *)a2, &v351, 0, 1, 0, 1)))
    {
      int v98 = *((_DWORD *)a2 + 9);
      if (v98 == 121)
      {
        uint64_t v102 = a2[3];
        uint64_t v4 = v340;
        if (*((_DWORD *)v102 + 3) == 2)
        {
          int v103 = v102[2];
          if (*(unsigned char *)(v103[1] + 8) != 15)
          {
            int v101 = "gc.get.pointer.offset operand must be a pointer";
            goto LABEL_324;
          }
          if (*(unsigned char *)(*v103 + 8) != 13)
          {
            int v101 = "gc.get.pointer.offset must return integer";
            goto LABEL_324;
          }
          goto LABEL_178;
        }
      }
      else
      {
        uint64_t v4 = v340;
        if (v98 != 120) {
          goto LABEL_178;
        }
        unsigned int v99 = a2[3];
        if (*((_DWORD *)v99 + 3) == 2)
        {
          int v100 = v99[2];
          if (*(unsigned char *)(*v100 + 8) != 15)
          {
            int v101 = "gc.get.pointer.base must return a pointer";
            goto LABEL_324;
          }
          if (v100[1] != *v100)
          {
            int v101 = "gc.get.pointer.base operand and result must be of the same type";
LABEL_324:
            uint64_t v346 = v101;
            v350[0] = 259;
            sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
            goto LABEL_325;
          }
LABEL_178:
          uint64_t v345 = 0;
          if ((*((unsigned char *)a2 + 23) & 0x20) == 0) {
            goto LABEL_193;
          }
          uint64_t v104 = ***a2;
          uint64_t v346 = a2;
          int v105 = *(_DWORD *)(v104 + 2496);
          if (v105)
          {
            uint64_t v106 = *(void *)(v104 + 2480);
            int v107 = v105 - 1;
            unsigned int v108 = v107 & ((a2 >> 4) ^ (a2 >> 9));
            unsigned int v109 = (uint64_t ****)(v106 + 40 * v108);
            uint64_t v110 = *v109;
            if (*v109 == a2) {
              goto LABEL_189;
            }
            uint64_t v111 = 0;
            int v112 = 1;
            while (v110 != (uint64_t ***)-4096)
            {
              if (v111) {
                BOOL v113 = 0;
              }
              else {
                BOOL v113 = v110 == (uint64_t ***)-8192;
              }
              if (v113) {
                uint64_t v111 = v109;
              }
              unsigned int v114 = v108 + v112++;
              unsigned int v108 = v114 & v107;
              unsigned int v109 = (uint64_t ****)(v106 + 40 * v108);
              uint64_t v110 = *v109;
              if (*v109 == a2) {
                goto LABEL_189;
              }
            }
            if (v111) {
              uint64_t v167 = v111;
            }
            else {
              uint64_t v167 = v109;
            }
          }
          else
          {
            uint64_t v167 = 0;
          }
          unsigned int v109 = (uint64_t ****)sub_1CC609054(v104 + 2480, (uint64_t)&v346, (uint64_t *)&v346, v167);
          int v168 = (uint64_t ***)v346;
          v109[3] = 0;
          v109[4] = 0;
          uint64_t *v109 = v168;
          v109[1] = (uint64_t ***)(v109 + 3);
          v109[2] = (uint64_t ***)0x100000000;
LABEL_189:
          uint64_t v115 = *((unsigned int *)v109 + 4);
          if (v115)
          {
            uint64_t v116 = v109[1] + 1;
            uint64_t v117 = 16 * v115;
            while (*((_DWORD *)v116 - 2))
            {
              v116 += 2;
              v117 -= 16;
              if (!v117) {
                goto LABEL_193;
              }
            }
            uint64_t v132 = *v116;
            uint64_t v345 = (uint64_t **)v132;
            *(unsigned char *)(a1 + 801) = v132 != 0;
            if (!v132) {
              goto LABEL_194;
            }
            uint64_t v346 = v350;
            uint64_t v347 = (uint64_t)v350;
            uint64_t v348 = 32;
            int v349 = 0;
            uint64_t v351 = (llvm::User *)&v346;
            uint64_t v352 = a1;
            v353[0] = &v345;
            v353[1] = a2;
            uint64_t v133 = a2[10];
            if (v133 != v4)
            {
LABEL_220:
              uint64_t v134 = v133 - 3;
              if (!v133) {
                uint64_t v134 = 0;
              }
              std::string::size_type v135 = (uint64_t *)(v134 + 5);
              for (uint64_t j = v134[6]; ; uint64_t j = (uint64_t *)j[1])
              {
                if (j == v135)
                {
                  uint64_t v133 = (uint64_t **)v133[1];
                  if (v133 == v340) {
                    goto LABEL_258;
                  }
                  goto LABEL_220;
                }
                unsigned int v137 = j ? (llvm::Value *)(j - 3) : 0;
                sub_1CC63BA68(&v351, v137, *((unsigned int **)v137 + 6));
                if ((*((unsigned char *)v137 + 23) & 0x20) != 0) {
                  break;
                }
LABEL_242:
                if (*(unsigned char *)(a1 + 193)) {
                  goto LABEL_258;
                }
              }
              uint64_t v138 = ***(void ***)v137;
              v342[0] = v137;
              int v139 = *(_DWORD *)(v138 + 2496);
              if (v139)
              {
                uint64_t v140 = *(void *)(v138 + 2480);
                int v141 = v139 - 1;
                unsigned int v142 = v141 & ((v137 >> 4) ^ (v137 >> 9));
                int v143 = (llvm::Value **)(v140 + 40 * v142);
                uint64_t v144 = *v143;
                if (*v143 == v137) {
                  goto LABEL_238;
                }
                unsigned int v145 = 0;
                int v146 = 1;
                while (v144 != (llvm::Value *)-4096)
                {
                  if (v145) {
                    BOOL v147 = 0;
                  }
                  else {
                    BOOL v147 = v144 == (llvm::Value *)-8192;
                  }
                  if (v147) {
                    unsigned int v145 = v143;
                  }
                  unsigned int v148 = v142 + v146++;
                  unsigned int v142 = v148 & v141;
                  int v143 = (llvm::Value **)(v140 + 40 * v142);
                  uint64_t v144 = *v143;
                  if (*v143 == v137) {
                    goto LABEL_238;
                  }
                }
                if (v145) {
                  uint64_t v156 = v145;
                }
                else {
                  uint64_t v156 = v143;
                }
              }
              else
              {
                uint64_t v156 = 0;
              }
              int v143 = (llvm::Value **)sub_1CC609054(v138 + 2480, (uint64_t)v342, (uint64_t *)v342, v156);
              uint64_t v157 = v342[0];
              v143[4] = 0;
              v143[3] = 0;
              *int v143 = v157;
              v143[1] = (llvm::Value *)(v143 + 3);
              v143[2] = (llvm::Value *)0x100000000;
LABEL_238:
              uint64_t v149 = *((unsigned int *)v143 + 4);
              if (v149)
              {
                int v150 = (void *)((char *)v143[1] + 8);
                uint64_t v151 = 16 * v149;
                while (*((_DWORD *)v150 - 2) != 18)
                {
                  v150 += 2;
                  v151 -= 16;
                  if (!v151) {
                    goto LABEL_242;
                  }
                }
                uint64_t v152 = *v150;
                if (*v150)
                {
                  unint64_t v153 = *(unsigned int *)(v152 + 8);
                  if (v153 >= 2)
                  {
                    for (unint64_t k = 1; k < v153; ++k)
                    {
                      int v155 = *(unsigned int **)(v152 - 8 * v153 + 8 * k);
                      if (v155)
                      {
                        switch(*(unsigned char *)v155)
                        {
                          case 4:
                          case 5:
                          case 6:
                          case 7:
                          case 8:
                          case 9:
                          case 0xA:
                          case 0xB:
                          case 0xC:
                          case 0xD:
                          case 0xE:
                          case 0xF:
                          case 0x10:
                          case 0x11:
                          case 0x12:
                          case 0x13:
                          case 0x14:
                          case 0x15:
                          case 0x16:
                          case 0x17:
                          case 0x18:
                          case 0x19:
                          case 0x1A:
                          case 0x1B:
                          case 0x1C:
                          case 0x1D:
                          case 0x1E:
                          case 0x1F:
                          case 0x20:
                          case 0x21:
                          case 0x22:
                            break;
                          default:
                            int v155 = 0;
                            break;
                        }
                      }
                      sub_1CC63BA68(&v351, v137, v155);
                      unint64_t v153 = *(unsigned int *)(v152 + 8);
                    }
                  }
                }
              }
              goto LABEL_242;
            }
LABEL_258:
            if ((void *)v347 != v346) {
              free((void *)v347);
            }
LABEL_291:
            uint64_t v4 = v340;
            goto LABEL_194;
          }
LABEL_193:
          *(unsigned char *)(a1 + 801) = 0;
          goto LABEL_194;
        }
      }
      int v101 = "wrong number of parameters";
      goto LABEL_324;
    }
    uint64_t v346 = "Invalid user of intrinsic instruction!";
    v350[0] = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
    if (!*(void *)a1) {
      goto LABEL_291;
    }
    uint64_t v123 = v351;
    if (!v351) {
      goto LABEL_291;
    }
    uint64_t v122 = (llvm::raw_ostream **)a1;
LABEL_707:
    sub_1CD5DBED0(v122, v123);
    goto LABEL_291;
  }
  if (!*((unsigned char *)a2 + 16) && *v340 == (uint64_t *)v340) {
    goto LABEL_197;
  }
LABEL_125:
  if (v15)
  {
    int v101 = "llvm intrinsics cannot be defined!";
    goto LABEL_324;
  }
  uint64_t v76 = a2[10];
  if (v76) {
    int v77 = (llvm::Value *)(v76 - 3);
  }
  else {
    int v77 = 0;
  }
  uint64_t v78 = (void *)*((void *)v77 + 1);
  if (v78)
  {
    while (1)
    {
      uint64_t v79 = v78[3];
      unsigned int v80 = *(unsigned __int8 *)(v79 + 16);
      BOOL v81 = v79 && v80 >= 0x1C;
      if (v81 && v80 - 29 <= 0xA) {
        break;
      }
      uint64_t v78 = (void *)v78[1];
      if (!v78) {
        goto LABEL_139;
      }
    }
    uint64_t v175 = "Entry block to function must not have predecessors!";
LABEL_329:
    uint64_t v346 = v175;
    v350[0] = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
    if (v76 && *(void *)a1)
    {
      unint64_t v173 = (llvm::raw_ostream **)a1;
      unint64_t v174 = v77;
LABEL_327:
      sub_1CD5DBED0(v173, v174);
    }
    goto LABEL_194;
  }
LABEL_139:
  if ((*((_WORD *)v77 + 9) & 0x7FFF) != 0)
  {
    BOOL v83 = (llvm::Constant *)llvm::BlockAddress::lookup(v77, v52);
    if (llvm::Constant::isConstantUsed(v83))
    {
      uint64_t v175 = "blockaddress may not be used with the entry block!";
      goto LABEL_329;
    }
  }
  if (!v356) {
    goto LABEL_166;
  }
  int v84 = 0;
  int v85 = 0;
  int v86 = (char *)&v355[2 * v356];
  BOOL v87 = v355 + 1;
  while (1)
  {
    uint64_t v89 = v87 - 1;
    int v88 = *((_DWORD *)v87 - 2);
    if (v88 != 2) {
      break;
    }
    if (v84)
    {
      uint64_t v346 = "function must have a single !prof attachment";
      v350[0] = 259;
      uint64_t v351 = (llvm::User *)a2;
      uint64_t v166 = (llvm::raw_ostream *)a1;
      int v165 = v87;
      goto LABEL_290;
    }
    int v95 = 0;
    int v84 = 1;
LABEL_160:
    unsigned int v96 = *v87;
    v87 += 2;
    sub_1CC639E3C(a1, (uint64_t)v96, v95);
    if (v89 + 2 == (llvm::Metadata **)v86) {
      goto LABEL_166;
    }
  }
  if (v88)
  {
    int v95 = 0;
    goto LABEL_160;
  }
  if (v85)
  {
    uint64_t v338 = "function must have a single !dbg attachment";
LABEL_712:
    uint64_t v346 = v338;
    v350[0] = 259;
    uint64_t v351 = (llvm::User *)a2;
    sub_1CD5DBD80((llvm::raw_ostream *)a1, (llvm::Twine *)&v346, &v351, v87);
    goto LABEL_291;
  }
  uint64_t v90 = *v87;
  if (*(unsigned char *)*v87 != 17)
  {
    uint64_t v338 = "function !dbg attachment must be a subprogram";
    goto LABEL_712;
  }
  if ((*((unsigned char *)v90 + 1) & 0x7F) == 1)
  {
    uint64_t v351 = *v87;
    uint64_t v346 = 0;
    char v91 = sub_1CC137310(*(void *)(a1 + 720), *(_DWORD *)(a1 + 736), (uint64_t)v90, &v346);
    unsigned int v92 = v346;
    if (v91)
    {
      BOOL v97 = (uint64_t ***)*((void *)v346 + 1);
      if (v97 && v97 != a2)
      {
        uint64_t v346 = "DISubprogram attached to more than one function";
        v350[0] = 259;
        v342[0] = (llvm::Value *)a2;
        sub_1CD5DBDF4((llvm::raw_ostream *)a1, (llvm::Twine *)&v346, &v351, v342);
        goto LABEL_291;
      }
    }
    else
    {
      int v93 = *(_DWORD *)(a1 + 728);
      unsigned int v94 = *(_DWORD *)(a1 + 736);
      if (4 * v93 + 4 >= 3 * v94)
      {
        v94 *= 2;
        goto LABEL_151;
      }
      if (v94 + ~v93 - *(_DWORD *)(a1 + 732) <= v94 >> 3)
      {
LABEL_151:
        sub_1CC1373A4(a1 + 720, v94);
        uint64_t v346 = 0;
        sub_1CC137310(*(void *)(a1 + 720), *(_DWORD *)(a1 + 736), (uint64_t)v90, &v346);
        unsigned int v92 = v346;
      }
      ++*(_DWORD *)(a1 + 728);
      if (*v92 != -4096) {
        --*(_DWORD *)(a1 + 732);
      }
      *unsigned int v92 = v90;
      v92[1] = 0;
    }
    v92[1] = a2;
    int v85 = 1;
    int v95 = 1;
    goto LABEL_160;
  }
  uint64_t v346 = "function definition may only have a distinct !dbg attachment";
  v350[0] = 259;
  sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
  uint64_t v4 = v340;
  if (*(void *)a1)
  {
LABEL_326:
    unint64_t v173 = (llvm::raw_ostream **)a1;
    unint64_t v174 = (llvm::Value *)a2;
    goto LABEL_327;
  }
LABEL_194:
  if (v355 != (llvm::Value **)v357) {
    free(v355);
  }
LABEL_336:
  uint64_t v176 = a2[10];
  if (v176 != v4)
  {
    while (2)
    {
      uint64_t v177 = v176 - 3;
      BOOL v49 = v176 == 0;
      uint64_t v176 = (uint64_t **)v176[1];
      if (v49) {
        uint64_t v178 = 0;
      }
      else {
        uint64_t v178 = v177;
      }
      uint64_t v179 = *(void **)(a1 + 280);
      if (v179 == *(void **)(a1 + 272))
      {
LABEL_341:
        *(void *)(a1 + 292) = 0;
      }
      else
      {
        uint64_t v211 = *(unsigned int *)(a1 + 288);
        if (v211 < 0x21 || 4 * (*(_DWORD *)(a1 + 292) - *(_DWORD *)(a1 + 296)) >= v211)
        {
          memset(v179, 255, 8 * v211);
          goto LABEL_341;
        }
        llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 272));
      }
      int v181 = v178 + 5;
      uint64_t v180 = (uint64_t **)v178[5];
      if (v180 == v178 + 5
        || (v180 ? (uint64_t v182 = v180 - 3) : (uint64_t v182 = 0), *((unsigned __int8 *)v182 + 16) - 29 >= 0xB))
      {
        uint64_t v346 = "Basic Block does not have terminator!";
        v350[0] = 259;
        sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
        if (*(void *)a1) {
          sub_1CD5DBED0((llvm::raw_ostream **)a1, (llvm::Value *)v178);
        }
      }
      else
      {
        size_t v183 = v178[6];
        uint64_t v184 = v183 - 3;
        if (!v183) {
          uint64_t v184 = 0;
        }
        if (*((unsigned char *)v184 + 16) == 83)
        {
          for (uint64_t m = (uint64_t)v178[1]; m; uint64_t m = *(void *)(m + 8))
          {
            uint64_t v186 = *(void *)(m + 24);
            unsigned int v187 = *(unsigned __int8 *)(v186 + 16);
            if (v186) {
              BOOL v188 = v187 >= 0x1C;
            }
            else {
              BOOL v188 = 0;
            }
            if (v188 && v187 - 29 < 0xB) {
              break;
            }
          }
          uint64_t v355 = (llvm::Value **)v357;
          uint64_t v356 = 0x800000000;
          sub_1CBF846A4((uint64_t)&v355, m, 0);
          uint64_t v346 = &v348;
          uint64_t v347 = 0x800000000;
          if (v356 >= 2) {
            qsort(v355, v356, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1CB848318);
          }
          if ((void *)*v181 != v181)
          {
            for (uint64_t n = v178[6]; ; uint64_t n = (uint64_t *)*((void *)v191 + 4))
            {
              unsigned int v191 = (llvm::Value *)(n - 3);
              if (n) {
                uint64_t v192 = (uint64_t)(n - 3);
              }
              else {
                uint64_t v192 = 0;
              }
              int v193 = 1;
              if (!n || *(unsigned char *)(v192 + 16) != 83) {
                goto LABEL_406;
              }
              int v194 = *((_DWORD *)n - 1);
              if (v356 != (v194 & 0x7FFFFFF)) {
                break;
              }
              LODWORD(v347) = 0;
              if (HIDWORD(v347) < (v194 & 0x7FFFFFFu)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              unsigned int v195 = v194 & 0x7FFFFFF;
              if (v195)
              {
                uint64_t v196 = 0;
                unint64_t v197 = 0;
                uint64_t v198 = 8 * v195;
                do
                {
                  int v199 = *((_DWORD *)n - 1);
                  if ((v199 & 0x40000000) != 0) {
                    uint64_t v200 = (void *)*(n - 4);
                  }
                  else {
                    uint64_t v200 = (void *)((char *)v191 - 32 * (v199 & 0x7FFFFFF));
                  }
                  uint64_t v201 = v200[4 * *((unsigned int *)n + 9) + v197 / 8];
                  uint64_t v202 = v200[v196];
                  if (v347 >= (unint64_t)HIDWORD(v347)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v203 = (char *)v346 + 16 * v347;
                  *uint64_t v203 = v201;
                  v203[1] = v202;
                  unsigned int v204 = v347 + 1;
                  LODWORD(v347) = v347 + 1;
                  v197 += 8;
                  v196 += 4;
                }
                while (v198 != v197);
              }
              else
              {
                unsigned int v204 = v347;
              }
              unint64_t v205 = 126 - 2 * __clz(v204);
              if (v204) {
                uint64_t v206 = v205;
              }
              else {
                uint64_t v206 = 0;
              }
              sub_1CC63E95C((uint64_t)v346, (unint64_t *)v346 + 2 * v204, (uint64_t)&v351, v206, 1);
              if (v347)
              {
                uint64_t v207 = 0;
                uint64_t v208 = (char *)v346;
                int v209 = v355;
                while (1)
                {
                  if (v207)
                  {
                    uint64_t v210 = *(llvm::Value **)((char *)v346 + v207);
                    if (v210 == *(llvm::Value **)((char *)v346 + v207 - 16)
                      && *(void *)((char *)v346 + v207 + 8) != *(void *)((char *)v346 + v207 - 8))
                    {
                      uint64_t v351 = (llvm::User *)"PHI node has multiple entries for the same basic block with different incoming values!";
                      __int16 v354 = 259;
                      v342[0] = v191;
                      sub_1CD5DCA78((llvm::raw_ostream *)a1, (llvm::Twine *)&v351, v342, (llvm::Value **)((char *)v346 + v207), (llvm::Value **)((char *)v346 + v207 + 8), (llvm::Value **)((char *)v346 + v207 - 8));
                      goto LABEL_405;
                    }
                  }
                  else
                  {
                    uint64_t v210 = *(llvm::Value **)v346;
                  }
                  if (v210 != *v209) {
                    break;
                  }
                  v207 += 16;
                  ++v209;
                  if (16 * v347 == v207) {
                    goto LABEL_394;
                  }
                }
                uint64_t v351 = (llvm::User *)"PHI node entries do not match predecessors!";
                __int16 v354 = 259;
                sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v351);
                if (*(void *)a1) {
                  sub_1CD5DCB08((llvm::raw_ostream *)a1, v191, (llvm::Value **)&v208[v207], v209);
                }
                goto LABEL_405;
              }
LABEL_394:
              ;
            }
            uint64_t v351 = (llvm::User *)"PHINode should have one entry for each predecessor of its parent basic block!";
            __int16 v354 = 259;
            sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v351);
            if (*(void *)a1) {
              sub_1CD5DBED0((llvm::raw_ostream **)a1, v191);
            }
LABEL_405:
            int v193 = 0;
            goto LABEL_406;
          }
          int v193 = 1;
LABEL_406:
          if (v346 != &v348) {
            free(v346);
          }
          uint64_t v4 = v340;
          if (v355 != (llvm::Value **)v357) {
            free(v355);
          }
          if (v193)
          {
            size_t v183 = v178[6];
            goto LABEL_412;
          }
        }
        else
        {
LABEL_412:
          while (v183 != v181)
          {
            uint64_t v213 = v183 - 3;
            if (!v183) {
              uint64_t v213 = 0;
            }
            if ((uint64_t **)v213[5] != v178)
            {
              uint64_t v346 = "Instruction has bogus parent pointer!";
              v350[0] = 259;
              sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
              break;
            }
            size_t v183 = (uint64_t *)v183[1];
          }
        }
      }
      uint64_t v214 = v178[6];
      if (v214 != v181)
      {
        do
        {
          uint64_t v215 = (void *)v214[1];
          if (v214) {
            uint64_t v216 = (llvm::AllocaInst *)(v214 - 3);
          }
          else {
            uint64_t v216 = 0;
          }
          sub_1CC63FB5C((llvm::raw_ostream *)a1, v216);
          uint64_t v214 = v215;
        }
        while (v215 != v181);
      }
      if (v176 == v4) {
        break;
      }
      continue;
    }
  }
  uint64_t v346 = v350;
  uint64_t v347 = (uint64_t)v350;
  uint64_t v348 = 8;
  int v349 = 0;
  uint64_t v355 = (llvm::Value **)v358;
  uint64_t v356 = (uint64_t)v358;
  *(void *)int v357 = 8;
  *(_DWORD *)&v357[8] = 0;
  int v217 = *(uint64_t **)(a1 + 880);
  int v218 = *(uint64_t **)(a1 + 888);
  if (v217 == v218) {
    goto LABEL_626;
  }
  while (2)
  {
    uint64_t v345 = 0;
    uint64_t v219 = *v217;
    uint64_t v345 = (uint64_t **)*v217;
    unint64_t v220 = v346;
    if ((void *)v347 == v346)
    {
      unsigned int v221 = HIDWORD(v348);
      uint64_t v222 = (char *)(v347 + 8 * HIDWORD(v348));
      if (HIDWORD(v348))
      {
        uint64_t v223 = 0;
        while (*(void *)(v347 + v223) != v219)
        {
          v223 += 8;
          if (8 * HIDWORD(v348) == v223) {
            goto LABEL_448;
          }
        }
        uint64_t v222 = (char *)(v347 + v223);
      }
LABEL_448:
      unint64_t v220 = (void *)v347;
    }
    else
    {
      int v224 = v348 - 1;
      unsigned int v225 = (v348 - 1) & ((v219 >> 4) ^ (v219 >> 9));
      uint64_t v222 = (char *)(v347 + 8 * v225);
      uint64_t v226 = *(void *)v222;
      if (*(void *)v222 == -1)
      {
        uint64_t v227 = 0;
LABEL_478:
        if (v227) {
          uint64_t v222 = v227;
        }
        unsigned int v221 = HIDWORD(v348);
        if (*(void *)v222 != v219) {
          uint64_t v222 = (char *)(v347 + 8 * v348);
        }
      }
      else
      {
        uint64_t v227 = 0;
        int v228 = 1;
        while (v226 != v219)
        {
          if (v227) {
            BOOL v229 = 0;
          }
          else {
            BOOL v229 = v226 == -2;
          }
          if (v229) {
            uint64_t v227 = v222;
          }
          unsigned int v230 = v225 + v228++;
          unsigned int v225 = v230 & v224;
          uint64_t v222 = (char *)(v347 + 8 * (v230 & v224));
          uint64_t v226 = *(void *)v222;
          if (*(void *)v222 == -1) {
            goto LABEL_478;
          }
        }
        unsigned int v221 = HIDWORD(v348);
      }
    }
    if ((void *)v347 == v220) {
      unsigned int v231 = v221;
    }
    else {
      unsigned int v231 = v348;
    }
    if (v222 != (char *)(v347 + 8 * v231)) {
      goto LABEL_601;
    }
    uint64_t v232 = v356;
    uint64_t v233 = *(unsigned int *)&v357[4];
    if ((llvm::Value **)v356 != v355)
    {
      unsigned int v237 = *(_DWORD *)v357;
      goto LABEL_464;
    }
    if (!*(_DWORD *)&v357[4])
    {
LABEL_461:
      unsigned int v237 = *(_DWORD *)v357;
      if (*(_DWORD *)&v357[4] < *(_DWORD *)v357)
      {
        ++*(_DWORD *)&v357[4];
        *(void *)(v356 + 8 * v233) = v219;
        goto LABEL_491;
      }
LABEL_464:
      if (3 * v237 <= 4 * (*(_DWORD *)&v357[4] - *(_DWORD *)&v357[8]))
      {
        if (v237 >= 0x40) {
          v237 *= 2;
        }
        else {
          unsigned int v237 = 128;
        }
      }
      else if (v237 - *(_DWORD *)&v357[4] >= v237 >> 3)
      {
        goto LABEL_466;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v355, v237);
      unsigned int v237 = *(_DWORD *)v357;
      uint64_t v232 = v356;
LABEL_466:
      unsigned int v238 = v237 - 1;
      unsigned int v239 = (v237 - 1) & ((v219 >> 4) ^ (v219 >> 9));
      uint64_t v240 = (uint64_t *)(v232 + 8 * v239);
      uint64_t v241 = *v240;
      if (*v240 == -1)
      {
        unsigned int v242 = 0;
LABEL_484:
        if (v242) {
          uint64_t v246 = v242;
        }
        else {
          uint64_t v246 = v240;
        }
        if (*v246 != v219)
        {
          if (*v246 == -2) {
            --*(_DWORD *)&v357[8];
          }
          else {
            ++*(_DWORD *)&v357[4];
          }
          uint64_t *v246 = v219;
        }
      }
      else
      {
        unsigned int v242 = 0;
        int v243 = 1;
        while (v241 != v219)
        {
          if (v242) {
            BOOL v244 = 0;
          }
          else {
            BOOL v244 = v241 == -2;
          }
          if (v244) {
            unsigned int v242 = v240;
          }
          unsigned int v245 = v239 + v243++;
          unsigned int v239 = v245 & v238;
          uint64_t v240 = (uint64_t *)(v232 + 8 * (v245 & v238));
          uint64_t v241 = *v240;
          if (*v240 == -1) {
            goto LABEL_484;
          }
        }
      }
      goto LABEL_491;
    }
    int v234 = 0;
    uint64_t v235 = 8 * *(unsigned int *)&v357[4];
    uint64_t v236 = (uint64_t *)v356;
    while (*v236 != v219)
    {
      if (*v236 == -2) {
        int v234 = v236;
      }
      ++v236;
      v235 -= 8;
      if (!v235)
      {
        if (!v234) {
          goto LABEL_461;
        }
        *int v234 = v219;
        --*(_DWORD *)&v357[8];
        break;
      }
    }
LABEL_491:
    uint64_t v247 = v217[1];
    while (1)
    {
LABEL_492:
      uint64_t v248 = sub_1CC64CF44(v247);
      uint64_t v249 = v248;
      uint64_t v250 = v355;
      if ((llvm::Value **)v356 == v355)
      {
        unsigned int v251 = *(_DWORD *)&v357[4];
        uint64_t v252 = (char *)(v356 + 8 * *(unsigned int *)&v357[4]);
        if (*(_DWORD *)&v357[4])
        {
          uint64_t v253 = 0;
          while (*(void *)(v356 + v253) != v248)
          {
            v253 += 8;
            if (8 * *(unsigned int *)&v357[4] == v253) {
              goto LABEL_511;
            }
          }
          uint64_t v252 = (char *)(v356 + v253);
        }
LABEL_511:
        uint64_t v250 = (void *)v356;
      }
      else
      {
        int v254 = *(_DWORD *)v357 - 1;
        unsigned int v255 = (*(_DWORD *)v357 - 1) & ((v248 >> 4) ^ (v248 >> 9));
        uint64_t v252 = (char *)(v356 + 8 * v255);
        uint64_t v256 = *(void *)v252;
        if (*(void *)v252 == -1)
        {
          uint64_t v257 = 0;
LABEL_581:
          if (v257) {
            uint64_t v252 = v257;
          }
          unsigned int v251 = *(_DWORD *)&v357[4];
          if (*(void *)v252 != v248) {
            uint64_t v252 = (char *)(v356 + 8 * *(unsigned int *)v357);
          }
        }
        else
        {
          uint64_t v257 = 0;
          int v258 = 1;
          while (v256 != v248)
          {
            if (v257) {
              BOOL v259 = 0;
            }
            else {
              BOOL v259 = v256 == -2;
            }
            if (v259) {
              uint64_t v257 = v252;
            }
            unsigned int v260 = v255 + v258++;
            unsigned int v255 = v260 & v254;
            uint64_t v252 = (char *)(v356 + 8 * (v260 & v254));
            uint64_t v256 = *(void *)v252;
            if (*(void *)v252 == -1) {
              goto LABEL_581;
            }
          }
          unsigned int v251 = *(_DWORD *)&v357[4];
        }
      }
      if ((void *)v356 == v250) {
        unsigned int v261 = v251;
      }
      else {
        unsigned int v261 = *(_DWORD *)v357;
      }
      if (v252 != (char *)(v356 + 8 * v261))
      {
        uint64_t v344 = v248;
        uint64_t v351 = (llvm::User *)v353;
        uint64_t v352 = 0x800000000;
        uint64_t v294 = v248;
        do
        {
          if (v352 >= (unint64_t)HIDWORD(v352)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v351 + v352) = v294;
          LODWORD(v352) = v352 + 1;
          uint64_t v295 = (uint64_t *)sub_1CD48CC08(a1 + 856, &v344);
          uint64_t v296 = *v295;
          if (*v295 != v344)
          {
            if (v352 >= (unint64_t)HIDWORD(v352)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v351 + v352) = v296;
            LODWORD(v352) = v352 + 1;
          }
          uint64_t v294 = sub_1CC64CF44(v296);
          uint64_t v344 = v294;
        }
        while (v294 != v249);
        __int16 v343 = 259;
        v341[0] = v351;
        v341[1] = (llvm::Type *)v352;
        v342[0] = (llvm::Value *)"EH pads can't handle each other's exceptions";
        sub_1CD5DD010((llvm::raw_ostream *)a1, (llvm::Twine *)v342, (uint64_t)v341);
        if (v351 != (llvm::User *)v353) {
          free(v351);
        }
        goto LABEL_626;
      }
      uint64_t v262 = v347;
      uint64_t v263 = HIDWORD(v348);
      if ((void *)v347 == v346)
      {
        if (HIDWORD(v348))
        {
          uint64_t v264 = 0;
          uint64_t v265 = 8 * HIDWORD(v348);
          uint64_t v266 = (uint64_t *)v347;
          while (*v266 != v248)
          {
            if (*v266 == -2) {
              uint64_t v264 = v266;
            }
            ++v266;
            v265 -= 8;
            if (!v265)
            {
              if (!v264) {
                goto LABEL_524;
              }
              *uint64_t v264 = v248;
              --v349;
              goto LABEL_548;
            }
          }
          goto LABEL_598;
        }
LABEL_524:
        unsigned int v267 = v348;
        if (HIDWORD(v348) < v348)
        {
          ++HIDWORD(v348);
          *(void *)(v347 + 8 * v263) = v248;
          goto LABEL_548;
        }
      }
      else
      {
        unsigned int v267 = v348;
      }
      if (3 * v267 <= 4 * (HIDWORD(v348) - v349))
      {
        if (v267 >= 0x40) {
          v267 *= 2;
        }
        else {
          unsigned int v267 = 128;
        }
      }
      else if (v267 - HIDWORD(v348) >= v267 >> 3)
      {
        goto LABEL_529;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v346, v267);
      unsigned int v267 = v348;
      uint64_t v262 = v347;
LABEL_529:
      unsigned int v268 = v267 - 1;
      unsigned int v269 = (v267 - 1) & ((v249 >> 4) ^ (v249 >> 9));
      int v270 = (uint64_t *)(v262 + 8 * v269);
      uint64_t v271 = *v270;
      if (*v270 != -1) {
        break;
      }
      unint64_t v272 = 0;
LABEL_541:
      if (v272) {
        int v276 = v272;
      }
      else {
        int v276 = v270;
      }
      if (*v276 == v249) {
        goto LABEL_598;
      }
      if (*v276 == -2) {
        --v349;
      }
      else {
        ++HIDWORD(v348);
      }
      *int v276 = v249;
LABEL_548:
      uint64_t v345 = (uint64_t **)v249;
      uint64_t v277 = sub_1CD48D03C(a1 + 856, (uint64_t *)&v345);
      unint64_t v278 = (llvm::Value **)v356;
      if (*(void *)(a1 + 888) == v277) {
        goto LABEL_599;
      }
      uint64_t v247 = *(void *)(v277 + 8);
      uint64_t v279 = (uint64_t)v345;
      uint64_t v280 = *(unsigned int *)&v357[4];
      if ((llvm::Value **)v356 != v355)
      {
        unsigned int v284 = *(_DWORD *)v357;
        goto LABEL_560;
      }
      if (!*(_DWORD *)&v357[4])
      {
LABEL_557:
        unsigned int v284 = *(_DWORD *)v357;
        if (*(_DWORD *)&v357[4] < *(_DWORD *)v357)
        {
          ++*(_DWORD *)&v357[4];
          *(void *)(v356 + 8 * v280) = v345;
          continue;
        }
LABEL_560:
        if (3 * v284 <= 4 * (*(_DWORD *)&v357[4] - *(_DWORD *)&v357[8]))
        {
          if (v284 >= 0x40) {
            v284 *= 2;
          }
          else {
            unsigned int v284 = 128;
          }
        }
        else if (v284 - *(_DWORD *)&v357[4] >= v284 >> 3)
        {
          goto LABEL_562;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v355, v284);
        unsigned int v284 = *(_DWORD *)v357;
        unint64_t v278 = (llvm::Value **)v356;
LABEL_562:
        unsigned int v285 = v284 - 1;
        unsigned int v286 = (v284 - 1) & ((v279 >> 4) ^ (v279 >> 9));
        uint64_t v287 = (uint64_t *)&v278[v286];
        uint64_t v288 = *v287;
        if (*v287 == -1)
        {
          uint64_t v289 = 0;
LABEL_574:
          if (v289) {
            uint64_t v287 = v289;
          }
          if (*v287 != v279)
          {
            if (*v287 == -2) {
              --*(_DWORD *)&v357[8];
            }
            else {
              ++*(_DWORD *)&v357[4];
            }
            *uint64_t v287 = v279;
          }
        }
        else
        {
          uint64_t v289 = 0;
          int v290 = 1;
          while (v288 != v279)
          {
            if (v289) {
              BOOL v291 = 0;
            }
            else {
              BOOL v291 = v288 == -2;
            }
            if (v291) {
              uint64_t v289 = v287;
            }
            unsigned int v292 = v286 + v290++;
            unsigned int v286 = v292 & v285;
            uint64_t v287 = (uint64_t *)&v278[v292 & v285];
            uint64_t v288 = *v287;
            if (*v287 == -1) {
              goto LABEL_574;
            }
          }
        }
        continue;
      }
      unint64_t v281 = 0;
      uint64_t v282 = 8 * *(unsigned int *)&v357[4];
      int v283 = (uint64_t ***)v356;
      while (*v283 != v345)
      {
        if (*v283 == (uint64_t **)-2) {
          unint64_t v281 = v283;
        }
        ++v283;
        v282 -= 8;
        if (!v282)
        {
          if (!v281) {
            goto LABEL_557;
          }
          uint64_t *v281 = v345;
          --*(_DWORD *)&v357[8];
          goto LABEL_492;
        }
      }
    }
    unint64_t v272 = 0;
    int v273 = 1;
    while (v271 != v249)
    {
      if (v272) {
        BOOL v274 = 0;
      }
      else {
        BOOL v274 = v271 == -2;
      }
      if (v274) {
        unint64_t v272 = v270;
      }
      unsigned int v275 = v269 + v273++;
      unsigned int v269 = v275 & v268;
      int v270 = (uint64_t *)(v262 + 8 * (v275 & v268));
      uint64_t v271 = *v270;
      if (*v270 == -1) {
        goto LABEL_541;
      }
    }
LABEL_598:
    unint64_t v278 = (llvm::Value **)v356;
LABEL_599:
    if (v278 == v355)
    {
LABEL_600:
      *(void *)&v357[4] = 0;
      goto LABEL_601;
    }
    if (*(_DWORD *)v357 < 0x21u || (4 * (*(_DWORD *)&v357[4] - *(_DWORD *)&v357[8])) >= *(_DWORD *)v357)
    {
      memset(v278, 255, 8 * *(unsigned int *)v357);
      goto LABEL_600;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v355);
LABEL_601:
    v217 += 2;
    if (v217 != v218) {
      continue;
    }
    break;
  }
LABEL_626:
  if ((llvm::Value **)v356 != v355) {
    free((void *)v356);
  }
  if ((void *)v347 != v346) {
    free((void *)v347);
  }
  __int32 v297 = *(void **)(a1 + 280);
  if (v297 == *(void **)(a1 + 272))
  {
LABEL_631:
    *(void *)(a1 + 292) = 0;
  }
  else
  {
    uint64_t v313 = *(unsigned int *)(a1 + 288);
    if (v313 < 0x21 || 4 * (*(_DWORD *)(a1 + 292) - *(_DWORD *)(a1 + 296)) >= v313)
    {
      memset(v297, 255, 8 * v313);
      goto LABEL_631;
    }
    llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(a1 + 272));
  }
  *(_DWORD *)(a1 + 1824) = 0;
  *(void *)(a1 + 792) = 0;
  *(unsigned char *)(a1 + 800) = 0;
  sub_1CBF568A4((_DWORD *)(a1 + 856));
  *(void *)(a1 + 888) = *(void *)(a1 + 880);
  uint64_t v298 = *(unsigned int *)(a1 + 2024);
  if (!v298) {
    goto LABEL_671;
  }
  uint64_t v299 = 8 * v298;
  uint64_t v300 = *(llvm::Value ***)(a1 + 2016);
  while (2)
  {
    uint64_t v301 = *v300;
    uint64_t v302 = *((void *)*v300 - 4 * (*((_DWORD *)*v300 + 5) & 0x7FFFFFF));
    if (v302) {
      BOOL v303 = *(unsigned char *)(v302 + 16) == 23;
    }
    else {
      BOOL v303 = 0;
    }
    if (!v303)
    {
      uint64_t v337 = "llvm.experimental.noalias.scope.decl must have a MetadataAsValue argument";
      goto LABEL_670;
    }
    uint64_t v304 = *(unsigned __int8 **)(v302 + 24);
    if (*v304 - 4 >= 0x1F)
    {
      uint64_t v337 = "!id.scope.list must point to an MDNode";
      goto LABEL_670;
    }
    if (*((_DWORD *)v304 + 2) != 1)
    {
      uint64_t v337 = "!id.scope.list must point to a list with a single scope";
LABEL_670:
      uint64_t v346 = v337;
      v350[0] = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
      if (*(void *)a1)
      {
        uint64_t v335 = (llvm::raw_ostream **)a1;
        unint64_t v336 = v301;
LABEL_699:
        sub_1CD5DBED0(v335, v336);
      }
      goto LABEL_671;
    }
    uint64_t v305 = (llvm::Metadata *)*((void *)v304 - 1);
    if (*(unsigned __int8 *)v305 - 4 >= 0x1F)
    {
      uint64_t v346 = "scope list must consist of MDNodes";
LABEL_655:
      v350[0] = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
      if (!*(void *)a1) {
        goto LABEL_659;
      }
      uint64_t v311 = (llvm::raw_ostream **)a1;
      uint64_t v312 = (llvm::Metadata *)v304;
LABEL_668:
      sub_1CD5DC50C(v311, v312);
      goto LABEL_659;
    }
    uint64_t v306 = *((unsigned int *)v305 + 2);
    if ((v306 & 0xFFFFFFFE) != 2)
    {
      uint64_t v346 = "scope must have two or three operands";
      goto LABEL_658;
    }
    uint64_t v307 = (unsigned __int8 *)v305 - 8 * v306;
    if (*(llvm::Metadata **)v307 != v305 && **(unsigned char **)v307)
    {
      uint64_t v346 = "first scope operand must be self-referential or string";
      goto LABEL_658;
    }
    if (v306 == 3 && **((unsigned char **)v307 + 2))
    {
      uint64_t v346 = "third scope operand must be string (if used)";
      goto LABEL_658;
    }
    uint64_t v304 = (unsigned __int8 *)*((void *)v307 + 1);
    if (*v304 - 4 >= 0x1F)
    {
      uint64_t v346 = "second scope operand must be MDNode";
LABEL_658:
      v350[0] = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
      if (!*(void *)a1) {
        goto LABEL_659;
      }
      uint64_t v311 = (llvm::raw_ostream **)a1;
      uint64_t v312 = v305;
      goto LABEL_668;
    }
    uint64_t v308 = *((unsigned int *)v304 + 2);
    if ((v308 - 1) >= 2)
    {
      uint64_t v310 = "domain must have one or two operands";
LABEL_666:
      uint64_t v346 = v310;
      goto LABEL_655;
    }
    uint64_t v309 = (unsigned __int8 **)&v304[-8 * v308];
    if (*v309 != v304 && **v309)
    {
      uint64_t v310 = "first domain operand must be self-referential or string";
      goto LABEL_666;
    }
    if (v308 == 2 && *v309[1])
    {
      uint64_t v310 = "second domain operand must be string (if used)";
      goto LABEL_666;
    }
LABEL_659:
    ++v300;
    v299 -= 8;
    if (v299) {
      continue;
    }
    break;
  }
  if (byte_1EBCD8F48)
  {
    unint64_t v314 = *(unsigned int *)(a1 + 2024);
    unint64_t v315 = 126 - 2 * __clz(v314);
    uint64_t v316 = v314 ? v315 : 0;
    sub_1CC64CFDC(*(void *)(a1 + 2016), (uint64_t *)(*(void *)(a1 + 2016) + 8 * v314), v316, 1);
    uint64_t v317 = *(unsigned int *)(a1 + 2024);
    if (v317)
    {
      uint64_t v318 = *(const llvm::Value ***)(a1 + 2016);
      uint64_t v319 = &v318[v317];
      v320 = v318;
      while (1)
      {
        uint64_t v321 = v320;
        uint64_t v322 = v320 + 1;
        uint64_t v323 = *(void *)(*((void *)*v320 - 4 * (*((_DWORD *)*v320 + 5) & 0x7FFFFFF)) + 24);
        uint64_t v324 = v323 - 8 * *(unsigned int *)(v323 + 8);
        uint64_t v325 = 8;
        while (1)
        {
          int v326 = v322;
          uint64_t v327 = v325;
          if (v322 == v319) {
            break;
          }
          ++v322;
          uint64_t v328 = *(void *)(*((void *)*v326 - 4 * (*((_DWORD *)*v326 + 5) & 0x7FFFFFF)) + 24);
          uint64_t v329 = v328 - 8 * *(unsigned int *)(v328 + 8);
          uint64_t v325 = v327 + 8;
          if (v329 != v324)
          {
            v320 = v326;
            goto LABEL_686;
          }
        }
        v320 = v319;
LABEL_686:
        if (v320 != v321 && (char *)v320 - (char *)v321 <= 255) {
          break;
        }
LABEL_696:
        uint64_t v319 = &v318[v317];
        if (v320 == v319) {
          goto LABEL_671;
        }
      }
      uint64_t v330 = v326 - 1;
      uint64_t v331 = v321;
LABEL_689:
      int v332 = *v331;
      uint64_t v333 = v327;
      int v334 = v321;
      while (v332 == *v334
           || !llvm::DominatorTree::dominates((llvm::DominatorTree *)(a1 + 200), v332, *v334))
      {
        ++v334;
        v333 -= 8;
        if (!v333)
        {
          BOOL v49 = v330 == v331++;
          if (!v49) {
            goto LABEL_689;
          }
          uint64_t v318 = *(const llvm::Value ***)(a1 + 2016);
          uint64_t v317 = *(unsigned int *)(a1 + 2024);
          goto LABEL_696;
        }
      }
      uint64_t v346 = "llvm.experimental.noalias.scope.decl dominates another one with the same scope";
      v350[0] = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v346);
      if (v332 && *(void *)a1)
      {
        uint64_t v335 = (llvm::raw_ostream **)a1;
        unint64_t v336 = v332;
        goto LABEL_699;
      }
    }
  }
LABEL_671:
  *(_DWORD *)(a1 + 2024) = 0;
  return *(unsigned char *)(a1 + 192) == 0;
}

uint64_t sub_1CC634578(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2016);
  if (v2 != (void *)(a1 + 2032)) {
    free(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1992), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 1968), 8);
  uint64_t v3 = *(void **)(a1 + 1816);
  if (v3 != (void *)(a1 + 1832)) {
    free(v3);
  }
  uint64_t v4 = *(void **)(a1 + 1536);
  if (v4 != *(void **)(a1 + 1528)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 1248);
  if (v5 != *(void **)(a1 + 1240)) {
    free(v5);
  }
  size_t v6 = *(void **)(a1 + 1192);
  if (v6 != (void *)(a1 + 1208)) {
    free(v6);
  }
  unsigned int v7 = *(void **)(a1 + 912);
  if (v7 != *(void **)(a1 + 904)) {
    free(v7);
  }
  uint64_t v8 = *(void **)(a1 + 880);
  if (v8)
  {
    *(void *)(a1 + 888) = v8;
    operator delete(v8);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 856), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 832), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 808), 8);
  uint64_t v9 = *(void **)(a1 + 752);
  if (v9 != *(void **)(a1 + 744)) {
    free(v9);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 720), 8);
  unsigned int v10 = *(void **)(a1 + 440);
  if (v10 != *(void **)(a1 + 432)) {
    free(v10);
  }
  int v11 = *(void **)(a1 + 280);
  if (v11 != *(void **)(a1 + 272)) {
    free(v11);
  }
  sub_1CBF8FF88((uint64_t *)(a1 + 224));
  int v12 = *(void **)(a1 + 200);
  if (v12 != (void *)(a1 + 216)) {
    free(v12);
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)(a1 + 16));
  return a1;
}

uint64_t llvm::verifyModule(llvm *this, const llvm::Module *a2, llvm::raw_ostream *a3, BOOL *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  sub_1CC631F04((uint64_t)v12, (uint64_t)a2, a3 == 0, this);
  size_t v6 = (char *)this + 24;
  uint64_t v7 = *((void *)this + 4);
  if ((char *)v7 == v6)
  {
    LOBYTE(v8) = 0;
  }
  else
  {
    int v8 = 0;
    do
    {
      if (v7) {
        uint64_t v9 = (uint64_t ***)(v7 - 56);
      }
      else {
        uint64_t v9 = 0;
      }
      v8 |= !sub_1CC632100((unint64_t)v12, v9);
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while ((char *)v7 != v6);
  }
  BOOL v10 = sub_1CC6347C0((uint64_t)v12);
  if (a3) {
    *(unsigned char *)a3 = v12[193];
  }
  sub_1CC634578((uint64_t)v12);
  return v8 & 1 | !v10;
}

BOOL sub_1CC6347C0(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v409 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a1 + 192) = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = v2 + 24;
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 != v2 + 24)
  {
    do
    {
      if (v4) {
        uint64_t v5 = v4 - 56;
      }
      else {
        uint64_t v5 = 0;
      }
      if (*(_DWORD *)(v5 + 36) == 119)
      {
        unint64_t v6 = *(unsigned int *)(a1 + 1200);
        if (v6 >= *(unsigned int *)(a1 + 1204)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)(a1 + 1192) + 8 * v6) = v5;
        ++*(_DWORD *)(a1 + 1200);
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4 != v3);
  }
  uint64_t v7 = *(void *)(a1 + 832);
  uint64_t v8 = *(unsigned int *)(a1 + 848);
  uint64_t v9 = (void *)(v7 + 16 * v8);
  if (*(_DWORD *)(a1 + 840))
  {
    if (v8)
    {
      uint64_t v10 = 16 * v8;
      int v11 = *(void **)(a1 + 832);
      while ((*v11 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v11 += 2;
        v10 -= 16;
        if (!v10) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      int v11 = *(void **)(a1 + 832);
    }
  }
  else
  {
LABEL_16:
    int v11 = (void *)(v7 + 16 * v8);
  }
  int v12 = (void *)(v7 + 16 * v8);
LABEL_19:
  while (v11 != v12)
  {
    if (*((_DWORD *)v11 + 3) > *((_DWORD *)v11 + 2))
    {
      unsigned int v14 = (llvm::Value *)*v11;
      uint64_t v403 = "all indices passed to llvm.localrecover must be less than the number of arguments passed to llvm.localescap"
             "e in the parent function";
      LOWORD(v407[0]) = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v403);
      if (*(void *)v1) {
        BOOL v15 = v14 == 0;
      }
      else {
        BOOL v15 = 1;
      }
      if (!v15) {
        sub_1CD5DBED0((llvm::raw_ostream **)v1, v14);
      }
      break;
    }
    uint64_t v13 = v11 + 2;
    int v11 = v9;
    if (v13 != v9)
    {
      while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v13 += 2;
        if (v13 == v9)
        {
          int v11 = v9;
          goto LABEL_19;
        }
      }
      int v11 = v13;
    }
  }
  uint64_t v16 = *(void *)(v1 + 8);
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v394 = v16 + 8;
  uint64_t v397 = (llvm::ModuleSlotTracker *)v1;
  if (v17 != v16 + 8)
  {
    while (1)
    {
      if (v17) {
        unsigned int v18 = (uint64_t ***)(v17 - 56);
      }
      else {
        unsigned int v18 = 0;
      }
      if (v17 && *((unsigned char *)v18 + 16) == 3)
      {
        if ((*((_DWORD *)v18 + 5) & 0x7FFFFFF) == 0) {
          goto LABEL_49;
        }
      }
      else if (!*((unsigned char *)v18 + 16) && v18[9] == (uint64_t **)(v18 + 9) && (*((unsigned char *)v18 + 34) & 0x80) == 0)
      {
        goto LABEL_49;
      }
      uint64_t v19 = (uint64_t)*(v18 - 4);
      if (*(uint64_t ***)v19 != v18[3])
      {
        uint64_t v78 = "Global variable initializer type does not match global variable type!";
        goto LABEL_267;
      }
      if ((v18[4] & 0xF) == 0xA)
      {
        int v20 = *(unsigned __int8 *)(v19 + 16);
        if (v20 == 16)
        {
          uint64_t v21 = *(unsigned int *)(v19 + 32);
          if (v21 >= 0x41)
          {
            int v173 = 0;
            int64_t v174 = (unint64_t)(v21 + 63) >> 6;
            do
            {
              BOOL v175 = v174-- < 1;
              if (v175) {
                break;
              }
              unint64_t v176 = *(void *)(*(void *)(v19 + 24) + 8 * v174);
              v173 += __clz(v176);
            }
            while (!v176);
            int v177 = v21 | 0xFFFFFFC0;
            if ((v21 & 0x3F) == 0) {
              int v177 = 0;
            }
            if (v173 + v177 != v21)
            {
LABEL_127:
              uint64_t v78 = "'common' global must have a zero initializer!";
              goto LABEL_267;
            }
          }
          else if (*(void *)(v19 + 24))
          {
            goto LABEL_127;
          }
        }
        else if (v20 == 17)
        {
          if ((sub_1CB844168(v19, 0.0) & 1) == 0) {
            goto LABEL_127;
          }
        }
        else if ((v20 - 18) >= 3 && v20 != 13)
        {
          goto LABEL_127;
        }
        if ((_BYTE)v18[10])
        {
          uint64_t v78 = "'common' global may not be marked constant!";
          goto LABEL_267;
        }
        if (v18[6])
        {
          uint64_t v78 = "'common' global may not be in a Comdat!";
          goto LABEL_267;
        }
      }
LABEL_49:
      int v22 = *((_DWORD *)v18 + 5);
      if ((v22 & 0x10000000) == 0) {
        goto LABEL_177;
      }
      uint64_t v23 = ***v18;
      uint64_t v24 = *(void *)(v23 + 152);
      uint64_t v25 = *(unsigned int *)(v23 + 168);
      unsigned int v26 = v18 >> 4;
      if (!v25) {
        goto LABEL_56;
      }
      LODWORD(v27) = (v25 - 1) & (v26 ^ (v18 >> 9));
      int v28 = (uint64_t ****)(v24 + 16 * v27);
      BOOL v29 = *v28;
      if (*v28 != v18)
      {
        int v30 = 1;
        while (v29 != (uint64_t ***)-4096)
        {
          int v31 = v27 + v30++;
          uint64_t v27 = v31 & (v25 - 1);
          BOOL v29 = *(uint64_t ****)(v24 + 16 * v27);
          if (v29 == v18)
          {
            int v28 = (uint64_t ****)(v24 + 16 * v27);
            goto LABEL_57;
          }
        }
LABEL_56:
        int v28 = (uint64_t ****)(v24 + 16 * v25);
      }
LABEL_57:
      uint64_t v32 = v28[1];
      if (*v32 == (uint64_t **)17)
      {
        uint64_t v33 = v32[2];
        uint64_t v34 = v32[3];
        int v35 = *((unsigned __int8 *)v32 + 32);
        BOOL v36 = v33 == (uint64_t **)0x6F6C672E6D766C6CLL && v34 == (uint64_t **)0x726F74635F6C6162;
        if (v36 && v35 == 115) {
          goto LABEL_81;
        }
      }
      if (!v25) {
        goto LABEL_71;
      }
      LODWORD(v38) = (v25 - 1) & (v26 ^ (v18 >> 9));
      __int16 v39 = (uint64_t ****)(v24 + 16 * v38);
      unsigned int v40 = *v39;
      if (*v39 != v18)
      {
        int v41 = 1;
        while (v40 != (uint64_t ***)-4096)
        {
          int v42 = v38 + v41++;
          uint64_t v38 = v42 & (v25 - 1);
          unsigned int v40 = *(uint64_t ****)(v24 + 16 * v38);
          if (v40 == v18)
          {
            __int16 v39 = (uint64_t ****)(v24 + 16 * v38);
            goto LABEL_72;
          }
        }
LABEL_71:
        __int16 v39 = (uint64_t ****)(v24 + 16 * v25);
      }
LABEL_72:
      int v43 = v39[1];
      if (*v43 != (uint64_t **)17) {
        goto LABEL_104;
      }
      int v44 = v43[2];
      unsigned int v45 = v43[3];
      int v46 = *((unsigned __int8 *)v43 + 32);
      BOOL v47 = v44 == (uint64_t **)0x6F6C672E6D766C6CLL && v45 == (uint64_t **)0x726F74645F6C6162;
      if (!v47 || v46 != 115) {
        goto LABEL_104;
      }
LABEL_81:
      if (v17 && *((unsigned char *)v18 + 16) == 3)
      {
        if ((v22 & 0x7FFFFFF) == 0) {
          goto LABEL_89;
        }
      }
      else if (!*((unsigned char *)v18 + 16) && v18[9] == (uint64_t **)(v18 + 9) && (*((unsigned char *)v18 + 34) & 0x80) == 0)
      {
LABEL_89:
        BOOL v49 = v18[3];
        if (v49 && *((unsigned char *)v49 + 8) == 17)
        {
          BOOL v50 = v49[3];
          int v51 = *((unsigned __int8 *)v50 + 8);
          BOOL v52 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(void **)(v1 + 184) + 1576), 0, 0, 0);
          unint64_t v53 = llvm::PointerType::get(v52, (llvm::Type *)*(unsigned int *)(*(void *)(v1 + 176) + 12));
          if (!v50) {
            goto LABEL_167;
          }
          if (v51 != 16) {
            goto LABEL_167;
          }
          int v54 = *((_DWORD *)v50 + 3);
          if ((v54 & 0xFFFFFFFE) != 2) {
            goto LABEL_167;
          }
          uint64_t v55 = (void *)v50[2];
          if (*(_DWORD *)(*v55 + 8) != 8205 || v55[1] != v53) {
            goto LABEL_167;
          }
          if (v54 != 3)
          {
            uint64_t v403 = "the third field of the element type is mandatory, specify i8* null to migrate from the obsoleted 2-field form";
            LOWORD(v407[0]) = 259;
            sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
            goto LABEL_268;
          }
          uint64_t v56 = v55[2];
          if (*(unsigned char *)(v56 + 8) != 15) {
            goto LABEL_167;
          }
          uint64_t v57 = **(void **)v56 + 1912;
          uint64_t v58 = *(void *)(v56 + 24);
          if (v58 && v58 != v57) {
            goto LABEL_167;
          }
          int v22 = *((_DWORD *)v18 + 5);
          if ((v22 & 0x10000000) == 0) {
            goto LABEL_177;
          }
        }
LABEL_104:
        uint64_t v60 = ***v18;
        uint64_t v61 = *(void *)(v60 + 152);
        uint64_t v62 = *(unsigned int *)(v60 + 168);
        if (v62)
        {
          LODWORD(v63) = (v62 - 1) & (v26 ^ (v18 >> 9));
          uint64_t v64 = (uint64_t ****)(v61 + 16 * v63);
          uint64_t v65 = *v64;
          if (*v64 != v18)
          {
            int v66 = 1;
            while (v65 != (uint64_t ***)-4096)
            {
              int v67 = v63 + v66++;
              uint64_t v63 = v67 & (v62 - 1);
              uint64_t v65 = *(uint64_t ****)(v61 + 16 * v63);
              if (v65 == v18)
              {
                uint64_t v64 = (uint64_t ****)(v61 + 16 * v63);
                goto LABEL_111;
              }
            }
            goto LABEL_110;
          }
        }
        else
        {
LABEL_110:
          uint64_t v64 = (uint64_t ****)(v61 + 16 * v62);
        }
LABEL_111:
        int v68 = v64[1];
        if (*v68 != (uint64_t **)9
          || ((v69 = v68[2], int v70 = *((unsigned __int8 *)v68 + 24), v69 == (uint64_t **)0x6573752E6D766C6CLL)
            ? (BOOL v71 = v70 == 100)
            : (BOOL v71 = 0),
              !v71))
        {
          if (!v62) {
            goto LABEL_128;
          }
          LODWORD(v72) = (v62 - 1) & (v26 ^ (v18 >> 9));
          long long v73 = (uint64_t ****)(v61 + 16 * v72);
          int v74 = *v73;
          if (*v73 != v18)
          {
            int v75 = 1;
            while (v74 != (uint64_t ***)-4096)
            {
              int v76 = v72 + v75++;
              uint64_t v72 = v76 & (v62 - 1);
              int v74 = *(uint64_t ****)(v61 + 16 * v72);
              if (v74 == v18)
              {
                long long v73 = (uint64_t ****)(v61 + 16 * v72);
                goto LABEL_129;
              }
            }
LABEL_128:
            long long v73 = (uint64_t ****)(v61 + 16 * v62);
          }
LABEL_129:
          uint64_t v79 = v73[1];
          if (*v79 != (uint64_t **)18
            || ((unsigned int v80 = v79[2],
                 BOOL v81 = v79[3],
                 int v82 = *((unsigned __int16 *)v79 + 16),
                 v80 == (uint64_t **)0x6D6F632E6D766C6CLL)
              ? (BOOL v83 = v81 == (uint64_t **)0x73752E72656C6970)
              : (BOOL v83 = 0),
                v83 ? (BOOL v84 = v82 == 25701) : (BOOL v84 = 0),
                !v84))
          {
LABEL_177:
            if ((*((unsigned char *)v18 + 34) & 0x40) != 0)
            {
              uint64_t v97 = ***v18;
              uint64_t v403 = v18;
              int v98 = *(_DWORD *)(v97 + 2520);
              if (v98)
              {
                uint64_t v99 = *(void *)(v97 + 2504);
                int v100 = v98 - 1;
                unsigned int v101 = v100 & ((v18 >> 4) ^ (v18 >> 9));
                uint64_t v102 = (uint64_t ****)(v99 + 24 * v101);
                int v103 = *v102;
                if (*v102 == v18) {
                  goto LABEL_180;
                }
                size_t v126 = 0;
                int v127 = 1;
                while (v103 != (uint64_t ***)-4096)
                {
                  if (v126) {
                    BOOL v128 = 0;
                  }
                  else {
                    BOOL v128 = v103 == (uint64_t ***)-8192;
                  }
                  if (v128) {
                    size_t v126 = v102;
                  }
                  unsigned int v129 = v101 + v127++;
                  unsigned int v101 = v129 & v100;
                  uint64_t v102 = (uint64_t ****)(v99 + 24 * v101);
                  int v103 = *v102;
                  if (*v102 == v18) {
                    goto LABEL_180;
                  }
                }
                if (v126) {
                  uint64_t v130 = v126;
                }
                else {
                  uint64_t v130 = v102;
                }
              }
              else
              {
                uint64_t v130 = 0;
              }
              uint64_t v102 = (uint64_t ****)sub_1CC5BF31C(v97 + 2504, (uint64_t)&v403, (uint64_t *)&v403, v130);
              uint64_t v131 = (uint64_t ***)v403;
              v102[1] = 0;
              v102[2] = 0;
              std::string *v102 = v131;
LABEL_180:
              if (v102[2] == (uint64_t ***)12)
              {
                uint64_t v104 = v102[1];
                int v105 = *v104;
                int v106 = *((_DWORD *)v104 + 2);
                if (v105 == (uint64_t **)0x7274702E6D766C6CLL && v106 == 1752462689)
                {
                  llvm::GlobalPtrAuthInfo::tryAnalyze(v18, (uint64_t)&v403);
                  if (v404)
                  {
                    if (v403)
                    {
                      uint64_t v398 = v403;
                      sub_1CD4FB504((uint64_t *)&v398, &v408);
                      int v146 = std::string::insert(&v408, 0, "invalid llvm.ptrauth global: ");
                      BOOL v147 = (char *)v146->__r_.__value_.__r.__words[2];
                      *(_OWORD *)__n128 __p = *(_OWORD *)&v146->__r_.__value_.__l.__data_;
                      uint64_t v400 = v147;
                      v146->__r_.__value_.__l.__size_ = 0;
                      v146->__r_.__value_.__r.__words[2] = 0;
                      v146->__r_.__value_.__r.__words[0] = 0;
                      LOWORD(v407[0]) = 260;
                      uint64_t v403 = __p;
                      sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
                      if (*(void *)v1) {
                        sub_1CD5DBED0((llvm::raw_ostream **)v1, (llvm::Value *)v18);
                      }
                      if (SHIBYTE(v400) < 0) {
                        operator delete(__p[0]);
                      }
                      if (SHIBYTE(v408.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(v408.__r_.__value_.__l.__data_);
                      }
                      if (v398) {
                        (*(void (**)(void *))(*(void *)v398 + 8))(v398);
                      }
                      goto LABEL_268;
                    }
                  }
                }
              }
            }
            v408.__r_.__value_.__r.__words[0] = (std::string::size_type)&v408.__r_.__value_.__r.__words[2];
            v408.__r_.__value_.__l.__size_ = 0x100000000;
            llvm::Value::getMetadata((unsigned int *)v18, 0, (uint64_t)&v408);
            if (LODWORD(v408.__r_.__value_.__r.__words[1]))
            {
              unsigned int v108 = (unsigned int **)v408.__r_.__value_.__r.__words[0];
              uint64_t v109 = 8 * LODWORD(v408.__r_.__value_.__r.__words[1]);
              do
              {
                if (*(unsigned char *)*v108 != 7)
                {
                  uint64_t v403 = "!dbg attachment of global variable must be a DIGlobalVariableExpression";
                  LOWORD(v407[0]) = 259;
                  sub_1CD5DC588((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
                  goto LABEL_240;
                }
                sub_1CC63DFB0((llvm::raw_ostream *)v1, *v108++);
                v109 -= 8;
              }
              while (v109);
            }
            LODWORD(v408.__r_.__value_.__r.__words[1]) = 0;
            uint64_t v395 = (llvm::GlobalValue *)v18;
            llvm::Value::getMetadata((unsigned int *)v18, 28, (uint64_t)&v408);
            if (LODWORD(v408.__r_.__value_.__r.__words[1]))
            {
              std::string::size_type v110 = v408.__r_.__value_.__r.__words[0];
              std::string::size_type v111 = v408.__r_.__value_.__r.__words[0] + 8 * LODWORD(v408.__r_.__value_.__r.__words[1]);
              std::string::size_type v396 = v111;
              do
              {
                uint64_t v112 = *(void *)v110;
                uint64_t v113 = *(unsigned int *)(*(void *)v110 + 8);
                if (!v113
                  || (uint64_t v114 = *(void *)(v112 - 8 * v113), *(unsigned char *)v114 != 1)
                  || (uint64_t v115 = *(void *)(v114 + 128), *(unsigned char *)(v115 + 16) != 16))
                {
                  uint64_t v403 = "bad !vcall_visibility attachment";
                  LOWORD(v407[0]) = 259;
                  sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
                  goto LABEL_240;
                }
                if (*(_DWORD *)(v115 + 32) > 0x40u) {
                  operator new[]();
                }
                if (*(void *)(v115 + 24) == -1) {
                  goto LABEL_211;
                }
                int v116 = *(_DWORD *)(v112 + 8);
                if (v116 == 1) {
                  goto LABEL_221;
                }
                if (v116 == 3
                  && (uint64_t v117 = *(void *)(v112 - 16), *(unsigned char *)v117 == 1)
                  && (uint64_t v118 = *(void *)(v117 + 128), *(unsigned char *)(v118 + 16) == 16))
                {
                  if (*(_DWORD *)(v118 + 32) > 0x40u) {
                    operator new[]();
                  }
                  if (*(void *)(v118 + 24) != -1
                    && (uint64_t v119 = *(void *)(v112 - 8 * *(unsigned int *)(v112 + 8) + 16), *(unsigned char *)v119 == 1)
                    && (uint64_t v120 = *(void *)(v119 + 128), *(unsigned char *)(v120 + 16) == 16))
                  {
                    if (*(_DWORD *)(v120 + 32) > 0x40u) {
                      operator new[]();
                    }
                    if (*(void *)(v120 + 24) == -1 || *(void *)(v118 + 24) > *(void *)(v120 + 24))
                    {
                      uint64_t v403 = "bad !vcall_visibility attachment";
                      LOWORD(v407[0]) = 259;
                      sub_1CD5DBE68(v397, (llvm::Twine *)&v403);
                      int v121 = 1;
                    }
                    else
                    {
                      int v121 = 0;
                    }
                    uint64_t v1 = (uint64_t)v397;
                  }
                  else
                  {
                    uint64_t v403 = "bad !vcall_visibility attachment";
                    LOWORD(v407[0]) = 259;
                    sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
                    int v121 = 1;
                  }
                  std::string::size_type v111 = v396;
                  if (!v121)
                  {
LABEL_221:
                    char v122 = 1;
                    goto LABEL_222;
                  }
                }
                else
                {
LABEL_211:
                  uint64_t v403 = "bad !vcall_visibility attachment";
                  LOWORD(v407[0]) = 259;
                  sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
                }
                char v122 = 0;
LABEL_222:
                if ((v122 & 1) == 0) {
                  goto LABEL_240;
                }
                v110 += 8;
              }
              while (v110 != v111);
            }
            uint64_t v123 = (unsigned __int8 *)*((void *)v395 + 3);
            int v124 = v123[8];
            if (v124 == 16)
            {
              if (!llvm::StructType::containsScalableVectorType(*((llvm::StructType **)v395 + 3))) {
                goto LABEL_226;
              }
            }
            else if (v124 != 19)
            {
LABEL_226:
              if (v124 != 21 || (llvm::TargetExtType::getLayoutType((llvm::TargetExtType *)v123), (v125 & 2) != 0))
              {
                if (v17 && *((unsigned char *)v395 + 16) == 3)
                {
                  if ((*((_DWORD *)v395 + 5) & 0x7FFFFFF) == 0) {
                    goto LABEL_239;
                  }
LABEL_238:
                  sub_1CC6450AC(v1, *((llvm::Value **)v395 - 4));
                  goto LABEL_239;
                }
                if (*((unsigned char *)v395 + 16)
                  || *((llvm::GlobalValue **)v395 + 9) != (llvm::GlobalValue *)((char *)v395 + 72)
                  || (*((unsigned char *)v395 + 34) & 0x80) != 0)
                {
                  goto LABEL_238;
                }
LABEL_239:
                sub_1CC6387C4(v1, v395);
LABEL_240:
                if ((std::string::size_type *)v408.__r_.__value_.__l.__data_ != &v408.__r_.__value_.__r.__words[2]) {
                  free(v408.__r_.__value_.__l.__data_);
                }
                goto LABEL_268;
              }
              if ((*((unsigned char *)v395 + 23) & 0x10) != 0)
              {
                uint64_t v132 = ***(void ***)v395;
                uint64_t v133 = *(void *)(v132 + 152);
                uint64_t v134 = *(unsigned int *)(v132 + 168);
                if (!v134) {
                  goto LABEL_277;
                }
                LODWORD(v135) = (v134 - 1) & ((v395 >> 4) ^ (v395 >> 9));
                uint64_t v136 = (llvm::GlobalValue **)(v133 + 16 * v135);
                unsigned int v137 = *v136;
                if (*v136 != v395)
                {
                  int v138 = 1;
                  while (v137 != (llvm::GlobalValue *)-4096)
                  {
                    int v139 = v135 + v138++;
                    uint64_t v135 = v139 & (v134 - 1);
                    unsigned int v137 = *(llvm::GlobalValue **)(v133 + 16 * v135);
                    if (v137 == v395)
                    {
                      uint64_t v136 = (llvm::GlobalValue **)(v133 + 16 * v135);
                      goto LABEL_278;
                    }
                  }
LABEL_277:
                  uint64_t v136 = (llvm::GlobalValue **)(v133 + 16 * v134);
                }
LABEL_278:
                unsigned int v142 = v136[1];
                uint64_t v145 = *(void *)v142;
                uint64_t v144 = (char *)v142 + 16;
                uint64_t v143 = v145;
              }
              else
              {
                uint64_t v143 = 0;
                uint64_t v144 = &byte_1CFBCE98E;
              }
              __int16 v402 = 1283;
              __p[0] = "Global @";
              uint64_t v400 = v144;
              uint64_t v401 = v143;
              uint64_t v403 = __p;
              uint64_t v405 = (uint64_t)" has illegal target extension type";
              LOWORD(v407[0]) = 770;
              sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
              if (*(void *)v1) {
                sub_1CD5DC17C((llvm::raw_ostream **)v1, (llvm::Type *)v123);
              }
              goto LABEL_240;
            }
            uint64_t v403 = "Globals cannot contain scalable vectors";
            LOWORD(v407[0]) = 259;
            sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
            if (*(void *)v1) {
              sub_1CD5DBED0((llvm::raw_ostream **)v1, v395);
            }
            goto LABEL_240;
          }
        }
        if (v17) {
          BOOL v85 = *((unsigned char *)v18 + 16) == 3;
        }
        else {
          BOOL v85 = 0;
        }
        char v86 = !v85;
        if (v85)
        {
          if ((v22 & 0x7FFFFFF) == 0) {
            goto LABEL_151;
          }
        }
        else if (!*((unsigned char *)v18 + 16) && v18[9] == (uint64_t **)(v18 + 9) && (*((unsigned char *)v18 + 34) & 0x80) == 0)
        {
LABEL_151:
          BOOL v87 = v18[3];
          if (!v87 || *((unsigned char *)v87 + 8) != 17) {
            goto LABEL_177;
          }
          int v88 = v87[3];
          if (v88 && *((unsigned char *)v88 + 8) == 15)
          {
            if (v86)
            {
              if (!*((unsigned char *)v18 + 16) && v18[9] == (uint64_t **)(v18 + 9) && (*((unsigned char *)v18 + 34) & 0x80) == 0) {
                goto LABEL_177;
              }
            }
            else if ((v22 & 0x7FFFFFF) == 0)
            {
              goto LABEL_177;
            }
            uint64_t v89 = (llvm::Value *)*(v18 - 4);
            if (v89 && *((unsigned char *)v89 + 16) == 8)
            {
              int v90 = *((_DWORD *)v89 + 5);
              if ((v90 & 0x40000000) != 0)
              {
                unsigned int v92 = (llvm::Value **)*((void *)v89 - 1);
                uint64_t v91 = v90 & 0x7FFFFFF;
                if (!v91) {
                  goto LABEL_177;
                }
              }
              else
              {
                uint64_t v91 = v90 & 0x7FFFFFF;
                unsigned int v92 = (llvm::Value **)((char *)v89 - 32 * v91);
                if (!v91) {
                  goto LABEL_177;
                }
              }
              uint64_t v93 = 32 * v91;
              while (1)
              {
                unsigned int v94 = llvm::Value::stripPointerCasts(*v92);
                uint64_t v89 = v94;
                unsigned int v95 = *((unsigned __int8 *)v94 + 16);
                if (v95 >= 2 && v95 != 3) {
                  break;
                }
                if ((*((unsigned char *)v94 + 23) & 0x10) == 0)
                {
                  if ((*((unsigned char *)v18 + 23) & 0x10) != 0)
                  {
                    uint64_t v148 = ***v18;
                    uint64_t v149 = *(void *)(v148 + 152);
                    uint64_t v150 = *(unsigned int *)(v148 + 168);
                    if (!v150) {
                      goto LABEL_305;
                    }
                    LODWORD(v151) = (v150 - 1) & (v26 ^ (v18 >> 9));
                    uint64_t v152 = (uint64_t ****)(v149 + 16 * v151);
                    unint64_t v153 = *v152;
                    if (*v152 != v18)
                    {
                      int v154 = 1;
                      while (v153 != (uint64_t ***)-4096)
                      {
                        int v155 = v151 + v154++;
                        uint64_t v151 = v155 & (v150 - 1);
                        unint64_t v153 = *(uint64_t ****)(v149 + 16 * v151);
                        if (v153 == v18)
                        {
                          uint64_t v152 = (uint64_t ****)(v149 + 16 * v151);
                          goto LABEL_306;
                        }
                      }
LABEL_305:
                      uint64_t v152 = (uint64_t ****)(v149 + 16 * v150);
                    }
LABEL_306:
                    uint64_t v164 = v152[1];
                    uint64_t v167 = (uint64_t)*v164;
                    uint64_t v166 = (char *)(v164 + 2);
                    uint64_t v165 = v167;
                  }
                  else
                  {
                    uint64_t v165 = 0;
                    uint64_t v166 = &byte_1CFBCE98E;
                  }
                  __p[0] = "members of ";
                  uint64_t v400 = v166;
                  uint64_t v401 = v165;
                  __int16 v402 = 1283;
                  uint64_t v403 = __p;
                  uint64_t v404 = v165;
                  int v168 = " must be named";
                  goto LABEL_311;
                }
                v92 += 4;
                v93 -= 32;
                if (!v93) {
                  goto LABEL_177;
                }
              }
              if ((*((unsigned char *)v18 + 23) & 0x10) != 0)
              {
                uint64_t v156 = ***v18;
                uint64_t v157 = *(void *)(v156 + 152);
                uint64_t v158 = *(unsigned int *)(v156 + 168);
                if (!v158) {
                  goto LABEL_308;
                }
                LODWORD(v159) = (v158 - 1) & (v26 ^ (v18 >> 9));
                int v160 = (uint64_t ****)(v157 + 16 * v159);
                uint64_t v161 = *v160;
                if (*v160 != v18)
                {
                  int v162 = 1;
                  while (v161 != (uint64_t ***)-4096)
                  {
                    int v163 = v159 + v162++;
                    uint64_t v159 = v163 & (v158 - 1);
                    uint64_t v161 = *(uint64_t ****)(v157 + 16 * v159);
                    if (v161 == v18)
                    {
                      int v160 = (uint64_t ****)(v157 + 16 * v159);
                      goto LABEL_309;
                    }
                  }
LABEL_308:
                  int v160 = (uint64_t ****)(v157 + 16 * v158);
                }
LABEL_309:
                uint64_t v169 = v160[1];
                uint64_t v172 = (uint64_t)*v169;
                int v171 = (char *)(v169 + 2);
                uint64_t v170 = v172;
              }
              else
              {
                uint64_t v170 = 0;
                int v171 = &byte_1CFBCE98E;
              }
              __p[0] = "invalid ";
              uint64_t v400 = v171;
              uint64_t v401 = v170;
              __int16 v402 = 1283;
              uint64_t v403 = __p;
              uint64_t v404 = v170;
              int v168 = " member";
LABEL_311:
              uint64_t v405 = (uint64_t)v168;
              LOWORD(v407[0]) = 770;
              sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
            }
            else
            {
              uint64_t v403 = "wrong initalizer for intrinsic global variable";
              LOWORD(v407[0]) = 259;
              sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
              if (!v89) {
                goto LABEL_268;
              }
            }
            if (!*(void *)v1) {
              goto LABEL_268;
            }
            uint64_t v140 = (llvm::raw_ostream **)v1;
            int v141 = v89;
LABEL_271:
            sub_1CD5DBED0(v140, v141);
            goto LABEL_268;
          }
LABEL_167:
          uint64_t v78 = "wrong type for intrinsic global variable";
          goto LABEL_267;
        }
        if ((v18[4] & 0xF) == 6) {
          goto LABEL_151;
        }
        goto LABEL_266;
      }
      if ((v18[4] & 0xF) == 6) {
        goto LABEL_89;
      }
LABEL_266:
      uint64_t v78 = "invalid linkage for intrinsic global variable";
LABEL_267:
      uint64_t v403 = v78;
      LOWORD(v407[0]) = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
      if (*(void *)v1)
      {
        uint64_t v140 = (llvm::raw_ostream **)v1;
        int v141 = (llvm::Value *)v18;
        goto LABEL_271;
      }
LABEL_268:
      uint64_t v17 = *(void *)(v17 + 8);
      if (v17 == v394)
      {
        uint64_t v16 = *(void *)(v1 + 8);
        break;
      }
    }
  }
  uint64_t v178 = v16 + 40;
  uint64_t v179 = *(void *)(v16 + 48);
  if (v179 == v16 + 40) {
    goto LABEL_349;
  }
  do
  {
    if (v179) {
      uint64_t v180 = (_DWORD *)(v179 - 48);
    }
    else {
      uint64_t v180 = 0;
    }
    unsigned int v181 = v180[8] & 0xF;
    BOOL v175 = v181 > 8;
    int v182 = (1 << v181) & 0x1BD;
    if (v175 || v182 == 0)
    {
      unsigned int v187 = "Alias should have private, internal, linkonce, weak, linkonce_odr, weak_odr, or external linkage!";
      goto LABEL_346;
    }
    uint64_t v184 = *((void *)v180 - 4);
    if (!v184)
    {
      uint64_t v403 = "Aliasee cannot be NULL!";
      goto LABEL_347;
    }
    if (*(void *)v180 != *(void *)v184)
    {
      uint64_t v403 = "Alias and aliasee types should match!";
      goto LABEL_347;
    }
    unsigned int v185 = *(unsigned __int8 *)(v184 + 16);
    if (v185 >= 4 && v185 != 5)
    {
      unsigned int v187 = "Aliasee should be either GlobalValue or ConstantExpr";
LABEL_346:
      uint64_t v403 = v187;
LABEL_347:
      LOWORD(v407[0]) = 259;
      sub_1CD5DBE68(v397, (llvm::Twine *)&v403);
      if (*(void *)v397) {
        sub_1CD5DBED0((llvm::raw_ostream **)v397, (llvm::Value *)v180);
      }
      goto LABEL_341;
    }
    uint64_t v403 = v407;
    uint64_t v404 = (uint64_t)v407;
    int v406 = 0;
    uint64_t v405 = 0x100000004;
    v407[0] = v180;
    sub_1CC64E0A8(v397, (uint64_t)&v403, (llvm::Value *)v180, v184);
    if ((void *)v404 != v403) {
      free((void *)v404);
    }
    sub_1CC6387C4((uint64_t)v397, (llvm::GlobalValue *)v180);
LABEL_341:
    uint64_t v179 = *(void *)(v179 + 8);
  }
  while (v179 != v178);
  uint64_t v1 = (uint64_t)v397;
  uint64_t v16 = *((void *)v397 + 1);
LABEL_349:
  uint64_t v188 = v16 + 56;
  uint64_t v189 = *(void *)(v16 + 64);
  if (v189 != v16 + 56)
  {
    while (2)
    {
      if (v189) {
        uint64_t v190 = v189 - 56;
      }
      else {
        uint64_t v190 = 0;
      }
      unsigned int v191 = *(_DWORD *)(v190 + 32) & 0xF;
      BOOL v175 = v191 > 8;
      int v192 = (1 << v191) & 0x1BD;
      if (v175 || v192 == 0)
      {
        uint64_t v403 = "IFunc should have private, internal, linkonce, weak, linkonce_odr, weak_odr, or external linkage!";
        goto LABEL_370;
      }
      ResolverFunctiouint64_t n = llvm::GlobalIFunc::getResolverFunction((llvm::GlobalIFunc *)v190);
      if (!ResolverFunction)
      {
        uint64_t v403 = "IFunc must have a Function resolver";
        goto LABEL_370;
      }
      int v195 = *(_DWORD *)(ResolverFunction + 32);
      if ((v195 & 0xF) == 1) {
        goto LABEL_368;
      }
      if (*(unsigned char *)(ResolverFunction + 16))
      {
        if (*(unsigned char *)(ResolverFunction + 16) == 3 && (*(_DWORD *)(ResolverFunction + 20) & 0x7FFFFFF) == 0) {
          goto LABEL_368;
        }
LABEL_365:
        uint64_t v196 = **(void **)(v190 - 32);
        unint64_t v197 = (uint64_t **)llvm::PointerType::get(*(llvm::PointerType **)(v190 + 24), 0);
        uint64_t v198 = (llvm::PointerType *)llvm::FunctionType::get(v197, 0, 0, 0);
        if (v196 != llvm::PointerType::get(v198, 0))
        {
          uint64_t v403 = "IFunc resolver has incorrect type";
          goto LABEL_370;
        }
      }
      else
      {
        if ((v195 & 0x800000) != 0 || *(void *)(ResolverFunction + 72) != ResolverFunction + 72) {
          goto LABEL_365;
        }
LABEL_368:
        uint64_t v403 = "IFunc resolver must be a definition";
LABEL_370:
        LOWORD(v407[0]) = 259;
        sub_1CD5DBE68(v397, (llvm::Twine *)&v403);
        if (*(void *)v397) {
          sub_1CD5DBED0((llvm::raw_ostream **)v397, (llvm::Value *)v190);
        }
      }
      uint64_t v189 = *(void *)(v189 + 8);
      if (v189 == v188)
      {
        uint64_t v1 = (uint64_t)v397;
        uint64_t v16 = *((void *)v397 + 1);
        break;
      }
      continue;
    }
  }
  uint64_t v199 = v16 + 72;
  std::string::size_type v200 = *(void *)(v16 + 80);
  if (v200 == v16 + 72) {
    goto LABEL_465;
  }
  while (2)
  {
    uint64_t v201 = (uint64_t **)(v200 + 16);
    char v202 = *(unsigned char *)(v200 + 39);
    int v203 = v202;
    if (v202 >= 0) {
      std::string::size_type v204 = v200 + 16;
    }
    else {
      std::string::size_type v204 = *(void *)(v200 + 16);
    }
    unint64_t v205 = *(void *)(v200 + 24);
    unint64_t v206 = v202 & 0x7F;
    if (v203 >= 0) {
      unint64_t v207 = v206;
    }
    else {
      unint64_t v207 = *(void *)(v200 + 24);
    }
    if (v207 >= 9 && *(void *)v204 == 0x6762642E6D766C6CLL && *(unsigned char *)(v204 + 8) == 46)
    {
      if (v207 != 11
        || ((v209 = *(void *)v204, uint64_t v210 = *(void *)(v204 + 3), v209 == 0x6762642E6D766C6CLL)
          ? (BOOL v211 = v210 == 0x75632E6762642E6DLL)
          : (BOOL v211 = 0),
            !v211))
      {
        uint64_t v403 = "unrecognized named metadata node in the llvm.dbg namespace";
        LOWORD(v407[0]) = 259;
        sub_1CD5DC588((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
        if (*(void *)v1) {
          sub_1CD5DD0EC((llvm::raw_ostream *)v1, (const llvm::Module **)v200);
        }
        goto LABEL_459;
      }
    }
    uint64_t v212 = *(unsigned int *)(*(void *)(v200 + 48) + 8);
    if (v212)
    {
      uint64_t v213 = 0;
      uint64_t v214 = 8 * v212;
      while (1)
      {
        uint64_t v215 = *(unsigned char **)(**(void **)(v200 + 48) + v213);
        __p[0] = v215;
        char v216 = *(unsigned char *)(v200 + 39);
        int v217 = v216;
        uint64_t v218 = v216 & 0x7F;
        if (v217 < 0) {
          uint64_t v218 = *(void *)(v200 + 24);
        }
        if (v218 == 11
          && (v217 >= 0 ? (uint64_t v219 = (uint64_t *)(v200 + 16)) : (uint64_t v219 = *v201),
              (uint64_t v220 = *v219, v221 = *(uint64_t *)((char *)v219 + 3), v220 == 0x6762642E6D766C6CLL)
            ? (BOOL v222 = v221 == 0x75632E6762642E6DLL)
            : (BOOL v222 = 0),
              v222))
        {
          if (!v215 || *v215 != 16)
          {
            uint64_t v403 = "invalid compile unit";
            LOWORD(v407[0]) = 259;
            v408.__r_.__value_.__r.__words[0] = v200;
            sub_1CD5DD07C((llvm::raw_ostream *)v1, (llvm::Twine *)&v403, (const llvm::Module ***)&v408, (llvm::Metadata **)__p);
            goto LABEL_459;
          }
        }
        else if (!v215)
        {
          goto LABEL_410;
        }
        sub_1CC639E3C(v1, (uint64_t)v215, 1);
LABEL_410:
        v213 += 8;
        if (v214 == v213)
        {
          LOBYTE(v203) = *(unsigned char *)(v200 + 39);
          unint64_t v205 = *(void *)(v200 + 24);
          unint64_t v206 = v203 & 0x7F;
          break;
        }
      }
    }
    int v203 = (char)v203;
    if ((v203 & 0x80u) == 0) {
      unint64_t v205 = v206;
    }
    if (v205 == 21)
    {
      uint64_t v223 = v203 >= 0 ? (uint64_t *)(v200 + 16) : *v201;
      uint64_t v224 = *v223;
      uint64_t v225 = v223[1];
      uint64_t v226 = *(uint64_t *)((char *)v223 + 13);
      BOOL v227 = v224 == 0x6573752E6D766C6CLL && v225 == 0x7469646E6F632E64;
      if (v227 && v226 == 0x6C616E6F69746964)
      {
        uint64_t v229 = *(unsigned int *)(*(void *)(v200 + 48) + 8);
        if (v229)
        {
          uint64_t v230 = 0;
          while (2)
          {
            uint64_t v231 = *(void *)(**(void **)(v200 + 48) + 8 * v230);
            if (*(_DWORD *)(v231 + 8) == 3
              && ((uint64_t v232 = *(void *)(v231 - 24)) == 0
               || *(unsigned char *)v232 == 1 && *(unsigned __int8 *)(*(void *)(v232 + 128) + 16) < 4u)
              && ((v233 = *(void *)(*(void *)(v231 - 16) + 128), unsigned int v234 = *(_DWORD *)(v233 + 32), v234 > 0x40)
                ? (unint64_t v235 = **(void **)(v233 + 24))
                : (unint64_t v235 = (uint64_t)(*(void *)(v233 + 24) << -(char)v234) >> -(char)v234),
                  v235 < 2
               && (uint64_t v236 = *(unsigned __int8 **)(v231 - 8), *v236 - 4 < 0x1F)
               && (uint64_t v237 = *((unsigned int *)v236 + 2), v237)))
            {
              uint64_t v238 = -8 * v237;
              do
              {
                uint64_t v239 = *(void *)&v236[v238];
                if (v239)
                {
                  uint64_t v240 = *(unsigned char *)v239 == 1 ? *(llvm::Value **)(v239 + 128) : 0;
                  uint64_t v241 = llvm::Value::stripPointerCasts(v240);
                  unsigned int v242 = *((unsigned __int8 *)v241 + 16);
                  BOOL v243 = v242 == 19 || v242 - 13 >= 0xFFFFFFFE;
                  BOOL v244 = !v243 || v241 == 0;
                  BOOL v245 = v244;
                  if (v242 >= 4 && v245)
                  {
                    uint64_t v403 = "invalid llvm.used.conditional member";
                    LOWORD(v407[0]) = 259;
                    uint64_t v1 = (uint64_t)v397;
                    goto LABEL_458;
                  }
                }
                v238 += 8;
              }
              while (v238);
              ++v230;
              uint64_t v1 = (uint64_t)v397;
              if (v230 != v229) {
                continue;
              }
            }
            else
            {
              uint64_t v403 = "invalid llvm.used.conditional member";
              LOWORD(v407[0]) = 259;
LABEL_458:
              sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
            }
            break;
          }
        }
      }
    }
LABEL_459:
    std::string::size_type v200 = *(void *)(v200 + 8);
    if (v200 != v199) {
      continue;
    }
    break;
  }
  uint64_t v16 = *(void *)(v1 + 8);
LABEL_465:
  uint64_t v246 = *(unsigned int *)(v16 + 128);
  if (v246)
  {
    for (unint64_t i = *(void **)(v16 + 120); !*i || *i == -8; ++i)
      ;
  }
  else
  {
    unint64_t i = *(void **)(v16 + 120);
  }
  uint64_t v249 = *(void *)(v16 + 120) + 8 * v246;
  if (i != (void *)v249)
  {
    do
    {
      if (*(_DWORD *)(v1 + 172) == 1)
      {
        uint64_t NamedValue = llvm::Module::getNamedValue(*(void *)(v1 + 8), (unsigned __int8 *)(*(void *)(*i + 8) + 72), **(void **)(*i + 8));
        if (NamedValue)
        {
          unsigned int v251 = (llvm::Value *)NamedValue;
          if ((*(_DWORD *)(NamedValue + 32) & 0xF) == 8)
          {
            uint64_t v403 = "comdat global value has private linkage";
            LOWORD(v407[0]) = 259;
            sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
            if (*(void *)v1) {
              sub_1CD5DBED0((llvm::raw_ostream **)v1, v251);
            }
          }
        }
      }
      do
      {
        uint64_t v253 = i[1];
        ++i;
        uint64_t v252 = v253;
        if (v253) {
          BOOL v254 = v252 == -8;
        }
        else {
          BOOL v254 = 1;
        }
      }
      while (v254);
    }
    while (i != (void *)v249);
    uint64_t v16 = *(void *)(v1 + 8);
  }
  uint64_t v403 = "llvm.module.flags";
  LOWORD(v407[0]) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata((llvm::Module *)v16, (const char **)&v403);
  if (!NamedMetadata) {
    goto LABEL_633;
  }
  uint64_t v256 = NamedMetadata;
  memset(&v408, 0, 20);
  uint64_t v403 = &v405;
  uint64_t v404 = 0x1000000000;
  uint64_t v257 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
  if (!v257) {
    goto LABEL_632;
  }
  uint64_t v258 = 0;
  uint64_t v259 = 0;
  while (2)
  {
    unsigned int v260 = *(llvm::Metadata **)(**(void **)(v256 + 48) + 8 * v259);
    if (*((_DWORD *)v260 + 2) != 3)
    {
      __p[0] = "incorrect number of operands in module flag";
      __int16 v402 = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)__p);
      if (!*(void *)v1) {
        goto LABEL_600;
      }
      uint64_t v299 = (llvm::raw_ostream **)v1;
      int v276 = v260;
      goto LABEL_604;
    }
    LODWORD(v398) = 0;
    uint64_t v261 = *((void *)v260 - 3);
    if ((llvm::Module::isValidModFlagBehavior(v261, &v398) & 1) == 0)
    {
      if (v261
        && *(unsigned char *)v261 == 1
        && ((uint64_t v300 = *(void *)(v261 + 128)) != 0 ? (v301 = *(unsigned char *)(v300 + 16) == 16) : (v301 = 0), v301))
      {
        uint64_t v302 = "invalid behavior operand in module flag (unexpected constant)";
      }
      else
      {
        uint64_t v302 = "invalid behavior operand in module flag (expected constant integer)";
      }
      __p[0] = (void *)v302;
      __int16 v402 = 259;
      uint64_t v1 = (uint64_t)v397;
      sub_1CD5DBE68(v397, (llvm::Twine *)__p);
      if (!*(void *)v397) {
        goto LABEL_600;
      }
      int v276 = (llvm::Metadata *)*((void *)v260 - 3);
      goto LABEL_603;
    }
    uint64_t v262 = (llvm::Metadata *)*((void *)v260 - 2);
    if (!v262 || *(unsigned char *)v262)
    {
      __p[0] = "invalid ID operand in module flag (expected metadata string)";
      __int16 v402 = 259;
      uint64_t v1 = (uint64_t)v397;
      sub_1CD5DBE68(v397, (llvm::Twine *)__p);
      if (!*(void *)v397) {
        goto LABEL_600;
      }
      int v276 = (llvm::Metadata *)*((void *)v260 - 2);
LABEL_603:
      uint64_t v299 = (llvm::raw_ostream **)v1;
LABEL_604:
      sub_1CD5DC50C(v299, v276);
      goto LABEL_600;
    }
    switch((int)v398)
    {
      case 3:
        uint64_t v264 = (unsigned __int8 *)*((void *)v260 - 1);
        if (*v264 - 4 > 0x1E || *((_DWORD *)v264 + 2) != 2)
        {
          uint64_t v263 = "invalid value for 'require' module flag (expected metadata pair)";
          goto LABEL_599;
        }
        if (!**((unsigned char **)v264 - 2))
        {
          if (v404 >= (unint64_t)HIDWORD(v404)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v403 + v404) = v264;
          LODWORD(v404) = v404 + 1;
          goto LABEL_514;
        }
        __p[0] = "invalid value for 'require' module flag (first value operand should be a string)";
        __int16 v402 = 259;
        uint64_t v1 = (uint64_t)v397;
        sub_1CD5DBE68(v397, (llvm::Twine *)__p);
        if (*(void *)v397)
        {
          int v276 = (llvm::Metadata *)*((void *)v264 - 2);
          goto LABEL_603;
        }
        break;
      case 5:
      case 6:
        if (**((unsigned __int8 **)v260 - 1) - 4 < 0x1F) {
          goto LABEL_508;
        }
        uint64_t v263 = "invalid value for 'append'-type module flag (expected a metadata node)";
        goto LABEL_599;
      case 7:
        uint64_t v265 = *((void *)v260 - 1);
        if (v265 && *(unsigned char *)v265 == 1 && *(unsigned char *)(*(void *)(v265 + 128) + 16) == 16) {
          goto LABEL_508;
        }
        uint64_t v263 = "invalid value for 'max' module flag (expected constant integer)";
        goto LABEL_599;
      case 8:
        uint64_t v266 = *((void *)v260 - 1);
        if (v266 && *(unsigned char *)v266 == 1 && *(unsigned char *)(*(void *)(v266 + 128) + 16) == 16) {
          goto LABEL_508;
        }
        uint64_t v263 = "invalid value for 'min' module flag (expected constant integer)";
LABEL_599:
        __p[0] = (void *)v263;
        __int16 v402 = 259;
        uint64_t v1 = (uint64_t)v397;
        sub_1CD5DBE68(v397, (llvm::Twine *)__p);
        if (!*(void *)v397) {
          break;
        }
        int v276 = (llvm::Metadata *)*((void *)v260 - 1);
        goto LABEL_603;
      default:
LABEL_508:
        __p[0] = 0;
        unsigned int v267 = v408.__r_.__value_.__r.__words[2];
        if (sub_1CC64E380(v258, v408.__r_.__value_.__r.__words[2], (uint64_t)v262, __p))
        {
          __p[0] = "module flag identifiers must be unique (or of 'require' type)";
          __int16 v402 = 259;
          sub_1CD5DBE68(v397, (llvm::Twine *)__p);
          if (*(void *)v397) {
            sub_1CD5DC50C((llvm::raw_ostream **)v397, v262);
          }
          uint64_t v1 = (uint64_t)v397;
          break;
        }
        if (4 * LODWORD(v408.__r_.__value_.__r.__words[1]) + 4 >= 3 * v267)
        {
          int v298 = 2 * v267;
        }
        else
        {
          if (v267 + ~LODWORD(v408.__r_.__value_.__r.__words[1]) - HIDWORD(v408.__r_.__value_.__r.__words[1]) > v267 >> 3) {
            goto LABEL_511;
          }
          int v298 = v267;
        }
        sub_1CC64E414((uint64_t)&v408, v298);
        __p[0] = 0;
        uint64_t v258 = v408.__r_.__value_.__r.__words[0];
        sub_1CC64E380((uint64_t)v408.__r_.__value_.__l.__data_, v408.__r_.__value_.__r.__words[2], (uint64_t)v262, __p);
LABEL_511:
        unsigned int v268 = __p[0];
        ++LODWORD(v408.__r_.__value_.__r.__words[1]);
        if (*(void *)__p[0] != -4096) {
          --HIDWORD(v408.__r_.__value_.__r.__words[1]);
        }
        *(void *)__p[0] = v262;
        v268[1] = v260;
LABEL_514:
        unsigned int v269 = (uint64_t *)*((void *)v262 + 1);
        int v270 = v269 + 3;
        uint64_t v271 = *v269;
        if (*v269 == 14)
        {
          if (*v270 != 0x4F2072656B6E694CLL || *(uint64_t *)((char *)v269 + 30) != 0x736E6F6974704F20) {
            goto LABEL_529;
          }
          uint64_t v277 = (llvm::Module *)*((void *)v397 + 1);
          __p[0] = "llvm.linker.options";
          __int16 v402 = 259;
          if (!llvm::Module::getNamedMetadata(v277, (const char **)__p))
          {
            __p[0] = "'Linker Options' named metadata no longer supported";
            __int16 v402 = 259;
            uint64_t v1 = (uint64_t)v397;
            goto LABEL_552;
          }
          unsigned int v269 = (uint64_t *)*((void *)v262 + 1);
          uint64_t v271 = *v269;
        }
        else if (v271 == 10)
        {
          BOOL v272 = *v270 == 0x69735F7261686377 && *((_WORD *)v269 + 16) == 25978;
          uint64_t v1 = (uint64_t)v397;
          if (v272)
          {
            uint64_t v273 = ((void *)v260 - *((unsigned int *)v260 + 2))[2];
            if (!v273 || *(unsigned char *)v273 != 1 || *(unsigned char *)(*(void *)(v273 + 128) + 16) != 16)
            {
              BOOL v274 = "wchar_size metadata requires constant integer argument";
LABEL_551:
              __p[0] = (void *)v274;
              __int16 v402 = 259;
LABEL_552:
              sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)__p);
              break;
            }
          }
LABEL_553:
          uint64_t v286 = *v270;
          int v287 = *((unsigned __int16 *)v270 + 4);
          if (v286 == 0x69666F7250204743 && v287 == 25964)
          {
            uint64_t v289 = ((void *)v260 - *((unsigned int *)v260 + 2))[2];
            uint64_t v290 = *(unsigned int *)(v289 + 8);
            if (v290)
            {
              uint64_t v291 = -8 * v290;
              do
              {
                unsigned int v292 = *(unsigned __int8 **)(v289 + v291);
                if (v292 && *v292 - 4 <= 0x1E && *((_DWORD *)v292 + 2) == 3)
                {
                  uint64_t v293 = (llvm::Value **)*((void *)v292 - 3);
                  if (v293
                    && (*(unsigned __int8 *)v293 - 3 < 0xFFFFFFFE
                     || *((unsigned char *)llvm::Value::stripPointerCasts(v293[16]) + 16)))
                  {
                    __p[0] = "expected a Function or null";
                    __int16 v402 = 259;
                    sub_1CD5DBE68(v397, (llvm::Twine *)__p);
                    if (*(void *)v397) {
                      sub_1CD5DC50C((llvm::raw_ostream **)v397, *((llvm::Metadata **)v292 - 3));
                    }
                  }
                  uint64_t v294 = &v292[-8 * *((unsigned int *)v292 + 2)];
                  uint64_t v295 = (llvm::Value **)*((void *)v294 + 1);
                  if (v295
                    && (*(unsigned __int8 *)v295 - 3 < 0xFFFFFFFE
                     || *((unsigned char *)llvm::Value::stripPointerCasts(v295[16]) + 16)))
                  {
                    __p[0] = "expected a Function or null";
                    __int16 v402 = 259;
                    sub_1CD5DBE68(v397, (llvm::Twine *)__p);
                    if (*(void *)v397) {
                      sub_1CD5DC50C((llvm::raw_ostream **)v397, *((llvm::Metadata **)v294 + 1));
                    }
                  }
                  uint64_t v296 = &v292[-8 * *((unsigned int *)v292 + 2)];
                  uint64_t v297 = *((void *)v296 + 2);
                  if (!v297 || *(unsigned char *)v297 != 1 || *(unsigned char *)(**(void **)(v297 + 128) + 8) != 13)
                  {
                    __p[0] = "expected an integer constant";
                    __int16 v402 = 259;
                    sub_1CD5DBE68(v397, (llvm::Twine *)__p);
                    if (*(void *)v397) {
                      sub_1CD5DC50C((llvm::raw_ostream **)v397, *((llvm::Metadata **)v296 + 2));
                    }
                  }
                }
                else
                {
                  __p[0] = "expected a MDNode triple";
                  __int16 v402 = 259;
                  sub_1CD5DBE68(v397, (llvm::Twine *)__p);
                  if (*(void *)v397) {
                    sub_1CD5DC50C((llvm::raw_ostream **)v397, *(llvm::Metadata **)(v289 + v291));
                  }
                }
                v291 += 8;
              }
              while (v291);
LABEL_529:
              uint64_t v1 = (uint64_t)v397;
              break;
            }
          }
          break;
        }
        uint64_t v1 = (uint64_t)v397;
        int v270 = v269 + 3;
        if (v271 == 10) {
          goto LABEL_553;
        }
        if (v271 == 21)
        {
          uint64_t v278 = *v270;
          uint64_t v279 = v269[4];
          uint64_t v280 = *(uint64_t *)((char *)v270 + 13);
          BOOL v281 = v278 == 0x6369746E616D6553 && v279 == 0x736F707265746E49;
          if (v281 && v280 == 0x6E6F697469736F70)
          {
            if ((uint64_t v283 = ((void *)v260 - *((unsigned int *)v260 + 2))[2]) == 0
              || *(unsigned char *)v283 != 1
              || ((uint64_t v284 = *(void *)(v283 + 128)) != 0 ? (v285 = *(unsigned char *)(v284 + 16) == 16) : (v285 = 0), !v285))
            {
              BOOL v274 = "SemanticInterposition metadata requires constant integer argument";
              goto LABEL_551;
            }
          }
        }
        break;
    }
LABEL_600:
    if (++v259 != v257) {
      continue;
    }
    break;
  }
  BOOL v303 = (uint64_t *)v403;
  if (v404)
  {
    uint64_t v304 = (uint64_t *)((char *)v403 + 8 * v404);
    std::string::size_type v305 = v408.__r_.__value_.__r.__words[0];
    int v306 = v408.__r_.__value_.__r.__words[2];
    int v307 = LODWORD(v408.__r_.__value_.__r.__words[2]) - 1;
    while (1)
    {
      uint64_t v308 = *v303 - 8 * *(unsigned int *)(*v303 + 8);
      uint64_t v309 = *(llvm::Metadata **)v308;
      if (!v306) {
        goto LABEL_627;
      }
      uint64_t v310 = *(void *)(v308 + 8);
      uint64_t v311 = ((v309 >> 4) ^ (v309 >> 9)) & v307;
      uint64_t v312 = *(llvm::Metadata **)(v305 + 16 * v311);
      if (v309 != v312) {
        break;
      }
LABEL_618:
      uint64_t v313 = *(void *)(v305 + 16 * v311 + 8);
      if (!v313) {
        goto LABEL_627;
      }
      if (*(void *)(v313 - 8 * *(unsigned int *)(v313 + 8) + 16) != v310)
      {
        __p[0] = "invalid requirement on flag, flag does not have the required value";
        goto LABEL_628;
      }
LABEL_620:
      if (++v303 == v304)
      {
        BOOL v303 = (uint64_t *)v403;
        uint64_t v1 = (uint64_t)v397;
        goto LABEL_630;
      }
    }
    int v314 = 1;
    while (v312 != (llvm::Metadata *)-4096)
    {
      int v315 = v311 + v314++;
      uint64_t v311 = v315 & v307;
      uint64_t v312 = *(llvm::Metadata **)(v305 + 16 * v311);
      if (v309 == v312) {
        goto LABEL_618;
      }
    }
LABEL_627:
    __p[0] = "invalid requirement on flag, flag is not present in module";
LABEL_628:
    __int16 v402 = 259;
    sub_1CD5DBE68(v397, (llvm::Twine *)__p);
    if (*(void *)v397) {
      sub_1CD5DC50C((llvm::raw_ostream **)v397, v309);
    }
    goto LABEL_620;
  }
LABEL_630:
  if (v303 != &v405) {
    free(v303);
  }
LABEL_632:
  MEMORY[0x1D25D9CD0](v408.__r_.__value_.__r.__words[0], 8);
LABEL_633:
  uint64_t v316 = *(llvm::Module **)(v1 + 8);
  uint64_t v403 = "llvm.ident";
  LOWORD(v407[0]) = 259;
  uint64_t v317 = llvm::Module::getNamedMetadata(v316, (const char **)&v403);
  if (v317)
  {
    uint64_t v318 = *(void *)(v317 + 48);
    uint64_t v319 = *(unsigned int *)(v318 + 8);
    if (v319)
    {
      v320 = *(llvm::Metadata ***)v318;
      while (1)
      {
        uint64_t v321 = *v320;
        if (*((_DWORD *)*v320 + 2) != 1) {
          break;
        }
        uint64_t v322 = (unsigned char *)*((void *)v321 - 1);
        if (!v322 || *v322)
        {
          uint64_t v403 = "invalid value for llvm.ident metadata entry operand(the operand should be a string)";
          LOWORD(v407[0]) = 259;
          sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
          if (!*(void *)v1) {
            goto LABEL_640;
          }
          uint64_t v390 = (llvm::Metadata *)*((void *)v321 - 1);
          v391 = (llvm::raw_ostream **)v1;
          goto LABEL_768;
        }
        ++v320;
        if (!--v319) {
          goto LABEL_640;
        }
      }
      uint64_t v403 = "incorrect number of operands in llvm.ident metadata";
      LOWORD(v407[0]) = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
      if (!*(void *)v1) {
        goto LABEL_640;
      }
      v391 = (llvm::raw_ostream **)v1;
      uint64_t v390 = v321;
LABEL_768:
      sub_1CD5DC50C(v391, v390);
    }
  }
LABEL_640:
  uint64_t v323 = *(llvm::Module **)(v1 + 8);
  uint64_t v403 = "llvm.commandline";
  LOWORD(v407[0]) = 259;
  uint64_t v324 = llvm::Module::getNamedMetadata(v323, (const char **)&v403);
  if (v324)
  {
    uint64_t v325 = *(void *)(v324 + 48);
    uint64_t v326 = *(unsigned int *)(v325 + 8);
    if (v326)
    {
      uint64_t v327 = *(llvm::Metadata ***)v325;
      while (1)
      {
        uint64_t v328 = *v327;
        if (*((_DWORD *)*v327 + 2) != 1) {
          break;
        }
        uint64_t v329 = (unsigned char *)*((void *)v328 - 1);
        if (!v329 || *v329)
        {
          uint64_t v403 = "invalid value for llvm.commandline metadata entry operand(the operand should be a string)";
          LOWORD(v407[0]) = 259;
          sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
          if (!*(void *)v1) {
            goto LABEL_647;
          }
          uint64_t v392 = (llvm::Metadata *)*((void *)v328 - 1);
          uint64_t v393 = (llvm::raw_ostream **)v1;
          goto LABEL_771;
        }
        ++v327;
        if (!--v326) {
          goto LABEL_647;
        }
      }
      uint64_t v403 = "incorrect number of operands in llvm.commandline metadata";
      LOWORD(v407[0]) = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)v1, (llvm::Twine *)&v403);
      if (!*(void *)v1) {
        goto LABEL_647;
      }
      uint64_t v393 = (llvm::raw_ostream **)v1;
      uint64_t v392 = v328;
LABEL_771:
      sub_1CD5DC50C(v393, v392);
    }
  }
LABEL_647:
  uint64_t v330 = *(llvm::Module **)(v1 + 8);
  if (!*(unsigned char *)(**(void **)v330 + 1184))
  {
    uint64_t v403 = "llvm.dbg.cu";
    LOWORD(v407[0]) = 259;
    uint64_t v331 = llvm::Module::getNamedMetadata(v330, (const char **)&v403);
    uint64_t v403 = v407;
    uint64_t v404 = (uint64_t)v407;
    uint64_t v405 = 2;
    int v406 = 0;
    if (v331)
    {
      uint64_t v332 = v331;
      uint64_t v333 = *(unsigned int *)(*(void *)(v331 + 48) + 8);
      if (v333)
      {
        uint64_t v334 = 0;
        unsigned int v335 = 2;
        while (2)
        {
          uint64_t v336 = *(void *)(**(void **)(v332 + 48) + 8 * v334);
          uint64_t v337 = v404;
          uint64_t v338 = HIDWORD(v405);
          if ((void *)v404 == v403)
          {
            if (HIDWORD(v405))
            {
              uint64_t v339 = 0;
              uint64_t v340 = 8 * HIDWORD(v405);
              uint64_t v341 = (void *)v404;
              while (*v341 != v336)
              {
                if (*v341 == -2) {
                  uint64_t v339 = v341;
                }
                ++v341;
                v340 -= 8;
                if (!v340)
                {
                  if (!v339) {
                    goto LABEL_659;
                  }
                  void *v339 = v336;
                  --v406;
                  goto LABEL_682;
                }
              }
              goto LABEL_682;
            }
LABEL_659:
            if (HIDWORD(v405) < v335)
            {
              ++HIDWORD(v405);
              *(void *)(v404 + 8 * v338) = v336;
              goto LABEL_682;
            }
          }
          if (3 * v335 <= 4 * (HIDWORD(v405) - v406))
          {
            if (v335 >= 0x40) {
              v335 *= 2;
            }
            else {
              unsigned int v335 = 128;
            }
          }
          else if (v335 - HIDWORD(v405) >= v335 >> 3)
          {
            goto LABEL_663;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v403, v335);
          unsigned int v335 = v405;
          uint64_t v337 = v404;
LABEL_663:
          unsigned int v342 = v335 - 1;
          unsigned int v343 = (v335 - 1) & ((v336 >> 4) ^ (v336 >> 9));
          uint64_t v344 = (void *)(v337 + 8 * v343);
          uint64_t v345 = *v344;
          if (*v344 == -1)
          {
            uint64_t v346 = 0;
LABEL_675:
            if (v346) {
              uint64_t v350 = v346;
            }
            else {
              uint64_t v350 = v344;
            }
            if (*v350 != v336)
            {
              if (*v350 == -2) {
                --v406;
              }
              else {
                ++HIDWORD(v405);
              }
              *uint64_t v350 = v336;
            }
          }
          else
          {
            uint64_t v346 = 0;
            int v347 = 1;
            while (v345 != v336)
            {
              if (v346) {
                BOOL v348 = 0;
              }
              else {
                BOOL v348 = v345 == -2;
              }
              if (v348) {
                uint64_t v346 = v344;
              }
              unsigned int v349 = v343 + v347++;
              unsigned int v343 = v349 & v342;
              uint64_t v344 = (void *)(v337 + 8 * (v349 & v342));
              uint64_t v345 = *v344;
              if (*v344 == -1) {
                goto LABEL_675;
              }
            }
          }
LABEL_682:
          if (++v334 == v333) {
            break;
          }
          continue;
        }
      }
    }
    uint64_t v1 = (uint64_t)v397;
    uint64_t v351 = (char *)*((void *)v397 + 94);
    uint64_t v352 = (char *)*((void *)v397 + 93);
    uint64_t v353 = 760;
    if (v351 == v352) {
      uint64_t v353 = 764;
    }
    uint64_t v354 = *(unsigned int *)((char *)v397 + v353);
    uint64_t v355 = (unint64_t *)*((void *)v397 + 94);
    if (v354)
    {
      uint64_t v356 = 8 * v354;
      uint64_t v355 = (unint64_t *)*((void *)v397 + 94);
      while (*v355 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v355;
        v356 -= 8;
        if (!v356) {
          goto LABEL_738;
        }
      }
    }
    int v357 = (unint64_t *)&v351[8 * v354];
    if (v355 == v357)
    {
LABEL_738:
      if (v351 != v352)
      {
        uint64_t v388 = *((unsigned int *)v397 + 190);
        if (v388 >= 0x21 && 4 * (*((_DWORD *)v397 + 191) - *((_DWORD *)v397 + 192)) < v388)
        {
          llvm::SmallPtrSetImplBase::shrink_and_clear((void **)v397 + 93);
          goto LABEL_740;
        }
        memset(v351, 255, 8 * v388);
      }
      *(void *)((char *)v397 + 764) = 0;
    }
    else
    {
      int v358 = v405 - 1;
      if ((void *)v404 == v403) {
        unsigned int v359 = HIDWORD(v405);
      }
      else {
        unsigned int v359 = v405;
      }
      uint64_t v360 = (char *)(v404 + 8 * v359);
      uint64_t v361 = (llvm::Metadata *)*v355;
      uint64_t v362 = (char *)v404;
LABEL_702:
      if (v362 == v403)
      {
        if (HIDWORD(v405))
        {
          uint64_t v363 = 0;
          while (*(llvm::Metadata **)((char *)v403 + v363) != v361)
          {
            v363 += 8;
            if (8 * HIDWORD(v405) == v363)
            {
              int v364 = HIDWORD(v405);
              goto LABEL_722;
            }
          }
          uint64_t v373 = (char *)v403 + v363;
          int v364 = HIDWORD(v405);
          uint64_t v362 = (char *)v403;
        }
        else
        {
          int v364 = 0;
LABEL_722:
          uint64_t v362 = (char *)v403;
          uint64_t v373 = (char *)v403 + 8 * HIDWORD(v405);
        }
      }
      else
      {
        unsigned int v365 = v358 & ((v361 >> 4) ^ (v361 >> 9));
        uint64_t v366 = (char *)(v404 + 8 * v365);
        unint64_t v367 = *(llvm::Metadata **)v366;
        if (*(void *)v366 == -1)
        {
          v368 = 0;
LABEL_724:
          if (v368) {
            uint64_t v366 = v368;
          }
          uint64_t v372 = *(llvm::Metadata **)v366;
        }
        else
        {
          v368 = 0;
          int v369 = 1;
          while (v367 != v361)
          {
            if (v368) {
              BOOL v370 = 0;
            }
            else {
              BOOL v370 = v367 == (llvm::Metadata *)-2;
            }
            if (v370) {
              v368 = v366;
            }
            unsigned int v371 = v365 + v369++;
            unsigned int v365 = v371 & v358;
            uint64_t v366 = (char *)(v404 + 8 * (v371 & v358));
            unint64_t v367 = *(llvm::Metadata **)v366;
            if (*(void *)v366 == -1) {
              goto LABEL_724;
            }
          }
          uint64_t v372 = v361;
        }
        if (v372 == v361) {
          uint64_t v373 = v366;
        }
        else {
          uint64_t v373 = v360;
        }
        int v364 = HIDWORD(v405);
        uint64_t v362 = (char *)v404;
      }
      if (v362 != v403) {
        int v364 = v405;
      }
      if (v373 != &v362[8 * v364])
      {
        v374 = v355 + 1;
        while (v374 != v357)
        {
          unint64_t v375 = *v374++;
          uint64_t v361 = (llvm::Metadata *)v375;
          if (v375 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            uint64_t v355 = v374 - 1;
            goto LABEL_702;
          }
        }
        goto LABEL_738;
      }
      __p[0] = "DICompileUnit not listed in llvm.dbg.cu";
      __int16 v402 = 259;
      sub_1CD5DC588(v397, (llvm::Twine *)__p);
      if (*(void *)v397) {
        sub_1CD5DC50C((llvm::raw_ostream **)v397, v361);
      }
    }
LABEL_740:
    if ((void *)v404 != v403) {
      free((void *)v404);
    }
  }
  uint64_t v376 = *(unsigned int *)(v1 + 1200);
  if (v376)
  {
    uint64_t v377 = *(void **)(v1 + 1192);
    uint64_t v378 = (_WORD *)*v377;
    __p[0] = *(void **)v377;
    if (v376 != 1)
    {
      uint64_t v379 = v377 + 1;
      unsigned __int16 v380 = v378[9];
      uint64_t v381 = 8 * v376 - 8;
      while (1)
      {
        v408.__r_.__value_.__r.__words[0] = *v379;
        if (((*(_WORD *)(v408.__r_.__value_.__r.__words[0] + 18) ^ v380) & 0x3FF0) != 0) {
          break;
        }
        ++v379;
        v381 -= 8;
        if (!v381) {
          goto LABEL_747;
        }
      }
      uint64_t v403 = "All llvm.experimental.deoptimize declarations must have the same calling convention";
      LOWORD(v407[0]) = 259;
      sub_1CD5DBC00((llvm::raw_ostream *)v1, (llvm::Twine *)&v403, (llvm::Value **)__p, (llvm::Value **)&v408);
    }
  }
LABEL_747:
  int v382 = *(_DWORD *)(v1 + 728);
  if (v382 || *(_DWORD *)(v1 + 732))
  {
    unint64_t v383 = (_DWORD *)(v1 + 720);
    uint64_t v384 = *(unsigned int *)(v1 + 736);
    if (v384 > 4 * v382 && v384 >= 0x41)
    {
      sub_1CD3C8060(v383);
    }
    else
    {
      if (v384)
      {
        int v385 = *(void **)v383;
        uint64_t v386 = 16 * v384;
        do
        {
          void *v385 = -4096;
          v385 += 2;
          v386 -= 16;
        }
        while (v386);
      }
      *(void *)(v1 + 728) = 0;
    }
  }
  return *(unsigned char *)(v1 + 192) == 0;
}

unint64_t llvm::TBAAVerifier::verifyTBAABaseNode(llvm::TBAAVerifier *this, llvm::Instruction *a2, const llvm::MDNode *a3, int a4)
{
  unsigned int v40 = a3;
  if (*((_DWORD *)a3 + 2) > 1u)
  {
    uint64_t v6 = *((void *)this + 1);
    uint64_t v7 = *((unsigned int *)this + 6);
    unsigned int v8 = a3 >> 4;
    if (v7)
    {
      LODWORD(v9) = (v7 - 1) & (v8 ^ (a3 >> 9));
      uint64_t v10 = v6 + 16 * v9;
      int v11 = *(const llvm::MDNode **)v10;
      if (*(const llvm::MDNode **)v10 == a3) {
        goto LABEL_4;
      }
      int v16 = 1;
      while (v11 != (const llvm::MDNode *)-4096)
      {
        int v17 = v9 + v16++;
        uint64_t v9 = v17 & (v7 - 1);
        int v11 = *(const llvm::MDNode **)(v6 + 16 * v9);
        if (v11 == a3)
        {
          uint64_t v10 = v6 + 16 * v9;
          goto LABEL_4;
        }
      }
    }
    uint64_t v10 = v6 + 16 * v7;
LABEL_4:
    if (v10 != v6 + 16 * v7)
    {
      unint64_t v12 = *(void *)(v10 + 8);
      int v13 = v12 & 0xFFFFFF00;
      unint64_t v14 = v12 & 0xFFFFFFFF00000000;
      return v12 | v14 | v13 & 0xFFFFFF00;
    }
    unint64_t v12 = llvm::TBAAVerifier::verifyTBAABaseNodeImpl(this, a2, a3, a4);
    int v13 = v12 & 0xFFFFFF00;
    unint64_t v14 = v12 & 0xFFFFFFFF00000000;
    unsigned int v18 = *((_DWORD *)this + 6);
    if (v18)
    {
      uint64_t v19 = *((void *)this + 1);
      unsigned int v20 = (v18 - 1) & (v8 ^ (a3 >> 9));
      uint64_t v21 = (const llvm::MDNode **)(v19 + 16 * v20);
      int v22 = *v21;
      if (*v21 == a3) {
        return v12 | v14 | v13 & 0xFFFFFF00;
      }
      uint64_t v23 = 0;
      int v24 = 1;
      while (v22 != (const llvm::MDNode *)-4096)
      {
        if (v23) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v22 == (const llvm::MDNode *)-8192;
        }
        if (v25) {
          uint64_t v23 = v21;
        }
        unsigned int v26 = v20 + v24++;
        unsigned int v20 = v26 & (v18 - 1);
        uint64_t v21 = (const llvm::MDNode **)(v19 + 16 * v20);
        int v22 = *v21;
        if (*v21 == a3) {
          return v12 | v14 | v13 & 0xFFFFFF00;
        }
      }
      if (v23) {
        uint64_t v27 = v23;
      }
      else {
        uint64_t v27 = v21;
      }
    }
    else
    {
      uint64_t v27 = 0;
    }
    int v28 = *((_DWORD *)this + 4);
    if (4 * v28 + 4 >= 3 * v18)
    {
      sub_1CC64E8AC((uint64_t)this + 8, 2 * v18);
      uint64_t v30 = *((void *)this + 1);
      int v31 = *((_DWORD *)this + 6) - 1;
      unsigned int v32 = v31 & (v8 ^ (a3 >> 9));
      uint64_t v27 = (const llvm::MDNode **)(v30 + 16 * v32);
      uint64_t v33 = *v27;
      if (*v27 == a3)
      {
LABEL_34:
        BOOL v29 = a3;
        goto LABEL_30;
      }
      uint64_t v34 = 0;
      int v35 = 1;
      while (v33 != (const llvm::MDNode *)-4096)
      {
        if (v34) {
          BOOL v36 = 0;
        }
        else {
          BOOL v36 = v33 == (const llvm::MDNode *)-8192;
        }
        if (v36) {
          uint64_t v34 = v27;
        }
        unsigned int v37 = v32 + v35++;
        unsigned int v32 = v37 & v31;
        uint64_t v27 = (const llvm::MDNode **)(v30 + 16 * (v37 & v31));
        uint64_t v33 = *v27;
        if (*v27 == a3) {
          goto LABEL_34;
        }
      }
      if (v34) {
        uint64_t v27 = v34;
      }
    }
    else if (v18 + ~v28 - *((_DWORD *)this + 5) <= v18 >> 3)
    {
      sub_1CC64E8AC((uint64_t)this + 8, v18);
      v41[0] = 0;
      sub_1CC22052C(*((void *)this + 1), *((_DWORD *)this + 6), (uint64_t)a3, v41);
      uint64_t v27 = (const llvm::MDNode **)v41[0];
    }
    BOOL v29 = *v27;
LABEL_30:
    ++*((_DWORD *)this + 4);
    if (v29 != (const llvm::MDNode *)-4096) {
      --*((_DWORD *)this + 5);
    }
    *uint64_t v27 = a3;
    v27[1] = (const llvm::MDNode *)v12;
    return v12 | v14 | v13 & 0xFFFFFF00;
  }
  __int16 v39 = a2;
  uint64_t v38 = *(llvm::raw_ostream **)this;
  if (*(void *)this)
  {
    v41[0] = "Base nodes must have at least two operands";
    __int16 v42 = 259;
    sub_1CD5DBD0C(v38, (llvm::Twine *)v41, &v39, &v40);
  }
  int v13 = 0;
  unint64_t v14 = 0xFFFFFFFF00000000;
  LOBYTE(v12) = 1;
  return v12 | v14 | v13 & 0xFFFFFF00;
}

unint64_t llvm::TBAAVerifier::verifyTBAABaseNodeImpl(llvm::TBAAVerifier *this, llvm::Instruction *a2, const llvm::MDNode *a3, int a4)
{
  int v44 = a3;
  uint64_t v6 = *((unsigned int *)a3 + 2);
  if (v6 == 2)
  {
    int v11 = !llvm::TBAAVerifier::isValidScalarTBAANode(this, a3);
    uint64_t v23 = (v11 << 31 >> 31);
    return v11 & 1 | (unint64_t)(v23 << 32);
  }
  if (a4)
  {
    if ((-1431655765 * v6) >= 0x55555556)
    {
      sub_1CD5DB3C0(*(llvm::raw_ostream **)this, &v44);
    }
    else
    {
      uint64_t v36 = ((void *)a3 - v6)[1];
      if (v36 && *(unsigned char *)v36 == 1 && *(unsigned char *)(*(void *)(v36 + 128) + 16) == 16)
      {
        int v10 = 3;
        unsigned int v9 = 3;
        goto LABEL_6;
      }
      int v41 = a2;
      __int16 v39 = *(llvm::raw_ostream **)this;
      if (*(void *)this)
      {
        v45[0] = "Type size nodes must be constants!";
        __int16 v46 = 259;
        sub_1CD5DBD0C(v39, (llvm::Twine *)v45, &v41, &v44);
      }
    }
LABEL_70:
    uint64_t v23 = 0xFFFFFFFFLL;
    LOBYTE(v11) = 1;
    return v11 & 1 | (unint64_t)(v23 << 32);
  }
  if ((v6 & 1) == 0)
  {
    unsigned int v37 = *(llvm::raw_ostream **)this;
    uint64_t v38 = "Struct tag nodes must have an odd number of operands!";
LABEL_69:
    sub_1CD5DB42C(v37, v38, &v44);
    goto LABEL_70;
  }
  if (**((unsigned char **)a3 - v6))
  {
    unsigned int v37 = *(llvm::raw_ostream **)this;
    uint64_t v38 = "Struct tag nodes have a string as their first operand";
    goto LABEL_69;
  }
  unsigned int v9 = 1;
  int v10 = 2;
LABEL_6:
  LOBYTE(v41) = 0;
  char v43 = 0;
  if (v9 >= v6)
  {
    LOBYTE(v11) = 0;
    uint64_t v23 = 0xFFFFFFFFLL;
    return v11 & 1 | (unint64_t)(v23 << 32);
  }
  LOBYTE(v11) = 0;
  unsigned int v12 = -1;
  int v13 = "Incorrect field entry in struct type node!";
  do
  {
    unint64_t v14 = (char *)a3 - 8 * v6;
    if (**(unsigned __int8 **)&v14[8 * v9] - 4 < 0x1F)
    {
      uint64_t v15 = *(void *)&v14[8 * v9 + 8];
      if (v15 && *(unsigned char *)v15 == 1 && (uint64_t v16 = *(void *)(v15 + 128), *(unsigned char *)(v16 + 16) == 16))
      {
        unsigned int v17 = *(_DWORD *)(v16 + 32);
        if (v12 == -1 || v17 == v12)
        {
          unsigned int v18 = (llvm::Value **)(v16 + 24);
          if (v43)
          {
            unsigned int v19 = v42;
            if (v42 > 0x40)
            {
              unint64_t v26 = (((unint64_t)v42 + 63) >> 3) & 0x3FFFFFF8;
              while (v26)
              {
                unint64_t v27 = *(void *)((char *)v41 + v26 - 8);
                unint64_t v28 = *(void *)((char *)*v18 + v26 - 8);
                v26 -= 8;
                if (v27 != v28)
                {
                  if (v27 > v28) {
                    goto LABEL_42;
                  }
                  break;
                }
              }
            }
            else
            {
              if (v41 <= *v18)
              {
LABEL_17:
                unsigned int v20 = *(_DWORD *)(v16 + 32);
                if (v20 <= 0x40)
                {
                  int v41 = *v18;
                  unsigned int v42 = v20;
LABEL_19:
                  if (!a4)
                  {
                    unsigned int v12 = v17;
                    goto LABEL_21;
                  }
                  int v31 = v13;
                  uint64_t v33 = *((void *)a3 + v9 - *((unsigned int *)a3 + 2) + 2);
                  if (!v33 || *(unsigned char *)v33 != 1 || *(unsigned char *)(*(void *)(v33 + 128) + 16) != 16)
                  {
                    unsigned int v40 = a2;
                    uint64_t v34 = *(llvm::raw_ostream **)this;
                    if (*(void *)this)
                    {
                      v45[0] = "Member size entries must be constants!";
                      __int16 v46 = 259;
                      sub_1CD5DBD0C(v34, (llvm::Twine *)v45, &v40, &v44);
                    }
                    LOBYTE(v11) = 1;
                  }
                  unsigned int v12 = v17;
                  goto LABEL_49;
                }
LABEL_41:
                BOOL v29 = v13;
                llvm::APInt::assignSlowCase((const llvm::APInt *)&v41, (const llvm::APInt *)(v16 + 24));
                int v13 = v29;
                goto LABEL_19;
              }
LABEL_42:
              unsigned int v40 = a2;
              uint64_t v30 = *(llvm::raw_ostream **)this;
              if (!*(void *)this)
              {
                LOBYTE(v11) = 1;
                goto LABEL_40;
              }
              v45[0] = "Offsets must be increasing!";
              __int16 v46 = 259;
              sub_1CD5DBD0C(v30, (llvm::Twine *)v45, &v40, &v44);
              if (!v43)
              {
                unsigned int v22 = *(_DWORD *)(v16 + 32);
                LOBYTE(v11) = 1;
                int v13 = "Incorrect field entry in struct type node!";
                goto LABEL_27;
              }
              LOBYTE(v11) = 1;
              unsigned int v19 = v42;
              int v13 = "Incorrect field entry in struct type node!";
            }
LABEL_40:
            if (v19 > 0x40) {
              goto LABEL_41;
            }
            goto LABEL_17;
          }
          unsigned int v22 = *(_DWORD *)(v16 + 32);
LABEL_27:
          unsigned int v42 = v22;
          if (v22 > 0x40) {
            operator new[]();
          }
          int v41 = *v18;
          char v43 = 1;
          goto LABEL_19;
        }
        int v31 = v13;
        unsigned int v40 = a2;
        unsigned int v32 = *(llvm::raw_ostream **)this;
        if (*(void *)this)
        {
          int v35 = "Bitwidth between the offsets and struct type entries must match";
LABEL_60:
          v45[0] = v35;
          __int16 v46 = 259;
          sub_1CD5DBD0C(v32, (llvm::Twine *)v45, &v40, &v44);
        }
      }
      else
      {
        int v31 = v13;
        unsigned int v40 = a2;
        unsigned int v32 = *(llvm::raw_ostream **)this;
        if (*(void *)this)
        {
          int v35 = "Offset entries must be constants!";
          goto LABEL_60;
        }
      }
      LOBYTE(v11) = 1;
LABEL_49:
      int v13 = v31;
      goto LABEL_21;
    }
    unsigned int v40 = a2;
    uint64_t v21 = *(llvm::raw_ostream **)this;
    if (*(void *)this)
    {
      v45[0] = v13;
      __int16 v46 = 259;
      BOOL v25 = v13;
      sub_1CD5DBD0C(v21, (llvm::Twine *)v45, &v40, &v44);
      int v13 = v25;
    }
    LOBYTE(v11) = 1;
LABEL_21:
    v9 += v10;
    LODWORD(v6) = *((_DWORD *)a3 + 2);
  }
  while (v9 < v6);
  if (v11) {
    uint64_t v23 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v23 = v12;
  }
  if (v43 && v42 > 0x40 && v41) {
    MEMORY[0x1D25D9CB0](v41, 0x1000C8000313F17);
  }
  return v11 & 1 | (unint64_t)(v23 << 32);
}

BOOL llvm::TBAAVerifier::isValidScalarTBAANode(llvm::TBAAVerifier *this, const llvm::MDNode *a2)
{
  uint64_t v5 = (char *)this + 32;
  uint64_t v4 = *((void *)this + 4);
  uint64_t v6 = *((unsigned int *)this + 12);
  unsigned int v7 = a2 >> 4;
  if (!v6)
  {
LABEL_10:
    uint64_t v9 = v4 + 16 * v6;
    goto LABEL_3;
  }
  LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
  uint64_t v9 = v4 + 16 * v8;
  int v10 = *(const llvm::MDNode **)v9;
  if (*(const llvm::MDNode **)v9 != a2)
  {
    int v13 = 1;
    while (v10 != (const llvm::MDNode *)-4096)
    {
      int v14 = v8 + v13++;
      uint64_t v8 = v14 & (v6 - 1);
      int v10 = *(const llvm::MDNode **)(v4 + 16 * v8);
      if (v10 == a2)
      {
        uint64_t v9 = v4 + 16 * v8;
        goto LABEL_3;
      }
    }
    goto LABEL_10;
  }
LABEL_3:
  if (v9 != v4 + 16 * v6) {
    return *(unsigned char *)(v9 + 8) != 0;
  }
  uint64_t v61 = v65;
  uint64_t v62 = v65;
  uint64_t v63 = 4;
  int v64 = 0;
  uint64_t v15 = *((unsigned int *)a2 + 2);
  unsigned int v16 = 4;
  unsigned int v17 = a2;
  while ((v15 & 0xFFFFFFFE) == 2)
  {
    unsigned int v18 = (char *)v17 - 8 * v15;
    if (**(unsigned char **)v18) {
      break;
    }
    if (v15 == 3)
    {
      uint64_t v19 = *((void *)v18 + 2);
      if (*(unsigned char *)v19 != 1) {
        break;
      }
      uint64_t v20 = *(void *)(v19 + 128);
      if (*(unsigned char *)(v20 + 16) != 16) {
        break;
      }
      uint64_t v21 = *(unsigned int *)(v20 + 32);
      if (v21 > 0x40)
      {
        int v22 = 0;
        int64_t v23 = (unint64_t)(v21 + 63) >> 6;
        do
        {
          if (v23-- < 1) {
            break;
          }
          unint64_t v25 = *(void *)(*(void *)(v20 + 24) + 8 * v23);
          v22 += __clz(v25);
        }
        while (!v25);
        int v26 = v21 | 0xFFFFFFC0;
        if ((v21 & 0x3F) == 0) {
          int v26 = 0;
        }
        if (v22 + v26 != v21) {
          break;
        }
      }
      else if (*(void *)(v20 + 24))
      {
        break;
      }
    }
    unsigned int v17 = (const llvm::MDNode *)*((void *)v18 + 1);
    if (!v17 || *(unsigned __int8 *)v17 - 4 > 0x1E) {
      break;
    }
    unint64_t v27 = v62;
    uint64_t v28 = HIDWORD(v63);
    if (v62 == v61)
    {
      if (HIDWORD(v63))
      {
        BOOL v29 = 0;
        uint64_t v30 = 8 * HIDWORD(v63);
        int v31 = (const llvm::MDNode **)v62;
        while (*v31 != v17)
        {
          if (*v31 == (const llvm::MDNode *)-2) {
            BOOL v29 = v31;
          }
          ++v31;
          v30 -= 8;
          if (!v30)
          {
            if (!v29) {
              goto LABEL_36;
            }
            *BOOL v29 = v17;
            --v64;
            goto LABEL_38;
          }
        }
        break;
      }
LABEL_36:
      if (HIDWORD(v63) < v16)
      {
        ++HIDWORD(v63);
        *(void *)&v62[8 * v28] = v17;
        goto LABEL_38;
      }
    }
    if (3 * v16 <= 4 * (HIDWORD(v63) - v64))
    {
      if (v16 >= 0x40) {
        v16 *= 2;
      }
      else {
        unsigned int v16 = 128;
      }
LABEL_93:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v61, v16);
      unsigned int v16 = v63;
      unint64_t v27 = v62;
      goto LABEL_42;
    }
    if (v16 - HIDWORD(v63) < v16 >> 3) {
      goto LABEL_93;
    }
LABEL_42:
    unsigned int v32 = v16 - 1;
    unsigned int v33 = (v16 - 1) & ((v17 >> 4) ^ (v17 >> 9));
    uint64_t v34 = &v27[8 * v33];
    int v35 = *(const llvm::MDNode **)v34;
    if (*(void *)v34 != -1)
    {
      uint64_t v36 = 0;
      int v37 = 1;
      while (v35 != v17)
      {
        if (v36) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v35 == (const llvm::MDNode *)-2;
        }
        if (v38) {
          uint64_t v36 = (const llvm::MDNode **)v34;
        }
        unsigned int v39 = v33 + v37++;
        unsigned int v33 = v39 & v32;
        uint64_t v34 = &v27[8 * (v39 & v32)];
        int v35 = *(const llvm::MDNode **)v34;
        if (*(void *)v34 == -1) {
          goto LABEL_54;
        }
      }
      break;
    }
    uint64_t v36 = 0;
LABEL_54:
    if (v36) {
      unsigned int v40 = v36;
    }
    else {
      unsigned int v40 = (const llvm::MDNode **)v34;
    }
    if (*v40 == v17) {
      break;
    }
    if (*v40 == (const llvm::MDNode *)-2) {
      --v64;
    }
    else {
      ++HIDWORD(v63);
    }
    llvm::Value *v40 = v17;
LABEL_38:
    uint64_t v15 = *((unsigned int *)v17 + 2);
    if (v15 <= 1)
    {
      uint64_t v11 = 1;
      goto LABEL_62;
    }
  }
  uint64_t v11 = 0;
LABEL_62:
  unsigned int v41 = *((_DWORD *)this + 12);
  if (v41)
  {
    uint64_t v42 = *((void *)this + 4);
    unsigned int v43 = (v41 - 1) & (v7 ^ (a2 >> 9));
    int v44 = (const llvm::MDNode **)(v42 + 16 * v43);
    unsigned int v45 = *v44;
    if (*v44 == a2) {
      goto LABEL_64;
    }
    __int16 v46 = 0;
    int v47 = 1;
    while (v45 != (const llvm::MDNode *)-4096)
    {
      if (v46) {
        BOOL v48 = 0;
      }
      else {
        BOOL v48 = v45 == (const llvm::MDNode *)-8192;
      }
      if (v48) {
        __int16 v46 = v44;
      }
      unsigned int v49 = v43 + v47++;
      unsigned int v43 = v49 & (v41 - 1);
      int v44 = (const llvm::MDNode **)(v42 + 16 * v43);
      unsigned int v45 = *v44;
      if (*v44 == a2) {
        goto LABEL_64;
      }
    }
    if (v46) {
      BOOL v50 = v46;
    }
    else {
      BOOL v50 = v44;
    }
  }
  else
  {
    BOOL v50 = 0;
  }
  int v51 = *((_DWORD *)this + 10);
  if (4 * v51 + 4 < 3 * v41)
  {
    if (v41 + ~v51 - *((_DWORD *)this + 11) <= v41 >> 3)
    {
      sub_1CC64EA28((uint64_t)v5, v41);
      int v66 = 0;
      sub_1CC22052C(*((void *)this + 4), *((_DWORD *)this + 12), (uint64_t)a2, &v66);
      BOOL v50 = v66;
    }
    goto LABEL_81;
  }
  sub_1CC64EA28((uint64_t)v5, 2 * v41);
  uint64_t v53 = *((void *)this + 4);
  int v54 = *((_DWORD *)this + 12) - 1;
  unsigned int v55 = v54 & (v7 ^ (a2 >> 9));
  BOOL v50 = (const llvm::MDNode **)(v53 + 16 * v55);
  uint64_t v56 = *v50;
  if (*v50 == a2)
  {
LABEL_87:
    BOOL v52 = a2;
  }
  else
  {
    uint64_t v57 = 0;
    int v58 = 1;
    while (v56 != (const llvm::MDNode *)-4096)
    {
      if (v57) {
        BOOL v59 = 0;
      }
      else {
        BOOL v59 = v56 == (const llvm::MDNode *)-8192;
      }
      if (v59) {
        uint64_t v57 = v50;
      }
      unsigned int v60 = v55 + v58++;
      unsigned int v55 = v60 & v54;
      BOOL v50 = (const llvm::MDNode **)(v53 + 16 * (v60 & v54));
      uint64_t v56 = *v50;
      if (*v50 == a2) {
        goto LABEL_87;
      }
    }
    if (v57) {
      BOOL v50 = v57;
    }
LABEL_81:
    BOOL v52 = *v50;
  }
  ++*((_DWORD *)this + 10);
  if (v52 != (const llvm::MDNode *)-4096) {
    --*((_DWORD *)this + 11);
  }
  *BOOL v50 = a2;
  *((unsigned char *)v50 + 8) = v11;
LABEL_64:
  if (v62 != v61) {
    free(v62);
  }
  return v11;
}

uint64_t llvm::TBAAVerifier::getFieldNodeFromTBAABaseNode(llvm::raw_ostream **this, llvm::Instruction *a2, const llvm::MDNode *a3, llvm::APInt *a4, int a5)
{
  uint64_t v20 = a3;
  uint64_t v6 = *((unsigned int *)a3 + 2);
  if (v6 == 2) {
    return *((void *)a3 - 1);
  }
  if (a5) {
    unsigned int v8 = 3;
  }
  else {
    unsigned int v8 = 1;
  }
  if (a5) {
    int v9 = 3;
  }
  else {
    int v9 = 2;
  }
  if (v8 >= v6)
  {
LABEL_12:
    int v13 = v6 - v9;
    uint64_t v14 = *((void *)a3 + (v6 - v9 + 1) - v6);
  }
  else
  {
    int v10 = 0;
    unsigned int v11 = v8;
    unsigned int v12 = (char *)a3 - 8 * v6;
    while ((int)llvm::APInt::compare((llvm::APInt *)(*(void *)(*(void *)&v12[8 * v8 + 8 + 8 * v10] + 128) + 24), a4) < 1)
    {
      v11 += v9;
      v10 += v9;
      if (v11 >= v6) {
        goto LABEL_12;
      }
    }
    if (!v10)
    {
      unsigned int v18 = a4;
      uint64_t v19 = a2;
      sub_1CD5DB4A4(*this, &v19, &v20, &v18);
      return 0;
    }
    int v13 = v8 - v9 + v10;
    uint64_t v14 = *(void *)&v12[8 * (v13 + 1)];
  }
  llvm::APInt::operator-=((uint64_t)a4, (unint64_t **)(*(void *)(v14 + 128) + 24));
  return *((void *)a3 + v13 - *((unsigned int *)a3 + 2));
}

uint64_t llvm::TBAAVerifier::visitTBAAMetadata(llvm::raw_ostream **this, llvm::Instruction *a2, const llvm::MDNode *a3)
{
  std::string::size_type v111 = a3;
  int v6 = *((unsigned __int8 *)a2 + 16);
  if ((v6 - 60) >= 2)
  {
    unsigned int v88 = v6 - 64;
    BOOL v45 = v88 > 0x18;
    int v89 = (1 << v88) & 0x1100003;
    if (v45 || v89 == 0)
    {
      uint64_t v102 = a2;
      sub_1CD5DB528(*this, &v102);
      return 0;
    }
  }
  uint64_t v7 = *((unsigned int *)a3 + 2);
  unsigned int v8 = (llvm::Metadata **)((char *)a3 - 8 * v7);
  int v9 = *v8;
  if (v7 < 3 || *(unsigned __int8 *)*v8 - 4 >= 0x1F)
  {
    uint64_t v102 = a2;
    sub_1CD5DB598(*this, &v102);
    return 0;
  }
  switch(*(unsigned char *)*v8)
  {
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
      break;
    default:
      int v9 = 0;
      break;
  }
  uint64_t v109 = 0;
  std::string::size_type v110 = v9;
  unsigned int v11 = (unsigned int *)v8[1];
  if (!v11) {
    goto LABEL_18;
  }
  if (*(unsigned __int8 *)v11 - 4 > 0x1E)
  {
    unsigned int v11 = 0;
LABEL_18:
    if (v7 >= 5)
    {
      v112[0] = a2;
      uint64_t v14 = *this;
      if (!*this) {
        return 0;
      }
      int v64 = "Struct tag metadata must have either 3 or 4 operands";
      goto LABEL_102;
    }
    int v17 = 0;
    unsigned int v18 = 3;
    goto LABEL_20;
  }
  uint64_t v109 = v8[1];
  uint64_t v12 = v11[2];
  if (v12 < 3) {
    goto LABEL_18;
  }
  int v13 = *(unsigned __int8 **)&v11[-2 * v12];
  if (!v13 || *v13 - 4 > 0x1E) {
    goto LABEL_18;
  }
  if ((v7 & 0xFFFFFFFE) != 4)
  {
    v112[0] = a2;
    uint64_t v14 = *this;
    if (!*this) {
      return 0;
    }
    int v64 = "Access tag metadata must have either 4 or 5 operands";
LABEL_102:
    uint64_t v102 = (llvm::Value *)v64;
    v106[0] = 259;
    sub_1CD5DBD0C(v14, (llvm::Twine *)&v102, v112, &v111);
    return 0;
  }
  unsigned int v92 = (unsigned __int8 *)v8[3];
  if (!v92 || *v92 != 1 || *(unsigned char *)(*((void *)v92 + 16) + 16) != 16)
  {
    v112[0] = a2;
    uint64_t v14 = *this;
    if (!*this) {
      return 0;
    }
    int v64 = "Access size field must be a constant";
    goto LABEL_102;
  }
  unsigned int v18 = 4;
  int v17 = 1;
LABEL_20:
  if (v7 != v18 + 1) {
    goto LABEL_21;
  }
  uint64_t v93 = (unsigned __int8 *)v8[v18];
  if (!v93 || *v93 != 1 || (uint64_t v94 = *((void *)v93 + 16), *(unsigned char *)(v94 + 16) != 16))
  {
    v112[0] = a2;
    uint64_t v14 = *this;
    if (!*this) {
      return 0;
    }
    int v64 = "Immutability tag on struct tag metadata must be a constant";
    goto LABEL_102;
  }
  unsigned int v95 = v11;
  unsigned int v96 = (llvm::APInt *)(v94 + 24);
  unsigned int v97 = *(_DWORD *)(v94 + 32);
  if (v97 > 0x40)
  {
    int v99 = llvm::APInt::countLeadingZerosSlowCase(v96);
    BOOL v100 = v99 == v97 || v99 == v97 - 1;
    unsigned int v11 = v95;
    if (v100) {
      goto LABEL_21;
    }
LABEL_184:
    v112[0] = a2;
    uint64_t v14 = *this;
    if (!*this) {
      return 0;
    }
    int v64 = "Immutability part of the struct tag metadata must be either 0 or 1";
    goto LABEL_102;
  }
  if (*(void *)v96 >= 2uLL) {
    goto LABEL_184;
  }
LABEL_21:
  if (!v9 || !v11)
  {
    uint64_t v102 = a2;
    sub_1CD5DB608(*this, &v102, &v111, &v110, &v109);
    return 0;
  }
  if (v17)
  {
    uint64_t v19 = -v7;
  }
  else
  {
    if (!llvm::TBAAVerifier::isValidScalarTBAANode((llvm::TBAAVerifier *)this, (const llvm::MDNode *)v11))
    {
      uint64_t v102 = a2;
      sub_1CD5DB69C(*this, &v102, &v111, &v109);
      return 0;
    }
    uint64_t v19 = -(uint64_t)*((unsigned int *)a3 + 2);
  }
  uint64_t v20 = *((void *)a3 + v19 + 2);
  if (!v20 || *(unsigned char *)v20 != 1 || (uint64_t v21 = *(void *)(v20 + 128), *(unsigned char *)(v21 + 16) != 16))
  {
    v112[0] = a2;
    uint64_t v14 = *this;
    if (!*this) {
      return 0;
    }
    int v64 = "Offset must be constant integer";
    goto LABEL_102;
  }
  unsigned int v108 = *(_DWORD *)(v21 + 32);
  if (v108 > 0x40) {
    operator new[]();
  }
  int v22 = 0;
  int v107 = *(void **)(v21 + 24);
  uint64_t v102 = (llvm::Value *)v106;
  int v103 = (llvm::Value *)v106;
  if (v17) {
    int v23 = 3;
  }
  else {
    int v23 = 1;
  }
  unsigned int v101 = v23;
  uint64_t v104 = 4;
  int v105 = 0;
  if (v17) {
    int v24 = 3;
  }
  else {
    int v24 = 2;
  }
  do
  {
    if (*((_DWORD *)v9 + 2) < 2u) {
      break;
    }
    unint64_t v25 = v103;
    uint64_t v26 = HIDWORD(v104);
    if (v103 == v102)
    {
      if (HIDWORD(v104))
      {
        unint64_t v27 = 0;
        uint64_t v28 = 8 * HIDWORD(v104);
        BOOL v29 = v103;
        do
        {
          if (*(llvm::Metadata **)v29 == v9) {
            goto LABEL_93;
          }
          if (*(void *)v29 == -2) {
            unint64_t v27 = (llvm::Metadata **)v29;
          }
          BOOL v29 = (llvm::Value *)((char *)v29 + 8);
          v28 -= 8;
        }
        while (v28);
        if (v27)
        {
          *unint64_t v27 = v9;
          --v105;
          goto LABEL_47;
        }
      }
      unsigned int v30 = v104;
      if (HIDWORD(v104) < v104)
      {
        ++HIDWORD(v104);
        *((void *)v103 + v26) = v9;
        goto LABEL_47;
      }
    }
    else
    {
      unsigned int v30 = v104;
    }
    if (3 * v30 <= 4 * (HIDWORD(v104) - v105))
    {
      if (v30 >= 0x40) {
        v30 *= 2;
      }
      else {
        unsigned int v30 = 128;
      }
LABEL_110:
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v102, v30);
      unsigned int v30 = v104;
      unint64_t v25 = v103;
      goto LABEL_73;
    }
    if (v30 - HIDWORD(v104) < v30 >> 3) {
      goto LABEL_110;
    }
LABEL_73:
    unsigned int v50 = v30 - 1;
    unsigned int v51 = (v30 - 1) & ((v9 >> 4) ^ (v9 >> 9));
    BOOL v52 = (llvm::Metadata **)((char *)v25 + 8 * v51);
    uint64_t v53 = *v52;
    if (*v52 != (llvm::Metadata *)-1)
    {
      int v54 = 0;
      int v55 = 1;
      while (v53 != v9)
      {
        if (v54) {
          BOOL v56 = 0;
        }
        else {
          BOOL v56 = v53 == (llvm::Metadata *)-2;
        }
        if (v56) {
          int v54 = v52;
        }
        unsigned int v57 = v51 + v55++;
        unsigned int v51 = v57 & v50;
        BOOL v52 = (llvm::Metadata **)((char *)v25 + 8 * (v57 & v50));
        uint64_t v53 = *v52;
        if (*v52 == (llvm::Metadata *)-1) {
          goto LABEL_85;
        }
      }
LABEL_93:
      v115[0] = a2;
      BOOL v59 = *this;
      if (!*this)
      {
LABEL_94:
        uint64_t v15 = 0;
        goto LABEL_167;
      }
      uint64_t v65 = "Cycle detected in struct path";
LABEL_105:
      v112[0] = (llvm::Value *)v65;
      __int16 v113 = 259;
      sub_1CD5DBD0C(v59, (llvm::Twine *)v112, v115, &v111);
      goto LABEL_94;
    }
    int v54 = 0;
LABEL_85:
    if (v54) {
      int v58 = v54;
    }
    else {
      int v58 = v52;
    }
    if (*v58 == v9) {
      goto LABEL_93;
    }
    if (*v58 == (llvm::Metadata *)-2) {
      --v105;
    }
    else {
      ++HIDWORD(v104);
    }
    uint64_t *v58 = v9;
LABEL_47:
    unint64_t v31 = llvm::TBAAVerifier::verifyTBAABaseNode((llvm::TBAAVerifier *)this, a2, v9, v17);
    unint64_t v32 = HIDWORD(v31);
    LODWORD(v114) = HIDWORD(v31);
    if ((_BYTE)v31) {
      goto LABEL_94;
    }
    unsigned int v33 = v109;
    BOOL v34 = v9 == v109;
    BOOL isValidScalarTBAANode = llvm::TBAAVerifier::isValidScalarTBAANode((llvm::TBAAVerifier *)this, v9);
    uint64_t v36 = v108;
    if (isValidScalarTBAANode || v9 == v33)
    {
      if (v108 >= 0x41
        && v36 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v107) > 0x40)
      {
        goto LABEL_144;
      }
      int v37 = v107;
      if (v36 < 0x41) {
        int v37 = &v107;
      }
      if (*v37)
      {
LABEL_144:
        v112[0] = a2;
        v115[0] = (llvm::Value *)&v107;
        sub_1CD5DB720(*this, v112, &v111, v115);
        goto LABEL_94;
      }
    }
    if (v36 != v32)
    {
      if (v32)
      {
        if (v32 == -1) {
          char v91 = v17;
        }
        else {
          char v91 = 0;
        }
        if ((v91 & 1) == 0) {
          goto LABEL_179;
        }
      }
      else
      {
        if (v36 >= 0x41
          && v36 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v107) > 0x40)
        {
          goto LABEL_179;
        }
        int v98 = v107;
        if (v36 < 0x41) {
          int v98 = &v107;
        }
        if (*v98)
        {
LABEL_179:
          v112[0] = a2;
          LODWORD(v115[0]) = v36;
          sub_1CD5DB7A4(*this, v112, &v111, (unsigned int *)&v114, (unsigned int *)v115);
          goto LABEL_94;
        }
      }
    }
    v22 |= v34;
    if (v17 & v22) {
      goto LABEL_166;
    }
    v112[0] = v9;
    uint64_t v38 = *((unsigned int *)v9 + 2);
    if (v38 == 2)
    {
      unsigned int v49 = (llvm::Metadata **)((char *)v9 - 8);
      goto LABEL_68;
    }
    uint64_t v39 = -v38;
    if (v101 >= v38)
    {
LABEL_63:
      unsigned int v46 = v38 - v24;
      uint64_t v47 = *(void *)(*((void *)v9 + (v38 - v24 + 1) - v38) + 128);
      if (v36 >= 0x41)
      {
        uint64_t v71 = 0;
        uint64_t v72 = v107;
        long long v73 = *(unint64_t **)(v47 + 24);
        unint64_t v74 = (unint64_t)(v36 + 63) >> 6;
        unint64_t v75 = v74;
        do
        {
          unint64_t v76 = *v73++;
          unint64_t v77 = *v72 - v76;
          BOOL v78 = *v72 < v76;
          unint64_t v79 = *v72 + ~v76;
          if (v71)
          {
            uint64_t v71 = v79 >= *v72;
          }
          else
          {
            unint64_t v79 = v77;
            uint64_t v71 = v78;
          }
          *v72++ = v79;
          --v75;
        }
        while (v75);
        v107[(v74 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
        uint64_t v39 = -(uint64_t)*((unsigned int *)v9 + 2);
      }
      else
      {
        unint64_t v48 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
        if (!v36) {
          unint64_t v48 = 0;
        }
        int v107 = (void *)(v48 & ((unint64_t)v107 - *(void *)(v47 + 24)));
      }
      unsigned int v49 = (llvm::Metadata **)((char *)v9 + 8 * v39 + 8 * v46);
      goto LABEL_68;
    }
    unsigned int v40 = (char *)v9 - 8 * v38;
    unsigned int v41 = v107;
    unsigned int v42 = v101;
    while (1)
    {
      uint64_t v43 = *(void *)(*(void *)&v40[8 * v42 + 8] + 128);
      uint64_t v44 = *(unsigned int *)(v43 + 32);
      if (v44 > 0x40)
      {
        uint64_t v66 = *(void *)(v43 + 24);
        unint64_t v67 = ((unint64_t)(v44 + 63) >> 3) & 0x3FFFFFF8;
        uint64_t v68 = v66 - 8;
        while (v67)
        {
          unint64_t v69 = *(void *)(v68 + v67);
          unint64_t v70 = *(void *)((char *)v107 + v67 - 8);
          v67 -= 8;
          BOOL v45 = v69 > v70;
          if (v69 != v70) {
            goto LABEL_61;
          }
        }
        goto LABEL_62;
      }
      BOOL v45 = *(void *)(v43 + 24) > (unint64_t)v107;
LABEL_61:
      if (v45) {
        break;
      }
LABEL_62:
      v42 += v24;
      if (v42 >= v38) {
        goto LABEL_63;
      }
    }
    if (v42 == v101)
    {
      uint64_t v114 = (llvm::APInt *)&v107;
      v115[0] = a2;
      sub_1CD5DB4A4(*this, v115, v112, &v114);
      break;
    }
    unsigned int v60 = v42 - v24;
    uint64_t v61 = *(void *)(*(void *)&v40[8 * (v42 - v24) + 8] + 128);
    if (v36 >= 0x41)
    {
      uint64_t v80 = 0;
      BOOL v81 = *(unint64_t **)(v61 + 24);
      unint64_t v82 = (unint64_t)(v36 + 63) >> 6;
      unint64_t v83 = v82;
      do
      {
        unint64_t v84 = *v81++;
        unint64_t v85 = *v41 - v84;
        BOOL v86 = *v41 < v84;
        unint64_t v87 = *v41 + ~v84;
        if (v80)
        {
          uint64_t v80 = v87 >= *v41;
        }
        else
        {
          unint64_t v87 = v85;
          uint64_t v80 = v86;
        }
        *v41++ = v87;
        --v83;
      }
      while (v83);
      v107[(v82 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
      uint64_t v39 = -(uint64_t)*((unsigned int *)v9 + 2);
    }
    else
    {
      unint64_t v62 = (unint64_t)v107 - *(void *)(v61 + 24);
      unint64_t v63 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
      if (!v36) {
        unint64_t v63 = 0;
      }
      int v107 = (void *)(v63 & v62);
    }
    unsigned int v49 = (llvm::Metadata **)((char *)v9 + 8 * v39 + 8 * v60);
LABEL_68:
    int v9 = *v49;
    std::string::size_type v110 = v9;
  }
  while (v9);
  if ((v22 & 1) == 0)
  {
    v115[0] = a2;
    BOOL v59 = *this;
    if (!*this) {
      goto LABEL_94;
    }
    uint64_t v65 = "Did not see access type in access path!";
    goto LABEL_105;
  }
LABEL_166:
  uint64_t v15 = 1;
LABEL_167:
  if (v103 != v102) {
    free(v103);
  }
  if (v108 >= 0x41 && v107) {
    MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
  }
  return v15;
}

void sub_1CC638728()
{
}

void sub_1CC6387C4(uint64_t a1, llvm::GlobalValue *this)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v4 = *((unsigned __int8 *)this + 16);
  if (v4 == 3)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 0) {
      goto LABEL_15;
    }
    int v6 = *((_DWORD *)this + 8);
LABEL_7:
    if ((v6 & 0xF) != 0 && (v6 & 0xF) != 9)
    {
      BOOL v56 = "Global is external, but doesn't have external or weak linkage!";
      goto LABEL_158;
    }
    goto LABEL_15;
  }
  if (!*((unsigned char *)this + 16))
  {
    if (*((llvm::GlobalValue **)this + 9) != (llvm::GlobalValue *)((char *)this + 72)) {
      goto LABEL_15;
    }
    int v6 = *((_DWORD *)this + 8);
    if ((v6 & 0x800000) != 0) {
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if (v4 != 2)
  {
    int v5 = *((_DWORD *)this + 8);
    goto LABEL_17;
  }
LABEL_15:
  int v5 = *((_DWORD *)this + 8);
  if ((v5 & 0x3F0000) != 0 && ((BYTE2(v5) & 0x3F) - 1) >= 0x21u)
  {
    BOOL v56 = "huge alignment values are unsupported";
    goto LABEL_158;
  }
LABEL_17:
  int v8 = v5 & 0xF;
  if (v4 != 3 && v8 == 6)
  {
    BOOL v56 = "Only global variables can have appending linkage!";
    goto LABEL_158;
  }
  if (v8 == 1)
  {
    if (v4 == 2) {
      goto LABEL_42;
    }
    AliaseeObject = this;
    if (v4 == 1)
    {
      AliaseeObject = (llvm::GlobalValue *)llvm::GlobalAlias::getAliaseeObject(this);
      if (!AliaseeObject) {
        goto LABEL_42;
      }
    }
    goto LABEL_41;
  }
  if (v8 == 6)
  {
    if (v4 == 3) {
      int v10 = this;
    }
    else {
      int v10 = 0;
    }
    if (v4 != 3 || *(unsigned char *)(*((void *)this + 3) + 8) != 17)
    {
      int v64 = "Only global arrays can have appending linkage!";
      __int16 v67 = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v64);
      if (v4 == 3 && *(void *)a1)
      {
        unsigned int v11 = (llvm::raw_ostream **)a1;
        uint64_t v12 = v10;
LABEL_161:
        sub_1CD5DBED0(v11, v12);
        return;
      }
      return;
    }
  }
  else if (v4 != 3)
  {
    if (*((unsigned char *)this + 16)) {
      goto LABEL_42;
    }
    if (*((llvm::GlobalValue **)this + 9) != (llvm::GlobalValue *)((char *)this + 72)) {
      goto LABEL_42;
    }
    AliaseeObject = this;
    if ((v5 & 0x800000) != 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  AliaseeObject = this;
  if ((*((_DWORD *)this + 5) & 0x7FFFFFF) != 0) {
    goto LABEL_42;
  }
LABEL_41:
  if (*((void *)AliaseeObject + 6))
  {
    BOOL v56 = "Declaration may not be in a Comdat!";
    goto LABEL_158;
  }
LABEL_42:
  int v14 = *((_DWORD *)this + 8);
  if ((v14 & 0x300) != 0x100) {
    goto LABEL_53;
  }
  if ((v14 & 0x4000) != 0)
  {
    BOOL v56 = "GlobalValue with DLLImport Storage is dso_local!";
    goto LABEL_158;
  }
  if (*((unsigned char *)this + 16))
  {
    if (*((unsigned char *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0) {
      goto LABEL_50;
    }
  }
  else if ((v14 & 0x800000) == 0 && *((llvm::GlobalValue **)this + 9) == (llvm::GlobalValue *)((char *)this + 72))
  {
LABEL_50:
    if ((v14 & 0xF) == 0) {
      goto LABEL_53;
    }
    char hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(this);
    int v14 = *((_DWORD *)this + 8);
    if (hasExternalWeakLinkage) {
      goto LABEL_53;
    }
  }
  if ((v14 & 0xF) != 1)
  {
    BOOL v56 = "Global is marked as dllimport, but not external";
    goto LABEL_158;
  }
LABEL_53:
  if ((v14 & 0xFu) - 7 < 2)
  {
LABEL_57:
    if ((v14 & 0x4000) != 0) {
      goto LABEL_58;
    }
    BOOL v56 = "GlobalValue with local linkage or non-default visibility must be dso_local!";
LABEL_158:
    int v64 = v56;
    __int16 v67 = 259;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)&v64);
    if (*(void *)a1)
    {
      unsigned int v11 = (llvm::raw_ostream **)a1;
      uint64_t v12 = this;
      goto LABEL_161;
    }
    return;
  }
  if ((v14 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(this) & 1) == 0)
  {
    int v14 = *((_DWORD *)this + 8);
    goto LABEL_57;
  }
LABEL_58:
  uint64_t v16 = *(void *)(a1 + 1536);
  uint64_t v17 = *(unsigned int *)(a1 + 1548);
  if (v16 == *(void *)(a1 + 1528))
  {
    if (v17)
    {
      unsigned int v18 = 0;
      uint64_t v19 = 8 * v17;
      uint64_t v20 = *(llvm::GlobalValue ***)(a1 + 1536);
      do
      {
        if (*v20 == this) {
          return;
        }
        if (*v20 == (llvm::GlobalValue *)-2) {
          unsigned int v18 = v20;
        }
        ++v20;
        v19 -= 8;
      }
      while (v19);
      if (v18)
      {
        *unsigned int v18 = this;
        --*(_DWORD *)(a1 + 1552);
        goto LABEL_90;
      }
    }
    unsigned int v21 = *(_DWORD *)(a1 + 1544);
    if (v17 < v21)
    {
      *(_DWORD *)(a1 + 1548) = v17 + 1;
      *(void *)(v16 + 8 * v17) = this;
      goto LABEL_90;
    }
  }
  else
  {
    unsigned int v21 = *(_DWORD *)(a1 + 1544);
  }
  if (3 * v21 <= 4 * ((int)v17 - *(_DWORD *)(a1 + 1552)))
  {
    if (v21 >= 0x40) {
      v21 *= 2;
    }
    else {
      unsigned int v21 = 128;
    }
  }
  else if (v21 - v17 >= v21 >> 3)
  {
    goto LABEL_71;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 1528), v21);
  unsigned int v21 = *(_DWORD *)(a1 + 1544);
  uint64_t v16 = *(void *)(a1 + 1536);
LABEL_71:
  unsigned int v22 = v21 - 1;
  unsigned int v23 = (v21 - 1) & ((this >> 4) ^ (this >> 9));
  int v24 = (llvm::GlobalValue **)(v16 + 8 * v23);
  unint64_t v25 = *v24;
  if (*v24 != (llvm::GlobalValue *)-1)
  {
    uint64_t v26 = 0;
    int v27 = 1;
    while (v25 != this)
    {
      if (v26) {
        BOOL v28 = 0;
      }
      else {
        BOOL v28 = v25 == (llvm::GlobalValue *)-2;
      }
      if (v28) {
        uint64_t v26 = v24;
      }
      unsigned int v29 = v23 + v27++;
      unsigned int v23 = v29 & v22;
      int v24 = (llvm::GlobalValue **)(v16 + 8 * (v29 & v22));
      unint64_t v25 = *v24;
      if (*v24 == (llvm::GlobalValue *)-1) {
        goto LABEL_83;
      }
    }
    return;
  }
  uint64_t v26 = 0;
LABEL_83:
  if (v26) {
    unsigned int v30 = v26;
  }
  else {
    unsigned int v30 = v24;
  }
  if (*v30 != this)
  {
    if (*v30 == (llvm::GlobalValue *)-2) {
      --*(_DWORD *)(a1 + 1552);
    }
    else {
      ++*(_DWORD *)(a1 + 1548);
    }
    llvm::raw_ostream *v30 = this;
LABEL_90:
    int v64 = v66;
    uint64_t v65 = 0x600000000;
    sub_1CC63C06C((uint64_t)&v64, (uint64_t)v66, *((void *)this + 1));
    unsigned int v31 = v65;
    if (!v65)
    {
LABEL_149:
      if (v64 != v66) {
        free(v64);
      }
      return;
    }
    while (1)
    {
      uint64_t v32 = *((void *)v64 + v31 - 1);
      LODWORD(v65) = v31 - 1;
      uint64_t v33 = *(void *)(a1 + 1536);
      uint64_t v34 = *(unsigned int *)(a1 + 1548);
      if (v33 == *(void *)(a1 + 1528))
      {
        if (v34)
        {
          int v35 = 0;
          uint64_t v36 = 8 * v34;
          int v37 = *(void **)(a1 + 1536);
          while (*v37 != v32)
          {
            if (*v37 == -2) {
              int v35 = v37;
            }
            ++v37;
            v36 -= 8;
            if (!v36)
            {
              if (!v35) {
                goto LABEL_99;
              }
              *int v35 = v32;
              --*(_DWORD *)(a1 + 1552);
              goto LABEL_123;
            }
          }
          goto LABEL_141;
        }
LABEL_99:
        unsigned int v38 = *(_DWORD *)(a1 + 1544);
        if (v34 < v38)
        {
          *(_DWORD *)(a1 + 1548) = v34 + 1;
          *(void *)(v33 + 8 * v34) = v32;
          goto LABEL_123;
        }
      }
      else
      {
        unsigned int v38 = *(_DWORD *)(a1 + 1544);
      }
      if (3 * v38 <= 4 * ((int)v34 - *(_DWORD *)(a1 + 1552))) {
        break;
      }
      if (v38 - v34 < v38 >> 3) {
        goto LABEL_148;
      }
LABEL_104:
      unsigned int v39 = v38 - 1;
      unsigned int v40 = (v38 - 1) & ((v32 >> 4) ^ (v32 >> 9));
      unsigned int v41 = (void *)(v33 + 8 * v40);
      uint64_t v42 = *v41;
      if (*v41 != -1)
      {
        uint64_t v43 = 0;
        int v44 = 1;
        while (v42 != v32)
        {
          if (v43) {
            BOOL v45 = 0;
          }
          else {
            BOOL v45 = v42 == -2;
          }
          if (v45) {
            uint64_t v43 = v41;
          }
          unsigned int v46 = v40 + v44++;
          unsigned int v40 = v46 & v39;
          unsigned int v41 = (void *)(v33 + 8 * (v46 & v39));
          uint64_t v42 = *v41;
          if (*v41 == -1) {
            goto LABEL_116;
          }
        }
        goto LABEL_141;
      }
      uint64_t v43 = 0;
LABEL_116:
      if (v43) {
        uint64_t v47 = v43;
      }
      else {
        uint64_t v47 = v41;
      }
      if (*v47 == v32) {
        goto LABEL_141;
      }
      if (*v47 == -2) {
        --*(_DWORD *)(a1 + 1552);
      }
      else {
        ++*(_DWORD *)(a1 + 1548);
      }
      void *v47 = v32;
LABEL_123:
      unsigned int v48 = *(unsigned __int8 *)(v32 + 16);
      if (v48 <= 0x1B) {
        unsigned int v49 = 0;
      }
      else {
        unsigned int v49 = (llvm::Value *)v32;
      }
      unint64_t v63 = v49;
      if (v49)
      {
        uint64_t v50 = *((void *)v49 + 5);
        if (v50 && (unsigned int v51 = *(llvm::Value **)(v50 + 56)) != 0)
        {
          uint64_t v52 = *((void *)v51 + 5);
          if (v52 != *(void *)(a1 + 8))
          {
            unsigned int v60 = *(llvm::Value **)(a1 + 8);
            v61[0] = "Global is referenced in a different module!";
            __int16 v62 = 259;
            uint64_t v58 = v52;
            BOOL v59 = v51;
            sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v61);
            if (*(void *)a1) {
              sub_1CD5DC040((llvm::raw_ostream **)a1, this, (uint64_t *)&v60, &v63, &v59, &v58);
            }
          }
        }
        else
        {
          __int16 v62 = 259;
          unsigned int v60 = *(llvm::Value **)(a1 + 8);
          v61[0] = "Global is referenced by parentless instruction!";
          sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v61);
          if (*(void *)a1) {
            sub_1CD5DBF64((llvm::raw_ostream **)a1, this, (uint64_t *)&v60, &v63);
          }
        }
      }
      else
      {
        if (v48) {
          uint64_t v53 = 0;
        }
        else {
          uint64_t v53 = (llvm::Value *)v32;
        }
        unsigned int v60 = v53;
        if (v53)
        {
          uint64_t v54 = *((void *)v53 + 5);
          uint64_t v55 = *(void *)(a1 + 8);
          if (v54 != v55)
          {
            v61[0] = "Global is used by function in a different module";
            __int16 v62 = 259;
            uint64_t v58 = v55;
            BOOL v59 = this;
            uint64_t v57 = v54;
            sub_1CD5DBC7C((llvm::raw_ostream *)a1, (llvm::Twine *)v61, &v59, &v58, &v60, &v57);
          }
        }
        else
        {
          sub_1CC63C06C((uint64_t)&v64, (uint64_t)v64 + 8 * v65, *(void *)(v32 + 8));
        }
      }
LABEL_141:
      unsigned int v31 = v65;
      if (!v65) {
        goto LABEL_149;
      }
    }
    if (v38 >= 0x40) {
      v38 *= 2;
    }
    else {
      unsigned int v38 = 128;
    }
LABEL_148:
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 1528), v38);
    unsigned int v38 = *(_DWORD *)(a1 + 1544);
    uint64_t v33 = *(void *)(a1 + 1536);
    goto LABEL_104;
  }
}

void sub_1CC638F10(unint64_t a1, uint64_t a2, uint64_t a3, llvm::Value *a4, char a5, char a6)
{
  uint64_t v116 = a2;
  v117[0] = a3;
  uint64_t v115 = a4;
  if (!a3) {
    return;
  }
  uint64_t v6 = a3;
  uint64_t v8 = *(void *)(a1 + 1248);
  uint64_t v9 = *(unsigned int *)(a1 + 1260);
  if (v8 == *(void *)(a1 + 1240))
  {
    if (v9)
    {
      int v10 = 0;
      uint64_t v11 = 8 * v9;
      uint64_t v12 = *(uint64_t **)(a1 + 1248);
      while (*v12 != v6)
      {
        if (*v12 == -2) {
          int v10 = v12;
        }
        ++v12;
        v11 -= 8;
        uint64_t v6 = a3;
        if (!v11)
        {
          if (!v10) {
            goto LABEL_10;
          }
          uint64_t *v10 = a3;
          --*(_DWORD *)(a1 + 1264);
          goto LABEL_34;
        }
      }
      goto LABEL_45;
    }
LABEL_10:
    unsigned int v13 = *(_DWORD *)(a1 + 1256);
    if (v9 < v13)
    {
      *(_DWORD *)(a1 + 1260) = v9 + 1;
      *(void *)(v8 + 8 * v9) = v6;
      goto LABEL_34;
    }
  }
  else
  {
    unsigned int v13 = *(_DWORD *)(a1 + 1256);
  }
  if (3 * v13 <= 4 * ((int)v9 - *(_DWORD *)(a1 + 1264)))
  {
    if (v13 >= 0x40) {
      v13 *= 2;
    }
    else {
      unsigned int v13 = 128;
    }
  }
  else if (v13 - v9 >= v13 >> 3)
  {
    goto LABEL_15;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 1240), v13);
  unsigned int v13 = *(_DWORD *)(a1 + 1256);
  uint64_t v8 = *(void *)(a1 + 1248);
LABEL_15:
  unsigned int v14 = v13 - 1;
  unsigned int v15 = (v13 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  uint64_t v16 = (uint64_t *)(v8 + 8 * v15);
  uint64_t v17 = *v16;
  if (*v16 != -1)
  {
    unsigned int v18 = 0;
    int v19 = 1;
    while (v17 != v6)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == -2;
      }
      if (v20) {
        unsigned int v18 = v16;
      }
      unsigned int v21 = v15 + v19++;
      unsigned int v15 = v21 & v14;
      uint64_t v16 = (uint64_t *)(v8 + 8 * (v21 & v14));
      uint64_t v17 = *v16;
      uint64_t v6 = a3;
      if (*v16 == -1) {
        goto LABEL_27;
      }
    }
    goto LABEL_45;
  }
  unsigned int v18 = 0;
LABEL_27:
  if (v18) {
    unsigned int v22 = v18;
  }
  else {
    unsigned int v22 = v16;
  }
  if (*v22 != v6)
  {
    if (*v22 == -2) {
      --*(_DWORD *)(a1 + 1264);
    }
    else {
      ++*(_DWORD *)(a1 + 1260);
    }
    uint64_t v6 = a3;
    *unsigned int v22 = a3;
LABEL_34:
    if (!llvm::AttributeList::hasParentContext((llvm::AttributeList *)v117, *(llvm::LLVMContext **)(a1 + 184)))
    {
      v111[0] = (uint64_t *)"Attribute list does not match Module context!";
      __int16 v114 = 259;
      __p[0] = v117;
      sub_1CD5DC1F4((llvm::raw_ostream *)a1, (llvm::Twine *)v111, (llvm::AttributeList **)__p, &v115);
      return;
    }
    uint64_t v23 = *(unsigned int *)(v6 + 8);
    if (v23)
    {
      int v24 = (uint64_t *)(a3 + 40);
      uint64_t v25 = a3 + 40 + 8 * v23;
      do
      {
        if (*v24)
        {
          if (!llvm::AttributeSet::hasParentContext((llvm::AttributeSet *)v24, *(llvm::LLVMContext **)(a1 + 184)))
          {
            v111[0] = (uint64_t *)"Attribute set does not match Module context!";
            __int16 v114 = 259;
            __p[0] = v24;
            sub_1CD5DC268((llvm::raw_ostream *)a1, (llvm::Twine *)v111, (llvm::AttributeSetNode ***)__p, &v115);
            return;
          }
          uint64_t v26 = *v24;
          if (*v24)
          {
            uint64_t v27 = *(unsigned int *)(v26 + 8);
            if (v27)
            {
              BOOL v28 = (char *)(v26 + 48);
              uint64_t v29 = 8 * v27;
              do
              {
                if (!llvm::Attribute::hasParentContext((unsigned int **)v28, *(llvm::LLVMContext **)(a1 + 184)))
                {
                  v111[0] = (uint64_t *)"Attribute does not match Module context!";
                  __int16 v114 = 259;
                  __p[0] = v28;
                  sub_1CD5DC2DC((llvm::raw_ostream *)a1, (llvm::Twine *)v111, (llvm::Attribute **)__p, &v115);
                  return;
                }
                v28 += 8;
                v29 -= 8;
              }
              while (v29);
            }
          }
        }
        ++v24;
      }
      while (v24 != (uint64_t *)v25);
    }
  }
LABEL_45:
  uint64_t v30 = a3;
  if (*(_DWORD *)(a3 + 8) < 2u)
  {
    uint64_t v31 = 0;
    goto LABEL_47;
  }
  uint64_t v31 = *(void *)(a3 + 48);
  if (v31)
  {
    uint64_t v54 = *(unsigned int *)(v31 + 8);
    if (v54)
    {
      uint64_t v55 = (uint64_t *)(v31 + 48);
      uint64_t v56 = 8 * v54;
      while (1)
      {
        uint64_t v57 = *v55;
        uint64_t v110 = v57;
        if (!v57) {
          goto LABEL_104;
        }
        if (*(unsigned char *)(v57 + 8) != 2) {
          break;
        }
LABEL_105:
        ++v55;
        v56 -= 8;
        if (!v56) {
          goto LABEL_47;
        }
      }
      LODWORD(v57) = *(_DWORD *)(v57 + 12);
LABEL_104:
      if ((byte_1CFAC7B70[(v57 - 1)] & 4) == 0)
      {
        llvm::Attribute::getAsString((llvm::Attribute *)&v110, 0, &v106);
        int v90 = std::string::insert(&v106, 0, "Attribute '");
        std::string::size_type v91 = v90->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
        v107.__r_.__value_.__r.__words[2] = v91;
        v90->__r_.__value_.__l.__size_ = 0;
        v90->__r_.__value_.__r.__words[2] = 0;
        v90->__r_.__value_.__r.__words[0] = 0;
        unsigned int v88 = "' does not apply to function return values";
LABEL_195:
        unsigned int v92 = std::string::append(&v107, v88);
        std::string::size_type v93 = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)__n128 __p = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        std::string::size_type v109 = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        __int16 v114 = 260;
        v111[0] = (uint64_t *)__p;
        sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v111);
        if (*(void *)a1 && v115) {
          sub_1CD5DBED0((llvm::raw_ostream **)a1, v115);
        }
        if (SHIBYTE(v109) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v107.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v106.__r_.__value_.__l.__data_);
        }
        return;
      }
      goto LABEL_105;
    }
  }
LABEL_47:
  sub_1CC63C29C((llvm::raw_ostream *)a1, v31, **(void **)(a2 + 16), v115);
  int v32 = *(_DWORD *)(a2 + 12);
  uint64_t v33 = (v32 - 1);
  if (v32 != 1)
  {
    unint64_t v34 = 0;
    int v35 = 0;
    int v36 = 0;
    int v37 = 0;
    int v38 = 0;
    uint64_t v102 = 0;
    while (1)
    {
      unsigned int v39 = *(llvm::Type **)(*(void *)(a2 + 16) + 8 * v34 + 8);
      if ((v34 + 2) >= *(_DWORD *)(v30 + 8)) {
        break;
      }
      unsigned int v40 = *(unsigned char **)(a3 + 40 + 8 * (v34 + 2));
      if (a5)
      {
        sub_1CC63C29C((llvm::raw_ostream *)a1, (uint64_t)v40, *(void *)(*(void *)(a2 + 16) + 8 * v34 + 8), v115);
        if (!v40) {
          goto LABEL_74;
        }
      }
      else
      {
        if (!v40) {
          break;
        }
        if ((v40[13] & 2) != 0)
        {
          uint64_t v53 = "immarg attribute only applies to intrinsics";
          goto LABEL_222;
        }
        if ((a6 & 1) == 0 && (v40[20] & 0x40) != 0)
        {
          uint64_t v53 = "Attribute 'elementtype' can only be applied to intrinsics and inline asm.";
LABEL_222:
          v111[0] = (uint64_t *)v53;
          __int16 v114 = 259;
          sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v111);
          if (*(void *)a1)
          {
            if (v115) {
              sub_1CD5DBED0((llvm::raw_ostream **)a1, v115);
            }
          }
          return;
        }
        sub_1CC63C29C((llvm::raw_ostream *)a1, (uint64_t)v40, *(void *)(*(void *)(a2 + 16) + 8 * v34 + 8), v115);
      }
      unsigned int v41 = v40[14] & 4;
      if ((v35 & (v41 >> 2)) == 1)
      {
        uint64_t v53 = "More than one parameter has attribute nest!";
        goto LABEL_222;
      }
      if ((v40[17] & 0x40) != 0)
      {
        if ((v102 & 0x100000000) != 0)
        {
          uint64_t v53 = "More than one parameter has attribute returned!";
          goto LABEL_222;
        }
        if (!llvm::Type::canLosslesslyBitCastTo(v39, **(llvm::Type ***)(a2 + 16)))
        {
          uint64_t v53 = "Incompatible argument and return types for 'returned' attribute";
          goto LABEL_222;
        }
        BYTE4(v102) = 1;
      }
      if ((v40[21] & 2) != 0)
      {
        if (v102)
        {
          uint64_t v53 = "Cannot have multiple 'sret' parameters!";
          goto LABEL_222;
        }
        if (v34 >= 2)
        {
          uint64_t v53 = "Attribute 'sret' is not on first or second parameter!";
          goto LABEL_222;
        }
        LOBYTE(v102) = 1;
      }
      int v42 = v40[20];
      if (v42 & v36)
      {
        uint64_t v53 = "Cannot have multiple 'swiftself' parameters!";
        goto LABEL_222;
      }
      char v43 = v40[19];
      unsigned int v44 = v43 & 0x40;
      if ((v37 & (v44 >> 6)) == 1)
      {
        uint64_t v53 = "Cannot have multiple 'swiftasync' parameters!";
        goto LABEL_222;
      }
      BOOL v45 = v43 < 0;
      if ((v45 & v38) == 1)
      {
        uint64_t v53 = "Cannot have multiple 'swifterror' parameters!";
        goto LABEL_222;
      }
      v35 |= v41 >> 2;
      v36 |= v42;
      v38 |= v45;
      v37 |= v44 >> 6;
      if ((v42 & 0x80) != 0)
      {
        uint64_t v30 = a3;
        if (v34 != *(_DWORD *)(a2 + 12) - 2)
        {
          uint64_t v53 = "inalloca isn't on the last parameter!";
          goto LABEL_222;
        }
      }
      else
      {
        uint64_t v30 = a3;
      }
LABEL_74:
      if (v33 == ++v34) {
        goto LABEL_75;
      }
    }
    sub_1CC63C29C((llvm::raw_ostream *)a1, 0, *(void *)(*(void *)(a2 + 16) + 8 * v34 + 8), v115);
    goto LABEL_74;
  }
LABEL_75:
  if (!*(_DWORD *)(v30 + 8)) {
    return;
  }
  uint64_t v46 = *(void *)(v30 + 40);
  if (!v46) {
    return;
  }
  sub_1CC63CB1C((llvm::raw_ostream *)a1, v46, v115);
  int v47 = *(_DWORD *)(v30 + 8);
  if (v47)
  {
    uint64_t v48 = *(void *)(v30 + 40);
    if (v48)
    {
      uint64_t v49 = *(unsigned int *)(v48 + 8);
      if (v49)
      {
        uint64_t v50 = (uint64_t *)(v48 + 48);
        for (uint64_t i = 8 * v49; i; i -= 8)
        {
          uint64_t v52 = *v50;
          uint64_t v110 = v52;
          if (v52)
          {
            if (*(unsigned char *)(v52 + 8) == 2) {
              goto LABEL_85;
            }
            LODWORD(v52) = *(_DWORD *)(v52 + 12);
          }
          if ((byte_1CFAC7B70[(v52 - 1)] & 1) == 0)
          {
            llvm::Attribute::getAsString((llvm::Attribute *)&v110, 0, &v106);
            BOOL v86 = std::string::insert(&v106, 0, "Attribute '");
            std::string::size_type v87 = v86->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
            v107.__r_.__value_.__r.__words[2] = v87;
            v86->__r_.__value_.__l.__size_ = 0;
            v86->__r_.__value_.__r.__words[2] = 0;
            v86->__r_.__value_.__r.__words[0] = 0;
            unsigned int v88 = "' does not apply to functions!";
            goto LABEL_195;
          }
LABEL_85:
          ++v50;
        }
      }
    }
  }
  if ((*(unsigned char *)(v30 + 17) & 0x10) != 0)
  {
    if ((*(unsigned char *)(v30 + 17) & 0x20) != 0)
    {
      uint64_t v53 = "Attributes 'readnone and readonly' are incompatible!";
      goto LABEL_222;
    }
    if ((*(unsigned char *)(v30 + 20) & 4) != 0)
    {
      uint64_t v53 = "Attributes 'readnone and writeonly' are incompatible!";
      goto LABEL_222;
    }
  }
  if ((*(unsigned char *)(v30 + 17) & 0x20) != 0 && (*(unsigned char *)(v30 + 20) & 4) != 0)
  {
    uint64_t v53 = "Attributes 'readonly and writeonly' are incompatible!";
    goto LABEL_222;
  }
  if ((*(unsigned char *)(v30 + 17) & 0x10) != 0)
  {
    if ((*(unsigned char *)(v30 + 13) & 0x10) != 0)
    {
      uint64_t v53 = "Attributes 'readnone and inaccessiblemem_or_argmemonly' are incompatible!";
      goto LABEL_222;
    }
    if ((*(unsigned char *)(v30 + 13) & 8) != 0)
    {
      uint64_t v53 = "Attributes 'readnone and inaccessiblememonly' are incompatible!";
      goto LABEL_222;
    }
  }
  if ((*(unsigned char *)(v30 + 15) & 8) == 0)
  {
    if ((*(unsigned char *)(v30 + 17) & 8) != 0)
    {
      uint64_t v53 = "Attribute 'optnone' requires 'noinline'!";
      goto LABEL_222;
    }
    goto LABEL_109;
  }
  if ((*(unsigned char *)(v30 + 12) & 4) != 0)
  {
    uint64_t v53 = "Attributes 'noinline and alwaysinline' are incompatible!";
    goto LABEL_222;
  }
  if ((*(unsigned char *)(v30 + 17) & 8) == 0)
  {
LABEL_109:
    if ((*(unsigned char *)(v30 + 13) & 0x40) == 0) {
      goto LABEL_115;
    }
    goto LABEL_114;
  }
  if ((*(unsigned char *)(v30 + 17) & 4) != 0)
  {
    uint64_t v53 = "Attributes 'optsize and optnone' are incompatible!";
    goto LABEL_222;
  }
  int v58 = *(char *)(v30 + 13);
  if (v58 < 0)
  {
    uint64_t v53 = "Attributes 'minsize and optnone' are incompatible!";
    goto LABEL_222;
  }
  if ((v58 & 0x40) != 0)
  {
LABEL_114:
    if ((*((_DWORD *)v115 + 8) & 0xC0) != 0x80)
    {
      uint64_t v53 = "Attribute 'jumptable' requires 'unnamed_addr'";
      goto LABEL_222;
    }
  }
LABEL_115:
  if ((*(unsigned char *)(v30 + 21) & 8) != 0)
  {
    if (v47 && (BOOL v81 = *(llvm::AttributeSetNode **)(v30 + 40)) != 0)
    {
      uint64_t AllocSizeArgs = llvm::AttributeSetNode::getAllocSizeArgs(v81);
      char v83 = v89;
    }
    else
    {
      uint64_t AllocSizeArgs = 0;
      char v83 = 1;
    }
    v111[0] = &v116;
    v111[1] = (uint64_t *)a1;
    uint64_t v112 = &v115;
    if (!sub_1CC63DBA0(v111, (uint64_t)"element size", 12, AllocSizeArgs)
      || v83 && !sub_1CC63DBA0(v111, (uint64_t)"number of elements", 18, HIDWORD(AllocSizeArgs)))
    {
      return;
    }
  }
  if (*(unsigned char *)(v30 + 22))
  {
    if (!*(_DWORD *)(v30 + 8)) {
      goto LABEL_172;
    }
    unint64_t v84 = *(llvm::AttributeSetNode **)(v30 + 40);
    if (!v84) {
      goto LABEL_172;
    }
    VScaleRangeMiuint64_t n = llvm::AttributeSetNode::getVScaleRangeMin(v84);
    if (!VScaleRangeMin)
    {
      v111[0] = (uint64_t *)"'vscale_range' minimum must be greater than 0";
      __int16 v114 = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v111);
      if (*(void *)a1)
      {
        if (v115) {
          sub_1CD5DBED0((llvm::raw_ostream **)a1, v115);
        }
      }
    }
    if (!*(_DWORD *)(v30 + 8)) {
      goto LABEL_172;
    }
    unsigned int v95 = *(llvm::AttributeSetNode **)(v30 + 40);
    if (!v95) {
      goto LABEL_172;
    }
    uint64_t VScaleRangeMax = llvm::AttributeSetNode::getVScaleRangeMax(v95);
    if ((VScaleRangeMax & 0xFF00000000) != 0 && VScaleRangeMin > VScaleRangeMax)
    {
      v111[0] = (uint64_t *)"'vscale_range' minimum cannot be greater than maximum";
      __int16 v114 = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v111);
      if (*(void *)a1 && v115) {
        sub_1CD5DBED0((llvm::raw_ostream **)a1, v115);
      }
      uint64_t v30 = a3;
    }
  }
  if (!*(_DWORD *)(v30 + 8)) {
    goto LABEL_172;
  }
  uint64_t v59 = *(void *)(v30 + 40);
  if (!v59) {
    goto LABEL_172;
  }
  int v60 = *(_DWORD *)(v59 + 40);
  if (!v60) {
    goto LABEL_172;
  }
  uint64_t v61 = *(void *)(v59 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v97 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v97 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v97;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v62 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xEEA3BE4ECE12391DLL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xEEA3BE4ECE12391DLL)) >> 47) ^ 0x81D3932BA3734B7BLL);
  unsigned int v63 = (-348639895 * ((v62 >> 47) ^ v62)) ^ 0x696F702D;
  for (int j = 1; ; ++j)
  {
    unsigned int v65 = v63 & (v60 - 1);
    uint64_t v66 = v61 + 24 * v65;
    __int16 v67 = *(void **)v66;
    if (*(void *)v66 == -1)
    {
      if ("frame-pointer" == (char *)-1) {
        goto LABEL_135;
      }
      goto LABEL_124;
    }
    if (v67 != (void *)-2) {
      break;
    }
    if ("frame-pointer" == (char *)-2) {
      goto LABEL_135;
    }
LABEL_124:
    if (v67 == (void *)-1) {
      goto LABEL_172;
    }
    unsigned int v63 = j + v65;
  }
  if (*(void *)(v66 + 8) != 13) {
    goto LABEL_124;
  }
  if (*v67 != 0x6F702D656D617266 || *(void *)((char *)v67 + 5) != 0x7265746E696F702DLL) {
    goto LABEL_124;
  }
LABEL_135:
  uint64_t v69 = v117[0];
  if (!v117[0]) {
    goto LABEL_227;
  }
  if (!*(_DWORD *)(v117[0] + 8)) {
    goto LABEL_226;
  }
  uint64_t v69 = *(void *)(v117[0] + 40);
  if (!v69)
  {
LABEL_227:
    uint64_t v79 = 0;
LABEL_228:
    __int16 v114 = 1283;
    v111[0] = (uint64_t *)"invalid value for 'frame-pointer' attribute: ";
    uint64_t v112 = (llvm::Value **)v69;
    uint64_t v113 = v79;
    sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v111);
    if (*(void *)a1 && v115) {
      sub_1CD5DBED0((llvm::raw_ostream **)a1, v115);
    }
    goto LABEL_172;
  }
  int v70 = *(_DWORD *)(v69 + 40);
  if (!v70)
  {
LABEL_226:
    uint64_t v69 = 0;
    goto LABEL_227;
  }
  uint64_t v71 = *(void *)(v69 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v98 = v71;
    int v99 = __cxa_guard_acquire(&qword_1EBCBE588);
    uint64_t v71 = v98;
    if (v99)
    {
      unint64_t v100 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v100 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v100;
      __cxa_guard_release(&qword_1EBCBE588);
      uint64_t v71 = v98;
    }
  }
  unint64_t v72 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xEEA3BE4ECE12391DLL)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xEEA3BE4ECE12391DLL)) >> 47) ^ 0x81D3932BA3734B7BLL);
  unsigned int v73 = (-348639895 * ((v72 >> 47) ^ v72)) ^ 0x696F702D;
  for (int k = 1; ; ++k)
  {
    unsigned int v75 = v73 & (v70 - 1);
    uint64_t v76 = v71 + 24 * v75;
    unint64_t v77 = *(void **)v76;
    if (*(void *)v76 == -1)
    {
      if ("frame-pointer" == (char *)-1) {
        goto LABEL_154;
      }
      goto LABEL_143;
    }
    if (v77 != (void *)-2) {
      break;
    }
    if ("frame-pointer" == (char *)-2) {
      goto LABEL_154;
    }
LABEL_143:
    if (v77 == (void *)-1) {
      goto LABEL_226;
    }
    unsigned int v73 = k + v75;
  }
  if (*(void *)(v76 + 8) != 13) {
    goto LABEL_143;
  }
  if (*v77 != 0x6F702D656D617266 || *(void *)((char *)v77 + 5) != 0x7265746E696F702DLL) {
    goto LABEL_143;
  }
LABEL_154:
  uint64_t v69 = *(void *)(v76 + 16);
  if (!v69) {
    goto LABEL_227;
  }
  uint64_t v79 = *(unsigned int *)(v69 + 16);
  v69 += *(unsigned int *)(v69 + 12) + 25;
  if (v79 == 8)
  {
    if (*(void *)v69 == 0x6661656C2D6E6F6ELL) {
      goto LABEL_172;
    }
    uint64_t v79 = 8;
    goto LABEL_228;
  }
  if (v79 == 4)
  {
    if (*(_DWORD *)v69 == 1701736302) {
      goto LABEL_172;
    }
    uint64_t v79 = 4;
    goto LABEL_228;
  }
  if (v79 != 3) {
    goto LABEL_228;
  }
  if (*(_WORD *)v69 != 27745 || *(unsigned char *)(v69 + 2) != 108)
  {
    uint64_t v79 = 3;
    goto LABEL_228;
  }
LABEL_172:
  uint64_t v85 = v117[0];
  sub_1CC63DC84(a1, v117[0], "patchable-function-prefix", 0x19uLL, v115);
  sub_1CC63DC84(a1, v85, "patchable-function-entry", 0x18uLL, v115);
  sub_1CC63DC84(a1, v85, "warn-stack-size", 0xFuLL, v115);
}

uint64_t sub_1CC639C78(uint64_t result, llvm::Value *a2)
{
  unsigned int v18 = a2;
  uint64_t v2 = *((void *)a2 + 1);
  if (!v2) {
    return result;
  }
  int v4 = (llvm::raw_ostream *)result;
  while (1)
  {
    uint64_t v5 = *(void *)(v2 + 24);
    uint64_t v17 = (llvm::Value *)v5;
    unsigned int v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 <= 0x3C)
    {
      if (v6 == 33) {
        goto LABEL_9;
      }
      if (v6 != 60) {
        goto LABEL_26;
      }
      goto LABEL_20;
    }
    if (v6 != 61)
    {
      if (v6 != 84)
      {
LABEL_26:
        uint64_t v16 = "swifterror value can only be loaded and stored from, or as a swifterror argument!";
        goto LABEL_28;
      }
LABEL_9:
      unsigned int v21 = a2;
      if (v6 == 84) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 2;
      }
      int v8 = *(_DWORD *)(v5 + 20);
      uint64_t v9 = v8 & 0x7FFFFFF;
      uint64_t v10 = v5 - 32 * v9;
      if (v8 < 0 && (uint64_t v15 = *(void *)(v10 - 8), (v15 & 0xFFFFFFFF0) != 0)) {
        uint64_t v11 = (*(_DWORD *)(v10 - 12) - *(_DWORD *)(v10 - v15));
      }
      else {
        uint64_t v11 = 0;
      }
      if (v10 != v5 - 32 * v7 - 32 * v11 - 32)
      {
        int v12 = 0;
        unint64_t v13 = (32 * v7 + 32 * v11) ^ 0xFFFFFFFFFFFFFFE0;
        uint64_t v14 = -32 * v9;
        while (1)
        {
          if (*(llvm::Value **)(v5 + v14) == a2)
          {
            BOOL result = llvm::CallBase::paramHasAttr(v5, v12, 63);
            if ((result & 1) == 0) {
              break;
            }
          }
          ++v12;
          v14 += 32;
          if (v13 == v14) {
            goto LABEL_20;
          }
        }
        v19[0] = "swifterror value when used in a callsite should be marked with swifterror attribute";
        __int16 v20 = 259;
        BOOL result = (uint64_t)sub_1CD5DC498(v4, (llvm::Twine *)v19, &v21, (llvm::Value *)v5);
      }
      goto LABEL_20;
    }
    if (*(llvm::Value **)(v5 - 32) != a2) {
      break;
    }
LABEL_20:
    uint64_t v2 = *(void *)(v2 + 8);
    if (!v2) {
      return result;
    }
  }
  uint64_t v16 = "swifterror value should be the second operand when used by stores";
LABEL_28:
  v19[0] = v16;
  __int16 v20 = 259;
  return (uint64_t)sub_1CD5DBC00(v4, (llvm::Twine *)v19, &v18, &v17);
}

void sub_1CC639E3C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 440);
  uint64_t v7 = *(unsigned int *)(a1 + 452);
  if (v6 == *(void *)(a1 + 432))
  {
    if (v7)
    {
      int v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = *(uint64_t **)(a1 + 440);
      do
      {
        if (*v10 == a2) {
          return;
        }
        if (*v10 == -2) {
          int v8 = v10;
        }
        ++v10;
        v9 -= 8;
      }
      while (v9);
      if (v8)
      {
        uint64_t *v8 = a2;
        --*(_DWORD *)(a1 + 456);
        goto LABEL_33;
      }
    }
    unsigned int v11 = *(_DWORD *)(a1 + 448);
    if (v7 < v11)
    {
      *(_DWORD *)(a1 + 452) = v7 + 1;
      *(void *)(v6 + 8 * v7) = a2;
      goto LABEL_33;
    }
  }
  else
  {
    unsigned int v11 = *(_DWORD *)(a1 + 448);
  }
  if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a1 + 456)))
  {
    if (v11 >= 0x40) {
      v11 *= 2;
    }
    else {
      unsigned int v11 = 128;
    }
  }
  else if (v11 - v7 >= v11 >> 3)
  {
    goto LABEL_14;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 432), v11);
  unsigned int v11 = *(_DWORD *)(a1 + 448);
  uint64_t v6 = *(void *)(a1 + 440);
LABEL_14:
  unsigned int v12 = v11 - 1;
  unsigned int v13 = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v14 = (uint64_t *)(v6 + 8 * v13);
  uint64_t v15 = *v14;
  if (*v14 != -1)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    while (v15 != a2)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -2;
      }
      if (v18) {
        uint64_t v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (uint64_t *)(v6 + 8 * (v19 & v12));
      uint64_t v15 = *v14;
      if (*v14 == -1) {
        goto LABEL_26;
      }
    }
    return;
  }
  uint64_t v16 = 0;
LABEL_26:
  if (v16) {
    __int16 v20 = v16;
  }
  else {
    __int16 v20 = v14;
  }
  if (*v20 != a2)
  {
    if (*v20 == -2) {
      --*(_DWORD *)(a1 + 456);
    }
    else {
      ++*(_DWORD *)(a1 + 452);
    }
    *__int16 v20 = a2;
LABEL_33:
    uint64_t v21 = *(void *)(a2 + 16);
    unsigned int v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFF8);
    if ((v21 & 4) != 0) {
      unsigned int v22 = (void *)*v22;
    }
    if (v22 != *(void **)(a1 + 184))
    {
      uint64_t v29 = "MDNode context does not match Module context!";
LABEL_479:
      v242[0] = v29;
      __int16 v243 = 259;
      sub_1CD5DBE68((llvm::raw_ostream *)a1, (llvm::Twine *)v242);
      if (*(void *)a1) {
        sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)a2);
      }
      return;
    }
    switch(*(unsigned char *)a2)
    {
      case 5:
        uint64_t v23 = *(unsigned int *)(a2 + 8);
        int v24 = (llvm::Metadata **)(a2 - 8 * v23);
        uint64_t v25 = *v24;
        if (!*v24 || (int v26 = *(unsigned __int8 *)v25, (v26 - 20) <= 0xFFFFFFFC))
        {
          uint64_t v241 = (llvm::Metadata *)a2;
          v242[0] = "location requires a valid scope";
          __int16 v243 = 259;
          uint64_t v240 = v25;
          int v103 = &v241;
          uint64_t v104 = &v240;
          goto LABEL_520;
        }
        if (v23 == 2)
        {
          uint64_t v27 = v24[1];
          uint64_t v241 = v27;
          if (v27)
          {
            if (*(unsigned char *)v27 != 5)
            {
              v242[0] = "inlined-at should be a location";
              __int16 v243 = 259;
              uint64_t v240 = (llvm::Metadata *)a2;
              int v103 = &v240;
              uint64_t v104 = &v241;
              goto LABEL_520;
            }
          }
        }
        if (v26 == 17 && (*((unsigned char *)v25 + 44) & 8) == 0)
        {
          BOOL v28 = "scope points into the type hierarchy";
          goto LABEL_460;
        }
        goto LABEL_462;
      case 6:
        sub_1CC63DF40((llvm::raw_ostream *)a1, (llvm::DIExpression *)a2);
        goto LABEL_462;
      case 7:
        sub_1CC63DFB0((llvm::raw_ostream *)a1, (unsigned int *)a2);
        goto LABEL_462;
      case 8:
        if (!*(_WORD *)(a2 + 2)) {
          goto LABEL_459;
        }
        goto LABEL_462;
      case 9:
        if (*(_WORD *)(a2 + 2) != 33) {
          goto LABEL_459;
        }
        unsigned int v30 = *(_DWORD *)(a1 + 804);
        if (v30 > 0x23 || ((1 << v30) & 0xC00004180) == 0)
        {
          uint64_t v213 = (void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
          if (!*v213 && !v213[2])
          {
            BOOL v28 = "Subrange must contain count or upperBound";
            goto LABEL_460;
          }
        }
        uint64_t v31 = (unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8));
        if (*v31)
        {
          if (v31[2])
          {
            BOOL v28 = "Subrange can have any one of count or upperBound";
            goto LABEL_460;
          }
          unsigned int v32 = **v31;
          BOOL v164 = v32 > 0x19;
          int v33 = (1 << v32) & 0x3000042;
          if (v164 || v33 == 0) {
            goto LABEL_549;
          }
        }
        unint64_t Count = llvm::DISubrange::getCount((llvm::DISubrange *)a2);
        if (Count >= 8 && (Count & 6) == 0)
        {
          unint64_t v36 = Count & 0xFFFFFFFFFFFFFFF8;
          unsigned int v37 = *(_DWORD *)((Count & 0xFFFFFFFFFFFFFFF8) + 32);
          uint64_t v38 = v37 > 0x40 ? **(void **)(v36 + 24) : (uint64_t)(*(void *)(v36 + 24) << -(char)v37) >> -(char)v37;
          if (v38 <= -2)
          {
            BOOL v28 = "invalid subrange count";
            goto LABEL_460;
          }
        }
        uint64_t v179 = v31[1];
        if (v179)
        {
          unsigned int v180 = *v179;
          BOOL v164 = v180 > 0x19;
          int v181 = (1 << v180) & 0x3000042;
          if (v164 || v181 == 0) {
            goto LABEL_540;
          }
        }
        size_t v183 = v31[2];
        if (v183)
        {
          unsigned int v184 = *v183;
          BOOL v164 = v184 > 0x19;
          int v185 = (1 << v184) & 0x3000042;
          if (v164 || v185 == 0) {
            goto LABEL_555;
          }
        }
        unsigned int v187 = v31[3];
        if (v187)
        {
          unsigned int v188 = *v187;
          BOOL v164 = v188 > 0x19;
          int v165 = (1 << v188) & 0x3000042;
          goto LABEL_357;
        }
        goto LABEL_462;
      case 0xA:
        if (*(_WORD *)(a2 + 2) != 40) {
          goto LABEL_459;
        }
        goto LABEL_462;
      case 0xB:
        unsigned int v39 = *(unsigned __int16 *)(a2 + 2);
        if (v39 > 0x3B || ((1 << v39) & 0x800001000040000) == 0) {
          goto LABEL_459;
        }
        goto LABEL_462;
      case 0xC:
        sub_1CC63E33C((llvm::raw_ostream **)a1, (unsigned int *)a2);
        int v40 = *(unsigned __int16 *)(a2 + 2);
        uint64_t v41 = (v40 - 13);
        if (v41 > 0x3E) {
          goto LABEL_458;
        }
        if (((1 << (v40 - 13)) & 0x442005002200820DLL) != 0) {
          goto LABEL_71;
        }
        if (v41 == 18)
        {
          char v43 = *(llvm::Metadata **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 32);
          if (v43)
          {
            int v226 = *(unsigned __int8 *)v43;
            if ((v226 - 11) >= 4 && v226 != 33)
            {
              uint64_t v219 = "invalid pointer to member type";
              goto LABEL_504;
            }
          }
        }
        else if (v41 == 19)
        {
          uint64_t v214 = *(llvm::Metadata **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
          uint64_t v241 = v214;
          if (v214)
          {
            int v215 = *(unsigned __int8 *)v214;
            char v216 = v215 == 11 ? v214 : 0;
            if (v215 != 13 || *((_WORD *)v214 + 1) != 4)
            {
              if (!v216
                || ((int v217 = *((_DWORD *)v216 + 13), (v217 - 5) >= 4) ? (v218 = v217 == 2) : (v218 = 1),
                    !v218))
              {
                v242[0] = "invalid set base type";
                __int16 v243 = 259;
                uint64_t v240 = (llvm::Metadata *)a2;
                int v103 = &v240;
                uint64_t v104 = &v241;
                goto LABEL_520;
              }
            }
          }
        }
        else
        {
LABEL_458:
          if (v40 != 17152) {
            goto LABEL_459;
          }
        }
LABEL_71:
        uint64_t v42 = a2 - 8 * *(unsigned int *)(a2 + 8);
        char v43 = *(llvm::Metadata **)(v42 + 8);
        if (v43)
        {
          int v44 = *(unsigned __int8 *)v43;
          BOOL v45 = (v44 - 11) < 0xB || v44 == 31;
          if (!v45 && v44 != 33)
          {
            uint64_t v219 = "invalid scope";
            goto LABEL_504;
          }
        }
        char v43 = *(llvm::Metadata **)(v42 + 24);
        if (v43)
        {
          int v46 = *(unsigned __int8 *)v43;
          if ((v46 - 11) >= 4 && v46 != 33)
          {
            uint64_t v219 = "invalid base type";
LABEL_504:
            uint64_t v241 = (llvm::Metadata *)a2;
            v242[0] = v219;
            __int16 v243 = 259;
            uint64_t v240 = v43;
            int v103 = &v241;
            uint64_t v104 = &v240;
            goto LABEL_520;
          }
        }
        if ((*(void *)(a2 + 52) & 0xFF00000000) != 0)
        {
          unsigned int v47 = v40 - 15;
          if (v47 > 0x33 || ((1 << v47) & 0x8000000000003) == 0)
          {
            BOOL v28 = "DWARF address space only applies to pointer or reference types";
            goto LABEL_460;
          }
        }
        goto LABEL_462;
      case 0xD:
        sub_1CC63E33C((llvm::raw_ostream **)a1, (unsigned int *)a2);
        unsigned int v48 = *(unsigned __int16 *)(a2 + 2);
        if (v48 > 0x33 || ((1 << v48) & 0x8080000880016) == 0) {
          goto LABEL_459;
        }
        uint64_t v49 = *(unsigned int *)(a2 + 8);
        uint64_t v50 = (void *)(a2 - 8 * v49);
        unsigned int v51 = (llvm::Metadata *)v50[1];
        if (v51)
        {
          int v52 = *(unsigned __int8 *)v51;
          BOOL v53 = (v52 - 11) < 0xB || v52 == 31;
          if (!v53 && v52 != 33)
          {
            uint64_t v220 = "invalid scope";
            goto LABEL_522;
          }
        }
        unsigned int v51 = (llvm::Metadata *)v50[3];
        if (v51)
        {
          int v54 = *(unsigned __int8 *)v51;
          if ((v54 - 11) >= 4 && v54 != 33)
          {
            uint64_t v220 = "invalid base type";
            goto LABEL_522;
          }
        }
        unsigned int v51 = (llvm::Metadata *)v50[4];
        if (v51 && *(unsigned char *)v51 != 4)
        {
          uint64_t v220 = "invalid composite elements";
LABEL_522:
          uint64_t v241 = (llvm::Metadata *)a2;
          v242[0] = v220;
          __int16 v243 = 259;
          uint64_t v240 = v51;
LABEL_455:
          sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v241, &v240);
          goto LABEL_462;
        }
        uint64_t v55 = (llvm::Metadata *)v50[5];
        if (v55)
        {
          int v56 = *(unsigned __int8 *)v55;
          if ((v56 - 11) >= 4 && v56 != 33)
          {
            uint64_t v241 = (llvm::Metadata *)a2;
            v242[0] = "invalid vtable holder";
            __int16 v243 = 259;
            uint64_t v240 = v55;
            goto LABEL_455;
          }
        }
        int v57 = *(_DWORD *)(a2 + 28);
        if ((~v57 & 0x6000) == 0 || (v57 & 0xC00000) == 0xC00000) {
          goto LABEL_420;
        }
        if ((v57 & 0x10) != 0)
        {
          BOOL v28 = "DIBlockByRefStruct on DICompositeType is no longer supported";
        }
        else
        {
          if ((v57 & 0x800) == 0 || v51 && *((_DWORD *)v51 + 2) == 1 && *(_WORD *)(*((void *)v51 - 1) + 2) == 33)
          {
            int v58 = (unsigned int *)v50[6];
            if (v58)
            {
              sub_1CC63E3AC((llvm::raw_ostream **)a1, (llvm::Metadata *)a2, v58);
              uint64_t v49 = *(unsigned int *)(a2 + 8);
              uint64_t v59 = -v49;
              unsigned int v48 = *(unsigned __int16 *)(a2 + 2);
            }
            else
            {
              uint64_t v59 = -v49;
            }
            uint64_t v172 = (void *)(a2 + 8 * v59);
            int v173 = (unsigned char *)v172[8];
            if (v173)
            {
              if (*v173 != 12 || v48 != 51)
              {
                std::string::size_type v204 = "discriminator can only appear on variant part";
                goto LABEL_538;
              }
              int64_t v174 = (void *)(a2 - 8 * v49);
              if (!v174[9])
              {
                if (!v174[10])
                {
                  if (!v174[11])
                  {
                    uint64_t v59 = -(uint64_t)v49;
                    goto LABEL_451;
                  }
                  goto LABEL_450;
                }
LABEL_536:
                std::string::size_type v204 = "associated can only appear in array type";
                goto LABEL_538;
              }
LABEL_517:
              std::string::size_type v204 = "dataLocation can only appear in array type";
              goto LABEL_538;
            }
            if (v172[9])
            {
              if (v48 != 1) {
                goto LABEL_517;
              }
            }
            else
            {
              if (!v172[10])
              {
LABEL_448:
                if (!*(void *)(a2 + 8 * v59 + 88))
                {
LABEL_451:
                  if (!*(void *)(a2 + 8 * v59 + 96) || v48 == 1) {
                    goto LABEL_462;
                  }
                  std::string::size_type v204 = "rank can only appear in array type";
LABEL_538:
                  v242[0] = v204;
                  __int16 v243 = 259;
                  sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)v242);
                  goto LABEL_462;
                }
                if (v48 == 1) {
                  goto LABEL_462;
                }
LABEL_450:
                std::string::size_type v204 = "allocated can only appear in array type";
                goto LABEL_538;
              }
              if (v48 != 1) {
                goto LABEL_536;
              }
            }
            uint64_t v59 = -(uint64_t)v49;
            goto LABEL_448;
          }
          BOOL v28 = "invalid vector, expected one element of type subrange";
        }
        goto LABEL_460;
      case 0xE:
        if (*(_WORD *)(a2 + 2) != 21) {
          goto LABEL_459;
        }
        int v60 = *(unsigned int **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 24);
        uint64_t v241 = (llvm::Metadata *)v60;
        if (!v60) {
          goto LABEL_263;
        }
        if (*(unsigned char *)v60 != 4)
        {
          v242[0] = "invalid composite elements";
          __int16 v243 = 259;
          uint64_t v240 = (llvm::Metadata *)a2;
          sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v240, &v241);
          goto LABEL_462;
        }
        uint64_t v61 = v60[2];
        if (v61)
        {
          uint64_t v62 = -2 * v61;
          do
          {
            unsigned int v63 = *(llvm::Metadata **)&v60[v62];
            uint64_t v240 = v63;
            if (v63)
            {
              int v64 = *(unsigned __int8 *)v63;
              if ((v64 - 11) >= 4 && v64 != 33)
              {
                v242[0] = "invalid subroutine type ref";
                __int16 v243 = 259;
                uint64_t v239 = (llvm::Metadata *)a2;
                sub_1CD5DC6E0((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v239, &v241, &v240);
                goto LABEL_462;
              }
            }
            v62 += 2;
          }
          while (v62 * 4);
        }
LABEL_263:
        int v136 = *(_DWORD *)(a2 + 28);
        if ((~v136 & 0x6000) == 0 || (v136 & 0xC00000) == 0xC00000) {
          goto LABEL_420;
        }
        goto LABEL_462;
      case 0xF:
        if (*(_WORD *)(a2 + 2) != 41) {
          goto LABEL_459;
        }
        if (!*(unsigned char *)(a2 + 40)) {
          goto LABEL_462;
        }
        int v65 = *(_DWORD *)(a2 + 24);
        if (v65 >= 4)
        {
          BOOL v28 = "invalid checksum kind";
          goto LABEL_460;
        }
        uint64_t v66 = *(uint64_t **)(*(void *)(a2 + 32) + 8);
        unsigned int v67 = v65 - 1;
        if (v67 > 2) {
          uint64_t v68 = 0;
        }
        else {
          uint64_t v68 = qword_1CFB1B790[v67];
        }
        uint64_t v177 = *v66;
        BOOL v175 = v66 + 3;
        uint64_t v176 = v177;
        if (v177 != v68)
        {
          BOOL v28 = "invalid checksum length";
          goto LABEL_460;
        }
        if (!v176) {
          goto LABEL_462;
        }
        uint64_t v178 = 0;
        while (word_1CFAC4A4C[*((unsigned __int8 *)v175 + v178)] != -1)
        {
          if (v176 == ++v178) {
            goto LABEL_462;
          }
        }
        if (v178 != -1)
        {
          BOOL v28 = "invalid checksum";
          goto LABEL_460;
        }
        goto LABEL_462;
      case 0x10:
        if ((*(unsigned char *)(a2 + 1) & 0x7F) != 1)
        {
          BOOL v28 = "compile units must be distinct";
          goto LABEL_460;
        }
        if (*(_WORD *)(a2 + 2) != 17) {
          goto LABEL_459;
        }
        uint64_t v69 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
        if (!v69 || *(unsigned char *)v69 != 15)
        {
          uint64_t v241 = (llvm::Metadata *)a2;
          v242[0] = "invalid file";
          __int16 v243 = 259;
          uint64_t v240 = (llvm::Metadata *)v69;
          uint64_t v221 = &v241;
LABEL_552:
          uint64_t v229 = &v240;
          goto LABEL_530;
        }
        uint64_t v70 = *(void *)(v69 - 8 * *(unsigned int *)(v69 + 8));
        if (!v70 || !**(void **)(v70 + 8))
        {
          uint64_t v241 = (llvm::Metadata *)a2;
          v242[0] = "invalid filename";
          __int16 v243 = 259;
          uint64_t v240 = (llvm::Metadata *)v69;
          sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v241, &v240);
          goto LABEL_462;
        }
        *(_DWORD *)(a1 + 804) = *(_DWORD *)(a2 + 24);
        sub_1CC63E46C(a1, a2, *(unsigned char *)(v69 + 56));
        if (*(_DWORD *)(a2 + 36) >= 4u)
        {
          BOOL v28 = "invalid emission kind";
          goto LABEL_460;
        }
        uint64_t v71 = (void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
        unint64_t v72 = (unsigned int *)v71[4];
        uint64_t v241 = (llvm::Metadata *)v72;
        if (!v72) {
          goto LABEL_137;
        }
        if (*(unsigned char *)v72 == 4)
        {
          uint64_t v73 = v72[2];
          if (v73)
          {
            uint64_t v74 = -2 * v73;
            do
            {
              unsigned int v75 = *(llvm::Metadata **)&v72[v74];
              uint64_t v240 = v75;
              if (!v75 || *(unsigned char *)v75 != 13 || *((_WORD *)v75 + 1) != 4)
              {
                v242[0] = "invalid enum type";
                __int16 v243 = 259;
                uint64_t v238 = (llvm::Metadata *)v72;
                uint64_t v239 = (llvm::Metadata *)a2;
                sub_1CD5DC6E0((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v239, &v238, &v240);
                goto LABEL_462;
              }
              v74 += 2;
            }
            while (v74 * 4);
          }
LABEL_137:
          uint64_t v76 = (unsigned int *)v71[5];
          uint64_t v241 = (llvm::Metadata *)v76;
          if (v76)
          {
            if (*(unsigned char *)v76 != 4)
            {
              unint64_t v235 = "invalid retained type list";
              goto LABEL_561;
            }
            uint64_t v77 = v76[2];
            if (v77)
            {
              uint64_t v78 = -2 * v77;
              while (1)
              {
                uint64_t v79 = *(llvm::Metadata **)&v76[v78];
                uint64_t v240 = v79;
                if (!v79) {
                  break;
                }
                int v80 = *(unsigned __int8 *)v79;
                if ((v80 - 11) >= 4 && v80 != 33 && (v80 != 17 || (*((unsigned char *)v79 + 44) & 8) != 0)) {
                  break;
                }
                v78 += 2;
                if (!(v78 * 4)) {
                  goto LABEL_266;
                }
              }
              BOOL v81 = "invalid retained type";
              goto LABEL_551;
            }
          }
LABEL_266:
          unsigned int v137 = (unsigned int *)v71[6];
          uint64_t v241 = (llvm::Metadata *)v137;
          if (v137)
          {
            if (*(unsigned char *)v137 != 4)
            {
              unint64_t v235 = "invalid global variable list";
              goto LABEL_561;
            }
            uint64_t v138 = v137[2];
            if (v138)
            {
              uint64_t v139 = -2 * v138;
              while (1)
              {
                uint64_t v140 = *(llvm::Metadata **)&v137[v139];
                uint64_t v240 = v140;
                if (!v140 || *(unsigned char *)v140 != 7) {
                  break;
                }
                v139 += 2;
                if (!(v139 * 4)) {
                  goto LABEL_273;
                }
              }
              BOOL v81 = "invalid global variable ref";
              goto LABEL_551;
            }
          }
LABEL_273:
          int v141 = (unsigned int *)v71[7];
          uint64_t v241 = (llvm::Metadata *)v141;
          if (!v141)
          {
LABEL_280:
            uint64_t v145 = (unsigned int *)v71[8];
            uint64_t v241 = (llvm::Metadata *)v145;
            if (!v145) {
              goto LABEL_287;
            }
            if (*(unsigned char *)v145 == 4)
            {
              uint64_t v146 = v145[2];
              if (v146)
              {
                uint64_t v147 = -2 * v146;
                while (1)
                {
                  uint64_t v148 = *(llvm::Metadata **)&v145[v147];
                  uint64_t v240 = v148;
                  if (!v148 || *(unsigned __int8 *)v148 - 29 > 1) {
                    break;
                  }
                  v147 += 2;
                  if (!(v147 * 4)) {
                    goto LABEL_287;
                  }
                }
                BOOL v81 = "invalid macro ref";
LABEL_551:
                v242[0] = v81;
                __int16 v243 = 259;
                uint64_t v239 = (llvm::Metadata *)a2;
                uint64_t v221 = &v239;
                goto LABEL_552;
              }
LABEL_287:
              uint64_t v149 = *(void *)(a1 + 752);
              uint64_t v150 = *(unsigned int *)(a1 + 764);
              if (v149 == *(void *)(a1 + 744))
              {
                if (v150)
                {
                  uint64_t v151 = 0;
                  uint64_t v152 = 8 * v150;
                  unint64_t v153 = *(uint64_t **)(a1 + 752);
                  do
                  {
                    if (*v153 == a2) {
                      goto LABEL_462;
                    }
                    if (*v153 == -2) {
                      uint64_t v151 = v153;
                    }
                    ++v153;
                    v152 -= 8;
                  }
                  while (v152);
                  if (v151)
                  {
                    uint64_t *v151 = a2;
                    --*(_DWORD *)(a1 + 768);
                    goto LABEL_462;
                  }
                }
                unsigned int v154 = *(_DWORD *)(a1 + 760);
                if (v150 < v154)
                {
                  *(_DWORD *)(a1 + 764) = v150 + 1;
                  *(void *)(v149 + 8 * v150) = a2;
                  goto LABEL_462;
                }
              }
              else
              {
                unsigned int v154 = *(_DWORD *)(a1 + 760);
              }
              if (3 * v154 <= 4 * ((int)v150 - *(_DWORD *)(a1 + 768)))
              {
                if (v154 >= 0x40) {
                  v154 *= 2;
                }
                else {
                  unsigned int v154 = 128;
                }
              }
              else if (v154 - v150 >= v154 >> 3)
              {
LABEL_406:
                unsigned int v205 = v154 - 1;
                unsigned int v206 = (v154 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                unint64_t v207 = (uint64_t *)(v149 + 8 * v206);
                uint64_t v208 = *v207;
                if (*v207 == -1)
                {
                  uint64_t v209 = 0;
                }
                else
                {
                  uint64_t v209 = 0;
                  int v210 = 1;
                  do
                  {
                    if (v208 == a2) {
                      goto LABEL_462;
                    }
                    if (v209) {
                      BOOL v211 = 0;
                    }
                    else {
                      BOOL v211 = v208 == -2;
                    }
                    if (v211) {
                      uint64_t v209 = v207;
                    }
                    unsigned int v212 = v206 + v210++;
                    unsigned int v206 = v212 & v205;
                    unint64_t v207 = (uint64_t *)(v149 + 8 * (v212 & v205));
                    uint64_t v208 = *v207;
                  }
                  while (*v207 != -1);
                }
                if (v209) {
                  BOOL v227 = v209;
                }
                else {
                  BOOL v227 = v207;
                }
                if (*v227 != a2)
                {
                  if (*v227 == -2) {
                    --*(_DWORD *)(a1 + 768);
                  }
                  else {
                    ++*(_DWORD *)(a1 + 764);
                  }
                  *BOOL v227 = a2;
                }
                goto LABEL_462;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(a1 + 744), v154);
              unsigned int v154 = *(_DWORD *)(a1 + 760);
              uint64_t v149 = *(void *)(a1 + 752);
              goto LABEL_406;
            }
            unint64_t v235 = "invalid macro list";
            goto LABEL_561;
          }
          if (*(unsigned char *)v141 == 4)
          {
            uint64_t v142 = v141[2];
            if (v142)
            {
              uint64_t v143 = -2 * v142;
              while (1)
              {
                uint64_t v144 = *(llvm::Metadata **)&v141[v143];
                uint64_t v240 = v144;
                if (!v144 || *(unsigned char *)v144 != 28) {
                  break;
                }
                v143 += 2;
                if (!(v143 * 4)) {
                  goto LABEL_280;
                }
              }
              BOOL v81 = "invalid imported entity ref";
              goto LABEL_551;
            }
            goto LABEL_280;
          }
          unint64_t v235 = "invalid imported entity list";
        }
        else
        {
          unint64_t v235 = "invalid enum list";
        }
LABEL_561:
        v242[0] = v235;
        __int16 v243 = 259;
        uint64_t v240 = (llvm::Metadata *)a2;
        uint64_t v221 = &v240;
        uint64_t v229 = &v241;
LABEL_530:
        sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, v221, v229);
        goto LABEL_462;
      case 0x11:
        if (*(_WORD *)(a2 + 2) != 46) {
          goto LABEL_459;
        }
        uint64_t v82 = *(unsigned int *)(a2 + 8);
        uint64_t v83 = a2 - 8 * v82;
        unint64_t v84 = *(llvm::Metadata **)(v83 + 8);
        if (v84)
        {
          int v85 = *(unsigned __int8 *)v84;
          BOOL v86 = (v85 - 11) < 0xB || v85 == 31;
          if (!v86 && v85 != 33)
          {
            uint64_t v241 = (llvm::Metadata *)a2;
            v242[0] = "invalid scope";
            __int16 v243 = 259;
            uint64_t v240 = v84;
LABEL_568:
            unsigned int v234 = &v241;
            goto LABEL_569;
          }
        }
        std::string::size_type v87 = *(llvm::Metadata **)v83;
        uint64_t v241 = v87;
        if (v87)
        {
          if (*(unsigned char *)v87 != 15)
          {
            unsigned int v88 = "invalid file";
LABEL_557:
            v242[0] = v88;
            __int16 v243 = 259;
            uint64_t v240 = (llvm::Metadata *)a2;
            unsigned int v234 = &v240;
            goto LABEL_558;
          }
        }
        else
        {
          int v166 = *(_DWORD *)(a2 + 24);
          if (v166)
          {
            v242[0] = "line specified with no file";
            __int16 v243 = 259;
            uint64_t v240 = (llvm::Metadata *)a2;
            LODWORD(v239) = v166;
            sub_1CD5DC760((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v240, (unsigned int *)&v239);
            goto LABEL_462;
          }
        }
        uint64_t v167 = *(llvm::Metadata **)(v83 + 32);
        uint64_t v241 = v167;
        if (v167 && *(unsigned char *)v167 != 14)
        {
          unsigned int v88 = "invalid subroutine type";
          goto LABEL_557;
        }
        uint64_t v168 = -v82;
        if (v82 >= 9)
        {
          uint64_t v169 = *(llvm::Metadata **)(v83 + 64);
          if (v169)
          {
            int v170 = *(unsigned __int8 *)v169;
            if ((v170 - 11) >= 4 && v170 != 33)
            {
              uint64_t v241 = (llvm::Metadata *)a2;
              v242[0] = "invalid containing type";
              __int16 v243 = 259;
              uint64_t v240 = v169;
              goto LABEL_568;
            }
          }
          if (v82 < 0xA)
          {
            LODWORD(v82) = 9;
          }
          else
          {
            int v171 = *(unsigned int **)(v83 + 72);
            if (v171)
            {
              sub_1CC63E3AC((llvm::raw_ostream **)a1, (llvm::Metadata *)a2, v171);
              uint64_t v82 = *(unsigned int *)(a2 + 8);
              uint64_t v168 = -v82;
            }
          }
        }
        uint64_t v190 = (uint64_t *)(a2 + 8 * v168);
        unsigned int v191 = (llvm::Metadata *)v190[6];
        uint64_t v241 = v191;
        if (v191 && (*(unsigned char *)v191 != 17 || (*((unsigned char *)v191 + 44) & 8) != 0))
        {
          unsigned int v88 = "invalid subprogram declaration";
          goto LABEL_557;
        }
        int v192 = (unsigned int *)v190[7];
        uint64_t v241 = (llvm::Metadata *)v192;
        if (v192)
        {
          if (*(unsigned char *)v192 != 4) {
            int v192 = 0;
          }
          uint64_t v240 = (llvm::Metadata *)v192;
          if (!v192)
          {
            v242[0] = "invalid retained nodes list";
            __int16 v243 = 259;
            uint64_t v239 = (llvm::Metadata *)a2;
            unsigned int v234 = &v239;
LABEL_558:
            uint64_t v236 = &v241;
LABEL_559:
            sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, v234, v236);
            goto LABEL_462;
          }
          uint64_t v193 = v192[2];
          if (v193)
          {
            uint64_t v194 = -2 * v193;
            while (1)
            {
              int v195 = *(llvm::Metadata **)&v192[v194];
              uint64_t v239 = v195;
              if (!v195 || *(unsigned __int8 *)v195 - 25 >= 2) {
                break;
              }
              v194 += 2;
              if (!(v194 * 4)) {
                goto LABEL_376;
              }
            }
            v242[0] = "invalid retained nodes, expected DILocalVariable or DILabel";
            __int16 v243 = 259;
            uint64_t v238 = (llvm::Metadata *)a2;
            uint64_t v231 = &v238;
            uint64_t v232 = &v240;
            uint64_t v233 = &v239;
            goto LABEL_532;
          }
        }
LABEL_376:
        int v196 = *(_DWORD *)(a2 + 40);
        if ((~v196 & 0x6000) == 0 || (v196 & 0xC00000) == 0xC00000)
        {
LABEL_420:
          BOOL v28 = "invalid reference flags";
        }
        else
        {
          unint64_t v197 = (llvm::Metadata *)v190[5];
          uint64_t v241 = v197;
          if ((*(unsigned char *)(a2 + 44) & 8) == 0)
          {
            if (v197)
            {
              BOOL v28 = "subprogram declarations must not have a compile unit";
              goto LABEL_460;
            }
LABEL_387:
            if (v82 < 0xB) {
              goto LABEL_398;
            }
            uint64_t v199 = *(unsigned int **)(a2 - 8 * v82 + 80);
            uint64_t v240 = (llvm::Metadata *)v199;
            if (!v199) {
              goto LABEL_398;
            }
            if (*(unsigned char *)v199 != 4) {
              uint64_t v199 = 0;
            }
            uint64_t v239 = (llvm::Metadata *)v199;
            if (!v199)
            {
              v242[0] = "invalid thrown types list";
              __int16 v243 = 259;
              uint64_t v238 = (llvm::Metadata *)a2;
              unsigned int v234 = &v238;
LABEL_569:
              uint64_t v236 = &v240;
              goto LABEL_559;
            }
            uint64_t v200 = v199[2];
            if (!v200)
            {
LABEL_398:
              if ((*(unsigned char *)(a2 + 43) & 0x20) != 0 && (*(unsigned char *)(a2 + 44) & 8) == 0)
              {
                std::string::size_type v204 = "DIFlagAllCallsDescribed must be attached to a definition";
                goto LABEL_538;
              }
              goto LABEL_462;
            }
            uint64_t v201 = -2 * v200;
            while (1)
            {
              char v202 = *(llvm::Metadata **)&v199[v201];
              uint64_t v238 = v202;
              if (!v202) {
                break;
              }
              int v203 = *(unsigned __int8 *)v202;
              if ((v203 - 11) >= 4 && v203 != 33) {
                break;
              }
              v201 += 2;
              if (!(v201 * 4)) {
                goto LABEL_398;
              }
            }
            v242[0] = "invalid thrown type";
            __int16 v243 = 259;
            uint64_t v237 = a2;
            uint64_t v231 = (llvm::Metadata **)&v237;
            uint64_t v232 = &v239;
            uint64_t v233 = &v238;
LABEL_532:
            sub_1CD5DC6E0((llvm::raw_ostream *)a1, (llvm::Twine *)v242, v231, v232, v233);
            goto LABEL_462;
          }
          if ((*(unsigned char *)(a2 + 1) & 0x7F) == 1)
          {
            if (v197)
            {
              if (*(unsigned char *)v197 != 16)
              {
                unsigned int v88 = "invalid unit type";
                goto LABEL_557;
              }
              uint64_t v198 = a2;
              if (*(unsigned char *)a2 == 15 || (uint64_t v198 = *v190) != 0)
              {
                sub_1CC63E46C(a1, (uint64_t)v197, *(unsigned char *)(v198 + 56));
                LODWORD(v82) = *(_DWORD *)(a2 + 8);
              }
              goto LABEL_387;
            }
            BOOL v28 = "subprogram definitions must have a compile unit";
          }
          else
          {
            BOOL v28 = "subprogram definitions must be distinct";
          }
        }
LABEL_460:
        v242[0] = v28;
        __int16 v243 = 259;
        sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)v242);
        if (*(void *)a1) {
          sub_1CD5DC50C((llvm::raw_ostream **)a1, (llvm::Metadata *)a2);
        }
        goto LABEL_462;
      case 0x12:
        sub_1CC63E778((llvm::raw_ostream **)a1, a2);
        if (*(_DWORD *)(a2 + 24) || !*(_WORD *)(a2 + 28)) {
          goto LABEL_462;
        }
        BOOL v28 = "cannot have column info without line info";
        goto LABEL_460;
      case 0x13:
        sub_1CC63E778((llvm::raw_ostream **)a1, a2);
        goto LABEL_462;
      case 0x14:
        if (*(_WORD *)(a2 + 2) != 57) {
          goto LABEL_459;
        }
        char v89 = *(llvm::Metadata **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
        uint64_t v241 = v89;
        if (v89)
        {
          int v90 = *(unsigned __int8 *)v89;
          BOOL v91 = (v90 - 11) < 0xB || v90 == 31;
          if (!v91 && v90 != 33)
          {
            v242[0] = "invalid scope ref";
            __int16 v243 = 259;
            uint64_t v240 = (llvm::Metadata *)a2;
            sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v240, &v241);
          }
        }
        goto LABEL_462;
      case 0x15:
        if (*(_WORD *)(a2 + 2) != 30) {
          goto LABEL_459;
        }
        uint64_t v92 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8) + 16);
        if (v92 && **(void **)(v92 + 8)) {
          goto LABEL_462;
        }
        BOOL v28 = "anonymous module";
        goto LABEL_460;
      case 0x16:
        sub_1CC63E854((llvm::raw_ostream **)a1, (unsigned int *)a2);
        if (*(_WORD *)(a2 + 2) != 47) {
          goto LABEL_459;
        }
        goto LABEL_462;
      case 0x17:
        sub_1CC63E854((llvm::raw_ostream **)a1, (unsigned int *)a2);
        int v93 = *(unsigned __int16 *)(a2 + 2);
        if ((v93 - 16646) >= 2 && v93 != 48) {
          goto LABEL_459;
        }
        goto LABEL_462;
      case 0x18:
        sub_1CC63E0C8((llvm::raw_ostream **)a1, (unsigned int *)a2);
        goto LABEL_462;
      case 0x19:
        sub_1CC63E8C4((llvm::raw_ostream **)a1, (unsigned int *)a2);
        uint64_t v94 = (llvm::Metadata **)(a2 - 8 * *(unsigned int *)(a2 + 8));
        unsigned int v95 = v94[3];
        if (v95)
        {
          int v96 = *(unsigned __int8 *)v95;
          if ((v96 - 11) >= 4 && v96 != 33)
          {
            uint64_t v241 = (llvm::Metadata *)a2;
            v242[0] = "invalid type ref";
            __int16 v243 = 259;
            uint64_t v240 = v95;
            goto LABEL_455;
          }
        }
        if (*(_WORD *)(a2 + 2) != 52) {
          goto LABEL_459;
        }
        unint64_t v97 = *v94;
        if (!v97 || *(unsigned __int8 *)v97 - 20 <= 0xFFFFFFFC)
        {
          uint64_t v241 = (llvm::Metadata *)a2;
          v242[0] = "local variable requires a valid scope";
          __int16 v243 = 259;
          uint64_t v240 = v97;
          goto LABEL_455;
        }
        if (v95 && *(unsigned char *)v95 == 14)
        {
          uint64_t v241 = (llvm::Metadata *)a2;
          v242[0] = "invalid type";
          __int16 v243 = 259;
          uint64_t v240 = v95;
          sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v241, &v240);
        }
        goto LABEL_462;
      case 0x1A:
        uint64_t v98 = (llvm::Metadata **)(a2 - 8 * *(unsigned int *)(a2 + 8));
        int v99 = *v98;
        uint64_t v241 = v99;
        if (!v99
          || ((v100 = *(unsigned __int8 *)v99, (v100 - 11) >= 0xB) ? (BOOL v101 = v100 == 31) : (BOOL v101 = 1),
              v101 || v100 == 33))
        {
          uint64_t v102 = v98[2];
          uint64_t v241 = v102;
          if (!v102 || *(unsigned char *)v102 == 15)
          {
            if (*(_WORD *)(a2 + 2) != 10)
            {
LABEL_459:
              BOOL v28 = "invalid tag";
              goto LABEL_460;
            }
            if (!v99 || *(unsigned __int8 *)v99 - 20 <= 0xFFFFFFFC)
            {
              uint64_t v241 = (llvm::Metadata *)a2;
              v242[0] = "label requires a valid scope";
              __int16 v243 = 259;
              uint64_t v240 = v99;
              int v103 = &v241;
              uint64_t v104 = &v240;
              goto LABEL_520;
            }
LABEL_462:
            uint64_t v222 = *(unsigned int *)(a2 + 8);
            if (v222)
            {
              for (uint64_t i = -8 * v222; i; i += 8)
              {
                uint64_t v224 = *(llvm::Metadata **)(a2 + i);
                uint64_t v241 = v224;
                if (v224)
                {
                  int v225 = *(unsigned __int8 *)v224;
                  if (v225 == 2)
                  {
                    v242[0] = "Invalid operand for global metadata!";
                    __int16 v243 = 259;
                    uint64_t v240 = (llvm::Metadata *)a2;
                    sub_1CD5DC600((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v240, &v241);
                    return;
                  }
                  if (a3 != 1 && v225 == 5)
                  {
                    v242[0] = "DILocation not allowed within this metadata node";
                    __int16 v243 = 259;
                    uint64_t v240 = (llvm::Metadata *)a2;
                    sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v240, &v241);
                    return;
                  }
                  if ((v225 - 4) > 0x1E)
                  {
                    if ((v225 - 3) >= 0xFFFFFFFE) {
                      sub_1CC63E1E8((llvm::raw_ostream *)a1, v224, 0);
                    }
                  }
                  else
                  {
                    sub_1CC639E3C(a1);
                  }
                }
              }
            }
            if ((*(unsigned char *)(a2 + 1) & 0x7F) == 2)
            {
              uint64_t v29 = "Expected no forward declarations!";
            }
            else
            {
              if (!*(_DWORD *)(a2 + 12)) {
                return;
              }
              uint64_t v29 = "All nodes should be resolved!";
            }
            goto LABEL_479;
          }
          int v228 = "invalid file";
        }
        else
        {
          int v228 = "invalid scope";
        }
        v242[0] = v228;
        __int16 v243 = 259;
        uint64_t v240 = (llvm::Metadata *)a2;
        int v103 = &v240;
        uint64_t v104 = &v241;
        goto LABEL_520;
      case 0x1B:
        if (*(_WORD *)(a2 + 2) != 16896) {
          goto LABEL_459;
        }
        uint64_t v105 = a2 - 8 * *(unsigned int *)(a2 + 8);
        std::string v106 = *(llvm::Metadata **)(v105 + 32);
        uint64_t v241 = v106;
        if (v106)
        {
          int v107 = *(unsigned __int8 *)v106;
          if ((v107 - 11) >= 4 && v107 != 33)
          {
            std::string::size_type v109 = "invalid type ref";
            goto LABEL_208;
          }
        }
        unsigned int v108 = *(llvm::Metadata **)(v105 + 8);
        uint64_t v241 = v108;
        if (v108 && *(unsigned char *)v108 != 15)
        {
          std::string::size_type v109 = "invalid file";
          goto LABEL_208;
        }
        goto LABEL_462;
      case 0x1C:
        int v110 = *(unsigned __int16 *)(a2 + 2);
        if (v110 != 8 && v110 != 58) {
          goto LABEL_459;
        }
        std::string::size_type v111 = (llvm::Metadata **)(a2 - 8 * *(unsigned int *)(a2 + 8));
        uint64_t v112 = *v111;
        uint64_t v241 = v112;
        if (!v112
          || ((int v113 = *(unsigned __int8 *)v112, (v113 - 11) >= 0xB) ? (v114 = v113 == 31) : (v114 = 1),
              v114 || v113 == 33))
        {
          uint64_t v115 = v111[1];
          if (!v115) {
            goto LABEL_462;
          }
          unsigned int v116 = *(unsigned __int8 *)v115;
          if (v116 - 8 < 0x15) {
            goto LABEL_462;
          }
          BOOL v164 = v116 > 0x22;
          uint64_t v117 = (1 << v116) & 0x680000000;
          if (!v164 && v117 != 0) {
            goto LABEL_462;
          }
          uint64_t v241 = (llvm::Metadata *)a2;
          v242[0] = "invalid imported entity";
          __int16 v243 = 259;
          uint64_t v240 = v115;
          int v103 = &v241;
          uint64_t v104 = &v240;
        }
        else
        {
          v242[0] = "invalid scope for imported entity";
          __int16 v243 = 259;
          uint64_t v240 = (llvm::Metadata *)a2;
          int v103 = &v240;
          uint64_t v104 = &v241;
        }
LABEL_520:
        sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, v103, v104);
        goto LABEL_462;
      case 0x1D:
        if (*(unsigned __int16 *)(a2 + 2) - 1 >= 2) {
          goto LABEL_443;
        }
        uint64_t v119 = *(void *)(a2 - 8 * *(unsigned int *)(a2 + 8));
        if (v119 && **(void **)(v119 + 8)) {
          goto LABEL_462;
        }
        BOOL v28 = "anonymous macro";
        goto LABEL_460;
      case 0x1E:
        if (*(_WORD *)(a2 + 2) != 3)
        {
LABEL_443:
          BOOL v28 = "invalid macinfo type";
          goto LABEL_460;
        }
        uint64_t v120 = a2 - 8 * *(unsigned int *)(a2 + 8);
        int v121 = *(llvm::Metadata **)v120;
        uint64_t v241 = v121;
        if (v121 && *(unsigned char *)v121 != 15)
        {
          uint64_t v230 = "invalid file";
        }
        else
        {
          char v122 = *(unsigned int **)(v120 + 8);
          uint64_t v241 = (llvm::Metadata *)v122;
          if (!v122) {
            goto LABEL_462;
          }
          if (*(unsigned char *)v122 == 4)
          {
            uint64_t v123 = v122[2];
            if (!v123) {
              goto LABEL_462;
            }
            uint64_t v124 = -2 * v123;
            while (1)
            {
              char v125 = *(llvm::Metadata **)&v122[v124];
              uint64_t v240 = v125;
              if (!v125 || *(unsigned __int8 *)v125 - 29 >= 2) {
                break;
              }
              v124 += 2;
              if (!(v124 * 4)) {
                goto LABEL_462;
              }
            }
            v242[0] = "invalid macro ref";
            __int16 v243 = 259;
            uint64_t v239 = (llvm::Metadata *)a2;
            uint64_t v221 = &v239;
            uint64_t v229 = &v240;
            goto LABEL_530;
          }
          uint64_t v230 = "invalid macro list";
        }
        v242[0] = v230;
        __int16 v243 = 259;
        uint64_t v240 = (llvm::Metadata *)a2;
        uint64_t v221 = &v240;
        uint64_t v229 = &v241;
        goto LABEL_530;
      case 0x1F:
        if (*(_WORD *)(a2 + 2) != 26) {
          goto LABEL_459;
        }
        size_t v126 = (llvm::Metadata **)(a2 - 8 * *(unsigned int *)(a2 + 8));
        int v127 = *v126;
        uint64_t v241 = v127;
        if (!v127
          || ((v128 = *(unsigned __int8 *)v127, (v128 - 11) >= 0xB) ? (BOOL v129 = v128 == 31) : (BOOL v129 = 1),
              v129 || v128 == 33))
        {
          uint64_t v130 = v126[1];
          uint64_t v241 = v130;
          if (!v130 || *(unsigned char *)v130 == 24) {
            goto LABEL_462;
          }
          std::string::size_type v109 = "invalid declaration";
        }
        else
        {
          std::string::size_type v109 = "invalid scope ref";
        }
LABEL_208:
        v242[0] = v109;
        __int16 v243 = 259;
        uint64_t v240 = (llvm::Metadata *)a2;
        sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v242, &v240, &v241);
        goto LABEL_462;
      case 0x20:
        if (!*(_DWORD *)(a2 + 8)) {
          goto LABEL_462;
        }
        BOOL v28 = "DIArgList should have no operands other than a list of ValueAsMetadata";
        goto LABEL_460;
      case 0x21:
        if (*(_WORD *)(a2 + 2) != 18) {
          goto LABEL_459;
        }
        if ((~*(_DWORD *)(a2 + 28) & 0x18000000) != 0) {
          goto LABEL_462;
        }
        BOOL v28 = "has conflicting flags";
        goto LABEL_460;
      case 0x22:
        if (*(_WORD *)(a2 + 2) != 69) {
          goto LABEL_459;
        }
        uint64_t v131 = (unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8));
        uint64_t v132 = v131[2];
        if (*v131)
        {
          if (v132)
          {
            BOOL v28 = "GenericSubrange can have any one of count or upperBound";
            goto LABEL_460;
          }
          unsigned int v133 = **v131;
          BOOL v164 = v133 > 0x19;
          int v134 = (1 << v133) & 0x3000040;
          if (v164 || v134 == 0)
          {
LABEL_549:
            BOOL v28 = "Count must be signed constant or DIVariable or DIExpression";
            goto LABEL_460;
          }
          uint64_t v132 = 0;
        }
        else if (!v132)
        {
          BOOL v28 = "GenericSubrange must contain count or upperBound";
          goto LABEL_460;
        }
        int v155 = v131[1];
        if (!v155)
        {
          BOOL v28 = "GenericSubrange must contain lowerBound";
          goto LABEL_460;
        }
        unsigned int v156 = *v155;
        BOOL v164 = v156 > 0x19;
        int v157 = (1 << v156) & 0x3000040;
        if (v164 || v157 == 0)
        {
LABEL_540:
          BOOL v28 = "LowerBound must be signed constant or DIVariable or DIExpression";
          goto LABEL_460;
        }
        if (v132)
        {
          unsigned int v159 = *v132;
          BOOL v164 = v159 > 0x19;
          int v160 = (1 << v159) & 0x3000040;
          if (v164 || v160 == 0)
          {
LABEL_555:
            BOOL v28 = "UpperBound must be signed constant or DIVariable or DIExpression";
            goto LABEL_460;
          }
        }
        int v162 = v131[3];
        if (!v162)
        {
          BOOL v28 = "GenericSubrange must contain stride";
          goto LABEL_460;
        }
        unsigned int v163 = *v162;
        BOOL v164 = v163 > 0x19;
        int v165 = (1 << v163) & 0x3000040;
LABEL_357:
        if (v164 || v165 == 0)
        {
          BOOL v28 = "Stride must be signed constant or DIVariable or DIExpression";
          goto LABEL_460;
        }
        goto LABEL_462;
      default:
        goto LABEL_462;
    }
  }
}

void sub_1CC63BA68(llvm::SmallPtrSetImplBase **a1, llvm::Value *a2, unsigned int *a3)
{
  if (!a3 || *(unsigned char *)a3 != 5) {
    return;
  }
  unint64_t v72 = (llvm::Metadata *)a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = *((void *)*a1 + 1);
  uint64_t v9 = *((unsigned int *)*a1 + 5);
  if (v8 == *(void *)*a1)
  {
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 8 * v9;
      unsigned int v12 = (unsigned int **)*((void *)*a1 + 1);
      while (*v12 != a3)
      {
        if (*v12 == (unsigned int *)-2) {
          uint64_t v10 = v12;
        }
        ++v12;
        v11 -= 8;
        if (!v11)
        {
          if (!v10) {
            goto LABEL_11;
          }
          uint64_t *v10 = a3;
          --*((_DWORD *)v7 + 6);
          goto LABEL_35;
        }
      }
      return;
    }
LABEL_11:
    unsigned int v13 = *((_DWORD *)v7 + 4);
    if (v9 < v13)
    {
      *((_DWORD *)v7 + 5) = v9 + 1;
      *(void *)(v8 + 8 * v9) = a3;
      goto LABEL_35;
    }
  }
  else
  {
    unsigned int v13 = *((_DWORD *)v7 + 4);
  }
  if (3 * v13 <= 4 * ((int)v9 - *((_DWORD *)v7 + 6)))
  {
    if (v13 >= 0x40) {
      v13 *= 2;
    }
    else {
      unsigned int v13 = 128;
    }
    goto LABEL_89;
  }
  if (v13 - v9 < v13 >> 3)
  {
LABEL_89:
    llvm::SmallPtrSetImplBase::Grow(*a1, v13);
    unsigned int v13 = *((_DWORD *)v7 + 4);
    uint64_t v8 = *((void *)v7 + 1);
  }
  unsigned int v14 = v13 - 1;
  unsigned int v15 = (v13 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v16 = (unsigned int **)(v8 + 8 * v15);
  int v17 = *v16;
  if (*v16 != (unsigned int *)-1)
  {
    BOOL v18 = 0;
    int v19 = 1;
    while (v17 != a3)
    {
      if (v18) {
        BOOL v20 = 0;
      }
      else {
        BOOL v20 = v17 == (unsigned int *)-2;
      }
      if (v20) {
        BOOL v18 = v16;
      }
      unsigned int v21 = v15 + v19++;
      unsigned int v15 = v21 & v14;
      uint64_t v16 = (unsigned int **)(v8 + 8 * (v21 & v14));
      int v17 = *v16;
      if (*v16 == (unsigned int *)-1) {
        goto LABEL_28;
      }
    }
    return;
  }
  BOOL v18 = 0;
LABEL_28:
  if (v18) {
    unsigned int v22 = v18;
  }
  else {
    unsigned int v22 = v16;
  }
  if (*v22 == a3) {
    return;
  }
  if (*v22 == (unsigned int *)-2) {
    --*((_DWORD *)v7 + 6);
  }
  else {
    ++*((_DWORD *)v7 + 5);
  }
  *unsigned int v22 = a3;
LABEL_35:
  uint64_t v23 = *(llvm::Metadata **)&a3[-2 * a3[2]];
  uint64_t v71 = v23;
  if (!v23 || *(unsigned __int8 *)v23 - 17 >= 3)
  {
    __int16 v70 = 259;
    int v44 = (llvm::Metadata **)a1[2];
    uint64_t v68 = a1[3];
    v69[0] = "DILocation's scope must be a DILocalScope";
    unsigned int v67 = a2;
    sub_1CD5DC588(v6, (llvm::Twine *)v69);
    if (*(void *)v6) {
      sub_1CD5DC8B8((llvm::raw_ostream **)v6, *v44, &v68, &v67, &v72, &v71);
    }
    return;
  }
  int v24 = a3;
  do
  {
    uint64_t v25 = v24;
    uint64_t v26 = v24[2];
    if (v26 != 2) {
      break;
    }
    int v24 = (unsigned int *)*((void *)v24 - 1);
  }
  while (v24);
  uint64_t v27 = *(llvm::Value **)&v25[-2 * v26];
  uint64_t v68 = v27;
  if (!v27)
  {
    v69[0] = "Failed to find DILocalScope";
    __int16 v70 = 259;
    sub_1CD5DBE68(v6, (llvm::Twine *)v69);
    if (*(void *)v6) {
      sub_1CD5DC50C((llvm::raw_ostream **)v6, (llvm::Metadata *)a3);
    }
    return;
  }
  BOOL v28 = *a1;
  uint64_t v29 = *((void *)*a1 + 1);
  uint64_t v30 = *((unsigned int *)*a1 + 5);
  if (v29 == *(void *)*a1)
  {
    if (v30)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 8 * v30;
      int v33 = (llvm::Value **)*((void *)*a1 + 1);
      while (*v33 != v27)
      {
        if (*v33 == (llvm::Value *)-2) {
          uint64_t v31 = v33;
        }
        ++v33;
        v32 -= 8;
        if (!v32)
        {
          if (!v31) {
            goto LABEL_49;
          }
          *uint64_t v31 = v27;
          --*((_DWORD *)v28 + 6);
          goto LABEL_73;
        }
      }
      return;
    }
LABEL_49:
    unsigned int v34 = *((_DWORD *)v28 + 4);
    if (v30 < v34)
    {
      *((_DWORD *)v28 + 5) = v30 + 1;
      *(void *)(v29 + 8 * v30) = v27;
      goto LABEL_73;
    }
  }
  else
  {
    unsigned int v34 = *((_DWORD *)v28 + 4);
  }
  if (3 * v34 <= 4 * ((int)v30 - *((_DWORD *)v28 + 6)))
  {
    if (v34 >= 0x40) {
      v34 *= 2;
    }
    else {
      unsigned int v34 = 128;
    }
    goto LABEL_107;
  }
  if (v34 - v30 < v34 >> 3)
  {
LABEL_107:
    llvm::SmallPtrSetImplBase::Grow(*a1, v34);
    unsigned int v34 = *((_DWORD *)v28 + 4);
    uint64_t v29 = *((void *)v28 + 1);
  }
  unsigned int v35 = v34 - 1;
  unsigned int v36 = (v34 - 1) & ((v27 >> 4) ^ (v27 >> 9));
  unsigned int v37 = (llvm::Value **)(v29 + 8 * v36);
  uint64_t v38 = *v37;
  if (*v37 != (llvm::Value *)-1)
  {
    unsigned int v39 = 0;
    int v40 = 1;
    while (v38 != v27)
    {
      if (v39) {
        BOOL v41 = 0;
      }
      else {
        BOOL v41 = v38 == (llvm::Value *)-2;
      }
      if (v41) {
        unsigned int v39 = v37;
      }
      unsigned int v42 = v36 + v40++;
      unsigned int v36 = v42 & v35;
      unsigned int v37 = (llvm::Value **)(v29 + 8 * (v42 & v35));
      uint64_t v38 = *v37;
      if (*v37 == (llvm::Value *)-1) {
        goto LABEL_66;
      }
    }
    return;
  }
  unsigned int v39 = 0;
LABEL_66:
  if (v39) {
    char v43 = v39;
  }
  else {
    char v43 = v37;
  }
  if (*v43 == v27) {
    return;
  }
  if (*v43 == (llvm::Value *)-2) {
    --*((_DWORD *)v28 + 6);
  }
  else {
    ++*((_DWORD *)v28 + 5);
  }
  *char v43 = v27;
LABEL_73:
  if ((*(unsigned char *)v27 & 0xFE) != 0x12)
  {
    unsigned int v67 = v27;
    goto LABEL_75;
  }
  unsigned int v47 = (unsigned int *)v27;
  do
    unsigned int v47 = *(unsigned int **)&v47[-2 * v47[2] + 2];
  while ((*(unsigned char *)v47 & 0xFE) == 0x12);
  unsigned int v67 = (llvm::Value *)v47;
  if (v27 == (llvm::Value *)v47)
  {
LABEL_75:
    if (!llvm::DISubprogram::describes(v27, a1[3]))
    {
      v69[0] = "!dbg attachment points at wrong subprogram for function";
      __int16 v70 = 259;
      int v46 = (llvm::Metadata **)a1[2];
      BOOL v45 = a1[3];
      int v65 = a2;
      uint64_t v66 = v45;
      sub_1CD5DC588(v6, (llvm::Twine *)v69);
      if (*(void *)v6) {
        sub_1CD5DC98C((llvm::raw_ostream **)v6, *v46, &v66, &v65, &v72, &v68, &v67);
      }
    }
    return;
  }
  unsigned int v48 = *a1;
  uint64_t v49 = *((void *)*a1 + 1);
  uint64_t v50 = *((unsigned int *)*a1 + 5);
  if (v49 == *(void *)*a1)
  {
    if (v50)
    {
      unsigned int v51 = 0;
      uint64_t v52 = 8 * v50;
      BOOL v53 = (unsigned int **)*((void *)*a1 + 1);
      while (*v53 != v47)
      {
        if (*v53 == (unsigned int *)-2) {
          unsigned int v51 = v53;
        }
        ++v53;
        v52 -= 8;
        if (!v52)
        {
          if (!v51) {
            goto LABEL_102;
          }
          llvm::Metadata *v51 = v47;
          --*((_DWORD *)v48 + 6);
          goto LABEL_130;
        }
      }
      return;
    }
LABEL_102:
    unsigned int v54 = *((_DWORD *)v48 + 4);
    if (v50 < v54)
    {
      *((_DWORD *)v48 + 5) = v50 + 1;
      *(void *)(v49 + 8 * v50) = v47;
LABEL_130:
      uint64_t v27 = (llvm::Value *)v47;
      goto LABEL_75;
    }
  }
  else
  {
    unsigned int v54 = *((_DWORD *)v48 + 4);
  }
  if (3 * v54 <= 4 * ((int)v50 - *((_DWORD *)v48 + 6)))
  {
    if (v54 >= 0x40) {
      v54 *= 2;
    }
    else {
      unsigned int v54 = 128;
    }
  }
  else if (v54 - v50 >= v54 >> 3)
  {
    goto LABEL_111;
  }
  int v64 = v47;
  llvm::SmallPtrSetImplBase::Grow(*a1, v54);
  unsigned int v47 = v64;
  unsigned int v54 = *((_DWORD *)v48 + 4);
  uint64_t v49 = *((void *)v48 + 1);
LABEL_111:
  unsigned int v55 = v54 - 1;
  unsigned int v56 = (v54 - 1) & ((v47 >> 4) ^ (v47 >> 9));
  int v57 = (unsigned int **)(v49 + 8 * v56);
  int v58 = *v57;
  if (*v57 != (unsigned int *)-1)
  {
    uint64_t v59 = 0;
    int v60 = 1;
    while (v58 != v47)
    {
      if (v59) {
        BOOL v61 = 0;
      }
      else {
        BOOL v61 = v58 == (unsigned int *)-2;
      }
      if (v61) {
        uint64_t v59 = v57;
      }
      unsigned int v62 = v56 + v60++;
      unsigned int v56 = v62 & v55;
      int v57 = (unsigned int **)(v49 + 8 * (v62 & v55));
      int v58 = *v57;
      if (*v57 == (unsigned int *)-1) {
        goto LABEL_123;
      }
    }
    return;
  }
  uint64_t v59 = 0;
LABEL_123:
  if (v59) {
    unsigned int v63 = v59;
  }
  else {
    unsigned int v63 = v57;
  }
  if (*v63 != v47)
  {
    if (*v63 == (unsigned int *)-2) {
      --*((_DWORD *)v48 + 6);
    }
    else {
      ++*((_DWORD *)v48 + 5);
    }
    *unsigned int v63 = v47;
    goto LABEL_130;
  }
}

uint64_t sub_1CC63C06C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (*(void *)result + 8 * v4 == a2)
  {
    return sub_1CC63C1F0(result, a3, 0);
  }
  else
  {
    uint64_t v5 = a3;
    unint64_t v6 = 0;
    if (a3)
    {
      uint64_t v7 = a3;
      do
      {
        ++v6;
        uint64_t v7 = *(void *)(v7 + 8);
      }
      while (v7);
    }
    uint64_t v8 = (a2 - v3) >> 3;
    if (v6 + v4 > *(unsigned int *)(result + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v9 = (char *)(v3 + 8 * v8);
    uint64_t v10 = (char *)(v3 + 8 * v4);
    unint64_t v11 = (v10 - v9) >> 3;
    if (v11 >= v6)
    {
      unsigned int v12 = &v10[-8 * v6];
      BOOL result = sub_1CD4570C8(result, v12, (char *)(v3 + 8 * v4));
      if (v12 != v9) {
        BOOL result = (uint64_t)memmove(&v10[-(v12 - v9)], v9, v12 - v9);
      }
      for (; v5; uint64_t v5 = *(void *)(v5 + 8))
      {
        *(void *)uint64_t v9 = *(void *)(v5 + 24);
        v9 += 8;
      }
    }
    else
    {
      *(_DWORD *)(result + 8) = v4 + v6;
      if (v8 != v4)
      {
        BOOL result = (uint64_t)memcpy((void *)(v3 + 8 * (v4 + v6) - 8 * v11), v9, v10 - v9);
        do
        {
          *(void *)uint64_t v9 = *(void *)(v5 + 24);
          v9 += 8;
          uint64_t v5 = *(void *)(v5 + 8);
          --v11;
        }
        while (v11);
      }
      for (; v5; uint64_t v5 = *(void *)(v5 + 8))
      {
        *(void *)uint64_t v10 = *(void *)(v5 + 24);
        v10 += 8;
      }
    }
  }
  return result;
}

uint64_t sub_1CC63C1F0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  if (a2 == a3)
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = a2;
    do
    {
      ++v4;
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != a3);
  }
  uint64_t v6 = *(unsigned int *)(result + 8);
  if (v4 + v6 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2 != a3)
  {
    uint64_t v7 = (void *)(*(void *)result + 8 * v6);
    do
    {
      *v7++ = *(void *)(v3 + 24);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != a3);
  }
  *(_DWORD *)(result + 8) = v6 + v4;
  return result;
}

void sub_1CC63C29C(llvm::raw_ostream *a1, uint64_t a2, uint64_t a3, llvm::Value *a4)
{
  uint64_t v59 = a2;
  if (!a2) {
    return;
  }
  sub_1CC63CB1C(a1, a2, a4);
  uint64_t v8 = (unint64_t *)(a2 + 48);
  uint64_t v9 = *(unsigned int *)(a2 + 8);
  uint64_t v10 = 8 * v9;
  if (!v9)
  {
    char v14 = *(unsigned char *)(a2 + 13);
    if ((v14 & 2) != 0) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  uint64_t v11 = 8 * v9;
  unsigned int v12 = (std::string::size_type *)(a2 + 48);
  do
  {
    std::string::size_type v13 = *v12;
    v53.__r_.__value_.__r.__words[0] = v13;
    if (v13)
    {
      if (*(unsigned char *)(v13 + 8) == 2) {
        goto LABEL_8;
      }
      LODWORD(v13) = *(_DWORD *)(v13 + 12);
    }
    if ((byte_1CFAC7B70[(v13 - 1)] & 2) == 0)
    {
      llvm::Attribute::getAsString((llvm::Attribute *)&v53, 0, &v58);
      unsigned int v36 = std::string::insert(&v58, 0, "Attribute '");
      std::string::size_type v37 = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      uint64_t v38 = std::string::append(&v46, "' does not apply to parameters");
      unsigned int v39 = (void **)v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)__n128 __p = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      unsigned int v56 = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      v52[0] = 260;
      unsigned int v48 = (std::string *)__p;
      sub_1CD5DBE68(a1, (llvm::Twine *)&v48);
      if (a4 && *(void *)a1) {
        sub_1CD5DBED0((llvm::raw_ostream **)a1, a4);
      }
      if (SHIBYTE(v56) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v58.__r_.__value_.__l.__data_);
      }
      return;
    }
LABEL_8:
    ++v12;
    v11 -= 8;
  }
  while (v11);
  char v14 = *(unsigned char *)(a2 + 13);
  if ((v14 & 2) != 0 && v9 != 1)
  {
LABEL_11:
    unsigned int v15 = "Attribute 'immarg' is incompatible with other attributes";
    goto LABEL_117;
  }
LABEL_13:
  unsigned int v16 = *(unsigned __int8 *)(a2 + 20);
  char v17 = *(unsigned char *)(a2 + 21);
  if (v17 & 2 | v14 & 4) {
    int v18 = ((v16 >> 5) & 1) + (v16 >> 7) + (v17 & 1) + 1;
  }
  else {
    int v18 = ((v16 >> 5) & 1) + (v16 >> 7) + (v17 & 1);
  }
  if (v18 + ((*(unsigned __int8 *)(a2 + 14) >> 2) & 1) + ((v16 >> 4) & 1) >= 2)
  {
    unsigned int v15 = "Attributes 'byval', 'inalloca', 'preallocated', 'inreg', 'nest', 'byref', and 'sret' are incompatible!";
    goto LABEL_117;
  }
  if ((v16 & 0x80) != 0 && (*(unsigned char *)(a2 + 17) & 0x20) != 0)
  {
    unsigned int v15 = "Attributes 'inalloca and readonly' are incompatible!";
    goto LABEL_117;
  }
  if ((*(unsigned char *)(a2 + 21) & 2) != 0 && (*(unsigned char *)(a2 + 17) & 0x40) != 0)
  {
    unsigned int v15 = "Attributes 'sret and returned' are incompatible!";
    goto LABEL_117;
  }
  if (v16 & 8) != 0 && (*(unsigned char *)(a2 + 18))
  {
    unsigned int v15 = "Attributes 'zeroext and signext' are incompatible!";
    goto LABEL_117;
  }
  if ((*(unsigned char *)(a2 + 17) & 0x10) != 0)
  {
    if ((*(unsigned char *)(a2 + 17) & 0x20) != 0)
    {
      unsigned int v15 = "Attributes 'readnone and readonly' are incompatible!";
    }
    else
    {
      if ((v16 & 4) == 0) {
        goto LABEL_26;
      }
      unsigned int v15 = "Attributes 'readnone and writeonly' are incompatible!";
    }
LABEL_117:
    unsigned int v48 = (std::string *)v15;
    v52[0] = 259;
    sub_1CD5DBE68(a1, (llvm::Twine *)&v48);
    if (a4)
    {
      if (*(void *)a1) {
        sub_1CD5DBED0((llvm::raw_ostream **)a1, a4);
      }
    }
    return;
  }
LABEL_26:
  if ((*(unsigned char *)(a2 + 17) & 0x20) != 0 && (v16 & 4) != 0)
  {
    unsigned int v15 = "Attributes 'readonly and writeonly' are incompatible!";
    goto LABEL_117;
  }
  if ((*(unsigned char *)(a2 + 15) & 8) != 0 && (*(unsigned char *)(a2 + 12) & 4) != 0)
  {
    unsigned int v15 = "Attributes 'noinline and alwaysinline' are incompatible!";
    goto LABEL_117;
  }
  __p[0] = 0;
  __p[1] = 0;
  v57[0] = 0;
  v57[1] = 0;
  unsigned int v56 = v57;
  int v19 = *(unsigned __int8 *)(a3 + 8);
  if (v19 == 13)
  {
    unint64_t v20 = 0x80003080004C0000;
    uint64_t v21 = 13296;
LABEL_34:
    __p[0] = (void *)v20;
    __p[1] = (void *)v21;
  }
  else
  {
    *(_OWORD *)__n128 __p = xmmword_1CFAC6340;
    if (v19 != 15)
    {
      unint64_t v20 = 0x80013080004C0002;
      uint64_t v21 = 13304;
      goto LABEL_34;
    }
    unint64_t v20 = 0x1000000000002;
    uint64_t v21 = 8;
  }
  int v22 = v19;
  if ((v19 & 0xFE) == 0x12) {
    int v22 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
  }
  if (v22 != 15) {
    __p[1] = (void *)(v21 | 0x400);
  }
  if (v19 != 7)
  {
    if (v9) {
      goto LABEL_41;
    }
LABEL_46:
    if (!a3 || v19 != 15) {
      goto LABEL_79;
    }
    if ((v16 & 0x20) == 0) {
      goto LABEL_56;
    }
    if ((v17 & 4) == 0) {
      goto LABEL_53;
    }
    unsigned int Alignment = (unsigned __int16)llvm::AttributeSetNode::getAlignment((llvm::AttributeSetNode *)a2);
    if (Alignment <= 0x100) {
      LOBYTE(Alignment) = 0;
    }
    if (Alignment >= 0xFu)
    {
      BOOL v45 = "Attribute 'align' exceed the max size 2^14";
    }
    else
    {
LABEL_53:
      unsigned int v48 = (std::string *)v52;
      uint64_t v49 = (std::string *)v52;
      uint64_t v50 = 4;
      int v51 = 0;
      uint64_t v25 = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v59);
      unsigned int v26 = *(unsigned __int8 *)(v25 + 8);
      if (v26 > 0x11) {
        goto LABEL_133;
      }
      if (((1 << v26) & 0xAC7F) != 0) {
        goto LABEL_55;
      }
      if (((1 << v26) & 0x30000) == 0)
      {
LABEL_133:
        if ((v26 & 0xFE) != 0x12 && v26 != 21) {
          goto LABEL_134;
        }
      }
      if ((llvm::Type::isSizedDerivedType(v25, (uint64_t)&v48) & 1) == 0)
      {
LABEL_134:
        int v44 = "Attribute 'byval' does not support unsized types!";
        goto LABEL_143;
      }
      if (v49 != v48) {
        free(v49);
      }
LABEL_55:
      LOBYTE(v16) = *(unsigned char *)(a2 + 20);
LABEL_56:
      if ((v16 & 0x10) == 0) {
        goto LABEL_60;
      }
      unsigned int v48 = (std::string *)v52;
      uint64_t v49 = (std::string *)v52;
      uint64_t v50 = 4;
      int v51 = 0;
      uint64_t v27 = llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v59);
      unsigned int v28 = *(unsigned __int8 *)(v27 + 8);
      if (v28 > 0x11) {
        goto LABEL_130;
      }
      if (((1 << v28) & 0xAC7F) != 0) {
        goto LABEL_59;
      }
      if (((1 << v28) & 0x30000) == 0)
      {
LABEL_130:
        if ((v28 & 0xFE) != 0x12 && v28 != 21) {
          goto LABEL_131;
        }
      }
      if ((llvm::Type::isSizedDerivedType(v27, (uint64_t)&v48) & 1) == 0)
      {
LABEL_131:
        int v44 = "Attribute 'byref' does not support unsized types!";
        goto LABEL_143;
      }
      if (v49 != v48) {
        free(v49);
      }
LABEL_59:
      LOBYTE(v16) = *(unsigned char *)(a2 + 20);
LABEL_60:
      if ((v16 & 0x80) != 0)
      {
        unsigned int v48 = (std::string *)v52;
        uint64_t v49 = (std::string *)v52;
        uint64_t v50 = 4;
        int v51 = 0;
        uint64_t v29 = llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v59);
        unsigned int v30 = *(unsigned __int8 *)(v29 + 8);
        if (v30 <= 0x11)
        {
          if (((1 << v30) & 0xAC7F) != 0) {
            goto LABEL_63;
          }
          if (((1 << v30) & 0x30000) != 0) {
            goto LABEL_112;
          }
        }
        if ((v30 & 0xFE) == 0x12 || v30 == 21)
        {
LABEL_112:
          if (llvm::Type::isSizedDerivedType(v29, (uint64_t)&v48))
          {
            if (v49 != v48) {
              free(v49);
            }
            goto LABEL_63;
          }
        }
        int v44 = "Attribute 'inalloca' does not support unsized types!";
LABEL_143:
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
        __int16 v47 = 259;
        sub_1CD5DBE68(a1, (llvm::Twine *)&v46);
        if (a4 && *(void *)a1) {
          sub_1CD5DBED0((llvm::raw_ostream **)a1, a4);
        }
        if (v49 != v48) {
          free(v49);
        }
        goto LABEL_79;
      }
LABEL_63:
      if (*(unsigned char *)(a2 + 21))
      {
        unsigned int v48 = (std::string *)v52;
        uint64_t v49 = (std::string *)v52;
        uint64_t v50 = 4;
        int v51 = 0;
        uint64_t PreallocatedType = llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v59);
        unsigned int v32 = *(unsigned __int8 *)(PreallocatedType + 8);
        if (v32 <= 0x11)
        {
          if (((1 << v32) & 0xAC7F) != 0) {
            goto LABEL_66;
          }
          if (((1 << v32) & 0x30000) != 0) {
            goto LABEL_95;
          }
        }
        if ((v32 & 0xFE) == 0x12 || v32 == 21)
        {
LABEL_95:
          if (llvm::Type::isSizedDerivedType(PreallocatedType, (uint64_t)&v48))
          {
            if (v49 != v48) {
              free(v49);
            }
            goto LABEL_66;
          }
        }
        int v44 = "Attribute 'preallocated' does not support unsized types!";
        goto LABEL_143;
      }
LABEL_66:
      if (!*(void *)(a3 + 24)) {
        goto LABEL_79;
      }
      uint64_t v33 = **(void **)(a3 + 16);
      if (*(unsigned char *)(v33 + 8) != 15 && *(char *)(a2 + 19) < 0)
      {
        BOOL v45 = "Attribute 'swifterror' only applies to parameters with pointer to pointer type!";
      }
      else
      {
        char v34 = *(unsigned char *)(a2 + 20);
        if ((v34 & 0x10) != 0 && llvm::AttributeSet::getByRefType((llvm::AttributeSet *)&v59) != v33)
        {
          BOOL v45 = "Attribute 'byref' type does not match parameter!";
        }
        else if ((v34 & 0x20) != 0 {
               && (uint64_t v35 = llvm::AttributeSet::getByValType((llvm::AttributeSet *)&v59)) != 0
        }
               && v35 != v33)
        {
          BOOL v45 = "Attribute 'byval' type does not match parameter!";
        }
        else if ((*(unsigned char *)(a2 + 21) & 1) != 0 {
               && llvm::AttributeSet::getPreallocatedType((llvm::AttributeSet *)&v59) != v33)
        }
        {
          BOOL v45 = "Attribute 'preallocated' type does not match parameter!";
        }
        else if (v34 < 0 && llvm::AttributeSet::getInAllocaType((llvm::AttributeSet *)&v59) != v33)
        {
          BOOL v45 = "Attribute 'inalloca' type does not match parameter!";
        }
        else
        {
          if ((v34 & 0x40) == 0 || llvm::AttributeSet::getElementType((llvm::AttributeSet *)&v59) == v33) {
            goto LABEL_79;
          }
          BOOL v45 = "Attribute 'elementtype' type does not match parameter!";
        }
      }
    }
    unsigned int v48 = (std::string *)v45;
    v52[0] = 259;
    sub_1CD5DBE68(a1, (llvm::Twine *)&v48);
    if (a4 && *(void *)a1) {
      sub_1CD5DBED0((llvm::raw_ostream **)a1, a4);
    }
    goto LABEL_79;
  }
  __p[0] = (void *)(v20 | 0x1000000000);
  if (!v9) {
    goto LABEL_46;
  }
LABEL_41:
  while (2)
  {
    unint64_t v23 = *v8;
    unint64_t v54 = v23;
    if (v23)
    {
      if (*(unsigned char *)(v23 + 8) != 2)
      {
        unint64_t v23 = *(unsigned int *)(v23 + 12);
        break;
      }
LABEL_45:
      ++v8;
      v10 -= 8;
      if (!v10) {
        goto LABEL_46;
      }
      continue;
    }
    break;
  }
  if (((*(unint64_t *)((char *)__p + ((v23 >> 3) & 0x1FFFFFF8)) >> v23) & 1) == 0) {
    goto LABEL_45;
  }
  llvm::Attribute::getAsString((llvm::Attribute *)&v54, 0, &v53);
  int v40 = std::string::insert(&v53, 0, "Attribute '");
  std::string::size_type v41 = v40->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v41;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  unsigned int v42 = std::string::append(&v58, "' applied to incompatible type!");
  std::string::size_type v43 = v42->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v43;
  v42->__r_.__value_.__l.__size_ = 0;
  v42->__r_.__value_.__r.__words[2] = 0;
  v42->__r_.__value_.__r.__words[0] = 0;
  v52[0] = 260;
  unsigned int v48 = &v46;
  sub_1CD5DBE68(a1, (llvm::Twine *)&v48);
  if (a4 && *(void *)a1) {
    sub_1CD5DBED0((llvm::raw_ostream **)a1, a4);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
LABEL_79:
  sub_1CC1E4850((uint64_t)&v56, v57[0]);
}

void sub_1CC63CB1C(llvm::raw_ostream *a1, uint64_t a2, llvm::Value *a3)
{
  if (a2) {
    uint64_t v3 = (uint64_t *)(a2 + 48);
  }
  else {
    uint64_t v3 = 0;
  }
  if (a2) {
    uint64_t v4 = a2 + 48 + 8 * *(unsigned int *)(a2 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v3 == (uint64_t *)v4) {
    return;
  }
  while (1)
  {
    uint64_t v71 = *v3;
    uint64_t v5 = v71;
    if (!v71) {
      goto LABEL_89;
    }
    int v6 = *(unsigned __int8 *)(v71 + 8);
    if (v6 != 2) {
      break;
    }
    int v7 = *(_DWORD *)(v71 + 12);
    if (v7 == 19)
    {
      if (*(void *)(v71 + 24) == 0x662D786F72707061
        && *(void *)(v71 + 32) == 0x6D2D70662D636E75
        && *(void *)(v71 + 35) == 0x6874616D2D70662DLL)
      {
        uint64_t v29 = *(unsigned int *)(v71 + 16);
        if (v29)
        {
          unsigned int v30 = (_DWORD *)(v71 + 44);
          if (v29 == 5)
          {
            if (*v30 != 1936482662 || *(unsigned char *)(v71 + 48) != 101)
            {
LABEL_145:
              v67[0] = "invalid value for 'approx-func-fp-math' attribute: ";
              uint64_t v68 = v71 + 44;
              uint64_t v69 = v29;
              __int16 v70 = 1283;
              sub_1CD5DBE68(a1, (llvm::Twine *)v67);
            }
          }
          else if (v29 != 4 || *v30 != 1702195828)
          {
            goto LABEL_145;
          }
        }
      }
      int v7 = *(_DWORD *)(v5 + 12);
    }
    if (v7 == 18)
    {
      BOOL v10 = *(void *)(v5 + 24) == 0x6572702D7373656CLL && *(void *)(v5 + 32) == 0x6D70662D65736963;
      if (v10 && *(_WORD *)(v5 + 40) == 25697)
      {
        uint64_t v31 = *(unsigned int *)(v5 + 16);
        if (v31)
        {
          unsigned int v32 = (_DWORD *)(v5 + 43);
          if (v31 == 5)
          {
            if (*v32 != 1936482662 || *(unsigned char *)(v5 + 47) != 101)
            {
LABEL_150:
              v67[0] = "invalid value for 'less-precise-fpmad' attribute: ";
              uint64_t v68 = v5 + 43;
              uint64_t v69 = v31;
              __int16 v70 = 1283;
              sub_1CD5DBE68(a1, (llvm::Twine *)v67);
            }
          }
          else if (v31 != 4 || *v32 != 1702195828)
          {
            goto LABEL_150;
          }
        }
      }
    }
    int v12 = *(_DWORD *)(v5 + 12);
    if (v12 == 15)
    {
      if (*(void *)(v5 + 24) == 0x2D73666E692D6F6ELL && *(void *)(v5 + 31) == 0x6874616D2D70662DLL)
      {
        uint64_t v33 = *(unsigned int *)(v5 + 16);
        if (v33)
        {
          char v34 = (_DWORD *)(v5 + 40);
          if (v33 == 5)
          {
            if (*v34 != 1936482662 || *(unsigned char *)(v5 + 44) != 101)
            {
LABEL_155:
              v67[0] = "invalid value for 'no-infs-fp-math' attribute: ";
              uint64_t v68 = v5 + 40;
              uint64_t v69 = v33;
              __int16 v70 = 1283;
              sub_1CD5DBE68(a1, (llvm::Twine *)v67);
            }
          }
          else if (v33 != 4 || *v34 != 1702195828)
          {
            goto LABEL_155;
          }
        }
      }
      int v12 = *(_DWORD *)(v5 + 12);
    }
    if (v12 == 21)
    {
      BOOL v14 = *(void *)(v5 + 24) == 0x6E696C6E692D6F6ELL && *(void *)(v5 + 32) == 0x742D656E696C2D65;
      if (v14 && *(void *)(v5 + 37) == 0x73656C6261742D65)
      {
        uint64_t v35 = *(unsigned int *)(v5 + 16);
        if (v35)
        {
          unsigned int v36 = (_DWORD *)(v5 + 46);
          if (v35 == 5)
          {
            if (*v36 != 1936482662 || *(unsigned char *)(v5 + 50) != 101)
            {
LABEL_160:
              v67[0] = "invalid value for 'no-inline-line-tables' attribute: ";
              uint64_t v68 = v5 + 46;
              uint64_t v69 = v35;
              __int16 v70 = 1283;
              sub_1CD5DBE68(a1, (llvm::Twine *)v67);
            }
          }
          else if (v35 != 4 || *v36 != 1702195828)
          {
            goto LABEL_160;
          }
        }
      }
    }
    int v16 = *(_DWORD *)(v5 + 12);
    if (v16 == 14)
    {
      if (*(void *)(v5 + 24) == 0x2D706D756A2D6F6ELL && *(void *)(v5 + 30) == 0x73656C6261742D70)
      {
        uint64_t v37 = *(unsigned int *)(v5 + 16);
        if (v37)
        {
          uint64_t v38 = (_DWORD *)(v5 + 39);
          if (v37 == 5)
          {
            if (*v38 != 1936482662 || *(unsigned char *)(v5 + 43) != 101)
            {
LABEL_165:
              v67[0] = "invalid value for 'no-jump-tables' attribute: ";
              uint64_t v68 = v5 + 39;
              uint64_t v69 = v37;
              __int16 v70 = 1283;
              sub_1CD5DBE68(a1, (llvm::Twine *)v67);
            }
          }
          else if (v37 != 4 || *v38 != 1702195828)
          {
            goto LABEL_165;
          }
        }
      }
      int v16 = *(_DWORD *)(v5 + 12);
    }
    if (v16 == 15 && *(void *)(v5 + 24) == 0x2D736E616E2D6F6ELL && *(void *)(v5 + 31) == 0x6874616D2D70662DLL)
    {
      uint64_t v39 = *(unsigned int *)(v5 + 16);
      if (v39)
      {
        int v40 = (_DWORD *)(v5 + 40);
        if (v39 == 5)
        {
          if (*v40 != 1936482662 || *(unsigned char *)(v5 + 44) != 101)
          {
LABEL_170:
            v67[0] = "invalid value for 'no-nans-fp-math' attribute: ";
            uint64_t v68 = v5 + 40;
            uint64_t v69 = v39;
            __int16 v70 = 1283;
            sub_1CD5DBE68(a1, (llvm::Twine *)v67);
          }
        }
        else if (v39 != 4 || *v40 != 1702195828)
        {
          goto LABEL_170;
        }
      }
    }
    int v19 = *(_DWORD *)(v5 + 12);
    if (v19 != 23) {
      goto LABEL_69;
    }
    if (*(void *)(v5 + 24) == 0x656E6769732D6F6ELL
      && *(void *)(v5 + 32) == 0x2D736F72657A2D64
      && *(void *)(v5 + 39) == 0x6874616D2D70662DLL)
    {
      uint64_t v41 = *(unsigned int *)(v5 + 16);
      if (v41)
      {
        unsigned int v42 = (_DWORD *)(v5 + 48);
        if (v41 == 5)
        {
          if (*v42 != 1936482662 || *(unsigned char *)(v5 + 52) != 101)
          {
LABEL_175:
            v67[0] = "invalid value for 'no-signed-zeros-fp-math' attribute: ";
            uint64_t v68 = v5 + 48;
            uint64_t v69 = v41;
            __int16 v70 = 1283;
            sub_1CD5DBE68(a1, (llvm::Twine *)v67);
          }
        }
        else if (v41 != 4 || *v42 != 1702195828)
        {
          goto LABEL_175;
        }
      }
    }
    int v19 = *(_DWORD *)(v5 + 12);
    if (v19 == 23)
    {
      if (*(void *)(v5 + 24) == 0x2D656C69666F7270
        && *(void *)(v5 + 32) == 0x612D656C706D6173
        && *(void *)(v5 + 39) == 0x6574617275636361)
      {
        uint64_t v45 = *(unsigned int *)(v5 + 16);
        if (v45)
        {
          std::string v46 = (_DWORD *)(v5 + 48);
          if (v45 == 5)
          {
            if (*v46 != 1936482662 || *(unsigned char *)(v5 + 52) != 101)
            {
LABEL_185:
              v67[0] = "invalid value for 'profile-sample-accurate' attribute: ";
              uint64_t v68 = v5 + 48;
              uint64_t v69 = v45;
              __int16 v70 = 1283;
              sub_1CD5DBE68(a1, (llvm::Twine *)v67);
            }
          }
          else if (v45 != 4 || *v46 != 1702195828)
          {
            goto LABEL_185;
          }
        }
      }
      int v19 = *(_DWORD *)(v5 + 12);
    }
LABEL_69:
    if (v19 != 14) {
      goto LABEL_74;
    }
    if (*(void *)(v5 + 24) != 0x662D656661736E75 || *(void *)(v5 + 30) != 0x6874616D2D70662DLL) {
      goto LABEL_74;
    }
    uint64_t v43 = *(unsigned int *)(v5 + 16);
    if (!v43) {
      goto LABEL_74;
    }
    int v44 = (_DWORD *)(v5 + 39);
    if (v43 == 5)
    {
      if (*v44 == 1936482662 && *(unsigned char *)(v5 + 43) == 101) {
        goto LABEL_74;
      }
LABEL_180:
      v67[0] = "invalid value for 'unsafe-fp-math' attribute: ";
      uint64_t v68 = v5 + 39;
      uint64_t v69 = v43;
      __int16 v70 = 1283;
      sub_1CD5DBE68(a1, (llvm::Twine *)v67);
      goto LABEL_74;
    }
    if (v43 != 4 || *v44 != 1702195828) {
      goto LABEL_180;
    }
LABEL_74:
    if (*(_DWORD *)(v5 + 12) != 18) {
      goto LABEL_89;
    }
    BOOL v25 = *(void *)(v5 + 24) == 0x706D61732D657375 && *(void *)(v5 + 32) == 0x69666F72702D656CLL;
    if (!v25 || *(_WORD *)(v5 + 40) != 25964) {
      goto LABEL_89;
    }
    uint64_t v27 = *(unsigned int *)(v5 + 16);
    if (!v27) {
      goto LABEL_89;
    }
    unsigned int v28 = (_DWORD *)(v5 + 43);
    if (v27 == 5)
    {
      if (*v28 == 1936482662 && *(unsigned char *)(v5 + 47) == 101) {
        goto LABEL_89;
      }
    }
    else if (v27 == 4 && *v28 == 1702195828)
    {
      goto LABEL_89;
    }
    v67[0] = "invalid value for 'use-sample-profile' attribute: ";
    uint64_t v68 = v5 + 43;
    uint64_t v69 = v27;
    __int16 v70 = 1283;
    sub_1CD5DBE68(a1, (llvm::Twine *)v67);
LABEL_89:
    if (++v3 == (uint64_t *)v4) {
      return;
    }
  }
  if ((v6 == 1) == (*(_DWORD *)(v71 + 12) - 74) < 7) {
    goto LABEL_89;
  }
  llvm::Attribute::getAsString((llvm::Attribute *)&v71, 0, &v63);
  int v57 = std::string::insert(&v63, 0, "Attribute '");
  std::string::size_type v58 = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  uint64_t v59 = std::string::append(&v64, "' should have an Argument");
  std::string::size_type v60 = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)__n128 __p = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  std::string::size_type v66 = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  __int16 v70 = 260;
  v67[0] = __p;
  sub_1CD5DBE68(a1, (llvm::Twine *)v67);
  if (a3 && *(void *)a1) {
    sub_1CD5DBED0((llvm::raw_ostream **)a1, a3);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_1CC63DBA0(uint64_t **a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = (llvm::raw_ostream *)a1[1];
  uint64_t v5 = **a1;
  if (*(_DWORD *)(v5 + 12) - 1 <= a4)
  {
    __int16 v12 = 1283;
    uint64_t v9 = "'allocsize' ";
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    int v7 = " argument is out of bounds";
  }
  else
  {
    if (*(unsigned char *)(*(void *)(*(void *)(v5 + 16) + 8 * (a4 + 1)) + 8) == 13) {
      return 1;
    }
    __int16 v12 = 1283;
    uint64_t v9 = "'allocsize' ";
    uint64_t v10 = a2;
    uint64_t v11 = a3;
    int v7 = " argument must refer to an integer parameter";
  }
  v13[0] = &v9;
  v13[2] = v7;
  __int16 v14 = 770;
  uint64_t v8 = (llvm::Value **)a1[2];
  sub_1CD5DBE68(v4, (llvm::Twine *)v13);
  if (*(void *)v4)
  {
    if (*v8) {
      sub_1CD5DBED0((llvm::raw_ostream **)v4, *v8);
    }
  }
  return 0;
}

unint64_t sub_1CC63DC84(unint64_t result, uint64_t a2, void *a3, size_t a4, llvm::Value *a5)
{
  uint64_t v33 = (llvm::raw_ostream *)result;
  if (!a2) {
    return result;
  }
  if (!*(_DWORD *)(a2 + 8)) {
    return result;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6) {
    return result;
  }
  int v7 = *(_DWORD *)(v6 + 40);
  if (!v7) {
    return result;
  }
  uint64_t v10 = *(void *)(v6 + 24);
  uint64_t v11 = (uint64_t)a3 + a4;
  BOOL result = sub_1CD0B03C8(a3, (uint64_t)a3 + a4);
  int v12 = v7 - 1;
  for (int i = 1; ; ++i)
  {
    int v14 = result & v12;
    uint64_t v15 = v10 + 24 * (result & v12);
    int v16 = *(const void **)v15;
    if (*(void *)v15 == -1)
    {
      if (a3 == (void *)-1) {
        goto LABEL_16;
      }
      goto LABEL_8;
    }
    if (v16 != (const void *)-2) {
      break;
    }
    if (a3 == (void *)-2) {
      goto LABEL_16;
    }
LABEL_8:
    if (v16 == (const void *)-1) {
      return result;
    }
    BOOL result = (i + v14);
  }
  if (a4 != *(void *)(v15 + 8)) {
    goto LABEL_8;
  }
  if (a4)
  {
    BOOL result = memcmp(a3, v16, a4);
    if (result) {
      goto LABEL_8;
    }
  }
LABEL_16:
  if (!*(_DWORD *)(a2 + 8)) {
    goto LABEL_43;
  }
  char v17 = *(unsigned __int8 **)(a2 + 40);
  if (!v17) {
    goto LABEL_44;
  }
  int v18 = *((_DWORD *)v17 + 10);
  if (!v18)
  {
LABEL_43:
    char v17 = 0;
    goto LABEL_44;
  }
  uint64_t v19 = *((void *)v17 + 3);
  BOOL result = sub_1CD0B03C8(a3, v11);
  int v20 = v18 - 1;
  for (int j = 1; ; ++j)
  {
    int v22 = result & v20;
    uint64_t v23 = v19 + 24 * (result & v20);
    int v24 = *(const void **)v23;
    if (*(void *)v23 == -1)
    {
      if (a3 == (void *)-1) {
        goto LABEL_30;
      }
      goto LABEL_22;
    }
    if (v24 != (const void *)-2) {
      break;
    }
    if (a3 == (void *)-2) {
      goto LABEL_30;
    }
LABEL_22:
    if (v24 == (const void *)-1) {
      goto LABEL_43;
    }
    BOOL result = (j + v22);
  }
  if (a4 != *(void *)(v23 + 8)) {
    goto LABEL_22;
  }
  if (a4)
  {
    BOOL result = memcmp(a3, *(const void **)v23, a4);
    if (result) {
      goto LABEL_22;
    }
  }
LABEL_30:
  char v17 = *(unsigned __int8 **)(v23 + 16);
  if (!v17 || (uint64_t v25 = *((unsigned int *)v17 + 4), v17 += *((unsigned int *)v17 + 3) + 25, !v25))
  {
LABEL_44:
    uint64_t v25 = 0;
    goto LABEL_45;
  }
  unint64_t v26 = 0;
  uint64_t v27 = v17;
  uint64_t v28 = v25;
  while (1)
  {
    int v29 = *v27;
    if ((v29 - 48) >= 0xA)
    {
      if ((v29 - 97) >= 0x1A)
      {
        if ((v29 - 65) > 0x19) {
          break;
        }
        int v30 = -55;
      }
      else
      {
        int v30 = -87;
      }
    }
    else
    {
      int v30 = -48;
    }
    unsigned int v31 = v30 + v29;
    if (v31 > 9) {
      break;
    }
    unint64_t v32 = 10 * v26 + v31;
    if (v26 > v32 / 0xA) {
      break;
    }
    ++v27;
    unint64_t v26 = v32;
    if (!--v28)
    {
      if (!HIDWORD(v32)) {
        return result;
      }
      break;
    }
  }
LABEL_45:
  __int16 v36 = 1283;
  v35[0] = "\"";
  v35[2] = a3;
  v35[3] = a4;
  v37[0] = v35;
  v37[2] = "\" takes an unsigned integer: ";
  __int16 v38 = 770;
  v39[0] = v37;
  v39[2] = v17;
  v39[3] = v25;
  __int16 v40 = 1282;
  BOOL result = (unint64_t)sub_1CD5DBE68(v33, (llvm::Twine *)v39);
  if (a5)
  {
    if (*(void *)v33) {
      return (unint64_t)sub_1CD5DBED0((llvm::raw_ostream **)v33, a5);
    }
  }
  return result;
}

llvm::raw_ostream *sub_1CC63DF40(llvm::raw_ostream *a1, llvm::DIExpression *this)
{
  BOOL result = (llvm::raw_ostream *)llvm::DIExpression::isValid(this);
  if ((result & 1) == 0)
  {
    uint64_t v5 = "invalid expression";
    __int16 v6 = 259;
    BOOL result = sub_1CD5DC588(a1, (llvm::Twine *)&v5);
    if (*(void *)a1) {
      return (llvm::raw_ostream *)sub_1CD5DC50C((llvm::raw_ostream **)a1, this);
    }
  }
  return result;
}

void sub_1CC63DFB0(llvm::raw_ostream *a1, unsigned int *a2)
{
  uint64_t v4 = *(unsigned int **)&a2[-2 * a2[2]];
  if (!v4)
  {
    v16[0] = "missing variable";
    __int16 v17 = 259;
    sub_1CD5DC588(a1, (llvm::Twine *)v16);
    return;
  }
  sub_1CC63E0C8((llvm::raw_ostream **)a1, v4);
  uint64_t v5 = &a2[-2 * a2[2]];
  uint64_t v6 = *((void *)v5 + 1);
  if (v6)
  {
    sub_1CC63DF40(a1, *((llvm::DIExpression **)v5 + 1));
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v6 + 24), *(uint64_t **)(v6 + 32), &v13);
    if (v14)
    {
      int v7 = *(llvm::DIVariable **)&a2[-2 * a2[2]];
      __int32 v8 = v13.i32[0];
      __int32 v9 = v13.i32[2];
      int v18 = (llvm::Metadata *)a2;
      unint64_t SizeInBits = llvm::DIVariable::getSizeInBits(v7);
      if (v11)
      {
        if ((v9 + v8) > SizeInBits)
        {
          int v12 = "fragment is larger than or outside of variable";
          goto LABEL_11;
        }
        if (SizeInBits == v8)
        {
          int v12 = "fragment covers entire variable";
LABEL_11:
          uint64_t v15 = v7;
          v16[0] = v12;
          __int16 v17 = 259;
          sub_1CD5DC670(a1, (llvm::Twine *)v16, &v18, &v15);
        }
      }
    }
  }
}

llvm::raw_ostream **sub_1CC63E0C8(llvm::raw_ostream **a1, unsigned int *a2)
{
  BOOL result = sub_1CC63E8C4(a1, a2);
  if (*((_WORD *)a2 + 1) != 52)
  {
    char v11 = "invalid tag";
    goto LABEL_14;
  }
  uint64_t v5 = (unsigned __int8 *)&a2[-2 * a2[2]];
  uint64_t v6 = (unsigned int *)*((void *)v5 + 3);
  if (v6)
  {
    int v7 = *(unsigned __int8 *)v6;
    if ((v7 - 11) >= 4 && v7 != 33)
    {
      int8x16_t v13 = a2;
      v14[0] = "invalid type ref";
      __int16 v15 = 259;
      int v12 = v6;
      __int32 v8 = (llvm::Metadata **)&v13;
      __int32 v9 = (llvm::Metadata **)&v12;
      return sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v14, v8, v9);
    }
    goto LABEL_7;
  }
  if (*((unsigned char *)a2 + 33))
  {
    char v11 = "missing global variable type";
LABEL_14:
    v14[0] = v11;
    __int16 v15 = 259;
    BOOL result = (llvm::raw_ostream **)sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)v14);
    if (*a1) {
      return sub_1CD5DC50C(a1, (llvm::Metadata *)a2);
    }
    return result;
  }
LABEL_7:
  uint64_t v10 = (unsigned int *)*((void *)v5 + 6);
  int8x16_t v13 = v10;
  if (v10 && *(unsigned char *)v10 != 12)
  {
    v14[0] = "invalid static data member declaration";
    __int16 v15 = 259;
    int v12 = a2;
    __int32 v8 = (llvm::Metadata **)&v12;
    __int32 v9 = (llvm::Metadata **)&v13;
    return sub_1CD5DC670((llvm::raw_ostream *)a1, (llvm::Twine *)v14, v8, v9);
  }
  return result;
}

llvm::raw_ostream *sub_1CC63E1E8(llvm::raw_ostream *result, llvm::Metadata *a2, uint64_t a3)
{
  uint64_t v4 = (llvm::raw_ostream **)result;
  uint64_t v5 = (unsigned __int8 *)*((void *)a2 + 16);
  if (!v5)
  {
    int8x16_t v13 = "Expected valid value";
    goto LABEL_25;
  }
  if (*(unsigned char *)(*(void *)v5 + 8) == 9)
  {
    __int16 v15 = a2;
    v16[0] = "Unexpected metadata round-trip through values";
    __int16 v17 = 259;
    char v14 = (llvm::Value *)v5;
    return sub_1CD5DC844(result, (llvm::Twine *)v16, &v15, &v14);
  }
  int v6 = *(unsigned __int8 *)a2;
  BOOL v7 = v6 == 2;
  if (v6 == 2) {
    __int32 v8 = a2;
  }
  else {
    __int32 v8 = 0;
  }
  __int16 v15 = v8;
  if (v7)
  {
    if (a3)
    {
      unsigned int v9 = v5[16];
      if (v9 <= 0x1B) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = v5;
      }
      char v14 = (llvm::Value *)v10;
      if (v10)
      {
        uint64_t v5 = (unsigned __int8 *)*((void *)v10 + 5);
        if (!v5)
        {
          v16[0] = "function-local metadata not in basic block";
          __int16 v17 = 259;
          return sub_1CD5DC844(result, (llvm::Twine *)v16, &v15, &v14);
        }
      }
      else
      {
        if (v9 == 21)
        {
          char v11 = (uint64_t *)(v5 + 24);
          goto LABEL_15;
        }
        if (v9 != 22)
        {
          uint64_t v12 = 0;
          goto LABEL_16;
        }
      }
      char v11 = (uint64_t *)(v5 + 56);
LABEL_15:
      uint64_t v12 = *v11;
LABEL_16:
      if (v12 == a3) {
        return result;
      }
      int8x16_t v13 = "function-local metadata used in wrong function";
      goto LABEL_25;
    }
    int8x16_t v13 = "function-local metadata used outside a function";
LABEL_25:
    v16[0] = v13;
    __int16 v17 = 259;
    BOOL result = sub_1CD5DBE68(result, (llvm::Twine *)v16);
    if (*v4) {
      return (llvm::raw_ostream *)sub_1CD5DC50C(v4, a2);
    }
  }
  return result;
}

llvm::raw_ostream **sub_1CC63E33C(llvm::raw_ostream **result, unsigned int *a2)
{
  if (*(unsigned char *)a2 != 15)
  {
    uint64_t v2 = *(llvm::Metadata **)&a2[-2 * a2[2]];
    int v6 = v2;
    if (v2)
    {
      if (*(unsigned char *)v2 != 15)
      {
        uint64_t v3 = (llvm::Metadata *)a2;
        uint64_t v4 = "invalid file";
        __int16 v5 = 259;
        return sub_1CD5DC670((llvm::raw_ostream *)result, (llvm::Twine *)&v4, &v3, &v6);
      }
    }
  }
  return result;
}

llvm::raw_ostream **sub_1CC63E3AC(llvm::raw_ostream **result, llvm::Metadata *a2, unsigned int *a3)
{
  int v3 = *(unsigned __int8 *)a3;
  BOOL v4 = v3 == 4;
  if (v3 == 4) {
    __int16 v5 = (llvm::Metadata *)a3;
  }
  else {
    __int16 v5 = 0;
  }
  int8x16_t v13 = v5;
  if (v4)
  {
    uint64_t v6 = a3[2];
    if (v6)
    {
      BOOL v7 = (llvm::Metadata **)&a3[-2 * v6];
      while (1)
      {
        __int32 v8 = *v7;
        uint64_t v10 = v8;
        if (!v8 || (*(unsigned char *)v8 & 0xFE) != 0x16) {
          break;
        }
        if (++v7 == (llvm::Metadata **)v5) {
          return result;
        }
      }
      v11[0] = "invalid template parameter";
      __int16 v12 = 259;
      unsigned int v9 = a2;
      return sub_1CD5DC6E0((llvm::raw_ostream *)result, (llvm::Twine *)v11, &v9, &v13, &v10);
    }
  }
  else
  {
    uint64_t v10 = a2;
    v11[0] = "invalid template params";
    __int16 v12 = 259;
    unsigned int v9 = (llvm::Metadata *)a3;
    return sub_1CD5DC670((llvm::raw_ostream *)result, (llvm::Twine *)v11, &v10, &v9);
  }
  return result;
}

llvm::raw_ostream *sub_1CC63E46C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = a1 + 808;
  if ((sub_1CC152E2C(*(void *)(a1 + 808), *(_DWORD *)(a1 + 824), a2, v8) & 1) == 0)
  {
    v8[0] = a2;
    *(unsigned char *)(sub_1CC63E514(v6, v8) + 8) = a3;
  }
  v8[0] = a2;
  BOOL result = (llvm::raw_ostream *)sub_1CC63E514(v6, v8);
  if (*((unsigned __int8 *)result + 8) != a3)
  {
    v8[0] = (uint64_t)"inconsistent use of embedded source";
    __int16 v9 = 259;
    return sub_1CD5DC588((llvm::raw_ostream *)a1, (llvm::Twine *)v8);
  }
  return result;
}

uint64_t sub_1CC63E514(uint64_t a1, uint64_t *a2)
{
  uint64_t v8 = 0;
  char v4 = sub_1CC152E2C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3) {
      goto LABEL_5;
    }
  }
  else
  {
    v7 *= 2;
  }
  sub_1CC63E5FC(a1, v7);
  uint64_t v8 = 0;
  sub_1CC152E2C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  uint64_t result = v8;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *(void *)uint64_t result = *a2;
  *(unsigned char *)(result + 8) = 0;
  return result;
}

void *sub_1CC63E5FC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC63E6C8(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC63E6C8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CC152E2C(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      uint64_t v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((unsigned char *)v10 + 8) = *(unsigned char *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

llvm::raw_ostream **sub_1CC63E778(llvm::raw_ostream **result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(_WORD *)(a2 + 2) != 11)
  {
    uint64_t v6 = "invalid tag";
LABEL_9:
    v9[0] = v6;
    __int16 v10 = 259;
    uint64_t result = (llvm::raw_ostream **)sub_1CD5DC588((llvm::raw_ostream *)result, (llvm::Twine *)v9);
    if (*v3) {
      return sub_1CD5DC50C(v3, (llvm::Metadata *)a2);
    }
    return result;
  }
  uint64_t v4 = *(llvm::Metadata **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  if (!v4 || (int v5 = *(unsigned __int8 *)v4, (v5 - 20) <= 0xFFFFFFFC))
  {
    uint64_t v8 = (llvm::Metadata *)a2;
    v9[0] = "invalid local scope";
    __int16 v10 = 259;
    int v7 = v4;
    return sub_1CD5DC670((llvm::raw_ostream *)result, (llvm::Twine *)v9, &v8, &v7);
  }
  if (v5 == 17 && (*((unsigned char *)v4 + 44) & 8) == 0)
  {
    uint64_t v6 = "scope points into the type hierarchy";
    goto LABEL_9;
  }
  return result;
}

llvm::raw_ostream **sub_1CC63E854(llvm::raw_ostream **result, unsigned int *a2)
{
  uint64_t v2 = *(llvm::Metadata **)&a2[-2 * a2[2] + 2];
  if (v2)
  {
    int v3 = *(unsigned __int8 *)v2;
    if ((v3 - 11) >= 4 && v3 != 33)
    {
      int v5 = (llvm::Metadata *)a2;
      uint64_t v6 = "invalid type ref";
      __int16 v7 = 259;
      uint64_t v4 = v2;
      return sub_1CD5DC670((llvm::raw_ostream *)result, (llvm::Twine *)&v6, &v5, &v4);
    }
  }
  return result;
}

llvm::raw_ostream **sub_1CC63E8C4(llvm::raw_ostream **result, unsigned int *a2)
{
  uint64_t v2 = (llvm::Metadata **)&a2[-2 * a2[2]];
  __int16 v10 = *v2;
  if (v10)
  {
    int v3 = *(unsigned __int8 *)v10;
    BOOL v4 = (v3 - 11) < 0xB || v3 == 31;
    if (!v4 && v3 != 33)
    {
      uint64_t v6 = "invalid scope";
LABEL_13:
      __int16 v7 = (llvm::Metadata *)a2;
      uint64_t v8 = v6;
      __int16 v9 = 259;
      return sub_1CD5DC670((llvm::raw_ostream *)result, (llvm::Twine *)&v8, &v7, &v10);
    }
  }
  int v5 = v2[2];
  __int16 v10 = v5;
  if (v5 && *(unsigned char *)v5 != 15)
  {
    uint64_t v6 = "invalid file";
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1CC63E95C(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (unint64_t *)result;
LABEL_2:
  __int16 v7 = a2 - 2;
  while (2)
  {
    uint64_t v8 = 1 - a4;
LABEL_4:
    uint64_t v9 = (char *)a2 - (char *)v6;
    unint64_t v10 = ((char *)a2 - (char *)v6) >> 4;
    if (v10 == 2)
    {
      unint64_t v11 = *v7;
      unint64_t v12 = *v6;
      if (v11 < *v6 || v12 >= v11 && *(a2 - 1) < v6[1])
      {
        *uint64_t v6 = v11;
        *(a2 - 2) = v12;
        unint64_t v13 = v6[1];
        v6[1] = *(a2 - 1);
        *(a2 - 1) = v13;
      }
      return result;
    }
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 3uLL:
        return sub_1CC63EEEC(v6, v6 + 2, v7);
      case 4uLL:
        return sub_1CC63F4F4(v6, v6 + 2, v6 + 4, v7);
      case 5uLL:
        return sub_1CC63F5F8(v6, v6 + 2, v6 + 4, v6 + 6, v7);
      default:
        if (v9 <= 383)
        {
          if (a5)
          {
            return (uint64_t)sub_1CC63ED70(v6, a2);
          }
          else
          {
            return (uint64_t)sub_1CC63EE50(v6, a2);
          }
        }
        int v24 = v7;
        uint64_t v25 = a2;
        if (v8 != 1)
        {
          uint64_t v14 = a5;
          uint64_t v15 = v8;
          unint64_t v16 = v10 >> 1;
          __int16 v17 = &v6[2 * (v10 >> 1)];
          if ((unint64_t)v9 >= 0x801)
          {
            sub_1CC63EEEC(v6, &v6[2 * (v10 >> 1)], v7);
            sub_1CC63EEEC(v6 + 2, v17 - 2, v25 - 4);
            sub_1CC63EEEC(v6 + 4, &v6[2 * v16 + 2], v25 - 6);
            sub_1CC63EEEC(v17 - 2, v17, &v6[2 * v16 + 2]);
            long long v22 = *(_OWORD *)v6;
            *(_OWORD *)uint64_t v6 = *(_OWORD *)v17;
            *(_OWORD *)__int16 v17 = v22;
          }
          else
          {
            sub_1CC63EEEC(&v6[2 * (v10 >> 1)], v6, v7);
          }
          if ((v14 & 1) == 0)
          {
            unint64_t v20 = *(v6 - 2);
            if (v20 >= *v6 && (*v6 < v20 || *(v6 - 1) >= v6[1]))
            {
              uint64_t result = (uint64_t)sub_1CC63F040(v6, v25);
              uint64_t v21 = (unint64_t *)result;
              goto LABEL_45;
            }
          }
          int v18 = sub_1CC63F184(v6, v25);
          if ((v19 & 1) == 0) {
            goto LABEL_30;
          }
          BOOL v23 = sub_1CC63F2CC(v6, v18);
          uint64_t v21 = v18 + 2;
          uint64_t result = sub_1CC63F2CC(v18 + 2, v25);
          if (!result)
          {
            if (!v23)
            {
LABEL_30:
              uint64_t result = sub_1CC63E95C(v6, v18, a3, -v15, v14 & 1);
              a4 = -v15;
              a5 = 0;
              uint64_t v6 = v18 + 2;
              __int16 v7 = v24;
              a2 = v25;
              continue;
            }
LABEL_45:
            uint64_t v8 = v15 + 1;
            uint64_t v6 = v21;
            __int16 v7 = v24;
            a2 = v25;
            a5 = v14;
            goto LABEL_4;
          }
          a4 = -v15;
          a2 = v18;
          a5 = v14;
          if (v23) {
            return result;
          }
          goto LABEL_2;
        }
        if (v6 != a2)
        {
          return (uint64_t)sub_1CC63F750(v6, a2, a2, a3);
        }
        return result;
    }
  }
}

unint64_t *sub_1CC63ED70(unint64_t *result, unint64_t *a2)
{
  if (result == a2) {
    return result;
  }
  uint64_t v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  BOOL v4 = result;
  do
  {
    int v5 = v4;
    BOOL v4 = v2;
    unint64_t v6 = v5[2];
    unint64_t v7 = *v5;
    if (v6 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_20;
      }
      unint64_t v8 = v5[3];
      if (v8 >= v5[1]) {
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v8 = v5[3];
    }
    void v5[2] = v7;
    v4[1] = v5[1];
    uint64_t v9 = result;
    if (v5 == result) {
      goto LABEL_19;
    }
    uint64_t v10 = v3;
    while (1)
    {
      unint64_t v11 = *(unint64_t *)((char *)result + v10 - 16);
      if (v6 < v11)
      {
        unint64_t v12 = *(unint64_t *)((char *)result + v10 - 8);
        goto LABEL_12;
      }
      if (v11 < v6)
      {
        uint64_t v9 = (unint64_t *)((char *)result + v10);
        goto LABEL_19;
      }
      unint64_t v12 = *(unint64_t *)((char *)result + v10 - 8);
      if (v8 >= v12) {
        break;
      }
LABEL_12:
      v5 -= 2;
      unint64_t v13 = (unint64_t *)((char *)result + v10);
      *unint64_t v13 = v11;
      v13[1] = v12;
      v10 -= 16;
      if (!v10)
      {
        uint64_t v9 = result;
        goto LABEL_19;
      }
    }
    uint64_t v9 = v5;
LABEL_19:
    *uint64_t v9 = v6;
    v9[1] = v8;
LABEL_20:
    uint64_t v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

unint64_t *sub_1CC63EE50(unint64_t *result, unint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 2;
    if (result + 2 != a2)
    {
      for (int i = result + 1; ; i += 2)
      {
        BOOL v4 = result;
        uint64_t result = v2;
        unint64_t v5 = v4[2];
        unint64_t v6 = *v4;
        if (v5 < *v4) {
          break;
        }
        if (v6 >= v5)
        {
          unint64_t v7 = v4[3];
          if (v7 < v4[1]) {
            goto LABEL_6;
          }
        }
LABEL_14:
        uint64_t v2 = result + 2;
        if (result + 2 == a2) {
          return result;
        }
      }
      unint64_t v7 = v4[3];
LABEL_6:
      for (int j = i; ; j -= 2)
      {
        unint64_t v9 = *j;
        j[1] = v6;
        j[2] = v9;
        unint64_t v6 = *(j - 3);
        if (v5 >= v6 && (v6 < v5 || v7 >= *(j - 2))) {
          break;
        }
      }
      *(j - 1) = v5;
      *int j = v7;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_1CC63EEEC(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    unint64_t v9 = *a3;
    if (*a3 >= v3 && (v3 < v9 || a3[1] >= a2[1])) {
      return 0;
    }
    *a2 = v9;
    *a3 = v3;
    unint64_t v11 = (uint64_t *)(a2 + 1);
    unint64_t v10 = a2[1];
    a2[1] = a3[1];
    a3[1] = v10;
    unint64_t v12 = *a2;
    unint64_t v13 = *a1;
    if (*a2 >= *a1 && (v13 < v12 || *v11 >= a1[1])) {
      return 1;
    }
    *a1 = v12;
    unint64_t v6 = (uint64_t *)(a1 + 1);
    *a2 = v13;
    uint64_t v8 = 2;
  }
  else
  {
    unint64_t v5 = *a3;
    if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
    {
      *a1 = v5;
      unint64_t v6 = (uint64_t *)(a1 + 1);
      *a3 = v4;
      unint64_t v7 = (uint64_t *)(a3 + 1);
      uint64_t v8 = 1;
    }
    else
    {
      *a1 = v3;
      *a2 = v4;
      unint64_t v14 = a1[1];
      a1[1] = a2[1];
      a2[1] = v14;
      unint64_t v15 = *a3;
      unint64_t v16 = *a2;
      if (*a3 >= *a2 && (v16 < v15 || a3[1] >= v14)) {
        return 1;
      }
      *a2 = v15;
      *a3 = v16;
      unint64_t v7 = (uint64_t *)(a3 + 1);
      uint64_t v8 = 2;
      unint64_t v6 = (uint64_t *)(a2 + 1);
    }
    unint64_t v11 = v7;
  }
  uint64_t v17 = *v6;
  *unint64_t v6 = *v11;
  *unint64_t v11 = v17;
  return v8;
}

unint64_t *sub_1CC63F040(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  unint64_t v4 = *(a2 - 2);
  if (*a1 >= v4 && (v4 < v2 || v3 >= *(a2 - 1)))
  {
    for (int i = a1 + 2; i < a2 && v2 >= *i && (*i < v2 || v3 >= i[1]); i += 2)
      ;
  }
  else
  {
    int i = a1;
    do
    {
      unint64_t v7 = i[2];
      i += 2;
      unint64_t v6 = v7;
    }
    while (v2 >= v7 && (v6 < v2 || v3 >= i[1]));
  }
  if (i < a2)
  {
    for (a2 -= 2; v2 < v4 || v4 >= v2 && v3 < a2[1]; a2 -= 2)
    {
      unint64_t v8 = *(a2 - 2);
      unint64_t v4 = v8;
    }
  }
  if (i < a2)
  {
    unint64_t v9 = *i;
    unint64_t v10 = *a2;
    do
    {
      unint64_t *i = v10;
      *a2 = v9;
      unint64_t v11 = i[1];
      i[1] = a2[1];
      a2[1] = v11;
      do
      {
        unint64_t v12 = i[2];
        i += 2;
        unint64_t v9 = v12;
      }
      while (v2 >= v12 && (v9 < v2 || v3 >= i[1]));
      do
      {
        do
        {
          unint64_t v13 = *(a2 - 2);
          a2 -= 2;
          unint64_t v10 = v13;
        }
        while (v2 < v13);
      }
      while (v10 >= v2 && v3 < a2[1]);
    }
    while (i < a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

unint64_t *sub_1CC63F184(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2 = 0;
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  while (1)
  {
    unint64_t v5 = a1[v2 + 2];
    if (v5 >= v3 && (v3 < v5 || a1[v2 + 3] >= v4)) {
      break;
    }
    v2 += 2;
  }
  unint64_t v6 = (unint64_t)&a1[v2 + 2];
  if (v2 * 8)
  {
    do
    {
      unint64_t v8 = *(a2 - 2);
      a2 -= 2;
      unint64_t v7 = v8;
    }
    while (v8 >= v3 && (v3 < v7 || a2[1] >= v4));
  }
  else
  {
LABEL_16:
    if (v6 < (unint64_t)a2)
    {
      do
      {
        unint64_t v10 = *(a2 - 2);
        a2 -= 2;
        unint64_t v9 = v10;
        if (v10 < v3) {
          break;
        }
        if (v3 < v9) {
          goto LABEL_16;
        }
      }
      while (v6 < (unint64_t)a2 && a2[1] >= v4);
    }
  }
  if (v6 >= (unint64_t)a2)
  {
    unint64_t v12 = (unint64_t *)v6;
  }
  else
  {
    unint64_t v11 = *a2;
    unint64_t v12 = (unint64_t *)v6;
    unint64_t v13 = a2;
    do
    {
      *unint64_t v12 = v11;
      *unint64_t v13 = v5;
      unint64_t v14 = v12[1];
      v12[1] = v13[1];
      v13[1] = v14;
      do
      {
        do
        {
          unint64_t v15 = v12[2];
          v12 += 2;
          unint64_t v5 = v15;
        }
        while (v15 < v3);
      }
      while (v3 >= v5 && v12[1] < v4);
      do
      {
        unint64_t v16 = *(v13 - 2);
        v13 -= 2;
        unint64_t v11 = v16;
      }
      while (v16 >= v3 && (v3 < v11 || v13[1] >= v4));
    }
    while (v12 < v13);
  }
  if (v12 - 2 != a1)
  {
    *a1 = *(v12 - 2);
    a1[1] = *(v12 - 1);
  }
  *(v12 - 2) = v3;
  *(v12 - 1) = v4;
  return v12 - 2;
}

BOOL sub_1CC63F2CC(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *a1;
      if (v6 < *a1 || v7 >= v6 && *(a2 - 1) < a1[1])
      {
        *a1 = v6;
        *(a2 - 2) = v7;
        unint64_t v8 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1CC63EEEC(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CC63F4F4(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CC63F5F8(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      unint64_t v9 = a1 + 4;
      sub_1CC63EEEC(a1, a1 + 2, a1 + 4);
      unint64_t v10 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  do
  {
    unint64_t v13 = *v10;
    unint64_t v14 = *v9;
    if (*v10 >= *v9)
    {
      if (v14 < v13) {
        goto LABEL_23;
      }
      unint64_t v15 = v10[1];
      if (v15 >= v9[1]) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v15 = v10[1];
    }
    unint64_t *v10 = v14;
    v10[1] = v9[1];
    unint64_t v16 = a1;
    if (v9 == a1) {
      goto LABEL_22;
    }
    uint64_t v17 = v11;
    while (1)
    {
      int v18 = (char *)a1 + v17;
      unint64_t v19 = *(unint64_t *)((char *)a1 + v17 + 16);
      if (v13 < v19)
      {
        unint64_t v20 = *((void *)v18 + 3);
        goto LABEL_18;
      }
      if (v19 < v13)
      {
        unint64_t v16 = (unint64_t *)((char *)a1 + v17 + 32);
        goto LABEL_22;
      }
      unint64_t v20 = *(unint64_t *)((char *)a1 + v17 + 24);
      if (v15 >= v20) {
        break;
      }
LABEL_18:
      v9 -= 2;
      *((void *)v18 + 4) = v19;
      *(unint64_t *)((char *)a1 + v17 + 40) = v20;
      v17 -= 16;
      if (v17 == -32)
      {
        unint64_t v16 = a1;
        goto LABEL_22;
      }
    }
    unint64_t v16 = v9;
LABEL_22:
    *unint64_t v16 = v13;
    v16[1] = v15;
    if (++v12 == 8) {
      return v10 + 2 == a2;
    }
LABEL_23:
    unint64_t v9 = v10;
    v11 += 16;
    v10 += 2;
  }
  while (v10 != a2);
  return 1;
}

uint64_t sub_1CC63F4F4(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result = sub_1CC63EEEC(a1, a2, a3);
  unint64_t v9 = *a4;
  unint64_t v10 = *a3;
  if (*a4 < *a3 || v10 >= v9 && a4[1] < a3[1])
  {
    *a3 = v9;
    *a4 = v10;
    unint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    unint64_t v12 = *a3;
    unint64_t v13 = *a2;
    if (*a3 < *a2 || v13 >= v12 && a3[1] < a2[1])
    {
      *a2 = v12;
      *a3 = v13;
      unint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      unint64_t v15 = *a2;
      unint64_t v16 = *a1;
      if (*a2 < *a1 || v16 >= v15 && a2[1] < a1[1])
      {
        *a1 = v15;
        *a2 = v16;
        unint64_t v17 = a1[1];
        a1[1] = a2[1];
        a2[1] = v17;
      }
    }
  }
  return result;
}

uint64_t sub_1CC63F5F8(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result = sub_1CC63F4F4(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *a4;
  if (*a5 < *a4 || v12 >= v11 && a5[1] < a4[1])
  {
    *a4 = v11;
    *a5 = v12;
    unint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    unint64_t v14 = *a4;
    unint64_t v15 = *a3;
    if (*a4 < *a3 || v15 >= v14 && a4[1] < a3[1])
    {
      *a3 = v14;
      *a4 = v15;
      unint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      unint64_t v17 = *a3;
      unint64_t v18 = *a2;
      if (*a3 < *a2 || v18 >= v17 && a3[1] < a2[1])
      {
        *a2 = v17;
        *a3 = v18;
        unint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        unint64_t v20 = *a2;
        unint64_t v21 = *a1;
        if (*a2 < *a1 || v21 >= v20 && a2[1] < a1[1])
        {
          *a1 = v20;
          *a2 = v21;
          unint64_t v22 = a1[1];
          a1[1] = a2[1];
          a2[1] = v22;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_1CC63F750(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = &a1[2 * v10];
      do
      {
        sub_1CC63F8C8((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    unint64_t v13 = a2;
    if (a2 != a3)
    {
      unint64_t v14 = a2;
      do
      {
        unint64_t v15 = *v14;
        unint64_t v16 = *a1;
        if (*v14 < *a1 || v16 >= v15 && v14[1] < a1[1])
        {
          *unint64_t v14 = v16;
          *a1 = v15;
          unint64_t v17 = v14[1];
          v14[1] = a1[1];
          a1[1] = v17;
          sub_1CC63F8C8((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      unint64_t v13 = a3;
    }
    if (v8 >= 17)
    {
      unint64_t v18 = a2 - 2;
      do
      {
        unint64_t v20 = *a1;
        unint64_t v19 = a1[1];
        unint64_t v21 = sub_1CC63FA14(a1, a4, v9);
        if (v18 == v21)
        {
          *unint64_t v21 = v20;
          v21[1] = v19;
        }
        else
        {
          *unint64_t v21 = *v18;
          v21[1] = v18[1];
          *unint64_t v18 = v20;
          v18[1] = v19;
          sub_1CC63FAA8((uint64_t)a1, (uint64_t)(v21 + 2), a4, ((char *)(v21 + 2) - (char *)a1) >> 4);
        }
        v18 -= 2;
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1CC63F8C8(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      uint64_t v6 = v4 >> 3;
      uint64_t v7 = (v4 >> 3) + 1;
      uint64_t v8 = (unint64_t *)(result + 16 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3)
      {
        unint64_t v10 = v8[2];
        if (*v8 < v10 || v10 >= *v8 && *(void *)(result + 16 * v7 + 8) < v8[3])
        {
          v8 += 2;
          uint64_t v7 = v9;
        }
      }
      unint64_t v11 = *v8;
      unint64_t v12 = *a4;
      if (*v8 >= *a4)
      {
        if (v12 >= v11)
        {
          unint64_t v13 = a4[1];
          if (v8[1] < v13) {
            return result;
          }
        }
        else
        {
          unint64_t v13 = a4[1];
        }
        *a4 = v11;
        a4[1] = v8[1];
        if (v5 >= v7)
        {
          while (1)
          {
            uint64_t v15 = 2 * v7;
            uint64_t v7 = (2 * v7) | 1;
            unint64_t v14 = (unint64_t *)(result + 16 * v7);
            uint64_t v16 = v15 + 2;
            if (v16 < a3)
            {
              unint64_t v17 = v14[2];
              if (*v14 < v17 || v17 >= *v14 && *(void *)(result + 16 * v7 + 8) < v14[3])
              {
                v14 += 2;
                uint64_t v7 = v16;
              }
            }
            unint64_t v18 = *v14;
            if (*v14 < v12 || v12 >= v18 && v14[1] < v13) {
              break;
            }
            unint64_t *v8 = v18;
            v8[1] = v14[1];
            uint64_t v8 = v14;
            if (v5 < v7) {
              goto LABEL_23;
            }
          }
        }
        unint64_t v14 = v8;
LABEL_23:
        *unint64_t v14 = v12;
        v14[1] = v13;
      }
    }
  }
  return result;
}

unint64_t *sub_1CC63FA14(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  do
  {
    uint64_t v6 = result;
    uint64_t v7 = v3 + 1;
    result += 2 * v3 + 2;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3)
    {
      unint64_t v10 = result[2];
      if (*result < v10 || v10 >= *result && v6[2 * v7 + 1] < result[3])
      {
        result += 2;
        uint64_t v3 = v9;
      }
    }
    *uint64_t v6 = *result;
    v6[1] = result[1];
  }
  while (v3 <= v5);
  return result;
}

uint64_t sub_1CC63FAA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (unint64_t *)(result + 16 * (v4 >> 1));
    unint64_t v7 = *v6;
    unint64_t v8 = *(void *)(a2 - 16);
    if (*v6 >= v8)
    {
      if (v8 < v7) {
        return result;
      }
      unint64_t v9 = *(void *)(a2 - 8);
      if (*(void *)(result + 16 * v5 + 8) >= v9) {
        return result;
      }
    }
    else
    {
      unint64_t v9 = *(void *)(a2 - 8);
    }
    *(void *)(a2 - 16) = v7;
    *(void *)(a2 - 8) = *(void *)(result + 16 * v5 + 8);
    if (v4 >= 2)
    {
      while (1)
      {
        unint64_t v11 = v5 - 1;
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v10 = (unint64_t *)(result + 16 * v5);
        unint64_t v12 = *v10;
        if (*v10 >= v8)
        {
          if (v8 < v12) {
            break;
          }
          unint64_t v13 = *(void *)(result + 16 * v5 + 8);
          if (v13 >= v9) {
            break;
          }
        }
        else
        {
          unint64_t v13 = v10[1];
        }
        *uint64_t v6 = v12;
        v6[1] = v13;
        uint64_t v6 = (unint64_t *)(result + 16 * v5);
        if (v11 <= 1) {
          goto LABEL_13;
        }
      }
    }
    unint64_t v10 = v6;
LABEL_13:
    unint64_t *v10 = v8;
    v10[1] = v9;
  }
  return result;
}

void sub_1CC63FB5C(llvm::raw_ostream *a1, llvm::AllocaInst *this)
{
  uint64_t v3 = a1;
  uint64_t v398 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = *((_DWORD *)this + 5);
  uint64_t v5 = v4 & 0x7FFFFFF;
  if ((v4 & 0x7FFFFFF) != 0)
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = (char *)this - 32 * v5;
      if ((v4 & 0x40000000) != 0) {
        unint64_t v7 = (char *)*((void *)this - 1);
      }
      if (!*(void *)&v7[v6])
      {
        unint64_t v8 = "Operand is null";
        goto LABEL_12;
      }
      v6 += 32;
    }
    while (32 * v5 != v6);
  }
  switch(*((unsigned char *)this + 16))
  {
    case 0x1E:
      if (v5 != 3) {
        goto LABEL_563;
      }
      unint64_t v72 = (llvm::Value *)*((void *)this - 12);
      if (*(_DWORD *)(*(void *)v72 + 8) == 269) {
        goto LABEL_563;
      }
      uint64_t v393 = "Branch condition is not 'i1' type!";
      v397[0] = 259;
      unint64_t v387 = this;
      v385[0] = v72;
      sub_1CD5DBC00(a1, (llvm::Twine *)&v393, &v387, v385);
      return;
    case 0x1F:
      if (*(unsigned char *)(*(void *)this + 8) != 7)
      {
        unint64_t v8 = "Switch must have void result type!";
        goto LABEL_12;
      }
      if ((v4 & 0x40000000) != 0) {
        uint64_t v73 = (uint64_t **)*((void *)this - 1);
      }
      else {
        uint64_t v73 = (uint64_t **)((char *)this - 32 * v5);
      }
      uint64_t v234 = **v73;
      unint64_t v235 = v397;
      uint64_t v393 = v397;
      uint64_t v394 = (uint64_t)v397;
      uint64_t v395 = 32;
      int v396 = 0;
      int v236 = (v4 >> 1) & 0x3FFFFFF;
      uint64_t v237 = (v236 - 1);
      if (v236 == 1)
      {
LABEL_521:
        sub_1CC6428C8(v3, (uint64_t)this);
        goto LABEL_816;
      }
      unsigned int v238 = 0;
      uint64_t v239 = 0;
      unsigned int v240 = 32;
      uint64_t v241 = v397;
      while (2)
      {
        int v242 = *((_DWORD *)this + 5);
        if ((v242 & 0x40000000) != 0) {
          __int16 v243 = (char *)*((void *)this - 1);
        }
        else {
          __int16 v243 = (char *)this - 32 * (v242 & 0x7FFFFFF);
        }
        uint64_t v244 = (2 * v239 + 2);
        if (**(void **)&v243[32 * v244] == v234)
        {
          if ((v242 & 0x40000000) != 0) {
            BOOL v245 = (char *)*((void *)this - 1);
          }
          else {
            BOOL v245 = (char *)this - 32 * (v242 & 0x7FFFFFF);
          }
          uint64_t v246 = 32 * v244;
          uint64_t v247 = *(void *)&v245[32 * v244];
          if (v241 == v235)
          {
            if (v238)
            {
              uint64_t v248 = 0;
              uint64_t v249 = 8 * v238;
              uint64_t v250 = v235;
              do
              {
                if (*v250 == v247) {
                  goto LABEL_488;
                }
                if (*v250 == -2) {
                  uint64_t v248 = v250;
                }
                ++v250;
                v249 -= 8;
              }
              while (v249);
              if (v248)
              {
                *uint64_t v248 = v247;
                --v396;
                goto LABEL_480;
              }
            }
            if (v240 > v238)
            {
              HIDWORD(v395) = v238 + 1;
              *(void *)&v235[4 * v238] = v247;
              goto LABEL_480;
            }
          }
          if (3 * v240 <= 4 * (v238 - v396))
          {
            if (v240 >= 0x40) {
              v240 *= 2;
            }
            else {
              unsigned int v240 = 128;
            }
          }
          else if (v240 - v238 >= v240 >> 3)
          {
LABEL_461:
            unsigned int v251 = v240 - 1;
            unsigned int v252 = (v240 - 1) & ((v247 >> 4) ^ (v247 >> 9));
            uint64_t v253 = &v241[4 * v252];
            uint64_t v254 = *v253;
            if (*v253 != -1)
            {
              unsigned int v255 = 0;
              int v256 = 1;
              while (v254 != v247)
              {
                if (v255) {
                  BOOL v257 = 0;
                }
                else {
                  BOOL v257 = v254 == -2;
                }
                if (v257) {
                  unsigned int v255 = v253;
                }
                unsigned int v258 = v252 + v256++;
                unsigned int v252 = v258 & v251;
                uint64_t v253 = &v241[4 * (v258 & v251)];
                uint64_t v254 = *v253;
                if (*v253 == -1) {
                  goto LABEL_473;
                }
              }
LABEL_488:
              unint64_t v387 = (llvm::Value *)"Duplicate integer as switch case";
              v391[0] = 259;
              v385[0] = this;
              int v260 = *((_DWORD *)this + 5);
              if ((v260 & 0x40000000) != 0) {
                uint64_t v261 = (char *)*((void *)this - 1);
              }
              else {
                uint64_t v261 = (char *)this - 32 * (v260 & 0x7FFFFFF);
              }
              uint64_t v392 = *(llvm::Value **)&v261[v246];
              sub_1CD5DBC00(v3, (llvm::Twine *)&v387, v385, &v392);
LABEL_816:
              int v358 = (llvm::Value *)v393;
              uint64_t v321 = (llvm::Value *)v394;
LABEL_817:
              if (v321 != v358) {
LABEL_818:
              }
                free(v321);
              return;
            }
            unsigned int v255 = 0;
LABEL_473:
            if (v255) {
              uint64_t v259 = v255;
            }
            else {
              uint64_t v259 = v253;
            }
            if (*v259 == v247) {
              goto LABEL_488;
            }
            if (*v259 == -2) {
              --v396;
            }
            else {
              ++HIDWORD(v395);
            }
            void *v259 = v247;
LABEL_480:
            unsigned int v240 = v395;
            unsigned int v238 = HIDWORD(v395);
            unint64_t v235 = v393;
            uint64_t v241 = (_WORD *)v394;
            if (++v239 == v237) {
              goto LABEL_521;
            }
            continue;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v393, v240);
          unsigned int v240 = v395;
          uint64_t v241 = (_WORD *)v394;
          goto LABEL_461;
        }
        break;
      }
      uint64_t v353 = "Switch constants must all be same type as switch value!";
      goto LABEL_814;
    case 0x20:
      if ((v4 & 0x40000000) != 0) {
        unsigned int v67 = (char *)*((void *)this - 1);
      }
      else {
        unsigned int v67 = (char *)this - 32 * v5;
      }
      if (*(unsigned char *)(**(void **)v67 + 8) == 15)
      {
        uint64_t v224 = 0;
        uint64_t v225 = (v5 - 1);
        int v226 = (char *)this - 32 * v5;
        do
        {
          if (v225 == v224) {
            goto LABEL_563;
          }
          BOOL v227 = v226;
          if ((v4 & 0x40000000) != 0) {
            BOOL v227 = (char *)*((void *)this - 1);
          }
          ++v224;
        }
        while (*(unsigned char *)(**(void **)&v227[32 * v224] + 8) == 8);
        unint64_t v8 = "Indirectbr destinations must all have pointer type!";
      }
      else
      {
        unint64_t v8 = "Indirectbr operand must have pointer type!";
      }
      goto LABEL_12;
    case 0x21:
      sub_1CC64571C(a1, (uint64_t)this);
      for (uint64_t i = *(void *)(*((void *)this - 8) + 48); ; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v87 = i - 24;
        if (!i) {
          uint64_t v87 = 0;
        }
        if (*(unsigned char *)(v87 + 16) != 83) {
          break;
        }
      }
      unsigned int v88 = *(unsigned __int8 *)(i - 8) - 38;
      BOOL v89 = v88 > 0x38;
      uint64_t v90 = (1 << v88) & 0x100060000000001;
      if (!v89 && v90 != 0) {
        goto LABEL_563;
      }
      unint64_t v8 = "The unwind destination does not have an exception handling instruction!";
      goto LABEL_12;
    case 0x22:
      if ((*(_WORD *)(*(void *)(*((void *)this + 5) + 56) + 18) & 8) != 0)
      {
        uint64_t v92 = *((void *)a1 + 99);
        uint64_t v93 = **((void **)this - 4);
        if (!v92)
        {
          *((void *)a1 + 99) = v93;
          goto LABEL_563;
        }
        if (v92 == v93) {
          goto LABEL_563;
        }
        unint64_t v8 = "The resume instruction should have a consistent result type inside a function.";
      }
      else
      {
        unint64_t v8 = "ResumeInst needs to be in a function with a personality.";
      }
      goto LABEL_12;
    case 0x23:
      goto LABEL_563;
    case 0x24:
      uint64_t v74 = (llvm::Value **)((char *)this - 32 * v5);
      unsigned int v75 = *v74;
      if (*((unsigned char *)*v74 + 16) != 79)
      {
        uint64_t v393 = "CleanupReturnInst needs to be provided a CleanupPad";
        v397[0] = 259;
        unint64_t v387 = this;
        v385[0] = v75;
        sub_1CD5DBC00(a1, (llvm::Twine *)&v393, &v387, v385);
        return;
      }
      if ((*((_WORD *)this + 9) & 1) == 0) {
        goto LABEL_563;
      }
      uint64_t v76 = v74[4];
      if (!v76) {
        goto LABEL_563;
      }
      for (uint64_t j = *((void *)v76 + 6); ; uint64_t j = *(void *)(j + 8))
      {
        uint64_t v78 = j - 24;
        if (!j) {
          uint64_t v78 = 0;
        }
        if (*(unsigned char *)(v78 + 16) != 83) {
          break;
        }
      }
      unsigned int v283 = *(unsigned __int8 *)(j - 8) - 38;
      BOOL v89 = v283 > 0x2A;
      uint64_t v284 = (1 << v283) & 0x60000000001;
      if (!v89 && v284 != 0) {
        goto LABEL_563;
      }
      unint64_t v8 = "CleanupReturnInst must unwind to an EH block which is not a landingpad.";
      goto LABEL_12;
    case 0x25:
      uint64_t v94 = (llvm::Value *)*((void *)this - 8);
      if (*((unsigned char *)v94 + 16) == 80) {
        goto LABEL_563;
      }
      uint64_t v393 = "CatchReturnInst needs to be provided a CatchPad";
      v397[0] = 259;
      unint64_t v387 = this;
      v385[0] = v94;
      sub_1CD5DBC00(a1, (llvm::Twine *)&v393, &v387, v385);
      return;
    case 0x26:
      uint64_t v68 = *((void *)this + 5);
      if ((*(_WORD *)(*(void *)(v68 + 56) + 18) & 8) == 0)
      {
        unint64_t v8 = "CatchSwitchInst needs to be in a function with a personality.";
        goto LABEL_12;
      }
      uint64_t v69 = v68 + 40;
      uint64_t v70 = *(void *)(v68 + 48);
      while (2)
      {
        if (v70 == v69) {
          goto LABEL_750;
        }
        if (v70) {
          uint64_t v71 = v70 - 24;
        }
        else {
          uint64_t v71 = 0;
        }
        if (*(unsigned char *)(v71 + 16) == 83)
        {
          uint64_t v70 = *(void *)(v70 + 8);
          continue;
        }
        break;
      }
      if ((llvm::AllocaInst *)(v70 - 24) != this)
      {
LABEL_750:
        unint64_t v8 = "CatchSwitchInst not the first non-PHI instruction in the block.";
        goto LABEL_12;
      }
      if ((v4 & 0x40000000) != 0) {
        uint64_t v221 = (char *)*((void *)this - 1);
      }
      else {
        uint64_t v221 = (char *)this - 32 * v5;
      }
      int v110 = *(llvm::Value **)v221;
      unsigned int v264 = *(unsigned __int8 *)(*(void *)v221 + 16);
      if (v264 != 20 && (v264 >= 0x1C ? (BOOL v265 = v264 - 79 >= 2) : (BOOL v265 = 1), v265))
      {
        uint64_t v355 = "CatchSwitchInst has an invalid parent.";
LABEL_792:
        uint64_t v393 = v355;
        v397[0] = 259;
        sub_1CD5DBE68(a1, (llvm::Twine *)&v393);
        if (*(void *)v3)
        {
          unint64_t v9 = (llvm::raw_ostream **)v3;
          unint64_t v10 = v110;
          goto LABEL_14;
        }
      }
      else
      {
        if (*((_WORD *)this + 9))
        {
          if ((v4 & 0x40000000) != 0) {
            unsigned int v267 = (char *)*((void *)this - 1);
          }
          else {
            unsigned int v267 = (char *)this - 32 * v5;
          }
          uint64_t v266 = *((void *)v267 + 4);
          if (v266)
          {
            for (uint64_t k = *(void *)(v266 + 48); ; uint64_t k = *(void *)(k + 8))
            {
              uint64_t v287 = k - 24;
              if (!k) {
                uint64_t v287 = 0;
              }
              if (*(unsigned char *)(v287 + 16) != 83) {
                break;
              }
            }
            unsigned int v288 = *(unsigned __int8 *)(k - 8);
            if (v288 - 38 > 0x2A || ((1 << (v288 - 38)) & 0x60000000001) == 0)
            {
              unint64_t v8 = "CatchSwitchInst must unwind to an EH block which is not a landingpad.";
              goto LABEL_12;
            }
            if (v288 >= 0x4F)
            {
              uint64_t v291 = (llvm::Value **)(k - 56);
            }
            else
            {
              int v290 = *(_DWORD *)(k - 4);
              if ((v290 & 0x40000000) != 0) {
                uint64_t v291 = *(llvm::Value ***)(k - 32);
              }
              else {
                uint64_t v291 = (llvm::Value **)(k - 32 * (v290 & 0x7FFFFFF) - 24);
              }
            }
            if (*v291 == v110)
            {
              uint64_t v393 = this;
              *(void *)sub_1CD48CC08((uint64_t)a1 + 856, (uint64_t *)&v393) = this;
              unsigned int v4 = *((_DWORD *)this + 5);
              LODWORD(v5) = v4 & 0x7FFFFFF;
              LODWORD(v266) = (*((_WORD *)this + 9) & 1) == 0;
            }
            else
            {
              LODWORD(v266) = 0;
            }
          }
        }
        else
        {
          LODWORD(v266) = 1;
        }
        if (v266) {
          int v322 = 1;
        }
        else {
          int v322 = 2;
        }
        if (v5 == v322)
        {
          unint64_t v8 = "CatchSwitchInst cannot have empty handler list";
          goto LABEL_12;
        }
        if ((v4 & 0x40000000) != 0)
        {
          uint64_t v324 = (char *)*((void *)this - 1);
          uint64_t v323 = v5;
        }
        else
        {
          uint64_t v323 = v5;
          uint64_t v324 = (char *)this - 32 * v5;
        }
        uint64_t v325 = 1;
        if (!v266) {
          uint64_t v325 = 2;
        }
        if (v325 == v323)
        {
LABEL_667:
          sub_1CC64B5B0(v3, (uint64_t)this);
          goto LABEL_668;
        }
        uint64_t v326 = (llvm::Value **)&v324[32 * v323];
        uint64_t v327 = (llvm::Value **)&v324[32 * v325];
        while (1)
        {
          unint64_t v387 = 0;
          unint64_t v387 = *v327;
          for (uint64_t m = *((void *)v387 + 6); ; uint64_t m = *(void *)(m + 8))
          {
            uint64_t v329 = m - 24;
            if (!m) {
              uint64_t v329 = 0;
            }
            if (*(unsigned char *)(v329 + 16) != 83) {
              break;
            }
          }
          if (*(unsigned char *)(m - 8) != 80) {
            break;
          }
          v327 += 4;
          if (v327 == v326) {
            goto LABEL_667;
          }
        }
        uint64_t v393 = "CatchSwitchInst handlers must be catchpads";
        v397[0] = 259;
        v385[0] = this;
        sub_1CD5DBC00(v3, (llvm::Twine *)&v393, v385, &v387);
      }
      return;
    case 0x27:
      uint64_t v331 = (char *)this - 32;
      uint64_t v330 = *((void *)this - 4);
      if (*(unsigned char *)(v330 + 16) != 24)
      {
        unint64_t v8 = "Callbr is currently only used for asm-goto!";
        goto LABEL_12;
      }
      if (*(unsigned char *)(v330 + 88))
      {
        uint64_t v354 = "Unwinding from Callbr is not allowed";
        goto LABEL_803;
      }
      uint64_t v332 = *((unsigned int *)this + 20);
      if (v332 == -1) {
        goto LABEL_677;
      }
      uint64_t v333 = 0;
      do
      {
        uint64_t v334 = &v331[32 * (v333 - 1) + -32 * v332];
        if (!v333) {
          uint64_t v334 = (char *)this - 32 * v332 - 64;
        }
        if (*(unsigned char *)(**(void **)v334 + 8) != 8)
        {
          unint64_t v8 = "Callbr successors must all have pointer type!";
          goto LABEL_12;
        }
        ++v333;
      }
      while (v332 + 1 != v333);
LABEL_677:
      if (!v5)
      {
        unint64_t v387 = (llvm::Value *)v391;
        uint64_t v388 = (llvm::Value *)v391;
        unsigned int v335 = this;
LABEL_679:
        OperationName = (char *)4;
        LODWORD(v390) = 0;
        if ((v4 & 0x80000000) != 0
          && (unint64_t v383 = (char *)this - 32 * v5, v384 = *((void *)v383 - 1), (v384 & 0xFFFFFFFF0) != 0))
        {
          uint64_t v336 = (*((_DWORD *)v383 - 3) - *(_DWORD *)&v383[-v384]);
        }
        else
        {
          uint64_t v336 = 0;
        }
        uint64_t v337 = (llvm::AllocaInst *)((char *)this + -32 * v336 + -32 * (v332 + 1) - 32);
        if (v335 == v337)
        {
LABEL_682:
          sub_1CD5C85DC((uint64_t)this, (uint64_t)&v393);
          if (!v394)
          {
LABEL_717:
            if (v393 != &v395) {
              free(v393);
            }
            if (v388 != v387) {
              free(v388);
            }
            sub_1CC64AF78(v3, this);
LABEL_668:
            sub_1CC6428C8(v3, (uint64_t)this);
            return;
          }
          if (v388 == v387) {
            unsigned int v338 = HIDWORD(OperationName);
          }
          else {
            unsigned int v338 = OperationName;
          }
          uint64_t v339 = (char *)v388 + 8 * v338;
          int v340 = OperationName - 1;
          uint64_t v341 = v388;
          unsigned int v342 = (uint64_t *)v393;
          while (1)
          {
            uint64_t v343 = *v342;
            if (v341 == v387)
            {
              if (HIDWORD(OperationName))
              {
                uint64_t v344 = 0;
                while (*(void *)((char *)v387 + v344) != v343)
                {
                  v344 += 8;
                  if (8 * HIDWORD(OperationName) == v344)
                  {
                    unsigned int v345 = HIDWORD(OperationName);
                    goto LABEL_706;
                  }
                }
                int v347 = (char *)v387 + v344;
                unsigned int v345 = HIDWORD(OperationName);
                uint64_t v341 = v387;
              }
              else
              {
                unsigned int v345 = 0;
LABEL_706:
                uint64_t v341 = v387;
                int v347 = (char *)v387 + 8 * HIDWORD(OperationName);
              }
            }
            else
            {
              unsigned int v346 = v340 & ((v343 >> 4) ^ (v343 >> 9));
              int v347 = (char *)v388 + 8 * v346;
              uint64_t v348 = *(void *)v347;
              if (*(void *)v347 == -1)
              {
                unsigned int v349 = 0;
LABEL_708:
                if (v349) {
                  int v347 = v349;
                }
                if (*(void *)v347 != v343) {
                  int v347 = v339;
                }
              }
              else
              {
                unsigned int v349 = 0;
                int v350 = 1;
                while (v348 != v343)
                {
                  if (v349) {
                    BOOL v351 = 0;
                  }
                  else {
                    BOOL v351 = v348 == -2;
                  }
                  if (v351) {
                    unsigned int v349 = v347;
                  }
                  unsigned int v352 = v346 + v350++;
                  unsigned int v346 = v352 & v340;
                  int v347 = (char *)v388 + 8 * (v352 & v340);
                  uint64_t v348 = *(void *)v347;
                  if (*(void *)v347 == -1) {
                    goto LABEL_708;
                  }
                }
              }
              unsigned int v345 = HIDWORD(OperationName);
              uint64_t v341 = v388;
            }
            if (v341 != v387) {
              unsigned int v345 = OperationName;
            }
            if (v347 == (char *)v341 + 8 * v345) {
              break;
            }
            if (++v342 == (uint64_t *)((char *)v393 + 8 * v394)) {
              goto LABEL_717;
            }
          }
          v385[0] = (llvm::Value *)"Indirect label missing from arglist.";
          __int16 v386 = 259;
          sub_1CD5DBE68(v3, (llvm::Twine *)v385);
          if (*(void *)v3) {
            sub_1CD5DBED0((llvm::raw_ostream **)v3, this);
          }
          if (v393 != &v395) {
            free(v393);
          }
          int v358 = v387;
          uint64_t v321 = v388;
          goto LABEL_817;
        }
        unsigned int v368 = 4;
        while (1)
        {
          if (*(void *)v335) {
            BOOL v369 = *(unsigned char *)(*(void *)v335 + 16) == 4;
          }
          else {
            BOOL v369 = 0;
          }
          if (v369)
          {
            uint64_t v370 = *(void *)(*(void *)v335 - 32);
            if (v388 != v387) {
              goto LABEL_854;
            }
            uint64_t v371 = HIDWORD(OperationName);
            if (HIDWORD(OperationName))
            {
              uint64_t v372 = 0;
              uint64_t v373 = 8 * HIDWORD(OperationName);
              v374 = v388;
              while (*(void *)v374 != v370)
              {
                if (*(void *)v374 == -2) {
                  uint64_t v372 = v374;
                }
                v374 = (llvm::Value *)((char *)v374 + 8);
                v373 -= 8;
                if (!v373)
                {
                  if (!v372) {
                    goto LABEL_852;
                  }
                  *(void *)uint64_t v372 = v370;
                  LODWORD(v390) = v390 - 1;
                  goto LABEL_874;
                }
              }
              goto LABEL_874;
            }
LABEL_852:
            if (HIDWORD(OperationName) >= OperationName)
            {
LABEL_854:
              if (3 * v368 <= 4 * (HIDWORD(OperationName) - (int)v390))
              {
                if (v368 >= 0x40) {
                  v368 *= 2;
                }
                else {
                  unsigned int v368 = 128;
                }
              }
              else if (v368 - HIDWORD(OperationName) >= v368 >> 3)
              {
                goto LABEL_856;
              }
              llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v387, v368);
              unsigned int v368 = OperationName;
LABEL_856:
              unsigned int v375 = v368 - 1;
              unsigned int v376 = (v368 - 1) & ((v370 >> 4) ^ (v370 >> 9));
              uint64_t v377 = (char *)v388 + 8 * v376;
              uint64_t v378 = *(void *)v377;
              if (*(void *)v377 == -1)
              {
                uint64_t v379 = 0;
LABEL_868:
                if (v379) {
                  uint64_t v377 = v379;
                }
                if (*(void *)v377 != v370)
                {
                  if (*(void *)v377 == -2) {
                    LODWORD(v390) = v390 - 1;
                  }
                  else {
                    ++HIDWORD(OperationName);
                  }
                  *(void *)uint64_t v377 = v370;
                }
              }
              else
              {
                uint64_t v379 = 0;
                int v380 = 1;
                while (v378 != v370)
                {
                  if (v379) {
                    BOOL v381 = 0;
                  }
                  else {
                    BOOL v381 = v378 == -2;
                  }
                  if (v381) {
                    uint64_t v379 = v377;
                  }
                  unsigned int v382 = v376 + v380++;
                  unsigned int v376 = v382 & v375;
                  uint64_t v377 = (char *)v388 + 8 * (v382 & v375);
                  uint64_t v378 = *(void *)v377;
                  if (*(void *)v377 == -1) {
                    goto LABEL_868;
                  }
                }
              }
              goto LABEL_874;
            }
            ++HIDWORD(OperationName);
            *((void *)v388 + v371) = v370;
          }
LABEL_874:
          unsigned int v335 = (llvm::AllocaInst *)((char *)v335 + 32);
          if (v335 == v337) {
            goto LABEL_682;
          }
        }
      }
      unint64_t v359 = 0;
      unsigned int v335 = (llvm::AllocaInst *)((char *)this - 32 * v5);
      uint64_t v360 = &v331[-32 * (v332 + 1)];
      int v361 = 1;
      while (2)
      {
        if ((v4 & 0x80000000) != 0 && (*((void *)v335 - 1) & 0xFFFFFFFF0) != 0) {
          int v362 = *((_DWORD *)v335 - 3) - *(_DWORD *)((char *)v335 - *((void *)v335 - 1));
        }
        else {
          int v362 = 0;
        }
        unint64_t v363 = (unint64_t)(&v360[32 * -v362] - (char *)v335) >> 5;
        uint64_t v364 = *((void *)v335 + 4 * v359);
        int v365 = *(unsigned __int8 *)(v364 + 16);
        if (v359 < v363)
        {
          if (v365 == 22)
          {
            unint64_t v8 = "Using an unescaped label as a callbr argument!";
            goto LABEL_12;
          }
          goto LABEL_832;
        }
        if (v365 != 22)
        {
LABEL_832:
          ++v359;
          ++v361;
          if (v359 == v5)
          {
            unint64_t v387 = (llvm::Value *)v391;
            uint64_t v388 = (llvm::Value *)v391;
            goto LABEL_679;
          }
          continue;
        }
        break;
      }
      unsigned int v366 = v361;
      do
      {
        if (v5 == v366) {
          goto LABEL_832;
        }
        uint64_t v367 = *((void *)v335 + 4 * v366++);
      }
      while (v364 != v367);
      unint64_t v8 = "Duplicate callbr destination!";
LABEL_12:
      uint64_t v393 = v8;
      v397[0] = 259;
      sub_1CD5DBE68(v3, (llvm::Twine *)&v393);
      if (*(void *)v3)
      {
        unint64_t v9 = (llvm::raw_ostream **)v3;
        unint64_t v10 = this;
LABEL_14:
        sub_1CD5DBED0(v9, v10);
      }
      return;
    case 0x28:
      uint64_t v125 = *(void *)this;
      if (*(void *)this != **((void **)this - 4))
      {
        unint64_t v8 = "Unary operators must have same type foroperands and result!";
        goto LABEL_12;
      }
      if ((*(_DWORD *)(v125 + 8) & 0xFE) == 0x12) {
        unsigned int v126 = *(unsigned __int8 *)(**(void **)(v125 + 16) + 8);
      }
      else {
        unsigned int v126 = *(_DWORD *)(v125 + 8);
      }
      if (v126 >= 7)
      {
        unint64_t v8 = "FNeg operator only works with float types!";
        goto LABEL_12;
      }
      goto LABEL_548;
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x2F:
    case 0x30:
    case 0x31:
    case 0x32:
    case 0x33:
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
      sub_1CC64BCC0(a1, this);
      return;
    case 0x3B:
      uint64_t v393 = v397;
      uint64_t v394 = (uint64_t)v397;
      uint64_t v395 = 4;
      int v396 = 0;
      uint64_t v186 = *((void *)this + 8);
      unsigned int v187 = *(unsigned __int8 *)(v186 + 8);
      if (v187 > 0x11) {
        goto LABEL_309;
      }
      if (((1 << v187) & 0xAC7F) != 0) {
        goto LABEL_315;
      }
      if (((1 << v187) & 0x30000) != 0) {
        goto LABEL_314;
      }
LABEL_309:
      if ((v187 & 0xFE) != 0x12 && v187 != 21) {
        goto LABEL_801;
      }
LABEL_314:
      if (llvm::Type::isSizedDerivedType(v186, (uint64_t)&v393))
      {
LABEL_315:
        if (*(unsigned char *)(**((void **)this - 4) + 8) == 13)
        {
          __int16 v189 = *((_WORD *)this + 9);
          if ((v189 & 0x3Fu) >= 0x21)
          {
            uint64_t v353 = "huge alignment values are unsupported";
          }
          else
          {
            if ((v189 & 0x80) == 0)
            {
LABEL_321:
              sub_1CC642980((uint64_t)v3, (uint64_t ***)this);
              goto LABEL_816;
            }
            if (*(unsigned char *)(*((void *)this + 8) + 8) == 15)
            {
              if (!llvm::AllocaInst::isArrayAllocation(this))
              {
                sub_1CC639C78((uint64_t)v3, this);
                goto LABEL_321;
              }
              uint64_t v353 = "swifterror alloca must not be array allocation";
            }
            else
            {
              uint64_t v353 = "swifterror alloca must have pointer type";
            }
          }
        }
        else
        {
          uint64_t v353 = "Alloca array size must have integer type";
        }
      }
      else
      {
LABEL_801:
        uint64_t v353 = "Cannot allocate unsized type";
      }
LABEL_814:
      unint64_t v387 = (llvm::Value *)v353;
      v391[0] = 259;
      sub_1CD5DBE68(v3, (llvm::Twine *)&v387);
      if (*(void *)v3) {
        sub_1CD5DBED0((llvm::raw_ostream **)v3, this);
      }
      goto LABEL_816;
    case 0x3C:
      uint64_t v147 = **((void **)this - 4);
      if (v147) {
        BOOL v148 = *(unsigned char *)(v147 + 8) == 15;
      }
      else {
        BOOL v148 = 0;
      }
      if (!v148)
      {
        unint64_t v8 = "Load operand must be a pointer.";
        goto LABEL_12;
      }
      uint64_t v140 = *(unsigned __int8 **)this;
      unint64_t v387 = *(llvm::Value **)this;
      if ((*((_WORD *)this + 9) & 0x7Eu) >= 0x42) {
        goto LABEL_644;
      }
      unsigned int v149 = v140[8];
      if (v149 > 0x11) {
        goto LABEL_251;
      }
      if (((1 << v149) & 0xAC7F) != 0) {
        goto LABEL_258;
      }
      if (((1 << v149) & 0x30000) != 0) {
        goto LABEL_256;
      }
LABEL_251:
      if ((v149 & 0xFE) != 0x12 && v149 != 21) {
        goto LABEL_807;
      }
LABEL_256:
      if ((llvm::Type::isSizedDerivedType((uint64_t)v140, 0) & 1) == 0)
      {
LABEL_807:
        unint64_t v8 = "loading unsized types is not allowed";
        goto LABEL_12;
      }
      int v151 = *((unsigned __int8 *)this + 16);
      if (v151 == 61 || v151 == 60)
      {
LABEL_258:
        if ((*((_WORD *)this + 9) & 0x380) == 0)
        {
LABEL_884:
          if (*((unsigned char *)this + 60) == 1) {
            goto LABEL_550;
          }
          unint64_t v8 = "Non-atomic load cannot have SynchronizationScope specified";
          goto LABEL_12;
        }
      }
      else if ((v151 - 63) >= 3)
      {
        goto LABEL_884;
      }
      if (((*((unsigned __int16 *)this + 9) >> 7) & 7u) - 5 <= 1)
      {
        unint64_t v8 = "Load cannot have Release ordering";
        goto LABEL_12;
      }
      if ((*((_DWORD *)v140 + 2) & 0xFD) != 0xD && *((_DWORD *)v140 + 2) >= 7u)
      {
        uint64_t v393 = "atomic load operand must have integer, pointer, or floating point type!";
        v397[0] = 259;
        v385[0] = this;
        sub_1CD5DCEDC(v3, (llvm::Twine *)&v393, &v387, v385);
        return;
      }
      goto LABEL_264;
    case 0x3D:
      uint64_t v138 = **((void **)this - 4);
      if (v138) {
        BOOL v139 = *(unsigned char *)(v138 + 8) == 15;
      }
      else {
        BOOL v139 = 0;
      }
      if (!v139)
      {
        unint64_t v8 = "Store operand must be a pointer.";
        goto LABEL_12;
      }
      uint64_t v140 = (unsigned __int8 *)**((void **)this - 8);
      unint64_t v387 = (llvm::Value *)v140;
      int v141 = *(unsigned __int8 **)(v138 + 24);
      if (v141) {
        BOOL v142 = v141 == v140;
      }
      else {
        BOOL v142 = 1;
      }
      if (!v142)
      {
        uint64_t v393 = "Stored value type does not match pointer operand type!";
        v397[0] = 259;
        v385[0] = this;
        sub_1CD5DBB8C(a1, (llvm::Twine *)&v393, v385, &v387);
        return;
      }
      if ((*((_WORD *)this + 9) & 0x7Eu) >= 0x42)
      {
LABEL_644:
        unint64_t v8 = "huge alignment values are unsupported";
        goto LABEL_12;
      }
      unsigned int v143 = v140[8];
      if (v143 > 0x11) {
        goto LABEL_227;
      }
      if (((1 << v143) & 0xAC7F) != 0) {
        goto LABEL_234;
      }
      if (((1 << v143) & 0x30000) != 0) {
        goto LABEL_232;
      }
LABEL_227:
      if ((v143 & 0xFE) != 0x12 && v143 != 21) {
        goto LABEL_808;
      }
LABEL_232:
      if ((llvm::Type::isSizedDerivedType((uint64_t)v140, 0) & 1) == 0)
      {
LABEL_808:
        unint64_t v8 = "storing unsized types is not allowed";
        goto LABEL_12;
      }
      int v145 = *((unsigned __int8 *)this + 16);
      if (v145 == 60) {
        goto LABEL_234;
      }
      if ((v145 - 63) < 3) {
        goto LABEL_235;
      }
      if (v145 != 61) {
        goto LABEL_893;
      }
LABEL_234:
      if ((*((_WORD *)this + 9) & 0x380) != 0)
      {
LABEL_235:
        if (((*((unsigned __int16 *)this + 9) >> 7) & 5 | 2) == 6)
        {
          unint64_t v8 = "Store cannot have Acquire ordering";
          goto LABEL_12;
        }
        if ((*((_DWORD *)v140 + 2) & 0xFD) != 0xD && *((_DWORD *)v140 + 2) >= 7u)
        {
          uint64_t v393 = "atomic store operand must have integer, pointer, or floating point type!";
          v397[0] = 259;
          v385[0] = this;
          sub_1CD5DCEDC(v3, (llvm::Twine *)&v393, &v387, v385);
          return;
        }
LABEL_264:
        a1 = v3;
        unsigned int v55 = (llvm::Value *)v140;
        goto LABEL_556;
      }
LABEL_893:
      if (*((unsigned char *)this + 60) == 1) {
        goto LABEL_550;
      }
      unint64_t v8 = "Non-atomic store cannot have SynchronizationScope specified";
      goto LABEL_12;
    case 0x3E:
      uint64_t v107 = **((void **)this - 4 * v5);
      if ((*(_DWORD *)(v107 + 8) & 0xFE) == 0x12) {
        int v108 = *(unsigned __int8 *)(**(void **)(v107 + 16) + 8);
      }
      else {
        int v108 = *(_DWORD *)(v107 + 8);
      }
      if (v108 != 15)
      {
        unint64_t v8 = "GEP base pointer is not a vector or a vector of pointers";
        goto LABEL_12;
      }
      uint64_t v228 = *((void *)this + 8);
      unsigned int v229 = *(unsigned __int8 *)(v228 + 8);
      if (v229 > 0x11) {
        goto LABEL_586;
      }
      if (((1 << v229) & 0xAC7F) != 0)
      {
        uint64_t v230 = -(uint64_t)v5;
        goto LABEL_593;
      }
      if (((1 << v229) & 0x30000) != 0) {
        goto LABEL_591;
      }
LABEL_586:
      if ((v229 & 0xFE) == 0x12 || v229 == 21)
      {
LABEL_591:
        if (llvm::Type::isSizedDerivedType(v228, 0))
        {
          uint64_t v230 = -(uint64_t)(*((_DWORD *)this + 5) & 0x7FFFFFF);
LABEL_593:
          uint64_t v393 = &v395;
          uint64_t v394 = 0x1000000000;
          unint64_t v293 = -(32 * v230 + 32);
          if (v293 >= 0x201) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v294 = &v395;
          if ((llvm::AllocaInst *)((char *)this + 32 * v230 + 32) != this)
          {
            uint64_t v295 = &v395;
            uint64_t v296 = 32 * v230 + 32;
            do
            {
              *v295++ = *(void *)((char *)this + v296);
              v296 += 32;
            }
            while (v296);
            uint64_t v294 = (uint64_t *)v393;
          }
          uint64_t v297 = (v293 >> 5);
          LODWORD(v394) = v293 >> 5;
          if (v394)
          {
            uint64_t v298 = 8 * v297;
            uint64_t v299 = v294;
            do
            {
              uint64_t v300 = *(void *)*v299;
              if ((*(_DWORD *)(v300 + 8) & 0xFE) == 0x12) {
                int v301 = *(unsigned __int8 *)(**(void **)(v300 + 16) + 8);
              }
              else {
                int v301 = *(_DWORD *)(v300 + 8);
              }
              if (v301 != 13)
              {
                int v357 = "GEP indexes must be integers";
                goto LABEL_811;
              }
              ++v299;
              v298 -= 8;
            }
            while (v298);
          }
          IndexedType = (llvm::Value *)llvm::GetElementPtrInst::getIndexedType(*((void *)this + 8), (uint64_t)v294, v297);
          v385[0] = IndexedType;
          if (!IndexedType)
          {
            int v357 = "Invalid indices for GEP pointer type!";
            goto LABEL_811;
          }
          uint64_t v303 = *(void *)this;
          unsigned int v304 = *(_DWORD *)(*(void *)this + 8);
          char v305 = v304;
          if ((v304 & 0xFE) == 0x12) {
            char v305 = *(unsigned char *)(**(void **)(v303 + 16) + 8);
          }
          if (v305 != 15 || *((llvm::Value **)this + 9) != IndexedType)
          {
            unint64_t v387 = (llvm::Value *)"GEP is not of right type for indices!";
            v391[0] = 259;
            uint64_t v392 = this;
            sub_1CD5DBB8C(v3, (llvm::Twine *)&v387, &v392, v385);
            goto LABEL_641;
          }
          if ((v304 & 0xFE) == 0x12)
          {
            int v306 = *(_DWORD *)(v303 + 32);
            int v307 = v304;
            uint64_t v308 = **((void **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
            int v309 = *(_DWORD *)(v308 + 8);
            if ((v309 & 0xFE) == 0x12)
            {
              int v310 = *(_DWORD *)(v308 + 32);
              if ((v304 == 19) == (v309 != 19) || v306 != v310)
              {
                int v357 = "Vector GEP result width doesn't match operand's";
LABEL_811:
                unint64_t v387 = (llvm::Value *)v357;
                v391[0] = 259;
                sub_1CD5DBE68(v3, (llvm::Twine *)&v387);
                if (*(void *)v3) {
                  sub_1CD5DBED0((llvm::raw_ostream **)v3, this);
                }
LABEL_641:
                uint64_t v321 = (llvm::Value *)v393;
                if (v393 != &v395) {
                  goto LABEL_818;
                }
                return;
              }
            }
            if (v394)
            {
              uint64_t v312 = (uint64_t **)v393;
              uint64_t v313 = 8 * v394;
              while (1)
              {
                uint64_t v314 = **v312;
                int v315 = *(_DWORD *)(v314 + 8);
                int v316 = *(_DWORD *)(v314 + 8) & 0xFE;
                if (v314 && v316 == 18) {
                  break;
                }
                if (v316 == 18) {
                  goto LABEL_630;
                }
LABEL_631:
                if (v315 != 13)
                {
                  unint64_t v387 = (llvm::Value *)"All GEP indices should be of integer type";
                  v391[0] = 259;
                  sub_1CD5DBE68(v3, (llvm::Twine *)&v387);
                  goto LABEL_641;
                }
                ++v312;
                v313 -= 8;
                if (!v313) {
                  goto LABEL_635;
                }
              }
              if ((v304 == 19) == (v315 != 19) || *(_DWORD *)(v314 + 32) != v306)
              {
                int v357 = "Invalid GEP index vector width";
                goto LABEL_811;
              }
LABEL_630:
              int v315 = *(unsigned __int8 *)(**(void **)(v314 + 16) + 8);
              goto LABEL_631;
            }
          }
          else
          {
            int v307 = v304;
          }
LABEL_635:
          if (v303 && v307 == 15)
          {
            uint64_t v319 = **((void **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
            int v320 = *(_DWORD *)(v319 + 8);
            if ((v320 & 0xFE) == 0x12) {
              int v320 = *(_DWORD *)(**(void **)(v319 + 16) + 8);
            }
            if ((v320 ^ v304) >= 0x100)
            {
              int v357 = "GEP address space doesn't match type";
              goto LABEL_811;
            }
          }
          sub_1CC642980((uint64_t)v3, (uint64_t ***)this);
          goto LABEL_641;
        }
      }
      unint64_t v8 = "GEP into unsized type!";
      goto LABEL_12;
    case 0x3F:
      if ((*((_WORD *)this + 9) & 4) != 0) {
        goto LABEL_548;
      }
      unint64_t v8 = "fence instructions may only have acquire, release, acq_rel, or seq_cst ordering.";
      goto LABEL_12;
    case 0x40:
      unsigned int v55 = (llvm::Value *)**((void **)this - 8);
      unint64_t v387 = v55;
      if ((*((_DWORD *)v55 + 2) & 0xFD) == 0xD) {
        goto LABEL_556;
      }
      uint64_t v393 = "cmpxchg operand must have integer or pointer type";
      v397[0] = 259;
      v385[0] = this;
      sub_1CD5DCEDC(a1, (llvm::Twine *)&v393, &v387, v385);
      return;
    case 0x41:
      __int16 v81 = *((_WORD *)this + 9);
      if ((v81 & 0xE) == 2)
      {
        unint64_t v8 = "atomicrmw instructions cannot be unordered.";
        goto LABEL_12;
      }
      unsigned int v82 = v81 >> 4;
      unsigned int v55 = (llvm::Value *)**((void **)this - 4);
      v385[0] = v55;
      if (!(v81 >> 4))
      {
        unsigned int v281 = *((unsigned __int8 *)v55 + 8);
        if (v281 < 7 || v281 == 13)
        {
LABEL_556:
          sub_1CC64BF14((uint64_t *)a1, v55, this);
          goto LABEL_550;
        }
        v391[0] = 1283;
        unint64_t v387 = (llvm::Value *)"atomicrmw ";
        OperationName = "xchg";
        uint64_t v390 = 4;
        int v85 = " operand must have integer or floating point type!";
        goto LABEL_800;
      }
      unsigned int v83 = *((unsigned __int8 *)v55 + 8);
      if (v82 - 11 > 1)
      {
        if (v83 != 13)
        {
          v391[0] = 1283;
          unint64_t v387 = (llvm::Value *)"atomicrmw ";
          OperationName = llvm::AtomicRMWInst::getOperationName(v82);
          uint64_t v390 = v356;
          int v85 = " operand must have integer type!";
          goto LABEL_800;
        }
      }
      else if (v83 >= 7)
      {
        v391[0] = 1283;
        unint64_t v387 = (llvm::Value *)"atomicrmw ";
        OperationName = llvm::AtomicRMWInst::getOperationName(v82);
        uint64_t v390 = v84;
        int v85 = " operand must have floating point type!";
LABEL_800:
        uint64_t v392 = this;
        uint64_t v393 = &v387;
        uint64_t v395 = (uint64_t)v85;
        v397[0] = 770;
        sub_1CD5DBB8C(v3, (llvm::Twine *)&v393, &v392, v385);
        return;
      }
      sub_1CC64BF14((uint64_t *)a1, v55, this);
      if (v82 < 0xD) {
        goto LABEL_550;
      }
      unint64_t v8 = "Invalid binary operation!";
      goto LABEL_12;
    case 0x42:
      uint64_t v56 = **((void **)this - 4);
      uint64_t v57 = *(void *)this;
      int v58 = *(_DWORD *)(v56 + 8) & 0xFE;
      uint64_t v59 = (llvm::Type *)v56;
      if (v58 == 18) {
        uint64_t v59 = **(llvm::Type ***)(v56 + 16);
      }
      int v60 = *(_DWORD *)(v56 + 8);
      unsigned int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v59);
      int v62 = *(_DWORD *)(v57 + 8);
      int v63 = v62 & 0xFE;
      std::string v64 = (llvm::Type *)v57;
      if (v63 == 18) {
        std::string v64 = **(llvm::Type ***)(v57 + 16);
      }
      unsigned int v65 = llvm::Type::getPrimitiveSizeInBits(v64);
      if (v58 == 18) {
        int v60 = *(unsigned __int8 *)(**(void **)(v56 + 16) + 8);
      }
      if (v60 == 13)
      {
        if (v63 == 18) {
          int v66 = *(unsigned __int8 *)(**(void **)(v57 + 16) + 8);
        }
        else {
          int v66 = v62;
        }
        if (v66 == 13)
        {
          if ((v58 == 18) == (v63 == 18))
          {
            if (PrimitiveSizeInBits > v65) {
              goto LABEL_548;
            }
            unint64_t v8 = "DestTy too big for Trunc";
          }
          else
          {
            unint64_t v8 = "trunc source and destination must both be a vector or neither";
          }
        }
        else
        {
          unint64_t v8 = "Trunc only produces integer";
        }
      }
      else
      {
        unint64_t v8 = "Trunc only operates on integer";
      }
      goto LABEL_12;
    case 0x43:
      uint64_t v161 = **((void **)this - 4);
      int v162 = *(_DWORD *)(v161 + 8) & 0xFE;
      if (v162 == 18) {
        int v163 = *(unsigned __int8 *)(**(void **)(v161 + 16) + 8);
      }
      else {
        int v163 = *(_DWORD *)(v161 + 8);
      }
      if (v163 != 13)
      {
        unint64_t v8 = "ZExt only operates on integer";
        goto LABEL_12;
      }
      uint64_t v231 = *(llvm::Type **)this;
      int v232 = *(_DWORD *)(*(void *)this + 8) & 0xFE;
      if (v232 == 18) {
        int v233 = *(unsigned __int8 *)(**((void **)v231 + 2) + 8);
      }
      else {
        int v233 = *(_DWORD *)(*(void *)this + 8);
      }
      if (v233 != 13)
      {
        unint64_t v8 = "ZExt only produces an integer";
        goto LABEL_12;
      }
      if ((v162 == 18) != (v232 == 18))
      {
        unint64_t v8 = "zext source and destination must both be a vector or neither";
        goto LABEL_12;
      }
      if (v162 == 18) {
        uint64_t v161 = **(void **)(v161 + 16);
      }
      unsigned int v262 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v161);
      if (v232 == 18) {
        uint64_t v231 = (llvm::Type *)**((void **)v231 + 2);
      }
      if (v262 >= llvm::Type::getPrimitiveSizeInBits(v231))
      {
        unint64_t v8 = "Type too small for ZExt";
        goto LABEL_12;
      }
      goto LABEL_548;
    case 0x44:
      uint64_t v44 = **((void **)this - 4);
      uint64_t v45 = *(void *)this;
      int v46 = *(_DWORD *)(v44 + 8) & 0xFE;
      __int16 v47 = (llvm::Type *)v44;
      if (v46 == 18) {
        __int16 v47 = **(llvm::Type ***)(v44 + 16);
      }
      int v48 = *(_DWORD *)(v44 + 8);
      unsigned int v49 = llvm::Type::getPrimitiveSizeInBits(v47);
      int v50 = *(_DWORD *)(v45 + 8);
      int v51 = v50 & 0xFE;
      uint64_t v52 = (llvm::Type *)v45;
      if (v51 == 18) {
        uint64_t v52 = **(llvm::Type ***)(v45 + 16);
      }
      unsigned int v53 = llvm::Type::getPrimitiveSizeInBits(v52);
      if (v46 == 18) {
        int v48 = *(unsigned __int8 *)(**(void **)(v44 + 16) + 8);
      }
      if (v48 == 13)
      {
        if (v51 == 18) {
          int v54 = *(unsigned __int8 *)(**(void **)(v45 + 16) + 8);
        }
        else {
          int v54 = v50;
        }
        if (v54 == 13)
        {
          if ((v46 == 18) == (v51 == 18))
          {
            if (v49 < v53) {
              goto LABEL_548;
            }
            unint64_t v8 = "Type too small for SExt";
          }
          else
          {
            unint64_t v8 = "sext source and destination must both be a vector or neither";
          }
        }
        else
        {
          unint64_t v8 = "SExt only produces an integer";
        }
      }
      else
      {
        unint64_t v8 = "SExt only operates on integer";
      }
      goto LABEL_12;
    case 0x45:
      uint64_t v114 = **((void **)this - 4);
      uint64_t v115 = *(void *)this;
      int v116 = *(_DWORD *)(v114 + 8) & 0xFE;
      int v117 = *(_DWORD *)(*(void *)this + 8) & 0xFE;
      if ((v116 == 18) != (v117 == 18))
      {
        unint64_t v8 = "FPToUI source and dest must both be vector or scalar";
        goto LABEL_12;
      }
      unsigned int v118 = *(_DWORD *)(v114 + 8);
      unsigned int v119 = v118;
      if (v116 == 18) {
        unsigned int v119 = *(unsigned __int8 *)(**(void **)(v114 + 16) + 8);
      }
      if (v119 >= 7)
      {
        unint64_t v8 = "FPToUI source must be FP or FP vector";
        goto LABEL_12;
      }
      int v120 = *(_DWORD *)(*(void *)this + 8);
      if (v117 == 18) {
        int v120 = *(unsigned __int8 *)(**(void **)(v115 + 16) + 8);
      }
      if (v120 != 13)
      {
        unint64_t v8 = "FPToUI result must be integer or integer vector";
        goto LABEL_12;
      }
      if (v116 == 18 && v117 == 18)
      {
        int v122 = *(_DWORD *)(v114 + 32);
        int v123 = *(_DWORD *)(v115 + 32);
        if ((v118 != 19) == (*(_DWORD *)(*(void *)this + 8) == 19) || v122 != v123)
        {
          unint64_t v8 = "FPToUI source and dest vector length mismatch";
          goto LABEL_12;
        }
      }
      goto LABEL_548;
    case 0x46:
      uint64_t v175 = **((void **)this - 4);
      uint64_t v176 = *(void *)this;
      int v177 = *(_DWORD *)(v175 + 8) & 0xFE;
      int v178 = *(_DWORD *)(*(void *)this + 8) & 0xFE;
      if ((v177 == 18) != (v178 == 18))
      {
        unint64_t v8 = "FPToSI source and dest must both be vector or scalar";
        goto LABEL_12;
      }
      unsigned int v179 = *(_DWORD *)(v175 + 8);
      unsigned int v180 = v179;
      if (v177 == 18) {
        unsigned int v180 = *(unsigned __int8 *)(**(void **)(v175 + 16) + 8);
      }
      if (v180 >= 7)
      {
        unint64_t v8 = "FPToSI source must be FP or FP vector";
        goto LABEL_12;
      }
      int v181 = *(_DWORD *)(*(void *)this + 8);
      if (v178 == 18) {
        int v181 = *(unsigned __int8 *)(**(void **)(v176 + 16) + 8);
      }
      if (v181 != 13)
      {
        unint64_t v8 = "FPToSI result must be integer or integer vector";
        goto LABEL_12;
      }
      if (v177 == 18 && v178 == 18)
      {
        int v183 = *(_DWORD *)(v175 + 32);
        int v184 = *(_DWORD *)(v176 + 32);
        if ((v179 != 19) == (*(_DWORD *)(*(void *)this + 8) == 19) || v183 != v184)
        {
          unint64_t v8 = "FPToSI source and dest vector length mismatch";
          goto LABEL_12;
        }
      }
      goto LABEL_548;
    case 0x47:
      uint64_t v31 = **((void **)this - 4);
      uint64_t v32 = *(void *)this;
      int v33 = *(_DWORD *)(v31 + 8) & 0xFE;
      int v34 = *(_DWORD *)(*(void *)this + 8) & 0xFE;
      if ((v33 == 18) != (v34 == 18))
      {
        unint64_t v8 = "UIToFP source and dest must both be vector or scalar";
        goto LABEL_12;
      }
      int v35 = *(_DWORD *)(v31 + 8);
      int v36 = v35;
      if (v33 == 18) {
        int v36 = *(unsigned __int8 *)(**(void **)(v31 + 16) + 8);
      }
      if (v36 != 13)
      {
        unint64_t v8 = "UIToFP source must be integer or integer vector";
        goto LABEL_12;
      }
      unsigned int v37 = *(_DWORD *)(*(void *)this + 8);
      if (v34 == 18) {
        unsigned int v37 = *(unsigned __int8 *)(**(void **)(v32 + 16) + 8);
      }
      if (v37 >= 7)
      {
        unint64_t v8 = "UIToFP result must be FP or FP vector";
        goto LABEL_12;
      }
      if (v33 == 18 && v34 == 18)
      {
        int v39 = *(_DWORD *)(v31 + 32);
        int v40 = *(_DWORD *)(v32 + 32);
        if ((v35 != 19) == (*(_DWORD *)(*(void *)this + 8) == 19) || v39 != v40)
        {
          unint64_t v8 = "UIToFP source and dest vector length mismatch";
          goto LABEL_12;
        }
      }
      goto LABEL_548;
    case 0x48:
      uint64_t v190 = **((void **)this - 4);
      uint64_t v191 = *(void *)this;
      int v192 = *(_DWORD *)(v190 + 8) & 0xFE;
      int v193 = *(_DWORD *)(*(void *)this + 8) & 0xFE;
      if ((v192 == 18) != (v193 == 18))
      {
        unint64_t v8 = "SIToFP source and dest must both be vector or scalar";
        goto LABEL_12;
      }
      int v194 = *(_DWORD *)(v190 + 8);
      int v195 = v194;
      if (v192 == 18) {
        int v195 = *(unsigned __int8 *)(**(void **)(v190 + 16) + 8);
      }
      if (v195 != 13)
      {
        unint64_t v8 = "SIToFP source must be integer or integer vector";
        goto LABEL_12;
      }
      unsigned int v196 = *(_DWORD *)(*(void *)this + 8);
      if (v193 == 18) {
        unsigned int v196 = *(unsigned __int8 *)(**(void **)(v191 + 16) + 8);
      }
      if (v196 >= 7)
      {
        unint64_t v8 = "SIToFP result must be FP or FP vector";
        goto LABEL_12;
      }
      if (v192 == 18 && v193 == 18)
      {
        int v198 = *(_DWORD *)(v190 + 32);
        int v199 = *(_DWORD *)(v191 + 32);
        if ((v194 != 19) == (*(_DWORD *)(*(void *)this + 8) == 19) || v198 != v199)
        {
          unint64_t v8 = "SIToFP source and dest vector length mismatch";
          goto LABEL_12;
        }
      }
      goto LABEL_548;
    case 0x49:
      uint64_t v164 = **((void **)this - 4);
      uint64_t v165 = *(void *)this;
      int v166 = *(_DWORD *)(v164 + 8) & 0xFE;
      uint64_t v167 = (llvm::Type *)v164;
      if (v166 == 18) {
        uint64_t v167 = **(llvm::Type ***)(v164 + 16);
      }
      unsigned int v168 = *(_DWORD *)(v164 + 8);
      unsigned int v169 = llvm::Type::getPrimitiveSizeInBits(v167);
      int v170 = *(_DWORD *)(v165 + 8);
      int v171 = v170 & 0xFE;
      uint64_t v172 = (llvm::Type *)v165;
      if (v171 == 18) {
        uint64_t v172 = **(llvm::Type ***)(v165 + 16);
      }
      unsigned int v173 = llvm::Type::getPrimitiveSizeInBits(v172);
      if (v166 == 18) {
        unsigned int v168 = *(unsigned __int8 *)(**(void **)(v164 + 16) + 8);
      }
      if (v168 >= 7)
      {
        unint64_t v8 = "FPTrunc only operates on FP";
      }
      else
      {
        if (v171 == 18) {
          unsigned int v174 = *(unsigned __int8 *)(**(void **)(v165 + 16) + 8);
        }
        else {
          unsigned int v174 = v170;
        }
        if (v174 >= 7)
        {
          unint64_t v8 = "FPTrunc only produces an FP";
        }
        else if ((v166 == 18) == (v171 == 18))
        {
          if (v169 > v173) {
            goto LABEL_548;
          }
          unint64_t v8 = "DestTy too big for FPTrunc";
        }
        else
        {
          unint64_t v8 = "fptrunc source and destination must both be a vector or neither";
        }
      }
      goto LABEL_12;
    case 0x4A:
      uint64_t v20 = **((void **)this - 4);
      uint64_t v21 = *(void *)this;
      int v22 = *(_DWORD *)(v20 + 8) & 0xFE;
      BOOL v23 = (llvm::Type *)v20;
      if (v22 == 18) {
        BOOL v23 = **(llvm::Type ***)(v20 + 16);
      }
      unsigned int v24 = *(_DWORD *)(v20 + 8);
      unsigned int v25 = llvm::Type::getPrimitiveSizeInBits(v23);
      int v26 = *(_DWORD *)(v21 + 8);
      int v27 = v26 & 0xFE;
      uint64_t v28 = (llvm::Type *)v21;
      if (v27 == 18) {
        uint64_t v28 = **(llvm::Type ***)(v21 + 16);
      }
      unsigned int v29 = llvm::Type::getPrimitiveSizeInBits(v28);
      if (v22 == 18) {
        unsigned int v24 = *(unsigned __int8 *)(**(void **)(v20 + 16) + 8);
      }
      if (v24 >= 7)
      {
        unint64_t v8 = "FPExt only operates on FP";
      }
      else
      {
        if (v27 == 18) {
          unsigned int v30 = *(unsigned __int8 *)(**(void **)(v21 + 16) + 8);
        }
        else {
          unsigned int v30 = v26;
        }
        if (v30 >= 7)
        {
          unint64_t v8 = "FPExt only produces an FP";
        }
        else if ((v22 == 18) == (v27 == 18))
        {
          if (v25 < v29) {
            goto LABEL_548;
          }
          unint64_t v8 = "DestTy too small for FPExt";
        }
        else
        {
          unint64_t v8 = "fpext source and destination must both be a vector or neither";
        }
      }
      goto LABEL_12;
    case 0x4B:
      uint64_t v99 = **((void **)this - 4);
      int v100 = *(_DWORD *)(v99 + 8);
      int v101 = *(_DWORD *)(v99 + 8) & 0xFE;
      int v102 = v100;
      if (v101 == 18) {
        int v102 = *(unsigned __int8 *)(**(void **)(v99 + 16) + 8);
      }
      if (v102 != 15)
      {
        unint64_t v8 = "PtrToInt source must be pointer";
        goto LABEL_12;
      }
      uint64_t v103 = *(void *)this;
      int v104 = *(_DWORD *)(*(void *)this + 8);
      if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
        int v104 = *(unsigned __int8 *)(**(void **)(v103 + 16) + 8);
      }
      if (v104 != 13)
      {
        unint64_t v8 = "PtrToInt result must be integral";
        goto LABEL_12;
      }
      if ((v101 == 18) != ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18))
      {
        unint64_t v8 = "PtrToInt type mismatch";
        goto LABEL_12;
      }
      if (v101 == 18)
      {
        int v105 = *(_DWORD *)(v99 + 32);
        if ((v100 != 19) == (*(_DWORD *)(*(void *)this + 8) == 19)
          || v105 != *(_DWORD *)(v103 + 32))
        {
          unint64_t v8 = "PtrToInt Vector width mismatch";
          goto LABEL_12;
        }
      }
      goto LABEL_548;
    case 0x4C:
      uint64_t v153 = **((void **)this - 4);
      int v154 = *(_DWORD *)(v153 + 8);
      int v155 = *(_DWORD *)(v153 + 8) & 0xFE;
      int v156 = v154;
      if (v155 == 18) {
        int v156 = *(unsigned __int8 *)(**(void **)(v153 + 16) + 8);
      }
      if (v156 != 13)
      {
        unint64_t v8 = "IntToPtr source must be an integral";
        goto LABEL_12;
      }
      uint64_t v157 = *(void *)this;
      int v158 = *(_DWORD *)(*(void *)this + 8);
      if ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 0x12) {
        int v158 = *(unsigned __int8 *)(**(void **)(v157 + 16) + 8);
      }
      if (v158 != 15)
      {
        unint64_t v8 = "IntToPtr result must be a pointer";
        goto LABEL_12;
      }
      if ((v155 == 18) != ((*(_DWORD *)(*(void *)this + 8) & 0xFE) == 18))
      {
        unint64_t v8 = "IntToPtr type mismatch";
        goto LABEL_12;
      }
      if (v155 == 18)
      {
        int v159 = *(_DWORD *)(v153 + 32);
        if ((v154 != 19) == (*(_DWORD *)(*(void *)this + 8) == 19)
          || v159 != *(_DWORD *)(v157 + 32))
        {
          unint64_t v8 = "IntToPtr Vector width mismatch";
          goto LABEL_12;
        }
      }
      goto LABEL_548;
    case 0x4D:
      if (llvm::CastInst::castIsValid(49, **((llvm::Type ***)this - 4), *(void *)this)) {
        goto LABEL_548;
      }
      unint64_t v8 = "Invalid bitcast";
      goto LABEL_12;
    case 0x4E:
      uint64_t v127 = **((void **)this - 4);
      int v128 = *(_DWORD *)(v127 + 8);
      int v129 = v128 & 0xFE;
      char v130 = v128;
      if (v129 == 18) {
        char v130 = *(unsigned char *)(**(void **)(v127 + 16) + 8);
      }
      if (v130 != 15)
      {
        unint64_t v8 = "AddrSpaceCast source must be a pointer";
        goto LABEL_12;
      }
      uint64_t v131 = *(void *)this;
      int v132 = *(_DWORD *)(*(void *)this + 8);
      int v133 = v132;
      char v134 = v132;
      if ((v132 & 0xFE) == 0x12) {
        char v134 = *(unsigned char *)(**(void **)(v131 + 16) + 8);
      }
      if (v134 != 15)
      {
        unint64_t v8 = "AddrSpaceCast result must be a pointer";
        goto LABEL_12;
      }
      unsigned int v135 = *(_DWORD *)(v127 + 8);
      if (v129 == 18) {
        unsigned int v135 = *(_DWORD *)(**(void **)(v127 + 16) + 8);
      }
      if ((v132 & 0xFE) == 0x12) {
        int v133 = *(_DWORD *)(**(void **)(v131 + 16) + 8);
      }
      if ((v133 ^ v135) <= 0xFF)
      {
        unint64_t v8 = "AddrSpaceCast must be between different address spaces";
        goto LABEL_12;
      }
      if (v129 == 18)
      {
        int v136 = *(_DWORD *)(v127 + 32);
        if ((v128 != 19) == (v132 == 19) || v136 != *(_DWORD *)(v131 + 32))
        {
          unint64_t v8 = "AddrSpaceCast vector pointer number of elements mismatch";
          goto LABEL_12;
        }
      }
      goto LABEL_548;
    case 0x4F:
      uint64_t v95 = *((void *)this + 5);
      if ((*(_WORD *)(*(void *)(v95 + 56) + 18) & 8) == 0)
      {
        unint64_t v8 = "CleanupPadInst needs to be in a function with a personality.";
        goto LABEL_12;
      }
      uint64_t v96 = v95 + 40;
      uint64_t v97 = *(void *)(v95 + 48);
      while (2)
      {
        if (v97 == v96) {
          goto LABEL_751;
        }
        if (v97) {
          uint64_t v98 = v97 - 24;
        }
        else {
          uint64_t v98 = 0;
        }
        if (*(unsigned char *)(v98 + 16) == 83)
        {
          uint64_t v97 = *(void *)(v97 + 8);
          continue;
        }
        break;
      }
      if ((llvm::AllocaInst *)(v97 - 24) != this)
      {
LABEL_751:
        unint64_t v8 = "CleanupPadInst not the first non-PHI instruction in the block.";
        goto LABEL_12;
      }
      unsigned int v222 = *(unsigned __int8 *)(*((void *)this - 4) + 16);
      if (v222 != 20 && (v222 < 0x1C || v222 - 79 >= 2))
      {
        unint64_t v8 = "CleanupPadInst has an invalid parent.";
        goto LABEL_12;
      }
      goto LABEL_385;
    case 0x50:
      uint64_t v109 = *((void *)this + 5);
      if ((*(_WORD *)(*(void *)(v109 + 56) + 18) & 8) == 0)
      {
        unint64_t v8 = "CatchPadInst needs to be in a function with a personality.";
        goto LABEL_12;
      }
      int v110 = (llvm::Value *)*((void *)this - 4);
      if (*((unsigned char *)v110 + 16) != 38)
      {
        uint64_t v355 = "CatchPadInst needs to be directly nested in a CatchSwitchInst.";
        goto LABEL_792;
      }
      uint64_t v111 = v109 + 40;
      uint64_t v112 = *(void *)(v109 + 48);
      while (2)
      {
        if (v112 == v111) {
          goto LABEL_768;
        }
        if (v112) {
          uint64_t v113 = v112 - 24;
        }
        else {
          uint64_t v113 = 0;
        }
        if (*(unsigned char *)(v113 + 16) == 83)
        {
          uint64_t v112 = *(void *)(v112 + 8);
          continue;
        }
        break;
      }
      if ((llvm::AllocaInst *)(v112 - 24) != this)
      {
LABEL_768:
        unint64_t v8 = "CatchPadInst not the first non-PHI instruction in the block.";
        goto LABEL_12;
      }
LABEL_385:
      sub_1CC64B5B0(a1, (uint64_t)this);
      sub_1CC64BFB8(v3, this);
      return;
    case 0x51:
      uint64_t v12 = **((void **)this - 8);
      if (v12 == **((void **)this - 4))
      {
        if ((*(_DWORD *)(v12 + 8) & 0xFE) == 0x12) {
          int v13 = *(unsigned __int8 *)(**(void **)(v12 + 16) + 8);
        }
        else {
          int v13 = *(_DWORD *)(v12 + 8);
        }
        if (v13 == 13 || v13 == 15)
        {
          if ((*((_WORD *)this + 9) & 0x3Eu) - 32 < 0xA) {
            goto LABEL_548;
          }
          unint64_t v8 = "Invalid predicate in ICmp instruction!";
        }
        else
        {
          unint64_t v8 = "Invalid operand types for ICmp instruction";
        }
      }
      else
      {
        unint64_t v8 = "Both operands to ICmp instruction are not of the same type!";
      }
      goto LABEL_12;
    case 0x52:
      uint64_t v42 = **((void **)this - 8);
      if (v42 == **((void **)this - 4))
      {
        if ((*(_DWORD *)(v42 + 8) & 0xFE) == 0x12) {
          unsigned int v43 = *(unsigned __int8 *)(**(void **)(v42 + 16) + 8);
        }
        else {
          unsigned int v43 = *(_DWORD *)(v42 + 8);
        }
        if (v43 >= 7)
        {
          unint64_t v8 = "Invalid operand types for FCmp instruction";
        }
        else
        {
          if ((*((_WORD *)this + 9) & 0x30) == 0) {
            goto LABEL_548;
          }
          unint64_t v8 = "Invalid predicate in FCmp instruction!";
        }
      }
      else
      {
        unint64_t v8 = "Both operands to FCmp instruction are not of the same type!";
      }
      goto LABEL_12;
    case 0x53:
      unint64_t v14 = (llvm::Value *)*((void *)this + 5);
      uint64_t v15 = *((void *)v14 + 6);
      if (v15) {
        BOOL v16 = v15 - 24 == (void)this;
      }
      else {
        BOOL v16 = 0;
      }
      if (!v16)
      {
        uint64_t v17 = *((void *)this + 3);
        uint64_t v18 = v17 ? v17 - 24 : 0;
        if (*(unsigned char *)(v18 + 16) != 83)
        {
          uint64_t v393 = "PHI nodes not grouped at top of basic block!";
          v397[0] = 259;
          unint64_t v387 = this;
          v385[0] = v14;
          sub_1CD5DBC00(a1, (llvm::Twine *)&v393, &v387, v385);
          return;
        }
      }
      if (*(unsigned char *)(*(void *)this + 8) == 12)
      {
        uint64_t v354 = "PHI nodes cannot have token type!";
LABEL_803:
        uint64_t v393 = v354;
        v397[0] = 259;
        sub_1CD5DBE68(a1, (llvm::Twine *)&v393);
        return;
      }
      if ((v4 & 0x40000000) != 0)
      {
        unint64_t v19 = (void **)*((void *)this - 1);
        uint64_t v5 = v5;
      }
      else
      {
        uint64_t v5 = v5;
        unint64_t v19 = (void **)((char *)this - 32 * v5);
      }
      if (!v5) {
        goto LABEL_548;
      }
      uint64_t v263 = 32 * v5;
      while (*(void *)this == **v19)
      {
        v19 += 4;
        v263 -= 32;
        if (!v263) {
          goto LABEL_548;
        }
      }
      unint64_t v8 = "PHI node operands are not the same type as the result!";
      goto LABEL_12;
    case 0x54:
      sub_1CC64C6F8(a1, (uint64_t)this);
      return;
    case 0x55:
      if (llvm::SelectInst::areInvalidOperands(*((uint64_t **)this - 12), *((uint64_t **)this - 8), *((void **)this - 4)))
      {
        unint64_t v8 = "Invalid operands for select instruction!";
      }
      else
      {
        if (**((void **)this - 8) == *(void *)this) {
          goto LABEL_548;
        }
        unint64_t v8 = "Select values must have same type as select instruction!";
      }
      goto LABEL_12;
    case 0x56:
    case 0x57:
      sub_1CC642868(a1, this);
      return;
    case 0x58:
    case 0x5F:
      goto LABEL_548;
    case 0x59:
      if ((*(_DWORD *)(**((void **)this - 8) + 8) & 0xFE) == 0x12
        && *(unsigned char *)(**((void **)this - 4) + 8) == 13)
      {
        goto LABEL_548;
      }
      unint64_t v8 = "Invalid extractelement operands!";
      goto LABEL_12;
    case 0x5A:
      uint64_t v11 = **((void **)this - 12);
      if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12
        && **((void **)this - 8) == *(void *)(v11 + 24)
        && *(unsigned char *)(**((void **)this - 4) + 8) == 13)
      {
        goto LABEL_548;
      }
      unint64_t v8 = "Invalid insertelement operands!";
      goto LABEL_12;
    case 0x5B:
      if (llvm::ShuffleVectorInst::isValidOperands(*((uint64_t **)this - 8), *((void **)this - 4), *((int **)this + 8), *((unsigned int *)this + 18)))goto LABEL_548; {
      unint64_t v8 = "Invalid shufflevector operands!";
      }
      goto LABEL_12;
    case 0x5C:
      uint64_t v201 = (uint64_t *)*((void *)this - 4);
      uint64_t v202 = *v201;
      uint64_t v203 = *((unsigned int *)this + 18);
      if (!v203)
      {
        uint64_t v208 = *v201;
        goto LABEL_410;
      }
      std::string::size_type v204 = (unsigned int *)*((void *)this + 8);
      uint64_t v205 = 4 * v203;
      while (2)
      {
        unint64_t v206 = *v204;
        int v207 = *(unsigned __int8 *)(v202 + 8);
        if (v202 && v207 == 17)
        {
          if (*(void *)(v202 + 32) > v206)
          {
            uint64_t v209 = (uint64_t *)(v202 + 24);
LABEL_352:
            uint64_t v202 = *v209;
            ++v204;
            uint64_t v208 = v202;
            v205 -= 4;
            if (!v205) {
              goto LABEL_410;
            }
            continue;
          }
        }
        else
        {
          uint64_t v208 = 0;
          if (!v202 || v207 != 16)
          {
LABEL_410:
            if (v208 != *(void *)this)
            {
              unint64_t v8 = "Invalid ExtractValueInst operands!";
              goto LABEL_12;
            }
            goto LABEL_548;
          }
          if (v206 < *(_DWORD *)(v202 + 12))
          {
            uint64_t v209 = (uint64_t *)(*(void *)(v202 + 16) + 8 * v206);
            goto LABEL_352;
          }
        }
        break;
      }
      uint64_t v208 = 0;
      goto LABEL_410;
    case 0x5D:
      int v210 = (uint64_t *)*((void *)this - 8);
      uint64_t v211 = *v210;
      uint64_t v212 = *((unsigned int *)this + 18);
      if (!v212)
      {
        uint64_t v217 = *v210;
        goto LABEL_413;
      }
      uint64_t v213 = (unsigned int *)*((void *)this + 8);
      uint64_t v214 = 4 * v212;
      while (2)
      {
        unint64_t v215 = *v213;
        int v216 = *(unsigned __int8 *)(v211 + 8);
        if (v211 && v216 == 17)
        {
          if (*(void *)(v211 + 32) > v215)
          {
            BOOL v218 = (uint64_t *)(v211 + 24);
LABEL_364:
            uint64_t v211 = *v218;
            ++v213;
            uint64_t v217 = v211;
            v214 -= 4;
            if (!v214) {
              goto LABEL_413;
            }
            continue;
          }
        }
        else
        {
          uint64_t v217 = 0;
          if (!v211 || v216 != 16)
          {
LABEL_413:
            if (v217 != **((void **)this - 4))
            {
              unint64_t v8 = "Invalid InsertValueInst operands!";
              goto LABEL_12;
            }
LABEL_548:
LABEL_550:
            sub_1CC642980((uint64_t)v3, (uint64_t ***)this);
            return;
          }
          if (v215 < *(_DWORD *)(v211 + 12))
          {
            BOOL v218 = (uint64_t *)(*(void *)(v211 + 16) + 8 * v215);
            goto LABEL_364;
          }
        }
        break;
      }
      uint64_t v217 = 0;
      goto LABEL_413;
    case 0x5E:
      if (!v5 && (*((_WORD *)this + 9) & 1) == 0)
      {
        unint64_t v8 = "LandingPadInst needs at least one clause or to be a cleanup.";
        goto LABEL_12;
      }
      sub_1CC64B5B0(a1, (uint64_t)this);
      uint64_t v219 = *((void *)v3 + 99);
      uint64_t v220 = *(void *)this;
      if (v219)
      {
        if (v219 != v220)
        {
          unint64_t v8 = "The landingpad instruction should have a consistent result type inside a function.";
          goto LABEL_12;
        }
      }
      else
      {
        *((void *)v3 + 99) = v220;
      }
      uint64_t v268 = *((void *)this + 5);
      if ((*(_WORD *)(*(void *)(v268 + 56) + 18) & 8) == 0)
      {
        unint64_t v8 = "LandingPadInst needs to be in a function with a personality.";
        goto LABEL_12;
      }
      uint64_t v269 = v268 + 40;
      for (uint64_t n = *(void *)(v268 + 48); ; uint64_t n = *(void *)(n + 8))
      {
        if (n == v269) {
          goto LABEL_770;
        }
        uint64_t v271 = n ? n - 24 : 0;
        if (*(unsigned char *)(v271 + 16) != 83) {
          break;
        }
      }
      if ((llvm::AllocaInst *)(n - 24) == this && *(unsigned char *)(n - 8) == 94)
      {
        int v272 = *((_DWORD *)this + 5);
        uint64_t v273 = v272 & 0x7FFFFFF;
        if ((v272 & 0x7FFFFFF) == 0) {
          goto LABEL_548;
        }
        uint64_t v274 = 0;
        uint64_t v275 = 32 * v273;
        int v276 = (char *)this - 32 * v273;
        while (1)
        {
          if ((v272 & 0x40000000) != 0) {
            uint64_t v277 = *(unsigned __int8 **)(*((void *)this - 1) + v274);
          }
          else {
            uint64_t v277 = *(unsigned __int8 **)&v276[v274];
          }
          int v278 = *(unsigned __int8 *)(*(void *)v277 + 8);
          if (v278 == 17)
          {
            int v279 = v277[16];
            if (v279 != 8 && v279 != 13)
            {
              unint64_t v8 = "Filter operand is not an array of constants!";
              goto LABEL_12;
            }
          }
          else if (v278 != 15)
          {
            unint64_t v8 = "Catch operand does not have pointer type!";
            goto LABEL_12;
          }
          v274 += 32;
          if (v275 == v274) {
            goto LABEL_548;
          }
        }
      }
LABEL_770:
      unint64_t v8 = "LandingPadInst not the first non-PHI instruction in the block.";
      goto LABEL_12;
    default:
      uint64_t v79 = **(llvm::Value ***)(*(void *)(*(void *)(*((void *)this + 5) + 56) + 24) + 16);
      if (*((unsigned char *)v79 + 8) == 7)
      {
        if (v5)
        {
          int v80 = "Found return instr that returns non-void in Function of void return type!";
LABEL_399:
          uint64_t v393 = v80;
          v397[0] = 259;
          unint64_t v387 = this;
          v385[0] = v79;
          sub_1CD5DBB8C(a1, (llvm::Twine *)&v393, &v387, v385);
          return;
        }
      }
      else if (v5 != 1 || v79 != **((llvm::Value ***)this - 4))
      {
        int v80 = "Function return type does not match operand type of return inst!";
        goto LABEL_399;
      }
LABEL_563:
      sub_1CC6428C8(v3, (uint64_t)this);
      return;
  }
}