unsigned int *llvm::MachineOperand::ChangeToGA(unsigned int *result, uint64_t a2, uint64_t a3, __int16 a4)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  int *v12;
  int *v13;
  int *v14;

  v4 = *result;
  if (!*result)
  {
    v5 = *((void *)result + 2);
    if (v5)
    {
      v6 = *((void *)result + 1);
      if (v6)
      {
        v7 = *(void *)(v6 + 24);
        if (v7)
        {
          v8 = *(void *)(v7 + 32);
          if (v8)
          {
            v9 = *(void *)(v8 + 40);
            v10 = result[1];
            if ((v10 & 0x80000000) != 0) {
              v11 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
            }
            else {
              v11 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v10);
            }
            v12 = (int *)*v11;
            v13 = (int *)*((void *)result + 3);
            if ((unsigned int *)*v11 != result) {
              v11 = (uint64_t *)(v5 + 24);
            }
            *v11 = (uint64_t)v13;
            if (v13) {
              v14 = v13;
            }
            else {
              v14 = v12;
            }
            *((void *)v14 + 2) = v5;
            *((void *)result + 3) = 0;
            v4 = *result;
          }
        }
      }
    }
  }
  *((void *)result + 2) = a2;
  result[6] = HIDWORD(a3);
  *result = v4 & 0xFFF00000 | ((a4 & 0xFFF) << 8) | 0xA;
  result[1] = a3;
  return result;
}

unsigned int *llvm::MachineOperand::ChangeToMCSymbol(unsigned int *result, uint64_t a2, __int16 a3)
{
  unsigned int v3 = *result;
  if (!*result)
  {
    uint64_t v4 = *((void *)result + 2);
    if (v4)
    {
      uint64_t v5 = *((void *)result + 1);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          uint64_t v7 = *(void *)(v6 + 32);
          if (v7)
          {
            uint64_t v8 = *(void *)(v7 + 40);
            uint64_t v9 = result[1];
            if ((v9 & 0x80000000) != 0) {
              v10 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
            }
            else {
              v10 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v9);
            }
            v11 = (int *)*v10;
            v12 = (int *)*((void *)result + 3);
            if ((unsigned int *)*v10 != result) {
              v10 = (uint64_t *)(v4 + 24);
            }
            uint64_t *v10 = (uint64_t)v12;
            if (v12) {
              v13 = v12;
            }
            else {
              v13 = v11;
            }
            *((void *)v13 + 2) = v4;
            *((void *)result + 3) = 0;
            unsigned int v3 = *result;
          }
        }
      }
    }
  }
  *((void *)result + 2) = a2;
  *result = v3 & 0xFFF00000 | ((a3 & 0xFFF) << 8) | 0xF;
  return result;
}

unsigned int *llvm::MachineOperand::ChangeToTargetIndex(unsigned int *this, unsigned int a2, uint64_t a3, __int16 a4)
{
  unsigned int v4 = *this;
  if (!*this)
  {
    uint64_t v5 = *((void *)this + 2);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 1);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 32);
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 40);
            uint64_t v10 = this[1];
            if ((v10 & 0x80000000) != 0) {
              v11 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
            }
            else {
              v11 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v10);
            }
            v12 = (int *)*v11;
            v13 = (int *)*((void *)this + 3);
            if ((unsigned int *)*v11 != this) {
              v11 = (uint64_t *)(v5 + 24);
            }
            uint64_t *v11 = (uint64_t)v13;
            if (v13) {
              v14 = v13;
            }
            else {
              v14 = v12;
            }
            *((void *)v14 + 2) = v5;
            *((void *)this + 2) = 0;
            *((void *)this + 3) = 0;
            unsigned int v4 = *this;
          }
        }
      }
    }
  }
  this[4] = a2;
  this[6] = HIDWORD(a3);
  *this = v4 & 0xFFF00000 | ((a4 & 0xFFF) << 8) | 7;
  this[1] = a3;
  return this;
}

uint64_t llvm::MachineOperand::ChangeToRegister(uint64_t result, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v8 = *(void *)(result + 8);
  if (v8 && (uint64_t v9 = *(void *)(v8 + 24)) != 0 && (v10 = *(void *)(v9 + 32)) != 0)
  {
    uint64_t v11 = *(void *)(v10 + 40);
    BOOL v12 = *(unsigned char *)result != 0;
    BOOL v13 = v11 == 0;
    if (v11) {
      BOOL v14 = *(unsigned char *)result == 0;
    }
    else {
      BOOL v14 = 0;
    }
    if (v14)
    {
      uint64_t v15 = *(unsigned int *)(result + 4);
      if ((v15 & 0x80000000) != 0) {
        v16 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
      }
      else {
        v16 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v15);
      }
      BOOL v13 = 0;
      BOOL v12 = 0;
      uint64_t v17 = *v16;
      uint64_t v19 = *(void *)(result + 16);
      uint64_t v18 = *(void *)(result + 24);
      if (*v16 != result) {
        v16 = (uint64_t *)(v19 + 24);
      }
      uint64_t *v16 = v18;
      if (v18) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = v17;
      }
      *(void *)(v20 + 16) = v19;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 0;
      uint64_t v8 = *(void *)(result + 8);
    }
  }
  else
  {
    uint64_t v11 = 0;
    BOOL v12 = *(unsigned char *)result != 0;
    BOOL v13 = 1;
  }
  if ((a3 & 1) == 0 && v8 && **(unsigned __int16 **)(v8 + 16) - 13 < 5) {
    a8 = 1;
  }
  if (a3) {
    int v21 = 0x1000000;
  }
  else {
    int v21 = 0;
  }
  if (a4) {
    int v22 = 0x2000000;
  }
  else {
    int v22 = 0;
  }
  if (a5 | a6) {
    int v23 = 0x4000000;
  }
  else {
    int v23 = 0;
  }
  if (a7) {
    int v24 = 0x10000000;
  }
  else {
    int v24 = 0;
  }
  if (a8) {
    unsigned int v25 = 0x80000000;
  }
  else {
    unsigned int v25 = 0;
  }
  int v26 = v22 | v21 | v23 | v24 | v25;
  *(_DWORD *)result = v26 | *(_DWORD *)result & 0xF00000;
  *(_DWORD *)(result + 4) = a2;
  *(void *)(result + 16) = 0;
  if (v12)
  {
    *(_DWORD *)result = v26;
    if (v13) {
      return result;
    }
  }
  else if (v13)
  {
    return result;
  }
  if ((a2 & 0x80000000) != 0) {
    v27 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    v27 = (uint64_t *)(*(void *)(v11 + 272) + 8 * a2);
  }
  uint64_t v28 = *v27;
  if (*v27)
  {
    uint64_t v29 = *(void *)(v28 + 16);
    *(void *)(v28 + 16) = result;
    *(void *)(result + 16) = v29;
    if (*(unsigned char *)(result + 3))
    {
      *(void *)(result + 24) = v28;
    }
    else
    {
      *(void *)(result + 24) = 0;
      v27 = (uint64_t *)(v29 + 24);
    }
  }
  else
  {
    *(void *)(result + 16) = result;
    *(void *)(result + 24) = 0;
  }
  uint64_t *v27 = result;
  return result;
}

BOOL llvm::MachineOperand::isIdenticalTo(llvm::MachineOperand *this, const llvm::MachineOperand *a2)
{
  unsigned int v2 = *(_DWORD *)this;
  uint64_t v3 = *(_DWORD *)this;
  unsigned int v4 = *(_DWORD *)a2;
  if (v3 != *(_DWORD *)a2) {
    return 0;
  }
  BOOL result = 0;
  if ((_BYTE)v2) {
    int v7 = (v2 >> 8) & 0xFFF;
  }
  else {
    int v7 = 0;
  }
  if (*(_DWORD *)a2) {
    int v8 = (v4 >> 8) & 0xFFF;
  }
  else {
    int v8 = 0;
  }
  if (v7 == v8)
  {
    switch(v3)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 14:
      case 15:
        unint64_t v10 = *((void *)this + 2);
        unint64_t v11 = *((void *)a2 + 2);
        goto LABEL_25;
      case 5:
      case 8:
      case 16:
      case 17:
      case 18:
        BOOL v12 = *((_DWORD *)this + 4) == *((_DWORD *)a2 + 4);
        goto LABEL_26;
      case 6:
      case 7:
        if (*((_DWORD *)this + 4) != *((_DWORD *)a2 + 4)) {
          return 0;
        }
        goto LABEL_24;
      case 9:
        if (strcmp(*((const char **)this + 2), *((const char **)a2 + 2))) {
          return 0;
        }
        goto LABEL_24;
      case 10:
      case 11:
        if (*((void *)this + 2) != *((void *)a2 + 2)) {
          return 0;
        }
LABEL_24:
        unint64_t v10 = *((unsigned int *)this + 1) | ((unint64_t)*((unsigned int *)this + 6) << 32);
        unint64_t v11 = *((unsigned int *)a2 + 1) | ((unint64_t)*((unsigned int *)a2 + 6) << 32);
LABEL_25:
        BOOL v12 = v10 == v11;
        goto LABEL_26;
      case 12:
      case 13:
        BOOL v13 = (const void *)*((void *)this + 2);
        BOOL v14 = (const void *)*((void *)a2 + 2);
        if (v13 == v14) {
          return 1;
        }
        uint64_t v15 = *((void *)this + 1);
        if (!v15) {
          return 0;
        }
        uint64_t v16 = *(void *)(v15 + 24);
        if (!v16) {
          return 0;
        }
        uint64_t v17 = *(void *)(v16 + 32);
        if (!v17) {
          return 0;
        }
        size_t v18 = ((*(_DWORD *)((*(uint64_t (**)(void))(**(void **)(v17 + 16) + 176))(*(void *)(v17 + 16))
                                        + 16)
                            + 31) >> 3) & 0x1FFFFFFC;
        uint64_t v19 = v13;
        uint64_t v20 = v14;
LABEL_31:
        BOOL v12 = memcmp(v19, v20, v18) == 0;
LABEL_26:
        BOOL result = v12;
        break;
      case 19:
        uint64_t v21 = *((void *)this + 3);
        if (v21 != *((void *)a2 + 3)) {
          return 0;
        }
        uint64_t v20 = (const void *)*((void *)a2 + 2);
        uint64_t v19 = (const void *)*((void *)this + 2);
        size_t v18 = 4 * v21;
        goto LABEL_31;
      default:
        if (*((_DWORD *)this + 1) != *((_DWORD *)a2 + 1)) {
          return 0;
        }
        return (((v2 & 0x1000000) == 0) ^ HIBYTE(v4)) & (((v2 >> 8) & 0xFFF) == ((v4 >> 8) & 0xFFF));
    }
  }
  return result;
}

uint64_t llvm::hash_value(llvm *this, const llvm::MachineOperand *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    switch(*(_DWORD *)this)
    {
      case 1u:
        goto LABEL_3;
      case 2u:
        goto LABEL_72;
      case 3u:
        LOBYTE(v31) = 3;
        int v12 = (v2 >> 8) & 0xFFF;
        goto LABEL_20;
      case 4u:
        goto LABEL_28;
      case 5u:
        LOBYTE(v31) = 5;
        int v11 = (v2 >> 8) & 0xFFF;
        goto LABEL_18;
      case 6u:
      case 7u:
        char v30 = *(_DWORD *)this;
        if ((_BYTE)v2) {
          int v8 = (v2 >> 8) & 0xFFF;
        }
        else {
          int v8 = 0;
        }
        unsigned int v31 = v8;
        int v29 = *((_DWORD *)this + 4);
        unint64_t v28 = *((unsigned int *)this + 1) | ((unint64_t)*((unsigned int *)this + 6) << 32);
        uint64_t v39 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v32 = 0u;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCBE588))
        {
          unint64_t v24 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override) {
            unint64_t v24 = 0xFF51AFD7ED558CCDLL;
          }
          qword_1EBCBE580 = v24;
          __cxa_guard_release(&qword_1EBCBE588);
        }
        uint64_t v9 = qword_1EBCBE580;
        goto LABEL_14;
      case 8u:
        goto LABEL_68;
      case 9u:
        goto LABEL_62;
      case 0xAu:
        LOBYTE(v29) = 10;
        int v10 = (v2 >> 8) & 0xFFF;
        goto LABEL_16;
      case 0xBu:
        goto LABEL_58;
      case 0xCu:
      case 0xDu:
        goto LABEL_54;
      case 0xEu:
        goto LABEL_51;
      case 0xFu:
        goto LABEL_48;
      case 0x10u:
        goto LABEL_43;
      case 0x11u:
        goto LABEL_42;
      case 0x12u:
        goto LABEL_41;
      case 0x13u:
        goto LABEL_37;
      default:
        goto LABEL_26;
    }
  }
  switch(*(_DWORD *)this)
  {
    case 1u:
LABEL_3:
      if (*(_DWORD *)this) {
        int v3 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v3 = 0;
      }
      uint64_t v4 = *((void *)this + 2);
      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCBE588))
      {
        unint64_t v13 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v13 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v13;
        __cxa_guard_release(&qword_1EBCBE588);
      }
      unint64_t v5 = qword_1EBCBE580;
      uint64_t v40 = qword_1EBCBE580;
      char v6 = 1;
      goto LABEL_8;
    case 2u:
LABEL_72:
      LOBYTE(v31) = 2;
      if ((_BYTE)v2) {
        int v18 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v18 = 0;
      }
      goto LABEL_75;
    case 3u:
      LOBYTE(v31) = 3;
      if ((_BYTE)v2) {
        int v12 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v12 = 0;
      }
LABEL_20:
      LODWORD(v28) = v12;
      *(void *)&long long v32 = *((void *)this + 2);
      return sub_1CC366950(&v31, (int *)&v28, (uint64_t *)&v32);
    case 4u:
LABEL_28:
      if (*(_DWORD *)this) {
        int v3 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v3 = 0;
      }
      uint64_t v4 = *((void *)this + 2);
      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCBE588))
      {
        unint64_t v25 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v25 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v25;
        __cxa_guard_release(&qword_1EBCBE588);
      }
      unint64_t v5 = qword_1EBCBE580;
      uint64_t v40 = qword_1EBCBE580;
      char v6 = 4;
LABEL_8:
      LOBYTE(v32) = v6;
      *(_DWORD *)((char *)&v32 + 1) = v3;
      *(void *)((char *)&v32 + 5) = v4;
      return sub_1CBAE06B8(&v32, 0xDuLL, v5);
    case 5u:
      char v23 = 5;
      goto LABEL_69;
    case 6u:
    case 7u:
      char v30 = *(_DWORD *)this;
      if ((_BYTE)v2) {
        int v26 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v26 = 0;
      }
      unsigned int v31 = v26;
      int v29 = *((_DWORD *)this + 4);
      unint64_t v28 = *((unsigned int *)this + 1) | ((unint64_t)*((unsigned int *)this + 6) << 32);
      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCBE588))
      {
        unint64_t v27 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v27 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v27;
        __cxa_guard_release(&qword_1EBCBE588);
      }
      uint64_t v9 = qword_1EBCBE580;
LABEL_14:
      uint64_t v40 = v9;
      return sub_1CC36B25C((char *)&v32, 0, &v32, (char *)&v36, &v30, (int *)&v31, &v29, (uint64_t *)&v28);
    case 8u:
LABEL_68:
      char v23 = 8;
LABEL_69:
      LOBYTE(v31) = v23;
      if ((_BYTE)v2) {
        int v11 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v11 = 0;
      }
LABEL_18:
      LODWORD(v32) = v11;
      LODWORD(v28) = *((_DWORD *)this + 4);
      return sub_1CC366A64(&v31, (int *)&v32, (int *)&v28);
    case 9u:
LABEL_62:
      LOBYTE(v29) = 9;
      if ((_BYTE)v2) {
        int v21 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v21 = 0;
      }
      unsigned int v31 = v21;
      unint64_t v28 = *((unsigned int *)this + 1) | ((unint64_t)*((unsigned int *)this + 6) << 32);
      int v22 = (const char *)*((void *)this + 2);
      *(void *)&long long v32 = v22;
      if (v22) {
        int v22 = (const char *)strlen(v22);
      }
      *((void *)&v32 + 1) = v22;
      return sub_1CD539D2C(&v29, (int *)&v31, (uint64_t *)&v28, (uint64_t)&v32);
    case 0xAu:
      LOBYTE(v29) = 10;
      if ((_BYTE)v2) {
        int v10 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v10 = 0;
      }
LABEL_16:
      unsigned int v31 = v10;
      *(void *)&long long v32 = *((void *)this + 2);
      unint64_t v28 = *((unsigned int *)this + 1) | ((unint64_t)*((unsigned int *)this + 6) << 32);
      return sub_1CC366B78((char *)&v29, (int *)&v31, (uint64_t *)&v32, (uint64_t *)&v28);
    case 0xBu:
LABEL_58:
      LOBYTE(v29) = 11;
      if ((_BYTE)v2) {
        int v20 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v20 = 0;
      }
      unsigned int v31 = v20;
      *(void *)&long long v32 = *((void *)this + 2);
      unint64_t v28 = *((unsigned int *)this + 1) | ((unint64_t)*((unsigned int *)this + 6) << 32);
      return sub_1CD539DE8((char *)&v29, (int *)&v31, (uint64_t *)&v32, (uint64_t *)&v28);
    case 0xCu:
    case 0xDu:
LABEL_54:
      LOBYTE(v31) = *(_DWORD *)this;
      if ((_BYTE)v2) {
        int v19 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v19 = 0;
      }
      LODWORD(v28) = v19;
      *(void *)&long long v32 = *((void *)this + 2);
      return sub_1CD539EA0(&v31, (int *)&v28, (uint64_t *)&v32);
    case 0xEu:
LABEL_51:
      LOBYTE(v31) = 14;
      if ((_BYTE)v2) {
        int v18 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v18 = 0;
      }
      goto LABEL_75;
    case 0xFu:
LABEL_48:
      LOBYTE(v31) = 15;
      if ((_BYTE)v2) {
        int v18 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v18 = 0;
      }
LABEL_75:
      LODWORD(v28) = v18;
      *(void *)&long long v32 = *((void *)this + 2);
      return sub_1CD539C78(&v31, (int *)&v28, (uint64_t *)&v32);
    case 0x10u:
LABEL_43:
      char v16 = 16;
      goto LABEL_44;
    case 0x11u:
LABEL_42:
      char v16 = 17;
      goto LABEL_44;
    case 0x12u:
LABEL_41:
      char v16 = 18;
LABEL_44:
      LOBYTE(v31) = v16;
      if ((_BYTE)v2) {
        int v17 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v17 = 0;
      }
      LODWORD(v32) = v17;
      LODWORD(v28) = *((_DWORD *)this + 4);
      uint64_t result = sub_1CD539F58(&v31, (int *)&v32, (int *)&v28);
      break;
    case 0x13u:
LABEL_37:
      LOBYTE(v31) = 19;
      if ((_BYTE)v2) {
        int v15 = (v2 >> 8) & 0xFFF;
      }
      else {
        int v15 = 0;
      }
      LODWORD(v28) = v15;
      long long v32 = *((_OWORD *)this + 1);
      uint64_t result = sub_1CD53A010((char *)&v31, (int *)&v28, (uint64_t)&v32);
      break;
    default:
LABEL_26:
      LOBYTE(v29) = 0;
      LODWORD(v28) = *((_DWORD *)this + 1);
      unsigned int v31 = (v2 >> 8) & 0xFFF;
      char v30 = HIBYTE(v2) & 1;
      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v32 = 0u;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCBE588))
      {
        unint64_t v14 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override) {
          unint64_t v14 = 0xFF51AFD7ED558CCDLL;
        }
        qword_1EBCBE580 = v14;
        __cxa_guard_release(&qword_1EBCBE588);
      }
      uint64_t v40 = qword_1EBCBE580;
      uint64_t result = sub_1CC36AFCC((char *)&v32, 0, &v32, (char *)&v36, (char *)&v29, (int *)&v28, (int *)&v31, &v30);
      break;
  }
  return result;
}

unint64_t sub_1CC366950(unsigned char *a1, int *a2, uint64_t *a3)
{
  int v3 = a3;
  uint64_t v4 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  unint64_t v5 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v12 = a1;
    int v7 = __cxa_guard_acquire(&qword_1EBCBE588);
    unint64_t v5 = &unk_1EBCBE000;
    uint64_t v4 = a2;
    int v3 = a3;
    int v8 = v7;
    a1 = v12;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v9;
      __cxa_guard_release(&qword_1EBCBE588);
      unint64_t v5 = (void *)&unk_1EBCBE000;
      int v3 = a3;
      a1 = v12;
      uint64_t v4 = a2;
    }
  }
  uint64_t v16 = v5[176];
  LOBYTE(v13[0]) = *a1;
  return sub_1CC2E95DC((char *)v13, 0, (_OWORD *)((char *)v13 + 1), (char *)v14, v4, v3);
}

unint64_t sub_1CC366A64(unsigned char *a1, int *a2, int *a3)
{
  int v3 = a3;
  uint64_t v4 = a2;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  unint64_t v5 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v12 = a1;
    int v7 = __cxa_guard_acquire(&qword_1EBCBE588);
    unint64_t v5 = &unk_1EBCBE000;
    uint64_t v4 = a2;
    int v3 = a3;
    int v8 = v7;
    a1 = v12;
    if (v8)
    {
      unint64_t v9 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v9 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v9;
      __cxa_guard_release(&qword_1EBCBE588);
      unint64_t v5 = (void *)&unk_1EBCBE000;
      int v3 = a3;
      a1 = v12;
      uint64_t v4 = a2;
    }
  }
  uint64_t v16 = v5[176];
  LOBYTE(v13[0]) = *a1;
  return sub_1CC36B194((char *)v13, 0, (_OWORD *)((char *)v13 + 1), (char *)v14, v4, v3);
}

unint64_t sub_1CC366B78(char *a1, int *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4 = a4;
  unint64_t v5 = a3;
  char v6 = a2;
  int v7 = a1;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  memset(v16, 0, sizeof(v16));
  int v8 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    int v10 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v8 = &unk_1EBCBE000;
    unint64_t v5 = a3;
    int v7 = a1;
    uint64_t v4 = a4;
    char v6 = a2;
    if (v10)
    {
      unint64_t v11 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v11 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v11;
      __cxa_guard_release(&qword_1EBCBE588);
      int v8 = (void *)&unk_1EBCBE000;
      unint64_t v5 = a3;
      int v7 = a1;
      uint64_t v4 = a4;
      char v6 = a2;
    }
  }
  uint64_t v19 = v8[176];
  return sub_1CC36B374((char *)v16, 0, v16, (char *)v17, v7, v6, v5, v4);
}

uint64_t llvm::MachineOperand::getTargetIndexName(llvm::MachineOperand *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (v1 && (v2 = *(void *)(v1 + 24)) != 0 && (uint64_t v3 = *(void *)(v2 + 32)) != 0) {
    return sub_1CC366CB0(*(void *)(v3 + 16), *((_DWORD *)this + 4));
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC366CB0(uint64_t a1, int a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 1096))(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v4 + 8;
  uint64_t v7 = 16 * v5;
  while (*(_DWORD *)(v6 - 8) != a2)
  {
    v6 += 16;
    v7 -= 16;
    if (!v7) {
      return 0;
    }
  }
  return *(void *)v6;
}

void llvm::MachineOperand::print(llvm::raw_ostream *a1, llvm::MachineOperand *this, const llvm::Function **a3, uint64_t a4, int a5, int a6, char a7, int a8, unsigned int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v277 = *MEMORY[0x1E4F143B8];
  uint64_t v268 = a4;
  llvm::MachineOperand::printTargetFlags(this, a1, (const llvm::MachineOperand *)a3);
  int v18 = *(_DWORD *)a1;
  switch(*(_DWORD *)a1)
  {
    case 0u:
      int v20 = *((_DWORD *)a1 + 1);
      if ((v18 & 0x2000000) != 0)
      {
        if ((v18 & 0x1000000) != 0) {
          int v22 = "implicit-def ";
        }
        else {
          int v22 = "implicit ";
        }
        if ((v18 & 0x1000000) != 0) {
          size_t v98 = 13;
        }
        else {
          size_t v98 = 9;
        }
        v99 = (void *)*((void *)this + 4);
        if (v98 > *((void *)this + 3) - (void)v99)
        {
          char v23 = this;
          size_t v24 = v98;
          goto LABEL_133;
        }
        memcpy(v99, v22, v98);
        uint64_t v237 = *((void *)this + 4) + v98;
        goto LABEL_413;
      }
      if ((v18 & 0x1000000) != 0 && a6)
      {
        int v21 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v21 <= 3uLL)
        {
          int v22 = "def ";
          char v23 = this;
          size_t v24 = 4;
LABEL_133:
          llvm::raw_ostream::write(v23, v22, v24);
          goto LABEL_134;
        }
        *int v21 = 543581540;
        uint64_t v237 = *((void *)this + 4) + 4;
LABEL_413:
        *((void *)this + 4) = v237;
      }
LABEL_134:
      if ((*((unsigned char *)a1 + 3) & 0x20) != 0)
      {
        uint64_t v100 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v100) > 8)
        {
          *(unsigned char *)(v100 + 8) = 32;
          *(void *)uint64_t v100 = *(void *)"internal ";
          *((void *)this + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(this, "internal ", 9uLL);
        }
      }
      if ((~*(_DWORD *)a1 & 0x5000000) == 0)
      {
        uint64_t v101 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v101) > 4)
        {
          *(unsigned char *)(v101 + 4) = 32;
          *(_DWORD *)uint64_t v101 = 1684104548;
          *((void *)this + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(this, "dead ", 5uLL);
        }
      }
      if ((*(_DWORD *)a1 >> 26) & ~HIBYTE(*(_DWORD *)a1))
      {
        v102 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v102 > 6uLL)
        {
          *(_DWORD *)((char *)v102 + 3) = 543450476;
          _DWORD *v102 = 1819044203;
          *((void *)this + 4) += 7;
        }
        else
        {
          llvm::raw_ostream::write(this, "killed ", 7uLL);
        }
      }
      if ((*((unsigned char *)a1 + 3) & 0x10) != 0)
      {
        uint64_t v103 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v103) > 5)
        {
          *(_WORD *)(v103 + 4) = 8294;
          *(_DWORD *)uint64_t v103 = 1701080693;
          *((void *)this + 4) += 6;
        }
        else
        {
          llvm::raw_ostream::write(this, "undef ", 6uLL);
        }
      }
      if ((*((unsigned char *)a1 + 3) & 0x40) != 0)
      {
        v104 = (void *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v104 > 0xDuLL)
        {
          qmemcpy(v104, "early-clobber ", 14);
          *((void *)this + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(this, "early-clobber ", 0xEuLL);
        }
      }
      if ((*((_DWORD *)a1 + 1) - 1) > 0x3FFFFFFE || (*(_DWORD *)a1 & 0x8000000) == 0) {
        goto LABEL_157;
      }
      uint64_t v105 = *((void *)a1 + 1);
      if (v105)
      {
        uint64_t v106 = *(void *)(*(void *)(v105 + 16) + 8);
        uint64_t v107 = 0x80000000;
        if ((*(_DWORD *)a1 & 0x1000000) != 0) {
          uint64_t v107 = 0x100000000;
        }
        if ((v106 & v107) != 0) {
          goto LABEL_157;
        }
      }
      uint64_t v108 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v108) > 9)
      {
        *(_WORD *)(v108 + 8) = 8293;
        *(void *)uint64_t v108 = *(void *)"renamable ";
        *((void *)this + 4) += 10;
        if ((v20 & 0x80000000) == 0)
        {
LABEL_158:
          uint64_t v109 = 0;
          goto LABEL_159;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, "renamable ", 0xAuLL);
LABEL_157:
        if ((v20 & 0x80000000) == 0) {
          goto LABEL_158;
        }
      }
      uint64_t v249 = *((void *)a1 + 1);
      if (!v249) {
        goto LABEL_158;
      }
      uint64_t v250 = *(void *)(v249 + 24);
      if (!v250) {
        goto LABEL_158;
      }
      uint64_t v251 = *(void *)(v250 + 32);
      if (!v251) {
        goto LABEL_158;
      }
      uint64_t v109 = *(void *)(v251 + 40);
LABEL_159:
      v110 = operator new(0x28uLL);
      *(void *)v110 = &unk_1F26154E0;
      v110[2] = v20;
      *((void *)v110 + 2) = a10;
      v110[6] = 0;
      *((void *)v110 + 4) = v109;
      off_1F2615510((llvm::raw_ostream *)v110, this);
      (*(void (**)(_DWORD *))(*(void *)v110 + 40))(v110);
      unint64_t v111 = ((unint64_t)*(unsigned int *)a1 >> 8) & 0xFFF;
      if (v111)
      {
        if (a10)
        {
          v112 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v112 >= *((void *)this + 3))
          {
            llvm::raw_ostream::write(this, 46);
          }
          else
          {
            *((void *)this + 4) = v112 + 1;
            unsigned char *v112 = 46;
          }
          uint64_t v129 = *(void *)(a10 + 224);
          unsigned int v130 = v111 - 1;
          v131 = *(const void **)(v129 + 8 * (v111 - 1));
          if (v131)
          {
            size_t v132 = strlen(*(const char **)(v129 + 8 * v130));
            v133 = (void *)*((void *)this + 4);
            if (v132 <= *((void *)this + 3) - (void)v133)
            {
              if (v132)
              {
                memcpy(v133, v131, v132);
                *((void *)this + 4) += v132;
              }
            }
            else
            {
              llvm::raw_ostream::write(this, (const char *)v131, v132);
            }
          }
        }
        else
        {
          v128 = (_DWORD *)*((void *)this + 4);
          if (*((void *)this + 3) - (void)v128 > 6uLL)
          {
            *(_DWORD *)((char *)v128 + 3) = 1734701666;
            _DWORD *v128 = 1651864366;
            *((void *)this + 4) += 7;
          }
          else
          {
            llvm::raw_ostream::write(this, ".subreg", 7uLL);
          }
          sub_1CD098D14(this, v111, 0, 0, 0);
        }
      }
      if (v20 < 0)
      {
        uint64_t v137 = *((void *)a1 + 1);
        if (v137)
        {
          uint64_t v138 = *(void *)(v137 + 24);
          if (v138)
          {
            uint64_t v139 = *(void *)(v138 + 32);
            if (v139)
            {
              uint64_t v140 = *(void *)(v139 + 40);
              if (!a6
                || (a7 & 1) != 0
                || (uint64_t v141 = *(void *)(*(void *)(v140 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8)) == 0
                || (*(unsigned char *)(v141 + 3) & 1) == 0
                && ((uint64_t v241 = *(void *)(v141 + 24)) == 0 || (*(unsigned char *)(v241 + 3) & 1) == 0))
              {
                v142 = (unsigned char *)*((void *)this + 4);
                if ((unint64_t)v142 >= *((void *)this + 3))
                {
                  llvm::raw_ostream::write(this, 58);
                }
                else
                {
                  *((void *)this + 4) = v142 + 1;
                  unsigned char *v142 = 58;
                }
                v167 = operator new(0x20uLL);
                *(void *)v167 = &unk_1F26155B8;
                v167[2] = v20;
                *((void *)v167 + 2) = v140;
                *((void *)v167 + 3) = a10;
                off_1F26155E8((uint64_t)v167, this);
                (*(void (**)(_DWORD *))(*(void *)v167 + 40))(v167);
              }
            }
          }
        }
      }
      if (a8 && (*(_DWORD *)a1 & 0xF00000) != 0 && (*(_DWORD *)a1 & 0x1000000) == 0)
      {
        uint64_t v134 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v134) > 9)
        {
          *(_WORD *)(v134 + 8) = 8294;
          *(void *)uint64_t v134 = *(void *)"(tied-def ";
          *((void *)this + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(this, "(tied-def ", 0xAuLL);
        }
        sub_1CD098D14(this, a9, 0, 0, 0);
        v135 = (unsigned char *)*((void *)this + 4);
        if (*((unsigned char **)this + 3) == v135)
        {
          llvm::raw_ostream::write(this, ")", 1uLL);
        }
        else
        {
          unsigned char *v135 = 41;
          ++*((void *)this + 4);
        }
      }
      if ((a4 & 0xFFFFFFFFFFFFFFF9) != 0)
      {
        v136 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v136 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 40);
        }
        else
        {
          *((void *)this + 4) = v136 + 1;
          unsigned char *v136 = 40;
        }
        llvm::LLT::print((llvm::raw_ostream *)&v268, this);
        v143 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v143 >= *((void *)this + 3))
        {
          llvm::raw_ostream::write(this, 41);
          return;
        }
        goto LABEL_226;
      }
      return;
    case 1u:
      uint64_t v25 = *((void *)a1 + 1);
      if (v25
        && (uint64_t v26 = *(void *)(v25 + 24)) != 0
        && (uint64_t v27 = *(void *)(v26 + 32)) != 0
        && (uint64_t v28 = *(void *)(*(uint64_t (**)(void))(**(void **)(v27 + 16) + 104))(*(void *)(v27 + 16)),
            (uint64_t v29 = (*(uint64_t (**)(void))(v28 + 1256))()) != 0))
      {
        char v30 = *(void (**)(void))(*(void *)v29 + 16);
        v30();
      }
      else
      {
        unint64_t v92 = *((void *)a1 + 2);
        llvm::raw_ostream::operator<<(this, v92);
      }
      return;
    case 2u:
    case 3u:
      uint64_t v19 = (unint64_t *)*((void *)a1 + 2);
      sub_1CC4F9C88(v19, this, 1, (llvm::ModuleSlotTracker *)a3);
      return;
    case 4u:
      unsigned int v31 = (const char *)*((void *)a1 + 2);
      p_p = &__p;
      __p = &unk_1F260D508;
      v270 = v31;
      long long v32 = (void (**)(uint64_t, llvm::raw_ostream *))&off_1F260D538;
      goto LABEL_23;
    case 5u:
      uint64_t v33 = *((void *)a1 + 1);
      if (v33 && (uint64_t v34 = *(void *)(v33 + 24)) != 0 && (v35 = *(void *)(v34 + 32)) != 0) {
        long long v36 = *(void **)(v35 + 56);
      }
      else {
        long long v36 = 0;
      }
      signed int v93 = *((_DWORD *)a1 + 4);
      sub_1CC369688(this, v93, 0, v36);
      return;
    case 6u:
      v144 = (_DWORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v144 > 6uLL)
      {
        *(_DWORD *)((char *)v144 + 3) = 779383662;
        _DWORD *v144 = 1852793637;
        *((void *)this + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(this, "%const.", 7uLL);
      }
      unint64_t v145 = *((int *)a1 + 4);
      if ((v145 & 0x80000000) != 0)
      {
        unint64_t v145 = -(uint64_t)v145;
        v146 = this;
        int v147 = 1;
      }
      else
      {
        v146 = this;
        int v147 = 0;
      }
      sub_1CD098D14(v146, v145, 0, 0, v147);
      goto LABEL_286;
    case 7u:
      v148 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v148 > 0xCuLL)
      {
        qmemcpy(v148, "target-index(", 13);
        *((void *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "target-index(", 0xDuLL);
      }
      uint64_t v149 = *((void *)a1 + 1);
      if (v149 && (uint64_t v150 = *(void *)(v149 + 24)) != 0)
      {
        uint64_t v181 = *(void *)(v150 + 32);
        v151 = "<unknown>";
        if (v181)
        {
          uint64_t v182 = sub_1CC366CB0(*(void *)(v181 + 16), *((_DWORD *)a1 + 4));
          if (v182) {
            v151 = (const char *)v182;
          }
        }
      }
      else
      {
        v151 = "<unknown>";
      }
      size_t v152 = strlen(v151);
      v153 = (unsigned char *)*((void *)this + 4);
      if (v152 <= *((void *)this + 3) - (void)v153)
      {
        if (v152)
        {
          memcpy(v153, v151, v152);
          v153 = (unsigned char *)(*((void *)this + 4) + v152);
          *((void *)this + 4) = v153;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v151, v152);
        v153 = (unsigned char *)*((void *)this + 4);
      }
      if ((unint64_t)v153 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 41);
      }
      else
      {
        *((void *)this + 4) = v153 + 1;
        unsigned char *v153 = 41;
      }
      goto LABEL_286;
    case 8u:
      int v37 = *((_DWORD *)a1 + 4);
      p_p = &__p;
      __p = &unk_1F260E068;
      LODWORD(v270) = v37;
      long long v32 = (void (**)(uint64_t, llvm::raw_ostream *))&off_1F260E098;
LABEL_23:
      (*v32)((uint64_t)&__p, this);
      if (p_p == &__p)
      {
        (*((void (**)(void **))__p + 4))(&__p);
      }
      else if (p_p)
      {
        (*((void (**)(void))*p_p + 5))();
      }
      return;
    case 9u:
      v154 = (llvm::raw_ostream *)*((void *)a1 + 2);
      if (v154) {
        size_t v155 = strlen(*((const char **)a1 + 2));
      }
      else {
        size_t v155 = 0;
      }
      v168 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v168 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 38);
      }
      else
      {
        *((void *)this + 4) = v168 + 1;
        unsigned char *v168 = 38;
      }
      if (v155)
      {
        llvm::printLLVMNameWithoutPrefix(this, v154, v155);
      }
      else
      {
        v177 = (_WORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v177 > 1uLL)
        {
          _WORD *v177 = 8738;
          *((void *)this + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(this, "\"\"", 2uLL);
        }
      }
      goto LABEL_286;
    case 0xAu:
      llvm::Value::printAsOperand(*((llvm::Value **)a1 + 2), this, 0, (llvm::ModuleSlotTracker *)a3);
LABEL_286:
      unint64_t v178 = *((unsigned int *)a1 + 1) | ((unint64_t)*((unsigned int *)a1 + 6) << 32);
      llvm::MachineOperand::printOperandOffset(this, v178);
      return;
    case 0xBu:
      v156 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v156 > 0xCuLL)
      {
        qmemcpy(v156, "blockaddress(", 13);
        *((void *)this + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(this, "blockaddress(", 0xDuLL);
      }
      llvm::Value::printAsOperand(*(llvm::Value **)(*((void *)a1 + 2) - 64), this, 0, (llvm::ModuleSlotTracker *)a3);
      v157 = (_WORD *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v157 > 1uLL)
      {
        _WORD *v157 = 8236;
        uint64_t v158 = *((void *)this + 4) + 2;
        *((void *)this + 4) = v158;
      }
      else
      {
        llvm::raw_ostream::write(this, ", ", 2uLL);
        uint64_t v158 = *((void *)this + 4);
      }
      v159 = *(const llvm::Value **)(*((void *)a1 + 2) - 32);
      if ((unint64_t)(*((void *)this + 3) - v158) > 9)
      {
        *(_WORD *)(v158 + 8) = 11883;
        *(void *)uint64_t v158 = *(void *)"%ir-block.";
        *((void *)this + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(this, "%ir-block.", 0xAuLL);
      }
      if ((*((unsigned char *)v159 + 23) & 0x10) == 0)
      {
        v160 = (const llvm::Function *)*((void *)v159 + 7);
        if (!v160)
        {
LABEL_262:
          uint64_t v161 = *((void *)this + 4);
          if ((unint64_t)(*((void *)this + 3) - v161) <= 8)
          {
            v162 = "<unknown>";
            v163 = this;
            size_t v164 = 9;
LABEL_391:
            llvm::raw_ostream::write(v163, v162, v164);
            goto LABEL_403;
          }
          *(unsigned char *)(v161 + 8) = 62;
          *(void *)uint64_t v161 = *(void *)"<unknown>";
          uint64_t v263 = *((void *)this + 4) + 9;
LABEL_491:
          *((void *)this + 4) = v263;
          goto LABEL_403;
        }
        if (v160 == a3[4])
        {
          int LocalSlot = llvm::SlotTracker::getLocalSlot(a3[5], v159);
        }
        else
        {
          v238 = (void **)*((void *)v160 + 5);
          if (!v238) {
            goto LABEL_262;
          }
          __p = &unk_1F26160C0;
          v270 = 0;
          LOWORD(v271) = 1;
          uint64_t v276 = 0;
          uint64_t v275 = 0;
          uint64_t v273 = 0;
          v274 = 0;
          p_p = v238;
          llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)&__p, v160);
          int LocalSlot = llvm::SlotTracker::getLocalSlot(v274, v159);
          llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)&__p);
        }
        if (LocalSlot != -1)
        {
          unint64_t v243 = LocalSlot;
          if (LocalSlot < 0)
          {
            unint64_t v243 = -(uint64_t)LocalSlot;
            v244 = this;
            int v245 = 1;
          }
          else
          {
            v244 = this;
            int v245 = 0;
          }
          sub_1CD098D14(v244, v243, 0, 0, v245);
          goto LABEL_403;
        }
        v239 = (void *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v239 <= 7uLL)
        {
          v162 = "<badref>";
          v163 = this;
          size_t v164 = 8;
          goto LABEL_391;
        }
        void *v239 = 0x3E6665726461623CLL;
        uint64_t v263 = *((void *)this + 4) + 8;
        goto LABEL_491;
      }
      uint64_t v169 = ***(void ***)v159;
      uint64_t v170 = *(void *)(v169 + 152);
      uint64_t v171 = *(unsigned int *)(v169 + 168);
      if (!v171) {
        goto LABEL_401;
      }
      LODWORD(v172) = (v171 - 1) & ((v159 >> 4) ^ (v159 >> 9));
      uint64_t v173 = v170 + 16 * v172;
      v174 = *(const llvm::Value **)v173;
      if (*(const llvm::Value **)v173 != v159)
      {
        int v175 = 1;
        while (v174 != (const llvm::Value *)-4096)
        {
          int v176 = v172 + v175++;
          uint64_t v172 = v176 & (v171 - 1);
          v174 = *(const llvm::Value **)(v170 + 16 * v172);
          if (v174 == v159)
          {
            uint64_t v173 = v170 + 16 * v172;
            goto LABEL_402;
          }
        }
LABEL_401:
        uint64_t v173 = v170 + 16 * v171;
      }
LABEL_402:
      llvm::printLLVMNameWithoutPrefix(this, (llvm::raw_ostream *)(*(void *)(v173 + 8) + 16), **(void **)(v173 + 8));
LABEL_403:
      v242 = (unsigned char *)*((void *)this + 4);
      if ((unint64_t)v242 >= *((void *)this + 3))
      {
        llvm::raw_ostream::write(this, 41);
      }
      else
      {
        *((void *)this + 4) = v242 + 1;
        unsigned char *v242 = 41;
      }
      llvm::MachineOperand::printOperandOffset(this, *((unsigned int *)a1 + 1) | ((unint64_t)*((unsigned int *)a1 + 6) << 32));
      return;
    case 0xCu:
      long long v38 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v38 > 7uLL)
      {
        *long long v38 = 0x6B73616D6765723CLL;
        *((void *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "<regmask", 8uLL);
      }
      if (a10)
      {
        unint64_t v39 = *(unsigned int *)(a10 + 16);
        if (!v39) {
          goto LABEL_186;
        }
        unint64_t v40 = 0;
        unsigned int v41 = 0;
        int v42 = 0;
        v43 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
        do
        {
          if ((*(_DWORD *)(*((void *)a1 + 2) + 4 * (v40 >> 5)) >> v40))
          {
            if (dword_1EBCCF1D0 < 0 || v41 <= dword_1EBCCF1D0)
            {
              v44 = (unsigned char *)*((void *)this + 4);
              if (*((unsigned char **)this + 3) == v44)
              {
                llvm::raw_ostream::write(this, " ", 1uLL);
              }
              else
              {
                unsigned char *v44 = 32;
                ++*((void *)this + 4);
              }
              v45 = operator new(0x28uLL);
              *(void *)v45 = &unk_1F26154E0;
              v45[2] = v40;
              *((void *)v45 + 2) = a10;
              v45[6] = 0;
              *((void *)v45 + 4) = 0;
              p_p = (void **)v45;
              v43((llvm::raw_ostream *)v45, this);
              if (p_p == &__p)
              {
                (*((void (**)(void **))__p + 4))(&__p);
              }
              else if (p_p)
              {
                (*((void (**)(void))*p_p + 5))();
              }
              ++v41;
              unint64_t v39 = *(unsigned int *)(a10 + 16);
            }
            ++v42;
          }
          ++v40;
        }
        while (v40 < v39);
        unint64_t v118 = v42 - v41;
        if (!v118)
        {
LABEL_186:
          v125 = (char *)*((void *)this + 4);
          if (*((char **)this + 3) == v125)
          {
            v126 = ">";
LABEL_192:
            llvm::raw_ostream::write(this, v126, 1uLL);
          }
          else
          {
LABEL_289:
            char v179 = 62;
LABEL_296:
            char *v125 = v179;
            uint64_t v180 = *((void *)this + 4) + 1;
LABEL_378:
            *((void *)this + 4) = v180;
          }
          return;
        }
        uint64_t v119 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v119) > 4)
        {
          *(unsigned char *)(v119 + 4) = 32;
          *(_DWORD *)uint64_t v119 = 1684955424;
          *((void *)this + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(this, " and ", 5uLL);
        }
        sub_1CD098D14(this, v118, 0, 0, 0);
        v120 = (void *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v120 <= 7uLL)
        {
          v121 = " more...";
          v122 = this;
          size_t v123 = 8;
LABEL_185:
          llvm::raw_ostream::write(v122, v121, v123);
          goto LABEL_186;
        }
        void *v120 = 0x2E2E2E65726F6D20;
        uint64_t v240 = *((void *)this + 4) + 8;
      }
      else
      {
        v124 = (_DWORD *)*((void *)this + 4);
        if (*((void *)this + 3) - (void)v124 <= 3uLL)
        {
          v121 = " ...";
          v122 = this;
          size_t v123 = 4;
          goto LABEL_185;
        }
        _DWORD *v124 = 774778400;
        uint64_t v240 = *((void *)this + 4) + 4;
      }
      *((void *)this + 4) = v240;
      goto LABEL_186;
    case 0xDu:
      uint64_t v46 = *((void *)a1 + 2);
      v47 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v47 > 7uLL)
      {
        void *v47 = 0x2874756F6576696CLL;
        *((void *)this + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(this, "liveout(", 8uLL);
      }
      if (a10)
      {
        uint64_t v48 = *(unsigned int *)(a10 + 16);
        if (v48)
        {
          uint64_t v49 = 0;
          char v50 = 0;
          v51 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
          do
          {
            if ((*(_DWORD *)(v46 + 4 * (v49 >> 5)) >> v49))
            {
              if (v50)
              {
                v52 = (_WORD *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v52 > 1uLL)
                {
                  _WORD *v52 = 8236;
                  *((void *)this + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(this, ", ", 2uLL);
                }
              }
              v53 = operator new(0x28uLL);
              *(void *)v53 = &unk_1F26154E0;
              v53[2] = v49;
              *((void *)v53 + 2) = a10;
              v53[6] = 0;
              *((void *)v53 + 4) = 0;
              p_p = (void **)v53;
              v51((llvm::raw_ostream *)v53, this);
              if (p_p == &__p)
              {
                (*((void (**)(void **))__p + 4))(&__p);
              }
              else if (p_p)
              {
                (*((void (**)(void))*p_p + 5))();
              }
              char v50 = 1;
            }
            ++v49;
          }
          while (v48 != v49);
        }
      }
      else
      {
        uint64_t v127 = *((void *)this + 4);
        if ((unint64_t)(*((void *)this + 3) - v127) > 8)
        {
          *(unsigned char *)(v127 + 8) = 62;
          *(void *)uint64_t v127 = *(void *)"<unknown>";
          *((void *)this + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(this, "<unknown>", 9uLL);
        }
      }
      v125 = (char *)*((void *)this + 4);
      if (*((char **)this + 3) == v125)
      {
        v126 = ")";
        goto LABEL_192;
      }
      char v179 = 41;
      goto LABEL_296;
    case 0xEu:
      uint64_t v54 = *((void *)a1 + 2);
      sub_1CC4F9EAC((uint64_t)this, v54, (llvm::ModuleSlotTracker *)a3, 0, 1, 0);
    case 0xFu:
      v165 = (llvm::MCSymbol *)*((void *)a1 + 2);
LABEL_265:
      uint64_t v166 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v166) > 9)
      {
        *(_WORD *)(v166 + 8) = 8300;
        *(void *)uint64_t v166 = *(void *)"<mcsymbol ";
        *((void *)this + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
      }
      llvm::MCSymbol::print(v165, this, 0);
      v125 = (char *)*((void *)this + 4);
      if (*((char **)this + 3) != v125) {
        goto LABEL_289;
      }
      v95 = ">";
      v96 = this;
      size_t v97 = 1;
      goto LABEL_121;
    case 0x10u:
      uint64_t v55 = *((void *)a1 + 1);
      if (v55)
      {
        uint64_t v56 = *(void *)(v55 + 24);
        if (v56)
        {
          uint64_t v57 = *(void *)(v56 + 32);
          if (v57)
          {
            unsigned int v58 = *((_DWORD *)a1 + 4);
            uint64_t v59 = *(void *)(v57 + 440);
            uint64_t v60 = a10;
            switch(*(_DWORD *)(v59 + 80 * v58))
            {
              case 0:
                uint64_t v61 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v61) <= 0xA)
                {
                  v62 = "same_value ";
                  v63 = this;
                  size_t v64 = 11;
                  goto LABEL_358;
                }
                *(_DWORD *)(v61 + 7) = 543520108;
                *(void *)uint64_t v61 = *(void *)"same_value ";
                uint64_t v264 = *((void *)this + 4) + 11;
                goto LABEL_484;
              case 1:
                v185 = (void *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v185 <= 0xEuLL)
                {
                  v186 = "remember_state ";
                  v187 = this;
                  size_t v188 = 15;
                  goto LABEL_374;
                }
                qmemcpy(v185, "remember_state ", 15);
                uint64_t v265 = *((void *)this + 4) + 15;
                goto LABEL_489;
              case 2:
                v189 = (void *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v189 <= 0xDuLL)
                {
                  v186 = "restore_state ";
                  v187 = this;
                  size_t v188 = 14;
                  goto LABEL_374;
                }
                qmemcpy(v189, "restore_state ", 14);
                uint64_t v265 = *((void *)this + 4) + 14;
                goto LABEL_489;
              case 3:
                v190 = (_DWORD *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v190 <= 6uLL)
                {
                  v191 = "offset ";
                  v192 = this;
                  size_t v193 = 7;
                  goto LABEL_329;
                }
                *(_DWORD *)((char *)v190 + 3) = 544499059;
                _DWORD *v190 = 1936090735;
                uint64_t v266 = *((void *)this + 4) + 7;
                goto LABEL_478;
              case 4:
                uint64_t v194 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v194) > 0x13)
                {
                  *(_DWORD *)(v194 + 16) = 543254115;
                  *(_OWORD *)uint64_t v194 = *(_OWORD *)"llvm_def_aspace_cfa ";
                  *((void *)this + 4) += 20;
                }
                else
                {
                  llvm::raw_ostream::write(this, "llvm_def_aspace_cfa ", 0x14uLL);
                }
                v195 = *(llvm::MCSymbol **)(v59 + 80 * v58 + 8);
                if (v195)
                {
                  uint64_t v256 = *((void *)this + 4);
                  if ((unint64_t)(*((void *)this + 3) - v256) > 9)
                  {
                    *(_WORD *)(v256 + 8) = 8300;
                    *(void *)uint64_t v256 = *(void *)"<mcsymbol ";
                    *((void *)this + 4) += 10;
                  }
                  else
                  {
                    llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
                  }
                  llvm::MCSymbol::print(v195, this, 0);
                  v257 = (unsigned char *)*((void *)this + 4);
                  if (*((unsigned char **)this + 3) == v257)
                  {
                    llvm::raw_ostream::write(this, ">", 1uLL);
                  }
                  else
                  {
                    unsigned char *v257 = 62;
                    ++*((void *)this + 4);
                  }
                  uint64_t v60 = a10;
                }
                sub_1CC36AE04(*(_DWORD *)(v59 + 80 * v58 + 16), this, v60);
                v196 = (_WORD *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v196 > 1uLL)
                {
                  _WORD *v196 = 8236;
                  *((void *)this + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(this, ", ", 2uLL);
                }
                unint64_t v197 = *(int *)(v59 + 80 * v58 + 20);
                if ((v197 & 0x80000000) != 0)
                {
                  unint64_t v197 = -(uint64_t)v197;
                  v198 = this;
                  int v199 = 1;
                }
                else
                {
                  v198 = this;
                  int v199 = 0;
                }
                sub_1CD098D14(v198, v197, 0, 0, v199);
                v200 = (_WORD *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v200 > 1uLL)
                {
                  _WORD *v200 = 8236;
                  *((void *)this + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(this, ", ", 2uLL);
                }
                unint64_t v201 = *(unsigned int *)(v59 + 80 * v58 + 24);
                goto LABEL_339;
              case 5:
                uint64_t v202 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v202) <= 0x10)
                {
                  v62 = "def_cfa_register ";
                  v63 = this;
                  size_t v64 = 17;
                  goto LABEL_358;
                }
                *(unsigned char *)(v202 + 16) = 32;
                *(_OWORD *)uint64_t v202 = *(_OWORD *)"def_cfa_register ";
                uint64_t v264 = *((void *)this + 4) + 17;
                goto LABEL_484;
              case 6:
                v203 = (void *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v203 <= 0xEuLL)
                {
                  v204 = "def_cfa_offset ";
                  v205 = this;
                  size_t v206 = 15;
                  goto LABEL_336;
                }
                qmemcpy(v203, "def_cfa_offset ", 15);
                uint64_t v267 = *((void *)this + 4) + 15;
                goto LABEL_480;
              case 7:
                v207 = (void *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v207 <= 7uLL)
                {
                  v191 = "def_cfa ";
                  v192 = this;
                  size_t v193 = 8;
                  goto LABEL_329;
                }
                void *v207 = 0x206166635F666564;
                uint64_t v266 = *((void *)this + 4) + 8;
                goto LABEL_478;
              case 8:
                uint64_t v208 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v208) > 0xA)
                {
                  *(_DWORD *)(v208 + 7) = 544499059;
                  *(void *)uint64_t v208 = *(void *)"rel_offset ";
                  uint64_t v266 = *((void *)this + 4) + 11;
LABEL_478:
                  *((void *)this + 4) = v266;
                }
                else
                {
                  v191 = "rel_offset ";
                  v192 = this;
                  size_t v193 = 11;
LABEL_329:
                  llvm::raw_ostream::write(v192, v191, v193);
                }
                v209 = *(llvm::MCSymbol **)(v59 + 80 * v58 + 8);
                if (v209)
                {
                  uint64_t v252 = *((void *)this + 4);
                  if ((unint64_t)(*((void *)this + 3) - v252) > 9)
                  {
                    *(_WORD *)(v252 + 8) = 8300;
                    *(void *)uint64_t v252 = *(void *)"<mcsymbol ";
                    *((void *)this + 4) += 10;
                  }
                  else
                  {
                    llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
                  }
                  llvm::MCSymbol::print(v209, this, 0);
                  v253 = (unsigned char *)*((void *)this + 4);
                  if (*((unsigned char **)this + 3) == v253)
                  {
                    llvm::raw_ostream::write(this, ">", 1uLL);
                  }
                  else
                  {
                    unsigned char *v253 = 62;
                    ++*((void *)this + 4);
                  }
                  uint64_t v60 = a10;
                }
                sub_1CC36AE04(*(_DWORD *)(v59 + 80 * v58 + 16), this, v60);
                v210 = (_WORD *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v210 <= 1uLL)
                {
                  v211 = ", ";
                  v212 = this;
                  size_t v213 = 2;
                  goto LABEL_333;
                }
                _WORD *v210 = 8236;
                uint64_t v262 = *((void *)this + 4) + 2;
                goto LABEL_463;
              case 9:
                uint64_t v214 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v214) > 0x11)
                {
                  *(_WORD *)(v214 + 16) = 8308;
                  *(_OWORD *)uint64_t v214 = *(_OWORD *)"adjust_cfa_offset ";
                  uint64_t v267 = *((void *)this + 4) + 18;
LABEL_480:
                  *((void *)this + 4) = v267;
                }
                else
                {
                  v204 = "adjust_cfa_offset ";
                  v205 = this;
                  size_t v206 = 18;
LABEL_336:
                  llvm::raw_ostream::write(v205, v204, v206);
                }
                v215 = *(llvm::MCSymbol **)(v59 + 80 * v58 + 8);
                if (!v215) {
                  goto LABEL_338;
                }
                uint64_t v254 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v254) > 9)
                {
                  *(_WORD *)(v254 + 8) = 8300;
                  *(void *)uint64_t v254 = *(void *)"<mcsymbol ";
                  *((void *)this + 4) += 10;
                }
                else
                {
                  llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
                }
                llvm::MCSymbol::print(v215, this, 0);
                v255 = (unsigned char *)*((void *)this + 4);
                if (*((unsigned char **)this + 3) == v255)
                {
                  v211 = ">";
                  v212 = this;
                  size_t v213 = 1;
LABEL_333:
                  llvm::raw_ostream::write(v212, v211, v213);
                }
                else
                {
                  unsigned char *v255 = 62;
                  uint64_t v262 = *((void *)this + 4) + 1;
LABEL_463:
                  *((void *)this + 4) = v262;
                }
LABEL_338:
                unint64_t v201 = *(int *)(v59 + 80 * v58 + 20);
                if ((v201 & 0x80000000) != 0)
                {
                  unint64_t v201 = -(uint64_t)v201;
                  v216 = this;
                  int v217 = 1;
                }
                else
                {
LABEL_339:
                  v216 = this;
                  int v217 = 0;
                }
                sub_1CD098D14(v216, v201, 0, 0, v217);
                return;
              case 0xA:
                v218 = (_DWORD *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v218 > 6uLL)
                {
                  *(_DWORD *)((char *)v218 + 3) = 543518817;
                  _DWORD *v218 = 1633907557;
                  *((void *)this + 4) += 7;
                }
                else
                {
                  llvm::raw_ostream::write(this, "escape ", 7uLL);
                }
                v219 = *(llvm::MCSymbol **)(v59 + 80 * v58 + 8);
                if (v219)
                {
                  uint64_t v258 = *((void *)this + 4);
                  if ((unint64_t)(*((void *)this + 3) - v258) > 9)
                  {
                    *(_WORD *)(v258 + 8) = 8300;
                    *(void *)uint64_t v258 = *(void *)"<mcsymbol ";
                    *((void *)this + 4) += 10;
                  }
                  else
                  {
                    llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
                  }
                  llvm::MCSymbol::print(v219, this, 0);
                  v259 = (unsigned char *)*((void *)this + 4);
                  if (*((unsigned char **)this + 3) == v259)
                  {
                    llvm::raw_ostream::write(this, ">", 1uLL);
                  }
                  else
                  {
                    unsigned char *v259 = 62;
                    ++*((void *)this + 4);
                  }
                }
                uint64_t v220 = v59 + 80 * v58;
                uint64_t v221 = *(void *)(v220 + 32);
                uint64_t v222 = *(void *)(v220 + 40);
                v223 = (uint64_t *)(v220 + 32);
                if (v222 != v221)
                {
                  uint64_t v224 = v222 + ~v221;
                  if (v224)
                  {
                    for (uint64_t i = 0; i != v224; ++i)
                    {
                      uint64_t v226 = *(unsigned __int8 *)(*v223 + i);
                      __p = &unk_1F260ED30;
                      v270 = "0x%02x";
                      uint64_t v271 = v226;
                      llvm::raw_ostream::operator<<(this, (uint64_t)&__p);
                      v227 = (_WORD *)*((void *)this + 4);
                      if (*((void *)this + 3) - (void)v227 > 1uLL)
                      {
                        _WORD *v227 = 8236;
                        *((void *)this + 4) += 2;
                      }
                      else
                      {
                        llvm::raw_ostream::write(this, ", ", 2uLL);
                      }
                    }
                    uint64_t v221 = *v223;
                  }
                  uint64_t v246 = *(unsigned __int8 *)(v221 + v224);
                  __p = &unk_1F260ED30;
                  v270 = "0x%02x";
                  uint64_t v271 = v246;
                  llvm::raw_ostream::operator<<(this, (uint64_t)&__p);
                }
                return;
              case 0xB:
                v228 = (void *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v228 <= 7uLL)
                {
                  v62 = "restore ";
                  v63 = this;
                  size_t v64 = 8;
                  goto LABEL_358;
                }
                void *v228 = 0x2065726F74736572;
                uint64_t v264 = *((void *)this + 4) + 8;
                goto LABEL_484;
              case 0xC:
                uint64_t v229 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v229) > 9)
                {
                  *(_WORD *)(v229 + 8) = 8292;
                  *(void *)uint64_t v229 = *(void *)"undefined ";
                  uint64_t v264 = *((void *)this + 4) + 10;
LABEL_484:
                  *((void *)this + 4) = v264;
                }
                else
                {
                  v62 = "undefined ";
                  v63 = this;
                  size_t v64 = 10;
LABEL_358:
                  llvm::raw_ostream::write(v63, v62, v64);
                }
                v230 = *(llvm::MCSymbol **)(v59 + 80 * v58 + 8);
                if (v230)
                {
                  uint64_t v247 = *((void *)this + 4);
                  if ((unint64_t)(*((void *)this + 3) - v247) > 9)
                  {
                    *(_WORD *)(v247 + 8) = 8300;
                    *(void *)uint64_t v247 = *(void *)"<mcsymbol ";
                    *((void *)this + 4) += 10;
                  }
                  else
                  {
                    llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
                  }
                  llvm::MCSymbol::print(v230, this, 0);
                  v248 = (unsigned char *)*((void *)this + 4);
                  if (*((unsigned char **)this + 3) == v248)
                  {
                    llvm::raw_ostream::write(this, ">", 1uLL);
                  }
                  else
                  {
                    unsigned char *v248 = 62;
                    ++*((void *)this + 4);
                  }
                  uint64_t v60 = a10;
                }
                unsigned int v231 = *(_DWORD *)(v59 + 80 * v58 + 16);
LABEL_367:
                sub_1CC36AE04(v231, this, v60);
                return;
              case 0xD:
                uint64_t v232 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v232) > 8)
                {
                  *(unsigned char *)(v232 + 8) = 32;
                  *(void *)uint64_t v232 = *(void *)"register ";
                  *((void *)this + 4) += 9;
                }
                else
                {
                  llvm::raw_ostream::write(this, "register ", 9uLL);
                }
                v233 = *(llvm::MCSymbol **)(v59 + 80 * v58 + 8);
                if (v233)
                {
                  uint64_t v260 = *((void *)this + 4);
                  if ((unint64_t)(*((void *)this + 3) - v260) > 9)
                  {
                    *(_WORD *)(v260 + 8) = 8300;
                    *(void *)uint64_t v260 = *(void *)"<mcsymbol ";
                    *((void *)this + 4) += 10;
                  }
                  else
                  {
                    llvm::raw_ostream::write(this, "<mcsymbol ", 0xAuLL);
                  }
                  llvm::MCSymbol::print(v233, this, 0);
                  v261 = (unsigned char *)*((void *)this + 4);
                  if (*((unsigned char **)this + 3) == v261)
                  {
                    llvm::raw_ostream::write(this, ">", 1uLL);
                  }
                  else
                  {
                    unsigned char *v261 = 62;
                    ++*((void *)this + 4);
                  }
                  uint64_t v60 = a10;
                }
                sub_1CC36AE04(*(_DWORD *)(v59 + 80 * v58 + 16), this, v60);
                v234 = (_WORD *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v234 > 1uLL)
                {
                  _WORD *v234 = 8236;
                  *((void *)this + 4) += 2;
                }
                else
                {
                  llvm::raw_ostream::write(this, ", ", 2uLL);
                }
                unsigned int v231 = *(_DWORD *)(v59 + 80 * v58 + 20);
                goto LABEL_367;
              case 0xE:
                uint64_t v235 = *((void *)this + 4);
                if ((unint64_t)(*((void *)this + 3) - v235) <= 0xB)
                {
                  v186 = "window_save ";
                  v187 = this;
                  size_t v188 = 12;
                  goto LABEL_374;
                }
                *(_DWORD *)(v235 + 8) = 543520353;
                *(void *)uint64_t v235 = *(void *)"window_save ";
                uint64_t v265 = *((void *)this + 4) + 12;
                goto LABEL_489;
              case 0xF:
                v236 = (void *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v236 > 0x14uLL)
                {
                  qmemcpy(v236, "negate_ra_sign_state ", 21);
                  uint64_t v265 = *((void *)this + 4) + 21;
LABEL_489:
                  *((void *)this + 4) = v265;
                }
                else
                {
                  v186 = "negate_ra_sign_state ";
                  v187 = this;
                  size_t v188 = 21;
LABEL_374:
                  llvm::raw_ostream::write(v187, v186, v188);
                }
                v165 = *(llvm::MCSymbol **)(v59 + 80 * v58 + 8);
                if (v165) {
                  goto LABEL_265;
                }
                return;
              default:
                v184 = (void *)*((void *)this + 4);
                if (*((void *)this + 3) - (void)v184 <= 0x1DuLL)
                {
                  v95 = "<unserializable cfi directive>";
                  v96 = this;
                  size_t v97 = 30;
                  goto LABEL_121;
                }
                qmemcpy(v184, "<unserializable cfi directive>", 30);
                uint64_t v180 = *((void *)this + 4) + 30;
                break;
            }
            goto LABEL_378;
          }
        }
      }
      v94 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v94 > 0xEuLL)
      {
        qmemcpy(v94, "<cfi directive>", 15);
        uint64_t v180 = *((void *)this + 4) + 15;
        goto LABEL_378;
      }
      v95 = "<cfi directive>";
      v96 = this;
      size_t v97 = 15;
LABEL_121:
      llvm::raw_ostream::write(v96, v95, v97);
      return;
    case 0x11u:
      unint64_t v65 = *((unsigned int *)a1 + 4);
      if (v65 > 0x30EC)
      {
        uint64_t v113 = *((void *)this + 4);
        unint64_t v114 = *((void *)this + 3) - v113;
        if (a11)
        {
          if (v114 > 0xA)
          {
            *(_DWORD *)(v113 + 7) = 1076388713;
            *(void *)uint64_t v113 = *(void *)"intrinsic(@";
            *((void *)this + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(this, "intrinsic(@", 0xBuLL);
          }
          (*(void (**)(void **__return_ptr, uint64_t, unint64_t, void, void))(*(void *)a11 + 16))(&__p, a11, v65, 0, 0);
          if (v271 >= 0) {
            v115 = (const char *)&__p;
          }
          else {
            v115 = (const char *)__p;
          }
          if (v271 >= 0) {
            size_t v116 = HIBYTE(v271) & 0x7F;
          }
          else {
            size_t v116 = (size_t)v270;
          }
          llvm::raw_ostream::write(this, v115, v116);
          v117 = (unsigned char *)*((void *)this + 4);
          if ((unint64_t)v117 >= *((void *)this + 3))
          {
            llvm::raw_ostream::write(this, 41);
          }
          else
          {
            *((void *)this + 4) = v117 + 1;
            unsigned char *v117 = 41;
          }
          if (SHIBYTE(v271) < 0) {
            operator delete(__p);
          }
          return;
        }
        if (v114 > 9)
        {
          *(_WORD *)(v113 + 8) = 10339;
          *(void *)uint64_t v113 = *(void *)"intrinsic(";
          *((void *)this + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(this, "intrinsic(", 0xAuLL);
        }
        sub_1CD098D14(this, v65, 0, 0, 0);
LABEL_225:
        v143 = (unsigned char *)*((void *)this + 4);
        if ((unint64_t)v143 < *((void *)this + 3))
        {
LABEL_226:
          *((void *)this + 4) = v143 + 1;
          unsigned char *v143 = 41;
          return;
        }
LABEL_231:
        llvm::raw_ostream::write(this, 41);
        return;
      }
      uint64_t v66 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v66) > 0xA)
      {
        *(_DWORD *)(v66 + 7) = 1076388713;
        *(void *)uint64_t v66 = *(void *)"intrinsic(@";
        *((void *)this + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(this, "intrinsic(@", 0xBuLL);
      }
      v67 = off_1E6830B58[v65];
      if (!v67) {
        goto LABEL_77;
      }
      size_t v68 = strlen(off_1E6830B58[v65]);
      v69 = (unsigned char *)*((void *)this + 4);
      if (v68 <= *((void *)this + 3) - (void)v69)
      {
        if (v68)
        {
          memcpy(v69, v67, v68);
          v69 = (unsigned char *)(*((void *)this + 4) + v68);
          *((void *)this + 4) = v69;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, v67, v68);
LABEL_77:
        v69 = (unsigned char *)*((void *)this + 4);
      }
      if ((unint64_t)v69 < *((void *)this + 3))
      {
        *((void *)this + 4) = v69 + 1;
        unsigned char *v69 = 41;
        return;
      }
      goto LABEL_231;
    case 0x12u:
      unsigned int v70 = *((_DWORD *)a1 + 4);
      if (v70 - 32 >= 0xA) {
        v71 = "float";
      }
      else {
        v71 = "int";
      }
      if (v70 - 32 >= 0xA) {
        size_t v72 = 5;
      }
      else {
        size_t v72 = 3;
      }
      v73 = (void *)*((void *)this + 4);
      if (v72 <= *((void *)this + 3) - (void)v73)
      {
        memcpy(v73, v71, v72);
        size_t v74 = *((void *)this + 4) + v72;
        *((void *)this + 4) = v74;
      }
      else
      {
        llvm::raw_ostream::write(this, v71, v72);
        size_t v74 = *((void *)this + 4);
      }
      if (*((void *)this + 3) - v74 > 4)
      {
        *(unsigned char *)(v74 + 4) = 40;
        *(_DWORD *)size_t v74 = 1684370032;
        v75 = (unsigned char *)(*((void *)this + 4) + 5);
        *((void *)this + 4) = v75;
      }
      else
      {
        llvm::raw_ostream::write(this, "pred(", 5uLL);
        v75 = (unsigned char *)*((void *)this + 4);
      }
      PredicateName = llvm::CmpInst::getPredicateName(v70);
      size_t v78 = v76;
      if (v76 <= *((void *)this + 3) - (void)v75)
      {
        if (v76)
        {
          memcpy(v75, PredicateName, v76);
          v75 = (unsigned char *)(*((void *)this + 4) + v78);
          *((void *)this + 4) = v75;
        }
      }
      else
      {
        llvm::raw_ostream::write(this, PredicateName, v76);
        v75 = (unsigned char *)*((void *)this + 4);
      }
      if ((unint64_t)v75 >= *((void *)this + 3)) {
        goto LABEL_231;
      }
      *((void *)this + 4) = v75 + 1;
      unsigned char *v75 = 41;
      return;
    case 0x13u:
      uint64_t v79 = *((void *)this + 4);
      if ((unint64_t)(*((void *)this + 3) - v79) > 0xB)
      {
        *(_DWORD *)(v79 + 8) = 678130529;
        *(void *)uint64_t v79 = *(void *)"shufflemask(";
        *((void *)this + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(this, "shufflemask(", 0xCuLL);
      }
      uint64_t v80 = *((void *)a1 + 3);
      if (v80)
      {
        size_t v81 = 0;
        v82 = 0;
        v83 = (int *)*((void *)a1 + 2);
        uint64_t v84 = 4 * v80;
        char v85 = 1;
        do
        {
          unint64_t v86 = *v83;
          v87 = (unsigned char *)*((void *)this + 4);
          size_t v88 = *((void *)this + 3) - (void)v87;
          if (v86 == -1)
          {
            if (v81 <= v88)
            {
              if ((v85 & 1) == 0)
              {
                memcpy(v87, v82, v81);
                v87 = (unsigned char *)(*((void *)this + 4) + v81);
                *((void *)this + 4) = v87;
              }
            }
            else
            {
              llvm::raw_ostream::write(this, v82, v81);
              v87 = (unsigned char *)*((void *)this + 4);
            }
            if (*((void *)this + 3) - (void)v87 > 4uLL)
            {
              v87[4] = 102;
              *(_DWORD *)v87 = 1701080693;
              *((void *)this + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(this, "undef", 5uLL);
            }
          }
          else
          {
            if (v81 <= v88)
            {
              if ((v85 & 1) == 0)
              {
                memcpy(v87, v82, v81);
                *((void *)this + 4) += v81;
              }
            }
            else
            {
              llvm::raw_ostream::write(this, v82, v81);
            }
            if ((v86 & 0x80000000) != 0)
            {
              unint64_t v90 = -(uint64_t)v86;
              v89 = this;
              int v91 = 1;
            }
            else
            {
              v89 = this;
              unint64_t v90 = v86;
              int v91 = 0;
            }
            sub_1CD098D14(v89, v90, 0, 0, v91);
          }
          char v85 = 0;
          ++v83;
          size_t v81 = 2;
          v82 = ", ";
          v84 -= 4;
        }
        while (v84);
      }
      goto LABEL_225;
    default:
      return;
  }
}

llvm::raw_ostream *sub_1CC369688(llvm::raw_ostream *a1, signed int a2, BOOL a3, void *a4)
{
  if (!a4)
  {
    size_t v4 = 0;
    return llvm::MachineOperand::printStackObjectReference(a1, a2, a3, a4, v4);
  }
  int v5 = *((_DWORD *)a4 + 8);
  a3 = a2 < 0 && -v5 <= a2;
  unsigned int v7 = v5 + a2;
  int v8 = *(uint64_t ****)(a4[1] + 40 * v7 + 24);
  if (!v8 || (*((unsigned char *)v8 + 23) & 0x10) == 0)
  {
    size_t v4 = 0;
    a4 = 0;
    goto LABEL_21;
  }
  uint64_t v9 = ***v8;
  uint64_t v10 = *(void *)(v9 + 152);
  uint64_t v11 = *(unsigned int *)(v9 + 168);
  if (!v11) {
    goto LABEL_19;
  }
  LODWORD(v12) = (v11 - 1) & ((v8 >> 4) ^ (v8 >> 9));
  unint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
  unint64_t v14 = *v13;
  if (*v13 != v8)
  {
    int v15 = 1;
    while (v14 != (uint64_t ***)-4096)
    {
      int v16 = v12 + v15++;
      uint64_t v12 = v16 & (v11 - 1);
      unint64_t v14 = *(uint64_t ****)(v10 + 16 * v12);
      if (v14 == v8)
      {
        unint64_t v13 = (uint64_t ****)(v10 + 16 * v12);
        goto LABEL_20;
      }
    }
LABEL_19:
    unint64_t v13 = (uint64_t ****)(v10 + 16 * v11);
  }
LABEL_20:
  uint64_t v17 = (size_t *)v13[1];
  size_t v18 = *v17;
  a4 = v17 + 2;
  size_t v4 = v18;
LABEL_21:
  if (a3) {
    a2 = v7;
  }
  return llvm::MachineOperand::printStackObjectReference(a1, a2, a3, a4, v4);
}

uint64_t llvm::MachinePointerInfo::getAddrSpace(llvm::MachinePointerInfo *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t *llvm::MachinePointerInfo::getFixedStack@<X0>(uint64_t ***this@<X0>, llvm::MachineFunction *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = llvm::PseudoSourceValueManager::getFixedStack(this[54], (int)a2);
  *(void *)a4 = (unint64_t)result | 4;
  *(void *)(a4 + 8) = a3;
  *(unsigned char *)(a4 + 20) = 0;
  if (result) {
    int v7 = *((_DWORD *)result + 3);
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a4 + 16) = v7;
  return result;
}

uint64_t llvm::MachinePointerInfo::getGOT@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 432);
  *(void *)a2 = (v3 + 24) | 4;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 36);
  return this;
}

uint64_t llvm::MachinePointerInfo::getStack@<X0>(uint64_t this@<X0>, llvm::MachineFunction *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(this + 432);
  *(void *)a4 = (v4 + 8) | 4;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 20) = a3;
  *(_DWORD *)(a4 + 16) = *(_DWORD *)(v4 + 20);
  return this;
}

__n128 llvm::MachineMemOperand::MachineMemOperand(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, __int16 a8, char a9, __int16 a10, __int16 a11)
{
  uint64_t v11 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 34) = a5;
  __n128 result = *(__n128 *)a6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

{
  uint64_t v11;
  __n128 result;

  uint64_t v11 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 34) = a5;
  __n128 result = *(__n128 *)a6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  uint64_t v11 = ((unint64_t)(a4 & 0x1FFFFFFF) << 6) | 1;
  if (a4 == -1) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(_WORD *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 34) = a5;
  __n128 result = *(__n128 *)a6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

{
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  uint64_t v11 = ((unint64_t)(a4 & 0x1FFFFFFF) << 6) | 1;
  if (a4 == -1) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v11;
  *(_WORD *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 34) = a5;
  __n128 result = *(__n128 *)a6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a6 + 16);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 36) = a8 & 0xF0FF | ((a9 & 0xF) << 8) | (a11 << 12);
  return result;
}

uint64_t *llvm::MachineMemOperand::Profile(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = result[1];
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v3) = v2;
  unsigned int v4 = *(_DWORD *)(a2 + 12);
  unsigned int v5 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v5) = HIDWORD(v2);
  unsigned int v6 = *(_DWORD *)(a2 + 12);
  unsigned int v7 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v7;
  uint64_t v8 = result[3];
  unsigned int v9 = result[3] & 0xFFFFFFFA | (__rbit32(v8) >> 29) & 0xFFFFFFFD;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v7) = v9;
  unsigned int v10 = *(_DWORD *)(a2 + 12);
  unsigned int v11 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v11;
  if (v11 >= v10) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v11) = HIDWORD(v8);
  unsigned int v12 = *(_DWORD *)(a2 + 12);
  unsigned int v13 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v13;
  uint64_t v14 = *result;
  if (v13 >= v12) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v13) = v14;
  unsigned int v15 = *(_DWORD *)(a2 + 12);
  unsigned int v16 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v16;
  if (v16 >= v15) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v16) = HIDWORD(v14);
  unsigned int v17 = *(_DWORD *)(a2 + 12);
  unsigned int v18 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v18;
  if (v18 >= v17) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v18) = *((unsigned __int16 *)result + 16);
  unsigned int v19 = *(_DWORD *)(a2 + 12);
  unsigned int v20 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v20;
  uint64_t v21 = 1 << *((unsigned char *)result + 34);
  if (v20 >= v19) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v20) = v21;
  unsigned int v22 = *(_DWORD *)(a2 + 12);
  unsigned int v23 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v23;
  if (v23 >= v22) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v23) = HIDWORD(v21);
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t llvm::MachineMemOperand::getAlign(llvm::MachineMemOperand *this)
{
  uint64_t v1 = (1 << *((unsigned char *)this + 34)) | *((void *)this + 1);
  return 63 - __clz(v1 & -v1);
}

uint64_t llvm::MachineMemOperand::print(uint64_t *a1, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, uint64_t a4, uint64_t *a5, void *a6, uint64_t a7)
{
  uint64_t v14 = getenv("MIR_PSEUDO_SRC_HACK");
  if (v14)
  {
    uint64_t result = atoi(v14);
    if (result)
    {
      if ((*a1 & 4) != 0)
      {
        unint64_t v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          if (*(_DWORD *)(v16 + 8) == 7) {
            return result;
          }
        }
      }
    }
  }
  unsigned int v17 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v17 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 40);
  }
  else
  {
    *((void *)a2 + 4) = v17 + 1;
    *unsigned int v17 = 40;
  }
  if ((a1[4] & 4) != 0)
  {
    uint64_t v18 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v18) > 8)
    {
      *(unsigned char *)(v18 + 8) = 32;
      *(void *)uint64_t v18 = *(void *)"volatile ";
      *((void *)a2 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a2, "volatile ", 9uLL);
    }
  }
  if ((a1[4] & 8) != 0)
  {
    unsigned int v19 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v19 > 0xCuLL)
    {
      qmemcpy(v19, "non-temporal ", 13);
      *((void *)a2 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(a2, "non-temporal ", 0xDuLL);
    }
  }
  if ((a1[4] & 0x10) != 0)
  {
    unsigned int v20 = (_OWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v20 > 0xFuLL)
    {
      *unsigned int v20 = *(_OWORD *)"dereferenceable ";
      *((void *)a2 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a2, "dereferenceable ", 0x10uLL);
    }
  }
  if ((a1[4] & 0x20) != 0)
  {
    uint64_t v21 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v21) > 9)
    {
      *(_WORD *)(v21 + 8) = 8308;
      *(void *)uint64_t v21 = *(void *)"invariant ";
      *((void *)a2 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(a2, "invariant ", 0xAuLL);
    }
  }
  if ((a1[4] & 0x40) != 0)
  {
    unsigned int v22 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v22 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 34);
    }
    else
    {
      *((void *)a2 + 4) = v22 + 1;
      *unsigned int v22 = 34;
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 1128))(a7);
    if (v24)
    {
      uint64_t v25 = (const char **)(v23 + 8);
      uint64_t v26 = 16 * v24;
      while (*((_WORD *)v25 - 4) != 64)
      {
        v25 += 2;
        v26 -= 16;
        if (!v26) {
          goto LABEL_33;
        }
      }
      uint64_t v27 = *v25;
      if (*v25)
      {
        size_t v28 = strlen(*v25);
        uint64_t v29 = (void *)*((void *)a2 + 4);
        if (v28 <= *((void *)a2 + 3) - (void)v29)
        {
          if (v28)
          {
            memcpy(v29, v27, v28);
            *((void *)a2 + 4) += v28;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, v27, v28);
        }
      }
    }
LABEL_33:
    char v30 = (_WORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v30 > 1uLL)
    {
      *char v30 = 8226;
      *((void *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\" ", 2uLL);
    }
  }
  if ((a1[4] & 0x80) != 0)
  {
    unsigned int v31 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v31 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 34);
    }
    else
    {
      *((void *)a2 + 4) = v31 + 1;
      *unsigned int v31 = 34;
    }
    uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 1128))(a7);
    if (v33)
    {
      uint64_t v34 = (const char **)(v32 + 8);
      uint64_t v35 = 16 * v33;
      while (*((_WORD *)v34 - 4) != 128)
      {
        v34 += 2;
        v35 -= 16;
        if (!v35) {
          goto LABEL_47;
        }
      }
      long long v36 = *v34;
      if (*v34)
      {
        size_t v37 = strlen(*v34);
        long long v38 = (void *)*((void *)a2 + 4);
        if (v37 <= *((void *)a2 + 3) - (void)v38)
        {
          if (v37)
          {
            memcpy(v38, v36, v37);
            *((void *)a2 + 4) += v37;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, v36, v37);
        }
      }
    }
LABEL_47:
    unint64_t v39 = (_WORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v39 > 1uLL)
    {
      *unint64_t v39 = 8226;
      *((void *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\" ", 2uLL);
    }
  }
  if ((a1[4] & 0x100) != 0)
  {
    unint64_t v40 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v40 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 34);
    }
    else
    {
      *((void *)a2 + 4) = v40 + 1;
      *unint64_t v40 = 34;
    }
    uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 1128))(a7);
    if (v42)
    {
      v43 = (const char **)(v41 + 8);
      uint64_t v44 = 16 * v42;
      while (*((_WORD *)v43 - 4) != 256)
      {
        v43 += 2;
        v44 -= 16;
        if (!v44) {
          goto LABEL_61;
        }
      }
      v45 = *v43;
      if (*v43)
      {
        size_t v46 = strlen(*v43);
        v47 = (void *)*((void *)a2 + 4);
        if (v46 <= *((void *)a2 + 3) - (void)v47)
        {
          if (v46)
          {
            memcpy(v47, v45, v46);
            *((void *)a2 + 4) += v46;
          }
        }
        else
        {
          llvm::raw_ostream::write(a2, v45, v46);
        }
      }
    }
LABEL_61:
    uint64_t v48 = (_WORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v48 > 1uLL)
    {
      *uint64_t v48 = 8226;
      *((void *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\" ", 2uLL);
    }
  }
  if (a1[4])
  {
    uint64_t v49 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v49) > 4)
    {
      *(unsigned char *)(v49 + 4) = 32;
      *(_DWORD *)uint64_t v49 = 1684107116;
      *((void *)a2 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(a2, "load ", 5uLL);
    }
  }
  if ((a1[4] & 2) != 0)
  {
    uint64_t v50 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v50) > 5)
    {
      *(_WORD *)(v50 + 4) = 8293;
      *(_DWORD *)uint64_t v50 = 1919906931;
      *((void *)a2 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a2, "store ", 6uLL);
    }
  }
  __int16 v51 = *((_WORD *)a1 + 18);
  if (v51 != 1)
  {
    if (!*(_DWORD *)(a4 + 8)) {
      llvm::LLVMContextImpl::getSyncScopeNames(*a5, (void *)a4);
    }
    uint64_t v52 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v52) > 0xA)
    {
      *(_DWORD *)(v52 + 7) = 573072752;
      *(void *)uint64_t v52 = *(void *)"syncscope(\"";
      *((void *)a2 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(a2, "syncscope(\"", 0xBuLL);
    }
    llvm::printEscapedString(*(llvm::raw_ostream **)(*(void *)a4 + 16 * v51), *(void *)(*(void *)a4 + 16 * v51 + 8), a2);
    uint64_t v53 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v53) > 2)
    {
      *(unsigned char *)(v53 + 2) = 32;
      *(_WORD *)uint64_t v53 = 10530;
      *((void *)a2 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a2, "\") ", 3uLL);
    }
  }
  unint64_t v54 = ((unint64_t)*((unsigned __int16 *)a1 + 18) >> 8) & 0xF;
  if (v54)
  {
    uint64_t v56 = off_1EA6152A8[v54];
    uint64_t v57 = (unsigned char *)*((void *)a2 + 4);
    if (v56)
    {
      size_t v58 = strlen(off_1EA6152A8[v54]);
      size_t v59 = v58;
      if (v58 <= *((void *)a2 + 3) - (void)v57)
      {
        if (v58)
        {
          memcpy(v57, v56, v58);
          uint64_t v57 = (unsigned char *)(*((void *)a2 + 4) + v59);
          *((void *)a2 + 4) = v57;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, v56, v58);
        uint64_t v57 = (unsigned char *)*((void *)a2 + 4);
      }
    }
    if ((unint64_t)v57 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((void *)a2 + 4) = v57 + 1;
      *uint64_t v57 = 32;
    }
    unsigned int v55 = *((unsigned __int16 *)a1 + 18);
  }
  else
  {
    unsigned int v55 = *((unsigned __int16 *)a1 + 18);
  }
  if (v55 >= 0x1000)
  {
    unsigned int v60 = v55 >> 12;
    uint64_t v61 = off_1EA6152A8[v60];
    v62 = (unsigned char *)*((void *)a2 + 4);
    if (v61)
    {
      size_t v63 = strlen(off_1EA6152A8[v60]);
      size_t v64 = v63;
      if (v63 <= *((void *)a2 + 3) - (void)v62)
      {
        if (v63)
        {
          memcpy(v62, v61, v63);
          v62 = (unsigned char *)(*((void *)a2 + 4) + v64);
          *((void *)a2 + 4) = v62;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, v61, v63);
        v62 = (unsigned char *)*((void *)a2 + 4);
      }
    }
    if ((unint64_t)v62 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((void *)a2 + 4) = v62 + 1;
      unsigned char *v62 = 32;
    }
  }
  if ((a1[3] & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    uint64_t v66 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v66 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 40);
    }
    else
    {
      *((void *)a2 + 4) = v66 + 1;
      *uint64_t v66 = 40;
    }
    uint64_t v124 = a1[3];
    llvm::LLT::print((llvm::raw_ostream *)&v124, a2);
    v67 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v67 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 41);
    }
    else
    {
      *((void *)a2 + 4) = v67 + 1;
      unsigned char *v67 = 41;
    }
  }
  else
  {
    uint64_t v65 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v65) > 0xB)
    {
      *(_DWORD *)(v65 + 8) = 1702521203;
      *(void *)uint64_t v65 = *(void *)"unknown-size";
      *((void *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, "unknown-size", 0xCuLL);
    }
  }
  uint64_t v68 = *a1;
  v69 = (llvm::Value **)(*a1 & 0xFFFFFFFFFFFFFFF8);
  if ((*a1 & 4) != 0 || !v69)
  {
    if (v69 && (v68 & 4) != 0)
    {
      __int16 v77 = *((_WORD *)a1 + 16);
      int v78 = v77 & 3;
      if (v77) {
        uint64_t v79 = " from ";
      }
      else {
        uint64_t v79 = " into ";
      }
      if (v78 == 3) {
        uint64_t v80 = " on ";
      }
      else {
        uint64_t v80 = v79;
      }
      if (v78 == 3) {
        size_t v81 = 4;
      }
      else {
        size_t v81 = 6;
      }
      v82 = (void *)*((void *)a2 + 4);
      if (v81 <= *((void *)a2 + 3) - (void)v82)
      {
        memcpy(v82, v80, v81);
        *((void *)a2 + 4) += v81;
      }
      else
      {
        llvm::raw_ostream::write(a2, v80, v81);
      }
      switch(*((_DWORD *)v69 + 2))
      {
        case 0:
          uint64_t v83 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v83) <= 4)
          {
            uint64_t v84 = "stack";
            char v85 = a2;
            size_t v86 = 5;
            goto LABEL_157;
          }
          *(unsigned char *)(v83 + 4) = 107;
          *(_DWORD *)uint64_t v83 = 1667331187;
          uint64_t v123 = *((void *)a2 + 4) + 5;
          break;
        case 1:
          uint64_t v97 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v97) <= 2)
          {
            uint64_t v84 = "got";
            char v85 = a2;
            size_t v86 = 3;
            goto LABEL_157;
          }
          *(unsigned char *)(v97 + 2) = 116;
          *(_WORD *)uint64_t v97 = 28519;
          uint64_t v123 = *((void *)a2 + 4) + 3;
          break;
        case 2:
          uint64_t v98 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v98) <= 9)
          {
            uint64_t v84 = "jump-table";
            char v85 = a2;
            size_t v86 = 10;
            goto LABEL_157;
          }
          *(_WORD *)(v98 + 8) = 25964;
          *(void *)uint64_t v98 = *(void *)"jump-table";
          uint64_t v123 = *((void *)a2 + 4) + 10;
          break;
        case 3:
          v99 = (void *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v99 <= 0xCuLL)
          {
            uint64_t v84 = "constant-pool";
            char v85 = a2;
            size_t v86 = 13;
            goto LABEL_157;
          }
          qmemcpy(v99, "constant-pool", 13);
          uint64_t v123 = *((void *)a2 + 4) + 13;
          break;
        case 4:
          sub_1CC369688(a2, *((_DWORD *)v69 + 4), 1, a6);
          goto LABEL_158;
        case 5:
          uint64_t v119 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v119) > 0xA)
          {
            *(_DWORD *)(v119 + 7) = 544830068;
            *(void *)uint64_t v119 = *(void *)"call-entry ";
            *((void *)a2 + 4) += 11;
          }
          else
          {
            llvm::raw_ostream::write(a2, "call-entry ", 0xBuLL);
          }
          llvm::Value::printAsOperand(v69[2], a2, 0, a3);
          goto LABEL_158;
        case 6:
          uint64_t v120 = *((void *)a2 + 4);
          if ((unint64_t)(*((void *)a2 + 3) - v120) > 0xB)
          {
            *(_DWORD *)(v120 + 8) = 639662450;
            *(void *)uint64_t v120 = *(void *)"call-entry &";
            *((void *)a2 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(a2, "call-entry &", 0xCuLL);
          }
          v121 = v69[2];
          if (v121) {
            size_t v122 = strlen((const char *)v69[2]);
          }
          else {
            size_t v122 = 0;
          }
          llvm::printLLVMNameWithoutPrefix(a2, v121, v122);
          goto LABEL_158;
        default:
          uint64_t v94 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 1256))(a7);
          v95 = (void *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v95 > 7uLL)
          {
            void *v95 = 0x22206D6F74737563;
            *((void *)a2 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(a2, "custom \"", 8uLL);
          }
          (*(void (**)(uint64_t, llvm::raw_ostream *, llvm::ModuleSlotTracker *, llvm::Value **))(*(void *)v94 + 32))(v94, a2, a3, v69);
          v96 = (unsigned char *)*((void *)a2 + 4);
          if ((unint64_t)v96 >= *((void *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 34);
          }
          else
          {
            *((void *)a2 + 4) = v96 + 1;
            unsigned char *v96 = 34;
          }
          goto LABEL_158;
      }
    }
    else
    {
      if (v68 || !a1[1]) {
        goto LABEL_158;
      }
      __int16 v87 = *((_WORD *)a1 + 16);
      int v88 = v87 & 3;
      if (v87) {
        v89 = " from ";
      }
      else {
        v89 = " into ";
      }
      if (v88 == 3) {
        unint64_t v90 = " on ";
      }
      else {
        unint64_t v90 = v89;
      }
      if (v88 == 3) {
        size_t v91 = 4;
      }
      else {
        size_t v91 = 6;
      }
      unint64_t v92 = (void *)*((void *)a2 + 4);
      if (v91 <= *((void *)a2 + 3) - (void)v92)
      {
        memcpy(v92, v90, v91);
        signed int v93 = (void *)(*((void *)a2 + 4) + v91);
        *((void *)a2 + 4) = v93;
      }
      else
      {
        llvm::raw_ostream::write(a2, v90, v91);
        signed int v93 = (void *)*((void *)a2 + 4);
      }
      if (*((void *)a2 + 3) - (void)v93 <= 0xEuLL)
      {
        uint64_t v84 = "unknown-address";
        char v85 = a2;
        size_t v86 = 15;
LABEL_157:
        llvm::raw_ostream::write(v85, v84, v86);
        goto LABEL_158;
      }
      qmemcpy(v93, "unknown-address", 15);
      uint64_t v123 = *((void *)a2 + 4) + 15;
    }
    *((void *)a2 + 4) = v123;
    goto LABEL_158;
  }
  __int16 v70 = *((_WORD *)a1 + 16);
  int v71 = v70 & 3;
  if (v70) {
    size_t v72 = " from ";
  }
  else {
    size_t v72 = " into ";
  }
  if (v71 == 3) {
    v73 = " on ";
  }
  else {
    v73 = v72;
  }
  if (v71 == 3) {
    size_t v74 = 4;
  }
  else {
    size_t v74 = 6;
  }
  v75 = (void *)*((void *)a2 + 4);
  if (v74 <= *((void *)a2 + 3) - (void)v75)
  {
    memcpy(v75, v73, v74);
    *((void *)a2 + 4) += v74;
  }
  else
  {
    llvm::raw_ostream::write(a2, v73, v74);
  }
  llvm::MIRFormatter::printIRValue(a2, (llvm::raw_ostream *)v69, (llvm::SlotTracker **)a3, v76);
LABEL_158:
  llvm::MachineOperand::printOperandOffset(a2, a1[1]);
  if ((a1[3] & 0xFFFFFFFFFFFFFFF9) == 0) {
    goto LABEL_166;
  }
  uint64_t result = sub_1CB8F1DC4((unint64_t *)a1 + 3);
  unint64_t v101 = result + 7;
  if (v100 == 1) {
  if (v101 >= 8)
  }
  {
    if ((a1[3] & 0xFFFFFFFFFFFFFFF9) == 0) {
      goto LABEL_166;
    }
    uint64_t v102 = (1 << *((unsigned char *)a1 + 34)) | a1[1];
    unint64_t v103 = 63 - __clz(v102 & -v102);
    uint64_t result = sub_1CB8F1DC4((unint64_t *)a1 + 3);
    unint64_t v105 = (unint64_t)(result + 7) >> 3;
    if (v104 == 1) {
    if (1 << v103 != v105)
    }
    {
LABEL_166:
      uint64_t v106 = (void *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v106 > 7uLL)
      {
        *uint64_t v106 = 0x206E67696C61202CLL;
        *((void *)a2 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(a2, ", align ", 8uLL);
      }
      uint64_t v107 = (1 << *((unsigned char *)a1 + 34)) | a1[1];
      uint64_t result = (uint64_t)sub_1CD098D14(a2, 1 << (63 - __clz(v107 & -v107)), 0, 0, 0);
    }
  }
  if (*((unsigned __int8 *)a1 + 34) != (63
                                                        - __clz(((1 << *((unsigned char *)a1 + 34)) | a1[1]) & -((1 << *((unsigned char *)a1 + 34)) | a1[1]))))
  {
    uint64_t v108 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v108) > 0xB)
    {
      *(_DWORD *)(v108 + 8) = 544106345;
      *(void *)uint64_t v108 = *(void *)", basealign ";
      *((void *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", basealign ", 0xCuLL);
    }
    uint64_t result = (uint64_t)sub_1CD098D14(a2, 1 << *((unsigned char *)a1 + 34), 0, 0, 0);
  }
  uint64_t v109 = a1[5];
  uint64_t v111 = a1[7];
  uint64_t v110 = a1[8];
  if (v109)
  {
    v112 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v112 > 7uLL)
    {
      void *v112 = 0x206161627421202CLL;
      *((void *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", !tbaa ", 8uLL);
    }
    sub_1CC4F9EAC((uint64_t)a2, v109, a3, 0, 1, 0);
  }
  if (v111)
  {
    uint64_t v113 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v113 > 0xEuLL)
    {
      qmemcpy(v113, ", !alias.scope ", 15);
      *((void *)a2 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", !alias.scope ", 0xFuLL);
    }
    sub_1CC4F9EAC((uint64_t)a2, v111, a3, 0, 1, 0);
  }
  if (v110)
  {
    uint64_t v114 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v114) > 0xA)
    {
      *(_DWORD *)(v114 + 7) = 544432489;
      *(void *)uint64_t v114 = *(void *)", !noalias ";
      *((void *)a2 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", !noalias ", 0xBuLL);
    }
    sub_1CC4F9EAC((uint64_t)a2, v110, a3, 0, 1, 0);
  }
  if (a1[9])
  {
    uint64_t v115 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v115) > 8)
    {
      *(unsigned char *)(v115 + 8) = 32;
      *(void *)uint64_t v115 = *(void *)", !range ";
      *((void *)a2 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", !range ", 9uLL);
    }
    sub_1CC4F9EAC((uint64_t)a2, a1[9], a3, 0, 1, 0);
  }
  unint64_t v116 = *((unsigned int *)a1 + 4);
  if (v116)
  {
    uint64_t v117 = *((void *)a2 + 4);
    if ((unint64_t)(*((void *)a2 + 3) - v117) > 0xB)
    {
      *(_DWORD *)(v117 + 8) = 543515489;
      *(void *)uint64_t v117 = *(void *)", addrspace ";
      *((void *)a2 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", addrspace ", 0xCuLL);
    }
    uint64_t result = (uint64_t)sub_1CD098D14(a2, v116, 0, 0, 0);
  }
  unint64_t v118 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v118 >= *((void *)a2 + 3)) {
    return (uint64_t)llvm::raw_ostream::write(a2, 41);
  }
  *((void *)a2 + 4) = v118 + 1;
  *unint64_t v118 = 41;
  return result;
}

uint64_t sub_1CC36AE04(unsigned int a1, llvm::raw_ostream *this, uint64_t a3)
{
  if (a3)
  {
    uint64_t result = llvm::MCRegisterInfo::getLLVMRegNum((llvm::MCRegisterInfo *)(a3 + 8), a1, 1);
    if ((result & 0xFF00000000) != 0)
    {
      int v8 = result;
      unsigned int v9 = operator new(0x28uLL);
      *(void *)unsigned int v9 = &unk_1F26154E0;
      v9[2] = v8;
      *((void *)v9 + 2) = a3;
      v9[6] = 0;
      *((void *)v9 + 4) = 0;
      off_1F2615510((llvm::raw_ostream *)v9, this);
      unsigned int v10 = *(uint64_t (**)(_DWORD *))(*(void *)v9 + 40);
      return v10(v9);
    }
    else
    {
      unsigned int v11 = (void *)*((void *)this + 4);
      if (*((void *)this + 3) - (void)v11 > 7uLL)
      {
        void *v11 = 0x3E6765726461623CLL;
        *((void *)this + 4) += 8;
      }
      else
      {
        return (uint64_t)llvm::raw_ostream::write(this, "<badreg>", 8uLL);
      }
    }
  }
  else
  {
    uint64_t v5 = *((void *)this + 4);
    if ((unint64_t)(*((void *)this + 3) - v5) > 9)
    {
      *(_WORD *)(v5 + 8) = 11879;
      *(void *)uint64_t v5 = *(void *)"%dwarfreg.";
      *((void *)this + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(this, "%dwarfreg.", 0xAuLL);
    }
    return (uint64_t)sub_1CD098D14(this, a1, 0, 0, 0);
  }
  return result;
}

unint64_t sub_1CC36AFCC(char *a1, uint64_t a2, unsigned char *a3, char *a4, char *a5, int *a6, int *a7, char *a8)
{
  uint64_t v21 = a2;
  unsigned int v13 = sub_1CC0AC730(a1, &v21, a3, (unint64_t)a4, *a5);
  uint64_t v22 = v21;
  uint64_t v14 = sub_1CC0AC9D0(a1, &v22, v13, (unint64_t)a4, *a6);
  uint64_t v23 = v22;
  unsigned int v15 = sub_1CC0AC9D0(a1, &v23, v14, (unint64_t)a4, *a7);
  uint64_t v24 = v23;
  unint64_t v16 = sub_1CC0AC730(a1, &v24, v15, (unint64_t)a4, *a8);
  uint64_t v17 = v24;
  if (!v24) {
    return sub_1CBAE06B8(a1, v16 - a1, *((void *)a1 + 15));
  }
  unsigned int v20 = v16;
  if (v16 != a1 && v16 != a4) {
    sub_1CBFFD1E8(a1, v16, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v20[v17 - (void)a1]);
}

unint64_t sub_1CC36B0E4(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  if (a2)
  {
    if ((char *)a1 != a3 && a3 != a4) {
      sub_1CBFFD1E8((char *)a1, a3, a4);
    }
    sub_1CBFFCF68((unint64_t *)(a1 + 64), (void *)a1);
    return sub_1CBFFD150((void *)(a1 + 64), (unint64_t)&a3[a2 - a1]);
  }
  else
  {
    unint64_t v4 = (unint64_t)&a3[-a1];
    unint64_t v5 = *(void *)(a1 + 120);
    return sub_1CBAE06B8((void *)a1, v4, v5);
  }
}

unint64_t sub_1CC36B194(char *a1, uint64_t a2, _DWORD *a3, char *a4, int *a5, int *a6)
{
  uint64_t v15 = a2;
  unsigned int v9 = sub_1CC0AC9D0(a1, &v15, a3, (unint64_t)a4, *a5);
  uint64_t v16 = v15;
  unsigned int v10 = (char *)sub_1CC0AC9D0(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  uint64_t v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

unint64_t sub_1CC36B25C(char *a1, uint64_t a2, unsigned char *a3, char *a4, char *a5, int *a6, int *a7, uint64_t *a8)
{
  uint64_t v21 = a2;
  unsigned int v13 = sub_1CC0AC730(a1, &v21, a3, (unint64_t)a4, *a5);
  uint64_t v22 = v21;
  uint64_t v14 = sub_1CC0AC9D0(a1, &v22, v13, (unint64_t)a4, *a6);
  uint64_t v23 = v22;
  uint64_t v15 = sub_1CC0AC9D0(a1, &v23, v14, (unint64_t)a4, *a7);
  uint64_t v24 = v23;
  uint64_t v16 = (char *)sub_1CC2E96A4(a1, &v24, v15, (unint64_t)a4, *a8);
  uint64_t v17 = v24;
  if (!v24) {
    return sub_1CBAE06B8(a1, v16 - a1, *((void *)a1 + 15));
  }
  unsigned int v20 = v16;
  if (v16 != a1 && v16 != a4) {
    sub_1CBFFD1E8(a1, v16, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v20[v17 - (void)a1]);
}

unint64_t sub_1CC36B374(char *a1, uint64_t a2, unsigned char *a3, char *a4, char *a5, int *a6, uint64_t *a7, uint64_t *a8)
{
  uint64_t v16 = a2;
  unsigned int v13 = sub_1CC0AC730(a1, &v16, a3, (unint64_t)a4, *a5);
  uint64_t v17 = v16;
  uint64_t v14 = sub_1CC0AC9D0(a1, &v17, v13, (unint64_t)a4, *a6);
  return sub_1CC36B408(a1, v17, v14, a4, a7, a8);
}

unint64_t sub_1CC36B408(char *a1, uint64_t a2, void *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v15 = a2;
  unsigned int v9 = sub_1CC2E96A4(a1, &v15, a3, (unint64_t)a4, *a5);
  uint64_t v16 = v15;
  unsigned int v10 = (char *)sub_1CC2E96A4(a1, &v16, v9, (unint64_t)a4, *a6);
  uint64_t v11 = v16;
  if (!v16) {
    return sub_1CBAE06B8(a1, v10 - a1, *((void *)a1 + 15));
  }
  uint64_t v14 = v10;
  if (v10 != a1 && v10 != a4) {
    sub_1CBFFD1E8(a1, v10, a4);
  }
  sub_1CBFFCF68((unint64_t *)a1 + 8, a1);
  return sub_1CBFFD150((void *)a1 + 8, (unint64_t)&v14[v11 - (void)a1]);
}

unint64_t sub_1CC36B4D0(void *a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v14 = a1;
    uint64_t v5 = a2;
    int v6 = __cxa_guard_acquire(&qword_1EBCBE588);
    a2 = v5;
    int v7 = v6;
    a1 = v14;
    if (v7)
    {
      unint64_t v8 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v8 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v8;
      __cxa_guard_release(&qword_1EBCBE588);
      a1 = v14;
      a2 = v5;
    }
  }
  unint64_t v2 = qword_1EBCBE580;
  if ((unint64_t)(a2 - (void)a1) > 0x40)
  {
    uint64_t v13 = a2;
    unint64_t v15 = a2 - (void)a1;
    unint64_t v9 = (a2 - (void)a1) & 0xFFFFFFFFFFFFFFC0;
    unsigned int v10 = a1;
    sub_1CBFFCE40(a1, qword_1EBCBE580, v16);
    unint64_t v11 = v9 - 64;
    if (v11)
    {
      unsigned int v12 = v10 + 8;
      do
      {
        sub_1CBFFCF68(v16, v12);
        v12 += 8;
        v11 -= 64;
      }
      while (v11);
    }
    if ((v15 & 0x3F) != 0) {
      sub_1CBFFCF68(v16, (void *)(v13 - 64));
    }
    return sub_1CBFFD150(v16, v15);
  }
  else
  {
    unint64_t v3 = a2 - (void)a1;
    return sub_1CBAE06B8(a1, v3, v2);
  }
}

uint64_t sub_1CC36B608()
{
  v4.n128_u64[0] = (unint64_t)"Number of registers to limit to when printing regmask operands in IR dumps. unlimited = -1";
  v4.n128_u64[1] = 90;
  unint64_t v3 = &v2;
  int v1 = 1;
  int v2 = 32;
  sub_1CD53A978(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &qword_1EBCCF150, &dword_1CB82C000);
}

llvm::MachineBlockFrequencyInfo *llvm::MachineOptimizationRemarkEmitter::computeHotness(llvm::MachineOptimizationRemarkEmitter *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t result = (llvm::MachineBlockFrequencyInfo *)*((void *)this + 1);
  if (result) {
    return (llvm::MachineBlockFrequencyInfo *)llvm::MachineBlockFrequencyInfo::getBlockProfileCount(result, a2);
  }
  return result;
}

llvm::MachineBlockFrequencyInfo *llvm::MachineOptimizationRemarkEmitter::computeHotness(llvm::MachineBlockFrequencyInfo *result, void *a2)
{
  unint64_t v3 = (const llvm::MachineBasicBlock *)a2[45];
  if (v3)
  {
    uint64_t result = (llvm::MachineBlockFrequencyInfo *)*((void *)result + 1);
    if (result) {
      uint64_t result = (llvm::MachineBlockFrequencyInfo *)llvm::MachineBlockFrequencyInfo::getBlockProfileCount(result, v3);
    }
    else {
      uint64_t v4 = 0;
    }
    a2[8] = result;
    a2[9] = v4;
  }
  return result;
}

uint64_t llvm::MachineOptimizationRemarkEmitter::emit(uint64_t ****this, llvm::DiagnosticInfoOptimizationBase *a2)
{
  int v2 = (const llvm::MachineBasicBlock *)*((void *)a2 + 45);
  if (v2)
  {
    unint64_t v3 = (llvm::MachineBlockFrequencyInfo *)this[1];
    if (v3)
    {
      unint64_t v8 = (llvm::MachineOptimizationRemarkEmitter *)this;
      unint64_t v9 = a2;
      unint64_t BlockProfileCount = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(v3, v2);
      unint64_t v3 = v7;
      this = (uint64_t ****)v8;
      a2 = v9;
    }
    else
    {
      unint64_t BlockProfileCount = 0;
    }
    *((void *)a2 + 8) = BlockProfileCount;
    *((void *)a2 + 9) = v3;
  }
  else
  {
    unint64_t BlockProfileCount = *((void *)a2 + 8);
    LOBYTE(v3) = *((unsigned char *)a2 + 72);
  }
  uint64_t result = ****this;
  if (!(_BYTE)v3) {
    unint64_t BlockProfileCount = 0;
  }
  if (*(unsigned char *)(*(void *)result + 96)) {
    unint64_t v6 = *(void *)(*(void *)result + 88);
  }
  else {
    unint64_t v6 = -1;
  }
  if (BlockProfileCount >= v6)
  {
    return llvm::LLVMContext::diagnose(result, a2);
  }
  return result;
}

void llvm::MachineOptimizationRemarkEmitterPass::runOnMachineFunction(llvm::MachineOptimizationRemarkEmitterPass *this, llvm::MachineFunction *a2)
{
  if (*(unsigned char *)(****(void ****)a2 + 81))
  {
    int v2 = (uint64_t *)*((void *)this + 1);
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (v3 == v4)
    {
LABEL_6:
      uint64_t v5 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v3 != &llvm::LazyMachineBlockFrequencyInfoPass::ID)
      {
        v3 += 16;
        if (v3 == v4) {
          goto LABEL_6;
        }
      }
      uint64_t v5 = *(void *)(v3 + 8);
    }
    unint64_t v6 = (llvm::PMDataManager ***)(*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::LazyMachineBlockFrequencyInfoPass::ID);
    llvm::LazyMachineBlockFrequencyInfoPass::calculateIfNotAvailable(v6);
  }
  operator new();
}

void sub_1CC36B89C(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CC36B940(llvm::Pass *this)
{
  *(void *)this = &unk_1F260ED50;
  uint64_t v2 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C40A4A59CD2);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC36BA14(llvm::Pass *this)
{
  *(void *)this = &unk_1F260ED50;
  uint64_t v2 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0x20C40A4A59CD2);
  }
  *(void *)this = &unk_1F260E110;
  uint64_t v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC36BAFC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCCF218;
  *(_DWORD *)(a1 + 24) = 4;
  *(void *)a1 = &unk_1F260EE10;
  *(unsigned char *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 1;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCCF220, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CC36BBBC;
    v5[1] = &PassRegistry;
    uint64_t v4 = v5;
    std::__call_once(&qword_1EBCCF220, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CC36BBBC()
{
}

void sub_1CC36BC5C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC36BC94()
{
  return "Machine Outliner";
}

void sub_1CC36BCA4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

uint64_t sub_1CC36BCF0(uint64_t a1, void *a2)
{
  if ((void *)a2[3] == a2 + 3) {
    return 0;
  }
  unsigned int v7 = 0;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v4 = sub_1CC36BDA4(a1, a2, &v7);
  if (v4 && dword_1EBCCF368)
  {
    unsigned int v5 = 0;
    do
    {
      unsigned int v7 = 0;
      ++*(_DWORD *)(a1 + 32);
      if ((sub_1CC36BDA4(a1, a2, &v7) & 1) == 0) {
        break;
      }
      ++v5;
    }
    while (v5 < dword_1EBCCF368);
  }
  return v4;
}

uint64_t sub_1CC36BDA4(uint64_t a1, void *a2, unsigned int *a3)
{
  uint64_t v425 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::MachineModuleInfoWrapperPass::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  v340 = (llvm::MachineModuleInfo *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::MachineModuleInfoWrapperPass::ID)+ 32);
  *(unsigned char *)(a1 + 28) = byte_1EBCCF2A8;
  int v345 = -3;
  long long v346 = 0uLL;
  uint64_t v347 = 0;
  v348[0] = 0;
  v348[1] = 0;
  int v349 = 0;
  long long v350 = 0u;
  long long v351 = 0u;
  long long v352 = 0u;
  char v353 = 0;
  unsigned int v7 = (void *)a2[4];
  v344 = a2 + 3;
  if (v7 != a2 + 3)
  {
    while (1)
    {
      uint64_t v8 = v7 ? (uint64_t)(v7 - 7) : 0;
      if (*(void *)(v8 + 72) != v8 + 72)
      {
        uint64_t MachineFunction = llvm::MachineModuleInfo::getMachineFunction(v340, (const Function *)v8);
        if (MachineFunction)
        {
          uint64_t v10 = MachineFunction;
          uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(MachineFunction + 16) + 104))(*(void *)(MachineFunction + 16));
          uint64_t v12 = v11;
          if (*(unsigned char *)(a1 + 36)
            || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v11 + 1232))(v11, v10))
          {
            if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v12 + 1224))(v12, v10, *(unsigned __int8 *)(a1 + 28)))
            {
              break;
            }
          }
        }
      }
LABEL_91:
      unsigned int v7 = (void *)v7[1];
      if (v7 == v344) {
        goto LABEL_92;
      }
    }
    uint64_t v13 = v10 + 320;
    for (std::string::size_type i = *(void *)(v10 + 328); ; std::string::size_type i = *(void *)(i + 8))
    {
      if (i == v13) {
        goto LABEL_91;
      }
      if (i + 48 != (*(void *)(i + 48) & 0xFFFFFFFFFFFFFFF8))
      {
        int v15 = -1;
        std::string::size_type v16 = i + 48;
        do
        {
          std::string::size_type v16 = *(void *)(v16 + 8);
          ++v15;
        }
        while (v16 != i + 48);
        if ((v15 & 0xFFFFFFFE) != 0 && !*(unsigned char *)(i + 185))
        {
          LODWORD(v382.__r_.__value_.__l.__data_) = 0;
          if ((*(unsigned int (**)(uint64_t, std::string::size_type, std::string *))(*(void *)v12 + 1192))(v12, i, &v382))
          {
            break;
          }
        }
      }
LABEL_90:
      ;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string::size_type, std::string *))(*(void *)v12 + 1200))(&__dst, v12, i, &v382);
    if (!LODWORD(__dst.__r_.__value_.__r.__words[1]))
    {
LABEL_88:
      if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2]) {
        free(__dst.__r_.__value_.__l.__data_);
      }
      goto LABEL_90;
    }
    int data = (int)v382.__r_.__value_.__l.__data_;
    v391.__r_.__value_.__r.__words[0] = i;
    *((_DWORD *)sub_1CBAEE230((uint64_t)v348, (uint64_t *)&v391) + 2) = data;
    uint64_t v18 = *(void **)(i + 56);
    v386[0] = v18;
    LODWORD(v379.__r_.__value_.__l.__data_) = 0;
    v376.__r_.__value_.__s.__data_[0] = 0;
    v373.__r_.__value_.__s.__data_[0] = 0;
    memset(&v391, 0, sizeof(v391));
    uint64_t v408 = 0;
    v407 = 0;
    v409 = 0;
    if (!LODWORD(__dst.__r_.__value_.__r.__words[1]))
    {
LABEL_86:
      if (v391.__r_.__value_.__r.__words[0]) {
        operator delete(v391.__r_.__value_.__l.__data_);
      }
      goto LABEL_88;
    }
    std::string::size_type v19 = __dst.__r_.__value_.__r.__words[0];
    std::string::size_type v20 = __dst.__r_.__value_.__r.__words[0] + 16 * LODWORD(__dst.__r_.__value_.__r.__words[1]);
    do
    {
      uint64_t v22 = *(void **)v19;
      uint64_t v21 = *(void **)(v19 + 8);
      if (v18 != *(void **)v19)
      {
        do
        {
          sub_1CC36FD24((uint64_t)&v345, v386, &v373, (uint64_t)&v391, (char **)&v407);
          uint64_t v23 = v386[0];
          if (!v386[0] || (*(unsigned char *)v386[0] & 4) == 0)
          {
            while ((*((_WORD *)v23 + 22) & 8) != 0)
              uint64_t v23 = (void *)v23[1];
          }
          v386[0] = *((void **)v23 + 1);
        }
        while (v386[0] != v22);
        uint64_t v18 = v22;
      }
      while (v18 != v21)
      {
        switch((*(unsigned int (**)(uint64_t, void **, void))(*(void *)v12 + 1184))(v12, v386, LODWORD(v382.__r_.__value_.__l.__data_)))
        {
          case 0u:
            sub_1CC36FEF8((uint64_t)&v345, v386, &v373, &v376, &v379, (uint64_t)&v391, (char **)&v407);
            break;
          case 1u:
            sub_1CC36FEF8((uint64_t)&v345, v386, &v373, &v376, &v379, (uint64_t)&v391, (char **)&v407);
            goto LABEL_37;
          case 2u:
LABEL_37:
            sub_1CC36FD24((uint64_t)&v345, v386, &v373, (uint64_t)&v391, (char **)&v407);
            break;
          case 3u:
            char v353 = 0;
            break;
          default:
            break;
        }
        uint64_t v24 = v386[0];
        if (!v386[0] || (*(unsigned char *)v386[0] & 4) == 0)
        {
          while ((*((_WORD *)v24 + 22) & 8) != 0)
            uint64_t v24 = (void *)v24[1];
        }
        uint64_t v18 = (void *)v24[1];
        v386[0] = v18;
      }
      v19 += 16;
      uint64_t v18 = v21;
    }
    while (v19 != v20);
    if (!v376.__r_.__value_.__s.__data_[0])
    {
      uint64_t v25 = (char *)v407;
      goto LABEL_84;
    }
    sub_1CC36FD24((uint64_t)&v345, v386, &v373, (uint64_t)&v391, (char **)&v407);
    uint64_t v25 = (char *)v407;
    if (v408 - (uint64_t)v407 >= 1)
    {
      uint64_t v26 = (v408 - (uint64_t)v407) >> 3;
      uint64_t v27 = *((void *)&v351 + 1);
      size_t v28 = (uint64_t *)v352;
      uint64_t v29 = v352 - *((void *)&v351 + 1);
      char v30 = (char *)(*((void *)&v351 + 1) + ((v352 - *((void *)&v351 + 1)) & 0xFFFFFFFFFFFFFFF8));
      if (v26 > (uint64_t)(*((void *)&v352 + 1) - v352) >> 3)
      {
        uint64_t v31 = v29 >> 3;
        unint64_t v32 = (v29 >> 3) + v26;
        if (v32 >> 61) {
LABEL_541:
        }
          abort();
        uint64_t v33 = *((void *)&v352 + 1) - *((void *)&v351 + 1);
        if ((uint64_t)(*((void *)&v352 + 1) - *((void *)&v351 + 1)) >> 2 > v32) {
          unint64_t v32 = v33 >> 2;
        }
        BOOL v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8;
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v34) {
          unint64_t v35 = v32;
        }
        __src = (uint64_t *)v407;
        unint64_t v330 = v35;
        if (v35)
        {
          uint64_t v322 = v29 >> 3;
          uint64_t v324 = v352 - *((void *)&v351 + 1);
          unint64_t v327 = *((void *)&v351 + 1) + ((v352 - *((void *)&v351 + 1)) & 0xFFFFFFFFFFFFFFF8);
          if (v35 >> 61) {
LABEL_542:
          }
            sub_1CB833614();
          long long v36 = (char *)operator new(8 * v35);
          uint64_t v29 = v324;
          char v30 = (char *)v327;
          uint64_t v31 = v322;
        }
        else
        {
          long long v36 = 0;
        }
        uint64_t v49 = &v36[8 * v31];
        uint64_t v50 = &v49[8 * v26];
        uint64_t v51 = 8 * v26;
        uint64_t v52 = v49;
        uint64_t v53 = __src;
        do
        {
          uint64_t v54 = *v53++;
          *(void *)uint64_t v52 = v54;
          v52 += 8;
          v51 -= 8;
        }
        while (v51);
        if ((unint64_t)v29 >= 8)
        {
          uint64_t v55 = 8 * v31;
          do
          {
            *(void *)&v36[v55 - 8] = *(void *)(v27 - 8 + v55);
            v55 -= 8;
          }
          while (v55);
          size_t v28 = (uint64_t *)v352;
          uint64_t v49 = v36;
        }
        uint64_t v56 = (char *)v28 - v30;
        if (v28 != (uint64_t *)v30)
        {
          size_t v57 = (char *)v28 - v30;
          size_t v58 = v50;
          size_t v59 = v49;
          memmove(v50, v30, v57);
          uint64_t v49 = v59;
          uint64_t v50 = v58;
        }
        unsigned int v60 = (void *)*((void *)&v351 + 1);
        *((void *)&v351 + 1) = v49;
        *(void *)&long long v352 = &v50[v56];
        *((void *)&v352 + 1) = &v36[8 * v330];
        uint64_t v25 = (char *)__src;
        if (v60) {
          operator delete(v60);
        }
        goto LABEL_83;
      }
      uint64_t v37 = v352 - (void)v30;
      uint64_t v38 = (uint64_t)(v352 - (void)v30) >> 3;
      if (v38 >= v26)
      {
        v43 = (char *)v407 + 8 * v26;
        uint64_t v42 = (char *)v352;
      }
      else
      {
        __srca = (char *)v407;
        unint64_t v39 = (char *)v407 + 8 * v38;
        unint64_t v40 = v408 - (void)v39;
        if (v408 != (void)v39)
        {
          unint64_t v328 = *((void *)&v351 + 1) + ((v352 - *((void *)&v351 + 1)) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v330 = v408 - (void)v39;
          memmove((void *)v352, (char *)v407 + 8 * v38, v408 - (void)v39);
          char v30 = (char *)v328;
          unint64_t v40 = v330;
        }
        uint64_t v41 = v39;
        uint64_t v42 = (char *)v28 + v40;
        *(void *)&long long v352 = v42;
        uint64_t v25 = __srca;
        if (v37 < 1) {
          goto LABEL_83;
        }
        v43 = v41;
      }
      uint64_t v44 = (uint64_t *)&v42[-8 * v26];
      v45 = v42;
      while (v44 < v28)
      {
        uint64_t v46 = *v44++;
        *(void *)v45 = v46;
        v45 += 8;
      }
      v47 = &v30[8 * v26];
      *(void *)&long long v352 = v45;
      if (v42 != v47)
      {
        uint64_t v48 = v30;
        memmove(&v42[-8 * ((v42 - v47) >> 3)], v30, v42 - v47);
        char v30 = v48;
      }
      if (v43 != v25) {
        memmove(v30, v25, v43 - v25);
      }
    }
LABEL_83:
    sub_1CBFFBF40((char **)&v350, *((char **)&v350 + 1), v391.__r_.__value_.__l.__data_, (char *)v391.__r_.__value_.__l.__size_, (uint64_t)(v391.__r_.__value_.__l.__size_ - v391.__r_.__value_.__r.__words[0]) >> 2);
LABEL_84:
    if (v25) {
      operator delete(v25);
    }
    goto LABEL_86;
  }
LABEL_92:
  llvm::SuffixTree::SuffixTree((uint64_t)&v391, &v350);
  v358 = 0;
  v359 = 0;
  uint64_t v360 = 0;
  sub_1CD48A6A8((uint64_t)&v407, v400);
  uint64_t v61 = 0;
  unint64_t v343 = 0;
  v386[0] = 0;
  *(_OWORD *)v387 = 0u;
  long long v388 = 0u;
  *(_OWORD *)v389 = 0u;
  int v390 = 2;
  if (v407)
  {
    uint64_t v61 = 0;
    unint64_t v343 = 0;
    __srcc = 0;
    while (1)
    {
      uint64_t v129 = (char *)v358;
      if (v359 != v358)
      {
        unsigned int v130 = v359 - 80;
        do
        {
          v131 = (char *)*((void *)v130 - 2);
          if (v130 != v131) {
            free(v131);
          }
          size_t v132 = (char *)*((void *)v130 - 12);
          if (v130 - 80 != v132) {
            free(v132);
          }
          v133 = v130 - 144;
          v130 -= 224;
        }
        while (v133 != v129);
      }
      v359 = v129;
      unsigned int v134 = v408;
      v135 = v409;
      v136 = (int *)v410;
      if (v409 != v410)
      {
        int v137 = v408 - 1;
        uint64_t v138 = v61;
        unint64_t v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v343 - v61) >> 4);
        do
        {
          uint64_t v140 = *v135;
          unsigned int v141 = v137 + v140;
          for (j = (char *)v358; j != v359; j += 224)
          {
            if (v141 >= *(_DWORD *)j && v140 <= *(_DWORD *)j + *((_DWORD *)j + 1) - 1) {
              goto LABEL_212;
            }
          }
          __dst.__r_.__value_.__r.__words[0] = *(void *)(*((void *)&v351 + 1) + 8 * v140);
          v382.__r_.__value_.__r.__words[0] = *(void *)(*((void *)&v351 + 1) + 8 * v141);
          v379.__r_.__value_.__r.__words[0] = *(void *)(__dst.__r_.__value_.__r.__words[0] + 24);
          v143 = sub_1CBAEE230((uint64_t)v348, (uint64_t *)&v379);
          sub_1CD53B300((uint64_t)&v358, *v135, v134, (uint64_t *)&__dst, (uint64_t *)&v382, (uint64_t)v379.__r_.__value_.__l.__data_, v139, *((_DWORD *)v143 + 2));
LABEL_212:
          ++v135;
        }
        while (v135 != v136);
        uint64_t v129 = v359;
        uint64_t v61 = v138;
      }
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v129 - (unsigned char *)v358) >> 5)) < 2) {
        goto LABEL_258;
      }
      v144 = (char **)v61;
      uint64_t v145 = *(void *)(*(void *)(*((void *)v358 + 3) + 32) + 16);
      uint64_t v146 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v145 + 104))(v145);
      (*(void (**)(void **__return_ptr))(v146 + 1168))(&v354);
      int v147 = (long long *)v354;
      v148 = v355;
      unint64_t v149 = 0x6DB6DB6DB6DB6DB7 * (((char *)v355 - (unsigned char *)v354) >> 5);
      if (v149 < 2) {
        goto LABEL_216;
      }
      if (v354 == v355)
      {
        int v150 = 0;
      }
      else
      {
        int v150 = 0;
        v151 = (long long *)v354;
        do
        {
          v150 += *((_DWORD *)v151 + 8);
          v151 += 14;
        }
        while (v151 != v355);
      }
      if (DWORD2(v356) * (int)v149 > (v150 + DWORD2(v356) + HIDWORD(v356)))
      {
        if (v343 >= (unint64_t)__srcc)
        {
          unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v343 - (void)v144) >> 4) + 1;
          if (v155 > 0x555555555555555) {
            goto LABEL_541;
          }
          if (0x5555555555555556 * ((__srcc - (char *)v144) >> 4) > v155) {
            unint64_t v155 = 0x5555555555555556 * ((__srcc - (char *)v144) >> 4);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((__srcc - (char *)v144) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
            unint64_t v156 = 0x555555555555555;
          }
          else {
            unint64_t v156 = v155;
          }
          if (v156)
          {
            if (v156 > 0x555555555555555) {
              goto LABEL_542;
            }
            v157 = (char *)operator new(48 * v156);
          }
          else
          {
            v157 = 0;
          }
          uint64_t v158 = &v157[16 * ((uint64_t)(v343 - (void)v144) >> 4)];
          *(void *)uint64_t v158 = 0;
          *((void *)v158 + 1) = 0;
          *((void *)v158 + 2) = 0;
          sub_1CC3707E0(v158, v147, v148, v149);
          *(_OWORD *)(v158 + 24) = v356;
          *((_DWORD *)v158 + 10) = v357;
          v159 = v144;
          v160 = (char **)v343;
          uint64_t v161 = v158;
          if ((char **)v343 != v144)
          {
            do
            {
              *((void *)v161 - 6) = 0;
              *((void *)v161 - 5) = 0;
              v161 -= 48;
              *((void *)v161 + 2) = 0;
              long long v162 = *((_OWORD *)v160 - 3);
              v160 -= 6;
              *(_OWORD *)uint64_t v161 = v162;
              *((void *)v161 + 2) = v160[2];
              const llvm::Function *v160 = 0;
              v160[1] = 0;
              v160[2] = 0;
              long long v163 = *(_OWORD *)(v160 + 3);
              *((_DWORD *)v161 + 10) = *((_DWORD *)v160 + 10);
              *(_OWORD *)(v161 + 24) = v163;
            }
            while (v160 != v144);
            size_t v164 = (char **)(v343 - 48);
            do
            {
              if (*v164)
              {
                sub_1CC37058C((uint64_t)v164, *v164);
                operator delete(*v164);
              }
              BOOL v121 = v164 == v159;
              v164 -= 6;
            }
            while (!v121);
          }
          __srcc = &v157[48 * v156];
          unint64_t v343 = (unint64_t)(v158 + 48);
          if (v159) {
            operator delete(v159);
          }
          uint64_t v61 = (uint64_t)v161;
          goto LABEL_248;
        }
        *(void *)unint64_t v343 = 0;
        *(void *)(v343 + 8) = 0;
        *(void *)(v343 + 16) = 0;
        sub_1CC3707E0((void *)v343, (long long *)v354, v355, 0x6DB6DB6DB6DB6DB7 * (((char *)v355 - (unsigned char *)v354) >> 5));
        long long v152 = v356;
        *(_DWORD *)(v343 + 40) = v357;
        *(_OWORD *)(v343 + 24) = v152;
        v343 += 48;
LABEL_216:
        uint64_t v61 = (uint64_t)v144;
        goto LABEL_248;
      }
      v153 = v358;
      v361[0] = *(uint64_t ****)(*((void *)v358 + 3) + 32);
      v361[1] = 0;
      uint64_t v154 = ****(void ****)v361[0];
      if (*(void *)(v154 + 128)
        || (*(unsigned int (**)(void))(**(void **)(v154 + 72) + 48))(*(void *)(v154 + 72)))
      {
        break;
      }
LABEL_227:
      uint64_t v61 = (uint64_t)v144;
LABEL_248:
      v165 = (long long *)v354;
      if (v354)
      {
        uint64_t v166 = v354;
        if (v355 != v354)
        {
          v167 = v355 - 5;
          do
          {
            v168 = (long long *)*((void *)v167 - 2);
            if (v167 != v168) {
              free(v168);
            }
            uint64_t v169 = (long long *)*((void *)v167 - 12);
            if (v167 - 5 != v169) {
              free(v169);
            }
            uint64_t v170 = v167 - 9;
            v167 -= 14;
          }
          while (v170 != v165);
          uint64_t v166 = v354;
        }
        v355 = v165;
        operator delete(v166);
      }
LABEL_258:
      sub_1CBFFB3F8(&v407);
      if (v407 == v386[0]) {
        goto LABEL_93;
      }
    }
    llvm::DiagnosticLocation::DiagnosticLocation(&v382, (const llvm::DebugLoc *)(v153[1] + 56));
    uint64_t v171 = v153[3];
    std::string::size_type v172 = **(void **)(v171 + 32);
    LODWORD(__dst.__r_.__value_.__r.__words[1]) = 16;
    __dst.__r_.__value_.__s.__data_[12] = 2;
    __dst.__r_.__value_.__r.__words[2] = v172;
    long long v413 = *(_OWORD *)&v382.__r_.__value_.__l.__data_;
    v414 = "machine-outliner";
    v415 = "NotOutliningCheaper";
    v416 = (void *)19;
    char v417 = 0;
    char v418 = 0;
    v419 = v421;
    uint64_t v420 = 0x400000000;
    char v422 = 0;
    int v423 = -1;
    v424 = (uint64_t ***)v171;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F260B560;
    v382.__r_.__value_.__r.__words[0] = (std::string::size_type)"Did not outline ";
    v382.__r_.__value_.__l.__size_ = 16;
    sub_1CC59ADEC((uint64_t *)&v419, (uint64_t)&v382);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v382, "Length", 6uLL, v134);
    uint64_t v173 = sub_1CD3D6290((uint64_t)&__dst, (long long *)&v382);
    v379.__r_.__value_.__r.__words[0] = (std::string::size_type)" instructions";
    v379.__r_.__value_.__l.__size_ = 13;
    sub_1CC59ADEC((uint64_t *)(v173 + 80), (uint64_t)&v379);
    v379.__r_.__value_.__r.__words[0] = (std::string::size_type)" from ";
    v379.__r_.__value_.__l.__size_ = 6;
    sub_1CC59ADEC((uint64_t *)(v173 + 80), (uint64_t)&v379);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v379, "NumOccurrences", 0xEuLL, 0x6DB6DB6DB6DB6DB7 * ((v359 - (unsigned char *)v358) >> 5));
    uint64_t v174 = sub_1CD3D6290(v173, (long long *)&v379);
    v376.__r_.__value_.__r.__words[0] = (std::string::size_type)" locations.";
    v376.__r_.__value_.__l.__size_ = 11;
    sub_1CC59ADEC((uint64_t *)(v174 + 80), (uint64_t)&v376);
    v376.__r_.__value_.__r.__words[0] = (std::string::size_type)" Bytes from outlining all occurrences (";
    v376.__r_.__value_.__l.__size_ = 39;
    sub_1CC59ADEC((uint64_t *)(v174 + 80), (uint64_t)&v376);
    int v175 = 0;
    int v176 = (long long *)v354;
    if (v354 != v355)
    {
      int v175 = 0;
      do
      {
        v175 += *((_DWORD *)v176 + 8);
        v176 += 14;
      }
      while (v176 != v355);
    }
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v376, "OutliningCost", 0xDuLL, DWORD2(v356) + v175 + HIDWORD(v356));
    uint64_t v177 = sub_1CD3D6290(v174, (long long *)&v376);
    v373.__r_.__value_.__r.__words[0] = (std::string::size_type)")";
    v373.__r_.__value_.__l.__size_ = 1;
    sub_1CC59ADEC((uint64_t *)(v177 + 80), (uint64_t)&v373);
    v373.__r_.__value_.__r.__words[0] = (std::string::size_type)" >= Unoutlined instruction bytes (";
    v373.__r_.__value_.__l.__size_ = 34;
    sub_1CC59ADEC((uint64_t *)(v177 + 80), (uint64_t)&v373);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v373, "NotOutliningCost", 0x10uLL, -1227133513 * ((unint64_t)((char *)v355 - (unsigned char *)v354) >> 5) * DWORD2(v356));
    uint64_t v178 = sub_1CD3D6290(v177, (long long *)&v373);
    v369[0] = ")";
    v369[1] = (void *)1;
    char v179 = (uint64_t *)(v178 + 80);
    sub_1CC59ADEC((uint64_t *)(v178 + 80), (uint64_t)v369);
    v369[0] = " (Also found at: ";
    v369[1] = (void *)17;
    sub_1CC59ADEC(v179, (uint64_t)v369);
    if (v375 < 0) {
      operator delete(v374);
    }
    if (SHIBYTE(v373.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v373.__r_.__value_.__l.__data_);
    }
    if (v378 < 0) {
      operator delete(v377);
    }
    if (SHIBYTE(v376.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v376.__r_.__value_.__l.__data_);
    }
    if (v381 < 0) {
      operator delete(v380);
    }
    if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v379.__r_.__value_.__l.__data_);
    }
    if (v384 < 0) {
      operator delete(v383);
    }
    if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v382.__r_.__value_.__l.__data_);
    }
    uint64_t v180 = 0x6DB6DB6DB6DB6DB7 * ((v359 - (unsigned char *)v358) >> 5);
    if ((v180 & 0xFFFFFFFE) == 0)
    {
LABEL_314:
      v363 = ")";
      uint64_t v364 = 1;
      sub_1CC59ADEC((uint64_t *)&v419, (uint64_t)&v363);
      llvm::MachineOptimizationRemarkEmitter::emit(v361, (llvm::DiagnosticInfoOptimizationBase *)&__dst);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2616800;
      v192 = (char *)v419;
      if (v420)
      {
        unint64_t v193 = (unint64_t)v420 << 6;
        do
        {
          uint64_t v194 = (void **)&v192[v193];
          if (v192[v193 - 17] < 0) {
            operator delete(*(v194 - 5));
          }
          if (*((char *)v194 - 41) < 0) {
            operator delete(*(v194 - 8));
          }
          v193 -= 64;
        }
        while (v193);
        v192 = (char *)v419;
      }
      if (v192 != v421) {
        free(v192);
      }
      goto LABEL_227;
    }
    uint64_t v181 = (v180 - 1);
    uint64_t v182 = -1227133513 * ((v359 - (unsigned char *)v358) >> 5);
    uint64_t v183 = 232;
    uint64_t v184 = 1;
    while (1)
    {
      v363 = "OtherStartLoc";
      unint64_t v330 = v330 & 0xFFFFFFFF00000000 | v184;
      unint64_t v365 = v330;
      __int16 v366 = 2051;
      llvm::Twine::str((llvm::Twine *)&v363, v367);
      if (v368 >= 0) {
        v185 = v367;
      }
      else {
        v185 = (void **)v367[0];
      }
      if (v368 >= 0) {
        std::string::size_type v186 = v368 & 0x7F;
      }
      else {
        std::string::size_type v186 = (std::string::size_type)v367[1];
      }
      v187 = *(unsigned __int8 **)(*(void *)((char *)v358 + v183) + 56);
      v362 = v187;
      if (v187) {
        llvm::MetadataTracking::track((uint64_t)&v362, v187, 2);
      }
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v369, (const std::string::value_type *)v185, v186, (const llvm::DebugLoc *)&v362);
      sub_1CD3D6290((uint64_t)&__dst, (long long *)v369);
      if (v372 < 0) {
        operator delete(v371);
      }
      if (v370 < 0) {
        operator delete(v369[0]);
      }
      if (!v362) {
        goto LABEL_297;
      }
      int v188 = *v362;
      if ((v188 - 4) > 0x1E)
      {
        if ((v188 - 3) >= 0xFFFFFFFE) {
          v189 = v362;
        }
        else {
          v189 = 0;
        }
        if ((v188 - 3) < 0xFFFFFFFE)
        {
          if (v188 == 3) {
            *((void *)v362 + 1) = 0;
          }
          goto LABEL_297;
        }
        unint64_t v190 = (unint64_t)(v189 + 8);
      }
      else
      {
        if ((v362[1] & 0x7F) != 2 && !*((_DWORD *)v362 + 3)) {
          goto LABEL_297;
        }
        uint64_t v191 = *((void *)v362 + 2);
        if ((v191 & 4) == 0) {
          goto LABEL_297;
        }
        unint64_t v190 = v191 & 0xFFFFFFFFFFFFFFF8;
        if (!v190) {
          goto LABEL_297;
        }
      }
      v385 = &v362;
      sub_1CC5FA668(v190 + 16, &v385);
LABEL_297:
      if (v368 < 0) {
        operator delete(v367[0]);
      }
      if (v181 != v184)
      {
        v363 = ", ";
        uint64_t v364 = 2;
        sub_1CC59ADEC((uint64_t *)&v419, (uint64_t)&v363);
      }
      ++v184;
      v183 += 224;
      if (v182 == v184) {
        goto LABEL_314;
      }
    }
  }
LABEL_93:
  sub_1CD48AFB0(v386);
  sub_1CD48AFB0(&v407);
  v62 = (char *)v358;
  if (v358)
  {
    size_t v63 = v358;
    if (v359 != v358)
    {
      size_t v64 = v359 - 80;
      do
      {
        uint64_t v65 = (char *)*((void *)v64 - 2);
        if (v64 != v65) {
          free(v65);
        }
        uint64_t v66 = (char *)*((void *)v64 - 12);
        if (v64 - 80 != v66) {
          free(v66);
        }
        v67 = v64 - 144;
        v64 -= 224;
      }
      while (v67 != v62);
      size_t v63 = v358;
    }
    v359 = v62;
    operator delete(v63);
  }
  uint64_t v329 = v61;
  if (v402)
  {
    uint64_t v68 = (uint64_t *)v401;
    uint64_t v69 = 8 * v402;
    do
    {
      uint64_t v70 = *v68++;
      MEMORY[0x1D25D9CD0](v70, 8);
      v69 -= 8;
    }
    while (v69);
  }
  int v71 = (uint64_t *)v404;
  if (v405)
  {
    uint64_t v312 = 16 * v405;
    do
    {
      uint64_t v313 = *v71;
      v71 += 2;
      MEMORY[0x1D25D9CD0](v313, 8);
      v312 -= 16;
    }
    while (v312);
    int v71 = (uint64_t *)v404;
  }
  if (v71 != &v406) {
    free(v71);
  }
  if (v401 != &v403) {
    free(v401);
  }
  sub_1CD48AFF4((uint64_t)&v391.__r_.__value_.__r.__words[2]);
  if (v394)
  {
    size_t v72 = (uint64_t *)v393;
    uint64_t v73 = 8 * v394;
    do
    {
      uint64_t v74 = *v72++;
      MEMORY[0x1D25D9CD0](v74, 8);
      v73 -= 8;
    }
    while (v73);
  }
  v75 = (uint64_t *)v397;
  if (v398)
  {
    uint64_t v314 = 16 * v398;
    do
    {
      uint64_t v315 = *v75;
      v75 += 2;
      MEMORY[0x1D25D9CD0](v315, 8);
      v314 -= 16;
    }
    while (v314);
    v75 = (uint64_t *)v397;
  }
  if (v75 != (uint64_t *)&v399) {
    free(v75);
  }
  if (v393 != &v396) {
    free(v393);
  }
  int v76 = (*(uint64_t (**)(void, const char *, uint64_t))(**(void **)(*(void *)*a2 + 72) + 24))(*(void *)(*(void *)*a2 + 72), "size-info", 9);
  *(_OWORD *)&v376.__r_.__value_.__l.__data_ = 0uLL;
  v376.__r_.__value_.__r.__words[2] = 0x1000000000;
  int v317 = v76;
  if (v76)
  {
    for (k = (void *)a2[4]; ; k = (void *)k[1])
    {
      if (k == v344) {
        goto LABEL_191;
      }
      uint64_t v79 = k ? (const Function *)(k - 7) : 0;
      uint64_t v80 = llvm::MachineModuleInfo::getMachineFunction(v340, v79);
      if (v80) {
        break;
      }
LABEL_189:
      ;
    }
    uint64_t v81 = *(void *)(v80 + 328);
    if (v81 == v80 + 320)
    {
      int v82 = 0;
    }
    else
    {
      int v82 = 0;
      do
      {
        --v82;
        uint64_t v83 = v81 + 48;
        do
        {
          uint64_t v83 = *(void *)(v83 + 8);
          ++v82;
        }
        while (v83 != v81 + 48);
        uint64_t v81 = *(void *)(v81 + 8);
      }
      while (v81 != v80 + 320);
    }
    if ((*((unsigned char *)v79 + 23) & 0x10) == 0)
    {
      std::string::size_type v93 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_149;
    }
    uint64_t v84 = ***(void ***)v79;
    uint64_t v85 = *(void *)(v84 + 152);
    uint64_t v86 = *(unsigned int *)(v84 + 168);
    if (v86)
    {
      LODWORD(v87) = (v86 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      int v88 = (const Function **)(v85 + 16 * v87);
      v89 = *v88;
      if (*v88 == v79)
      {
LABEL_141:
        unint64_t v92 = (unint64_t *)v88[1];
        unint64_t v95 = *v92;
        uint64_t v94 = v92 + 2;
        std::string::size_type v93 = v95;
        if (v95 > 0x7FFFFFFFFFFFFFF7) {
          goto LABEL_541;
        }
        if (v93 >= 0x17)
        {
          uint64_t v97 = (v93 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v93 | 7) != 0x17) {
            uint64_t v97 = v93 | 7;
          }
          uint64_t v98 = v97 + 1;
          p_dst = (std::string *)operator new(v97 + 1);
          __dst.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          __dst.__r_.__value_.__l.__size_ = v93;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v93;
          p_dst = &__dst;
          if (!v93) {
            goto LABEL_149;
          }
        }
        memmove(p_dst, v94, v93);
LABEL_149:
        p_dst->__r_.__value_.__s.__data_[v93] = 0;
        v99 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v99 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        __srcb = v99;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = __dst.__r_.__value_.__l.__size_;
        }
        unsigned int v101 = v376.__r_.__value_.__r.__words[1];
        if (!LODWORD(v376.__r_.__value_.__r.__words[1]))
        {
          v376.__r_.__value_.__l.__size_ = 0;
          LODWORD(v376.__r_.__value_.__r.__words[2]) = 0;
          uint64_t v120 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
          if (!v120) {
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          }
          v120[16] = 2;
          v376.__r_.__value_.__r.__words[0] = (std::string::size_type)v120;
          unsigned int v101 = 16;
          LODWORD(v376.__r_.__value_.__r.__words[1]) = 16;
        }
        *(void *)v331 = k;
        int v102 = 0;
        if (size)
        {
          size_t v103 = size;
          v104 = __srcb;
          do
          {
            int v105 = v104->__r_.__value_.__s.__data_[0];
            v104 = (std::string *)((char *)v104 + 1);
            int v102 = 33 * v102 + v105;
            --v103;
          }
          while (v103);
        }
        unsigned int v106 = v101 - 1;
        std::string::size_type v107 = v376.__r_.__value_.__r.__words[0];
        std::string::size_type v108 = v376.__r_.__value_.__r.__words[0] + 8 * v101 + 8;
        *(void *)v333 = HIDWORD(v376.__r_.__value_.__r.__words[2]);
        int v109 = -1;
        int v110 = 1;
        int v111 = v102;
        while (1)
        {
          uint64_t v112 = v111 & v106;
          uint64_t v113 = *(void *)(v107 + 8 * v112);
          if (!v113) {
            break;
          }
          if (v113 == -8)
          {
            if (v109 == -1) {
              int v109 = v111 & v106;
            }
          }
          else if (*(_DWORD *)(v108 + 4 * v112) == v102 {
                 && size == *(void *)v113
          }
                 && (!size || !memcmp(__srcb, (const void *)(v113 + *(void *)v333), size)))
          {
            goto LABEL_173;
          }
          int v111 = v110 + v112;
          ++v110;
        }
        uint64_t v114 = v109;
        if (v109 == -1)
        {
          uint64_t v114 = v112;
          uint64_t v112 = v112;
        }
        else
        {
          uint64_t v112 = v109;
        }
        *(_DWORD *)(v108 + 4 * v114) = v102;
        uint64_t v113 = *(void *)(v107 + 8 * v112);
LABEL_173:
        if (v113)
        {
          if (v113 != -8)
          {
            k = *(void **)v331;
LABEL_187:
            *(_DWORD *)(v113 + 8) = v82;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            goto LABEL_189;
          }
          --LODWORD(v376.__r_.__value_.__r.__words[2]);
        }
        uint64_t v115 = (char *)operator new(size + 17, (std::align_val_t)8uLL);
        unint64_t v116 = v115;
        uint64_t v117 = v115 + 16;
        k = *(void **)v331;
        if (size) {
          memcpy(v115 + 16, __srcb, size);
        }
        v117[size] = 0;
        *(void *)unint64_t v116 = size;
        *((_DWORD *)v116 + 2) = 0;
        *(void *)(v107 + 8 * v112) = v116;
        ++HIDWORD(v376.__r_.__value_.__r.__words[1]);
        unsigned int v118 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v376, v112);
        for (m = (uint64_t *)(v376.__r_.__value_.__r.__words[0] + 8 * v118); ; ++m)
        {
          uint64_t v113 = *m;
          BOOL v121 = !*m || v113 == -8;
          if (!v121) {
            break;
          }
        }
        goto LABEL_187;
      }
      int v90 = 1;
      while (v89 != (const Function *)-4096)
      {
        int v91 = v87 + v90++;
        uint64_t v87 = v91 & (v86 - 1);
        v89 = *(const Function **)(v85 + 16 * v87);
        if (v89 == v79)
        {
          int v88 = (const Function **)(v85 + 16 * v87);
          goto LABEL_141;
        }
      }
    }
    int v88 = (const Function **)(v85 + 16 * v86);
    goto LABEL_141;
  }
LABEL_191:
  unint64_t v122 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v343 - v329) >> 4);
  if ((uint64_t)(v343 - v329) < 1)
  {
LABEL_195:
    uint64_t v127 = (char **)v329;
    v128 = (char **)v343;
    sub_1CC370994(v329, (uint64_t *)v343, v122, 0, 0, v77);
  }
  else
  {
    uint64_t v123 = (const std::nothrow_t *)MEMORY[0x1E4FBA2D0];
    unint64_t v124 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v343 - v329) >> 4);
    while (1)
    {
      v125 = operator new(48 * v124, v123);
      if (v125) {
        break;
      }
      BOOL v126 = v124 > 1;
      v124 >>= 1;
      if (!v126) {
        goto LABEL_195;
      }
    }
    v195 = v125;
    uint64_t v127 = (char **)v329;
    v128 = (char **)v343;
    sub_1CC370994(v329, (uint64_t *)v343, v122, (uint64_t)v125, v124, v77);
    operator delete(v195);
  }
  if (v127 == v128)
  {
    sub_1CC3724DC((uint64_t)&v376);
    LOBYTE(v196) = 0;
    if (v127) {
      goto LABEL_529;
    }
    goto LABEL_530;
  }
  int v196 = 0;
  unint64_t v197 = (unsigned int **)v127;
  do
  {
    v198 = v197;
    int v199 = *v197;
    v325 = v198;
    uint64_t v200 = (uint64_t)v198[1];
    if (v199 == (unsigned int *)v200)
    {
      uint64_t v200 = (uint64_t)v199;
    }
    else
    {
      while (1)
      {
        uint64_t v201 = *v199;
        uint64_t v202 = (_DWORD *)(v350 + 4 * v201);
        uint64_t v203 = v201 + v199[1] - 1;
        if (v202 != (_DWORD *)(v350 + 4 + 4 * v203)) {
          break;
        }
LABEL_332:
        v199 += 56;
        if (v199 == (unsigned int *)v200)
        {
          uint64_t v205 = (uint64_t)v198[1];
          goto LABEL_336;
        }
      }
      uint64_t v204 = 4 * v203 - 4 * v201 + 4;
      while (*v202 != -1)
      {
        ++v202;
        v204 -= 4;
        if (!v204) {
          goto LABEL_332;
        }
      }
      size_t v206 = v199 + 56;
      if (v199 + 56 != (unsigned int *)v200)
      {
        int v318 = v196;
        uint64_t v205 = (uint64_t)v199;
        do
        {
          uint64_t v208 = v206;
          uint64_t v209 = v199[56];
          v210 = (_DWORD *)(v350 + 4 * v209);
          uint64_t v211 = v209 + v199[57] - 1;
          if (v210 == (_DWORD *)(v350 + 4 * v211 + 4))
          {
LABEL_342:
            long long v213 = *(_OWORD *)v208;
            long long v214 = *((_OWORD *)v208 + 1);
            *(_DWORD *)(v205 + 32) = v208[8];
            *(_OWORD *)uint64_t v205 = v213;
            *(_OWORD *)(v205 + 16) = v214;
            *(void *)(v205 + 40) = *((void *)v199 + 33);
            if ((unsigned int *)v205 != v199 + 56)
            {
              v215 = (unsigned int **)(v199 + 68);
              v216 = (unsigned int *)*((void *)v199 + 34);
              if (v216 == v199 + 72)
              {
                int v217 = (void **)(v205 + 48);
                v218 = v199 + 70;
                uint64_t v219 = v199[70];
                uint64_t v220 = *(unsigned int *)(v205 + 56);
                if (v220 < v219)
                {
                  if (*(_DWORD *)(v205 + 60) < v219)
                  {
                    *(_DWORD *)(v205 + 56) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v220) {
                    memmove(*v217, v216, 8 * v220);
                  }
                  else {
                    uint64_t v220 = 0;
                  }
                  uint64_t v228 = *v218;
                  if (v220 != v228) {
                    memcpy((char *)*v217 + 8 * v220, &(*v215)[2 * v220], (char *)&(*v215)[2 * v228] - (char *)&(*v215)[2 * v220]);
                  }
                }
                else if (v219)
                {
                  memmove(*v217, v216, 8 * v219);
                }
                *(_DWORD *)(v205 + 56) = v219;
              }
              else
              {
                v230 = *(void **)(v205 + 48);
                if (v230 != (void *)(v205 + 64))
                {
                  free(v230);
                  v216 = *v215;
                }
                *(void *)(v205 + 48) = v216;
                v218 = v199 + 70;
                *(void *)(v205 + 56) = *((void *)v199 + 35);
                *((void *)v199 + 34) = v199 + 72;
                v199[71] = 0;
              }
              _DWORD *v218 = 0;
            }
            *(_DWORD *)(v205 + 112) = v199[84];
            *(void *)(v205 + 120) = *((void *)v199 + 43);
            if ((unsigned int *)v205 != v199 + 56)
            {
              uint64_t v221 = (unsigned int **)(v199 + 88);
              uint64_t v222 = (unsigned int *)*((void *)v199 + 44);
              if (v222 == v199 + 92)
              {
                v223 = (void **)(v205 + 128);
                uint64_t v224 = v199 + 90;
                uint64_t v225 = v199[90];
                uint64_t v226 = *(unsigned int *)(v205 + 136);
                if (v226 < v225)
                {
                  if (*(_DWORD *)(v205 + 140) < v225)
                  {
                    *(_DWORD *)(v205 + 136) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v226) {
                    memmove(*v223, v222, 8 * v226);
                  }
                  else {
                    uint64_t v226 = 0;
                  }
                  uint64_t v229 = *v224;
                  if (v226 != v229) {
                    memcpy((char *)*v223 + 8 * v226, &(*v221)[2 * v226], (char *)&(*v221)[2 * v229] - (char *)&(*v221)[2 * v226]);
                  }
                }
                else if (v225)
                {
                  memmove(*v223, v222, 8 * v225);
                }
                *(_DWORD *)(v205 + 136) = v225;
              }
              else
              {
                unsigned int v231 = *(void **)(v205 + 128);
                if (v231 != (void *)(v205 + 144))
                {
                  free(v231);
                  uint64_t v222 = *v221;
                }
                *(void *)(v205 + 128) = v222;
                uint64_t v224 = v199 + 90;
                *(void *)(v205 + 136) = *((void *)v199 + 45);
                *((void *)v199 + 44) = v199 + 92;
                v199[91] = 0;
              }
              *uint64_t v224 = 0;
            }
            *(_DWORD *)(v205 + 192) = v199[104];
            long long v227 = *(_OWORD *)(v199 + 106);
            *(_DWORD *)(v205 + 216) = v199[110];
            *(_OWORD *)(v205 + 200) = v227;
            v205 += 224;
          }
          else
          {
            uint64_t v212 = 4 * v211 - 4 * v209 + 4;
            while (*v210 != -1)
            {
              ++v210;
              v212 -= 4;
              if (!v212) {
                goto LABEL_342;
              }
            }
          }
          size_t v206 = v208 + 56;
          int v199 = v208;
        }
        while (v208 + 56 != (unsigned int *)v200);
        uint64_t v207 = (uint64_t)v325;
        uint64_t v200 = (uint64_t)v325[1];
        int v196 = v318;
        goto LABEL_379;
      }
    }
    uint64_t v205 = (uint64_t)v199;
LABEL_336:
    uint64_t v207 = (uint64_t)v325;
LABEL_379:
    sub_1CD53B538(v207, v205, v200);
    uint64_t v232 = *(void *)(v207 + 8);
    if (*(void *)v207 == v232)
    {
      int v233 = 0;
      uint64_t v127 = (char **)v329;
    }
    else
    {
      int v233 = 0;
      uint64_t v234 = *(void *)v207;
      uint64_t v127 = (char **)v329;
      do
      {
        v233 += *(_DWORD *)(v234 + 32);
        v234 += 224;
      }
      while (v234 != v232);
    }
    if (-1227133513 * ((unint64_t)(v232 - *(void *)v207) >> 5) * *(_DWORD *)(v207 + 32) > v233 + *(_DWORD *)(v207 + 32) + *(_DWORD *)(v207 + 36))
    {
      unsigned int v235 = *a3;
      *((unsigned char *)&v382.__r_.__value_.__s + 23) = 18;
      strcpy((char *)&v382, "OUTLINED_FUNCTION_");
      int v236 = *(_DWORD *)(a1 + 32);
      if (v236)
      {
        std::to_string(&v391, v236 + 1);
        uint64_t v237 = std::string::append(&v391, "_");
        std::string::size_type v238 = v237->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v237->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v238;
        v237->__r_.__value_.__l.__size_ = 0;
        v237->__r_.__value_.__r.__words[2] = 0;
        v237->__r_.__value_.__r.__words[0] = 0;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v239 = &__dst;
        }
        else {
          v239 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v240 = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          std::string::size_type v240 = __dst.__r_.__value_.__l.__size_;
        }
        std::string::append(&v382, (const std::string::value_type *)v239, v240);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v391.__r_.__value_.__l.__data_);
        }
      }
      std::to_string(&__dst, v235);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v241 = &__dst;
      }
      else {
        uint64_t v241 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v242 = *((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      }
      else {
        std::string::size_type v242 = __dst.__r_.__value_.__l.__size_;
      }
      std::string::append(&v382, (const std::string::value_type *)v241, v242);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      unint64_t v243 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(void *)*a2 + 1576), 0, 0, 0);
      WORD4(v413) = 260;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v382;
      v244 = llvm::Function::Create(v243, 0, (const char **)&__dst.__r_.__value_.__l.__data_, (unint64_t)a2);
      *((_DWORD *)v244 + 8) = v244[4] & 0xFFFFBF00 | 0x4087;
      v244[14] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v244 + 14, *(uint64_t **)*v244, -1, 42);
      v244[14] = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v244 + 14, *(uint64_t **)*v244, -1, 15);
      uint64_t v245 = *(void *)(*(void *)(*((void *)*v325 + 3) + 32) + 16);
      uint64_t v319 = (*(uint64_t (**)(uint64_t))(*(void *)v245 + 104))(v245);
      (*(void (**)(void))(*(void *)v319 + 1176))();
      uint64_t v246 = *v325;
      uint64_t v247 = v325[1];
      if (*v325 != v247)
      {
        LODWORD(v248) = 0;
        do
        {
          int UWTableKind = llvm::AttributeList::getUWTableKind((llvm::AttributeList *)(**(void **)(*((void *)v246 + 3)
                                                                                                + 32)
                                                                                  + 112));
          if (UWTableKind <= (int)v248) {
            uint64_t v248 = v248;
          }
          else {
            uint64_t v248 = UWTableKind;
          }
          v246 += 56;
        }
        while (v246 != v247);
        if (v248)
        {
          unint64_t v250 = llvm::Attribute::get(*(uint64_t **)*v244, 0x4Fu, v248);
          v244[14] = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v244 + 14), *(llvm::LLVMContext **)*v244, -1, v250);
        }
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"entry";
      WORD4(v413) = 259;
      operator new();
    }
    unint64_t v197 = (unsigned int **)(v207 + 48);
  }
  while (v197 != (unsigned int **)v343);
  if ((v317 & v196) != 1) {
    goto LABEL_523;
  }
  uint64_t v251 = (void *)a2[4];
  if (v251 == v344) {
    goto LABEL_522;
  }
  do
  {
    if (v251) {
      uint64_t v252 = (const Function *)(v251 - 7);
    }
    else {
      uint64_t v252 = 0;
    }
    uint64_t v253 = llvm::MachineModuleInfo::getMachineFunction(v340, v252);
    if (!v253) {
      goto LABEL_472;
    }
    uint64_t v254 = (uint64_t ****)v253;
    *(void *)v332 = v252;
    unsigned int v321 = v252 >> 4;
    if ((*((unsigned char *)v252 + 23) & 0x10) == 0)
    {
      std::string::size_type v264 = 0;
      *((unsigned char *)&v373.__r_.__value_.__s + 23) = 0;
      uint64_t v267 = &v373;
      goto LABEL_438;
    }
    uint64_t v255 = ***(void ***)v252;
    uint64_t v256 = *(void *)(v255 + 152);
    uint64_t v257 = *(unsigned int *)(v255 + 168);
    if (!v257) {
      goto LABEL_429;
    }
    LODWORD(v258) = (v257 - 1) & ((v252 >> 4) ^ (v252 >> 9));
    v259 = (const Function **)(v256 + 16 * v258);
    uint64_t v260 = *v259;
    if (*v259 != v252)
    {
      int v261 = 1;
      while (v260 != (const Function *)-4096)
      {
        int v262 = v258 + v261++;
        uint64_t v258 = v262 & (v257 - 1);
        uint64_t v260 = *(const Function **)(v256 + 16 * v258);
        if (v260 == v252)
        {
          v259 = (const Function **)(v256 + 16 * v258);
          goto LABEL_430;
        }
      }
LABEL_429:
      v259 = (const Function **)(v256 + 16 * v257);
    }
LABEL_430:
    uint64_t v263 = (unint64_t *)v259[1];
    unint64_t v266 = *v263;
    uint64_t v265 = v263 + 2;
    std::string::size_type v264 = v266;
    if (v266 > 0x7FFFFFFFFFFFFFF7) {
      goto LABEL_541;
    }
    if (v264 >= 0x17)
    {
      uint64_t v268 = (v264 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v264 | 7) != 0x17) {
        uint64_t v268 = v264 | 7;
      }
      uint64_t v269 = v268 + 1;
      uint64_t v267 = (std::string *)operator new(v268 + 1);
      v373.__r_.__value_.__r.__words[2] = v269 | 0x8000000000000000;
      v373.__r_.__value_.__r.__words[0] = (std::string::size_type)v267;
      v373.__r_.__value_.__l.__size_ = v264;
    }
    else
    {
      *((unsigned char *)&v373.__r_.__value_.__s + 23) = v264;
      uint64_t v267 = &v373;
      if (!v264) {
        goto LABEL_438;
      }
    }
    memmove(v267, v265, v264);
LABEL_438:
    v267->__r_.__value_.__s.__data_[v264] = 0;
    if (v254[41] == (uint64_t ***)(v254 + 40))
    {
      unsigned int v270 = 0;
    }
    else
    {
      unsigned int v270 = 0;
      uint64_t v271 = (uint64_t ****)v254[41];
      do
      {
        --v270;
        v272 = v271 + 6;
        do
        {
          v272 = (uint64_t ****)v272[1];
          ++v270;
        }
        while (v272 != v271 + 6);
        uint64_t v271 = (uint64_t ****)v271[1];
      }
      while (v271 != v254 + 40);
    }
    char v273 = HIBYTE(v373.__r_.__value_.__r.__words[2]);
    if ((v373.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v274 = &v373;
    }
    else {
      v274 = (std::string *)v373.__r_.__value_.__r.__words[0];
    }
    if ((v373.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v275 = *((unsigned char *)&v373.__r_.__value_.__s + 23) & 0x7F;
    }
    else {
      size_t v275 = v373.__r_.__value_.__l.__size_;
    }
    v326 = v254[41];
    if (!LODWORD(v376.__r_.__value_.__r.__words[1]))
    {
      unsigned int v288 = 0;
      goto LABEL_465;
    }
    v342 = v251;
    __srcd = v254;
    char v334 = HIBYTE(v373.__r_.__value_.__r.__words[2]);
    int v276 = 0;
    if (v275)
    {
      size_t v277 = v275;
      v278 = v274;
      do
      {
        int v279 = v278->__r_.__value_.__s.__data_[0];
        v278 = (std::string *)((char *)v278 + 1);
        int v276 = 33 * v276 + v279;
        --v277;
      }
      while (v277);
    }
    int v280 = LODWORD(v376.__r_.__value_.__r.__words[1]) - 1;
    std::string::size_type v281 = v376.__r_.__value_.__r.__words[0];
    uint64_t v323 = LODWORD(v376.__r_.__value_.__r.__words[1]);
    std::string::size_type v282 = v376.__r_.__value_.__r.__words[0] + 8 * LODWORD(v376.__r_.__value_.__r.__words[1]) + 8;
    uint64_t v283 = HIDWORD(v376.__r_.__value_.__r.__words[2]);
    int v284 = 1;
    int v285 = v276;
    while (1)
    {
      uint64_t v286 = v285 & v280;
      v287 = *(void **)(v281 + 8 * v286);
      if (v287 != (void *)-8)
      {
        if (!v287)
        {
          unsigned int v288 = 0;
          uint64_t v251 = v342;
          uint64_t v254 = __srcd;
LABEL_464:
          char v273 = v334;
          goto LABEL_465;
        }
        if (*(_DWORD *)(v282 + 4 * v286) == v276
          && v275 == *v287
          && (!v275 || !memcmp(v274, (char *)v287 + v283, v275)))
        {
          break;
        }
      }
      int v285 = v284 + v286;
      ++v284;
    }
    unsigned int v288 = 0;
    uint64_t v251 = v342;
    uint64_t v254 = __srcd;
    if (v286 == -1) {
      goto LABEL_464;
    }
    char v273 = v334;
    if ((int)v286 != v323) {
      unsigned int v288 = *(_DWORD *)(*(void *)(v281 + 8 * (int)v286) + 8);
    }
LABEL_465:
    if (v270 != v288)
    {
      v369[0] = v254;
      v369[1] = 0;
      uint64_t v289 = ****v254;
      if (!*(void *)(v289 + 128))
      {
        if (!(*(unsigned int (**)(void))(**(void **)(v289 + 72) + 48))(*(void *)(v289 + 72))) {
          goto LABEL_468;
        }
        v326 = v254[41];
      }
      std::string::size_type v290 = (std::string::size_type)*v326[4];
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 17;
      __dst.__r_.__value_.__s.__data_[12] = 2;
      __dst.__r_.__value_.__r.__words[2] = v290;
      long long v413 = 0uLL;
      v414 = "size-info";
      v415 = "FunctionMISizeChange";
      v416 = (void *)20;
      char v417 = 0;
      char v418 = 0;
      v419 = v421;
      uint64_t v420 = 0x400000000;
      char v422 = 0;
      int v423 = -1;
      v424 = v326;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F260E0D8;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v391, "Pass", 4uLL, "Machine Outliner", 0x10uLL);
      uint64_t v291 = sub_1CC34D4D8((uint64_t)&__dst, (uint64_t)&v391);
      v407 = ": Function: ";
      uint64_t v408 = 12;
      sub_1CC59ADEC((uint64_t *)(v291 + 80), (uint64_t)&v407);
      if ((*(unsigned char *)(*(void *)v332 + 23) & 0x10) != 0)
      {
        uint64_t v292 = ****(void ****)v332;
        uint64_t v293 = *(void *)(v292 + 152);
        uint64_t v294 = *(unsigned int *)(v292 + 168);
        if (!v294) {
          goto LABEL_486;
        }
        LODWORD(v295) = (v294 - 1) & (v321 ^ (v332[0] >> 9));
        v296 = (uint64_t *)(v293 + 16 * v295);
        uint64_t v297 = *v296;
        if (*v296 != *(void *)v332)
        {
          int v298 = 1;
          while (v297 != -4096)
          {
            int v299 = v295 + v298++;
            uint64_t v295 = v299 & (v294 - 1);
            uint64_t v297 = *(void *)(v293 + 16 * v295);
            if (v297 == *(void *)v332)
            {
              v296 = (uint64_t *)(v293 + 16 * v295);
              goto LABEL_487;
            }
          }
LABEL_486:
          v296 = (uint64_t *)(v293 + 16 * v294);
        }
LABEL_487:
        v300 = (void *)v296[1];
        size_t v303 = *v300;
        v301 = (char *)(v300 + 2);
        size_t v302 = v303;
      }
      else
      {
        size_t v302 = 0;
        v301 = &byte_1CFBCE98E;
      }
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v407, "Function", 8uLL, v301, v302);
      uint64_t v304 = sub_1CC34D4D8(v291, (uint64_t)&v407);
      v386[0] = ": MI instruction count changed from ";
      v386[1] = (void *)36;
      sub_1CC59ADEC((uint64_t *)(v304 + 80), (uint64_t)v386);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((std::string *)v386, "MIInstrsBefore", 0xEuLL, v288);
      uint64_t v305 = sub_1CC34D4D8(v304, (uint64_t)v386);
      v382.__r_.__value_.__r.__words[0] = (std::string::size_type)" to ";
      v382.__r_.__value_.__l.__size_ = 4;
      sub_1CC59ADEC((uint64_t *)(v305 + 80), (uint64_t)&v382);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v382, "MIInstrsAfter", 0xDuLL, v270);
      uint64_t v306 = sub_1CC34D4D8(v305, (uint64_t)&v382);
      v379.__r_.__value_.__r.__words[0] = (std::string::size_type)"; Delta: ";
      v379.__r_.__value_.__l.__size_ = 9;
      sub_1CC59ADEC((uint64_t *)(v306 + 80), (uint64_t)&v379);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v379, "Delta", 5uLL, v270 - (unint64_t)v288);
      sub_1CC34D4D8(v306, (uint64_t)&v379);
      if (v381 < 0) {
        operator delete(v380);
      }
      if (SHIBYTE(v379.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v379.__r_.__value_.__l.__data_);
      }
      if (v384 < 0) {
        operator delete(v383);
      }
      if (SHIBYTE(v382.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v382.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v388) < 0) {
        operator delete(v387[1]);
      }
      if (SHIBYTE(v387[0]) < 0) {
        operator delete(v386[0]);
      }
      if (SHIBYTE(v411) < 0) {
        operator delete(v410);
      }
      if (SHIBYTE(v409) < 0) {
        operator delete(v407);
      }
      if (v395 < 0) {
        operator delete(v392);
      }
      if (SHIBYTE(v391.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v391.__r_.__value_.__l.__data_);
      }
      llvm::MachineOptimizationRemarkEmitter::emit((uint64_t ****)v369, (llvm::DiagnosticInfoOptimizationBase *)&__dst);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F2616800;
      v307 = (char *)v419;
      if (v420)
      {
        unint64_t v308 = (unint64_t)v420 << 6;
        do
        {
          v309 = (void **)&v307[v308];
          if (v307[v308 - 17] < 0) {
            operator delete(*(v309 - 5));
          }
          if (*((char *)v309 - 41) < 0) {
            operator delete(*(v309 - 8));
          }
          v308 -= 64;
        }
        while (v308);
        v307 = (char *)v419;
      }
      if (v307 != v421) {
        free(v307);
      }
LABEL_468:
      char v273 = HIBYTE(v373.__r_.__value_.__r.__words[2]);
    }
    if (v273 < 0) {
      operator delete(v373.__r_.__value_.__l.__data_);
    }
    uint64_t v127 = (char **)v329;
LABEL_472:
    uint64_t v251 = (void *)v251[1];
  }
  while (v251 != v344);
LABEL_522:
  LOBYTE(v196) = 1;
LABEL_523:
  sub_1CC3724DC((uint64_t)&v376);
  if (v127)
  {
    v310 = (char **)(v343 - 48);
    do
    {
      if (*v310)
      {
        sub_1CC37058C((uint64_t)v310, *v310);
        operator delete(*v310);
      }
      BOOL v121 = v310 == v127;
      v310 -= 6;
    }
    while (!v121);
LABEL_529:
    operator delete(v127);
  }
LABEL_530:
  if (*((void *)&v351 + 1))
  {
    *(void *)&long long v352 = *((void *)&v351 + 1);
    operator delete(*((void **)&v351 + 1));
  }
  if ((void)v350)
  {
    *((void *)&v350 + 1) = v350;
    operator delete((void *)v350);
  }
  MEMORY[0x1D25D9CD0](v348[0], 8);
  MEMORY[0x1D25D9CD0](*(void *)((char *)&v346 + 4), 8);
  return v196 & 1;
}

void sub_1CC36FD24(uint64_t a1, void *a2, unsigned char *a3, uint64_t a4, char **a5)
{
  *a3 = 0;
  if (!*(unsigned char *)(a1 + 104))
  {
    *(unsigned char *)(a1 + 104) = 1;
    uint64_t v10 = a5[1];
    unint64_t v9 = (unint64_t)a5[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = *a5;
      uint64_t v13 = (v10 - *a5) >> 3;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 61) {
        goto LABEL_38;
      }
      uint64_t v15 = v9 - (void)v12;
      if (v15 >> 2 > v14) {
        unint64_t v14 = v15 >> 2;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        if (v16 >> 61) {
          goto LABEL_39;
        }
        uint64_t v17 = (char *)operator new(8 * v16);
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[8 * v13];
      *(void *)uint64_t v18 = *a2;
      uint64_t v11 = v18 + 8;
      if (v10 != v12)
      {
        do
        {
          uint64_t v19 = *((void *)v10 - 1);
          v10 -= 8;
          *((void *)v18 - 1) = v19;
          v18 -= 8;
        }
        while (v10 != v12);
        uint64_t v10 = *a5;
      }
      *a5 = v18;
      a5[1] = v11;
      a5[2] = &v17[8 * v16];
      if (v10) {
        operator delete(v10);
      }
    }
    else
    {
      *(void *)uint64_t v10 = *a2;
      uint64_t v11 = v10 + 8;
    }
    a5[1] = v11;
    uint64_t v21 = *(_DWORD **)(a4 + 8);
    unint64_t v20 = *(void *)(a4 + 16);
    if ((unint64_t)v21 < v20)
    {
      *uint64_t v21 = *(_DWORD *)a1;
      uint64_t v22 = v21 + 1;
LABEL_36:
      *(void *)(a4 + 8) = v22;
      --*(_DWORD *)a1;
      return;
    }
    uint64_t v23 = *(_DWORD **)a4;
    uint64_t v24 = ((uint64_t)v21 - *(void *)a4) >> 2;
    unint64_t v25 = v24 + 1;
    if (!((unint64_t)(v24 + 1) >> 62))
    {
      uint64_t v26 = v20 - (void)v23;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (!v27)
      {
        size_t v28 = 0;
LABEL_31:
        uint64_t v29 = &v28[4 * v24];
        *(_DWORD *)uint64_t v29 = *(_DWORD *)a1;
        uint64_t v22 = v29 + 4;
        while (v21 != v23)
        {
          int v30 = *--v21;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        *(void *)a4 = v29;
        *(void *)(a4 + 8) = v22;
        *(void *)(a4 + 16) = &v28[4 * v27];
        if (v23) {
          operator delete(v23);
        }
        goto LABEL_36;
      }
      if (!(v27 >> 62))
      {
        size_t v28 = (char *)operator new(4 * v27);
        goto LABEL_31;
      }
LABEL_39:
      sub_1CB833614();
    }
LABEL_38:
    abort();
  }
}

void sub_1CC36FEF8(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4, _DWORD *a5, uint64_t a6, char **a7)
{
  *(unsigned char *)(a1 + 104) = 0;
  if (*a3) {
    *a4 = 1;
  }
  *a3 = 1;
  ++*a5;
  uint64_t v12 = a7[1];
  unint64_t v11 = (unint64_t)a7[2];
  if ((unint64_t)v12 >= v11)
  {
    unint64_t v14 = *a7;
    uint64_t v15 = (v12 - *a7) >> 3;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_41;
    }
    uint64_t v17 = v11 - (void)v14;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        goto LABEL_42;
      }
      uint64_t v19 = (char *)operator new(8 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    unint64_t v20 = &v19[8 * v15];
    *(void *)unint64_t v20 = *a2;
    uint64_t v13 = v20 + 8;
    if (v12 != v14)
    {
      do
      {
        uint64_t v21 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v20 - 1) = v21;
        v20 -= 8;
      }
      while (v12 != v14);
      uint64_t v12 = *a7;
    }
    *a7 = v20;
    a7[1] = v13;
    a7[2] = &v19[8 * v18];
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(void *)uint64_t v12 = *a2;
    uint64_t v13 = v12 + 8;
  }
  a7[1] = v13;
  uint64_t v22 = *(unsigned int *)(a1 + 4);
  uint64_t v35 = *a2;
  uint64_t v36 = v22;
  sub_1CD53B264((uint64_t)&v37, a1 + 8, (llvm::MachineInstrExpressionTrait *)&v35, &v36);
  int v23 = *(_DWORD *)(v37 + 8);
  if (v38) {
    ++*(_DWORD *)(a1 + 4);
  }
  unint64_t v25 = *(_DWORD **)(a6 + 8);
  unint64_t v24 = *(void *)(a6 + 16);
  if ((unint64_t)v25 < v24)
  {
    *unint64_t v25 = v23;
    uint64_t v26 = v25 + 1;
    goto LABEL_39;
  }
  unint64_t v27 = *(_DWORD **)a6;
  uint64_t v28 = ((uint64_t)v25 - *(void *)a6) >> 2;
  unint64_t v29 = v28 + 1;
  if ((unint64_t)(v28 + 1) >> 62) {
LABEL_41:
  }
    abort();
  uint64_t v30 = v24 - (void)v27;
  if (v30 >> 1 > v29) {
    unint64_t v29 = v30 >> 1;
  }
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v31 = v29;
  }
  if (!v31)
  {
    unint64_t v32 = 0;
    goto LABEL_34;
  }
  if (v31 >> 62) {
LABEL_42:
  }
    sub_1CB833614();
  unint64_t v32 = (char *)operator new(4 * v31);
LABEL_34:
  uint64_t v33 = &v32[4 * v28];
  *(_DWORD *)uint64_t v33 = v23;
  uint64_t v26 = v33 + 4;
  while (v25 != v27)
  {
    int v34 = *--v25;
    *((_DWORD *)v33 - 1) = v34;
    v33 -= 4;
  }
  *(void *)a6 = v33;
  *(void *)(a6 + 8) = v26;
  *(void *)(a6 + 16) = &v32[4 * v31];
  if (v27) {
    operator delete(v27);
  }
LABEL_39:
  *(void *)(a6 + 8) = v26;
  if (*(_DWORD *)(a1 + 4) >= *(_DWORD *)a1) {
    llvm::report_fatal_error((llvm *)"Instruction mapping overflow!", (const llvm::Twine *)1);
  }
}

uint64_t sub_1CC370130(uint64_t *a1, llvm::MachineInstrExpressionTrait *this, uint64_t **a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    uint64_t v6 = *a1;
    unsigned int HashValue = llvm::MachineInstrExpressionTrait::getHashValue(this, (const llvm::MachineInstr *const *)this);
    uint64_t v8 = 0;
    int v9 = v4 - 1;
    for (int i = 1; ; ++i)
    {
      unsigned int v11 = HashValue & v9;
      uint64_t v12 = (uint64_t *)(v6 + 16 * (HashValue & v9));
      uint64_t v13 = *v12;
      if ((unint64_t)(*v12 + 1) < 2 || (unint64_t)(*(void *)this + 1) <= 1)
      {
        if (*(void *)this == v13) {
          goto LABEL_18;
        }
      }
      else
      {
        if (llvm::MachineInstr::isIdenticalTo(*(void *)this, v13, 3))
        {
LABEL_18:
          uint64_t result = 1;
          goto LABEL_17;
        }
        uint64_t v13 = *v12;
      }
      if (!v13) {
        break;
      }
      if (v8) {
        BOOL v14 = 0;
      }
      else {
        BOOL v14 = v13 == -1;
      }
      if (v14) {
        uint64_t v8 = (uint64_t *)(v6 + 16 * v11);
      }
      unsigned int HashValue = v11 + i;
    }
    uint64_t result = 0;
    if (v8) {
      uint64_t v12 = v8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
  }
LABEL_17:
  *a3 = v12;
  return result;
}

uint64_t *sub_1CC370220(uint64_t a1, uint64_t a2, llvm::MachineInstrExpressionTrait *a3, uint64_t *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1CC370394(a1, 2 * v7);
    int v11 = *(_DWORD *)(a1 + 16);
    if (v11)
    {
      uint64_t v12 = *(void *)a1;
      unsigned int HashValue = llvm::MachineInstrExpressionTrait::getHashValue(a3, v10);
      BOOL v14 = 0;
      int v15 = v11 - 1;
      for (int i = 1; ; ++i)
      {
        unsigned int v17 = HashValue & v15;
        a4 = (uint64_t *)(v12 + 16 * (HashValue & v15));
        uint64_t v18 = *a4;
        if ((unint64_t)(*a4 + 1) < 2 || (unint64_t)(*(void *)a3 + 1) <= 1)
        {
          if (*(void *)a3 == v18) {
            goto LABEL_4;
          }
        }
        else
        {
          if (llvm::MachineInstr::isIdenticalTo(*(void *)a3, v18, 3)) {
            goto LABEL_4;
          }
          uint64_t v18 = *a4;
        }
        if (!v18) {
          break;
        }
        if (v14) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v18 == -1;
        }
        if (v19) {
          BOOL v14 = (uint64_t *)(v12 + 16 * v17);
        }
        unsigned int HashValue = v17 + i;
      }
      if (v14) {
        a4 = v14;
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1CC370394(a1, v7);
    unint64_t v20 = 0;
    sub_1CC370130((uint64_t *)a1, a3, &v20);
    a4 = v20;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC370394(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(llvm::MachineInstrExpressionTrait **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC37045C(a1, v4, (llvm::MachineInstrExpressionTrait *)((char *)v4 + 16 * v3));
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 16 * v10;
    do
    {
      *uint64_t result = 0;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC37045C(uint64_t result, llvm::MachineInstrExpressionTrait *this, llvm::MachineInstrExpressionTrait *a3)
{
  int v4 = this;
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 16 * v6;
    do
    {
      *int v7 = 0;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  if (this != a3)
  {
    do
    {
      if ((unint64_t)(*(void *)v4 + 1) >= 2)
      {
        uint64_t v9 = *(void *)v5;
        int v10 = *(_DWORD *)(v5 + 16);
        uint64_t result = llvm::MachineInstrExpressionTrait::getHashValue(v4, (const llvm::MachineInstr *const *)this);
        uint64_t v11 = 0;
        int v12 = v10 - 1;
        for (int i = 1; ; ++i)
        {
          unsigned int v14 = result & v12;
          uint64_t v15 = v9 + 16 * (result & v12);
          this = *(llvm::MachineInstrExpressionTrait **)v15;
          if ((unint64_t)(*(void *)v15 + 1) < 2
            || (uint64_t result = *(void *)v4, (unint64_t)(*(void *)v4 + 1) <= 1))
          {
            if (*(llvm::MachineInstrExpressionTrait **)v4 == this) {
              goto LABEL_21;
            }
          }
          else
          {
            uint64_t result = llvm::MachineInstr::isIdenticalTo(result, (uint64_t)this, 3);
            if (result) {
              goto LABEL_21;
            }
            this = *(llvm::MachineInstrExpressionTrait **)v15;
          }
          if (!this) {
            break;
          }
          if (v11) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = this == (llvm::MachineInstrExpressionTrait *)-1;
          }
          if (v16) {
            uint64_t v11 = v9 + 16 * v14;
          }
          uint64_t result = v14 + i;
        }
        if (v11) {
          uint64_t v15 = v11;
        }
LABEL_21:
        *(void *)uint64_t v15 = *(void *)v4;
        *(_DWORD *)(v15 + 8) = *((_DWORD *)v4 + 2);
        ++*(_DWORD *)(v5 + 8);
      }
      int v4 = (llvm::MachineInstrExpressionTrait *)((char *)v4 + 16);
    }
    while (v4 != a3);
  }
  return result;
}

void sub_1CC37058C(uint64_t a1, char *a2)
{
  int v4 = *(char **)(a1 + 8);
  if (v4 != a2)
  {
    uint64_t v5 = v4 - 80;
    do
    {
      uint64_t v6 = (char *)*((void *)v5 - 2);
      if (v5 != v6) {
        free(v6);
      }
      int v7 = (char *)*((void *)v5 - 12);
      if (v5 - 80 != v7) {
        free(v7);
      }
      uint64_t v8 = v5 - 144;
      v5 -= 224;
    }
    while (v8 != a2);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_1CC370600(long long **a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, unsigned int a8)
{
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v8 - (char *)*a1) >> 5);
  unint64_t v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) > 0x124924924924924) {
    abort();
  }
  if (0xDB6DB6DB6DB6DB6ELL * (((char *)a1[2] - (char *)v9) >> 5) > v11) {
    unint64_t v11 = 0xDB6DB6DB6DB6DB6ELL * (((char *)a1[2] - (char *)v9) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((char *)a1[2] - (char *)v9) >> 5)) >= 0x92492492492492) {
    unint64_t v11 = 0x124924924924924;
  }
  if (v11 > 0x124924924924924) {
    sub_1CB833614();
  }
  uint64_t v18 = 224 * v11;
  BOOL v19 = (char *)operator new(224 * v11);
  uint64_t v20 = (uint64_t)&v19[224 * v10];
  *(_DWORD *)uint64_t v20 = a2;
  *(_DWORD *)(v20 + 4) = a3;
  uint64_t v21 = (long long *)&v19[v18];
  *(void *)(v20 + 8) = a4;
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a6;
  *(_DWORD *)(v20 + 32) = 0;
  *(void *)(v20 + 40) = 0;
  *(void *)(v20 + 48) = v20 + 64;
  *(void *)(v20 + 56) = 0x600000000;
  *(_DWORD *)(v20 + 112) = 0;
  *(void *)(v20 + 120) = 0;
  *(void *)(v20 + 128) = v20 + 144;
  *(void *)(v20 + 136) = 0x600000000;
  *(_DWORD *)(v20 + 192) = 0;
  *(_WORD *)(v20 + 200) = 0;
  *(_DWORD *)(v20 + 204) = a7;
  *(_DWORD *)(v20 + 208) = 0;
  uint64_t v22 = v20 + 224;
  *(void *)(v20 + 212) = a8;
  if (v8 == v9)
  {
    *a1 = (long long *)v20;
    a1[1] = (long long *)v22;
    a1[2] = v21;
    if (!v8) {
      return v22;
    }
    goto LABEL_17;
  }
  do
  {
    v8 -= 14;
    uint64_t v20 = sub_1CD53B394(v20 - 224, v8);
  }
  while (v8 != v9);
  uint64_t v8 = *a1;
  int v23 = a1[1];
  *a1 = (long long *)v20;
  a1[1] = (long long *)v22;
  a1[2] = v21;
  if (v23 != v8)
  {
    unint64_t v24 = v23 - 5;
    do
    {
      unint64_t v25 = (long long *)*((void *)v24 - 2);
      if (v24 != v25) {
        free(v25);
      }
      uint64_t v26 = (long long *)*((void *)v24 - 12);
      if (v24 - 5 != v26) {
        free(v26);
      }
      unint64_t v27 = v24 - 9;
      v24 -= 14;
    }
    while (v27 != v8);
  }
  if (v8) {
LABEL_17:
  }
    operator delete(v8);
  return v22;
}

void *sub_1CC3707E0(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x124924924924925) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 28 * a4;
    uint64_t result = operator new(224 * a4);
    *uint64_t v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    while (a2 != a3)
    {
      uint64_t v8 = sub_1CD53B448((uint64_t)result, a2);
      a2 += 14;
      uint64_t result = (void *)(v8 + 224);
    }
    v6[1] = result;
  }
  return result;
}

unint64_t sub_1CC37086C(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 40))
  {
    sub_1CB84AEB8((uint64_t **)(a1 + 24), a2, a2);
    return ((unint64_t)v10 << 32) | 1;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    unsigned int v3 = *a2;
    if (v2)
    {
      uint64_t v5 = 4 * v2;
      uint64_t v6 = *(_DWORD **)a1;
      while (*v6 != v3)
      {
        ++v6;
        v5 -= 4;
        if (!v5) {
          goto LABEL_9;
        }
      }
      if (v5) {
        return 1;
      }
LABEL_9:
      if (v2 <= 1) {
        goto LABEL_3;
      }
      uint64_t v8 = (uint64_t **)(a1 + 24);
      do
      {
        uint64_t v9 = (unsigned int *)(*(void *)a1 + 4 * v2 - 4);
        sub_1CB84AEB8(v8, v9, v9);
        LODWORD(v2) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v2;
      }
      while (v2);
      sub_1CB84AEB8(v8, a2, a2);
    }
    else
    {
LABEL_3:
      if (v2 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v2) = v3;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

__n128 sub_1CC370994(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  if (a3 >= 2)
  {
    uint64_t v7 = a1;
    if (a3 == 2)
    {
      uint64_t v8 = *(a2 - 6);
      uint64_t v9 = *(a2 - 5);
      unsigned __int8 v10 = a2 - 6;
      if (v8 == v9)
      {
        int v11 = 0;
      }
      else
      {
        int v11 = 0;
        uint64_t v12 = *(a2 - 6);
        do
        {
          v11 += *(_DWORD *)(v12 + 32);
          v12 += 224;
        }
        while (v12 != v9);
      }
      int v19 = *((_DWORD *)a2 - 4);
      uint64_t v21 = *(void *)a1;
      uint64_t v20 = *(void *)(a1 + 8);
      int v22 = *(_DWORD *)(a1 + 32);
      if (*(void *)a1 == v20)
      {
        int v23 = 0;
      }
      else
      {
        int v23 = 0;
        uint64_t v24 = *(void *)a1;
        do
        {
          v23 += *(_DWORD *)(v24 + 32);
          v24 += 224;
        }
        while (v24 != v20);
      }
      unsigned int v63 = -1227133513 * ((unint64_t)(v9 - v8) >> 5) * v19;
      unsigned int v64 = v11 + v19 + *((_DWORD *)a2 - 3);
      BOOL v38 = v63 >= v64;
      unsigned int v65 = v63 - v64;
      if (!v38) {
        unsigned int v65 = 0;
      }
      unsigned int v66 = -1227133513 * ((unint64_t)(v20 - v21) >> 5) * v22;
      unsigned int v67 = v23 + v22 + *(_DWORD *)(a1 + 36);
      BOOL v38 = v66 >= v67;
      unsigned int v68 = v66 - v67;
      if (!v38) {
        unsigned int v68 = 0;
      }
      if (v65 > v68)
      {
        uint64_t v98 = *(void *)(a1 + 16);
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        __n128 v104 = *(__n128 *)(a1 + 24);
        int v105 = *(_DWORD *)(a1 + 40);
        sub_1CD53B4FC(a1);
        *(_OWORD *)uint64_t v7 = *((_OWORD *)a2 - 3);
        *(void *)(v7 + 16) = *(a2 - 4);
        uint64_t *v10 = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        long long v99 = *(_OWORD *)(a2 - 3);
        *(_DWORD *)(v7 + 40) = *((_DWORD *)a2 - 2);
        *(_OWORD *)(v7 + 24) = v99;
        sub_1CD53B4FC((uint64_t)(a2 - 6));
        *(a2 - 6) = v21;
        *(a2 - 5) = v20;
        *(a2 - 4) = v98;
        uint64_t result = v104;
        *(__n128 *)(a2 - 3) = v104;
        *((_DWORD *)a2 - 2) = v105;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((uint64_t *)a1 != a2)
      {
        unint64_t v25 = (void *)(a1 + 48);
        if ((uint64_t *)(a1 + 48) != a2)
        {
          uint64_t v26 = a1;
          do
          {
            unint64_t v27 = v25;
            uint64_t v28 = *(void *)(v26 + 56);
            uint64_t v29 = *v25;
            if (*v25 == v28)
            {
              int v30 = 0;
            }
            else
            {
              int v30 = 0;
              uint64_t v31 = *v25;
              do
              {
                v30 += *(_DWORD *)(v31 + 32);
                v31 += 224;
              }
              while (v31 != v28);
            }
            uint64_t v32 = *(void *)(v26 + 8);
            if (*(void *)v26 == v32)
            {
              int v33 = 0;
            }
            else
            {
              int v33 = 0;
              uint64_t v34 = *(void *)v26;
              do
              {
                v33 += *(_DWORD *)(v34 + 32);
                v34 += 224;
              }
              while (v34 != v32);
            }
            int v35 = *(_DWORD *)(v26 + 80);
            int v36 = -1227133513 * ((unint64_t)(v28 - v29) >> 5);
            unsigned int v37 = v30 + v35 + *(_DWORD *)(v26 + 84);
            BOOL v38 = v35 * v36 >= v37;
            unsigned int v39 = v35 * v36 - v37;
            if (!v38) {
              unsigned int v39 = 0;
            }
            int v40 = *(_DWORD *)(v26 + 32);
            unsigned int v41 = -1227133513 * ((unint64_t)(v32 - *(void *)v26) >> 5) * v40;
            unsigned int v42 = v33 + v40 + *(_DWORD *)(v26 + 36);
            BOOL v38 = v41 >= v42;
            unsigned int v43 = v41 - v42;
            if (!v38) {
              unsigned int v43 = 0;
            }
            if (v39 > v43)
            {
              uint64_t v44 = *(void *)(v26 + 64);
              *(void *)(v26 + 56) = 0;
              *(void *)(v26 + 64) = 0;
              *unint64_t v25 = 0;
              uint64_t v100 = *(void *)(v26 + 72);
              uint64_t v101 = v44;
              LODWORD(v44) = *(_DWORD *)(v26 + 80);
              result.n128_u64[0] = *(void *)(v26 + 84);
              unsigned int v45 = v44 * v36;
              __n128 v102 = result;
              int v103 = v44;
              int v46 = result.n128_u32[0] + v44;
              uint64_t v47 = (uint64_t)v25;
              while (1)
              {
                uint64_t v48 = v26;
                sub_1CD53B4FC(v47);
                *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
                *(void *)(v47 + 16) = *(void *)(v48 + 16);
                *(void *)uint64_t v48 = 0;
                *(void *)(v48 + 8) = 0;
                *(void *)(v48 + 16) = 0;
                long long v49 = *(_OWORD *)(v48 + 24);
                *(_DWORD *)(v47 + 40) = *(_DWORD *)(v48 + 40);
                *(_OWORD *)(v47 + 24) = v49;
                if (v48 == v7) {
                  break;
                }
                if (v29 == v28)
                {
                  int v50 = 0;
                }
                else
                {
                  int v50 = 0;
                  uint64_t v51 = v29;
                  do
                  {
                    v50 += *(_DWORD *)(v51 + 32);
                    v51 += 224;
                  }
                  while (v51 != v28);
                }
                uint64_t v53 = *(void *)(v48 - 48);
                uint64_t v52 = *(void *)(v48 - 40);
                if (v53 == v52)
                {
                  int v54 = 0;
                }
                else
                {
                  int v54 = 0;
                  uint64_t v55 = *(void *)(v48 - 48);
                  do
                  {
                    v54 += *(_DWORD *)(v55 + 32);
                    v55 += 224;
                  }
                  while (v55 != v52);
                }
                uint64_t v26 = v48 - 48;
                unsigned int v56 = v46 + v50;
                BOOL v38 = v45 >= v56;
                unsigned int v57 = v45 - v56;
                if (!v38) {
                  unsigned int v57 = 0;
                }
                unint64_t v58 = (unint64_t)(v52 - v53) >> 5;
                int v59 = *(_DWORD *)(v48 - 16);
                LODWORD(v58) = -1227133513 * v58 * v59;
                unsigned int v60 = v54 + v59 + *(_DWORD *)(v48 - 12);
                BOOL v38 = v58 >= v60;
                unsigned int v61 = v58 - v60;
                if (!v38) {
                  unsigned int v61 = 0;
                }
                uint64_t v47 = v48;
                if (v57 <= v61)
                {
                  uint64_t v62 = v48;
                  goto LABEL_54;
                }
              }
              uint64_t v62 = v7;
LABEL_54:
              sub_1CD53B4FC(v62);
              *(void *)uint64_t v62 = v29;
              *(void *)(v62 + 8) = v28;
              *(void *)(v62 + 16) = v101;
              *(void *)(v48 + 24) = v100;
              *(_DWORD *)(v62 + 32) = v103;
              uint64_t result = v102;
              *(void *)(v62 + 36) = v102.n128_u64[0];
            }
            unint64_t v25 = v27 + 6;
            uint64_t v26 = (uint64_t)v27;
          }
          while (v27 + 6 != a2);
        }
      }
    }
    else
    {
      uint64_t v15 = (char **)a4;
      unint64_t v16 = a3 >> 1;
      unsigned int v17 = (uint64_t *)(a1 + 48 * (a3 >> 1));
      unint64_t v18 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        __n128 v69 = sub_1CC37103C((uint64_t *)a1, v17, v18, a4, result);
        uint64_t v70 = (uint64_t)&v15[6 * v16];
        result.n128_u64[0] = sub_1CC37103C((uint64_t *)(v7 + 48 * (a3 >> 1)), a2, a3 - (a3 >> 1), v70, v69).n128_u64[0];
        int v71 = &v15[6 * a3];
        uint64_t v72 = v70;
        uint64_t v73 = v15;
        while ((char **)v72 != v71)
        {
          uint64_t v74 = *(void *)(v72 + 8);
          if (*(void *)v72 == v74)
          {
            int v75 = 0;
          }
          else
          {
            int v75 = 0;
            uint64_t v76 = *(void *)v72;
            do
            {
              v75 += *(_DWORD *)(v76 + 32);
              v76 += 224;
            }
            while (v76 != v74);
          }
          __n128 v77 = v73[1];
          if (*v73 == v77)
          {
            int v78 = 0;
          }
          else
          {
            int v78 = 0;
            uint64_t v79 = *v73;
            do
            {
              v78 += *((_DWORD *)v79 + 8);
              v79 += 224;
            }
            while (v79 != v77);
          }
          int v80 = *(_DWORD *)(v72 + 32);
          unsigned int v81 = -1227133513 * ((unint64_t)(v74 - *(void *)v72) >> 5) * v80;
          unsigned int v82 = v75 + v80 + *(_DWORD *)(v72 + 36);
          BOOL v38 = v81 >= v82;
          unsigned int v83 = v81 - v82;
          if (v38) {
            unsigned int v84 = v83;
          }
          else {
            unsigned int v84 = 0;
          }
          int v85 = *((_DWORD *)v73 + 8);
          unsigned int v86 = -1227133513 * ((unint64_t)(v77 - *v73) >> 5) * v85;
          unsigned int v87 = v78 + v85 + *((_DWORD *)v73 + 9);
          BOOL v38 = v86 >= v87;
          unsigned int v88 = v86 - v87;
          if (v38) {
            unsigned int v89 = v88;
          }
          else {
            unsigned int v89 = 0;
          }
          sub_1CD53B4FC(v7);
          int v90 = (__n128 *)(v7 + 24);
          if (v84 <= v89)
          {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v73;
            *(void *)(v7 + 16) = v73[2];
            const char *v73 = 0;
            v73[1] = 0;
            v73[2] = 0;
            uint64_t result = *(__n128 *)(v73 + 3);
            *(_DWORD *)(v7 + 40) = *((_DWORD *)v73 + 10);
            *int v90 = result;
            v73 += 6;
          }
          else
          {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v72;
            *(void *)(v7 + 16) = *(void *)(v72 + 16);
            *(void *)uint64_t v72 = 0;
            *(void *)(v72 + 8) = 0;
            *(void *)(v72 + 16) = 0;
            uint64_t result = *(__n128 *)(v72 + 24);
            *(_DWORD *)(v7 + 40) = *(_DWORD *)(v72 + 40);
            *int v90 = result;
            v72 += 48;
          }
          v7 += 48;
          if (v73 == (char **)v70)
          {
            if ((char **)v72 != v71)
            {
              uint64_t v91 = 0;
              do
              {
                unint64_t v92 = (void *)(v72 + v91);
                uint64_t v93 = v7 + v91;
                sub_1CD53B4FC(v7 + v91);
                *(_OWORD *)uint64_t v93 = *(_OWORD *)(v72 + v91);
                *(void *)(v93 + 16) = *(void *)(v72 + v91 + 16);
                *unint64_t v92 = 0;
                v92[1] = 0;
                v92[2] = 0;
                uint64_t result = *(__n128 *)(v72 + v91 + 24);
                *(_DWORD *)(v93 + 40) = *(_DWORD *)(v72 + v91 + 40);
                *(__n128 *)(v93 + 24) = result;
                v91 += 48;
              }
              while (v92 + 6 != v71);
            }
            goto LABEL_90;
          }
        }
        if (v73 != (char **)v70)
        {
          uint64_t v94 = 0;
          do
          {
            unint64_t v95 = &v73[v94];
            uint64_t v96 = v7 + v94 * 8;
            sub_1CD53B4FC(v7 + v94 * 8);
            *(_OWORD *)uint64_t v96 = *(_OWORD *)&v73[v94];
            *(void *)(v96 + 16) = v73[v94 + 2];
            void *v95 = 0;
            v95[1] = 0;
            v95[2] = 0;
            uint64_t result = *(__n128 *)&v73[v94 + 3];
            *(_DWORD *)(v96 + 40) = v73[v94 + 5];
            *(__n128 *)(v96 + 24) = result;
            v94 += 6;
          }
          while (v95 + 6 != (char **)v70);
        }
LABEL_90:
        if (v15)
        {
          unint64_t v97 = a3;
          do
          {
            if (*v15)
            {
              sub_1CC37058C((uint64_t)v15, *v15);
              operator delete(*v15);
            }
            v15 += 6;
            --v97;
          }
          while (v97);
        }
      }
      else
      {
        sub_1CC370994(a1, v17, v18, a4, a5);
        sub_1CC370994(v7 + 48 * (a3 >> 1), a2, a3 - (a3 >> 1), v15, a5);
        result.n128_u64[0] = sub_1CC371738(v7, (char *)(v7 + 48 * (a3 >> 1)), (char *)a2, a3 >> 1, a3 - (a3 >> 1), v15, a5).n128_u64[0];
      }
    }
  }
  return result;
}

__n128 sub_1CC37103C(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  if (a3)
  {
    uint64_t v5 = a4;
    uint64_t v8 = a1;
    if (a3 == 2)
    {
      uint64_t v10 = *(a2 - 6);
      uint64_t v11 = *(a2 - 5);
      uint64_t v9 = a2 - 6;
      if (v10 == v11)
      {
        int v12 = 0;
      }
      else
      {
        int v12 = 0;
        uint64_t v13 = *(a2 - 6);
        do
        {
          v12 += *(_DWORD *)(v13 + 32);
          v13 += 224;
        }
        while (v13 != v11);
      }
      int v74 = *((_DWORD *)a2 - 4);
      uint64_t v76 = *a1;
      uint64_t v75 = a1[1];
      int v77 = *((_DWORD *)a1 + 8);
      if (*a1 == v75)
      {
        int v78 = 0;
      }
      else
      {
        int v78 = 0;
        uint64_t v79 = *a1;
        do
        {
          v78 += *(_DWORD *)(v79 + 32);
          v79 += 224;
        }
        while (v79 != v75);
      }
      unsigned int v80 = -1227133513 * ((unint64_t)(v11 - v10) >> 5) * v74;
      unsigned int v81 = v12 + v74 + *((_DWORD *)a2 - 3);
      BOOL v29 = v80 >= v81;
      unsigned int v82 = v80 - v81;
      if (v29) {
        unsigned int v83 = v82;
      }
      else {
        unsigned int v83 = 0;
      }
      unsigned int v84 = -1227133513 * ((unint64_t)(v75 - v76) >> 5) * v77;
      unsigned int v85 = v78 + v77 + *((_DWORD *)v8 + 9);
      BOOL v29 = v84 >= v85;
      unsigned int v86 = v84 - v85;
      if (v29) {
        unsigned int v87 = v86;
      }
      else {
        unsigned int v87 = 0;
      }
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      unsigned int v88 = (_OWORD *)(a4 + 24);
      unsigned int v89 = (void *)(a4 + 48);
      if (v83 <= v87)
      {
        *(_OWORD *)a4 = *(_OWORD *)v8;
        *(void *)(a4 + 16) = v8[2];
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        long long v92 = *(_OWORD *)(v8 + 3);
        *(_DWORD *)(a4 + 40) = *((_DWORD *)v8 + 10);
        *unsigned int v88 = v92;
        *(void *)(a4 + 56) = 0;
        *(void *)(a4 + 64) = 0;
        void *v89 = 0;
        *(_OWORD *)(a4 + 48) = *((_OWORD *)a2 - 3);
        *(void *)(a4 + 64) = *(a2 - 4);
        *uint64_t v9 = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        uint64_t result = *(__n128 *)(a2 - 3);
        int v91 = *((_DWORD *)a2 - 2);
      }
      else
      {
        *(_OWORD *)a4 = *((_OWORD *)a2 - 3);
        *(void *)(a4 + 16) = *(a2 - 4);
        *uint64_t v9 = 0;
        *(a2 - 5) = 0;
        *(a2 - 4) = 0;
        long long v90 = *(_OWORD *)(a2 - 3);
        *(_DWORD *)(a4 + 40) = *((_DWORD *)a2 - 2);
        *unsigned int v88 = v90;
        *(void *)(a4 + 56) = 0;
        *(void *)(a4 + 64) = 0;
        void *v89 = 0;
        *(_OWORD *)(a4 + 48) = *(_OWORD *)v8;
        *(void *)(a4 + 64) = v8[2];
        *uint64_t v8 = 0;
        v8[1] = 0;
        v8[2] = 0;
        uint64_t result = *(__n128 *)(v8 + 3);
        int v91 = *((_DWORD *)v8 + 10);
      }
      *(_DWORD *)(a4 + 88) = v91;
      *(__n128 *)(a4 + 72) = result;
    }
    else if (a3 == 1)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(void *)(a4 + 16) = a1[2];
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      uint64_t result = *(__n128 *)(a1 + 3);
      *(_DWORD *)(a4 + 40) = *((_DWORD *)a1 + 10);
      *(__n128 *)(a4 + 24) = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      uint64_t v52 = &a1[6 * (a3 >> 1)];
      sub_1CC370994(a1, v52, a3 >> 1, a4, a3 >> 1);
      sub_1CC370994(&v8[6 * (a3 >> 1)], a2, a3 - (a3 >> 1), v5 + 48 * (a3 >> 1), a3 - (a3 >> 1));
      uint64_t v53 = &v8[6 * (a3 >> 1)];
      while (v53 != a2)
      {
        uint64_t v54 = v53[1];
        if (*v53 == v54)
        {
          int v55 = 0;
        }
        else
        {
          int v55 = 0;
          uint64_t v56 = *v53;
          do
          {
            v55 += *(_DWORD *)(v56 + 32);
            v56 += 224;
          }
          while (v56 != v54);
        }
        uint64_t v57 = v8[1];
        if (*v8 == v57)
        {
          int v58 = 0;
        }
        else
        {
          int v58 = 0;
          uint64_t v59 = *v8;
          do
          {
            v58 += *(_DWORD *)(v59 + 32);
            v59 += 224;
          }
          while (v59 != v57);
        }
        int v60 = *((_DWORD *)v53 + 8);
        unsigned int v61 = -1227133513 * ((unint64_t)(v54 - *v53) >> 5) * v60;
        unsigned int v62 = v55 + v60 + *((_DWORD *)v53 + 9);
        BOOL v29 = v61 >= v62;
        unsigned int v63 = v61 - v62;
        if (v29) {
          unsigned int v64 = v63;
        }
        else {
          unsigned int v64 = 0;
        }
        int v65 = *((_DWORD *)v8 + 8);
        unsigned int v66 = -1227133513 * ((unint64_t)(v57 - *v8) >> 5) * v65;
        unsigned int v67 = v58 + v65 + *((_DWORD *)v8 + 9);
        BOOL v29 = v66 >= v67;
        unsigned int v68 = v66 - v67;
        if (v29) {
          unsigned int v69 = v68;
        }
        else {
          unsigned int v69 = 0;
        }
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        *(void *)(v5 + 16) = 0;
        uint64_t v70 = (__n128 *)(v5 + 24);
        if (v64 <= v69)
        {
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v8;
          *(void *)(v5 + 16) = v8[2];
          *uint64_t v8 = 0;
          v8[1] = 0;
          v8[2] = 0;
          uint64_t result = *(__n128 *)(v8 + 3);
          *(_DWORD *)(v5 + 40) = *((_DWORD *)v8 + 10);
          *uint64_t v70 = result;
          v8 += 6;
        }
        else
        {
          *(_OWORD *)uint64_t v5 = *(_OWORD *)v53;
          *(void *)(v5 + 16) = v53[2];
          uint64_t *v53 = 0;
          v53[1] = 0;
          v53[2] = 0;
          uint64_t result = *(__n128 *)(v53 + 3);
          *(_DWORD *)(v5 + 40) = *((_DWORD *)v53 + 10);
          *uint64_t v70 = result;
          v53 += 6;
        }
        v5 += 48;
        if (v8 == v52)
        {
          if (v53 != a2)
          {
            uint64_t v71 = 0;
            do
            {
              uint64_t v72 = &v53[v71];
              uint64_t v73 = v5 + v71 * 8;
              *(void *)uint64_t v73 = 0;
              *(void *)(v73 + 8) = 0;
              *(void *)(v73 + 16) = 0;
              *(_OWORD *)uint64_t v73 = *(_OWORD *)&v53[v71];
              *(void *)(v73 + 16) = v53[v71 + 2];
              *uint64_t v72 = 0;
              v72[1] = 0;
              v72[2] = 0;
              uint64_t result = *(__n128 *)&v53[v71 + 3];
              *(_DWORD *)(v73 + 40) = v53[v71 + 5];
              *(__n128 *)(v73 + 24) = result;
              v71 += 6;
            }
            while (v72 + 6 != a2);
          }
          return result;
        }
      }
      if (v8 != v52)
      {
        uint64_t v93 = 0;
        do
        {
          uint64_t v94 = v5 + v93 * 8;
          unint64_t v95 = &v8[v93];
          *(void *)uint64_t v94 = 0;
          *(void *)(v94 + 8) = 0;
          *(void *)(v94 + 16) = 0;
          *(_OWORD *)uint64_t v94 = *(_OWORD *)&v8[v93];
          *(void *)(v94 + 16) = v8[v93 + 2];
          uint64_t *v95 = 0;
          v95[1] = 0;
          v95[2] = 0;
          uint64_t result = *(__n128 *)&v8[v93 + 3];
          *(_DWORD *)(v94 + 40) = v8[v93 + 5];
          *(__n128 *)(v94 + 24) = result;
          v93 += 6;
        }
        while (v95 + 6 != v52);
      }
    }
    else if (a1 != a2)
    {
      *(void *)a4 = 0;
      *(void *)(a4 + 8) = 0;
      *(void *)(a4 + 16) = 0;
      *(_OWORD *)a4 = *(_OWORD *)a1;
      *(void *)(a4 + 16) = a1[2];
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      uint64_t result = *(__n128 *)(a1 + 3);
      *(_DWORD *)(a4 + 40) = *((_DWORD *)a1 + 10);
      *(__n128 *)(a4 + 24) = result;
      unsigned int v14 = a1 + 6;
      if (a1 + 6 != a2)
      {
        uint64_t v15 = a4;
        do
        {
          unint64_t v16 = v14;
          unint64_t v18 = v8 + 7;
          uint64_t v17 = v8[7];
          if (*v16 == v17)
          {
            int v19 = 0;
          }
          else
          {
            int v19 = 0;
            uint64_t v20 = *v16;
            do
            {
              v19 += *(_DWORD *)(v20 + 32);
              v20 += 224;
            }
            while (v20 != v17);
          }
          uint64_t v22 = *(void *)v15;
          uint64_t v21 = *(void *)(v15 + 8);
          if (*(void *)v15 == v21)
          {
            int v23 = 0;
          }
          else
          {
            int v23 = 0;
            uint64_t v24 = *(void *)v15;
            do
            {
              v23 += *(_DWORD *)(v24 + 32);
              v24 += 224;
            }
            while (v24 != v21);
          }
          unint64_t v25 = (void *)(v15 + 48);
          int v26 = *((_DWORD *)v8 + 20);
          unsigned int v27 = -1227133513 * ((unint64_t)(v17 - *v16) >> 5) * v26;
          unsigned int v28 = v19 + v26 + *((_DWORD *)v8 + 21);
          BOOL v29 = v27 >= v28;
          unsigned int v30 = v27 - v28;
          if (!v29) {
            unsigned int v30 = 0;
          }
          int v31 = *(_DWORD *)(v15 + 32);
          unsigned int v32 = -1227133513 * ((unint64_t)(v21 - v22) >> 5) * v31;
          unsigned int v33 = v23 + v31 + *(_DWORD *)(v15 + 36);
          BOOL v29 = v32 >= v33;
          unsigned int v34 = v32 - v33;
          if (!v29) {
            unsigned int v34 = 0;
          }
          if (v30 > v34)
          {
            *(void *)(v15 + 48) = v22;
            *(void *)(v15 + 56) = v21;
            *(void *)(v15 + 64) = *(void *)(v15 + 16);
            *(void *)uint64_t v15 = 0;
            *(void *)(v15 + 8) = 0;
            *(void *)(v15 + 16) = 0;
            *(_OWORD *)(v15 + 72) = *(_OWORD *)(v15 + 24);
            uint64_t v36 = v5;
            *(_DWORD *)(v15 + 88) = *(_DWORD *)(v15 + 40);
            if (v15 != v5)
            {
              while (1)
              {
                uint64_t v37 = v8[7];
                if (*v16 == v37)
                {
                  int v38 = 0;
                }
                else
                {
                  int v38 = 0;
                  uint64_t v39 = *v16;
                  do
                  {
                    v38 += *(_DWORD *)(v39 + 32);
                    v39 += 224;
                  }
                  while (v39 != v37);
                }
                uint64_t v41 = *(void *)(v15 - 48);
                uint64_t v40 = *(void *)(v15 - 40);
                if (v41 == v40)
                {
                  int v42 = 0;
                }
                else
                {
                  int v42 = 0;
                  uint64_t v43 = *(void *)(v15 - 48);
                  do
                  {
                    v42 += *(_DWORD *)(v43 + 32);
                    v43 += 224;
                  }
                  while (v43 != v40);
                }
                int v44 = *((_DWORD *)v8 + 20);
                unsigned int v45 = -1227133513 * ((unint64_t)(v37 - *v16) >> 5) * v44;
                unsigned int v46 = v38 + v44 + *((_DWORD *)v8 + 21);
                BOOL v29 = v45 >= v46;
                unsigned int v47 = v45 - v46;
                if (!v29) {
                  unsigned int v47 = 0;
                }
                int v48 = *(_DWORD *)(v15 - 16);
                unsigned int v49 = -1227133513 * ((unint64_t)(v40 - v41) >> 5) * v48;
                unsigned int v50 = v42 + v48 + *(_DWORD *)(v15 - 12);
                BOOL v29 = v49 >= v50;
                unsigned int v51 = v49 - v50;
                if (!v29) {
                  unsigned int v51 = 0;
                }
                if (v47 <= v51) {
                  break;
                }
                sub_1CD53B4FC(v15);
                *(_OWORD *)uint64_t v15 = *(_OWORD *)(v15 - 48);
                *(void *)(v15 + 16) = *(void *)(v15 - 32);
                *(void *)(v15 - 40) = 0;
                *(void *)(v15 - 32) = 0;
                *(_OWORD *)(v15 + 24) = *(_OWORD *)(v15 - 24);
                *(_DWORD *)(v15 + 40) = *(_DWORD *)(v15 - 8);
                v15 -= 48;
                *(void *)uint64_t v15 = 0;
                if (v15 == v5)
                {
                  uint64_t v36 = v5;
                  goto LABEL_48;
                }
              }
              uint64_t v36 = v15;
            }
LABEL_48:
            sub_1CD53B4FC(v36);
            *(_OWORD *)uint64_t v36 = *(_OWORD *)v16;
            *(void *)(v36 + 16) = v8[8];
            *unint64_t v18 = 0;
            v8[8] = 0;
            uint64_t *v16 = 0;
            int v35 = (__n128 *)(v36 + 24);
          }
          else
          {
            *unint64_t v25 = 0;
            *(void *)(v15 + 56) = 0;
            *(void *)(v15 + 64) = 0;
            *(_OWORD *)(v15 + 48) = *(_OWORD *)v16;
            *(void *)(v15 + 64) = v8[8];
            *unint64_t v18 = 0;
            v8[8] = 0;
            uint64_t *v16 = 0;
            int v35 = (__n128 *)(v15 + 72);
          }
          uint64_t result = *(__n128 *)(v8 + 9);
          v35[1].n128_u32[0] = *((_DWORD *)v8 + 22);
          *int v35 = result;
          unsigned int v14 = v16 + 6;
          uint64_t v15 = (uint64_t)v25;
          uint64_t v8 = v16;
        }
        while (v16 + 6 != a2);
      }
    }
  }
  return result;
}

__n128 sub_1CC371738(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5, char **a6, uint64_t a7)
{
  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4) {
        return result;
      }
      uint64_t v12 = *((void *)a2 + 1);
      int v13 = *((_DWORD *)a2 + 8);
      unsigned int v14 = -1227133513 * ((unint64_t)(v12 - *(void *)a2) >> 5) * v13;
      int v15 = *((_DWORD *)a2 + 9) + v13;
      while (1)
      {
        if (*(void *)a2 == v12)
        {
          int v16 = 0;
        }
        else
        {
          int v16 = 0;
          uint64_t v17 = *(void *)a2;
          do
          {
            v16 += *(_DWORD *)(v17 + 32);
            v17 += 224;
          }
          while (v17 != v12);
        }
        uint64_t v19 = *(void *)a1;
        uint64_t v18 = *(void *)(a1 + 8);
        if (*(void *)a1 == v18)
        {
          int v20 = 0;
        }
        else
        {
          int v20 = 0;
          uint64_t v21 = *(void *)a1;
          do
          {
            v20 += *(_DWORD *)(v21 + 32);
            v21 += 224;
          }
          while (v21 != v18);
        }
        unsigned int v22 = v15 + v16;
        BOOL v23 = v14 >= v22;
        unsigned int v24 = v14 - v22;
        if (!v23) {
          unsigned int v24 = 0;
        }
        int v25 = *(_DWORD *)(a1 + 32);
        unsigned int v26 = -1227133513 * ((unint64_t)(v18 - v19) >> 5) * v25;
        unsigned int v27 = v20 + v25 + *(_DWORD *)(a1 + 36);
        BOOL v23 = v26 >= v27;
        unsigned int v28 = v26 - v27;
        if (!v23) {
          unsigned int v28 = 0;
        }
        if (v24 > v28) {
          break;
        }
        a1 += 48;
        if (!--a4) {
          return result;
        }
      }
      if (a4 >= a5)
      {
        if (a4 == 1)
        {
          uint64_t v152 = *(void *)(a1 + 16);
          *(void *)a1 = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          __n128 v168 = *(__n128 *)(a1 + 24);
          int v171 = *(_DWORD *)(a1 + 40);
          uint64_t v153 = (uint64_t)a2;
          sub_1CD53B4FC(a1);
          *(_OWORD *)a1 = *(_OWORD *)v153;
          *(void *)(a1 + 16) = *(void *)(v153 + 16);
          *(void *)uint64_t v153 = 0;
          *(void *)(v153 + 8) = 0;
          *(void *)(v153 + 16) = 0;
          long long v154 = *(_OWORD *)(v153 + 24);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(v153 + 40);
          *(_OWORD *)(a1 + 24) = v154;
          sub_1CD53B4FC(v153);
          *(void *)uint64_t v153 = v19;
          *(void *)(v153 + 8) = v18;
          *(void *)(v153 + 16) = v152;
          __n128 result = v168;
          *(__n128 *)(v153 + 24) = v168;
          *(_DWORD *)(v153 + 40) = v171;
          return result;
        }
        if (a4 >= 0) {
          uint64_t v54 = a4;
        }
        else {
          uint64_t v54 = a4 + 1;
        }
        uint64_t v55 = v54 >> 1;
        uint64_t v39 = (char *)(a1 + 48 * (v54 >> 1));
        int v31 = a3;
        if (a3 != a2)
        {
          unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 4);
          uint64_t v57 = *((void *)v39 + 1);
          uint64_t v58 = a1 + 48 * v55;
          int v59 = *(_DWORD *)(v58 + 32);
          int v60 = *(_DWORD *)(v58 + 36);
          unsigned int v61 = -1227133513 * ((unint64_t)(v57 - *(void *)v39) >> 5) * v59;
          int v62 = v60 + v59;
          int v31 = a2;
          do
          {
            unint64_t v63 = v56 >> 1;
            unsigned int v64 = &v31[48 * (v56 >> 1)];
            uint64_t v65 = *((void *)v64 + 1);
            if (*(void *)v64 == v65)
            {
              int v66 = 0;
            }
            else
            {
              int v66 = 0;
              uint64_t v67 = *(void *)v64;
              do
              {
                v66 += *(_DWORD *)(v67 + 32);
                v67 += 224;
              }
              while (v67 != v65);
            }
            if (*(void *)v39 == v57)
            {
              int v68 = 0;
            }
            else
            {
              int v68 = 0;
              uint64_t v69 = *(void *)v39;
              do
              {
                v68 += *(_DWORD *)(v69 + 32);
                v69 += 224;
              }
              while (v69 != v57);
            }
            int v70 = *((_DWORD *)v64 + 8);
            unsigned int v71 = -1227133513 * ((unint64_t)(v65 - *(void *)v64) >> 5) * v70;
            unsigned int v72 = v66 + v70 + *(_DWORD *)&v31[48 * v63 + 36];
            BOOL v23 = v71 >= v72;
            unsigned int v73 = v71 - v72;
            if (!v23) {
              unsigned int v73 = 0;
            }
            unsigned int v74 = v61 - (v62 + v68);
            if (v61 < v62 + v68) {
              unsigned int v74 = 0;
            }
            uint64_t v75 = v64 + 48;
            v56 += ~v63;
            if (v73 > v74) {
              int v31 = v75;
            }
            else {
              unint64_t v56 = v63;
            }
          }
          while (v56);
        }
        uint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v31 - a2) >> 4);
      }
      else
      {
        if (a5 >= 0) {
          uint64_t v29 = a5;
        }
        else {
          uint64_t v29 = a5 + 1;
        }
        uint64_t v30 = v29 >> 1;
        int v31 = &a2[48 * (v29 >> 1)];
        if (a2 == (char *)a1)
        {
          uint64_t v39 = a2;
        }
        else
        {
          unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-a1] >> 4);
          uint64_t v33 = *((void *)v31 + 1);
          unsigned int v34 = &a2[48 * v30];
          int v35 = *((_DWORD *)v34 + 8);
          int v36 = *((_DWORD *)v34 + 9);
          unsigned int v37 = -1227133513 * ((unint64_t)(v33 - *(void *)v31) >> 5) * v35;
          int v38 = v36 + v35;
          uint64_t v39 = (char *)a1;
          do
          {
            if (*(void *)v31 == v33)
            {
              int v40 = 0;
            }
            else
            {
              int v40 = 0;
              uint64_t v41 = *(void *)v31;
              do
              {
                v40 += *(_DWORD *)(v41 + 32);
                v41 += 224;
              }
              while (v41 != v33);
            }
            unint64_t v42 = v32 >> 1;
            uint64_t v43 = (uint64_t *)&v39[48 * (v32 >> 1)];
            uint64_t v44 = v43[1];
            if (*v43 == v44)
            {
              int v45 = 0;
            }
            else
            {
              int v45 = 0;
              uint64_t v46 = *v43;
              do
              {
                v45 += *(_DWORD *)(v46 + 32);
                v46 += 224;
              }
              while (v46 != v44);
            }
            int v47 = *(_DWORD *)&v39[48 * v42 + 32];
            unsigned int v48 = v38 + v40;
            BOOL v23 = v37 >= v48;
            unsigned int v49 = v37 - v48;
            if (!v23) {
              unsigned int v49 = 0;
            }
            unsigned int v50 = -1227133513 * ((unint64_t)(v44 - *v43) >> 5) * v47;
            unsigned int v51 = v45 + v47 + *(_DWORD *)&v39[48 * v42 + 36];
            BOOL v23 = v50 >= v51;
            unsigned int v52 = v50 - v51;
            if (!v23) {
              unsigned int v52 = 0;
            }
            uint64_t v53 = (char *)(v43 + 6);
            v32 += ~v42;
            if (v49 > v52) {
              unint64_t v32 = v42;
            }
            else {
              uint64_t v39 = v53;
            }
          }
          while (v32);
        }
        uint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v39[-a1] >> 4);
      }
      uint64_t v76 = v31;
      if (v39 != a2)
      {
        uint64_t v76 = v39;
        if (a2 != v31)
        {
          uint64_t v159 = v55;
          uint64_t v160 = a5;
          uint64_t v155 = v30;
          uint64_t v156 = a7;
          v157 = a6;
          uint64_t v161 = a3;
          long long v162 = v39 + 48;
          uint64_t v77 = (uint64_t)v39;
          uint64_t v78 = (uint64_t)a2;
          uint64_t v79 = (uint64_t)a2;
          while (1)
          {
            uint64_t v80 = *(void *)(v77 + 16);
            long long v81 = *(_OWORD *)v77;
            *(void *)(v77 + 8) = 0;
            *(void *)(v77 + 16) = 0;
            *(void *)uint64_t v77 = 0;
            long long v163 = v81;
            long long v166 = *(_OWORD *)(v77 + 24);
            int v169 = *(_DWORD *)(v77 + 40);
            sub_1CD53B4FC(v77);
            *(_OWORD *)uint64_t v77 = *(_OWORD *)v79;
            *(void *)(v77 + 16) = *(void *)(v79 + 16);
            *(void *)uint64_t v79 = 0;
            *(void *)(v79 + 8) = 0;
            *(void *)(v79 + 16) = 0;
            long long v82 = *(_OWORD *)(v79 + 24);
            *(_DWORD *)(v77 + 40) = *(_DWORD *)(v79 + 40);
            *(_OWORD *)(v77 + 24) = v82;
            sub_1CD53B4FC(v79);
            *(_OWORD *)uint64_t v79 = v163;
            *(void *)(v79 + 16) = v80;
            *(_DWORD *)(v79 + 40) = v169;
            *(_OWORD *)(v79 + 24) = v166;
            v77 += 48;
            v79 += 48;
            if ((char *)v79 == v31) {
              break;
            }
            if (v77 == v78) {
              uint64_t v78 = v79;
            }
            v162 += 48;
          }
          a5 = v160;
          a3 = v161;
          uint64_t v55 = v159;
          if (v77 == v78)
          {
            a7 = v156;
            a6 = v157;
            uint64_t v30 = v155;
          }
          else
          {
            uint64_t v83 = v78;
            do
            {
              while (1)
              {
                uint64_t v84 = *(void *)(v77 + 16);
                long long v85 = *(_OWORD *)v77;
                *(void *)(v77 + 8) = 0;
                *(void *)(v77 + 16) = 0;
                *(void *)uint64_t v77 = 0;
                int v170 = *(_DWORD *)(v77 + 40);
                long long v164 = v85;
                long long v167 = *(_OWORD *)(v77 + 24);
                sub_1CD53B4FC(v77);
                *(_OWORD *)uint64_t v77 = *(_OWORD *)v83;
                *(void *)(v77 + 16) = *(void *)(v83 + 16);
                *(void *)uint64_t v83 = 0;
                *(void *)(v83 + 8) = 0;
                *(void *)(v83 + 16) = 0;
                long long v86 = *(_OWORD *)(v83 + 24);
                *(_DWORD *)(v77 + 40) = *(_DWORD *)(v83 + 40);
                *(_OWORD *)(v77 + 24) = v86;
                sub_1CD53B4FC(v83);
                *(_OWORD *)uint64_t v83 = v164;
                *(void *)(v83 + 16) = v84;
                *(_OWORD *)(v83 + 24) = v167;
                *(_DWORD *)(v83 + 40) = v170;
                v77 += 48;
                v83 += 48;
                if ((char *)v83 == v31) {
                  break;
                }
                if (v77 == v78) {
                  uint64_t v78 = v83;
                }
              }
              uint64_t v83 = v78;
            }
            while (v77 != v78);
            a7 = v156;
            a6 = v157;
            a5 = v160;
            a3 = v161;
            uint64_t v30 = v155;
            uint64_t v55 = v159;
          }
          uint64_t v76 = v162;
        }
      }
      a4 -= v55;
      uint64_t v87 = a5 - v30;
      if (v55 + v30 >= a4 + v87)
      {
        long long v92 = a3;
        a3 = v76;
        uint64_t v93 = a4;
        a4 = v55;
        sub_1CC371738(v76, v31, v92, v93);
        int v31 = v39;
        a5 = v30;
      }
      else
      {
        uint64_t v88 = a1;
        unsigned int v89 = v39;
        a1 = (uint64_t)v76;
        uint64_t v90 = v87;
        sub_1CC371738(v88, v89, v76, v55);
        a5 = v90;
      }
      a2 = v31;
      if (!a5) {
        return result;
      }
    }
    if (a4 <= a5)
    {
      if ((char *)a1 == a2) {
        return result;
      }
      unint64_t v122 = 0;
      uint64_t v95 = 0;
      do
      {
        uint64_t v123 = &a6[v122 / 8];
        unint64_t v124 = (void *)(a1 + v122);
        *uint64_t v123 = 0;
        v123[1] = 0;
        v123[2] = 0;
        *(_OWORD *)uint64_t v123 = *(_OWORD *)(a1 + v122);
        v123[2] = *(char **)(a1 + v122 + 16);
        void *v124 = 0;
        v124[1] = 0;
        v124[2] = 0;
        __n128 result = *(__n128 *)(a1 + v122 + 24);
        *((_DWORD *)v123 + 10) = *(_DWORD *)(a1 + v122 + 40);
        *(__n128 *)(v123 + 3) = result;
        ++v95;
        v122 += 48;
      }
      while (v124 + 6 != (void *)a2);
      if (v122)
      {
        v125 = &a6[v122 / 8];
        uint64_t v165 = (uint64_t)&a6[v122 / 8 - 6];
        BOOL v126 = a6;
        while (a2 != a3)
        {
          uint64_t v127 = *((void *)a2 + 1);
          if (*(void *)a2 == v127)
          {
            int v128 = 0;
          }
          else
          {
            int v128 = 0;
            uint64_t v129 = *(void *)a2;
            do
            {
              v128 += *(_DWORD *)(v129 + 32);
              v129 += 224;
            }
            while (v129 != v127);
          }
          unsigned int v130 = v126[1];
          if (*v126 == v130)
          {
            int v131 = 0;
          }
          else
          {
            int v131 = 0;
            size_t v132 = *v126;
            do
            {
              v131 += *((_DWORD *)v132 + 8);
              v132 += 224;
            }
            while (v132 != v130);
          }
          int v133 = *((_DWORD *)a2 + 8);
          unsigned int v134 = -1227133513 * ((unint64_t)(v127 - *(void *)a2) >> 5) * v133;
          unsigned int v135 = v128 + v133 + *((_DWORD *)a2 + 9);
          BOOL v23 = v134 >= v135;
          unsigned int v136 = v134 - v135;
          if (v23) {
            unsigned int v137 = v136;
          }
          else {
            unsigned int v137 = 0;
          }
          int v138 = *((_DWORD *)v126 + 8);
          unsigned int v139 = -1227133513 * ((unint64_t)(v130 - *v126) >> 5) * v138;
          unsigned int v140 = v131 + v138 + *((_DWORD *)v126 + 9);
          BOOL v23 = v139 >= v140;
          unsigned int v141 = v139 - v140;
          if (v23) {
            unsigned int v142 = v141;
          }
          else {
            unsigned int v142 = 0;
          }
          v143 = a2;
          sub_1CD53B4FC(a1);
          v144 = (__n128 *)(a1 + 24);
          if (v137 <= v142)
          {
            *(_OWORD *)a1 = *(_OWORD *)v126;
            *(void *)(a1 + 16) = v126[2];
            const char *v126 = 0;
            v126[1] = 0;
            v126[2] = 0;
            __n128 result = *(__n128 *)(v126 + 3);
            *(_DWORD *)(a1 + 40) = *((_DWORD *)v126 + 10);
            __n128 *v144 = result;
            v126 += 6;
            a2 = v143;
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)v143;
            *(void *)(a1 + 16) = *((void *)v143 + 2);
            *(void *)v143 = 0;
            *((void *)v143 + 1) = 0;
            *((void *)v143 + 2) = 0;
            __n128 result = *(__n128 *)(v143 + 24);
            *(_DWORD *)(a1 + 40) = *((_DWORD *)v143 + 10);
            __n128 *v144 = result;
            a2 = v143 + 48;
          }
          a1 += 48;
          if (v125 == v126) {
            goto LABEL_163;
          }
        }
        if (v125 != v126)
        {
          uint64_t v149 = 0;
          do
          {
            uint64_t v150 = a1 + v149 * 8;
            v151 = &v126[v149];
            sub_1CD53B4FC(a1 + v149 * 8);
            *(_OWORD *)uint64_t v150 = *(_OWORD *)&v126[v149];
            *(void *)(v150 + 16) = v126[v149 + 2];
            long long *v151 = 0;
            v151[1] = 0;
            v151[2] = 0;
            __n128 result = *(__n128 *)&v126[v149 + 3];
            *(_DWORD *)(v150 + 40) = v126[v149 + 5];
            *(__n128 *)(v150 + 24) = result;
            v149 += 6;
          }
          while ((char **)v165 != v151);
        }
      }
    }
    else
    {
      if (a2 == a3) {
        return result;
      }
      unint64_t v94 = 0;
      uint64_t v95 = 0;
      do
      {
        uint64_t v96 = &a6[v94 / 8];
        unint64_t v97 = &a2[v94];
        unsigned char *v96 = 0;
        v96[1] = 0;
        v96[2] = 0;
        *(_OWORD *)uint64_t v96 = *(_OWORD *)&a2[v94];
        v96[2] = *(char **)&a2[v94 + 16];
        *(void *)unint64_t v97 = 0;
        *((void *)v97 + 1) = 0;
        *((void *)v97 + 2) = 0;
        __n128 result = *(__n128 *)&a2[v94 + 24];
        *((_DWORD *)v96 + 10) = *(_DWORD *)&a2[v94 + 40];
        *(__n128 *)(v96 + 3) = result;
        ++v95;
        v94 += 48;
      }
      while (v97 + 48 != a3);
      if (v94)
      {
        uint64_t v98 = a3;
        long long v99 = &a6[v94 / 8];
        uint64_t v158 = a6;
        while (a2 != (char *)a1)
        {
          uint64_t v100 = (uint64_t)*(v99 - 6);
          uint64_t v101 = (uint64_t)*(v99 - 5);
          if (v100 == v101)
          {
            int v102 = 0;
          }
          else
          {
            int v102 = 0;
            uint64_t v103 = (uint64_t)*(v99 - 6);
            do
            {
              v102 += *(_DWORD *)(v103 + 32);
              v103 += 224;
            }
            while (v103 != v101);
          }
          uint64_t v105 = *((void *)a2 - 6);
          uint64_t v104 = *((void *)a2 - 5);
          if (v105 == v104)
          {
            int v106 = 0;
          }
          else
          {
            int v106 = 0;
            uint64_t v107 = *((void *)a2 - 6);
            do
            {
              v106 += *(_DWORD *)(v107 + 32);
              v107 += 224;
            }
            while (v107 != v104);
          }
          std::string::size_type v108 = (char **)(a2 - 48);
          int v109 = *((_DWORD *)v99 - 4);
          unsigned int v110 = -1227133513 * ((unint64_t)(v101 - v100) >> 5) * v109;
          unsigned int v111 = v102 + v109 + *((_DWORD *)v99 - 3);
          BOOL v23 = v110 >= v111;
          unsigned int v112 = v110 - v111;
          if (v23) {
            unsigned int v113 = v112;
          }
          else {
            unsigned int v113 = 0;
          }
          int v114 = *((_DWORD *)a2 - 4);
          unsigned int v115 = -1227133513 * ((unint64_t)(v104 - v105) >> 5) * v114;
          unsigned int v116 = v106 + v114 + *((_DWORD *)a2 - 3);
          BOOL v23 = v115 >= v116;
          unsigned int v117 = v115 - v116;
          if (v23) {
            unsigned int v118 = v117;
          }
          else {
            unsigned int v118 = 0;
          }
          uint64_t v119 = (char **)a2;
          sub_1CD53B4FC((uint64_t)(v98 - 48));
          if (v113 <= v118) {
            uint64_t v120 = v99;
          }
          else {
            uint64_t v120 = v119;
          }
          if (v113 <= v118) {
            BOOL v121 = v99 - 6;
          }
          else {
            BOOL v121 = v108;
          }
          if (v113 <= v118) {
            a2 = (char *)v119;
          }
          else {
            a2 = (char *)v108;
          }
          if (v113 <= v118) {
            v99 -= 6;
          }
          *((void *)v98 - 6) = *(v120 - 6);
          *((void *)v98 - 5) = *(v120 - 5);
          *((void *)v98 - 4) = *(v120 - 4);
          llvm::raw_ostream *v121 = 0;
          v121[1] = 0;
          v121[2] = 0;
          __n128 result = *(__n128 *)(v120 - 3);
          *((_DWORD *)v98 - 2) = *((_DWORD *)v120 - 2);
          *(__n128 *)(v98 - 24) = result;
          v98 -= 48;
          a6 = v158;
          if (v99 == v158) {
            goto LABEL_163;
          }
        }
        if (v99 != a6)
        {
          uint64_t v145 = v98;
          uint64_t v146 = 0;
          do
          {
            int v147 = &v99[v146];
            v148 = &v145[v146 * 8];
            sub_1CD53B4FC((uint64_t)&v145[v146 * 8 - 48]);
            *((_OWORD *)v148 - 3) = *(_OWORD *)&v99[v146 - 6];
            *((void *)v148 - 4) = v99[v146 - 4];
            *(v147 - 6) = 0;
            *(v147 - 5) = 0;
            *(v147 - 4) = 0;
            __n128 result = *(__n128 *)&v99[v146 - 3];
            *((_DWORD *)v148 - 2) = v99[v146 - 1];
            *(__n128 *)(v148 - 24) = result;
            v146 -= 6;
          }
          while (&v99[v146] != a6);
        }
      }
    }
LABEL_163:
    if (a6)
    {
      do
      {
        if (*a6)
        {
          sub_1CC37058C((uint64_t)a6, *a6);
          operator delete(*a6);
        }
        a6 += 6;
        --v95;
      }
      while (v95);
    }
  }
  return result;
}

uint64_t sub_1CC372194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a1;
    uint64_t v30 = a3;
    do
    {
      uint64_t v6 = a1 + v4;
      uint64_t v7 = a3 + v4;
      long long v8 = *(_OWORD *)(a1 + v4);
      long long v9 = *(_OWORD *)(a1 + v4 + 16);
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(a1 + v4 + 32);
      *(_OWORD *)uint64_t v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      *(void *)(v7 + 40) = *(void *)(a1 + v4 + 40);
      if (a3 != a1)
      {
        uint64_t v10 = (void **)(v7 + 48);
        uint64_t v11 = *(void **)(v6 + 48);
        if ((void *)(v6 + 64) == v11)
        {
          int v13 = (_DWORD *)(a1 + v4 + 56);
          uint64_t v12 = *v13;
          uint64_t v14 = a3 + v4;
          uint64_t v15 = *(unsigned int *)(a3 + v4 + 56);
          if (v15 < v12)
          {
            if (*(_DWORD *)(v14 + 60) < v12)
            {
              *(_DWORD *)(v14 + 56) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v15) {
              memmove(*v10, v11, 8 * v15);
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v25 = *v13;
            if (v15 != v25) {
              memcpy((char *)*v10 + 8 * v15, (const void *)(*(void *)(v6 + 48) + 8 * v15), 8 * v25 - 8 * v15);
            }
            *(_DWORD *)(v14 + 56) = v12;
            a3 = v30;
          }
          else
          {
            if (v12)
            {
              memmove(*v10, v11, 8 * v12);
              a3 = v30;
            }
            *(_DWORD *)(v14 + 56) = v12;
          }
        }
        else
        {
          uint64_t v27 = a3 + v4;
          if ((void *)(a3 + v4 + 64) != *v10)
          {
            free(*v10);
            a3 = v30;
            uint64_t v11 = *(void **)(v6 + 48);
          }
          uint64_t *v10 = v11;
          int v13 = (_DWORD *)(v5 + 56);
          *(void *)(v27 + 56) = *(void *)(a1 + v4 + 56);
          *(void *)(v6 + 48) = v6 + 64;
          *(_DWORD *)(a1 + v4 + 60) = 0;
        }
        _DWORD *v13 = 0;
        uint64_t v16 = a1 + v4;
        uint64_t v17 = a3 + v4;
        *(_DWORD *)(v17 + 112) = *(_DWORD *)(a1 + v4 + 112);
        uint64_t v18 = *(void **)(a1 + v4 + 128);
        *(void *)(v17 + 120) = *(void *)(a1 + v4 + 120);
        uint64_t v19 = (void **)(a3 + v4 + 128);
        uint64_t v20 = a1 + v4 + 144;
        if ((void *)v20 == v18)
        {
          uint64_t v21 = (_DWORD *)(v16 + 136);
          uint64_t v22 = *(unsigned int *)(v16 + 136);
          uint64_t v23 = *(unsigned int *)(v17 + 136);
          if (v23 < v22)
          {
            if (*(_DWORD *)(a3 + v4 + 140) < v22)
            {
              *(_DWORD *)(v17 + 136) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v23) {
              memmove(*v19, v18, 8 * v23);
            }
            else {
              uint64_t v23 = 0;
            }
            uint64_t v26 = *v21;
            if (v23 != v26) {
              memcpy((char *)*v19 + 8 * v23, (const void *)(*(void *)(v16 + 128) + 8 * v23), 8 * v26 - 8 * v23);
            }
            *(_DWORD *)(v17 + 136) = v22;
            a3 = v30;
          }
          else
          {
            if (v22)
            {
              memmove(*v19, v18, 8 * v22);
              a3 = v30;
            }
            *(_DWORD *)(v17 + 136) = v22;
          }
        }
        else
        {
          if ((void *)(v17 + 144) != *v19)
          {
            free(*v19);
            a3 = v30;
            uint64_t v18 = *(void **)(v16 + 128);
          }
          *uint64_t v19 = v18;
          uint64_t v21 = (_DWORD *)(v5 + 136);
          *(void *)(a3 + v4 + 136) = *(void *)(a1 + v4 + 136);
          *(void *)(v16 + 128) = v20;
          *(_DWORD *)(a1 + v4 + 140) = 0;
        }
        *uint64_t v21 = 0;
      }
      *(_DWORD *)(v7 + 192) = *(_DWORD *)(v6 + 192);
      long long v24 = *(_OWORD *)(v6 + 200);
      *(_DWORD *)(v7 + 216) = *(_DWORD *)(v6 + 216);
      *(_OWORD *)(v7 + 200) = v24;
      v4 += 224;
      uint64_t v5 = v6 + 224;
    }
    while (v6 + 224 != a2);
    a3 += v4;
  }
  return a3;
}

llvm::Instruction *LLVMBuildRetVoid_0(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[8];
  unsigned int v3 = (char *)operator new(0x40uLL);
  *(void *)unsigned int v3 = *v2 + 1576;
  *((void *)v3 + 1) = 0;
  v3[16] = 29;
  *(_OWORD *)(v3 + 44) = 0u;
  *(_OWORD *)(v3 + 33) = 0u;
  *(_OWORD *)(v3 + 17) = 0u;
  __int16 v6 = 257;
  return sub_1CB844E0C(a1, (llvm::Instruction *)v3, (uint64_t)v5);
}

uint64_t sub_1CC3724DC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v2 = *(unsigned int *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 8 * v2;
      do
      {
        uint64_t v5 = *(void *)(*(void *)a1 + v3);
        if (v5) {
          BOOL v6 = v5 == -8;
        }
        else {
          BOOL v6 = 1;
        }
        if (!v6) {
          MEMORY[0x1D25D9CD0]();
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void sub_1CC372550()
{
}

uint64_t sub_1CC37258C()
{
  int v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable the machine outliner on linkonceodr functions";
  v1.n128_u64[1] = 52;
  LOBYTE(v2) = 0;
  uint64_t v4 = &v2;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCCF228, "enable-linkonceodr-outlining", &v3, &v1, (unsigned char **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCF228, &dword_1CB82C000);
  int v2 = 1;
  int v3 = 0;
  uint64_t v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Number of times to rerun the outliner after the initial outline";
  v1.n128_u64[1] = 63;
  sub_1CBF7A9F8((uint64_t)&unk_1EBCCF2E8, "machine-outliner-reruns", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCCF2E8, &dword_1CB82C000);
}

void *llvm::AllAnalysesOn<llvm::MachineFunction>::ID()
{
  return &llvm::AllAnalysesOn<llvm::MachineFunction>::SetKey;
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::Invalidator::invalidate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1CBF5BF34(*a1, a2);
  uint64_t v9 = *a1;
  uint64_t v10 = *a1 + 8;
  if (*(unsigned char *)*a1)
  {
    uint64_t v11 = 8;
  }
  else
  {
    uint64_t v10 = *(void *)(v9 + 8);
    uint64_t v11 = *(unsigned int *)(v9 + 16);
  }
  if (v10 + 16 * v11 == v8)
  {
    uint64_t v12 = a1[1];
    v19[0] = 0;
    if (sub_1CC374D50(*(void *)v12, *(_DWORD *)(v12 + 16), a2, a3, v19)) {
      uint64_t v13 = v19[0];
    }
    else {
      uint64_t v13 = *(void *)v12 + 24 * *(unsigned int *)(v12 + 16);
    }
    uint64_t v14 = *a1;
    char v15 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(*(void *)(v13 + 16) + 24)
                                                                         + 16))(*(void *)(*(void *)(v13 + 16) + 24), a3, a4, a1);
    uint64_t v17 = a2;
    v18[0] = v15;
    sub_1CBF5C150(v14, &v17, v18, (uint64_t)v19);
    uint64_t v8 = v19[0];
  }
  return *(unsigned __int8 *)(v8 + 8);
}

void *llvm::AnalysisManager<llvm::MachineFunction>::Invalidator::Invalidator(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = a2;
  result[1] = a3;
  return result;
}

{
  *__n128 result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::AnalysisManager(uint64_t result)
{
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

{
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::AnalysisManager(uint64_t result, uint64_t a2)
{
  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)__n128 result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  int v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;

  *(void *)__n128 result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(void *)__n128 result = *(void *)a2;
  *(void *)a2 = 0;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  int v2 = *(_DWORD *)(result + 12);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  int v4 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v4;
  int v5 = *(_DWORD *)(result + 40);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v5;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  int v6 = *(_DWORD *)(result + 60);
  *(_DWORD *)(result + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = v6;
  int v7 = *(_DWORD *)(result + 64);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a2 + 64) = v7;
  return result;
}

uint64_t *llvm::AnalysisManager<llvm::MachineFunction>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *((unsigned int *)a1 + 4);
  uint64_t v5 = *a1;
  if (v4)
  {
    int v6 = (uint64_t *)(v5 + 8);
    uint64_t v7 = 16 * v4;
    do
    {
      if ((*(v6 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v8 = *v6;
        *int v6 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
      }
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
    uint64_t v5 = *a1;
  }
  MEMORY[0x1D25D9CD0](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  uint64_t v10 = a1 + 3;
  uint64_t v9 = a1[3];
  int v11 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v11;
  int v12 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  uint64_t v13 = *((unsigned int *)a1 + 10);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(v9 + 8);
    uint64_t v15 = 32 * v13;
    do
    {
      if ((*(v14 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
        sub_1CC374CB4(v14);
      }
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
    uint64_t v9 = *v10;
  }
  MEMORY[0x1D25D9CD0](v9, 8);
  uint64_t *v10 = 0;
  a1[4] = 0;
  *((_DWORD *)a1 + 10) = 0;
  a1[3] = a2[3];
  a2[3] = 0;
  *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
  *((_DWORD *)a2 + 8) = 0;
  int v16 = *((_DWORD *)a1 + 9);
  *((_DWORD *)a1 + 9) = *((_DWORD *)a2 + 9);
  *((_DWORD *)a2 + 9) = v16;
  int v17 = *((_DWORD *)a1 + 10);
  *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v17;
  MEMORY[0x1D25D9CD0](a1[6], 8);
  a1[6] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 16) = 0;
  a1[6] = a2[6];
  a2[6] = 0;
  *((_DWORD *)a1 + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)a2 + 14) = 0;
  int v18 = *((_DWORD *)a1 + 15);
  *((_DWORD *)a1 + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)a2 + 15) = v18;
  int v19 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v19;
  return a1;
}

BOOL llvm::AnalysisManager<llvm::MachineFunction>::empty(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 0;
}

void llvm::AnalysisManager<llvm::MachineFunction>::clear()
{
}

void llvm::AnalysisManager<llvm::MachineFunction>::clear(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  int v3 = *(_DWORD *)(a1 + 56);
  if (v3)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 64);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      int v5 = 1 << (33 - __clz(v3 - 1));
      if (v5 <= 64) {
        int v6 = 64;
      }
      else {
        int v6 = v5;
      }
LABEL_10:
      if (v6 == v4)
      {
        *(void *)(a1 + 56) = 0;
        uint64_t v7 = *(int64x2_t **)(a1 + 48);
        uint64_t v8 = 24 * v4;
        int64x2_t v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
        do
        {
          *uint64_t v7 = v9;
          uint64_t v7 = (int64x2_t *)((char *)v7 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      else
      {
        MEMORY[0x1D25D9CD0](*(void *)v2, 8);
        if (v6)
        {
          unint64_t v25 = (4 * v6 / 3u + 1) | ((unint64_t)(4 * v6 / 3u + 1) >> 1);
          unint64_t v26 = v25 | (v25 >> 2) | ((v25 | (v25 >> 2)) >> 4);
          LODWORD(v26) = (((v26 | (v26 >> 8)) >> 16) | v26 | (v26 >> 8)) + 1;
          *(_DWORD *)(a1 + 64) = v26;
          uint64_t v27 = operator new(24 * v26, (std::align_val_t)8uLL);
          *(void *)(a1 + 48) = v27;
          *(void *)(a1 + 56) = 0;
          uint64_t v28 = *(unsigned int *)(a1 + 64);
          if (v28)
          {
            uint64_t v29 = 24 * v28;
            int64x2_t v30 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
            do
            {
              _OWORD *v27 = v30;
              uint64_t v27 = (_OWORD *)((char *)v27 + 24);
              v29 -= 24;
            }
            while (v29);
          }
        }
        else
        {
          *(void *)uint64_t v2 = 0;
          *(void *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 60)) {
      goto LABEL_18;
    }
    unsigned int v4 = *(_DWORD *)(a1 + 64);
    if (v4 > 0x40)
    {
      int v6 = 0;
      goto LABEL_10;
    }
  }
  if (v4)
  {
    uint64_t v10 = *(void **)v2;
    uint64_t v11 = *(void *)v2 + 24 * v4;
    do
    {
      void *v10 = -4096;
      v10[1] = -4096;
      v10 += 3;
    }
    while (v10 != (void *)v11);
  }
  *(void *)(a1 + 56) = 0;
LABEL_18:
  int v12 = *(_DWORD *)(a1 + 32);
  if (!v12 && !*(_DWORD *)(a1 + 36)) {
    return;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 24);
  if (v13 <= 4 * v12 || v13 < 0x41)
  {
    if (!v13)
    {
LABEL_41:
      *(void *)(a1 + 32) = 0;
      return;
    }
    uint64_t v22 = (uint64_t *)(v14 + 8);
    uint64_t v23 = 32 * v13;
    while (1)
    {
      uint64_t v24 = *(v22 - 1);
      if (v24 == -8192) {
        goto LABEL_39;
      }
      if (v24 != -4096) {
        break;
      }
LABEL_40:
      v22 += 4;
      v23 -= 32;
      if (!v23) {
        goto LABEL_41;
      }
    }
    sub_1CC374CB4(v22);
LABEL_39:
    *(v22 - 1) = -4096;
    goto LABEL_40;
  }
  uint64_t v15 = (void *)(a1 + 24);
  int v16 = (uint64_t *)(v14 + 8);
  uint64_t v17 = 32 * v13;
  do
  {
    if ((*(v16 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000) {
      sub_1CC374CB4(v16);
    }
    v16 += 4;
    v17 -= 32;
  }
  while (v17);
  if (!v12)
  {
    if (*(_DWORD *)(a1 + 40))
    {
      MEMORY[0x1D25D9CD0](*v15, 8);
      *uint64_t v15 = 0;
      *(void *)(a1 + 32) = 0;
      *(_DWORD *)(a1 + 40) = 0;
      return;
    }
    goto LABEL_41;
  }
  int v18 = 1 << (33 - __clz(v12 - 1));
  if (v18 <= 64) {
    unsigned int v19 = 64;
  }
  else {
    unsigned int v19 = v18;
  }
  if (v19 == *(_DWORD *)(a1 + 40))
  {
    *(void *)(a1 + 32) = 0;
    uint64_t v20 = 32 * v19;
    uint64_t v21 = *(void **)(a1 + 24);
    do
    {
      *uint64_t v21 = -4096;
      v21 += 4;
      v20 -= 32;
    }
    while (v20);
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 24), 8);
    unint64_t v31 = (4 * v19 / 3 + 1) | ((unint64_t)(4 * v19 / 3 + 1) >> 1);
    unint64_t v32 = v31 | (v31 >> 2) | ((v31 | (v31 >> 2)) >> 4);
    LODWORD(v32) = (((v32 | (v32 >> 8)) >> 16) | v32 | (v32 >> 8)) + 1;
    *(_DWORD *)(a1 + 40) = v32;
    uint64_t v33 = operator new(32 * v32, (std::align_val_t)8uLL);
    *(void *)(a1 + 24) = v33;
    *(void *)(a1 + 32) = 0;
    uint64_t v34 = *(unsigned int *)(a1 + 40);
    if (v34)
    {
      uint64_t v35 = 32 * v34;
      do
      {
        *uint64_t v33 = -4096;
        v33 += 4;
        v35 -= 32;
      }
      while (v35);
    }
  }
}

void llvm::AnalysisManager<llvm::MachineFunction>::invalidate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (!sub_1CBFA534C(a3, (uint64_t)&llvm::AllAnalysesOn<llvm::MachineFunction>::SetKey))
  {
    uint64_t v23 = 1;
    for (uint64_t i = 8; i != 136; i += 16)
      *(uint64_t *)((char *)&v23 + i) = -4096;
    v22[0] = &v23;
    v22[1] = a1 + 48;
    v21[0] = a2;
    uint64_t v7 = sub_1CC374E3C(a1 + 24, v21);
    uint64_t v8 = v7 + 1;
    int v18 = v7;
    int64x2_t v9 = (uint64_t *)v7[2];
    if (v9 != v7 + 1)
    {
      do
      {
        uint64_t v10 = v9[2];
        uint64_t v11 = v9[3];
        uint64_t v12 = sub_1CBF5BF34((uint64_t)&v23, v10);
        if (v23) {
          uint64_t v13 = &v24;
        }
        else {
          uint64_t v13 = v24;
        }
        unsigned int v14 = v25;
        if (v23) {
          unsigned int v14 = 8;
        }
        if (&v13[2 * v14] == (void *)v12)
        {
          char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, void *))(*(void *)v11 + 16))(v11, a2, a3, v22);
          uint64_t v19 = v10;
          v20[0] = v15;
          sub_1CBF5C150((uint64_t)&v23, &v19, v20, (uint64_t)v21);
        }
        int64x2_t v9 = (uint64_t *)v9[1];
      }
      while (v9 != v8);
    }
    if (v23 >= 2)
    {
      for (j = (uint64_t *)v18[2]; j != v8; j = (uint64_t *)j[1])
      {
        v21[0] = j[2];
        uint64_t v19 = 0;
        if (sub_1CBF5BFB4((uint64_t)&v23, v21, &v19) && *(unsigned char *)(v19 + 8)) {
          llvm::AnalysisManager<llvm::MachineFunction>::getCachedResultImpl();
        }
      }
    }
    if (!v18[3])
    {
      v21[0] = 0;
      if (sub_1CBF98030(*(void *)(a1 + 24), *(_DWORD *)(a1 + 40), a2, v21))
      {
        uint64_t v17 = (void *)v21[0];
        sub_1CC374CB4((uint64_t *)(v21[0] + 8));
        *uint64_t v17 = -8192;
        *(int32x2_t *)(a1 + 32) = vadd_s32(*(int32x2_t *)(a1 + 32), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    if ((v23 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v24, 8);
    }
  }
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::lookUpPass(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  if (sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5)) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v3 + 8);
}

{
  uint64_t v3;
  uint64_t v5;

  uint64_t v5 = 0;
  if (sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), a2, &v5)) {
    uint64_t v3 = v5;
  }
  else {
    uint64_t v3 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  return *(void *)(v3 + 8);
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::getResultImpl(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a1 + 48;
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v23 = 0;
  char v8 = sub_1CC374D50(v6, *(_DWORD *)(v7 + 16), (uint64_t)a2, a3, &v23);
  int64x2_t v9 = v23;
  if (v8)
  {
    uint64_t v10 = v23[2];
    return *(void *)(v10 + 24);
  }
  unsigned int v11 = *(_DWORD *)(v7 + 16);
  int v12 = *(_DWORD *)(a1 + 56);
  if (4 * v12 + 4 >= 3 * v11)
  {
    v11 *= 2;
  }
  else if (v11 + ~v12 - *(_DWORD *)(a1 + 60) > v11 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CC37512C(v7, v11);
  uint64_t v23 = 0;
  sub_1CC374D50(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), (uint64_t)a2, a3, &v23);
  int64x2_t v9 = v23;
LABEL_5:
  ++*(_DWORD *)(a1 + 56);
  if (*v9 != -4096 || v9[1] != -4096) {
    --*(_DWORD *)(a1 + 60);
  }
  *int64x2_t v9 = a2;
  v9[1] = a3;
  v9[2] = 0;
  uint64_t v23 = 0;
  if (sub_1CBB0BF40(*(void *)a1, *(_DWORD *)(a1 + 16), (uint64_t)a2, &v23)) {
    uint64_t v13 = (uint64_t)v23;
  }
  else {
    uint64_t v13 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 16);
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (a2 == &llvm::PassInstrumentationAnalysis::Key)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = *(void *)(llvm::AnalysisManager<llvm::MachineFunction>::getResultImpl(a1, &llvm::PassInstrumentationAnalysis::Key, a3)+ 8);
    if (v15 && *(_DWORD *)(v15 + 728))
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
      uint64_t v23 = 0;
      operator new();
    }
  }
  uint64_t v23 = (void *)a3;
  int v16 = sub_1CC374E3C(a1 + 24, (uint64_t *)&v23);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(&v23, v14, a3, a1);
  uint64_t v17 = operator new(0x20uLL);
  uint64_t v19 = v16[1];
  int v18 = v16 + 1;
  uint64_t v20 = (uint64_t)v23;
  v17[2] = a2;
  _OWORD v17[3] = v20;
  *uint64_t v17 = v19;
  v17[1] = v18;
  *(void *)(v19 + 8) = v17;
  *int v18 = (uint64_t)v17;
  ++v18[2];
  if (v15 && *(_DWORD *)(v15 + 872))
  {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
    uint64_t v23 = 0;
    operator new();
  }
  uint64_t v23 = 0;
  if (sub_1CC374D50(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), (uint64_t)a2, a3, &v23)) {
    uint64_t v21 = (uint64_t)v23;
  }
  else {
    uint64_t v21 = *(void *)(a1 + 48) + 24 * *(unsigned int *)(a1 + 64);
  }
  uint64_t v10 = *v18;
  *(void *)(v21 + 16) = *v18;
  return *(void *)(v10 + 24);
}

uint64_t llvm::AnalysisManager<llvm::MachineFunction>::getCachedResultImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = 0;
  if (sub_1CC374D50(*(void *)(a1 + 48), *(_DWORD *)(a1 + 64), a2, a3, &v8))
  {
    uint64_t v4 = v8;
    uint64_t v5 = *(void *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    unsigned int v6 = *(_DWORD *)(a1 + 64);
    uint64_t v4 = v5 + 24 * v6;
  }
  if (v4 == v5 + 24 * v6) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v4 + 16) + 24);
  }
}

__n128 llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::PassManager(__n128 *a1, __n128 *a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void *llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::operator=(void *a1, uint64_t a2)
{
  uint64_t v4 = (void *)*a1;
  if (*a1)
  {
    uint64_t v5 = (void *)a1[1];
    unsigned int v6 = (void *)*a1;
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        *uint64_t v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      unsigned int v6 = (void *)*a1;
    }
    a1[1] = v4;
    operator delete(v6);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return a1;
}

llvm::raw_ostream *llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::printPipeline(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *((void *)result + 1) - *(void *)result;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    uint64_t v8 = result;
    uint64_t v9 = 0;
    unint64_t v10 = (v4 >> 3);
    do
    {
      __n128 result = (llvm::raw_ostream *)(*(uint64_t (**)(void, llvm::raw_ostream *, uint64_t, uint64_t))(**(void **)(*(void *)v8 + 8 * v9) + 24))(*(void *)(*(void *)v8 + 8 * v9), a2, a3, a4);
      if (++v9 < v10)
      {
        unsigned int v11 = (unsigned char *)*((void *)a2 + 4);
        if (*((unsigned char **)a2 + 3) == v11)
        {
          __n128 result = llvm::raw_ostream::write(a2, ",", 1uLL);
        }
        else
        {
          unsigned char *v11 = 44;
          ++*((void *)a2 + 4);
        }
      }
    }
    while (v10 != v9);
  }
  return result;
}

void llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::run(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = &llvm::PreservedAnalyses::AllAnalysesKey;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 48) = a1 + 80;
  *(void *)(a1 + 56) = a1 + 80;
  *(void *)(a1 + 64) = 2;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 16) = 0x100000002;
  llvm::AnalysisManager<llvm::MachineFunction>::getResultImpl();
}

BOOL llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::isEmpty(void *a1)
{
  return *a1 == a1[1];
}

uint64_t llvm::PassManager<llvm::MachineFunction,llvm::AnalysisManager<llvm::MachineFunction>>::isRequired()
{
  return 1;
}

void llvm::MachineFunctionPassManager::run()
{
}

void sub_1CC374CB4(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = v3[3];
        v3[3] = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1CC374D50(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    unint64_t v10 = (void *)(a1 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      int v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -8192;
        }
        if (v18 && v11 == -8192) {
          int v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        unint64_t v10 = (void *)(a1 + 24 * (v20 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_9;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        unint64_t v10 = v16;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_9:
  *a5 = v10;
  return v14;
}

uint64_t *sub_1CC374E3C(uint64_t a1, uint64_t *a2)
{
  int v8 = 0;
  char v4 = sub_1CBF98030(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  __n128 result = v8;
  if (v4) {
    return result;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1CC374F20(a1, v7);
    int v8 = 0;
    sub_1CBF98030(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    __n128 result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  *__n128 result = *a2;
  result[1] = (uint64_t)(result + 1);
  result[2] = (uint64_t)(result + 1);
  result[3] = 0;
  return result;
}

void *sub_1CC374F20(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 32 * v10;
      do
      {
        *__n128 result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = (uint64_t *)(v4 + 24);
      uint64_t v13 = 32 * v3;
      do
      {
        uint64_t v14 = *(v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v24 = 0;
          sub_1CBF98030(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v24);
          uint64_t v15 = v24;
          int v16 = v24 + 1;
          *uint64_t v24 = *(v12 - 3);
          v15[1] = v16;
          v15[2] = v16;
          v15[3] = 0;
          uint64_t v17 = *v12;
          if (*v12)
          {
            uint64_t v19 = *(v12 - 2);
            BOOL v18 = (uint64_t *)*(v12 - 1);
            uint64_t v20 = *v18;
            *(void *)(v20 + 8) = *(void *)(v19 + 8);
            **(void **)(v19 + 8) = v20;
            uint64_t v21 = v15[1];
            *(void *)(v21 + 8) = v18;
            *BOOL v18 = v21;
            v15[1] = v19;
            *(void *)(v19 + 8) = v16;
            v15[3] = v17;
            uint64_t *v12 = 0;
          }
          ++*(_DWORD *)(a1 + 8);
          sub_1CC374CB4(v12 - 2);
        }
        v12 += 4;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v22 = *(unsigned int *)(a1 + 16);
  if (v22)
  {
    uint64_t v23 = 32 * v22;
    do
    {
      *__n128 result = -4096;
      result += 4;
      v23 -= 32;
    }
    while (v23);
  }
  return result;
}

void sub_1CC3750AC()
{
}

void sub_1CC3750C0()
{
}

void *sub_1CC375120()
{
  return &llvm::Any::TypeId<llvm::MachineFunction const*>::Id;
}

_OWORD *sub_1CC37512C(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  __n128 result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 24 * v10;
      int64x2_t v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      do
      {
        *__n128 result = v12;
        __n128 result = (_OWORD *)((char *)result + 24);
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v13 = 24 * v3;
      uint64_t v14 = (uint64_t *)(v4 + 8);
      do
      {
        uint64_t v15 = *(v14 - 1);
        uint64_t v16 = *v14;
        if ((v15 != -4096 || v16 != -4096) && (v15 != -8192 || v16 != -8192))
        {
          uint64_t v21 = 0;
          sub_1CC374D50(*(void *)a1, *(_DWORD *)(a1 + 16), v15, v16, &v21);
          uint64_t v17 = v21;
          *uint64_t v21 = *(v14 - 1);
          v17[1] = *v14;
          v17[2] = v14[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 3;
        v13 -= 24;
      }
      while (v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 24 * v18;
    int64x2_t v20 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *__n128 result = v20;
      __n128 result = (_OWORD *)((char *)result + 24);
      v19 -= 24;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1CC3752A4(uint64_t *a1, const void *a2, size_t a3, void **a4)
{
  int v7 = *a4;
  *a4 = 0;
  (*(void (**)(void *))(*v7 + 24))(v7);
  uint64_t v8 = v7[1];
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v20, "After ");
  if (a3 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a3 >= 0x17)
  {
    uint64_t v10 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v10 = a3 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_p = operator new(v10 + 1);
    std::string::size_type v18 = a3;
    int64_t v19 = v11 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_8;
  }
  HIBYTE(v19) = a3;
  p_p = &__p;
  if (a3) {
LABEL_8:
  }
    memmove(p_p, a2, a3);
  *((unsigned char *)p_p + a3) = 0;
  if (v19 >= 0) {
    int64x2_t v12 = (const std::string::value_type *)&__p;
  }
  else {
    int64x2_t v12 = (const std::string::value_type *)__p;
  }
  if (v19 >= 0) {
    std::string::size_type v13 = HIBYTE(v19) & 0x7F;
  }
  else {
    std::string::size_type v13 = v18;
  }
  uint64_t v14 = std::string::append(&v20, v12, v13);
  std::string::size_type v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v21 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  llvm::verifyMachineFunction(*a1, (uint64_t *)v21, v8);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  return (*(uint64_t (**)(void *))(*v7 + 8))(v7);
}

void sub_1CC375454(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t llvm::MachinePipeliner::runOnMachineFunction(llvm::MachinePipeliner *this, llvm::MachineFunction *a2)
{
  if ((llvm::FunctionPass::skipFunction(this, *(llvm::LLVMContextImpl *****)a2) & 1) == 0)
  {
    if (byte_1EBCCF430)
    {
      uint64_t v4 = *(void *)(*(void *)a2 + 112);
      if ((!v4 || (*(unsigned char *)(v4 + 17) & 4) == 0 || word_1EBCCF47C)
        && (*(unsigned int (**)(void))(**((void **)a2 + 2) + 248))(*((void *)a2 + 2))
        && (!(*(unsigned int (**)(void))(**((void **)a2 + 2) + 344))(*((void *)a2 + 2))
         || (*(uint64_t (**)(void))(**((void **)a2 + 2) + 192))(*((void *)a2 + 2))
         && *(void *)((*(uint64_t (**)(void))(**((void **)a2 + 2) + 192))(*((void *)a2 + 2)) + 96)))
      {
        *((void *)this + 31) = a2;
        unint64_t v5 = (uint64_t *)*((void *)this + 1);
        uint64_t v6 = *v5;
        uint64_t v7 = v5[1];
        if (v6 == v7)
        {
LABEL_13:
          uint64_t v8 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v6 != &llvm::MachineLoopInfo::ID)
          {
            v6 += 16;
            if (v6 == v7) {
              goto LABEL_13;
            }
          }
          uint64_t v8 = *(void *)(v6 + 8);
        }
        *((void *)this + 33) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::MachineLoopInfo::ID);
        unsigned int v9 = (uint64_t *)*((void *)this + 1);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        if (v10 == v11)
        {
LABEL_18:
          uint64_t v12 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v10 != &llvm::MachineDominatorTree::ID)
          {
            v10 += 16;
            if (v10 == v11) {
              goto LABEL_18;
            }
          }
          uint64_t v12 = *(void *)(v10 + 8);
        }
        *((void *)this + 34) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::MachineDominatorTree::ID);
        std::string::size_type v13 = (uint64_t *)*((void *)this + 1);
        uint64_t v14 = *v13;
        uint64_t v15 = v13[1];
        if (v14 == v15)
        {
LABEL_23:
          uint64_t v16 = 0;
        }
        else
        {
          while (*(_UNKNOWN **)v14 != &llvm::MachineOptimizationRemarkEmitterPass::ID)
          {
            v14 += 16;
            if (v14 == v15) {
              goto LABEL_23;
            }
          }
          uint64_t v16 = *(void *)(v14 + 8);
        }
        *((void *)this + 32) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::MachineOptimizationRemarkEmitterPass::ID)+ 248);
        *((void *)this + 36) = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 31) + 16) + 104))(*(void *)(*((void *)this + 31) + 16));
        llvm::RegisterClassInfo::runOnMachineFunction((llvm::MachinePipeliner *)((char *)this + 296), *((const llvm::MachineFunction **)this + 31));
        uint64_t v17 = *((void *)this + 33);
        std::string::size_type v18 = *(llvm::MachineLoop ***)(v17 + 272);
        int64_t v19 = *(llvm::MachineLoop ***)(v17 + 280);
        while (v18 != v19)
        {
          std::string v20 = *v18++;
          llvm::MachinePipeliner::scheduleLoop(this, v20);
        }
      }
    }
  }
  return 0;
}

uint64_t llvm::MachinePipeliner::scheduleLoop(llvm::MachinePipeliner *this, llvm::MachineLoop *a2)
{
  uint64_t v4 = (llvm::MachineLoop **)*((void *)a2 + 1);
  unint64_t v5 = (llvm::MachineLoop **)*((void *)a2 + 2);
  if (v4 == v5)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      uint64_t v7 = *v4++;
      v6 |= llvm::MachinePipeliner::scheduleLoop(this, v7);
    }
    while (v4 != v5);
  }
  llvm::MachinePipeliner::setPragmaPipelineOptions(this, a2);
  if (llvm::MachinePipeliner::canPipelineLoop(this, a2))
  {
    llvm::MachinePipeliner::swingModuloScheduler(this, a2);
  }
  uint64_t v8 = ******((void ******)this + 32);
  if (*(void *)(v8 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v8 + 72) + 48))(*(void *)(v8 + 72)))
  {
    llvm::MachineLoop::getStartLoc(a2);
  }
  return v6 & 1;
}

uint64_t *llvm::MachinePipeliner::setPragmaPipelineOptions(llvm::MachinePipeliner *this, llvm::MachineLoop *a2)
{
  *((unsigned char *)this + 536) = 0;
  *((_DWORD *)this + 135) = 0;
  __n128 result = llvm::MachineLoop::getTopBlock(a2);
  if (!result) {
    return result;
  }
  uint64_t v4 = result[2];
  if (!v4) {
    return result;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  if (v5 == v4 + 40) {
    return result;
  }
  uint64_t v6 = v5 - 24;
  if (!v5) {
    uint64_t v6 = 0;
  }
  if (*(unsigned __int8 *)(v6 + 16) - 29 > 0xA || (*(unsigned char *)(v6 + 23) & 0x20) == 0) {
    return result;
  }
  uint64_t v7 = ***(void ***)v6;
  uint64_t v37 = v6;
  int v8 = *(_DWORD *)(v7 + 2496);
  if (v8)
  {
    uint64_t v9 = *(void *)(v7 + 2480);
    int v10 = v8 - 1;
    unsigned int v11 = v10 & ((v6 >> 4) ^ (v6 >> 9));
    __n128 result = (uint64_t *)(v9 + 40 * v11);
    uint64_t v12 = *result;
    if (*result == v6) {
      goto LABEL_18;
    }
    std::string::size_type v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        std::string::size_type v13 = result;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      __n128 result = (uint64_t *)(v9 + 40 * v11);
      uint64_t v12 = *result;
      if (*result == v6) {
        goto LABEL_18;
      }
    }
    if (v13) {
      uint64_t v35 = v13;
    }
    else {
      uint64_t v35 = result;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  __n128 result = sub_1CC609054(v7 + 2480, (uint64_t)&v37, &v37, v35);
  uint64_t v36 = v37;
  result[3] = 0;
  result[4] = 0;
  *__n128 result = v36;
  result[1] = (uint64_t)(result + 3);
  result[2] = 0x100000000;
LABEL_18:
  uint64_t v17 = *((unsigned int *)result + 4);
  if (v17)
  {
    std::string::size_type v18 = (void *)(result[1] + 8);
    uint64_t v19 = 16 * v17;
    while (*((_DWORD *)v18 - 2) != 18)
    {
      v18 += 2;
      v19 -= 16;
      if (!v19) {
        return result;
      }
    }
    uint64_t v20 = *v18;
    if (*v18)
    {
      unsigned int v23 = *(_DWORD *)(v20 + 8);
      uint64_t v22 = v20 + 8;
      uint64_t v21 = v23;
      if (v23 >= 2)
      {
        uint64_t v24 = -8 * v21;
        do
        {
          unsigned int v25 = *(unsigned __int8 **)(v22 + v24);
          if (*v25 - 4 <= 0x1E)
          {
            uint64_t v26 = &v25[-8 * *((unsigned int *)v25 + 2)];
            if (!**(unsigned char **)v26)
            {
              uint64_t v27 = *(uint64_t **)(*(void *)v26 + 8);
              uint64_t v29 = *v27;
              __n128 result = v27 + 3;
              uint64_t v28 = v29;
              if (v29 == 26)
              {
                if (*result == 0x6F6F6C2E6D766C6CLL
                  && result[1] == 0x696C657069702E70
                  && result[2] == 0x62617369642E656ELL
                  && *((_WORD *)result + 12) == 25964)
                {
                  *((unsigned char *)this + 536) = 1;
                }
              }
              else if (v28 == 37)
              {
                __n128 result = (uint64_t *)memcmp(result, "llvm.loop.pipeline.initiationinterval", 0x25uLL);
                if (!result)
                {
                  uint64_t v30 = *(void *)(*((void *)v26 + 1) + 128);
                  unint64_t v31 = (void *)(v30 + 24);
                  if (*(_DWORD *)(v30 + 32) >= 0x41u) {
                    unint64_t v31 = (void *)*v31;
                  }
                  *((_DWORD *)this + 135) = *v31;
                }
              }
            }
          }
          v24 += 8;
        }
        while (v24 != -8);
      }
    }
  }
  return result;
}

uint64_t llvm::MachinePipeliner::canPipelineLoop(llvm::MachinePipeliner *this, llvm::MachineLoop *a2)
{
  v13[46] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)*((void *)a2 + 4);
  if (((*((void *)a2 + 5) - (void)v4) & 0x7FFFFFFF8) == 8)
  {
    if (*((unsigned char *)this + 536))
    {
      uint64_t v5 = ******((void ******)this + 32);
      if (*(void *)(v5 + 128)
        || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(v5 + 72) + 48))(*(void *)(v5 + 72)),
            result))
      {
        llvm::MachineLoop::getStartLoc(a2);
      }
    }
    else
    {
      *((_DWORD *)this + 142) = 0;
      *((_OWORD *)this + 34) = 0u;
      if ((*(unsigned int (**)(void, void, char *, char *, char *, void))(**((void **)this + 36)
                                                                                          + 248))(*((void *)this + 36), *v4, (char *)this + 544, (char *)this + 552, (char *)this + 560, 0))
      {
        uint64_t v8 = ******((void ******)this + 32);
        if (*(void *)(v8 + 128)
          || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(v8 + 72) + 48))(*(void *)(v8 + 72)),
              result))
        {
          llvm::MachineLoop::getStartLoc(a2);
        }
      }
      else
      {
        *((void *)this + 89) = 0;
        *((void *)this + 88) = 0;
        uint64_t v9 = *((void *)this + 36);
        TopBlock = llvm::MachineLoop::getTopBlock(a2);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t *))(*(void *)v9 + 280))(v13, v9, TopBlock);
        uint64_t v11 = v13[0];
        v13[0] = 0;
        if (v11)
        {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
          llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
        }
        uint64_t v12 = ******((void ******)this + 32);
        if (*(void *)(v12 + 128)
          || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(v12 + 72) + 48))(*(void *)(v12 + 72)),
              result))
        {
          llvm::MachineLoop::getStartLoc(a2);
        }
      }
    }
  }
  else
  {
    uint64_t v7 = ******((void ******)this + 32);
    if (*(void *)(v7 + 128)
      || (uint64_t result = (*(uint64_t (**)(void))(**(void **)(v7 + 72) + 48))(*(void *)(v7 + 72)),
          result))
    {
      llvm::MachineLoop::getStartLoc(a2);
    }
  }
  return result;
}

void llvm::SwingSchedulerDAG::schedule(llvm::SwingSchedulerDAG *this)
{
  uint64_t v2 = *(uint64_t **)(*((void *)this + 329) + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_4:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::AAResultsWrapperPass::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_4;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  uint64_t v6 = *(llvm::AAResults **)((*(uint64_t (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::AAResultsWrapperPass::ID)+ 32);
  llvm::ScheduleDAGInstrs::buildSchedGraph(this, v6, 0, 0, 0, 0);
  llvm::SwingSchedulerDAG::addLoopCarriedDependences(this, v6);
  llvm::SwingSchedulerDAG::updatePhiDependences(this);
  llvm::ScheduleDAGTopologicalSort::InitDAGTopologicalSorting((uint64_t **)this + 336);
  llvm::SwingSchedulerDAG::changeDependences(this);
  uint64_t v7 = (uint64_t *)*((void *)this + 403);
  uint64_t v8 = (uint64_t *)*((void *)this + 404);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, llvm::SwingSchedulerDAG *))(*(void *)v9 + 24))(v9, this);
  }
  llvm::SwingSchedulerDAG::findCircuits((uint64_t)this);
}

uint64_t llvm::SwingSchedulerDAG::setMII(uint64_t this, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = *(_DWORD *)(this + 2680);
  if (a2 <= a3) {
    unsigned int v4 = a3;
  }
  else {
    unsigned int v4 = a2;
  }
  if (!v3) {
    unsigned int v3 = v4;
  }
  *(_DWORD *)(this + 2640) = v3;
  return this;
}

_DWORD *llvm::SwingSchedulerDAG::setMAX_II(_DWORD *this)
{
  int v1 = this[670];
  if (!v1) {
    int v1 = this[660] + 10;
  }
  this[661] = v1;
  return this;
}

void llvm::SwingSchedulerDAG::updatePhiDependences(llvm::SwingSchedulerDAG *this)
{
  v61[8] = *MEMORY[0x1E4F143B8];
  uint64_t v58 = v61;
  unsigned int v60 = 4;
  uint64_t v1 = *((void *)this + 6);
  uint64_t v53 = *((void *)this + 7);
  if (v1 != v53)
  {
    uint64_t v52 = *(void *)(*((void *)this + 4) + 16);
    uint64_t v54 = (uint64_t *)((char *)this + 952);
    while (1)
    {
      unsigned int v59 = 0;
      uint64_t v3 = *(void *)(v1 + 8);
      uint64_t v4 = *(unsigned int *)(v3 + 40);
      if (v4) {
        break;
      }
      int v6 = 0;
      LODWORD(v9) = 0;
LABEL_80:
      if (byte_1EBCCF730)
      {
        uint64_t v33 = *(unsigned int *)(v1 + 40);
        if (v33)
        {
          uint64_t v34 = *(uint64_t **)(v1 + 32);
          uint64_t v35 = &v34[2 * v33];
          do
          {
            uint64_t v36 = *v34;
            uint64_t v37 = *(void *)((*v34 & 0xFFFFFFFFFFFFFFF8) + 8);
            int v38 = **(unsigned __int16 **)(v37 + 16);
            if ((v38 == 69 || v38 == 0) && (~(_BYTE)v36 & 6) == 0)
            {
              int v41 = **(unsigned __int16 **)(*(void *)(v1 + 8) + 16);
              if (v41 != 69 && v41 != 0) {
                goto LABEL_105;
              }
              uint64_t v43 = *(void *)(v37 + 32);
              if (*(_DWORD *)(v43 + 4) != v9)
              {
                int v44 = *(_DWORD *)(v37 + 40);
                if (v44 == 1)
                {
LABEL_102:
                  int v47 = 0;
                }
                else
                {
                  uint64_t v45 = *(void *)(v37 + 24);
                  unsigned int v46 = 1;
                  while (*(void *)(v43 + 32 * (v46 + 1) + 16) != v45)
                  {
                    v46 += 2;
                    if (v44 == v46) {
                      goto LABEL_102;
                    }
                  }
                  int v47 = *(_DWORD *)(v43 + 32 * v46 + 4);
                }
                if (v47 != v6)
                {
LABEL_105:
                  uint64_t v48 = v34[1];
                  if (v59 >= (unint64_t)v60) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unsigned int v49 = (char *)v58 + 16 * v59;
                  *unsigned int v49 = v36;
                  v49[1] = v48;
                  ++v59;
                }
              }
            }
            v34 += 2;
          }
          while (v34 != v35);
        }
        if (v59)
        {
          uint64_t v50 = 0;
          uint64_t v51 = 16 * v59;
          do
          {
            llvm::SUnit::removePred(v1, (uint64_t)v58 + v50);
            v50 += 16;
          }
          while (v51 != v50);
        }
      }
      v1 += 272;
      if (v1 == v53)
      {
        if (v58 != v61) {
          free(v58);
        }
        return;
      }
    }
    uint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = *(_DWORD **)(v3 + 32);
    uint64_t v8 = &v7[8 * v4];
    while (1)
    {
      if (!*v7)
      {
        uint64_t v9 = v7[1];
        uint64_t v10 = *((void *)this + 5);
        if ((*v7 & 0x1000000) != 0)
        {
          if ((v9 & 0x80000000) != 0) {
            uint64_t v12 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v12 = (uint64_t *)(*(void *)(v10 + 272) + 8 * v9);
          }
          uint64_t v17 = *v12;
          if (*v12)
          {
            while ((*(unsigned char *)(v17 + 3) & 1) != 0)
            {
              uint64_t v17 = *(void *)(v17 + 24);
              if (!v17) {
                goto LABEL_52;
              }
            }
            uint64_t v18 = *(void *)(v17 + 8);
LABEL_29:
            unint64_t v55 = v18;
            uint64_t v57 = 0;
            if (sub_1CD3C8538(v54, &v55, &v57))
            {
              uint64_t v19 = *(void *)(v57 + 8);
              if (v19)
              {
                int v20 = **(unsigned __int16 **)(v18 + 16);
                if (v20 == 69 || v20 == 0)
                {
                  if (**(_WORD **)(v3 + 16) && **(_WORD **)(v3 + 16) != 69)
                  {
                    unint64_t v55 = v19 & 0xFFFFFFFFFFFFFFF9 | 2;
                    uint64_t v56 = v9 | 0x100000000;
                    llvm::SUnit::addPred(v1, (uint64_t *)&v55, 1);
                  }
                  else
                  {
                    int v6 = v9;
                    if (*(_DWORD *)(v19 + 192) < *(_DWORD *)(v1 + 192))
                    {
                      uint64_t v22 = *(unsigned int *)(v1 + 40);
                      if (v22)
                      {
                        unsigned int v23 = *(void **)(v1 + 32);
                        uint64_t v24 = 16 * v22;
                        while (v19 != (*v23 & 0xFFFFFFFFFFFFFFF8))
                        {
                          v23 += 2;
                          v24 -= 16;
                          if (!v24) {
                            goto LABEL_43;
                          }
                        }
                      }
                      else
                      {
LABEL_43:
                        unint64_t v55 = v19 | 6;
                        uint64_t v56 = 0;
                        llvm::SUnit::addPred(v1, (uint64_t *)&v55, 1);
                      }
                      int v6 = v9;
                    }
                  }
                }
              }
            }
            uint64_t v25 = *(void *)(v17 + 8);
            while (1)
            {
              uint64_t v17 = *(void *)(v17 + 24);
              if (!v17) {
                break;
              }
              if ((*(unsigned char *)(v17 + 3) & 1) == 0)
              {
                uint64_t v18 = *(void *)(v17 + 8);
                if (v18 != v25) {
                  goto LABEL_29;
                }
              }
            }
          }
        }
        else
        {
          if ((v9 & 0x80000000) != 0) {
            uint64_t v11 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v11 = (uint64_t *)(*(void *)(v10 + 272) + 8 * v9);
          }
          uint64_t v13 = *v11;
          if (v13)
          {
            if (*(unsigned char *)(v13 + 3) & 1) != 0 || (uint64_t v32 = *(void *)(v13 + 24)) != 0 && (*(unsigned char *)(v32 + 3))
            {
              if ((v9 & 0x80000000) != 0) {
                int v14 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
              }
              else {
                int v14 = (uint64_t *)(*(void *)(v10 + 272) + 8 * v9);
              }
              uint64_t v15 = *v14;
              if (v15)
              {
                if ((*(unsigned char *)(v15 + 3) & 1) == 0)
                {
                  uint64_t v15 = *(void *)(v15 + 24);
                  if (v15)
                  {
                    if ((*(unsigned char *)(v15 + 3) & 1) == 0) {
                      uint64_t v15 = 0;
                    }
                  }
                }
              }
              uint64_t v16 = *(void *)(v15 + 8);
              while (1)
              {
                uint64_t v15 = *(void *)(v15 + 24);
                if (!v15 || (*(unsigned char *)(v15 + 3) & 1) == 0) {
                  break;
                }
                if (*(void *)(v15 + 8) != v16) {
                  goto LABEL_52;
                }
              }
              if (v16)
              {
                unint64_t v55 = v16;
                uint64_t v57 = 0;
                if (sub_1CD3C8538(v54, &v55, &v57))
                {
                  uint64_t v26 = *(void *)(v57 + 8);
                  if (v26)
                  {
                    int v27 = **(unsigned __int16 **)(v16 + 16);
                    if (v27 == 69 || v27 == 0)
                    {
                      if (!**(_WORD **)(v3 + 16) || **(_WORD **)(v3 + 16) == 69)
                      {
                        if (*(_DWORD *)(v26 + 192) < *(_DWORD *)(v1 + 192))
                        {
                          uint64_t v29 = *(unsigned int *)(v1 + 40);
                          if (v29)
                          {
                            uint64_t v30 = *(void **)(v1 + 32);
                            uint64_t v31 = 16 * v29;
                            while (v26 != (*v30 & 0xFFFFFFFFFFFFFFF8))
                            {
                              v30 += 2;
                              v31 -= 16;
                              if (!v31) {
                                goto LABEL_69;
                              }
                            }
                          }
                          else
                          {
LABEL_69:
                            unint64_t v55 = v26 | 6;
                            uint64_t v56 = 0;
                            llvm::SUnit::addPred(v1, (uint64_t *)&v55, 1);
                          }
                        }
                        goto LABEL_53;
                      }
                      unint64_t v55 = v26 & 0xFFFFFFFFFFFFFFF9;
                      uint64_t v56 = v9;
                      (*(void (**)(uint64_t))(*(void *)v52 + 304))(v52);
                      llvm::SUnit::addPred(v1, (uint64_t *)&v55, 1);
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_52:
      uint64_t v9 = v5;
LABEL_53:
      v7 += 8;
      uint64_t v5 = v9;
      if (v7 == v8) {
        goto LABEL_80;
      }
    }
  }
}

uint64_t llvm::SwingSchedulerDAG::postprocessDAG(uint64_t this)
{
  uint64_t v1 = *(uint64_t **)(this + 3224);
  uint64_t v2 = *(uint64_t **)(this + 3232);
  if (v1 != v2)
  {
    uint64_t v3 = this;
    do
    {
      uint64_t v4 = *v1++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v3);
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t llvm::SwingSchedulerDAG::calculateRecMII(uint64_t a1, _DWORD *a2)
{
  unsigned int v2 = a2[2];
  if (!v2) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = 88 * v2;
  uint64_t v5 = (unsigned int *)(*(void *)a2 + 52);
  do
  {
    if (*(void *)(v5 - 7) != *(void *)(v5 - 5))
    {
      unsigned int v6 = v5[7];
      *uint64_t v5 = v6;
      if (v6 <= result) {
        uint64_t result = result;
      }
      else {
        uint64_t result = v6;
      }
    }
    v5 += 22;
    v4 -= 88;
  }
  while (v4);
  return result;
}

void llvm::SwingSchedulerDAG::registerPressureFilter(uint64_t *a1, uint64_t a2)
{
  v104[16] = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *(_DWORD *)(a2 + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)a2;
    uint64_t v4 = *(void *)a2 + 88 * v2;
    uint64_t v61 = v4;
    while (((v3[4] - v3[3]) >> 3) < 3)
    {
LABEL_121:
      v3 += 11;
      if (v3 == (void *)v4) {
        return;
      }
    }
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    uint64_t v90 = v92;
    uint64_t v91 = 0x800000000;
    uint64_t v93 = v95;
    uint64_t v94 = 0x800000000;
    v95[16] = 0;
    v95[17] = 0;
    memset(v67, 0, 24);
    v67[4] = 0;
    v67[5] = 0;
    int v68 = (void **)&v87;
    __int16 v69 = 1;
    char v70 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    unsigned int v73 = v75;
    uint64_t v74 = 0x800000000;
    uint64_t v76 = 0;
    uint64_t v79 = v81;
    uint64_t v80 = 0x800000000;
    long long v82 = 0;
    int v77 = 0;
    int v83 = 0;
    uint64_t v84 = 0;
    long long v85 = 0;
    uint64_t v86 = 0;
    llvm::RegPressureTracker::init((uint64_t)v67, a1[4], a1[334], a1[333], a1[115], a1[115] + 48, 0, 1);
    uint64_t v5 = a1[4];
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v5 + 16) + 176))(*(void *)(v5 + 16));
    uint64_t v7 = *(void **)(v5 + 40);
    int v102 = (unsigned int *)v104;
    uint64_t v103 = 0x800000000;
    uint64_t v96 = v98;
    uint64_t v97 = 0x400000000;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    long long v99 = &v100;
    uint64_t v8 = v3[3];
    unint64_t v63 = v3;
    uint64_t v64 = v3[4];
    if (v8 != v64)
    {
      uint64_t v9 = v6 ? (void *)(v6 + 8) : 0;
      do
      {
        uint64_t v10 = *(void *)(*(void *)v8 + 8);
        if (**(_WORD **)(v10 + 16))
        {
          if (**(_WORD **)(v10 + 16) != 69)
          {
            uint64_t v11 = *(unsigned int *)(v10 + 40);
            if (v11)
            {
              uint64_t v12 = *(_DWORD **)(v10 + 32);
              uint64_t v13 = &v12[8 * v11];
              do
              {
                if ((*v12 & 0x10000FF) == 0)
                {
                  unsigned int v14 = v12[1];
                  if ((v14 & 0x80000000) != 0)
                  {
                    unsigned int v66 = v12[1];
                    sub_1CB918828((uint64_t)&v96, &v66);
                  }
                  else if (sub_1CB946A80(v7, v12[1]))
                  {
                    uint64_t v15 = (unsigned __int16 *)(v9[6]
                                             + (((unint64_t)*(unsigned int *)(*v9 + 24 * v14 + 16) >> 3) & 0x1FFFFFFE));
                    int v17 = *v15;
                    uint64_t v16 = v15 + 1;
                    int v18 = v17 + (*(_DWORD *)(*v9 + 24 * v14 + 16) & 0xF) * v14;
                    do
                    {
                      unsigned int v66 = (unsigned __int16)v18;
                      sub_1CB918828((uint64_t)&v96, &v66);
                      int v19 = *v16++;
                      v18 += v19;
                    }
                    while (v19);
                  }
                }
                v12 += 8;
              }
              while (v12 != v13);
            }
          }
        }
        v8 += 8;
      }
      while (v8 != v64);
      uint64_t v20 = v63[3];
      uint64_t v65 = v63[4];
      if (v20 != v65)
      {
        while (1)
        {
          uint64_t v21 = *(void *)(*(void *)v20 + 8);
          uint64_t v22 = *(unsigned int *)(v21 + 40);
          if (v22) {
            break;
          }
LABEL_68:
          v20 += 8;
          if (v20 == v65) {
            goto LABEL_69;
          }
        }
        unsigned int v23 = *(_DWORD **)(v21 + 32);
        uint64_t v24 = &v23[8 * v22];
        while (2)
        {
          if ((*v23 & 0x10000FF) == 0x1000000 && (*v23 & 0x5000000) != 83886080)
          {
            uint64_t v26 = v23[1];
            if ((v26 & 0x80000000) != 0)
            {
              if (v101)
              {
                for (uint64_t i = v100; i; uint64_t i = (void *)*i)
                {
                  unsigned int v38 = *((_DWORD *)i + 7);
                  if (v26 >= v38)
                  {
                    if (v38 >= v26) {
                      goto LABEL_65;
                    }
                    ++i;
                  }
                }
              }
              else if (v97)
              {
                uint64_t v39 = v96;
                uint64_t v40 = 4 * v97;
                while (*v39 != v26)
                {
                  ++v39;
                  v40 -= 4;
                  if (!v40) {
                    goto LABEL_63;
                  }
                }
                if (v40) {
                  goto LABEL_65;
                }
              }
LABEL_63:
              if (v103 >= (unint64_t)HIDWORD(v103)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v41 = &v102[4 * v103];
              *(void *)int v41 = v26;
              *((void *)v41 + 1) = 0;
              LODWORD(v103) = v103 + 1;
              goto LABEL_65;
            }
            if (sub_1CB946A80(v7, v23[1]))
            {
              unint64_t v27 = *(unsigned int *)(*v9 + 24 * v26 + 16);
              uint64_t v28 = (_WORD *)(v9[6] + ((v27 >> 3) & 0x1FFFFFFE));
              unsigned __int16 v29 = *v28 + (v27 & 0xF) * v26;
              do
              {
                uint64_t v30 = v29;
                if (v101)
                {
                  for (j = v100; j; j = (void *)*j)
                  {
                    unsigned int v32 = *((_DWORD *)j + 7);
                    if (v32 <= v30)
                    {
                      if (v32 >= v30) {
                        goto LABEL_47;
                      }
                      ++j;
                    }
                  }
                }
                else if (v97)
                {
                  uint64_t v33 = v96;
                  uint64_t v34 = 4 * v97;
                  while (*v33 != v30)
                  {
                    ++v33;
                    v34 -= 4;
                    if (!v34) {
                      goto LABEL_45;
                    }
                  }
                  if (v34) {
                    goto LABEL_47;
                  }
                }
LABEL_45:
                if (v103 >= (unint64_t)HIDWORD(v103)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                uint64_t v35 = &v102[4 * v103];
                *(void *)uint64_t v35 = v30;
                *((void *)v35 + 1) = 0;
                LODWORD(v103) = v103 + 1;
LABEL_47:
                int v36 = (unsigned __int16)v28[1];
                ++v28;
                unsigned __int16 v29 = v36 + v30;
              }
              while (v36);
            }
          }
LABEL_65:
          v23 += 8;
          if (v23 == v24) {
            goto LABEL_68;
          }
          continue;
        }
      }
    }
LABEL_69:
    llvm::RegPressureTracker::addLiveRegs((uint64_t)v67, v102, v103);
    sub_1CB833A08((uint64_t)&v99, v100);
    if (v96 != v98) {
      free(v96);
    }
    if (v102 != (unsigned int *)v104) {
      free(v102);
    }
    if ((_BYTE)v69)
    {
      unint64_t CurrSlot = llvm::RegPressureTracker::getCurrSlot((llvm::RegPressureTracker *)v67);
      uint64_t v43 = v68;
      v68[40] = (void *)CurrSlot;
    }
    else
    {
      uint64_t v43 = v68;
      v68[40] = (void *)v71;
    }
    if (*((unsigned int *)v43 + 45) < (unint64_t)v74) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v74)
    {
      uint64_t v44 = 16 * v74;
      uint64_t v45 = (char *)v73 + 8;
      do
      {
        uint64_t v46 = *v45;
        if (*v45)
        {
          unsigned int v47 = *((_DWORD *)v45 - 2);
          if (v47 >= v78) {
            uint64_t v48 = (v47 - v78) | 0x80000000;
          }
          else {
            uint64_t v48 = v47;
          }
          unint64_t v49 = *((unsigned int *)v43 + 44);
          if (v49 >= *((unsigned int *)v43 + 45)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v50 = (char *)v43[21] + 16 * v49;
          *uint64_t v50 = v48;
          v50[1] = v46;
          ++*((_DWORD *)v43 + 44);
        }
        v45 += 2;
        v44 -= 16;
      }
      while (v44);
    }
    uint64_t v3 = v63;
    uint64_t v52 = (unsigned char *)v63[3];
    uint64_t v51 = (unsigned char *)v63[4];
    int64_t v53 = v51 - v52;
    if (v51 == v52)
    {
      uint64_t v54 = 0;
      unint64_t v55 = 0;
    }
    else
    {
      if (v53 < 0) {
        abort();
      }
      uint64_t v54 = (uint64_t *)operator new(v51 - v52);
      memmove(v54, v52, v53);
      unint64_t v55 = &v54[v53 >> 3];
    }
    unint64_t v56 = 126 - 2 * __clz(v55 - v54);
    if (v55 == v54) {
      uint64_t v57 = 0;
    }
    else {
      uint64_t v57 = v56;
    }
    sub_1CC37F920(v54, v55, v57, 1);
    if (v55 == v54)
    {
LABEL_104:
      if (!v54)
      {
LABEL_106:
        if (v84)
        {
          long long v85 = v84;
          operator delete(v84);
        }
        free(v82);
        if (v79 != v81) {
          free(v79);
        }
        free(v76);
        if (v73 != v75) {
          free(v73);
        }
        if (*((void *)&v71 + 1))
        {
          *(void *)&long long v72 = *((void *)&v71 + 1);
          operator delete(*((void **)&v71 + 1));
        }
        if (v93 != v95) {
          free(v93);
        }
        if (v90 != v92) {
          free(v90);
        }
        if (v87)
        {
          uint64_t v88 = v87;
          operator delete(v87);
        }
        uint64_t v4 = v61;
        goto LABEL_121;
      }
    }
    else
    {
      uint64_t v58 = v54;
      while (1)
      {
        uint64_t v59 = *v58;
        uint64_t v60 = *(void *)(*v58 + 8);
        if (!v60 || (*(unsigned char *)v60 & 4) == 0)
        {
          while ((*(_WORD *)(v60 + 44) & 8) != 0)
            uint64_t v60 = *(void *)(v60 + 8);
        }
        *(void *)&long long v71 = *(void *)(v60 + 8);
        LODWORD(v103) = 0;
        int v102 = 0;
        llvm::RegPressureTracker::getMaxUpwardPressureDelta((uint64_t)v67, *(const llvm::MachineInstr **)(v59 + 8), 0, (uint64_t)&v102, 0, 0, (uint64_t)v87, (v88 - v87) >> 2);
        if ((_WORD)v102) {
          break;
        }
        llvm::RegPressureTracker::recede((unint64_t)v67, 0);
        if (++v58 == v55) {
          goto LABEL_104;
        }
      }
      v63[9] = *v58;
      if (!v54) {
        goto LABEL_106;
      }
    }
    operator delete(v54);
    goto LABEL_106;
  }
}

void llvm::SwingSchedulerDAG::computeNodeOrder(uint64_t a1, uint64_t a2)
{
  v99[8] = *MEMORY[0x1E4F143B8];
  uint64_t v92 = 1;
  int64x2_t v93 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v94 = v93;
  int64x2_t v95 = v93;
  int64x2_t v96 = v93;
  int64x2_t v74 = v93;
  uint64_t v97 = v99;
  uint64_t v98 = 0x800000000;
  uint64_t v4 = (void *)(a1 + 3128);
  sub_1CD47558C((_DWORD *)(a1 + 3128));
  *(void *)(a1 + 3160) = *(void *)(a1 + 3152);
  uint64_t v72 = a2;
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (!v5) {
    goto LABEL_155;
  }
  uint64_t v6 = *(void *)a2;
  uint64_t v73 = *(void *)a2 + 88 * v5;
  do
  {
    uint64_t v84 = 1;
    int64x2_t v85 = v74;
    int64x2_t v86 = v74;
    int64x2_t v87 = v74;
    int64x2_t v88 = v74;
    uint64_t v89 = v91;
    uint64_t v90 = 0x800000000;
    if (sub_1CC37B798((uint64_t)v4, (uint64_t)&v84, 0) && sub_1CD53F5D4((uint64_t *)v89, v90, v6))
    {
      sub_1CD53F660(&v92, (uint64_t *)v89, (uint64_t *)v89 + v90);
LABEL_94:
      int v10 = 0;
      goto LABEL_36;
    }
    if (sub_1CC37B1BC((uint64_t)v4, (uint64_t)&v84, 0) && sub_1CD53F5D4((uint64_t *)v89, v90, v6))
    {
      sub_1CD53F660(&v92, (uint64_t *)v89, (uint64_t *)v89 + v90);
      goto LABEL_35;
    }
    sub_1CD54329C(&v92);
    LODWORD(v98) = 0;
    if (!v90) {
      goto LABEL_16;
    }
    uint64_t v7 = 0;
    uint64_t v8 = 8 * v90;
    do
    {
      uint64_t v75 = *(llvm::SUnit **)((char *)v89 + v7);
      if (sub_1CD4C9788(*(void *)v6, *(_DWORD *)(v6 + 16), (uint64_t)v75, &v76)) {
        sub_1CD53F714((uint64_t)&v92, (uint64_t *)&v75);
      }
      v7 += 8;
    }
    while (v8 != v7);
    uint64_t v9 = v98;
    if (!v98)
    {
LABEL_16:
      if (*(_DWORD *)(v72 + 8) == 1)
      {
        uint64_t v12 = *(uint64_t **)(v6 + 24);
        uint64_t v11 = *(uint64_t **)(v6 + 32);
        while (v12 != v11)
        {
          if (!*(_DWORD *)(*v12 + 120)) {
            sub_1CD53F714((uint64_t)&v92, v12);
          }
          ++v12;
        }
      }
      else
      {
        unint64_t v76 = 0;
        uint64_t v13 = *(unint64_t **)(v6 + 24);
        unsigned int v14 = *(unint64_t **)(v6 + 32);
        if (v13 != v14)
        {
          unint64_t v15 = 0;
          unint64_t v16 = 0;
          do
          {
            if (!v16
              || (uint64_t v17 = *(unsigned int *)(*v13 + 192),
                  uint64_t v18 = *(void *)(a1 + 3104),
                  int v19 = *(_DWORD *)(v18 + 16 * v17),
                  uint64_t v20 = *(unsigned int *)(v16 + 192),
                  int v21 = *(_DWORD *)(v18 + 16 * v20),
                  v19 > v21)
              || (v17 > v20 ? (BOOL v22 = v19 == v21) : (BOOL v22 = 0), v22))
            {
              unint64_t v15 = *v13;
              unint64_t v16 = *v13;
            }
            ++v13;
          }
          while (v13 != v14);
          unint64_t v76 = v15;
        }
        sub_1CD53F714((uint64_t)&v92, (uint64_t *)&v76);
      }
      goto LABEL_94;
    }
    int v10 = 1;
    do
    {
      if (v10 == 1)
      {
        do
        {
          unsigned int v23 = 0;
          uint64_t v75 = 0;
          uint64_t v24 = (llvm::SUnit **)v97;
          uint64_t v25 = 8 * v9;
          do
          {
            uint64_t v26 = *v24;
            if (!v23) {
              goto LABEL_45;
            }
            if ((*((unsigned char *)v26 + 236) & 2) == 0) {
              llvm::SUnit::ComputeHeight(*v24);
            }
            unsigned int v27 = *((_DWORD *)v26 + 61);
            if ((*((unsigned char *)v23 + 236) & 2) == 0) {
              llvm::SUnit::ComputeHeight(v23);
            }
            if (v27 > *((_DWORD *)v23 + 61)) {
              goto LABEL_45;
            }
            if ((*((unsigned char *)v26 + 236) & 2) == 0) {
              llvm::SUnit::ComputeHeight(v26);
            }
            int v28 = *((_DWORD *)v26 + 61);
            if ((*((unsigned char *)v23 + 236) & 2) == 0) {
              llvm::SUnit::ComputeHeight(v23);
            }
            if (v28 == *((_DWORD *)v23 + 61)
              && *(_DWORD *)(*(void *)(a1 + 3104) + 16 * *((unsigned int *)v26 + 48) + 12) > *(_DWORD *)(*(void *)(a1 + 3104) + 16 * *((unsigned int *)v23 + 48) + 12))
            {
              goto LABEL_45;
            }
            if ((*((unsigned char *)v26 + 236) & 2) == 0) {
              llvm::SUnit::ComputeHeight(v26);
            }
            int v29 = *((_DWORD *)v26 + 61);
            if ((*((unsigned char *)v23 + 236) & 2) == 0) {
              llvm::SUnit::ComputeHeight(v23);
            }
            if (v29 == *((_DWORD *)v23 + 61))
            {
              uint64_t v30 = *(void *)(a1 + 3104);
              uint64_t v31 = (_DWORD *)(v30 + 16 * *((unsigned int *)v26 + 48));
              unsigned int v32 = (_DWORD *)(v30 + 16 * *((unsigned int *)v23 + 48));
              if (v31[3] == v32[3] && v31[1] - *v31 < v32[1] - *v32)
              {
LABEL_45:
                uint64_t v75 = v26;
                unsigned int v23 = v26;
              }
            }
            ++v24;
            v25 -= 8;
          }
          while (v25);
          sub_1CC37AF14(v4, (uint64_t *)&v75);
          sub_1CD53F798((uint64_t)&v92, (uint64_t *)&v75);
          uint64_t v33 = *((unsigned int *)v23 + 30);
          if (v33)
          {
            uint64_t v34 = *((void *)v23 + 14);
            uint64_t v35 = 16 * v33;
            do
            {
              if (sub_1CD4C9788(*(void *)v6, *(_DWORD *)(v6 + 16), *(void *)v34 & 0xFFFFFFFFFFFFFFF8, &v76))
              {
                unint64_t v36 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v76 = 0;
                if (sub_1CD4C9788(*(void *)(a1 + 3128), *(_DWORD *)(a1 + 3144), v36, &v76))
                {
                  unint64_t v37 = v76;
                  uint64_t v38 = *(void *)(a1 + 3128);
                  uint64_t v39 = *(unsigned int *)(a1 + 3144);
                }
                else
                {
                  uint64_t v38 = *(void *)(a1 + 3128);
                  uint64_t v39 = *(unsigned int *)(a1 + 3144);
                  unint64_t v37 = v38 + 8 * v39;
                }
                if (v37 == v38 + 8 * v39 && ((~*(void *)v34 & 6) != 0 || *(_DWORD *)(v34 + 8) != 3))
                {
                  unint64_t v76 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
                  sub_1CD53F714((uint64_t)&v92, (uint64_t *)&v76);
                }
              }
              v34 += 16;
              v35 -= 16;
            }
            while (v35);
          }
          uint64_t v41 = *((unsigned int *)v23 + 10);
          if (v41)
          {
            unint64_t v42 = (void *)*((void *)v23 + 4);
            uint64_t v43 = 16 * v41;
            do
            {
              if ((*v42 & 6) == 2
                && sub_1CD4C9788(*(void *)v6, *(_DWORD *)(v6 + 16), *v42 & 0xFFFFFFFFFFFFFFF8, &v76))
              {
                unint64_t v44 = *v42 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v76 = 0;
                if (sub_1CD4C9788(*(void *)(a1 + 3128), *(_DWORD *)(a1 + 3144), v44, &v76))
                {
                  unint64_t v45 = v76;
                  uint64_t v46 = *(void *)(a1 + 3128);
                  uint64_t v47 = *(unsigned int *)(a1 + 3144);
                }
                else
                {
                  uint64_t v46 = *(void *)(a1 + 3128);
                  uint64_t v47 = *(unsigned int *)(a1 + 3144);
                  unint64_t v45 = v46 + 8 * v47;
                }
                if (v45 == v46 + 8 * v47)
                {
                  unint64_t v76 = *v42 & 0xFFFFFFFFFFFFFFF8;
                  sub_1CD53F714((uint64_t)&v92, (uint64_t *)&v76);
                }
              }
              v42 += 2;
              v43 -= 16;
            }
            while (v43);
          }
          uint64_t v9 = v98;
        }
        while (v98);
        unint64_t v76 = 1;
        int64x2_t v77 = v74;
        int64x2_t v78 = v74;
        int64x2_t v79 = v74;
        int64x2_t v80 = v74;
        long long v81 = v83;
        uint64_t v82 = 0x800000000;
        if (sub_1CC37B798((uint64_t)v4, (uint64_t)&v76, v6)) {
          sub_1CD53F660(&v92, (uint64_t *)v81, (uint64_t *)v81 + v82);
        }
        if (v81 != v83) {
          free(v81);
        }
        if ((v76 & 1) == 0) {
          MEMORY[0x1D25D9CD0](v77.i64[0], 8);
        }
        goto LABEL_94;
      }
      while (1)
      {
        uint64_t v48 = 0;
        uint64_t v75 = 0;
        unint64_t v49 = (llvm::SUnit **)v97;
        uint64_t v50 = 8 * v9;
        do
        {
          uint64_t v51 = *v49;
          if (!v48) {
            goto LABEL_102;
          }
          if ((*((unsigned char *)v51 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(*v49);
          }
          unsigned int v52 = *((_DWORD *)v51 + 60);
          if ((*((unsigned char *)v48 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(v48);
          }
          if (v52 > *((_DWORD *)v48 + 60)) {
            goto LABEL_102;
          }
          if ((*((unsigned char *)v51 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(v51);
          }
          int v53 = *((_DWORD *)v51 + 60);
          if ((*((unsigned char *)v48 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(v48);
          }
          if (v53 == *((_DWORD *)v48 + 60)
            && *(_DWORD *)(*(void *)(a1 + 3104) + 16 * *((unsigned int *)v51 + 48) + 8) > *(_DWORD *)(*(void *)(a1 + 3104) + 16 * *((unsigned int *)v48 + 48) + 8))
          {
            goto LABEL_102;
          }
          if ((*((unsigned char *)v51 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(v51);
          }
          int v54 = *((_DWORD *)v51 + 60);
          if ((*((unsigned char *)v48 + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(v48);
          }
          if (v54 == *((_DWORD *)v48 + 60))
          {
            uint64_t v55 = *(void *)(a1 + 3104);
            unint64_t v56 = (_DWORD *)(v55 + 16 * *((unsigned int *)v51 + 48));
            uint64_t v57 = (_DWORD *)(v55 + 16 * *((unsigned int *)v48 + 48));
            if (v56[2] == v57[2] && v56[1] - *v56 < v57[1] - *v57)
            {
LABEL_102:
              uint64_t v75 = v51;
              uint64_t v48 = v51;
            }
          }
          ++v49;
          v50 -= 8;
        }
        while (v50);
        sub_1CC37AF14(v4, (uint64_t *)&v75);
        sub_1CD53F798((uint64_t)&v92, (uint64_t *)&v75);
        if (*(llvm::SUnit **)(v6 + 72) == v48) {
          break;
        }
        uint64_t v58 = *((unsigned int *)v48 + 10);
        if (v58)
        {
          uint64_t v59 = (void *)*((void *)v48 + 4);
          uint64_t v60 = 16 * v58;
          do
          {
            if (sub_1CD4C9788(*(void *)v6, *(_DWORD *)(v6 + 16), *v59 & 0xFFFFFFFFFFFFFFF8, &v76))
            {
              unint64_t v61 = *v59 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v76 = 0;
              if (sub_1CD4C9788(*(void *)(a1 + 3128), *(_DWORD *)(a1 + 3144), v61, &v76))
              {
                unint64_t v62 = v76;
                uint64_t v63 = *(void *)(a1 + 3128);
                uint64_t v64 = *(unsigned int *)(a1 + 3144);
              }
              else
              {
                uint64_t v63 = *(void *)(a1 + 3128);
                uint64_t v64 = *(unsigned int *)(a1 + 3144);
                unint64_t v62 = v63 + 8 * v64;
              }
              if (v62 == v63 + 8 * v64)
              {
                unint64_t v76 = *v59 & 0xFFFFFFFFFFFFFFF8;
                sub_1CD53F714((uint64_t)&v92, (uint64_t *)&v76);
              }
            }
            v59 += 2;
            v60 -= 16;
          }
          while (v60);
        }
        uint64_t v65 = *((unsigned int *)v48 + 30);
        if (v65)
        {
          unsigned int v66 = (void *)*((void *)v48 + 14);
          uint64_t v67 = 16 * v65;
          do
          {
            if ((*v66 & 6) == 2
              && sub_1CD4C9788(*(void *)v6, *(_DWORD *)(v6 + 16), *v66 & 0xFFFFFFFFFFFFFFF8, &v76))
            {
              unint64_t v68 = *v66 & 0xFFFFFFFFFFFFFFF8;
              unint64_t v76 = 0;
              if (sub_1CD4C9788(*(void *)(a1 + 3128), *(_DWORD *)(a1 + 3144), v68, &v76))
              {
                unint64_t v69 = v76;
                uint64_t v70 = *(void *)(a1 + 3128);
                uint64_t v71 = *(unsigned int *)(a1 + 3144);
              }
              else
              {
                uint64_t v70 = *(void *)(a1 + 3128);
                uint64_t v71 = *(unsigned int *)(a1 + 3144);
                unint64_t v69 = v70 + 8 * v71;
              }
              if (v69 == v70 + 8 * v71)
              {
                unint64_t v76 = *v66 & 0xFFFFFFFFFFFFFFF8;
                sub_1CD53F714((uint64_t)&v92, (uint64_t *)&v76);
              }
            }
            v66 += 2;
            v67 -= 16;
          }
          while (v67);
        }
        uint64_t v9 = v98;
        if (!v98) {
          goto LABEL_142;
        }
      }
      sub_1CD54329C(&v92);
      LODWORD(v98) = 0;
      unint64_t v76 = **(void **)(v6 + 24);
      sub_1CD53F714((uint64_t)&v92, (uint64_t *)&v76);
LABEL_142:
      unint64_t v76 = 1;
      int64x2_t v77 = v74;
      int64x2_t v78 = v74;
      int64x2_t v79 = v74;
      int64x2_t v80 = v74;
      long long v81 = v83;
      uint64_t v82 = 0x800000000;
      if (sub_1CC37B1BC((uint64_t)v4, (uint64_t)&v76, v6)) {
        sub_1CD53F660(&v92, (uint64_t *)v81, (uint64_t *)v81 + v82);
      }
      if (v81 != v83) {
        free(v81);
      }
      if ((v76 & 1) == 0) {
        MEMORY[0x1D25D9CD0](v77.i64[0], 8);
      }
LABEL_35:
      int v10 = 1;
LABEL_36:
      uint64_t v9 = v98;
    }
    while (v98);
    if (v89 != v91) {
      free(v89);
    }
    if ((v84 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v85.i64[0], 8);
    }
    v6 += 88;
  }
  while (v6 != v73);
LABEL_155:
  if (v97 != v99) {
    free(v97);
  }
  if ((v92 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v93.i64[0], 8);
  }
}

BOOL llvm::SwingSchedulerDAG::schedulePipeline(llvm::SwingSchedulerDAG *this, void **a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 394) == *((void *)this + 395)) {
    return 0;
  }
  unsigned int v4 = *((_DWORD *)this + 660);
  if (v4 > *((_DWORD *)this + 661)) {
    goto LABEL_61;
  }
  unsigned int v27 = (char *)(a2 + 4);
  do
  {
    sub_1CD5420B0(a2);
    sub_1CD40B1BC(a2[4]);
    a2[4] = 0;
    a2[5] = 0;
    a2[3] = v27;
    a2[6] = 0;
    *((_DWORD *)a2 + 14) = v4;
    unsigned int v5 = (uint64_t *)*((void *)this + 394);
    unsigned int v6 = v4 - 1;
    uint64_t v7 = (uint64_t *)*((void *)this + 395);
    do
    {
      while (1)
      {
        uint64_t v8 = *v5;
        v31[0] = 0x80000000;
        v30[0] = 0x7FFFFFFF;
        LODWORD(v29) = 0x7FFFFFFF;
        LODWORD(v28) = 0x80000000;
        llvm::SMSchedule::computeStart((uint64_t)a2, (llvm::SUnit *)v8, v31, v30, (int *)&v29, (int *)&v28, v4, (llvm::TargetInstrInfo **)this);
        int v9 = v30[0];
        if (v31[0] > v30[0] || (int)v29 < v31[0] || (int)v28 > v30[0]) {
          goto LABEL_51;
        }
        if (v31[0] != 0x80000000 && v30[0] == 0x7FFFFFFF)
        {
          if ((int)(v31[0] + v6) >= (int)v29) {
            int v13 = (int)v29;
          }
          else {
            int v13 = v31[0] + v6;
          }
          unsigned int v14 = (llvm::SMSchedule *)a2;
          unint64_t v15 = (llvm::SUnit *)v8;
          int v9 = v31[0];
LABEL_27:
          if ((llvm::SMSchedule::insert(v14, v15, v9, v13, v4) & 1) == 0) {
            goto LABEL_51;
          }
          goto LABEL_28;
        }
        if (v31[0] == 0x80000000 && v30[0] != 0x7FFFFFFF)
        {
          if ((int)v28 <= (int)(v30[0] - v4 + 1)) {
            int v13 = v30[0] - v4 + 1;
          }
          else {
            int v13 = (int)v28;
          }
          unsigned int v14 = (llvm::SMSchedule *)a2;
          unint64_t v15 = (llvm::SUnit *)v8;
          goto LABEL_27;
        }
        if (v31[0] != 0x80000000 && v30[0] != 0x7FFFFFFF)
        {
          if ((int)(v31[0] + v4) <= v30[0]) {
            int v17 = v31[0] + v4 - 1;
          }
          else {
            int v17 = v30[0];
          }
          if (v17 >= (int)v29) {
            int v18 = (int)v29;
          }
          else {
            int v18 = v17;
          }
          int v19 = **(unsigned __int16 **)(*(void *)(v8 + 8) + 16);
          unsigned int v14 = (llvm::SMSchedule *)a2;
          unint64_t v15 = (llvm::SUnit *)v8;
          if (v19 == 69 || v19 == 0)
          {
            int v9 = v18;
            int v13 = v31[0];
          }
          else
          {
            int v9 = v31[0];
            int v13 = v18;
          }
          goto LABEL_27;
        }
        int v21 = *(_DWORD *)(*((void *)this + 388) + 16 * *(unsigned int *)(v8 + 192)) + *((_DWORD *)a2 + 12);
        if (!llvm::SMSchedule::insert((llvm::SMSchedule *)a2, (llvm::SUnit *)v8, v21, v21 + v6, v4)) {
          goto LABEL_51;
        }
LABEL_28:
        if ((dword_1EBCCF670 & 0x80000000) == 0) {
          break;
        }
        if (++v5 == v7) {
          goto LABEL_55;
        }
      }
      ++v5;
      unsigned int v16 = (*((_DWORD *)a2 + 13) - *((_DWORD *)a2 + 12)) / *((_DWORD *)a2 + 14);
    }
    while (v5 != v7 && v16 <= dword_1EBCCF670);
    if (v16 > dword_1EBCCF670)
    {
LABEL_51:
      char isValidSchedule = 0;
      goto LABEL_52;
    }
LABEL_55:
    char isValidSchedule = llvm::SMSchedule::isValidSchedule((llvm::SMSchedule *)a2, this);
LABEL_52:
    ++v4;
  }
  while (v4 <= *((_DWORD *)this + 661) && (isValidSchedule & 1) == 0);
  if ((isValidSchedule & 1) == 0)
  {
LABEL_61:
    sub_1CD5420B0(a2);
    uint64_t v26 = a2[4];
    uint64_t v25 = (char *)(a2 + 4);
    sub_1CD40B1BC(v26);
    BOOL result = 0;
    *((void *)v25 - 1) = v25;
    *(void *)uint64_t v25 = 0;
    *((void *)v25 + 1) = 0;
    *((void *)v25 + 2) = 0;
    *((_DWORD *)v25 + 6) = 0;
    return result;
  }
  llvm::SMSchedule::finalizeSchedule((llvm::SMSchedule *)a2, this);
  uint64_t v23 = ******(void ******)(*((void *)this + 329) + 256);
  if (*(void *)(v23 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v23 + 72) + 48))(*(void *)(v23 + 72)))
  {
    llvm::MachineLoop::getStartLoc(*((llvm::MachineLoop **)this + 332));
  }
  return (*((_DWORD *)a2 + 13) - *((_DWORD *)a2 + 12)) / *((_DWORD *)a2 + 14) != 0;
}

void sub_1CC37ADE8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 < 8) {
    return;
  }
  if ((v2 & 7) != 0)
  {
    unsigned int v4 = (_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
    BOOL v5 = (*(void *)(a1 + 48) & 7) != 3 || v4 == 0;
    if (v5 || *v4 != 1) {
      return;
    }
  }
  else
  {
    v2 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 48) = v2;
  }
  if ((v2 & 7) != 0)
  {
    unsigned int v6 = *(uint64_t **)((v2 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unsigned int v6 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a1 + 48) = v6;
  }
  uint64_t v7 = *v6;
  if ((v7 & 4) == 0 && (v7 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    llvm::getUnderlyingObjects(v7 & 0xFFFFFFFFFFFFFFF8, a2, 0, (llvm::Value *)6);
    uint64_t v9 = *(unsigned int *)(a2 + 8);
    if (v9)
    {
      int v10 = *(llvm ***)a2;
      uint64_t v11 = 8 * v9;
      while (1)
      {
        uint64_t v12 = *v10;
        if (!llvm::isIdentifiedObject(*v10, v8)) {
          break;
        }
        unint64_t v13 = *(unsigned int *)(a2 + 8);
        if (v13 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v13) = v12;
        ++*(_DWORD *)(a2 + 8);
        ++v10;
        v11 -= 8;
        if (!v11) {
          return;
        }
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
}

BOOL llvm::ResourceManager::canReserveResources(llvm::ResourceManager *this, const llvm::MachineInstr *a2)
{
  return llvm::ResourceManager::canReserveResources((uint64_t)this, *((void *)a2 + 2));
}

uint64_t llvm::ResourceManager::reserveResources(llvm::ResourceManager *this, const llvm::MachineInstr *a2)
{
  return llvm::ResourceManager::reserveResources((uint64_t)this, *((void *)a2 + 2));
}

void sub_1CC37AF14(void *a1, uint64_t *a2)
{
  sub_1CD4C96F8((uint64_t)v15, (uint64_t)a1, a2);
  if (v15[16])
  {
    BOOL v5 = (uint64_t *)a1[4];
    unint64_t v4 = a1[5];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = (void *)a1[3];
      uint64_t v8 = v5 - v7;
      unint64_t v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v4 - (void)v7;
      if (v10 >> 2 > v9) {
        unint64_t v9 = v10 >> 2;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 >> 61) {
          sub_1CB833614();
        }
        uint64_t v12 = (char *)operator new(8 * v11);
      }
      else
      {
        uint64_t v12 = 0;
      }
      unint64_t v13 = (uint64_t *)&v12[8 * v8];
      uint64_t *v13 = *a2;
      unsigned int v6 = v13 + 1;
      if (v5 != v7)
      {
        do
        {
          uint64_t v14 = *--v5;
          *--unint64_t v13 = v14;
        }
        while (v5 != v7);
        BOOL v5 = (uint64_t *)a1[3];
      }
      a1[3] = v13;
      a1[4] = v6;
      a1[5] = &v12[8 * v11];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *BOOL v5 = *a2;
      unsigned int v6 = v5 + 1;
    }
    a1[4] = v6;
  }
}

void sub_1CC37B028(uint64_t a1, uint64_t a2)
{
  v20[24] = *MEMORY[0x1E4F143B8];
  int v18 = v20;
  uint64_t v19 = 0x800000000;
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = *(unsigned int *)(v3 + 40);
      if (v5)
      {
        unsigned int v6 = *(long long **)(v3 + 32);
        uint64_t v7 = 16 * v5;
        do
        {
          if ((*(void *)v6 & 6) == 2)
          {
            unint64_t v16 = v3;
            long long v17 = *v6;
            unint64_t v8 = sub_1CD41C4F0((uint64_t)&v18, (unint64_t)&v16, 1);
            unint64_t v9 = (char *)v18 + 24 * v19;
            long long v10 = *(_OWORD *)v8;
            *((void *)v9 + 2) = *(void *)(v8 + 16);
            *(_OWORD *)unint64_t v9 = v10;
            unsigned int v4 = v19 + 1;
            LODWORD(v19) = v19 + 1;
          }
          ++v6;
          v7 -= 16;
        }
        while (v7);
      }
      v3 += 272;
    }
    while (v3 != a2);
    unint64_t v11 = (uint64_t *)v18;
    if (v4)
    {
      uint64_t v12 = (uint64_t *)((char *)v18 + 24 * v4);
      do
      {
        unint64_t v13 = v11[1] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v14 = *v11 & 0xFFFFFFFFFFFFFFF9 | 2;
        uint64_t v15 = v11[2];
        llvm::SUnit::removePred(*v11, (uint64_t)(v11 + 1));
        unint64_t v16 = v14;
        *(void *)&long long v17 = v15;
        llvm::SUnit::addPred(v13, (uint64_t *)&v16, 1);
        v11 += 3;
      }
      while (v11 != v12);
      unint64_t v11 = (uint64_t *)v18;
    }
    if (v11 != v20) {
      free(v11);
    }
  }
}

BOOL sub_1CC37B1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CD54329C((void *)a2);
  *(_DWORD *)(a2 + 80) = 0;
  unsigned int v6 = *(uint64_t **)(a1 + 24);
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  if (v6 != v7)
  {
    while (1)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *(unsigned int *)(*v6 + 120);
      if (v9)
      {
        uint64_t v10 = *(void *)(v8 + 112);
        uint64_t v11 = 16 * v9;
        do
        {
          if ((!a3
             || sub_1CD4C9788(*(void *)a3, *(_DWORD *)(a3 + 16), *(void *)v10 & 0xFFFFFFFFFFFFFFF8, &v19))&& ((~*(void *)v10 & 6) != 0 || *(_DWORD *)(v10 + 8) != 3))
          {
            char v13 = sub_1CD4C9788(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)v10 & 0xFFFFFFFFFFFFFFF8, &v19);
            if ((v13 & 1) == 0)
            {
              unint64_t v19 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
              sub_1CD53F714(a2, (uint64_t *)&v19);
            }
          }
          v10 += 16;
          v11 -= 16;
        }
        while (v11);
      }
      uint64_t v14 = *(unsigned int *)(v8 + 40);
      if (v14) {
        break;
      }
LABEL_26:
      if (++v6 == v7) {
        return *(_DWORD *)(a2 + 80) != 0;
      }
    }
    uint64_t v15 = *(uint64_t **)(v8 + 32);
    uint64_t v16 = 16 * v14;
    while (1)
    {
      uint64_t v17 = *v15;
      if ((*v15 & 6) == 2)
      {
        if (!a3) {
          goto LABEL_22;
        }
        if (sub_1CD4C9788(*(void *)a3, *(_DWORD *)(a3 + 16), v17 & 0xFFFFFFFFFFFFFFF8, &v19)) {
          break;
        }
      }
LABEL_19:
      v15 += 2;
      v16 -= 16;
      if (!v16) {
        goto LABEL_26;
      }
    }
    uint64_t v17 = *v15;
LABEL_22:
    if ((sub_1CD4C9788(*(void *)a1, *(_DWORD *)(a1 + 16), v17 & 0xFFFFFFFFFFFFFFF8, &v19) & 1) == 0)
    {
      unint64_t v19 = *v15 & 0xFFFFFFFFFFFFFFF8;
      sub_1CD53F714(a2, (uint64_t *)&v19);
    }
    goto LABEL_19;
  }
  return 0;
}

uint64_t sub_1CC37B35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a1;
  if (*(_DWORD *)(a1 + 192) == -1) {
    return 0;
  }
  uint64_t v36 = 0;
  if (sub_1CD4C9788(*(void *)a4, *(_DWORD *)(a4 + 16), a1, &v36)
    && v36 != *(void *)a4 + 8 * *(unsigned int *)(a4 + 16))
  {
    return 0;
  }
  uint64_t v36 = 0;
  if (sub_1CD4C9788(*(void *)a3, *(_DWORD *)(a3 + 16), a1, &v36)
    && v36 != *(void *)a3 + 8 * *(unsigned int *)(a3 + 16))
  {
    return 1;
  }
  uint64_t v12 = *(void *)(a5 + 8);
  uint64_t v13 = *(unsigned int *)(a5 + 20);
  if (v12 == *(void *)a5)
  {
    if (v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 8 * v13;
      uint64_t v16 = *(uint64_t **)(a5 + 8);
      while (*v16 != a1)
      {
        if (*v16 == -2) {
          uint64_t v14 = v16;
        }
        ++v16;
        v15 -= 8;
        if (!v15)
        {
          if (!v14) {
            goto LABEL_18;
          }
          uint64_t *v14 = a1;
          --*(_DWORD *)(a5 + 24);
          goto LABEL_42;
        }
      }
      goto LABEL_55;
    }
LABEL_18:
    unsigned int v17 = *(_DWORD *)(a5 + 16);
    if (v13 < v17)
    {
      *(_DWORD *)(a5 + 20) = v13 + 1;
      *(void *)(v12 + 8 * v13) = a1;
LABEL_42:
      uint64_t v27 = *(unsigned int *)(a1 + 120);
      if (v27)
      {
        int v28 = 0;
        int v29 = *(uint64_t **)(a1 + 112);
        uint64_t v30 = 16 * v27;
        do
        {
          uint64_t v31 = *v29;
          v29 += 2;
          v28 |= sub_1CC37B35C(v31 & 0xFFFFFFFFFFFFFFF8, a2, a3, a4, a5);
          v30 -= 16;
        }
        while (v30);
      }
      else
      {
        int v28 = 0;
      }
      uint64_t v32 = *(unsigned int *)(a1 + 40);
      if (v32)
      {
        uint64_t v33 = *(void **)(a1 + 32);
        uint64_t v34 = 16 * v32;
        do
        {
          if ((*v33 & 6) == 2) {
            v28 |= sub_1CC37B35C(*v33 & 0xFFFFFFFFFFFFFFF8, a2, a3, a4, a5);
          }
          v33 += 2;
          v34 -= 16;
        }
        while (v34);
      }
      if ((v28 & 1) == 0) {
        return 0;
      }
      sub_1CC37AF14((void *)a2, &v35);
      return 1;
    }
  }
  else
  {
    unsigned int v17 = *(_DWORD *)(a5 + 16);
  }
  if (3 * v17 <= 4 * ((int)v13 - *(_DWORD *)(a5 + 24)))
  {
    if (v17 >= 0x40) {
      v17 *= 2;
    }
    else {
      unsigned int v17 = 128;
    }
  }
  else if (v17 - v13 >= v17 >> 3)
  {
    goto LABEL_23;
  }
  llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a5, v17);
  unsigned int v17 = *(_DWORD *)(a5 + 16);
  uint64_t v12 = *(void *)(a5 + 8);
LABEL_23:
  unsigned int v18 = v17 - 1;
  unsigned int v19 = (v17 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  uint64_t v20 = (uint64_t *)(v12 + 8 * v19);
  uint64_t v21 = *v20;
  if (*v20 == -1)
  {
    BOOL v22 = 0;
LABEL_35:
    if (v22) {
      uint64_t v26 = v22;
    }
    else {
      uint64_t v26 = v20;
    }
    if (*v26 != a1)
    {
      if (*v26 == -2) {
        --*(_DWORD *)(a5 + 24);
      }
      else {
        ++*(_DWORD *)(a5 + 20);
      }
      *uint64_t v26 = a1;
      goto LABEL_42;
    }
  }
  else
  {
    BOOL v22 = 0;
    int v23 = 1;
    while (v21 != a1)
    {
      if (v22) {
        BOOL v24 = 0;
      }
      else {
        BOOL v24 = v21 == -2;
      }
      if (v24) {
        BOOL v22 = v20;
      }
      unsigned int v25 = v19 + v23++;
      unsigned int v19 = v25 & v18;
      uint64_t v20 = (uint64_t *)(v12 + 8 * (v25 & v18));
      uint64_t v21 = *v20;
      if (*v20 == -1) {
        goto LABEL_35;
      }
    }
  }
LABEL_55:
  uint64_t v36 = 0;
  LODWORD(result) = sub_1CD4C9788(*(void *)a2, *(_DWORD *)(a2 + 16), a1, &v36);
  if (v36 == *(void *)a2 + 8 * *(unsigned int *)(a2 + 16)) {
    return 0;
  }
  else {
    return result;
  }
}

void sub_1CC37B65C(void *a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    unsigned int v4 = a2;
    do
    {
      sub_1CD4C96F8((uint64_t)v17, (uint64_t)a1, v4);
      if (v17[16])
      {
        uint64_t v7 = (uint64_t *)a1[4];
        unint64_t v6 = a1[5];
        if ((unint64_t)v7 >= v6)
        {
          uint64_t v9 = (void *)a1[3];
          uint64_t v10 = v7 - v9;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61) {
            abort();
          }
          uint64_t v12 = v6 - (void)v9;
          if (v12 >> 2 > v11) {
            unint64_t v11 = v12 >> 2;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v11;
          }
          if (v13)
          {
            if (v13 >> 61) {
              sub_1CB833614();
            }
            uint64_t v14 = (char *)operator new(8 * v13);
          }
          else
          {
            uint64_t v14 = 0;
          }
          uint64_t v15 = (uint64_t *)&v14[8 * v10];
          *uint64_t v15 = *v4;
          uint64_t v8 = v15 + 1;
          if (v7 != v9)
          {
            do
            {
              uint64_t v16 = *--v7;
              *--uint64_t v15 = v16;
            }
            while (v7 != v9);
            uint64_t v7 = (uint64_t *)a1[3];
          }
          a1[3] = v15;
          a1[4] = v8;
          a1[5] = &v14[8 * v13];
          if (v7) {
            operator delete(v7);
          }
        }
        else
        {
          *uint64_t v7 = *v4;
          uint64_t v8 = v7 + 1;
        }
        a1[4] = v8;
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

BOOL sub_1CC37B798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1CD54329C((void *)a2);
  *(_DWORD *)(a2 + 80) = 0;
  unint64_t v6 = *(uint64_t **)(a1 + 24);
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  if (v6 != v7)
  {
    while (1)
    {
      uint64_t v8 = *v6;
      uint64_t v9 = *(unsigned int *)(*v6 + 40);
      if (v9)
      {
        uint64_t v10 = *(void *)(v8 + 32);
        uint64_t v11 = 16 * v9;
        do
        {
          if (!a3
            || sub_1CD4C9788(*(void *)a3, *(_DWORD *)(a3 + 16), *(void *)v10 & 0xFFFFFFFFFFFFFFF8, &v20))
          {
            uint64_t v12 = *(void *)v10 & 6;
            BOOL v14 = v12 == 6 && *(_DWORD *)(v10 + 8) == 3;
            if (v12 != 2
              && !v14
              && (sub_1CD4C9788(*(void *)a1, *(_DWORD *)(a1 + 16), *(void *)v10 & 0xFFFFFFFFFFFFFFF8, &v20) & 1) == 0)
            {
              unint64_t v20 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
              sub_1CD53F714(a2, (uint64_t *)&v20);
            }
          }
          v10 += 16;
          v11 -= 16;
        }
        while (v11);
      }
      uint64_t v15 = *(unsigned int *)(v8 + 120);
      if (v15) {
        break;
      }
LABEL_29:
      if (++v6 == v7) {
        return *(_DWORD *)(a2 + 80) != 0;
      }
    }
    uint64_t v16 = *(uint64_t **)(v8 + 112);
    uint64_t v17 = 16 * v15;
    while (1)
    {
      uint64_t v18 = *v16;
      if ((*v16 & 6) == 2)
      {
        if (!a3) {
          goto LABEL_25;
        }
        if (sub_1CD4C9788(*(void *)a3, *(_DWORD *)(a3 + 16), v18 & 0xFFFFFFFFFFFFFFF8, &v20)) {
          break;
        }
      }
LABEL_22:
      v16 += 2;
      v17 -= 16;
      if (!v17) {
        goto LABEL_29;
      }
    }
    uint64_t v18 = *v16;
LABEL_25:
    if ((sub_1CD4C9788(*(void *)a1, *(_DWORD *)(a1 + 16), v18 & 0xFFFFFFFFFFFFFFF8, &v20) & 1) == 0)
    {
      unint64_t v20 = *v16 & 0xFFFFFFFFFFFFFFF8;
      sub_1CD53F714(a2, (uint64_t *)&v20);
    }
    goto LABEL_22;
  }
  return 0;
}

uint64_t llvm::SMSchedule::computeStart(uint64_t this, llvm::SUnit *a2, int *a3, int *a4, int *a5, int *a6, int a7, llvm::TargetInstrInfo **a8)
{
  int v8 = *(_DWORD *)(this + 48);
  if (v8 <= *(_DWORD *)(this + 52))
  {
    int v71 = a7 - 1;
    uint64_t v74 = this;
    while (1)
    {
      int v78 = v8;
      unint64_t v13 = sub_1CC37DD54(this, &v78);
      uint64_t v14 = v13[2];
      if (v13[3] != v14) {
        break;
      }
LABEL_110:
      this = v74;
      if (v8++ >= *(_DWORD *)(v74 + 52)) {
        return this;
      }
    }
    unint64_t v15 = v13[5];
    uint64_t v16 = (void *)(v14 + 8 * (v15 >> 9));
    uint64_t v17 = (uint64_t *)(*v16 + 8 * (v15 & 0x1FF));
    uint64_t v18 = *(void *)(v14 + (((v13[6] + v15) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v13[6] + v15) & 0x1FF);
    for (i = v18; ; uint64_t v18 = i)
    {
      if (v17 == (uint64_t *)v18) {
        goto LABEL_110;
      }
      int64x2_t v77 = v16;
      uint64_t v19 = *v17;
      uint64_t v20 = *((unsigned int *)a2 + 10);
      if (v20)
      {
        for (uint64_t j = 0; j != v20; ++j)
        {
          uint64_t v22 = *((void *)a2 + 4);
          int v23 = (const llvm::SDep *)(v22 + 16 * j);
          if (v19 == (*(void *)v23 & 0xFFFFFFFFFFFFFFF8))
          {
            uint64_t v24 = *(void *)v23 & 6;
            int v25 = **(unsigned __int16 **)(*((void *)a2 + 1) + 16);
            if (v24 == 2
              && (!**(_WORD **)(*((void *)a2 + 1) + 16)
               || v25 == 69
               || !**(_WORD **)(*(void *)(v19 + 8) + 16)
               || **(_WORD **)(*(void *)(v19 + 8) + 16) == 69))
            {
              int v26 = v8 - *(_DWORD *)(v22 + 16 * j + 12);
              if (**(_WORD **)(*(void *)(v19 + 8) + 16)) {
                BOOL v27 = **(unsigned __int16 **)(*(void *)(v19 + 8) + 16) == 69;
              }
              else {
                BOOL v27 = 1;
              }
              if (v27) {
                int v28 = a7;
              }
              else {
                int v28 = 0;
              }
              int v29 = v26 + v28;
              uint64_t v30 = a4;
            }
            else
            {
              int v47 = *(_DWORD *)(v22 + 16 * j + 12) + v8;
              if ((v25 == 69 || v25 == 0) && v24 == 2) {
                int v50 = -1;
              }
              else {
                int v50 = 0;
              }
              int v51 = v47 + v50 * a7;
              if (*a3 > v51) {
                int v51 = *a3;
              }
              *a3 = v51;
              if (!llvm::SwingSchedulerDAG::isLoopCarriedDep(a8, a2, v23, 0)) {
                goto LABEL_24;
              }
              int v29 = v71 + llvm::SMSchedule::earliestCycleInChain(v74, v23);
              uint64_t v30 = a5;
            }
            if (v29 >= *v30) {
              int v29 = *v30;
            }
            *uint64_t v30 = v29;
          }
LABEL_24:
          uint64_t v31 = *(unsigned int *)(v19 + 40);
          if (v31)
          {
            uint64_t v32 = *(uint64_t **)(v19 + 32);
            uint64_t v33 = &v32[2 * v31];
            while (1)
            {
              uint64_t v34 = *v32;
              if ((*v32 & 6) == 2)
              {
                if (!**(_WORD **)(*(void *)(v19 + 8) + 16)
                  || **(_WORD **)(*(void *)(v19 + 8) + 16) == 69
                  || ((int v35 = **(unsigned __int16 **)(*(void *)((v34 & 0xFFFFFFFFFFFFFFF8) + 8) + 16), v35 != 69)
                    ? (BOOL v36 = v35 == 0)
                    : (BOOL v36 = 1),
                      v36))
                {
                  unint64_t v37 = v34 & 0xFFFFFFFFFFFFFFF8;
                  int v38 = **(unsigned __int16 **)(*(void *)(v37 + 8) + 16);
                  if (v38 == 69 || v38 == 0)
                  {
                    uint64_t v40 = *(unsigned int *)(v37 + 120);
                    if (v40) {
                      break;
                    }
                  }
                }
              }
LABEL_45:
              v32 += 2;
              if (v32 == v33) {
                goto LABEL_49;
              }
            }
            uint64_t v41 = *(void **)(v37 + 112);
            uint64_t v42 = 16 * v40;
            while ((*v41 & 6) != 0
                 || **(_WORD **)(*(void *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 8) + 16)
                 && **(_WORD **)(*(void *)((*v41 & 0xFFFFFFFFFFFFFFF8) + 8) + 16) != 69)
            {
              v41 += 2;
              v42 -= 16;
              if (!v42) {
                goto LABEL_45;
              }
            }
            if (v37
              && v37 == (*(void *)v23 & 0xFFFFFFFFFFFFFFF8)
              && **(_WORD **)(*((void *)a2 + 1) + 16)
              && **(_WORD **)(*((void *)a2 + 1) + 16) != 69)
            {
              uint64_t v43 = *((unsigned int *)a2 + 10);
              if (v43)
              {
                unint64_t v44 = (void *)*((void *)a2 + 4);
                uint64_t v45 = 16 * v43;
                while (v19 != (*v44 & 0xFFFFFFFFFFFFFFF8))
                {
                  v44 += 2;
                  v45 -= 16;
                  if (!v45) {
                    goto LABEL_57;
                  }
                }
              }
              else
              {
LABEL_57:
                int v46 = *a4;
                if (v8 < *a4) {
                  int v46 = v8;
                }
                *a4 = v46;
              }
            }
          }
LABEL_49:
          ;
        }
      }
      uint64_t v52 = *((unsigned int *)a2 + 30);
      if (v52) {
        break;
      }
LABEL_107:
      ++v17;
      uint64_t v16 = v77;
      if ((uint64_t *)((char *)v17 - *v77) == (uint64_t *)4096)
      {
        uint64_t v16 = v77 + 1;
        uint64_t v17 = (uint64_t *)v77[1];
      }
    }
    uint64_t v53 = 0;
    uint64_t v54 = 16 * v52;
    while (1)
    {
      uint64_t v55 = *((void *)a2 + 14);
      unint64_t v56 = (const llvm::SDep *)(v55 + v53);
      if (v19 == (*(void *)(v55 + v53) & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
LABEL_91:
      v53 += 16;
      if (v54 == v53) {
        goto LABEL_107;
      }
    }
    uint64_t v57 = *(void *)(v55 + v53) & 6;
    if (v57 == 2)
    {
      int v58 = **(unsigned __int16 **)(*((void *)a2 + 1) + 16);
      if (!**(_WORD **)(*((void *)a2 + 1) + 16)
        || v58 == 69
        || (int v59 = **(unsigned __int16 **)(*(void *)(v19 + 8) + 16), !**(_WORD **)(*(void *)(v19 + 8) + 16))
        || v59 == 69)
      {
        int v60 = *(_DWORD *)(v55 + v53 + 12);
        int v62 = v58 == 69 || v58 == 0;
        int v63 = v8 + (v62 << 31 >> 31) * a7 + v60;
        uint64_t v64 = a3;
LABEL_88:
        if (*v64 > v63) {
          int v63 = *v64;
        }
        *uint64_t v64 = v63;
        goto LABEL_91;
      }
    }
    else
    {
      int v59 = **(unsigned __int16 **)(*(void *)(v19 + 8) + 16);
    }
    int v65 = v8 - *(_DWORD *)(v55 + v53 + 12);
    BOOL v68 = (v59 == 69 || v59 == 0) && v57 == 2;
    int v69 = v65 + v68 * a7;
    if (v69 >= *a4) {
      int v69 = *a4;
    }
    *a4 = v69;
    if (!llvm::SwingSchedulerDAG::isLoopCarriedDep(a8, a2, v56, 1)) {
      goto LABEL_91;
    }
    int v63 = llvm::SMSchedule::latestCycleInChain(v74, v56) - a7 + 1;
    uint64_t v64 = a6;
    goto LABEL_88;
  }
  return this;
}

uint64_t llvm::SMSchedule::insert(llvm::SMSchedule *this, llvm::SUnit *a2, int a3, int a4, int a5)
{
  uint64_t v33 = a2;
  if (a3 > a4) {
    int v5 = -1;
  }
  else {
    int v5 = 1;
  }
  int v29 = v5;
  if (v5 + a4 == a3) {
    return 0;
  }
  int v8 = a3;
  uint64_t v10 = (char *)this + 80;
  while (1)
  {
    if (*((unsigned char *)this + 96))
    {
      uint64_t v12 = *((void *)this + 13);
      *(void *)(v12 + 40) = 1;
      uint64_t v13 = *(void *)(v12 + 24);
      if (v13) {
        sub_1CD511D98(v13);
      }
    }
    else
    {
      uint64_t v11 = *((unsigned int *)this + 66);
      if (v11) {
        bzero(*((void **)this + 32), 8 * v11);
      }
    }
    int v14 = *((_DWORD *)this + 13);
    int v15 = (v8 - *((_DWORD *)this + 12)) % a5 + *((_DWORD *)this + 12);
    int v31 = v15;
    if (v15 <= v14)
    {
      do
      {
        uint64_t v16 = sub_1CC37DD54((uint64_t)this, &v31);
        uint64_t v17 = v16[2];
        if (v16[3] != v17)
        {
          unint64_t v18 = v16[5];
          uint64_t v19 = (void *)(v17 + 8 * (v18 >> 9));
          uint64_t v20 = (uint64_t *)(*v19 + 8 * (v18 & 0x1FF));
          uint64_t v21 = *(void *)(v17 + (((v16[6] + v18) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v16[6] + v18) & 0x1FF);
          while (v20 != (uint64_t *)v21)
          {
            uint64_t v22 = *v20;
            (*(void (**)(void))(**((void **)this + 8) + 104))(*((void *)this + 8));
            int v23 = *(unsigned __int16 **)(*(void *)(v22 + 8) + 16);
            if (*v23 >= 0x14u) {
              llvm::ResourceManager::reserveResources((uint64_t)v10, (uint64_t)v23);
            }
            if ((uint64_t *)((char *)++v20 - *v19) == (uint64_t *)4096)
            {
              uint64_t v24 = (uint64_t *)v19[1];
              ++v19;
              uint64_t v20 = v24;
            }
          }
        }
        v15 += a5;
        int v31 = v15;
      }
      while (v15 <= *((_DWORD *)this + 13));
    }
    (*(void (**)(void))(**((void **)this + 8) + 104))(*((void *)this + 8));
    int v25 = *(unsigned __int16 **)(*((void *)a2 + 1) + 16);
    if (*v25 < 0x14u || llvm::ResourceManager::canReserveResources((uint64_t)v10, (uint64_t)v25)) {
      break;
    }
    BOOL v26 = v8 == a4;
    v8 += v29;
    if (v26) {
      return 0;
    }
  }
  int v32 = v8;
  int v28 = sub_1CC37DD54((uint64_t)this, &v32);
  sub_1CD3F21B0((void *)v28 + 1, &v33);
  sub_1CD5438B8((uint64_t *)this + 3, (unint64_t)v33, (uint64_t)v33, v8);
  if (v8 > *((_DWORD *)this + 13)) {
    *((_DWORD *)this + 13) = v8;
  }
  if (v8 < *((_DWORD *)this + 12)) {
    *((_DWORD *)this + 12) = v8;
  }
  return 1;
}

void llvm::SMSchedule::finalizeSchedule(llvm::SMSchedule *this, llvm::SwingSchedulerDAG *a2)
{
  int v4 = *((_DWORD *)this + 12);
  LODWORD(v50) = v4;
  int v5 = *((_DWORD *)this + 14);
  if (v5 < 1)
  {
    int v20 = v5 + v4;
  }
  else
  {
    int v6 = v4;
    do
    {
      int v7 = (*((_DWORD *)this + 13) - v6) / v5;
      if (v7 >= 1)
      {
        int v8 = 1;
        do
        {
          int v9 = v4 + *((_DWORD *)this + 14) * v8;
          int v56 = v9;
          *(void *)&long long v53 = 0;
          char v10 = sub_1CD5422D0(*(void *)this, *((_DWORD *)this + 4), v9, &v53);
          uint64_t v11 = (_DWORD *)v53;
          if ((v10 & 1) == 0)
          {
            uint64_t v11 = sub_1CD542370((uint64_t)this, &v56, (_DWORD *)v53);
            _DWORD *v11 = v9;
            *(_OWORD *)(v11 + 2) = 0u;
            *(_OWORD *)(v11 + 6) = 0u;
            *(_OWORD *)(v11 + 10) = 0u;
          }
          uint64_t v12 = *((void *)v11 + 2);
          if (*((void *)v11 + 3) != v12)
          {
            unint64_t v13 = *((void *)v11 + 6) + *((void *)v11 + 5);
            int v14 = (void *)(v12 + 8 * (v13 >> 9));
            uint64_t v15 = *v14 + 8 * (v13 & 0x1FF);
            uint64_t v16 = *(void *)(v12 + ((*((void *)v11 + 5) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * (*((void *)v11 + 5) & 0x1FFLL);
            while (v15 != v16)
            {
              *(void *)&long long v53 = 0;
              uint64_t v17 = v15;
              if (v15 == *v14) {
                uint64_t v17 = *(v14 - 1) + 4096;
              }
              *(void *)&long long v53 = *(void *)(v17 - 8);
              unint64_t v18 = sub_1CC37DD54((uint64_t)this, (int *)&v50);
              sub_1CD540070((void *)v18 + 1, &v53);
              if (v15 == *v14)
              {
                uint64_t v19 = *--v14;
                uint64_t v15 = v19 + 4096;
              }
              v15 -= 8;
            }
          }
          BOOL v38 = v8++ == v7;
        }
        while (!v38);
        int v6 = *((_DWORD *)this + 12);
        int v5 = *((_DWORD *)this + 14);
      }
      LODWORD(v50) = ++v4;
      int v20 = v6 + v5;
    }
    while (v4 < v6 + v5);
  }
  if (v20 <= *((_DWORD *)this + 13))
  {
    do
      sub_1CD540380((uint64_t)this, v20);
    while (v20++ < *((_DWORD *)this + 13));
  }
  uint64_t v22 = *((void *)a2 + 6);
  uint64_t v23 = *((void *)a2 + 7);
  while (v22 != v23)
  {
    llvm::SwingSchedulerDAG::applyInstrChange(a2, *(llvm::MachineInstr **)(v22 + 8), this);
    v22 += 272;
  }
  int v24 = *((_DWORD *)this + 12);
  int v56 = v24;
  int v25 = *((_DWORD *)this + 14);
  if (v25 >= 1)
  {
    int v26 = v25 + v24;
    do
    {
      BOOL v27 = sub_1CC37DD54((uint64_t)this, &v56);
      int v28 = v27;
      long long v29 = 0uLL;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v53 = 0u;
      unint64_t v30 = v27[5];
      uint64_t v31 = v27[2];
      uint64_t v32 = v27[3];
      if (v32 == v31)
      {
        long long v51 = 0uLL;
        long long v52 = 0uLL;
        uint64_t v32 = v31;
        long long v50 = 0uLL;
      }
      else
      {
        unint64_t v33 = v30 >> 9;
        uint64_t v34 = (void *)(v31 + 8 * (v30 >> 9));
        int v35 = (void *)(*v34 + 8 * (v27[5] & 0x1FFLL));
        uint64_t v36 = *(void *)(v31 + (((v27[6] + v30) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v27[6] + v30) & 0x1FF);
        if (v35 != (void *)v36)
        {
          do
          {
            *(void *)&long long v50 = 0;
            *(void *)&long long v50 = *v35;
            int v37 = **(unsigned __int16 **)(*(void *)(v50 + 8) + 16);
            BOOL v38 = v37 == 69 || v37 == 0;
            if (v38)
            {
              sub_1CD3F21B0(&v53, &v50);
              long long v29 = 0uLL;
            }
            if ((void *)((char *)++v35 - *v34) == (void *)4096)
            {
              uint64_t v39 = (void *)v34[1];
              ++v34;
              int v35 = v39;
            }
          }
          while (v35 != (void *)v36);
          unint64_t v30 = v28[5];
          uint64_t v31 = v28[2];
          uint64_t v32 = v28[3];
          unint64_t v33 = v30 >> 9;
        }
        long long v51 = v29;
        long long v52 = v29;
        long long v50 = v29;
        if (v32 == v31)
        {
          uint64_t v31 = v32;
        }
        else
        {
          uint64_t v40 = (unint64_t **)(v31 + 8 * v33);
          uint64_t v41 = *v40;
          uint64_t v42 = &(*v40)[v30 & 0x1FF];
          uint64_t v43 = *(void *)(v31 + (((v28[6] + v30) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v28[6] + v30) & 0x1FF);
          if (v42 != (unint64_t *)v43)
          {
            do
            {
              if (**(_WORD **)(*(void *)(*v42 + 8) + 16) && **(_WORD **)(*(void *)(*v42 + 8) + 16) != 69)
              {
                llvm::SMSchedule::orderDependence((uint64_t)this, (uint64_t)a2, *v42, &v50);
                uint64_t v41 = *v40;
              }
              if ((char *)++v42 - (char *)v41 == 4096)
              {
                unint64_t v44 = v40[1];
                ++v40;
                uint64_t v41 = v44;
                uint64_t v42 = v44;
              }
            }
            while (v42 != (unint64_t *)v43);
            uint64_t v31 = v28[2];
            uint64_t v32 = v28[3];
            unint64_t v30 = v28[5];
          }
        }
      }
      uint64_t v45 = v28[1];
      long long v46 = v54;
      *(_OWORD *)(v28 + 1) = v53;
      *(void *)&long long v53 = v45;
      *((void *)&v53 + 1) = v31;
      uint64_t v47 = v28[4];
      *(_OWORD *)(v28 + 3) = v46;
      *(void *)&long long v54 = v32;
      *((void *)&v54 + 1) = v47;
      uint64_t v48 = v28[6];
      uint64_t v49 = *((void *)&v55 + 1);
      v28[5] = v55;
      v28[6] = v49;
      *(void *)&long long v55 = v30;
      *((void *)&v55 + 1) = v48;
      sub_1CD5403EC(v28 + 1, &v50);
      llvm::SwingSchedulerDAG::fixupRegisterOverlaps((uint64_t)a2, v28 + 1);
      sub_1CB904DFC((void **)&v50);
      sub_1CB904DFC((void **)&v53);
      int v56 = ++v24;
    }
    while (v24 < v26);
  }
}

uint64_t llvm::SwingSchedulerDAG::computeDelta(llvm::SwingSchedulerDAG *this, llvm::MachineInstr *a2, unsigned int *a3)
{
  int v6 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 4) + 16)
                                                                           + 176))(*(void *)(*((void *)this + 4)
                                                                                               + 16));
  uint64_t v24 = 0;
  int v25 = 0;
  BOOL v23 = 0;
  int MemOperandWithOffset = llvm::TargetInstrInfo::getMemOperandWithOffset(*((llvm::TargetInstrInfo **)this + 2), a2, &v25, &v24, &v23, v6);
  uint64_t result = 0;
  if (MemOperandWithOffset) {
    BOOL v9 = !v23;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    if (*(unsigned char *)v25) {
      return 0;
    }
    uint64_t v10 = *((unsigned int *)v25 + 1);
    uint64_t v11 = *(void *)(*((void *)this + 4) + 40);
    uint64_t v12 = (uint64_t *)((v10 & 0x80000000) != 0
                    ? *(void *)(v11 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                    : *(void *)(v11 + 272) + 8 * v10);
    uint64_t v13 = *v12;
    if (!v13) {
      return 0;
    }
    if ((*(unsigned char *)(v13 + 3) & 1) == 0)
    {
      uint64_t v13 = *(void *)(v13 + 24);
      if (!v13 || (*(unsigned char *)(v13 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v14 = *(void *)(v13 + 8);
    if (!v14) {
      return 0;
    }
    int v15 = **(unsigned __int16 **)(v14 + 16);
    if (v15 != 69 && v15 != 0) {
      goto LABEL_30;
    }
    int v17 = *(_DWORD *)(v14 + 40);
    if (v17 == 1)
    {
LABEL_23:
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v18 = *(void *)(v14 + 32);
      unsigned int v19 = 1;
      while (*(void *)(v18 + 32 * (v19 + 1) + 16) != *((void *)a2 + 3))
      {
        v19 += 2;
        if (v17 == v19) {
          goto LABEL_23;
        }
      }
      uint64_t v20 = *(unsigned int *)(v18 + 32 * v19 + 4);
      if ((v20 & 0x80000000) != 0)
      {
        uint64_t v21 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
LABEL_27:
        uint64_t v22 = *v21;
        if (v22)
        {
          if (*(unsigned char *)(v22 + 3) & 1) != 0 || (uint64_t v22 = *(void *)(v22 + 24)) != 0 && (*(unsigned char *)(v22 + 3))
          {
            if (*(void *)(v22 + 8))
            {
LABEL_30:
              uint64_t result = (*(unsigned int (**)(void))(**((void **)this + 2) + 712))(*((void *)this + 2));
              if (result == 1) {
                *a3 = 0;
              }
              return result;
            }
          }
        }
        return 0;
      }
    }
    uint64_t v21 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v20);
    goto LABEL_27;
  }
  return result;
}

uint64_t llvm::SwingSchedulerDAG::applyInstrChange(llvm::SwingSchedulerDAG *this, llvm::MachineInstr *a2, llvm::SMSchedule *a3)
{
  uint64_t v48 = a2;
  uint64_t v49 = 0;
  int v6 = (uint64_t *)((char *)this + 952);
  long long v50 = a2;
  unint64_t v7 = 0;
  if (sub_1CD3C8538((uint64_t *)this + 119, &v50, &v49)) {
    unint64_t v7 = *(void *)(v49 + 8);
  }
  long long v50 = 0;
  uint64_t result = sub_1CD45B528(*((void *)this + 397), *((_DWORD *)this + 798), v7, &v50);
  if (result) {
    BOOL v9 = v50 == (llvm::MachineInstr *)(*((void *)this + 397) + 24 * *((unsigned int *)this + 798));
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    unsigned int v10 = *((_DWORD *)v50 + 2);
    uint64_t v11 = *((void *)v50 + 2);
    uint64_t v47 = 0;
    uint64_t result = (*(uint64_t (**)(void, llvm::MachineInstr *, char *, uint64_t *))(**((void **)this + 2) + 688))(*((void *)this + 2), a2, (char *)&v47 + 4, &v47);
    if (result)
    {
      DefInLoop = (llvm::MachineInstr *)llvm::SwingSchedulerDAG::findDefInLoop((uint64_t)this, *(_DWORD *)(*((void *)a2 + 4) + 32 * HIDWORD(v47) + 4));
      uint64_t v49 = 0;
      long long v50 = DefInLoop;
      int v13 = sub_1CD3C8538(v6, &v50, &v49);
      unint64_t v14 = 0;
      if (v13) {
        unint64_t v14 = *(void *)(v49 + 8);
      }
      uint64_t v16 = (char *)a3 + 32;
      int v15 = (void *)*((void *)a3 + 4);
      if (!v15) {
        goto LABEL_22;
      }
      int v17 = (char *)a3 + 32;
      do
      {
        unint64_t v18 = v15[4];
        BOOL v19 = v18 >= v14;
        if (v18 >= v14) {
          uint64_t v20 = v15;
        }
        else {
          uint64_t v20 = v15 + 1;
        }
        if (v19) {
          int v17 = (char *)v15;
        }
        int v15 = (void *)*v20;
      }
      while (*v20);
      if (v17 != v16 && *((void *)v17 + 4) <= v14) {
        int v21 = (*((_DWORD *)v17 + 10) - *((_DWORD *)a3 + 12)) / *((_DWORD *)a3 + 14);
      }
      else {
LABEL_22:
      }
        int v21 = -1;
      uint64_t v49 = 0;
      long long v50 = DefInLoop;
      uint64_t result = sub_1CD3C8538(v6, &v50, &v49);
      unint64_t v22 = 0;
      if (result) {
        unint64_t v22 = *(void *)(v49 + 8);
      }
      BOOL v23 = *(void **)v16;
      if (!*(void *)v16) {
        goto LABEL_36;
      }
      uint64_t v24 = *(void **)v16;
      int v25 = (char *)a3 + 32;
      do
      {
        unint64_t v26 = v24[4];
        BOOL v27 = v26 >= v22;
        if (v26 >= v22) {
          int v28 = v24;
        }
        else {
          int v28 = v24 + 1;
        }
        if (v27) {
          int v25 = (char *)v24;
        }
        uint64_t v24 = (void *)*v28;
      }
      while (*v28);
      if (v25 == v16 || *((void *)v25 + 4) > v22) {
LABEL_36:
      }
        int v25 = (char *)a3 + 32;
      int v29 = *((_DWORD *)a3 + 12);
      int v30 = *((_DWORD *)a3 + 14);
      if (v23)
      {
        uint64_t v31 = *(void **)v16;
        uint64_t v32 = (char *)a3 + 32;
        do
        {
          unint64_t v33 = v31[4];
          BOOL v34 = v33 >= v7;
          if (v33 >= v7) {
            int v35 = v31;
          }
          else {
            int v35 = v31 + 1;
          }
          if (v34) {
            uint64_t v32 = (char *)v31;
          }
          uint64_t v31 = (void *)*v35;
        }
        while (*v35);
        if (v32 == v16 || *((void *)v32 + 4) > v7) {
          int v36 = -1;
        }
        else {
          int v36 = (*((_DWORD *)v32 + 10) - v29) / v30;
        }
        int v37 = (char *)a3 + 32;
        do
        {
          unint64_t v38 = v23[4];
          BOOL v39 = v38 >= v7;
          if (v38 >= v7) {
            uint64_t v40 = v23;
          }
          else {
            uint64_t v40 = v23 + 1;
          }
          if (v39) {
            int v37 = (char *)v23;
          }
          BOOL v23 = (void *)*v40;
        }
        while (*v40);
        if (v37 != v16 && *((void *)v37 + 4) <= v7) {
          goto LABEL_62;
        }
      }
      else
      {
        int v36 = -1;
      }
      int v37 = (char *)a3 + 32;
LABEL_62:
      int v41 = v21 - v36;
      if (v21 > v36)
      {
        int v42 = (*((_DWORD *)v25 + 10) - v29) % v30;
        int v43 = (*((_DWORD *)v37 + 10) - v29) % v30;
        unint64_t v44 = (llvm::MachineInstr *)llvm::MachineFunction::CloneMachineInstr(*((llvm::MachineFunction **)this + 4), a2);
        uint64_t v45 = v44;
        long long v50 = v44;
        if (v42 < v43)
        {
          llvm::MachineOperand::setReg(*((void *)v44 + 4) + 32 * HIDWORD(v47), v10);
          v41 -= v41 > 0;
        }
        *(void *)(*((void *)v45 + 4) + 32 * v47 + 16) = *(void *)(*((void *)a2 + 4)
                                                                                      + 32 * v47
                                                                                      + 16)
                                                                          + v11 * v41;
        *(void *)(v7 + 8) = v45;
        sub_1CD543858((uint64_t)v6, (uint64_t *)&v50)[1] = v7;
        long long v46 = v50;
        uint64_t result = (uint64_t)sub_1CD4F8350((uint64_t *)this + 400, &v48);
        *(void *)(result + 8) = v46;
      }
    }
  }
  return result;
}

void llvm::ResourceManager::clearResources(llvm::ResourceManager *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((void *)this + 3);
    *(void *)(v1 + 40) = 1;
    uint64_t v2 = *(void *)(v1 + 24);
    if (v2) {
      sub_1CD511D98(v2);
    }
  }
  else
  {
    uint64_t v3 = *((unsigned int *)this + 46);
    if (v3) {
      bzero(*((void **)this + 22), 8 * v3);
    }
  }
}

void llvm::SMSchedule::orderDependence(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  int v4 = a4;
  uint64_t v6 = a1;
  unint64_t v163 = a3;
  uint64_t v7 = *(void *)(a3 + 8);
  BOOL v9 = (void *)(a1 + 32);
  int v8 = *(void **)(a1 + 32);
  if (!v8) {
    goto LABEL_12;
  }
  unsigned int v10 = (void *)(a1 + 32);
  do
  {
    unint64_t v11 = v8[4];
    BOOL v12 = v11 >= a3;
    if (v11 >= a3) {
      int v13 = v8;
    }
    else {
      int v13 = v8 + 1;
    }
    if (v12) {
      unsigned int v10 = v8;
    }
    int v8 = (void *)*v13;
  }
  while (*v13);
  if (v10 != v9 && v10[4] <= a3) {
    int v14 = (*((_DWORD *)v10 + 10) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 56);
  }
  else {
LABEL_12:
  }
    int v14 = -1;
  uint64_t v15 = a4[1];
  if (a4[2] == v15
    || (unint64_t v16 = a4[4],
        int v17 = (void *)(v15 + 8 * (v16 >> 9)),
        uint64_t v18 = *v17 + 8 * (v16 & 0x1FF),
        uint64_t v156 = *(void *)(v15 + (((v4[5] + v16) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v4[5] + v16) & 0x1FF),
        v18 == v156))
  {
LABEL_267:
    sub_1CD3F21B0(v4, &v163);
    return;
  }
  uint64_t v153 = v4;
  int v19 = 0;
  int v20 = 0;
  char v155 = 0;
  unsigned int v21 = 0;
  unsigned int v22 = 0;
  unsigned int v23 = 0;
  uint64_t v162 = v7;
  do
  {
    unsigned int v159 = v21;
    int v160 = v19;
    v157 = v17;
    uint64_t v24 = *(unsigned int *)(v7 + 40);
    if (v24)
    {
      int v25 = *(llvm::MachineOperand **)(v7 + 32);
      unint64_t v26 = (llvm::MachineOperand *)((char *)v25 + 32 * v24);
      uint64_t v161 = v18;
      while (1)
      {
        if (*(unsigned char *)v25) {
          goto LABEL_20;
        }
        int v27 = *((_DWORD *)v25 + 1);
        if ((v27 & 0x80000000) == 0) {
          goto LABEL_20;
        }
        uint64_t v28 = *(void *)(*(uint64_t (**)(void))(**(void **)(v6 + 64) + 104))(*(void *)(v6 + 64));
        if ((*(unsigned int (**)(void))(v28 + 688))())
        {
          uint64_t v18 = v161;
          if (*(_DWORD *)(*(void *)(v162 + 32) + 4) == v27)
          {
            uint64_t v164 = 0;
            int v95 = sub_1CD45B528(*(void *)(a2 + 3176), *(_DWORD *)(a2 + 3192), a3, &v164);
            uint64_t v18 = v161;
            if (!v95
              || v164 == *(void *)(a2 + 3176) + 24 * *(unsigned int *)(a2 + 3192)
              || (int v29 = *(_DWORD *)(v164 + 8)) == 0)
            {
              int v29 = v27;
            }
          }
          else
          {
            int v29 = v27;
          }
        }
        else
        {
          int v29 = v27;
          uint64_t v18 = v161;
        }
        unint64_t v30 = *(void *)v18;
        uint64_t v31 = *(void *)(*(void *)v18 + 8);
        uint64_t v32 = *(unsigned int *)(v31 + 40);
        uint64_t v6 = a1;
        int v33 = 0;
        if (!v32) {
          break;
        }
        char v34 = 0;
        int v35 = 0;
        int v36 = (_DWORD *)(*(void *)(v31 + 32) + 4);
        do
        {
          unsigned int v37 = *(v36 - 1);
          if (!(_BYTE)v37 && *v36 == v29)
          {
            int v38 = (v37 >> 28) & 1;
            if ((v37 & 0xFFF00) == 0) {
              int v38 = 1;
            }
            int v39 = v38 | v35;
            int v40 = v38 ^ 1 | v33;
            if ((v37 & 0x1000000) != 0) {
              int v35 = v39;
            }
            else {
              v34 |= (v37 & 0x10000000) == 0;
            }
            if ((v37 & 0x1000000) != 0) {
              int v33 = v40;
            }
          }
          v36 += 8;
          --v32;
        }
        while (v32);
        if ((v34 & 1) == 0) {
          goto LABEL_41;
        }
        char v41 = 1;
LABEL_42:
        int v42 = *(_DWORD *)v25;
        if ((*(_DWORD *)v25 & 0x1000000) == 0 || (v41 & 1) == 0)
        {
LABEL_71:
          if ((((v42 & 0x1000000) == 0) & (v33 | v35)) != 1) {
            goto LABEL_157;
          }
          long long v55 = (void *)*v9;
          if (*v9)
          {
            int v56 = (void *)*v9;
            uint64_t v57 = v9;
            do
            {
              unint64_t v58 = v56[4];
              BOOL v59 = v58 >= v30;
              if (v58 >= v30) {
                int v60 = v56;
              }
              else {
                int v60 = v56 + 1;
              }
              if (v59) {
                uint64_t v57 = v56;
              }
              int v56 = (void *)*v60;
            }
            while (*v60);
            if (v57 == v9 || v57[4] > v30) {
              int v61 = -1;
            }
            else {
              int v61 = (*((_DWORD *)v57 + 10) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 56);
            }
            int v62 = (void *)*v9;
            int v63 = v9;
            uint64_t v64 = (void *)*v9;
            int v65 = v9;
            if (v61 != v14)
            {
              do
              {
                unint64_t v76 = v64[4];
                BOOL v77 = v76 >= v30;
                if (v76 >= v30) {
                  int v78 = v64;
                }
                else {
                  int v78 = v64 + 1;
                }
                if (v77) {
                  int v65 = v64;
                }
                uint64_t v64 = (void *)*v78;
              }
              while (*v78);
              if (v65 == v9 || v65[4] > v30) {
                int v79 = -1;
              }
              else {
                int v79 = (*((_DWORD *)v65 + 10) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 56);
              }
              int64x2_t v80 = v9;
              if (v79 > v14)
              {
LABEL_131:
                if (v22) {
                  unsigned int v81 = v22;
                }
                else {
                  unsigned int v81 = v23;
                }
                if (v81) {
                  unsigned int v22 = v81;
                }
                else {
                  unsigned int v22 = 0;
                }
                if (v81) {
                  unsigned int v82 = v23 - 1;
                }
                else {
                  unsigned int v82 = v159;
                }
                if (v81) {
                  int v20 = 1;
                }
                unsigned int v159 = v82;
                int v160 = 1;
                goto LABEL_20;
              }
              do
              {
                unint64_t v83 = v55[4];
                BOOL v84 = v83 >= v30;
                if (v83 >= v30) {
                  int64x2_t v85 = v55;
                }
                else {
                  int64x2_t v85 = v55 + 1;
                }
                if (v84) {
                  int64x2_t v80 = v55;
                }
                long long v55 = (void *)*v85;
              }
              while (*v85);
              if (v80 == v9 || v80[4] > v30) {
LABEL_152:
              }
                int v86 = -1;
              else {
                int v86 = (*((_DWORD *)v80 + 10) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 56);
              }
              if (v86 >= v14)
              {
LABEL_157:
                if ((v42 & 0x1000000) == 0)
                {
                  int64x2_t v87 = (void *)*v9;
                  if (!*v9) {
                    goto LABEL_169;
                  }
                  int64x2_t v88 = v9;
                  do
                  {
                    unint64_t v89 = v87[4];
                    BOOL v90 = v89 >= v30;
                    if (v89 >= v30) {
                      uint64_t v91 = v87;
                    }
                    else {
                      uint64_t v91 = v87 + 1;
                    }
                    if (v90) {
                      int64x2_t v88 = v87;
                    }
                    int64x2_t v87 = (void *)*v91;
                  }
                  while (*v91);
                  if (v88 != v9 && v88[4] <= v30) {
                    int v92 = (*((_DWORD *)v88 + 10) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 56);
                  }
                  else {
LABEL_169:
                  }
                    int v92 = -1;
                  if (v92 == v14)
                  {
                    char isLoopCarriedDefOfUse = llvm::SMSchedule::isLoopCarriedDefOfUse((llvm::SMSchedule *)a1, (llvm::SwingSchedulerDAG *)a2, (llvm::MachineInstr *)v31, v25);
                    uint64_t v18 = v161;
                    uint64_t v6 = a1;
                    char v94 = isLoopCarriedDefOfUse & (v22 == 0);
                    if (v94) {
                      unsigned int v22 = v23;
                    }
                    v155 |= v94;
                  }
                }
                goto LABEL_20;
              }
LABEL_154:
              if (!v22) {
                unsigned int v22 = v23;
              }
              int v160 = 1;
              goto LABEL_20;
            }
            do
            {
              unint64_t v66 = v62[4];
              BOOL v67 = v66 >= v30;
              if (v66 >= v30) {
                BOOL v68 = v62;
              }
              else {
                BOOL v68 = v62 + 1;
              }
              if (v67) {
                int v63 = v62;
              }
              int v62 = (void *)*v68;
            }
            while (*v68);
            if (v63 == v9 || v63[4] > v30) {
              goto LABEL_98;
            }
          }
          else
          {
            if (v14 != -1)
            {
              if (v14 <= -2) {
                goto LABEL_131;
              }
              goto LABEL_152;
            }
LABEL_98:
            int v63 = v9;
          }
          if (!v55) {
            goto LABEL_110;
          }
          int v69 = v9;
          do
          {
            unint64_t v70 = v55[4];
            BOOL v71 = v70 >= a3;
            if (v70 >= a3) {
              uint64_t v72 = v55;
            }
            else {
              uint64_t v72 = v55 + 1;
            }
            if (v71) {
              int v69 = v55;
            }
            long long v55 = (void *)*v72;
          }
          while (*v72);
          if (v69 == v9 || v69[4] > a3) {
LABEL_110:
          }
            int v69 = v9;
          if ((*((_DWORD *)v63 + 10) - *(_DWORD *)(a1 + 48)) % *(_DWORD *)(a1 + 56) == (*((_DWORD *)v69 + 10)
                                                                                       - *(_DWORD *)(a1 + 48))
                                                                                      % *(_DWORD *)(a1 + 56))
          {
            uint64_t v73 = *(unsigned int *)(v30 + 120);
            if (!v73) {
              goto LABEL_154;
            }
            uint64_t v74 = *(void **)(v30 + 112);
            uint64_t v75 = 16 * v73;
            while ((*v74 & 0xFFFFFFFFFFFFFFF8) != a3)
            {
              v74 += 2;
              v75 -= 16;
              if (!v75) {
                goto LABEL_154;
              }
            }
          }
          goto LABEL_127;
        }
        int v43 = (void *)*v9;
        if (!*v9)
        {
          if (v14 >= -1) {
            goto LABEL_154;
          }
LABEL_69:
          int v54 = -1;
          goto LABEL_70;
        }
        unint64_t v44 = (void *)*v9;
        uint64_t v45 = v9;
        do
        {
          unint64_t v46 = v44[4];
          BOOL v47 = v46 >= v30;
          if (v46 >= v30) {
            uint64_t v48 = v44;
          }
          else {
            uint64_t v48 = v44 + 1;
          }
          if (v47) {
            uint64_t v45 = v44;
          }
          unint64_t v44 = (void *)*v48;
        }
        while (*v48);
        if (v45 == v9 || v45[4] > v30) {
          int v49 = -1;
        }
        else {
          int v49 = (*((_DWORD *)v45 + 10) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 56);
        }
        long long v50 = v9;
        if (v49 <= v14) {
          goto LABEL_154;
        }
        do
        {
          unint64_t v51 = v43[4];
          BOOL v52 = v51 >= v30;
          if (v51 >= v30) {
            long long v53 = v43;
          }
          else {
            long long v53 = v43 + 1;
          }
          if (v52) {
            long long v50 = v43;
          }
          int v43 = (void *)*v53;
        }
        while (*v53);
        if (v50 == v9 || v50[4] > v30) {
          goto LABEL_69;
        }
        int v54 = (*((_DWORD *)v50 + 10) - *(_DWORD *)(a1 + 48)) / *(_DWORD *)(a1 + 56);
LABEL_70:
        if (v54 <= v14) {
          goto LABEL_71;
        }
LABEL_127:
        int v20 = 1;
        unsigned int v159 = v23;
LABEL_20:
        int v25 = (llvm::MachineOperand *)((char *)v25 + 32);
        if (v25 == v26) {
          goto LABEL_180;
        }
      }
      int v35 = 0;
LABEL_41:
      char v41 = v33 & (v35 ^ 1);
      goto LABEL_42;
    }
LABEL_180:
    uint64_t v96 = *(unsigned int *)(a3 + 120);
    if (v96)
    {
      uint64_t v97 = *(void **)(a3 + 112);
      uint64_t v98 = &v97[2 * v96];
      unint64_t v99 = *(void *)v18;
      uint64_t v7 = v162;
      unsigned int v21 = v159;
      int v19 = v160;
      int v17 = v157;
      do
      {
        if (v99 == (*v97 & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v100 = *v97 & 6;
          if (v100 == 2)
          {
            int v109 = (void *)*v9;
            if (!*v9) {
              goto LABEL_216;
            }
            unsigned int v110 = v9;
            do
            {
              unint64_t v111 = v109[4];
              BOOL v112 = v111 >= v99;
              if (v111 >= v99) {
                unsigned int v113 = v109;
              }
              else {
                unsigned int v113 = v109 + 1;
              }
              if (v112) {
                unsigned int v110 = v109;
              }
              int v109 = (void *)*v113;
            }
            while (*v113);
            if (v110 != v9 && v110[4] <= v99) {
              int v114 = (*((_DWORD *)v110 + 10) - *(_DWORD *)(v6 + 48)) / *(_DWORD *)(v6 + 56);
            }
            else {
LABEL_216:
            }
              int v114 = -1;
            if (v22 - 1 >= v23) {
              unsigned int v115 = v23;
            }
            else {
              unsigned int v115 = v22;
            }
            if (v114 == v14)
            {
              unsigned int v22 = v115;
              int v19 = 1;
            }
          }
          else if (v100 == 6)
          {
            uint64_t v101 = (void *)*v9;
            if (!*v9) {
              goto LABEL_198;
            }
            int v102 = v9;
            do
            {
              unint64_t v103 = v101[4];
              BOOL v104 = v103 >= v99;
              if (v103 >= v99) {
                uint64_t v105 = v101;
              }
              else {
                uint64_t v105 = v101 + 1;
              }
              if (v104) {
                int v102 = v101;
              }
              uint64_t v101 = (void *)*v105;
            }
            while (*v105);
            if (v102 != v9 && v102[4] <= v99) {
              int v106 = (*((_DWORD *)v102 + 10) - *(_DWORD *)(v6 + 48)) / *(_DWORD *)(v6 + 56);
            }
            else {
LABEL_198:
            }
              int v106 = -1;
            if (v23 >= v22) {
              unsigned int v107 = v22;
            }
            else {
              unsigned int v107 = v23;
            }
            BOOL v120 = v106 == v14;
            BOOL v108 = v106 == v14;
            if (v120) {
              unsigned int v22 = v107;
            }
            v19 |= v108;
          }
        }
        v97 += 2;
      }
      while (v97 != v98);
    }
    else
    {
      uint64_t v7 = v162;
      unsigned int v21 = v159;
      int v19 = v160;
      int v17 = v157;
    }
    uint64_t v116 = *(unsigned int *)(a3 + 40);
    if (v116)
    {
      unsigned int v117 = *(void **)(a3 + 32);
      unsigned int v118 = &v117[2 * v116];
      unint64_t v119 = *(void *)v18;
      do
      {
        BOOL v120 = (~*v117 & 6) == 0 && v119 == (*v117 & 0xFFFFFFFFFFFFFFF8);
        if (v120)
        {
          BOOL v121 = (void *)*v9;
          if (!*v9) {
            goto LABEL_244;
          }
          unint64_t v122 = v9;
          do
          {
            unint64_t v123 = v121[4];
            BOOL v124 = v123 >= v119;
            if (v123 >= v119) {
              v125 = v121;
            }
            else {
              v125 = v121 + 1;
            }
            if (v124) {
              unint64_t v122 = v121;
            }
            BOOL v121 = (void *)*v125;
          }
          while (*v125);
          if (v122 != v9 && v122[4] <= v119) {
            int v126 = (*((_DWORD *)v122 + 10) - *(_DWORD *)(v6 + 48)) / *(_DWORD *)(v6 + 56);
          }
          else {
LABEL_244:
          }
            int v126 = -1;
          BOOL v120 = v126 == v14;
          BOOL v127 = v126 == v14;
          if (v120) {
            unsigned int v21 = v23;
          }
          v20 |= v127;
        }
        v117 += 2;
      }
      while (v117 != v118);
    }
    v18 += 8;
    if (v18 - *v17 == 4096)
    {
      uint64_t v128 = v17[1];
      ++v17;
      uint64_t v18 = v128;
    }
    ++v23;
  }
  while (v18 != v156);
  int v129 = (v20 & v19 ^ 1 | (v22 != v21)) & v19;
  if (v155) {
    int v129 = v20 ^ 1 | (v22 > v21);
  }
  int v4 = v153;
  if ((v129 & v20 & 1) == 0)
  {
    if (v129)
    {
      sub_1CD540070(v153, &v163);
      return;
    }
    goto LABEL_267;
  }
  unint64_t v130 = v153[5];
  if (v130 <= v22 || v130 <= v21) {
    abort();
  }
  unint64_t v131 = v153[4];
  uint64_t v132 = v153[1];
  uint64_t v133 = v153[2];
  uint64_t v134 = *(void *)(*(void *)(v132 + (((v131 + v22) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v131 + v22) & 0x1FF));
  uint64_t v135 = v21;
  uint64_t v136 = *(void *)(*(void *)(v132 + (((v131 + v21) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v131 + v21) & 0x1FF));
  unsigned int v137 = (char *)(v132 + 8 * (v131 >> 9));
  unsigned int v138 = v21;
  if (v22 <= v21)
  {
    if (v133 == v132) {
      v143 = 0;
    }
    else {
      v143 = (char *)(*(void *)v137 + 8 * (v153[4] & 0x1FFLL));
    }
    if (v21)
    {
      uint64_t v148 = v21 + ((uint64_t)&v143[-*(void *)v137] >> 3);
      if (v148 < 1)
      {
        unint64_t v150 = 511 - v148;
        v137 -= 8 * (v150 >> 9);
        v143 = (char *)(*(void *)v137 + 8 * (~(_WORD)v150 & 0x1FF));
      }
      else
      {
        v137 += 8 * ((unint64_t)v148 >> 9);
        v143 = (char *)(*(void *)v137 + 8 * (v148 & 0x1FF));
      }
    }
    sub_1CD53FE2C((uint64_t)v153, v137, v143);
    uint64_t v151 = v153[1];
    uint64_t v146 = (char *)(v151 + 8 * (v153[4] >> 9));
    if (v153[2] == v151) {
      int v147 = 0;
    }
    else {
      int v147 = (char *)(*(void *)v146 + 8 * (v153[4] & 0x1FFLL));
    }
    if (v22)
    {
      uint64_t v149 = v22 + ((uint64_t)&v147[-*(void *)v146] >> 3);
      goto LABEL_286;
    }
  }
  else
  {
    uint64_t v139 = *(void *)v137 + 8 * (v153[4] & 0x1FFLL);
    if (v133 == v132) {
      uint64_t v139 = 0;
    }
    uint64_t v140 = v22 + ((v139 - *(void *)v137) >> 3);
    if (v140 < 1)
    {
      unint64_t v144 = 511 - v140;
      unsigned int v141 = &v137[-8 * (v144 >> 9)];
      unsigned int v142 = (char *)(*(void *)v141 + 8 * (~(_WORD)v144 & 0x1FF));
    }
    else
    {
      unsigned int v141 = &v137[8 * ((unint64_t)v140 >> 9)];
      unsigned int v142 = (char *)(*(void *)v141 + 8 * (v140 & 0x1FF));
    }
    sub_1CD53FE2C((uint64_t)v153, v141, v142);
    uint64_t v145 = v153[1];
    uint64_t v146 = (char *)(v145 + 8 * (v153[4] >> 9));
    if (v153[2] == v145) {
      int v147 = 0;
    }
    else {
      int v147 = (char *)(*(void *)v146 + 8 * (v153[4] & 0x1FFLL));
    }
    if (v138)
    {
      uint64_t v149 = v135 + ((uint64_t)&v147[-*(void *)v146] >> 3);
LABEL_286:
      if (v149 < 1)
      {
        unint64_t v152 = 511 - v149;
        v146 -= 8 * (v152 >> 9);
        int v147 = (char *)(*(void *)v146 + 8 * (~(_WORD)v152 & 0x1FF));
      }
      else
      {
        v146 += 8 * ((unint64_t)v149 >> 9);
        int v147 = (char *)(*(void *)v146 + 8 * (v149 & 0x1FF));
      }
    }
  }
  sub_1CD53FE2C((uint64_t)v153, v146, v147);
  llvm::SMSchedule::orderDependence(a1, a2, v134, v153);
  llvm::SMSchedule::orderDependence(a1, a2, a3, v153);
  llvm::SMSchedule::orderDependence(a1, a2, v136, v153);
}

uint64_t llvm::SMSchedule::isLoopCarriedDefOfUse(llvm::SMSchedule *this, llvm::SwingSchedulerDAG *a2, llvm::MachineInstr *a3, llvm::MachineOperand *a4)
{
  uint64_t v4 = *(unsigned __int8 *)a4;
  if (*(unsigned char *)a4) {
    return 0;
  }
  if (**((_WORD **)a3 + 2) && **((_WORD **)a3 + 2) != 69)
  {
    uint64_t v7 = *((void *)this + 9);
    uint64_t v8 = *((unsigned int *)a4 + 1);
    BOOL v9 = (uint64_t *)((v8 & 0x80000000) != 0
                   ? *(void *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8
                   : *(void *)(v7 + 272) + 8 * v8);
    uint64_t v4 = *v9;
    if (v4)
    {
      if ((*(unsigned char *)(v4 + 3) & 1) == 0)
      {
        uint64_t v4 = *(void *)(v4 + 24);
        if (!v4) {
          return v4;
        }
        if ((*(unsigned char *)(v4 + 3) & 1) == 0) {
          return 0;
        }
      }
      uint64_t v10 = *(void *)(v4 + 8);
      if (!v10) {
        return 0;
      }
      int v11 = **(unsigned __int16 **)(v10 + 16);
      BOOL v12 = v11 == 69 || v11 == 0;
      if (!v12
        || *(void *)(v10 + 24) != *((void *)a3 + 3)
        || !llvm::SMSchedule::isLoopCarried(this, a2, (llvm::MachineInstr *)v10))
      {
        return 0;
      }
      int v13 = *(_DWORD *)(v10 + 40);
      if (v13 == 1)
      {
LABEL_22:
        int v16 = 0;
      }
      else
      {
        uint64_t v14 = *(void *)(v10 + 32);
        unsigned int v15 = 1;
        while (*(void *)(v14 + 32 * (v15 + 1) + 16) != *(void *)(v10 + 24))
        {
          v15 += 2;
          if (v13 == v15) {
            goto LABEL_22;
          }
        }
        int v16 = *(_DWORD *)(v14 + 32 * v15 + 4);
      }
      uint64_t v17 = *((unsigned int *)a3 + 10);
      if (!v17) {
        return 0;
      }
      for (uint64_t i = (_DWORD *)(*((void *)a3 + 4) + 4); (*(i - 1) & 0x10000FF) != 0x1000000 || *i != v16; i += 8)
      {
        uint64_t v4 = 0;
        if (!--v17) {
          return v4;
        }
      }
      return 1;
    }
  }
  return v4;
}

uint64_t llvm::SwingSchedulerDAG::fixupRegisterOverlaps(uint64_t result, void *a2)
{
  uint64_t v2 = a2[1];
  if (a2[2] == v2) {
    return result;
  }
  unint64_t v3 = a2[4];
  uint64_t v4 = (void *)(v2 + 8 * (v3 >> 9));
  uint64_t v5 = *v4 + 8 * (v3 & 0x1FF);
  uint64_t v6 = *(void *)(v2 + (((a2[5] + v3) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a2[5] + v3) & 0x1FF);
  if (v5 == v6) {
    return result;
  }
  uint64_t v7 = result;
  int v8 = 0;
  unsigned int v9 = 0;
  uint64_t v26 = result + 952;
  uint64_t v10 = (uint64_t *)(result + 3200);
  do
  {
    uint64_t v11 = *(void *)v5;
    uint64_t result = *(void *)(*(void *)v5 + 8);
    uint64_t v28 = (llvm::MachineInstr *)result;
    uint64_t v12 = *(unsigned int *)(result + 40);
    if (!v12) {
      goto LABEL_14;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = *(void *)(result + 32);
    uint64_t v16 = 32 * v12;
    while (1)
    {
      int v17 = *(_DWORD *)(v15 + v14);
      int v18 = v17 & 0x10000FF;
      if ((v17 & 0x10000FF) == 0) {
        break;
      }
      int v19 = v17 & 0xF00000;
      if (v18 == 0x1000000 && v19 != 0)
      {
        uint64_t result = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)result, v13);
        uint64_t v21 = *((void *)v28 + 4);
        int v8 = *(_DWORD *)(v21 + 32 * result + 4);
        unsigned int v9 = *(_DWORD *)(v21 + v14 + 4);
        goto LABEL_14;
      }
LABEL_13:
      v14 += 32;
      uint64_t v13 = (v13 + 1);
      if (v16 == v14) {
        goto LABEL_14;
      }
    }
    if (*(_DWORD *)(v15 + v14 + 4) != v8) {
      goto LABEL_13;
    }
    unint64_t v29 = 0;
    uint64_t result = sub_1CD45B528(*(void *)(v7 + 3176), *(_DWORD *)(v7 + 3192), v11, &v29);
    uint64_t v23 = v29;
    if (result) {
      BOOL v24 = v29 == *(void *)(v7 + 3176) + 24 * *(unsigned int *)(v7 + 3192);
    }
    else {
      BOOL v24 = 1;
    }
    if (!v24)
    {
      uint64_t v27 = 0;
      uint64_t result = (*(uint64_t (**)(void, llvm::MachineInstr *, char *, uint64_t *))(**(void **)(v7 + 16)
                                                                                          + 688))(*(void *)(v7 + 16), v28, (char *)&v27 + 4, &v27);
      if (result)
      {
        unint64_t v29 = 0;
        unint64_t v29 = llvm::MachineFunction::CloneMachineInstr(*(llvm::MachineFunction **)(v7 + 32), v28);
        llvm::MachineOperand::setReg(*(void *)(v29 + 32) + 32 * HIDWORD(v27), v9);
        *(void *)(*(void *)(v29 + 32) + 32 * v27 + 16) = *(void *)(*((void *)v28 + 4)
                                                                                       + 32 * v27
                                                                                       + 16)
                                                                           - *(void *)(v23 + 16);
        *(void *)(v11 + 8) = v29;
        sub_1CD543858(v26, (uint64_t *)&v29)[1] = v11;
        unint64_t v25 = v29;
        uint64_t result = (uint64_t)sub_1CD4F8350(v10, &v28);
        *(void *)(result + 8) = v25;
      }
    }
    unsigned int v9 = 0;
    int v8 = 0;
LABEL_14:
    v5 += 8;
    if (v5 - *v4 == 4096)
    {
      uint64_t v22 = v4[1];
      ++v4;
      uint64_t v5 = v22;
    }
  }
  while (v5 != v6);
  return result;
}

void *sub_1CC37D90C(void *a1)
{
  uint64_t v2 = (void *)a1[43];
  if (v2 != a1 + 45) {
    free(v2);
  }
  unint64_t v3 = (void *)a1[40];
  if (v3)
  {
    a1[41] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[37];
  if (v4)
  {
    a1[38] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[3];
  if (v5 != a1 + 5) {
    free(v5);
  }
  return a1;
}

_DWORD *sub_1CC37D988(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(56 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 56 * v5;
      do
      {
        *uint64_t result = 0x7FFFFFFF;
        result += 14;
        v6 -= 56;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CC37DA24(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (char *)*((void *)v4 - 6);
        if (v4 - 32 != v6) {
          free(v6);
        }
        v4 -= 56;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char **sub_1CC37DAB4(char **result, unint64_t a2, uint64_t a3)
{
  if (*((unsigned int *)result + 3) < a2)
  {
    return (char **)sub_1CC37DBF4(result, a2, a3);
  }
  else
  {
    unint64_t v3 = *((unsigned int *)result + 2);
    if (v3 >= a2) {
      unint64_t v4 = a2;
    }
    else {
      unint64_t v4 = *((unsigned int *)result + 2);
    }
    if (v4)
    {
      uint64_t v15 = a3;
      int v17 = result;
      unint64_t v20 = a2;
      unsigned int v9 = *result;
      do
      {
        sub_1CD41B6B0((uint64_t)v9, v15);
        v9 += 32;
        --v4;
      }
      while (v4);
      uint64_t result = v17;
      a2 = v20;
      unint64_t v3 = *((unsigned int *)v17 + 2);
      a3 = v15;
    }
    unint64_t v5 = v3 - a2;
    if (v3 >= a2)
    {
      if (v3 > a2)
      {
        uint64_t v10 = (uint64_t)&(*result)[32 * v3 - 16];
        uint64_t v11 = 32 * a2 - 32 * v3;
        int v18 = result;
        int v21 = a2;
        do
        {
          uint64_t v12 = *(void **)(v10 - 16);
          if ((void *)v10 != v12) {
            free(v12);
          }
          v10 -= 32;
          v11 += 32;
          uint64_t result = v18;
          LODWORD(a2) = v21;
        }
        while (v11);
      }
    }
    else
    {
      uint64_t v6 = &(*result)[32 * v3];
      uint64_t v7 = 0x400000000;
      do
      {
        *(void *)uint64_t v6 = v6 + 16;
        *((void *)v6 + 1) = v7;
        if (*(_DWORD *)(a3 + 8))
        {
          uint64_t v16 = result;
          unint64_t v19 = a2;
          uint64_t v14 = a3;
          uint64_t v13 = v7;
          sub_1CD41B6B0((uint64_t)v6, a3);
          uint64_t v7 = v13;
          a3 = v14;
          uint64_t result = v16;
          a2 = v19;
        }
        v6 += 32;
      }
      while (!__CFADD__(v5++, 1));
    }
    *((_DWORD *)result + 2) = a2;
  }
  return result;
}

void *sub_1CC37DBF4(char **a1, unint64_t a2, uint64_t a3)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v5 = *((unsigned int *)a1 + 3);
  if (v5 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v7 = (2 * v5) | 1;
  if (v7 <= a2) {
    unint64_t v7 = a2;
  }
  if (v7 >= 0xFFFFFFFF) {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v8 = v7;
  }
  uint64_t result = malloc_type_malloc(32 * v8, 0x4065EBACuLL);
  if (!result) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  if (a2)
  {
    uint64_t v10 = 0x400000000;
    uint64_t v11 = result;
    unint64_t v12 = a2;
    do
    {
      void *v11 = v11 + 2;
      v11[1] = v10;
      if (*(_DWORD *)(a3 + 8))
      {
        unint64_t v19 = v12;
        unint64_t v20 = result;
        uint64_t v18 = v10;
        sub_1CD41B6B0((uint64_t)v11, a3);
        unint64_t v12 = v19;
        uint64_t result = v20;
        uint64_t v10 = v18;
      }
      v11 += 4;
      --v12;
    }
    while (v12);
  }
  uint64_t v13 = *a1;
  uint64_t v14 = *((unsigned int *)a1 + 2);
  if (v14)
  {
    int v21 = result;
    uint64_t v15 = 32 * v14;
    do
    {
      uint64_t v16 = *(char **)&v13[v15 - 32];
      if (&v13[v15 - 16] != v16) {
        free(v16);
      }
      v15 -= 32;
    }
    while (v15);
    uint64_t v13 = *a1;
    uint64_t result = v21;
  }
  if (v13 != (char *)(a1 + 2))
  {
    int v17 = result;
    free(v13);
    uint64_t result = v17;
  }
  *a1 = (char *)result;
  *((_DWORD *)a1 + 2) = a2;
  *((_DWORD *)a1 + 3) = v8;
  return result;
}

_DWORD *sub_1CC37DD54(uint64_t a1, int *a2)
{
  unint64_t v7 = 0;
  char v4 = sub_1CD5422D0(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  uint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = sub_1CD542370(a1, a2, v7);
    *uint64_t v5 = *a2;
    *(_OWORD *)(v5 + 10) = 0u;
    *(_OWORD *)(v5 + 6) = 0u;
    *(_OWORD *)(v5 + 2) = 0u;
  }
  return v5;
}

__n128 sub_1CC37DDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 0;
      sub_1CBFCB9AC(a3, v5);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      uint64_t v6 = a3 + 24;
      *(void *)(v6 + 16) = 0;
      sub_1CBFCBA2C((void *)v6, *(const void **)(v5 + 24), *(void *)(v5 + 32), (uint64_t)(*(void *)(v5 + 32) - *(void *)(v5 + 24)) >> 3);
      __n128 result = *(__n128 *)(v5 + 48);
      long long v8 = *(_OWORD *)(v5 + 64);
      *(_DWORD *)(v6 + 56) = *(_DWORD *)(v5 + 80);
      *(_OWORD *)(v6 + 40) = v8;
      *(__n128 *)(v6 + 24) = result;
      v5 += 88;
      a3 = v6 + 64;
    }
    while (v5 != a2);
  }
  return result;
}

void sub_1CC37DE60(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 < 2) {
    return;
  }
  uint64_t v6 = a1;
  if (a3 == 2)
  {
    unsigned __int32 v7 = a2[-3].n128_u32[3];
    unsigned __int32 v8 = *(_DWORD *)(a1 + 52);
    BOOL v9 = v7 > v8;
    if (v7 == v8)
    {
      unsigned __int32 v10 = a2[-2].n128_u32[2];
      if (v10)
      {
        unsigned __int32 v11 = *(_DWORD *)(a1 + 64);
        if (v11)
        {
          if (v10 != v11)
          {
            if (v10 >= v11) {
              return;
            }
LABEL_90:
            unint64_t v71 = *(void *)a1;
            *(void *)a1 = 0;
            unsigned __int32 v72 = *(_DWORD *)(a1 + 16);
            *(_DWORD *)(a1 + 16) = 0;
            unint64_t v73 = *(void *)(a1 + 24);
            *(void *)&long long v86 = v73;
            __n128 v74 = *(__n128 *)(a1 + 48);
            __n128 v82 = *(__n128 *)(a1 + 32);
            *((void *)&v86 + 1) = *(void *)(a1 + 32);
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
            __n128 v75 = *(__n128 *)(a1 + 64);
            __n128 v88 = v74;
            __n128 v89 = v75;
            unsigned __int32 v90 = *(_DWORD *)(a1 + 80);
            unint64_t v76 = *(void *)(a1 + 8);
            *(void *)(a1 + 8) = 0;
            sub_1CD46A1B4(a1, (uint64_t)&a2[-6].n128_i64[1]);
            sub_1CD46D2D8(v6 + 24, a2 - 4);
            long long v77 = *(long long *)((char *)&a2[-3] + 8);
            long long v78 = *(long long *)((char *)&a2[-2] + 8);
            *(_DWORD *)(v6 + 80) = a2[-1].n128_u32[2];
            *(_OWORD *)(v6 + 48) = v77;
            *(_OWORD *)(v6 + 64) = v78;
            MEMORY[0x1D25D9CD0](a2[-6].n128_u64[1], 8);
            a2[-6].n128_u64[1] = v71;
            uint64_t v83 = 0;
            a2[-5].n128_u64[0] = v76;
            uint64_t v84 = 0;
            a2[-5].n128_u32[2] = v72;
            int v85 = 0;
            int v79 = (void *)a2[-4].n128_u64[0];
            if (v79)
            {
              a2[-4].n128_u64[1] = (unint64_t)v79;
              operator delete(v79);
            }
            a2[-4].n128_u64[0] = v73;
            *(__n128 *)((char *)a2 - 56) = v82;
            uint64_t v87 = 0;
            long long v86 = 0uLL;
            __n128 v80 = v89;
            *(__n128 *)((char *)a2 - 40) = v88;
            *(__n128 *)((char *)a2 - 24) = v80;
            a2[-1].n128_u32[2] = v90;
            sub_1CD456CB4(&v83);
            return;
          }
        }
      }
      signed __int32 v46 = a2[-2].n128_i32[0];
      signed __int32 v47 = *(_DWORD *)(a1 + 56);
      if (v46 != v47)
      {
        if (v46 >= v47) {
          return;
        }
        goto LABEL_90;
      }
      BOOL v9 = a2[-2].n128_u32[1] > *(_DWORD *)(a1 + 60);
    }
    if (!v9) {
      return;
    }
    goto LABEL_90;
  }
  unint64_t v12 = a3;
  if ((uint64_t)a3 <= 0)
  {
    if ((__n128 *)a1 == a2) {
      return;
    }
    uint64_t v18 = a1 + 88;
    if ((__n128 *)(a1 + 88) == a2) {
      return;
    }
    uint64_t v19 = 0;
    unint64_t v20 = &v88;
    uint64_t v21 = a1;
    while (1)
    {
      uint64_t v22 = v21;
      uint64_t v21 = v18;
      unsigned int v23 = *(_DWORD *)(v22 + 140);
      unsigned int v24 = *(_DWORD *)(v22 + 52);
      BOOL v25 = v23 > v24;
      if (v23 == v24)
      {
        unsigned int v26 = *(_DWORD *)(v22 + 152);
        if (v26)
        {
          unsigned int v27 = *(_DWORD *)(v22 + 64);
          if (v27 && v26 != v27)
          {
            if (v26 >= v27) {
              goto LABEL_56;
            }
            goto LABEL_32;
          }
        }
        int v29 = *(_DWORD *)(v22 + 144);
        int v30 = *(_DWORD *)(v22 + 56);
        if (v29 != v30)
        {
          if (v29 >= v30) {
            goto LABEL_56;
          }
          goto LABEL_32;
        }
        BOOL v25 = *(_DWORD *)(v22 + 148) > *(_DWORD *)(v22 + 60);
      }
      if (!v25) {
        goto LABEL_56;
      }
LABEL_32:
      uint64_t v83 = *(void *)(v22 + 88);
      uint64_t v84 = *(void *)(v22 + 96);
      *(void *)(v22 + 88) = 0;
      *(void *)(v22 + 96) = 0;
      int v85 = *(_DWORD *)(v22 + 104);
      *(_DWORD *)(v22 + 104) = 0;
      long long v86 = *(_OWORD *)(v22 + 112);
      uint64_t v87 = *(void *)(v22 + 128);
      *(void *)(v22 + 112) = 0;
      *(void *)(v22 + 120) = 0;
      *(void *)(v22 + 128) = 0;
      __n128 v31 = *(__n128 *)(v22 + 136);
      __n128 v32 = *(__n128 *)(v22 + 152);
      v20[2].n128_u32[0] = *(_DWORD *)(v22 + 168);
      *unint64_t v20 = v31;
      v20[1] = v32;
      sub_1CD46A1B4(v21, v22);
      int v33 = (void **)(v22 + 24);
      sub_1CD46D2D8(v21 + 24, (__n128 *)(v22 + 24));
      uint64_t v34 = v22 + 48;
      long long v35 = *(_OWORD *)(v22 + 64);
      *(_OWORD *)(v21 + 48) = *(_OWORD *)(v22 + 48);
      *(_OWORD *)(v21 + 64) = v35;
      *(_DWORD *)(v21 + 80) = *(_DWORD *)(v22 + 80);
      if (v22 == v6)
      {
        uint64_t v22 = v6;
      }
      else
      {
        unsigned int v81 = v20;
        uint64_t v36 = v19;
        do
        {
          unsigned __int32 v37 = *(_DWORD *)(v6 + v36 - 36);
          if (v88.n128_u32[1] == v37)
          {
            if (!v89.n128_u32[0]
              || ((unsigned int v38 = *(_DWORD *)(v6 + v36 - 24)) != 0 ? (v39 = v89.n128_u32[0] == v38) : (v39 = 1), v39))
            {
              int v40 = *(_DWORD *)(v6 + v36 - 32);
              if (v88.n128_u32[2] == v40)
              {
                if (v88.n128_u32[3] <= *(_DWORD *)(v6 + v36 - 28)) {
                  goto LABEL_52;
                }
              }
              else if (v88.n128_i32[2] >= v40)
              {
                goto LABEL_52;
              }
            }
            else if (v89.n128_u32[0] >= v38)
            {
              goto LABEL_52;
            }
          }
          else if (v88.n128_u32[1] <= v37)
          {
            uint64_t v22 = v6 + v36;
            uint64_t v34 = v6 + v36 + 48;
            int v33 = (void **)(v6 + v36 + 24);
            goto LABEL_52;
          }
          sub_1CD46A1B4(v6 + v36, v6 + v36 - 88);
          uint64_t v41 = v6 + v36;
          int v33 = (void **)(v22 - 64);
          sub_1CD46D2D8(v6 + v36 + 24, (__n128 *)(v6 + v36 - 64));
          uint64_t v34 = v22 - 40;
          long long v42 = *(_OWORD *)(v6 + v36 - 24);
          *(_OWORD *)(v41 + 48) = *(_OWORD *)(v41 - 40);
          *(_OWORD *)(v41 + 64) = v42;
          *(_DWORD *)(v41 + 80) = *(_DWORD *)(v41 - 8);
          v22 -= 88;
          v36 -= 88;
        }
        while (v36);
        uint64_t v34 = v6 + 48;
        uint64_t v22 = v6;
LABEL_52:
        unint64_t v20 = v81;
      }
      MEMORY[0x1D25D9CD0](*(void *)v22, 8);
      *(void *)uint64_t v22 = 0;
      *(void *)(v22 + 8) = 0;
      *(_DWORD *)(v22 + 16) = 0;
      *(void *)uint64_t v22 = v83;
      *(void *)(v22 + 8) = v84;
      uint64_t v83 = 0;
      uint64_t v84 = 0;
      *(_DWORD *)(v22 + 16) = v85;
      int v85 = 0;
      int v43 = *v33;
      if (*v33)
      {
        *(void *)(v22 + 32) = v43;
        operator delete(v43);
        *(void *)(v22 + 32) = 0;
        *(void *)(v22 + 40) = 0;
        *int v33 = 0;
      }
      *int v33 = (void *)v86;
      *(void *)(v22 + 32) = *((void *)&v86 + 1);
      *(void *)(v22 + 40) = v87;
      long long v86 = 0uLL;
      uint64_t v87 = 0;
      __n128 v44 = *v20;
      __n128 v45 = v20[1];
      *(_DWORD *)(v34 + 32) = v20[2].n128_u32[0];
      *(__n128 *)uint64_t v34 = v44;
      *(__n128 *)(v34 + 16) = v45;
      sub_1CD456CB4(&v83);
LABEL_56:
      uint64_t v18 = v21 + 88;
      v19 += 88;
      if ((__n128 *)(v21 + 88) == a2) {
        return;
      }
    }
  }
  uint64_t v14 = (void *)a4;
  unint64_t v15 = a3 >> 1;
  uint64_t v16 = (_DWORD *)(a1 + 88 * (a3 >> 1));
  unint64_t v17 = a3 >> 1;
  if ((uint64_t)v12 > a5)
  {
    sub_1CC37DE60(a1, v16, v17, a4, a5);
    sub_1CC37DE60(v6 + 88 * (v12 >> 1), a2, v12 - (v12 >> 1), v14, a5);
    sub_1CC37E998(v6, v6 + 88 * (v12 >> 1), (uint64_t)a2, v12 >> 1, v12 - (v12 >> 1), v14, a5);
    return;
  }
  sub_1CC37E4F0((_DWORD *)a1, v16, v17, a4);
  uint64_t v48 = (uint64_t)&v14[11 * v15];
  sub_1CC37E4F0((_DWORD *)(v6 + 88 * (v12 >> 1)), a2, v12 - (v12 >> 1), v48);
  int v49 = &v14[11 * v12];
  uint64_t v50 = v48;
  uint64_t v51 = (uint64_t)v14;
  while ((void *)v50 != v49)
  {
    unsigned int v52 = *(_DWORD *)(v50 + 52);
    unsigned int v53 = *(_DWORD *)(v51 + 52);
    BOOL v54 = v52 > v53;
    if (v52 != v53) {
      goto LABEL_69;
    }
    unsigned int v55 = *(_DWORD *)(v50 + 64);
    if (v55 && (unsigned int v60 = *(_DWORD *)(v51 + 64)) != 0 && v55 != v60)
    {
      if (v55 >= v60) {
        goto LABEL_77;
      }
    }
    else
    {
      int v56 = *(_DWORD *)(v50 + 56);
      int v57 = *(_DWORD *)(v51 + 56);
      if (v56 == v57)
      {
        BOOL v54 = *(_DWORD *)(v50 + 60) > *(_DWORD *)(v51 + 60);
LABEL_69:
        if (!v54) {
          goto LABEL_77;
        }
        goto LABEL_71;
      }
      if (v56 >= v57)
      {
LABEL_77:
        sub_1CD46A1B4(v6, v51);
        sub_1CD46D2D8(v6 + 24, (__n128 *)(v51 + 24));
        long long v61 = *(_OWORD *)(v51 + 48);
        long long v62 = *(_OWORD *)(v51 + 64);
        *(_DWORD *)(v6 + 80) = *(_DWORD *)(v51 + 80);
        *(_OWORD *)(v6 + 48) = v61;
        *(_OWORD *)(v6 + 64) = v62;
        v51 += 88;
        goto LABEL_78;
      }
    }
LABEL_71:
    sub_1CD46A1B4(v6, v50);
    sub_1CD46D2D8(v6 + 24, (__n128 *)(v50 + 24));
    long long v58 = *(_OWORD *)(v50 + 48);
    long long v59 = *(_OWORD *)(v50 + 64);
    *(_DWORD *)(v6 + 80) = *(_DWORD *)(v50 + 80);
    *(_OWORD *)(v6 + 48) = v58;
    *(_OWORD *)(v6 + 64) = v59;
    v50 += 88;
LABEL_78:
    v6 += 88;
    if (v51 == v48)
    {
      if ((void *)v50 != v49)
      {
        uint64_t v63 = 0;
        do
        {
          uint64_t v64 = v6 + v63;
          sub_1CD46A1B4(v6 + v63, v50 + v63);
          sub_1CD46D2D8(v6 + v63 + 24, (__n128 *)(v50 + v63 + 24));
          long long v65 = *(_OWORD *)(v50 + v63 + 48);
          long long v66 = *(_OWORD *)(v50 + v63 + 64);
          *(_DWORD *)(v64 + 80) = *(_DWORD *)(v50 + v63 + 80);
          *(_OWORD *)(v64 + 48) = v65;
          *(_OWORD *)(v64 + 64) = v66;
          v63 += 88;
        }
        while ((void *)(v50 + v63) != v49);
      }
      goto LABEL_86;
    }
  }
  if (v51 != v48)
  {
    uint64_t v67 = 0;
    do
    {
      uint64_t v68 = v6 + v67;
      sub_1CD46A1B4(v6 + v67, v51 + v67);
      sub_1CD46D2D8(v6 + v67 + 24, (__n128 *)(v51 + v67 + 24));
      long long v69 = *(_OWORD *)(v51 + v67 + 48);
      long long v70 = *(_OWORD *)(v51 + v67 + 64);
      *(_DWORD *)(v68 + 80) = *(_DWORD *)(v51 + v67 + 80);
      *(_OWORD *)(v68 + 48) = v69;
      *(_OWORD *)(v68 + 64) = v70;
      v67 += 88;
    }
    while (v51 + v67 != v48);
  }
LABEL_86:
  if (v14)
  {
    do
    {
      sub_1CD456CB4(v14);
      v14 += 11;
      --v12;
    }
    while (v12);
  }
}

void sub_1CC37E4F0(_DWORD *a1, _DWORD *a2, unint64_t a3, uint64_t a4)
{
  if (!a3) {
    return;
  }
  uint64_t v4 = a4;
  uint64_t v7 = (uint64_t)a1;
  if (a3 == 2)
  {
    unsigned int v60 = *(a2 - 9);
    unsigned int v61 = a1[13];
    BOOL v62 = v60 > v61;
    if (v60 == v61)
    {
      unsigned int v63 = *(a2 - 6);
      if (v63)
      {
        unsigned int v64 = a1[16];
        if (v64)
        {
          if (v63 != v64)
          {
            if (v63 >= v64) {
              goto LABEL_83;
            }
            goto LABEL_81;
          }
        }
      }
      int v67 = *(a2 - 8);
      int v68 = a1[14];
      if (v67 != v68)
      {
        if (v67 >= v68)
        {
LABEL_83:
          sub_1CD46AEB4(a4, (uint64_t)a1);
          long long v74 = *(_OWORD *)(v7 + 48);
          long long v75 = *(_OWORD *)(v7 + 64);
          *(_DWORD *)(v4 + 80) = *(_DWORD *)(v7 + 80);
          *(_OWORD *)(v4 + 48) = v74;
          *(_OWORD *)(v4 + 64) = v75;
          sub_1CD46AEB4(v4 + 88, (uint64_t)(a2 - 22));
          long long v71 = *(_OWORD *)(a2 - 10);
          long long v72 = *(_OWORD *)(a2 - 6);
          int v73 = *(a2 - 2);
          goto LABEL_84;
        }
LABEL_81:
        sub_1CD46AEB4(a4, (uint64_t)(a2 - 22));
        long long v69 = *(_OWORD *)(a2 - 10);
        long long v70 = *(_OWORD *)(a2 - 6);
        *(_DWORD *)(v4 + 80) = *(a2 - 2);
        *(_OWORD *)(v4 + 48) = v69;
        *(_OWORD *)(v4 + 64) = v70;
        sub_1CD46AEB4(v4 + 88, v7);
        long long v71 = *(_OWORD *)(v7 + 48);
        long long v72 = *(_OWORD *)(v7 + 64);
        int v73 = *(_DWORD *)(v7 + 80);
LABEL_84:
        *(_DWORD *)(v4 + 168) = v73;
        *(_OWORD *)(v4 + 152) = v72;
        *(_OWORD *)(v4 + 136) = v71;
        return;
      }
      BOOL v62 = *(a2 - 7) > a1[15];
    }
    if (!v62) {
      goto LABEL_83;
    }
    goto LABEL_81;
  }
  if (a3 == 1)
  {
    sub_1CD46AEB4(a4, (uint64_t)a1);
    long long v65 = *(_OWORD *)(v7 + 48);
    long long v66 = *(_OWORD *)(v7 + 64);
    *(_DWORD *)(v4 + 80) = *(_DWORD *)(v7 + 80);
    *(_OWORD *)(v4 + 48) = v65;
    *(_OWORD *)(v4 + 64) = v66;
    return;
  }
  if ((uint64_t)a3 > 8)
  {
    uint64_t v38 = 88 * (a3 >> 1);
    BOOL v39 = &a1[(unint64_t)v38 / 4];
    sub_1CC37DE60(a1, &a1[(unint64_t)v38 / 4], a3 >> 1, a4, a3 >> 1);
    sub_1CC37DE60(v7 + v38, a2, a3 - (a3 >> 1), v4 + v38, a3 - (a3 >> 1));
    uint64_t v40 = v7 + v38;
    while (1)
    {
      if ((_DWORD *)v40 == a2)
      {
        if ((_DWORD *)v7 != v39)
        {
          uint64_t v56 = 0;
          do
          {
            sub_1CD46AEB4(v4 + v56, v7 + v56);
            long long v57 = *(_OWORD *)(v7 + v56 + 48);
            long long v58 = *(_OWORD *)(v7 + v56 + 64);
            *(_DWORD *)(v59 + 80) = *(_DWORD *)(v7 + v56 + 80);
            *(_OWORD *)(v59 + 48) = v57;
            *(_OWORD *)(v59 + 64) = v58;
            v56 += 88;
          }
          while ((_DWORD *)(v7 + v56) != v39);
        }
        return;
      }
      unsigned int v41 = *(_DWORD *)(v40 + 52);
      unsigned int v42 = *(_DWORD *)(v7 + 52);
      BOOL v43 = v41 > v42;
      if (v41 != v42) {
        goto LABEL_56;
      }
      unsigned int v44 = *(_DWORD *)(v40 + 64);
      if (v44)
      {
        unsigned int v45 = *(_DWORD *)(v7 + 64);
        if (v45)
        {
          if (v44 != v45)
          {
            if (v44 >= v45) {
              goto LABEL_60;
            }
            goto LABEL_58;
          }
        }
      }
      int v46 = *(_DWORD *)(v40 + 56);
      int v47 = *(_DWORD *)(v7 + 56);
      if (v46 == v47) {
        break;
      }
      if (v46 >= v47)
      {
LABEL_60:
        sub_1CD46AEB4(v4, v7);
        long long v50 = *(_OWORD *)(v7 + 48);
        long long v51 = *(_OWORD *)(v7 + 64);
        *(_DWORD *)(v4 + 80) = *(_DWORD *)(v7 + 80);
        *(_OWORD *)(v4 + 48) = v50;
        *(_OWORD *)(v4 + 64) = v51;
        v7 += 88;
        goto LABEL_61;
      }
LABEL_58:
      sub_1CD46AEB4(v4, v40);
      long long v48 = *(_OWORD *)(v40 + 48);
      long long v49 = *(_OWORD *)(v40 + 64);
      *(_DWORD *)(v4 + 80) = *(_DWORD *)(v40 + 80);
      *(_OWORD *)(v4 + 48) = v48;
      *(_OWORD *)(v4 + 64) = v49;
      v40 += 88;
LABEL_61:
      v4 += 88;
      if ((_DWORD *)v7 == v39)
      {
        if ((_DWORD *)v40 != a2)
        {
          uint64_t v52 = 0;
          do
          {
            sub_1CD46AEB4(v4 + v52, v40 + v52);
            long long v53 = *(_OWORD *)(v40 + v52 + 48);
            long long v54 = *(_OWORD *)(v40 + v52 + 64);
            *(_DWORD *)(v55 + 80) = *(_DWORD *)(v40 + v52 + 80);
            *(_OWORD *)(v55 + 48) = v53;
            *(_OWORD *)(v55 + 64) = v54;
            v52 += 88;
          }
          while ((_DWORD *)(v40 + v52) != a2);
        }
        return;
      }
    }
    BOOL v43 = *(_DWORD *)(v40 + 60) > *(_DWORD *)(v7 + 60);
LABEL_56:
    if (!v43) {
      goto LABEL_60;
    }
    goto LABEL_58;
  }
  if (a1 == a2) {
    return;
  }
  sub_1CD46AEB4(a4, (uint64_t)a1);
  long long v8 = *(_OWORD *)(v7 + 48);
  long long v9 = *(_OWORD *)(v7 + 64);
  *(_DWORD *)(v4 + 80) = *(_DWORD *)(v7 + 80);
  *(_OWORD *)(v4 + 48) = v8;
  *(_OWORD *)(v4 + 64) = v9;
  uint64_t v10 = v7 + 88;
  if ((_DWORD *)(v7 + 88) == a2) {
    return;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v4;
  do
  {
    uint64_t v13 = v10;
    uint64_t v14 = v12 + 88;
    unsigned int v15 = *(_DWORD *)(v7 + 140);
    unsigned int v16 = *(_DWORD *)(v12 + 52);
    BOOL v17 = v15 > v16;
    if (v15 == v16)
    {
      unsigned int v18 = *(_DWORD *)(v7 + 152);
      if (v18)
      {
        unsigned int v19 = *(_DWORD *)(v12 + 64);
        if (v19 && v18 != v19)
        {
          if (v18 >= v19)
          {
LABEL_39:
            sub_1CD46AEB4(v12 + 88, v13);
            uint64_t v35 = v12 + 136;
            goto LABEL_44;
          }
          goto LABEL_19;
        }
      }
      int v21 = *(_DWORD *)(v7 + 144);
      int v22 = *(_DWORD *)(v12 + 56);
      if (v21 != v22)
      {
        if (v21 >= v22) {
          goto LABEL_39;
        }
        goto LABEL_19;
      }
      BOOL v17 = *(_DWORD *)(v7 + 148) > *(_DWORD *)(v12 + 60);
    }
    if (!v17) {
      goto LABEL_39;
    }
LABEL_19:
    sub_1CD46AEB4(v12 + 88, v12);
    long long v23 = *(_OWORD *)(v12 + 64);
    *(_OWORD *)(v12 + 136) = *(_OWORD *)(v12 + 48);
    *(_OWORD *)(v12 + 152) = v23;
    *(_DWORD *)(v12 + 168) = *(_DWORD *)(v12 + 80);
    uint64_t v24 = v4;
    if (v12 == v4) {
      goto LABEL_43;
    }
    uint64_t v25 = v11;
    while (1)
    {
      unsigned int v26 = *(_DWORD *)(v7 + 140);
      unsigned int v27 = *(_DWORD *)(v4 + v25 - 36);
      if (v26 != v27)
      {
        if (v26 <= v27)
        {
          uint64_t v24 = v4 + v25;
          goto LABEL_43;
        }
        goto LABEL_36;
      }
      unsigned int v28 = *(_DWORD *)(v7 + 152);
      if (v28)
      {
        unsigned int v29 = *(_DWORD *)(v4 + v25 - 24);
        if (v29 && v28 != v29) {
          break;
        }
      }
      int v31 = *(_DWORD *)(v7 + 144);
      int v32 = *(_DWORD *)(v4 + v25 - 32);
      if (v31 == v32)
      {
        if (*(_DWORD *)(v7 + 148) <= *(_DWORD *)(v4 + v25 - 28)) {
          goto LABEL_42;
        }
      }
      else if (v31 >= v32)
      {
        goto LABEL_42;
      }
LABEL_36:
      v12 -= 88;
      sub_1CD46A1B4(v4 + v25, v4 + v25 - 88);
      uint64_t v33 = v4 + v25;
      sub_1CD46D2D8(v4 + v25 + 24, (__n128 *)(v4 + v25 - 64));
      long long v34 = *(_OWORD *)(v4 + v25 - 24);
      *(_OWORD *)(v33 + 48) = *(_OWORD *)(v33 - 40);
      *(_OWORD *)(v33 + 64) = v34;
      *(_DWORD *)(v33 + 80) = *(_DWORD *)(v33 - 8);
      v25 -= 88;
      if (!v25)
      {
        uint64_t v24 = v4;
        goto LABEL_43;
      }
    }
    if (v28 < v29) {
      goto LABEL_36;
    }
LABEL_42:
    uint64_t v24 = v12;
LABEL_43:
    sub_1CD46A1B4(v24, v13);
    sub_1CD46D2D8(v24 + 24, (__n128 *)(v7 + 112));
    uint64_t v35 = v24 + 48;
LABEL_44:
    long long v36 = *(_OWORD *)(v7 + 136);
    long long v37 = *(_OWORD *)(v7 + 152);
    *(_DWORD *)(v35 + 32) = *(_DWORD *)(v7 + 168);
    uint64_t v10 = v13 + 88;
    *(_OWORD *)uint64_t v35 = v36;
    *(_OWORD *)(v35 + 16) = v37;
    v11 += 88;
    uint64_t v12 = v14;
    uint64_t v7 = v13;
  }
  while ((_DWORD *)(v13 + 88) != a2);
}

void sub_1CC37E998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  if (!a5) {
    return;
  }
  while (a4 > a7 && a5 > a7)
  {
    if (!a4) {
      return;
    }
    uint64_t v13 = 0;
    unsigned int v14 = *(_DWORD *)(a2 + 52);
    uint64_t v15 = -a4;
    while (1)
    {
      unsigned int v16 = *(_DWORD *)(a1 + v13 + 52);
      BOOL v17 = v14 > v16;
      if (v14 != v16) {
        goto LABEL_15;
      }
      unsigned int v18 = *(_DWORD *)(a2 + 64);
      if (!v18 || ((unsigned int v19 = *(_DWORD *)(a1 + v13 + 64)) != 0 ? (v20 = v18 == v19) : (v20 = 1), v20))
      {
        int v21 = *(_DWORD *)(a2 + 56);
        int v22 = *(_DWORD *)(a1 + v13 + 56);
        if (v21 != v22)
        {
          if (v21 < v22) {
            break;
          }
          goto LABEL_21;
        }
        BOOL v17 = *(_DWORD *)(a2 + 60) > *(_DWORD *)(a1 + v13 + 60);
LABEL_15:
        if (v17) {
          break;
        }
        goto LABEL_21;
      }
      if (v18 < v19) {
        break;
      }
LABEL_21:
      v13 += 88;
      if (__CFADD__(v15++, 1)) {
        return;
      }
    }
    uint64_t v24 = -v15;
    uint64_t v25 = a1 + v13;
    if (-v15 >= a5)
    {
      if (v15 == -1)
      {
        uint64_t v132 = a1 + v13;
        uint64_t v147 = *(void *)(a1 + v13);
        *(void *)uint64_t v132 = 0;
        LODWORD(v148) = *(_DWORD *)(a1 + v13 + 8);
        *(_DWORD *)(v132 + 8) = 0;
        HIDWORD(v148) = *(_DWORD *)(a1 + v13 + 12);
        *(_DWORD *)(v132 + 12) = 0;
        int v149 = *(_DWORD *)(a1 + v13 + 16);
        *(_DWORD *)(v132 + 16) = 0;
        uint64_t v133 = (long long *)(a1 + v13 + 24);
        long long v150 = *v133;
        uint64_t v151 = *(void *)(a1 + v13 + 40);
        *(void *)(v132 + 24) = 0;
        *(void *)(v132 + 32) = 0;
        *(void *)(v132 + 40) = 0;
        long long v134 = *(_OWORD *)(a1 + v13 + 48);
        long long v135 = *(_OWORD *)(a1 + v13 + 64);
        int v154 = *(_DWORD *)(a1 + v13 + 80);
        long long v152 = v134;
        long long v153 = v135;
        sub_1CD46A1B4(a1 + v13, a2);
        sub_1CD46D2D8((uint64_t)v133, (__n128 *)(a2 + 24));
        long long v136 = *(_OWORD *)(a2 + 48);
        long long v137 = *(_OWORD *)(a2 + 64);
        *(_DWORD *)(v132 + 80) = *(_DWORD *)(a2 + 80);
        *(_OWORD *)(v132 + 48) = v136;
        *(_OWORD *)(v132 + 64) = v137;
        MEMORY[0x1D25D9CD0](*(void *)a2, 8);
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 0;
        *(void *)a2 = v147;
        *(void *)(a2 + 8) = v148;
        uint64_t v147 = 0;
        uint64_t v148 = 0;
        *(_DWORD *)(a2 + 16) = v149;
        int v149 = 0;
        unsigned int v138 = *(void **)(a2 + 24);
        if (v138)
        {
          *(void *)(a2 + 32) = v138;
          operator delete(v138);
        }
        *(_OWORD *)(a2 + 24) = v150;
        *(void *)(a2 + 40) = v151;
        long long v150 = 0uLL;
        uint64_t v151 = 0;
        int v139 = v154;
        long long v140 = v153;
        *(_OWORD *)(a2 + 48) = v152;
        *(_OWORD *)(a2 + 64) = v140;
        *(_DWORD *)(a2 + 80) = v139;
        sub_1CD456CB4(&v147);
        return;
      }
      if (v15 > 0) {
        uint64_t v24 = 1 - v15;
      }
      uint64_t v46 = v24 >> 1;
      if (a3 == a2)
      {
        uint64_t v54 = a3;
LABEL_76:
        uint64_t v36 = a1 + 88 * v46 + v13;
        uint64_t v27 = 0x2E8BA2E8BA2E8BA3 * ((v54 - a2) >> 3);
        goto LABEL_77;
      }
      unint64_t v47 = 0x2E8BA2E8BA2E8BA3 * ((a3 - a2) >> 3);
      long long v48 = (_DWORD *)(a1 + 88 * v46 + v13);
      unsigned int v49 = v48[13];
      int v50 = v48[14];
      long long v53 = v48 + 15;
      unsigned int v52 = v48[15];
      unsigned int v51 = v53[1];
      uint64_t v54 = a2;
      while (2)
      {
        unint64_t v55 = v47 >> 1;
        unint64_t v56 = v54 + 88 * (v47 >> 1);
        unsigned int v57 = *(_DWORD *)(v56 + 52);
        BOOL v58 = v57 > v49;
        if (v57 == v49)
        {
          unsigned int v59 = *(_DWORD *)(v54 + 88 * v55 + 64);
          if (v59) {
            BOOL v60 = v51 == 0;
          }
          else {
            BOOL v60 = 1;
          }
          if (!v60 && v59 != v51)
          {
            BOOL v63 = v59 < v51;
            goto LABEL_68;
          }
          int v62 = *(_DWORD *)(v54 + 88 * v55 + 56);
          if (v62 != v50)
          {
            BOOL v63 = v62 < v50;
LABEL_68:
            uint64_t v64 = v56 + 88;
            v47 += ~v55;
            if (v63) {
              uint64_t v54 = v64;
            }
            else {
              unint64_t v47 = v55;
            }
            if (!v47) {
              goto LABEL_76;
            }
            continue;
          }
          BOOL v58 = *(_DWORD *)(v54 + 88 * v55 + 60) > v52;
        }
        break;
      }
      BOOL v63 = v58;
      goto LABEL_68;
    }
    if (a5 >= 0) {
      uint64_t v26 = a5;
    }
    else {
      uint64_t v26 = a5 + 1;
    }
    uint64_t v27 = v26 >> 1;
    if (v25 != a2)
    {
      uint64_t v28 = a1 + v13;
      unint64_t v29 = 0x2E8BA2E8BA2E8BA3 * ((a2 - a1 - v13) >> 3);
      int v30 = (_DWORD *)(a2 + 88 * v27);
      unsigned int v31 = v30[13];
      int v32 = v30[14];
      uint64_t v35 = v30 + 15;
      unsigned int v34 = v30[15];
      unsigned int v33 = v35[1];
      uint64_t v36 = v25;
      while (1)
      {
        unint64_t v37 = v29 >> 1;
        unint64_t v38 = v36 + 88 * (v29 >> 1);
        unsigned int v39 = *(_DWORD *)(v38 + 52);
        BOOL v40 = v31 > v39;
        if (v31 == v39)
        {
          if (v33)
          {
            unsigned int v41 = *(_DWORD *)(v36 + 88 * v37 + 64);
            if (v41 && v33 != v41)
            {
              BOOL v44 = v33 < v41;
              goto LABEL_43;
            }
          }
          int v43 = *(_DWORD *)(v36 + 88 * v37 + 56);
          if (v32 != v43)
          {
            BOOL v44 = v32 < v43;
            goto LABEL_43;
          }
          BOOL v40 = v34 > *(_DWORD *)(v36 + 88 * v37 + 60);
        }
        BOOL v44 = v40;
LABEL_43:
        uint64_t v45 = v38 + 88;
        v29 += ~v37;
        if (v44) {
          unint64_t v29 = v37;
        }
        else {
          uint64_t v36 = v45;
        }
        if (!v29) {
          goto LABEL_74;
        }
      }
    }
    uint64_t v28 = a1 + v13;
    uint64_t v36 = a2;
LABEL_74:
    uint64_t v54 = a2 + 88 * v27;
    uint64_t v46 = 0x2E8BA2E8BA2E8BA3 * ((v36 - v28) >> 3);
LABEL_77:
    uint64_t v65 = v54;
    if (v36 != a2)
    {
      uint64_t v65 = v36;
      if (a2 != v54)
      {
        uint64_t v141 = v46;
        uint64_t v142 = v27;
        uint64_t v143 = v25;
        uint64_t v144 = a5;
        uint64_t v145 = a7;
        uint64_t v146 = a3;
        uint64_t v66 = 0;
        uint64_t v65 = a2;
        while (1)
        {
          uint64_t v67 = v36 + v66;
          uint64_t v68 = a2 + v66;
          uint64_t v147 = *(void *)(v36 + v66);
          *(void *)uint64_t v67 = 0;
          LODWORD(v148) = *(_DWORD *)(v36 + v66 + 8);
          *(_DWORD *)(v67 + 8) = 0;
          HIDWORD(v148) = *(_DWORD *)(v36 + v66 + 12);
          *(_DWORD *)(v67 + 12) = 0;
          int v149 = *(_DWORD *)(v36 + v66 + 16);
          *(_DWORD *)(v67 + 16) = 0;
          long long v150 = *(_OWORD *)(v36 + v66 + 24);
          uint64_t v151 = *(void *)(v36 + v66 + 40);
          *(void *)(v36 + v66 + 24) = 0;
          *(void *)(v67 + 32) = 0;
          *(void *)(v67 + 40) = 0;
          long long v69 = *(_OWORD *)(v36 + v66 + 48);
          long long v70 = *(_OWORD *)(v36 + v66 + 64);
          int v154 = *(_DWORD *)(v36 + v66 + 80);
          long long v152 = v69;
          long long v153 = v70;
          sub_1CD46A1B4(v36 + v66, a2 + v66);
          sub_1CD46D2D8(v36 + v66 + 24, (__n128 *)(a2 + v66 + 24));
          long long v71 = *(_OWORD *)(a2 + v66 + 48);
          long long v72 = *(_OWORD *)(a2 + v66 + 64);
          *(_DWORD *)(v67 + 80) = *(_DWORD *)(a2 + v66 + 80);
          *(_OWORD *)(v67 + 48) = v71;
          *(_OWORD *)(v67 + 64) = v72;
          MEMORY[0x1D25D9CD0](*(void *)(a2 + v66), 8);
          *(void *)uint64_t v68 = v147;
          uint64_t v147 = 0;
          *(void *)(v68 + 8) = v148;
          uint64_t v148 = 0;
          *(_DWORD *)(v68 + 16) = v149;
          int v149 = 0;
          int v73 = *(void **)(a2 + v66 + 24);
          if (v73)
          {
            *(void *)(v68 + 32) = v73;
            operator delete(v73);
          }
          *(_OWORD *)(v68 + 24) = v150;
          *(void *)(v68 + 40) = v151;
          long long v150 = 0uLL;
          uint64_t v151 = 0;
          long long v74 = v152;
          long long v75 = v153;
          *(_DWORD *)(v68 + 80) = v154;
          *(_OWORD *)(v68 + 48) = v74;
          *(_OWORD *)(v68 + 64) = v75;
          sub_1CD456CB4(&v147);
          uint64_t v76 = v36 + v66 + 88;
          if (v68 + 88 == v54) {
            break;
          }
          if (v76 == v65) {
            uint64_t v65 = v68 + 88;
          }
          v66 += 88;
        }
        if (v76 == v65)
        {
          a3 = v146;
        }
        else
        {
          uint64_t v77 = v36 + v66 + 88;
          uint64_t v78 = v77;
          uint64_t v79 = v65;
          a3 = v146;
          do
          {
            while (1)
            {
              uint64_t v147 = *(void *)v78;
              *(void *)uint64_t v78 = 0;
              LODWORD(v148) = *(_DWORD *)(v78 + 8);
              *(_DWORD *)(v78 + 8) = 0;
              HIDWORD(v148) = *(_DWORD *)(v78 + 12);
              *(_DWORD *)(v78 + 12) = 0;
              int v149 = *(_DWORD *)(v78 + 16);
              *(_DWORD *)(v78 + 16) = 0;
              long long v150 = *(_OWORD *)(v78 + 24);
              uint64_t v151 = *(void *)(v78 + 40);
              *(void *)(v78 + 24) = 0;
              *(void *)(v78 + 32) = 0;
              *(void *)(v78 + 40) = 0;
              long long v80 = *(_OWORD *)(v78 + 48);
              long long v81 = *(_OWORD *)(v78 + 64);
              int v154 = *(_DWORD *)(v78 + 80);
              long long v152 = v80;
              long long v153 = v81;
              sub_1CD46A1B4(v78, v65);
              sub_1CD46D2D8(v78 + 24, (__n128 *)(v65 + 24));
              long long v82 = *(_OWORD *)(v65 + 48);
              long long v83 = *(_OWORD *)(v65 + 64);
              *(_DWORD *)(v78 + 80) = *(_DWORD *)(v65 + 80);
              *(_OWORD *)(v78 + 48) = v82;
              *(_OWORD *)(v78 + 64) = v83;
              MEMORY[0x1D25D9CD0](*(void *)v65, 8);
              *(void *)uint64_t v65 = 0;
              *(void *)(v65 + 8) = 0;
              *(_DWORD *)(v65 + 16) = 0;
              *(void *)uint64_t v65 = v147;
              *(void *)(v65 + 8) = v148;
              uint64_t v147 = 0;
              uint64_t v148 = 0;
              *(_DWORD *)(v65 + 16) = v149;
              int v149 = 0;
              uint64_t v84 = *(void **)(v65 + 24);
              if (v84)
              {
                *(void *)(v65 + 32) = v84;
                operator delete(v84);
              }
              *(_OWORD *)(v65 + 24) = v150;
              *(void *)(v65 + 40) = v151;
              long long v150 = 0uLL;
              uint64_t v151 = 0;
              int v85 = v154;
              long long v86 = v153;
              *(_OWORD *)(v65 + 48) = v152;
              *(_OWORD *)(v65 + 64) = v86;
              *(_DWORD *)(v65 + 80) = v85;
              sub_1CD456CB4(&v147);
              uint64_t v87 = v78 + 88;
              v65 += 88;
              v78 += 88;
              if (v65 == v54) {
                break;
              }
              if (v78 == v79) {
                uint64_t v79 = v65;
              }
              uint64_t v78 = v87;
            }
            uint64_t v65 = v79;
          }
          while (v87 != v79);
          uint64_t v65 = v77;
        }
        a5 = v144;
        a7 = v145;
        uint64_t v27 = v142;
        uint64_t v25 = v143;
        uint64_t v46 = v141;
      }
    }
    a4 = -(v46 + v15);
    uint64_t v88 = a5 - v27;
    if (v46 + v27 >= a5 - (v46 + v27) - v15)
    {
      uint64_t v90 = v25;
      uint64_t v91 = v46;
      uint64_t v88 = v27;
      sub_1CC37E998(v65, v54, a3, a4, a5 - v27, a6, a7);
      uint64_t v89 = v90;
      uint64_t v54 = v36;
      a4 = v91;
      a3 = v65;
    }
    else
    {
      sub_1CC37E998(v25, v36, v65, v46, v27, a6, a7);
      uint64_t v89 = v65;
    }
    a5 = v88;
    a2 = v54;
    a1 = v89;
    if (!v88) {
      return;
    }
  }
  if (a4 <= a5)
  {
    if (a1 == a2) {
      return;
    }
    unint64_t v110 = 0;
    uint64_t v93 = 0;
    do
    {
      sub_1CD46AEB4((uint64_t)&a6[v110 / 8], a1 + v110);
      long long v111 = *(_OWORD *)(a1 + v110 + 48);
      long long v112 = *(_OWORD *)(a1 + v110 + 64);
      *(_DWORD *)(v113 + 80) = *(_DWORD *)(a1 + v110 + 80);
      *(_OWORD *)(v113 + 48) = v111;
      *(_OWORD *)(v113 + 64) = v112;
      ++v93;
      v110 += 88;
    }
    while (a1 + v110 != a2);
    if (!v110) {
      goto LABEL_151;
    }
    uint64_t v114 = (uint64_t)&a6[v110 / 8];
    uint64_t v115 = a1 + 24;
    uint64_t v116 = (uint64_t)a6;
    while (1)
    {
      if (a2 == a3)
      {
        sub_1CC37F3B0(v116, v114, v115 - 24);
        goto LABEL_151;
      }
      unsigned int v117 = *(_DWORD *)(a2 + 52);
      unsigned int v118 = *(_DWORD *)(v116 + 52);
      BOOL v119 = v117 > v118;
      if (v117 != v118) {
        goto LABEL_139;
      }
      unsigned int v120 = *(_DWORD *)(a2 + 64);
      if (v120)
      {
        unsigned int v121 = *(_DWORD *)(v116 + 64);
        if (v121)
        {
          if (v120 != v121)
          {
            if (v120 >= v121) {
              goto LABEL_143;
            }
            goto LABEL_141;
          }
        }
      }
      int v122 = *(_DWORD *)(a2 + 56);
      int v123 = *(_DWORD *)(v116 + 56);
      if (v122 == v123) {
        break;
      }
      if (v122 >= v123)
      {
LABEL_143:
        sub_1CD46A1B4(v115 - 24, v116);
        sub_1CD46D2D8(v115, (__n128 *)(v116 + 24));
        long long v126 = *(_OWORD *)(v116 + 48);
        long long v127 = *(_OWORD *)(v116 + 64);
        *(_DWORD *)(v115 + 56) = *(_DWORD *)(v116 + 80);
        *(_OWORD *)(v115 + 40) = v127;
        *(_OWORD *)(v115 + 24) = v126;
        v116 += 88;
        goto LABEL_144;
      }
LABEL_141:
      sub_1CD46A1B4(v115 - 24, a2);
      sub_1CD46D2D8(v115, (__n128 *)(a2 + 24));
      long long v124 = *(_OWORD *)(a2 + 48);
      long long v125 = *(_OWORD *)(a2 + 64);
      *(_DWORD *)(v115 + 56) = *(_DWORD *)(a2 + 80);
      *(_OWORD *)(v115 + 40) = v125;
      *(_OWORD *)(v115 + 24) = v124;
      a2 += 88;
LABEL_144:
      v115 += 88;
      if (v114 == v116) {
        goto LABEL_151;
      }
    }
    BOOL v119 = *(_DWORD *)(a2 + 60) > *(_DWORD *)(v116 + 60);
LABEL_139:
    if (!v119) {
      goto LABEL_143;
    }
    goto LABEL_141;
  }
  if (a2 == a3) {
    return;
  }
  unint64_t v92 = 0;
  uint64_t v93 = 0;
  do
  {
    sub_1CD46AEB4((uint64_t)&a6[v92 / 8], a2 + v92);
    long long v94 = *(_OWORD *)(a2 + v92 + 48);
    long long v95 = *(_OWORD *)(a2 + v92 + 64);
    *(_DWORD *)(v96 + 80) = *(_DWORD *)(a2 + v92 + 80);
    *(_OWORD *)(v96 + 48) = v94;
    *(_OWORD *)(v96 + 64) = v95;
    ++v93;
    v92 += 88;
  }
  while (a2 + v92 != a3);
  if (!v92) {
    goto LABEL_151;
  }
  uint64_t v97 = &a6[v92 / 8];
  uint64_t v98 = a3 - 40;
  while (a2 != a1)
  {
    uint64_t v99 = a2 - 88;
    unsigned int v100 = *((_DWORD *)v97 - 9);
    unsigned int v101 = *(_DWORD *)(a2 - 36);
    BOOL v102 = v100 > v101;
    if (v100 != v101) {
      goto LABEL_118;
    }
    unsigned int v103 = *((_DWORD *)v97 - 6);
    if (v103)
    {
      unsigned int v104 = *(_DWORD *)(a2 - 24);
      if (v104)
      {
        if (v103 != v104)
        {
          if (v103 >= v104) {
            goto LABEL_122;
          }
          goto LABEL_120;
        }
      }
    }
    int v105 = *((_DWORD *)v97 - 8);
    int v106 = *(_DWORD *)(a2 - 32);
    if (v105 == v106)
    {
      BOOL v102 = *((_DWORD *)v97 - 7) > *(_DWORD *)(a2 - 28);
LABEL_118:
      if (!v102) {
        goto LABEL_122;
      }
      goto LABEL_120;
    }
    if (v105 >= v106)
    {
LABEL_122:
      uint64_t v99 = (uint64_t)(v97 - 11);
      uint64_t v107 = (uint64_t)v97;
      v97 -= 11;
      goto LABEL_123;
    }
LABEL_120:
    uint64_t v107 = a2;
    a2 -= 88;
LABEL_123:
    sub_1CD46A1B4(v98 - 48, v99);
    sub_1CD46D2D8(v98 - 24, (__n128 *)(v107 - 64));
    long long v108 = *(_OWORD *)(v107 - 40);
    long long v109 = *(_OWORD *)(v107 - 24);
    *(_DWORD *)(v98 + 32) = *(_DWORD *)(v107 - 8);
    *(_OWORD *)uint64_t v98 = v108;
    *(_OWORD *)(v98 + 16) = v109;
    v98 -= 88;
    if (v97 == a6) {
      goto LABEL_151;
    }
  }
  if (v97 != a6)
  {
    uint64_t v128 = 0;
    do
    {
      uint64_t v129 = v98 + v128 * 8;
      sub_1CD46A1B4(v98 + v128 * 8 - 48, (uint64_t)&v97[v128 - 11]);
      sub_1CD46D2D8(v98 + v128 * 8 - 24, (__n128 *)&v97[v128 - 8]);
      long long v130 = *(_OWORD *)&v97[v128 - 5];
      long long v131 = *(_OWORD *)&v97[v128 - 3];
      *(_DWORD *)(v129 + 32) = v97[v128 - 1];
      *(_OWORD *)uint64_t v129 = v130;
      *(_OWORD *)(v129 + 16) = v131;
      v128 -= 11;
    }
    while (&v97[v128] != a6);
  }
LABEL_151:
  if (a6)
  {
    do
    {
      sub_1CD456CB4(a6);
      a6 += 11;
      --v93;
    }
    while (v93);
  }
}

__n128 sub_1CC37F3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a3 + 24;
    uint64_t v5 = a1 + 24;
    do
    {
      sub_1CD46A1B4(v4 - 24, v5 - 24);
      sub_1CD46D2D8(v4, (__n128 *)v5);
      __n128 result = *(__n128 *)(v5 + 24);
      long long v7 = *(_OWORD *)(v5 + 40);
      *(_DWORD *)(v4 + 56) = *(_DWORD *)(v5 + 56);
      *(_OWORD *)(v4 + 40) = v7;
      *(__n128 *)(v4 + 24) = result;
      v4 += 88;
      uint64_t v8 = v5 + 64;
      v5 += 88;
    }
    while (v8 != a2);
  }
  return result;
}

void sub_1CC37F430(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 3);
    if ((unint64_t)(v7 + 1) > 0x492492492492492) {
      abort();
    }
    unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - *a1) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x249249249249249) {
      unint64_t v10 = 0x492492492492492;
    }
    else {
      unint64_t v10 = v9;
    }
    int v21 = a1 + 2;
    if (v10 > 0x492492492492492) {
      sub_1CB833614();
    }
    uint64_t v11 = 56 * v10;
    uint64_t v12 = (char *)operator new(56 * v10);
    uint64_t v13 = &v12[56 * v7];
    __p = v12;
    unsigned int v18 = v13;
    BOOL v20 = &v12[v11];
    *(void *)uint64_t v13 = *(void *)a2;
    *((void *)v13 + 1) = v13 + 24;
    *((void *)v13 + 2) = 0x400000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD41C56C((uint64_t)(v13 + 8), a2 + 8);
    }
    unsigned int v19 = v13 + 56;
    sub_1CD542D6C(a1, &__p);
    uint64_t v6 = (void *)a1[1];
    unsigned int v14 = v18;
    for (uint64_t i = v19; i != v14; i -= 56)
    {
      unsigned int v16 = (char *)*((void *)i - 6);
      if (i - 32 != v16) {
        free(v16);
      }
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *uint64_t v5 = *(void *)a2;
    v5[1] = v5 + 3;
    void v5[2] = 0x400000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD41C56C((uint64_t)(v5 + 1), a2 + 8);
    }
    uint64_t v6 = v5 + 7;
  }
  a1[1] = (uint64_t)v6;
}

void *sub_1CC37F5D8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    unsigned int v18 = 0;
LABEL_15:
    __n128 result = sub_1CC21DC7C(a1, (uint64_t)a2, a2, v18);
    *__n128 result = *a2;
    *((_DWORD *)result + 2) = *a3;
    uint64_t v9 = *(void *)a1;
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    char v17 = 1;
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)a1;
  unsigned int v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
  __n128 result = (void *)(*(void *)a1 + 16 * v10);
  uint64_t v12 = *result;
  if (*a2 != *result)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = result;
      }
      unsigned int v16 = v10 + v14++;
      unsigned int v10 = v16 & (v8 - 1);
      __n128 result = (void *)(v9 + 16 * v10);
      uint64_t v12 = *result;
      if (*a2 == *result) {
        goto LABEL_11;
      }
    }
    if (v13) {
      unsigned int v18 = v13;
    }
    else {
      unsigned int v18 = result;
    }
    goto LABEL_15;
  }
LABEL_11:
  char v17 = 0;
LABEL_16:
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v9 + 16 * v8;
  *(unsigned char *)(a4 + 16) = v17;
  return result;
}

BOOL sub_1CC37F6C8(uint64_t a1, unsigned __int16 a2, uint64_t a3)
{
  int8x8_t v11 = 0;
  int8x8_t v12 = 0;
  unsigned int v5 = sub_1CC37F764((uint64_t *)a1, a2, &v12);
  unsigned int v6 = sub_1CC37F764((uint64_t *)a1, *(_WORD *)(*(void *)(a3 + 16) + 6), &v11);
  if (v5 != v6) {
    return v5 > v6;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  int v9 = *(_DWORD *)(a1 + 32);
  unsigned int v10 = sub_1CD542E44(v8, v9, *(void *)&v12);
  return v10 < sub_1CD542E44(v8, v9, *(void *)&v11);
}

uint64_t sub_1CC37F764(uint64_t *a1, unsigned __int16 a2, int8x8_t *a3)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = *(void *)(v3 + 96);
    if (v4)
    {
      uint64_t v5 = v4 + 10 * a2;
      uint64_t v6 = *(unsigned __int16 *)(v5 + 2);
      unsigned int v7 = *(unsigned __int16 *)(v5 + 4);
      if (v6 != v7)
      {
        uint64_t v8 = *(void *)(v3 + 72);
        uint64_t v9 = 3 * v6;
        uint64_t v10 = 24 * v7 - 8 * v9;
        int8x8_t v11 = (int8x8_t *)(v8 + 8 * v9 + 8);
        uint64_t result = 0xFFFFFFFFLL;
        do
        {
          int8x8_t v14 = *v11;
          v11 += 3;
          int8x8_t v13 = v14;
          uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
          v15.i16[0] = vaddlv_u8(v15);
          if (result > v15.i32[0])
          {
            *a3 = v13;
            uint64_t result = v15.u32[0];
          }
          v10 -= 24;
        }
        while (v10);
        return result;
      }
      return 0xFFFFFFFFLL;
    }
  }
  uint64_t v16 = a1[1];
  uint64_t v17 = *(void *)(v16 + 160);
  uint64_t v18 = *(void *)(v17 + 40);
  if ((~*(unsigned __int16 *)(v18 + 24 * a2 + 8) & 0x1FFF) == 0) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v19 = v18 + 24 * a2;
  if (!*(_WORD *)(v19 + 12)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = *(void *)(v16 + 136);
  uint64_t v21 = 4 * *(unsigned __int16 *)(v19 + 12);
  int v22 = (_WORD *)(v20 + 4 * *(unsigned __int16 *)(v19 + 10) + 2);
  uint64_t result = 0xFFFFFFFFLL;
  do
  {
    if (*v22)
    {
      int8x8_t v23 = (int8x8_t)(unsigned __int16)*(v22 - 1);
      uint64_t v24 = *(unsigned int *)(*(void *)(v17 + 32) + 32 * *(void *)&v23 + 8);
      if (v24 < result)
      {
        *a3 = v23;
        uint64_t result = v24;
      }
    }
    v22 += 2;
    v21 -= 4;
  }
  while (v21);
  return result;
}

BOOL sub_1CC37F870(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    BOOL v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = *v8;
    int8x8_t v11 = (uint64_t *)(a2 - 8);
    uint64_t v10 = *(void *)(a2 - 8);
    uint64_t result = sub_1CC37F6C8(a3, *(_WORD *)(*(void *)(*v8 + 16) + 6), v10);
    if (result)
    {
      do
      {
        int8x8_t v12 = v8;
        uint64_t *v11 = v9;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        uint64_t v9 = *v8;
        uint64_t result = sub_1CC37F6C8(a3, *(_WORD *)(*(void *)(*v8 + 16) + 6), v10);
        int8x8_t v11 = v12;
      }
      while (result);
      uint64_t *v12 = v10;
    }
  }
  return result;
}

uint64_t *sub_1CC37F920(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = a2 - v10;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v39 = *(a2 - 1);
                uint64_t v40 = *v10;
                if (*(_DWORD *)(v39 + 192) > *(_DWORD *)(*v10 + 192))
                {
                  uint64_t *v10 = v39;
                  *(a2 - 1) = v40;
                }
                break;
              case 3:
                uint64_t result = sub_1CC38004C(v10, v10 + 1, a2 - 1);
                break;
              case 4:
                uint64_t result = sub_1CC3802E0(v10, v10 + 1, v10 + 2, a2 - 1);
                break;
              case 5:
                unsigned int v41 = v10 + 1;
                unsigned int v42 = v10 + 2;
                int v43 = v10 + 3;
                uint64_t result = sub_1CC3802E0(v10, v10 + 1, v10 + 2, v10 + 3);
                uint64_t v44 = *(a2 - 1);
                uint64_t v45 = v10[3];
                if (*(_DWORD *)(v44 + 192) > *(_DWORD *)(v45 + 192))
                {
                  uint64_t *v43 = v44;
                  *(a2 - 1) = v45;
                  uint64_t v46 = *v43;
                  uint64_t v47 = *v42;
                  unsigned int v48 = *(_DWORD *)(*v43 + 192);
                  if (v48 > *(_DWORD *)(*v42 + 192))
                  {
                    *unsigned int v42 = v46;
                    uint64_t *v43 = v47;
                    uint64_t v49 = *v41;
                    if (v48 > *(_DWORD *)(*v41 + 192))
                    {
                      v10[1] = v46;
                      v10[2] = v49;
                      uint64_t v50 = *v10;
                      if (v48 > *(_DWORD *)(*v10 + 192))
                      {
                        uint64_t *v10 = v46;
                        v10[1] = v50;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            unsigned int v51 = v10 + 1;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 8;
                unint64_t v55 = v10;
                do
                {
                  uint64_t v57 = *v55;
                  uint64_t v56 = v55[1];
                  unint64_t v55 = v51;
                  unsigned int v58 = *(_DWORD *)(v56 + 192);
                  if (v58 > *(_DWORD *)(v57 + 192))
                  {
                    uint64_t v59 = v54;
                    do
                    {
                      *(uint64_t *)((char *)v10 + v59) = v57;
                      uint64_t v60 = v59 - 8;
                      if (v59 == 8)
                      {
                        unsigned int v61 = v10;
                        goto LABEL_85;
                      }
                      uint64_t v57 = *(uint64_t *)((char *)v10 + v59 - 16);
                      v59 -= 8;
                    }
                    while (v58 > *(_DWORD *)(v57 + 192));
                    unsigned int v61 = (uint64_t *)((char *)v10 + v60);
LABEL_85:
                    *unsigned int v61 = v56;
                  }
                  unsigned int v51 = v55 + 1;
                  v54 += 8;
                }
                while (v55 + 1 != a2);
              }
            }
            else if (!v53)
            {
              do
              {
                uint64_t v91 = *v9;
                uint64_t v90 = v9[1];
                uint64_t v9 = v51;
                unsigned int v92 = *(_DWORD *)(v90 + 192);
                if (v92 > *(_DWORD *)(v91 + 192))
                {
                  do
                  {
                    *unsigned int v51 = v91;
                    uint64_t v91 = *(v51 - 2);
                    --v51;
                  }
                  while (v92 > *(_DWORD *)(v91 + 192));
                  *unsigned int v51 = v90;
                }
                unsigned int v51 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v62 = (unint64_t)(v12 - 2) >> 1;
              int64_t v63 = v62;
              do
              {
                int64_t v64 = v63;
                if (v62 >= v63)
                {
                  uint64_t v65 = (2 * v63) | 1;
                  uint64_t v66 = &v10[v65];
                  uint64_t v67 = *v66;
                  if (2 * v64 + 2 < v12 && *(_DWORD *)(v67 + 192) > *(_DWORD *)(v66[1] + 192))
                  {
                    uint64_t v67 = v66[1];
                    ++v66;
                    uint64_t v65 = 2 * v64 + 2;
                  }
                  uint64_t result = &v10[v64];
                  uint64_t v68 = *result;
                  unsigned int v69 = *(_DWORD *)(*result + 192);
                  if (*(_DWORD *)(v67 + 192) <= v69)
                  {
                    do
                    {
                      long long v70 = v66;
                      *uint64_t result = v67;
                      if (v62 < v65) {
                        break;
                      }
                      uint64_t v71 = (2 * v65) | 1;
                      uint64_t v66 = &v10[v71];
                      uint64_t v72 = 2 * v65 + 2;
                      uint64_t v67 = *v66;
                      if (v72 < v12 && *(_DWORD *)(v67 + 192) > *(_DWORD *)(v66[1] + 192))
                      {
                        uint64_t v67 = v66[1];
                        ++v66;
                        uint64_t v71 = v72;
                      }
                      uint64_t result = v70;
                      uint64_t v65 = v71;
                    }
                    while (*(_DWORD *)(v67 + 192) <= v69);
                    *long long v70 = v68;
                  }
                }
                int64_t v63 = v64 - 1;
              }
              while (v64);
              do
              {
                uint64_t v73 = 0;
                uint64_t v74 = *v10;
                long long v75 = v10;
                do
                {
                  uint64_t v76 = &v75[v73];
                  uint64_t v79 = v76[1];
                  uint64_t v77 = v76 + 1;
                  uint64_t v78 = v79;
                  uint64_t v80 = (2 * v73) | 1;
                  uint64_t v81 = 2 * v73 + 2;
                  if (v81 < v12)
                  {
                    uint64_t result = (uint64_t *)*(unsigned int *)(v78 + 192);
                    if (result > *(_DWORD *)(v77[1] + 192))
                    {
                      uint64_t v78 = v77[1];
                      ++v77;
                      uint64_t v80 = v81;
                    }
                  }
                  uint64_t *v75 = v78;
                  long long v75 = v77;
                  uint64_t v73 = v80;
                }
                while (v80 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if (v77 == --a2)
                {
                  *uint64_t v77 = v74;
                }
                else
                {
                  *uint64_t v77 = *a2;
                  *a2 = v74;
                  uint64_t v82 = (char *)v77 - (char *)v10 + 8;
                  if (v82 >= 9)
                  {
                    unint64_t v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                    uint64_t v84 = &v10[v83];
                    uint64_t v85 = *v84;
                    uint64_t v86 = *v77;
                    unsigned int v87 = *(_DWORD *)(*v77 + 192);
                    if (*(_DWORD *)(*v84 + 192) > v87)
                    {
                      do
                      {
                        uint64_t v88 = v84;
                        *uint64_t v77 = v85;
                        if (!v83) {
                          break;
                        }
                        unint64_t v83 = (v83 - 1) >> 1;
                        uint64_t v84 = &v10[v83];
                        uint64_t v85 = *v84;
                        uint64_t v77 = v88;
                      }
                      while (*(_DWORD *)(*v84 + 192) > v87);
                      *uint64_t v88 = v86;
                    }
                  }
                }
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          int8x8_t v14 = &v10[(unint64_t)v12 >> 1];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1CC38004C(v9, &v9[(unint64_t)v12 >> 1], a2 - 1);
            sub_1CC38004C(v9 + 1, v14 - 1, a2 - 2);
            sub_1CC38004C(v9 + 2, &v9[v13 + 1], a2 - 3);
            uint64_t result = sub_1CC38004C(v14 - 1, v14, &v9[v13 + 1]);
            uint64_t v15 = *v9;
            *uint64_t v9 = *v14;
            uint64_t *v14 = v15;
          }
          else
          {
            uint64_t result = sub_1CC38004C(&v9[(unint64_t)v12 >> 1], v9, a2 - 1);
          }
          --a3;
          uint64_t v16 = *v9;
          if (a4) {
            break;
          }
          unsigned int v17 = *(_DWORD *)(v16 + 192);
          if (*(_DWORD *)(*(v9 - 1) + 192) > v17) {
            goto LABEL_13;
          }
          if (v17 <= *(_DWORD *)(*(a2 - 1) + 192))
          {
            unsigned int v31 = v9 + 1;
            do
            {
              uint64_t v10 = v31;
              if (v31 >= a2) {
                break;
              }
              ++v31;
            }
            while (v17 <= *(_DWORD *)(*v10 + 192));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v30 = v10[1];
              ++v10;
            }
            while (v17 <= *(_DWORD *)(v30 + 192));
          }
          int v32 = a2;
          if (v10 < a2)
          {
            int v32 = a2;
            do
              uint64_t v33 = *--v32;
            while (v17 > *(_DWORD *)(v33 + 192));
          }
          if (v10 < v32)
          {
            uint64_t v34 = *v10;
            uint64_t v35 = *v32;
            do
            {
              uint64_t *v10 = v35;
              *int v32 = v34;
              do
              {
                uint64_t v36 = v10[1];
                ++v10;
                uint64_t v34 = v36;
              }
              while (v17 <= *(_DWORD *)(v36 + 192));
              do
              {
                uint64_t v37 = *--v32;
                uint64_t v35 = v37;
              }
              while (v17 > *(_DWORD *)(v37 + 192));
            }
            while (v10 < v32);
          }
          unint64_t v38 = v10 - 1;
          BOOL v4 = v10 - 1 >= v9;
          BOOL v5 = v10 - 1 == v9;
          if (v10 - 1 != v9) {
            *uint64_t v9 = *v38;
          }
          a4 = 0;
          *unint64_t v38 = v16;
        }
        unsigned int v17 = *(_DWORD *)(v16 + 192);
LABEL_13:
        uint64_t v18 = 0;
        do
          uint64_t v19 = v9[++v18];
        while (*(_DWORD *)(v19 + 192) > v17);
        uint64_t v20 = &v9[v18];
        uint64_t v21 = a2;
        if (v18 == 1)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= v21) {
              break;
            }
            uint64_t v23 = *--v21;
          }
          while (*(_DWORD *)(v23 + 192) <= v17);
        }
        else
        {
          do
            uint64_t v22 = *--v21;
          while (*(_DWORD *)(v22 + 192) <= v17);
        }
        if (v20 >= v21)
        {
          uint64_t v10 = &v9[v18];
        }
        else
        {
          uint64_t v24 = *v21;
          uint64_t v10 = &v9[v18];
          uint64_t v25 = v21;
          do
          {
            uint64_t *v10 = v24;
            *uint64_t v25 = v19;
            do
            {
              uint64_t v26 = v10[1];
              ++v10;
              uint64_t v19 = v26;
            }
            while (*(_DWORD *)(v26 + 192) > v17);
            do
            {
              uint64_t v27 = *--v25;
              uint64_t v24 = v27;
            }
            while (*(_DWORD *)(v27 + 192) <= v17);
          }
          while (v10 < v25);
        }
        uint64_t v28 = v10 - 1;
        if (v10 - 1 != v9) {
          *uint64_t v9 = *v28;
        }
        *uint64_t v28 = v16;
        if (v20 >= v21) {
          break;
        }
LABEL_34:
        uint64_t result = (uint64_t *)sub_1CC37F920(v9, v10 - 1, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CC3800D4(v9, v10 - 1);
      uint64_t result = (uint64_t *)sub_1CC3800D4(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 1;
    if (!v29) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CC38004C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *result;
  unsigned int v5 = *(_DWORD *)(*a2 + 192);
  unsigned int v6 = *(_DWORD *)(*result + 192);
  uint64_t v7 = *a3;
  unsigned int v8 = *(_DWORD *)(*a3 + 192);
  if (v5 <= v6)
  {
    if (v8 > v5)
    {
      *a2 = v7;
      *a3 = v3;
      uint64_t v9 = *result;
      if (*(_DWORD *)(*a2 + 192) > *(_DWORD *)(*result + 192))
      {
        *uint64_t result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 <= v5)
    {
      *uint64_t result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 192) <= v6) {
        return result;
      }
      *a2 = *a3;
    }
    else
    {
      *uint64_t result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1CC3800D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 192) > *(_DWORD *)(*a1 + 192))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC38004C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC3802E0(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      uint64_t v18 = a1 + 1;
      uint64_t v19 = a1 + 2;
      uint64_t v20 = a1 + 3;
      sub_1CC3802E0(a1, a1 + 1, a1 + 2, a1 + 3);
      uint64_t v21 = *(a2 - 1);
      uint64_t v22 = a1[3];
      if (*(_DWORD *)(v21 + 192) > *(_DWORD *)(v22 + 192))
      {
        *uint64_t v20 = v21;
        *(a2 - 1) = v22;
        uint64_t v23 = *v20;
        uint64_t v24 = *v19;
        unsigned int v25 = *(_DWORD *)(*v20 + 192);
        if (v25 > *(_DWORD *)(*v19 + 192))
        {
          *uint64_t v19 = v23;
          *uint64_t v20 = v24;
          uint64_t v26 = *v18;
          if (v25 > *(_DWORD *)(*v18 + 192))
          {
            a1[1] = v23;
            a1[2] = v26;
            uint64_t v27 = *a1;
            if (v25 > *(_DWORD *)(*a1 + 192))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      unsigned int v8 = a1 + 2;
      sub_1CC38004C(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)(*v9 + 192);
    if (v14 > *(_DWORD *)(*v8 + 192))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 <= *(_DWORD *)(v13 + 192))
        {
          unsigned int v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      unsigned int v17 = a1;
LABEL_13:
      *unsigned int v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unsigned int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CC3802E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CC38004C(a1, a2, a3);
  uint64_t v9 = *a3;
  if (*(_DWORD *)(*a4 + 192) > *(_DWORD *)(*a3 + 192))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a2;
    if (*(_DWORD *)(*a3 + 192) > *(_DWORD *)(*a2 + 192))
    {
      *a2 = *a3;
      *a3 = v10;
      uint64_t v11 = *a1;
      if (*(_DWORD *)(*a2 + 192) > *(_DWORD *)(*a1 + 192))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1CC380378(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_1CD4C9788(***(void ***)a1, *(_DWORD *)(**(void **)a1 + 16), *a2, &v7);
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = 0;
    if (sub_1CD4C9788(*(void *)v6, *(_DWORD *)(v6 + 16), *a2, &v7))
    {
      *uint64_t v7 = -8192;
      *(int32x2_t *)(v6 + 8) = vadd_s32(*(int32x2_t *)(v6 + 8), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  return v4;
}

uint64_t sub_1CC380418(_DWORD *a1, uint64_t a2)
{
  unsigned int v5 = 0;
  uint64_t result = sub_1CD5434AC((uint64_t)a1, a2, &v5);
  if (result)
  {
    *unsigned int v5 = -8192;
    int v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

void *sub_1CC38046C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1CB8465A8(a1, v7);
      unsigned int v17 = 0;
      sub_1CBA0E618(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    uint64_t v8 = *a4;
    goto LABEL_5;
  }
  sub_1CB8465A8(a1, 2 * v7);
  uint64_t v8 = *a3;
  int v10 = *(_DWORD *)(a1 + 16) - 1;
  unsigned int v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (void *)(*(void *)a1 + 16 * v11);
  uint64_t v12 = *a4;
  if (*a3 != *a4)
  {
    uint64_t v13 = 0;
    int v14 = 1;
    while (v12 != -4096)
    {
      if (v13) {
        BOOL v15 = 0;
      }
      else {
        BOOL v15 = v12 == -8192;
      }
      if (v15) {
        uint64_t v13 = a4;
      }
      unsigned int v16 = v11 + v14++;
      unsigned int v11 = v16 & v10;
      a4 = (void *)(*(void *)a1 + 16 * v11);
      uint64_t v12 = *a4;
      if (v8 == *a4) {
        goto LABEL_5;
      }
    }
    if (v13) {
      a4 = v13;
    }
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

void *sub_1CC3805A0(uint64_t a1, char **a2, char *a3, char **a4, char *a5, void *a6, char *a7)
{
  if (a2 == a4)
  {
    uint64_t result = sub_1CC08ECDC(&v24, a3, a5, a6, a7);
    *(void *)a1 = a4;
    *(void *)(a1 + 8) = a5;
    long long v23 = v25;
  }
  else
  {
    uint64_t v12 = a4 - 1;
    sub_1CC08ECDC(&v24, *a4, a5, a6, a7);
    int v14 = (char *)*((void *)&v25 + 1);
    uint64_t v13 = (void *)v25;
    if (v12 != a2)
    {
      BOOL v15 = *(char **)v25;
      do
      {
        unsigned int v16 = *v12;
        unsigned int v17 = *v12 + 4096;
        while (1)
        {
          uint64_t v18 = v14 - v15;
          if ((v17 - v16) >> 3 >= v18 >> 3) {
            uint64_t v19 = v18 >> 3;
          }
          else {
            uint64_t v19 = (v17 - v16) >> 3;
          }
          v17 -= 8 * v19;
          v14 -= 8 * v19;
          if (v19) {
            memmove(v14, v17, 8 * v19);
          }
          if (v17 == v16) {
            break;
          }
          uint64_t v20 = (char *)*--v13;
          BOOL v15 = v20;
          int v14 = v20 + 4096;
        }
        BOOL v15 = (char *)*v13;
        if ((char *)(*v13 + 4096) == v14)
        {
          uint64_t v21 = (char *)v13[1];
          ++v13;
          BOOL v15 = v21;
          int v14 = v21;
        }
        --v12;
      }
      while (v12 != a2);
    }
    uint64_t result = sub_1CC08ECDC(&v24, a3, *a2 + 4096, v13, v14);
    long long v23 = v25;
    *(void *)a1 = a4;
    *(void *)(a1 + 8) = a5;
  }
  *(_OWORD *)(a1 + 16) = v23;
  return result;
}

void ****sub_1CC3806EC(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, void ***a5)
{
  unsigned int v11 = a5;
  if (a1 != a3)
  {
    unsigned int v7 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4096); ; uint64_t i = v9 + 4096)
    {
      sub_1CC08F37C(&v11, a2, i);
      if (v7 == a3) {
        break;
      }
      uint64_t v9 = (unsigned char *)*v7++;
      a2 = v9;
    }
    a2 = *a3;
  }
  return sub_1CC08F37C(&v11, a2, a4);
}

unint64_t *sub_1CC380764(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
  while (2)
  {
    unint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (uint64_t)a2 - v10;
          uint64_t v12 = (uint64_t)((uint64_t)a2 - v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                unint64_t v39 = *(a2 - 2);
                unint64_t v40 = *(void *)v10;
                if (v39 < *(void *)v10)
                {
                  *(void *)unint64_t v10 = v39;
                  *(a2 - 2) = v40;
                  int v41 = *(_DWORD *)(v10 + 8);
                  *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v41;
                }
                break;
              case 3:
                uint64_t result = sub_1CC380F04((unint64_t *)v10, (unint64_t *)(v10 + 16), a2 - 2);
                break;
              case 4:
                uint64_t result = sub_1CC3811F4(v10, v10 + 16, v10 + 32, (uint64_t)(a2 - 2));
                break;
              case 5:
                uint64_t result = sub_1CC3811F4(v10, v10 + 16, v10 + 32, v10 + 48);
                unint64_t v42 = *(a2 - 2);
                unint64_t v43 = *(void *)(v10 + 48);
                if (v42 < v43)
                {
                  *(void *)(v10 + 48) = v42;
                  *(a2 - 2) = v43;
                  int v44 = *(_DWORD *)(v10 + 56);
                  *(_DWORD *)(v10 + 56) = *((_DWORD *)a2 - 2);
                  *((_DWORD *)a2 - 2) = v44;
                  unint64_t v45 = *(void *)(v10 + 48);
                  unint64_t v46 = *(void *)(v10 + 32);
                  if (v45 < v46)
                  {
                    *(void *)(v10 + 32) = v45;
                    *(void *)(v10 + 48) = v46;
                    int v47 = *(_DWORD *)(v10 + 40);
                    int v48 = *(_DWORD *)(v10 + 56);
                    *(_DWORD *)(v10 + 40) = v48;
                    *(_DWORD *)(v10 + 56) = v47;
                    unint64_t v49 = *(void *)(v10 + 16);
                    if (v45 < v49)
                    {
                      *(void *)(v10 + 16) = v45;
                      *(void *)(v10 + 32) = v49;
                      int v50 = *(_DWORD *)(v10 + 24);
                      *(_DWORD *)(v10 + 24) = v48;
                      *(_DWORD *)(v10 + 40) = v50;
                      unint64_t v51 = *(void *)v10;
                      if (v45 < *(void *)v10)
                      {
                        *(void *)unint64_t v10 = v45;
                        *(void *)(v10 + 16) = v51;
                        int v52 = *(_DWORD *)(v10 + 8);
                        *(_DWORD *)(v10 + 8) = v48;
                        *(_DWORD *)(v10 + 24) = v52;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            BOOL v53 = (unint64_t *)(v10 + 16);
            BOOL v55 = (unint64_t *)v10 == a2 || v53 == a2;
            if (a4)
            {
              if (!v55)
              {
                uint64_t v56 = 0;
                uint64_t v57 = (unint64_t *)v10;
                do
                {
                  unsigned int v58 = v53;
                  unint64_t v59 = v57[2];
                  unint64_t v60 = *v57;
                  if (v59 < *v57)
                  {
                    unint64_t v61 = v57[3];
                    uint64_t v62 = v56;
                    while (1)
                    {
                      uint64_t v63 = v10 + v62;
                      *(void *)(v63 + 16) = v60;
                      *(_DWORD *)(v63 + 24) = *(_DWORD *)(v10 + v62 + 8);
                      if (!v62) {
                        break;
                      }
                      unint64_t v60 = *(void *)(v63 - 16);
                      v62 -= 16;
                      if (v59 >= v60)
                      {
                        uint64_t v64 = v10 + v62 + 16;
                        goto LABEL_85;
                      }
                    }
                    uint64_t v64 = v10;
LABEL_85:
                    *(void *)uint64_t v64 = v59;
                    *(_DWORD *)(v64 + 8) = v61;
                  }
                  BOOL v53 = v58 + 2;
                  v56 += 16;
                  uint64_t v57 = v58;
                }
                while (v58 + 2 != a2);
              }
            }
            else if (!v55)
            {
              unsigned int v92 = (_DWORD *)(v10 + 24);
              do
              {
                unint64_t v93 = (unint64_t)v53;
                unint64_t v94 = *(void *)(v9 + 16);
                unint64_t v95 = *(void *)v9;
                if (v94 < *(void *)v9)
                {
                  uint64_t v96 = *(void *)(v9 + 24);
                  uint64_t v97 = v92;
                  do
                  {
                    uint64_t v98 = v97;
                    *((void *)v97 - 1) = v95;
                    int v99 = *(v97 - 4);
                    v97 -= 4;
                    *uint64_t v98 = v99;
                    unint64_t v95 = *((void *)v98 - 5);
                  }
                  while (v94 < v95);
                  *((void *)v97 - 1) = v94;
                  *uint64_t v97 = v96;
                }
                BOOL v53 = (unint64_t *)(v93 + 16);
                v92 += 4;
                unint64_t v9 = v93;
              }
              while ((unint64_t *)(v93 + 16) != a2);
            }
            return result;
          }
          if (!a3)
          {
            if ((unint64_t *)v10 != a2)
            {
              int64_t v65 = (unint64_t)(v12 - 2) >> 1;
              int64_t v66 = v65;
              do
              {
                int64_t v67 = v66;
                if (v65 >= v66)
                {
                  uint64_t v68 = (2 * v66) | 1;
                  unint64_t v69 = v10 + 16 * v68;
                  unint64_t v70 = *(void *)v69;
                  if (2 * v67 + 2 < v12 && v70 < *(void *)(v69 + 16))
                  {
                    unint64_t v70 = *(void *)(v69 + 16);
                    v69 += 16;
                    uint64_t v68 = 2 * v67 + 2;
                  }
                  uint64_t v71 = (unint64_t *)(v10 + 16 * v67);
                  unint64_t v72 = *v71;
                  if (v70 >= *v71)
                  {
                    unint64_t v73 = v71[1];
                    unint64_t v74 = *(void *)v69;
                    do
                    {
                      long long v75 = v71;
                      uint64_t v71 = (unint64_t *)v69;
                      unint64_t *v75 = v74;
                      *((_DWORD *)v75 + 2) = *(_DWORD *)(v69 + 8);
                      if (v65 < v68) {
                        break;
                      }
                      uint64_t v76 = (2 * v68) | 1;
                      unint64_t v69 = v10 + 16 * v76;
                      uint64_t v68 = 2 * v68 + 2;
                      unint64_t v74 = *(void *)v69;
                      if (v68 < v12)
                      {
                        uint64_t result = (unint64_t *)(v69 + 16);
                        if (v74 >= *(void *)(v69 + 16))
                        {
                          uint64_t v68 = v76;
                        }
                        else
                        {
                          unint64_t v74 = *(void *)(v69 + 16);
                          v69 += 16;
                        }
                      }
                      else
                      {
                        uint64_t v68 = v76;
                      }
                    }
                    while (v72 <= v74);
                    unint64_t *v71 = v72;
                    *((_DWORD *)v71 + 2) = v73;
                  }
                }
                int64_t v66 = v67 - 1;
              }
              while (v67);
              do
              {
                uint64_t v77 = 0;
                unint64_t v78 = *(void *)v10;
                int v79 = *(_DWORD *)(v10 + 8);
                unint64_t v80 = v10;
                do
                {
                  uint64_t v81 = v80 + 16 * v77 + 16;
                  uint64_t v82 = (2 * v77) | 1;
                  uint64_t v83 = 2 * v77 + 2;
                  if (v83 < v12)
                  {
                    uint64_t result = *(unint64_t **)(v81 + 16);
                    if (*(void *)v81 < (unint64_t)result)
                    {
                      v81 += 16;
                      uint64_t v82 = v83;
                    }
                  }
                  *(void *)unint64_t v80 = *(void *)v81;
                  *(_DWORD *)(v80 + 8) = *(_DWORD *)(v81 + 8);
                  unint64_t v80 = v81;
                  uint64_t v77 = v82;
                }
                while (v82 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if ((unint64_t *)v81 == a2 - 2)
                {
                  *(void *)uint64_t v81 = v78;
                  *(_DWORD *)(v81 + 8) = v79;
                }
                else
                {
                  *(void *)uint64_t v81 = *(a2 - 2);
                  *(_DWORD *)(v81 + 8) = *((_DWORD *)a2 - 2);
                  *(a2 - 2) = v78;
                  *((_DWORD *)a2 - 2) = v79;
                  uint64_t v84 = v81 - v10 + 16;
                  if (v84 >= 17)
                  {
                    unint64_t v85 = (((unint64_t)v84 >> 4) - 2) >> 1;
                    uint64_t v86 = v10 + 16 * v85;
                    uint64_t v87 = *(void *)v86;
                    unint64_t v88 = *(void *)v81;
                    if (*(void *)v86 < *(void *)v81)
                    {
                      uint64_t v89 = *(void *)(v81 + 8);
                      do
                      {
                        uint64_t v90 = v81;
                        uint64_t v81 = v86;
                        *(void *)uint64_t v90 = v87;
                        *(_DWORD *)(v90 + 8) = *(_DWORD *)(v86 + 8);
                        if (!v85) {
                          break;
                        }
                        unint64_t v85 = (v85 - 1) >> 1;
                        uint64_t v86 = v10 + 16 * v85;
                        uint64_t v87 = *(void *)v86;
                      }
                      while (v88 > *(void *)v86);
                      *(void *)uint64_t v81 = v88;
                      *(_DWORD *)(v81 + 8) = v89;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          unint64_t v14 = v10 + 16 * ((unint64_t)v12 >> 1);
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1CC380F04((unint64_t *)v9, (unint64_t *)(v9 + 16 * ((unint64_t)v12 >> 1)), a2 - 2);
            sub_1CC380F04((unint64_t *)(v9 + 16), (unint64_t *)(v14 - 16), a2 - 4);
            sub_1CC380F04((unint64_t *)(v9 + 32), (unint64_t *)(v9 + 16 + 16 * v13), a2 - 6);
            uint64_t result = sub_1CC380F04((unint64_t *)(v14 - 16), (unint64_t *)v14, (unint64_t *)(v9 + 16 + 16 * v13));
            unint64_t v15 = *(void *)v9;
            *(void *)unint64_t v9 = *(void *)v14;
            *(void *)unint64_t v14 = v15;
            LODWORD(v15) = *(_DWORD *)(v9 + 8);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v14 + 8);
            *(_DWORD *)(v14 + 8) = v15;
          }
          else
          {
            uint64_t result = sub_1CC380F04((unint64_t *)(v9 + 16 * ((unint64_t)v12 >> 1)), (unint64_t *)v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v17 = *(void *)v9;
          uint64_t v16 = *(void *)(v9 + 8);
          if (*(void *)(v9 - 16) < *(void *)v9) {
            goto LABEL_13;
          }
          if (v17 >= *(a2 - 2))
          {
            unint64_t v31 = v9 + 16;
            do
            {
              unint64_t v10 = v31;
              if (v31 >= (unint64_t)a2) {
                break;
              }
              v31 += 16;
            }
            while (v17 >= *(void *)v10);
          }
          else
          {
            unint64_t v10 = v9;
            do
            {
              unint64_t v30 = *(void *)(v10 + 16);
              v10 += 16;
            }
            while (v17 >= v30);
          }
          int v32 = a2;
          if (v10 < (unint64_t)a2)
          {
            int v32 = a2;
            do
            {
              unint64_t v33 = *(v32 - 2);
              v32 -= 2;
            }
            while (v17 < v33);
          }
          if (v10 < (unint64_t)v32)
          {
            unint64_t v34 = *(void *)v10;
            unint64_t v35 = *v32;
            do
            {
              *(void *)unint64_t v10 = v35;
              *int v32 = v34;
              int v36 = *(_DWORD *)(v10 + 8);
              *(_DWORD *)(v10 + 8) = *((_DWORD *)v32 + 2);
              *((_DWORD *)v32 + 2) = v36;
              do
              {
                unint64_t v37 = *(void *)(v10 + 16);
                v10 += 16;
                unint64_t v34 = v37;
              }
              while (v17 >= v37);
              do
              {
                unint64_t v38 = *(v32 - 2);
                v32 -= 2;
                unint64_t v35 = v38;
              }
              while (v17 < v38);
            }
            while (v10 < (unint64_t)v32);
          }
          BOOL v4 = v10 - 16 >= v9;
          BOOL v5 = v10 - 16 == v9;
          if (v10 - 16 != v9)
          {
            *(void *)unint64_t v9 = *(void *)(v10 - 16);
            *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 8);
          }
          a4 = 0;
          *(void *)(v10 - 16) = v17;
          *(_DWORD *)(v10 - 8) = v16;
        }
        unint64_t v17 = *(void *)v9;
        uint64_t v16 = *(void *)(v9 + 8);
LABEL_13:
        uint64_t v18 = 0;
        do
        {
          unint64_t v19 = *(void *)(v9 + v18 + 16);
          v18 += 16;
        }
        while (v17 > v19);
        unint64_t v20 = v9 + v18;
        uint64_t v21 = a2;
        if (v18 == 16)
        {
          uint64_t v21 = a2;
          do
          {
            if (v20 >= (unint64_t)v21) {
              break;
            }
            unint64_t v23 = *(v21 - 2);
            v21 -= 2;
          }
          while (v17 <= v23);
        }
        else
        {
          do
          {
            unint64_t v22 = *(v21 - 2);
            v21 -= 2;
          }
          while (v17 <= v22);
        }
        if (v20 >= (unint64_t)v21)
        {
          unint64_t v10 = v9 + v18;
        }
        else
        {
          unint64_t v24 = *v21;
          unint64_t v10 = v9 + v18;
          long long v25 = v21;
          do
          {
            *(void *)unint64_t v10 = v24;
            *long long v25 = v19;
            int v26 = *(_DWORD *)(v10 + 8);
            *(_DWORD *)(v10 + 8) = *((_DWORD *)v25 + 2);
            *((_DWORD *)v25 + 2) = v26;
            do
            {
              unint64_t v27 = *(void *)(v10 + 16);
              v10 += 16;
              unint64_t v19 = v27;
            }
            while (v17 > v27);
            do
            {
              unint64_t v28 = *(v25 - 2);
              v25 -= 2;
              unint64_t v24 = v28;
            }
            while (v17 <= v28);
          }
          while (v10 < (unint64_t)v25);
        }
        if (v10 - 16 != v9)
        {
          *(void *)unint64_t v9 = *(void *)(v10 - 16);
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v10 - 8);
        }
        *(void *)(v10 - 16) = v17;
        *(_DWORD *)(v10 - 8) = v16;
        if (v20 >= (unint64_t)v21) {
          break;
        }
LABEL_34:
        uint64_t result = (unint64_t *)sub_1CC380764(v9, v10 - 16, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v29 = sub_1CC380FC4(v9, (unint64_t *)(v10 - 16));
      uint64_t result = (unint64_t *)sub_1CC380FC4(v10, a2);
      if (result) {
        break;
      }
      if (!v29) {
        goto LABEL_34;
      }
    }
    a2 = (unint64_t *)(v10 - 16);
    if (!v29) {
      continue;
    }
    return result;
  }
}

unint64_t *sub_1CC380F04(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *result;
  unint64_t v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      int v7 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = v7;
      unint64_t v8 = *result;
      if (*a2 < *result)
      {
        *uint64_t result = *a2;
        *a2 = v8;
        int v9 = *((_DWORD *)result + 2);
        *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
        *((_DWORD *)a2 + 2) = v9;
      }
    }
  }
  else if (v5 >= v3)
  {
    *uint64_t result = v3;
    *a2 = v4;
    int v10 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = v10;
    if (*a3 < v4)
    {
      *a2 = *a3;
      *a3 = v4;
      *((_DWORD *)a2 + 2) = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = v10;
    }
  }
  else
  {
    *uint64_t result = v5;
    *a3 = v4;
    int v6 = *((_DWORD *)result + 2);
    *((_DWORD *)result + 2) = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = v6;
  }
  return result;
}

BOOL sub_1CC380FC4(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 2);
      unint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1)
      {
        *(void *)a1 = v6;
        *(a2 - 2) = v7;
        int v8 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v8;
      }
      return result;
    case 3:
      sub_1CC380F04((unint64_t *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      sub_1CC3811F4(a1, a1 + 16, a1 + 32, (uint64_t)(a2 - 2));
      return 1;
    case 5:
      sub_1CC3811F4(a1, a1 + 16, a1 + 32, a1 + 48);
      unint64_t v19 = *(a2 - 2);
      unint64_t v20 = *(void *)(a1 + 48);
      if (v19 < v20)
      {
        *(void *)(a1 + 48) = v19;
        *(a2 - 2) = v20;
        int v21 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v21;
        unint64_t v22 = *(void *)(a1 + 48);
        unint64_t v23 = *(void *)(a1 + 32);
        if (v22 < v23)
        {
          *(void *)(a1 + 32) = v22;
          *(void *)(a1 + 48) = v23;
          int v24 = *(_DWORD *)(a1 + 40);
          int v25 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 40) = v25;
          *(_DWORD *)(a1 + 56) = v24;
          unint64_t v26 = *(void *)(a1 + 16);
          if (v22 < v26)
          {
            *(void *)(a1 + 16) = v22;
            *(void *)(a1 + 32) = v26;
            int v27 = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v25;
            *(_DWORD *)(a1 + 40) = v27;
            unint64_t v28 = *(void *)a1;
            if (v22 < *(void *)a1)
            {
              *(void *)a1 = v22;
              *(void *)(a1 + 16) = v28;
              int v29 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 8) = v25;
              *(_DWORD *)(a1 + 24) = v29;
            }
          }
        }
      }
      return 1;
    default:
      int v9 = (unint64_t *)(a1 + 32);
      sub_1CC380F04((unint64_t *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      int v10 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    unint64_t v13 = *v10;
    unint64_t v14 = *v9;
    if (*v10 < *v9)
    {
      unint64_t v15 = v10[1];
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(void *)(v17 + 48) = v14;
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v16 + 40);
        if (v16 == -32) {
          break;
        }
        unint64_t v14 = *(void *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          uint64_t v18 = a1 + v16 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v13;
      *(_DWORD *)(v18 + 8) = v15;
      if (++v12 == 8) {
        return v10 + 2 == a2;
      }
    }
    int v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2) {
      return 1;
    }
  }
}

unint64_t *sub_1CC3811F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL result = sub_1CC380F04((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a3;
  if (*(void *)a4 < *(void *)a3)
  {
    *(void *)a3 = *(void *)a4;
    *(void *)a4 = v9;
    int v10 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v10;
    unint64_t v11 = *(void *)a2;
    if (*(void *)a3 < *(void *)a2)
    {
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v11;
      int v12 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      unint64_t v13 = *(void *)a1;
      if (*(void *)a2 < *(void *)a1)
      {
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v13;
        int v14 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

void sub_1CC3812A4(void *a1, char *a2, uint64_t a3, void *a4, char *__src, void *a6, char *a7, unint64_t a8)
{
  unint64_t v8 = a8;
  unint64_t v14 = a1[4];
  unint64_t v15 = v14 >> 9;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v18 = (char *)(v16 + 8 * (v14 >> 9));
  if (v17 == v16) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(void *)v18 + 8 * (a1[4] & 0x1FFLL);
  }
  if (a3 == v19) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = ((a3 - *(void *)a2) >> 3) + ((a2 - v18) << 6) - ((v19 - *(void *)v18) >> 3);
  }
  uint64_t v21 = a1[5];
  if (v20 >= v21 - v20)
  {
    uint64_t v24 = ((v17 - v16) << 6) - 1;
    if (v17 == v16) {
      uint64_t v24 = 0;
    }
    unint64_t v25 = v21 + v14;
    unint64_t v26 = v24 - v25;
    if (a8 > v26)
    {
      sub_1CD543E14((uint64_t)a1, a8 - v26);
      uint64_t v21 = a1[5];
      uint64_t v16 = a1[1];
      uint64_t v17 = a1[2];
      unint64_t v25 = a1[4] + v21;
    }
    int v27 = (void *)(v16 + 8 * (v25 >> 9));
    if (v17 == v16) {
      unint64_t v28 = 0;
    }
    else {
      unint64_t v28 = (char *)(*v27 + 8 * (v25 & 0x1FF));
    }
    unint64_t v33 = v21 - v20;
    if (v21 - v20 >= v8)
    {
      unint64_t v35 = v28;
      int v36 = v27;
      unint64_t v37 = a7;
      if (!v8) {
        return;
      }
      goto LABEL_90;
    }
    if (v33 >= v8 >> 1)
    {
      uint64_t v34 = v21 - v20 - v8 + ((uint64_t)&a7[-*a6] >> 3);
      if (v34 >= 1)
      {
        a6 += (unint64_t)v34 >> 9;
        goto LABEL_39;
      }
      unint64_t v40 = 511 - v34;
      __int16 v41 = ~(_WORD)v40;
      a6 -= v40 >> 9;
    }
    else
    {
      if (!v33)
      {
        a6 = a4;
        unint64_t v37 = __src;
        goto LABEL_80;
      }
      uint64_t v34 = v33 + ((uint64_t)&__src[-*a4] >> 3);
      if (v34 >= 1)
      {
        a6 = &a4[(unint64_t)v34 >> 9];
LABEL_39:
        unint64_t v37 = (char *)(*a6 + 8 * (v34 & 0x1FF));
        goto LABEL_80;
      }
      unint64_t v68 = 511 - v34;
      __int16 v41 = ~(_WORD)v68;
      a6 = &a4[-(v68 >> 9)];
    }
    unint64_t v37 = (char *)(*a6 + 8 * (v41 & 0x1FF));
LABEL_80:
    if (v37 == a7)
    {
      unint64_t v35 = v28;
      int v36 = v27;
    }
    else
    {
      unint64_t v69 = a6;
      unint64_t v70 = v37;
      int v36 = v27;
      unint64_t v35 = v28;
      do
      {
        *v35++ = *(void *)v70;
        if ((void *)((char *)v35 - *v36) == (void *)4096)
        {
          uint64_t v71 = (void *)v36[1];
          ++v36;
          unint64_t v35 = v71;
        }
        v70 += 8;
        if (&v70[-*v69] == (char *)4096)
        {
          unint64_t v72 = (char *)v69[1];
          ++v69;
          unint64_t v70 = v72;
        }
        ++v21;
      }
      while (v70 != a7);
      a1[5] = v21;
    }
    unint64_t v8 = v33;
    if (!v33) {
      return;
    }
LABEL_90:
    uint64_t v73 = ((uint64_t)&v28[-*v27] >> 3) - v8;
    if (v73 < 1)
    {
      unint64_t v76 = 511 - v73;
      unint64_t v74 = (char **)&v27[-(v76 >> 9)];
      long long v75 = &(*v74)[8 * (~(_WORD)v76 & 0x1FF)];
    }
    else
    {
      unint64_t v74 = (char **)&v27[(unint64_t)v73 >> 9];
      long long v75 = &(*v74)[8 * (v73 & 0x1FF)];
    }
    if (v75 != v28)
    {
      uint64_t v77 = v74;
      unint64_t v78 = v75;
      do
      {
        *v35++ = *(void *)v78;
        if ((void *)((char *)v35 - *v36) == (void *)4096)
        {
          int v79 = (void *)v36[1];
          ++v36;
          unint64_t v35 = v79;
        }
        v78 += 8;
        if (v78 - *v77 == 4096)
        {
          unint64_t v80 = v77[1];
          ++v77;
          unint64_t v78 = v80;
        }
        ++v21;
      }
      while (v78 != v28);
      a1[5] = v21;
    }
    if (v8 < v33)
    {
      uint64_t v81 = ((uint64_t)&v28[-*v27] >> 3) - v33;
      if (v81 < 1)
      {
        unint64_t v84 = 511 - v81;
        uint64_t v82 = (char **)&v27[-(v84 >> 9)];
        uint64_t v83 = &(*v82)[8 * (~(_WORD)v84 & 0x1FF)];
      }
      else
      {
        uint64_t v82 = (char **)&v27[(unint64_t)v81 >> 9];
        uint64_t v83 = &(*v82)[8 * (v81 & 0x1FF)];
      }
      sub_1CC3805A0((uint64_t)&v100, v82, v83, v74, v75, v27, v28);
      int v27 = v102;
      unint64_t v28 = v103;
    }
    if (a4 == a6)
    {
      uint64_t v97 = __src;
      uint64_t v96 = v37;
      uint64_t v98 = v27;
      int v99 = v28;
    }
    else
    {
      uint64_t v86 = (char *)*a6;
      unint64_t v85 = a6 - 1;
      sub_1CC08ECDC(&v100, v86, v37, v27, v28);
      uint64_t v87 = v101;
      unint64_t v88 = (char *)v102;
      if (v85 != a4)
      {
        uint64_t v89 = (char *)*v101;
        do
        {
          uint64_t v90 = (unsigned char *)*v85;
          uint64_t v91 = (char *)(*v85 + 4096);
          while (1)
          {
            uint64_t v92 = v88 - v89;
            if ((v91 - v90) >> 3 >= v92 >> 3) {
              uint64_t v93 = v92 >> 3;
            }
            else {
              uint64_t v93 = (v91 - v90) >> 3;
            }
            v91 -= 8 * v93;
            v88 -= 8 * v93;
            if (v93) {
              memmove(v88, v91, 8 * v93);
            }
            if (v91 == v90) {
              break;
            }
            unint64_t v94 = (char *)*--v87;
            uint64_t v89 = v94;
            unint64_t v88 = v94 + 4096;
          }
          uint64_t v89 = (char *)*v87;
          if ((char *)(*v87 + 4096) == v88)
          {
            unint64_t v95 = (char *)v87[1];
            ++v87;
            uint64_t v89 = v95;
            unint64_t v88 = v95;
          }
          --v85;
        }
        while (v85 != a4);
      }
      uint64_t v96 = (char *)(*a4 + 4096);
      uint64_t v97 = __src;
      uint64_t v98 = v87;
      int v99 = v88;
    }
    sub_1CC08ECDC(&v100, v97, v96, v98, v99);
    return;
  }
  if (a8 > v14)
  {
    sub_1CD543B70((uint64_t)a1, a8 - v14);
    unint64_t v14 = a1[4];
    uint64_t v16 = a1[1];
    uint64_t v17 = a1[2];
    unint64_t v15 = v14 >> 9;
  }
  unint64_t v22 = (void **)(v16 + 8 * v15);
  if (v17 == v16) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = (uint64_t)*v22 + 8 * (v14 & 0x1FF);
  }
  if (v8 <= v20)
  {
    uint64_t v30 = v23;
    unint64_t v31 = v22;
    int v32 = __src;
    if (!v8) {
      return;
    }
    goto LABEL_56;
  }
  if (v20 >= v8 >> 1)
  {
    uint64_t v29 = v8 - v20 + ((uint64_t)&__src[-*a4] >> 3);
    if (v29 >= 1)
    {
      a4 += (unint64_t)v29 >> 9;
      goto LABEL_36;
    }
    unint64_t v38 = 511 - v29;
    __int16 v39 = ~(_WORD)v38;
    a4 -= v38 >> 9;
  }
  else
  {
    if (!v20)
    {
      a4 = a6;
      int v32 = a7;
      goto LABEL_46;
    }
    uint64_t v29 = ((uint64_t)&a7[-*a6] >> 3) - v20;
    if (v29 >= 1)
    {
      a4 = &a6[(unint64_t)v29 >> 9];
LABEL_36:
      int v32 = (char *)(*a4 + 8 * (v29 & 0x1FF));
      goto LABEL_46;
    }
    unint64_t v42 = 511 - v29;
    __int16 v39 = ~(_WORD)v42;
    a4 = &a6[-(v42 >> 9)];
  }
  int v32 = (char *)(*a4 + 8 * (v39 & 0x1FF));
LABEL_46:
  if (v32 == __src)
  {
    uint64_t v30 = v23;
    unint64_t v31 = v22;
  }
  else
  {
    uint64_t v43 = a1[5];
    int v44 = (void **)a4;
    unint64_t v45 = v32;
    unint64_t v31 = v22;
    uint64_t v30 = v23;
    do
    {
      if ((void *)v30 == *v31)
      {
        uint64_t v46 = (uint64_t)*--v31;
        uint64_t v30 = v46 + 4096;
      }
      if (v45 == *v44)
      {
        uint64_t v47 = (uint64_t)*--v44;
        unint64_t v45 = (char *)(v47 + 4096);
      }
      uint64_t v48 = *((void *)v45 - 1);
      v45 -= 8;
      *(void *)(v30 - 8) = v48;
      v30 -= 8;
      --v14;
      ++v43;
    }
    while (v45 != __src);
    a1[4] = v14;
    a1[5] = v43;
  }
  unint64_t v8 = v20;
  if (v20)
  {
LABEL_56:
    uint64_t v49 = v8 + ((v23 - (uint64_t)*v22) >> 3);
    if (v49 < 1)
    {
      unint64_t v52 = 511 - v49;
      int v50 = &v22[-(v52 >> 9)];
      unint64_t v51 = (char *)*v50 + 8 * (~(_WORD)v52 & 0x1FF);
    }
    else
    {
      int v50 = &v22[(unint64_t)v49 >> 9];
      unint64_t v51 = (char *)*v50 + 8 * (v49 & 0x1FF);
    }
    if (v51 != (unsigned char *)v23)
    {
      uint64_t v53 = a1[5];
      uint64_t v54 = v50;
      BOOL v55 = v51;
      do
      {
        if ((void *)v30 == *v31)
        {
          uint64_t v56 = (uint64_t)*--v31;
          uint64_t v30 = v56 + 4096;
        }
        if (v55 == *v54)
        {
          uint64_t v57 = (uint64_t)*--v54;
          BOOL v55 = (unsigned char *)(v57 + 4096);
        }
        uint64_t v58 = *((void *)v55 - 1);
        v55 -= 8;
        *(void *)(v30 - 8) = v58;
        v30 -= 8;
        --v14;
        ++v53;
      }
      while (v55 != (unsigned char *)v23);
      a1[4] = v14;
      a1[5] = v53;
    }
    if (v8 < v20)
    {
      uint64_t v59 = v20 + ((v23 - (uint64_t)*v22) >> 3);
      if (v59 < 1)
      {
        unint64_t v62 = 511 - v59;
        unint64_t v60 = &v22[-(v62 >> 9)];
        unint64_t v61 = (char *)*v60 + 8 * (~(_WORD)v62 & 0x1FF);
      }
      else
      {
        unint64_t v60 = &v22[(unint64_t)v59 >> 9];
        unint64_t v61 = (char *)*v60 + 8 * (v59 & 0x1FF);
      }
      unsigned int v100 = v22;
      unsigned int v101 = (void *)v23;
      sub_1CC3806EC(v50, v51, (unsigned char **)v60, v61, &v100);
      unint64_t v22 = v100;
      uint64_t v23 = (uint64_t)v101;
    }
    unsigned int v100 = v22;
    unsigned int v101 = (void *)v23;
    unsigned int v104 = &v100;
    if (a4 != a6)
    {
      uint64_t v64 = *a4;
      uint64_t v63 = (char **)(a4 + 1);
      int64_t v65 = (unsigned char *)(v64 + 4096);
      int64_t v66 = v32;
      while (1)
      {
        sub_1CC08F37C(&v104, v66, v65);
        if (v63 == a6) {
          break;
        }
        int64_t v67 = *v63++;
        int64_t v66 = v67;
        int64_t v65 = v67 + 4096;
      }
      int v32 = (char *)*a6;
    }
    sub_1CC08F37C(&v104, v32, a7);
  }
}

uint64_t sub_1CC38199C()
{
  int v5 = 1;
  char v3 = 1;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable Software Pipelining";
  v1.n128_u64[1] = 26;
  sub_1CD49565C((llvm::cl::Option *)&unk_1EBCCF3B0, "enable-pipeliner", &v5, &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCF3B0, &dword_1CB82C000);
  v1.n128_u64[0] = (unint64_t)"Enable SWP at Os.";
  v1.n128_u64[1] = 17;
  int v5 = 1;
  LOBYTE(v2) = 0;
  uint64_t v4 = (char *)&v2;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCCF470, "enable-pipeliner-opt-size", &v1, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCF470, &dword_1CB82C000);
  v1.n128_u64[0] = (unint64_t)"Size limit for the MII.";
  v1.n128_u64[1] = 23;
  int v5 = 1;
  int v2 = 27;
  uint64_t v4 = (char *)&v2;
  sub_1CD542604((llvm::cl::Option *)&unk_1EBCCF530, "pipeliner-max-mii", &v1, &v5, (_DWORD **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCCF530, &dword_1CB82C000);
  v1.n128_u64[0] = (unint64_t)"Maximum stages allowed in the generated scheduled.";
  v1.n128_u64[1] = 50;
  int v5 = 1;
  int v2 = 3;
  uint64_t v4 = (char *)&v2;
  sub_1CD542604((llvm::cl::Option *)&unk_1EBCCF5F0, "pipeliner-max-stages", &v1, &v5, (_DWORD **)&v4);
  __cxa_atexit((void (*)(void *))sub_1CBB1C45C, &unk_1EBCCF5F0, &dword_1CB82C000);
  v1.n128_u64[0] = (unint64_t)"Prune dependences between unrelated Phi nodes.";
  v1.n128_u64[1] = 46;
  int v5 = 1;
  LOBYTE(v2) = 1;
  uint64_t v4 = (char *)&v2;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCCF6B0, "pipeliner-prune-deps", &v1, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCF6B0, &dword_1CB82C000);
  v1.n128_u64[0] = (unint64_t)"Prune loop carried order dependences.";
  v1.n128_u64[1] = 37;
  int v5 = 1;
  LOBYTE(v2) = 1;
  uint64_t v4 = (char *)&v2;
  sub_1CD4BCE90((llvm::cl::Option *)&unk_1EBCCF770, "pipeliner-prune-loop-carried", &v1, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCF770, &dword_1CB82C000);
  int v5 = 2;
  char v3 = 0;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Ignore RecMII";
  v1.n128_u64[1] = 13;
  sub_1CD49565C((llvm::cl::Option *)&unk_1EBCCF830, "pipeliner-ignore-recmii", &v5, &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCF830, &dword_1CB82C000);
  LODWORD(v4) = 1;
  LOBYTE(v5) = 0;
  v1.n128_u64[0] = (unint64_t)&v5;
  sub_1CD542788(&v4, (char **)&v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCCF8F0, &dword_1CB82C000);
  LODWORD(v4) = 1;
  LOBYTE(v5) = 0;
  v1.n128_u64[0] = (unint64_t)&v5;
  sub_1CD45C54C((uint64_t)&unk_1EBCCF9B0, "pipeliner-dbg-res", &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCF9B0, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  uint64_t v4 = (char *)&v2;
  v1.n128_u64[0] = (unint64_t)"Instead of emitting the pipelined code, annotate instructions with the generated sc"
                                     "hedule for feeding into the -modulo-schedule-test pass";
  v1.n128_u64[1] = 137;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCFA70, "pipeliner-annotate-for-testing", &v5, &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCFA70, &dword_1CB82C000);
  int v5 = 1;
  LOBYTE(v2) = 0;
  uint64_t v4 = (char *)&v2;
  v1.n128_u64[0] = (unint64_t)"Use the experimental peeling code generator for software pipelining";
  v1.n128_u64[1] = 67;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCFB30, "pipeliner-experimental-cg", &v5, &v4, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCFB30, &dword_1CB82C000);
  int v5 = 2;
  char v3 = 1;
  uint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable CopyToPhi DAG Mutation";
  v1.n128_u64[1] = 29;
  sub_1CD5428A8(&v5, &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::SwpEnableCopyToPhi, &dword_1CB82C000);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::DominatorTreeBase(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      int v5 = *(const void **)a2;
      if (*(void *)a2 == a2 + 16)
      {
        if (v4 >= 5) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 16), v5, 8 * *(unsigned int *)(a2 + 8));
        *(_DWORD *)(a1 + 8) = v4;
      }
      else
      {
        *(void *)a1 = v5;
        int v11 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v4;
        *(_DWORD *)(a1 + 12) = v11;
        *(void *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
      }
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v6 = a2 + 48;
  *(void *)(a1 + 48) = v7;
  *(void *)uint64_t v6 = 0;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v6 + 8) = 0;
  int v8 = *(_DWORD *)(a1 + 60);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(v6 + 12);
  *(_DWORD *)(v6 + 12) = v8;
  int v9 = *(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(v6 + 16);
  *(_DWORD *)(v6 + 16) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v6 + 24);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(v6 + 40);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(v6 + 44);
  sub_1CC0CEEC8((uint64_t *)v6);
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  return a1;
}

uint64_t *llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::wipe(uint64_t *a1)
{
  BOOL result = sub_1CC0CEEC8(a1 + 6);
  a1[9] = 0;
  a1[10] = 0;
  return result;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(const void **)a2;
    if (*(void *)a2 == a2 + 16)
    {
      uint64_t v6 = (_DWORD *)(a2 + 8);
      uint64_t v5 = *(unsigned int *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, v4, 8 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 8);
          memmove(*(void **)a1, v4, 8 * v7);
          uint64_t v8 = v12;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 8 * v8), (const void *)(*(void *)a2 + 8 * v8), *(void *)a2 + 8 * v9 - (*(void *)a2 + 8 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      int v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v11);
        unsigned int v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      uint64_t v6 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *uint64_t v6 = 0;
  }
  sub_1CC33DF3C((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  sub_1CC0CEEC8((uint64_t *)(a2 + 48));
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::root_begin(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::root_end(uint64_t a1)
{
  return *(void *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

{
  return *(void *)a1 + 8 * *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::root_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::roots(uint64_t a1)
{
  return *(void *)a1;
}

{
  return *(void *)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isPostDominator()
{
  return 1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::getNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v5[1];
  }
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      goto LABEL_8;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_8;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_8:
  if (v5 == (uint64_t *)(v2 + 16 * v3)) {
    return 0;
  }
  else {
    return v5[1];
  }
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::getRootNode(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

{
  return *(void *)(a1 + 72);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::getDescendants(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned char v18[8] = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a3 + 8) = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(a1 + 64);
  if (!v5)
  {
LABEL_7:
    int v7 = (uint64_t *)(v4 + 16 * v5);
    goto LABEL_8;
  }
  LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  int v7 = (uint64_t *)(v4 + 16 * v6);
  uint64_t v8 = *v7;
  if (*v7 != a2)
  {
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void *)(v4 + 16 * v6);
      if (v8 == a2)
      {
        int v7 = (uint64_t *)(v4 + 16 * v6);
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
LABEL_8:
  if (v7 != (uint64_t *)(v4 + 16 * v5))
  {
    uint64_t v11 = v7[1];
    if (v11)
    {
      unint64_t v15 = v18;
      int v17 = 8;
      v18[0] = v11;
      unsigned int v12 = 1;
      do
      {
        uint64_t v13 = *((void *)v15 + v12 - 1);
        unsigned int v16 = v12 - 1;
        unint64_t v14 = *(unsigned int *)(a3 + 8);
        if (v14 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v14) = *(void *)v13;
        ++*(_DWORD *)(a3 + 8);
        sub_1CD4570C8((uint64_t)&v15, *(char **)(v13 + 24), (char *)(*(void *)(v13 + 24) + 8 * *(unsigned int *)(v13 + 32)));
        unsigned int v12 = v16;
      }
      while (v16);
      if (v15 != v18) {
        free(v15);
      }
    }
  }
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::properlyDominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  if (a2 != a3 && a2 && a3)
  {
    if (*(void *)(a3 + 8) == a2) {
      return 1;
    }
    if (*(void *)(a2 + 8) == a3) {
      return 0;
    }
    unsigned int v5 = *(_DWORD *)(a2 + 16);
    if (v5 >= *(_DWORD *)(a3 + 16)) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 88))
    {
      if (*(_DWORD *)(a3 + 72) >= *(_DWORD *)(a2 + 72)) {
        return *(_DWORD *)(a3 + 76) <= *(_DWORD *)(a2 + 76);
      }
      return 0;
    }
    unsigned int v6 = *(_DWORD *)(a1 + 92) + 1;
    *(_DWORD *)(a1 + 92) = v6;
    if (v6 > 0x20) {
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers();
    }
    do
    {
      uint64_t v7 = a3;
      a3 = *(void *)(a3 + 8);
    }
    while (a3 && *(_DWORD *)(a3 + 16) >= v5);
    return v7 == a2;
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;
  uint64_t v12;
  void v13[7];

  if (a2 != a3)
  {
    v13[1] = v6;
    v13[2] = v5;
    v13[3] = v4;
    _OWORD v13[4] = v3;
    v13[5] = v7;
    v13[6] = v8;
    int v10 = (uint64_t *)(a1 + 48);
    unsigned int v12 = 0;
    v13[0] = a2;
    sub_1CBFA3AF4((uint64_t *)(a1 + 48), v13, &v12);
    unsigned int v12 = 0;
    v13[0] = a3;
    sub_1CBFA3AF4(v10, v13, &v12);
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates();
  }
  return 0;
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 1;
  if (a3 != a2)
  {
    uint64_t v5 = a3;
    if (a3)
    {
      if (!a2) {
        return 0;
      }
      if (*(void *)(a3 + 8) == a2) {
        return 1;
      }
      if (*(void *)(a2 + 8) == a3) {
        return 0;
      }
      unsigned int v6 = *(_DWORD *)(a2 + 16);
      if (v6 >= *(_DWORD *)(a3 + 16)) {
        return 0;
      }
      if (*(unsigned char *)(a1 + 88))
      {
        if (*(_DWORD *)(a3 + 72) >= *(_DWORD *)(a2 + 72)) {
          return *(_DWORD *)(a3 + 76) <= *(_DWORD *)(a2 + 76);
        }
        return 0;
      }
      unsigned int v7 = *(_DWORD *)(a1 + 92) + 1;
      *(_DWORD *)(a1 + 92) = v7;
      if (v7 > 0x20) {
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers();
      }
      do
      {
        uint64_t v8 = v5;
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 && *(_DWORD *)(v5 + 16) >= v6);
      return v8 == a2;
    }
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;

  if (a2 == a3) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (!v4) {
    goto LABEL_31;
  }
  LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
  unsigned int v7 = *v6;
  if (*v6 != a2)
  {
    uint64_t v18 = 1;
    while (v7 != -4096)
    {
      uint64_t v19 = v5 + v18++;
      uint64_t v5 = v19 & (v4 - 1);
      unsigned int v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        unsigned int v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_4;
      }
    }
LABEL_31:
    unsigned int v6 = (uint64_t *)(v3 + 16 * v4);
  }
LABEL_4:
  uint64_t v8 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v8) {
    int v9 = 0;
  }
  else {
    int v9 = v6[1];
  }
  if (!v4) {
    return 1;
  }
  int v10 = v4 - 1;
  LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
  unsigned int v12 = *v11;
  if (*v11 != a3)
  {
    unint64_t v20 = 1;
    do
    {
      if (v12 == -4096) {
        return 1;
      }
      uint64_t v21 = v4 + v20++;
      uint64_t v4 = v21 & v10;
      unsigned int v12 = *(void *)(v3 + 16 * v4);
    }
    while (v12 != a3);
    uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
  }
  if (v11 == v8) {
    return 1;
  }
  uint64_t v13 = v11[1];
  unint64_t v14 = v13 == v9 || v13 == 0;
  unint64_t v15 = !v14;
  if (v14 || !v9)
  {
    if ((v15 & 1) == 0) {
      return 1;
    }
    if (!v9) {
      return 0;
    }
    if (*(void *)(v13 + 8) == v9) {
      return 1;
    }
    if (*(void *)(v9 + 8) == v13) {
      return 0;
    }
    uint64_t v24 = *(_DWORD *)(v9 + 16);
    if (v24 >= *(_DWORD *)(v13 + 16)) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 88))
    {
LABEL_33:
      if (*(_DWORD *)(v13 + 72) >= *(_DWORD *)(v9 + 72)) {
        return *(_DWORD *)(v13 + 76) <= *(_DWORD *)(v9 + 76);
      }
      return 0;
    }
    unint64_t v25 = *(_DWORD *)(a1 + 92) + 1;
    *(_DWORD *)(a1 + 92) = v25;
    if (v25 <= 0x20)
    {
      do
      {
        uint64_t v23 = v13;
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 && *(_DWORD *)(v13 + 16) >= v24);
      return v23 == v9;
    }
LABEL_50:
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers();
  }
  if (*(void *)(v13 + 8) != v9)
  {
    if (*(void *)(v9 + 8) == v13) {
      return 0;
    }
    int v17 = *(_DWORD *)(v9 + 16);
    if (v17 >= *(_DWORD *)(v13 + 16)) {
      return 0;
    }
    if (*(unsigned char *)(a1 + 88)) {
      goto LABEL_33;
    }
    unint64_t v22 = *(_DWORD *)(a1 + 92) + 1;
    *(_DWORD *)(a1 + 92) = v22;
    if (v22 <= 0x20)
    {
      do
      {
        uint64_t v23 = v13;
        uint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13 && *(_DWORD *)(v13 + 16) >= v17);
      return v23 == v9;
    }
    goto LABEL_50;
  }
  return 1;
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isReachableFromEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  if (v3)
  {
    LODWORD(v4) = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a2) {
      return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
    }
    int v7 = 1;
    while (v6 != -4096)
    {
      int v8 = v4 + v7++;
      uint64_t v4 = v8 & (v3 - 1);
      uint64_t v6 = *(void *)(v2 + 16 * v4);
      if (v6 == a2)
      {
        uint64_t v5 = (uint64_t *)(v2 + 16 * v4);
        return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
      }
    }
  }
  uint64_t v5 = (uint64_t *)(v2 + 16 * v3);
  return v5 != (uint64_t *)(v2 + 16 * v3) && v5[1] != 0;
}

{
  return a2 != 0;
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::updateDFSNumbers(uint64_t a1)
{
  v18[64] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 88))
  {
    *(_DWORD *)(a1 + 92) = 0;
  }
  else
  {
    unint64_t v15 = v18;
    unsigned int v17 = 32;
    uint64_t v2 = *(void *)(a1 + 72);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      v18[0] = *(void *)(a1 + 72);
      v18[1] = v3;
      int v4 = 1;
      int v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      unsigned int v5 = 1;
      do
      {
        uint64_t v6 = (char *)v15;
        uint64_t v7 = v5;
        int v8 = (char *)v15 + 16 * v5;
        uint64_t v10 = *((void *)v8 - 2);
        int v9 = (uint64_t *)*((void *)v8 - 1);
        if (v9 == (uint64_t *)(*(void *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
        {
          *(_DWORD *)(v10 + 76) = v4;
          unsigned int v5 = v7 - 1;
          int v16 = v7 - 1;
        }
        else
        {
          uint64_t v11 = *v9;
          *((void *)v8 - 1) = v9 + 1;
          uint64_t v12 = *(void *)(v11 + 24);
          if (v7 >= v17) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v13 = &v6[16 * v7];
          *(void *)uint64_t v13 = v11;
          *((void *)v13 + 1) = v12;
          unsigned int v5 = ++v16;
          *(_DWORD *)(v11 + 72) = v4;
        }
        ++v4;
      }
      while (v5);
      unint64_t v14 = v15;
      *(_DWORD *)(a1 + 92) = 0;
      *(unsigned char *)(a1 + 88) = 1;
      if (v14 != v18) {
        free(v14);
      }
    }
  }
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominatedBySlowTreeWalk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v3 = a3;
    a3 = *(void *)(a3 + 8);
  }
  while (a3 && *(_DWORD *)(a3 + 16) >= *(_DWORD *)(a2 + 16));
  return v3 == a2;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::getRoot(uint64_t a1)
{
  return **(void **)a1;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a2) {
      goto LABEL_3;
    }
    int v19 = 1;
    while (v7 != -4096)
    {
      int v20 = v5 + v19++;
      uint64_t v5 = v20 & (v4 - 1);
      uint64_t v7 = *(void *)(v3 + 16 * v5);
      if (v7 == a2)
      {
        uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
        goto LABEL_3;
      }
    }
  }
  uint64_t v6 = (uint64_t *)(v3 + 16 * v4);
LABEL_3:
  int v8 = (uint64_t *)(v3 + 16 * v4);
  if (v6 == v8) {
    int v9 = 0;
  }
  else {
    int v9 = (_DWORD *)v6[1];
  }
  if (v4)
  {
    unsigned int v10 = v4 - 1;
    LODWORD(v4) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
    uint64_t v12 = *v11;
    if (*v11 == a3)
    {
LABEL_7:
      if (v11 != v8)
      {
        uint64_t v13 = (_DWORD *)v11[1];
        goto LABEL_9;
      }
    }
    else
    {
      int v21 = 1;
      while (v12 != -4096)
      {
        int v22 = v4 + v21++;
        uint64_t v4 = v22 & v10;
        uint64_t v12 = *(void *)(v3 + 16 * v4);
        if (v12 == a3)
        {
          uint64_t v11 = (uint64_t *)(v3 + 16 * v4);
          goto LABEL_7;
        }
      }
    }
  }
  uint64_t v13 = 0;
LABEL_9:
  if (v9 == v13)
  {
    uint64_t v13 = v9;
  }
  else
  {
    do
    {
      unsigned int v14 = v9[4];
      unsigned int v15 = v13[4];
      BOOL v16 = v14 >= v15;
      if (v14 >= v15) {
        unsigned int v17 = v9;
      }
      else {
        unsigned int v17 = v13;
      }
      if (!v16) {
        uint64_t v13 = v9;
      }
      int v9 = (_DWORD *)*((void *)v17 + 1);
    }
    while (v9 != v13);
  }
  return *(void *)v13;
}

BOOL llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isVirtualRoot(uint64_t a1, void *a2)
{
  return *a2 == 0;
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::applyUpdates(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  v8[8] = *MEMORY[0x1E4F143B8];
  sub_1CC383BFC((uint64_t)v5, a2, a3, 1u);
  sub_1CC383DA0(a1, (uint64_t)v5, 0);
  if (v7 != v8) {
    free(v7);
  }
  sub_1CC33FBB0((uint64_t)&v6);
  return sub_1CC33FBB0((uint64_t)v5);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::applyUpdates(uint64_t a1, unsigned char *a2, uint64_t a3, long long *a4, uint64_t a5)
{
  unsigned char v18[8] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v12 = v14;
    uint64_t v13 = 0x300000000;
    sub_1CD3D61B4((unsigned int *)&v12, a2, &a2[16 * a3]);
    sub_1CC346054((unsigned int *)&v12, (uint64_t)v12 + 16 * v13, a4, &a4[a5]);
    sub_1CC383BFC((uint64_t)v15, (unint64_t *)v12, v13, 1u);
    sub_1CC383BFC((uint64_t)v8, (unint64_t *)a4, a5, 0);
    sub_1CC383DA0(a1, (uint64_t)v15, (uint64_t)v8);
    if (v10 != &v11) {
      free(v10);
    }
    sub_1CC33FBB0((uint64_t)&v9);
    sub_1CC33FBB0((uint64_t)v8);
    if (v17 != v18) {
      free(v17);
    }
    sub_1CC33FBB0((uint64_t)v16);
    sub_1CC33FBB0((uint64_t)v15);
    if (v12 != v14) {
      free(v12);
    }
  }
  else
  {
    sub_1CC383BFC((uint64_t)v15, (unint64_t *)a4, a5, 0);
    sub_1CC383DA0(a1, (uint64_t)v15, (uint64_t)v15);
    if (v17 != v18) {
      free(v17);
    }
    sub_1CC33FBB0((uint64_t)v16);
    sub_1CC33FBB0((uint64_t)v15);
  }
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::insertEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::deleteEdge(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CC3848CC(a1, 0, a3, a2);
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::addNewBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 64);
  if (v4)
  {
    unsigned int v5 = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v6 = *(void *)(v3 + 16 * v5);
    if (v6 != a3)
    {
      int v7 = 1;
      do
      {
        if (v6 == -4096) {
          break;
        }
        unsigned int v8 = v5 + v7++;
        unsigned int v5 = v8 & (v4 - 1);
        uint64_t v6 = *(void *)(v3 + 16 * v5);
      }
      while (v6 != a3);
    }
  }
  *(unsigned char *)(a1 + 88) = 0;
  llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild();
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::setNewRoot(uint64_t a1)
{
  *(unsigned char *)(a1 + 88) = 0;
  llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createNode();
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::addRoot(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)result + 8 * v2) = a2;
  ++*(_DWORD *)(result + 8);
  return result;
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::changeImmediateDominator(uint64_t a1)
{
  *(unsigned char *)(a1 + 88) = 0;
  llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom();
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::changeImmediateDominator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a2)
    {
      int v8 = 1;
      do
      {
        if (v7 == -4096) {
          goto LABEL_7;
        }
        int v9 = v5 + v8++;
        uint64_t v5 = v9 & (v4 - 1);
        uint64_t v7 = *(void *)(v3 + 16 * v5);
      }
      while (v7 != a2);
      uint64_t v6 = (uint64_t *)(v3 + 16 * v5);
    }
  }
  else
  {
LABEL_7:
    uint64_t v6 = (uint64_t *)(v3 + 16 * v4);
  }
  if (v6 == (uint64_t *)(v3 + 16 * v4))
  {
    if (!v4) {
      goto LABEL_16;
    }
  }
  else if (!v4)
  {
    goto LABEL_16;
  }
  int v10 = v4 - 1;
  unsigned int v11 = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v12 = *(void *)(v3 + 16 * v11);
  if (v12 != a3)
  {
    int v13 = 1;
    do
    {
      if (v12 == -4096) {
        break;
      }
      unsigned int v14 = v11 + v13++;
      unsigned int v11 = v14 & v10;
      uint64_t v12 = *(void *)(v3 + 16 * v11);
    }
    while (v12 != a3);
  }
LABEL_16:
  *(unsigned char *)(a1 + 88) = 0;
  llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom();
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::eraseNode(int32x2_t *a1, uint64_t a2)
{
  uint64_t v25 = a2;
  uint64_t v4 = a1 + 6;
  int32x2_t v3 = a1[6];
  uint64_t v5 = a1[8].u32[0];
  if (v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = (uint64_t *)(*(void *)&v3 + 16 * v6);
    uint64_t v8 = *v7;
    if (*v7 == a2) {
      goto LABEL_8;
    }
    int v9 = 1;
    while (v8 != -4096)
    {
      int v10 = v6 + v9++;
      uint64_t v6 = v10 & (v5 - 1);
      uint64_t v8 = *(void *)(*(void *)&v3 + 16 * v6);
      if (v8 == a2)
      {
        uint64_t v7 = (uint64_t *)(*(void *)&v3 + 16 * v6);
        goto LABEL_8;
      }
    }
  }
  uint64_t v7 = (uint64_t *)(*(void *)&v3 + 16 * v5);
LABEL_8:
  if (v7 == (uint64_t *)(*(void *)&v3 + 16 * v5)) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v7[1];
  }
  a1[11].i8[0] = 0;
  uint64_t v12 = *(void *)(v11 + 8);
  if (v12)
  {
    int v13 = *(void **)(v12 + 24);
    uint64_t v14 = *(unsigned int *)(v12 + 32);
    unsigned int v15 = &v13[v14];
    if (v14)
    {
      uint64_t v16 = 8 * v14;
      while (*v13 != v11)
      {
        ++v13;
        v16 -= 8;
        if (!v16)
        {
          int v13 = v15;
          break;
        }
      }
    }
    if (v15 != v13 + 1)
    {
      memmove(v13, v13 + 1, (char *)v15 - (char *)(v13 + 1));
      LODWORD(v14) = *(_DWORD *)(v12 + 32);
    }
    *(_DWORD *)(v12 + 32) = v14 - 1;
  }
  uint64_t result = sub_1CB931314(v4, &v25);
  uint64_t v18 = (void *)*a1;
  uint64_t v19 = a1[1].u32[0];
  uint64_t v20 = *(void *)a1 + 8 * v19;
  int v21 = (void *)*a1;
  if (v19)
  {
    uint64_t v22 = 8 * v19;
    int v21 = (void *)*a1;
    while (*v21 != v25)
    {
      ++v21;
      v22 -= 8;
      if (!v22)
      {
        int v21 = (void *)(*(void *)a1 + 8 * v19);
        break;
      }
    }
  }
  uint64_t v23 = v21 - v18;
  if (v23 != v19)
  {
    uint64_t v24 = v18[v23];
    v18[v23] = *(void *)(v20 - 8);
    *(void *)(v20 - 8) = v24;
    a1[1].i32[0] = v19 - 1;
  }
  return result;
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::splitBlock(uint64_t a1, uint64_t a2)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void **)(a2 + 64);
  int32x2_t v3 = *(char **)(a2 + 88);
  uint64_t v4 = *(char **)(a2 + 96);
  unint64_t v5 = v4 - v3;
  if ((unint64_t)(v4 - v3) >= 0x21) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v3 != v4)
  {
    uint64_t v6 = v11;
    do
    {
      uint64_t v7 = *(void *)v3;
      v3 += 8;
      *v6++ = v7;
    }
    while (v3 != v4);
  }
  int v8 = v5 >> 3;
  int v9 = *(void **)(v2 + 88);
  int v10 = *(void **)(v2 + 96);
  if (v9 == v10)
  {
    if (v8) {
      goto LABEL_13;
    }
  }
  else
  {
    do
    {
      if (*v9 != a2) {
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates();
      }
      ++v9;
    }
    while (v9 != v10);
    if (v8) {
LABEL_13:
    }
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::isReachableFromEntry();
  }
}

void llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::recalculate(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 80) = a2;
  sub_1CC3856EC(a1, 0);
}

uint64_t llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::recalculate(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  v14[8] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 80) = a2;
  sub_1CC383BFC((uint64_t)v10, a3, a4, 1u);
  v6[0] = 0;
  uint64_t v7 = v10;
  uint64_t v8 = 0;
  uint64_t v9 = v13;
  sub_1CC3856EC(a1, (uint64_t)v6);
  if (v12 != v14) {
    free(v12);
  }
  sub_1CC33FBB0((uint64_t)&v11);
  return sub_1CC33FBB0((uint64_t)v10);
}

uint64_t *llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::reset(uint64_t a1)
{
  uint64_t result = sub_1CC0CEEC8((uint64_t *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  return result;
}

void sub_1CC383944()
{
}

void llvm::MachinePostDominatorTree::createMachinePostDominatorTreePass(llvm::MachinePostDominatorTree *this)
{
}

void llvm::MachinePostDominatorTree::runOnMachineFunction(llvm::MachinePostDominatorTree *this, llvm::MachineFunction *a2)
{
}

uint64_t llvm::MachinePostDominatorTree::findNearestCommonDominator(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  if (a2 + 1 != &a2[a3]) {
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
  }
  return v4;
}

void sub_1CC383B84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = 0;
  if (v2) {
    sub_1CC383B9C(v2);
  }
}

void sub_1CC383B9C(uint64_t a1)
{
  sub_1CBF8FF88((uint64_t *)(a1 + 48));
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC383BFC(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned int a4)
{
  *(void *)a1 = 1;
  uint64_t v6 = (_DWORD *)(a1 + 296);
  for (uint64_t i = 8; i != 296; i += 72)
    *(void *)(a1 + i) = -4096;
  *(void *)(a1 + 296) = 1;
  for (uint64_t j = 304; j != 592; j += 72)
    *(void *)(a1 + j) = -4096;
  *(void *)(a1 + 600) = a1 + 616;
  *(void *)(a1 + 608) = 0x400000000;
  sub_1CC33FE78(a2, a3, a1 + 600, 1, 0);
  uint64_t v9 = *(unsigned int *)(a1 + 608);
  if (v9)
  {
    int v10 = *(unint64_t **)(a1 + 600);
    uint64_t v11 = &v10[2 * v9];
    do
    {
      unint64_t v12 = *v10;
      unint64_t v13 = v10[1];
      uint64_t v14 = ((v13 & 4) == 0) ^ a4;
      unint64_t v22 = *v10;
      sub_1CC3421B8((_DWORD *)a1, (uint64_t *)&v22);
      uint64_t v16 = v15 + 32 * v14;
      unint64_t v17 = *(unsigned int *)(v16 + 16);
      if (v17 >= *(unsigned int *)(v16 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v16 + 8) + 8 * v17) = v13 & 0xFFFFFFFFFFFFFFF8;
      ++*(_DWORD *)(v16 + 16);
      unint64_t v22 = v13 & 0xFFFFFFFFFFFFFFF8;
      sub_1CC3421B8(v6, (uint64_t *)&v22);
      uint64_t v19 = v18 + 32 * v14;
      unint64_t v20 = *(unsigned int *)(v19 + 16);
      if (v20 >= *(unsigned int *)(v19 + 20)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(v19 + 8) + 8 * v20) = v12;
      ++*(_DWORD *)(v19 + 16);
      v10 += 2;
    }
    while (v10 != v11);
  }
  *(unsigned char *)(a1 + 592) = a4;
  return a1;
}

void sub_1CC383DA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a2 + 608);
  if (!v3) {
    return;
  }
  if (v3 == 1)
  {
    uint64_t v7 = sub_1CC3429A8(a2);
    if (a3)
    {
      v18[0] = 0;
      uint64_t v19 = a3;
      uint64_t v20 = a3;
      unint64_t v21 = *(unsigned int *)(a3 + 608);
      unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0) {
        sub_1CC3848CC(a1, (uint64_t)v18, v7, v8);
      }
      else {
        sub_1CC383F2C(a1, (uint64_t)v18, v7, v8);
      }
    }
    else
    {
      unint64_t v17 = v6 & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 4) != 0)
      {
        sub_1CC3848CC(a1, 0, v7, v17);
      }
      else
      {
        sub_1CC383F2C(a1, 0, v7, v17);
      }
    }
    return;
  }
  v18[0] = 0;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  unint64_t v21 = v3;
  unsigned int v9 = *(_DWORD *)(a1 + 56);
  if (v9 > 0x64)
  {
    if (v3 <= v9 / 0x28) {
      goto LABEL_8;
    }
LABEL_10:
    sub_1CC3856EC(a1, (uint64_t)v18);
    BOOL v10 = v18[0] == 0;
    if (!v21) {
      return;
    }
    goto LABEL_11;
  }
  if (v3 > v9) {
    goto LABEL_10;
  }
LABEL_8:
  BOOL v10 = 1;
LABEL_11:
  if (v10)
  {
    unint64_t v11 = 1;
    do
    {
      uint64_t v12 = sub_1CC3429A8(v19);
      unint64_t v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 4) != 0) {
        sub_1CC3848CC(a1, (uint64_t)v18, v12, v14);
      }
      else {
        sub_1CC383F2C(a1, (uint64_t)v18, v12, v14);
      }
    }
    while (v11++ < v21 && v18[0] == 0);
  }
}

void sub_1CC383F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v125[64] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(uint64_t **)(a1 + 48);
  uint64_t v8 = *(unsigned int *)(a1 + 64);
  if (!v8)
  {
LABEL_14:
    if (!v8) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  LODWORD(v9) = (v8 - 1) & ((a3 >> 4) ^ (a3 >> 9));
  BOOL v10 = &v7[2 * v9];
  uint64_t v11 = *v10;
  if (*v10 != a3)
  {
    int v12 = 1;
    do
    {
      if (v11 == -4096) {
        goto LABEL_14;
      }
      int v13 = v9 + v12++;
      uint64_t v9 = v13 & (v8 - 1);
      uint64_t v11 = v7[2 * v9];
    }
    while (v11 != a3);
    BOOL v10 = &v7[2 * v9];
  }
  if (v10 == &v7[2 * v8] || (unint64_t v14 = (uint64_t *)v10[1]) == 0)
  {
LABEL_9:
    uint64_t v15 = *v7;
    if (*v7)
    {
      unsigned int v16 = 0;
      int v17 = v8 - 1;
      int v18 = 1;
      do
      {
        if (v15 == -4096) {
          break;
        }
        unsigned int v19 = v16 + v18++;
        unsigned int v16 = v19 & v17;
        uint64_t v15 = v7[2 * v16];
      }
      while (v15);
    }
LABEL_15:
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild();
  }
  *(unsigned char *)(a1 + 88) = 0;
  LODWORD(v20) = (v8 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  unint64_t v21 = &v7[2 * v20];
  uint64_t v22 = *v21;
  if (*v21 != a4)
  {
    int v23 = 1;
    do
    {
      if (v22 == -4096) {
        goto LABEL_26;
      }
      int v24 = v20 + v23++;
      uint64_t v20 = v24 & (v8 - 1);
      uint64_t v22 = v7[2 * v20];
    }
    while (v22 != a4);
    unint64_t v21 = &v7[2 * v20];
  }
  if (v21 != &v7[2 * v8])
  {
    uint64_t v25 = v21[1];
    if (v25)
    {
      sub_1CC3859F0(a1, a2, v14, v25);
      return;
    }
  }
LABEL_26:
  int v106 = v14;
  uint64_t v116 = v118;
  uint64_t v117 = 0x800000000;
  unint64_t v26 = (uint64_t *)operator new(8uLL);
  int v27 = 0;
  __p = v26;
  *unint64_t v26 = 0;
  long long v109 = v26 + 1;
  unint64_t v110 = (char *)(v26 + 1);
  v111[0] = 0;
  v111[1] = 0;
  unsigned int v112 = 0;
  uint64_t v107 = a2;
  uint64_t v113 = a2;
  unsigned int v28 = 1;
  unsigned int v124 = 64;
  v125[0] = a4;
  int v122 = v125;
  do
  {
    uint64_t v29 = *((void *)v122 + v28 - 1);
    unsigned int v123 = v28 - 1;
    uint64_t v115 = v29;
    if (v112)
    {
      unsigned int v30 = (v112 - 1) & ((v29 >> 4) ^ (v29 >> 9));
      unint64_t v31 = (uint64_t *)(v111[0] + 72 * v30);
      uint64_t v32 = *v31;
      if (v29 == *v31) {
        goto LABEL_42;
      }
      unint64_t v33 = 0;
      int v34 = 1;
      while (v32 != -4096)
      {
        if (v33) {
          BOOL v35 = 0;
        }
        else {
          BOOL v35 = v32 == -8192;
        }
        if (v35) {
          unint64_t v33 = v31;
        }
        unsigned int v36 = v30 + v34++;
        unsigned int v30 = v36 & (v112 - 1);
        unint64_t v31 = (uint64_t *)(v111[0] + 72 * v30);
        uint64_t v32 = *v31;
        if (v29 == *v31) {
          goto LABEL_42;
        }
      }
      if (v33) {
        unint64_t v37 = v33;
      }
      else {
        unint64_t v37 = v31;
      }
    }
    else
    {
      unint64_t v37 = 0;
    }
    unint64_t v31 = sub_1CC387084((uint64_t)v111, &v115, v37);
    *unint64_t v31 = v29;
    *(_OWORD *)(v31 + 5) = 0u;
    *(_OWORD *)(v31 + 1) = 0u;
    *(_OWORD *)(v31 + 3) = 0u;
    *(_OWORD *)(v31 + 7) = 0u;
    v31[5] = (uint64_t)(v31 + 7);
    *((_DWORD *)v31 + 13) = 2;
LABEL_42:
    if (!*((_DWORD *)v31 + 2))
    {
      *((_DWORD *)v31 + 4) = ++v27;
      *((_DWORD *)v31 + 2) = v27;
      v31[3] = v29;
      unint64_t v38 = (char *)v109;
      if (v109 >= (uint64_t *)v110)
      {
        unint64_t v40 = (char *)__p;
        uint64_t v41 = ((char *)v109 - (unsigned char *)__p) >> 3;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 61) {
          abort();
        }
        uint64_t v43 = v110 - (unsigned char *)__p;
        if ((v110 - (unsigned char *)__p) >> 2 > v42) {
          unint64_t v42 = v43 >> 2;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        if (v44)
        {
          if (v44 >> 61) {
            sub_1CB833614();
          }
          unint64_t v45 = (char *)operator new(8 * v44);
        }
        else
        {
          unint64_t v45 = 0;
        }
        uint64_t v46 = (uint64_t *)&v45[8 * v41];
        *uint64_t v46 = v29;
        __int16 v39 = v46 + 1;
        if (v38 != v40)
        {
          do
          {
            uint64_t v47 = *((void *)v38 - 1);
            v38 -= 8;
            *--uint64_t v46 = v47;
          }
          while (v38 != v40);
          unint64_t v38 = (char *)__p;
        }
        __p = v46;
        unint64_t v110 = &v45[8 * v44];
        if (v38) {
          operator delete(v38);
        }
      }
      else
      {
        *long long v109 = v29;
        __int16 v39 = (uint64_t *)(v38 + 8);
      }
      long long v109 = v39;
      if (v113)
      {
        sub_1CD544768((uint64_t)&v119, *(void *)(v113 + 8), v115);
        uint64_t v59 = v120;
        unint64_t v51 = v119;
      }
      else
      {
        uint64_t v48 = *(char **)(v115 + 64);
        uint64_t v49 = *(char **)(v115 + 72);
        BOOL v119 = (uint64_t *)v121;
        uint64_t v120 = 0x800000000;
        unint64_t v50 = v49 - v48;
        if ((unint64_t)(v49 - v48) >= 0x41) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v51 = (uint64_t *)v121;
        if (v48 != v49)
        {
          unint64_t v52 = v121;
          do
          {
            uint64_t v53 = *(void *)v48;
            v48 += 8;
            *v52++ = v53;
          }
          while (v48 != v49);
          unint64_t v51 = v119;
        }
        uint64_t v54 = v51;
        uint64_t v55 = (v50 >> 3);
        if (v55)
        {
          uint64_t v56 = 8 * v55;
          uint64_t v54 = v51;
          while (*v54)
          {
            ++v54;
            v56 -= 8;
            if (!v56)
            {
              uint64_t v54 = &v51[v55];
              break;
            }
          }
        }
        uint64_t v57 = v54 - v51;
        if (v57 != v55)
        {
          uint64_t v89 = v54 + 1;
          if (v54 + 1 != &v51[v55])
          {
            uint64_t v90 = 8 * v55 - 8 * v57 - 8;
            do
            {
              if (*v89) {
                *v54++ = *v89;
              }
              ++v89;
              v90 -= 8;
            }
            while (v90);
            unint64_t v51 = v119;
          }
        }
        unint64_t v58 = (unint64_t)((char *)v54 - (char *)v51) >> 3;
        uint64_t v59 = v58;
        LODWORD(v120) = v58;
      }
      unint64_t v60 = &v51[v59];
      if (v59)
      {
        while (1)
        {
          uint64_t v114 = 0;
          uint64_t v61 = *v51;
          uint64_t v114 = v61;
          uint64_t v62 = v111[0];
          unsigned int v63 = v112;
          uint64_t v64 = sub_1CC129FE4(v111[0], v112, v61);
          if ((uint64_t *)(v62 + 72 * v63) == v64) {
            break;
          }
          uint64_t v65 = v115;
          if (!*((_DWORD *)v64 + 2)) {
            goto LABEL_80;
          }
          if (v61 != v115)
          {
            int64_t v67 = v64 + 6;
            unint64_t v66 = *((unsigned int *)v64 + 12);
            if (v66 >= *((unsigned int *)v64 + 13)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v68 = v64[5];
            goto LABEL_109;
          }
LABEL_111:
          if (++v51 == v60)
          {
            unint64_t v51 = v119;
            goto LABEL_118;
          }
        }
        uint64_t v65 = v115;
LABEL_80:
        uint64_t v69 = *(void *)(a1 + 48);
        uint64_t v70 = *(unsigned int *)(a1 + 64);
        unsigned int v71 = v61 >> 4;
        if (v70)
        {
          LODWORD(v72) = (v70 - 1) & (v71 ^ (v61 >> 9));
          uint64_t v73 = (uint64_t *)(v69 + 16 * v72);
          uint64_t v74 = *v73;
          if (*v73 != v61)
          {
            int v75 = 1;
            while (v74 != -4096)
            {
              int v76 = v72 + v75++;
              uint64_t v72 = v76 & (v70 - 1);
              uint64_t v74 = *(void *)(v69 + 16 * v72);
              if (v74 == v61)
              {
                uint64_t v73 = (uint64_t *)(v69 + 16 * v72);
                goto LABEL_87;
              }
            }
            goto LABEL_86;
          }
        }
        else
        {
LABEL_86:
          uint64_t v73 = (uint64_t *)(v69 + 16 * v70);
        }
LABEL_87:
        if (v73 != (uint64_t *)(v69 + 16 * v70))
        {
          uint64_t v77 = v73[1];
          if (v77)
          {
            if (v117 >= (unint64_t)HIDWORD(v117)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unint64_t v78 = (uint64_t *)((char *)v116 + 16 * v117);
            *unint64_t v78 = v65;
            v78[1] = v77;
            int64_t v67 = &v117;
            goto LABEL_110;
          }
        }
        if (v63)
        {
          unsigned int v79 = v71 ^ (v61 >> 9);
          unsigned int v80 = v63 - 1;
          unsigned int v81 = v79 & (v63 - 1);
          uint64_t v82 = (uint64_t *)(v62 + 72 * v81);
          uint64_t v83 = *v82;
          if (v61 != *v82)
          {
            unint64_t v84 = 0;
            int v85 = 1;
            while (v83 != -4096)
            {
              if (v84) {
                BOOL v86 = 0;
              }
              else {
                BOOL v86 = v83 == -8192;
              }
              if (v86) {
                unint64_t v84 = v82;
              }
              unsigned int v87 = v81 + v85++;
              unsigned int v81 = v87 & v80;
              uint64_t v82 = (uint64_t *)(v62 + 72 * v81);
              uint64_t v83 = *v82;
              if (v61 == *v82) {
                goto LABEL_106;
              }
            }
            if (v84) {
              unint64_t v88 = v84;
            }
            else {
              unint64_t v88 = v82;
            }
LABEL_105:
            uint64_t v82 = sub_1CC387084((uint64_t)v111, &v114, v88);
            uint64_t *v82 = v61;
            *(_OWORD *)(v82 + 5) = 0u;
            *(_OWORD *)(v82 + 1) = 0u;
            *(_OWORD *)(v82 + 3) = 0u;
            *(_OWORD *)(v82 + 7) = 0u;
            v82[5] = (uint64_t)(v82 + 7);
            *((_DWORD *)v82 + 13) = 2;
          }
LABEL_106:
          if (v123 >= (unint64_t)v124) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v122 + v123++) = v61;
          int64_t v67 = v82 + 6;
          unint64_t v66 = *((unsigned int *)v82 + 12);
          *((_DWORD *)v82 + 3) = v27;
          if (v66 >= *((unsigned int *)v82 + 13)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v68 = v82[5];
LABEL_109:
          *(void *)(v68 + 8 * v66) = v65;
LABEL_110:
          ++*(_DWORD *)v67;
          goto LABEL_111;
        }
        unint64_t v88 = 0;
        goto LABEL_105;
      }
LABEL_118:
      if (v51 != (uint64_t *)v121) {
        free(v51);
      }
    }
    unsigned int v28 = v123;
  }
  while (v123);
  if (v122 != v125) {
    free(v122);
  }
  sub_1CC3861B4((uint64_t *)&__p, a1, 0);
  sub_1CC386D30((uint64_t)&__p, a1, *v106);
  uint64_t v91 = v111[0];
  if (v112)
  {
    uint64_t v92 = v111[0] + 56;
    uint64_t v93 = 72 * v112;
    do
    {
      uint64_t v94 = *(void *)(v92 - 56);
      if (v94 != -4096 && v94 != -8192)
      {
        unint64_t v95 = *(void **)(v92 - 16);
        if ((void *)v92 != v95) {
          free(v95);
        }
      }
      v92 += 72;
      v93 -= 72;
    }
    while (v93);
  }
  MEMORY[0x1D25D9CD0](v91, 8);
  if (__p) {
    operator delete(__p);
  }
  uint64_t v96 = (char *)v116;
  if (v117)
  {
    uint64_t v97 = (char *)v116 + 16 * v117;
    while (1)
    {
      uint64_t v98 = *(unsigned int *)(a1 + 64);
      if (!v98) {
        goto LABEL_153;
      }
      uint64_t v99 = *(void *)(a1 + 48);
      LODWORD(v100) = ((*(void *)v96 >> 4) ^ (*(void *)v96 >> 9)) & (v98 - 1);
      unsigned int v101 = (uint64_t *)(v99 + 16 * v100);
      uint64_t v102 = *v101;
      if (*(void *)v96 != *v101) {
        break;
      }
LABEL_151:
      if (v101 == (uint64_t *)(v99 + 16 * v98)) {
        goto LABEL_153;
      }
      int v105 = (void *)v101[1];
LABEL_154:
      sub_1CC3859F0(a1, v107, v105, *((void *)v96 + 1));
      v96 += 16;
      if (v96 == v97)
      {
        uint64_t v96 = (char *)v116;
        goto LABEL_156;
      }
    }
    int v103 = 1;
    while (v102 != -4096)
    {
      int v104 = v100 + v103++;
      uint64_t v100 = v104 & (v98 - 1);
      uint64_t v102 = *(void *)(v99 + 16 * v100);
      if (*(void *)v96 == v102)
      {
        unsigned int v101 = (uint64_t *)(v99 + 16 * v100);
        goto LABEL_151;
      }
    }
LABEL_153:
    int v105 = 0;
    goto LABEL_154;
  }
LABEL_156:
  if (v96 != v118) {
    free(v96);
  }
}

uint64_t sub_1CC3848CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(unsigned int *)(result + 64);
  if (v4)
  {
    uint64_t v5 = *(void *)(result + 48);
    unsigned int v6 = v4 - 1;
    LODWORD(v7) = (v4 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v8 = (uint64_t *)(v5 + 16 * v7);
    uint64_t v9 = *v8;
    if (*v8 == a3)
    {
LABEL_7:
      int v12 = (uint64_t *)(v5 + 16 * v4);
      if (v8 != v12 && v8[1])
      {
        LODWORD(v13) = v6 & ((a4 >> 4) ^ (a4 >> 9));
        unint64_t v14 = (uint64_t *)(v5 + 16 * v13);
        uint64_t v15 = *v14;
        if (*v14 == a4)
        {
LABEL_14:
          if (v14 != v12)
          {
            if (v14[1]) {
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
            }
          }
        }
        else
        {
          int v16 = 1;
          while (v15 != -4096)
          {
            int v17 = v13 + v16++;
            uint64_t v13 = v17 & v6;
            uint64_t v15 = *(void *)(v5 + 16 * v13);
            if (v15 == a4)
            {
              unint64_t v14 = (uint64_t *)(v5 + 16 * v13);
              goto LABEL_14;
            }
          }
        }
      }
    }
    else
    {
      int v10 = 1;
      while (v9 != -4096)
      {
        int v11 = v7 + v10++;
        uint64_t v7 = v11 & v6;
        uint64_t v9 = *(void *)(v5 + 16 * v7);
        if (v9 == a3)
        {
          uint64_t v8 = (uint64_t *)(v5 + 16 * v7);
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

void sub_1CC3856EC(uint64_t a1, uint64_t a2)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 80);
  sub_1CC0CEEC8((uint64_t *)(a1 + 48));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 92) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = v4;
  if (a2)
  {
    uint64_t v15 = *(void *)(a2 + 16);
    if (v15)
    {
      sub_1CD517C1C(*(void *)(a2 + 8), v15);
      uint64_t v16 = a2;
    }
    else
    {
      uint64_t v16 = 0;
    }
    int v17 = operator new(8uLL);
    __p = v17;
    *int v17 = 0;
    uint64_t v20 = v17 + 1;
    unint64_t v21 = v17 + 1;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unsigned int v24 = 0;
    uint64_t v25 = v16;
    sub_1CC38781C((uint64_t)&v26, a1, v16);
    sub_1CBA6E388(a1, (const void **)&v26);
    if (v26 != v28) {
      free(v26);
    }
    sub_1CC3898B0((char **)&__p, a1);
    sub_1CC3861B4((uint64_t *)&__p, a1, 0);
    *(unsigned char *)a2 = 1;
  }
  else
  {
    uint64_t v5 = operator new(8uLL);
    __p = v5;
    *uint64_t v5 = 0;
    uint64_t v20 = v5 + 1;
    unint64_t v21 = v5 + 1;
    uint64_t v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unsigned int v24 = 0;
    sub_1CC38781C((uint64_t)&v26, a1, 0);
    unsigned int v6 = v26;
    if (&v26 != (void **)a1)
    {
      if (v26 == v28)
      {
        int v7 = v27;
        uint64_t v8 = *(unsigned int *)(a1 + 8);
        if (v8 >= v27)
        {
          if (v27) {
            memmove(*(void **)a1, v28, 8 * v27);
          }
        }
        else
        {
          if (*(_DWORD *)(a1 + 12) < v27)
          {
            *(_DWORD *)(a1 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v8)
          {
            uint64_t v18 = *(unsigned int *)(a1 + 8);
            memmove(*(void **)a1, v28, 8 * v8);
            uint64_t v9 = v18;
          }
          else
          {
            uint64_t v9 = 0;
          }
          if (v9 != v27) {
            memcpy((void *)(*(void *)a1 + 8 * v9), (char *)v26 + 8 * v9, 8 * v27 - 8 * v9);
          }
        }
        *(_DWORD *)(a1 + 8) = v7;
      }
      else
      {
        if (*(void *)a1 != a1 + 16)
        {
          free(*(void **)a1);
          unsigned int v6 = v26;
        }
        *(void *)a1 = v6;
        *(void *)(a1 + 8) = v27;
        unint64_t v26 = v28;
        HIDWORD(v27) = 0;
      }
      LODWORD(v27) = 0;
      unsigned int v6 = v26;
    }
    if (v6 != v28) {
      free(v6);
    }
    sub_1CC3898B0((char **)&__p, a1);
    sub_1CC3861B4((uint64_t *)&__p, a1, 0);
  }
  if (*(_DWORD *)(a1 + 8)) {
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createNode();
  }
  uint64_t v10 = v22;
  if (v24)
  {
    uint64_t v11 = 72 * v24;
    int v12 = (void *)(v22 + 56);
    do
    {
      uint64_t v13 = *(v12 - 7);
      if (v13 != -4096 && v13 != -8192)
      {
        unint64_t v14 = (void *)*(v12 - 2);
        if (v12 != v14) {
          free(v14);
        }
      }
      v12 += 9;
      v11 -= 72;
    }
    while (v11);
  }
  MEMORY[0x1D25D9CD0](v10, 8);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1CC3859F0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  v100[8] = *MEMORY[0x1E4F143B8];
  uint64_t v79 = a4;
  if (**(void **)(a4 + 8)) {
    goto LABEL_107;
  }
  unsigned int v6 = *(void **)a1;
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  if (v7)
  {
    uint64_t v8 = 8 * v7;
    uint64_t v9 = *(void **)a1;
    while (*v9 != *(void *)a4)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
      {
        uint64_t v9 = &v6[v7];
        break;
      }
    }
  }
  else
  {
    uint64_t v9 = *(void **)a1;
  }
  if (v7 == v9 - v6)
  {
LABEL_107:
    if (*a3 && *(void *)a4) {
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
    }
    uint64_t v10 = *(unsigned int *)(a1 + 64);
    if (!v10) {
      goto LABEL_20;
    }
    uint64_t v11 = *(void **)(a1 + 48);
    LODWORD(v12) = 0;
    uint64_t v13 = v11;
    uint64_t v14 = *v11;
    if (*v11)
    {
      int v15 = 1;
      do
      {
        if (v14 == -4096) {
          goto LABEL_20;
        }
        int v16 = v12 + v15++;
        uint64_t v12 = v16 & (v10 - 1);
        uint64_t v14 = v11[2 * v12];
      }
      while (v14);
      uint64_t v13 = &v11[2 * v12];
    }
    if (v13 == &v11[2 * v10]) {
LABEL_20:
    }
      uint64_t v17 = 0;
    else {
      uint64_t v17 = v13[1];
    }
    unsigned int v18 = *(_DWORD *)(v17 + 16) + 1;
    if (v18 >= *(_DWORD *)(a4 + 16)) {
      return;
    }
    unsigned int v87 = v89;
    uint64_t v88 = 0x800000001;
    uint64_t v90 = 1;
    int64x2_t v91 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    int64x2_t v92 = v91;
    int64x2_t v93 = v91;
    int64x2_t v94 = v91;
    unint64_t v95 = v97;
    uint64_t v96 = 0x800000000;
    uint64_t v98 = v100;
    uint64_t v99 = 0x800000000;
    unint64_t v84 = v86;
    uint64_t v85 = 0x800000000;
    v89[0] = a4;
    sub_1CC3458E8((uint64_t)&v90, &v79, (uint64_t)&v81);
    unsigned int v19 = v88;
    if (!v88) {
      goto LABEL_89;
    }
LABEL_23:
    uint64_t v20 = v87;
    uint64_t v21 = *(void *)v87;
    uint64_t v22 = v19;
    if (v19 != 1)
    {
      uint64_t v23 = 0;
      unsigned int v24 = (char *)v87 + 8 * v19;
      int64_t v25 = ((unint64_t)v19 - 2) >> 1;
      unint64_t v26 = v87;
      do
      {
        uint64_t v27 = &v26[v23];
        uint64_t v30 = v27[1];
        unsigned int v28 = (char *)(v27 + 1);
        uint64_t v29 = v30;
        uint64_t v31 = (2 * v23) | 1;
        uint64_t v32 = 2 * v23 + 2;
        if (v32 < v22 && *(_DWORD *)(v29 + 16) < *(_DWORD *)(*((void *)v28 + 1) + 16))
        {
          uint64_t v29 = *((void *)v28 + 1);
          v28 += 8;
          uint64_t v31 = v32;
        }
        *unint64_t v26 = v29;
        unint64_t v26 = v28;
        uint64_t v23 = v31;
      }
      while (v31 <= v25);
      unint64_t v33 = v24 - 8;
      if (v28 == v33)
      {
        *(void *)unsigned int v28 = v21;
      }
      else
      {
        *(void *)unsigned int v28 = *(void *)v33;
        *(void *)unint64_t v33 = v21;
        uint64_t v34 = v28 - v20 + 8;
        if (v34 >= 9)
        {
          unint64_t v35 = (((unint64_t)v34 >> 3) - 2) >> 1;
          unsigned int v36 = &v20[8 * v35];
          uint64_t v37 = *(void *)v36;
          uint64_t v38 = *(void *)v28;
          unsigned int v39 = *(_DWORD *)(*(void *)v28 + 16);
          if (*(_DWORD *)(*(void *)v36 + 16) < v39)
          {
            do
            {
              unint64_t v40 = v36;
              *(void *)unsigned int v28 = v37;
              if (!v35) {
                break;
              }
              unint64_t v35 = (v35 - 1) >> 1;
              unsigned int v36 = &v20[8 * v35];
              uint64_t v37 = *(void *)v36;
              unsigned int v28 = v40;
            }
            while (*(_DWORD *)(*(void *)v36 + 16) < v39);
            *(void *)unint64_t v40 = v38;
          }
        }
      }
    }
    LODWORD(v88) = v22 - 1;
    if (v96 >= (unint64_t)HIDWORD(v96)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v95 + v96) = v21;
    LODWORD(v96) = v96 + 1;
    unsigned int v41 = *(_DWORD *)(v21 + 16);
LABEL_38:
    uint64_t v42 = *(void *)v21;
    if (a2)
    {
      sub_1CD544768((uint64_t)&v81, *(void *)(a2 + 8), v42);
      uint64_t v46 = v81;
      uint64_t v54 = v82;
    }
    else
    {
      unint64_t v44 = *(char **)(v42 + 64);
      uint64_t v43 = *(char **)(v42 + 72);
      unsigned int v81 = v83;
      uint64_t v82 = 0x800000000;
      unint64_t v45 = v43 - v44;
      if ((unint64_t)(v43 - v44) >= 0x41) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v46 = v83;
      if (v44 != v43)
      {
        uint64_t v47 = v83;
        do
        {
          uint64_t v48 = *(void *)v44;
          v44 += 8;
          *v47++ = v48;
        }
        while (v44 != v43);
        uint64_t v46 = v81;
      }
      uint64_t v49 = v46;
      uint64_t v50 = (v45 >> 3);
      if (v50)
      {
        uint64_t v51 = 8 * v50;
        uint64_t v49 = v46;
        do
        {
          if (!*v49) {
            goto LABEL_49;
          }
          ++v49;
          v51 -= 8;
        }
        while (v51);
        uint64_t v49 = &v46[v50];
      }
LABEL_49:
      uint64_t v52 = v49 - v46;
      if (v52 != v50)
      {
        int v76 = v49 + 1;
        if (v49 + 1 != &v46[v50])
        {
          uint64_t v77 = 8 * v50 - 8 * v52 - 8;
          do
          {
            if (*v76) {
              *v49++ = *v76;
            }
            ++v76;
            v77 -= 8;
          }
          while (v77);
          uint64_t v46 = v81;
        }
      }
      unint64_t v53 = (unint64_t)((char *)v49 - (char *)v46) >> 3;
      uint64_t v54 = v53;
      LODWORD(v82) = v53;
    }
    uint64_t v55 = &v46[v54];
    if (!v54) {
      goto LABEL_74;
    }
    while (1)
    {
      uint64_t v56 = *v46;
      uint64_t v78 = 0;
      uint64_t v57 = *(void *)(a1 + 48);
      uint64_t v58 = *(unsigned int *)(a1 + 64);
      if (v58)
      {
        LODWORD(v59) = (v58 - 1) & ((v56 >> 4) ^ (v56 >> 9));
        unint64_t v60 = (uint64_t *)(v57 + 16 * v59);
        uint64_t v61 = *v60;
        if (v56 == *v60) {
          goto LABEL_59;
        }
        int v62 = 1;
        while (v61 != -4096)
        {
          int v63 = v59 + v62++;
          uint64_t v59 = v63 & (v58 - 1);
          uint64_t v61 = *(void *)(v57 + 16 * v59);
          if (v56 == v61)
          {
            unint64_t v60 = (uint64_t *)(v57 + 16 * v59);
            goto LABEL_59;
          }
        }
      }
      unint64_t v60 = (uint64_t *)(v57 + 16 * v58);
LABEL_59:
      uint64_t v78 = v60[1];
      unsigned int v64 = *(_DWORD *)(v78 + 16);
      if (v64 > v18)
      {
        sub_1CC3458E8((uint64_t)&v90, &v78, (uint64_t)v80);
        if (v80[16])
        {
          if (v64 <= v41)
          {
            if (v88 >= (unint64_t)HIDWORD(v88)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v87 + v88) = v78;
            uint64_t v65 = (v88 + 1);
            LODWORD(v88) = v65;
            if (v65 >= 2)
            {
              unint64_t v66 = (char *)v87;
              int64_t v67 = (char *)v87 + 8 * v65;
              unint64_t v68 = (unint64_t)(v65 - 2) >> 1;
              uint64_t v69 = (char *)v87 + 8 * v68;
              uint64_t v70 = *(void *)v69;
              uint64_t v73 = *((void *)v67 - 1);
              uint64_t v72 = v67 - 8;
              uint64_t v71 = v73;
              unsigned int v74 = *(_DWORD *)(v73 + 16);
              if (*(_DWORD *)(*(void *)v69 + 16) < v74)
              {
                do
                {
                  int v75 = v69;
                  *(void *)uint64_t v72 = v70;
                  if (!v68) {
                    break;
                  }
                  unint64_t v68 = (v68 - 1) >> 1;
                  uint64_t v69 = &v66[8 * v68];
                  uint64_t v70 = *(void *)v69;
                  uint64_t v72 = v75;
                }
                while (*(_DWORD *)(*(void *)v69 + 16) < v74);
                *(void *)int v75 = v71;
              }
            }
          }
          else
          {
            if (v85 >= (unint64_t)HIDWORD(v85)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v84 + v85) = v78;
            LODWORD(v85) = v85 + 1;
          }
        }
      }
      if (++v46 == v55)
      {
        uint64_t v46 = v81;
LABEL_74:
        if (v46 != (void *)v83) {
          free(v46);
        }
        if (v85)
        {
          uint64_t v21 = *((void *)v84 + v85 - 1);
          LODWORD(v85) = v85 - 1;
          goto LABEL_38;
        }
        unsigned int v19 = v88;
        if (!v88)
        {
LABEL_89:
          if (v96) {
            llvm::DomTreeNodeBase<llvm::MachineBasicBlock>::setIDom();
          }
          sub_1CC387744(a1, a2);
          if (v84 != v86) {
            free(v84);
          }
          if (v98 != v100) {
            free(v98);
          }
          if (v95 != v97) {
            free(v95);
          }
          if ((v90 & 1) == 0) {
            MEMORY[0x1D25D9CD0](v91.i64[0], 8);
          }
          if (v87 != v89) {
            free(v87);
          }
          return;
        }
        goto LABEL_23;
      }
    }
  }

  sub_1CC3856EC(a1, a2);
}

void sub_1CC3861B4(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  v177[32] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)(a1[1] - *a1) >> 3;
  if (v6 >= 2)
  {
    uint64_t v7 = 1;
    while (1)
    {
      int v175 = 0;
      uint64_t v8 = *(void **)(v5 + 8 * v7);
      int v175 = v8;
      int v9 = *((_DWORD *)a1 + 10);
      if (!v9) {
        break;
      }
      uint64_t v10 = a1[3];
      int v11 = v9 - 1;
      unsigned int v12 = ((v8 >> 4) ^ (v8 >> 9)) & v11;
      uint64_t v13 = (uint64_t *)(v10 + 72 * v12);
      uint64_t v14 = *v13;
      if (v8 != (void *)*v13)
      {
        int v15 = 0;
        int v16 = 1;
        while (v14 != -4096)
        {
          if (v15) {
            BOOL v17 = 0;
          }
          else {
            BOOL v17 = v14 == -8192;
          }
          if (v17) {
            int v15 = v13;
          }
          unsigned int v18 = v12 + v16++;
          unsigned int v12 = v18 & v11;
          uint64_t v13 = (uint64_t *)(v10 + 72 * v12);
          uint64_t v14 = *v13;
          if (v8 == (void *)*v13) {
            goto LABEL_5;
          }
        }
        if (v15) {
          unsigned int v19 = v15;
        }
        else {
          unsigned int v19 = v13;
        }
        goto LABEL_19;
      }
LABEL_5:
      _OWORD v13[4] = *(void *)(v5 + 8 * *((unsigned int *)v13 + 3));
      if (++v7 == v6) {
        goto LABEL_20;
      }
    }
    unsigned int v19 = 0;
LABEL_19:
    uint64_t v13 = sub_1CC387084((uint64_t)(a1 + 3), (uint64_t *)&v175, v19);
    uint64_t *v13 = (uint64_t)v8;
    *(_OWORD *)(v13 + 5) = 0u;
    *(_OWORD *)(v13 + 3) = 0u;
    *(_OWORD *)(v13 + 1) = 0u;
    *(_OWORD *)(v13 + 7) = 0u;
    v13[5] = (uint64_t)(v13 + 7);
    *((_DWORD *)v13 + 13) = 2;
    uint64_t v5 = *a1;
    goto LABEL_5;
  }
LABEL_20:
  uint64_t v170 = v6;
  int v175 = v177;
  uint64_t v176 = 0x2000000000;
  unsigned int v20 = v6;
  uint64_t v21 = (v6 - 1);
  if (v21 < 2) {
    goto LABEL_210;
  }
  unsigned int v167 = a3;
  uint64_t v172 = (uint64_t)(a1 + 3);
  unsigned int v169 = v20;
  unsigned int v22 = v20;
  do
  {
    uint64_t v23 = *(void *)(*a1 + 8 * v21);
    uint64_t v173 = v23;
    int v24 = *((_DWORD *)a1 + 10);
    if (v24)
    {
      uint64_t v25 = a1[3];
      int v26 = v24 - 1;
      unsigned int v27 = ((v23 >> 4) ^ (v23 >> 9)) & v26;
      unsigned int v28 = (uint64_t *)(v25 + 72 * v27);
      uint64_t v29 = *v28;
      if (v23 == *v28) {
        goto LABEL_24;
      }
      uint64_t v99 = 0;
      int v100 = 1;
      while (v29 != -4096)
      {
        if (v99) {
          BOOL v101 = 0;
        }
        else {
          BOOL v101 = v29 == -8192;
        }
        if (v101) {
          uint64_t v99 = v28;
        }
        unsigned int v102 = v27 + v100++;
        unsigned int v27 = v102 & v26;
        unsigned int v28 = (uint64_t *)(v25 + 72 * v27);
        uint64_t v29 = *v28;
        if (v23 == *v28) {
          goto LABEL_24;
        }
      }
      if (v99) {
        int v103 = v99;
      }
      else {
        int v103 = v28;
      }
    }
    else
    {
      int v103 = 0;
    }
    unsigned int v28 = sub_1CC387084(v172, &v173, v103);
    *unsigned int v28 = v23;
    *(_OWORD *)(v28 + 5) = 0u;
    *(_OWORD *)(v28 + 1) = 0u;
    *(_OWORD *)(v28 + 3) = 0u;
    *(_OWORD *)(v28 + 7) = 0u;
    void v28[5] = (uint64_t)(v28 + 7);
    *((_DWORD *)v28 + 13) = 2;
LABEL_24:
    *((_DWORD *)v28 + 4) = *((_DWORD *)v28 + 3);
    uint64_t v30 = *((unsigned int *)v28 + 12);
    if (v30)
    {
      uint64_t v31 = (uint64_t *)v28[5];
      uint64_t v32 = &v31[v30];
      while (1)
      {
        int v33 = *((_DWORD *)a1 + 10);
        if (v33)
        {
          uint64_t v34 = *v31;
          uint64_t v35 = a1[3];
          unsigned int v36 = (*v31 >> 4) ^ (*v31 >> 9);
          int v37 = v33 - 1;
          unsigned int v38 = v36 & v37;
          unsigned int v39 = (uint64_t *)(v35 + 72 * (v36 & v37));
          uint64_t v40 = *v39;
          if (*v31 != *v39)
          {
            int v41 = 1;
            uint64_t v42 = *v39;
            unsigned int v43 = v36 & v37;
            while (v42 != -4096)
            {
              unsigned int v44 = v43 + v41++;
              unsigned int v43 = v44 & v37;
              uint64_t v42 = *(void *)(v35 + 72 * v43);
              if (v34 == v42) {
                goto LABEL_31;
              }
            }
            goto LABEL_42;
          }
LABEL_31:
          uint64_t v45 = *(unsigned int *)(a2 + 64);
          if (!v45) {
            break;
          }
          uint64_t v46 = *(void *)(a2 + 48);
          LODWORD(v47) = (v45 - 1) & v36;
          uint64_t v48 = (uint64_t *)(v46 + 16 * v47);
          uint64_t v49 = *v48;
          if (v34 != *v48)
          {
            int v95 = 1;
            do
            {
              if (v49 == -4096) {
                goto LABEL_35;
              }
              int v96 = v47 + v95++;
              uint64_t v47 = v96 & (v45 - 1);
              uint64_t v49 = *(void *)(v46 + 16 * v47);
            }
            while (v34 != v49);
            uint64_t v48 = (uint64_t *)(v46 + 16 * v47);
          }
          if (v48 == (uint64_t *)(v46 + 16 * v45)) {
            break;
          }
          uint64_t v50 = v48[1];
          if (!v50 || *(_DWORD *)(v50 + 16) >= v167) {
            break;
          }
        }
LABEL_42:
        if (++v31 == v32) {
          goto LABEL_112;
        }
      }
LABEL_35:
      uint64_t v174 = *v31;
      if (v34 != v40)
      {
        unint64_t v60 = 0;
        int v61 = 1;
        while (v40 != -4096)
        {
          if (v60) {
            BOOL v62 = 0;
          }
          else {
            BOOL v62 = v40 == -8192;
          }
          if (v62) {
            unint64_t v60 = v39;
          }
          unsigned int v63 = v38 + v61++;
          unsigned int v38 = v63 & v37;
          unsigned int v39 = (uint64_t *)(v35 + 72 * v38);
          uint64_t v40 = *v39;
          if (*v39 == v34) {
            goto LABEL_36;
          }
        }
        if (v60) {
          uint64_t v97 = v60;
        }
        else {
          uint64_t v97 = v39;
        }
        unsigned int v39 = sub_1CC387084(v172, &v174, v97);
        *unsigned int v39 = v34;
        *(_OWORD *)(v39 + 5) = 0u;
        *(_OWORD *)(v39 + 1) = 0u;
        *(_OWORD *)(v39 + 3) = 0u;
        *(_OWORD *)(v39 + 7) = 0u;
        v39[5] = (uint64_t)(v39 + 7);
        *((_DWORD *)v39 + 13) = 2;
      }
LABEL_36:
      if (*((_DWORD *)v39 + 3) < v22)
      {
        uint64_t v51 = v39 + 3;
LABEL_38:
        uint64_t v52 = *v51;
        uint64_t v174 = *v51;
        int v53 = *((_DWORD *)a1 + 10);
        if (v53)
        {
          uint64_t v54 = a1[3];
          int v55 = v53 - 1;
          unsigned int v56 = v55 & ((v52 >> 4) ^ (v52 >> 9));
          uint64_t v57 = (uint64_t *)(v54 + 72 * v56);
          uint64_t v58 = *v57;
          if (v52 == *v57) {
            goto LABEL_40;
          }
          unsigned int v64 = 0;
          int v65 = 1;
          while (v58 != -4096)
          {
            if (v64) {
              BOOL v66 = 0;
            }
            else {
              BOOL v66 = v58 == -8192;
            }
            if (v66) {
              unsigned int v64 = v57;
            }
            unsigned int v67 = v56 + v65++;
            unsigned int v56 = v67 & v55;
            uint64_t v57 = (uint64_t *)(v54 + 72 * v56);
            uint64_t v58 = *v57;
            if (v52 == *v57) {
              goto LABEL_40;
            }
          }
          if (v64) {
            uint64_t v98 = v64;
          }
          else {
            uint64_t v98 = v57;
          }
        }
        else
        {
          uint64_t v98 = 0;
        }
        uint64_t v57 = sub_1CC387084(v172, &v174, v98);
        *uint64_t v57 = v52;
        *(_OWORD *)(v57 + 5) = 0u;
        *(_OWORD *)(v57 + 1) = 0u;
        *(_OWORD *)(v57 + 3) = 0u;
        *(_OWORD *)(v57 + 7) = 0u;
        v57[5] = (uint64_t)(v57 + 7);
        *((_DWORD *)v57 + 13) = 2;
LABEL_40:
        unsigned int v59 = *((_DWORD *)v57 + 4);
        if (v59 < *((_DWORD *)v28 + 4)) {
          *((_DWORD *)v28 + 4) = v59;
        }
        goto LABEL_42;
      }
      int v75 = v39 + 1;
      while (1)
      {
        if (v176 >= (unint64_t)HIDWORD(v176)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v175 + v176) = v75;
        LODWORD(v176) = v176 + 1;
        unint64_t v68 = (uint64_t *)(*a1 + 8 * *((unsigned int *)v75 + 1));
        int v69 = *((_DWORD *)a1 + 10);
        if (!v69) {
          break;
        }
        uint64_t v70 = a1[3];
        int v71 = v69 - 1;
        unsigned int v72 = ((*v68 >> 4) ^ (*v68 >> 9)) & v71;
        uint64_t v73 = (uint64_t *)(v70 + 72 * v72);
        uint64_t v74 = *v73;
        if (*v68 != *v73)
        {
          int v76 = 0;
          int v77 = 1;
          while (v74 != -4096)
          {
            if (v76) {
              BOOL v78 = 0;
            }
            else {
              BOOL v78 = v74 == -8192;
            }
            if (v78) {
              int v76 = v73;
            }
            unsigned int v79 = v72 + v77++;
            unsigned int v72 = v79 & v71;
            uint64_t v73 = (uint64_t *)(v70 + 72 * v72);
            uint64_t v74 = *v73;
            if (*v68 == *v73) {
              goto LABEL_65;
            }
          }
          if (v76) {
            unsigned int v80 = v76;
          }
          else {
            unsigned int v80 = v73;
          }
          goto LABEL_79;
        }
LABEL_65:
        int v75 = v73 + 1;
        if (*((_DWORD *)v73 + 3) < v22)
        {
          int v104 = v73 + 3;
          int v105 = *((_DWORD *)a1 + 10);
          if (v105)
          {
            uint64_t v106 = a1[3];
            int v107 = v105 - 1;
            unsigned int v108 = ((*v104 >> 4) ^ (*v104 >> 9)) & v107;
            long long v109 = (uint64_t *)(v106 + 72 * v108);
            uint64_t v110 = *v109;
            if (*v104 == *v109) {
              goto LABEL_130;
            }
            long long v111 = 0;
            int v112 = 1;
            while (v110 != -4096)
            {
              if (v111) {
                BOOL v113 = 0;
              }
              else {
                BOOL v113 = v110 == -8192;
              }
              if (v113) {
                long long v111 = v109;
              }
              unsigned int v114 = v108 + v112++;
              unsigned int v108 = v114 & v107;
              long long v109 = (uint64_t *)(v106 + 72 * v108);
              uint64_t v110 = *v109;
              if (*v104 == *v109) {
                goto LABEL_130;
              }
            }
            if (v111) {
              long long v166 = v111;
            }
            else {
              long long v166 = v109;
            }
          }
          else
          {
            long long v166 = 0;
          }
          long long v109 = sub_1CC387084(v172, v104, v166);
          *long long v109 = *v104;
          *(_OWORD *)(v109 + 5) = 0u;
          *(_OWORD *)(v109 + 3) = 0u;
          *(_OWORD *)(v109 + 1) = 0u;
          *(_OWORD *)(v109 + 7) = 0u;
          v109[5] = (uint64_t)(v109 + 7);
          *((_DWORD *)v109 + 13) = 2;
LABEL_130:
          int64x2_t v93 = v109 + 1;
          unsigned int v88 = v176;
          while (2)
          {
            uint64_t v81 = *((void *)v175 + v88 - 1);
            LODWORD(v176) = v88 - 1;
            *(_DWORD *)(v81 + 4) = *((_DWORD *)v75 + 1);
            uint64_t v51 = (uint64_t *)(v81 + 16);
            int v82 = *((_DWORD *)a1 + 10);
            if (v82)
            {
              uint64_t v83 = a1[3];
              int v84 = v82 - 1;
              unsigned int v85 = ((*v51 >> 4) ^ (*v51 >> 9)) & v84;
              BOOL v86 = (uint64_t *)(v83 + 72 * v85);
              uint64_t v87 = *v86;
              if (*v51 == *v86) {
                goto LABEL_82;
              }
              uint64_t v89 = 0;
              int v90 = 1;
              while (v87 != -4096)
              {
                if (v89) {
                  BOOL v91 = 0;
                }
                else {
                  BOOL v91 = v87 == -8192;
                }
                if (v91) {
                  uint64_t v89 = v86;
                }
                unsigned int v92 = v85 + v90++;
                unsigned int v85 = v92 & v84;
                BOOL v86 = (uint64_t *)(v83 + 72 * v85);
                uint64_t v87 = *v86;
                if (*v51 == *v86) {
                  goto LABEL_82;
                }
              }
              __n128 v168 = v93;
              if (v89) {
                int64x2_t v94 = v89;
              }
              else {
                int64x2_t v94 = v86;
              }
            }
            else
            {
              __n128 v168 = v93;
              int64x2_t v94 = 0;
            }
            BOOL v86 = sub_1CC387084(v172, (uint64_t *)(v81 + 16), v94);
            *BOOL v86 = *v51;
            *(_OWORD *)(v86 + 5) = 0u;
            *(_OWORD *)(v86 + 3) = 0u;
            *(_OWORD *)(v86 + 1) = 0u;
            *(_OWORD *)(v86 + 7) = 0u;
            v86[5] = (uint64_t)(v86 + 7);
            *((_DWORD *)v86 + 13) = 2;
            int64x2_t v93 = v168;
LABEL_82:
            if (*((_DWORD *)v93 + 2) >= *((_DWORD *)v86 + 4)) {
              int64x2_t v93 = v86 + 1;
            }
            else {
              *uint64_t v51 = v75[2];
            }
            unsigned int v88 = v176;
            int v75 = (uint64_t *)v81;
            if (!v176) {
              goto LABEL_38;
            }
            continue;
          }
        }
      }
      unsigned int v80 = 0;
LABEL_79:
      uint64_t v73 = sub_1CC387084(v172, v68, v80);
      uint64_t *v73 = *v68;
      *(_OWORD *)(v73 + 5) = 0u;
      *(_OWORD *)(v73 + 3) = 0u;
      *(_OWORD *)(v73 + 1) = 0u;
      *(_OWORD *)(v73 + 7) = 0u;
      v73[5] = (uint64_t)(v73 + 7);
      *((_DWORD *)v73 + 13) = 2;
      goto LABEL_65;
    }
LABEL_112:
    unsigned int v22 = v21--;
  }
  while ((v21 & 0xFFFFFFFE) != 0);
  if (v169 < 3) {
    goto LABEL_210;
  }
  uint64_t v115 = 2;
  while (2)
  {
    uint64_t v116 = *a1;
    uint64_t v117 = *(void *)(*a1 + 8 * v115);
    uint64_t v174 = v117;
    int v118 = *((_DWORD *)a1 + 10);
    if (v118)
    {
      uint64_t v119 = a1[3];
      int v120 = v118 - 1;
      unsigned int v121 = ((v117 >> 4) ^ (v117 >> 9)) & (v118 - 1);
      int v122 = (uint64_t *)(v119 + 72 * v121);
      uint64_t v123 = *v122;
      if (v117 == *v122)
      {
        unsigned int v124 = (uint64_t *)(v116 + 8 * *((unsigned int *)v122 + 4));
        uint64_t v125 = v170;
        goto LABEL_145;
      }
      char v155 = 0;
      int v156 = 1;
      uint64_t v125 = v170;
      while (v123 != -4096)
      {
        if (v155) {
          BOOL v157 = 0;
        }
        else {
          BOOL v157 = v123 == -8192;
        }
        if (v157) {
          char v155 = v122;
        }
        unsigned int v158 = v121 + v156++;
        unsigned int v121 = v158 & v120;
        int v122 = (uint64_t *)(v119 + 72 * v121);
        uint64_t v123 = *v122;
        if (v117 == *v122) {
          goto LABEL_199;
        }
      }
      if (v155) {
        unint64_t v163 = v155;
      }
      else {
        unint64_t v163 = v122;
      }
    }
    else
    {
      unint64_t v163 = 0;
      uint64_t v125 = v170;
    }
    int v122 = sub_1CC387084(v172, &v174, v163);
    uint64_t *v122 = v117;
    *(_OWORD *)(v122 + 5) = 0u;
    *(_OWORD *)(v122 + 3) = 0u;
    *(_OWORD *)(v122 + 7) = 0u;
    *(_OWORD *)(v122 + 1) = 0u;
    v122[5] = (uint64_t)(v122 + 7);
    *((_DWORD *)v122 + 13) = 2;
    uint64_t v116 = *a1;
    uint64_t v119 = a1[3];
    int v118 = *((_DWORD *)a1 + 10);
LABEL_199:
    unsigned int v124 = (uint64_t *)(v116 + 8 * *((unsigned int *)v122 + 4));
    if (!v118)
    {
      uint64_t v164 = 0;
LABEL_204:
      long long v127 = sub_1CC387084(v172, v124, v164);
      *long long v127 = *v124;
      *(_OWORD *)(v127 + 5) = 0u;
      *(_OWORD *)(v127 + 3) = 0u;
      *(_OWORD *)(v127 + 1) = 0u;
      *(_OWORD *)(v127 + 7) = 0u;
      v127[5] = (uint64_t)(v127 + 7);
      *((_DWORD *)v127 + 13) = 2;
      goto LABEL_146;
    }
    int v120 = v118 - 1;
LABEL_145:
    unsigned int v126 = ((*v124 >> 4) ^ (*v124 >> 9)) & v120;
    long long v127 = (uint64_t *)(v119 + 72 * v126);
    uint64_t v128 = *v127;
    if (*v124 != *v127)
    {
      unsigned int v159 = 0;
      int v160 = 1;
      while (v128 != -4096)
      {
        if (v159) {
          BOOL v161 = 0;
        }
        else {
          BOOL v161 = v128 == -8192;
        }
        if (v161) {
          unsigned int v159 = v127;
        }
        unsigned int v162 = v126 + v160++;
        unsigned int v126 = v162 & v120;
        long long v127 = (uint64_t *)(v119 + 72 * v126);
        uint64_t v128 = *v127;
        if (*v124 == *v127) {
          goto LABEL_146;
        }
      }
      if (v159) {
        uint64_t v164 = v159;
      }
      else {
        uint64_t v164 = v127;
      }
      goto LABEL_204;
    }
LABEL_146:
    unsigned int v129 = *((_DWORD *)v127 + 2);
    long long v130 = v122 + 4;
    for (uint64_t i = v130; ; uint64_t i = v144 + 4)
    {
      uint64_t v132 = *i;
      uint64_t v173 = v132;
      int v133 = *((_DWORD *)a1 + 10);
      unsigned int v134 = v132 >> 4;
      if (v133)
      {
        uint64_t v135 = a1[3];
        int v136 = v133 - 1;
        unsigned int v137 = (v134 ^ (v132 >> 9)) & v136;
        unsigned int v138 = (uint64_t *)(v135 + 72 * v137);
        uint64_t v139 = *v138;
        if (v132 == *v138) {
          goto LABEL_149;
        }
        uint64_t v146 = 0;
        int v147 = 1;
        while (v139 != -4096)
        {
          if (v146) {
            BOOL v148 = 0;
          }
          else {
            BOOL v148 = v139 == -8192;
          }
          if (v148) {
            uint64_t v146 = v138;
          }
          unsigned int v149 = v137 + v147++;
          unsigned int v137 = v149 & v136;
          unsigned int v138 = (uint64_t *)(v135 + 72 * v137);
          uint64_t v139 = *v138;
          if (v132 == *v138) {
            goto LABEL_149;
          }
        }
        long long v150 = v146 ? v146 : v138;
      }
      else
      {
        long long v150 = 0;
      }
      unsigned int v138 = sub_1CC387084(v172, &v173, v150);
      *unsigned int v138 = v132;
      *(_OWORD *)(v138 + 5) = 0u;
      *(_OWORD *)(v138 + 1) = 0u;
      *(_OWORD *)(v138 + 3) = 0u;
      *(_OWORD *)(v138 + 7) = 0u;
      v138[5] = (uint64_t)(v138 + 7);
      *((_DWORD *)v138 + 13) = 2;
LABEL_149:
      if (*((_DWORD *)v138 + 2) <= v129) {
        break;
      }
      int v140 = *((_DWORD *)a1 + 10);
      if (v140)
      {
        uint64_t v141 = a1[3];
        int v142 = v140 - 1;
        unsigned int v143 = v142 & (v134 ^ (v132 >> 9));
        uint64_t v144 = (uint64_t *)(v141 + 72 * v143);
        uint64_t v145 = *v144;
        if (v132 == *v144) {
          continue;
        }
        uint64_t v151 = 0;
        int v152 = 1;
        while (v145 != -4096)
        {
          if (v151) {
            BOOL v153 = 0;
          }
          else {
            BOOL v153 = v145 == -8192;
          }
          if (v153) {
            uint64_t v151 = v144;
          }
          unsigned int v154 = v143 + v152++;
          unsigned int v143 = v154 & v142;
          uint64_t v144 = (uint64_t *)(v141 + 72 * v143);
          uint64_t v145 = *v144;
          if (v132 == *v144) {
            goto LABEL_152;
          }
        }
        if (v151) {
          uint64_t v165 = v151;
        }
        else {
          uint64_t v165 = v144;
        }
      }
      else
      {
        uint64_t v165 = 0;
      }
      uint64_t v144 = sub_1CC387084(v172, &v173, v165);
      uint64_t *v144 = v132;
      *(_OWORD *)(v144 + 5) = 0u;
      *(_OWORD *)(v144 + 1) = 0u;
      *(_OWORD *)(v144 + 3) = 0u;
      *(_OWORD *)(v144 + 7) = 0u;
      v144[5] = (uint64_t)(v144 + 7);
      *((_DWORD *)v144 + 13) = 2;
LABEL_152:
      ;
    }
    *long long v130 = v132;
    if (++v115 != v125) {
      continue;
    }
    break;
  }
LABEL_210:
  if (v175 != v177) {
    free(v175);
  }
}

uint64_t *sub_1CC386D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t result = (uint64_t *)(a1 + 24);
  uint64_t v7 = v8;
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = (uint64_t *)(*(void *)a1 + 8);
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    int v12 = v11 - 1;
    unsigned int v13 = ((*v10 >> 4) ^ (*v10 >> 9)) & (v11 - 1);
    uint64_t v14 = (uint64_t *)(v7 + 72 * v13);
    uint64_t v15 = *v14;
    if (*v10 == *v14) {
      goto LABEL_16;
    }
    int v16 = 0;
    int v17 = 1;
    while (v15 != -4096)
    {
      if (v16) {
        BOOL v18 = 0;
      }
      else {
        BOOL v18 = v15 == -8192;
      }
      if (v18) {
        int v16 = v14;
      }
      unsigned int v19 = v13 + v17++;
      unsigned int v13 = v19 & v12;
      uint64_t v14 = (uint64_t *)(v7 + 72 * (v19 & v12));
      uint64_t v15 = *v14;
      if (*v10 == *v14) {
        goto LABEL_16;
      }
    }
    if (v16) {
      unsigned int v20 = v16;
    }
    else {
      unsigned int v20 = v14;
    }
  }
  else
  {
    unsigned int v20 = 0;
  }
  uint64_t result = sub_1CC387084((uint64_t)result, (uint64_t *)(*(void *)a1 + 8), v20);
  uint64_t v14 = result;
  *uint64_t result = *v10;
  *(_OWORD *)(result + 5) = 0u;
  *(_OWORD *)(result + 3) = 0u;
  *(_OWORD *)(result + 1) = 0u;
  *(_OWORD *)(result + 7) = 0u;
  result[5] = (uint64_t)(result + 7);
  *((_DWORD *)result + 13) = 2;
  uint64_t v9 = *(void *)a1;
LABEL_16:
  v14[4] = a3;
  uint64_t v21 = *(void *)(a1 + 8) - v9;
  if (v21 != 8)
  {
    uint64_t v22 = v21 >> 3;
    uint64_t v23 = 1;
    while (1)
    {
      uint64_t v39 = 0;
      uint64_t v24 = *(void *)(*(void *)a1 + 8 * v23);
      uint64_t v39 = v24;
      int v25 = *(_DWORD *)(a2 + 64);
      if (!v25) {
        break;
      }
      uint64_t v26 = *(void *)(a2 + 48);
      int v27 = v25 - 1;
      unsigned int v28 = ((v24 >> 4) ^ (v24 >> 9)) & v27;
      uint64_t result = (uint64_t *)(v26 + 16 * v28);
      uint64_t v29 = *result;
      if (v24 != *result)
      {
        uint64_t v30 = 0;
        int v31 = 1;
        while (v29 != -4096)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -8192;
          }
          if (v32) {
            uint64_t v30 = result;
          }
          unsigned int v33 = v28 + v31++;
          unsigned int v28 = v33 & v27;
          uint64_t result = (uint64_t *)(v26 + 16 * v28);
          uint64_t v29 = *result;
          if (v24 == *result) {
            goto LABEL_33;
          }
        }
        if (v30) {
          uint64_t v34 = v30;
        }
        else {
          uint64_t v34 = result;
        }
        goto LABEL_32;
      }
LABEL_33:
      if (!result[1])
      {
        uint64_t v35 = *(void *)(a1 + 24);
        unsigned int v36 = *(_DWORD *)(a1 + 40);
        int v37 = sub_1CC129FE4(v35, v36, v39);
        if ((uint64_t *)(v35 + 72 * v36) == v37) {
          uint64_t v38 = 0;
        }
        else {
          uint64_t v38 = v37[4];
        }
        sub_1CC38751C(a1, v38, a2);
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild();
      }
      if (++v23 == v22) {
        return result;
      }
    }
    uint64_t v34 = 0;
LABEL_32:
    uint64_t result = sub_1CC2DEE88(a2 + 48, (uint64_t)&v39, &v39, v34);
    *uint64_t result = v39;
    result[1] = 0;
    goto LABEL_33;
  }
  return result;
}

uint64_t sub_1CC386F74(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 72 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(a1 + 72 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1CC387000(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(result + 72 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(result + 72 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_3;
        }
      }
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

uint64_t *sub_1CC387084(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    int v9 = *(uint64_t **)a1;
    unint64_t v10 = (2 * v6 - 1) | ((unint64_t)(2 * v6 - 1) >> 1);
    unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
    if ((v12 + 1) > 0x40) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 64;
    }
    *(_DWORD *)(a1 + 16) = v13;
    uint64_t v14 = (uint64_t *)operator new(72 * v13, (std::align_val_t)8uLL);
    *(void *)a1 = v14;
    if (v9)
    {
      sub_1CC387334(a1, v9, &v9[9 * v6]);
      MEMORY[0x1D25D9CD0](v9, 8);
      LODWORD(v16) = *(_DWORD *)(a1 + 16);
      uint64_t v14 = *(uint64_t **)a1;
    }
    else
    {
      uint64_t v15 = 0;
      *(void *)(a1 + 8) = 0;
      uint64_t v16 = *(unsigned int *)(a1 + 16);
      do
      {
        v14[v15] = -4096;
        v15 += 9;
      }
      while (9 * v16 != v15);
    }
    uint64_t v7 = *a2;
    int v17 = v16 - 1;
    unsigned int v18 = ((*a2 >> 4) ^ (*a2 >> 9)) & v17;
    a3 = &v14[9 * v18];
    uint64_t v19 = *a3;
    if (*a2 == *a3) {
      goto LABEL_5;
    }
    unsigned int v20 = 0;
    int v21 = 1;
    while (v19 != -4096)
    {
      if (v20) {
        BOOL v22 = 0;
      }
      else {
        BOOL v22 = v19 == -8192;
      }
      if (v22) {
        unsigned int v20 = a3;
      }
      unsigned int v23 = v18 + v21++;
      unsigned int v18 = v23 & v17;
      a3 = &v14[9 * v18];
      uint64_t v19 = *a3;
      if (v7 == *a3) {
        goto LABEL_5;
      }
    }
    if (v20) {
      a3 = v20;
    }
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
    sub_1CC38725C(a1, *(_DWORD *)(a1 + 16));
    uint64_t v24 = 0;
    sub_1CC387000(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
    a3 = v24;
  }
  uint64_t v7 = *a3;
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v7 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC38725C(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC387334(a1, v4, &v4[9 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 72 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void sub_1CC387334(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = a2;
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6)
  {
    int v7 = *(void **)a1;
    uint64_t v8 = 72 * v6;
    do
    {
      *int v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        int v10 = *(_DWORD *)(a1 + 16) - 1;
        unsigned int v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
        uint64_t v12 = *(void *)a1 + 72 * v11;
        uint64_t v13 = *(void *)v12;
        if (v9 != *(void *)v12)
        {
          uint64_t v19 = 0;
          int v20 = 1;
          while (v13 != -4096)
          {
            if (v19) {
              BOOL v21 = 0;
            }
            else {
              BOOL v21 = v13 == -8192;
            }
            if (v21) {
              uint64_t v19 = v12;
            }
            unsigned int v22 = v11 + v20++;
            unsigned int v11 = v22 & v10;
            uint64_t v12 = *(void *)a1 + 72 * v11;
            uint64_t v13 = *(void *)v12;
            if (v9 == *(void *)v12) {
              goto LABEL_7;
            }
          }
          if (v19) {
            uint64_t v12 = v19;
          }
        }
LABEL_7:
        *(void *)uint64_t v12 = v9;
        long long v14 = *(_OWORD *)(v4 + 1);
        long long v15 = *(_OWORD *)(v4 + 3);
        *(void *)(v12 + 40) = v12 + 56;
        *(_OWORD *)(v12 + 8) = v14;
        *(_OWORD *)(v12 + 24) = v15;
        *(void *)(v12 + 48) = 0x200000000;
        unsigned int v16 = *((_DWORD *)v4 + 12);
        if (v16 && (uint64_t *)v12 != v4)
        {
          int v17 = (uint64_t *)v4[5];
          if (v17 == v4 + 7)
          {
            if (v16 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v12 + 56), v17, 8 * *((unsigned int *)v4 + 12));
            *(_DWORD *)(v12 + 48) = v16;
          }
          else
          {
            *(void *)(v12 + 40) = v17;
            int v23 = *((_DWORD *)v4 + 13);
            *(_DWORD *)(v12 + 48) = v16;
            *(_DWORD *)(v12 + 52) = v23;
            v4[5] = (uint64_t)(v4 + 7);
            *((_DWORD *)v4 + 13) = 0;
          }
          *((_DWORD *)v4 + 12) = 0;
        }
        ++*(_DWORD *)(a1 + 8);
        unsigned int v18 = (uint64_t *)v4[5];
        if (v18 != v4 + 7) {
          free(v18);
        }
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CC38751C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a3 + 64);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(a3 + 48);
  LODWORD(v7) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  uint64_t v9 = *v8;
  if (*v8 != a2)
  {
    int v10 = 1;
    do
    {
      if (v9 == -4096) {
        goto LABEL_9;
      }
      int v11 = v7 + v10++;
      uint64_t v7 = v11 & (v5 - 1);
      uint64_t v9 = *(void *)(v6 + 16 * v7);
    }
    while (v9 != a2);
    uint64_t v8 = (uint64_t *)(v6 + 16 * v7);
  }
  if (v8 == (uint64_t *)(v6 + 16 * v5) || (uint64_t result = v8[1]) == 0)
  {
LABEL_9:
    uint64_t v13 = *(void *)(a1 + 24);
    unsigned int v14 = *(_DWORD *)(a1 + 40);
    long long v15 = sub_1CC129FE4(v13, v14, a2);
    if ((uint64_t *)(v13 + 72 * v14) == v15) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15[4];
    }
    sub_1CC38751C(a1, v16, a3);
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::createChild();
  }
  return result;
}

uint64_t sub_1CC387630(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v4 = 72 * v2;
    uint64_t v5 = (void *)(v3 + 56);
    do
    {
      uint64_t v6 = *(v5 - 7);
      if (v6 != -4096 && v6 != -8192)
      {
        uint64_t v7 = (void *)*(v5 - 2);
        if (v5 != v7)
        {
          int v10 = v5;
          uint64_t v11 = v4;
          free(v7);
          uint64_t v5 = v10;
          uint64_t v4 = v11;
        }
      }
      v5 += 9;
      v4 -= 72;
    }
    while (v4);
    uint64_t v3 = *(void *)(a1 + 24);
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_1CC3876D0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 72 * v1;
    uint64_t v3 = *(void *)a1 + 56;
    do
    {
      uint64_t v4 = *(void *)(v3 - 56);
      if (v4 != -4096 && v4 != -8192)
      {
        uint64_t v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5)
        {
          uint64_t v6 = v3;
          uint64_t v7 = v2;
          free(v5);
          uint64_t v3 = v6;
          uint64_t v2 = v7;
        }
      }
      v3 += 72;
      v2 -= 72;
    }
    while (v2);
  }
}

void sub_1CC387744(uint64_t a1, uint64_t a2)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v5 = *(uint64_t **)a1;
    uint64_t v6 = 8 * v2;
    while (!sub_1CC387BD4(*v5, a2))
    {
      ++v5;
      v6 -= 8;
      if (!v6) {
        return;
      }
    }
    sub_1CC38781C((uint64_t)v7, a1, a2);
    if (!sub_1CD52E948(*(uint64_t **)a1, *(_DWORD *)(a1 + 8), (uint64_t)v7)) {
      sub_1CC3856EC(a1, a2);
    }
    if (v7[0] != v8) {
      free(v7[0]);
    }
  }
}

void sub_1CC38781C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x400000000;
  uint64_t v6 = (char *)operator new(8uLL);
  __p = v6;
  *(void *)uint64_t v6 = 0;
  int v41 = v6 + 8;
  uint64_t v42 = v6 + 8;
  uint64_t v43 = 0;
  int32x2_t v44 = 0;
  unsigned int v45 = 0;
  uint64_t v46 = a3;
  sub_1CC387D6C((char **)&__p);
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v8 = v7 + 320;
  uint64_t v9 = *(void *)(v7 + 328);
  if (v9 == v7 + 320) {
    goto LABEL_9;
  }
  int v10 = 1;
  uint64_t v11 = 1;
  do
  {
    if (!sub_1CC387BD4(v9, a3))
    {
      unint64_t v12 = *(unsigned int *)(a1 + 8);
      if (v12 >= *(unsigned int *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a1 + 8 * v12) = v9;
      ++*(_DWORD *)(a1 + 8);
      uint64_t v11 = sub_1CC387F14((uint64_t)&__p, v9, v11, 1);
    }
    uint64_t v9 = *(void *)(v9 + 8);
    ++v10;
  }
  while (v9 != v8);
  if (v10 == v11) {
    goto LABEL_9;
  }
  LOBYTE(v38[0]) = 0;
  char v39 = 0;
  v37[0] = (uint64_t)v38;
  v37[1] = a2;
  v37[2] = (uint64_t)&__p;
  uint64_t v18 = *(void *)(a2 + 80);
  uint64_t v19 = v18 + 320;
  uint64_t v20 = *(void *)(v18 + 328);
  if (v20 == v18 + 320) {
    goto LABEL_48;
  }
  do
  {
    if (v45)
    {
      unsigned int v21 = ((v20 >> 4) ^ (v20 >> 9)) & (v45 - 1);
      uint64_t v22 = *(void *)(v43 + 72 * v21);
      if (v20 == v22) {
        goto LABEL_23;
      }
      int v23 = 1;
      while (v22 != -4096)
      {
        unsigned int v24 = v21 + v23++;
        unsigned int v21 = v24 & (v45 - 1);
        uint64_t v22 = *(void *)(v43 + 72 * v21);
        if (v20 == v22) {
          goto LABEL_23;
        }
      }
    }
    if (!v39) {
      sub_1CC38856C(v37);
    }
    LODWORD(v25) = sub_1CC388910((uint64_t)&__p, v20, v11, v11, (uint64_t)v38);
    uint64_t v26 = *((void *)__p + v25);
    unint64_t v27 = *(unsigned int *)(a1 + 8);
    if (v27 >= *(unsigned int *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v25 = v25;
    *(void *)(*(void *)a1 + 8 * v27) = v26;
    ++*(_DWORD *)(a1 + 8);
    for (; v11 < v25; --v25)
    {
      if (v45)
      {
        uint64_t v28 = *((void *)__p + v25);
        unsigned int v29 = ((v28 >> 4) ^ (v28 >> 9)) & (v45 - 1);
        uint64_t v30 = (void *)(v43 + 72 * v29);
        uint64_t v31 = *v30;
        if (*v30 == v28)
        {
LABEL_35:
          BOOL v32 = (void *)v30[5];
          if (v32 != v30 + 7)
          {
            uint64_t v35 = v30;
            uint64_t v36 = v26;
            free(v32);
            uint64_t v30 = v35;
            uint64_t v26 = v36;
          }
          *uint64_t v30 = -8192;
          int32x2_t v44 = vadd_s32(v44, (int32x2_t)0x1FFFFFFFFLL);
        }
        else
        {
          int v33 = 1;
          while (v31 != -4096)
          {
            unsigned int v34 = v29 + v33++;
            unsigned int v29 = v34 & (v45 - 1);
            uint64_t v30 = (void *)(v43 + 72 * v29);
            uint64_t v31 = *v30;
            if (*v30 == v28) {
              goto LABEL_35;
            }
          }
        }
      }
      v41 -= 8;
    }
    uint64_t v11 = sub_1CC387F14((uint64_t)&__p, v26, v11, 1);
LABEL_23:
    uint64_t v20 = *(void *)(v20 + 8);
  }
  while (v20 != v19);
  if (v39) {
    MEMORY[0x1D25D9CD0](v38[0], 8);
  }
LABEL_48:
  sub_1CC388FB0(a3, a1);
LABEL_9:
  uint64_t v13 = v43;
  if (v45)
  {
    uint64_t v14 = 72 * v45;
    long long v15 = (void *)(v43 + 56);
    do
    {
      uint64_t v16 = *(v15 - 7);
      if (v16 != -4096 && v16 != -8192)
      {
        int v17 = (void *)*(v15 - 2);
        if (v15 != v17) {
          free(v17);
        }
      }
      v15 += 9;
      v14 -= 72;
    }
    while (v14);
    uint64_t v13 = v43;
  }
  MEMORY[0x1D25D9CD0](v13, 8);
  if (__p)
  {
    int v41 = (char *)__p;
    operator delete(__p);
  }
}

BOOL sub_1CC387BD4(uint64_t a1, uint64_t a2)
{
  v19[8] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    sub_1CD544A74((uint64_t)&v17, *(void *)(a2 + 8), a1);
    LODWORD(v12) = v18;
    uint64_t v4 = v17;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 88);
    uint64_t v3 = *(void *)(a1 + 96);
    uint64_t v4 = v19;
    int v17 = v19;
    uint64_t v18 = 0x800000000;
    unint64_t v5 = v3 - v2;
    if ((unint64_t)(v3 - v2) >= 0x41) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v3 != v2)
    {
      uint64_t v6 = v19;
      do
      {
        uint64_t v7 = *(void *)(v3 - 8);
        v3 -= 8;
        *v6++ = v7;
      }
      while (v3 != v2);
      uint64_t v4 = v17;
    }
    uint64_t v8 = v4;
    uint64_t v9 = (v5 >> 3);
    if (v9)
    {
      uint64_t v10 = 8 * v9;
      uint64_t v8 = v4;
      while (*v8)
      {
        ++v8;
        v10 -= 8;
        if (!v10)
        {
          uint64_t v8 = &v4[v9];
          break;
        }
      }
    }
    uint64_t v11 = v8 - v4;
    if (v11 != v9)
    {
      uint64_t v14 = v8 + 1;
      if (v8 + 1 != &v4[v9])
      {
        uint64_t v15 = 8 * v9 - 8 * v11 - 8;
        do
        {
          if (*v14) {
            *v8++ = *v14;
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
        uint64_t v4 = v17;
      }
    }
    unint64_t v12 = (unint64_t)((char *)v8 - (char *)v4) >> 3;
    LODWORD(v18) = v12;
  }
  if (v4 != v19)
  {
    int v16 = v12;
    free(v4);
    LODWORD(v12) = v16;
  }
  return v12 != 0;
}

void sub_1CC387D6C(char **a1)
{
  uint64_t v4 = (uint64_t *)a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  uint64_t v3 = v4;
  uint64_t v26 = 0;
  int v5 = *(_DWORD *)(v2 + 16);
  if (v5)
  {
    uint64_t v6 = *v3;
    if (!*v3)
    {
      uint64_t v7 = v3;
      goto LABEL_4;
    }
    int v19 = 0;
    uint64_t v20 = 0;
    unsigned int v21 = v5 - 1;
    int v22 = 1;
    uint64_t v7 = v3;
    while (v6 != -4096)
    {
      if (v20) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = v6 == -8192;
      }
      if (v23) {
        uint64_t v20 = v7;
      }
      int v24 = v19 + v22++;
      int v19 = v24 & v21;
      uint64_t v7 = &v3[9 * (v24 & v21)];
      uint64_t v6 = *v7;
      if (!*v7) {
        goto LABEL_4;
      }
    }
    if (v20) {
      uint64_t v25 = v20;
    }
    else {
      uint64_t v25 = v7;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t v7 = sub_1CC387084(v2, &v26, v25);
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[8] = 0;
  v7[5] = (uint64_t)(v7 + 7);
  *((_DWORD *)v7 + 13) = 2;
LABEL_4:
  *((_DWORD *)v7 + 4) = 1;
  *((_DWORD *)v7 + 2) = 1;
  v7[3] = 0;
  uint64_t v9 = a1[1];
  unint64_t v8 = (unint64_t)a1[2];
  if ((unint64_t)v9 < v8)
  {
    *(void *)uint64_t v9 = 0;
    int v17 = v9 + 8;
  }
  else
  {
    uint64_t v10 = *a1;
    uint64_t v11 = (v9 - *a1) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      abort();
    }
    uint64_t v13 = v8 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    int v16 = &v15[8 * v11];
    *(void *)int v16 = 0;
    int v17 = v16 + 8;
    if (v9 != v10)
    {
      do
      {
        uint64_t v18 = *((void *)v9 - 1);
        v9 -= 8;
        *((void *)v16 - 1) = v18;
        v16 -= 8;
      }
      while (v9 != v10);
      uint64_t v9 = *a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = &v15[8 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  a1[1] = v17;
}

uint64_t sub_1CC387F14(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned char v91[64] = *MEMORY[0x1E4F143B8];
  uint64_t v85 = a2;
  uint64_t v89 = v91;
  v91[0] = a2;
  uint64_t v90 = 0x4000000001;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v82 = a1 + 24;
  int v7 = *(_DWORD *)(a1 + 40);
  if (!v7) {
    goto LABEL_15;
  }
  int v10 = v7 - 1;
  unsigned int v11 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  unint64_t v12 = (uint64_t *)(v6 + 72 * v11);
  uint64_t v13 = *v12;
  if (*v12 == a2)
  {
LABEL_14:
    *(_DWORD *)(v6 + 72 * v11 + 12) = a4;
LABEL_15:
    unsigned int v22 = 1;
    goto LABEL_16;
  }
  int v14 = 1;
  uint64_t v15 = *v12;
  unsigned int v16 = v10 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v15 == -4096) {
      goto LABEL_15;
    }
    unsigned int v17 = v16 + v14++;
    unsigned int v16 = v17 & v10;
    uint64_t v15 = *(void *)(v6 + 72 * v16);
  }
  while (v15 != a2);
  uint64_t v18 = 0;
  int v19 = 1;
  while (v13 != -4096)
  {
    if (v18) {
      BOOL v20 = 0;
    }
    else {
      BOOL v20 = v13 == -8192;
    }
    if (v20) {
      uint64_t v18 = v12;
    }
    unsigned int v21 = v11 + v19++;
    unsigned int v11 = v21 & v10;
    unint64_t v12 = (uint64_t *)(v6 + 72 * v11);
    uint64_t v13 = *v12;
    if (*v12 == a2) {
      goto LABEL_14;
    }
  }
  if (v18) {
    unsigned int v79 = v18;
  }
  else {
    unsigned int v79 = v12;
  }
  unsigned int v80 = sub_1CC387084(v82, &v85, v79);
  *unsigned int v80 = a2;
  *(_OWORD *)(v80 + 5) = 0u;
  *(_OWORD *)(v80 + 3) = 0u;
  *(_OWORD *)(v80 + 7) = 0u;
  *(_OWORD *)(v80 + 1) = 0u;
  v80[5] = (uint64_t)(v80 + 7);
  *((_DWORD *)v80 + 13) = 2;
  unsigned int v22 = v90;
  *((_DWORD *)v80 + 3) = a4;
  if (v22)
  {
    do
    {
LABEL_16:
      uint64_t v23 = *((void *)v89 + v22 - 1);
      LODWORD(v90) = v22 - 1;
      uint64_t v84 = v23;
      int v24 = *(_DWORD *)(a1 + 40);
      if (v24)
      {
        uint64_t v25 = *(void *)(a1 + 24);
        int v26 = v24 - 1;
        unsigned int v27 = v26 & ((v23 >> 4) ^ (v23 >> 9));
        uint64_t v28 = (uint64_t *)(v25 + 72 * v27);
        uint64_t v29 = *v28;
        if (v23 == *v28) {
          goto LABEL_31;
        }
        uint64_t v30 = 0;
        int v31 = 1;
        while (v29 != -4096)
        {
          if (v30) {
            BOOL v32 = 0;
          }
          else {
            BOOL v32 = v29 == -8192;
          }
          if (v32) {
            uint64_t v30 = v28;
          }
          unsigned int v33 = v27 + v31++;
          unsigned int v27 = v33 & v26;
          uint64_t v28 = (uint64_t *)(v25 + 72 * v27);
          uint64_t v29 = *v28;
          if (v23 == *v28) {
            goto LABEL_31;
          }
        }
        if (v30) {
          unsigned int v34 = v30;
        }
        else {
          unsigned int v34 = v28;
        }
      }
      else
      {
        unsigned int v34 = 0;
      }
      uint64_t v28 = sub_1CC387084(v82, &v84, v34);
      *uint64_t v28 = v23;
      *(_OWORD *)(v28 + 5) = 0u;
      *(_OWORD *)(v28 + 1) = 0u;
      *(_OWORD *)(v28 + 3) = 0u;
      *(_OWORD *)(v28 + 7) = 0u;
      void v28[5] = (uint64_t)(v28 + 7);
      *((_DWORD *)v28 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v28 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v28 + 4) = a3;
        *((_DWORD *)v28 + 2) = a3;
        v28[3] = v23;
        uint64_t v36 = *(uint64_t **)(a1 + 8);
        unint64_t v35 = *(void *)(a1 + 16);
        if ((unint64_t)v36 >= v35)
        {
          uint64_t v38 = *(uint64_t **)a1;
          uint64_t v39 = ((uint64_t)v36 - *(void *)a1) >> 3;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 61) {
            abort();
          }
          uint64_t v41 = v35 - (void)v38;
          if (v41 >> 2 > v40) {
            unint64_t v40 = v41 >> 2;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            if (v42 >> 61) {
              sub_1CB833614();
            }
            uint64_t v43 = (char *)operator new(8 * v42);
          }
          else
          {
            uint64_t v43 = 0;
          }
          int32x2_t v44 = (uint64_t *)&v43[8 * v39];
          uint64_t *v44 = v23;
          int v37 = v44 + 1;
          if (v36 != v38)
          {
            do
            {
              uint64_t v45 = *--v36;
              *--int32x2_t v44 = v45;
            }
            while (v36 != v38);
            uint64_t v36 = *(uint64_t **)a1;
          }
          *(void *)a1 = v44;
          *(void *)(a1 + 8) = v37;
          *(void *)(a1 + 16) = &v43[8 * v42];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          *uint64_t v36 = v23;
          int v37 = v36 + 1;
        }
        *(void *)(a1 + 8) = v37;
        uint64_t v46 = *(void *)(a1 + 48);
        if (v46)
        {
          sub_1CD544768((uint64_t)&v86, *(void *)(v46 + 8), v84);
          uint64_t v58 = v87;
          uint64_t v50 = v86;
        }
        else
        {
          uint64_t v47 = *(char **)(v84 + 64);
          uint64_t v48 = *(char **)(v84 + 72);
          BOOL v86 = (uint64_t *)v88;
          uint64_t v87 = 0x800000000;
          unint64_t v49 = v48 - v47;
          if ((unint64_t)(v48 - v47) >= 0x41) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v50 = (uint64_t *)v88;
          if (v47 != v48)
          {
            uint64_t v51 = v88;
            do
            {
              uint64_t v52 = *(void *)v47;
              v47 += 8;
              *v51++ = v52;
            }
            while (v47 != v48);
            uint64_t v50 = v86;
          }
          int v53 = v50;
          uint64_t v54 = (v49 >> 3);
          if (v54)
          {
            uint64_t v55 = 8 * v54;
            int v53 = v50;
            while (*v53)
            {
              ++v53;
              v55 -= 8;
              if (!v55)
              {
                int v53 = &v50[v54];
                break;
              }
            }
          }
          uint64_t v56 = v53 - v50;
          if (v56 != v54)
          {
            int v77 = v53 + 1;
            if (v53 + 1 != &v50[v54])
            {
              uint64_t v78 = 8 * v54 - 8 * v56 - 8;
              do
              {
                if (*v77) {
                  *v53++ = *v77;
                }
                ++v77;
                v78 -= 8;
              }
              while (v78);
              uint64_t v50 = v86;
            }
          }
          unint64_t v57 = (unint64_t)((char *)v53 - (char *)v50) >> 3;
          uint64_t v58 = v57;
          LODWORD(v87) = v57;
        }
        unsigned int v59 = &v50[v58];
        if (v58)
        {
          while (1)
          {
            uint64_t v83 = 0;
            uint64_t v60 = *v50;
            uint64_t v83 = v60;
            uint64_t v61 = *(void *)(a1 + 24);
            unsigned int v62 = *(_DWORD *)(a1 + 40);
            unsigned int v63 = sub_1CC129FE4(v61, v62, v60);
            if ((uint64_t *)(v61 + 72 * v62) == v63 || !*((_DWORD *)v63 + 2)) {
              break;
            }
            uint64_t v64 = v84;
            if (v60 != v84)
            {
              int v65 = v63 + 5;
              unsigned int v67 = v63 + 6;
              unint64_t v66 = *((unsigned int *)v63 + 12);
              unint64_t v68 = *((unsigned int *)v63 + 13);
LABEL_84:
              if (v66 >= v68) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*v65 + 8 * v66) = v64;
              ++*v67;
            }
            if (++v50 == v59)
            {
              uint64_t v50 = v86;
              goto LABEL_91;
            }
          }
          if (v62)
          {
            unsigned int v69 = ((v60 >> 4) ^ (v60 >> 9)) & (v62 - 1);
            uint64_t v70 = (uint64_t *)(v61 + 72 * v69);
            uint64_t v71 = *v70;
            if (v60 != *v70)
            {
              unsigned int v72 = 0;
              int v73 = 1;
              while (v71 != -4096)
              {
                if (v72) {
                  BOOL v74 = 0;
                }
                else {
                  BOOL v74 = v71 == -8192;
                }
                if (v74) {
                  unsigned int v72 = v70;
                }
                unsigned int v75 = v69 + v73++;
                unsigned int v69 = v75 & (v62 - 1);
                uint64_t v70 = (uint64_t *)(v61 + 72 * v69);
                uint64_t v71 = *v70;
                if (v60 == *v70) {
                  goto LABEL_82;
                }
              }
              if (v72) {
                int v76 = v72;
              }
              else {
                int v76 = v70;
              }
LABEL_81:
              uint64_t v70 = sub_1CC387084(v82, &v83, v76);
              *uint64_t v70 = v60;
              *(_OWORD *)(v70 + 5) = 0u;
              *(_OWORD *)(v70 + 1) = 0u;
              *(_OWORD *)(v70 + 3) = 0u;
              *(_OWORD *)(v70 + 7) = 0u;
              v70[5] = (uint64_t)(v70 + 7);
              *((_DWORD *)v70 + 13) = 2;
            }
LABEL_82:
            if (v90 >= (unint64_t)HIDWORD(v90)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v89 + v90) = v60;
            unsigned int v67 = v70 + 6;
            unint64_t v66 = *((unsigned int *)v70 + 12);
            LODWORD(v90) = v90 + 1;
            *((_DWORD *)v70 + 3) = a3;
            int v65 = v70 + 5;
            uint64_t v64 = v84;
            unint64_t v68 = *((unsigned int *)v70 + 13);
            goto LABEL_84;
          }
          int v76 = 0;
          goto LABEL_81;
        }
LABEL_91:
        if (v50 != (uint64_t *)v88) {
          free(v50);
        }
      }
      unsigned int v22 = v90;
    }
    while (v90);
  }
  if (v89 != v91) {
    free(v89);
  }
  return a3;
}

void sub_1CC38856C(uint64_t *a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  v49[0] = 0;
  sub_1CD544C70(*a1, (uint64_t)&v47);
  MEMORY[0x1D25D9CD0](v47, 8);
  uint64_t v2 = *(void *)(a1[1] + 80);
  uint64_t v3 = v2 + 320;
  uint64_t v4 = *(void **)(v2 + 328);
  if (v4 != (void *)(v2 + 320))
  {
    while (1)
    {
      uint64_t v5 = a1[2];
      int v6 = *(_DWORD *)(v5 + 40);
      if (!v6) {
        goto LABEL_8;
      }
      uint64_t v7 = *(void *)(v5 + 24);
      int v8 = v6 - 1;
      unsigned int v9 = v8 & ((v4 >> 4) ^ (v4 >> 9));
      int v10 = *(void **)(v7 + 72 * v9);
      if (v4 != v10) {
        break;
      }
LABEL_41:
      uint64_t v4 = (void *)v4[1];
      if (v4 == (void *)v3)
      {
        uint64_t v2 = *(void *)(a1[1] + 80);
        uint64_t v3 = *(void *)(v2 + 328);
        goto LABEL_44;
      }
    }
    int v11 = 1;
    while (v10 != (void *)-4096)
    {
      unsigned int v12 = v9 + v11++;
      unsigned int v9 = v12 & v8;
      int v10 = *(void **)(v7 + 72 * v9);
      if (v4 == v10) {
        goto LABEL_41;
      }
    }
LABEL_8:
    uint64_t v13 = *(void *)(v5 + 48);
    if (v13)
    {
      sub_1CD544A74((uint64_t)&v47, *(void *)(v13 + 8), (uint64_t)v4);
      unsigned int v17 = v47;
      uint64_t v25 = v48;
    }
    else
    {
      uint64_t v14 = v4[11];
      uint64_t v15 = v4[12];
      uint64_t v47 = (uint64_t *)v49;
      uint64_t v48 = 0x800000000;
      unint64_t v16 = v15 - v14;
      if ((unint64_t)(v15 - v14) >= 0x41) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v17 = (uint64_t *)v49;
      if (v15 != v14)
      {
        uint64_t v18 = v49;
        do
        {
          uint64_t v19 = *(void *)(v15 - 8);
          v15 -= 8;
          *v18++ = v19;
        }
        while (v15 != v14);
        unsigned int v17 = v47;
      }
      BOOL v20 = v17;
      uint64_t v21 = (v16 >> 3);
      if ((v16 >> 3))
      {
        uint64_t v22 = 8 * v21;
        BOOL v20 = v17;
        while (*v20)
        {
          ++v20;
          v22 -= 8;
          if (!v22)
          {
            BOOL v20 = &v17[v21];
            break;
          }
        }
      }
      uint64_t v23 = v20 - v17;
      if (v23 != v21)
      {
        int32x2_t v44 = v20 + 1;
        if (v20 + 1 != &v17[v21])
        {
          uint64_t v45 = 8 * v21 - 8 * v23 - 8;
          do
          {
            if (*v44) {
              *v20++ = *v44;
            }
            ++v44;
            v45 -= 8;
          }
          while (v45);
          unsigned int v17 = v47;
        }
      }
      unint64_t v24 = (unint64_t)((char *)v20 - (char *)v17) >> 3;
      uint64_t v25 = v24;
      LODWORD(v48) = v24;
    }
    int v26 = &v17[v25];
    if (v25)
    {
      while (1)
      {
        uint64_t v46 = 0;
        uint64_t v27 = *v17;
        uint64_t v46 = *v17;
        uint64_t v28 = (void *)*a1;
        int v29 = *(_DWORD *)(*a1 + 16);
        if (!v29) {
          break;
        }
        int v30 = v29 - 1;
        unsigned int v31 = v30 & ((v27 >> 4) ^ (v27 >> 9));
        BOOL v32 = (void *)(*v28 + 16 * v31);
        uint64_t v33 = *v32;
        if (v27 != *v32)
        {
          unsigned int v34 = 0;
          int v35 = 1;
          while (v33 != -4096)
          {
            if (v34) {
              BOOL v36 = 0;
            }
            else {
              BOOL v36 = v33 == -8192;
            }
            if (v36) {
              unsigned int v34 = v32;
            }
            unsigned int v37 = v31 + v35++;
            unsigned int v31 = v37 & v30;
            BOOL v32 = (void *)(*v28 + 16 * v31);
            uint64_t v33 = *v32;
            if (v27 == *v32) {
              goto LABEL_37;
            }
          }
          if (v34) {
            uint64_t v38 = v34;
          }
          else {
            uint64_t v38 = v32;
          }
          goto LABEL_36;
        }
LABEL_37:
        if (++v17 == v26)
        {
          unsigned int v17 = v47;
          goto LABEL_39;
        }
      }
      uint64_t v38 = 0;
LABEL_36:
      uint64_t v39 = sub_1CBAEE2F0((uint64_t)v28, (uint64_t)&v46, &v46, v38);
      *uint64_t v39 = v46;
      *((_DWORD *)v39 + 2) = 0;
      goto LABEL_37;
    }
LABEL_39:
    if (v17 != (uint64_t *)v49) {
      free(v17);
    }
    goto LABEL_41;
  }
LABEL_44:
  uint64_t v40 = v2 + 320;
  if (v3 != v2 + 320)
  {
    uint64_t v41 = *a1;
    int v42 = 1;
    do
    {
      uint64_t v46 = v3;
      uint64_t v47 = 0;
      if (sub_1CBA0E618(v41, &v46, &v47)) {
        uint64_t v43 = (uint64_t)v47;
      }
      else {
        uint64_t v43 = *(void *)v41 + 16 * *(unsigned int *)(v41 + 16);
      }
      uint64_t v41 = *a1;
      if (v43 != *(void *)*a1 + 16 * *(unsigned int *)(*a1 + 16)) {
        *(_DWORD *)(v43 + 8) = v42;
      }
      uint64_t v3 = *(void *)(v3 + 8);
      ++v42;
    }
    while (v3 != v40);
  }
}

uint64_t sub_1CC388910(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  v93[64] = *MEMORY[0x1E4F143B8];
  uint64_t v86 = a2;
  BOOL v91 = v93;
  v93[0] = a2;
  uint64_t v92 = 0x4000000001;
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v84 = a1 + 24;
  int v8 = *(_DWORD *)(a1 + 40);
  if (!v8) {
    goto LABEL_15;
  }
  int v11 = v8 - 1;
  unsigned int v12 = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v13 = (uint64_t *)(v7 + 72 * v12);
  uint64_t v14 = *v13;
  if (*v13 == a2)
  {
LABEL_14:
    *(_DWORD *)(v7 + 72 * v12 + 12) = a4;
LABEL_15:
    unsigned int v23 = 1;
    goto LABEL_16;
  }
  int v15 = 1;
  uint64_t v16 = *v13;
  unsigned int v17 = v11 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v16 == -4096) {
      goto LABEL_15;
    }
    unsigned int v18 = v17 + v15++;
    unsigned int v17 = v18 & v11;
    uint64_t v16 = *(void *)(v7 + 72 * v17);
  }
  while (v16 != a2);
  uint64_t v19 = 0;
  int v20 = 1;
  while (v14 != -4096)
  {
    if (v19) {
      BOOL v21 = 0;
    }
    else {
      BOOL v21 = v14 == -8192;
    }
    if (v21) {
      uint64_t v19 = v13;
    }
    unsigned int v22 = v12 + v20++;
    unsigned int v12 = v22 & v11;
    uint64_t v13 = (uint64_t *)(v7 + 72 * v12);
    uint64_t v14 = *v13;
    if (*v13 == a2) {
      goto LABEL_14;
    }
  }
  if (v19) {
    unsigned int v80 = v19;
  }
  else {
    unsigned int v80 = v13;
  }
  uint64_t v81 = sub_1CC387084(v84, &v86, v80);
  *uint64_t v81 = a2;
  *(_OWORD *)(v81 + 5) = 0u;
  *(_OWORD *)(v81 + 3) = 0u;
  *(_OWORD *)(v81 + 7) = 0u;
  *(_OWORD *)(v81 + 1) = 0u;
  v81[5] = (uint64_t)(v81 + 7);
  *((_DWORD *)v81 + 13) = 2;
  unsigned int v23 = v92;
  *((_DWORD *)v81 + 3) = a4;
  if (v23)
  {
    do
    {
LABEL_16:
      uint64_t v24 = *((void *)v91 + v23 - 1);
      LODWORD(v92) = v23 - 1;
      uint64_t v85 = v24;
      int v25 = *(_DWORD *)(a1 + 40);
      if (v25)
      {
        uint64_t v26 = *(void *)(a1 + 24);
        int v27 = v25 - 1;
        unsigned int v28 = v27 & ((v24 >> 4) ^ (v24 >> 9));
        int v29 = (uint64_t *)(v26 + 72 * v28);
        uint64_t v30 = *v29;
        if (v24 == *v29) {
          goto LABEL_31;
        }
        unsigned int v31 = 0;
        int v32 = 1;
        while (v30 != -4096)
        {
          if (v31) {
            BOOL v33 = 0;
          }
          else {
            BOOL v33 = v30 == -8192;
          }
          if (v33) {
            unsigned int v31 = v29;
          }
          unsigned int v34 = v28 + v32++;
          unsigned int v28 = v34 & v27;
          int v29 = (uint64_t *)(v26 + 72 * v28);
          uint64_t v30 = *v29;
          if (v24 == *v29) {
            goto LABEL_31;
          }
        }
        if (v31) {
          int v35 = v31;
        }
        else {
          int v35 = v29;
        }
      }
      else
      {
        int v35 = 0;
      }
      int v29 = sub_1CC387084(v84, &v85, v35);
      *int v29 = v24;
      *(_OWORD *)(v29 + 5) = 0u;
      *(_OWORD *)(v29 + 1) = 0u;
      *(_OWORD *)(v29 + 3) = 0u;
      *(_OWORD *)(v29 + 7) = 0u;
      v29[5] = (uint64_t)(v29 + 7);
      *((_DWORD *)v29 + 13) = 2;
LABEL_31:
      if (!*((_DWORD *)v29 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v29 + 4) = a3;
        *((_DWORD *)v29 + 2) = a3;
        v29[3] = v24;
        unsigned int v37 = *(uint64_t **)(a1 + 8);
        unint64_t v36 = *(void *)(a1 + 16);
        if ((unint64_t)v37 >= v36)
        {
          uint64_t v39 = *(uint64_t **)a1;
          uint64_t v40 = ((uint64_t)v37 - *(void *)a1) >> 3;
          unint64_t v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61) {
            abort();
          }
          uint64_t v42 = v36 - (void)v39;
          if (v42 >> 2 > v41) {
            unint64_t v41 = v42 >> 2;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v41;
          }
          if (v43)
          {
            if (v43 >> 61) {
              sub_1CB833614();
            }
            int32x2_t v44 = (char *)operator new(8 * v43);
          }
          else
          {
            int32x2_t v44 = 0;
          }
          uint64_t v45 = (uint64_t *)&v44[8 * v40];
          uint64_t *v45 = v24;
          uint64_t v38 = v45 + 1;
          if (v37 != v39)
          {
            do
            {
              uint64_t v46 = *--v37;
              *--uint64_t v45 = v46;
            }
            while (v37 != v39);
            unsigned int v37 = *(uint64_t **)a1;
          }
          *(void *)a1 = v45;
          *(void *)(a1 + 8) = v38;
          *(void *)(a1 + 16) = &v44[8 * v43];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *unsigned int v37 = v24;
          uint64_t v38 = v37 + 1;
        }
        *(void *)(a1 + 8) = v38;
        uint64_t v47 = *(void *)(a1 + 48);
        if (v47)
        {
          sub_1CD544A74((uint64_t)&v88, *(void *)(v47 + 8), v85);
          unint64_t v59 = v89;
          uint64_t v51 = v88;
        }
        else
        {
          uint64_t v48 = *(void *)(v85 + 88);
          uint64_t v49 = *(void *)(v85 + 96);
          unsigned int v88 = (uint64_t *)v90;
          uint64_t v89 = 0x800000000;
          unint64_t v50 = v49 - v48;
          if ((unint64_t)(v49 - v48) >= 0x41) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v51 = (uint64_t *)v90;
          if (v49 != v48)
          {
            uint64_t v52 = v90;
            do
            {
              uint64_t v53 = *(void *)(v49 - 8);
              v49 -= 8;
              *v52++ = v53;
            }
            while (v49 != v48);
            uint64_t v51 = v88;
          }
          uint64_t v54 = v51;
          uint64_t v55 = (v50 >> 3);
          if (v55)
          {
            uint64_t v56 = 8 * v55;
            uint64_t v54 = v51;
            while (*v54)
            {
              ++v54;
              v56 -= 8;
              if (!v56)
              {
                uint64_t v54 = &v51[v55];
                break;
              }
            }
          }
          uint64_t v57 = v54 - v51;
          if (v57 != v55)
          {
            uint64_t v78 = v54 + 1;
            if (v54 + 1 != &v51[v55])
            {
              uint64_t v79 = 8 * v55 - 8 * v57 - 8;
              do
              {
                if (*v78) {
                  *v54++ = *v78;
                }
                ++v78;
                v79 -= 8;
              }
              while (v79);
              uint64_t v51 = v88;
            }
          }
          unint64_t v58 = (unint64_t)((char *)v54 - (char *)v51) >> 3;
          unint64_t v59 = v58;
          LODWORD(v89) = v58;
        }
        if (a5 && v59 >= 2)
        {
          uint64_t v87 = a5;
          sub_1CD544CDC(v51, &v51[v59], &v87, 126 - 2 * __clz(v59), 1);
          unint64_t v59 = v89;
          uint64_t v51 = v88;
        }
        uint64_t v60 = &v51[v59];
        if (v59)
        {
          while (1)
          {
            uint64_t v87 = 0;
            uint64_t v61 = *v51;
            uint64_t v87 = v61;
            uint64_t v62 = *(void *)(a1 + 24);
            unsigned int v63 = *(_DWORD *)(a1 + 40);
            uint64_t v64 = sub_1CC129FE4(v62, v63, v61);
            if ((uint64_t *)(v62 + 72 * v63) == v64 || !*((_DWORD *)v64 + 2)) {
              break;
            }
            uint64_t v65 = v85;
            if (v61 != v85)
            {
              unint64_t v66 = v64 + 5;
              unint64_t v68 = v64 + 6;
              unint64_t v67 = *((unsigned int *)v64 + 12);
              unint64_t v69 = *((unsigned int *)v64 + 13);
LABEL_87:
              if (v67 >= v69) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*v66 + 8 * v67) = v65;
              ++*v68;
            }
            if (++v51 == v60)
            {
              uint64_t v51 = v88;
              goto LABEL_94;
            }
          }
          if (v63)
          {
            unsigned int v70 = ((v61 >> 4) ^ (v61 >> 9)) & (v63 - 1);
            uint64_t v71 = (uint64_t *)(v62 + 72 * v70);
            uint64_t v72 = *v71;
            if (v61 != *v71)
            {
              int v73 = 0;
              int v74 = 1;
              while (v72 != -4096)
              {
                if (v73) {
                  BOOL v75 = 0;
                }
                else {
                  BOOL v75 = v72 == -8192;
                }
                if (v75) {
                  int v73 = v71;
                }
                unsigned int v76 = v70 + v74++;
                unsigned int v70 = v76 & (v63 - 1);
                uint64_t v71 = (uint64_t *)(v62 + 72 * v70);
                uint64_t v72 = *v71;
                if (v61 == *v71) {
                  goto LABEL_85;
                }
              }
              if (v73) {
                int v77 = v73;
              }
              else {
                int v77 = v71;
              }
LABEL_84:
              uint64_t v71 = sub_1CC387084(v84, &v87, v77);
              uint64_t *v71 = v61;
              *(_OWORD *)(v71 + 5) = 0u;
              *(_OWORD *)(v71 + 1) = 0u;
              *(_OWORD *)(v71 + 3) = 0u;
              *(_OWORD *)(v71 + 7) = 0u;
              v71[5] = (uint64_t)(v71 + 7);
              *((_DWORD *)v71 + 13) = 2;
            }
LABEL_85:
            if (v92 >= (unint64_t)HIDWORD(v92)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v91 + v92) = v61;
            unint64_t v68 = v71 + 6;
            unint64_t v67 = *((unsigned int *)v71 + 12);
            LODWORD(v92) = v92 + 1;
            *((_DWORD *)v71 + 3) = a3;
            unint64_t v66 = v71 + 5;
            uint64_t v65 = v85;
            unint64_t v69 = *((unsigned int *)v71 + 13);
            goto LABEL_87;
          }
          int v77 = 0;
          goto LABEL_84;
        }
LABEL_94:
        if (v51 != (uint64_t *)v90) {
          free(v51);
        }
      }
      unsigned int v23 = v92;
    }
    while (v92);
  }
  if (v91 != v93) {
    free(v91);
  }
  return a3;
}

uint64_t sub_1CC388FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = operator new(8uLL);
  v15[0] = v4;
  *uint64_t v4 = 0;
  v15[1] = v4 + 1;
  v15[2] = v4 + 1;
  v16[0] = 0;
  v16[1] = 0;
  int v17 = 0;
  uint64_t v18 = a1;
  if (*(_DWORD *)(a2 + 8))
  {
    unsigned int v5 = 0;
    do
    {
      int v6 = *(void **)a2;
      if (sub_1CC387BD4(*(void *)(*(void *)a2 + 8 * v5), a1))
      {
        uint64_t __src = 0;
        sub_1CBFAFDE4(v15, (char *)&__src, (char *)&v20, 1uLL);
        sub_1CC3897DC(v16);
        unsigned int v7 = sub_1CC388910((uint64_t)v15, v6[v5], 0, 0, 0);
        uint64_t v8 = *(unsigned int *)(a2 + 8);
        if (v7 >= 2)
        {
          uint64_t v10 = *(void *)a2 + 8 * v8;
          unsigned int v11 = 2;
          while (1)
          {
            if (v8)
            {
              uint64_t v12 = 8 * v8;
              uint64_t v13 = *(void **)a2;
              while (*v13 != *(void *)(v15[0] + 8 * v11))
              {
                ++v13;
                v12 -= 8;
                if (!v12)
                {
                  uint64_t v13 = (void *)(*(void *)a2 + 8 * v8);
                  break;
                }
              }
            }
            else
            {
              uint64_t v13 = *(void **)a2;
            }
            if (v8 != ((uint64_t)v13 - *(void *)a2) >> 3) {
              break;
            }
            if (++v11 > v7) {
              goto LABEL_5;
            }
          }
          uint64_t v14 = v6[v5];
          v6[v5] = *(void *)(v10 - 8);
          *(void *)(v10 - 8) = v14;
          LODWORD(v8) = v8 - 1;
          *(_DWORD *)(a2 + 8) = v8;
          --v5;
        }
      }
      else
      {
        LODWORD(v8) = *(_DWORD *)(a2 + 8);
      }
LABEL_5:
      ++v5;
    }
    while (v8 > v5);
  }
  return sub_1CC387630((uint64_t)v15);
}

BOOL sub_1CC389174(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8 = sub_1CD518604(a4, *a2, *a1);
  BOOL result = sub_1CD518604(a4, *a3, *a2);
  if (v8)
  {
    uint64_t v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      BOOL result = sub_1CD518604(a4, *a3, v10);
      if (result)
      {
        uint64_t v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    uint64_t v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    BOOL result = sub_1CD518604(a4, *a2, *a1);
    if (result)
    {
      uint64_t v13 = *a1;
      *a1 = *a2;
      *a2 = v13;
    }
  }
  return result;
}

BOOL sub_1CC38925C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1CD518604(a3, *(a2 - 1), *a1))
      {
        uint64_t v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1CC389174(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1CC389428(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1CC3894E0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      BOOL v8 = a1 + 2;
      sub_1CC389174(a1, a1 + 1, a1 + 2, a3);
      unsigned int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1CD518604(a3, *v9, *v8))
    {
      uint64_t v12 = *v9;
      uint64_t v13 = v10;
      while (1)
      {
        uint64_t v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        v13 -= 8;
        if (!sub_1CD518604(a3, v12, *((void *)v14 + 1)))
        {
          int v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      int v15 = a1;
LABEL_11:
      *int v15 = v12;
      if (++v11 == 8) {
        return v9 + 1 == a2;
      }
    }
    BOOL v8 = v9;
    v10 += 8;
    BOOL result = 1;
    if (++v9 == a2) {
      return result;
    }
  }
}

BOOL sub_1CC389428(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  sub_1CC389174(a1, a2, a3, a5);
  BOOL result = sub_1CD518604(a5, *a4, *a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    BOOL result = sub_1CD518604(a5, *a3, *a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL result = sub_1CD518604(a5, *a2, *a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_1CC3894E0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  sub_1CC389428(a1, a2, a3, a4, a6);
  BOOL result = sub_1CD518604(a6, *a5, *a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    BOOL result = sub_1CD518604(a6, *a4, *a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      BOOL result = sub_1CD518604(a6, *a3, *a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        BOOL result = sub_1CD518604(a6, *a2, *a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CC3895C0(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (result != a2)
  {
    unsigned int v5 = a2;
    uint64_t v6 = result;
    uint64_t v7 = (char *)a2 - (char *)result;
    uint64_t v8 = a2 - result;
    if ((char *)a2 - (char *)result >= 9)
    {
      unint64_t v9 = (unint64_t)(v8 - 2) >> 1;
      unint64_t v10 = v9 + 1;
      uint64_t v11 = &result[v9];
      do
      {
        BOOL result = (uint64_t *)sub_1CC2DE7C8((BOOL)v6, a4, v8, v11--);
        --v10;
      }
      while (v10);
    }
    if (v5 != a3)
    {
      uint64_t v12 = v5;
      do
      {
        BOOL result = (uint64_t *)sub_1CD518604(a4, *v12, *v6);
        if (result)
        {
          uint64_t v13 = *v12;
          uint64_t *v12 = *v6;
          *uint64_t v6 = v13;
          BOOL result = (uint64_t *)sub_1CC2DE7C8((BOOL)v6, a4, v8, v6);
        }
        ++v12;
      }
      while (v12 != a3);
    }
    if (v7 >= 9)
    {
      unsigned int v28 = v6;
      do
      {
        uint64_t v14 = 0;
        uint64_t v15 = *v6;
        uint64_t v16 = v8 - 2;
        if (v8 < 2) {
          uint64_t v16 = v8 - 1;
        }
        uint64_t v17 = v16 >> 1;
        uint64_t v18 = v6;
        do
        {
          uint64_t v19 = &v18[v14 + 1];
          uint64_t v20 = (2 * v14) | 1;
          uint64_t v21 = 2 * v14 + 2;
          if (v21 < v8)
          {
            BOOL result = (uint64_t *)sub_1CD518604(a4, *v19, v18[v14 + 2]);
            if (result)
            {
              ++v19;
              uint64_t v20 = v21;
            }
          }
          *uint64_t v18 = *v19;
          uint64_t v18 = v19;
          uint64_t v14 = v20;
        }
        while (v20 <= v17);
        if (v19 == --v5)
        {
          *uint64_t v19 = v15;
        }
        else
        {
          *uint64_t v19 = *v5;
          *unsigned int v5 = v15;
          uint64_t v6 = v28;
          uint64_t v22 = (char *)v19 - (char *)v28 + 8;
          if (v22 < 9) {
            continue;
          }
          unint64_t v23 = (((unint64_t)v22 >> 3) - 2) >> 1;
          uint64_t v24 = &v28[v23];
          BOOL result = (uint64_t *)sub_1CD518604(a4, *v24, *v19);
          if (!result) {
            continue;
          }
          uint64_t v25 = *v19;
          do
          {
            uint64_t v26 = v24;
            *uint64_t v19 = *v24;
            if (!v23) {
              break;
            }
            unint64_t v23 = (v23 - 1) >> 1;
            uint64_t v24 = &v28[v23];
            BOOL result = (uint64_t *)sub_1CD518604(a4, *v24, v25);
            uint64_t v19 = v26;
          }
          while ((result & 1) != 0);
          *uint64_t v26 = v25;
        }
        uint64_t v6 = v28;
      }
      while (v8-- > 2);
    }
  }
  return result;
}

void sub_1CC3897DC(_DWORD *a1)
{
  int v1 = a1[2];
  if (v1 || a1[3])
  {
    uint64_t v2 = a1[4];
    if (v2 > 4 * v1 && v2 >= 0x41)
    {
      sub_1CD54508C(a1);
    }
    else
    {
      if (v2)
      {
        uint64_t v3 = 72 * v2;
        uint64_t v4 = *(void *)a1 + 56;
        do
        {
          uint64_t v5 = *(void *)(v4 - 56);
          if (v5 != -4096)
          {
            if (v5 != -8192)
            {
              uint64_t v6 = *(void **)(v4 - 16);
              if ((void *)v4 != v6)
              {
                unint64_t v9 = a1;
                uint64_t v7 = v4;
                uint64_t v8 = v3;
                free(v6);
                uint64_t v4 = v7;
                uint64_t v3 = v8;
                a1 = v9;
              }
            }
            *(void *)(v4 - 56) = -4096;
          }
          v4 += 72;
          v3 -= 72;
        }
        while (v3);
      }
      *((void *)a1 + 1) = 0;
    }
  }
}

void sub_1CC3898B0(char **a1, uint64_t a2)
{
  sub_1CC387D6C(a1);
  uint64_t v4 = *(unsigned int *)(a2 + 8);
  if (v4)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v6 = 8 * v4;
    uint64_t v7 = 1;
    do
    {
      uint64_t v8 = *v5++;
      uint64_t v7 = sub_1CC387F14((uint64_t)a1, v8, v7, 0);
      v6 -= 8;
    }
    while (v6);
  }
}

void sub_1CC389910(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v2[0] = v3;
  v2[1] = (void *)0x400000000;
  int v8 = 0;
  v3[4] = 0;
  v3[5] = 0;
  int v4 = 0;
  char v7 = 0;
  uint64_t v1 = *(void *)(a1 + 80);
  uint64_t v5 = 0;
  uint64_t v6 = v1;
  sub_1CC3856EC((uint64_t)v2, 0);
  llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::compare();
}

BOOL sub_1CC389B60(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *(a2 - 1);
      uint64_t v7 = *a1;
      if (*(_DWORD *)(v6 + 72) < *(_DWORD *)(*a1 + 72))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1CC3463C4(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1CC346778(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1CC346810(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v8 = a1 + 2;
      sub_1CC3463C4(a1, a1 + 1, a1 + 2);
      uint64_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 24;
      break;
  }
  while (1)
  {
    uint64_t v12 = *v9;
    uint64_t v13 = *v8;
    unsigned int v14 = *(_DWORD *)(*v9 + 72);
    if (v14 < *(_DWORD *)(*v8 + 72))
    {
      uint64_t v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        uint64_t v16 = v15 - 8;
        if (v15 == 8) {
          break;
        }
        uint64_t v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 72))
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      uint64_t v17 = a1;
LABEL_12:
      *uint64_t v17 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 8;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1CC389CF4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  v92[64] = *MEMORY[0x1E4F143B8];
  uint64_t v86 = a2;
  uint64_t v90 = v92;
  v92[0] = a2;
  uint64_t v91 = 0x4000000001;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v82 = a1 + 24;
  int v7 = *(_DWORD *)(a1 + 40);
  if (!v7) {
    goto LABEL_15;
  }
  int v9 = v7 - 1;
  unsigned int v10 = (v7 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  uint64_t v11 = (uint64_t *)(v6 + 72 * v10);
  uint64_t v12 = *v11;
  if (*v11 == a2)
  {
LABEL_14:
    *(_DWORD *)(v6 + 72 * v10 + 12) = 0;
LABEL_15:
    unsigned int v21 = 1;
    goto LABEL_16;
  }
  int v13 = 1;
  uint64_t v14 = *v11;
  unsigned int v15 = v9 & ((a2 >> 4) ^ (a2 >> 9));
  do
  {
    if (v14 == -4096) {
      goto LABEL_15;
    }
    unsigned int v16 = v15 + v13++;
    unsigned int v15 = v16 & v9;
    uint64_t v14 = *(void *)(v6 + 72 * v15);
  }
  while (v14 != a2);
  uint64_t v17 = 0;
  int v18 = 1;
  while (v12 != -4096)
  {
    if (v17) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v12 == -8192;
    }
    if (v19) {
      uint64_t v17 = v11;
    }
    unsigned int v20 = v10 + v18++;
    unsigned int v10 = v20 & v9;
    uint64_t v11 = (uint64_t *)(v6 + 72 * v10);
    uint64_t v12 = *v11;
    if (*v11 == a2) {
      goto LABEL_14;
    }
  }
  if (v17) {
    uint64_t v79 = v17;
  }
  else {
    uint64_t v79 = v11;
  }
  unsigned int v80 = sub_1CC387084(v82, &v86, v79);
  *unsigned int v80 = a2;
  *(_OWORD *)(v80 + 5) = 0u;
  *(_OWORD *)(v80 + 3) = 0u;
  *(_OWORD *)(v80 + 1) = 0u;
  *(_OWORD *)(v80 + 7) = 0u;
  v80[5] = (uint64_t)(v80 + 7);
  *((_DWORD *)v80 + 13) = 2;
  unsigned int v21 = v91;
  while (v91)
  {
LABEL_16:
    uint64_t v22 = *((void *)v90 + v21 - 1);
    LODWORD(v91) = v21 - 1;
    uint64_t v85 = v22;
    int v23 = *(_DWORD *)(a1 + 40);
    if (v23)
    {
      uint64_t v24 = *(void *)(a1 + 24);
      int v25 = v23 - 1;
      unsigned int v26 = v25 & ((v22 >> 4) ^ (v22 >> 9));
      int v27 = (uint64_t *)(v24 + 72 * v26);
      uint64_t v28 = *v27;
      if (v22 == *v27) {
        goto LABEL_31;
      }
      int v29 = 0;
      int v30 = 1;
      while (v28 != -4096)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == -8192;
        }
        if (v31) {
          int v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        int v27 = (uint64_t *)(v24 + 72 * v26);
        uint64_t v28 = *v27;
        if (v22 == *v27) {
          goto LABEL_31;
        }
      }
      if (v29) {
        BOOL v33 = v29;
      }
      else {
        BOOL v33 = v27;
      }
    }
    else
    {
      BOOL v33 = 0;
    }
    int v27 = sub_1CC387084(v82, &v85, v33);
    uint64_t *v27 = v22;
    *(_OWORD *)(v27 + 5) = 0u;
    *(_OWORD *)(v27 + 1) = 0u;
    *(_OWORD *)(v27 + 3) = 0u;
    *(_OWORD *)(v27 + 7) = 0u;
    v27[5] = (uint64_t)(v27 + 7);
    *((_DWORD *)v27 + 13) = 2;
LABEL_31:
    if (!*((_DWORD *)v27 + 2))
    {
      *((_DWORD *)v27 + 4) = ++a3;
      *((_DWORD *)v27 + 2) = a3;
      v27[3] = v22;
      int v35 = *(uint64_t **)(a1 + 8);
      unint64_t v34 = *(void *)(a1 + 16);
      if ((unint64_t)v35 >= v34)
      {
        unsigned int v37 = *(uint64_t **)a1;
        uint64_t v38 = ((uint64_t)v35 - *(void *)a1) >> 3;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 61) {
          abort();
        }
        uint64_t v40 = v34 - (void)v37;
        if (v40 >> 2 > v39) {
          unint64_t v39 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          if (v41 >> 61) {
            sub_1CB833614();
          }
          uint64_t v42 = (char *)operator new(8 * v41);
        }
        else
        {
          uint64_t v42 = 0;
        }
        unint64_t v43 = (uint64_t *)&v42[8 * v38];
        uint64_t *v43 = v22;
        unint64_t v36 = v43 + 1;
        if (v35 != v37)
        {
          do
          {
            uint64_t v44 = *--v35;
            *--unint64_t v43 = v44;
          }
          while (v35 != v37);
          int v35 = *(uint64_t **)a1;
        }
        *(void *)a1 = v43;
        *(void *)(a1 + 8) = v36;
        *(void *)(a1 + 16) = &v42[8 * v41];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *int v35 = v22;
        unint64_t v36 = v35 + 1;
      }
      *(void *)(a1 + 8) = v36;
      uint64_t v45 = *(void *)(a1 + 48);
      if (v45)
      {
        sub_1CD544768((uint64_t)&v87, *(void *)(v45 + 8), v85);
        uint64_t v57 = v88;
        uint64_t v49 = v87;
      }
      else
      {
        uint64_t v46 = *(char **)(v85 + 64);
        uint64_t v47 = *(char **)(v85 + 72);
        uint64_t v87 = (uint64_t *)v89;
        uint64_t v88 = 0x800000000;
        unint64_t v48 = v47 - v46;
        if ((unint64_t)(v47 - v46) >= 0x41) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v49 = (uint64_t *)v89;
        if (v46 != v47)
        {
          unint64_t v50 = v89;
          do
          {
            uint64_t v51 = *(void *)v46;
            v46 += 8;
            *v50++ = v51;
          }
          while (v46 != v47);
          uint64_t v49 = v87;
        }
        uint64_t v52 = v49;
        uint64_t v53 = (v48 >> 3);
        if (v53)
        {
          uint64_t v54 = 8 * v53;
          uint64_t v52 = v49;
          while (*v52)
          {
            ++v52;
            v54 -= 8;
            if (!v54)
            {
              uint64_t v52 = &v49[v53];
              break;
            }
          }
        }
        uint64_t v55 = v52 - v49;
        if (v55 != v53)
        {
          int v77 = v52 + 1;
          if (v52 + 1 != &v49[v53])
          {
            uint64_t v78 = 8 * v53 - 8 * v55 - 8;
            do
            {
              if (*v77) {
                *v52++ = *v77;
              }
              ++v77;
              v78 -= 8;
            }
            while (v78);
            uint64_t v49 = v87;
          }
        }
        unint64_t v56 = (unint64_t)((char *)v52 - (char *)v49) >> 3;
        uint64_t v57 = v56;
        LODWORD(v88) = v56;
      }
      unint64_t v58 = &v49[v57];
      if (v57)
      {
        while (1)
        {
          uint64_t v84 = 0;
          uint64_t v59 = *v49;
          uint64_t v84 = v59;
          uint64_t v60 = *(void *)(a1 + 24);
          unsigned int v61 = *(_DWORD *)(a1 + 40);
          uint64_t v62 = sub_1CC129FE4(v60, v61, v59);
          if ((uint64_t *)(v60 + 72 * v61) == v62)
          {
            uint64_t v63 = v85;
          }
          else
          {
            uint64_t v63 = v85;
            if (*((_DWORD *)v62 + 2))
            {
              if (v59 != v85)
              {
                uint64_t v64 = v62 + 5;
                unint64_t v66 = v62 + 6;
                unint64_t v65 = *((unsigned int *)v62 + 12);
                unint64_t v67 = *((unsigned int *)v62 + 13);
                goto LABEL_89;
              }
              goto LABEL_91;
            }
          }
          if (v59 != a4 && v63 != a4)
          {
            if (!v61)
            {
              unsigned int v76 = 0;
              goto LABEL_86;
            }
            unsigned int v69 = (v61 - 1) & ((v59 >> 4) ^ (v59 >> 9));
            unsigned int v70 = (uint64_t *)(v60 + 72 * v69);
            uint64_t v71 = *v70;
            if (v59 != *v70)
            {
              uint64_t v72 = 0;
              int v73 = 1;
              while (v71 != -4096)
              {
                if (v72) {
                  BOOL v74 = 0;
                }
                else {
                  BOOL v74 = v71 == -8192;
                }
                if (v74) {
                  uint64_t v72 = v70;
                }
                unsigned int v75 = v69 + v73++;
                unsigned int v69 = v75 & (v61 - 1);
                unsigned int v70 = (uint64_t *)(v60 + 72 * v69);
                uint64_t v71 = *v70;
                if (v59 == *v70) {
                  goto LABEL_87;
                }
              }
              if (v72) {
                unsigned int v76 = v72;
              }
              else {
                unsigned int v76 = v70;
              }
LABEL_86:
              unsigned int v70 = sub_1CC387084(v82, &v84, v76);
              *unsigned int v70 = v59;
              *(_OWORD *)(v70 + 5) = 0u;
              *(_OWORD *)(v70 + 1) = 0u;
              *(_OWORD *)(v70 + 3) = 0u;
              *(_OWORD *)(v70 + 7) = 0u;
              v70[5] = (uint64_t)(v70 + 7);
              *((_DWORD *)v70 + 13) = 2;
            }
LABEL_87:
            if (v91 >= (unint64_t)HIDWORD(v91)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v90 + v91) = v59;
            LODWORD(v91) = v91 + 1;
            unint64_t v66 = v70 + 6;
            unint64_t v65 = *((unsigned int *)v70 + 12);
            *((_DWORD *)v70 + 3) = a3;
            uint64_t v64 = v70 + 5;
            unint64_t v67 = *((unsigned int *)v70 + 13);
LABEL_89:
            if (v65 >= v67) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*v64 + 8 * v65) = v63;
            ++*v66;
          }
LABEL_91:
          if (++v49 == v58)
          {
            uint64_t v49 = v87;
            break;
          }
        }
      }
      if (v49 != (uint64_t *)v89) {
        free(v49);
      }
    }
    unsigned int v21 = v91;
  }
  if (v90 != v92) {
    free(v90);
  }
  return a3;
}

unint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getEntry(void *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getExit(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::begin(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

{
  return *(void *)(a1 + 40);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::end(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

{
  return *(void *)(a1 + 48);
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::RegionBase(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *BOOL result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

{
  *BOOL result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

unint64_t *llvm::RegionNodeBase<llvm::RegionTraits<llvm::MachineFunction>>::RegionNodeBase(unint64_t *result, unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = 4;
  if (!a4) {
    uint64_t v4 = 0;
  }
  *BOOL result = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
  result[1] = a2;
  return result;
}

{
  uint64_t v4;

  uint64_t v4 = 4;
  if (!a4) {
    uint64_t v4 = 0;
  }
  *BOOL result = a3 & 0xFFFFFFFFFFFFFFFBLL | v4;
  result[1] = a2;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::~RegionBase(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 72);
  sub_1CD4B9F64(*(void **)(a1 + 72));
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = 0;
  *uint64_t v2 = 0;
  uint64_t v4 = (void **)(a1 + 40);
  sub_1CC0D3220(&v4);
  return a1;
}

{
  void *v2;
  void **v4;

  uint64_t v2 = (void *)(a1 + 72);
  sub_1CD4B9F64(*(void **)(a1 + 72));
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 80) = 0;
  *uint64_t v2 = 0;
  uint64_t v4 = (void **)(a1 + 40);
  sub_1CC0D3220(&v4);
  return a1;
}

unint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::MachineFunction>>::getEntry(void *a1)
{
  return *a1 & 0xFFFFFFFFFFFFFFF8;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::replaceEntry(uint64_t *result, uint64_t a2)
{
  *BOOL result = *result & 7 | a2;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::replaceExit(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = a2;
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::replaceEntryRecursive(void *a1, uint64_t a2)
{
  unint64_t v3 = *a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (char *)operator new(8uLL);
  *(void *)uint64_t v4 = a1;
  uint64_t v5 = v4 + 8;
  uint64_t v6 = v4 + 8;
  do
  {
    int v7 = (uint64_t *)*((void *)v6 - 1);
    int v8 = v6 - 8;
    *int v7 = *v7 & 7 | a2;
    int v9 = (void *)v7[5];
    unsigned int v10 = (void *)v7[6];
    if (v9 != v10)
    {
      while (1)
      {
        uint64_t v11 = (void *)*v9;
        if ((*(void *)*v9 & 0xFFFFFFFFFFFFFFF8) == v3)
        {
          if (v8 >= v5)
          {
            uint64_t v12 = (v8 - v4) >> 3;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61) {
              abort();
            }
            if ((v5 - v4) >> 2 > v13) {
              unint64_t v13 = (v5 - v4) >> 2;
            }
            if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v13;
            }
            if (v14)
            {
              if (v14 >> 61) {
                sub_1CB833614();
              }
              unsigned int v15 = (char *)operator new(8 * v14);
            }
            else
            {
              unsigned int v15 = 0;
            }
            unsigned int v16 = &v15[8 * v12];
            *(void *)unsigned int v16 = v11;
            uint64_t v6 = v16 + 8;
            if (v8 != v4)
            {
              do
              {
                uint64_t v17 = *((void *)v8 - 1);
                v8 -= 8;
                *((void *)v16 - 1) = v17;
                v16 -= 8;
              }
              while (v8 != v4);
              int v8 = v4;
            }
            uint64_t v4 = v16;
            uint64_t v5 = &v15[8 * v14];
            if (v8) {
              operator delete(v8);
            }
            goto LABEL_7;
          }
          *(void *)int v8 = v11;
          v8 += 8;
        }
        uint64_t v6 = v8;
LABEL_7:
        ++v9;
        int v8 = v6;
        if (v9 == v10) {
          goto LABEL_25;
        }
      }
    }
    v6 -= 8;
LABEL_25:
    ;
  }
  while (v4 != v6);
  if (v4)
  {
    operator delete(v4);
  }
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::replaceExitRecursive(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (char *)operator new(8uLL);
  *(void *)uint64_t v4 = a1;
  uint64_t v5 = v4 + 8;
  uint64_t v6 = v4 + 8;
  do
  {
    int v7 = (void *)*((void *)v6 - 1);
    int v8 = v6 - 8;
    v7[4] = a2;
    int v9 = (uint64_t *)v7[5];
    unsigned int v10 = (uint64_t *)v7[6];
    if (v9 != v10)
    {
      while (1)
      {
        uint64_t v11 = *v9;
        if (*(void *)(*v9 + 32) == v3)
        {
          if (v8 >= v5)
          {
            uint64_t v12 = (v8 - v4) >> 3;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 61) {
              abort();
            }
            if ((v5 - v4) >> 2 > v13) {
              unint64_t v13 = (v5 - v4) >> 2;
            }
            if ((unint64_t)(v5 - v4) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v13;
            }
            if (v14)
            {
              if (v14 >> 61) {
                sub_1CB833614();
              }
              unsigned int v15 = (char *)operator new(8 * v14);
            }
            else
            {
              unsigned int v15 = 0;
            }
            unsigned int v16 = &v15[8 * v12];
            *(void *)unsigned int v16 = v11;
            uint64_t v6 = v16 + 8;
            if (v8 != v4)
            {
              do
              {
                uint64_t v17 = *((void *)v8 - 1);
                v8 -= 8;
                *((void *)v16 - 1) = v17;
                v16 -= 8;
              }
              while (v8 != v4);
              int v8 = v4;
            }
            uint64_t v4 = v16;
            uint64_t v5 = &v15[8 * v14];
            if (v8) {
              operator delete(v8);
            }
            goto LABEL_7;
          }
          *(void *)int v8 = v11;
          v8 += 8;
        }
        uint64_t v6 = v8;
LABEL_7:
        ++v9;
        int v8 = v6;
        if (v9 == v10) {
          goto LABEL_25;
        }
      }
    }
    v6 -= 8;
LABEL_25:
    ;
  }
  while (v4 != v6);
  if (v4)
  {
    operator delete(v4);
  }
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getParent(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::MachineFunction>>::getParent(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getDepth(uint64_t result)
{
  uint64_t v1 = result;
  LODWORD(result) = -1;
  do
  {
    uint64_t v1 = *(void *)(v1 + 8);
    BOOL result = (result + 1);
  }
  while (v1);
  return result;
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::isTopLevelRegion(uint64_t a1)
{
  return *(void *)(a1 + 32) == 0;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getExpandedRegion(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(void *)(v1 + 96) - *(void *)(v1 + 88)) & 0x7FFFFFFF8) != 0)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v8 = 0;
    sub_1CD40EA84(*(void *)(v4 + 40), *(_DWORD *)(v4 + 56), v1, &v8);
    uint64_t v5 = *(void **)(v8 + 8);
    unint64_t v6 = *v5 & 0xFFFFFFFFFFFFFFF8;
    int v7 = *(void **)(a1 + 32);
    if (v7 == (void *)v6)
    {
      do
        uint64_t v5 = (void *)v5[1];
      while (v5 && v6 == (*v5 & 0xFFFFFFFFFFFFFFF8));
      if (*(void *)(v6 + 64) != *(void *)(v6 + 72)) {
        llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
      }
      operator new();
    }
    if (v7[8] != v7[9]) {
      llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
    }
    if (((v7[12] - v7[11]) & 0x7FFFFFFF8) == 8) {
      operator new();
    }
  }
  return 0;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getRegionFor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  int v2 = sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), a2, &v4);
  uint64_t result = 0;
  if (v2) {
    return *(void *)(v4 + 8);
  }
  return result;
}

uint64_t *llvm::MachineRegion::MachineRegion(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *uint64_t result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

{
  *uint64_t result = a2 | 4;
  result[1] = a6;
  result[2] = a4;
  result[3] = a5;
  result[4] = a3;
  result[5] = 0;
  result[6] = 0;
  result[7] = 0;
  result[10] = 0;
  result[9] = 0;
  result[8] = (uint64_t)(result + 9);
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getExitingBlock(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(void *)(v1 + 64) != *(void *)(v1 + 72)) {
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
  }
  return 0;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getExitingBlocks(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1 && *(void *)(v1 + 64) != *(void *)(v1 + 72)) {
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
  }
  return 1;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getRegionInfo(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::print(uint64_t a1, llvm::raw_ostream *a2, int a3, unsigned int a4)
{
  llvm::raw_ostream::indent(a2, 2 * a4);
  if (a3)
  {
    int v7 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v7 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 91);
    }
    else
    {
      *((void *)a2 + 4) = v7 + 1;
      *int v7 = 91;
    }
    sub_1CD098D14(a2, a4, 0, 0, 0);
    uint64_t v8 = (_WORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v8 > 1uLL)
    {
      *uint64_t v8 = 8285;
      *((void *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, "] ", 2uLL);
    }
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getNameStr();
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::dump(llvm *a1)
{
  int v2 = -1;
  llvm::dbgs(a1);
  uint64_t v3 = a1;
  do
  {
    uint64_t v3 = (llvm *)*((void *)v3 + 1);
    ++v2;
  }
  while (v3);

  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::print();
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains()
{
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

{
  while (1)
    ;
}

BOOL llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (a2) {
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
  }
  return *(void *)(a1 + 32) == 0;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::outermostLoopInRegion()
{
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::outermostLoopInRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 264);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 248);
    int v5 = v3 - 1;
    unsigned int v6 = (v3 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v7 = *(void *)(v4 + 16 * v6);
    if (v7 == a3) {
LABEL_6:
    }
      llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
    int v8 = 1;
    while (v7 != -4096)
    {
      unsigned int v9 = v6 + v8++;
      unsigned int v6 = v9 & v5;
      uint64_t v7 = *(void *)(v4 + 16 * v6);
      if (v7 == a3) {
        goto LABEL_6;
      }
    }
  }
  return 0;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getNode()
{
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::addSubRegion(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)(a2 + 8) = a1;
  int v5 = (uint64_t **)(a1 + 40);
  uint64_t v9 = a2;
  unsigned int v6 = *(uint64_t **)(a1 + 48);
  if ((unint64_t)v6 >= *(void *)(a1 + 56))
  {
    uint64_t v7 = sub_1CC0D3528(v5, &v9);
  }
  else
  {
    uint64_t v9 = 0;
    *unsigned int v6 = a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 48) = v7;
  uint64_t result = sub_1CC0D349C(&v9, 0);
  if (a3) {
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::elements();
  }
  return result;
}

uint64_t llvm::RegionNodeBase<llvm::RegionTraits<llvm::MachineFunction>>::isSubRegion(unsigned __int8 *a1)
{
  return (*a1 >> 2) & 1;
}

void *llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::setRegionFor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2;
  uint64_t result = sub_1CD467E2C(a1 + 40, &v5);
  result[1] = a3;
  return result;
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::removeSubRegion(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *(uint64_t **)(a1 + 48);
  if (v5 != v4)
  {
    while (*v5 != a2)
    {
      if (++v5 == v4)
      {
        uint64_t v5 = *(uint64_t **)(a1 + 48);
        break;
      }
    }
  }
  unsigned int v6 = v5 + 1;
  if (v5 + 1 != v4)
  {
    do
    {
      uint64_t v7 = v6 - 1;
      uint64_t v8 = *v6;
      *v6++ = 0;
      sub_1CC0D349C(v7, v8);
      ++v5;
    }
    while (v6 != v4);
    uint64_t v4 = *(uint64_t **)(a1 + 48);
  }
  while (v4 != v5)
    sub_1CC0D349C(--v4, 0);
  *(void *)(a1 + 48) = v5;
  return a2;
}

uint64_t *llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::transferChildrenTo(uint64_t *result, uint64_t a2)
{
  int v2 = result;
  int v3 = (uint64_t *)result[5];
  uint64_t v4 = (uint64_t *)result[6];
  if (v3 != v4)
  {
    unsigned int v6 = (uint64_t **)(a2 + 40);
    uint64_t result = *(uint64_t **)(a2 + 48);
    do
    {
      *(void *)(*v3 + 8) = a2;
      if ((unint64_t)result >= *(void *)(a2 + 56))
      {
        uint64_t result = sub_1CC0D3528(v6, v3);
      }
      else
      {
        uint64_t v7 = *v3;
        *int v3 = 0;
        *result++ = v7;
      }
      *(void *)(a2 + 48) = result;
      ++v3;
    }
    while (v3 != v4);
    uint64_t v8 = (uint64_t *)v2[5];
    int v3 = (uint64_t *)v2[6];
    if (v3 != v8)
    {
      do
        uint64_t result = sub_1CC0D349C(--v3, 0);
      while (v3 != v8);
      int v3 = v8;
    }
  }
  v2[6] = (uint64_t)v3;
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::clearNodeCache(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 72);
  sub_1CD4B9F64(*(void **)(a1 + 72));
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
  int v3 = (uint64_t *)*(v1 - 4);
  int v2 = (uint64_t *)*(v1 - 3);
  while (v3 != v2)
  {
    uint64_t v4 = *v3++;
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::clearNodeCache(v4);
  }
}

uint64_t llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::block_begin@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1CC38D254(a2, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
}

{
  return sub_1CD54818C(a2, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
}

double llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::block_end@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)&double result = 8;
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  return result;
}

{
  double result;

  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)&double result = 8;
  *(void *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  return result;
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::blocks(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1CC38D254((uint64_t)&v9, *a1 & 0xFFFFFFFFFFFFFFF8, a1[4]);
  int v3 = (void *)(a2 + 32);
  *(void *)a2 = a2 + 32;
  uint64_t v5 = v9;
  uint64_t v4 = v10;
  if (v10 == v9)
  {
    *(void *)(a2 + 8) = v3;
    int v6 = HIDWORD(v11);
    if (HIDWORD(v11)) {
      memmove(v3, v4, 8 * HIDWORD(v11));
    }
  }
  else
  {
    *(void *)(a2 + 8) = v10;
    unsigned int v10 = v5;
    uint64_t v4 = v5;
    int v6 = HIDWORD(v11);
  }
  int v7 = v12;
  *(_DWORD *)(a2 + 16) = v11;
  *(_DWORD *)(a2 + 20) = v6;
  *(_DWORD *)(a2 + 24) = v7;
  uint64_t v11 = 8;
  int v12 = 0;
  *(_OWORD *)(a2 + 96) = v13;
  uint64_t v8 = v14;
  long long v13 = 0uLL;
  uint64_t v14 = 0;
  *(void *)(a2 + 112) = v8;
  *(void *)(a2 + 120) = a2 + 152;
  *(void *)(a2 + 128) = a2 + 152;
  *(void *)(a2 + 136) = 8;
  *(_DWORD *)(a2 + 144) = 0;
  *(void *)(a2 + 216) = 0;
  *(void *)(a2 + 224) = 0;
  *(void *)(a2 + 232) = 0;
  if (v4 != v5) {
    free(v4);
  }
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::element_begin()
{
}

{
  sub_1CD546F04();
}

void llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::element_end()
{
}

{
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::getSubRegionNode();
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::RegionInfoBase(uint64_t result)
{
  *(void *)double result = &unk_1F260F120;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::RegionInfoBase(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = &unk_1F260F120;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v4;
  LODWORD(v4) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  sub_1CD3C7F68((_DWORD *)(a2 + 40));
  return a1;
}

_DWORD *llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::wipe(uint64_t a1)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return sub_1CD3C7F68((_DWORD *)(a1 + 40));
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 40), 8);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  int v4 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = v4;
  int v5 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = v5;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  sub_1CD3C7F68((_DWORD *)(a2 + 40));
  return a1;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::verifyBBMap()
{
}

{
  while (1)
    ;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getNextPostDom(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a2;
  uint64_t v6 = *a2;
  uint64_t v9 = 0;
  if (sub_1CD40EA84(*(void *)a3, *(_DWORD *)(a3 + 16), v6, &v9)) {
    BOOL v7 = v9 == *(void *)a3 + 16 * *(unsigned int *)(a3 + 16);
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    uint64_t v4 = sub_1CBA9D508(*(void *)(a1 + 16), *(void *)(v9 + 8));
  }
  return *(void *)(v4 + 8);
}

BOOL llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::isTrivialRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a2 + 88);
  return ((*(void *)(a2 + 96) - (void)v3) & 0x7FFFFFFF0) == 0 && *v3 == a3;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::findRegionsWithEntry(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1CBA9D508(*(void *)(a1 + 16), a2);
  if (result) {
    llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getNextPostDom();
  }
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getTopMostParent(uint64_t a1, uint64_t a2)
{
  do
  {
    uint64_t result = a2;
    a2 = *(void *)(a2 + 8);
  }
  while (a2);
  return result;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::print(int a1, llvm::raw_ostream *this)
{
  int v2 = (void *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v2 > 0xCuLL)
  {
    qmemcpy(v2, "Region tree:\n", 13);
    *((void *)this + 4) += 13;
  }
  else
  {
    llvm::raw_ostream::write(this, "Region tree:\n", 0xDuLL);
  }
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::print();
}

void llvm::MachineRegion::~MachineRegion(llvm::MachineRegion *this)
{
  int v2 = (void *)((char *)this + 72);
  sub_1CD4B9F64(*((void **)this + 9));
  *((void *)this + 8) = v2;
  *((void *)this + 10) = 0;
  *int v2 = 0;
  uint64_t v3 = (void **)((char *)this + 40);
  sub_1CC0D3220(&v3);
}

{
  void *v2;
  void **v3;

  int v2 = (void *)((char *)this + 72);
  sub_1CD4B9F64(*((void **)this + 9));
  *((void *)this + 8) = v2;
  *((void *)this + 10) = 0;
  *int v2 = 0;
  uint64_t v3 = (void **)((char *)this + 40);
  sub_1CC0D3220(&v3);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  int v2 = sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), a2, &v4);
  uint64_t result = 0;
  if (v2) {
    return *(void *)(v4 + 8);
  }
  return result;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getMaxRegionExit(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  int v4 = sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), a2, &v12);
  int v5 = 0;
  if (v4) {
    int v5 = *(void **)(v12 + 8);
  }
  do
  {
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_7;
    }
    int v5 = (void *)v5[1];
  }
  while (v5 && a2 == (*v5 & 0xFFFFFFFFFFFFFFF8));
  if (a2 == (*v6 & 0xFFFFFFFFFFFFFFF8))
  {
    BOOL v7 = v6 + 4;
LABEL_8:
    uint64_t v8 = *v7;
    uint64_t v12 = 0;
    int v9 = sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), v8, &v12);
    unsigned int v10 = 0;
    if (v9) {
      unsigned int v10 = *(void **)(v12 + 8);
    }
    do
    {
      if (!v10) {
        break;
      }
      unsigned int v10 = (void *)v10[1];
      if (!v10) {
        break;
      }
    }
    while (v8 == (*v10 & 0xFFFFFFFFFFFFFFF8));
    if (*(void *)(v8 + 64) != *(void *)(v8 + 72)) {
      llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
    }
    llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(a1 + 8));
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
  }
LABEL_7:
  BOOL v7 = *(uint64_t **)(a2 + 88);
  if (v7 + 1 == *(uint64_t **)(a2 + 96)) {
    goto LABEL_8;
  }
  return 0;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getCommonRegion()
{
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getCommonRegion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), a2, &v5);
  uint64_t v5 = 0;
  sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), a3, &v5);
  llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getCommonRegion(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  uint64_t v3 = *(void *)(*(void *)a2 + 8 * v2 - 8);
  LODWORD(v2) = v2 - 1;
  *(_DWORD *)(a2 + 8) = v2;
  if (v2) {
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
  }
  return v3;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;

  int v4 = *(void *)(*(void *)a2 + 8 * *(unsigned int *)(a2 + 8) - 8);
  int v9 = 0;
  uint64_t v5 = 0;
  if (sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), v4, &v9)) {
    uint64_t v5 = *(void *)(v9 + 8);
  }
  uint64_t v6 = *(_DWORD *)(a2 + 8) - 1;
  *(_DWORD *)(a2 + 8) = v6;
  if (v6)
  {
    BOOL v7 = **(void **)a2;
    int v9 = 0;
    sub_1CD40EA84(*(void *)(a1 + 40), *(_DWORD *)(a1 + 56), v7, &v9);
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::contains();
  }
  return v5;
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::getTopLevelRegion(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::clearNodeCache(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::clearNodeCache();
  }
  return result;
}

void llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::verifyAnalysis()
{
  if (llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::VerifyRegionInfo) {
    llvm::RegionBase<llvm::RegionTraits<llvm::MachineFunction>>::verifyRegionNest();
  }
}

uint64_t llvm::MachineRegionInfo::MachineRegionInfo(uint64_t this)
{
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F260F148;
  return this;
}

{
  *(void *)(this + 32) = 0;
  *(void *)(this + 40) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(void *)(this + 48) = 0;
  *(void *)this = &unk_1F260F148;
  return this;
}

void llvm::MachineRegionInfoPass::~MachineRegionInfoPass(llvm::MachineRegionInfoPass *this)
{
  *(void *)this = &unk_1F260F170;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::~RegionInfoBase();
}

{
  *(void *)this = &unk_1F260F170;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::~RegionInfoBase();
}

{
  *(void *)this = &unk_1F260F170;
  llvm::RegionInfoBase<llvm::RegionTraits<llvm::MachineFunction>>::~RegionInfoBase();
}

void sub_1CC38D164(llvm *a1)
{
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeMachineDominanceFrontierPass(a1, v3);
  operator new();
}

void llvm::createMachineRegionInfoPass(llvm *this)
{
}

uint64_t sub_1CC38D254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v6 = a2;
  unsigned char v6[8] = 0;
  v6[16] = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)a1 = a1 + 32;
  *(void *)(a1 + 8) = a1 + 32;
  *(void *)(a1 + 16) = 0x100000008;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = v6 + 24;
  *(void *)(a1 + 112) = v6 + 24;
  if (a2 != a3)
  {
    if (a2 == -2)
    {
      *(void *)(a1 + 32) = a3;
      *(_DWORD *)(a1 + 24) = -1;
    }
    else
    {
      *(_DWORD *)(a1 + 20) = 2;
      *(void *)(a1 + 40) = a3;
    }
  }
  return a1;
}

void llvm::MachineRegisterInfo::MachineRegisterInfo(llvm::MachineRegisterInfo *this, llvm::MachineFunction *a2)
{
  *(void *)this = a2;
  *((void *)this + 1) = 0;
  char v3 = (*(uint64_t (**)(void))(**((void **)a2 + 2) + 400))(*((void *)a2 + 2));
  if (byte_1EBCCFC80) {
    char v4 = v3;
  }
  else {
    char v4 = 0;
  }
  *((unsigned char *)this + 16) = v4;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = (char *)this + 40;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 8) = (char *)this + 80;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0x800000000;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 19) = (char *)this + 176;
  *((_OWORD *)this + 10) = xmmword_1CDB15990;
  *((_DWORD *)this + 56) = 0;
  *((void *)this + 26) = (char *)this + 224;
  *((void *)this + 27) = 0;
  *((void *)this + 29) = (char *)this + 248;
  *((void *)this + 30) = 0x400000000;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = (char *)this + 296;
  *((void *)this + 36) = 0x600000000;
  *((_DWORD *)this + 86) = 0;
  *((void *)this + 44) = (char *)this + 368;
  *((void *)this + 45) = 0x600000000;
  *((_DWORD *)this + 104) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 53) = (char *)this + 440;
  *((void *)this + 57) = 0;
  *((void *)this + 58) = 0;
  *((void *)this + 59) = 0;
  int v5 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(*(void *)this + 16) + 176))(*(void *)(*(void *)this + 16))
                 + 16);
  if (*((_DWORD *)this + 9) <= 0xFFu) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (*((_DWORD *)this + 55) <= 0xFFu) {
    sub_1CC38F628((uint64_t)this + 208, 0x100uLL);
  }
  uint64_t v6 = *((unsigned int *)this + 72);
  if ((*((_DWORD *)this + 86) & 0x3F) != 0)
  {
    uint64_t v13 = *((void *)this + 35) + 8 * v6;
    *(void *)(v13 - 8) &= ~(-1 << (*((_DWORD *)this + 86) & 0x3F));
  }
  unsigned int v7 = v6;
  uint64_t v8 = (void *)((char *)this + 280);
  *((_DWORD *)this + 86) = v5;
  unsigned int v9 = v5 + 63;
  if (v6 != (v5 + 63) >> 6)
  {
    uint64_t v10 = v9 >> 6;
    if (v6 <= v10)
    {
      if (v10 > *((_DWORD *)this + 73)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v10 != v6) {
        bzero((void *)(*v8 + 8 * v6), 8 * (v10 - v6));
      }
      unsigned int v7 = v10;
      *((_DWORD *)this + 72) = v10;
      int v11 = *((_DWORD *)this + 86);
LABEL_16:
      int v12 = v11 & 0x3F;
      if (v12) {
        *(void *)(*v8 + 8 * v7 - 8) &= ~(-1 << v12);
      }
      operator new[]();
    }
    *((_DWORD *)this + 72) = v10;
    unsigned int v7 = v9 >> 6;
  }
  LOBYTE(v11) = v5;
  goto LABEL_16;
}

uint64_t llvm::MachineRegisterInfo::setRegClass(uint64_t result, int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 24) + 16 * (a2 & 0x7FFFFFFF)) = a3 & 0xFFFFFFFFFFFFFFFBLL;
  return result;
}

uint64_t llvm::MachineRegisterInfo::setRegBank(uint64_t result, int a2, uint64_t a3)
{
  *(void *)(*(void *)(result + 24) + 16 * (a2 & 0x7FFFFFFF)) = a3 | 4;
  return result;
}

uint64_t llvm::MachineRegisterInfo::constrainRegClass(void *a1, int a2, uint64_t a3, unsigned int a4)
{
  return sub_1CC38D61C(a1, a2, *(void *)(a1[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, a3, a4);
}

uint64_t sub_1CC38D61C(void *a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a3 == a4) {
    return a3;
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
  uint64_t result = 0;
  if (a3 && a4)
  {
    uint64_t v13 = v10 + 240;
    uint64_t v12 = *(void *)(v10 + 240);
    unint64_t v14 = (unint64_t)(*(void *)(v13 + 8) - v12) >> 3;
    if (!v14) {
      return 0;
    }
    unsigned int v15 = 0;
    unsigned int v16 = *(_DWORD **)(a4 + 8);
    for (uint64_t i = *(_DWORD **)(a3 + 8); ; ++i)
    {
      unsigned int v18 = *v16 & *i;
      if (v18) {
        break;
      }
      uint64_t result = 0;
      ++v16;
      v15 += 32;
      if (v15 >= v14) {
        return result;
      }
    }
    uint64_t result = *(void *)(v12 + 8 * (__clz(__rbit32(v18)) + v15));
    if (result) {
      BOOL v19 = result == a3;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19)
    {
      if (*(unsigned __int16 *)(*(void *)result + 20) < a5) {
        return 0;
      }
      *(void *)(a1[3] + 16 * (a2 & 0x7FFFFFFF)) = result & 0xFFFFFFFFFFFFFFFBLL;
    }
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::constrainRegAttrs(uint64_t a1, int a2, int a3, unsigned int a4)
{
  if (a2 < 0 && (a2 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a1 + 432)) {
    uint64_t v6 = *(void *)(*(void *)(a1 + 424) + 8 * (a2 & 0x7FFFFFFF));
  }
  else {
    uint64_t v6 = 0;
  }
  if (a3 < 0 && (a3 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(a1 + 432)) {
    uint64_t v7 = *(void *)(*(void *)(a1 + 424) + 8 * (a3 & 0x7FFFFFFF));
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF9;
  if ((v6 & 0xFFFFFFFFFFFFFFF9) != 0 && v8 && v6 != v7) {
    return 0;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(v9 + 16 * (a3 & 0x7FFFFFFF));
  if (v10 >= 8)
  {
    uint64_t v17 = (unint64_t *)(v9 + 16 * (a2 & 0x7FFFFFFF));
    unint64_t v18 = *v17;
    if (*v17 <= 7)
    {
      *uint64_t v17 = v10;
      goto LABEL_11;
    }
    if (((v10 & 4) == 0) != ((*v17 & 4) == 0)) {
      return 0;
    }
    if ((v18 & 4) == 0)
    {
      uint64_t result = sub_1CC38D61C((void *)a1, a2, v18 & 0xFFFFFFFFFFFFFFF8, v10 & 0xFFFFFFFFFFFFFFF8, a4);
      if (!result) {
        return result;
      }
      goto LABEL_11;
    }
    if (v18 != v10) {
      return 0;
    }
  }
LABEL_11:
  if (v8)
  {
    int v11 = (void *)(a1 + 424);
    unint64_t v12 = a2 & 0x7FFFFFFF;
    unint64_t v13 = *(unsigned int *)(a1 + 432);
    BOOL v14 = v12 >= v13;
    unint64_t v15 = v12 - v13;
    if (v14)
    {
      sub_1CC38F7B8(a1 + 424, v15 + 1, *(void *)(a1 + 440));
      int v11 = (void *)(a1 + 424);
    }
    *(void *)(*v11 + 8 * v12) = v7;
  }
  return 1;
}

uint64_t llvm::MachineRegisterInfo::recomputeRegClass(void *a1, unsigned int a2)
{
  char v4 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 104))(*(void *)(*a1 + 16));
  unint64_t v5 = *(void *)(a1[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
  uint64_t v7 = (*(uint64_t (**)(void))(v6 + 256))();
  if (v7 == v5) {
    return 0;
  }
  uint64_t v16 = 16 * (a2 & 0x7FFFFFFF);
  uint64_t v17 = v7;
  if ((a2 & 0x80000000) != 0) {
    uint64_t v9 = (uint64_t *)(a1[3] + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v9 = (uint64_t *)(a1[34] + 8 * a2);
  }
  uint64_t v10 = *v9;
  if (*v9)
  {
    while ((*(_DWORD *)v10 & 0x80000000) != 0)
    {
      uint64_t v10 = *(void *)(v10 + 24);
      if (!v10) {
        goto LABEL_9;
      }
    }
LABEL_12:
    int v11 = *(llvm::MachineInstr **)(v10 + 8);
    uint64_t v12 = (unint64_t)(v10 - *((void *)v11 + 4)) >> 5;
    unint64_t v13 = (llvm::TargetRegisterInfo *)(*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
    uint64_t RegClassConstraintEffect = llvm::MachineInstr::getRegClassConstraintEffect(v11, v12, v17, v4, v13);
    uint64_t v17 = RegClassConstraintEffect;
    if (RegClassConstraintEffect) {
      BOOL v15 = RegClassConstraintEffect == v5;
    }
    else {
      BOOL v15 = 1;
    }
    if (v15) {
      return 0;
    }
    while (1)
    {
      uint64_t v10 = *(void *)(v10 + 24);
      if (!v10) {
        break;
      }
      if ((*(_DWORD *)v10 & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
  }
LABEL_9:
  *(void *)(a1[3] + v16) = v17 & 0xFFFFFFFFFFFFFFFBLL;
  return 1;
}

uint64_t llvm::MachineRegisterInfo::createIncompleteVirtualRegister(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6 = *(unsigned int *)(a1 + 32);
  uint64_t v7 = v6 & 0x7FFFFFFF;
  if ((v6 & 0x80000000) == 0)
  {
    long long v8 = *(_OWORD *)(a1 + 40);
    int v9 = *(_DWORD *)(a1 + 32);
    if (v7 >= *(_DWORD *)(a1 + 36)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v7 - v6 != -1)
    {
      uint64_t v10 = (_OWORD *)(*(void *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 32));
      uint64_t v11 = ~v7 + v6;
      do
      {
        *v10++ = v8;
        BOOL v12 = __CFADD__(v11++, 1);
      }
      while (!v12);
      int v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + v7 - v6 + 1;
  }
  uint64_t v13 = *(unsigned int *)(a1 + 216);
  unint64_t v14 = v7 + 1;
  uint64_t v15 = v7 + 1 - v13;
  if (v7 >= v13 && v7 + 1 != v13)
  {
    uint64_t v16 = (uint64_t *)(a1 + 208);
    uint64_t v17 = (char *)(a1 + 224);
    if (v7 >= *(_DWORD *)(a1 + 220))
    {
      uint64_t v22 = *v16;
      if (*v16 <= (unint64_t)v17 && v22 + 40 * (unint64_t)v13 > (unint64_t)v17)
      {
        BOOL v31 = &v17[-v22];
        sub_1CC38F628(a1 + 208, v14);
        uint64_t v17 = &v31[*v16];
      }
      else
      {
        sub_1CC38F628(a1 + 208, v14);
      }
    }
    unsigned int v18 = *(_DWORD *)(a1 + 216);
    if (!v15) {
      goto LABEL_19;
    }
    uint64_t v19 = *v16 + 40 * v18 + 24;
    uint64_t v20 = ~v7 + v13;
    do
    {
      *(_DWORD *)(v19 - 24) = *(_DWORD *)v17;
      *(void *)(v19 - 16) = v19;
      *(void *)(v19 - 8) = 0x400000000;
      if (*((_DWORD *)v17 + 4)) {
        sub_1CB927A18(v19 - 16, (uint64_t)(v17 + 8));
      }
      v19 += 40;
      BOOL v12 = __CFADD__(v20++, 1);
    }
    while (!v12);
LABEL_18:
    unsigned int v18 = *(_DWORD *)(a1 + 216);
LABEL_19:
    *(_DWORD *)(a1 + 216) = v18 + v15;
    goto LABEL_20;
  }
  if (v7 >= v13)
  {
    unint64_t v23 = v7 + 1;
    uint64_t v15 = v7 + 1 - v13;
    if (v7 + 1 != v13)
    {
      uint64_t v24 = (uint64_t *)(a1 + 208);
      int v25 = (char *)(a1 + 224);
      if (v7 >= *(_DWORD *)(a1 + 220))
      {
        uint64_t v30 = *v24;
        if (*v24 <= (unint64_t)v25 && v30 + 40 * (unint64_t)v13 > (unint64_t)v25)
        {
          unsigned int v32 = &v25[-v30];
          sub_1CC38F628(a1 + 208, v23);
          int v25 = &v32[*v24];
        }
        else
        {
          sub_1CC38F628(a1 + 208, v23);
        }
      }
      unsigned int v18 = *(_DWORD *)(a1 + 216);
      if (!v15) {
        goto LABEL_19;
      }
      uint64_t v26 = *v24 + 40 * v18 + 24;
      uint64_t v27 = ~v7 + v13;
      do
      {
        *(_DWORD *)(v26 - 24) = *(_DWORD *)v25;
        *(void *)(v26 - 16) = v26;
        *(void *)(v26 - 8) = 0x400000000;
        if (*((_DWORD *)v25 + 4)) {
          sub_1CB927A18(v26 - 16, (uint64_t)(v25 + 8));
        }
        v26 += 40;
        BOOL v12 = __CFADD__(v27++, 1);
      }
      while (!v12);
      goto LABEL_18;
    }
  }
LABEL_20:
  if (a3)
  {
    sub_1CC0D7F54((llvm::StringMapImpl *)(a1 + 112), a2, a3);
    if (v7 >= *(_DWORD *)(a1 + 72)) {
      sub_1CD548620(a1 + 64, v7 + 1, a1 + 80);
    }
    if (a2) {
      std::string::__init(&v33, (const std::string::value_type *)a2, a3);
    }
    else {
      memset(&v33, 0, sizeof(v33));
    }
    uint64_t v28 = *(void *)(a1 + 64) + 24 * v7;
    if (*(char *)(v28 + 23) < 0) {
      operator delete(*(void **)v28);
    }
    long long v29 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
    *(void *)(v28 + 16) = *((void *)&v33.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v28 = v29;
  }
  return v6 | 0x80000000;
}

uint64_t llvm::MachineRegisterInfo::createVirtualRegister(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, a3, a4);
  *(void *)(*(void *)(a1 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a2 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, IncompleteVirtualRegister);
  }
  return IncompleteVirtualRegister;
}

uint64_t llvm::MachineRegisterInfo::cloneVirtualRegister(uint64_t a1, int a2, unsigned __int8 *a3, size_t a4)
{
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, a3, a4);
  unint64_t v7 = a2 & 0x7FFFFFFF;
  uint64_t v8 = IncompleteVirtualRegister;
  unint64_t v9 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(a1 + 24) + 16 * v9) = *(void *)(*(void *)(a1 + 24) + 16 * v7);
  unint64_t v10 = *(unsigned int *)(a1 + 432);
  int v11 = *(_DWORD *)(a1 + 432);
  BOOL v12 = a2 >= 0 || v7 >= v10;
  char v13 = !v12;
  if ((v13 & 1) != 0 && v9 >= v10)
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 424) + 8 * v7);
    uint64_t v15 = *(void *)(a1 + 440);
    unint64_t v16 = v9 + 1 - v10;
    if (v9 >= *(unsigned int *)(a1 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (!v16) {
      goto LABEL_15;
    }
    uint64_t v17 = (void *)(*(void *)(a1 + 424) + 8 * *(unsigned int *)(a1 + 432));
    unint64_t v18 = ~v9 + v10;
    do
    {
      *v17++ = v15;
      BOOL v12 = __CFADD__(v18++, 1);
    }
    while (!v12);
    goto LABEL_14;
  }
  if (v13) {
    uint64_t v14 = *(void *)(*(void *)(a1 + 424) + 8 * v7);
  }
  else {
    uint64_t v14 = 0;
  }
  if (v9 < v10) {
    goto LABEL_16;
  }
  uint64_t v21 = *(void *)(a1 + 440);
  unint64_t v16 = v9 + 1 - v10;
  if (v9 >= *(unsigned int *)(a1 + 436)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v16)
  {
    uint64_t v22 = (void *)(*(void *)(a1 + 424) + 8 * *(unsigned int *)(a1 + 432));
    unint64_t v23 = ~v9 + v10;
    do
    {
      *v22++ = v21;
      BOOL v12 = __CFADD__(v23++, 1);
    }
    while (!v12);
LABEL_14:
    int v11 = *(_DWORD *)(a1 + 432);
  }
LABEL_15:
  *(_DWORD *)(a1 + 432) = v11 + v16;
LABEL_16:
  *(void *)(*(void *)(a1 + 424) + 8 * v9) = v14;
  uint64_t v19 = *(void *)(a1 + 8);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 24))(v19, v8);
  }
  return v8;
}

uint64_t llvm::MachineRegisterInfo::createGenericVirtualRegister(uint64_t a1, uint64_t a2, unsigned __int8 *a3, size_t a4)
{
  uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a1, a3, a4);
  unint64_t v7 = IncompleteVirtualRegister & 0x7FFFFFFF;
  *(void *)(*(void *)(a1 + 24) + 16 * v7) = 4;
  unint64_t v8 = *(unsigned int *)(a1 + 432);
  if (v7 >= v8)
  {
    uint64_t v9 = *(void *)(a1 + 440);
    uint64_t v10 = v7 + 1 - v8;
    if (v7 >= *(unsigned int *)(a1 + 436)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v11 = *(_DWORD *)(a1 + 432);
    if (v10)
    {
      BOOL v12 = (void *)(*(void *)(a1 + 424) + 8 * *(unsigned int *)(a1 + 432));
      uint64_t v13 = ~v7 + v8;
      do
        *v12++ = v9;
      while (!__CFADD__(v13++, 1));
      int v11 = *(_DWORD *)(a1 + 432);
    }
    *(_DWORD *)(a1 + 432) = v11 + v10;
  }
  *(void *)(*(void *)(a1 + 424) + 8 * v7) = a2;
  uint64_t v15 = *(void *)(a1 + 8);
  if (v15) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 24))(v15, IncompleteVirtualRegister);
  }
  return IncompleteVirtualRegister;
}

uint64_t llvm::MachineRegisterInfo::clearVirtRegTypes(uint64_t this)
{
  *(_DWORD *)(this + 432) = 0;
  return this;
}

uint64_t llvm::MachineRegisterInfo::clearVirtRegs(uint64_t this)
{
  *(_DWORD *)(this + 32) = 0;
  uint64_t v1 = *(void *)(this + 456);
  uint64_t v2 = *(void *)(this + 464);
  while (v1 != v2)
  {
    *(_DWORD *)(v1 + 4) = 0;
    v1 += 8;
  }
  return this;
}

uint64_t llvm::MachineRegisterInfo::addRegOperandToUseList(uint64_t this, llvm::MachineOperand *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 1);
  if ((v2 & 0x80000000) != 0) {
    char v3 = (uint64_t *)(*(void *)(this + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
  }
  else {
    char v3 = (uint64_t *)(*(void *)(this + 272) + 8 * v2);
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = a2;
    *((void *)a2 + 2) = v5;
    if (*((unsigned char *)a2 + 3))
    {
      *((void *)a2 + 3) = v4;
    }
    else
    {
      *((void *)a2 + 3) = 0;
      char v3 = (uint64_t *)(v5 + 24);
    }
  }
  else
  {
    *((void *)a2 + 2) = a2;
    *((void *)a2 + 3) = 0;
  }
  *char v3 = (uint64_t)a2;
  return this;
}

uint64_t llvm::MachineRegisterInfo::removeRegOperandFromUseList(uint64_t this, llvm::MachineOperand *a2)
{
  uint64_t v2 = *((unsigned int *)a2 + 1);
  if ((v2 & 0x80000000) != 0) {
    char v3 = (llvm::MachineOperand **)(*(void *)(this + 24) + 16 * (v2 & 0x7FFFFFFF) + 8);
  }
  else {
    char v3 = (llvm::MachineOperand **)(*(void *)(this + 272) + 8 * v2);
  }
  uint64_t v4 = *v3;
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v5 = (llvm::MachineOperand *)*((void *)a2 + 3);
  if (*v3 != a2) {
    char v3 = (llvm::MachineOperand **)(v6 + 24);
  }
  *char v3 = v5;
  if (v5) {
    unint64_t v7 = v5;
  }
  else {
    unint64_t v7 = v4;
  }
  *((void *)v7 + 2) = v6;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  return this;
}

uint64_t llvm::MachineRegisterInfo::moveOperands(uint64_t this, llvm::MachineOperand *a2, llvm::MachineOperand *a3, unsigned int a4)
{
  uint64_t v4 = -32;
  if (a2 >= a3 && (llvm::MachineOperand *)((char *)a3 + 32 * a4) > a2)
  {
    uint64_t v5 = a4 - 1;
  }
  else
  {
    uint64_t v4 = 32;
    uint64_t v5 = 0;
  }
  uint64_t v6 = 32 * v5;
  do
  {
    unint64_t v7 = (char *)a2 + v6;
    unint64_t v8 = (char *)a3 + v6;
    long long v9 = *(_OWORD *)((char *)a3 + v6 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)((char *)a3 + v6);
    *((_OWORD *)v7 + 1) = v9;
    if (!*((unsigned char *)a3 + v6))
    {
      uint64_t v10 = *((unsigned int *)v8 + 1);
      if ((v10 & 0x80000000) != 0) {
        int v11 = (char **)(*(void *)(this + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
      }
      else {
        int v11 = (char **)(*(void *)(this + 272) + 8 * v10);
      }
      BOOL v12 = *(char **)((char *)a3 + v6 + 24);
      if (v8 == *v11)
      {
        llvm::MachineInstr *v11 = v7;
        uint64_t v13 = (char *)a2 + v6;
      }
      else
      {
        *(void *)(*(void *)((char *)a3 + v6 + 16) + 24) = v7;
        uint64_t v13 = *v11;
      }
      if (v12) {
        uint64_t v13 = v12;
      }
      *((void *)v13 + 2) = v7;
    }
    v6 += v4;
    --a4;
  }
  while (a4);
  return this;
}

uint64_t llvm::MachineRegisterInfo::replaceRegWith(void *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
  if ((a2 & 0x80000000) != 0) {
    unint64_t v7 = (uint64_t *)(a1[3] + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v7 = (uint64_t *)(a1[34] + 8 * a2);
  }
  uint64_t result = *v7;
  if (*v7)
  {
    do
    {
      uint64_t v9 = *(void *)(result + 24);
      if (a3 - 1 <= 0x3FFFFFFE) {
        llvm::MachineOperand::substPhysReg((unsigned int *)result, a3, v6);
      }
      else {
        llvm::MachineOperand::setReg(result, a3);
      }
      uint64_t result = v9;
    }
    while (v9);
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::getVRegDef(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v3 = *v2;
  if (v3 && ((*(unsigned char *)(v3 + 3) & 1) != 0 || (uint64_t v3 = *(void *)(v3 + 24)) != 0 && (*(unsigned char *)(v3 + 3) & 1) != 0)) {
    return *(void *)(v3 + 8);
  }
  else {
    return 0;
  }
}

uint64_t llvm::MachineRegisterInfo::getUniqueVRegDef(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v3 = *v2;
  if (!v3) {
    return 0;
  }
  if ((*(unsigned char *)(v3 + 3) & 1) == 0)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
      return 0;
    }
  }
  if ((a2 & 0x80000000) != 0) {
    uint64_t v5 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v5 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v6 = *v5;
  if (v6)
  {
    if ((*(unsigned char *)(v6 + 3) & 1) == 0)
    {
      uint64_t v6 = *(void *)(v6 + 24);
      if (v6)
      {
        if ((*(unsigned char *)(v6 + 3) & 1) == 0) {
          uint64_t v6 = 0;
        }
      }
    }
  }
  uint64_t v7 = *(void *)(v6 + 8);
  while (1)
  {
    uint64_t v6 = *(void *)(v6 + 24);
    if (!v6 || (*(unsigned char *)(v6 + 3) & 1) == 0) {
      break;
    }
    uint64_t result = 0;
    if (*(void *)(v6 + 8) != v7) {
      return result;
    }
  }
  return v7;
}

BOOL llvm::MachineRegisterInfo::hasOneNonDBGUse(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v3 = *v2;
  if (!v3) {
    return 0;
  }
  if ((*(unsigned char *)(v3 + 3) & 0x81) != 0)
  {
    while (1)
    {
      uint64_t v3 = *(void *)(v3 + 24);
      if (!v3) {
        return 0;
      }
      if ((*(_DWORD *)v3 & 0x81000000) == 0) {
        goto LABEL_7;
      }
    }
  }
  do
  {
LABEL_7:
    uint64_t v3 = *(void *)(v3 + 24);
    BOOL result = v3 == 0;
  }
  while (v3 && (*(_DWORD *)v3 & 0x81000000) != 0);
  return result;
}

uint64_t llvm::MachineRegisterInfo::hasAtMostUserInstrs(uint64_t a1, unsigned int a2, int a3)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v4 = *v3;
  if (!v4)
  {
LABEL_10:
    BOOL v7 = a3 == -1;
LABEL_19:
    int v6 = v7;
    return v6 ^ 1u;
  }
  if ((*(unsigned char *)(v4 + 3) & 0x81) != 0)
  {
    do
    {
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        goto LABEL_10;
      }
    }
    while ((*(_DWORD *)v4 & 0x81000000) != 0);
  }
  int v5 = a3 + 1;
  if (a3 == -1)
  {
    int v6 = 1;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 8);
    while (2)
    {
      --v5;
      do
      {
        uint64_t v4 = *(void *)(v4 + 24);
        if (!v4)
        {
          BOOL v7 = v5 == 0;
          goto LABEL_19;
        }
      }
      while ((*(_DWORD *)v4 & 0x81000000) != 0 || *(void *)(v4 + 8) == v8);
      int v6 = 1;
      uint64_t v8 = *(void *)(v4 + 8);
      if (v5) {
        continue;
      }
      break;
    }
  }
  return v6 ^ 1u;
}

uint64_t llvm::MachineRegisterInfo::clearKillFlags(uint64_t result, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v2 = (unsigned int **)(*(void *)(result + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v2 = (unsigned int **)(*(void *)(result + 272) + 8 * a2);
  }
  uint64_t v3 = *v2;
  if (v3)
  {
    while (1)
    {
      unsigned int v4 = *v3;
      if ((*v3 & 0x1000000) == 0) {
        break;
      }
      uint64_t v3 = (unsigned int *)*((void *)v3 + 3);
      if (!v3) {
        return result;
      }
    }
LABEL_7:
    *uint64_t v3 = v4 & 0xFBFFFFFF;
    while (1)
    {
      uint64_t v3 = (unsigned int *)*((void *)v3 + 3);
      if (!v3) {
        break;
      }
      unsigned int v4 = *v3;
      if ((*v3 & 0x1000000) == 0) {
        goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::isLiveIn(uint64_t a1, int a2)
{
  uint64_t v2 = *(_DWORD **)(a1 + 456);
  uint64_t v3 = *(_DWORD **)(a1 + 464);
  if (v3 == v2) {
    return 0;
  }
  while (*v2 != a2 && v2[1] != a2)
  {
    v2 += 2;
    if (v2 == v3) {
      return 0;
    }
  }
  return 1;
}

uint64_t llvm::MachineRegisterInfo::getLiveInVirtReg(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 456);
  uint64_t v3 = *(void *)(a1 + 464) - v2;
  if (!v3) {
    return 0;
  }
  unsigned int v4 = (unsigned int *)(v2 + 4);
  uint64_t v5 = 8 * (v3 >> 3);
  while (*(v4 - 1) != a2)
  {
    v4 += 2;
    v5 -= 8;
    if (!v5) {
      return 0;
    }
  }
  return *v4;
}

BOOL sub_1CC38E61C(uint64_t a1, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v2 = (uint64_t *)(*(void *)(a1 + 272) + 8 * a2);
  }
  uint64_t v3 = *v2;
  if (!v3) {
    return 1;
  }
  if ((*(unsigned char *)(v3 + 3) & 0x81) == 0) {
    return 0;
  }
  do
  {
    uint64_t v3 = *(void *)(v3 + 24);
    BOOL result = v3 == 0;
  }
  while (v3 && (*(_DWORD *)v3 & 0x81000000) != 0);
  return result;
}

uint64_t llvm::MachineRegisterInfo::getMaxLaneMaskForVReg(uint64_t a1, int a2)
{
  return *(void *)((*(void *)(*(void *)(a1 + 24) + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24);
}

void llvm::MachineRegisterInfo::freezeReservedRegs(llvm::MachineRegisterInfo *this, const llvm::MachineFunction *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(*(void *)this + 16) + 176))(*(void *)(*(void *)this + 16));
  (*(void (**)(void **__return_ptr))(*(void *)v3 + 88))(&__src);
  unsigned int v4 = (void **)((char *)this + 352);
  uint64_t v5 = __src;
  if ((void **)((char *)this + 352) != &__src)
  {
    if (__src == v13)
    {
      int v6 = v12;
      uint64_t v7 = *((unsigned int *)this + 90);
      if (v7 < v12)
      {
        if (*((_DWORD *)this + 91) < v12)
        {
          *((_DWORD *)this + 90) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v10 = *((unsigned int *)this + 90);
          memmove(*v4, __src, 8 * v7);
          uint64_t v8 = v10;
          unsigned int v4 = (void **)((char *)this + 352);
        }
        else
        {
          uint64_t v8 = 0;
        }
        if (v8 != v12) {
          memcpy((char *)*v4 + 8 * v8, (char *)__src + 8 * v8, 8 * v12 - 8 * v8);
        }
      }
      else if (v12)
      {
        memmove(*v4, __src, 8 * v12);
      }
      *((_DWORD *)this + 90) = v6;
    }
    else
    {
      uint64_t v9 = (char *)*((void *)this + 44);
      if (v9 != (char *)this + 368)
      {
        free(v9);
        uint64_t v5 = __src;
      }
      *((void *)this + 44) = v5;
      *((void *)this + 45) = v12;
      uint64_t __src = v13;
      HIDWORD(v12) = 0;
    }
    LODWORD(v12) = 0;
    uint64_t v5 = __src;
  }
  *((_DWORD *)this + 104) = v13[12];
  if (v5 != v13) {
    free(v5);
  }
}

uint64_t llvm::MachineRegisterInfo::isConstantPhysReg(void *a1, unsigned int a2)
{
  unsigned int v4 = (void *)(*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
  if ((*(uint64_t (**)(void *, void))(*v4 + 112))(v4, a2)) {
    return 1;
  }
  uint64_t v6 = v4[1];
  unint64_t v7 = ((unint64_t)*(unsigned int *)(v6 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  uint64_t v9 = v4[6];
  uint64_t v8 = v4[7];
  uint64_t v10 = (_WORD *)(v8 + v7 + 2);
  int v11 = *(unsigned __int16 *)(v8 + v7) + (*(_DWORD *)(v6 + 24 * a2 + 16) & 0xF) * a2;
  uint64_t result = 1;
  while (!*(_WORD *)(v9 + 4 * (unsigned __int16)v11) || v8 == 0)
  {
    int v13 = (unsigned __int16)*v10++;
    v11 += v13;
    if (!v13) {
      return result;
    }
  }
  unsigned int v14 = *(unsigned __int16 *)(v9 + 4 * (unsigned __int16)v11 + 2) << 16;
  uint64_t v15 = (unsigned __int16 *)(v8
                           + 2
                           * *(unsigned int *)(v6 + 24 * *(unsigned __int16 *)(v9 + 4 * (unsigned __int16)v11) + 8));
  unsigned __int16 v16 = *(_WORD *)(v9 + 4 * (unsigned __int16)v11);
  while (1)
  {
    unsigned int v17 = v16;
    uint64_t v18 = *(void *)(a1[34] + 8 * v16);
    if (v18)
    {
      if (*(unsigned char *)(v18 + 3)) {
        break;
      }
      uint64_t v22 = *(void *)(v18 + 24);
      if (v22)
      {
        if (*(unsigned char *)(v22 + 3)) {
          break;
        }
      }
    }
    if (sub_1CB946A80(a1, v17)) {
      break;
    }
    int v19 = *v15++;
    unsigned __int16 v16 = v19 + v17;
    if (!v19)
    {
      unsigned int v20 = HIWORD(v14);
      if (HIWORD(v14))
      {
        v14 >>= 16;
      }
      else
      {
        if (!*v10) {
          return 1;
        }
        v11 += (unsigned __int16)*v10++;
        uint64_t v21 = (unsigned __int16 *)(v4[6] + 4 * (unsigned __int16)v11);
        unsigned int v20 = *v21;
        unsigned int v14 = v21[1] << 16;
      }
      unsigned __int16 v16 = v20;
      uint64_t v15 = (unsigned __int16 *)(v4[7] + 2 * *(unsigned int *)(v4[1] + 24 * v20 + 8));
    }
  }
  return 0;
}

uint64_t llvm::MachineRegisterInfo::markUsesInDebugValueAsUndef(uint64_t result, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v3 = (uint64_t *)(*(void *)(result + 272) + 8 * a2);
  }
  uint64_t v4 = *v3;
  if (*v3)
  {
    while ((*(unsigned char *)(v4 + 3) & 1) != 0)
    {
      uint64_t v4 = *(void *)(v4 + 24);
      if (!v4) {
        return result;
      }
    }
    do
    {
      while (1)
      {
        uint64_t result = *(void *)(v4 + 8);
        do
          uint64_t v4 = *(void *)(v4 + 24);
        while (v4 && ((*(unsigned char *)(v4 + 3) & 1) != 0 || *(void *)(v4 + 8) == result));
        int v5 = **(unsigned __int16 **)(result + 16);
        if ((v5 - 13) <= 1)
        {
          uint64_t v6 = *(void *)(result + 32);
          if (v5 != 14)
          {
            uint64_t v8 = v6 + 32;
            goto LABEL_17;
          }
          uint64_t v7 = *(unsigned int *)(result + 40);
          if (v7 != 2) {
            break;
          }
        }
LABEL_20:
        if (!v4) {
          return result;
        }
      }
      uint64_t v8 = v6 + 32 * v7;
      v6 += 64;
LABEL_17:
      while (*(unsigned char *)v6 || *(_DWORD *)(v6 + 4) != a2)
      {
        v6 += 32;
        if (v6 == v8) {
          goto LABEL_20;
        }
      }
      uint64_t result = sub_1CD5485A8(result);
    }
    while (v4);
  }
  return result;
}

uint64_t llvm::MachineRegisterInfo::isPhysRegModified(void *a1, unsigned int a2, char a3)
{
  if (((*(void *)(a1[35] + 8 * (a2 >> 6)) >> a2) & 1) == 0)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
    if (v6) {
      uint64_t v7 = (void *)(v6 + 8);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = v7[6];
    uint64_t v9 = (_WORD *)(v8 + (((unint64_t)*(unsigned int *)(*v7 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE));
    uint64_t v10 = (unsigned __int16)*v9 + (*(_DWORD *)(*v7 + 24 * a2 + 16) & 0xF) * a2;
    uint64_t result = 0;
    while (1)
    {
      ++v9;
      uint64_t v12 = (unsigned __int16 *)(v7[5] + 4 * (unsigned __int16)v10);
      uint64_t v13 = *v12;
      if (*v12) {
        break;
      }
LABEL_34:
      uint64_t v10 = (unsigned __int16)*v9 + v10;
      if (!*v9) {
        return result;
      }
    }
    int v14 = v12[1];
    int v15 = v14;
    while (!v8)
    {
      int v27 = v15;
      int v15 = 0;
      if (!v27) {
        goto LABEL_34;
      }
    }
    unsigned int v16 = v14 << 16;
    unsigned int v17 = (unsigned __int16 *)(v8 + 2 * *(unsigned int *)(*v7 + 24 * v13 + 8));
    uint64_t v18 = v13;
    uint64_t v19 = v10;
    while (1)
    {
      uint64_t v20 = *(void *)(a1[34] + 8 * (unsigned __int16)v18);
      if (v20)
      {
        if (*(unsigned char *)(v20 + 3)) {
          break;
        }
        uint64_t v20 = *(void *)(v20 + 24);
        if (v20)
        {
          if (*(unsigned char *)(v20 + 3)) {
            break;
          }
        }
      }
LABEL_11:
      int v22 = *v17++;
      int v21 = v22;
      if (v22)
      {
        uint64_t v18 = (v21 + v18);
      }
      else
      {
        uint64_t v23 = HIWORD(v16);
        if (v23)
        {
          v16 >>= 16;
        }
        else
        {
          if (!*v9) {
            return 0;
          }
          uint64_t v19 = (unsigned __int16)*v9++ + v19;
          uint64_t v24 = (unsigned __int16 *)(v7[5] + 4 * (unsigned __int16)v19);
          uint64_t v23 = *v24;
          unsigned int v16 = v24[1] << 16;
        }
        uint64_t v18 = v23;
        unsigned int v17 = (unsigned __int16 *)(v7[6] + 2 * *(unsigned int *)(*v7 + 24 * v23 + 8));
      }
      if (!v9) {
        return 0;
      }
    }
    if ((a3 & 1) == 0)
    {
      while (1)
      {
        uint64_t v25 = *(void *)(v20 + 8);
        if ((*(_WORD *)(v25 + 44) & 0xC) != 0 && (*(_WORD *)(v25 + 44) & 4) == 0)
        {
          uint64_t v37 = *(void *)(v20 + 8);
          uint64_t v39 = v20;
          unint64_t v41 = v9;
          unint64_t v43 = v7;
          unsigned int v45 = v16;
          uint64_t v47 = v18;
          uint64_t v49 = v17;
          BOOL hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle(v37, 128, 1);
          unsigned int v17 = v49;
          uint64_t v18 = v47;
          uint64_t v20 = v39;
          uint64_t v9 = v41;
          unsigned int v16 = v45;
          uint64_t v7 = v43;
          uint64_t v25 = v37;
          BOOL v29 = hasPropertyInBundle;
          uint64_t result = 1;
          if (!v29) {
            return result;
          }
        }
        else if ((*(unsigned char *)(*(void *)(v25 + 16) + 8) & 0x80) == 0)
        {
          return 1;
        }
        uint64_t v40 = v20;
        uint64_t v42 = v9;
        uint64_t v44 = v7;
        unsigned int v46 = v16;
        uint64_t v48 = v18;
        unint64_t v50 = v17;
        uint64_t v38 = v19;
        uint64_t v30 = v25;
        uint64_t v31 = *(void *)(v25 + 24);
        if (*(void *)(v31 + 88) != *(void *)(v31 + 96)) {
          break;
        }
        if (llvm::Function::hasFnAttribute(**(void **)(v31 + 32), 79)) {
          break;
        }
        uint64_t v32 = *(unsigned int *)(v30 + 40);
        if (!v32) {
          break;
        }
        uint64_t v33 = 32 * v32;
        unint64_t v34 = (uint64_t *)(*(void *)(v30 + 32) + 16);
        while (1)
        {
          if (*((unsigned char *)v34 - 16) == 10)
          {
            uint64_t v35 = *v34;
            if (*v34 && *(unsigned char *)(*v34 + 16) == 0) {
              break;
            }
          }
          v34 += 4;
          uint64_t result = 1;
          v33 -= 32;
          if (!v33) {
            return result;
          }
        }
        if (!llvm::Function::hasFnAttribute(*v34, 32)
          || !llvm::Function::hasFnAttribute(v35, 37))
        {
          break;
        }
        uint64_t v9 = v42;
        uint64_t v20 = *(void *)(v40 + 24);
        uint64_t v7 = v44;
        uint64_t v19 = v38;
        unsigned int v16 = v46;
        uint64_t v18 = v48;
        unsigned int v17 = v50;
        if (!v20 || (*(unsigned char *)(v20 + 3) & 1) == 0) {
          goto LABEL_11;
        }
      }
    }
  }
  return 1;
}

uint64_t llvm::MachineRegisterInfo::isPhysRegUsed(void *a1, unsigned int a2, char a3)
{
  if (a3 & 1) == 0 && ((*(void *)(a1[35] + 8 * (a2 >> 6)) >> a2)) {
    return 1;
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
  if (v5) {
    uint64_t v6 = (uint64_t *)(v5 + 8);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *v6;
  int v8 = *(_DWORD *)(*v6 + 24 * a2 + 16) & 0xF;
  unint64_t v9 = ((unint64_t)*(unsigned int *)(*v6 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  uint64_t v12 = v6 + 5;
  uint64_t v11 = v6[5];
  uint64_t v10 = v12[1];
  uint64_t v13 = (unsigned __int16 *)(v10 + v9);
  int v15 = *v13;
  int v14 = v13 + 1;
  int v16 = v15 + v8 * a2;
  do
  {
    unsigned __int16 v17 = *(_WORD *)(v11 + 4 * (unsigned __int16)v16);
    if (v17) {
      BOOL v18 = v10 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      unsigned int v19 = *(unsigned __int16 *)(v11 + 4 * (unsigned __int16)v16 + 2) << 16;
      uint64_t v20 = (unsigned __int16 *)(v10
                               + 2
                               * *(unsigned int *)(v7
                                                 + 24 * *(unsigned __int16 *)(v11 + 4 * (unsigned __int16)v16)
                                                 + 8));
      while (1)
      {
        uint64_t v21 = *(void *)(a1[34] + 8 * v17);
        if (v21)
        {
          if ((*(_DWORD *)v21 & 0x80000000) == 0) {
            return 1;
          }
          while (1)
          {
            uint64_t v21 = *(void *)(v21 + 24);
            if (!v21) {
              break;
            }
            uint64_t result = 1;
            if ((*(_DWORD *)v21 & 0x80000000) == 0) {
              return result;
            }
          }
        }
        int v23 = *v20++;
        __int16 v22 = v23;
        if (v23)
        {
          v17 += v22;
        }
        else
        {
          unsigned int v24 = HIWORD(v19);
          if (HIWORD(v19))
          {
            v19 >>= 16;
          }
          else
          {
            if (!*v14) {
              return 0;
            }
            v16 += (unsigned __int16)*v14++;
            uint64_t v25 = (unsigned __int16 *)(v11 + 4 * (unsigned __int16)v16);
            unsigned int v24 = *v25;
            unsigned int v19 = v25[1] << 16;
          }
          unsigned __int16 v17 = v24;
          uint64_t v20 = (unsigned __int16 *)(v10 + 2 * *(unsigned int *)(v7 + 24 * v24 + 8));
        }
        if (!v14) {
          return 0;
        }
      }
    }
    int v27 = (unsigned __int16)*v14++;
    v16 += v27;
  }
  while (v27);
  return 0;
}

uint64_t llvm::MachineRegisterInfo::disableCalleeSavedRegister(void *a1, unsigned int a2)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(*a1 + 16) + 176))(*(void *)(*a1 + 16));
  uint64_t v5 = result;
  if (!*((unsigned char *)a1 + 144))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)result + 32))(result, *a1);
    __int16 v6 = *(_WORD *)result;
    if (*(_WORD *)result)
    {
      uint64_t v7 = a1[20];
      int v8 = (unsigned __int16 *)(result + 2);
      do
      {
        if ((unint64_t)(v7 + 1) > a1[21]) {
          llvm::SmallVectorBase<unsigned long long>::grow_pod();
        }
        *(_WORD *)(a1[19] + 2 * v7) = v6;
        uint64_t v7 = a1[20] + 1;
        a1[20] = v7;
        int v9 = *v8++;
        __int16 v6 = v9;
      }
      while (v9);
    }
    else
    {
      uint64_t v7 = a1[20];
    }
    if ((unint64_t)(v7 + 1) > a1[21]) {
      llvm::SmallVectorBase<unsigned long long>::grow_pod();
    }
    *(_WORD *)(a1[19] + 2 * v7) = 0;
    ++a1[20];
    *((unsigned char *)a1 + 144) = 1;
  }
  if (v5) {
    uint64_t v10 = (uint64_t *)(v5 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *v10;
  int v12 = *(_DWORD *)(*v10 + 24 * a2 + 16) & 0xF;
  unint64_t v13 = ((unint64_t)*(unsigned int *)(*v10 + 24 * a2 + 16) >> 3) & 0x1FFFFFFE;
  int v16 = v10 + 5;
  uint64_t v15 = v10[5];
  uint64_t v14 = v16[1];
  unsigned __int16 v17 = (unsigned __int16 *)(v14 + v13);
  int v19 = *v17;
  BOOL v18 = v17 + 1;
  int v20 = v19 + v12 * a2;
  do
  {
    LOWORD(v21) = *(_WORD *)(v15 + 4 * (unsigned __int16)v20);
    if ((_WORD)v21) {
      BOOL v22 = v14 == 0;
    }
    else {
      BOOL v22 = 1;
    }
    if (!v22)
    {
      unsigned int v24 = *(unsigned __int16 *)(v15 + 4 * (unsigned __int16)v20 + 2) << 16;
      uint64_t v25 = (unsigned __int16 *)(v14
                               + 2
                               * *(unsigned int *)(v11
                                                 + 24 * *(unsigned __int16 *)(v15 + 4 * (unsigned __int16)v20)
                                                 + 8));
      uint64_t v26 = (_WORD *)a1[19];
      uint64_t result = a1[20];
      while (1)
      {
        uint64_t v27 = 2 * result;
        uint64_t v28 = &v26[result];
        if (result)
        {
          uint64_t v29 = 2 * result;
          uint64_t v30 = v26;
          while ((unsigned __int16)*v30 != (unsigned __int16)v21)
          {
            ++v30;
            v29 -= 2;
            if (!v29)
            {
              uint64_t v30 = &v26[result];
              break;
            }
          }
        }
        else
        {
          uint64_t v30 = v26;
        }
        uint64_t v31 = v30 - v26;
        if (v31 != result)
        {
          uint64_t v32 = v30 + 1;
          if (v30 + 1 != v28)
          {
            uint64_t v33 = v27 - 2 * v31 - 2;
            do
            {
              int v34 = *v32;
              if (v34 != (unsigned __int16)v21) {
                *v30++ = v34;
              }
              ++v32;
              v33 -= 2;
            }
            while (v33);
          }
        }
        uint64_t result = v30 - v26;
        int v36 = *v25++;
        __int16 v35 = v36;
        if (v36)
        {
          LOWORD(v21) = v35 + v21;
        }
        else
        {
          unsigned int v21 = HIWORD(v24);
          if (HIWORD(v24))
          {
            v24 >>= 16;
          }
          else
          {
            if (!*v18)
            {
LABEL_43:
              a1[20] = result;
              return result;
            }
            v20 += (unsigned __int16)*v18++;
            uint64_t v37 = (unsigned __int16 *)(v15 + 4 * (unsigned __int16)v20);
            unsigned int v21 = *v37;
            unsigned int v24 = v37[1] << 16;
          }
          uint64_t v25 = (unsigned __int16 *)(v14 + 2 * *(unsigned int *)(v11 + 24 * v21 + 8));
        }
        if (!v18) {
          goto LABEL_43;
        }
      }
    }
    int v23 = (unsigned __int16)*v18++;
    v20 += v23;
  }
  while (v23);
  return result;
}

uint64_t llvm::MachineRegisterInfo::getCalleeSavedRegs(llvm::MachineRegisterInfo *this)
{
  if (*((unsigned char *)this + 144)) {
    return *((void *)this + 19);
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)this + 16) + 176))(*(void *)(*(void *)this + 16))
                           + 32);

  return v1();
}

void *llvm::MachineRegisterInfo::setCalleeSavedRegs(void *result, void *__src, uint64_t a3)
{
  uint64_t v4 = result;
  if (*((unsigned char *)result + 144))
  {
    uint64_t v5 = 0;
    result[20] = 0;
  }
  else
  {
    uint64_t v5 = result[20];
  }
  if (result[21] < (unint64_t)(v5 + ((2 * a3) >> 1))) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  if (a3)
  {
    uint64_t result = memcpy((void *)(result[19] + 2 * v5), __src, 2 * a3);
    uint64_t v5 = v4[20];
  }
  uint64_t v6 = v5 + ((2 * a3) >> 1);
  v4[20] = v6;
  if ((unint64_t)(v6 + 1) > v4[21]) {
    llvm::SmallVectorBase<unsigned long long>::grow_pod();
  }
  *(_WORD *)(v4[19] + 2 * v6) = 0;
  ++v4[20];
  *((unsigned char *)v4 + 144) = 1;
  return result;
}

uint64_t llvm::MachineRegisterInfo::isReservedRegUnit(llvm::MachineRegisterInfo *this, unsigned int a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(*(void *)this + 16) + 176))(*(void *)(*(void *)this + 16));
  if (v4) {
    uint64_t v5 = (uint64_t *)(v4 + 8);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5[5];
  uint64_t v7 = 4 * a2;
  unsigned int v8 = *(unsigned __int16 *)(v6 + v7);
  if (!*(_WORD *)(v6 + v7)) {
    return 0;
  }
  uint64_t v9 = v5[6];
  if (!v9) {
    return 1;
  }
  uint64_t v10 = *v5;
  unsigned int v11 = *(unsigned __int16 *)(v6 + 4 * a2 + 2);
  do
  {
    unsigned int v12 = v8;
    unsigned int v13 = (unsigned __int16)v8;
    unsigned int v8 = v11;
    uint64_t v14 = (unsigned __int16 *)(v9 + 2 * *(unsigned int *)(v10 + 24 * v13 + 8));
    while (((*(void *)(*((void *)this + 44) + ((v12 >> 3) & 0x1FF8)) >> v12) & 1) != 0)
    {
      int v15 = *v14++;
      v12 += v15;
      if (!v15) {
        return 1;
      }
    }
    unsigned int v11 = 0;
    uint64_t result = 0;
  }
  while ((_WORD)v8);
  return result;
}

uint64_t llvm::MachineRegisterInfo::isArgumentRegister(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 16) + 176))(*(void *)(*(void *)a1 + 16))
                           + 152);

  return v1();
}

uint64_t llvm::MachineRegisterInfo::isFixedRegister(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 16) + 176))(*(void *)(*(void *)a1 + 16))
                           + 160);

  return v1();
}

uint64_t llvm::MachineRegisterInfo::isGeneralPurposeRegister(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 16) + 176))(*(void *)(*(void *)a1 + 16))
                           + 168);

  return v1();
}

void sub_1CC38F628(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(40 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  sub_1CC38F6E4((uint64_t *)a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CC38F6E4(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *a1;
    uint64_t v7 = *a1 + 40 * v2;
    do
    {
      uint64_t v8 = a2 + v5;
      uint64_t v9 = v6 + v5;
      *(_DWORD *)uint64_t v8 = *(_DWORD *)(v6 + v5);
      *(void *)(v8 + 16) = 0x400000000;
      *(void *)(v8 + 8) = a2 + v5 + 24;
      if (*(_DWORD *)(v6 + v5 + 16)) {
        sub_1CB927804(a2 + v5 + 8, v9 + 8);
      }
      v5 += 40;
    }
    while (v9 + 40 != v7);
    uint64_t v10 = *((unsigned int *)a1 + 2);
    if (v10)
    {
      uint64_t v11 = *a1;
      uint64_t v12 = 40 * v10;
      do
      {
        unsigned int v13 = *(void **)(v11 + v12 - 32);
        if ((void *)(v11 + v12 - 16) != v13) {
          free(v13);
        }
        v12 -= 40;
      }
      while (v12);
    }
  }
}

uint64_t sub_1CC38F7B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 + a2 > (unint64_t)*(unsigned int *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    unint64_t v4 = (void *)(*(void *)result + 8 * v3);
    uint64_t v5 = a2;
    do
    {
      *v4++ = a3;
      --v5;
    }
    while (v5);
    LODWORD(v3) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v3 + a2;
  return result;
}

uint64_t sub_1CC38F838()
{
  int v4 = 1;
  char v2 = 1;
  uint64_t v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable subregister liveness tracking.";
  v1.n128_u64[1] = 37;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCCFC00, "enable-subreg-liveness", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCFC00, &dword_1CB82C000);
}

void llvm::MachineSchedContext::MachineSchedContext(llvm::MachineSchedContext *this)
{
  *(void *)this = &unk_1F260F260;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  operator new();
}

{
  *(void *)this = &unk_1F260F260;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  operator new();
}

void llvm::MachineSchedContext::~MachineSchedContext(llvm::MachineSchedContext *this)
{
  *(void *)this = &unk_1F260F260;
  __n128 v1 = (uint64_t *)*((void *)this + 7);
  if (v1)
  {
    char v2 = sub_1CD50C1C0(v1);
    MEMORY[0x1D25D9CE0](v2, 0x10F0C4030087745);
  }
}

{
  uint64_t *v1;
  uint64_t *v2;

  *(void *)this = &unk_1F260F260;
  __n128 v1 = (uint64_t *)*((void *)this + 7);
  if (v1)
  {
    char v2 = sub_1CD50C1C0(v1);
    MEMORY[0x1D25D9CE0](v2, 0x10F0C4030087745);
  }
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F260F260;
  __n128 v1 = (uint64_t *)*((void *)this + 7);
  if (v1)
  {
    char v2 = sub_1CD50C1C0(v1);
    MEMORY[0x1D25D9CE0](v2, 0x10F0C4030087745);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC38FAA0(llvm *a1, llvm::PassRegistry *a2)
{
}

void sub_1CC38FB60(llvm *a1)
{
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeAAResultsWrapperPassPass(a1, v2);
  operator new();
}

uint64_t sub_1CC38FC10()
{
  return 0;
}

void llvm::ScheduleDAGMI::~ScheduleDAGMI(llvm::ScheduleDAGMI *this)
{
  *(void *)this = &unk_1F260F9B0;
  uint64_t v3 = (void **)((char *)this + 2656);
  sub_1CC291398(&v3);
  uint64_t v2 = *((void *)this + 331);
  *((void *)this + 331) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  sub_1CC29121C((uint64_t)this);
}

{
  uint64_t vars8;

  llvm::ScheduleDAGMI::~ScheduleDAGMI(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::ScheduleDAGMI::releaseSuccessors(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 120);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(a2 + 112);
    uint64_t v6 = 16 * v2;
    do
    {
      uint64_t result = llvm::ScheduleDAGMI::releaseSucc(v4, a2, v5);
      v5 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::ScheduleDAGMI::releasePred(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (_DWORD *)(*(void *)a3 & 0xFFFFFFFFFFFFFFF8);
  if ((~*(_DWORD *)a3 & 6) != 0 || *(_DWORD *)(a3 + 8) < 4u)
  {
    unsigned int v5 = *(_DWORD *)(a3 + 12) + *(_DWORD *)(a2 + 252);
    if (v4[63] < v5) {
      v4[63] = v5;
    }
    int v6 = v4[53] - 1;
    v4[53] = v6;
    if (v6) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = result + 72 == (void)v4;
    }
    if (!v7) {
      return (*(uint64_t (**)(void))(**(void **)(result + 2648) + 128))();
    }
  }
  else
  {
    --v4[55];
    if (*(_DWORD *)(a3 + 8) == 5) {
      *(void *)(result + 2696) = v4;
    }
  }
  return result;
}

uint64_t llvm::ScheduleDAGMI::releasePredecessors(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 40);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)(a2 + 32);
    uint64_t v6 = 16 * v2;
    do
    {
      uint64_t result = llvm::ScheduleDAGMI::releasePred(v4, a2, v5);
      v5 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::ScheduleDAGMI::startBlock(llvm::ScheduleDAGMI *this, llvm::MachineBasicBlock *a2)
{
  *((void *)this + 115) = a2;
  return (*(uint64_t (**)(void))(**((void **)this + 331) + 72))();
}

uint64_t llvm::ScheduleDAGMI::finishBlock(llvm::ScheduleDAGMI *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 331) + 80))(*((void *)this + 331));
  *((void *)this + 115) = 0;
  return result;
}

void llvm::ScheduleDAGMI::moveInstruction(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  if (a1[116] == a2)
  {
    if (!a2 || (uint64_t v7 = a2, (*(unsigned char *)a2 & 4) == 0))
    {
      uint64_t v7 = a2;
      if ((*(_WORD *)(a2 + 44) & 8) != 0)
      {
        uint64_t v7 = a2;
        do
          uint64_t v7 = *(void *)(v7 + 8);
        while ((*(_WORD *)(v7 + 44) & 8) != 0);
      }
    }
    a1[116] = *(void *)(v7 + 8);
  }
  sub_1CB9173F0(a1[115], a3, a1[115], (unint64_t *)a2);
  uint64_t v6 = (llvm::LiveIntervals *)a1[330];
  if (v6) {
    llvm::LiveIntervals::handleMove(v6, (llvm::MachineInstr *)a2, 1);
  }
  if ((unint64_t *)a1[116] == a3) {
    a1[116] = a2;
  }
}

uint64_t llvm::ScheduleDAGMI::checkSchedLimit(llvm::ScheduleDAGMI *this)
{
  return 1;
}

uint64_t llvm::ScheduleDAGMI::postprocessDAG(uint64_t this)
{
  __n128 v1 = *(uint64_t **)(this + 2656);
  uint64_t v2 = *(uint64_t **)(this + 2664);
  if (v1 != v2)
  {
    uint64_t v3 = this;
    do
    {
      uint64_t v4 = *v1++;
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, v3);
    }
    while (v1 != v2);
  }
  return this;
}

double llvm::ScheduleDAGMI::findRootsAndBiasEdges(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (llvm::SUnit *)a1[6];
  uint64_t v5 = (llvm::SUnit *)a1[7];
  if (v4 != v5)
  {
    uint64_t v8 = (llvm::SUnit *)a1[6];
    do
    {
      llvm::SUnit::biasCriticalPath(v8);
      if (!*((_DWORD *)v8 + 52))
      {
        unint64_t v9 = *(unsigned int *)(a2 + 8);
        if (v9 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a2 + 8 * v9) = v4;
        ++*(_DWORD *)(a2 + 8);
      }
      if (!*((_DWORD *)v8 + 53))
      {
        unint64_t v10 = *(unsigned int *)(a3 + 8);
        if (v10 >= *(unsigned int *)(a3 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a3 + 8 * v10) = v4;
        ++*(_DWORD *)(a3 + 8);
      }
      uint64_t v4 = (llvm::SUnit *)((char *)v4 + 272);
      uint64_t v8 = (llvm::SUnit *)((char *)v8 + 272);
    }
    while (v8 != v5);
  }

  *(void *)&double result = llvm::SUnit::biasCriticalPath((llvm::SUnit *)(a1 + 43)).n128_u64[0];
  return result;
}

uint64_t llvm::ScheduleDAGMI::initQueues(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)(a1 + 2696);
  *(_OWORD *)(a1 + 2696) = 0u;
  if (a3)
  {
    uint64_t v10 = 8 * a3;
    do
    {
      uint64_t v11 = *a2++;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 2648) + 120))(*(void *)(a1 + 2648), v11);
      v10 -= 8;
    }
    while (v10);
  }
  if (a5)
  {
    uint64_t v12 = 8 * a5;
    uint64_t v13 = a4 - 8;
    do
    {
      (*(void (**)(void, void))(**(void **)(a1 + 2648) + 128))(*(void *)(a1 + 2648), *(void *)(v13 + v12));
      v12 -= 8;
    }
    while (v12);
  }
  uint64_t v14 = *(unsigned int *)(a1 + 192);
  if (v14)
  {
    uint64_t v29 = *(void *)(a1 + 184);
    uint64_t v30 = 16 * v14;
    do
    {
      llvm::ScheduleDAGMI::releaseSucc(a1, a1 + 72, v29);
      v29 += 16;
      v30 -= 16;
    }
    while (v30);
  }
  uint64_t v15 = *(unsigned int *)(a1 + 384);
  if (v15)
  {
    uint64_t v16 = 16 * v15;
    unsigned __int16 v17 = (_DWORD *)(*(void *)(a1 + 376) + 8);
    do
    {
      BOOL v18 = (_DWORD *)(*((void *)v17 - 1) & 0xFFFFFFFFFFFFFFF8);
      if ((~*(v17 - 2) & 6) != 0 || *v17 < 4u)
      {
        unsigned int v19 = v17[1] + *(_DWORD *)(a1 + 596);
        if (v18[63] < v19) {
          v18[63] = v19;
        }
        int v20 = v18[53] - 1;
        v18[53] = v20;
        if (v20) {
          BOOL v21 = 1;
        }
        else {
          BOOL v21 = a1 + 72 == (void)v18;
        }
        if (!v21) {
          (*(void (**)(void))(**(void **)(a1 + 2648) + 128))(*(void *)(a1 + 2648));
        }
      }
      else
      {
        --v18[55];
        if (*v17 == 5) {
          *uint64_t v8 = v18;
        }
      }
      v17 += 4;
      v16 -= 16;
    }
    while (v16);
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 2648) + 88))(*(void *)(a1 + 2648));
  uint64_t v23 = *(void *)(a1 + 928);
  uint64_t v24 = *(void *)(a1 + 936);
  if (v23 != v24)
  {
    while (1)
    {
      unsigned int v25 = **(unsigned __int16 **)(v23 + 16);
      BOOL v26 = v25 > 0x17;
      int v27 = (1 << v25) & 0x83E000;
      if (v26 || v27 == 0) {
        break;
      }
      if ((*(unsigned char *)v23 & 4) == 0)
      {
        while ((*(_WORD *)(v23 + 44) & 8) != 0)
          uint64_t v23 = *(void *)(v23 + 8);
      }
      uint64_t v23 = *(void *)(v23 + 8);
      if (v23 == v24)
      {
        uint64_t v23 = *(void *)(a1 + 936);
        break;
      }
    }
  }
  *(void *)(a1 + 2680) = v23;
  *(void *)(a1 + 2688) = v24;
  return result;
}

unint64_t sub_1CC3902EC(unint64_t result, uint64_t a2)
{
  while (1)
  {
    uint64_t result = *(void *)result & 0xFFFFFFFFFFFFFFF8;
    if (!result || (*(unsigned char *)result & 4) == 0)
    {
      while ((*(_WORD *)(result + 44) & 4) != 0)
        uint64_t result = *(void *)result & 0xFFFFFFFFFFFFFFF8;
    }
    if (result == a2) {
      break;
    }
    int v2 = **(unsigned __int16 **)(result + 16);
    if ((v2 - 13) >= 5 && v2 != 23) {
      return result;
    }
  }
  return a2;
}

uint64_t llvm::ScheduleDAGMI::updateQueues(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4 = result;
  if (a3)
  {
    uint64_t v13 = *(unsigned int *)(a2 + 120);
    if (v13)
    {
      uint64_t v14 = *(void *)(a2 + 112);
      uint64_t v15 = 16 * v13;
      do
      {
        uint64_t result = llvm::ScheduleDAGMI::releaseSucc(v4, a2, v14);
        v14 += 16;
        v15 -= 16;
      }
      while (v15);
    }
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a2 + 40);
    if (v5)
    {
      uint64_t v6 = (_DWORD *)(result + 72);
      uint64_t v7 = 16 * v5;
      uint64_t v8 = (_DWORD *)(*(void *)(a2 + 32) + 8);
      do
      {
        unint64_t v9 = (_DWORD *)(*((void *)v8 - 1) & 0xFFFFFFFFFFFFFFF8);
        if ((~*(v8 - 2) & 6) != 0 || *v8 < 4u)
        {
          unsigned int v10 = v8[1] + *(_DWORD *)(a2 + 252);
          if (v9[63] < v10) {
            v9[63] = v10;
          }
          int v11 = v9[53] - 1;
          v9[53] = v11;
          if (v11) {
            BOOL v12 = 1;
          }
          else {
            BOOL v12 = v6 == v9;
          }
          if (!v12) {
            uint64_t result = (*(uint64_t (**)(void))(**(void **)(v4 + 2648) + 128))(*(void *)(v4 + 2648));
          }
        }
        else
        {
          --v9[55];
          if (*v8 == 5) {
            *(void *)(v4 + 2696) = v9;
          }
        }
        v8 += 4;
        v7 -= 16;
      }
      while (v7);
    }
  }
  *(_WORD *)(a2 + 228) |= 0x400u;
  return result;
}

uint64_t llvm::ScheduleDAGMI::placeDebugValues(uint64_t this)
{
  __n128 v1 = (uint64_t *)this;
  int v2 = *(unint64_t **)(this + 2560);
  if (v2)
  {
    this = sub_1CB9173F0(*(void *)(this + 920), *(unint64_t **)(this + 928), *(void *)(this + 920), v2);
    v1[116] = v1[320];
  }
  uint64_t v3 = v1[318];
  uint64_t v4 = v1[317];
  while (v3 != v4)
  {
    uint64_t v5 = *(void *)(v3 - 16);
    uint64_t v6 = *(void *)(v3 - 8);
    v3 -= 16;
    if (v1[116] == v5)
    {
      if (!v5 || (uint64_t v10 = v5, (*(unsigned char *)v5 & 4) == 0))
      {
        uint64_t v10 = v5;
        if ((*(_WORD *)(v5 + 44) & 8) != 0)
        {
          uint64_t v10 = v5;
          do
            uint64_t v10 = *(void *)(v10 + 8);
          while ((*(_WORD *)(v10 + 44) & 8) != 0);
        }
      }
      v1[116] = *(void *)(v10 + 8);
    }
    if (v6 && (*(unsigned char *)v6 & 4) != 0 || (*(_WORD *)(v6 + 44) & 8) == 0)
    {
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = v6;
      do
        uint64_t v7 = *(void *)(v7 + 8);
      while ((*(_WORD *)(v7 + 44) & 8) != 0);
    }
    this = sub_1CB9173F0(v1[115], *(unint64_t **)(v7 + 8), v1[115], (unint64_t *)v5);
    uint64_t v8 = v1[117];
    if (v8 != v1[115] + 48 && v6 == v8) {
      v1[117] = v5;
    }
  }
  return this;
}

void llvm::ScheduleDAGMILive::~ScheduleDAGMILive(llvm::ScheduleDAGMILive *this)
{
  *(void *)this = &unk_1F260FAE8;
  int v2 = (void *)*((void *)this + 340);
  if (v2)
  {
    int v27 = (void *)v2[25];
    if (v27)
    {
      v2[26] = v27;
      operator delete(v27);
    }
    uint64_t v28 = v2[22];
    if (v28)
    {
      uint64_t v29 = v2[23];
      uint64_t v30 = (void *)v2[22];
      if (v29 != v28)
      {
        do
        {
          uint64_t v32 = *(void **)(v29 - 48);
          v29 -= 48;
          uint64_t v31 = v32;
          if ((void *)(v29 + 16) != v32) {
            free(v31);
          }
        }
        while (v29 != v28);
        uint64_t v30 = (void *)v2[22];
      }
      v2[23] = v28;
      operator delete(v30);
    }
    uint64_t v33 = (void *)v2[4];
    if (v33 != v2 + 6) {
      free(v33);
    }
    int v34 = (void *)v2[1];
    if (v34)
    {
      v2[2] = v34;
      operator delete(v34);
    }
    MEMORY[0x1D25D9CE0](v2, 0x10B0C402270A63DLL);
  }
  uint64_t v3 = (void *)*((void *)this + 646);
  if (v3)
  {
    *((void *)this + 647) = v3;
    operator delete(v3);
  }
  free(*((void **)this + 644));
  uint64_t v4 = (char *)*((void *)this + 638);
  if (v4 != (char *)this + 5120) {
    free(v4);
  }
  free(*((void **)this + 635));
  uint64_t v5 = (char *)*((void *)this + 617);
  if (v5 != (char *)this + 4952) {
    free(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 614);
  if (v6)
  {
    *((void *)this + 615) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (char *)*((void *)this + 585);
  if (v7 != (char *)this + 4696) {
    free(v7);
  }
  uint64_t v8 = (char *)*((void *)this + 567);
  if (v8 != (char *)this + 4552) {
    free(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 564);
  if (v9)
  {
    *((void *)this + 565) = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)*((void *)this + 561);
  if (v10)
  {
    *((void *)this + 562) = v10;
    operator delete(v10);
  }
  free(*((void **)this + 559));
  int v11 = (char *)*((void *)this + 553);
  if (v11 != (char *)this + 4440) {
    free(v11);
  }
  free(*((void **)this + 550));
  BOOL v12 = (char *)*((void *)this + 532);
  if (v12 != (char *)this + 4272) {
    free(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 529);
  if (v13)
  {
    *((void *)this + 530) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (char *)*((void *)this + 500);
  if (v14 != (char *)this + 4016) {
    free(v14);
  }
  uint64_t v15 = (char *)*((void *)this + 482);
  if (v15 != (char *)this + 3872) {
    free(v15);
  }
  uint64_t v16 = (void *)*((void *)this + 479);
  if (v16)
  {
    *((void *)this + 480) = v16;
    operator delete(v16);
  }
  unsigned __int16 v17 = (void *)*((void *)this + 476);
  if (v17)
  {
    *((void *)this + 477) = v17;
    operator delete(v17);
  }
  BOOL v18 = (void *)*((void *)this + 473);
  if (v18)
  {
    *((void *)this + 474) = v18;
    operator delete(v18);
  }
  free(*((void **)this + 471));
  unsigned int v19 = (char *)*((void *)this + 465);
  if (v19 != (char *)this + 3736) {
    free(v19);
  }
  free(*((void **)this + 462));
  int v20 = (char *)*((void *)this + 444);
  if (v20 != (char *)this + 3568) {
    free(v20);
  }
  BOOL v21 = (void *)*((void *)this + 441);
  if (v21)
  {
    *((void *)this + 442) = v21;
    operator delete(v21);
  }
  BOOL v22 = (char *)*((void *)this + 412);
  if (v22 != (char *)this + 3312) {
    free(v22);
  }
  uint64_t v23 = (char *)*((void *)this + 394);
  if (v23 != (char *)this + 3168) {
    free(v23);
  }
  uint64_t v24 = (void *)*((void *)this + 391);
  if (v24)
  {
    *((void *)this + 392) = v24;
    operator delete(v24);
  }
  free(*((void **)this + 388));
  free(*((void **)this + 385));
  unsigned int v25 = (char *)*((void *)this + 351);
  if (v25 != (char *)this + 2824) {
    free(v25);
  }
  BOOL v26 = (char *)*((void *)this + 341);
  if (v26 != (char *)this + 2744) {
    free(v26);
  }

  llvm::ScheduleDAGMI::~ScheduleDAGMI(this);
}

{
  uint64_t vars8;

  llvm::ScheduleDAGMILive::~ScheduleDAGMILive(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t llvm::ScheduleDAGMILive::collectVRegUses(uint64_t this, llvm::SUnit *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  uint64_t v3 = *(unsigned int *)(v2 + 40);
  if (v3)
  {
    uint64_t v5 = this;
    uint64_t v6 = *(_DWORD **)(v2 + 32);
    uint64_t v7 = &v6[8 * v3];
    uint64_t v8 = (uint64_t *)(this + 2808);
    do
    {
      if ((*v6 & 0x300000FF) == 0 && (*v6 & 0x10FFF00) != 0x1000000)
      {
        if (*(unsigned char *)(v5 + 914))
        {
          if ((*v6 & 0x1000000) == 0)
          {
            int v10 = v6[1];
            if (v10 < 0)
            {
              uint64_t v11 = *(unsigned int *)(v2 + 40);
              if (v11)
              {
                uint64_t v12 = 32 * v11;
                uint64_t v13 = (_DWORD *)(*(void *)(v2 + 32) + 4);
                do
                {
                  int v14 = *(v13 - 1);
                  if ((v14 & 0x10000FF) == 0x1000000 && (~v14 & 0x5000000) != 0 && *v13 == v10) {
                    goto LABEL_8;
                  }
                  v13 += 8;
                  v12 -= 32;
                }
                while (v12);
              }
LABEL_24:
              unsigned int v16 = *(unsigned __int8 *)(*(void *)(v5 + 3080) + (v10 & 0x7FFFFFFF));
              unsigned int v17 = *(_DWORD *)(v5 + 2816);
              if (v17 <= v16)
              {
LABEL_33:
                LODWORD(v21) = v10;
                *((void *)&v21 + 1) = 0;
                BOOL v22 = a2;
                this = sub_1CC390AA0((uint64_t)v8, &v21);
              }
              else
              {
                uint64_t v18 = *v8;
                while (1)
                {
                  if ((*(_DWORD *)(v18 + 32 * v16) & 0x7FFFFFFF) == (v10 & 0x7FFFFFFF))
                  {
                    uint64_t v19 = *(unsigned int *)(v18 + 32 * v16 + 24);
                    if (v19 != -1 && *(_DWORD *)(v18 + 32 * v19 + 28) == -1) {
                      break;
                    }
                  }
                  v16 += 256;
                  if (v16 >= v17) {
                    goto LABEL_33;
                  }
                }
                while (1)
                {
                  uint64_t v20 = v18 + 32 * v16;
                  if (*(llvm::SUnit **)(v20 + 16) == a2) {
                    break;
                  }
                  unsigned int v16 = *(_DWORD *)(v20 + 28);
                  if (v16 == -1) {
                    goto LABEL_33;
                  }
                }
              }
            }
          }
        }
        else
        {
          int v10 = v6[1];
          if (v10 < 0) {
            goto LABEL_24;
          }
        }
      }
LABEL_8:
      v6 += 8;
    }
    while (v6 != v7);
  }
  return this;
}

uint64_t sub_1CC390AA0(uint64_t result, long long *a2)
{
  uint64_t v2 = *(_DWORD *)a2 & 0x7FFFFFFF;
  unsigned int v3 = *(unsigned __int8 *)(*(void *)(result + 272) + v2);
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 <= v3)
  {
LABEL_9:
    unsigned int v3 = -1;
  }
  else
  {
    unint64_t v5 = *(void *)result;
    while (1)
    {
      if ((*(_DWORD *)(v5 + 32 * v3) & 0x7FFFFFFF) == v2)
      {
        uint64_t v6 = *(unsigned int *)(v5 + 32 * v3 + 24);
        if (v6 != -1 && *(_DWORD *)(v5 + 32 * v6 + 28) == -1) {
          break;
        }
      }
      v3 += 256;
      if (v3 >= v4) {
        goto LABEL_9;
      }
    }
  }
  uint64_t v7 = v3;
  if (*(_DWORD *)(result + 292))
  {
    unint64_t v10 = *(unsigned int *)(result + 288);
    uint64_t v15 = *(void *)result + 32 * v10;
    int v16 = *(_DWORD *)(v15 + 28);
    uint64_t v17 = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v15 = *a2;
    *(void *)(v15 + 16) = v17;
    *(void *)(v15 + 24) = -1;
    *(_DWORD *)(result + 288) = v16;
    --*(_DWORD *)(result + 292);
  }
  else
  {
    long long v18 = *a2;
    *(void *)&long long v19 = *((void *)a2 + 2);
    *((void *)&v19 + 1) = -1;
    unint64_t v8 = *(void *)result;
    if (v4 >= *(_DWORD *)(result + 12))
    {
      BOOL v14 = v8 + 32 * v4 > (unint64_t)&v18;
      if (v8 > (unint64_t)&v18 || !v14) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v10 = v8 + 32 * *(unsigned int *)(result + 8);
    long long v9 = v19;
    *(_OWORD *)unint64_t v10 = v18;
    *(_OWORD *)(v10 + 16) = v9;
    LODWORD(v10) = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = v10 + 1;
  }
  if (v7 == -1)
  {
    *(unsigned char *)(*(void *)(result + 272) + v2) = v10;
    *(_DWORD *)(*(void *)result + 32 * v10 + 24) = v10;
  }
  else
  {
    unint64_t v11 = *(void *)result;
    uint64_t v12 = *(void *)result + 32 * v7;
    uint64_t v13 = *(unsigned int *)(v12 + 24);
    *(_DWORD *)(*(void *)result + 32 * v13 + 28) = v10;
    *(_DWORD *)(v12 + 24) = v10;
    *(_DWORD *)(v11 + 32 * v10 + 24) = v13;
  }
  return result;
}

uint64_t llvm::ScheduleDAGMILive::enterRegion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a1 + 928) = a3;
  *(void *)(a1 + 936) = a4;
  *(_DWORD *)(a1 + 944) = a5;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 2648) + 24))(*(void *)(a1 + 2648), a3, a4, a5);
  uint64_t v7 = a2 + 48;
  uint64_t v8 = *(void *)(a1 + 936);
  if (v8 != a2 + 48)
  {
    if (!v8 || (*(unsigned char *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 8) != 0)
        uint64_t v8 = *(void *)(v8 + 8);
    }
    uint64_t v7 = *(void *)(v8 + 8);
  }
  *(void *)(a1 + 2800) = v7;
  *(_DWORD *)(a1 + 3112) = 0;
  *(unsigned char *)(a1 + 3120) = (*(uint64_t (**)(void))(**(void **)(a1 + 2648) + 40))(*(void *)(a1 + 2648));
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 2648) + 48))(*(void *)(a1 + 2648));
  *(unsigned char *)(a1 + 3121) = result;
  return result;
}

void llvm::ScheduleDAGMILive::initRegPressure(llvm::ScheduleDAGMILive *this)
{
  v54[16] = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 704) = 0;
  *((void *)this + 387) = 0xFFFFFFFFLL;
  size_t v2 = *(unsigned int *)(*((void *)this + 5) + 32);
  unsigned int v3 = *((_DWORD *)this + 772);
  if (v3 < v2 || v3 >> 2 > v2)
  {
    free(*((void **)this + 385));
    uint64_t v40 = malloc_type_calloc(v2, 1uLL, 0x6D9A4F0CuLL);
    if (!v40 && (v2 || (uint64_t v40 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    *((void *)this + 385) = v40;
    *((_DWORD *)this + 772) = v2;
  }
  unint64_t v5 = (llvm::SUnit *)*((void *)this + 6);
  uint64_t v6 = (llvm::SUnit *)*((void *)this + 7);
  while (v5 != v6)
  {
    llvm::ScheduleDAGMILive::collectVRegUses((uint64_t)this, v5);
    unint64_t v5 = (llvm::SUnit *)((char *)v5 + 272);
  }
  llvm::RegPressureTracker::init((uint64_t)this + 4160, *((void *)this + 4), *((void *)this + 339), *((void *)this + 330), *((void *)this + 115), *((void *)this + 116), *((unsigned char *)this + 3121), 0);
  llvm::RegPressureTracker::init((uint64_t)this + 4840, *((void *)this + 4), *((void *)this + 339), *((void *)this + 330), *((void *)this + 115), *((void *)this + 350), *((unsigned char *)this + 3121), 0);
  llvm::RegPressureTracker::closeRegion((uint64_t)this + 3456);
  llvm::RegPressureTracker::addLiveRegs((uint64_t)this + 4160, *(unsigned int **)(*((void *)this + 438) + 24), *(unsigned int *)(*((void *)this + 438) + 32));
  llvm::RegPressureTracker::addLiveRegs((uint64_t)this + 4840, *(unsigned int **)(*((void *)this + 438) + 168), *(unsigned int *)(*((void *)this + 438) + 176));
  if (*((unsigned char *)this + 4216))
  {
    unint64_t CurrSlot = llvm::RegPressureTracker::getCurrSlot((llvm::ScheduleDAGMILive *)((char *)this + 4160));
    uint64_t v8 = *((void *)this + 526);
    *(void *)(v8 + 312) = CurrSlot;
  }
  else
  {
    *(void *)(*((void *)this + 526) + 312) = *((void *)this + 528);
    uint64_t v8 = *((void *)this + 526);
  }
  unsigned int v9 = *((_DWORD *)this + 1066);
  if (*(_DWORD *)(v8 + 36) < v9) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v9)
  {
    uint64_t v10 = 16 * v9;
    unint64_t v11 = (void *)(*((void *)this + 532) + 8);
    do
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        unsigned int v13 = *((_DWORD *)this + 1104);
        unsigned int v14 = *((_DWORD *)v11 - 2);
        BOOL v15 = v14 >= v13;
        unsigned int v16 = (v14 - v13) | 0x80000000;
        if (v15) {
          uint64_t v17 = v16;
        }
        else {
          uint64_t v17 = v14;
        }
        unint64_t v18 = *(unsigned int *)(v8 + 32);
        if (v18 >= *(unsigned int *)(v8 + 36)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        long long v19 = (void *)(*(void *)(v8 + 24) + 16 * v18);
        *long long v19 = v17;
        v19[1] = v12;
        ++*(_DWORD *)(v8 + 32);
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  if (*((unsigned char *)this + 4896))
  {
    unint64_t v20 = llvm::RegPressureTracker::getCurrSlot((llvm::ScheduleDAGMILive *)((char *)this + 4840));
    uint64_t v21 = *((void *)this + 611);
    *(void *)(v21 + 320) = v20;
  }
  else
  {
    *(void *)(*((void *)this + 611) + 320) = *((void *)this + 613);
    uint64_t v21 = *((void *)this + 611);
  }
  unsigned int v22 = *((_DWORD *)this + 1236);
  if (*(_DWORD *)(v21 + 180) < v22) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v22)
  {
    uint64_t v23 = 16 * v22;
    uint64_t v24 = (void *)(*((void *)this + 617) + 8);
    do
    {
      uint64_t v25 = *v24;
      if (*v24)
      {
        unsigned int v26 = *((_DWORD *)this + 1274);
        unsigned int v27 = *((_DWORD *)v24 - 2);
        BOOL v15 = v27 >= v26;
        unsigned int v28 = (v27 - v26) | 0x80000000;
        if (v15) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = v27;
        }
        unint64_t v30 = *(unsigned int *)(v21 + 176);
        if (v30 >= *(unsigned int *)(v21 + 180)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v31 = (void *)(*(void *)(v21 + 168) + 16 * v30);
        *uint64_t v31 = v29;
        v31[1] = v25;
        ++*(_DWORD *)(v21 + 176);
      }
      v24 += 2;
      v23 -= 16;
    }
    while (v23);
  }
  llvm::RegPressureTracker::initLiveThru((llvm::ScheduleDAGMILive *)((char *)this + 4840), (llvm::ScheduleDAGMILive *)((char *)this + 3456));
  uint64_t v32 = (char *)*((void *)this + 646);
  uint64_t v33 = (char *)*((void *)this + 647);
  if (v33 != v32) {
    sub_1CC19E0C8((void *)this + 561, v32, v33, (v33 - v32) >> 2);
  }
  llvm::ScheduleDAGMILive::updatePressureDiffs((uint64_t *)this, *(unsigned int **)(*((void *)this + 438) + 168), *(unsigned int *)(*((void *)this + 438) + 176));
  if (*((void *)this + 350) != *((void *)this + 117))
  {
    uint64_t v52 = v54;
    uint64_t v53 = 0x800000000;
    llvm::RegPressureTracker::recede((unint64_t)this + 4840, (uint64_t)&v52);
    llvm::ScheduleDAGMILive::updatePressureDiffs((uint64_t *)this, (unsigned int *)v52, v53);
    if (v52 != v54) {
      free(v52);
    }
  }
  *((void *)this + 477) = *((void *)this + 476);
  int v34 = (void *)*((void *)this + 438);
  unint64_t v35 = v34[1] - *v34;
  if ((v35 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v36 = 0;
    uint64_t v37 = (v35 >> 2);
    do
    {
      uint64_t v38 = *((void *)this + 339);
      unsigned int v39 = *(_DWORD *)(*(void *)(v38 + 216) + 4 * v36);
      if (!v39)
      {
        unsigned int v39 = llvm::RegisterClassInfo::computePSetLimit(*((llvm::RegisterClassInfo **)this + 339), v36);
        *(_DWORD *)(*(void *)(v38 + 216) + 4 * v36) = v39;
      }
      if (*(_DWORD *)(*v34 + 4 * v36) > v39)
      {
        unint64_t v41 = (_DWORD *)*((void *)this + 477);
        unint64_t v42 = *((void *)this + 478);
        if ((unint64_t)v41 < v42)
        {
          *unint64_t v41 = (unsigned __int16)(v36 + 1);
          unint64_t v50 = v41 + 1;
        }
        else
        {
          unint64_t v43 = (_DWORD *)*((void *)this + 476);
          uint64_t v44 = v41 - v43;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 62) {
            abort();
          }
          uint64_t v46 = v42 - (void)v43;
          if (v46 >> 1 > v45) {
            unint64_t v45 = v46 >> 1;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v45;
          }
          if (v47)
          {
            if (v47 >> 62) {
              sub_1CB833614();
            }
            uint64_t v48 = (char *)operator new(4 * v47);
          }
          else
          {
            uint64_t v48 = 0;
          }
          uint64_t v49 = &v48[4 * v44];
          *(_DWORD *)uint64_t v49 = (unsigned __int16)(v36 + 1);
          unint64_t v50 = v49 + 4;
          if (v41 != v43)
          {
            do
            {
              int v51 = *--v41;
              *((_DWORD *)v49 - 1) = v51;
              v49 -= 4;
            }
            while (v41 != v43);
            unint64_t v41 = (_DWORD *)*((void *)this + 476);
          }
          *((void *)this + 476) = v49;
          *((void *)this + 477) = v50;
          *((void *)this + 478) = &v48[4 * v47];
          if (v41) {
            operator delete(v41);
          }
        }
        *((void *)this + 477) = v50;
      }
      ++v36;
    }
    while (v36 != v37);
  }
}

uint64_t *llvm::ScheduleDAGMILive::updatePressureDiffs(uint64_t *result, unsigned int *a2, uint64_t a3)
{
  if (a3)
  {
    unsigned int v3 = a2;
    uint64_t v4 = result;
    unint64_t v5 = &a2[4 * a3];
    uint64_t v6 = result + 351;
    uint64_t v7 = result + 43;
    do
    {
      uint64_t v8 = *v3;
      if ((v8 & 0x80000000) != 0)
      {
        if (*((unsigned char *)v4 + 3121))
        {
          unsigned int v9 = *(unsigned __int8 *)(v4[385] + (v8 & 0x7FFFFFFF));
          unsigned int v10 = *((_DWORD *)v4 + 704);
          if (v10 > v9)
          {
            uint64_t v11 = *((void *)v3 + 1);
            uint64_t v12 = *v6;
            while (1)
            {
              if ((*(_DWORD *)(v12 + 32 * v9) & 0x7FFFFFFF) == (v8 & 0x7FFFFFFF))
              {
                uint64_t v13 = *(unsigned int *)(v12 + 32 * v9 + 24);
                if (v13 != -1 && *(_DWORD *)(v12 + 32 * v13 + 28) == -1) {
                  break;
                }
              }
              v9 += 256;
              if (v9 >= v10) {
                goto LABEL_16;
              }
            }
            do
            {
              uint64_t v14 = v9;
              uint64_t v15 = *(void *)(v12 + 32 * v9 + 16);
              if ((*(_WORD *)(v15 + 228) & 0x400) == 0 && (void *)v15 != v7)
              {
                uint64_t result = (uint64_t *)llvm::PressureDiff::addPressureChange(v4[388] + ((unint64_t)*(unsigned int *)(v15 + 192) << 6), v8, v11 != 0, (void *)v4[5]);
                uint64_t v12 = v4[351];
              }
              unsigned int v9 = *(_DWORD *)(v12 + 32 * v14 + 28);
            }
            while (v9 != -1);
          }
        }
        else
        {
          uint64_t v28 = sub_1CC2F12AC(v4[330], *v3);
          unint64_t v16 = v4[613];
          uint64_t v17 = v4[115];
          while (v16 != v17 + 48)
          {
            int v18 = **(unsigned __int16 **)(v16 + 16);
            if ((v18 - 13) >= 5 && v18 != 23)
            {
              uint64_t v26 = sub_1CBB24CA0(*(void *)(v4[330] + 288), v16, 0);
              sub_1CC2FC02C(v28, v26, (uint64_t)v29);
              uint64_t v27 = v29[0];
              goto LABEL_30;
            }
            if ((*(unsigned char *)v16 & 4) == 0)
            {
              while ((*(_WORD *)(v16 + 44) & 8) != 0)
                unint64_t v16 = *(void *)(v16 + 8);
            }
            unint64_t v16 = *(void *)(v16 + 8);
          }
          uint64_t v27 = sub_1CC39166C(v28, *(void *)(*(void *)(*(void *)(v4[330] + 288) + 392) + 16 * *(unsigned int *)(v17 + 24) + 8));
LABEL_30:
          uint64_t result = sub_1CC397C20(v6, v8 & 0x7FFFFFFF);
          uint64_t v21 = result;
          uint64_t v22 = v20;
          if (v6 != result || v20 != 0xFFFFFFFFLL)
          {
            uint64_t v23 = *result;
            do
            {
              uint64_t v24 = *(void *)(v23 + 32 * v22 + 16);
              if ((*(_WORD *)(v24 + 228) & 0x400) == 0 && (void *)v24 != v7)
              {
                uint64_t v25 = sub_1CBB24CA0(*(void *)(v4[330] + 288), *(void *)(v24 + 8), 0);
                uint64_t result = (uint64_t *)sub_1CC2FC02C(v28, v25, (uint64_t)v29);
                if (v29[0] == v27) {
                  uint64_t result = (uint64_t *)llvm::PressureDiff::addPressureChange(v4[388] + ((unint64_t)*(unsigned int *)(v24 + 192) << 6), v8, 1, (void *)v4[5]);
                }
                uint64_t v23 = *v21;
              }
              uint64_t v22 = *(unsigned int *)(v23 + 32 * v22 + 28);
            }
            while (v6 != v21 || v22 != -1);
          }
        }
      }
LABEL_16:
      v3 += 4;
    }
    while (v3 != v5);
  }
  return result;
}

void *llvm::ScheduleDAGMILive::updateScheduledPressure(void *result, uint64_t a2, void *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = (_WORD *)(result[388] + ((unint64_t)*(unsigned int *)(a2 + 192) << 6));
  uint64_t v5 = (result[477] - result[476]) >> 2;
  uint64_t v6 = v4 + 32;
  do
  {
    int v7 = (unsigned __int16)*v4;
    if (!*v4) {
      break;
    }
    uint64_t v8 = (v7 - 1);
    uint64_t v9 = v5;
    if (v3 != v5)
    {
      uint64_t v11 = result[476];
      while (1)
      {
        int v12 = *(unsigned __int16 *)(v11 + 4 * v3);
        if (v12 - 1 >= v8) {
          break;
        }
        uint64_t v3 = (v3 + 1);
        if (v5 == v3)
        {
          uint64_t v9 = v5;
          goto LABEL_4;
        }
      }
      if (v12 == v7)
      {
        unsigned int v13 = *(_DWORD *)(*a3 + 4 * v8);
        uint64_t v14 = v11 + 4 * v3;
        int v17 = *(__int16 *)(v14 + 2);
        uint64_t v15 = (_WORD *)(v14 + 2);
        int v16 = v17;
        if (!(v13 >> 15) && (int)v13 > v16) {
          *uint64_t v15 = v13;
        }
      }
      uint64_t v9 = v3;
    }
LABEL_4:
    unsigned int v10 = (llvm::RegisterClassInfo *)result[339];
    if (!*(_DWORD *)(*((void *)v10 + 27) + 4 * v8))
    {
      uint64_t v27 = result;
      unsigned int v26 = v9;
      uint64_t v24 = v4;
      uint64_t v25 = a3;
      uint64_t v19 = result[339];
      uint64_t v22 = v5;
      uint64_t v23 = v6;
      int v20 = llvm::RegisterClassInfo::computePSetLimit(v10, v8);
      uint64_t v9 = v26;
      uint64_t v5 = v22;
      uint64_t v6 = v23;
      uint64_t v4 = v24;
      a3 = v25;
      int v21 = v20;
      uint64_t result = v27;
      *(_DWORD *)(*(void *)(v19 + 216) + 4 * v8) = v21;
    }
    v4 += 2;
    uint64_t v3 = v9;
  }
  while (v4 != v6);
  return result;
}

uint64_t sub_1CC39166C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (a2 >> 1) & 3;
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFF8;
  if (v2) {
    uint64_t v4 = v3 | (2 * (v2 - 1));
  }
  else {
    uint64_t v4 = *(void *)v3 | 6;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  uint64_t v6 = *(void **)a1;
  if (!v5)
  {
    unsigned int v5 = 0;
    goto LABEL_17;
  }
  uint64_t v7 = v6[3 * v5 - 2];
  unsigned int v8 = *(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24) | (v4 >> 1) & 3;
  if (v8 >= ((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_17:
    uint64_t v9 = &v6[3 * v5];
    goto LABEL_12;
  }
  uint64_t v9 = *(void **)a1;
  unint64_t v10 = *(unsigned int *)(a1 + 8);
  do
  {
    unint64_t v11 = v10 >> 1;
    uint64_t v12 = v9[3 * (v10 >> 1) + 1];
    LODWORD(v12) = (v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24);
    v10 -= (v10 >> 1) + 1;
    BOOL v13 = v8 >= v12;
    if (v8 >= v12) {
      unint64_t v14 = v11 + 1;
    }
    else {
      unint64_t v14 = 0;
    }
    v9 += 3 * v14;
    if (!v13) {
      unint64_t v10 = v11;
    }
  }
  while (v10);
LABEL_12:
  if (v9 == &v6[3 * v5]
    || ((*v9 >> 1) & 3 | *(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v4 & 0xFFFFFFFFFFFFFFF8) + 24) | (v4 >> 1) & 3))
  {
    return 0;
  }
  else
  {
    return v9[2];
  }
}

void llvm::ScheduleDAGMILive::schedule(uint64_t **this)
{
  v54[8] = *MEMORY[0x1E4F143B8];
  llvm::ScheduleDAGMILive::buildDAGWithRegPressure((llvm::ScheduleDAGMILive *)this);
  unsigned int v2 = this[332];
  unint64_t v3 = this[333];
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v4 + 24))(v4, this);
  }
  uint64_t v52 = v54;
  uint64_t v53 = 0x800000000;
  uint64_t v49 = v51;
  uint64_t v50 = 0x800000000;
  unsigned int v5 = this[6];
  uint64_t v6 = this[7];
  while (v5 != v6)
  {
    if (*((_DWORD *)v5 + 50) >= 2u)
    {
      uint64_t v7 = (void *)v5[4];
      unint64_t v8 = *v7 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v9 = v7;
      if ((*(unsigned char *)(v8 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v7 & 0xFFFFFFFFFFFFFFF8));
        uint64_t v9 = (_OWORD *)v5[4];
      }
      unint64_t v10 = &v9[*((unsigned int *)v5 + 10)];
      unint64_t v11 = v7 + 2;
      if (v7 + 2 != v10)
      {
        unsigned int v12 = *(_DWORD *)(v8 + 240);
        do
        {
          uint64_t v13 = *v11;
          if ((*v11 & 6) == 0)
          {
            unint64_t v14 = (llvm::SUnit *)(v13 & 0xFFFFFFFFFFFFFFF8);
            if ((*(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0) {
              llvm::SUnit::ComputeDepth(v14);
            }
            if (*((_DWORD *)v14 + 60) > v12) {
              uint64_t v7 = v11;
            }
          }
          v11 += 2;
        }
        while (v11 != v10);
        uint64_t v9 = (_OWORD *)v5[4];
      }
      if (v7 != (void *)v9)
      {
        *(_OWORD *)uint64_t v48 = *v9;
        *uint64_t v9 = *(_OWORD *)v7;
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v48;
      }
    }
    if (!*((_DWORD *)v5 + 52))
    {
      if (v53 >= (unint64_t)HIDWORD(v53)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v52 + v53) = v5;
      LODWORD(v53) = v53 + 1;
    }
    if (!*((_DWORD *)v5 + 53))
    {
      if (v50 >= (unint64_t)HIDWORD(v50)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v49 + v50) = v5;
      LODWORD(v50) = v50 + 1;
    }
    v5 += 34;
  }
  if (*((_DWORD *)this + 136) >= 2u)
  {
    uint64_t v37 = this[47];
    unint64_t v38 = *v37 & 0xFFFFFFFFFFFFFFF8;
    unsigned int v39 = v37;
    if ((*(unsigned char *)(v38 + 236) & 1) == 0)
    {
      llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v37 & 0xFFFFFFFFFFFFFFF8));
      unsigned int v39 = this[47];
    }
    uint64_t v40 = &v39[2 * *((unsigned int *)this + 96)];
    unint64_t v41 = v37 + 2;
    if (v37 + 2 != v40)
    {
      unsigned int v42 = *(_DWORD *)(v38 + 240);
      do
      {
        uint64_t v43 = *v41;
        if ((*v41 & 6) == 0)
        {
          uint64_t v44 = (llvm::SUnit *)(v43 & 0xFFFFFFFFFFFFFFF8);
          if ((*(unsigned char *)((v43 & 0xFFFFFFFFFFFFFFF8) + 236) & 1) == 0) {
            llvm::SUnit::ComputeDepth(v44);
          }
          if (*((_DWORD *)v44 + 60) > v42) {
            uint64_t v37 = v41;
          }
        }
        v41 += 2;
      }
      while (v41 != v40);
      unsigned int v39 = this[47];
    }
    if (v37 != v39)
    {
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v39;
      *(_OWORD *)unsigned int v39 = *(_OWORD *)v37;
      *(_OWORD *)uint64_t v37 = *(_OWORD *)v48;
    }
  }
  (*(void (**)(uint64_t *, uint64_t **))(*this[331] + 64))(this[331], this);
  llvm::ScheduleDAGMI::initQueues((uint64_t)this, (uint64_t *)v52, v53, (uint64_t)v49, v50);
  if (*((unsigned char *)this + 3120)) {
    this[528] = this[335];
  }
  v48[0] = 0;
  uint64_t v15 = (*(uint64_t (**)(uint64_t *, BOOL *))(*this[331] + 96))(this[331], v48);
  if (v15)
  {
    uint64_t v16 = v15;
    do
    {
      llvm::ScheduleDAGMILive::scheduleMI((llvm::ScheduleDAGMILive *)this, (llvm::SUnit *)v16, v48[0]);
      int v17 = this[340];
      if (v17)
      {
        uint64_t v25 = v17[1];
        unsigned int v26 = v25 == v17[2] ? 0 : *(_DWORD *)(v25 + 8 * *(unsigned int *)(v16 + 192) + 4);
        uint64_t v27 = v26 >> 6;
        uint64_t v28 = this[341];
        uint64_t v29 = v28[v27];
        if (((1 << v26) & v29) == 0)
        {
          v28[v27] = (1 << v26) | v29;
          uint64_t v30 = v17[22] + 48 * v26;
          uint64_t v31 = *(unsigned int *)(v30 + 8);
          if (v31)
          {
            uint64_t v32 = *(unsigned int **)v30;
            uint64_t v33 = &v32[2 * v31];
            uint64_t v34 = v17[25];
            do
            {
              uint64_t v35 = *v32;
              unsigned int v36 = v32[1];
              v32 += 2;
              if (*(_DWORD *)(v34 + 4 * v35) > v36) {
                unsigned int v36 = *(_DWORD *)(v34 + 4 * v35);
              }
              *(_DWORD *)(v34 + 4 * v35) = v36;
            }
            while (v32 != v33);
          }
          (*(void (**)(uint64_t *))(*this[331] + 104))(this[331]);
        }
      }
      (*(void (**)(uint64_t *, uint64_t, BOOL))(*this[331] + 112))(this[331], v16, v48[0]);
      if (v48[0])
      {
        uint64_t v45 = *(unsigned int *)(v16 + 120);
        if (v45)
        {
          uint64_t v46 = *(void *)(v16 + 112);
          uint64_t v47 = 16 * v45;
          do
          {
            llvm::ScheduleDAGMI::releaseSucc((uint64_t)this, v16, v46);
            v46 += 16;
            v47 -= 16;
          }
          while (v47);
        }
      }
      else
      {
        uint64_t v18 = *(unsigned int *)(v16 + 40);
        if (v18)
        {
          uint64_t v19 = 16 * v18;
          int v20 = (_DWORD *)(*(void *)(v16 + 32) + 8);
          do
          {
            int v21 = (uint64_t *)(*((void *)v20 - 1) & 0xFFFFFFFFFFFFFFF8);
            if ((~*(v20 - 2) & 6) != 0 || *v20 < 4u)
            {
              unsigned int v22 = v20[1] + *(_DWORD *)(v16 + 252);
              if (*((_DWORD *)v21 + 63) < v22) {
                *((_DWORD *)v21 + 63) = v22;
              }
              int v23 = *((_DWORD *)v21 + 53) - 1;
              *((_DWORD *)v21 + 53) = v23;
              if (v23) {
                BOOL v24 = 1;
              }
              else {
                BOOL v24 = this + 9 == (uint64_t **)v21;
              }
              if (!v24) {
                (*(void (**)(uint64_t *))(*this[331] + 128))(this[331]);
              }
            }
            else
            {
              --*((_DWORD *)v21 + 55);
              if (*v20 == 5) {
                this[337] = v21;
              }
            }
            v20 += 4;
            v19 -= 16;
          }
          while (v19);
        }
      }
      *(_WORD *)(v16 + 228) |= 0x400u;
      uint64_t v16 = (*(uint64_t (**)(uint64_t *, BOOL *))(*this[331] + 96))(this[331], v48);
    }
    while (v16);
  }
  llvm::ScheduleDAGMI::placeDebugValues((uint64_t)this);
  if (v49 != v51) {
    free(v49);
  }
  if (v52 != v54) {
    free(v52);
  }
}

void llvm::ScheduleDAGMILive::buildDAGWithRegPressure(llvm::ScheduleDAGMILive *this)
{
  unsigned int v2 = (llvm::ScheduleDAGMILive *)((char *)this + 3456);
  if (*((unsigned char *)this + 3120))
  {
    llvm::RegPressureTracker::init((uint64_t)this + 3456, *((void *)this + 4), *((void *)this + 339), *((void *)this + 330), *((void *)this + 115), *((void *)this + 350), *((unsigned char *)this + 3121), 1);
    if (*((void *)this + 350) != *((void *)this + 117)) {
      llvm::RegPressureTracker::recede((unint64_t)v2, 0);
    }
    llvm::ScheduleDAGInstrs::buildSchedGraph(this, *((llvm::AAResults **)this + 329), v2, (llvm::ScheduleDAGMILive *)((char *)this + 3104), *((llvm::LiveIntervals **)this + 330), *((unsigned __int8 *)this + 3121));
    llvm::ScheduleDAGMILive::initRegPressure(this);
  }
  else
  {
    llvm::RegPressureTracker::reset((uint64_t)this + 3456);
    *((void *)this + 477) = *((void *)this + 476);
    unint64_t v3 = (llvm::AAResults *)*((void *)this + 329);
    llvm::ScheduleDAGInstrs::buildSchedGraph(this, v3, 0, 0, 0, 0);
  }
}

uint64_t llvm::ScheduleDAGMILive::initQueues(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = llvm::ScheduleDAGMI::initQueues(a1, a2, a3, a4, a5);
  if (*(unsigned char *)(a1 + 3120)) {
    *(void *)(a1 + 4224) = *(void *)(a1 + 2680);
  }
  return result;
}

void llvm::ScheduleDAGMILive::scheduleMI(llvm::ScheduleDAGMILive *this, llvm::SUnit *a2, int a3)
{
  v73[16] = *MEMORY[0x1E4F143B8];
  unsigned int v5 = (const llvm::MachineInstr *)*((void *)a2 + 1);
  if (a3)
  {
    uint64_t v49 = (unint64_t *)*((void *)this + 335);
    if (v49 == (unint64_t *)v5)
    {
      if (!v5 || (uint64_t v52 = *((void *)a2 + 1), (*(unsigned char *)v5 & 4) == 0))
      {
        uint64_t v52 = *((void *)a2 + 1);
        if ((*((_WORD *)v5 + 22) & 8) != 0)
        {
          uint64_t v52 = *((void *)a2 + 1);
          do
            uint64_t v52 = *(void *)(v52 + 8);
          while ((*(_WORD *)(v52 + 44) & 8) != 0);
        }
      }
      uint64_t v53 = *(void *)(v52 + 8);
      *((void *)this + 335) = v53;
      uint64_t v54 = *((void *)this + 336);
      if (v53 != v54)
      {
        while (1)
        {
          int v55 = **(unsigned __int16 **)(v53 + 16);
          if ((v55 - 13) >= 5 && v55 != 23) {
            break;
          }
          if ((*(unsigned char *)v53 & 4) == 0)
          {
            while ((*(_WORD *)(v53 + 44) & 8) != 0)
              uint64_t v53 = *(void *)(v53 + 8);
          }
          uint64_t v53 = *(void *)(v53 + 8);
          if (v53 == v54)
          {
            uint64_t v53 = *((void *)this + 336);
            break;
          }
        }
      }
      *((void *)this + 335) = v53;
    }
    else
    {
      llvm::ScheduleDAGMI::moveInstruction((uint64_t *)this, *((void *)a2 + 1), v49);
      *((void *)this + 528) = v5;
    }
    if (*((unsigned char *)this + 3120))
    {
      unint64_t v65 = v67;
      uint64_t v66 = 0x800000000;
      unint64_t v68 = v70;
      uint64_t v69 = 0x800000000;
      uint64_t v71 = v73;
      uint64_t v72 = 0x800000000;
      llvm::RegisterOperands::collect(&v65, v5, *((const llvm::TargetRegisterInfo **)this + 3), *((const llvm::MachineRegisterInfo **)this + 5), *((unsigned __int8 *)this + 3121), 0);
      uint64_t v50 = (uint64_t *)*((void *)this + 330);
      if (*((unsigned char *)this + 3121))
      {
        uint64_t v51 = sub_1CBB24CA0(v50[36], (unint64_t)v5, 0);
        llvm::RegisterOperands::adjustLaneLiveness((uint64_t)&v65, *((void *)this + 330), *((void *)this + 5), v51 & 0xFFFFFFFFFFFFFFF8 | 4, (uint64_t)v5);
      }
      else
      {
        llvm::RegisterOperands::detectDeadDefs((llvm::RegisterOperands *)&v65, v5, (const llvm::LiveIntervals *)v50);
      }
      llvm::RegPressureTracker::advance((llvm::ScheduleDAGMILive *)((char *)this + 4160), (unsigned int **)&v65);
      llvm::ScheduleDAGMILive::updateScheduledPressure(this, (uint64_t)a2, *((void **)this + 526));
      sub_1CC397418((uint64_t)&v65);
    }
  }
  else
  {
    uint64_t v6 = (unint64_t *)*((void *)this + 336);
    uint64_t v7 = *((void *)this + 335);
    unint64_t v8 = sub_1CC3902EC((unint64_t)v6, v7);
    if (v5 == (const llvm::MachineInstr *)v8)
    {
      *((void *)this + 336) = v8;
    }
    else
    {
      if ((const llvm::MachineInstr *)v7 == v5)
      {
        if (!v5 || (unsigned int v42 = v5, (*(unsigned char *)v5 & 4) == 0))
        {
          unsigned int v42 = v5;
          if ((*((_WORD *)v5 + 22) & 8) != 0)
          {
            unsigned int v42 = v5;
            do
              unsigned int v42 = (const llvm::MachineInstr *)*((void *)v42 + 1);
            while ((*((_WORD *)v42 + 22) & 8) != 0);
          }
        }
        unint64_t v43 = *((void *)v42 + 1);
        *((void *)this + 335) = v43;
        if (v43 != v8)
        {
          while (1)
          {
            unsigned int v44 = **(unsigned __int16 **)(v43 + 16);
            BOOL v41 = v44 > 0x17;
            int v45 = (1 << v44) & 0x83E000;
            if (v41 || v45 == 0) {
              break;
            }
            if ((*(unsigned char *)v43 & 4) == 0)
            {
              while ((*(_WORD *)(v43 + 44) & 8) != 0)
                unint64_t v43 = *(void *)(v43 + 8);
            }
            unint64_t v43 = *(void *)(v43 + 8);
            if (v43 == v8) {
              goto LABEL_66;
            }
          }
          unint64_t v8 = v43;
        }
LABEL_66:
        *((void *)this + 335) = v8;
        *((void *)this + 528) = v8;
      }
      if (*((const llvm::MachineInstr **)this + 116) == v5)
      {
        if (!v5 || (uint64_t v47 = v5, (*(unsigned char *)v5 & 4) == 0))
        {
          uint64_t v47 = v5;
          if ((*((_WORD *)v5 + 22) & 8) != 0)
          {
            uint64_t v47 = v5;
            do
              uint64_t v47 = (const llvm::MachineInstr *)*((void *)v47 + 1);
            while ((*((_WORD *)v47 + 22) & 8) != 0);
          }
        }
        *((void *)this + 116) = *((void *)v47 + 1);
      }
      sub_1CB9173F0(*((void *)this + 115), v6, *((void *)this + 115), (unint64_t *)v5);
      uint64_t v9 = (llvm::LiveIntervals *)*((void *)this + 330);
      if (v9) {
        llvm::LiveIntervals::handleMove(v9, v5, 1);
      }
      if (*((unint64_t **)this + 116) == v6) {
        *((void *)this + 116) = v5;
      }
      *((void *)this + 336) = v5;
      *((void *)this + 613) = v5;
    }
    if (*((unsigned char *)this + 3120))
    {
      unint64_t v65 = v67;
      uint64_t v66 = 0x800000000;
      unint64_t v68 = v70;
      uint64_t v69 = 0x800000000;
      uint64_t v71 = v73;
      uint64_t v72 = 0x800000000;
      llvm::RegisterOperands::collect(&v65, v5, *((const llvm::TargetRegisterInfo **)this + 3), *((const llvm::MachineRegisterInfo **)this + 5), *((unsigned __int8 *)this + 3121), 0);
      if (!*((unsigned char *)this + 3121))
      {
        llvm::RegisterOperands::detectDeadDefs((llvm::RegisterOperands *)&v65, v5, *((const llvm::LiveIntervals **)this + 330));
LABEL_22:
        if (*((void *)this + 613) != *((void *)this + 336)) {
          llvm::RegPressureTracker::recedeSkipDebugValues((unint64_t)this + 4840);
        }
        uint64_t v62 = v64;
        uint64_t v63 = 0x800000000;
        llvm::RegPressureTracker::recede((uint64_t)this + 4840, (unsigned int **)&v65, (uint64_t)&v62);
        uint64_t v23 = 0;
        BOOL v24 = (void *)*((void *)this + 611);
        uint64_t v25 = (_WORD *)(*((void *)this + 388) + ((unint64_t)*((unsigned int *)a2 + 48) << 6));
        uint64_t v26 = (*((void *)this + 477) - *((void *)this + 476)) >> 2;
        uint64_t v27 = v25 + 32;
        do
        {
          int v28 = (unsigned __int16)*v25;
          if (!*v25) {
            break;
          }
          uint64_t v29 = (v28 - 1);
          uint64_t v30 = v26;
          if (v23 != v26)
          {
            uint64_t v34 = *((void *)this + 476);
            while (1)
            {
              int v35 = *(unsigned __int16 *)(v34 + 4 * v23);
              if (v35 - 1 >= v29) {
                break;
              }
              uint64_t v23 = (v23 + 1);
              if (v26 == v23)
              {
                uint64_t v30 = v26;
                goto LABEL_27;
              }
            }
            if (v35 == v28)
            {
              unsigned int v36 = *(_DWORD *)(*v24 + 4 * v29);
              uint64_t v37 = v34 + 4 * v23;
              int v40 = *(__int16 *)(v37 + 2);
              unint64_t v38 = (_WORD *)(v37 + 2);
              int v39 = v40;
              BOOL v41 = v36 >> 15 || (int)v36 <= v39;
              if (!v41) {
                *unint64_t v38 = v36;
              }
            }
            uint64_t v30 = v23;
          }
LABEL_27:
          uint64_t v31 = (llvm::RegisterClassInfo *)*((void *)this + 339);
          if (!*(_DWORD *)(*((void *)v31 + 27) + 4 * v29))
          {
            unsigned int v61 = v30;
            uint64_t v59 = v26;
            uint64_t v60 = v24;
            uint64_t v57 = v27;
            unint64_t v58 = v25;
            int v48 = llvm::RegisterClassInfo::computePSetLimit(v31, v29);
            uint64_t v27 = v57;
            uint64_t v25 = v58;
            uint64_t v26 = v59;
            BOOL v24 = v60;
            *(_DWORD *)(*((void *)v31 + 27) + 4 * v29) = v48;
            uint64_t v30 = v61;
          }
          v25 += 2;
          uint64_t v23 = v30;
        }
        while (v25 != v27);
        llvm::ScheduleDAGMILive::updatePressureDiffs((uint64_t *)this, (unsigned int *)v62, v63);
        if (v62 != v64) {
          free(v62);
        }
        if (v71 != v73) {
          free(v71);
        }
        if (v68 != v70) {
          free(v68);
        }
        if (v65 != v67) {
          free(v65);
        }
        return;
      }
      uint64_t v10 = *(void *)(*((void *)this + 330) + 288);
      __int16 v11 = *((_WORD *)v5 + 22);
      unint64_t v12 = (unint64_t)v5;
      uint64_t v13 = v5;
      if ((v11 & 0xC) != 0)
      {
        unint64_t v12 = (unint64_t)v5;
        if ((v11 & 4) != 0)
        {
          unint64_t v12 = (unint64_t)v5;
          do
            unint64_t v12 = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v12 + 44) & 4) != 0);
        }
        uint64_t v13 = v5;
        if ((v11 & 8) != 0)
        {
          do
            uint64_t v13 = (const llvm::MachineInstr *)*((void *)v13 + 1);
          while ((*((_WORD *)v13 + 22) & 8) != 0);
        }
      }
      uint64_t v14 = *((void *)v13 + 1);
      if (v12 != v14)
      {
        while (1)
        {
          unsigned int v15 = **(unsigned __int16 **)(v12 + 16);
          BOOL v41 = v15 > 0x17;
          int v16 = (1 << v15) & 0x83E000;
          if (v41 || v16 == 0) {
            break;
          }
          unint64_t v12 = *(void *)(v12 + 8);
          if (v12 == v14)
          {
            unint64_t v12 = *((void *)v13 + 1);
            break;
          }
        }
      }
      uint64_t v18 = *(void *)(v10 + 368);
      uint64_t v19 = *(unsigned int *)(v10 + 384);
      if (v19)
      {
        LODWORD(v20) = ((v12 >> 4) ^ (v12 >> 9)) & (v19 - 1);
        int v21 = (uint64_t *)(v18 + 16 * v20);
        uint64_t v22 = *v21;
        if (v12 == *v21)
        {
LABEL_21:
          llvm::RegisterOperands::adjustLaneLiveness((uint64_t)&v65, *((void *)this + 330), *((void *)this + 5), v21[1] & 0xFFFFFFFFFFFFFFF8 | 4, (uint64_t)v5);
          goto LABEL_22;
        }
        int v32 = 1;
        while (v22 != -4096)
        {
          int v33 = v20 + v32++;
          uint64_t v20 = v33 & (v19 - 1);
          uint64_t v22 = *(void *)(v18 + 16 * v20);
          if (v12 == v22)
          {
            int v21 = (uint64_t *)(v18 + 16 * v20);
            goto LABEL_21;
          }
        }
      }
      int v21 = (uint64_t *)(v18 + 16 * v19);
      goto LABEL_21;
    }
  }
}

void llvm::ScheduleDAGMILive::computeDFSResult(llvm::ScheduleDAGMILive *this)
{
  uint64_t v2 = *((void *)this + 340);
  if (!v2) {
    operator new();
  }
  unint64_t v3 = *(char **)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 176);
  *(void *)(v2 + 16) = v3;
  *(_DWORD *)(v2 + 40) = 0;
  uint64_t v5 = *(void *)(v2 + 184);
  uint64_t v6 = (void *)v2;
  if (v5 != v4)
  {
    do
    {
      unint64_t v8 = *(void **)(v5 - 48);
      v5 -= 48;
      uint64_t v7 = v8;
      if ((void *)(v5 + 16) != v8) {
        free(v7);
      }
    }
    while (v5 != v4);
    uint64_t v6 = (void *)*((void *)this + 340);
    unint64_t v3 = (char *)v6[2];
  }
  *(void *)(v2 + 184) = v4;
  *(void *)(v2 + 208) = *(void *)(v2 + 200);
  *((_DWORD *)this + 698) = 0;
  *((_DWORD *)this + 684) = 0;
  uint64_t v9 = *((void *)this + 6);
  uint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((*((void *)this + 7) - v9) >> 4);
  unint64_t v11 = -252645135 * ((*((void *)this + 7) - v9) >> 4);
  unint64_t v12 = (unsigned char *)v6[1];
  unint64_t v13 = (v3 - v12) >> 3;
  if (v11 <= v13)
  {
    if (v11 < v13) {
      v6[2] = &v12[8 * v11];
    }
  }
  else
  {
    unint64_t v14 = v11 - v13;
    uint64_t v15 = v6[3];
    if (v11 - v13 > (v15 - (uint64_t)v3) >> 3)
    {
      uint64_t v23 = v15 - (void)v12;
      uint64_t v24 = v23 >> 2;
      if (v23 >> 2 <= v11) {
        uint64_t v24 = -252645135 * ((*((void *)this + 7) - v9) >> 4);
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25 >> 61) {
        sub_1CB833614();
      }
      uint64_t v26 = (char *)operator new(8 * v25);
      uint64_t v27 = &v26[8 * v13];
      memset_pattern16(v27, &unk_1CFAC72D0, 8 * v14);
      if (v3 != v12)
      {
        do
        {
          uint64_t v29 = *((void *)v3 - 1);
          v3 -= 8;
          *((void *)v27 - 1) = v29;
          v27 -= 8;
        }
        while (v3 != v12);
        unint64_t v3 = (char *)v6[1];
      }
      v6[1] = v27;
      v6[2] = &v26[8 * v11];
      v6[3] = &v26[8 * v25];
      if (v3) {
        operator delete(v3);
      }
    }
    else
    {
      memset_pattern16(v3, &unk_1CFAC72D0, 8 * v14);
      v6[2] = &v3[8 * v14];
    }
    uint64_t v6 = (void *)*((void *)this + 340);
    uint64_t v9 = *((void *)this + 6);
    uint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((*((void *)this + 7) - v9) >> 4);
  }
  llvm::SchedDFSResult::compute((uint64_t)v6, v9, v10);
  uint64_t v16 = (*(void *)(*((void *)this + 340) + 208) - *(void *)(*((void *)this + 340) + 200)) >> 2;
  uint64_t v17 = *((unsigned int *)this + 684);
  if ((*((_DWORD *)this + 698) & 0x3F) != 0)
  {
    uint64_t v28 = *((void *)this + 341) + 8 * v17;
    *(void *)(v28 - 8) &= ~(-1 << (*((_DWORD *)this + 698) & 0x3F));
  }
  unsigned int v18 = v17;
  uint64_t v19 = (void *)((char *)this + 2728);
  *((_DWORD *)this + 698) = v16;
  unsigned int v20 = v16 + 63;
  if (v17 != (v16 + 63) >> 6)
  {
    uint64_t v21 = v20 >> 6;
    if (v17 > v21)
    {
      *((_DWORD *)this + 684) = v21;
      unsigned int v18 = v20 >> 6;
    }
    else
    {
      if (v21 > *((_DWORD *)this + 685)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v21 != v17) {
        bzero((void *)(*v19 + 8 * v17), 8 * (v21 - v17));
      }
      unsigned int v18 = v21;
      *((_DWORD *)this + 684) = v21;
      LODWORD(v16) = *((_DWORD *)this + 698);
    }
  }
  int v22 = v16 & 0x3F;
  if (v22) {
    *(void *)(*v19 + 8 * v18 - 8) &= ~(-1 << v22);
  }
}

uint64_t llvm::createLoadClusterDAGMutation@<X0>(void *a1@<X8>)
{
  if (byte_1EBCCFF90) {
    operator new();
  }
  uint64_t result = 0;
  *a1 = 0;
  return result;
}

uint64_t llvm::createStoreClusterDAGMutation@<X0>(void *a1@<X8>)
{
  if (byte_1EBCCFF90) {
    operator new();
  }
  uint64_t result = 0;
  *a1 = 0;
  return result;
}

void llvm::createCopyConstrainDAGMutation(llvm *this, const llvm::TargetInstrInfo *a2, const llvm::TargetRegisterInfo *a3)
{
}

void llvm::SchedBoundary::~SchedBoundary(llvm::SchedBoundary *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 54);
  uint64_t v4 = *((unsigned int *)this + 110);
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    do
    {
      if (*(_DWORD *)&v3[v5 - 8] >= 0x41u)
      {
        uint64_t v11 = *(void *)&v3[v5 - 16];
        if (v11)
        {
          uint64_t v12 = v5;
          unint64_t v13 = v3;
          MEMORY[0x1D25D9CB0](v11, 0x1000C8000313F17);
          uint64_t v5 = v12;
          unint64_t v3 = v13;
        }
      }
      v5 -= 16;
    }
    while (v5);
    unint64_t v3 = (char *)*((void *)this + 54);
  }
  if (v3 != (char *)this + 448) {
    free(v3);
  }
  uint64_t v6 = (char *)*((void *)this + 44);
  if (v6 != (char *)this + 368) {
    free(v6);
  }
  uint64_t v7 = (char *)*((void *)this + 34);
  if (v7 != (char *)this + 288) {
    free(v7);
  }
  unint64_t v8 = (char *)*((void *)this + 22);
  if (v8 != (char *)this + 192) {
    free(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 14);
  if (v9)
  {
    *((void *)this + 15) = v9;
    operator delete(v9);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  uint64_t v10 = (void *)*((void *)this + 7);
  if (v10)
  {
    *((void *)this + 8) = v10;
    operator delete(v10);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

void llvm::SchedBoundary::reset(llvm::SchedBoundary *this)
{
  uint64_t v2 = (_DWORD *)*((void *)this + 17);
  if (v2 && v2[2])
  {
    (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    *((void *)this + 17) = 0;
  }
  *((void *)this + 8) = *((void *)this + 7);
  *((void *)this + 15) = *((void *)this + 14);
  *((unsigned char *)this + 144) = 0;
  *(_OWORD *)((char *)this + 148) = xmmword_1CD923640;
  *((_DWORD *)this + 41) = 0;
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 70) = 0;
  *((_DWORD *)this + 90) = 0;
  *((void *)this + 32) = 0;
  *((unsigned char *)this + 264) = 0;
  uint64_t v3 = *((unsigned int *)this + 110);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 54);
    uint64_t v5 = 16 * v3;
    do
    {
      if (*(_DWORD *)(v4 + v5 - 8) >= 0x41u)
      {
        uint64_t v7 = *(void *)(v4 + v5 - 16);
        if (v7)
        {
          uint64_t v8 = v5;
          MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
          uint64_t v5 = v8;
        }
      }
      v5 -= 16;
    }
    while (v5);
  }
  *((_DWORD *)this + 110) = 0;
  int v6 = *((_DWORD *)this + 46);
  if (v6)
  {
    if (v6 == 1) {
      return;
    }
  }
  else
  {
    if (!*((_DWORD *)this + 47)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*((void **)this + 22), 4uLL);
  }
  *((_DWORD *)this + 46) = 1;
}

void llvm::SchedRemainder::init(llvm::SchedRemainder *this, llvm::ScheduleDAGMI *a2, const llvm::TargetSchedModel *a3)
{
  *((_DWORD *)this + 6) = 0;
  *(void *)this = 0;
  *(void *)((char *)this + 5) = 0;
  if (byte_1EBD06248 && *((void *)a3 + 5))
  {
    int v6 = (void **)((char *)this + 16);
    uint64_t v7 = *((unsigned int *)a3 + 12);
    if (v7)
    {
      if (*((_DWORD *)this + 7) < v7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(*v6, 4 * v7);
      *((_DWORD *)this + 6) = v7;
    }
    uint64_t v8 = *((void *)a2 + 6);
    uint64_t v9 = *((void *)a2 + 7);
    while (v8 != v9)
    {
      uint64_t v10 = *(void *)(v8 + 24);
      if (!v10)
      {
        if (byte_1EBD06248 && *((void *)a2 + 84))
        {
          uint64_t v10 = llvm::TargetSchedModel::resolveSchedClass((llvm::ScheduleDAGMI *)((char *)a2 + 632), *(const llvm::MachineInstr **)(v8 + 8));
          *(void *)(v8 + 24) = v10;
        }
        else
        {
          uint64_t v10 = 0;
        }
      }
      *((_DWORD *)this + 2) += *((_DWORD *)a3 + 68)
                             * llvm::TargetSchedModel::getNumMicroOps((uint64_t)a3, *(void *)(v8 + 8), v10);
      if (*(_WORD *)(v10 + 12))
      {
        uint64_t v11 = (unsigned __int16 *)(*(void *)(*((void *)a3 + 22) + 136) + 4 * *(unsigned __int16 *)(v10 + 10));
        uint64_t v12 = &v11[2 * *(unsigned __int16 *)(v10 + 12)];
        uint64_t v13 = *((void *)a3 + 24);
        unint64_t v14 = *v6;
        do
        {
          v14[*v11] += *(_DWORD *)(v13 + 4 * *v11) * v11[1];
          v11 += 2;
        }
        while (v11 != v12);
      }
      v8 += 272;
    }
  }
}

void llvm::SchedBoundary::init(llvm::SchedBoundary *this, llvm::ScheduleDAGMI *a2, const llvm::TargetSchedModel *a3, llvm::SchedRemainder *a4)
{
  llvm::SchedBoundary::reset(this);
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  if (byte_1EBD06248 && *((void *)a3 + 5))
  {
    unint64_t v8 = *((unsigned int *)a3 + 12);
    unsigned int v9 = *((_DWORD *)this + 90);
    if (v9 != v8)
    {
      if (v9 <= v8)
      {
        if (*((_DWORD *)this + 91) < v8) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v9 != v8) {
          bzero((void *)(*((void *)this + 44) + 4 * v9), 4 * (v8 - v9));
        }
      }
      *((_DWORD *)this + 90) = v8;
    }
    unsigned int v10 = *((_DWORD *)this + 46);
    if (v10 != v8)
    {
      if (v10 <= v8)
      {
        if (*((_DWORD *)this + 47) < v8) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v10 != v8) {
          bzero((void *)(*((void *)this + 22) + 4 * v10), 4 * (v8 - v10));
        }
      }
      *((_DWORD *)this + 46) = v8;
    }
    unsigned int v43 = v8;
    if (v8 > 0x40) {
      operator new[]();
    }
    uint64_t v42 = 0;
    uint64_t v11 = (void *)((char *)this + 432);
    uint64_t v12 = *((unsigned int *)this + 110);
    unsigned int v13 = v8;
    if (v12 != v8)
    {
      if (v12 > v8)
      {
        uint64_t v34 = *v11 + 16 * v12 - 8;
        uint64_t v35 = 16 * v8 - 16 * v12;
        unsigned int v36 = (unsigned int *)v34;
        do
        {
          unsigned int v37 = *v36;
          v36 -= 4;
          if (v37 >= 0x41)
          {
            uint64_t v38 = *(void *)(v34 - 8);
            if (v38) {
              MEMORY[0x1D25D9CB0](v38, 0x1000C8000313F17);
            }
          }
          uint64_t v34 = (uint64_t)v36;
          v35 += 16;
        }
        while (v35);
        unsigned int v13 = v8;
        int v21 = v8;
        uint64_t v11 = (void *)((char *)this + 432);
      }
      else
      {
        uint64_t v14 = v8 - v12;
        uint64_t v15 = (const llvm::APInt *)&v42;
        if (v8 > *((_DWORD *)this + 111))
        {
          uint64_t v41 = *((unsigned int *)this + 110);
          BOOL v39 = *v11 + 16 * v12 > (unint64_t)&v42;
          if (*v11 <= (unint64_t)&v42 && v39)
          {
            int v40 = (char *)&v42 - *v11;
            sub_1CBFC6948((uint64_t)this + 432, v8);
            uint64_t v15 = (const llvm::APInt *)&v40[*v11];
          }
          else
          {
            sub_1CBFC6948((uint64_t)this + 432, v8);
            uint64_t v15 = (const llvm::APInt *)&v42;
          }
          uint64_t v12 = v41;
        }
        uint64_t v16 = *((unsigned int *)this + 110);
        if (v14)
        {
          uint64_t v17 = (llvm::APInt *)(*v11 + 16 * v16);
          uint64_t v18 = v12 - v8;
          do
          {
            unsigned int v19 = *((_DWORD *)v15 + 2);
            *((_DWORD *)v17 + 2) = v19;
            if (v19 > 0x40) {
              llvm::APInt::initSlowCase(v17, v15);
            }
            *(void *)uint64_t v17 = *(void *)v15;
            uint64_t v17 = (llvm::APInt *)((char *)v17 + 16);
          }
          while (!__CFADD__(v18++, 1));
          LODWORD(v16) = *((_DWORD *)this + 110);
        }
        int v21 = v16 + v14;
        unsigned int v13 = v43;
      }
      *((_DWORD *)this + 110) = v21;
    }
    if (v13 >= 0x41 && v42) {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
    if (v8)
    {
      uint64_t v22 = 0;
      unsigned int v23 = 0;
      do
      {
        *(_DWORD *)(*((void *)this + 44) + 4 * v22) = v23;
        uint64_t v24 = *(void *)(*((void *)this + 1) + 32) + 32 * v22;
        int v25 = *(_DWORD *)(v24 + 8);
        uint64_t v26 = *(unsigned int **)(v24 + 24);
        if (v26)
        {
          if (!*(_DWORD *)(v24 + 16) && v25 != 0)
          {
            uint64_t v30 = *(unsigned int *)(v24 + 8);
            do
            {
              uint64_t v31 = *v11 + 16 * v22;
              unsigned int v33 = *v26++;
              unint64_t v32 = v33;
              if (*(_DWORD *)(v31 + 8) >= 0x41u) {
                uint64_t v31 = *(void *)v31 + ((v32 >> 3) & 0x1FFFFFF8);
              }
              *(void *)v31 |= 1 << v32;
              --v30;
            }
            while (v30);
          }
        }
        v23 += v25;
        ++v22;
      }
      while (v22 != v8);
    }
    else
    {
      unsigned int v23 = 0;
    }
    uint64_t v27 = *((unsigned int *)this + 70);
    if (v23 != v27 && v23 >= v27) {
      goto LABEL_34;
    }
    if (v23 != v27)
    {
      if (v23 < v27)
      {
LABEL_36:
        *((_DWORD *)this + 70) = v23;
        return;
      }
LABEL_34:
      int v28 = v23 - v27;
      if (v23 > *((_DWORD *)this + 71)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memset((void *)(*((void *)this + 34) + 4 * *((unsigned int *)this + 70)), 255, 4 * (v23 - v27));
      unsigned int v23 = v28 + *((_DWORD *)this + 70);
      goto LABEL_36;
    }
  }
}

uint64_t llvm::SchedBoundary::getLatencyStallCycles(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 228) & 0x4000) == 0) {
    return 0;
  }
  uint64_t v3 = 252;
  if (*(_DWORD *)(a1 + 24) == 1) {
    uint64_t v3 = 248;
  }
  unsigned int v4 = *(_DWORD *)(a2 + v3);
  unsigned int v5 = *(_DWORD *)(a1 + 148);
  BOOL v6 = v4 >= v5;
  unsigned int v7 = v4 - v5;
  if (v6) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t llvm::SchedBoundary::getNextResourceCycleByInstance(llvm::SchedBoundary *this, unsigned int a2, int a3)
{
  int v3 = *(_DWORD *)(*((void *)this + 34) + 4 * a2);
  if (v3 == -1) {
    return 0;
  }
  if (*((_DWORD *)this + 6) == 1) {
    int v4 = 0;
  }
  else {
    int v4 = a3;
  }
  return (v4 + v3);
}

uint64_t llvm::SchedBoundary::getNextResourceCycle(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *(unsigned int *)(*(void *)(a1 + 352) + 4 * a3);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v5 + 32) + 32 * a3;
  int v7 = *(_DWORD *)(v6 + 8);
  if (!*(void *)(v6 + 24) || *(_DWORD *)(v6 + 16))
  {
    uint64_t v8 = (v7 + v4);
    if (v4 < v8)
    {
      LODWORD(v9) = 0;
      LODWORD(v10) = -1;
      do
      {
        int v11 = *(_DWORD *)(*(void *)(a1 + 272) + 4 * v4);
        if (v11 == -1)
        {
          unsigned int v13 = 0;
        }
        else
        {
          if (*(_DWORD *)(a1 + 24) == 1) {
            unsigned int v12 = 0;
          }
          else {
            unsigned int v12 = a4;
          }
          unsigned int v13 = v12 + v11;
        }
        if (v10 <= v13) {
          uint64_t v9 = v9;
        }
        else {
          uint64_t v9 = v4;
        }
        if (v10 >= v13) {
          uint64_t v10 = v13;
        }
        else {
          uint64_t v10 = v10;
        }
        ++v4;
      }
      while (v8 != v4);
      return v10 | (v9 << 32);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v27 = *(unsigned int **)(v6 + 24);
  uint64_t v28 = *(unsigned int *)(v6 + 8);
  if (!*(_WORD *)(a2 + 12))
  {
LABEL_25:
    if (v7)
    {
      LODWORD(v20) = 0;
      LODWORD(v21) = -1;
      do
      {
        uint64_t v22 = *v27++;
        uint64_t NextResourceCycle = llvm::SchedBoundary::getNextResourceCycle(a1, a2, v22, a4);
        if (v21 <= NextResourceCycle) {
          uint64_t v20 = v20;
        }
        else {
          uint64_t v20 = HIDWORD(NextResourceCycle);
        }
        if (v21 >= NextResourceCycle) {
          uint64_t v21 = NextResourceCycle;
        }
        else {
          uint64_t v21 = v21;
        }
        --v28;
      }
      while (v28);
      return v21 | (v20 << 32);
    }
    return 0xFFFFFFFFLL;
  }
  uint64_t v15 = (unsigned __int16 *)(*(void *)(*(void *)(v5 + 176) + 136) + 4 * *(unsigned __int16 *)(a2 + 10));
  uint64_t v16 = *(void *)(a1 + 432) + 16 * a3;
  uint64_t v17 = 4 * *(unsigned __int16 *)(a2 + 12);
  while (1)
  {
    unint64_t v18 = *v15;
    unsigned int v19 = (void *)(*(void *)(a1 + 432) + 16 * a3);
    if (*(_DWORD *)(v16 + 8) >= 0x41u) {
      unsigned int v19 = (void *)(*(void *)v16 + ((v18 >> 3) & 0x1FF8));
    }
    if ((*v19 >> v18)) {
      return v4 << 32;
    }
    v15 += 2;
    v17 -= 4;
    if (!v17) {
      goto LABEL_25;
    }
  }
}

BOOL llvm::SchedBoundary::checkHazard(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)(a1 + 136);
  if (v4[2] && (*(unsigned int (**)(_DWORD *, uint64_t, void))(*(void *)v4 + 24))(v4, a2, 0)) {
    return 1;
  }
  int NumMicroOps = llvm::TargetSchedModel::getNumMicroOps(*(void *)(a1 + 8), *(void *)(a2 + 8), 0);
  int v6 = *(_DWORD *)(a1 + 152);
  if (v6)
  {
    unsigned int v16 = v6 + NumMicroOps;
    uint64_t v17 = *(llvm::TargetSchedModel **)(a1 + 8);
    if (v16 <= *(_DWORD *)v17)
    {
      if (*(_DWORD *)(a1 + 24) == 1)
      {
        if (llvm::TargetSchedModel::mustBeginGroup((uint64_t)v17, *(void *)(a2 + 8), 0)) {
          return 1;
        }
        if (*(_DWORD *)(a1 + 24) == 1) {
          goto LABEL_3;
        }
        uint64_t v17 = *(llvm::TargetSchedModel **)(a1 + 8);
      }
      if ((llvm::TargetSchedModel::mustEndGroup(v17, *(const llvm::MachineInstr **)(a2 + 8), 0) & 1) == 0) {
        goto LABEL_3;
      }
    }
    return 1;
  }
  if (!byte_1EBD06248) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (!*(void *)(v7 + 40) || (*(__int16 *)(a2 + 228) & 0x80000000) == 0) {
    return 0;
  }
LABEL_3:
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8)
  {
    if (*(void *)(*(void *)a1 + 672))
    {
      uint64_t v8 = llvm::TargetSchedModel::resolveSchedClass((llvm::TargetSchedModel *)(*(void *)a1 + 632), *(const llvm::MachineInstr **)(a2 + 8));
      *(void *)(a2 + 24) = v8;
      uint64_t v7 = *(void *)(a1 + 8);
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  if (!*(_WORD *)(v8 + 12)) {
    return 0;
  }
  uint64_t v9 = (unsigned __int16 *)(*(void *)(*(void *)(v7 + 176) + 136) + 4 * *(unsigned __int16 *)(v8 + 10));
  uint64_t v10 = &v9[2 * *(unsigned __int16 *)(v8 + 12)];
  do
  {
    unsigned int NextResourceCycle = llvm::SchedBoundary::getNextResourceCycle(a1, v8, *v9, v9[1]);
    unsigned int v12 = *(_DWORD *)(a1 + 148);
    BOOL v13 = v12 >= NextResourceCycle;
    BOOL result = v12 < NextResourceCycle;
    v9 += 2;
  }
  while (v13 && v9 != v10);
  return result;
}

uint64_t llvm::SchedBoundary::findMaxLatency(uint64_t a1, llvm::SUnit **a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  LODWORD(v5) = 0;
  uint64_t v6 = 8 * a3;
  do
  {
    uint64_t v7 = *a2++;
    unsigned int v8 = sub_1CD549360(*(_DWORD *)(a1 + 24), v7);
    if (v8 <= v5) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v8;
    }
    v6 -= 8;
  }
  while (v6);
  return v5;
}

void llvm::SchedBoundary::releaseNode(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  if (*(_DWORD *)(a1 + 156) > a3) {
    *(_DWORD *)(a1 + 156) = a3;
  }
  if (!*(_DWORD *)(*(void *)(a1 + 8) + 4) && *(_DWORD *)(a1 + 148) < a3
    || llvm::SchedBoundary::checkHazard(a1, a2)
    || (uint64_t v10 = *(uint64_t **)(a1 + 56),
        uint64_t v9 = *(uint64_t **)(a1 + 64),
        uint64_t v11 = (char *)v9 - (char *)v10,
        dword_1EBD05908 <= ((unint64_t)((char *)v9 - (char *)v10) >> 3)))
  {
    if (a4) {
      return;
    }
    uint64_t v17 = *(uint64_t **)(a1 + 120);
    unint64_t v16 = *(void *)(a1 + 128);
    if ((unint64_t)v17 >= v16)
    {
      uint64_t v26 = *(void **)(a1 + 112);
      uint64_t v27 = v17 - v26;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61) {
        goto LABEL_46;
      }
      uint64_t v29 = v16 - (void)v26;
      if (v29 >> 2 > v28) {
        unint64_t v28 = v29 >> 2;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      if (v30)
      {
        if (v30 >> 61) {
          goto LABEL_47;
        }
        uint64_t v31 = (char *)operator new(8 * v30);
      }
      else
      {
        uint64_t v31 = 0;
      }
      unint64_t v32 = (uint64_t *)&v31[8 * v27];
      *unint64_t v32 = a2;
      unint64_t v18 = v32 + 1;
      if (v17 != v26)
      {
        do
        {
          uint64_t v33 = *--v17;
          *--unint64_t v32 = v33;
        }
        while (v17 != v26);
        uint64_t v17 = *(uint64_t **)(a1 + 112);
      }
      *(void *)(a1 + 112) = v32;
      *(void *)(a1 + 120) = v18;
      *(void *)(a1 + 128) = &v31[8 * v30];
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v17 = a2;
      unint64_t v18 = v17 + 1;
    }
    *(void *)(a1 + 120) = v18;
    *(_DWORD *)(a2 + 196) |= *(_DWORD *)(a1 + 80);
    return;
  }
  unint64_t v12 = *(void *)(a1 + 72);
  if ((unint64_t)v9 >= v12)
  {
    uint64_t v19 = v11 >> 3;
    unint64_t v20 = (v11 >> 3) + 1;
    if (!(v20 >> 61))
    {
      uint64_t v21 = v12 - (void)v10;
      if (v21 >> 2 > v20) {
        unint64_t v20 = v21 >> 2;
      }
      if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v20;
      }
      if (!v22)
      {
        unsigned int v23 = 0;
        goto LABEL_25;
      }
      if (!(v22 >> 61))
      {
        unsigned int v23 = (char *)operator new(8 * v22);
LABEL_25:
        uint64_t v24 = (uint64_t *)&v23[8 * v19];
        *uint64_t v24 = a2;
        BOOL v13 = v24 + 1;
        if (v9 != v10)
        {
          do
          {
            uint64_t v25 = *--v9;
            *--uint64_t v24 = v25;
          }
          while (v9 != v10);
          uint64_t v9 = *(uint64_t **)(a1 + 56);
        }
        *(void *)(a1 + 56) = v24;
        *(void *)(a1 + 64) = v13;
        *(void *)(a1 + 72) = &v23[8 * v22];
        if (v9) {
          operator delete(v9);
        }
        goto LABEL_11;
      }
LABEL_47:
      sub_1CB833614();
    }
LABEL_46:
    abort();
  }
  *uint64_t v9 = a2;
  BOOL v13 = v9 + 1;
LABEL_11:
  *(void *)(a1 + 64) = v13;
  *(_DWORD *)(a2 + 196) |= *(_DWORD *)(a1 + 24);
  if (a4)
  {
    uint64_t v14 = *(void *)(a1 + 112);
    uint64_t v15 = *(void *)(a1 + 120);
    *(_DWORD *)(*(void *)(v14 + 8 * a5) + 196) &= ~*(_DWORD *)(a1 + 80);
    *(void *)(v14 + 8 * a5) = *(void *)(v15 - 8);
    *(void *)(a1 + 120) -= 8;
  }
}

uint64_t llvm::SchedBoundary::bumpCycle(uint64_t this, unsigned int a2)
{
  uint64_t v2 = *(_DWORD **)(this + 8);
  if (!v2[1] && *(_DWORD *)(this + 156) > a2) {
    a2 = *(_DWORD *)(this + 156);
  }
  int v3 = *(_DWORD *)(this + 148);
  unsigned int v4 = *(_DWORD *)(this + 152);
  unsigned int v5 = a2 - v3;
  unsigned int v6 = (a2 - v3) * *v2;
  BOOL v7 = v4 >= v6;
  unsigned int v8 = v4 - v6;
  if (!v7) {
    unsigned int v8 = 0;
  }
  *(_DWORD *)(this + 152) = v8;
  unsigned int v9 = *(_DWORD *)(this + 164);
  BOOL v7 = v9 >= v5;
  unsigned int v10 = v9 - v5;
  if (!v7) {
    unsigned int v10 = 0;
  }
  *(_DWORD *)(this + 164) = v10;
  if (*(_DWORD *)(*(void *)(this + 136) + 8))
  {
    if (a2 != v3)
    {
      unsigned int v17 = a2;
      uint64_t v18 = this;
      do
      {
        uint64_t v15 = **(void **)(v18 + 136);
        if (*(_DWORD *)(v18 + 24) == 1) {
          (*(void (**)(void))(v15 + 80))();
        }
        else {
          (*(void (**)(void))(v15 + 88))();
        }
        int v16 = *(_DWORD *)(v18 + 148) + 1;
        *(_DWORD *)(v18 + 148) = v16;
      }
      while (v16 != v17);
      this = v18;
      uint64_t v2 = *(_DWORD **)(v18 + 8);
      a2 = v17;
    }
  }
  else
  {
    *(_DWORD *)(this + 148) = a2;
  }
  *(unsigned char *)(this + 144) = 1;
  int v11 = v2[69];
  uint64_t v12 = *(unsigned int *)(this + 260);
  if (v12) {
    int v13 = *(_DWORD *)(*(void *)(this + 176) + 4 * v12);
  }
  else {
    int v13 = v2[68] * *(_DWORD *)(this + 168);
  }
  unsigned int v14 = *(_DWORD *)(this + 160);
  if (v14 <= a2) {
    unsigned int v14 = a2;
  }
  *(unsigned char *)(this + 264) = (int)(v13 - v14 * v11) >= v11;
  return this;
}

uint64_t llvm::SchedBoundary::incExecutedResources(uint64_t this, unsigned int a2, int a3)
{
  uint64_t v3 = *(void *)(this + 176);
  unsigned int v4 = *(_DWORD *)(v3 + 4 * a2) + a3;
  *(_DWORD *)(v3 + 4 * a2) = v4;
  if (v4 > *(_DWORD *)(this + 256)) {
    *(_DWORD *)(this + 256) = v4;
  }
  return this;
}

uint64_t llvm::SchedBoundary::countResource(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 176);
  int v6 = *(_DWORD *)(*(void *)(v4 + 192) + 4 * a3) * a4;
  unsigned int v7 = *(_DWORD *)(v5 + 4 * a3) + v6;
  *(_DWORD *)(v5 + 4 * a3) = v7;
  if (v7 > *(_DWORD *)(a1 + 256)) {
    *(_DWORD *)(a1 + 256) = v7;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 16) + 4 * a3) -= v6;
  uint64_t v8 = *(unsigned int *)(a1 + 260);
  if (v8 != a3)
  {
    if (v8) {
      unsigned int v9 = *(_DWORD *)(v5 + 4 * v8);
    }
    else {
      unsigned int v9 = *(_DWORD *)(v4 + 272) * *(_DWORD *)(a1 + 168);
    }
    if (*(_DWORD *)(v5 + 4 * a3) > v9) {
      *(_DWORD *)(a1 + 260) = a3;
    }
  }
  return llvm::SchedBoundary::getNextResourceCycle(a1, a2, a3, a4);
}

void llvm::SchedBoundary::bumpNode(llvm::SchedBoundary *this, llvm::SUnit *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (_DWORD *)*((void *)this + 17);
  if (v4[2])
  {
    if (*((_DWORD *)this + 6) != 1 && (*((_WORD *)a2 + 114) & 2) != 0)
    {
      (*(void (**)(_DWORD *))(*(void *)v4 + 32))(v4);
      uint64_t v4 = (_DWORD *)*((void *)this + 17);
    }
    (*(void (**)(_DWORD *, llvm::SUnit *))(*(void *)v4 + 40))(v4, v2);
    *((unsigned char *)this + 144) = 1;
  }
  uint64_t v5 = *((void *)v2 + 3);
  int v6 = &unk_1EBD06000;
  if (!v5)
  {
    if (byte_1EBD06248 && *(void *)(*(void *)this + 672))
    {
      uint64_t v5 = llvm::TargetSchedModel::resolveSchedClass((llvm::TargetSchedModel *)(*(void *)this + 632), *((const llvm::MachineInstr **)v2 + 1));
      *((void *)v2 + 3) = v5;
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  int NumMicroOps = llvm::TargetSchedModel::getNumMicroOps(*((void *)this + 1), *((void *)v2 + 1), 0);
  int v8 = NumMicroOps;
  uint64_t v9 = 252;
  if (*((_DWORD *)this + 6) == 1) {
    uint64_t v9 = 248;
  }
  unsigned int v10 = *((_DWORD *)this + 37);
  uint64_t v11 = *((void *)this + 1);
  int v12 = *(_DWORD *)(v11 + 4);
  if (v12)
  {
    unsigned int v78 = *(_DWORD *)((char *)v2 + v9);
    if (v12 == 1)
    {
      if (v78 > v10) {
        unsigned int v10 = v78;
      }
    }
    else if (((v78 > v10) & (*((unsigned __int16 *)v2 + 114) >> 14)) != 0)
    {
      unsigned int v10 = v78;
    }
  }
  int v13 = *((_DWORD *)this + 42) + NumMicroOps;
  *((_DWORD *)this + 42) = v13;
  if (byte_1EBD06248 && *(void *)(v11 + 40))
  {
    int v14 = *(_DWORD *)(v11 + 272);
    uint64_t v15 = *((void *)this + 2);
    *(_DWORD *)(v15 + 8) -= v14 * NumMicroOps;
    uint64_t v16 = *((unsigned int *)this + 65);
    if (v16 && v14 * v13 - *(_DWORD *)(*((void *)this + 22) + 4 * v16) >= *(_DWORD *)(v11 + 276)) {
      *((_DWORD *)this + 65) = 0;
    }
    uint64_t v17 = *(unsigned __int16 *)(v5 + 12);
    if (*(_WORD *)(v5 + 12))
    {
      int v85 = NumMicroOps;
      uint64_t v86 = (__int16 *)v2;
      uint64_t v83 = *(unsigned __int16 *)(v5 + 10);
      uint64_t v84 = *(void *)(*(void *)(v11 + 176) + 136);
      uint64_t v18 = (unsigned __int16 *)(v84 + 4 * v83);
      uint64_t v19 = &v18[2 * v17];
      uint64_t v20 = *(void *)(v11 + 192);
      uint64_t v21 = *((void *)this + 22);
      uint64_t v22 = *(void *)(v15 + 16);
      do
      {
        uint64_t v23 = *v18;
        unsigned int v24 = v18[1];
        int v25 = *(_DWORD *)(v20 + 4 * v23) * v24;
        unsigned int v26 = *(_DWORD *)(v21 + 4 * v23) + v25;
        *(_DWORD *)(v21 + 4 * v23) = v26;
        if (v26 > *((_DWORD *)this + 64)) {
          *((_DWORD *)this + 64) = v26;
        }
        *(_DWORD *)(v22 + 4 * v23) -= v25;
        uint64_t v27 = *((unsigned int *)this + 65);
        if (v27 != v23)
        {
          unsigned int v28 = v27 ? *(_DWORD *)(v21 + 4 * v27) : *(_DWORD *)(v11 + 272) * *((_DWORD *)this + 42);
          if (*(_DWORD *)(v21 + 4 * v23) > v28) {
            *((_DWORD *)this + 65) = v23;
          }
        }
        unsigned int NextResourceCycle = llvm::SchedBoundary::getNextResourceCycle((uint64_t)this, v5, v23, v24);
        if (NextResourceCycle > v10) {
          unsigned int v10 = NextResourceCycle;
        }
        v18 += 2;
      }
      while (v18 != v19);
      uint64_t v2 = (llvm::SUnit *)v86;
      if (v86[114] < 0)
      {
        uint64_t v30 = *(void *)(v11 + 32);
        uint64_t v31 = 4 * v17;
        unint64_t v32 = (unsigned __int16 *)(v84 + 4 * v83 + 2);
        int v8 = v85;
        do
        {
          uint64_t v33 = *(v32 - 1);
          if (!*(_DWORD *)(v30 + 32 * v33 + 16))
          {
            unint64_t v34 = llvm::SchedBoundary::getNextResourceCycle((uint64_t)this, v5, v33, 0);
            unsigned int v35 = v10;
            if (*((_DWORD *)this + 6) == 1)
            {
              unsigned int v35 = v10 + *v32;
              if (v34 > v35) {
                unsigned int v35 = v34;
              }
            }
            *(_DWORD *)(*((void *)this + 34) + 4 * HIDWORD(v34)) = v35;
          }
          v32 += 2;
          v31 -= 4;
        }
        while (v31);
        int v6 = &unk_1EBD06000;
      }
      else
      {
        int v6 = (unsigned char *)&unk_1EBD06000;
        int v8 = v85;
      }
    }
  }
  int v36 = *((_DWORD *)this + 6);
  if (v36 == 1) {
    unsigned int v37 = (char *)this + 160;
  }
  else {
    unsigned int v37 = (char *)this + 164;
  }
  if (v36 == 1) {
    uint64_t v38 = (char *)this + 164;
  }
  else {
    uint64_t v38 = (char *)this + 160;
  }
  char v39 = *((unsigned char *)v2 + 236);
  if ((v39 & 1) == 0)
  {
    llvm::SUnit::ComputeDepth(v2);
    char v39 = *((unsigned char *)v2 + 236);
  }
  unsigned int v40 = *((_DWORD *)v2 + 60);
  if (v40 > *(_DWORD *)v37)
  {
    if ((v39 & 1) == 0)
    {
      llvm::SUnit::ComputeDepth(v2);
      unsigned int v40 = *((_DWORD *)v2 + 60);
    }
    *(_DWORD *)unsigned int v37 = v40;
    char v39 = *((unsigned char *)v2 + 236);
  }
  if ((v39 & 2) == 0) {
    llvm::SUnit::ComputeHeight(v2);
  }
  unsigned int v41 = *((_DWORD *)v2 + 61);
  if (v41 > *(_DWORD *)v38)
  {
    if ((*((unsigned char *)v2 + 236) & 2) == 0)
    {
      llvm::SUnit::ComputeHeight(v2);
      unsigned int v41 = *((_DWORD *)v2 + 61);
    }
    *(_DWORD *)uint64_t v38 = v41;
  }
  unsigned int v42 = *((_DWORD *)this + 37);
  uint64_t v43 = *((void *)this + 1);
  if (v10 > v42)
  {
    unsigned int v47 = v10;
    if (!*(_DWORD *)(v43 + 4))
    {
      if (*((_DWORD *)this + 39) <= v10) {
        unsigned int v47 = v10;
      }
      else {
        unsigned int v47 = *((_DWORD *)this + 39);
      }
    }
    unsigned int v71 = v47 - v42;
    unsigned int v72 = (v47 - v42) * *(_DWORD *)v43;
    unsigned int v73 = *((_DWORD *)this + 38);
    BOOL v62 = v73 >= v72;
    unsigned int v74 = v73 - v72;
    if (!v62) {
      unsigned int v74 = 0;
    }
    *((_DWORD *)this + 38) = v74;
    unsigned int v75 = *((_DWORD *)this + 41);
    BOOL v62 = v75 >= v71;
    unsigned int v76 = v75 - v71;
    if (!v62) {
      unsigned int v76 = 0;
    }
    *((_DWORD *)this + 41) = v76;
    if (*(_DWORD *)(*((void *)this + 17) + 8))
    {
      if (v47 != v42)
      {
        do
        {
          uint64_t v81 = **((void **)this + 17);
          if (*((_DWORD *)this + 6) == 1) {
            (*(void (**)(void))(v81 + 80))();
          }
          else {
            (*(void (**)(void))(v81 + 88))();
          }
          int v82 = *((_DWORD *)this + 37) + 1;
          *((_DWORD *)this + 37) = v82;
        }
        while (v82 != v47);
        uint64_t v43 = *((void *)this + 1);
      }
    }
    else
    {
      *((_DWORD *)this + 37) = v47;
    }
    *((unsigned char *)this + 144) = 1;
    int v44 = *(_DWORD *)(v43 + 276);
    uint64_t v77 = *((unsigned int *)this + 65);
    if (v77) {
      int v46 = *(_DWORD *)(*((void *)this + 22) + 4 * v77);
    }
    else {
      int v46 = *(_DWORD *)(v43 + 272) * *((_DWORD *)this + 42);
    }
  }
  else
  {
    int v44 = *(_DWORD *)(v43 + 276);
    uint64_t v45 = *((unsigned int *)this + 65);
    if (v45) {
      int v46 = *(_DWORD *)(*((void *)this + 22) + 4 * v45);
    }
    else {
      int v46 = *(_DWORD *)(v43 + 272) * *((_DWORD *)this + 42);
    }
    unsigned int v47 = *((_DWORD *)this + 37);
  }
  unsigned int v48 = *((_DWORD *)this + 40);
  if (v48 <= v47) {
    unsigned int v48 = v47;
  }
  *((unsigned char *)this + 264) = (int)(v46 - v48 * v44) >= v44;
  *((_DWORD *)this + 38) += v8;
  if (*((_DWORD *)this + 6) != 1)
  {
LABEL_49:
    if (v6[584])
    {
      uint64_t v49 = *(void *)(v43 + 40);
      if (v49)
      {
        uint64_t v50 = v49 + 24 * *(unsigned __int16 *)(*(void *)(*((void *)v2 + 1) + 16) + 6);
        if ((*(_WORD *)(v50 + 8) & 0x1FFF) == 0x1FFE)
        {
          do
          {
            unsigned int v69 = (*(uint64_t (**)(void))(**(void **)(v43 + 176) + 200))(*(void *)(v43 + 176));
            uint64_t v70 = *(void *)(v43 + 40);
          }
          while ((*(_WORD *)(v70 + 24 * v69 + 8) & 0x1FFF) == 0x1FFE);
          uint64_t v50 = v70 + 24 * v69;
        }
        int v51 = *(unsigned __int16 *)(v50 + 8);
        int v52 = ~v51 & 0x1FFF;
        int v53 = v51 & 0x2000;
        if (v52 && v53 != 0) {
          goto LABEL_116;
        }
      }
    }
    goto LABEL_57;
  }
  if (llvm::TargetSchedModel::mustEndGroup((llvm::TargetSchedModel *)v43, *((const llvm::MachineInstr **)v2 + 1), 0))
  {
LABEL_116:
    llvm::SchedBoundary::bumpCycle((uint64_t)this, ++v10);
    goto LABEL_57;
  }
  if (*((_DWORD *)this + 6) != 1)
  {
    uint64_t v43 = *((void *)this + 1);
    goto LABEL_49;
  }
LABEL_57:
  unsigned int v55 = *((_DWORD *)this + 38);
  unint64_t v56 = (unsigned int *)*((void *)this + 1);
  for (unsigned int i = *v56; v55 >= *v56; unsigned int i = *v56)
  {
    unsigned int v58 = ++v10;
    if (!v56[1])
    {
      if (*((_DWORD *)this + 39) <= v10) {
        unsigned int v58 = v10;
      }
      else {
        unsigned int v58 = *((_DWORD *)this + 39);
      }
    }
    int v59 = *((_DWORD *)this + 37);
    unsigned int v60 = v58 - v59;
    unsigned int v61 = (v58 - v59) * i;
    BOOL v62 = v55 >= v61;
    unsigned int v63 = v55 - v61;
    if (!v62) {
      unsigned int v63 = 0;
    }
    *((_DWORD *)this + 38) = v63;
    unsigned int v64 = *((_DWORD *)this + 41);
    BOOL v62 = v64 >= v60;
    unsigned int v65 = v64 - v60;
    if (!v62) {
      unsigned int v65 = 0;
    }
    *((_DWORD *)this + 41) = v65;
    if (*(_DWORD *)(*((void *)this + 17) + 8))
    {
      if (v58 != v59)
      {
        do
        {
          uint64_t v79 = **((void **)this + 17);
          if (*((_DWORD *)this + 6) == 1) {
            (*(void (**)(void))(v79 + 80))();
          }
          else {
            (*(void (**)(void))(v79 + 88))();
          }
          int v80 = *((_DWORD *)this + 37) + 1;
          *((_DWORD *)this + 37) = v80;
        }
        while (v80 != v58);
        unint64_t v56 = (unsigned int *)*((void *)this + 1);
      }
    }
    else
    {
      *((_DWORD *)this + 37) = v58;
    }
    *((unsigned char *)this + 144) = 1;
    uint64_t v66 = *((unsigned int *)this + 65);
    if (v66) {
      int v67 = *(_DWORD *)(*((void *)this + 22) + 4 * v66);
    }
    else {
      int v67 = v56[68] * *((_DWORD *)this + 42);
    }
    unsigned int v68 = *((_DWORD *)this + 40);
    if (v68 <= v58) {
      unsigned int v68 = v58;
    }
    *((unsigned char *)this + 264) = (int)(v67 - v68 * v56[69]) >= (int)v56[69];
    unsigned int v55 = *((_DWORD *)this + 38);
  }
}

void llvm::SchedBoundary::releasePending(llvm::SchedBoundary *this)
{
  if (*((void *)this + 7) == *((void *)this + 8)) {
    *((_DWORD *)this + 39) = -1;
  }
  uint64_t v2 = *((void *)this + 14);
  unint64_t v3 = (unint64_t)(*((void *)this + 15) - v2) >> 3;
  if (v3)
  {
    unsigned int v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4);
      if (*((_DWORD *)this + 6) == 1) {
        uint64_t v6 = 248;
      }
      else {
        uint64_t v6 = 252;
      }
      unsigned int v7 = *(_DWORD *)(v5 + v6);
      if (v7 < *((_DWORD *)this + 39)) {
        *((_DWORD *)this + 39) = v7;
      }
      if (dword_1EBD05908 <= ((*((void *)this + 8) - *((void *)this + 7)) >> 3)) {
        break;
      }
      llvm::SchedBoundary::releaseNode((uint64_t)this, v5, v7, 1, v4);
      uint64_t v2 = *((void *)this + 14);
      BOOL v8 = v3 != (unint64_t)(*((void *)this + 15) - v2) >> 3;
      LODWORD(v3) = v3 - v8;
      unsigned int v4 = v4 - v8 + 1;
    }
    while (v4 < v3);
  }
  *((unsigned char *)this + 144) = 0;
}

void *llvm::SchedBoundary::removeReady(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & *(_DWORD *)(a2 + 196)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 64);
    BOOL result = (void *)(a1 + 64);
    uint64_t v4 = v5;
    uint64_t v6 = *(result - 1);
    if (v6 != v5)
    {
      while (*(void *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v4)
        {
          uint64_t v6 = v4;
          break;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 120);
    uint64_t v6 = *(void *)(a1 + 112);
    if (v6 != v4)
    {
      while (*(void *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v4)
        {
          uint64_t v6 = *(void *)(a1 + 120);
          break;
        }
      }
    }
    int v2 = *(_DWORD *)(a1 + 80);
    BOOL result = (void *)(a1 + 120);
  }
  *(_DWORD *)(*(void *)v6 + 196) &= ~v2;
  *(void *)uint64_t v6 = *(void *)(v4 - 8);
  *result -= 8;
  return result;
}

uint64_t llvm::SchedBoundary::pickOnlyChoice(llvm::SchedBoundary *this)
{
  if (*((unsigned char *)this + 144))
  {
    if (*((void *)this + 7) == *((void *)this + 8)) {
      *((_DWORD *)this + 39) = -1;
    }
    uint64_t v2 = *((void *)this + 14);
    unint64_t v3 = (unint64_t)(*((void *)this + 15) - v2) >> 3;
    if (v3)
    {
      unsigned int v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(v2 + 8 * v4);
        if (*((_DWORD *)this + 6) == 1) {
          uint64_t v6 = 248;
        }
        else {
          uint64_t v6 = 252;
        }
        unsigned int v7 = *(_DWORD *)(v5 + v6);
        if (v7 < *((_DWORD *)this + 39)) {
          *((_DWORD *)this + 39) = v7;
        }
        if (dword_1EBD05908 <= ((*((void *)this + 8) - *((void *)this + 7)) >> 3)) {
          break;
        }
        llvm::SchedBoundary::releaseNode((uint64_t)this, v5, v7, 1, v4);
        uint64_t v2 = *((void *)this + 14);
        BOOL v8 = v3 != (unint64_t)(*((void *)this + 15) - v2) >> 3;
        LODWORD(v3) = v3 - v8;
        unsigned int v4 = v4 - v8 + 1;
      }
      while (v4 < v3);
    }
    *((unsigned char *)this + 144) = 0;
  }
  uint64_t v9 = (uint64_t *)*((void *)this + 7);
  if (v9 == *((uint64_t **)this + 8)) {
    goto LABEL_43;
  }
  do
  {
    if (llvm::SchedBoundary::checkHazard((uint64_t)this, *v9))
    {
      uint64_t v12 = *v9;
      int v14 = (uint64_t *)*((void *)this + 15);
      unint64_t v13 = *((void *)this + 16);
      if ((unint64_t)v14 >= v13)
      {
        uint64_t v17 = (void *)*((void *)this + 14);
        uint64_t v18 = v14 - v17;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          abort();
        }
        uint64_t v20 = v13 - (void)v17;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 61) {
            sub_1CB833614();
          }
          uint64_t v22 = (char *)operator new(8 * v21);
        }
        else
        {
          uint64_t v22 = 0;
        }
        uint64_t v23 = (uint64_t *)&v22[8 * v18];
        *uint64_t v23 = v12;
        uint64_t v15 = v23 + 1;
        if (v14 != v17)
        {
          do
          {
            uint64_t v24 = *--v14;
            *--uint64_t v23 = v24;
          }
          while (v14 != v17);
          int v14 = (uint64_t *)*((void *)this + 14);
        }
        *((void *)this + 14) = v23;
        *((void *)this + 15) = v15;
        *((void *)this + 16) = &v22[8 * v21];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        uint64_t *v14 = v12;
        uint64_t v15 = v14 + 1;
      }
      *((void *)this + 15) = v15;
      *(_DWORD *)(v12 + 196) |= *((_DWORD *)this + 20);
      *(_DWORD *)(*v9 + 196) &= ~*((_DWORD *)this + 6);
      *uint64_t v9 = *(void *)(*((void *)this + 8) - 8);
      uint64_t v16 = *((void *)this + 7);
      uint64_t v10 = *((void *)this + 8) - 8;
      *((void *)this + 8) = v10;
      uint64_t v9 = (uint64_t *)(v16 + (((unint64_t)v9 - v16) & 0x7FFFFFFF8));
    }
    else
    {
      ++v9;
      uint64_t v10 = *((void *)this + 8);
    }
  }
  while (v9 != (uint64_t *)v10);
  uint64_t v11 = *((void *)this + 7);
  while (v11 == v10)
  {
LABEL_43:
    int v26 = *((_DWORD *)this + 37);
    unsigned int v27 = v26 + 1;
    unsigned int v28 = (_DWORD *)*((void *)this + 1);
    if (!v28[1] && *((_DWORD *)this + 39) > v27) {
      unsigned int v27 = *((_DWORD *)this + 39);
    }
    unsigned int v29 = v27 - v26;
    unsigned int v30 = (v27 - v26) * *v28;
    unsigned int v31 = *((_DWORD *)this + 38);
    BOOL v32 = v31 >= v30;
    unsigned int v33 = v31 - v30;
    if (!v32) {
      unsigned int v33 = 0;
    }
    *((_DWORD *)this + 38) = v33;
    unsigned int v34 = *((_DWORD *)this + 41);
    BOOL v32 = v34 >= v29;
    unsigned int v35 = v34 - v29;
    if (!v32) {
      unsigned int v35 = 0;
    }
    *((_DWORD *)this + 41) = v35;
    if (*(_DWORD *)(*((void *)this + 17) + 8))
    {
      if (v27 != v26)
      {
        do
        {
          uint64_t v47 = **((void **)this + 17);
          if (*((_DWORD *)this + 6) == 1) {
            (*(void (**)(void))(v47 + 80))();
          }
          else {
            (*(void (**)(void))(v47 + 88))();
          }
          int v48 = *((_DWORD *)this + 37) + 1;
          *((_DWORD *)this + 37) = v48;
        }
        while (v48 != v27);
        unsigned int v28 = (_DWORD *)*((void *)this + 1);
      }
    }
    else
    {
      *((_DWORD *)this + 37) = v27;
    }
    *((unsigned char *)this + 144) = 1;
    int v36 = v28[69];
    uint64_t v37 = *((unsigned int *)this + 65);
    if (v37) {
      int v38 = *(_DWORD *)(*((void *)this + 22) + 4 * v37);
    }
    else {
      int v38 = v28[68] * *((_DWORD *)this + 42);
    }
    unsigned int v39 = *((_DWORD *)this + 40);
    if (v39 <= v27) {
      unsigned int v39 = v27;
    }
    *((unsigned char *)this + 264) = (int)(v38 - v39 * v36) >= v36;
    uint64_t v11 = *((void *)this + 7);
    uint64_t v10 = *((void *)this + 8);
    if (v11 == v10) {
      *((_DWORD *)this + 39) = -1;
    }
    uint64_t v40 = *((void *)this + 14);
    unint64_t v41 = (unint64_t)(*((void *)this + 15) - v40) >> 3;
    if (v41)
    {
      unsigned int v42 = 0;
      while (1)
      {
        uint64_t v43 = *(void *)(v40 + 8 * v42);
        if (*((_DWORD *)this + 6) == 1) {
          uint64_t v44 = 248;
        }
        else {
          uint64_t v44 = 252;
        }
        unsigned int v45 = *(_DWORD *)(v43 + v44);
        if (v45 < *((_DWORD *)this + 39)) {
          *((_DWORD *)this + 39) = v45;
        }
        uint64_t v11 = *((void *)this + 7);
        uint64_t v10 = *((void *)this + 8);
        if (dword_1EBD05908 <= ((unint64_t)(v10 - v11) >> 3)) {
          break;
        }
        llvm::SchedBoundary::releaseNode((uint64_t)this, v43, v45, 1, v42);
        uint64_t v40 = *((void *)this + 14);
        BOOL v46 = v41 != (unint64_t)(*((void *)this + 15) - v40) >> 3;
        LODWORD(v41) = v41 - v46;
        unsigned int v42 = v42 - v46 + 1;
        if (v42 >= v41)
        {
          uint64_t v11 = *((void *)this + 7);
          uint64_t v10 = *((void *)this + 8);
          break;
        }
      }
    }
    *((unsigned char *)this + 144) = 0;
  }
  if (((v10 - v11) & 0x7FFFFFFF8) == 8) {
    return *(void *)v11;
  }
  else {
    return 0;
  }
}

BOOL llvm::GenericSchedulerBase::shouldReduceLatency(uint64_t a1, uint64_t a2, uint64_t a3, char a4, int *a5)
{
  unsigned int v5 = *(_DWORD *)(a3 + 148);
  unsigned int v6 = *(_DWORD *)(a1 + 32);
  if (v5 > v6) {
    return 1;
  }
  if (!v5) {
    return 0;
  }
  if (a4)
  {
    int v11 = sub_1CC394774(a3);
    *a5 = v11;
    unsigned int v5 = *(_DWORD *)(a3 + 148);
    unsigned int v6 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    int v11 = *a5;
  }
  return v11 + v5 > v6;
}

uint64_t sub_1CC394774(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 164);
  unint64_t v3 = *(llvm::SUnit ***)(a1 + 56);
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64) - (void)v3;
  if (v5)
  {
    uint64_t v6 = 8 * (v5 >> 3);
    do
    {
      unsigned int v7 = *v3++;
      unsigned int v8 = sub_1CD549360(*(_DWORD *)(a1 + 24), v7);
      if (v8 > v4) {
        unsigned int v4 = v8;
      }
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v9 = *(llvm::SUnit ***)(a1 + 112);
  unsigned int v10 = 0;
  uint64_t v11 = *(void *)(a1 + 120) - (void)v9;
  if (v11)
  {
    uint64_t v12 = 8 * (v11 >> 3);
    do
    {
      unint64_t v13 = *v9++;
      unsigned int v14 = sub_1CD549360(*(_DWORD *)(a1 + 24), v13);
      if (v14 > v10) {
        unsigned int v10 = v14;
      }
      v12 -= 8;
    }
    while (v12);
  }
  if (v2 <= v4) {
    unsigned int v15 = v4;
  }
  else {
    unsigned int v15 = v2;
  }
  if (v15 <= v10) {
    return v10;
  }
  else {
    return v15;
  }
}

uint64_t llvm::tryLess(int a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a1 < a2)
  {
    uint64_t v5 = (unsigned char *)(a3 + 24);
    goto LABEL_5;
  }
  if (a1 > a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a4 + 24);
    uint64_t v5 = (unsigned char *)(a4 + 24);
    if (v6 <= a5) {
      return 1;
    }
LABEL_5:
    *uint64_t v5 = a5;
    return 1;
  }
  return 0;
}

uint64_t llvm::tryGreater(int a1, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  if (a1 > a2)
  {
    uint64_t v5 = (unsigned char *)(a3 + 24);
LABEL_6:
    *uint64_t v5 = a5;
    return 1;
  }
  if (a1 >= a2) {
    return 0;
  }
  unsigned int v6 = *(unsigned __int8 *)(a4 + 24);
  uint64_t v5 = (unsigned char *)(a4 + 24);
  if (v6 > a5) {
    goto LABEL_6;
  }
  return 1;
}

void llvm::GenericScheduler::initialize(llvm::GenericScheduler *this, llvm::ScheduleDAGMI *a2)
{
  *((void *)this + 16) = a2;
  unint64_t v3 = (llvm::ScheduleDAGMI *)((char *)a2 + 632);
  uint64_t v4 = *((void *)a2 + 3);
  *((void *)this + 2) = (char *)a2 + 632;
  *((void *)this + 3) = v4;
  if (*((unsigned char *)this + 141))
  {
    llvm::ScheduleDAGMILive::computeDFSResult(a2);
    a2 = (llvm::ScheduleDAGMI *)*((void *)this + 16);
    unint64_t v3 = (const llvm::TargetSchedModel *)*((void *)this + 2);
  }
  llvm::SchedRemainder::init((llvm::GenericScheduler *)((char *)this + 32), a2, v3);
  llvm::SchedBoundary::init((llvm::GenericScheduler *)((char *)this + 144), *((llvm::ScheduleDAGMI **)this + 16), *((const llvm::TargetSchedModel **)this + 2), (llvm::GenericScheduler *)((char *)this + 32));
  llvm::SchedBoundary::init((llvm::GenericScheduler *)((char *)this + 848), *((llvm::ScheduleDAGMI **)this + 16), *((const llvm::TargetSchedModel **)this + 2), (llvm::GenericScheduler *)((char *)this + 32));
  if (!*((void *)this + 35))
  {
    uint64_t v5 = *(void *)(*(void *)(*((void *)this + 16) + 32) + 16);
    uint64_t v6 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
    *((void *)this + 35) = (*(uint64_t (**)(void))(v6 + 872))();
  }
  if (!*((void *)this + 123))
  {
    uint64_t v7 = *(void *)(*(void *)(*((void *)this + 16) + 32) + 16);
    uint64_t v8 = *(void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 104))(v7);
    *((void *)this + 123) = (*(uint64_t (**)(void))(v8 + 872))();
  }
  *((void *)this + 196) = 0;
  *((void *)this + 202) = 0;
}

uint64_t llvm::GenericScheduler::initPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) + 32);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v6 + 16) + 120))(*(void *)(v6 + 16));
  *(unsigned char *)(a1 + 136) = 1;
  uint64_t v8 = 17;
  do
  {
    if (*(void *)(v7 + 8 * v8))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 56);
      unsigned int v10 = (unsigned __int16 ***)(*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v7 + 424))(v7, v8 - 12, 0);
      unsigned int v11 = *((unsigned __int16 *)*v10 + 12);
      uint64_t v12 = *(void *)v9;
      if (*(_DWORD *)(v9 + 8) != *(_DWORD *)(*(void *)v9 + 24 * *((unsigned __int16 *)*v10 + 12))) {
        llvm::RegisterClassInfo::compute((uint64_t *)v9, v10);
      }
      *(unsigned char *)(a1 + 136) = a4 > *(_DWORD *)(v12 + 24 * v11 + 4) >> 1;
    }
    unint64_t v13 = v8 - 13;
    --v8;
  }
  while (v13 > 2);
  *(unsigned char *)(a1 + 139) = 1;
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 + 16) + 296))(*(void *)(v6 + 16), a1 + 136, a4);
  if (!byte_1EBCCFE10) {
    *(_WORD *)(a1 + 136) = 0;
  }
  if (word_1EBD05650)
  {
    int v15 = byte_1EBD056C8;
    *(unsigned char *)(a1 + 139) = byte_1EBD056C8;
    if (v15) {
      *(unsigned char *)(a1 + 138) = 0;
    }
  }
  if (word_1EBD05590)
  {
    int v16 = byte_1EBD05608;
    *(unsigned char *)(a1 + 138) = byte_1EBD05608;
    if (v16) {
      *(unsigned char *)(a1 + 139) = 0;
    }
  }
  return result;
}

void llvm::GenericScheduler::registerRoots(llvm::GenericScheduler *this)
{
  uint64_t v2 = *((void *)this + 16);
  if ((*(unsigned char *)(v2 + 580) & 1) == 0) {
    llvm::SUnit::ComputeDepth((llvm::SUnit *)(v2 + 344));
  }
  unsigned int v3 = *(_DWORD *)(v2 + 584);
  *((_DWORD *)this + 8) = v3;
  uint64_t v4 = (llvm::SUnit **)*((void *)this + 113);
  uint64_t v5 = (llvm::SUnit **)*((void *)this + 114);
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    if ((*((unsigned char *)*v4 + 236) & 1) == 0)
    {
      llvm::SUnit::ComputeDepth(*v4);
      unsigned int v3 = *((_DWORD *)this + 8);
    }
    unsigned int v7 = *((_DWORD *)v6 + 60);
    if (v7 > v3)
    {
      if ((*((unsigned char *)v6 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v6);
        unsigned int v7 = *((_DWORD *)v6 + 60);
      }
      *((_DWORD *)this + 8) = v7;
      unsigned int v3 = v7;
    }
    ++v4;
  }
  if (byte_1EBD05788)
  {
    uint64_t v8 = (llvm::raw_ostream *)llvm::errs(this);
    uint64_t v9 = sub_1CB8E509C(v8, "Critical Path(GS-RR): ");
    unsigned int v10 = llvm::raw_ostream::operator<<(v9, *((unsigned int *)this + 8));
    sub_1CB8E509C(v10, " \n");
  }
  if (byte_1EBCCFED0 && *(_DWORD *)(*((void *)this + 2) + 4))
  {
    *((_DWORD *)this + 9) = llvm::ScheduleDAGMILive::computeCyclicCriticalPath(*((llvm::ScheduleDAGMILive **)this + 16));
    llvm::GenericScheduler::checkAcyclicLatency((uint64_t)this);
  }
}

uint64_t llvm::getWeakLeft(uint64_t a1, int a2)
{
  uint64_t v2 = 220;
  if (a2) {
    uint64_t v2 = 216;
  }
  return *(unsigned int *)(a1 + v2);
}

uint64_t llvm::biasPhysReg(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = *(unsigned __int16 **)(v2 + 16);
  int v4 = *v3;
  if (a2)
  {
    if (v4 == 19)
    {
      uint64_t v23 = *(void *)(v2 + 32);
      if ((*(_DWORD *)(v23 + 32 * a2 + 4) - 1) < 0x3FFFFFFF) {
        return 1;
      }
      uint64_t v24 = 208;
      if (a2) {
        uint64_t v24 = 212;
      }
      unsigned int v25 = *(_DWORD *)(v23 + 32 * (a2 ^ 1) + 4) - 0x40000000;
      if (*(_DWORD *)(a1 + v24)) {
        uint64_t result = 1;
      }
      else {
        uint64_t result = 0xFFFFFFFFLL;
      }
      if (v25 > 0xC0000000) {
        return result;
      }
    }
    uint64_t v17 = *((void *)v3 + 1);
    if ((v17 & 0x2000) == 0) {
      return 0;
    }
    uint64_t v18 = *(void *)(v2 + 32);
    unsigned int v19 = *((unsigned __int8 *)v3 + 4);
    if ((v17 & 2) == 0 || (int v26 = *(_DWORD *)(v2 + 40), v26 == v19))
    {
      unsigned int v20 = v19;
    }
    else
    {
      int v27 = v26 - 1;
      unsigned int v20 = v19;
      do
      {
        int v28 = *(_DWORD *)(v18 + 32 * v19);
        if ((v28 & 0x10000FF) != 0x1000000) {
          break;
        }
        v20 += (v28 & 0x2000000) == 0;
        if (v27 == v19) {
          break;
        }
        ++v19;
      }
      while ((v28 & 0x2000000) == 0);
    }
    if (v20)
    {
      uint64_t v21 = 32 * v20;
      uint64_t v22 = (_DWORD *)(v18 + 4);
      while (*((unsigned char *)v22 - 4) || (*v22 - 1) <= 0x3FFFFFFE)
      {
        v22 += 8;
        v21 -= 32;
        if (!v21) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    if (a2) {
      return 0xFFFFFFFFLL;
    }
    else {
      return 1;
    }
  }
  if (v4 != 19)
  {
LABEL_3:
    uint64_t v5 = *((void *)v3 + 1);
    if ((v5 & 0x2000) == 0) {
      return 0;
    }
    uint64_t v7 = *(void *)(v2 + 32);
    unsigned int v8 = *((unsigned __int8 *)v3 + 4);
    if ((v5 & 2) == 0 || (int v14 = *(_DWORD *)(v2 + 40), v14 == v8))
    {
      unsigned int v9 = v8;
    }
    else
    {
      int v15 = v14 - 1;
      unsigned int v9 = v8;
      do
      {
        int v16 = *(_DWORD *)(v7 + 32 * v8);
        if ((v16 & 0x10000FF) != 0x1000000) {
          break;
        }
        v9 += (v16 & 0x2000000) == 0;
        if (v15 == v8) {
          break;
        }
        ++v8;
      }
      while ((v16 & 0x2000000) == 0);
    }
    if (v9)
    {
      uint64_t v10 = 32 * v9;
      unsigned int v11 = (_DWORD *)(v7 + 4);
      uint64_t result = 1;
      while (*((unsigned char *)v11 - 4) || (*v11 - 1) <= 0x3FFFFFFE)
      {
        v11 += 8;
        v10 -= 32;
        if (!v10) {
          return result;
        }
      }
      return 0;
    }
    return 1;
  }
  uint64_t v12 = *(void *)(v2 + 32);
  if ((*(_DWORD *)(v12 + 32 * a2 + 4) - 1) < 0x3FFFFFFF) {
    return 1;
  }
  unsigned int v13 = *(_DWORD *)(v12 + 32 * (a2 ^ 1) + 4) - 0x40000000;
  if (*(_DWORD *)(a1 + 208)) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = 0xFFFFFFFFLL;
  }
  if (v13 <= 0xC0000000) {
    goto LABEL_3;
  }
  return result;
}

uint64_t llvm::GenericScheduler::pickNodeBidirectional(llvm::GenericScheduler *this, BOOL *a2)
{
  int v4 = (llvm::GenericScheduler *)((char *)this + 848);
  uint64_t result = llvm::SchedBoundary::pickOnlyChoice((llvm::GenericScheduler *)((char *)this + 848));
  if (result)
  {
    *a2 = 0;
  }
  else
  {
    uint64_t result = llvm::SchedBoundary::pickOnlyChoice((llvm::GenericScheduler *)((char *)this + 144));
    if (result)
    {
      char v6 = 1;
    }
    else
    {
      v17[0] = 0;
      uint64_t v18 = 0;
      llvm::GenericSchedulerBase::setPolicy((uint64_t)this, (uint64_t)v17, 0, (uint64_t)v4, (llvm::GenericScheduler *)((char *)this + 144));
      v15[0] = 0;
      uint64_t v16 = 0;
      llvm::GenericSchedulerBase::setPolicy((uint64_t)this, (uint64_t)v15, 0, (uint64_t)this + 144, v4);
      uint64_t v7 = (void *)((char *)this + 1600);
      uint64_t v8 = *((void *)this + 202);
      if (!v8
        || (*(_WORD *)(v8 + 228) & 0x400) != 0
        || *(unsigned __int8 *)v7 != v17[0]
        || *(void *)((char *)this + 1604) != v18)
      {
        *((void *)this + 205) = 0;
        *((void *)this + 202) = 0;
        *((void *)this + 203) = 0;
        *(void *)((char *)this + 1630) = 0;
        *uint64_t v7 = 0;
        *((_DWORD *)this + 402) = 0;
        llvm::GenericScheduler::pickNodeFromQueue((const llvm::TargetSchedModel **)this, (uint64_t)v4, (uint64_t *)v17, (llvm::RegPressureTracker *)(*((void *)this + 16) + 4840), (uint64_t)this + 1600);
      }
      unsigned int v9 = (void *)((char *)this + 1552);
      uint64_t v10 = *((void *)this + 196);
      if (!v10
        || (*(_WORD *)(v10 + 228) & 0x400) != 0
        || *(unsigned __int8 *)v9 != v15[0]
        || *(void *)((char *)this + 1556) != v16)
      {
        *((void *)this + 199) = 0;
        *((void *)this + 196) = 0;
        *((void *)this + 197) = 0;
        *(void *)((char *)this + 1582) = 0;
        *unsigned int v9 = 0;
        *((_DWORD *)this + 390) = 0;
        llvm::GenericScheduler::pickNodeFromQueue((const llvm::TargetSchedModel **)this, (uint64_t)this + 144, (uint64_t *)v15, (llvm::RegPressureTracker *)(*((void *)this + 16) + 4160), (uint64_t)this + 1552);
      }
      long long v11 = *((_OWORD *)this + 101);
      long long v12 = *(_OWORD *)v7;
      long long v13 = v11;
      long long v14 = *((_OWORD *)this + 102);
      *((unsigned char *)this + 1576) = 0;
      if ((*(uint64_t (**)(llvm::GenericScheduler *, long long *, char *, void))(*(void *)this + 136))(this, &v12, (char *)this + 1552, 0))
      {
        uint64_t result = *((void *)this + 196);
        char v6 = *((unsigned char *)this + 1577);
      }
      else
      {
        char v6 = BYTE9(v13);
        uint64_t result = v13;
      }
    }
    *a2 = v6;
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> llvm::GenericScheduler::reschedulePhysReg(uint64_t **this, llvm::SUnit *a2, int a3)
{
  uint64_t v3 = *((void *)a2 + 1);
  if ((a3 & 1) == 0)
  {
    if (!v3 || (*(unsigned char *)v3 & 4) == 0)
    {
      while ((*(_WORD *)(v3 + 44) & 8) != 0)
        uint64_t v3 = *(void *)(v3 + 8);
    }
    uint64_t v3 = *(void *)(v3 + 8);
  }
  int v4 = (char *)a2 + 32;
  uint64_t v5 = 112;
  if (a3) {
    uint64_t v5 = 32;
  }
  else {
    int v4 = (char *)a2 + 112;
  }
  uint64_t v6 = *((unsigned int *)v4 + 2);
  if (v6)
  {
    uint64_t v7 = *(void *)((char *)a2 + v5);
    uint64_t v8 = 16 * v6;
    unsigned int v9 = (_DWORD *)(v7 + 8);
    do
    {
      uint64_t v10 = *((void *)v9 - 1);
      if ((v10 & 6) == 0 && (*v9 - 1) <= 0x3FFFFFFE)
      {
        unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
        if (a3) {
          unsigned int v12 = *(_DWORD *)(v11 + 120);
        }
        else {
          unsigned int v12 = *(_DWORD *)(v11 + 40);
        }
        if (v12 <= 1)
        {
          uint64_t v13 = *(void *)(v11 + 8);
          uint64_t v14 = *(void *)(v13 + 16);
          if (*(_WORD *)v14 == 19 || (*(unsigned char *)(v14 + 9) & 0x20) != 0)
          {
            uint64_t v17 = v9;
            uint64_t v18 = v8;
            int v16 = a3;
            uint64_t v15 = v3;
            llvm::ScheduleDAGMI::moveInstruction(this[16], v13, (unint64_t *)v3);
            unsigned int v9 = v17;
            uint64_t v8 = v18;
            uint64_t v3 = v15;
            a3 = v16;
          }
        }
      }
      v9 += 4;
      v8 -= 16;
    }
    while (v8);
  }
}

void llvm::GenericScheduler::schedNode(llvm::GenericScheduler *this, llvm::SUnit *a2, int a3)
{
  if (!a3)
  {
    uint64_t v6 = (llvm::GenericScheduler *)((char *)this + 848);
    unsigned int v7 = *((_DWORD *)this + 249);
    if (*((_DWORD *)a2 + 63) > v7) {
      unsigned int v7 = *((_DWORD *)a2 + 63);
    }
    *((_DWORD *)a2 + 63) = v7;
    llvm::SchedBoundary::bumpNode(v6, a2);
    if ((*((_WORD *)a2 + 114) & 0x40) == 0) {
      return;
    }
LABEL_9:
    llvm::GenericScheduler::reschedulePhysReg((uint64_t **)this, a2, a3);
    return;
  }
  uint64_t v8 = (llvm::GenericScheduler *)((char *)this + 144);
  unsigned int v9 = *((_DWORD *)this + 73);
  if (*((_DWORD *)a2 + 62) > v9) {
    unsigned int v9 = *((_DWORD *)a2 + 62);
  }
  *((_DWORD *)a2 + 62) = v9;
  llvm::SchedBoundary::bumpNode(v8, a2);
  if ((*((_WORD *)a2 + 114) & 0x20) != 0) {
    goto LABEL_9;
  }
}

void sub_1CC395348()
{
}

void sub_1CC39541C()
{
}

void sub_1CC3954FC()
{
}

void sub_1CC3955DC(uint64_t a1)
{
  *(void *)a1 = &unk_1F260F260;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  operator new();
}

void *sub_1CC39572C(void *a1)
{
  uint64_t v2 = (llvm::Pass *)(a1 + 8);
  a1[8] = &unk_1F260E110;
  uint64_t v3 = (void *)a1[30];
  if (v3 != a1 + 32)
  {
    unsigned int v9 = v2;
    free(v3);
    uint64_t v2 = v9;
  }
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23)
  {
    uint64_t v10 = v2;
    free(v4);
    uint64_t v2 = v10;
  }
  uint64_t v5 = (void *)a1[12];
  if (v5 != a1 + 14)
  {
    unint64_t v11 = v2;
    free(v5);
    uint64_t v2 = v11;
  }
  llvm::Pass::~Pass(v2);
  *a1 = &unk_1F260F260;
  uint64_t v6 = (uint64_t *)a1[7];
  if (v6)
  {
    uint64_t v8 = sub_1CD50C1C0(v6);
    MEMORY[0x1D25D9CE0](v8, 0x10F0C4030087745);
  }
  return a1;
}

void sub_1CC395828(void *a1)
{
  uint64_t v2 = (llvm::Pass *)(a1 + 8);
  a1[8] = &unk_1F260E110;
  uint64_t v3 = (void *)a1[30];
  if (v3 != a1 + 32)
  {
    uint64_t v8 = v2;
    free(v3);
    uint64_t v2 = v8;
  }
  int v4 = (void *)a1[21];
  if (v4 != a1 + 23)
  {
    unsigned int v9 = v2;
    free(v4);
    uint64_t v2 = v9;
  }
  uint64_t v5 = (void *)a1[12];
  if (v5 != a1 + 14)
  {
    uint64_t v10 = v2;
    free(v5);
    uint64_t v2 = v10;
  }
  llvm::Pass::~Pass(v2);
  *a1 = &unk_1F260F260;
  uint64_t v6 = (uint64_t *)a1[7];
  if (v6)
  {
    unsigned int v7 = sub_1CD50C1C0(v6);
    MEMORY[0x1D25D9CE0](v7, 0x10F0C4030087745);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC395948(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1 + 64, a2);
}

uint64_t sub_1CC395A64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (llvm::Pass *)(a1 + 64);
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)(a1 + 64), *(llvm::LLVMContextImpl *****)a2)) {
    return 0;
  }
  if (word_1EBCD0158)
  {
    if (!byte_1EBCD01D0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 232))(*(void *)(a2 + 16));
    if (!result) {
      return result;
    }
  }
  *(void *)(a1 + 8) = a2;
  uint64_t v6 = *(uint64_t **)(a1 + 72);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_10:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::MachineLoopInfo::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::MachineLoopInfo::ID);
  uint64_t v10 = *(uint64_t **)(a1 + 72);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_15:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::MachineDominatorTree::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::MachineDominatorTree::ID);
  uint64_t v14 = *(uint64_t **)(a1 + 72);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_20:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::TargetPassConfig::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_20;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::TargetPassConfig::ID);
  uint64_t v18 = *(uint64_t **)(a1 + 72);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (v19 == v20)
  {
LABEL_25:
    uint64_t v21 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v19 != &llvm::AAResultsWrapperPass::ID)
    {
      v19 += 16;
      if (v19 == v20) {
        goto LABEL_25;
      }
    }
    uint64_t v21 = *(void *)(v19 + 8);
  }
  *(void *)(a1 + 40) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v21 + 96))(v21, &llvm::AAResultsWrapperPass::ID)+ 32);
  uint64_t v22 = *(uint64_t **)(a1 + 72);
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  if (v23 == v24)
  {
LABEL_30:
    uint64_t v25 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v23 != &llvm::LiveIntervals::ID)
    {
      v23 += 16;
      if (v23 == v24) {
        goto LABEL_30;
      }
    }
    uint64_t v25 = *(void *)(v23 + 8);
  }
  *(void *)(a1 + 48) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v25 + 96))(v25, &llvm::LiveIntervals::ID);
  if (byte_1EBD05848) {
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 8), v4, "Before machine scheduling.", 1);
  }
  llvm::RegisterClassInfo::runOnMachineFunction(*(llvm::RegisterClassInfo **)(a1 + 56), *(const llvm::MachineFunction **)(a1 + 8));
  if ((char *)xmmword_1EBCD0350 == (char *)sub_1CC38FC10)
  {
    int v26 = (llvm::ScheduleDAGInstrs *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 256))(*(void *)(a1 + 32), a1);
    if (!v26) {
      llvm::createGenericSchedLive((llvm *)a1, v27);
    }
  }
  else
  {
    int v26 = (llvm::ScheduleDAGInstrs *)xmmword_1EBCD0350(a1);
  }
  sub_1CC396008(a1, v26, 0);
  if (byte_1EBD05848) {
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 8), v4, "After machine scheduling.", 1);
  }
  (*(void (**)(llvm::ScheduleDAGInstrs *))(*(void *)v26 + 8))(v26);
  return 1;
}

uint64_t *sub_1CC395E20(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);
  *((void *)this - 8) = &unk_1F260F260;
  uint64_t result = (uint64_t *)*((void *)this - 1);
  if (result)
  {
    uint64_t v6 = sub_1CD50C1C0(result);
    return (uint64_t *)MEMORY[0x1D25D9CE0](v6, 0x10F0C4030087745);
  }
  return result;
}

void sub_1CC395EF0(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);
  *((void *)this - 8) = &unk_1F260F260;
  uint64_t v5 = (uint64_t *)*((void *)this - 1);
  if (v5)
  {
    uint64_t v6 = sub_1CD50C1C0(v5);
    MEMORY[0x1D25D9CE0](v6, 0x10F0C4030087745);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC395FE8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CC395FF0(uint64_t a1, uint64_t a2)
{
  return sub_1CC395A64(a1 - 64, a2);
}

uint64_t sub_1CC396008(uint64_t a1, llvm::ScheduleDAGInstrs *a2, char a3)
{
  v80[48] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 328);
  uint64_t v74 = v4 + 320;
  if (v5 != v4 + 320)
  {
    while (1)
    {
      (*(void (**)(llvm::ScheduleDAGInstrs *, uint64_t))(*(void *)a2 + 80))(a2, v5);
      unsigned int v78 = v80;
      uint64_t v79 = 0x1000000000;
      char v6 = (*(uint64_t (**)(llvm::ScheduleDAGInstrs *))(*(void *)a2 + 72))(a2);
      uint64_t v7 = *(void *)(v5 + 32);
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v7 + 16) + 104))(*(void *)(v7 + 16));
      uint64_t v9 = (void *)(v5 + 48);
      if (v5 + 48 != *(void *)(v5 + 56))
      {
        uint64_t v10 = v8;
        unint64_t v11 = v5 + 48;
        do
        {
          if ((void *)v11 != v9) {
            goto LABEL_11;
          }
          unint64_t v12 = *v9 & 0xFFFFFFFFFFFFFFF8;
          if (!v12 || (*(unsigned char *)v12 & 4) == 0)
          {
            while ((*(_WORD *)(v12 + 44) & 4) != 0)
              unint64_t v12 = *(void *)v12 & 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t v13 = v5 + 48;
          if (sub_1CC396794(v12, v5, v7, v10))
          {
LABEL_11:
            unint64_t v13 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
            if (!v13 || (*(unsigned char *)v13 & 4) == 0)
            {
              while ((*(_WORD *)(v13 + 44) & 4) != 0)
                unint64_t v13 = *(void *)v13 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          if (v13 == *(void *)(v5 + 56))
          {
            unint64_t v11 = v13;
          }
          else
          {
            int v14 = 0;
            unint64_t v11 = v13;
            do
            {
              unint64_t v15 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
              if (!v15 || (*(unsigned char *)v15 & 4) == 0)
              {
                while ((*(_WORD *)(v15 + 44) & 4) != 0)
                  unint64_t v15 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
              }
              if (sub_1CC396794(v15, v5, v7, v10)) {
                break;
              }
              int v16 = **(unsigned __int16 **)(v15 + 16);
              BOOL v17 = v16 == 23 || (v16 - 18) >= 0xFFFFFFFB;
              uint64_t v18 = *(void *)v11;
              if (!v17) {
                ++v14;
              }
              unint64_t v11 = v18 & 0xFFFFFFFFFFFFFFF8;
              if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v11 & 4) == 0)
              {
                while ((*(_WORD *)(v11 + 44) & 4) != 0)
                  unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
              }
            }
            while (v11 != *(void *)(v5 + 56));
            if (v14)
            {
              *(void *)&long long v76 = v11;
              *((void *)&v76 + 1) = v13;
              LODWORD(v77) = v14;
              if (v79 >= HIDWORD(v79))
              {
                if (v78 > &v76 || (char *)v78 + 24 * v79 <= (char *)&v76) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t v19 = (char *)v78 + 24 * v79;
              long long v20 = v76;
              *((void *)v19 + 2) = v77;
              *(_OWORD *)uint64_t v19 = v20;
              LODWORD(v79) = v79 + 1;
            }
          }
        }
        while (v11 != *(void *)(v5 + 56));
      }
      uint64_t v21 = (char *)v78;
      uint64_t v22 = v79;
      if ((v6 & 1) == 0 || !v79)
      {
        uint64_t v24 = a1;
        uint64_t v25 = &unk_1EBD05000;
        if (v79) {
          break;
        }
        goto LABEL_105;
      }
      uint64_t v23 = (char *)v78 + 24 * v79 - 24;
      uint64_t v24 = a1;
      uint64_t v25 = (unsigned char *)&unk_1EBD05000;
      if (v78 < v23)
      {
        int v26 = (char *)v78 + 24;
        do
        {
          long long v27 = *(_OWORD *)(v26 - 24);
          uint64_t v28 = *((void *)v26 - 1);
          int v29 = *((_DWORD *)v23 + 4);
          *(_OWORD *)(v26 - 24) = *(_OWORD *)v23;
          *((_DWORD *)v26 - 2) = v29;
          *((_DWORD *)v23 + 4) = v28;
          *(_OWORD *)uint64_t v23 = v27;
          v23 -= 24;
          BOOL v17 = v26 >= v23;
          v26 += 24;
        }
        while (!v17);
        uint64_t v21 = (char *)v78;
        uint64_t v22 = v79;
      }
      if (v22) {
        break;
      }
LABEL_105:
      (*(void (**)(llvm::ScheduleDAGInstrs *))(*(void *)a2 + 88))(a2);
      if (a3) {
        llvm::ScheduleDAGInstrs::fixupKills(a2, (const llvm::MachineFunction **)v5);
      }
      if (v78 != v80) {
        free(v78);
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v74) {
        return (*(uint64_t (**)(llvm::ScheduleDAGInstrs *))(*(void *)a2 + 120))(a2);
      }
    }
    unsigned int v30 = &v21[24 * v22];
    while (1)
    {
      unsigned int v31 = *(void **)v21;
      BOOL v32 = (void *)*((void *)v21 + 1);
      unsigned int v33 = (llvm *)(*(uint64_t (**)(llvm::ScheduleDAGInstrs *, uint64_t, void, void *, void))(*(void *)a2 + 96))(a2, v5, *(void *)v21, v32, *((unsigned int *)v21 + 4));
      if (v31 == v32) {
        goto LABEL_99;
      }
      unint64_t v34 = *v32 & 0xFFFFFFFFFFFFFFF8;
      if (!v34 || (*(unsigned char *)v34 & 4) == 0)
      {
        while ((*(_WORD *)(v34 + 44) & 4) != 0)
          unint64_t v34 = *(void *)v34 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((void *)v34 == v31) {
        goto LABEL_99;
      }
      if (v25[1928]) {
        break;
      }
LABEL_98:
      (*(void (**)(llvm::ScheduleDAGInstrs *))(*(void *)a2 + 112))(a2);
LABEL_99:
      (*(void (**)(llvm::ScheduleDAGInstrs *))(*(void *)a2 + 104))(a2);
      v21 += 24;
      if (v21 == v30) {
        goto LABEL_105;
      }
    }
    unsigned int v35 = (llvm *)llvm::errs(v33);
    int v36 = **(uint64_t *****)(v24 + 8);
    if ((*((unsigned char *)v36 + 23) & 0x10) == 0)
    {
LABEL_76:
      uint64_t v50 = (llvm::raw_ostream *)llvm::errs(v35);
      uint64_t v51 = *((void *)v50 + 4);
      if ((unint64_t)(*((void *)v50 + 3) - v51) > 5)
      {
        *(_WORD *)(v51 + 4) = 8238;
        *(_DWORD *)uint64_t v51 = 1650599226;
        *((void *)v50 + 4) += 6;
      }
      else
      {
        uint64_t v50 = llvm::raw_ostream::write(v50, ":%bb. ", 6uLL);
      }
      unint64_t v52 = *(int *)(v5 + 24);
      if ((v52 & 0x80000000) != 0)
      {
        unint64_t v52 = -(uint64_t)v52;
        int v53 = 1;
      }
      else
      {
        int v53 = 0;
      }
      uint64_t v54 = sub_1CD098D14(v50, v52, 0, 0, v53);
      unsigned int v55 = (llvm::raw_ostream *)llvm::errs(v54);
      unint64_t v56 = v55;
      uint64_t v57 = (unsigned char *)*((void *)v55 + 4);
      if (*((unsigned char **)v55 + 3) == v57)
      {
        llvm::raw_ostream::write(v55, " ", 1uLL);
      }
      else
      {
        *uint64_t v57 = 32;
        ++*((void *)v55 + 4);
      }
      unsigned int v58 = *(uint64_t ****)(v5 + 16);
      if (!v58 || (*((unsigned char *)v58 + 23) & 0x10) == 0) {
        goto LABEL_93;
      }
      uint64_t v59 = ***v58;
      uint64_t v60 = *(void *)(v59 + 152);
      uint64_t v61 = *(unsigned int *)(v59 + 168);
      if (v61)
      {
        LODWORD(v62) = (v61 - 1) & ((v58 >> 4) ^ (v58 >> 9));
        unsigned int v63 = (uint64_t ****)(v60 + 16 * v62);
        unsigned int v64 = *v63;
        if (*v63 == v58)
        {
LABEL_91:
          int v67 = (size_t *)v63[1];
          size_t v70 = *v67;
          unsigned int v68 = v67 + 2;
          size_t v69 = v70;
          unsigned int v71 = (_WORD *)*((void *)v56 + 4);
          if (v70 <= *((void *)v56 + 3) - (void)v71)
          {
            if (v69)
            {
              memcpy(v71, v68, v69);
              unsigned int v71 = (_WORD *)(*((void *)v56 + 4) + v69);
              *((void *)v56 + 4) = v71;
            }
            goto LABEL_96;
          }
          llvm::raw_ostream::write(v56, (const char *)v68, v69);
LABEL_93:
          unsigned int v71 = (_WORD *)*((void *)v56 + 4);
LABEL_96:
          if (*((void *)v56 + 3) - (void)v71 > 1uLL)
          {
            _WORD *v71 = 2592;
            *((void *)v56 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v56, " \n", 2uLL);
          }
          goto LABEL_98;
        }
        int v65 = 1;
        while (v64 != (uint64_t ***)-4096)
        {
          int v66 = v62 + v65++;
          uint64_t v62 = v66 & (v61 - 1);
          unsigned int v64 = *(uint64_t ****)(v60 + 16 * v62);
          if (v64 == v58)
          {
            unsigned int v63 = (uint64_t ****)(v60 + 16 * v62);
            goto LABEL_91;
          }
        }
      }
      unsigned int v63 = (uint64_t ****)(v60 + 16 * v61);
      goto LABEL_91;
    }
    uint64_t v37 = v35;
    uint64_t v38 = ***v36;
    uint64_t v39 = *(void *)(v38 + 152);
    uint64_t v40 = *(unsigned int *)(v38 + 168);
    if (v40)
    {
      LODWORD(v41) = (v40 - 1) & ((v36 >> 4) ^ (v36 >> 9));
      unsigned int v42 = (uint64_t ****)(v39 + 16 * v41);
      uint64_t v43 = *v42;
      if (*v42 == v36) {
        goto LABEL_72;
      }
      int v44 = 1;
      while (v43 != (uint64_t ***)-4096)
      {
        int v45 = v41 + v44++;
        uint64_t v41 = v45 & (v40 - 1);
        uint64_t v43 = *(uint64_t ****)(v39 + 16 * v41);
        if (v43 == v36)
        {
          unsigned int v42 = (uint64_t ****)(v39 + 16 * v41);
          goto LABEL_72;
        }
      }
    }
    unsigned int v42 = (uint64_t ****)(v39 + 16 * v40);
LABEL_72:
    BOOL v46 = (size_t *)v42[1];
    size_t v49 = *v46;
    uint64_t v47 = v46 + 2;
    size_t v48 = v49;
    unsigned int v35 = (llvm *)*((void *)v35 + 4);
    if (v49 <= *((void *)v37 + 3) - (void)v35)
    {
      if (v48)
      {
        unsigned int v35 = (llvm *)memcpy(v35, v47, v48);
        *((void *)v37 + 4) += v48;
      }
    }
    else
    {
      unsigned int v35 = llvm::raw_ostream::write(v37, (const char *)v47, v48);
    }
    goto LABEL_76;
  }
  return (*(uint64_t (**)(llvm::ScheduleDAGInstrs *))(*(void *)a2 + 120))(a2);
}

uint64_t sub_1CC396794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 8);
  if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0)
  {
    if ((v4 & 0x80) == 0)
    {
      uint64_t v7 = a1;
      while ((*(_WORD *)(v7 + 44) & 8) != 0)
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if ((*(unsigned char *)(*(void *)(v7 + 16) + 8) & 0x80) != 0) {
          return 1;
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 848))(a4, a1, a2, a3);
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 848))(a4, a1, a2, a3);
  }
  return 1;
}

void sub_1CC396820()
{
}

void *sub_1CC396900(void *a1)
{
  uint64_t v2 = (llvm::Pass *)(a1 + 8);
  a1[8] = &unk_1F260E110;
  uint64_t v3 = (void *)a1[30];
  if (v3 != a1 + 32)
  {
    uint64_t v9 = v2;
    free(v3);
    uint64_t v2 = v9;
  }
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23)
  {
    uint64_t v10 = v2;
    free(v4);
    uint64_t v2 = v10;
  }
  uint64_t v5 = (void *)a1[12];
  if (v5 != a1 + 14)
  {
    unint64_t v11 = v2;
    free(v5);
    uint64_t v2 = v11;
  }
  llvm::Pass::~Pass(v2);
  *a1 = &unk_1F260F260;
  char v6 = (uint64_t *)a1[7];
  if (v6)
  {
    uint64_t v8 = sub_1CD50C1C0(v6);
    MEMORY[0x1D25D9CE0](v8, 0x10F0C4030087745);
  }
  return a1;
}

void sub_1CC3969FC(void *a1)
{
  uint64_t v2 = (llvm::Pass *)(a1 + 8);
  a1[8] = &unk_1F260E110;
  uint64_t v3 = (void *)a1[30];
  if (v3 != a1 + 32)
  {
    uint64_t v8 = v2;
    free(v3);
    uint64_t v2 = v8;
  }
  uint64_t v4 = (void *)a1[21];
  if (v4 != a1 + 23)
  {
    uint64_t v9 = v2;
    free(v4);
    uint64_t v2 = v9;
  }
  uint64_t v5 = (void *)a1[12];
  if (v5 != a1 + 14)
  {
    uint64_t v10 = v2;
    free(v5);
    uint64_t v2 = v10;
  }
  llvm::Pass::~Pass(v2);
  *a1 = &unk_1F260F260;
  char v6 = (uint64_t *)a1[7];
  if (v6)
  {
    uint64_t v7 = sub_1CD50C1C0(v6);
    MEMORY[0x1D25D9CE0](v7, 0x10F0C4030087745);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC396B18(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::TargetPassConfig::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1 + 64, a2);
}

uint64_t sub_1CC396BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (llvm::Pass *)(a1 + 64);
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)(a1 + 64), *(llvm::LLVMContextImpl *****)a2)) {
    return 0;
  }
  if (word_1EBCD0218)
  {
    if (!byte_1EBCD0290) {
      return 0;
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 272))(*(void *)(a2 + 16));
    if (!result) {
      return result;
    }
  }
  *(void *)(a1 + 8) = a2;
  char v6 = *(uint64_t **)(a1 + 72);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_10:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::MachineLoopInfo::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::MachineLoopInfo::ID);
  uint64_t v10 = *(uint64_t **)(a1 + 72);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_15:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &llvm::TargetPassConfig::ID)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &llvm::TargetPassConfig::ID);
  int v14 = *(uint64_t **)(a1 + 72);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  if (v15 == v16)
  {
LABEL_20:
    uint64_t v17 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v15 != &llvm::AAResultsWrapperPass::ID)
    {
      v15 += 16;
      if (v15 == v16) {
        goto LABEL_20;
      }
    }
    uint64_t v17 = *(void *)(v15 + 8);
  }
  *(void *)(a1 + 40) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v17 + 96))(v17, &llvm::AAResultsWrapperPass::ID)+ 32);
  if (byte_1EBD05848) {
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 8), v4, "Before post machine scheduling.", 1);
  }
  uint64_t v19 = (llvm::ScheduleDAGInstrs *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 264))(*(void *)(a1 + 32), a1);
  if (!v19) {
    llvm::createGenericSchedPostRA((llvm *)a1, v18);
  }
  sub_1CC396008(a1, v19, 1);
  if (byte_1EBD05848) {
    llvm::MachineFunction::verify(*(llvm::MachineFunction **)(a1 + 8), v4, "After post machine scheduling.", 1);
  }
  (*(void (**)(llvm::ScheduleDAGInstrs *))(*(void *)v19 + 8))(v19);
  return 1;
}

uint64_t *sub_1CC396E94(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);
  *((void *)this - 8) = &unk_1F260F260;
  uint64_t result = (uint64_t *)*((void *)this - 1);
  if (result)
  {
    char v6 = sub_1CD50C1C0(result);
    return (uint64_t *)MEMORY[0x1D25D9CE0](v6, 0x10F0C4030087745);
  }
  return result;
}

void sub_1CC396F64(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);
  *((void *)this - 8) = &unk_1F260F260;
  uint64_t v5 = (uint64_t *)*((void *)this - 1);
  if (v5)
  {
    char v6 = sub_1CD50C1C0(v5);
    MEMORY[0x1D25D9CE0](v6, 0x10F0C4030087745);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC397058(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1CC397060(uint64_t a1, uint64_t a2)
{
  return sub_1CC396BDC(a1 - 64, a2);
}

void *sub_1CC397068(void *a1)
{
  *a1 = &unk_1F260F6C0;
  uint64_t v2 = a1 + 81;
  uint64_t v3 = (void *)a1[84];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  sub_1CC397128(a1 + 20);

  return sub_1CB87DD48(a1);
}

void *sub_1CC397128(void *a1)
{
  *a1 = &unk_1F260F728;
  qword_1EBD05958 = 0;
  a1[1] = &unk_1F260F7B0;
  uint64_t v2 = (void *)a1[3];
  if (v2 != a1 + 5) {
    free(v2);
  }
  return a1;
}

void *sub_1CC3971A4(uint64_t a1)
{
  return sub_1CC397128((void *)(a1 - 8));
}

void sub_1CC3971AC(void *a1)
{
  sub_1CC397128(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3971E4(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&long long v12 = a2;
  *((void *)&v12 + 1) = a3;
  *(void *)&long long v13 = a5;
  *((void *)&v13 + 1) = a6;
  char v16 = 1;
  int v14 = &unk_1F260F800;
  uint64_t v15 = a4;
  unint64_t v6 = *(void *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 24);
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    BOOL v11 = v6 + 56 * v7 > (unint64_t)&v12;
    if (v6 > (unint64_t)&v12 || !v11) {
      sub_1CC397334();
    }
    sub_1CC397334();
  }
  uint64_t v8 = v6 + 56 * *(unsigned int *)(a1 + 24);
  long long v9 = v13;
  *(_OWORD *)uint64_t v8 = v12;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 32) = &unk_1F260F820;
  uint64_t v10 = v15;
  *(unsigned char *)(v8 + 48) = v16;
  *(void *)(v8 + 32) = &unk_1F260F800;
  *(void *)(v8 + 40) = v10;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(void *)(a1 + 8), a2, a3);
}

void sub_1CC397334()
{
}

uint64_t sub_1CC397418(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 288);
  if (v2 != (void *)(a1 + 304)) {
    free(v2);
  }
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3 != (void *)(a1 + 160)) {
    free(v3);
  }
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  return a1;
}

void *sub_1CC397484(void *a1)
{
  *a1 = &unk_1F260F840;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1CC3974D4(void *a1)
{
  *a1 = &unk_1F260F840;
  uint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC397544(void *a1, llvm::ScheduleDAGMILive *this)
{
  a1[1] = this;
  llvm::ScheduleDAGMILive::computeDFSResult(this);
  uint64_t v3 = a1[1];
  a1[2] = *(void *)(v3 + 2720);
  a1[3] = v3 + 2728;
  a1[6] = a1[5];
}

uint64_t sub_1CC397588(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v1 = *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  return sub_1CC397860(v2, v1, (uint64_t)&v4);
}

uint64_t sub_1CC3975C4(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(char **)(a1 + 40);
  uint64_t v3 = *(char **)(a1 + 48);
  if (v2 == v3) {
    return 0;
  }
  long long v18 = *(_OWORD *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v5 = v3 - v2;
  if (v3 - v2 >= 9)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v5 >> 3;
    char v16 = *(llvm::SUnit **)v2;
    uint64_t v17 = a2;
    int64_t v8 = (unint64_t)((v5 >> 3) - 2) >> 1;
    long long v9 = (llvm::SUnit **)v2;
    do
    {
      uint64_t v10 = &v9[v6 + 1];
      uint64_t v11 = (2 * v6) | 1;
      uint64_t v12 = 2 * v6 + 2;
      if (v12 < v7 && sub_1CC3979CC((uint64_t)&v18, *v10, v9[v6 + 2]))
      {
        ++v10;
        uint64_t v11 = v12;
      }
      *long long v9 = *v10;
      long long v9 = v10;
      uint64_t v6 = v11;
    }
    while (v11 <= v8);
    long long v13 = (llvm::SUnit **)(v3 - 8);
    if (v10 == (llvm::SUnit **)(v3 - 8))
    {
      uint64_t *v10 = v16;
    }
    else
    {
      uint64_t *v10 = *v13;
      llvm::SUnit *v13 = v16;
      sub_1CC397B20((uint64_t)v2, (uint64_t)(v10 + 1), (uint64_t)&v18, ((char *)(v10 + 1) - v2) >> 3);
    }
    a2 = v17;
  }
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t result = *(void *)(v15 - 8);
  *(void *)(a1 + 48) = v15 - 8;
  *a2 = 0;
  return result;
}

uint64_t sub_1CC397704(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v1 = *(void *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  return sub_1CC397860(v2, v1, (uint64_t)&v4);
}

uint64_t sub_1CC397748(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 48);
  unint64_t v4 = *(void *)(a1 + 56);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *(void **)(a1 + 40);
    uint64_t v8 = v5 - v7;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_1CB833614();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    long long v13 = &v12[8 * v8];
    *(void *)long long v13 = a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = &v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  *(void *)(a1 + 48) = v6;
  long long v17 = *(_OWORD *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 32);
  return sub_1CC397B20(v15, v6, (uint64_t)&v17, (v6 - v15) >> 3);
}

uint64_t sub_1CC397860(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2 - result;
  if (a2 - result >= 9)
  {
    uint64_t v5 = result;
    uint64_t v6 = v3 >> 3;
    int64_t v7 = (unint64_t)((v3 >> 3) - 2) >> 1;
    int64_t v8 = v7;
    do
    {
      if (v7 >= (8 * v8) >> 3)
      {
        uint64_t v9 = (8 * v8) >> 2;
        uint64_t v10 = v9 | 1;
        unint64_t v11 = (llvm::SUnit **)(v5 + 8 * (v9 | 1));
        uint64_t v12 = v9 + 2;
        if (v9 + 2 < v6 && sub_1CC3979CC(a3, *v11, v11[1]))
        {
          ++v11;
          uint64_t v10 = v12;
        }
        long long v13 = (llvm::SUnit **)(v5 + 8 * v8);
        uint64_t result = sub_1CC3979CC(a3, *v11, *v13);
        if ((result & 1) == 0)
        {
          uint64_t v14 = *v13;
          do
          {
            uint64_t v15 = v13;
            long long v13 = v11;
            *uint64_t v15 = *v11;
            if (v7 < v10) {
              break;
            }
            uint64_t v16 = (2 * v10) | 1;
            unint64_t v11 = (llvm::SUnit **)(v5 + 8 * v16);
            uint64_t v17 = 2 * v10 + 2;
            if (v17 < v6)
            {
              if (sub_1CC3979CC(a3, *v11, v11[1]))
              {
                ++v11;
                uint64_t v16 = v17;
              }
            }
            uint64_t result = sub_1CC3979CC(a3, *v11, v14);
            uint64_t v10 = v16;
          }
          while (!result);
          char *v13 = v14;
        }
      }
    }
    while (v8-- > 0);
  }
  return result;
}

uint64_t sub_1CC3979CC(uint64_t a1, llvm::SUnit *this, llvm::SUnit *a3)
{
  uint64_t v6 = *(void *)(*(void *)a1 + 8);
  uint64_t v7 = *((unsigned int *)this + 48);
  if (v6 == *(void *)(*(void *)a1 + 16)) {
    goto LABEL_5;
  }
  uint64_t v8 = *(unsigned int *)(v6 + 8 * v7 + 4);
  uint64_t v9 = *(unsigned int *)(v6 + 8 * *((unsigned int *)a3 + 48) + 4);
  if (v8 == v9) {
    goto LABEL_5;
  }
  uint64_t v10 = **(void **)(a1 + 8);
  uint64_t v11 = *(void *)(v10 + 8 * (v8 >> 6)) >> v8;
  uint64_t v12 = *(void *)(v10 + 8 * (v9 >> 6)) >> v9;
  if ((v11 ^ v12)) {
    return v12 & 1;
  }
  uint64_t v13 = *(void *)(*(void *)a1 + 200);
  unsigned int v14 = *(_DWORD *)(v13 + 4 * v8);
  LODWORD(v13) = *(_DWORD *)(v13 + 4 * v9);
  BOOL v15 = v14 >= v13;
  if (v14 == v13)
  {
LABEL_5:
    unsigned int v16 = *(_DWORD *)(v6 + 8 * v7);
    if (*(unsigned char *)(a1 + 16))
    {
      if ((*((unsigned char *)this + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(this);
        uint64_t v6 = *(void *)(*(void *)a1 + 8);
      }
      unsigned int v17 = *((_DWORD *)this + 60) + 1;
      unsigned int v18 = *(_DWORD *)(v6 + 8 * *((unsigned int *)a3 + 48));
      if ((*((unsigned char *)a3 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(a3);
      }
      BOOL v15 = v16 * (unint64_t)(*((_DWORD *)a3 + 60) + 1) >= v18 * (unint64_t)v17;
    }
    else
    {
      if ((*((unsigned char *)this + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(this);
        uint64_t v6 = *(void *)(*(void *)a1 + 8);
      }
      unsigned int v19 = *((_DWORD *)this + 60) + 1;
      unsigned int v20 = *(_DWORD *)(v6 + 8 * *((unsigned int *)a3 + 48));
      if ((*((unsigned char *)a3 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(a3);
      }
      BOOL v15 = v20 * (unint64_t)v19 >= v16 * (unint64_t)(*((_DWORD *)a3 + 60) + 1);
    }
  }
  LOBYTE(v12) = !v15;
  return v12 & 1;
}

uint64_t sub_1CC397B20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (llvm::SUnit **)(result + 8 * (v4 >> 1));
    uint64_t v9 = (llvm::SUnit **)(a2 - 8);
    uint64_t result = sub_1CC3979CC(a3, *v8, *(llvm::SUnit **)(a2 - 8));
    if (result)
    {
      uint64_t v10 = *v9;
      do
      {
        uint64_t v11 = v8;
        *uint64_t v9 = *v8;
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (llvm::SUnit **)(v6 + 8 * v7);
        uint64_t result = sub_1CC3979CC(a3, *v8, v10);
        uint64_t v9 = v11;
      }
      while ((result & 1) != 0);
      llvm::Pass *v11 = v10;
    }
  }
  return result;
}

void sub_1CC397BC4()
{
  for (uint64_t i = llvm::MachineSchedRegistry::Registry; i; uint64_t i = *(void *)i)
    sub_1CC3971E4((uint64_t)&qword_1EBCD0378, *(unsigned __int8 **)(i + 8), *(void *)(i + 16), *(void *)(i + 40), *(void *)(i + 24), *(void *)(i + 32));
  qword_1EBD05958 = (uint64_t)&qword_1EBCD0370;
}

uint64_t *sub_1CC397C20(uint64_t *result, unsigned int a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result[34] + a2);
  unsigned int v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    uint64_t v4 = *result;
    do
    {
      if ((*(_DWORD *)(v4 + 32 * v2) & 0x7FFFFFFF) == a2)
      {
        uint64_t v5 = *(unsigned int *)(v4 + 32 * v2 + 24);
        if (v5 != -1 && *(_DWORD *)(v4 + 32 * v5 + 28) == -1) {
          break;
        }
      }
      v2 += 256;
    }
    while (v2 < v3);
  }
  return result;
}

void sub_1CC397C9C()
{
}

char **sub_1CC397CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v149 = *MEMORY[0x1E4F143B8];
  uint64_t v135 = (char *)&v137;
  uint64_t v136 = 0x2000000000;
  unsigned int v2 = *(const llvm::SUnit **)(a2 + 48);
  unsigned int v3 = *(const llvm::SUnit **)(a2 + 56);
  if (v2 == v3) {
    return sub_1CC398900(&v135);
  }
  do
  {
    uint64_t v4 = *((void *)v2 + 1);
    uint64_t v5 = *(unsigned __int16 **)(v4 + 16);
    unsigned int v6 = *v5 - 1;
    if (*(unsigned char *)(a1 + 24))
    {
      if (v6 <= 1 && (*(unsigned char *)(*(void *)(v4 + 32) + 48) & 8) != 0) {
        goto LABEL_16;
      }
      uint64_t v7 = *((void *)v5 + 1);
      if ((*(_WORD *)(v4 + 44) & 0xC) == 0 || (*(_WORD *)(v4 + 44) & 4) != 0)
      {
        if ((v7 & 0x80000) == 0) {
          goto LABEL_27;
        }
        goto LABEL_16;
      }
      uint64_t v20 = *((void *)v2 + 1);
      if ((v7 & 0x80000) != 0) {
        goto LABEL_16;
      }
      while ((*(_WORD *)(v20 + 44) & 8) != 0)
      {
        uint64_t v20 = *(void *)(v20 + 8);
        if ((*(unsigned char *)(*(void *)(v20 + 16) + 10) & 8) != 0) {
          goto LABEL_16;
        }
      }
    }
    else
    {
      if (v6 <= 1 && (*(unsigned char *)(*(void *)(v4 + 32) + 48) & 0x10) != 0) {
        goto LABEL_16;
      }
      uint64_t v9 = *((void *)v5 + 1);
      if ((*(_WORD *)(v4 + 44) & 0xC) == 0 || (*(_WORD *)(v4 + 44) & 4) != 0)
      {
        if ((v9 & 0x100000) == 0) {
          goto LABEL_27;
        }
LABEL_16:
        unsigned int v138 = &v140;
        uint64_t v139 = (void *)0x400000000;
        v133[0] = 0;
        LOBYTE(v131) = 0;
        LODWORD(v128) = 0;
        if ((*(unsigned int (**)(void))(**(void **)(a1 + 8) + 680))())
        {
          int v11 = (int)v139;
          unsigned int v143 = v2;
          uint64_t v144 = v146;
          uint64_t v145 = 0x400000000;
          if (v139 >= 5) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v139)
          {
            memcpy(v144, v138, 8 * v139);
            int v12 = v145;
          }
          else
          {
            int v12 = 0;
          }
          LODWORD(v145) = v12 + v11;
          uint64_t v147 = v133[0];
          int v148 = v128;
          unint64_t v13 = sub_1CC398978((uint64_t)&v135, (unint64_t)&v143);
          unsigned int v14 = v135;
          int v15 = v136;
          unsigned int v16 = &v135[72 * v136];
          *(void *)unsigned int v16 = *(void *)v13;
          *((void *)v16 + 2) = 0x400000000;
          *((void *)v16 + 1) = v16 + 24;
          uint64_t v17 = (uint64_t)(v16 + 8);
          if (*(_DWORD *)(v13 + 16)) {
            sub_1CD41C56C(v17, v13 + 8);
          }
          unsigned int v18 = &v14[72 * v15];
          uint64_t v19 = *(void *)(v13 + 56);
          *((_DWORD *)v18 + 16) = *(_DWORD *)(v13 + 64);
          *((void *)v18 + 7) = v19;
          LODWORD(v136) = v136 + 1;
          if (v144 != v146) {
            free(v144);
          }
        }
        if (v138 != &v140) {
          free(v138);
        }
        goto LABEL_27;
      }
      uint64_t v21 = *((void *)v2 + 1);
      if ((v9 & 0x100000) != 0) {
        goto LABEL_16;
      }
      while ((*(_WORD *)(v21 + 44) & 8) != 0)
      {
        uint64_t v21 = *(void *)(v21 + 8);
        if ((*(unsigned char *)(*(void *)(v21 + 16) + 10) & 0x10) != 0) {
          goto LABEL_16;
        }
      }
    }
LABEL_27:
    unsigned int v2 = (const llvm::SUnit *)((char *)v2 + 272);
  }
  while (v2 != v3);
  if (v136 < 2) {
    return sub_1CC398900(&v135);
  }
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  unsigned int v130 = 0;
  uint64_t v22 = v135;
  if (byte_1EBCD0050) {
    BOOL v23 = 1;
  }
  else {
    BOOL v23 = dword_1EBCD0110 < 0xF0F0F0F0F0F0F0F1
  }
                                        * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4)
                                        * v136
                                        / 0x3E8;
  BOOL v127 = v23;
  uint64_t v24 = &v135[72 * v136];
  do
  {
    if (!v127)
    {
      int v25 = 0;
      goto LABEL_72;
    }
    int v25 = -252645135 * ((*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 4);
    uint64_t v26 = *(unsigned int *)(*(void *)v22 + 40);
    if (!v26) {
      goto LABEL_72;
    }
    long long v27 = *(uint64_t **)(*(void *)v22 + 32);
    uint64_t v28 = &v27[2 * v26];
    while (1)
    {
      uint64_t v29 = *v27;
      if ((*v27 & 6) == 0) {
        goto LABEL_54;
      }
      if (*(unsigned char *)(a1 + 24)) {
        goto LABEL_52;
      }
      if ((v29 & 0xFFFFFFFFFFFFFFF8) == 0) {
        goto LABEL_54;
      }
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFFF8) + 8);
      unsigned int v31 = *(unsigned __int16 **)(v30 + 16);
      if (*v31 - 1 <= 1 && (*(unsigned char *)(*(void *)(v30 + 32) + 48) & 0x10) != 0) {
        goto LABEL_52;
      }
      uint64_t v32 = *((void *)v31 + 1);
      if ((*(_WORD *)(v30 + 44) & 0xC) != 0 && (*(_WORD *)(v30 + 44) & 4) == 0) {
        break;
      }
      if ((v32 & 0x100000) != 0) {
        goto LABEL_52;
      }
LABEL_54:
      v27 += 2;
      if (v27 == v28) {
        goto LABEL_72;
      }
    }
    if ((v32 & 0x100000) == 0)
    {
      while ((*(_WORD *)(v30 + 44) & 8) != 0)
      {
        uint64_t v30 = *(void *)(v30 + 8);
        if ((*(unsigned char *)(*(void *)(v30 + 16) + 10) & 0x10) != 0) {
          goto LABEL_52;
        }
      }
      goto LABEL_54;
    }
LABEL_52:
    if ((*v27 & 6) == 6 && *((_DWORD *)v27 + 2) == 3) {
      goto LABEL_54;
    }
    int v25 = *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 192);
LABEL_72:
    if (!v130)
    {
      unsigned int v35 = 0;
      goto LABEL_84;
    }
    unsigned int v34 = (v130 - 1) & (37 * v25);
    unsigned int v35 = (int *)(v128 + 2328 * v34);
    int v36 = *v35;
    if (v25 != *v35)
    {
      uint64_t v37 = 0;
      int v38 = 1;
      while (v36 != -1)
      {
        if (v37) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v36 == -2;
        }
        if (v39) {
          uint64_t v37 = v35;
        }
        unsigned int v40 = v34 + v38++;
        unsigned int v34 = v40 & (v130 - 1);
        unsigned int v35 = (int *)(v128 + 2328 * v34);
        int v36 = *v35;
        if (v25 == *v35) {
          goto LABEL_89;
        }
      }
      if (v37) {
        unsigned int v35 = v37;
      }
LABEL_84:
      if (4 * (int)v129 + 4 < 3 * v130)
      {
        if (v130 + ~v129 - HIDWORD(v129) > v130 >> 3) {
          goto LABEL_86;
        }
        sub_1CC398B60(&v128, v130);
        if (v130)
        {
          unsigned int v54 = (v130 - 1) & (37 * v25);
          unsigned int v35 = (int *)(v128 + 2328 * v54);
          int v55 = *v35;
          if (v25 != *v35)
          {
            uint64_t v50 = 0;
            int v56 = 1;
            while (v55 != -1)
            {
              if (v50) {
                BOOL v57 = 0;
              }
              else {
                BOOL v57 = v55 == -2;
              }
              if (v57) {
                uint64_t v50 = v35;
              }
              unsigned int v58 = v54 + v56++;
              unsigned int v54 = v58 & (v130 - 1);
              unsigned int v35 = (int *)(v128 + 2328 * v54);
              int v55 = *v35;
              if (v25 == *v35) {
                goto LABEL_86;
              }
            }
            goto LABEL_119;
          }
          goto LABEL_86;
        }
LABEL_118:
        unsigned int v35 = 0;
        goto LABEL_86;
      }
      sub_1CC398B60(&v128, 2 * v130);
      if (!v130) {
        goto LABEL_118;
      }
      unsigned int v48 = (v130 - 1) & (37 * v25);
      unsigned int v35 = (int *)(v128 + 2328 * v48);
      int v49 = *v35;
      if (v25 != *v35)
      {
        uint64_t v50 = 0;
        int v51 = 1;
        while (v49 != -1)
        {
          if (v50) {
            BOOL v52 = 0;
          }
          else {
            BOOL v52 = v49 == -2;
          }
          if (v52) {
            uint64_t v50 = v35;
          }
          unsigned int v53 = v48 + v51++;
          unsigned int v48 = v53 & (v130 - 1);
          unsigned int v35 = (int *)(v128 + 2328 * v48);
          int v49 = *v35;
          if (v25 == *v35) {
            goto LABEL_86;
          }
        }
LABEL_119:
        if (v50) {
          unsigned int v35 = v50;
        }
      }
LABEL_86:
      LODWORD(v129) = v129 + 1;
      if (*v35 != -1) {
        --HIDWORD(v129);
      }
      *unsigned int v35 = v25;
      *((void *)v35 + 1) = v35 + 6;
      *((void *)v35 + 2) = 0x2000000000;
    }
LABEL_89:
    unint64_t v41 = sub_1CC398978((uint64_t)(v35 + 2), (unint64_t)v22);
    uint64_t v42 = *((void *)v35 + 1);
    unsigned int v43 = v35[4];
    int v44 = (void *)(v42 + 72 * v43);
    void *v44 = *(void *)v41;
    v44[2] = 0x400000000;
    v44[1] = v44 + 3;
    uint64_t v45 = (uint64_t)(v44 + 1);
    if (*(_DWORD *)(v41 + 16)) {
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v45, v41 + 8);
    }
    uint64_t v46 = v42 + 72 * v43;
    uint64_t v47 = *(void *)(v41 + 56);
    *(_DWORD *)(v46 + 64) = *(_DWORD *)(v41 + 64);
    *(void *)(v46 + 56) = v47;
    ++v35[4];
    v22 += 72;
  }
  while (v22 != v24);
  unsigned int v59 = v130;
  uint64_t v60 = (unsigned int *)(v128 + 2328 * v130);
  if (v129)
  {
    if (v130)
    {
      uint64_t v61 = 2328 * v130;
      uint64_t v62 = v128;
      while (*(_DWORD *)v62 >= 0xFFFFFFFE)
      {
        v62 += 2328;
        v61 -= 2328;
        if (!v61)
        {
          unsigned int v118 = 1;
          goto LABEL_129;
        }
      }
      unsigned int v118 = 1;
    }
    else
    {
      unsigned int v59 = 0;
      unsigned int v118 = 0;
      uint64_t v62 = v128;
    }
  }
  else
  {
    unsigned int v118 = v130;
LABEL_129:
    uint64_t v62 = v128 + 2328 * v130;
  }
  uint64_t v119 = v128;
  unsigned int v117 = v59;
  uint64_t v123 = v128 + 2328 * v59;
  if (v62 == v123) {
    goto LABEL_200;
  }
  unsigned int v63 = (llvm::ScheduleDAGTopologicalSort *)(a2 + 2120);
  unsigned int v121 = (unsigned int *)(v128 + 2328 * v130);
  while (2)
  {
    unint64_t v64 = *(unsigned int *)(v62 + 16);
    unint64_t v65 = 126 - 2 * __clz(v64);
    if (v64) {
      uint64_t v66 = v65;
    }
    else {
      uint64_t v66 = 0;
    }
    sub_1CC398E88(*(void *)(v62 + 8), (uint64_t *)(*(void *)(v62 + 8) + 72 * v64), v66, 1);
    uint64_t v67 = *(void *)(v62 + 8);
    unint64_t v68 = *(unsigned int *)(v62 + 16);
    v133[0] = 0;
    v133[1] = 0;
    int v134 = 0;
    if (v68 == 1)
    {
      uint64_t v109 = 0;
      goto LABEL_194;
    }
    uint64_t v124 = v62;
    unint64_t v69 = 0;
    uint64_t v70 = 1;
    while (2)
    {
      uint64_t v71 = v67 + 72 * v69;
      unsigned int v143 = *(const llvm::SUnit **)v71;
      uint64_t v144 = v146;
      uint64_t v145 = 0x400000000;
      if (*(_DWORD *)(v71 + 16)) {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v144, v67 + 72 * v69 + 8);
      }
      uint64_t v72 = v67 + 72 * v69;
      uint64_t v73 = *(void *)(v72 + 56);
      int v148 = *(_DWORD *)(v72 + 64);
      uint64_t v147 = v73;
      LODWORD(v74) = ++v69;
      if (v69 < v68)
      {
        uint64_t v74 = v70;
        while (1)
        {
          unsigned int v75 = (const llvm::SUnit **)(v67 + 72 * v74);
          long long v76 = *v75;
          if (v134)
          {
            int v77 = *((_DWORD *)v76 + 48);
            unsigned int v78 = (37 * v77) & (v134 - 1);
            int v79 = *(_DWORD *)(v133[0] + 12 * v78);
            if (v77 == v79) {
              goto LABEL_152;
            }
            int v80 = 1;
            while (v79 != -1)
            {
              unsigned int v81 = v78 + v80++;
              unsigned int v78 = v81 & (v134 - 1);
              int v79 = *(_DWORD *)(v133[0] + 12 * v78);
              if (v77 == v79) {
                goto LABEL_152;
              }
            }
          }
          if (v127
            || !llvm::ScheduleDAGTopologicalSort::IsReachable(v63, v76, v143)
            && !llvm::ScheduleDAGTopologicalSort::IsReachable(v63, v143, *v75))
          {
            break;
          }
LABEL_152:
          if (v68 == ++v74) {
            goto LABEL_168;
          }
        }
      }
      if (v68 == v74) {
        goto LABEL_168;
      }
      uint64_t v82 = v67 + 72 * v74;
      unsigned int v138 = *(void **)v82;
      uint64_t v139 = v141;
      uint64_t v140 = 0x400000000;
      if (*(_DWORD *)(v82 + 16)) {
        llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v139, v67 + 72 * v74 + 8);
      }
      uint64_t v83 = v67 + 72 * v74;
      uint64_t v84 = *(void *)(v83 + 56);
      int v142 = *(_DWORD *)(v83 + 64);
      v141[4] = v84;
      uint64_t v85 = (v142 + v148);
      if (!v134)
      {
LABEL_164:
        uint64_t v89 = 2;
        goto LABEL_165;
      }
      int v86 = *((_DWORD *)v143 + 48);
      unsigned int v87 = (37 * v86) & (v134 - 1);
      int v88 = *(_DWORD *)(v133[0] + 12 * v87);
      if (v86 != v88)
      {
        int v91 = 1;
        while (v88 != -1)
        {
          unsigned int v92 = v87 + v91++;
          unsigned int v87 = v92 & (v134 - 1);
          int v88 = *(_DWORD *)(v133[0] + 12 * v87);
          if (v86 == v88) {
            goto LABEL_159;
          }
        }
        goto LABEL_164;
      }
LABEL_159:
      uint64_t v89 = (sub_1CD54B9DC(v133, (_DWORD *)v143 + 48)[1] + 1);
      uint64_t v90 = sub_1CD54B9DC(v133, (_DWORD *)v143 + 48);
      uint64_t v85 = (v142 + v90[2]);
LABEL_165:
      if ((*(unsigned int (**)(void, unsigned char *, void, void *, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 720))(*(void *)(a1 + 8), v144, v145, v139, v140, v89, v85))
      {
        unsigned int v93 = *((_DWORD *)v143 + 48);
        unsigned int v94 = *((_DWORD *)v138 + 48);
        BOOL v95 = v93 > v94;
        int v96 = v93 <= v94 ? v143 : (const llvm::SUnit *)v138;
        uint64_t v97 = v95 ? v143 : (llvm::SUnit *)v138;
        int v122 = v96;
        uint64_t v131 = (unint64_t)v96 | 6;
        uint64_t v132 = 5;
        int v120 = v97;
        if (llvm::ScheduleDAGInstrs::addEdge(a2, v97, (uint64_t)&v131))
        {
          int v115 = v89;
          int v116 = v85;
          if (*(unsigned char *)(a1 + 24))
          {
            uint64_t v103 = *((unsigned int *)v122 + 30);
            int v104 = v120;
            if (v103)
            {
              uint64_t v106 = (void *)*((void *)v122 + 14);
              uint64_t v107 = 16 * v103;
              do
              {
                unsigned int v108 = (llvm::SUnit *)(*v106 & 0xFFFFFFFFFFFFFFF8);
                if (v104 != v108)
                {
                  uint64_t v131 = (unint64_t)v120 | 6;
                  uint64_t v132 = 3;
                  llvm::ScheduleDAGInstrs::addEdge(a2, v108, (uint64_t)&v131);
                  int v104 = v120;
                }
                v106 += 2;
                v107 -= 16;
              }
              while (v107);
            }
          }
          else
          {
            uint64_t v98 = *((unsigned int *)v120 + 10);
            uint64_t v99 = v122;
            if (v98)
            {
              int v100 = (void *)*((void *)v120 + 4);
              uint64_t v101 = 16 * v98;
              do
              {
                unint64_t v102 = *v100 & 0xFFFFFFFFFFFFFFF8;
                if (v99 != (llvm::SUnit *)v102)
                {
                  uint64_t v131 = v102 | 6;
                  uint64_t v132 = 3;
                  llvm::ScheduleDAGInstrs::addEdge(a2, v122, (uint64_t)&v131);
                  uint64_t v99 = v122;
                }
                v100 += 2;
                v101 -= 16;
              }
              while (v101);
            }
          }
          int v105 = sub_1CD54B9DC(v133, (_DWORD *)v138 + 48);
          v105[1] = v115;
          v105[2] = v116;
        }
      }
      if (v139 != v141) {
        free(v139);
      }
LABEL_168:
      if (v144 != v146) {
        free(v144);
      }
      ++v70;
      if (v69 != v68 - 1) {
        continue;
      }
      break;
    }
    uint64_t v109 = v133[0];
    uint64_t v60 = v121;
    uint64_t v62 = v124;
LABEL_194:
    MEMORY[0x1D25D9CD0](v109, 4);
    uint64_t v110 = (unsigned int *)(v62 + 2328);
    while (v110 != v60)
    {
      unsigned int v111 = *v110;
      v110 += 582;
      if (v111 <= 0xFFFFFFFD)
      {
        uint64_t v62 = (uint64_t)(v110 - 582);
        goto LABEL_199;
      }
    }
    uint64_t v62 = (uint64_t)v60;
LABEL_199:
    if (v62 != v123) {
      continue;
    }
    break;
  }
LABEL_200:
  if (v118)
  {
    uint64_t v112 = 2328 * v117;
    BOOL v113 = (char **)(v119 + 8);
    do
    {
      if (*((_DWORD *)v113 - 2) <= 0xFFFFFFFD) {
        BOOL v113 = sub_1CC398900(v113);
      }
      v113 += 291;
      v112 -= 2328;
    }
    while (v112);
  }
  MEMORY[0x1D25D9CD0](v119, 8);
  return sub_1CC398900(&v135);
}

char **sub_1CC398900(char **a1)
{
  unsigned int v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 72 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 64];
      if (&v2[v4 - 48] != v5) {
        free(v5);
      }
      v4 -= 72;
    }
    while (v4);
    unsigned int v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

unint64_t sub_1CC398978(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v5 = v3 + 1;
    unint64_t v6 = *(void *)a1 + 72 * v3;
    if (*(void *)a1 <= a2 && v6 > a2)
    {
      unint64_t v8 = a2 - *(void *)a1;
      sub_1CC3989E4((char **)a1, v5);
      return *(void *)a1 + v8;
    }
    else
    {
      sub_1CC3989E4((char **)a1, v5);
    }
  }
  return a2;
}

void sub_1CC3989E4(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = (char *)malloc_type_malloc(72 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  unint64_t v8 = *a1;
  int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = &v8[72 * v9];
    uint64_t v11 = (uint64_t)(v8 + 8);
    int v12 = v6;
    do
    {
      uint64_t v13 = v11 - 8;
      *(void *)int v12 = *(void *)(v11 - 8);
      *((void *)v12 + 1) = v12 + 24;
      *((void *)v12 + 2) = 0x400000000;
      if (*(_DWORD *)(v11 + 8)) {
        sub_1CD41C56C((uint64_t)(v12 + 8), v11);
      }
      uint64_t v14 = *(void *)(v11 + 48);
      *((_DWORD *)v12 + 16) = *(_DWORD *)(v11 + 56);
      *((void *)v12 + 7) = v14;
      v12 += 72;
      v11 += 72;
    }
    while ((char *)(v13 + 72) != v10);
    unint64_t v8 = *a1;
    uint64_t v15 = *((unsigned int *)a1 + 2);
    if (v15)
    {
      uint64_t v16 = 72 * v15;
      do
      {
        uint64_t v17 = *(char **)&v8[v16 - 64];
        if (&v8[v16 - 48] != v17) {
          free(v17);
        }
        v16 -= 72;
      }
      while (v16);
      unint64_t v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

_DWORD *sub_1CC398B60(uint64_t *a1, int a2)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  unint64_t v4 = (char **)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new(2328 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    unsigned int v10 = *((_DWORD *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = 2328 * v10;
      do
      {
        *uint64_t result = -1;
        result += 582;
        v11 -= 2328;
      }
      while (v11);
    }
    if (!v3)
    {
LABEL_50:
      JUMPOUT(0x1D25D9CD0);
    }
    int v12 = (int *)&v4[291 * v3];
    uint64_t v13 = v4;
    while (1)
    {
      unsigned int v14 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 <= 0xFFFFFFFD) {
        break;
      }
LABEL_45:
      v13 += 291;
      if (v13 == (char **)v12) {
        goto LABEL_50;
      }
    }
    int v15 = *((_DWORD *)a1 + 4);
    if (v15)
    {
      int v16 = v15 - 1;
      unsigned int v17 = v16 & (37 * v14);
      uint64_t v18 = *a1 + 2328 * v17;
      int v19 = *(_DWORD *)v18;
      if (v14 != *(_DWORD *)v18)
      {
        uint64_t v20 = 0;
        int v21 = 1;
        while (v19 != -1)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -2;
          }
          if (v22) {
            uint64_t v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & v16;
          uint64_t v18 = *a1 + 2328 * v17;
          int v19 = *(_DWORD *)v18;
          if (v14 == *(_DWORD *)v18) {
            goto LABEL_23;
          }
        }
        if (v20) {
          uint64_t v18 = v20;
        }
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
LABEL_23:
    uint64_t v24 = v18 + 24;
    *(void *)(v18 + 8) = v18 + 24;
    *(_DWORD *)uint64_t v18 = v14;
    *(void *)(v18 + 16) = 0x2000000000;
    unsigned int v25 = *((_DWORD *)v13 + 4);
    if ((char **)v18 == v13 || v25 == 0)
    {
LABEL_44:
      ++*((_DWORD *)a1 + 2);
      sub_1CC398900(v13 + 1);
      goto LABEL_45;
    }
    long long v27 = (int *)v13[1];
    if (v27 != (int *)(v13 + 3))
    {
      int v28 = *((_DWORD *)v13 + 5);
      *(void *)(v18 + 8) = v27;
      *(_DWORD *)(v18 + 16) = v25;
      *(_DWORD *)(v18 + 20) = v28;
      v13[1] = (char *)(v13 + 3);
      *((_DWORD *)v13 + 5) = 0;
LABEL_43:
      *((_DWORD *)v13 + 4) = 0;
      goto LABEL_44;
    }
    if (v25 <= 0x20)
    {
      uint64_t v30 = &v27[18 * v25];
    }
    else
    {
      sub_1CC3989E4((char **)(v18 + 8), *((unsigned int *)v13 + 4));
      long long v27 = (int *)v13[1];
      unsigned int v29 = *((_DWORD *)v13 + 4);
      if (!v29)
      {
LABEL_38:
        *(_DWORD *)(v18 + 16) = v25;
        uint64_t v34 = *((unsigned int *)v13 + 4);
        if (v34)
        {
          uint64_t v35 = 18 * v34;
          do
          {
            int v36 = *(int **)&v27[v35 - 16];
            if (&v27[v35 - 12] != v36) {
              free(v36);
            }
            v35 -= 18;
          }
          while (v35 * 4);
        }
        goto LABEL_43;
      }
      uint64_t v24 = *(void *)(v18 + 8);
      uint64_t v30 = &v27[18 * v29];
    }
    uint64_t v31 = (uint64_t)(v27 + 2);
    do
    {
      uint64_t v32 = v31 - 8;
      *(void *)uint64_t v24 = *(void *)(v31 - 8);
      *(void *)(v24 + 8) = v24 + 24;
      *(void *)(v24 + 16) = 0x400000000;
      if (*(_DWORD *)(v31 + 8)) {
        sub_1CD41C56C(v24 + 8, v31);
      }
      uint64_t v33 = *(void *)(v31 + 48);
      *(_DWORD *)(v24 + 64) = *(_DWORD *)(v31 + 56);
      *(void *)(v24 + 56) = v33;
      v24 += 72;
      v31 += 72;
    }
    while ((int *)(v32 + 72) != v30);
    long long v27 = (int *)v13[1];
    goto LABEL_38;
  }
  a1[1] = 0;
  unsigned int v37 = *((_DWORD *)a1 + 4);
  if (v37)
  {
    uint64_t v38 = 2328 * v37;
    do
    {
      *uint64_t result = -1;
      result += 582;
      v38 -= 2328;
    }
    while (v38);
  }
  return result;
}

void sub_1CC398E88(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    uint64_t v98 = (uint64_t)(a2 - 9);
    uint64_t v95 = (uint64_t)(a2 - 27);
    uint64_t v96 = (uint64_t)(a2 - 18);
    unint64_t v9 = a1;
    uint64_t v100 = (uint64_t)a2;
    while (1)
    {
      while (1)
      {
        a1 = v9;
        uint64_t v10 = (uint64_t)a2 - v9;
        unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - v9) >> 3);
        if (v5 || !v4)
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              if (sub_1CC399CAC(v98, a1))
              {
                uint64_t v110 = *(void *)a1;
                unsigned int v111 = v113;
                uint64_t v112 = 0x400000000;
                if (*(_DWORD *)(a1 + 16)) {
                  sub_1CD41C56C((uint64_t)&v111, a1 + 8);
                }
                uint64_t v77 = *(void *)(a1 + 56);
                int v115 = *(_DWORD *)(a1 + 64);
                uint64_t v114 = v77;
                *(void *)a1 = *(a2 - 9);
                sub_1CD41C56C(a1 + 8, (uint64_t)(a2 - 8));
                uint64_t v78 = *(a2 - 2);
                *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 - 2);
                *(void *)(a1 + 56) = v78;
                *(a2 - 9) = v110;
                sub_1CD41C56C((uint64_t)(a2 - 8), (uint64_t)&v111);
                uint64_t v79 = v114;
                *((_DWORD *)a2 - 2) = v115;
                *(a2 - 2) = v79;
                if (v111 != v113) {
                  free(v111);
                }
              }
              break;
            case 3uLL:
              sub_1CC39A12C(a1, a1 + 72, v98);
              break;
            case 4uLL:
              sub_1CC39A8D0(a1, a1 + 72, a1 + 144, v98);
              break;
            case 5uLL:
              sub_1CC399DE4(a1, a1 + 72, a1 + 144, a1 + 216, v98);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v10 <= 1727)
        {
          if (a4)
          {
            if ((uint64_t *)a1 != a2)
            {
              uint64_t v80 = a1 + 72;
              if ((uint64_t *)(a1 + 72) != a2)
              {
                uint64_t v81 = 0;
                uint64_t v82 = a1;
                do
                {
                  uint64_t v83 = (uint64_t *)v80;
                  if (sub_1CC399CAC(v80, v82))
                  {
                    uint64_t v110 = *v83;
                    unsigned int v111 = v113;
                    uint64_t v112 = 0x400000000;
                    if (*(_DWORD *)(v82 + 88)) {
                      sub_1CD41C56C((uint64_t)&v111, v82 + 80);
                    }
                    uint64_t v114 = *(void *)(v82 + 128);
                    int v115 = *(_DWORD *)(v82 + 136);
                    uint64_t v84 = v81;
                    while (1)
                    {
                      uint64_t v85 = a1 + v84;
                      *(void *)(a1 + v84 + 72) = *(void *)(a1 + v84);
                      uint64_t v86 = a1 + v84 + 8;
                      sub_1CD41C56C(a1 + v84 + 80, v86);
                      *(void *)(v85 + 128) = *(void *)(v85 + 56);
                      *(_DWORD *)(v85 + 136) = *(_DWORD *)(v85 + 64);
                      if (!v84) {
                        break;
                      }
                      v84 -= 72;
                      if ((sub_1CC399CAC((uint64_t)&v110, v84 + a1) & 1) == 0)
                      {
                        unsigned int v87 = (void *)(a1 + v84 + 72);
                        goto LABEL_138;
                      }
                    }
                    unsigned int v87 = (void *)a1;
LABEL_138:
                    void *v87 = v110;
                    sub_1CD41C56C(v86, (uint64_t)&v111);
                    uint64_t v88 = v114;
                    *(_DWORD *)(v85 + 64) = v115;
                    *(void *)(v85 + 56) = v88;
                    if (v111 != v113) {
                      free(v111);
                    }
                    a2 = (uint64_t *)v100;
                  }
                  uint64_t v80 = (uint64_t)(v83 + 9);
                  v81 += 72;
                  uint64_t v82 = (uint64_t)v83;
                }
                while (v83 + 9 != a2);
              }
            }
          }
          else if ((uint64_t *)a1 != a2)
          {
            uint64_t v89 = a1 + 72;
            if ((uint64_t *)(a1 + 72) != a2)
            {
              uint64_t v90 = a1 - 72;
              do
              {
                int v91 = (uint64_t *)v89;
                if (sub_1CC399CAC(v89, a1))
                {
                  uint64_t v110 = *v91;
                  unsigned int v111 = v113;
                  uint64_t v112 = 0x400000000;
                  if (*(_DWORD *)(a1 + 88)) {
                    sub_1CD41C56C((uint64_t)&v111, a1 + 80);
                  }
                  uint64_t v114 = *(void *)(a1 + 128);
                  int v115 = *(_DWORD *)(a1 + 136);
                  uint64_t v92 = v90;
                  do
                  {
                    *(void *)(v92 + 144) = *(void *)(v92 + 72);
                    sub_1CD41C56C(v92 + 152, v92 + 80);
                    *(void *)(v92 + 200) = *(void *)(v92 + 128);
                    *(_DWORD *)(v92 + 208) = *(_DWORD *)(v92 + 136);
                    char v93 = sub_1CC399CAC((uint64_t)&v110, v92);
                    v92 -= 72;
                  }
                  while ((v93 & 1) != 0);
                  *(void *)(v92 + 144) = v110;
                  sub_1CD41C56C(v92 + 152, (uint64_t)&v111);
                  uint64_t v94 = v114;
                  *(_DWORD *)(v92 + 208) = v115;
                  *(void *)(v92 + 200) = v94;
                  if (v111 != v113) {
                    free(v111);
                  }
                }
                uint64_t v89 = (uint64_t)(v91 + 9);
                v90 += 72;
                a1 = (uint64_t)v91;
              }
              while (v91 + 9 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((uint64_t *)a1 != a2)
          {
            int64_t v38 = (v11 - 2) >> 1;
            BOOL v39 = &v111;
            int64_t v40 = v38;
            do
            {
              int64_t v41 = v40;
              if (v38 >= v40)
              {
                uint64_t v42 = (2 * v40) | 1;
                uint64_t v43 = a1 + 72 * v42;
                if (2 * v40 + 2 < (uint64_t)v11 && sub_1CC399CAC(a1 + 72 * v42, v43 + 72))
                {
                  v43 += 72;
                  uint64_t v42 = 2 * v41 + 2;
                }
                uint64_t v44 = a1 + 72 * v41;
                if ((sub_1CC399CAC(v43, v44) & 1) == 0)
                {
                  uint64_t v103 = v11;
                  uint64_t v110 = *(void *)v44;
                  unsigned int v111 = v113;
                  uint64_t v112 = 0x400000000;
                  if (*(_DWORD *)(a1 + 72 * v41 + 16)) {
                    sub_1CD41C56C((uint64_t)v39, a1 + 72 * v41 + 8);
                  }
                  uint64_t v99 = (uint64_t)v39;
                  uint64_t v45 = a1 + 72 * v41;
                  uint64_t v46 = *(void *)(v45 + 56);
                  int v115 = *(_DWORD *)(v45 + 64);
                  uint64_t v114 = v46;
                  do
                  {
                    uint64_t v47 = (void *)v43;
                    uint64_t v48 = v43 + 8;
                    *(void *)uint64_t v44 = *(void *)v43;
                    sub_1CD41C56C(v44 + 8, v43 + 8);
                    uint64_t v49 = v43 + 56;
                    int v50 = *(_DWORD *)(v43 + 64);
                    *(void *)(v44 + 56) = *(void *)(v43 + 56);
                    *(_DWORD *)(v44 + 64) = v50;
                    if (v38 < v42) {
                      break;
                    }
                    int64_t v51 = v38;
                    uint64_t v52 = (2 * v42) | 1;
                    uint64_t v43 = a1 + 72 * v52;
                    uint64_t v53 = 2 * v42 + 2;
                    if (v53 < v103 && sub_1CC399CAC(a1 + 72 * v52, v43 + 72))
                    {
                      v43 += 72;
                      uint64_t v52 = v53;
                    }
                    uint64_t v44 = (uint64_t)v47;
                    uint64_t v42 = v52;
                    int64_t v38 = v51;
                  }
                  while (!sub_1CC399CAC(v43, (uint64_t)&v110));
                  void *v47 = v110;
                  BOOL v39 = (void **)v99;
                  sub_1CD41C56C(v48, v99);
                  int v54 = v115;
                  *(void *)uint64_t v49 = v114;
                  *(_DWORD *)(v49 + 8) = v54;
                  if (v111 != v113) {
                    free(v111);
                  }
                  a2 = (uint64_t *)v100;
                  unint64_t v11 = v103;
                }
              }
              int64_t v40 = v41 - 1;
            }
            while (v41);
            do
            {
              int v55 = a2;
              uint64_t v104 = *(void *)a1;
              int v105 = v107;
              uint64_t v106 = 0x400000000;
              if (*(_DWORD *)(a1 + 16)) {
                sub_1CD41C56C((uint64_t)&v105, a1 + 8);
              }
              uint64_t v56 = 0;
              uint64_t v57 = *(void *)(a1 + 56);
              int v109 = *(_DWORD *)(a1 + 64);
              uint64_t v108 = v57;
              uint64_t v58 = a1;
              do
              {
                uint64_t v59 = v58 + 72 * v56 + 72;
                uint64_t v60 = (2 * v56) | 1;
                uint64_t v61 = 2 * v56 + 2;
                if (v61 < (uint64_t)v11 && sub_1CC399CAC(v58 + 72 * v56 + 72, v58 + 72 * v56 + 144))
                {
                  v59 += 72;
                  uint64_t v60 = v61;
                }
                *(void *)uint64_t v58 = *(void *)v59;
                sub_1CD41C56C(v58 + 8, v59 + 8);
                uint64_t v62 = (uint64_t *)(v59 + 56);
                int v63 = *(_DWORD *)(v59 + 64);
                *(void *)(v58 + 56) = *(void *)(v59 + 56);
                *(_DWORD *)(v58 + 64) = v63;
                uint64_t v58 = v59;
                uint64_t v56 = v60;
              }
              while (v60 <= (uint64_t)((v11 - 2) >> 1));
              a2 = v55 - 9;
              if ((uint64_t *)v59 == v55 - 9)
              {
                *(void *)uint64_t v59 = v104;
                sub_1CD41C56C(v59 + 8, (uint64_t)&v105);
                int v64 = v109;
                uint64_t *v62 = v108;
                *(_DWORD *)(v59 + 64) = v64;
              }
              else
              {
                *(void *)uint64_t v59 = *(v55 - 9);
                sub_1CD41C56C(v59 + 8, (uint64_t)(v55 - 8));
                uint64_t v65 = *(v55 - 2);
                *(_DWORD *)(v59 + 64) = *((_DWORD *)v55 - 2);
                uint64_t *v62 = v65;
                *(v55 - 9) = v104;
                sub_1CD41C56C((uint64_t)(v55 - 8), (uint64_t)&v105);
                int v66 = v109;
                *(v55 - 2) = v108;
                *((_DWORD *)v55 - 2) = v66;
                uint64_t v67 = v59 - a1 + 72;
                if (v67 >= 73)
                {
                  unint64_t v68 = (v67 / 0x48uLL - 2) >> 1;
                  uint64_t v69 = a1 + 72 * v68;
                  if (sub_1CC399CAC(v69, v59))
                  {
                    uint64_t v110 = *(void *)v59;
                    unsigned int v111 = v113;
                    uint64_t v112 = 0x400000000;
                    if (*(_DWORD *)(v59 + 16)) {
                      sub_1CD41C56C((uint64_t)&v111, v59 + 8);
                    }
                    uint64_t v71 = *v62;
                    int v115 = *(_DWORD *)(v59 + 64);
                    uint64_t v114 = v71;
                    do
                    {
                      uint64_t v72 = (void *)v69;
                      uint64_t v73 = v69 + 8;
                      *(void *)uint64_t v59 = *(void *)v69;
                      sub_1CD41C56C(v59 + 8, v69 + 8);
                      uint64_t v74 = v69 + 56;
                      int v75 = *(_DWORD *)(v69 + 64);
                      *(void *)(v59 + 56) = *(void *)(v69 + 56);
                      *(_DWORD *)(v59 + 64) = v75;
                      if (!v68) {
                        break;
                      }
                      unint64_t v68 = (v68 - 1) >> 1;
                      uint64_t v69 = a1 + 72 * v68;
                      uint64_t v59 = (uint64_t)v72;
                    }
                    while ((sub_1CC399CAC(v69, (uint64_t)&v110) & 1) != 0);
                    *uint64_t v72 = v110;
                    sub_1CD41C56C(v73, (uint64_t)&v111);
                    int v76 = v115;
                    *(void *)uint64_t v74 = v114;
                    *(_DWORD *)(v74 + 8) = v76;
                    if (v111 != v113) {
                      free(v111);
                    }
                  }
                }
              }
              if (v105 != v107) {
                free(v105);
              }
            }
            while ((uint64_t)v11-- > 2);
          }
          return;
        }
        uint64_t v101 = a3;
        unint64_t v12 = v11 >> 1;
        uint64_t v13 = (void *)(a1 + 72 * (v11 >> 1));
        if ((unint64_t)v10 >= 0x2401)
        {
          sub_1CC39A12C(a1, a1 + 72 * (v11 >> 1), v98);
          sub_1CC39A12C(a1 + 72, a1 + 72 * v12 - 72, v96);
          sub_1CC39A12C(a1 + 144, a1 + 72 + 72 * v12, v95);
          sub_1CC39A12C(a1 + 72 * v12 - 72, (uint64_t)v13, a1 + 72 + 72 * v12);
          uint64_t v110 = *(void *)a1;
          unsigned int v111 = v113;
          uint64_t v112 = 0x400000000;
          if (*(_DWORD *)(a1 + 16)) {
            sub_1CD41C56C((uint64_t)&v111, a1 + 8);
          }
          uint64_t v14 = *(void *)(a1 + 56);
          int v115 = *(_DWORD *)(a1 + 64);
          uint64_t v114 = v14;
          *(void *)a1 = *v13;
          uint64_t v15 = a1 + 72 * v12;
          sub_1CD41C56C(a1 + 8, v15 + 8);
          int v16 = *(_DWORD *)(v15 + 64);
          *(void *)(a1 + 56) = *(void *)(v15 + 56);
          *(_DWORD *)(a1 + 64) = v16;
          void *v13 = v110;
          sub_1CD41C56C(v15 + 8, (uint64_t)&v111);
          uint64_t v17 = v114;
          *(_DWORD *)(v15 + 64) = v115;
          *(void *)(v15 + 56) = v17;
          if (v111 != v113) {
            free(v111);
          }
        }
        else
        {
          sub_1CC39A12C(a1 + 72 * (v11 >> 1), a1, v98);
        }
        a3 = v101 - 1;
        if (a4 & 1) != 0 || (sub_1CC399CAC(a1 - 72, a1)) {
          break;
        }
        uint64_t v104 = *(void *)a1;
        int v105 = v107;
        uint64_t v106 = 0x400000000;
        if (*(_DWORD *)(a1 + 16)) {
          sub_1CD41C56C((uint64_t)&v105, a1 + 8);
        }
        uint64_t v29 = *(void *)(a1 + 56);
        int v109 = *(_DWORD *)(a1 + 64);
        uint64_t v108 = v29;
        if (sub_1CC399CAC((uint64_t)&v104, v98))
        {
          unint64_t v9 = a1;
          do
            v9 += 72;
          while ((sub_1CC399CAC((uint64_t)&v104, v9) & 1) == 0);
        }
        else
        {
          unint64_t v30 = a1 + 72;
          do
          {
            unint64_t v9 = v30;
            if (v30 >= (unint64_t)a2) {
              break;
            }
            int v31 = sub_1CC399CAC((uint64_t)&v104, v30);
            unint64_t v30 = v9 + 72;
          }
          while (!v31);
        }
        unint64_t v32 = (unint64_t)a2;
        if (v9 < (unint64_t)a2)
        {
          unint64_t v32 = (unint64_t)a2;
          do
            v32 -= 72;
          while ((sub_1CC399CAC((uint64_t)&v104, v32) & 1) != 0);
        }
        while (v9 < v32)
        {
          uint64_t v110 = *(void *)v9;
          unsigned int v111 = v113;
          uint64_t v112 = 0x400000000;
          if (*(_DWORD *)(v9 + 16)) {
            sub_1CD41C56C((uint64_t)&v111, v9 + 8);
          }
          uint64_t v33 = *(void *)(v9 + 56);
          int v115 = *(_DWORD *)(v9 + 64);
          uint64_t v114 = v33;
          *(void *)unint64_t v9 = *(void *)v32;
          sub_1CD41C56C(v9 + 8, v32 + 8);
          uint64_t v34 = *(void *)(v32 + 56);
          *(_DWORD *)(v9 + 64) = *(_DWORD *)(v32 + 64);
          *(void *)(v9 + 56) = v34;
          *(void *)unint64_t v32 = v110;
          sub_1CD41C56C(v32 + 8, (uint64_t)&v111);
          int v35 = v115;
          *(void *)(v32 + 56) = v114;
          *(_DWORD *)(v32 + 64) = v35;
          if (v111 != v113) {
            free(v111);
          }
          do
            v9 += 72;
          while (!sub_1CC399CAC((uint64_t)&v104, v9));
          do
            v32 -= 72;
          while ((sub_1CC399CAC((uint64_t)&v104, v32) & 1) != 0);
        }
        if (v9 - 72 != a1)
        {
          *(void *)a1 = *(void *)(v9 - 72);
          sub_1CD41C56C(a1 + 8, v9 - 64);
          int v36 = *(_DWORD *)(v9 - 8);
          *(void *)(a1 + 56) = *(void *)(v9 - 16);
          *(_DWORD *)(a1 + 64) = v36;
        }
        *(void *)(v9 - 72) = v104;
        sub_1CD41C56C(v9 - 64, (uint64_t)&v105);
        uint64_t v37 = v108;
        *(_DWORD *)(v9 - 8) = v109;
        *(void *)(v9 - 16) = v37;
        BOOL v4 = v105 >= v107;
        BOOL v5 = v105 == v107;
        if (v105 != v107) {
          free(v105);
        }
LABEL_43:
        a4 = 0;
      }
      uint64_t v104 = *(void *)a1;
      int v105 = v107;
      uint64_t v106 = 0x400000000;
      if (*(_DWORD *)(a1 + 16)) {
        sub_1CD41C56C((uint64_t)&v105, a1 + 8);
      }
      uint64_t v102 = v101 - 1;
      uint64_t v18 = 0;
      uint64_t v19 = *(void *)(a1 + 56);
      int v109 = *(_DWORD *)(a1 + 64);
      uint64_t v108 = v19;
      do
        v18 += 72;
      while ((sub_1CC399CAC(v18 + a1, (uint64_t)&v104) & 1) != 0);
      unint64_t v20 = a1 + v18;
      unint64_t v21 = v100;
      if (v18 == 72)
      {
        unint64_t v21 = v100;
        do
        {
          if (v20 >= v21) {
            break;
          }
          v21 -= 72;
        }
        while ((sub_1CC399CAC(v21, (uint64_t)&v104) & 1) == 0);
      }
      else
      {
        do
          v21 -= 72;
        while (!sub_1CC399CAC(v21, (uint64_t)&v104));
      }
      unint64_t v9 = a1 + v18;
      if (v20 < v21)
      {
        unint64_t v22 = v21;
        do
        {
          uint64_t v110 = *(void *)v9;
          unsigned int v111 = v113;
          uint64_t v112 = 0x400000000;
          if (*(_DWORD *)(v9 + 16)) {
            sub_1CD41C56C((uint64_t)&v111, v9 + 8);
          }
          uint64_t v23 = *(void *)(v9 + 56);
          int v115 = *(_DWORD *)(v9 + 64);
          uint64_t v114 = v23;
          *(void *)unint64_t v9 = *(void *)v22;
          sub_1CD41C56C(v9 + 8, v22 + 8);
          uint64_t v24 = *(void *)(v22 + 56);
          *(_DWORD *)(v9 + 64) = *(_DWORD *)(v22 + 64);
          *(void *)(v9 + 56) = v24;
          *(void *)unint64_t v22 = v110;
          sub_1CD41C56C(v22 + 8, (uint64_t)&v111);
          int v25 = v115;
          *(void *)(v22 + 56) = v114;
          *(_DWORD *)(v22 + 64) = v25;
          if (v111 != v113) {
            free(v111);
          }
          do
            v9 += 72;
          while ((sub_1CC399CAC(v9, (uint64_t)&v104) & 1) != 0);
          do
            v22 -= 72;
          while (!sub_1CC399CAC(v22, (uint64_t)&v104));
        }
        while (v9 < v22);
      }
      if (v9 - 72 != a1)
      {
        *(void *)a1 = *(void *)(v9 - 72);
        sub_1CD41C56C(a1 + 8, v9 - 64);
        int v26 = *(_DWORD *)(v9 - 8);
        *(void *)(a1 + 56) = *(void *)(v9 - 16);
        *(_DWORD *)(a1 + 64) = v26;
      }
      *(void *)(v9 - 72) = v104;
      sub_1CD41C56C(v9 - 64, (uint64_t)&v105);
      uint64_t v27 = v108;
      *(_DWORD *)(v9 - 8) = v109;
      *(void *)(v9 - 16) = v27;
      if (v105 != v107) {
        free(v105);
      }
      BOOL v4 = v20 >= v21;
      a2 = (uint64_t *)v100;
      a3 = v102;
      if (!v4)
      {
LABEL_42:
        sub_1CC398E88(a1, v9 - 72, v102, a4 & 1);
        goto LABEL_43;
      }
      BOOL v28 = sub_1CC39A4E4(a1, v9 - 72);
      if (sub_1CC39A4E4(v9, v100)) {
        break;
      }
      if (!v28) {
        goto LABEL_42;
      }
    }
    a2 = (uint64_t *)(v9 - 72);
    if (!v28) {
      continue;
    }
    break;
  }
}

uint64_t sub_1CC399CAC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(unsigned __int8 ***)(a1 + 8);
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  unint64_t v6 = *(unsigned __int8 ***)(a2 + 8);
  uint64_t v7 = *(unsigned int *)(a2 + 16);
  if (v7)
  {
    uint64_t v8 = 8 * v5;
    uint64_t v9 = 8 * v7 - 8;
    do
    {
      if (!v8 || sub_1CC39A818(v4, v6)) {
        return 1;
      }
      if (sub_1CC39A818(v6, v4)) {
        break;
      }
      ++v4;
      ++v6;
      v8 -= 8;
      uint64_t v10 = v9;
      v9 -= 8;
    }
    while (v10);
    unint64_t v6 = *(unsigned __int8 ***)(a2 + 8);
    uint64_t v11 = *(unsigned int *)(a2 + 16);
    BOOL v4 = *(unsigned __int8 ***)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 16);
    if (v5) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  uint64_t v11 = 0;
  if (!v5)
  {
LABEL_16:
    uint64_t v16 = *(void *)(a1 + 56);
    uint64_t v17 = *(void *)(a2 + 56);
    if (v16 == v17) {
      return *(_DWORD *)(*(void *)a1 + 192) < *(_DWORD *)(*(void *)a2 + 192);
    }
    else {
      return v16 < v17;
    }
  }
LABEL_11:
  uint64_t v13 = 8 * v11;
  uint64_t v14 = 8 * v5 - 8;
  while (v13 && !sub_1CC39A818(v6, v4))
  {
    if (!sub_1CC39A818(v4, v6))
    {
      ++v6;
      ++v4;
      v13 -= 8;
      uint64_t v15 = v14;
      v14 -= 8;
      if (v15) {
        continue;
      }
    }
    goto LABEL_16;
  }
  return 0;
}

void sub_1CC399DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  sub_1CC39A8D0(a1, a2, a3, a4);
  if (sub_1CC399CAC(a5, a4))
  {
    uint64_t v21 = *(void *)a4;
    int v25 = v27;
    uint64_t v26 = 0x400000000;
    if (*(_DWORD *)(a4 + 16)) {
      sub_1CD41C56C((uint64_t)&v25, a4 + 8);
    }
    uint64_t v10 = (uint64_t *)(a4 + 56);
    uint64_t v28 = *(void *)(a4 + 56);
    int v29 = *(_DWORD *)(a4 + 64);
    *(void *)a4 = *(void *)a5;
    sub_1CD41C56C(a4 + 8, a5 + 8);
    uint64_t v11 = *(void *)(a5 + 56);
    *(_DWORD *)(a4 + 64) = *(_DWORD *)(a5 + 64);
    *(void *)(a4 + 56) = v11;
    *(void *)a5 = v21;
    sub_1CD41C56C(a5 + 8, (uint64_t)&v25);
    unint64_t v12 = v25;
    *(void *)(a5 + 56) = v28;
    *(_DWORD *)(a5 + 64) = v29;
    if (v12 != v27) {
      free(v12);
    }
    if (sub_1CC399CAC(a4, a3))
    {
      uint64_t v22 = *(void *)a3;
      int v25 = v27;
      uint64_t v26 = 0x400000000;
      if (*(_DWORD *)(a3 + 16)) {
        sub_1CD41C56C((uint64_t)&v25, a3 + 8);
      }
      uint64_t v13 = (uint64_t *)(a3 + 56);
      uint64_t v28 = *(void *)(a3 + 56);
      int v29 = *(_DWORD *)(a3 + 64);
      *(void *)a3 = *(void *)a4;
      sub_1CD41C56C(a3 + 8, a4 + 8);
      uint64_t v14 = *v10;
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
      *(void *)(a3 + 56) = v14;
      *(void *)a4 = v22;
      sub_1CD41C56C(a4 + 8, (uint64_t)&v25);
      uint64_t v15 = v25;
      uint64_t *v10 = v28;
      *(_DWORD *)(a4 + 64) = v29;
      if (v15 != v27) {
        free(v15);
      }
      if (sub_1CC399CAC(a3, a2))
      {
        uint64_t v23 = *(void *)a2;
        int v25 = v27;
        uint64_t v26 = 0x400000000;
        if (*(_DWORD *)(a2 + 16)) {
          sub_1CD41C56C((uint64_t)&v25, a2 + 8);
        }
        uint64_t v16 = (uint64_t *)(a2 + 56);
        uint64_t v28 = *(void *)(a2 + 56);
        int v29 = *(_DWORD *)(a2 + 64);
        *(void *)a2 = *(void *)a3;
        sub_1CD41C56C(a2 + 8, a3 + 8);
        uint64_t v17 = *v13;
        *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
        *(void *)(a2 + 56) = v17;
        *(void *)a3 = v23;
        sub_1CD41C56C(a3 + 8, (uint64_t)&v25);
        uint64_t v18 = v25;
        uint64_t *v13 = v28;
        *(_DWORD *)(a3 + 64) = v29;
        if (v18 != v27) {
          free(v18);
        }
        if (sub_1CC399CAC(a2, a1))
        {
          uint64_t v24 = *(void *)a1;
          int v25 = v27;
          uint64_t v26 = 0x400000000;
          if (*(_DWORD *)(a1 + 16)) {
            sub_1CD41C56C((uint64_t)&v25, a1 + 8);
          }
          uint64_t v28 = *(void *)(a1 + 56);
          int v29 = *(_DWORD *)(a1 + 64);
          *(void *)a1 = *(void *)a2;
          sub_1CD41C56C(a1 + 8, a2 + 8);
          uint64_t v19 = *v16;
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
          *(void *)(a1 + 56) = v19;
          *(void *)a2 = v24;
          sub_1CD41C56C(a2 + 8, (uint64_t)&v25);
          unint64_t v20 = v25;
          uint64_t *v16 = v28;
          *(_DWORD *)(a2 + 64) = v29;
          if (v20 != v27) {
            free(v20);
          }
        }
      }
    }
  }
}

void sub_1CC39A12C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  char v6 = sub_1CC399CAC(a2, a1);
  int v7 = sub_1CC399CAC(a3, a2);
  if (v6)
  {
    if (v7)
    {
      uint64_t v19 = *(void *)a1;
      uint64_t v24 = v26;
      uint64_t v25 = 0x400000000;
      if (*(_DWORD *)(a1 + 16)) {
        sub_1CD41C56C((uint64_t)&v24, a1 + 8);
      }
      uint64_t v27 = *(void *)(a1 + 56);
      int v28 = *(_DWORD *)(a1 + 64);
      *(void *)a1 = *(void *)a3;
      sub_1CD41C56C(a1 + 8, a3 + 8);
      uint64_t v8 = *(void *)(a3 + 56);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a3 + 64);
      *(void *)(a1 + 56) = v8;
      *(void *)a3 = v19;
      uint64_t v9 = a3 + 8;
    }
    else
    {
      uint64_t v22 = *(void *)a1;
      uint64_t v24 = v26;
      uint64_t v25 = 0x400000000;
      if (*(_DWORD *)(a1 + 16)) {
        sub_1CD41C56C((uint64_t)&v24, a1 + 8);
      }
      uint64_t v27 = *(void *)(a1 + 56);
      int v28 = *(_DWORD *)(a1 + 64);
      *(void *)a1 = *(void *)a2;
      sub_1CD41C56C(a1 + 8, a2 + 8);
      uint64_t v16 = (uint64_t *)(a2 + 56);
      uint64_t v15 = *(void *)(a2 + 56);
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(void *)(a1 + 56) = v15;
      *(void *)a2 = v22;
      sub_1CD41C56C(a2 + 8, (uint64_t)&v24);
      uint64_t v17 = v24;
      *(void *)(a2 + 56) = v27;
      *(_DWORD *)(a2 + 64) = v28;
      if (v17 != v26) {
        free(v17);
      }
      if (!sub_1CC399CAC(a3, a2)) {
        return;
      }
      uint64_t v23 = *(void *)a2;
      uint64_t v24 = v26;
      uint64_t v25 = 0x400000000;
      if (*(_DWORD *)(a2 + 16)) {
        sub_1CD41C56C((uint64_t)&v24, a2 + 8);
      }
      uint64_t v27 = *v16;
      int v28 = *(_DWORD *)(a2 + 64);
      *(void *)a2 = *(void *)a3;
      sub_1CD41C56C(a2 + 8, a3 + 8);
      uint64_t v18 = *(void *)(a3 + 56);
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
      uint64_t *v16 = v18;
      *(void *)a3 = v23;
      uint64_t v9 = a3 + 8;
    }
    sub_1CD41C56C(v9, (uint64_t)&v24);
    uint64_t v10 = v24;
    *(void *)(a3 + 56) = v27;
    *(_DWORD *)(a3 + 64) = v28;
LABEL_9:
    if (v10 != v26) {
      free(v10);
    }
    return;
  }
  if (v7)
  {
    uint64_t v20 = *(void *)a2;
    uint64_t v24 = v26;
    uint64_t v25 = 0x400000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CD41C56C((uint64_t)&v24, a2 + 8);
    }
    uint64_t v11 = (uint64_t *)(a2 + 56);
    uint64_t v27 = *(void *)(a2 + 56);
    int v28 = *(_DWORD *)(a2 + 64);
    *(void *)a2 = *(void *)a3;
    sub_1CD41C56C(a2 + 8, a3 + 8);
    uint64_t v12 = *(void *)(a3 + 56);
    *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
    *(void *)(a2 + 56) = v12;
    *(void *)a3 = v20;
    sub_1CD41C56C(a3 + 8, (uint64_t)&v24);
    uint64_t v13 = v24;
    *(void *)(a3 + 56) = v27;
    *(_DWORD *)(a3 + 64) = v28;
    if (v13 != v26) {
      free(v13);
    }
    if (sub_1CC399CAC(a2, a1))
    {
      uint64_t v21 = *(void *)a1;
      uint64_t v24 = v26;
      uint64_t v25 = 0x400000000;
      if (*(_DWORD *)(a1 + 16)) {
        sub_1CD41C56C((uint64_t)&v24, a1 + 8);
      }
      uint64_t v27 = *(void *)(a1 + 56);
      int v28 = *(_DWORD *)(a1 + 64);
      *(void *)a1 = *(void *)a2;
      sub_1CD41C56C(a1 + 8, a2 + 8);
      uint64_t v14 = *v11;
      *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
      *(void *)(a1 + 56) = v14;
      *(void *)a2 = v21;
      sub_1CD41C56C(a2 + 8, (uint64_t)&v24);
      uint64_t v10 = v24;
      uint64_t *v11 = v27;
      *(_DWORD *)(a2 + 64) = v28;
      goto LABEL_9;
    }
  }
}

BOOL sub_1CC39A4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x8E38E38E38E38E39 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (sub_1CC399CAC(a2 - 72, a1))
      {
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = v21;
        uint64_t v20 = 0x400000000;
        if (*(_DWORD *)(a1 + 16)) {
          sub_1CD41C56C((uint64_t)&v19, a1 + 8);
        }
        uint64_t v22 = *(void *)(a1 + 56);
        int v23 = *(_DWORD *)(a1 + 64);
        *(void *)a1 = *(void *)(a2 - 72);
        sub_1CD41C56C(a1 + 8, a2 - 64);
        uint64_t v6 = *(void *)(a2 - 16);
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 - 8);
        *(void *)(a1 + 56) = v6;
        *(void *)(a2 - 72) = v18;
        sub_1CD41C56C(a2 - 64, (uint64_t)&v19);
        int v7 = v19;
        *(void *)(a2 - 16) = v22;
        *(_DWORD *)(a2 - 8) = v23;
        if (v7 != v21) {
          free(v7);
        }
      }
      return 1;
    case 3uLL:
      sub_1CC39A12C(a1, a1 + 72, a2 - 72);
      return 1;
    case 4uLL:
      sub_1CC39A8D0(a1, a1 + 72, a1 + 144, a2 - 72);
      return 1;
    case 5uLL:
      sub_1CC399DE4(a1, a1 + 72, a1 + 144, a1 + 216, a2 - 72);
      return 1;
    default:
      uint64_t v8 = a1 + 144;
      sub_1CC39A12C(a1, a1 + 72, a1 + 144);
      uint64_t v9 = a1 + 216;
      if (a1 + 216 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      uint64_t v12 = &v19;
      break;
  }
  do
  {
    if (sub_1CC399CAC(v9, v8))
    {
      uint64_t v18 = *(void *)v9;
      uint64_t v19 = v21;
      uint64_t v20 = 0x400000000;
      if (*(_DWORD *)(v9 + 16)) {
        sub_1CD41C56C((uint64_t)v12, v9 + 8);
      }
      uint64_t v13 = (uint64_t)v12;
      uint64_t v22 = *(void *)(v9 + 56);
      int v23 = *(_DWORD *)(v9 + 64);
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = a1 + v14;
        *(void *)(a1 + v14 + 216) = *(void *)(a1 + v14 + 144);
        uint64_t v16 = a1 + v14 + 152;
        sub_1CD41C56C(a1 + v14 + 224, v16);
        *(void *)(v15 + 272) = *(void *)(v15 + 200);
        *(_DWORD *)(v15 + 280) = *(_DWORD *)(v15 + 208);
        if (v14 == -144) {
          break;
        }
        v14 -= 72;
        if ((sub_1CC399CAC((uint64_t)&v18, v15 + 72) & 1) == 0)
        {
          uint64_t v17 = (void *)(a1 + v14 + 216);
          goto LABEL_19;
        }
      }
      uint64_t v17 = (void *)a1;
LABEL_19:
      *uint64_t v17 = v18;
      uint64_t v12 = (void **)v13;
      sub_1CD41C56C(v16, v13);
      *(void *)(v15 + 200) = v22;
      *(_DWORD *)(v15 + 208) = v23;
      if (v19 != v21) {
        free(v19);
      }
      if (++v11 == 8) {
        return v9 + 72 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 72;
    v9 += 72;
  }
  while (v9 != a2);
  return 1;
}

BOOL sub_1CC39A818(unsigned __int8 **a1, unsigned __int8 **a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = **a1;
  unsigned int v4 = **a2;
  BOOL v5 = v3 >= v4;
  if (v3 == v4)
  {
    if (**a1)
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(*((void *)v2 + 1) + 24) + 32) + 16);
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 112))(v8);
      int v10 = *((_DWORD *)*a1 + 4);
      int v11 = *((_DWORD *)*a2 + 4);
      if (*(_DWORD *)(v9 + 8) == 1) {
        return v10 > v11;
      }
      else {
        return v10 < v11;
      }
    }
    BOOL v5 = v2[1] >= *((_DWORD *)*a2 + 1);
  }
  return !v5;
}

void sub_1CC39A8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  sub_1CC39A12C(a1, a2, a3);
  if (sub_1CC399CAC(a4, a3))
  {
    uint64_t v16 = *(void *)a3;
    uint64_t v19 = v21;
    uint64_t v20 = 0x400000000;
    if (*(_DWORD *)(a3 + 16)) {
      sub_1CD41C56C((uint64_t)&v19, a3 + 8);
    }
    uint64_t v8 = (uint64_t *)(a3 + 56);
    uint64_t v22 = *(void *)(a3 + 56);
    int v23 = *(_DWORD *)(a3 + 64);
    *(void *)a3 = *(void *)a4;
    sub_1CD41C56C(a3 + 8, a4 + 8);
    uint64_t v9 = *(void *)(a4 + 56);
    *(_DWORD *)(a3 + 64) = *(_DWORD *)(a4 + 64);
    *(void *)(a3 + 56) = v9;
    *(void *)a4 = v16;
    sub_1CD41C56C(a4 + 8, (uint64_t)&v19);
    int v10 = v19;
    *(void *)(a4 + 56) = v22;
    *(_DWORD *)(a4 + 64) = v23;
    if (v10 != v21) {
      free(v10);
    }
    if (sub_1CC399CAC(a3, a2))
    {
      uint64_t v17 = *(void *)a2;
      uint64_t v19 = v21;
      uint64_t v20 = 0x400000000;
      if (*(_DWORD *)(a2 + 16)) {
        sub_1CD41C56C((uint64_t)&v19, a2 + 8);
      }
      int v11 = (uint64_t *)(a2 + 56);
      uint64_t v22 = *(void *)(a2 + 56);
      int v23 = *(_DWORD *)(a2 + 64);
      *(void *)a2 = *(void *)a3;
      sub_1CD41C56C(a2 + 8, a3 + 8);
      uint64_t v12 = *v8;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a3 + 64);
      *(void *)(a2 + 56) = v12;
      *(void *)a3 = v17;
      sub_1CD41C56C(a3 + 8, (uint64_t)&v19);
      uint64_t v13 = v19;
      *uint64_t v8 = v22;
      *(_DWORD *)(a3 + 64) = v23;
      if (v13 != v21) {
        free(v13);
      }
      if (sub_1CC399CAC(a2, a1))
      {
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = v21;
        uint64_t v20 = 0x400000000;
        if (*(_DWORD *)(a1 + 16)) {
          sub_1CD41C56C((uint64_t)&v19, a1 + 8);
        }
        uint64_t v22 = *(void *)(a1 + 56);
        int v23 = *(_DWORD *)(a1 + 64);
        *(void *)a1 = *(void *)a2;
        sub_1CD41C56C(a1 + 8, a2 + 8);
        uint64_t v14 = *v11;
        *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
        *(void *)(a1 + 56) = v14;
        *(void *)a2 = v18;
        sub_1CD41C56C(a2 + 8, (uint64_t)&v19);
        uint64_t v15 = v19;
        uint64_t *v11 = v22;
        *(_DWORD *)(a2 + 64) = v23;
        if (v15 != v21) {
          free(v15);
        }
      }
    }
  }
}

uint64_t sub_1CC39AB68(uint64_t *a1, _DWORD *a2, void *a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    uint64_t v4 = *a1;
    int v5 = v3 - 1;
    unsigned int v6 = (37 * *a2) & (v3 - 1);
    int v7 = (_DWORD *)(*a1 + 12 * v6);
    int v8 = *v7;
    if (*a2 == *v7)
    {
      uint64_t result = 1;
    }
    else
    {
      int v10 = 0;
      int v11 = 1;
      uint64_t result = 1;
      while (v8 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v8 == -2;
        }
        if (v12) {
          int v10 = v7;
        }
        unsigned int v13 = v6 + v11++;
        unsigned int v6 = v13 & v5;
        int v7 = (_DWORD *)(v4 + 12 * (v13 & v5));
        int v8 = *v7;
        if (*a2 == *v7) {
          goto LABEL_4;
        }
      }
      uint64_t result = 0;
      if (v10) {
        int v7 = v10;
      }
    }
  }
  else
  {
    int v7 = 0;
    uint64_t result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CC39AC08(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1CC39ACBC(a1, v7);
  uint64_t v9 = 0;
  sub_1CC39AB68((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

_DWORD *sub_1CC39ACBC(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CC39AD94(a1, v4, v4 + 12 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 12 * v10;
    do
    {
      *uint64_t result = -1;
      result += 3;
      v11 -= 12;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CC39AD94(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(_DWORD **)result;
    uint64_t v8 = 12 * v6;
    do
    {
      *int v7 = -1;
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      uint64_t v10 = 0;
      uint64_t result = sub_1CC39AB68((uint64_t *)v5, (_DWORD *)a2, &v10);
      uint64_t v9 = v10;
      _DWORD *v10 = *(_DWORD *)a2;
      *(void *)(v9 + 1) = *(void *)(a2 + 4);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 12;
  }
  return result;
}

void sub_1CC39AE48()
{
}

void sub_1CC39AE60()
{
}

void sub_1CC39AE74(uint64_t a1, uint64_t *a2)
{
  v137[8] = *MEMORY[0x1E4F143B8];
  unint64_t v2 = a2[116];
  uint64_t v3 = a2[117];
  if (v2 == v3) {
    return;
  }
  while (1)
  {
    int v6 = **(unsigned __int16 **)(v2 + 16);
    if ((v6 - 13) >= 5 && v6 != 23) {
      break;
    }
    if ((*(unsigned char *)v2 & 4) == 0)
    {
      while ((*(_WORD *)(v2 + 44) & 8) != 0)
        unint64_t v2 = *(void *)(v2 + 8);
    }
    unint64_t v2 = *(void *)(v2 + 8);
    if (v2 == v3) {
      return;
    }
  }
  __int16 v8 = *(_WORD *)(v2 + 44);
  unint64_t v9 = v2;
  if ((v8 & 4) != 0)
  {
    unint64_t v9 = v2;
    do
      unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v9 + 44) & 4) != 0);
  }
  uint64_t v10 = *(void *)(a2[330] + 288);
  if ((v8 & 8) != 0)
  {
    do
      unint64_t v2 = *(void *)(v2 + 8);
    while ((*(_WORD *)(v2 + 44) & 8) != 0);
  }
  unint64_t v11 = *(void *)(v2 + 8);
  if (v9 != v11)
  {
    while (1)
    {
      unsigned int v12 = **(unsigned __int16 **)(v9 + 16);
      BOOL v84 = v12 > 0x17;
      int v13 = (1 << v12) & 0x83E000;
      if (v84 || v13 == 0) {
        break;
      }
      unint64_t v9 = *(void *)(v9 + 8);
      if (v9 == v11)
      {
        unint64_t v9 = v11;
        break;
      }
    }
  }
  uint64_t v15 = *(void *)(v10 + 368);
  uint64_t v16 = *(unsigned int *)(v10 + 384);
  if (v16)
  {
    LODWORD(v17) = ((v9 >> 4) ^ (v9 >> 9)) & (v16 - 1);
    uint64_t v18 = (uint64_t *)(v15 + 16 * v17);
    uint64_t v19 = *v18;
    if (v9 == *v18) {
      goto LABEL_28;
    }
    int v20 = 1;
    while (v19 != -4096)
    {
      int v21 = v17 + v20++;
      uint64_t v17 = v21 & (v16 - 1);
      uint64_t v19 = *(void *)(v15 + 16 * v17);
      if (v9 == v19)
      {
        uint64_t v18 = (uint64_t *)(v15 + 16 * v17);
        goto LABEL_28;
      }
    }
  }
  uint64_t v18 = (uint64_t *)(v15 + 16 * v16);
LABEL_28:
  *(void *)(a1 + 8) = v18[1];
  unint64_t v22 = sub_1CC3902EC(a2[117], a2[116]);
  __int16 v23 = *(_WORD *)(v22 + 44);
  unint64_t v24 = v22;
  if ((v23 & 4) != 0)
  {
    unint64_t v24 = v22;
    do
      unint64_t v24 = *(void *)v24 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v24 + 44) & 4) != 0);
  }
  if ((v23 & 8) != 0)
  {
    do
      unint64_t v22 = *(void *)(v22 + 8);
    while ((*(_WORD *)(v22 + 44) & 8) != 0);
  }
  uint64_t v25 = *(void *)(v22 + 8);
  if (v24 != v25)
  {
    while (1)
    {
      unsigned int v26 = **(unsigned __int16 **)(v24 + 16);
      BOOL v84 = v26 > 0x17;
      int v27 = (1 << v26) & 0x83E000;
      if (v84 || v27 == 0) {
        break;
      }
      unint64_t v24 = *(void *)(v24 + 8);
      if (v24 == v25)
      {
        unint64_t v24 = *(void *)(v22 + 8);
        break;
      }
    }
  }
  if (v16)
  {
    LODWORD(v29) = ((v24 >> 4) ^ (v24 >> 9)) & (v16 - 1);
    uint64_t v30 = (uint64_t *)(v15 + 16 * v29);
    uint64_t v31 = *v30;
    if (v24 == *v30) {
      goto LABEL_44;
    }
    int v32 = 1;
    while (v31 != -4096)
    {
      int v33 = v29 + v32++;
      uint64_t v29 = v33 & (v16 - 1);
      uint64_t v31 = *(void *)(v15 + 16 * v29);
      if (v24 == v31)
      {
        uint64_t v30 = (uint64_t *)(v15 + 16 * v29);
        goto LABEL_44;
      }
    }
  }
  uint64_t v30 = (uint64_t *)(v15 + 16 * v16);
LABEL_44:
  *(void *)(a1 + 16) = v30[1];
  uint64_t v35 = a2[6];
  uint64_t v34 = a2[7];
  if (v35 != v34)
  {
    int v36 = a2 + 119;
    uint64_t v37 = v137;
    int64_t v38 = &v134;
    BOOL v39 = (const llvm::SUnit *)(a2 + 43);
    int64_t v40 = (llvm::ScheduleDAGTopologicalSort *)(a2 + 265);
    uint64_t v41 = 0x800000000;
    while (1)
    {
      uint64_t v42 = *(void *)(v35 + 8);
      if (**(_WORD **)(v42 + 16) != 19) {
        goto LABEL_91;
      }
      uint64_t v43 = *(_DWORD **)(v42 + 32);
      int v44 = v43[9];
      if ((v44 & 0x80000000) == 0) {
        goto LABEL_91;
      }
      int v45 = v43[8];
      int v46 = v45 & 0x30000000;
      int v47 = v45 & 0x10FFF00;
      if (v46 || v47 == 0x1000000) {
        goto LABEL_91;
      }
      int v49 = v43[1];
      if ((v49 & 0x80000000) == 0 || (~*v43 & 0x5000000) == 0) {
        goto LABEL_91;
      }
      uint64_t v50 = a2[330];
      unint64_t v51 = v44 & 0x7FFFFFFF;
      uint64_t v52 = (void *)(v50 + 408);
      unint64_t v53 = *(unsigned int *)(v50 + 416);
      BOOL v75 = v51 >= v53;
      unint64_t v54 = v51 - v53;
      if (v75)
      {
        sub_1CB9153B8((uint64_t)v52, v54 + 1, *(void *)(v50 + 424));
LABEL_108:
        llvm::LiveIntervals::createInterval();
      }
      int v55 = *(llvm::SUnit **)(*v52 + 8 * v51);
      if (!v55) {
        goto LABEL_108;
      }
      uint64_t v56 = **(void **)v55;
      unsigned int v57 = *(_DWORD *)((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) + 24);
      if (((v56 >> 1) & 3 | *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v57
        || (uint64_t v58 = *(void *)(*(void *)v55 + 24 * *((unsigned int *)v55 + 2) - 16),
            ((v58 >> 1) & 3 | *(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((*(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) + 24) | 3u)))
      {
        unint64_t v60 = *(unsigned int *)(v50 + 416);
        BOOL v75 = (v49 & 0x7FFFFFFFu) >= v60;
        unint64_t v61 = (v49 & 0x7FFFFFFF) - v60;
        if (v75)
        {
          sub_1CB9153B8((uint64_t)v52, v61 + 1, *(void *)(v50 + 424));
LABEL_110:
          llvm::LiveIntervals::createInterval();
        }
        int v55 = *(llvm::SUnit **)(*v52 + 8 * (v49 & 0x7FFFFFFF));
        if (!v55) {
          goto LABEL_110;
        }
        uint64_t v56 = **(void **)v55;
        if (((v56 >> 1) & 3 | *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v57) {
          goto LABEL_91;
        }
        uint64_t v62 = *(void *)(*(void *)v55 + 24 * *((unsigned int *)v55 + 2) - 16);
        int v59 = v44;
        if (((v62 >> 1) & 3 | *(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((*(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8) + 24) | 3u)) {
          goto LABEL_91;
        }
      }
      else
      {
        unint64_t v51 = v49 & 0x7FFFFFFF;
        int v59 = v49;
        int v49 = v44;
      }
      unint64_t v63 = *(unsigned int *)(v50 + 416);
      BOOL v75 = v51 >= v63;
      unint64_t v64 = v51 - v63;
      if (v75)
      {
        sub_1CB9153B8((uint64_t)v52, v64 + 1, *(void *)(v50 + 424));
LABEL_112:
        llvm::LiveIntervals::createInterval();
      }
      uint64_t v65 = *(void *)(*v52 + 8 * v51);
      if (!v65) {
        goto LABEL_112;
      }
      unint64_t v66 = *(unsigned int *)(v65 + 8);
      uint64_t v67 = *(unint64_t **)v65;
      if (!v66) {
        break;
      }
      unint64_t v68 = v67[3 * v66 - 2];
      unsigned int v69 = *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24) | (v56 >> 1) & 3;
      unsigned int v70 = (v68 >> 1) & 3 | *(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v71 = v67;
      unint64_t v72 = v66;
      if (v69 >= v70) {
        goto LABEL_75;
      }
      do
      {
        unint64_t v73 = v72 >> 1;
        unint64_t v74 = v71[3 * (v72 >> 1) + 1];
        LODWORD(v74) = (v74 >> 1) & 3 | *(_DWORD *)((v74 & 0xFFFFFFFFFFFFFFF8) + 24);
        v72 -= (v72 >> 1) + 1;
        BOOL v75 = v69 >= v74;
        if (v69 >= v74) {
          unint64_t v76 = v73 + 1;
        }
        else {
          unint64_t v76 = 0;
        }
        v71 += 3 * v76;
        if (!v75) {
          unint64_t v72 = v73;
        }
      }
      while (v72);
LABEL_76:
      uint64_t v77 = &v67[3 * v66];
      if (v71 == v77) {
        goto LABEL_91;
      }
      unint64_t v78 = v56 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v79 = *(_DWORD *)((v56 & 0xFFFFFFFFFFFFFFF8) + 24) | (v56 >> 1) & 3;
      BOOL v80 = ((*v71 >> 1) & 3 | *(_DWORD *)((*v71 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v79
         && v79 < ((v71[1] >> 1) & 3 | *(_DWORD *)((v71[1] & 0xFFFFFFFFFFFFFFF8) + 24));
      uint64_t v81 = &v71[3 * v80];
      if (v81 == v77) {
        goto LABEL_91;
      }
      unint64_t v82 = *v81;
      if (v81 == v67)
      {
        if (v82 < 8) {
          goto LABEL_91;
        }
        unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
      }
      else
      {
        unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
        if ((*(v81 - 2) & 0xFFFFFFFFFFFFFFF8) == (v82 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_91;
        }
        BOOL v84 = (*(v81 - 3) & 0xFFFFFFFFFFFFFFF8) != v78 && v82 > 7;
        if (!v84) {
          goto LABEL_91;
        }
      }
      if (*(void *)(v83 + 16))
      {
        int v118 = v59;
        BOOL v127 = v40;
        uint64_t v128 = v39;
        uint64_t v124 = v38;
        uint64_t v125 = v37;
        uint64_t v123 = v41;
        unsigned int v121 = v55;
        uint64_t v135 = *(void **)(v83 + 16);
        uint64_t v132 = 0;
        unsigned int v126 = v36;
        if ((sub_1CD3C8538(v36, &v135, &v132) & 1) == 0) {
          goto LABEL_160;
        }
        uint64_t v119 = (llvm::SUnit *)*((void *)v132 + 1);
        uint64_t v41 = v123;
        uint64_t v37 = v125;
        int v36 = v126;
        int64_t v38 = v124;
        int64_t v40 = v127;
        BOOL v39 = v128;
        if (v119)
        {
          uint64_t v135 = v125;
          uint64_t v136 = v123;
          unint64_t v85 = *((unsigned int *)v121 + 2);
          uint64_t v86 = *(void *)v121 + 24 * v85;
          uint64_t v87 = *(void *)(v86 - 16);
          unsigned int v88 = (v87 >> 1) & 3;
          unint64_t v89 = v87 & 0xFFFFFFFFFFFFFFF8;
          if (v88)
          {
            uint64_t v90 = v89 | (2 * (v88 - 1));
            if (v85) {
              goto LABEL_97;
            }
          }
          else
          {
            uint64_t v90 = *(void *)v89 | 6;
            if (v85)
            {
LABEL_97:
              unsigned int v91 = *(_DWORD *)((v90 & 0xFFFFFFFFFFFFFFF8) + 24) | (v90 >> 1) & 3;
              if (v91 < (*(_DWORD *)(v89 + 24) | v88))
              {
                uint64_t v86 = *(void *)v121;
                do
                {
                  unint64_t v92 = v85 >> 1;
                  uint64_t v93 = *(void *)(v86 + 24 * (v85 >> 1) + 8);
                  LODWORD(v93) = (v93 >> 1) & 3 | *(_DWORD *)((v93 & 0xFFFFFFFFFFFFFFF8) + 24);
                  v85 -= (v85 >> 1) + 1;
                  BOOL v94 = v91 >= v93;
                  if (v91 >= v93) {
                    unint64_t v95 = v92 + 1;
                  }
                  else {
                    unint64_t v95 = 0;
                  }
                  v86 += 24 * v95;
                  if (!v94) {
                    unint64_t v85 = v92;
                  }
                }
                while (v85);
              }
            }
          }
          unint64_t v96 = *(void *)(*(void *)(v86 + 16) + 8);
          if (v96 < 8) {
            uint64_t v97 = 0;
          }
          else {
            uint64_t v97 = *(void **)((v96 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          uint64_t v132 = v97;
          uint64_t v129 = 0;
          sub_1CD3C8538(v126, &v132, &v129);
          uint64_t v98 = *(void *)(v129 + 8);
          uint64_t v99 = *(unsigned int *)(v98 + 120);
          uint64_t v100 = v119;
          if (v99)
          {
            uint64_t v101 = *(void *)(v98 + 112);
            uint64_t v102 = 16 * v99;
            do
            {
              if ((*(void *)v101 & 6) == 0)
              {
                uint64_t v103 = (const llvm::SUnit *)(*(void *)v101 & 0xFFFFFFFFFFFFFFF8);
                if (*(_DWORD *)(v101 + 8) == v49 && v100 != v103)
                {
                  if (v128 == v100)
                  {
                    unint64_t v120 = *(void *)v101 & 0xFFFFFFFFFFFFFFF8;
                  }
                  else
                  {
                    if (llvm::ScheduleDAGTopologicalSort::IsReachable(v127, v103, v100)) {
                      goto LABEL_158;
                    }
                    unint64_t v120 = *(void *)v101 & 0xFFFFFFFFFFFFFFF8;
                  }
                  if (v136 >= (unint64_t)HIDWORD(v136)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v100 = v119;
                  *((void *)v135 + v136) = v120;
                  LODWORD(v136) = v136 + 1;
                }
              }
              v101 += 16;
              v102 -= 16;
            }
            while (v102);
          }
          uint64_t v132 = v124;
          uint64_t v133 = v123;
          unint64_t v105 = **(void **)v121;
          if (v105 < 8) {
            uint64_t v106 = 0;
          }
          else {
            uint64_t v106 = *(void *)((v105 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          uint64_t v129 = v106;
          uint64_t v131 = 0;
          int v122 = 0;
          if (sub_1CD3C8538(v126, &v129, &v131)) {
            int v122 = *(llvm::SUnit **)(v131 + 8);
          }
          uint64_t v107 = *((unsigned int *)v119 + 10);
          if (v107)
          {
            uint64_t v108 = *((void *)v119 + 4);
            uint64_t v109 = 16 * v107;
            do
            {
              if ((*(void *)v108 & 6) == 2)
              {
                unint64_t v110 = *(void *)v108 & 0xFFFFFFFFFFFFFFF8;
                if (*(_DWORD *)(v108 + 8) == v118 && v122 != (llvm::SUnit *)v110)
                {
                  if (v128 != v122)
                  {
                    if (llvm::ScheduleDAGTopologicalSort::IsReachable(v127, (const llvm::SUnit *)(*(void *)v108 & 0xFFFFFFFFFFFFFFF8), v122))
                    {
                      goto LABEL_156;
                    }
                    unint64_t v110 = *(void *)v108 & 0xFFFFFFFFFFFFFFF8;
                  }
                  if (v133 >= (unint64_t)HIDWORD(v133)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v132 + v133) = v110;
                  LODWORD(v133) = v133 + 1;
                }
              }
              v108 += 16;
              v109 -= 16;
            }
            while (v109);
          }
          if (v136)
          {
            uint64_t v112 = (uint64_t *)v135;
            uint64_t v113 = 8 * v136;
            do
            {
              uint64_t v114 = *v112++;
              uint64_t v129 = v114 | 6;
              uint64_t v130 = 4;
              llvm::ScheduleDAGInstrs::addEdge((uint64_t)a2, v119, (uint64_t)&v129);
              v113 -= 8;
            }
            while (v113);
          }
          if (v133)
          {
            int v115 = (uint64_t *)v132;
            uint64_t v116 = 8 * v133;
            do
            {
              uint64_t v117 = *v115++;
              uint64_t v129 = v117 | 6;
              uint64_t v130 = 4;
              llvm::ScheduleDAGInstrs::addEdge((uint64_t)a2, v122, (uint64_t)&v129);
              v116 -= 8;
            }
            while (v116);
          }
LABEL_156:
          if (v132 != v124) {
            free(v132);
          }
LABEL_158:
          if (v135 != v125) {
            free(v135);
          }
LABEL_160:
          uint64_t v41 = v123;
          uint64_t v37 = v125;
          int v36 = v126;
          int64_t v38 = v124;
          int64_t v40 = v127;
          BOOL v39 = v128;
        }
      }
LABEL_91:
      v35 += 272;
      if (v35 == v34) {
        return;
      }
    }
    LODWORD(v66) = 0;
LABEL_75:
    uint64_t v71 = &v67[3 * v66];
    goto LABEL_76;
  }
}

uint64_t sub_1CC39BB84()
{
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Force top-down list scheduling";
  v4.n128_u64[1] = 30;
  sub_1CD4C1500((uint64_t)&llvm::ForceTopDown, "misched-topdown", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::ForceTopDown, &dword_1CB82C000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Force bottom-up list scheduling";
  v4.n128_u64[1] = 31;
  sub_1CD4C1500((uint64_t)&llvm::ForceBottomUp, "misched-bottomup", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::ForceBottomUp, &dword_1CB82C000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Print critical path length to stdout";
  v4.n128_u64[1] = 36;
  sub_1CD4C1500((uint64_t)&llvm::DumpCriticalPathLength, "misched-dcpl", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::DumpCriticalPathLength, &dword_1CB82C000);
  LODWORD(v3) = 1;
  v4.n128_u64[0] = (unint64_t)"Verify machine instrs before and after machine scheduling";
  v4.n128_u64[1] = 57;
  sub_1CD4C1500((uint64_t)&llvm::VerifyScheduling, "verify-misched", &v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &llvm::VerifyScheduling, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Limit ready list to N instructions";
  v4.n128_u64[1] = 34;
  int v1 = 256;
  LODWORD(v2) = 1;
  uint64_t v3 = (uint64_t (**)())&v1;
  sub_1CD413D64((uint64_t)&unk_1EBD05888, "misched-limit", &v2, &v4, (int **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBD05888, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable register pressure scheduling.";
  v4.n128_u64[1] = 36;
  LOBYTE(v1) = 1;
  uint64_t v3 = (uint64_t (**)())&v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCCFD90, "misched-regpressure", &v2, &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCFD90, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable cyclic critical path analysis.";
  v4.n128_u64[1] = 37;
  LOBYTE(v1) = 1;
  uint64_t v3 = (uint64_t (**)())&v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCCFE50, "misched-cyclicpath", &v2, &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCFE50, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Enable memop clustering.";
  v4.n128_u64[1] = 24;
  LOBYTE(v1) = 1;
  uint64_t v3 = (uint64_t (**)())&v1;
  sub_1CD54B344(&v2, &v4, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCCFF10, &dword_1CB82C000);
  LODWORD(v2) = 1;
  v4.n128_u64[0] = (unint64_t)"Switch to fast cluster algorithm with the lost of some fusion opportunities";
  v4.n128_u64[1] = 75;
  LOBYTE(v1) = 0;
  uint64_t v3 = (uint64_t (**)())&v1;
  sub_1CD413E90((llvm::cl::Option *)&unk_1EBCCFFD0, "force-fast-cluster", &v2, &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCCFFD0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"The threshold for fast cluster";
  v4.n128_u64[1] = 30;
  int v1 = 1000;
  LODWORD(v2) = 1;
  uint64_t v3 = (uint64_t (**)())&v1;
  sub_1CD413D64((uint64_t)&unk_1EBCD0090, "fast-cluster-threshold", &v2, &v4, (int **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD0090, &dword_1CB82C000);
  unint64_t v2 = sub_1CC38FC10;
  uint64_t v3 = &v2;
  int v1 = 1;
  v4.n128_u64[0] = (unint64_t)"Machine instruction scheduler to use";
  v4.n128_u64[1] = 36;
  sub_1CD54B4BC((uint64_t **)&v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1CD54893C, &qword_1EBCD02D0, &dword_1CB82C000);
  qword_1EBCCFCD0 = 0;
  *(void *)algn_1EBCCFCD8 = "default";
  qword_1EBCCFCE0 = 7;
  unk_1EBCCFCE8 = "Use the target's default scheduler choice.";
  qword_1EBCCFCF0 = 42;
  unk_1EBCCFCF8 = sub_1CC38FC10;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCCFCD0);
  __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCCFCD0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Enable the machine instruction scheduling pass.";
  v4.n128_u64[1] = 47;
  LOBYTE(v1) = 1;
  uint64_t v3 = (uint64_t (**)())&v1;
  LODWORD(v2) = 1;
  sub_1CD54B6EC(&v4, (char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD0150, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Enable the post-ra machine instruction scheduling pass.";
  v4.n128_u64[1] = 55;
  LOBYTE(v1) = 1;
  uint64_t v3 = (uint64_t (**)())&v1;
  LODWORD(v2) = 1;
  sub_1CD54B864(&v4, (char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCD0210, &dword_1CB82C000);
  qword_1EBCCFD00 = 0;
  qword_1EBCCFD08 = (uint64_t)"converge";
  unk_1EBCCFD10 = 8;
  qword_1EBCCFD18 = (uint64_t)"Standard converging scheduler.";
  unk_1EBCCFD20 = 30;
  qword_1EBCCFD28 = (uint64_t)llvm::createGenericSchedLive;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCCFD00);
  __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCCFD00, &dword_1CB82C000);
  qword_1EBCCFD30 = 0;
  qword_1EBCCFD38 = (uint64_t)"ilpmax";
  unk_1EBCCFD40 = 6;
  qword_1EBCCFD48 = (uint64_t)"Schedule bottom-up for max ILP";
  unk_1EBCCFD50 = 30;
  qword_1EBCCFD58 = (uint64_t)sub_1CC395348;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCCFD30);
  __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCCFD30, &dword_1CB82C000);
  qword_1EBCCFD60 = 0;
  unk_1EBCCFD68 = "ilpmin";
  qword_1EBCCFD70 = 6;
  unk_1EBCCFD78 = "Schedule bottom-up for min ILP";
  qword_1EBCCFD80 = 30;
  unk_1EBCCFD88 = sub_1CC39541C;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCCFD60);
  return __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCCFD60, &dword_1CB82C000);
}

void sub_1CC39C0D0(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeMachineBranchProbabilityInfoPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachineCycleInfoWrapperPassPass(a1, v3);
  llvm::initializeAAResultsWrapperPassPass(a1, v4);
  operator new();
}

void sub_1CC39C188()
{
}

void sub_1CC39C220()
{
}

void sub_1CC39C420(uint64_t a1)
{
  *(void *)a1 = &unk_1F260FB80;
  sub_1CD4F4ECC(*(void **)(a1 + 952));
  sub_1CC39FBF8(*(void **)(a1 + 928));
  sub_1CD40B1BC(*(void **)(a1 + 904));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 872), 8);
  sub_1CD54BC50((uint64_t *)(a1 + 800));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 776), 4);
  sub_1CD456CB4((void *)(a1 + 728));
  sub_1CD40B1BC(*(void **)(a1 + 712));
  unint64_t v2 = *(void **)(a1 + 560);
  if (v2 != (void *)(a1 + 576)) {
    free(v2);
  }
  sub_1CD50C1C0((uint64_t *)(a1 + 320));
  *(void *)a1 = &unk_1F260E110;
  uint64_t v3 = *(void **)(a1 + 176);
  if (v3 != (void *)(a1 + 192)) {
    free(v3);
  }
  __n128 v4 = *(void **)(a1 + 104);
  if (v4 != (void *)(a1 + 120)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 32);
  if (v5 != (void *)(a1 + 48)) {
    free(v5);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC39C538(uint64_t a1)
{
  sub_1CC39C420(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC39C570(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineCycleInfoWrapperPass::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBranchProbabilityInfo::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineCycleInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  if (byte_1EBCD06C8)
  {
    sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineBlockFrequencyInfo::ID);
  }
}

void sub_1CC39C668(uint64_t a1)
{
  *(_DWORD *)(a1 + 568) = 0;
  uint64_t v2 = a1 + 712;
  sub_1CD40B1BC(*(void **)(a1 + 712));
  *(void *)(a1 + 704) = v2;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
}

uint64_t sub_1CC39C6A4(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t)a1;
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  if (llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2))
  {
    char v4 = 0;
    return v4 & 1;
  }
  *(void *)(v3 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(v3 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  *(void *)(v3 + 264) = *(void *)(a2 + 40);
  uint64_t v5 = *(uint64_t **)(v3 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_6:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::MachineDominatorTree::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_6;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  *(void *)(v3 + 272) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::MachineDominatorTree::ID);
  unint64_t v9 = *(uint64_t **)(v3 + 8);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_11:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::MachinePostDominatorTree::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_11;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  *(void *)(v3 + 280) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::MachinePostDominatorTree::ID);
  int v13 = *(uint64_t **)(v3 + 8);
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_16:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::MachineCycleInfoWrapperPass::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_16;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  *(void *)(v3 + 288) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::MachineCycleInfoWrapperPass::ID)+ 256;
  if (byte_1EBCD06C8)
  {
    uint64_t v17 = *(uint64_t **)(v3 + 8);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    if (v18 == v19)
    {
LABEL_22:
      uint64_t v20 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v18 != &llvm::MachineBlockFrequencyInfo::ID)
      {
        v18 += 16;
        if (v18 == v19) {
          goto LABEL_22;
        }
      }
      uint64_t v20 = *(void *)(v18 + 8);
    }
    uint64_t v21 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v20 + 96))(v20, &llvm::MachineBlockFrequencyInfo::ID);
  }
  else
  {
    uint64_t v21 = 0;
  }
  *(void *)(v3 + 296) = v21;
  unint64_t v22 = *(uint64_t **)(v3 + 8);
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  if (v23 == v24)
  {
LABEL_29:
    uint64_t v25 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v23 != &llvm::MachineBranchProbabilityInfo::ID)
    {
      v23 += 16;
      if (v23 == v24) {
        goto LABEL_29;
      }
    }
    uint64_t v25 = *(void *)(v23 + 8);
  }
  *(void *)(v3 + 304) = (*(uint64_t (**)(uint64_t, void *))(*(void *)v25 + 96))(v25, &llvm::MachineBranchProbabilityInfo::ID);
  unsigned int v26 = *(uint64_t **)(v3 + 8);
  uint64_t v27 = *v26;
  uint64_t v28 = v26[1];
  if (v27 == v28)
  {
LABEL_34:
    uint64_t v29 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v27 != &llvm::AAResultsWrapperPass::ID)
    {
      v27 += 16;
      if (v27 == v28) {
        goto LABEL_34;
      }
    }
    uint64_t v29 = *(void *)(v27 + 8);
  }
  *(void *)(v3 + 312) = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v29 + 96))(v29, &llvm::AAResultsWrapperPass::ID)+ 32);
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(v3 + 320), (const llvm::MachineFunction *)a2);
  char v30 = 0;
  unint64_t v73 = (_OWORD *)(v3 + 712);
  uint64_t v74 = a2;
  uint64_t v69 = v3 + 728;
  uint64_t v31 = (void *)(a2 + 320);
  uint64_t v72 = v3 + 904;
  uint64_t v71 = v3 + 928;
  unsigned int v70 = (void **)(v3 + 776);
  unint64_t v76 = (void *)(a2 + 320);
  uint64_t v77 = v3;
  do
  {
    char v75 = v30;
    *(_DWORD *)(v3 + 568) = 0;
    sub_1CD40B1BC(*(void **)(v3 + 712));
    *(void *)(v3 + 704) = v73;
    _OWORD *v73 = 0u;
    int v32 = *(_DWORD *)(v3 + 736);
    if (v32)
    {
      unsigned int v40 = *(_DWORD *)(v3 + 744);
      if (v40 <= 4 * v32 || v40 < 0x41) {
        goto LABEL_68;
      }
      int v41 = 1 << (33 - __clz(v32 - 1));
      if (v41 <= 64) {
        int v42 = 64;
      }
      else {
        int v42 = v41;
      }
    }
    else
    {
      if (!*(_DWORD *)(v3 + 740)) {
        goto LABEL_39;
      }
      unsigned int v40 = *(_DWORD *)(v3 + 744);
      if (v40 <= 0x40)
      {
        uint64_t v3 = v77;
        uint64_t v31 = v76;
LABEL_68:
        if (v40)
        {
          uint64_t v48 = *(void **)v69;
          uint64_t v49 = *(void *)v69 + 16 * v40;
          do
          {
            *uint64_t v48 = -4096;
            v48[1] = -4096;
            v48 += 2;
          }
          while (v48 != (void *)v49);
        }
        *(void *)(v3 + 736) = 0;
        goto LABEL_39;
      }
      int v42 = 0;
      uint64_t v3 = v77;
      uint64_t v31 = v76;
    }
    if (v42 == v40)
    {
      *(void *)(v3 + 736) = 0;
      int v45 = *(void **)(v3 + 728);
      size_t v47 = 16 * v40;
      goto LABEL_63;
    }
    MEMORY[0x1D25D9CD0](*(void *)v69, 8);
    if (!v42)
    {
      *(void *)uint64_t v69 = 0;
      *(void *)(v69 + 8) = 0;
      *(_DWORD *)(v69 + 16) = 0;
      goto LABEL_39;
    }
    unint64_t v43 = (4 * v42 / 3u + 1) | ((unint64_t)(4 * v42 / 3u + 1) >> 1);
    unint64_t v44 = v43 | (v43 >> 2) | ((v43 | (v43 >> 2)) >> 4);
    LODWORD(v44) = (((v44 | (v44 >> 8)) >> 16) | v44 | (v44 >> 8)) + 1;
    *(_DWORD *)(v3 + 744) = v44;
    int v45 = operator new(16 * v44, (std::align_val_t)8uLL);
    *(void *)(v3 + 728) = v45;
    *(void *)(v3 + 736) = 0;
    uint64_t v46 = *(unsigned int *)(v3 + 744);
    if (v46)
    {
      size_t v47 = 16 * v46;
LABEL_63:
      memset_pattern16(v45, &unk_1CFAC3070, v47);
    }
LABEL_39:
    *(void *)(v3 + 760) = *(void *)(v3 + 752);
    int v33 = *(void **)(v74 + 328);
    if (v33 == v31) {
      break;
    }
    char v34 = 0;
    do
    {
      if (((v33[12] - v33[11]) & 0x7FFFFFFF0) != 0 && v33 + 6 != (void *)(v33[6] & 0xFFFFFFFFFFFFFFF8))
      {
        llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(v3 + 272));
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::isReachableFromEntry();
      }
      int v33 = (void *)v33[1];
    }
    while (v33 != v31);
    uint64_t v35 = *(const llvm::MachineBasicBlock ***)(v3 + 752);
    int v36 = *(const llvm::MachineBasicBlock ***)(v3 + 760);
    while (v35 != v36)
    {
      unint64_t v37 = llvm::MachineBasicBlock::SplitCriticalEdge(*v35, v35[1], v3, 0);
      if (v37)
      {
        int64_t v38 = (const llvm::MachineBasicBlock *)v37;
        BOOL v39 = *(llvm::MachineBlockFrequencyInfo **)(v3 + 296);
        if (v39) {
          llvm::MachineBlockFrequencyInfo::onEdgeSplit(v39, *v35, v38, *(const llvm::MachineBranchProbabilityInfo **)(v3 + 304));
        }
        char v34 = 1;
      }
      v35 += 2;
    }
    char v30 = 1;
  }
  while ((v34 & 1) != 0);
  if (byte_1EBCD09C8)
  {
    uint64_t v66 = *(void *)(v3 + 288);
    uint64_t v67 = *(char **)(v66 + 64);
    unint64_t v68 = *(char **)(v66 + 72);
    unint64_t v78 = &v80;
    uint64_t v79 = 0x800000000;
    sub_1CD4570C8((uint64_t)&v78, v67, v68);
    if (v79) {
      llvm::GenericCycle<llvm::GenericSSAContext<llvm::MachineFunction>>::getCyclePreheader();
    }
    if (v78 != &v80) {
      free(v78);
    }
  }
  sub_1CD40B1BC(*(void **)(v3 + 904));
  *(void *)(v3 + 896) = v72;
  *(_OWORD *)(v3 + 904) = 0u;
  sub_1CC39FBF8(*(void **)(v3 + 928));
  *(void *)(v3 + 920) = v71;
  *(_OWORD *)(v3 + 928) = 0u;
  int v50 = *(_DWORD *)(v3 + 784);
  uint64_t v51 = *(void *)(v3 + 776);
  uint64_t v52 = *(unsigned int *)(v3 + 792);
  unint64_t v53 = (unsigned int *)(v51 + 4 * v52);
  if (v50)
  {
    if (v52)
    {
      uint64_t v54 = 4 * v52;
      int v55 = *(unsigned int **)(v3 + 776);
      while (*v55 >= 0xFFFFFFFE)
      {
        ++v55;
        v54 -= 4;
        if (!v54) {
          goto LABEL_79;
        }
      }
    }
    else
    {
      int v55 = *(unsigned int **)(v3 + 776);
    }
  }
  else
  {
LABEL_79:
    int v55 = (unsigned int *)(v51 + 4 * v52);
  }
  uint64_t v56 = (unsigned int *)(v51 + 4 * v52);
  if (v55 != v56)
  {
    do
    {
      uint64_t v57 = *v55;
      uint64_t v58 = *(void *)(v3 + 264);
      if ((v57 & 0x80000000) != 0) {
        int v59 = (unsigned int **)(*(void *)(v58 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
      }
      else {
        int v59 = (unsigned int **)(*(void *)(v58 + 272) + 8 * v57);
      }
      unint64_t v60 = *v59;
      if (v60)
      {
        while (1)
        {
          unsigned int v61 = *v60;
          if ((*v60 & 0x1000000) == 0) {
            break;
          }
          unint64_t v60 = (unsigned int *)*((void *)v60 + 3);
          if (!v60) {
            goto LABEL_87;
          }
        }
LABEL_91:
        *unint64_t v60 = v61 & 0xFBFFFFFF;
        while (1)
        {
          unint64_t v60 = (unsigned int *)*((void *)v60 + 3);
          if (!v60) {
            break;
          }
          unsigned int v61 = *v60;
          if ((*v60 & 0x1000000) == 0) {
            goto LABEL_91;
          }
        }
      }
LABEL_87:
      uint64_t v62 = v55 + 1;
      while (v62 != v53)
      {
        unsigned int v63 = *v62++;
        if (v63 <= 0xFFFFFFFD)
        {
          int v55 = v62 - 1;
          goto LABEL_96;
        }
      }
      int v55 = v53;
LABEL_96:
      ;
    }
    while (v55 != v56);
    int v50 = *(_DWORD *)(v3 + 784);
  }
  if (v50 || *(_DWORD *)(v3 + 788))
  {
    uint64_t v65 = *(unsigned int *)(v3 + 792);
    if (v65 <= 4 * v50 || v65 < 0x41)
    {
      if (v65) {
        memset(*v70, 255, 4 * v65);
      }
      *(void *)(v3 + 784) = 0;
    }
    else
    {
      sub_1CBB23624(v70);
    }
  }
  char v4 = v75;
  return v4 & 1;
}

char *sub_1CC39FB54(char *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    uint64_t result = (char *)operator new(40 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    int v5 = *((_DWORD *)v2 + 4);
    if (v5)
    {
      uint64_t v6 = &result[40 * v5];
      do
      {
        *(void *)uint64_t result = 0;
        result[8] = 0;
        result[24] = 0;
        *((void *)result + 4) = 0;
        result += 40;
      }
      while (result != v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void sub_1CC39FBF8(void *a1)
{
  if (a1)
  {
    sub_1CC39FBF8(*a1);
    sub_1CC39FBF8(a1[1]);
    unint64_t v3 = (void *)a1[6];
    if (v3)
    {
      a1[7] = v3;
      operator delete(v3);
    }
    operator delete(a1);
  }
}

uint64_t *sub_1CC39FC54(uint64_t *result)
{
  if (*(unsigned char *)result)
  {
    uint64_t v1 = result + 1;
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = *((unsigned int *)result + 4);
    if (!v2) {
      return result;
    }
    uint64_t v1 = (uint64_t *)result[1];
  }
  uint64_t v3 = 16 * v2;
  uint64_t result = v1 + 1;
  do
  {
    if (*((_DWORD *)result - 2) <= 0xFFFFFFFD) {
      uint64_t result = sub_1CC39FCBC(result);
    }
    result += 2;
    v3 -= 16;
  }
  while (v3);
  return result;
}

uint64_t *sub_1CC39FCBC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((*a1 & 2) != 0)
  {
    uint64_t v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFFCLL);
    if ((v2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
    {
      if (*v3 != v3 + 2) {
        free(*v3);
      }
      MEMORY[0x1D25D9CE0](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

uint64_t sub_1CC39FD20(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    uint64_t v9 = 0;
    uint64_t result = 0;
    goto LABEL_5;
  }
  uint64_t v6 = *a1;
  int v7 = v4 - 1;
  unsigned int v8 = sub_1CC2E9470(a2) & (v4 - 1);
  uint64_t v9 = v6 + 40 * v8;
  if (sub_1CC2E9944((uint64_t)a2, v9))
  {
    uint64_t result = 1;
    goto LABEL_5;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    if (*(void *)v9) {
      goto LABEL_8;
    }
    if (!*(unsigned char *)(v9 + 24)) {
      break;
    }
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      BOOL v13 = *(void *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    BOOL v13 = 0;
LABEL_9:
    if (v13 && v11 == 0) {
      uint64_t v11 = v9;
    }
    int v14 = v12 + 1;
    unsigned int v8 = (v8 + v12) & v7;
    uint64_t v9 = v6 + 40 * v8;
    BOOL v15 = sub_1CC2E9944((uint64_t)a2, v9);
    uint64_t result = 1;
    int v12 = v14;
    if (v15) {
      goto LABEL_5;
    }
  }
  if (*(void *)(v9 + 32)) {
    goto LABEL_8;
  }
  uint64_t result = 0;
  if (v11) {
    uint64_t v9 = v11;
  }
LABEL_5:
  *a3 = v9;
  return result;
}

uint64_t sub_1CC39FE3C(uint64_t a1, int *a2)
{
  uint64_t v5 = a1 + 8;
  unsigned int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v6 = 4;
  }
  else
  {
    int v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      uint64_t result = 0;
      unsigned int v13 = 0;
      goto LABEL_10;
    }
    uint64_t v5 = *(void *)(a1 + 8);
  }
  int v7 = v6 - 1;
  unsigned int v8 = (37 * *a2) & v7;
  uint64_t result = v5 + 16 * v8;
  int v10 = *(_DWORD *)result;
  if (*a2 == *(_DWORD *)result) {
    return result;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (v10 != -1)
  {
    if (v11) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v10 == -2;
    }
    if (v15) {
      uint64_t v11 = result;
    }
    unsigned int v16 = v8 + v12++;
    unsigned int v8 = v16 & v7;
    uint64_t result = v5 + 16 * v8;
    int v10 = *(_DWORD *)result;
    if (*a2 == *(_DWORD *)result) {
      return result;
    }
  }
  if (v11) {
    uint64_t result = v11;
  }
  if (v4) {
    unsigned int v13 = 4;
  }
  else {
    unsigned int v13 = *(_DWORD *)(a1 + 16);
  }
LABEL_10:
  unsigned int v14 = v4 >> 1;
  if (4 * v14 + 4 >= 3 * v13)
  {
    v13 *= 2;
    goto LABEL_18;
  }
  if (v13 + ~v14 - *(_DWORD *)(a1 + 4) <= v13 >> 3)
  {
LABEL_18:
    sub_1CD54BC90(a1, v13);
    uint64_t v17 = 0;
    sub_1CC39FF9C(a1, *a2, &v17);
    uint64_t result = v17;
  }
  *(_DWORD *)a1 += 2;
  if (*(_DWORD *)result != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  *(_DWORD *)uint64_t result = *a2;
  *(void *)(result + 8) = 0;
  return result;
}

uint64_t sub_1CC39FF9C(uint64_t result, int a2, void *a3)
{
  uint64_t v3 = result + 8;
  if (*(unsigned char *)result)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      int v7 = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(result + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  int v7 = (_DWORD *)(v3 + 16 * v6);
  int v8 = *v7;
  if (*v7 != a2)
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -2;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      int v7 = (_DWORD *)(v3 + 16 * (v12 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_8;
      }
    }
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t *sub_1CC3A0034(uint64_t *result, int *a2, int *a3)
{
  int v4 = a2;
  int v5 = result;
  int v6 = *(_DWORD *)result;
  *uint64_t result = *(_DWORD *)result & 1;
  int v7 = result + 1;
  if (v6)
  {
    int v10 = result + 9;
    uint64_t v9 = result + 1;
  }
  else
  {
    uint64_t v8 = *((unsigned int *)result + 4);
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = (uint64_t *)result[1];
    int v10 = &v9[2 * v8];
  }
  do
  {
    *(_DWORD *)uint64_t v9 = -1;
    v9 += 2;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      int v11 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        if (*(unsigned char *)v5)
        {
          int v12 = 4;
          unsigned int v13 = v7;
        }
        else
        {
          unsigned int v13 = (uint64_t *)v5[1];
          int v12 = *((_DWORD *)v5 + 4);
        }
        int v14 = v12 - 1;
        unsigned int v15 = (v12 - 1) & (37 * v11);
        unsigned int v16 = &v13[2 * v15];
        int v17 = *(_DWORD *)v16;
        if (v11 != *(_DWORD *)v16)
        {
          uint64_t v18 = 0;
          int v19 = 1;
          while (v17 != -1)
          {
            if (v18) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v17 == -2;
            }
            if (v20) {
              uint64_t v18 = v16;
            }
            unsigned int v21 = v15 + v19++;
            unsigned int v15 = v21 & v14;
            unsigned int v16 = &v13[2 * (v21 & v14)];
            int v17 = *(_DWORD *)v16;
            if (v11 == *(_DWORD *)v16) {
              goto LABEL_14;
            }
          }
          if (v18) {
            unsigned int v16 = v18;
          }
        }
LABEL_14:
        *(_DWORD *)unsigned int v16 = v11;
        v16[1] = *((void *)v4 + 1);
        *((void *)v4 + 1) = 0;
        *(_DWORD *)v5 += 2;
        uint64_t result = sub_1CC39FCBC((uint64_t *)v4 + 1);
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t sub_1CC3A0178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v12 = 0;
  uint64_t result = sub_1CC39FD20((uint64_t *)a1, (uint64_t *)a2, &v12);
  uint64_t v7 = v12;
  if (result)
  {
    char v10 = 0;
  }
  else
  {
    uint64_t result = sub_1CC3A020C(a1, a2, (uint64_t *)a2, v12);
    uint64_t v7 = result;
    uint64_t v8 = *(void *)(a2 + 32);
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *(_OWORD *)(result + 16) = v9;
    *(void *)(result + 32) = v8;
    char v10 = 1;
  }
  uint64_t v11 = *(void *)a1 + 40 * *(unsigned int *)(a1 + 16);
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v11;
  *(unsigned char *)(a3 + 16) = v10;
  return result;
}

uint64_t sub_1CC3A020C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 8);
  unsigned int v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1CD54BE30(a1, v7);
    uint64_t v9 = 0;
    sub_1CC39FD20((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(void *)a4 || *(unsigned char *)(a4 + 24) || *(void *)(a4 + 32)) {
    --*(_DWORD *)(a1 + 12);
  }
  return a4;
}

uint64_t sub_1CC3A02CC(uint64_t result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  unsigned int v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    uint64_t v7 = *(void *)result;
    uint64_t v8 = *(void *)result + 40 * v6;
    do
    {
      *(void *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 24) = 0;
      *(void *)(v7 + 32) = 0;
      v7 += 40;
    }
    while (v7 != v8);
  }
  while (a2 != a3)
  {
    if (*(void *)a2 || *((unsigned char *)a2 + 24) && *(long long *)((char *)a2 + 8) != 0 || *((void *)a2 + 4))
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CC39FD20((uint64_t *)v5, (uint64_t *)a2, &v12);
      uint64_t v9 = (_OWORD *)v12;
      long long v10 = *a2;
      long long v11 = a2[1];
      *(void *)(v12 + 32) = *((void *)a2 + 4);
      *uint64_t v9 = v10;
      v9[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 = (long long *)((char *)a2 + 40);
  }
  return result;
}

uint64_t sub_1CC3A03A0(uint64_t a1, uint64_t a2, unint64_t a3, unsigned char *a4, uint64_t **a5)
{
  v77[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned int *)(a2 + 40);
  if (!v6)
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (a3) {
      return v10;
    }
    return result;
  }
  uint64_t v7 = a5;
  uint64_t v10 = 0;
  long long v11 = *(int **)(a2 + 32);
  uint64_t v12 = &v11[8 * v6];
  unsigned int v13 = a5 + 1;
  int v14 = v77;
  unsigned int v69 = (a3 >> 4) ^ (a3 >> 9);
  do
  {
    int v15 = *v11;
    if (*v11) {
      goto LABEL_4;
    }
    uint64_t v16 = v11[1];
    if (!v16) {
      goto LABEL_4;
    }
    if (!(v16 >> 30))
    {
      if ((v15 & 0x1000000) != 0)
      {
        if ((~v15 & 0x5000000) != 0) {
          return 0;
        }
      }
      else if ((llvm::MachineRegisterInfo::isConstantPhysReg(*(void **)(a1 + 264), v11[1]) & 1) == 0 {
             && ((*(uint64_t (**)(void, int *))(**(void **)(a1 + 248) + 24))(*(void *)(a1 + 248), v11) & 1) == 0)
      }
      {
        return 0;
      }
      goto LABEL_4;
    }
    if ((v15 & 0x1000000) == 0) {
      goto LABEL_4;
    }
    if (!(*(unsigned int (**)(void, unint64_t))(**(void **)(a1 + 248) + 840))(*(void *)(a1 + 248), *(void *)(*(void *)(*(void *)(a1 + 264) + 24) + 16 * (v16 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8))return 0; {
    if (v10)
    }
    {
      LOBYTE(v71) = 0;
      if ((sub_1CC3A1F3C(a1, v16, v10, a3, a4, &v71) & 1) == 0) {
        return 0;
      }
      goto LABEL_4;
    }
    int v17 = *v13;
    uint64_t v67 = v13;
    unint64_t v68 = v14;
    if (!*v13) {
      goto LABEL_30;
    }
    uint64_t v18 = v13;
    do
    {
      unint64_t v19 = v17[4];
      BOOL v20 = v19 >= a3;
      if (v19 >= a3) {
        unsigned int v21 = (uint64_t **)v17;
      }
      else {
        unsigned int v21 = (uint64_t **)(v17 + 1);
      }
      if (v20) {
        uint64_t v18 = (uint64_t **)v17;
      }
      int v17 = *v21;
    }
    while (*v21);
    if (v18 == v13 || (unint64_t)v18[4] > a3)
    {
LABEL_30:
      unint64_t v22 = *(char **)(a3 + 88);
      uint64_t v23 = *(char **)(a3 + 96);
      uint64_t __src = v14;
      uint64_t v76 = 0x400000000;
      unint64_t v24 = v23 - v22;
      if ((unint64_t)(v23 - v22) >= 0x21) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v22 != v23)
      {
        uint64_t v25 = __src;
        do
        {
          uint64_t v26 = *(void *)v22;
          v22 += 8;
          *v25++ = v26;
        }
        while (v22 != v23);
      }
      LODWORD(v76) = v24 >> 3;
      uint64_t v27 = *(void *)(a1 + 272);
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v27);
      uint64_t v28 = *(void *)(v27 + 1320);
      uint64_t v29 = *(void *)(v28 + 24);
      uint64_t v30 = *(unsigned int *)(v28 + 40);
      if (v30)
      {
        LODWORD(v31) = (v30 - 1) & v69;
        int v32 = (uint64_t *)(v29 + 16 * v31);
        uint64_t v33 = *v32;
        if (*v32 == a3)
        {
LABEL_41:
          uint64_t v36 = v32[1];
          uint64_t v37 = *(unsigned int *)(v36 + 32);
          if (v37)
          {
            int64_t v38 = *(uint64_t ***)(v36 + 24);
            BOOL v39 = &v38[v37];
            do
            {
              if (*(void *)(*v38)[1] == *(void *)(a2 + 24))
              {
                uint64_t v40 = **v38;
                int v41 = *(void **)(a3 + 88);
                int v42 = *(void **)(a3 + 96);
                if (v41 != v42)
                {
                  while (*v41 != v40)
                  {
                    if (++v41 == v42)
                    {
                      int v41 = *(void **)(a3 + 96);
                      break;
                    }
                  }
                }
                if (v41 == v42)
                {
                  if (v76 >= (unint64_t)HIDWORD(v76)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)__src + v76) = v40;
                  LODWORD(v76) = v76 + 1;
                }
              }
              ++v38;
            }
            while (v38 != v39);
          }
          unint64_t v43 = __src;
          unint64_t v44 = v76;
          unint64_t v64 = v7;
          uint64_t v65 = (uint64_t *)((char *)__src + 8 * v76);
          unint64_t v71 = a1;
          if (v76 < 0x81)
          {
LABEL_58:
            sub_1CC3A2600((unint64_t)v43, v65, (uint64_t *)&v71, v44, 0, 0);
          }
          else
          {
            unint64_t v45 = v76;
            while (1)
            {
              uint64_t v46 = (uint64_t *)operator new(8 * v45, MEMORY[0x1E4FBA2D0]);
              if (v46) {
                break;
              }
              BOOL v47 = v45 > 1;
              v45 >>= 1;
              if (!v47) {
                goto LABEL_58;
              }
            }
            uint64_t v48 = v46;
            sub_1CC3A2600((unint64_t)v43, v65, (uint64_t *)&v71, v44, v46, v45);
            operator delete(v48);
          }
          unint64_t v71 = a3;
          uint64_t v72 = v74;
          uint64_t v73 = 0x400000000;
          unint64_t v49 = a3;
          uint64_t v50 = v76;
          if (v76)
          {
            if (v76 >= 5) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v74, __src, 8 * v76);
            LODWORD(v73) = v50;
            unint64_t v49 = v71;
          }
          uint64_t v51 = v67;
          while (1)
          {
            uint64_t v52 = *v51;
            unint64_t v53 = v51;
            if (!*v51) {
              break;
            }
            while (1)
            {
              uint64_t v51 = (uint64_t **)v52;
              unint64_t v54 = v52[4];
              if (v54 > v49) {
                break;
              }
              if (v54 >= v49)
              {
                uint64_t v18 = v51;
                uint64_t v7 = v64;
                goto LABEL_77;
              }
              uint64_t v52 = v51[1];
              if (!v52)
              {
                unint64_t v53 = v51 + 1;
                goto LABEL_69;
              }
            }
          }
LABEL_69:
          uint64_t v66 = v51;
          int v55 = (uint64_t **)operator new(0x58uLL);
          uint64_t v18 = v55;
          v55[4] = (uint64_t *)v49;
          v55[5] = (uint64_t *)(v55 + 7);
          v55[6] = (uint64_t *)0x400000000;
          if (v50)
          {
            if (v72 == v74)
            {
              if (v50 >= 5) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(v55 + 7, v74, 8 * v50);
              *((_DWORD *)v18 + 12) = v50;
            }
            else
            {
              v55[5] = (uint64_t *)v72;
              int v63 = HIDWORD(v73);
              *((_DWORD *)v55 + 12) = v50;
              *((_DWORD *)v55 + 13) = v63;
              uint64_t v72 = v74;
              HIDWORD(v73) = 0;
            }
            LODWORD(v73) = 0;
          }
          *uint64_t v18 = 0;
          v18[1] = 0;
          uint64_t v7 = v64;
          v18[2] = (uint64_t *)v66;
          unsigned int *v53 = (uint64_t *)v18;
          uint64_t v56 = (uint64_t *)**v64;
          uint64_t v57 = (uint64_t *)v18;
          if (v56)
          {
            *unint64_t v64 = v56;
            uint64_t v57 = *v53;
          }
          sub_1CB8358B8(v64[1], v57);
          v64[2] = (uint64_t *)((char *)v64[2] + 1);
LABEL_77:
          if (v72 != v74) {
            free(v72);
          }
          if (__src != v68) {
            free(__src);
          }
          goto LABEL_81;
        }
        int v34 = 1;
        while (v33 != -4096)
        {
          int v35 = v31 + v34++;
          uint64_t v31 = v35 & (v30 - 1);
          uint64_t v33 = *(void *)(v29 + 16 * v31);
          if (v33 == a3)
          {
            int v32 = (uint64_t *)(v29 + 16 * v31);
            goto LABEL_41;
          }
        }
      }
      int v32 = (uint64_t *)(v29 + 16 * v30);
      goto LABEL_41;
    }
LABEL_81:
    uint64_t v58 = *((unsigned int *)v18 + 12);
    if (!v58) {
      return 0;
    }
    int v59 = v18[5];
    uint64_t v60 = 8 * v58;
    while (1)
    {
      uint64_t v10 = *v59;
      LOBYTE(v71) = 0;
      int v61 = sub_1CC3A1F3C(a1, v16, v10, a3, a4, &v71);
      if ((v61 & 1) != 0 || (_BYTE)v71) {
        break;
      }
      ++v59;
      v60 -= 8;
      if (!v60) {
        return 0;
      }
    }
    if (v61)
    {
      unsigned int v13 = v67;
      int v14 = v68;
      if (!v10 || (sub_1CC3A215C(a1, v16, a2, a3, v10) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t result = 0;
      unsigned int v13 = v67;
      int v14 = v68;
      if ((_BYTE)v71) {
        return result;
      }
    }
LABEL_4:
    v11 += 8;
  }
  while (v11 != v12);
  if (v10 == a3 || v10 && (*(unsigned char *)(v10 + 184) || *(unsigned char *)(v10 + 202))) {
    return 0;
  }
  return v10;
}

void sub_1CC3A0A2C(uint64_t a1, uint64_t a2, llvm::MachineBasicBlock *a3, llvm::MachineBasicBlock *a4, char a5)
{
  if (!*(void *)(a1 + 720))
  {
    int v15 = (void *)(a1 + 560);
    uint64_t v16 = *(void *)(a1 + 560);
    uint64_t v17 = *(unsigned int *)(a1 + 568);
    if (!v17) {
      goto LABEL_20;
    }
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(v16 + 8);
    while ((llvm::MachineBasicBlock *)*(v19 - 1) != a3 || *v19 != (void)a4)
    {
      v19 += 2;
      v18 -= 16;
      if (!v18) {
        goto LABEL_19;
      }
    }
    if (v18) {
      goto LABEL_83;
    }
LABEL_19:
    if (v17 <= 7)
    {
LABEL_20:
      if (v17 >= *(_DWORD *)(a1 + 572)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v21 = (void *)(v16 + 16 * v17);
      *unsigned int v21 = a3;
      v21[1] = a4;
      ++*(_DWORD *)(a1 + 568);
      goto LABEL_53;
    }
    int v14 = (uint64_t **)(a1 + 712);
    while (1)
    {
      uint64_t v22 = *v15 + 16 * v17;
      uint64_t v23 = *v14;
      unint64_t v24 = (uint64_t *)(a1 + 712);
      uint64_t v25 = (uint64_t *)(a1 + 712);
      if (*v14) {
        break;
      }
LABEL_35:
      uint64_t v30 = (_OWORD *)(v22 - 16);
      uint64_t v31 = operator new(0x30uLL);
      int v31[2] = *v30;
      *(void *)uint64_t v31 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = v25;
      *unint64_t v24 = (uint64_t)v31;
      uint64_t v32 = **(void **)(a1 + 704);
      if (v32)
      {
        *(void *)(a1 + 704) = v32;
        uint64_t v31 = (_OWORD *)*v24;
      }
      sub_1CB8358B8(*(uint64_t **)(a1 + 712), (uint64_t *)v31);
      ++*(void *)(a1 + 720);
      LODWORD(v17) = *(_DWORD *)(a1 + 568);
LABEL_38:
      LODWORD(v17) = v17 - 1;
      *(_DWORD *)(a1 + 568) = v17;
      if (!v17)
      {
        uint64_t v33 = *v14;
        long long v11 = (uint64_t **)(a1 + 712);
        if (!*v14) {
          goto LABEL_50;
        }
        while (2)
        {
          while (1)
          {
            long long v11 = (uint64_t **)v33;
            unint64_t v34 = v33[4];
            if (v34 > (unint64_t)a3) {
              break;
            }
            if (v34 >= (unint64_t)a3)
            {
              unint64_t v35 = (unint64_t)v11[5];
              if (v35 > (unint64_t)a4) {
                break;
              }
              if (v35 >= (unint64_t)a4) {
                goto LABEL_53;
              }
            }
            uint64_t v33 = v11[1];
            if (!v33)
            {
LABEL_49:
              int v14 = v11 + 1;
              goto LABEL_50;
            }
          }
          uint64_t v33 = *v11;
          int v14 = v11;
          if (!*v11) {
            goto LABEL_50;
          }
          continue;
        }
      }
    }
    unint64_t v26 = *(void *)(v22 - 16);
    unint64_t v27 = *(void *)(v22 - 8);
    while (1)
    {
      uint64_t v25 = v23;
      unint64_t v28 = v23[4];
      if (v26 < v28) {
        goto LABEL_34;
      }
      if (v28 >= v26)
      {
        unint64_t v29 = v25[5];
        if (v27 >= v29)
        {
          if (v29 >= v27) {
            goto LABEL_38;
          }
          goto LABEL_29;
        }
LABEL_34:
        uint64_t v23 = (uint64_t *)*v25;
        unint64_t v24 = v25;
        if (!*v25) {
          goto LABEL_35;
        }
      }
      else
      {
LABEL_29:
        uint64_t v23 = (uint64_t *)v25[1];
        if (!v23)
        {
          unint64_t v24 = v25 + 1;
          goto LABEL_35;
        }
      }
    }
  }
  uint64_t v10 = *(uint64_t **)(a1 + 712);
  if (v10)
  {
    while (1)
    {
      long long v11 = (uint64_t **)v10;
      unint64_t v12 = v10[4];
      if (v12 > (unint64_t)a3) {
        goto LABEL_10;
      }
      if (v12 < (unint64_t)a3) {
        goto LABEL_5;
      }
      unint64_t v13 = (unint64_t)v11[5];
      if (v13 > (unint64_t)a4)
      {
LABEL_10:
        uint64_t v10 = *v11;
        int v14 = v11;
        if (!*v11) {
          goto LABEL_50;
        }
      }
      else
      {
        if (v13 >= (unint64_t)a4) {
          goto LABEL_83;
        }
LABEL_5:
        uint64_t v10 = v11[1];
        if (!v10) {
          goto LABEL_49;
        }
      }
    }
  }
  int v14 = (uint64_t **)(a1 + 712);
  long long v11 = (uint64_t **)(a1 + 712);
LABEL_50:
  uint64_t v36 = (uint64_t *)operator new(0x30uLL);
  v36[4] = (uint64_t)a3;
  v36[5] = (uint64_t)a4;
  *uint64_t v36 = 0;
  v36[1] = 0;
  v36[2] = (uint64_t)v11;
  void *v14 = v36;
  uint64_t v37 = **(void **)(a1 + 704);
  if (v37)
  {
    *(void *)(a1 + 704) = v37;
    uint64_t v36 = *v14;
  }
  sub_1CB8358B8(*(uint64_t **)(a1 + 712), v36);
  ++*(void *)(a1 + 720);
LABEL_53:
  if (**(_WORD **)(a2 + 16) == 19
    || (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 248) + 152))(*(void *)(a1 + 248), a2))
  {
    int64_t v38 = (llvm::MachineBasicBlock **)*((void *)a3 + 11);
    BOOL v39 = (llvm::MachineBasicBlock **)*((void *)a3 + 12);
    if (v38 != v39)
    {
      while (*v38 != a4)
      {
        if (++v38 == v39)
        {
          int64_t v38 = (llvm::MachineBasicBlock **)*((void *)a3 + 12);
          break;
        }
      }
    }
    if (v38 == v39
      || llvm::MachineBranchProbabilityInfo::getEdgeProbability(*(llvm::MachineBranchProbabilityInfo **)(a1 + 304), a3, a4) > ((unint64_t)(((((unint64_t)dword_1EBCD0788 << 31) | 0x30)* (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6))
    {
      uint64_t v40 = *(unsigned int *)(a2 + 40);
      if (!v40) {
        return;
      }
      int v41 = *(_DWORD **)(a2 + 32);
      int v42 = &v41[8 * v40];
      while (1)
      {
        if ((*v41 & 0x10000FF) == 0)
        {
          uint64_t v43 = v41[1];
          if (v43 >> 30)
          {
            uint64_t v44 = *(void *)(a1 + 264);
            unint64_t v45 = (uint64_t *)((v43 & 0x80000000) != 0
                            ? *(void *)(v44 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8
                            : *(void *)(v44 + 272) + 8 * v43);
            uint64_t v46 = *v45;
            if (v46)
            {
              while ((*(_DWORD *)v46 & 0x81000000) != 0)
              {
                uint64_t v46 = *(void *)(v46 + 24);
                if (!v46) {
                  goto LABEL_79;
                }
              }
              while (1)
              {
                uint64_t v46 = *(void *)(v46 + 24);
                if (!v46) {
                  break;
                }
                if ((*(_DWORD *)v46 & 0x81000000) == 0) {
                  goto LABEL_79;
                }
              }
              if ((v43 & 0x80000000) != 0) {
                BOOL v47 = (uint64_t *)(*(void *)(v44 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
              }
              else {
                BOOL v47 = (uint64_t *)(*(void *)(v44 + 272) + 8 * v43);
              }
              uint64_t v48 = *v47;
              if ((*(unsigned char *)(v48 + 3) & 1) == 0) {
                uint64_t v48 = *(void *)(v48 + 24);
              }
              if (*(void *)(*(void *)(v48 + 8) + 24) == *(void *)(a2 + 24)) {
                break;
              }
            }
          }
        }
LABEL_79:
        v41 += 8;
        if (v41 == v42) {
          return;
        }
      }
    }
  }
LABEL_83:
  if (a3 == a4 || !byte_1EBCD0608) {
    return;
  }
  uint64_t v49 = *(void *)(a1 + 288);
  uint64_t v50 = *(void *)(v49 + 16);
  uint64_t v51 = *(unsigned int *)(v49 + 32);
  if (v51)
  {
    LODWORD(v52) = (v51 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    uint64_t v53 = v50 + 16 * v52;
    unint64_t v54 = *(llvm::MachineBasicBlock **)v53;
    if (*(llvm::MachineBasicBlock **)v53 == a3) {
      goto LABEL_92;
    }
    int v55 = 1;
    while (v54 != (llvm::MachineBasicBlock *)-4096)
    {
      int v56 = v52 + v55++;
      uint64_t v52 = v56 & (v51 - 1);
      unint64_t v54 = *(llvm::MachineBasicBlock **)(v50 + 16 * v52);
      if (v54 == a3)
      {
        uint64_t v53 = v50 + 16 * v52;
        goto LABEL_92;
      }
    }
  }
  uint64_t v53 = v50 + 16 * v51;
LABEL_92:
  uint64_t v57 = v50 + 16 * v51;
  if (v53 == v57)
  {
    uint64_t v58 = 0;
    if (!v51) {
      goto LABEL_104;
    }
  }
  else
  {
    uint64_t v58 = *(void *)(v53 + 8);
    if (!v51) {
      goto LABEL_104;
    }
  }
  unsigned int v59 = v51 - 1;
  LODWORD(v51) = (v51 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  uint64_t v60 = v50 + 16 * v51;
  int v61 = *(llvm::MachineBasicBlock **)v60;
  if (*(llvm::MachineBasicBlock **)v60 == a4)
  {
LABEL_101:
    if (v60 != v57)
    {
      uint64_t v64 = *(void *)(v60 + 8);
      if (!v58) {
        goto LABEL_108;
      }
      goto LABEL_105;
    }
  }
  else
  {
    int v62 = 1;
    while (v61 != (llvm::MachineBasicBlock *)-4096)
    {
      int v63 = v51 + v62++;
      uint64_t v51 = v63 & v59;
      int v61 = *(llvm::MachineBasicBlock **)(v50 + 16 * v51);
      if (v61 == a4)
      {
        uint64_t v60 = v50 + 16 * v51;
        goto LABEL_101;
      }
    }
  }
LABEL_104:
  uint64_t v64 = 0;
  if (!v58) {
    goto LABEL_108;
  }
LABEL_105:
  if (v58 == v64 && (*(_DWORD *)(v58 + 16) != 1 || **(llvm::MachineBasicBlock ***)(v58 + 8) == a4)) {
    return;
  }
LABEL_108:
  if ((a5 & 1) == 0)
  {
    for (uint64_t i = (llvm::MachineBasicBlock **)*((void *)a4 + 8); i != *((llvm::MachineBasicBlock ***)a4 + 9); ++i)
    {
      if (*i != a3)
      {
        llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(a1 + 272));
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
      }
    }
  }
  uint64_t v79 = 0;
  if ((sub_1CC3A4FF4(*(void *)(a1 + 728), *(_DWORD *)(a1 + 744), (uint64_t)a3, (uint64_t)a4, &v79) & 1) == 0)
  {
    unsigned int v65 = *(_DWORD *)(a1 + 744);
    int v66 = *(_DWORD *)(a1 + 736);
    if (4 * v66 + 4 >= 3 * v65)
    {
      v65 *= 2;
    }
    else if (v65 + ~v66 - *(_DWORD *)(a1 + 740) > v65 >> 3)
    {
      goto LABEL_112;
    }
    sub_1CC3A50DC(a1 + 728, v65);
    uint64_t v79 = 0;
    sub_1CC3A4FF4(*(void *)(a1 + 728), *(_DWORD *)(a1 + 744), (uint64_t)a3, (uint64_t)a4, &v79);
LABEL_112:
    uint64_t v67 = v79;
    ++*(_DWORD *)(a1 + 736);
    if (*v67 != -4096 || v67[1] != -4096) {
      --*(_DWORD *)(a1 + 740);
    }
    void *v67 = a3;
    v67[1] = a4;
    unint64_t v68 = *(char **)(a1 + 760);
    unint64_t v69 = *(void *)(a1 + 768);
    if ((unint64_t)v68 >= v69)
    {
      uint64_t v72 = *(char **)(a1 + 752);
      uint64_t v73 = (v68 - v72) >> 4;
      unint64_t v74 = v73 + 1;
      if ((unint64_t)(v73 + 1) >> 60) {
        abort();
      }
      uint64_t v75 = v69 - (void)v72;
      if (v75 >> 3 > v74) {
        unint64_t v74 = v75 >> 3;
      }
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v76 = v74;
      }
      if (v76)
      {
        if (v76 >> 60) {
          sub_1CB833614();
        }
        uint64_t v77 = (char *)operator new(16 * v76);
      }
      else
      {
        uint64_t v77 = 0;
      }
      unint64_t v78 = &v77[16 * v73];
      *(void *)unint64_t v78 = a3;
      *((void *)v78 + 1) = a4;
      unsigned int v70 = v78 + 16;
      if (v68 != v72)
      {
        do
        {
          *((_OWORD *)v78 - 1) = *((_OWORD *)v68 - 1);
          v78 -= 16;
          v68 -= 16;
        }
        while (v68 != v72);
        unint64_t v68 = *(char **)(a1 + 752);
      }
      *(void *)(a1 + 752) = v78;
      *(void *)(a1 + 760) = v70;
      *(void *)(a1 + 768) = &v77[16 * v76];
      if (v68) {
        operator delete(v68);
      }
    }
    else
    {
      *(void *)unint64_t v68 = a3;
      *((void *)v68 + 1) = a4;
      unsigned int v70 = v68 + 16;
    }
    *(void *)(a1 + 760) = v70;
  }
}

uint64_t sub_1CC3A1154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = *(void *)(a1 + 56);
  if (v6 != a2)
  {
    if (v6 != a1 + 48)
    {
      while (!**(_WORD **)(v6 + 16) || **(_WORD **)(v6 + 16) == 69)
      {
        uint64_t v6 = *(void *)(v6 + 8);
        if (v6 == a1 + 48)
        {
          uint64_t v6 = a1 + 48;
          break;
        }
      }
    }
    if (v6 != a2)
    {
      uint64_t v12 = 1;
      do
      {
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a5 + 1144))(a5, v6))
        {
          uint64_t v13 = *(unsigned int *)(a3 + 40);
          if (v13)
          {
            int v14 = *(_DWORD **)(a3 + 32);
            for (uint64_t i = 32 * v13; i; i -= 32)
            {
              if (!*v14)
              {
                unsigned int v16 = v14[1];
                if (v16)
                {
                  if ((*v14 & 0x1000000) != 0)
                  {
                    if (llvm::MachineInstr::findRegisterUseOperandIdx(v6, v14[1], 0, a4) != -1) {
                      return 1;
                    }
                    unsigned int RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v6, v16, 0, 1, a4);
                    if (RegisterDefOperandIdx != -1)
                    {
                      uint64_t v18 = *(void *)(v6 + 32);
                      if (v18)
                      {
                        if ((~*(_DWORD *)(v18 + 32 * RegisterDefOperandIdx) & 0x5000000) != 0) {
                          return 1;
                        }
                      }
                    }
                  }
                  else if ((v16 >> 30 {
                          || ((*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)a5 + 24))(a5, v14) & 1) == 0
                  }
                          && (!a6 || (llvm::MachineRegisterInfo::isConstantPhysReg(a6, v16) & 1) == 0))
                         && llvm::MachineInstr::findRegisterDefOperandIdx(v6, v16, 0, 1, a4) != -1)
                  {
                    return v12;
                  }
                }
              }
              v14 += 8;
            }
          }
        }
        if (!v6 || (*(unsigned char *)v6 & 4) == 0)
        {
          while ((*(_WORD *)(v6 + 44) & 8) != 0)
            uint64_t v6 = *(void *)(v6 + 8);
        }
        uint64_t v6 = *(void *)(v6 + 8);
      }
      while (v6 != a2);
    }
  }
  return 0;
}

uint64_t sub_1CC3A1368(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 32);
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v6 + 16) + 104))(*(void *)(v6 + 16));
  if (**(_WORD **)(a1 + 16) == 19)
  {
    uint64_t v9 = *(_DWORD **)(a1 + 32);
    uint64_t v10 = v9 + 8;
    unsigned int v21 = v9;
    uint64_t v22 = v9 + 8;
    char v23 = 1;
  }
  else
  {
    (*(void (**)(_DWORD **__return_ptr))(*(void *)v8 + 416))(&v21);
    if (!v23) {
      return 0;
    }
    uint64_t v9 = v21;
    uint64_t v10 = v22;
  }
  uint64_t result = 0;
  int v12 = *(_DWORD *)(v7 + 32);
  if (((v10[1] ^ a3) & 0x80000000) == 0 && a3 < 0 != (v12 == 0))
  {
    if (v12)
    {
      sub_1CD5364DC(a2, a3, &v32);
      uint64_t i = v32;
      unint64_t v29 = v33;
      if (v35)
      {
        if (v35 == v34)
        {
          uint64_t v31 = v30;
          (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)v35 + 24))(v35, v30, v14);
        }
        else
        {
          uint64_t v31 = (void *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v13, v14);
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      unint64_t v24 = v36;
      uint64_t v25 = v37;
      if (v39)
      {
        if (v39 == v38)
        {
          unint64_t v27 = v26;
          (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)v39 + 24))(v39, v26, v14);
        }
        else
        {
          unint64_t v27 = (void *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v13, v14);
        }
      }
      else
      {
        unint64_t v27 = 0;
      }
      int v15 = i;
      while (v15 != v24)
      {
        int v16 = (*v15 >> 8) & 0xFFF;
        if (v16 != ((*v10 >> 8) & 0xFFF) || v16 != ((*v9 >> 8) & 0xFFF))
        {
          if (v27 == v26)
          {
            (*(void (**)(void *))(v26[0] + 32))(v26);
          }
          else if (v27)
          {
            (*(void (**)(void *, unsigned int *, uint64_t))(*v27 + 40))(v27, v15, v14);
          }
          if (v31 == v30)
          {
            (*(void (**)(void *))(v30[0] + 32))(v30);
          }
          else if (v31)
          {
            (*(void (**)(void *, unsigned int *, uint64_t))(*v31 + 40))(v31, v15, v14);
          }
          sub_1CD536B84(&v32);
          return 0;
        }
        v15 += 8;
        for (uint64_t i = v15; v15 != v29; uint64_t i = v15)
        {
          if (!v31) {
LABEL_75:
          }
            sub_1CB920400();
          char v17 = (*(uint64_t (**)(void *))(*v31 + 48))(v31);
          int v15 = i;
          if (v17) {
            break;
          }
          int v15 = i + 8;
        }
      }
      if (v27 == v26)
      {
        (*(void (**)(void *))(v26[0] + 32))(v26);
      }
      else if (v27)
      {
        (*(void (**)(void *, unsigned int *, uint64_t))(*v27 + 40))(v27, v15, v14);
      }
      if (v31 == v30)
      {
        (*(void (**)(void *))(v30[0] + 32))(v30);
      }
      else if (v31)
      {
        (*(void (**)(void *, unsigned int *, uint64_t))(*v31 + 40))(v31, v15, v14);
      }
      sub_1CD536B84(&v32);
    }
    else if (v9[1] != a3)
    {
      return 0;
    }
    sub_1CD5364DC(a2, a3, &v32);
    uint64_t i = v32;
    unint64_t v29 = v33;
    if (v35)
    {
      if (v35 == v34)
      {
        uint64_t v31 = v30;
        (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)v35 + 24))(v35, v30, v19);
      }
      else
      {
        uint64_t v31 = (void *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v18, v19);
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    unint64_t v24 = v36;
    uint64_t v25 = v37;
    if (v39)
    {
      if (v39 == v38)
      {
        unint64_t v27 = v26;
        (*(void (**)(unsigned char *, void *, uint64_t))(*(void *)v39 + 24))(v39, v26, v19);
      }
      else
      {
        unint64_t v27 = (void *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v18, v19);
      }
    }
    else
    {
      unint64_t v27 = 0;
    }
LABEL_52:
    BOOL v20 = i;
    while (v20 != v24)
    {
      llvm::MachineOperand::setReg((uint64_t)v20, v10[1]);
      *BOOL v20 = *v20 & 0xFFF000FF | (((*v10 >> 8) & 0xFFF) << 8);
      while (1)
      {
        BOOL v20 = i + 8;
        uint64_t i = v20;
        if (v20 == v29) {
          break;
        }
        if (!v31) {
          goto LABEL_75;
        }
        if ((*(unsigned int (**)(void *, unsigned int *))(*v31 + 48))(v31, v20)) {
          goto LABEL_52;
        }
      }
    }
    if (v27 == v26)
    {
      (*(void (**)(void *))(v26[0] + 32))(v26);
    }
    else if (v27)
    {
      (*(void (**)(void *, uint64_t, uint64_t))(*v27 + 40))(v27, v18, v19);
    }
    if (v31 == v30)
    {
      (*(void (**)(void *))(v30[0] + 32))(v30);
    }
    else if (v31)
    {
      (*(void (**)(void *, uint64_t, uint64_t))(*v31 + 40))(v31, v18, v19);
    }
    sub_1CD536B84(&v32);
    return 1;
  }
  return result;
}

uint64_t sub_1CC3A1A80(uint64_t result, uint64_t a2, const llvm::DILocation **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  if (a2 + 48 == (*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFF8) || a2 + 48 == (void)a3)
  {
    uint64_t v60 = 0;
    long long v11 = (unsigned __int8 **)(result + 56);
    if (&v60 == (unsigned __int8 **)(result + 56)) {
      goto LABEL_15;
    }
    int v12 = *v11;
    if (!*v11)
    {
LABEL_8:
      int *v11 = 0;
      goto LABEL_15;
    }
    int v47 = *v12;
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        uint64_t v53 = *v11;
      }
      else {
        uint64_t v53 = 0;
      }
      if ((v47 - 3) <= 0xFFFFFFFD)
      {
        if (v47 == 3) {
          *((void *)v12 + 1) = 0;
        }
        goto LABEL_8;
      }
      unint64_t v49 = (unint64_t)(v53 + 8);
    }
    else
    {
      if ((v12[1] & 0x7F) != 2 && !*((_DWORD *)v12 + 3)) {
        goto LABEL_8;
      }
      uint64_t v48 = *((void *)v12 + 2);
      if ((v48 & 4) == 0) {
        goto LABEL_8;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if (!v49) {
        goto LABEL_8;
      }
    }
    int v62 = (unsigned __int8 **)(result + 56);
    uint64_t result = sub_1CC5FA668(v49 + 16, &v62);
    unint64_t v54 = v60;
    int *v11 = v60;
    if (v54)
    {
      uint64_t result = llvm::MetadataTracking::retrack((uint64_t)&v60, v54, v9 + 56);
      uint64_t v60 = 0;
    }
    goto LABEL_15;
  }
  uint64_t v13 = (unsigned __int8 **)(result + 56);
  uint64_t result = (uint64_t)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(result + 56), a3[7], (const llvm::DILocation *)a3);
  int v61 = (unsigned __int8 *)result;
  if (result) {
    uint64_t result = llvm::MetadataTracking::track((uint64_t)&v61, (unsigned __int8 *)result, 2);
  }
  if (&v61 != v13)
  {
    uint64_t v14 = *v13;
    if (!*v13) {
      goto LABEL_13;
    }
    int v50 = *v14;
    if ((v50 - 4) > 0x1E)
    {
      if ((v50 - 3) >= 0xFFFFFFFE) {
        int v55 = *v13;
      }
      else {
        int v55 = 0;
      }
      if ((v50 - 3) < 0xFFFFFFFE)
      {
        if (v50 == 3) {
          *((void *)v14 + 1) = 0;
        }
        goto LABEL_13;
      }
      unint64_t v52 = (unint64_t)(v55 + 8);
    }
    else if ((v14[1] & 0x7F) != 2 && !*((_DWORD *)v14 + 3) {
           || (uint64_t v51 = *((void *)v14 + 2), (v51 & 4) == 0)
    }
           || (unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_13:
      int v15 = v61;
      uint64_t *v13 = v61;
      if (v15)
      {
        uint64_t result = llvm::MetadataTracking::retrack((uint64_t)&v61, v15, v9 + 56);
        int v61 = 0;
      }
      goto LABEL_15;
    }
    int v62 = (unsigned __int8 **)(v9 + 56);
    uint64_t result = sub_1CC5FA668(v52 + 16, &v62);
    goto LABEL_13;
  }
  if (!v61) {
    goto LABEL_15;
  }
  int v56 = *v61;
  if ((v56 - 4) <= 0x1E)
  {
    if ((v61[1] & 0x7F) != 2 && !*((_DWORD *)v61 + 3)) {
      goto LABEL_15;
    }
    uint64_t v57 = *((void *)v61 + 2);
    if ((v57 & 4) == 0) {
      goto LABEL_15;
    }
    unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
    if (!v58) {
      goto LABEL_15;
    }
LABEL_103:
    int v62 = &v61;
    uint64_t result = sub_1CC5FA668(v58 + 16, &v62);
    goto LABEL_15;
  }
  if ((v56 - 3) >= 0xFFFFFFFE) {
    unsigned int v59 = v61;
  }
  else {
    unsigned int v59 = 0;
  }
  if ((v56 - 3) >= 0xFFFFFFFE)
  {
    unint64_t v58 = (unint64_t)(v59 + 8);
    goto LABEL_103;
  }
  if (v56 == 3) {
    *((void *)v61 + 1) = 0;
  }
LABEL_15:
  uint64_t v16 = *(void *)v9;
  uint64_t v17 = v9;
  if ((*(void *)v9 & 4) == 0)
  {
    uint64_t v17 = v9;
    if ((*(_WORD *)(v9 + 44) & 8) != 0)
    {
      uint64_t v17 = v9;
      do
        uint64_t v17 = *(void *)(v17 + 8);
      while ((*(_WORD *)(v17 + 44) & 8) != 0);
    }
  }
  uint64_t v18 = *(unint64_t **)(v17 + 8);
  if (v18 != (unint64_t *)v9 && v18 != (unint64_t *)a3)
  {
    if (*(void *)(v9 + 24) != a2)
    {
      unint64_t v45 = *(void *)(a2 + 40);
      uint64_t v46 = (unint64_t *)v9;
      do
      {
        v46[3] = v45;
        uint64_t v46 = (unint64_t *)v46[1];
      }
      while (v46 != v18);
    }
    unint64_t v20 = *v18;
    unint64_t v21 = *v18 & 0xFFFFFFFFFFFFFFF8;
    *(void *)((v16 & 0xFFFFFFFFFFFFFFF8) + 8) = v18;
    *uint64_t v18 = v16 & 0xFFFFFFFFFFFFFFF8 | v20 & 7;
    unint64_t v22 = (unint64_t)*a3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v21 + 8) = a3;
    *(void *)uint64_t v9 = v22 | *(void *)v9 & 7;
    *(void *)(v22 + 8) = v9;
    *a3 = (const llvm::DILocation *)(v20 & 0xFFFFFFFFFFFFFFF8 | (unint64_t)*a3 & 7);
  }
  if (a5)
  {
    uint64_t v23 = a4 + 32 * a5;
    do
    {
      uint64_t v24 = *(void *)a4;
      unint64_t v25 = llvm::MachineFunction::CloneMachineInstr(*(llvm::MachineFunction **)(*(void *)(*(void *)a4 + 24) + 32), *(const llvm::MachineInstr **)a4);
      unint64_t v26 = v25;
      uint64_t v27 = *(void *)(a2 + 40);
      *(void *)(v25 + 24) = v27;
      uint64_t v28 = *(void *)(v27 + 32);
      uint64_t v29 = *(unsigned int *)(v25 + 40);
      if (v29)
      {
        uint64_t v38 = *(void *)(v25 + 32);
        uint64_t v39 = *(void *)(v28 + 40);
        uint64_t v40 = 32 * v29;
        do
        {
          if (!*(unsigned char *)v38)
          {
            uint64_t v41 = *(unsigned int *)(v38 + 4);
            if ((int)v41 >= 0) {
              int v42 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v41);
            }
            else {
              int v42 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
            }
            uint64_t v43 = *v42;
            if (*v42)
            {
              uint64_t v44 = *(void *)(v43 + 16);
              *(void *)(v43 + 16) = v38;
              *(void *)(v38 + 16) = v44;
              if (*(unsigned char *)(v38 + 3))
              {
                *(void *)(v38 + 24) = v43;
              }
              else
              {
                *(void *)(v38 + 24) = 0;
                int v42 = (uint64_t *)(v44 + 24);
              }
            }
            else
            {
              *(void *)(v38 + 16) = v38;
              *(void *)(v38 + 24) = 0;
            }
            *int v42 = v38;
          }
          v38 += 32;
          v40 -= 32;
        }
        while (v40);
      }
      uint64_t result = *(void *)(v28 + 728);
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 24))(result, v26);
      }
      unint64_t v30 = (unint64_t)*a3 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v26 = v30 | *(void *)v26 & 7;
      *(void *)(v26 + 8) = a3;
      *(void *)(v30 + 8) = v26;
      *a3 = (const llvm::DILocation *)((unint64_t)*a3 & 7 | v26);
      uint64_t v31 = *(unsigned int *)(a4 + 16);
      if (v31)
      {
        uint64_t v32 = *(int **)(a4 + 8);
        uint64_t v33 = &v32[v31];
        while (1)
        {
          int v34 = *v32;
          uint64_t v35 = *(void *)(v24 + 32);
          if (**(_WORD **)(v24 + 16) != 14)
          {
            uint64_t v37 = v35 + 32;
            goto LABEL_36;
          }
          uint64_t v36 = *(unsigned int *)(v24 + 40);
          if (v36 != 2)
          {
            uint64_t v37 = v35 + 32 * v36;
            v35 += 64;
LABEL_36:
            while (*(unsigned char *)v35 || *(_DWORD *)(v35 + 4) != v34)
            {
              v35 += 32;
              if (v35 == v37) {
                goto LABEL_41;
              }
            }
            uint64_t result = sub_1CC3A1368(v9, v24, v34);
            if (!result) {
              break;
            }
          }
LABEL_41:
          if (++v32 == v33) {
            goto LABEL_42;
          }
        }
        uint64_t result = sub_1CD5485A8(v24);
      }
LABEL_42:
      a4 += 32;
    }
    while (a4 != v23);
  }
  return result;
}

uint64_t sub_1CC3A1F3C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned char *a5, unsigned char *a6)
{
  uint64_t v6 = *(void *)(a1 + 264);
  if ((a2 & 0x80000000) != 0) {
    uint64_t v7 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v7 = (uint64_t *)(*(void *)(v6 + 272) + 8 * a2);
  }
  uint64_t v8 = *v7;
  if (v8)
  {
    if ((*(unsigned char *)(v8 + 3) & 0x81) != 0)
    {
      do
      {
        uint64_t v8 = *(void *)(v8 + 24);
        if (!v8) {
          return 1;
        }
      }
      while ((*(_DWORD *)v8 & 0x81000000) != 0);
    }
    if ((a2 & 0x80000000) != 0) {
      uint64_t v9 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v9 = (uint64_t *)(*(void *)(v6 + 272) + 8 * a2);
    }
    uint64_t v10 = *v9;
    if (!v10) {
      goto LABEL_12;
    }
    while ((*(_DWORD *)v10 & 0x81000000) != 0)
    {
      uint64_t v10 = *(void *)(v10 + 24);
      if (!v10) {
        goto LABEL_12;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
    if (*(void *)(v12 + 24) == a3)
    {
      uint64_t v18 = *(void *)(v12 + 32);
      unint64_t v19 = v10 - v18;
LABEL_30:
      int v20 = **(unsigned __int16 **)(v12 + 16);
      BOOL v21 = v20 == 69 || v20 == 0;
      if (v21 && *(void *)(v18 + 32 * ((v19 >> 5) + 1) + 16) == a4)
      {
        while (1)
        {
          uint64_t v10 = *(void *)(v10 + 24);
          if (!v10) {
            break;
          }
          if ((*(_DWORD *)v10 & 0x81000000) == 0)
          {
            uint64_t v12 = *(void *)(v10 + 8);
            uint64_t v18 = *(void *)(v12 + 32);
            unint64_t v19 = v10 - v18;
            if (*(void *)(v12 + 24) == a3) {
              goto LABEL_30;
            }
            goto LABEL_15;
          }
        }
LABEL_12:
        uint64_t result = 1;
LABEL_13:
        *a5 = 1;
        return result;
      }
    }
LABEL_15:
    if ((a2 & 0x80000000) != 0) {
      uint64_t v13 = (uint64_t *)(*(void *)(v6 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)(*(void *)(v6 + 272) + 8 * a2);
    }
    uint64_t v14 = *v13;
    if (*v13)
    {
      while ((*(_DWORD *)v14 & 0x81000000) != 0)
      {
        uint64_t v14 = *(void *)(v14 + 24);
        if (!v14) {
          return 1;
        }
      }
      uint64_t v15 = *(void *)(v14 + 8);
      int v16 = **(unsigned __int16 **)(v15 + 16);
      BOOL v17 = v16 == 69 || v16 == 0;
      if (v17 || *(void *)(v15 + 24) != a4)
      {
        llvm::MachineDominatorTree::applySplitCriticalEdges(*(void ****)(a1 + 272));
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
      }
      uint64_t result = 0;
      a5 = a6;
      goto LABEL_13;
    }
  }
  return 1;
}

uint64_t sub_1CC3A215C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a5;
  uint64_t v7 = a4;
  if (a4 != a5) {
    llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates();
  }
  return 0;
}

unint64_t sub_1CC3A2600(unint64_t result, uint64_t *a2, uint64_t *a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 < 2) {
    return result;
  }
  uint64_t v8 = (void *)result;
  if (a4 == 2)
  {
    uint64_t v9 = *(a2 - 1);
    uint64_t v10 = *(void *)result;
    uint64_t v11 = *(void *)(*a3 + 296);
    unsigned int v12 = v9 >> 4;
    unsigned int v13 = *(void *)result >> 4;
    if (!v11) {
      goto LABEL_174;
    }
    uint64_t v14 = *(void *)(v11 + 248);
    if (!v14) {
      goto LABEL_174;
    }
    int v15 = *(_DWORD *)(v14 + 176);
    if (!v15) {
      goto LABEL_174;
    }
    uint64_t v16 = *(void *)(v14 + 160);
    unsigned int v17 = v15 - 1;
    uint64_t v18 = v17 & (v12 ^ (v9 >> 9));
    uint64_t v19 = *(void *)(v16 + 16 * v18);
    if (v19 == v9)
    {
LABEL_8:
      uint64_t v20 = *(unsigned int *)(v16 + 16 * v18 + 8);
      if (v20 != 0xFFFFFFFFLL)
      {
        unint64_t v21 = *(void *)(*(void *)(v14 + 8) + 24 * v20 + 16);
        goto LABEL_10;
      }
    }
    else
    {
      int v146 = 1;
      while (v19 != -4096)
      {
        int v147 = v18 + v146++;
        uint64_t v18 = v147 & v17;
        uint64_t v19 = *(void *)(v16 + 16 * v18);
        if (v19 == v9) {
          goto LABEL_8;
        }
      }
    }
    unint64_t v21 = 0;
LABEL_10:
    uint64_t v22 = v17 & (v13 ^ (v10 >> 9));
    uint64_t result = *(void *)(v16 + 16 * v22);
    if (result == v10)
    {
LABEL_11:
      uint64_t v23 = *(unsigned int *)(v16 + 16 * v22 + 8);
      if (v23 != 0xFFFFFFFFLL)
      {
        if (v21)
        {
          unint64_t v24 = *(void *)(*(void *)(v14 + 8) + 24 * v23 + 16);
          if (v24)
          {
            if (v21 >= v24) {
              return result;
            }
            goto LABEL_196;
          }
        }
      }
    }
    else
    {
      int v148 = 1;
      while (result != -4096)
      {
        int v149 = v22 + v148++;
        uint64_t v22 = v149 & v17;
        uint64_t result = *(void *)(v16 + 16 * v22);
        if (result == v10) {
          goto LABEL_11;
        }
      }
    }
LABEL_174:
    uint64_t v150 = *(void *)(*a3 + 288);
    uint64_t v151 = *(void *)(v150 + 16);
    uint64_t v152 = *(unsigned int *)(v150 + 32);
    if (v152)
    {
      LODWORD(v153) = (v152 - 1) & (v12 ^ (v9 >> 9));
      unsigned int v154 = (uint64_t *)(v151 + 16 * v153);
      uint64_t v155 = *v154;
      if (*v154 == v9) {
        goto LABEL_181;
      }
      int v156 = 1;
      while (v155 != -4096)
      {
        int v157 = v153 + v156++;
        uint64_t v153 = v157 & (v152 - 1);
        uint64_t v155 = *(void *)(v151 + 16 * v153);
        if (v155 == v9)
        {
          unsigned int v154 = (uint64_t *)(v151 + 16 * v153);
          goto LABEL_181;
        }
      }
    }
    unsigned int v154 = (uint64_t *)(v151 + 16 * v152);
LABEL_181:
    unsigned int v158 = (uint64_t *)(v151 + 16 * v152);
    if (v154 == v158)
    {
      LODWORD(v159) = 0;
    }
    else
    {
      uint64_t v159 = v154[1];
      if (v159) {
        LODWORD(v159) = *(_DWORD *)(v159 + 80);
      }
    }
    if (v152)
    {
      unsigned int v160 = v152 - 1;
      LODWORD(v161) = v160 & (v13 ^ (v10 >> 9));
      unsigned int v162 = (uint64_t *)(v151 + 16 * v161);
      uint64_t v163 = *v162;
      if (*v162 == v10)
      {
LABEL_191:
        if (v162 != v158)
        {
          uint64_t v166 = v162[1];
          if (v166) {
            LODWORD(v166) = *(_DWORD *)(v166 + 80);
          }
LABEL_195:
          if (v159 >= v166) {
            return result;
          }
LABEL_196:
          *uint64_t v8 = v9;
          *(a2 - 1) = v10;
          return result;
        }
      }
      else
      {
        int v164 = 1;
        while (v163 != -4096)
        {
          int v165 = v161 + v164++;
          uint64_t v161 = v165 & v160;
          uint64_t v163 = *(void *)(v151 + 16 * v161);
          if (v163 == v10)
          {
            unsigned int v162 = (uint64_t *)(v151 + 16 * v161);
            goto LABEL_191;
          }
        }
      }
    }
    LODWORD(v166) = 0;
    goto LABEL_195;
  }
  if ((uint64_t)a4 > 128)
  {
    uint64_t v103 = a5;
    unint64_t v104 = a4 >> 1;
    unint64_t v105 = (uint64_t *)(result + 8 * (a4 >> 1));
    unint64_t v106 = a4 >> 1;
    if ((uint64_t)a4 > a6)
    {
      sub_1CC3A2600(result, v105, a3, v106, a5, a6);
      sub_1CC3A2600(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), v103, a6);
      return sub_1CC3A39E8((unint64_t)v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), v103, a6);
    }
    sub_1CC3A3020(result, v105, (uint64_t)a3, v106, a5);
    uint64_t v107 = &v103[v104];
    uint64_t result = sub_1CC3A3020((unint64_t)&v8[a4 >> 1], a2, (uint64_t)a3, a4 - (a4 >> 1), v107);
    uint64_t v108 = v107;
    uint64_t v109 = &v103[a4];
    while (1)
    {
      if (v108 == v109)
      {
        if (v103 != v107)
        {
          uint64_t v167 = 0;
          do
          {
            v8[v167] = v103[v167];
            ++v167;
          }
          while (&v103[v167] != v107);
        }
        return result;
      }
      uint64_t v110 = *v108;
      uint64_t v111 = *v103;
      uint64_t v112 = *(void *)(*a3 + 296);
      unsigned int v113 = *v108 >> 4;
      unsigned int v114 = *v103 >> 4;
      if (!v112) {
        goto LABEL_140;
      }
      uint64_t v115 = *(void *)(v112 + 248);
      if (!v115) {
        goto LABEL_140;
      }
      int v116 = *(_DWORD *)(v115 + 176);
      if (!v116) {
        goto LABEL_140;
      }
      uint64_t v117 = *(void *)(v115 + 160);
      unsigned int v118 = v116 - 1;
      uint64_t v119 = v118 & (v113 ^ (v110 >> 9));
      uint64_t v120 = *(void *)(v117 + 16 * v119);
      if (v120 == v110)
      {
LABEL_124:
        uint64_t v121 = *(unsigned int *)(v117 + 16 * v119 + 8);
        if (v121 != 0xFFFFFFFFLL)
        {
          unint64_t v122 = *(void *)(*(void *)(v115 + 8) + 24 * v121 + 16);
          goto LABEL_126;
        }
      }
      else
      {
        int v126 = 1;
        while (v120 != -4096)
        {
          int v127 = v119 + v126++;
          uint64_t v119 = v127 & v118;
          uint64_t v120 = *(void *)(v117 + 16 * v119);
          if (v120 == v110) {
            goto LABEL_124;
          }
        }
      }
      unint64_t v122 = 0;
LABEL_126:
      uint64_t v123 = v118 & (v114 ^ (v111 >> 9));
      uint64_t v124 = *(void *)(v117 + 16 * v123);
      if (v124 == v111)
      {
LABEL_127:
        uint64_t result = *(unsigned int *)(v117 + 16 * v123 + 8);
        if (result != 0xFFFFFFFF)
        {
          if (v122)
          {
            unint64_t v125 = *(void *)(*(void *)(v115 + 8) + 24 * result + 16);
            if (v125)
            {
              if (v122 < v125) {
                goto LABEL_162;
              }
              goto LABEL_131;
            }
          }
        }
      }
      else
      {
        int v128 = 1;
        while (v124 != -4096)
        {
          int v129 = v123 + v128++;
          uint64_t v123 = v129 & v118;
          uint64_t v124 = *(void *)(v117 + 16 * v123);
          if (v124 == v111) {
            goto LABEL_127;
          }
        }
      }
LABEL_140:
      uint64_t v130 = *(void *)(*a3 + 288);
      uint64_t v131 = *(void *)(v130 + 16);
      uint64_t v132 = *(unsigned int *)(v130 + 32);
      if (v132)
      {
        LODWORD(v133) = (v132 - 1) & (v113 ^ (v110 >> 9));
        uint64_t v134 = (uint64_t *)(v131 + 16 * v133);
        uint64_t v135 = *v134;
        if (*v134 != v110)
        {
          int v136 = 1;
          do
          {
            if (v135 == -4096) {
              goto LABEL_146;
            }
            int v137 = v133 + v136++;
            uint64_t v133 = v137 & (v132 - 1);
            uint64_t v135 = *(void *)(v131 + 16 * v133);
          }
          while (v135 != v110);
          uint64_t v134 = (uint64_t *)(v131 + 16 * v133);
        }
      }
      else
      {
LABEL_146:
        uint64_t v134 = (uint64_t *)(v131 + 16 * v132);
      }
      uint64_t result = v131 + 16 * v132;
      if (v134 == (uint64_t *)result)
      {
        LODWORD(v138) = 0;
      }
      else
      {
        uint64_t v138 = v134[1];
        if (v138) {
          LODWORD(v138) = *(_DWORD *)(v138 + 80);
        }
      }
      if (!v132) {
        goto LABEL_160;
      }
      unsigned int v139 = v132 - 1;
      LODWORD(v140) = v139 & (v114 ^ (v111 >> 9));
      uint64_t v141 = (uint64_t *)(v131 + 16 * v140);
      uint64_t v142 = *v141;
      if (*v141 != v111)
      {
        int v143 = 1;
        do
        {
          if (v142 == -4096) {
            goto LABEL_160;
          }
          int v144 = v140 + v143++;
          uint64_t v140 = v144 & v139;
          uint64_t v142 = *(void *)(v131 + 16 * v140);
        }
        while (v142 != v111);
        uint64_t v141 = (uint64_t *)(v131 + 16 * v140);
      }
      if (v141 == (uint64_t *)result)
      {
LABEL_160:
        LODWORD(v145) = 0;
      }
      else
      {
        uint64_t v145 = v141[1];
        if (v145) {
          LODWORD(v145) = *(_DWORD *)(v145 + 80);
        }
      }
      if (v138 < v145)
      {
LABEL_162:
        *uint64_t v8 = v110;
        ++v108;
        goto LABEL_163;
      }
LABEL_131:
      *uint64_t v8 = v111;
      ++v103;
LABEL_163:
      ++v8;
      if (v103 == v107)
      {
        if (v108 != v109)
        {
          uint64_t v168 = 0;
          do
          {
            v8[v168] = v108[v168];
            ++v168;
          }
          while (&v108[v168] != v109);
        }
        return result;
      }
    }
  }
  if ((uint64_t *)result == a2) {
    return result;
  }
  unint64_t v26 = result + 8;
  if ((uint64_t *)(result + 8) == a2) {
    return result;
  }
  uint64_t v27 = (void *)result;
  do
  {
    uint64_t v28 = v27;
    uint64_t v27 = (void *)v26;
    uint64_t v30 = *v28;
    uint64_t v29 = v28[1];
    uint64_t v31 = *(void *)(*a3 + 296);
    unsigned int v32 = v29 >> 4;
    unsigned int v33 = *v28 >> 4;
    if (!v31) {
      goto LABEL_40;
    }
    uint64_t v34 = *(void *)(v31 + 248);
    if (!v34) {
      goto LABEL_40;
    }
    int v35 = *(_DWORD *)(v34 + 176);
    if (!v35) {
      goto LABEL_40;
    }
    uint64_t v36 = *(void *)(v34 + 160);
    unsigned int v37 = v35 - 1;
    uint64_t v38 = v37 & (v32 ^ (v29 >> 9));
    uint64_t v39 = *(void *)(v36 + 16 * v38);
    if (v39 == v29)
    {
LABEL_24:
      uint64_t v40 = *(unsigned int *)(v36 + 16 * v38 + 8);
      if (v40 != 0xFFFFFFFFLL)
      {
        unint64_t v41 = *(void *)(*(void *)(v34 + 8) + 24 * v40 + 16);
        goto LABEL_26;
      }
    }
    else
    {
      int v45 = 1;
      while (v39 != -4096)
      {
        int v46 = v38 + v45++;
        uint64_t v38 = v46 & v37;
        uint64_t v39 = *(void *)(v36 + 16 * v38);
        if (v39 == v29) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v41 = 0;
LABEL_26:
    uint64_t v42 = v37 & (v33 ^ (v30 >> 9));
    uint64_t v43 = *(void *)(v36 + 16 * v42);
    if (v43 == v30)
    {
LABEL_27:
      uint64_t result = *(unsigned int *)(v36 + 16 * v42 + 8);
      if (result != 0xFFFFFFFF)
      {
        if (v41)
        {
          unint64_t v44 = *(void *)(*(void *)(v34 + 8) + 24 * result + 16);
          if (v44)
          {
            if (v41 >= v44) {
              goto LABEL_111;
            }
            goto LABEL_62;
          }
        }
      }
    }
    else
    {
      int v47 = 1;
      while (v43 != -4096)
      {
        int v48 = v42 + v47++;
        uint64_t v42 = v48 & v37;
        uint64_t v43 = *(void *)(v36 + 16 * v42);
        if (v43 == v30) {
          goto LABEL_27;
        }
      }
    }
LABEL_40:
    uint64_t v49 = *(void *)(*a3 + 288);
    uint64_t v50 = *(void *)(v49 + 16);
    uint64_t result = *(unsigned int *)(v49 + 32);
    if (result)
    {
      LODWORD(v51) = (result - 1) & (v32 ^ (v29 >> 9));
      unint64_t v52 = (uint64_t *)(v50 + 16 * v51);
      uint64_t v53 = *v52;
      if (*v52 == v29) {
        goto LABEL_47;
      }
      int v54 = 1;
      while (v53 != -4096)
      {
        int v55 = v51 + v54++;
        uint64_t v51 = v55 & (result - 1);
        uint64_t v53 = *(void *)(v50 + 16 * v51);
        if (v53 == v29)
        {
          unint64_t v52 = (uint64_t *)(v50 + 16 * v51);
          goto LABEL_47;
        }
      }
    }
    unint64_t v52 = (uint64_t *)(v50 + 16 * result);
LABEL_47:
    int v56 = (uint64_t *)(v50 + 16 * result);
    if (v52 == v56)
    {
      LODWORD(v57) = 0;
    }
    else
    {
      uint64_t v57 = v52[1];
      if (v57) {
        LODWORD(v57) = *(_DWORD *)(v57 + 80);
      }
    }
    if (!result) {
      goto LABEL_60;
    }
    uint64_t result = (result - 1);
    LODWORD(v58) = result & (v33 ^ (v30 >> 9));
    unsigned int v59 = (uint64_t *)(v50 + 16 * v58);
    uint64_t v60 = *v59;
    if (*v59 != v30)
    {
      int v61 = 1;
      while (v60 != -4096)
      {
        int v62 = v58 + v61++;
        uint64_t v58 = v62 & result;
        uint64_t v60 = *(void *)(v50 + 16 * v58);
        if (v60 == v30)
        {
          unsigned int v59 = (uint64_t *)(v50 + 16 * v58);
          goto LABEL_57;
        }
      }
LABEL_60:
      LODWORD(v63) = 0;
      goto LABEL_61;
    }
LABEL_57:
    if (v59 == v56) {
      goto LABEL_60;
    }
    uint64_t v63 = v59[1];
    if (v63) {
      LODWORD(v63) = *(_DWORD *)(v63 + 80);
    }
LABEL_61:
    if (v57 >= v63) {
      goto LABEL_111;
    }
LABEL_62:
    v28[1] = v30;
    uint64_t v64 = v8;
    if (v28 == v8) {
      goto LABEL_110;
    }
    unsigned int v65 = v32 ^ (v29 >> 9);
    int v66 = v28;
    while (1)
    {
      uint64_t v68 = *--v66;
      uint64_t v67 = v68;
      uint64_t v69 = *(void *)(*a3 + 296);
      unsigned int v70 = v68 >> 4;
      if (!v69) {
        break;
      }
      uint64_t v71 = *(void *)(v69 + 248);
      if (!v71) {
        break;
      }
      int v72 = *(_DWORD *)(v71 + 176);
      if (!v72) {
        break;
      }
      uint64_t v73 = *(void *)(v71 + 160);
      unsigned int v74 = v72 - 1;
      uint64_t v75 = v74 & v65;
      uint64_t v76 = *(void *)(v73 + 16 * v75);
      if (v76 == v29)
      {
LABEL_68:
        uint64_t v77 = *(unsigned int *)(v73 + 16 * v75 + 8);
        if (v77 != 0xFFFFFFFFLL)
        {
          unint64_t v78 = *(void *)(*(void *)(v71 + 8) + 24 * v77 + 16);
          goto LABEL_70;
        }
      }
      else
      {
        int v82 = 1;
        while (v76 != -4096)
        {
          int v83 = v75 + v82++;
          uint64_t v75 = v83 & v74;
          uint64_t v76 = *(void *)(v73 + 16 * v75);
          if (v76 == v29) {
            goto LABEL_68;
          }
        }
      }
      unint64_t v78 = 0;
LABEL_70:
      uint64_t v79 = v74 & (v70 ^ (v67 >> 9));
      uint64_t v80 = *(void *)(v73 + 16 * v79);
      if (v80 != v67)
      {
        int v84 = 1;
        while (v80 != -4096)
        {
          int v85 = v79 + v84++;
          uint64_t v79 = v85 & v74;
          uint64_t v80 = *(void *)(v73 + 16 * v79);
          if (v80 == v67) {
            goto LABEL_71;
          }
        }
        break;
      }
LABEL_71:
      uint64_t v81 = *(unsigned int *)(v73 + 16 * v79 + 8);
      if (v81 == 0xFFFFFFFFLL) {
        break;
      }
      if (!v78) {
        break;
      }
      uint64_t result = *(void *)(*(void *)(v71 + 8) + 24 * v81 + 16);
      if (!result) {
        break;
      }
      if (v78 >= result) {
        goto LABEL_109;
      }
LABEL_106:
      *uint64_t v28 = v67;
      uint64_t v28 = v66;
      if (v66 == v8)
      {
        uint64_t v64 = v8;
        goto LABEL_110;
      }
    }
    uint64_t v86 = *(void *)(*a3 + 288);
    uint64_t v87 = *(void *)(v86 + 16);
    uint64_t v88 = *(unsigned int *)(v86 + 32);
    if (!v88) {
      goto LABEL_90;
    }
    LODWORD(v89) = (v88 - 1) & v65;
    uint64_t v90 = (uint64_t *)(v87 + 16 * v89);
    uint64_t v91 = *v90;
    if (*v90 != v29)
    {
      int v92 = 1;
      while (v91 != -4096)
      {
        int v93 = v89 + v92++;
        uint64_t v89 = v93 & (v88 - 1);
        uint64_t v91 = *(void *)(v87 + 16 * v89);
        if (v91 == v29)
        {
          uint64_t v90 = (uint64_t *)(v87 + 16 * v89);
          goto LABEL_91;
        }
      }
LABEL_90:
      uint64_t v90 = (uint64_t *)(v87 + 16 * v88);
    }
LABEL_91:
    BOOL v94 = (uint64_t *)(v87 + 16 * v88);
    if (v90 == v94)
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = v90[1];
      if (result) {
        uint64_t result = *(unsigned int *)(result + 80);
      }
    }
    if (v88)
    {
      unsigned int v95 = v88 - 1;
      LODWORD(v96) = v95 & (v70 ^ (v67 >> 9));
      uint64_t v97 = (uint64_t *)(v87 + 16 * v96);
      uint64_t v98 = *v97;
      if (*v97 != v67)
      {
        int v99 = 1;
        while (v98 != -4096)
        {
          int v100 = v96 + v99++;
          uint64_t v96 = v100 & v95;
          uint64_t v98 = *(void *)(v87 + 16 * v96);
          if (v98 == v67)
          {
            uint64_t v97 = (uint64_t *)(v87 + 16 * v96);
            goto LABEL_101;
          }
        }
        goto LABEL_104;
      }
LABEL_101:
      if (v97 == v94) {
        goto LABEL_104;
      }
      uint64_t v101 = v97[1];
      if (v101) {
        LODWORD(v101) = *(_DWORD *)(v101 + 80);
      }
    }
    else
    {
LABEL_104:
      LODWORD(v101) = 0;
    }
    if (result < v101) {
      goto LABEL_106;
    }
LABEL_109:
    uint64_t v64 = v28;
LABEL_110:
    *uint64_t v64 = v29;
LABEL_111:
    unint64_t v26 = (unint64_t)(v27 + 1);
  }
  while (v27 + 1 != a2);
  return result;
}

unint64_t sub_1CC3A3020(unint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  if (!a4) {
    return result;
  }
  uint64_t v5 = a5;
  uint64_t v7 = (uint64_t *)result;
  if (a4 == 1)
  {
LABEL_201:
    *uint64_t v5 = *v7;
    return result;
  }
  if (a4 == 2)
  {
    uint64_t v11 = a2 - 1;
    uint64_t v10 = *(a2 - 1);
    uint64_t v12 = *(void *)result;
    uint64_t v13 = *(void *)(*(void *)a3 + 296);
    unsigned int v14 = v10 >> 4;
    unsigned int v15 = *(void *)result >> 4;
    if (!v13) {
      goto LABEL_177;
    }
    uint64_t v16 = *(void *)(v13 + 248);
    if (!v16) {
      goto LABEL_177;
    }
    int v17 = *(_DWORD *)(v16 + 176);
    if (!v17) {
      goto LABEL_177;
    }
    uint64_t v18 = *(void *)(v16 + 160);
    unsigned int v19 = v17 - 1;
    uint64_t v20 = v19 & (v14 ^ (v10 >> 9));
    uint64_t v21 = *(void *)(v18 + 16 * v20);
    if (v21 == v10)
    {
LABEL_8:
      uint64_t v22 = *(unsigned int *)(v18 + 16 * v20 + 8);
      if (v22 != 0xFFFFFFFFLL)
      {
        unint64_t v23 = *(void *)(*(void *)(v16 + 8) + 24 * v22 + 16);
        goto LABEL_10;
      }
    }
    else
    {
      int v144 = 1;
      while (v21 != -4096)
      {
        int v145 = v20 + v144++;
        uint64_t v20 = v145 & v19;
        uint64_t v21 = *(void *)(v18 + 16 * v20);
        if (v21 == v10) {
          goto LABEL_8;
        }
      }
    }
    unint64_t v23 = 0;
LABEL_10:
    uint64_t v24 = v19 & (v15 ^ (v12 >> 9));
    uint64_t result = *(void *)(v18 + 16 * v24);
    if (result == v12)
    {
LABEL_11:
      uint64_t v25 = *(unsigned int *)(v18 + 16 * v24 + 8);
      if (v25 != 0xFFFFFFFFLL)
      {
        if (v23)
        {
          unint64_t v26 = *(void *)(*(void *)(v16 + 8) + 24 * v25 + 16);
          if (v26)
          {
            if (v23 < v26) {
              goto LABEL_200;
            }
            goto LABEL_199;
          }
        }
      }
    }
    else
    {
      int v146 = 1;
      while (result != -4096)
      {
        int v147 = v24 + v146++;
        uint64_t v24 = v147 & v19;
        uint64_t result = *(void *)(v18 + 16 * v24);
        if (result == v12) {
          goto LABEL_11;
        }
      }
    }
LABEL_177:
    uint64_t v148 = *(void *)(*(void *)a3 + 288);
    uint64_t v149 = *(void *)(v148 + 16);
    uint64_t v150 = *(unsigned int *)(v148 + 32);
    if (v150)
    {
      LODWORD(v151) = (v150 - 1) & (v14 ^ (v10 >> 9));
      uint64_t v152 = (uint64_t *)(v149 + 16 * v151);
      uint64_t v153 = *v152;
      if (*v152 == v10) {
        goto LABEL_184;
      }
      int v154 = 1;
      while (v153 != -4096)
      {
        int v155 = v151 + v154++;
        uint64_t v151 = v155 & (v150 - 1);
        uint64_t v153 = *(void *)(v149 + 16 * v151);
        if (v153 == v10)
        {
          uint64_t v152 = (uint64_t *)(v149 + 16 * v151);
          goto LABEL_184;
        }
      }
    }
    uint64_t v152 = (uint64_t *)(v149 + 16 * v150);
LABEL_184:
    int v156 = (uint64_t *)(v149 + 16 * v150);
    if (v152 == v156)
    {
      LODWORD(v157) = 0;
    }
    else
    {
      uint64_t v157 = v152[1];
      if (v157) {
        LODWORD(v157) = *(_DWORD *)(v157 + 80);
      }
    }
    if (v150)
    {
      unsigned int v158 = v150 - 1;
      LODWORD(v159) = v158 & (v15 ^ (v12 >> 9));
      unsigned int v160 = (uint64_t *)(v149 + 16 * v159);
      uint64_t v161 = *v160;
      if (*v160 == v12)
      {
LABEL_194:
        if (v160 != v156)
        {
          uint64_t v164 = v160[1];
          if (v164) {
            LODWORD(v164) = *(_DWORD *)(v164 + 80);
          }
LABEL_198:
          if (v157 < v164)
          {
LABEL_200:
            *a5 = v10;
            uint64_t v5 = a5 + 1;
            goto LABEL_201;
          }
LABEL_199:
          uint64_t v10 = *v7;
          uint64_t v7 = v11;
          goto LABEL_200;
        }
      }
      else
      {
        int v162 = 1;
        while (v161 != -4096)
        {
          int v163 = v159 + v162++;
          uint64_t v159 = v163 & v158;
          uint64_t v161 = *(void *)(v149 + 16 * v159);
          if (v161 == v12)
          {
            unsigned int v160 = (uint64_t *)(v149 + 16 * v159);
            goto LABEL_194;
          }
        }
      }
    }
    LODWORD(v164) = 0;
    goto LABEL_198;
  }
  if ((uint64_t)a4 <= 8)
  {
    if ((uint64_t *)result == a2) {
      return result;
    }
    uint64_t v27 = (uint64_t *)(result + 8);
    *a5 = *(void *)result;
    if ((uint64_t *)(result + 8) == a2) {
      return result;
    }
    uint64_t v28 = a5;
    while (1)
    {
      uint64_t v29 = v28;
      uint64_t v31 = *v28++;
      uint64_t v30 = v31;
      uint64_t v32 = *v27;
      uint64_t v33 = *(void *)(*(void *)a3 + 296);
      unsigned int v34 = *v27 >> 4;
      unsigned int v35 = v31 >> 4;
      if (!v33) {
        goto LABEL_40;
      }
      uint64_t v36 = *(void *)(v33 + 248);
      if (!v36) {
        goto LABEL_40;
      }
      int v37 = *(_DWORD *)(v36 + 176);
      if (!v37) {
        goto LABEL_40;
      }
      uint64_t result = *(void *)(v36 + 160);
      unsigned int v38 = v37 - 1;
      uint64_t v39 = v38 & (v34 ^ (v32 >> 9));
      uint64_t v40 = *(void *)(result + 16 * v39);
      if (v40 == v32)
      {
LABEL_24:
        uint64_t v41 = *(unsigned int *)(result + 16 * v39 + 8);
        if (v41 != 0xFFFFFFFFLL)
        {
          unint64_t v42 = *(void *)(*(void *)(v36 + 8) + 24 * v41 + 16);
          goto LABEL_26;
        }
      }
      else
      {
        int v47 = 1;
        while (v40 != -4096)
        {
          int v48 = v39 + v47++;
          uint64_t v39 = v48 & v38;
          uint64_t v40 = *(void *)(result + 16 * v39);
          if (v40 == v32) {
            goto LABEL_24;
          }
        }
      }
      unint64_t v42 = 0;
LABEL_26:
      uint64_t v43 = v38 & (v35 ^ (v30 >> 9));
      uint64_t v44 = *(void *)(result + 16 * v43);
      if (v44 != v30)
      {
        int v49 = 1;
        while (v44 != -4096)
        {
          int v50 = v43 + v49++;
          uint64_t v43 = v50 & v38;
          uint64_t v44 = *(void *)(result + 16 * v43);
          if (v44 == v30) {
            goto LABEL_27;
          }
        }
LABEL_40:
        uint64_t v51 = *(void *)(*(void *)a3 + 288);
        uint64_t v52 = *(void *)(v51 + 16);
        uint64_t v53 = *(unsigned int *)(v51 + 32);
        if (v53)
        {
          uint64_t result = (v53 - 1);
          LODWORD(v54) = result & (v34 ^ (v32 >> 9));
          int v55 = (unint64_t *)(v52 + 16 * v54);
          unint64_t v56 = *v55;
          if (*v55 != v32)
          {
            int v57 = 1;
            do
            {
              if (v56 == -4096) {
                goto LABEL_46;
              }
              int v58 = v54 + v57++;
              uint64_t v54 = v58 & result;
              unint64_t v56 = *(void *)(v52 + 16 * v54);
            }
            while (v56 != v32);
            int v55 = (unint64_t *)(v52 + 16 * v54);
          }
        }
        else
        {
LABEL_46:
          int v55 = (unint64_t *)(v52 + 16 * v53);
        }
        unsigned int v59 = (unint64_t *)(v52 + 16 * v53);
        if (v55 == v59)
        {
          LODWORD(v60) = 0;
        }
        else
        {
          unint64_t v60 = v55[1];
          if (v60) {
            LODWORD(v60) = *(_DWORD *)(v60 + 80);
          }
        }
        if (!v53) {
          goto LABEL_60;
        }
        unsigned int v61 = v53 - 1;
        LODWORD(v62) = v61 & (v35 ^ (v30 >> 9));
        uint64_t v63 = (unint64_t *)(v52 + 16 * v62);
        uint64_t result = *v63;
        if (*v63 != v30)
        {
          int v64 = 1;
          do
          {
            if (result == -4096) {
              goto LABEL_60;
            }
            int v65 = v62 + v64++;
            uint64_t v62 = v65 & v61;
            uint64_t result = *(void *)(v52 + 16 * v62);
          }
          while (result != v30);
          uint64_t v63 = (unint64_t *)(v52 + 16 * v62);
        }
        if (v63 != v59 && (unint64_t v66 = v63[1]) != 0) {
          unsigned int v67 = *(_DWORD *)(v66 + 80);
        }
        else {
LABEL_60:
        }
          unsigned int v67 = 0;
        int v46 = v28;
        if (v60 >= v67) {
          goto LABEL_110;
        }
LABEL_62:
        v29[1] = v30;
        int v46 = v5;
        if (v29 == v5) {
          goto LABEL_110;
        }
        uint64_t v68 = v29;
        while (2)
        {
          uint64_t v69 = *v27;
          uint64_t v71 = *--v68;
          uint64_t v70 = v71;
          uint64_t v72 = *(void *)(*(void *)a3 + 296);
          unsigned int v73 = *v27 >> 4;
          unsigned int v74 = v71 >> 4;
          if (v72)
          {
            uint64_t v75 = *(void *)(v72 + 248);
            if (v75)
            {
              int v76 = *(_DWORD *)(v75 + 176);
              if (v76)
              {
                uint64_t v77 = *(void *)(v75 + 160);
                unsigned int v78 = v76 - 1;
                uint64_t v79 = v78 & (v73 ^ (v69 >> 9));
                uint64_t v80 = *(void *)(v77 + 16 * v79);
                if (v80 == v69)
                {
LABEL_68:
                  uint64_t v81 = *(unsigned int *)(v77 + 16 * v79 + 8);
                  if (v81 != 0xFFFFFFFFLL)
                  {
                    unint64_t v82 = *(void *)(*(void *)(v75 + 8) + 24 * v81 + 16);
                    goto LABEL_70;
                  }
                }
                else
                {
                  int v86 = 1;
                  while (v80 != -4096)
                  {
                    int v87 = v79 + v86++;
                    uint64_t v79 = v87 & v78;
                    uint64_t v80 = *(void *)(v77 + 16 * v79);
                    if (v80 == v69) {
                      goto LABEL_68;
                    }
                  }
                }
                unint64_t v82 = 0;
LABEL_70:
                uint64_t v83 = v78 & (v74 ^ (v70 >> 9));
                uint64_t v84 = *(void *)(v77 + 16 * v83);
                if (v84 == v70)
                {
LABEL_71:
                  uint64_t v85 = *(unsigned int *)(v77 + 16 * v83 + 8);
                  if (v85 != 0xFFFFFFFFLL)
                  {
                    if (v82)
                    {
                      uint64_t result = *(void *)(*(void *)(v75 + 8) + 24 * v85 + 16);
                      if (result)
                      {
                        if (v82 >= result) {
                          goto LABEL_109;
                        }
LABEL_106:
                        *uint64_t v29 = v70;
                        uint64_t v29 = v68;
                        if (v68 == v5)
                        {
                          int v46 = v5;
                          goto LABEL_110;
                        }
                        continue;
                      }
                    }
                  }
                }
                else
                {
                  int v88 = 1;
                  while (v84 != -4096)
                  {
                    int v89 = v83 + v88++;
                    uint64_t v83 = v89 & v78;
                    uint64_t v84 = *(void *)(v77 + 16 * v83);
                    if (v84 == v70) {
                      goto LABEL_71;
                    }
                  }
                }
              }
            }
          }
          break;
        }
        uint64_t v90 = *(void *)(*(void *)a3 + 288);
        uint64_t v91 = *(void *)(v90 + 16);
        uint64_t result = *(unsigned int *)(v90 + 32);
        if (result)
        {
          LODWORD(v92) = (result - 1) & (v73 ^ (v69 >> 9));
          int v93 = (uint64_t *)(v91 + 16 * v92);
          uint64_t v94 = *v93;
          if (*v93 != v69)
          {
            int v95 = 1;
            while (v94 != -4096)
            {
              int v96 = v92 + v95++;
              uint64_t v92 = v96 & (result - 1);
              uint64_t v94 = *(void *)(v91 + 16 * v92);
              if (v94 == v69)
              {
                int v93 = (uint64_t *)(v91 + 16 * v92);
                goto LABEL_91;
              }
            }
            goto LABEL_90;
          }
        }
        else
        {
LABEL_90:
          int v93 = (uint64_t *)(v91 + 16 * result);
        }
LABEL_91:
        uint64_t v97 = (uint64_t *)(v91 + 16 * result);
        if (v93 == v97)
        {
          LODWORD(v98) = 0;
        }
        else
        {
          uint64_t v98 = v93[1];
          if (v98) {
            LODWORD(v98) = *(_DWORD *)(v98 + 80);
          }
        }
        if (result)
        {
          uint64_t result = (result - 1);
          LODWORD(v99) = result & (v74 ^ (v70 >> 9));
          int v100 = (uint64_t *)(v91 + 16 * v99);
          uint64_t v101 = *v100;
          if (*v100 != v70)
          {
            int v102 = 1;
            while (v101 != -4096)
            {
              int v103 = v99 + v102++;
              uint64_t v99 = v103 & result;
              uint64_t v101 = *(void *)(v91 + 16 * v99);
              if (v101 == v70)
              {
                int v100 = (uint64_t *)(v91 + 16 * v99);
                goto LABEL_101;
              }
            }
            goto LABEL_104;
          }
LABEL_101:
          if (v100 == v97) {
            goto LABEL_104;
          }
          uint64_t v104 = v100[1];
          if (v104) {
            LODWORD(v104) = *(_DWORD *)(v104 + 80);
          }
        }
        else
        {
LABEL_104:
          LODWORD(v104) = 0;
        }
        if (v98 >= v104)
        {
LABEL_109:
          int v46 = v29;
          goto LABEL_110;
        }
        goto LABEL_106;
      }
LABEL_27:
      uint64_t result = *(unsigned int *)(result + 16 * v43 + 8);
      if (result == 0xFFFFFFFF) {
        goto LABEL_40;
      }
      if (!v42) {
        goto LABEL_40;
      }
      unint64_t v45 = *(void *)(*(void *)(v36 + 8) + 24 * result + 16);
      if (!v45) {
        goto LABEL_40;
      }
      int v46 = v28;
      if (v42 < v45) {
        goto LABEL_62;
      }
LABEL_110:
      uint64_t v105 = *v27++;
      *int v46 = v105;
      if (v27 == a2) {
        return result;
      }
    }
  }
  unint64_t v106 = (uint64_t *)(result + 8 * (a4 >> 1));
  sub_1CC3A2600(result, v106, a3, a4 >> 1, a5, a4 >> 1);
  uint64_t result = sub_1CC3A2600(&v7[a4 >> 1], a2, a3, a4 - (a4 >> 1), &v5[a4 >> 1], a4 - (a4 >> 1));
  uint64_t v107 = &v7[a4 >> 1];
  while (v107 != a2)
  {
    uint64_t v108 = *v107;
    uint64_t v109 = *v7;
    uint64_t v110 = *(void *)(*(void *)a3 + 296);
    unsigned int v111 = *v107 >> 4;
    unsigned int v112 = *v7 >> 4;
    if (!v110) {
      goto LABEL_135;
    }
    uint64_t v113 = *(void *)(v110 + 248);
    if (!v113) {
      goto LABEL_135;
    }
    uint64_t result = *(unsigned int *)(v113 + 176);
    if (!result) {
      goto LABEL_135;
    }
    uint64_t v114 = *(void *)(v113 + 160);
    uint64_t result = (result - 1);
    uint64_t v115 = result & (v111 ^ (v108 >> 9));
    uint64_t v116 = *(void *)(v114 + 16 * v115);
    if (v116 == v108)
    {
LABEL_119:
      uint64_t v117 = *(unsigned int *)(v114 + 16 * v115 + 8);
      if (v117 != 0xFFFFFFFFLL)
      {
        unint64_t v118 = *(void *)(*(void *)(v113 + 8) + 24 * v117 + 16);
        goto LABEL_121;
      }
    }
    else
    {
      int v123 = 1;
      while (v116 != -4096)
      {
        int v124 = v115 + v123++;
        uint64_t v115 = v124 & result;
        uint64_t v116 = *(void *)(v114 + 16 * v115);
        if (v116 == v108) {
          goto LABEL_119;
        }
      }
    }
    unint64_t v118 = 0;
LABEL_121:
    uint64_t v119 = result & (v112 ^ (v109 >> 9));
    uint64_t v120 = *(void *)(v114 + 16 * v119);
    if (v120 == v109)
    {
LABEL_122:
      uint64_t v121 = *(unsigned int *)(v114 + 16 * v119 + 8);
      if (v121 != 0xFFFFFFFFLL)
      {
        if (v118)
        {
          unint64_t v122 = *(void *)(*(void *)(v113 + 8) + 24 * v121 + 16);
          if (v122)
          {
            if (v118 < v122) {
              goto LABEL_157;
            }
            goto LABEL_126;
          }
        }
      }
    }
    else
    {
      int v125 = 1;
      while (v120 != -4096)
      {
        int v126 = v119 + v125++;
        uint64_t v119 = v126 & result;
        uint64_t v120 = *(void *)(v114 + 16 * v119);
        if (v120 == v109) {
          goto LABEL_122;
        }
      }
    }
LABEL_135:
    uint64_t v127 = *(void *)(*(void *)a3 + 288);
    uint64_t v128 = *(void *)(v127 + 16);
    uint64_t v129 = *(unsigned int *)(v127 + 32);
    if (v129)
    {
      LODWORD(v130) = (v129 - 1) & (v111 ^ (v108 >> 9));
      uint64_t v131 = (unint64_t *)(v128 + 16 * v130);
      uint64_t result = *v131;
      if (*v131 == v108) {
        goto LABEL_142;
      }
      int v132 = 1;
      while (result != -4096)
      {
        int v133 = v130 + v132++;
        uint64_t v130 = v133 & (v129 - 1);
        uint64_t result = *(void *)(v128 + 16 * v130);
        if (result == v108)
        {
          uint64_t v131 = (unint64_t *)(v128 + 16 * v130);
          goto LABEL_142;
        }
      }
    }
    uint64_t v131 = (unint64_t *)(v128 + 16 * v129);
LABEL_142:
    uint64_t v134 = (unint64_t *)(v128 + 16 * v129);
    if (v131 == v134)
    {
      LODWORD(v135) = 0;
    }
    else
    {
      unint64_t v135 = v131[1];
      if (v135) {
        LODWORD(v135) = *(_DWORD *)(v135 + 80);
      }
    }
    if (!v129) {
      goto LABEL_155;
    }
    unsigned int v136 = v129 - 1;
    LODWORD(v137) = v136 & (v112 ^ (v109 >> 9));
    uint64_t v138 = (unint64_t *)(v128 + 16 * v137);
    uint64_t result = *v138;
    if (*v138 != v109)
    {
      int v139 = 1;
      while (result != -4096)
      {
        int v140 = v137 + v139++;
        uint64_t v137 = v140 & v136;
        uint64_t result = *(void *)(v128 + 16 * v137);
        if (result == v109)
        {
          uint64_t v138 = (unint64_t *)(v128 + 16 * v137);
          goto LABEL_152;
        }
      }
LABEL_155:
      LODWORD(v141) = 0;
      goto LABEL_156;
    }
LABEL_152:
    if (v138 == v134) {
      goto LABEL_155;
    }
    unint64_t v141 = v138[1];
    if (v141) {
      LODWORD(v141) = *(_DWORD *)(v141 + 80);
    }
LABEL_156:
    if (v135 < v141)
    {
LABEL_157:
      *uint64_t v5 = v108;
      ++v107;
      goto LABEL_158;
    }
LABEL_126:
    *uint64_t v5 = v109;
    ++v7;
LABEL_158:
    ++v5;
    if (v7 == v106)
    {
      if (v107 != a2)
      {
        uint64_t v143 = 0;
        do
        {
          v5[v143] = v107[v143];
          ++v143;
        }
        while (&v107[v143] != a2);
      }
      return result;
    }
  }
  if (v7 != v106)
  {
    uint64_t v142 = 0;
    do
    {
      v5[v142] = v7[v142];
      ++v142;
    }
    while (&v7[v142] != v106);
  }
  return result;
}

unint64_t sub_1CC3A39E8(unint64_t result, void *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v9 = a6;
  uint64_t v12 = (void *)result;
  while (a5 > a8 && v9 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v13 = *a2;
    uint64_t v14 = *a4;
    uint64_t v15 = *(void *)(*a4 + 296);
    unsigned int v16 = (*a2 >> 4) ^ (*a2 >> 9);
    while (1)
    {
      uint64_t v17 = *v12;
      unsigned int v18 = *v12 >> 4;
      if (!v15) {
        goto LABEL_27;
      }
      uint64_t v19 = *(void *)(v15 + 248);
      if (!v19) {
        goto LABEL_27;
      }
      int v20 = *(_DWORD *)(v19 + 176);
      if (!v20) {
        goto LABEL_27;
      }
      uint64_t v21 = *(void *)(v19 + 160);
      unsigned int v22 = v20 - 1;
      uint64_t v23 = v22 & v16;
      uint64_t v24 = *(void *)(v21 + 16 * v23);
      if (v24 == v13)
      {
LABEL_11:
        uint64_t v25 = *(unsigned int *)(v21 + 16 * v23 + 8);
        if (v25 != 0xFFFFFFFFLL)
        {
          unint64_t v26 = *(void *)(*(void *)(v19 + 8) + 24 * v25 + 16);
          goto LABEL_13;
        }
      }
      else
      {
        int v30 = 1;
        while (v24 != -4096)
        {
          int v31 = v23 + v30++;
          uint64_t v23 = v31 & v22;
          uint64_t v24 = *(void *)(v21 + 16 * v23);
          if (v24 == v13) {
            goto LABEL_11;
          }
        }
      }
      unint64_t v26 = 0;
LABEL_13:
      uint64_t result = v22 & (v18 ^ (v17 >> 9));
      uint64_t v27 = *(void *)(v21 + 16 * result);
      if (v27 == v17)
      {
LABEL_14:
        uint64_t v28 = *(unsigned int *)(v21 + 16 * result + 8);
        if (v28 != 0xFFFFFFFFLL)
        {
          if (v26)
          {
            unint64_t v29 = *(void *)(*(void *)(v19 + 8) + 24 * v28 + 16);
            if (v29)
            {
              if (v26 < v29) {
                break;
              }
              goto LABEL_49;
            }
          }
        }
      }
      else
      {
        int v32 = 1;
        while (v27 != -4096)
        {
          int v33 = result + v32++;
          uint64_t result = v33 & v22;
          uint64_t v27 = *(void *)(v21 + 16 * result);
          if (v27 == v17) {
            goto LABEL_14;
          }
        }
      }
LABEL_27:
      uint64_t v34 = *(void *)(v14 + 288);
      uint64_t v35 = *(void *)(v34 + 16);
      uint64_t v36 = *(unsigned int *)(v34 + 32);
      if (v36)
      {
        LODWORD(v37) = (v36 - 1) & v16;
        unsigned int v38 = (unint64_t *)(v35 + 16 * v37);
        uint64_t result = *v38;
        if (*v38 == v13) {
          goto LABEL_34;
        }
        int v39 = 1;
        while (result != -4096)
        {
          int v40 = v37 + v39++;
          uint64_t v37 = v40 & (v36 - 1);
          uint64_t result = *(void *)(v35 + 16 * v37);
          if (result == v13)
          {
            unsigned int v38 = (unint64_t *)(v35 + 16 * v37);
            goto LABEL_34;
          }
        }
      }
      unsigned int v38 = (unint64_t *)(v35 + 16 * v36);
LABEL_34:
      uint64_t v41 = (unint64_t *)(v35 + 16 * v36);
      if (v38 == v41)
      {
        LODWORD(v42) = 0;
      }
      else
      {
        unint64_t v42 = v38[1];
        if (v42) {
          LODWORD(v42) = *(_DWORD *)(v42 + 80);
        }
      }
      if (!v36) {
        goto LABEL_47;
      }
      unsigned int v43 = v36 - 1;
      LODWORD(v44) = v43 & (v18 ^ (v17 >> 9));
      unint64_t v45 = (unint64_t *)(v35 + 16 * v44);
      uint64_t result = *v45;
      if (*v45 != v17)
      {
        int v46 = 1;
        while (result != -4096)
        {
          int v47 = v44 + v46++;
          uint64_t v44 = v47 & v43;
          uint64_t result = *(void *)(v35 + 16 * v44);
          if (result == v17)
          {
            unint64_t v45 = (unint64_t *)(v35 + 16 * v44);
            goto LABEL_44;
          }
        }
LABEL_47:
        LODWORD(v48) = 0;
        goto LABEL_48;
      }
LABEL_44:
      if (v45 == v41) {
        goto LABEL_47;
      }
      unint64_t v48 = v45[1];
      if (v48) {
        LODWORD(v48) = *(_DWORD *)(v48 + 80);
      }
LABEL_48:
      if (v42 < v48) {
        break;
      }
LABEL_49:
      ++v12;
      if (!--a5) {
        return result;
      }
    }
    unsigned int v231 = a3;
    if (a5 < v9)
    {
      if (v9 >= 0) {
        uint64_t v49 = v9;
      }
      else {
        uint64_t v49 = v9 + 1;
      }
      uint64_t v50 = v49 >> 1;
      uint64_t v51 = &a2[v49 >> 1];
      unint64_t v52 = a2 - v12;
      if (a2 != v12)
      {
        uint64_t v53 = *v51;
        unsigned int v54 = (*v51 >> 4) ^ (*v51 >> 9);
        int v55 = v12;
        while (1)
        {
          unint64_t v56 = &v55[v52 >> 1];
          uint64_t v57 = *v56;
          unsigned int v58 = *v56 >> 4;
          if (!v15) {
            goto LABEL_77;
          }
          uint64_t v59 = *(void *)(v15 + 248);
          if (!v59) {
            goto LABEL_77;
          }
          int v60 = *(_DWORD *)(v59 + 176);
          if (!v60) {
            goto LABEL_77;
          }
          uint64_t v61 = *(void *)(v59 + 160);
          unsigned int v62 = v60 - 1;
          uint64_t v63 = v62 & v54;
          uint64_t v64 = *(void *)(v61 + 16 * v63);
          if (v64 == v53)
          {
LABEL_62:
            uint64_t v65 = *(unsigned int *)(v61 + 16 * v63 + 8);
            if (v65 != 0xFFFFFFFFLL)
            {
              unint64_t v66 = *(void *)(*(void *)(v59 + 8) + 24 * v65 + 16);
              goto LABEL_64;
            }
          }
          else
          {
            int v72 = 1;
            while (v64 != -4096)
            {
              int v73 = v63 + v72++;
              uint64_t v63 = v73 & v62;
              uint64_t v64 = *(void *)(v61 + 16 * v63);
              if (v64 == v53) {
                goto LABEL_62;
              }
            }
          }
          unint64_t v66 = 0;
LABEL_64:
          uint64_t v67 = v62 & (v58 ^ (v57 >> 9));
          uint64_t v68 = *(void *)(v61 + 16 * v67);
          if (v68 != v57)
          {
            int v74 = 1;
            while (v68 != -4096)
            {
              int v75 = v67 + v74++;
              uint64_t v67 = v75 & v62;
              uint64_t v68 = *(void *)(v61 + 16 * v67);
              if (v68 == v57) {
                goto LABEL_65;
              }
            }
LABEL_77:
            uint64_t v76 = *(void *)(v14 + 288);
            uint64_t v77 = *(void *)(v76 + 16);
            uint64_t v78 = *(unsigned int *)(v76 + 32);
            if (v78)
            {
              LODWORD(v79) = (v78 - 1) & v54;
              uint64_t v80 = (uint64_t *)(v77 + 16 * v79);
              uint64_t v81 = *v80;
              if (*v80 != v53)
              {
                int v82 = 1;
                while (v81 != -4096)
                {
                  int v83 = v79 + v82++;
                  uint64_t v79 = v83 & (v78 - 1);
                  uint64_t v81 = *(void *)(v77 + 16 * v79);
                  if (v81 == v53)
                  {
                    uint64_t v80 = (uint64_t *)(v77 + 16 * v79);
                    goto LABEL_84;
                  }
                }
                goto LABEL_83;
              }
            }
            else
            {
LABEL_83:
              uint64_t v80 = (uint64_t *)(v77 + 16 * v78);
            }
LABEL_84:
            uint64_t v84 = (uint64_t *)(v77 + 16 * v78);
            if (v80 == v84)
            {
              LODWORD(v85) = 0;
            }
            else
            {
              uint64_t v85 = v80[1];
              if (v85) {
                LODWORD(v85) = *(_DWORD *)(v85 + 80);
              }
            }
            if (v78)
            {
              unsigned int v86 = v78 - 1;
              LODWORD(v87) = v86 & (v58 ^ (v57 >> 9));
              int v88 = (uint64_t *)(v77 + 16 * v87);
              uint64_t v89 = *v88;
              if (*v88 != v57)
              {
                int v90 = 1;
                while (v89 != -4096)
                {
                  int v91 = v87 + v90++;
                  uint64_t v87 = v91 & v86;
                  uint64_t v89 = *(void *)(v77 + 16 * v87);
                  if (v89 == v57)
                  {
                    int v88 = (uint64_t *)(v77 + 16 * v87);
                    goto LABEL_94;
                  }
                }
                goto LABEL_97;
              }
LABEL_94:
              if (v88 == v84) {
                goto LABEL_97;
              }
              uint64_t v92 = v88[1];
              if (v92) {
                LODWORD(v92) = *(_DWORD *)(v92 + 80);
              }
            }
            else
            {
LABEL_97:
              LODWORD(v92) = 0;
            }
            BOOL v71 = v85 >= v92;
            goto LABEL_99;
          }
LABEL_65:
          uint64_t v69 = *(unsigned int *)(v61 + 16 * v67 + 8);
          if (v69 == 0xFFFFFFFFLL) {
            goto LABEL_77;
          }
          if (!v66) {
            goto LABEL_77;
          }
          unint64_t v70 = *(void *)(*(void *)(v59 + 8) + 24 * v69 + 16);
          if (!v70) {
            goto LABEL_77;
          }
          BOOL v71 = v66 >= v70;
LABEL_99:
          int v93 = !v71;
          uint64_t v94 = v56 + 1;
          if (v93)
          {
            v52 >>= 1;
          }
          else
          {
            int v55 = v94;
            v52 += ~(v52 >> 1);
          }
          if (!v52)
          {
            unint64_t v52 = v55 - v12;
            goto LABEL_165;
          }
        }
      }
      uint64_t v12 = a2;
LABEL_171:
      int v55 = a2;
      a3 = v51;
      goto LABEL_178;
    }
    if (a5 == 1)
    {
      void *v12 = v13;
      *a2 = v17;
      return result;
    }
    if (a5 >= 0) {
      uint64_t v95 = a5;
    }
    else {
      uint64_t v95 = a5 + 1;
    }
    unint64_t v52 = v95 >> 1;
    int v55 = &v12[v95 >> 1];
    uint64_t v51 = a3;
    if (a3 != a2)
    {
      unint64_t v96 = a3 - a2;
      uint64_t v97 = *v55;
      unsigned int v98 = (*v55 >> 4) ^ (*v55 >> 9);
      uint64_t v51 = a2;
      do
      {
        unint64_t v99 = v96 >> 1;
        int v100 = &v51[v96 >> 1];
        uint64_t v101 = *v100;
        unsigned int v102 = *v100 >> 4;
        if (!v15) {
          goto LABEL_133;
        }
        uint64_t v103 = *(void *)(v15 + 248);
        if (!v103) {
          goto LABEL_133;
        }
        int v104 = *(_DWORD *)(v103 + 176);
        if (!v104) {
          goto LABEL_133;
        }
        uint64_t v105 = *(void *)(v103 + 160);
        unsigned int v106 = v104 - 1;
        uint64_t v107 = v106 & (v102 ^ (v101 >> 9));
        uint64_t v108 = *(void *)(v105 + 16 * v107);
        if (v108 == v101)
        {
LABEL_118:
          uint64_t v109 = *(unsigned int *)(v105 + 16 * v107 + 8);
          if (v109 != 0xFFFFFFFFLL)
          {
            unint64_t v110 = *(void *)(*(void *)(v103 + 8) + 24 * v109 + 16);
            goto LABEL_120;
          }
        }
        else
        {
          int v116 = 1;
          while (v108 != -4096)
          {
            int v117 = v107 + v116++;
            uint64_t v107 = v117 & v106;
            uint64_t v108 = *(void *)(v105 + 16 * v107);
            if (v108 == v101) {
              goto LABEL_118;
            }
          }
        }
        unint64_t v110 = 0;
LABEL_120:
        uint64_t v111 = v106 & v98;
        uint64_t v112 = *(void *)(v105 + 16 * v111);
        if (v112 != v97)
        {
          int v118 = 1;
          while (v112 != -4096)
          {
            int v119 = v111 + v118++;
            uint64_t v111 = v119 & v106;
            uint64_t v112 = *(void *)(v105 + 16 * v111);
            if (v112 == v97) {
              goto LABEL_121;
            }
          }
LABEL_133:
          uint64_t v120 = *(void *)(v14 + 288);
          uint64_t v121 = *(void *)(v120 + 16);
          uint64_t v122 = *(unsigned int *)(v120 + 32);
          if (v122)
          {
            LODWORD(v123) = (v122 - 1) & (v102 ^ (v101 >> 9));
            int v124 = (uint64_t *)(v121 + 16 * v123);
            uint64_t v125 = *v124;
            if (*v124 != v101)
            {
              int v126 = 1;
              while (v125 != -4096)
              {
                int v127 = v123 + v126++;
                uint64_t v123 = v127 & (v122 - 1);
                uint64_t v125 = *(void *)(v121 + 16 * v123);
                if (v125 == v101)
                {
                  int v124 = (uint64_t *)(v121 + 16 * v123);
                  goto LABEL_140;
                }
              }
              goto LABEL_139;
            }
          }
          else
          {
LABEL_139:
            int v124 = (uint64_t *)(v121 + 16 * v122);
          }
LABEL_140:
          uint64_t v128 = (uint64_t *)(v121 + 16 * v122);
          if (v124 == v128)
          {
            LODWORD(v129) = 0;
          }
          else
          {
            uint64_t v129 = v124[1];
            if (v129) {
              LODWORD(v129) = *(_DWORD *)(v129 + 80);
            }
          }
          if (v122)
          {
            unsigned int v130 = v122 - 1;
            LODWORD(v122) = (v122 - 1) & v98;
            uint64_t v131 = (uint64_t *)(v121 + 16 * v122);
            uint64_t v132 = *v131;
            if (*v131 != v97)
            {
              int v133 = 1;
              while (v132 != -4096)
              {
                int v134 = v122 + v133++;
                uint64_t v122 = v134 & v130;
                uint64_t v132 = *(void *)(v121 + 16 * v122);
                if (v132 == v97)
                {
                  uint64_t v131 = (uint64_t *)(v121 + 16 * v122);
                  goto LABEL_150;
                }
              }
              goto LABEL_153;
            }
LABEL_150:
            if (v131 == v128) {
              goto LABEL_153;
            }
            uint64_t v135 = v131[1];
            if (v135) {
              LODWORD(v135) = *(_DWORD *)(v135 + 80);
            }
          }
          else
          {
LABEL_153:
            LODWORD(v135) = 0;
          }
          BOOL v115 = v129 >= v135;
          goto LABEL_155;
        }
LABEL_121:
        uint64_t v113 = *(unsigned int *)(v105 + 16 * v111 + 8);
        if (v113 == 0xFFFFFFFFLL) {
          goto LABEL_133;
        }
        if (!v110) {
          goto LABEL_133;
        }
        unint64_t v114 = *(void *)(*(void *)(v103 + 8) + 24 * v113 + 16);
        if (!v114) {
          goto LABEL_133;
        }
        BOOL v115 = v110 >= v114;
LABEL_155:
        int v136 = !v115;
        uint64_t v137 = v100 + 1;
        v96 += ~v99;
        if (v136) {
          uint64_t v51 = v137;
        }
        else {
          unint64_t v96 = v99;
        }
      }
      while (v96);
    }
    uint64_t v50 = v51 - a2;
LABEL_165:
    if (v55 == a2) {
      goto LABEL_171;
    }
    if (a2 == v51)
    {
      uint64_t v51 = a2;
      a3 = v55;
    }
    else if (v55 + 1 == a2)
    {
      uint64_t v228 = *v55;
      uint64_t v230 = v9;
      int64_t v140 = (char *)v51 - (char *)a2;
      uint64_t v141 = a8;
      uint64_t v142 = v50;
      memmove(v55, a2, (char *)v51 - (char *)a2);
      uint64_t v50 = v142;
      a8 = v141;
      uint64_t v9 = v230;
      a3 = (void *)((char *)v55 + v140);
      *a3 = v228;
    }
    else
    {
      uint64_t v138 = v50;
      uint64_t v139 = a8;
      if (a2 + 1 == v51)
      {
        uint64_t v143 = *(v51 - 1);
        a3 = v55 + 1;
        if (v51 - 1 != v55)
        {
          uint64_t v229 = *(v51 - 1);
          memmove(v55 + 1, v55, (char *)(v51 - 1) - (char *)v55);
          uint64_t v143 = v229;
        }
        *int v55 = v143;
      }
      else
      {
        a3 = sub_1CC057214(v55, a2, v51);
      }
      a8 = v139;
      uint64_t v50 = v138;
    }
LABEL_178:
    a5 -= v52;
    uint64_t v144 = v9 - v50;
    if ((uint64_t)(v50 + v52) >= v144 + a5)
    {
      uint64_t v149 = a5;
      uint64_t v150 = v144;
      int v146 = a7;
      uint64_t v151 = v50;
      uint64_t v148 = a8;
      uint64_t result = sub_1CC3A39E8(a3, v51, v231, a4, v149, v150, a7);
      uint64_t v51 = v55;
      uint64_t v147 = v151;
      a5 = v52;
    }
    else
    {
      int v145 = v55;
      int v146 = a7;
      uint64_t v147 = v144;
      uint64_t v148 = a8;
      uint64_t result = sub_1CC3A39E8(v12, v145, a3, a4, v52, v50, a7);
      uint64_t v12 = a3;
      a3 = v231;
    }
    a2 = v51;
    a7 = v146;
    a8 = v148;
    uint64_t v9 = v147;
    if (!v147) {
      return result;
    }
  }
  if (a5 > v9)
  {
    if (a2 == a3) {
      return result;
    }
    uint64_t v152 = 0;
    do
    {
      a7[v152] = a2[v152];
      ++v152;
    }
    while (&a2[v152] != a3);
    if (!(v152 * 8)) {
      return result;
    }
    uint64_t v153 = &a7[v152];
    while (2)
    {
      if (a2 == v12)
      {
        if (v153 != a7)
        {
          uint64_t v227 = 0;
          do
          {
            a3[v227 - 1] = v153[v227 - 1];
            --v227;
          }
          while (&v153[v227] != a7);
        }
        return result;
      }
      int v154 = a2 - 1;
      uint64_t v155 = *(a2 - 1);
      uint64_t v156 = *(v153 - 1);
      uint64_t v157 = *(void *)(*a4 + 296);
      unsigned int v158 = v156 >> 4;
      unsigned int v159 = v155 >> 4;
      if (v157)
      {
        uint64_t v160 = *(void *)(v157 + 248);
        if (v160)
        {
          int v161 = *(_DWORD *)(v160 + 176);
          if (v161)
          {
            uint64_t v162 = *(void *)(v160 + 160);
            unsigned int v163 = v161 - 1;
            uint64_t v164 = v163 & (v158 ^ (v156 >> 9));
            uint64_t v165 = *(void *)(v162 + 16 * v164);
            if (v165 == v156)
            {
LABEL_194:
              uint64_t v166 = *(unsigned int *)(v162 + 16 * v164 + 8);
              if (v166 != 0xFFFFFFFFLL)
              {
                unint64_t v167 = *(void *)(*(void *)(v160 + 8) + 24 * v166 + 16);
                goto LABEL_196;
              }
            }
            else
            {
              int v171 = 1;
              while (v165 != -4096)
              {
                int v172 = v164 + v171++;
                uint64_t v164 = v172 & v163;
                uint64_t v165 = *(void *)(v162 + 16 * v164);
                if (v165 == v156) {
                  goto LABEL_194;
                }
              }
            }
            unint64_t v167 = 0;
LABEL_196:
            uint64_t v168 = v163 & (v159 ^ (v155 >> 9));
            uint64_t v169 = *(void *)(v162 + 16 * v168);
            if (v169 == v155)
            {
LABEL_197:
              uint64_t v170 = *(unsigned int *)(v162 + 16 * v168 + 8);
              if (v170 != 0xFFFFFFFFLL)
              {
                if (v167)
                {
                  uint64_t result = *(void *)(*(void *)(v160 + 8) + 24 * v170 + 16);
                  if (result)
                  {
                    if (v167 < result)
                    {
LABEL_233:
                      *--a3 = v155;
                      a2 = v154;
                      if (v153 == a7) {
                        return result;
                      }
                      continue;
                    }
LABEL_232:
                    uint64_t v155 = *(v153 - 1);
                    int v154 = a2;
                    --v153;
                    goto LABEL_233;
                  }
                }
              }
            }
            else
            {
              int v173 = 1;
              while (v169 != -4096)
              {
                int v174 = v168 + v173++;
                uint64_t v168 = v174 & v163;
                uint64_t v169 = *(void *)(v162 + 16 * v168);
                if (v169 == v155) {
                  goto LABEL_197;
                }
              }
            }
          }
        }
      }
      break;
    }
    uint64_t v175 = *(void *)(*a4 + 288);
    uint64_t v176 = *(void *)(v175 + 16);
    uint64_t result = *(unsigned int *)(v175 + 32);
    if (result)
    {
      LODWORD(v177) = (result - 1) & (v158 ^ (v156 >> 9));
      uint64_t v178 = (uint64_t *)(v176 + 16 * v177);
      uint64_t v179 = *v178;
      if (*v178 != v156)
      {
        int v180 = 1;
        while (v179 != -4096)
        {
          int v181 = v177 + v180++;
          uint64_t v177 = v181 & (result - 1);
          uint64_t v179 = *(void *)(v176 + 16 * v177);
          if (v179 == v156)
          {
            uint64_t v178 = (uint64_t *)(v176 + 16 * v177);
            goto LABEL_217;
          }
        }
        goto LABEL_216;
      }
    }
    else
    {
LABEL_216:
      uint64_t v178 = (uint64_t *)(v176 + 16 * result);
    }
LABEL_217:
    uint64_t v182 = (uint64_t *)(v176 + 16 * result);
    if (v178 == v182)
    {
      LODWORD(v183) = 0;
    }
    else
    {
      uint64_t v183 = v178[1];
      if (v183) {
        LODWORD(v183) = *(_DWORD *)(v183 + 80);
      }
    }
    if (result)
    {
      uint64_t result = (result - 1);
      LODWORD(v184) = result & (v159 ^ (v155 >> 9));
      v185 = (uint64_t *)(v176 + 16 * v184);
      uint64_t v186 = *v185;
      if (*v185 != v155)
      {
        int v187 = 1;
        while (v186 != -4096)
        {
          int v188 = v184 + v187++;
          uint64_t v184 = v188 & result;
          uint64_t v186 = *(void *)(v176 + 16 * v184);
          if (v186 == v155)
          {
            v185 = (uint64_t *)(v176 + 16 * v184);
            goto LABEL_227;
          }
        }
        goto LABEL_230;
      }
LABEL_227:
      if (v185 == v182) {
        goto LABEL_230;
      }
      uint64_t v189 = v185[1];
      if (v189) {
        LODWORD(v189) = *(_DWORD *)(v189 + 80);
      }
    }
    else
    {
LABEL_230:
      LODWORD(v189) = 0;
    }
    if (v183 < v189) {
      goto LABEL_233;
    }
    goto LABEL_232;
  }
  if (v12 == a2) {
    return result;
  }
  uint64_t v190 = 0;
  do
  {
    a7[v190] = v12[v190];
    ++v190;
  }
  while (&v12[v190] != a2);
  if (!(v190 * 8)) {
    return result;
  }
  uint64_t v191 = a7;
  while (2)
  {
    if (a2 != a3)
    {
      uint64_t v192 = *a2;
      uint64_t v193 = *v191;
      uint64_t v194 = *(void *)(*a4 + 296);
      unsigned int v195 = *a2 >> 4;
      unsigned int v196 = *v191 >> 4;
      if (v194)
      {
        uint64_t v197 = *(void *)(v194 + 248);
        if (v197)
        {
          int v198 = *(_DWORD *)(v197 + 176);
          if (v198)
          {
            uint64_t v199 = *(void *)(v197 + 160);
            unsigned int v200 = v198 - 1;
            uint64_t v201 = v200 & (v195 ^ (v192 >> 9));
            uint64_t v202 = *(void *)(v199 + 16 * v201);
            if (v202 == v192)
            {
LABEL_246:
              uint64_t v203 = *(unsigned int *)(v199 + 16 * v201 + 8);
              if (v203 != 0xFFFFFFFFLL)
              {
                unint64_t v204 = *(void *)(*(void *)(v197 + 8) + 24 * v203 + 16);
                goto LABEL_248;
              }
            }
            else
            {
              int v208 = 1;
              while (v202 != -4096)
              {
                int v209 = v201 + v208++;
                uint64_t v201 = v209 & v200;
                uint64_t v202 = *(void *)(v199 + 16 * v201);
                if (v202 == v192) {
                  goto LABEL_246;
                }
              }
            }
            unint64_t v204 = 0;
LABEL_248:
            uint64_t v205 = v200 & (v196 ^ (v193 >> 9));
            uint64_t v206 = *(void *)(v199 + 16 * v205);
            if (v206 == v193)
            {
LABEL_249:
              uint64_t v207 = *(unsigned int *)(v199 + 16 * v205 + 8);
              if (v207 != 0xFFFFFFFFLL)
              {
                if (v204)
                {
                  uint64_t result = *(void *)(*(void *)(v197 + 8) + 24 * v207 + 16);
                  if (result)
                  {
                    if (v204 >= result) {
                      goto LABEL_253;
                    }
LABEL_284:
                    void *v12 = v192;
                    ++a2;
                    goto LABEL_285;
                  }
                }
              }
            }
            else
            {
              int v210 = 1;
              while (v206 != -4096)
              {
                int v211 = v205 + v210++;
                uint64_t v205 = v211 & v200;
                uint64_t v206 = *(void *)(v199 + 16 * v205);
                if (v206 == v193) {
                  goto LABEL_249;
                }
              }
            }
          }
        }
      }
      uint64_t v212 = *(void *)(*a4 + 288);
      uint64_t v213 = *(void *)(v212 + 16);
      uint64_t result = *(unsigned int *)(v212 + 32);
      if (result)
      {
        LODWORD(v214) = (result - 1) & (v195 ^ (v192 >> 9));
        v215 = (uint64_t *)(v213 + 16 * v214);
        uint64_t v216 = *v215;
        if (*v215 != v192)
        {
          int v217 = 1;
          while (v216 != -4096)
          {
            int v218 = v214 + v217++;
            uint64_t v214 = v218 & (result - 1);
            uint64_t v216 = *(void *)(v213 + 16 * v214);
            if (v216 == v192)
            {
              v215 = (uint64_t *)(v213 + 16 * v214);
              goto LABEL_269;
            }
          }
          goto LABEL_268;
        }
      }
      else
      {
LABEL_268:
        v215 = (uint64_t *)(v213 + 16 * result);
      }
LABEL_269:
      uint64_t v219 = (uint64_t *)(v213 + 16 * result);
      if (v215 == v219)
      {
        LODWORD(v220) = 0;
      }
      else
      {
        uint64_t v220 = v215[1];
        if (v220) {
          LODWORD(v220) = *(_DWORD *)(v220 + 80);
        }
      }
      if (result)
      {
        uint64_t result = (result - 1);
        LODWORD(v221) = result & (v196 ^ (v193 >> 9));
        uint64_t v222 = (uint64_t *)(v213 + 16 * v221);
        uint64_t v223 = *v222;
        if (*v222 != v193)
        {
          int v224 = 1;
          while (v223 != -4096)
          {
            int v225 = v221 + v224++;
            uint64_t v221 = v225 & result;
            uint64_t v223 = *(void *)(v213 + 16 * v221);
            if (v223 == v193)
            {
              uint64_t v222 = (uint64_t *)(v213 + 16 * v221);
              goto LABEL_279;
            }
          }
          goto LABEL_282;
        }
LABEL_279:
        if (v222 == v219) {
          goto LABEL_282;
        }
        uint64_t v226 = v222[1];
        if (v226) {
          LODWORD(v226) = *(_DWORD *)(v226 + 80);
        }
      }
      else
      {
LABEL_282:
        LODWORD(v226) = 0;
      }
      if (v220 < v226) {
        goto LABEL_284;
      }
LABEL_253:
      void *v12 = v193;
      ++v191;
LABEL_285:
      ++v12;
      if (&a7[v190] == v191) {
        return result;
      }
      continue;
    }
    break;
  }

  return (unint64_t)memmove(v12, v191, (char *)a7 - (char *)v191 + v190 * 8);
}

BOOL sub_1CC3A47DC(uint64_t *a1)
{
  v68[18] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  int v3 = *(_DWORD *)(*(uint64_t (**)(void))(**(void **)(*a1 + 256) + 280))(*(void *)(*a1 + 256));
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v2 + 256) + 320))();
  uint64_t v5 = (int *)v4;
  uint64_t v6 = *(uint64_t **)a1[1];
  uint64_t v7 = (uint64_t **)(v2 + 952);
  uint64_t v8 = *(void **)(v2 + 952);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = (uint64_t **)(v2 + 952);
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= (unint64_t)v6;
    if (v10 >= (unint64_t)v6) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = (uint64_t **)v8;
    }
    uint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v7 || v9[4] > v6)
  {
LABEL_12:
    uint64_t v61 = 0;
    int v60 = 0;
    uint64_t v62 = 0;
    int v31 = (int *)v4;
    uint64_t v63 = v65;
    uint64_t v64 = 0x800000000;
    unint64_t v66 = v68;
    uint64_t v67 = 0x800000000;
    v68[17] = 0;
    v68[16] = 0;
    memset(v41, 0, 24);
    v41[4] = 0;
    v41[5] = 0;
    unint64_t v42 = &v60;
    __int16 v43 = 0;
    char v44 = 0;
    long long v45 = 0u;
    long long v46 = 0u;
    int v47 = v49;
    uint64_t v48 = 0x800000000;
    uint64_t v50 = 0;
    int v51 = 0;
    unint64_t v52 = v54;
    uint64_t v53 = 0x800000000;
    int v55 = 0;
    int v56 = 0;
    unsigned int v58 = 0;
    uint64_t v57 = 0;
    uint64_t v59 = 0;
    uint64_t v13 = v6 + 6;
    llvm::RegPressureTracker::init((uint64_t)v41, v6[4], v2 + 320, 0, (uint64_t)v6, (uint64_t)(v6 + 6), 0, 1);
    uint64_t v14 = (uint64_t *)v6[7];
    if (v6 + 6 != v14)
    {
      while (1)
      {
        unint64_t v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
        if (!v15) {
          break;
        }
        unint64_t v16 = *v13 & 0xFFFFFFFFFFFFFFF8;
        if ((*(unsigned char *)v15 & 4) == 0) {
          goto LABEL_18;
        }
LABEL_19:
        int v17 = **(unsigned __int16 **)(v16 + 16);
        if ((v17 - 13) < 5 || v17 == 23)
        {
          if (!v15) {
            goto LABEL_36;
          }
        }
        else
        {
          int v32 = &__p[1];
          __p[0] = (void *)0x800000000;
          uint64_t v35 = v37;
          uint64_t v36 = 0x800000000;
          unsigned int v38 = v40;
          uint64_t v39 = 0x800000000;
          llvm::RegisterOperands::collect(&v32, (const llvm::MachineInstr *)v16, *(const llvm::TargetRegisterInfo **)(v2 + 256), *(const llvm::MachineRegisterInfo **)(v2 + 264), 0, 0);
          llvm::RegPressureTracker::recedeSkipDebugValues((unint64_t)v41);
          llvm::RegPressureTracker::recede((uint64_t)v41, (unsigned int **)&v32, 0);
          if (v38 != v40) {
            free(v38);
          }
          if (v35 != v37) {
            free(v35);
          }
          if (v32 != &__p[1]) {
            free(v32);
          }
          unint64_t v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
          if (!v15)
          {
LABEL_36:
            while ((*(_WORD *)(v15 + 44) & 4) != 0)
              unint64_t v15 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_37;
          }
        }
        if ((*(unsigned char *)v15 & 4) == 0) {
          goto LABEL_36;
        }
LABEL_37:
        uint64_t v13 = (void *)v15;
        if ((uint64_t *)v15 == v14) {
          goto LABEL_38;
        }
      }
      unint64_t v16 = 0;
LABEL_18:
      while ((*(_WORD *)(v16 + 44) & 4) != 0)
        unint64_t v16 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
      goto LABEL_19;
    }
LABEL_38:
    llvm::RegPressureTracker::closeRegion((uint64_t)v41);
    int v32 = v6;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v34 = 0;
    sub_1CBA85A80(__p, *v42, (uint64_t)v42[1], ((unsigned char *)v42[1] - (unsigned char *)*v42) >> 2);
    uint64_t v19 = (uint64_t *)v32;
    int v20 = *v7;
    uint64_t v9 = (uint64_t **)(v2 + 952);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (uint64_t **)v20;
          unint64_t v30 = v20[4];
          if (v30 <= (unint64_t)v32) {
            break;
          }
          int v20 = *v9;
          uint64_t v7 = v9;
          if (!*v9) {
            goto LABEL_39;
          }
        }
        if (v30 >= (unint64_t)v32) {
          break;
        }
        int v20 = v9[1];
        if (!v20)
        {
          uint64_t v7 = v9 + 1;
          goto LABEL_39;
        }
      }
    }
    else
    {
LABEL_39:
      uint64_t v21 = (char *)v9;
      uint64_t v9 = (uint64_t **)operator new(0x40uLL);
      v9[4] = v19;
      *(_OWORD *)(v9 + 5) = *(_OWORD *)__p;
      v9[7] = v34;
      __p[1] = 0;
      uint64_t v34 = 0;
      __p[0] = 0;
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9[2] = (uint64_t *)v21;
      *uint64_t v7 = (uint64_t *)v9;
      uint64_t v22 = **(void **)(v2 + 944);
      uint64_t v23 = (uint64_t *)v9;
      if (v22)
      {
        *(void *)(v2 + 944) = v22;
        uint64_t v23 = *v7;
      }
      sub_1CB8358B8(*(uint64_t **)(v2 + 952), v23);
      ++*(void *)(v2 + 960);
    }
    uint64_t v5 = v31;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v57)
    {
      unsigned int v58 = v57;
      operator delete(v57);
    }
    free(v55);
    if (v52 != v54) {
      free(v52);
    }
    free(v50);
    if (v47 != v49) {
      free(v47);
    }
    if (*((void *)&v45 + 1))
    {
      *(void *)&long long v46 = *((void *)&v45 + 1);
      operator delete(*((void **)&v45 + 1));
    }
    if (v66 != v68) {
      free(v66);
    }
    if (v63 != v65) {
      free(v63);
    }
    if (v60)
    {
      uint64_t v61 = v60;
      operator delete(v60);
    }
  }
  int v32 = 0;
  __p[0] = 0;
  __p[1] = 0;
  sub_1CBA85A80(&v32, v9[5], (uint64_t)v9[6], ((char *)v9[6] - (char *)v9[5]) >> 2);
  int v24 = *v5;
  if (*v5 == -1)
  {
    BOOL v27 = 0;
  }
  else
  {
    uint64_t v25 = v5 + 1;
    do
    {
      unsigned int v26 = *((_DWORD *)v32 + v24) + v3;
      BOOL v11 = v26 >= (*(unsigned int (**)(void, void))(**(void **)(v2 + 256) + 312))(*(void *)(v2 + 256), *(void *)(*(void *)a1[2] + 32));
      BOOL v27 = v11;
      if (v11) {
        break;
      }
      int v28 = *v25++;
      int v24 = v28;
    }
    while (v28 != -1);
  }
  if (v32)
  {
    __p[0] = v32;
    operator delete(v32);
  }
  return v27;
}

uint64_t **sub_1CC3A4D40(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (!v6)
  {
    uint64_t v8 = a1 + 1;
    goto LABEL_9;
  }
  do
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v6;
      unint64_t v9 = v6[4];
      if (v9 <= a2)
      {
        if (v9 < a2) {
          goto LABEL_6;
        }
        unint64_t v10 = v8[5];
        if ((unint64_t)v10 <= a3) {
          break;
        }
      }
      uint64_t v6 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((unint64_t)v10 >= a3) {
      return v8;
    }
LABEL_6:
    uint64_t v6 = v8[1];
  }
  while (v6);
  uint64_t v7 = v8 + 1;
LABEL_9:
  BOOL v11 = (uint64_t *)v8;
  uint64_t v8 = (uint64_t **)operator new(0x38uLL);
  *((_OWORD *)v8 + 2) = *a4;
  *((unsigned char *)v8 + 48) = 0;
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *uint64_t v7 = (uint64_t *)v8;
  uint64_t v12 = (uint64_t *)**a1;
  uint64_t v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    uint64_t v13 = *v7;
  }
  sub_1CB8358B8(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t **sub_1CC3A4E24(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v6;
      unint64_t v9 = v6[4];
      if (v9 > a2) {
        goto LABEL_13;
      }
      if (v9 < a2)
      {
LABEL_11:
        uint64_t v6 = v8[1];
        if (!v6)
        {
          uint64_t v7 = v8 + 1;
          goto LABEL_8;
        }
      }
      else
      {
        unint64_t v10 = v8[5];
        if ((unint64_t)v10 <= a3)
        {
          if ((unint64_t)v10 >= a3) {
            return v8;
          }
          goto LABEL_11;
        }
LABEL_13:
        uint64_t v6 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = a1 + 1;
LABEL_8:
  uint64_t v12 = (uint64_t *)v8;
  uint64_t v8 = (uint64_t **)operator new(0x48uLL);
  *((_OWORD *)v8 + 2) = *a4;
  v8[7] = 0;
  v8[8] = 0;
  v8[6] = 0;
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = v12;
  *uint64_t v7 = (uint64_t *)v8;
  uint64_t v13 = (uint64_t *)**a1;
  uint64_t v14 = (uint64_t *)v8;
  if (v13)
  {
    *a1 = v13;
    uint64_t v14 = *v7;
  }
  sub_1CB8358B8(a1[1], v14);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t **sub_1CC3A4F0C(uint64_t **a1, unint64_t a2, unint64_t a3, _OWORD *a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (!v6)
  {
    uint64_t v8 = a1 + 1;
    goto LABEL_9;
  }
  do
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v6;
      unint64_t v9 = v6[4];
      if (v9 <= a2)
      {
        if (v9 < a2) {
          goto LABEL_6;
        }
        unint64_t v10 = v8[5];
        if ((unint64_t)v10 <= a3) {
          break;
        }
      }
      uint64_t v6 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((unint64_t)v10 >= a3) {
      return v8;
    }
LABEL_6:
    uint64_t v6 = v8[1];
  }
  while (v6);
  uint64_t v7 = v8 + 1;
LABEL_9:
  BOOL v11 = (uint64_t *)v8;
  uint64_t v8 = (uint64_t **)operator new(0x38uLL);
  *((_OWORD *)v8 + 2) = *a4;
  *((unsigned char *)v8 + 48) = 0;
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = v11;
  *uint64_t v7 = (uint64_t *)v8;
  uint64_t v12 = (uint64_t *)**a1;
  uint64_t v13 = (uint64_t *)v8;
  if (v12)
  {
    *a1 = v12;
    uint64_t v13 = *v7;
  }
  sub_1CB8358B8(a1[1], v13);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t sub_1CC3A4FF4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    unint64_t v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    int v8 = a2 - 1;
    unsigned int v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    unint64_t v10 = (void *)(a1 + 16 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      uint64_t v14 = 1;
    }
    else
    {
      unint64_t v16 = 0;
      int v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v12 == -8192;
        }
        if (v18 && v11 == -8192) {
          unint64_t v16 = v10;
        }
        unsigned int v20 = v9 + v17++;
        unsigned int v9 = v20 & v8;
        unint64_t v10 = (void *)(a1 + 16 * (v20 & v8));
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        uint64_t v14 = 1;
        if (*v10 == a3 && v12 == a4) {
          goto LABEL_8;
        }
      }
      uint64_t v14 = 0;
      if (v16) {
        unint64_t v10 = v16;
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

void sub_1CC3A50DC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(uint64_t **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  unsigned int v9 = operator new(16 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = v9;
  if (v4)
  {
    sub_1CC3A51C0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    memset_pattern16(v9, &unk_1CFAC3070, 16 * v10);
  }
}

void sub_1CC3A51C0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  if (v6) {
    memset_pattern16(*(void **)a1, &unk_1CFAC3070, 16 * v6);
  }
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    if ((*a2 != -4096 || v8 != -4096) && (v7 != -8192 || v8 != -8192))
    {
      uint64_t v10 = 0;
      sub_1CC3A4FF4(*(void *)a1, *(_DWORD *)(a1 + 16), v7, v8, &v10);
      unsigned int v9 = v10;
      uint64_t *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(a1 + 8);
    }
    a2 += 2;
  }
}

char *sub_1CC3A5280(char *result)
{
  uint64_t v1 = result;
  unsigned int v2 = *((_DWORD *)result + 4);
  int v3 = *((_DWORD *)result + 2);
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(void *)result;
      uint64_t v7 = *(void *)result + 40 * v2;
      do
      {
        *(void *)uint64_t v6 = 0;
        *(unsigned char *)(v6 + 8) = 0;
        *(unsigned char *)(v6 + 24) = 0;
        *(void *)(v6 + 32) = 0;
        v6 += 40;
      }
      while (v6 != v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CC39FB54(v1, v5);
  }
  return result;
}

void sub_1CC3A533C(void *a1)
{
  if (a1)
  {
    sub_1CC3A533C(*a1);
    sub_1CC3A533C(a1[1]);
    int v3 = (void *)a1[5];
    if (v3 != a1 + 7) {
      free(v3);
    }
    operator delete(a1);
  }
}

void sub_1CC3A53A0()
{
}

void sub_1CC3A5474(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F260FC40;
  sub_1CD54C1EC(a1 + 51);
  unsigned int v2 = (uint64_t *)a1[42];
  if (v2 != a1 + 44) {
    free(v2);
  }
  int v3 = (uint64_t *)a1[32];
  if (v3 != a1 + 34) {
    free(v3);
  }
  *a1 = (uint64_t)&unk_1F260E110;
  int v4 = (uint64_t *)a1[22];
  if (v4 != a1 + 24) {
    free(v4);
  }
  int v5 = (uint64_t *)a1[13];
  if (v5 != a1 + 15) {
    free(v5);
  }
  uint64_t v6 = (uint64_t *)a1[4];
  if (v6 != a1 + 6) {
    free(v6);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1CC3A5558(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F260FC40;
  sub_1CD54C1EC(a1 + 51);
  unsigned int v2 = (uint64_t *)a1[42];
  if (v2 != a1 + 44) {
    free(v2);
  }
  int v3 = (uint64_t *)a1[32];
  if (v3 != a1 + 34) {
    free(v3);
  }
  *a1 = (uint64_t)&unk_1F260E110;
  int v4 = (uint64_t *)a1[22];
  if (v4 != a1 + 24) {
    free(v4);
  }
  int v5 = (uint64_t *)a1[13];
  if (v5 != a1 + 15) {
    free(v5);
  }
  uint64_t v6 = (uint64_t *)a1[4];
  if (v6 != a1 + 6) {
    free(v6);
  }
  llvm::Pass::~Pass((llvm::Pass *)a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC3A5650()
{
  return "PostRA Machine Sink";
}

void sub_1CC3A5660(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CC3A56D4(llvm::FunctionPass *a1, uint64_t a2)
{
  v228[1] = *MEMORY[0x1E4F143B8];
  if ((llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2) & 1) == 0)
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
    int v198 = a1;
    uint64_t v209 = v4;
    *((void *)a1 + 31) = v4;
    uint64_t v6 = (llvm::FunctionPass *)((char *)a1 + 248);
    uint64_t v7 = (char *)*((void *)v6 + 1);
    uint64_t v207 = v6;
    uint64_t v8 = *((unsigned int *)v6 + 4);
    if (v8) {
      bzero(v7, 8 * v8);
    }
    int v9 = *(_DWORD *)(v4 + 44);
    if ((*((_DWORD *)v198 + 80) & 0x3F) != 0) {
      *(void *)&v7[8 * v8 - 8] &= ~(-1 << (*((_DWORD *)v198 + 80) & 0x3F));
    }
    *((_DWORD *)v198 + 80) = v9;
    uint64_t v10 = (v9 + 63) >> 6;
    if (v10 != v8)
    {
      if (v10 >= v8)
      {
        if (v10 > *((_DWORD *)v198 + 67)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        bzero(&v7[8 * v8], 8 * (v10 - v8));
        LODWORD(v8) = (v9 + 63) >> 6;
      }
      else
      {
        LODWORD(v8) = (v9 + 63) >> 6;
      }
      *((_DWORD *)v198 + 66) = v8;
    }
    if ((v9 & 0x3F) != 0) {
      *(void *)&v7[8 * v8 - 8] &= ~(-1 << (v9 & 0x3F));
    }
    *((void *)v198 + 41) = v4;
    uint64_t v11 = *((void *)v198 + 42);
    uint64_t v12 = *((unsigned int *)v198 + 86);
    if (v12) {
      bzero(*((void **)v198 + 42), 8 * v12);
    }
    int v13 = *(_DWORD *)(v4 + 44);
    if ((*((_DWORD *)v198 + 100) & 0x3F) != 0) {
      *(void *)(v11 + 8 * v12 - 8) &= ~(-1 << (*((_DWORD *)v198 + 100) & 0x3F));
    }
    uint64_t v193 = (void **)((char *)v198 + 336);
    *((_DWORD *)v198 + 100) = v13;
    uint64_t v14 = (v13 + 63) >> 6;
    if (v14 != v12)
    {
      if (v14 >= v12)
      {
        if (v14 > *((_DWORD *)v198 + 87)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        bzero((void *)(v11 + 8 * v12), 8 * (v14 - v12));
        LODWORD(v12) = (v13 + 63) >> 6;
      }
      else
      {
        LODWORD(v12) = (v13 + 63) >> 6;
      }
      *((_DWORD *)v198 + 86) = v12;
    }
    if ((v13 & 0x3F) != 0) {
      *(void *)(v11 + 8 * v12 - 8) &= ~(-1 << (v13 & 0x3F));
    }
    unint64_t v15 = *(void **)(a2 + 328);
    uint64_t v199 = (void *)(a2 + 320);
    if (v15 != (void *)(a2 + 320))
    {
      int v16 = 0;
      int v17 = v198;
      int v208 = (void *)((char *)v198 + 328);
      uint64_t v205 = (char **)((char *)v198 + 408);
      BOOL v18 = v207;
LABEL_28:
      v215 = v219;
      uint64_t v216 = v219;
      uint64_t v217 = 2;
      int v218 = 0;
      uint64_t v19 = (uint64_t *)v15[11];
      unsigned int v20 = (uint64_t *)v15[12];
      unsigned int v200 = v15;
      if (v19 == v20) {
        goto LABEL_344;
      }
      unsigned int v21 = 0;
      unsigned int v22 = 2;
      uint64_t v23 = v219;
      int v24 = v219;
      while (1)
      {
        uint64_t v25 = *v19;
        if (*(void *)(*v19 + 152) == *(void *)(*v19 + 160)
          || ((*(void *)(v25 + 72) - *(void *)(v25 + 64)) & 0x7FFFFFFF8) != 8)
        {
          goto LABEL_64;
        }
        if (v24 != v23) {
          break;
        }
        if (v21)
        {
          unsigned int v26 = 0;
          uint64_t v27 = 8 * v21;
          int v28 = v23;
          while (*(void *)v28 != v25)
          {
            if (*(void *)v28 == -2) {
              unsigned int v26 = v28;
            }
            v28 += 8;
            v27 -= 8;
            if (!v27)
            {
              if (!v26) {
                goto LABEL_40;
              }
              *(void *)unsigned int v26 = v25;
              --v218;
              goto LABEL_63;
            }
          }
          goto LABEL_63;
        }
LABEL_40:
        if (v22 <= v21) {
          break;
        }
        HIDWORD(v217) = v21 + 1;
        *(void *)&v23[8 * v21] = v25;
LABEL_63:
        uint64_t v23 = v215;
        int v24 = v216;
        unsigned int v21 = HIDWORD(v217);
        unsigned int v22 = v217;
LABEL_64:
        if (++v19 == v20)
        {
          if (v21 == v218)
          {
            int v201 = 0;
            goto LABEL_345;
          }
          uint64_t v38 = *((unsigned int *)v17 + 66);
          if (v38) {
            bzero(*((void **)v207 + 1), 8 * v38);
          }
          uint64_t v39 = *((unsigned int *)v17 + 86);
          if (v39) {
            bzero(*v193, 8 * v39);
          }
          int v40 = *((_DWORD *)v17 + 104);
          if (v40 || *((_DWORD *)v17 + 105))
          {
            unsigned int v180 = *((_DWORD *)v17 + 106);
            if (v180 > 4 * v40 && v180 >= 0x41)
            {
              sub_1CD54C504(v205);
              int v17 = v198;
            }
            else
            {
              if (v180)
              {
                int v181 = (char **)(*v205 + 8);
                uint64_t v182 = 88 * v180;
                do
                {
                  int v183 = *((_DWORD *)v181 - 2);
                  if (v183 != -1)
                  {
                    if (v183 != -2) {
                      int v181 = sub_1CD54C268(v181);
                    }
                    *((_DWORD *)v181 - 2) = -1;
                  }
                  v181 += 11;
                  v182 -= 88;
                }
                while (v182);
              }
              int v17 = v198;
              *((void *)v198 + 52) = 0;
            }
            BOOL v18 = v207;
          }
          uint64_t v206 = v15 + 6;
          unint64_t v41 = v15[6] & 0xFFFFFFFFFFFFFFF8;
          if (!v41 || (*(unsigned char *)v41 & 4) == 0)
          {
            while ((*(_WORD *)(v41 + 44) & 4) != 0)
              unint64_t v41 = *(void *)v41 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((void *)v41 != v206)
          {
            int v201 = 0;
            int v194 = v16;
            while (1)
            {
              unint64_t v42 = *(void *)v41 & 0xFFFFFFFFFFFFFFF8;
              if (!v42 || (*(unsigned char *)v42 & 4) == 0)
              {
                while ((*(_WORD *)(v42 + 44) & 4) != 0)
                  unint64_t v42 = *(void *)v42 & 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v226 = (char *)v228;
              uint64_t v227 = 0x200000000;
              uint64_t v223 = (char *)&v225;
              uint64_t v224 = 0x200000000;
              __int16 v43 = *(unsigned __int16 **)(v41 + 16);
              unsigned int v44 = *v43;
              if (v44 - 13 <= 1)
              {
                *(void *)&long long v221 = 1;
                for (uint64_t i = 2; i != 34; i += 8)
                  v222[i - 4] = -1;
                uint64_t v55 = *(void *)(v41 + 32);
                if (*v43 != 14)
                {
                  uint64_t v57 = v55 + 32;
                  goto LABEL_118;
                }
                uint64_t v56 = *(unsigned int *)(v41 + 40);
                if (v56 != 2)
                {
                  uint64_t v57 = v55 + 32 * v56;
                  v55 += 64;
                  do
                  {
LABEL_118:
                    if (!*(unsigned char *)v55 && (*(_DWORD *)(v55 + 4) - 1) <= 0x3FFFFFFE)
                    {
                      BOOL v18 = v207;
                      if (sub_1CC3A6C64(v41, (uint64_t)&v226, (uint64_t)&v223, v207, v208)) {
                        goto LABEL_138;
                      }
                      unsigned int v58 = *(_DWORD *)(v55 + 4);
                      unint64_t v59 = *(unsigned int *)(*(void *)(v209 + 8) + 24 * v58 + 16);
                      int v60 = (_WORD *)(*(void *)(v209 + 56) + ((v59 >> 3) & 0x1FFFFFFE));
                      __int16 v62 = *v60;
                      uint64_t v61 = v60 + 1;
                      unsigned __int16 v63 = v62 + (v59 & 0xF) * v58;
                      do
                      {
                        LODWORD(v210) = v63;
                        uint64_t v64 = sub_1CD54C5FC(&v221, (int *)&v210);
                        unint64_t v65 = v64[4];
                        if (v65 >= v64[5]) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(_DWORD *)(*((void *)v64 + 1) + 4 * v65) = *(_DWORD *)(v55 + 4);
                        ++v64[4];
                        int v66 = *v61++;
                        v63 += v66;
                      }
                      while (v66);
                    }
                    v55 += 32;
                  }
                  while (v55 != v57);
                }
                uint64_t v67 = (char *)sub_1CD54C2F0(&v221);
                uint64_t v69 = (char *)&v221 + 8;
                if (v221)
                {
                  uint64_t v70 = 4;
                }
                else
                {
                  uint64_t v69 = (char *)*((void *)&v221 + 1);
                  uint64_t v70 = v222[0];
                }
                BOOL v71 = &v69[32 * v70];
                BOOL v18 = v207;
                if (v71 != v67)
                {
                  int v72 = v67;
                  int v73 = v68;
                  do
                  {
                    int v74 = (unsigned int *)(v72 + 32);
                    LODWORD(v220) = *(_DWORD *)v72;
                    int v75 = sub_1CD54CAC4((uint64_t)v205, (int *)&v220);
                    int v210 = (void *)v41;
                    sub_1CD54C364((uint64_t)(v75 + 2), &v210, (uint64_t)(v72 + 8));
                    while (v74 != v73)
                    {
                      unsigned int v76 = *v74;
                      v74 += 8;
                      if (v76 <= 0xFFFFFFFD)
                      {
                        int v72 = (char *)(v74 - 8);
                        goto LABEL_137;
                      }
                    }
                    int v72 = (char *)v73;
LABEL_137:
                    ;
                  }
                  while (v72 != v71);
                }
LABEL_138:
                sub_1CD54D14C((uint64_t)&v221);
                int v46 = 5;
                int v17 = v198;
                int v16 = v194;
              }
              else
              {
                if (v44 <= 0x17 && ((1 << v44) & 0x838000) != 0)
                {
                  int v46 = 5;
                  goto LABEL_236;
                }
                __int16 v47 = *(_WORD *)(v41 + 44);
                uint64_t v48 = *((void *)v43 + 1);
                if ((v47 & 0xC) == 0 || (v47 & 4) != 0)
                {
                  if ((v48 & 0x80) != 0)
                  {
LABEL_116:
                    int v46 = 1;
                    goto LABEL_236;
                  }
                }
                else
                {
                  unint64_t v49 = v41;
                  if ((v48 & 0x80) != 0) {
                    goto LABEL_116;
                  }
                  while ((*(_WORD *)(v49 + 44) & 8) != 0)
                  {
                    unint64_t v49 = *(void *)(v49 + 8);
                    int v46 = 1;
                    if ((*(unsigned char *)(*(void *)(v49 + 16) + 8) & 0x80) != 0) {
                      goto LABEL_236;
                    }
                  }
                }
                if (v44 != 19) {
                  goto LABEL_141;
                }
                uint64_t v50 = *(int **)(v41 + 32);
                int v51 = *v50;
                if ((*v50 & 0x8000000) == 0) {
                  goto LABEL_141;
                }
                uint64_t v52 = *((void *)v50 + 1);
                if (v52)
                {
                  uint64_t v53 = *(void *)(*(void *)(v52 + 16) + 8);
                  if ((v51 & 0x1000000) != 0)
                  {
                    if ((v53 & 0x100000000) != 0) {
                      goto LABEL_141;
                    }
                  }
                  else if ((v53 & 0x80000000) != 0)
                  {
                    goto LABEL_141;
                  }
                }
                if (sub_1CC3A6C64(v41, (uint64_t)&v226, (uint64_t)&v223, v18, v208))
                {
LABEL_141:
                  sub_1CBBE60E4(v41, v18, v208, v209);
                  int v46 = 5;
                  goto LABEL_236;
                }
                if (v224)
                {
                  uint64_t v77 = 0;
                  uint64_t v78 = v223;
                  v185 = &v223[4 * v224];
                  do
                  {
                    uint64_t v190 = v77;
                    int v187 = v78;
                    int v195 = *(_DWORD *)v78;
                    if (v216 == v215) {
                      uint64_t v79 = (uint64_t *)((char *)&v217 + 4);
                    }
                    else {
                      uint64_t v79 = &v217;
                    }
                    uint64_t v80 = *(unsigned int *)v79;
                    if (v80)
                    {
                      uint64_t v81 = 8 * v80;
                      int v82 = v216;
                      while (*(void *)v82 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        v82 += 8;
                        v81 -= 8;
                        if (!v81) {
                          goto LABEL_235;
                        }
                      }
                    }
                    else
                    {
                      int v82 = v216;
                    }
                    int v83 = &v216[8 * v80];
                    if (v82 == v83) {
                      goto LABEL_235;
                    }
                    uint64_t v84 = 0;
                    uint64_t v85 = *(const llvm::MachineFunction ***)v82;
LABEL_155:
                    if (sub_1CC3A6FC8(v85, v195, v209))
                    {
                      if (v84) {
                        goto LABEL_235;
                      }
                    }
                    else
                    {
                      uint64_t v85 = v84;
                    }
                    uint64_t v84 = v85;
                    unsigned int v86 = (unint64_t *)(v82 + 8);
                    while (v86 != (unint64_t *)v83)
                    {
                      unint64_t v87 = *v86++;
                      uint64_t v85 = (const llvm::MachineFunction **)v87;
                      if (v87 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        int v82 = (char *)(v86 - 1);
                        goto LABEL_155;
                      }
                    }
                    uint64_t v189 = v84;
                    if (!v84) {
                      goto LABEL_235;
                    }
                    int v88 = (const llvm::MachineFunction ***)v200[11];
                    uint64_t v89 = (const llvm::MachineFunction ***)v200[12];
                    while (v88 != v89)
                    {
                      int v90 = *v88;
                      int v91 = v215;
                      if (v216 == v215)
                      {
                        int v92 = HIDWORD(v217);
                        int v93 = &v216[8 * HIDWORD(v217)];
                        if (HIDWORD(v217))
                        {
                          uint64_t v94 = 0;
                          while (*(const llvm::MachineFunction ***)&v216[v94] != v90)
                          {
                            v94 += 8;
                            if (8 * HIDWORD(v217) == v94) {
                              goto LABEL_185;
                            }
                          }
                          int v93 = &v216[v94];
                        }
LABEL_185:
                        int v91 = v216;
                      }
                      else
                      {
                        int v95 = v217 - 1;
                        unsigned int v96 = (v217 - 1) & ((v90 >> 4) ^ (v90 >> 9));
                        int v93 = &v216[8 * v96];
                        uint64_t v97 = *(const llvm::MachineFunction ***)v93;
                        if (*(void *)v93 == -1)
                        {
                          unsigned int v98 = 0;
LABEL_193:
                          if (v98) {
                            int v93 = v98;
                          }
                          int v92 = HIDWORD(v217);
                          if (*(const llvm::MachineFunction ***)v93 != v90) {
                            int v93 = &v216[8 * v217];
                          }
                        }
                        else
                        {
                          unsigned int v98 = 0;
                          int v99 = 1;
                          while (v97 != v90)
                          {
                            if (v98) {
                              BOOL v100 = 0;
                            }
                            else {
                              BOOL v100 = v97 == (const llvm::MachineFunction **)-2;
                            }
                            if (v100) {
                              unsigned int v98 = v93;
                            }
                            unsigned int v101 = v96 + v99++;
                            unsigned int v96 = v101 & v95;
                            int v93 = &v216[8 * (v101 & v95)];
                            uint64_t v97 = *(const llvm::MachineFunction ***)v93;
                            if (*(void *)v93 == -1) {
                              goto LABEL_193;
                            }
                          }
                          int v92 = HIDWORD(v217);
                        }
                      }
                      if (v216 == v91) {
                        int v102 = v92;
                      }
                      else {
                        int v102 = v217;
                      }
                      if (v93 == &v216[8 * v102] && sub_1CC3A6FC8(v90, v195, v209)) {
                        goto LABEL_235;
                      }
                      ++v88;
                    }
                    if (v190 && v190 != v84) {
                      goto LABEL_235;
                    }
                    uint64_t v78 = v187 + 4;
                    uint64_t v77 = v84;
                  }
                  while (v187 + 4 != v185);
                  int v210 = 0;
                  uint64_t v211 = 0;
                  unsigned int v212 = 0;
                  uint64_t v214 = 0;
                  long long v213 = 0uLL;
                  uint64_t v103 = *(unsigned int *)(v41 + 40);
                  int v17 = v198;
                  if (!v103) {
                    goto LABEL_251;
                  }
                  int v104 = *(_DWORD **)(v41 + 32);
                  unsigned int v196 = &v104[8 * v103];
                  do
                  {
                    uint64_t v105 = v104;
                    if ((*v104 & 0x10000FF) == 0x1000000)
                    {
                      unsigned int v106 = v104[1];
                      unint64_t v107 = *(unsigned int *)(*(void *)(v209 + 8) + 24 * v106 + 16);
                      uint64_t v108 = (_WORD *)(*(void *)(v209 + 56) + ((v107 >> 3) & 0x1FFFFFFE));
                      unsigned __int16 v109 = *v108 + (v107 & 0xF) * v106;
                      do
                      {
                        uint64_t v110 = *((void *)v17 + 51);
                        int v111 = *((_DWORD *)v17 + 106);
                        uint64_t v220 = 0;
                        if (sub_1CC3A6EB0(v110, v111, v109, &v220))
                        {
                          *(void *)&long long v221 = v222;
                          *((void *)&v221 + 1) = 0x200000000;
                          if (*((_DWORD *)v220 + 4))
                          {
                            sub_1CD54D18C((uint64_t)&v221, (uint64_t)(v220 + 1));
                            int v188 = (uint64_t *)v221;
                            uint64_t v186 = (uint64_t *)(v221 + 32 * DWORD2(v221));
                            if (DWORD2(v221))
                            {
                              do
                              {
                                uint64_t v191 = sub_1CD54C3F0((uint64_t)&v210, v188);
                                uint64_t v113 = *((unsigned int *)v188 + 4);
                                if (v113)
                                {
                                  unint64_t v114 = (_DWORD *)v188[1];
                                  unsigned int v115 = *(_DWORD *)(v191 + 8);
                                  uint64_t v116 = 4 * v113;
                                  do
                                  {
                                    if (v115 >= *(_DWORD *)(v191 + 12)) {
                                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                                    }
                                    *(_DWORD *)(*(void *)v191 + 4 * v115) = *v114;
                                    unsigned int v115 = *(_DWORD *)(v191 + 8) + 1;
                                    *(_DWORD *)(v191 + 8) = v115;
                                    ++v114;
                                    v116 -= 4;
                                  }
                                  while (v116);
                                }
                                v188 += 4;
                              }
                              while (v188 != v186);
                              int v188 = (uint64_t *)v221;
                              if (DWORD2(v221))
                              {
                                uint64_t v117 = 4 * DWORD2(v221);
                                do
                                {
                                  int v118 = (uint64_t *)v188[v117 - 3];
                                  if (&v188[v117 - 1] != v118) {
                                    free(v118);
                                  }
                                  v117 -= 4;
                                }
                                while (v117 * 8);
                                int v188 = (uint64_t *)v221;
                              }
                            }
                            int v17 = v198;
                            BOOL v18 = v207;
                            int v16 = v194;
                            if (v188 != (uint64_t *)v222) {
                              free(v188);
                            }
                          }
                          else
                          {
                            int v17 = v198;
                            BOOL v18 = v207;
                            int v16 = v194;
                          }
                        }
                        int v112 = (unsigned __int16)v108[1];
                        ++v108;
                        v109 += v112;
                      }
                      while (v112);
                    }
                    int v104 = v105 + 8;
                  }
                  while (v105 + 8 != v196);
                  if (v211)
                  {
                    unsigned int v119 = v212;
                    uint64_t v77 = v189;
                    if (v212 > 4 * (int)v211 && v212 >= 0x41)
                    {
                      int v120 = 1 << (33 - __clz(v211 - 1));
                      if (v120 <= 64) {
                        int v121 = 64;
                      }
                      else {
                        int v121 = v120;
                      }
LABEL_233:
                      if (v121 == v119)
                      {
                        uint64_t v211 = 0;
                        uint64_t v178 = 16 * v119;
                        uint64_t v179 = v210;
                        uint64_t v77 = v189;
                        do
                        {
                          *uint64_t v179 = -4096;
                          v179 += 2;
                          v178 -= 16;
                        }
                        while (v178);
                      }
                      else
                      {
                        MEMORY[0x1D25D9CD0](v210, 8);
                        sub_1CB837D60(&v210, v121);
                        uint64_t v77 = v189;
                      }
LABEL_251:
                      long long v221 = v213;
                      *(void *)uint64_t v222 = v214;
                      uint64_t v124 = (uint64_t)(v77 + 6);
                      uint64_t v214 = 0;
                      long long v213 = 0uLL;
                      uint64_t v125 = (uint64_t)v77[7];
                      uint64_t v126 = (*(uint64_t (**)(void))(**((void **)v77[4] + 2) + 104))(*((void *)v77[4] + 2));
                      if (v124 != v125)
                      {
                        uint64_t v127 = v126;
                        while (1)
                        {
                          int v128 = **(unsigned __int16 **)(v125 + 16);
                          if (**(_WORD **)(v125 + 16))
                          {
                            if (v128 != 69
                              && (v128 - 3) >= 4
                              && !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v127 + 1144))(v127, v125))
                            {
                              break;
                            }
                          }
                          if ((*(unsigned char *)v125 & 4) == 0)
                          {
                            while ((*(_WORD *)(v125 + 44) & 8) != 0)
                              uint64_t v125 = *(void *)(v125 + 8);
                          }
                          uint64_t v125 = *(void *)(v125 + 8);
                          if (v125 == v124)
                          {
                            uint64_t v125 = v124;
                            break;
                          }
                        }
                      }
                      if (sub_1CC3A1154((uint64_t)v189, v125, v41, v209, v5, 0))
                      {
                        int v46 = 5;
                      }
                      else
                      {
                        uint64_t v202 = (const llvm::DILocation **)v125;
                        if (v227)
                        {
                          uint64_t v129 = v226;
                          unsigned int v130 = &v226[4 * v227];
                          do
                          {
                            uint64_t v131 = (_DWORD *)(*(void *)(v41 + 32) + 32 * *(unsigned int *)v129);
                            unsigned int v132 = v131[1];
                            if (*v208) {
                              int v133 = (void *)(*v208 + 8);
                            }
                            else {
                              int v133 = 0;
                            }
                            unint64_t v134 = *(unsigned int *)(*v133 + 24 * (unsigned __int16)v131[1] + 16);
                            uint64_t v135 = (_WORD *)(v133[6] + ((v134 >> 3) & 0x1FFFFFFE));
                            __int16 v137 = *v135;
                            int v136 = v135 + 1;
                            unsigned __int16 v138 = v137 + (v134 & 0xF) * v132;
                            while (((*((void *)*v193 + (v138 >> 6)) >> v138) & 1) == 0)
                            {
                              int v139 = *v136++;
                              v138 += v139;
                              if (!v139) {
                                goto LABEL_283;
                              }
                            }
                            for (uint64_t j = *(void *)(v41 + 8); (void *)j != v206; uint64_t j = *(void *)(j + 8))
                            {
                              if (llvm::MachineInstr::findRegisterUseOperandIdx(j, v132, 1, v209) != -1)
                              {
                                llvm::MachineInstr::clearRegisterKills(j, v132, v209);
                                *v131 |= 0x4000000u;
                                break;
                              }
                              if (!j || (*(unsigned char *)j & 4) == 0)
                              {
                                while ((*(_WORD *)(j + 44) & 8) != 0)
                                  uint64_t j = *(void *)(j + 8);
                              }
                            }
LABEL_283:
                            v129 += 4;
                          }
                          while (v129 != v130);
                        }
                        sub_1CC3A1A80(v41, (uint64_t)v189, v202, v221, (uint64_t)(*((void *)&v221 + 1) - v221) >> 5);
                        uint64_t v203 = (*(uint64_t (**)(void))(**((void **)v189[4] + 2) + 176))(*((void *)v189[4] + 2));
                        if (v224)
                        {
                          uint64_t v141 = v223;
                          uint64_t v142 = &v223[4 * v224];
                          if (v203) {
                            uint64_t v143 = (void *)(v203 + 8);
                          }
                          else {
                            uint64_t v143 = 0;
                          }
                          do
                          {
                            uint64_t v144 = v143[6];
                            if (v144)
                            {
                              int v145 = *(_DWORD *)v141;
                              int v146 = (unsigned __int16 *)(v144
                                                        + 2
                                                        * *(unsigned int *)(*v143 + 24 * *(unsigned int *)v141 + 4));
                              do
                              {
                                llvm::MachineBasicBlock::removeLiveIn(v189, (unsigned __int16)v145, -1);
                                int v147 = *v146++;
                                v145 += v147;
                              }
                              while (v147);
                            }
                            v141 += 4;
                          }
                          while (v141 != v142);
                        }
                        if (v227)
                        {
                          uint64_t v148 = v226;
                          uint64_t v149 = &v226[4 * v227];
                          if (v203) {
                            uint64_t v150 = (void *)(v203 + 8);
                          }
                          else {
                            uint64_t v150 = 0;
                          }
                          int v17 = v198;
                          BOOL v18 = v207;
                          int v16 = v194;
                          uint64_t v151 = v189;
                          uint64_t v197 = &v226[4 * v227];
                          uint64_t v192 = v150;
                          do
                          {
                            uint64_t v152 = 0;
                            unsigned int v153 = *(_DWORD *)(*(void *)(v41 + 32) + 32 * *(unsigned int *)v148 + 4);
                            uint64_t v154 = *v150 + 24 * v153;
                            uint64_t v155 = (uint64_t *)(v150[7] + 8 * *(unsigned __int16 *)(v154 + 20));
                            uint64_t v156 = (unsigned __int16 *)(v150[6]
                                                      + (((unint64_t)*(unsigned int *)(v154 + 16) >> 3) & 0x1FFFFFFE)
                                                      + 2);
                            do
                            {
                              uint64_t v157 = *v155++;
                              v152 |= v157;
                              LODWORD(v157) = *v156++;
                            }
                            while (v157);
                            if (v152) {
                              uint64_t v158 = v152;
                            }
                            else {
                              uint64_t v158 = -1;
                            }
                            uint64_t v160 = (char *)v151[20];
                            unint64_t v159 = (unint64_t)v151[21];
                            if ((unint64_t)v160 >= v159)
                            {
                              uint64_t v162 = (char *)v151[19];
                              uint64_t v163 = (v160 - v162) >> 4;
                              unint64_t v164 = v163 + 1;
                              if ((unint64_t)(v163 + 1) >> 60) {
                                abort();
                              }
                              uint64_t v165 = v159 - (void)v162;
                              if (v165 >> 3 > v164) {
                                unint64_t v164 = v165 >> 3;
                              }
                              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFF0) {
                                unint64_t v164 = 0xFFFFFFFFFFFFFFFLL;
                              }
                              unint64_t v204 = v164;
                              if (v164)
                              {
                                if (v164 >> 60) {
                                  sub_1CB833614();
                                }
                                __int16 v166 = *(_DWORD *)(*(void *)(v41 + 32) + 32 * *(unsigned int *)v148 + 4);
                                unint64_t v167 = (char *)operator new(16 * v164);
                                LOWORD(v153) = v166;
                              }
                              else
                              {
                                unint64_t v167 = 0;
                              }
                              uint64_t v168 = &v167[16 * v163];
                              *(_WORD *)uint64_t v168 = v153;
                              *((void *)v168 + 1) = v158;
                              uint64_t v169 = v168;
                              if (v160 == v162)
                              {
                                BOOL v18 = v207;
                                int v16 = v194;
                                uint64_t v151 = v189;
                              }
                              else
                              {
                                BOOL v18 = v207;
                                int v16 = v194;
                                do
                                {
                                  *((_OWORD *)v169 - 1) = *((_OWORD *)v160 - 1);
                                  v169 -= 16;
                                  v160 -= 16;
                                }
                                while (v160 != v162);
                                uint64_t v151 = v189;
                                uint64_t v160 = (char *)v189[19];
                              }
                              int v161 = (unsigned __int16 *)(v168 + 16);
                              v151[19] = (const llvm::MachineFunction *)v169;
                              v151[20] = (const llvm::MachineFunction *)(v168 + 16);
                              v151[21] = (const llvm::MachineFunction *)&v167[16 * v204];
                              int v17 = v198;
                              if (v160)
                              {
                                operator delete(v160);
                                uint64_t v151 = v189;
                              }
                              uint64_t v149 = v197;
                              uint64_t v150 = v192;
                            }
                            else
                            {
                              *(_WORD *)uint64_t v160 = v153;
                              *((void *)v160 + 1) = v158;
                              int v161 = (unsigned __int16 *)(v160 + 16);
                            }
                            v151[20] = (const llvm::MachineFunction *)v161;
                            v148 += 4;
                          }
                          while (v148 != v149);
                        }
                        else
                        {
                          int v161 = (unsigned __int16 *)v189[20];
                          int v17 = v198;
                          BOOL v18 = v207;
                          int v16 = v194;
                        }
                        uint64_t v170 = (unsigned __int16 *)v189[19];
                        unint64_t v171 = 126 - 2 * __clz(((char *)v161 - (char *)v170) >> 4);
                        if (v161 == v170) {
                          uint64_t v172 = 0;
                        }
                        else {
                          uint64_t v172 = v171;
                        }
                        sub_1CC31AF28(v170, v161, v172, 1);
                        int v174 = (unsigned __int16 *)v189[19];
                        int v173 = (unsigned __int16 *)v189[20];
                        if (v174 == v173)
                        {
                          uint64_t v175 = v189[19];
                        }
                        else
                        {
                          uint64_t v175 = v189[19];
                          while (2)
                          {
                            int v176 = *v174;
                            for (uint64_t k = *((void *)v174 + 1); ; k |= *((void *)v174 + 1))
                            {
                              v174 += 8;
                              if (v174 == v173)
                              {
                                *(_WORD *)uint64_t v175 = v176;
                                *((void *)v175 + 1) = k;
                                uint64_t v175 = (const llvm::MachineFunction *)((char *)v175 + 16);
                                goto LABEL_336;
                              }
                              if (v176 != *v174) {
                                break;
                              }
                            }
                            *(_WORD *)uint64_t v175 = v176;
                            *((void *)v175 + 1) = k;
                            uint64_t v175 = (const llvm::MachineFunction *)((char *)v175 + 16);
                            if (v174 != v173) {
                              continue;
                            }
                            break;
                          }
                        }
LABEL_336:
                        int v46 = 0;
                        if (v175 == (const llvm::MachineFunction *)v173)
                        {
                          int v201 = 1;
                        }
                        else
                        {
                          v189[20] = v175;
                          int v201 = 1;
                          int v17 = v198;
                          BOOL v18 = v207;
                          int v16 = v194;
                        }
                      }
                      uint64_t v220 = (void **)&v221;
                      sub_1CC3A73E8(&v220);
                      *(void *)&long long v221 = &v213;
                      sub_1CC3A73E8((void ***)&v221);
                      MEMORY[0x1D25D9CD0](v210, 8);
                      goto LABEL_236;
                    }
                  }
                  else
                  {
                    uint64_t v77 = v189;
                    if (!HIDWORD(v211)) {
                      goto LABEL_251;
                    }
                    unsigned int v119 = v212;
                    if (v212 > 0x40)
                    {
                      int v121 = 0;
                      goto LABEL_233;
                    }
                  }
                  if (v119)
                  {
                    uint64_t v122 = v210;
                    uint64_t v123 = 16 * v119;
                    do
                    {
                      void *v122 = -4096;
                      v122 += 2;
                      v123 -= 16;
                    }
                    while (v123);
                  }
                  uint64_t v211 = 0;
                  goto LABEL_251;
                }
LABEL_235:
                sub_1CBBE60E4(v41, v18, v208, v209);
                int v46 = 5;
                int v17 = v198;
              }
LABEL_236:
              if (v223 != (char *)&v225) {
                free(v223);
              }
              if (v226 != (char *)v228) {
                free(v226);
              }
              if (v46 != 5 && v46) {
                break;
              }
              unint64_t v41 = v42;
              if ((void *)v42 == v206) {
                goto LABEL_345;
              }
            }
          }
LABEL_344:
          int v201 = 0;
LABEL_345:
          if (v216 != v215) {
            free(v216);
          }
          v16 |= v201;
          unint64_t v15 = (void *)v200[1];
          if (v15 == v199) {
            return v16 & 1;
          }
          goto LABEL_28;
        }
      }
      if (3 * v22 <= 4 * (v21 - v218))
      {
        if (v22 >= 0x40) {
          v22 *= 2;
        }
        else {
          unsigned int v22 = 128;
        }
      }
      else if (v22 - v21 >= v22 >> 3)
      {
        goto LABEL_44;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v215, v22);
      unsigned int v22 = v217;
      int v24 = v216;
LABEL_44:
      unsigned int v29 = v22 - 1;
      unsigned int v30 = (v22 - 1) & ((v25 >> 4) ^ (v25 >> 9));
      int v31 = &v24[8 * v30];
      uint64_t v32 = *(void *)v31;
      if (*(void *)v31 == -1)
      {
        int v33 = 0;
LABEL_56:
        if (v33) {
          uint64_t v37 = v33;
        }
        else {
          uint64_t v37 = v31;
        }
        if (*(void *)v37 != v25)
        {
          if (*(void *)v37 == -2) {
            --v218;
          }
          else {
            ++HIDWORD(v217);
          }
          *(void *)uint64_t v37 = v25;
        }
      }
      else
      {
        int v33 = 0;
        int v34 = 1;
        while (v32 != v25)
        {
          if (v33) {
            BOOL v35 = 0;
          }
          else {
            BOOL v35 = v32 == -2;
          }
          if (v35) {
            int v33 = v31;
          }
          unsigned int v36 = v30 + v34++;
          unsigned int v30 = v36 & v29;
          int v31 = &v24[8 * (v36 & v29)];
          uint64_t v32 = *(void *)v31;
          if (*(void *)v31 == -1) {
            goto LABEL_56;
          }
        }
      }
      goto LABEL_63;
    }
  }
  LOBYTE(v16) = 0;
  return v16 & 1;
}

double sub_1CC3A6BA0@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

_DWORD *sub_1CC3A6BC8(_DWORD *result, int a2)
{
  unsigned int v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    double result = operator new(88 * v4, (std::align_val_t)8uLL);
    *(void *)unsigned int v2 = result;
    *((void *)v2 + 1) = 0;
    unsigned int v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 88 * v5;
      do
      {
        *double result = -1;
        result += 22;
        v6 -= 88;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)double result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CC3A6C64(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 40);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(_DWORD *)(v7 + 32 * v6);
    if (!(_BYTE)v8)
    {
      int v9 = *(_DWORD *)(v7 + 32 * v6 + 4);
      if (v9) {
        break;
      }
    }
LABEL_4:
    if (++v6 == v5) {
      return 0;
    }
  }
  uint64_t v10 = a4[1];
  uint64_t v11 = (void *)(*a4 + 8);
  if (!*a4) {
    uint64_t v11 = 0;
  }
  unint64_t v12 = *(unsigned int *)(*v11 + 24 * (unsigned __int16)v9 + 16);
  unint64_t v13 = v12 >> 4;
  __int16 v14 = v12 & 0xF;
  uint64_t v15 = v11[6];
  unsigned __int16 v16 = *(_WORD *)(v15 + 2 * v13) + v14 * v9;
  if ((v8 & 0x1000000) != 0)
  {
    unsigned int v21 = (unsigned __int16 *)(v15 + 2 * v13 + 2);
    while (((*(void *)(v10 + 8 * (v16 >> 6)) >> v16) & 1) == 0)
    {
      int v22 = *v21++;
      v16 += v22;
      if (!v22)
      {
        if (*a5) {
          uint64_t v23 = (void *)(*a5 + 8);
        }
        else {
          uint64_t v23 = 0;
        }
        unint64_t v24 = *(unsigned int *)(*v23 + 24 * (unsigned __int16)v9 + 16);
        __int16 v25 = v24 & 0xF;
        unsigned int v26 = (_WORD *)(v23[6] + ((v24 >> 3) & 0x1FFFFFFE));
        __int16 v28 = *v26;
        uint64_t v27 = v26 + 1;
        unsigned __int16 v29 = v28 + v25 * v9;
        while (((*(void *)(a5[1] + 8 * (v29 >> 6)) >> v29) & 1) == 0)
        {
          int v30 = *v27++;
          v29 += v30;
          if (!v30)
          {
            unint64_t v31 = *(unsigned int *)(a3 + 8);
            if (v31 >= *(unsigned int *)(a3 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)a3 + 4 * v31) = v9;
            unsigned int v20 = (_DWORD *)(a3 + 8);
LABEL_26:
            ++*v20;
            goto LABEL_4;
          }
        }
        return 1;
      }
    }
  }
  else
  {
    int v17 = (unsigned __int16 *)(v15 + 2 * v13 + 2);
    while (((*(void *)(v10 + 8 * (v16 >> 6)) >> v16) & 1) == 0)
    {
      int v18 = *v17++;
      v16 += v18;
      if (!v18)
      {
        unint64_t v19 = *(unsigned int *)(a2 + 8);
        if (v19 >= *(unsigned int *)(a2 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a2 + 4 * v19) = v6;
        unsigned int v20 = (_DWORD *)(a2 + 8);
        goto LABEL_26;
      }
    }
  }
  return 1;
}

uint64_t sub_1CC3A6EB0(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v7 = a2 - 1;
    unsigned int v8 = (37 * a3) & (a2 - 1);
    unint64_t v4 = (_DWORD *)(a1 + 88 * v8);
    int v9 = *v4;
    if (*v4 == a3)
    {
      uint64_t v5 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v9 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v9 == -2;
        }
        if (v12) {
          uint64_t v10 = v4;
        }
        unsigned int v13 = v8 + v11++;
        unsigned int v8 = v13 & v7;
        unint64_t v4 = (_DWORD *)(a1 + 88 * (v13 & v7));
        int v9 = *v4;
        uint64_t v5 = 1;
        if (*v4 == a3) {
          goto LABEL_3;
        }
      }
      uint64_t v5 = 0;
      if (v10) {
        unint64_t v4 = v10;
      }
    }
  }
  else
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
  }
LABEL_3:
  *a4 = v4;
  return v5;
}

void sub_1CC3A6F4C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v1 = a1 + 8;
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 16);
    if (!v2) {
      return;
    }
    uint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v3 = 32 * v2;
  unint64_t v4 = (void *)(v1 + 24);
  do
  {
    if (*((_DWORD *)v4 - 6) <= 0xFFFFFFFD)
    {
      uint64_t v5 = (void *)*(v4 - 2);
      if (v4 != v5)
      {
        uint64_t v6 = v4;
        uint64_t v7 = v3;
        free(v5);
        unint64_t v4 = v6;
        uint64_t v3 = v7;
      }
    }
    v4 += 4;
    v3 -= 32;
  }
  while (v3);
}

BOOL sub_1CC3A6FC8(const llvm::MachineFunction **a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v20 = 0x600000000;
  uint64_t v18 = a3;
  unint64_t v19 = v21;
  int v5 = *(_DWORD *)(a3 + 44);
  int v22 = v5;
  unsigned int v6 = v5 + 63;
  if ((v5 + 63) < 0x40)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = v6 >> 6;
    if (v6 >= 0x1C0) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(v21, 8 * v7);
    uint64_t v8 = v7;
    LODWORD(v20) = v7;
  }
  if ((v5 & 0x3F) != 0) {
    v21[v8 - 1] &= ~(-1 << (v5 & 0x3F));
  }
  llvm::LiveRegUnits::addLiveIns((llvm::LiveRegUnits *)&v18, a1);
  if (v18) {
    int v9 = (void *)(v18 + 8);
  }
  else {
    int v9 = 0;
  }
  unint64_t v10 = *(unsigned int *)(*v9 + 24 * a2 + 16);
  int v11 = (_WORD *)(v9[6] + ((v10 >> 3) & 0x1FFFFFFE));
  __int16 v13 = *v11;
  BOOL v12 = v11 + 1;
  unsigned __int16 v14 = v13 + (v10 & 0xF) * a2;
  do
  {
    uint64_t v15 = (1 << v14) & v19[v14 >> 6];
    if (v15) {
      break;
    }
    int v16 = *v12++;
    v14 += v16;
  }
  while (v16);
  if (v19 != v21) {
    free(v19);
  }
  return v15 != 0;
}

void sub_1CC3A7168(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    uint64_t v11 = (uint64_t)(v5 - *a1) >> 5;
    if ((unint64_t)(v11 + 1) >> 59) {
      abort();
    }
    uint64_t v12 = v4 - *a1;
    uint64_t v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v14 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    unsigned __int16 v29 = a1 + 2;
    if (v14 >> 59) {
      sub_1CB833614();
    }
    uint64_t v15 = (char *)operator new(32 * v14);
    int v16 = &v15[32 * v11];
    __p = v15;
    unsigned int v26 = v16;
    __int16 v28 = &v15[32 * v14];
    *(void *)int v16 = *(void *)a2;
    *((void *)v16 + 1) = v16 + 24;
    int v17 = v16 + 8;
    *((void *)v16 + 2) = 0x200000000;
    unsigned int v18 = *(_DWORD *)(a2 + 16);
    if (v18 && v17 != (void *)(a2 + 8))
    {
      unint64_t v19 = *(const void **)(a2 + 8);
      if (v19 == (const void *)(a2 + 24))
      {
        if (v18 >= 3)
        {
          *((_DWORD *)v16 + 4) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v16 + 24, v19, 4 * *(unsigned int *)(a2 + 16));
        *((_DWORD *)v16 + 4) = v18;
      }
      else
      {
        *int v17 = v19;
        int v24 = *(_DWORD *)(a2 + 20);
        *((_DWORD *)v16 + 4) = v18;
        *((_DWORD *)v16 + 5) = v24;
        *(void *)(a2 + 8) = a2 + 24;
        *(_DWORD *)(a2 + 20) = 0;
      }
      *(_DWORD *)(a2 + 16) = 0;
    }
    uint64_t v27 = v16 + 32;
    sub_1CD54D3F0(a1, &__p);
    uint64_t v10 = a1[1];
    uint64_t v20 = v26;
    if (v27 != v26)
    {
      unsigned int v21 = v27 - 8;
      do
      {
        int v22 = (char *)*((void *)v21 - 2);
        if (v21 != v22) {
          free(v22);
        }
        uint64_t v23 = v21 - 24;
        v21 -= 32;
      }
      while (v23 != v20);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *(void *)unint64_t v5 = *(void *)a2;
    *(void *)(v5 + 8) = v5 + 24;
    *(void *)(v5 + 16) = 0x200000000;
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    if (v6) {
      BOOL v7 = v5 == a2;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = *(void *)(a2 + 8);
      int v9 = (const void *)(a2 + 24);
      if (v8 == a2 + 24)
      {
        if (v6 >= 3) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(v5 + 24), v9, 4 * *(unsigned int *)(a2 + 16));
        *(_DWORD *)(v5 + 16) = v6;
      }
      else
      {
        *(void *)(v5 + 8) = v8;
        *(_DWORD *)(v5 + 16) = v6;
        *(_DWORD *)(v5 + 20) = *(_DWORD *)(a2 + 20);
        *(void *)(a2 + 8) = v9;
        *(_DWORD *)(a2 + 20) = 0;
      }
      *(_DWORD *)(a2 + 16) = 0;
    }
    uint64_t v10 = v5 + 32;
  }
  a1[1] = v10;
}

void sub_1CC3A73E8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      unsigned int v6 = v4 - 8;
      do
      {
        BOOL v7 = (char *)*((void *)v6 - 2);
        if (v6 != v7) {
          free(v7);
        }
        uint64_t v8 = v6 - 24;
        v6 -= 32;
      }
      while (v8 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1CC3A747C()
{
  v4.n128_u64[0] = (unint64_t)"Split critical edges during machine sinking";
  v4.n128_u64[1] = 43;
  LOBYTE(v1) = 1;
  uint64_t v3 = &v1;
  int v2 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCD0588, "machine-sink-split", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD0588, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Use block frequency info to find successors to sink";
  v4.n128_u64[1] = 51;
  LOBYTE(v1) = 1;
  uint64_t v3 = &v1;
  int v2 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCD0648, "machine-sink-bfi", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD0648, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Percentage threshold for splitting single-instruction critical edge. If the branch "
                                     "threshold is higher than this threshold, we allow speculative execution of up to 1 "
                                     "instruction to avoid branching to splitted critical edge";
  v4.n128_u64[1] = 222;
  int v1 = 1;
  int v2 = 40;
  uint64_t v3 = &v2;
  sub_1CD50BCD4((uint64_t)&unk_1EBCD0708, "machine-sink-split-probability-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD0708, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Do not try to find alias store for a load if there is a in-path block whose instruc"
                                     "tion number is higher than this threshold.";
  v4.n128_u64[1] = 125;
  int v1 = 1;
  int v2 = 2000;
  uint64_t v3 = &v2;
  sub_1CD50BCD4((uint64_t)&unk_1EBCD07C8, "machine-sink-load-instrs-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD07C8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Do not try to find alias store for a load if the block number in the straight line "
                                     "is higher than this threshold.";
  v4.n128_u64[1] = 113;
  int v1 = 1;
  int v2 = 20;
  uint64_t v3 = &v2;
  sub_1CD50BCD4((uint64_t)&unk_1EBCD0888, "machine-sink-load-blocks-threshold", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD0888, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Sink instructions into cycles to avoid register spills";
  v4.n128_u64[1] = 54;
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  int v2 = 1;
  sub_1CD4209D8((llvm::cl::Option *)&unk_1EBCD0948, "sink-insts-to-avoid-spills", &v4, (unsigned char **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD0948, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"The maximum number of instructions considered for cycle sinking.";
  v4.n128_u64[1] = 64;
  int v1 = 1;
  int v2 = 50;
  uint64_t v3 = &v2;
  sub_1CD50BCD4((uint64_t)&unk_1EBCD0A08, "machine-sink-cycle-limit", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCD0A08, &dword_1CB82C000);
}

uint64_t llvm::shouldOptimizeForSize(uint64_t a1, uint64_t a2, llvm::MachineBlockFrequencyInfo *a3)
{
  uint64_t result = 0;
  if (a2 && a3)
  {
    BOOL v7 = *(int **)(a2 + 8);
    if (!v7) {
      return 0;
    }
    if (byte_1EBD0D258) {
      return 1;
    }
    if (!byte_1EBD0CDD8) {
      return 0;
    }
    if (byte_1EBD0CF58) {
      goto LABEL_39;
    }
    int v8 = *v7;
    if (!*v7 && byte_1EBD0D018 != 0) {
      goto LABEL_39;
    }
    if (v8 == 2)
    {
      if (byte_1EBD04938)
      {
        BOOL v10 = 1;
      }
      else
      {
        int v27 = *((unsigned __int8 *)v7 + 72);
        BOOL v10 = *((unsigned char *)v7 + 72) != 0;
        if (!v27 && byte_1EBD0D0D8) {
          goto LABEL_39;
        }
      }
      if (v10 && byte_1EBD0D198) {
        goto LABEL_39;
      }
    }
    if (!byte_1EBD0CE98 || *(unsigned char *)(a2 + 51) && *(unsigned char *)(a2 + 50))
    {
      if (v8 == 2)
      {
        int v11 = dword_1EBD0D3D8;
        llvm::Function::getEntryCount(*(uint64_t ****)a1, 0, (uint64_t)v38);
        if (!v39
          || (unint64_t v32 = v38[0], v33 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v11), v34)
          && v33 >= v32)
        {
          uint64_t v12 = (const llvm::MachineBasicBlock *)(a1 + 320);
          uint64_t v13 = *(const llvm::MachineBasicBlock **)(a1 + 328);
          if (v13 == v12) {
            return 1;
          }
          while (1)
          {
            uint64_t BlockProfileCount = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, v13);
            if (!v15) {
              break;
            }
            unint64_t v16 = BlockProfileCount;
            unint64_t v17 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v11);
            uint64_t result = 0;
            if (v18)
            {
              if (v17 >= v16)
              {
                uint64_t v13 = (const llvm::MachineBasicBlock *)*((void *)v13 + 1);
                uint64_t result = 1;
                if (v13 != v12) {
                  continue;
                }
              }
            }
            return result;
          }
        }
      }
      else
      {
        int v19 = dword_1EBD0D318;
        llvm::Function::getEntryCount(*(uint64_t ****)a1, 0, (uint64_t)v38);
        if (!v39
          || (unint64_t v35 = v38[0], v36 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v19), !v37)
          || v36 > v35)
        {
          uint64_t v20 = (const llvm::MachineBasicBlock *)(a1 + 320);
          unsigned int v21 = *(const llvm::MachineBasicBlock **)(a1 + 328);
          if (v21 == v20) {
            return 1;
          }
          while (1)
          {
            uint64_t v22 = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, v21);
            if (v23)
            {
              unint64_t v24 = v22;
              unint64_t v25 = llvm::ProfileSummaryInfo::computeThreshold((llvm::ProfileSummaryInfo *)a2, v19);
              if (v26)
              {
                if (v25 <= v24) {
                  break;
                }
              }
            }
            unsigned int v21 = (const llvm::MachineBasicBlock *)*((void *)v21 + 1);
            uint64_t result = 1;
            if (v21 == v20) {
              return result;
            }
          }
        }
      }
      return 0;
    }
LABEL_39:
    llvm::Function::getEntryCount(*(uint64_t ****)a1, 0, (uint64_t)v38);
    if (!v39 || *(unsigned char *)(a2 + 40) && *(void *)(a2 + 32) >= v38[0])
    {
      __int16 v28 = (const llvm::MachineBasicBlock *)(a1 + 320);
      unsigned __int16 v29 = *(const llvm::MachineBasicBlock **)(a1 + 328);
      if (v29 == v28) {
        return 1;
      }
      while (1)
      {
        unint64_t v30 = llvm::MachineBlockFrequencyInfo::getBlockProfileCount(a3, v29);
        if (!v31 || !*(unsigned char *)(a2 + 40) || *(void *)(a2 + 32) < v30) {
          break;
        }
        unsigned __int16 v29 = (const llvm::MachineBasicBlock *)*((void *)v29 + 1);
        uint64_t result = 1;
        if (v29 == v28) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1CC3A79F4(uint64_t a1)
{
  if (byte_1EBD0CF58) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    if (*(_DWORD *)v2) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = byte_1EBD0D018 == 0;
    }
    if (!v3) {
      return 1;
    }
    if (*(_DWORD *)v2 == 2)
    {
      if (byte_1EBD04938)
      {
        BOOL v4 = 1;
      }
      else
      {
        int v5 = *(unsigned __int8 *)(v2 + 72);
        BOOL v4 = *(unsigned char *)(v2 + 72) != 0;
        if (v5) {
          BOOL v6 = 1;
        }
        else {
          BOOL v6 = byte_1EBD0D0D8 == 0;
        }
        if (!v6) {
          return 1;
        }
      }
      if (v4 && byte_1EBD0D198) {
        return 1;
      }
    }
  }
  if (byte_1EBD0CE98)
  {
    if (*(unsigned char *)(a1 + 51)) {
      return *(unsigned char *)(a1 + 50) == 0;
    }
    return 1;
  }
  return 0;
}

uint64_t llvm::GenericSSAContext<llvm::MachineFunction>::getEntryBlock(uint64_t a1)
{
  return *(void *)(a1 + 328);
}

void *llvm::GenericSSAContext<llvm::MachineFunction>::setFunction(void *result, uint64_t a2)
{
  *uint64_t result = *(void *)(a2 + 40);
  result[1] = a2;
  return result;
}

void llvm::GenericSSAContext<llvm::MachineFunction>::print(uint64_t a1@<X1>, void *a2@<X8>)
{
  a2[3] = a2;
  *a2 = &unk_1F260FD00;
  a2[1] = a1;
}

{
  a2[3] = a2;
  *a2 = &unk_1F260FD48;
  a2[1] = a1;
}

uint64_t *llvm::GenericSSAContext<llvm::MachineFunction>::print@<X0>(uint64_t *result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  a3[2] = a2;
  a3[3] = a3;
  *a3 = &unk_1F260FD90;
  a3[1] = v3;
  return result;
}

void sub_1CC3A7B40()
{
}

void *sub_1CC3A7B54(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F260FD00;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC3A7B9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F260FD00;
  a2[1] = v2;
  return result;
}

void sub_1CC3A7BC8(uint64_t a1, llvm::raw_ostream *a2)
{
}

void sub_1CC3A7BDC()
{
}

void *sub_1CC3A7BF0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F260FD48;
  result[1] = v3;
  return result;
}

uint64_t sub_1CC3A7C38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F260FD48;
  a2[1] = v2;
  return result;
}

void sub_1CC3A7C64(uint64_t a1, llvm::raw_ostream *a2)
{
}

void sub_1CC3A7C84()
{
}

__n128 sub_1CC3A7C98(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F260FD90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CC3A7CE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F260FD90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1CC3A7D14(uint64_t a1, llvm::raw_ostream *a2)
{
  int v4 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = *(void *)(**(void **)(a1 + 8) + 16);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 176))(v5);
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = operator new(0x28uLL);
  *(void *)int v8 = &unk_1F26154E0;
  v8[2] = v4;
  *((void *)v8 + 2) = v6;
  v8[6] = 0;
  *((void *)v8 + 4) = v7;
  off_1F2615510((llvm::raw_ostream *)v8, a2);
  (*(void (**)(_DWORD *))(*(void *)v8 + 40))(v8);
  uint64_t v9 = *(unsigned int *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    int v11 = (uint64_t *)((v9 & 0x80000000) != 0
                    ? *(void *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8
                    : *(void *)(v10 + 272) + 8 * v9);
    uint64_t v12 = *v11;
    if (v12)
    {
      if (*(unsigned char *)(v12 + 3) & 1) != 0 || (uint64_t v17 = *(void *)(v12 + 24)) != 0 && (*(unsigned char *)(v17 + 3))
      {
        if ((v9 & 0x80000000) != 0) {
          uint64_t v13 = (uint64_t *)(*(void *)(v10 + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v13 = (uint64_t *)(*(void *)(v10 + 272) + 8 * v9);
        }
        uint64_t v14 = *v13;
        if (v14)
        {
          if ((*(unsigned char *)(v14 + 3) & 1) == 0)
          {
            uint64_t v14 = *(void *)(v14 + 24);
            if (v14)
            {
              if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
                uint64_t v14 = 0;
              }
            }
          }
        }
        char v15 = *(llvm::MachineInstr **)(v14 + 8);
        while (1)
        {
          uint64_t v14 = *(void *)(v14 + 24);
          if (!v14 || (*(unsigned char *)(v14 + 3) & 1) == 0) {
            break;
          }
          if (*(llvm::MachineInstr **)(v14 + 8) != v15) {
            return;
          }
        }
        if (v15)
        {
          unint64_t v16 = (_WORD *)*((void *)a2 + 4);
          if (*((void *)a2 + 3) - (void)v16 > 1uLL)
          {
            _WORD *v16 = 8250;
            *((void *)a2 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(a2, ": ", 2uLL);
          }
          llvm::MachineInstr::print(v15, a2, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
        }
      }
    }
  }
}

void *llvm::MachineSSAUpdater::MachineSSAUpdater(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[2] = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v6 = *(void *)(a2 + 40);
  a1[3] = v5;
  a1[4] = v6;
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[2] = a3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v6 = *(void *)(a2 + 40);
  a1[3] = v5;
  a1[4] = v6;
  return a1;
}

uint64_t llvm::MachineSSAUpdater::HasValueForBlock(uint64_t **this, llvm::MachineBasicBlock *a2)
{
  return sub_1CD40EA84(**this, *((_DWORD *)*this + 4), (uint64_t)a2, &v3);
}

uint64_t llvm::MachineSSAUpdater::GetValueAtEndOfBlock(llvm::MachineSSAUpdater *this, llvm::MachineBasicBlock *a2)
{
  return llvm::MachineSSAUpdater::GetValueAtEndOfBlockInternal(this, a2, 0);
}

llvm::MachineFunction *sub_1CC3A7FD8(unsigned int a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a5, "", 0);
  *(void *)(*(void *)(a5 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a4 & 0xFFFFFFFFFFFFFFFBLL;
  uint64_t v13 = *(void *)(a5 + 8);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
  }
  uint64_t v14 = *(void *)(a6 + 8) + 48 * a1;
  char v15 = *(llvm::MachineFunction **)(a2 + 32);
  char v34 = 0;
  unint64_t v16 = llvm::MachineFunction::CreateMachineInstr(v15, v14, &v34, 0);
  if (v34)
  {
    int v30 = *v34;
    if ((v30 - 4) > 0x1E)
    {
      if ((v30 - 3) >= 0xFFFFFFFE) {
        unint64_t v33 = v34;
      }
      else {
        unint64_t v33 = 0;
      }
      if ((v30 - 3) < 0xFFFFFFFE)
      {
        if (v30 == 3) {
          *((void *)v34 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v32 = (unint64_t)(v33 + 8);
    }
    else
    {
      if ((v34[1] & 0x7F) != 2 && !*((_DWORD *)v34 + 3)) {
        goto LABEL_4;
      }
      uint64_t v31 = *((void *)v34 + 2);
      if ((v31 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v32) {
        goto LABEL_4;
      }
    }
    v35[0] = &v34;
    sub_1CC5FA668(v32 + 16, v35);
  }
LABEL_4:
  uint64_t v17 = *(void *)(a2 + 40);
  *((void *)v16 + 3) = v17;
  uint64_t v18 = *(void *)(v17 + 32);
  uint64_t v19 = *((unsigned int *)v16 + 10);
  if (v19)
  {
    uint64_t v23 = *((void *)v16 + 4);
    uint64_t v24 = *(void *)(v18 + 40);
    uint64_t v25 = 32 * v19;
    do
    {
      if (!*(unsigned char *)v23)
      {
        uint64_t v26 = *(unsigned int *)(v23 + 4);
        if ((int)v26 >= 0) {
          int v27 = (uint64_t *)(*(void *)(v24 + 272) + 8 * v26);
        }
        else {
          int v27 = (uint64_t *)(*(void *)(v24 + 24) + 16 * (v26 & 0x7FFFFFFF) + 8);
        }
        uint64_t v28 = *v27;
        if (*v27)
        {
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + 16) = v23;
          *(void *)(v23 + 16) = v29;
          if (*(unsigned char *)(v23 + 3))
          {
            *(void *)(v23 + 24) = v28;
          }
          else
          {
            *(void *)(v23 + 24) = 0;
            int v27 = (uint64_t *)(v29 + 24);
          }
        }
        else
        {
          *(void *)(v23 + 16) = v23;
          *(void *)(v23 + 24) = 0;
        }
        uint64_t *v27 = v23;
      }
      v23 += 32;
      v25 -= 32;
    }
    while (v25);
  }
  uint64_t v20 = *(void *)(v18 + 728);
  if (v20) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v20 + 24))(v20, v16);
  }
  unint64_t v21 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v16 = v21 | *(void *)v16 & 7;
  *((void *)v16 + 1) = a3;
  *(void *)(v21 + 8) = v16;
  *a3 = *a3 & 7 | (unint64_t)v16;
  memset(&v35[1], 0, 24);
  LODWORD(v35[0]) = 0x1000000;
  HIDWORD(v35[0]) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)v35);
  return v15;
}

uint64_t sub_1CC3A8248(uint64_t result, unsigned int a2)
{
  if (a2)
  {
    int v2 = 0;
    uint64_t v3 = result + 8 * a2;
    uint64_t v4 = v3;
    do
    {
      while (1)
      {
        uint64_t v6 = *(void *)(v4 - 8);
        v4 -= 8;
        uint64_t v5 = v6;
        uint64_t v7 = *(void *)(v6 + 16);
        if (v7 == v6) {
          break;
        }
        uint64_t v8 = *(void *)(v5 + 32);
        uint64_t v9 = *(void *)(v8 + 16);
        uint64_t v10 = *(unsigned int *)(v5 + 40);
        if (v10)
        {
          uint64_t v11 = 0;
          while (2)
          {
            for (uint64_t i = *(void *)(*(void *)(v5 + 48) + 8 * v11); i != v8; uint64_t i = *(void *)(i + 32))
            {
              if (*(void *)(i + 16) == i)
              {
                uint64_t v9 = v5;
                goto LABEL_13;
              }
            }
            if (++v11 != v10) {
              continue;
            }
            break;
          }
        }
LABEL_13:
        if (v9 == v7) {
          break;
        }
        *(void *)(v5 + 16) = v9;
        int v2 = v4 != result;
        if (v4 == result) {
          uint64_t v4 = v3;
        }
      }
      BOOL v13 = v4 != result;
      char v14 = v13 | v2;
      v2 &= v13;
      if (v4 == result) {
        uint64_t v4 = v3;
      }
    }
    while ((v14 & 1) != 0);
  }
  return result;
}

void sub_1CC3A82EC()
{
}

void sub_1CC3A8388()
{
}

void sub_1CC3A83F4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3A842C(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineModuleInfoWrapperPass::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CC3A84B0(uint64_t a1, llvm::Module **this)
{
  if (*(unsigned char *)(a1 + 28)
    && (v55[0] = "llvm.debugify", __int16 v56 = 259, !llvm::Module::getNamedMetadata((llvm::Module *)this, v55)))
  {
    char v47 = 0;
  }
  else
  {
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1];
    if (v5 == v6)
    {
LABEL_6:
      uint64_t v7 = 0;
    }
    else
    {
      while (*(_UNKNOWN **)v5 != &llvm::MachineModuleInfoWrapperPass::ID)
      {
        v5 += 16;
        if (v5 == v6) {
          goto LABEL_6;
        }
      }
      uint64_t v7 = *(void *)(v5 + 8);
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::MachineModuleInfoWrapperPass::ID);
    unint64_t v49 = (llvm::Module *)this;
    uint64_t v10 = this[4];
    int v51 = (llvm::Module *)(this + 3);
    if (v10 != (llvm::Module *)(this + 3))
    {
      char v11 = 0;
      uint64_t v50 = (llvm::MachineModuleInfo *)(v8 + 32);
      while (1)
      {
        uint64_t v52 = v10;
        uint64_t v12 = v10 ? (const Function *)((char *)v10 - 56) : 0;
        uint64_t MachineFunction = llvm::MachineModuleInfo::getMachineFunction(v50, v12);
        if (MachineFunction)
        {
          char v14 = *(void **)(MachineFunction + 328);
          uint64_t v53 = (void *)(MachineFunction + 320);
          if (v14 != (void *)(MachineFunction + 320)) {
            break;
          }
        }
LABEL_75:
        uint64_t v10 = (llvm::Module *)*((void *)v52 + 1);
        if (v10 == v51) {
          goto LABEL_78;
        }
      }
      while (1)
      {
        char v15 = (void *)v14[7];
        if (v15 != v14 + 6) {
          break;
        }
LABEL_74:
        char v14 = (void *)v14[1];
        if (v14 == v53) {
          goto LABEL_75;
        }
      }
      while (1)
      {
        if (!v15 || (unint64_t v16 = v15, (*(unsigned char *)v15 & 4) == 0))
        {
          unint64_t v16 = v15;
          if ((*((_WORD *)v15 + 22) & 8) != 0)
          {
            unint64_t v16 = v15;
            do
              unint64_t v16 = (void *)v16[1];
            while ((*((_WORD *)v16 + 22) & 8) != 0);
          }
        }
        uint64_t v17 = (void *)v16[1];
        if (*(unsigned __int16 *)v15[2] - 13 <= 4 && *((_DWORD *)v15 + 10) >= 2u) {
          break;
        }
        unint64_t v42 = (unsigned __int8 *)v15[7];
        unint64_t v41 = (char *)(v15 + 7);
        int v40 = v42;
        if (v42)
        {
          unsigned int v54 = 0;
          if (&v54 != (unsigned __int8 **)v41)
          {
            int v43 = *v40;
            if ((v43 - 4) > 0x1E)
            {
              if ((v43 - 3) >= 0xFFFFFFFE) {
                unsigned int v44 = v40;
              }
              else {
                unsigned int v44 = 0;
              }
              if ((v43 - 3) > 0xFFFFFFFD)
              {
                unint64_t v45 = (unint64_t)(v44 + 8);
LABEL_63:
                v55[0] = v41;
                sub_1CC5FA668(v45 + 16, v55);
                uint64_t v9 = v54;
                *(void *)unint64_t v41 = v54;
                if (v9)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v54, v9, (uint64_t)v41);
                  unsigned int v54 = 0;
                }
                char v11 = 1;
                goto LABEL_56;
              }
              if (v43 == 3) {
                *((void *)v40 + 1) = 0;
              }
            }
            else if ((v40[1] & 0x7F) == 2 || *((_DWORD *)v40 + 3))
            {
              uint64_t v46 = *((void *)v40 + 2);
              if ((v46 & 4) != 0)
              {
                unint64_t v45 = v46 & 0xFFFFFFFFFFFFFFF8;
                if (v45) {
                  goto LABEL_63;
                }
              }
            }
            *(void *)unint64_t v41 = 0;
          }
LABEL_55:
          char v11 = 1;
        }
LABEL_56:
        char v15 = v17;
        if (v17 == v14 + 6) {
          goto LABEL_74;
        }
      }
      uint64_t v18 = v15;
      if ((*(unsigned char *)v15 & 4) == 0)
      {
        uint64_t v18 = v15;
        if ((*((_WORD *)v15 + 22) & 8) != 0)
        {
          uint64_t v18 = v15;
          do
            uint64_t v18 = (void *)v18[1];
          while ((*((_WORD *)v18 + 22) & 8) != 0);
        }
      }
      uint64_t v19 = (void *)v18[1];
      if (v19 != v15)
      {
        do
        {
          uint64_t v20 = (void *)v15[1];
          uint64_t v21 = *(void *)(v15[3] + 32);
          if (v21)
          {
            uint64_t v22 = *(void *)(v21 + 728);
            if (v22) {
              (*(void (**)(uint64_t, void *))(*(void *)v22 + 32))(v22, v15);
            }
            uint64_t v23 = *((unsigned int *)v15 + 10);
            if (v23)
            {
              uint64_t v24 = v15[4];
              uint64_t v25 = *(void *)(v21 + 40);
              uint64_t v26 = 32 * v23;
              do
              {
                if (!*(unsigned char *)v24)
                {
                  uint64_t v27 = *(unsigned int *)(v24 + 4);
                  if ((v27 & 0x80000000) != 0) {
                    uint64_t v28 = (uint64_t *)(*(void *)(v25 + 24) + 16 * (v27 & 0x7FFFFFFF) + 8);
                  }
                  else {
                    uint64_t v28 = (uint64_t *)(*(void *)(v25 + 272) + 8 * v27);
                  }
                  uint64_t v29 = *v28;
                  uint64_t v31 = *(void *)(v24 + 16);
                  uint64_t v30 = *(void *)(v24 + 24);
                  if (v24 != *v28) {
                    uint64_t v28 = (uint64_t *)(v31 + 24);
                  }
                  *uint64_t v28 = v30;
                  if (v30) {
                    uint64_t v32 = v30;
                  }
                  else {
                    uint64_t v32 = v29;
                  }
                  *(void *)(v32 + 16) = v31;
                  *(void *)(v24 + 16) = 0;
                  *(void *)(v24 + 24) = 0;
                }
                v24 += 32;
                v26 -= 32;
              }
              while (v26);
            }
          }
          void v15[3] = 0;
          unint64_t v33 = (unint64_t *)v15[1];
          unint64_t v34 = *v15 & 0xFFFFFFFFFFFFFFF8;
          *unint64_t v33 = v34 | *v33 & 7;
          *(void *)(v34 + 8) = v33;
          *v15 &= 7uLL;
          v15[1] = 0;
          uint64_t v35 = *(void *)(v14[5] + 32);
          unint64_t v36 = (void *)v15[4];
          if (v36)
          {
            uint64_t v37 = *((unsigned __int8 *)v15 + 47);
            uint64_t v38 = (uint64_t *)(v35 + 232);
            if (*(_DWORD *)(v35 + 240) <= v37) {
              sub_1CC34BDE0(v35 + 232, v37 + 1);
            }
            uint64_t v39 = *v38;
            *unint64_t v36 = *(void *)(*v38 + 8 * v37);
            *(void *)(v39 + 8 * v37) = v36;
          }
          *char v15 = *(void *)(v35 + 224);
          *(void *)(v35 + 224) = v15;
          char v11 = 1;
          char v15 = v20;
        }
        while (v20 != v19);
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    char v11 = 0;
LABEL_78:
    char v47 = v11 | llvm::stripDebugifyMetadata(v49, (llvm::Module *)v9);
  }
  return v47 & 1;
}

uint64_t sub_1CC3A88D4()
{
  *(void *)&long long v3 = "Should mir-strip-debug only strip debug info from debugified modules by default";
  *((void *)&v3 + 1) = 79;
  char v1 = 1;
  int v2 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCD0AC8, "mir-strip-debugify-only", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD0AC8, &dword_1CB82C000);
}

void sub_1CC3A8958(llvm *a1, llvm::PassRegistry *a2)
{
}

uint64_t llvm::MachineTraceMetrics::getProcResourceCycles(llvm::MachineTraceMetrics *this, int a2)
{
  return *((void *)this + 77) + 4 * (*((_DWORD *)this + 84) * a2);
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getLoopFor(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 54) + 280);
  int v3 = *(_DWORD *)(v2 + 264);
  if (v3)
  {
    uint64_t v4 = *(void *)(v2 + 248);
    unsigned int v5 = v3 - 1;
    uint64_t v6 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v7 = *(const llvm::MachineBasicBlock **)(v4 + 16 * v6);
    if (v7 == a2) {
      return *(void *)(v4 + 16 * v6 + 8);
    }
    int v8 = 1;
    while (v7 != (const llvm::MachineBasicBlock *)-4096)
    {
      int v9 = v6 + v8++;
      uint64_t v6 = v9 & v5;
      uint64_t v7 = *(const llvm::MachineBasicBlock **)(v4 + 16 * v6);
      if (v7 == a2) {
        return *(void *)(v4 + 16 * v6 + 8);
      }
    }
  }
  return 0;
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getProcResourceDepths(llvm::MachineTraceMetrics::Ensemble *this, int a2)
{
  return *((void *)this + 50) + 4 * (*(_DWORD *)(*((void *)this + 54) + 336) * a2);
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getProcResourceHeights(llvm::MachineTraceMetrics::Ensemble *this, int a2)
{
  return *((void *)this + 52) + 4 * (*(_DWORD *)(*((void *)this + 54) + 336) * a2);
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getDepthResources(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  if (*(_DWORD *)(*((void *)this + 1) + 88 * *((int *)a2 + 6) + 24) == -1) {
    return 0;
  }
  else {
    return *((void *)this + 1) + 88 * *((int *)a2 + 6);
  }
}

uint64_t llvm::MachineTraceMetrics::Ensemble::getHeightResources(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  if (*(_DWORD *)(*((void *)this + 1) + 88 * *((int *)a2 + 6) + 28) == -1) {
    return 0;
  }
  else {
    return *((void *)this + 1) + 88 * *((int *)a2 + 6);
  }
}

uint64_t llvm::MachineTraceMetrics::Ensemble::computeCrossBlockCriticalPath(void *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 48);
  if (v2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 47;
    uint64_t v7 = 8 * v2;
    for (uint64_t i = (int *)(*(void *)(a2 + 40) + 4); ; i += 2)
    {
      int v9 = *(i - 1);
      if (v9 < 0) {
        break;
      }
LABEL_4:
      v7 -= 8;
      if (!v7) {
        return v5;
      }
    }
    uint64_t v20 = 0;
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1[54] + 272) + 24) + 16 * (v9 & 0x7FFFFFFF) + 8);
    if (v10)
    {
      if ((*(unsigned char *)(v10 + 3) & 1) == 0)
      {
        uint64_t v10 = *(void *)(v10 + 24);
        if (!v10) {
          goto LABEL_9;
        }
        if ((*(unsigned char *)(v10 + 3) & 1) == 0)
        {
          uint64_t v10 = 0;
          goto LABEL_9;
        }
      }
      uint64_t v10 = *(void *)(v10 + 8);
    }
LABEL_9:
    uint64_t v20 = v10;
    int v11 = *(_DWORD *)(*(void *)(v10 + 24) + 24);
    uint64_t v12 = a1[1];
    unsigned int v13 = *(_DWORD *)(v12 + 88 * v11 + 24);
    if (v13 != -1)
    {
      unsigned int v14 = *(_DWORD *)(a2 + 24);
      if (v14 != -1 && *(_DWORD *)(v12 + 88 * v11 + 16) == *(_DWORD *)(a2 + 16))
      {
        int v15 = *(unsigned __int8 *)(v12 + 88 * v11 + 32);
        if (v13 <= v14 && v15 != 0)
        {
          int v17 = *i;
          unsigned int v18 = *((_DWORD *)sub_1CD550B40(v6, &v20) + 2) + v17;
          if (v5 <= v18) {
            uint64_t v5 = v18;
          }
          else {
            uint64_t v5 = v5;
          }
        }
      }
    }
    goto LABEL_4;
  }
  return 0;
}

void llvm::MachineTraceMetrics::Ensemble::updateDepth(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v91[4] = *MEMORY[0x1E4F143B8];
  int v83 = v85;
  uint64_t v84 = 0x800000000;
  int v6 = **(unsigned __int16 **)(a3 + 16);
  if (v6 == 69 || v6 == 0)
  {
    sub_1CC3A9324(a3, (uint64_t)&v83, *(void *)a2, *(void *)(a1[54] + 272));
    goto LABEL_7;
  }
  if (sub_1CC3A9430(a3, (uint64_t)&v83, *(void *)(a1[54] + 272)))
  {
    uint64_t v28 = *(void *)(a1[54] + 264);
    uint64_t v89 = (const llvm::MachineInstr *)v91;
    uint64_t v90 = 0x800000000;
    unsigned int v86 = (unsigned int *)v88;
    uint64_t v87 = 0x800000000;
    uint64_t v29 = a3;
    uint64_t v30 = *(unsigned int *)(a3 + 40);
    if (!v30) {
      goto LABEL_88;
    }
    uint64_t v31 = *(unsigned int **)(a3 + 32);
    uint64_t v32 = &v31[8 * v30];
    if (v28) {
      unint64_t v33 = (void *)(v28 + 8);
    }
    else {
      unint64_t v33 = 0;
    }
    while (1)
    {
      unsigned int v34 = *v31;
      if (!*v31)
      {
        unsigned int v35 = v31[1];
        if (v35 - 1 <= 0x3FFFFFFE) {
          break;
        }
      }
LABEL_69:
      v31 += 8;
      if (v31 == v32)
      {
        if (v90)
        {
          uint64_t v52 = (char *)v89;
          uint64_t v53 = (char *)v89 + 4 * v90;
          unsigned int v54 = *(_DWORD *)(a4 + 8);
          do
          {
            unint64_t v55 = *(unsigned int *)(*v33 + 24 * *(unsigned int *)v52 + 16);
            __int16 v56 = v55 & 0xF;
            uint64_t v57 = (_WORD *)(v33[6] + ((v55 >> 3) & 0x1FFFFFFE));
            unsigned __int16 v58 = *v57 + v56 * *(_DWORD *)v52;
            do
            {
              int v59 = v58;
              unsigned int v60 = *(unsigned __int8 *)(*(void *)(a4 + 208) + v58);
              uint64_t v61 = *(void *)a4;
              if (v54 <= v60)
              {
LABEL_80:
                unsigned int v63 = v54;
                __int16 v62 = (_DWORD *)(v61 + 24 * v54);
              }
              else
              {
                while (1)
                {
                  __int16 v62 = (_DWORD *)(v61 + 24 * v60);
                  if (*v62 == v59) {
                    break;
                  }
                  v60 += 256;
                  if (v60 >= v54) {
                    goto LABEL_80;
                  }
                }
                unsigned int v63 = v54;
              }
              uint64_t v64 = (_DWORD *)(v61 + 24 * v63);
              if (v62 != v64)
              {
                unint64_t v65 = v64 - 6;
                if (v65 != v62)
                {
                  long long v66 = *(_OWORD *)v65;
                  v62[4] = v65[4];
                  *(_OWORD *)__int16 v62 = v66;
                  *(unsigned char *)(*(void *)(a4 + 208)
                           + *(unsigned int *)(*(void *)a4 + 24 * *(unsigned int *)(a4 + 8) - 24)) = -85 * ((v62 - *(void *)a4) >> 3);
                  unsigned int v54 = *(_DWORD *)(a4 + 8);
                }
                *(_DWORD *)(a4 + 8) = --v54;
              }
              int v67 = (unsigned __int16)v57[1];
              ++v57;
              unsigned __int16 v58 = v67 + v59;
            }
            while (v67);
            v52 += 4;
          }
          while (v52 != v53);
        }
LABEL_88:
        uint64_t v68 = v86;
        if (v87)
        {
          uint64_t v69 = &v86[v87];
          if (v28) {
            uint64_t v70 = (void *)(v28 + 8);
          }
          else {
            uint64_t v70 = 0;
          }
          do
          {
            uint64_t v71 = *v68;
            unsigned int v72 = *(_DWORD *)(*(void *)(v29 + 32) + 32 * v71 + 4);
            int v73 = (unsigned __int16 *)(v70[6]
                                     + (((unint64_t)*(unsigned int *)(*v70 + 24 * v72 + 16) >> 3) & 0x1FFFFFFE));
            int v75 = *v73;
            int v74 = v73 + 1;
            int v76 = v75 + (*(_DWORD *)(*v70 + 24 * v72 + 16) & 0xF) * v72;
            do
            {
              unsigned int v80 = (unsigned __int16)v76;
              uint64_t v81 = 0;
              uint64_t v82 = 0;
              uint64_t v77 = sub_1CD550A88(a4, &v80);
              uint64_t v29 = a3;
              *((void *)v77 + 1) = a3;
              v77[4] = v71;
              int v78 = *v74++;
              v76 += v78;
            }
            while (v78);
            ++v68;
          }
          while (v68 != v69);
          uint64_t v68 = v86;
        }
        if (v68 != (unsigned int *)v88) {
          free(v68);
        }
        if (v89 != (const llvm::MachineInstr *)v91) {
          free(v89);
        }
        goto LABEL_7;
      }
    }
    if ((v34 & 0x1000000) != 0)
    {
      if ((~v34 & 0x5000000) != 0)
      {
        if (v87 >= (unint64_t)HIDWORD(v87)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v86[v87] = ((unint64_t)v31 - *(void *)(a3 + 32)) >> 5;
        unint64_t v36 = &v87;
        goto LABEL_56;
      }
    }
    else if (((v34 >> 26) & ~HIBYTE(v34) & 1) == 0)
    {
      goto LABEL_57;
    }
    if (v90 >= (unint64_t)HIDWORD(v90)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_DWORD *)v89 + v90) = v35;
    unint64_t v36 = &v90;
LABEL_56:
    ++*(_DWORD *)v36;
    unsigned int v34 = *v31;
LABEL_57:
    if ((v34 & 0x30000000) == 0 && (v34 & 0x10FFF00) != 0x1000000)
    {
      unint64_t v37 = *(unsigned int *)(*v33 + 24 * v35 + 16);
      __int16 v38 = v37 & 0xF;
      uint64_t v39 = (_WORD *)(v33[6] + ((v37 >> 3) & 0x1FFFFFFE));
      unsigned __int16 v40 = *v39 + v38 * v35;
      unsigned int v41 = *(_DWORD *)(a4 + 8);
      uint64_t v42 = *(void *)a4;
      while (1)
      {
        int v43 = v40;
        unsigned int v44 = *(unsigned __int8 *)(*(void *)(a4 + 208) + v40);
        if (v41 > v44)
        {
          while (1)
          {
            unsigned int v45 = v44;
            if (*(_DWORD *)(v42 + 24 * v44) == v43) {
              break;
            }
            v44 += 256;
            if (v45 + 256 >= v41) {
              goto LABEL_65;
            }
          }
          if (v41 != v44) {
            break;
          }
        }
LABEL_65:
        int v46 = (unsigned __int16)v39[1];
        ++v39;
        unsigned __int16 v40 = v46 + v43;
        if (!v46) {
          goto LABEL_69;
        }
      }
      uint64_t v47 = v42 + 24 * v44;
      uint64_t v48 = *(void *)(v47 + 8);
      uint64_t v49 = *(unsigned int *)(v47 + 16);
      uint64_t v50 = *(void *)(a3 + 32);
      if (v84 >= (unint64_t)HIDWORD(v84)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v51 = (char *)v83 + 16 * v84;
      *int v51 = v48;
      v51[1] = v49 | (((void)v31 - v50) << 27);
      LODWORD(v84) = v84 + 1;
    }
    goto LABEL_69;
  }
LABEL_7:
  if (v84)
  {
    unsigned int v8 = 0;
    uint64_t v12 = (const llvm::MachineInstr **)v83;
    uint64_t v13 = 16 * v84;
    int v9 = (const llvm::MachineInstr *)a3;
    do
    {
      int v14 = *(_DWORD *)(*((void *)*v12 + 3) + 24);
      uint64_t v15 = a1[1];
      unsigned int v16 = *(_DWORD *)(v15 + 88 * v14 + 24);
      if (v16 != -1)
      {
        unsigned int v17 = *(_DWORD *)(a2 + 24);
        if (v17 != -1 && *(_DWORD *)(v15 + 88 * v14 + 16) == *(_DWORD *)(a2 + 16))
        {
          int v18 = *(unsigned __int8 *)(v15 + 88 * v14 + 32);
          if (v16 <= v17 && v18 != 0)
          {
            uint64_t v89 = *v12;
            unsigned int v86 = 0;
            int v20 = sub_1CD3C8538(a1 + 47, &v89, &v86);
            LODWORD(v21) = 0;
            if (v20) {
              uint64_t v21 = *((void *)v86 + 1);
            }
            uint64_t v22 = (unsigned __int16 *)*((void *)*v12 + 2);
            int v23 = *v22;
            BOOL v25 = (v23 - 9) <= 0x3C && ((1 << (v23 - 9)) & 0x1000000000000605) != 0
               || v23 == 0;
            if (v25 || (v22[4] & 0x10) != 0)
            {
              int v9 = (const llvm::MachineInstr *)a3;
            }
            else
            {
              int v9 = (const llvm::MachineInstr *)a3;
              LODWORD(v21) = llvm::TargetSchedModel::computeOperandLatency((llvm::TargetSchedModel *)(a1[54] + 288), *v12, *((unsigned int *)v12 + 2), (const llvm::MachineInstr *)a3, *((unsigned int *)v12 + 3))+ v21;
            }
            if (v8 <= v21) {
              unsigned int v8 = v21;
            }
          }
        }
      }
      v12 += 2;
      v13 -= 16;
    }
    while (v13);
  }
  else
  {
    unsigned int v8 = 0;
    int v9 = (const llvm::MachineInstr *)a3;
  }
  uint64_t v89 = v9;
  uint64_t v10 = sub_1CD550B40(a1 + 47, &v89);
  *((_DWORD *)v10 + 2) = v8;
  if (*(unsigned char *)(a2 + 33))
  {
    unsigned int v11 = *((_DWORD *)v10 + 3) + v8;
    if (*(_DWORD *)(a2 + 36) > v11) {
      unsigned int v11 = *(_DWORD *)(a2 + 36);
    }
    *(_DWORD *)(a2 + 36) = v11;
  }
  if (v83 != v85) {
    free(v83);
  }
}

{
  llvm::MachineTraceMetrics::Ensemble::updateDepth(a1, a1[1] + 88 * *(int *)(a2 + 24), a3, a4);
}

uint64_t sub_1CC3A9324(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    int v4 = *(_DWORD *)(result + 40);
    if (v4 != 1)
    {
      uint64_t v5 = *(void *)(result + 32);
      unsigned int v6 = 1;
      while (*(void *)(v5 + 32 * (v6 + 1) + 16) != a3)
      {
        v6 += 2;
        if (v4 == v6) {
          return result;
        }
      }
      uint64_t v7 = v6;
      uint64_t v8 = *(unsigned int *)(v5 + 32 * v6 + 4);
      if ((v8 & 0x80000000) != 0) {
        uint64_t v9 = *(void *)(a4 + 24) + 16 * (v8 & 0x7FFFFFFF) + 8;
      }
      else {
        uint64_t v9 = *(void *)(a4 + 272) + 8 * v8;
      }
      uint64_t v10 = *(void *)v9;
      if ((*(unsigned char *)(*(void *)v9 + 3) & 1) == 0)
      {
        if (*(unsigned char *)(*(void *)(v10 + 24) + 3)) {
          uint64_t v10 = *(void *)(v10 + 24);
        }
        else {
          uint64_t v10 = 0;
        }
      }
      uint64_t v11 = *(void *)(v10 + 8);
      uint64_t v12 = (v7 << 32) | ((unint64_t)(v10 - *(void *)(v11 + 32)) >> 5);
      unsigned int v13 = *(_DWORD *)(a2 + 8);
      if (v13 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v14 = (void *)(*(void *)a2 + 16 * v13);
      void *v14 = v11;
      v14[1] = v12;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  return result;
}

uint64_t sub_1CC3A9430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (**(unsigned __int16 **)(a1 + 16) - 13 >= 5 && (uint64_t v3 = *(unsigned int *)(a1 + 40), v3))
  {
    char v4 = 0;
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = 32 * v3;
    uint64_t v7 = v5 << 27;
    uint64_t v8 = (unsigned int *)(v5 + 4);
    do
    {
      int v9 = *(v8 - 1);
      if (!(_BYTE)v9)
      {
        uint64_t v10 = *v8;
        if (v10)
        {
          if (v10 >> 30)
          {
            int v11 = v9 & 0x30000000;
            int v12 = v9 & 0x10FFF00;
            if (v11) {
              BOOL v13 = 1;
            }
            else {
              BOOL v13 = v12 == 0x1000000;
            }
            if (!v13)
            {
              if ((v10 & 0x80000000) != 0) {
                uint64_t v14 = *(void *)(a3 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8;
              }
              else {
                uint64_t v14 = *(void *)(a3 + 272) + 8 * v10;
              }
              uint64_t v15 = *(void *)v14;
              if ((*(unsigned char *)(*(void *)v14 + 3) & 1) == 0)
              {
                if (*(unsigned char *)(*(void *)(v15 + 24) + 3)) {
                  uint64_t v15 = *(void *)(v15 + 24);
                }
                else {
                  uint64_t v15 = 0;
                }
              }
              uint64_t v16 = *(void *)(a1 + 32);
              uint64_t v17 = *(void *)(v15 + 8);
              uint64_t v18 = *(void *)(v17 + 32);
              unint64_t v19 = *(unsigned int *)(a2 + 8);
              if (v19 >= *(unsigned int *)(a2 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v20 = (void *)(*(void *)a2 + 16 * v19);
              *int v20 = v17;
              v20[1] = ((unint64_t)(v15 - v18) >> 5) | (unint64_t)(v7 - (v16 << 27));
              ++*(_DWORD *)(a2 + 8);
            }
          }
          else
          {
            char v4 = 1;
          }
        }
      }
      v7 += 0x100000000;
      v8 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

void llvm::MachineTraceMetrics::Ensemble::computeInstrDepths(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  unsigned int v4 = 0;
  v19[8] = *MEMORY[0x1E4F143B8];
  uint64_t v17 = v19;
  uint64_t v18 = 0x800000000;
  do
  {
    uint64_t v5 = *((void *)this + 1) + 88 * *((int *)a2 + 6);
    if (*(unsigned char *)(v5 + 32)) {
      break;
    }
    if (v4 >= HIDWORD(v18)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v17[v4] = a2;
    unsigned int v4 = v18 + 1;
    LODWORD(v18) = v18 + 1;
    a2 = *(const llvm::MachineBasicBlock **)v5;
  }
  while (*(void *)v5);
  v13[0] = v14;
  v13[1] = (void *)0x800000000;
  uint64_t v15 = 0;
  int v16 = 0;
  uint64_t v6 = *(void *)(*((void *)this + 54) + 264);
  int v7 = *(_DWORD *)(v6 + 44);
  if (!v7)
  {
    uint64_t v8 = 0;
    if (!v4) {
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  uint64_t v8 = malloc_type_calloc(*(unsigned int *)(v6 + 44), 1uLL, 0x6D9A4F0CuLL);
  if (!v8) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v15 = v8;
  int v16 = v7;
  unsigned int v4 = v18;
  if (v18)
  {
    do
    {
LABEL_12:
      uint64_t v9 = v17[v4 - 1];
      LODWORD(v18) = v4 - 1;
      uint64_t v10 = *((void *)this + 1) + 88 * *(int *)(v9 + 24);
      *(unsigned char *)(v10 + 32) = 1;
      *(_DWORD *)(v10 + 36) = 0;
      if (*(unsigned char *)(v10 + 33)) {
        *(_DWORD *)(v10 + 36) = llvm::MachineTraceMetrics::Ensemble::computeCrossBlockCriticalPath(this, v10);
      }
      uint64_t v11 = v9 + 48;
      for (uint64_t i = *(void *)(v9 + 56); i != v11; uint64_t i = *(void *)(i + 8))
      {
        llvm::MachineTraceMetrics::Ensemble::updateDepth(this, v10, i, (uint64_t)v13);
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      unsigned int v4 = v18;
    }
    while (v18);
    uint64_t v8 = v15;
  }
LABEL_22:
  free(v8);
  if (v13[0] != v14) {
    free(v13[0]);
  }
  if (v17 != v19) {
    free(v17);
  }
}

void llvm::MachineTraceMetrics::Ensemble::computeInstrHeights(llvm::MachineTraceMetrics::Ensemble *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v3 = this;
  v145[4] = *MEMORY[0x1E4F143B8];
  int64_t v140 = v142;
  uint64_t v141 = 0x800000000;
  do
  {
    int v4 = *((_DWORD *)a2 + 6);
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = v5 + 88 * v4;
    int v7 = *(unsigned __int8 *)(v6 + 33);
    if (*(unsigned char *)(v6 + 33)) {
      break;
    }
    if (v141 >= (unint64_t)HIDWORD(v141)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v140[v141] = a2;
    LODWORD(v141) = v141 + 1;
    uint64_t v8 = v5 + 88 * v4;
    *(_DWORD *)(v8 + 48) = 0;
    a2 = *(const llvm::MachineBasicBlock **)(v8 + 8);
  }
  while (a2);
  uint64_t v130 = 0;
  int32x2_t v131 = 0;
  int v132 = 0;
  uint64_t v135 = v137;
  uint64_t v136 = 0x800000000;
  unsigned __int16 v138 = 0;
  int v139 = 0;
  uint64_t v9 = *(void *)(*((void *)this + 54) + 264);
  int v10 = *(_DWORD *)(v9 + 44);
  if (v10)
  {
    uint64_t v11 = malloc_type_calloc(*(unsigned int *)(v9 + 44), 1uLL, 0x6D9A4F0CuLL);
    if (!v11) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    unsigned __int16 v138 = v11;
    int v139 = v10;
  }
  if (v7)
  {
    uint64_t v12 = *((void *)v3 + 1) + 88 * *((int *)a2 + 6);
    uint64_t v13 = *(unsigned int *)(v12 + 48);
    if (v13)
    {
      uint64_t v14 = *(_DWORD **)(v12 + 40);
      uint64_t v15 = &v14[2 * v13];
      while ((*v14 & 0x80000000) == 0)
      {
        int v26 = v14[1];
        LODWORD(v134[0]) = *v14;
        *(_OWORD *)((char *)v134 + 4) = 0uLL;
        sub_1CD550A88((uint64_t)&v135, (unsigned int *)v134)[1] = v26;
LABEL_34:
        v14 += 2;
        if (v14 == v15) {
          goto LABEL_41;
        }
      }
      uint64_t v16 = *(void *)(*(void *)(*(void *)(*((void *)v3 + 54) + 272) + 24) + 16 * (*v14 & 0x7FFFFFFF) + 8);
      if (v16)
      {
        if (*(unsigned char *)(v16 + 3))
        {
LABEL_16:
          uint64_t v16 = *(void *)(v16 + 8);
          goto LABEL_17;
        }
        uint64_t v16 = *(void *)(v16 + 24);
        if (v16)
        {
          if (*(unsigned char *)(v16 + 3)) {
            goto LABEL_16;
          }
          uint64_t v16 = 0;
        }
      }
LABEL_17:
      v134[0] = v16;
      if (v132)
      {
        unsigned int v17 = ((v16 >> 4) ^ (v16 >> 9)) & (v132 - 1);
        uint64_t v18 = (void *)(v130 + 16 * v17);
        uint64_t v19 = *v18;
        if (v16 == *v18) {
          goto LABEL_32;
        }
        int v20 = 0;
        int v21 = 1;
        while (v19 != -4096)
        {
          if (v20) {
            BOOL v22 = 0;
          }
          else {
            BOOL v22 = v19 == -8192;
          }
          if (v22) {
            int v20 = v18;
          }
          unsigned int v23 = v17 + v21++;
          unsigned int v17 = v23 & (v132 - 1);
          uint64_t v18 = (void *)(v130 + 16 * v17);
          uint64_t v19 = *v18;
          if (v16 == *v18) {
            goto LABEL_32;
          }
        }
        if (v20) {
          uint64_t v24 = v20;
        }
        else {
          uint64_t v24 = v18;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      uint64_t v18 = sub_1CBB268D8((uint64_t)&v130, (uint64_t)v134, v134, v24);
      *uint64_t v18 = v134[0];
      *((_DWORD *)v18 + 2) = 0;
LABEL_32:
      unsigned int v25 = v14[1];
      if (*((_DWORD *)v18 + 2) < v25) {
        *((_DWORD *)v18 + 2) = v25;
      }
      goto LABEL_34;
    }
  }
LABEL_41:
  v134[0] = (uint64_t)&v134[2];
  v134[1] = 0x800000000;
  unsigned int v27 = v141;
  if (!v141) {
    goto LABEL_189;
  }
  uint64_t v125 = (uint64_t *)((char *)v3 + 376);
  uint64_t v122 = v3;
  do
  {
    uint64_t v28 = v140[v27 - 1];
    uint64_t v127 = *((void *)v3 + 1);
    int v128 = *(_DWORD *)(v28 + 24);
    uint64_t v29 = v127 + 88 * v128;
    *(unsigned char *)(v29 + 33) = 1;
    *(_DWORD *)(v29 + 36) = 0;
    uint64_t v126 = (unsigned int *)(v29 + 36);
    uint64_t v32 = *(void *)(v29 + 8);
    uint64_t v31 = (void *)(v29 + 8);
    uint64_t v30 = v32;
    if (v32)
    {
LABEL_44:
      unint64_t v33 = (unsigned char *)(v30 + 48);
      for (uint64_t i = *(unsigned char **)(v30 + 56); i != v33; uint64_t i = (unsigned char *)*((void *)i + 1))
      {
        int v35 = **((unsigned __int16 **)i + 2);
        if (v35 != 69 && v35 != 0) {
          break;
        }
        LODWORD(v134[1]) = 0;
        sub_1CC3A9324((uint64_t)i, (uint64_t)v134, v28, *(void *)(*((void *)v3 + 54) + 272));
        if (LODWORD(v134[1]))
        {
          if (*v31)
          {
            uint64_t v143 = i;
            v133[0] = 0;
            int v38 = sub_1CD3C8538(v125, &v143, v133);
            unint64_t v39 = 0;
            if (v38) {
              unint64_t v39 = *(void *)(v133[0] + 8);
            }
            unint64_t v37 = HIDWORD(v39);
          }
          else
          {
            LODWORD(v37) = 0;
          }
          if (sub_1CC3AA334((unsigned int *)v134[0], (llvm::MachineInstr *)i, v37, (uint64_t)&v130, (llvm::TargetSchedModel *)(*((void *)v3 + 54) + 288)))
          {
            llvm::MachineTraceMetrics::Ensemble::addLiveIns((uint64_t)v3, *(void *)v134[0], *(_DWORD *)(v134[0] + 8), (uint64_t)v140, v141);
          }
        }
        if ((*i & 4) == 0)
        {
          while ((*((_WORD *)i + 22) & 8) != 0)
            uint64_t i = (unsigned char *)*((void *)i + 1);
        }
      }
      goto LABEL_75;
    }
    uint64_t v40 = *(void *)(*((void *)v3 + 54) + 280);
    int v41 = *(_DWORD *)(v40 + 264);
    if (!v41) {
      goto LABEL_75;
    }
    uint64_t v42 = *(void *)(v40 + 248);
    unsigned int v43 = v41 - 1;
    uint64_t v44 = (v41 - 1) & ((v28 >> 4) ^ (v28 >> 9));
    uint64_t v45 = *(void *)(v42 + 16 * v44);
    if (v28 == v45)
    {
LABEL_68:
      uint64_t v48 = *(void *)(v42 + 16 * v44 + 8);
      if (v48)
      {
        uint64_t v30 = **(void **)(v48 + 32);
        uint64_t v49 = *(void **)(v28 + 88);
        uint64_t v50 = *(void **)(v28 + 96);
        if (v49 != v50)
        {
          while (*v49 != v30)
          {
            if (++v49 == v50)
            {
              uint64_t v49 = *(void **)(v28 + 96);
              break;
            }
          }
        }
        if (v49 != v50 && v30) {
          goto LABEL_44;
        }
      }
    }
    else
    {
      int v46 = 1;
      while (v45 != -4096)
      {
        int v47 = v44 + v46++;
        uint64_t v44 = v47 & v43;
        uint64_t v45 = *(void *)(v42 + 16 * v44);
        if (v28 == v45) {
          goto LABEL_68;
        }
      }
    }
LABEL_75:
    unint64_t v51 = v28 + 48;
    uint64_t v52 = *(void *)(v28 + 56);
    if (v28 + 48 != v52)
    {
      uint64_t v53 = (unsigned char *)(v127 + 88 * v128 + 32);
      while (1)
      {
        unint64_t v51 = *(void *)v51 & 0xFFFFFFFFFFFFFFF8;
        if (!v51 || (*(unsigned char *)v51 & 4) == 0)
        {
          while ((*(_WORD *)(v51 + 44) & 4) != 0)
            unint64_t v51 = *(void *)v51 & 0xFFFFFFFFFFFFFFF8;
        }
        if (!v132) {
          goto LABEL_85;
        }
        LODWORD(v54) = ((v51 >> 4) ^ (v51 >> 9)) & (v132 - 1);
        unint64_t v55 = (uint64_t *)(v130 + 16 * v54);
        uint64_t v56 = *v55;
        if (v51 != *v55) {
          break;
        }
LABEL_84:
        if (v54 == v132) {
          goto LABEL_85;
        }
        unsigned int v57 = *((_DWORD *)v55 + 2);
        *unint64_t v55 = -8192;
        int32x2_t v131 = vadd_s32(v131, (int32x2_t)0x1FFFFFFFFLL);
LABEL_87:
        LODWORD(v134[1]) = 0;
        if (**(_WORD **)(v51 + 16) && **(_WORD **)(v51 + 16) != 69)
        {
          if (sub_1CC3A9430(v51, (uint64_t)v134, *(void *)(*((void *)v3 + 54) + 272)))
          {
            uint64_t v58 = *((void *)v3 + 54);
            uint64_t v59 = *(void *)(v58 + 264);
            uint64_t v143 = v145;
            uint64_t v144 = 0x800000000;
            uint64_t v60 = *(unsigned int *)(v51 + 40);
            if (v60)
            {
              uint64_t v123 = v53;
              uint64_t v124 = v52;
              uint64_t v129 = (llvm::TargetSchedModel *)(v58 + 288);
              uint64_t v61 = *(int **)(v51 + 32);
              __int16 v62 = &v61[8 * v60];
              if (v59) {
                unsigned int v63 = (void *)(v59 + 8);
              }
              else {
                unsigned int v63 = 0;
              }
              do
              {
                int v64 = *v61;
                if (!*v61)
                {
                  unsigned int v65 = v61[1];
                  if (v65 - 1 <= 0x3FFFFFFE)
                  {
                    if ((v64 & 0x30000000) == 0 && (v64 & 0x10FFF00) != 0x1000000)
                    {
                      if (v144 >= (unint64_t)HIDWORD(v144)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      v143[v144] = ((unint64_t)v61 - *(void *)(v51 + 32)) >> 5;
                      LODWORD(v144) = v144 + 1;
                      int v64 = *v61;
                    }
                    if ((v64 & 0x1000000) != 0)
                    {
                      unint64_t v67 = *(unsigned int *)(*v63 + 24 * v65 + 16);
                      uint64_t v68 = (_WORD *)(v63[6] + ((v67 >> 3) & 0x1FFFFFFE));
                      unsigned __int16 v69 = *v68 + (v67 & 0xF) * v65;
                      unsigned int v70 = v136;
                      do
                      {
                        int v71 = v69;
                        unsigned int v72 = *((unsigned __int8 *)v138 + v69);
                        if (v70 > v72)
                        {
                          int v73 = v135;
                          while (1)
                          {
                            unsigned int v74 = v72;
                            int v75 = (char *)v135 + 24 * v72;
                            if (*v75 == v71) {
                              break;
                            }
                            v72 += 256;
                            if (v74 + 256 >= v70) {
                              goto LABEL_123;
                            }
                          }
                          unsigned int v76 = *((_DWORD *)v135 + 6 * v72 + 1);
                          uint64_t v77 = *(unsigned __int16 **)(v51 + 16);
                          int v78 = *v77;
                          BOOL v80 = (v78 - 9) <= 0x3C
                             && ((1 << (v78 - 9)) & 0x1000000000000605) != 0
                             || v78 == 0;
                          if (!v80 && (v77[4] & 0x10) == 0)
                          {
                            v76 += llvm::TargetSchedModel::computeOperandLatency(v129, (const llvm::MachineInstr *)v51, ((unint64_t)v61 - *(void *)(v51 + 32)) >> 5, *((const llvm::MachineInstr **)v135 + 3 * v74 + 1), *((unsigned int *)v135 + 6 * v74 + 4));
                            int v73 = v135;
                            unsigned int v70 = v136;
                          }
                          if (v57 <= v76) {
                            unsigned int v57 = v76;
                          }
                          uint64_t v81 = (uint64_t)v73 + 24 * v70 - 24;
                          if ((_DWORD *)v81 != v75)
                          {
                            long long v82 = *(_OWORD *)v81;
                            v75[4] = *(_DWORD *)(v81 + 16);
                            *(_OWORD *)int v75 = v82;
                            *((unsigned char *)v138 + *((unsigned int *)v135 + 6 * v136 - 6)) = -85 * ((v75 - v135) >> 3);
                            unsigned int v70 = v136;
                          }
                          LODWORD(v136) = --v70;
                        }
LABEL_123:
                        int v83 = (unsigned __int16)v68[1];
                        ++v68;
                        unsigned __int16 v69 = v83 + v71;
                      }
                      while (v83);
                    }
                  }
                }
                v61 += 8;
              }
              while (v61 != v62);
              uint64_t v84 = v144;
              if (v144)
              {
                uint64_t v85 = 0;
                uint64_t v3 = v122;
                do
                {
                  unsigned int v86 = *(_DWORD *)(*(void *)(v51 + 32) + 32 * v143[v85] + 4);
                  unint64_t v87 = *(unsigned int *)(*v63 + 24 * v86 + 16);
                  int v88 = (_WORD *)(v63[6] + ((v87 >> 3) & 0x1FFFFFFE));
                  __int16 v90 = *v88;
                  uint64_t v89 = v88 + 1;
                  unsigned __int16 v91 = v90 + (v87 & 0xF) * v86;
                  do
                  {
                    LODWORD(v133[0]) = v91;
                    *(void *)((char *)v133 + 4) = 0;
                    *(void *)((char *)&v133[1] + 4) = 0;
                    int v92 = sub_1CD550A88((uint64_t)&v135, (unsigned int *)v133);
                    if (v92[1] <= v57 && *((void *)v92 + 1) != v51)
                    {
                      v92[1] = v57;
                      *((void *)v92 + 1) = v51;
                      v92[4] = v143[v85];
                    }
                    int v93 = *v89++;
                    v91 += v93;
                  }
                  while (v93);
                  ++v85;
                }
                while (v85 != v84);
              }
              else
              {
                uint64_t v3 = v122;
              }
              uint64_t v53 = v123;
              uint64_t v52 = v124;
            }
            if (v143 != (_DWORD *)v145) {
              free(v143);
            }
          }
          if (LODWORD(v134[1]))
          {
            uint64_t v96 = v134[0];
            uint64_t v97 = 16 * LODWORD(v134[1]);
            do
            {
              if (sub_1CC3AA334((unsigned int *)v96, (llvm::MachineInstr *)v51, v57, (uint64_t)&v130, (llvm::TargetSchedModel *)(*((void *)v3 + 54) + 288)))
              {
                llvm::MachineTraceMetrics::Ensemble::addLiveIns((uint64_t)v3, *(void *)v96, *(_DWORD *)(v96 + 8), (uint64_t)v140, v141);
              }
              v96 += 16;
              v97 -= 16;
            }
            while (v97);
          }
        }
        uint64_t v143 = (_DWORD *)v51;
        uint64_t v94 = sub_1CD550B40(v125, &v143);
        *((_DWORD *)v94 + 3) = v57;
        if (*v53)
        {
          unsigned int v95 = *((_DWORD *)v94 + 2) + v57;
          if (*v126 > v95) {
            unsigned int v95 = *v126;
          }
          unsigned int *v126 = v95;
        }
        if (v51 == v52) {
          goto LABEL_155;
        }
      }
      int v98 = 1;
      while (v56 != -4096)
      {
        int v99 = v54 + v98++;
        uint64_t v54 = v99 & (v132 - 1);
        uint64_t v56 = *(void *)(v130 + 16 * v54);
        if (v51 == v56)
        {
          unint64_t v55 = (uint64_t *)(v130 + 16 * v54);
          goto LABEL_84;
        }
      }
LABEL_85:
      unsigned int v57 = 0;
      goto LABEL_87;
    }
LABEL_155:
    uint64_t v100 = v127 + 88 * v128;
    uint64_t v103 = *(unsigned int **)(v100 + 40);
    uint64_t v102 = v100 + 40;
    unsigned int v101 = v103;
    uint64_t v104 = *(unsigned int *)(v102 + 8);
    if (v104)
    {
      uint64_t v105 = &v101[2 * v104];
      uint64_t v106 = *(void *)(*((void *)v3 + 54) + 272);
      uint64_t v107 = v130;
      int v108 = v132;
      unsigned int v109 = v132 - 1;
      do
      {
        uint64_t v110 = *v101;
        if ((v110 & 0x80000000) != 0) {
          int v111 = (uint64_t *)(*(void *)(v106 + 24) + 16 * (v110 & 0x7FFFFFFF) + 8);
        }
        else {
          int v111 = (uint64_t *)(*(void *)(v106 + 272) + 8 * v110);
        }
        uint64_t v112 = *v111;
        if (v112)
        {
          if (*(unsigned char *)(v112 + 3)) {
            goto LABEL_161;
          }
          uint64_t v112 = *(void *)(v112 + 24);
          if (v112)
          {
            if (*(unsigned char *)(v112 + 3))
            {
LABEL_161:
              uint64_t v112 = *(void *)(v112 + 8);
              goto LABEL_162;
            }
            uint64_t v112 = 0;
          }
        }
LABEL_162:
        if (!v108) {
          goto LABEL_169;
        }
        uint64_t v113 = ((v112 >> 4) ^ (v112 >> 9)) & v109;
        uint64_t v114 = *(void *)(v107 + 16 * v113);
        if (v112 != v114)
        {
          int v116 = 1;
          while (v114 != -4096)
          {
            int v117 = v113 + v116++;
            uint64_t v113 = v117 & v109;
            uint64_t v114 = *(void *)(v107 + 16 * v113);
            if (v112 == v114) {
              goto LABEL_164;
            }
          }
LABEL_169:
          unsigned int v115 = 0;
          goto LABEL_170;
        }
LABEL_164:
        unsigned int v115 = *(_DWORD *)(v107 + 16 * v113 + 8);
LABEL_170:
        v101[1] = v115;
        v101 += 2;
      }
      while (v101 != v105);
    }
    if (v136)
    {
      int v118 = v135;
      uint64_t v119 = 24 * v136;
      do
      {
        if (v104 >= *(_DWORD *)(v102 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)v102 + 8 * v104) = *v118;
        LODWORD(v104) = *(_DWORD *)(v102 + 8) + 1;
        *(_DWORD *)(v102 + 8) = v104;
        v118 += 3;
        v119 -= 24;
      }
      while (v119);
    }
    if (*(unsigned char *)(v127 + 88 * v128 + 32))
    {
      unsigned int v120 = llvm::MachineTraceMetrics::Ensemble::computeCrossBlockCriticalPath(v3, v127 + 88 * v128);
      unsigned int v121 = *v126;
      if (*v126 <= v120) {
        unsigned int v121 = v120;
      }
      unsigned int *v126 = v121;
    }
    unsigned int v27 = v141 - 1;
    LODWORD(v141) = v27;
  }
  while (v27);
  if ((uint64_t *)v134[0] != &v134[2]) {
    free((void *)v134[0]);
  }
LABEL_189:
  free(v138);
  if (v135 != v137) {
    free(v135);
  }
  MEMORY[0x1D25D9CD0](v130, 8);
  if (v140 != (void *)v142) {
    free(v140);
  }
}

BOOL sub_1CC3AA334(unsigned int *a1, llvm::MachineInstr *a2, unsigned int a3, uint64_t a4, llvm::TargetSchedModel *this)
{
  unsigned int v6 = a3;
  uint64_t v8 = *(const llvm::MachineInstr **)a1;
  uint64_t v9 = *(unsigned __int16 **)(*(void *)a1 + 16);
  int v10 = *v9;
  BOOL v12 = (v10 - 9) <= 0x3C && ((1 << (v10 - 9)) & 0x1000000000000605) != 0 || v10 == 0;
  if (!v12 && (v9[4] & 0x10) == 0)
  {
    unsigned int v6 = llvm::TargetSchedModel::computeOperandLatency(this, v8, a1[2], a2, a1[3]) + a3;
    uint64_t v8 = *(const llvm::MachineInstr **)a1;
  }
  uint64_t v16 = v8;
  uint64_t v17 = v6;
  sub_1CD55062C((uint64_t)&v18, a4, (uint64_t *)&v16, &v17);
  int v14 = v19;
  if (!v19 && *(_DWORD *)(v18 + 8) < v6) {
    *(_DWORD *)(v18 + 8) = v6;
  }
  return v14 != 0;
}

uint64_t llvm::MachineTraceMetrics::Trace::getResourceDepth(llvm::MachineTraceMetrics::Trace *this, int a2)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((v2 - *(void *)(*(void *)this + 8)) >> 3);
  uint64_t v4 = *(void *)(*(void *)this + 432);
  uint64_t v5 = *(unsigned int *)(v4 + 336);
  uint64_t v6 = (v5 * v3);
  int v7 = (unsigned int *)(*(void *)(*(void *)this + 400) + 4 * v6);
  unsigned int v8 = 0;
  if (a2)
  {
    if (!v5)
    {
      unsigned int v17 = *(_DWORD *)(v4 + 564);
      unsigned int v18 = *(_DWORD *)(v2 + 24);
      goto LABEL_16;
    }
    uint64_t v9 = (int *)(*(void *)(v4 + 616) + 4 * v6);
    do
    {
      int v11 = *v7++;
      int v10 = v11;
      int v12 = *v9++;
      unsigned int v13 = v12 + v10;
      if (v8 <= v13) {
        unsigned int v8 = v13;
      }
      --v5;
    }
    while (v5);
  }
  else
  {
    if (!v5)
    {
      unsigned int v17 = *(_DWORD *)(v4 + 564);
      unsigned int v18 = *(_DWORD *)(v2 + 24);
      goto LABEL_18;
    }
    uint64_t v14 = 4 * v5;
    do
    {
      unsigned int v16 = *v7++;
      unsigned int v15 = v16;
      if (v8 <= v16) {
        unsigned int v8 = v15;
      }
      v14 -= 4;
    }
    while (v14);
  }
  unsigned int v17 = *(_DWORD *)(v4 + 564);
  unsigned int v18 = *(_DWORD *)(v2 + 24);
  if (a2) {
LABEL_16:
  }
    v18 += *(_DWORD *)(*(void *)(v4 + 568) + 8 * v3);
LABEL_18:
  unsigned int v19 = v18 / *(_DWORD *)(v4 + 288);
  unsigned int v20 = (v17 + v8 - 1) / v17;
  if (v19 <= v20) {
    return v20;
  }
  else {
    return v19;
  }
}

uint64_t sub_1CC3AA4F0(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = &a2[a3];
  do
  {
    uint64_t v7 = *a2;
    if ((~*(unsigned __int16 *)(*a2 + 8) & 0x1FFF) != 0 && *(_WORD *)(v7 + 12))
    {
      uint64_t v8 = *(void *)(*(void *)a1 + 432);
      uint64_t v9 = *(unsigned __int16 *)(v7 + 10);
      uint64_t v10 = 4 * *(unsigned __int16 *)(v7 + 12);
      int v11 = (unsigned __int16 *)(*(void *)(*(void *)(v8 + 464) + 136) + 4 * v9 + 2);
      do
      {
        if (*(v11 - 1) == a4) {
          uint64_t result = result + *(_DWORD *)(*(void *)(v8 + 480) + 4 * a4) * *v11;
        }
        v11 += 2;
        v10 -= 4;
      }
      while (v10);
    }
    ++a2;
  }
  while (a2 != v6);
  return result;
}

BOOL llvm::MachineTraceMetrics::Trace::isDepInTrace(llvm::MachineTraceMetrics::Trace *this, const llvm::MachineInstr *a2, const llvm::MachineInstr *a3)
{
  uint64_t v3 = *((void *)a2 + 3);
  uint64_t v4 = *((void *)a3 + 3);
  if (v3 == v4) {
    return 1;
  }
  int v5 = *(_DWORD *)(v3 + 24);
  uint64_t v6 = *(void *)(*(void *)this + 8);
  unsigned int v7 = *(_DWORD *)(v6 + 88 * v5 + 24);
  if (v7 == -1) {
    return 0;
  }
  int v8 = *(_DWORD *)(v4 + 24);
  unsigned int v9 = *(_DWORD *)(v6 + 88 * v8 + 24);
  if (v9 == -1 || *(_DWORD *)(v6 + 88 * v5 + 16) != *(_DWORD *)(v6 + 88 * v8 + 16)) {
    return 0;
  }
  int v10 = *(unsigned __int8 *)(v6 + 88 * v5 + 32);
  return v7 <= v9 && v10 != 0;
}

char *llvm::MachineTraceMetrics::Ensemble::print(llvm::MachineTraceMetrics::Ensemble *this, llvm::raw_ostream *a2)
{
  uint64_t result = (char *)(*(uint64_t (**)(llvm::MachineTraceMetrics::Ensemble *))(*(void *)this + 32))(this);
  if (result)
  {
    int v5 = result;
    unint64_t v6 = strlen(result);
    uint64_t result = (char *)*((void *)a2 + 4);
    if (v6 <= *((void *)a2 + 3) - (void)result)
    {
      if (v6)
      {
        uint64_t result = (char *)memcpy(result, v5, v6);
        *((void *)a2 + 4) += v6;
      }
    }
    else
    {
      uint64_t result = (char *)llvm::raw_ostream::write(a2, v5, v6);
    }
  }
  uint64_t v7 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v7) > 0xA)
  {
    *(_DWORD *)(v7 + 7) = 171599212;
    *(void *)uint64_t v7 = *(void *)" ensemble:\n";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    uint64_t result = (char *)llvm::raw_ostream::write(a2, " ensemble:\n", 0xBuLL);
  }
  uint64_t v8 = *((unsigned int *)this + 4);
  if (v8)
  {
    uint64_t v9 = 0;
    for (unint64_t i = 0; i != v8; ++i)
    {
      uint64_t v11 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v11) > 5)
      {
        *(_WORD *)(v11 + 4) = 11874;
        *(_DWORD *)uint64_t v11 = 1646600224;
        *((void *)a2 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(a2, "  %bb.", 6uLL);
      }
      sub_1CD098D14(a2, i, 0, 0, 0);
      int v12 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v12 >= *((void *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 9);
      }
      else
      {
        *((void *)a2 + 4) = v12 + 1;
        unsigned char *v12 = 9;
      }
      uint64_t result = (char *)llvm::MachineTraceMetrics::TraceBlockInfo::print((llvm::raw_ostream *)(*((void *)this + 1) + v9), a2);
      unsigned int v13 = (unsigned char *)*((void *)a2 + 4);
      if ((unint64_t)v13 >= *((void *)a2 + 3))
      {
        uint64_t result = (char *)llvm::raw_ostream::write(a2, 10);
      }
      else
      {
        *((void *)a2 + 4) = v13 + 1;
        unsigned char *v13 = 10;
      }
      v9 += 88;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::MachineTraceMetrics::TraceBlockInfo::print(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3 = (uint64_t)this;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (_WORD *)*((void *)a2 + 4);
  unint64_t v5 = *((void *)a2 + 3) - (void)v4;
  if (*((_DWORD *)this + 6) == -1)
  {
    if (v5 <= 0xC)
    {
      uint64_t v9 = "depth invalid";
      int v10 = a2;
      size_t v11 = 13;
LABEL_20:
      this = llvm::raw_ostream::write(v10, v9, v11);
      goto LABEL_21;
    }
    qmemcpy(v4, "depth invalid", 13);
    uint64_t v26 = *((void *)a2 + 4) + 13;
    goto LABEL_60;
  }
  if (v5 > 5)
  {
    v4[2] = 15720;
    *(_DWORD *)uint64_t v4 = 1953523044;
    *((void *)a2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a2, "depth=", 6uLL);
  }
  sub_1CD098D14(a2, *(unsigned int *)(v3 + 24), 0, 0, 0);
  uint64_t v6 = *((void *)a2 + 4);
  unint64_t v7 = *((void *)a2 + 3) - v6;
  if (*(void *)v3)
  {
    if (v7 > 5)
    {
      *(_WORD *)(v6 + 4) = 15716;
      *(_DWORD *)uint64_t v6 = 1701998624;
      *((void *)a2 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a2, " pred=", 6uLL);
    }
    uint64_t v8 = *(void *)v3;
    uint64_t v30 = (void **)&v28;
    uint64_t v28 = (void (**)(void **))&unk_1F260D508;
    uint64_t v29 = v8;
    off_1F260D538((uint64_t)&v28, a2);
    if (v30 == (void **)&v28)
    {
      v28[4]((void **)&v28);
    }
    else if (v30)
    {
      (*((void (**)(void))*v30 + 5))();
    }
  }
  else if (v7 > 9)
  {
    *(_WORD *)(v6 + 8) = 27756;
    *(void *)uint64_t v6 = *(void *)" pred=null";
    *((void *)a2 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(a2, " pred=null", 0xAuLL);
  }
  uint64_t v12 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v12) > 9)
  {
    *(_WORD *)(v12 + 8) = 11874;
    *(void *)uint64_t v12 = *(void *)" head=%bb.";
    *((void *)a2 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(a2, " head=%bb.", 0xAuLL);
  }
  this = sub_1CD098D14(a2, *(unsigned int *)(v3 + 16), 0, 0, 0);
  if (*(unsigned char *)(v3 + 32))
  {
    unsigned int v13 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v13 <= 7uLL)
    {
      uint64_t v9 = " +instrs";
      int v10 = a2;
      size_t v11 = 8;
      goto LABEL_20;
    }
    void *v13 = 0x737274736E692B20;
    uint64_t v26 = *((void *)a2 + 4) + 8;
LABEL_60:
    *((void *)a2 + 4) = v26;
  }
LABEL_21:
  uint64_t v14 = (_WORD *)*((void *)a2 + 4);
  if (*((void *)a2 + 3) - (void)v14 > 1uLL)
  {
    _WORD *v14 = 8236;
    unsigned int v15 = (_DWORD *)(*((void *)a2 + 4) + 2);
    *((void *)a2 + 4) = v15;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, ", ", 2uLL);
    unsigned int v15 = (_DWORD *)*((void *)a2 + 4);
  }
  unint64_t v16 = *((void *)a2 + 3) - (void)v15;
  if (*(_DWORD *)(v3 + 28) == -1)
  {
    if (v16 <= 0xD)
    {
      unsigned int v20 = "height invalid";
      int v21 = a2;
      size_t v22 = 14;
LABEL_42:
      this = llvm::raw_ostream::write(v21, v20, v22);
      goto LABEL_43;
    }
    qmemcpy(v15, "height invalid", 14);
    uint64_t v27 = *((void *)a2 + 4) + 14;
LABEL_62:
    *((void *)a2 + 4) = v27;
    goto LABEL_43;
  }
  if (v16 > 6)
  {
    *(_DWORD *)((char *)v15 + 3) = 1031039079;
    *unsigned int v15 = 1734960488;
    *((void *)a2 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a2, "height=", 7uLL);
  }
  sub_1CD098D14(a2, *(unsigned int *)(v3 + 28), 0, 0, 0);
  uint64_t v17 = *((void *)a2 + 4);
  unint64_t v18 = *((void *)a2 + 3) - v17;
  if (*(void *)(v3 + 8))
  {
    if (v18 > 5)
    {
      *(_WORD *)(v17 + 4) = 15715;
      *(_DWORD *)uint64_t v17 = 1668641568;
      *((void *)a2 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a2, " succ=", 6uLL);
    }
    uint64_t v19 = *(void *)(v3 + 8);
    uint64_t v30 = (void **)&v28;
    uint64_t v28 = (void (**)(void **))&unk_1F260D508;
    uint64_t v29 = v19;
    off_1F260D538((uint64_t)&v28, a2);
    if (v30 == (void **)&v28)
    {
      v28[4]((void **)&v28);
    }
    else if (v30)
    {
      (*((void (**)(void))*v30 + 5))();
    }
  }
  else if (v18 > 9)
  {
    *(_WORD *)(v17 + 8) = 27756;
    *(void *)uint64_t v17 = *(void *)" succ=null";
    *((void *)a2 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(a2, " succ=null", 0xAuLL);
  }
  uint64_t v23 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v23) > 9)
  {
    *(_WORD *)(v23 + 8) = 11874;
    *(void *)uint64_t v23 = *(void *)" tail=%bb.";
    *((void *)a2 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(a2, " tail=%bb.", 0xAuLL);
  }
  this = sub_1CD098D14(a2, *(unsigned int *)(v3 + 20), 0, 0, 0);
  if (*(unsigned char *)(v3 + 33))
  {
    uint64_t v24 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v24 <= 7uLL)
    {
      unsigned int v20 = " +instrs";
      int v21 = a2;
      size_t v22 = 8;
      goto LABEL_42;
    }
    *uint64_t v24 = 0x737274736E692B20;
    uint64_t v27 = *((void *)a2 + 4) + 8;
    goto LABEL_62;
  }
LABEL_43:
  if (*(unsigned char *)(v3 + 32) && *(unsigned char *)(v3 + 33))
  {
    unsigned int v25 = (_DWORD *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v25 > 6uLL)
    {
      *(_DWORD *)((char *)v25 + 3) = 1031039346;
      *unsigned int v25 = 1919098924;
      *((void *)a2 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(a2, ", crit=", 7uLL);
    }
    return sub_1CD098D14(a2, *(unsigned int *)(v3 + 36), 0, 0, 0);
  }
  return this;
}

llvm::raw_ostream *llvm::MachineTraceMetrics::Trace::print(llvm::MachineTraceMetrics::Trace *this, llvm::raw_ostream *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)this;
  uint64_t v6 = *((void *)this + 1) - v4[1];
  unint64_t v7 = (const char *)(*(uint64_t (**)(void *))(*v4 + 32))(v4);
  if (v7)
  {
    uint64_t v8 = v7;
    size_t v9 = strlen(v7);
    int v10 = (void *)*((void *)a2 + 4);
    if (v9 <= *((void *)a2 + 3) - (void)v10)
    {
      if (v9)
      {
        memcpy(v10, v8, v9);
        *((void *)a2 + 4) += v9;
      }
    }
    else
    {
      llvm::raw_ostream::write(a2, v8, v9);
    }
  }
  uint64_t v11 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v11) > 0xA)
  {
    *(_DWORD *)(v11 + 7) = 778199589;
    *(void *)uint64_t v11 = *(void *)" trace %bb.";
    *((void *)a2 + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(a2, " trace %bb.", 0xBuLL);
  }
  sub_1CD098D14(a2, *(unsigned int *)(*((void *)this + 1) + 16), 0, 0, 0);
  uint64_t v12 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v12) > 8)
  {
    *(unsigned char *)(v12 + 8) = 46;
    *(void *)uint64_t v12 = *(void *)" --> %bb.";
    *((void *)a2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a2, " --> %bb.", 9uLL);
  }
  unint64_t v13 = -1171354717 * (v6 >> 3);
  sub_1CD098D14(a2, v13, 0, 0, 0);
  uint64_t v14 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v14) > 8)
  {
    *(unsigned char *)(v14 + 8) = 46;
    *(void *)uint64_t v14 = *(void *)" --> %bb.";
    *((void *)a2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a2, " --> %bb.", 9uLL);
  }
  sub_1CD098D14(a2, *(unsigned int *)(*((void *)this + 1) + 20), 0, 0, 0);
  unsigned int v15 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v15 >= *((void *)a2 + 3))
  {
    llvm::raw_ostream::write(a2, 58);
  }
  else
  {
    *((void *)a2 + 4) = v15 + 1;
    *unsigned int v15 = 58;
  }
  uint64_t v16 = *((void *)this + 1);
  if (*(_DWORD *)(v16 + 28) != -1 && *(_DWORD *)(v16 + 24) != -1)
  {
    uint64_t v17 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v17 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((void *)a2 + 4) = v17 + 1;
      *uint64_t v17 = 32;
    }
    sub_1CD098D14(a2, (*(_DWORD *)(*((void *)this + 1) + 28) + *(_DWORD *)(*((void *)this + 1) + 24)), 0, 0, 0);
    unint64_t v18 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v18 > 7uLL)
    {
      *unint64_t v18 = 0x2E737274736E6920;
      *((void *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " instrs.", 8uLL);
    }
  }
  uint64_t v19 = *((void *)this + 1);
  if (*(unsigned char *)(v19 + 32) && *(unsigned char *)(v19 + 33))
  {
    unsigned int v20 = (unsigned char *)*((void *)a2 + 4);
    if ((unint64_t)v20 >= *((void *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, 32);
    }
    else
    {
      *((void *)a2 + 4) = v20 + 1;
      *unsigned int v20 = 32;
    }
    sub_1CD098D14(a2, *(unsigned int *)(*((void *)this + 1) + 36), 0, 0, 0);
    int v21 = (void *)*((void *)a2 + 4);
    if (*((void *)a2 + 3) - (void)v21 > 7uLL)
    {
      *int v21 = 0x2E73656C63796320;
      *((void *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " cycles.", 8uLL);
    }
  }
  size_t v22 = (_DWORD *)*((void *)this + 1);
  uint64_t v23 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v23) > 4)
  {
    *(unsigned char *)(v23 + 4) = 46;
    *(_DWORD *)uint64_t v23 = 1650599178;
    *((void *)a2 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(a2, "\n%bb.", 5uLL);
  }
  uint64_t result = sub_1CD098D14(a2, v13, 0, 0, 0);
  if (v22[6] != -1)
  {
    unsigned int v25 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
    do
    {
      if (!*(void *)v22) {
        break;
      }
      unsigned int v26 = *(_DWORD *)(*(void *)v22 + 24);
      uint64_t v27 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v27 > 3uLL)
      {
        _DWORD *v27 = 539835424;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, " <- ", 4uLL);
      }
      uint64_t v28 = *(void *)v22;
      unint64_t v39 = (void **)&v37;
      unint64_t v37 = (uint64_t (**)(void **))&unk_1F260D508;
      uint64_t v38 = v28;
      v25((uint64_t)&v37, a2);
      uint64_t result = (llvm::raw_ostream *)v39;
      if (v39 == (void **)&v37)
      {
        uint64_t result = (llvm::raw_ostream *)v37[4]((void **)&v37);
      }
      else if (v39)
      {
        uint64_t result = (llvm::raw_ostream *)(*((uint64_t (**)(void))*v39 + 5))();
      }
      size_t v22 = (_DWORD *)(*(void *)(*(void *)this + 8) + 88 * v26);
    }
    while (v22[6] != -1);
  }
  uint64_t v29 = *((void *)this + 1);
  uint64_t v30 = *((void *)a2 + 4);
  if ((unint64_t)(*((void *)a2 + 3) - v30) > 4)
  {
    *(unsigned char *)(v30 + 4) = 32;
    *(_DWORD *)uint64_t v30 = 538976266;
    *((void *)a2 + 4) += 5;
  }
  else
  {
    uint64_t result = llvm::raw_ostream::write(a2, "\n    ", 5uLL);
  }
  if (*(_DWORD *)(v29 + 28) != -1)
  {
    uint64_t v31 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
    do
    {
      uint64_t v32 = *(void *)(v29 + 8);
      if (!v32) {
        break;
      }
      unsigned int v33 = *(_DWORD *)(v32 + 24);
      unsigned int v34 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v34 > 3uLL)
      {
        *unsigned int v34 = 540945696;
        *((void *)a2 + 4) += 4;
      }
      else
      {
        llvm::raw_ostream::write(a2, " -> ", 4uLL);
      }
      uint64_t v35 = *(void *)(v29 + 8);
      unint64_t v39 = (void **)&v37;
      unint64_t v37 = (uint64_t (**)(void **))&unk_1F260D508;
      uint64_t v38 = v35;
      v31((uint64_t)&v37, a2);
      uint64_t result = (llvm::raw_ostream *)v39;
      if (v39 == (void **)&v37)
      {
        uint64_t result = (llvm::raw_ostream *)v37[4]((void **)&v37);
      }
      else if (v39)
      {
        uint64_t result = (llvm::raw_ostream *)(*((uint64_t (**)(void))*v39 + 5))();
      }
      uint64_t v29 = *(void *)(*(void *)this + 8) + 88 * v33;
    }
    while (*(_DWORD *)(v29 + 28) != -1);
  }
  unint64_t v36 = (unsigned char *)*((void *)a2 + 4);
  if ((unint64_t)v36 >= *((void *)a2 + 3)) {
    return llvm::raw_ostream::write(a2, 10);
  }
  *((void *)a2 + 4) = v36 + 1;
  *unint64_t v36 = 10;
  return result;
}

uint64_t sub_1CC3AB548(uint64_t a1, llvm::MachineBasicBlock *a2)
{
  if (*((void *)a2 + 8) == *((void *)a2 + 9)) {
    return 0;
  }
  uint64_t v4 = *(llvm::MachineTraceMetrics **)(a1 + 432);
  uint64_t v5 = *((void *)v4 + 35);
  int v6 = *(_DWORD *)(v5 + 264);
  if (v6)
  {
    uint64_t v7 = *(void *)(v5 + 248);
    unsigned int v8 = v6 - 1;
    uint64_t v9 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v10 = *(llvm::MachineBasicBlock **)(v7 + 16 * v9);
    if (v10 == a2)
    {
LABEL_7:
      uint64_t v13 = *(void *)(v7 + 16 * v9 + 8);
      if (v13 && **(llvm::MachineBasicBlock ***)(v13 + 32) == a2) {
        return 0;
      }
    }
    else
    {
      int v11 = 1;
      while (v10 != (llvm::MachineBasicBlock *)-4096)
      {
        int v12 = v9 + v11++;
        uint64_t v9 = v12 & v8;
        int v10 = *(llvm::MachineBasicBlock **)(v7 + 16 * v9);
        if (v10 == a2) {
          goto LABEL_7;
        }
      }
    }
  }
  Resources = llvm::MachineTraceMetrics::getResources(v4, a2);
  uint64_t v15 = *((void *)a2 + 8);
  uint64_t v16 = *((void *)a2 + 9);
  if (v15 == v16) {
    return 0;
  }
  uint64_t v17 = Resources;
  unsigned int v18 = 0;
  uint64_t result = 0;
  int v20 = *v17;
  uint64_t v21 = *(void *)(a1 + 8);
  do
  {
    if (v21)
    {
      int v22 = *(_DWORD *)(v21 + 88 * *(int *)(*(void *)v15 + 24) + 24);
      if (v22 != -1)
      {
        unsigned int v23 = v22 + v20;
        if (result) {
          BOOL v24 = v23 >= v18;
        }
        else {
          BOOL v24 = 0;
        }
        if (!v24)
        {
          uint64_t result = *(void *)v15;
          unsigned int v18 = v23;
        }
      }
    }
    v15 += 8;
  }
  while (v15 != v16);
  return result;
}

uint64_t sub_1CC3AB668(uint64_t a1, void *a2)
{
  if (a2[8] == a2[9]) {
    return 0;
  }
  uint64_t v2 = *(void *)(*(void *)(a1 + 432) + 280);
  uint64_t v3 = *(void *)(v2 + 248);
  int v4 = *(_DWORD *)(v2 + 264);
  if (v4)
  {
    uint64_t v5 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    int v6 = *(void **)(v3 + 16 * v5);
    if (v6 == a2)
    {
LABEL_7:
      uint64_t v9 = *(void *)(v3 + 16 * v5 + 8);
      goto LABEL_9;
    }
    int v7 = 1;
    while (v6 != (void *)-4096)
    {
      int v8 = v5 + v7++;
      uint64_t v5 = v8 & (v4 - 1);
      int v6 = *(void **)(v3 + 16 * v5);
      if (v6 == a2) {
        goto LABEL_7;
      }
    }
  }
  uint64_t v9 = 0;
LABEL_9:
  int v10 = (uint64_t *)a2[11];
  int v11 = (uint64_t *)a2[12];
  if (v10 != v11)
  {
    unsigned int v12 = 0;
    uint64_t v13 = 0;
    unsigned int v14 = v4 - 1;
    while (1)
    {
      uint64_t v15 = *v10;
      if (!v9 || v15 != **(void **)(v9 + 32)) {
        break;
      }
LABEL_34:
      if (++v10 == v11) {
        return v13;
      }
    }
    if (v4)
    {
      uint64_t v16 = ((v15 >> 4) ^ (v15 >> 9)) & v14;
      uint64_t v17 = *(void *)(v3 + 16 * v16);
      if (v15 == v17)
      {
LABEL_18:
        int v20 = *(void **)(v3 + 16 * v16 + 8);
        if (v9) {
          goto LABEL_21;
        }
LABEL_24:
        uint64_t v21 = *(void *)(a1 + 8);
        if (v21)
        {
          unsigned int v22 = *(_DWORD *)(v21 + 88 * *(int *)(v15 + 24) + 28);
          if (v22 != -1)
          {
            if (v13) {
              BOOL v23 = v22 >= v12;
            }
            else {
              BOOL v23 = 0;
            }
            if (!v23)
            {
              uint64_t v13 = *v10;
              unsigned int v12 = v22;
            }
          }
        }
        goto LABEL_34;
      }
      int v18 = 1;
      while (v17 != -4096)
      {
        int v19 = v16 + v18++;
        uint64_t v16 = v19 & v14;
        uint64_t v17 = *(void *)(v3 + 16 * v16);
        if (v15 == v17) {
          goto LABEL_18;
        }
      }
    }
    int v20 = 0;
    if (v9)
    {
LABEL_21:
      while (v20 != (void *)v9)
      {
        if (!v20) {
          goto LABEL_34;
        }
        int v20 = (void *)*v20;
      }
    }
    goto LABEL_24;
  }
  return 0;
}

void sub_1CC3AB7DC(llvm::MachineTraceMetrics::Ensemble *a1)
{
  llvm::MachineTraceMetrics::Ensemble::~Ensemble(a1);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CC3AB814()
{
  return "MinInstr";
}

uint64_t sub_1CC3AB820(uint64_t a1, void **a2)
{
  if ((void **)a1 != a2)
  {
    int v4 = a2 + 2;
    uint64_t v3 = *a2;
    if (*a2 == a2 + 2)
    {
      int v6 = a2 + 1;
      uint64_t v5 = *((unsigned int *)a2 + 2);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5)
        {
          int v10 = &v3[2 * v5];
          int v11 = *(void **)a1;
          do
          {
            void *v11 = *v3;
            v11[1] = v3[1];
            v3 += 2;
            v11 += 2;
          }
          while (v3 != v10);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          unsigned int v12 = &v3[2 * v7];
          uint64_t v13 = *(void **)a1;
          do
          {
            void *v13 = *v3;
            v13[1] = v3[1];
            v3 += 2;
            v13 += 2;
          }
          while (v3 != v12);
        }
        else
        {
          uint64_t v7 = 0;
        }
        if (v7 != v5) {
          memcpy((void *)(*(void *)a1 + 16 * v7), &(*a2)[2 * v7], (char *)&(*a2)[2 * v5] - (char *)&(*a2)[2 * v7]);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v9 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        unsigned int v14 = a2;
        free(v9);
        a2 = v14;
        uint64_t v3 = *v14;
      }
      *(void *)a1 = v3;
      int v6 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    *int v6 = 0;
  }
  return a1;
}

uint64_t sub_1CC3AB990(uint64_t *a1, uint64_t a2, char a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a4 + 24);
  uint64_t v7 = *a1;
  if (*((unsigned char *)a1 + 120)) {
    int v8 = *(_DWORD *)(v7 + 88 * v6 + 28);
  }
  else {
    int v8 = *(_DWORD *)(v7 + 88 * v6 + 24);
  }
  if (v8 != -1) {
    return 0;
  }
  if (a3)
  {
    uint64_t v10 = a1[14];
    int v11 = *(_DWORD *)(v10 + 264);
    if (v11)
    {
      uint64_t v12 = *(void *)(v10 + 248);
      unsigned int v13 = v11 - 1;
      uint64_t v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
      uint64_t v15 = *(void *)(v12 + 16 * v14);
      if (v15 == a2)
      {
LABEL_12:
        uint64_t v18 = *(void *)(v12 + 16 * v14 + 8);
        if (v18)
        {
          if (*((unsigned char *)a1 + 120)) {
            uint64_t v19 = a4;
          }
          else {
            uint64_t v19 = a2;
          }
          if (v19 == **(void **)(v18 + 32)) {
            return 0;
          }
          uint64_t v20 = v13 & ((a4 >> 4) ^ (a4 >> 9));
          uint64_t v21 = *(void *)(v12 + 16 * v20);
          if (v21 == a4)
          {
LABEL_21:
            BOOL v24 = *(void **)(v12 + 16 * v20 + 8);
            goto LABEL_24;
          }
          int v22 = 1;
          while (v21 != -4096)
          {
            int v23 = v20 + v22++;
            uint64_t v20 = v23 & v13;
            uint64_t v21 = *(void *)(v12 + 16 * v20);
            if (v21 == a4) {
              goto LABEL_21;
            }
          }
          BOOL v24 = 0;
LABEL_24:
          while (v24 != (void *)v18)
          {
            if (!v24) {
              return 0;
            }
            BOOL v24 = (void *)*v24;
          }
        }
      }
      else
      {
        int v16 = 1;
        while (v15 != -4096)
        {
          int v17 = v14 + v16++;
          uint64_t v14 = v17 & v13;
          uint64_t v15 = *(void *)(v12 + 16 * v14);
          if (v15 == a2) {
            goto LABEL_12;
          }
        }
      }
    }
  }
  uint64_t v27 = a1[2];
  uint64_t v26 = a1[3];
  unsigned int v25 = (llvm::SmallPtrSetImplBase *)(a1 + 2);
  uint64_t v28 = *((unsigned int *)a1 + 9);
  if (v26 == v27)
  {
    if (v28)
    {
      uint64_t v29 = 0;
      uint64_t v30 = 8 * v28;
      uint64_t v31 = (void *)a1[3];
      while (*v31 != a4)
      {
        if (*v31 == -2) {
          uint64_t v29 = v31;
        }
        ++v31;
        v30 -= 8;
        if (!v30)
        {
          if (!v29) {
            goto LABEL_35;
          }
          *uint64_t v29 = a4;
          --*((_DWORD *)a1 + 10);
          return 1;
        }
      }
      return 0;
    }
LABEL_35:
    unsigned int v32 = *((_DWORD *)a1 + 8);
    if (v28 < v32)
    {
      *((_DWORD *)a1 + 9) = v28 + 1;
      *(void *)(v26 + 8 * v28) = a4;
      return 1;
    }
  }
  else
  {
    unsigned int v32 = *((_DWORD *)a1 + 8);
  }
  if (3 * v32 <= 4 * ((int)v28 - *((_DWORD *)a1 + 10)))
  {
    if (v32 >= 0x40) {
      v32 *= 2;
    }
    else {
      unsigned int v32 = 128;
    }
    goto LABEL_65;
  }
  if (v32 - v28 < v32 >> 3)
  {
LABEL_65:
    llvm::SmallPtrSetImplBase::Grow(v25, v32);
    unsigned int v32 = *((_DWORD *)a1 + 8);
    uint64_t v26 = a1[3];
  }
  unsigned int v33 = v32 - 1;
  unsigned int v34 = (v32 - 1) & ((a4 >> 4) ^ (a4 >> 9));
  uint64_t v35 = (void *)(v26 + 8 * v34);
  uint64_t v36 = *v35;
  if (*v35 != -1)
  {
    unint64_t v37 = 0;
    int v38 = 1;
    while (v36 != a4)
    {
      if (v37) {
        BOOL v39 = 0;
      }
      else {
        BOOL v39 = v36 == -2;
      }
      if (v39) {
        unint64_t v37 = v35;
      }
      unsigned int v40 = v34 + v38++;
      unsigned int v34 = v40 & v33;
      uint64_t v35 = (void *)(v26 + 8 * (v40 & v33));
      uint64_t v36 = *v35;
      if (*v35 == -1) {
        goto LABEL_52;
      }
    }
    return 0;
  }
  unint64_t v37 = 0;
LABEL_52:
  if (v37) {
    int v41 = v37;
  }
  else {
    int v41 = v35;
  }
  if (*v41 == a4) {
    return 0;
  }
  if (*v41 == -2) {
    --*((_DWORD *)a1 + 10);
  }
  else {
    ++*((_DWORD *)a1 + 9);
  }
  *int v41 = a4;
  return 1;
}

uint64_t sub_1CC3ABC40(uint64_t result)
{
  char v1 = (void *)(result + 8);
  uint64_t v2 = *(void *)(result + 8) + 16 * *(unsigned int *)(result + 16);
  uint64_t v5 = *(uint64_t **)(v2 - 8);
  uint64_t v3 = (void *)(v2 - 8);
  int v4 = v5;
  uint64_t v6 = *(v3 - 1);
  if (v5 != *(uint64_t **)(v6 + 72))
  {
    uint64_t v7 = result;
    do
    {
      *uint64_t v3 = v4 + 1;
      uint64_t v8 = *v4;
      uint64_t result = sub_1CC3AB990(*(uint64_t **)v7, v6, 1, *v4);
      unsigned int v9 = *(_DWORD *)(v7 + 16);
      if (result)
      {
        uint64_t v10 = *(void *)(v8 + 64);
        if (v9 >= *(_DWORD *)(v7 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v11 = (uint64_t *)(*(void *)(v7 + 8) + 16 * v9);
        uint64_t *v11 = v8;
        v11[1] = v10;
        unsigned int v9 = *(_DWORD *)(v7 + 16) + 1;
        *(_DWORD *)(v7 + 16) = v9;
      }
      uint64_t v12 = *v1 + 16 * v9;
      unsigned int v13 = *(uint64_t **)(v12 - 8);
      uint64_t v3 = (void *)(v12 - 8);
      int v4 = v13;
      uint64_t v6 = *(v3 - 1);
    }
    while (v13 != *(uint64_t **)(v6 + 72));
  }
  return result;
}

uint64_t sub_1CC3ABD20(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if (v3)
      {
        uint64_t v6 = *(void **)a2;
        uint64_t v7 = *(void *)a2 + 16 * v3;
        uint64_t v8 = *(void **)a1;
        do
        {
          *uint64_t v8 = *v6;
          v8[1] = v6[1];
          v6 += 2;
          v8 += 2;
        }
        while (v6 != (void *)v7);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v3)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v4)
      {
        unsigned int v9 = *(void **)a2;
        uint64_t v10 = *(void *)a2 + 16 * v4;
        int v11 = *(void **)a1;
        do
        {
          void *v11 = *v9;
          v11[1] = v9[1];
          v9 += 2;
          v11 += 2;
        }
        while (v9 != (void *)v10);
      }
      else
      {
        uint64_t v4 = 0;
      }
      if (v4 != v3) {
        memcpy((void *)(*(void *)a1 + 16 * v4), (const void *)(*(void *)a2 + 16 * v4), *(void *)a2 + 16 * v3 - (*(void *)a2 + 16 * v4));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t sub_1CC3ABE30(uint64_t result)
{
  char v1 = (void *)(result + 8);
  uint64_t v2 = *(void *)(result + 8) + 16 * *(unsigned int *)(result + 16);
  uint64_t v5 = *(uint64_t **)(v2 - 8);
  uint64_t v3 = (void *)(v2 - 8);
  uint64_t v4 = v5;
  uint64_t v6 = *(v3 - 1);
  if (v5 != *(uint64_t **)(v6 + 96))
  {
    uint64_t v7 = result;
    do
    {
      *uint64_t v3 = v4 + 1;
      uint64_t v8 = *v4;
      uint64_t result = sub_1CC3AB990(*(uint64_t **)v7, v6, 1, *v4);
      unsigned int v9 = *(_DWORD *)(v7 + 16);
      if (result)
      {
        uint64_t v10 = *(void *)(v8 + 88);
        if (v9 >= *(_DWORD *)(v7 + 20)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v11 = (uint64_t *)(*(void *)(v7 + 8) + 16 * v9);
        uint64_t *v11 = v8;
        v11[1] = v10;
        unsigned int v9 = *(_DWORD *)(v7 + 16) + 1;
        *(_DWORD *)(v7 + 16) = v9;
      }
      uint64_t v12 = *v1 + 16 * v9;
      unsigned int v13 = *(uint64_t **)(v12 - 8);
      uint64_t v3 = (void *)(v12 - 8);
      uint64_t v4 = v13;
      uint64_t v6 = *(v3 - 1);
    }
    while (v13 != *(uint64_t **)(v6 + 96));
  }
  return result;
}

void sub_1CC3ABF10()
{
}

uint64_t sub_1CC3ABFAC(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCD0B98;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F260FFA8;
  long long v3 = *a2;
  *(void *)(a1 + 264) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 248) = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD0BA0, memory_order_acquire) != -1)
  {
    v7[0] = sub_1CC3ABF10;
    v7[1] = &PassRegistry;
    uint64_t v6 = v7;
    std::__call_once(&qword_1EBCD0BA0, &v6, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

uint64_t llvm::verifyMachineFunction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*((char *)a2 + 23) >= 0) {
    long long v3 = a2;
  }
  else {
    long long v3 = (uint64_t *)*a2;
  }
  v13[0] = 0;
  v13[1] = v3;
  v13[10] = v15;
  v13[11] = v15;
  v13[12] = 8;
  int v14 = 0;
  v15[8] = v16;
  v15[9] = 0x600000000;
  v16[12] = 0;
  long long v17 = 0u;
  int v18 = 0;
  uint64_t v19 = v21;
  uint64_t v20 = 0x1000000000;
  v21[8] = v22;
  v21[9] = 0x1000000000;
  v22[8] = v23;
  v22[9] = 0x1000000000;
  v23[8] = v24;
  v23[9] = 0x400000000;
  int v26 = 0;
  uint64_t v25 = 0;
  v24[2] = 0u;
  int v4 = sub_1CC3AC234((uint64_t)v13, a3);
  uint64_t result = sub_1CC3B58BC((uint64_t)v13);
  if (v4)
  {
    uint64_t v10 = "Found ";
    __int16 v11 = 259;
    __int16 v9 = 264;
    LODWORD(v8[0]) = v4;
    sub_1CD3E3950((uint64_t *)&v10, v8, (uint64_t)v12);
    uint64_t v6 = " machine code errors.";
    __int16 v7 = 259;
    sub_1CD3E3950(v12, (uint64_t *)&v6, (uint64_t)v13);
    llvm::report_fatal_error((llvm *)v13, (const llvm::Twine *)1);
  }
  return result;
}

uint64_t sub_1CC3AC234(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  v1498[4] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 16) = a2;
  uint64_t v4 = a1 + 16;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 24) = *(void *)(a2 + 8);
  *(void *)(a1 + 32) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  *(void *)(v4 + 24) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v6 = *(void *)(a2 + 40);
  v1460 = (const llvm::MachineFunction **)v4;
  *(void *)(v4 + 32) = v6;
  uint64_t v7 = **(void **)(a2 + 360);
  if ((v7 & 0x10) != 0) {
    return *(unsigned int *)(v3 + 56);
  }
  *(unsigned char *)(v3 + 60) = (v7 & 0x40) != 0;
  *(unsigned char *)(v3 + 61) = (v7 & 0x80) != 0;
  *(unsigned char *)(v3 + 62) = (v7 & 0x400) != 0;
  uint64_t v1423 = v3 + 592;
  *(_OWORD *)(v3 + 592) = 0u;
  *(_OWORD *)(v3 + 608) = 0u;
  uint64_t v8 = *(void *)v3;
  if (*(void *)v3)
  {
    __int16 v9 = *(llvm::PMDataManager **)(*(void *)(v8 + 8) + 24);
    uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(v9, &llvm::LiveIntervals::ID, 1);
    if (AnalysisPass)
    {
      uint64_t v11 = (*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::LiveIntervals::ID);
      *(void *)(v3 + 600) = v11;
      uint64_t v8 = *(void *)v3;
      if (v11)
      {
LABEL_9:
        unsigned int v13 = *(llvm::PMDataManager **)(*(void *)(v8 + 8) + 24);
        uint64_t v14 = llvm::PMDataManager::findAnalysisPass(v13, &llvm::LiveStacks::ID, 1);
        if (v14)
        {
          uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::LiveStacks::ID);
          unsigned int v13 = *(llvm::PMDataManager **)(*(void *)(*(void *)v3 + 8) + 24);
        }
        *(void *)(v3 + 608) = v14;
        uint64_t v15 = llvm::PMDataManager::findAnalysisPass(v13, &llvm::SlotIndexes::ID, 1);
        if (v15) {
          uint64_t v15 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v15 + 96))(v15, &llvm::SlotIndexes::ID);
        }
        *(void *)(v3 + 616) = v15;
        uint64_t v6 = *(void *)(v3 + 48);
        goto LABEL_14;
      }
      __int16 v9 = *(llvm::PMDataManager **)(*(void *)(v8 + 8) + 24);
    }
    uint64_t v12 = llvm::PMDataManager::findAnalysisPass(v9, &llvm::LiveVariables::ID, 1);
    if (v12)
    {
      uint64_t v12 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::LiveVariables::ID);
      uint64_t v8 = *(void *)v3;
    }
    *(void *)uint64_t v1423 = v12;
    goto LABEL_9;
  }
LABEL_14:
  if ((**(unsigned char **)(a2 + 360) & 8) != 0 && *(_DWORD *)(v6 + 32))
  {
    sub_1CC3B670C(v3, "Function has NoVRegs property but there are VReg operands", (llvm::Value **)a2);
    uint64_t v6 = *(void *)(v3 + 48);
  }
  *(void *)(v3 + 560) = 0;
  int v16 = *(_DWORD *)(v6 + 416);
  if (v16)
  {
    unint64_t v1488 = (unint64_t)&v1490;
    uint64_t v1489 = 0x600000000;
    unsigned int v17 = *(_DWORD *)(v6 + 360);
    if (v17 && &v1488 != (unint64_t *)(v6 + 352))
    {
      if (v17 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(&v1490, *(const void **)(v6 + 352), 8 * *(unsigned int *)(v6 + 360));
      LODWORD(v1489) = v17;
      int v16 = *(_DWORD *)(v6 + 416);
    }
    int v1492 = v16;
  }
  else
  {
    (*(void (**)(unint64_t *__return_ptr))(**(void **)(v3 + 40) + 88))(&v1488);
  }
  v1421 = (void **)(v3 + 176);
  if ((unint64_t *)(v3 + 176) != &v1488)
  {
    int v18 = v1489;
    uint64_t v19 = *(unsigned int *)(v3 + 184);
    if (v19 >= v1489)
    {
      if (v1489) {
        memmove(*v1421, (const void *)v1488, 8 * v1489);
      }
    }
    else
    {
      if (*(_DWORD *)(v3 + 188) < v1489)
      {
        *(_DWORD *)(v3 + 184) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v19) {
        memmove(*v1421, (const void *)v1488, 8 * v19);
      }
      else {
        uint64_t v19 = 0;
      }
      if (v19 != v1489) {
        memcpy((char *)*v1421 + 8 * v19, (const void *)(v1488 + 8 * v19), 8 * v1489 - 8 * v19);
      }
    }
    *(_DWORD *)(v3 + 184) = v18;
  }
  int v20 = v1492;
  *(_DWORD *)(v3 + 240) = v1492;
  if ((long long *)v1488 != &v1490)
  {
    free((void *)v1488);
    int v20 = *(_DWORD *)(v3 + 240);
  }
  if (v20)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (v20 - 1) >> 6;
    int v23 = *v1421;
    uint64_t v24 = v22 << 6;
    uint64_t v25 = (uint64_t *)*v1421;
    while (1)
    {
      uint64_t v27 = *v25++;
      uint64_t v26 = v27;
      unint64_t v28 = v24 == v21 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v20 : -1;
      unint64_t v29 = v28 & v26;
      if (v29) {
        break;
      }
      v21 += 64;
      if (v24 + 64 == v21) {
        goto LABEL_70;
      }
    }
    int v30 = __clz(__rbit64(v29)) + v21;
    if ((v30 & 0x80000000) == 0)
    {
      uint64_t v31 = *(void *)(v3 + 40);
      unsigned int v32 = (uint64_t *)(v31 + 8);
      if (!v31) {
        unsigned int v32 = 0;
      }
      uint64_t v33 = v32[6];
      uint64_t v34 = *v32;
      do
      {
        uint64_t v35 = *(unsigned int *)(v34 + 24 * v30 + 4);
        if (*(_WORD *)(v33 + 2 * v35))
        {
          int v36 = *(unsigned __int16 *)(v33 + 2 * v35) + v30;
          unint64_t v37 = (unsigned __int16 *)(v33 + 2 + 2 * v35);
          do
          {
            v23[(unsigned __int16)v36 >> 6] |= 1 << v36;
            int v38 = *v37++;
            v36 += v38;
          }
          while (v38);
        }
        unint64_t v5 = (v30 + 1);
        if (v5 == v20) {
          break;
        }
        unsigned int v39 = v5 >> 6;
        if (v5 >> 6 > v22) {
          break;
        }
        uint64_t v40 = 0;
        int v41 = v5 & 0x3F;
        BOOL v66 = v41 == 0;
        unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v41;
        uint64_t v43 = v66 ? -1 : ~v42;
        unint64_t v5 = -64 * v39;
        uint64_t v44 = v22 - v39;
        uint64_t v45 = (char *)&v23[v39];
        while (1)
        {
          uint64_t v46 = v40 ? -1 : v43;
          unint64_t v47 = v44 == v40 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v20 : -1;
          unint64_t v48 = v46 & v47 & *(void *)&v45[8 * v40];
          if (v48) {
            break;
          }
          unint64_t v5 = (v5 - 64);
          if (v44 + 1 == ++v40) {
            goto LABEL_70;
          }
        }
        int v30 = __clz(__rbit64(v48)) - v5;
      }
      while (v30 >= 0);
    }
  }
LABEL_70:
  if (*((const llvm::MachineFunction **)*v1460 + 40) != (const llvm::MachineFunction *)((char *)*v1460 + 320)) {
    sub_1CC3B6B0C(v3, *((void *)*v1460 + 41));
  }
  uint64_t v49 = *(void **)(v3 + 88);
  uint64_t v1438 = a2;
  if (v49 != *(void **)(v3 + 80))
  {
    uint64_t v1271 = *(unsigned int *)(v3 + 96);
    if (v1271 >= 0x21 && 4 * (*(_DWORD *)(v3 + 100) - *(_DWORD *)(v3 + 104)) < v1271)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v3 + 80));
      goto LABEL_74;
    }
    memset(v49, 255, 8 * v1271);
  }
  *(_DWORD *)(v3 + 100) = 0;
  *(_DWORD *)(v3 + 104) = 0;
LABEL_74:
  uint64_t v50 = *v1460;
  uint64_t v51 = (uint64_t)*v1460 + 320;
  uint64_t v52 = (void *)*((void *)*v1460 + 41);
  uint64_t v1469 = v3;
  if (v52 != (void *)v51)
  {
    while (1)
    {
      uint64_t v53 = v3;
      uint64_t v54 = *(void *)(v3 + 88);
      uint64_t v55 = *(unsigned int *)(v3 + 100);
      if (v54 != *(void *)(v3 + 80)) {
        break;
      }
      if (v55)
      {
        uint64_t v56 = 0;
        uint64_t v57 = 8 * v55;
        uint64_t v58 = *(void **)(v3 + 88);
        while ((void *)*v58 != v52)
        {
          if (*v58 == -2) {
            uint64_t v56 = v58;
          }
          ++v58;
          v57 -= 8;
          if (!v57)
          {
            if (!v56) {
              goto LABEL_83;
            }
            *uint64_t v56 = v52;
            --*(_DWORD *)(v3 + 104);
            goto LABEL_107;
          }
        }
        goto LABEL_107;
      }
LABEL_83:
      uint64_t v53 = v3;
      unsigned int v59 = *(_DWORD *)(v3 + 96);
      if (v55 >= v59) {
        goto LABEL_86;
      }
      *(_DWORD *)(v3 + 100) = v55 + 1;
      *(void *)(v54 + 8 * v55) = v52;
LABEL_107:
      unint64_t v1488 = (unint64_t)v52;
      unsigned __int16 v69 = sub_1CC3B6B7C(v3 + 568, (uint64_t *)&v1488);
      int v71 = (uint64_t *)v52[8];
      unsigned int v70 = (uint64_t *)v52[9];
      if (v71 != v70)
      {
        while (1)
        {
          uint64_t v72 = v69[17];
          uint64_t v73 = *v71;
          uint64_t v74 = *((unsigned int *)v69 + 37);
          if (v72 != v69[16]) {
            break;
          }
          if (v74)
          {
            int v75 = 0;
            uint64_t v76 = 8 * v74;
            uint64_t v77 = (void *)v69[17];
            while (*v77 != v73)
            {
              if (*v77 == -2) {
                int v75 = v77;
              }
              ++v77;
              v76 -= 8;
              if (!v76)
              {
                if (!v75) {
                  goto LABEL_116;
                }
                void *v75 = v73;
                --*((_DWORD *)v69 + 38);
                goto LABEL_140;
              }
            }
            goto LABEL_140;
          }
LABEL_116:
          unint64_t v5 = *((unsigned int *)v69 + 36);
          if (v74 >= v5) {
            goto LABEL_119;
          }
          *((_DWORD *)v69 + 37) = v74 + 1;
          *(void *)(v72 + 8 * v74) = v73;
LABEL_140:
          if (++v71 == v70)
          {
            int v71 = (uint64_t *)v52[8];
            uint64_t v87 = v52[9];
            goto LABEL_149;
          }
        }
        unint64_t v5 = *((unsigned int *)v69 + 36);
LABEL_119:
        if (3 * (int)v5 <= (4 * (v74 - *((_DWORD *)v69 + 38))))
        {
          if (v5 >= 0x40) {
            LODWORD(v5) = 2 * v5;
          }
          else {
            LODWORD(v5) = 128;
          }
        }
        else if ((int)v5 - (int)v74 >= v5 >> 3)
        {
          goto LABEL_121;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v69 + 16), v5);
        unint64_t v5 = *((unsigned int *)v69 + 36);
        uint64_t v72 = v69[17];
LABEL_121:
        int v78 = v5 - 1;
        unsigned int v79 = (v5 - 1) & ((v73 >> 4) ^ (v73 >> 9));
        BOOL v80 = (void *)(v72 + 8 * v79);
        uint64_t v81 = *v80;
        if (*v80 == -1)
        {
          long long v82 = 0;
LABEL_133:
          if (v82) {
            unsigned int v86 = v82;
          }
          else {
            unsigned int v86 = v80;
          }
          if (*v86 != v73)
          {
            if (*v86 == -2) {
              --*((_DWORD *)v69 + 38);
            }
            else {
              ++*((_DWORD *)v69 + 37);
            }
            *unsigned int v86 = v73;
          }
        }
        else
        {
          long long v82 = 0;
          int v83 = 1;
          while (v81 != v73)
          {
            if (v82) {
              BOOL v84 = 0;
            }
            else {
              BOOL v84 = v81 == -2;
            }
            if (v84) {
              long long v82 = v80;
            }
            unsigned int v85 = v79 + v83++;
            unsigned int v79 = v85 & v78;
            BOOL v80 = (void *)(v72 + 8 * (v85 & v78));
            uint64_t v81 = *v80;
            if (*v80 == -1) {
              goto LABEL_133;
            }
          }
        }
        goto LABEL_140;
      }
      uint64_t v87 = v52[8];
LABEL_149:
      if (*((_DWORD *)v69 + 37) - *((_DWORD *)v69 + 38) != ((unint64_t)(v87 - (void)v71) >> 3)) {
        sub_1CC3B5D94(v3, "MBB has duplicate entries in its predecessor list.", (unint64_t)v52);
      }
      uint64_t v89 = (uint64_t *)v52[11];
      int v88 = (uint64_t *)v52[12];
      if (v89 != v88)
      {
        while (1)
        {
          uint64_t v90 = v69[29];
          uint64_t v91 = *v89;
          uint64_t v92 = *((unsigned int *)v69 + 61);
          if (v90 != v69[28]) {
            break;
          }
          if (v92)
          {
            int v93 = 0;
            uint64_t v94 = 8 * v92;
            unsigned int v95 = (void *)v69[29];
            while (*v95 != v91)
            {
              if (*v95 == -2) {
                int v93 = v95;
              }
              ++v95;
              v94 -= 8;
              if (!v94)
              {
                if (!v93) {
                  goto LABEL_160;
                }
                *int v93 = v91;
                --*((_DWORD *)v69 + 62);
                goto LABEL_184;
              }
            }
            goto LABEL_184;
          }
LABEL_160:
          unint64_t v5 = *((unsigned int *)v69 + 60);
          if (v92 >= v5) {
            goto LABEL_163;
          }
          *((_DWORD *)v69 + 61) = v92 + 1;
          *(void *)(v90 + 8 * v92) = v91;
LABEL_184:
          if (++v89 == v88)
          {
            uint64_t v89 = (uint64_t *)v52[11];
            uint64_t v105 = v52[12];
            goto LABEL_193;
          }
        }
        unint64_t v5 = *((unsigned int *)v69 + 60);
LABEL_163:
        if (3 * (int)v5 <= (4 * (v92 - *((_DWORD *)v69 + 62))))
        {
          if (v5 >= 0x40) {
            LODWORD(v5) = 2 * v5;
          }
          else {
            LODWORD(v5) = 128;
          }
        }
        else if ((int)v5 - (int)v92 >= v5 >> 3)
        {
          goto LABEL_165;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v69 + 28), v5);
        unint64_t v5 = *((unsigned int *)v69 + 60);
        uint64_t v90 = v69[29];
LABEL_165:
        int v96 = v5 - 1;
        unsigned int v97 = (v5 - 1) & ((v91 >> 4) ^ (v91 >> 9));
        int v98 = (void *)(v90 + 8 * v97);
        uint64_t v99 = *v98;
        if (*v98 == -1)
        {
          uint64_t v100 = 0;
LABEL_177:
          if (v100) {
            uint64_t v104 = v100;
          }
          else {
            uint64_t v104 = v98;
          }
          if (*v104 != v91)
          {
            if (*v104 == -2) {
              --*((_DWORD *)v69 + 62);
            }
            else {
              ++*((_DWORD *)v69 + 61);
            }
            void *v104 = v91;
          }
        }
        else
        {
          uint64_t v100 = 0;
          int v101 = 1;
          while (v99 != v91)
          {
            if (v100) {
              BOOL v102 = 0;
            }
            else {
              BOOL v102 = v99 == -2;
            }
            if (v102) {
              uint64_t v100 = v98;
            }
            unsigned int v103 = v97 + v101++;
            unsigned int v97 = v103 & v96;
            int v98 = (void *)(v90 + 8 * (v103 & v96));
            uint64_t v99 = *v98;
            if (*v98 == -1) {
              goto LABEL_177;
            }
          }
        }
        goto LABEL_184;
      }
      uint64_t v105 = v52[11];
LABEL_193:
      if (*((_DWORD *)v69 + 61) - *((_DWORD *)v69 + 62) != ((unint64_t)(v105 - (void)v89) >> 3)) {
        sub_1CC3B5D94(v3, "MBB has duplicate entries in its successor list.", (unint64_t)v52);
      }
      uint64_t v52 = (void *)v52[1];
      if (v52 == (void *)v51)
      {
        uint64_t v50 = *v1460;
        goto LABEL_203;
      }
    }
    unsigned int v59 = *(_DWORD *)(v3 + 96);
LABEL_86:
    if (3 * v59 <= 4 * ((int)v55 - *(_DWORD *)(v53 + 104)))
    {
      if (v59 >= 0x40) {
        v59 *= 2;
      }
      else {
        unsigned int v59 = 128;
      }
    }
    else if (v59 - v55 >= v59 >> 3)
    {
      goto LABEL_88;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)(v3 + 80), v59);
    unsigned int v59 = *(_DWORD *)(v3 + 96);
    uint64_t v54 = *(void *)(v3 + 88);
LABEL_88:
    unsigned int v60 = v59 - 1;
    unsigned int v61 = (v59 - 1) & ((v52 >> 4) ^ (v52 >> 9));
    __int16 v62 = (void *)(v54 + 8 * v61);
    unsigned int v63 = (void *)*v62;
    if (*v62 == -1)
    {
      int v64 = 0;
LABEL_100:
      if (v64) {
        uint64_t v68 = v64;
      }
      else {
        uint64_t v68 = v62;
      }
      if ((void *)*v68 != v52)
      {
        if (*v68 == -2) {
          --*(_DWORD *)(v3 + 104);
        }
        else {
          ++*(_DWORD *)(v3 + 100);
        }
        *uint64_t v68 = v52;
      }
    }
    else
    {
      int v64 = 0;
      int v65 = 1;
      while (v63 != v52)
      {
        if (v64) {
          BOOL v66 = 0;
        }
        else {
          BOOL v66 = v63 == (void *)-2;
        }
        if (v66) {
          int v64 = v62;
        }
        unsigned int v67 = v61 + v65++;
        unsigned int v61 = v67 & v60;
        __int16 v62 = (void *)(v54 + 8 * (v67 & v60));
        unsigned int v63 = (void *)*v62;
        if (*v62 == -1) {
          goto LABEL_100;
        }
      }
    }
    goto LABEL_107;
  }
LABEL_203:
  uint64_t v106 = a2;
  if (*((const llvm::MachineFunction **)v50 + 40) == (const llvm::MachineFunction *)((char *)v50 + 320)) {
    goto LABEL_209;
  }
  uint64_t v107 = *(void *)(v3 + 32);
  int v108 = *(_DWORD *)(v107 + 68);
  if (*(_DWORD *)(v107 + 64) == -1 && v108 == -1) {
    goto LABEL_209;
  }
  int v1437 = *(_DWORD *)(v107 + 64);
  unint64_t v1488 = (unint64_t)&v1490;
  uint64_t v1489 = 0x800000000;
  unint64_t v1293 = *((void *)v50 + 14) - *((void *)v50 + 13);
  unint64_t v1294 = (v1293 >> 3);
  int v1447 = v108;
  if ((v1293 >> 3))
  {
    unint64_t v1295 = v1293 >> 3;
    if (v1294 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v1293 >> 3)) {
      bzero(&v1490, 12 * ((12 * (unint64_t)v1294 - 12) / 0xC) + 12);
    }
    LODWORD(v1489) = v1295;
  }
  v1482 = (uint64_t *)v1486;
  v1483 = (uint64_t *)v1486;
  uint64_t v1484 = 8;
  LODWORD(v1485) = 0;
  sub_1CD550E1C((llvm::SmallPtrSetImplBase *)&v1482, (uint64_t)v1460, &v1471);
  v1323 = v1472;
  v1322 = (unsigned char *)v1473;
  if ((void *)v1473 == v1472) {
    goto LABEL_2610;
  }
  v1468 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
  int v1324 = v1437;
  do
  {
    unint64_t v1325 = 0xAAAAAAAAAAAAAAABLL * ((v1322 - v1323) >> 3);
    if ((v1325 & 0xFFFFFFFE) != 0)
    {
      v1328 = (char *)(v1488 + 12 * *(int *)(*(void *)&v1323[24 * (v1325 - 2)] + 24));
      int v1326 = *((_DWORD *)v1328 + 1);
      unint64_t v1327 = v1328[9];
    }
    else
    {
      int v1326 = 0;
      unint64_t v1327 = 0;
    }
    int v1329 = v1447;
    unint64_t v1330 = *((void *)v1322 - 3);
    unint64_t v1331 = v1330 + 48;
    unint64_t v1332 = *(void *)(v1330 + 56);
    int v1333 = v1326;
    unint64_t v1452 = v1327;
    v1459 = (llvm::raw_ostream *)(v1330 + 48);
    while (v1332 != v1331)
    {
      int v1334 = **(unsigned __int16 **)(v1332 + 16);
      if (v1324 == v1334)
      {
        int v1334 = v1324;
        if (v1327)
        {
          sub_1CC3B6180(v1469, "FrameSetup is after another FrameSetup", v1332);
          int v1329 = v1447;
          int v1334 = **(unsigned __int16 **)(v1332 + 16);
        }
        uint64_t v1335 = *(void *)(v1332 + 32);
        uint64_t v1336 = *(void *)(v1335 + 16);
        if (*(_DWORD *)(*(void *)(v1469 + 32) + 64) == v1334) {
          v1336 += *(void *)(v1335 + 48);
        }
        v1333 -= v1336;
        unint64_t v1327 = 1;
      }
      if (v1329 == v1334)
      {
        uint64_t v1337 = *(void *)(v1332 + 32);
        uint64_t v1338 = *(void *)(v1337 + 16);
        if (*(_DWORD *)(*(void *)(v1469 + 32) + 64) == v1329) {
          v1338 += *(void *)(v1337 + 48);
        }
        if (v1327)
        {
          if (v1333 >= 0) {
            unint64_t v1339 = v1333;
          }
          else {
            unint64_t v1339 = -v1333;
          }
          if (v1339 != v1338)
          {
            sub_1CC3B6180(v1469, "FrameDestroy <n> is after FrameSetup <m>", v1332);
            v1341 = (llvm::raw_ostream *)llvm::errs(v1340);
            v1342 = v1341;
            v1343 = (void *)*((void *)v1341 + 4);
            if (*((void *)v1341 + 3) - (void)v1343 > 0xDuLL)
            {
              qmemcpy(v1343, "FrameDestroy <", 14);
              *((void *)v1341 + 4) += 14;
            }
            else
            {
              llvm::raw_ostream::write(v1341, "FrameDestroy <", 0xEuLL);
            }
            unint64_t v1344 = (int)v1338;
            if (v1338 << 32 < (uint64_t)0xFFFFFFFF00000001)
            {
              unint64_t v1344 = -(uint64_t)(int)v1338;
              v1345 = v1342;
              int v1346 = 1;
            }
            else
            {
              v1345 = v1342;
              int v1346 = 0;
            }
            sub_1CD098D14(v1345, v1344, 0, 0, v1346);
            v1347 = (void *)*((void *)v1342 + 4);
            if (*((void *)v1342 + 3) - (void)v1347 > 0x16uLL)
            {
              qmemcpy(v1347, "> is after FrameSetup <", 23);
              *((void *)v1342 + 4) += 23;
            }
            else
            {
              llvm::raw_ostream::write(v1342, "> is after FrameSetup <", 0x17uLL);
            }
            sub_1CD098D14(v1342, v1339, 0, 0, 0);
            uint64_t v1348 = *((void *)v1342 + 4);
            if ((unint64_t)(*((void *)v1342 + 3) - v1348) > 2)
            {
              *(unsigned char *)(v1348 + 2) = 10;
              *(_WORD *)uint64_t v1348 = 11838;
              *((void *)v1342 + 4) += 3;
            }
            else
            {
              llvm::raw_ostream::write(v1342, ">.\n", 3uLL);
            }
LABEL_2440:
            int v1329 = v1447;
          }
          unint64_t v1327 = 0;
          v1333 += v1338;
          goto LABEL_2442;
        }
        sub_1CC3B6180(v1469, "FrameDestroy is not after a FrameSetup", v1332);
        goto LABEL_2440;
      }
LABEL_2442:
      if ((*(unsigned char *)v1332 & 4) == 0)
      {
        while ((*(_WORD *)(v1332 + 44) & 8) != 0)
          unint64_t v1332 = *(void *)(v1332 + 8);
      }
      unint64_t v1332 = *(void *)(v1332 + 8);
      unint64_t v1331 = v1330 + 48;
    }
    v1349 = (char *)(v1488 + 12 * *(int *)(v1330 + 24));
    *(_DWORD *)v1349 = v1326;
    *((_DWORD *)v1349 + 1) = v1333;
    v1349[8] = v1452;
    v1349[9] = v1327;
    v1351 = *(uint64_t **)(v1330 + 64);
    for (unint64_t i = *(uint64_t **)(v1330 + 72); v1351 != i; ++v1351)
    {
      uint64_t v1355 = *v1351;
      v1356 = v1482;
      if (v1483 == v1482)
      {
        int v1357 = HIDWORD(v1484);
        v1358 = (char *)&v1483[HIDWORD(v1484)];
        if (HIDWORD(v1484))
        {
          uint64_t v1359 = 0;
          while (v1483[v1359] != v1355)
          {
            if (HIDWORD(v1484) == ++v1359) {
              goto LABEL_2474;
            }
          }
          v1358 = (char *)&v1483[v1359];
        }
LABEL_2474:
        v1356 = v1483;
      }
      else
      {
        int v1360 = v1484 - 1;
        unsigned int v1361 = (v1484 - 1) & ((v1355 >> 4) ^ (v1355 >> 9));
        v1358 = (char *)&v1483[v1361];
        uint64_t v1362 = *(void *)v1358;
        if (*(void *)v1358 == -1)
        {
          v1363 = 0;
LABEL_2510:
          if (v1363) {
            v1358 = v1363;
          }
          int v1357 = HIDWORD(v1484);
          if (*(void *)v1358 != v1355) {
            v1358 = (char *)&v1483[v1484];
          }
        }
        else
        {
          v1363 = 0;
          int v1364 = 1;
          while (v1362 != v1355)
          {
            if (v1363) {
              BOOL v1365 = 0;
            }
            else {
              BOOL v1365 = v1362 == -2;
            }
            if (v1365) {
              v1363 = v1358;
            }
            unsigned int v1366 = v1361 + v1364++;
            unsigned int v1361 = v1366 & v1360;
            v1358 = (char *)&v1483[v1366 & v1360];
            uint64_t v1362 = *(void *)v1358;
            if (*(void *)v1358 == -1) {
              goto LABEL_2510;
            }
          }
          int v1357 = HIDWORD(v1484);
        }
      }
      if (v1483 == v1356) {
        int v1367 = v1357;
      }
      else {
        int v1367 = v1484;
      }
      if (v1358 != (char *)&v1483[v1367])
      {
        int v1368 = *(_DWORD *)(v1355 + 24);
        if (*(_DWORD *)(v1488 + 12 * v1368 + 4) != v1326 || *(unsigned __int8 *)(v1488 + 12 * v1368 + 9) != v1452)
        {
          v1369 = sub_1CC3B5D94(v1469, "The exit stack state of a predecessor is inconsistent.", v1330);
          v1370 = (llvm::raw_ostream *)llvm::errs(v1369);
          v1371 = v1370;
          uint64_t v1372 = *((void *)v1370 + 4);
          if ((unint64_t)(*((void *)v1370 + 3) - v1372) > 0xB)
          {
            *(_DWORD *)(v1372 + 8) = 544370547;
            *(void *)uint64_t v1372 = *(void *)"Predecessor ";
            *((void *)v1370 + 4) += 12;
          }
          else
          {
            llvm::raw_ostream::write(v1370, "Predecessor ", 0xCuLL);
          }
          v1481 = &v1479;
          uint64_t v1479 = (uint64_t)&unk_1F260D508;
          uint64_t v1480 = v1355;
          v1468((uint64_t)&v1479, v1371);
          uint64_t v1373 = *((void *)v1371 + 4);
          if ((unint64_t)(*((void *)v1371 + 3) - v1373) > 0x10)
          {
            *(unsigned char *)(v1373 + 16) = 40;
            *(_OWORD *)uint64_t v1373 = *(_OWORD *)" has exit state (";
            *((void *)v1371 + 4) += 17;
          }
          else
          {
            llvm::raw_ostream::write(v1371, " has exit state (", 0x11uLL);
          }
          unint64_t v1374 = *(int *)(v1488 + 12 * *(int *)(v1355 + 24) + 4);
          if ((v1374 & 0x80000000) != 0)
          {
            unint64_t v1374 = -(uint64_t)v1374;
            v1375 = v1371;
            int v1376 = 1;
          }
          else
          {
            v1375 = v1371;
            int v1376 = 0;
          }
          sub_1CD098D14(v1375, v1374, 0, 0, v1376);
          v1377 = (_WORD *)*((void *)v1371 + 4);
          if (*((void *)v1371 + 3) - (void)v1377 > 1uLL)
          {
            _WORD *v1377 = 8236;
            *((void *)v1371 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v1371, ", ", 2uLL);
          }
          sub_1CD098D14(v1371, *(unsigned __int8 *)(v1488 + 12 * *(int *)(v1355 + 24) + 9), 0, 0, 0);
          uint64_t v1378 = *((void *)v1371 + 4);
          if ((unint64_t)(*((void *)v1371 + 3) - v1378) > 8)
          {
            *(unsigned char *)(v1378 + 8) = 32;
            *(void *)uint64_t v1378 = *(void *)"), while ";
            *((void *)v1371 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v1371, "), while ", 9uLL);
          }
          v1478 = (void **)&v1476;
          v1476 = (void (**)(void **))&unk_1F260D508;
          unint64_t v1477 = v1330;
          v1468((uint64_t)&v1476, v1371);
          uint64_t v1379 = *((void *)v1371 + 4);
          if ((unint64_t)(*((void *)v1371 + 3) - v1379) > 0x11)
          {
            *(_WORD *)(v1379 + 16) = 10272;
            *(_OWORD *)uint64_t v1379 = *(_OWORD *)" has entry state (";
            *((void *)v1371 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(v1371, " has entry state (", 0x12uLL);
          }
          if (v1326 < 0)
          {
            unint64_t v1380 = -(uint64_t)v1326;
            int v1381 = 1;
          }
          else
          {
            unint64_t v1380 = v1326;
            int v1381 = 0;
          }
          sub_1CD098D14(v1371, v1380, 0, 0, v1381);
          v1382 = (_WORD *)*((void *)v1371 + 4);
          if (*((void *)v1371 + 3) - (void)v1382 > 1uLL)
          {
            _WORD *v1382 = 8236;
            *((void *)v1371 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v1371, ", ", 2uLL);
          }
          sub_1CD098D14(v1371, v1452, 0, 0, 0);
          uint64_t v1383 = *((void *)v1371 + 4);
          if ((unint64_t)(*((void *)v1371 + 3) - v1383) > 2)
          {
            *(unsigned char *)(v1383 + 2) = 10;
            *(_WORD *)uint64_t v1383 = 11817;
            *((void *)v1371 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v1371, ").\n", 3uLL);
          }
          if (v1478 == (void **)&v1476)
          {
            v1476[4]((void **)&v1476);
          }
          else if (v1478)
          {
            (*((void (**)(void))*v1478 + 5))();
          }
          if (v1481 == &v1479)
          {
            (*(void (**)(uint64_t *))(v1479 + 32))(&v1479);
          }
          else if (v1481)
          {
            (*(void (**)(void))(*v1481 + 40))();
          }
        }
      }
    }
    v1352 = *(uint64_t **)(v1330 + 88);
    for (uint64_t j = *(uint64_t **)(v1330 + 96); v1352 != j; ++v1352)
    {
      uint64_t v1384 = *v1352;
      v1385 = v1482;
      if (v1483 == v1482)
      {
        int v1386 = HIDWORD(v1484);
        v1387 = (char *)&v1483[HIDWORD(v1484)];
        if (HIDWORD(v1484))
        {
          uint64_t v1388 = 0;
          while (v1483[v1388] != v1384)
          {
            if (HIDWORD(v1484) == ++v1388) {
              goto LABEL_2543;
            }
          }
          v1387 = (char *)&v1483[v1388];
        }
LABEL_2543:
        v1385 = v1483;
      }
      else
      {
        int v1389 = v1484 - 1;
        unsigned int v1390 = (v1484 - 1) & ((v1384 >> 4) ^ (v1384 >> 9));
        v1387 = (char *)&v1483[v1390];
        uint64_t v1391 = *(void *)v1387;
        if (*(void *)v1387 == -1)
        {
          v1392 = 0;
LABEL_2579:
          if (v1392) {
            v1387 = v1392;
          }
          int v1386 = HIDWORD(v1484);
          if (*(void *)v1387 != v1384) {
            v1387 = (char *)&v1483[v1484];
          }
        }
        else
        {
          v1392 = 0;
          int v1393 = 1;
          while (v1391 != v1384)
          {
            if (v1392) {
              BOOL v1394 = 0;
            }
            else {
              BOOL v1394 = v1391 == -2;
            }
            if (v1394) {
              v1392 = v1387;
            }
            unsigned int v1395 = v1390 + v1393++;
            unsigned int v1390 = v1395 & v1389;
            v1387 = (char *)&v1483[v1395 & v1389];
            uint64_t v1391 = *(void *)v1387;
            if (*(void *)v1387 == -1) {
              goto LABEL_2579;
            }
          }
          int v1386 = HIDWORD(v1484);
        }
      }
      if (v1483 == v1385) {
        int v1396 = v1386;
      }
      else {
        int v1396 = v1484;
      }
      if (v1387 != (char *)&v1483[v1396])
      {
        int v1397 = *(_DWORD *)(v1384 + 24);
        if (*(_DWORD *)(v1488 + 12 * v1397) != v1333 || *(unsigned __int8 *)(v1488 + 12 * v1397 + 8) != v1327)
        {
          v1398 = sub_1CC3B5D94(v1469, "The entry stack state of a successor is inconsistent.", v1330);
          v1399 = (llvm::raw_ostream *)llvm::errs(v1398);
          v1400 = v1399;
          uint64_t v1401 = *((void *)v1399 + 4);
          if ((unint64_t)(*((void *)v1399 + 3) - v1401) > 9)
          {
            *(_WORD *)(v1401 + 8) = 8306;
            *(void *)uint64_t v1401 = *(void *)"Successor ";
            *((void *)v1399 + 4) += 10;
          }
          else
          {
            llvm::raw_ostream::write(v1399, "Successor ", 0xAuLL);
          }
          v1481 = &v1479;
          uint64_t v1479 = (uint64_t)&unk_1F260D508;
          uint64_t v1480 = v1384;
          v1468((uint64_t)&v1479, v1400);
          uint64_t v1402 = *((void *)v1400 + 4);
          if ((unint64_t)(*((void *)v1400 + 3) - v1402) > 0x11)
          {
            *(_WORD *)(v1402 + 16) = 10272;
            *(_OWORD *)uint64_t v1402 = *(_OWORD *)" has entry state (";
            *((void *)v1400 + 4) += 18;
          }
          else
          {
            llvm::raw_ostream::write(v1400, " has entry state (", 0x12uLL);
          }
          unint64_t v1403 = *(int *)(v1488 + 12 * *(int *)(v1384 + 24));
          if ((v1403 & 0x80000000) != 0)
          {
            unint64_t v1403 = -(uint64_t)v1403;
            v1404 = v1400;
            int v1405 = 1;
          }
          else
          {
            v1404 = v1400;
            int v1405 = 0;
          }
          sub_1CD098D14(v1404, v1403, 0, 0, v1405);
          v1406 = (_WORD *)*((void *)v1400 + 4);
          if (*((void *)v1400 + 3) - (void)v1406 > 1uLL)
          {
            _WORD *v1406 = 8236;
            *((void *)v1400 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v1400, ", ", 2uLL);
          }
          sub_1CD098D14(v1400, *(unsigned __int8 *)(v1488 + 12 * *(int *)(v1384 + 24) + 8), 0, 0, 0);
          uint64_t v1407 = *((void *)v1400 + 4);
          if ((unint64_t)(*((void *)v1400 + 3) - v1407) > 8)
          {
            *(unsigned char *)(v1407 + 8) = 32;
            *(void *)uint64_t v1407 = *(void *)"), while ";
            *((void *)v1400 + 4) += 9;
          }
          else
          {
            llvm::raw_ostream::write(v1400, "), while ", 9uLL);
          }
          v1478 = (void **)&v1476;
          v1476 = (void (**)(void **))&unk_1F260D508;
          unint64_t v1477 = v1330;
          v1468((uint64_t)&v1476, v1400);
          uint64_t v1408 = *((void *)v1400 + 4);
          if ((unint64_t)(*((void *)v1400 + 3) - v1408) > 0x10)
          {
            *(unsigned char *)(v1408 + 16) = 40;
            *(_OWORD *)uint64_t v1408 = *(_OWORD *)" has exit state (";
            *((void *)v1400 + 4) += 17;
          }
          else
          {
            llvm::raw_ostream::write(v1400, " has exit state (", 0x11uLL);
          }
          if (v1333 < 0)
          {
            unint64_t v1409 = -(uint64_t)v1333;
            int v1410 = 1;
          }
          else
          {
            unint64_t v1409 = v1333;
            int v1410 = 0;
          }
          sub_1CD098D14(v1400, v1409, 0, 0, v1410);
          v1411 = (_WORD *)*((void *)v1400 + 4);
          if (*((void *)v1400 + 3) - (void)v1411 > 1uLL)
          {
            _WORD *v1411 = 8236;
            *((void *)v1400 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v1400, ", ", 2uLL);
          }
          sub_1CD098D14(v1400, v1327, 0, 0, 0);
          uint64_t v1412 = *((void *)v1400 + 4);
          if ((unint64_t)(*((void *)v1400 + 3) - v1412) > 2)
          {
            *(unsigned char *)(v1412 + 2) = 10;
            *(_WORD *)uint64_t v1412 = 11817;
            *((void *)v1400 + 4) += 3;
          }
          else
          {
            llvm::raw_ostream::write(v1400, ").\n", 3uLL);
          }
          if (v1478 == (void **)&v1476)
          {
            v1476[4]((void **)&v1476);
          }
          else if (v1478)
          {
            (*((void (**)(void))*v1478 + 5))();
          }
          if (v1481 == &v1479)
          {
            (*(void (**)(uint64_t *))(v1479 + 32))(&v1479);
          }
          else if (v1481)
          {
            (*(void (**)(void))(*v1481 + 40))();
          }
        }
      }
    }
    unint64_t v1354 = *(void *)v1459 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v106 = v1438;
    int v1324 = v1437;
    if (v1459 != (llvm::raw_ostream *)v1354)
    {
      if (v1354 && (*(unsigned char *)v1354 & 4) != 0)
      {
        __int16 v1413 = *(_WORD *)(v1354 + 44);
      }
      else
      {
        while (1)
        {
          __int16 v1413 = *(_WORD *)(v1354 + 44);
          if ((v1413 & 4) == 0) {
            break;
          }
          unint64_t v1354 = *(void *)v1354 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      int v1414 = v1413 & 0xC;
      int v1415 = v1413 & 4;
      uint64_t v1416 = *(void *)(*(void *)(v1354 + 16) + 8);
      if (v1414) {
        BOOL v1417 = v1415 == 0;
      }
      else {
        BOOL v1417 = 0;
      }
      if (v1417)
      {
        while ((v1416 & 0x20) == 0)
        {
          if ((*(_WORD *)(v1354 + 44) & 8) == 0) {
            goto LABEL_2453;
          }
          unint64_t v1354 = *(void *)(v1354 + 8);
          LOBYTE(v1416) = *(unsigned char *)(*(void *)(v1354 + 16) + 8);
        }
      }
      else if ((v1416 & 0x20) == 0)
      {
        goto LABEL_2453;
      }
      if (v1327) {
        sub_1CC3B5D94(v1469, "A return block ends with a FrameSetup.", v1330);
      }
      if (v1333) {
        sub_1CC3B5D94(v1469, "A return block ends with a nonzero stack adjustment.", v1330);
      }
    }
LABEL_2453:
    sub_1CD520FAC((char *)&v1471);
    v1323 = v1472;
    v1322 = (unsigned char *)v1473;
    uint64_t v3 = v1469;
  }
  while ((void *)v1473 != v1472);
LABEL_2610:
  if (v1322) {
    operator delete(v1322);
  }
  if (v1483 != v1482) {
    free(v1483);
  }
  if ((long long *)v1488 != &v1490) {
    free((void *)v1488);
  }
LABEL_209:
  unint64_t v110 = *(void *)(v106 + 328);
  uint64_t v1419 = v106 + 320;
  if (v110 != v106 + 320)
  {
    v1439 = (unint64_t *)(v3 + 64);
    int v111 = (unsigned int *)(v3 + 100);
    uint64_t v112 = (unsigned int *)(v3 + 96);
    uint64_t v1448 = v3 + 568;
    v1431 = (void **)(v3 + 248);
    v1422 = (unsigned int *)(v3 + 432);
    v1424 = (unsigned int *)(v3 + 272);
    v1425 = (unsigned int *)(v3 + 352);
    v1420 = (void (*)(void))off_1F2615510;
    v1433 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
    v1434 = (unsigned int *)(v3 + 96);
    v1418 = (unsigned int *)(v3 + 100);
    do
    {
      unint64_t *v1439 = 0;
      v1439[1] = 0;
      if ((**((unsigned char **)*v1460 + 45) & 2) == 0 && (**(unsigned char **)(**(void **)(v3 + 48) + 360) & 4) != 0)
      {
        uint64_t v113 = *(unsigned __int16 **)(v110 + 152);
        for (uint64_t k = *(unsigned __int16 **)(v110 + 160); v113 != k; v113 += 8)
        {
          unint64_t v115 = *v113;
          uint64_t v116 = *(void *)(v3 + 40);
          if (*(_DWORD *)(v116 + 16) > v115
            && *(unsigned char *)(*(void *)(*(void *)(v116 + 216) + 16) + v115)
            && ((*(void *)((char *)*v1421 + ((v115 >> 3) & 0x1FF8)) >> v115) & 1) == 0
            && !*(unsigned char *)(v110 + 184)
            && *(void *)(*(void *)(v110 + 32) + 328) != v110)
          {
            int v117 = sub_1CC3B5D94(v3, "MBB has allocatable live-in, but isn't entry or landing-pad.", v110);
            int v118 = *v113;
            uint64_t v119 = (llvm::raw_ostream *)llvm::errs(v117);
            unsigned int v120 = v119;
            unsigned int v121 = (void *)*((void *)v119 + 4);
            if (*((void *)v119 + 3) - (void)v121 > 0xEuLL)
            {
              qmemcpy(v121, "- p. register: ", 15);
              *((void *)v119 + 4) += 15;
            }
            else
            {
              llvm::raw_ostream::write(v119, "- p. register: ", 0xFuLL);
            }
            uint64_t v122 = *(void *)(v3 + 40);
            uint64_t v123 = operator new(0x28uLL);
            *(void *)uint64_t v123 = &unk_1F26154E0;
            v123[2] = v118;
            *((void *)v123 + 2) = v122;
            v123[6] = 0;
            *((void *)v123 + 4) = 0;
            *((void *)&v1490 + 1) = v123;
            v1420();
            uint64_t v124 = (unsigned char *)*((void *)v120 + 4);
            if ((unint64_t)v124 >= *((void *)v120 + 3))
            {
              llvm::raw_ostream::write(v120, 10);
            }
            else
            {
              *((void *)v120 + 4) = v124 + 1;
              unsigned char *v124 = 10;
            }
            if (*((unint64_t **)&v1490 + 1) == &v1488)
            {
              (*(void (**)(unint64_t *))(v1488 + 32))(&v1488);
            }
            else if (*((void *)&v1490 + 1))
            {
              (*(void (**)(void))(**((void **)&v1490 + 1) + 40))();
            }
          }
        }
      }
      uint64_t v1471 = (uint64_t)v1475;
      v1472 = v1475;
      uint64_t v1473 = 4;
      int v1474 = 0;
      uint64_t v125 = *(void ***)(v110 + 88);
      uint64_t v126 = *(void ***)(v110 + 96);
      unsigned int v127 = v110 >> 4;
      if (v125 != v126)
      {
        while (1)
        {
          v1482 = (uint64_t *)*v125;
          int v128 = v1482;
          if (!*((unsigned char *)v1482 + 184)) {
            goto LABEL_265;
          }
          uint64_t v129 = (char *)v1472;
          uint64_t v130 = HIDWORD(v1473);
          if (v1472 != (void *)v1471)
          {
            unsigned int v134 = v1473;
            goto LABEL_244;
          }
          if (!HIDWORD(v1473)) {
            break;
          }
          int32x2_t v131 = 0;
          uint64_t v132 = 8 * HIDWORD(v1473);
          int v133 = (uint64_t **)v1472;
          while (*v133 != v1482)
          {
            if (*v133 == (uint64_t *)-2) {
              int32x2_t v131 = v133;
            }
            ++v133;
            v132 -= 8;
            if (!v132)
            {
              if (!v131) {
                goto LABEL_241;
              }
              _DWORD *v131 = v1482;
              --v1474;
              break;
            }
          }
LABEL_265:
          uint64_t v145 = *(void *)(v3 + 80);
          uint64_t v144 = *(void *)(v3 + 88);
          if (v144 == v145)
          {
            uint64_t v146 = *v111;
            int v147 = (void **)(v144 + 8 * v146);
            if (v146)
            {
              uint64_t v148 = 0;
              uint64_t v149 = 8 * v146;
              while (*(uint64_t **)(v144 + v148) != v128)
              {
                v148 += 8;
                if (v149 == v148) {
                  goto LABEL_283;
                }
              }
              int v147 = (void **)(v144 + v148);
            }
LABEL_283:
            uint64_t v145 = *(void *)(v3 + 88);
          }
          else
          {
            uint64_t v150 = *v112;
            int v151 = v150 - 1;
            unsigned int v152 = (v150 - 1) & ((v128 >> 4) ^ (v128 >> 9));
            int v147 = (void **)(v144 + 8 * v152);
            unsigned int v153 = (uint64_t *)*v147;
            if (*v147 == (void *)-1)
            {
              uint64_t v154 = 0;
LABEL_309:
              if (v154) {
                int v147 = v154;
              }
              if (*v147 != v128) {
                int v147 = (void **)(v144 + 8 * v150);
              }
            }
            else
            {
              uint64_t v154 = 0;
              int v155 = 1;
              while (v153 != v128)
              {
                if (v154) {
                  BOOL v156 = 0;
                }
                else {
                  BOOL v156 = v153 == (uint64_t *)-2;
                }
                if (v156) {
                  uint64_t v154 = v147;
                }
                unsigned int v157 = v152 + v155++;
                unsigned int v152 = v157 & v151;
                int v147 = (void **)(v144 + 8 * (v157 & v151));
                unsigned int v153 = (uint64_t *)*v147;
                if (*v147 == (void *)-1) {
                  goto LABEL_309;
                }
              }
            }
          }
          if (v144 == v145) {
            uint64_t v158 = v111;
          }
          else {
            uint64_t v158 = v112;
          }
          if (v147 == (void **)(v144 + 8 * *v158)) {
            sub_1CC3B5D94(v3, "MBB has successor that isn't part of the function.", v110);
          }
          unint64_t v159 = sub_1CC3B6B7C(v1448, (uint64_t *)&v1482);
          uint64_t v161 = v159[16];
          uint64_t v160 = v159[17];
          if (v160 == v161)
          {
            uint64_t v162 = *((unsigned int *)v159 + 37);
            uint64_t v163 = (void *)(v160 + 8 * v162);
            if (v162)
            {
              uint64_t v164 = 0;
              while (*(void *)(v160 + v164) != v110)
              {
                v164 += 8;
                if (8 * v162 == v164) {
                  goto LABEL_307;
                }
              }
              uint64_t v163 = (void *)(v160 + v164);
            }
LABEL_307:
            uint64_t v161 = v159[17];
            goto LABEL_319;
          }
          uint64_t v165 = *((unsigned int *)v159 + 36);
          int v166 = v165 - 1;
          unsigned int v167 = (v165 - 1) & (v127 ^ (v110 >> 9));
          uint64_t v163 = (void *)(v160 + 8 * v167);
          uint64_t v168 = *v163;
          if (*v163 != -1)
          {
            uint64_t v169 = 0;
            int v170 = 1;
            while (v168 != v110)
            {
              if (v169) {
                BOOL v171 = 0;
              }
              else {
                BOOL v171 = v168 == -2;
              }
              if (v171) {
                uint64_t v169 = v163;
              }
              unsigned int v172 = v167 + v170++;
              unsigned int v167 = v172 & v166;
              uint64_t v163 = (void *)(v160 + 8 * (v172 & v166));
              uint64_t v168 = *v163;
              if (*v163 == -1) {
                goto LABEL_314;
              }
            }
LABEL_318:
            LODWORD(v162) = *((_DWORD *)v159 + 37);
            goto LABEL_319;
          }
          uint64_t v169 = 0;
LABEL_314:
          if (v169) {
            uint64_t v163 = v169;
          }
          if (*v163 == v110) {
            goto LABEL_318;
          }
          LODWORD(v162) = *((_DWORD *)v159 + 37);
          uint64_t v163 = (void *)(v160 + 8 * v165);
LABEL_319:
          if (v160 == v161) {
            unsigned int v173 = v162;
          }
          else {
            unsigned int v173 = *((_DWORD *)v159 + 36);
          }
          if (v163 == (void *)(v160 + 8 * v173))
          {
            int v174 = sub_1CC3B5D94(v3, "Inconsistent CFG", v110);
            uint64_t v175 = (llvm::raw_ostream *)llvm::errs(v174);
            int v176 = v175;
            uint64_t v177 = (void *)*((void *)v175 + 4);
            if (*((void *)v175 + 3) - (void)v177 > 0x33uLL)
            {
              qmemcpy(v177, "MBB is not in the predecessor list of the successor ", 52);
              *((void *)v175 + 4) += 52;
            }
            else
            {
              llvm::raw_ostream::write(v175, "MBB is not in the predecessor list of the successor ", 0x34uLL);
            }
            *((void *)&v1490 + 1) = &v1488;
            unint64_t v1488 = (unint64_t)&unk_1F260D508;
            uint64_t v1489 = (uint64_t)v128;
            v1433((uint64_t)&v1488, v176);
            uint64_t v178 = (_WORD *)*((void *)v176 + 4);
            if (*((void *)v176 + 3) - (void)v178 > 1uLL)
            {
              *uint64_t v178 = 2606;
              *((void *)v176 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v176, ".\n", 2uLL);
            }
            if (*((unint64_t **)&v1490 + 1) == &v1488)
            {
              (*(void (**)(unint64_t *))(v1488 + 32))(&v1488);
            }
            else if (*((void *)&v1490 + 1))
            {
              (*(void (**)(void))(**((void **)&v1490 + 1) + 40))();
            }
          }
          if (++v125 == v126) {
            goto LABEL_341;
          }
        }
LABEL_241:
        unsigned int v134 = v1473;
        if (HIDWORD(v1473) < v1473)
        {
          ++HIDWORD(v1473);
          v1472[v130] = v1482;
          goto LABEL_265;
        }
LABEL_244:
        if (3 * v134 <= 4 * (HIDWORD(v1473) - v1474))
        {
          if (v134 >= 0x40) {
            v134 *= 2;
          }
          else {
            unsigned int v134 = 128;
          }
        }
        else if (v134 - HIDWORD(v1473) >= v134 >> 3)
        {
          goto LABEL_246;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1471, v134);
        unsigned int v134 = v1473;
        uint64_t v129 = (char *)v1472;
LABEL_246:
        unsigned int v135 = v134 - 1;
        unsigned int v136 = (v134 - 1) & ((v128 >> 4) ^ (v128 >> 9));
        __int16 v137 = &v129[8 * v136];
        unsigned __int16 v138 = *(uint64_t **)v137;
        if (*(void *)v137 == -1)
        {
          int v139 = 0;
LABEL_258:
          if (v139) {
            uint64_t v143 = v139;
          }
          else {
            uint64_t v143 = (void **)v137;
          }
          if (*v143 != v128)
          {
            if (*v143 == (void *)-2) {
              --v1474;
            }
            else {
              ++HIDWORD(v1473);
            }
            _DWORD *v143 = v128;
          }
        }
        else
        {
          int v139 = 0;
          int v140 = 1;
          while (v138 != v128)
          {
            if (v139) {
              BOOL v141 = 0;
            }
            else {
              BOOL v141 = v138 == (uint64_t *)-2;
            }
            if (v141) {
              int v139 = (void **)v137;
            }
            unsigned int v142 = v136 + v140++;
            unsigned int v136 = v142 & v135;
            __int16 v137 = &v129[8 * (v142 & v135)];
            unsigned __int16 v138 = *(uint64_t **)v137;
            if (*(void *)v137 == -1) {
              goto LABEL_258;
            }
          }
        }
        goto LABEL_265;
      }
LABEL_341:
      uint64_t v179 = *(void ***)(v110 + 64);
      unsigned int v180 = *(void ***)(v110 + 72);
      if (v179 != v180)
      {
        unsigned int v181 = v127 ^ (v110 >> 9);
        while (1)
        {
          uint64_t v182 = *v179;
          v1482 = (uint64_t *)*v179;
          uint64_t v184 = *(void *)(v3 + 80);
          uint64_t v183 = *(void *)(v3 + 88);
          if (v183 == v184)
          {
            uint64_t v185 = *v111;
            uint64_t v186 = (void **)(v183 + 8 * v185);
            if (v185)
            {
              uint64_t v187 = 0;
              uint64_t v188 = 8 * v185;
              while (*(void **)(v183 + v187) != v182)
              {
                v187 += 8;
                if (v188 == v187) {
                  goto LABEL_361;
                }
              }
              uint64_t v186 = (void **)(v183 + v187);
            }
LABEL_361:
            uint64_t v184 = *(void *)(v3 + 88);
          }
          else
          {
            uint64_t v189 = *v112;
            int v190 = v189 - 1;
            unsigned int v191 = (v189 - 1) & ((v182 >> 4) ^ (v182 >> 9));
            uint64_t v186 = (void **)(v183 + 8 * v191);
            uint64_t v192 = *v186;
            if (*v186 == (void *)-1)
            {
              uint64_t v193 = 0;
LABEL_387:
              if (v193) {
                uint64_t v186 = v193;
              }
              if (*v186 != v182) {
                uint64_t v186 = (void **)(v183 + 8 * v189);
              }
            }
            else
            {
              uint64_t v193 = 0;
              int v194 = 1;
              while (v192 != v182)
              {
                if (v193) {
                  BOOL v195 = 0;
                }
                else {
                  BOOL v195 = v192 == (void *)-2;
                }
                if (v195) {
                  uint64_t v193 = v186;
                }
                unsigned int v196 = v191 + v194++;
                unsigned int v191 = v196 & v190;
                uint64_t v186 = (void **)(v183 + 8 * (v196 & v190));
                uint64_t v192 = *v186;
                if (*v186 == (void *)-1) {
                  goto LABEL_387;
                }
              }
            }
          }
          if (v183 == v184) {
            uint64_t v197 = v111;
          }
          else {
            uint64_t v197 = v112;
          }
          if (v186 == (void **)(v183 + 8 * *v197)) {
            sub_1CC3B5D94(v3, "MBB has predecessor that isn't part of the function.", v110);
          }
          int v198 = sub_1CC3B6B7C(v1448, (uint64_t *)&v1482);
          uint64_t v200 = v198[28];
          uint64_t v199 = v198[29];
          if (v199 == v200)
          {
            uint64_t v201 = *((unsigned int *)v198 + 61);
            uint64_t v202 = (void *)(v199 + 8 * v201);
            if (v201)
            {
              uint64_t v203 = 0;
              while (*(void *)(v199 + v203) != v110)
              {
                v203 += 8;
                if (8 * v201 == v203) {
                  goto LABEL_385;
                }
              }
              uint64_t v202 = (void *)(v199 + v203);
            }
LABEL_385:
            uint64_t v200 = v198[29];
            goto LABEL_397;
          }
          uint64_t v204 = *((unsigned int *)v198 + 60);
          int v205 = v204 - 1;
          unsigned int v206 = (v204 - 1) & v181;
          uint64_t v202 = (void *)(v199 + 8 * v206);
          uint64_t v207 = *v202;
          if (*v202 != -1) {
            break;
          }
          int v208 = 0;
LABEL_392:
          if (v208) {
            uint64_t v202 = v208;
          }
          if (*v202 == v110) {
            goto LABEL_396;
          }
          LODWORD(v201) = *((_DWORD *)v198 + 61);
          uint64_t v202 = (void *)(v199 + 8 * v204);
LABEL_397:
          if (v199 == v200) {
            unsigned int v212 = v201;
          }
          else {
            unsigned int v212 = *((_DWORD *)v198 + 60);
          }
          if (v202 == (void *)(v199 + 8 * v212))
          {
            long long v213 = sub_1CC3B5D94(v3, "Inconsistent CFG", v110);
            uint64_t v214 = (llvm::raw_ostream *)llvm::errs(v213);
            v215 = v214;
            uint64_t v216 = (void *)*((void *)v214 + 4);
            if (*((void *)v214 + 3) - (void)v216 > 0x33uLL)
            {
              qmemcpy(v216, "MBB is not in the successor list of the predecessor ", 52);
              *((void *)v214 + 4) += 52;
            }
            else
            {
              llvm::raw_ostream::write(v214, "MBB is not in the successor list of the predecessor ", 0x34uLL);
            }
            *((void *)&v1490 + 1) = &v1488;
            unint64_t v1488 = (unint64_t)&unk_1F260D508;
            uint64_t v1489 = (uint64_t)v182;
            v1433((uint64_t)&v1488, v215);
            uint64_t v217 = (_WORD *)*((void *)v215 + 4);
            if (*((void *)v215 + 3) - (void)v217 > 1uLL)
            {
              *uint64_t v217 = 2606;
              *((void *)v215 + 4) += 2;
            }
            else
            {
              llvm::raw_ostream::write(v215, ".\n", 2uLL);
            }
            if (*((unint64_t **)&v1490 + 1) == &v1488)
            {
              (*(void (**)(unint64_t *))(v1488 + 32))(&v1488);
            }
            else if (*((void *)&v1490 + 1))
            {
              (*(void (**)(void))(**((void **)&v1490 + 1) + 40))();
            }
          }
          if (++v179 == v180) {
            goto LABEL_413;
          }
        }
        int v208 = 0;
        int v209 = 1;
        while (v207 != v110)
        {
          if (v208) {
            BOOL v210 = 0;
          }
          else {
            BOOL v210 = v207 == -2;
          }
          if (v210) {
            int v208 = v202;
          }
          unsigned int v211 = v206 + v209++;
          unsigned int v206 = v211 & v205;
          uint64_t v202 = (void *)(v199 + 8 * (v211 & v205));
          uint64_t v207 = *v202;
          if (*v202 == -1) {
            goto LABEL_392;
          }
        }
LABEL_396:
        LODWORD(v201) = *((_DWORD *)v198 + 61);
        goto LABEL_397;
      }
LABEL_413:
      if ((HIDWORD(v1473) - v1474) > 1)
      {
        uint64_t v218 = *(void *)(*(void *)(v3 + 24) + 560);
        uint64_t v219 = **(void **)(v3 + 16);
        if (!v218) {
          goto LABEL_425;
        }
        uint64_t v220 = *(void *)(v110 + 16);
        if (*(_DWORD *)(v218 + 412) != 2 || v220 == 0) {
          goto LABEL_425;
        }
        uint64_t v222 = *(void *)(v220 + 40);
        if (v222) {
          uint64_t v223 = v222 - 24;
        }
        else {
          uint64_t v223 = 0;
        }
        if (*(unsigned __int8 *)(v223 + 16) - 29 >= 0xB) {
          uint64_t v223 = 0;
        }
        if (*(unsigned char *)(v223 + 16) != 31)
        {
LABEL_425:
          int v224 = *(_DWORD *)(v219 + 20);
          if ((v224 & 0x40000000) != 0) {
            uint64_t v225 = *(llvm::Value ***)(v219 - 8);
          }
          else {
            uint64_t v225 = (llvm::Value **)(v219 - 32 * (v224 & 0x7FFFFFF));
          }
          unsigned int v226 = llvm::classifyEHPersonality(*v225, (const llvm::Value *)v5);
          if (v226 - 7 >= 4 && v226 != 12) {
            sub_1CC3B5D94(v3, "MBB has more than one landing pad successor", v110);
          }
        }
      }
      uint64_t v1479 = 0;
      v1476 = 0;
      unint64_t v1488 = (unint64_t)&v1490;
      uint64_t v1489 = 0x400000000;
      if ((*(uint64_t (**)(void, unint64_t, uint64_t *, void (***)(void **), unint64_t *, void))(**(void **)(v3 + 32) + 248))(*(void *)(v3 + 32), v110, &v1479, &v1476, &v1488, 0))goto LABEL_434; {
      if (!(v1479 | (unint64_t)v1476))
      }
      {
        unint64_t v852 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (v110 + 48 == v852) {
          goto LABEL_1533;
        }
        if (v852)
        {
          unint64_t v853 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
          if ((*(unsigned char *)v852 & 4) != 0)
          {
            __int16 v854 = *(_WORD *)(v852 + 44);
            unint64_t v853 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
LABEL_1521:
            int v863 = v854 & 0xC;
            int v864 = v854 & 4;
            uint64_t v865 = *(void *)(*(void *)(v853 + 16) + 8);
            if (v863) {
              BOOL v866 = v864 == 0;
            }
            else {
              BOOL v866 = 0;
            }
            if (v866)
            {
              if ((v865 & 0x100) != 0) {
                goto LABEL_1526;
              }
              while ((*(_WORD *)(v853 + 44) & 8) != 0)
              {
                unint64_t v853 = *(void *)(v853 + 8);
                if (*(unsigned char *)(*(void *)(v853 + 16) + 9)) {
                  goto LABEL_1526;
                }
              }
            }
            else if ((v865 & 0x100) != 0)
            {
LABEL_1526:
              if (!v852 || (*(unsigned char *)v852 & 4) == 0)
              {
                while ((*(_WORD *)(v852 + 44) & 4) != 0)
                  unint64_t v852 = *(void *)v852 & 0xFFFFFFFFFFFFFFF8;
              }
              if (((*(uint64_t (**)(void))(**(void **)(v3 + 32) + 768))(*(void *)(v3 + 32)) & 1) == 0) {
                sub_1CC3B5D94(v3, "MBB exits via unconditional fall-through but ends with a barrier instruction!", v110);
              }
            }
LABEL_1533:
            if (!v1489) {
              goto LABEL_1637;
            }
            uint64_t v867 = v3;
            v868 = "MBB exits via unconditional fall-through but has a condition!";
            goto LABEL_1636;
          }
        }
        else
        {
          unint64_t v853 = 0;
        }
        while (1)
        {
          __int16 v854 = *(_WORD *)(v853 + 44);
          if ((v854 & 4) == 0) {
            break;
          }
          unint64_t v853 = *(void *)v853 & 0xFFFFFFFFFFFFFFF8;
        }
        goto LABEL_1521;
      }
      if (v1479) {
        BOOL v257 = v1476 == 0;
      }
      else {
        BOOL v257 = 0;
      }
      char v258 = !v257;
      if (v257 && !v1489)
      {
        unint64_t v259 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (v110 + 48 == v259)
        {
          uint64_t v867 = v3;
          v868 = "MBB exits via unconditional branch but doesn't contain any instructions!";
          goto LABEL_1636;
        }
        if (v259)
        {
          unint64_t v260 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
          if ((*(unsigned char *)v259 & 4) != 0)
          {
            __int16 v261 = *(_WORD *)(v259 + 44);
            unint64_t v260 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
            goto LABEL_1556;
          }
        }
        else
        {
          unint64_t v260 = 0;
        }
        while (1)
        {
          __int16 v261 = *(_WORD *)(v260 + 44);
          if ((v261 & 4) == 0) {
            break;
          }
          unint64_t v260 = *(void *)v260 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_1556:
        int v875 = v261 & 0xC;
        int v876 = v261 & 4;
        uint64_t v877 = *(void *)(*(void *)(v260 + 16) + 8);
        if (v875) {
          BOOL v878 = v876 == 0;
        }
        else {
          BOOL v878 = 0;
        }
        if (v878)
        {
          if ((v877 & 0x100) != 0)
          {
LABEL_1565:
            if (v259 && (*(unsigned char *)v259 & 4) != 0)
            {
              __int16 v879 = *(_WORD *)(v259 + 44);
            }
            else
            {
              while (1)
              {
                __int16 v879 = *(_WORD *)(v259 + 44);
                if ((v879 & 4) == 0) {
                  break;
                }
                unint64_t v259 = *(void *)v259 & 0xFFFFFFFFFFFFFFF8;
              }
            }
            int v880 = v879 & 0xC;
            int v881 = v879 & 4;
            uint64_t v882 = *(void *)(*(void *)(v259 + 16) + 8);
            if (v880) {
              BOOL v883 = v881 == 0;
            }
            else {
              BOOL v883 = 0;
            }
            if (v883)
            {
              if ((v882 & 0x200) != 0) {
                goto LABEL_1637;
              }
              while ((*(_WORD *)(v259 + 44) & 8) != 0)
              {
                unint64_t v259 = *(void *)(v259 + 8);
                if ((*(unsigned char *)(*(void *)(v259 + 16) + 9) & 2) != 0) {
                  goto LABEL_1637;
                }
              }
            }
            else if ((v882 & 0x200) != 0)
            {
              goto LABEL_1637;
            }
            uint64_t v867 = v3;
            v868 = "MBB exits via unconditional branch but the branch isn't a terminator instruction!";
            goto LABEL_1636;
          }
          while ((*(_WORD *)(v260 + 44) & 8) != 0)
          {
            unint64_t v260 = *(void *)(v260 + 8);
            if (*(unsigned char *)(*(void *)(v260 + 16) + 9)) {
              goto LABEL_1565;
            }
          }
        }
        else if ((v877 & 0x100) != 0)
        {
          goto LABEL_1565;
        }
        uint64_t v867 = v3;
        v868 = "MBB exits via unconditional branch but doesn't end with a barrier instruction!";
        goto LABEL_1636;
      }
      if (!v1489) {
        char v258 = 1;
      }
      if (v258)
      {
        if (!v1479 || !v1476)
        {
          uint64_t v867 = v3;
          v868 = "analyzeBranch returned invalid data!";
          goto LABEL_1636;
        }
        unint64_t v857 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
        if (v110 + 48 != v857)
        {
          if (v857)
          {
            unint64_t v858 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
            if ((*(unsigned char *)v857 & 4) != 0)
            {
              __int16 v859 = *(_WORD *)(v857 + 44);
              unint64_t v858 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
LABEL_1613:
              int v895 = v859 & 0xC;
              int v896 = v859 & 4;
              uint64_t v897 = *(void *)(*(void *)(v858 + 16) + 8);
              if (v895) {
                BOOL v898 = v896 == 0;
              }
              else {
                BOOL v898 = 0;
              }
              if (v898)
              {
                if ((v897 & 0x100) != 0) {
                  goto LABEL_1622;
                }
                while ((*(_WORD *)(v858 + 44) & 8) != 0)
                {
                  unint64_t v858 = *(void *)(v858 + 8);
                  if (*(unsigned char *)(*(void *)(v858 + 16) + 9)) {
                    goto LABEL_1622;
                  }
                }
LABEL_1618:
                uint64_t v893 = v3;
                v894 = "MBB exits via conditional branch/branch but doesn't end with a barrier instruction!";
              }
              else
              {
                if ((v897 & 0x100) == 0) {
                  goto LABEL_1618;
                }
LABEL_1622:
                if (v857 && (*(unsigned char *)v857 & 4) != 0)
                {
                  __int16 v899 = *(_WORD *)(v857 + 44);
                }
                else
                {
                  while (1)
                  {
                    __int16 v899 = *(_WORD *)(v857 + 44);
                    if ((v899 & 4) == 0) {
                      break;
                    }
                    unint64_t v857 = *(void *)v857 & 0xFFFFFFFFFFFFFFF8;
                  }
                }
                int v900 = v899 & 0xC;
                int v901 = v899 & 4;
                uint64_t v902 = *(void *)(*(void *)(v857 + 16) + 8);
                if (v900) {
                  BOOL v903 = v901 == 0;
                }
                else {
                  BOOL v903 = 0;
                }
                if (!v903)
                {
                  if ((v902 & 0x200) == 0) {
                    goto LABEL_1632;
                  }
LABEL_1634:
                  if (v1489) {
                    goto LABEL_1637;
                  }
                  uint64_t v867 = v3;
                  v868 = "MBB exits via conditional branch/branch but there's no condition!";
                  goto LABEL_1636;
                }
                if ((v902 & 0x200) != 0) {
                  goto LABEL_1634;
                }
                while ((*(_WORD *)(v857 + 44) & 8) != 0)
                {
                  unint64_t v857 = *(void *)(v857 + 8);
                  if ((*(unsigned char *)(*(void *)(v857 + 16) + 9) & 2) != 0) {
                    goto LABEL_1634;
                  }
                }
LABEL_1632:
                uint64_t v893 = v3;
                v894 = "MBB exits via conditional branch/branch but the branch isn't a terminator instruction!";
              }
LABEL_1633:
              sub_1CC3B5D94(v893, v894, v110);
              goto LABEL_1634;
            }
          }
          else
          {
            unint64_t v858 = 0;
          }
          while (1)
          {
            __int16 v859 = *(_WORD *)(v858 + 44);
            if ((v859 & 4) == 0) {
              break;
            }
            unint64_t v858 = *(void *)v858 & 0xFFFFFFFFFFFFFFF8;
          }
          goto LABEL_1613;
        }
        uint64_t v893 = v3;
        v894 = "MBB exits via conditional branch/branch but doesn't contain any instructions!";
        goto LABEL_1633;
      }
      unint64_t v860 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (v110 + 48 == v860)
      {
        uint64_t v867 = v3;
        v868 = "MBB exits via conditional branch/fall-through but doesn't contain any instructions!";
        goto LABEL_1636;
      }
      if (v860)
      {
        unint64_t v861 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
        if ((*(unsigned char *)v860 & 4) != 0)
        {
          __int16 v862 = *(_WORD *)(v860 + 44);
          unint64_t v861 = *(void *)(v110 + 48) & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_1581;
        }
      }
      else
      {
        unint64_t v861 = 0;
      }
      while (1)
      {
        __int16 v862 = *(_WORD *)(v861 + 44);
        if ((v862 & 4) == 0) {
          break;
        }
        unint64_t v861 = *(void *)v861 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_1581:
      int v884 = v862 & 0xC;
      int v885 = v862 & 4;
      uint64_t v886 = *(void *)(*(void *)(v861 + 16) + 8);
      if (v884) {
        BOOL v887 = v885 == 0;
      }
      else {
        BOOL v887 = 0;
      }
      if (v887)
      {
        if ((v886 & 0x100) == 0)
        {
          while ((*(_WORD *)(v861 + 44) & 8) != 0)
          {
            unint64_t v861 = *(void *)(v861 + 8);
            if (*(unsigned char *)(*(void *)(v861 + 16) + 9)) {
              goto LABEL_1600;
            }
          }
LABEL_1586:
          if (v860 && (*(unsigned char *)v860 & 4) != 0)
          {
            __int16 v888 = *(_WORD *)(v860 + 44);
          }
          else
          {
            while (1)
            {
              __int16 v888 = *(_WORD *)(v860 + 44);
              if ((v888 & 4) == 0) {
                break;
              }
              unint64_t v860 = *(void *)v860 & 0xFFFFFFFFFFFFFFF8;
            }
          }
          int v889 = v888 & 0xC;
          int v890 = v888 & 4;
          uint64_t v891 = *(void *)(*(void *)(v860 + 16) + 8);
          if (v889) {
            BOOL v892 = v890 == 0;
          }
          else {
            BOOL v892 = 0;
          }
          if (v892)
          {
            if ((v891 & 0x200) != 0) {
              goto LABEL_1637;
            }
            while ((*(_WORD *)(v860 + 44) & 8) != 0)
            {
              unint64_t v860 = *(void *)(v860 + 8);
              if ((*(unsigned char *)(*(void *)(v860 + 16) + 9) & 2) != 0) {
                goto LABEL_1637;
              }
            }
          }
          else if ((v891 & 0x200) != 0)
          {
            goto LABEL_1637;
          }
          uint64_t v867 = v3;
          v868 = "MBB exits via conditional branch/fall-through but the branch isn't a terminator instruction!";
          goto LABEL_1636;
        }
      }
      else if ((v886 & 0x100) == 0)
      {
        goto LABEL_1586;
      }
LABEL_1600:
      uint64_t v867 = v3;
      v868 = "MBB exits via conditional branch/fall-through but ends with a barrier instruction!";
LABEL_1636:
      sub_1CC3B5D94(v867, v868, v110);
LABEL_1637:
      if (v1479)
      {
        v904 = *(void ***)(v110 + 88);
        v905 = *(void ***)(v110 + 96);
        if (v904 != v905)
        {
          while (*v904 != (void *)v1479)
          {
            if (++v904 == v905)
            {
              v904 = *(void ***)(v110 + 96);
              break;
            }
          }
        }
        if (v904 == v905) {
          sub_1CC3B5D94(v3, "MBB exits via jump or conditional branch, but its target isn't a CFG successor!", v110);
        }
      }
      v906 = v1476;
      if (v1476)
      {
        v907 = *(void ***)(v110 + 88);
        v908 = *(void ***)(v110 + 96);
        if (v907 != v908)
        {
          while (*v907 != v1476)
          {
            if (++v907 == v908)
            {
              v907 = *(void ***)(v110 + 96);
              break;
            }
          }
        }
        if (v907 == v908)
        {
          sub_1CC3B5D94(v3, "MBB exits via conditional branch, but its target isn't a CFG successor!", v110);
          v906 = v1476;
        }
      }
      if (v1479)
      {
        if (v1489) {
          BOOL v909 = v906 == 0;
        }
        else {
          BOOL v909 = 0;
        }
        int v910 = v909;
        if (!v1489) {
          goto LABEL_1671;
        }
      }
      else
      {
        int v910 = 1;
        if (!v1489) {
          goto LABEL_1671;
        }
      }
      if (!v906)
      {
        v911 = *(const llvm::MachineFunction **)(v110 + 8);
        if (v911 == (const llvm::MachineFunction *)((char *)*v1460 + 320))
        {
          v914 = "MBB conditionally falls through out of function!";
        }
        else
        {
          v912 = *(const llvm::MachineFunction ***)(v110 + 88);
          v913 = *(const llvm::MachineFunction ***)(v110 + 96);
          if (v912 != v913)
          {
            while (*v912 != v911)
            {
              if (++v912 == v913)
              {
                v912 = *(const llvm::MachineFunction ***)(v110 + 96);
                break;
              }
            }
          }
          if (v912 != v913) {
            goto LABEL_1671;
          }
          v914 = "MBB exits via conditional branch/fall-through but the CFG successors don't match the actual successors!";
        }
        sub_1CC3B5D94(v3, v914, v110);
      }
LABEL_1671:
      v915 = *(void (****)(void **))(v110 + 88);
      v916 = *(void (****)(void **))(v110 + 96);
      while (v915 != v916)
      {
        v917 = *v915;
        if (*v915 != (void (**)(void **))v1479 && v917 != v1476)
        {
          if (!v910
            || (*(void *)(v110 + 8) != *(void *)(v110 + 32) + 320
              ? (v919 = *(void (***)(void **))(v110 + 8))
              : (v919 = 0),
                v917 != v919))
          {
            if (!*((unsigned char *)v917 + 184) && !*((unsigned char *)v917 + 202)) {
              sub_1CC3B5D94(v3, "MBB has unexpected successors which are not branch targets, fallthrough, EHPads, or inlineasm_br targets.", v110);
            }
          }
        }
        ++v915;
      }
LABEL_434:
      int v228 = *(_DWORD *)(v3 + 256);
      if (v228 || *(_DWORD *)(v3 + 260))
      {
        uint64_t v855 = *(unsigned int *)(v3 + 264);
        if (v855 <= 4 * v228 || v855 < 0x41)
        {
          if (v855) {
            memset(*v1431, 255, 4 * v855);
          }
          *(void *)(v3 + 256) = 0;
        }
        else
        {
          sub_1CBB23624(v1431);
        }
      }
      if ((**(unsigned char **)(**(void **)(v3 + 48) + 360) & 4) != 0)
      {
        uint64_t v229 = *(unsigned __int16 **)(v110 + 152);
        for (m = *(unsigned __int16 **)(v110 + 160); v229 != m; v229 += 8)
        {
          int v231 = *v229;
          if ((v231 - 1) >= 0x3FFFFFFF)
          {
            sub_1CC3B5D94(v3, "MBB live-in list contains non-physical register", v110);
          }
          else
          {
            uint64_t v232 = *(void *)(v3 + 40);
            uint64_t v233 = *(void *)(v232 + 56);
            if (v233)
            {
              uint64_t v234 = (unsigned __int16 *)(v233 + 2 * *(unsigned int *)(*(void *)(v232 + 8) + 24 * *v229 + 4));
              while (1)
              {
                int v235 = (unsigned __int16)v231;
                LODWORD(v1482) = (unsigned __int16)v231;
                int v236 = *(_DWORD *)(v3 + 264);
                if (!v236) {
                  break;
                }
                uint64_t v237 = *(void *)(v3 + 248);
                int v238 = v236 - 1;
                unsigned int v239 = v238 & (37 * v235);
                std::string::size_type v240 = (char *)(v237 + 4 * v239);
                int v241 = *(_DWORD *)v240;
                if (*(_DWORD *)v240 != v235)
                {
                  unint64_t v243 = 0;
                  int v244 = 1;
                  while (v241 != -1)
                  {
                    if (v243) {
                      BOOL v245 = 0;
                    }
                    else {
                      BOOL v245 = v241 == -2;
                    }
                    if (v245) {
                      unint64_t v243 = v240;
                    }
                    unsigned int v246 = v239 + v244++;
                    unsigned int v239 = v246 & v238;
                    std::string::size_type v240 = (char *)(v237 + 4 * v239);
                    int v241 = *(_DWORD *)v240;
                    if (*(_DWORD *)v240 == v235) {
                      goto LABEL_443;
                    }
                  }
                  if (v243) {
                    uint64_t v247 = v243;
                  }
                  else {
                    uint64_t v247 = v240;
                  }
                  goto LABEL_457;
                }
LABEL_443:
                int v242 = *v234++;
                LOWORD(v231) = v242 + v235;
                if (!v242) {
                  goto LABEL_460;
                }
              }
              uint64_t v247 = 0;
LABEL_457:
              uint64_t v248 = sub_1CBA855C4((char **)v1431, (uint64_t)&v1482, (int *)&v1482, v247);
              *(_DWORD *)uint64_t v248 = v1482;
              goto LABEL_443;
            }
          }
LABEL_460:
          ;
        }
      }
      llvm::MachineFrameInfo::getPristineRegs(*((llvm::MachineFrameInfo **)*v1460 + 7), *v1460, (uint64_t)&v1482);
      int v249 = v1487;
      if (!v1487) {
        goto LABEL_521;
      }
      uint64_t v250 = 0;
      uint64_t v251 = v1482;
      uint64_t v252 = (v1487 - 1) & 0xFFFFFFC0;
      while (1)
      {
        uint64_t v254 = *v251++;
        uint64_t v253 = v254;
        unint64_t v255 = v252 + v250 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v1487;
        unint64_t v256 = v255 & v253;
        if (v256) {
          break;
        }
        v250 -= 64;
        if (v252 + v250 == -64) {
          goto LABEL_521;
        }
      }
      int v262 = __clz(__rbit64(v256));
      if (v262 + 1 == v250) {
        goto LABEL_521;
      }
      unsigned int v263 = v262 - v250;
      uint64_t v264 = (v262 - v250);
      do
      {
        uint64_t v265 = *(void *)(v3 + 40);
        uint64_t v266 = *(void *)(v265 + 56);
        if (!v266) {
          goto LABEL_505;
        }
        uint64_t v267 = (unsigned __int16 *)(v266 + 2 * *(unsigned int *)(*(void *)(v265 + 8) + 24 * v264 + 4));
        do
        {
          int v268 = (unsigned __int16)v264;
          int v1470 = (unsigned __int16)v264;
          int v269 = *(_DWORD *)(v3 + 264);
          if (v269)
          {
            uint64_t v270 = *(void *)(v3 + 248);
            int v271 = v269 - 1;
            unsigned int v272 = v271 & (37 * v268);
            char v273 = (char *)(v270 + 4 * v272);
            int v274 = *(_DWORD *)v273;
            if (*(_DWORD *)v273 == v268) {
              goto LABEL_489;
            }
            int v276 = 0;
            int v277 = 1;
            while (v274 != -1)
            {
              if (v276) {
                BOOL v278 = 0;
              }
              else {
                BOOL v278 = v274 == -2;
              }
              if (v278) {
                int v276 = v273;
              }
              unsigned int v279 = v272 + v277++;
              unsigned int v272 = v279 & v271;
              char v273 = (char *)(v270 + 4 * v272);
              int v274 = *(_DWORD *)v273;
              if (*(_DWORD *)v273 == v268) {
                goto LABEL_489;
              }
            }
            if (v276) {
              int v280 = v276;
            }
            else {
              int v280 = v273;
            }
          }
          else
          {
            int v280 = 0;
          }
          std::string::size_type v281 = sub_1CBA855C4((char **)v1431, (uint64_t)&v1470, &v1470, v280);
          *(_DWORD *)std::string::size_type v281 = v1470;
LABEL_489:
          int v275 = *v267++;
          LOWORD(v264) = v275 + v268;
        }
        while (v275);
        int v249 = v1487;
LABEL_505:
        unsigned int v282 = v263 + 1;
        if (v263 + 1 == v249) {
          break;
        }
        unsigned int v283 = v282 >> 6;
        unsigned int v284 = v249 - 1;
        if (v282 >> 6 > (v249 - 1) >> 6) {
          break;
        }
        uint64_t v285 = 0;
        uint64_t v286 = v284 >> 6;
        int v287 = v282 & 0x3F;
        BOOL v66 = v287 == 0;
        unint64_t v288 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v287;
        uint64_t v289 = v66 ? -1 : ~v288;
        unint64_t v290 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v284;
        int v291 = v283 << 6;
        uint64_t v292 = v286 - v283;
        uint64_t v293 = &v1482[v283];
        while (1)
        {
          uint64_t v294 = v285 ? -1 : v289;
          unint64_t v295 = v292 == v285 ? v290 : -1;
          unint64_t v296 = v294 & v295 & v293[v285];
          if (v296) {
            break;
          }
          v291 += 64;
          if (v292 + 1 == ++v285) {
            goto LABEL_521;
          }
        }
        unsigned int v263 = __clz(__rbit64(v296)) + v291;
        uint64_t v264 = v263;
      }
      while (v263 != -1);
LABEL_521:
      *(_DWORD *)(v3 + 440) = 0;
      *(_DWORD *)(v3 + 280) = 0;
      uint64_t v297 = *(void *)(v3 + 616);
      if (v297) {
        *(void *)(v3 + 560) = *(void *)(*(void *)(v297 + 392) + 16 * *(unsigned int *)(v110 + 24));
      }
      if (v1482 != &v1484) {
        free(v1482);
      }
      if ((long long *)v1488 != &v1490) {
        free((void *)v1488);
      }
      if (v1472 != (void *)v1471) {
        free(v1472);
      }
      unint64_t v298 = *(void *)(v110 + 56);
      v1436 = (void *)(v110 + 48);
      if (v298 != v110 + 48)
      {
        unint64_t v299 = 0;
        LOBYTE(v300) = 0;
        unint64_t v1435 = v110;
        while (*(void *)(v298 + 24) != v110)
        {
          uint64_t v323 = sub_1CC3B5D94(v3, "Bad instruction parent pointer", v110);
          uint64_t v324 = (llvm::raw_ostream *)llvm::errs(v323);
          v325 = v324;
          v326 = (void *)*((void *)v324 + 4);
          if (*((void *)v324 + 3) - (void)v326 > 0xCuLL)
          {
            qmemcpy(v326, "Instruction: ", 13);
            *((void *)v324 + 4) += 13;
          }
          else
          {
            llvm::raw_ostream::write(v324, "Instruction: ", 0xDuLL);
          }
          llvm::MachineInstr::print((llvm::MachineInstr *)v298, v325, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
LABEL_1388:
          unint64_t v298 = *(void *)(v298 + 8);
          if ((void *)v298 == v1436)
          {
            if (v299) {
              sub_1CC3B63C4((int32x2_t *)v3, *(void *)(v299 + 24));
            }
            if (v300)
            {
              unint64_t v847 = *v1436 & 0xFFFFFFFFFFFFFFF8;
              if (!v847 || (*(unsigned char *)v847 & 4) == 0)
              {
                while ((*(_WORD *)(v847 + 44) & 4) != 0)
                  unint64_t v847 = *(void *)v847 & 0xFFFFFFFFFFFFFFF8;
              }
              sub_1CC3B6180(v3, "BundledSucc flag set on last instruction in block", v847);
            }
            goto LABEL_1486;
          }
        }
        __int16 v301 = *(_WORD *)(v298 + 44);
        if (v300)
        {
          size_t v302 = "Missing BundledPred flag, BundledSucc was set on predecessor";
          if ((v301 & 4) != 0)
          {
LABEL_537:
            if ((v301 & 4) != 0)
            {
              if (!v299) {
                sub_1CC3B6180(v3, "No bundle header", v298);
              }
            }
            else
            {
              if (v299) {
                sub_1CC3B63C4((int32x2_t *)v3, *(void *)(v299 + 24));
              }
              uint64_t v303 = *(void *)(v3 + 616);
              if (v303)
              {
                uint64_t v304 = *(unsigned int *)(v303 + 384);
                if (v304)
                {
                  uint64_t v305 = *(void *)(v303 + 368);
                  unsigned int v306 = v304 - 1;
                  unsigned int v307 = (v304 - 1) & ((v298 >> 4) ^ (v298 >> 9));
                  uint64_t v308 = *(void *)(v305 + 16 * v307);
                  if (v298 == v308)
                  {
LABEL_546:
                    __int16 v311 = *(_WORD *)(v298 + 44);
                    unint64_t v312 = v298;
                    if ((v311 & 4) != 0)
                    {
                      do
                        unint64_t v312 = *(void *)v312 & 0xFFFFFFFFFFFFFFF8;
                      while ((*(_WORD *)(v312 + 44) & 4) != 0);
                    }
                    unint64_t v313 = v298;
                    if ((v311 & 8) != 0)
                    {
                      do
                        unint64_t v313 = *(void *)(v313 + 8);
                      while ((*(_WORD *)(v313 + 44) & 8) != 0);
                    }
                    unint64_t v314 = *(void *)(v313 + 8);
                    if (v312 != v314)
                    {
                      do
                      {
                        unsigned int v315 = **(unsigned __int16 **)(v312 + 16);
                        BOOL v526 = v315 > 0x17;
                        int v316 = (1 << v315) & 0x83E000;
                        if (v526 || v316 == 0) {
                          goto LABEL_555;
                        }
                        unint64_t v312 = *(void *)(v312 + 8);
                      }
                      while (v312 != v314);
                      unint64_t v312 = v314;
                    }
LABEL_555:
                    LODWORD(v318) = ((v312 >> 4) ^ (v312 >> 9)) & v306;
                    uint64_t v319 = (uint64_t *)(v305 + 16 * v318);
                    uint64_t v320 = *v319;
                    if (v312 == *v319) {
                      goto LABEL_566;
                    }
                    int v321 = 1;
                    while (v320 != -4096)
                    {
                      int v322 = v318 + v321++;
                      uint64_t v318 = v322 & v306;
                      uint64_t v320 = *(void *)(v305 + 16 * v318);
                      if (v312 == v320)
                      {
                        uint64_t v319 = (uint64_t *)(v305 + 16 * v318);
                        goto LABEL_566;
                      }
                    }
                    uint64_t v319 = (uint64_t *)(v305 + 16 * v304);
LABEL_566:
                    uint64_t v327 = v319[1];
                    if (((v327 >> 1) & 3 | *(_DWORD *)((v327 & 0xFFFFFFFFFFFFFFF8) + 24)) <= ((*(void *)(v3 + 560) >> 1) & 3 | *(_DWORD *)((*(void *)(v3 + 560) & 0xFFFFFFFFFFFFFFF8) + 24)))
                    {
                      sub_1CC3B6180(v3, "Instruction index out of order", v298);
                      v358 = (llvm::raw_ostream *)llvm::errs(v357);
                      v359 = v358;
                      uint64_t v360 = (void *)*((void *)v358 + 4);
                      if (*((void *)v358 + 3) - (void)v360 > 0x17uLL)
                      {
                        qmemcpy(v360, "Last instruction was at ", 24);
                        *((void *)v358 + 4) += 24;
                      }
                      else
                      {
                        llvm::raw_ostream::write(v358, "Last instruction was at ", 0x18uLL);
                      }
                      unint64_t v1488 = *(void *)(v3 + 560);
                      llvm::SlotIndex::print((llvm::SlotIndex *)&v1488, v359);
                      v361 = (unsigned char *)*((void *)v359 + 4);
                      if ((unint64_t)v361 >= *((void *)v359 + 3))
                      {
                        llvm::raw_ostream::write(v359, 10);
                      }
                      else
                      {
                        *((void *)v359 + 4) = v361 + 1;
                        unsigned char *v361 = 10;
                      }
                    }
                    *(void *)(v3 + 560) = v327;
                  }
                  else
                  {
                    int v309 = 1;
                    while (v308 != -4096)
                    {
                      unsigned int v310 = v307 + v309++;
                      unsigned int v307 = v310 & v306;
                      uint64_t v308 = *(void *)(v305 + 16 * v307);
                      if (v298 == v308) {
                        goto LABEL_546;
                      }
                    }
                  }
                }
              }
              uint64_t v328 = *(void *)(*(void *)(v298 + 16) + 8);
              if ((*(_WORD *)(v298 + 44) & 0xC) != 0 && (*(_WORD *)(v298 + 44) & 4) == 0)
              {
                unint64_t v337 = v298;
                if ((v328 & 0x200) != 0) {
                  goto LABEL_596;
                }
                while ((*(_WORD *)(v337 + 44) & 8) != 0)
                {
                  unint64_t v337 = *(void *)(v337 + 8);
                  if ((*(unsigned char *)(*(void *)(v337 + 16) + 9) & 2) != 0) {
                    goto LABEL_596;
                  }
                }
LABEL_573:
                unint64_t v299 = v298;
                if (*(void *)(v3 + 72))
                {
                  sub_1CC3B6180(v3, "Non-terminator instruction after the first terminator", v298);
                  v354 = (llvm::raw_ostream *)llvm::errs(v353);
                  v355 = v354;
                  long long v356 = (void *)*((void *)v354 + 4);
                  if (*((void *)v354 + 3) - (void)v356 > 0x15uLL)
                  {
                    qmemcpy(v356, "First terminator was:\t", 22);
                    *((void *)v354 + 4) += 22;
                  }
                  else
                  {
                    llvm::raw_ostream::write(v354, "First terminator was:\t", 0x16uLL);
                  }
                  llvm::MachineInstr::print(*(llvm::MachineInstr **)(v3 + 72), v355, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
LABEL_642:
                  unint64_t v299 = v298;
                }
              }
              else
              {
                if ((v328 & 0x200) == 0) {
                  goto LABEL_573;
                }
LABEL_596:
                unint64_t v299 = v298;
                if (!*(void *)(v3 + 72))
                {
                  *(void *)(v3 + 72) = v298;
                  goto LABEL_642;
                }
              }
            }
            unint64_t v330 = *(unsigned __int16 **)(v298 + 16);
            if (*(_DWORD *)(v298 + 40) < v330[1])
            {
              sub_1CC3B6180(v3, "Too few operands", v298);
              v332 = (llvm::raw_ostream *)llvm::errs(v331);
              sub_1CD098D14(v332, v330[1], 0, 0, 0);
              v333 = (void *)*((void *)v332 + 4);
              if (*((void *)v332 + 3) - (void)v333 > 0x17uLL)
              {
                qmemcpy(v333, " operands expected, but ", 24);
                *((void *)v332 + 4) += 24;
              }
              else
              {
                llvm::raw_ostream::write(v332, " operands expected, but ", 0x18uLL);
              }
              sub_1CD098D14(v332, *(unsigned int *)(v298 + 40), 0, 0, 0);
              char v334 = (void *)*((void *)v332 + 4);
              if (*((void *)v332 + 3) - (void)v334 > 7uLL)
              {
                *char v334 = 0xA2E6E6576696720;
                *((void *)v332 + 4) += 8;
              }
              else
              {
                llvm::raw_ostream::write(v332, " given.\n", 8uLL);
              }
            }
            int v335 = **(unsigned __int16 **)(v298 + 16);
            BOOL v336 = v335 == 69 || v335 == 0;
            unint64_t v1444 = v299;
            if (v336)
            {
              if ((**((unsigned char **)*v1460 + 45) & 2) != 0) {
                sub_1CC3B6180(v3, "Found PHI instruction with NoPHIs property set", v298);
              }
              if (*v1439) {
                sub_1CC3B6180(v3, "Found PHI instruction after non-PHI", v298);
              }
            }
            else if (!*v1439)
            {
              unint64_t *v1439 = v298;
            }
            if (**(unsigned __int16 **)(v298 + 16) - 1 <= 1)
            {
              if (*(_DWORD *)(v298 + 40) > 1u)
              {
                uint64_t v338 = *(void *)(v298 + 32);
                if (*(unsigned char *)v338 != 9)
                {
                  sub_1CC3B6180(v3, "Asm string must be an external symbol", v298);
                  uint64_t v338 = *(void *)(v298 + 32);
                }
                if (*(unsigned char *)(v338 + 32) != 1)
                {
                  sub_1CC3B6180(v3, "Asm flags must be an immediate", v298);
                  uint64_t v338 = *(void *)(v298 + 32);
                }
                if (*(void *)(v338 + 48) >= 0x40uLL) {
                  sub_1CC3B9D7C(v3, "Unknown asm flags", (unint64_t *)(v338 + 32), 1u, 0);
                }
                unsigned int v339 = *(_DWORD *)(v298 + 40);
                if (v339 < 3)
                {
                  unsigned int n = 2;
                }
                else
                {
                  uint64_t v340 = *(void *)(v298 + 32);
                  for (unsigned int n = 2; n < v339; n += ((unsigned __int16)*(_DWORD *)(v340 + 32 * n + 16) >> 3) + 1)
                  {
                    if (*(unsigned char *)(v340 + 32 * n) != 1) {
                      break;
                    }
                  }
                }
                if (n > v339)
                {
                  sub_1CC3B6180(v3, "Missing operands in last group", v298);
                  unsigned int v339 = *(_DWORD *)(v298 + 40);
                }
                if (n < v339 && *(unsigned char *)(*(void *)(v298 + 32) + 32 * n) == 14) {
                  ++n;
                }
                if (n < v339)
                {
                  uint64_t v342 = 32 * n;
                  do
                  {
                    unint64_t v343 = (unint64_t *)(*(void *)(v298 + 32) + v342);
                    if ((*(_DWORD *)v343 & 0x20000FF) != 0x2000000) {
                      sub_1CC3B9D7C(v3, "Expected implicit register after groups", v343, n, 0);
                    }
                    ++n;
                    v342 += 32;
                  }
                  while (v339 != n);
                }
              }
              else
              {
                sub_1CC3B6180(v3, "Too few operands on inline asm", v298);
              }
            }
            uint64_t v344 = *(void *)(*(void *)(v298 + 16) + 8);
            if ((*(_WORD *)(v298 + 44) & 0xC) != 0 && (*(_WORD *)(v298 + 44) & 4) == 0)
            {
              unint64_t v362 = v298;
              if ((v344 & 0x200) != 0) {
                goto LABEL_656;
              }
              while ((*(_WORD *)(v362 + 44) & 8) != 0)
              {
                unint64_t v362 = *(void *)(v362 + 8);
                if ((*(unsigned char *)(*(void *)(v362 + 16) + 9) & 2) != 0) {
                  goto LABEL_656;
                }
              }
            }
            else
            {
              if ((v344 & 0x200) == 0) {
                goto LABEL_625;
              }
LABEL_656:
              if ((*(unsigned int (**)(void, unint64_t))(**(void **)(v3 + 32) + 424))(*(void *)(v3 + 32), v298))
              {
                v363 = *(_DWORD **)(v298 + 32);
                if ((*v363 & 0x10000FF) != 0x1000000)
                {
                  sub_1CC3B6180(v3, "Unspillable Terminator does not define a reg", v298);
                  v363 = *(_DWORD **)(v298 + 32);
                }
                int v364 = v363[1];
                if (v364 < 0 && (**((unsigned char **)*v1460 + 45) & 2) == 0)
                {
                  uint64_t v365 = *(void *)(*(void *)(*(void *)(v3 + 48) + 24) + 16 * (v364 & 0x7FFFFFFF) + 8);
                  if (v365)
                  {
                    if ((*(unsigned char *)(v365 + 3) & 0x81) != 0)
                    {
                      while (1)
                      {
                        uint64_t v365 = *(void *)(v365 + 24);
                        if (!v365) {
                          break;
                        }
                        if ((*(_DWORD *)v365 & 0x81000000) == 0) {
                          goto LABEL_665;
                        }
                      }
                    }
                    else
                    {
LABEL_665:
                      uint64_t v366 = 0;
                      while (1)
                      {
                        uint64_t v365 = *(void *)(v365 + 24);
                        if (!v365) {
                          break;
                        }
                        if ((*(_DWORD *)v365 & 0x81000000) == 0) {
                          ++v366;
                        }
                      }
                      if (v366) {
                        sub_1CC3B6180(v3, "Unspillable Terminator expected to have at most one use!", v298);
                      }
                    }
                  }
                }
              }
            }
LABEL_625:
            long long v346 = *(unsigned __int16 **)(v298 + 16);
            if (*v346 - 13 <= 1 && *(_DWORD *)(v298 + 40) == 4 && !*(void *)(v298 + 56))
            {
              sub_1CC3B6180(v3, "Missing DebugLoc for debug instruction", v298);
              long long v346 = *(unsigned __int16 **)(v298 + 16);
            }
            if ((v346[4] & 0x10) != 0 && *(_DWORD *)(v298 + 64)) {
              sub_1CC3B6180(v3, "Metadata instruction should not have a value tracking number", v298);
            }
            v348 = (int *)(v298 + 48);
            unint64_t v347 = *(void *)(v298 + 48);
            if (v347 >= 8)
            {
              if ((v347 & 7) == 0)
              {
                *(void *)(v298 + 48) = v347 & 0xFFFFFFFFFFFFFFF8;
                unint64_t v352 = v298 + 56;
                goto LABEL_688;
              }
              if ((*(void *)(v298 + 48) & 7) == 3)
              {
                int v349 = (int *)(v347 & 0xFFFFFFFFFFFFFFF8);
                if ((v347 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  uint64_t v351 = *v349;
                  v348 = v349 + 2;
                  uint64_t v350 = v351;
                  if (v351)
                  {
                    unint64_t v352 = (unint64_t)&v348[2 * v350];
                    do
                    {
LABEL_688:
                      uint64_t v369 = *(void *)v348;
                      __int16 v370 = *(_WORD *)(*(void *)v348 + 32);
                      if (v370)
                      {
                        v371 = *(unsigned __int16 **)(v298 + 16);
                        if (*v371 - 1 > 1 || (*(unsigned char *)(*(void *)(v298 + 32) + 48) & 8) == 0)
                        {
                          uint64_t v372 = *((void *)v371 + 1);
                          if ((*(_WORD *)(v298 + 44) & 0xC) != 0 && (*(_WORD *)(v298 + 44) & 4) == 0)
                          {
                            unint64_t v367 = v298;
                            if ((v372 & 0x80000) != 0)
                            {
                              uint64_t v3 = v1469;
                            }
                            else
                            {
                              do
                              {
                                uint64_t v3 = v1469;
                                if ((*(_WORD *)(v367 + 44) & 8) == 0) {
                                  goto LABEL_695;
                                }
                                unint64_t v367 = *(void *)(v367 + 8);
                              }
                              while ((*(unsigned char *)(*(void *)(v367 + 16) + 10) & 8) == 0);
                              uint64_t v3 = v1469;
                            }
                          }
                          else if ((v372 & 0x80000) == 0)
                          {
LABEL_695:
                            sub_1CC3B6180(v3, "Missing mayLoad flag", v298);
                            __int16 v370 = *(_WORD *)(v369 + 32);
                          }
                        }
                      }
                      if ((v370 & 2) == 0) {
                        goto LABEL_704;
                      }
                      v374 = *(unsigned __int16 **)(v298 + 16);
                      if (*v374 - 1 <= 1 && (*(unsigned char *)(*(void *)(v298 + 32) + 48) & 0x10) != 0) {
                        goto LABEL_704;
                      }
                      uint64_t v375 = *((void *)v374 + 1);
                      if ((*(_WORD *)(v298 + 44) & 0xC) != 0 && (*(_WORD *)(v298 + 44) & 4) == 0)
                      {
                        unint64_t v368 = v298;
                        if ((v375 & 0x100000) == 0)
                        {
                          while ((*(_WORD *)(v368 + 44) & 8) != 0)
                          {
                            unint64_t v368 = *(void *)(v368 + 8);
                            if ((*(unsigned char *)(*(void *)(v368 + 16) + 10) & 0x10) != 0) {
                              goto LABEL_704;
                            }
                          }
LABEL_703:
                          sub_1CC3B6180(v3, "Missing mayStore flag", v298);
                        }
                      }
                      else if ((v375 & 0x100000) == 0)
                      {
                        goto LABEL_703;
                      }
LABEL_704:
                      v348 += 2;
                    }
                    while (v348 != (int *)v352);
                  }
                }
              }
            }
            uint64_t v377 = *(void *)(v3 + 600);
            if (v377)
            {
              uint64_t v378 = *(void *)(v377 + 288);
              int v379 = *(_DWORD *)(v378 + 384);
              if (v379)
              {
                uint64_t v380 = *(void *)(v378 + 368);
                int v381 = v379 - 1;
                unsigned int v382 = (v379 - 1) & ((v298 >> 4) ^ (v298 >> 9));
                uint64_t v383 = *(void *)(v380 + 16 * v382);
                if (v298 == v383)
                {
                  LOBYTE(v379) = 1;
                }
                else
                {
                  int v384 = 1;
                  do
                  {
                    LOBYTE(v379) = v383 != -4096;
                    if (v383 == -4096) {
                      break;
                    }
                    unsigned int v385 = v382 + v384++;
                    unsigned int v382 = v385 & v381;
                    uint64_t v383 = *(void *)(v380 + 16 * v382);
                  }
                  while (v298 != v383);
                }
              }
              int v386 = **(unsigned __int16 **)(v298 + 16);
              if ((v386 - 13) < 5 || v386 == 23)
              {
                long long v388 = "Debug instruction has a slot index";
                if ((v379 & 1) == 0) {
                  goto LABEL_719;
                }
                goto LABEL_718;
              }
              if ((*(_WORD *)(v298 + 44) & 4) == 0)
              {
                long long v388 = "Missing slot index";
                if (v379) {
                  goto LABEL_719;
                }
LABEL_718:
                sub_1CC3B6180(v3, v388, v298);
                goto LABEL_719;
              }
              long long v388 = "Instruction inside bundle has a slot index";
              if (v379) {
                goto LABEL_718;
              }
            }
LABEL_719:
            if (*v330 - 42 <= 0xD5)
            {
              sub_1CC3B71F4(v3, v298);
              goto LABEL_770;
            }
            unint64_t v1488 = 0;
            uint64_t v1489 = 0;
            if (((*(uint64_t (**)(void, unint64_t, unint64_t *))(**(void **)(v3 + 32)
                                                                                          + 1008))(*(void *)(v3 + 32), v298, &v1488) & 1) == 0)sub_1CC3B6180(v3, (const char *)v1488, v298);
            int v390 = *(unsigned __int16 **)(v298 + 16);
            int v391 = *v390;
            switch(v391)
            {
              case 9:
                uint64_t v400 = *(unsigned int **)(v298 + 32);
                unint64_t v401 = ((unint64_t)v400[16] >> 8) & 0xFFF;
                uint64_t v402 = *(void *)(v3 + 40);
                if (v401)
                {
                  uint64_t v403 = *(void *)(v402 + 96);
                  unsigned int RegSizeInBits = *(unsigned __int16 *)(v403 + 4 * v401 + 2);
                }
                else
                {
                  unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v402, v400[17], *(void *)(v3 + 48));
                  uint64_t v400 = *(unsigned int **)(v298 + 32);
                  uint64_t v403 = *(void *)(*(void *)(v3 + 40) + 96);
                }
                if (RegSizeInBits <= *(unsigned __int16 *)(v403 + 4 * v400[28] + 2)) {
                  goto LABEL_770;
                }
                uint64_t v420 = v3;
                v389 = "INSERT_SUBREG expected inserted value to have equal or lesser size than the subreg it was inserted into";
                break;
              case 31:
                v1482 = (uint64_t *)v298;
                unsigned int v396 = *((unsigned __int8 *)v390 + 4);
                if ((v390[4] & 2) == 0 || (int v809 = *(_DWORD *)(v298 + 40), v809 == v396))
                {
                  int v397 = *((unsigned __int8 *)v390 + 4);
                }
                else
                {
                  int v810 = v809 - 1;
                  int v397 = *((unsigned __int8 *)v390 + 4);
                  do
                  {
                    int v811 = *(_DWORD *)(*(void *)(v298 + 32) + 32 * v396);
                    if ((v811 & 0x10000FF) != 0x1000000) {
                      break;
                    }
                    v397 += (v811 & 0x2000000) == 0;
                    if (v810 == v396) {
                      break;
                    }
                    ++v396;
                  }
                  while ((v811 & 0x2000000) == 0);
                }
                uint64_t v398 = *((void *)v390 + 4);
                if (v398)
                {
                  unsigned int v399 = -1;
                  do
                    ++v399;
                  while (*(_WORD *)(v398 + 2 * v399));
                }
                else
                {
                  unsigned int v399 = 0;
                }
                unsigned int v417 = v399 + v397;
                LODWORD(v1483) = v417;
                uint64_t v418 = *(void *)(v298 + 32);
                v389 = "meta operands to STATEPOINT not constant!";
                if (*(unsigned char *)(v418 + 32 * v417) == 1 && *(unsigned char *)(v418 + 32 * (v417 + 1)) == 1)
                {
                  uint64_t v419 = v417 + 2;
                  if (*(unsigned char *)(v418 + 32 * v419) == 1)
                  {
                    unsigned int v813 = v417 + 4;
                    uint64_t v814 = v417 + 4 + *(_DWORD *)(v418 + 32 * v419 + 16);
                    unsigned int v815 = *(_DWORD *)(v298 + 40);
                    v816 = "stack map constant to STATEPOINT is out of range!";
                    if (v815 <= (int)v814 + 1
                      || (v816 = "stack map constant to STATEPOINT not well formed!",
                          *(unsigned char *)(v418 + 32 * v814) != 1)
                      || *(void *)(v418 + 32 * v814 + 16) != 2
                      || *(unsigned char *)(v418 + 32 * (v814 + 1)) != 1)
                    {
                      sub_1CC3B6180(v3, v816, v298);
                      uint64_t v418 = *(void *)(v298 + 32);
                      unsigned int v815 = *(_DWORD *)(v298 + 40);
                      LODWORD(v814) = v813 + *(_DWORD *)(v418 + 32 * v419 + 16);
                    }
                    v817 = "stack map constant to STATEPOINT is out of range!";
                    if (v815 <= (int)v814 + 3
                      || (v817 = "stack map constant to STATEPOINT not well formed!",
                          *(unsigned char *)(v418 + 32 * (v814 + 2)) != 1)
                      || *(void *)(v418 + 32 * (v814 + 2) + 16) != 2
                      || *(unsigned char *)(v418 + 32 * (v814 + 3)) != 1)
                    {
                      sub_1CC3B6180(v3, v817, v298);
                      uint64_t v418 = *(void *)(v298 + 32);
                      unsigned int v815 = *(_DWORD *)(v298 + 40);
                      LODWORD(v814) = v813 + *(_DWORD *)(v418 + 32 * v419 + 16);
                    }
                    unsigned int v818 = v814 + 5;
                    v819 = "stack map constant to STATEPOINT is out of range!";
                    if (v815 <= (int)v814 + 5
                      || (uint64_t v820 = (v814 + 4),
                          v819 = "stack map constant to STATEPOINT not well formed!",
                          *(unsigned char *)(v418 + 32 * v820) != 1)
                      || *(void *)(v418 + 32 * v820 + 16) != 2
                      || *(unsigned char *)(v418 + 32 * v818) != 1)
                    {
                      sub_1CC3B6180(v3, v819, v298);
                      unsigned int v815 = *(_DWORD *)(v298 + 40);
                    }
                    unsigned int NumGCPtrIdx = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v1482);
                    v822 = "stack map constant to STATEPOINT is out of range!";
                    if (v815 <= NumGCPtrIdx
                      || (uint64_t v823 = *(void *)(v298 + 32),
                          v822 = "stack map constant to STATEPOINT not well formed!",
                          *(unsigned char *)(v823 + 32 * (NumGCPtrIdx - 1)) != 1)
                      || *(void *)(v823 + 32 * (NumGCPtrIdx - 1) + 16) != 2
                      || *(unsigned char *)(v823 + 32 * NumGCPtrIdx) != 1)
                    {
                      sub_1CC3B6180(v3, v822, v298);
                      unsigned int v815 = *(_DWORD *)(v298 + 40);
                    }
                    unsigned int NumAllocaIdx = llvm::StatepointOpers::getNumAllocaIdx((llvm::StatepointOpers *)&v1482);
                    v825 = "stack map constant to STATEPOINT is out of range!";
                    if (v815 <= NumAllocaIdx
                      || (uint64_t v826 = *(void *)(v298 + 32),
                          v825 = "stack map constant to STATEPOINT not well formed!",
                          *(unsigned char *)(v826 + 32 * (NumAllocaIdx - 1)) != 1)
                      || *(void *)(v826 + 32 * (NumAllocaIdx - 1) + 16) != 2
                      || *(unsigned char *)(v826 + 32 * NumAllocaIdx) != 1)
                    {
                      sub_1CC3B6180(v3, v825, v298);
                      unsigned int v815 = *(_DWORD *)(v298 + 40);
                    }
                    unsigned int NumGcMapEntriesIdx = llvm::StatepointOpers::getNumGcMapEntriesIdx((llvm::StatepointOpers *)&v1482);
                    v828 = "stack map constant to STATEPOINT is out of range!";
                    if (v815 <= NumGcMapEntriesIdx
                      || (uint64_t v829 = *(void *)(v298 + 32),
                          v828 = "stack map constant to STATEPOINT not well formed!",
                          *(unsigned char *)(v829 + 32 * (NumGcMapEntriesIdx - 1)) != 1)
                      || *(void *)(v829 + 32 * (NumGcMapEntriesIdx - 1) + 16) != 2
                      || *(unsigned char *)(v829 + 32 * NumGcMapEntriesIdx) != 1)
                    {
                      sub_1CC3B6180(v3, v828, v298);
                      uint64_t v829 = *(void *)(v298 + 32);
                    }
                    unsigned int v830 = llvm::StatepointOpers::getNumGCPtrIdx((llvm::StatepointOpers *)&v1482);
                    if (*(_DWORD *)(v829 + 32 * v830 + 16)) {
                      unsigned int v831 = v830 + 1;
                    }
                    else {
                      unsigned int v831 = -1;
                    }
                    unint64_t v832 = 0;
                    unsigned int v833 = llvm::StatepointOpers::getNumAllocaIdx((llvm::StatepointOpers *)&v1482) - 2;
                    while (1)
                    {
                      uint64_t v834 = *(void *)(v298 + 16);
                      unsigned int v835 = *(unsigned __int8 *)(v834 + 4);
                      if ((*(unsigned char *)(v834 + 8) & 2) == 0 || (int v844 = *(_DWORD *)(v298 + 40), v844 == v835))
                      {
                        int v836 = *(unsigned __int8 *)(v834 + 4);
                      }
                      else
                      {
                        int v845 = v844 - 1;
                        int v836 = *(unsigned __int8 *)(v834 + 4);
                        do
                        {
                          int v846 = *(_DWORD *)(*(void *)(v298 + 32) + 32 * v835);
                          if ((v846 & 0x10000FF) != 0x1000000) {
                            break;
                          }
                          v836 += (v846 & 0x2000000) == 0;
                          if (v845 == v835) {
                            break;
                          }
                          ++v835;
                        }
                        while ((v846 & 0x2000000) == 0);
                      }
                      uint64_t v837 = *(void *)(v834 + 32);
                      if (v837)
                      {
                        unsigned int v838 = -1;
                        do
                          ++v838;
                        while (*(_WORD *)(v837 + 2 * v838));
                      }
                      else
                      {
                        unsigned int v838 = 0;
                      }
                      if (v832 >= v838 + v836) {
                        goto LABEL_770;
                      }
                      int v839 = *(_DWORD *)(*(void *)(v298 + 32) + 32 * v832);
                      int v840 = v839 & 0x10000FF;
                      int v841 = v839 & 0xF00000;
                      if (v840 != 0x1000000 || v841 == 0)
                      {
                        v389 = "STATEPOINT defs expected to be tied";
                        goto LABEL_765;
                      }
                      unsigned int TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v298, v832);
                      if (TiedOperandIdx < v831) {
                        break;
                      }
                      ++v832;
                      v389 = "STATEPOINT def tied to non-gc operand";
                      if (TiedOperandIdx > v833) {
                        goto LABEL_765;
                      }
                    }
                    v389 = "STATEPOINT def tied to non-gc operand";
                  }
                }
LABEL_765:
                uint64_t v420 = v3;
                break;
              case 19:
                v392 = *(_DWORD **)(v298 + 32);
                unsigned int v393 = v392[1];
                uint64_t v394 = *(void *)(v3 + 48);
                if ((v393 & 0x80000000) != 0 && (v393 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v394 + 432)) {
                  uint64_t v395 = *(void *)(*(void *)(v394 + 424) + 8 * (v393 & 0x7FFFFFFF));
                }
                else {
                  uint64_t v395 = 0;
                }
                unsigned int v405 = v392[9];
                v1482 = (uint64_t *)v395;
                if ((v405 & 0x80000000) != 0 && (v405 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v394 + 432))
                {
                  uint64_t v406 = *(void *)(*(void *)(v394 + 424) + 8 * (v405 & 0x7FFFFFFF));
                  uint64_t v1471 = v406;
                  if ((v406 & 0xFFFFFFFFFFFFFFF9) != 0)
                  {
                    if ((v395 & 0xFFFFFFFFFFFFFFF9) != 0)
                    {
                      if (v406 != v395)
                      {
                        sub_1CC3B6180(v3, "Copy Instruction is illegal with mismatching types", v298);
                        uint64_t v408 = (llvm::raw_ostream *)llvm::errs(v407);
                        v409 = v408;
                        uint64_t v410 = *((void *)v408 + 4);
                        if ((unint64_t)(*((void *)v408 + 3) - v410) > 5)
                        {
                          *(_WORD *)(v410 + 4) = 8253;
                          *(_DWORD *)uint64_t v410 = 543581508;
                          *((void *)v408 + 4) += 6;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v408, "Def = ", 6uLL);
                        }
                        llvm::LLT::print((llvm::raw_ostream *)&v1482, v409);
                        uint64_t v411 = (void *)*((void *)v409 + 4);
                        if (*((void *)v409 + 3) - (void)v411 > 7uLL)
                        {
                          *uint64_t v411 = 0x203D20637253202CLL;
                          *((void *)v409 + 4) += 8;
                        }
                        else
                        {
                          llvm::raw_ostream::write(v409, ", Src = ", 8uLL);
                        }
                        llvm::LLT::print((llvm::raw_ostream *)&v1471, v409);
                        goto LABEL_1403;
                      }
                      goto LABEL_770;
                    }
                    uint64_t v412 = *(void *)(v3 + 40);
LABEL_751:
                    unsigned int v413 = llvm::TargetRegisterInfo::getRegSizeInBits(v412, v405, *(void *)(v3 + 48));
LABEL_752:
                    if (v393 - 1 >= 0x3FFFFFFF)
                    {
                      uint64_t v414 = *(void *)(v3 + 40);
                    }
                    else
                    {
                      uint64_t v414 = *(void *)(v3 + 40);
                      if ((v1471 & 0xFFFFFFFFFFFFFFF9) != 0)
                      {
                        uint64_t MinimalPhysRegClassLLT = llvm::TargetRegisterInfo::getMinimalPhysRegClassLLT(v414, v393, v1471);
                        uint64_t v414 = *(void *)(v3 + 40);
                        if (MinimalPhysRegClassLLT)
                        {
                          unsigned int v416 = *(_DWORD *)(*(void *)(v414 + 264)
                                           + 24
                                           * (*(unsigned __int16 *)(*(void *)MinimalPhysRegClassLLT + 24)
                                            + *(_DWORD *)(v414 + 272)
                                            * ((*(void *)(v414 + 248) - *(void *)(v414 + 240)) >> 3)));
                          if (v416)
                          {
                            if (!v413) {
                              goto LABEL_770;
                            }
LABEL_1394:
                            if (v416 && v413 != v416 && (*v392 & 0xFFF00) == 0 && (v392[8] & 0xFFF00) == 0)
                            {
                              sub_1CC3B6180(v3, "Copy Instruction is illegal with mismatching sizes", v298);
                              v805 = (llvm::raw_ostream *)llvm::errs(v804);
                              v409 = v805;
                              uint64_t v806 = *((void *)v805 + 4);
                              if ((unint64_t)(*((void *)v805 + 3) - v806) > 0xA)
                              {
                                *(_DWORD *)(v806 + 7) = 540876901;
                                *(void *)uint64_t v806 = *(void *)"Def Size = ";
                                *((void *)v805 + 4) += 11;
                              }
                              else
                              {
                                llvm::raw_ostream::write(v805, "Def Size = ", 0xBuLL);
                              }
                              sub_1CD098D14(v409, v416, 0, 0, 0);
                              v807 = (void *)*((void *)v409 + 4);
                              if (*((void *)v409 + 3) - (void)v807 > 0xCuLL)
                              {
                                qmemcpy(v807, ", Src Size = ", 13);
                                *((void *)v409 + 4) += 13;
                              }
                              else
                              {
                                llvm::raw_ostream::write(v409, ", Src Size = ", 0xDuLL);
                              }
                              sub_1CD098D14(v409, v413, 0, 0, 0);
LABEL_1403:
                              v808 = (unsigned char *)*((void *)v409 + 4);
                              if (*((unsigned char **)v409 + 3) == v808)
                              {
                                llvm::raw_ostream::write(v409, "\n", 1uLL);
                              }
                              else
                              {
                                unsigned char *v808 = 10;
                                ++*((void *)v409 + 4);
                              }
                            }
LABEL_770:
                            v1461 = (llvm::SmallPtrSetImplBase *)*(unsigned int *)(v298 + 40);
                            if (!v1461) {
                              goto LABEL_1387;
                            }
                            unint64_t v421 = 0;
                            while (2)
                            {
                              uint64_t v422 = *(void *)(v298 + 32);
                              int v423 = (unsigned int *)(v422 + 32 * v421);
                              v424 = (unint64_t *)(v423 + 2);
                              unint64_t v425 = v298;
                              if (*((void *)v423 + 1) != v298)
                              {
                                sub_1CC3B6180(v3, "Instruction has operand with wrong parent set", v298);
                                unint64_t v425 = *v424;
                              }
                              v426 = *(unsigned __int16 **)(v425 + 16);
                              unint64_t v427 = *((unsigned __int8 *)v426 + 4);
                              if (*v426 != 27)
                              {
LABEL_778:
                                if (v421 >= v427) {
                                  goto LABEL_781;
                                }
                                int v428 = *v423;
                                if (*v423)
                                {
                                  uint64_t v429 = v3;
                                  v430 = "Explicit definition must be a register";
                                  goto LABEL_825;
                                }
                                if ((v428 & 0x1000000) != 0
                                  || (*(unsigned char *)(*((void *)v426 + 5) + 6 * v421 + 2) & 4) != 0)
                                {
                                  if ((v428 & 0x2000000) == 0) {
                                    goto LABEL_827;
                                  }
                                  uint64_t v429 = v3;
                                  v430 = "Explicit definition marked as implicit";
                                }
                                else
                                {
                                  uint64_t v429 = v3;
                                  v430 = "Explicit definition marked as use";
                                }
                                goto LABEL_825;
                              }
                              if (!v421)
                              {
                                if (*(unsigned char *)v423) {
                                  unint64_t v427 = 0;
                                }
                                goto LABEL_778;
                              }
LABEL_781:
                              unint64_t v431 = v426[1];
                              if (v421 < v431)
                              {
                                if (v431 - 1 != v421 || (*((void *)v426 + 1) & 2) == 0)
                                {
                                  uint64_t v433 = *((void *)v426 + 5);
                                  int v434 = *v423;
                                  if (!*v423)
                                  {
                                    if ((v434 & 0x1000000) != 0
                                      && (*((void *)v426 + 1) & 0x8000000000) == 0
                                      && (*(unsigned char *)(v433 + 6 * v421 + 2) & 4) == 0)
                                    {
                                      sub_1CC3B9D7C(v3, "Explicit operand marked as def", (unint64_t *)(v422 + 32 * v421), v421, 0);
                                      int v434 = *v423;
                                    }
                                    if ((v434 & 0x2000000) != 0)
                                    {
                                      sub_1CC3B9D7C(v3, "Explicit operand marked as implicit", (unint64_t *)(v422 + 32 * v421), v421, 0);
                                      LOBYTE(v434) = *(unsigned char *)v423;
                                    }
                                  }
                                  uint64_t v435 = v433 + 6 * v421;
                                  int v437 = *(unsigned __int8 *)(v435 + 3);
                                  v436 = (unsigned __int8 *)(v435 + 3);
                                  if (v437 == 2 && (v434 > 7u || ((1 << v434) & 0xA1) == 0))
                                  {
                                    sub_1CC3B9D7C(v3, "Expected a register operand.", (unint64_t *)(v422 + 32 * v421), v421, 0);
                                    LOBYTE(v434) = *(unsigned char *)v423;
                                  }
                                  if (!(_BYTE)v434)
                                  {
                                    int v439 = *v436;
                                    if (v439 == 1
                                      || v439 == 4
                                      && ((*(uint64_t (**)(void, unint64_t))(**(void **)(v3 + 32)
                                                                                              + 408))(*(void *)(v3 + 32), v422 + 32 * v421) & 1) == 0)
                                    {
                                      sub_1CC3B9D7C(v3, "Expected a non-register operand.", (unint64_t *)(v422 + 32 * v421), v421, 0);
                                    }
                                  }
                                }
                                if (v421 >= v426[1])
                                {
                                  int v441 = *v423;
                                }
                                else
                                {
                                  __int16 v440 = *(_WORD *)(*((void *)v426 + 5) + 6 * v421 + 4);
                                  int v441 = *v423;
                                  if (v440)
                                  {
                                    if (*v423)
                                    {
                                      uint64_t v429 = v3;
                                      v430 = "Tied use must be a register";
                                      goto LABEL_825;
                                    }
                                    if ((v441 & 0xF00000) != 0)
                                    {
                                      uint64_t v499 = v440 >> 4;
                                      if (v499 == llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v425, v421))
                                      {
                                        int v500 = *(_DWORD *)(v422 + 32 * v421 + 4);
                                        if ((v500 - 1) <= 0x3FFFFFFE)
                                        {
                                          uint64_t v446 = *(void *)(v425 + 32) + 32 * v499;
                                          if (*(unsigned char *)v446)
                                          {
                                            uint64_t v429 = v3;
                                            v430 = "Tied counterpart must be a register";
                                            goto LABEL_944;
                                          }
                                          int v525 = *(_DWORD *)(v446 + 4);
                                          BOOL v526 = v500 == v525 || (v525 - 1) > 0x3FFFFFFE;
                                          if (!v526)
                                          {
                                            uint64_t v429 = v3;
                                            v430 = "Tied physical registers must match.";
LABEL_944:
                                            unsigned int v447 = v499;
LABEL_826:
                                            sub_1CC3B9D7C(v429, v430, (unint64_t *)v446, v447, 0);
                                          }
                                        }
LABEL_827:
                                        int v442 = *v423;
LABEL_828:
                                        if (v442 <= 4u)
                                        {
                                          if ((_BYTE)v442)
                                          {
                                            if (v442 == 4
                                              && (**(_WORD **)(v425 + 16) == 69 || !**(_WORD **)(v425 + 16)))
                                            {
                                              uint64_t v448 = *(void *)(v422 + 32 * v421 + 16);
                                              v449 = *(void **)(v448 + 88);
                                              v450 = *(void **)(v448 + 96);
                                              if (v449 != v450)
                                              {
                                                while (*v449 != *(void *)(v425 + 24))
                                                {
                                                  if (++v449 == v450)
                                                  {
                                                    v449 = v450;
                                                    break;
                                                  }
                                                }
                                              }
                                              if (v449 == v450)
                                              {
                                                uint64_t v451 = v1469;
                                                v452 = "PHI operand is not in the CFG";
                                                goto LABEL_1264;
                                              }
                                            }
                                            goto LABEL_1265;
                                          }
                                          if ((v442 & 0x1000000) != 0
                                            || **(unsigned __int16 **)(v425 + 16) - 13 > 4)
                                          {
                                            if ((v442 & 0x80000000) == 0) {
                                              goto LABEL_873;
                                            }
                                            v389 = "Register operand must not be marked debug";
                                          }
                                          else
                                          {
                                            v389 = "Register operand must be marked debug";
                                            if (v442 < 0)
                                            {
LABEL_873:
                                              uint64_t v487 = v422 + 32 * v421;
                                              unsigned int v490 = *(_DWORD *)(v487 + 4);
                                              v488 = (llvm::raw_ostream *)(v487 + 4);
                                              unint64_t v489 = v490;
                                              if (!v490) {
                                                goto LABEL_1265;
                                              }
                                              uint64_t v491 = *(void *)(v1469 + 48);
                                              if ((**(unsigned char **)(*(void *)v491 + 360) & 4) == 0
                                                || **(unsigned __int16 **)(v425 + 16) - 13 < 5)
                                              {
                                                goto LABEL_1123;
                                              }
                                              v492 = 0;
                                              v493 = (char *)*v424;
                                              unint64_t v494 = *v423;
                                              uint64_t v495 = (v494 >> 8) & 0xFFF;
                                              v1453 = v488;
                                              uint64_t v1432 = v495;
                                              if ((v489 & 0x80000000) != 0)
                                              {
                                                uint64_t v496 = *(void *)(v1469 + 600);
                                                if (v496)
                                                {
                                                  unint64_t v497 = v489 & 0x7FFFFFFF;
                                                  if ((v489 & 0x7FFFFFFF) >= *(_DWORD *)(v496 + 416))
                                                  {
                                                    v492 = 0;
                                                  }
                                                  else
                                                  {
                                                    v492 = *(llvm **)(*(void *)(v496 + 408) + 8 * v497);
                                                    if (v492)
                                                    {
                                                      if (!v495 || (v494 & 0x11000000) == 0x10000000) {
                                                        goto LABEL_900;
                                                      }
                                                      if (!*((_DWORD *)v492 + 2) || *((void *)v492 + 13) != 0) {
                                                        goto LABEL_900;
                                                      }
                                                      if (!*(unsigned char *)(v491 + 16)) {
                                                        goto LABEL_900;
                                                      }
                                                      v389 = "Live interval for subreg operand has no subranges";
                                                      if (!*(unsigned char *)((*(void *)(*(void *)(v491 + 24) + 16 * v497) & 0xFFFFFFFFFFFFFFF8)
                                                                     + 34))
                                                        goto LABEL_900;
LABEL_899:
                                                      sub_1CC3B9D7C(v1469, v389, (unint64_t *)v423, v421, 0);
                                                      LODWORD(v494) = *v423;
                                                      goto LABEL_900;
                                                    }
                                                  }
                                                  v389 = "Virtual register has no live interval";
                                                  goto LABEL_899;
                                                }
                                              }
LABEL_900:
                                              if ((v494 & 0x30000000) != 0 || (v494 & 0x10FFF00) == 0x1000000) {
                                                goto LABEL_1079;
                                              }
                                              if ((v494 >> 26) & ~BYTE3(v494)) {
                                                sub_1CC3BA03C((unsigned int *)v1469, v1422, v489);
                                              }
                                              if ((v489 & 0x80000000) != 0)
                                              {
                                                uint64_t v501 = *(void *)v1423;
                                                if (*(void *)v1423)
                                                {
                                                  if (((*v423 >> 26) & ~HIBYTE(*v423) & 1) != 0
                                                    && (*((_WORD *)v493 + 22) & 4) == 0)
                                                  {
                                                    v1428 = v492;
                                                    v502 = v493;
                                                    v503 = (void *)(v501 + 248);
                                                    unint64_t v504 = v489 & 0x7FFFFFFF;
                                                    if ((v489 & 0x7FFFFFFF) >= *(_DWORD *)(v501 + 256)) {
                                                      sub_1CD520A8C((uint64_t *)(v501 + 248), v504 + 1, v501 + 264);
                                                    }
                                                    uint64_t v505 = *v503 + 56 * v504;
                                                    v506 = *(char ***)(v505 + 32);
                                                    v507 = *(char ***)(v505 + 40);
                                                    v493 = v502;
                                                    if (v506 == v507)
                                                    {
                                                      v492 = v1428;
                                                    }
                                                    else
                                                    {
                                                      v492 = v1428;
                                                      do
                                                      {
                                                        if (*v506 == v493) {
                                                          goto LABEL_992;
                                                        }
                                                        ++v506;
                                                      }
                                                      while (v506 != v507);
                                                      v506 = v507;
                                                    }
LABEL_992:
                                                    if (v506 == v507) {
                                                      sub_1CC3B9D7C(v1469, "Kill missing from LiveVariables", (unint64_t *)v423, v421, 0);
                                                    }
                                                  }
                                                }
                                              }
                                              uint64_t v562 = *(void *)(v1469 + 600);
                                              if (!v562) {
                                                goto LABEL_1037;
                                              }
                                              uint64_t v563 = *(void *)(v562 + 288);
                                              uint64_t v564 = *(unsigned int *)(v563 + 384);
                                              if (!v564) {
                                                goto LABEL_1037;
                                              }
                                              uint64_t v565 = *(void *)(v563 + 368);
                                              unsigned int v566 = v564 - 1;
                                              unsigned int v567 = (v564 - 1) & ((v493 >> 4) ^ (v493 >> 9));
                                              v568 = *(char **)(v565 + 16 * v567);
                                              if (v493 != v568)
                                              {
                                                int v569 = 1;
                                                do
                                                {
                                                  if (v568 == (char *)-4096) {
                                                    goto LABEL_1037;
                                                  }
                                                  unsigned int v570 = v567 + v569++;
                                                  unsigned int v567 = v570 & v566;
                                                  v568 = *(char **)(v565 + 16 * v567);
                                                }
                                                while (v493 != v568);
                                              }
                                              __int16 v571 = *((_WORD *)v493 + 22);
                                              unint64_t v572 = (unint64_t)v493;
                                              if ((v571 & 4) != 0)
                                              {
                                                do
                                                  unint64_t v572 = *(void *)v572 & 0xFFFFFFFFFFFFFFF8;
                                                while ((*(_WORD *)(v572 + 44) & 4) != 0);
                                              }
                                              v573 = v493;
                                              if ((v571 & 8) != 0)
                                              {
                                                do
                                                  v573 = (char *)*((void *)v573 + 1);
                                                while ((*((_WORD *)v573 + 22) & 8) != 0);
                                              }
                                              unint64_t v574 = *((void *)v573 + 1);
                                              if (v572 != v574)
                                              {
                                                do
                                                {
                                                  unsigned int v575 = **(unsigned __int16 **)(v572 + 16);
                                                  BOOL v526 = v575 > 0x17;
                                                  int v576 = (1 << v575) & 0x83E000;
                                                  if (v526 || v576 == 0) {
                                                    goto LABEL_1009;
                                                  }
                                                  unint64_t v572 = *(void *)(v572 + 8);
                                                }
                                                while (v572 != v574);
                                                unint64_t v572 = v574;
                                              }
LABEL_1009:
                                              LODWORD(v578) = ((v572 >> 4) ^ (v572 >> 9)) & v566;
                                              v579 = (uint64_t *)(v565 + 16 * v578);
                                              uint64_t v580 = *v579;
                                              if (v572 == *v579) {
                                                goto LABEL_1015;
                                              }
                                              int v581 = 1;
                                              while (v580 != -4096)
                                              {
                                                int v582 = v578 + v581++;
                                                uint64_t v578 = v582 & v566;
                                                uint64_t v580 = *(void *)(v565 + 16 * v578);
                                                if (v572 == v580)
                                                {
                                                  v579 = (uint64_t *)(v565 + 16 * v578);
                                                  goto LABEL_1015;
                                                }
                                              }
                                              v579 = (uint64_t *)(v565 + 16 * v564);
LABEL_1015:
                                              v1427 = v493;
                                              v1429 = v492;
                                              unint64_t v1440 = v579[1];
                                              if ((v489 - 1) <= 0x3FFFFFFE)
                                              {
                                                if (*(_DWORD *)(v1469 + 240) > v489
                                                  && ((*(void *)((char *)*v1421 + ((v489 >> 3) & 0x1FFFFFF8)) >> v489) & 1) != 0)
                                                {
                                                  goto LABEL_1037;
                                                }
                                                uint64_t v583 = *(void *)(v1469 + 40);
                                                if (v583) {
                                                  v584 = (void *)(v583 + 8);
                                                }
                                                else {
                                                  v584 = 0;
                                                }
                                                unint64_t v585 = *(unsigned int *)(*v584 + 24 * v489 + 16);
                                                v586 = (_WORD *)(v584[6] + ((v585 >> 3) & 0x1FFFFFFE));
                                                unsigned __int16 v587 = *v586 + (v585 & 0xF) * v489;
                                                while (1)
                                                {
                                                  v588 = *(void **)(v1469 + 48);
                                                  uint64_t v589 = (*(uint64_t (**)(void, const char *))(**(void **)(*v588 + 16) + 176))(*(void *)(*v588 + 16), v389);
                                                  if (v589) {
                                                    v590 = (uint64_t *)(v589 + 8);
                                                  }
                                                  else {
                                                    v590 = 0;
                                                  }
                                                  uint64_t v591 = v590[5];
                                                  unsigned int v592 = *(unsigned __int16 *)(v591 + 4 * v587);
                                                  if (!*(_WORD *)(v591 + 4 * v587)) {
                                                    goto LABEL_1033;
                                                  }
                                                  uint64_t v593 = v590[6];
                                                  if (v593) {
                                                    break;
                                                  }
LABEL_1035:
                                                  int v601 = (unsigned __int16)v586[1];
                                                  ++v586;
                                                  v587 += v601;
                                                  if (!v601) {
                                                    goto LABEL_1036;
                                                  }
                                                }
                                                uint64_t v594 = *v590;
                                                unsigned int v595 = *(unsigned __int16 *)(v591 + 4 * v587 + 2);
                                                do
                                                {
                                                  unsigned int v596 = v592;
                                                  unsigned int v597 = (unsigned __int16)v592;
                                                  unsigned int v592 = v595;
                                                  v598 = (unsigned __int16 *)(v593
                                                                            + 2
                                                                            * *(unsigned int *)(v594 + 24 * v597 + 8));
                                                  while (((*(void *)(v588[44] + ((v596 >> 3) & 0x1FF8)) >> v596) & 1) != 0)
                                                  {
                                                    int v599 = *v598++;
                                                    v596 += v599;
                                                    if (!v599) {
                                                      goto LABEL_1035;
                                                    }
                                                  }
                                                  unsigned int v595 = 0;
                                                }
                                                while ((_WORD)v592);
LABEL_1033:
                                                v600 = *(llvm **)(*(void *)(*(void *)(v1469 + 600) + 680)
                                                                + 8 * v587);
                                                if (v600) {
                                                  sub_1CC3BA120((llvm::raw_ostream *)v1469, (unint64_t *)v423, v421, (llvm *)v1440, v600, v587, 0);
                                                }
                                                goto LABEL_1035;
                                              }
LABEL_1036:
                                              v493 = v1427;
                                              v492 = v1429;
                                              if ((v489 & 0x80000000) == 0) {
                                                goto LABEL_1037;
                                              }
                                              sub_1CC3BA120((llvm::raw_ostream *)v1469, (unint64_t *)v423, v421, (llvm *)v1440, v1429, v489, 0);
                                              v634 = (unsigned int *)*((void *)v1429 + 13);
                                              if (!v634 || (*((unsigned char *)v423 + 3) & 1) != 0) {
                                                goto LABEL_1037;
                                              }
                                              if (v1432) {
                                                v635 = (uint64_t *)(*(void *)(*(void *)(v1469 + 40) + 232)
                                              }
                                                                 + 8 * v1432);
                                              else {
                                                v635 = (uint64_t *)((*(void *)(*(void *)(*(void *)(v1469 + 48)
                                              }
                                                                                          + 24)
                                                                              + 16 * (v489 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                                 + 24);
                                              uint64_t v1426 = 0;
                                              uint64_t v1430 = *v635;
                                              unint64_t v776 = v1440 & 0xFFFFFFFFFFFFFFF8;
LABEL_1278:
                                              unint64_t v777 = *((void *)v634 + 14);
                                              if ((v777 & v1430) == 0) {
                                                goto LABEL_1298;
                                              }
                                              sub_1CC3BA120((llvm::raw_ostream *)v1469, (unint64_t *)v423, v421, (llvm *)v1440, (llvm *)v634, v489, (llvm *)v777);
                                              unsigned int v778 = v634[2];
                                              v779 = *(void **)v634;
                                              if (v778)
                                              {
                                                uint64_t v780 = v779[3 * v778 - 2];
                                                unsigned int v781 = *(_DWORD *)(v776 + 24);
                                                unsigned int v782 = (v780 >> 1) & 3 | *(_DWORD *)((v780 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 24);
                                                v783 = *(void **)v634;
                                                unint64_t v784 = v634[2];
                                                if (v781 < v782)
                                                {
                                                  do
                                                  {
                                                    unint64_t v785 = v784 >> 1;
                                                    uint64_t v786 = v783[3 * (v784 >> 1) + 1];
                                                    LODWORD(v786) = (v786 >> 1) & 3 | *(_DWORD *)((v786 & 0xFFFFFFFFFFFFFFF8) + 24);
                                                    v784 -= (v784 >> 1) + 1;
                                                    BOOL v787 = v781 >= v786;
                                                    if (v781 >= v786) {
                                                      unint64_t v788 = v785 + 1;
                                                    }
                                                    else {
                                                      unint64_t v788 = 0;
                                                    }
                                                    v783 += 3 * v788;
                                                    if (!v787) {
                                                      unint64_t v784 = v785;
                                                    }
                                                  }
                                                  while (v784);
LABEL_1290:
                                                  v789 = &v779[3 * v778];
                                                  if (v783 != v789
                                                    && ((*v783 >> 1) & 3 | *(_DWORD *)((*v783 & 0xFFFFFFFFFFFFFFF8) + 24)) <= *(_DWORD *)(v776 + 24))
                                                  {
                                                    uint64_t v790 = v783[2];
                                                    unint64_t v791 = v783[1] & 0xFFFFFFFFFFFFFFF8;
                                                    v792 = v783 + 3;
                                                    if (v776 == v791 && v792 == v789)
                                                    {
                                                      if (v790) {
LABEL_1297:
                                                      }
                                                        v1426 |= *((void *)v634 + 14);
                                                    }
                                                    else if (*(void *)(v790 + 8) != v776)
                                                    {
                                                      goto LABEL_1297;
                                                    }
                                                  }
LABEL_1298:
                                                  v634 = (unsigned int *)*((void *)v634 + 13);
                                                  if (!v634)
                                                  {
                                                    v492 = v1429;
                                                    if ((v1426 & v1430) == 0)
                                                    {
                                                      sub_1CC3B9D7C(v1469, "No live subrange at use", (unint64_t *)v423, v421, 0);
                                                      sub_1CC3BA33C(v1429);
                                                      sub_1CC3BA3FC((llvm *)v1440);
                                                    }
LABEL_1037:
                                                    uint64_t v602 = *(void *)(v1469 + 248);
                                                    int v603 = *(_DWORD *)(v1469 + 264);
                                                    if (v603)
                                                    {
                                                      unsigned int v604 = (v603 - 1) & (37 * v489);
                                                      int v605 = *(_DWORD *)(v602 + 4 * v604);
                                                      if (v489 != v605)
                                                      {
                                                        int v606 = 1;
                                                        while (v605 != -1)
                                                        {
                                                          unsigned int v607 = v604 + v606++;
                                                          unsigned int v604 = v607 & (v603 - 1);
                                                          int v605 = *(_DWORD *)(v602 + 4 * v604);
                                                          if (v489 == v605) {
                                                            goto LABEL_1079;
                                                          }
                                                        }
                                                        goto LABEL_1043;
                                                      }
LABEL_1079:
                                                      v488 = v1453;
                                                      if ((*v423 & 0x1000000) != 0)
                                                      {
                                                        unint64_t v639 = (unint64_t)v493;
                                                        if ((~*v423 & 0x5000000) != 0) {
                                                          v640 = v1424;
                                                        }
                                                        else {
                                                          v640 = v1425;
                                                        }
                                                        uint64_t v641 = v1469;
                                                        sub_1CC3BA03C((unsigned int *)v1469, v640, v489);
                                                        if ((v489 & 0x80000000) != 0)
                                                        {
                                                          v642 = *(void **)(v1469 + 48);
                                                          if (**(void **)(*v642 + 360))
                                                          {
                                                            uint64_t v643 = *(void *)(v642[3] + 16 * (v489 & 0x7FFFFFFF) + 8);
                                                            if ((*(unsigned char *)(v643 + 3) & 1) == 0)
                                                            {
                                                              uint64_t v643 = *(void *)(v643 + 24);
                                                              if ((*(unsigned char *)(v643 + 3) & 1) == 0) {
                                                                uint64_t v643 = 0;
                                                              }
                                                            }
                                                            uint64_t v644 = *(void *)(v643 + 24);
                                                            uint64_t v641 = v1469;
                                                            if (v644 && (*(unsigned char *)(v644 + 3) & 1) != 0) {
                                                              sub_1CC3B9D7C(v1469, "Multiple virtual register defs in SSA form", (unint64_t *)v423, v421, 0);
                                                            }
                                                          }
                                                        }
                                                        uint64_t v645 = *(void *)(v641 + 600);
                                                        v488 = v1453;
                                                        if (v645)
                                                        {
                                                          uint64_t v646 = *(void *)(v645 + 288);
                                                          uint64_t v647 = *(unsigned int *)(v646 + 384);
                                                          if (v647)
                                                          {
                                                            unint64_t v648 = v639;
                                                            uint64_t v649 = *(void *)(v646 + 368);
                                                            unsigned int v650 = v647 - 1;
                                                            unsigned int v651 = (v647 - 1) & ((v639 >> 4) ^ (v639 >> 9));
                                                            uint64_t v652 = *(void *)(v649 + 16 * v651);
                                                            if (v639 == v652)
                                                            {
LABEL_1097:
                                                              __int16 v655 = *(_WORD *)(v639 + 44);
                                                              unint64_t v656 = v639;
                                                              if ((v655 & 4) != 0)
                                                              {
                                                                do
                                                                  unint64_t v656 = *(void *)v656 & 0xFFFFFFFFFFFFFFF8;
                                                                while ((*(_WORD *)(v656 + 44) & 4) != 0);
                                                              }
                                                              if ((v655 & 8) != 0)
                                                              {
                                                                do
                                                                  unint64_t v648 = *(void *)(v648 + 8);
                                                                while ((*(_WORD *)(v648 + 44) & 8) != 0);
                                                              }
                                                              uint64_t v657 = *(void *)(v648 + 8);
                                                              if (v656 != v657)
                                                              {
                                                                while (1)
                                                                {
                                                                  unsigned int v658 = **(unsigned __int16 **)(v656 + 16);
                                                                  BOOL v526 = v658 > 0x17;
                                                                  int v659 = (1 << v658) & 0x83E000;
                                                                  if (v526 || v659 == 0) {
                                                                    break;
                                                                  }
                                                                  unint64_t v656 = *(void *)(v656 + 8);
                                                                  if (v656 == v657)
                                                                  {
                                                                    unint64_t v656 = *(void *)(v648 + 8);
                                                                    break;
                                                                  }
                                                                }
                                                              }
                                                              LODWORD(v661) = ((v656 >> 4) ^ (v656 >> 9)) & v650;
                                                              v662 = (uint64_t *)(v649 + 16 * v661);
                                                              uint64_t v663 = *v662;
                                                              if (v656 != *v662)
                                                              {
                                                                int v664 = 1;
                                                                while (v663 != -4096)
                                                                {
                                                                  int v665 = v661 + v664++;
                                                                  uint64_t v661 = v665 & v650;
                                                                  uint64_t v663 = *(void *)(v649 + 16 * v661);
                                                                  if (v656 == v663)
                                                                  {
                                                                    v662 = (uint64_t *)(v649 + 16 * v661);
                                                                    goto LABEL_1112;
                                                                  }
                                                                }
                                                                v662 = (uint64_t *)(v649 + 16 * v647);
                                                              }
LABEL_1112:
                                                              uint64_t v666 = 2;
                                                              if ((*((unsigned char *)v423 + 3) & 0x40) == 0) {
                                                                uint64_t v666 = 4;
                                                              }
                                                              if ((v489 & 0x80000000) != 0)
                                                              {
                                                                v667 = (llvm *)(v666 | v662[1] & 0xFFFFFFFFFFFFFFF8);
                                                                sub_1CC3BA4CC(v1469, (unint64_t *)v423, v421, v667, v492, v489, 0, 0);
                                                                v488 = v1453;
                                                                v668 = (llvm *)*((void *)v492 + 13);
                                                                if (v668)
                                                                {
                                                                  if (v1432) {
                                                                    v669 = (uint64_t *)(*(void *)(*(void *)(v1469 + 40)
                                                                  }
                                                                                                 + 232)
                                                                                     + 8 * v1432);
                                                                  else {
                                                                    v669 = (uint64_t *)((*(void *)(*(void *)(*(void *)(v1469 + 48) + 24)
                                                                  }
                                                                                                  + 16 * (v489 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                                                                     + 24);
                                                                  uint64_t v670 = *v669;
                                                                  do
                                                                  {
                                                                    v671 = (llvm *)*((void *)v668 + 14);
                                                                    if (((unint64_t)v671 & v670) != 0)
                                                                    {
                                                                      sub_1CC3BA4CC(v1469, (unint64_t *)v423, v421, v667, v668, v489, 1, v671);
                                                                      v488 = v1453;
                                                                    }
                                                                    v668 = (llvm *)*((void *)v668 + 13);
                                                                  }
                                                                  while (v668);
                                                                }
                                                              }
                                                            }
                                                            else
                                                            {
                                                              int v653 = 1;
                                                              while (v652 != -4096)
                                                              {
                                                                unsigned int v654 = v651 + v653++;
                                                                unsigned int v651 = v654 & v650;
                                                                uint64_t v652 = *(void *)(v649 + 16 * v651);
                                                                if (v639 == v652) {
                                                                  goto LABEL_1097;
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
LABEL_1123:
                                                      int v672 = *v423;
                                                      if ((*v423 & 0x110FFF00) == 0x11000000
                                                        && (*(_DWORD *)v488 & 0x80000000) != 0)
                                                      {
                                                        sub_1CC3B9D7C(v1469, "Undef virtual register def operands require a subregister", (unint64_t *)v423, v421, 0);
                                                        int v672 = *v423;
                                                      }
                                                      if ((v672 & 0xF00000) != 0)
                                                      {
                                                        uint64_t v673 = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v425, v421);
                                                        uint64_t v674 = *(void *)(v425 + 32) + 32 * v673;
                                                        int v675 = *(_DWORD *)v674;
                                                        if (*(_DWORD *)v674)
                                                        {
                                                          sub_1CC3B9D7C(v1469, "Must be tied to a register", (unint64_t *)v423, v421, 0);
                                                          int v675 = *(_DWORD *)v674;
                                                        }
                                                        if ((v675 & 0xF00000) == 0) {
                                                          sub_1CC3B9D7C(v1469, "Missing tie flags on tied operand", (unint64_t *)v423, v421, 0);
                                                        }
                                                        if (v421 != llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v425, v673))sub_1CC3B9D7C(v1469, "Inconsistent tie links", (unint64_t *)v423, v421, 0); {
                                                        if (v421 < *((unsigned __int8 *)v426 + 4))
                                                        }
                                                        {
                                                          if (v673 >= v426[1])
                                                          {
                                                            v389 = "Explicit def should be tied to implicit use";
                                                            if ((*(unsigned char *)(v674 + 3) & 2) != 0) {
                                                              goto LABEL_1139;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            v389 = "Explicit def tied to explicit use without tie constraint";
                                                            if ((*(_WORD *)(*((void *)v426 + 5)
                                                                           + 6 * v673
                                                                           + 4) & 1) != 0)
                                                              goto LABEL_1139;
                                                          }
                                                          sub_1CC3B9D7C(v1469, v389, (unint64_t *)v423, v421, 0);
                                                        }
                                                      }
LABEL_1139:
                                                      if ((*(unsigned char *)(*((void *)*v1460 + 45) + 1) & 1) != 0
                                                        && (*((unsigned char *)v423 + 3) & 1) == 0)
                                                      {
                                                        int v676 = *(_DWORD *)(*(void *)(v425 + 32) + 32 * v421);
                                                        int v677 = v676 & 0x10000FF;
                                                        int v678 = v676 & 0xF00000;
                                                        BOOL v679 = v677 || v678 == 0;
                                                        if (!v679
                                                          && v489 != *(_DWORD *)(*(void *)(v425 + 32)
                                                                                       + 32
                                                                                       * llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v425, v421)
                                                                                       + 4))
                                                        {
                                                          sub_1CC3B9D7C(v1469, "Two-address instruction operands must be identical", (unint64_t *)v423, v421, 0);
                                                        }
                                                      }
                                                      unint64_t v680 = *v423;
                                                      uint64_t v681 = (v680 >> 8) & 0xFFF;
                                                      if (!(v489 >> 30))
                                                      {
                                                        if (v681)
                                                        {
                                                          uint64_t v451 = v1469;
                                                          v452 = "Illegal subregister index for physical register";
                                                          goto LABEL_1264;
                                                        }
                                                        if (v421 < v426[1])
                                                        {
                                                          uint64_t v700 = (*(uint64_t (**)(void, unsigned __int16 *, unint64_t, void, void))(**(void **)(v1469 + 32) + 16))(*(void *)(v1469 + 32), v426, v421, *(void *)(v1469 + 40), *(void *)(v1469 + 16));
                                                          if (v700)
                                                          {
                                                            uint64_t v701 = v700;
                                                            if ((v489 >> 3) >= *(unsigned __int16 *)(*(void *)v700 + 22)
                                                              || ((*(unsigned __int8 *)(*(void *)(*(void *)v700 + 8)
                                                                                      + (v489 >> 3)) >> (v489 & 7)) & 1) == 0)
                                                            {
                                                              v702 = sub_1CC3B9D7C(v1469, "Illegal physical register for instruction", (unint64_t *)v423, v421, 0);
                                                              v703 = (llvm::raw_ostream *)llvm::errs(v702);
                                                              uint64_t v704 = *(void *)(v1469 + 40);
                                                              v705 = operator new(0x28uLL);
                                                              *(void *)v705 = &unk_1F26154E0;
                                                              v705[2] = v489;
                                                              *((void *)v705 + 2) = v704;
                                                              v705[6] = 0;
                                                              *((void *)v705 + 4) = 0;
                                                              *((void *)&v1490 + 1) = v705;
                                                              v1420();
                                                              uint64_t v706 = *((void *)v703 + 4);
                                                              if ((unint64_t)(*((void *)v703 + 3) - v706) > 9)
                                                              {
                                                                *(_WORD *)(v706 + 8) = 8289;
                                                                *(void *)uint64_t v706 = *(void *)" is not a ";
                                                                v707 = (void *)(*((void *)v703 + 4) + 10);
                                                                *((void *)v703 + 4) = v707;
                                                              }
                                                              else
                                                              {
                                                                llvm::raw_ostream::write(v703, " is not a ", 0xAuLL);
                                                                v707 = (void *)*((void *)v703 + 4);
                                                              }
                                                              uint64_t v708 = *(void *)(*(void *)(v1469 + 40) + 80);
                                                              if (v708)
                                                              {
                                                                v709 = (const char *)(v708
                                                                                    + *(unsigned int *)(*(void *)v701 + 16));
                                                                size_t v710 = strlen(v709);
                                                                size_t v711 = v710;
                                                                if (v710 <= *((void *)v703 + 3) - (void)v707)
                                                                {
                                                                  if (v710)
                                                                  {
                                                                    memcpy(v707, v709, v710);
                                                                    v707 = (void *)(*((void *)v703 + 4) + v711);
                                                                    *((void *)v703 + 4) = v707;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  llvm::raw_ostream::write(v703, v709, v710);
                                                                  v707 = (void *)*((void *)v703 + 4);
                                                                }
                                                              }
                                                              if (*((void *)v703 + 3) - (void)v707 > 0xAuLL)
                                                              {
                                                                *(_DWORD *)((char *)v707 + 7) = 170816101;
                                                                void *v707 = *(void *)" register.\n";
                                                                *((void *)v703 + 4) += 11;
                                                              }
                                                              else
                                                              {
                                                                llvm::raw_ostream::write(v703, " register.\n", 0xBuLL);
                                                              }
                                                              if (*((unint64_t **)&v1490 + 1) == &v1488)
                                                              {
                                                                (*(void (**)(unint64_t *))(v1488 + 32))(&v1488);
                                                              }
                                                              else if (*((void *)&v1490 + 1))
                                                              {
                                                                (*(void (**)(void))(**((void **)&v1490 + 1) + 40))();
                                                              }
                                                            }
                                                          }
                                                        }
                                                        if ((*v423 & 0x8000000) != 0)
                                                        {
                                                          if (*v424)
                                                          {
                                                            uint64_t v752 = *(void *)(*(void *)(*v424 + 16) + 8);
                                                            if ((*v423 & 0x1000000) != 0)
                                                            {
                                                              if ((v752 & 0x100000000) != 0) {
                                                                goto LABEL_1265;
                                                              }
                                                            }
                                                            else if ((v752 & 0x80000000) != 0)
                                                            {
                                                              goto LABEL_1265;
                                                            }
                                                          }
                                                          if (((*(void *)(*(void *)(*(void *)(v1469 + 48) + 352)
                                                                           + ((v489 >> 3) & 0x1FFFFFF8)) >> v489) & 1) == 0)
                                                            goto LABEL_1265;
                                                          uint64_t v451 = v1469;
                                                          v452 = "isRenamable set on reserved register";
LABEL_1264:
                                                          sub_1CC3B9D7C(v451, v452, (unint64_t *)v423, v421, 0);
                                                          goto LABEL_1265;
                                                        }
                                                        goto LABEL_1265;
                                                      }
                                                      uint64_t v682 = *(void *)(v1469 + 48);
                                                      unint64_t v683 = v489 & 0x7FFFFFFF;
                                                      uint64_t v684 = *(void *)(v682 + 24);
                                                      uint64_t v685 = *(void *)(v684 + 16 * v683);
                                                      if ((v685 & 4) == 0)
                                                      {
                                                        unint64_t v686 = v685 & 0xFFFFFFFFFFFFFFF8;
                                                        if ((v685 & 0xFFFFFFFFFFFFFFF8) != 0)
                                                        {
                                                          if (!v681) {
                                                            goto LABEL_1182;
                                                          }
                                                          uint64_t v687 = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v1469 + 40) + 200))(*(void *)(v1469 + 40), v685 & 0xFFFFFFFFFFFFFFF8, v681);
                                                          if (v687)
                                                          {
                                                            if (v687 != v686)
                                                            {
                                                              v688 = sub_1CC3B9D7C(v1469, "Invalid register class for subregister index", (unint64_t *)v423, v421, 0);
                                                              v689 = (llvm::raw_ostream *)llvm::errs(v688);
                                                              v690 = v689;
                                                              v691 = (void *)*((void *)v689 + 4);
                                                              if (*((void *)v689 + 3) - (void)v691 > 0xEuLL)
                                                              {
                                                                qmemcpy(v691, "Register class ", 15);
                                                                v692 = (void *)(*((void *)v689 + 4) + 15);
                                                                *((void *)v689 + 4) = v692;
                                                              }
                                                              else
                                                              {
                                                                llvm::raw_ostream::write(v689, "Register class ", 0xFuLL);
                                                                v692 = (void *)*((void *)v690 + 4);
                                                              }
                                                              uint64_t v693 = *(void *)(*(void *)(v1469 + 40) + 80);
                                                              if (v693)
                                                              {
                                                                v694 = (const char *)(v693
                                                                                    + *(unsigned int *)(*(void *)v686 + 16));
                                                                size_t v695 = strlen(v694);
                                                                size_t v696 = v695;
                                                                if (v695 <= *((void *)v690 + 3) - (void)v692)
                                                                {
                                                                  if (v695)
                                                                  {
                                                                    memcpy(v692, v694, v695);
                                                                    v692 = (void *)(*((void *)v690 + 4) + v696);
                                                                    *((void *)v690 + 4) = v692;
                                                                  }
                                                                }
                                                                else
                                                                {
                                                                  llvm::raw_ostream::write(v690, v694, v695);
                                                                  v692 = (void *)*((void *)v690 + 4);
                                                                }
                                                              }
                                                              if (*((void *)v690 + 3) - (void)v692 > 0x24uLL)
                                                              {
                                                                qmemcpy(v692, " does not fully support subreg index ", 37);
                                                                *((void *)v690 + 4) += 37;
                                                              }
                                                              else
                                                              {
                                                                llvm::raw_ostream::write(v690, " does not fully support subreg index ", 0x25uLL);
                                                              }
                                                              unint64_t v697 = v681;
                                                              v698 = v690;
                                                              goto LABEL_1208;
                                                            }
LABEL_1182:
                                                            if (v421 >= v426[1]) {
                                                              goto LABEL_1265;
                                                            }
                                                            uint64_t v712 = (*(uint64_t (**)(void, unsigned __int16 *, unint64_t, void, void))(**(void **)(v1469 + 32) + 16))(*(void *)(v1469 + 32), v426, v421, *(void *)(v1469 + 40), *(void *)(v1469 + 16));
                                                            if (!v712) {
                                                              goto LABEL_1265;
                                                            }
                                                            v713 = (void *)v712;
                                                            if (v681)
                                                            {
                                                              uint64_t v714 = (*(uint64_t (**)(void, unint64_t, void))(**(void **)(v1469 + 40) + 256))(*(void *)(v1469 + 40), v686, *(void *)(v1469 + 16));
                                                              if (!v714)
                                                              {
                                                                uint64_t v451 = v1469;
                                                                v452 = "No largest legal super class exists.";
                                                                goto LABEL_1264;
                                                              }
                                                              v713 = (void *)(*(uint64_t (**)(void, uint64_t, void *, uint64_t))(**(void **)(v1469 + 40) + 184))(*(void *)(v1469 + 40), v714, v713, v681);
                                                              if (!v713)
                                                              {
                                                                uint64_t v451 = v1469;
                                                                v452 = "No matching super-reg register class.";
                                                                goto LABEL_1264;
                                                              }
                                                            }
                                                            if (((*(_DWORD *)(v713[1]
                                                                             + ((*(unsigned __int16 *)(*(void *)v686 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(*(void *)v686 + 24)) & 1) != 0)
                                                              goto LABEL_1265;
                                                            v715 = sub_1CC3B9D7C(v1469, "Illegal virtual register for instruction", (unint64_t *)v423, v421, 0);
                                                            v716 = (llvm::raw_ostream *)llvm::errs(v715);
                                                            v690 = v716;
                                                            uint64_t v717 = *((void *)v716 + 4);
                                                            if ((unint64_t)(*((void *)v716 + 3) - v717) > 0xA)
                                                            {
                                                              *(_DWORD *)(v717 + 7) = 543236196;
                                                              *(void *)uint64_t v717 = *(void *)"Expected a ";
                                                              v718 = (void *)(*((void *)v716 + 4) + 11);
                                                              *((void *)v716 + 4) = v718;
                                                            }
                                                            else
                                                            {
                                                              llvm::raw_ostream::write(v716, "Expected a ", 0xBuLL);
                                                              v718 = (void *)*((void *)v690 + 4);
                                                            }
                                                            uint64_t v719 = *(void *)(*(void *)(v1469 + 40) + 80);
                                                            if (v719)
                                                            {
                                                              v720 = (const char *)(v719
                                                                                  + *(unsigned int *)(*v713 + 16));
                                                              size_t v721 = strlen(v720);
                                                              size_t v722 = v721;
                                                              if (v721 <= *((void *)v690 + 3) - (void)v718)
                                                              {
                                                                if (v721)
                                                                {
                                                                  memcpy(v718, v720, v721);
                                                                  v718 = (void *)(*((void *)v690 + 4) + v722);
                                                                  *((void *)v690 + 4) = v718;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                llvm::raw_ostream::write(v690, v720, v721);
                                                                v718 = (void *)*((void *)v690 + 4);
                                                              }
                                                            }
                                                            if (*((void *)v690 + 3) - (void)v718 > 0x14uLL)
                                                            {
                                                              qmemcpy(v718, " register, but got a ", 21);
                                                              v723 = (_WORD *)(*((void *)v690 + 4) + 21);
                                                              *((void *)v690 + 4) = v723;
                                                            }
                                                            else
                                                            {
                                                              llvm::raw_ostream::write(v690, " register, but got a ", 0x15uLL);
                                                              v723 = (_WORD *)*((void *)v690 + 4);
                                                            }
                                                            uint64_t v724 = *(void *)(*(void *)(v1469 + 40) + 80);
                                                            if (v724)
                                                            {
                                                              v725 = (const char *)(v724
                                                                                  + *(unsigned int *)(*(void *)v686 + 16));
                                                              size_t v726 = strlen(v725);
                                                              size_t v727 = v726;
                                                              if (v726 <= *((void *)v690 + 3) - (void)v723)
                                                              {
                                                                if (v726)
                                                                {
                                                                  memcpy(v723, v725, v726);
                                                                  v723 = (_WORD *)(*((void *)v690 + 4) + v727);
                                                                  *((void *)v690 + 4) = v723;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                llvm::raw_ostream::write(v690, v725, v726);
                                                                v723 = (_WORD *)*((void *)v690 + 4);
                                                              }
                                                            }
                                                            if (*((void *)v690 + 3) - (void)v723 <= 9uLL)
                                                            {
                                                              v728 = v690;
                                                              v729 = " register\n";
                                                              size_t v730 = 10;
                                                              goto LABEL_1210;
                                                            }
                                                            v723[4] = 2674;
                                                            *(void *)v723 = *(void *)" register\n";
                                                            uint64_t v794 = *((void *)v690 + 4) + 10;
                                                          }
                                                          else
                                                          {
                                                            v731 = sub_1CC3B9D7C(v1469, "Invalid subregister index for virtual register", (unint64_t *)v423, v421, 0);
                                                            v732 = (llvm::raw_ostream *)llvm::errs(v731);
                                                            v690 = v732;
                                                            v733 = (void *)*((void *)v732 + 4);
                                                            if (*((void *)v732 + 3) - (void)v733 > 0xEuLL)
                                                            {
                                                              qmemcpy(v733, "Register class ", 15);
                                                              v734 = (void *)(*((void *)v732 + 4) + 15);
                                                              *((void *)v732 + 4) = v734;
                                                            }
                                                            else
                                                            {
                                                              llvm::raw_ostream::write(v732, "Register class ", 0xFuLL);
                                                              v734 = (void *)*((void *)v690 + 4);
                                                            }
                                                            uint64_t v735 = *(void *)(*(void *)(v1469 + 40) + 80);
                                                            if (v735)
                                                            {
                                                              v736 = (const char *)(v735
                                                                                  + *(unsigned int *)(*(void *)v686 + 16));
                                                              size_t v737 = strlen(v736);
                                                              size_t v738 = v737;
                                                              if (v737 <= *((void *)v690 + 3) - (void)v734)
                                                              {
                                                                if (v737)
                                                                {
                                                                  memcpy(v734, v736, v737);
                                                                  v734 = (void *)(*((void *)v690 + 4) + v738);
                                                                  *((void *)v690 + 4) = v734;
                                                                }
                                                              }
                                                              else
                                                              {
                                                                llvm::raw_ostream::write(v690, v736, v737);
                                                                v734 = (void *)*((void *)v690 + 4);
                                                              }
                                                            }
                                                            if (*((void *)v690 + 3) - (void)v734 > 0x1EuLL)
                                                            {
                                                              qmemcpy(v734, " does not support subreg index ", 31);
                                                              *((void *)v690 + 4) += 31;
                                                            }
                                                            else
                                                            {
                                                              llvm::raw_ostream::write(v690, " does not support subreg index ", 0x1FuLL);
                                                            }
                                                            v698 = v690;
                                                            unint64_t v697 = v681;
LABEL_1208:
                                                            sub_1CD098D14(v698, v697, 0, 0, 0);
                                                            v739 = (unsigned char *)*((void *)v690 + 4);
                                                            if (*((unsigned char **)v690 + 3) == v739)
                                                            {
                                                              v728 = v690;
                                                              v729 = "\n";
                                                              size_t v730 = 1;
                                                              goto LABEL_1210;
                                                            }
                                                            unsigned char *v739 = 10;
                                                            uint64_t v794 = *((void *)v690 + 4) + 1;
                                                          }
LABEL_1305:
                                                          *((void *)v690 + 4) = v794;
                                                          goto LABEL_1265;
                                                        }
                                                      }
                                                      if (*(unsigned char *)(v1469 + 62)
                                                        || (v680 & 0x1000000) != 0
                                                        || **(unsigned __int16 **)(v425 + 16) - 13 > 1
                                                        || ((v489 & 0x80000000) == 0
                                                          ? (v699 = (uint64_t *)(*(void *)(v682 + 272) + 8 * v489))
                                                          : (v699 = (uint64_t *)(v684 + 16 * v683 + 8)),
                                                            (uint64_t v740 = *v699) != 0
                                                         && ((*(unsigned char *)(v740 + 3) & 1) != 0
                                                          || (uint64_t v796 = *(void *)(v740 + 24)) != 0
                                                          && (*(unsigned char *)(v796 + 3) & 1) != 0)))
                                                      {
                                                        if ((v680 & 0x10000000) != 0) {
                                                          sub_1CC3B9D7C(v1469, "Generic virtual register use cannot be undef", (unint64_t *)v423, v421, 0);
                                                        }
                                                        uint64_t v451 = v1469;
                                                        if (*(unsigned char *)(v1469 + 61))
                                                        {
                                                          v452 = "Generic virtual register invalid in a Selected function";
                                                          goto LABEL_1264;
                                                        }
                                                        if ((v489 & 0x80000000) != 0
                                                          && (uint64_t v753 = *(void *)(v1469 + 48),
                                                              v683 < *(unsigned int *)(v753 + 432)))
                                                        {
                                                          unint64_t v1488 = *(void *)(*(void *)(v753 + 424) + 8 * v683);
                                                          if ((v1488 & 0xFFFFFFFFFFFFFFF9) != 0)
                                                          {
                                                            uint64_t v754 = *(void *)(*(void *)(v753 + 24)
                                                                             + 16 * (v489 & 0x7FFFFFFF));
                                                            if ((v754 & 4) != 0
                                                              && (unint64_t v755 = v754 & 0xFFFFFFFFFFFFFFF8,
                                                                  (v754 & 0xFFFFFFFFFFFFFFF8) != 0))
                                                            {
                                                              unint64_t v756 = *(unsigned int *)(v755 + 16);
                                                              unint64_t v757 = sub_1CB8F1DC4(&v1488);
                                                              if (v389 == 1) {
                                                              if (v757 > v756)
                                                              }
                                                              {
                                                                v758 = sub_1CC3B9D7C(v1469, "Register bank is too small for virtual register", (unint64_t *)v423, v421, 0);
                                                                v759 = (llvm::raw_ostream *)llvm::errs(v758);
                                                                v690 = v759;
                                                                v760 = (void *)*((void *)v759 + 4);
                                                                if (*((void *)v759 + 3) - (void)v760 > 0xDuLL)
                                                                {
                                                                  qmemcpy(v760, "Register bank ", 14);
                                                                  v761 = (void *)(*((void *)v759 + 4) + 14);
                                                                  *((void *)v759 + 4) = v761;
                                                                }
                                                                else
                                                                {
                                                                  llvm::raw_ostream::write(v759, "Register bank ", 0xEuLL);
                                                                  v761 = (void *)*((void *)v690 + 4);
                                                                }
                                                                v762 = *(const void **)(v755 + 8);
                                                                if (v762)
                                                                {
                                                                  size_t v763 = strlen(*(const char **)(v755 + 8));
                                                                  size_t v764 = v763;
                                                                  if (v763 <= *((void *)v690 + 3) - (void)v761)
                                                                  {
                                                                    if (v763)
                                                                    {
                                                                      memcpy(v761, v762, v763);
                                                                      v761 = (void *)(*((void *)v690 + 4) + v764);
                                                                      *((void *)v690 + 4) = v761;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    llvm::raw_ostream::write(v690, (const char *)v762, v763);
                                                                    v761 = (void *)*((void *)v690 + 4);
                                                                  }
                                                                }
                                                                if (*((void *)v690 + 3) - (void)v761 > 0xAuLL)
                                                                {
                                                                  *(_DWORD *)((char *)v761 + 7) = 678194273;
                                                                  void *v761 = *(void *)" too small(";
                                                                  *((void *)v690 + 4) += 11;
                                                                }
                                                                else
                                                                {
                                                                  llvm::raw_ostream::write(v690, " too small(", 0xBuLL);
                                                                }
                                                                sub_1CD098D14(v690, *(unsigned int *)(v755 + 16), 0, 0, 0);
                                                                uint64_t v765 = *((void *)v690 + 4);
                                                                if ((unint64_t)(*((void *)v690 + 3) - v765) > 8)
                                                                {
                                                                  *(unsigned char *)(v765 + 8) = 32;
                                                                  *(void *)uint64_t v765 = *(void *)") to fit ";
                                                                  *((void *)v690 + 4) += 9;
                                                                }
                                                                else
                                                                {
                                                                  llvm::raw_ostream::write(v690, ") to fit ", 9uLL);
                                                                }
                                                                unint64_t v766 = sub_1CB8F1DC4(&v1488);
                                                                if (v767 == 1)
                                                                {
                                                                  uint64_t v768 = *((void *)v690 + 4);
                                                                  if ((unint64_t)(*((void *)v690 + 3) - v768) > 8)
                                                                  {
                                                                    *(unsigned char *)(v768 + 8) = 32;
                                                                    *(void *)uint64_t v768 = *(void *)"vscale x ";
                                                                    *((void *)v690 + 4) += 9;
                                                                  }
                                                                  else
                                                                  {
                                                                    llvm::raw_ostream::write(v690, "vscale x ", 9uLL);
                                                                  }
                                                                }
                                                                sub_1CD098D14(v690, v766, 0, 0, 0);
                                                                uint64_t v769 = *((void *)v690 + 4);
                                                                if ((unint64_t)(*((void *)v690 + 3) - v769) <= 5)
                                                                {
                                                                  v728 = v690;
                                                                  v729 = "-bits\n";
                                                                  size_t v730 = 6;
                                                                  goto LABEL_1210;
                                                                }
                                                                *(_WORD *)(v769 + 4) = 2675;
                                                                *(_DWORD *)uint64_t v769 = 1953063469;
                                                                uint64_t v794 = *((void *)v690 + 4) + 6;
                                                                goto LABEL_1305;
                                                              }
                                                            }
                                                            else if (*(unsigned char *)(v1469 + 60))
                                                            {
                                                              uint64_t v451 = v1469;
                                                              v452 = "Generic virtual register must have a bank in a RegB"
                                                                     "ankSelected function";
                                                              goto LABEL_1264;
                                                            }
                                                            goto LABEL_1213;
                                                          }
                                                        }
                                                        else
                                                        {
                                                          unint64_t v1488 = 0;
                                                        }
                                                        uint64_t v451 = v1469;
                                                        v452 = "Generic virtual register must have a valid type";
                                                        goto LABEL_1264;
                                                      }
LABEL_1213:
                                                      if (v681)
                                                      {
                                                        uint64_t v451 = v1469;
                                                        v452 = "Generic virtual register does not allow subregister index";
                                                        goto LABEL_1264;
                                                      }
                                                      if (*v426 - 45 >= 0xD3
                                                        && v421 < v426[1]
                                                        && (*(uint64_t (**)(void, unsigned __int16 *, unint64_t, void, void))(**(void **)(v1469 + 32) + 16))(*(void *)(v1469 + 32), v426, v421, *(void *)(v1469 + 40), *(void *)(v1469 + 16)))
                                                      {
                                                        v741 = sub_1CC3B9D7C(v1469, "Virtual register does not match instruction constraint", (unint64_t *)v423, v421, 0);
                                                        v742 = (llvm::raw_ostream *)llvm::errs(v741);
                                                        v743 = v742;
                                                        v744 = (void *)*((void *)v742 + 4);
                                                        if (*((void *)v742 + 3) - (void)v744 > 0x15uLL)
                                                        {
                                                          qmemcpy(v744, "Expect register class ", 22);
                                                          *((void *)v742 + 4) += 22;
                                                        }
                                                        else
                                                        {
                                                          llvm::raw_ostream::write(v742, "Expect register class ", 0x16uLL);
                                                        }
                                                        uint64_t v745 = *(void *)(v1469 + 40);
                                                        uint64_t v746 = (*(uint64_t (**)(void, unsigned __int16 *, unint64_t, uint64_t, void))(**(void **)(v1469 + 32) + 16))(*(void *)(v1469 + 32), v426, v421, v745, *(void *)(v1469 + 16));
                                                        uint64_t v747 = *(void *)(v745 + 80);
                                                        v748 = (unsigned char *)*((void *)v743 + 4);
                                                        if (v747)
                                                        {
                                                          v749 = (const char *)(v747
                                                                              + *(unsigned int *)(*(void *)v746 + 16));
                                                          size_t v750 = strlen(v749);
                                                          size_t v751 = v750;
                                                          if (v750 <= *((void *)v743 + 3) - (void)v748)
                                                          {
                                                            if (v750)
                                                            {
                                                              memcpy(v748, v749, v750);
                                                              v748 = (unsigned char *)(*((void *)v743 + 4) + v751);
                                                              *((void *)v743 + 4) = v748;
                                                            }
                                                          }
                                                          else
                                                          {
                                                            llvm::raw_ostream::write(v743, v749, v750);
                                                            v748 = (unsigned char *)*((void *)v743 + 4);
                                                          }
                                                        }
                                                        if (*((void *)v743 + 3) - (void)v748 > 0x10uLL)
                                                        {
                                                          v748[16] = 10;
                                                          *(_OWORD *)v748 = *(_OWORD *)" but got nothing\n";
                                                          *((void *)v743 + 4) += 17;
                                                          goto LABEL_1265;
                                                        }
                                                        v728 = v743;
                                                        v729 = " but got nothing\n";
                                                        size_t v730 = 17;
LABEL_1210:
                                                        llvm::raw_ostream::write(v728, v729, v730);
                                                      }
LABEL_1265:
                                                      ++v421;
                                                      uint64_t v3 = v1469;
                                                      if ((llvm::SmallPtrSetImplBase *)v421 == v1461)
                                                      {
LABEL_1387:
                                                        int v300 = (*(unsigned __int16 *)(v298 + 44) >> 3) & 1;
                                                        uint64_t v112 = v1434;
                                                        unint64_t v110 = v1435;
                                                        unint64_t v299 = v1444;
                                                        goto LABEL_1388;
                                                      }
                                                      continue;
                                                    }
LABEL_1043:
                                                    if ((v489 - 1) > 0x3FFFFFFE)
                                                    {
                                                      uint64_t v632 = *(void *)(v1469 + 48);
                                                      if ((v489 & 0x80000000) != 0) {
                                                        v633 = (uint64_t *)(*(void *)(v632 + 24)
                                                      }
                                                                         + 16 * (v489 & 0x7FFFFFFF)
                                                                         + 8);
                                                      else {
                                                        v633 = (uint64_t *)(*(void *)(v632 + 272) + 8 * v489);
                                                      }
                                                      uint64_t v636 = *v633;
                                                      if (v636)
                                                      {
                                                        if ((*(unsigned char *)(v636 + 3) & 1) != 0
                                                          || (uint64_t v797 = *(void *)(v636 + 24)) != 0
                                                          && (*(unsigned char *)(v797 + 3) & 1) != 0)
                                                        {
                                                          unint64_t v1488 = *((void *)v493 + 3);
                                                          v770 = sub_1CC3B6B7C(v1448, (uint64_t *)&v1488);
                                                          int v771 = *((_DWORD *)v770 + 12);
                                                          if (v771)
                                                          {
                                                            uint64_t v772 = v770[4];
                                                            int v773 = v771 - 1;
                                                            unsigned int v774 = v773 & (37 * v489);
                                                            int v775 = *(_DWORD *)(v772 + 4 * v774);
                                                            if (v489 == v775)
                                                            {
LABEL_1273:
                                                              uint64_t v637 = v1469;
                                                              v638 = "Using a killed virtual register";
                                                              goto LABEL_1078;
                                                            }
                                                            int v798 = 1;
                                                            while (v775 != -1)
                                                            {
                                                              unsigned int v799 = v774 + v798++;
                                                              unsigned int v774 = v799 & v773;
                                                              int v775 = *(_DWORD *)(v772 + 4 * v774);
                                                              if (v489 == v775) {
                                                                goto LABEL_1273;
                                                              }
                                                            }
                                                          }
                                                          if (**((_WORD **)v493 + 2) && **((_WORD **)v493 + 2) != 69)
                                                          {
                                                            v1482 = (uint64_t *)v489;
                                                            v1483 = (uint64_t *)v493;
                                                            sub_1CD551164((uint64_t)&v1488, (uint64_t)(v770 + 1), (int *)&v1482, &v1483);
                                                          }
                                                          goto LABEL_1079;
                                                        }
                                                      }
                                                      uint64_t v637 = v1469;
                                                      v638 = "Reading virtual register without a def";
                                                    }
                                                    else
                                                    {
                                                      if (*(_DWORD *)(v1469 + 240) > v489
                                                        && ((*(void *)((char *)*v1421 + ((v489 >> 3) & 0x1FFFFFF8)) >> v489) & 1) != 0)
                                                      {
                                                        goto LABEL_1079;
                                                      }
                                                      uint64_t v608 = *(void *)(v1469 + 40);
                                                      uint64_t v609 = *(void *)(v608 + 56);
                                                      uint64_t v610 = *(void *)(v608 + 8);
                                                      v611 = (_WORD *)(v609
                                                                     + 2
                                                                     * *(unsigned int *)(v610
                                                                                       + 24 * v489
                                                                                       + 4));
                                                      if (*v611)
                                                      {
                                                        unsigned __int16 v612 = *v611 + v489;
                                                        int v613 = v603 - 1;
                                                        do
                                                        {
                                                          if (v603)
                                                          {
                                                            unsigned int v614 = (37 * v612) & v613;
                                                            int v615 = *(_DWORD *)(v602 + 4 * v614);
                                                            if (v615 == v612) {
                                                              goto LABEL_1079;
                                                            }
                                                            int v616 = 1;
                                                            while (v615 != -1)
                                                            {
                                                              unsigned int v617 = v614 + v616++;
                                                              unsigned int v614 = v617 & v613;
                                                              int v615 = *(_DWORD *)(v602 + 4 * v614);
                                                              if (v615 == v612) {
                                                                goto LABEL_1079;
                                                              }
                                                            }
                                                          }
                                                          int v618 = (unsigned __int16)v611[1];
                                                          ++v611;
                                                          v612 += v618;
                                                        }
                                                        while (v618);
                                                      }
                                                      uint64_t v619 = *((void *)v493 + 4);
                                                      uint64_t v620 = *((void *)v493 + 2);
                                                      unsigned int v621 = *(unsigned __int8 *)(v620 + 4);
                                                      uint64_t v622 = *((unsigned int *)v493 + 10);
                                                      if ((*(unsigned char *)(v620 + 8) & 2) == 0)
                                                      {
                                                        unsigned int v623 = *(unsigned __int8 *)(v620 + 4);
                                                        goto LABEL_1057;
                                                      }
                                                      if (v622 != v621)
                                                      {
                                                        unsigned int v623 = *(unsigned __int8 *)(v620 + 4);
                                                        do
                                                        {
                                                          int v795 = *(_DWORD *)(v619 + 32 * v621);
                                                          if ((v795 & 0x10000FF) != 0x1000000) {
                                                            break;
                                                          }
                                                          v623 += (v795 & 0x2000000) == 0;
                                                          if (v622 - 1 == v621) {
                                                            break;
                                                          }
                                                          ++v621;
                                                        }
                                                        while ((v795 & 0x2000000) == 0);
LABEL_1057:
                                                        if (v623 != v622)
                                                        {
                                                          v624 = (_DWORD *)(v619 + 32 * v622);
                                                          v625 = (_DWORD *)(v619 + 32 * v623);
                                                          char v626 = 1;
                                                          do
                                                          {
                                                            while ((*v625 & 0x20000FF) == 0x2000000)
                                                            {
                                                              unsigned int v627 = v625[1];
                                                              if (v627 - 1 > 0x3FFFFFFE) {
                                                                break;
                                                              }
                                                              uint64_t v628 = *(unsigned int *)(v610 + 24 * v627 + 4);
                                                              if (!*(_WORD *)(v609 + 2 * v628)) {
                                                                break;
                                                              }
                                                              unsigned __int16 v629 = *(_WORD *)(v609 + 2 * v628) + v627;
                                                              v630 = (unsigned __int16 *)(v609 + 2 + 2 * v628);
                                                              while (v489 != v629)
                                                              {
                                                                int v631 = *v630++;
                                                                v629 += v631;
                                                                if (!v631) {
                                                                  goto LABEL_1065;
                                                                }
                                                              }
                                                              char v626 = 0;
                                                              v625 += 8;
                                                              if (v625 == v624) {
                                                                goto LABEL_1079;
                                                              }
                                                            }
LABEL_1065:
                                                            v625 += 8;
                                                          }
                                                          while (v625 != v624);
                                                          if ((v626 & 1) == 0) {
                                                            goto LABEL_1079;
                                                          }
                                                        }
                                                      }
                                                      uint64_t v637 = v1469;
                                                      v638 = "Using an undefined physical register";
                                                    }
LABEL_1078:
                                                    sub_1CC3B9D7C(v637, v638, (unint64_t *)v423, v421, 0);
                                                    goto LABEL_1079;
                                                  }
                                                  goto LABEL_1278;
                                                }
                                              }
                                              else
                                              {
                                                unsigned int v778 = 0;
                                              }
                                              v783 = &v779[3 * v778];
                                              goto LABEL_1290;
                                            }
                                          }
                                          sub_1CC3B9D7C(v3, v389, (unint64_t *)(v422 + 32 * v421), v421, 0);
                                          goto LABEL_873;
                                        }
                                        if (v442 != 5)
                                        {
                                          if (v442 == 12)
                                          {
                                            uint64_t v453 = *(void *)(v422 + 32 * v421 + 16);
                                            unint64_t v454 = *(unsigned int *)(v1469 + 520);
                                            if (v454 >= *(unsigned int *)(v1469 + 524)) {
                                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                                            }
                                            *(void *)(*(void *)(v1469 + 512) + 8 * v454) = v453;
                                            ++*(_DWORD *)(v1469 + 520);
                                          }
                                          goto LABEL_1265;
                                        }
                                        uint64_t v455 = *(void *)(v3 + 608);
                                        if (!v455) {
                                          goto LABEL_1265;
                                        }
                                        uint64_t v456 = v422 + 32 * v421;
                                        int v458 = *(_DWORD *)(v456 + 16);
                                        v457 = (int *)(v456 + 16);
                                        LODWORD(v1488) = v458;
                                        if (!sub_1CC3BAF58((void *)(v455 + 352), (int *)&v1488)) {
                                          goto LABEL_1265;
                                        }
                                        uint64_t v459 = *(void *)(v1469 + 600);
                                        if (!v459) {
                                          goto LABEL_1265;
                                        }
                                        uint64_t v460 = *(void *)(v459 + 288);
                                        int v461 = *(_DWORD *)(v460 + 384);
                                        if (!v461) {
                                          goto LABEL_1265;
                                        }
                                        uint64_t v462 = *(void *)(v460 + 368);
                                        int v463 = v461 - 1;
                                        unsigned int v464 = v463 & ((v425 >> 4) ^ (v425 >> 9));
                                        uint64_t v465 = *(void *)(v462 + 16 * v464);
                                        if (v425 != v465)
                                        {
                                          int v466 = 1;
                                          do
                                          {
                                            if (v465 == -4096) {
                                              goto LABEL_1265;
                                            }
                                            unsigned int v467 = v464 + v466++;
                                            unsigned int v464 = v467 & v463;
                                            uint64_t v465 = *(void *)(v462 + 16 * v464);
                                          }
                                          while (v425 != v465);
                                        }
                                        int v468 = *v457;
                                        uint64_t v469 = *(void *)(v1469 + 608);
                                        LODWORD(v1488) = *v457;
                                        v470 = sub_1CC2CD930((void *)(v469 + 352), (int *)&v1488);
                                        v471 = v470;
                                        __int16 v472 = *(_WORD *)(v425 + 44);
                                        unint64_t v473 = v425;
                                        if ((v472 & 4) != 0)
                                        {
                                          do
                                            unint64_t v473 = *(void *)v473 & 0xFFFFFFFFFFFFFFF8;
                                          while ((*(_WORD *)(v473 + 44) & 4) != 0);
                                        }
                                        uint64_t v474 = *(void *)(*(void *)(v1469 + 600) + 288);
                                        unint64_t v475 = v425;
                                        if ((v472 & 8) != 0)
                                        {
                                          do
                                            unint64_t v475 = *(void *)(v475 + 8);
                                          while ((*(_WORD *)(v475 + 44) & 8) != 0);
                                        }
                                        unint64_t v476 = *(void *)(v475 + 8);
                                        if (v473 != v476)
                                        {
                                          do
                                          {
                                            unsigned int v477 = **(unsigned __int16 **)(v473 + 16);
                                            BOOL v526 = v477 > 0x17;
                                            int v478 = (1 << v477) & 0x83E000;
                                            if (v526 || v478 == 0) {
                                              goto LABEL_864;
                                            }
                                            unint64_t v473 = *(void *)(v473 + 8);
                                          }
                                          while (v473 != v476);
                                          unint64_t v473 = v476;
                                        }
LABEL_864:
                                        uint64_t v480 = *(void *)(v474 + 368);
                                        uint64_t v481 = *(unsigned int *)(v474 + 384);
                                        if (v481)
                                        {
                                          LODWORD(v482) = ((v473 >> 4) ^ (v473 >> 9)) & (v481 - 1);
                                          v483 = (uint64_t *)(v480 + 16 * v482);
                                          uint64_t v484 = *v483;
                                          if (v473 != *v483)
                                          {
                                            int v485 = 1;
                                            do
                                            {
                                              if (v484 == -4096) {
                                                goto LABEL_915;
                                              }
                                              int v486 = v482 + v485++;
                                              uint64_t v482 = v486 & (v481 - 1);
                                              uint64_t v484 = *(void *)(v480 + 16 * v482);
                                            }
                                            while (v473 != v484);
                                            v483 = (uint64_t *)(v480 + 16 * v482);
                                          }
                                        }
                                        else
                                        {
LABEL_915:
                                          v483 = (uint64_t *)(v480 + 16 * v481);
                                        }
                                        v508 = (llvm::LiveInterval *)(v470 + 3);
                                        uint64_t v509 = v483[1];
                                        v510 = *(unsigned __int16 **)(v425 + 16);
                                        unsigned int v511 = *v510 - 1;
                                        if (v511 <= 1)
                                        {
                                          uint64_t v800 = *(void *)(*(void *)(v425 + 32) + 48);
                                          if ((v800 & 0x10) != 0)
                                          {
                                            LODWORD(v514) = 1;
                                            goto LABEL_1373;
                                          }
                                        }
                                        unint64_t v512 = *((void *)v510 + 1);
                                        int v513 = v472 & 0xC;
                                        if ((v472 & 0xC) != 0 && (v472 & 4) == 0)
                                        {
                                          unint64_t v801 = v425;
                                          if ((v512 & 0x100000) != 0)
                                          {
                                            LODWORD(v514) = 1;
                                          }
                                          else
                                          {
                                            do
                                            {
                                              unsigned int v802 = *(unsigned __int16 *)(v801 + 44);
                                              LODWORD(v514) = (v802 >> 3) & 1;
                                              if ((v802 & 8) == 0) {
                                                break;
                                              }
                                              unint64_t v801 = *(void *)(v801 + 8);
                                            }
                                            while ((*(unsigned char *)(*(void *)(v801 + 16) + 10) & 0x10) == 0);
                                          }
                                        }
                                        else
                                        {
                                          uint64_t v514 = (v512 >> 20) & 1;
                                        }
                                        if (v511 <= 1)
                                        {
                                          uint64_t v800 = *(void *)(*(void *)(v425 + 32) + 48);
LABEL_1373:
                                          if ((v800 & 8) == 0)
                                          {
                                            int v513 = v472 & 0xC;
                                            goto LABEL_921;
                                          }
                                        }
                                        else
                                        {
LABEL_921:
                                          unint64_t v515 = *((void *)v510 + 1);
                                          if (!v513 || (v472 & 4) != 0)
                                          {
                                            uint64_t v516 = (v515 >> 19) & 1;
                                            goto LABEL_924;
                                          }
                                          unint64_t v803 = v425;
                                          if ((v515 & 0x80000) == 0)
                                          {
                                            while ((*(_WORD *)(v803 + 44) & 8) != 0)
                                            {
                                              unint64_t v803 = *(void *)(v803 + 8);
                                              LODWORD(v516) = 1;
                                              if ((*(unsigned char *)(*(void *)(v803 + 16) + 10) & 8) != 0) {
                                                goto LABEL_924;
                                              }
                                            }
                                            if ((v514 & 1) == 0) {
                                              goto LABEL_1265;
                                            }
LABEL_965:
                                            unint64_t v528 = v509 & 0xFFFFFFFFFFFFFFF8;
LABEL_966:
                                            unsigned int v541 = *((_DWORD *)v471 + 8);
                                            uint64_t v542 = v471[3];
                                            if (v541)
                                            {
                                              uint64_t v543 = *(void *)(v542 + 24 * v541 - 16);
                                              unsigned int v544 = *(_DWORD *)(v528 + 24) | 2;
                                              unsigned int v545 = (v543 >> 1) & 3 | *(_DWORD *)((v543 & 0xFFFFFFFFFFFFFFF8)
                                                                                               + 24);
                                              v546 = (void *)v471[3];
                                              unint64_t v547 = *((unsigned int *)v471 + 8);
                                              if (v544 < v545)
                                              {
                                                do
                                                {
                                                  unint64_t v548 = v547 >> 1;
                                                  uint64_t v549 = v546[3 * (v547 >> 1) + 1];
                                                  LODWORD(v549) = (v549 >> 1) & 3 | *(_DWORD *)((v549 & 0xFFFFFFFFFFFFFFF8) + 24);
                                                  v547 -= (v547 >> 1) + 1;
                                                  BOOL v550 = v544 >= v549;
                                                  if (v544 >= v549) {
                                                    unint64_t v551 = v548 + 1;
                                                  }
                                                  else {
                                                    unint64_t v551 = 0;
                                                  }
                                                  v546 += 3 * v551;
                                                  if (!v550) {
                                                    unint64_t v547 = v548;
                                                  }
                                                }
                                                while (v547);
                                                goto LABEL_982;
                                              }
                                            }
                                            else
                                            {
                                              unsigned int v541 = 0;
                                            }
                                            v546 = (void *)(v542 + 24 * v541);
LABEL_982:
                                            if (v546 == (void *)(v542 + 24 * v541)
                                              || ((*v546 >> 1) & 3 | *(_DWORD *)((*v546 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 24)) > (*(_DWORD *)(v528 + 24) | 2u))
                                            {
                                              v557 = sub_1CC3B9D7C(v1469, "Instruction stores to dead spill slot", (unint64_t *)v423, v421, 0);
                                              v558 = (llvm::raw_ostream *)llvm::errs(v557);
                                              v559 = v558;
                                              uint64_t v560 = *((void *)v558 + 4);
                                              if ((unint64_t)(*((void *)v558 + 3) - v560) > 0xB)
                                              {
                                                *(_DWORD *)(v560 + 8) = 540699491;
                                                *(void *)uint64_t v560 = *(void *)"Live stack: ";
                                                *((void *)v558 + 4) += 12;
                                              }
                                              else
                                              {
                                                llvm::raw_ostream::write(v558, "Live stack: ", 0xCuLL);
                                              }
                                              llvm::LiveInterval::print(v508, v559);
                                              v561 = (unsigned char *)*((void *)v559 + 4);
                                              if ((unint64_t)v561 >= *((void *)v559 + 3))
                                              {
                                                llvm::raw_ostream::write(v559, 10);
                                              }
                                              else
                                              {
                                                *((void *)v559 + 4) = v561 + 1;
                                                unsigned char *v561 = 10;
                                              }
                                            }
                                            goto LABEL_1265;
                                          }
                                        }
                                        LODWORD(v516) = 1;
                                        if (!v514 || !v516) {
                                          goto LABEL_950;
                                        }
LABEL_924:
                                        v517 = (uint64_t **)(v425 + 48);
                                        unint64_t v518 = *(void *)(v425 + 48);
                                        if (v518 >= 8)
                                        {
                                          if ((v518 & 7) == 0)
                                          {
                                            *(void *)(v425 + 48) = v518 & 0xFFFFFFFFFFFFFFF8;
                                            v522 = (uint64_t **)(v425 + 56);
                                            goto LABEL_933;
                                          }
                                          if ((*(void *)(v425 + 48) & 7) == 3)
                                          {
                                            v519 = (int *)(v518 & 0xFFFFFFFFFFFFFFF8);
                                            if ((v518 & 0xFFFFFFFFFFFFFFF8) != 0)
                                            {
                                              uint64_t v521 = *v519;
                                              v517 = (uint64_t **)(v519 + 2);
                                              uint64_t v520 = v521;
                                              if (v521)
                                              {
                                                v522 = &v517[v520];
LABEL_933:
                                                while (1)
                                                {
                                                  uint64_t v523 = **v517;
                                                  if ((v523 & 4) != 0)
                                                  {
                                                    unint64_t v524 = v523 & 0xFFFFFFFFFFFFFFF8;
                                                    if (v524)
                                                    {
                                                      if (*(_DWORD *)(v524 + 8) == 4 && *(_DWORD *)(v524 + 16) == v468) {
                                                        break;
                                                      }
                                                    }
                                                  }
                                                  if (++v517 == v522) {
                                                    goto LABEL_947;
                                                  }
                                                }
                                                unsigned int v527 = *((unsigned __int16 *)*v517 + 16);
                                                LODWORD(v514) = v514 & (v527 >> 1);
                                                if ((v527 & 2) != 0) {
                                                  LODWORD(v516) = 0;
                                                }
                                              }
                                            }
                                          }
                                        }
LABEL_947:
                                        if (v516 == v514)
                                        {
                                          sub_1CC3B6180(v1469, "Missing fixed stack memoperand.", v425);
                                          if ((v516 & 1) == 0) {
                                            goto LABEL_964;
                                          }
                                        }
                                        else
                                        {
LABEL_950:
                                          if (!v516) {
                                            goto LABEL_964;
                                          }
                                        }
                                        unint64_t v528 = v509 & 0xFFFFFFFFFFFFFFF8;
                                        unsigned int v529 = *((_DWORD *)v471 + 8);
                                        uint64_t v530 = v471[3];
                                        if (v529)
                                        {
                                          uint64_t v531 = *(void *)(v530 + 24 * v529 - 16);
                                          unsigned int v532 = *(_DWORD *)(v528 + 24) | 1;
                                          unsigned int v533 = (v531 >> 1) & 3 | *(_DWORD *)((v531 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24);
                                          v534 = (void *)v471[3];
                                          unint64_t v535 = *((unsigned int *)v471 + 8);
                                          uint64_t v536 = v1469;
                                          if (v532 < v533)
                                          {
                                            do
                                            {
                                              unint64_t v537 = v535 >> 1;
                                              uint64_t v538 = v534[3 * (v535 >> 1) + 1];
                                              LODWORD(v538) = (v538 >> 1) & 3 | *(_DWORD *)((v538 & 0xFFFFFFFFFFFFFFF8) + 24);
                                              v535 -= (v535 >> 1) + 1;
                                              BOOL v539 = v532 >= v538;
                                              if (v532 >= v538) {
                                                unint64_t v540 = v537 + 1;
                                              }
                                              else {
                                                unint64_t v540 = 0;
                                              }
                                              v534 += 3 * v540;
                                              if (!v539) {
                                                unint64_t v535 = v537;
                                              }
                                            }
                                            while (v535);
LABEL_962:
                                            if (v534 == (void *)(v530 + 24 * v529)
                                              || ((*v534 >> 1) & 3 | *(_DWORD *)((*v534 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 24)) > (*(_DWORD *)(v528 + 24) | 1u))
                                            {
                                              v552 = sub_1CC3B9D7C(v536, "Instruction loads from dead spill slot", (unint64_t *)v423, v421, 0);
                                              v553 = (llvm::raw_ostream *)llvm::errs(v552);
                                              v554 = v553;
                                              uint64_t v555 = *((void *)v553 + 4);
                                              if ((unint64_t)(*((void *)v553 + 3) - v555) > 0xB)
                                              {
                                                *(_DWORD *)(v555 + 8) = 540699491;
                                                *(void *)uint64_t v555 = *(void *)"Live stack: ";
                                                *((void *)v553 + 4) += 12;
                                              }
                                              else
                                              {
                                                llvm::raw_ostream::write(v553, "Live stack: ", 0xCuLL);
                                              }
                                              llvm::LiveInterval::print((llvm::LiveInterval *)(v471 + 3), v554);
                                              v556 = (unsigned char *)*((void *)v554 + 4);
                                              if ((unint64_t)v556 >= *((void *)v554 + 3))
                                              {
                                                llvm::raw_ostream::write(v554, 10);
                                                if ((v514 & 1) == 0) {
                                                  goto LABEL_1265;
                                                }
                                              }
                                              else
                                              {
                                                *((void *)v554 + 4) = v556 + 1;
                                                unsigned char *v556 = 10;
                                                if ((v514 & 1) == 0) {
                                                  goto LABEL_1265;
                                                }
                                              }
                                              goto LABEL_966;
                                            }
LABEL_964:
                                            if (!v514) {
                                              goto LABEL_1265;
                                            }
                                            goto LABEL_965;
                                          }
                                        }
                                        else
                                        {
                                          unsigned int v529 = 0;
                                          uint64_t v536 = v1469;
                                        }
                                        v534 = (void *)(v530 + 24 * v529);
                                        goto LABEL_962;
                                      }
                                      uint64_t v429 = v3;
                                      v430 = "Tied def doesn't match MCInstrDesc";
                                    }
                                    else
                                    {
                                      uint64_t v429 = v3;
                                      v430 = "Operand should be tied";
                                    }
LABEL_825:
                                    uint64_t v446 = v422 + 32 * v421;
                                    unsigned int v447 = v421;
                                    goto LABEL_826;
                                  }
                                }
                                int v443 = v441;
                                int v444 = v441 & 0xF00000;
                                if (v443) {
                                  BOOL v445 = 1;
                                }
                                else {
                                  BOOL v445 = v444 == 0;
                                }
                                if (v445) {
                                  goto LABEL_827;
                                }
                                uint64_t v429 = v3;
                                v430 = "Explicit operand should not be tied";
                                goto LABEL_825;
                              }
                              break;
                            }
                            int v442 = *v423;
                            if ((*v423 & 0x20000FF) != 0) {
                              goto LABEL_828;
                            }
                            if ((v426[4] & 2) != 0 || !*(_DWORD *)(v422 + 32 * v421 + 4)) {
                              goto LABEL_827;
                            }
                            uint64_t v429 = v3;
                            v430 = "Extra explicit operand on non-variadic instruction";
                            goto LABEL_825;
                          }
                        }
                      }
                    }
                    unsigned int v416 = llvm::TargetRegisterInfo::getRegSizeInBits(v414, v393, *(void *)(v3 + 48));
                    if (!v413) {
                      goto LABEL_770;
                    }
                    goto LABEL_1394;
                  }
                }
                else
                {
                  uint64_t v1471 = 0;
                }
                if ((v395 & 0xFFFFFFFFFFFFFFF9) == 0) {
                  goto LABEL_770;
                }
                uint64_t v412 = *(void *)(v3 + 40);
                if (v405 - 0x40000000 < 0xC0000001) {
                  goto LABEL_751;
                }
                uint64_t v812 = llvm::TargetRegisterInfo::getMinimalPhysRegClassLLT(v412, v405, v395);
                uint64_t v412 = *(void *)(v3 + 40);
                if (!v812) {
                  goto LABEL_751;
                }
                unsigned int v413 = *(_DWORD *)(*(void *)(v412 + 264)
                                 + 24
                                 * (*(unsigned __int16 *)(*(void *)v812 + 24)
                                  + *(_DWORD *)(v412 + 272)
                                  * ((*(void *)(v412 + 248) - *(void *)(v412 + 240)) >> 3)));
                if (!v413) {
                  goto LABEL_751;
                }
                goto LABEL_752;
              default:
                goto LABEL_770;
            }
            sub_1CC3B6180(v420, v389, v298);
            goto LABEL_770;
          }
        }
        else
        {
          size_t v302 = "BundledPred flag is set, but BundledSucc not set on predecessor";
          if ((v301 & 4) == 0) {
            goto LABEL_537;
          }
        }
        sub_1CC3B6180(v3, v302, v298);
        __int16 v301 = *(_WORD *)(v298 + 44);
        goto LABEL_537;
      }
LABEL_1486:
      v1482 = (uint64_t *)v110;
      v848 = (void **)(sub_1CC3B6B7C(v1448, (uint64_t *)&v1482) + 7);
      unint64_t v5 = (unint64_t)v1431;
      if (v1431 != v848) {
        sub_1CBA85A00((uint64_t)v848, (uint64_t)v1431);
      }
      int v849 = *(_DWORD *)(v3 + 256);
      int v111 = v1418;
      if (v849 || *(_DWORD *)(v3 + 260))
      {
        uint64_t v856 = *(unsigned int *)(v3 + 264);
        if (v856 <= 4 * v849 || v856 < 0x41)
        {
          if (v856) {
            memset(*v1431, 255, 4 * v856);
          }
          *(void *)(v3 + 256) = 0;
        }
        else
        {
          sub_1CBB23624(v1431);
        }
      }
      uint64_t v850 = *(void *)(v3 + 616);
      if (v850)
      {
        unint64_t v851 = *(void *)(*(void *)(v850 + 392) + 16 * *(unsigned int *)(v110 + 24) + 8);
        if (((v851 >> 1) & 3 | *(_DWORD *)((v851 & 0xFFFFFFFFFFFFFFF8) + 24)) <= ((*(void *)(v3 + 560) >> 1) & 3 | *(_DWORD *)((*(void *)(v3 + 560) & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          v869 = sub_1CC3B5D94(v3, "Block ends before last instruction index", v110);
          v870 = (llvm::raw_ostream *)llvm::errs(v869);
          v871 = v870;
          v872 = (void *)*((void *)v870 + 4);
          if (*((void *)v870 + 3) - (void)v872 > 0xDuLL)
          {
            qmemcpy(v872, "Block ends at ", 14);
            *((void *)v870 + 4) += 14;
          }
          else
          {
            llvm::raw_ostream::write(v870, "Block ends at ", 0xEuLL);
          }
          unint64_t v1488 = v851;
          llvm::SlotIndex::print((llvm::SlotIndex *)&v1488, v871);
          v873 = (void *)*((void *)v871 + 4);
          if (*((void *)v871 + 3) - (void)v873 > 0x18uLL)
          {
            qmemcpy(v873, " last instruction was at ", 25);
            *((void *)v871 + 4) += 25;
          }
          else
          {
            llvm::raw_ostream::write(v871, " last instruction was at ", 0x19uLL);
          }
          unint64_t v1488 = *(void *)(v3 + 560);
          llvm::SlotIndex::print((llvm::SlotIndex *)&v1488, v871);
          v874 = (unsigned char *)*((void *)v871 + 4);
          if ((unint64_t)v874 >= *((void *)v871 + 3))
          {
            llvm::raw_ostream::write(v871, 10);
          }
          else
          {
            *((void *)v871 + 4) = v874 + 1;
            unsigned char *v874 = 10;
          }
        }
        *(void *)(v3 + 560) = v851;
      }
      unint64_t v110 = *(void *)(v110 + 8);
    }
    while (v110 != v1419);
  }
  v920 = *v1460;
  if (*((const llvm::MachineFunction **)*v1460 + 40) == (const llvm::MachineFunction *)((char *)*v1460 + 320)) {
    goto LABEL_1693;
  }
  v1482 = 0;
  v1483 = 0;
  uint64_t v1484 = 0;
  sub_1CD5513CC((uint64_t)&v1482, *((void *)v920 + 41));
  v1272 = v1483;
  v1458 = (llvm::raw_ostream *)v1482;
  if (v1483 == v1482) {
    goto LABEL_2346;
  }
  uint64_t v1273 = v3 + 568;
  do
  {
    uint64_t v1274 = *--v1272;
    uint64_t v1471 = v1274;
    unint64_t v1488 = (unint64_t)&v1490;
    uint64_t v1489 = 0x600000000;
    uint64_t v1493 = 0;
    uint64_t v1494 = 0;
    int v1495 = 0;
    v1496 = (int *)v1498;
    uint64_t v1497 = 0;
    int v1492 = 0;
    v1275 = sub_1CC3B6B7C(v1273, &v1471);
    sub_1CC3BB018(&v1488, (uint64_t)(v1275 + 4));
    sub_1CC3BB018(&v1488, (uint64_t)(v1275 + 7));
    v1276 = *(uint64_t **)(v1274 + 64);
    v1277 = *(uint64_t **)(v1274 + 72);
    while (v1276 != v1277)
    {
      uint64_t v1479 = *v1276;
      v1278 = sub_1CC3B6B7C(v1273, &v1479);
      if (*(unsigned char *)v1278)
      {
        v1279 = v1278;
        sub_1CC3BCB14(&v1488, (uint64_t)(v1278 + 7), (uint64_t)&v1496);
        sub_1CC3BCB14(&v1488, (uint64_t)(v1279 + 10), (uint64_t)&v1496);
      }
      ++v1276;
    }
    sub_1CD5514E0((_DWORD *)v1275 + 20, v1497);
    v1280 = v1496;
    if (v1497)
    {
      v1281 = &v1496[v1497];
      while (1)
      {
        int v1282 = *((_DWORD *)v1275 + 24);
        if (!v1282) {
          break;
        }
        uint64_t v1283 = v1275[10];
        int v1284 = v1282 - 1;
        unsigned int v1285 = (37 * *v1280) & v1284;
        v1286 = (char *)(v1283 + 4 * v1285);
        int v1287 = *(_DWORD *)v1286;
        if (*v1280 != *(_DWORD *)v1286)
        {
          v1288 = 0;
          int v1289 = 1;
          while (v1287 != -1)
          {
            if (v1288) {
              BOOL v1290 = 0;
            }
            else {
              BOOL v1290 = v1287 == -2;
            }
            if (v1290) {
              v1288 = v1286;
            }
            unsigned int v1291 = v1285 + v1289++;
            unsigned int v1285 = v1291 & v1284;
            v1286 = (char *)(v1283 + 4 * v1285);
            int v1287 = *(_DWORD *)v1286;
            if (*v1280 == *(_DWORD *)v1286) {
              goto LABEL_2338;
            }
          }
          if (v1288) {
            v1292 = v1288;
          }
          else {
            v1292 = v1286;
          }
          goto LABEL_2337;
        }
LABEL_2338:
        if (++v1280 == v1281)
        {
          v1280 = v1496;
          goto LABEL_2340;
        }
      }
      v1292 = 0;
LABEL_2337:
      *(_DWORD *)sub_1CBA855C4((char **)v1275 + 10, (uint64_t)v1280, v1280, v1292) = *v1280;
      goto LABEL_2338;
    }
LABEL_2340:
    uint64_t v3 = v1469;
    if (v1280 != (int *)v1498) {
      free(v1280);
    }
    MEMORY[0x1D25D9CD0](v1493, 4);
    if ((long long *)v1488 != &v1490) {
      free((void *)v1488);
    }
  }
  while (v1272 != (uint64_t *)v1458);
  v1272 = v1482;
LABEL_2346:
  if (v1272)
  {
    v1483 = v1272;
    operator delete(v1272);
  }
  v920 = *v1460;
LABEL_1693:
  v921 = (uint64_t *)((char *)v920 + 320);
  v922 = (void *)*((void *)v920 + 41);
  if (v922 == (void *)((char *)v920 + 320)) {
    goto LABEL_1839;
  }
  v1454 = (llvm::raw_ostream *)(v3 + 568);
  v1441 = (void *)((char *)v920 + 320);
  v1445 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
  do
  {
    unint64_t v1488 = (unint64_t)v922;
    v1462 = (llvm::SmallPtrSetImplBase *)sub_1CC3B6B7C((uint64_t)v1454, (uint64_t *)&v1488);
    unint64_t v1488 = (unint64_t)v1491;
    uint64_t v1489 = (uint64_t)v1491;
    *(void *)&long long v1490 = 8;
    DWORD2(v1490) = 0;
    v923 = v922 + 6;
    unint64_t v924 = v922[7];
    if ((void *)v924 == v922 + 6) {
      goto LABEL_1837;
    }
    do
    {
      int v925 = **(unsigned __int16 **)(v924 + 16);
      if (v925 != 69 && v925 != 0) {
        break;
      }
      if (v1489 == v1488) {
        goto LABEL_1702;
      }
      if (v1490 < 0x21 || 4 * (DWORD1(v1490) - DWORD2(v1490)) >= v1490)
      {
        memset((void *)v1489, 255, 8 * v1490);
LABEL_1702:
        *(void *)((char *)&v1490 + 4) = 0;
        goto LABEL_1703;
      }
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)&v1488);
LABEL_1703:
      uint64_t v927 = *(void *)(v924 + 32);
      if ((*(_DWORD *)v927 & 0x10000FF) != 0x1000000)
      {
        sub_1CC3B9D7C(v3, "Expected first PHI operand to be a register def", *(unint64_t **)(v924 + 32), 0, 0);
        goto LABEL_1752;
      }
      if ((*(_DWORD *)v927 & 0xE2F00000) != 0) {
        sub_1CC3B9D7C(v3, "Unexpected flag on PHI operand", *(unint64_t **)(v924 + 32), 0, 0);
      }
      if ((*(_DWORD *)(v927 + 4) & 0x80000000) == 0) {
        sub_1CC3B9D7C(v3, "Expected first PHI operand to be a virtual register", (unint64_t *)v927, 0, 0);
      }
      int v928 = *(_DWORD *)(v924 + 40);
      if (v928 != 1)
      {
        unsigned int v947 = 1;
        while (1)
        {
          uint64_t v948 = *(void *)(v924 + 32);
          uint64_t v949 = v947;
          uint64_t v950 = v948 + 32 * v947;
          if (*(_DWORD *)v950)
          {
            uint64_t v951 = v1469;
            v952 = "Expected PHI operand to be a register";
            goto LABEL_1761;
          }
          if ((*(_DWORD *)v950 & 0xE2F00000) != 0) {
            sub_1CC3B9D7C(v1469, "Unexpected flag on PHI operand", (unint64_t *)v950, v947, 0);
          }
          uint64_t v954 = (v949 + 1);
          v953 = (unint64_t *)(*(void *)(v924 + 32) + 32 * v954);
          if (*(unsigned char *)v953 != 4)
          {
            uint64_t v951 = v1469;
            v952 = "Expected PHI operand to be a basic block";
            goto LABEL_1783;
          }
          v955 = (uint64_t *)v953[2];
          v956 = (void *)v955[11];
          v957 = (void *)v955[12];
          if (v956 != v957)
          {
            while ((void *)*v956 != v922)
            {
              if (++v956 == v957)
              {
                v956 = (void *)v955[12];
                break;
              }
            }
          }
          if (v956 == v957)
          {
            uint64_t v951 = v1469;
            v952 = "PHI input is not a predecessor block";
            goto LABEL_1783;
          }
          if (*(unsigned char *)v1462) {
            break;
          }
LABEL_1784:
          unsigned int v947 = v949 + 2;
          if (v949 + 2 == v928) {
            goto LABEL_1709;
          }
        }
        uint64_t v958 = v1489;
        uint64_t v959 = DWORD1(v1490);
        if (v1489 == v1488)
        {
          if (DWORD1(v1490))
          {
            v960 = 0;
            uint64_t v961 = 8 * DWORD1(v1490);
            v962 = (uint64_t **)v1489;
            while (*v962 != v955)
            {
              if (*v962 == (uint64_t *)-2) {
                v960 = v962;
              }
              ++v962;
              v961 -= 8;
              if (!v961)
              {
                if (!v960) {
                  goto LABEL_1779;
                }
                *v960 = v955;
                --DWORD2(v1490);
                break;
              }
            }
LABEL_1808:
            v1482 = v955;
            v973 = sub_1CC3B6B7C((uint64_t)v1454, (uint64_t *)&v1482);
            if ((*(unsigned char *)(v950 + 3) & 0x10) != 0 || !*(unsigned char *)v973) {
              goto LABEL_1784;
            }
            int v974 = *(_DWORD *)(v948 + 32 * v949 + 4);
            int v975 = *((_DWORD *)v973 + 18);
            if (v975)
            {
              uint64_t v976 = v973[7];
              int v977 = v975 - 1;
              unsigned int v978 = v977 & (37 * v974);
              int v979 = *(_DWORD *)(v976 + 4 * v978);
              if (v979 == v974) {
                goto LABEL_1784;
              }
              int v980 = 1;
              while (v979 != -1)
              {
                unsigned int v981 = v978 + v980++;
                unsigned int v978 = v981 & v977;
                int v979 = *(_DWORD *)(v976 + 4 * v978);
                if (v979 == v974) {
                  goto LABEL_1784;
                }
              }
            }
            int v982 = *((_DWORD *)v973 + 24);
            if (v982)
            {
              uint64_t v983 = v973[10];
              int v984 = v982 - 1;
              unsigned int v985 = v984 & (37 * v974);
              int v986 = *(_DWORD *)(v983 + 4 * v985);
              if (v986 == v974) {
                goto LABEL_1784;
              }
              int v987 = 1;
              while (v986 != -1)
              {
                unsigned int v988 = v985 + v987++;
                unsigned int v985 = v988 & v984;
                int v986 = *(_DWORD *)(v983 + 4 * v985);
                if (v986 == v974) {
                  goto LABEL_1784;
                }
              }
            }
            uint64_t v951 = v1469;
            v952 = "PHI operand is not live-out from predecessor";
LABEL_1761:
            v953 = (unint64_t *)v950;
            LODWORD(v954) = v949;
LABEL_1783:
            sub_1CC3B9D7C(v951, v952, v953, v954, 0);
            goto LABEL_1784;
          }
LABEL_1779:
          unsigned int v963 = v1490;
          if (DWORD1(v1490) < v1490)
          {
            ++DWORD1(v1490);
            *(void *)(v1489 + 8 * v959) = v955;
            goto LABEL_1808;
          }
        }
        else
        {
          unsigned int v963 = v1490;
        }
        if (3 * v963 <= 4 * (DWORD1(v1490) - DWORD2(v1490)))
        {
          if (v963 >= 0x40) {
            v963 *= 2;
          }
          else {
            unsigned int v963 = 128;
          }
        }
        else if (v963 - DWORD1(v1490) >= v963 >> 3)
        {
          goto LABEL_1789;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1488, v963);
        unsigned int v963 = v1490;
        uint64_t v958 = v1489;
LABEL_1789:
        unsigned int v964 = v963 - 1;
        unsigned int v965 = (v963 - 1) & ((v955 >> 4) ^ (v955 >> 9));
        v966 = (uint64_t **)(v958 + 8 * v965);
        v967 = *v966;
        if (*v966 == (uint64_t *)-1)
        {
          v968 = 0;
LABEL_1801:
          if (v968) {
            v972 = v968;
          }
          else {
            v972 = v966;
          }
          if (*v972 != v955)
          {
            if (*v972 == (uint64_t *)-2) {
              --DWORD2(v1490);
            }
            else {
              ++DWORD1(v1490);
            }
            *v972 = v955;
          }
        }
        else
        {
          v968 = 0;
          int v969 = 1;
          while (v967 != v955)
          {
            if (v968) {
              BOOL v970 = 0;
            }
            else {
              BOOL v970 = v967 == (uint64_t *)-2;
            }
            if (v970) {
              v968 = v966;
            }
            unsigned int v971 = v965 + v969++;
            unsigned int v965 = v971 & v964;
            v966 = (uint64_t **)(v958 + 8 * (v971 & v964));
            v967 = *v966;
            if (*v966 == (uint64_t *)-1) {
              goto LABEL_1801;
            }
          }
        }
        goto LABEL_1808;
      }
LABEL_1709:
      if (*(unsigned char *)v1462)
      {
        v929 = (void **)v922[8];
        v930 = (void **)v922[9];
        while (v929 != v930)
        {
          v931 = (char *)*v929;
          v932 = (void *)v1488;
          if (v1489 == v1488)
          {
            unsigned int v933 = DWORD1(v1490);
            v934 = (char *)(v1489 + 8 * DWORD1(v1490));
            if (DWORD1(v1490))
            {
              uint64_t v935 = 0;
              while (*(char **)(v1489 + v935) != v931)
              {
                v935 += 8;
                if (8 * DWORD1(v1490) == v935) {
                  goto LABEL_1731;
                }
              }
              v934 = (char *)(v1489 + v935);
            }
LABEL_1731:
            v932 = (void *)v1489;
          }
          else
          {
            int v936 = v1490 - 1;
            unsigned int v937 = (v1490 - 1) & ((v931 >> 4) ^ (v931 >> 9));
            v934 = (char *)(v1489 + 8 * v937);
            v938 = *(char **)v934;
            if (*(void *)v934 == -1)
            {
              v939 = 0;
LABEL_1744:
              if (v939) {
                v934 = v939;
              }
              unsigned int v933 = DWORD1(v1490);
              if (*(char **)v934 != v931) {
                v934 = (char *)(v1489 + 8 * v1490);
              }
            }
            else
            {
              v939 = 0;
              int v940 = 1;
              while (v938 != v931)
              {
                if (v939) {
                  BOOL v941 = 0;
                }
                else {
                  BOOL v941 = v938 == (char *)-2;
                }
                if (v941) {
                  v939 = v934;
                }
                unsigned int v942 = v937 + v940++;
                unsigned int v937 = v942 & v936;
                v934 = (char *)(v1489 + 8 * (v942 & v936));
                v938 = *(char **)v934;
                if (*(void *)v934 == -1) {
                  goto LABEL_1744;
                }
              }
              unsigned int v933 = DWORD1(v1490);
            }
          }
          if ((void *)v1489 == v932) {
            unsigned int v943 = v933;
          }
          else {
            unsigned int v943 = v1490;
          }
          if (v934 == (char *)(v1489 + 8 * v943))
          {
            sub_1CC3B6180(v1469, "Missing PHI operand", v924);
            v945 = (llvm::raw_ostream *)llvm::errs(v944);
            v1485 = (void **)&v1482;
            v1482 = (uint64_t *)&unk_1F260D508;
            v1483 = (uint64_t *)v931;
            v1445((uint64_t)&v1482, v945);
            v946 = (void *)*((void *)v945 + 4);
            if (*((void *)v945 + 3) - (void)v946 > 0x27uLL)
            {
              qmemcpy(v946, " is a predecessor according to the CFG.\n", 40);
              *((void *)v945 + 4) += 40;
            }
            else
            {
              llvm::raw_ostream::write(v945, " is a predecessor according to the CFG.\n", 0x28uLL);
            }
            if (v1485 == (void **)&v1482)
            {
              ((void (*)(uint64_t **))v1482[4])(&v1482);
            }
            else if (v1485)
            {
              (*((void (**)(void))*v1485 + 5))();
            }
          }
          ++v929;
        }
      }
      uint64_t v3 = v1469;
      v923 = v922 + 6;
      if (!v924)
      {
LABEL_1755:
        while ((*(_WORD *)(v924 + 44) & 8) != 0)
          unint64_t v924 = *(void *)(v924 + 8);
        goto LABEL_1756;
      }
LABEL_1752:
      if ((*(unsigned char *)v924 & 4) == 0) {
        goto LABEL_1755;
      }
LABEL_1756:
      unint64_t v924 = *(void *)(v924 + 8);
    }
    while ((void *)v924 != v923);
    if (v1489 != v1488) {
      free((void *)v1489);
    }
LABEL_1837:
    v922 = (void *)v922[1];
  }
  while (v922 != v1441);
  v920 = *v1460;
  v921 = (uint64_t *)*((void *)*v1460 + 41);
LABEL_1839:
  unint64_t v1488 = (unint64_t)v1491;
  uint64_t v1489 = (uint64_t)v1491;
  *(void *)&long long v1490 = 8;
  DWORD2(v1490) = 0;
  v1449 = (uint64_t *)((char *)v920 + 320);
  if (v921 == (uint64_t *)((char *)v920 + 320)) {
    goto LABEL_1963;
  }
  v1463 = (llvm::SmallPtrSetImplBase *)(v3 + 568);
  do
  {
    v1482 = v921;
    v990 = sub_1CC3B6B7C((uint64_t)v1463, (uint64_t *)&v1482);
    v991 = (uint64_t **)v921[8];
    v1442 = v921;
    v1455 = (llvm::raw_ostream *)v921[9];
    if (v991 != (uint64_t **)v1455)
    {
      v992 = v990;
      while (1)
      {
        v993 = *v991;
        v1482 = *v991;
        v994 = sub_1CC3B6B7C((uint64_t)v1463, (uint64_t *)&v1482);
        uint64_t v995 = v992[1];
        uint64_t v996 = *((unsigned int *)v992 + 6);
        v997 = (int *)(v995 + 16 * v996);
        if (*((_DWORD *)v992 + 4))
        {
          if (*((_DWORD *)v992 + 6))
          {
            uint64_t v998 = 16 * v996;
            v999 = (int *)v992[1];
            while (*v999 >= 0xFFFFFFFE)
            {
              v999 += 4;
              v998 -= 16;
              if (!v998) {
                goto LABEL_1848;
              }
            }
          }
          else
          {
            v999 = (int *)v992[1];
          }
        }
        else
        {
LABEL_1848:
          v999 = (int *)(v995 + 16 * v996);
        }
        v1000 = (int *)(v995 + 16 * v996);
        if (v999 == v1000) {
          goto LABEL_1891;
        }
        int v1001 = 0;
        do
        {
          int v1003 = *v999;
          v1002 = (unsigned int *)(v999 + 4);
          v1001 |= sub_1CC3BCE94((uint64_t)v994, v1003);
          while (v1002 != (unsigned int *)v997)
          {
            unsigned int v1004 = *v1002;
            v1002 += 4;
            if (v1004 <= 0xFFFFFFFD)
            {
              v999 = (int *)(v1002 - 4);
              goto LABEL_1857;
            }
          }
          v999 = v997;
LABEL_1857:
          ;
        }
        while (v999 != v1000);
        if ((v1001 & 1) == 0) {
          goto LABEL_1891;
        }
        uint64_t v1005 = v1489;
        uint64_t v1006 = DWORD1(v1490);
        if (v1489 != v1488) {
          break;
        }
        if (DWORD1(v1490))
        {
          v1007 = 0;
          uint64_t v1008 = 8 * DWORD1(v1490);
          v1009 = (uint64_t **)v1489;
          while (*v1009 != v993)
          {
            if (*v1009 == (uint64_t *)-2) {
              v1007 = v1009;
            }
            ++v1009;
            v1008 -= 8;
            if (!v1008)
            {
              if (!v1007) {
                goto LABEL_1867;
              }
              *v1007 = v993;
              --DWORD2(v1490);
              goto LABEL_1891;
            }
          }
          goto LABEL_1891;
        }
LABEL_1867:
        unsigned int v1010 = v1490;
        if (DWORD1(v1490) >= v1490) {
          goto LABEL_1870;
        }
        ++DWORD1(v1490);
        *(void *)(v1489 + 8 * v1006) = v993;
LABEL_1891:
        if (++v991 == (uint64_t **)v1455) {
          goto LABEL_1900;
        }
      }
      unsigned int v1010 = v1490;
LABEL_1870:
      if (3 * v1010 <= 4 * (DWORD1(v1490) - DWORD2(v1490)))
      {
        if (v1010 >= 0x40) {
          v1010 *= 2;
        }
        else {
          unsigned int v1010 = 128;
        }
      }
      else if (v1010 - DWORD1(v1490) >= v1010 >> 3)
      {
        goto LABEL_1872;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1488, v1010);
      unsigned int v1010 = v1490;
      uint64_t v1005 = v1489;
LABEL_1872:
      unsigned int v1011 = v1010 - 1;
      unsigned int v1012 = (v1010 - 1) & ((v993 >> 4) ^ (v993 >> 9));
      v1013 = (void **)(v1005 + 8 * v1012);
      v1014 = (uint64_t *)*v1013;
      if (*v1013 == (void *)-1)
      {
        v1015 = 0;
LABEL_1884:
        if (v1015) {
          v1019 = v1015;
        }
        else {
          v1019 = v1013;
        }
        if (*v1019 != v993)
        {
          if (*v1019 == (void *)-2) {
            --DWORD2(v1490);
          }
          else {
            ++DWORD1(v1490);
          }
          *v1019 = v993;
        }
      }
      else
      {
        v1015 = 0;
        int v1016 = 1;
        while (v1014 != v993)
        {
          if (v1015) {
            BOOL v1017 = 0;
          }
          else {
            BOOL v1017 = v1014 == (uint64_t *)-2;
          }
          if (v1017) {
            v1015 = v1013;
          }
          unsigned int v1018 = v1012 + v1016++;
          unsigned int v1012 = v1018 & v1011;
          v1013 = (void **)(v1005 + 8 * (v1018 & v1011));
          v1014 = (uint64_t *)*v1013;
          if (*v1013 == (void *)-1) {
            goto LABEL_1884;
          }
        }
      }
      goto LABEL_1891;
    }
LABEL_1900:
    uint64_t v1020 = v1442[7];
    uint64_t v3 = v1469;
    if ((uint64_t *)v1020 != v1442 + 6)
    {
      v1021 = (uint64_t *)v1442[7];
      while (!*(_WORD *)v1021[2] || *(_WORD *)v1021[2] == 69)
      {
        v1021 = (uint64_t *)v1021[1];
        if (v1021 == v1442 + 6)
        {
          v1021 = v1442 + 6;
          break;
        }
      }
LABEL_1960:
      if ((uint64_t *)v1020 != v1021)
      {
        int v1022 = *(_DWORD *)(v1020 + 40);
        if (v1022 == 1) {
          goto LABEL_1955;
        }
        unsigned int v1023 = 1;
        while (1)
        {
          uint64_t v1024 = *(void *)(v1020 + 32);
          uint64_t v1025 = v1023;
          int v1026 = *(_DWORD *)(v1024 + 32 * v1023);
          int v1027 = v1026 & 0x300000FF;
          int v1028 = v1026 & 0x10FFF00;
          if (v1027) {
            BOOL v1029 = 1;
          }
          else {
            BOOL v1029 = v1028 == 0x1000000;
          }
          if (!v1029)
          {
            int v1030 = *(_DWORD *)(v1024 + 32 * v1025 + 4);
            v1031 = *(uint64_t **)(v1024 + 32 * (v1025 + 1) + 16);
            v1482 = v1031;
            v1032 = sub_1CC3B6B7C((uint64_t)v1463, (uint64_t *)&v1482);
            if (sub_1CC3BCE94((uint64_t)v1032, v1030))
            {
              uint64_t v1033 = v1489;
              uint64_t v1034 = DWORD1(v1490);
              if (v1489 != v1488)
              {
                unsigned int v1038 = v1490;
LABEL_1925:
                if (3 * v1038 <= 4 * (DWORD1(v1490) - DWORD2(v1490)))
                {
                  if (v1038 >= 0x40) {
                    v1038 *= 2;
                  }
                  else {
                    unsigned int v1038 = 128;
                  }
                }
                else if (v1038 - DWORD1(v1490) >= v1038 >> 3)
                {
                  goto LABEL_1927;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1488, v1038);
                unsigned int v1038 = v1490;
                uint64_t v1033 = v1489;
LABEL_1927:
                unsigned int v1039 = v1038 - 1;
                unsigned int v1040 = (v1038 - 1) & ((v1031 >> 4) ^ (v1031 >> 9));
                v1041 = (void **)(v1033 + 8 * v1040);
                v1042 = (uint64_t *)*v1041;
                if (*v1041 == (void *)-1)
                {
                  v1043 = 0;
LABEL_1939:
                  if (v1043) {
                    v1047 = v1043;
                  }
                  else {
                    v1047 = v1041;
                  }
                  if (*v1047 != v1031)
                  {
                    if (*v1047 == (void *)-2) {
                      --DWORD2(v1490);
                    }
                    else {
                      ++DWORD1(v1490);
                    }
                    *v1047 = v1031;
                  }
                }
                else
                {
                  v1043 = 0;
                  int v1044 = 1;
                  while (v1042 != v1031)
                  {
                    if (v1043) {
                      BOOL v1045 = 0;
                    }
                    else {
                      BOOL v1045 = v1042 == (uint64_t *)-2;
                    }
                    if (v1045) {
                      v1043 = v1041;
                    }
                    unsigned int v1046 = v1040 + v1044++;
                    unsigned int v1040 = v1046 & v1039;
                    v1041 = (void **)(v1033 + 8 * (v1046 & v1039));
                    v1042 = (uint64_t *)*v1041;
                    if (*v1041 == (void *)-1) {
                      goto LABEL_1939;
                    }
                  }
                }
                goto LABEL_1946;
              }
              if (DWORD1(v1490))
              {
                v1035 = 0;
                uint64_t v1036 = 8 * DWORD1(v1490);
                v1037 = (uint64_t **)v1489;
                while (*v1037 != v1031)
                {
                  if (*v1037 == (uint64_t *)-2) {
                    v1035 = v1037;
                  }
                  ++v1037;
                  v1036 -= 8;
                  if (!v1036)
                  {
                    if (!v1035) {
                      goto LABEL_1922;
                    }
                    *v1035 = v1031;
                    --DWORD2(v1490);
                    goto LABEL_1946;
                  }
                }
                goto LABEL_1946;
              }
LABEL_1922:
              unsigned int v1038 = v1490;
              if (DWORD1(v1490) >= v1490) {
                goto LABEL_1925;
              }
              ++DWORD1(v1490);
              *(void *)(v1489 + 8 * v1034) = v1031;
            }
          }
LABEL_1946:
          unsigned int v1023 = v1025 + 2;
          if (v1025 + 2 == v1022)
          {
            if (v1020)
            {
LABEL_1955:
              if ((*(unsigned char *)v1020 & 4) != 0) {
                goto LABEL_1959;
              }
            }
            while ((*(_WORD *)(v1020 + 44) & 8) != 0)
              uint64_t v1020 = *(void *)(v1020 + 8);
LABEL_1959:
            uint64_t v1020 = *(void *)(v1020 + 8);
            goto LABEL_1960;
          }
        }
      }
    }
    v921 = (uint64_t *)v1442[1];
  }
  while (v921 != v1449);
  unsigned int v1049 = DWORD1(v1490);
  int v1048 = DWORD2(v1490);
  if (DWORD1(v1490) != DWORD2(v1490))
  {
    while (1)
    {
      v1482 = 0;
      v1077 = (void *)v1488;
      if (v1489 == v1488) {
        uint64_t v1078 = v1049;
      }
      else {
        uint64_t v1078 = v1490;
      }
      v1079 = (uint64_t **)v1489;
      if (v1078)
      {
        uint64_t v1080 = 8 * v1078;
        v1079 = (uint64_t **)v1489;
        v1081 = (uint64_t **)(v1489 + 8 * v1078);
        while ((unint64_t)*v1079 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v1079;
          v1080 -= 8;
          if (!v1080)
          {
            v1079 = v1081;
            break;
          }
        }
      }
      v1082 = *v1079;
      v1482 = *v1079;
      if (v1489 == v1488)
      {
        v1083 = (char *)(v1489 + 8 * v1049);
        if (v1049)
        {
          uint64_t v1084 = 0;
          while (*(uint64_t **)(v1489 + v1084) != v1082)
          {
            v1084 += 8;
            if (8 * v1049 == v1084) {
              goto LABEL_2025;
            }
          }
          v1083 = (char *)(v1489 + v1084);
        }
LABEL_2025:
        v1077 = (void *)v1489;
      }
      else
      {
        int v1085 = v1490 - 1;
        unsigned int v1086 = ((v1082 >> 4) ^ (v1082 >> 9)) & (v1490 - 1);
        v1083 = (char *)(v1489 + 8 * v1086);
        v1087 = *(uint64_t **)v1083;
        if (*(void *)v1083 == -1)
        {
          v1088 = 0;
LABEL_2093:
          if (v1088) {
            v1083 = v1088;
          }
          if (*(uint64_t **)v1083 != v1082) {
            v1083 = (char *)(v1489 + 8 * v1490);
          }
        }
        else
        {
          v1088 = 0;
          int v1089 = 1;
          while (v1087 != v1082)
          {
            if (v1088) {
              BOOL v1090 = 0;
            }
            else {
              BOOL v1090 = v1087 == (uint64_t *)-2;
            }
            if (v1090) {
              v1088 = v1083;
            }
            unsigned int v1091 = v1086 + v1089++;
            unsigned int v1086 = v1091 & v1085;
            v1083 = (char *)(v1489 + 8 * (v1091 & v1085));
            v1087 = *(uint64_t **)v1083;
            if (*(void *)v1083 == -1) {
              goto LABEL_2093;
            }
          }
        }
      }
      if ((void *)v1489 != v1077) {
        unsigned int v1049 = v1490;
      }
      if (v1083 != (char *)(v1489 + 8 * v1049))
      {
        *(void *)v1083 = -2;
        DWORD2(v1490) = v1048 + 1;
        v1082 = v1482;
      }
      v1092 = sub_1CC3B6B7C((uint64_t)v1463, (uint64_t *)&v1482);
      v1093 = (uint64_t *)v1082[8];
      v1094 = (uint64_t *)v1082[9];
      if (v1093 != v1094) {
        break;
      }
LABEL_2090:
      unsigned int v1049 = DWORD1(v1490);
      int v1048 = DWORD2(v1490);
      uint64_t v3 = v1469;
      if (DWORD1(v1490) == DWORD2(v1490)) {
        goto LABEL_1963;
      }
    }
    v1095 = v1092;
    while (1)
    {
      uint64_t v1096 = *v1093;
      uint64_t v1471 = v1096;
      if ((uint64_t *)v1096 == v1082) {
        goto LABEL_2081;
      }
      v1097 = sub_1CC3B6B7C((uint64_t)v1463, &v1471);
      uint64_t v1098 = v1095[13];
      uint64_t v1099 = *((unsigned int *)v1095 + 30);
      v1100 = (int *)(v1098 + 4 * v1099);
      if (*((_DWORD *)v1095 + 28))
      {
        if (*((_DWORD *)v1095 + 30))
        {
          uint64_t v1101 = 4 * v1099;
          v1102 = (int *)v1095[13];
          while (*v1102 >= 0xFFFFFFFE)
          {
            ++v1102;
            v1101 -= 4;
            if (!v1101) {
              goto LABEL_2038;
            }
          }
        }
        else
        {
          v1102 = (int *)v1095[13];
        }
      }
      else
      {
LABEL_2038:
        v1102 = (int *)(v1098 + 4 * v1099);
      }
      v1103 = (int *)(v1098 + 4 * v1099);
      if (v1102 == v1103) {
        goto LABEL_2081;
      }
      int v1104 = 0;
      do
      {
        int v1106 = *v1102;
        v1105 = (unsigned int *)(v1102 + 1);
        v1104 |= sub_1CC3BCE94((uint64_t)v1097, v1106);
        while (v1105 != (unsigned int *)v1100)
        {
          unsigned int v1107 = *v1105++;
          if (v1107 <= 0xFFFFFFFD)
          {
            v1102 = (int *)(v1105 - 1);
            goto LABEL_2047;
          }
        }
        v1102 = v1100;
LABEL_2047:
        ;
      }
      while (v1102 != v1103);
      if ((v1104 & 1) == 0) {
        goto LABEL_2081;
      }
      uint64_t v1108 = v1489;
      uint64_t v1109 = DWORD1(v1490);
      if (v1489 != v1488) {
        break;
      }
      if (DWORD1(v1490))
      {
        v1110 = 0;
        uint64_t v1111 = 8 * DWORD1(v1490);
        v1112 = (uint64_t *)v1489;
        while (*v1112 != v1096)
        {
          if (*v1112 == -2) {
            v1110 = v1112;
          }
          ++v1112;
          v1111 -= 8;
          if (!v1111)
          {
            if (!v1110) {
              goto LABEL_2057;
            }
            uint64_t *v1110 = v1096;
            --DWORD2(v1490);
            goto LABEL_2081;
          }
        }
        goto LABEL_2081;
      }
LABEL_2057:
      unsigned int v1113 = v1490;
      if (DWORD1(v1490) >= v1490) {
        goto LABEL_2060;
      }
      ++DWORD1(v1490);
      *(void *)(v1489 + 8 * v1109) = v1096;
LABEL_2081:
      if (++v1093 == v1094) {
        goto LABEL_2090;
      }
    }
    unsigned int v1113 = v1490;
LABEL_2060:
    if (3 * v1113 <= 4 * (DWORD1(v1490) - DWORD2(v1490)))
    {
      if (v1113 >= 0x40) {
        v1113 *= 2;
      }
      else {
        unsigned int v1113 = 128;
      }
    }
    else if (v1113 - DWORD1(v1490) >= v1113 >> 3)
    {
      goto LABEL_2062;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v1488, v1113);
    unsigned int v1113 = v1490;
    uint64_t v1108 = v1489;
LABEL_2062:
    unsigned int v1114 = v1113 - 1;
    unsigned int v1115 = (v1113 - 1) & ((v1096 >> 4) ^ (v1096 >> 9));
    v1116 = (uint64_t *)(v1108 + 8 * v1115);
    uint64_t v1117 = *v1116;
    if (*v1116 == -1)
    {
      v1118 = 0;
LABEL_2074:
      if (v1118) {
        v1122 = v1118;
      }
      else {
        v1122 = v1116;
      }
      if (*v1122 != v1096)
      {
        if (*v1122 == -2) {
          --DWORD2(v1490);
        }
        else {
          ++DWORD1(v1490);
        }
        uint64_t *v1122 = v1096;
      }
    }
    else
    {
      v1118 = 0;
      int v1119 = 1;
      while (v1117 != v1096)
      {
        if (v1118) {
          BOOL v1120 = 0;
        }
        else {
          BOOL v1120 = v1117 == -2;
        }
        if (v1120) {
          v1118 = v1116;
        }
        unsigned int v1121 = v1115 + v1119++;
        unsigned int v1115 = v1121 & v1114;
        v1116 = (uint64_t *)(v1108 + 8 * (v1121 & v1114));
        uint64_t v1117 = *v1116;
        if (*v1116 == -1) {
          goto LABEL_2074;
        }
      }
    }
    goto LABEL_2081;
  }
LABEL_1963:
  if (v1489 != v1488) {
    free((void *)v1489);
  }
  v1050 = *v1460;
  v1051 = (llvm::SmallPtrSetImplBase *)*((void *)*v1460 + 41);
  v1464 = (const llvm::MachineFunction *)((char *)*v1460 + 320);
  if (v1051 != v1464)
  {
    v1456 = (llvm::raw_ostream *)(v3 + 568);
    v1052 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
    do
    {
      unint64_t v1488 = (unint64_t)v1051;
      v1053 = sub_1CC3B6B7C((uint64_t)v1456, (uint64_t *)&v1488);
      v1054 = v1053;
      uint64_t v1055 = v1053[13];
      uint64_t v1056 = *((unsigned int *)v1053 + 30);
      v1057 = (unsigned int *)(v1055 + 4 * v1056);
      if (*((_DWORD *)v1053 + 28))
      {
        if (*((_DWORD *)v1053 + 30))
        {
          uint64_t v1058 = 4 * v1056;
          v1059 = (unsigned int *)v1053[13];
          while (*v1059 >= 0xFFFFFFFE)
          {
            ++v1059;
            v1058 -= 4;
            if (!v1058) {
              goto LABEL_1972;
            }
          }
        }
        else
        {
          v1059 = (unsigned int *)v1053[13];
        }
      }
      else
      {
LABEL_1972:
        v1059 = (unsigned int *)(v1055 + 4 * v1056);
      }
      v1060 = (unsigned int *)(v1055 + 4 * v1056);
LABEL_1975:
      while (v1059 != v1060)
      {
        int v1061 = *((_DWORD *)v1054 + 12);
        if (v1061)
        {
          unsigned int v1062 = *v1059;
          uint64_t v1063 = v1054[4];
          int v1064 = v1061 - 1;
          unsigned int v1065 = v1064 & (37 * *v1059);
          int v1066 = *(_DWORD *)(v1063 + 4 * v1065);
          if (*v1059 == v1066)
          {
LABEL_1978:
            v1067 = sub_1CC3B5D94(v1469, "Virtual register killed in block, but needed live out.", (unint64_t)v1051);
            v1068 = (llvm::raw_ostream *)llvm::errs(v1067);
            v1069 = v1068;
            uint64_t v1070 = *((void *)v1068 + 4);
            if ((unint64_t)(*((void *)v1068 + 3) - v1070) > 0x10)
            {
              *(unsigned char *)(v1070 + 16) = 32;
              *(_OWORD *)uint64_t v1070 = *(_OWORD *)"Virtual register ";
              *((void *)v1068 + 4) += 17;
            }
            else
            {
              llvm::raw_ostream::write(v1068, "Virtual register ", 0x11uLL);
            }
            v1071 = operator new(0x28uLL);
            *(void *)v1071 = &unk_1F26154E0;
            v1071[2] = v1062;
            *((void *)v1071 + 2) = 0;
            v1071[6] = 0;
            *((void *)v1071 + 4) = 0;
            *((void *)&v1490 + 1) = v1071;
            v1052((llvm::raw_ostream *)v1071, v1069);
            v1072 = (void *)*((void *)v1069 + 4);
            if (*((void *)v1069 + 3) - (void)v1072 > 0x19uLL)
            {
              qmemcpy(v1072, " is used after the block.\n", 26);
              *((void *)v1069 + 4) += 26;
            }
            else
            {
              llvm::raw_ostream::write(v1069, " is used after the block.\n", 0x1AuLL);
            }
            if (*((unint64_t **)&v1490 + 1) == &v1488)
            {
              (*(void (**)(unint64_t *))(v1488 + 32))(&v1488);
            }
            else if (*((void *)&v1490 + 1))
            {
              (*(void (**)(void))(**((void **)&v1490 + 1) + 40))();
            }
          }
          else
          {
            int v1075 = 1;
            while (v1066 != -1)
            {
              unsigned int v1076 = v1065 + v1075++;
              unsigned int v1065 = v1076 & v1064;
              int v1066 = *(_DWORD *)(v1063 + 4 * v1065);
              if (v1062 == v1066) {
                goto LABEL_1978;
              }
            }
          }
        }
        v1073 = v1059 + 1;
        while (v1073 != v1057)
        {
          unsigned int v1074 = *v1073++;
          if (v1074 <= 0xFFFFFFFD)
          {
            v1059 = v1073 - 1;
            goto LABEL_1975;
          }
        }
        v1059 = v1057;
      }
      v1051 = (llvm::SmallPtrSetImplBase *)*((void *)v1051 + 1);
    }
    while (v1051 != v1464);
    v1050 = *v1460;
    uint64_t v3 = v1469;
  }
  if (*((const llvm::MachineFunction **)v1050 + 40) != (const llvm::MachineFunction *)((char *)v1050 + 320))
  {
    unint64_t v1488 = *((void *)v1050 + 41);
    v1123 = sub_1CC3B6B7C(v3 + 568, (uint64_t *)&v1488);
    uint64_t v1124 = v1123[13];
    uint64_t v1125 = *((unsigned int *)v1123 + 30);
    v1126 = (int *)(v1124 + 4 * v1125);
    if (*((_DWORD *)v1123 + 28))
    {
      if (v1125)
      {
        uint64_t v1127 = 4 * v1125;
        v1128 = (int *)v1123[13];
        while (*v1128 >= 0xFFFFFFFE)
        {
          ++v1128;
          v1127 -= 4;
          if (!v1127) {
            goto LABEL_2103;
          }
        }
      }
      else
      {
        v1128 = (int *)v1123[13];
      }
    }
    else
    {
LABEL_2103:
      v1128 = (int *)(v1124 + 4 * v1125);
    }
    v1129 = (int *)(v1124 + 4 * v1125);
    while (v1128 != v1129)
    {
      int v1131 = *v1128;
      v1130 = (unsigned int *)(v1128 + 1);
      sub_1CC3B670C(v3, "Virtual register defs don't dominate all uses.", *(llvm::Value ***)(v3 + 16));
      sub_1CC3BACDC((llvm *)v3, v1131);
      while (v1130 != (unsigned int *)v1126)
      {
        unsigned int v1132 = *v1130++;
        if (v1132 <= 0xFFFFFFFD)
        {
          v1128 = (int *)(v1130 - 1);
          goto LABEL_2111;
        }
      }
      v1128 = v1126;
LABEL_2111:
      ;
    }
  }
  if (*(void *)v1423)
  {
    int v1133 = *(_DWORD *)(*(void *)(v1469 + 48) + 32);
    if (v1133)
    {
      int v1134 = 0;
      v1465 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
      while (1)
      {
        v1135 = (void *)(*(void *)v1423 + 248);
        uint64_t v1136 = v1134 & 0x7FFFFFFF;
        if (v1136 >= *(_DWORD *)(*(void *)v1423 + 256)) {
          sub_1CD520A8C((uint64_t *)(*(void *)v1423 + 248), v1136 + 1, *(void *)v1423 + 264);
        }
        uint64_t v1137 = (uint64_t)*v1460 + 320;
        unint64_t v1138 = *((void *)*v1460 + 41);
        if (v1138 != v1137) {
          break;
        }
LABEL_2147:
        if (++v1134 == v1133) {
          goto LABEL_2148;
        }
      }
      unsigned int v1139 = v1134 | 0x80000000;
      v1140 = (uint64_t *)(*v1135 + 56 * v1136);
      unsigned int v1141 = 37 * (v1134 | 0x80000000);
      while (2)
      {
        unint64_t v1488 = v1138;
        v1142 = sub_1CC3B6B7C(v1469 + 568, (uint64_t *)&v1488);
        int v1143 = *((_DWORD *)v1142 + 30);
        if (v1143)
        {
          uint64_t v1153 = v1142[13];
          int v1154 = v1143 - 1;
          unsigned int v1155 = v1154 & v1141;
          int v1156 = *(_DWORD *)(v1153 + 4 * (v1154 & v1141));
          if (v1139 != v1156)
          {
            int v1163 = 1;
            while (v1156 != -1)
            {
              unsigned int v1164 = v1155 + v1163++;
              unsigned int v1155 = v1164 & v1154;
              int v1156 = *(_DWORD *)(v1153 + 4 * v1155);
              if (v1139 == v1156) {
                goto LABEL_2126;
              }
            }
            goto LABEL_2120;
          }
LABEL_2126:
          if ((sub_1CD460634(v1140, *(_DWORD *)(v1138 + 24)) & 1) == 0)
          {
            v1157 = sub_1CC3B5D94(v1469, "LiveVariables: Block missing from AliveBlocks", v1138);
            v1158 = (llvm::raw_ostream *)llvm::errs(v1157);
            v1146 = v1158;
            uint64_t v1159 = *((void *)v1158 + 4);
            if ((unint64_t)(*((void *)v1158 + 3) - v1159) > 0x10)
            {
              *(unsigned char *)(v1159 + 16) = 32;
              *(_OWORD *)uint64_t v1159 = *(_OWORD *)"Virtual register ";
              *((void *)v1158 + 4) += 17;
            }
            else
            {
              llvm::raw_ostream::write(v1158, "Virtual register ", 0x11uLL);
            }
            v1160 = operator new(0x28uLL);
            *(void *)v1160 = &unk_1F26154E0;
            v1160[2] = v1139;
            *((void *)v1160 + 2) = 0;
            v1160[6] = 0;
            *((void *)v1160 + 4) = 0;
            *((void *)&v1490 + 1) = v1160;
            v1465((llvm::raw_ostream *)v1160, v1146);
            v1161 = (void *)*((void *)v1146 + 4);
            if (*((void *)v1146 + 3) - (void)v1161 > 0x20uLL)
            {
              qmemcpy(v1161, " must be live through the block.\n", 33);
              uint64_t v1162 = *((void *)v1146 + 4) + 33;
              goto LABEL_2142;
            }
            v1150 = v1146;
            v1151 = " must be live through the block.\n";
            size_t v1152 = 33;
LABEL_2131:
            llvm::raw_ostream::write(v1150, v1151, v1152);
LABEL_2132:
            if (*((unint64_t **)&v1490 + 1) == &v1488)
            {
              (*(void (**)(unint64_t *))(v1488 + 32))(&v1488);
            }
            else if (*((void *)&v1490 + 1))
            {
              (*(void (**)(void))(**((void **)&v1490 + 1) + 40))();
            }
          }
        }
        else
        {
LABEL_2120:
          if (sub_1CD460634(v1140, *(_DWORD *)(v1138 + 24)))
          {
            v1144 = sub_1CC3B5D94(v1469, "LiveVariables: Block should not be in AliveBlocks", v1138);
            v1145 = (llvm::raw_ostream *)llvm::errs(v1144);
            v1146 = v1145;
            uint64_t v1147 = *((void *)v1145 + 4);
            if ((unint64_t)(*((void *)v1145 + 3) - v1147) > 0x10)
            {
              *(unsigned char *)(v1147 + 16) = 32;
              *(_OWORD *)uint64_t v1147 = *(_OWORD *)"Virtual register ";
              *((void *)v1145 + 4) += 17;
            }
            else
            {
              llvm::raw_ostream::write(v1145, "Virtual register ", 0x11uLL);
            }
            v1148 = operator new(0x28uLL);
            *(void *)v1148 = &unk_1F26154E0;
            v1148[2] = v1139;
            *((void *)v1148 + 2) = 0;
            v1148[6] = 0;
            *((void *)v1148 + 4) = 0;
            *((void *)&v1490 + 1) = v1148;
            v1465((llvm::raw_ostream *)v1148, v1146);
            v1149 = (void *)*((void *)v1146 + 4);
            if (*((void *)v1146 + 3) - (void)v1149 <= 0x26uLL)
            {
              v1150 = v1146;
              v1151 = " is not needed live through the block.\n";
              size_t v1152 = 39;
              goto LABEL_2131;
            }
            qmemcpy(v1149, " is not needed live through the block.\n", 39);
            uint64_t v1162 = *((void *)v1146 + 4) + 39;
LABEL_2142:
            *((void *)v1146 + 4) = v1162;
            goto LABEL_2132;
          }
        }
        unint64_t v1138 = *(void *)(v1138 + 8);
        if (v1138 == v1137) {
          goto LABEL_2147;
        }
        continue;
      }
    }
  }
LABEL_2148:
  uint64_t v3 = v1469;
  if (*(void *)(v1469 + 600))
  {
    int v1165 = *(_DWORD *)(*(void *)(v1469 + 48) + 32);
    if (v1165)
    {
      int v1166 = 0;
      v1466 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
      int v1450 = *(_DWORD *)(*(void *)(v1469 + 48) + 32);
      do
      {
        uint64_t v1167 = v1166 & 0x7FFFFFFF;
        uint64_t v1168 = *(void *)(*(void *)(*(void *)(v3 + 48) + 24) + 16 * v1167 + 8);
        if (v1168)
        {
          while ((*(_DWORD *)v1168 & 0x80000000) != 0)
          {
            uint64_t v1168 = *(void *)(v1168 + 24);
            if (!v1168) {
              goto LABEL_2195;
            }
          }
          uint64_t v1169 = *(void *)(v3 + 600);
          if (v1167 < *(_DWORD *)(v1169 + 416)
            && (uint64_t v1170 = *(void *)(v1169 + 408), (v1171 = *(void *)(v1170 + 8 * v1167)) != 0))
          {
            unsigned int v1172 = *(_DWORD *)(v1171 + 112);
            sub_1CC3BCFB0((llvm *)v3, *(uint64_t **)(v1170 + 8 * v1167), v1172, 0);
            uint64_t v1173 = *(void *)(v1171 + 104);
            if (v1173)
            {
              uint64_t v1174 = 0;
              uint64_t v1175 = ~*(void *)((*(void *)(*(void *)(*(void *)(v3 + 48) + 24) + 16 * (v1172 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                 + 24);
              do
              {
                uint64_t v1176 = *(void *)(v1173 + 112);
                if ((v1176 & v1174) != 0)
                {
                  sub_1CC3B670C(v3, "Lane masks of sub ranges overlap in live interval", *(llvm::Value ***)(v3 + 16));
                  sub_1CC3BA33C((llvm *)v1171);
                  uint64_t v1176 = *(void *)(v1173 + 112);
                }
                if ((v1176 & v1175) != 0)
                {
                  sub_1CC3B670C(v3, "Subrange lanemask is invalid", *(llvm::Value ***)(v3 + 16));
                  sub_1CC3BA33C((llvm *)v1171);
                }
                if (!*(_DWORD *)(v1173 + 8))
                {
                  sub_1CC3B670C(v3, "Subrange must not be empty", *(llvm::Value ***)(v3 + 16));
                  sub_1CC3BE828((llvm *)v3, (llvm *)v1173, *(_DWORD *)(v1171 + 112), *(llvm **)(v1173 + 112));
                }
                uint64_t v1177 = *(void *)(v1173 + 112);
                sub_1CC3BCFB0((llvm *)v3, (uint64_t *)v1173, *(_DWORD *)(v1171 + 112), v1177);
                if (!llvm::LiveRange::covers(v1171, v1173))
                {
                  sub_1CC3B670C(v3, "A Subrange is not covered by the main range", *(llvm::Value ***)(v3 + 16));
                  sub_1CC3BA33C((llvm *)v1171);
                }
                v1174 |= v1177;
                uint64_t v1173 = *(void *)(v1173 + 104);
              }
              while (v1173);
            }
            unint64_t v1488 = *(void *)(v3 + 600);
            uint64_t v1489 = (uint64_t)&v1490 + 8;
            *(void *)&long long v1490 = 0x800000000;
            v1491[6] = 0;
            unsigned int v1178 = llvm::ConnectedVNInfoEqClasses::Classify((llvm::ConnectedVNInfoEqClasses *)&v1488, (const llvm::LiveRange *)v1171);
            if (v1178 > 1)
            {
              unsigned int v1179 = v1178;
              sub_1CC3B670C(v3, "Multiple connected components in live interval", *(llvm::Value ***)(v3 + 16));
              v1180 = sub_1CC3BA33C((llvm *)v1171);
              unint64_t v1181 = 0;
              uint64_t v1182 = v1179;
              do
              {
                v1183 = (llvm::raw_ostream *)llvm::errs(v1180);
                v1184 = sub_1CD098D14(v1183, v1181, 0, 0, 0);
                v1185 = (void *)*((void *)v1183 + 4);
                if (*((void *)v1183 + 3) - (void)v1185 > 7uLL)
                {
                  void *v1185 = 0x736F6E6C6176203ALL;
                  *((void *)v1183 + 4) += 8;
                }
                else
                {
                  v1184 = llvm::raw_ostream::write(v1183, ": valnos", 8uLL);
                }
                uint64_t v1186 = *(unsigned int *)(v1171 + 72);
                if (v1186)
                {
                  v1187 = *(unsigned int ***)(v1171 + 64);
                  uint64_t v1188 = 8 * v1186;
                  do
                  {
                    v1189 = *v1187;
                    if (v1181 == *(_DWORD *)(v1489 + 4 * **v1187))
                    {
                      v1190 = (llvm::raw_ostream *)llvm::errs(v1184);
                      v1191 = (unsigned char *)*((void *)v1190 + 4);
                      if ((unint64_t)v1191 >= *((void *)v1190 + 3))
                      {
                        v1190 = llvm::raw_ostream::write(v1190, 32);
                      }
                      else
                      {
                        *((void *)v1190 + 4) = v1191 + 1;
                        unsigned char *v1191 = 32;
                      }
                      v1184 = sub_1CD098D14(v1190, *v1189, 0, 0, 0);
                    }
                    ++v1187;
                    v1188 -= 8;
                  }
                  while (v1188);
                }
                v1180 = (llvm *)llvm::errs(v1184);
                v1192 = (unsigned char *)*((void *)v1180 + 4);
                if ((unint64_t)v1192 >= *((void *)v1180 + 3))
                {
                  v1180 = llvm::raw_ostream::write(v1180, 10);
                }
                else
                {
                  *((void *)v1180 + 4) = v1192 + 1;
                  unsigned char *v1192 = 10;
                }
                uint64_t v3 = v1469;
                ++v1181;
              }
              while (v1181 != v1182);
            }
            if ((long long *)v1489 != (long long *)((char *)&v1490 + 8)) {
              free((void *)v1489);
            }
            int v1165 = v1450;
          }
          else
          {
            v1193 = sub_1CC3B670C(v3, "Missing live interval for virtual register", *(llvm::Value ***)(v3 + 16));
            v1194 = (llvm::raw_ostream *)llvm::errs(v1193);
            uint64_t v1195 = *(void *)(v3 + 40);
            v1196 = operator new(0x28uLL);
            *(void *)v1196 = &unk_1F26154E0;
            v1196[2] = v1166 | 0x80000000;
            *((void *)v1196 + 2) = v1195;
            v1196[6] = 0;
            *((void *)v1196 + 4) = 0;
            *((void *)&v1490 + 1) = v1196;
            v1466((llvm::raw_ostream *)v1196, v1194);
            v1197 = (void *)*((void *)v1194 + 4);
            if (*((void *)v1194 + 3) - (void)v1197 > 0x17uLL)
            {
              qmemcpy(v1197, " still has defs or uses\n", 24);
              *((void *)v1194 + 4) += 24;
            }
            else
            {
              llvm::raw_ostream::write(v1194, " still has defs or uses\n", 0x18uLL);
            }
            if (*((unint64_t **)&v1490 + 1) == &v1488)
            {
              (*(void (**)(unint64_t *))(v1488 + 32))(&v1488);
            }
            else if (*((void *)&v1490 + 1))
            {
              (*(void (**)(void))(**((void **)&v1490 + 1) + 40))();
            }
          }
        }
LABEL_2195:
        ++v1166;
      }
      while (v1166 != v1165);
    }
    uint64_t v1198 = *(unsigned int *)(*(void *)(v3 + 40) + 44);
    if (v1198)
    {
      for (iunint64_t i = 0; ii != v1198; ++ii)
      {
        v1200 = *(uint64_t **)(*(void *)(*(void *)(v3 + 600) + 680) + 8 * ii);
        if (v1200) {
          sub_1CC3BCFB0((llvm *)v3, v1200, ii, 0);
        }
      }
    }
  }
  v1201 = *(const llvm::MachineFunction **)(v3 + 16);
  if ((**(unsigned char **)(**(void **)(v3 + 48) + 360) & 4) != 0)
  {
    v1202 = (void *)((char *)v1201 + 320);
    v1203 = (void *)*((void *)v1201 + 41);
    if (v1203 != (void *)((char *)v1201 + 320))
    {
      v1204 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
      while (1)
      {
        v1205 = (unsigned __int16 *)v1203[19];
        v1206 = (unsigned __int16 *)v1203[20];
        if (v1206 != v1205) {
          break;
        }
LABEL_2251:
        v1203 = (void *)v1203[1];
        if (v1203 == v1202)
        {
          v1201 = *v1460;
          uint64_t v3 = v1469;
          goto LABEL_2253;
        }
      }
      while (1)
      {
        unint64_t v1207 = *v1205;
        uint64_t v1208 = *(void *)(v1469 + 40);
        v1209 = v1208 ? (uint64_t *)(v1208 + 8) : 0;
        uint64_t v1210 = *v1209;
        unint64_t v1211 = *(unsigned int *)(*v1209 + 24 * *v1205 + 16);
        __int16 v1212 = v1211 & 0xF;
        uint64_t v1213 = (v1211 >> 3) & 0x1FFFFFFE;
        v1216 = v1209 + 5;
        uint64_t v1215 = v1209[5];
        uint64_t v1214 = v1216[1];
        v1217 = (_WORD *)(v1214 + v1213);
        unsigned __int16 v1218 = *v1217 + v1212 * v1207;
        do
        {
          unsigned __int16 v1219 = *(_WORD *)(v1215 + 4 * v1218);
          if (v1219)
          {
            unsigned __int16 v1220 = *(_WORD *)(v1215 + 4 * v1218 + 2);
            while (!v1214)
            {
LABEL_2217:
              unsigned __int16 v1219 = v1220;
              BOOL v66 = v1220 == 0;
              unsigned __int16 v1220 = 0;
              if (v66) {
                goto LABEL_2219;
              }
            }
            v1221 = (unsigned __int16 *)(v1214 + 2 * *(unsigned int *)(v1210 + 24 * v1219 + 8));
            while (v1207 == v1219)
            {
              int v1222 = *v1221++;
              unsigned __int16 v1219 = v1222 + v1207;
              if (!v1222) {
                goto LABEL_2217;
              }
            }
            goto LABEL_2250;
          }
LABEL_2219:
          int v1223 = (unsigned __int16)v1217[1];
          ++v1217;
          v1218 += v1223;
        }
        while (v1223);
        if ((*(_DWORD *)(v1208 + 16) <= v1207
           || !*(unsigned char *)(*(void *)(*(void *)(v1208 + 216) + 16) + v1207)
           || ((*(void *)((char *)*v1421 + ((v1207 >> 3) & 0x1FF8)) >> v1207) & 1) != 0)
          && (*(_DWORD *)(v1469 + 240) <= v1207
           || ((*(void *)((char *)*v1421 + ((v1207 >> 3) & 0x1FF8)) >> v1207) & 1) == 0))
        {
          v1467 = (llvm::SmallPtrSetImplBase *)v1203[8];
          v1446 = (llvm::SmallPtrSetImplBase *)v1203[9];
          if (v1467 != v1446) {
            break;
          }
        }
LABEL_2250:
        v1205 += 8;
        if (v1205 == v1206) {
          goto LABEL_2251;
        }
      }
      unsigned int v1443 = 37 * v1207;
      while (2)
      {
        v1451 = *(uint64_t **)v1467;
        v1482 = *(uint64_t **)v1467;
        v1224 = sub_1CC3B6B7C(v3 + 568, (uint64_t *)&v1482);
        int v1225 = *((_DWORD *)v1224 + 18);
        if (v1225)
        {
          uint64_t v1226 = v1224[7];
          int v1227 = v1225 - 1;
          unsigned int v1228 = v1227 & v1443;
          int v1229 = *(_DWORD *)(v1226 + 4 * (v1227 & v1443));
          if (v1229 == v1207) {
            goto LABEL_2229;
          }
          int v1230 = 1;
          while (v1229 != -1)
          {
            unsigned int v1231 = v1228 + v1230++;
            unsigned int v1228 = v1231 & v1227;
            int v1229 = *(_DWORD *)(v1226 + 4 * v1228);
            if (v1229 == v1207) {
              goto LABEL_2229;
            }
          }
        }
        v1232 = sub_1CC3B5D94(v1469, "Live in register not found to be live out from predecessor.", (unint64_t)v1203);
        v1457 = (llvm::raw_ostream *)llvm::errs(v1232);
        uint64_t v1233 = *(void *)(v1469 + 40);
        uint64_t v1234 = *(void *)(v1233 + 72);
        if (v1234)
        {
          v1235 = (const char *)(v1234 + *(unsigned int *)(*(void *)(v1233 + 8) + 24 * v1207));
          size_t v1236 = strlen(v1235);
          v1237 = (void *)*((void *)v1457 + 4);
          if (v1236 <= *((void *)v1457 + 3) - (void)v1237)
          {
            if (v1236)
            {
              v1240 = v1235;
              size_t v1241 = v1236;
              memcpy(v1237, v1240, v1236);
              *((void *)v1457 + 4) += v1241;
            }
          }
          else
          {
            llvm::raw_ostream::write(v1457, v1235, v1236);
          }
        }
        v1238 = (void *)*((void *)v1457 + 4);
        if (*((void *)v1457 + 3) - (void)v1238 > 0x1EuLL)
        {
          qmemcpy(v1238, " not found to be live out from ", 31);
          *((void *)v1457 + 4) += 31;
        }
        else
        {
          llvm::raw_ostream::write(v1457, " not found to be live out from ", 0x1FuLL);
        }
        *((void *)&v1490 + 1) = &v1488;
        unint64_t v1488 = (unint64_t)&unk_1F260D508;
        uint64_t v1489 = (uint64_t)v1451;
        v1204((uint64_t)&v1488, v1457);
        v1239 = (unsigned char *)*((void *)v1457 + 4);
        if (*((unsigned char **)v1457 + 3) == v1239)
        {
          llvm::raw_ostream::write(v1457, "\n", 1uLL);
        }
        else
        {
          unsigned char *v1239 = 10;
          ++*((void *)v1457 + 4);
        }
        if (*((unint64_t **)&v1490 + 1) == &v1488)
        {
          (*(void (**)(unint64_t *))(v1488 + 32))(&v1488);
        }
        else if (*((void *)&v1490 + 1))
        {
          (*(void (**)(void))(**((void **)&v1490 + 1) + 40))();
        }
LABEL_2229:
        v1467 = (llvm::SmallPtrSetImplBase *)((char *)v1467 + 8);
        if (v1467 == v1446) {
          goto LABEL_2250;
        }
        continue;
      }
    }
  }
LABEL_2253:
  uint64_t v1242 = *((void *)v1201 + 93);
  uint64_t v1243 = *((unsigned int *)v1201 + 190);
  uint64_t v1244 = v1242 + 32 * v1243;
  if (*((_DWORD *)v1201 + 188))
  {
    if (v1243)
    {
      uint64_t v1245 = 32 * v1243;
      uint64_t v1246 = *((void *)v1201 + 93);
      while ((*(void *)v1246 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v1246 += 32;
        v1245 -= 32;
        if (!v1245) {
          goto LABEL_2258;
        }
      }
    }
    else
    {
      uint64_t v1246 = *((void *)v1201 + 93);
    }
  }
  else
  {
LABEL_2258:
    uint64_t v1246 = v1242 + 32 * v1243;
  }
  uint64_t v1247 = v1242 + 32 * v1243;
  if (v1246 != v1247)
  {
    do
    {
      unint64_t v1248 = *(void *)v1246;
      unint64_t v1488 = *(void *)v1246;
      uint64_t v1489 = (uint64_t)&v1490 + 8;
      *(void *)&long long v1490 = 0x100000000;
      if (*(_DWORD *)(v1246 + 16))
      {
        sub_1CD532C28((uint64_t)&v1489, v1246 + 8);
        unint64_t v1248 = v1488;
      }
      uint64_t v1249 = *(void *)(*(void *)(v1248 + 16) + 8);
      if ((*(_WORD *)(v1248 + 44) & 0xC) != 0 && (*(_WORD *)(v1248 + 44) & 4) == 0)
      {
        while ((v1249 & 0x80) == 0)
        {
          if ((*(_WORD *)(v1248 + 44) & 8) == 0) {
            goto LABEL_2268;
          }
          unint64_t v1248 = *(void *)(v1248 + 8);
          LOBYTE(v1249) = *(unsigned char *)(*(void *)(v1248 + 16) + 8);
        }
      }
      else if ((v1249 & 0x80) == 0)
      {
LABEL_2268:
        sub_1CC3B670C(v3, "Call site info referencing instruction that is not call", *(llvm::Value ***)(v3 + 16));
      }
      if ((long long *)v1489 != (long long *)((char *)&v1490 + 8)) {
        free((void *)v1489);
      }
      uint64_t v1251 = v1246 + 32;
      uint64_t v1246 = v1244;
      if (v1251 != v1244)
      {
        uint64_t v1246 = v1251;
        while ((*(void *)v1246 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v1246 += 32;
          if (v1246 == v1244)
          {
            uint64_t v1246 = v1244;
            break;
          }
        }
      }
    }
    while (v1246 != v1247);
    v1201 = *v1460;
  }
  v1252 = *(uint64_t ****)v1201;
  if ((*(unsigned char *)(*(void *)v1201 + 23) & 0x20) != 0)
  {
    uint64_t v1253 = ***v1252;
    unint64_t v1488 = (unint64_t)v1252;
    int v1254 = *(_DWORD *)(v1253 + 2496);
    if (!v1254)
    {
      v1320 = 0;
      goto LABEL_2406;
    }
    uint64_t v1255 = *(void *)(v1253 + 2480);
    int v1256 = v1254 - 1;
    unsigned int v1257 = v1256 & ((v1252 >> 4) ^ (v1252 >> 9));
    v1258 = (void *)(v1255 + 40 * v1257);
    v1259 = (void ***)*v1258;
    if ((uint64_t ***)*v1258 != v1252)
    {
      v1260 = 0;
      int v1261 = 1;
      while (v1259 != (void ***)-4096)
      {
        if (v1260) {
          BOOL v1262 = 0;
        }
        else {
          BOOL v1262 = v1259 == (void ***)-8192;
        }
        if (v1262) {
          v1260 = v1258;
        }
        unsigned int v1263 = v1257 + v1261++;
        unsigned int v1257 = v1263 & v1256;
        v1258 = (void *)(v1255 + 40 * v1257);
        v1259 = (void ***)*v1258;
        if ((uint64_t ***)*v1258 == v1252) {
          goto LABEL_2292;
        }
      }
      if (v1260) {
        v1320 = v1260;
      }
      else {
        v1320 = v1258;
      }
LABEL_2406:
      v1258 = sub_1CC609054(v1253 + 2480, (uint64_t)&v1488, (uint64_t *)&v1488, v1320);
      unint64_t v1321 = v1488;
      v1258[3] = 0;
      v1258[4] = 0;
      void *v1258 = v1321;
      v1258[1] = v1258 + 3;
      v1258[2] = 0x100000000;
    }
LABEL_2292:
    uint64_t v1264 = *((unsigned int *)v1258 + 4);
    if (v1264)
    {
      v1265 = (void *)(v1258[1] + 8);
      uint64_t v1266 = 16 * v1264;
      while (*((_DWORD *)v1265 - 2))
      {
        v1265 += 2;
        v1266 -= 16;
        if (!v1266) {
          goto LABEL_2354;
        }
      }
      if (*v1265)
      {
        v1482 = 0;
        v1483 = 0;
        LODWORD(v1484) = 0;
        uint64_t v1267 = (uint64_t)*v1460 + 320;
        uint64_t v1268 = *((void *)*v1460 + 41);
        if (v1268 == v1267)
        {
          v1270 = 0;
        }
        else
        {
          do
          {
            for (juint64_t j = *(void *)(v1268 + 56); jj != v1268 + 48; juint64_t j = *(void *)(jj + 8))
            {
              if (*(_DWORD *)(jj + 64))
              {
                LODWORD(v1471) = *(_DWORD *)(jj + 64);
                sub_1CD521094((uint64_t)&v1482, (int *)&v1471, (uint64_t)&v1488);
                if (!(_BYTE)v1490) {
                  sub_1CC3B6180(v3, "Instruction has a duplicated value tracking number", jj);
                }
              }
              if ((*(unsigned char *)jj & 4) == 0)
              {
                while ((*(_WORD *)(jj + 44) & 8) != 0)
                  juint64_t j = *(void *)(jj + 8);
              }
            }
            uint64_t v1268 = *(void *)(v1268 + 8);
          }
          while (v1268 != v1267);
          v1270 = v1482;
        }
        MEMORY[0x1D25D9CD0](v1270, 4);
      }
    }
  }
LABEL_2354:
  int v1296 = *(_DWORD *)(v3 + 256);
  if (v1296 || *(_DWORD *)(v3 + 260))
  {
    v1318 = (void **)(v3 + 248);
    uint64_t v1319 = *(unsigned int *)(v3 + 264);
    if (v1319 <= 4 * v1296 || v1319 < 0x41)
    {
      if (v1319) {
        memset(*v1318, 255, 4 * v1319);
      }
      *(void *)(v3 + 256) = 0;
    }
    else
    {
      sub_1CBB23624(v1318);
    }
  }
  *(_DWORD *)(v3 + 280) = 0;
  *(_DWORD *)(v3 + 360) = 0;
  *(_DWORD *)(v3 + 440) = 0;
  *(_DWORD *)(v3 + 520) = 0;
  int v1297 = *(_DWORD *)(v3 + 576);
  if (v1297 || *(_DWORD *)(v3 + 580))
  {
    unsigned int v1298 = *(_DWORD *)(v3 + 584);
    v1299 = *(void **)(v3 + 568);
    if (v1298 > 4 * v1297 && v1298 >= 0x41)
    {
      v1300 = (void *)(v3 + 568);
      uint64_t v1301 = 328 * v1298;
      v1302 = (void **)(v1299 + 17);
      do
      {
        if (((unint64_t)*(v1302 - 17) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v1303 = v1302[13];
          if (v1303 != v1302[12]) {
            free(v1303);
          }
          v1304 = v1302[1];
          if (v1304 != *v1302) {
            free(v1304);
          }
          MEMORY[0x1D25D9CD0](*(v1302 - 3), 4);
          MEMORY[0x1D25D9CD0](*(v1302 - 6), 4);
          MEMORY[0x1D25D9CD0](*(v1302 - 9), 4);
          MEMORY[0x1D25D9CD0](*(v1302 - 12), 4);
          MEMORY[0x1D25D9CD0](*(v1302 - 15), 8);
        }
        v1302 += 41;
        v1301 -= 328;
      }
      while (v1301);
      int v1305 = 1 << (33 - __clz(v1297 - 1));
      if (v1305 <= 64) {
        int v1305 = 64;
      }
      if (v1297) {
        unsigned int v1306 = v1305;
      }
      else {
        unsigned int v1306 = 0;
      }
      if (v1306 == *(_DWORD *)(v3 + 584))
      {
        *(void *)(v3 + 576) = 0;
        if (v1306)
        {
          v1307 = *(void **)(v3 + 568);
          uint64_t v1308 = 328 * v1306;
          do
          {
            void *v1307 = -4096;
            v1307 += 41;
            v1308 -= 328;
          }
          while (v1308);
        }
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v1300, 8);
        if (v1306)
        {
          unint64_t v1313 = (4 * v1306 / 3 + 1) | ((unint64_t)(4 * v1306 / 3 + 1) >> 1);
          unint64_t v1314 = v1313 | (v1313 >> 2) | ((v1313 | (v1313 >> 2)) >> 4);
          LODWORD(v1314) = (((v1314 | (v1314 >> 8)) >> 16) | v1314 | (v1314 >> 8)) + 1;
          *(_DWORD *)(v3 + 584) = v1314;
          v1315 = operator new(328 * v1314, (std::align_val_t)8uLL);
          *(void *)(v3 + 568) = v1315;
          *(void *)(v3 + 576) = 0;
          unsigned int v1316 = *(_DWORD *)(v3 + 584);
          if (v1316)
          {
            uint64_t v1317 = 328 * v1316;
            do
            {
              void *v1315 = -4096;
              v1315 += 41;
              v1317 -= 328;
            }
            while (v1317);
          }
        }
        else
        {
          void *v1300 = 0;
          *(void *)(v3 + 576) = 0;
          *(_DWORD *)(v3 + 584) = 0;
        }
      }
      return *(unsigned int *)(v3 + 56);
    }
    if (!v1298)
    {
LABEL_2389:
      *(void *)(v3 + 576) = 0;
      return *(unsigned int *)(v3 + 56);
    }
    uint64_t v1309 = 328 * v1298;
    while (2)
    {
      if (*v1299 == -8192)
      {
LABEL_2387:
        void *v1299 = -4096;
      }
      else if (*v1299 != -4096)
      {
        v1310 = (void *)v1299[30];
        if (v1310 != (void *)v1299[29]) {
          free(v1310);
        }
        v1311 = (void *)v1299[18];
        if (v1311 != (void *)v1299[17]) {
          free(v1311);
        }
        MEMORY[0x1D25D9CD0](v1299[14], 4);
        MEMORY[0x1D25D9CD0](v1299[11], 4);
        MEMORY[0x1D25D9CD0](v1299[8], 4);
        MEMORY[0x1D25D9CD0](v1299[5], 4);
        MEMORY[0x1D25D9CD0](v1299[2], 8);
        goto LABEL_2387;
      }
      v1299 += 41;
      v1309 -= 328;
      if (!v1309) {
        goto LABEL_2389;
      }
      continue;
    }
  }
  return *(unsigned int *)(v3 + 56);
}

uint64_t sub_1CC3B58BC(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 584);
  uint64_t v3 = *(void *)(a1 + 568);
  if (v2)
  {
    uint64_t v4 = 328 * v2;
    unint64_t v5 = (void **)(v3 + 136);
    do
    {
      if (((unint64_t)*(v5 - 17) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v6 = v5[13];
        if (v6 != v5[12]) {
          free(v6);
        }
        uint64_t v7 = v5[1];
        if (v7 != *v5) {
          free(v7);
        }
        MEMORY[0x1D25D9CD0](*(v5 - 3), 4);
        MEMORY[0x1D25D9CD0](*(v5 - 6), 4);
        MEMORY[0x1D25D9CD0](*(v5 - 9), 4);
        MEMORY[0x1D25D9CD0](*(v5 - 12), 4);
        MEMORY[0x1D25D9CD0](*(v5 - 15), 8);
      }
      v5 += 41;
      v4 -= 328;
    }
    while (v4);
    uint64_t v3 = *(void *)(a1 + 568);
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  uint64_t v8 = *(void **)(a1 + 512);
  if (v8 != (void *)(a1 + 528)) {
    free(v8);
  }
  __int16 v9 = *(void **)(a1 + 432);
  if (v9 != (void *)(a1 + 448)) {
    free(v9);
  }
  uint64_t v10 = *(void **)(a1 + 352);
  if (v10 != (void *)(a1 + 368)) {
    free(v10);
  }
  uint64_t v11 = *(void **)(a1 + 272);
  if (v11 != (void *)(a1 + 288)) {
    free(v11);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 248), 4);
  uint64_t v12 = *(void **)(a1 + 176);
  if (v12 != (void *)(a1 + 192)) {
    free(v12);
  }
  unsigned int v13 = *(void **)(a1 + 88);
  if (v13 != *(void **)(a1 + 80)) {
    free(v13);
  }
  return a1;
}

void sub_1CC3B5A04()
{
}

void sub_1CC3B5A68(void **this)
{
  *this = &unk_1F260FFA8;
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  *this = &unk_1F260E110;
  unsigned int v2 = (void **)this[22];
  if (v2 != this + 24) {
    free(v2);
  }
  uint64_t v3 = (void **)this[13];
  if (v3 != this + 15) {
    free(v3);
  }
  uint64_t v4 = (void **)this[4];
  if (v4 != this + 6) {
    free(v4);
  }

  llvm::Pass::~Pass((llvm::Pass *)this);
}

void sub_1CC3B5B2C(void **this)
{
  *this = &unk_1F260FFA8;
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  *this = &unk_1F260E110;
  unsigned int v2 = (void **)this[22];
  if (v2 != this + 24) {
    free(v2);
  }
  uint64_t v3 = (void **)this[13];
  if (v3 != this + 15) {
    free(v3);
  }
  uint64_t v4 = (void **)this[4];
  if (v4 != this + 6) {
    free(v4);
  }
  llvm::Pass::~Pass((llvm::Pass *)this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3B5C04(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC3B5C10(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((*(unsigned char *)(*(void *)(a2 + 360) + 1) & 2) == 0)
  {
    unsigned int v2 = (void *)(a1 + 248);
    if (*(char *)(a1 + 271) < 0) {
      unsigned int v2 = (void *)*v2;
    }
    v12[0] = a1;
    v12[1] = v2;
    v12[10] = v14;
    v12[11] = v14;
    v12[12] = 8;
    int v13 = 0;
    v14[8] = v15;
    void v14[9] = 0x600000000;
    v15[12] = 0;
    long long v16 = 0u;
    int v17 = 0;
    int v18 = v20;
    uint64_t v19 = 0x1000000000;
    char v20[8] = v21;
    v20[9] = 0x1000000000;
    v21[8] = v22;
    v21[9] = 0x1000000000;
    v22[8] = v23;
    v22[9] = 0x400000000;
    int v25 = 0;
    uint64_t v24 = 0;
    v23[2] = 0u;
    int v3 = sub_1CC3AC234((uint64_t)v12, a2);
    sub_1CC3B58BC((uint64_t)v12);
    if (v3)
    {
      __int16 v9 = "Found ";
      __int16 v10 = 259;
      __int16 v8 = 264;
      LODWORD(v7[0]) = v3;
      sub_1CD3E3950((uint64_t *)&v9, v7, (uint64_t)v11);
      unint64_t v5 = " machine code errors.";
      __int16 v6 = 259;
      sub_1CD3E3950(v11, (uint64_t *)&v5, (uint64_t)v12);
      llvm::report_fatal_error((llvm *)v12, (const llvm::Twine *)1);
    }
  }
  return 0;
}

llvm::raw_ostream *sub_1CC3B5D94(uint64_t a1, const char *a2, unint64_t a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = sub_1CC3B670C(a1, a2, *(llvm::Value ***)(a3 + 32));
  __int16 v6 = (llvm::raw_ostream *)llvm::errs(v5);
  uint64_t v7 = v6;
  __int16 v8 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v8 > 0xEuLL)
  {
    qmemcpy(v8, "- basic block: ", 15);
    *((void *)v6 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v6, "- basic block: ", 0xFuLL);
  }
  uint64_t v34 = (llvm *)v33;
  v33[0] = &unk_1F260D508;
  v33[1] = a3;
  off_1F260D538((uint64_t)v33, v7);
  __int16 v9 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v9 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 32);
  }
  else
  {
    *((void *)v7 + 4) = v9 + 1;
    *__int16 v9 = 32;
  }
  __int16 v10 = *(uint64_t ****)(a3 + 16);
  if (!v10 || (*((unsigned char *)v10 + 23) & 0x10) == 0) {
    goto LABEL_17;
  }
  uint64_t v11 = ***v10;
  uint64_t v12 = *(void *)(v11 + 152);
  uint64_t v13 = *(unsigned int *)(v11 + 168);
  if (v13)
  {
    LODWORD(v14) = (v13 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
    long long v16 = *v15;
    if (*v15 == v10) {
      goto LABEL_15;
    }
    int v17 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      int v18 = v14 + v17++;
      uint64_t v14 = v18 & (v13 - 1);
      long long v16 = *(uint64_t ****)(v12 + 16 * v14);
      if (v16 == v10)
      {
        uint64_t v15 = (uint64_t ****)(v12 + 16 * v14);
        goto LABEL_15;
      }
    }
  }
  uint64_t v15 = (uint64_t ****)(v12 + 16 * v13);
LABEL_15:
  uint64_t v19 = v15[1];
  size_t v22 = (size_t)*v19;
  int v20 = (const char *)(v19 + 2);
  size_t v21 = v22;
  int v23 = (_WORD *)*((void *)v7 + 4);
  if (v22 > *((void *)v7 + 3) - (void)v23)
  {
    llvm::raw_ostream::write(v7, v20, v21);
LABEL_17:
    int v23 = (_WORD *)*((void *)v7 + 4);
    goto LABEL_20;
  }
  if (v21)
  {
    memcpy(v23, v20, v21);
    int v23 = (_WORD *)(*((void *)v7 + 4) + v21);
    *((void *)v7 + 4) = v23;
  }
LABEL_20:
  if (*((void *)v7 + 3) - (void)v23 > 1uLL)
  {
    *int v23 = 10272;
    *((void *)v7 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v7, " (", 2uLL);
  }
  llvm::write_hex(v7, a3, 3, 0, 0);
  uint64_t v24 = (unsigned char *)*((void *)v7 + 4);
  if ((unint64_t)v24 >= *((void *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 41);
  }
  else
  {
    *((void *)v7 + 4) = v24 + 1;
    *uint64_t v24 = 41;
  }
  int v25 = v34;
  if (v34 == (llvm *)v33)
  {
    int v25 = (llvm *)(*(uint64_t (**)(void *))(v33[0] + 32))(v33);
  }
  else if (v34)
  {
    int v25 = (llvm *)(*(uint64_t (**)(void))(*(void *)v34 + 40))();
  }
  if (*(void *)(a1 + 616))
  {
    unint64_t v28 = (llvm::raw_ostream *)llvm::errs(v25);
    unint64_t v29 = v28;
    int v30 = (_WORD *)*((void *)v28 + 4);
    if (*((void *)v28 + 3) - (void)v30 > 1uLL)
    {
      *int v30 = 23328;
      *((void *)v28 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v28, " [", 2uLL);
    }
    v33[0] = *(void *)(*(void *)(*(void *)(a1 + 616) + 392) + 16 * *(unsigned int *)(a3 + 24));
    llvm::SlotIndex::print((llvm::SlotIndex *)v33, v29);
    uint64_t v31 = (unsigned char *)*((void *)v29 + 4);
    if ((unint64_t)v31 >= *((void *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 59);
    }
    else
    {
      *((void *)v29 + 4) = v31 + 1;
      *uint64_t v31 = 59;
    }
    v33[0] = *(void *)(*(void *)(*(void *)(a1 + 616) + 392) + 16 * *(unsigned int *)(a3 + 24) + 8);
    int v25 = llvm::SlotIndex::print((llvm::SlotIndex *)v33, v29);
    unsigned int v32 = (unsigned char *)*((void *)v29 + 4);
    if ((unint64_t)v32 >= *((void *)v29 + 3))
    {
      int v25 = llvm::raw_ostream::write(v29, 41);
    }
    else
    {
      *((void *)v29 + 4) = v32 + 1;
      *unsigned int v32 = 41;
    }
  }
  uint64_t result = (llvm::raw_ostream *)llvm::errs(v25);
  uint64_t v27 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v27 >= *((void *)result + 3)) {
    return llvm::raw_ostream::write(result, 10);
  }
  *((void *)result + 4) = v27 + 1;
  unsigned char *v27 = 10;
  return result;
}

void sub_1CC3B6180(uint64_t a1, const char *a2, unint64_t a3)
{
  unint64_t v5 = sub_1CC3B5D94(a1, a2, *(void *)(a3 + 24));
  __int16 v6 = (llvm::raw_ostream *)llvm::errs(v5);
  uint64_t v7 = (void *)*((void *)v6 + 4);
  if (*((void *)v6 + 3) - (void)v7 > 0xEuLL)
  {
    qmemcpy(v7, "- instruction: ", 15);
    *((void *)v6 + 4) += 15;
  }
  else
  {
    __int16 v6 = llvm::raw_ostream::write(v6, "- instruction: ", 0xFuLL);
  }
  uint64_t v8 = *(void *)(a1 + 616);
  if (!v8) {
    goto LABEL_28;
  }
  int v9 = *(_DWORD *)(v8 + 384);
  if (!v9) {
    goto LABEL_28;
  }
  uint64_t v10 = *(void *)(v8 + 368);
  int v11 = v9 - 1;
  unsigned int v12 = v11 & ((a3 >> 4) ^ (a3 >> 9));
  uint64_t v13 = *(void *)(v10 + 16 * v12);
  if (v13 == a3)
  {
LABEL_9:
    long long v16 = (llvm::raw_ostream *)llvm::errs(v6);
    __int16 v17 = *(_WORD *)(a3 + 44);
    unint64_t v18 = a3;
    if ((v17 & 4) != 0)
    {
      unint64_t v18 = a3;
      do
        unint64_t v18 = *(void *)v18 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v18 + 44) & 4) != 0);
    }
    uint64_t v19 = *(void *)(a1 + 616);
    unint64_t v20 = a3;
    if ((v17 & 8) != 0)
    {
      unint64_t v20 = a3;
      do
        unint64_t v20 = *(void *)(v20 + 8);
      while ((*(_WORD *)(v20 + 44) & 8) != 0);
    }
    uint64_t v21 = *(void *)(v20 + 8);
    if (v18 != v21)
    {
      while (1)
      {
        unsigned int v22 = **(unsigned __int16 **)(v18 + 16);
        BOOL v23 = v22 > 0x17;
        int v24 = (1 << v22) & 0x83E000;
        if (v23 || v24 == 0) {
          break;
        }
        unint64_t v18 = *(void *)(v18 + 8);
        if (v18 == v21)
        {
          unint64_t v18 = *(void *)(v20 + 8);
          break;
        }
      }
    }
    uint64_t v26 = *(void *)(v19 + 368);
    uint64_t v27 = *(unsigned int *)(v19 + 384);
    if (v27)
    {
      LODWORD(v28) = ((v18 >> 4) ^ (v18 >> 9)) & (v27 - 1);
      unint64_t v29 = (uint64_t *)(v26 + 16 * v28);
      uint64_t v30 = *v29;
      if (v18 == *v29) {
        goto LABEL_25;
      }
      int v31 = 1;
      while (v30 != -4096)
      {
        int v32 = v28 + v31++;
        uint64_t v28 = v32 & (v27 - 1);
        uint64_t v30 = *(void *)(v26 + 16 * v28);
        if (v18 == v30)
        {
          unint64_t v29 = (uint64_t *)(v26 + 16 * v28);
          goto LABEL_25;
        }
      }
    }
    unint64_t v29 = (uint64_t *)(v26 + 16 * v27);
LABEL_25:
    uint64_t v35 = v29[1];
    __int16 v6 = llvm::SlotIndex::print((llvm::SlotIndex *)&v35, v16);
    uint64_t v33 = (unsigned char *)*((void *)v16 + 4);
    if ((unint64_t)v33 >= *((void *)v16 + 3))
    {
      __int16 v6 = llvm::raw_ostream::write(v16, 9);
    }
    else
    {
      *((void *)v16 + 4) = v33 + 1;
      *uint64_t v33 = 9;
    }
    goto LABEL_28;
  }
  int v14 = 1;
  while (v13 != -4096)
  {
    unsigned int v15 = v12 + v14++;
    unsigned int v12 = v15 & v11;
    uint64_t v13 = *(void *)(v10 + 16 * v12);
    if (v13 == a3) {
      goto LABEL_9;
    }
  }
LABEL_28:
  uint64_t v34 = (llvm::raw_ostream *)llvm::errs(v6);

  llvm::MachineInstr::print((llvm::MachineInstr *)a3, v34, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
}

_DWORD *sub_1CC3B63C4(int32x2_t *a1, uint64_t a2)
{
  uint64_t v52 = a2;
  uint64_t result = sub_1CC3B6B7C((uint64_t)&a1[71], &v52);
  uint64_t v4 = a1[55].u32[0];
  if (!v4)
  {
    uint64_t v21 = a1 + 31;
    goto LABEL_25;
  }
  unint64_t v5 = result;
  __int16 v6 = (char **)(result + 8);
  uint64_t v7 = (int *)a1[54];
  uint64_t v8 = &v7[v4];
  do
  {
    int v9 = v5[12];
    if (v9)
    {
      uint64_t v10 = *((void *)v5 + 4);
      int v11 = v9 - 1;
      unsigned int v12 = (37 * *v7) & v11;
      uint64_t v13 = (char *)(v10 + 4 * v12);
      int v14 = *(_DWORD *)v13;
      if (*v7 == *(_DWORD *)v13) {
        goto LABEL_19;
      }
      unsigned int v15 = 0;
      int v16 = 1;
      while (v14 != -1)
      {
        if (v15) {
          BOOL v17 = 0;
        }
        else {
          BOOL v17 = v14 == -2;
        }
        if (v17) {
          unsigned int v15 = v13;
        }
        unsigned int v18 = v12 + v16++;
        unsigned int v12 = v18 & v11;
        uint64_t v13 = (char *)(v10 + 4 * v12);
        int v14 = *(_DWORD *)v13;
        if (*v7 == *(_DWORD *)v13) {
          goto LABEL_19;
        }
      }
      if (v15) {
        uint64_t v19 = v15;
      }
      else {
        uint64_t v19 = v13;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t result = sub_1CBA855C4(v6, (uint64_t)v7, v7, v19);
    *uint64_t result = *v7;
LABEL_19:
    ++v7;
  }
  while (v7 != v8);
  uint64_t v20 = a1[55].u32[0];
  uint64_t v21 = a1 + 31;
  if (v20)
  {
    unsigned int v22 = (_DWORD *)a1[54];
    uint64_t v23 = 4 * v20;
    do
    {
      uint64_t result = (_DWORD *)sub_1CBA860DC(a1 + 31, v22++);
      v23 -= 4;
    }
    while (v23);
  }
LABEL_25:
  a1[55].i32[0] = 0;
  for (unsigned __int32 i = a1[65].u32[0]; i; unsigned __int32 i = a1[65].u32[0])
  {
    while (1)
    {
      uint64_t v25 = *(void *)(*(void *)&a1[64] + 8 * i-- - 8);
      a1[65].i32[0] = i;
      int32x2_t v26 = a1[31];
      uint64_t v27 = a1[33].u32[0];
      if (a1[32].i32[0])
      {
        if (a1[33].i32[0])
        {
          uint64_t v28 = 4 * v27;
          unint64_t v29 = (unsigned int *)a1[31];
          while (*v29 >= 0xFFFFFFFE)
          {
            ++v29;
            v28 -= 4;
            if (!v28) {
              goto LABEL_31;
            }
          }
        }
        else
        {
          unint64_t v29 = (unsigned int *)a1[31];
        }
      }
      else
      {
LABEL_31:
        unint64_t v29 = (unsigned int *)(*(void *)&v26 + 4 * v27);
      }
      uint64_t v30 = (unsigned int *)(*(void *)&v26 + 4 * v27);
      if (v29 != v30) {
        break;
      }
      if (!i) {
        goto LABEL_48;
      }
    }
    do
    {
      unint64_t v31 = *v29;
      if ((v31 - 1) <= 0x3FFFFFFE && ((*(_DWORD *)(v25 + ((v31 >> 3) & 0x1FFFFFFC)) >> v31) & 1) == 0)
      {
        unint64_t v32 = a1[45].u32[0];
        if (v32 >= a1[45].u32[1]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)&a1[44] + 4 * v32) = v31;
        ++a1[45].i32[0];
      }
      uint64_t v33 = v29 + 1;
      while (v33 != (unsigned int *)(*(void *)&v26 + 4 * v27))
      {
        unsigned int v34 = *v33++;
        if (v34 <= 0xFFFFFFFD)
        {
          unint64_t v29 = v33 - 1;
          goto LABEL_46;
        }
      }
      unint64_t v29 = (unsigned int *)(*(void *)&v26 + 4 * v27);
LABEL_46:
      ;
    }
    while (v29 != v30);
  }
LABEL_48:
  uint64_t v35 = a1[45].u32[0];
  if (v35)
  {
    int v36 = (_DWORD *)a1[44];
    uint64_t v37 = 4 * v35;
    do
    {
      uint64_t result = (_DWORD *)sub_1CBA860DC(v21, v36++);
      v37 -= 4;
    }
    while (v37);
  }
  a1[45].i32[0] = 0;
  uint64_t v38 = a1[35].u32[0];
  if (v38)
  {
    unsigned int v39 = (int *)a1[34];
    uint64_t v40 = &v39[v38];
    while (1)
    {
      __int32 v41 = a1[33].i32[0];
      if (!v41) {
        break;
      }
      int32x2_t v42 = a1[31];
      __int32 v43 = v41 - 1;
      unsigned int v44 = (37 * *v39) & v43;
      uint64_t v45 = (char *)(*(void *)&v42 + 4 * v44);
      int v46 = *(_DWORD *)v45;
      if (*v39 != *(_DWORD *)v45)
      {
        unint64_t v47 = 0;
        int v48 = 1;
        while (v46 != -1)
        {
          if (v47) {
            BOOL v49 = 0;
          }
          else {
            BOOL v49 = v46 == -2;
          }
          if (v49) {
            unint64_t v47 = v45;
          }
          unsigned int v50 = v44 + v48++;
          unsigned int v44 = v50 & v43;
          uint64_t v45 = (char *)(*(void *)&v42 + 4 * v44);
          int v46 = *(_DWORD *)v45;
          if (*v39 == *(_DWORD *)v45) {
            goto LABEL_69;
          }
        }
        if (v47) {
          uint64_t v51 = v47;
        }
        else {
          uint64_t v51 = v45;
        }
        goto LABEL_68;
      }
LABEL_69:
      if (++v39 == v40) {
        goto LABEL_70;
      }
    }
    uint64_t v51 = 0;
LABEL_68:
    uint64_t result = sub_1CBA855C4((char **)v21, (uint64_t)v39, v39, v51);
    *uint64_t result = *v39;
    goto LABEL_69;
  }
LABEL_70:
  a1[35].i32[0] = 0;
  return result;
}

llvm::raw_ostream *sub_1CC3B670C(uint64_t a1, const char *a2, llvm::Value **a3)
{
  __int16 v6 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  uint64_t v7 = (unsigned char *)*((void *)v6 + 4);
  if ((unint64_t)v7 >= *((void *)v6 + 3))
  {
    __int16 v6 = llvm::raw_ostream::write(v6, 10);
  }
  else
  {
    *((void *)v6 + 4) = v7 + 1;
    *uint64_t v7 = 10;
  }
  int v8 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = v8 + 1;
  if (!v8)
  {
    if (*(void *)(a1 + 8))
    {
      __int16 v6 = (llvm::raw_ostream *)llvm::errs(v6);
      int v9 = v6;
      uint64_t v10 = (_WORD *)*((void *)v6 + 4);
      if (*((void *)v6 + 3) - (void)v10 > 1uLL)
      {
        _WORD *v10 = 8227;
        int v11 = (unsigned char *)(*((void *)v6 + 4) + 2);
        *((void *)v6 + 4) = v11;
      }
      else
      {
        __int16 v6 = llvm::raw_ostream::write(v6, "# ", 2uLL);
        int v11 = (unsigned char *)*((void *)v9 + 4);
      }
      unsigned int v12 = *(const void **)(a1 + 8);
      if (v12)
      {
        __int16 v6 = (llvm::raw_ostream *)strlen(*(const char **)(a1 + 8));
        uint64_t v13 = v6;
        if ((unint64_t)v6 <= *((void *)v9 + 3) - (void)v11)
        {
          if (v6)
          {
            __int16 v6 = (llvm::raw_ostream *)memcpy(v11, v12, (size_t)v6);
            int v11 = (char *)v13 + *((void *)v9 + 4);
            *((void *)v9 + 4) = v11;
          }
        }
        else
        {
          __int16 v6 = llvm::raw_ostream::write(v9, (const char *)v12, (size_t)v6);
          int v11 = (unsigned char *)*((void *)v9 + 4);
        }
      }
      if ((unint64_t)v11 >= *((void *)v9 + 3))
      {
        __int16 v6 = llvm::raw_ostream::write(v9, 10);
      }
      else
      {
        *((void *)v9 + 4) = v11 + 1;
        unsigned char *v11 = 10;
      }
    }
    uint64_t v14 = *(void *)(a1 + 600);
    unsigned int v15 = (llvm::raw_ostream *)llvm::errs(v6);
    if (v14) {
      __int16 v6 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, llvm::raw_ostream *, void))(*(void *)v14 + 40))(v14, v15, 0);
    }
    else {
      llvm::MachineFunction::print(a3, v15, *(const llvm::SlotIndexes **)(a1 + 616));
    }
  }
  int v16 = (llvm::raw_ostream *)llvm::errs(v6);
  BOOL v17 = v16;
  unsigned int v18 = (void *)*((void *)v16 + 4);
  if (*((void *)v16 + 3) - (void)v18 > 0x15uLL)
  {
    qmemcpy(v18, "*** Bad machine code: ", 22);
    uint64_t v19 = (unsigned char *)(*((void *)v16 + 4) + 22);
    *((void *)v16 + 4) = v19;
    if (!a2) {
      goto LABEL_21;
    }
  }
  else
  {
    llvm::raw_ostream::write(v16, "*** Bad machine code: ", 0x16uLL);
    uint64_t v19 = (unsigned char *)*((void *)v17 + 4);
    if (!a2) {
      goto LABEL_21;
    }
  }
  size_t v20 = strlen(a2);
  size_t v21 = v20;
  if (v20 <= *((void *)v17 + 3) - (void)v19)
  {
    if (v20)
    {
      memcpy(v19, a2, v20);
      uint64_t v19 = (unsigned char *)(*((void *)v17 + 4) + v21);
      *((void *)v17 + 4) = v19;
    }
  }
  else
  {
    llvm::raw_ostream::write(v17, a2, v20);
    uint64_t v19 = (unsigned char *)*((void *)v17 + 4);
  }
LABEL_21:
  if (*((void *)v17 + 3) - (void)v19 > 4uLL)
  {
    v19[4] = 10;
    *(_DWORD *)uint64_t v19 = 707406368;
    unsigned int v22 = (void *)(*((void *)v17 + 4) + 5);
    *((void *)v17 + 4) = v22;
  }
  else
  {
    llvm::raw_ostream::write(v17, " ***\n", 5uLL);
    unsigned int v22 = (void *)*((void *)v17 + 4);
  }
  if (*((void *)v17 + 3) - (void)v22 > 0xEuLL)
  {
    qmemcpy(v22, "- function:    ", 15);
    *((void *)v17 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v17, "- function:    ", 0xFuLL);
  }
  uint64_t v23 = *a3;
  if ((*((unsigned char *)*a3 + 23) & 0x10) == 0) {
    goto LABEL_35;
  }
  uint64_t v24 = ***(void ***)v23;
  uint64_t v25 = *(void *)(v24 + 152);
  uint64_t v26 = *(unsigned int *)(v24 + 168);
  if (v26)
  {
    LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
    uint64_t v28 = (llvm::Value **)(v25 + 16 * v27);
    unint64_t v29 = *v28;
    if (*v28 == v23) {
      goto LABEL_33;
    }
    int v30 = 1;
    while (v29 != (llvm::Value *)-4096)
    {
      int v31 = v27 + v30++;
      uint64_t v27 = v31 & (v26 - 1);
      unint64_t v29 = *(llvm::Value **)(v25 + 16 * v27);
      if (v29 == v23)
      {
        uint64_t v28 = (llvm::Value **)(v25 + 16 * v27);
        goto LABEL_33;
      }
    }
  }
  uint64_t v28 = (llvm::Value **)(v25 + 16 * v26);
LABEL_33:
  unint64_t v32 = v28[1];
  size_t v35 = *(void *)v32;
  uint64_t v33 = (char *)v32 + 16;
  size_t v34 = v35;
  uint64_t result = (llvm::raw_ostream *)*((void *)v17 + 4);
  if (v35 > *((void *)v17 + 3) - (void)result)
  {
    llvm::raw_ostream::write(v17, v33, v34);
LABEL_35:
    uint64_t result = (llvm::raw_ostream *)*((void *)v17 + 4);
    goto LABEL_38;
  }
  if (v34)
  {
    memcpy(result, v33, v34);
    uint64_t result = (llvm::raw_ostream *)(*((void *)v17 + 4) + v34);
    *((void *)v17 + 4) = result;
  }
LABEL_38:
  if (*((llvm::raw_ostream **)v17 + 3) == result)
  {
    return llvm::raw_ostream::write(v17, "\n", 1uLL);
  }
  else
  {
    *(unsigned char *)uint64_t result = 10;
    ++*((void *)v17 + 4);
  }
  return result;
}

void *sub_1CC3B6B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t result = sub_1CC3B6B7C(a1 + 568, &v8);
  if (!*(unsigned char *)result)
  {
    *(unsigned char *)uint64_t result = 1;
    __int16 v6 = *(uint64_t **)(a2 + 88);
    unint64_t v5 = *(uint64_t **)(a2 + 96);
    while (v6 != v5)
    {
      uint64_t v7 = *v6++;
      uint64_t result = (void *)sub_1CC3B6B0C(a1, v7);
    }
  }
  return result;
}

void *sub_1CC3B6B7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = 0;
  char v4 = sub_1CC3B6C4C(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  unint64_t v5 = v7;
  if ((v4 & 1) == 0)
  {
    unint64_t v5 = sub_1CC3B6CE4(a1, a2, v7);
    *unint64_t v5 = *a2;
    *(_OWORD *)(v5 + 31) = 0u;
    *(_OWORD *)(v5 + 29) = 0u;
    *(_OWORD *)(v5 + 27) = 0u;
    *(_OWORD *)(v5 + 25) = 0u;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 37) = 0u;
    *(_OWORD *)(v5 + 39) = 0u;
    *(_OWORD *)(v5 + 33) = 0u;
    *(_OWORD *)(v5 + 35) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    v5[17] = v5 + 21;
    v5[18] = v5 + 21;
    *((_DWORD *)v5 + 38) = 8;
    v5[29] = v5 + 33;
    v5[30] = v5 + 33;
    *((_DWORD *)v5 + 62) = 8;
  }
  return v5 + 1;
}

uint64_t sub_1CC3B6C4C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    __int16 v6 = (void *)(a1 + 328 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        __int16 v6 = (void *)(a1 + 328 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        __int16 v6 = v10;
      }
    }
  }
  else
  {
    __int16 v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void *sub_1CC3B6CE4(uint64_t a1, uint64_t *a2, void *a3)
{
  int32x2_t v42 = a3;
  int v5 = *(_DWORD *)(a1 + 8);
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    int v7 = 2 * v6;
  }
  else
  {
    int v7 = *(_DWORD *)(a1 + 16);
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = *(void *)a1;
  unint64_t v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40) {
    unsigned int v13 = v12 + 1;
  }
  else {
    unsigned int v13 = 64;
  }
  *(_DWORD *)(a1 + 16) = v13;
  uint64_t v14 = operator new(328 * v13, (std::align_val_t)8uLL);
  *(void *)a1 = v14;
  if (v9)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      uint64_t v16 = 328 * v15;
      do
      {
        void *v14 = -4096;
        v14 += 41;
        v16 -= 328;
      }
      while (v16);
    }
    if (v6)
    {
      uint64_t v17 = v9 + 128;
      uint64_t v18 = 328 * v6;
      do
      {
        uint64_t v19 = *(void *)(v17 - 128);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          __int32 v43 = 0;
          sub_1CC3B6C4C(*(void *)a1, *(_DWORD *)(a1 + 16), v19, &v43);
          size_t v20 = v43;
          uint64_t *v43 = v19;
          *((unsigned char *)v20 + 8) = *(unsigned char *)(v17 - 120);
          *((_DWORD *)v20 + 8) = 0;
          v20[2] = 0;
          v20[3] = 0;
          v20[2] = *(void *)(v17 - 112);
          *(void *)(v17 - 112) = 0;
          *((_DWORD *)v20 + 6) = *(_DWORD *)(v17 - 104);
          *(_DWORD *)(v17 - 104) = 0;
          int v21 = *((_DWORD *)v20 + 7);
          *((_DWORD *)v20 + 7) = *(_DWORD *)(v17 - 100);
          *(_DWORD *)(v17 - 100) = v21;
          int v22 = *((_DWORD *)v20 + 8);
          *((_DWORD *)v20 + 8) = *(_DWORD *)(v17 - 96);
          *(_DWORD *)(v17 - 96) = v22;
          v20[5] = 0;
          v20[6] = 0;
          *((_DWORD *)v20 + 14) = 0;
          v20[5] = *(void *)(v17 - 88);
          *(void *)(v17 - 88) = 0;
          *((_DWORD *)v20 + 12) = *(_DWORD *)(v17 - 80);
          *(_DWORD *)(v17 - 80) = 0;
          int v23 = *((_DWORD *)v20 + 13);
          *((_DWORD *)v20 + 13) = *(_DWORD *)(v17 - 76);
          *(_DWORD *)(v17 - 76) = v23;
          int v24 = *((_DWORD *)v20 + 14);
          *((_DWORD *)v20 + 14) = *(_DWORD *)(v17 - 72);
          *(_DWORD *)(v17 - 72) = v24;
          char v20[8] = 0;
          v20[9] = 0;
          *((_DWORD *)v20 + 20) = 0;
          char v20[8] = *(void *)(v17 - 64);
          *(void *)(v17 - 64) = 0;
          *((_DWORD *)v20 + 18) = *(_DWORD *)(v17 - 56);
          *(_DWORD *)(v17 - 56) = 0;
          int v25 = *((_DWORD *)v20 + 19);
          *((_DWORD *)v20 + 19) = *(_DWORD *)(v17 - 52);
          *(_DWORD *)(v17 - 52) = v25;
          int v26 = *((_DWORD *)v20 + 20);
          *((_DWORD *)v20 + 20) = *(_DWORD *)(v17 - 48);
          *(_DWORD *)(v17 - 48) = v26;
          v20[11] = 0;
          v20[12] = 0;
          *((_DWORD *)v20 + 26) = 0;
          v20[11] = *(void *)(v17 - 40);
          *(void *)(v17 - 40) = 0;
          *((_DWORD *)v20 + 24) = *(_DWORD *)(v17 - 32);
          *(_DWORD *)(v17 - 32) = 0;
          int v27 = *((_DWORD *)v20 + 25);
          *((_DWORD *)v20 + 25) = *(_DWORD *)(v17 - 28);
          *(_DWORD *)(v17 - 28) = v27;
          int v28 = *((_DWORD *)v20 + 26);
          *((_DWORD *)v20 + 26) = *(_DWORD *)(v17 - 24);
          *(_DWORD *)(v17 - 24) = v28;
          v20[14] = 0;
          v20[15] = 0;
          *((_DWORD *)v20 + 32) = 0;
          v20[14] = *(void *)(v17 - 16);
          *(void *)(v17 - 16) = 0;
          *((_DWORD *)v20 + 30) = *(_DWORD *)(v17 - 8);
          *(_DWORD *)(v17 - 8) = 0;
          int v29 = *((_DWORD *)v20 + 31);
          *((_DWORD *)v20 + 31) = *(_DWORD *)(v17 - 4);
          *(_DWORD *)(v17 - 4) = v29;
          int v30 = *((_DWORD *)v20 + 32);
          *((_DWORD *)v20 + 32) = *(_DWORD *)v17;
          *(_DWORD *)uint64_t v17 = v30;
          int v31 = v20 + 21;
          v20[17] = (uint64_t)(v20 + 21);
          uint64_t v33 = *(void *)(v17 + 8);
          uint64_t v32 = *(void *)(v17 + 16);
          if (v32 == v33)
          {
            v20[18] = (uint64_t)v31;
            uint64_t v34 = *(unsigned int *)(v17 + 28);
            if (v34) {
              memmove(v31, *(const void **)(v17 + 16), 8 * v34);
            }
          }
          else
          {
            v20[18] = v32;
            *(void *)(v17 + 16) = v33;
          }
          v20[19] = *(void *)(v17 + 24);
          *((_DWORD *)v20 + 40) = *(_DWORD *)(v17 + 32);
          *(void *)(v17 + 24) = 8;
          *(_DWORD *)(v17 + 32) = 0;
          size_t v35 = v20 + 33;
          v20[29] = (uint64_t)(v20 + 33);
          int v36 = *(void **)(v17 + 104);
          uint64_t v37 = *(void **)(v17 + 112);
          if (v37 == v36)
          {
            v20[30] = (uint64_t)v35;
            uint64_t v38 = *(unsigned int *)(v17 + 124);
            int v36 = *(void **)(v17 + 112);
            if (v38)
            {
              memmove(v35, v36, 8 * v38);
              uint64_t v37 = *(void **)(v17 + 104);
              int v36 = *(void **)(v17 + 112);
            }
          }
          else
          {
            v20[30] = (uint64_t)v37;
            *(void *)(v17 + 112) = v36;
            uint64_t v37 = v36;
          }
          v20[31] = *(void *)(v17 + 120);
          *((_DWORD *)v20 + 64) = *(_DWORD *)(v17 + 128);
          *(void *)(v17 + 120) = 8;
          *(_DWORD *)(v17 + 128) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (v36 != v37) {
            free(v36);
          }
          unsigned int v39 = *(void **)(v17 + 16);
          if (v39 != *(void **)(v17 + 8)) {
            free(v39);
          }
          MEMORY[0x1D25D9CD0](*(void *)(v17 - 16), 4);
          MEMORY[0x1D25D9CD0](*(void *)(v17 - 40), 4);
          MEMORY[0x1D25D9CD0](*(void *)(v17 - 64), 4);
          MEMORY[0x1D25D9CD0](*(void *)(v17 - 88), 4);
          MEMORY[0x1D25D9CD0](*(void *)(v17 - 112), 8);
        }
        v17 += 328;
        v18 -= 328;
      }
      while (v18);
    }
    MEMORY[0x1D25D9CD0](v9, 8);
    uint64_t v14 = *(void **)a1;
    unsigned int v40 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v40 = *(_DWORD *)(a1 + 16);
    if (v40)
    {
      uint64_t v41 = 0;
      do
      {
        v14[v41] = -4096;
        v41 += 41;
      }
      while (41 * v40 != v41);
    }
  }
  sub_1CC3B6C4C((uint64_t)v14, v40, *a2, &v42);
  int v5 = *(_DWORD *)(a1 + 8);
  a3 = v42;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096) {
    --*(_DWORD *)(a1 + 12);
  }
  return a3;
}

void *sub_1CC3B7114(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  int v4 = *(int **)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  unsigned int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if (v7 <= 0x3F) {
    unsigned int v7 = 63;
  }
  unsigned int v8 = v7 + 1;
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(4 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBA85840((void *)a1, v4, &v4[v3]);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    return memset(result, 255, 4 * v10);
  }
  return result;
}

void sub_1CC3B71F4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  v515[4] = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 61)) {
    sub_1CC3B6180(a1, "Unexpected generic instruction in a Selected function", a2);
  }
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  uint64_t v6 = *(void *)(v4 + 8);
  BOOL v7 = (*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0;
  if (!v7)
  {
    if ((*(void *)(v4 + 8) & 0xC00) != 0x400) {
      goto LABEL_13;
    }
LABEL_8:
    if (v5)
    {
      unsigned int v8 = *(unsigned char **)(a2 + 32);
      uint64_t v9 = 32 * v5;
      while (*v8 != 4)
      {
        v8 += 32;
        v9 -= 32;
        if (!v9) {
          goto LABEL_12;
        }
      }
    }
    else
    {
LABEL_12:
      sub_1CC3B6180(v3, "Branch instruction is missing a basic block operand or isIndirectBranch property", a2);
    }
    goto LABEL_13;
  }
  if ((v6 & 0x400) != 0)
  {
LABEL_46:
    if ((v6 & 0x800) != 0) {
      goto LABEL_13;
    }
    unint64_t v32 = a2;
    while ((*(_WORD *)(v32 + 44) & 8) != 0)
    {
      unint64_t v32 = *(void *)(v32 + 8);
      if ((*(unsigned char *)(*(void *)(v32 + 16) + 9) & 8) != 0) {
        goto LABEL_13;
      }
    }
    goto LABEL_8;
  }
  unint64_t v31 = a2;
  while ((*(_WORD *)(v31 + 44) & 8) != 0)
  {
    unint64_t v31 = *(void *)(v31 + 8);
    if ((*(unsigned char *)(*(void *)(v31 + 16) + 9) & 4) != 0) {
      goto LABEL_46;
    }
  }
LABEL_13:
  int v513 = v515;
  uint64_t v514 = 0x400000000;
  if (v5 >= *(unsigned __int16 *)(v4 + 2)) {
    uint64_t v10 = *(unsigned __int16 *)(v4 + 2);
  }
  else {
    uint64_t v10 = v5;
  }
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 3;
    do
    {
      int v14 = *(unsigned __int8 *)(*(void *)(v4 + 40) + v13);
      if ((v14 - 6) <= 5)
      {
        uint64_t v15 = v3;
        uint64_t v16 = (v14 - 6);
        if (v16 + 1 > (unint64_t)v514) {
          unint64_t v17 = v16 + 1;
        }
        else {
          unint64_t v17 = v514;
        }
        sub_1CD42769C((uint64_t)&v513, v17);
        uint64_t v18 = *(void *)(a2 + 32) + v11;
        if (*(unsigned char *)v18)
        {
          uint64_t v3 = v15;
          sub_1CC3B6180(v15, "generic instruction must use register operands", a2);
        }
        else
        {
          int v19 = *(_DWORD *)(v18 + 4);
          if ((v19 & 0x80000000) == 0
            || (uint64_t v20 = *(void *)(v15 + 48), v21 = v19 & 0x7FFFFFFF, v21 >= *(_DWORD *)(v20 + 432))
            || (uint64_t v22 = *(void *)(*(void *)(v20 + 424) + 8 * v21), (v22 & 0xFFFFFFFFFFFFFFF9) == 0))
          {
            uint64_t v3 = v15;
            uint64_t v24 = v15;
            int v25 = "Generic instruction is missing a virtual register type";
            unsigned int v26 = v12;
            uint64_t v22 = 0;
            goto LABEL_33;
          }
          uint64_t v23 = *((void *)v513 + v16);
          if ((v23 & 0xFFFFFFFFFFFFFFF9) == 0)
          {
            *((void *)v513 + v16) = v22;
            uint64_t v3 = v15;
            goto LABEL_19;
          }
          uint64_t v3 = v15;
          if (v23 != v22)
          {
            uint64_t v24 = v15;
            int v25 = "Type mismatch in generic instruction";
            unsigned int v26 = v12;
LABEL_33:
            sub_1CC3B9D7C(v24, v25, (unint64_t *)v18, v26, v22);
          }
        }
      }
LABEL_19:
      ++v12;
      v11 += 32;
      v13 += 6;
    }
    while (v10 != v12);
  }
  unint64_t v27 = *(unsigned int *)(a2 + 40);
  if (v27)
  {
    uint64_t v28 = 0;
    for (unint64_t i = 0; i < v27; ++i)
    {
      uint64_t v30 = *(void *)(a2 + 32) + v28;
      if (!*(unsigned char *)v30 && (*(_DWORD *)(v30 + 4) - 1) <= 0x3FFFFFFE)
      {
        sub_1CC3B9D7C(v3, "Generic instruction cannot have physical register", (unint64_t *)v30, i, 0);
        unint64_t v27 = *(unsigned int *)(a2 + 40);
      }
      v28 += 32;
    }
  }
  else
  {
    unint64_t v27 = 0;
  }
  if (v27 < *(unsigned __int16 *)(v4 + 2)) {
    goto LABEL_750;
  }
  v512[0] = 0;
  v512[1] = 0;
  if (((*(uint64_t (**)(void, unint64_t, const char **))(**(void **)(v3 + 32) + 1008))(*(void *)(v3 + 32), a2, v512) & 1) == 0)sub_1CC3B6180(v3, v512[0], a2); {
  int v36 = *(unsigned __int16 **)(a2 + 16);
  }
  int v37 = *v36;
  uint64_t v38 = v3;
  if (v34 || !v33)
  {
    switch(*v36)
    {
      case 0xB2u:
      case 0xB3u:
        goto LABEL_67;
      case 0xB4u:
      case 0xB5u:
      case 0xB6u:
      case 0xB7u:
      case 0xB8u:
      case 0xB9u:
      case 0xBAu:
      case 0xBBu:
      case 0xBCu:
      case 0xBDu:
      case 0xBEu:
      case 0xBFu:
      case 0xC0u:
      case 0xC3u:
      case 0xC4u:
      case 0xC5u:
      case 0xC6u:
      case 0xC7u:
      case 0xCAu:
      case 0xCCu:
      case 0xCDu:
      case 0xCFu:
      case 0xD0u:
      case 0xD1u:
      case 0xD2u:
      case 0xD3u:
      case 0xD4u:
      case 0xD5u:
      case 0xD6u:
      case 0xD7u:
      case 0xD8u:
      case 0xD9u:
      case 0xDAu:
      case 0xDBu:
      case 0xDCu:
      case 0xDEu:
      case 0xE1u:
      case 0xE2u:
      case 0xE3u:
      case 0xE4u:
      case 0xE5u:
      case 0xE6u:
      case 0xE7u:
      case 0xE8u:
      case 0xE9u:
        goto LABEL_750;
      case 0xC1u:
        uint64_t v211 = *(void *)(v3 + 48);
        unsigned int v212 = *(_DWORD **)(a2 + 32);
        int v213 = v212[1];
        if (v213 < 0 && (uint64_t v214 = v213 & 0x7FFFFFFF, v214 < *(_DWORD *)(v211 + 432))) {
          unint64_t v215 = *(void *)(*(void *)(v211 + 424) + 8 * v214) & 0xFFFFFFFFFFFFFFF9;
        }
        else {
          unint64_t v215 = 0;
        }
        int v290 = v212[9];
        if (v290 < 0 && (uint64_t v291 = v290 & 0x7FFFFFFF, v291 < *(_DWORD *)(v211 + 432))) {
          unint64_t v292 = *(void *)(*(void *)(v211 + 424) + 8 * v291);
        }
        else {
          unint64_t v292 = 0;
        }
        int v293 = v212[17];
        if (v293 < 0 && (uint64_t v294 = v293 & 0x7FFFFFFF, v294 < *(_DWORD *)(v211 + 432))) {
          unint64_t v295 = *(void *)(*(void *)(v211 + 424) + 8 * v294);
        }
        else {
          unint64_t v295 = 0;
        }
        if (!v215 || (v292 & 0xFFFFFFFFFFFFFFF9) == 0 || (v295 & 0xFFFFFFFFFFFFFFF9) == 0) {
          goto LABEL_750;
        }
        if ((v292 & 4) != 0)
        {
          char v464 = 3;
          if ((v292 & 1) == 0) {
            char v464 = 19;
          }
          unint64_t v465 = v292 >> v464;
          uint64_t v296 = v3;
          unint64_t v292 = (v292 & 2) != 0
               ? (v292 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v465) | 2
               : v292 & 0x8000000000000000 | (8 * v465) | 1;
        }
        else
        {
          uint64_t v296 = v3;
        }
        if ((v292 & 0xFFFFFFFFFFFFFFF9) == 0 || (v292 & 6) != 2) {
          sub_1CC3B6180(v296, "gep first operand must be a pointer", a2);
        }
        if ((v295 & 4) != 0)
        {
          char v466 = 3;
          if ((v295 & 1) == 0) {
            char v466 = 19;
          }
          unint64_t v467 = v295 >> v466;
          if ((v295 & 2) != 0) {
            unint64_t v295 = (v295 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v467) | 2;
          }
          else {
            unint64_t v295 = v295 & 0x8000000000000000 | (8 * v467) | 1;
          }
        }
        if ((v295 & 0xFFFFFFFFFFFFFFF9) == 0 || (v295 & 6) != 2) {
          goto LABEL_750;
        }
        unint64_t v47 = "gep offset operand must not be a pointer";
        goto LABEL_66;
      case 0xC2u:
        uint64_t v190 = *(void *)(v3 + 48);
        unsigned int v191 = *(_DWORD **)(a2 + 32);
        int v192 = v191[1];
        if (v192 < 0 && (uint64_t v193 = v192 & 0x7FFFFFFF, v193 < *(_DWORD *)(v190 + 432))) {
          unint64_t v194 = *(void *)(*(void *)(v190 + 424) + 8 * v193);
        }
        else {
          unint64_t v194 = 0;
        }
        int v281 = v191[9];
        if (v281 < 0 && (uint64_t v282 = v281 & 0x7FFFFFFF, v282 < *(_DWORD *)(v190 + 432))) {
          unint64_t v283 = *(void *)(*(void *)(v190 + 424) + 8 * v282) & 0xFFFFFFFFFFFFFFF9;
        }
        else {
          unint64_t v283 = 0;
        }
        int v284 = v191[17];
        if (v284 < 0 && (uint64_t v285 = v284 & 0x7FFFFFFF, v285 < *(_DWORD *)(v190 + 432))) {
          unint64_t v286 = *(void *)(*(void *)(v190 + 424) + 8 * v285);
        }
        else {
          unint64_t v286 = 0;
        }
        if ((v194 & 0xFFFFFFFFFFFFFFF9) == 0 || !v283 || (v286 & 0xFFFFFFFFFFFFFFF9) == 0) {
          goto LABEL_750;
        }
        unint64_t v287 = v194;
        if ((v194 & 4) != 0)
        {
          char v288 = 3;
          if ((v194 & 1) == 0) {
            char v288 = 19;
          }
          unint64_t v289 = v194 >> v288;
          if ((v194 & 2) != 0) {
            unint64_t v287 = (v194 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v289) | 2;
          }
          else {
            unint64_t v287 = v194 & 0x8000000000000000 | (8 * v289) | 1;
          }
        }
        if ((v287 & 0xFFFFFFFFFFFFFFF9) == 0 || (v287 & 6) != 2) {
          sub_1CC3B6180(v3, "ptrmask result type must be a pointer", a2);
        }
        if ((v286 & 4) == 0)
        {
          if (v286) {
            goto LABEL_669;
          }
          goto LABEL_381;
        }
        if ((v286 & 2) != 0) {
LABEL_381:
        }
          sub_1CC3B6180(v3, "ptrmask mask type must be an integer", a2);
LABEL_669:
        uint64_t v300 = v3;
        unint64_t v225 = v194;
        unint64_t v299 = v286;
LABEL_670:
        sub_1CC3B9F4C(v300, (const char *)v225, v299, a2);
        goto LABEL_750;
      case 0xC8u:
      case 0xC9u:
        uint64_t v131 = *(void *)(a2 + 32);
        unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(a2);
        if (!NumExplicitOperands) {
          goto LABEL_750;
        }
        uint64_t v133 = *(void *)(v38 + 48);
        unsigned int v134 = *(_DWORD *)(v133 + 432);
        uint64_t v135 = *(void *)(v133 + 424);
        uint64_t v136 = 32 * NumExplicitOperands;
        __int16 v137 = (_DWORD *)(v131 + 4);
        while (1)
        {
          if (!*((unsigned char *)v137 - 4))
          {
            int v138 = *v137;
            if ((*v137 - 1) >= 0x3FFFFFFF)
            {
              if ((v138 & 0x80000000) == 0) {
                break;
              }
              uint64_t v139 = v138 & 0x7FFFFFFF;
              if (v139 >= v134 || (*(void *)(v135 + 8 * v139) & 1) == 0) {
                break;
              }
            }
          }
          v137 += 8;
          v136 -= 32;
          if (!v136) {
            goto LABEL_750;
          }
        }
        unint64_t v47 = "All register operands must have scalar types";
        goto LABEL_66;
      case 0xCBu:
        uint64_t v195 = *(void *)(a2 + 32);
        int v196 = *(_DWORD *)(v195 + 4);
        if ((v196 & 0x80000000) == 0
          || (uint64_t v197 = *(void *)(v3 + 48), v198 = v196 & 0x7FFFFFFF, v198 >= *(_DWORD *)(v197 + 432))
          || ((uint64_t v199 = *(void *)(*(void *)(v197 + 424) + 8 * v198),
               unint64_t v200 = v199 & 0xFFFFFFFFFFFFFFF9,
               uint64_t v201 = v199 & 6,
               v200)
            ? (BOOL v202 = v201 == 2)
            : (BOOL v202 = 0),
              !v202))
        {
          sub_1CC3B6180(v3, "G_BRJT src operand 0 must be a pointer type", a2);
          uint64_t v195 = *(void *)(a2 + 32);
        }
        if (*(unsigned char *)(v195 + 32) != 8)
        {
          sub_1CC3B6180(v3, "G_BRJT src operand 1 must be a jump table index", a2);
          uint64_t v195 = *(void *)(a2 + 32);
        }
        if (!*(unsigned char *)(v195 + 64))
        {
          int v416 = *(_DWORD *)(v195 + 68);
          if ((v416 & 0x80000000) == 0) {
            goto LABEL_750;
          }
          uint64_t v417 = *(void *)(v3 + 48);
          uint64_t v418 = v416 & 0x7FFFFFFF;
          if (v418 >= *(_DWORD *)(v417 + 432)) {
            goto LABEL_750;
          }
          uint64_t v419 = *(void *)(*(void *)(v417 + 424) + 8 * v418);
          unint64_t v420 = v419 & 0xFFFFFFFFFFFFFFF9;
          uint64_t v421 = v419 & 6;
          if (!v420 || v421 != 2) {
            goto LABEL_750;
          }
        }
        unint64_t v47 = "G_BRJT src operand 2 must be a scalar reg type";
        goto LABEL_66;
      case 0xCEu:
        uint64_t v216 = *(void *)(a2 + 32);
        if (*(unsigned char *)(v216 + 96) != 19)
        {
          unint64_t v47 = "Incorrect mask operand type for G_SHUFFLE_VECTOR";
          goto LABEL_66;
        }
        uint64_t v217 = *(void *)(v3 + 48);
        int v218 = *(_DWORD *)(v216 + 4);
        if (v218 < 0 && (uint64_t v219 = v218 & 0x7FFFFFFF, v219 < *(_DWORD *)(v217 + 432))) {
          unint64_t v220 = *(void *)(*(void *)(v217 + 424) + 8 * v219);
        }
        else {
          unint64_t v220 = 0;
        }
        int v373 = *(_DWORD *)(v216 + 36);
        if (v373 < 0 && (uint64_t v374 = v373 & 0x7FFFFFFF, v374 < *(_DWORD *)(v217 + 432))) {
          unint64_t v375 = *(void *)(*(void *)(v217 + 424) + 8 * v374);
        }
        else {
          unint64_t v375 = 0;
        }
        int v376 = *(_DWORD *)(v216 + 68);
        if (v376 < 0 && (uint64_t v377 = v376 & 0x7FFFFFFF, v377 < *(_DWORD *)(v217 + 432))) {
          uint64_t v378 = *(void *)(*(void *)(v217 + 424) + 8 * v377);
        }
        else {
          uint64_t v378 = 0;
        }
        if (v375 != v378) {
          sub_1CC3B6180(v3, "Source operands must be the same type", a2);
        }
        if ((v375 & 0xFFFFFFFFFFFFFFF9) != 0) {
          int v379 = (v375 >> 2) & 1;
        }
        else {
          int v379 = 0;
        }
        unint64_t v380 = v375;
        if (v379 == 1)
        {
          char v381 = 3;
          if ((v375 & 1) == 0) {
            char v381 = 19;
          }
          unint64_t v382 = v375 >> v381;
          if ((v375 & 2) != 0) {
            unint64_t v380 = (v375 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v382) | 2;
          }
          else {
            unint64_t v380 = v375 & 0x8000000000000000 | (8 * v382) | 1;
          }
        }
        if ((v220 & 0xFFFFFFFFFFFFFFF9) != 0) {
          int v383 = (v220 >> 2) & 1;
        }
        else {
          int v383 = 0;
        }
        unint64_t v384 = v220;
        if (v383 == 1)
        {
          char v385 = 3;
          if ((v220 & 1) == 0) {
            char v385 = 19;
          }
          unint64_t v386 = v220 >> v385;
          if ((v220 & 2) != 0) {
            unint64_t v384 = (v220 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v386) | 2;
          }
          else {
            unint64_t v384 = v220 & 0x8000000000000000 | (8 * v386) | 1;
          }
        }
        if (v380 != v384) {
          sub_1CC3B6180(v3, "G_SHUFFLE_VECTOR cannot change element type", a2);
        }
        if (v379)
        {
          uint64_t v387 = 0x800000000000000;
          if ((v375 & 2) == 0) {
            uint64_t v387 = 0x8000000000000;
          }
          if ((v387 & v375) != 0) {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v35);
          }
          signed int v388 = (v375 >> 2) & 0x1FFFE;
        }
        else
        {
          signed int v388 = 2;
        }
        if (v383)
        {
          uint64_t v439 = 0x800000000000000;
          if ((v220 & 2) == 0) {
            uint64_t v439 = 0x8000000000000;
          }
          if ((v439 & v220) != 0) {
            llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v35);
          }
          int v440 = (unsigned __int16)(v220 >> 3);
        }
        else
        {
          int v440 = 1;
        }
        int v441 = *(signed int **)(v216 + 112);
        uint64_t v442 = *(void *)(v216 + 120);
        if (v440 != v442) {
          sub_1CC3B6180(v38, "Wrong result type for shufflemask", a2);
        }
        if (v442)
        {
          uint64_t v443 = 4 * v442;
          do
          {
            if (*v441 >= v388) {
              sub_1CC3B6180(v38, "Out of bounds shuffle index", a2);
            }
            ++v441;
            v443 -= 4;
          }
          while (v443);
        }
        goto LABEL_750;
      case 0xDDu:
        goto LABEL_148;
      case 0xDFu:
        uint64_t v203 = *(void *)(a2 + 32);
        if (*(unsigned char *)(v203 + 32) != 8)
        {
          sub_1CC3B6180(v3, "G_JUMP_TABLE source operand must be a jump table index", a2);
          uint64_t v203 = *(void *)(a2 + 32);
        }
        int v204 = *(_DWORD *)(v203 + 4);
        if (v204 < 0)
        {
          uint64_t v205 = *(void *)(v3 + 48);
          uint64_t v206 = v204 & 0x7FFFFFFF;
          if (v206 < *(_DWORD *)(v205 + 432))
          {
            uint64_t v207 = *(void *)(*(void *)(v205 + 424) + 8 * v206);
            unint64_t v208 = v207 & 0xFFFFFFFFFFFFFFF9;
            uint64_t v209 = v207 & 6;
            if (v208 && v209 == 2) {
              goto LABEL_750;
            }
          }
        }
        unint64_t v47 = "G_JUMP_TABLE dest operand must have a pointer type";
        goto LABEL_66;
      case 0xE0u:
        uint64_t v180 = *(void *)(a2 + 32);
        uint64_t v48 = v3;
        if (*(unsigned char *)v180) {
          goto LABEL_262;
        }
        int v181 = *(_DWORD *)(v180 + 4);
        if ((v181 & 0x80000000) == 0) {
          goto LABEL_262;
        }
        uint64_t v182 = *(void *)(v3 + 48);
        uint64_t v183 = v181 & 0x7FFFFFFF;
        unsigned int v184 = *(_DWORD *)(v182 + 432);
        if (v183 >= v184) {
          goto LABEL_262;
        }
        uint64_t v185 = *(void *)(v182 + 424);
        uint64_t v186 = *(void *)(v185 + 8 * v183);
        unint64_t v187 = v186 & 0xFFFFFFFFFFFFFFF9;
        uint64_t v188 = v186 & 6;
        if (!v187 || v188 != 2)
        {
LABEL_262:
          unint64_t v47 = "dst operand 0 must be a pointer type";
          goto LABEL_749;
        }
        if (*(unsigned char *)(v180 + 32)
          || (int v497 = *(_DWORD *)(v180 + 36), (v497 & 0x80000000) == 0)
          || (uint64_t v498 = v497 & 0x7FFFFFFF, v498 >= v184)
          || (*(void *)(v185 + 8 * v498) & 1) == 0)
        {
          unint64_t v47 = "src operand 1 must be a scalar reg type";
          goto LABEL_749;
        }
        if (*(unsigned char *)(v180 + 64) == 1) {
          goto LABEL_750;
        }
        unint64_t v47 = "src operand 2 must be an immediate type";
        goto LABEL_66;
      case 0xEAu:
      case 0xEBu:
      case 0xECu:
        unint64_t v89 = *(void *)(a2 + 48);
        if (v89 < 8) {
          goto LABEL_542;
        }
        if ((v89 & 7) != 0)
        {
          if ((*(void *)(a2 + 48) & 7) == 3)
          {
            unint64_t v90 = v89 & 0xFFFFFFFFFFFFFFF8;
            if ((v89 & 0xFFFFFFFFFFFFFFF8) != 0 && *(_DWORD *)v90 == 2)
            {
              uint64_t v91 = *(void *)(v90 + 8);
              if ((*(_WORD *)(v91 + 32) & 3) == 2)
              {
                uint64_t v92 = *(void *)(v90 + 16);
                if ((*(_WORD *)(v92 + 32) & 3) == 1)
                {
                  uint64_t v94 = *(void *)(v91 + 24);
                  int v93 = (unint64_t *)(v91 + 24);
                  if ((v94 & 0xFFFFFFFFFFFFFFF9) != 0)
                  {
                    unint64_t v96 = (unint64_t)(sub_1CB8F1DC4(v93) + 7) >> 3;
                    if (v95 == 1) {
                    uint64_t v92 = *(void *)(v90 + 16);
                    }
                  }
                  else
                  {
                    unint64_t v96 = -1;
                  }
                  uint64_t v98 = *(void *)(v92 + 24);
                  unsigned int v97 = (unint64_t *)(v92 + 24);
                  if ((v98 & 0xFFFFFFFFFFFFFFF9) != 0)
                  {
                    unint64_t v100 = (unint64_t)(sub_1CB8F1DC4(v97) + 7) >> 3;
                    if (v99 == 1) {
                  }
                    }
                  else
                  {
                    unint64_t v100 = -1;
                  }
                  if (v96 != v100) {
                    sub_1CC3B6180(v38, "inconsistent memory operand sizes", a2);
                  }
                  uint64_t v101 = *(void *)(v38 + 48);
                  uint64_t v102 = *(void *)(a2 + 32);
                  int v103 = *(_DWORD *)(v102 + 4);
                  if (v103 < 0 && (uint64_t v104 = v103 & 0x7FFFFFFF, v104 < *(_DWORD *)(v101 + 432))) {
                    unint64_t v105 = *(void *)(*(void *)(v101 + 424) + 8 * v104);
                  }
                  else {
                    unint64_t v105 = 0;
                  }
                  int v486 = *(_DWORD *)(v102 + 36);
                  if (v486 < 0 && (uint64_t v487 = v486 & 0x7FFFFFFF, v487 < *(_DWORD *)(v101 + 432))) {
                    unint64_t v488 = *(void *)(*(void *)(v101 + 424) + 8 * v487);
                  }
                  else {
                    unint64_t v488 = 0;
                  }
                  if ((v105 & 0xFFFFFFFFFFFFFFF9) == 0
                    || (v105 & 2) == 0
                    || (v105 & 4) != 0
                    || (v488 & 0xFFFFFFFFFFFFFFF9) == 0
                    || (v488 & 2) == 0
                    || (v488 & 4) != 0)
                  {
                    unint64_t v47 = "memory instruction operand must be a pointer";
                    goto LABEL_66;
                  }
                  if (((v105 >> 19) & 0xFFFFFF) != *(_DWORD *)(*(void *)(v90 + 8) + 16)) {
                    sub_1CC3B6180(v38, "inconsistent store address space", a2);
                  }
                  if (((v488 >> 19) & 0xFFFFFF) != *(_DWORD *)(*(void *)(v90 + 16) + 16)) {
                    sub_1CC3B6180(v38, "inconsistent load address space", a2);
                  }
                  if (v37 != 235)
                  {
                    uint64_t v489 = *(void *)(a2 + 32);
                    if (*(unsigned char *)(v489 + 96) != 1 || *(void *)(v489 + 112) >= 2uLL)
                    {
                      unint64_t v47 = "'tail' flag (operand 3) must be an immediate 0 or 1";
                      goto LABEL_66;
                    }
                  }
                  goto LABEL_750;
                }
              }
              unint64_t v47 = "wrong memory operand types";
LABEL_543:
              uint64_t v48 = v3;
              goto LABEL_749;
            }
          }
        }
        else
        {
          *(void *)(a2 + 48) = v89 & 0xFFFFFFFFFFFFFFF8;
        }
LABEL_542:
        unint64_t v47 = "memcpy/memmove must have 2 memory operands";
        goto LABEL_543;
      case 0xEDu:
      case 0xEEu:
        BOOL v141 = (_DWORD *)(a2 + 48);
        unint64_t v140 = *(void *)(a2 + 48);
        if (v140 < 8)
        {
          BOOL v141 = 0;
          BOOL v142 = 0;
        }
        else if ((v140 & 7) != 0)
        {
          BOOL v142 = 0;
          BOOL v141 = 0;
          if ((*(void *)(a2 + 48) & 7) == 3)
          {
            uint64_t v143 = (_DWORD *)(v140 & 0xFFFFFFFFFFFFFFF8);
            if (v143)
            {
              BOOL v142 = *v143 == 1;
              BOOL v141 = v143 + 2;
            }
          }
        }
        else
        {
          *(void *)BOOL v141 = v140 & 0xFFFFFFFFFFFFFFF8;
          BOOL v142 = 1;
        }
        if (v37 == 237) {
          uint64_t v400 = "memset";
        }
        else {
          uint64_t v400 = "bzero";
        }
        if (v37 == 237) {
          size_t v401 = 6;
        }
        else {
          size_t v401 = 5;
        }
        char v507 = v401;
        memcpy(&__dst, v400, v401);
        *(unsigned char *)((unint64_t)&__dst | v401) = 0;
        if (!v142)
        {
          p_dst = __dst;
          if (v507 >= 0) {
            p_dst = (const char *)&__dst;
          }
          uint64_t v412 = v507 & 0x7F;
          if (v507 < 0) {
            uint64_t v412 = v506;
          }
          __int16 v511 = 773;
          unint64_t v508 = (unint64_t)p_dst;
          uint64_t v509 = v412;
          uint64_t v410 = " must have 1 memory operand";
          goto LABEL_634;
        }
        if ((*(_WORD *)(*(void *)v141 + 32) & 3) != 2)
        {
          unsigned int v413 = (const char *)&__dst;
          if (v507 < 0) {
            unsigned int v413 = __dst;
          }
          uint64_t v414 = v507 & 0x7F;
          if (v507 < 0) {
            uint64_t v414 = v506;
          }
          __int16 v511 = 773;
          unint64_t v508 = (unint64_t)v413;
          uint64_t v509 = v414;
          uint64_t v410 = " memory operand must be a store";
          goto LABEL_634;
        }
        uint64_t v402 = *(void *)(a2 + 32);
        int v403 = *(_DWORD *)(v402 + 4);
        if ((v403 & 0x80000000) == 0
          || (v404 = *(void *)(v38 + 48), uint64_t v405 = v403 & 0x7FFFFFFF, v405 >= *(_DWORD *)(v404 + 432))
          || ((unint64_t v406 = *(void *)(*(void *)(v404 + 424) + 8 * v405), (v406 & 0xFFFFFFFFFFFFFFF9) != 0)
            ? (BOOL v407 = (v406 & 6) == 2)
            : (BOOL v407 = 0),
              !v407))
        {
          uint64_t v408 = (const char *)&__dst;
          if (v507 < 0) {
            uint64_t v408 = __dst;
          }
          uint64_t v409 = v507 & 0x7F;
          if (v507 < 0) {
            uint64_t v409 = v506;
          }
          __int16 v511 = 773;
          unint64_t v508 = (unint64_t)v408;
          uint64_t v509 = v409;
          uint64_t v410 = " operand must be a pointer";
LABEL_634:
          p_p = v410;
          sub_1CC3B9EDC(v38, (llvm::Twine *)&v508, a2);
          goto LABEL_635;
        }
        char v490 = 35;
        if ((v406 & 4) == 0) {
          char v490 = 19;
        }
        if (((v406 >> v490) & 0xFFFFFF) != *(_DWORD *)(*(void *)v141 + 16))
        {
          uint64_t v491 = &__dst;
          if (v507 < 0) {
            uint64_t v491 = __dst;
          }
          uint64_t v492 = v507 & 0x7F;
          if (v507 < 0) {
            uint64_t v492 = v506;
          }
          __int16 v504 = 773;
          *(void *)&long long __p = v491;
          *((void *)&__p + 1) = v492;
          v503 = " address space";
          unint64_t v508 = (unint64_t)"inconsistent ";
          p_p = (const char *)&__p;
          __int16 v511 = 515;
          sub_1CC3B9EDC(v38, (llvm::Twine *)&v508, a2);
          uint64_t v402 = *(void *)(a2 + 32);
        }
        if (*(unsigned char *)(v402 + 32 * (*(_DWORD *)(a2 + 40) - 1)) != 1
          || *(void *)(v402 + 32 * (*(_DWORD *)(a2 + 40) - 1) + 16) >= 2uLL)
        {
          sub_1CC3B6180(v38, "'tail' flag (last operand) must be an immediate 0 or 1", a2);
        }
LABEL_635:
        if ((v507 & 0x80000000) == 0) {
          goto LABEL_750;
        }
        v415 = (char *)__dst;
        break;
      case 0xEFu:
      case 0xF0u:
        uint64_t v126 = *(void *)(v3 + 48);
        unsigned int v127 = *(_DWORD **)(a2 + 32);
        int v128 = v127[1];
        if (v128 < 0 && (uint64_t v129 = v128 & 0x7FFFFFFF, v129 < *(_DWORD *)(v126 + 432))) {
          uint64_t v130 = *(void *)(*(void *)(v126 + 424) + 8 * v129) & 1;
        }
        else {
          uint64_t v130 = 0;
        }
        int v167 = v127[9];
        if (v167 < 0 && (uint64_t v168 = v167 & 0x7FFFFFFF, v168 < *(_DWORD *)(v126 + 432))) {
          uint64_t v169 = *(void *)(*(void *)(v126 + 424) + 8 * v168) & 1;
        }
        else {
          uint64_t v169 = 0;
        }
        int v170 = v127[17];
        if (v170 < 0 && (uint64_t v171 = v170 & 0x7FFFFFFF, v171 < *(_DWORD *)(v126 + 432))) {
          uint64_t v172 = *(void *)(*(void *)(v126 + 424) + 8 * v171);
        }
        else {
          uint64_t v172 = 0;
        }
        if (!v130) {
          sub_1CC3B6180(v38, "Vector reduction requires a scalar destination type", a2);
        }
        if (!v169) {
          sub_1CC3B6180(v38, "Sequential FADD/FMUL vector reduction requires a scalar 1st operand", a2);
        }
        if ((v172 & 0xFFFFFFFFFFFFFFF9) != 0 && (v172 & 4) != 0) {
          goto LABEL_750;
        }
        unint64_t v47 = "Sequential FADD/FMUL vector reduction must have a vector 2nd operand";
        goto LABEL_66;
      case 0xF1u:
      case 0xF2u:
      case 0xF3u:
      case 0xF4u:
      case 0xF5u:
      case 0xF6u:
      case 0xF7u:
      case 0xF8u:
      case 0xF9u:
      case 0xFAu:
      case 0xFBu:
      case 0xFCu:
      case 0xFDu:
        int v44 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        if (v44 < 0)
        {
          uint64_t v45 = *(void *)(v3 + 48);
          uint64_t v46 = v44 & 0x7FFFFFFF;
          if v46 < *(_DWORD *)(v45 + 432) && (*(void *)(*(void *)(v45 + 424) + 8 * v46)) {
            goto LABEL_750;
          }
        }
        unint64_t v47 = "Vector reduction requires a scalar destination type";
        goto LABEL_66;
      case 0xFEu:
      case 0xFFu:
        int v144 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
        if ((v144 & 0x80000000) == 0) {
          goto LABEL_750;
        }
        uint64_t v145 = *(void *)(v3 + 48);
        uint64_t v146 = v144 & 0x7FFFFFFF;
        if (v146 >= *(_DWORD *)(v145 + 432)) {
          goto LABEL_750;
        }
        uint64_t v147 = *(void *)(*(void *)(v145 + 424) + 8 * v146);
        unint64_t v148 = v147 & 0xFFFFFFFFFFFFFFF9;
        uint64_t v149 = v147 & 4;
        if (!v148 || v149 == 0) {
          goto LABEL_750;
        }
        unint64_t v47 = "Bitfield extraction is not supported on vectors";
        goto LABEL_66;
      default:
        JUMPOUT(0);
    }
LABEL_667:
    operator delete(v415);
    goto LABEL_750;
  }
  switch(*v36)
  {
    case 0x45u:
      uint64_t v247 = *(void *)(a2 + 32);
      int v248 = *(_DWORD *)(v247 + 4);
      if ((v248 & 0x80000000) == 0) {
        goto LABEL_357;
      }
      uint64_t v249 = *(void *)(v3 + 48);
      uint64_t v250 = v248 & 0x7FFFFFFF;
      unsigned int v251 = *(_DWORD *)(v249 + 432);
      if (v250 >= v251) {
        goto LABEL_357;
      }
      uint64_t v252 = *(void *)(v249 + 424);
      uint64_t v253 = *(void *)(v252 + 8 * v250);
      if ((v253 & 0xFFFFFFFFFFFFFFF9) == 0) {
        goto LABEL_357;
      }
      uint64_t v254 = *(unsigned int *)(a2 + 40);
      if (v254 != 1)
      {
        uint64_t v255 = 32 * v254 - 32;
        unint64_t v256 = (_DWORD *)(v247 + 36);
        do
        {
          if (!*((unsigned char *)v256 - 4))
          {
            if ((*v256 & 0x80000000) == 0
              || (uint64_t v257 = *v256 & 0x7FFFFFFF, v257 >= v251)
              || ((uint64_t v258 = *(void *)(v252 + 8 * v257), v258 == v253)
                ? (BOOL v259 = (v258 & 0xFFFFFFFFFFFFFFF9) == 0)
                : (BOOL v259 = 1),
                  v259))
            {
LABEL_357:
              unint64_t v47 = "Generic Instruction G_PHI has operands with incompatible/missing types";
              goto LABEL_66;
            }
          }
          v256 += 8;
          v255 -= 32;
        }
        while (v255);
      }
      goto LABEL_750;
    case 0x46u:
    case 0x47u:
    case 0x48u:
    case 0x53u:
    case 0x54u:
    case 0x55u:
    case 0x56u:
    case 0x57u:
    case 0x58u:
    case 0x59u:
    case 0x5Du:
    case 0x5Eu:
    case 0x5Fu:
    case 0x61u:
    case 0x62u:
    case 0x63u:
    case 0x64u:
    case 0x65u:
    case 0x66u:
    case 0x67u:
    case 0x68u:
    case 0x69u:
    case 0x6Au:
    case 0x6Bu:
    case 0x6Cu:
    case 0x6Du:
    case 0x6Eu:
    case 0x6Fu:
    case 0x70u:
    case 0x71u:
    case 0x72u:
    case 0x73u:
    case 0x7Au:
    case 0x7Bu:
    case 0x82u:
    case 0x83u:
      goto LABEL_750;
    case 0x49u:
      uint64_t v245 = *(void *)(a2 + 32);
      if (*(unsigned char *)(v245 + 32))
      {
        unint64_t v47 = "extract source must be a register";
        goto LABEL_66;
      }
      if (*(unsigned char *)(v245 + 64) != 1)
      {
        unint64_t v47 = "extract offset must be a constant";
        goto LABEL_748;
      }
      int v423 = *(_DWORD *)(v245 + 4);
      if (v423 < 0
        && (v424 = *(void *)(v3 + 48), uint64_t v425 = v423 & 0x7FFFFFFF, v425 < *(_DWORD *)(v424 + 432)))
      {
        v426 = *(const char **)(*(void *)(v424 + 424) + 8 * v425);
      }
      else
      {
        v426 = 0;
      }
      unint64_t v508 = (unint64_t)v426;
      unsigned int v469 = sub_1CB8F1DC4(&v508);
      if (v468 == 1) {
      int v470 = *(_DWORD *)(v245 + 36);
      }
      if (v470 < 0
        && (v471 = *(void *)(v3 + 48), uint64_t v472 = v470 & 0x7FFFFFFF, v472 < *(_DWORD *)(v471 + 432)))
      {
        unint64_t v473 = *(const char **)(*(void *)(v471 + 424) + 8 * v472);
      }
      else
      {
        unint64_t v473 = 0;
      }
      unint64_t v508 = (unint64_t)v473;
      unsigned int v475 = sub_1CB8F1DC4(&v508);
      if (v474 == 1) {
      if (v475 == v469)
      }
        sub_1CC3B6180(v3, "extract source must be larger than result", a2);
      if (*(void *)(v245 + 80) + v469 <= (uint64_t)v475) {
        goto LABEL_750;
      }
      unint64_t v47 = "extract reads past end of register";
      goto LABEL_66;
    case 0x4Au:
      uint64_t v265 = *(void *)(v3 + 48);
      uint64_t v266 = *(void *)(a2 + 32);
      int v267 = *(_DWORD *)(v266 + 4);
      if (v267 < 0 && (uint64_t v268 = v267 & 0x7FFFFFFF, v268 < *(_DWORD *)(v265 + 432))) {
        int v269 = *(const char **)(*(void *)(v265 + 424) + 8 * v268);
      }
      else {
        int v269 = 0;
      }
      unint64_t v508 = (unint64_t)v269;
      int v339 = *(_DWORD *)(a2 + 40);
      int v340 = *(_DWORD *)(v266 + 32 * (v339 - 1) + 4);
      if (v340 < 0 && (uint64_t v341 = v340 & 0x7FFFFFFF, v341 < *(_DWORD *)(v265 + 432))) {
        uint64_t v342 = *(void *)(*(void *)(v265 + 424) + 8 * v341);
      }
      else {
        uint64_t v342 = 0;
      }
      *(void *)&long long __p = v342;
      if (v339 != 1)
      {
        unint64_t v343 = 0;
        uint64_t v344 = 4;
        do
        {
          int v345 = *(_DWORD *)(*(void *)(a2 + 32) + v344);
          if (v345 < 0
            && (uint64_t v346 = *(void *)(v3 + 48), v347 = v345 & 0x7FFFFFFF, v347 < *(_DWORD *)(v346 + 432)))
          {
            v348 = *(const char **)(*(void *)(v346 + 424) + 8 * v347);
          }
          else
          {
            v348 = 0;
          }
          if (v348 != v269)
          {
            sub_1CC3B6180(v3, "G_UNMERGE_VALUES destination types do not match", a2);
            int v339 = *(_DWORD *)(a2 + 40);
          }
          ++v343;
          v344 += 32;
        }
        while (v343 < (v339 - 1));
      }
      uint64_t v349 = sub_1CB8F1DC4((unint64_t *)&__p);
      int v351 = v350;
      if (v349 == sub_1CB8F1DC4(&v508) * (*(_DWORD *)(a2 + 40) - 1) && v351 == v352) {
        goto LABEL_750;
      }
      unint64_t v47 = "G_UNMERGE_VALUES source operand does not cover dest operands";
      goto LABEL_66;
    case 0x4Bu:
      uint64_t v246 = *(void *)(a2 + 32);
      if (*(unsigned char *)(v246 + 64))
      {
        unint64_t v47 = "insert source must be a register";
        goto LABEL_66;
      }
      if (*(unsigned char *)(v246 + 96) != 1)
      {
        unint64_t v47 = "insert offset must be a constant";
        goto LABEL_748;
      }
      int v427 = *(_DWORD *)(v246 + 4);
      if (v427 < 0
        && (uint64_t v428 = *(void *)(v3 + 48), v429 = v427 & 0x7FFFFFFF, v429 < *(_DWORD *)(v428 + 432)))
      {
        v430 = *(const char **)(*(void *)(v428 + 424) + 8 * v429);
      }
      else
      {
        v430 = 0;
      }
      unint64_t v508 = (unint64_t)v430;
      unsigned int v477 = sub_1CB8F1DC4(&v508);
      if (v476 == 1) {
      int v478 = *(_DWORD *)(v246 + 68);
      }
      if (v478 < 0
        && (v479 = *(void *)(v3 + 48), uint64_t v480 = v478 & 0x7FFFFFFF, v480 < *(_DWORD *)(v479 + 432)))
      {
        uint64_t v481 = *(const char **)(*(void *)(v479 + 424) + 8 * v480);
      }
      else
      {
        uint64_t v481 = 0;
      }
      unint64_t v508 = (unint64_t)v481;
      unsigned int v483 = sub_1CB8F1DC4(&v508);
      if (v482 == 1) {
      if (v477 <= v483)
      }
        sub_1CC3B6180(v3, "inserted size must be smaller than total register", a2);
      if (*(void *)(v246 + 112) + v483 <= (uint64_t)v477) {
        goto LABEL_750;
      }
      unint64_t v47 = "insert writes past end of register";
      goto LABEL_66;
    case 0x4Cu:
      uint64_t v235 = *(void *)(v3 + 48);
      uint64_t v236 = *(void *)(a2 + 32);
      int v237 = *(_DWORD *)(v236 + 4);
      if (v237 < 0 && (uint64_t v238 = v237 & 0x7FFFFFFF, v238 < *(_DWORD *)(v235 + 432))) {
        unint64_t v239 = *(void *)(*(void *)(v235 + 424) + 8 * v238);
      }
      else {
        unint64_t v239 = 0;
      }
      unint64_t v508 = v239;
      int v304 = *(_DWORD *)(v236 + 36);
      if (v304 < 0 && (uint64_t v305 = v304 & 0x7FFFFFFF, v305 < *(_DWORD *)(v235 + 432))) {
        uint64_t v306 = *(void *)(*(void *)(v235 + 424) + 8 * v305);
      }
      else {
        uint64_t v306 = 0;
      }
      *(void *)&long long __p = v306;
      if ((v239 & 0xFFFFFFFFFFFFFFF9) != 0 && (v239 & 4) != 0
        || (v306 & 0xFFFFFFFFFFFFFFF9) != 0 && (v306 & 4) != 0)
      {
        sub_1CC3B6180(v3, "G_MERGE_VALUES cannot operate on vectors", a2);
      }
      int v307 = *(_DWORD *)(a2 + 40);
      uint64_t v308 = sub_1CB8F1DC4(&v508);
      int v310 = v309;
      if (v308 != sub_1CB8F1DC4((unint64_t *)&__p) * (v307 - 1) || v310 != v311) {
        sub_1CC3B6180(v3, "G_MERGE_VALUES result size is inconsistent", a2);
      }
      if (v307 != 2)
      {
        for (unsigned int j = 2; j != v307; ++j)
        {
          int v313 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * j + 4);
          if (v313 < 0
            && (uint64_t v314 = *(void *)(v3 + 48), v315 = v313 & 0x7FFFFFFF, v315 < *(_DWORD *)(v314 + 432)))
          {
            uint64_t v316 = *(void *)(*(void *)(v314 + 424) + 8 * v315);
          }
          else
          {
            uint64_t v316 = 0;
          }
          if (v316 != (void)__p) {
            sub_1CC3B6180(v3, "G_MERGE_VALUES source types do not match", a2);
          }
        }
      }
      goto LABEL_750;
    case 0x4Du:
      uint64_t v228 = *(void *)(v3 + 48);
      uint64_t v229 = *(void *)(a2 + 32);
      int v230 = *(_DWORD *)(v229 + 4);
      if (v230 < 0 && (uint64_t v231 = v230 & 0x7FFFFFFF, v231 < *(_DWORD *)(v228 + 432))) {
        unint64_t v232 = *(void *)(*(void *)(v228 + 424) + 8 * v231);
      }
      else {
        unint64_t v232 = 0;
      }
      int v301 = *(_DWORD *)(v229 + 36);
      if (v301 < 0 && (uint64_t v302 = v301 & 0x7FFFFFFF, v302 < *(_DWORD *)(v228 + 432))) {
        uint64_t v303 = *(void *)(*(void *)(v228 + 424) + 8 * v302);
      }
      else {
        uint64_t v303 = 0;
      }
      if ((v232 & 0xFFFFFFFFFFFFFFF9) == 0
        || (v232 & 4) == 0
        || (v303 & 0xFFFFFFFFFFFFFFF9) != 0 && (v303 & 4) != 0)
      {
        unint64_t v47 = "G_BUILD_VECTOR must produce a vector from scalar operands";
        goto LABEL_748;
      }
      char v444 = 3;
      if ((v232 & 1) == 0) {
        char v444 = 19;
      }
      unint64_t v445 = v232 >> v444;
      if ((v232 & 2) != 0) {
        unint64_t v446 = (v232 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v445) | 2;
      }
      else {
        unint64_t v446 = v232 & 0x8000000000000000 | (8 * v445) | 1;
      }
      if (v446 != v303) {
        sub_1CC3B6180(v3, "G_BUILD_VECTOR result element type must match source type", a2);
      }
      uint64_t v447 = 0x800000000000000;
      if ((v232 & 2) == 0) {
        uint64_t v447 = 0x8000000000000;
      }
      if ((v447 & v232) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v35);
      }
      unsigned int v448 = *(_DWORD *)(a2 + 40);
      if (v448 - 1 != (unsigned __int16)(v232 >> 3))
      {
        sub_1CC3B6180(v3, "G_BUILD_VECTOR must have an operand for each elemement", a2);
        unsigned int v448 = *(_DWORD *)(a2 + 40);
      }
      if (v448 != 2)
      {
        uint64_t v449 = 32 * v448 - 64;
        v450 = (_DWORD *)(*(void *)(a2 + 32) + 68);
        do
        {
          uint64_t v451 = *(void *)(v3 + 48);
          int v452 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
          if (v452 < 0 && (uint64_t v453 = v452 & 0x7FFFFFFF, v453 < *(_DWORD *)(v451 + 432))) {
            uint64_t v454 = *(void *)(*(void *)(v451 + 424) + 8 * v453);
          }
          else {
            uint64_t v454 = 0;
          }
          if ((*v450 & 0x80000000) != 0 && (uint64_t v455 = *v450 & 0x7FFFFFFF, v455 < *(_DWORD *)(v451 + 432))) {
            uint64_t v456 = *(void *)(*(void *)(v451 + 424) + 8 * v455);
          }
          else {
            uint64_t v456 = 0;
          }
          if (v454 != v456) {
            sub_1CC3B6180(v3, "G_BUILD_VECTOR source operand types are not homogeneous", a2);
          }
          v450 += 8;
          v449 -= 32;
        }
        while (v449);
      }
      goto LABEL_750;
    case 0x4Eu:
      uint64_t v260 = *(void *)(v3 + 48);
      __int16 v261 = *(_DWORD **)(a2 + 32);
      int v262 = v261[1];
      if (v262 < 0 && (uint64_t v263 = v262 & 0x7FFFFFFF, v263 < *(_DWORD *)(v260 + 432))) {
        unint64_t v264 = *(void *)(*(void *)(v260 + 424) + 8 * v263);
      }
      else {
        unint64_t v264 = 0;
      }
      int v321 = v261[9];
      if (v321 < 0 && (uint64_t v322 = v321 & 0x7FFFFFFF, v322 < *(_DWORD *)(v260 + 432))) {
        unint64_t v323 = *(void *)(*(void *)(v260 + 424) + 8 * v322);
      }
      else {
        unint64_t v323 = 0;
      }
      unint64_t v508 = v323;
      if ((v264 & 0xFFFFFFFFFFFFFFF9) == 0
        || (v264 & 4) == 0
        || (v323 & 0xFFFFFFFFFFFFFFF9) != 0 && (v323 & 4) != 0)
      {
        sub_1CC3B6180(v3, "G_BUILD_VECTOR_TRUNC must produce a vector from scalar operands", a2);
        __int16 v261 = *(_DWORD **)(a2 + 32);
      }
      uint64_t v324 = *(unsigned int *)(a2 + 40);
      if (v324 != 2)
      {
        uint64_t v325 = 32 * v324 - 64;
        v326 = v261 + 17;
        do
        {
          uint64_t v327 = *(void *)(v3 + 48);
          int v328 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
          if (v328 < 0 && (uint64_t v329 = v328 & 0x7FFFFFFF, v329 < *(_DWORD *)(v327 + 432))) {
            uint64_t v330 = *(void *)(*(void *)(v327 + 424) + 8 * v329);
          }
          else {
            uint64_t v330 = 0;
          }
          if ((*v326 & 0x80000000) != 0 && (uint64_t v331 = *v326 & 0x7FFFFFFF, v331 < *(_DWORD *)(v327 + 432))) {
            uint64_t v332 = *(void *)(*(void *)(v327 + 424) + 8 * v331);
          }
          else {
            uint64_t v332 = 0;
          }
          if (v330 != v332) {
            sub_1CC3B6180(v3, "G_BUILD_VECTOR_TRUNC source operand types are not homogeneous", a2);
          }
          v326 += 8;
          v325 -= 32;
        }
        while (v325);
      }
      unint64_t v334 = sub_1CB8F1DC4(&v508);
      if (v333 == 1)
      {
        if ((v264 & 2) == 0) {
          goto LABEL_471;
        }
      }
      else if ((v264 & 2) == 0)
      {
LABEL_471:
        char v335 = 3;
        if ((v264 & 1) == 0) {
          char v335 = 19;
        }
        unint64_t v336 = v264 & 0x8000000000000000 | (8 * (v264 >> v335)) | 1;
        goto LABEL_474;
      }
      char v499 = 35;
      char v500 = 19;
      if ((v264 & 4) == 0) {
        char v499 = 19;
      }
      unint64_t v501 = v264 >> v499;
      if ((v264 & 4) == 0) {
        char v500 = 3;
      }
      if (v264) {
        char v500 = 3;
      }
      unint64_t v336 = (8 * (unsigned __int16)(v264 >> v500)) & 0xFFFFF8000007FFFFLL | ((v501 & 0xFFFFFF) << 19) | 2;
LABEL_474:
      *(void *)&long long __p = v336;
      unint64_t v338 = sub_1CB8F1DC4((unint64_t *)&__p);
      if (v337 == 1) {
      if (v334 <= v338)
      }
      {
        unint64_t v47 = "G_BUILD_VECTOR_TRUNC source operand types are not larger than dest elt type";
LABEL_66:
        uint64_t v48 = v38;
LABEL_749:
        sub_1CC3B6180(v48, v47, a2);
      }
LABEL_750:
      if (v513 != v515) {
        free(v513);
      }
      return;
    case 0x4Fu:
      uint64_t v270 = *(void *)(v3 + 48);
      uint64_t v271 = *(void *)(a2 + 32);
      int v272 = *(_DWORD *)(v271 + 4);
      if (v272 < 0 && (uint64_t v273 = v272 & 0x7FFFFFFF, v273 < *(_DWORD *)(v270 + 432))) {
        uint64_t v274 = *(void *)(*(void *)(v270 + 424) + 8 * v273);
      }
      else {
        uint64_t v274 = 0;
      }
      int v354 = *(_DWORD *)(v271 + 36);
      if (v354 < 0 && (uint64_t v355 = v354 & 0x7FFFFFFF, v355 < *(_DWORD *)(v270 + 432))) {
        uint64_t v356 = *(void *)(*(void *)(v270 + 424) + 8 * v355);
      }
      else {
        uint64_t v356 = 0;
      }
      if ((v274 & 0xFFFFFFFFFFFFFFF9) == 0
        || (v274 & 4) == 0
        || (v356 & 0xFFFFFFFFFFFFFFF9) == 0
        || (v356 & 4) == 0)
      {
        sub_1CC3B6180(v3, "G_CONCAT_VECTOR requires vector source and destination operands", a2);
      }
      uint64_t v357 = *(unsigned int *)(a2 + 40);
      if (v357 >= 3
        || (sub_1CC3B6180(v3, "G_CONCAT_VECTOR requires at least 2 source operands", a2),
            uint64_t v357 = *(unsigned int *)(a2 + 40),
            v357 != 2))
      {
        uint64_t v358 = *(void *)(a2 + 32);
        uint64_t v359 = v358 + 32 * v357;
        uint64_t v360 = v358 + 64;
        do
        {
          uint64_t v361 = *(void *)(v3 + 48);
          int v362 = *(_DWORD *)(*(void *)(a2 + 32) + 36);
          if (v362 < 0 && (uint64_t v363 = v362 & 0x7FFFFFFF, v363 < *(_DWORD *)(v361 + 432))) {
            uint64_t v364 = *(void *)(*(void *)(v361 + 424) + 8 * v363);
          }
          else {
            uint64_t v364 = 0;
          }
          int v365 = *(_DWORD *)(v360 + 4);
          if (v365 < 0 && (uint64_t v366 = v365 & 0x7FFFFFFF, v366 < *(_DWORD *)(v361 + 432))) {
            uint64_t v367 = *(void *)(*(void *)(v361 + 424) + 8 * v366);
          }
          else {
            uint64_t v367 = 0;
          }
          if (v364 != v367) {
            sub_1CC3B6180(v3, "G_CONCAT_VECTOR source operand types are not homogeneous", a2);
          }
          v360 += 32;
        }
        while (v360 != v359);
      }
      if ((v274 & 2) != 0) {
        uint64_t v368 = 0x800000000000000;
      }
      else {
        uint64_t v368 = 0x8000000000000;
      }
      if ((v368 & v274) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v35);
      }
      if ((v356 & 2) != 0) {
        uint64_t v369 = 0x800000000000000;
      }
      else {
        uint64_t v369 = 0x8000000000000;
      }
      if ((v369 & v356) != 0) {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v35);
      }
      if ((*(_DWORD *)(a2 + 40) - 1) * (unsigned __int16)(v356 >> 3) == (unsigned __int16)(v274 >> 3)) {
        goto LABEL_750;
      }
      unint64_t v47 = "G_CONCAT_VECTOR num dest and source elements should match";
      goto LABEL_66;
    case 0x50u:
    case 0x51u:
LABEL_148:
      uint64_t v106 = *(void *)(v3 + 48);
      uint64_t v107 = *(void *)(a2 + 32);
      int v108 = *(_DWORD *)(v107 + 4);
      if (v108 < 0 && (uint64_t v109 = v108 & 0x7FFFFFFF, v109 < *(_DWORD *)(v106 + 432))) {
        unint64_t v110 = *(void *)(*(void *)(v106 + 424) + 8 * v109);
      }
      else {
        unint64_t v110 = 0;
      }
      int v116 = *(_DWORD *)(v107 + 36);
      if ((v116 & 0x80000000) == 0) {
        goto LABEL_750;
      }
      uint64_t v117 = v116 & 0x7FFFFFFF;
      if (v117 >= *(_DWORD *)(v106 + 432)) {
        goto LABEL_750;
      }
      if ((v110 & 0xFFFFFFFFFFFFFFF9) == 0) {
        goto LABEL_750;
      }
      unint64_t v118 = *(void *)(*(void *)(v106 + 424) + 8 * v117);
      if ((v118 & 0xFFFFFFFFFFFFFFF9) == 0) {
        goto LABEL_750;
      }
      sub_1CC3B9F4C(v3, (const char *)v110, v118, a2);
      if ((v110 & 4) != 0)
      {
        char v119 = 3;
        if ((v110 & 1) == 0) {
          char v119 = 19;
        }
        unint64_t v120 = v110 >> v119;
        if ((v110 & 2) != 0) {
          unint64_t v110 = (v110 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v120) | 2;
        }
        else {
          unint64_t v110 = v110 & 0x8000000000000000 | (8 * v120) | 1;
        }
      }
      char v121 = 3;
      if ((v118 & 1) == 0) {
        char v121 = 19;
      }
      unint64_t v122 = v118 >> v121;
      unint64_t v123 = v118 & 0x8000000000000000 | (8 * v122) | 1;
      uint64_t v124 = (v118 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v122) | 2;
      if ((v118 & 2) == 0) {
        uint64_t v124 = v123;
      }
      if ((v118 & 4) != 0) {
        unint64_t v118 = v124;
      }
      int v125 = **(unsigned __int16 **)(a2 + 16);
      if (v125 == 80)
      {
        if ((v118 & 0xFFFFFFFFFFFFFFF9) == 0 || (v118 & 2) == 0 || (v118 & 4) != 0) {
          sub_1CC3B6180(v3, "ptrtoint source type must be a pointer", a2);
        }
        if ((v110 & 0xFFFFFFFFFFFFFFF9) != 0 && (v110 & 6) == 2)
        {
          unint64_t v47 = "ptrtoint result type must not be a pointer";
          goto LABEL_66;
        }
      }
      else if (v125 == 81)
      {
        if ((v110 & 0xFFFFFFFFFFFFFFF9) == 0 || (v110 & 6) != 2) {
          sub_1CC3B6180(v3, "inttoptr result type must be a pointer", a2);
        }
        if ((v118 & 0xFFFFFFFFFFFFFFF9) != 0 && (v118 & 6) == 2)
        {
          unint64_t v47 = "inttoptr source type must not be a pointer";
          goto LABEL_66;
        }
      }
      else
      {
        if ((v118 & 0xFFFFFFFFFFFFFFF9) == 0
          || (v118 & 2) == 0
          || (v118 & 4) != 0
          || (v110 & 0xFFFFFFFFFFFFFFF9) == 0
          || (v110 & 6) != 2)
        {
          unint64_t v47 = "addrspacecast types must be pointers";
          goto LABEL_66;
        }
        char v485 = 35;
        if ((v110 & 4) == 0) {
          char v485 = 19;
        }
        if ((((v118 >> 19) ^ (v110 >> v485)) & 0xFFFFFF) == 0)
        {
          unint64_t v47 = "addrspacecast must convert different address spaces";
          goto LABEL_66;
        }
      }
      goto LABEL_750;
    case 0x52u:
      uint64_t v240 = *(void *)(v3 + 48);
      uint64_t v241 = *(void *)(a2 + 32);
      int v242 = *(_DWORD *)(v241 + 4);
      if (v242 < 0 && (uint64_t v243 = v242 & 0x7FFFFFFF, v243 < *(_DWORD *)(v240 + 432))) {
        unint64_t v244 = *(void *)(*(void *)(v240 + 424) + 8 * v243);
      }
      else {
        unint64_t v244 = 0;
      }
      unint64_t v508 = v244;
      int v317 = *(_DWORD *)(v241 + 36);
      if ((v317 & 0x80000000) == 0) {
        goto LABEL_750;
      }
      uint64_t v318 = v317 & 0x7FFFFFFF;
      if (v318 >= *(_DWORD *)(v240 + 432)) {
        goto LABEL_750;
      }
      uint64_t v319 = *(void *)(*(void *)(v240 + 424) + 8 * v318);
      *(void *)&long long __p = v319;
      if ((v244 & 0xFFFFFFFFFFFFFFF9) == 0 || (v319 & 0xFFFFFFFFFFFFFFF9) == 0) {
        goto LABEL_750;
      }
      uint64_t v320 = v319 & 6;
      if ((v244 & 2) != 0)
      {
        if (((v244 & 4) == 0) == (v320 == 2)) {
          goto LABEL_856;
        }
      }
      else if (v320 != 2)
      {
        goto LABEL_856;
      }
      sub_1CC3B6180(v3, "bitcast cannot convert between pointers and other types", a2);
LABEL_856:
      uint64_t v493 = sub_1CB8F1DC4((unint64_t *)&__p);
      int v495 = v494;
      if (v493 != sub_1CB8F1DC4(&v508) || v495 != v496) {
        sub_1CC3B6180(v3, "bitcast sizes must match", a2);
      }
      if ((void)__p != v508) {
        goto LABEL_750;
      }
      unint64_t v47 = "bitcast must change the type";
      goto LABEL_66;
    case 0x5Au:
    case 0x5Bu:
    case 0x5Cu:
    case 0x60u:
      uint64_t v77 = *(void *)(v3 + 48);
      uint64_t v78 = *(void *)(a2 + 32);
      int v79 = *(_DWORD *)(v78 + 4);
      if (v79 < 0 && (uint64_t v80 = v79 & 0x7FFFFFFF, v80 < *(_DWORD *)(v77 + 432))) {
        uint64_t v81 = *(const char **)(*(void *)(v77 + 424) + 8 * v80);
      }
      else {
        uint64_t v81 = 0;
      }
      unint64_t v508 = (unint64_t)v81;
      int v82 = *(_DWORD *)(v78 + 36);
      if ((v82 & 0x80000000) == 0
        || (uint64_t v83 = v82 & 0x7FFFFFFF, v83 >= *(_DWORD *)(v77 + 432))
        || ((uint64_t v84 = *(void *)(*(void *)(v77 + 424) + 8 * v83), v85 = v84 & 0xFFFFFFFFFFFFFFF9, v86 = v84 & 6, v85)
          ? (BOOL v87 = v86 == 2)
          : (BOOL v87 = 0),
            !v87))
      {
        sub_1CC3B6180(v3, "Generic memory instruction must access a pointer", a2);
      }
      unint64_t v88 = *(void *)(a2 + 48);
      if (v88 < 8)
      {
        unint64_t v47 = "Generic instruction accessing memory must have one mem operand";
        goto LABEL_748;
      }
      if ((v88 & 7) != 0)
      {
        unint64_t v47 = "Generic instruction accessing memory must have one mem operand";
        if ((*(void *)(a2 + 48) & 7) != 3
          || (v88 & 0xFFFFFFFFFFFFFFF8) == 0
          || *(_DWORD *)(v88 & 0xFFFFFFFFFFFFFFF8) != 1)
        {
          goto LABEL_748;
        }
      }
      else
      {
        v88 &= 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v88;
      }
      if ((v88 & 7) != 0)
      {
        unint64_t v370 = *(void *)((v88 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v370 = v88 & 0xFFFFFFFFFFFFFFF8;
        *(void *)(a2 + 48) = v88 & 0xFFFFFFFFFFFFFFF8;
      }
      int v391 = **(unsigned __int16 **)(a2 + 16);
      if ((v391 - 91) < 2)
      {
        if ((*(void *)(v370 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          unint64_t v399 = sub_1CB8F1DC4((unint64_t *)(v370 + 24));
          if (v398 == 1) {
        }
          }
        else
        {
          unint64_t v399 = -1;
        }
        unint64_t v463 = sub_1CB8F1DC4(&v508);
        if (v462 == 1) {
        if (v399 >= v463)
        }
        {
          int v397 = "Generic extload must have a narrower memory type";
          goto LABEL_742;
        }
      }
      else if (v391 == 90)
      {
        if ((*(void *)(v370 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          unint64_t v458 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v370 + 24)) + 7) >> 3;
          if (v457 == 1) {
        }
          }
        else
        {
          unint64_t v458 = -1;
        }
        unint64_t v460 = (unint64_t)(sub_1CB8F1DC4(&v508) + 7) >> 3;
        if (v459 == 1) {
        BOOL v461 = v458 > v460;
        }
        uint64_t v3 = v38;
        if (v461)
        {
          int v397 = "load memory size cannot exceed result size";
          goto LABEL_742;
        }
      }
      else
      {
        if (v391 != 96) {
          goto LABEL_743;
        }
        uint64_t v393 = sub_1CB8F1DC4(&v508);
        if (v392 == 1) {
        if ((*(void *)(v370 + 24) & 0xFFFFFFFFFFFFFFF9) == 0)
        }
        {
          int v397 = "store memory size cannot exceed value size";
          goto LABEL_742;
        }
        unint64_t v394 = (unint64_t)(v393 + 7) >> 3;
        unint64_t v396 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v370 + 24)) + 7) >> 3;
        if (v395 == 1) {
        BOOL v33 = v394 >= v396;
        }
        uint64_t v3 = v38;
        if (!v33)
        {
          int v397 = "store memory size cannot exceed value size";
LABEL_742:
          sub_1CC3B6180(v3, v397, a2);
        }
      }
LABEL_743:
      if (v37 == 96)
      {
        if ((*(unsigned char *)(v370 + 37) & 0xD) != 4) {
          goto LABEL_750;
        }
        unint64_t v47 = "atomic store cannot use acquire ordering";
      }
      else
      {
        if ((*(unsigned char *)(v370 + 37) & 0xFu) - 5 > 1) {
          goto LABEL_750;
        }
        unint64_t v47 = "atomic load cannot use release ordering";
      }
LABEL_748:
      uint64_t v48 = v3;
      goto LABEL_749;
    case 0x74u:
    case 0x75u:
      unsigned int v161 = *((unsigned __int8 *)v36 + 4);
      if ((v36[4] & 2) != 0)
      {
        int v431 = *(_DWORD *)(a2 + 40);
        uint64_t v48 = v3;
        if (v431 == v161)
        {
          unsigned int v162 = v161;
        }
        else
        {
          int v432 = v431 - 1;
          unsigned int v162 = v161;
          do
          {
            int v433 = *(_DWORD *)(*(void *)(a2 + 32) + 32 * v161);
            if ((v433 & 0x10000FF) != 0x1000000) {
              break;
            }
            v162 += (v433 & 0x2000000) == 0;
            if (v432 == v161) {
              break;
            }
            ++v161;
          }
          while ((v433 & 0x2000000) == 0);
        }
      }
      else
      {
        unsigned int v162 = *((unsigned __int8 *)v36 + 4);
        uint64_t v48 = v3;
      }
      uint64_t v163 = *(void *)(a2 + 32);
      if (*(unsigned char *)(v163 + 32 * v162) != 17)
      {
        unint64_t v47 = "G_INTRINSIC first src operand must be an intrinsic ID";
        goto LABEL_749;
      }
      uint64_t v164 = (llvm::LLVMContext *)*(unsigned int *)(v163 + 32 * v162 + 16);
      if ((v164 - 1) >> 2 > 0xC3A) {
        goto LABEL_750;
      }
      uint64_t Attributes = llvm::Intrinsic::getAttributes(****(llvm::Intrinsic *****)(v3 + 16), v164);
      if (Attributes) {
        int v166 = (*(unsigned __int8 *)(Attributes + 17) >> 4) & 1;
      }
      else {
        int v166 = 0;
      }
      if (v37 == 116 && !v166)
      {
        unint64_t v47 = "G_INTRINSIC used with intrinsic that accesses memory";
        goto LABEL_748;
      }
      if (v37 == 116) {
        int v166 = 0;
      }
      if (v166 != 1) {
        goto LABEL_750;
      }
      unint64_t v47 = "G_INTRINSIC_W_SIDE_EFFECTS used with readnone intrinsic";
      goto LABEL_302;
    case 0x76u:
    case 0x77u:
    case 0x7Cu:
    case 0x7Eu:
LABEL_67:
      uint64_t v49 = *(void *)(v3 + 48);
      uint64_t v50 = *(void *)(a2 + 32);
      int v51 = *(_DWORD *)(v50 + 4);
      if (v51 < 0 && (uint64_t v52 = v51 & 0x7FFFFFFF, v52 < *(_DWORD *)(v49 + 432))) {
        unint64_t v53 = *(void *)(*(void *)(v49 + 424) + 8 * v52);
      }
      else {
        unint64_t v53 = 0;
      }
      int v54 = *(_DWORD *)(v50 + 36);
      if ((v54 & 0x80000000) == 0) {
        goto LABEL_750;
      }
      uint64_t v55 = v54 & 0x7FFFFFFF;
      if (v55 >= *(_DWORD *)(v49 + 432)) {
        goto LABEL_750;
      }
      if ((v53 & 0xFFFFFFFFFFFFFFF9) == 0) {
        goto LABEL_750;
      }
      unint64_t v56 = *(void *)(*(void *)(v49 + 424) + 8 * v55);
      if ((v56 & 0xFFFFFFFFFFFFFFF9) == 0) {
        goto LABEL_750;
      }
      unint64_t v57 = v53;
      if ((v53 & 4) != 0)
      {
        char v58 = 3;
        if ((v53 & 1) == 0) {
          char v58 = 19;
        }
        unint64_t v59 = v53 >> v58;
        if ((v53 & 2) != 0) {
          unint64_t v57 = (v53 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v59) | 2;
        }
        else {
          unint64_t v57 = v53 & 0x8000000000000000 | (8 * v59) | 1;
        }
      }
      unint64_t v508 = v57;
      uint64_t v60 = v56;
      if ((v56 & 4) != 0)
      {
        char v61 = 3;
        if ((v56 & 1) == 0) {
          char v61 = 19;
        }
        unint64_t v62 = v56 >> v61;
        unint64_t v63 = v56 & 0x8000000000000000 | (8 * v62) | 1;
        uint64_t v60 = (v56 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v62) | 2;
        if ((v56 & 2) == 0) {
          uint64_t v60 = v63;
        }
      }
      *(void *)&long long __p = v60;
      if ((v57 & 0xFFFFFFFFFFFFFFF9) != 0 && (v57 & 6) == 2
        || ((unint64_t v64 = v60 & 0xFFFFFFFFFFFFFFF9, v65 = v60 & 6, v64) ? (v66 = v65 == 2) : (v66 = 0), v66))
      {
        sub_1CC3B6180(v3, "Generic extend/truncate can not operate on pointers", a2);
      }
      sub_1CC3B9F4C(v3, (const char *)v53, v56, a2);
      unsigned int v68 = sub_1CB8F1DC4(&v508);
      if (v67 == 1) {
      unsigned int v70 = sub_1CB8F1DC4((unint64_t *)&__p);
      }
      if (v69 == 1) {
      int v71 = **(unsigned __int16 **)(a2 + 16);
      }
      if (v71 == 119 || v71 == 179)
      {
        if (v68 < v70) {
          goto LABEL_750;
        }
        unint64_t v47 = "Generic truncate has destination type no smaller than source";
      }
      else
      {
        if (v68 > v70) {
          goto LABEL_750;
        }
        unint64_t v47 = "Generic extend has destination type no larger than source";
      }
      goto LABEL_66;
    case 0x78u:
    case 0x79u:
      uint64_t v151 = *(void *)(a2 + 32);
      int v152 = *(_DWORD *)(v151 + 4);
      if (v152 < 0
        && (v153 = *(void *)(v3 + 48), uint64_t v154 = v152 & 0x7FFFFFFF, v154 < *(_DWORD *)(v153 + 432)))
      {
        unint64_t v508 = *(void *)(*(void *)(v153 + 424) + 8 * v154);
        if ((v508 & 0xFFFFFFFFFFFFFFF9) != 0 && (v508 & 4) != 0)
        {
          sub_1CC3B6180(v3, "Instruction cannot use a vector result type", a2);
          int v37 = **(unsigned __int16 **)(a2 + 16);
          uint64_t v151 = *(void *)(a2 + 32);
        }
      }
      else
      {
        unint64_t v508 = 0;
      }
      int v173 = *(unsigned __int8 *)(v151 + 32);
      if (v37 == 120)
      {
        if (v173 != 2)
        {
          unint64_t v47 = "G_CONSTANT operand must be cimm";
          goto LABEL_748;
        }
        uint64_t v174 = *(unsigned int *)(*(void *)(v151 + 48) + 32);
      }
      else
      {
        if (v173 != 3)
        {
          unint64_t v47 = "G_FCONSTANT operand must be fpimm";
          goto LABEL_748;
        }
        uint64_t v174 = *(unsigned int *)(*(void *)(*(void *)(v151 + 48) + 32) + 12);
      }
      uint64_t v227 = sub_1CB8F1DC4(&v508);
      if (v226 == 1) {
      if (v227 == v174)
      }
        goto LABEL_750;
      unint64_t v47 = "inconsistent constant size";
LABEL_302:
      uint64_t v3 = v38;
      goto LABEL_748;
    case 0x7Du:
      uint64_t v275 = *(void *)(a2 + 32);
      if (*(unsigned char *)(v275 + 64) != 1)
      {
        unint64_t v47 = "G_SEXT_INREG expects an immediate operand #2";
        goto LABEL_66;
      }
      int v276 = *(_DWORD *)(v275 + 36);
      if (v276 < 0
        && (uint64_t v277 = *(void *)(v3 + 48), v278 = v276 & 0x7FFFFFFF, v278 < *(_DWORD *)(v277 + 432)))
      {
        unint64_t v279 = *(void *)(*(void *)(v277 + 424) + 8 * v278);
      }
      else
      {
        unint64_t v279 = 0;
      }
      uint64_t v389 = *(void *)(v275 + 80);
      if (v389 <= 0) {
        sub_1CC3B6180(v38, "G_SEXT_INREG size must be >= 1", a2);
      }
      if (v279)
      {
        uint64_t v390 = (v279 >> 3);
      }
      else if ((v279 & 4) != 0)
      {
        if ((v279 & 2) != 0) {
          uint64_t v390 = (unsigned __int16)(v279 >> 19);
        }
        else {
          uint64_t v390 = (v279 >> 19);
        }
      }
      else
      {
        uint64_t v390 = (unsigned __int16)(v279 >> 3);
      }
      if (v389 < v390) {
        goto LABEL_750;
      }
      unint64_t v47 = "G_SEXT_INREG size must be less than source bit width";
      goto LABEL_66;
    case 0x7Fu:
    case 0x80u:
    case 0x81u:
    case 0x84u:
    case 0x85u:
      uint64_t v39 = *(void *)(v3 + 48);
      uint64_t v40 = *(void *)(a2 + 32);
      int v41 = *(_DWORD *)(v40 + 36);
      if (v41 < 0 && (uint64_t v42 = v41 & 0x7FFFFFFF, v42 < *(_DWORD *)(v39 + 432))) {
        unint64_t v43 = *(void *)(*(void *)(v39 + 424) + 8 * v42);
      }
      else {
        unint64_t v43 = 0;
      }
      int v72 = *(_DWORD *)(v40 + 68);
      if (v72 < 0 && (uint64_t v73 = v72 & 0x7FFFFFFF, v73 < *(_DWORD *)(v39 + 432))) {
        unint64_t v74 = *(void *)(*(void *)(v39 + 424) + 8 * v73);
      }
      else {
        unint64_t v74 = 0;
      }
      BOOL v7 = (v43 & 0xFFFFFFFFFFFFFFF9) == 0;
      uint64_t v75 = (v43 >> 2) & 1;
      if (v7) {
        LODWORD(v75) = 0;
      }
      BOOL v7 = (v74 & 0xFFFFFFFFFFFFFFF9) == 0;
      uint64_t v76 = (v74 >> 2) & 1;
      if (v7) {
        LODWORD(v76) = 0;
      }
      if (v75 == v76) {
        goto LABEL_750;
      }
      unint64_t v47 = "Shifts and rotates require operands to be either all scalars or all vectors";
      goto LABEL_66;
    case 0x86u:
    case 0x87u:
      uint64_t v156 = *(void *)(v3 + 48);
      uint64_t v157 = *(void *)(a2 + 32);
      int v158 = *(_DWORD *)(v157 + 4);
      if (v158 < 0 && (uint64_t v159 = v158 & 0x7FFFFFFF, v159 < *(_DWORD *)(v156 + 432))) {
        unint64_t v160 = *(void *)(*(void *)(v156 + 424) + 8 * v159);
      }
      else {
        unint64_t v160 = 0;
      }
      int v175 = *(_DWORD *)(v157 + 68);
      if (v175 < 0 && (uint64_t v176 = v175 & 0x7FFFFFFF, v176 < *(_DWORD *)(v156 + 432))) {
        unint64_t v177 = *(void *)(*(void *)(v156 + 424) + 8 * v176);
      }
      else {
        unint64_t v177 = 0;
      }
      uint64_t v178 = (v160 >> 2) & 1;
      if ((v160 & 0xFFFFFFFFFFFFFFF9) == 0) {
        LODWORD(v178) = 0;
      }
      uint64_t v179 = (v177 >> 2) & 1;
      if ((v177 & 0xFFFFFFFFFFFFFFF9) == 0) {
        LODWORD(v179) = 0;
      }
      if (v178 == v179)
      {
        if (!v178) {
          goto LABEL_750;
        }
        if ((v160 & 2) != 0) {
          uint64_t v233 = 0x800000000000000;
        }
        else {
          uint64_t v233 = 0x8000000000000;
        }
        if ((v233 & v160) != 0) {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v35);
        }
        if ((v177 & 2) != 0) {
          uint64_t v234 = 0x800000000000000;
        }
        else {
          uint64_t v234 = 0x8000000000000;
        }
        if ((v234 & v177) != 0) {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v35);
        }
        if ((unsigned __int16)(v160 >> 3) == (unsigned __int16)(v177 >> 3)) {
          goto LABEL_750;
        }
      }
      unint64_t v47 = "Generic vector icmp/fcmp must preserve number of lanes";
      goto LABEL_66;
    case 0x88u:
      uint64_t v221 = *(void *)(v3 + 48);
      uint64_t v222 = *(void *)(a2 + 32);
      int v223 = *(_DWORD *)(v222 + 4);
      if (v223 < 0 && (uint64_t v224 = v223 & 0x7FFFFFFF, v224 < *(_DWORD *)(v221 + 432))) {
        unint64_t v225 = *(void *)(*(void *)(v221 + 424) + 8 * v224);
      }
      else {
        unint64_t v225 = 0;
      }
      int v297 = *(_DWORD *)(v222 + 36);
      if (v297 < 0 && (uint64_t v298 = v297 & 0x7FFFFFFF, v298 < *(_DWORD *)(v221 + 432))) {
        unint64_t v299 = *(void *)(*(void *)(v221 + 424) + 8 * v298);
      }
      else {
        unint64_t v299 = 0;
      }
      if ((v225 & 0xFFFFFFFFFFFFFFF9) == 0 || (v299 & 0xFFFFFFFFFFFFFFF9) == 0 || (v299 & 4) == 0) {
        goto LABEL_750;
      }
      uint64_t v300 = v3;
      goto LABEL_670;
    default:
      if ((v37 - 42) >= 2) {
        goto LABEL_750;
      }
      int v111 = "G_ASSERT_SEXT";
      if (v37 == 43) {
        int v111 = "G_ASSERT_ZEXT";
      }
      HIBYTE(v503) = 13;
      *(void *)&long long __p = *(void *)v111;
      *(void *)((char *)&__p + 5) = *(void *)(v111 + 5);
      BYTE13(__p) = 0;
      uint64_t v112 = *(void *)(a2 + 32);
      if (*(unsigned char *)(v112 + 64) == 1)
      {
        int v113 = *(_DWORD *)(v112 + 36);
        uint64_t v114 = *(void *)(v3 + 48);
        if (v113 < 0 && (v113 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v114 + 432)) {
          unint64_t v115 = *(void *)(*(void *)(v114 + 424) + 8 * (v113 & 0x7FFFFFFF));
        }
        else {
          unint64_t v115 = 0;
        }
        uint64_t v371 = *(void *)(v112 + 80);
        if (v371 <= 0)
        {
          __int16 v511 = 773;
          unint64_t v508 = (unint64_t)&__p;
          uint64_t v509 = 13;
          int v280 = " size must be >= 1";
        }
        else
        {
          if (v115)
          {
            unint64_t v372 = (v115 >> 3);
          }
          else if ((v115 & 4) != 0)
          {
            if ((v115 & 2) != 0) {
              unint64_t v372 = (unsigned __int16)(v115 >> 19);
            }
            else {
              unint64_t v372 = (v115 >> 19);
            }
          }
          else
          {
            unint64_t v372 = (unsigned __int16)(v115 >> 3);
          }
          if (v371 >= v372)
          {
            __int16 v511 = 773;
            unint64_t v508 = (unint64_t)&__p;
            uint64_t v509 = 13;
            int v280 = " size must be less than source bit width";
          }
          else
          {
            uint64_t v434 = *(void *)(v114 + 24);
            uint64_t v435 = *(void *)(v434 + 16 * (v113 & 0x7FFFFFFF));
            int v436 = *(_DWORD *)(v112 + 4);
            unint64_t v437 = v435 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v438 = *(void *)(v434 + 16 * (v436 & 0x7FFFFFFF));
            if ((v435 & 0xFFFFFFFFFFFFFFF8 & (v435 << 61 >> 63)) == (v438 & 0xFFFFFFFFFFFFFFF8 & (v438 << 61 >> 63)))
            {
              if ((v435 & 4) != 0) {
                unint64_t v437 = 0;
              }
              if ((v438 & 4) != 0) {
                unint64_t v484 = 0;
              }
              else {
                unint64_t v484 = v438 & 0xFFFFFFFFFFFFFFF8;
              }
              if (v437 == v484)
              {
LABEL_665:
                if ((SHIBYTE(v503) & 0x80000000) == 0) {
                  goto LABEL_750;
                }
                v415 = (char *)__p;
                goto LABEL_667;
              }
              __int16 v511 = 773;
              unint64_t v508 = (unint64_t)&__p;
              uint64_t v509 = 13;
              int v280 = " source and destination register classes must match";
            }
            else
            {
              __int16 v511 = 773;
              unint64_t v508 = (unint64_t)&__p;
              uint64_t v509 = 13;
              int v280 = " source and destination register banks must match";
            }
          }
        }
      }
      else
      {
        __int16 v511 = 773;
        unint64_t v508 = (unint64_t)&__p;
        uint64_t v509 = 13;
        int v280 = " expects an immediate operand #2";
      }
      p_p = v280;
      sub_1CC3B9EDC(v3, (llvm::Twine *)&v508, a2);
      goto LABEL_665;
  }
}

llvm::raw_ostream *sub_1CC3B9D7C(uint64_t a1, const char *a2, unint64_t *a3, unsigned int a4, uint64_t a5)
{
  sub_1CC3B6180(a1, a2, a3[1]);
  uint64_t v10 = (llvm::raw_ostream *)llvm::errs(v9);
  uint64_t v11 = v10;
  uint64_t v12 = *((void *)v10 + 4);
  if ((unint64_t)(*((void *)v10 + 3) - v12) > 9)
  {
    *(_WORD *)(v12 + 8) = 8292;
    *(void *)uint64_t v12 = *(void *)"- operand ";
    *((void *)v10 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v10, "- operand ", 0xAuLL);
  }
  uint64_t v13 = sub_1CD098D14(v11, a4, 0, 0, 0);
  int v14 = (_DWORD *)*((void *)v11 + 4);
  if (*((void *)v11 + 3) - (void)v14 > 3uLL)
  {
    _DWORD *v14 = 538976314;
    *((void *)v11 + 4) += 4;
  }
  else
  {
    uint64_t v13 = llvm::raw_ostream::write(v11, ":   ", 4uLL);
  }
  uint64_t v15 = (llvm::MachineOperand *)llvm::errs(v13);
  llvm::MachineOperand::print((llvm::raw_ostream *)a3, v15, a5, *(void *)(a1 + 40), 0);
  uint64_t result = (llvm::raw_ostream *)llvm::errs(v16);
  uint64_t v18 = (unsigned char *)*((void *)result + 4);
  if (*((unsigned char **)result + 3) == v18)
  {
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *uint64_t v18 = 10;
    ++*((void *)result + 4);
  }
  return result;
}

void sub_1CC3B9EDC(uint64_t a1, llvm::Twine *this, unint64_t a3)
{
  llvm::Twine::str(this, __p);
  if (v7 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  sub_1CC3B6180(a1, (const char *)v5, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1CC3B9F4C(uint64_t a1, const char *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6 = ((unint64_t)a2 >> 2) & 1;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v6) = 0;
  }
  uint64_t v7 = (a3 >> 2) & 1;
  if ((a3 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v7) = 0;
  }
  if (v6 != v7)
  {
    unsigned int v8 = "operand types must be all-vector or all-scalar";
LABEL_21:
    sub_1CC3B6180(a1, v8, a4);
    return;
  }
  if (v6)
  {
    unsigned int v10 = a2;
    if ((a2 & 2) != 0) {
      uint64_t v11 = 0x800000000000000;
    }
    else {
      uint64_t v11 = 0x8000000000000;
    }
    if ((v11 & (unint64_t)a2) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    }
    if ((a3 & 2) != 0) {
      uint64_t v12 = 0x800000000000000;
    }
    else {
      uint64_t v12 = 0x8000000000000;
    }
    if ((v12 & a3) != 0) {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", a2);
    }
    if ((unsigned __int16)(v10 >> 3) != (unsigned __int16)(a3 >> 3))
    {
      unsigned int v8 = "operand types must preserve number of vector elements";
      goto LABEL_21;
    }
  }
}

unsigned int *sub_1CC3BA03C(unsigned int *result, unsigned int *a2, unsigned int a3)
{
  unsigned int v4 = a2[2];
  if (v4 >= a2[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a2 + 4 * v4) = a3;
  unsigned int v5 = a2[2] + 1;
  a2[2] = v5;
  if (a3 - 1 <= 0x3FFFFFFE)
  {
    uint64_t v6 = (unsigned __int16 *)(*(void *)(*((void *)result + 5) + 56)
                            + 2 * *(unsigned int *)(*(void *)(*((void *)result + 5) + 8) + 24 * a3 + 4));
    int v8 = *v6;
    uint64_t v7 = v6 + 1;
    unsigned __int16 v9 = v8 + a3;
    if (!v8) {
      uint64_t v7 = 0;
    }
    uint64_t v10 = *(void *)a2 + 4 * v5;
    unsigned __int16 v12 = v9;
    uint64_t v13 = v7;
    unsigned __int16 v14 = v9;
    LOWORD(v11) = 0;
    *((void *)&v11 + 1) = 0;
    return sub_1CD550E98(a2, v10, &v12, &v11);
  }
  return result;
}

llvm::raw_ostream *sub_1CC3BA120(llvm::raw_ostream *result, unint64_t *a2, unsigned int a3, llvm *a4, llvm *a5, unsigned int a6, llvm *a7)
{
  uint64_t v13 = result;
  unint64_t v14 = (unint64_t)a4 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v15 = *((_DWORD *)a5 + 2);
  uint64_t v16 = *(void **)a5;
  if (!v15)
  {
    unsigned int v15 = 0;
    goto LABEL_12;
  }
  uint64_t v17 = v16[3 * v15 - 2];
  unsigned int v18 = *(_DWORD *)(v14 + 24);
  if (v18 >= ((v17 >> 1) & 3 | *(_DWORD *)((v17 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_12:
    int v19 = &v16[3 * v15];
    goto LABEL_13;
  }
  int v19 = *(void **)a5;
  unint64_t v20 = *((unsigned int *)a5 + 2);
  do
  {
    unint64_t v21 = v20 >> 1;
    uint64_t v22 = v19[3 * (v20 >> 1) + 1];
    LODWORD(v22) = (v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24);
    v20 -= (v20 >> 1) + 1;
    BOOL v23 = v18 >= v22;
    if (v18 >= v22) {
      unint64_t v24 = v21 + 1;
    }
    else {
      unint64_t v24 = 0;
    }
    v19 += 3 * v24;
    if (!v23) {
      unint64_t v20 = v21;
    }
  }
  while (v20);
LABEL_13:
  int v25 = &v16[3 * v15];
  if (v19 == v25)
  {
    BOOL v28 = 0;
    goto LABEL_27;
  }
  if (((*v19 >> 1) & 3 | *(_DWORD *)((*v19 & 0xFFFFFFFFFFFFFFF8) + 24)) > *(_DWORD *)(v14 + 24))
  {
    BOOL v28 = 0;
    goto LABEL_27;
  }
  uint64_t v26 = v19[2];
  unint64_t v27 = v19[1] & 0xFFFFFFFFFFFFFFF8;
  BOOL v28 = v14 == v27;
  int v29 = v19 + 3;
  if (v14 == v27 && v29 == v25)
  {
    BOOL v28 = 1;
    if (v26) {
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (*(void *)(v26 + 8) == v14) {
    uint64_t v26 = 0;
  }
  if (!v26)
  {
LABEL_27:
    if (!a7)
    {
      sub_1CC3B9D7C((uint64_t)result, "No live segment at use", a2, a3, 0);
      sub_1CC3BA8C0(a5);
      sub_1CC3BA980(v13, a6);
      uint64_t result = sub_1CC3BA3FC(a4);
    }
  }
LABEL_29:
  if (!v28 && ((*(_DWORD *)a2 >> 26) & ~HIBYTE(*(_DWORD *)a2) & 1) != 0)
  {
    sub_1CC3B9D7C((uint64_t)v13, "Live range continues after kill flag", a2, a3, 0);
    sub_1CC3BA8C0(a5);
    sub_1CC3BA980(v13, a6);
    if (a7) {
      sub_1CC3BAB58(a7);
    }
    return sub_1CC3BA3FC(a4);
  }
  return result;
}

llvm::raw_ostream *sub_1CC3BA33C(llvm *a1)
{
  unsigned int v2 = (llvm::raw_ostream *)llvm::errs(a1);
  uint64_t v3 = v2;
  unsigned int v4 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v4 > 0xEuLL)
  {
    qmemcpy(v4, "- interval:    ", 15);
    *((void *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "- interval:    ", 0xFuLL);
  }
  uint64_t result = llvm::LiveInterval::print(a1, v3);
  uint64_t v6 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v6 >= *((void *)v3 + 3))
  {
    return llvm::raw_ostream::write(v3, 10);
  }
  else
  {
    *((void *)v3 + 4) = v6 + 1;
    *uint64_t v6 = 10;
  }
  return result;
}

llvm::raw_ostream *sub_1CC3BA3FC(llvm *a1)
{
  unsigned int v2 = (llvm::raw_ostream *)llvm::errs(a1);
  uint64_t v3 = v2;
  unsigned int v4 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v4 > 0xEuLL)
  {
    *(void *)((char *)v4 + 7) = 0x2020202020202020;
    *unsigned int v4 = *(void *)"- at:          ";
    *((void *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "- at:          ", 0xFuLL);
  }
  uint64_t v7 = a1;
  uint64_t result = llvm::SlotIndex::print((llvm::SlotIndex *)&v7, v3);
  uint64_t v6 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v6 >= *((void *)v3 + 3))
  {
    return llvm::raw_ostream::write(v3, 10);
  }
  else
  {
    *((void *)v3 + 4) = v6 + 1;
    *uint64_t v6 = 10;
  }
  return result;
}

uint64_t sub_1CC3BA4CC(uint64_t result, unint64_t *a2, unsigned int a3, llvm *a4, llvm *a5, unsigned int a6, int a7, llvm *a8)
{
  unsigned int v15 = (llvm *)result;
  unsigned int v16 = *((_DWORD *)a5 + 2);
  uint64_t v17 = *(void **)a5;
  if (!v16)
  {
    unsigned int v16 = 0;
    goto LABEL_12;
  }
  uint64_t v18 = v17[3 * v16 - 2];
  unsigned int v19 = *(_DWORD *)(((unint64_t)a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3;
  if (v19 >= ((v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_12:
    unint64_t v20 = &v17[3 * v16];
    goto LABEL_13;
  }
  unint64_t v20 = *(void **)a5;
  unint64_t v21 = *((unsigned int *)a5 + 2);
  do
  {
    unint64_t v22 = v21 >> 1;
    uint64_t v23 = v20[3 * (v21 >> 1) + 1];
    LODWORD(v23) = (v23 >> 1) & 3 | *(_DWORD *)((v23 & 0xFFFFFFFFFFFFFFF8) + 24);
    v21 -= (v21 >> 1) + 1;
    BOOL v24 = v19 >= v23;
    if (v19 >= v23) {
      unint64_t v25 = v22 + 1;
    }
    else {
      unint64_t v25 = 0;
    }
    v20 += 3 * v25;
    if (!v24) {
      unint64_t v21 = v22;
    }
  }
  while (v21);
LABEL_13:
  if (v20 == &v17[3 * v16]
    || ((*v20 >> 1) & 3 | *(_DWORD *)((*v20 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(((unint64_t)a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (a4 >> 1) & 3)
    || (uint64_t v26 = (llvm *)v20[2]) == 0)
  {
    sub_1CC3B9D7C(result, "No live segment at def", a2, a3, 0);
    sub_1CC3BA8C0(a5);
    sub_1CC3BA980(v15, a6);
    if (a8) {
      sub_1CC3BAB58(a8);
    }
  }
  else
  {
    if (*((llvm **)v26 + 1) == a4) {
      goto LABEL_23;
    }
    sub_1CC3B9D7C(result, "Inconsistent valno->def", a2, a3, 0);
    sub_1CC3BA8C0(a5);
    sub_1CC3BA980(v15, a6);
    if (a8) {
      sub_1CC3BAB58(a8);
    }
    sub_1CC3BAE14(v26);
  }
  uint64_t result = (uint64_t)sub_1CC3BA3FC(a4);
LABEL_23:
  if ((~*(_DWORD *)a2 & 0x5000000) != 0) {
    return result;
  }
  unint64_t v27 = (unint64_t)a4 & 0xFFFFFFFFFFFFFFF8;
  unsigned int v28 = *((_DWORD *)a5 + 2);
  int v29 = *(void **)a5;
  if (!v28)
  {
    unsigned int v28 = 0;
    goto LABEL_35;
  }
  uint64_t v30 = v29[3 * v28 - 2];
  unsigned int v31 = *(_DWORD *)(v27 + 24);
  if (v31 >= ((v30 >> 1) & 3 | *(_DWORD *)((v30 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_35:
    unint64_t v32 = &v29[3 * v28];
    goto LABEL_36;
  }
  unint64_t v32 = *(void **)a5;
  unint64_t v33 = *((unsigned int *)a5 + 2);
  do
  {
    unint64_t v34 = v33 >> 1;
    uint64_t v35 = v32[3 * (v33 >> 1) + 1];
    LODWORD(v35) = (v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t result = (v33 >> 1) + 1;
    v33 -= result;
    BOOL v36 = v31 >= v35;
    if (v31 >= v35) {
      unint64_t v37 = v34 + 1;
    }
    else {
      unint64_t v37 = 0;
    }
    v32 += 3 * v37;
    if (!v36) {
      unint64_t v33 = v34;
    }
  }
  while (v33);
LABEL_36:
  uint64_t v38 = &v29[3 * v28];
  if (v32 != v38)
  {
    unsigned int v39 = *(_DWORD *)((*v32 & 0xFFFFFFFFFFFFFFF8) + 24);
    unsigned int v40 = *(_DWORD *)(v27 + 24);
    if (((*v32 >> 1) & 3 | v39) > v40)
    {
      LOBYTE(v41) = 0;
    }
    else
    {
      uint64_t v41 = v32[1];
      if (v27 == (v41 & 0xFFFFFFFFFFFFFFF8))
      {
        v32 += 3;
        if (v32 == v38) {
          goto LABEL_44;
        }
        unsigned int v39 = *(_DWORD *)((*v32 & 0xFFFFFFFFFFFFFFF8) + 24);
      }
    }
    if (v40 >= v39) {
      uint64_t v41 = v32[1];
    }
LABEL_44:
    if ((~(_BYTE)v41 & 6) == 0) {
      return result;
    }
  }
  if ((*(_DWORD *)a2 & 0xFFF00) == 0 || a7)
  {
    sub_1CC3B9D7C((uint64_t)v15, "Live range continues after dead def flag", a2, a3, 0);
    sub_1CC3BA8C0(a5);
    uint64_t result = sub_1CC3BA980(v15, a6);
    if (a8)
    {
      return sub_1CC3BAB58(a8);
    }
  }
  return result;
}

uint64_t sub_1CC3BA81C(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3, _DWORD *a4)
{
  int v4 = *a2;
  int v11 = *(_DWORD *)(a2 + 1);
  unsigned __int16 v12 = a2[3];
  unsigned int v5 = (unsigned __int16 *)*((void *)a2 + 1);
  unsigned __int16 v6 = a2[8];
  int v9 = *(_DWORD *)(a2 + 9);
  unsigned __int16 v10 = a2[11];
  if (v5 == a3)
  {
    LOWORD(v7) = *a2;
  }
  else
  {
    LOWORD(v7) = a2[8];
    do
    {
      *a4++ = (unsigned __int16)v7;
      int v8 = *v5++;
      int v7 = v8 + v4;
      if (!v8) {
        unsigned int v5 = 0;
      }
      int v4 = v7;
      unsigned __int16 v6 = v7;
    }
    while (v5 != a3);
  }
  *(_DWORD *)(result + 2) = v11;
  *(_WORD *)(result + 6) = v12;
  *(_DWORD *)(result + 18) = v9;
  *(_WORD *)(result + 22) = v10;
  *(_WORD *)uint64_t result = v7;
  *(void *)(result + 8) = a3;
  *(_WORD *)(result + 16) = v6;
  *(void *)(result + 24) = a4;
  return result;
}

llvm::raw_ostream *sub_1CC3BA8C0(llvm *a1)
{
  unsigned int v2 = (llvm::raw_ostream *)llvm::errs(a1);
  uint64_t v3 = v2;
  int v4 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v4 > 0xEuLL)
  {
    qmemcpy(v4, "- liverange:   ", 15);
    *((void *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "- liverange:   ", 0xFuLL);
  }
  uint64_t result = llvm::LiveRange::print((uint64_t **)a1, v3);
  unsigned __int16 v6 = (unsigned char *)*((void *)v3 + 4);
  if ((unint64_t)v6 >= *((void *)v3 + 3))
  {
    return llvm::raw_ostream::write(v3, 10);
  }
  else
  {
    *((void *)v3 + 4) = v6 + 1;
    *unsigned __int16 v6 = 10;
  }
  return result;
}

uint64_t sub_1CC3BA980(llvm *a1, unsigned int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x80000000) != 0)
  {
    return sub_1CC3BACDC(a1, a2);
  }
  else
  {
    int v4 = (llvm::raw_ostream *)llvm::errs(a1);
    unsigned int v5 = v4;
    unsigned __int16 v6 = (void *)*((void *)v4 + 4);
    if (*((void *)v4 + 3) - (void)v6 > 0xEuLL)
    {
      qmemcpy(v6, "- regunit:     ", 15);
      *((void *)v4 + 4) += 15;
    }
    else
    {
      llvm::raw_ostream::write(v4, "- regunit:     ", 0xFuLL);
    }
    v9[2] = *((void *)a1 + 5);
    unsigned __int16 v10 = v9;
    v9[0] = &unk_1F2615528;
    v9[1] = a2;
    off_1F2615558((llvm::raw_ostream *)v9, v5);
    int v7 = (unsigned char *)*((void *)v5 + 4);
    if ((unint64_t)v7 >= *((void *)v5 + 3))
    {
      llvm::raw_ostream::write(v5, 10);
    }
    else
    {
      *((void *)v5 + 4) = v7 + 1;
      *int v7 = 10;
    }
    uint64_t result = (uint64_t)v10;
    if (v10 == v9)
    {
      return (*(uint64_t (**)(void *))(v9[0] + 32))(v9);
    }
    else if (v10)
    {
      return (*(uint64_t (**)(void))(*v10 + 40))();
    }
  }
  return result;
}

uint64_t sub_1CC3BAB58(llvm *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = (llvm::raw_ostream *)llvm::errs(a1);
  uint64_t v3 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 0xEuLL)
  {
    qmemcpy(v3, "- lanemask:    ", 15);
    *((void *)v2 + 4) += 15;
  }
  else
  {
    unsigned int v2 = llvm::raw_ostream::write(v2, "- lanemask:    ", 0xFuLL);
  }
  int v9 = v8;
  v8[0] = &unk_1F260C990;
  v8[1] = a1;
  v7[0] = &unk_1F25FF808;
  v7[1] = "%016llX";
  void v7[2] = a1;
  int v4 = llvm::raw_ostream::operator<<(v2, (uint64_t)v7);
  unsigned int v5 = (unsigned char *)*((void *)v4 + 4);
  if ((unint64_t)v5 >= *((void *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 10);
  }
  else
  {
    *((void *)v4 + 4) = v5 + 1;
    *unsigned int v5 = 10;
  }
  uint64_t result = (uint64_t)v9;
  if (v9 == v8) {
    return (*(uint64_t (**)(void *))(v8[0] + 32))(v8);
  }
  if (v9) {
    return (*(uint64_t (**)(void))(*v9 + 40))();
  }
  return result;
}

uint64_t sub_1CC3BACDC(llvm *a1, int a2)
{
  int v4 = (llvm::raw_ostream *)llvm::errs(a1);
  unsigned int v5 = v4;
  unsigned __int16 v6 = (void *)*((void *)v4 + 4);
  if (*((void *)v4 + 3) - (void)v6 > 0xEuLL)
  {
    qmemcpy(v6, "- v. register: ", 15);
    *((void *)v4 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v4, "- v. register: ", 0xFuLL);
  }
  uint64_t v7 = *((void *)a1 + 5);
  int v8 = operator new(0x28uLL);
  *(void *)int v8 = &unk_1F26154E0;
  v8[2] = a2;
  *((void *)v8 + 2) = v7;
  v8[6] = 0;
  *((void *)v8 + 4) = 0;
  off_1F2615510((llvm::raw_ostream *)v8, v5);
  int v9 = (unsigned char *)*((void *)v5 + 4);
  if ((unint64_t)v9 >= *((void *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, 10);
  }
  else
  {
    *((void *)v5 + 4) = v9 + 1;
    *int v9 = 10;
  }
  uint64_t v10 = *(uint64_t (**)(_DWORD *))(*(void *)v8 + 40);

  return v10(v8);
}

llvm::raw_ostream *sub_1CC3BAE14(llvm *a1)
{
  unsigned int v2 = (llvm::raw_ostream *)llvm::errs(a1);
  uint64_t v3 = v2;
  int v4 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v4 > 0xEuLL)
  {
    qmemcpy(v4, "- ValNo:       ", 15);
    *((void *)v2 + 4) += 15;
  }
  else
  {
    llvm::raw_ostream::write(v2, "- ValNo:       ", 0xFuLL);
  }
  sub_1CD098D14(v3, *(unsigned int *)a1, 0, 0, 0);
  uint64_t v5 = *((void *)v3 + 4);
  if ((unint64_t)(*((void *)v3 + 3) - v5) > 5)
  {
    *(_WORD *)(v5 + 4) = 8294;
    *(_DWORD *)uint64_t v5 = 1701062688;
    *((void *)v3 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v3, " (def ", 6uLL);
  }
  uint64_t v8 = *((void *)a1 + 1);
  uint64_t result = llvm::SlotIndex::print((llvm::SlotIndex *)&v8, v3);
  uint64_t v7 = (_WORD *)*((void *)v3 + 4);
  if (*((void *)v3 + 3) - (void)v7 > 1uLL)
  {
    *uint64_t v7 = 2601;
    *((void *)v3 + 4) += 2;
  }
  else
  {
    return llvm::raw_ostream::write(v3, ")\n", 2uLL);
  }
  return result;
}

uint64_t *sub_1CC3BAF58(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    unint64_t v3 = *a2;
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] <= 1uLL)
    {
      uint64_t v5 = (*(void *)&v2 - 1) & v3;
    }
    else
    {
      uint64_t v5 = *a2;
      if (*(void *)&v2 <= v3) {
        uint64_t v5 = v3 % *(void *)&v2;
      }
    }
    unsigned __int16 v6 = *(uint64_t ***)(*a1 + 8 * v5);
    if (v6)
    {
      uint64_t v7 = *v6;
      if (v7)
      {
        while (1)
        {
          unint64_t v8 = v7[1];
          if (v8 == v3)
          {
            if (*((_DWORD *)v7 + 4) == v3) {
              return v7;
            }
          }
          else
          {
            if (v4.u32[0] <= 1uLL)
            {
              v8 &= *(void *)&v2 - 1;
            }
            else if (v8 >= *(void *)&v2)
            {
              v8 %= *(void *)&v2;
            }
            if (v8 != v5) {
              return 0;
            }
          }
          uint64_t result = 0;
          uint64_t v7 = (uint64_t *)*v7;
          if (!v7) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

void sub_1CC3BB018(_DWORD *a1, uint64_t a2)
{
  v2[0] = &v3;
  v2[1] = 0;
  sub_1CC3BCB14(a1, a2, (uint64_t)v2);
  if (v2[0] != &v3) {
    free(v2[0]);
  }
}

void sub_1CC3BB060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](a1, a2, a3, a4);
  unsigned __int16 v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = v4;
  v257[16] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = v107;
  int v103 = v107;
  uint64_t v11 = *(unsigned char **)(v9 + 8);
  if (v11 == *(unsigned char **)v9)
  {
    uint64_t v104 = v107;
    unsigned __int16 v12 = v11;
  }
  else
  {
    uint64_t v92 = *(unsigned int *)(v9 + 16);
    uint64_t v10 = malloc_type_malloc(8 * v92, 0x4065EBACuLL);
    if (!v10 && (v92 || (uint64_t v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0)) {
LABEL_397:
    }
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    uint64_t v104 = v10;
    unsigned __int16 v12 = *(unsigned char **)v9;
    uint64_t v11 = *(unsigned char **)(v9 + 8);
  }
  unsigned int v14 = *(_DWORD *)(v9 + 16);
  unsigned int v13 = *(_DWORD *)(v9 + 20);
  LODWORD(v105) = v14;
  if (v11 == v12) {
    unsigned int v15 = v13;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v15)
  {
    memmove(v10, v11, 8 * v15);
    unsigned int v13 = *(_DWORD *)(v9 + 20);
  }
  int v16 = *(_DWORD *)(v9 + 24);
  HIDWORD(v105) = v13;
  int v106 = v16;
  int v108 = v110;
  uint64_t v109 = 0x800000000;
  unsigned int v17 = *(_DWORD *)(v9 + 104);
  if (v17 && &v103 != (unsigned char **)v9)
  {
    if (v17 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v110, *(const void **)(v9 + 96), 16 * *(unsigned int *)(v9 + 104));
    LODWORD(v109) = v17;
  }
  uint64_t v18 = v99;
  unsigned int v95 = v99;
  unsigned int v19 = *(unsigned char **)(v8 + 8);
  if (v19 == *(unsigned char **)v8)
  {
    unint64_t v96 = v99;
    unint64_t v20 = v19;
  }
  else
  {
    uint64_t v93 = *(unsigned int *)(v8 + 16);
    uint64_t v18 = malloc_type_malloc(8 * v93, 0x4065EBACuLL);
    if (!v18)
    {
      if (v93) {
        goto LABEL_397;
      }
      uint64_t v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v18) {
        goto LABEL_397;
      }
    }
    unint64_t v96 = v18;
    unint64_t v20 = *(unsigned char **)v8;
    unsigned int v19 = *(unsigned char **)(v8 + 8);
  }
  unsigned int v22 = *(_DWORD *)(v8 + 16);
  unsigned int v21 = *(_DWORD *)(v8 + 20);
  LODWORD(v97) = v22;
  if (v19 == v20) {
    unsigned int v23 = v21;
  }
  else {
    unsigned int v23 = v22;
  }
  if (v23)
  {
    memmove(v18, v19, 8 * v23);
    unsigned int v21 = *(_DWORD *)(v8 + 20);
  }
  int v24 = *(_DWORD *)(v8 + 24);
  HIDWORD(v97) = v21;
  int v98 = v24;
  unint64_t v100 = v102;
  uint64_t v101 = 0x800000000;
  unsigned int v25 = *(_DWORD *)(v8 + 104);
  if (v25 && &v95 != (unsigned char **)v8)
  {
    if (v25 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v102, *(const void **)(v8 + 96), 16 * *(unsigned int *)(v8 + 104));
    LODWORD(v101) = v25;
  }
  int v128 = v132;
  if (v104 == v103)
  {
    uint64_t __src = v132;
    unsigned int v26 = HIDWORD(v105);
    if (HIDWORD(v105)) {
      memmove(v132, v104, 8 * HIDWORD(v105));
    }
  }
  else
  {
    uint64_t __src = v104;
    uint64_t v104 = v103;
    unsigned int v26 = HIDWORD(v105);
  }
  unint64_t v130 = __PAIR64__(v26, v105);
  int v131 = v106;
  uint64_t v105 = 8;
  int v106 = 0;
  uint64_t v133 = v135;
  uint64_t v134 = 0x800000000;
  int v27 = v109;
  if (v109)
  {
    if (v108 == v110)
    {
      if (v109 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v135, v110, 16 * v109);
      LODWORD(v134) = v27;
    }
    else
    {
      uint64_t v133 = v108;
      uint64_t v134 = v109;
      int v108 = v110;
      HIDWORD(v109) = 0;
    }
    LODWORD(v109) = 0;
  }
  unint64_t v120 = v124;
  if (v96 == v95)
  {
    char v121 = v124;
    unsigned int v28 = HIDWORD(v97);
    if (HIDWORD(v97)) {
      memmove(v124, v96, 8 * HIDWORD(v97));
    }
  }
  else
  {
    char v121 = v96;
    unint64_t v96 = v95;
    unsigned int v28 = HIDWORD(v97);
  }
  unint64_t v122 = __PAIR64__(v28, v97);
  int v123 = v98;
  uint64_t v97 = 8;
  int v98 = 0;
  int v125 = v127;
  uint64_t v126 = 0x800000000;
  int v29 = v101;
  if (v101)
  {
    if (v100 == v102)
    {
      if (v101 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v127, v102, 16 * v101);
      LODWORD(v126) = v29;
    }
    else
    {
      int v125 = v100;
      uint64_t v126 = v101;
      unint64_t v100 = v102;
      HIDWORD(v101) = 0;
    }
    LODWORD(v101) = 0;
  }
  int v144 = v148;
  if (__src == v128)
  {
    uint64_t v145 = v148;
    unsigned int v30 = HIDWORD(v130);
    if (HIDWORD(v130)) {
      memmove(v148, __src, 8 * HIDWORD(v130));
    }
  }
  else
  {
    uint64_t v145 = __src;
    uint64_t __src = v128;
    unsigned int v30 = HIDWORD(v130);
  }
  unint64_t v146 = __PAIR64__(v30, v130);
  int v147 = v131;
  unint64_t v130 = 8;
  int v131 = 0;
  uint64_t v149 = v151;
  uint64_t v150 = 0x800000000;
  int v31 = v134;
  if (v134)
  {
    if (v133 == v135)
    {
      if (v134 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v151, v135, 16 * v134);
      LODWORD(v150) = v31;
    }
    else
    {
      uint64_t v149 = v133;
      uint64_t v150 = v134;
      uint64_t v133 = v135;
      HIDWORD(v134) = 0;
    }
    LODWORD(v134) = 0;
  }
  uint64_t v136 = v140;
  if (v121 == v120)
  {
    __int16 v137 = v140;
    unsigned int v32 = HIDWORD(v122);
    if (HIDWORD(v122)) {
      memmove(v140, v121, 8 * HIDWORD(v122));
    }
  }
  else
  {
    __int16 v137 = v121;
    char v121 = v120;
    unsigned int v32 = HIDWORD(v122);
  }
  unint64_t v138 = __PAIR64__(v32, v122);
  int v139 = v123;
  unint64_t v122 = 8;
  int v123 = 0;
  BOOL v141 = v143;
  uint64_t v142 = 0x800000000;
  int v33 = v126;
  if (v126)
  {
    if (v125 == v127)
    {
      if (v126 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v143, v127, 16 * v126);
      LODWORD(v142) = v33;
    }
    else
    {
      BOOL v141 = v125;
      uint64_t v142 = v126;
      int v125 = v127;
      HIDWORD(v126) = 0;
    }
    LODWORD(v126) = 0;
  }
  unint64_t v34 = v214;
  BOOL v210 = v214;
  uint64_t v35 = v145;
  if (v145 == v144)
  {
    uint64_t v211 = v214;
    BOOL v36 = v145;
  }
  else
  {
    int v94 = v146;
    unint64_t v34 = malloc_type_malloc(8 * v146, 0x4065EBACuLL);
    if (!v34)
    {
      if (v94) {
        goto LABEL_397;
      }
      unint64_t v34 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v34) {
        goto LABEL_397;
      }
    }
    uint64_t v211 = v34;
    BOOL v36 = v144;
    uint64_t v35 = v145;
  }
  int v37 = HIDWORD(v146);
  LODWORD(v212) = v146;
  if (v35 == v36) {
    unsigned int v38 = HIDWORD(v146);
  }
  else {
    unsigned int v38 = v146;
  }
  if (v38)
  {
    memmove(v34, v35, 8 * v38);
    int v37 = HIDWORD(v146);
  }
  int v39 = v150;
  HIDWORD(v212) = v37;
  int v213 = v147;
  unint64_t v215 = v217;
  uint64_t v216 = 0x800000000;
  if (v150)
  {
    if (v150 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v217, v149, 16 * v150);
    LODWORD(v216) = v39;
  }
  BOOL v202 = v206;
  if (v137 == v136)
  {
    uint64_t v203 = v206;
    unsigned int v40 = HIDWORD(v138);
    if (HIDWORD(v138)) {
      memmove(v206, v137, 8 * HIDWORD(v138));
    }
  }
  else
  {
    uint64_t v203 = v137;
    __int16 v137 = v136;
    unsigned int v40 = HIDWORD(v138);
  }
  unint64_t v204 = __PAIR64__(v40, v138);
  int v205 = v139;
  unint64_t v138 = 8;
  int v139 = 0;
  uint64_t v207 = v209;
  uint64_t v208 = 0x800000000;
  int v41 = v142;
  if (v142)
  {
    if (v141 == v143)
    {
      if (v142 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v209, v143, 16 * v142);
      LODWORD(v208) = v41;
    }
    else
    {
      uint64_t v207 = v141;
      uint64_t v208 = v142;
      BOOL v141 = v143;
      HIDWORD(v142) = 0;
    }
    LODWORD(v142) = 0;
  }
  int v111 = v116;
  if (v211 == v210)
  {
    uint64_t v112 = v116;
    int v42 = HIDWORD(v212);
    if (HIDWORD(v212)) {
      memmove(v116, v211, 8 * HIDWORD(v212));
    }
  }
  else
  {
    uint64_t v112 = v211;
    uint64_t v211 = v210;
    int v42 = HIDWORD(v212);
  }
  int v113 = v212;
  int v114 = v42;
  int v115 = v213;
  uint64_t v212 = 8;
  int v213 = 0;
  uint64_t v117 = v119;
  uint64_t v118 = 0x800000000;
  int v43 = v216;
  if (v216)
  {
    if (v215 == v217)
    {
      if (v216 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v119, v217, 16 * v216);
      LODWORD(v118) = v43;
    }
    else
    {
      uint64_t v117 = v215;
      uint64_t v118 = v216;
      unint64_t v215 = v217;
      HIDWORD(v216) = 0;
    }
    LODWORD(v216) = 0;
  }
  sub_1CC31EBCC((uint64_t)&v193, (uint64_t)&v111);
  int v242 = v246;
  if (v203 == v202)
  {
    uint64_t v243 = v246;
    unsigned int v44 = HIDWORD(v204);
    if (HIDWORD(v204)) {
      memmove(v246, v203, 8 * HIDWORD(v204));
    }
  }
  else
  {
    uint64_t v243 = v203;
    uint64_t v203 = v202;
    unsigned int v44 = HIDWORD(v204);
  }
  unint64_t v244 = __PAIR64__(v44, v204);
  int v245 = v205;
  unint64_t v204 = 8;
  int v205 = 0;
  uint64_t v247 = v249;
  uint64_t v248 = 0x800000000;
  int v45 = v208;
  if (v208)
  {
    if (v207 == v209)
    {
      if (v208 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v249, v209, 16 * v208);
      LODWORD(v248) = v45;
    }
    else
    {
      uint64_t v247 = v207;
      uint64_t v248 = v208;
      uint64_t v207 = v209;
      HIDWORD(v208) = 0;
    }
    LODWORD(v208) = 0;
  }
  sub_1CC31EBCC((uint64_t)&v250, (uint64_t)&v242);
  int v218 = v222;
  if (v194 == v193)
  {
    uint64_t v219 = v222;
    unsigned int v46 = HIDWORD(v195);
    if (HIDWORD(v195)) {
      memmove(v222, v194, 8 * HIDWORD(v195));
    }
  }
  else
  {
    uint64_t v219 = v194;
    unint64_t v194 = v193;
    unsigned int v46 = HIDWORD(v195);
  }
  unint64_t v220 = __PAIR64__(v46, v195);
  int v221 = v196;
  unint64_t v195 = 8;
  int v196 = 0;
  int v223 = v225;
  uint64_t v224 = 0x800000000;
  int v47 = v199;
  if (v199)
  {
    if (v198 == v200)
    {
      if (v199 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v225, v198, 16 * v199);
      LODWORD(v224) = v47;
    }
    else
    {
      int v223 = v198;
      uint64_t v224 = v199;
      uint64_t v198 = v200;
      HIDWORD(v199) = 0;
    }
    LODWORD(v199) = 0;
  }
  unsigned int v226 = v230;
  if (v251 == v250)
  {
    uint64_t v227 = v230;
    unsigned int v48 = HIDWORD(v252);
    if (HIDWORD(v252)) {
      memmove(v230, v251, 8 * HIDWORD(v252));
    }
  }
  else
  {
    uint64_t v227 = v251;
    unsigned int v251 = v250;
    unsigned int v48 = HIDWORD(v252);
  }
  unint64_t v228 = __PAIR64__(v48, v252);
  int v229 = v253;
  unint64_t v252 = 8;
  int v253 = 0;
  uint64_t v231 = v233;
  uint64_t v232 = 0x800000000;
  int v49 = v256;
  if (v256)
  {
    if (v255 == v257)
    {
      if (v256 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v233, v255, 16 * v256);
      LODWORD(v232) = v49;
    }
    else
    {
      uint64_t v231 = v255;
      uint64_t v232 = v256;
      uint64_t v255 = v257;
      HIDWORD(v256) = 0;
    }
    LODWORD(v256) = 0;
  }
  if (v255 != v257) {
    free(v255);
  }
  if (v251 != v250) {
    free(v251);
  }
  if (v247 != v249) {
    free(v247);
  }
  if (v243 != v242) {
    free(v243);
  }
  if (v198 != v200) {
    free(v198);
  }
  if (v194 != v193) {
    free(v194);
  }
  if (v117 != v119) {
    free(v117);
  }
  if (v112 != v111) {
    free(v112);
  }
  if (v207 != v209) {
    free(v207);
  }
  if (v203 != v202) {
    free(v203);
  }
  if (v215 != v217) {
    free(v215);
  }
  if (v211 != v210) {
    free(v211);
  }
  uint64_t v185 = v189;
  if (v219 == v218)
  {
    uint64_t v186 = v189;
    unsigned int v50 = HIDWORD(v220);
    if (HIDWORD(v220)) {
      memmove(v189, v219, 8 * HIDWORD(v220));
    }
  }
  else
  {
    uint64_t v186 = v219;
    uint64_t v219 = v218;
    unsigned int v50 = HIDWORD(v220);
  }
  unint64_t v187 = __PAIR64__(v50, v220);
  int v188 = v221;
  unint64_t v220 = 8;
  int v221 = 0;
  uint64_t v190 = v192;
  uint64_t v191 = 0x800000000;
  int v51 = v224;
  if (v224)
  {
    if (v223 == v225)
    {
      if (v224 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v192, v225, 16 * v224);
      LODWORD(v191) = v51;
    }
    else
    {
      uint64_t v190 = v223;
      uint64_t v191 = v224;
      int v223 = v225;
      HIDWORD(v224) = 0;
    }
    LODWORD(v224) = 0;
  }
  uint64_t v176 = v181;
  if (v227 == v226)
  {
    unint64_t v177 = v181;
    int v52 = HIDWORD(v228);
    if (HIDWORD(v228)) {
      memmove(v181, v227, 8 * HIDWORD(v228));
    }
  }
  else
  {
    unint64_t v177 = v227;
    uint64_t v227 = v226;
    int v52 = HIDWORD(v228);
  }
  int v178 = v228;
  int v179 = v52;
  int v180 = v229;
  unint64_t v228 = 8;
  int v229 = 0;
  uint64_t v182 = v184;
  uint64_t v183 = 0x800000000;
  unsigned int v53 = v232;
  if (v232)
  {
    if (v231 == v233)
    {
      if (v232 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v184, v233, 16 * v232);
      LODWORD(v183) = v53;
    }
    else
    {
      uint64_t v182 = v231;
      uint64_t v183 = v232;
      uint64_t v231 = v233;
      HIDWORD(v232) = 0;
    }
    LODWORD(v232) = 0;
  }
  while (1)
  {
    uint64_t v54 = v191;
    uint64_t v55 = v190;
    if (v191 != v53) {
      goto LABEL_156;
    }
    if (!v53) {
      break;
    }
    unint64_t v56 = v182;
    unint64_t v57 = v190;
    while (*v57 == *v56 && v57[1] == v56[1])
    {
      v57 += 2;
      v56 += 2;
      if (v57 == (void *)((char *)v190 + 16 * v191)) {
        goto LABEL_176;
      }
    }
LABEL_156:
    unint64_t v59 = (char *)v190 + 16 * v191;
    char v61 = v6[1];
    unint64_t v60 = (unint64_t)v6[2];
    if ((unint64_t)v61 >= v60)
    {
      unint64_t v63 = *v6;
      uint64_t v64 = (v61 - *v6) >> 3;
      unint64_t v65 = v64 + 1;
      if ((unint64_t)(v64 + 1) >> 61) {
        abort();
      }
      uint64_t v66 = v60 - (void)v63;
      if (v66 >> 2 > v65) {
        unint64_t v65 = v66 >> 2;
      }
      if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v65;
      }
      if (v67)
      {
        if (v67 >> 61) {
          sub_1CB833614();
        }
        unsigned int v68 = (char *)operator new(8 * v67);
      }
      else
      {
        unsigned int v68 = 0;
      }
      unsigned __int16 v69 = &v68[8 * v64];
      *(void *)unsigned __int16 v69 = *((void *)v59 - 2);
      unint64_t v62 = v69 + 8;
      if (v61 != v63)
      {
        do
        {
          uint64_t v70 = *((void *)v61 - 1);
          v61 -= 8;
          *((void *)v69 - 1) = v70;
          v69 -= 8;
        }
        while (v61 != v63);
        char v61 = *v6;
      }
      *unsigned __int16 v6 = v69;
      v6[1] = v62;
      void v6[2] = &v68[8 * v67];
      if (v61)
      {
        operator delete(v61);
        LODWORD(v54) = v191;
      }
    }
    else
    {
      *(void *)char v61 = *((void *)v59 - 2);
      unint64_t v62 = v61 + 8;
    }
    v6[1] = v62;
    LODWORD(v191) = v54 - 1;
    if (v54 != 1) {
      sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v185);
    }
    unsigned int v53 = v183;
  }
LABEL_176:
  uint64_t v193 = v197;
  if (v186 == v185)
  {
    unint64_t v194 = v197;
    unsigned int v71 = HIDWORD(v187);
    if (HIDWORD(v187)) {
      memmove(v197, v186, 8 * HIDWORD(v187));
    }
  }
  else
  {
    unint64_t v194 = v186;
    uint64_t v186 = v185;
    unsigned int v71 = HIDWORD(v187);
  }
  unint64_t v195 = __PAIR64__(v71, v187);
  int v196 = v188;
  unint64_t v187 = 8;
  int v188 = 0;
  uint64_t v198 = v200;
  unint64_t v199 = 0x800000000;
  if (v53)
  {
    if (v55 == v192)
    {
      if (v53 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v200, v192, 16 * v54);
      LODWORD(v199) = v53;
    }
    else
    {
      uint64_t v198 = v55;
      unint64_t v199 = __PAIR64__(HIDWORD(v191), v53);
      uint64_t v190 = v192;
      HIDWORD(v191) = 0;
    }
    LODWORD(v191) = 0;
  }
  uint64_t v201 = v6;
  if (v182 != v184) {
    free(v182);
  }
  if (v177 != v176) {
    free(v177);
  }
  if (v190 != v192) {
    free(v190);
  }
  if (v186 != v185) {
    free(v186);
  }
  unint64_t v160 = v164;
  if (v145 == v144)
  {
    unsigned int v161 = v164;
    unsigned int v72 = HIDWORD(v146);
    if (HIDWORD(v146)) {
      memmove(v164, v145, 8 * HIDWORD(v146));
    }
  }
  else
  {
    unsigned int v161 = v145;
    uint64_t v145 = v144;
    unsigned int v72 = HIDWORD(v146);
  }
  unint64_t v162 = __PAIR64__(v72, v146);
  int v163 = v147;
  unint64_t v146 = 8;
  int v147 = 0;
  uint64_t v165 = v167;
  uint64_t v166 = 0x800000000;
  int v73 = v150;
  if (v150)
  {
    if (v149 == v151)
    {
      if (v150 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v167, v151, 16 * v150);
      LODWORD(v166) = v73;
    }
    else
    {
      uint64_t v165 = v149;
      uint64_t v166 = v150;
      uint64_t v149 = v151;
      HIDWORD(v150) = 0;
    }
    LODWORD(v150) = 0;
  }
  int v152 = v156;
  if (v194 == v193)
  {
    uint64_t v153 = v156;
    unsigned int v74 = HIDWORD(v195);
    if (HIDWORD(v195)) {
      memmove(v156, v194, 8 * HIDWORD(v195));
    }
  }
  else
  {
    uint64_t v153 = v194;
    unint64_t v194 = v193;
    unsigned int v74 = HIDWORD(v195);
  }
  unint64_t v154 = __PAIR64__(v74, v195);
  int v155 = v196;
  unint64_t v195 = 8;
  int v196 = 0;
  uint64_t v157 = v159;
  uint64_t v158 = 0x800000000;
  int v75 = v199;
  if (v199)
  {
    if (v198 == v200)
    {
      if (v199 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v159, v200, 16 * v199);
      LODWORD(v158) = v75;
    }
    else
    {
      uint64_t v157 = v198;
      uint64_t v158 = v199;
      uint64_t v198 = v200;
      HIDWORD(v199) = 0;
    }
    LODWORD(v199) = 0;
  }
  int v242 = v246;
  if (v161 == v160)
  {
    uint64_t v243 = v246;
    unsigned int v76 = HIDWORD(v162);
    if (HIDWORD(v162)) {
      memmove(v246, v161, 8 * HIDWORD(v162));
    }
  }
  else
  {
    uint64_t v243 = v161;
    unsigned int v161 = v160;
    unsigned int v76 = HIDWORD(v162);
  }
  unint64_t v244 = __PAIR64__(v76, v162);
  int v245 = v163;
  unint64_t v162 = 8;
  int v163 = 0;
  uint64_t v247 = v249;
  uint64_t v248 = 0x800000000;
  int v77 = v166;
  if (v166)
  {
    if (v165 == v167)
    {
      if (v166 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v249, v167, 16 * v166);
      LODWORD(v248) = v77;
    }
    else
    {
      uint64_t v247 = v165;
      uint64_t v248 = v166;
      uint64_t v165 = v167;
      HIDWORD(v166) = 0;
    }
    LODWORD(v166) = 0;
  }
  uint64_t v234 = v238;
  if (v153 == v152)
  {
    uint64_t v235 = v238;
    unsigned int v78 = HIDWORD(v154);
    if (HIDWORD(v154)) {
      memmove(v238, v153, 8 * HIDWORD(v154));
    }
  }
  else
  {
    uint64_t v235 = v153;
    uint64_t v153 = v152;
    unsigned int v78 = HIDWORD(v154);
  }
  unint64_t v236 = __PAIR64__(v78, v154);
  int v237 = v155;
  unint64_t v154 = 8;
  int v155 = 0;
  unint64_t v239 = v241;
  uint64_t v240 = 0x800000000;
  int v79 = v158;
  if (v158)
  {
    if (v157 == v159)
    {
      if (v158 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v241, v159, 16 * v158);
      LODWORD(v240) = v79;
    }
    else
    {
      unint64_t v239 = v157;
      uint64_t v240 = v158;
      uint64_t v157 = v159;
      HIDWORD(v158) = 0;
    }
    LODWORD(v158) = 0;
  }
  int v111 = v116;
  if (v243 == v242)
  {
    uint64_t v112 = v116;
    int v80 = HIDWORD(v244);
    if (HIDWORD(v244)) {
      memmove(v116, v243, 8 * HIDWORD(v244));
    }
  }
  else
  {
    uint64_t v112 = v243;
    uint64_t v243 = v242;
    int v80 = HIDWORD(v244);
  }
  int v113 = v244;
  int v114 = v80;
  int v115 = v245;
  unint64_t v244 = 8;
  int v245 = 0;
  uint64_t v117 = v119;
  uint64_t v118 = 0x800000000;
  int v81 = v248;
  if (v248)
  {
    if (v247 == v249)
    {
      if (v248 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v119, v249, 16 * v248);
      LODWORD(v118) = v81;
    }
    else
    {
      uint64_t v117 = v247;
      uint64_t v118 = v248;
      uint64_t v247 = v249;
      HIDWORD(v248) = 0;
    }
    LODWORD(v248) = 0;
  }
  int v82 = v254;
  uint64_t v250 = v254;
  uint64_t v83 = v235;
  if (v235 == v234)
  {
    unsigned int v251 = v254;
    unsigned int v84 = HIDWORD(v236);
    if (HIDWORD(v236)) {
      memmove(v254, v235, 8 * HIDWORD(v236));
    }
    uint64_t v83 = v254;
  }
  else
  {
    unsigned int v251 = v235;
    uint64_t v235 = v234;
    unsigned int v84 = HIDWORD(v236);
  }
  unint64_t v252 = __PAIR64__(v84, v236);
  int v253 = v237;
  unint64_t v236 = 8;
  int v237 = 0;
  uint64_t v255 = v257;
  uint64_t v256 = 0x800000000;
  uint64_t v85 = v240;
  if (v240)
  {
    if (v239 == v241)
    {
      if (v240 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v257, v241, 16 * v240);
      LODWORD(v256) = v85;
      uint64_t v83 = v251;
      int v82 = v250;
    }
    else
    {
      uint64_t v255 = v239;
      uint64_t v256 = v240;
      unint64_t v239 = v241;
      HIDWORD(v240) = 0;
    }
    LODWORD(v240) = 0;
  }
  uint64_t v168 = v172;
  if (v83 == v82)
  {
    uint64_t v169 = v172;
    unsigned int v86 = HIDWORD(v252);
    if (HIDWORD(v252)) {
      memmove(v172, v82, 8 * HIDWORD(v252));
    }
  }
  else
  {
    uint64_t v169 = v83;
    unsigned int v251 = v82;
    unsigned int v86 = HIDWORD(v252);
  }
  unint64_t v170 = __PAIR64__(v86, v252);
  int v171 = v253;
  unint64_t v252 = 8;
  int v253 = 0;
  int v173 = v175;
  unint64_t v174 = 0x800000000;
  BOOL v87 = v255;
  if (v85)
  {
    if (v255 == v257)
    {
      if (v85 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v175, v257, 16 * v85);
      LODWORD(v174) = v85;
      BOOL v87 = v255;
    }
    else
    {
      int v173 = v255;
      unint64_t v174 = __PAIR64__(HIDWORD(v256), v85);
      uint64_t v255 = v257;
      HIDWORD(v256) = 0;
      BOOL v87 = v257;
    }
    LODWORD(v256) = 0;
  }
  if (v87 != v257) {
    free(v87);
  }
  if (v251 != v250) {
    free(v251);
  }
  if (v117 != v119) {
    free(v117);
  }
  if (v112 != v111) {
    free(v112);
  }
  if (v239 != v241) {
    free(v239);
  }
  if (v235 != v234) {
    free(v235);
  }
  if (v247 != v249) {
    free(v247);
  }
  if (v243 != v242) {
    free(v243);
  }
  unint64_t v88 = v201;
  int v111 = v116;
  if (v169 == v168)
  {
    uint64_t v112 = v116;
    int v89 = HIDWORD(v170);
    if (HIDWORD(v170)) {
      memmove(v116, v169, 8 * HIDWORD(v170));
    }
  }
  else
  {
    uint64_t v112 = v169;
    uint64_t v169 = v168;
    int v89 = HIDWORD(v170);
  }
  int v113 = v170;
  int v114 = v89;
  int v115 = v171;
  unint64_t v170 = 8;
  int v171 = 0;
  uint64_t v117 = v119;
  uint64_t v118 = 0x800000000;
  int v90 = v174;
  uint64_t v91 = v173;
  if (v174)
  {
    if (v173 == v175)
    {
      if (v174 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v119, v175, 16 * v174);
      LODWORD(v118) = v90;
      uint64_t v91 = v173;
    }
    else
    {
      uint64_t v117 = v173;
      uint64_t v118 = v174;
      int v173 = v175;
      HIDWORD(v174) = 0;
      uint64_t v91 = v175;
    }
    LODWORD(v174) = 0;
  }
  v119[16] = v88;
  if (v91 != v175) {
    free(v91);
  }
  if (v169 != v168) {
    free(v169);
  }
  if (v157 != v159) {
    free(v157);
  }
  if (v153 != v152) {
    free(v153);
  }
  if (v165 != v167) {
    free(v165);
  }
  if (v161 != v160) {
    free(v161);
  }
  if (v198 != v200) {
    free(v198);
  }
  if (v194 != v193) {
    free(v194);
  }
  sub_1CD4B9AEC((void **)&v218);
  if (v141 != v143) {
    free(v141);
  }
  if (v137 != v136) {
    free(v137);
  }
  if (v149 != v151) {
    free(v149);
  }
  if (v145 != v144) {
    free(v145);
  }
  if (v125 != v127) {
    free(v125);
  }
  if (v121 != v120) {
    free(v121);
  }
  if (v133 != v135) {
    free(v133);
  }
  if (__src != v128) {
    free(__src);
  }
  if (v117 != v119) {
    free(v117);
  }
  if (v112 != v111) {
    free(v112);
  }
  if (v100 != v102) {
    free(v100);
  }
  if (v96 != v95) {
    free(v96);
  }
  if (v108 != v110) {
    free(v108);
  }
  if (v104 != v103) {
    free(v104);
  }
}

_DWORD *sub_1CC3BCB14(_DWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  uint64_t v6 = *(void *)a2 + 4 * v5;
  if (*(_DWORD *)(a2 + 8))
  {
    if (v5)
    {
      uint64_t v7 = 4 * v5;
      uint64_t v8 = *(unsigned int **)a2;
      while (*v8 >= 0xFFFFFFFE)
      {
        ++v8;
        v7 -= 4;
        if (!v7) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v8 = *(unsigned int **)a2;
    }
  }
  else
  {
LABEL_6:
    uint64_t v8 = (unsigned int *)(*(void *)a2 + 4 * v5);
  }
  uint64_t v9 = *(void *)a2 + 4 * v5;
  if (v8 == (unsigned int *)v9) {
    return result;
  }
  uint64_t v10 = *(unsigned int *)(a3 + 8);
  unsigned int v11 = result[16];
  unsigned __int16 v12 = result + 18;
  int v13 = result[20];
  unsigned int v14 = *(_DWORD *)(a3 + 8);
  unsigned int v15 = v11;
  do
  {
    unsigned int v16 = *v8;
    if ((*v8 & 0x80000000) != 0)
    {
      unint64_t v17 = v16 & 0x7FFFFFFF;
      if ((v16 & 0x7FFFFFFF) >= 0x14000)
      {
        int v18 = result[22];
        if (!v18) {
          goto LABEL_22;
        }
        uint64_t v19 = *((void *)result + 9);
        int v20 = v18 - 1;
        unsigned int v21 = v20 & (37 * v16);
        int v22 = *(_DWORD *)(v19 + 4 * v21);
        if (v16 != v22)
        {
          int v23 = 1;
          while (v22 != -1)
          {
            unsigned int v24 = v21 + v23++;
            unsigned int v21 = v24 & v20;
            int v22 = *(_DWORD *)(v19 + 4 * v21);
            if (v16 == v22) {
              goto LABEL_25;
            }
          }
LABEL_22:
          ++v13;
LABEL_23:
          if (v14 >= *(_DWORD *)(a3 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a3 + 4 * v14) = v16;
          unsigned int v14 = *(_DWORD *)(a3 + 8) + 1;
          *(_DWORD *)(a3 + 8) = v14;
        }
      }
      else if (v17 >= v11 {
             || ((*(void *)(*(void *)result + ((v17 >> 3) & 0xFFFFFF8)) >> v16) & 1) == 0)
      }
      {
        if (v15 <= (int)v17 + 1) {
          unsigned int v15 = v17 + 1;
        }
        goto LABEL_23;
      }
    }
LABEL_25:
    unsigned int v25 = v8 + 1;
    while (v25 != (unsigned int *)v6)
    {
      unsigned int v26 = *v25++;
      if (v26 <= 0xFFFFFFFD)
      {
        uint64_t v8 = v25 - 1;
        goto LABEL_30;
      }
    }
    uint64_t v8 = (unsigned int *)v6;
LABEL_30:
    ;
  }
  while (v8 != (unsigned int *)v9);
  if (v10 != v14)
  {
    uint64_t v27 = result[2];
    if ((result[16] & 0x3F) != 0) {
      *(void *)(*(void *)result + 8 * v27 - 8) &= ~(-1 << (result[16] & 0x3F));
    }
    unsigned int v28 = v27;
    result[16] = v15;
    unsigned int v29 = v15 + 63;
    if (v27 != (v15 + 63) >> 6)
    {
      uint64_t v30 = v29 >> 6;
      if (v27 > v30)
      {
        result[2] = v30;
        unsigned int v28 = v29 >> 6;
      }
      else
      {
        if (v30 > result[3]) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v30 != v27)
        {
          int v31 = result + 18;
          int v32 = v13;
          uint64_t v33 = v10;
          bzero((void *)(*(void *)result + 8 * v27), 8 * (v30 - v27));
          int v13 = v32;
          uint64_t v10 = v33;
          unsigned __int16 v12 = v31;
        }
        unsigned int v28 = v30;
        v4[2] = v30;
        unsigned int v15 = v4[16];
      }
    }
    uint64_t v34 = v10;
    if ((v15 & 0x3F) != 0) {
      *(void *)(*(void *)v4 + 8 * v28 - 8) &= ~(-1 << (v15 & 0x3F));
    }
    uint64_t v35 = (uint64_t)v12;
    uint64_t result = sub_1CD45E50C(v12, v13);
    uint64_t v36 = v34;
    BOOL v37 = v14 >= v34;
    int v38 = v14 - v34;
    if (v38 != 0 && v37)
    {
      uint64_t v39 = 4 * v36;
      do
      {
        int v40 = *(_DWORD *)(*(void *)a3 + v39);
        if ((v40 & 0x7FFFFFFFu) >= 0x14000)
        {
          int v41 = *(_DWORD *)(*(void *)a3 + v39);
          uint64_t result = sub_1CD521094(v35, &v41, (uint64_t)v42);
        }
        else
        {
          *(void *)(*(void *)v4 + (((unint64_t)(v40 & 0x7FFFFFFF) >> 3) & 0xFFFFFF8)) |= 1 << v40;
        }
        v39 += 4;
        --v38;
      }
      while (v38);
    }
  }
  return result;
}

uint64_t sub_1CC3BCE94(uint64_t a1, int a2)
{
  int v25 = a2;
  if ((a2 & 0x80000000) == 0) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 72);
  if (!v2)
  {
LABEL_10:
    uint64_t v13 = *(void *)(a1 + 104);
    uint64_t v11 = a1 + 104;
    uint64_t v12 = v13;
    int v14 = *(_DWORD *)(v11 + 16);
    if (v14)
    {
      int v15 = v14 - 1;
      unsigned int v16 = (v14 - 1) & (37 * a2);
      unint64_t v17 = (char *)(v12 + 4 * v16);
      int v18 = *(_DWORD *)v17;
      if (*(_DWORD *)v17 == a2) {
        return 0;
      }
      uint64_t v19 = 0;
      int v20 = 1;
      while (v18 != -1)
      {
        uint64_t v7 = 0;
        if (v19) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v18 == -2;
        }
        if (v21) {
          uint64_t v19 = v17;
        }
        unsigned int v22 = v16 + v20++;
        unsigned int v16 = v22 & v15;
        unint64_t v17 = (char *)(v12 + 4 * v16);
        int v18 = *(_DWORD *)v17;
        if (*(_DWORD *)v17 == a2) {
          return v7;
        }
      }
      if (v19) {
        int v23 = v19;
      }
      else {
        int v23 = v17;
      }
    }
    else
    {
      int v23 = 0;
    }
    unsigned int v24 = sub_1CBA855C4((char **)v11, (uint64_t)&v25, &v25, v23);
    *(_DWORD *)unsigned int v24 = v25;
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = v2 - 1;
  unsigned int v5 = (v2 - 1) & (37 * a2);
  int v6 = *(_DWORD *)(v3 + 4 * v5);
  if (v6 != a2)
  {
    int v9 = 1;
    while (v6 != -1)
    {
      uint64_t v7 = 0;
      unsigned int v10 = v5 + v9++;
      unsigned int v5 = v10 & v4;
      int v6 = *(_DWORD *)(v3 + 4 * v5);
      if (v6 == a2) {
        return v7;
      }
    }
    goto LABEL_10;
  }
  return 0;
}

void sub_1CC3BCFB0(llvm *a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  unsigned int v4 = a3;
  unsigned int v5 = a2;
  uint64_t v6 = (uint64_t)a1;
  v241[4] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *((unsigned int *)a2 + 18);
  if (v7)
  {
    uint64_t v8 = (llvm **)a2[8];
    int v9 = &v8[v7];
    while (1)
    {
      uint64_t v11 = *v8;
      unint64_t v12 = *((void *)*v8 + 1);
      if (v12 < 8) {
        goto LABEL_23;
      }
      unsigned int v13 = *((_DWORD *)v5 + 2);
      int v14 = (void *)*v5;
      if (!v13) {
        break;
      }
      uint64_t v15 = v14[3 * v13 - 2];
      unsigned int v16 = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3;
      unsigned int v17 = (v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24);
      int v18 = (void *)*v5;
      unint64_t v19 = *((unsigned int *)v5 + 2);
      if (v16 >= v17) {
        goto LABEL_14;
      }
      do
      {
        unint64_t v20 = v19 >> 1;
        uint64_t v21 = v18[3 * (v19 >> 1) + 1];
        LODWORD(v21) = (v21 >> 1) & 3 | *(_DWORD *)((v21 & 0xFFFFFFFFFFFFFFF8) + 24);
        v19 -= (v19 >> 1) + 1;
        BOOL v22 = v16 >= v21;
        if (v16 >= v21) {
          unint64_t v23 = v20 + 1;
        }
        else {
          unint64_t v23 = 0;
        }
        v18 += 3 * v23;
        if (!v22) {
          unint64_t v19 = v20;
        }
      }
      while (v19);
LABEL_15:
      if (v18 == &v14[3 * v13]
        || (unsigned int v24 = *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24) | (v12 >> 1) & 3,
            ((*v18 >> 1) & 3 | *(_DWORD *)((*v18 & 0xFFFFFFFFFFFFFFF8) + 24)) > v24)
        || (int v25 = (llvm *)v18[2]) == 0)
      {
        unsigned int v26 = *(llvm::Value ***)(v6 + 16);
        uint64_t v27 = v6;
        unsigned int v28 = "Value not live at VNInfo def and not marked unused";
        goto LABEL_21;
      }
      if (v25 != v11)
      {
        unsigned int v26 = *(llvm::Value ***)(v6 + 16);
        uint64_t v27 = v6;
        unsigned int v28 = "Live segment at def has different VNInfo";
LABEL_21:
        unsigned int v29 = (llvm *)v6;
        sub_1CC3B670C(v27, v28, v26);
        goto LABEL_22;
      }
      uint64_t v30 = *(void *)(*(void *)(v6 + 600) + 288);
      unint64_t v31 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16);
      if (v31)
      {
        int v32 = (unint64_t *)(v31 + 24);
      }
      else
      {
        uint64_t v61 = *(unsigned int *)(v30 + 544);
        if (v61)
        {
          unint64_t v62 = *(void **)(v30 + 536);
          unint64_t v63 = *(unsigned int *)(v30 + 544);
          do
          {
            unint64_t v64 = v63 >> 1;
            unint64_t v65 = &v62[2 * (v63 >> 1)];
            uint64_t v67 = *v65;
            uint64_t v66 = v65 + 2;
            v63 += ~(v63 >> 1);
            if (((v67 >> 1) & 3 | *(_DWORD *)((v67 & 0xFFFFFFFFFFFFFFF8) + 24)) < v24) {
              unint64_t v62 = v66;
            }
            else {
              unint64_t v63 = v64;
            }
          }
          while (v63);
          if (v62 == (void *)(*(void *)(v30 + 536) + 16 * v61)
            || ((*v62 >> 1) & 3 | *(_DWORD *)((*v62 & 0xFFFFFFFFFFFFFFF8) + 24)) > v24)
          {
            v62 -= 2;
          }
        }
        else
        {
          unint64_t v62 = *(void **)(v30 + 536);
        }
        int v32 = v62 + 1;
      }
      unint64_t v33 = *v32;
      if (!*v32)
      {
        unsigned int v26 = *(llvm::Value ***)(v6 + 16);
        uint64_t v27 = v6;
        unsigned int v28 = "Invalid VNInfo definition index";
        goto LABEL_21;
      }
      uint64_t v34 = *((void *)*v8 + 1) & 6;
      if ((v12 & 6) == 0)
      {
        if (v12 != *(void *)(*(void *)(v30 + 392) + 16 * *(unsigned int *)(v33 + 24)))
        {
          uint64_t v55 = v6;
          unint64_t v56 = "PHIDef VNInfo is not defined at MBB start";
          goto LABEL_77;
        }
        goto LABEL_23;
      }
      if (!v31)
      {
        uint64_t v55 = v6;
        unint64_t v56 = "No instruction at VNInfo def index";
        goto LABEL_77;
      }
      if (v4)
      {
        unint64_t v35 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16);
        if ((*(_WORD *)(v31 + 44) & 4) != 0)
        {
          unint64_t v35 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 16);
          do
            unint64_t v35 = *(void *)v35 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v35 + 44) & 4) != 0);
        }
        uint64_t v36 = *(void *)(v31 + 24) + 48;
        BOOL v37 = *(unsigned int **)(v35 + 32);
        uint64_t v38 = *(unsigned int *)(v35 + 40);
        uint64_t v39 = &v37[8 * v38];
        if (!v38)
        {
          unint64_t v58 = *(void *)(v35 + 8);
          if (v58 == v36)
          {
            unint64_t v35 = *(void *)(v31 + 24) + 48;
          }
          else
          {
            unint64_t v35 = *(void *)(v31 + 24) + 48;
            if ((*(_WORD *)(v58 + 44) & 4) != 0)
            {
              while (1)
              {
                unint64_t v59 = v58;
                uint64_t v60 = *(unsigned int *)(v58 + 40);
                if (v60) {
                  break;
                }
                unint64_t v58 = *(void *)(v58 + 8);
                if (v58 == v36 || (*(_WORD *)(v58 + 44) & 4) == 0)
                {
                  unint64_t v35 = *(void *)(v31 + 24) + 48;
                  goto LABEL_100;
                }
              }
              unint64_t v35 = v58;
LABEL_100:
              BOOL v37 = *(unsigned int **)(v59 + 32);
              uint64_t v39 = &v37[8 * v60];
              uint64_t v6 = (uint64_t)a1;
            }
          }
        }
        if (v37 == v39)
        {
          sub_1CC3B6180(v6, "Defining instruction does not modify register", v31);
          sub_1CC3BE828(a1, (llvm *)v5, a3, (llvm *)a4);
          sub_1CC3BAE14(v11);
          uint64_t v6 = (uint64_t)a1;
          unint64_t v12 = *((void *)v11 + 1);
          goto LABEL_75;
        }
        char v40 = 0;
        int v41 = 0;
        while (2)
        {
          unint64_t v42 = *v37;
          if ((v42 & 0x10000FF) == 0x1000000)
          {
            unsigned int v43 = v37[1];
            if ((a3 & 0x80000000) != 0)
            {
              if (v43 != a3) {
                goto LABEL_53;
              }
            }
            else
            {
              if (v43 - 1 > 0x3FFFFFFE) {
                goto LABEL_53;
              }
              uint64_t v44 = *(void *)(v6 + 40);
              unint64_t v45 = *(unsigned int *)(*(void *)(v44 + 8) + 24 * v43 + 16);
              unsigned int v46 = (_WORD *)(*(void *)(v44 + 56) + ((v45 >> 3) & 0x1FFFFFFE));
              unsigned __int16 v47 = *v46 + (v45 & 0xF) * v43;
              if (a3 != v47)
              {
                unsigned int v48 = v46 + 1;
                do
                {
                  int v50 = *v48++;
                  int v49 = v50;
                  v47 += v50;
                  if (!v50) {
                    unsigned int v48 = 0;
                  }
                  if (v49) {
                    BOOL v51 = v47 == a3;
                  }
                  else {
                    BOOL v51 = 1;
                  }
                }
                while (!v51);
                if (!v49) {
                  goto LABEL_53;
                }
              }
            }
            if (!a4 || (*(void *)(*(void *)(*(void *)(v6 + 40) + 232) + 8 * ((v42 >> 8) & 0xFFF)) & a4) != 0)
            {
              v41 |= (v42 & 0x40000000) >> 30;
              char v40 = 1;
            }
          }
LABEL_53:
          v37 += 8;
          if (v37 == v39)
          {
            unint64_t v52 = *(void *)(v35 + 8);
            if (v52 == v36) {
              goto LABEL_63;
            }
            BOOL v37 = v39;
            unint64_t v35 = *(void *)(v31 + 24) + 48;
            if ((*(_WORD *)(v52 + 44) & 4) != 0)
            {
              while (1)
              {
                unint64_t v53 = v52;
                uint64_t v54 = *(unsigned int *)(v52 + 40);
                if (v54) {
                  break;
                }
                unint64_t v52 = *(void *)(v52 + 8);
                if (v52 == v36 || (*(_WORD *)(v52 + 44) & 4) == 0)
                {
                  unint64_t v35 = *(void *)(v31 + 24) + 48;
                  goto LABEL_61;
                }
              }
              unint64_t v35 = v52;
LABEL_61:
              BOOL v37 = *(unsigned int **)(v53 + 32);
              uint64_t v39 = &v37[8 * v54];
            }
          }
          if (v37 == v39)
          {
LABEL_63:
            if (v40)
            {
              if ((v41 & 1) == 0)
              {
LABEL_75:
                unsigned int v4 = a3;
                if ((v12 & 6) != 4)
                {
                  uint64_t v55 = v6;
                  unint64_t v56 = "Non-PHI, non-early clobber def must be at a register slot";
LABEL_77:
                  unint64_t v57 = v33;
                  unsigned int v29 = (llvm *)v6;
                  sub_1CC3B5D94(v55, v56, v57);
LABEL_22:
                  sub_1CC3BE828(v29, (llvm *)v5, a3, (llvm *)a4);
                  sub_1CC3BAE14(v11);
                  uint64_t v6 = (uint64_t)v29;
                }
                break;
              }
            }
            else
            {
              sub_1CC3B6180(v6, "Defining instruction does not modify register", v31);
              sub_1CC3BE828(a1, (llvm *)v5, a3, (llvm *)a4);
              sub_1CC3BAE14(v11);
              uint64_t v6 = (uint64_t)a1;
              unint64_t v12 = *((void *)v11 + 1);
              if ((v41 & 1) == 0) {
                goto LABEL_75;
              }
              uint64_t v34 = *((void *)v11 + 1) & 6;
            }
            unsigned int v4 = a3;
            if (v34 != 2)
            {
              uint64_t v55 = v6;
              unint64_t v56 = "Early clobber def must be at an early-clobber slot";
              goto LABEL_77;
            }
            break;
          }
          continue;
        }
      }
LABEL_23:
      if (++v8 == v9) {
        goto LABEL_101;
      }
    }
    unsigned int v13 = 0;
LABEL_14:
    int v18 = &v14[3 * v13];
    goto LABEL_15;
  }
LABEL_101:
  unsigned int v68 = *((_DWORD *)v5 + 2);
  unsigned __int16 v69 = (llvm *)a4;
  if (v68)
  {
    uint64_t v70 = (llvm *)*v5;
    uint64_t v223 = *v5 + 24 * v68;
    unsigned int v71 = v4;
    uint64_t v218 = (v4 & 0x7FFFFFFF) + 1;
    unsigned int v226 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
    unsigned int v225 = v4;
    unint64_t v219 = v4 & 0x7FFFFFFF;
    unint64_t v220 = v5;
    while (1)
    {
      unsigned int v72 = (llvm *)*((void *)v70 + 2);
      uint64_t v73 = *(unsigned int *)v72;
      if (v73 >= *((_DWORD *)v5 + 18) || v72 != *(llvm **)(v5[8] + 8 * v73))
      {
        sub_1CC3B670C(v6, "Foreign valno in live segment", *(llvm::Value ***)(v6 + 16));
        sub_1CC3BE828(a1, (llvm *)v5, v71, v69);
        sub_1CC3BE894(v70);
        sub_1CC3BAE14(v72);
        uint64_t v6 = (uint64_t)a1;
      }
      if (*((void *)v72 + 1) <= 7uLL)
      {
        sub_1CC3B670C(v6, "Live segment valno is marked unused", *(llvm::Value ***)(v6 + 16));
        sub_1CC3BE828(a1, (llvm *)v5, v71, v69);
        sub_1CC3BE894(v70);
        uint64_t v6 = (uint64_t)a1;
      }
      uint64_t v74 = *(void *)(v6 + 600);
      uint64_t v75 = *(void *)v70;
      uint64_t v76 = *(void *)(v74 + 288);
      if (*(void *)v70 >= 8uLL && (uint64_t v77 = *(void *)((v75 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
      {
        unsigned int v78 = (unint64_t *)(v77 + 24);
      }
      else
      {
        uint64_t v124 = *(unsigned int *)(v76 + 544);
        if (v124)
        {
          unsigned int v125 = *(_DWORD *)((v75 & 0xFFFFFFFFFFFFFFF8) + 24) | (v75 >> 1) & 3;
          uint64_t v126 = *(void **)(v76 + 536);
          unint64_t v127 = *(unsigned int *)(v76 + 544);
          do
          {
            unint64_t v128 = v127 >> 1;
            uint64_t v129 = &v126[2 * (v127 >> 1)];
            uint64_t v131 = *v129;
            unint64_t v130 = v129 + 2;
            v127 += ~(v127 >> 1);
            if (((v131 >> 1) & 3 | *(_DWORD *)((v131 & 0xFFFFFFFFFFFFFFF8) + 24)) < v125) {
              uint64_t v126 = v130;
            }
            else {
              unint64_t v127 = v128;
            }
          }
          while (v127);
          if (v126 == (void *)(*(void *)(v76 + 536) + 16 * v124)
            || ((*v126 >> 1) & 3 | *(_DWORD *)((*v126 & 0xFFFFFFFFFFFFFFF8) + 24)) > v125)
          {
            v126 -= 2;
          }
        }
        else
        {
          uint64_t v126 = *(void **)(v76 + 536);
        }
        unsigned int v78 = v126 + 1;
      }
      unint64_t v79 = *v78;
      if (!*v78)
      {
        uint64_t v85 = *(llvm::Value ***)(v6 + 16);
        uint64_t v86 = v6;
        BOOL v87 = "Bad start of live segment, no basic block";
LABEL_131:
        sub_1CC3B670C(v86, v87, v85);
        unsigned int v95 = a1;
        unint64_t v96 = (llvm *)v5;
        unsigned int v97 = v71;
        int v98 = v69;
LABEL_132:
        sub_1CC3BE828(v95, v96, v97, v98);
        sub_1CC3BE894(v70);
        uint64_t v6 = (uint64_t)a1;
        goto LABEL_133;
      }
      if (v75 != *(void *)(*(void *)(v76 + 392) + 16 * *(unsigned int *)(v79 + 24))
        && v75 != *((void *)v72 + 1))
      {
        unint64_t v80 = *v78;
        sub_1CC3B5D94(v6, "Live segment must begin at MBB entry or valno def", *v78);
        sub_1CC3BE828(a1, (llvm *)v5, v71, v69);
        sub_1CC3BE894(v70);
        unint64_t v79 = v80;
        uint64_t v6 = (uint64_t)a1;
        uint64_t v74 = *((void *)a1 + 75);
      }
      uint64_t v81 = *((void *)v70 + 1);
      unsigned int v82 = (v81 >> 1) & 3;
      unint64_t v83 = v81 & 0xFFFFFFFFFFFFFFF8;
      if (v82) {
        unint64_t v84 = v83 | (2 * (v82 - 1));
      }
      else {
        unint64_t v84 = *(void *)v83 | 6;
      }
      uint64_t v88 = *(void *)(v74 + 288);
      if (v84 >= 8 && (uint64_t v89 = *(void *)((v84 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
      {
        int v90 = (unint64_t *)(v89 + 24);
      }
      else
      {
        uint64_t v132 = *(unsigned int *)(v88 + 544);
        if (v132)
        {
          unsigned int v133 = *(_DWORD *)((v84 & 0xFFFFFFFFFFFFFFF8) + 24) | (v84 >> 1) & 3;
          uint64_t v134 = *(void **)(v88 + 536);
          unint64_t v135 = *(unsigned int *)(v88 + 544);
          do
          {
            unint64_t v136 = v135 >> 1;
            __int16 v137 = &v134[2 * (v135 >> 1)];
            uint64_t v139 = *v137;
            unint64_t v138 = v137 + 2;
            v135 += ~(v135 >> 1);
            if (((v139 >> 1) & 3 | *(_DWORD *)((v139 & 0xFFFFFFFFFFFFFFF8) + 24)) < v133) {
              uint64_t v134 = v138;
            }
            else {
              unint64_t v135 = v136;
            }
          }
          while (v135);
          if (v134 == (void *)(*(void *)(v88 + 536) + 16 * v132)
            || ((*v134 >> 1) & 3 | *(_DWORD *)((*v134 & 0xFFFFFFFFFFFFFFF8) + 24)) > v133)
          {
            v134 -= 2;
          }
        }
        else
        {
          uint64_t v134 = *(void **)(v88 + 536);
        }
        int v90 = v134 + 1;
      }
      unint64_t v91 = *v90;
      if (!*v90)
      {
        uint64_t v85 = *(llvm::Value ***)(v6 + 16);
        uint64_t v86 = v6;
        BOOL v87 = "Bad end of live segment, no basic block";
        goto LABEL_131;
      }
      if (v81 == *(void *)(*(void *)(v88 + 392) + 16 * *(unsigned int *)(v91 + 24) + 8)) {
        goto LABEL_133;
      }
      if ((v4 & 0x80000000) == 0)
      {
        uint64_t v92 = *((void *)v72 + 1);
        if ((v92 & 6) == 0 && *(void *)v70 == v92 && v81 == (v92 & 0xFFFFFFFFFFFFFFF8 | 6)) {
          goto LABEL_133;
        }
      }
      unint64_t v93 = (unint64_t)v69;
      if (v82) {
        unint64_t v94 = v83 | (2 * (v82 - 1));
      }
      else {
        unint64_t v94 = *(void *)v83 | 6;
      }
      if (v94 < 8 || (unint64_t v99 = *(void *)((v94 & 0xFFFFFFFFFFFFFFF8) + 16)) == 0)
      {
        sub_1CC3B5D94(v6, "Live segment doesn't end at a valid instruction", v91);
        unsigned int v95 = a1;
        unint64_t v96 = (llvm *)v5;
        unsigned int v97 = v71;
        unsigned __int16 v69 = (llvm *)v93;
        int v98 = (llvm *)v93;
        goto LABEL_132;
      }
      unint64_t v224 = *v90;
      if ((v81 & 6) == 0)
      {
        unint64_t v100 = v79;
        sub_1CC3B5D94(v6, "Live segment ends at B slot of an instruction", v91);
        sub_1CC3BE828(a1, (llvm *)v5, v71, (llvm *)v93);
        sub_1CC3BE894(v70);
        unint64_t v79 = v100;
        unint64_t v91 = v224;
        uint64_t v6 = (uint64_t)a1;
        uint64_t v81 = *((void *)v70 + 1);
      }
      if ((~(_BYTE)v81 & 6) == 0 && (*(void *)v70 & 0xFFFFFFFFFFFFFFF8) != (v81 & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v101 = v79;
        sub_1CC3B5D94(v6, "Live segment ending at dead slot spans instructions", v91);
        sub_1CC3BE828(a1, (llvm *)v5, v71, (llvm *)v93);
        sub_1CC3BE894(v70);
        unint64_t v79 = v101;
        unint64_t v91 = v224;
        uint64_t v6 = (uint64_t)a1;
      }
      if ((*(unsigned char *)(*(void *)(*(void *)(v6 + 16) + 360) + 1) & 1) != 0
        && (*((void *)v70 + 1) & 6) == 2
        && ((llvm *)((char *)v70 + 24) == (llvm *)(*v5 + 24 * *((unsigned int *)v5 + 2))
         || *((void *)v70 + 3) != *((void *)v70 + 1)))
      {
        unint64_t v102 = v79;
        sub_1CC3B5D94(v6, "Live segment ending at early clobber slot must be redefined by an EC def in the same instruction", v91);
        sub_1CC3BE828(a1, (llvm *)v5, v71, (llvm *)v93);
        sub_1CC3BE894(v70);
        unint64_t v79 = v102;
        unint64_t v91 = v224;
        uint64_t v6 = (uint64_t)a1;
      }
      int v221 = v70;
      int v229 = v72;
      if ((v4 & 0x80000000) != 0) {
        break;
      }
LABEL_220:
      uint64_t v145 = *((void *)v72 + 1);
      if (*(void *)v70 != v145)
      {
        unsigned __int16 v69 = (llvm *)v93;
        unint64_t v146 = v219;
LABEL_225:
        unint64_t v239 = v241;
        uint64_t v240 = 0x400000000;
        if (v69)
        {
          unint64_t v147 = v79;
          uint64_t v148 = *(void *)(v6 + 600);
          uint64_t v149 = (void *)(v148 + 408);
          unint64_t v150 = *(unsigned int *)(v148 + 416);
          if (v146 >= v150)
          {
            sub_1CB9153B8((uint64_t)v149, v218 - v150, *(void *)(v148 + 424));
LABEL_372:
            operator new();
          }
          uint64_t v151 = *(void *)(*v149 + 8 * v146);
          if (!v151) {
            goto LABEL_372;
          }
          llvm::LiveInterval::computeSubRangeUndefs(v151, (uint64_t)&v239, a4, *(void **)(v6 + 48), *((void *)a1 + 77));
          uint64_t v6 = (uint64_t)a1;
          unint64_t v91 = v224;
          unsigned int v71 = v225;
          unint64_t v79 = v147;
        }
        if ((v4 & 0x80000000) != 0) {
          goto LABEL_233;
        }
LABEL_230:
        if (*(unsigned char *)(v79 + 184))
        {
          if (v79 != v91) {
            goto LABEL_357;
          }
LABEL_359:
          if (v239 != v241)
          {
            free(v239);
            uint64_t v6 = (uint64_t)a1;
          }
          unsigned __int16 v69 = (llvm *)a4;
          goto LABEL_133;
        }
LABEL_233:
        while (1)
        {
          uint64_t v152 = *((void *)v72 + 1);
          BOOL v228 = (v152 & 6) == 0
              && v152 == *(void *)(*(void *)(*(void *)(*(void *)(v6 + 600) + 288) + 392)
                                   + 16 * *(unsigned int *)(v79 + 24));
          unint64_t v154 = *(unint64_t **)(v79 + 64);
          uint64_t v153 = *(unint64_t **)(v79 + 72);
          if (v154 != v153) {
            break;
          }
LABEL_356:
          unint64_t v91 = v224;
          uint64_t v70 = v221;
          unsigned int v4 = a3;
          unsigned int v72 = v229;
          if (v79 == v224) {
            goto LABEL_359;
          }
LABEL_357:
          unint64_t v79 = *(void *)(v79 + 8);
          if ((v4 & 0x80000000) == 0) {
            goto LABEL_230;
          }
        }
        if (a4) {
          char v155 = v228;
        }
        else {
          char v155 = 0;
        }
        unint64_t v231 = v79;
        while (2)
        {
          unint64_t v156 = *v154;
          unint64_t v157 = *(void *)(*(void *)(*(void *)(*(void *)(v6 + 600) + 288) + 392)
                           + 16 * *(unsigned int *)(*v154 + 24)
                           + 8);
          if (*(unsigned char *)(v79 + 184))
          {
            unint64_t v158 = *(void *)(v156 + 48) & 0xFFFFFFFFFFFFFFF8;
            if (!v158 || (*(unsigned char *)v158 & 4) == 0)
            {
              while ((*(_WORD *)(v158 + 44) & 4) != 0)
                unint64_t v158 = *(void *)v158 & 0xFFFFFFFFFFFFFFF8;
            }
            while (v158 != v156 + 48)
            {
              __int16 v159 = *(_WORD *)(v158 + 44);
              uint64_t v160 = *(void *)(*(void *)(v158 + 16) + 8);
              if ((v159 & 0xC) != 0 && (v159 & 4) == 0)
              {
                unint64_t v162 = v158;
                if ((v160 & 0x80) != 0)
                {
LABEL_262:
                  uint64_t v163 = *(void *)(v6 + 616);
                  goto LABEL_264;
                }
                while ((*(_WORD *)(v162 + 44) & 8) != 0)
                {
                  unint64_t v162 = *(void *)(v162 + 8);
                  if ((*(unsigned char *)(*(void *)(v162 + 16) + 8) & 0x80) != 0) {
                    goto LABEL_262;
                  }
                }
              }
              else if ((v160 & 0x80) != 0)
              {
                uint64_t v163 = *(void *)(v6 + 616);
                unint64_t v164 = v158;
                if ((v159 & 4) != 0)
                {
                  do
                    unint64_t v164 = *(void *)v164 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v164 + 44) & 4) != 0);
                }
                else
                {
LABEL_264:
                  unint64_t v164 = v158;
                }
                if ((v159 & 8) != 0)
                {
                  do
                    unint64_t v158 = *(void *)(v158 + 8);
                  while ((*(_WORD *)(v158 + 44) & 8) != 0);
                }
                unint64_t v165 = *(void *)(v158 + 8);
                if (v164 != v165)
                {
                  while (1)
                  {
                    unsigned int v166 = **(unsigned __int16 **)(v164 + 16);
                    BOOL v167 = v166 > 0x17;
                    int v168 = (1 << v166) & 0x83E000;
                    if (v167 || v168 == 0) {
                      break;
                    }
                    unint64_t v164 = *(void *)(v164 + 8);
                    if (v164 == v165)
                    {
                      unint64_t v164 = v165;
                      break;
                    }
                  }
                }
                uint64_t v170 = *(void *)(v163 + 368);
                uint64_t v171 = *(unsigned int *)(v163 + 384);
                if (v171)
                {
                  LODWORD(v172) = ((v164 >> 4) ^ (v164 >> 9)) & (v171 - 1);
                  int v173 = (uint64_t *)(v170 + 16 * v172);
                  uint64_t v174 = *v173;
                  if (v164 != *v173)
                  {
                    int v175 = 1;
                    while (v174 != -4096)
                    {
                      int v176 = v172 + v175++;
                      uint64_t v172 = v176 & (v171 - 1);
                      uint64_t v174 = *(void *)(v170 + 16 * v172);
                      if (v164 == v174)
                      {
                        int v173 = (uint64_t *)(v170 + 16 * v172);
                        goto LABEL_280;
                      }
                    }
                    goto LABEL_279;
                  }
                }
                else
                {
LABEL_279:
                  int v173 = (uint64_t *)(v170 + 16 * v171);
                }
LABEL_280:
                unint64_t v157 = v173[1] & 0xFFFFFFFFFFFFFFF8 | 6;
                break;
              }
              unint64_t v158 = *(void *)v158 & 0xFFFFFFFFFFFFFFF8;
              if (!v158 || (*(unsigned char *)v158 & 4) == 0)
              {
                while ((*(_WORD *)(v158 + 44) & 4) != 0)
                  unint64_t v158 = *(void *)v158 & 0xFFFFFFFFFFFFFFF8;
              }
            }
          }
          unsigned int v177 = (v157 >> 1) & 3;
          unint64_t v178 = v157 & 0xFFFFFFFFFFFFFFF8;
          if (v177) {
            uint64_t v179 = v178 | (2 * (v177 - 1));
          }
          else {
            uint64_t v179 = *(void *)v178 | 6;
          }
          unsigned int v180 = *((_DWORD *)v5 + 2);
          uint64_t v181 = *v5;
          if (v180)
          {
            uint64_t v182 = *(void *)(v181 + 24 * v180 - 16);
            unsigned int v183 = *(_DWORD *)((v179 & 0xFFFFFFFFFFFFFFF8) + 24) | (v179 >> 1) & 3;
            unsigned int v184 = (v182 >> 1) & 3 | *(_DWORD *)((v182 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v185 = (void *)*v5;
            unint64_t v186 = *((unsigned int *)v5 + 2);
            if (v183 < v184)
            {
              do
              {
                unint64_t v187 = v186 >> 1;
                uint64_t v188 = v185[3 * (v186 >> 1) + 1];
                LODWORD(v188) = (v188 >> 1) & 3 | *(_DWORD *)((v188 & 0xFFFFFFFFFFFFFFF8) + 24);
                v186 -= (v186 >> 1) + 1;
                BOOL v189 = v183 >= v188;
                if (v183 >= v188) {
                  unint64_t v190 = v187 + 1;
                }
                else {
                  unint64_t v190 = 0;
                }
                v185 += 3 * v190;
                if (!v189) {
                  unint64_t v186 = v187;
                }
              }
              while (v186);
LABEL_294:
              if (v185 == (void *)(v181 + 24 * v180)
                || ((*v185 >> 1) & 3 | *(_DWORD *)((*v185 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v179 & 0xFFFFFFFFFFFFFFF8) + 24) | (v179 >> 1) & 3))
              {
                uint64_t v191 = 0;
              }
              else
              {
                uint64_t v191 = (llvm *)v185[2];
              }
              if (v191) {
                char v192 = 1;
              }
              else {
                char v192 = v155;
              }
              if (v192)
              {
                char v193 = v228;
                if (v191 == v229) {
                  char v193 = 1;
                }
                if (v193) {
                  goto LABEL_312;
                }
                unsigned int v194 = v71;
                unint64_t v195 = (llvm *)v6;
                sub_1CC3B5D94(v6, "Different value live out of predecessor", *v154);
                int v196 = (llvm *)sub_1CC3BE828(v195, (llvm *)v5, v194, (llvm *)a4);
                uint64_t v197 = (llvm::raw_ostream *)llvm::errs(v196);
                uint64_t v198 = v197;
                unint64_t v199 = (_DWORD *)*((void *)v197 + 4);
                if (*((void *)v197 + 3) - (void)v199 > 6uLL)
                {
                  *(_DWORD *)((char *)v199 + 3) = 589328238;
                  *unint64_t v199 = 1852596566;
                  *((void *)v197 + 4) += 7;
                }
                else
                {
                  llvm::raw_ostream::write(v197, "Valno #", 7uLL);
                }
                sub_1CD098D14(v198, *(unsigned int *)v191, 0, 0, 0);
                unint64_t v200 = (void *)*((void *)v198 + 4);
                unsigned int v5 = v220;
                if (*((void *)v198 + 3) - (void)v200 > 0xCuLL)
                {
                  qmemcpy(v200, " live out of ", 13);
                  *((void *)v198 + 4) += 13;
                }
                else
                {
                  llvm::raw_ostream::write(v198, " live out of ", 0xDuLL);
                }
                uint64_t v238 = (void **)&v236;
                unint64_t v236 = (void (**)(void **))&unk_1F260D508;
                unint64_t v237 = v156;
                v226((uint64_t)&v236, v198);
                uint64_t v201 = (unsigned char *)*((void *)v198 + 4);
                if ((unint64_t)v201 >= *((void *)v198 + 3))
                {
                  llvm::raw_ostream::write(v198, 64);
                }
                else
                {
                  *((void *)v198 + 4) = v201 + 1;
                  *uint64_t v201 = 64;
                }
                v234[0] = v157;
                llvm::SlotIndex::print((llvm::SlotIndex *)v234, v198);
                uint64_t v208 = (void *)*((void *)v198 + 4);
                if (*((void *)v198 + 3) - (void)v208 > 7uLL)
                {
                  *uint64_t v208 = 0x23206F6E6C61560ALL;
                  *((void *)v198 + 4) += 8;
                }
                else
                {
                  llvm::raw_ostream::write(v198, "\nValno #", 8uLL);
                }
                sub_1CD098D14(v198, *(unsigned int *)v229, 0, 0, 0);
                uint64_t v209 = *((void *)v198 + 4);
                if ((unint64_t)(*((void *)v198 + 3) - v209) > 0xA)
                {
                  *(_DWORD *)(v209 + 7) = 544175214;
                  *(void *)uint64_t v209 = *(void *)" live into ";
                  *((void *)v198 + 4) += 11;
                }
                else
                {
                  llvm::raw_ostream::write(v198, " live into ", 0xBuLL);
                }
                uint64_t v235 = v234;
                v234[0] = &unk_1F260D508;
                v234[1] = v231;
                v226((uint64_t)v234, v198);
                BOOL v210 = (unsigned char *)*((void *)v198 + 4);
                if ((unint64_t)v210 >= *((void *)v198 + 3))
                {
                  llvm::raw_ostream::write(v198, 64);
                }
                else
                {
                  *((void *)v198 + 4) = v210 + 1;
                  unsigned char *v210 = 64;
                }
                uint64_t v233 = *(void *)(*(void *)(*(void *)(*((void *)a1 + 75) + 288) + 392)
                                 + 16 * *(unsigned int *)(v231 + 24));
                llvm::SlotIndex::print((llvm::SlotIndex *)&v233, v198);
                int v213 = (unsigned char *)*((void *)v198 + 4);
                if ((unint64_t)v213 >= *((void *)v198 + 3))
                {
                  llvm::raw_ostream::write(v198, 10);
                }
                else
                {
                  *((void *)v198 + 4) = v213 + 1;
                  *int v213 = 10;
                }
                unsigned int v71 = v225;
                if (v235 == v234)
                {
                  (*(void (**)(void *))(v234[0] + 32))(v234);
                }
                else if (v235)
                {
                  (*(void (**)(void))(*v235 + 40))();
                }
                uint64_t v214 = v238;
                if (v238 != (void **)&v236)
                {
LABEL_343:
                  if (v214) {
                    (*((void (**)(void **))*v214 + 5))(v214);
                  }
LABEL_345:
                  unint64_t v79 = v231;
                  uint64_t v6 = (uint64_t)a1;
LABEL_312:
                  if (++v154 == v153) {
                    goto LABEL_356;
                  }
                  continue;
                }
              }
              else
              {
                char isJointlyDominated = llvm::LiveRangeCalc::isJointlyDominated(*v154, v239, v240, *(void *)(v6 + 616));
                unint64_t v79 = v231;
                uint64_t v6 = (uint64_t)a1;
                if (isJointlyDominated) {
                  goto LABEL_312;
                }
                sub_1CC3B5D94((uint64_t)a1, "Register not marked live out of predecessor", v156);
                sub_1CC3BE828(a1, (llvm *)v5, v71, (llvm *)a4);
                uint64_t v203 = sub_1CC3BAE14(v229);
                unint64_t v204 = (llvm::raw_ostream *)llvm::errs(v203);
                int v205 = v204;
                uint64_t v206 = *((void *)v204 + 4);
                if ((unint64_t)(*((void *)v204 + 3) - v206) > 0xA)
                {
                  *(_DWORD *)(v206 + 7) = 544175214;
                  *(void *)uint64_t v206 = *(void *)" live into ";
                  *((void *)v204 + 4) += 11;
                }
                else
                {
                  llvm::raw_ostream::write(v204, " live into ", 0xBuLL);
                }
                uint64_t v238 = (void **)&v236;
                unint64_t v236 = (void (**)(void **))&unk_1F260D508;
                unint64_t v237 = v231;
                v226((uint64_t)&v236, v205);
                uint64_t v207 = (unsigned char *)*((void *)v205 + 4);
                if ((unint64_t)v207 >= *((void *)v205 + 3))
                {
                  llvm::raw_ostream::write(v205, 64);
                }
                else
                {
                  *((void *)v205 + 4) = v207 + 1;
                  unsigned char *v207 = 64;
                }
                v234[0] = *(void *)(*(void *)(*(void *)(*((void *)a1 + 75) + 288) + 392)
                                    + 16 * *(unsigned int *)(v231 + 24));
                llvm::SlotIndex::print((llvm::SlotIndex *)v234, v205);
                uint64_t v211 = *((void *)v205 + 4);
                if ((unint64_t)(*((void *)v205 + 3) - v211) > 0x11)
                {
                  *(_WORD *)(v211 + 16) = 8293;
                  *(_OWORD *)uint64_t v211 = *(_OWORD *)", not live before ";
                  *((void *)v205 + 4) += 18;
                }
                else
                {
                  llvm::raw_ostream::write(v205, ", not live before ", 0x12uLL);
                }
                v234[0] = v157;
                llvm::SlotIndex::print((llvm::SlotIndex *)v234, v205);
                uint64_t v212 = (unsigned char *)*((void *)v205 + 4);
                if ((unint64_t)v212 >= *((void *)v205 + 3))
                {
                  llvm::raw_ostream::write(v205, 10);
                }
                else
                {
                  *((void *)v205 + 4) = v212 + 1;
                  unsigned char *v212 = 10;
                }
                uint64_t v214 = v238;
                unsigned int v71 = v225;
                if (v238 != (void **)&v236) {
                  goto LABEL_343;
                }
              }
              v236[4]((void **)&v236);
              goto LABEL_345;
            }
          }
          else
          {
            unsigned int v180 = 0;
          }
          break;
        }
        uint64_t v185 = (void *)(v181 + 24 * v180);
        goto LABEL_294;
      }
      unsigned __int16 v69 = (llvm *)v93;
      unint64_t v146 = v219;
      if ((v145 & 6) == 0) {
        goto LABEL_225;
      }
      if (v79 != v91)
      {
        unint64_t v79 = *(void *)(v79 + 8);
        goto LABEL_225;
      }
LABEL_133:
      uint64_t v70 = (llvm *)((char *)v70 + 24);
      if (v70 == (llvm *)v223) {
        return;
      }
    }
    unint64_t v103 = v99;
    if ((*(_WORD *)(v99 + 44) & 4) != 0)
    {
      unint64_t v103 = v99;
      do
        unint64_t v103 = *(void *)v103 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v103 + 44) & 4) != 0);
    }
    uint64_t v104 = *(void *)(v99 + 24) + 48;
    uint64_t v105 = *(unsigned int **)(v103 + 32);
    uint64_t v106 = *(unsigned int *)(v103 + 40);
    uint64_t v107 = &v105[8 * v106];
    if (!v106)
    {
      unint64_t v215 = *(void *)(v103 + 8);
      if (v215 == v104)
      {
        unint64_t v103 = *(void *)(v99 + 24) + 48;
      }
      else
      {
        unint64_t v103 = *(void *)(v99 + 24) + 48;
        if ((*(_WORD *)(v215 + 44) & 4) != 0)
        {
          while (1)
          {
            unint64_t v216 = v215;
            uint64_t v217 = *(unsigned int *)(v215 + 40);
            if (v217) {
              break;
            }
            unint64_t v215 = *(void *)(v215 + 8);
            if (v215 == v104 || (*(_WORD *)(v215 + 44) & 4) == 0)
            {
              unint64_t v103 = *(void *)(v99 + 24) + 48;
              goto LABEL_377;
            }
          }
          unint64_t v103 = v215;
LABEL_377:
          uint64_t v105 = *(unsigned int **)(v216 + 32);
          uint64_t v107 = &v105[8 * v217];
          unint64_t v93 = a4;
          unsigned int v4 = a3;
          uint64_t v6 = (uint64_t)a1;
          unint64_t v91 = v224;
          unsigned int v71 = v225;
        }
      }
    }
    if (v105 == v107)
    {
      char v110 = 0;
      LOBYTE(v109) = 0;
      if ((~*((_DWORD *)v70 + 2) & 6) != 0)
      {
LABEL_209:
        uint64_t v141 = *(void *)(v6 + 48);
        if (*(unsigned char *)(v141 + 16)) {
          BOOL v142 = *(unsigned char *)((*(void *)(*(void *)(v141 + 24) + 16 * v219) & 0xFFFFFFFFFFFFFFF8) + 34) == 0;
        }
        else {
          BOOL v142 = 1;
        }
        BOOL v143 = !v142 && v93 == 0;
        if (v143 && (v109 & 1) != 0) {
          goto LABEL_220;
        }
        unint64_t v230 = v79;
        int v144 = (llvm *)v6;
        sub_1CC3B6180(v6, "Instruction ending live segment doesn't read the register", v99);
        sub_1CC3BE828(v144, (llvm *)v5, v71, (llvm *)v93);
LABEL_219:
        sub_1CC3BE894(v70);
        unint64_t v79 = v230;
        uint64_t v6 = (uint64_t)a1;
        unint64_t v91 = v224;
        goto LABEL_220;
      }
    }
    else
    {
      char v108 = 0;
      int v109 = 0;
      char v110 = 0;
      do
      {
        unint64_t v111 = *v105;
        if (!*v105 && v105[1] == v4)
        {
          uint64_t v112 = (v111 >> 8) & 0xFFF;
          if (v112) {
            uint64_t v113 = *(void *)(*(void *)(*(void *)(v6 + 40) + 232) + 8 * v112);
          }
          else {
            uint64_t v113 = -1;
          }
          BOOL v51 = v112 == 0;
          BOOL v114 = v112 != 0;
          if (v51) {
            uint64_t v115 = v113;
          }
          else {
            uint64_t v115 = ~v113;
          }
          int v116 = v114 | v109;
          if ((v111 & 0x1000000) != 0) {
            uint64_t v117 = v115;
          }
          else {
            uint64_t v117 = v113;
          }
          if ((v111 & 0x1000000) != 0)
          {
            v110 |= (~v111 & 0x5000000) == 0;
            int v109 = v116;
          }
          if (!v93 || (v117 & v93) != 0)
          {
            BOOL v118 = (v111 & 0x30000000) == 0;
            int v119 = v111 & 0x31000000;
            BOOL v120 = (v111 & 0xFFF00) != 0;
            if (v119 != 0x1000000) {
              BOOL v120 = v118;
            }
            v108 |= v120;
          }
        }
        v105 += 8;
        if (v105 == v107)
        {
          unint64_t v121 = *(void *)(v103 + 8);
          if (v121 == v104) {
            break;
          }
          uint64_t v105 = v107;
          unint64_t v103 = *(void *)(v99 + 24) + 48;
          if ((*(_WORD *)(v121 + 44) & 4) != 0)
          {
            while (1)
            {
              unint64_t v122 = v121;
              uint64_t v123 = *(unsigned int *)(v121 + 40);
              if (v123) {
                break;
              }
              unint64_t v121 = *(void *)(v121 + 8);
              if (v121 == v104 || (*(_WORD *)(v121 + 44) & 4) == 0)
              {
                unint64_t v103 = *(void *)(v99 + 24) + 48;
                goto LABEL_179;
              }
            }
            unint64_t v103 = v121;
LABEL_179:
            uint64_t v105 = *(unsigned int **)(v122 + 32);
            uint64_t v107 = &v105[8 * v123];
          }
        }
      }
      while (v105 != v107);
      if ((~*((_DWORD *)v70 + 2) & 6) != 0)
      {
        if (v108) {
          goto LABEL_220;
        }
        goto LABEL_209;
      }
    }
    if (v93 || (v110 & 1) != 0) {
      goto LABEL_220;
    }
    unint64_t v230 = v79;
    unint64_t v140 = (llvm *)v6;
    sub_1CC3B6180(v6, "Instruction ending live segment on dead slot has no dead flag", v99);
    sub_1CC3BA8C0((llvm *)v5);
    sub_1CC3BA980(v140, v71);
    goto LABEL_219;
  }
}

uint64_t sub_1CC3BE828(llvm *a1, llvm *a2, unsigned int a3, llvm *a4)
{
  sub_1CC3BA8C0(a2);
  uint64_t result = sub_1CC3BA980(a1, a3);
  if (a4)
  {
    return sub_1CC3BAB58(a4);
  }
  return result;
}

llvm::raw_ostream *sub_1CC3BE894(llvm *a1)
{
  int v2 = (llvm::raw_ostream *)llvm::errs(a1);
  uint64_t v3 = (void *)*((void *)v2 + 4);
  if (*((void *)v2 + 3) - (void)v3 > 0xEuLL)
  {
    qmemcpy(v3, "- segment:     ", 15);
    *((void *)v2 + 4) += 15;
  }
  else
  {
    int v2 = llvm::raw_ostream::write(v2, "- segment:     ", 0xFuLL);
  }
  uint64_t result = llvm::operator<<(v2, (uint64_t *)a1);
  unsigned int v5 = (unsigned char *)*((void *)result + 4);
  if ((unint64_t)v5 >= *((void *)result + 3))
  {
    return llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((void *)result + 4) = v5 + 1;
    *unsigned int v5 = 10;
  }
  return result;
}

void sub_1CC3BE944()
{
}

const char *sub_1CC3BE9E0(uint64_t a1)
{
  if (*(unsigned char *)a1 != 15)
  {
    a1 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8));
    if (!a1) {
      return "";
    }
  }
  uint64_t v1 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (v1) {
    return (const char *)(*(void *)(v1 + 8) + 24);
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC3BEA34(int *__src, size_t __n)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!__n) {
    return 0;
  }
  long long v4 = xmmword_1CFAC4320;
  uint64_t v5 = 0;
  llvm::MD5::update((int *)&v4, __src, __n);
  llvm::MD5::final((int *)&v4, v3);
  return *(void *)v3;
}

void sub_1CC3BEAB8(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::initializeMachineBlockFrequencyInfoPass(a1, a2);
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v3);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  llvm::initializeMachineOptimizationRemarkEmitterPassPass(a1, v4);
  operator new();
}

void sub_1CC3BEB80()
{
}

uint64_t sub_1CC3BEC98(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&long long v20 = a1;
  *((void *)&v20 + 1) = a2;
  switch(a4)
  {
    case 0:
      goto LABEL_7;
    case 3:
      if (*(_WORD *)a3 != 27745 || *(unsigned char *)(a3 + 2) != 108) {
        return v20;
      }
LABEL_7:
      char v22 = 46;
      unint64_t v7 = llvm::StringRef::find((uint64_t *)&v20, &v22, 1uLL, 0);
      if (a2 >= v7) {
        unint64_t v8 = v7;
      }
      else {
        unint64_t v8 = a2;
      }
      if (v7 == -1) {
        unint64_t v8 = a2;
      }
      *(void *)&long long v21 = a1;
      *((void *)&v21 + 1) = v8;
      return v21;
    case 8:
      if (*(void *)a3 != 0x64657463656C6573) {
        return v20;
      }
      uint64_t v10 = 0;
      long long v21 = v20;
      unint64_t v11 = *((void *)&v20 + 1);
      int v12 = llvm::sampleprof::FunctionSamples::HasUniqSuffix;
      break;
    default:
      return v20;
  }
  do
  {
    unsigned int v13 = off_1E682F828[v10];
    if (v13)
    {
      size_t v14 = strlen(off_1E682F828[v10]);
      if (v14 == 8)
      {
        if (*(void *)v13 == 0x2E71696E755F5F2ELL && v12 != 0) {
          goto LABEL_36;
        }
        size_t v14 = 8;
      }
    }
    else
    {
      size_t v14 = 0;
    }
    unint64_t v16 = llvm::StringRef::rfind((uint64_t *)&v21, v13, v14);
    if (v16 != -1)
    {
      unint64_t v17 = v11;
      while (v17)
      {
        uint64_t v18 = v17 - 1;
        int v19 = *(unsigned __int8 *)(v21 - 1 + v17--);
        if (v19 == 46) {
          goto LABEL_32;
        }
      }
      uint64_t v18 = -1;
LABEL_32:
      if (v18 == v14 + v16 - 1)
      {
        if (v11 >= v16) {
          unint64_t v11 = v16;
        }
        *((void *)&v21 + 1) = v11;
      }
    }
LABEL_36:
    ++v10;
  }
  while (v10 != 3);
  return v21;
}

_DWORD *sub_1CC3BEE98(_DWORD *result, int a2)
{
  int v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    uint64_t result = operator new(88 * v4, (std::align_val_t)8uLL);
    *(void *)int v2 = result;
    *((void *)v2 + 1) = 0;
    unsigned int v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 88 * v5;
      do
      {
        *(void *)uint64_t result = -4096;
        result += 22;
        v6 -= 88;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

void sub_1CC3BEF34(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v169 = v173;
  uint64_t v170 = v173;
  uint64_t v171 = 8;
  int v172 = 0;
  __p[0] = (void *)*a1;
  sub_1CD550E1C((llvm::SmallPtrSetImplBase *)&v169, (uint64_t)__p, &v148);
  uint64_t v6 = (unsigned char *)*((void *)&v148 + 1);
  long long v167 = v149;
  unint64_t v7 = (unsigned char *)v149;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - *((void *)&v148 + 1)) >> 3);
  long long v166 = v148;
  v168[0] = &v169;
  memset(&v168[1], 0, 24);
  *((void *)&v148 + 1) = 0;
  long long v149 = 0uLL;
  sub_1CBF340A8((void *)&v148 + 1, v6, v7, v8);
  while ((void)v149 != *((void *)&v148 + 1))
    sub_1CD520FAC((char *)&v148);
  unint64_t v146 = a2;
  unint64_t v147 = a3;
  if ((void)v149) {
    operator delete((void *)v149);
  }
  sub_1CD481D8C(&v166);
  *(void *)&long long v166 = v168;
  *((void *)&v166 + 1) = v168;
  *(void *)&long long v167 = 8;
  DWORD2(v167) = 0;
  uint64_t v9 = *a1 + 320;
  uint64_t v10 = *(void **)(*a1 + 328);
  if (v10 == (void *)v9) {
    goto LABEL_7;
  }
  do
  {
    if (v10[11] != v10[12]) {
      goto LABEL_26;
    }
    sub_1CD520EA4(__p, (uint64_t)v10, (llvm::SmallPtrSetImplBase *)&v166);
    int v19 = __p[1];
    long long v148 = *(_OWORD *)__p;
    long long v149 = v156;
    unint64_t v150 = &v166;
    *(void *)&long long v152 = 0;
    long long v151 = 0uLL;
    long long v20 = (unsigned char *)v156;
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v156 - (unint64_t)__p[1]) >> 3);
    long long v156 = 0uLL;
    __p[1] = 0;
    sub_1CBF340A8(&__p[1], v19, v20, v21);
    unint64_t v162 = v150;
    unint64_t v164 = 0;
    uint64_t v165 = 0;
    uint64_t v163 = 0;
    sub_1CBF340A8(&v163, (unsigned char *)v151, *((unsigned char **)&v151 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v151 + 1) - v151) >> 3));
    while (1)
    {
      char v22 = __p[1];
      if ((void)v156 - (unint64_t)__p[1] != v164 - v163) {
        goto LABEL_43;
      }
      if (__p[1] == (void *)v156) {
        break;
      }
      uint64_t v23 = 0;
      while (1)
      {
        unsigned int v24 = (char *)__p[1] + v23;
        if (*(void *)((char *)__p[1] + v23) != *(void *)&v163[v23]) {
          break;
        }
        int v25 = v163[v23 + 16];
        if (v24[16]) {
          BOOL v26 = v25 == 0;
        }
        else {
          BOOL v26 = 1;
        }
        if (v26)
        {
          if ((v24[16] == 0) == (v25 != 0)) {
            break;
          }
        }
        else if (*(void *)((char *)__p[1] + v23 + 8) != *(void *)&v163[v23 + 8])
        {
          break;
        }
        v23 += 24;
        if (v24 + 24 == (char *)v156) {
          goto LABEL_45;
        }
      }
LABEL_43:
      sub_1CD555858((char *)__p);
    }
    char v22 = (void *)v156;
LABEL_45:
    if (v163)
    {
      unint64_t v164 = v163;
      operator delete(v163);
      char v22 = __p[1];
    }
    if (v22)
    {
      *(void *)&long long v156 = v22;
      operator delete(v22);
    }
    sub_1CD481D8C(&v148);
LABEL_26:
    uint64_t v10 = (void *)v10[1];
  }
  while (v10 != (void *)v9);
LABEL_7:
  unint64_t v162 = 0;
  uint64_t v163 = 0;
  LODWORD(v164) = 0;
  __int16 v159 = 0;
  uint64_t v160 = 0;
  unsigned int v161 = 0;
  sub_1CD529D2C(&v162, HIDWORD(v171) - v172);
  sub_1CBF7ACFC((uint64_t)&v159, (HIDWORD(v171) - v172));
  uint64_t v11 = *a1 + 320;
  for (uint64_t i = *(void *)(*a1 + 328); i != v11; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v27 = v169;
    if (v170 == v169)
    {
      int v28 = HIDWORD(v171);
      unsigned int v29 = &v170[8 * HIDWORD(v171)];
      if (HIDWORD(v171))
      {
        uint64_t v30 = 0;
        while (*(void *)&v170[v30] != i)
        {
          v30 += 8;
          if (8 * HIDWORD(v171) == v30) {
            goto LABEL_69;
          }
        }
        unsigned int v29 = &v170[v30];
      }
LABEL_69:
      uint64_t v27 = v170;
    }
    else
    {
      int v31 = v171 - 1;
      unsigned int v32 = (v171 - 1) & ((i >> 4) ^ (i >> 9));
      unsigned int v29 = &v170[8 * v32];
      uint64_t v33 = *(void *)v29;
      if (*(void *)v29 == -1)
      {
        uint64_t v34 = 0;
LABEL_101:
        if (v34) {
          unsigned int v29 = v34;
        }
        int v28 = HIDWORD(v171);
        if (*(void *)v29 != i) {
          unsigned int v29 = &v170[8 * v171];
        }
      }
      else
      {
        uint64_t v34 = 0;
        int v35 = 1;
        while (v33 != i)
        {
          if (v34) {
            BOOL v36 = 0;
          }
          else {
            BOOL v36 = v33 == -2;
          }
          if (v36) {
            uint64_t v34 = v29;
          }
          unsigned int v37 = v32 + v35++;
          unsigned int v32 = v37 & v31;
          unsigned int v29 = &v170[8 * (v37 & v31)];
          uint64_t v33 = *(void *)v29;
          if (*(void *)v29 == -1) {
            goto LABEL_101;
          }
        }
        int v28 = HIDWORD(v171);
      }
    }
    if (v170 == v27) {
      int v38 = v28;
    }
    else {
      int v38 = v171;
    }
    if (v29 != &v170[8 * v38])
    {
      uint64_t v39 = v166;
      if (*((void *)&v166 + 1) == (void)v166)
      {
        unsigned int v40 = DWORD1(v167);
        int v41 = (void *)(*((void *)&v166 + 1) + 8 * DWORD1(v167));
        if (DWORD1(v167))
        {
          uint64_t v42 = 0;
          while (*(void *)(*((void *)&v166 + 1) + v42) != i)
          {
            v42 += 8;
            if (8 * DWORD1(v167) == v42) {
              goto LABEL_93;
            }
          }
          int v41 = (void *)(*((void *)&v166 + 1) + v42);
        }
LABEL_93:
        uint64_t v39 = *((void *)&v166 + 1);
      }
      else
      {
        int v43 = v167 - 1;
        unsigned int v44 = (v167 - 1) & ((i >> 4) ^ (i >> 9));
        int v41 = (void *)(*((void *)&v166 + 1) + 8 * v44);
        uint64_t v45 = *v41;
        if (*v41 == -1)
        {
          unsigned int v46 = 0;
LABEL_107:
          if (v46) {
            int v41 = v46;
          }
          unsigned int v40 = DWORD1(v167);
          if (*v41 != i) {
            int v41 = (void *)(*((void *)&v166 + 1) + 8 * v167);
          }
        }
        else
        {
          unsigned int v46 = 0;
          int v47 = 1;
          while (v45 != i)
          {
            if (v46) {
              BOOL v48 = 0;
            }
            else {
              BOOL v48 = v45 == -2;
            }
            if (v48) {
              unsigned int v46 = v41;
            }
            unsigned int v49 = v44 + v47++;
            unsigned int v44 = v49 & v43;
            int v41 = (void *)(*((void *)&v166 + 1) + 8 * (v49 & v43));
            uint64_t v45 = *v41;
            if (*v41 == -1) {
              goto LABEL_107;
            }
          }
          unsigned int v40 = DWORD1(v167);
        }
      }
      if (*((void *)&v166 + 1) == v39) {
        unsigned int v50 = v40;
      }
      else {
        unsigned int v50 = v167;
      }
      if (v41 != (void *)(*((void *)&v166 + 1) + 8 * v50))
      {
        uint64_t v51 = (v160 - v159) >> 3;
        *(void *)&long long v148 = i;
        sub_1CD4D7004((uint64_t *)&v162, &v148)[1] = v51;
        unint64_t v52 = v160;
        if (v160 >= v161)
        {
          uint64_t v54 = v159;
          uint64_t v55 = (v160 - v159) >> 3;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61) {
LABEL_226:
          }
            abort();
          uint64_t v57 = v161 - v159;
          if ((v161 - v159) >> 2 > v56) {
            unint64_t v56 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            if (v58 >> 61) {
LABEL_227:
            }
              sub_1CB833614();
            unint64_t v59 = (char *)operator new(8 * v58);
          }
          else
          {
            unint64_t v59 = 0;
          }
          uint64_t v60 = &v59[8 * v55];
          *(void *)uint64_t v60 = i;
          unint64_t v53 = v60 + 8;
          if (v52 != v54)
          {
            do
            {
              uint64_t v61 = *((void *)v52 - 1);
              v52 -= 8;
              *((void *)v60 - 1) = v61;
              v60 -= 8;
            }
            while (v52 != v54);
            unint64_t v52 = v159;
          }
          __int16 v159 = v60;
          uint64_t v160 = v53;
          unsigned int v161 = &v59[8 * v58];
          if (v52) {
            operator delete(v52);
          }
        }
        else
        {
          *(void *)uint64_t v160 = i;
          unint64_t v53 = v52 + 8;
        }
        uint64_t v160 = v53;
      }
    }
  }
  sub_1CD3C7F68(v146);
  sub_1CD553F7C(v147);
  unsigned int v13 = v159;
  size_t v14 = v160;
  if (v159 == v160) {
    goto LABEL_18;
  }
  char v15 = 0;
  do
  {
    v175[0] = 0;
    v175[0] = *(void *)v13;
    uint64_t v16 = a1[2];
    __p[0] = (void *)v175[0];
    *(void *)&long long v148 = 0;
    if (sub_1CD3C8538((uint64_t *)v16, __p, &v148)) {
      uint64_t v17 = v148;
    }
    else {
      uint64_t v17 = *(void *)v16 + 16 * *(unsigned int *)(v16 + 16);
    }
    if (v17 != *(void *)a1[2] + 16 * *(unsigned int *)(a1[2] + 16))
    {
      uint64_t v18 = *(void *)(v17 + 8);
      if (v18)
      {
        sub_1CD4D7004(v146, v175)[1] = v18;
        char v15 = 1;
      }
    }
    v13 += 8;
  }
  while (v13 != v14);
  unsigned int v13 = v159;
  if ((((unint64_t)(v160 - v159) > 0xF) & v15) != 0)
  {
    long long v156 = 0u;
    long long v157 = 0u;
    *(_OWORD *)long long __p = 0u;
    sub_1CD555750((uint64_t *)__p, (v160 - v159) >> 3);
    unint64_t v62 = v159;
    unint64_t v63 = v160;
    if (v159 != v160)
    {
      do
      {
        uint64_t v154 = 0;
        uint64_t v154 = *(void *)v62;
        *((void *)&v148 + 1) = 0;
        LOBYTE(v149) = 0;
        *((void *)&v149 + 1) = 0;
        LOBYTE(v150) = 0;
        long long v151 = 0u;
        long long v152 = 0u;
        long long v153 = 0u;
        uint64_t v64 = a1[2];
        uint64_t v174 = v154;
        v175[0] = 0;
        if (sub_1CD3C8538((uint64_t *)v64, &v174, v175)) {
          uint64_t v65 = v175[0];
        }
        else {
          uint64_t v65 = *(void *)v64 + 16 * *(unsigned int *)(v64 + 16);
        }
        uint64_t v66 = a1[2];
        if (v65 == *(void *)v66 + 16 * *(unsigned int *)(v66 + 16))
        {
          uint64_t v67 = 0;
          LOBYTE(v149) = 1;
        }
        else
        {
          LOBYTE(v149) = 0;
          uint64_t v67 = sub_1CD4D7004((uint64_t *)v66, &v154)[1];
        }
        *(void *)&long long v148 = 0x2E8BA2E8BA2E8BA3 * (((char *)__p[1] - (char *)__p[0]) >> 3);
        *((void *)&v148 + 1) = v67;
        if (__p[1] >= (void *)v156) {
          unsigned int v68 = (void *)sub_1CC3BFC54((uint64_t *)__p, &v148);
        }
        else {
          unsigned int v68 = (void *)(sub_1CD555940((uint64_t)__p[1], &v148) + 88);
        }
        __p[1] = v68;
        sub_1CD5559B0(&v148);
        v62 += 8;
      }
      while (v62 != v63);
      uint64_t v70 = v159;
      unsigned __int16 v69 = v160;
      uint64_t v145 = v160;
      while (v70 != v69)
      {
        *(void *)&long long v148 = *(void *)v70;
        unsigned int v71 = sub_1CD554E30(a1[1], (uint64_t *)&v148);
        uint64_t v72 = *((unsigned int *)v71 + 4);
        if (v72)
        {
          uint64_t v73 = (uint64_t *)v71[1];
          uint64_t v74 = &v73[v72];
          do
          {
            v175[0] = 0;
            uint64_t v75 = *v73;
            v175[0] = *v73;
            if (v164)
            {
              unsigned int v76 = ((v75 >> 4) ^ (v75 >> 9)) & (v164 - 1);
              uint64_t v77 = *(void *)&v162[v76];
              if (v75 == v77)
              {
LABEL_147:
                uint64_t v78 = sub_1CD4D7004((uint64_t *)&v162, &v148)[1];
                uint64_t v79 = sub_1CD4D7004((uint64_t *)&v162, v175)[1];
                uint64_t v80 = v157;
                if ((unint64_t)v157 >= *((void *)&v157 + 1))
                {
                  uint64_t v82 = *((void *)&v156 + 1);
                  uint64_t v83 = (uint64_t)(v157 - *((void *)&v156 + 1)) >> 5;
                  unint64_t v84 = v83 + 1;
                  if ((unint64_t)(v83 + 1) >> 59) {
                    goto LABEL_226;
                  }
                  uint64_t v85 = *((void *)&v157 + 1) - *((void *)&v156 + 1);
                  if ((uint64_t)(*((void *)&v157 + 1) - *((void *)&v156 + 1)) >> 4 > v84) {
                    unint64_t v84 = v85 >> 4;
                  }
                  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v86 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v86 = v84;
                  }
                  if (v86)
                  {
                    if (v86 >> 59) {
                      goto LABEL_227;
                    }
                    BOOL v87 = (char *)operator new(32 * v86);
                  }
                  else
                  {
                    BOOL v87 = 0;
                  }
                  uint64_t v88 = &v87[32 * v83];
                  *(void *)uint64_t v88 = v78;
                  *((void *)v88 + 1) = v79;
                  *((void *)v88 + 2) = 0;
                  v88[24] = 0;
                  uint64_t v89 = v88;
                  if (v80 != v82)
                  {
                    do
                    {
                      long long v90 = *(_OWORD *)(v80 - 32);
                      *(_OWORD *)(v89 - 23) = *(_OWORD *)(v80 - 23);
                      *((_OWORD *)v89 - 2) = v90;
                      v89 -= 32;
                      v80 -= 32;
                    }
                    while (v80 != v82);
                    uint64_t v80 = *((void *)&v156 + 1);
                  }
                  uint64_t v81 = v88 + 32;
                  *((void *)&v156 + 1) = v89;
                  *(void *)&long long v157 = v88 + 32;
                  *((void *)&v157 + 1) = &v87[32 * v86];
                  if (v80) {
                    operator delete((void *)v80);
                  }
                }
                else
                {
                  *(void *)long long v157 = v78;
                  *(void *)(v80 + 8) = v79;
                  *(void *)(v80 + 16) = 0;
                  uint64_t v81 = (char *)(v80 + 32);
                  *(unsigned char *)(v80 + 24) = 0;
                }
                *(void *)&long long v157 = v81;
                if ((void)v148 == v175[0])
                {
                  unint64_t v91 = sub_1CD4D7004((uint64_t *)&v162, &v148);
                  *((unsigned char *)__p[0] + 88 * v91[1] + 32) = 1;
                }
              }
              else
              {
                int v92 = 1;
                while (v77 != -4096)
                {
                  unsigned int v93 = v76 + v92++;
                  unsigned int v76 = v93 & (v164 - 1);
                  uint64_t v77 = *(void *)&v162[v76];
                  if (v75 == v77) {
                    goto LABEL_147;
                  }
                }
              }
            }
            ++v73;
          }
          while (v73 != v74);
        }
        v70 += 8;
        unsigned __int16 v69 = v145;
      }
    }
    unint64_t v94 = (void *)*((void *)&v156 + 1);
    for (unsigned int j = (void *)v157; v94 != j; v94 += 4)
    {
      unint64_t v96 = (char *)__p[0] + 88 * *v94;
      unint64_t v99 = *((void *)v96 + 7);
      int v98 = v96 + 56;
      unint64_t v97 = v99;
      unint64_t v101 = v98 - 1;
      unint64_t v100 = (char *)*(v98 - 1);
      if ((unint64_t)v100 >= v99)
      {
        unint64_t v103 = (char *)__p[0] + 88 * *v94;
        uint64_t v106 = (char *)*((void *)v103 + 5);
        uint64_t v104 = (char **)(v103 + 40);
        uint64_t v105 = v106;
        uint64_t v107 = (v100 - v106) >> 3;
        unint64_t v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 61) {
          goto LABEL_226;
        }
        uint64_t v109 = v97 - (void)v105;
        if (v109 >> 2 > v108) {
          unint64_t v108 = v109 >> 2;
        }
        if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v110 = v108;
        }
        if (v110)
        {
          if (v110 >> 61) {
            goto LABEL_227;
          }
          unint64_t v111 = (char *)operator new(8 * v110);
        }
        else
        {
          unint64_t v111 = 0;
        }
        uint64_t v112 = &v111[8 * v107];
        *(void *)uint64_t v112 = v94;
        unint64_t v102 = v112 + 8;
        if (v100 != v105)
        {
          do
          {
            uint64_t v113 = *((void *)v100 - 1);
            v100 -= 8;
            *((void *)v112 - 1) = v113;
            v112 -= 8;
          }
          while (v100 != v105);
          unint64_t v100 = *v104;
        }
        unsigned char *v104 = v112;
        *unint64_t v101 = v102;
        *int v98 = &v111[8 * v110];
        if (v100) {
          operator delete(v100);
        }
      }
      else
      {
        *(void *)unint64_t v100 = v94;
        unint64_t v102 = v100 + 8;
      }
      *unint64_t v101 = v102;
      uint64_t v114 = v94[1];
      uint64_t v115 = (char *)__p[0] + 88 * v114;
      unint64_t v118 = *((void *)v115 + 10);
      uint64_t v117 = v115 + 80;
      unint64_t v116 = v118;
      BOOL v120 = v117 - 1;
      int v119 = (char *)*(v117 - 1);
      if ((unint64_t)v119 >= v118)
      {
        unint64_t v122 = (char *)__p[0] + 88 * v114;
        unsigned int v125 = (char *)*((void *)v122 + 8);
        uint64_t v123 = (char **)(v122 + 64);
        uint64_t v124 = v125;
        uint64_t v126 = (v119 - v125) >> 3;
        unint64_t v127 = v126 + 1;
        if ((unint64_t)(v126 + 1) >> 61) {
          goto LABEL_226;
        }
        uint64_t v128 = v116 - (void)v124;
        if (v128 >> 2 > v127) {
          unint64_t v127 = v128 >> 2;
        }
        if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v129 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v129 = v127;
        }
        if (v129)
        {
          if (v129 >> 61) {
            goto LABEL_227;
          }
          unint64_t v130 = (char *)operator new(8 * v129);
        }
        else
        {
          unint64_t v130 = 0;
        }
        uint64_t v131 = &v130[8 * v126];
        *(void *)uint64_t v131 = v94;
        unint64_t v121 = v131 + 8;
        if (v119 != v124)
        {
          do
          {
            uint64_t v132 = *((void *)v119 - 1);
            v119 -= 8;
            *((void *)v131 - 1) = v132;
            v131 -= 8;
          }
          while (v119 != v124);
          int v119 = *v123;
        }
        *uint64_t v123 = v131;
        void *v120 = v121;
        void *v117 = &v130[8 * v129];
        if (v119) {
          operator delete(v119);
        }
      }
      else
      {
        *(void *)int v119 = v94;
        unint64_t v121 = v119 + 8;
      }
      void *v120 = v121;
    }
    if (__p[1] != __p[0])
    {
      uint64_t v133 = 0;
      unint64_t v134 = ((char *)__p[1] - (char *)__p[0]) / 88;
      if (v134 <= 1) {
        unint64_t v134 = 1;
      }
      unint64_t v135 = (char *)__p[0] + 72;
      while (*(v135 - 1) != *v135)
      {
        ++v133;
        v135 += 11;
        if (v134 == v133) {
          goto LABEL_217;
        }
      }
      uint64_t v158 = v133;
    }
LABEL_217:
    llvm::applyFlowInference(__p);
    unint64_t v136 = (uint64_t *)v159;
    __int16 v137 = v160;
    if (v159 != v160)
    {
      do
      {
        uint64_t v138 = *v136++;
        *(void *)&long long v148 = v138;
        uint64_t v139 = sub_1CD4D7004((uint64_t *)&v162, &v148);
        uint64_t v140 = *((void *)__p[0] + 11 * v139[1] + 3);
        sub_1CD4D7004(v146, &v148)[1] = v140;
      }
      while (v136 != (uint64_t *)v137);
    }
    BOOL v142 = (void *)*((void *)&v156 + 1);
    uint64_t v141 = (void *)v157;
    if (*((void *)&v156 + 1) != (void)v157)
    {
      do
      {
        uint64_t v143 = *(void *)&v159[8 * v142[1]];
        *(void *)&long long v148 = *(void *)&v159[8 * *v142];
        *((void *)&v148 + 1) = v143;
        uint64_t v144 = v142[2];
        sub_1CD553BAC((uint64_t)v147, (uint64_t *)&v148)[2] = v144;
        v142 += 4;
      }
      while (v142 != v141);
      BOOL v142 = (void *)*((void *)&v156 + 1);
    }
    if (v142)
    {
      *(void *)&long long v157 = v142;
      operator delete(v142);
    }
    *(void *)&long long v148 = __p;
    sub_1CC3BFD8C((void ***)&v148);
    unsigned int v13 = v159;
    if (v159)
    {
LABEL_19:
      uint64_t v160 = v13;
      operator delete(v13);
    }
  }
  else
  {
LABEL_18:
    if (v13) {
      goto LABEL_19;
    }
  }
  MEMORY[0x1D25D9CD0](v162, 8);
  if (*((void *)&v166 + 1) != (void)v166) {
    free(*((void **)&v166 + 1));
  }
  if (v170 != v169) {
    free(v170);
  }
}

__n128 sub_1CC3BFBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      long long v10 = *(_OWORD *)(a3 + v7 - 88);
      long long v11 = *(_OWORD *)(a3 + v7 - 72);
      *(unsigned char *)(v8 - 56) = *(unsigned char *)(a3 + v7 - 56);
      *(_OWORD *)(v8 - 72) = v11;
      *(_OWORD *)(v8 - 88) = v10;
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 48) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v8 - 32) = *(void *)(a3 + v7 - 32);
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 88;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_1CC3BFC54(uint64_t *a1, long long *a2)
{
  uint64_t v2 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL) {
    abort();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v7 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v7 = v3;
  }
  if (v7)
  {
    if (v7 > 0x2E8BA2E8BA2E8BALL) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(88 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (uint64_t)&v8[88 * v2];
  long long v10 = &v8[88 * v7];
  sub_1CD555940(v9, a2);
  sub_1CC3BFBC8(v6, a1[1], a1[1], *a1, *a1, v9, v9);
  int v12 = (void *)*a1;
  long long v11 = (void *)a1[1];
  *a1 = v13;
  a1[1] = v9 + 88;
  a1[2] = (uint64_t)v10;
  while (v11 != v12)
    long long v11 = sub_1CD5559B0(v11 - 11);
  if (v12) {
    operator delete(v12);
  }
  return v9 + 88;
}

void sub_1CC3BFD8C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    unsigned int v5 = v2;
    if (v4 != v2)
    {
      do
        unint64_t v4 = sub_1CD5559B0(v4 - 11);
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3BFE10(uint64_t ****a1, uint64_t *a2)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)****a1;
  if (*(void *)(v4 + 128)
    || (*(unsigned int (**)(void))(**(void **)(v4 + 72) + 48))(*(void *)(v4 + 72)))
  {
    uint64_t v5 = *a2;
    llvm::DiagnosticLocation::DiagnosticLocation(v24, (const llvm::DebugLoc *)(*a2 + 56));
    uint64_t v6 = *(void *)(v5 + 24);
    uint64_t v7 = **(void **)(v6 + 32);
    int v33 = 17;
    char v34 = 2;
    *(void *)int v35 = v7;
    *(_OWORD *)&v35[8] = v24[0];
    *(void *)&long long v36 = "sample-profile-impl";
    *((void *)&v36 + 1) = "AppliedSamples";
    *(void *)&long long v37 = 14;
    BYTE8(v37) = 0;
    LOBYTE(v38) = 0;
    uint64_t v39 = v41;
    uint64_t v40 = 0x400000000;
    LOBYTE(v42) = 0;
    HIDWORD(v42) = -1;
    uint64_t v43 = v6;
    unsigned int v32 = &unk_1F260E0D8;
    *(void *)&v24[0] = "Applied ";
    *((void *)&v24[0] + 1) = 8;
    sub_1CC59ADEC((uint64_t *)&v39, (uint64_t)v24);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v21, "NumSamples", 0xAuLL, *(void *)a2[1]);
    sub_1CC34D4D8((uint64_t)&v32, (uint64_t)&v21);
    if (v23 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    *(void *)&v24[0] = " samples from profile (offset: ";
    *((void *)&v24[0] + 1) = 31;
    sub_1CC59ADEC((uint64_t *)&v39, (uint64_t)v24);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v18, "LineOffset", 0xAuLL, *(_DWORD *)a2[2]);
    sub_1CC34D4D8((uint64_t)&v32, (uint64_t)&v18);
    if (v20 < 0) {
      operator delete(v19);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (*(_DWORD *)a2[3])
    {
      *(void *)&v24[0] = ".";
      *((void *)&v24[0] + 1) = 1;
      sub_1CC59ADEC((uint64_t *)&v39, (uint64_t)v24);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v15, "Discriminator", 0xDuLL, *(_DWORD *)a2[3]);
      sub_1CC34D4D8((uint64_t)&v32, (uint64_t)&v15);
      if (v17 < 0) {
        operator delete(v16);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
    }
    *(void *)&v24[0] = ")";
    *((void *)&v24[0] + 1) = 1;
    sub_1CC59ADEC((uint64_t *)&v39, (uint64_t)v24);
    DWORD2(v24[0]) = v33;
    BYTE12(v24[0]) = v34;
    v24[1] = *(_OWORD *)v35;
    uint64_t v25 = *(void *)&v35[16];
    long long v26 = v36;
    long long v27 = v37;
    *(void *)&v24[0] = &unk_1F2616800;
    uint64_t v28 = v38;
    unsigned int v29 = v31;
    uint64_t v30 = 0x400000000;
    unsigned int v8 = v40;
    if (v40)
    {
      sub_1CD5560B4((uint64_t)&v29, (uint64_t)&v39);
      unsigned int v8 = v40;
    }
    v31[32] = v42;
    v31[33] = v43;
    *(void *)&v24[0] = &unk_1F260E0D8;
    unsigned int v32 = &unk_1F2616800;
    uint64_t v9 = (char *)v39;
    if (v8)
    {
      unint64_t v10 = (unint64_t)v8 << 6;
      do
      {
        long long v11 = (void **)&v9[v10];
        if (v9[v10 - 17] < 0) {
          operator delete(*(v11 - 5));
        }
        if (*((char *)v11 - 41) < 0) {
          operator delete(*(v11 - 8));
        }
        v10 -= 64;
      }
      while (v10);
      uint64_t v9 = (char *)v39;
    }
    if (v9 != v41) {
      free(v9);
    }
    llvm::MachineOptimizationRemarkEmitter::emit(a1, (llvm::DiagnosticInfoOptimizationBase *)v24);
    *(void *)&v24[0] = &unk_1F2616800;
    int v12 = (char *)v29;
    if (v30)
    {
      unint64_t v13 = (unint64_t)v30 << 6;
      do
      {
        size_t v14 = (void **)&v12[v13];
        if (v12[v13 - 17] < 0) {
          operator delete(*(v14 - 5));
        }
        if (*((char *)v14 - 41) < 0) {
          operator delete(*(v14 - 8));
        }
        v13 -= 64;
      }
      while (v13);
      int v12 = (char *)v29;
    }
    if (v12 != (char *)v31) {
      free(v12);
    }
  }
}

uint64_t sub_1CC3C0278()
{
  int v4 = 1;
  char v2 = 0;
  unint64_t v3 = (int *)&v2;
  v1.n128_u64[0] = (unint64_t)"Print setting flow sensitive branch probabilities";
  v1.n128_u64[1] = 49;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCD0BB8, "show-fs-branchprob", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD0BB8, &dword_1CB82C000);
  int v4 = 10;
  unint64_t v3 = &v4;
  v1.n128_u64[0] = (unint64_t)"Only show debug message if the branch probility is greater than this value (in percentage).";
  v1.n128_u64[1] = 91;
  sub_1CD553994(&v3, (long long *)&v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, qword_1EBCD0C78, &dword_1CB82C000);
  int v4 = 10000;
  unint64_t v3 = &v4;
  v1.n128_u64[0] = (unint64_t)"Only show debug message if the source branch weight is greater  than this value.";
  v1.n128_u64[1] = 80;
  sub_1CD553AA0(&v3, (long long *)&v1);
  __cxa_atexit((void (*)(void *))sub_1CB8598A4, qword_1EBCD0D38, &dword_1CB82C000);
  int v4 = 1;
  char v2 = 0;
  unint64_t v3 = (int *)&v2;
  v1.n128_u64[0] = (unint64_t)"View BFI before MIR loader";
  v1.n128_u64[1] = 26;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCD0DF8, "fs-viewbfi-before", &v4, (unsigned char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD0DF8, &dword_1CB82C000);
  int v4 = 1;
  char v2 = 0;
  unint64_t v3 = (int *)&v2;
  v1.n128_u64[0] = (unint64_t)"View BFI after MIR loader";
  v1.n128_u64[1] = 25;
  sub_1CC025F34((llvm::cl::Option *)&unk_1EBCD0EB8, "fs-viewbfi-after", &v4, (unsigned char **)&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCD0EB8, &dword_1CB82C000);
}

uint64_t llvm::yaml::FrameIndex::FrameIndex(uint64_t this, int a2, const llvm::MachineFrameInfo *a3)
{
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  BOOL v3 = a2 >= 0 || -*((_DWORD *)a3 + 8) > a2;
  *(unsigned char *)(this + 4) = a2 < 0 && -*((_DWORD *)a3 + 8) <= a2;
  int v4 = *((_DWORD *)a3 + 8);
  if (v3) {
    int v4 = 0;
  }
  *(_DWORD *)this = v4 + a2;
  return this;
}

{
  BOOL v3;
  int v4;

  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  BOOL v3 = a2 >= 0 || -*((_DWORD *)a3 + 8) > a2;
  *(unsigned char *)(this + 4) = a2 < 0 && -*((_DWORD *)a3 + 8) <= a2;
  int v4 = *((_DWORD *)a3 + 8);
  if (v3) {
    int v4 = 0;
  }
  *(_DWORD *)this = v4 + a2;
  return this;
}

unsigned int *llvm::yaml::FrameIndex::getFI@<X0>(unsigned int *this@<X0>, const llvm::MachineFrameInfo *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *this;
  unsigned int v14 = *this;
  unsigned int v5 = *((_DWORD *)a2 + 8);
  if (*((unsigned char *)this + 4))
  {
    BOOL v6 = v4 >= v5;
    v4 -= v5;
    if (v6)
    {
      uint64_t v7 = "invalid fixed frame index {0}";
      uint64_t v8 = 29;
LABEL_8:
      v10[0] = v7;
      v10[1] = v8;
      v10[2] = &v12;
      v10[3] = 1;
      v11[0] = &unk_1F2610228;
      v11[1] = &v14;
      int v12 = v11;
      sub_1CD465B2C((uint64_t)v10, &__p);
      llvm::inconvertibleErrorCode(v9);
      operator new();
    }
    unsigned int v14 = v4;
  }
  if (v4 + v5 >= -858993459 * ((*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3))
  {
    uint64_t v7 = "invalid frame index {0}";
    uint64_t v8 = 23;
    goto LABEL_8;
  }
  *(unsigned char *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v4;
  return this;
}

void sub_1CC3C0638()
{
}

llvm::raw_ostream *sub_1CC3C064C(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1CC3C0654(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1CC3C0654(unsigned int *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  int v15 = 0;
  if (!sub_1CD465E40(&v16, &v15))
  {
    if (!v17)
    {
      int v12 = 0;
LABEL_19:
      size_t v18 = 0;
      if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6)) {
        size_t v14 = 0;
      }
      else {
        size_t v14 = v18;
      }
      return llvm::write_integer(a2, *a1, v14, v12);
    }
    int v12 = 0;
    unsigned int v13 = *v16;
    if (v13 > 0x63)
    {
      if (v13 != 100)
      {
        if (v13 != 110) {
          goto LABEL_19;
        }
        goto LABEL_16;
      }
    }
    else if (v13 != 68)
    {
      if (v13 != 78) {
        goto LABEL_19;
      }
LABEL_16:
      ++v16;
      int v12 = 1;
LABEL_18:
      --v17;
      goto LABEL_19;
    }
    int v12 = 0;
    ++v16;
    goto LABEL_18;
  }
  int v7 = v15;
  size_t v18 = 0;
  int v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  unint64_t v9 = v18;
  if (v8) {
    unint64_t v9 = 0;
  }
  if ((v7 & 0xFFFFFFFE) == 2) {
    unint64_t v10 = v9 + 2;
  }
  else {
    unint64_t v10 = v9;
  }
  return llvm::write_hex(a2, (int)*a1, v7, v10, 1);
}

void llvm::initializeRegAllocScoringPass(uint64_t a1)
{
  uint64_t v1 = a1;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCD0F78, memory_order_acquire) != -1)
  {
    v3[0] = sub_1CC3C07F8;
    v3[1] = &v1;
    char v2 = v3;
    std::__call_once(&qword_1EBCD0F78, &v2, (void (__cdecl *)(void *))sub_1CB848390);
  }
}

void sub_1CC3C07F8()
{
}

uint64_t sub_1CC3C0894(uint64_t a1)
{
  char v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void llvm::createReleaseModeAdvisor(llvm *this)
{
}

uint64_t llvm::RegAllocScoring::runOnMachineFunction(llvm::RegAllocScoring *this, llvm::MachineFunction *a2)
{
  return 0;
}

const char *sub_1CC3C0934()
{
  return "Register Allocation Pass Scoring";
}

void sub_1CC3C0944(llvm::Pass *this)
{
  char v2 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    BOOL v3 = sub_1CC3C0D68(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10B1C40729BBE6BLL);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CC3C099C(llvm::Pass *this)
{
  char v2 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    BOOL v3 = sub_1CC3C0D68(v2);
    MEMORY[0x1D25D9CE0](v3, 0x10B1C40729BBE6BLL);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3C0A08(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 160) = 1;
}

void sub_1CC3C0A54(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    operator new();
  }
  char v2 = *(uint64_t **)(a1 + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
LABEL_5:
    uint64_t v5 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v3 != &llvm::MachineBlockFrequencyInfo::ID)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_5;
      }
    }
    uint64_t v5 = *(void *)(v3 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 96))(v5, &llvm::MachineBlockFrequencyInfo::ID);
  BOOL v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  if (v7 == v8)
  {
LABEL_10:
    uint64_t v9 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v7 != &llvm::MachineLoopInfo::ID)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = *(void *)(v7 + 8);
  }
  (*(void (**)(uint64_t, void *))(*(void *)v9 + 96))(v9, &llvm::MachineLoopInfo::ID);
  operator new();
}

void *sub_1CC3C0D68(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    MEMORY[0x1D25D9CE0](v2, 0xC400A2AC0F1);
  }
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1CC3C0DB8(void *a1)
{
  sub_1CC3C0D68(a1);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3C0DF8(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 2)
  {
    if (a2)
    {
      bzero(a1[1], 4 * a2);
      v5 += 4 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    BOOL v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 2);
    if (v8 >> 62) {
      abort();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 1 > v8) {
      unint64_t v8 = v9 >> 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 62) {
        sub_1CB833614();
      }
      long long v11 = (char *)operator new(4 * v10);
    }
    else
    {
      long long v11 = 0;
    }
    int v12 = &v11[4 * (v7 >> 2)];
    unsigned int v13 = &v11[4 * v10];
    bzero(v12, 4 * a2);
    while (v5 != v6)
    {
      int v14 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *a1 = v12;
    a1[1] = &v11[4 * a2 + v7];
    a1[2] = v13;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void *sub_1CC3C0F28(void *a1)
{
  *a1 = &unk_1F26103F8;
  MEMORY[0x1D25D9CD0](a1[29], 8);
  return a1;
}

void sub_1CC3C0F74(void *a1)
{
  *a1 = &unk_1F26103F8;
  MEMORY[0x1D25D9CD0](a1[29], 8);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC3C0FE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a4;
  uint64_t v7 = (unsigned __int16 **)a3;
  uint64_t v9 = (uint64_t)a1;
  v201[32] = *MEMORY[0x1E4F143B8];
  uint64_t OrderLimit = llvm::RegAllocEvictionAdvisor::getOrderLimit(a1, a2, a3, a4);
  if ((OrderLimit & 0xFF00000000) == 0) {
    return 0;
  }
  uint64_t v183 = OrderLimit;
  uint64_t v185 = a5;
  BOOL v12 = *(float *)(a2 + 116) != INFINITY || v6 != 255;
  BOOL v182 = v12;
  uint64_t v13 = *(void *)(v9 + 192);
  int v14 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 16))(v13, 0);
  int v15 = (uint64_t *)qword_1EBCD0F80;
  uint64_t v16 = a2;
  for (size_t i = 8; v15 != (uint64_t *)qword_1EBCD0F88; i *= v18)
    uint64_t v18 = *v15++;
  bzero(v14, i);
  int v19 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 1);
  char v20 = (uint64_t *)qword_1EBCD0F80;
  size_t v21 = 8;
  while (v20 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v22 = *v20++;
    v21 *= v22;
  }
  bzero(v19, v21);
  char v23 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 2);
  unsigned int v24 = (uint64_t *)qword_1EBCD0F80;
  size_t v25 = 4;
  while (v24 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v26 = *v24++;
    v25 *= v26;
  }
  bzero(v23, v25);
  long long v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 3);
  uint64_t v28 = (uint64_t *)qword_1EBCD0F80;
  size_t v29 = 4;
  while (v28 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v30 = *v28++;
    v29 *= v30;
  }
  bzero(v27, v29);
  int v31 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 4);
  unsigned int v32 = (uint64_t *)qword_1EBCD0F80;
  size_t v33 = 8;
  while (v32 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v34 = *v32++;
    v33 *= v34;
  }
  bzero(v31, v33);
  int v35 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 5);
  long long v36 = (uint64_t *)qword_1EBCD0F80;
  size_t v37 = 8;
  while (v36 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v38 = *v36++;
    v37 *= v38;
  }
  bzero(v35, v37);
  uint64_t v39 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 6);
  uint64_t v40 = (uint64_t *)qword_1EBCD0F80;
  size_t v41 = 4;
  while (v40 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v42 = *v40++;
    v41 *= v42;
  }
  bzero(v39, v41);
  uint64_t v43 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 7);
  uint64_t v44 = (uint64_t *)qword_1EBCD0F80;
  size_t v45 = 4;
  while (v44 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v46 = *v44++;
    v45 *= v46;
  }
  bzero(v43, v45);
  int v47 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 8);
  BOOL v48 = (uint64_t *)qword_1EBCD0F80;
  size_t v49 = 4;
  while (v48 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v50 = *v48++;
    v49 *= v50;
  }
  bzero(v47, v49);
  uint64_t v51 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 9);
  unint64_t v52 = (uint64_t *)qword_1EBCD0F80;
  size_t v53 = 4;
  while (v52 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v54 = *v52++;
    v53 *= v54;
  }
  bzero(v51, v53);
  uint64_t v55 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 10);
  unint64_t v56 = (uint64_t *)qword_1EBCD0F80;
  size_t v57 = 4;
  while (v56 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v58 = *v56++;
    v57 *= v58;
  }
  bzero(v55, v57);
  unint64_t v59 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 11);
  uint64_t v60 = (uint64_t *)qword_1EBCD0F80;
  size_t v61 = 4;
  while (v60 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v62 = *v60++;
    v61 *= v62;
  }
  bzero(v59, v61);
  unint64_t v63 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 12);
  uint64_t v64 = (uint64_t *)qword_1EBCD0F80;
  size_t v65 = 4;
  while (v64 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v66 = *v64++;
    v65 *= v66;
  }
  bzero(v63, v65);
  uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 13);
  unsigned int v68 = (uint64_t *)qword_1EBCD0F80;
  size_t v69 = 4;
  while (v68 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v70 = *v68++;
    v69 *= v70;
  }
  bzero(v67, v69);
  unsigned int v71 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 14);
  uint64_t v72 = (uint64_t *)qword_1EBCD0F80;
  size_t v73 = 4;
  while (v72 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v74 = *v72++;
    v73 *= v74;
  }
  bzero(v71, v73);
  uint64_t v75 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 15);
  unsigned int v76 = (uint64_t *)qword_1EBCD0F80;
  size_t v77 = 4;
  while (v76 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v78 = *v76++;
    v77 *= v78;
  }
  bzero(v75, v77);
  uint64_t v79 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 16);
  uint64_t v80 = (uint64_t *)qword_1EBCD0F80;
  size_t v81 = 4;
  while (v80 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v82 = *v80++;
    v81 *= v82;
  }
  bzero(v79, v81);
  uint64_t v83 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 17);
  unint64_t v84 = (uint64_t *)qword_1EBCD0F80;
  size_t v85 = 4;
  while (v84 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v86 = *v84++;
    v85 *= v86;
  }
  bzero(v83, v85);
  BOOL v87 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 18);
  uint64_t v88 = (uint64_t *)qword_1EBCD0F80;
  size_t v89 = 8;
  while (v88 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v90 = *v88++;
    v89 *= v90;
  }
  bzero(v87, v89);
  unint64_t v91 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 19);
  int v92 = (uint64_t *)qword_1EBCD0F80;
  size_t v93 = 8;
  while (v92 != (uint64_t *)qword_1EBCD0F88)
  {
    uint64_t v94 = *v92++;
    v93 *= v94;
  }
  bzero(v91, v93);
  unsigned int v95 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 20);
  uint64_t v96 = 0;
  _DWORD *v95 = 0;
  do
  {
    unint64_t v97 = &v198[v96];
    *unint64_t v97 = 0;
    *((unsigned char *)v97 + 4) = 0;
    v96 += 2;
  }
  while (v96 != 66);
  uint64_t v98 = 0;
  uint64_t v99 = v185;
  do
  {
    unint64_t v100 = &v198[v98];
    *unint64_t v100 = 0;
    *((unsigned char *)v100 + 4) = 0;
    v98 += 2;
  }
  while (v98 != 66);
  int v197 = 0;
  v101.n128_u32[1] = 0;
  v101.n128_u64[1] = 0;
  memset(v196, 0, sizeof(v196));
  unint64_t v102 = v7[1];
  uint64_t v103 = -(uint64_t)v102;
  if (v183)
  {
    int v104 = v183 - 1;
    int v105 = *((_DWORD *)v7 + 18);
    if (v105 < (int)v183 - 1) {
      int v104 = *((_DWORD *)v7 + 18);
    }
    if (v105 < (int)v183) {
      int v106 = v104;
    }
    else {
      int v106 = v104 + 1;
    }
    if ((v106 & 0x80000000) == 0 && v106 < v105)
    {
      uint64_t v107 = v7[7];
      for (int j = v107[v106]; (j - 1) <= 0x3FFFFFFE; int j = v107[++v106])
      {
        if (v102)
        {
          uint64_t v109 = 2 * (void)v102;
          unint64_t v110 = *v7;
          while (*v110 != j)
          {
            ++v110;
            v109 -= 2;
            if (!v109)
            {
              unint64_t v110 = &(*v7)[(void)v102];
              break;
            }
          }
        }
        else
        {
          unint64_t v110 = *v7;
        }
        if (v102 == (unsigned __int16 *)(v110 - *v7)) {
          break;
        }
        if (v106 == v105 - 1)
        {
          int v106 = *((_DWORD *)v7 + 18);
          break;
        }
      }
    }
  }
  else
  {
    int v106 = *((_DWORD *)v7 + 18);
  }
  if (v106 == v103) {
    return 0;
  }
  uint64_t v189 = 0;
  uint64_t v111 = 0;
  unint64_t v112 = -*((_DWORD *)v7 + 2);
  uint64_t v190 = v16;
  unsigned int v188 = v6;
  unint64_t v187 = v7;
  int v186 = v106;
  do
  {
    uint64_t v113 = &(*v7)[(void)v7[1] + (int)v112];
    if ((int)v103 >= 0) {
      uint64_t v113 = &v7[7][v112];
    }
    unint64_t v114 = *v113;
    if (*(unsigned __int8 *)(*(void *)(v9 + 72) + v114) >= v6) {
      goto LABEL_163;
    }
    if (v6 == 1)
    {
      uint64_t v172 = *(void *)(v9 + 64);
      if (*(void *)(v172 + 48) > v114
        && *(_WORD *)(*(void *)(v172 + 40) + 2 * v114)
        && !llvm::LiveRegMatrix::isPhysRegUsed(*(void *)(v9 + 24), v114))
      {
        goto LABEL_163;
      }
    }
    if ((int)llvm::LiveRegMatrix::checkInterference(*(void *)(v9 + 24), (llvm::LiveRange *)v16, v114) > 1) {
      goto LABEL_163;
    }
    unsigned int v193 = v114;
    unint64_t v191 = v112;
    uint64_t v192 = v111;
    uint64_t v194 = llvm::LiveIntervals::intervalIsInOneMBB(*(void *)(v9 + 32), v16);
    uint64_t v115 = *(void *)(v9 + 16);
    unsigned int v195 = *(_DWORD *)(*(void *)(v115 + 1248) + 8 * (*(_DWORD *)(v16 + 112) & 0x7FFFFFFF) + 4);
    if (!v195) {
      unsigned int v195 = *(_DWORD *)(v115 + 1280);
    }
    uint64_t v116 = 0;
    unint64_t v199 = v201;
    uint64_t v200 = 0x2000000000;
    uint64_t v117 = *(void *)(v9 + 56);
    if (v117) {
      unint64_t v118 = (void *)(v117 + 8);
    }
    else {
      unint64_t v118 = 0;
    }
    unint64_t v119 = *(unsigned int *)(*v118 + 24 * v193 + 16);
    BOOL v120 = (_WORD *)(v118[6] + ((v119 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v121 = *v120 + (v119 & 0xF) * v193;
    float v122 = 0.0;
    while (1)
    {
      uint64_t v123 = *(void *)(v9 + 24);
      unsigned int v124 = v121;
      uint64_t v125 = *(void *)(v123 + 400);
      uint64_t v126 = v125 + 176 * v121;
      int v127 = *(_DWORD *)(v123 + 272);
      uint64_t v128 = (_DWORD *)(*(void *)(v123 + 392) + 216 * v124);
      if (*(_DWORD *)(v126 + 168) != v127
        || *(void *)(v125 + 176 * v124 + 8) != v16
        || *(_DWORD **)v126 != v128
        || *v128 != *(_DWORD *)(v125 + 176 * v124 + 164))
      {
        *(void *)uint64_t v126 = v128;
        uint64_t v129 = v125 + 176 * v124;
        *(void *)(v129 + 8) = v16;
        *(_DWORD *)(v129 + 120) = 0;
        *(_WORD *)(v129 + 160) = 0;
        *(_DWORD *)(v129 + 164) = *v128;
        *(_DWORD *)(v126 + 168) = v127;
        unsigned int v130 = dword_1EBD05AA0;
LABEL_106:
        llvm::LiveIntervalUnion::Query::collectInterferingVRegs((llvm::LiveIntervalUnion::Query *)v126, v130);
        unsigned int v131 = *(_DWORD *)(v126 + 120);
        goto LABEL_107;
      }
      unsigned int v131 = *(_DWORD *)(v126 + 120);
      unsigned int v130 = dword_1EBD05AA0;
      if (*(unsigned char *)(v126 + 161)) {
        BOOL v162 = v131 > dword_1EBD05AA0;
      }
      else {
        BOOL v162 = 1;
      }
      if (v162) {
        goto LABEL_106;
      }
LABEL_107:
      if (!(v131 | v200)) {
        goto LABEL_147;
      }
      if (v131 >= dword_1EBD05AA0) {
        break;
      }
      sub_1CB935BDC((unsigned int *)&v199, *(unsigned char **)(v126 + 112), (unsigned char *)(*(void *)(v126 + 112) + 8 * v131));
      uint64_t v132 = *(unsigned int *)(v126 + 120);
      if (v132)
      {
        uint64_t v133 = *(void *)(v126 + 112);
        uint64_t v134 = v133 + 8 * v132;
        while (1)
        {
          uint64_t v136 = *(void *)(v134 - 8);
          v134 -= 8;
          uint64_t v135 = v136;
          unsigned int v137 = *(_DWORD *)(v136 + 112);
          if (*(void *)(v99 + 96))
          {
            for (uint64_t k = *(uint64_t **)(v99 + 88); k; uint64_t k = (uint64_t *)*k)
            {
              unsigned int v139 = *((_DWORD *)k + 7);
              if (v137 >= v139)
              {
                if (v139 >= v137) {
                  goto LABEL_157;
                }
                ++k;
              }
            }
          }
          else
          {
            uint64_t v140 = *(unsigned int *)(v99 + 8);
            if (v140)
            {
              uint64_t v141 = *(_DWORD **)v99;
              uint64_t v142 = 4 * v140;
              while (*v141 != v137)
              {
                ++v141;
                v142 -= 4;
                if (!v142) {
                  goto LABEL_124;
                }
              }
              if (v142) {
                goto LABEL_157;
              }
            }
          }
LABEL_124:
          uint64_t v143 = v137 & 0x7FFFFFFF;
          uint64_t v144 = *(void *)(*(void *)(v9 + 16) + 1248);
          if (*(_DWORD *)(v144 + 8 * v143) == 6) {
            goto LABEL_157;
          }
          if (*(float *)(v16 + 116) != INFINITY)
          {
            if (v195 <= *(_DWORD *)(v144 + 8 * v143 + 4)) {
              goto LABEL_157;
            }
            goto LABEL_140;
          }
          if (*(float *)(v135 + 116) != INFINITY) {
            break;
          }
          uint64_t v145 = *(void *)(v9 + 64);
          uint64_t v146 = *(void *)(*(void *)(v9 + 48) + 24);
          unint64_t v147 = (unsigned __int16 ***)(*(void *)(v146 + 16 * (*(_DWORD *)(v16 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v148 = *((unsigned __int16 *)*v147 + 12);
          uint64_t v149 = *(void *)v145;
          int v150 = *(_DWORD *)(v145 + 8);
          if (v150 == *(_DWORD *)(*(void *)v145 + 24 * *((unsigned __int16 *)*v147 + 12)))
          {
            uint64_t v151 = *(void *)v145;
          }
          else
          {
            llvm::RegisterClassInfo::compute((uint64_t *)v145, v147);
            uint64_t v145 = *(void *)(v9 + 64);
            uint64_t v146 = *(void *)(*(void *)(v9 + 48) + 24);
            uint64_t v151 = *(void *)v145;
            int v150 = *(_DWORD *)(v145 + 8);
            uint64_t v143 = *(_DWORD *)(v135 + 112) & 0x7FFFFFFF;
          }
          unsigned int v152 = *(_DWORD *)(v149 + 24 * v148 + 4);
          long long v153 = (unsigned __int16 ***)(*(void *)(v146 + 16 * v143) & 0xFFFFFFFFFFFFFFF8);
          unsigned int v154 = *((unsigned __int16 *)*v153 + 12);
          if (v150 != *(_DWORD *)(v151 + 24 * *((unsigned __int16 *)*v153 + 12)))
          {
            uint64_t v155 = v151;
            uint64_t v184 = v133;
            uint64_t v156 = v9;
            uint64_t v157 = v103;
            unsigned int v158 = v152;
            llvm::RegisterClassInfo::compute((uint64_t *)v145, v153);
            unsigned int v152 = v158;
            uint64_t v103 = v157;
            uint64_t v9 = v156;
            uint64_t v133 = v184;
            uint64_t v151 = v155;
            uint64_t v143 = *(_DWORD *)(v135 + 112) & 0x7FFFFFFF;
          }
          if (v195 <= *(_DWORD *)(*(void *)(*(void *)(v9 + 16) + 1248) + 8 * v143 + 4))
          {
            unsigned int v159 = *(_DWORD *)(v151 + 24 * v154 + 4);
            uint64_t v99 = v185;
            uint64_t v16 = v190;
            if (v152 >= v159) {
              goto LABEL_157;
            }
LABEL_139:
            float v122 = v122 + 1.0;
            goto LABEL_140;
          }
          uint64_t v99 = v185;
          uint64_t v16 = v190;
LABEL_140:
          BOOL v160 = v194;
          if (v194)
          {
            if (llvm::LiveIntervals::intervalIsInOneMBB(*(void *)(v9 + 32), v135))
            {
              if (*(unsigned char *)(v9 + 88)) {
                BOOL v160 = llvm::RegAllocEvictionAdvisor::canReassign((uint64_t *)v9, v135, v193) == 0;
              }
              else {
                BOOL v160 = 1;
              }
            }
            else
            {
              BOOL v160 = 0;
            }
          }
          v116 += v160;
          if (v134 == v133) {
            goto LABEL_147;
          }
        }
        if (v195 > *(_DWORD *)(v144 + 8 * v143 + 4)) {
          goto LABEL_140;
        }
        goto LABEL_139;
      }
LABEL_147:
      int v161 = (unsigned __int16)v120[1];
      ++v120;
      unsigned __int16 v121 = v161 + v124;
      if (!v161)
      {
        unint64_t v112 = v191;
        uint64_t v111 = v192;
        sub_1CC3C1FD8(v9, (uint64_t)&v199, (float *)v196, v192, (v191 >> 31) & 1, v116, v122);
        int v171 = 1;
        goto LABEL_158;
      }
    }
LABEL_157:
    int v171 = 0;
    unint64_t v112 = v191;
    uint64_t v111 = v192;
LABEL_158:
    uint64_t v6 = v188;
    uint64_t v7 = v187;
    int v106 = v186;
    if (v199 != v201) {
      free(v199);
    }
    if (v171)
    {
      ++v189;
      uint64_t v163 = &v198[2 * v111];
      unsigned int *v163 = v193;
      *((unsigned char *)v163 + 4) = 1;
    }
    uint64_t v16 = v190;
LABEL_163:
    int v164 = *((_DWORD *)v7 + 18);
    if (v164 <= (int)v103)
    {
      int v165 = v103;
    }
    else
    {
      unint64_t v112 = (v103 + 1);
      int v165 = v103 + 1;
    }
    if ((v165 & 0x80000000) == 0 && v165 < v164)
    {
      long long v166 = v7[7];
      int v167 = v166[v165];
      if ((v167 - 1) <= 0x3FFFFFFE)
      {
        int v168 = v7[1];
        do
        {
          if (v168)
          {
            uint64_t v169 = 2 * (void)v168;
            uint64_t v170 = *v7;
            while (*v170 != (unsigned __int16)v167)
            {
              ++v170;
              v169 -= 2;
              if (!v169)
              {
                uint64_t v170 = &(*v7)[(void)v168];
                break;
              }
            }
          }
          else
          {
            uint64_t v170 = *v7;
          }
          if (v168 == (unsigned __int16 *)(v170 - *v7)) {
            break;
          }
          unint64_t v112 = (v165 + 1);
          if (v112 == v164) {
            break;
          }
          int v167 = v166[v112];
          ++v165;
        }
        while ((v167 - 1) <= 0x3FFFFFFE);
      }
    }
    ++v111;
    uint64_t v103 = v112;
  }
  while (v106 != v112);
  if (!v189) {
    return 0;
  }
  if (v182)
  {
    unint64_t v199 = v201;
    v201[0] = v16;
    uint64_t v200 = 0x100000001;
    sub_1CC3C1FD8(v9, (uint64_t)&v199, (float *)v196, 32, 0, 0, 0.0);
    if (v199 != v201) {
      free(v199);
    }
  }
  uint64_t v173 = 0;
  v101.n128_u32[0] = 1.0;
  do
  {
    float v174 = *(float *)((char *)v196 + v173);
    if (v174 == 0.0) {
      float v174 = 1.0;
    }
    *(float *)((char *)v196 + v173) = v174;
    v173 += 4;
  }
  while (v173 != 84);
  for (uint64_t m = 0; m != 21; ++m)
  {
    if (((*(void *)(v9 + 216) >> m) & 1) == 0)
    {
      uint64_t v176 = 0;
      float v177 = *((float *)v196 + m);
      do
      {
        uint64_t v178 = (*(uint64_t (**)(void, uint64_t, __n128))(**(void **)(v9 + 192) + 16))(*(void *)(v9 + 192), m, v101);
        v101.n128_f32[0] = *(float *)(v178 + v176) / v177;
        *(_DWORD *)(v178 + v176) = v101.n128_u32[0];
        v176 += 4;
      }
      while (v176 != 132);
    }
  }
  float v179 = (float)(unint64_t)((uint64_t)(*(void *)(*(void *)(v9 + 16) + 1216)
                                           - *(void *)(*(void *)(v9 + 16) + 1208)) >> 3)
       / *(float *)(v9 + 224);
  *(float *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v9 + 192) + 16))(*(void *)(v9 + 192), 20) = v179;
  uint64_t v180 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int16 **, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, v190, v7, v183, v6, v99);
  if (v180 != 32) {
    return v198[2 * v180];
  }
  else {
    return 0;
  }
}

uint64_t sub_1CC3C1F70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 96) + 24))();
}

uint64_t sub_1CC3C1F98(uint64_t a1)
{
  return *(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 192) + 24))(*(void *)(a1 + 192));
}

uint64_t sub_1CC3C1FD8(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7 = a4;
  unint64_t v8 = a3;
  uint64_t v10 = *(unsigned int *)(a2 + 8);
  if (!v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 0;
    uint64_t v20 = 0;
    unint64_t v273 = 0;
    float v21 = 0.0;
    double v22 = 0.0;
    double v23 = 0.0;
    double v24 = 0.0;
    double v25 = 0.0;
    double v26 = 0.0;
    float v27 = 0.0;
    float v271 = 0.0;
    float v269 = 0.0;
    goto LABEL_265;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = 0;
  int v15 = *(float ***)a2;
  uint64_t v16 = *(void *)a2 + 8 * v10;
  uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 288);
  unint64_t v18 = *(void *)(v17 + 344) & 0xFFFFFFFFFFFFFFF9;
  unint64_t v19 = *(void *)(v17 + 352) & 0xFFFFFFFFFFFFFFF9;
  uint64_t v258 = (uint64_t *)(a1 + 232);
  uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  float v21 = 0.0;
  double v22 = 0.0;
  double v23 = 0.0;
  double v24 = 0.0;
  double v25 = 0.0;
  double v26 = 0.0;
  float v27 = 0.0;
  uint64_t v266 = v16;
  do
  {
    uint64_t v28 = *v15;
    int v29 = *((_DWORD *)*v15 + 28);
    uint64_t v30 = v29 & 0x7FFFFFFF;
    uint64_t v31 = *(unsigned int *)(*(void *)(*(void *)(a1 + 16) + 1248) + 8 * v30);
    if (v14 <= v31) {
      uint64_t v14 = *(unsigned int *)(*(void *)(*(void *)(a1 + 16) + 1248) + 8 * (v29 & 0x7FFFFFFF));
    }
    if (v20 >= v31) {
      uint64_t v20 = *(unsigned int *)(*(void *)(*(void *)(a1 + 16) + 1248) + 8 * (v29 & 0x7FFFFFFF));
    }
    if (v27 < v28[29]) {
      float v27 = v28[29];
    }
    if (((**(void **)v28 >> 1) & 3 | *(_DWORD *)((**(void **)v28 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3)) {
      unint64_t v18 = **(void **)v28;
    }
    uint64_t v32 = *(void *)(*(void *)v28 + 24 * *((unsigned int *)v28 + 2) - 16);
    if (((v32 >> 1) & 3 | *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3)) {
      unint64_t v19 = *(void *)(*(void *)v28 + 24 * *((unsigned int *)v28 + 2) - 16);
    }
    unsigned int v33 = *(_DWORD *)(a1 + 248);
    if (v33)
    {
      uint64_t v34 = *(void *)(a1 + 232);
      uint64_t v35 = (v33 - 1) & (37 * v29);
      long long v36 = (int *)(v34 + (v35 << 6));
      int v37 = *v36;
      if (v29 == *v36)
      {
LABEL_15:
        uint64_t v38 = (double *)(v36 + 2);
        goto LABEL_30;
      }
      unsigned int v158 = 0;
      int v159 = 1;
      while (v37 != -1)
      {
        if (v158) {
          BOOL v160 = 0;
        }
        else {
          BOOL v160 = v37 == -2;
        }
        if (v160) {
          unsigned int v158 = v36;
        }
        int v161 = v35 + v159++;
        uint64_t v35 = v161 & (v33 - 1);
        long long v36 = (int *)(v34 + (v35 << 6));
        int v37 = *v36;
        if (v29 == *v36) {
          goto LABEL_15;
        }
      }
      if (v158) {
        long long v36 = v158;
      }
    }
    else
    {
      long long v36 = 0;
    }
    int v39 = *(_DWORD *)(a1 + 240);
    uint64_t v270 = v14;
    uint64_t v272 = v20;
    unint64_t v267 = v19;
    unint64_t v268 = v18;
    if (4 * v39 + 4 >= 3 * v33)
    {
      sub_1CC3C361C(v258, 2 * v33);
      int v162 = *(_DWORD *)(a1 + 248);
      if (!v162) {
        goto LABEL_235;
      }
      uint64_t v163 = *(void *)(a1 + 232);
      unsigned int v164 = v162 - 1;
      uint64_t v165 = v164 & (37 * v29);
      long long v36 = (int *)(v163 + (v165 << 6));
      int v166 = *v36;
      if (v29 != *v36)
      {
        int v167 = 0;
        int v168 = 1;
        while (v166 != -1)
        {
          if (v167) {
            BOOL v169 = 0;
          }
          else {
            BOOL v169 = v166 == -2;
          }
          if (v169) {
            int v167 = v36;
          }
          int v170 = v165 + v168++;
          uint64_t v165 = v170 & v164;
          long long v36 = (int *)(v163 + (v165 << 6));
          int v166 = *v36;
          if (v29 == *v36) {
            goto LABEL_19;
          }
        }
        goto LABEL_236;
      }
    }
    else if (v33 + ~v39 - *(_DWORD *)(a1 + 244) <= v33 >> 3)
    {
      sub_1CC3C361C(v258, v33);
      int v171 = *(_DWORD *)(a1 + 248);
      if (!v171)
      {
LABEL_235:
        long long v36 = 0;
        goto LABEL_19;
      }
      uint64_t v172 = *(void *)(a1 + 232);
      unsigned int v173 = v171 - 1;
      uint64_t v174 = v173 & (37 * v29);
      long long v36 = (int *)(v172 + (v174 << 6));
      int v175 = *v36;
      if (v29 != *v36)
      {
        int v167 = 0;
        int v176 = 1;
        while (v175 != -1)
        {
          if (v167) {
            BOOL v177 = 0;
          }
          else {
            BOOL v177 = v175 == -2;
          }
          if (v177) {
            int v167 = v36;
          }
          int v178 = v174 + v176++;
          uint64_t v174 = v178 & v173;
          long long v36 = (int *)(v172 + (v174 << 6));
          int v175 = *v36;
          if (v29 == *v36) {
            goto LABEL_19;
          }
        }
LABEL_236:
        if (v167) {
          long long v36 = v167;
        }
      }
    }
LABEL_19:
    ++*(_DWORD *)(a1 + 240);
    if (*v36 != -1) {
      --*(_DWORD *)(a1 + 244);
    }
    *long long v36 = v29;
    *(_OWORD *)(v36 + 2) = 0u;
    *(_OWORD *)(v36 + 6) = 0u;
    *(_OWORD *)(v36 + 10) = 0u;
    *(void *)((char *)v36 + 53) = 0;
    uint64_t v274 = v278;
    uint64_t v275 = v278;
    uint64_t v276 = 8;
    int v277 = 0;
    uint64_t v40 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 16) + 176))(*(void *)(*(void *)(a1 + 8) + 16));
    uint64_t v41 = *(void *)(a1 + 48);
    uint64_t v42 = *((unsigned int *)v28 + 28);
    if ((v42 & 0x80000000) != 0) {
      uint64_t v43 = (uint64_t *)(*(void *)(v41 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v43 = (uint64_t *)(*(void *)(v41 + 272) + 8 * v42);
    }
    float v44 = 1.0;
    uint64_t v45 = *v43;
    if (*v43)
    {
      while ((*(_DWORD *)v45 & 0x80000000) != 0)
      {
        uint64_t v45 = *(void *)(v45 + 24);
        if (!v45) {
          goto LABEL_27;
        }
      }
      uint64_t v265 = (uint64_t *)(v40 + 8);
      while (2)
      {
        uint64_t v54 = *(void *)(v45 + 8);
        do
          uint64_t v45 = *(void *)(v45 + 24);
        while (v45 && ((*(_DWORD *)v45 & 0x80000000) != 0 || *(void *)(v45 + 8) == v54));
        ++*((void *)v36 + 6);
        uint64_t v55 = v275;
        uint64_t v56 = HIDWORD(v276);
        if (v275 == v274)
        {
          if (HIDWORD(v276))
          {
            size_t v57 = 0;
            uint64_t v58 = 8 * HIDWORD(v276);
            unint64_t v59 = v275;
            while (*(void *)v59 != v54)
            {
              if (*(void *)v59 == -2) {
                size_t v57 = v59;
              }
              v59 += 8;
              v58 -= 8;
              if (!v58)
              {
                if (!v57) {
                  goto LABEL_49;
                }
                *(void *)size_t v57 = v54;
                --v277;
                goto LABEL_73;
              }
            }
            goto LABEL_180;
          }
LABEL_49:
          unsigned int v60 = v276;
          if (HIDWORD(v276) < v276)
          {
            ++HIDWORD(v276);
            *(void *)&v275[8 * v56] = v54;
            goto LABEL_73;
          }
        }
        else
        {
          unsigned int v60 = v276;
        }
        if (3 * v60 <= 4 * (HIDWORD(v276) - v277))
        {
          if (v60 >= 0x40) {
            v60 *= 2;
          }
          else {
            unsigned int v60 = 128;
          }
        }
        else if (v60 - HIDWORD(v276) >= v60 >> 3)
        {
LABEL_54:
          unsigned int v61 = v60 - 1;
          unsigned int v62 = (v60 - 1) & ((v54 >> 4) ^ (v54 >> 9));
          unint64_t v63 = &v55[8 * v62];
          uint64_t v64 = *(void *)v63;
          if (*(void *)v63 != -1)
          {
            size_t v65 = 0;
            int v66 = 1;
            while (v64 != v54)
            {
              if (v65) {
                BOOL v67 = 0;
              }
              else {
                BOOL v67 = v64 == -2;
              }
              if (v67) {
                size_t v65 = v63;
              }
              unsigned int v68 = v62 + v66++;
              unsigned int v62 = v68 & v61;
              unint64_t v63 = &v55[8 * (v68 & v61)];
              uint64_t v64 = *(void *)v63;
              if (*(void *)v63 == -1) {
                goto LABEL_66;
              }
            }
            goto LABEL_180;
          }
          size_t v65 = 0;
LABEL_66:
          if (v65) {
            size_t v69 = v65;
          }
          else {
            size_t v69 = v63;
          }
          if (*(void *)v69 == v54)
          {
LABEL_180:
            if (!v45) {
              goto LABEL_27;
            }
            continue;
          }
          if (*(void *)v69 == -2) {
            --v277;
          }
          else {
            ++HIDWORD(v276);
          }
          *(void *)size_t v69 = v54;
LABEL_73:
          int v70 = **(unsigned __int16 **)(v54 + 16);
          if (v70 == 10) {
            goto LABEL_180;
          }
          if (v70 == 19)
          {
            unsigned int v71 = *(_DWORD **)(v54 + 32);
            if (v71[1] == v71[9] && ((v71[8] ^ *v71) & 0xFFF00) == 0) {
              goto LABEL_180;
            }
          }
          int v72 = *((_DWORD *)v28 + 28);
          uint64_t v73 = *(unsigned int *)(v54 + 40);
          if (v73)
          {
            int v74 = 0;
            char v75 = 0;
            int v76 = 0;
            size_t v77 = (_DWORD *)(*(void *)(v54 + 32) + 4);
            do
            {
              unsigned int v78 = *(v77 - 1);
              if (!(_BYTE)v78 && *v77 == v72)
              {
                int v79 = (v78 >> 28) & 1;
                if ((v78 & 0xFFF00) == 0) {
                  int v79 = 1;
                }
                int v80 = v79 | v76;
                int v81 = v79 ^ 1 | v74;
                if ((v78 & 0x1000000) != 0) {
                  int v76 = v80;
                }
                else {
                  v75 |= (v78 & 0x10000000) == 0;
                }
                if ((v78 & 0x1000000) != 0) {
                  int v74 = v81;
                }
              }
              v77 += 8;
              --v73;
            }
            while (v73);
            if (v75)
            {
              char v82 = 1;
              goto LABEL_93;
            }
          }
          else
          {
            LOBYTE(v74) = 0;
            LOBYTE(v76) = 0;
          }
          char v82 = v74 & (v76 ^ 1);
LABEL_93:
          uint64_t v83 = *(void *)(v54 + 24);
          unint64_t v84 = *(void *)(*(void *)(a1 + 200) + 248);
          unsigned int v85 = v83 >> 4;
          if (v84)
          {
            int v86 = *(_DWORD *)(v84 + 176);
            if (v86)
            {
              uint64_t v87 = *(void *)(v84 + 160);
              unsigned int v88 = v86 - 1;
              uint64_t v89 = (v86 - 1) & (v85 ^ (v83 >> 9));
              uint64_t v90 = *(void *)(v87 + 16 * v89);
              if (v90 == v83)
              {
LABEL_96:
                uint64_t v91 = *(unsigned int *)(v87 + 16 * v89 + 8);
                if (v91 != 0xFFFFFFFFLL)
                {
                  unint64_t v92 = *(void *)(*(void *)(v84 + 8) + 24 * v91 + 16);
                  goto LABEL_98;
                }
              }
              else
              {
                int v130 = 1;
                while (v90 != -4096)
                {
                  int v131 = v89 + v130++;
                  uint64_t v89 = v131 & v88;
                  uint64_t v90 = *(void *)(v87 + 16 * v89);
                  if (v90 == v83) {
                    goto LABEL_96;
                  }
                }
              }
              float v93 = 0.0;
            }
            else
            {
              unint64_t v92 = 0;
LABEL_98:
              float v93 = (float)v92;
            }
            unint64_t v84 = *(void *)(*(void *)(v84 + 8) + 16);
          }
          else
          {
            float v93 = 0.0;
          }
          unsigned __int8 v94 = v74 | v76;
          float v95 = v93 * (float)(v44 / (float)v84);
          float v96 = *((float *)v36 + 14);
          if (v95 >= v96) {
            float v96 = v95;
          }
          *((float *)v36 + 14) = v96;
          double v97 = *((double *)v36 + 2);
          *((double *)v36 + 1) = *((double *)v36 + 1)
                               + (float)(v95 * (float)(v82 & ~v94 & 1));
          *((double *)v36 + 2) = v97 + (float)(v95 * (float)(v94 & ~v82 & 1));
          *((double *)v36 + 3) = *((double *)v36 + 3) + (float)(v95 * (float)(v82 & v94 & 1));
          uint64_t v98 = *(void *)(a1 + 208);
          int v99 = *(_DWORD *)(v98 + 264);
          if (!v99)
          {
LABEL_172:
            if (v70 != 19) {
              goto LABEL_180;
            }
            unint64_t v147 = *(_DWORD **)(v54 + 32);
            unsigned int SubReg = v147[1];
            if (SubReg == v72)
            {
              unsigned int SubReg = v147[9];
              uint64_t v149 = v147 + 8;
              if (!SubReg) {
                goto LABEL_180;
              }
            }
            else
            {
              uint64_t v149 = *(_DWORD **)(v54 + 32);
              v147 += 8;
              if (!SubReg) {
                goto LABEL_180;
              }
            }
            int v150 = (*v147 >> 8) & 0xFFF;
            int v151 = (*v149 >> 8) & 0xFFF;
            if ((SubReg & 0x80000000) != 0)
            {
              if (v150 != v151) {
                goto LABEL_180;
              }
            }
            else
            {
              uint64_t v152 = *(void *)(*(void *)(*(void *)(a1 + 48) + 24) + 16 * (v72 & 0x7FFFFFFF));
              if (v151)
              {
                int v257 = v150;
                unsigned int SubReg = llvm::MCRegisterInfo::getSubReg(v265, SubReg, v151);
                float v44 = 1.0;
                int v150 = v257;
              }
              long long v153 = (uint64_t *)(v152 & 0xFFFFFFFFFFFFFFF8);
              if (SubReg - 1 > 0x3FFFFFFE
                || SubReg >> 3 >= *(unsigned __int16 *)(*v153 + 22)
                || ((*(unsigned __int8 *)(*(void *)(*v153 + 8) + ((unint64_t)SubReg >> 3)) >> (SubReg & 7)) & 1) == 0)
              {
                if (!v150) {
                  goto LABEL_180;
                }
                int MatchingSuperReg = llvm::MCRegisterInfo::getMatchingSuperReg(v265, SubReg, v150, *v153);
                float v44 = 1.0;
                if (!MatchingSuperReg) {
                  goto LABEL_180;
                }
              }
            }
            *((double *)v36 + 5) = *((double *)v36 + 5) + v95;
            goto LABEL_180;
          }
          uint64_t v100 = *(void *)(v98 + 248);
          unsigned int v101 = v85 ^ (v83 >> 9);
          unsigned int v102 = v99 - 1;
          uint64_t v103 = (v99 - 1) & v101;
          uint64_t v104 = *(void *)(v100 + 16 * v103);
          if (v83 != v104)
          {
            int v105 = 1;
            while (v104 != -4096)
            {
              int v106 = v103 + v105++;
              uint64_t v103 = v106 & v102;
              uint64_t v104 = *(void *)(v100 + 16 * v103);
              if (v83 == v104) {
                goto LABEL_107;
              }
            }
            goto LABEL_172;
          }
LABEL_107:
          uint64_t v107 = *(void *)(v100 + 16 * v103 + 8);
          if (!v107) {
            goto LABEL_172;
          }
          unint64_t v108 = *(uint64_t **)(v83 + 88);
          uint64_t v109 = *(uint64_t **)(v83 + 96);
          if (v108 == v109) {
            goto LABEL_172;
          }
          unint64_t v110 = (unsigned int *)(v107 + 76);
          uint64_t v111 = (unsigned int *)(v107 + 72);
          uint64_t v114 = v107 + 56;
          uint64_t v113 = *(void *)(v107 + 56);
          uint64_t v112 = *(void *)(v114 + 8);
          uint64_t v115 = v112 == v113 ? v110 : v111;
          uint64_t v116 = v112;
          while (1)
          {
            uint64_t v117 = *v108;
            if (v116 == v113)
            {
              uint64_t v118 = *v110;
              unint64_t v119 = (void *)(v113 + 8 * v118);
              if (v118)
              {
                uint64_t v120 = 0;
                uint64_t v121 = 8 * v118;
                while (*(void *)(v113 + v120) != v117)
                {
                  v120 += 8;
                  if (v121 == v120) {
                    goto LABEL_131;
                  }
                }
                unint64_t v119 = (void *)(v113 + v120);
              }
LABEL_131:
              uint64_t v116 = v113;
            }
            else
            {
              int v122 = *v111 - 1;
              unsigned int v123 = v122 & ((v117 >> 4) ^ (v117 >> 9));
              unint64_t v119 = (void *)(v112 + 8 * v123);
              uint64_t v124 = *v119;
              if (*v119 == -1)
              {
                uint64_t v125 = 0;
LABEL_133:
                if (v125) {
                  unint64_t v119 = v125;
                }
                if (*v119 != v117) {
                  unint64_t v119 = (void *)(v112 + 8 * *v115);
                }
              }
              else
              {
                uint64_t v125 = 0;
                int v126 = 1;
                while (v124 != v117)
                {
                  if (v125) {
                    BOOL v127 = 0;
                  }
                  else {
                    BOOL v127 = v124 == -2;
                  }
                  if (v127) {
                    uint64_t v125 = v119;
                  }
                  unsigned int v128 = v123 + v126++;
                  unsigned int v123 = v128 & v122;
                  unint64_t v119 = (void *)(v112 + 8 * (v128 & v122));
                  uint64_t v124 = *v119;
                  if (*v119 == -1) {
                    goto LABEL_133;
                  }
                }
              }
              uint64_t v116 = v112;
            }
            uint64_t v129 = v116 == v113 ? v110 : v111;
            if (v119 == (void *)(v116 + 8 * *v129)) {
              break;
            }
            if (++v108 == v109) {
              goto LABEL_172;
            }
          }
          if ((v94 & 1) == 0) {
            goto LABEL_172;
          }
          uint64_t v132 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 288) + 392)
                           + 16 * *(unsigned int *)(v83 + 24)
                           + 8);
          unsigned int v133 = (v132 >> 1) & 3;
          unint64_t v134 = v132 & 0xFFFFFFFFFFFFFFF8;
          if (v133) {
            uint64_t v135 = v134 | (2 * (v133 - 1));
          }
          else {
            uint64_t v135 = *(void *)v134 | 6;
          }
          unsigned int v136 = *((_DWORD *)v28 + 2);
          unsigned int v137 = *(unint64_t **)v28;
          if (v136)
          {
            unint64_t v138 = v137[3 * v136 - 2];
            unsigned int v139 = *(_DWORD *)((v135 & 0xFFFFFFFFFFFFFFF8) + 24) | (v135 >> 1) & 3;
            unsigned int v140 = (v138 >> 1) & 3 | *(_DWORD *)((v138 & 0xFFFFFFFFFFFFFFF8) + 24);
            uint64_t v141 = *(unint64_t **)v28;
            unint64_t v142 = *((unsigned int *)v28 + 2);
            if (v139 < v140)
            {
              do
              {
                unint64_t v143 = v142 >> 1;
                unint64_t v144 = v141[3 * (v142 >> 1) + 1];
                LODWORD(v144) = (v144 >> 1) & 3 | *(_DWORD *)((v144 & 0xFFFFFFFFFFFFFFF8) + 24);
                v142 -= (v142 >> 1) + 1;
                BOOL v145 = v139 >= v144;
                if (v139 >= v144) {
                  unint64_t v146 = v143 + 1;
                }
                else {
                  unint64_t v146 = 0;
                }
                v141 += 3 * v146;
                if (!v145) {
                  unint64_t v142 = v143;
                }
              }
              while (v142);
              goto LABEL_169;
            }
          }
          else
          {
            unsigned int v136 = 0;
          }
          uint64_t v141 = &v137[3 * v136];
LABEL_169:
          if (v141 != &v137[3 * v136]
            && ((*v141 >> 1) & 3 | *(_DWORD *)((*v141 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v135 & 0xFFFFFFFFFFFFFFF8) + 24) | (v135 >> 1) & 3))
          {
            *((double *)v36 + 4) = *((double *)v36 + 4) + v95;
          }
          goto LABEL_172;
        }
        break;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v274, v60);
      float v44 = 1.0;
      unsigned int v60 = v276;
      uint64_t v55 = v275;
      goto LABEL_54;
    }
LABEL_27:
    uint64_t v46 = *(const llvm::LiveInterval **)(a1 + 32);
    int v47 = *(const llvm::LiveIntervals **)(a1 + 40);
    BOOL v48 = (const llvm::VirtRegMap *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 16) + 104))(*(void *)(*(void *)(a1 + 8) + 16));
    *((unsigned char *)v36 + 60) = llvm::VirtRegAuxInfo::isRematerializable((llvm::VirtRegAuxInfo *)v28, v46, v47, v48, v49);
    if (v275 != v274) {
      free(v275);
    }
    uint64_t v30 = v28[28] & 0x7FFFFFFF;
    uint64_t v14 = v270;
    uint64_t v20 = v272;
    unint64_t v19 = v267;
    unint64_t v18 = v268;
    uint64_t v16 = v266;
    uint64_t v38 = (double *)(v36 + 2);
LABEL_30:
    uint64_t v50 = *(void *)(a1 + 40);
    uint64_t v51 = *(void *)(*(void *)(v50 + 248) + 208);
    uint64_t v52 = v51 + 40 * v30;
    if (!*(_DWORD *)(v52 + 16)
      || ((int v155 = **(_DWORD **)(v52 + 8), !*(_DWORD *)(v51 + 40 * v30))
        ? (BOOL v156 = v155 == 0)
        : (BOOL v156 = 1),
          v156))
    {
      BOOL v53 = 0;
    }
    else
    {
      uint64_t v157 = *(void *)(v50 + 280);
      if (v155 < 0) {
        int v155 = *(_DWORD *)(v157 + 4 * (v155 & 0x7FFFFFFF));
      }
      BOOL v53 = *(_DWORD *)(v157 + 4 * v30) == v155;
    }
    if (v21 < *((float *)v36 + 14)) {
      float v21 = *((float *)v36 + 14);
    }
    double v22 = v22 + *v38;
    double v23 = v23 + *((double *)v36 + 2);
    double v24 = v24 + *((double *)v36 + 3);
    double v25 = v25 + *((double *)v36 + 4);
    v12 += v53;
    v11 += *((void *)v36 + 6);
    double v26 = v26 + *((double *)v36 + 5);
    v13 += *((unsigned __int8 *)v36 + 60);
    ++v15;
  }
  while (v15 != (float **)v16);
  if (*(_DWORD *)(a2 + 8))
  {
    uint64_t v179 = *(void *)(*(void *)(a1 + 32) + 288);
    uint64_t v7 = a4;
    if (v18 >= 8 && (uint64_t v180 = *(void *)((v18 & 0xFFFFFFFFFFFFFFF8) + 16)) != 0)
    {
      uint64_t v181 = (uint64_t *)(v180 + 24);
      unint64_t v8 = a3;
    }
    else
    {
      uint64_t v240 = *(unsigned int *)(v179 + 544);
      if (v240)
      {
        unsigned int v241 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
        int v242 = *(void **)(v179 + 536);
        unint64_t v243 = *(unsigned int *)(v179 + 544);
        unint64_t v8 = a3;
        do
        {
          unint64_t v244 = v243 >> 1;
          int v245 = &v242[2 * (v243 >> 1)];
          uint64_t v247 = *v245;
          uint64_t v246 = v245 + 2;
          v243 += ~(v243 >> 1);
          if (((v247 >> 1) & 3 | *(_DWORD *)((v247 & 0xFFFFFFFFFFFFFFF8) + 24)) < v241) {
            int v242 = v246;
          }
          else {
            unint64_t v243 = v244;
          }
        }
        while (v243);
        if (v242 == (void *)(*(void *)(v179 + 536) + 16 * v240)
          || ((*v242 >> 1) & 3 | *(_DWORD *)((*v242 & 0xFFFFFFFFFFFFFFF8) + 24)) > v241)
        {
          v242 -= 2;
        }
      }
      else
      {
        int v242 = *(void **)(v179 + 536);
        unint64_t v8 = a3;
      }
      uint64_t v181 = v242 + 1;
    }
    unint64_t v182 = *(void *)(*(void *)(a1 + 200) + 248);
    if (v182)
    {
      int v183 = *(_DWORD *)(v182 + 176);
      if (v183)
      {
        uint64_t v184 = *v181;
        uint64_t v185 = *(void *)(v182 + 160);
        unsigned int v186 = v183 - 1;
        uint64_t v187 = (v183 - 1) & ((v184 >> 4) ^ (v184 >> 9));
        uint64_t v188 = *(void *)(v185 + 16 * v187);
        if (v188 == v184)
        {
LABEL_246:
          uint64_t v189 = *(unsigned int *)(v185 + 16 * v187 + 8);
          if (v189 != 0xFFFFFFFFLL)
          {
            unint64_t v190 = *(void *)(*(void *)(v182 + 8) + 24 * v189 + 16);
            goto LABEL_248;
          }
        }
        else
        {
          int v236 = 1;
          while (v188 != -4096)
          {
            int v237 = v187 + v236++;
            uint64_t v187 = v237 & v186;
            uint64_t v188 = *(void *)(v185 + 16 * v187);
            if (v188 == v184) {
              goto LABEL_246;
            }
          }
        }
        float v191 = 0.0;
      }
      else
      {
        unint64_t v190 = 0;
LABEL_248:
        float v191 = (float)v190;
      }
      unint64_t v192 = *(void *)(*(void *)(v182 + 8) + 16);
    }
    else
    {
      unint64_t v192 = 0;
      float v191 = 0.0;
    }
    unint64_t v193 = *(void *)(v179 + 344) & 0xFFFFFFFFFFFFFFF8;
    if ((*(_DWORD *)((v19 & 0xFFFFFFFFFFFFFFF8) + 24) | (v19 >> 1) & 3) >= *(_DWORD *)(v193 + 24)) {
      unint64_t v19 = *(void *)v193 & 0xFFFFFFFFFFFFFFF9;
    }
    float v194 = (float)v192;
    unint64_t v195 = v19 & 0xFFFFFFFFFFFFFFF8;
    if (v19 >= 8 && (uint64_t v196 = *(void *)(v195 + 16)) != 0)
    {
      int v197 = (uint64_t *)(v196 + 24);
    }
    else
    {
      uint64_t v248 = *(void *)(v179 + 536);
      unint64_t v249 = *(unsigned int *)(v179 + 544);
      if (v249)
      {
        unsigned int v250 = *(_DWORD *)(v195 + 24) | (v19 >> 1) & 3;
        unsigned int v251 = *(void **)(v179 + 536);
        unint64_t v252 = v249;
        do
        {
          unint64_t v253 = v252 >> 1;
          uint64_t v254 = &v251[2 * (v252 >> 1)];
          uint64_t v256 = *v254;
          uint64_t v255 = v254 + 2;
          v252 += ~(v252 >> 1);
          if (((v256 >> 1) & 3 | *(_DWORD *)((v256 & 0xFFFFFFFFFFFFFFF8) + 24)) < v250) {
            unsigned int v251 = v255;
          }
          else {
            unint64_t v252 = v253;
          }
        }
        while (v252);
        if (v251 == (void *)(v248 + 16 * v249)
          || ((*v251 >> 1) & 3 | *(_DWORD *)((*v251 & 0xFFFFFFFFFFFFFFF8) + 24)) > v250)
        {
          v251 -= 2;
        }
      }
      else
      {
        unsigned int v251 = *(void **)(v179 + 536);
      }
      int v197 = v251 + 1;
    }
    float v198 = 1.0 / v194;
    if (v182)
    {
      int v199 = *(_DWORD *)(v182 + 176);
      if (v199)
      {
        uint64_t v200 = *v197;
        uint64_t v201 = *(void *)(v182 + 160);
        unsigned int v202 = v199 - 1;
        uint64_t v203 = (v199 - 1) & ((v200 >> 4) ^ (v200 >> 9));
        uint64_t v204 = *(void *)(v201 + 16 * v203);
        if (v204 == v200)
        {
LABEL_258:
          uint64_t v205 = *(unsigned int *)(v201 + 16 * v203 + 8);
          if (v205 != 0xFFFFFFFFLL)
          {
            unint64_t v206 = *(void *)(*(void *)(v182 + 8) + 24 * v205 + 16);
            goto LABEL_260;
          }
        }
        else
        {
          int v238 = 1;
          while (v204 != -4096)
          {
            int v239 = v203 + v238++;
            uint64_t v203 = v239 & v202;
            uint64_t v204 = *(void *)(v201 + 16 * v203);
            if (v204 == v200) {
              goto LABEL_258;
            }
          }
        }
        float v207 = 0.0;
      }
      else
      {
        unint64_t v206 = 0;
LABEL_260:
        float v207 = (float)v206;
      }
      unint64_t v182 = *(void *)(*(void *)(v182 + 8) + 16);
    }
    else
    {
      float v207 = 0.0;
    }
    float v269 = v191 * v198;
    float v271 = v207 * (float)(1.0 / (float)v182);
    unint64_t v273 = (int)((*(_DWORD *)(v195 + 24) | (v19 >> 1) & 3)
               - (*(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3));
  }
  else
  {
    unint64_t v273 = 0;
    float v271 = 0.0;
    float v269 = 0.0;
    uint64_t v7 = a4;
    unint64_t v8 = a3;
  }
LABEL_265:
  uint64_t v208 = v7;
  *(void *)((*(uint64_t (**)(void, void))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 0)
            + 8 * v7) = 1;
  if ((*(unsigned char *)(a1 + 216) & 1) == 0)
  {
    float v209 = *v8;
    if (*v8 < 1.0) {
      float v209 = 1.0;
    }
    *unint64_t v8 = v209;
  }
  BOOL v210 = *(_DWORD *)(a2 + 8) == 0;
  *(void *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 1)
            + 8 * v208) = v210;
  if ((*(unsigned char *)(a1 + 216) & 2) == 0)
  {
    float v211 = 0.0;
    if (!*(_DWORD *)(a2 + 8)) {
      float v211 = 1.0;
    }
    if (v8[1] >= v211) {
      float v211 = v8[1];
    }
    v8[1] = v211;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 2)
           + 4 * v208) = a7;
  if ((*(unsigned char *)(a1 + 216) & 4) == 0)
  {
    float v212 = v8[2];
    if (v212 < a7) {
      float v212 = a7;
    }
    v8[2] = v212;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 3)
           + 4 * v208) = (float)v12;
  if ((*(unsigned char *)(a1 + 216) & 8) == 0)
  {
    float v213 = v8[3];
    if (v213 < (float)v12) {
      float v213 = (float)v12;
    }
    void v8[3] = v213;
  }
  *(void *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 4)
            + 8 * v208) = a5;
  if ((*(unsigned char *)(a1 + 216) & 0x10) == 0)
  {
    float v214 = (float)a5;
    if (v8[4] >= (float)a5) {
      float v214 = v8[4];
    }
    uint64_t v8[4] = v214;
  }
  *(void *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 5)
            + 8 * v208) = a6;
  if ((*(unsigned char *)(a1 + 216) & 0x20) == 0)
  {
    float v215 = (float)a6;
    if (v8[5] >= (float)a6) {
      float v215 = v8[5];
    }
    void v8[5] = v215;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 6)
           + 4 * v208) = (float)v13;
  if ((*(unsigned char *)(a1 + 216) & 0x40) == 0)
  {
    float v216 = v8[6];
    if (v216 < (float)v13) {
      float v216 = (float)v13;
    }
    v8[6] = v216;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 7)
           + 4 * v208) = (float)v11;
  if ((*(unsigned char *)(a1 + 216) & 0x80) == 0)
  {
    float v217 = v8[7];
    if (v217 < (float)v11) {
      float v217 = (float)v11;
    }
    v8[7] = v217;
  }
  float v218 = v22;
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 8)
           + 4 * v208) = v218;
  if ((*(unsigned char *)(a1 + 217) & 1) == 0)
  {
    float v219 = v8[8];
    if (v219 < v218) {
      float v219 = v22;
    }
    v8[8] = v219;
  }
  float v220 = v23;
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 9)
           + 4 * v208) = v220;
  if ((*(unsigned char *)(a1 + 217) & 2) == 0)
  {
    float v221 = v8[9];
    if (v221 < v220) {
      float v221 = v23;
    }
    void v8[9] = v221;
  }
  float v222 = v24;
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 10)
           + 4 * v208) = v222;
  if ((*(unsigned char *)(a1 + 217) & 4) == 0)
  {
    float v223 = v8[10];
    if (v223 < v222) {
      float v223 = v24;
    }
    v8[10] = v223;
  }
  float v224 = v25;
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 11)
           + 4 * v208) = v224;
  if ((*(unsigned char *)(a1 + 217) & 8) == 0)
  {
    float v225 = v8[11];
    if (v225 < v224) {
      float v225 = v25;
    }
    v8[11] = v225;
  }
  float v226 = v26;
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 12)
           + 4 * v208) = v226;
  if ((*(unsigned char *)(a1 + 217) & 0x10) == 0)
  {
    float v227 = v8[12];
    if (v227 < v226) {
      float v227 = v26;
    }
    v8[12] = v227;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 13)
           + 4 * v208) = v269;
  if ((*(unsigned char *)(a1 + 217) & 0x20) == 0)
  {
    float v228 = v8[13];
    if (v228 < v269) {
      float v228 = v269;
    }
    v8[13] = v228;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 14)
           + 4 * v208) = v271;
  if ((*(unsigned char *)(a1 + 217) & 0x40) == 0)
  {
    float v229 = v8[14];
    if (v229 < v271) {
      float v229 = v271;
    }
    v8[14] = v229;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 15)
           + 4 * v208) = v21;
  if ((*(unsigned char *)(a1 + 217) & 0x80) == 0)
  {
    float v230 = v8[15];
    if (v230 < v21) {
      float v230 = v21;
    }
    v8[15] = v230;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 16)
           + 4 * v208) = (float)v273;
  if ((*(unsigned char *)(a1 + 218) & 1) == 0)
  {
    float v231 = v8[16];
    if (v231 < (float)v273) {
      float v231 = (float)v273;
    }
    v8[16] = v231;
  }
  *(float *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 17)
           + 4 * v208) = v27;
  if ((*(unsigned char *)(a1 + 218) & 2) == 0)
  {
    float v232 = v8[17];
    if (v232 < v27) {
      float v232 = v27;
    }
    v8[17] = v232;
  }
  *(void *)((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 18)
            + 8 * v208) = v14;
  if ((*(unsigned char *)(a1 + 218) & 4) == 0)
  {
    float v233 = (float)v14;
    if (v8[18] >= (float)v14) {
      float v233 = v8[18];
    }
    v8[18] = v233;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 192) + 16))(*(void *)(a1 + 192), 19);
  *(void *)(result + 8 * v208) = v20;
  if ((*(unsigned char *)(a1 + 218) & 8) == 0)
  {
    float v235 = (float)v20;
    if (v8[19] >= (float)v20) {
      float v235 = v8[19];
    }
    v8[19] = v235;
  }
  return result;
}

_DWORD *sub_1CC3C361C(uint64_t *a1, int a2)
{
  uint64_t v3 = *((unsigned int *)a1 + 4);
  uint64_t v4 = (int *)*a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *((_DWORD *)a1 + 4) = v8;
  uint64_t result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    uint64_t v10 = *((unsigned int *)a1 + 4);
    if (v10)
    {
      uint64_t v11 = v10 << 6;
      do
      {
        *uint64_t result = -1;
        result += 16;
        v11 -= 64;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = v4;
      do
      {
        int v13 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          int v14 = *((_DWORD *)a1 + 4);
          if (v14)
          {
            unsigned int v15 = v14 - 1;
            uint64_t v16 = (v14 - 1) & (37 * v13);
            uint64_t v17 = (int *)(*a1 + (v16 << 6));
            int v18 = *v17;
            if (v13 != *v17)
            {
              unint64_t v19 = 0;
              int v20 = 1;
              while (v18 != -1)
              {
                if (v19) {
                  BOOL v21 = 0;
                }
                else {
                  BOOL v21 = v18 == -2;
                }
                if (v21) {
                  unint64_t v19 = v17;
                }
                int v22 = v16 + v20++;
                uint64_t v16 = v22 & v15;
                uint64_t v17 = (int *)(*a1 + (v16 << 6));
                int v18 = *v17;
                if (v13 == *v17) {
                  goto LABEL_23;
                }
              }
              if (v19) {
                uint64_t v17 = v19;
              }
            }
          }
          else
          {
            uint64_t v17 = 0;
          }
LABEL_23:
          *uint64_t v17 = v13;
          long long v23 = *(_OWORD *)(v12 + 2);
          long long v24 = *(_OWORD *)(v12 + 6);
          long long v25 = *(_OWORD *)(v12 + 10);
          *((void *)v17 + 7) = *((void *)v12 + 7);
          *(_OWORD *)(v17 + 10) = v25;
          *(_OWORD *)(v17 + 6) = v24;
          *(_OWORD *)(v17 + 2) = v23;
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 16;
      }
      while (v12 != &v4[16 * v3]);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  a1[1] = 0;
  uint64_t v26 = *((unsigned int *)a1 + 4);
  if (v26)
  {
    uint64_t v27 = v26 << 6;
    do
    {
      *uint64_t result = -1;
      result += 16;
      v27 -= 64;
    }
    while (v27);
  }
  return result;
}

uint64_t sub_1CC3C37CC()
{
  v0 = operator new(0x10uLL);
  qword_1EBCD0F80 = (uint64_t)v0;
  _OWORD *v0 = xmmword_1CFAC7320;
  qword_1EBCD0F88 = (uint64_t)(v0 + 1);
  unk_1EBCD0F90 = v0 + 1;
  __cxa_atexit((void (*)(void *))sub_1CC3C0894, &qword_1EBCD0F80, &dword_1CB82C000);
  strcpy((char *)&qword_1EBCD0F98, "mask");
  byte_1EBCD0FAF = 4;
  byte_1EBCD0FC7 = 7;
  strcpy((char *)&dword_1EBCD0FB0, "is_free");
  strcpy(&byte_1EBCD0FDF, "\tnr_broken_hints");
  strcpy((char *)&qword_1EBCD0FC8, "nr_urgent");
  byte_1EBCD0FF7 = 15;
  byte_1EBCD100F = 7;
  strcpy((char *)&dword_1EBCD0FF8, "is_hint");
  byte_1EBCD1027 = 8;
  strcpy((char *)&qword_1EBCD1010, "is_local");
  byte_1EBCD103F = 19;
  strcpy((char *)&xmmword_1EBCD1028, "nr_rematerializable");
  byte_1EBCD1057 = 16;
  strcpy(byte_1EBCD1040, "nr_defs_and_uses");
  byte_1EBCD106F = 20;
  strcpy((char *)&xmmword_1EBCD1058, "weighed_reads_by_max");
  byte_1EBCD1087 = 21;
  strcpy(byte_1EBCD1070, "weighed_writes_by_max");
  qword_1EBCD1088 = (uint64_t)operator new(0x20uLL);
  *(_OWORD *)algn_1EBCD1090 = xmmword_1CD96DBE0;
  strcpy((char *)qword_1EBCD1088, "weighed_read_writes_by_max");
  strcpy((char *)&xmmword_1EBCD10A0, "weighed_indvars_by_max");
  HIBYTE(word_1EBCD10B6) = 22;
  byte_1EBCD10CF = 19;
  strcpy((char *)&xmmword_1EBCD10B8, "hint_weights_by_max");
  byte_1EBCD10E7 = 20;
  strcpy((char *)&xmmword_1EBCD10D0, "start_bb_freq_by_max");
  byte_1EBCD10FF = 18;
  strcpy((char *)&xmmword_1EBCD10E8, "end_bb_freq_by_max");
  strcpy((char *)&xmmword_1EBCD1100, "hottest_bb_freq_by_max");
  HIBYTE(word_1EBCD1116) = 22;
  byte_1EBCD112F = 14;
  strcpy((char *)&qword_1EBCD1118, "liverange_size");
  byte_1EBCD1147 = 15;
  strcpy((char *)&qword_1EBCD1130, "use_def_density");
  byte_1EBCD115F = 9;
  strcpy((char *)&qword_1EBCD1148, "max_stage");
  byte_1EBCD1177 = 9;
  strcpy((char *)&qword_1EBCD1160, "min_stage");
  byte_1EBCD118F = 8;
  strcpy((char *)&qword_1EBCD1178, "progress");

  return __cxa_atexit((void (*)(void *))sub_1CD5566E4, &qword_1EBCD0F98, &dword_1CB82C000);
}

void llvm::ModuloSchedule::print(llvm::ModuloSchedule *this, llvm::raw_ostream *a2)
{
  uint64_t v2 = (llvm::MachineInstr **)*((void *)this + 1);
  uint64_t v3 = (llvm::MachineInstr **)*((void *)this + 2);
  if (v2 != v3)
  {
    unint64_t v6 = (uint64_t *)((char *)this + 56);
    int v7 = (uint64_t *)((char *)this + 32);
    do
    {
      unsigned int v8 = *v2;
      uint64_t v9 = (_DWORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v9 > 6uLL)
      {
        *(_DWORD *)((char *)v9 + 3) = 543516513;
        *uint64_t v9 = 1635021659;
        *((void *)a2 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(a2, "[stage ", 7uLL);
      }
      int v20 = v8;
      uint64_t v21 = 0;
      int v10 = sub_1CD3C8538(v6, &v20, &v21);
      unint64_t v11 = -1;
      if (!v10
        || v21 == *((void *)this + 7) + 16 * *((unsigned int *)this + 18)
        || (unint64_t v11 = *(int *)(v21 + 8), (v11 & 0x80000000) != 0))
      {
        unint64_t v11 = -(uint64_t)v11;
        uint64_t v12 = a2;
        int v13 = 1;
      }
      else
      {
        uint64_t v12 = a2;
        int v13 = 0;
      }
      sub_1CD098D14(v12, v11, 0, 0, v13);
      int v14 = (_WORD *)*((void *)a2 + 4);
      if (*((void *)a2 + 3) - (void)v14 > 1uLL)
      {
        _WORD *v14 = 16416;
        *((void *)a2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(a2, " @", 2uLL);
      }
      int v20 = v8;
      uint64_t v21 = 0;
      int v15 = sub_1CD3C8538(v7, &v20, &v21);
      unint64_t v16 = -1;
      if (!v15
        || v21 == *((void *)this + 4) + 16 * *((unsigned int *)this + 12)
        || (unint64_t v16 = *(int *)(v21 + 8), (v16 & 0x80000000) != 0))
      {
        unint64_t v16 = -(uint64_t)v16;
        uint64_t v17 = a2;
        int v18 = 1;
      }
      else
      {
        uint64_t v17 = a2;
        int v18 = 0;
      }
      sub_1CD098D14(v17, v16, 0, 0, v18);
      uint64_t v19 = *((void *)a2 + 4);
      if ((unint64_t)(*((void *)a2 + 3) - v19) > 2)
      {
        *(unsigned char *)(v19 + 2) = 32;
        *(_WORD *)uint64_t v19 = 23907;
        *((void *)a2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a2, "c] ", 3uLL);
      }
      llvm::MachineInstr::print(v8, a2, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t llvm::ModuloScheduleExpander::generateExistingPhis(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, unsigned int a8, unsigned int a9, char a10)
{
  uint64_t v10 = a9;
  if (a8 == a9) {
    int v11 = -1;
  }
  else {
    int v11 = a8 - a9;
  }
  uint64_t v12 = *(void *)(result + 48);
  uint64_t v13 = *(void *)(v12 + 56);
  if (v13 != v12 + 48)
  {
    int v14 = a8;
    uint64_t v15 = (uint64_t)a7;
    unint64_t v16 = (llvm::ModuloScheduleExpander *)result;
    unsigned int v271 = a9 - (a8 != a9);
    unint64_t v17 = v11 + a8;
    uint64_t v18 = *(void *)(v12 + 56);
    while (!**(_WORD **)(v18 + 16) || **(_WORD **)(v18 + 16) == 69)
    {
      uint64_t v18 = *(void *)(v18 + 8);
      if (v18 == v12 + 48)
      {
        uint64_t v18 = v12 + 48;
        break;
      }
    }
    if (v13 != v18)
    {
      uint64_t v19 = (void *)(a6 + 24 * a8);
      unsigned int v241 = v19 + 2;
      uint64_t v246 = (uint64_t **)(result + 80);
      uint64_t v239 = a6 + 24 * v271;
      int v20 = (void *)(a6 + 24 * a9);
      unint64_t v244 = v20 + 2;
      unsigned int v240 = v17 + 2;
      unsigned int v256 = v17 + 1;
      uint64_t v262 = a2 + 48;
      int v277 = (llvm::ModuloScheduleExpander *)result;
      unint64_t v270 = v17;
      int v242 = v19;
      uint64_t v243 = v18;
      int v245 = v20;
      do
      {
        unsigned int v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = *(void *)(v13 + 32);
        uint64_t v24 = *(unsigned int *)(v23 + 4);
        uint64_t v25 = *((void *)v16 + 6);
        unsigned int v281 = 0;
        int v26 = *(_DWORD *)(v13 + 40) - 1;
        if (*(_DWORD *)(v13 + 40) != 1)
        {
          int v27 = 0;
          unsigned int v21 = 0;
          unsigned int v22 = 0;
          uint64_t v28 = (unsigned int *)(v23 + 36);
          do
          {
            unsigned int v30 = *v28;
            v28 += 16;
            unsigned int v29 = v30;
            if (*(void *)(v23 + 32 * (v27 + 2) + 16) == v25)
            {
              unsigned int v281 = v29;
              unsigned int v21 = v29;
            }
            else
            {
              unsigned int v22 = v29;
            }
            v27 += 2;
          }
          while (v26 != v27);
        }
        unsigned int v280 = 0;
        if (*v241)
        {
          int v31 = *v241 - 1;
          unsigned int v32 = v31 & (37 * v21);
          int v33 = *(_DWORD *)(*v19 + 8 * v32);
          if (v21 == v33)
          {
LABEL_21:
            unsigned int v278 = sub_1CB8387D8((uint64_t)v19, &v281)[1];
          }
          else
          {
            int v233 = 1;
            unsigned int v278 = v21;
            while (v33 != -1)
            {
              unsigned int v234 = v32 + v233++;
              unsigned int v32 = v234 & v31;
              int v33 = *(_DWORD *)(*v19 + 8 * (v234 & v31));
              if (v21 == v33) {
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          unsigned int v278 = v21;
        }
        uint64_t v34 = *(void *)v16;
        uint64_t v35 = (uint64_t *)(*(void *)v16 + 56);
        uint64_t v282 = (unsigned __int8 *)v13;
        unint64_t v283 = 0;
        if (sub_1CD3C8538(v35, &v282, &v283)) {
          BOOL v36 = v283 == (unsigned __int8 **)(*(void *)(v34 + 56) + 16 * *(unsigned int *)(v34 + 72));
        }
        else {
          BOOL v36 = 1;
        }
        if (v36) {
          int v37 = -1;
        }
        else {
          int v37 = *((_DWORD *)v283 + 2);
        }
        int v269 = v37;
        uint64_t v38 = *(void *)v16;
        uint64_t v39 = *((void *)v16 + 3);
        if ((v281 & 0x80000000) != 0) {
          uint64_t v40 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v281 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v40 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v281);
        }
        uint64_t v41 = *v40;
        uint64_t v266 = v24;
        if (v41)
        {
          if (*(unsigned char *)(v41 + 3)) {
            goto LABEL_32;
          }
          uint64_t v41 = *(void *)(v41 + 24);
          if (v41)
          {
            int v14 = a8;
            uint64_t v15 = (uint64_t)a7;
            unint64_t v16 = v277;
            LODWORD(v17) = v270;
            if (*(unsigned char *)(v41 + 3))
            {
LABEL_32:
              uint64_t v41 = *(void *)(v41 + 8);
              goto LABEL_33;
            }
            uint64_t v41 = 0;
          }
          else
          {
            int v14 = a8;
            uint64_t v15 = (uint64_t)a7;
            unint64_t v16 = v277;
            LODWORD(v17) = v270;
          }
        }
LABEL_33:
        uint64_t v282 = (unsigned __int8 *)v41;
        unint64_t v283 = 0;
        int v259 = -1;
        if (sub_1CD3C8538((uint64_t *)(v38 + 56), &v282, &v283))
        {
          uint64_t v42 = *(void *)(v38 + 56) + 16 * *(unsigned int *)(v38 + 72);
          uint64_t v43 = a2;
          if (v283 != (unsigned __int8 **)v42) {
            int v259 = *((_DWORD *)v283 + 2);
          }
        }
        else
        {
          uint64_t v43 = a2;
        }
        LODWORD(v283) = v24;
        uint64_t result = (uint64_t)sub_1CD55B424(v246, v24, &v283);
        int v44 = *(_DWORD *)(result + 32);
        if ((*(unsigned char *)(result + 36) & 1) != 0 && v44 == 0 && *(_DWORD *)(*(void *)v16 + 80) <= (int)v10) {
          int v44 = 1;
        }
        unsigned int v251 = v44;
        if (!v44)
        {
          int v47 = sub_1CB8387D8(v239, &v281);
          uint64_t result = llvm::ModuloScheduleExpander::rewriteScheduledInstr(v16, v43, v15, v10, 0, (llvm::MachineInstr *)v13, v24, v22, v47[1]);
          if (*v244)
          {
            int v48 = *v244 - 1;
            unsigned int v49 = (37 * v281) & v48;
            int v50 = *(_DWORD *)(*v20 + 8 * v49);
            if (v281 == v50)
            {
LABEL_49:
              int v51 = sub_1CB8387D8((uint64_t)v20, &v281)[1];
              LODWORD(v283) = v24;
              uint64_t result = (uint64_t)sub_1CB9A74A0((uint64_t)v20, &v283);
              *(_DWORD *)(result + 4) = v51;
            }
            else
            {
              int v237 = 1;
              while (v50 != -1)
              {
                unsigned int v238 = v49 + v237++;
                unsigned int v49 = v238 & v48;
                int v50 = *(_DWORD *)(*v20 + 8 * v49);
                if (v281 == v50) {
                  goto LABEL_49;
                }
              }
            }
          }
        }
        unint64_t v273 = (llvm::MachineInstr *)v13;
        unsigned int v52 = v240;
        int v53 = v240 - v259;
        if ((int)(v240 - v259) <= 1) {
          int v53 = 1;
        }
        if ((int)v17 <= v259 && v14 != v10) {
          unsigned int v52 = v53;
        }
        unsigned int v247 = v52;
        if (v52 >= v251) {
          uint64_t v55 = v251;
        }
        else {
          uint64_t v55 = v52;
        }
        BOOL v56 = v259 != -1;
        int v57 = v269;
        if (v259 == -1) {
          int v58 = v269;
        }
        else {
          int v58 = v259;
        }
        BOOL v61 = v269 >= v259 && v58 == 0 && v55 == 1;
        if (v14 == v10) {
          BOOL v61 = 0;
        }
        else {
          BOOL v56 = 0;
        }
        uint64_t v268 = v55;
        if (v55)
        {
          unint64_t v62 = 0;
          int v63 = 0;
          BOOL v64 = v269 > v259;
          if (v56 && v64) {
            int v65 = v269 - v259;
          }
          else {
            int v65 = v61;
          }
          int v255 = v17 - v65;
          if (v259 != -1 && v64) {
            int v66 = v269 - v259;
          }
          else {
            int v66 = 0;
          }
          uint64_t v260 = (v55 - 1);
          int v258 = v65 + v58;
          uint64_t v248 = (void *)(a6 + 24 * (v271 - v66));
          unint64_t v252 = v248 + 2;
          unsigned int v261 = 37 * v24;
          BOOL v68 = v14 == v10 && v65 > 0;
          BOOL v257 = v68;
          unsigned int v253 = v271 - v66;
          int v254 = v10 - v65;
          uint64_t v265 = v24 & 0x7FFFFFFF;
          while (1)
          {
            if (v62 > v270 || v57 >= v14 || v270 < v258 + (int)v62)
            {
              unsigned int v280 = v22;
              unsigned int v69 = v22;
              goto LABEL_93;
            }
            uint64_t v80 = a6 + 24 * (v63 + v255);
            int v81 = *(_DWORD *)(v80 + 16);
            unsigned int v69 = v281;
            if (v81)
            {
              int v82 = v81 - 1;
              unsigned int v83 = (37 * v281) & v82;
              int v84 = *(_DWORD *)(*(void *)v80 + 8 * v83);
              if (v281 == v84)
              {
LABEL_111:
                unsigned int v69 = sub_1CB8387D8(v80, &v281)[1];
                unsigned int v280 = v69;
                goto LABEL_93;
              }
              int v90 = 1;
              while (v84 != -1)
              {
                unsigned int v91 = v83 + v90++;
                unsigned int v83 = v91 & v82;
                int v84 = *(_DWORD *)(*(void *)v80 + 8 * v83);
                if (v281 == v84) {
                  goto LABEL_111;
                }
              }
            }
            unsigned int v280 = v281;
            uint64_t v92 = *((void *)v16 + 3);
            if ((v281 & 0x80000000) != 0) {
              float v93 = (uint64_t *)(*(void *)(v92 + 24) + 16 * (v281 & 0x7FFFFFFF) + 8);
            }
            else {
              float v93 = (uint64_t *)(*(void *)(v92 + 272) + 8 * v281);
            }
            uint64_t v94 = *v93;
            if (v94)
            {
              if ((*(unsigned char *)(v94 + 3) & 1) != 0
                || (uint64_t v94 = *(void *)(v94 + 24)) != 0 && (*(unsigned char *)(v94 + 3) & 1) != 0)
              {
                uint64_t v95 = *(void *)(v94 + 8);
                if (v95)
                {
                  int v249 = v63;
                  int v250 = v63 + v255;
                  int v96 = 1;
                  while (1)
                  {
                    int v97 = **(unsigned __int16 **)(v95 + 16);
                    BOOL v98 = v97 == 69 || v97 == 0;
                    if (!v98 || *(void *)(v95 + 24) != *((void *)v16 + 6))
                    {
LABEL_180:
                      unsigned int v69 = v280;
                      break;
                    }
                    uint64_t v99 = *(void *)v16;
                    uint64_t v100 = (uint64_t *)(*(void *)v16 + 56);
                    uint64_t v282 = (unsigned __int8 *)v95;
                    unint64_t v283 = 0;
                    if (sub_1CD3C8538(v100, &v282, &v283)) {
                      BOOL v101 = v283 == (unsigned __int8 **)(*(void *)(v99 + 56) + 16 * *(unsigned int *)(v99 + 72));
                    }
                    else {
                      BOOL v101 = 1;
                    }
                    if (v101) {
                      int v102 = -1;
                    }
                    else {
                      int v102 = *((_DWORD *)v283 + 2);
                    }
                    uint64_t v103 = *((void *)v16 + 6);
                    int v104 = *(_DWORD *)(v95 + 40);
                    if (v250 >= v102 + v96)
                    {
                      if (v104 == 1)
                      {
LABEL_157:
                        uint64_t v107 = 0;
                        unsigned int v280 = 0;
                        uint64_t v108 = *((void *)v16 + 3);
                        goto LABEL_158;
                      }
                      uint64_t v105 = *(void *)(v95 + 32);
                      unsigned int v106 = 1;
                      while (*(void *)(v105 + 32 * (v106 + 1) + 16) != v103)
                      {
                        v106 += 2;
                        if (v104 == v106) {
                          goto LABEL_157;
                        }
                      }
                    }
                    else
                    {
                      if (v104 == 1) {
                        goto LABEL_157;
                      }
                      uint64_t v105 = *(void *)(v95 + 32);
                      unsigned int v106 = 1;
                      while (*(void *)(v105 + 32 * (v106 + 1) + 16) == v103)
                      {
                        v106 += 2;
                        if (v104 == v106) {
                          goto LABEL_157;
                        }
                      }
                    }
                    uint64_t v107 = *(unsigned int *)(v105 + 32 * v106 + 4);
                    unsigned int v280 = v107;
                    uint64_t v108 = *((void *)v16 + 3);
                    if ((v107 & 0x80000000) != 0)
                    {
                      uint64_t v109 = (uint64_t *)(*(void *)(v108 + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
                      goto LABEL_161;
                    }
LABEL_158:
                    uint64_t v109 = (uint64_t *)(*(void *)(v108 + 272) + 8 * v107);
LABEL_161:
                    uint64_t v110 = *v109;
                    if (v110
                      && ((*(unsigned char *)(v110 + 3) & 1) != 0
                       || (uint64_t v110 = *(void *)(v110 + 24)) != 0 && (*(unsigned char *)(v110 + 3) & 1) != 0))
                    {
                      uint64_t v95 = *(void *)(v110 + 8);
                    }
                    else
                    {
                      uint64_t v95 = 0;
                    }
                    uint64_t v111 = *(void *)v16;
                    uint64_t v112 = (uint64_t *)(*(void *)v16 + 56);
                    uint64_t v282 = (unsigned __int8 *)v95;
                    unint64_t v283 = 0;
                    if (sub_1CD3C8538(v112, &v282, &v283))
                    {
                      if (v283 != (unsigned __int8 **)(*(void *)(v111 + 56) + 16 * *(unsigned int *)(v111 + 72)))
                      {
                        int v113 = *((_DWORD *)v283 + 2);
                        if (v113 != -1)
                        {
                          unsigned int v114 = v113 - v102 + v270;
                          BOOL v115 = v114 >= v96 + (int)v62;
                          unsigned int v116 = v114 - (v96 + v62);
                          if (v115)
                          {
                            uint64_t v117 = a6 + 24 * v116;
                            int v118 = *(_DWORD *)(v117 + 16);
                            if (v118)
                            {
                              int v119 = v118 - 1;
                              unsigned int v120 = (37 * v280) & v119;
                              int v121 = *(_DWORD *)(*(void *)v117 + 8 * v120);
                              if (v280 == v121)
                              {
LABEL_181:
                                unsigned int v69 = sub_1CB8387D8(v117, &v280)[1];
                                unsigned int v280 = v69;
                                int v63 = v249;
                                break;
                              }
                              int v122 = 1;
                              while (v121 != -1)
                              {
                                unsigned int v123 = v120 + v122++;
                                unsigned int v120 = v123 & v119;
                                int v121 = *(_DWORD *)(*(void *)v117 + 8 * v120);
                                if (v280 == v121) {
                                  goto LABEL_181;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    ++v96;
                    int v63 = v249;
                    if (!v95) {
                      goto LABEL_180;
                    }
                  }
                }
              }
            }
LABEL_93:
            uint64_t v70 = *((void *)v16 + 3);
            if ((v69 & 0x80000000) != 0) {
              unsigned int v71 = (uint64_t *)(*(void *)(v70 + 24) + 16 * (v69 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v71 = (uint64_t *)(*(void *)(v70 + 272) + 8 * v69);
            }
            uint64_t v72 = *v71;
            int v14 = a8;
            if (v72)
            {
              if ((*(unsigned char *)(v72 + 3) & 1) != 0
                || (uint64_t v72 = *(void *)(v72 + 24)) != 0 && (*(unsigned char *)(v72 + 3) & 1) != 0)
              {
                uint64_t v73 = *(void *)(v72 + 8);
                if (v73)
                {
                  int v74 = **(unsigned __int16 **)(v73 + 16);
                  BOOL v75 = v74 == 69 || v74 == 0;
                  if (v75 && *(void *)(v73 + 24) == a5)
                  {
                    int v76 = *(_DWORD *)(v73 + 40);
                    if (v76 == 1)
                    {
LABEL_108:
                      unsigned int v79 = 0;
                    }
                    else
                    {
                      uint64_t v77 = *(void *)(v73 + 32);
                      unsigned int v78 = 1;
                      while (*(void *)(v77 + 32 * (v78 + 1) + 16) == a5)
                      {
                        v78 += 2;
                        if (v76 == v78) {
                          goto LABEL_108;
                        }
                      }
                      unsigned int v79 = *(_DWORD *)(v77 + 32 * v78 + 4);
                    }
                    unsigned int v280 = v79;
                  }
                }
              }
            }
            unsigned int v85 = (uint64_t *)((v281 & 0x80000000) != 0
                            ? *(void *)(v70 + 24) + 16 * (v281 & 0x7FFFFFFF) + 8
                            : *(void *)(v70 + 272) + 8 * v281);
            uint64_t v86 = *v85;
            if (!v86) {
              break;
            }
            if ((*(unsigned char *)(v86 + 3) & 1) == 0)
            {
              uint64_t v86 = *(void *)(v86 + 24);
              if (!v86 || (*(unsigned char *)(v86 + 3) & 1) == 0) {
                break;
              }
            }
            uint64_t v87 = *(unsigned __int16 ***)(v86 + 8);
            if (!v87) {
              goto LABEL_188;
            }
            if (*v87[2]) {
              BOOL v88 = *v87[2] == 69;
            }
            else {
              BOOL v88 = 1;
            }
            int v89 = v88;
LABEL_189:
            if (a8 == v10) {
              goto LABEL_223;
            }
            if (v271 == a8 && !v62)
            {
              if (!(v269 | v259) || !*v252) {
                goto LABEL_207;
              }
              uint64_t v124 = (uint64_t)v248;
              int v125 = *v252 - 1;
              unsigned int v126 = v125 & (37 * v281);
              int v127 = *(_DWORD *)(*v248 + 8 * v126);
              if (v281 == v127) {
                goto LABEL_210;
              }
              int v128 = 1;
              while (v127 != -1)
              {
                unsigned int v129 = v126 + v128++;
                unsigned int v126 = v129 & v125;
                int v127 = *(_DWORD *)(*v248 + 8 * v126);
                uint64_t v124 = (uint64_t)v248;
                if (v281 == v127) {
                  goto LABEL_210;
                }
              }
            }
            if (v271 == a8)
            {
              if (v62)
              {
                uint64_t v130 = a6 + 24 * (v271 + 1 + v63);
                int v131 = *(_DWORD *)(v130 + 16);
                if (v131)
                {
                  int v132 = v131 - 1;
                  unsigned int v133 = v132 & v261;
                  int v134 = *(_DWORD *)(*(void *)v130 + 8 * (v132 & v261));
                  if (v24 == v134) {
                    goto LABEL_221;
                  }
                  int v135 = 1;
                  while (v134 != -1)
                  {
                    unsigned int v136 = v133 + v135++;
                    unsigned int v133 = v136 & v132;
                    int v134 = *(_DWORD *)(*(void *)v130 + 8 * v133);
                    if (v24 == v134) {
                      goto LABEL_221;
                    }
                  }
                }
              }
            }
LABEL_207:
            if (v259 > v256)
            {
              uint64_t v124 = a6 + 24 * (v63 + v253);
              int v137 = *(_DWORD *)(v124 + 16);
              if (v137)
              {
                int v138 = v137 - 1;
                unsigned int v139 = v138 & (37 * v281);
                int v140 = *(_DWORD *)(*(void *)v124 + 8 * v139);
                if (v281 == v140)
                {
LABEL_210:
                  uint64_t v141 = sub_1CB8387D8(v124, &v281);
LABEL_222:
                  unsigned int v278 = v141[1];
                  goto LABEL_223;
                }
                int v142 = 1;
                while (v140 != -1)
                {
                  unsigned int v143 = v139 + v142++;
                  unsigned int v139 = v143 & v138;
                  int v140 = *(_DWORD *)(*(void *)v124 + 8 * v139);
                  if (v281 == v140) {
                    goto LABEL_210;
                  }
                }
              }
            }
            uint64_t v130 = a6 + 24 * (v271 - v62);
            int v144 = *(_DWORD *)(v130 + 16);
            if (!v144) {
              goto LABEL_223;
            }
            unsigned int v145 = v144 - 1;
            int v146 = v145 & v261;
            int v147 = *(_DWORD *)(*(void *)v130 + 8 * (v145 & v261));
            if (v24 == v147)
            {
LABEL_217:
              char v148 = v89 ^ 1;
              if (v271 != a8) {
                char v148 = 1;
              }
              if ((v148 & 1) != 0 || v259 == v57)
              {
LABEL_221:
                LODWORD(v283) = v24;
                uint64_t v141 = sub_1CB9A74A0(v130, &v283);
                goto LABEL_222;
              }
            }
            else
            {
              int v213 = 1;
              while (v147 != -1)
              {
                int v214 = v146 + v213++;
                int v146 = v214 & v145;
                int v147 = *(_DWORD *)(*(void *)v130 + 8 * (v214 & v145));
                if (v24 == v147) {
                  goto LABEL_217;
                }
              }
            }
LABEL_223:
            if (!v89) {
              goto LABEL_229;
            }
            if ((int)v270 - (int)v62 < v57) {
              goto LABEL_225;
            }
            LODWORD(v283) = v281;
            unint64_t v192 = sub_1CD55B424(v246, v281, &v283);
            int v193 = (*((unsigned char *)v192 + 36) & 1) + v259 - v269 + *((_DWORD *)v192 + 8) - 1;
            if (v193 <= (int)v62 || !*v244) {
              goto LABEL_225;
            }
            int v194 = *v244 - 1;
            unsigned int v195 = (37 * v281) & v194;
            int v196 = *(_DWORD *)(*v245 + 8 * v195);
            if (v281 != v196)
            {
              int v216 = 1;
              while (v196 != -1)
              {
                unsigned int v217 = v195 + v216++;
                unsigned int v195 = v217 & v194;
                int v196 = *(_DWORD *)(*v245 + 8 * v195);
                if (v281 == v196) {
                  goto LABEL_289;
                }
              }
              goto LABEL_225;
            }
LABEL_289:
            if (llvm::ModuloScheduleExpander::isLoopCarried(v16, (llvm::MachineInstr *)v87)) {
              int v197 = v193;
            }
            else {
              int v197 = 0;
            }
            uint64_t v198 = a6 + 24 * (v63 + v10 - v197);
            int v199 = *(_DWORD *)(v198 + 16);
            if (!v199) {
              goto LABEL_225;
            }
            int v200 = v199 - 1;
            unsigned int v201 = (37 * v281) & v200;
            int v202 = *(_DWORD *)(*(void *)v198 + 8 * v201);
            if (v281 != v202)
            {
              int v218 = 1;
              while (v202 != -1)
              {
                unsigned int v219 = v201 + v218++;
                unsigned int v201 = v219 & v200;
                int v202 = *(_DWORD *)(*(void *)v198 + 8 * v201);
                if (v281 == v202) {
                  goto LABEL_294;
                }
              }
LABEL_225:
              if (v257)
              {
                uint64_t v149 = a6 + 24 * (v254 + v63);
                int v150 = *(_DWORD *)(v149 + 16);
                if (v150)
                {
                  int v151 = v150 - 1;
                  unsigned int v152 = (37 * v281) & v151;
                  int v153 = *(_DWORD *)(*(void *)v149 + 8 * v152);
                  if (v281 == v153)
                  {
LABEL_228:
                    unsigned int v278 = sub_1CB8387D8(v149, &v281)[1];
                  }
                  else
                  {
                    int v211 = 1;
                    while (v153 != -1)
                    {
                      unsigned int v212 = v152 + v211++;
                      unsigned int v152 = v212 & v151;
                      int v153 = *(_DWORD *)(*(void *)v149 + 8 * (v212 & v151));
                      if (v281 == v153) {
                        goto LABEL_228;
                      }
                    }
                  }
                }
              }
LABEL_229:
              uint64_t v154 = v10;
              uint64_t v155 = *((void *)v277 + 3);
              unint64_t v156 = *(void *)(*(void *)(v155 + 24) + 16 * v265) & 0xFFFFFFFFFFFFFFF8;
              unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v155, "", 0);
              *(void *)(*(void *)(v155 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v156;
              uint64_t v158 = *(void *)(v155 + 8);
              if (v158) {
                (*(void (**)(uint64_t))(*(void *)v158 + 24))(v158);
              }
              uint64_t v159 = a2;
              uint64_t v160 = v262;
              if (*(void *)(a2 + 56) != v262)
              {
                uint64_t v160 = *(void *)(a2 + 56);
                while (!**(_WORD **)(v160 + 16) || **(_WORD **)(v160 + 16) == 69)
                {
                  uint64_t v160 = *(void *)(v160 + 8);
                  if (v160 == v262)
                  {
                    uint64_t v160 = v262;
                    break;
                  }
                }
              }
              unint64_t v279 = 0;
              uint64_t v161 = *(void *)(*((void *)v277 + 4) + 8);
              int v162 = *(llvm::MachineFunction **)(a2 + 32);
              uint64_t v282 = 0;
              uint64_t v163 = llvm::MachineFunction::CreateMachineInstr(v162, v161, &v282, 0);
              if (v282)
              {
                int v222 = *v282;
                if ((v222 - 4) > 0x1E)
                {
                  if ((v222 - 3) >= 0xFFFFFFFE) {
                    float v225 = v282;
                  }
                  else {
                    float v225 = 0;
                  }
                  if ((v222 - 3) < 0xFFFFFFFE)
                  {
                    uint64_t v159 = a2;
                    if (v222 == 3) {
                      *((void *)v282 + 1) = 0;
                    }
                    goto LABEL_238;
                  }
                  unint64_t v224 = (unint64_t)(v225 + 8);
                }
                else
                {
                  uint64_t v159 = a2;
                  if ((v282[1] & 0x7F) != 2 && !*((_DWORD *)v282 + 3)) {
                    goto LABEL_238;
                  }
                  uint64_t v223 = *((void *)v282 + 2);
                  if ((v223 & 4) == 0) {
                    goto LABEL_238;
                  }
                  unint64_t v224 = v223 & 0xFFFFFFFFFFFFFFF8;
                  if (!v224) {
                    goto LABEL_238;
                  }
                }
                unint64_t v283 = &v282;
                sub_1CC5FA668(v224 + 16, &v283);
                uint64_t v159 = a2;
              }
LABEL_238:
              uint64_t v164 = *(void *)(v159 + 40);
              *((void *)v163 + 3) = v164;
              uint64_t v165 = *(void *)(v164 + 32);
              uint64_t v166 = *((unsigned int *)v163 + 10);
              if (v166)
              {
                uint64_t v185 = *((void *)v163 + 4);
                uint64_t v186 = *(void *)(v165 + 40);
                uint64_t v187 = 32 * v166;
                do
                {
                  if (!*(unsigned char *)v185)
                  {
                    uint64_t v188 = *(unsigned int *)(v185 + 4);
                    if ((int)v188 >= 0) {
                      uint64_t v189 = (uint64_t *)(*(void *)(v186 + 272) + 8 * v188);
                    }
                    else {
                      uint64_t v189 = (uint64_t *)(*(void *)(v186 + 24) + 16 * (v188 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v190 = *v189;
                    if (*v189)
                    {
                      uint64_t v191 = *(void *)(v190 + 16);
                      *(void *)(v190 + 16) = v185;
                      *(void *)(v185 + 16) = v191;
                      if (*(unsigned char *)(v185 + 3))
                      {
                        *(void *)(v185 + 24) = v190;
                      }
                      else
                      {
                        *(void *)(v185 + 24) = 0;
                        uint64_t v189 = (uint64_t *)(v191 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v185 + 16) = v185;
                      *(void *)(v185 + 24) = 0;
                    }
                    uint64_t *v189 = v185;
                  }
                  v185 += 32;
                  v187 -= 32;
                }
                while (v187);
              }
              uint64_t v167 = *(void *)(v165 + 728);
              if (v167) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v167 + 24))(v167, v163);
              }
              unint64_t v168 = *(void *)v160 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v163 = v168 | *(void *)v163 & 7;
              *((void *)v163 + 1) = v160;
              *(void *)(v168 + 8) = v163;
              *(void *)uint64_t v160 = *(void *)v160 & 7 | (unint64_t)v163;
              uint64_t v284 = 0;
              uint64_t v285 = 0;
              uint64_t v286 = 0;
              LODWORD(v283) = 0x1000000;
              HIDWORD(v283) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand(v163, v162, (const llvm::MachineOperand *)&v283);
              int v14 = a8;
              if (v279)
              {
                int v169 = *v279;
                if ((v169 - 4) > 0x1E)
                {
                  if ((v169 - 3) >= 0xFFFFFFFE) {
                    int v183 = v279;
                  }
                  else {
                    int v183 = 0;
                  }
                  if ((v169 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v184 = (unint64_t)(v183 + 8);
                    goto LABEL_270;
                  }
                  if (v169 == 3) {
                    *((void *)v279 + 1) = 0;
                  }
                }
                else if ((v279[1] & 0x7F) == 2 || *((_DWORD *)v279 + 3))
                {
                  uint64_t v215 = *((void *)v279 + 2);
                  if ((v215 & 4) != 0)
                  {
                    unint64_t v184 = v215 & 0xFFFFFFFFFFFFFFF8;
                    if (v184)
                    {
LABEL_270:
                      unint64_t v283 = &v279;
                      sub_1CC5FA668(v184 + 16, &v283);
                    }
                  }
                }
              }
              uint64_t v284 = 0;
              LODWORD(v283) = 0;
              HIDWORD(v283) = v280;
              uint64_t v285 = 0;
              uint64_t v286 = 0;
              llvm::MachineInstr::addOperand(v163, v162, (const llvm::MachineOperand *)&v283);
              uint64_t v284 = 0;
              uint64_t v285 = a3;
              LODWORD(v283) = 4;
              llvm::MachineInstr::addOperand(v163, v162, (const llvm::MachineOperand *)&v283);
              uint64_t v284 = 0;
              LODWORD(v283) = 0;
              HIDWORD(v283) = v278;
              uint64_t v285 = 0;
              uint64_t v286 = 0;
              llvm::MachineInstr::addOperand(v163, v162, (const llvm::MachineOperand *)&v283);
              uint64_t v284 = 0;
              uint64_t v285 = a4;
              LODWORD(v283) = 4;
              llvm::MachineInstr::addOperand(v163, v162, (const llvm::MachineOperand *)&v283);
              if (!v62)
              {
                unint64_t v283 = (unsigned __int8 **)v163;
                sub_1CD4F8350(a7, &v283)[1] = v273;
              }
              uint64_t v10 = v154;
              uint64_t v24 = v266;
              if (a8 == v154)
              {
                uint64_t v170 = a6 + 24 * (v271 - v62);
                int v171 = *(_DWORD *)(v170 + 16);
                uint64_t v15 = (uint64_t)a7;
                unint64_t v16 = v277;
                if (v171)
                {
                  int v172 = v171 - 1;
                  unsigned int v173 = (37 * v281) & v172;
                  int v174 = *(_DWORD *)(*(void *)v170 + 8 * v173);
                  int v57 = v269;
                  if (v281 == v174)
                  {
LABEL_250:
                    unsigned int v175 = sub_1CB8387D8(v170, &v281)[1];
                  }
                  else
                  {
                    int v209 = 1;
                    while (v174 != -1)
                    {
                      unsigned int v210 = v173 + v209++;
                      unsigned int v173 = v210 & v172;
                      int v174 = *(_DWORD *)(*(void *)v170 + 8 * (v210 & v172));
                      if (v281 == v174) {
                        goto LABEL_250;
                      }
                    }
                    unsigned int v175 = 0;
                  }
                  goto LABEL_254;
                }
                unsigned int v175 = 0;
              }
              else
              {
                unsigned int v175 = 0;
                uint64_t v15 = (uint64_t)a7;
                unint64_t v16 = v277;
              }
              int v57 = v269;
LABEL_254:
              llvm::ModuloScheduleExpander::rewriteScheduledInstr(v16, a2, v15, v10, v62, v273, v266, IncompleteVirtualRegister, v175);
              uint64_t v176 = a6 + 24 * (v10 - v62);
              int v177 = *(_DWORD *)(v176 + 16);
              unsigned int v178 = v278;
              if (v177)
              {
                int v179 = v177 - 1;
                unsigned int v180 = v179 & v261;
                int v181 = *(_DWORD *)(*(void *)v176 + 8 * (v179 & v261));
                if (v266 == v181)
                {
LABEL_256:
                  LODWORD(v283) = v266;
                  unint64_t v182 = sub_1CB9A74A0(a6 + 24 * (v10 - v62), &v283);
                  llvm::ModuloScheduleExpander::rewriteScheduledInstr(v16, a2, v15, v10, v62, v273, v182[1], IncompleteVirtualRegister, 0);
                  unsigned int v178 = v278;
                }
                else
                {
                  int v207 = 1;
                  while (v181 != -1)
                  {
                    unsigned int v208 = v180 + v207++;
                    unsigned int v180 = v208 & v179;
                    int v181 = *(_DWORD *)(*(void *)v176 + 8 * v180);
                    if (v266 == v181) {
                      goto LABEL_256;
                    }
                  }
                }
              }
              if (a10 && v62 == v260)
              {
                sub_1CC3C6710(v266, IncompleteVirtualRegister, *((void *)v16 + 6), *(void *)(*((void *)v16 + 3) + 24), *(void *)(*((void *)v16 + 3) + 272), *((void *)v16 + 5));
                unsigned int v178 = v278;
              }
              if (a8 == v10) {
                unsigned int v178 = IncompleteVirtualRegister;
              }
              unsigned int v278 = v178;
              LODWORD(v283) = v266;
              uint64_t result = (uint64_t)sub_1CB9A74A0(v176, &v283);
              *(_DWORD *)(result + 4) = IncompleteVirtualRegister;
              int v63 = ~v62;
              goto LABEL_263;
            }
LABEL_294:
            unsigned int IncompleteVirtualRegister = sub_1CB8387D8(v198, &v281)[1];
            uint64_t v15 = (uint64_t)a7;
            llvm::ModuloScheduleExpander::rewriteScheduledInstr(v16, a2, (uint64_t)a7, v10, v62, v273, v24, IncompleteVirtualRegister, 0);
            LODWORD(v283) = v24;
            sub_1CB9A74A0(a6 + 24 * (v10 - v62), &v283)[1] = IncompleteVirtualRegister;
            int v63 = ~v62;
            uint64_t result = a6 + 24 * (~v62 + a8);
            int v203 = *(_DWORD *)(result + 16);
            unsigned int v278 = IncompleteVirtualRegister;
            if (v203)
            {
              int v204 = v203 - 1;
              unsigned int v205 = (37 * v281) & v204;
              int v206 = *(_DWORD *)(*(void *)result + 8 * v205);
              if (v281 == v206)
              {
LABEL_296:
                uint64_t result = (uint64_t)sub_1CB8387D8(result, &v281);
                unsigned int v278 = *(_DWORD *)(result + 4);
              }
              else
              {
                int v220 = 1;
                while (v206 != -1)
                {
                  unsigned int v221 = v205 + v220++;
                  unsigned int v205 = v221 & v204;
                  int v206 = *(_DWORD *)(*(void *)result + 8 * (v221 & v204));
                  if (v281 == v206) {
                    goto LABEL_296;
                  }
                }
                unsigned int v278 = IncompleteVirtualRegister;
              }
            }
            if (a10)
            {
              unint64_t v16 = v277;
              if (v62 == v260) {
                uint64_t result = sub_1CC3C6710(v24, IncompleteVirtualRegister, *((void *)v277 + 6), *(void *)(*((void *)v277 + 3) + 24), *(void *)(*((void *)v277 + 3) + 272), *((void *)v277 + 5));
              }
            }
            else
            {
              unint64_t v16 = v277;
            }
            int v57 = v269;
LABEL_263:
            if (++v62 == v268) {
              goto LABEL_356;
            }
          }
          uint64_t v87 = 0;
LABEL_188:
          int v89 = 0;
          goto LABEL_189;
        }
        unsigned int IncompleteVirtualRegister = 0;
LABEL_356:
        float v226 = v273;
        int v227 = v268;
        if (v251 > v247)
        {
          do
            uint64_t result = llvm::ModuloScheduleExpander::rewriteScheduledInstr(v16, a2, v15, v10, ++v227, v273, v24, IncompleteVirtualRegister, 0);
          while (v251 != v227);
        }
        LODWORD(v17) = v270;
        uint64_t v19 = v242;
        int v20 = v245;
        if (!v251 && a10 && *v244)
        {
          int v228 = *v244 - 1;
          unsigned int v229 = (37 * v281) & v228;
          int v230 = *(_DWORD *)(*v245 + 8 * v229);
          if (v281 == v230)
          {
LABEL_362:
            float v231 = sub_1CB8387D8((uint64_t)v245, &v281);
            uint64_t result = sub_1CC3C6710(v24, v231[1], *((void *)v16 + 6), *(void *)(*((void *)v16 + 3) + 24), *(void *)(*((void *)v16 + 3) + 272), *((void *)v16 + 5));
          }
          else
          {
            int v235 = 1;
            while (v230 != -1)
            {
              unsigned int v236 = v229 + v235++;
              unsigned int v229 = v236 & v228;
              int v230 = *(_DWORD *)(*v245 + 8 * v229);
              if (v281 == v230) {
                goto LABEL_362;
              }
            }
          }
        }
        if (v273 && (*(unsigned char *)v273 & 4) != 0)
        {
          uint64_t v232 = v243;
        }
        else
        {
          uint64_t v232 = v243;
          if ((*((_WORD *)v273 + 22) & 8) != 0)
          {
            do
              float v226 = (llvm::MachineInstr *)*((void *)v226 + 1);
            while ((*((_WORD *)v226 + 22) & 8) != 0);
          }
        }
        uint64_t v13 = *((void *)v226 + 1);
      }
      while (v13 != v232);
    }
  }
  return result;
}

uint64_t llvm::ModuloScheduleExpander::generatePhis(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, int a8, signed int a9, char a10)
{
  int v10 = a8 - a9;
  if (a8 == a9) {
    int v10 = -1;
  }
  uint64_t v11 = *(void *)(result + 48);
  uint64_t v12 = v11 + 48;
  uint64_t v13 = *(void *)(v11 + 56);
  if (v13 != v11 + 48)
  {
    int v14 = a8;
    uint64_t v15 = (llvm::ModuloScheduleExpander *)result;
    unsigned int v99 = a9 - (a8 != a9);
    unint64_t v16 = (v10 + a8);
    while (!**(_WORD **)(v13 + 16) || **(_WORD **)(v13 + 16) == 69)
    {
      uint64_t v13 = *(void *)(v13 + 8);
      if (v13 == v12) {
        return result;
      }
    }
    if (v12 != v13)
    {
      unsigned int v91 = (uint64_t **)(result + 80);
      uint64_t v90 = a6 + 24 * v99;
      int v89 = v16 + 1;
      uint64_t v95 = a6 + 24 * v16;
      uint64_t v94 = a2 + 48;
      unint64_t v96 = (v10 + a8);
      uint64_t v92 = v11 + 48;
LABEL_11:
      uint64_t v17 = *(unsigned int *)(v13 + 40);
      if (!v17) {
        goto LABEL_175;
      }
      uint64_t v18 = 0;
      while (1)
      {
        uint64_t v19 = *(void *)(v13 + 32);
        if ((*(_DWORD *)(v19 + 32 * v18) & 0x10000FF) != 0x1000000) {
          goto LABEL_15;
        }
        uint64_t v20 = v19 + 32 * v18;
        int v22 = *(_DWORD *)(v20 + 4);
        unsigned int v21 = (_DWORD *)(v20 + 4);
        if ((v22 & 0x80000000) == 0) {
          goto LABEL_15;
        }
        uint64_t v23 = *(void *)v15;
        uint64_t v24 = (uint64_t *)(*(void *)v15 + 56);
        uint64_t v110 = (unsigned __int8 *)v13;
        uint64_t v111 = 0;
        unsigned int v25 = -1;
        if (sub_1CD3C8538(v24, &v110, &v111)
          && v111 != (unsigned __int8 **)(*(void *)(v23 + 56) + 16 * *(unsigned int *)(v23 + 72)))
        {
          unsigned int v25 = *((_DWORD *)v111 + 2);
        }
        LODWORD(v111) = *v21;
        uint64_t v107 = v111;
        uint64_t result = (uint64_t)sub_1CD55B424(v91, v111, &v111);
        if ((*(unsigned char *)(result + 36) & 1) != 0
          && *(_DWORD *)(result + 32) == 0
          && *(_DWORD *)(*(void *)v15 + 80) <= a9)
        {
          unsigned int v28 = 1;
        }
        else
        {
          unsigned int v28 = *(_DWORD *)(result + 32);
        }
        if (v14 == a9) {
          goto LABEL_45;
        }
        if (v28 || v25 != 0) {
          goto LABEL_45;
        }
        uint64_t v30 = *((void *)v15 + 3);
        if ((v107 & 0x80000000) != 0) {
          int v31 = (uint64_t *)(*(void *)(v30 + 24) + 16 * (v107 & 0x7FFFFFFF) + 8);
        }
        else {
          int v31 = (uint64_t *)(*(void *)(v30 + 272) + 8 * v107);
        }
        uint64_t v32 = *v31;
        if (v32)
        {
          while ((*(unsigned char *)(v32 + 3) & 1) != 0)
          {
            uint64_t v32 = *(void *)(v32 + 24);
            if (!v32) {
              goto LABEL_40;
            }
          }
LABEL_43:
          if (*(void *)(*(void *)(v32 + 8) + 24) != *((void *)v15 + 6))
          {
            unsigned int v28 = 1;
            goto LABEL_45;
          }
          while (1)
          {
            uint64_t v32 = *(void *)(v32 + 24);
            if (!v32) {
              break;
            }
            if ((*(unsigned char *)(v32 + 3) & 1) == 0) {
              goto LABEL_43;
            }
          }
        }
LABEL_40:
        unsigned int v28 = 0;
LABEL_45:
        if (v14 == a9 || v25 <= v16)
        {
          LODWORD(v111) = v107;
          uint64_t result = (uint64_t)sub_1CB9A74A0(v90, &v111);
          uint64_t v33 = *(unsigned int *)(result + 4);
          uint64_t v34 = *((void *)v15 + 3);
          unsigned int v106 = v33;
          if ((v33 & 0x80000000) != 0) {
            uint64_t v35 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v35 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v33);
          }
          uint64_t v36 = *v35;
          if (v36)
          {
            if (*(unsigned char *)(v36 + 3) & 1) != 0 || (uint64_t v36 = *(void *)(v36 + 24)) != 0 && (*(unsigned char *)(v36 + 3))
            {
              uint64_t v37 = *(void *)(v36 + 8);
              if (v37)
              {
                int v38 = **(unsigned __int16 **)(v37 + 16);
                BOOL v39 = v38 == 69 || v38 == 0;
                if (v39 && *(void *)(v37 + 24) == a2)
                {
                  int v40 = *(_DWORD *)(v37 + 40);
                  if (v40 == 1)
                  {
LABEL_62:
                    unsigned int v106 = 0;
                  }
                  else
                  {
                    uint64_t v41 = *(void *)(v37 + 32);
                    unsigned int v42 = 1;
                    while (*(void *)(v41 + 32 * (v42 + 1) + 16) != a4)
                    {
                      v42 += 2;
                      if (v40 == v42) {
                        goto LABEL_62;
                      }
                    }
                    unsigned int v106 = *(_DWORD *)(v41 + 32 * v42 + 4);
                  }
                }
              }
            }
          }
          LODWORD(v43) = v89 - v25;
          uint64_t v43 = v28 >= v89 - v25 ? v43 : v28;
          uint64_t v102 = v43;
          if (v43)
          {
            unint64_t v44 = 0;
            uint64_t v100 = v17;
            uint64_t v103 = (v43 - 1);
            do
            {
              LODWORD(v111) = v107;
              uint64_t v45 = sub_1CB9A74A0(v95, &v111);
              if (v44 <= v16)
              {
                LODWORD(v111) = v107;
                uint64_t v45 = sub_1CB9A74A0(a6 + 24 * (v16 - v44), &v111);
              }
              unsigned int v46 = v45[1];
              int v47 = (void *)*((void *)v15 + 3);
              if ((v46 & 0x80000000) != 0) {
                int v48 = (uint64_t *)(v47[3] + 16 * (v46 & 0x7FFFFFFF) + 8);
              }
              else {
                int v48 = (uint64_t *)(v47[34] + 8 * v46);
              }
              uint64_t v49 = *v48;
              if (v49)
              {
                if ((*(unsigned char *)(v49 + 3) & 1) != 0
                  || (uint64_t v49 = *(void *)(v49 + 24)) != 0 && (*(unsigned char *)(v49 + 3) & 1) != 0)
                {
                  uint64_t v50 = *(void *)(v49 + 8);
                  if (v50)
                  {
                    int v51 = **(unsigned __int16 **)(v50 + 16);
                    BOOL v52 = v51 == 69 || v51 == 0;
                    if (v52 && *(void *)(v50 + 24) == a5)
                    {
                      int v53 = *(_DWORD *)(v50 + 40);
                      if (v53 == 1)
                      {
LABEL_86:
                        unsigned int v46 = 0;
                      }
                      else
                      {
                        uint64_t v54 = *(void *)(v50 + 32);
                        unsigned int v55 = 1;
                        while (*(void *)(v54 + 32 * (v55 + 1) + 16) == a5)
                        {
                          v55 += 2;
                          if (v53 == v55) {
                            goto LABEL_86;
                          }
                        }
                        unsigned int v46 = *(_DWORD *)(v54 + 32 * v55 + 4);
                      }
                    }
                    if ((v51 == 69 || !**(_WORD **)(v50 + 16)) && *(void *)(v50 + 24) == a2)
                    {
                      int v56 = *(_DWORD *)(v50 + 40);
                      if (v56 == 1)
                      {
LABEL_95:
                        unsigned int v46 = 0;
                      }
                      else
                      {
                        uint64_t v57 = *(void *)(v50 + 32);
                        unsigned int v58 = 1;
                        while (*(void *)(v57 + 32 * (v58 + 1) + 16) == a2)
                        {
                          v58 += 2;
                          if (v56 == v58) {
                            goto LABEL_95;
                          }
                        }
                        unsigned int v46 = *(_DWORD *)(v57 + 32 * v58 + 4);
                      }
                    }
                  }
                }
              }
              if (v14 != a9)
              {
                LODWORD(v111) = v107;
                unsigned int v106 = sub_1CB9A74A0(a6 + 24 * (v99 - v44), &v111)[1];
                int v47 = (void *)*((void *)v15 + 3);
              }
              unint64_t v59 = *(void *)(v47[3] + 16 * (v107 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
              unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v47, "", 0);
              *(void *)(v47[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v59;
              uint64_t v61 = v47[1];
              if (v61) {
                (*(void (**)(uint64_t))(*(void *)v61 + 24))(v61);
              }
              uint64_t v62 = a2 + 48;
              if (*(void *)(a2 + 56) != v94)
              {
                uint64_t v62 = *(void *)(a2 + 56);
                while (!**(_WORD **)(v62 + 16) || **(_WORD **)(v62 + 16) == 69)
                {
                  uint64_t v62 = *(void *)(v62 + 8);
                  if (v62 == v94)
                  {
                    uint64_t v62 = a2 + 48;
                    break;
                  }
                }
              }
              uint64_t v109 = 0;
              uint64_t v110 = 0;
              int v63 = v15;
              uint64_t v64 = *(void *)(*((void *)v15 + 4) + 8);
              uint64_t v65 = a2;
              int v66 = *(llvm::MachineFunction **)(a2 + 32);
              BOOL v67 = llvm::MachineFunction::CreateMachineInstr(v66, v64, &v110, 0);
              if (v110)
              {
                int v85 = *v110;
                if ((v85 - 4) > 0x1E)
                {
                  if ((v85 - 3) >= 0xFFFFFFFE) {
                    BOOL v88 = v110;
                  }
                  else {
                    BOOL v88 = 0;
                  }
                  if ((v85 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v87 = (unint64_t)(v88 + 8);
LABEL_166:
                    uint64_t v111 = &v110;
                    sub_1CC5FA668(v87 + 16, &v111);
                    uint64_t v65 = a2;
                    goto LABEL_108;
                  }
                  uint64_t v65 = a2;
                  if (v85 == 3) {
                    *((void *)v110 + 1) = 0;
                  }
                }
                else
                {
                  uint64_t v65 = a2;
                  if ((v110[1] & 0x7F) == 2 || *((_DWORD *)v110 + 3))
                  {
                    uint64_t v86 = *((void *)v110 + 2);
                    if ((v86 & 4) != 0)
                    {
                      unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
                      if (v87) {
                        goto LABEL_166;
                      }
                    }
                  }
                }
              }
LABEL_108:
              uint64_t v68 = *(void *)(v65 + 40);
              *((void *)v67 + 3) = v68;
              uint64_t v69 = *(void *)(v68 + 32);
              uint64_t v70 = *((unsigned int *)v67 + 10);
              uint64_t v15 = v63;
              if (v70)
              {
                uint64_t v77 = *((void *)v67 + 4);
                uint64_t v78 = *(void *)(v69 + 40);
                uint64_t v79 = 32 * v70;
                do
                {
                  if (!*(unsigned char *)v77)
                  {
                    uint64_t v80 = *(unsigned int *)(v77 + 4);
                    if ((int)v80 >= 0) {
                      int v81 = (uint64_t *)(*(void *)(v78 + 272) + 8 * v80);
                    }
                    else {
                      int v81 = (uint64_t *)(*(void *)(v78 + 24) + 16 * (v80 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v82 = *v81;
                    if (*v81)
                    {
                      uint64_t v83 = *(void *)(v82 + 16);
                      *(void *)(v82 + 16) = v77;
                      *(void *)(v77 + 16) = v83;
                      if (*(unsigned char *)(v77 + 3))
                      {
                        *(void *)(v77 + 24) = v82;
                      }
                      else
                      {
                        *(void *)(v77 + 24) = 0;
                        int v81 = (uint64_t *)(v83 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v77 + 16) = v77;
                      *(void *)(v77 + 24) = 0;
                    }
                    *int v81 = v77;
                  }
                  v77 += 32;
                  v79 -= 32;
                }
                while (v79);
              }
              uint64_t v71 = *(void *)(v69 + 728);
              if (v71) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v71 + 24))(v71, v67);
              }
              unint64_t v72 = *(void *)v62 & 0xFFFFFFFFFFFFFFF8;
              *(void *)BOOL v67 = v72 | *(void *)v67 & 7;
              *((void *)v67 + 1) = v62;
              *(void *)(v72 + 8) = v67;
              *(void *)uint64_t v62 = *(void *)v62 & 7 | (unint64_t)v67;
              uint64_t v112 = 0;
              uint64_t v113 = 0;
              uint64_t v114 = 0;
              LODWORD(v111) = 0x1000000;
              HIDWORD(v111) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand(v67, v66, (const llvm::MachineOperand *)&v111);
              if (!v109) {
                goto LABEL_115;
              }
              int v73 = *v109;
              if ((v73 - 4) > 0x1E)
              {
                if ((v73 - 3) >= 0xFFFFFFFE) {
                  BOOL v75 = v109;
                }
                else {
                  BOOL v75 = 0;
                }
                if ((v73 - 3) < 0xFFFFFFFE)
                {
                  if (v73 == 3) {
                    *((void *)v109 + 1) = 0;
                  }
                  goto LABEL_115;
                }
                unint64_t v76 = (unint64_t)(v75 + 8);
              }
              else
              {
                if ((v109[1] & 0x7F) != 2 && !*((_DWORD *)v109 + 3)) {
                  goto LABEL_115;
                }
                uint64_t v84 = *((void *)v109 + 2);
                if ((v84 & 4) == 0) {
                  goto LABEL_115;
                }
                unint64_t v76 = v84 & 0xFFFFFFFFFFFFFFF8;
                if (!v76) {
                  goto LABEL_115;
                }
              }
              uint64_t v111 = &v109;
              sub_1CC5FA668(v76 + 16, &v111);
LABEL_115:
              uint64_t v112 = 0;
              LODWORD(v111) = 0;
              HIDWORD(v111) = v46;
              uint64_t v113 = 0;
              uint64_t v114 = 0;
              llvm::MachineInstr::addOperand(v67, v66, (const llvm::MachineOperand *)&v111);
              uint64_t v112 = 0;
              uint64_t v113 = a3;
              LODWORD(v111) = 4;
              llvm::MachineInstr::addOperand(v67, v66, (const llvm::MachineOperand *)&v111);
              uint64_t v112 = 0;
              LODWORD(v111) = 0;
              HIDWORD(v111) = v106;
              uint64_t v113 = 0;
              uint64_t v114 = 0;
              llvm::MachineInstr::addOperand(v67, v66, (const llvm::MachineOperand *)&v111);
              uint64_t v112 = 0;
              uint64_t v113 = a4;
              LODWORD(v111) = 4;
              llvm::MachineInstr::addOperand(v67, v66, (const llvm::MachineOperand *)&v111);
              if (!v44)
              {
                uint64_t v111 = (unsigned __int8 **)v67;
                sub_1CD4F8350(a7, &v111)[1] = v13;
              }
              int v14 = a8;
              if (a8 == a9)
              {
                llvm::ModuloScheduleExpander::rewriteScheduledInstr(v63, a2, (uint64_t)a7, a9, v44, (llvm::MachineInstr *)v13, v46, IncompleteVirtualRegister, 0);
                llvm::ModuloScheduleExpander::rewriteScheduledInstr(v63, a2, (uint64_t)a7, a9, v44, (llvm::MachineInstr *)v13, v106, IncompleteVirtualRegister, 0);
                LODWORD(v111) = v107;
                uint64_t result = (uint64_t)sub_1CB9A74A0(a6 + 24 * (v99 + ~v44), &v111);
                *(_DWORD *)(result + 4) = IncompleteVirtualRegister;
                unsigned int v106 = IncompleteVirtualRegister;
                unint64_t v16 = v96;
                uint64_t v17 = v100;
                uint64_t v74 = v103;
              }
              else
              {
                LODWORD(v111) = v107;
                uint64_t result = (uint64_t)sub_1CB9A74A0(a6 + 24 * (a9 - v44), &v111);
                *(_DWORD *)(result + 4) = IncompleteVirtualRegister;
                uint64_t v74 = v103;
                if (v44 == v103)
                {
                  uint64_t result = llvm::ModuloScheduleExpander::rewriteScheduledInstr(v63, a2, (uint64_t)a7, a9, v103, (llvm::MachineInstr *)v13, v107, IncompleteVirtualRegister, 0);
                  uint64_t v74 = v103;
                }
                unint64_t v16 = v96;
                uint64_t v17 = v100;
              }
              if (v44 == v74 && a10) {
                uint64_t result = sub_1CC3C6710(v107, IncompleteVirtualRegister, *((void *)v15 + 6), *(void *)(*((void *)v15 + 3) + 24), *(void *)(*((void *)v15 + 3) + 272), *((void *)v15 + 5));
              }
              ++v44;
            }
            while (v44 != v102);
          }
        }
LABEL_15:
        if (++v18 == v17)
        {
          uint64_t v12 = v92;
          if (!v13) {
            goto LABEL_178;
          }
LABEL_175:
          if ((*(unsigned char *)v13 & 4) == 0)
          {
LABEL_178:
            while ((*(_WORD *)(v13 + 44) & 8) != 0)
              uint64_t v13 = *(void *)(v13 + 8);
          }
          uint64_t v13 = *(void *)(v13 + 8);
          if (v13 == v12) {
            return result;
          }
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

uint64_t llvm::ModuloScheduleExpander::removeDeadInstructions(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *((unsigned int *)a3 + 2);
  if (!v4) {
    goto LABEL_44;
  }
  uint64_t v49 = *a3;
  uint64_t v5 = *a3 + 8 * v4;
  do
  {
    uint64_t v6 = *(void *)(v5 - 8);
    v5 -= 8;
    uint64_t v7 = v6 + 48;
    for (unint64_t i = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFF8; v7 != i; unint64_t i = v21 & 0xFFFFFFFFFFFFFFF8)
    {
      if (**(unsigned __int16 **)(i + 16) - 1 <= 1) {
        goto LABEL_31;
      }
      BOOL v50 = 0;
      if (!llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)i, 0, &v50)
        && **(_WORD **)(i + 16)
        && **(_WORD **)(i + 16) != 69)
      {
        goto LABEL_31;
      }
      uint64_t v9 = *(unsigned int *)(i + 40);
      if (!v9) {
        goto LABEL_31;
      }
      int v10 = *(_DWORD **)(i + 32);
      uint64_t v11 = &v10[8 * v9];
      char v12 = 1;
      do
      {
        if ((*v10 & 0x10000FF) == 0x1000000)
        {
          uint64_t v13 = v10[1];
          if ((v13 - 1) > 0x3FFFFFFE)
          {
            uint64_t v14 = a1[3];
            if ((v13 & 0x80000000) != 0) {
              uint64_t v15 = (uint64_t *)(*(void *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v15 = (uint64_t *)(*(void *)(v14 + 272) + 8 * v13);
            }
            uint64_t v16 = *v15;
            if (v16)
            {
              while ((*(unsigned char *)(v16 + 3) & 1) != 0)
              {
                uint64_t v16 = *(void *)(v16 + 24);
                if (!v16) {
                  goto LABEL_26;
                }
              }
              uint64_t v17 = a1[6];
              if (*(void *)(*(void *)(v16 + 8) + 24) != v17) {
                goto LABEL_31;
              }
              while (1)
              {
                uint64_t v16 = *(void *)(v16 + 24);
                if (!v16) {
                  break;
                }
                if ((*(unsigned char *)(v16 + 3) & 1) == 0)
                {
                  uint64_t v18 = *(void *)(*(void *)(v16 + 8) + 24);
                  BOOL v19 = v18 == v17;
                  BOOL v20 = v18 != v17;
                  if (!v19)
                  {
                    if (v20) {
                      goto LABEL_31;
                    }
                    break;
                  }
                }
              }
            }
          }
          else if ((~*v10 & 0x5000000) != 0)
          {
            goto LABEL_31;
          }
LABEL_26:
          char v12 = 0;
        }
        v10 += 8;
      }
      while (v10 != v11);
      if (v12)
      {
LABEL_31:
        uint64_t v21 = *(void *)i;
        continue;
      }
      int v22 = *(int32x2_t **)(a1[5] + 288);
      int32x2_t v23 = v22[46];
      uint64_t v24 = v22[48].u32[0];
      if (!v24) {
        goto LABEL_39;
      }
      LODWORD(v25) = (v24 - 1) & ((i >> 4) ^ (i >> 9));
      int v26 = (uint64_t *)(*(void *)&v23 + 16 * v25);
      uint64_t v27 = *v26;
      if (*v26 != i)
      {
        int v28 = 1;
        while (v27 != -4096)
        {
          int v29 = v25 + v28++;
          uint64_t v25 = v29 & (v24 - 1);
          uint64_t v27 = *(void *)(*(void *)&v23 + 16 * v25);
          if (v27 == i)
          {
            int v26 = (uint64_t *)(*(void *)&v23 + 16 * v25);
            goto LABEL_40;
          }
        }
LABEL_39:
        int v26 = (uint64_t *)(*(void *)&v23 + 16 * v24);
      }
LABEL_40:
      if (v26 != (uint64_t *)(*(void *)&v23 + 16 * v24))
      {
        unint64_t v30 = v26[1] & 0xFFFFFFFFFFFFFFF8;
        *int v26 = -8192;
        v22[47] = vadd_s32(v22[47], (int32x2_t)0x1FFFFFFFFLL);
        *(void *)(v30 + 16) = 0;
      }
      uint64_t v21 = *(void *)i;
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)i);
    }
  }
  while (v5 != v49);
LABEL_44:
  uint64_t result = *(void *)(a2 + 56);
  if (result != a2 + 48)
  {
    uint64_t v32 = *(void *)(a2 + 56);
    while (!**(_WORD **)(v32 + 16) || **(_WORD **)(v32 + 16) == 69)
    {
      uint64_t v32 = *(void *)(v32 + 8);
      if (v32 == a2 + 48)
      {
        uint64_t v32 = a2 + 48;
        break;
      }
    }
    if (result != v32)
    {
      while (2)
      {
        if (!result || (uint64_t v33 = result, (*(unsigned char *)result & 4) == 0))
        {
          uint64_t v33 = result;
          if ((*(_WORD *)(result + 44) & 8) != 0)
          {
            uint64_t v33 = result;
            do
              uint64_t v33 = *(void *)(v33 + 8);
            while ((*(_WORD *)(v33 + 44) & 8) != 0);
          }
        }
        uint64_t v34 = *(unsigned int *)(*(void *)(result + 32) + 4);
        uint64_t v35 = a1[3];
        if ((v34 & 0x80000000) != 0) {
          uint64_t v36 = (uint64_t *)(*(void *)(v35 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v36 = (uint64_t *)(*(void *)(v35 + 272) + 8 * v34);
        }
        uint64_t v37 = *(void *)(v33 + 8);
        uint64_t v38 = *v36;
        if (*v36)
        {
          while ((*(unsigned char *)(v38 + 3) & 1) != 0)
          {
            uint64_t v38 = *(void *)(v38 + 24);
            if (!v38) {
              goto LABEL_62;
            }
          }
LABEL_72:
          uint64_t result = v37;
          if (v37 == v32) {
            return result;
          }
          continue;
        }
        break;
      }
LABEL_62:
      BOOL v39 = *(int32x2_t **)(a1[5] + 288);
      int32x2_t v40 = v39[46];
      uint64_t v41 = v39[48].u32[0];
      if (v41)
      {
        LODWORD(v42) = (v41 - 1) & ((result >> 4) ^ (result >> 9));
        uint64_t v43 = (uint64_t *)(*(void *)&v40 + 16 * v42);
        uint64_t v44 = *v43;
        if (*v43 != result)
        {
          int v45 = 1;
          while (v44 != -4096)
          {
            int v46 = v42 + v45++;
            uint64_t v42 = v46 & (v41 - 1);
            uint64_t v44 = *(void *)(*(void *)&v40 + 16 * v42);
            if (v44 == result)
            {
              uint64_t v43 = (uint64_t *)(*(void *)&v40 + 16 * v42);
              goto LABEL_69;
            }
          }
          goto LABEL_68;
        }
      }
      else
      {
LABEL_68:
        uint64_t v43 = (uint64_t *)(*(void *)&v40 + 16 * v41);
      }
LABEL_69:
      if (v43 != (uint64_t *)(*(void *)&v40 + 16 * v41))
      {
        unint64_t v47 = v43[1] & 0xFFFFFFFFFFFFFFF8;
        uint64_t *v43 = -8192;
        v39[47] = vadd_s32(v39[47], (int32x2_t)0x1FFFFFFFFLL);
        *(void *)(v47 + 16) = 0;
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)result);
      goto LABEL_72;
    }
  }
  return result;
}

llvm::MachineInstr *llvm::ModuloScheduleExpander::cloneAndChangeInstr(llvm::ModuloScheduleExpander *this, llvm::MachineInstr *a2, int a3, int a4)
{
  unsigned int v8 = (llvm::MachineInstr *)llvm::MachineFunction::CloneMachineInstr(*((llvm::MachineFunction **)this + 1), a2);
  uint64_t v23 = 0;
  if (sub_1CD45B528(*((void *)this + 13), *((_DWORD *)this + 30), (uint64_t)a2, &v23)) {
    BOOL v9 = v23 == *((void *)this + 13) + 24 * *((unsigned int *)this + 30);
  }
  else {
    BOOL v9 = 1;
  }
  if (v9)
  {
    LODWORD(v13) = a3 - a4;
LABEL_16:
    llvm::ModuloScheduleExpander::updateMemOperands(this, v8, a2, v13);
    return v8;
  }
  unsigned int v10 = *(_DWORD *)(v23 + 8);
  uint64_t v11 = *(void *)(v23 + 16);
  uint64_t v21 = 0;
  if ((*(unsigned int (**)(void))(**((void **)this + 4) + 688))())
  {
    uint64_t v14 = *(void *)(*((void *)a2 + 4) + 32 * v21 + 16);
    uint64_t DefInLoop = llvm::ModuloScheduleExpander::findDefInLoop(this, v10);
    uint64_t v16 = *(llvm::MachineFunction **)this;
    uint64_t v17 = (uint64_t *)(*(void *)this + 56);
    uint64_t v22 = DefInLoop;
    uint64_t v23 = 0;
    int v18 = sub_1CD3C8538(v17, &v22, &v23);
    int v19 = -1;
    if (v18 && v23 != *((void *)v16 + 7) + 16 * *((unsigned int *)v16 + 18)) {
      int v19 = *(_DWORD *)(v23 + 8);
    }
    uint64_t v13 = (a3 - a4);
    if (v19 <= a4) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = v11 * v13;
    }
    *(void *)(*((void *)v8 + 4) + 32 * v21 + 16) = v20 + v14;
    goto LABEL_16;
  }
  return 0;
}

uint64_t llvm::ModuloScheduleExpander::rewriteScheduledInstr(llvm::ModuloScheduleExpander *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5, llvm::MachineInstr *a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  uint64_t v64 = a6;
  uint64_t v15 = *(_DWORD **)a1;
  int v16 = *(_DWORD *)(*(void *)a1 + 80);
  uint64_t v17 = (uint64_t *)(*(void *)a1 + 56);
  uint64_t v65 = 0;
  uint64_t result = sub_1CD3C8538(v17, &v64, &v65);
  if (result) {
    BOOL v19 = v65 == *((void *)v15 + 7) + 16 * v15[18];
  }
  else {
    BOOL v19 = 1;
  }
  if (v19) {
    int v20 = -1;
  }
  else {
    int v20 = *(_DWORD *)(v65 + 8);
  }
  uint64_t v21 = (void *)*((void *)a1 + 3);
  if ((a7 & 0x80000000) != 0) {
    uint64_t v22 = (uint64_t *)(v21[3] + 16 * (a7 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v22 = (uint64_t *)(v21[34] + 8 * a7);
  }
  uint64_t v23 = *v22;
  if (*v22)
  {
    while ((*(unsigned char *)(v23 + 3) & 1) != 0)
    {
      uint64_t v23 = *(void *)(v23 + 24);
      if (!v23) {
        return result;
      }
    }
    unsigned int v24 = v16 - 1;
    int v25 = v20 + a5;
    if (a9) {
      BOOL v26 = v24 > a4;
    }
    else {
      BOOL v26 = 0;
    }
    int v27 = !v26;
    int v57 = v27;
    int v62 = v25;
    int v58 = v25 + 1;
    do
    {
      uint64_t v28 = v23;
      do
        uint64_t v23 = *(void *)(v23 + 24);
      while (v23 && (*(unsigned char *)(v23 + 3) & 1) != 0);
      uint64_t v29 = *(void *)(v28 + 8);
      if (*(void *)(v29 + 24) == a2)
      {
        int v30 = **(unsigned __int16 **)(v29 + 16);
        if (v30 != 69 && v30 != 0) {
          goto LABEL_41;
        }
        if (!**((_WORD **)a6 + 2) || **((_WORD **)a6 + 2) == 69 || *(_DWORD *)(*(void *)(v29 + 32) + 4) != a8)
        {
          int v32 = *(_DWORD *)(v29 + 40);
          if (v32 == 1)
          {
LABEL_36:
            int v35 = 0;
          }
          else
          {
            uint64_t v33 = *(void *)(v29 + 32);
            unsigned int v34 = 1;
            while (*(void *)(v33 + 32 * (v34 + 1) + 16) != a2)
            {
              v34 += 2;
              if (v32 == v34) {
                goto LABEL_36;
              }
            }
            int v35 = *(_DWORD *)(v33 + 32 * v34 + 4);
          }
          if (v35 == a7)
          {
LABEL_41:
            unsigned int v60 = a4;
            uint64_t v65 = 0;
            int v36 = sub_1CD40EA84(*(void *)a3, *(_DWORD *)(a3 + 16), v29, &v65);
            uint64_t v37 = v65;
            if (!v36) {
              uint64_t v37 = *(void *)a3 + 16 * *(unsigned int *)(a3 + 16);
            }
            uint64_t v38 = *(llvm::MachineInstr **)(v37 + 8);
            uint64_t v39 = *(void *)a1;
            int32x2_t v40 = (uint64_t *)(*(void *)a1 + 56);
            uint64_t v64 = v38;
            uint64_t v65 = 0;
            int v41 = -1;
            unsigned int v59 = v24;
            if (sub_1CD3C8538(v40, &v64, &v65)
              && v65 != *(void *)(v39 + 56) + 16 * *(unsigned int *)(v39 + 72))
            {
              int v41 = *(_DWORD *)(v65 + 8);
            }
            uint64_t v42 = *(void *)a1;
            uint64_t v43 = (uint64_t *)(*(void *)a1 + 32);
            uint64_t v64 = v38;
            uint64_t v65 = 0;
            uint64_t result = sub_1CD3C8538(v43, &v64, &v65);
            int v44 = -1;
            if (result)
            {
              int v45 = v62;
              if (v65 != *(void *)(v42 + 32) + 16 * *(unsigned int *)(v42 + 48)) {
                int v44 = *(_DWORD *)(v65 + 8);
              }
            }
            else
            {
              int v45 = v62;
            }
            if (v45 == v41 && (**((_WORD **)a6 + 2) == 69 || !**((_WORD **)a6 + 2)))
            {
              uint64_t v52 = *(void *)a1;
              int v53 = (uint64_t *)(*(void *)a1 + 32);
              uint64_t v64 = a6;
              uint64_t v65 = 0;
              uint64_t result = sub_1CD3C8538(v53, &v64, &v65);
              int v54 = -1;
              if (result && v65 != *(void *)(v52 + 32) + 16 * *(unsigned int *)(v52 + 48)) {
                int v54 = *(_DWORD *)(v65 + 8);
              }
              unsigned int v46 = a9;
              int v45 = v62;
              if (v57)
              {
                if (!a9
                  || (int v55 = v54,
                      uint64_t result = llvm::ModuloScheduleExpander::isLoopCarried(a1, a6),
                      int v45 = v62,
                      (result & 1) != 0)
                  || (v56 = v55, unsigned int v46 = a9, v56 > v44)
                  && (unsigned int v46 = a9, **((_WORD **)v38 + 2))
                  && (unsigned int v46 = a9, **((_WORD **)v38 + 2) != 69))
                {
                  unsigned int v46 = a8;
                }
              }
            }
            else
            {
              unsigned int v46 = 0;
            }
            unsigned int v24 = v59;
            a4 = v60;
            if (v59 <= v60 && v58 == v41)
            {
              uint64_t result = llvm::ModuloScheduleExpander::isLoopCarried(a1, a6);
              int v45 = v62;
              if (!result) {
                unsigned int v46 = a8;
              }
            }
            if (v45 > v41)
            {
              int v47 = **((unsigned __int16 **)a6 + 2);
              if (v47 == 69 || v47 == 0) {
                unsigned int v46 = a8;
              }
            }
            if (v59 <= v60)
            {
              int v49 = **((unsigned __int16 **)a6 + 2);
              if (v45 < v41 && v49 != 69 && v49 != 0) {
                unsigned int v46 = a8;
              }
            }
            if (v46)
            {
              sub_1CC38D61C(*((void **)a1 + 3), v46, *(void *)(*(void *)(*((void *)a1 + 3) + 24) + 16 * (v46 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(*(void *)(*((void *)a1 + 3) + 24) + 16 * (a7 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
              uint64_t result = llvm::MachineOperand::setReg(v28, v46);
            }
          }
        }
      }
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1CC3C6710(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = (uint64_t *)(a4 + 16 * (result & 0x7FFFFFFF) + 8);
  if ((int)result >= 0) {
    uint64_t v7 = (uint64_t *)(a5 + 8 * result);
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
    while ((*(unsigned char *)(v8 + 3) & 1) != 0)
    {
      uint64_t v8 = *(void *)(v8 + 24);
      if (!v8) {
        goto LABEL_6;
      }
    }
    unsigned int v10 = a2;
    do
    {
      uint64_t result = v8;
      do
        uint64_t v8 = *(void *)(v8 + 24);
      while (v8 && (*(unsigned char *)(v8 + 3) & 1) != 0);
      if (*(void *)(*(void *)(result + 8) + 24) != a3) {
        uint64_t result = llvm::MachineOperand::setReg(result, v10);
      }
    }
    while (v8);
  }
  else
  {
LABEL_6:
    unsigned int v10 = a2;
  }
  unint64_t v11 = *(unsigned int *)(a6 + 416);
  BOOL v12 = (v10 & 0x7FFFFFFF) >= v11;
  unint64_t v13 = (v10 & 0x7FFFFFFF) - v11;
  if (v12)
  {
    sub_1CB9153B8(a6 + 408, v13 + 1, *(void *)(a6 + 424));
    goto LABEL_18;
  }
  if (!*(void *)(*(void *)(a6 + 408) + 8 * (v10 & 0x7FFFFFFF))) {
LABEL_18:
  }
    operator new();
  return result;
}

char *sub_1CC3C6850(char *result, uint64_t a2)
{
  uint64_t v2 = result + 48;
  uint64_t v3 = *((void *)result + 7);
  if ((char *)v3 != result + 48)
  {
    do
    {
      int v5 = **(unsigned __int16 **)(v3 + 16);
      if (v5 != 69 && v5 != 0) {
        break;
      }
      int v7 = *(_DWORD *)(v3 + 40);
      if (v7 != 1)
      {
        unsigned int v8 = 1;
        while (1)
        {
          uint64_t v9 = v8 + 1;
          if (*(void *)(*(void *)(v3 + 32) + 32 * v9 + 16) == a2) {
            break;
          }
          v8 += 2;
          if (v7 == v8) {
            goto LABEL_13;
          }
        }
        llvm::MachineInstr::removeOperand((char *)v3, v9);
        uint64_t result = llvm::MachineInstr::removeOperand((char *)v3, v8);
      }
LABEL_13:
      if ((*(unsigned char *)v3 & 4) == 0)
      {
        while ((*(_WORD *)(v3 + 44) & 8) != 0)
          uint64_t v3 = *(void *)(v3 + 8);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while ((char *)v3 != v2);
  }
  return result;
}

uint64_t llvm::ModuloScheduleExpander::computeDelta(llvm::ModuloScheduleExpander *this, llvm::MachineInstr *a2, unsigned int *a3)
{
  uint64_t v6 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 16)
                                                                           + 176))(*(void *)(*((void *)this + 1)
                                                                                               + 16));
  uint64_t v24 = 0;
  int v25 = 0;
  BOOL v23 = 0;
  int MemOperandWithOffset = llvm::TargetInstrInfo::getMemOperandWithOffset(*((llvm::TargetInstrInfo **)this + 4), a2, &v25, &v24, &v23, v6);
  uint64_t result = 0;
  if (MemOperandWithOffset) {
    BOOL v9 = !v23;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    if (*(unsigned char *)v25) {
      return 0;
    }
    uint64_t v10 = *((unsigned int *)v25 + 1);
    uint64_t v11 = *(void *)(*((void *)this + 1) + 40);
    BOOL v12 = (uint64_t *)((v10 & 0x80000000) != 0
                    ? *(void *)(v11 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8
                    : *(void *)(v11 + 272) + 8 * v10);
    uint64_t v13 = *v12;
    if (!v13) {
      return 0;
    }
    if ((*(unsigned char *)(v13 + 3) & 1) == 0)
    {
      uint64_t v13 = *(void *)(v13 + 24);
      if (!v13 || (*(unsigned char *)(v13 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t v14 = *(void *)(v13 + 8);
    if (!v14) {
      return 0;
    }
    int v15 = **(unsigned __int16 **)(v14 + 16);
    if (v15 != 69 && v15 != 0) {
      goto LABEL_30;
    }
    int v17 = *(_DWORD *)(v14 + 40);
    if (v17 == 1)
    {
LABEL_23:
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v18 = *(void *)(v14 + 32);
      unsigned int v19 = 1;
      while (*(void *)(v18 + 32 * (v19 + 1) + 16) != *((void *)a2 + 3))
      {
        v19 += 2;
        if (v17 == v19) {
          goto LABEL_23;
        }
      }
      uint64_t v20 = *(unsigned int *)(v18 + 32 * v19 + 4);
      if ((v20 & 0x80000000) != 0)
      {
        uint64_t v21 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
LABEL_27:
        uint64_t v22 = *v21;
        if (v22)
        {
          if (*(unsigned char *)(v22 + 3) & 1) != 0 || (uint64_t v22 = *(void *)(v22 + 24)) != 0 && (*(unsigned char *)(v22 + 3))
          {
            if (*(void *)(v22 + 8))
            {
LABEL_30:
              uint64_t result = (*(unsigned int (**)(void))(**((void **)this + 4) + 712))(*((void *)this + 4));
              if (result == 1) {
                *a3 = 0;
              }
              return result;
            }
          }
        }
        return 0;
      }
    }
    uint64_t v21 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v20);
    goto LABEL_27;
  }
  return result;
}

void llvm::PeelingModuloScheduleExpander::filterInstructions(llvm::PeelingModuloScheduleExpander *this, llvm::MachineBasicBlock *a2, int a3)
{
  uint64_t v4 = a2;
  v50[8] = *MEMORY[0x1E4F143B8];
  FirstInstrTerminator = (void *)llvm::MachineBasicBlock::getFirstInstrTerminator(a2);
  int v7 = (char *)v4 + 48;
  while (1)
  {
    unsigned int v8 = FirstInstrTerminator;
    BOOL v9 = v7;
    if (*((char **)v4 + 7) != v7)
    {
      BOOL v9 = (char *)*((void *)v4 + 7);
      while (!**((_WORD **)v9 + 2) || **((_WORD **)v9 + 2) == 69)
      {
        BOOL v9 = (char *)*((void *)v9 + 1);
        if (v9 == v7)
        {
          BOOL v9 = v7;
          break;
        }
      }
    }
    if (FirstInstrTerminator == (void *)(*(void *)v9 & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    unint64_t v10 = *FirstInstrTerminator & 0xFFFFFFFFFFFFFFF8;
    int v11 = sub_1CD558FB0((uint64_t *)this, (uint64_t)FirstInstrTerminator);
    FirstInstrTerminator = (void *)v10;
    if (v11 != -1 && v11 < a3)
    {
      int v44 = (void *)v10;
      unsigned int v46 = v4;
      int v47 = a3;
      uint64_t v12 = v8[4];
      uint64_t v13 = v8[2];
      unsigned int v14 = *(unsigned __int8 *)(v13 + 4);
      if ((*(unsigned char *)(v13 + 8) & 2) == 0 || (int v40 = *((_DWORD *)v8 + 10), v40 == v14))
      {
        unsigned int v15 = v14;
      }
      else
      {
        int v41 = v40 - 1;
        unsigned int v15 = v14;
        do
        {
          int v42 = *(_DWORD *)(v12 + 32 * v14);
          if ((v42 & 0x10000FF) != 0x1000000) {
            break;
          }
          v15 += (v42 & 0x2000000) == 0;
          if (v41 == v14) {
            break;
          }
          ++v14;
        }
        while ((v42 & 0x2000000) == 0);
      }
      int v45 = v7;
      if (v15)
      {
        uint64_t v16 = v12 + 32 * v15;
        do
        {
          int v48 = v50;
          uint64_t v49 = 0x400000000;
          uint64_t v17 = *((void *)this + 3);
          uint64_t v18 = *(unsigned int *)(v12 + 4);
          if ((v18 & 0x80000000) != 0) {
            unsigned int v19 = (uint64_t *)(*(void *)(v17 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v19 = (uint64_t *)(*(void *)(v17 + 272) + 8 * v18);
          }
          uint64_t v20 = *v19;
          if (*v19)
          {
            while ((*(unsigned char *)(v20 + 3) & 1) != 0)
            {
              uint64_t v20 = *(void *)(v20 + 24);
              if (!v20) {
                goto LABEL_32;
              }
            }
            uint64_t v21 = *(void *)(v20 + 8);
LABEL_22:
            EquivalentRegisterIunsigned int n = llvm::PeelingModuloScheduleExpander::getEquivalentRegisterIn((uint64_t)this, *(_DWORD *)(*(void *)(v21 + 32) + 4), v8[3]);
            sub_1CC3C6E9C((uint64_t)&v48, v21, EquivalentRegisterIn);
            uint64_t v23 = *(void *)(v20 + 8);
            while (1)
            {
              uint64_t v20 = *(void *)(v20 + 24);
              if (!v20) {
                break;
              }
              if ((*(unsigned char *)(v20 + 3) & 1) == 0)
              {
                uint64_t v21 = *(void *)(v20 + 8);
                if (v21 != v23) {
                  goto LABEL_22;
                }
              }
            }
            uint64_t v24 = (char *)v48;
            int v25 = (char *)v48 + 16 * v49;
            if (v49)
            {
              do
              {
                uint64_t v26 = *(void *)v24;
                int v27 = *(_DWORD *)(v12 + 4);
                unsigned int v28 = *((_DWORD *)v24 + 2);
                uint64_t v29 = *(void *)(**((void **)this + 3) + 16);
                int v30 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v29 + 176))(v29);
                llvm::MachineInstr::substituteRegister(v26, v27, v28, 0, v30);
                v24 += 16;
              }
              while (v24 != v25);
              uint64_t v24 = (char *)v48;
            }
            if (v24 != (char *)v50) {
              free(v24);
            }
          }
LABEL_32:
          v12 += 32;
        }
        while (v12 != v16);
      }
      uint64_t v31 = *((void *)this + 5);
      a3 = v47;
      int v7 = v45;
      uint64_t v4 = v46;
      if (v31)
      {
        int v32 = *(int32x2_t **)(v31 + 288);
        int32x2_t v33 = v32[46];
        uint64_t v34 = v32[48].u32[0];
        if (!v34) {
          goto LABEL_48;
        }
        LODWORD(v35) = (v34 - 1) & ((v8 >> 4) ^ (v8 >> 9));
        int v36 = (void *)(*(void *)&v33 + 16 * v35);
        uint64_t v37 = (void *)*v36;
        if ((void *)*v36 != v8)
        {
          int v38 = 1;
          while (v37 != (void *)-4096)
          {
            int v39 = v35 + v38++;
            uint64_t v35 = v39 & (v34 - 1);
            uint64_t v37 = *(void **)(*(void *)&v33 + 16 * v35);
            if (v37 == v8)
            {
              int v36 = (void *)(*(void *)&v33 + 16 * v35);
              goto LABEL_49;
            }
          }
LABEL_48:
          int v36 = (void *)(*(void *)&v33 + 16 * v34);
        }
LABEL_49:
        if (v36 != (void *)(*(void *)&v33 + 16 * v34))
        {
          unint64_t v43 = v36[1] & 0xFFFFFFFFFFFFFFF8;
          *int v36 = -8192;
          v32[47] = vadd_s32(v32[47], (int32x2_t)0x1FFFFFFFFLL);
          *(void *)(v43 + 16) = 0;
        }
      }
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v8);
      FirstInstrTerminator = v44;
    }
  }
}

uint64_t sub_1CC3C6E9C(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  if (v3 >= *(_DWORD *)(result + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v4 = *(void *)result + 16 * v3;
  *(void *)uint64_t v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  ++*(_DWORD *)(result + 8);
  return result;
}

void sub_1CC3C6F20(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v7 = a1 + 48;
  uint64_t v33 = a1 + 48;
  do
  {
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = v7;
    if (v8 != v7)
    {
      uint64_t v9 = *(void *)(a1 + 56);
      while (!**(_WORD **)(v9 + 16) || **(_WORD **)(v9 + 16) == 69)
      {
        uint64_t v9 = *(void *)(v9 + 8);
        if (v9 == v7)
        {
          uint64_t v9 = v7;
          break;
        }
      }
    }
    if (v8 == v9) {
      return;
    }
    char v10 = 0;
    do
    {
      if (!v8 || (uint64_t v11 = v8, (*(unsigned char *)v8 & 4) == 0))
      {
        uint64_t v11 = v8;
        if ((*(_WORD *)(v8 + 44) & 8) != 0)
        {
          uint64_t v11 = v8;
          do
            uint64_t v11 = *(void *)(v11 + 8);
          while ((*(_WORD *)(v11 + 44) & 8) != 0);
        }
      }
      uint64_t v12 = *(void *)(v8 + 32);
      uint64_t v13 = *(unsigned int *)(v12 + 4);
      if ((v13 & 0x80000000) != 0) {
        unsigned int v14 = (uint64_t *)(a2[3] + 16 * (v13 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v14 = (uint64_t *)(a2[34] + 8 * v13);
      }
      uint64_t v15 = *(void *)(v11 + 8);
      uint64_t v16 = *v14;
      if (!*v14) {
        goto LABEL_31;
      }
      while ((*(unsigned char *)(v16 + 3) & 1) != 0)
      {
        uint64_t v16 = *(void *)(v16 + 24);
        if (!v16) {
          goto LABEL_31;
        }
      }
      if ((a4 & 1) == 0 && llvm::MachineInstr::getNumExplicitOperands(v8) == 3)
      {
        sub_1CC38D61C(a2, *(_DWORD *)(v12 + 36), *(void *)(a2[3] + 16 * (*(_DWORD *)(v12 + 36) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(a2[3] + 16 * (v13 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
        uint64_t v17 = *(void *)(v8 + 32);
        uint64_t v18 = *(unsigned int *)(v17 + 4);
        unsigned int v19 = *(_DWORD *)(v17 + 36);
        uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(*a2 + 16) + 176))(*(void *)(*a2 + 16));
        if ((v18 & 0x80000000) != 0) {
          uint64_t v21 = (uint64_t *)(a2[3] + 16 * (v18 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v21 = (uint64_t *)(a2[34] + 8 * v18);
        }
        uint64_t v22 = *v21;
        if (*v21)
        {
          do
          {
            uint64_t v23 = *(void *)(v22 + 24);
            if (v19 - 1 <= 0x3FFFFFFE) {
              llvm::MachineOperand::substPhysReg((unsigned int *)v22, v19, v20);
            }
            else {
              llvm::MachineOperand::setReg(v22, v19);
            }
            uint64_t v22 = v23;
          }
          while (v23);
        }
LABEL_31:
        if (a3)
        {
          uint64_t v24 = *(int32x2_t **)(a3 + 288);
          int32x2_t v25 = v24[46];
          uint64_t v26 = v24[48].u32[0];
          if (!v26) {
            goto LABEL_38;
          }
          LODWORD(v27) = (v26 - 1) & ((v8 >> 4) ^ (v8 >> 9));
          unsigned int v28 = (uint64_t *)(*(void *)&v25 + 16 * v27);
          uint64_t v29 = *v28;
          if (*v28 != v8)
          {
            int v30 = 1;
            while (v29 != -4096)
            {
              int v31 = v27 + v30++;
              uint64_t v27 = v31 & (v26 - 1);
              uint64_t v29 = *(void *)(*(void *)&v25 + 16 * v27);
              if (v29 == v8)
              {
                unsigned int v28 = (uint64_t *)(*(void *)&v25 + 16 * v27);
                goto LABEL_39;
              }
            }
LABEL_38:
            unsigned int v28 = (uint64_t *)(*(void *)&v25 + 16 * v26);
          }
LABEL_39:
          if (v28 != (uint64_t *)(*(void *)&v25 + 16 * v26))
          {
            unint64_t v32 = v28[1] & 0xFFFFFFFFFFFFFFF8;
            *unsigned int v28 = -8192;
            v24[47] = vadd_s32(v24[47], (int32x2_t)0x1FFFFFFFFLL);
            *(void *)(v32 + 16) = 0;
          }
        }
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v8);
        char v10 = 1;
      }
      uint64_t v8 = v15;
    }
    while (v15 != v9);
    uint64_t v7 = v33;
  }
  while ((v10 & 1) != 0);
}

void llvm::PeelingModuloScheduleExpander::rewriteUsesOf(llvm::PeelingModuloScheduleExpander *this, llvm::MachineInstr *a2)
{
  v61[8] = *MEMORY[0x1E4F143B8];
  int v4 = **((unsigned __int16 **)a2 + 2);
  if (v4 == 69 || v4 == 0)
  {
    uint64_t v6 = *((void *)a2 + 4);
    uint64_t v7 = *(unsigned int *)(v6 + 100);
    uint64_t v8 = *((void *)this + 3);
    if ((v7 & 0x80000000) != 0) {
      uint64_t v9 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v9 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v7);
    }
    uint64_t v31 = *(unsigned int *)(v6 + 4);
    uint64_t v32 = *v9;
    if (*v9 && ((*(unsigned char *)(v32 + 3) & 1) != 0 || (uint64_t v44 = *(void *)(v32 + 24)) != 0 && (*(unsigned char *)(v44 + 3) & 1) != 0))
    {
      if ((v7 & 0x80000000) != 0) {
        int v41 = (uint64_t *)(*(void *)(v8 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
      }
      else {
        int v41 = (uint64_t *)(*(void *)(v8 + 272) + 8 * v7);
      }
      uint64_t v42 = *v41;
      if (v42)
      {
        if ((*(unsigned char *)(v42 + 3) & 1) == 0)
        {
          uint64_t v42 = *(void *)(v42 + 24);
          if (v42)
          {
            if ((*(unsigned char *)(v42 + 3) & 1) == 0) {
              uint64_t v42 = 0;
            }
          }
        }
      }
      uint64_t v43 = *(void *)(v42 + 8);
      while (1)
      {
        uint64_t v42 = *(void *)(v42 + 24);
        if (!v42 || (*(unsigned char *)(v42 + 3) & 1) == 0) {
          break;
        }
        uint64_t v33 = 0;
        if (*(void *)(v42 + 8) != v43) {
          goto LABEL_38;
        }
      }
      uint64_t v33 = v43;
    }
    else
    {
      uint64_t v33 = 0;
    }
LABEL_38:
    unsigned int v34 = sub_1CD558FB0((uint64_t *)this, v33);
    if (v34 != -1)
    {
      unsigned int v59 = (void *)*((void *)a2 + 3);
      if (((*(void *)(sub_1CD55B7E0((uint64_t)this + 184, (uint64_t *)&v59)[1] + 8 * (v34 >> 6)) >> v34) & 1) == 0) {
        LODWORD(v7) = *(_DWORD *)(*((void *)a2 + 4) + 36);
      }
    }
    uint64_t v35 = (void *)*((void *)this + 3);
    *(void *)(v35[3] + 16 * (v7 & 0x7FFFFFFF)) = *(void *)(v35[3] + 16 * (v31 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = (*(uint64_t (**)(void))(**(void **)(*v35 + 16) + 176))(*(void *)(*v35 + 16));
    if ((v31 & 0x80000000) != 0) {
      uint64_t v37 = (uint64_t *)(v35[3] + 16 * (v31 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v37 = (uint64_t *)(v35[34] + 8 * v31);
    }
    uint64_t v38 = *v37;
    if (*v37)
    {
      do
      {
        uint64_t v39 = *(void *)(v38 + 24);
        if ((v7 - 1) <= 0x3FFFFFFE) {
          llvm::MachineOperand::substPhysReg((unsigned int *)v38, v7, v36);
        }
        else {
          llvm::MachineOperand::setReg(v38, v7);
        }
        uint64_t v38 = v39;
      }
      while (v39);
    }
    llvm::MachineOperand::setReg(*((void *)a2 + 4), v31);
    unsigned int v40 = *((_DWORD *)this + 96);
    if (v40 >= *((_DWORD *)this + 97)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*((void *)this + 47) + 8 * v40) = a2;
    ++*((_DWORD *)this + 96);
  }
  else
  {
    unsigned int v10 = sub_1CD558FB0((uint64_t *)this, (uint64_t)a2);
    if (v10 != -1)
    {
      unsigned int v11 = v10;
      if (sub_1CD4C612C(*((void *)this + 20), *((_DWORD *)this + 44), *((void *)a2 + 3), &v59))
      {
        uint64_t v58 = *((void *)a2 + 3);
        if (((*(void *)(sub_1CD55B7E0((uint64_t)this + 160, &v58)[1] + 8 * (v11 >> 6)) >> v11) & 1) == 0)
        {
          uint64_t v12 = *((void *)a2 + 4);
          uint64_t v13 = *((void *)a2 + 2);
          unsigned int v14 = *(unsigned __int8 *)(v13 + 4);
          if ((*(unsigned char *)(v13 + 8) & 2) == 0 || (int v54 = *((_DWORD *)a2 + 10), v54 == v14))
          {
            unsigned int v15 = v14;
          }
          else
          {
            int v55 = v54 - 1;
            unsigned int v15 = v14;
            do
            {
              int v56 = *(_DWORD *)(v12 + 32 * v14);
              if ((v56 & 0x10000FF) != 0x1000000) {
                break;
              }
              v15 += (v56 & 0x2000000) == 0;
              if (v55 == v14) {
                break;
              }
              ++v14;
            }
            while ((v56 & 0x2000000) == 0);
          }
          if (v15)
          {
            uint64_t v16 = v12 + 32 * v15;
            do
            {
              unsigned int v59 = v61;
              uint64_t v60 = 0x400000000;
              uint64_t v17 = *((void *)this + 3);
              uint64_t v18 = *(unsigned int *)(v12 + 4);
              if ((v18 & 0x80000000) != 0) {
                unsigned int v19 = (uint64_t *)(*(void *)(v17 + 24) + 16 * (v18 & 0x7FFFFFFF) + 8);
              }
              else {
                unsigned int v19 = (uint64_t *)(*(void *)(v17 + 272) + 8 * v18);
              }
              uint64_t v20 = *v19;
              if (*v19)
              {
                while ((*(unsigned char *)(v20 + 3) & 1) != 0)
                {
                  uint64_t v20 = *(void *)(v20 + 24);
                  if (!v20) {
                    goto LABEL_32;
                  }
                }
                uint64_t v21 = *(void *)(v20 + 8);
LABEL_22:
                EquivalentRegisterIunsigned int n = llvm::PeelingModuloScheduleExpander::getEquivalentRegisterIn((uint64_t)this, *(_DWORD *)(*(void *)(v21 + 32) + 4), *((void *)a2 + 3));
                sub_1CC3C6E9C((uint64_t)&v59, v21, EquivalentRegisterIn);
                uint64_t v23 = *(void *)(v20 + 8);
                while (1)
                {
                  uint64_t v20 = *(void *)(v20 + 24);
                  if (!v20) {
                    break;
                  }
                  if ((*(unsigned char *)(v20 + 3) & 1) == 0)
                  {
                    uint64_t v21 = *(void *)(v20 + 8);
                    if (v21 != v23) {
                      goto LABEL_22;
                    }
                  }
                }
                uint64_t v24 = (char *)v59;
                int32x2_t v25 = (char *)v59 + 16 * v60;
                if (v60)
                {
                  do
                  {
                    uint64_t v26 = *(void *)v24;
                    int v27 = *(_DWORD *)(v12 + 4);
                    unsigned int v28 = *((_DWORD *)v24 + 2);
                    uint64_t v29 = *(void *)(**((void **)this + 3) + 16);
                    int v30 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v29 + 176))(v29);
                    llvm::MachineInstr::substituteRegister(v26, v27, v28, 0, v30);
                    v24 += 16;
                  }
                  while (v24 != v25);
                  uint64_t v24 = (char *)v59;
                }
                if (v24 != (char *)v61) {
                  free(v24);
                }
              }
LABEL_32:
              v12 += 32;
            }
            while (v12 != v16);
          }
          uint64_t v45 = *((void *)this + 5);
          if (!v45) {
            goto LABEL_84;
          }
          unsigned int v46 = *(int32x2_t **)(v45 + 288);
          int32x2_t v47 = v46[46];
          uint64_t v48 = v46[48].u32[0];
          if (v48)
          {
            LODWORD(v49) = (v48 - 1) & ((a2 >> 4) ^ (a2 >> 9));
            uint64_t v50 = *(void *)&v47 + 16 * v49;
            int v51 = *(llvm::MachineInstr **)v50;
            if (*(llvm::MachineInstr **)v50 == a2) {
              goto LABEL_82;
            }
            int v52 = 1;
            while (v51 != (llvm::MachineInstr *)-4096)
            {
              int v53 = v49 + v52++;
              uint64_t v49 = v53 & (v48 - 1);
              int v51 = *(llvm::MachineInstr **)(*(void *)&v47 + 16 * v49);
              if (v51 == a2)
              {
                uint64_t v50 = *(void *)&v47 + 16 * v49;
                goto LABEL_82;
              }
            }
          }
          uint64_t v50 = *(void *)&v47 + 16 * v48;
LABEL_82:
          if (v50 != *(void *)&v47 + 16 * v48)
          {
            unint64_t v57 = *(void *)(v50 + 8) & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v50 = -8192;
            v46[47] = vadd_s32(v46[47], (int32x2_t)0x1FFFFFFFFLL);
            *(void *)(v57 + 16) = 0;
          }
LABEL_84:
          llvm::MachineInstr::eraseFromParent(a2);
        }
      }
    }
  }
}

void llvm::PeelingModuloScheduleExpander::rewriteKernel(llvm::PeelingModuloScheduleExpander *this)
{
  sub_1CC3C77A8(v1, **(void **)this, *(void *)this, *((void *)this + 6));
}

void sub_1CC3C77A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a3;
  a1[1] = a4;
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
}

void sub_1CC3C7860(uint64_t a1)
{
  v166[4] = *MEMORY[0x1E4F143B8];
  unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(*(llvm::MachineBasicBlock **)(a1 + 8));
  uint64_t v3 = *(uint64_t **)(*(void *)a1 + 8);
  int v4 = *(uint64_t **)(*(void *)a1 + 16);
  if (v4 == v3)
  {
    uint64_t v6 = 0;
  }
  else
  {
    int v5 = (void *)FirstTerminator;
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v3;
      if (**(_WORD **)(*v3 + 16) && **(_WORD **)(*v3 + 16) != 69)
      {
        uint64_t v8 = *(void *)(v7 + 24);
        if (v8)
        {
          llvm::ilist_traits<llvm::MachineInstr>::removeNodeFromList(v8 + 40, *v3);
          uint64_t v9 = *(unint64_t **)(v7 + 8);
          unint64_t v10 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
          *uint64_t v9 = v10 | *v9 & 7;
          *(void *)(v10 + 8) = v9;
          *(void *)v7 &= 7uLL;
          *(void *)(v7 + 8) = 0;
        }
        uint64_t v11 = *(void *)(*(void *)(a1 + 8) + 40);
        *(void *)(v7 + 24) = v11;
        uint64_t v12 = *(void *)(v11 + 32);
        uint64_t v13 = *(unsigned int *)(v7 + 40);
        if (v13)
        {
          uint64_t v16 = *(void *)(v7 + 32);
          uint64_t v17 = *(void *)(v12 + 40);
          uint64_t v18 = 32 * v13;
          do
          {
            if (!*(unsigned char *)v16)
            {
              uint64_t v19 = *(unsigned int *)(v16 + 4);
              if ((int)v19 >= 0) {
                uint64_t v20 = (uint64_t *)(*(void *)(v17 + 272) + 8 * v19);
              }
              else {
                uint64_t v20 = (uint64_t *)(*(void *)(v17 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
              }
              uint64_t v21 = *v20;
              if (*v20)
              {
                uint64_t v22 = *(void *)(v21 + 16);
                *(void *)(v21 + 16) = v16;
                *(void *)(v16 + 16) = v22;
                if (*(unsigned char *)(v16 + 3))
                {
                  *(void *)(v16 + 24) = v21;
                }
                else
                {
                  *(void *)(v16 + 24) = 0;
                  uint64_t v20 = (uint64_t *)(v22 + 24);
                }
              }
              else
              {
                *(void *)(v16 + 16) = v16;
                *(void *)(v16 + 24) = 0;
              }
              *uint64_t v20 = v16;
            }
            v16 += 32;
            v18 -= 32;
          }
          while (v18);
        }
        uint64_t v14 = *(void *)(v12 + 728);
        if (v14) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 24))(v14, v7);
        }
        unint64_t v15 = *v5 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v7 = v15 | *(void *)v7 & 7;
        *(void *)(v7 + 8) = v5;
        *(void *)(v15 + 8) = v7;
        *int v5 = *v5 & 7 | v7;
        if (!v6) {
          uint64_t v6 = (llvm::MachineInstr *)v7;
        }
      }
      ++v3;
    }
    while (v3 != v4);
  }
  uint64_t v23 = *(void *)(a1 + 8);
  uint64_t v24 = (llvm::MachineInstr *)(v23 + 48);
  for (uint64_t i = *(void *)(v23 + 56); (llvm::MachineInstr *)i != v24; uint64_t i = *(void *)(i + 8))
  {
    if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
    {
      uint64_t v24 = (llvm::MachineInstr *)i;
      break;
    }
  }
  if (v6 == v24) {
    goto LABEL_52;
  }
  do
  {
    uint64_t v26 = *(void *)(a1 + 48);
    if (!v26) {
      goto LABEL_45;
    }
    int v27 = *(int32x2_t **)(v26 + 288);
    int32x2_t v28 = v27[46];
    uint64_t v29 = v27[48].u32[0];
    if (v29)
    {
      LODWORD(v30) = (v29 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      uint64_t v31 = (llvm::MachineInstr **)(*(void *)&v28 + 16 * v30);
      uint64_t v32 = *v31;
      if (*v31 == v24) {
        goto LABEL_43;
      }
      int v33 = 1;
      while (v32 != (llvm::MachineInstr *)-4096)
      {
        int v34 = v30 + v33++;
        uint64_t v30 = v34 & (v29 - 1);
        uint64_t v32 = *(llvm::MachineInstr **)(*(void *)&v28 + 16 * v30);
        if (v32 == v24)
        {
          uint64_t v31 = (llvm::MachineInstr **)(*(void *)&v28 + 16 * v30);
          goto LABEL_43;
        }
      }
    }
    uint64_t v31 = (llvm::MachineInstr **)(*(void *)&v28 + 16 * v29);
LABEL_43:
    if (v31 != (llvm::MachineInstr **)(*(void *)&v28 + 16 * v29))
    {
      unint64_t v35 = (unint64_t)v31[1] & 0xFFFFFFFFFFFFFFF8;
      *uint64_t v31 = (llvm::MachineInstr *)-8192;
      v27[47] = vadd_s32(v27[47], (int32x2_t)0x1FFFFFFFFLL);
      *(void *)(v35 + 16) = 0;
    }
LABEL_45:
    if (!v24 || (uint64_t v36 = v24, (*(unsigned char *)v24 & 4) == 0))
    {
      uint64_t v36 = v24;
      if ((*((_WORD *)v24 + 22) & 8) != 0)
      {
        uint64_t v36 = v24;
        do
          uint64_t v36 = (llvm::MachineInstr *)*((void *)v36 + 1);
        while ((*((_WORD *)v36 + 22) & 8) != 0);
      }
    }
    uint64_t v37 = (llvm::MachineInstr *)*((void *)v36 + 1);
    llvm::MachineInstr::eraseFromParent(v24);
    uint64_t v24 = v37;
  }
  while (v37 != v6);
  uint64_t v23 = *(void *)(a1 + 8);
LABEL_52:
  uint64_t v38 = v23 + 48;
  uint64_t v39 = *(void *)(v23 + 56);
  if (v39 != v23 + 48)
  {
    while (2)
    {
      uint64_t v40 = *(void *)(v39 + 16);
      if (!*(_WORD *)v40 || *(_WORD *)v40 == 69)
      {
LABEL_237:
        if ((*(unsigned char *)v39 & 4) == 0) {
          goto LABEL_240;
        }
        goto LABEL_241;
      }
      uint64_t v41 = *(void *)(v40 + 8);
      if ((*(_WORD *)(v39 + 44) & 0xC) != 0 && (*(_WORD *)(v39 + 44) & 4) == 0)
      {
        uint64_t v130 = v39;
        if ((v41 & 0x200) != 0) {
          goto LABEL_237;
        }
        while ((*(_WORD *)(v130 + 44) & 8) != 0)
        {
          uint64_t v130 = *(void *)(v130 + 8);
          if ((*(unsigned char *)(*(void *)(v130 + 16) + 9) & 2) != 0) {
            goto LABEL_237;
          }
        }
      }
      else if ((v41 & 0x200) != 0)
      {
        goto LABEL_237;
      }
      uint64_t v43 = *(void *)(v39 + 32);
      unsigned int v44 = *(unsigned __int8 *)(v40 + 4);
      uint64_t v45 = *(unsigned int *)(v39 + 40);
      if ((v41 & 2) != 0)
      {
        if (v45 == v44) {
          goto LABEL_237;
        }
        unsigned int v46 = v44;
        do
        {
          int v131 = *(_DWORD *)(v43 + 32 * v44);
          if ((v131 & 0x10000FF) != 0x1000000) {
            break;
          }
          v46 += (v131 & 0x2000000) == 0;
          if (v45 - 1 == v44) {
            break;
          }
          ++v44;
        }
        while ((v131 & 0x2000000) == 0);
      }
      else
      {
        unsigned int v46 = v44;
      }
      if (v46 == v45) {
        goto LABEL_237;
      }
      int32x2_t v47 = (_DWORD *)(v43 + 32 * v45);
      uint64_t v48 = (_DWORD *)(v43 + 32 * v46);
LABEL_64:
      if (*v48) {
        goto LABEL_72;
      }
      if ((*v48 & 0x2000000) != 0) {
        goto LABEL_72;
      }
      uint64_t v49 = v48[1];
      if ((v49 - 1) < 0x3FFFFFFF) {
        goto LABEL_72;
      }
      uint64_t v50 = *(void *)(a1 + 32);
      if ((v49 & 0x80000000) != 0) {
        int v51 = (uint64_t *)(*(void *)(v50 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
      }
      else {
        int v51 = (uint64_t *)(*(void *)(v50 + 272) + 8 * v49);
      }
      uint64_t v52 = *v51;
      if (!v52) {
        goto LABEL_71;
      }
      if ((*(unsigned char *)(v52 + 3) & 1) == 0)
      {
        uint64_t v59 = *(void *)(v52 + 24);
        if (!v59 || (*(unsigned char *)(v59 + 3) & 1) == 0) {
          goto LABEL_71;
        }
      }
      if ((v49 & 0x80000000) != 0) {
        int v53 = (uint64_t *)(*(void *)(v50 + 24) + 16 * (v49 & 0x7FFFFFFF) + 8);
      }
      else {
        int v53 = (uint64_t *)(*(void *)(v50 + 272) + 8 * v49);
      }
      uint64_t v54 = *v53;
      if (v54)
      {
        if ((*(unsigned char *)(v54 + 3) & 1) == 0)
        {
          uint64_t v54 = *(void *)(v54 + 24);
          if (v54)
          {
            if ((*(unsigned char *)(v54 + 3) & 1) == 0) {
              uint64_t v54 = 0;
            }
          }
        }
      }
      uint64_t v55 = *(void *)(v54 + 8);
      while (1)
      {
        uint64_t v54 = *(void *)(v54 + 24);
        if (!v54 || (*(unsigned char *)(v54 + 3) & 1) == 0) {
          break;
        }
        if (*(void *)(v54 + 8) != v55) {
          goto LABEL_71;
        }
      }
      if (!v55) {
        goto LABEL_71;
      }
      uint64_t v56 = *(void *)a1;
      unint64_t v57 = (uint64_t *)(*(void *)a1 + 56);
      *(void *)&long long v161 = v39;
      std::string __dst = 0;
      if (sub_1CD3C8538(v57, &v161, &__dst)) {
        BOOL v58 = __dst == (void *)(*(void *)(v56 + 56) + 16 * *(unsigned int *)(v56 + 72));
      }
      else {
        BOOL v58 = 1;
      }
      if (v58) {
        int v60 = -1;
      }
      else {
        int v60 = *((_DWORD *)__dst + 2);
      }
      int v61 = **(unsigned __int16 **)(v55 + 16);
      if (**(_WORD **)(v55 + 16) && v61 != 69)
      {
        if (*(void *)(v55 + 24) == *(void *)(a1 + 8))
        {
          int v155 = v60;
          uint64_t v62 = *(void *)a1;
          int v63 = (uint64_t *)(*(void *)a1 + 56);
          *(void *)&long long v161 = v55;
          std::string __dst = 0;
          int v64 = sub_1CD3C8538(v63, &v161, &__dst);
          int v65 = -1;
          if (v64 && __dst != (void *)(*(void *)(v62 + 56) + 16 * *(unsigned int *)(v62 + 72))) {
            int v65 = *((_DWORD *)__dst + 2);
          }
          int v66 = v155 - v65;
          if (v155 != v65)
          {
            do
            {
              LODWORD(v49) = sub_1CC3C98A0(a1, v49, 0, 0);
              --v66;
            }
            while (v66);
          }
        }
        goto LABEL_71;
      }
      int v156 = v60;
      std::string __dst = v166;
      uint64_t v165 = 0x400000000;
      unsigned int v67 = v49;
      while ((unsigned __int16)v61 == 69 || (unsigned __int16)v61 == 0)
      {
        uint64_t v69 = *(void *)(v55 + 24);
        if (v69 != *(void *)(a1 + 8)) {
          break;
        }
        int v70 = *(_DWORD *)(v55 + 40);
        if (v70 == 1)
        {
          unsigned int v67 = 0;
LABEL_120:
          unsigned int v74 = 0;
        }
        else
        {
          uint64_t v71 = *(void *)(v55 + 32);
          unsigned int v72 = 1;
          while (*(void *)(v71 + 32 * (v72 + 1) + 16) != v69)
          {
            v72 += 2;
            if (v70 == v72)
            {
              unsigned int v67 = 0;
              goto LABEL_117;
            }
          }
          unsigned int v67 = *(_DWORD *)(v71 + 32 * v72 + 4);
LABEL_117:
          unsigned int v73 = 1;
          while (*(void *)(v71 + 32 * (v73 + 1) + 16) == v69)
          {
            v73 += 2;
            if (v70 == v73) {
              goto LABEL_120;
            }
          }
          unsigned int v74 = *(_DWORD *)(v71 + 32 * v73 + 4);
        }
        if (v165 >= HIDWORD(v165))
        {
          sub_1CD55AE7C((uint64_t)&__dst, v74);
        }
        else
        {
          BOOL v75 = (char *)__dst + 8 * v165;
          *(_DWORD *)BOOL v75 = v74;
          v75[4] = 1;
          LODWORD(v165) = v165 + 1;
        }
        uint64_t v76 = *(void *)(a1 + 32);
        if ((v67 & 0x80000000) != 0) {
          uint64_t v77 = (uint64_t *)(*(void *)(v76 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v77 = (uint64_t *)(*(void *)(v76 + 272) + 8 * v67);
        }
        uint64_t v78 = *v77;
        if (v78
          && ((*(unsigned char *)(v78 + 3) & 1) != 0 || (uint64_t v82 = *(void *)(v78 + 24)) != 0 && (*(unsigned char *)(v82 + 3) & 1) != 0))
        {
          if ((v67 & 0x80000000) != 0) {
            uint64_t v79 = (uint64_t *)(*(void *)(v76 + 24) + 16 * (v67 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v79 = (uint64_t *)(*(void *)(v76 + 272) + 8 * v67);
          }
          uint64_t v80 = *v79;
          if (v80)
          {
            if ((*(unsigned char *)(v80 + 3) & 1) == 0)
            {
              uint64_t v80 = *(void *)(v80 + 24);
              if (v80)
              {
                if ((*(unsigned char *)(v80 + 3) & 1) == 0) {
                  uint64_t v80 = 0;
                }
              }
            }
          }
          uint64_t v81 = *(void *)(v80 + 8);
          while (1)
          {
            uint64_t v80 = *(void *)(v80 + 24);
            if (!v80 || (*(unsigned char *)(v80 + 3) & 1) == 0) {
              break;
            }
            uint64_t v55 = 0;
            if (*(void *)(v80 + 8) != v81) {
              goto LABEL_129;
            }
          }
          uint64_t v55 = v81;
        }
        else
        {
          uint64_t v55 = 0;
        }
LABEL_129:
        LOWORD(v61) = **(_WORD **)(v55 + 16);
      }
      uint64_t v83 = *(void *)a1;
      uint64_t v84 = (uint64_t *)(*(void *)a1 + 56);
      uint64_t v160 = (unsigned __int8 *)v55;
      *(void *)&long long v161 = 0;
      if (sub_1CD3C8538(v84, &v160, &v161)) {
        BOOL v85 = (void)v161 == *(void *)(v83 + 56) + 16 * *(unsigned int *)(v83 + 72);
      }
      else {
        BOOL v85 = 1;
      }
      if (v85)
      {
        int v86 = -1;
      }
      else
      {
        int v86 = *(_DWORD *)(v161 + 8);
        if (v86 != -1)
        {
          uint64_t v87 = (v156 - v86);
          int v153 = *(_DWORD *)(v161 + 8);
          if (v156 < v86)
          {
            int v157 = *((unsigned __int8 *)__dst + 4);
            int v88 = *(_DWORD *)__dst;
            int v89 = v165;
            if (v165 != 1)
            {
              memmove(__dst, (char *)__dst + 8, 8 * v165 - 8);
              int v89 = v165;
            }
            unsigned int v90 = v89 - 1;
            LODWORD(v165) = v90;
            LODWORD(v154) = v88;
            HIDWORD(v154) = v88 & 0xFFFFFF00;
LABEL_163:
            if (v90)
            {
              unsigned int v91 = (char *)__dst + 8 * v90;
              do
              {
                uint64_t v92 = *((void *)v91 - 1);
                v91 -= 8;
                unsigned int v67 = sub_1CC3C98A0(a1, v67, v92, *(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 16 * (v49 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
              }
              while (v91 != __dst);
            }
            if (!v157)
            {
              LODWORD(v49) = v67;
LABEL_168:
              if (__dst != v166) {
                free(__dst);
              }
LABEL_71:
              llvm::MachineOperand::setReg((uint64_t)v48, v49);
LABEL_72:
              v48 += 8;
              if (v48 == v47)
              {
                if (v39) {
                  goto LABEL_237;
                }
LABEL_240:
                while ((*(_WORD *)(v39 + 44) & 8) != 0)
                  uint64_t v39 = *(void *)(v39 + 8);
LABEL_241:
                uint64_t v39 = *(void *)(v39 + 8);
                if (v39 == v38)
                {
                  uint64_t v23 = *(void *)(a1 + 8);
                  goto LABEL_249;
                }
                continue;
              }
              goto LABEL_64;
            }
            uint64_t v94 = *(void *)(a1 + 32);
            unint64_t v95 = *(void *)(*(void *)(v94 + 24) + 16 * (v49 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v96 = v94;
            LODWORD(v49) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v94, "", 0);
            int v97 = v49;
            *(void *)(*(void *)(v96 + 24) + 16 * (v49 & 0x7FFFFFFF)) = v95;
            uint64_t v98 = *(void *)(v96 + 8);
            if (v98)
            {
              (*(void (**)(uint64_t, void))(*(void *)v98 + 24))(v98, v49);
              int v97 = v49;
            }
            uint64_t v99 = *(void *)(a1 + 8);
            uint64_t v159 = 0;
            uint64_t v100 = *(void *)(*(void *)(a1 + 40) + 8);
            if ((*(_WORD *)(v39 + 44) & 4) != 0)
            {
              uint64_t v158 = sub_1CD3C8EB4(v99, v39, &v159, v100, v97);
              unsigned int v152 = v125;
            }
            else
            {
              BOOL v101 = *(llvm::MachineFunction **)(v99 + 32);
              uint64_t v160 = 0;
              uint64_t v158 = v101;
              uint64_t v102 = llvm::MachineFunction::CreateMachineInstr(v101, v100, &v160, 0);
              unsigned int v152 = v102;
              if (!v160) {
                goto LABEL_178;
              }
              int v126 = *v160;
              if ((v126 - 4) > 0x1E)
              {
                if ((v126 - 3) >= 0xFFFFFFFE) {
                  unsigned int v129 = v160;
                }
                else {
                  unsigned int v129 = 0;
                }
                if ((v126 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v128 = (unint64_t)(v129 + 8);
                  goto LABEL_229;
                }
                if (v126 == 3) {
                  *((void *)v160 + 1) = 0;
                }
              }
              else if ((v160[1] & 0x7F) == 2 || *((_DWORD *)v160 + 3))
              {
                uint64_t v127 = *((void *)v160 + 2);
                if ((v127 & 4) != 0)
                {
                  unint64_t v128 = v127 & 0xFFFFFFFFFFFFFFF8;
                  if (v128)
                  {
LABEL_229:
                    *(void *)&long long v161 = &v160;
                    sub_1CC5FA668(v128 + 16, &v161);
                    uint64_t v102 = v152;
                  }
                }
              }
LABEL_178:
              uint64_t v103 = *(void *)(v99 + 40);
              *((void *)v102 + 3) = v103;
              uint64_t v104 = *(void *)(v103 + 32);
              uint64_t v105 = *((unsigned int *)v102 + 10);
              unsigned int v106 = v158;
              if (v105)
              {
                uint64_t v116 = *((void *)v102 + 4);
                uint64_t v117 = *(void *)(v104 + 40);
                uint64_t v118 = 32 * v105;
                do
                {
                  int v119 = v102;
                  if (!*(unsigned char *)v116)
                  {
                    uint64_t v120 = *(unsigned int *)(v116 + 4);
                    if ((int)v120 >= 0) {
                      int v121 = (uint64_t *)(*(void *)(v117 + 272) + 8 * v120);
                    }
                    else {
                      int v121 = (uint64_t *)(*(void *)(v117 + 24) + 16 * (v120 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v122 = *v121;
                    if (*v121)
                    {
                      uint64_t v123 = *(void *)(v122 + 16);
                      *(void *)(v122 + 16) = v116;
                      *(void *)(v116 + 16) = v123;
                      if (*(unsigned char *)(v116 + 3))
                      {
                        *(void *)(v116 + 24) = v122;
                      }
                      else
                      {
                        *(void *)(v116 + 24) = 0;
                        int v121 = (uint64_t *)(v123 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v116 + 16) = v116;
                      *(void *)(v116 + 24) = 0;
                    }
                    uint64_t *v121 = v116;
                  }
                  v116 += 32;
                  v118 -= 32;
                  uint64_t v102 = v119;
                  unsigned int v106 = v158;
                }
                while (v118);
              }
              uint64_t v107 = *(void *)(v104 + 728);
              if (v107)
              {
                uint64_t v108 = v102;
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v107 + 24))(v107, v102);
                unsigned int v106 = v158;
                uint64_t v102 = v108;
              }
              unint64_t v109 = *(void *)v39 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v102 = v109 | *(void *)v102 & 7;
              *((void *)v102 + 1) = v39;
              *(void *)(v109 + 8) = v102;
              *(void *)uint64_t v39 = *(void *)v39 & 7 | (unint64_t)v102;
              *((void *)&v161 + 1) = 0;
              uint64_t v162 = 0;
              uint64_t v163 = 0;
              LODWORD(v161) = 0x1000000;
              DWORD1(v161) = v49;
              llvm::MachineInstr::addOperand(v102, v106, (const llvm::MachineOperand *)&v161);
            }
            HIDWORD(v161) = 0;
            LODWORD(v161) = 0;
            *(void *)((char *)&v161 + 4) = HIDWORD(v154) | v154;
            uint64_t v162 = 0;
            uint64_t v163 = 0;
            llvm::MachineInstr::addOperand(v152, v158, (const llvm::MachineOperand *)&v161);
            uint64_t v110 = *(void *)(a1 + 16);
            *((void *)&v161 + 1) = 0;
            uint64_t v162 = v110;
            LODWORD(v161) = 4;
            llvm::MachineInstr::addOperand(v152, v158, (const llvm::MachineOperand *)&v161);
            *((void *)&v161 + 1) = 0;
            LODWORD(v161) = 0;
            DWORD1(v161) = v67;
            uint64_t v162 = 0;
            uint64_t v163 = 0;
            llvm::MachineInstr::addOperand(v152, v158, (const llvm::MachineOperand *)&v161);
            uint64_t v111 = *(void *)(a1 + 8);
            *((void *)&v161 + 1) = 0;
            uint64_t v162 = v111;
            LODWORD(v161) = 4;
            llvm::MachineInstr::addOperand(v152, v158, (const llvm::MachineOperand *)&v161);
            if (v159)
            {
              int v112 = *v159;
              if ((v112 - 4) > 0x1E)
              {
                if ((v112 - 3) >= 0xFFFFFFFE) {
                  uint64_t v114 = v159;
                }
                else {
                  uint64_t v114 = 0;
                }
                if ((v112 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v115 = (unint64_t)(v114 + 8);
                  goto LABEL_192;
                }
                if (v112 == 3) {
                  *((void *)v159 + 1) = 0;
                }
              }
              else if ((v159[1] & 0x7F) == 2 || *((_DWORD *)v159 + 3))
              {
                uint64_t v124 = *((void *)v159 + 2);
                if ((v124 & 4) != 0)
                {
                  unint64_t v115 = v124 & 0xFFFFFFFFFFFFFFF8;
                  if (v115)
                  {
LABEL_192:
                    *(void *)&long long v161 = &v159;
                    sub_1CC5FA668(v115 + 16, &v161);
                  }
                }
              }
            }
            uint64_t v113 = *(void *)a1;
            *(void *)&long long v161 = v152;
            *((_DWORD *)sub_1CD3CDD24((uint64_t *)(v113 + 56), &v161) + 2) = v153;
            goto LABEL_168;
          }
          if ((int)v87 >= 1)
          {
            if (v165) {
              uint64_t v93 = *((void *)__dst + v165 - 1);
            }
            else {
              uint64_t v93 = 0;
            }
            sub_1CD55AEE4((uint64_t)&__dst, v87, v93);
          }
LABEL_162:
          int v157 = 0;
          uint64_t v154 = 0;
          unsigned int v90 = v165;
          goto LABEL_163;
        }
      }
      break;
    }
    int v153 = v86;
    goto LABEL_162;
  }
LABEL_249:
  sub_1CC3C6F20(v23, *(void **)(a1 + 32), *(void *)(a1 + 48), 0);
  uint64_t v132 = *(void *)(a1 + 8);
  uint64_t v133 = v132 + 48;
  for (uint64_t j = *(void *)(v132 + 56); ; uint64_t j = *(void *)(j + 8))
  {
    if (j == v133) {
      return;
    }
    if (**(_WORD **)(j + 16) && **(_WORD **)(j + 16) != 69) {
      break;
    }
  }
  if (v133 != j)
  {
    while (2)
    {
      int v135 = *(unsigned __int16 **)(j + 16);
      int v136 = *v135;
      if (v136 == 69 || v136 == 0)
      {
        sub_1CC3C98A0(a1, *(_DWORD *)(*(void *)(j + 32) + 4), 0, 0);
      }
      else
      {
        uint64_t v138 = *(void *)(j + 32);
        unsigned int v139 = *((unsigned __int8 *)v135 + 4);
        if ((v135[4] & 2) == 0 || (int v149 = *(_DWORD *)(j + 40), v149 == v139))
        {
          unsigned int v140 = v139;
        }
        else
        {
          int v150 = v149 - 1;
          unsigned int v140 = v139;
          do
          {
            int v151 = *(_DWORD *)(v138 + 32 * v139);
            if ((v151 & 0x10000FF) != 0x1000000) {
              break;
            }
            v140 += (v151 & 0x2000000) == 0;
            if (v150 == v139) {
              break;
            }
            ++v139;
          }
          while ((v151 & 0x2000000) == 0);
        }
        if (v140)
        {
          uint64_t v141 = v138 + 32 * v140;
          do
          {
            uint64_t v142 = *(void *)(a1 + 32);
            uint64_t v143 = *(unsigned int *)(v138 + 4);
            if ((v143 & 0x80000000) != 0) {
              int v144 = (uint64_t *)(*(void *)(v142 + 24) + 16 * (v143 & 0x7FFFFFFF) + 8);
            }
            else {
              int v144 = (uint64_t *)(*(void *)(v142 + 272) + 8 * v143);
            }
            uint64_t v145 = *v144;
            if (v145)
            {
              while ((*(unsigned char *)(v145 + 3) & 1) != 0)
              {
                uint64_t v145 = *(void *)(v145 + 24);
                if (!v145) {
                  goto LABEL_275;
                }
              }
              uint64_t v146 = *(void *)(a1 + 8);
              uint64_t v147 = *(void *)(v145 + 8);
              if (*(void *)(v147 + 24) == v146)
              {
                while (1)
                {
                  uint64_t v145 = *(void *)(v145 + 24);
                  if (!v145) {
                    break;
                  }
                  if ((*(unsigned char *)(v145 + 3) & 1) == 0)
                  {
                    uint64_t v148 = *(void *)(v145 + 8);
                    if (v148 != v147)
                    {
                      uint64_t v147 = *(void *)(v145 + 8);
                      if (*(void *)(v148 + 24) != v146) {
                        goto LABEL_274;
                      }
                    }
                  }
                }
              }
              else
              {
LABEL_274:
                sub_1CC3C98A0(a1, v143, 0, 0);
              }
            }
LABEL_275:
            v138 += 32;
          }
          while (v138 != v141);
          if (!j)
          {
LABEL_286:
            while ((*(_WORD *)(j + 44) & 8) != 0)
              uint64_t j = *(void *)(j + 8);
            goto LABEL_287;
          }
        }
      }
      if ((*(unsigned char *)j & 4) == 0) {
        goto LABEL_286;
      }
LABEL_287:
      uint64_t j = *(void *)(j + 8);
      if (j == *(void *)(a1 + 8) + 48) {
        return;
      }
      continue;
    }
  }
}

void *sub_1CC3C873C(void *a1)
{
  return a1;
}

void llvm::PeelingModuloScheduleExpander::validateAgainstModuloScheduleExpander(llvm::PeelingModuloScheduleExpander *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *((void *)this + 6) = llvm::MachineLoop::getTopBlock(**(llvm::MachineLoop ***)this);
  llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
}

uint64_t sub_1CC3C922C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x400000000;
  *(void *)(a1 + 48) = a2;
  *(void *)a1 = *(void *)(*((void *)a2 + 1) + 24);
  unsigned int v5 = *a2;
  while (!*a2)
  {
    int v7 = *((_DWORD *)a2 + 1);
    if ((v7 & 0x80000000) == 0) {
      break;
    }
    uint64_t v8 = v7 & 0x7FFFFFFF;
    uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 8) + 24) + 16 * v8 + 8);
    if ((*(unsigned char *)(v9 + 3) & 1) == 0) {
      uint64_t v9 = *(void *)(v9 + 24);
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 8) + 24);
    if (v10 != *(void *)a1) {
      break;
    }
    uint64_t v11 = *(void *)(*(void *)(a3 + 24) + 16 * v8 + 8);
    if (v11)
    {
      if ((*(unsigned char *)(v11 + 3) & 1) == 0)
      {
        uint64_t v11 = *(void *)(v11 + 24);
        if (!v11) {
          goto LABEL_10;
        }
        if ((*(unsigned char *)(v11 + 3) & 1) == 0)
        {
          uint64_t v11 = 0;
          goto LABEL_10;
        }
      }
      uint64_t v11 = *(void *)(v11 + 8);
    }
LABEL_10:
    int v12 = **(unsigned __int16 **)(v11 + 16);
    if (!**(_WORD **)(v11 + 16) || v12 == 69)
    {
      uint64_t v17 = *a4;
      uint64_t v16 = a4[1];
      if (v16 == *a4)
      {
        uint64_t v18 = *((unsigned int *)a4 + 5);
        uint64_t v19 = (void *)(v16 + 8 * v18);
        if (v18)
        {
          uint64_t v20 = 0;
          while (*(void *)(v16 + v20) != v11)
          {
            v20 += 8;
            if (8 * v18 == v20) {
              goto LABEL_35;
            }
          }
          uint64_t v19 = (void *)(v16 + v20);
        }
LABEL_35:
        uint64_t v17 = a4[1];
      }
      else
      {
        uint64_t v21 = *((unsigned int *)a4 + 4);
        int v22 = v21 - 1;
        unsigned int v23 = (v21 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        uint64_t v19 = (void *)(v16 + 8 * v23);
        uint64_t v24 = *v19;
        if (*v19 == -1)
        {
          int32x2_t v25 = 0;
LABEL_55:
          if (v25) {
            uint64_t v19 = v25;
          }
          LODWORD(v18) = *((_DWORD *)a4 + 5);
          unint64_t v35 = (void *)(v16 + 8 * v21);
          if (*v19 != v11) {
            uint64_t v19 = v35;
          }
        }
        else
        {
          int32x2_t v25 = 0;
          int v26 = 1;
          while (v24 != v11)
          {
            if (v25) {
              BOOL v27 = 0;
            }
            else {
              BOOL v27 = v24 == -2;
            }
            if (v27) {
              int32x2_t v25 = v19;
            }
            unsigned int v28 = v23 + v26++;
            unsigned int v23 = v28 & v22;
            uint64_t v19 = (void *)(v16 + 8 * (v28 & v22));
            uint64_t v24 = *v19;
            if (*v19 == -1) {
              goto LABEL_55;
            }
          }
          LODWORD(v18) = *((_DWORD *)a4 + 5);
        }
      }
      if (v16 == v17) {
        unsigned int v29 = v18;
      }
      else {
        unsigned int v29 = *((_DWORD *)a4 + 4);
      }
      if (v19 == (void *)(v16 + 8 * v29))
      {
        int v30 = *(_DWORD *)(v11 + 40);
        uint64_t v31 = *(void *)(v11 + 32);
        if (v30 == 1)
        {
LABEL_45:
          int v33 = 0;
        }
        else
        {
          unsigned int v32 = 1;
          while (*(void *)(v31 + 32 * (v32 + 1) + 16) == v10)
          {
            v32 += 2;
            if (v30 == v32) {
              goto LABEL_45;
            }
          }
          int v33 = *(_DWORD *)(v31 + 32 * v32 + 4);
        }
        if (*(void *)(v31 + 80) == v10) {
          uint64_t v34 = 32;
        }
        else {
          uint64_t v34 = 96;
        }
        if (v5 >= *(_DWORD *)(a1 + 28)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        a2 = (unsigned __int8 *)(v31 + v34);
        *(_DWORD *)(*(void *)(a1 + 16) + 4 * v5) = v33;
        unsigned int v5 = *(_DWORD *)(a1 + 24) + 1;
        *(_DWORD *)(a1 + 24) = v5;
      }
      else
      {
        a2 = (unsigned __int8 *)(*(void *)(v11 + 32) + 96);
      }
    }
    else
    {
      if (v12 != 19) {
        break;
      }
      uint64_t v13 = *(_DWORD **)(v11 + 32);
      if ((*v13 & 0xFFF00) != 0) {
        break;
      }
      int v15 = v13[8];
      uint64_t v14 = (unsigned __int8 *)(v13 + 8);
      if ((v15 & 0xFFF00) != 0) {
        break;
      }
      a2 = v14;
    }
  }
  *(void *)(a1 + 56) = a2;
  return a1;
}

void sub_1CC3C950C(uint64_t a1, llvm::raw_ostream *this)
{
  int v4 = (_DWORD *)*((void *)this + 4);
  if (*((void *)this + 3) - (void)v4 > 6uLL)
  {
    *(_DWORD *)((char *)v4 + 3) = 543584032;
    *int v4 = 543519605;
    *((void *)this + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(this, "use of ", 7uLL);
  }
  llvm::MachineOperand::print(*(llvm::raw_ostream **)(a1 + 48), this, 0, 0, 0);
  uint64_t v5 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v5) > 0xA)
  {
    *(_DWORD *)(v5 + 7) = 677733230;
    *(void *)uint64_t v5 = *(void *)": distance(";
    *((void *)this + 4) += 11;
  }
  else
  {
    llvm::raw_ostream::write(this, ": distance(", 0xBuLL);
  }
  sub_1CD098D14(this, *(unsigned int *)(a1 + 24), 0, 0, 0);
  uint64_t v6 = *((void *)this + 4);
  if ((unint64_t)(*((void *)this + 3) - v6) > 4)
  {
    *(unsigned char *)(v6 + 4) = 32;
    *(_DWORD *)uint64_t v6 = 1852383273;
    *((void *)this + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(this, ") in ", 5uLL);
  }
  int v7 = *(llvm::MachineInstr **)(*(void *)(a1 + 48) + 8);

  llvm::MachineInstr::print(v7, this, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
}

void sub_1CC3C9674(uint64_t a1)
{
}

uint64_t sub_1CC3C971C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v6 = *(void *)(v4 + 8);
      uint64_t v7 = *(void *)(*(void *)(v4 + 24) + 32);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 728);
        if (v8) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v4);
        }
        uint64_t v9 = *(unsigned int *)(v4 + 40);
        if (v9)
        {
          uint64_t v10 = *(void *)(v4 + 32);
          uint64_t v11 = *(void *)(v7 + 40);
          uint64_t v12 = 32 * v9;
          do
          {
            if (!*(unsigned char *)v10)
            {
              uint64_t v13 = *(unsigned int *)(v10 + 4);
              if ((v13 & 0x80000000) != 0) {
                uint64_t v14 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v14 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v13);
              }
              uint64_t v15 = *v14;
              uint64_t v17 = *(void *)(v10 + 16);
              uint64_t v16 = *(void *)(v10 + 24);
              if (v10 != *v14) {
                uint64_t v14 = (uint64_t *)(v17 + 24);
              }
              uint64_t *v14 = v16;
              if (v16) {
                uint64_t v18 = v16;
              }
              else {
                uint64_t v18 = v15;
              }
              *(void *)(v18 + 16) = v17;
              *(void *)(v10 + 16) = 0;
              *(void *)(v10 + 24) = 0;
            }
            v10 += 32;
            v12 -= 32;
          }
          while (v12);
        }
      }
      *(void *)(v4 + 24) = 0;
      uint64_t v19 = *(unint64_t **)(v4 + 8);
      unint64_t v20 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      *uint64_t v19 = v20 | *v19 & 7;
      *(void *)(v20 + 8) = v19;
      *(void *)v4 &= 7uLL;
      *(void *)(v4 + 8) = 0;
      uint64_t v21 = *(void *)(*(void *)a1 + 32);
      int v22 = *(void **)(v4 + 32);
      if (v22)
      {
        uint64_t v23 = *(unsigned __int8 *)(v4 + 47);
        uint64_t v24 = (uint64_t *)(v21 + 232);
        if (*(_DWORD *)(v21 + 240) <= v23) {
          sub_1CC34BDE0(v21 + 232, v23 + 1);
        }
        uint64_t v25 = *v24;
        *int v22 = *(void *)(*v24 + 8 * v23);
        *(void *)(v25 + 8 * v23) = v22;
      }
      *(void *)uint64_t v4 = *(void *)(v21 + 224);
      *(void *)(v21 + 224) = v4;
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t sub_1CC3C98A0(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v84 = a2;
  uint64_t v8 = a1 + 80;
  uint64_t v9 = a3 & 0xFF00000000;
  if ((a3 & 0xFF00000000) != 0)
  {
    int v86 = 0;
    if (sub_1CD55AFB8(*(void *)(a1 + 80), *(_DWORD *)(a1 + 96), a2, a3, &v86)) {
      BOOL v16 = v86 == (unsigned __int8 **)(*(void *)(a1 + 80) + 12 * *(unsigned int *)(a1 + 96));
    }
    else {
      BOOL v16 = 1;
    }
    if (!v16) {
      return *((unsigned int *)v86 + 2);
    }
LABEL_22:
    uint64_t v17 = sub_1CBA84AA4((uint64_t *)(a1 + 104), &v84);
    if ((int *)(*(void *)(a1 + 104) + 8 * *(unsigned int *)(a1 + 120)) != v17)
    {
      uint64_t v18 = v17;
      uint64_t IncompleteVirtualRegister = v17[1];
      if (v9)
      {
        uint64_t v19 = *(void *)(a1 + 32);
        if ((IncompleteVirtualRegister & 0x80000000) != 0) {
          unint64_t v20 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF) + 8);
        }
        else {
          unint64_t v20 = (uint64_t *)(*(void *)(v19 + 272) + 8 * IncompleteVirtualRegister);
        }
        uint64_t v21 = *v20;
        if ((*(unsigned char *)(v21 + 3) & 1) == 0) {
          uint64_t v21 = *(void *)(v21 + 24);
        }
        llvm::MachineOperand::setReg(*(void *)(*(void *)(v21 + 8) + 32) + 32, a3);
        uint64_t v82 = (unsigned __int8 *)(v84 | (unint64_t)(a3 << 32));
        int v83 = IncompleteVirtualRegister;
        sub_1CD55B0A4((uint64_t)&v86, v8, (int *)&v82, &v83);
        sub_1CC38D61C(*(void **)(a1 + 32), IncompleteVirtualRegister, *(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
        *uint64_t v18 = -2;
        *(int32x2_t *)(a1 + 112) = vadd_s32(*(int32x2_t *)(a1 + 112), (int32x2_t)0x1FFFFFFFFLL);
      }
      return IncompleteVirtualRegister;
    }
    uint64_t v24 = *(void *)(a1 + 32);
    if (!a4) {
      a4 = *(void *)(*(void *)(v24 + 24) + 16 * (v84 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(*(void *)(a1 + 32), "", 0);
    uint64_t v79 = (llvm::MachineFunction *)(a4 & 0xFFFFFFFFFFFFFFFBLL);
    *(void *)(*(void *)(v24 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = a4 & 0xFFFFFFFFFFFFFFFBLL;
    uint64_t v25 = *(void *)(v24 + 8);
    if (v25)
    {
      (*(void (**)(uint64_t, void))(*(void *)v25 + 24))(v25, IncompleteVirtualRegister);
      if (!v9) {
        goto LABEL_36;
      }
    }
    else if (!v9)
    {
LABEL_36:
      int v26 = *(void **)(a1 + 8);
      BOOL v27 = v26 + 6;
      for (uint64_t i = v26[7]; (unint64_t *)i != v27; uint64_t i = *(void *)(i + 8))
      {
        if (**(_WORD **)(i + 16) && **(_WORD **)(i + 16) != 69)
        {
          BOOL v27 = (unint64_t *)i;
          break;
        }
      }
      uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 8);
      int v30 = (llvm::MachineFunction *)v26[4];
      uint64_t v81 = v30;
      uint64_t v82 = 0;
      uint64_t v31 = llvm::MachineFunction::CreateMachineInstr(v30, v29, &v82, 0);
      if (!v82)
      {
LABEL_43:
        uint64_t v32 = v26[5];
        *((void *)v31 + 3) = v32;
        uint64_t v33 = *(void *)(v32 + 32);
        uint64_t v34 = *((unsigned int *)v31 + 10);
        if (v34)
        {
          uint64_t v55 = *((void *)v31 + 4);
          uint64_t v56 = *(void *)(v33 + 40);
          uint64_t v57 = 32 * v34;
          do
          {
            if (!*(unsigned char *)v55)
            {
              uint64_t v58 = *(unsigned int *)(v55 + 4);
              if ((int)v58 >= 0) {
                uint64_t v59 = (uint64_t *)(*(void *)(v56 + 272) + 8 * v58);
              }
              else {
                uint64_t v59 = (uint64_t *)(*(void *)(v56 + 24) + 16 * (v58 & 0x7FFFFFFF) + 8);
              }
              uint64_t v60 = *v59;
              if (*v59)
              {
                uint64_t v61 = *(void *)(v60 + 16);
                *(void *)(v60 + 16) = v55;
                *(void *)(v55 + 16) = v61;
                if (*(unsigned char *)(v55 + 3))
                {
                  *(void *)(v55 + 24) = v60;
                }
                else
                {
                  *(void *)(v55 + 24) = 0;
                  uint64_t v59 = (uint64_t *)(v61 + 24);
                }
              }
              else
              {
                *(void *)(v55 + 16) = v55;
                *(void *)(v55 + 24) = 0;
              }
              *uint64_t v59 = v55;
            }
            v55 += 32;
            v57 -= 32;
          }
          while (v57);
        }
        uint64_t v35 = *(void *)(v33 + 728);
        if (v35) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v35 + 24))(v35, v31);
        }
        unint64_t v36 = *v27 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v31 = v36 | *(void *)v31 & 7;
        *((void *)v31 + 1) = v27;
        *(void *)(v36 + 8) = v31;
        unint64_t *v27 = *v27 & 7 | (unint64_t)v31;
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        LODWORD(v86) = 0x1000000;
        HIDWORD(v86) = IncompleteVirtualRegister;
        uint64_t v37 = v81;
        llvm::MachineInstr::addOperand(v31, v81, (const llvm::MachineOperand *)&v86);
        int v38 = a3;
        if (v9) {
          goto LABEL_55;
        }
        unint64_t v85 = a4;
        uint64_t v39 = sub_1CD40EB18(a1 + 56, (uint64_t *)&v85);
        int v38 = *((_DWORD *)v39 + 2);
        if (v38) {
          goto LABEL_55;
        }
        uint64_t v40 = v39;
        uint64_t v41 = *(void *)(a1 + 32);
        int v42 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v41, "", 0);
        *(void *)(*(void *)(v41 + 24) + 16 * (v42 & 0x7FFFFFFF)) = v79;
        uint64_t v43 = *(void *)(v41 + 8);
        if (v43) {
          (*(void (**)(uint64_t))(*(void *)v43 + 24))(v43);
        }
        *((_DWORD *)v40 + 2) = v42;
        unsigned int v44 = *(llvm::MachineBasicBlock **)(*(void *)(*(void *)(a1 + 16) + 32) + 328);
        unint64_t FirstTerminator = (void *)llvm::MachineBasicBlock::getFirstTerminator(v44);
        uint64_t v45 = *(void *)(*(void *)(a1 + 40) + 8) + 480;
        int v78 = *((_DWORD *)v40 + 2);
        unsigned int v46 = (llvm::MachineFunction *)*((void *)v44 + 4);
        uint64_t v82 = 0;
        uint64_t v80 = v46;
        int32x2_t v47 = llvm::MachineFunction::CreateMachineInstr(v46, v45, &v82, 0);
        if (v82)
        {
          int v73 = *v82;
          if ((v73 - 4) > 0x1E)
          {
            if ((v73 - 3) >= 0xFFFFFFFE) {
              uint64_t v76 = v82;
            }
            else {
              uint64_t v76 = 0;
            }
            if ((v73 - 3) < 0xFFFFFFFE)
            {
              if (v73 == 3) {
                *((void *)v82 + 1) = 0;
              }
              goto LABEL_51;
            }
            unint64_t v75 = (unint64_t)(v76 + 8);
          }
          else
          {
            if ((v82[1] & 0x7F) != 2 && !*((_DWORD *)v82 + 3)) {
              goto LABEL_51;
            }
            uint64_t v74 = *((void *)v82 + 2);
            if ((v74 & 4) == 0) {
              goto LABEL_51;
            }
            unint64_t v75 = v74 & 0xFFFFFFFFFFFFFFF8;
            if (!v75) {
              goto LABEL_51;
            }
          }
          int v86 = &v82;
          sub_1CC5FA668(v75 + 16, &v86);
        }
LABEL_51:
        uint64_t v48 = *((void *)v44 + 5);
        *((void *)v47 + 3) = v48;
        uint64_t v49 = *(void *)(v48 + 32);
        uint64_t v50 = *((unsigned int *)v47 + 10);
        uint64_t v37 = v81;
        if (v50)
        {
          uint64_t v62 = *((void *)v47 + 4);
          uint64_t v63 = *(void *)(v49 + 40);
          uint64_t v64 = 32 * v50;
          do
          {
            if (!*(unsigned char *)v62)
            {
              uint64_t v65 = *(unsigned int *)(v62 + 4);
              if ((int)v65 >= 0) {
                int v66 = (uint64_t *)(*(void *)(v63 + 272) + 8 * v65);
              }
              else {
                int v66 = (uint64_t *)(*(void *)(v63 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
              }
              uint64_t v67 = *v66;
              if (*v66)
              {
                uint64_t v68 = *(void *)(v67 + 16);
                *(void *)(v67 + 16) = v62;
                *(void *)(v62 + 16) = v68;
                if (*(unsigned char *)(v62 + 3))
                {
                  *(void *)(v62 + 24) = v67;
                }
                else
                {
                  *(void *)(v62 + 24) = 0;
                  int v66 = (uint64_t *)(v68 + 24);
                }
              }
              else
              {
                *(void *)(v62 + 16) = v62;
                *(void *)(v62 + 24) = 0;
              }
              *int v66 = v62;
            }
            v62 += 32;
            v64 -= 32;
          }
          while (v64);
        }
        uint64_t v51 = *(void *)(v49 + 728);
        if (v51) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v51 + 24))(v51, v47);
        }
        unint64_t v52 = *FirstTerminator & 0xFFFFFFFFFFFFFFF8;
        *(void *)int32x2_t v47 = v52 | *(void *)v47 & 7;
        *((void *)v47 + 1) = FirstTerminator;
        *(void *)(v52 + 8) = v47;
        *unint64_t FirstTerminator = *FirstTerminator & 7 | (unint64_t)v47;
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        LODWORD(v86) = 0x1000000;
        HIDWORD(v86) = v78;
        llvm::MachineInstr::addOperand(v47, v80, (const llvm::MachineOperand *)&v86);
        int v38 = *((_DWORD *)v40 + 2);
LABEL_55:
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        LODWORD(v86) = 0;
        HIDWORD(v86) = v38;
        uint64_t v89 = 0;
        llvm::MachineInstr::addOperand(v31, v37, (const llvm::MachineOperand *)&v86);
        uint64_t v53 = *(void *)(a1 + 16);
        uint64_t v87 = 0;
        uint64_t v88 = v53;
        LODWORD(v86) = 4;
        llvm::MachineInstr::addOperand(v31, v37, (const llvm::MachineOperand *)&v86);
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        LODWORD(v86) = 0;
        HIDWORD(v86) = v84;
        uint64_t v89 = 0;
        llvm::MachineInstr::addOperand(v31, v37, (const llvm::MachineOperand *)&v86);
        uint64_t v54 = *(void *)(a1 + 8);
        uint64_t v87 = 0;
        uint64_t v88 = v54;
        LODWORD(v86) = 4;
        llvm::MachineInstr::addOperand(v31, v37, (const llvm::MachineOperand *)&v86);
        if (v9)
        {
          int v86 = (unsigned __int8 **)__PAIR64__(a3, v84);
          sub_1CD55B3B0(v8, (int *)&v86)[2] = IncompleteVirtualRegister;
        }
        else
        {
          sub_1CD4145B8(a1 + 104, (int *)&v84)[1] = IncompleteVirtualRegister;
        }
        return IncompleteVirtualRegister;
      }
      int v69 = *v82;
      if ((v69 - 4) > 0x1E)
      {
        if ((v69 - 3) >= 0xFFFFFFFE) {
          unsigned int v72 = v82;
        }
        else {
          unsigned int v72 = 0;
        }
        if ((v69 - 3) < 0xFFFFFFFE)
        {
          if (v69 == 3) {
            *((void *)v82 + 1) = 0;
          }
          goto LABEL_43;
        }
        unint64_t v71 = (unint64_t)(v72 + 8);
      }
      else
      {
        if ((v82[1] & 0x7F) != 2 && !*((_DWORD *)v82 + 3)) {
          goto LABEL_43;
        }
        uint64_t v70 = *((void *)v82 + 2);
        if ((v70 & 4) == 0) {
          goto LABEL_43;
        }
        unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
        if (!v71) {
          goto LABEL_43;
        }
      }
      int v86 = &v82;
      sub_1CC5FA668(v71 + 16, &v86);
      goto LABEL_43;
    }
    sub_1CC38D61C(*(void **)(a1 + 32), IncompleteVirtualRegister, *(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(void *)(*(void *)(*(void *)(a1 + 32) + 24) + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
    goto LABEL_36;
  }
  uint64_t v10 = sub_1CD55AF60(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 80) + 12 * *(unsigned int *)(a1 + 96);
  if ((_DWORD *)v12 == v10) {
    goto LABEL_22;
  }
  while (*v10 != a2)
  {
    while (1)
    {
      v10 += 3;
      if (v10 == v11) {
        break;
      }
      int v13 = v10[1];
      if ((*v10 != -1 || v13 != -1) && (*v10 != -2 || v13 != -2)) {
        goto LABEL_15;
      }
    }
    uint64_t v10 = v11;
LABEL_15:
    if (v10 == (_DWORD *)v12) {
      goto LABEL_22;
    }
  }
  return v10[2];
}

void sub_1CC3CA06C()
{
}

void sub_1CC3CA17C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC3CA230(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CC3CA2DC(uint64_t a1, uint64_t a2)
{
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);

  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1CC3CA33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (v5 == v6)
  {
LABEL_4:
    uint64_t v7 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v5 != &llvm::MachineLoopInfo::ID)
    {
      v5 += 16;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void *)(v5 + 8);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v7 + 96))(v7, &llvm::MachineLoopInfo::ID);
  uint64_t v9 = *(llvm::MachineLoop ***)(v8 + 272);
  uint64_t v10 = *(llvm::MachineLoop ***)(v8 + 280);
  while (v9 != v10)
  {
    uint64_t v11 = *v9;
    TopBlocuint64_t k = llvm::MachineLoop::getTopBlock(*v9);
    if (TopBlock == (uint64_t *)llvm::MachineLoop::getBottomBlock(v11))
    {
      int v13 = *(uint64_t **)(a1 + 8);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (v14 == v15)
      {
LABEL_13:
        uint64_t v16 = 0;
      }
      else
      {
        while (*(_UNKNOWN **)v14 != &llvm::LiveIntervals::ID)
        {
          v14 += 16;
          if (v14 == v15) {
            goto LABEL_13;
          }
        }
        uint64_t v16 = *(void *)(v14 + 8);
      }
      uint64_t v76 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::LiveIntervals::ID);
      uint64_t v17 = llvm::MachineLoop::getTopBlock(v11);
      uint64_t v18 = llvm::dbgs((llvm *)v17);
      uint64_t v19 = v18;
      unint64_t v20 = (void *)*((void *)v18 + 4);
      if (*((void *)v18 + 3) - (void)v20 > 0x24uLL)
      {
        qmemcpy(v20, "--- ModuloScheduleTest running on BB#", 37);
        *((void *)v18 + 4) += 37;
      }
      else
      {
        llvm::raw_ostream::write(v18, "--- ModuloScheduleTest running on BB#", 0x25uLL);
      }
      unint64_t v21 = *((int *)v17 + 6);
      if ((v21 & 0x80000000) != 0)
      {
        unint64_t v21 = -(uint64_t)v21;
        int v22 = v19;
        int v23 = 1;
      }
      else
      {
        int v22 = v19;
        int v23 = 0;
      }
      uint64_t v24 = sub_1CD098D14(v22, v21, 0, 0, v23);
      uint64_t v25 = (unsigned char *)*((void *)v19 + 4);
      if (*((unsigned char **)v19 + 3) == v25)
      {
        uint64_t v24 = llvm::raw_ostream::write(v19, "\n", 1uLL);
      }
      else
      {
        *uint64_t v25 = 10;
        ++*((void *)v19 + 4);
      }
      uint64_t v102 = 0;
      uint64_t v103 = 0;
      int v104 = 0;
      int v26 = v17 + 6;
      unint64_t v99 = 0;
      unint64_t v100 = 0;
      int v101 = 0;
      uint64_t v27 = v17[7];
      if ((uint64_t *)v27 == v17 + 6)
      {
        int v28 = 0;
        unint64_t v29 = 0;
        int v30 = 0;
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        unint64_t v36 = 0;
        goto LABEL_100;
      }
      uint64_t v34 = 0;
      uint64_t v33 = 0;
      uint64_t v32 = 0;
      while (2)
      {
        uint64_t v37 = *(void *)(*(void *)(v27 + 16) + 8);
        if ((*(_WORD *)(v27 + 44) & 0xC) != 0 && (*(_WORD *)(v27 + 44) & 4) == 0)
        {
          uint64_t v39 = v27;
          if ((v37 & 0x200) == 0)
          {
            while ((*(_WORD *)(v39 + 44) & 8) != 0)
            {
              uint64_t v39 = *(void *)(v39 + 8);
              if ((*(unsigned char *)(*(void *)(v39 + 16) + 9) & 2) != 0) {
                goto LABEL_89;
              }
            }
LABEL_29:
            if (v32 >= v34)
            {
              uint64_t v40 = (v32 - v33) >> 3;
              unint64_t v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 61) {
                abort();
              }
              if ((v34 - v33) >> 2 > v41) {
                unint64_t v41 = (v34 - v33) >> 2;
              }
              if ((unint64_t)(v34 - v33) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v41;
              }
              if (v42)
              {
                if (v42 >> 61) {
                  sub_1CB833614();
                }
                uint64_t v24 = (llvm *)operator new(8 * v42);
              }
              else
              {
                uint64_t v24 = 0;
              }
              uint64_t v43 = (uint64_t *)((char *)v24 + 8 * v40);
              uint64_t *v43 = v27;
              unsigned int v44 = (char *)(v43 + 1);
              while (v32 != v33)
              {
                uint64_t v45 = *((void *)v32 - 1);
                v32 -= 8;
                *--uint64_t v43 = v45;
              }
              uint64_t v34 = (char *)v24 + 8 * v42;
              if (v33) {
                operator delete(v33);
              }
              uint64_t v33 = (char *)v43;
              uint64_t v32 = v44;
            }
            else
            {
              *(void *)uint64_t v32 = v27;
              v32 += 8;
            }
            unint64_t v46 = *(void *)(v27 + 48);
            if (v46 >= 8)
            {
              int32x2_t v47 = (unsigned char *)(v46 & 0xFFFFFFFFFFFFFFF8);
              BOOL v48 = (*(void *)(v27 + 48) & 7) != 2 || v47 == 0;
              if (!v48
                || ((*(void *)(v27 + 48) & 7) == 3 ? (BOOL v49 = v47 == 0) : (BOOL v49 = 1),
                    !v49 && v47[5] && (int32x2_t v47 = *(unsigned char **)&v47[8 * *(int *)v47 + 8 + 8 * v47[4]]) != 0))
              {
                uint64_t v50 = llvm::dbgs(v24);
                uint64_t v51 = v50;
                unint64_t v52 = (void *)*((void *)v50 + 4);
                if (*((void *)v50 + 3) - (void)v52 > 0x1DuLL)
                {
                  qmemcpy(v52, "Parsing post-instr symbol for ", 30);
                  *((void *)v50 + 4) += 30;
                }
                else
                {
                  llvm::raw_ostream::write(v50, "Parsing post-instr symbol for ", 0x1EuLL);
                }
                llvm::MachineInstr::print((llvm::MachineInstr *)v27, v51, (const llvm::TargetRegisterInfo *)1, 0, 0, 1, 0);
                uint64_t v53 = 0;
                unint64_t v54 = 0;
                if ((*v47 & 4) != 0)
                {
                  uint64_t v55 = (unint64_t *)*((void *)v47 - 1);
                  unint64_t v56 = *v55;
                  uint64_t v53 = (uint64_t)(v55 + 2);
                  unint64_t v54 = v56;
                }
                uint64_t v98 = v27;
                uint64_t v57 = sub_1CD3CDD24(&v102, &v98);
                uint64_t v97 = v27;
                uint64_t v77 = sub_1CD3CDD24((uint64_t *)&v99, &v97);
                llvm::getToken(v53, v54, "_", 1, &v78);
                llvm::getToken((uint64_t)v78, v79, "-", 1, v94);
                llvm::getToken(v80, v81, "-", 1, &v105);
                uint64_t v59 = v95;
                if (v96) {
                  uint64_t v59 = v95 + 1;
                }
                v89[0] = 0;
                uint64_t v91 = v59;
                uint64_t v92 = v96 - (v96 != 0);
                if ((llvm::consumeSignedInteger((llvm *)&v91, (llvm::StringRef *)0xA, v89, v58) & 1) == 0
                  && !v92
                  && v89[0] == SLODWORD(v89[0]))
                {
                  *((_DWORD *)v77 + 2) = v89[0];
                }
                uint64_t v61 = (uint64_t)v107;
                if (v108) {
                  uint64_t v61 = (uint64_t)(v107 + 1);
                }
                v89[0] = 0;
                uint64_t v91 = v61;
                uint64_t v92 = v108 - (v108 != 0);
                uint64_t v62 = llvm::consumeSignedInteger((llvm *)&v91, (llvm::StringRef *)0xA, v89, v60);
                if ((v62 & 1) == 0 && !v92 && v89[0] == SLODWORD(v89[0])) {
                  *((_DWORD *)v57 + 2) = v89[0];
                }
                uint64_t v63 = llvm::dbgs((llvm *)v62);
                uint64_t v64 = v63;
                uint64_t v65 = (void *)*((void *)v63 + 4);
                if (*((void *)v63 + 3) - (void)v65 > 7uLL)
                {
                  *uint64_t v65 = 0x3D65676174532020;
                  *((void *)v63 + 4) += 8;
                }
                else
                {
                  llvm::raw_ostream::write(v63, "  Stage=", 8uLL);
                }
                unint64_t v66 = *((int *)v77 + 2);
                if ((v66 & 0x80000000) != 0)
                {
                  unint64_t v66 = -(uint64_t)v66;
                  uint64_t v67 = v64;
                  int v68 = 1;
                }
                else
                {
                  uint64_t v67 = v64;
                  int v68 = 0;
                }
                sub_1CD098D14(v67, v66, 0, 0, v68);
                int v69 = (void *)*((void *)v64 + 4);
                if (*((void *)v64 + 3) - (void)v69 > 7uLL)
                {
                  void *v69 = 0x3D656C637943202CLL;
                  *((void *)v64 + 4) += 8;
                }
                else
                {
                  llvm::raw_ostream::write(v64, ", Cycle=", 8uLL);
                }
                unint64_t v70 = *((int *)v57 + 2);
                if ((v70 & 0x80000000) != 0)
                {
                  unint64_t v70 = -(uint64_t)v70;
                  unint64_t v71 = v64;
                  int v72 = 1;
                }
                else
                {
                  unint64_t v71 = v64;
                  int v72 = 0;
                }
                uint64_t v24 = sub_1CD098D14(v71, v70, 0, 0, v72);
                int v73 = (unsigned char *)*((void *)v64 + 4);
                if (*((unsigned char **)v64 + 3) == v73)
                {
                  uint64_t v24 = llvm::raw_ostream::write(v64, "\n", 1uLL);
                }
                else
                {
                  unsigned char *v73 = 10;
                  ++*((void *)v64 + 4);
                }
              }
            }
          }
        }
        else if ((v37 & 0x200) == 0)
        {
          goto LABEL_29;
        }
LABEL_89:
        if ((*(unsigned char *)v27 & 4) == 0)
        {
          while ((*(_WORD *)(v27 + 44) & 8) != 0)
            uint64_t v27 = *(void *)(v27 + 8);
        }
        uint64_t v27 = *(void *)(v27 + 8);
        if ((uint64_t *)v27 == v26)
        {
          uint64_t v31 = v102;
          uint64_t v35 = v103;
          int v30 = v104;
          unint64_t v29 = v99;
          unint64_t v36 = v100;
          int v28 = v101;
LABEL_100:
          uint64_t v105 = v33;
          unsigned int v106 = v32;
          uint64_t v107 = v34;
          uint64_t v91 = v31;
          uint64_t v102 = 0;
          uint64_t v92 = v35;
          uint64_t v103 = 0;
          int v93 = v30;
          int v104 = 0;
          v89[0] = v29;
          unint64_t v99 = 0;
          v89[1] = v36;
          unint64_t v100 = 0;
          int v90 = v28;
          int v101 = 0;
          sub_1CD540EB0((uint64_t)v94, a2, (uint64_t)v11, (uint64_t)&v105, (uint64_t)&v91, (uint64_t)v89);
          MEMORY[0x1D25D9CD0](v89[0], 8);
          MEMORY[0x1D25D9CD0](v91, 8);
          if (v105)
          {
            unsigned int v106 = v105;
            operator delete(v105);
          }
          int v78 = v94;
          unint64_t v79 = a2;
          unint64_t v74 = *(void *)(a2 + 40);
          uint64_t v80 = *(void *)(a2 + 16);
          unint64_t v81 = v74;
          uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)v80 + 104))(v80);
          uint64_t v83 = v76;
          uint64_t v84 = 0;
          uint64_t v85 = 0;
          int v86 = v87;
          memset(v87, 0, sizeof(v87));
          int v88 = 0;
          MEMORY[0x1D25D9CD0](0, 8);
          llvm::ModuloScheduleExpander::expand((llvm::ModuloScheduleExpander *)&v78);
        }
        continue;
      }
    }
    ++v9;
  }
  return 0;
}

void *sub_1CC3CAB18(void *a1, void *a2, void **a3, void *a4, uint64_t *a5)
{
  uint64_t v8 = *a5;
  if (a1 == a3)
  {
    uint64_t v15 = a2;
  }
  else
  {
    uint64_t v9 = a1 + 1;
    uint64_t v10 = *a1 + 4096;
    uint64_t v11 = a2;
    for (uint64_t i = (void *)v10; ; uint64_t i = v14 + 512)
    {
      sub_1CC3CABA0(v11, i, v8);
      uint64_t v8 = v13;
      *a5 = v13;
      if (v9 == a3) {
        break;
      }
      uint64_t v14 = (void *)*v9++;
      uint64_t v11 = v14;
    }
    uint64_t v15 = *a3;
  }
  uint64_t result = sub_1CC3CABA0(v15, a4, v8);
  *a5 = v17;
  return result;
}

void *sub_1CC3CABA0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    unsigned int v4 = *(_DWORD *)(a3 + 8);
    do
    {
      if (v4 >= *(_DWORD *)(a3 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)a3 + 8 * v4) = *v3;
      unsigned int v4 = *(_DWORD *)(a3 + 8) + 1;
      *(_DWORD *)(a3 + 8) = v4;
      ++v3;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t sub_1CC3CAC48(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = a1 + 32;
  uint64_t v6 = a1 + 16;
  *(void *)(a1 + 24) = 0x400000000;
  if (*(_DWORD *)(a2 + 24)) {
    sub_1CB927804(v6, a2 + 16);
  }
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  long long v7 = *a3;
  *(void *)(a1 + 80) = a1 + 96;
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 88) = 0x400000000;
  if (*((_DWORD *)a3 + 6)) {
    sub_1CB927804(a1 + 80, (uint64_t)(a3 + 1));
  }
  *(_OWORD *)(a1 + 112) = a3[3];
  return a1;
}

void llvm::MultiHazardRecognizer::AddHazardRecognizer(uint64_t a1, char *a2)
{
  uint64_t v2 = a2;
  unsigned int v4 = *(_DWORD *)(*(void *)a2 + 8);
  uint64_t v6 = (unint64_t *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 8) > v4) {
    unsigned int v4 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v4;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  if (v7 >= *(_DWORD *)(a1 + 28))
  {
    unint64_t v10 = v7 + 1;
    unint64_t v11 = v5 + 8 * v7;
    if (v5 <= (unint64_t)v2 && v11 > (unint64_t)v2)
    {
      uint64_t v13 = &v2[-v5];
      sub_1CC3CB388(a1 + 16, v10);
      unint64_t v5 = *v6;
      uint64_t v2 = &v13[*v6];
    }
    else
    {
      sub_1CC3CB388(a1 + 16, v10);
      unint64_t v5 = *v6;
    }
  }
  uint64_t v8 = *(unsigned int *)(a1 + 24);
  uint64_t v9 = *(void *)v2;
  *(void *)uint64_t v2 = 0;
  *(void *)(v5 + 8 * v8) = v9;
  *(_DWORD *)(a1 + 24) = v8 + 1;
}

uint64_t llvm::MultiHazardRecognizer::atIssueLimit(llvm::MultiHazardRecognizer *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  uint64_t v3 = 8 * v1 - 8;
  do
  {
    uint64_t v4 = *v2++;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    if (result) {
      break;
    }
    uint64_t v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t llvm::MultiHazardRecognizer::getHazardType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = 8 * v3;
  while (1)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*v6 + 24))(*v6, a2, a3);
    if (result) {
      break;
    }
    ++v6;
    v7 -= 8;
    if (!v7) {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::MultiHazardRecognizer::Reset(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(this + 16);
    uint64_t v3 = 8 * v1;
    do
    {
      uint64_t v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::MultiHazardRecognizer::EmitInstruction(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 24);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(result + 16);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t llvm::MultiHazardRecognizer::EmitInstruction(uint64_t this, llvm::MachineInstr *a2)
{
  uint64_t v2 = *(unsigned int *)(this + 24);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)(this + 16);
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      this = (*(uint64_t (**)(uint64_t, llvm::MachineInstr *))(*(void *)v6 + 48))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::MultiHazardRecognizer::PreEmitNoops(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  LODWORD(v4) = 0;
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v6 = 8 * v2;
  do
  {
    uint64_t v7 = *v5++;
    unsigned int v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 56))(v7, a2);
    if (v8 <= v4) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v8;
    }
    v6 -= 8;
  }
  while (v6);
  return v4;
}

uint64_t llvm::MultiHazardRecognizer::PreEmitNoops(llvm::MultiHazardRecognizer *this, llvm::MachineInstr *a2)
{
  uint64_t v2 = *((unsigned int *)this + 6);
  if (!v2) {
    return 0;
  }
  LODWORD(v4) = 0;
  uint64_t v5 = (uint64_t *)*((void *)this + 2);
  uint64_t v6 = 8 * v2;
  do
  {
    uint64_t v7 = *v5++;
    unsigned int v8 = (*(uint64_t (**)(uint64_t, llvm::MachineInstr *))(*(void *)v7 + 64))(v7, a2);
    if (v8 <= v4) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = v8;
    }
    v6 -= 8;
  }
  while (v6);
  return v4;
}

uint64_t llvm::MultiHazardRecognizer::ShouldPreferAnother(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(a1 + 16);
  uint64_t v5 = 8 * v2 - 8;
  do
  {
    uint64_t v6 = *v4++;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 72))(v6, a2);
    if (result) {
      break;
    }
    uint64_t v8 = v5;
    v5 -= 8;
  }
  while (v8);
  return result;
}

uint64_t llvm::MultiHazardRecognizer::AdvanceCycle(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(this + 16);
    uint64_t v3 = 8 * v1;
    do
    {
      uint64_t v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 80))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::MultiHazardRecognizer::RecedeCycle(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(this + 16);
    uint64_t v3 = 8 * v1;
    do
    {
      uint64_t v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm::MultiHazardRecognizer::EmitNoop(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(uint64_t **)(this + 16);
    uint64_t v3 = 8 * v1;
    do
    {
      uint64_t v4 = *v2++;
      this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 96))(v4);
      v3 -= 8;
    }
    while (v3);
  }
  return this;
}

uint64_t sub_1CC3CB254(uint64_t a1)
{
  *(void *)a1 = &unk_1F26104F0;
  sub_1CC3CB2FC((char **)(a1 + 16));
  return a1;
}

void sub_1CC3CB298(uint64_t a1)
{
  *(void *)a1 = &unk_1F26104F0;
  sub_1CC3CB2FC((char **)(a1 + 16));

  JUMPOUT(0x1D25D9CE0);
}

char **sub_1CC3CB2FC(char **a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 8 * v3;
    uint64_t v5 = v2 - 8;
    do
    {
      uint64_t v6 = *(void *)&v5[v4];
      *(void *)&v5[v4] = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      v4 -= 8;
    }
    while (v4);
    uint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

void sub_1CC3CB388(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = malloc_type_malloc(8 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(uint64_t **)a1;
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9)
  {
    uint64_t v10 = 8 * v9;
    uint64_t v11 = 8 * v9;
    uint64_t v12 = v7;
    do
    {
      uint64_t v13 = *v8;
      *v8++ = 0;
      *v12++ = v13;
      v11 -= 8;
    }
    while (v11);
    uint64_t v14 = *(void *)a1 - 8;
    do
    {
      uint64_t v15 = *(void *)(v14 + v10);
      *(void *)(v14 + v10) = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
      v10 -= 8;
    }
    while (v10);
    uint64_t v8 = *(uint64_t **)a1;
  }
  if (v8 != (uint64_t *)(a1 + 16)) {
    free(v8);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CC3CB4A8()
{
}

void sub_1CC3CB544()
{
}

void sub_1CC3CB658(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CC3CB70C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CC3CB7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 112);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)(v2 + 8))
  {
    uint64_t v4 = *(void *)(v2 + 40);
    if (v4)
    {
      int v5 = *(_DWORD *)(v4 + 40);
      if (v5)
      {
        uint64_t v6 = *(void *)(v4 + 24);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
        {
          uint64_t v91 = v6;
          int v76 = v5;
          int v77 = __cxa_guard_acquire(&qword_1EBCBE588);
          int v5 = v76;
          uint64_t v6 = v91;
          if (v77)
          {
            unint64_t v78 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override) {
              unint64_t v78 = 0xFF51AFD7ED558CCDLL;
            }
            qword_1EBCBE580 = v78;
            __cxa_guard_release(&qword_1EBCBE588);
            int v5 = v76;
            uint64_t v6 = v91;
          }
        }
        uint64_t v7 = __ROR8__(qword_1EBCBE580 ^ 0xD0DB31C61410D441, 30);
        unint64_t v8 = 0x9DDFEA08EB382D69
           * ((qword_1EBCBE580 - 0x1DAA4ADE8CE29C7ALL) ^ ((0x9DDFEA08EB382D69
                                                         * ((v7 - 0x447750EBFF2F1972) ^ (qword_1EBCBE580
                                                                                         - 0x1DAA4ADE8CE29C7ALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v7 - 0x447750EBFF2F1972) ^ (qword_1EBCBE580 - 0x1DAA4ADE8CE29C7ALL))));
        unsigned int v9 = -348639895 * ((v8 >> 47) ^ v8);
        int v10 = v5 - 1;
        for (int i = 1; ; ++i)
        {
          unsigned int v12 = v9 & v10;
          uint64_t v13 = v6 + 24 * v12;
          uint64_t v14 = *(void **)v13;
          if (*(void *)v13 == -1)
          {
            if ("patchable-function-entry" == (char *)-1) {
              goto LABEL_23;
            }
          }
          else if (v14 == (void *)-2)
          {
            if ("patchable-function-entry" == (char *)-2) {
              goto LABEL_23;
            }
          }
          else if (*(void *)(v13 + 8) == 24)
          {
            BOOL v15 = *v14 == 0x6C62616863746170 && v14[1] == 0x6974636E75662D65;
            if (v15 && v14[2] == 0x7972746E652D6E6FLL)
            {
LABEL_23:
              uint64_t v17 = *(void **)(a2 + 328);
              uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
              uint64_t v19 = (unint64_t *)v17[7];
              uint64_t v20 = *(void *)(v18 + 8) + 1680;
              unint64_t v21 = (llvm::MachineFunction *)v17[4];
              uint64_t v95 = 0;
              int v22 = llvm::MachineFunction::CreateMachineInstr(v21, v20, &v95, 0);
              if (v95)
              {
                int v83 = *v95;
                if ((v83 - 4) > 0x1E)
                {
                  if ((v83 - 3) >= 0xFFFFFFFE) {
                    uint64_t v89 = v95;
                  }
                  else {
                    uint64_t v89 = 0;
                  }
                  if ((v83 - 3) < 0xFFFFFFFE)
                  {
                    if (v83 == 3) {
                      *((void *)v95 + 1) = 0;
                    }
                    goto LABEL_24;
                  }
                  unint64_t v85 = (unint64_t)(v89 + 8);
                }
                else
                {
                  if ((v95[1] & 0x7F) != 2 && !*((_DWORD *)v95 + 3)) {
                    goto LABEL_24;
                  }
                  uint64_t v84 = *((void *)v95 + 2);
                  if ((v84 & 4) == 0) {
                    goto LABEL_24;
                  }
                  unint64_t v85 = v84 & 0xFFFFFFFFFFFFFFF8;
                  if (!v85) {
                    goto LABEL_24;
                  }
                }
                uint64_t v92 = &v95;
                sub_1CC5FA668(v85 + 16, &v92);
              }
LABEL_24:
              uint64_t v23 = v17[5];
              *((void *)v22 + 3) = v23;
              uint64_t v24 = *(void *)(v23 + 32);
              uint64_t v25 = *((unsigned int *)v22 + 10);
              if (v25)
              {
                uint64_t v62 = *((void *)v22 + 4);
                uint64_t v63 = *(void *)(v24 + 40);
                uint64_t v64 = 32 * v25;
                do
                {
                  if (!*(unsigned char *)v62)
                  {
                    uint64_t v65 = *(unsigned int *)(v62 + 4);
                    if ((int)v65 >= 0) {
                      unint64_t v66 = (uint64_t *)(*(void *)(v63 + 272) + 8 * v65);
                    }
                    else {
                      unint64_t v66 = (uint64_t *)(*(void *)(v63 + 24) + 16 * (v65 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v67 = *v66;
                    if (*v66)
                    {
                      uint64_t v68 = *(void *)(v67 + 16);
                      *(void *)(v67 + 16) = v62;
                      *(void *)(v62 + 16) = v68;
                      if (*(unsigned char *)(v62 + 3))
                      {
                        *(void *)(v62 + 24) = v67;
                      }
                      else
                      {
                        *(void *)(v62 + 24) = 0;
                        unint64_t v66 = (uint64_t *)(v68 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v62 + 16) = v62;
                      *(void *)(v62 + 24) = 0;
                    }
                    *unint64_t v66 = v62;
                  }
                  v62 += 32;
                  v64 -= 32;
                }
                while (v64);
              }
              uint64_t v26 = *(void *)(v24 + 728);
              if (v26) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v26 + 24))(v26, v22);
              }
              unint64_t v27 = *v19 & 0xFFFFFFFFFFFFFFF8;
              *(void *)int v22 = v27 | *(void *)v22 & 7;
              *((void *)v22 + 1) = v19;
              *(void *)(v27 + 8) = v22;
              *uint64_t v19 = *v19 & 7 | (unint64_t)v22;
              return 1;
            }
          }
          if (v14 == (void *)-1) {
            break;
          }
          unsigned int v9 = i + v12;
        }
        uint64_t v2 = *(void *)(*(void *)a2 + 112);
        if (!v2) {
          return 0;
        }
      }
    }
  }
  if (!*(_DWORD *)(v2 + 8)) {
    return 0;
  }
  uint64_t v28 = *(void *)(v2 + 40);
  if (!v28) {
    return 0;
  }
  int v29 = *(_DWORD *)(v28 + 40);
  if (!v29) {
    return 0;
  }
  uint64_t v30 = *(void *)(v28 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v79 = v30;
    int v80 = v29;
    int v81 = __cxa_guard_acquire(&qword_1EBCBE588);
    int v29 = v80;
    uint64_t v30 = v79;
    if (v81)
    {
      unint64_t v82 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v82 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v82;
      __cxa_guard_release(&qword_1EBCBE588);
      int v29 = v80;
      uint64_t v30 = v79;
    }
  }
  uint64_t v31 = __ROR8__(qword_1EBCBE580 ^ 0xD02F23F80FCFBA7ALL, 30);
  unint64_t v32 = 0x9DDFEA08EB382D69
      * ((qword_1EBCBE580 - 0x1CFE3D1088A182B9) ^ ((0x9DDFEA08EB382D69
                                                    * ((v31 - 0x7EB4AA8EE79AFE29) ^ (qword_1EBCBE580
                                                                                     - 0x1CFE3D1088A182B9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v31 - 0x7EB4AA8EE79AFE29) ^ (qword_1EBCBE580 - 0x1CFE3D1088A182B9))));
  unsigned int v33 = -348639895 * ((v32 >> 47) ^ v32);
  int v34 = v29 - 1;
  for (int j = 1; ; ++j)
  {
    unsigned int v36 = v33 & v34;
    uint64_t v37 = (uint64_t *)(v30 + 24 * v36);
    uint64_t v38 = *v37;
    if (*v37 == -1)
    {
      if ("patchable-function" == (char *)-1) {
        goto LABEL_50;
      }
      goto LABEL_36;
    }
    if (v38 != -2) {
      break;
    }
    if ("patchable-function" == (char *)-2) {
      goto LABEL_50;
    }
LABEL_36:
    if (v38 == -1) {
      return 0;
    }
    unsigned int v33 = j + v36;
  }
  if (v37[1] != 18) {
    goto LABEL_36;
  }
  BOOL v39 = *(void *)v38 == 0x6C62616863746170 && *(void *)(v38 + 8) == 0x6974636E75662D65;
  if (!v39 || *(_WORD *)(v38 + 16) != 28271) {
    goto LABEL_36;
  }
LABEL_50:
  uint64_t v41 = *(void *)(a2 + 328);
  for (uint64_t k = (uint64_t *)(v41 + 56); ; uint64_t k = (uint64_t *)(v43 + 8))
  {
    uint64_t v43 = *k;
    unsigned int v44 = **(unsigned __int16 **)(*k + 16);
    BOOL v45 = v44 > 0x11;
    int v46 = (1 << v44) & 0x224B8;
    if (v45 || v46 == 0) {
      break;
    }
    if ((*(unsigned char *)v43 & 4) == 0)
    {
      while ((*(_WORD *)(v43 + 44) & 8) != 0)
        uint64_t v43 = *(void *)(v43 + 8);
    }
  }
  uint64_t v49 = *(void *)((*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16)) + 8)
      + 1632;
  uint64_t v50 = *(llvm::MachineFunction **)(v41 + 32);
  uint64_t v51 = *(unsigned __int8 **)(v43 + 56);
  uint64_t v95 = v51;
  if (v51) {
    llvm::MetadataTracking::track((uint64_t)&v95, v51, 2);
  }
  unint64_t v52 = llvm::MachineFunction::CreateMachineInstr(v50, v49, &v95, 0);
  if (v95)
  {
    int v86 = *v95;
    if ((v86 - 4) > 0x1E)
    {
      if ((v86 - 3) >= 0xFFFFFFFE) {
        int v90 = v95;
      }
      else {
        int v90 = 0;
      }
      if ((v86 - 3) < 0xFFFFFFFE)
      {
        if (v86 == 3) {
          *((void *)v95 + 1) = 0;
        }
        goto LABEL_64;
      }
      unint64_t v88 = (unint64_t)(v90 + 8);
    }
    else
    {
      if ((v95[1] & 0x7F) != 2 && !*((_DWORD *)v95 + 3)) {
        goto LABEL_64;
      }
      uint64_t v87 = *((void *)v95 + 2);
      if ((v87 & 4) == 0) {
        goto LABEL_64;
      }
      unint64_t v88 = v87 & 0xFFFFFFFFFFFFFFF8;
      if (!v88) {
        goto LABEL_64;
      }
    }
    uint64_t v92 = &v95;
    sub_1CC5FA668(v88 + 16, &v92);
  }
LABEL_64:
  uint64_t v53 = *(void *)(v41 + 40);
  *((void *)v52 + 3) = v53;
  uint64_t v54 = *(void *)(v53 + 32);
  uint64_t v55 = *((unsigned int *)v52 + 10);
  if (v55)
  {
    uint64_t v69 = *((void *)v52 + 4);
    uint64_t v70 = *(void *)(v54 + 40);
    uint64_t v71 = 32 * v55;
    do
    {
      if (!*(unsigned char *)v69)
      {
        uint64_t v72 = *(unsigned int *)(v69 + 4);
        if ((int)v72 >= 0) {
          int v73 = (uint64_t *)(*(void *)(v70 + 272) + 8 * v72);
        }
        else {
          int v73 = (uint64_t *)(*(void *)(v70 + 24) + 16 * (v72 & 0x7FFFFFFF) + 8);
        }
        uint64_t v74 = *v73;
        if (*v73)
        {
          uint64_t v75 = *(void *)(v74 + 16);
          *(void *)(v74 + 16) = v69;
          *(void *)(v69 + 16) = v75;
          if (*(unsigned char *)(v69 + 3))
          {
            *(void *)(v69 + 24) = v74;
          }
          else
          {
            *(void *)(v69 + 24) = 0;
            int v73 = (uint64_t *)(v75 + 24);
          }
        }
        else
        {
          *(void *)(v69 + 16) = v69;
          *(void *)(v69 + 24) = 0;
        }
        uint64_t *v73 = v69;
      }
      v69 += 32;
      v71 -= 32;
    }
    while (v71);
  }
  uint64_t v56 = *(void *)(v54 + 728);
  if (v56) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v56 + 24))(v56, v52);
  }
  unint64_t v57 = *(void *)v43 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v52 = v57 | *(void *)v52 & 7;
  *((void *)v52 + 1) = v43;
  *(void *)(v57 + 8) = v52;
  *(void *)uint64_t v43 = *(void *)v43 & 7 | (unint64_t)v52;
  LODWORD(v92) = 1;
  uint64_t v93 = 0;
  uint64_t v94 = 2;
  llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v92);
  uint64_t v58 = **(unsigned __int16 **)(v43 + 16);
  LODWORD(v92) = 1;
  uint64_t v93 = 0;
  uint64_t v94 = v58;
  llvm::MachineInstr::addOperand(v52, v50, (const llvm::MachineOperand *)&v92);
  uint64_t v59 = *(unsigned int *)(v43 + 40);
  if (v59)
  {
    uint64_t v60 = *(const llvm::MachineOperand **)(v43 + 32);
    uint64_t v61 = 32 * v59;
    do
    {
      llvm::MachineInstr::addOperand(v52, v50, v60);
      uint64_t v60 = (const llvm::MachineOperand *)((char *)v60 + 32);
      v61 -= 32;
    }
    while (v61);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v43);
  if (*(unsigned __int8 *)(a2 + 352) <= 3u) {
    *(unsigned char *)(a2 + 352) = 4;
  }
  return 1;
}

double sub_1CC3CBFC4@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 16) = 8;
  *(void *)a1 = a1 + 16;
  *(void *)&double result = 0x600000001;
  *(void *)(a1 + 8) = 0x600000001;
  *(_DWORD *)(a1 + 64) = 11;
  return result;
}

llvm::ScaledNumberBase *llvm::MBFIWrapper::printBlockFreq(llvm::MBFIWrapper *this, llvm::raw_ostream *a2, const llvm::MachineBasicBlock *a3)
{
  uint64_t v4 = *(void *)this;
  uint64_t BlockFreq = llvm::MBFIWrapper::getBlockFreq(this, a3);
  uint64_t v5 = *(void *)(v4 + 248);
  if (v5) {
    return llvm::BlockFrequencyInfoImplBase::printBlockFreq(v5, a2, &BlockFreq);
  }
  return a2;
}

llvm::ScaledNumberBase *llvm::MBFIWrapper::printBlockFreq(uint64_t *a1, llvm::ScaledNumberBase *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v6 = a3;
  uint64_t v4 = *(void *)(v3 + 248);
  if (v4) {
    return llvm::BlockFrequencyInfoImplBase::printBlockFreq(v4, a2, &v6);
  }
  return a2;
}

void llvm::MIRPrinter::convert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  *(unsigned char *)(a2 + 23) = (**(unsigned char **)(*(void *)a3 + 360) & 4) != 0;
  int v6 = *(_DWORD *)(a3 + 32);
  if (v6)
  {
    int v7 = 0;
    uint64_t v71 = (void (*)(void))off_1F26155E8;
    while (1)
    {
      long long v74 = 0u;
      *(_DWORD *)int v73 = v7;
      unsigned int v8 = v7 & 0x7FFFFFFF;
      memset(&v73[8], 0, 80);
      if ((v7 & 0x7FFFFFFFu) < *(_DWORD *)(a3 + 72))
      {
        uint64_t v9 = *(void *)(a3 + 64) + 24 * v8;
        char v10 = *(unsigned char *)(v9 + 23);
        int v11 = v10;
        uint64_t v12 = *(void *)(v9 + 8);
        uint64_t v13 = v10 & 0x7F;
        if (v11 >= 0) {
          uint64_t v12 = v13;
        }
        if (v12) {
          goto LABEL_7;
        }
      }
      LODWORD(v75[1]) = 0;
      char v77 = 0;
      uint64_t v78 = 0;
      v75[0] = &unk_1F2646F30;
      int v80 = &v73[24];
      int v79 = 0;
      memset(v76, 0, sizeof(v76));
      uint64_t v14 = operator new(0x20uLL);
      *(void *)uint64_t v14 = &unk_1F26155B8;
      v14[2] = v7 | 0x80000000;
      *((void *)v14 + 2) = a3;
      *((void *)v14 + 3) = a4;
      int v83 = (long long *)v14;
      v71();
      if (v83 == &v81)
      {
        (*(void (**)(long long *))(v81 + 32))(&v81);
      }
      else if (v83)
      {
        (*(void (**)(long long *))(*(void *)v83 + 40))(v83);
      }
      v75[0] = &unk_1F2646B98;
      if (v79 == 1 && *(void *)v76) {
        MEMORY[0x1D25D9CB0](*(void *)v76, 0x1000C8077774924);
      }
      uint64_t v15 = *(void *)(a3 + 208);
      uint64_t v16 = v15 + 40 * v8;
      if (*(_DWORD *)(v16 + 16))
      {
        if (!*(_DWORD *)(v15 + 40 * v8))
        {
          int v17 = **(_DWORD **)(v16 + 8);
          if (v17) {
            sub_1CC3CD1B0(v17, (uint64_t)&v73[64], a4);
          }
        }
      }
      unint64_t v18 = *(void *)(a2 + 40);
      unint64_t v19 = *(void *)(a2 + 48);
      if (v18 < v19)
      {
        uint64_t v20 = sub_1CD5608A8(v18, (long long *)v73) + 104;
        goto LABEL_41;
      }
      uint64_t v21 = *(void *)(a2 + 32);
      uint64_t v22 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v18 - v21) >> 3);
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) > 0x276276276276276) {
LABEL_106:
      }
        abort();
      unint64_t v24 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v19 - v21) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      unint64_t v25 = v24 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v23;
      if (v25)
      {
        if (v25 > 0x276276276276276) {
LABEL_107:
        }
          sub_1CB833614();
        uint64_t v26 = (char *)operator new(104 * v25);
      }
      else
      {
        uint64_t v26 = 0;
      }
      unint64_t v27 = &v26[104 * v25];
      uint64_t v28 = sub_1CD5608A8((uint64_t)&v26[104 * v22], (long long *)v73);
      uint64_t v20 = v28 + 104;
      int v29 = *(char **)(a2 + 32);
      uint64_t v30 = *(char **)(a2 + 40);
      if (v30 == v29) {
        break;
      }
      do
      {
        long long v31 = *(_OWORD *)(v30 - 104);
        *(void *)(v28 - 88) = *((void *)v30 - 11);
        *(_OWORD *)(v28 - 104) = v31;
        long long v32 = *((_OWORD *)v30 - 5);
        *(void *)(v28 - 64) = *((void *)v30 - 8);
        *(_OWORD *)(v28 - 80) = v32;
        *((void *)v30 - 9) = 0;
        *((void *)v30 - 8) = 0;
        *((void *)v30 - 10) = 0;
        *(_OWORD *)(v28 - 56) = *(_OWORD *)(v30 - 56);
        long long v33 = *(_OWORD *)(v30 - 40);
        *(void *)(v28 - 24) = *((void *)v30 - 3);
        *(_OWORD *)(v28 - 40) = v33;
        *((void *)v30 - 4) = 0;
        *((void *)v30 - 3) = 0;
        *((void *)v30 - 5) = 0;
        *(_OWORD *)(v28 - 16) = *((_OWORD *)v30 - 1);
        v28 -= 104;
        v30 -= 104;
      }
      while (v30 != v29);
      uint64_t v30 = *(char **)(a2 + 32);
      uint64_t v34 = *(void *)(a2 + 40);
      *(void *)(a2 + 32) = v28;
      *(void *)(a2 + 40) = v20;
      *(void *)(a2 + 48) = v27;
      if ((char *)v34 == v30) {
        goto LABEL_39;
      }
      do
      {
        v34 -= 104;
        sub_1CD55ECA0(v34);
      }
      while ((char *)v34 != v30);
      if (v30) {
        goto LABEL_40;
      }
LABEL_41:
      *(void *)(a2 + 40) = v20;
      if ((v73[87] & 0x80000000) != 0) {
        operator delete(*(void **)&v73[64]);
      }
LABEL_7:
      if ((v73[47] & 0x80000000) != 0) {
        operator delete(*(void **)&v73[24]);
      }
      if (++v7 == v6) {
        goto LABEL_45;
      }
    }
    *(void *)(a2 + 32) = v28;
    *(void *)(a2 + 40) = v20;
    *(void *)(a2 + 48) = v27;
LABEL_39:
    if (!v30) {
      goto LABEL_41;
    }
LABEL_40:
    operator delete(v30);
    goto LABEL_41;
  }
LABEL_45:
  uint64_t v35 = *(int **)(a3 + 456);
  unsigned int v36 = *(int **)(a3 + 464);
  for (uint64_t i = a4; v35 != v36; v35 += 2)
  {
    int v38 = *v35;
    int v39 = v35[1];
    memset(v73, 0, 80);
    sub_1CC3CD1B0(v38, (uint64_t)v73, i);
    if (v39) {
      sub_1CC3CD1B0(v39, (uint64_t)&v73[40], i);
    }
    unint64_t v40 = *(void *)(a2 + 64);
    unint64_t v41 = *(void *)(a2 + 72);
    if (v40 >= v41)
    {
      uint64_t v43 = *(void *)(a2 + 56);
      unint64_t v44 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v40 - v43) >> 4);
      unint64_t v45 = v44 + 1;
      if (v44 + 1 > 0x333333333333333) {
        goto LABEL_106;
      }
      unint64_t v46 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v41 - v43) >> 4);
      if (2 * v46 > v45) {
        unint64_t v45 = 2 * v46;
      }
      if (v46 >= 0x199999999999999) {
        unint64_t v47 = 0x333333333333333;
      }
      else {
        unint64_t v47 = v45;
      }
      if (v47)
      {
        if (v47 > 0x333333333333333) {
          goto LABEL_107;
        }
        BOOL v48 = (char *)operator new(80 * v47);
      }
      else
      {
        BOOL v48 = 0;
      }
      uint64_t v49 = &v48[80 * v47];
      uint64_t v50 = sub_1CD560FC0((uint64_t)&v48[80 * v44], (long long *)v73);
      uint64_t v42 = v50 + 80;
      uint64_t v51 = *(char **)(a2 + 56);
      unint64_t v52 = *(char **)(a2 + 64);
      if (v52 == v51)
      {
        *(void *)(a2 + 56) = v50;
        *(void *)(a2 + 64) = v42;
        *(void *)(a2 + 72) = v49;
        uint64_t i = a4;
        if (!v52) {
          goto LABEL_71;
        }
      }
      else
      {
        do
        {
          long long v53 = *((_OWORD *)v52 - 5);
          *(void *)(v50 - 64) = *((void *)v52 - 8);
          *(_OWORD *)(v50 - 80) = v53;
          *((void *)v52 - 9) = 0;
          *((void *)v52 - 8) = 0;
          *((void *)v52 - 10) = 0;
          *(_OWORD *)(v50 - 56) = *(_OWORD *)(v52 - 56);
          long long v54 = *(_OWORD *)(v52 - 40);
          *(void *)(v50 - 24) = *((void *)v52 - 3);
          *(_OWORD *)(v50 - 40) = v54;
          *((void *)v52 - 4) = 0;
          *((void *)v52 - 3) = 0;
          *((void *)v52 - 5) = 0;
          *(_OWORD *)(v50 - 16) = *((_OWORD *)v52 - 1);
          v50 -= 80;
          v52 -= 80;
        }
        while (v52 != v51);
        unint64_t v52 = *(char **)(a2 + 56);
        uint64_t v55 = *(void *)(a2 + 64);
        *(void *)(a2 + 56) = v50;
        *(void *)(a2 + 64) = v42;
        *(void *)(a2 + 72) = v49;
        if ((char *)v55 == v52)
        {
          uint64_t i = a4;
        }
        else
        {
          uint64_t i = a4;
          do
          {
            v55 -= 80;
            sub_1CD55ECE4(v55);
          }
          while ((char *)v55 != v52);
        }
        if (!v52) {
          goto LABEL_71;
        }
      }
      operator delete(v52);
    }
    else
    {
      uint64_t v42 = sub_1CD560FC0(v40, (long long *)v73) + 80;
    }
LABEL_71:
    *(void *)(a2 + 64) = v42;
    if ((v73[63] & 0x80000000) != 0) {
      operator delete(*(void **)&v73[40]);
    }
    if ((v73[23] & 0x80000000) != 0) {
      operator delete(*(void **)v73);
    }
  }
  if (*(unsigned char *)(a3 + 144))
  {
    uint64_t v56 = *(unsigned __int16 **)(a3 + 152);
    int v57 = *v56;
    long long v81 = 0uLL;
    unint64_t v82 = 0;
    if (v57)
    {
      do
      {
        *(_OWORD *)uint64_t v75 = 0u;
        memset(v76, 0, sizeof(v76));
        sub_1CC3CD1B0(v57, (uint64_t)v75, i);
        uint64_t v58 = (_OWORD *)*((void *)&v81 + 1);
        if (*((void *)&v81 + 1) >= (unint64_t)v82)
        {
          unint64_t v62 = v81;
          unint64_t v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v81 + 1) - v81) >> 3) + 1;
          if (v63 > 0x666666666666666) {
            goto LABEL_106;
          }
          uint64_t v64 = 0;
          if (0x999999999999999ALL * ((uint64_t)&v82[-v81] >> 3) > v63) {
            unint64_t v63 = 0x999999999999999ALL * ((uint64_t)&v82[-v81] >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v82[-v81] >> 3) >= 0x333333333333333) {
            unint64_t v65 = 0x666666666666666;
          }
          else {
            unint64_t v65 = v63;
          }
          *(void *)&v73[24] = 0;
          *(void *)&v73[32] = &v82;
          if (v65)
          {
            if (v65 > 0x666666666666666) {
              goto LABEL_107;
            }
            uint64_t v64 = (char *)operator new(40 * v65);
          }
          unint64_t v66 = &v64[8 * ((uint64_t)((uint64_t)v58 - v62) >> 3)];
          if ((v76[7] & 0x80000000) != 0)
          {
            sub_1CB8BDF7C((uint64_t)&v64[8 * ((uint64_t)((uint64_t)v58 - v62) >> 3)], v75[0], (unint64_t)v75[1]);
            uint64_t v58 = (_OWORD *)*((void *)&v81 + 1);
            unint64_t v62 = v81;
          }
          else
          {
            *(_OWORD *)unint64_t v66 = *(_OWORD *)v75;
            *((void *)v66 + 2) = *(void *)v76;
          }
          *(_OWORD *)(v66 + 24) = *(_OWORD *)&v76[8];
          if (v58 == (_OWORD *)v62)
          {
            int64x2_t v67 = vdupq_n_s64(v62);
            uint64_t v68 = v66;
          }
          else
          {
            uint64_t v68 = v66;
            do
            {
              long long v69 = *(_OWORD *)((char *)v58 - 40);
              *((void *)v68 - 3) = *((void *)v58 - 3);
              *(_OWORD *)(v68 - 40) = v69;
              *((void *)v58 - 4) = 0;
              *((void *)v58 - 3) = 0;
              *((void *)v58 - 5) = 0;
              *((_OWORD *)v68 - 1) = *(v58 - 1);
              v68 -= 40;
              uint64_t v58 = (_OWORD *)((char *)v58 - 40);
            }
            while (v58 != (_OWORD *)v62);
            int64x2_t v67 = (int64x2_t)v81;
          }
          uint64_t v60 = v66 + 40;
          *(void *)&long long v81 = v68;
          *((void *)&v81 + 1) = v66 + 40;
          *(int64x2_t *)&v73[8] = v67;
          uint64_t v70 = v82;
          unint64_t v82 = &v64[40 * v65];
          *(void *)&v73[24] = v70;
          *(void *)int v73 = v67.i64[0];
          sub_1CD561578((uint64_t)v73);
          uint64_t i = a4;
        }
        else
        {
          if ((v76[7] & 0x80000000) != 0)
          {
            sub_1CB8BDF7C(*((uint64_t *)&v81 + 1), v75[0], (unint64_t)v75[1]);
          }
          else
          {
            long long v59 = *(_OWORD *)v75;
            *(void *)(*((void *)&v81 + 1) + 16) = *(void *)v76;
            *uint64_t v58 = v59;
          }
          *(_OWORD *)((char *)v58 + 24) = *(_OWORD *)&v76[8];
          uint64_t v60 = (char *)v58 + 40;
        }
        *((void *)&v81 + 1) = v60;
        if ((v76[7] & 0x80000000) != 0) {
          operator delete(v75[0]);
        }
        int v61 = v56[1];
        ++v56;
        int v57 = v61;
      }
      while (v61);
    }
    sub_1CD567428(a2 + 80, (std::string **)&v81);
    *(void *)int v73 = &v81;
    sub_1CC3CDF68((void ***)v73);
  }
}

{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void (**v17)(void **);
  uint64_t v18;
  void **v19;
  uint64_t v20;

  uint64_t v20 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a3 = *(_DWORD *)(a4 + 37);
  *(void *)(a3 + 8) = *(void *)(a4 + 48);
  *(_DWORD *)(a3 + 16) = *(_DWORD *)(a4 + 56);
  *(_DWORD *)(a3 + 20) = 1 << *(unsigned char *)(a4 + 60);
  *(_WORD *)(a3 + 24) = *(_WORD *)(a4 + 61);
  *(void *)(a3 + 72) = *(void *)(a4 + 72);
  *(unsigned char *)(a3 + 80) = *(unsigned char *)(a4 + 650);
  *(unsigned char *)(a3 + 81) = *(unsigned char *)(a4 + 652);
  *(_WORD *)(a3 + 82) = *(_WORD *)(a4 + 653);
  *(_DWORD *)(a3 + 84) = *(void *)(a4 + 640);
  int v6 = *(void *)(a4 + 656);
  if (v6)
  {
    uint64_t v9 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unsigned int v8 = &unk_1F2646F30;
    char v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    unint64_t v19 = (void **)&v17;
    uint64_t v16 = a3 + 88;
    int v17 = (void (**)(void **))&unk_1F260D508;
    unint64_t v18 = v6;
    off_1F260D538((uint64_t)&v17, (llvm::raw_ostream *)&v8);
    if (v19 == (void **)&v17)
    {
      v17[4]((void **)&v17);
    }
    else if (v19)
    {
      (*((void (**)(void))*v19 + 5))();
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  }
  int v7 = *(void *)(a4 + 664);
  if (v7)
  {
    uint64_t v9 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unsigned int v8 = &unk_1F2646F30;
    char v10 = 0;
    int v11 = 0;
    uint64_t v12 = 0;
    unint64_t v19 = (void **)&v17;
    uint64_t v16 = a3 + 128;
    int v17 = (void (**)(void **))&unk_1F260D508;
    unint64_t v18 = v7;
    off_1F260D538((uint64_t)&v17, (llvm::raw_ostream *)&v8);
    if (v19 == (void **)&v17)
    {
      v17[4]((void **)&v17);
    }
    else if (v19)
    {
      (*((void (**)(void))*v19 + 5))();
    }
    llvm::raw_ostream::~raw_ostream((llvm::raw_ostream *)&v8);
  }
}

llvm::raw_ostream *llvm::MIPrinter::print(llvm::MIPrinter *this, const llvm::MachineBasicBlock *a2)
{
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  llvm::MachineBasicBlock::printName(a2, *(llvm::raw_ostream **)this, 3, *((llvm::SlotTracker ***)this + 1));
  uint64_t v4 = *(llvm::raw_ostream **)this;
  uint64_t v5 = *(_WORD **)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) - (void)v5 > 1uLL)
  {
    *uint64_t v5 = 2618;
    *((void *)v4 + 4) += 2;
  }
  else
  {
    uint64_t v4 = llvm::raw_ostream::write(v4, ":\n", 2uLL);
  }
  BOOL canPredictBranchProbabilities = llvm::MIPrinter::canPredictBranchProbabilities(v4, a2);
  BOOL v7 = canPredictBranchProbabilities;
  if (*((void *)a2 + 11) == *((void *)a2 + 12))
  {
    if (!canPredictBranchProbabilities) {
      goto LABEL_10;
    }
  }
  else
  {
    if (byte_1EBCD1228) {
      BOOL v8 = canPredictBranchProbabilities;
    }
    else {
      BOOL v8 = 0;
    }
    if (!v8) {
      goto LABEL_10;
    }
  }
  double result = (llvm::raw_ostream *)llvm::MIPrinter::canPredictSuccessors((llvm::MIPrinter *)canPredictBranchProbabilities, a2);
  if (result)
  {
    int v39 = 0;
    goto LABEL_49;
  }
LABEL_10:
  uint64_t v9 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "                                                                                ", 2uLL);
  uint64_t v10 = *((void *)v9 + 4);
  if ((unint64_t)(*((void *)v9 + 3) - v10) > 0xB)
  {
    *(_DWORD *)(v10 + 8) = 540701554;
    *(void *)uint64_t v10 = *(void *)"successors: ";
    *((void *)v9 + 4) += 12;
  }
  else
  {
    llvm::raw_ostream::write(v9, "successors: ", 0xCuLL);
  }
  int v11 = (const char **)*((void *)a2 + 11);
  uint64_t v12 = (const char **)*((void *)a2 + 12);
  if (v11 != v12)
  {
    uint64_t v13 = (void (*)(uint64_t, llvm::raw_ostream *))off_1F260D538;
    do
    {
      if (v11 != *((const char ***)a2 + 11))
      {
        uint64_t v14 = *(llvm::raw_ostream **)this;
        uint64_t v15 = *(_WORD **)(*(void *)this + 32);
        if (*(void *)(*(void *)this + 24) - (void)v15 > 1uLL)
        {
          *uint64_t v15 = 8236;
          *((void *)v14 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v14, ", ", 2uLL);
        }
      }
      uint64_t v16 = *(llvm::raw_ostream **)this;
      int v17 = *v11;
      int v73 = (void **)&v70;
      uint64_t v70 = (void (**)(void **))&unk_1F260D508;
      uint64_t v71 = v17;
      v13((uint64_t)&v70, v16);
      if (v73 == (void **)&v70)
      {
        v70[4]((void **)&v70);
      }
      else if (v73)
      {
        (*((void (**)(void))*v73 + 5))();
      }
      if (byte_1EBCD1228) {
        BOOL v18 = v7;
      }
      else {
        BOOL v18 = 0;
      }
      if (!v18)
      {
        unint64_t v19 = *(llvm::raw_ostream **)this;
        uint64_t v20 = *(unsigned char **)(*(void *)this + 32);
        if ((unint64_t)v20 >= *(void *)(*(void *)this + 24))
        {
          unint64_t v19 = llvm::raw_ostream::write(v19, 40);
        }
        else
        {
          *((void *)v19 + 4) = v20 + 1;
          *uint64_t v20 = 40;
        }
        uint64_t v21 = (char *)*((void *)a2 + 14);
        uint64_t v22 = (char *)*((void *)a2 + 15);
        uint64_t v23 = *((void *)a2 + 11);
        if (v21 == v22)
        {
          unint64_t v34 = *((void *)a2 + 12) - v23;
          BOOL v35 = (v34 >> 3) == 0x80000000;
          unsigned int v36 = ((v34 >> 4) | 0x80000000) / (v34 >> 3);
          if (v35) {
            unsigned int v24 = 1;
          }
          else {
            unsigned int v24 = v36;
          }
        }
        else
        {
          unsigned int v24 = *(_DWORD *)&v21[((uint64_t)v11 - v23) >> 1];
          if (v24 == -1)
          {
            int v25 = 0;
            unsigned int v26 = 0;
            unint64_t v27 = (unsigned int *)*((void *)a2 + 14);
            do
            {
              unsigned int v29 = *v27++;
              unsigned int v28 = v29;
              unsigned int v30 = v29 + v26;
              if (v29 + (unint64_t)v26 <= 0x80000000) {
                unsigned int v31 = v30;
              }
              else {
                unsigned int v31 = 0x80000000;
              }
              if (v28 != -1)
              {
                unsigned int v26 = v31;
                ++v25;
              }
            }
            while (v27 != (unsigned int *)v22);
            unsigned int v24 = (0x80000000 - v26) / (((unint64_t)(v22 - v21) >> 2) - v25);
          }
        }
        uint64_t v70 = (void (**)(void **))&unk_1F25FED10;
        uint64_t v71 = "0x%08x";
        uint64_t v72 = v24;
        long long v32 = llvm::raw_ostream::operator<<(v19, (uint64_t)&v70);
        long long v33 = (unsigned char *)*((void *)v32 + 4);
        if ((unint64_t)v33 >= *((void *)v32 + 3))
        {
          llvm::raw_ostream::write(v32, 41);
        }
        else
        {
          *((void *)v32 + 4) = v33 + 1;
          *long long v33 = 41;
        }
      }
      ++v11;
    }
    while (v11 != v12);
  }
  double result = *(llvm::raw_ostream **)this;
  int v38 = *(unsigned char **)(*(void *)this + 32);
  if (*(unsigned char **)(*(void *)this + 24) == v38)
  {
    int v39 = 1;
    double result = llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *int v38 = 10;
    ++*((void *)result + 4);
    int v39 = 1;
  }
LABEL_49:
  uint64_t v40 = **(void **)(*((void *)a2 + 4) + 40);
  if ((**(unsigned char **)(v40 + 360) & 4) != 0 && *((void *)a2 + 19) != *((void *)a2 + 20))
  {
    uint64_t v41 = (*(uint64_t (**)(void))(**(void **)(v40 + 16) + 176))(*(void *)(v40 + 16));
    uint64_t v42 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "                                                                                ", 2uLL);
    uint64_t v43 = *((void *)v42 + 4);
    if ((unint64_t)(*((void *)v42 + 3) - v43) > 8)
    {
      *(unsigned char *)(v43 + 8) = 32;
      *(void *)uint64_t v43 = *(void *)"liveins: ";
      *((void *)v42 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v42, "liveins: ", 9uLL);
    }
    unint64_t v44 = (unsigned __int16 *)*((void *)a2 + 19);
    unint64_t v45 = (unsigned __int16 *)*((void *)a2 + 20);
    if (v45 != v44)
    {
      unint64_t v46 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
      char v47 = 1;
      do
      {
        if ((v47 & 1) == 0)
        {
          BOOL v48 = *(llvm::raw_ostream **)this;
          uint64_t v49 = *(_WORD **)(*(void *)this + 32);
          if (*(void *)(*(void *)this + 24) - (void)v49 > 1uLL)
          {
            *uint64_t v49 = 8236;
            *((void *)v48 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v48, ", ", 2uLL);
          }
        }
        uint64_t v50 = *(llvm::raw_ostream **)this;
        int v51 = *v44;
        unint64_t v52 = operator new(0x28uLL);
        *(void *)unint64_t v52 = &unk_1F26154E0;
        v52[2] = v51;
        *((void *)v52 + 2) = v41;
        v52[6] = 0;
        *((void *)v52 + 4) = 0;
        int v73 = (void **)v52;
        v46((llvm::raw_ostream *)v52, v50);
        if (v73 == (void **)&v70)
        {
          v70[4]((void **)&v70);
        }
        else if (v73)
        {
          (*((void (**)(void))*v73 + 5))();
        }
        if (*((void *)v44 + 1) != -1)
        {
          long long v53 = *(llvm::raw_ostream **)this;
          uint64_t v54 = *(void *)(*(void *)this + 32);
          if ((unint64_t)(*(void *)(*(void *)this + 24) - v54) > 2)
          {
            *(unsigned char *)(v54 + 2) = 120;
            *(_WORD *)uint64_t v54 = 12346;
            *((void *)v53 + 4) += 3;
          }
          else
          {
            long long v53 = llvm::raw_ostream::write(v53, ":0x", 3uLL);
          }
          uint64_t v55 = (const char *)*((void *)v44 + 1);
          int v73 = (void **)&v70;
          uint64_t v70 = (void (**)(void **))&unk_1F260C990;
          uint64_t v71 = v55;
          v69[0] = &unk_1F25FF808;
          v69[1] = "%016llX";
          v69[2] = v55;
          llvm::raw_ostream::operator<<(v53, (uint64_t)v69);
          if (v73 == (void **)&v70)
          {
            v70[4]((void **)&v70);
          }
          else if (v73)
          {
            (*((void (**)(void))*v73 + 5))();
          }
        }
        char v47 = 0;
        v44 += 8;
      }
      while (v44 != v45);
    }
    uint64_t v56 = *(llvm::raw_ostream **)this;
    int v57 = *(unsigned char **)(*(void *)this + 32);
    if (*(unsigned char **)(*(void *)this + 24) == v57)
    {
      llvm::raw_ostream::write(v56, "\n", 1uLL);
    }
    else
    {
      *int v57 = 10;
      ++*((void *)v56 + 4);
    }
    goto LABEL_77;
  }
  if (v39)
  {
LABEL_77:
    double result = *(llvm::raw_ostream **)this;
    uint64_t v58 = *(unsigned char **)(*(void *)this + 32);
    if (*(unsigned char **)(*(void *)this + 24) == v58)
    {
      double result = llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      *uint64_t v58 = 10;
      ++*((void *)result + 4);
    }
  }
  long long v59 = (char *)a2 + 48;
  uint64_t v60 = *((void *)a2 + 7);
  if ((char *)v60 == v59) {
    return result;
  }
  char v61 = 0;
  do
  {
    if (v61)
    {
      unint64_t v62 = *(llvm::raw_ostream **)this;
      if ((*(_WORD *)(v60 + 44) & 4) != 0)
      {
        llvm::raw_ostream::write(v62, "                                                                                ", 4uLL);
        llvm::MIPrinter::print((llvm::raw_ostream **)this, (const llvm::MachineInstr *)v60);
        goto LABEL_90;
      }
      unint64_t v63 = llvm::raw_ostream::write(v62, "                                                                                ", 2uLL);
      uint64_t v64 = (_WORD *)*((void *)v63 + 4);
      if (*((void *)v63 + 3) - (void)v64 > 1uLL)
      {
        *uint64_t v64 = 2685;
        *((void *)v63 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v63, "}\n", 2uLL);
      }
    }
    llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "                                                                                ", 2uLL);
    llvm::MIPrinter::print((llvm::raw_ostream **)this, (const llvm::MachineInstr *)v60);
    if ((*(_WORD *)(v60 + 44) & 8) == 0)
    {
      char v61 = 0;
      goto LABEL_91;
    }
    unint64_t v65 = *(llvm::raw_ostream **)this;
    unint64_t v66 = *(_WORD **)(*(void *)this + 32);
    if (*(void *)(*(void *)this + 24) - (void)v66 > 1uLL)
    {
      *unint64_t v66 = 31520;
      *((void *)v65 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v65, " {", 2uLL);
    }
LABEL_90:
    char v61 = 1;
LABEL_91:
    double result = *(llvm::raw_ostream **)this;
    int64x2_t v67 = *(unsigned char **)(*(void *)this + 32);
    if (*(unsigned char **)(*(void *)this + 24) == v67)
    {
      double result = llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      unsigned char *v67 = 10;
      ++*((void *)result + 4);
    }
    uint64_t v60 = *(void *)(v60 + 8);
  }
  while ((char *)v60 != v59);
  if (v61)
  {
    double result = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, "                                                                                ", 2uLL);
    uint64_t v68 = (_WORD *)*((void *)result + 4);
    if (*((void *)result + 3) - (void)v68 > 1uLL)
    {
      *uint64_t v68 = 2685;
      *((void *)result + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(result, "}\n", 2uLL);
    }
  }
  return result;
}

uint64_t sub_1CC3CD1B0(int a1, uint64_t a2, uint64_t a3)
{
  int v8 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v15 = a2;
  int v14 = 0;
  BOOL v7 = &unk_1F2646F30;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v5 = operator new(0x28uLL);
  *(void *)uint64_t v5 = &unk_1F26154E0;
  void v5[2] = a1;
  *((void *)v5 + 2) = a3;
  v5[6] = 0;
  *((void *)v5 + 4) = 0;
  off_1F2615510((llvm::raw_ostream *)v5, (llvm::raw_ostream *)&v7);
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 40))(v5);
  BOOL v7 = &unk_1F2646B98;
  if (v14 == 1)
  {
    uint64_t result = v9;
    if (v9) {
      return MEMORY[0x1D25D9CB0](v9, 0x1000C8077774924);
    }
  }
  return result;
}

uint64_t sub_1CC3CD2E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v7 = (long long *)(a3 + 8);
  int v6 = *(_DWORD *)a3;
  uint64_t v16 = 0;
  uint64_t result = sub_1CC3D0C9C(*(void *)a2, *(_DWORD *)(a2 + 16), v6, &v16);
  uint64_t v9 = v16;
  if (result)
  {
    char v10 = 0;
    goto LABEL_8;
  }
  int v11 = *(_DWORD *)(a2 + 8);
  unsigned int v12 = *(_DWORD *)(a2 + 16);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_10;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 12) <= v12 >> 3)
  {
LABEL_10:
    sub_1CC3D0D38(a2, v12);
    uint64_t v16 = 0;
    uint64_t result = sub_1CC3D0C9C(*(void *)a2, *(_DWORD *)(a2 + 16), *(_DWORD *)a3, &v16);
    uint64_t v9 = v16;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(_DWORD *)v9 != 0x7FFFFFFF) {
    --*(_DWORD *)(a2 + 12);
  }
  *(_DWORD *)uint64_t v9 = *(_DWORD *)a3;
  long long v13 = *v7;
  *(void *)(v9 + 24) = *((void *)v7 + 2);
  *(_OWORD *)(v9 + 8) = v13;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)BOOL v7 = 0;
  int v14 = *(_DWORD *)(a3 + 32);
  *(unsigned char *)(v9 + 36) = *(unsigned char *)(a3 + 36);
  *(_DWORD *)(v9 + 32) = v14;
  char v10 = 1;
LABEL_8:
  uint64_t v15 = *(void *)a2 + 40 * *(unsigned int *)(a2 + 16);
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v10;
  return result;
}

void sub_1CC3CD41C(uint64_t *a1, void *a2)
{
  unint64_t v4 = a1[2];
  uint64_t v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *a1) >> 5;
    if ((unint64_t)(v7 + 1) >> 59) {
      abort();
    }
    uint64_t v8 = v4 - *a1;
    uint64_t v9 = v8 >> 4;
    if (v8 >> 4 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v21 = a1 + 2;
    if (v10 >> 59) {
      sub_1CB833614();
    }
    int v11 = (char *)operator new(32 * v10);
    unsigned int v12 = &v11[32 * v7];
    long long __p = v11;
    BOOL v18 = v12;
    uint64_t v20 = &v11[32 * v10];
    uint64_t v13 = a2[1];
    *(void *)unsigned int v12 = *a2;
    *((void *)v12 + 1) = 0;
    *((void *)v12 + 2) = 0;
    *((void *)v12 + 3) = 0;
    sub_1CC3D0450((void *)v12 + 1, v13, a2[2], 0xAAAAAAAAAAAAAAABLL * ((a2[2] - v13) >> 4));
    unint64_t v19 = v12 + 32;
    sub_1CD564D34(a1, &__p);
    int v6 = (void *)a1[1];
    uint64_t v15 = v18;
    int v14 = v19;
    if (v19 != v18)
    {
      do
      {
        uint64_t v16 = v14 - 32;
        uint64_t v22 = (void **)(v14 - 24);
        sub_1CC3CE3C8(&v22);
        int v14 = v16;
      }
      while (v16 != v15);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    void v5[2] = 0;
    v5[3] = 0;
    v5[1] = 0;
    sub_1CC3D0450(v5 + 1, a2[1], a2[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[2] - a2[1]) >> 4));
    int v6 = v5 + 4;
  }
  a1[1] = (uint64_t)v6;
}

_OWORD *sub_1CC3CD584(unint64_t *a1, long long *a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    unint64_t v11 = *a1;
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      abort();
    }
    int v14 = 0;
    unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v11) >> 3);
    if (2 * v15 > v13) {
      unint64_t v13 = 2 * v15;
    }
    if (v15 >= 0x1C71C71C71C71C7) {
      unint64_t v16 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v16 = v13;
    }
    unint64_t v28 = 0;
    unsigned int v29 = a1 + 2;
    if (v16)
    {
      if (v16 > 0x38E38E38E38E38ELL) {
        sub_1CB833614();
      }
      int v14 = (char *)operator new(72 * v16);
    }
    int v17 = &v14[72 * v12];
    *(_OWORD *)int v17 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    BOOL v18 = v17 + 24;
    if (*((char *)a2 + 47) < 0)
    {
      sub_1CB8BDF7C((uint64_t)v18, *((const void **)a2 + 3), *((void *)a2 + 4));
      unint64_t v11 = *a1;
      unint64_t v5 = a1[1];
    }
    else
    {
      *BOOL v18 = *(long long *)((char *)a2 + 24);
      *((void *)v17 + 5) = *((void *)a2 + 5);
    }
    unint64_t v19 = &v14[72 * v12];
    *((_OWORD *)v19 + 3) = a2[3];
    *((_WORD *)v19 + 32) = *((_WORD *)a2 + 32);
    v19[66] = *((unsigned char *)a2 + 66);
    if (v5 == v11)
    {
      int64x2_t v20 = vdupq_n_s64(v11);
      uint64_t v21 = &v14[72 * v12];
    }
    else
    {
      uint64_t v21 = &v14[72 * v12];
      do
      {
        long long v22 = *(_OWORD *)(v5 - 72);
        *((void *)v21 - 7) = *(void *)(v5 - 56);
        *(_OWORD *)(v21 - 72) = v22;
        long long v23 = *(_OWORD *)(v5 - 48);
        *((void *)v21 - 4) = *(void *)(v5 - 32);
        *((_OWORD *)v21 - 3) = v23;
        *(void *)(v5 - 40) = 0;
        *(void *)(v5 - 32) = 0;
        *(void *)(v5 - 48) = 0;
        *(_OWORD *)(v21 - 24) = *(_OWORD *)(v5 - 24);
        __int16 v24 = *(_WORD *)(v5 - 8);
        *(v21 - 6) = *(unsigned char *)(v5 - 6);
        *((_WORD *)v21 - 4) = v24;
        v21 -= 72;
        v5 -= 72;
      }
      while (v5 != v11);
      int64x2_t v20 = *(int64x2_t *)a1;
    }
    unint64_t v10 = (unint64_t)(v17 + 72);
    *a1 = (unint64_t)v21;
    a1[1] = (unint64_t)(v17 + 72);
    int64x2_t v27 = v20;
    unint64_t v25 = a1[2];
    a1[2] = (unint64_t)&v14[72 * v16];
    unint64_t v28 = v25;
    uint64_t v26 = v20.i64[0];
    uint64_t result = (_OWORD *)sub_1CD565C10((uint64_t)&v26);
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v6;
    uint64_t result = (_OWORD *)(v5 + 24);
    if (*((char *)a2 + 47) < 0)
    {
      uint64_t result = sub_1CB8BDF7C((uint64_t)result, *((const void **)a2 + 3), *((void *)a2 + 4));
    }
    else
    {
      long long v8 = *(long long *)((char *)a2 + 24);
      *(void *)(v5 + 40) = *((void *)a2 + 5);
      *uint64_t result = v8;
    }
    *(_OWORD *)(v5 + 48) = a2[3];
    __int16 v9 = *((_WORD *)a2 + 32);
    *(unsigned char *)(v5 + 66) = *((unsigned char *)a2 + 66);
    *(_WORD *)(v5 + 64) = v9;
    unint64_t v10 = v5 + 72;
  }
  a1[1] = v10;
  return result;
}

void sub_1CC3CD7D8(uint64_t *a1, long long *a2)
{
  unint64_t v4 = a1[2];
  unint64_t v5 = a1[1];
  if (v5 >= v4)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (v8 + 1 > 0x555555555555555) {
      abort();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v10;
    }
    long long v23 = a1 + 2;
    if (v11 > 0x555555555555555) {
      sub_1CB833614();
    }
    uint64_t v12 = 3 * v11;
    unint64_t v13 = (char *)operator new(48 * v11);
    int v14 = &v13[48 * v8];
    long long __p = v13;
    int64x2_t v20 = v14;
    long long v22 = &v13[16 * v12];
    *(_OWORD *)int v14 = *a2;
    uint64_t v15 = *((void *)a2 + 3);
    *((void *)v14 + 2) = *((void *)a2 + 2);
    *((void *)v14 + 3) = 0;
    *((void *)v14 + 4) = 0;
    *((void *)v14 + 5) = 0;
    sub_1CC3CF1E0((void *)v14 + 3, v15, *((void *)a2 + 4), 0xCCCCCCCCCCCCCCCDLL * ((*((void *)a2 + 4) - v15) >> 3));
    uint64_t v21 = v14 + 48;
    sub_1CD566CD8(a1, &__p);
    uint64_t v7 = a1[1];
    int v17 = v20;
    unint64_t v16 = v21;
    if (v21 != v20)
    {
      do
      {
        BOOL v18 = v16 - 48;
        __int16 v24 = (void **)(v16 - 24);
        sub_1CC3CDF68(&v24);
        unint64_t v16 = v18;
      }
      while (v18 != v17);
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v5 = v6;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 40) = 0;
    *(void *)(v5 + 24) = 0;
    sub_1CC3CF1E0((void *)(v5 + 24), *((void *)a2 + 3), *((void *)a2 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
    uint64_t v7 = v5 + 48;
  }
  a1[1] = v7;
}

void llvm::MIPrinter::print(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = a3;
  int v17 = (llvm::raw_ostream *)(v15 + 32 * a3);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a5 + 776))(v60, a5);
  int v19 = *(_DWORD *)v17;
  switch(*(_DWORD *)v17)
  {
    case 0u:
    case 2u:
    case 3u:
    case 4u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
      goto LABEL_2;
    case 1u:
      int v31 = **(unsigned __int16 **)(a2 + 16);
      if (a3 == 2 && v31 == 8 || a3 == 3 && v31 == 9) {
        goto LABEL_48;
      }
      BOOL v32 = (a3 & 1) == 0;
      if (a3 <= 1 || v31 != 18) {
        BOOL v32 = 0;
      }
      BOOL v34 = v31 == 11 && a3 == 3;
      if (v34 || v32)
      {
LABEL_48:
        llvm::MachineOperand::printTargetFlags(*(llvm::raw_ostream **)a1, v17, v18);
        llvm::MachineOperand::printSubRegIdx(*(llvm::MachineOperand **)a1, *(llvm::raw_ostream **)(v15 + 32 * v16 + 16), (uint64_t)a4, v36);
      }
      else
      {
LABEL_2:
        if (!a6 || ((v19 & 0x10000FF) == 0 ? (BOOL v20 = (v19 & 0xF00000) == 0) : (BOOL v20 = 1), v20)) {
          unsigned int TiedOperandIdx = 0;
        }
        else {
          unsigned int TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(*(llvm::MachineInstr **)(v15 + 32 * v16 + 8), a3);
        }
        uint64_t v22 = *(void *)(*(void *)(*(void *)(a2 + 24) + 32) + 8);
        uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 56))(v22);
        llvm::MachineOperand::print(v17, *(llvm::MachineOperand **)a1, *(const llvm::Function ***)(a1 + 8), a7, v16, a8, 0, a6, TiedOperandIdx, (uint64_t)a4, v23);
        __int16 v24 = *(llvm::raw_ostream **)a1;
        if (SHIBYTE(v61) < 0)
        {
          sub_1CB8BDF7C((uint64_t)v56, v60[0], (unint64_t)v60[1]);
        }
        else
        {
          *(_OWORD *)uint64_t v56 = *(_OWORD *)v60;
          uint64_t v57 = v61;
        }
        unint64_t v25 = (void *)(HIBYTE(v57) & 0x7F);
        if (v57 < 0) {
          unint64_t v25 = v56[1];
        }
        if (v25)
        {
          std::operator+<char>();
          uint64_t v26 = std::string::append(&v62, " */");
          std::string::size_type v27 = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long __p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          uint64_t v59 = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v62.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)v56;
          uint64_t v59 = v57;
          v56[1] = 0;
          uint64_t v57 = 0;
          v56[0] = 0;
        }
        if (v59 >= 0) {
          unint64_t v28 = __p;
        }
        else {
          unint64_t v28 = (void **)__p[0];
        }
        if (v59 >= 0) {
          size_t v29 = HIBYTE(v59) & 0x7F;
        }
        else {
          size_t v29 = (size_t)__p[1];
        }
        llvm::raw_ostream::write(v24, (const char *)v28, v29);
        if (SHIBYTE(v59) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v57) < 0)
        {
          unsigned int v30 = v56[0];
          goto LABEL_28;
        }
      }
      break;
    case 5u:
      llvm::MIPrinter::printStackObjectReference((llvm::MIPrinter *)a1, *(_DWORD *)(v15 + 32 * v16 + 16));
      break;
    case 0xCu:
      uint64_t v37 = *(void *)(a1 + 16);
      uint64_t v38 = v15 + 32 * v16;
      uint64_t v40 = *(void *)(v38 + 16);
      int v39 = (uint64_t *)(v38 + 16);
      v62.__r_.__value_.__r.__words[0] = 0;
      if (sub_1CD40EA84(*(void *)v37, *(_DWORD *)(v37 + 16), v40, &v62)) {
        uint64_t v41 = v62.__r_.__value_.__r.__words[0];
      }
      else {
        uint64_t v41 = *(void *)v37 + 16 * *(unsigned int *)(v37 + 16);
      }
      if (v41 == **(void **)(a1 + 16) + 16 * *(unsigned int *)(*(void *)(a1 + 16) + 16))
      {
        uint64_t v46 = *v39;
        char v47 = *(llvm::raw_ostream **)a1;
        BOOL v48 = (void *)*((void *)v47 + 4);
        if (*((void *)v47 + 3) - (void)v48 > 0xDuLL)
        {
          qmemcpy(v48, "CustomRegMask(", 14);
          *((void *)v47 + 4) += 14;
        }
        else
        {
          llvm::raw_ostream::write(v47, "CustomRegMask(", 0xEuLL);
        }
        uint64_t v49 = a4[4];
        if ((int)v49 >= 1)
        {
          uint64_t v50 = 0;
          char v51 = 0;
          unint64_t v52 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
          do
          {
            if ((*(_DWORD *)(v46 + 4 * (v50 >> 5)) >> v50))
            {
              if (v51)
              {
                long long v53 = (unsigned char *)*((void *)v47 + 4);
                if ((unint64_t)v53 >= *((void *)v47 + 3))
                {
                  llvm::raw_ostream::write(v47, 44);
                }
                else
                {
                  *((void *)v47 + 4) = v53 + 1;
                  unsigned char *v53 = 44;
                }
              }
              uint64_t v54 = (std::string *)operator new(0x28uLL);
              v54->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F26154E0;
              LODWORD(v54->__r_.__value_.__r.__words[1]) = v50;
              v54->__r_.__value_.__r.__words[2] = (std::string::size_type)a4;
              LODWORD(v54[1].__r_.__value_.__l.__data_) = 0;
              v54[1].__r_.__value_.__l.__size_ = 0;
              unint64_t v63 = v54;
              v52((llvm::raw_ostream *)v54, v47);
              if (v63 == &v62)
              {
                (*(void (**)(std::string *))(v62.__r_.__value_.__r.__words[0] + 32))(&v62);
              }
              else if (v63)
              {
                (*(void (**)(void))(v63->__r_.__value_.__r.__words[0] + 40))();
              }
              char v51 = 1;
            }
            ++v50;
          }
          while (v49 != v50);
        }
        uint64_t v55 = (unsigned char *)*((void *)v47 + 4);
        if ((unint64_t)v55 >= *((void *)v47 + 3))
        {
          llvm::raw_ostream::write(v47, 41);
        }
        else
        {
          *((void *)v47 + 4) = v55 + 1;
          *uint64_t v55 = 41;
        }
      }
      else
      {
        uint64_t v42 = *(llvm::raw_ostream **)a1;
        uint64_t v43 = *(void **)((*(uint64_t (**)(unsigned int *))(*(void *)a4 + 80))(a4)
                       + 8 * *(unsigned int *)(v41 + 8));
        __p[0] = v43;
        if (v43) {
          uint64_t v43 = (void *)strlen((const char *)v43);
        }
        __p[1] = v43;
        llvm::StringRef::lower((llvm::StringRef *)__p, &v62);
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v44 = &v62;
        }
        else {
          unint64_t v44 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t size = *((unsigned char *)&v62.__r_.__value_.__s + 23) & 0x7F;
        }
        else {
          size_t size = v62.__r_.__value_.__l.__size_;
        }
        llvm::raw_ostream::write(v42, (const char *)v44, size);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        {
          unsigned int v30 = (void *)v62.__r_.__value_.__r.__words[0];
LABEL_28:
          operator delete(v30);
        }
      }
      break;
    default:
      break;
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(v60[0]);
  }
}

void sub_1CC3CDF68(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 17) < 0) {
          operator delete(*(v4 - 5));
        }
        v4 -= 5;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3CDFF4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 48;
        uint64_t v7 = (void **)(v4 - 24);
        sub_1CC3CDF68(&v7);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3CE090(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = v4 - 32;
        uint64_t v7 = (void **)(v4 - 24);
        sub_1CC3CE3C8(&v7);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3CE12C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0) {
          operator delete(*(v4 - 6));
        }
        v4 -= 9;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3CE1B8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD55ED8C(v4 - 280);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3CE23C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD55ED28(v4 - 232);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3CE2C0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD55ECE4(v4 - 80);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3CE344(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1CD55ECA0(v4 - 104);
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1CC3CE3C8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 25) < 0) {
          operator delete(*(v4 - 6));
        }
        v4 -= 6;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *sub_1CC3CE454(void **a1, uint64_t a2)
{
  uint64_t v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - (unsigned char *)*a1) >> 2);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xCCCCCCCCCCCCCCCLL) {
    abort();
  }
  if (0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 2) > v5) {
    unint64_t v5 = 0x999999999999999ALL * (((unsigned char *)a1[2] - v3) >> 2);
  }
  if (0xCCCCCCCCCCCCCCCDLL * (((unsigned char *)a1[2] - v3) >> 2) >= 0x666666666666666) {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    if (v8 > 0xCCCCCCCCCCCCCCCLL) {
      sub_1CB833614();
    }
    unint64_t v9 = (char *)operator new(20 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = &v9[20 * v4];
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
  unint64_t v11 = v10 + 20;
  if (v2 != v3)
  {
    do
    {
      long long v12 = *(_OWORD *)(v2 - 20);
      *((_DWORD *)v10 - 1) = *((_DWORD *)v2 - 1);
      *(_OWORD *)(v10 - 20) = v12;
      v10 -= 20;
      v2 -= 20;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v10;
  a1[1] = v11;
  a1[2] = &v9[20 * v8];
  if (v2) {
    operator delete(v2);
  }
  return v11;
}

const char *sub_1CC3CE570(unsigned __int8 *a1, uint64_t a2, _WORD *a3)
{
  if (!a2) {
    return "invalid number";
  }
  uint64_t v3 = a2;
  unint64_t v5 = 0;
  uint64_t result = "invalid number";
  while (1)
  {
    int v7 = *a1;
    if ((v7 - 48) >= 0xA)
    {
      if ((v7 - 97) >= 0x1A)
      {
        if ((v7 - 65) > 0x19) {
          return result;
        }
        int v8 = -55;
      }
      else
      {
        int v8 = -87;
      }
    }
    else
    {
      int v8 = -48;
    }
    unsigned int v9 = v8 + v7;
    if (v9 > 9) {
      break;
    }
    unint64_t v10 = 10 * v5 + v9;
    if (v5 > v10 / 0xA) {
      break;
    }
    ++a1;
    unint64_t v5 = v10;
    if (!--v3)
    {
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL) {
          return "must be 0 or a power of two";
        }
      }
      uint64_t result = 0;
      int v12 = __clz(v10) ^ 0x3F | 0x100;
      if (!v10) {
        LOWORD(v12) = 0;
      }
      *a3 = v12;
      return result;
    }
  }
  return result;
}

uint64_t sub_1CC3CE668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v5 = a1;
  while (*(_DWORD *)v5 == *(_DWORD *)a3)
  {
    char v6 = *(unsigned char *)(v5 + 47);
    uint64_t v7 = v6 & 0x7F;
    if (v6 >= 0) {
      uint64_t v8 = v6 & 0x7F;
    }
    else {
      uint64_t v8 = *(void *)(v5 + 32);
    }
    char v9 = *(unsigned char *)(a3 + 47);
    int v10 = v9;
    uint64_t v11 = v9 & 0x7F;
    if (v10 < 0) {
      uint64_t v11 = *(void *)(a3 + 32);
    }
    if (v8 != v11) {
      break;
    }
    if (v10 >= 0) {
      int v12 = (unsigned __int8 *)(a3 + 24);
    }
    else {
      int v12 = *(unsigned __int8 **)(a3 + 24);
    }
    if ((*(unsigned char *)(v5 + 47) & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v5 + 24), v12, *(void *)(v5 + 32))) {
        return 0;
      }
    }
    else if ((v6 & 0x7F) != 0)
    {
      uint64_t v13 = 0;
      while (*(unsigned __int8 *)(v5 + v13 + 24) == v12[v13])
      {
        if (v7 == ++v13) {
          goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_20:
    char v14 = *(unsigned char *)(v5 + 87);
    uint64_t v15 = v14 & 0x7F;
    if (v14 >= 0) {
      uint64_t v16 = v14 & 0x7F;
    }
    else {
      uint64_t v16 = *(void *)(v5 + 72);
    }
    char v17 = *(unsigned char *)(a3 + 87);
    int v18 = v17;
    uint64_t v19 = v17 & 0x7F;
    if (v18 < 0) {
      uint64_t v19 = *(void *)(a3 + 72);
    }
    if (v16 != v19) {
      return 0;
    }
    if (v18 >= 0) {
      BOOL v20 = (unsigned __int8 *)(a3 + 64);
    }
    else {
      BOOL v20 = *(unsigned __int8 **)(a3 + 64);
    }
    if ((*(unsigned char *)(v5 + 87) & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v5 + 64), v20, *(void *)(v5 + 72))) {
        return 0;
      }
    }
    else if ((v14 & 0x7F) != 0)
    {
      uint64_t v21 = 0;
      while (*(unsigned __int8 *)(v5 + v21 + 64) == v20[v21])
      {
        if (v15 == ++v21) {
          goto LABEL_36;
        }
      }
      return 0;
    }
LABEL_36:
    v5 += 104;
    a3 += 104;
    if (v5 == a2) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1CC3CE7E0(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  char v6 = a2;
  uint64_t v8 = *(void **)a1;
  if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1CD560848((void **)a1);
    if (a4 > 0x276276276276276) {
      goto LABEL_22;
    }
    unint64_t v14 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v14 <= a4) {
      unint64_t v14 = a4;
    }
    unint64_t v15 = (unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x13B13B13B13B13BLL
        ? 0x276276276276276
        : v14;
    if (v15 > 0x276276276276276) {
LABEL_22:
    }
      abort();
    uint64_t v16 = 104 * v15;
    uint64_t result = (uint64_t)operator new(104 * v15);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = result + v16;
    while (v6 != a3)
    {
      uint64_t v17 = sub_1CD5608A8(result, v6);
      char v6 = (long long *)((char *)v6 + 104);
      uint64_t result = v17 + 104;
    }
    *(void *)(a1 + 8) = result;
  }
  else if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3) >= a4)
  {
    uint64_t v13 = sub_1CC3CE988(a2, a3, (uint64_t)v8);
    for (uint64_t result = *(void *)(a1 + 8); result != v13; uint64_t result = sub_1CD55ECA0(result - 104))
      ;
    *(void *)(a1 + 8) = v13;
  }
  else
  {
    char v9 = (long long *)((char *)a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3));
    uint64_t result = sub_1CC3CE988(a2, v9, (uint64_t)v8);
    uint64_t v11 = *(void *)(a1 + 8);
    if (v9 != a3)
    {
      uint64_t result = *(void *)(a1 + 8);
      do
      {
        uint64_t v12 = sub_1CD5608A8(result, v9);
        char v9 = (long long *)((char *)v9 + 104);
        uint64_t result = v12 + 104;
        v11 += 104;
      }
      while (v9 != a3);
    }
    *(void *)(a1 + 8) = v11;
  }
  return result;
}

uint64_t sub_1CC3CE988(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      std::string::operator=((std::string *)(a3 + 24), (const std::string *)v5 + 1);
      *(_OWORD *)(a3 + 48) = v5[3];
      std::string::operator=((std::string *)(a3 + 64), (const std::string *)(v5 + 4));
      *(_OWORD *)(a3 + 88) = *(long long *)((char *)v5 + 88);
      a3 += 104;
      uint64_t v5 = (long long *)((char *)v5 + 104);
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1CC3CEA0C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  uint64_t v5 = a1;
  if (a1 == a2) {
    return 1;
  }
  for (uint64_t i = a3; ; i += 80)
  {
    char v7 = *(unsigned char *)(v5 + 23);
    uint64_t v8 = v7 & 0x7F;
    if (v7 >= 0) {
      uint64_t v9 = v7 & 0x7F;
    }
    else {
      uint64_t v9 = *(void *)(v5 + 8);
    }
    unsigned __int8 v10 = i[23];
    int v11 = (char)v10;
    uint64_t v12 = v10 & 0x7F;
    if (v11 < 0) {
      uint64_t v12 = *((void *)i + 1);
    }
    if (v9 != v12) {
      break;
    }
    if (v11 >= 0) {
      uint64_t v13 = i;
    }
    else {
      uint64_t v13 = *(unsigned __int8 **)i;
    }
    if ((*(unsigned char *)(v5 + 23) & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v13, *(void *)(v5 + 8))) {
        return 0;
      }
    }
    else if ((v7 & 0x7F) != 0)
    {
      uint64_t v14 = 0;
      while (*(unsigned __int8 *)(v5 + v14) == v13[v14])
      {
        if (v8 == ++v14) {
          goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_20:
    char v15 = *(unsigned char *)(v5 + 63);
    uint64_t v16 = v15 & 0x7F;
    if (v15 >= 0) {
      uint64_t v17 = v15 & 0x7F;
    }
    else {
      uint64_t v17 = *(void *)(v5 + 48);
    }
    unsigned __int8 v18 = i[63];
    int v19 = (char)v18;
    uint64_t v20 = v18 & 0x7F;
    if (v19 < 0) {
      uint64_t v20 = *((void *)i + 6);
    }
    if (v17 != v20) {
      return 0;
    }
    if (v19 >= 0) {
      uint64_t v21 = i + 40;
    }
    else {
      uint64_t v21 = (unsigned __int8 *)*((void *)i + 5);
    }
    if ((*(unsigned char *)(v5 + 63) & 0x80) != 0)
    {
      if (memcmp(*(const void **)(v5 + 40), v21, *(void *)(v5 + 48))) {
        return 0;
      }
    }
    else if ((v15 & 0x7F) != 0)
    {
      uint64_t v22 = 0;
      while (*(unsigned __int8 *)(v5 + v22 + 40) == v21[v22])
      {
        if (v16 == ++v22) {
          goto LABEL_36;
        }
      }
      return 0;
    }
LABEL_36:
    v5 += 80;
    uint64_t result = 1;
    if (v5 == a2) {
      return result;
    }
  }
  return 0;
}

std::string *sub_1CC3CEB84(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  long long v6 = (long long *)__str;
  uint64_t v8 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_1CD560F60((void **)a1);
    if (a4 > 0x333333333333333) {
      goto LABEL_22;
    }
    unint64_t v14 = 0x999999999999999ALL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v14 <= a4) {
      unint64_t v14 = a4;
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x199999999999999
        ? 0x333333333333333
        : v14;
    if (v15 > 0x333333333333333) {
LABEL_22:
    }
      abort();
    uint64_t v16 = 5 * v15;
    uint64_t result = (std::string *)operator new(80 * v15);
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = (char *)result + 16 * v16;
    while (v6 != (long long *)a3)
    {
      uint64_t v17 = sub_1CD560FC0((uint64_t)result, v6);
      v6 += 5;
      uint64_t result = (std::string *)(v17 + 80);
    }
    *(void *)(a1 + 8) = result;
  }
  else if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 4) >= a4)
  {
    uint64_t v13 = sub_1CC3CED08(__str, a3, v8);
    for (uint64_t result = *(std::string **)(a1 + 8);
          result != v13;
    *(void *)(a1 + 8) = v13;
  }
  else
  {
    uint64_t v9 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 4));
    uint64_t result = sub_1CC3CED08(__str, v9, v8);
    uint64_t v11 = *(void *)(a1 + 8);
    if (v9 != a3)
    {
      uint64_t result = *(std::string **)(a1 + 8);
      do
      {
        uint64_t v12 = sub_1CD560FC0((uint64_t)result, (long long *)v9);
        uint64_t v9 = (std::string *)((char *)v9 + 80);
        uint64_t result = (std::string *)(v12 + 80);
        v11 += 80;
      }
      while (v9 != a3);
    }
    *(void *)(a1 + 8) = v11;
  }
  return result;
}

std::string *sub_1CC3CED08(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[1].__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)((char *)this + 40), (std::string *)((char *)v5 + 40));
      *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = *(_OWORD *)&v5[2].__r_.__value_.__r.__words[2];
      this = (std::string *)((char *)this + 80);
      uint64_t v5 = (std::string *)((char *)v5 + 80);
    }
    while (v5 != a2);
  }
  return this;
}

uint64_t sub_1CC3CED7C(llvm::yaml::IO *a1, int64x2_t *a2, uint64_t a3)
{
  uint64_t v21 = 0;
  char v20 = 1;
  unsigned int v6 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  if (a2[1].i8[8]) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  if (((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1) & 1) == 0)
  {
    if (a2[1].i8[8]) {
      goto LABEL_8;
    }
    a2->i64[0] = 0;
    a2->i64[1] = 0;
    a2[1].i64[0] = 0;
    memset(v19, 0, sizeof(v19));
    a2[1].i8[8] = 1;
    uint64_t v22 = (void **)v19;
    sub_1CC3CDF68(&v22);
  }
  if (!a2[1].i8[8]) {
    return sub_1CD561254((uint64_t)a2, a3);
  }
LABEL_8:
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, void, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, "calleeSavedRegisters", 0, v7, &v20, &v21);
  if (!result)
  {
    if (!v20) {
      return result;
    }
    return sub_1CD561254((uint64_t)a2, a3);
  }
  if ((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    goto LABEL_30;
  }
  uint64_t v9 = *((void *)a1 + 37);
  if (!v9) {
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10 || *(_DWORD *)(v10 + 32) != 1) {
    goto LABEL_30;
  }
  uint64_t v12 = *(int **)(v10 + 72);
  unint64_t v13 = *(void *)(v10 + 80);
  unint64_t v14 = v13;
  do
  {
    unint64_t v15 = v14;
    if (!v14) {
      break;
    }
    --v14;
  }
  while (*((unsigned char *)v12 + v15 - 1) == 32);
  if (v15 < v13) {
    unint64_t v13 = v15;
  }
  if (v13 == 6
    && ((v16 = *v12, int v17 = *((unsigned __int16 *)v12 + 2), v16 == 1852796476) ? (v18 = v17 == 15973) : (v18 = 0), v18))
  {
    sub_1CD561254((uint64_t)a2, a3);
  }
  else
  {
LABEL_30:
    sub_1CD56104C(a1, a2);
  }
  return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v21);
}

void sub_1CC3CEF98(void ***a1, std::string *__str, std::string *a3, unint64_t a4)
{
  unsigned int v6 = __str;
  uint64_t v8 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * (a1[2] - *a1) < a4)
  {
    sub_1CD5611E4((void **)a1);
    if (a4 > 0x666666666666666) {
      goto LABEL_38;
    }
    unint64_t v17 = 0x999999999999999ALL * (a1[2] - *a1);
    if (v17 <= a4) {
      unint64_t v17 = a4;
    }
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (a1[2] - *a1) >= 0x333333333333333 ? 0x666666666666666 : v17;
    if (v18 > 0x666666666666666) {
LABEL_38:
    }
      abort();
    uint64_t v19 = 5 * v18;
    char v20 = (char *)operator new(40 * v18);
    *a1 = (void **)v20;
    a1[1] = (void **)v20;
    a1[2] = (void **)&v20[8 * v19];
    while (v6 != a3)
    {
      if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1CB8BDF7C((uint64_t)v20, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)char v20 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        *((void *)v20 + 2) = *((void *)&v6->__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v20 + 24) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
      unsigned int v6 = (std::string *)((char *)v6 + 40);
      v20 += 40;
    }
    a1[1] = (void **)v20;
  }
  else
  {
    uint64_t v9 = a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * (v9 - v8) >= a4)
    {
      if (__str == a3)
      {
        int v16 = *a1;
      }
      else
      {
        int v16 = *a1;
        do
        {
          std::string::operator=((std::string *)v8, v6);
          *(_OWORD *)(v8 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          v16 += 5;
          unsigned int v6 = (std::string *)((char *)v6 + 40);
          v8 += 5;
        }
        while (v6 != a3);
        uint64_t v9 = a1[1];
      }
      while (v9 != v16)
      {
        if (*((char *)v9 - 17) < 0) {
          operator delete(*(v9 - 5));
        }
        v9 -= 5;
      }
      a1[1] = v16;
    }
    else
    {
      uint64_t v10 = (std::string *)((char *)__str + 8 * (v9 - v8));
      if (v9 != v8)
      {
        do
        {
          std::string::operator=((std::string *)v8, v6);
          *(_OWORD *)(v8 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          unsigned int v6 = (std::string *)((char *)v6 + 40);
          v8 += 5;
        }
        while (v6 != v10);
        uint64_t v8 = a1[1];
      }
      uint64_t v11 = (char *)v8;
      if (v10 != a3)
      {
        uint64_t v12 = 0;
        do
        {
          uint64_t v13 = (uint64_t)&v8[v12];
          unint64_t v14 = (char *)v10 + v12 * 8;
          if (SHIBYTE(v10->__r_.__value_.__r.__words[v12 + 2]) < 0)
          {
            sub_1CB8BDF7C(v13, *(const void **)v14, *((void *)v14 + 1));
          }
          else
          {
            long long v15 = *(_OWORD *)v14;
            *(void *)(v13 + 16) = *((void *)v14 + 2);
            *(_OWORD *)uint64_t v13 = v15;
          }
          *(_OWORD *)&v8[v12 + 3] = *(_OWORD *)((char *)&v10[1].__r_.__value_.__l.__data_ + v12 * 8);
          v12 += 5;
        }
        while ((std::string *)((char *)v10 + v12 * 8) != a3);
        uint64_t v11 = (char *)&v8[v12];
      }
      a1[1] = (void **)v11;
    }
  }
}

void *sub_1CC3CF1E0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x666666666666667) {
      abort();
    }
    unsigned int v6 = result;
    uint64_t v7 = 5 * a4;
    uint64_t result = operator new(40 * a4);
    uint64_t v8 = (uint64_t)result;
    *unsigned int v6 = result;
    v6[1] = result;
    void v6[2] = &result[v7];
    while (a2 != a3)
    {
      if (*(char *)(a2 + 23) < 0)
      {
        uint64_t result = sub_1CB8BDF7C(v8, *(const void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
        *(void *)(v8 + 16) = *(void *)(a2 + 16);
      }
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
      a2 += 40;
      v8 += 40;
    }
    v6[1] = v8;
  }
  return result;
}

void sub_1CC3CF298(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (0x34F72C234F72C235 * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = v4 + 232 * a2;
      do
      {
        *(_OWORD *)(v4 + 64) = 0uLL;
        *(_OWORD *)(v4 + 80) = 0uLL;
        *(_OWORD *)(v4 + 32) = 0uLL;
        *(_OWORD *)(v4 + 48) = 0uLL;
        *(_OWORD *)uint64_t v4 = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        *(_OWORD *)(v4 + 96) = 0uLL;
        *(_OWORD *)(v4 + 112) = 0uLL;
        *(unsigned char *)(v4 + 104) = 1;
        *(_OWORD *)(v4 + 128) = 0uLL;
        *(_OWORD *)(v4 + 144) = 0uLL;
        *(_OWORD *)(v4 + 160) = 0uLL;
        *(_OWORD *)(v4 + 176) = 0uLL;
        *(_OWORD *)(v4 + 192) = 0uLL;
        *(_OWORD *)(v4 + 208) = 0uLL;
        *(void *)(v4 + 224) = 0;
        v4 += 232;
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v6 = 0x34F72C234F72C235 * ((v4 - *a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x11A7B9611A7B961) {
      abort();
    }
    unint64_t v8 = 0x34F72C234F72C235 * ((v5 - *a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x8D3DCB08D3DCB0) {
      unint64_t v9 = 0x11A7B9611A7B961;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x11A7B9611A7B961) {
        sub_1CB833614();
      }
      uint64_t v10 = (char *)operator new(232 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v12 = (uint64_t)&v10[232 * v6];
    unint64_t v13 = v12 + 232 * a2;
    uint64_t v14 = v12;
    do
    {
      *(_OWORD *)(v14 + 64) = 0uLL;
      *(_OWORD *)(v14 + 80) = 0uLL;
      *(_OWORD *)(v14 + 32) = 0uLL;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)(v14 + 16) = 0uLL;
      *(_OWORD *)(v14 + 96) = 0uLL;
      *(_OWORD *)(v14 + 112) = 0uLL;
      *(unsigned char *)(v14 + 104) = 1;
      *(_OWORD *)(v14 + 128) = 0uLL;
      *(_OWORD *)(v14 + 144) = 0uLL;
      *(_OWORD *)(v14 + 160) = 0uLL;
      *(_OWORD *)(v14 + 176) = 0uLL;
      *(_OWORD *)(v14 + 192) = 0uLL;
      *(_OWORD *)(v14 + 208) = 0uLL;
      *(void *)(v14 + 224) = 0;
      v14 += 232;
    }
    while (v14 != v13);
    long long v15 = &v10[232 * v9];
    uint64_t v16 = sub_1CC3CF470(a1[1], a1[1], *a1, *a1, v12, v12);
    unint64_t v18 = (void *)*a1;
    uint64_t v17 = a1[1];
    *a1 = v16;
    a1[1] = v13;
    a1[2] = (uint64_t)v15;
    while ((void *)v17 != v18)
      uint64_t v17 = sub_1CD55ED28(v17 - 232);
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t sub_1CC3CF470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = a6;
  if (a2 != a4)
  {
    uint64_t v7 = a6 - 96;
    do
    {
      long long v8 = *(_OWORD *)(a2 - 232);
      long long v9 = *(_OWORD *)(a2 - 216);
      long long v10 = *(_OWORD *)(a2 - 200);
      *(_OWORD *)(v7 - 94) = *(_OWORD *)(a2 - 190);
      *(_OWORD *)(v7 - 104) = v10;
      *(_OWORD *)(v7 - 120) = v9;
      *(_OWORD *)(v7 - 136) = v8;
      long long v11 = *(_OWORD *)(a2 - 168);
      *(void *)(v7 - 56) = *(void *)(a2 - 152);
      *(_OWORD *)(v7 - 72) = v11;
      *(void *)(a2 - 160) = 0;
      *(void *)(a2 - 152) = 0;
      *(void *)(a2 - 168) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a2 - 144);
      *(unsigned char *)(v7 - 32) = *(unsigned char *)(a2 - 128);
      long long v12 = *(_OWORD *)(a2 - 120);
      *(void *)(v7 - 8) = *(void *)(a2 - 104);
      *(_OWORD *)(v7 - 24) = v12;
      *(void *)(a2 - 112) = 0;
      *(void *)(a2 - 104) = 0;
      *(void *)(a2 - 120) = 0;
      *(_OWORD *)uint64_t v7 = *(_OWORD *)(a2 - 96);
      long long v13 = *(_OWORD *)(a2 - 80);
      *(void *)(v7 + 32) = *(void *)(a2 - 64);
      *(_OWORD *)(v7 + 16) = v13;
      *(void *)(a2 - 72) = 0;
      *(void *)(a2 - 64) = 0;
      *(void *)(a2 - 80) = 0;
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 - 56);
      long long v14 = *(_OWORD *)(a2 - 40);
      *(void *)(v7 + 72) = *(void *)(a2 - 24);
      *(_OWORD *)(v7 + 56) = v14;
      *(void *)(a2 - 40) = 0;
      *(void *)(a2 - 32) = 0;
      *(void *)(a2 - 24) = 0;
      *(_OWORD *)(v7 + 80) = *(_OWORD *)(a2 - 16);
      result -= 232;
      v7 -= 232;
      a2 -= 232;
    }
    while (a2 != a4);
  }
  return result;
}

uint64_t sub_1CC3CF544(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  long long v8 = (char *)*a1;
  if (0x34F72C234F72C235 * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_1CD5630AC((void **)a1);
    if (a4 > 0x11A7B9611A7B961) {
      goto LABEL_30;
    }
    unint64_t v15 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3);
    if (v15 <= a4) {
      unint64_t v15 = a4;
    }
    unint64_t v16 = (unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 3)) >= 0x8D3DCB08D3DCB0
        ? 0x11A7B9611A7B961
        : v15;
    if (v16 > 0x11A7B9611A7B961) {
LABEL_30:
    }
      abort();
    uint64_t v17 = 232 * v16;
    uint64_t result = (uint64_t)operator new(232 * v16);
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v17;
    while (v6 != a3)
    {
      uint64_t v18 = sub_1CD56310C(result, v6);
      uint64_t v6 = (long long *)((char *)v6 + 232);
      uint64_t result = v18 + 232;
    }
    a1[1] = result;
  }
  else
  {
    uint64_t result = a1[1];
    if (0x34F72C234F72C235 * ((result - (uint64_t)v8) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        long long v14 = v8;
      }
      else
      {
        long long v14 = v8;
        do
        {
          sub_1CD563220((uint64_t)v8, v6);
          uint64_t v6 = (long long *)((char *)v6 + 232);
          v8 += 232;
          v14 += 232;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while ((char *)result != v14)
        uint64_t result = sub_1CD55ED28(result - 232);
      a1[1] = (uint64_t)v14;
    }
    else
    {
      long long v10 = (long long *)((char *)a2 + 8 * ((result - (uint64_t)v8) >> 3));
      if ((char *)result != v8)
      {
        uint64_t v11 = 8 * ((result - (uint64_t)v8) >> 3);
        do
        {
          uint64_t result = sub_1CD563220((uint64_t)v8, v6);
          uint64_t v6 = (long long *)((char *)v6 + 232);
          v8 += 232;
          v11 -= 232;
        }
        while (v11);
        long long v8 = (char *)a1[1];
      }
      long long v12 = v8;
      if (v10 != a3)
      {
        long long v12 = v8;
        uint64_t result = (uint64_t)v8;
        do
        {
          uint64_t v13 = sub_1CD56310C(result, v10);
          long long v10 = (long long *)((char *)v10 + 232);
          uint64_t result = v13 + 232;
          v12 += 232;
        }
        while (v10 != a3);
      }
      a1[1] = (uint64_t)v12;
    }
  }
  return result;
}

uint64_t sub_1CC3CF740(llvm::yaml::IO *a1, uint64_t a2, _OWORD *a3)
{
  char v19 = 1;
  unsigned int v6 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a2 + 8)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  if (result)
  {
    if (!*(unsigned char *)(a2 + 8))
    {
LABEL_30:
      *(_OWORD *)a2 = *a3;
      return result;
    }
  }
  else if (!*(unsigned char *)(a2 + 8))
  {
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 1;
  }
  uint64_t v20 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, const char *, void, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, "local-offset", 0, v7, &v19, &v20);
  if (!result)
  {
    if (!v19) {
      return result;
    }
    goto LABEL_30;
  }
  if ((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    goto LABEL_31;
  }
  uint64_t v9 = *((void *)a1 + 37);
  if (!v9) {
    goto LABEL_31;
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (!v10 || *(_DWORD *)(v10 + 32) != 1) {
    goto LABEL_31;
  }
  long long v12 = *(int **)(v10 + 72);
  unint64_t v13 = *(void *)(v10 + 80);
  unint64_t v14 = v13;
  do
  {
    unint64_t v15 = v14;
    if (!v14) {
      break;
    }
    --v14;
  }
  while (*((unsigned char *)v12 + v15 - 1) == 32);
  if (v15 < v13) {
    unint64_t v13 = v15;
  }
  if (v13 == 6
    && ((v16 = *v12, int v17 = *((unsigned __int16 *)v12 + 2), v16 == 1852796476) ? (v18 = v17 == 15973) : (v18 = 0), v18))
  {
    *(_OWORD *)a2 = *a3;
  }
  else
  {
LABEL_31:
    sub_1CD562AC0(a1, (unint64_t *)a2);
  }
  return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v20);
}

void sub_1CC3CF934(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (0xAF8AF8AF8AF8AF8BLL * ((v5 - v4) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v11 = v4 + 280 * a2;
      do
      {
        *(_OWORD *)(v4 + 128) = 0uLL;
        *(_OWORD *)(v4 + 144) = 0uLL;
        *(_OWORD *)(v4 + 96) = 0uLL;
        *(_OWORD *)(v4 + 112) = 0uLL;
        *(_OWORD *)(v4 + 64) = 0uLL;
        *(_OWORD *)(v4 + 80) = 0uLL;
        *(_OWORD *)(v4 + 32) = 0uLL;
        *(_OWORD *)(v4 + 48) = 0uLL;
        *(_OWORD *)uint64_t v4 = 0uLL;
        *(_OWORD *)(v4 + 16) = 0uLL;
        *(unsigned char *)(v4 + 136) = 1;
        *(_OWORD *)(v4 + 160) = 0uLL;
        *(_OWORD *)(v4 + 176) = 0uLL;
        *(_OWORD *)(v4 + 192) = 0uLL;
        *(_OWORD *)(v4 + 208) = 0uLL;
        *(_OWORD *)(v4 + 224) = 0uLL;
        *(_OWORD *)(v4 + 240) = 0uLL;
        *(_OWORD *)(v4 + 256) = 0uLL;
        *(void *)(v4 + 272) = 0;
        v4 += 280;
      }
      while (v4 != v11);
      uint64_t v4 = v11;
    }
    a1[1] = v4;
  }
  else
  {
    unint64_t v6 = 0xAF8AF8AF8AF8AF8BLL * ((v4 - *a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0xEA0EA0EA0EA0EALL) {
      abort();
    }
    unint64_t v8 = 0xAF8AF8AF8AF8AF8BLL * ((v5 - *a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x75075075075075) {
      unint64_t v9 = 0xEA0EA0EA0EA0EALL;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0xEA0EA0EA0EA0EALL) {
        sub_1CB833614();
      }
      uint64_t v10 = (char *)operator new(280 * v9);
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v12 = (uint64_t)&v10[280 * v6];
    unint64_t v13 = v12 + 280 * a2;
    uint64_t v14 = v12;
    do
    {
      *(_OWORD *)(v14 + 128) = 0uLL;
      *(_OWORD *)(v14 + 144) = 0uLL;
      *(_OWORD *)(v14 + 96) = 0uLL;
      *(_OWORD *)(v14 + 112) = 0uLL;
      *(_OWORD *)(v14 + 64) = 0uLL;
      *(_OWORD *)(v14 + 80) = 0uLL;
      *(_OWORD *)(v14 + 32) = 0uLL;
      *(_OWORD *)(v14 + 48) = 0uLL;
      *(_OWORD *)uint64_t v14 = 0uLL;
      *(_OWORD *)(v14 + 16) = 0uLL;
      *(unsigned char *)(v14 + 136) = 1;
      *(_OWORD *)(v14 + 160) = 0uLL;
      *(_OWORD *)(v14 + 176) = 0uLL;
      *(_OWORD *)(v14 + 192) = 0uLL;
      *(_OWORD *)(v14 + 208) = 0uLL;
      *(_OWORD *)(v14 + 224) = 0uLL;
      *(_OWORD *)(v14 + 240) = 0uLL;
      *(_OWORD *)(v14 + 256) = 0uLL;
      *(void *)(v14 + 272) = 0;
      v14 += 280;
    }
    while (v14 != v13);
    unint64_t v15 = &v10[280 * v9];
    uint64_t v16 = sub_1CC3CFB1C(a1[1], (long long *)a1[1], *a1, (long long *)*a1, v12, v12);
    BOOL v18 = (void *)*a1;
    uint64_t v17 = a1[1];
    *a1 = v16;
    a1[1] = v13;
    a1[2] = (uint64_t)v15;
    while ((void *)v17 != v18)
      uint64_t v17 = sub_1CD55ED8C(v17 - 280);
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t sub_1CC3CFB1C(uint64_t a1, long long *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = a6;
  if (a2 != a4)
  {
    uint64_t v7 = a6 - 120;
    unint64_t v8 = (long long *)((char *)a2 - 120);
    do
    {
      unint64_t v9 = v8 - 10;
      long long v10 = *(v8 - 10);
      *(void *)(v7 - 144) = *((void *)v8 - 18);
      *(_OWORD *)(v7 - 160) = v10;
      long long v11 = *(long long *)((char *)v8 - 136);
      *(void *)(v7 - 120) = *((void *)v8 - 15);
      *(_OWORD *)(v7 - 136) = v11;
      *((void *)v8 - 16) = 0;
      *((void *)v8 - 15) = 0;
      *((void *)v8 - 17) = 0;
      *(_OWORD *)(v7 - 112) = *(v8 - 7);
      long long v12 = *(v8 - 5);
      *(_OWORD *)(v7 - 96) = *(v8 - 6);
      *(_OWORD *)(v7 - 80) = v12;
      long long v13 = *(v8 - 4);
      *(void *)(v7 - 48) = *((void *)v8 - 6);
      *(_OWORD *)(v7 - 64) = v13;
      *((void *)v8 - 7) = 0;
      *((void *)v8 - 6) = 0;
      *((void *)v8 - 8) = 0;
      *(_OWORD *)(v7 - 40) = *(long long *)((char *)v8 - 40);
      long long v14 = *(long long *)((char *)v8 - 24);
      *(void *)(v7 - 8) = *((void *)v8 - 1);
      *(_OWORD *)(v7 - 24) = v14;
      long long v15 = *v8;
      *(void *)(v7 + 16) = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v7 = v15;
      *(void *)unint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *(_OWORD *)(v7 + 24) = *(long long *)((char *)v8 + 24);
      long long v16 = *(long long *)((char *)v8 + 40);
      *(void *)(v7 + 56) = *((void *)v8 + 7);
      *(_OWORD *)(v7 + 40) = v16;
      *((void *)v8 + 5) = 0;
      *((void *)v8 + 6) = 0;
      *((void *)v8 + 7) = 0;
      *(_OWORD *)(v7 + 64) = v8[4];
      long long v17 = v8[5];
      *(void *)(v7 + 96) = *((void *)v8 + 12);
      *(_OWORD *)(v7 + 80) = v17;
      *((void *)v8 + 10) = 0;
      *((void *)v8 + 11) = 0;
      *((void *)v8 + 12) = 0;
      *(_OWORD *)(v7 + 104) = *(long long *)((char *)v8 + 104);
      result -= 280;
      v7 -= 280;
      unint64_t v8 = (long long *)((char *)v8 - 280);
    }
    while (v9 != a4);
  }
  return result;
}

uint64_t sub_1CC3CFC14(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  unint64_t v8 = (char *)*a1;
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 3) < a4)
  {
    sub_1CD563D84((void **)a1);
    if (a4 > 0xEA0EA0EA0EA0EALL) {
      goto LABEL_30;
    }
    unint64_t v15 = 0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 3);
    if (v15 <= a4) {
      unint64_t v15 = a4;
    }
    unint64_t v16 = 0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 3) >= 0x75075075075075 ? 0xEA0EA0EA0EA0EALL : v15;
    if (v16 > 0xEA0EA0EA0EA0EALL) {
LABEL_30:
    }
      abort();
    uint64_t v17 = 280 * v16;
    uint64_t result = (uint64_t)operator new(280 * v16);
    *a1 = result;
    a1[1] = result;
    a1[2] = result + v17;
    while (v6 != a3)
    {
      uint64_t v18 = sub_1CD563DE4(result, v6);
      unint64_t v6 = (long long *)((char *)v6 + 280);
      uint64_t result = v18 + 280;
    }
    a1[1] = result;
  }
  else
  {
    uint64_t result = a1[1];
    if (0xAF8AF8AF8AF8AF8BLL * ((result - (uint64_t)v8) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        long long v14 = v8;
      }
      else
      {
        long long v14 = v8;
        do
        {
          sub_1CD563F3C((uint64_t)v8, (const std::string *)v6);
          unint64_t v6 = (long long *)((char *)v6 + 280);
          v8 += 280;
          v14 += 280;
        }
        while (v6 != a3);
        uint64_t result = a1[1];
      }
      while ((char *)result != v14)
        uint64_t result = sub_1CD55ED8C(result - 280);
      a1[1] = (uint64_t)v14;
    }
    else
    {
      long long v10 = (long long *)((char *)a2 + 8 * ((result - (uint64_t)v8) >> 3));
      if ((char *)result != v8)
      {
        uint64_t v11 = 8 * ((result - (uint64_t)v8) >> 3);
        do
        {
          uint64_t result = sub_1CD563F3C((uint64_t)v8, (const std::string *)v6);
          unint64_t v6 = (long long *)((char *)v6 + 280);
          v8 += 280;
          v11 -= 280;
        }
        while (v11);
        unint64_t v8 = (char *)a1[1];
      }
      long long v12 = v8;
      if (v10 != a3)
      {
        long long v12 = v8;
        uint64_t result = (uint64_t)v8;
        do
        {
          uint64_t v13 = sub_1CD563DE4(result, v10);
          long long v10 = (long long *)((char *)v10 + 280);
          uint64_t result = v13 + 280;
          v12 += 280;
        }
        while (v10 != a3);
      }
      a1[1] = (uint64_t)v12;
    }
  }
  return result;
}

uint64_t sub_1CC3CFE10(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  uint64_t v5 = a1;
  if (a1 == a2) {
    return 1;
  }
  for (uint64_t i = a3; ; i += 6)
  {
    char v7 = *(unsigned char *)(v5 + 23);
    uint64_t v8 = v7 & 0x7F;
    if (v7 >= 0) {
      unint64_t v9 = (unsigned __int8 *)(v7 & 0x7F);
    }
    else {
      unint64_t v9 = *(unsigned __int8 **)(v5 + 8);
    }
    char v10 = *((unsigned char *)i + 23);
    int v11 = v10;
    long long v12 = (unsigned __int8 *)(v10 & 0x7F);
    if (v11 < 0) {
      long long v12 = i[1];
    }
    if (v9 != v12) {
      break;
    }
    if (v11 >= 0) {
      uint64_t v13 = (unsigned __int8 *)i;
    }
    else {
      uint64_t v13 = *i;
    }
    if ((*(unsigned char *)(v5 + 23) & 0x80) != 0)
    {
      BOOL v15 = memcmp(*(const void **)v5, v13, *(void *)(v5 + 8)) == 0;
    }
    else
    {
      if ((v7 & 0x7F) != 0)
      {
        uint64_t v14 = 0;
        while (*(unsigned __int8 *)(v5 + v14) == v13[v14])
        {
          if (v8 == ++v14) {
            goto LABEL_18;
          }
        }
        return 0;
      }
LABEL_18:
      BOOL v15 = 1;
    }
    uint64_t result = 0;
    if (!v15 || *(unsigned __int16 *)(v5 + 40) != *((unsigned __int16 *)i + 20)) {
      return result;
    }
    v5 += 48;
    if (v5 == a2) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1CC3CFF1C(llvm::yaml::IO *a1, int64x2_t *a2)
{
  int v4 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 24))(a1);
  if ((*(unsigned int (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    int v4 = -1431655765 * ((unint64_t)(a2->i64[1] - a2->i64[0]) >> 4);
  }
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 40;
    do
    {
      uint64_t v11 = 0;
      if ((*(unsigned int (**)(llvm::yaml::IO *, unint64_t, uint64_t *))(*(void *)a1 + 32))(a1, v5, &v11))
      {
        uint64_t v7 = a2->i64[0];
        if (0xAAAAAAAAAAAAAAABLL * ((a2->i64[1] - a2->i64[0]) >> 4) <= v5)
        {
          sub_1CD564760(a2, v5 + 1);
          uint64_t v7 = a2->i64[0];
        }
        uint64_t v8 = (unsigned __int16 *)(v7 + v6);
        uint64_t v9 = v7 + v6 - 40;
        (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 144))(a1);
        sub_1CD5644E0(a1, v8);
        sub_1CD5601B8(a1, (uint64_t)"reg", v9);
        (*(void (**)(llvm::yaml::IO *))(*(void *)a1 + 152))(a1);
        (*(void (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 40))(a1, v11);
      }
      ++v5;
      v6 += 48;
    }
    while (v4 != v5);
  }
  return (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 48))(a1);
}

void sub_1CC3D0138(void ***a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v6 = __str;
  uint64_t v8 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) < a4)
  {
    sub_1CD564AEC((void **)a1);
    if (a4 > 0x555555555555555) {
      goto LABEL_27;
    }
    unint64_t v11 = 0x5555555555555556 * (((char *)a1[2] - (char *)*a1) >> 4);
    if (v11 <= a4) {
      unint64_t v11 = a4;
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL ? 0x555555555555555 : v11;
    if (v12 > 0x555555555555555) {
LABEL_27:
    }
      abort();
    uint64_t v13 = 3 * v12;
    uint64_t v14 = (void **)operator new(48 * v12);
    *a1 = v14;
    a1[1] = v14;
    a1[2] = &v14[2 * v13];
    BOOL v15 = a1;
    uint64_t v16 = (uint64_t)v6;
  }
  else
  {
    uint64_t v9 = a1[1];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 4) >= a4)
    {
      if (__str == a3)
      {
        char v10 = *a1;
      }
      else
      {
        char v10 = *a1;
        do
        {
          std::string::operator=((std::string *)v8, v6);
          *(_OWORD *)(v8 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
          *((_WORD *)v8 + 20) = v6[1].__r_.__value_.__r.__words[2];
          v10 += 6;
          v6 += 2;
          v8 += 6;
        }
        while (v6 != a3);
        uint64_t v9 = a1[1];
      }
      while (v9 != v10)
      {
        if (*((char *)v9 - 25) < 0) {
          operator delete(*(v9 - 6));
        }
        v9 -= 6;
      }
      a1[1] = v10;
      return;
    }
    uint64_t v17 = (std::string *)((char *)__str + 16 * (((char *)v9 - (char *)v8) >> 4));
    if (v9 != v8)
    {
      do
      {
        std::string::operator=((std::string *)v8, v6);
        *(_OWORD *)(v8 + 3) = *(_OWORD *)&v6[1].__r_.__value_.__l.__data_;
        *((_WORD *)v8 + 20) = v6[1].__r_.__value_.__r.__words[2];
        v6 += 2;
        v8 += 6;
      }
      while (v6 != v17);
    }
    BOOL v15 = a1;
    uint64_t v16 = (uint64_t)v17;
  }

  sub_1CD564A44(v15, v16, (uint64_t)a3);
}

void sub_1CC3D0308(uint64_t a1, uint64_t a2, void *a3, unint64_t a4)
{
  uint64_t v8 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5)
  {
    sub_1CD564E4C((void **)a1);
    if (a4 >> 59) {
      goto LABEL_18;
    }
    uint64_t v13 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v14 = v13 >> 4;
    if (v13 >> 4 <= a4) {
      uint64_t v14 = a4;
    }
    unint64_t v15 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v14;
    if (v15 >> 59) {
LABEL_18:
    }
      abort();
    uint64_t v16 = (char *)operator new(32 * v15);
    *(void *)a1 = v16;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = &v16[32 * v15];
    uint64_t v17 = (void *)a1;
    uint64_t v18 = (void *)a2;
  }
  else
  {
    unint64_t v9 = (uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 5;
    if (v9 >= a4)
    {
      uint64_t v10 = sub_1CC3D04E0(a2, (uint64_t)a3, (uint64_t)v8);
      uint64_t v11 = *(void *)(a1 + 8);
      if (v11 != v10)
      {
        do
        {
          uint64_t v12 = v11 - 32;
          uint64_t v20 = (void **)(v11 - 24);
          sub_1CC3CE3C8(&v20);
          uint64_t v11 = v12;
        }
        while (v12 != v10);
      }
      *(void *)(a1 + 8) = v10;
      return;
    }
    uint64_t v19 = a2 + 32 * v9;
    sub_1CC3D04E0(a2, v19, (uint64_t)v8);
    uint64_t v17 = (void *)a1;
    uint64_t v18 = (void *)v19;
  }

  sub_1CD564DC4(v17, v18, a3);
}

void *sub_1CC3D0450(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x555555555555556) {
      abort();
    }
    uint64_t v6 = result;
    uint64_t v7 = 3 * a4;
    uint64_t v8 = (char *)operator new(48 * a4);
    *uint64_t v6 = v8;
    v6[1] = v8;
    void v6[2] = &v8[16 * v7];
    return sub_1CD564A44(v6, a2, a3);
  }
  return result;
}

uint64_t sub_1CC3D04E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(void *)a3 = *(void *)v5;
      if (v5 != a3) {
        sub_1CC3D0138((void ***)(a3 + 8), *(std::string **)(v5 + 8), *(std::string **)(v5 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 16) - *(void *)(v5 + 8)) >> 4));
      }
      v5 += 32;
      a3 += 32;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1CC3D055C(char *a1, char *a2, _DWORD *a3, uint64_t a4)
{
  if (a2 - a1 != a4 - (void)a3) {
    return 0;
  }
  while (a1 != a2)
  {
    if (*(_DWORD *)a1 != *a3
      || *((_DWORD *)a1 + 1) != a3[1]
      || *((_DWORD *)a1 + 2) != a3[2]
      || *((_DWORD *)a1 + 3) != a3[3])
    {
      return 0;
    }
    a1 += 20;
    a3 += 5;
  }
  return 1;
}

void *sub_1CC3D05D0(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unint64_t v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 2) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL) {
      goto LABEL_23;
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = v10 >= 0x666666666666666 ? 0xCCCCCCCCCCCCCCCLL : v11;
    if (v12 > 0xCCCCCCCCCCCCCCCLL) {
LABEL_23:
    }
      abort();
    uint64_t v13 = 5 * v12;
    uint64_t result = operator new(20 * v12);
    unint64_t v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    void v7[2] = (char *)result + 4 * v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    unint64_t v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 2) >= a4)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[4 * ((v16 - v9) >> 2)];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    unint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v17;
  if (v14)
  {
    uint64_t v18 = v9;
    uint64_t __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *unint64_t v15 = &v9[v14];
  return result;
}

void sub_1CC3D0744(std::string **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *a1;
  if (0x8E38E38E38E38E39 * (((char *)a1[2] - (char *)*a1) >> 3) < a4)
  {
    sub_1CD565D20((void **)a1);
    if (a4 > 0x38E38E38E38E38ELL) {
      goto LABEL_27;
    }
    unint64_t v13 = 0x1C71C71C71C71C72 * (((char *)a1[2] - (char *)*a1) >> 3);
    if (v13 <= a4) {
      unint64_t v13 = a4;
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * (((char *)a1[2] - (char *)*a1) >> 3) >= 0x1C71C71C71C71C7 ? 0x38E38E38E38E38ELL : v13;
    if (v14 > 0x38E38E38E38E38ELL) {
LABEL_27:
    }
      abort();
    uint64_t v15 = 3 * v14;
    uint64_t v16 = (std::string *)operator new(72 * v14);
    *a1 = v16;
    a1[1] = v16;
    a1[2] = &v16[v15];
    uint64_t v17 = a1;
    uint64_t v18 = v6;
  }
  else
  {
    unint64_t v9 = a1[1];
    if (0x8E38E38E38E38E39 * (((char *)v9 - (char *)v8) >> 3) >= a4)
    {
      if (a2 == a3)
      {
        unint64_t v10 = *a1;
      }
      else
      {
        unint64_t v10 = *a1;
        do
        {
          long long v11 = *(_OWORD *)v6;
          v8->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
          *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v11;
          std::string::operator=(v8 + 1, (const std::string *)(v6 + 24));
          *(_OWORD *)&v8[2].__r_.__value_.__l.__data_ = *(_OWORD *)(v6 + 48);
          __int16 v12 = *(_WORD *)(v6 + 64);
          v8[2].__r_.__value_.__s.__data_[18] = *(unsigned char *)(v6 + 66);
          LOWORD(v8[2].__r_.__value_.__r.__words[2]) = v12;
          v10 += 3;
          v6 += 72;
          v8 += 3;
        }
        while (v6 != a3);
        unint64_t v9 = a1[1];
      }
      while (v9 != v10)
      {
        if (SHIBYTE(v9[-2].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9[-2].__r_.__value_.__l.__data_);
        }
        v9 -= 3;
      }
      a1[1] = v10;
      return;
    }
    uint64_t v19 = a2 + 8 * (((char *)v9 - (char *)v8) >> 3);
    if (v9 != v8)
    {
      do
      {
        long long v20 = *(_OWORD *)v6;
        v8->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v20;
        std::string::operator=(v8 + 1, (const std::string *)(v6 + 24));
        *(_OWORD *)&v8[2].__r_.__value_.__l.__data_ = *(_OWORD *)(v6 + 48);
        __int16 v21 = *(_WORD *)(v6 + 64);
        v8[2].__r_.__value_.__s.__data_[18] = *(unsigned char *)(v6 + 66);
        LOWORD(v8[2].__r_.__value_.__r.__words[2]) = v21;
        v6 += 72;
        v8 += 3;
      }
      while (v6 != v19);
    }
    uint64_t v17 = a1;
    uint64_t v18 = v19;
  }

  sub_1CD565C74(v17, v18, a3);
}

void sub_1CC3D0964(uint64_t a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) < a4)
  {
    sub_1CD566E00((void **)a1);
    if (a4 > 0x555555555555555) {
      goto LABEL_18;
    }
    unint64_t v12 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4);
    if (v12 <= a4) {
      unint64_t v12 = a4;
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL
        ? 0x555555555555555
        : v12;
    if (v13 > 0x555555555555555) {
LABEL_18:
    }
      abort();
    uint64_t v14 = 3 * v13;
    uint64_t v15 = (char *)operator new(48 * v13);
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v15[16 * v14];
    uint64_t v16 = (void *)a1;
    uint64_t v17 = a2;
  }
  else
  {
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 4) >= a4)
    {
      uint64_t v9 = sub_1CC3D0AEC(a2, a3, (uint64_t)v8);
      uint64_t v10 = *(void *)(a1 + 8);
      if (v10 != v9)
      {
        do
        {
          uint64_t v11 = v10 - 48;
          uint64_t v19 = (void **)(v10 - 24);
          sub_1CC3CDF68(&v19);
          uint64_t v10 = v11;
        }
        while (v11 != v9);
      }
      *(void *)(a1 + 8) = v9;
      return;
    }
    uint64_t v18 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 4];
    sub_1CC3D0AEC(a2, v18, (uint64_t)v8);
    uint64_t v16 = (void *)a1;
    uint64_t v17 = v18;
  }

  sub_1CD566D70(v16, v17, a3);
}

uint64_t sub_1CC3D0AEC(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      if (v5 != (long long *)a3) {
        sub_1CC3CEF98((void ***)(a3 + 24), *((std::string **)v5 + 3), *((std::string **)v5 + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v5 + 4) - *((void *)v5 + 3)) >> 3));
      }
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1CC3D0B70(uint64_t *a1, long long *a2)
{
  uint64_t v2 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x11A7B9611A7B961) {
    abort();
  }
  if (0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x69EE58469EE5846ALL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x34F72C234F72C235 * ((a1[2] - *a1) >> 3)) >= 0x8D3DCB08D3DCB0) {
    unint64_t v6 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x11A7B9611A7B961) {
      sub_1CB833614();
    }
    uint64_t v7 = (char *)operator new(232 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[232 * v2];
  uint64_t v9 = &v7[232 * v6];
  sub_1CD56310C(v8, a2);
  uint64_t v10 = v8 + 232;
  uint64_t v11 = sub_1CC3CF470(a1[1], a1[1], *a1, *a1, v8, v8);
  unint64_t v13 = (void *)*a1;
  uint64_t v12 = a1[1];
  *a1 = v11;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  while ((void *)v12 != v13)
    uint64_t v12 = sub_1CD55ED28(v12 - 232);
  if (v13) {
    operator delete(v13);
  }
  return v10;
}

uint64_t sub_1CC3D0C9C(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    unint64_t v6 = (_DWORD *)(a1 + 40 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != 0x7FFFFFFF)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == 0x80000000;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        unint64_t v6 = (_DWORD *)(a1 + 40 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        unint64_t v6 = v10;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1CC3D0D38(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        *uint64_t result = 0x7FFFFFFF;
        result += 10;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 40 * v3;
      uint64_t v13 = v4 + 32;
      do
      {
        int v14 = *(_DWORD *)(v13 - 32);
        if ((v14 - 0x7FFFFFFF) >= 2)
        {
          long long v20 = 0;
          sub_1CC3D0C9C(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          uint64_t v15 = v20;
          *long long v20 = v14;
          long long v16 = *(_OWORD *)(v13 - 24);
          *((void *)v15 + 3) = *(void *)(v13 - 8);
          *(_OWORD *)(v15 + 2) = v16;
          *(void *)(v13 - 16) = 0;
          *(void *)(v13 - 8) = 0;
          *(void *)(v13 - 24) = 0;
          int v17 = *(_DWORD *)v13;
          *((unsigned char *)v15 + 36) = *(unsigned char *)(v13 + 4);
          v15[8] = v17;
          ++*(_DWORD *)(a1 + 8);
          if (*(char *)(v13 - 1) < 0) {
            operator delete(*(void **)(v13 - 24));
          }
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v18 = *(unsigned int *)(a1 + 16);
  if (v18)
  {
    uint64_t v19 = 40 * v18;
    do
    {
      *uint64_t result = 0x7FFFFFFF;
      result += 10;
      v19 -= 40;
    }
    while (v19);
  }
  return result;
}

uint64_t sub_1CC3D0ED0(uint64_t *a1, long long *a2)
{
  unint64_t v2 = 0xAF8AF8AF8AF8AF8BLL * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xEA0EA0EA0EA0EALL) {
    abort();
  }
  if (0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5F15F15F15F15F16 * ((a1[2] - *a1) >> 3);
  }
  if (0xAF8AF8AF8AF8AF8BLL * ((a1[2] - *a1) >> 3) >= 0x75075075075075) {
    unint64_t v6 = 0xEA0EA0EA0EA0EALL;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0xEA0EA0EA0EA0EALL) {
      sub_1CB833614();
    }
    int v7 = (char *)operator new(280 * v6);
  }
  else
  {
    int v7 = 0;
  }
  uint64_t v8 = (uint64_t)&v7[280 * v2];
  uint64_t v9 = &v7[280 * v6];
  sub_1CD563DE4(v8, a2);
  uint64_t v10 = v8 + 280;
  uint64_t v11 = sub_1CC3CFB1C(a1[1], (long long *)a1[1], *a1, (long long *)*a1, v8, v8);
  uint64_t v13 = (void *)*a1;
  uint64_t v12 = a1[1];
  *a1 = v11;
  a1[1] = v10;
  a1[2] = (uint64_t)v9;
  while ((void *)v12 != v13)
    uint64_t v12 = sub_1CD55ED8C(v12 - 280);
  if (v13) {
    operator delete(v13);
  }
  return v10;
}

char *sub_1CC3D0FFC(unint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    abort();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 4) > v5) {
    unint64_t v5 = 0x5555555555555556 * ((uint64_t)(a1[2] - v3) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - v3) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v8 = 0x555555555555555;
  }
  else {
    unint64_t v8 = v5;
  }
  uint64_t v22 = a1 + 2;
  if (v8)
  {
    if (v8 > 0x555555555555555) {
      sub_1CB833614();
    }
    uint64_t v9 = operator new(48 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (char *)&v9[24 * v4];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1CB8BDF7C((uint64_t)&v9[24 * v4], *(const void **)a2, *(void *)(a2 + 8));
    unint64_t v3 = *a1;
    unint64_t v2 = a1[1];
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
  }
  *(_OWORD *)(v10 + 24) = *(_OWORD *)(a2 + 24);
  v9[24 * v4 + 20] = *(_WORD *)(a2 + 40);
  if (v2 == v3)
  {
    int64x2_t v11 = vdupq_n_s64(v3);
    uint64_t v12 = (char *)&v9[24 * v4];
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      int v14 = &v10[v13];
      uint64_t v15 = v2 + v13;
      long long v16 = *(_OWORD *)(v2 + v13 - 48);
      *((void *)v14 - 4) = *(void *)(v2 + v13 - 32);
      *((_OWORD *)v14 - 3) = v16;
      *(void *)(v15 - 40) = 0;
      *(void *)(v15 - 32) = 0;
      *(void *)(v15 - 48) = 0;
      *(_OWORD *)(v14 - 24) = *(_OWORD *)(v2 + v13 - 24);
      *((_WORD *)v14 - 4) = *(_WORD *)(v2 + v13 - 8);
      v13 -= 48;
    }
    while (v2 + v13 != v3);
    int64x2_t v11 = *(int64x2_t *)a1;
    uint64_t v12 = &v10[v13];
  }
  *a1 = (unint64_t)v12;
  a1[1] = (unint64_t)(v10 + 48);
  int64x2_t v20 = v11;
  unint64_t v17 = a1[2];
  a1[2] = (unint64_t)&v9[24 * v8];
  unint64_t v21 = v17;
  uint64_t v19 = v11.i64[0];
  sub_1CD5649E0((uint64_t)&v19);
  return v10 + 48;
}

void sub_1CC3D11A8(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  while (2)
  {
    int v7 = a2;
    uint64_t v114 = (void ***)(a2 - 4);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = a1;
          uint64_t v9 = (uint64_t)v7 - a1;
          unint64_t v10 = (uint64_t)((uint64_t)v7 - a1) >> 5;
          if (!(!v5 & v4))
          {
            switch(v10)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                uint64_t v139 = (uint64_t)*(a2 - 4);
                memset(v140, 0, sizeof(v140));
                int v86 = a2 - 3;
                sub_1CC3D0450(v140, (uint64_t)*(a2 - 3), (uint64_t)*(a2 - 2), 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)*(a2 - 2) - (unsigned char *)*(a2 - 3)) >> 4));
                int v137 = *(void ***)a1;
                memset(v138, 0, sizeof(v138));
                sub_1CC3D0450(v138, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4));
                if (v139 == v137) {
                  BOOL v87 = HIDWORD(v139) < HIDWORD(v137);
                }
                else {
                  BOOL v87 = v139 < v137;
                }
                uint64_t v186 = (void **)v138;
                sub_1CC3CE3C8(&v186);
                uint64_t v186 = (void **)v140;
                sub_1CC3CE3C8(&v186);
                if (v87)
                {
                  uint64_t v186 = *(void ***)a1;
                  unint64_t v88 = v186;
                  uint64_t v89 = *(void **)(v8 + 24);
                  long long v132 = *(_OWORD *)(v8 + 8);
                  *(void *)(v8 + 16) = 0;
                  *(void *)(v8 + 24) = 0;
                  *(void *)(v8 + 8) = 0;
                  *(void *)uint64_t v8 = *(a2 - 4);
                  sub_1CD564AEC((void **)(v8 + 8));
                  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 - 3);
                  *(void *)(v8 + 24) = *(a2 - 1);
                  *int v86 = 0;
                  *(a2 - 2) = 0;
                  *(a2 - 1) = 0;
                  *(a2 - 4) = v88;
                  sub_1CD564AEC(v86);
                  *(_OWORD *)(a2 - 3) = v132;
                  *(a2 - 1) = v89;
                  uint64_t v187 = 0;
                  uint64_t v188 = 0;
                  uint64_t v189 = 0;
                  int v183 = (void **)&v187;
                  sub_1CC3CE3C8(&v183);
                }
                break;
              case 3uLL:
                sub_1CC3D3208(a1, (void ***)(a1 + 32), v114);
                break;
              case 4uLL:
                sub_1CC3D3C34(a1, a1 + 32, a1 + 64, (void **)v114);
                break;
              case 5uLL:
                sub_1CC3D2D34(a1, (void ***)(a1 + 32), a1 + 64, a1 + 96, (void **)v114);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          uint64_t v118 = (void *)a1;
          if (v9 <= 767)
          {
            if (a4)
            {
              if ((void **)a1 != v7)
              {
                int v90 = (void ***)(a1 + 32);
                if ((void **)(a1 + 32) != v7)
                {
                  uint64_t v91 = 0;
                  unint64_t v92 = a1;
                  do
                  {
                    uint64_t v93 = v90;
                    uint64_t v186 = *(void ***)(v92 + 32);
                    uint64_t v94 = *(void *)(v92 + 40);
                    uint64_t v188 = 0;
                    uint64_t v189 = 0;
                    uint64_t v187 = 0;
                    sub_1CC3D0450(&v187, v94, *(void *)(v92 + 48), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v92 + 48) - v94) >> 4));
                    int v183 = *(void ***)v92;
                    uint64_t v185 = 0;
                    long long v184 = 0uLL;
                    sub_1CC3D0450(&v184, *(void *)(v92 + 8), *(void *)(v92 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v92 + 16) - *(void *)(v92 + 8)) >> 4));
                    if (v186 == v183) {
                      BOOL v95 = HIDWORD(v186) < HIDWORD(v183);
                    }
                    else {
                      BOOL v95 = v186 < v183;
                    }
                    unsigned int v180 = (void **)&v184;
                    sub_1CC3CE3C8(&v180);
                    unsigned int v180 = (void **)&v187;
                    sub_1CC3CE3C8(&v180);
                    if (v95)
                    {
                      uint64_t v96 = *v93;
                      long long v181 = *(_OWORD *)(v92 + 40);
                      uint64_t v97 = *(void *)(v92 + 56);
                      unsigned int v180 = v96;
                      uint64_t v182 = v97;
                      *(void *)(v92 + 48) = 0;
                      *(void *)(v92 + 56) = 0;
                      *(void *)(v92 + 40) = 0;
                      uint64_t v98 = v91;
                      while (1)
                      {
                        uint64_t v99 = a1 + v98;
                        *(void *)(a1 + v98 + 32) = *(void *)(a1 + v98);
                        sub_1CD564AEC((void **)(a1 + v98 + 40));
                        *(_OWORD *)(v99 + 40) = *(_OWORD *)(v99 + 8);
                        *(void *)(v99 + 56) = *(void *)(v99 + 24);
                        *(void *)(v99 + 16) = 0;
                        *(void *)(v99 + 24) = 0;
                        *(void *)(v99 + 8) = 0;
                        if (!v98) {
                          break;
                        }
                        uint64_t v176 = v180;
                        uint64_t v178 = 0;
                        uint64_t v179 = 0;
                        uint64_t v177 = 0;
                        sub_1CC3D0450(&v177, v181, *((uint64_t *)&v181 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v181 + 1) - v181) >> 4));
                        unsigned int v173 = *(void ***)(v99 - 32);
                        unsigned int v175 = 0;
                        long long v174 = 0uLL;
                        sub_1CC3D0450(&v174, *(void *)(v99 - 24), *(void *)(v99 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v99 - 16) - *(void *)(v99 - 24)) >> 4));
                        if (v176 == v173) {
                          BOOL v100 = HIDWORD(v176) < HIDWORD(v173);
                        }
                        else {
                          BOOL v100 = v176 < v173;
                        }
                        uint64_t v170 = (void **)&v174;
                        sub_1CC3CE3C8(&v170);
                        uint64_t v170 = (void **)&v177;
                        sub_1CC3CE3C8(&v170);
                        v98 -= 32;
                        if (!v100)
                        {
                          uint64_t v101 = a1 + v98 + 32;
                          goto LABEL_174;
                        }
                      }
                      uint64_t v101 = a1;
LABEL_174:
                      *(void *)uint64_t v101 = v180;
                      sub_1CD564AEC((void **)(v101 + 8));
                      *(_OWORD *)(v101 + 8) = v181;
                      *(void *)(v101 + 24) = v182;
                      long long v181 = 0uLL;
                      uint64_t v182 = 0;
                      uint64_t v170 = (void **)&v181;
                      sub_1CC3CE3C8(&v170);
                    }
                    int v90 = v93 + 4;
                    v91 += 32;
                    unint64_t v92 = (unint64_t)v93;
                  }
                  while (v93 + 4 != (void ***)a2);
                }
              }
            }
            else if ((void **)a1 != v7)
            {
              uint64_t v102 = a1 + 32;
              if ((void **)(a1 + 32) != v7)
              {
                uint64_t v103 = (void *)(a1 + 56);
                do
                {
                  uint64_t v104 = v8;
                  uint64_t v8 = v102;
                  uint64_t v186 = *(void ***)(v104 + 32);
                  uint64_t v105 = *(void *)(v104 + 40);
                  uint64_t v188 = 0;
                  uint64_t v189 = 0;
                  uint64_t v187 = 0;
                  sub_1CC3D0450(&v187, v105, *(void *)(v104 + 48), 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 48) - v105) >> 4));
                  int v183 = *(void ***)v104;
                  uint64_t v185 = 0;
                  long long v184 = 0uLL;
                  sub_1CC3D0450(&v184, *(void *)(v104 + 8), *(void *)(v104 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v104 + 16) - *(void *)(v104 + 8)) >> 4));
                  if (v186 == v183) {
                    BOOL v106 = HIDWORD(v186) < HIDWORD(v183);
                  }
                  else {
                    BOOL v106 = v186 < v183;
                  }
                  unsigned int v180 = (void **)&v184;
                  sub_1CC3CE3C8(&v180);
                  unsigned int v180 = (void **)&v187;
                  sub_1CC3CE3C8(&v180);
                  if (v106)
                  {
                    uint64_t v107 = *(void ***)v8;
                    long long v181 = *(_OWORD *)(v104 + 40);
                    uint64_t v108 = *(void *)(v104 + 56);
                    unsigned int v180 = v107;
                    uint64_t v182 = v108;
                    *(void *)(v104 + 48) = 0;
                    *(void *)(v104 + 56) = 0;
                    *(void *)(v104 + 40) = 0;
                    unint64_t v109 = v103;
                    do
                    {
                      uint64_t v110 = v109;
                      *(v109 - 3) = *(v109 - 7);
                      sub_1CD564AEC((void **)v109 - 2);
                      *((_OWORD *)v109 - 1) = *((_OWORD *)v109 - 3);
                      uint64_t v111 = *(v109 - 4);
                      v109 -= 4;
                      void *v110 = v111;
                      *unint64_t v109 = 0;
                      *(v110 - 6) = 0;
                      *(v110 - 5) = 0;
                      uint64_t v176 = v180;
                      uint64_t v178 = 0;
                      uint64_t v179 = 0;
                      uint64_t v177 = 0;
                      sub_1CC3D0450(&v177, v181, *((uint64_t *)&v181 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v181 + 1) - v181) >> 4));
                      unsigned int v173 = (void **)*(v110 - 11);
                      unsigned int v175 = 0;
                      long long v174 = 0uLL;
                      sub_1CC3D0450(&v174, *(v110 - 10), *(v110 - 9), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(v110 - 9) - *(v110 - 10)) >> 4));
                      if (v176 == v173) {
                        BOOL v112 = HIDWORD(v176) < HIDWORD(v173);
                      }
                      else {
                        BOOL v112 = v176 < v173;
                      }
                      uint64_t v170 = (void **)&v174;
                      sub_1CC3CE3C8(&v170);
                      uint64_t v170 = (void **)&v177;
                      sub_1CC3CE3C8(&v170);
                    }
                    while (v112);
                    *(v109 - 3) = v180;
                    sub_1CD564AEC((void **)v109 - 2);
                    *((_OWORD *)v109 - 1) = v181;
                    *unint64_t v109 = v182;
                    long long v181 = 0uLL;
                    uint64_t v182 = 0;
                    uint64_t v170 = (void **)&v181;
                    sub_1CC3CE3C8(&v170);
                  }
                  uint64_t v102 = v8 + 32;
                  v103 += 4;
                }
                while ((void **)(v8 + 32) != a2);
              }
            }
            return;
          }
          uint64_t v11 = a3;
          if (!a3)
          {
            if ((void **)a1 != v7)
            {
              int64_t v131 = (v10 - 2) >> 1;
              int64_t v47 = v131;
              uint64_t v129 = (uint64_t)((uint64_t)v7 - a1) >> 5;
              do
              {
                int64_t v48 = v47;
                if (v131 >= v47)
                {
                  uint64_t v49 = (void ***)&v118[4 * ((2 * v47) | 1)];
                  if (2 * v47 + 2 < (uint64_t)v10)
                  {
                    uint64_t v186 = *v49;
                    uint64_t v188 = 0;
                    uint64_t v189 = 0;
                    uint64_t v187 = 0;
                    sub_1CC3D0450(&v187, (uint64_t)v49[1], (uint64_t)v49[2], 0xAAAAAAAAAAAAAAABLL * (((char *)v49[2] - (char *)v49[1]) >> 4));
                    int v183 = v49[4];
                    uint64_t v185 = 0;
                    long long v184 = 0uLL;
                    sub_1CC3D0450(&v184, (uint64_t)v49[5], (uint64_t)v49[6], 0xAAAAAAAAAAAAAAABLL * (((char *)v49[6] - (char *)v49[5]) >> 4));
                    BOOL v50 = v186 == v183
                        ? HIDWORD(v186) < HIDWORD(v183)
                        : v186 < v183;
                    unsigned int v173 = (void **)&v184;
                    sub_1CC3CE3C8(&v173);
                    unsigned int v173 = (void **)&v187;
                    sub_1CC3CE3C8(&v173);
                  }
                  else
                  {
                    BOOL v50 = 0;
                  }
                  char v51 = (void ***)&v118[4 * v48];
                  unint64_t v52 = &v49[4 * v50];
                  unsigned int v180 = *v52;
                  uint64_t v182 = 0;
                  long long v181 = 0uLL;
                  sub_1CC3D0450(&v181, (uint64_t)v52[1], (uint64_t)v52[2], 0xAAAAAAAAAAAAAAABLL * (((char *)v52[2] - (char *)v52[1]) >> 4));
                  uint64_t v176 = *v51;
                  uint64_t v178 = 0;
                  uint64_t v179 = 0;
                  uint64_t v177 = 0;
                  long long v53 = (long long *)(v51 + 1);
                  sub_1CC3D0450(&v177, (uint64_t)v51[1], (uint64_t)v51[2], 0xAAAAAAAAAAAAAAABLL * (((char *)v51[2] - (char *)v51[1]) >> 4));
                  BOOL v54 = v180 == v176
                      ? HIDWORD(v180) < HIDWORD(v176)
                      : v180 < v176;
                  unsigned int v173 = (void **)&v177;
                  sub_1CC3CE3C8(&v173);
                  unsigned int v173 = (void **)&v181;
                  sub_1CC3CE3C8(&v173);
                  unint64_t v10 = v129;
                  if (!v54)
                  {
                    if (v50) {
                      uint64_t v55 = 2 * v48 + 2;
                    }
                    else {
                      uint64_t v55 = (2 * v48) | 1;
                    }
                    unsigned int v173 = *v51;
                    long long v174 = *v53;
                    unsigned int v175 = v51[3];
                    *(void *)long long v53 = 0;
                    v51[2] = 0;
                    v51[3] = 0;
                    while (1)
                    {
                      uint64_t v56 = v52;
                      *char v51 = *v52;
                      sub_1CD564AEC((void **)v51 + 1);
                      uint64_t v57 = (void **)(v52 + 1);
                      *(_OWORD *)(v51 + 1) = *(_OWORD *)(v52 + 1);
                      v51[3] = v52[3];
                      v52[1] = 0;
                      v52[2] = 0;
                      v52[3] = 0;
                      if (v131 < v55) {
                        break;
                      }
                      uint64_t v58 = (2 * v55) | 1;
                      uint64_t v59 = (void ***)&v118[4 * v58];
                      uint64_t v55 = 2 * v55 + 2;
                      if (v55 >= v129)
                      {
                        BOOL v61 = 0;
                        unint64_t v52 = (void ***)&v118[4 * v58];
                        uint64_t v55 = v58;
                      }
                      else
                      {
                        uint64_t v170 = *v59;
                        int v172 = 0;
                        long long v171 = 0uLL;
                        sub_1CC3D0450(&v171, (uint64_t)v59[1], (uint64_t)v59[2], 0xAAAAAAAAAAAAAAABLL * (((char *)v59[2] - (char *)v59[1]) >> 4));
                        uint64_t v166 = v59[4];
                        uint64_t v168 = 0;
                        uint64_t v169 = 0;
                        uint64_t v167 = 0;
                        sub_1CC3D0450(&v167, (uint64_t)v59[5], (uint64_t)v59[6], 0xAAAAAAAAAAAAAAABLL * (((char *)v59[6] - (char *)v59[5]) >> 4));
                        if (v170 == v166) {
                          BOOL v60 = HIDWORD(v170) < HIDWORD(v166);
                        }
                        else {
                          BOOL v60 = v170 < v166;
                        }
                        int v153 = (void **)&v167;
                        sub_1CC3CE3C8(&v153);
                        int v153 = (void **)&v171;
                        sub_1CC3CE3C8(&v153);
                        BOOL v61 = v60;
                        unint64_t v52 = &v59[4 * v61];
                        if (!v60) {
                          uint64_t v55 = v58;
                        }
                      }
                      uint64_t v162 = *v52;
                      uint64_t v164 = 0;
                      uint64_t v165 = 0;
                      uint64_t v163 = 0;
                      sub_1CC3D0450(&v163, (uint64_t)v59[4 * v61 + 1], (uint64_t)v59[4 * v61 + 2], 0xAAAAAAAAAAAAAAABLL * (((char *)v59[4 * v61 + 2] - (char *)v59[4 * v61 + 1]) >> 4));
                      std::string v62 = v173;
                      uint64_t v158 = v173;
                      uint64_t v160 = 0;
                      uint64_t v161 = 0;
                      uint64_t v159 = 0;
                      sub_1CC3D0450(&v159, v174, *((uint64_t *)&v174 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v174 + 1) - v174) >> 4));
                      if (v162 == v158) {
                        BOOL v63 = HIDWORD(v162) < HIDWORD(v158);
                      }
                      else {
                        BOOL v63 = v162 < v158;
                      }
                      int v153 = (void **)&v159;
                      sub_1CC3CE3C8(&v153);
                      int v153 = (void **)&v163;
                      sub_1CC3CE3C8(&v153);
                      char v51 = v56;
                      if (v63) {
                        goto LABEL_120;
                      }
                    }
                    std::string v62 = v173;
LABEL_120:
                    *uint64_t v56 = v62;
                    sub_1CD564AEC(v57);
                    *(_OWORD *)(v56 + 1) = v174;
                    v56[3] = v175;
                    long long v174 = 0uLL;
                    unsigned int v175 = 0;
                    int v153 = (void **)&v174;
                    sub_1CC3CE3C8(&v153);
                    unint64_t v10 = v129;
                  }
                }
                int64_t v47 = v48 - 1;
              }
              while (v48);
              uint64_t v64 = (void ***)v118;
              do
              {
                uint64_t v65 = 0;
                unint64_t v66 = *v64;
                int v172 = 0;
                long long v171 = 0uLL;
                long long v171 = *(_OWORD *)(v64 + 1);
                int64x2_t v67 = v64[3];
                uint64_t v170 = v66;
                int v172 = v67;
                v118[1] = 0;
                v118[2] = 0;
                v118[3] = 0;
                int64_t v68 = (v10 - 2) >> 1;
                uint64_t v69 = v10;
                do
                {
                  uint64_t v70 = &v64[4 * v65 + 4];
                  uint64_t v71 = (2 * v65) | 1;
                  uint64_t v65 = 2 * v65 + 2;
                  if (v65 < (uint64_t)v10)
                  {
                    uint64_t v186 = *v70;
                    uint64_t v188 = 0;
                    uint64_t v189 = 0;
                    uint64_t v187 = 0;
                    sub_1CC3D0450(&v187, (uint64_t)v70[1], (uint64_t)v70[2], 0xAAAAAAAAAAAAAAABLL * (((char *)v70[2] - (char *)v70[1]) >> 4));
                    int v183 = v70[4];
                    uint64_t v185 = 0;
                    long long v184 = 0uLL;
                    sub_1CC3D0450(&v184, (uint64_t)v70[5], (uint64_t)v70[6], 0xAAAAAAAAAAAAAAABLL * (((char *)v70[6] - (char *)v70[5]) >> 4));
                    if (v186 == v183) {
                      BOOL v72 = HIDWORD(v186) < HIDWORD(v183);
                    }
                    else {
                      BOOL v72 = v186 < v183;
                    }
                    unsigned int v180 = (void **)&v184;
                    sub_1CC3CE3C8(&v180);
                    unsigned int v180 = (void **)&v187;
                    sub_1CC3CE3C8(&v180);
                    BOOL v73 = v72;
                    uint64_t v74 = &v70[4 * v73];
                    if (!v72) {
                      uint64_t v65 = v71;
                    }
                  }
                  else
                  {
                    BOOL v73 = 0;
                    uint64_t v74 = v70;
                    uint64_t v65 = v71;
                  }
                  *uint64_t v64 = *v74;
                  uint64_t v75 = (uint64_t *)&v70[4 * v73];
                  sub_1CD564AEC((void **)v64 + 1);
                  int v76 = v75 + 1;
                  *(_OWORD *)(v64 + 1) = *(_OWORD *)(v75 + 1);
                  char v77 = v75 + 3;
                  v64[3] = (void **)v75[3];
                  v75[1] = 0;
                  v75[2] = 0;
                  v75[3] = 0;
                  uint64_t v64 = v74;
                  unint64_t v10 = v69;
                }
                while (v65 <= v68);
                if (v74 == (void ***)(a2 - 4))
                {
                  *uint64_t v74 = v170;
                  sub_1CD564AEC((void **)v75 + 1);
                  *(_OWORD *)int v76 = v171;
                  *char v77 = (uint64_t)v172;
                  long long v171 = 0uLL;
                  int v172 = 0;
                }
                else
                {
                  *uint64_t v74 = (void **)*(a2 - 4);
                  sub_1CD564AEC((void **)v75 + 1);
                  uint64_t v78 = a2 - 3;
                  *(_OWORD *)int v76 = *(_OWORD *)(a2 - 3);
                  *char v77 = (uint64_t)*(a2 - 1);
                  *uint64_t v78 = 0;
                  v78[1] = 0;
                  v78[2] = 0;
                  *(a2 - 4) = v170;
                  sub_1CD564AEC(a2 - 3);
                  *(_OWORD *)uint64_t v78 = v171;
                  *(a2 - 1) = v172;
                  uint64_t v79 = (char *)v74 - (char *)v118 + 32;
                  long long v171 = 0uLL;
                  int v172 = 0;
                  if (v79 >= 33)
                  {
                    unint64_t v130 = (((unint64_t)v79 >> 5) - 2) >> 1;
                    int v80 = &v118[4 * v130];
                    uint64_t v186 = (void **)*v80;
                    uint64_t v188 = 0;
                    uint64_t v189 = 0;
                    uint64_t v187 = 0;
                    sub_1CC3D0450(&v187, v80[1], v80[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[2] - v80[1]) >> 4));
                    int v183 = *v74;
                    uint64_t v185 = 0;
                    long long v184 = 0uLL;
                    sub_1CC3D0450(&v184, *v76, v75[2], 0xAAAAAAAAAAAAAAABLL * ((v75[2] - *v76) >> 4));
                    BOOL v81 = v186 == v183
                        ? HIDWORD(v186) < HIDWORD(v183)
                        : v186 < v183;
                    unsigned int v180 = (void **)&v184;
                    sub_1CC3CE3C8(&v180);
                    unsigned int v180 = (void **)&v187;
                    sub_1CC3CE3C8(&v180);
                    if (v81)
                    {
                      unsigned int v180 = *v74;
                      uint64_t v182 = 0;
                      long long v181 = 0uLL;
                      long long v181 = *(_OWORD *)v76;
                      uint64_t v182 = *v77;
                      *int v76 = 0;
                      v76[1] = 0;
                      v76[2] = 0;
                      unint64_t v82 = v130;
                      do
                      {
                        int v83 = v80;
                        *uint64_t v74 = (void **)*v80;
                        sub_1CD564AEC((void **)v74 + 1);
                        uint64_t v84 = (void **)(v80 + 1);
                        *(_OWORD *)(v74 + 1) = *(_OWORD *)(v80 + 1);
                        v74[3] = (void **)v80[3];
                        v80[1] = 0;
                        v80[2] = 0;
                        v80[3] = 0;
                        if (!v82) {
                          break;
                        }
                        int v80 = &v118[4 * ((v82 - 1) >> 1)];
                        uint64_t v176 = (void **)*v80;
                        uint64_t v178 = 0;
                        uint64_t v179 = 0;
                        uint64_t v177 = 0;
                        sub_1CC3D0450(&v177, v80[1], v80[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v80[2] - v80[1]) >> 4));
                        unsigned int v173 = v180;
                        unsigned int v175 = 0;
                        long long v174 = 0uLL;
                        sub_1CC3D0450(&v174, v181, *((uint64_t *)&v181 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v181 + 1) - v181) >> 4));
                        BOOL v85 = v176 == v173
                            ? HIDWORD(v176) < HIDWORD(v173)
                            : v176 < v173;
                        uint64_t v166 = (void **)&v174;
                        unint64_t v82 = (v82 - 1) >> 1;
                        sub_1CC3CE3C8(&v166);
                        uint64_t v166 = (void **)&v177;
                        sub_1CC3CE3C8(&v166);
                        uint64_t v74 = (void ***)v83;
                      }
                      while (v85);
                      void *v83 = v180;
                      sub_1CD564AEC(v84);
                      *(_OWORD *)(v83 + 1) = v181;
                      v83[3] = v182;
                      long long v181 = 0uLL;
                      uint64_t v182 = 0;
                      uint64_t v166 = (void **)&v181;
                      sub_1CC3CE3C8(&v166);
                    }
                  }
                }
                uint64_t v186 = (void **)&v171;
                sub_1CC3CE3C8(&v186);
                unint64_t v10 = v69 - 1;
                a2 -= 4;
                uint64_t v64 = (void ***)v118;
              }
              while (v69 > 2);
            }
            return;
          }
          unint64_t v12 = v10 >> 1;
          unint64_t v13 = v8 + 32 * (v10 >> 1);
          if ((unint64_t)v9 > 0x1000)
          {
            sub_1CC3D3208(v8, (void ***)(v8 + 32 * (v10 >> 1)), v114);
            sub_1CC3D3208(v8 + 32, (void ***)(v13 - 32), (void ***)a2 - 8);
            int v14 = (void ***)(v8 + 32 + 32 * v12);
            sub_1CC3D3208(v8 + 64, v14, (void ***)a2 - 12);
            sub_1CC3D3208(v13 - 32, (void ***)v13, v14);
            uint64_t v186 = *(void ***)v8;
            uint64_t v15 = v186;
            long long v121 = *(_OWORD *)(v8 + 8);
            uint64_t v125 = *(void *)(v8 + 24);
            *(void *)(v8 + 8) = 0;
            *(void *)(v8 + 16) = 0;
            *(void *)(v8 + 24) = 0;
            *(void *)uint64_t v8 = *(void *)v13;
            sub_1CD564AEC((void **)(v8 + 8));
            *(_OWORD *)(v8 + 8) = *(_OWORD *)(v13 + 8);
            *(void *)(v8 + 24) = *(void *)(v13 + 24);
            *(void *)(v13 + 8) = 0;
            *(void *)(v13 + 16) = 0;
            *(void *)(v13 + 24) = 0;
            *(void *)unint64_t v13 = v15;
            uint64_t v11 = a3;
            sub_1CD564AEC((void **)(v13 + 8));
            *(_OWORD *)(v13 + 8) = v121;
            *(void *)(v13 + 24) = v125;
            uint64_t v187 = 0;
            uint64_t v188 = 0;
            uint64_t v189 = 0;
            int v183 = (void **)&v187;
            sub_1CC3CE3C8(&v183);
          }
          else
          {
            sub_1CC3D3208(v8 + 32 * (v10 >> 1), (void ***)v8, v114);
          }
          a3 = v11 - 1;
          if (a4) {
            break;
          }
          uint64_t v135 = *(void *)(v8 - 32);
          memset(v136, 0, sizeof(v136));
          sub_1CC3D0450(v136, *(void *)(v8 - 24), *(void *)(v8 - 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 - 16) - *(void *)(v8 - 24)) >> 4));
          uint64_t v133 = *(void ***)v8;
          memset(v134, 0, sizeof(v134));
          sub_1CC3D0450(v134, *(void *)(v8 + 8), *(void *)(v8 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 4));
          BOOL v16 = v135 == v133 ? HIDWORD(v135) >= HIDWORD(v133) : v135 >= v133;
          uint64_t v186 = (void **)v134;
          sub_1CC3CE3C8(&v186);
          uint64_t v186 = (void **)v136;
          sub_1CC3CE3C8(&v186);
          if (!v16) {
            break;
          }
          int v31 = *(void ***)v8;
          uint64_t v185 = 0;
          long long v184 = 0uLL;
          long long v184 = *(_OWORD *)(v8 + 8);
          uint64_t v32 = *(void *)(v8 + 24);
          int v183 = v31;
          uint64_t v185 = v32;
          *(void *)(v8 + 8) = 0;
          *(void *)(v8 + 16) = 0;
          uint64_t v124 = (void **)(v8 + 8);
          *(void *)(v8 + 24) = 0;
          unsigned int v180 = v31;
          uint64_t v182 = 0;
          long long v181 = 0uLL;
          sub_1CC3D0450(&v181, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
          uint64_t v176 = (void **)*(a2 - 4);
          uint64_t v178 = 0;
          uint64_t v179 = 0;
          uint64_t v177 = 0;
          sub_1CC3D0450(&v177, (uint64_t)*(a2 - 3), (uint64_t)*(a2 - 2), 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)*(a2 - 2) - (unsigned char *)*(a2 - 3)) >> 4));
          if (v180 == v176) {
            BOOL v33 = HIDWORD(v180) < HIDWORD(v176);
          }
          else {
            BOOL v33 = v180 < v176;
          }
          uint64_t v186 = (void **)&v177;
          sub_1CC3CE3C8(&v186);
          uint64_t v186 = (void **)&v181;
          sub_1CC3CE3C8(&v186);
          if (v33)
          {
            a1 = v8;
            do
            {
              unsigned int v173 = v183;
              unsigned int v175 = 0;
              long long v174 = 0uLL;
              sub_1CC3D0450(&v174, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
              BOOL v34 = *(void ***)(a1 + 32);
              a1 += 32;
              uint64_t v170 = v34;
              int v172 = 0;
              long long v171 = 0uLL;
              sub_1CC3D0450(&v171, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4));
              if (v173 == v170) {
                BOOL v35 = HIDWORD(v173) < HIDWORD(v170);
              }
              else {
                BOOL v35 = v173 < v170;
              }
              uint64_t v186 = (void **)&v171;
              sub_1CC3CE3C8(&v186);
              uint64_t v186 = (void **)&v174;
              sub_1CC3CE3C8(&v186);
            }
            while (!v35);
          }
          else
          {
            unint64_t v36 = v8 + 32;
            do
            {
              a1 = v36;
              if (v36 >= (unint64_t)a2) {
                break;
              }
              uint64_t v166 = v183;
              uint64_t v168 = 0;
              uint64_t v169 = 0;
              uint64_t v167 = 0;
              sub_1CC3D0450(&v167, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
              uint64_t v162 = *(void ***)a1;
              uint64_t v164 = 0;
              uint64_t v165 = 0;
              uint64_t v163 = 0;
              sub_1CC3D0450(&v163, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4));
              BOOL v37 = v166 == v162
                  ? HIDWORD(v166) >= HIDWORD(v162)
                  : v166 >= v162;
              uint64_t v186 = (void **)&v163;
              sub_1CC3CE3C8(&v186);
              uint64_t v186 = (void **)&v167;
              sub_1CC3CE3C8(&v186);
              unint64_t v36 = a1 + 32;
            }
            while (v37);
          }
          uint64_t v38 = a2;
          if (a1 < (unint64_t)a2)
          {
            uint64_t v38 = a2;
            do
            {
              uint64_t v158 = v183;
              uint64_t v160 = 0;
              uint64_t v161 = 0;
              uint64_t v159 = 0;
              sub_1CC3D0450(&v159, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
              int v39 = (void **)*(v38 - 4);
              v38 -= 4;
              int v153 = v39;
              uint64_t v155 = 0;
              uint64_t v156 = 0;
              uint64_t v154 = 0;
              sub_1CC3D0450(&v154, (uint64_t)v38[1], (uint64_t)v38[2], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v38[2] - (unsigned char *)v38[1]) >> 4));
              if (v158 == v153) {
                BOOL v40 = HIDWORD(v158) < HIDWORD(v153);
              }
              else {
                BOOL v40 = v158 < v153;
              }
              uint64_t v186 = (void **)&v154;
              sub_1CC3CE3C8(&v186);
              uint64_t v186 = (void **)&v159;
              sub_1CC3CE3C8(&v186);
            }
            while (v40);
          }
          while (a1 < (unint64_t)v38)
          {
            uint64_t v186 = *(void ***)a1;
            uint64_t v41 = v186;
            long long v128 = *(_OWORD *)(a1 + 8);
            uint64_t v42 = *(void **)(a1 + 24);
            *(void *)(a1 + 16) = 0;
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 8) = 0;
            *(void *)a1 = *v38;
            sub_1CD564AEC((void **)(a1 + 8));
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v38 + 1);
            *(void *)(a1 + 24) = v38[3];
            v38[1] = 0;
            void v38[2] = 0;
            void v38[3] = 0;
            *uint64_t v38 = v41;
            sub_1CD564AEC(v38 + 1);
            *(_OWORD *)(v38 + 1) = v128;
            void v38[3] = v42;
            uint64_t v187 = 0;
            uint64_t v188 = 0;
            uint64_t v189 = 0;
            int v157 = (void **)&v187;
            sub_1CC3CE3C8(&v157);
            do
            {
              int v149 = v183;
              uint64_t v151 = 0;
              uint64_t v152 = 0;
              uint64_t v150 = 0;
              sub_1CC3D0450(&v150, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
              uint64_t v43 = *(void ***)(a1 + 32);
              a1 += 32;
              uint64_t v145 = v43;
              uint64_t v147 = 0;
              uint64_t v148 = 0;
              uint64_t v146 = 0;
              sub_1CC3D0450(&v146, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4));
              if (v149 == v145) {
                BOOL v44 = HIDWORD(v149) < HIDWORD(v145);
              }
              else {
                BOOL v44 = v149 < v145;
              }
              uint64_t v186 = (void **)&v146;
              sub_1CC3CE3C8(&v186);
              uint64_t v186 = (void **)&v150;
              sub_1CC3CE3C8(&v186);
            }
            while (!v44);
            do
            {
              uint64_t v143 = v183;
              memset(v144, 0, sizeof(v144));
              sub_1CC3D0450(v144, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
              uint64_t v45 = (uint64_t)*(v38 - 4);
              v38 -= 4;
              uint64_t v141 = v45;
              memset(v142, 0, sizeof(v142));
              sub_1CC3D0450(v142, (uint64_t)v38[1], (uint64_t)v38[2], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v38[2] - (unsigned char *)v38[1]) >> 4));
              if (v143 == v141) {
                BOOL v46 = HIDWORD(v143) < HIDWORD(v141);
              }
              else {
                BOOL v46 = v143 < v141;
              }
              uint64_t v186 = (void **)v142;
              sub_1CC3CE3C8(&v186);
              uint64_t v186 = (void **)v144;
              sub_1CC3CE3C8(&v186);
            }
            while (v46);
          }
          if ((void *)(a1 - 32) != v118)
          {
            *uint64_t v118 = *(void *)(a1 - 32);
            sub_1CD564AEC(v124);
            *(_OWORD *)(v118 + 1) = *(_OWORD *)(a1 - 24);
            v118[3] = *(void *)(a1 - 8);
            *(void *)(a1 - 24) = 0;
            *(void *)(a1 - 16) = 0;
            *(void *)(a1 - 8) = 0;
          }
          *(void *)(a1 - 32) = v183;
          sub_1CD564AEC((void **)(a1 - 24));
          *(_OWORD *)(a1 - 24) = v184;
          *(void *)(a1 - 8) = v185;
          long long v184 = 0uLL;
          uint64_t v185 = 0;
          uint64_t v186 = (void **)&v184;
          sub_1CC3CE3C8(&v186);
          a4 = 0;
          int v7 = a2;
        }
        uint64_t v17 = 0;
        uint64_t v18 = *(void ***)v8;
        uint64_t v185 = 0;
        long long v184 = 0uLL;
        long long v184 = *(_OWORD *)(v8 + 8);
        uint64_t v19 = *(void *)(v8 + 24);
        int v183 = v18;
        uint64_t v185 = v19;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        uint64_t v113 = (void **)(v8 + 8);
        *(void *)(v8 + 24) = 0;
        do
        {
          unsigned int v180 = *(void ***)(v8 + v17 + 32);
          uint64_t v182 = 0;
          long long v181 = 0uLL;
          sub_1CC3D0450(&v181, *(void *)(v8 + v17 + 40), *(void *)(v8 + v17 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + v17 + 48) - *(void *)(v8 + v17 + 40)) >> 4));
          uint64_t v176 = v183;
          uint64_t v178 = 0;
          uint64_t v179 = 0;
          uint64_t v177 = 0;
          sub_1CC3D0450(&v177, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
          if (v180 == v176) {
            BOOL v20 = HIDWORD(v180) < HIDWORD(v176);
          }
          else {
            BOOL v20 = v180 < v176;
          }
          uint64_t v186 = (void **)&v177;
          sub_1CC3CE3C8(&v186);
          uint64_t v186 = (void **)&v181;
          sub_1CC3CE3C8(&v186);
          v17 += 32;
        }
        while (v20);
        unint64_t v126 = v8 + v17;
        unint64_t v21 = a2;
        if (v17 == 32)
        {
          unint64_t v21 = a2;
          do
          {
            if (v126 >= (unint64_t)v21) {
              break;
            }
            uint64_t v22 = (void **)*(v21 - 4);
            v21 -= 4;
            unsigned int v173 = v22;
            unsigned int v175 = 0;
            long long v174 = 0uLL;
            sub_1CC3D0450(&v174, (uint64_t)v21[1], (uint64_t)v21[2], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v21[2] - (unsigned char *)v21[1]) >> 4));
            uint64_t v170 = v183;
            int v172 = 0;
            long long v171 = 0uLL;
            sub_1CC3D0450(&v171, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
            BOOL v23 = v173 == v170
                ? HIDWORD(v173) >= HIDWORD(v170)
                : v173 >= v170;
            uint64_t v186 = (void **)&v171;
            sub_1CC3CE3C8(&v186);
            uint64_t v186 = (void **)&v174;
            sub_1CC3CE3C8(&v186);
          }
          while (v23);
        }
        else
        {
          do
          {
            __int16 v24 = (void **)*(v21 - 4);
            v21 -= 4;
            uint64_t v166 = v24;
            uint64_t v168 = 0;
            uint64_t v169 = 0;
            uint64_t v167 = 0;
            sub_1CC3D0450(&v167, (uint64_t)v21[1], (uint64_t)v21[2], 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v21[2] - (unsigned char *)v21[1]) >> 4));
            uint64_t v162 = v183;
            uint64_t v164 = 0;
            uint64_t v165 = 0;
            uint64_t v163 = 0;
            sub_1CC3D0450(&v163, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
            if (v166 == v162) {
              BOOL v25 = HIDWORD(v166) < HIDWORD(v162);
            }
            else {
              BOOL v25 = v166 < v162;
            }
            uint64_t v186 = (void **)&v163;
            sub_1CC3CE3C8(&v186);
            uint64_t v186 = (void **)&v167;
            sub_1CC3CE3C8(&v186);
          }
          while (!v25);
        }
        a1 = v126;
        if (v126 < (unint64_t)v21)
        {
          unint64_t v26 = (unint64_t)v21;
          do
          {
            uint64_t v186 = *(void ***)a1;
            int v119 = v186;
            long long v120 = *(_OWORD *)(a1 + 8);
            uint64_t v122 = *(void *)(a1 + 24);
            *(void *)(a1 + 16) = 0;
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 8) = 0;
            *(void *)a1 = *(void *)v26;
            sub_1CD564AEC((void **)(a1 + 8));
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v26 + 8);
            *(void *)(a1 + 24) = *(void *)(v26 + 24);
            *(void *)(v26 + 8) = 0;
            *(void *)(v26 + 16) = 0;
            *(void *)(v26 + 24) = 0;
            *(void *)unint64_t v26 = v119;
            sub_1CD564AEC((void **)(v26 + 8));
            *(_OWORD *)(v26 + 8) = v120;
            *(void *)(v26 + 24) = v122;
            uint64_t v187 = 0;
            uint64_t v188 = 0;
            uint64_t v189 = 0;
            uint64_t v143 = (void **)&v187;
            sub_1CC3CE3C8(&v143);
            do
            {
              std::string::size_type v27 = *(void ***)(a1 + 32);
              a1 += 32;
              uint64_t v158 = v27;
              uint64_t v160 = 0;
              uint64_t v161 = 0;
              uint64_t v159 = 0;
              sub_1CC3D0450(&v159, *(void *)(a1 + 8), *(void *)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4));
              int v153 = v183;
              uint64_t v155 = 0;
              uint64_t v156 = 0;
              uint64_t v154 = 0;
              sub_1CC3D0450(&v154, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
              if (v158 == v153) {
                BOOL v28 = HIDWORD(v158) < HIDWORD(v153);
              }
              else {
                BOOL v28 = v158 < v153;
              }
              uint64_t v186 = (void **)&v154;
              sub_1CC3CE3C8(&v186);
              uint64_t v186 = (void **)&v159;
              sub_1CC3CE3C8(&v186);
            }
            while (v28);
            do
            {
              size_t v29 = *(void ***)(v26 - 32);
              v26 -= 32;
              int v149 = v29;
              uint64_t v151 = 0;
              uint64_t v152 = 0;
              uint64_t v150 = 0;
              sub_1CC3D0450(&v150, *(void *)(v26 + 8), *(void *)(v26 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v26 + 16) - *(void *)(v26 + 8)) >> 4));
              uint64_t v145 = v183;
              uint64_t v147 = 0;
              uint64_t v148 = 0;
              uint64_t v146 = 0;
              sub_1CC3D0450(&v146, v184, *((uint64_t *)&v184 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v184 + 1) - v184) >> 4));
              if (v149 == v145) {
                BOOL v30 = HIDWORD(v149) < HIDWORD(v145);
              }
              else {
                BOOL v30 = v149 < v145;
              }
              uint64_t v186 = (void **)&v146;
              sub_1CC3CE3C8(&v186);
              uint64_t v186 = (void **)&v150;
              sub_1CC3CE3C8(&v186);
            }
            while (!v30);
          }
          while (a1 < v26);
        }
        uint64_t v123 = (void **)(a1 - 32);
        if ((void *)(a1 - 32) != v118)
        {
          *uint64_t v118 = *(void *)(a1 - 32);
          sub_1CD564AEC(v113);
          *(_OWORD *)(v118 + 1) = *(_OWORD *)(a1 - 24);
          v118[3] = *(void *)(a1 - 8);
          *(void *)(a1 - 24) = 0;
          *(void *)(a1 - 16) = 0;
          *(void *)(a1 - 8) = 0;
        }
        *(void *)(a1 - 32) = v183;
        sub_1CD564AEC((void **)(a1 - 24));
        *(_OWORD *)(a1 - 24) = v184;
        *(void *)(a1 - 8) = v185;
        long long v184 = 0uLL;
        uint64_t v185 = 0;
        uint64_t v186 = (void **)&v184;
        sub_1CC3CE3C8(&v186);
        int v7 = a2;
        if (v126 >= (unint64_t)v21) {
          break;
        }
LABEL_48:
        sub_1CC3D11A8(v118, v123, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v127 = sub_1CC3D37B0((uint64_t)v118, v123);
      if (sub_1CC3D37B0(a1, a2)) {
        break;
      }
      if (!v127) {
        goto LABEL_48;
      }
    }
    a2 = (void **)(a1 - 32);
    a1 = (unint64_t)v118;
    if (!v127) {
      continue;
    }
    break;
  }
}