uint64_t sub_1CBBA9B8C(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3, int a4, int a5, uint64_t a6)
{
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 **v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  llvm::ConstantInt *v27;
  void *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  llvm::ConstantInt *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  const llvm::APInt *v63;
  llvm::ConstantInt *v64;
  unsigned int v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t i;
  llvm::ConstantInt *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unsigned __int16 v81;
  int *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  unint64_t v96;
  BOOL v97;
  unint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  void *v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int IncompleteVirtualRegister;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  char v127;
  unsigned char v128[4];
  unsigned int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  void *v138;
  uint64_t v139;
  unsigned char v140[16];
  uint64_t v141;
  int v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E4F143B8];
  llvm::SampleInfo::SampleInfo((uint64_t)v128, a4, a5);
  v11 = (uint64_t)&a1[4][32 * v130];
  v13 = (_DWORD *)(v11 + 4);
  v12 = *(_DWORD *)(v11 + 4);
  v121 = a5;
  if (v12 < 0 && (v14 = v12 & 0x7FFFFFFF, v14 < *(_DWORD *)(a2 + 432))) {
    v15 = *(void *)(*(void *)(a2 + 424) + 8 * v14);
  }
  else {
    v15 = 0;
  }
  a3[5] = a1[3];
  a3[6] = (unsigned __int8 *)a1;
  v16 = a1 + 7;
  v17 = a3 + 4;
  if (a1 + 7 == a3 + 4) {
    goto LABEL_9;
  }
  v18 = *v17;
  if (*v17)
  {
    v39 = *v18;
    if ((v39 - 4) > 0x1E)
    {
      if ((v39 - 3) >= 0xFFFFFFFE) {
        v118 = *v17;
      }
      else {
        v118 = 0;
      }
      if ((v39 - 3) < 0xFFFFFFFE)
      {
        if (v39 == 3) {
          *((void *)v18 + 1) = 0;
        }
        goto LABEL_7;
      }
      v41 = (unint64_t)(v118 + 8);
    }
    else
    {
      if ((v18[1] & 0x7F) != 2 && !*((_DWORD *)v18 + 3)) {
        goto LABEL_7;
      }
      v40 = *((void *)v18 + 2);
      if ((v40 & 4) == 0) {
        goto LABEL_7;
      }
      v41 = v40 & 0xFFFFFFFFFFFFFFF8;
      if (!v41) {
        goto LABEL_7;
      }
    }
    v143 = a3 + 4;
    sub_1CC5FA668(v41 + 16, &v143);
  }
LABEL_7:
  v19 = *v16;
  *v17 = *v16;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)(a3 + 4), v19, 2);
  }
LABEL_9:
  if ((v15 & 0xFFFFFFFFFFFFFFF9) == 0 || (v15 & 2) == 0 || (v15 & 4) != 0) {
    goto LABEL_22;
  }
  v20 = *v13;
  if ((v20 & 0x80000000) != 0) {
    v21 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v20 & 0x7FFFFFFF) + 8);
  }
  else {
    v21 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v20);
  }
  v22 = *v21;
  if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
    v22 = *(void *)(v22 + 24);
  }
  if (**(_WORD **)(*(void *)(v22 + 8) + 16) == 193)
  {
    v23 = sub_1CBBAAB48(v20, a2, 0);
    if (HIDWORD(v23))
    {
      v143 = (void *)257;
      LODWORD(v144) = 0;
      v26 = v23;
      v27 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x20);
      v28 = llvm::ConstantInt::get(v27, v26, (const llvm::APInt *)1);
      (*((void (**)(unsigned __int8 **, void **, void *))*a3 + 2))(a3, &v143, v28);
      goto LABEL_21;
    }
    LODWORD(v20) = *v13;
  }
  LODWORD(v143) = v20;
  LODWORD(v145) = 0;
  v125 = 257;
  v126 = 0;
  v143 = (void *)sub_1CC7382B0((uint64_t)a3);
  v144 = v24;
  LODWORD(v145) = 1;
  (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 119, &v125, 1, &v143, 1, 0);
LABEL_21:
  v29 = v25;
  (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 32))(a6, a1);
  llvm::MachineOperand::setReg(v11, *(_DWORD *)(*(void *)(v29 + 32) + 4));
  (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 40))(a6, a1);
LABEL_22:
  v30 = a1[4];
  if (v131 != -1)
  {
    v31 = (uint64_t)&v30[32 * v131];
    v32 = *(_DWORD *)(v31 + 4);
    if ((v32 & 0x80000000) != 0 && (v32 & 0x7FFFFFFF) < *(_DWORD *)(a2 + 432))
    {
      v33 = (*(void *)(*(void *)(a2 + 424) + 8 * (v32 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF9) != 0
         && (*(void *)(*(void *)(a2 + 424) + 8 * (v32 & 0x7FFFFFFF)) & 6) == 2;
      if (v33)
      {
        v34 = *(void *)(*(void *)(a2 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
        if ((*(unsigned char *)(v34 + 3) & 1) == 0) {
          v34 = *(void *)(v34 + 24);
        }
        if (**(_WORD **)(*(void *)(v34 + 8) + 16) == 193 && (v35 = sub_1CBBAAB48(v32, a2, 0), HIDWORD(v35)))
        {
          v143 = (void *)257;
          LODWORD(v144) = 0;
          v42 = v35;
          v43 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x20);
          v44 = llvm::ConstantInt::get(v43, v42, (const llvm::APInt *)1);
          (*((void (**)(unsigned __int8 **, void **, void *))*a3 + 2))(a3, &v143, v44);
        }
        else
        {
          v125 = 513;
          v126 = 0;
          LODWORD(v143) = *(_DWORD *)(v31 + 4);
          LODWORD(v145) = 0;
          v36 = (void *)sub_1CC7382B0((uint64_t)a3);
          v125 = 257;
          v126 = 0;
          v143 = v36;
          v144 = v37;
          LODWORD(v145) = 1;
          (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 119, &v125, 1, &v143, 1, 0);
        }
        v45 = v38;
        (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 32))(a6, a1);
        llvm::MachineOperand::setReg(v31, *(_DWORD *)(*(void *)(v45 + 32) + 4));
        (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 40))(a6, a1);
        v30 = a1[4];
      }
    }
  }
  v46 = (uint64_t)&v30[32 * v132];
  v47 = *(unsigned int *)(v46 + 4);
  if ((v47 & 0x80000000) != 0)
  {
    v50 = v47 & 0x7FFFFFFF;
    if ((v47 & 0x7FFFFFFF) >= *(_DWORD *)(a2 + 432))
    {
      LOBYTE(v48) = 0;
    }
    else
    {
      v48 = *(void *)(*(void *)(a2 + 424) + 8 * v50);
      if ((v48 & 0xFFFFFFFFFFFFFFF9) != 0 && (*(void *)(*(void *)(a2 + 424) + 8 * v50) & 6) == 2)
      {
        v125 = 257;
        v126 = 0;
        LODWORD(v143) = v47;
        LODWORD(v145) = 0;
        sub_1CC7382B0((uint64_t)a3);
        v53 = v52;
        (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 32))(a6, a1);
        llvm::MachineOperand::setReg(v46, *(_DWORD *)(*(void *)(v53 + 32) + 4));
        (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 40))(a6, a1);
      }
    }
    v49 = (uint64_t *)(*(void *)(a2 + 24) + 16 * v50 + 8);
  }
  else
  {
    LOBYTE(v48) = 0;
    v49 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v47);
  }
  v54 = *v49;
  if (v54)
  {
    if (*(unsigned char *)(v54 + 3) & 1) != 0 || (v54 = *(void *)(v54 + 24)) != 0 && (*(unsigned char *)(v54 + 3))
    {
      v55 = *(void *)(v54 + 8);
      if (v55)
      {
        if (**(_WORD **)(v55 + 16) == 81 && *(_DWORD *)(v55 + 40) == 2) {
          LODWORD(v47) = *(_DWORD *)(*(void *)(v55 + 32) + 36);
        }
      }
    }
  }
  sub_1CC73C210(v47, a2, (uint64_t)&v143);
  if ((_BYTE)v145 && v144 >= 0x41 && v143) {
    MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
  }
  if ((v48 & 1) == 0 && v136 != -1)
  {
    v138 = v140;
    v139 = 0x300000000;
    if (v129 != 1)
    {
      v57 = (uint64_t)&a1[4][32 * v136];
      v58 = *(_DWORD *)(v57 + 4);
      if (v58 < 0 && (v59 = v58 & 0x7FFFFFFF, v59 < *(_DWORD *)(a2 + 432))) {
        v60 = *(void *)(*(void *)(a2 + 424) + 8 * v59);
      }
      else {
        LOBYTE(v60) = 0;
      }
      sub_1CBC2DBFC((uint64_t)&a1[4][32 * v136], a2, 0, 0, (uint64_t)&v125);
      if ((v60 & 1) != 0 && !v127)
      {
        v120 = v57;
        v61 = *(_DWORD *)(v57 + 4);
        v141 = 129;
        v142 = 0;
        v62 = llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x10);
        v64 = *(llvm::ConstantInt **)v62;
        v65 = *(_DWORD *)(v62 + 8);
        LODWORD(v144) = v65 >> 8;
        if (v65 >> 8 > 0x40) {
          operator new[]();
        }
        if (v65 <= 0xFF) {
          LOBYTE(v66) = 0;
        }
        else {
          v66 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v65) + 63);
        }
        v143 = (void *)(v66 & 0xF);
        v67 = llvm::ConstantInt::get(v64, (llvm::LLVMContext *)&v143, v63);
        if (v144 >= 0x41 && v143) {
          MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
        }
        v68 = (*((uint64_t (**)(unsigned __int8 **, uint64_t *, void *))*a3 + 2))(a3, &v141, v67);
        if (v129)
        {
          v70 = v68;
          v71 = v69;
          v119 = a6;
          v72 = 0;
          for (i = 0; i < v129; ++i)
          {
            v141 = 129;
            v142 = 0;
            LODWORD(v143) = v61;
            LODWORD(v145) = 0;
            v123 = 129;
            v124 = 0;
            v74 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x10);
            v75 = llvm::ConstantInt::get(v74, v72 & 0xFFFFFFFC, (const llvm::APInt *)1);
            v146 = (*((uint64_t (**)(unsigned __int8 **, uint64_t *, void *))*a3 + 2))(a3, &v123, v75);
            v147 = v76;
            v148 = 1;
            v77 = (void *)(*((uint64_t (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3
                           + 4))(a3, 128, &v141, 1, &v143, 2, 0);
            v141 = 129;
            v142 = 0;
            v143 = v77;
            v144 = v78;
            LODWORD(v145) = 1;
            v146 = v70;
            v147 = v71;
            v148 = 1;
            (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 65, &v141, 1, &v143, 2, 0);
            if (v139 >= (unint64_t)HIDWORD(v139)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v138 + v139) = *(_DWORD *)(*(void *)(v79 + 32) + 4);
            v80 = v139 + 1;
            LODWORD(v139) = v139 + 1;
            v81 = v129;
            v72 += 4;
          }
          a6 = v119;
        }
        else
        {
          v81 = 0;
          v80 = v139;
        }
        v141 = (8 * v81) | 0x800004u;
        v142 = 0;
        v82 = (int *)v138;
        v83 = v80;
        v143 = &v145;
        v144 = 0x800000000;
        if (v80 >= 9) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v80)
        {
          v84 = 0;
          v85 = 4 * v83;
          do
          {
            v86 = *v82++;
            v87 = (_DWORD *)((char *)&v145 + v84);
            *v87 = v86;
            v87[4] = 0;
            v84 += 24;
            v85 -= 4;
          }
          while (v85);
          v88 = v144;
        }
        else
        {
          v88 = 0;
        }
        LODWORD(v144) = v88 + v83;
        (*((void (**)(unsigned __int8 **, uint64_t, uint64_t *, uint64_t, uint64_t *))*a3 + 4))(a3, 77, &v141, 1, &v145);
        v90 = v89;
        if (v143 != &v145) {
          free(v143);
        }
        llvm::MachineOperand::setReg(v120, *(_DWORD *)(*(void *)(v90 + 32) + 4));
        (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 40))(a6, a1);
      }
      if (v138 != v140) {
        free(v138);
      }
    }
  }
  if (v134 != -1)
  {
    v91 = (uint64_t)&a1[4][32 * v134];
    v92 = *(_DWORD *)(v91 + 4);
    if ((v92 & 0x80000000) == 0
      || (v92 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432)
      || *(void *)(*(void *)(a2 + 424) + 8 * (v92 & 0x7FFFFFFF)) != 129)
    {
      v125 = 129;
      v126 = 0;
      LODWORD(v143) = v92;
      LODWORD(v145) = 0;
      sub_1CC738034(a3, 126, (unint64_t *)&v125, (int *)&v143);
      llvm::MachineOperand::setReg(v91, *(_DWORD *)(*(void *)(v93 + 32) + 4));
      (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 40))(a6, a1);
    }
  }
  if (!v128[2] && v137 == -1)
  {
    v94 = (uint64_t)&a1[4][32 * v133];
    v95 = *(_DWORD *)(v94 + 4);
    if ((v95 & 0x80000000) == 0 || (v95 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
    {
      v96 = 0;
      goto LABEL_115;
    }
    v96 = *(void *)(*(void *)(a2 + 424) + 8 * (v95 & 0x7FFFFFFF));
    v97 = (v96 & 0xFFFFFFFFFFFFFFF9) == 0
       || (*(void *)(*(void *)(a2 + 424) + 8 * (v95 & 0x7FFFFFFF)) & 4) == 0;
    v98 = *(void *)(*(void *)(a2 + 424) + 8 * (v95 & 0x7FFFFFFF));
    if (!v97)
    {
      if ((v96 & 2) != 0) {
        goto LABEL_112;
      }
      v99 = 3;
      if ((v96 & 1) == 0) {
        v99 = 19;
      }
      v98 = v96 & 0x8000000000000000 | (8 * (v96 >> v99)) | 1;
    }
    if (v98 == 257) {
      goto LABEL_121;
    }
LABEL_112:
    if (v96)
    {
      v100 = 257;
LABEL_120:
      v125 = v100;
      v126 = 0;
      LODWORD(v143) = v95;
      LODWORD(v145) = 0;
      sub_1CC738034(a3, 126, (unint64_t *)&v125, (int *)&v143);
      llvm::MachineOperand::setReg(v94, *(_DWORD *)(*(void *)(v102 + 32) + 4));
      (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 40))(a6, a1);
      goto LABEL_121;
    }
LABEL_115:
    v101 = 0x800000000000000;
    if ((v96 & 2) == 0) {
      v101 = 0x8000000000000;
    }
    if ((v101 & v96) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v56);
      v95 = *(_DWORD *)(v94 + 4);
    }
    v100 = v96 & 0x7FFF8 | 0x1000004;
    goto LABEL_120;
  }
LABEL_121:
  if (v121 == 3)
  {
    v103 = *((_DWORD *)a1[4] + 9);
    if ((v103 & 0x80000000) == 0 || (v103 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432)) {
      return 0;
    }
    v104 = *(void *)(*(void *)(a2 + 424) + 8 * (v103 & 0x7FFFFFFF));
    if (v104 != 129)
    {
      if (v104 == 65)
      {
        IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
        v105 = IncompleteVirtualRegister & 0x7FFFFFFF;
        *(void *)(*(void *)(a2 + 24) + 16 * v105) = 4;
        v106 = a2;
        v107 = *(unsigned int *)(a2 + 432);
        if (v105 >= v107)
        {
          v108 = *(void *)(v106 + 440);
          v109 = v105 + 1 - v107;
          if (v105 >= *(unsigned int *)(v106 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v110 = v107;
          if (v109)
          {
            v111 = (void *)(*(void *)(v106 + 424) + 8 * v107);
            v112 = ~v105 + v107;
            do
              *v111++ = v108;
            while (!__CFADD__(v112++, 1));
            v110 = *(_DWORD *)(v106 + 432);
          }
          *(_DWORD *)(v106 + 432) = v110 + v109;
        }
        *(void *)(*(void *)(v106 + 424) + 8 * v105) = 129;
        v114 = *(void *)(v106 + 8);
        a2 = v106;
        if (v114) {
          (*(void (**)(uint64_t, void))(*(void *)v114 + 24))(v114, IncompleteVirtualRegister);
        }
        (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 32))(a6, a1);
        llvm::MachineOperand::setReg((uint64_t)(a1[4] + 32), IncompleteVirtualRegister);
        (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)a6 + 40))(a6, a1);
        LODWORD(v125) = v103;
        v126 = 1;
        LODWORD(v143) = IncompleteVirtualRegister;
        LODWORD(v145) = 0;
        sub_1CC738034(a3, 126, (unint64_t *)&v125, (int *)&v143);
        goto LABEL_137;
      }
      return 0;
    }
  }
LABEL_137:
  if (v137 != -1)
  {
    sub_1CBC2E5E8((uint64_t)&a1[4][32 * v135], a2, (uint64_t)&v143);
    v115 = *(void *)(*((void *)a1[3] + 4) + 16);
    if (*(unsigned char *)(v115 + 303))
    {
      v116 = 15;
    }
    else
    {
      v33 = *(unsigned char *)(v115 + 305) == 0;
      v116 = 14;
      if (!v33) {
        v116 = 15;
      }
    }
    if ((_BYTE)v147 && v143 == 1 && v145 > v116) {
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
    }
  }
  return 1;
}

uint64_t sub_1CBBAAB48(unsigned int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = a1;
  sub_1CBA315DC((uint64_t)v12, a1, a2, 1);
  if (!v13) {
    return 0;
  }
  if ((a1 & 0x80000000) != 0) {
    v7 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
  }
  else {
    v7 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if ((*(unsigned char *)(v8 + 3) & 1) == 0) {
    uint64_t v8 = *(void *)(v8 + 24);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(v8 + 8) + 24) + 32);
  unsigned int v10 = sub_1CBB35BE4(*(void *)(v9 + 16));
  return sub_1CD1117B0(v12[0], (uint64_t)v12[1], *(void *)(v9 + 344), a3 | ((unint64_t)v10 << 32)) | 0x100000000;
}

uint64_t sub_1CBBAAC30(int a1)
{
  uint64_t v1 = 0;
  if (a1 > 2543)
  {
    if (a1 <= 2706)
    {
      if (a1 <= 2664)
      {
        if (a1 == 2544)
        {
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 28;
        }
        else if (a1 == 2586)
        {
LABEL_66:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 21;
        }
        else
        {
          uint64_t v2 = 0;
          if (a1 == 2587)
          {
LABEL_62:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 22;
          }
        }
      }
      else
      {
        uint64_t v2 = 0;
        switch(a1)
        {
          case 2665:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 35;
            break;
          case 2666:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 36;
            break;
          case 2667:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 37;
            break;
          case 2668:
            return v2 | v1;
          case 2669:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 39;
            break;
          case 2670:
            uint64_t v2 = 0;
            uint64_t v1 = 0x100000000;
            break;
          case 2671:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 4;
            break;
          case 2672:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 1;
            break;
          case 2673:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 5;
            break;
          case 2674:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 2;
            break;
          case 2675:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 6;
            break;
          case 2676:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 54;
            break;
          case 2677:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 26;
            break;
          case 2678:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 24;
            break;
          case 2679:
            goto LABEL_65;
          default:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 60;
            if (a1 != 2706)
            {
              uint64_t v1 = 0;
              uint64_t v2 = 0;
            }
            break;
        }
      }
      return v2 | v1;
    }
    if (a1 <= 2794)
    {
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 40;
      uint64_t v3 = 0x100000000;
      uint64_t v4 = 63;
      if (a1 != 2769)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 0;
      }
      if (a1 != 2732)
      {
        uint64_t v1 = v3;
        uint64_t v2 = v4;
      }
      uint64_t v5 = 0x100000000;
      uint64_t v6 = 59;
      uint64_t v7 = 0x100000000;
      uint64_t v8 = 61;
      if (a1 != 2708)
      {
        uint64_t v7 = 0;
        uint64_t v8 = 0;
      }
      if (a1 != 2707)
      {
        uint64_t v5 = v7;
        uint64_t v6 = v8;
      }
      BOOL v9 = a1 <= 2731;
    }
    else
    {
      if (a1 <= 2819)
      {
        uint64_t v2 = 0;
        switch(a1)
        {
          case 2795:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 78;
            break;
          case 2796:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 77;
            break;
          case 2797:
          case 2798:
          case 2799:
          case 2800:
          case 2801:
          case 2802:
          case 2803:
          case 2804:
          case 2805:
          case 2806:
          case 2811:
          case 2812:
          case 2813:
            return v2 | v1;
          case 2807:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 65;
            break;
          case 2808:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 68;
            break;
          case 2809:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 66;
            break;
          case 2810:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 67;
            break;
          case 2814:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 76;
            break;
          case 2815:
          case 2816:
            uint64_t v1 = 0x100000000;
            uint64_t v2 = 69;
            break;
          default:
LABEL_112:
            uint64_t v2 = 0;
            break;
        }
        return v2 | v1;
      }
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 64;
      uint64_t v10 = 0x100000000;
      uint64_t v11 = 62;
      if (a1 != 2848)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 0;
      }
      if (a1 != 2841)
      {
        uint64_t v1 = v10;
        uint64_t v2 = v11;
      }
      uint64_t v5 = 0x100000000;
      uint64_t v6 = 70;
      uint64_t v12 = 0x100000000;
      uint64_t v13 = 79;
      if (a1 != 2822)
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
      if (a1 != 2820)
      {
        uint64_t v5 = v12;
        uint64_t v6 = v13;
      }
      BOOL v9 = a1 <= 2840;
    }
LABEL_47:
    if (v9) {
      uint64_t v1 = v5;
    }
    if (v9) {
      uint64_t v2 = v6;
    }
    return v2 | v1;
  }
  if (a1 <= 2304)
  {
    if (a1 <= 2131)
    {
      if (a1 == 1269)
      {
LABEL_67:
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 16;
      }
      else
      {
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 29;
        uint64_t v19 = 0x100000000;
        uint64_t v20 = 52;
        if (a1 != 2108)
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
        }
        if (a1 != 2107)
        {
          uint64_t v1 = v19;
          uint64_t v2 = v20;
        }
      }
    }
    else
    {
      uint64_t v2 = 0;
      switch(a1)
      {
        case 2132:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 42;
          break;
        case 2133:
        case 2134:
        case 2135:
        case 2136:
        case 2137:
        case 2138:
        case 2141:
        case 2142:
        case 2143:
        case 2144:
        case 2148:
        case 2149:
        case 2153:
        case 2157:
        case 2158:
        case 2159:
        case 2160:
        case 2161:
        case 2162:
        case 2163:
        case 2164:
        case 2165:
        case 2166:
        case 2167:
        case 2168:
        case 2171:
        case 2172:
          return v2 | v1;
        case 2139:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 43;
          break;
        case 2140:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 27;
          break;
        case 2145:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 7;
          break;
        case 2146:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 8;
          break;
        case 2147:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 9;
          break;
        case 2150:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 34;
          break;
        case 2151:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 33;
          break;
        case 2152:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 57;
          break;
        case 2154:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 55;
          break;
        case 2155:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 56;
          break;
        case 2156:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 41;
          break;
        case 2169:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 3;
          break;
        case 2170:
          goto LABEL_67;
        case 2173:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 13;
          break;
        case 2174:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 12;
          break;
        case 2175:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 10;
          break;
        case 2176:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 11;
          break;
        default:
          goto LABEL_112;
      }
    }
    return v2 | v1;
  }
  if (a1 <= 2422)
  {
    if (a1 <= 2364)
    {
      uint64_t v2 = 0;
      switch(a1)
      {
        case 2305:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 38;
          break;
        case 2306:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 30;
          break;
        case 2307:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 32;
          break;
        case 2308:
          uint64_t v1 = 0x100000000;
          uint64_t v2 = 31;
          break;
        default:
          return v2 | v1;
      }
      return v2 | v1;
    }
    uint64_t v1 = 0x100000000;
    uint64_t v2 = 18;
    uint64_t v14 = 0x100000000;
    uint64_t v15 = 19;
    if (a1 != 2410)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
    }
    if (a1 != 2409)
    {
      uint64_t v1 = v14;
      uint64_t v2 = v15;
    }
    uint64_t v5 = 0x100000000;
    uint64_t v6 = 20;
    uint64_t v16 = 0x100000000;
    uint64_t v17 = 17;
    if (a1 != 2408)
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    if (a1 != 2365)
    {
      uint64_t v5 = v16;
      uint64_t v6 = v17;
    }
    BOOL v9 = a1 <= 2408;
    goto LABEL_47;
  }
  uint64_t v2 = 0;
  switch(a1)
  {
    case 2484:
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 25;
      return v2 | v1;
    case 2485:
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 23;
      return v2 | v1;
    case 2486:
      uint64_t v1 = 0x100000000;
      uint64_t v2 = 44;
      return v2 | v1;
    case 2487:
    case 2488:
    case 2489:
    case 2490:
      return v2 | v1;
    case 2491:
      goto LABEL_66;
    case 2492:
      goto LABEL_62;
    default:
      if (a1 == 2423)
      {
        uint64_t v1 = 0x100000000;
        uint64_t v2 = 53;
        return v2 | v1;
      }
      uint64_t v2 = 0;
      if (a1 != 2444) {
        return v2 | v1;
      }
      break;
  }
LABEL_65:
  uint64_t v1 = 0x100000000;
  uint64_t v2 = 14;
  return v2 | v1;
}

uint64_t sub_1CBBAB2E4(unsigned int **a1, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = ((uint64_t (*)(uint64_t))loc_1CBBD8BE0)(a2);
  unsigned int v4 = v3;
  unsigned int v5 = ((uint64_t (*)(uint64_t, void))loc_1CBBB59BC)(v3, **a1);
  if (v5 >= 0x11) {
    unint64_t v6 = 257;
  }
  else {
    unint64_t v6 = 129;
  }
  uint64_t v7 = a1[1];
  uint64_t v43 = v6;
  int v44 = 0;
  uint64_t v8 = (llvm::MachineFunction *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)v7 + 32))(v7, 315, &v43, 1, 0, 0, 0);
  uint64_t v10 = v9;
  LODWORD(v37) = 1;
  v38 = 0;
  uint64_t v39 = v4;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v37);
  int v11 = *a1[2];
  if ((v11 - 2175) <= 1)
  {
    uint64_t v12 = (llvm::IntegerType *****)a1[1];
    uint64_t v43 = 129;
    int v44 = 0;
    uint64_t v13 = llvm::IntegerType::get(***v12[1], (llvm::LLVMContext *)0x10);
    uint64_t v15 = *(llvm::ConstantInt **)v13;
    unsigned int v16 = *(_DWORD *)(v13 + 8);
    LODWORD(v38) = v16 >> 8;
    if (v16 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v17 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v16) + 63);
    if (v16 <= 0xFF) {
      LOBYTE(v17) = 0;
    }
    unint64_t v37 = v17 & 1;
    v18 = llvm::ConstantInt::get(v15, (llvm::LLVMContext *)&v37, v14);
    if (v38 >= 0x41 && v37) {
      MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
    }
    uint64_t v19 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v12)[2])(v12, &v43, v18);
    uint64_t v20 = a1[1];
    uint64_t v43 = 129;
    int v44 = 0;
    unint64_t v37 = v19;
    v38 = v21;
    LODWORD(v39) = 1;
    uint64_t v40 = (uint64_t)v8;
    v41 = v10;
    int v42 = 1;
    uint64_t v8 = (llvm::MachineFunction *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v20 + 32))(v20, 127, &v43, 1, &v37, 2, 0);
    uint64_t v10 = v22;
    int v11 = *a1[2];
  }
  if (v11 == 2491)
  {
    v23 = (llvm::IntegerType *****)a1[1];
    uint64_t v43 = v6;
    int v44 = 0;
    uint64_t v24 = llvm::IntegerType::get(***v23[1], (llvm::LLVMContext *)(v6 >> 3));
    v26 = *(llvm::ConstantInt **)v24;
    unsigned int v27 = *(_DWORD *)(v24 + 8);
    LODWORD(v38) = v27 >> 8;
    if (v27 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v28 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v27) + 63);
    if (v27 <= 0xFF) {
      LOBYTE(v28) = 0;
    }
    unint64_t v37 = v28 & 3;
    v29 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v37, v25);
    if (v38 >= 0x41 && v37) {
      MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
    }
    uint64_t v30 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*v23)[2])(v23, &v43, v29);
    v31 = a1[1];
    uint64_t v43 = v6;
    int v44 = 0;
    unint64_t v37 = (unint64_t)v8;
    v38 = v10;
    LODWORD(v39) = 1;
    uint64_t v40 = v30;
    v41 = v32;
    int v42 = 1;
    uint64_t v8 = (llvm::MachineFunction *)(*(uint64_t (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v31 + 32))(v31, 65, &v43, 1, &v37, 2, 0);
    uint64_t v10 = v33;
  }
  if (*(void *)a1[3] == 257 && v5 <= 0x10)
  {
    v35 = a1[1];
    uint64_t v43 = 257;
    int v44 = 0;
    unint64_t v37 = (unint64_t)v8;
    v38 = v10;
    LODWORD(v39) = 1;
    return (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v35 + 32))(v35, 126, &v43, 1, &v37, 1, 0);
  }
  return (uint64_t)v8;
}

uint64_t sub_1CBBAB7CC(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t result = sub_1CD112198(*(void *)(*v2 + 40));
  if (result)
  {
    unsigned int v4 = sub_1CD1122DC(v2[43]);
    uint64_t v11 = 257;
    int v12 = 0;
    unsigned int v5 = (llvm::MachineFunction *)(*(uint64_t (**)(void *, uint64_t, uint64_t *, uint64_t, void, void, void))(*a1 + 32))(a1, 313, &v11, 1, 0, 0, 0);
    uint64_t v7 = v6;
    int v8 = 1;
    uint64_t v9 = 0;
    uint64_t v10 = v4;
    llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)&v8);
    return *(unsigned int *)(*((void *)v7 + 4) + 4) | 0x100000000;
  }
  return result;
}

unint64_t sub_1CBBAB8C8(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4)
{
  unint64_t MachineMemOperand = a3;
  if (a3)
  {
    sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 32 * a2 + 4), a4, (uint64_t)&v22);
    sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 32 * (a2 + 1) + 4), a4, (uint64_t)&v19);
    uint64_t v8 = *(void *)(*(void *)(a1 + 24) + 32);
    v16[0] = MachineMemOperand & 0xFFFFFFFFFFFFFFFBLL;
    v16[1] = 0;
    char v18 = 0;
    unsigned int v9 = *(_DWORD *)(*(void *)MachineMemOperand + 8);
    if ((v9 & 0xFE) == 0x12) {
      unsigned int v9 = *(_DWORD *)(**(void **)(*(void *)MachineMemOperand + 16) + 8);
    }
    unsigned int v17 = v9 >> 8;
    if (v24)
    {
      uint64_t v10 = (uint64_t *)&v22;
      if (v23 >= 0x41) {
        uint64_t v10 = v22;
      }
      uint64_t v11 = *v10;
    }
    else
    {
      uint64_t v11 = 4;
    }
    int v12 = (unint64_t *)&v19;
    if (v20 >= 0x41) {
      int v12 = v19;
    }
    char v13 = 63 - __clz(*v12);
    memset(v15, 0, sizeof(v15));
    unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand(v8, (uint64_t)v16, 3, v11, v13, v15, 0, 1, 0, 0, 0);
    if (v21 && v20 >= 0x41 && v19) {
      MEMORY[0x1D25D9CB0](v19, 0x1000C8000313F17);
    }
    if (v24 && v23 >= 0x41 && v22) {
      MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
    }
  }
  return MachineMemOperand;
}

uint64_t sub_1CBBABA58(uint64_t result, uint64_t a2, int a3, unsigned int a4, int a5)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(result + 8);
  if (*(unsigned char *)(*(void *)(v5 + 16) + 367)) {
    return result;
  }
  unsigned int v9 = (llvm::IntegerType *****)result;
  uint64_t v10 = *(void *)(result + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  int v12 = *(_DWORD *)(v11 + 32 * a4 + 4);
  unsigned int v13 = *(_DWORD *)(v11 + 32 * (a4 + 1) + 4);
  sub_1CC73C210(v13, v10, (uint64_t)&v121);
  if (a5)
  {
    if (v122 > 0x40) {
      uint64_t v14 = *(void *)v121;
    }
    else {
      uint64_t v14 = v121 << -(uint64_t)v122 >> -(uint64_t)v122;
    }
  }
  else
  {
    if (v122 > 0x40) {
      uint64_t v15 = *(void *)v121;
    }
    else {
      uint64_t v15 = v121 << -(uint64_t)v122 >> -(uint64_t)v122;
    }
    uint64_t v14 = v15 / 8;
  }
  sub_1CC73C210(*(_DWORD *)(*(void *)(a2 + 32) + 32 * (a4 + 2) + 4), v10, (uint64_t)&v118);
  uint64_t v16 = *(void *)(a2 + 48);
  if ((v16 & 7) != 0)
  {
    unsigned int v17 = *(llvm::MachineMemOperand **)((v16 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    unsigned int v17 = (llvm::MachineMemOperand *)(v16 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a2 + 48) = v16 & 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v117 = 65;
  uint64_t v18 = ((*((_DWORD *)v17 + 4) & 0xFFFFFFLL) << 19) | 0x102;
  if (!a5)
  {
    uint64_t v125 = 257;
    LODWORD(v126) = 0;
    if (v122 > 0x40) {
      uint64_t v19 = *(void *)v121;
    }
    else {
      uint64_t v19 = v121 << -(uint64_t)v122 >> -(uint64_t)v122;
    }
    unint64_t v20 = v19 / 8;
    char v21 = (llvm::ConstantInt *)llvm::IntegerType::get(***v9[1], (llvm::LLVMContext *)0x20);
    v22 = llvm::ConstantInt::get(v21, v20, (const llvm::APInt *)1);
    ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*v9)[2])(v9, &v125, v22);
    unsigned int v13 = *(_DWORD *)(*(void *)(v23 + 32) + 4);
  }
  unint64_t v130 = v18;
  LODWORD(v131) = 0;
  LODWORD(v125) = v12;
  LODWORD(v127) = 0;
  LODWORD(v128) = v13;
  int v129 = 0;
  uint64_t v24 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v9)[4])(v9, 193, &v130, 1, &v125, 2, 0);
  v26 = v25;
  uint64_t v27 = sub_1CB8F1DC4(&v117);
  if (v28 == 1)
  {
    uint64_t v115 = v27;
    uint64_t v27 = v115;
  }
  unint64_t MachineMemOperand = (long long *)llvm::MachineFunction::getMachineMemOperand(v5, (uint64_t)v17, v14, (8 * v27 + 56) & 0x7FFFFFFC0 | 1);
  uint64_t v30 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v5, MachineMemOperand, 1);
  unint64_t v130 = v117;
  LODWORD(v131) = 0;
  uint64_t v125 = v24;
  v126 = v26;
  LODWORD(v127) = 1;
  v31 = sub_1CC737934(v9, 0x5Au, (int *)&v130, (int *)&v125, v30);
  unint64_t v130 = 129;
  LODWORD(v131) = 0;
  uint64_t v125 = (uint64_t)v31;
  v126 = v32;
  LODWORD(v127) = 1;
  ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, uint64_t *, uint64_t, void))(*v9)[4])(v9, 126, &v130, 1, &v125, 1, 0);
  uint64_t v34 = v33;
  unint64_t v130 = 0;
  v131 = 0;
  v35 = (llvm::MachineFunction *)v9[1];
  if (a5)
  {
    uint64_t v36 = (uint64_t)(v9[2][1] + 27042);
    unint64_t v37 = (unsigned __int8 *)v9[4];
    v124 = v37;
    if (v37) {
      llvm::MetadataTracking::track((uint64_t)&v124, v37, 2);
    }
    v38 = llvm::MachineFunction::CreateMachineInstr(v35, v36, &v124, 0);
    if (!v124) {
      goto LABEL_24;
    }
    int v106 = *v124;
    if ((v106 - 4) > 0x1E)
    {
      if ((v106 - 3) >= 0xFFFFFFFE) {
        v113 = v124;
      }
      else {
        v113 = 0;
      }
      if ((v106 - 3) < 0xFFFFFFFE)
      {
        if (v106 == 3) {
          *((void *)v124 + 1) = 0;
        }
        goto LABEL_24;
      }
      unint64_t v108 = (unint64_t)(v113 + 8);
    }
    else
    {
      if ((v124[1] & 0x7F) != 2 && !*((_DWORD *)v124 + 3)) {
        goto LABEL_24;
      }
      uint64_t v107 = *((void *)v124 + 2);
      if ((v107 & 4) == 0) {
        goto LABEL_24;
      }
      unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
      if (!v108) {
        goto LABEL_24;
      }
    }
    uint64_t v125 = (uint64_t)&v124;
    sub_1CC5FA668(v108 + 16, &v125);
LABEL_24:
    uint64_t v39 = (unint64_t *)v9[6];
    uint64_t v40 = v9[5][5];
    *((void *)v38 + 3) = v40;
    v41 = v40[4];
    uint64_t v42 = *((unsigned int *)v38 + 10);
    if (v42)
    {
      uint64_t v89 = *((void *)v38 + 4);
      v90 = v41[5];
      uint64_t v91 = 32 * v42;
      do
      {
        if (!*(unsigned char *)v89)
        {
          uint64_t v92 = *(unsigned int *)(v89 + 4);
          if ((int)v92 >= 0) {
            v93 = (uint64_t *)(*((void *)v90 + 34) + 8 * v92);
          }
          else {
            v93 = (uint64_t *)(*((void *)v90 + 3) + 16 * (v92 & 0x7FFFFFFF) + 8);
          }
          uint64_t v94 = *v93;
          if (*v93)
          {
            uint64_t v95 = *(void *)(v94 + 16);
            *(void *)(v94 + 16) = v89;
            *(void *)(v89 + 16) = v95;
            if (*(unsigned char *)(v89 + 3))
            {
              *(void *)(v89 + 24) = v94;
            }
            else
            {
              *(void *)(v89 + 24) = 0;
              v93 = (uint64_t *)(v95 + 24);
            }
          }
          else
          {
            *(void *)(v89 + 16) = v89;
            *(void *)(v89 + 24) = 0;
          }
          uint64_t *v93 = v89;
        }
        v89 += 32;
        v91 -= 32;
      }
      while (v91);
    }
    uint64_t v43 = v41[91];
    if (v43) {
      (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v43 + 24))(v43, v38);
    }
    unint64_t v44 = *v39 & 0xFFFFFFFFFFFFFFF8;
    *(void *)v38 = v44 | *(void *)v38 & 7;
    *((void *)v38 + 1) = v39;
    *(void *)(v44 + 8) = v38;
    *uint64_t v39 = *v39 & 7 | (unint64_t)v38;
    uint64_t v45 = v9[7];
    if (v45) {
      ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v45)[3])(v45, v38);
    }
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
    *(void *)(*(void *)(v10 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AF5B8;
    uint64_t v47 = *(void *)(v10 + 8);
    if (v47) {
      (*(void (**)(uint64_t))(*(void *)v47 + 24))(v47);
    }
    v126 = 0;
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    LODWORD(v125) = 0x1000000;
    HIDWORD(v125) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
    LODWORD(v125) = 1;
    v126 = 0;
    uint64_t v127 = 0;
    llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
    LODWORD(v125) = 1;
    v126 = 0;
    uint64_t v127 = 12;
    llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
    int v48 = *(_DWORD *)(*(void *)(v34 + 32) + 4);
    v126 = 0;
    uint64_t v127 = 0;
    LODWORD(v125) = 0;
    HIDWORD(v125) = v48;
    uint64_t v128 = 0;
    llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
    LODWORD(v125) = 1;
    v126 = 0;
    uint64_t v127 = 0;
    llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
    LODWORD(v125) = 1;
    v126 = 0;
    uint64_t v127 = 0;
    goto LABEL_46;
  }
  uint64_t v49 = (uint64_t)(v9[2][1] + 26988);
  v50 = (unsigned __int8 *)v9[4];
  v124 = v50;
  if (v50) {
    llvm::MetadataTracking::track((uint64_t)&v124, v50, 2);
  }
  v38 = llvm::MachineFunction::CreateMachineInstr(v35, v49, &v124, 0);
  if (v124)
  {
    int v109 = *v124;
    if ((v109 - 4) > 0x1E)
    {
      if ((v109 - 3) >= 0xFFFFFFFE) {
        v114 = v124;
      }
      else {
        v114 = 0;
      }
      if ((v109 - 3) < 0xFFFFFFFE)
      {
        if (v109 == 3) {
          *((void *)v124 + 1) = 0;
        }
        goto LABEL_35;
      }
      unint64_t v111 = (unint64_t)(v114 + 8);
    }
    else
    {
      if ((v124[1] & 0x7F) != 2 && !*((_DWORD *)v124 + 3)) {
        goto LABEL_35;
      }
      uint64_t v110 = *((void *)v124 + 2);
      if ((v110 & 4) == 0) {
        goto LABEL_35;
      }
      unint64_t v111 = v110 & 0xFFFFFFFFFFFFFFF8;
      if (!v111) {
        goto LABEL_35;
      }
    }
    uint64_t v125 = (uint64_t)&v124;
    sub_1CC5FA668(v111 + 16, &v125);
  }
LABEL_35:
  v51 = (unint64_t *)v9[6];
  v52 = v9[5][5];
  *((void *)v38 + 3) = v52;
  v53 = v52[4];
  uint64_t v54 = *((unsigned int *)v38 + 10);
  if (v54)
  {
    uint64_t v96 = *((void *)v38 + 4);
    v97 = v53[5];
    uint64_t v98 = 32 * v54;
    do
    {
      if (!*(unsigned char *)v96)
      {
        uint64_t v99 = *(unsigned int *)(v96 + 4);
        if ((int)v99 >= 0) {
          v100 = (uint64_t *)(*((void *)v97 + 34) + 8 * v99);
        }
        else {
          v100 = (uint64_t *)(*((void *)v97 + 3) + 16 * (v99 & 0x7FFFFFFF) + 8);
        }
        uint64_t v101 = *v100;
        if (*v100)
        {
          uint64_t v102 = *(void *)(v101 + 16);
          *(void *)(v101 + 16) = v96;
          *(void *)(v96 + 16) = v102;
          if (*(unsigned char *)(v96 + 3))
          {
            *(void *)(v96 + 24) = v101;
          }
          else
          {
            *(void *)(v96 + 24) = 0;
            v100 = (uint64_t *)(v102 + 24);
          }
        }
        else
        {
          *(void *)(v96 + 16) = v96;
          *(void *)(v96 + 24) = 0;
        }
        uint64_t *v100 = v96;
      }
      v96 += 32;
      v98 -= 32;
    }
    while (v98);
  }
  v55 = v53[91];
  if (v55) {
    (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v55 + 24))(v55, v38);
  }
  unint64_t v56 = *v51 & 0xFFFFFFFFFFFFFFF8;
  *(void *)v38 = v56 | *(void *)v38 & 7;
  *((void *)v38 + 1) = v51;
  *(void *)(v56 + 8) = v38;
  unint64_t *v51 = *v51 & 7 | (unint64_t)v38;
  v57 = v9[7];
  if (v57) {
    ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v57)[3])(v57, v38);
  }
  int v58 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(void *)(*(void *)(v10 + 24) + 16 * (v58 & 0x7FFFFFFF)) = &off_1E66AF5B8;
  uint64_t v59 = *(void *)(v10 + 8);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
  }
  v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  LODWORD(v125) = 0x1000000;
  HIDWORD(v125) = v58;
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
  LODWORD(v125) = 1;
  v126 = 0;
  uint64_t v127 = 0;
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
  LODWORD(v125) = 1;
  v126 = 0;
  uint64_t v127 = 15;
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
  int v60 = *(_DWORD *)(*(void *)(v34 + 32) + 4);
  v126 = 0;
  uint64_t v127 = 0;
  LODWORD(v125) = 0;
  HIDWORD(v125) = v60;
  uint64_t v128 = 0;
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
  LODWORD(v125) = 1;
  v126 = 0;
  uint64_t v127 = 0;
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
  if (v122 > 0x40) {
    uint64_t v61 = *(void *)v121;
  }
  else {
    uint64_t v61 = v121 << -(uint64_t)v122 >> -(uint64_t)v122;
  }
  LODWORD(v125) = 1;
  v126 = 0;
  uint64_t v127 = 1 << (v61 & 7);
LABEL_46:
  llvm::MachineInstr::addOperand(v38, v35, (const llvm::MachineOperand *)&v125);
  unint64_t v130 = (unint64_t)v35;
  v131 = v38;
  sub_1CBA318C8((uint64_t)&v130);
  v62 = (llvm::MachineFunction *)v9[1];
  uint64_t v63 = (uint64_t)(v9[2][1] + 1578);
  v64 = (unsigned __int8 *)v9[4];
  v124 = v64;
  if (v64) {
    llvm::MetadataTracking::track((uint64_t)&v124, v64, 2);
  }
  v65 = llvm::MachineFunction::CreateMachineInstr(v62, v63, &v124, 0);
  if (!v124) {
    goto LABEL_49;
  }
  int v103 = *v124;
  if ((v103 - 4) > 0x1E)
  {
    if ((v103 - 3) >= 0xFFFFFFFE) {
      v112 = v124;
    }
    else {
      v112 = 0;
    }
    if ((v103 - 3) < 0xFFFFFFFE)
    {
      if (v103 == 3) {
        *((void *)v124 + 1) = 0;
      }
      goto LABEL_49;
    }
    unint64_t v105 = (unint64_t)(v112 + 8);
  }
  else
  {
    if ((v124[1] & 0x7F) != 2 && !*((_DWORD *)v124 + 3)) {
      goto LABEL_49;
    }
    uint64_t v104 = *((void *)v124 + 2);
    if ((v104 & 4) == 0) {
      goto LABEL_49;
    }
    unint64_t v105 = v104 & 0xFFFFFFFFFFFFFFF8;
    if (!v105) {
      goto LABEL_49;
    }
  }
  uint64_t v125 = (uint64_t)&v124;
  sub_1CC5FA668(v105 + 16, &v125);
LABEL_49:
  v66 = (unint64_t *)v9[6];
  v67 = v9[5][5];
  *((void *)v65 + 3) = v67;
  v68 = v67[4];
  uint64_t v69 = *((unsigned int *)v65 + 10);
  if (v69)
  {
    uint64_t v82 = *((void *)v65 + 4);
    v83 = v68[5];
    uint64_t v84 = 32 * v69;
    do
    {
      if (!*(unsigned char *)v82)
      {
        uint64_t v85 = *(unsigned int *)(v82 + 4);
        if ((int)v85 >= 0) {
          v86 = (uint64_t *)(*((void *)v83 + 34) + 8 * v85);
        }
        else {
          v86 = (uint64_t *)(*((void *)v83 + 3) + 16 * (v85 & 0x7FFFFFFF) + 8);
        }
        uint64_t v87 = *v86;
        if (*v86)
        {
          uint64_t v88 = *(void *)(v87 + 16);
          *(void *)(v87 + 16) = v82;
          *(void *)(v82 + 16) = v88;
          if (*(unsigned char *)(v82 + 3))
          {
            *(void *)(v82 + 24) = v87;
          }
          else
          {
            *(void *)(v82 + 24) = 0;
            v86 = (uint64_t *)(v88 + 24);
          }
        }
        else
        {
          *(void *)(v82 + 16) = v82;
          *(void *)(v82 + 24) = 0;
        }
        uint64_t *v86 = v82;
      }
      v82 += 32;
      v84 -= 32;
    }
    while (v84);
  }
  v70 = v68[91];
  if (v70) {
    (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v70 + 24))(v70, v65);
  }
  unint64_t v71 = *v66 & 0xFFFFFFFFFFFFFFF8;
  *(void *)v65 = v71 | *(void *)v65 & 7;
  *((void *)v65 + 1) = v66;
  *(void *)(v71 + 8) = v65;
  unint64_t *v66 = *v66 & 7 | (unint64_t)v65;
  v72 = v9[7];
  if (v72) {
    ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v72)[3])(v72, v65);
  }
  int v73 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(void *)(*(void *)(v10 + 24) + 16 * (v73 & 0x7FFFFFFF)) = &off_1E66AF970;
  uint64_t v74 = *(void *)(v10 + 8);
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 24))(v74);
  }
  v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  LODWORD(v125) = 0x1000000;
  HIDWORD(v125) = v73;
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v125);
  int v75 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(void *)(*(void *)(v10 + 24) + 16 * (v75 & 0x7FFFFFFF)) = &off_1E66AF5B8;
  uint64_t v76 = *(void *)(v10 + 8);
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 24))(v76);
  }
  v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  LODWORD(v125) = 0x1000000;
  HIDWORD(v125) = v75;
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v125);
  int v77 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v10, "", 0);
  *(void *)(*(void *)(v10 + 24) + 16 * (v77 & 0x7FFFFFFF)) = &off_1E66ABEE0;
  uint64_t v78 = *(void *)(v10 + 8);
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 24))(v78);
  }
  v126 = 0;
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  LODWORD(v125) = 0x1000000;
  HIDWORD(v125) = v77;
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v125);
  int v79 = *(_DWORD *)(*((void *)v38 + 4) + 4);
  v126 = 0;
  uint64_t v127 = 0;
  LODWORD(v125) = 0;
  HIDWORD(v125) = v79;
  uint64_t v128 = 0;
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v125);
  v126 = 0;
  uint64_t v127 = 0;
  LODWORD(v125) = 0;
  HIDWORD(v125) = a3;
  uint64_t v128 = 0;
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v125);
  v126 = 0;
  uint64_t v127 = 0;
  LODWORD(v125) = 0;
  HIDWORD(v125) = v12;
  uint64_t v128 = 0;
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v125);
  if (a5)
  {
    if (v122 > 0x40) {
      uint64_t v80 = *(void *)v121;
    }
    else {
      uint64_t v80 = v121 << -(uint64_t)v122 >> -(uint64_t)v122;
    }
    uint64_t v81 = 8 * v80;
  }
  else if (v122 > 0x40)
  {
    uint64_t v81 = *(void *)v121;
  }
  else
  {
    uint64_t v81 = v121 << -(uint64_t)v122 >> -(uint64_t)v122;
  }
  LODWORD(v125) = 1;
  v126 = 0;
  uint64_t v127 = v81;
  llvm::MachineInstr::addOperand(v65, v62, (const llvm::MachineOperand *)&v125);
  llvm::MachineInstr::addMemOperand(v65, v62, v17);
  uint64_t v125 = (uint64_t)v62;
  v126 = v65;
  uint64_t result = sub_1CBA318C8((uint64_t)&v125);
  if (v120)
  {
    if (v119 >= 0x41)
    {
      uint64_t result = v118;
      if (v118) {
        uint64_t result = MEMORY[0x1D25D9CB0](v118, 0x1000C8000313F17);
      }
    }
  }
  if (v123 && v122 >= 0x41)
  {
    uint64_t result = v121;
    if (v121) {
      return MEMORY[0x1D25D9CB0](v121, 0x1000C8000313F17);
    }
  }
  return result;
}

uint64_t sub_1CBBAC8C0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::IntegerType *****a5)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  int v147 = a4;
  int v148 = BYTE4(a4);
  unsigned int v9 = a5[1];
  uint64_t v10 = v9[2];
  v157 = (void *)129;
  LODWORD(v158) = 0;
  if (*((unsigned char *)v10 + 389)) {
    unint64_t v11 = 255;
  }
  else {
    unint64_t v11 = 15;
  }
  int v12 = (llvm::ConstantInt *)llvm::IntegerType::get(***v9, (llvm::LLVMContext *)0x10);
  unsigned int v13 = llvm::ConstantInt::get(v12, v11, (const llvm::APInt *)1);
  ((void (*)(llvm::IntegerType *****, void **, void *))(*a5)[2])(a5, &v157, v13);
  int v15 = *(_DWORD *)(*(void *)(v14 + 32) + 4);
  uint64_t v149 = a3;
  if ((a2 & 0xFF00000000) != 0)
  {
    sub_1CC73C210(a2, (uint64_t)a5[1][5], (uint64_t)&__s1);
    if (!v154) {
      goto LABEL_22;
    }
    unsigned int v16 = v153;
    if (v153 >= 0x41
      && v16 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&__s1) > 0x40)
    {
      goto LABEL_22;
    }
    p_s1 = (uint64_t *)__s1;
    if (v16 < 0x41) {
      p_s1 = &__s1;
    }
    if (*p_s1)
    {
LABEL_22:
      uint64_t v150 = 129;
      int v151 = 0;
      LODWORD(v157) = a2;
      LODWORD(v159) = 0;
      LODWORD(v160) = v15;
      int v162 = 0;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 65, &v150, 1, &v157, 2, 0);
      LODWORD(a2) = *(_DWORD *)(*(void *)(v26 + 32) + 4);
      if (!v154) {
        goto LABEL_23;
      }
      char v18 = 0;
      unsigned int v16 = v153;
    }
    else
    {
      char v18 = 1;
    }
    if (v16 >= 0x41 && __s1) {
      MEMORY[0x1D25D9CB0](__s1, 0x1000C8000313F17);
    }
    if (v18)
    {
      uint64_t __s1 = 129;
      LODWORD(v153) = 0;
      uint64_t v19 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)0x10);
      char v21 = *(llvm::ConstantInt **)v19;
      unsigned int v22 = *(_DWORD *)(v19 + 8);
      LODWORD(v158) = v22 >> 8;
      if (v22 >> 8 >= 0x41) {
        operator new[]();
      }
      v157 = 0;
      uint64_t v23 = llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v157, v20);
      if (v158 >= 0x41 && v157) {
        MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
      }
      ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a5)[2])(a5, &__s1, v23);
      goto LABEL_16;
    }
  }
  else
  {
    LODWORD(a2) = *(_DWORD *)(*(void *)(v14 + 32) + 4);
  }
LABEL_23:
  uint64_t v27 = (uint64_t)*a5[1];
  sub_1CD112980(*(llvm::Module **)(v27 + 40), (uint64_t)&__s1);
  if (v156
    && ((unint64_t v28 = v155, (v155 & 0x80u) == 0) ? (v29 = v155 & 0x7F) : (v29 = v153),
        v29 == 15
     && ((v155 & 0x80) != 0 ? (uint64_t *)(v30 = (uint64_t *)__s1, unint64_t v28 = v153) : (v30 = &__s1),
         v28 >= 0xF ? (size_t v31 = 15) : (size_t v31 = v28),
         !memcmp(v30, "dynamic-library", v31) && v28 == 15)))
  {
    BOOL v32 = 1;
  }
  else
  {
    uint64_t v33 = *(llvm::Module **)(v27 + 40);
    v157 = &v159;
    uint64_t v158 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v33, (uint64_t)&v157);
    if (v158)
    {
      uint64_t v34 = (uint64_t *)((char *)v157 + 16);
      uint64_t v35 = 24 * v158;
      while (1)
      {
        uint64_t v36 = *(void *)(*(v34 - 1) + 8);
        if (*(void *)v36 == 9)
        {
          uint64_t v140 = *(void *)(v36 + 24);
          uint64_t v141 = *(unsigned __int8 *)(v36 + 32);
          if (*(void *)"PIC Level" == v140 && aPicLevel[8] == v141) {
            break;
          }
        }
        v34 += 3;
        v35 -= 24;
        if (!v35) {
          goto LABEL_40;
        }
      }
      uint64_t v37 = *v34;
    }
    else
    {
LABEL_40:
      uint64_t v37 = 0;
    }
    if (v157 != &v159) {
      free(v157);
    }
    if (v37)
    {
      uint64_t v136 = *(void *)(v37 + 128);
      v137 = (void *)(v136 + 24);
      if (*(_DWORD *)(v136 + 32) >= 0x41u) {
        v137 = (void *)*v137;
      }
      int v38 = *(_DWORD *)v137;
    }
    else
    {
      int v38 = 0;
    }
    BOOL v32 = v38 != 0;
  }
  uint64_t v39 = *(llvm::Module **)(v27 + 40);
  v157 = "agx.sample_rate";
  LOWORD(v161) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v39, (const char **)&v157);
  if (v156 && (char)v155 < 0) {
    operator delete((void *)__s1);
  }
  if (NamedMetadata) {
    int v41 = 1;
  }
  else {
    int v41 = v32;
  }
  if (v41) {
    uint64_t v42 = 71;
  }
  else {
    uint64_t v42 = 30;
  }
  unsigned int v43 = ((uint64_t (*)(uint64_t))loc_1CBBD8BE0)(v42);
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  v157 = (void *)v43;
  LODWORD(v159) = 3;
  unint64_t v44 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 315, &__s1, 1, &v157, 1, 0);
  uint64_t v46 = v45;
  if (v41 == 1)
  {
    int v132 = sub_1CBC2FC68(a5);
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    v157 = v44;
    uint64_t v158 = v46;
    LODWORD(v159) = 1;
    LODWORD(v160) = v132;
    int v162 = 0;
    unint64_t v44 = (void *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 65, &__s1, 1, &v157, 2, 0);
    uint64_t v46 = v133;
  }
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  v157 = v44;
  uint64_t v158 = v46;
  LODWORD(v159) = 1;
  LODWORD(v160) = a1;
  int v162 = 0;
  ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 65, &__s1, 1, &v157, 2, 0);
  a1 = *(_DWORD *)(*(void *)(v47 + 32) + 4);
  uint64_t v48 = (uint64_t)*a5[1];
  sub_1CD112980(*(llvm::Module **)(v48 + 40), (uint64_t)&__s1);
  if (v156
    && ((unint64_t v49 = v155, (v155 & 0x80u) == 0) ? (v50 = v155 & 0x7F) : (v50 = v153),
        v50 == 15
     && ((v155 & 0x80) != 0 ? (uint64_t *)(v51 = (uint64_t *)__s1, unint64_t v49 = v153) : (v51 = &__s1),
         v49 >= 0xF ? (size_t v52 = 15) : (size_t v52 = v49),
         !memcmp(v51, "dynamic-library", v52) && v49 == 15)))
  {
    BOOL v53 = 1;
  }
  else
  {
    uint64_t v54 = *(llvm::Module **)(v48 + 40);
    v157 = &v159;
    uint64_t v158 = 0x800000000;
    llvm::Module::getModuleFlagsMetadata(v54, (uint64_t)&v157);
    if (v158)
    {
      v55 = (uint64_t *)((char *)v157 + 16);
      uint64_t v56 = 24 * v158;
      while (1)
      {
        uint64_t v57 = *(void *)(*(v55 - 1) + 8);
        if (*(void *)v57 == 9)
        {
          uint64_t v143 = *(void *)(v57 + 24);
          uint64_t v144 = *(unsigned __int8 *)(v57 + 32);
          if (*(void *)"PIC Level" == v143 && aPicLevel[8] == v144) {
            break;
          }
        }
        v55 += 3;
        v56 -= 24;
        if (!v56) {
          goto LABEL_74;
        }
      }
      uint64_t v58 = *v55;
    }
    else
    {
LABEL_74:
      uint64_t v58 = 0;
    }
    if (v157 != &v159) {
      free(v157);
    }
    if (v58)
    {
      uint64_t v138 = *(void *)(v58 + 128);
      v139 = (void *)(v138 + 24);
      if (*(_DWORD *)(v138 + 32) >= 0x41u) {
        v139 = (void *)*v139;
      }
      int v59 = *(_DWORD *)v139;
    }
    else
    {
      int v59 = 0;
    }
    BOOL v53 = v59 != 0;
  }
  int v60 = *(llvm::Module **)(v48 + 40);
  v157 = "agx.sample_rate";
  LOWORD(v161) = 259;
  uint64_t v61 = llvm::Module::getNamedMetadata(v60, (const char **)&v157);
  if (v156 && (char)v155 < 0) {
    operator delete((void *)__s1);
  }
  if (v61) {
    int v62 = 1;
  }
  else {
    int v62 = v53;
  }
  if (v62) {
    uint64_t v63 = 71;
  }
  else {
    uint64_t v63 = 30;
  }
  unsigned int v64 = ((uint64_t (*)(uint64_t))loc_1CBBD8BE0)(v63);
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  v157 = (void *)v64;
  LODWORD(v159) = 3;
  uint64_t v65 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 315, &__s1, 1, &v157, 1, 0);
  uint64_t v25 = v66;
  if (v62 == 1)
  {
    v134 = (void *)v65;
    int v135 = sub_1CBC2FD10(a5);
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    v157 = v134;
    uint64_t v158 = v25;
    LODWORD(v159) = 1;
    LODWORD(v160) = v135;
    int v162 = 0;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 128, &__s1, 1, &v157, 2, 0);
LABEL_16:
    uint64_t v25 = v24;
  }
  int v67 = *(_DWORD *)(*(void *)(v25 + 32) + 4);
  if (*((unsigned char *)v10 + 389))
  {
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    uint64_t v68 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)0x10);
    v70 = *(llvm::ConstantInt **)v68;
    unsigned int v71 = *(_DWORD *)(v68 + 8);
    LODWORD(v158) = v71 >> 8;
    if (v71 >> 8 > 0x40) {
      operator new[]();
    }
    if (v71 <= 0xFF) {
      LOBYTE(v72) = 0;
    }
    else {
      unint64_t v72 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v71) + 63);
    }
    v157 = (void *)(v72 & 8);
    int v73 = llvm::ConstantInt::get(v70, (llvm::LLVMContext *)&v157, v69);
    if (v158 >= 0x41 && v157) {
      MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
    }
    uint64_t v74 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a5)[2])(a5, &__s1, v73);
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    LODWORD(v157) = v67;
    LODWORD(v159) = 0;
    uint64_t v160 = v74;
    uint64_t v161 = v75;
    int v162 = 1;
    uint64_t v76 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 127, &__s1, 1, &v157, 2, 0);
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    LODWORD(v157) = a1;
    LODWORD(v159) = 0;
    uint64_t v160 = v76;
    uint64_t v161 = v77;
    int v162 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 45, &__s1, 1, &v157, 2, 0);
    int v79 = *(_DWORD *)(*(void *)(v78 + 32) + 4);
    if (v148)
    {
      uint64_t __s1 = 129;
      LODWORD(v153) = 0;
      LODWORD(v157) = v147;
      LODWORD(v159) = 0;
      sub_1CC738034(a5, 118, (unint64_t *)&__s1, (int *)&v157);
    }
    else
    {
      uint64_t __s1 = 129;
      LODWORD(v153) = 0;
      uint64_t v80 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)0x10);
      uint64_t v82 = *(llvm::ConstantInt **)v80;
      unsigned int v83 = *(_DWORD *)(v80 + 8);
      LODWORD(v158) = v83 >> 8;
      if (v83 >> 8 >= 0x41) {
        operator new[]();
      }
      v157 = 0;
      uint64_t v84 = llvm::ConstantInt::get(v82, (llvm::LLVMContext *)&v157, v81);
      if (v158 >= 0x41 && v157) {
        MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
      }
      ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a5)[2])(a5, &__s1, v84);
    }
    int v86 = *(_DWORD *)(*(void *)(v85 + 32) + 4);
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    uint64_t v87 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)0x10);
    uint64_t v89 = *(llvm::ConstantInt **)v87;
    unsigned int v90 = *(_DWORD *)(v87 + 8);
    LODWORD(v158) = v90 >> 8;
    if (v90 >> 8 > 0x40) {
      operator new[]();
    }
    if (v90 <= 0xFF) {
      LOBYTE(v91) = 0;
    }
    else {
      unint64_t v91 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v90) + 63);
    }
    v157 = (void *)(v91 & 8);
    uint64_t v92 = llvm::ConstantInt::get(v89, (llvm::LLVMContext *)&v157, v88);
    uint64_t v93 = v149;
    if (v158 >= 0x41 && v157) {
      MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
    }
    uint64_t v94 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a5)[2])(a5, &__s1, v92);
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    LODWORD(v157) = a2;
    LODWORD(v159) = 0;
    uint64_t v160 = v94;
    uint64_t v161 = v95;
    int v162 = 1;
    uint64_t v96 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 127, &__s1, 1, &v157, 2, 0);
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    LODWORD(v157) = v86;
    LODWORD(v159) = 0;
    uint64_t v160 = v96;
    uint64_t v161 = v97;
    int v162 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 45, &__s1, 1, &v157, 2, 0);
    int v99 = *(_DWORD *)(*(void *)(v98 + 32) + 4);
    uint64_t __s1 = 257;
    LODWORD(v153) = 0;
    LODWORD(v157) = v79;
    LODWORD(v159) = 0;
    goto LABEL_106;
  }
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  uint64_t v105 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)0x10);
  uint64_t v107 = *(llvm::ConstantInt **)v105;
  unsigned int v108 = *(_DWORD *)(v105 + 8);
  LODWORD(v158) = v108 >> 8;
  if (v108 >> 8 > 0x40) {
    operator new[]();
  }
  if (v108 <= 0xFF) {
    LOBYTE(v109) = 0;
  }
  else {
    unint64_t v109 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v108) + 63);
  }
  v157 = (void *)(v109 & 4);
  uint64_t v110 = llvm::ConstantInt::get(v107, (llvm::LLVMContext *)&v157, v106);
  if (v158 >= 0x41 && v157) {
    MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
  }
  uint64_t v111 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a5)[2])(a5, &__s1, v110);
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  LODWORD(v157) = a1;
  LODWORD(v159) = 0;
  uint64_t v160 = v111;
  uint64_t v161 = v112;
  int v162 = 1;
  uint64_t v113 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 127, &__s1, 1, &v157, 2, 0);
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  LODWORD(v157) = v67;
  LODWORD(v159) = 0;
  uint64_t v160 = v113;
  uint64_t v161 = v114;
  int v162 = 1;
  ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 45, &__s1, 1, &v157, 2, 0);
  int v116 = *(_DWORD *)(*(void *)(v115 + 32) + 4);
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  uint64_t v117 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)0x10);
  unsigned int v119 = *(llvm::ConstantInt **)v117;
  unsigned int v120 = *(_DWORD *)(v117 + 8);
  LODWORD(v158) = v120 >> 8;
  if (v120 >> 8 > 0x40) {
    operator new[]();
  }
  if (v120 <= 0xFF) {
    LOBYTE(v121) = 0;
  }
  else {
    unint64_t v121 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v120) + 63);
  }
  v157 = (void *)(v121 & 4);
  unsigned int v122 = llvm::ConstantInt::get(v119, (llvm::LLVMContext *)&v157, v118);
  uint64_t v93 = v149;
  if (v158 >= 0x41 && v157) {
    MEMORY[0x1D25D9CB0](v157, 0x1000C8000313F17);
  }
  uint64_t v123 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a5)[2])(a5, &__s1, v122);
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  LODWORD(v157) = v116;
  LODWORD(v159) = 0;
  uint64_t v160 = v123;
  uint64_t v161 = v124;
  int v162 = 1;
  uint64_t v125 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 127, &__s1, 1, &v157, 2, 0);
  uint64_t __s1 = 129;
  LODWORD(v153) = 0;
  LODWORD(v157) = a2;
  LODWORD(v159) = 0;
  uint64_t v160 = v125;
  uint64_t v161 = v126;
  int v162 = 1;
  ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 45, &__s1, 1, &v157, 2, 0);
  int v128 = *(_DWORD *)(*(void *)(v127 + 32) + 4);
  if (v148)
  {
    uint64_t __s1 = 129;
    LODWORD(v153) = 0;
    LODWORD(v157) = v147;
    LODWORD(v159) = 0;
    sub_1CC738034(a5, 118, (unint64_t *)&__s1, (int *)&v157);
    uint64_t __s1 = 257;
    LODWORD(v153) = 0;
    LODWORD(v157) = v128;
    LODWORD(v159) = 0;
    int v99 = *(_DWORD *)(*(void *)(v146 + 32) + 4);
LABEL_106:
    LODWORD(v160) = v99;
    int v162 = 0;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 76, &__s1, 1, &v157, 2, 0);
    goto LABEL_107;
  }
  uint64_t __s1 = 257;
  LODWORD(v153) = 0;
  LODWORD(v157) = v128;
  LODWORD(v159) = 0;
  ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 118, &__s1, 1, &v157, 1, 0);
LABEL_107:
  int v101 = *(_DWORD *)(*(void *)(v100 + 32) + 4);
  if ((v93 & 0xFF00000000) != 0)
  {
    uint64_t __s1 = (uint64_t)&off_1E66AC1E8;
    LODWORD(v153) = 2;
    int v129 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void, void, void))(*a5)[4])(a5, 18, &__s1, 1, 0, 0, 0);
    v131 = v130;
    uint64_t v158 = 0;
    uint64_t v159 = 0;
    LODWORD(v157) = 0;
    HIDWORD(v157) = v101;
    uint64_t v160 = 0;
    llvm::MachineInstr::addOperand(v130, v129, (const llvm::MachineOperand *)&v157);
    LODWORD(v157) = 1;
    uint64_t v158 = 0;
    uint64_t v159 = 25;
    llvm::MachineInstr::addOperand(v131, v129, (const llvm::MachineOperand *)&v157);
    uint64_t v158 = 0;
    uint64_t v159 = 0;
    LODWORD(v157) = 0;
    HIDWORD(v157) = v93;
    uint64_t v160 = 0;
    llvm::MachineInstr::addOperand(v131, v129, (const llvm::MachineOperand *)&v157);
    LODWORD(v157) = 1;
    uint64_t v158 = 0;
    uint64_t v159 = 26;
    llvm::MachineInstr::addOperand(v131, v129, (const llvm::MachineOperand *)&v157);
    uint64_t v103 = *((void *)v131 + 4);
  }
  else
  {
    uint64_t __s1 = (uint64_t)&off_1E66ABEE0;
    LODWORD(v153) = 2;
    LODWORD(v157) = v101;
    LODWORD(v159) = 0;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*a5)[4])(a5, 19, &__s1, 1, &v157, 1, 0);
    uint64_t v103 = *(void *)(v102 + 32);
  }
  return *(unsigned int *)(v103 + 4);
}

uint64_t sub_1CBBADC8C(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  int v6 = a3;
  uint64_t v7 = (unsigned __int8 **)a1;
  uint64_t v302 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(*(void *)(a1 + 24) + 32);
  if ((a3 - 2475) < 4)
  {
    unsigned int v269 = -1;
    unsigned int v9 = 1;
    unsigned int v256 = 4;
    unsigned int v272 = 3;
    unsigned int v10 = 2;
    int v11 = 5;
    int v12 = 6;
    int v13 = 7;
    LODWORD(v255) = 5;
    uint64_t v14 = 1;
    goto LABEL_7;
  }
  if (a3 <= 2560)
  {
    if ((a3 - 2545) >= 0x10) {
      int v13 = 8;
    }
    else {
      int v13 = 6;
    }
    if ((a3 - 2545) >= 0x10) {
      int v12 = 7;
    }
    else {
      int v12 = 5;
    }
    if ((a3 - 2545) >= 0x10) {
      int v11 = 6;
    }
    else {
      int v11 = 4;
    }
    if ((a3 - 2545) >= 0x10) {
      unsigned int v10 = 2;
    }
    else {
      unsigned int v10 = 3;
    }
    if ((a3 - 2545) >= 0x10) {
      int v98 = 3;
    }
    else {
      int v98 = 4;
    }
    unsigned int v272 = v98;
    if ((a3 - 2545) >= 0x10) {
      int v99 = 5;
    }
    else {
      int v99 = -1;
    }
    LODWORD(v255) = v99;
    if ((a3 - 2545) >= 0x10) {
      int v100 = 4;
    }
    else {
      int v100 = 5;
    }
    unsigned int v256 = v100;
    if ((a3 - 2545) >= 0x10) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = 2;
    }
    uint64_t v14 = (a3 - 2545) >= 0x10;
    if ((a3 - 2545) >= 0x10) {
      int v15 = 6;
    }
    else {
      int v15 = -1;
    }
    goto LABEL_6;
  }
  LODWORD(v255) = -1;
  unsigned int v10 = 3;
  if ((a3 - 2561) < 0x10)
  {
    uint64_t v14 = 0;
    unsigned int v9 = 2;
    unsigned int v272 = 4;
    int v11 = 5;
    int v12 = 6;
    int v13 = 7;
    unsigned int v256 = 5;
    int v15 = 6;
LABEL_6:
    unsigned int v269 = v15;
LABEL_7:
    LODWORD(v271) = v11 + v9;
    LODWORD(v258) = v12 + v9;
    LODWORD(v259) = v13 + v9;
    unsigned int v16 = (void *)sub_1CBA5AE38(a1, v9);
    int v17 = 1;
    unsigned int v276 = v16;
    int v18 = 0;
    char v19 = 0;
    switch((int)v16)
    {
      case 1:
      case 2:
        int v17 = 0;
        int v18 = 0;
        goto LABEL_11;
      case 3:
        int v17 = 0;
        int v18 = 1;
        goto LABEL_11;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 10:
      case 12:
      case 13:
      case 15:
        int v17 = 0;
        int v18 = 0;
        goto LABEL_11;
      case 9:
      case 11:
      case 14:
        __break(1u);
        goto LABEL_443;
      case 16:
        int v17 = 0;
        int v18 = 0;
        unsigned int v276 = 14;
LABEL_11:
        char v19 = 1;
        break;
      default:
        goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (a3 == 2703)
  {
    unsigned int v10 = 4;
    LODWORD(v255) = 3;
  }
  int v17 = 0;
  int v18 = 0;
  unsigned int v269 = v255;
  LODWORD(v259) = v10 + 1;
  unsigned int v272 = 1;
  unsigned int v256 = 2;
  LODWORD(v271) = -1;
  LODWORD(v258) = v10;
  unsigned int v10 = -1;
  LODWORD(v255) = -1;
  unsigned int v9 = -1;
  LODWORD(v14) = 2;
  char v19 = 1;
  unsigned int v276 = 1;
  uint64_t v7 = (unsigned __int8 **)a1;
LABEL_12:
  int v20 = 0;
  int v280 = 1;
  uint64_t v21 = 119;
  int v263 = v18;
  if (v6 > 2544)
  {
    unsigned int v22 = v271;
    switch(v6)
    {
      case 2545:
      case 2549:
      case 2553:
      case 2557:
        goto LABEL_16;
      case 2546:
      case 2550:
      case 2554:
      case 2558:
        goto LABEL_14;
      case 2547:
      case 2551:
      case 2555:
      case 2559:
        goto LABEL_455;
      case 2548:
      case 2552:
      case 2556:
      case 2560:
        break;
      case 2561:
      case 2565:
      case 2569:
      case 2573:
LABEL_400:
        int v20 = 1;
LABEL_16:
        int v280 = 0;
        uint64_t v21 = 179;
        break;
      case 2562:
      case 2566:
      case 2570:
      case 2574:
LABEL_401:
        int v20 = 1;
LABEL_14:
        int v280 = 1;
        uint64_t v21 = 179;
        break;
      case 2563:
      case 2567:
      case 2571:
      case 2575:
        goto LABEL_454;
      case 2564:
      case 2568:
      case 2572:
      case 2576:
LABEL_413:
        int v20 = 1;
        int v280 = 1;
        break;
      default:
        unsigned int v22 = v271;
        if (v6 == 2703) {
LABEL_454:
        }
          int v20 = 1;
LABEL_455:
        int v280 = 0;
        break;
    }
  }
  else
  {
    unsigned int v22 = v271;
    switch(v6)
    {
      case 2472:
        goto LABEL_401;
      case 2473:
        goto LABEL_454;
      case 2474:
        goto LABEL_413;
      case 2475:
        goto LABEL_16;
      case 2476:
        goto LABEL_14;
      case 2477:
        goto LABEL_455;
      case 2478:
        break;
      default:
        goto LABEL_400;
    }
  }
  int v257 = v20;
  int v268 = sub_1CBA5AF20((uint64_t)v7, v22, v272);
  int v260 = v14;
  if (v10 == -1) {
    int v24 = 1;
  }
  else {
    int v24 = sub_1CBA5AE38((uint64_t)v7, v10);
  }
  signed int v25 = v276 - 8;
  if (v276 - 8 <= 7 && ((0xF1u >> v25) & 1) != 0)
  {
    int8x8_t v23 = (int8x8_t)dword_1CDC6D3AC[v25];
    goto LABEL_27;
  }
  if (v24)
  {
    v23.i32[0] = v24;
LABEL_27:
    uint8x8_t v26 = (uint8x8_t)vcnt_s8(v23);
    v26.i16[0] = vaddlv_u8(v26);
    unsigned int v278 = v26.i32[0];
    uint64_t v246 = 0;
    v264 = v8;
    char v27 = 0;
    int v266 = v276;
    int v277 = v280;
    int v273 = v26.i32[0];
    int v270 = 1;
    switch(v276)
    {
      case 0u:
      case 4u:
      case 5u:
      case 0xAu:
        char v27 = 0;
        int v266 = 0;
        int v277 = 0;
        LODWORD(v246) = 1;
        goto LABEL_31;
      case 1u:
      case 3u:
      case 6u:
      case 7u:
        LODWORD(v246) = 0;
        int v277 = 0;
        char v27 = 1;
        int v266 = 1;
LABEL_31:
        int v273 = v26.i32[0];
        int v270 = 1;
        goto LABEL_32;
      case 2u:
        goto LABEL_32;
      case 8u:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
        LODWORD(v246) = 0;
        char v27 = 0;
        int v270 = 0;
        int v266 = 2;
        int v277 = 1;
        int v273 = 1;
LABEL_32:
        int v267 = v17;
        if (v10 == -1)
        {
          unsigned int v28 = 1;
        }
        else
        {
          sub_1CC73C210(*(_DWORD *)&v7[4][32 * v10 + 4], a4, (uint64_t)v296);
          if ((_BYTE)v297)
          {
            if (LODWORD(v296[1]) > 0x40)
            {
              if (v296[0]) {
                MEMORY[0x1D25D9CB0](v296[0], 0x1000C8000313F17);
              }
              LODWORD(v29) = 0;
              int v30 = 0;
              uint64_t v7 = (unsigned __int8 **)a1;
            }
            else
            {
              unint64_t v29 = ((uint64_t)v296[0] << -LOBYTE(v296[1]) >> -LOBYTE(v296[1])) & 0xFFFFFFFFFFFFFF00;
              int v30 = ((uint64_t)v296[0] << -LOBYTE(v296[1]) >> -LOBYTE(v296[1]));
            }
            unsigned int v28 = v30 | v29;
          }
          else
          {
            unsigned int v28 = 0;
          }
        }
        unsigned int v254 = v9;
        if v25 <= 7 && ((0xF1u >> v25)) {
          unsigned int v28 = dword_1CDC6D3AC[v25];
        }
        *(void *)(a5 + 40) = v7[3];
        *(void *)(a5 + 48) = v7;
        size_t v31 = v7 + 7;
        BOOL v32 = (unsigned __int8 **)(a5 + 32);
        unsigned int v265 = v28;
        if (v7 + 7 == (unsigned __int8 **)(a5 + 32)) {
          goto LABEL_46;
        }
        uint64_t v33 = *v32;
        if (!*v32) {
          goto LABEL_44;
        }
        int v101 = *v33;
        if ((v101 - 4) > 0x1E)
        {
          if ((v101 - 3) >= 0xFFFFFFFE) {
            v248 = *v32;
          }
          else {
            v248 = 0;
          }
          if ((v101 - 3) < 0xFFFFFFFE)
          {
            if (v101 == 3) {
              *((void *)v33 + 1) = 0;
            }
            goto LABEL_44;
          }
          unint64_t v103 = (unint64_t)(v248 + 8);
        }
        else if ((v33[1] & 0x7F) != 2 && !*((_DWORD *)v33 + 3) {
               || (uint64_t v102 = *((void *)v33 + 2), (v102 & 4) == 0)
        }
               || (unint64_t v103 = v102 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_44:
          uint64_t v34 = *v31;
          llvm::MachineInstr *v32 = *v31;
          if (v34)
          {
            llvm::MetadataTracking::track((uint64_t)v32, v34, 2);
            unsigned int v28 = v265;
          }
LABEL_46:
          if (!a2)
          {
            int v5 = 0;
            int v38 = v271;
            goto LABEL_192;
          }
          v286 = v288;
          uint64_t v287 = 0x400000000;
          unsigned int v35 = *(_DWORD *)&v7[4][32 * v255 + 4];
          if (v278 < 2)
          {
            uint64_t v39 = 129;
            if (v280) {
              uint64_t v39 = 257;
            }
            uint64_t __s1 = (void *)v39;
            LODWORD(v292) = 0;
            unint64_t v282 = 257;
            unsigned int v283 = 0;
            unint64_t v40 = 31 - __clz(v28);
            uint64_t v41 = a5;
            uint64_t v42 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a5 + 8), (llvm::LLVMContext *)0x20);
            unsigned int v43 = llvm::ConstantInt::get(v42, v40, (const llvm::APInt *)1);
            uint64_t v44 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)v41 + 16))(v41, &v282, v43);
            LODWORD(v296[0]) = v35;
            LODWORD(v297) = 0;
            *((void *)&v297 + 1) = v44;
            uint64_t v298 = v45;
            int v299 = 1;
            (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v41 + 32))(v41, 205, &__s1, 1, v296, 2, 0);
            if (v287 >= HIDWORD(v287)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v286 + v287) = *(_DWORD *)(*(void *)(v46 + 32) + 4);
            LODWORD(v287) = v287 + 1;
            int v17 = v267;
            unsigned int v36 = v265;
          }
          else
          {
            v296[0] = &v297;
            v296[1] = (void *)0x400000000;
            sub_1CBBB1038(v35, a4, a5, (uint64_t)v296);
            unsigned int v36 = v265;
            for (uint64_t i = 0; i != 4; ++i)
            {
              if ((v265 >> i))
              {
                if (v287 >= (unint64_t)HIDWORD(v287)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_DWORD *)v286 + v287) = *((_DWORD *)v296[0] + i);
                LODWORD(v287) = v287 + 1;
              }
            }
            if (v296[0] != &v297)
            {
              free(v296[0]);
              unsigned int v36 = v265;
            }
            uint64_t v7 = (unsigned __int8 **)a1;
          }
          if (v263)
          {
            uint64_t __s1 = v293;
            uint64_t v292 = 0x400000000;
            unsigned int v253 = v287;
            if (v280)
            {
              uint64_t v47 = v8[1];
              (*(void (**)(uint64_t))(*(void *)(v47 + 1328) + 184))(v47 + 1328);
              uint64_t v48 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v47 + 1328) + 176))(v47 + 1328);
              uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)(v47 + 1328) + 104))(v47 + 1328);
              if (v287)
              {
                uint64_t v50 = v49;
                v51 = (int *)v286;
                uint64_t v52 = 4 * v287;
                do
                {
                  int v53 = *v51;
                  unint64_t v282 = 129;
                  unsigned int v283 = 0;
                  uint64_t v54 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void, void, void))(*(void *)a5 + 32))(a5, 939, &v282, 1, 0, 0, 0);
                  uint64_t v56 = v55;
                  LODWORD(v296[0]) = 1;
                  v296[1] = 0;
                  *(void *)&long long v297 = 0;
                  llvm::MachineInstr::addOperand(v55, v54, (const llvm::MachineOperand *)v296);
                  v296[1] = 0;
                  HIDWORD(v296[0]) = v53;
                  LODWORD(v296[0]) = 0;
                  long long v297 = 0uLL;
                  llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)v296);
                  LODWORD(v296[0]) = 1;
                  v296[1] = 0;
                  *(void *)&long long v297 = 0;
                  llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)v296);
                  LODWORD(v296[0]) = 1;
                  v296[1] = 0;
                  *(void *)&long long v297 = 128;
                  llvm::MachineInstr::addOperand(v56, v54, (const llvm::MachineOperand *)v296);
                  sub_1CC73B5D0(v56, v50, v48);
                  if (v292 >= (unint64_t)HIDWORD(v292)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)__s1 + v292) = *(_DWORD *)(*((void *)v56 + 4) + 4);
                  LODWORD(v292) = v292 + 1;
                  ++v51;
                  v52 -= 4;
                }
                while (v52);
              }
            }
            else
            {
              sub_1CB927A18((uint64_t)&__s1, (uint64_t)&v286);
            }
            if (v253 < 2)
            {
              unint64_t v282 = 129;
              unsigned int v283 = 0;
              LODWORD(v296[0]) = *(_DWORD *)__s1;
              LODWORD(v297) = 0;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 19, &v282, 1, v296, 1, 0);
              uint64_t v77 = v76;
              uint64_t v7 = (unsigned __int8 **)a1;
              int v38 = v271;
            }
            else
            {
              unint64_t v282 = ((8 * (unsigned __int16)v253) | 0x400004u) + 0x400000;
              unsigned int v283 = 0;
              int v60 = (int *)__s1;
              int v61 = v292;
              v296[0] = &v297;
              v296[1] = (void *)0x800000000;
              int v38 = v271;
              if (v292 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v292)
              {
                uint64_t v62 = 0;
                uint64_t v63 = 4 * v292;
                uint64_t v7 = (unsigned __int8 **)a1;
                do
                {
                  int v64 = *v60++;
                  uint64_t v65 = (_DWORD *)((char *)&v297 + v62);
                  _DWORD *v65 = v64;
                  v65[4] = 0;
                  v62 += 24;
                  v63 -= 4;
                }
                while (v63);
                int v66 = (int)v296[1];
              }
              else
              {
                int v66 = 0;
                uint64_t v7 = (unsigned __int8 **)a1;
              }
              LODWORD(v296[1]) = v66 + v61;
              (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *))(*(void *)a5 + 32))(a5, 77, &v282, 1, &v297);
              uint64_t v77 = v109;
              if (v296[0] != &v297) {
                free(v296[0]);
              }
            }
            uint64_t v110 = (int *)__s1;
            uint64_t v111 = (int *)v293;
LABEL_162:
            if (v110 != v111) {
              free(v110);
            }
            goto LABEL_190;
          }
          char v57 = v19 ^ 1;
          if (v276 != v266) {
            char v57 = 1;
          }
          if (v57)
          {
            if (v270)
            {
              unsigned int v67 = v287;
              unsigned int v68 = (v287 + 1) >> 1;
              if (!v246) {
                unsigned int v68 = v287;
              }
              uint64_t v69 = (void *)(((((unint64_t)(16 * v68) >> 4) & 0xFFFFFFF) << 7) | 1);
              if (v17)
              {
                int v38 = v271;
                if (v287)
                {
                  uint64_t v70 = 129;
                  if (v280) {
                    uint64_t v70 = 257;
                  }
                  v296[0] = (void *)v70;
                  LODWORD(v296[1]) = 0;
                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a5 + 32))(a5, 68, v296, 1, 0, 0, 0);
                  if (v287 >= HIDWORD(v287)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v286 + v287) = *(_DWORD *)(*(void *)(v71 + 32) + 4);
                  unsigned int v67 = v287 + 1;
                  LODWORD(v287) = v287 + 1;
                }
                if (v280)
                {
                  unint64_t v72 = (int *)v286;
                  if (v67)
                  {
                    unint64_t v73 = 0;
                    uint64_t v74 = 4 * v67;
                    do
                    {
                      uint64_t __s1 = (void *)129;
                      LODWORD(v292) = 0;
                      LODWORD(v296[0]) = v72[v73 / 4];
                      LODWORD(v297) = 0;
                      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 119, &__s1, 1, v296, 1, 0);
                      unint64_t v72 = (int *)v286;
                      *(_DWORD *)((char *)v286 + v73) = *(_DWORD *)(*(void *)(v75 + 32) + 4);
                      v73 += 4;
                    }
                    while (v74 != v73);
                    unsigned int v67 = v287;
                    uint64_t v7 = (unsigned __int8 **)a1;
                  }
                }
                else
                {
                  unint64_t v72 = (int *)v286;
                }
                v296[0] = (void *)((8 * (unsigned __int16)v67) | 0x400004u);
                LODWORD(v296[1]) = 0;
                uint64_t v124 = (void *)sub_1CC738E00(a5, (uint64_t)v296, v72, v67);
                uint64_t __s1 = v69;
                LODWORD(v292) = 0;
                v296[0] = v124;
                v296[1] = v125;
                LODWORD(v297) = 1;
                sub_1CC7382B0(a5);
                uint64_t v77 = v126;
                goto LABEL_190;
              }
              unsigned int v104 = *(_DWORD *)&v7[4][32 * v254 + 4];
              uint64_t __s1 = v293;
              uint64_t v292 = 0x400000000;
              int v38 = v271;
              if (v287)
              {
                sub_1CB927A18((uint64_t)&__s1, (uint64_t)&v286);
                unsigned int v36 = v265;
              }
              sub_1CBBD8F50((uint64_t)&v282, (uint64_t)&__s1, v104, v276, v36, (llvm::IntegerType *****)a5);
              if (__s1 != v293) {
                free(__s1);
              }
              char v105 = v27 ^ 1;
              if (v67 != 3) {
                char v105 = 1;
              }
              uint64_t v7 = (unsigned __int8 **)a1;
              if (v105)
              {
                if (v283 == 1)
                {
                  v289 = v69;
                  int v290 = 0;
                  LODWORD(v296[0]) = *(_DWORD *)v282;
                  LODWORD(v297) = 0;
                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 19, &v289, 1, v296, 1, 0);
                }
                else
                {
                  v296[0] = v69;
                  LODWORD(v296[1]) = 0;
                  sub_1CC73661C(a5, (uint64_t)v296, (int *)v282, v283);
                }
              }
              else
              {
                LODWORD(v296[0]) = *(_DWORD *)v282;
                LODWORD(v297) = 0;
                sub_1CC7363F0((void *)a5, 0x81uLL, (int *)v296);
                v289 = v69;
                int v290 = 0;
                uint64_t v107 = *(void *)(v106 + 32);
                LODWORD(v296[0]) = *(_DWORD *)(v107 + 4);
                LODWORD(v297) = 0;
                DWORD2(v297) = *(_DWORD *)(v107 + 36);
                int v299 = 0;
                int v300 = *(_DWORD *)(v282 + 4);
                int v301 = 0;
                (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 76, &v289, 1, v296, 3, 0);
              }
              uint64_t v77 = v108;
              uint64_t v110 = (int *)v282;
              uint64_t v111 = (int *)&v284;
              goto LABEL_162;
            }
            v296[0] = (void *)129;
            LODWORD(v296[1]) = 0;
            uint64_t v78 = a5;
            int v79 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a5 + 8), (llvm::LLVMContext *)0x10);
            uint64_t v80 = llvm::ConstantInt::get(v79, v276, (const llvm::APInt *)1);
            (*(void (**)(uint64_t, void **, void *))(*(void *)v78 + 16))(v78, v296, v80);
            int v82 = *(_DWORD *)(*(void *)(v81 + 32) + 4);
            uint64_t __s1 = (void *)257;
            LODWORD(v292) = 0;
            LODWORD(v296[0]) = v82;
            LODWORD(v297) = 0;
            uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v78 + 32))(v78, 54, &__s1, 1, v296, 1, 0);
            uint64_t v77 = v84;
            if (v287)
            {
              uint64_t v85 = (llvm::MachineFunction *)v83;
              int v86 = (int *)v286;
              uint64_t v87 = 4 * v287;
              do
              {
                int v88 = *v86++;
                v296[1] = 0;
                HIDWORD(v296[0]) = v88;
                LODWORD(v296[0]) = 0;
                long long v297 = 0uLL;
                llvm::MachineInstr::addOperand(v77, v85, (const llvm::MachineOperand *)v296);
                v87 -= 4;
              }
              while (v87);
              uint64_t v7 = (unsigned __int8 **)a1;
            }
          }
          else
          {
            unsigned int v58 = v287;
            unint64_t v282 = 0;
            if (v276 == 1)
            {
              uint64_t v59 = 129;
            }
            else
            {
              if (v276 != 2) {
                llvm::report_fatal_error((llvm *)"Unexpected storage format", (const llvm::Twine *)1);
              }
              uint64_t v59 = 257;
            }
            unint64_t v282 = v59;
            if ((*(_DWORD *)v286 & 0x80000000) != 0
              && (uint64_t v89 = *(_DWORD *)v286 & 0x7FFFFFFF, v89 < *(_DWORD *)(a4 + 432)))
            {
              unsigned int v90 = *(void **)(*(void *)(a4 + 424) + 8 * v89);
            }
            else
            {
              unsigned int v90 = 0;
            }
            v296[0] = v90;
            unint64_t v92 = sub_1CB8F1DC4((unint64_t *)v296);
            if (v91 == 1) {
            unint64_t v94 = sub_1CB8F1DC4(&v282);
            }
            if (v93 == 1) {
            if (v92 > v94)
            }
            {
              if (v287)
              {
                uint64_t v95 = v286;
                uint64_t v96 = 4 * v287;
                do
                {
                  uint64_t __s1 = (void *)v282;
                  LODWORD(v292) = 0;
                  LODWORD(v296[0]) = *v95;
                  LODWORD(v297) = 0;
                  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, v21, &__s1, 1, v296, 1, 0);
                  *v95++ = *(_DWORD *)(*(void *)(v97 + 32) + 4);
                  v96 -= 4;
                }
                while (v96);
                int v277 = 0;
                uint64_t v7 = (unsigned __int8 **)a1;
              }
              else
              {
                int v277 = 0;
              }
            }
            if (v58 >= 2)
            {
              if (v277) {
                int v114 = 32;
              }
              else {
                int v114 = 16;
              }
              unsigned int v115 = (v114 << 19) | (8 * v273) | 4;
              LODWORD(v116) = (8 * v114) | 1;
              if (v273 == 1) {
                unint64_t v116 = v116;
              }
              else {
                unint64_t v116 = v115;
              }
              uint64_t __s1 = (void *)v116;
              LODWORD(v292) = 0;
              uint64_t v117 = (int *)v286;
              int v118 = v287;
              v296[0] = &v297;
              v296[1] = (void *)0x800000000;
              if (v287 >= 9) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v287)
              {
                uint64_t v119 = 0;
                uint64_t v120 = 4 * v287;
                do
                {
                  int v121 = *v117++;
                  unsigned int v122 = (_DWORD *)((char *)&v297 + v119);
                  *unsigned int v122 = v121;
                  v122[4] = 0;
                  v119 += 24;
                  v120 -= 4;
                }
                while (v120);
                int v123 = (int)v296[1];
              }
              else
              {
                int v123 = 0;
              }
              LODWORD(v296[1]) = v123 + v118;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, long long *))(*(void *)a5 + 32))(a5, 77, &__s1, 1, &v297);
              uint64_t v77 = v127;
              if (v296[0] != &v297) {
                free(v296[0]);
              }
            }
            else
            {
              uint64_t v112 = 129;
              if (v277) {
                uint64_t v112 = 257;
              }
              uint64_t __s1 = (void *)v112;
              LODWORD(v292) = 0;
              LODWORD(v296[0]) = *(_DWORD *)v286;
              LODWORD(v297) = 0;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 19, &__s1, 1, v296, 1, 0);
              uint64_t v77 = v113;
            }
          }
          int v38 = v271;
LABEL_190:
          int v5 = *(_DWORD *)(*((void *)v77 + 4) + 4);
          if (v286 != v288) {
            free(v286);
          }
LABEL_192:
          if (v38 == -1)
          {
            uint64_t __s1 = (void *)129;
            LODWORD(v292) = 0;
            uint64_t v129 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a5 + 8), (llvm::LLVMContext *)0x10);
            v131 = *(llvm::ConstantInt **)v129;
            unsigned int v132 = *(_DWORD *)(v129 + 8);
            LODWORD(v296[1]) = v132 >> 8;
            if (v132 >> 8 >= 0x41) {
              operator new[]();
            }
            v296[0] = 0;
            uint64_t v133 = llvm::ConstantInt::get(v131, (llvm::LLVMContext *)v296, v130);
            if (LODWORD(v296[1]) >= 0x41 && v296[0]) {
              MEMORY[0x1D25D9CB0](v296[0], 0x1000C8000313F17);
            }
            (*(void (**)(uint64_t, void **, void *))(*(void *)a5 + 16))(a5, &__s1, v133);
            v255 = *(unsigned __int8 **)(v134 + 32);
            int v128 = v7[4];
          }
          else
          {
            int v128 = v7[4];
            v255 = &v128[32 * v38];
          }
          sub_1CC73C210(*(_DWORD *)&v128[32 * v256 + 4], a4, (uint64_t)v296);
          if ((_BYTE)v297)
          {
            if (LODWORD(v296[1]) > 0x40)
            {
              if (v296[0]) {
                MEMORY[0x1D25D9CB0](v296[0], 0x1000C8000313F17);
              }
              unint64_t v136 = 0;
              uint64_t v137 = 0;
              uint64_t v7 = (unsigned __int8 **)a1;
            }
            else
            {
              unint64_t v136 = ((uint64_t)v296[0] << -LOBYTE(v296[1]) >> -LOBYTE(v296[1])) & 0xFFFFFFFFFFFFFF00;
              uint64_t v137 = ((uint64_t)v296[0] << -LOBYTE(v296[1]) >> -LOBYTE(v296[1]));
            }
            unint64_t v135 = v137 | v136;
          }
          else
          {
            unint64_t v135 = 0;
          }
          unsigned int v138 = *(_DWORD *)&v7[4][32 * v272 + 4];
          LODWORD(v8) = a2 ^ 1;
          unint64_t v262 = v135;
          if (((a2 ^ 1) & 1) != 0 || v135)
          {
LABEL_248:
            unsigned int v256 = v138;
            sub_1CC73C44C(v138, a4, 1, (uint64_t)&v282);
            int v171 = v285;
            v172 = v7[4];
            sub_1CC73C210(*(_DWORD *)&v172[32 * v258 + 4], a4, (uint64_t)v296);
            if ((_BYTE)v297)
            {
              if (LODWORD(v296[1]) > 0x40)
              {
                if (v296[0]) {
                  MEMORY[0x1D25D9CB0](v296[0], 0x1000C8000313F17);
                }
                unint64_t v173 = 0;
                uint64_t v174 = 0;
              }
              else
              {
                unint64_t v173 = ((uint64_t)v296[0] << -LOBYTE(v296[1]) >> -LOBYTE(v296[1])) & 0xFFFFFFFFFFFFFF00;
                uint64_t v174 = ((uint64_t)v296[0] << -LOBYTE(v296[1]) >> -LOBYTE(v296[1]));
              }
              unint64_t v271 = v174 | v173;
            }
            else
            {
              unint64_t v271 = 0;
            }
            v258 = (llvm::MachineOperand *)&v172[32 * v269];
            sub_1CC73C210(*(_DWORD *)(*(void *)(a1 + 32) + 32 * v259 + 4), a4, (uint64_t)v296);
            if ((_BYTE)v297)
            {
              if (LODWORD(v296[1]) > 0x40)
              {
                if (v296[0]) {
                  MEMORY[0x1D25D9CB0](v296[0], 0x1000C8000313F17);
                }
                unint64_t v176 = 0;
                uint64_t v177 = 0;
              }
              else
              {
                unint64_t v176 = ((uint64_t)v296[0] << -LOBYTE(v296[1]) >> -LOBYTE(v296[1])) & 0xFFFFFFFFFFFFFF00;
                uint64_t v177 = ((uint64_t)v296[0] << -LOBYTE(v296[1]) >> -LOBYTE(v296[1]));
              }
              unint64_t v175 = v177 | v176;
            }
            else
            {
              unint64_t v175 = 0;
            }
            unint64_t v259 = v175;
            if (((1 << v276) & 0xF104) != 0 || ((1 << v276) & 0xCA) != 0)
            {
              LODWORD(v8) = 0;
              if (v277) {
                int v178 = 59;
              }
              else {
                int v178 = 54;
              }
              uint64_t v179 = 0x3900000038;
              int v180 = 58;
            }
            else
            {
              if (v277) {
                int v178 = 59;
              }
              else {
                int v178 = 54;
              }
              uint64_t v179 = 0x3800000037;
              int v180 = 56;
            }
            v296[0] = &v297;
            LODWORD(v297) = 55;
            *(void *)((char *)&v297 + 4) = v179;
            HIDWORD(v297) = v180;
            v296[1] = (void *)0x400000004;
            v181 = operator new(8uLL);
            int v182 = *((_DWORD *)&v297 + (v273 - 1));
            _DWORD *v181 = v178;
            v181[1] = v182;
            if (v268 == 2) {
              int v183 = 41;
            }
            else {
              int v183 = 49;
            }
            v184 = operator new(0x10uLL);
            v184[2] = v183;
            *(void *)v184 = *(void *)v181;
            operator delete(v181);
            if (v171) {
              int v185 = 49;
            }
            else {
              int v185 = 41;
            }
            v184[3] = v185;
            if (v257) {
              int v186 = 41;
            }
            else {
              int v186 = 60;
            }
            uint64_t v14 = (uint64_t)operator new(0x20uLL);
            *(_DWORD *)(v14 + 16) = v186;
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v184;
            if (v260) {
              uint64_t v187 = 105;
            }
            else {
              uint64_t v187 = 101;
            }
            operator delete(v184);
            int v6 = sub_1CBE0418C(v187, 5, v14);
            unsigned int v16 = v296[0];
            if (v296[0] != &v297) {
LABEL_443:
            }
              free(v16);
            operator delete((void *)v14);
            v188 = *(llvm::MachineFunction **)(a5 + 8);
            uint64_t v189 = *(void *)(*(void *)(a5 + 16) + 8) + 48 * v6;
            v190 = *(void **)(a5 + 32);
            uint64_t __s1 = v190;
            if (v190) {
              llvm::MetadataTracking::track((uint64_t)&__s1, (unsigned __int8 *)v190, 2);
            }
            MachineInstr = llvm::MachineFunction::CreateMachineInstr(v188, v189, (unsigned __int8 **)&__s1, 0);
            if (!__s1)
            {
LABEL_284:
              v192 = *(unint64_t **)(a5 + 48);
              uint64_t v193 = *(void *)(*(void *)(a5 + 40) + 40);
              *((void *)MachineInstr + 3) = v193;
              uint64_t v194 = *(void *)(v193 + 32);
              uint64_t v195 = *((unsigned int *)MachineInstr + 10);
              if (v195)
              {
                uint64_t v229 = *((void *)MachineInstr + 4);
                uint64_t v230 = *(void *)(v194 + 40);
                uint64_t v231 = 32 * v195;
                do
                {
                  if (!*(unsigned char *)v229)
                  {
                    uint64_t v232 = *(unsigned int *)(v229 + 4);
                    if ((int)v232 >= 0) {
                      v233 = (uint64_t *)(*(void *)(v230 + 272) + 8 * v232);
                    }
                    else {
                      v233 = (uint64_t *)(*(void *)(v230 + 24) + 16 * (v232 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v234 = *v233;
                    if (*v233)
                    {
                      uint64_t v235 = *(void *)(v234 + 16);
                      *(void *)(v234 + 16) = v229;
                      *(void *)(v229 + 16) = v235;
                      if (*(unsigned char *)(v229 + 3))
                      {
                        *(void *)(v229 + 24) = v234;
                      }
                      else
                      {
                        *(void *)(v229 + 24) = 0;
                        v233 = (uint64_t *)(v235 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v229 + 16) = v229;
                      *(void *)(v229 + 24) = 0;
                    }
                    uint64_t *v233 = v229;
                  }
                  v229 += 32;
                  v231 -= 32;
                }
                while (v231);
              }
              uint64_t v196 = *(void *)(v194 + 728);
              if (v196) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v196 + 24))(v196, MachineInstr);
              }
              unint64_t v197 = *v192 & 0xFFFFFFFFFFFFFFF8;
              *(void *)MachineInstr = v197 | *(void *)MachineInstr & 7;
              *((void *)MachineInstr + 1) = v192;
              *(void *)(v197 + 8) = MachineInstr;
              unint64_t *v192 = *v192 & 7 | (unint64_t)MachineInstr;
              uint64_t v198 = *(void *)(a5 + 56);
              if (v198) {
                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v198 + 24))(v198, MachineInstr);
              }
              if (v8) {
                unsigned int v199 = (v273 + 1) >> 1;
              }
              else {
                unsigned int v199 = v273;
              }
              if (a2)
              {
                v296[1] = 0;
                long long v297 = 0uLL;
                HIDWORD(v296[0]) = v5;
                LODWORD(v296[0]) = 0;
                llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
                v200 = v264;
                unsigned int v201 = v266;
                v202 = v255;
                goto LABEL_373;
              }
              *(_OWORD *)v296 = xmmword_1CDC6D230;
              if (v277) {
                int v203 = 32;
              }
              else {
                int v203 = 16;
              }
              if (*((_DWORD *)v296 + v199 - 1) == 1) {
                unsigned int v204 = (8 * v203) | 1;
              }
              else {
                unsigned int v204 = (v203 << 19) | (8 * (unsigned __int16)*((_DWORD *)v296 + v199 - 1)) | 4;
              }
              unint64_t v205 = v204;
              uint64_t __s1 = (void *)v204;
              char v206 = v270 ^ 1;
              if (v199 != 3) {
                char v206 = 1;
              }
              if ((v206 & 1) == 0)
              {
                char v207 = 3;
                if ((v205 & 1) == 0) {
                  char v207 = 19;
                }
                uint64_t v208 = (8 * (v205 >> v207)) | 1;
                char v209 = 35;
                char v210 = 19;
                if ((v205 & 4) == 0) {
                  char v209 = 19;
                }
                unint64_t v211 = v205 >> v209;
                if ((v205 & 4) == 0) {
                  char v210 = 3;
                }
                if (v205) {
                  char v210 = 3;
                }
                uint64_t v212 = (8 * (unsigned __int16)(v205 >> v210)) | (v211 << 19) | 2;
                if ((v205 & 2) != 0) {
                  unint64_t v213 = v212;
                }
                else {
                  unint64_t v213 = v208;
                }
                unint64_t v205 = sub_1CBA5A95C(3, v213);
                uint64_t __s1 = (void *)v205;
              }
              uint64_t v214 = a4;
              unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a4, "", 0);
              unint64_t v215 = IncompleteVirtualRegister & 0x7FFFFFFF;
              *(void *)(*(void *)(a4 + 24) + 16 * v215) = 4;
              unint64_t v216 = *(unsigned int *)(a4 + 432);
              if (v215 >= v216)
              {
                uint64_t v217 = *(void *)(a4 + 440);
                uint64_t v218 = v215 + 1 - v216;
                if (v215 >= *(unsigned int *)(a4 + 436)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                int v219 = *(_DWORD *)(a4 + 432);
                if (v218)
                {
                  v220 = (void *)(*(void *)(a4 + 424) + 8 * *(unsigned int *)(a4 + 432));
                  uint64_t v221 = ~v215 + v216;
                  do
                    *v220++ = v217;
                  while (!__CFADD__(v221++, 1));
                  int v219 = *(_DWORD *)(a4 + 432);
                }
                uint64_t v214 = a4;
                *(_DWORD *)(a4 + 432) = v219 + v218;
              }
              *(void *)(*(void *)(v214 + 424) + 8 * v215) = v205;
              uint64_t v223 = *(void *)(v214 + 8);
              if (v223) {
                (*(void (**)(uint64_t, void))(*(void *)v223 + 24))(v223, IncompleteVirtualRegister);
              }
              int v225 = sub_1CB8F1DC4((unint64_t *)&__s1);
              if (v224 == 1) {
              v200 = v264;
              }
              unsigned int v201 = v266;
              if (v225 <= 111)
              {
                if (v225 <= 47)
                {
                  v226 = (__int16 ***)&off_1E66AF970;
                  if (v225 != 1)
                  {
                    v202 = v255;
                    unsigned int v227 = IncompleteVirtualRegister;
                    uint64_t v228 = 16 * v215;
                    if (v225 != 16) {
                      v226 = &off_1E66AF580;
                    }
                    goto LABEL_372;
                  }
                }
                else if (v225 > 79)
                {
                  if (v225 == 80) {
                    v226 = (__int16 ***)&off_1E66AF698;
                  }
                  else {
                    v226 = (__int16 ***)&off_1E66AF6D0;
                  }
                }
                else if (v225 == 48)
                {
                  v226 = (__int16 ***)&off_1E66AF628;
                }
                else
                {
                  v226 = (__int16 ***)&off_1E66AF9A8;
                }
              }
              else if (v225 > 223)
              {
                if (v225 > 287)
                {
                  if (v225 == 288) {
                    v226 = (__int16 ***)&off_1E66AF890;
                  }
                  else {
                    v226 = (__int16 ***)&off_1E66AF8C8;
                  }
                }
                else if (v225 == 224)
                {
                  v226 = (__int16 ***)&off_1E66AF820;
                }
                else
                {
                  v226 = (__int16 ***)&off_1E66AF858;
                }
              }
              else if (v225 > 159)
              {
                if (v225 == 160) {
                  v226 = (__int16 ***)&off_1E66AF7B0;
                }
                else {
                  v226 = (__int16 ***)&off_1E66AF7E8;
                }
              }
              else if (v225 == 112)
              {
                v226 = (__int16 ***)&off_1E66AF740;
              }
              else
              {
                v226 = (__int16 ***)&off_1E66AF778;
              }
              v202 = v255;
              unsigned int v227 = IncompleteVirtualRegister;
              uint64_t v228 = 16 * v215;
LABEL_372:
              *(void *)(*(void *)(a4 + 24) + v228) = v226;
              v296[1] = 0;
              long long v297 = 0uLL;
              HIDWORD(v296[0]) = v227;
              LODWORD(v296[0]) = 0x1000000;
              llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
LABEL_373:
              LODWORD(v296[0]) = 1;
              v296[1] = 0;
              *(void *)&long long v297 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
              if (v270) {
                uint64_t v238 = v265;
              }
              else {
                uint64_t v238 = 1;
              }
              LODWORD(v296[0]) = 1;
              v296[1] = 0;
              *(void *)&long long v297 = v201 | (unint64_t)(16 * v238) | ((unint64_t)(v262 != 0) << 8);
              llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
              unsigned int v239 = *((_DWORD *)v202 + 1);
              if (v268 == 2)
              {
                v296[1] = 0;
                long long v297 = 0uLL;
                HIDWORD(v296[0]) = v239;
                LODWORD(v296[0]) = 0;
                llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
                LODWORD(v296[0]) = 1;
                v296[1] = 0;
                *(void *)&long long v297 = 0;
                llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
                uint64_t v240 = 0;
                uint64_t v241 = 0;
              }
              else
              {
                sub_1CC73C210(v239, a4, (uint64_t)v296);
                if ((_BYTE)v297)
                {
                  if (LODWORD(v296[1]) > 0x40)
                  {
                    if (v296[0]) {
                      MEMORY[0x1D25D9CB0](v296[0], 0x1000C8000313F17);
                    }
                    uint64_t v240 = 0;
                    v200 = v264;
                  }
                  else
                  {
                    uint64_t v240 = ((uint64_t)v296[0] << -(uint64_t)LODWORD(v296[1]) >> -(uint64_t)LODWORD(v296[1]));
                  }
                }
                else
                {
                  uint64_t v240 = 0;
                }
                LODWORD(v296[0]) = 1;
                v296[1] = 0;
                *(void *)&long long v297 = v240;
                llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
                uint64_t v241 = 0x100000000;
              }
              if (v285)
              {
                v242 = &v282;
                if (v283 >= 0x41) {
                  v242 = (unint64_t *)v282;
                }
                unint64_t v243 = *v242;
                if ((*(_WORD *)(*v200 + 18) & 0x3FF0) == 0x650)
                {
                  uint64_t v244 = 1;
                }
                else
                {
                  uint64_t v244 = 255;
                  if (!*(unsigned char *)(v200[2] + 389)) {
                    uint64_t v244 = 15;
                  }
                }
                LODWORD(v296[0]) = 1;
                v296[1] = 0;
                *(void *)&long long v297 = v244 & v243;
              }
              else
              {
                v296[1] = 0;
                long long v297 = 0uLL;
                HIDWORD(v296[0]) = v256;
                LODWORD(v296[0]) = 0;
                llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
                LODWORD(v296[0]) = 1;
                v296[1] = 0;
                *(void *)&long long v297 = 0;
              }
              llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
              if (v269 != -1) {
                llvm::MachineInstr::addOperand(MachineInstr, v188, v258);
              }
              LODWORD(v296[0]) = 1;
              v296[1] = 0;
              *(void *)&long long v297 = 0;
              llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
              LODWORD(v296[0]) = 1;
              v296[1] = 0;
              *(void *)&long long v297 = v271;
              llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
              LODWORD(v296[0]) = 1;
              v296[1] = 0;
              *(void *)&long long v297 = v259;
              llvm::MachineInstr::addOperand(MachineInstr, v188, (const llvm::MachineOperand *)v296);
              if (a2) {
                uint64_t v245 = 2;
              }
              else {
                uint64_t v245 = 1;
              }
              sub_1CBC2D9C8(v241 | v240, v238, v276, v245, (uint64_t)v200);
            }
            int v249 = *(unsigned __int8 *)__s1;
            if ((v249 - 4) > 0x1E)
            {
              if ((v249 - 3) >= 0xFFFFFFFE) {
                v252 = __s1;
              }
              else {
                v252 = 0;
              }
              if ((v249 - 3) < 0xFFFFFFFE)
              {
                if (v249 == 3) {
                  *((void *)__s1 + 1) = 0;
                }
                goto LABEL_284;
              }
              unint64_t v251 = (unint64_t)v252 + 8;
            }
            else
            {
              if ((*((unsigned char *)__s1 + 1) & 0x7F) != 2 && !*((_DWORD *)__s1 + 3)) {
                goto LABEL_284;
              }
              uint64_t v250 = *((void *)__s1 + 2);
              if ((v250 & 4) == 0) {
                goto LABEL_284;
              }
              unint64_t v251 = v250 & 0xFFFFFFFFFFFFFFF8;
              if (!v251) {
                goto LABEL_284;
              }
            }
            v296[0] = &__s1;
            sub_1CC5FA668(v251 + 16, v296);
            goto LABEL_284;
          }
          uint64_t v139 = *v264;
          sub_1CD112980(*(llvm::Module **)(*v264 + 40), (uint64_t)&__s1);
          if (v295)
          {
            unint64_t v140 = v294;
            uint64_t v141 = (v294 & 0x80u) == 0 ? v294 & 0x7F : v292;
            if (v141 == 15)
            {
              if ((v294 & 0x80) != 0)
              {
                p_s1 = __s1;
                unint64_t v140 = v292;
              }
              else
              {
                p_s1 = &__s1;
              }
              size_t v143 = v140 >= 0xF ? 15 : v140;
              if (!memcmp(p_s1, "dynamic-library", v143) && v140 == 15)
              {
                BOOL v144 = 1;
                goto LABEL_233;
              }
            }
          }
          v145 = *(llvm::Module **)(v139 + 40);
          v296[0] = &v297;
          v296[1] = (void *)0x800000000;
          llvm::Module::getModuleFlagsMetadata(v145, (uint64_t)v296);
          if (LODWORD(v296[1]))
          {
            uint64_t v146 = (uint64_t *)((char *)v296[0] + 16);
            uint64_t v147 = 24 * LODWORD(v296[1]);
            while (1)
            {
              uint64_t v148 = *(void *)(*(v146 - 1) + 8);
              if (*(void *)v148 == 9)
              {
                uint64_t v149 = *(void *)(v148 + 24);
                uint64_t v150 = *(unsigned __int8 *)(v148 + 32);
                if (*(void *)"PIC Level" == v149 && aPicLevel[8] == v150) {
                  break;
                }
              }
              v146 += 3;
              v147 -= 24;
              if (!v147) {
                goto LABEL_228;
              }
            }
            uint64_t v152 = *v146;
          }
          else
          {
LABEL_228:
            uint64_t v152 = 0;
          }
          if (v296[0] == &v297)
          {
            if (!v152)
            {
LABEL_231:
              int v153 = 0;
              uint64_t v7 = (unsigned __int8 **)a1;
LABEL_232:
              BOOL v144 = v153 != 0;
LABEL_233:
              char v154 = *(llvm::Module **)(v139 + 40);
              v296[0] = "agx.sample_rate";
              LOWORD(v298) = 259;
              uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v154, (const char **)v296);
              if (v295 && (char)v294 < 0) {
                operator delete(__s1);
              }
              if (NamedMetadata) {
                char v156 = 1;
              }
              else {
                char v156 = v144;
              }
              if (v156)
              {
                uint64_t __s1 = (void *)129;
                LODWORD(v292) = 0;
                v296[0] = (void *)7;
                LODWORD(v297) = 3;
                uint64_t v157 = a5;
                uint64_t v158 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a5 + 32))(a5, 315, &__s1, 1, v296, 1, 0);
                uint64_t v160 = v159;
                int v161 = sub_1CBC2FC68((void *)a5);
                uint64_t __s1 = (void *)129;
                LODWORD(v292) = 0;
                v296[0] = v158;
                v296[1] = v160;
                LODWORD(v297) = 1;
                DWORD2(v297) = v161;
                int v299 = 0;
                int v162 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v157 + 32))(v157, 65, &__s1, 1, v296, 2, 0);
              }
              else
              {
                uint64_t __s1 = (void *)129;
                LODWORD(v292) = 0;
                uint64_t v164 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a5 + 8), (llvm::LLVMContext *)0x10);
                v166 = *(llvm::ConstantInt **)v164;
                unsigned int v167 = *(_DWORD *)(v164 + 8);
                LODWORD(v296[1]) = v167 >> 8;
                if (v167 >> 8 > 0x40) {
                  operator new[]();
                }
                if (v167 <= 0xFF) {
                  LOBYTE(v168) = 0;
                }
                else {
                  unint64_t v168 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v167) + 63);
                }
                v296[0] = (void *)(v168 & 1);
                v169 = llvm::ConstantInt::get(v166, (llvm::LLVMContext *)v296, v165);
                if (LODWORD(v296[1]) >= 0x41 && v296[0]) {
                  MEMORY[0x1D25D9CB0](v296[0], 0x1000C8000313F17);
                }
                uint64_t v157 = a5;
                int v162 = (void *)(*(uint64_t (**)(uint64_t, void **, void *))(*(void *)a5 + 16))(a5, &__s1, v169);
              }
              uint64_t __s1 = (void *)129;
              LODWORD(v292) = 0;
              v296[0] = v162;
              v296[1] = v163;
              LODWORD(v297) = 1;
              DWORD2(v297) = v138;
              int v299 = 0;
              (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)v157 + 32))(v157, 65, &__s1, 1, v296, 2, 0);
              unsigned int v138 = *(_DWORD *)(*(void *)(v170 + 32) + 4);
              goto LABEL_248;
            }
          }
          else
          {
            free(v296[0]);
            if (!v152) {
              goto LABEL_231;
            }
          }
          uint64_t v236 = *(void *)(v152 + 128);
          v237 = (void *)(v236 + 24);
          if (*(_DWORD *)(v236 + 32) >= 0x41u) {
            v237 = (void *)*v237;
          }
          uint64_t v7 = (unsigned __int8 **)a1;
          int v153 = *(_DWORD *)v237;
          goto LABEL_232;
        }
        v296[0] = (void *)(a5 + 32);
        sub_1CC5FA668(v103 + 16, v296);
        unsigned int v28 = v265;
        goto LABEL_44;
      default:
        return v246;
    }
  }
  if ((a2 & 1) == 0)
  {
    LODWORD(v296[0]) = *((_DWORD *)v7[4] + 1);
    LODWORD(v296[1]) = 1;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a5 + 32))(a5, 68, v296, 1, 0, 0, 0);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v7);
  return 1;
}

void sub_1CBBB1038(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432))
  {
    unint64_t v8 = *(void *)(*(void *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
    if ((v8 & 2) != 0)
    {
      char v9 = 35;
      char v10 = 19;
      if ((v8 & 4) == 0) {
        char v9 = 19;
      }
      unint64_t v11 = v8 >> v9;
      if ((v8 & 4) == 0) {
        char v10 = 3;
      }
      if (v8) {
        char v10 = 3;
      }
      int v12 = (void *)((8 * (unsigned __int16)(v8 >> v10)) & 0xFFFFF8000007FFFFLL | ((v11 & 0xFFFFFF) << 19) | 2);
      uint64_t v13 = 0x800000000000000;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  char v14 = 3;
  if ((v8 & 1) == 0) {
    char v14 = 19;
  }
  int v12 = (void *)(v8 & 0x8000000000000000 | (8 * (v8 >> v14)) | 1);
  if ((a1 & 0x80000000) == 0)
  {
    int v15 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
    uint64_t v13 = 0x8000000000000;
    goto LABEL_17;
  }
  uint64_t v13 = 0x8000000000000;
LABEL_16:
  int v15 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
LABEL_17:
  uint64_t v16 = *v15;
  if (v16 && ((*(unsigned char *)(v16 + 3) & 1) != 0 || (uint64_t v16 = *(void *)(v16 + 24)) != 0 && (*(unsigned char *)(v16 + 3) & 1) != 0)) {
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else {
    uint64_t v17 = 0;
  }
  if ((v8 & v13) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  int v18 = (unsigned __int16)(v8 >> 3);
  unsigned int v19 = **(unsigned __int16 **)(v17 + 16);
  if (v19 > 0x4D)
  {
    if (v19 == 78)
    {
      if (*(_DWORD *)(v17 + 40) != v18 + 1) {
        goto LABEL_55;
      }
      if ((unsigned __int16)(v8 >> 3))
      {
        uint64_t v29 = 0;
        do
        {
          uint64_t v49 = v12;
          int v50 = 0;
          LODWORD(v53) = *(_DWORD *)(*(void *)(v17 + 32) + v29 + 36);
          v55[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v49, 1, &v53, 1, 0);
          unint64_t v31 = *(unsigned int *)(a4 + 8);
          if (v31 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v31) = *(_DWORD *)(*(void *)(v30 + 32) + 4);
          ++*(_DWORD *)(a4 + 8);
          v29 += 32;
        }
        while (32 * (unsigned __int16)(v8 >> 3) != v29);
      }
    }
    else
    {
      if (v19 != 119) {
        goto LABEL_55;
      }
      int v53 = v55;
      uint64_t v54 = 0x400000000;
      sub_1CBBB1038(*(unsigned int *)(*(void *)(v17 + 32) + 36), a2, a3, &v53);
      if (v54)
      {
        unint64_t v22 = 0;
        do
        {
          uint64_t v46 = v12;
          int v47 = 0;
          LODWORD(v49) = *((_DWORD *)v53 + v22);
          v52[0] = 0;
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, &v46, 1, &v49, 1, 0);
          unint64_t v24 = *(unsigned int *)(a4 + 8);
          if (v24 >= *(unsigned int *)(a4 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)a4 + 4 * v24) = *(_DWORD *)(*(void *)(v23 + 32) + 4);
          ++*(_DWORD *)(a4 + 8);
          ++v22;
        }
        while (v22 < v54);
      }
      signed int v25 = v53;
      if (v53 != v55) {
LABEL_74:
      }
        free(v25);
    }
  }
  else
  {
    if (v19 != 68)
    {
      if (v19 == 77 && *(_DWORD *)(v17 + 40) == v18 + 1)
      {
        if ((unsigned __int16)(v8 >> 3))
        {
          uint64_t v20 = 0;
          unsigned int v21 = *(_DWORD *)(a4 + 8);
          do
          {
            if (v21 >= *(_DWORD *)(a4 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)a4 + 4 * v21) = *(_DWORD *)(*(void *)(v17 + 32) + v20 + 36);
            unsigned int v21 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v21;
            v20 += 32;
          }
          while (32 * (unsigned __int16)(v8 >> 3) != v20);
        }
        return;
      }
LABEL_55:
      unint64_t v32 = (unsigned __int16)(v8 >> 3);
      uint64_t v49 = v52;
      int v51 = 4;
      if (v32 >= 5)
      {
        int v50 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((unsigned __int16)(v8 >> 3))
      {
        uint64_t v33 = v52;
        uint64_t v34 = (unsigned __int16)(v8 >> 3);
        do
        {
          *v33++ = v12;
          --v34;
        }
        while (v34);
      }
      int v50 = (unsigned __int16)(v8 >> 3);
      unsigned int v35 = (uint64_t *)v49;
      LODWORD(v46) = a1;
      int v48 = 0;
      int v53 = v55;
      uint64_t v54 = 0x800000000;
      if ((unsigned __int16)(v8 >> 3))
      {
        uint64_t v36 = 8 * v32;
        uint64_t v37 = v55;
        do
        {
          uint64_t v38 = *v35++;
          *(void *)uint64_t v37 = v38;
          v37[2] = 0;
          v37 += 4;
          v36 -= 8;
        }
        while (v36);
        int v39 = v54;
        unint64_t v40 = v53;
      }
      else
      {
        int v39 = 0;
        unint64_t v40 = v55;
      }
      LODWORD(v54) = v39 + v32;
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)a3 + 32))(a3, 74, v40);
      uint64_t v42 = v41;
      if (v53 == v55)
      {
        if (!(unsigned __int16)(v8 >> 3)) {
          goto LABEL_73;
        }
      }
      else
      {
        free(v53);
        if (!(unsigned __int16)(v8 >> 3)) {
          goto LABEL_73;
        }
      }
      uint64_t v43 = 0;
      unsigned int v44 = *(_DWORD *)(a4 + 8);
      uint64_t v45 = 32 * v32;
      do
      {
        if (v44 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v44) = *(_DWORD *)(*(void *)(v42 + 32) + v43 + 4);
        unsigned int v44 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v44;
        v43 += 32;
      }
      while (v45 != v43);
LABEL_73:
      signed int v25 = v49;
      if (v49 == v52) {
        return;
      }
      goto LABEL_74;
    }
    int v53 = v12;
    LODWORD(v54) = 0;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 68, &v53, 1, 0, 0, 0);
    if ((unsigned __int16)(v8 >> 3))
    {
      int v27 = *(_DWORD *)(*(void *)(v26 + 32) + 4);
      unsigned int v28 = *(_DWORD *)(a4 + 8);
      do
      {
        if (v28 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(*(void *)a4 + 4 * v28) = v27;
        unsigned int v28 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v28;
        --v18;
      }
      while (v18);
    }
  }
}

uint64_t sub_1CBBB16A8(unsigned int a1, uint64_t a2, llvm::IntegerType *****a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if ((a1 & 0x80000000) != 0 && (a1 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432)) {
    unint64_t v5 = *(void *)(*(void *)(a2 + 424) + 8 * (a1 & 0x7FFFFFFF));
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v26 = v5;
  unint64_t v6 = sub_1CBBAAB48(a1, a2, 0x100u);
  if (HIDWORD(v6))
  {
    uint64_t v27 = 129;
    LODWORD(v28) = 0;
    unint64_t v22 = v6;
    uint64_t v23 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)0x10);
    unint64_t v24 = llvm::ConstantInt::get(v23, v22, (const llvm::APInt *)1);
    ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a3)[2])(a3, &v27, v24);
  }
  else
  {
    unsigned int v8 = sub_1CB8F1DC4(&v26);
    if (v7 == 1) {
    uint64_t v33 = (8 * v8) | 1;
    }
    int v34 = 0;
    LODWORD(v27) = a1;
    int v29 = 0;
    uint64_t v9 = sub_1CC7382B0((uint64_t)a3);
    uint64_t v33 = 129;
    int v34 = 0;
    uint64_t v27 = v9;
    uint64_t v28 = v10;
    int v29 = 1;
    uint64_t v11 = sub_1CC738034(a3, 118, (unint64_t *)&v33, (int *)&v27);
    uint64_t v13 = v12;
    uint64_t v14 = ((uint64_t (*)(llvm::IntegerType ***))(*a3[1][43])[42])(a3[1][43]);
    unsigned int v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 24))(v14, 16);
    uint64_t v27 = 129;
    LODWORD(v28) = 0;
    unint64_t v16 = 31 - __clz(v15);
    uint64_t v17 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)0x10);
    int v18 = llvm::ConstantInt::get(v17, v16, (const llvm::APInt *)1);
    uint64_t v19 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a3)[2])(a3, &v27, v18);
    uint64_t v33 = 129;
    int v34 = 0;
    uint64_t v27 = v11;
    uint64_t v28 = v13;
    int v29 = 1;
    uint64_t v30 = v19;
    uint64_t v31 = v20;
    int v32 = 1;
    ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, void))(*a3)[4])(a3, 128, &v33, 1, &v27, 2, 0);
  }
  return *(unsigned int *)(*(void *)(v21 + 32) + 4);
}

uint64_t sub_1CBBB1968(uint64_t a1, uint64_t a2, unint64_t *a3, char a4)
{
  uint64_t v7 = a2;
  uint64_t v474 = *MEMORY[0x1E4F143B8];
  a3[5] = *(void *)(a1 + 24);
  a3[6] = a1;
  uint64_t v9 = (unsigned __int8 **)(a1 + 56);
  uint64_t v10 = (unsigned __int8 **)(a3 + 4);
  if ((unint64_t *)(a1 + 56) != a3 + 4)
  {
    uint64_t v11 = *v10;
    if (!*v10) {
      goto LABEL_3;
    }
    int v134 = *v11;
    if ((v134 - 4) > 0x1E)
    {
      if ((v134 - 3) >= 0xFFFFFFFE) {
        uint64_t v284 = *v10;
      }
      else {
        uint64_t v284 = 0;
      }
      if ((v134 - 3) < 0xFFFFFFFE)
      {
        if (v134 == 3) {
          *((void *)v11 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v136 = (unint64_t)(v284 + 8);
    }
    else if ((v11[1] & 0x7F) != 2 && !*((_DWORD *)v11 + 3) {
           || (uint64_t v135 = *((void *)v11 + 2), (v135 & 4) == 0)
    }
           || (unint64_t v136 = v135 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_3:
      uint64_t v12 = *v9;
      *uint64_t v10 = *v9;
      if (v12)
      {
        llvm::MetadataTracking::track((uint64_t)(a3 + 4), v12, 2);
        uint64_t v7 = a2;
      }
      goto LABEL_5;
    }
    v470[0] = a3 + 4;
    sub_1CC5FA668(v136 + 16, v470);
    uint64_t v7 = a2;
    goto LABEL_3;
  }
LABEL_5:
  if (**(_WORD **)(a1 + 16) == 90)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(unsigned int *)(v13 + 36);
    if ((v14 & 0x80000000) != 0) {
      unsigned int v15 = (uint64_t *)(*(void *)(v7 + 24) + 16 * (v14 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v15 = (uint64_t *)(*(void *)(v7 + 272) + 8 * v14);
    }
    uint64_t v16 = *v15;
    if ((*(unsigned char *)(v16 + 3) & 1) == 0) {
      uint64_t v16 = *(void *)(v16 + 24);
    }
    uint64_t v17 = *(void *)(v16 + 8);
    if ((**(_WORD **)(v17 + 16) & 0xFFFE) == 0x74)
    {
      uint64_t v18 = *(unsigned int *)(v17 + 40);
      if (v18)
      {
        uint64_t v19 = (_DWORD *)(*(void *)(v17 + 32) + 16);
        while (*((unsigned char *)v19 - 16) != 17)
        {
          v19 += 8;
          if (!--v18) {
            goto LABEL_20;
          }
        }
        if (*v19 == 2754)
        {
          int v20 = *(_DWORD *)(v13 + 4);
          int v431 = v20;
          if (v20 < 0 && (uint64_t v21 = v20 & 0x7FFFFFFF, v21 < *(_DWORD *)(v7 + 432))) {
            unint64_t v22 = *(void *)(*(void *)(v7 + 424) + 8 * v21);
          }
          else {
            unint64_t v22 = 0;
          }
          unint64_t v463 = v22;
          unint64_t v229 = sub_1CB8F1DC4(&v463);
          if (v228 == 1) {
          uint64_t v187 = sub_1CC73C44C(*(_DWORD *)(*(void *)(v17 + 32) + 68), a2, 1, (uint64_t)&v445);
          }
          if (v446 >= 0x41) {
            uint64_t v230 = v445;
          }
          else {
            uint64_t v230 = (uint64_t *)&v445;
          }
          uint64_t v231 = *v230;
          unint64_t v232 = (unint64_t)*v230 >> 2;
          uint64_t v233 = 134;
          switch((v229 >> 4))
          {
            case 2u:
              break;
            case 3u:
            case 5u:
            case 7u:
              __break(1u);
              goto LABEL_571;
            case 4u:
              uint64_t v233 = 1991;
              break;
            case 6u:
              uint64_t v233 = 2118;
              break;
            case 8u:
              uint64_t v233 = 2244;
              break;
            default:
              uint64_t v233 = 294;
              if ((v231 & 3) == 0) {
                uint64_t v233 = 422;
              }
              break;
          }
          unint64_t v289 = v233 + v232;
          uint64_t v290 = *(void *)(*(void *)(a1 + 24) + 32);
          uint64_t v291 = (*(uint64_t (**)(void))(**(void **)(v290 + 16) + 176))(*(void *)(v290 + 16));
          uint64_t v292 = *(uint64_t ***)(v291 + 240);
          v293 = *(uint64_t ***)(v291 + 248);
          if (v292 == v293)
          {
            unsigned __int8 v294 = 0;
          }
          else
          {
            unsigned __int8 v294 = 0;
            do
            {
              if ((v289 - 0x40000000) >= 0xC0000001)
              {
                uint64_t v295 = **v292;
                if (v289 >> 3 < *(unsigned __int16 *)(v295 + 22)
                  && ((1 << (v289 & 7)) & *(unsigned __int8 *)(*(void *)(v295 + 8) + (v289 >> 3))) != 0
                  && (!v294
                   || *v292 != v294
                   && ((*(_DWORD *)(v294[1] + ((*(unsigned __int16 *)(v295 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v295 + 24)) & 1) != 0))
                {
                  unsigned __int8 v294 = *v292;
                }
              }
              ++v292;
            }
            while (v292 != v293);
          }
          v439 = (char *)v17;
          llvm::MachineFunction::addLiveIn(v290, v289, (uint64_t)v294);
          v368 = (void *)(v290 + 320);
          v369 = *(void **)(v290 + 328);
          if (v369 != (void *)(v290 + 320))
          {
            do
            {
              v371 = (char *)v369[20];
              unint64_t v370 = v369[21];
              if ((unint64_t)v371 >= v370)
              {
                unint64_t v373 = v289;
                v374 = (char *)v369[19];
                uint64_t v375 = (v371 - v374) >> 4;
                unint64_t v376 = v375 + 1;
                if ((unint64_t)(v375 + 1) >> 60) {
                  abort();
                }
                uint64_t v377 = v370 - (void)v374;
                if (v377 >> 3 > v376) {
                  unint64_t v376 = v377 >> 3;
                }
                if ((unint64_t)v377 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v378 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v378 = v376;
                }
                if (v378)
                {
                  if (v378 >> 60) {
                    sub_1CB833614();
                  }
                  v379 = (char *)operator new(16 * v378);
                }
                else
                {
                  v379 = 0;
                }
                v380 = &v379[16 * v375];
                unint64_t v289 = v373;
                *(_WORD *)v380 = v373;
                *((void *)v380 + 1) = -1;
                v381 = v380;
                if (v371 != v374)
                {
                  do
                  {
                    *((_OWORD *)v381 - 1) = *((_OWORD *)v371 - 1);
                    v381 -= 16;
                    v371 -= 16;
                  }
                  while (v371 != v374);
                  v371 = (char *)v369[19];
                }
                v382 = &v379[16 * v378];
                v372 = v380 + 16;
                v369[19] = v381;
                v369[20] = v380 + 16;
                v369[21] = v382;
                if (v371) {
                  operator delete(v371);
                }
              }
              else
              {
                *(_WORD *)v371 = v289;
                *((void *)v371 + 1) = -1;
                v372 = v371 + 16;
              }
              v369[20] = v372;
              v369 = (void *)v369[1];
            }
            while (v369 != v368);
          }
          v383 = (llvm::MachineFunction *)a3[1];
          uint64_t v384 = *(void *)(a3[2] + 8) + 912;
          v385 = (unsigned __int8 *)a3[4];
          *(void *)&long long v468 = v385;
          if (v385) {
            llvm::MetadataTracking::track((uint64_t)&v468, v385, 2);
          }
          MachineInstr = llvm::MachineFunction::CreateMachineInstr(v383, v384, (unsigned __int8 **)&v468, 0);
          v387 = (llvm::MachineInstr *)v439;
          if (!(void)v468) {
            goto LABEL_510;
          }
          int v406 = *(unsigned __int8 *)v468;
          if ((v406 - 4) > 0x1E)
          {
            if ((v406 - 3) >= 0xFFFFFFFE) {
              uint64_t v409 = v468;
            }
            else {
              uint64_t v409 = 0;
            }
            if ((v406 - 3) < 0xFFFFFFFE)
            {
              v387 = (llvm::MachineInstr *)v439;
              if (v406 == 3) {
                *(void *)(v468 + 8) = 0;
              }
              goto LABEL_510;
            }
            unint64_t v408 = v409 + 8;
          }
          else
          {
            v387 = (llvm::MachineInstr *)v439;
            if ((*(unsigned char *)(v468 + 1) & 0x7F) != 2 && !*(_DWORD *)(v468 + 12)) {
              goto LABEL_510;
            }
            uint64_t v407 = *(void *)(v468 + 16);
            if ((v407 & 4) == 0) {
              goto LABEL_510;
            }
            unint64_t v408 = v407 & 0xFFFFFFFFFFFFFFF8;
            if (!v408) {
              goto LABEL_510;
            }
          }
          v470[0] = &v468;
          sub_1CC5FA668(v408 + 16, v470);
          v387 = (llvm::MachineInstr *)v439;
LABEL_510:
          v388 = (unint64_t *)a3[6];
          uint64_t v389 = *(void *)(a3[5] + 40);
          *((void *)MachineInstr + 3) = v389;
          uint64_t v390 = *(void *)(v389 + 32);
          uint64_t v391 = *((unsigned int *)MachineInstr + 10);
          if (v391)
          {
            uint64_t v396 = *((void *)MachineInstr + 4);
            uint64_t v397 = *(void *)(v390 + 40);
            uint64_t v398 = 32 * v391;
            do
            {
              if (!*(unsigned char *)v396)
              {
                uint64_t v399 = *(unsigned int *)(v396 + 4);
                if ((int)v399 >= 0) {
                  v400 = (uint64_t *)(*(void *)(v397 + 272) + 8 * v399);
                }
                else {
                  v400 = (uint64_t *)(*(void *)(v397 + 24) + 16 * (v399 & 0x7FFFFFFF) + 8);
                }
                uint64_t v401 = *v400;
                if (*v400)
                {
                  uint64_t v402 = *(void *)(v401 + 16);
                  *(void *)(v401 + 16) = v396;
                  *(void *)(v396 + 16) = v402;
                  if (*(unsigned char *)(v396 + 3))
                  {
                    *(void *)(v396 + 24) = v401;
                  }
                  else
                  {
                    *(void *)(v396 + 24) = 0;
                    v400 = (uint64_t *)(v402 + 24);
                  }
                }
                else
                {
                  *(void *)(v396 + 16) = v396;
                  *(void *)(v396 + 24) = 0;
                }
                uint64_t *v400 = v396;
              }
              v396 += 32;
              v398 -= 32;
            }
            while (v398);
          }
          uint64_t v392 = *(void *)(v390 + 728);
          if (v392) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v392 + 24))(v392, MachineInstr);
          }
          unint64_t v393 = *v388 & 0xFFFFFFFFFFFFFFF8;
          *(void *)MachineInstr = v393 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v388;
          *(void *)(v393 + 8) = MachineInstr;
          unint64_t *v388 = *v388 & 7 | (unint64_t)MachineInstr;
          unint64_t v394 = a3[7];
          if (v394) {
            (*(void (**)(unint64_t, llvm::MachineInstr *))(*(void *)v394 + 24))(v394, MachineInstr);
          }
          v470[1] = 0;
          long long v471 = 0uLL;
          HIDWORD(v470[0]) = v431;
          LODWORD(v470[0]) = 0x1000000;
          llvm::MachineInstr::addOperand(MachineInstr, v383, (const llvm::MachineOperand *)v470);
          v470[1] = 0;
          long long v471 = 0uLL;
          HIDWORD(v470[0]) = v289;
          LODWORD(v470[0]) = 0;
          llvm::MachineInstr::addOperand(MachineInstr, v383, (const llvm::MachineOperand *)v470);
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
          llvm::MachineInstr::eraseFromParent(v387);
          if ((_BYTE)v450 && v446 >= 0x41 && v445) {
            MEMORY[0x1D25D9CB0](v445, 0x1000C8000313F17);
          }
          return 1;
        }
      }
    }
  }
LABEL_20:
  sub_1CBB910AC((uint64_t)&v445, a1, v7);
  unint64_t v24 = (llvm::MachineInstr *)v445;
  uint64_t v25 = *(void *)(v445[3] + 32);
  if (*(unsigned char *)(*(void *)(v25 + 16) + 375))
  {
    uint64_t v26 = *(void *)(v25 + 40);
    int v27 = v447;
    if (v447 < 0 && (v447 & 0x7FFFFFFFu) < *(_DWORD *)(v26 + 432)) {
      unint64_t v28 = *(void *)(*(void *)(v26 + 424) + 8 * (v447 & 0x7FFFFFFF));
    }
    else {
      unint64_t v28 = 0;
    }
    unint64_t v457 = v28;
    unint64_t v29 = sub_1CB8F1DC4(&v457);
    if (v23 == 1) {
    if (v29 >= 0x41)
    }
    {
      int v42 = v449;
      if (v449 < 0 && (v449 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v26 + 432)) {
        unint64_t v43 = *(void *)(*(void *)(v26 + 424) + 8 * (v449 & 0x7FFFFFFF));
      }
      else {
        unint64_t v43 = 0;
      }
      unint64_t v462 = v43;
      char v44 = 35;
      if ((v43 & 4) == 0) {
        char v44 = 19;
      }
      uint64_t v45 = (v43 >> v44) & 0xFFFFFF;
      if (v45 > 0xA) {
        goto LABEL_118;
      }
      if (((1 << v45) & 0x446) != 0) {
        goto LABEL_43;
      }
      if (v45 == 3)
      {
        if (sub_1CBBDA488(v449, v26, v25)) {
          goto LABEL_28;
        }
      }
      else
      {
LABEL_118:
        if (v45 != 65 && v45 != 71) {
          goto LABEL_28;
        }
      }
LABEL_43:
      int v428 = v27;
      if ((v457 & 2) != 0)
      {
        char v403 = 35;
        char v404 = 19;
        if ((v457 & 4) == 0) {
          char v403 = 19;
        }
        unint64_t v405 = v457 >> v403;
        if ((v457 & 4) == 0) {
          char v404 = 3;
        }
        if (v457) {
          char v404 = 3;
        }
        unint64_t v47 = (8 * (unsigned __int16)(v457 >> v404)) & 0xFFFFF8000007FFFFLL | ((v405 & 0xFFFFFF) << 19) | 2;
      }
      else
      {
        char v46 = 3;
        if ((v457 & 1) == 0) {
          char v46 = 19;
        }
        unint64_t v47 = v457 & 0x8000000000000000 | (8 * (v457 >> v46)) | 1;
      }
      unint64_t v461 = v47;
      unint64_t v49 = sub_1CB8F1DC4(&v461);
      if (v48 == 1) {
      unsigned int v50 = v457;
      }
      uint64_t v51 = 0x800000000000000;
      if ((v457 & 2) == 0) {
        uint64_t v51 = 0x8000000000000;
      }
      if ((v51 & v457) != 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v48);
        unsigned int v50 = v457;
      }
      if (v456)
      {
        int v413 = v42;
        unsigned int v52 = v455;
        v470[0] = (void *)129;
        LODWORD(v470[1]) = 0;
        unint64_t v53 = v455 & 3;
        uint64_t v54 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x10);
        v55 = llvm::ConstantInt::get(v54, v53, (const llvm::APInt *)1);
        (*(void (**)(unint64_t *, void **, void *))(*a3 + 16))(a3, v470, v55);
        v437 = (char *)*(unsigned int *)(*(void *)(v56 + 32) + 4);
        int v57 = v454;
        unint64_t v463 = 129;
        LODWORD(v464) = 0;
        uint64_t v58 = llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x10);
        int v60 = *(llvm::ConstantInt **)v58;
        unsigned int v61 = *(_DWORD *)(v58 + 8);
        LODWORD(v470[1]) = v61 >> 8;
        if (v61 >> 8 > 0x40) {
          operator new[]();
        }
        if (v61 <= 0xFF) {
          LOBYTE(v62) = 0;
        }
        else {
          unint64_t v62 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v61) + 63);
        }
        v470[0] = (void *)(v62 & 3);
        uint64_t v63 = llvm::ConstantInt::get(v60, (llvm::LLVMContext *)v470, v59);
        if (LODWORD(v470[1]) >= 0x41 && v470[0]) {
          MEMORY[0x1D25D9CB0](v470[0], 0x1000C8000313F17);
        }
        int v64 = v52 & 1;
        int v432 = (v52 >> 1) & 1;
        int v423 = (v52 >> 2) & 1;
        int v65 = (v52 >> 3) & 1;
        uint64_t v66 = (*(uint64_t (**)(unint64_t *, unint64_t *, void *))(*a3 + 16))(a3, &v463, v63);
        *(void *)&long long v468 = 129;
        DWORD2(v468) = 0;
        LODWORD(v470[0]) = v57;
        LODWORD(v471) = 0;
        *((void *)&v471 + 1) = v66;
        uint64_t v472 = v67;
        int v473 = 1;
        (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 65, &v468, 1, v470, 2, 0);
        uint64_t v69 = *(unsigned int *)(*(void *)(v68 + 32) + 4);
        v470[0] = (void *)129;
        LODWORD(v470[1]) = 0;
        unint64_t v70 = v455 >> 2;
        uint64_t v71 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x10);
        unint64_t v72 = llvm::ConstantInt::get(v71, v70, (const llvm::APInt *)1);
        (*(void (**)(unint64_t *, void **, void *))(*a3 + 16))(a3, v470, v72);
        uint64_t v74 = *(unsigned int *)(*(void *)(v73 + 32) + 4);
        int v75 = v454;
        unint64_t v463 = 129;
        LODWORD(v464) = 0;
        uint64_t v76 = llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x10);
        uint64_t v78 = *(llvm::ConstantInt **)v76;
        unsigned int v79 = *(_DWORD *)(v76 + 8);
        LODWORD(v470[1]) = v79 >> 8;
        if (v79 >> 8 > 0x40) {
          operator new[]();
        }
        if (v79 <= 0xFF) {
          LOBYTE(v80) = 0;
        }
        else {
          unint64_t v80 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v79) + 63);
        }
        unint64_t v81 = (unint64_t)v437;
        v470[0] = (void *)(v80 & 2);
        LODWORD(v433) = v432 + v64;
        unsigned int v438 = v423 + v65;
        uint64_t v424 = v81 | (v69 << 32);
        int v82 = llvm::ConstantInt::get(v78, (llvm::LLVMContext *)v470, v77);
        if (LODWORD(v470[1]) >= 0x41 && v470[0]) {
          MEMORY[0x1D25D9CB0](v470[0], 0x1000C8000313F17);
        }
        uint64_t v83 = (*(uint64_t (**)(unint64_t *, unint64_t *, void *))(*a3 + 16))(a3, &v463, v82);
        *(void *)&long long v468 = 129;
        DWORD2(v468) = 0;
        LODWORD(v470[0]) = v75;
        LODWORD(v471) = 0;
        *((void *)&v471 + 1) = v83;
        uint64_t v472 = v84;
        int v473 = 1;
        (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 128, &v468, 1, v470, 2, 0);
        size_t v415 = v74 | ((unint64_t)*(unsigned int *)(*(void *)(v85 + 32) + 4) << 32);
        int v42 = v413;
      }
      else
      {
        size_t v415 = 0;
        uint64_t v424 = 0;
        unint64_t v433 = 0x40 / v49;
        unsigned int v438 = (unsigned __int16)(v50 >> 3) - 0x40 / v49;
      }
      uint64_t v87 = (llvm::LLVMContext *)sub_1CB8F1DC4(&v462);
      if (v86 == 1) {
      uint64_t v88 = (8 * v87) | 1;
      }
      *(void *)&long long v468 = v88;
      DWORD2(v468) = 0;
      LODWORD(v470[0]) = v42;
      LODWORD(v471) = 0;
      uint64_t v89 = (void *)(*(uint64_t (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 80, &v468, 1, v470, 1, 0);
      unint64_t v91 = v90;
      unint64_t v463 = v88;
      LODWORD(v464) = 0;
      uint64_t v92 = llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], v87);
      unint64_t v94 = *(llvm::ConstantInt **)v92;
      unsigned int v95 = *(_DWORD *)(v92 + 8);
      LODWORD(v470[1]) = v95 >> 8;
      if (v95 >> 8 > 0x40) {
        operator new[]();
      }
      if (v95 <= 0xFF) {
        LOBYTE(v96) = 0;
      }
      else {
        unint64_t v96 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v95) + 63);
      }
      v470[0] = (void *)(v96 & 8);
      uint64_t v97 = llvm::ConstantInt::get(v94, (llvm::LLVMContext *)v470, v93);
      if (LODWORD(v470[1]) >= 0x41 && v470[0]) {
        MEMORY[0x1D25D9CB0](v470[0], 0x1000C8000313F17);
      }
      uint64_t v98 = (*(uint64_t (**)(unint64_t *, unint64_t *, void *))(*a3 + 16))(a3, &v463, v97);
      *(void *)&long long v468 = v88;
      DWORD2(v468) = 0;
      v470[0] = v89;
      v470[1] = v91;
      LODWORD(v471) = 1;
      *((void *)&v471 + 1) = v98;
      uint64_t v472 = v99;
      int v473 = 1;
      (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 45, &v468, 1, v470, 2, 0);
      *(void *)&long long v468 = v462;
      DWORD2(v468) = 0;
      LODWORD(v470[0]) = *(_DWORD *)(*(void *)(v100 + 32) + 4);
      LODWORD(v471) = 0;
      (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 81, &v468, 1, v470, 1, 0);
      int v102 = *(_DWORD *)(*(void *)(v101 + 32) + 4);
      uint64_t v104 = sub_1CB8F1DC4(&v461);
      if (v103 == 1) {
      uint64_t v106 = sub_1CB8F1DC4(&v461);
      }
      if (v105 == 1) {
      uint64_t v107 = *((void *)v24 + 6);
      }
      if ((v107 & 7) != 0)
      {
        unint64_t v108 = *(void *)((v107 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
        *((void *)v24 + 6) = v107 & 0xFFFFFFFFFFFFFFF8;
      }
      long long v468 = *(_OWORD *)v108;
      *(void *)&v469[0] = *(void *)(v108 + 16);
      __int16 v109 = *(_WORD *)(v108 + 32);
      uint64_t v110 = (1 << *(unsigned char *)(v108 + 34)) | *(void *)(v108 + 8);
      unint64_t v111 = 63 - __clz(v110 & -v110);
      long long v112 = *(_OWORD *)(v108 + 56);
      *(_OWORD *)v470 = *(_OWORD *)(v108 + 40);
      long long v471 = v112;
      unint64_t v113 = *(unsigned __int16 *)(v108 + 36);
      uint64_t v114 = (v113 >> 8) & 0xF;
      unint64_t v115 = v113 >> 12;
      if ((v113 >> 12) == 5 && v114 == 4)
      {
        LODWORD(v114) = 6;
      }
      else if (v115 == 4 && v114 == 5)
      {
        LODWORD(v114) = 6;
      }
      else if (!byte_1CDAF3AB8[8 * v114 + v115])
      {
        LODWORD(v114) = v113 >> 12;
      }
      unint64_t MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v25, (uint64_t)&v468, v109, ((v104 * (unint64_t)v433) >> 3), v111, (long long *)v470, *(void *)(v108 + 72), *(_WORD *)(v108 + 36), v114, SWORD1(v114), v115);
      *((void *)MachineMemOperand + 1) = *(void *)(v108 + 8);
      uint64_t v117 = *((void *)v24 + 6);
      if ((v117 & 7) != 0)
      {
        unint64_t v118 = *(void *)((v117 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        unint64_t v118 = v117 & 0xFFFFFFFFFFFFFFF8;
        *((void *)v24 + 6) = v117 & 0xFFFFFFFFFFFFFFF8;
      }
      long long v468 = *(_OWORD *)v118;
      *(void *)&v469[0] = *(void *)(v118 + 16);
      __int16 v119 = *(_WORD *)(v118 + 32);
      uint64_t v120 = (1 << *(unsigned char *)(v118 + 34)) | *(void *)(v118 + 8);
      unint64_t v121 = 63 - __clz(v120 & -v120);
      long long v122 = *(_OWORD *)(v118 + 56);
      *(_OWORD *)v470 = *(_OWORD *)(v118 + 40);
      long long v471 = v122;
      unint64_t v123 = *(unsigned __int16 *)(v118 + 36);
      uint64_t v124 = (v123 >> 8) & 0xF;
      unint64_t v125 = v123 >> 12;
      if ((v123 >> 12) == 5 && v124 == 4 || v125 == 4 && v124 == 5)
      {
        LODWORD(v124) = 6;
      }
      else if (!byte_1CDAF3AB8[8 * v124 + v125])
      {
        LODWORD(v124) = v123 >> 12;
      }
      uint64_t v126 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v25, (uint64_t)&v468, v119, ((v106 * (unint64_t)v438) >> 3), v121, (long long *)v470, *(void *)(v118 + 72), *(_WORD *)(v118 + 36), v124, SWORD1(v124), v125);
      *((void *)v126 + 1) = *(void *)(v118 + 8) + 8;
      v467 = &v468;
      *(void *)&long long v468 = v469;
      *((void *)&v468 + 1) = 0x800000000;
      unint64_t v463 = (unint64_t)&v461;
      v464 = &v445;
      v465 = a3;
      v466 = v24;
      sub_1CBBDC490((uint64_t)&v463, v433, v42, MachineMemOperand, v424);
      sub_1CBBDC490((uint64_t)&v463, v438, v102, v126, v415);
      LODWORD(v440) = v428;
      LODWORD(v441) = 1;
      uint64_t v127 = (int *)v468;
      int v128 = DWORD2(v468);
      v470[0] = &v471;
      v470[1] = (void *)0x800000000;
      if (DWORD2(v468) >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (DWORD2(v468))
      {
        uint64_t v129 = 0;
        uint64_t v130 = 4 * DWORD2(v468);
        do
        {
          int v131 = *v127++;
          unsigned int v132 = (_DWORD *)((char *)&v471 + v129);
          *unsigned int v132 = v131;
          v132[4] = 0;
          v129 += 24;
          v130 -= 4;
        }
        while (v130);
        int v133 = (int)v470[1];
      }
      else
      {
        int v133 = 0;
      }
      LODWORD(v470[1]) = v133 + v128;
      (*(void (**)(unint64_t *, uint64_t, llvm::GlobalValue **, uint64_t, long long *))(*a3 + 32))(a3, 77, &v440, 1, &v471);
      if (v470[0] != &v471) {
        free(v470[0]);
      }
      llvm::MachineInstr::eraseFromParent(v24);
      if ((_OWORD *)v468 != v469) {
        free((void *)v468);
      }
      return 1;
    }
  }
LABEL_28:
  uint64_t v30 = (unint64_t *)(a1 + 48);
  unint64_t v31 = *(void *)(a1 + 48);
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v33 = *(unsigned char **)(*(void *)(v32 + 32) + 16);
  if (v31 < 8)
  {
    uint64_t v35 = 0;
    uint64_t v30 = 0;
    uint64_t v41 = 0;
    uint64_t v34 = a2;
    goto LABEL_133;
  }
  uint64_t v34 = a2;
  if ((v31 & 7) == 0)
  {
    v31 &= 0xFFFFFFFFFFFFFFF8;
    *uint64_t v30 = v31;
    unint64_t v40 = v9;
    uint64_t v38 = (int *)(a1 + 48);
    goto LABEL_65;
  }
  uint64_t v35 = 0;
  if ((*(void *)(a1 + 48) & 7) == 3)
  {
    uint64_t v36 = (int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    if ((v31 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v39 = *v36;
      uint64_t v38 = v36 + 2;
      uint64_t v37 = v39;
      if (v39)
      {
        unint64_t v40 = (unsigned __int8 **)&v38[2 * v37];
LABEL_65:
        uint64_t v35 = (unint64_t *)v38;
        while ((*(_WORD *)(*v35 + 36) & 0xF00) == 0)
        {
          if (++v35 == (unint64_t *)v40)
          {
            uint64_t v35 = (unint64_t *)v40;
            break;
          }
        }
        if (v31 < 8)
        {
          uint64_t v30 = 0;
          uint64_t v41 = 0;
          goto LABEL_133;
        }
        goto LABEL_127;
      }
      uint64_t v35 = (unint64_t *)v38;
    }
  }
LABEL_127:
  if ((v31 & 7) != 0)
  {
    uint64_t v30 = 0;
    if ((v31 & 7) == 3 && (uint64_t v137 = (int *)(v31 & 0xFFFFFFFFFFFFFFF8), (v31 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      uint64_t v41 = *v137;
      uint64_t v30 = (unint64_t *)(v137 + 2);
    }
    else
    {
      uint64_t v41 = 0;
    }
  }
  else
  {
    *uint64_t v30 = v31 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v41 = 1;
  }
LABEL_133:
  if (v35 != &v30[v41])
  {
    unsigned int v138 = (long long *)*v35;
    if (*v35)
    {
      uint64_t v139 = *(void *)(a1 + 32);
      int v140 = *(_DWORD *)(v139 + 4);
      int v141 = *(_DWORD *)(v139 + 36);
      if (v141 < 0 && (v141 & 0x7FFFFFFFu) < *(_DWORD *)(v34 + 432)) {
        unint64_t v142 = *(void *)(*(void *)(v34 + 424) + 8 * (v141 & 0x7FFFFFFF));
      }
      else {
        unint64_t v142 = 0;
      }
      char v150 = 35;
      if ((v142 & 4) == 0) {
        char v150 = 19;
      }
      uint64_t v151 = (v142 >> v150) & 0xFFFFFF;
      unint64_t v152 = *((unsigned __int16 *)v138 + 18);
      uint64_t v153 = (v152 >> 8) & 0xF;
      unint64_t v154 = v152 >> 12;
      BOOL v155 = v154 == 5 && v153 == 4;
      if (v155 || (v154 == 4 ? (BOOL v156 = v153 == 5) : (BOOL v156 = 0), v156))
      {
        int v157 = 6;
      }
      else if (byte_1CDAF3AB8[8 * v153 + v154])
      {
        int v157 = v153;
      }
      else
      {
        int v157 = v154;
      }
      v470[1] = (void *)0x2FFFFFFFFLL;
      *(void *)((char *)&v471 + 4) = 0;
      HIDWORD(v471) = 0;
      v470[0] = &unk_1F25F7768;
      sub_1CBB31168((uint64_t)v470, **(unsigned __int16 **)(a1 + 16), v151, v157, (uint64_t)v33);
      int v158 = v471;
      sub_1CBBD99D4(a1, v471, v33);
      unint64_t v159 = 0;
      uint64_t v160 = a3[1];
      long long v443 = *v138;
      uint64_t v444 = *((void *)v138 + 2);
      __int16 v161 = *((_WORD *)v138 + 16);
      if (v140 < 0)
      {
        if ((v140 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432)) {
          unint64_t v159 = 0;
        }
        else {
          unint64_t v159 = *(void *)(*(void *)(a2 + 424) + 8 * (v140 & 0x7FFFFFFF));
        }
      }
      unint64_t v463 = v159;
      unint64_t v203 = sub_1CB8F1DC4(&v463);
      if (v202 == 1) {
      uint64_t v204 = v203 >> 3;
      }
      uint64_t v199 = 1;
      uint64_t v205 = (1 << *((unsigned char *)v138 + 34)) | *((void *)v138 + 1);
      long long v468 = 0u;
      v469[0] = 0u;
      char v206 = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand(v160, (uint64_t)&v443, v161, v204, 63 - __clz(v205 & -v205), &v468, 0, 1, 0, 0, 0);
      LODWORD(v463) = v140;
      LODWORD(v464) = 1;
      LODWORD(v468) = v141;
      LODWORD(v469[0]) = 0;
      sub_1CC737934(a3, 0x5Au, (int *)&v463, (int *)&v468, v206);
      sub_1CBBB1968(v207, a2, a3, 1);
      sub_1CBBD9E7C(a1, v158, (uint64_t)v33);
LABEL_220:
      llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
      return v199;
    }
  }
  char v453 = a4;
  int v143 = v449;
  if (v449 < 0 && (v449 & 0x7FFFFFFFu) < (unint64_t)*(unsigned int *)(v34 + 432)) {
    unint64_t v144 = *(void *)(*(void *)(v34 + 424) + 8 * (v449 & 0x7FFFFFFF));
  }
  else {
    unint64_t v144 = 0;
  }
  uint64_t v145 = *(void *)(v32 + 32);
  unint64_t v146 = v450;
  if ((v450 & 0xFFFFFFFFFFFFFFF9) != 0 && (v450 & 4) != 0)
  {
    uint64_t v147 = 0x800000000000000;
    if ((v450 & 2) == 0) {
      uint64_t v147 = 0x8000000000000;
    }
    unint64_t v148 = v450 >> 3;
    unsigned int v149 = (unsigned __int16)(v450 >> 3);
    if ((v147 & v450) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
      uint64_t v34 = a2;
      if ((v148 & 1) == 0)
      {
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
        uint64_t v34 = a2;
        if (v149 >= 5)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v23);
          uint64_t v34 = a2;
LABEL_170:
          if (v146)
          {
            int v162 = v148;
          }
          else if ((v146 & 2) != 0)
          {
            int v162 = (unsigned __int16)(v146 >> 19);
          }
          else
          {
            int v162 = v146 >> 19;
          }
          v274 = (llvm::MachineMemOperand *)v452;
          if (v452)
          {
            unint64_t v435 = (v146 >> 1) & 0x3FFF8 | ((unint64_t)(v162 & 0x7FFFFFFF) << 20) | 4;
            unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v34, "", 0);
            unint64_t v276 = IncompleteVirtualRegister & 0x7FFFFFFF;
            *(void *)(*(void *)(a2 + 24) + 16 * v276) = 4;
            unint64_t v277 = *(unsigned int *)(a2 + 432);
            if (v276 >= v277)
            {
              uint64_t v278 = *(void *)(a2 + 440);
              uint64_t v279 = v276 + 1 - v277;
              if (v276 >= *(unsigned int *)(a2 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v280 = *(_DWORD *)(a2 + 432);
              if (v279)
              {
                v281 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                uint64_t v282 = ~v276 + v277;
                do
                {
                  *v281++ = v278;
                  BOOL v186 = __CFADD__(v282++, 1);
                }
                while (!v186);
                int v280 = *(_DWORD *)(a2 + 432);
              }
              *(_DWORD *)(a2 + 432) = v280 + v279;
            }
            *(void *)(*(void *)(a2 + 424) + 8 * v276) = v435;
            uint64_t v283 = *(void *)(a2 + 8);
            if (v283) {
              (*(void (**)(uint64_t, void))(*(void *)v283 + 24))(v283, IncompleteVirtualRegister);
            }
            uint64_t v199 = 1;
            LODWORD(v468) = IncompleteVirtualRegister;
            DWORD2(v468) = 1;
            LODWORD(v470[0]) = v449;
            LODWORD(v471) = 0;
            sub_1CC737934(a3, 0x5Au, (int *)&v468, (int *)v470, v274);
            LODWORD(v468) = v447;
            DWORD2(v468) = 1;
            LODWORD(v470[0]) = IncompleteVirtualRegister;
            LODWORD(v471) = 0;
            sub_1CC7382B0((uint64_t)a3);
            goto LABEL_220;
          }
          return 0;
        }
      }
    }
    else if (v149 >= 5 && ((v450 >> 3) & 1) == 0)
    {
      goto LABEL_170;
    }
  }
  char v163 = 35;
  if ((v144 & 4) == 0) {
    char v163 = 19;
  }
  unint64_t v164 = v144 >> v163;
  uint64_t v165 = (v144 >> v163) & 0xFFFFFF;
  if (v165 != 3)
  {
    if (v165 == 64)
    {
      unsigned int v166 = 1;
      sub_1CBA315DC((uint64_t)&v440, v143, v34, 1);
      int v167 = v442;
      if (!v442) {
        goto LABEL_339;
      }
      if (v9 == v10)
      {
LABEL_182:
        LODWORD(v9) = v447;
        unint64_t v170 = v450;
        unint64_t v461 = v450;
        unint64_t v462 = 129;
        int v431 = v167;
        if ((v452[3] & 0xFFFFFFFFFFFFFFF9) != 0)
        {
          unint64_t v172 = (unint64_t)(sub_1CB8F1DC4(v452 + 3) + 7) >> 3;
          if (v171 == 1) {
        }
          }
        else
        {
          unint64_t v172 = -1;
        }
        v427 = (llvm::MachineInstr *)v445;
        uint64_t v173 = *(void *)(v445[3] + 32);
        uint64_t v174 = sub_1CBB35BE4(*(void *)(v173 + 16));
        uint64_t v175 = v441;
        unsigned int v176 = sub_1CD1117B0(v440, v441, *(void *)(v173 + 344), v174 << 32);
        unint64_t v463 = (unint64_t)a3;
        v464 = (void *)a2;
        v465 = &v462;
        if ((v170 & 0xFFFFFFFFFFFFFFF9) != 0 && (v170 & 6) == 2)
        {
          char v177 = 35;
          if ((v170 & 4) == 0) {
            char v177 = 19;
          }
          unint64_t v419 = v176;
          if (((v170 >> v177) & 0xFFFFFF) == 3)
          {
            unint64_t v178 = v462;
            LODWORD(v17) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
            uint64_t v4 = v17;
            unint64_t v179 = v17 & 0x7FFFFFFF;
            *(void *)(*(void *)(a2 + 24) + 16 * v179) = 4;
            unint64_t v180 = *(unsigned int *)(a2 + 432);
            if (v179 >= v180)
            {
              uint64_t v181 = *(void *)(a2 + 440);
              uint64_t v182 = v179 + 1 - v180;
              if (v179 >= *(unsigned int *)(a2 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v183 = *(_DWORD *)(a2 + 432);
              if (v182)
              {
                v184 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                uint64_t v185 = ~v179 + v180;
                do
                {
                  *v184++ = v181;
                  BOOL v186 = __CFADD__(v185++, 1);
                }
                while (!v186);
                int v183 = *(_DWORD *)(a2 + 432);
              }
              *(_DWORD *)(a2 + 432) = v183 + v182;
            }
            *(void *)(*(void *)(a2 + 424) + 8 * v179) = v178;
            uint64_t v187 = *(void *)(a2 + 8);
            if (v187) {
LABEL_571:
            }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v187 + 24))(v187, v4);
            sub_1CBBDC8D0(&v463, v4, v419, v462);
            unsigned int v189 = sub_1CB8F1DC4(&v461);
            if (v188 == 1) {
            *(void *)&long long v468 = (8 * v189) | 1;
            }
            DWORD2(v468) = 0;
            LODWORD(v470[0]) = v17;
            LODWORD(v471) = 0;
            v190 = (void *)(*(uint64_t (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 126, &v468, 1, v470, 1, 0);
            LODWORD(v468) = v9;
            DWORD2(v468) = 1;
            v470[0] = v190;
            v470[1] = v191;
            LODWORD(v471) = 1;
            (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 81, &v468, 1, v470, 1, 0);
          }
          else
          {
            unsigned int v251 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
            uint64_t v252 = a2;
            unsigned int v417 = v251;
            uint64_t v253 = v251;
            unint64_t v254 = v251 & 0x7FFFFFFF;
            *(void *)(*(void *)(a2 + 24) + 16 * v254) = 4;
            v255 = (void *)(a2 + 424);
            unint64_t v256 = *(unsigned int *)(a2 + 432);
            if (v254 >= v256)
            {
              uint64_t v257 = *(void *)(a2 + 440);
              uint64_t v258 = v254 + 1 - v256;
              if (v254 >= *(unsigned int *)(a2 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v259 = *(_DWORD *)(a2 + 432);
              if (v258)
              {
                int v260 = (void *)(*v255 + 8 * *(unsigned int *)(a2 + 432));
                uint64_t v261 = ~v254 + v256;
                do
                {
                  *v260++ = v257;
                  BOOL v186 = __CFADD__(v261++, 1);
                }
                while (!v186);
                int v259 = *(_DWORD *)(a2 + 432);
              }
              *(_DWORD *)(a2 + 432) = v259 + v258;
            }
            *(void *)(*(void *)(a2 + 424) + 8 * v254) = 257;
            uint64_t v262 = *(void *)(a2 + 8);
            if (v262)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v262 + 24))(v262, v253);
              uint64_t v252 = a2;
            }
            unsigned int v263 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v252, "", 0);
            unint64_t v264 = v263 & 0x7FFFFFFF;
            *(void *)(*(void *)(a2 + 24) + 16 * v264) = 4;
            unint64_t v265 = *(unsigned int *)(a2 + 432);
            if (v264 >= v265)
            {
              uint64_t v266 = *(void *)(a2 + 440);
              uint64_t v267 = v264 + 1 - v265;
              if (v264 >= *(unsigned int *)(a2 + 436)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              int v268 = *(_DWORD *)(a2 + 432);
              if (v267)
              {
                unsigned int v269 = (void *)(*v255 + 8 * *(unsigned int *)(a2 + 432));
                uint64_t v270 = ~v264 + v265;
                do
                {
                  *v269++ = v266;
                  BOOL v186 = __CFADD__(v270++, 1);
                }
                while (!v186);
                int v268 = *(_DWORD *)(a2 + 432);
              }
              *(_DWORD *)(a2 + 432) = v268 + v267;
            }
            *(void *)(*(void *)(a2 + 424) + 8 * v264) = 257;
            uint64_t v271 = *(void *)(a2 + 8);
            if (v271) {
              (*(void (**)(uint64_t, void))(*(void *)v271 + 24))(v271, v263);
            }
            sub_1CBBDC8D0(&v463, v253, v176, 0x101uLL);
            sub_1CBBDC8D0(&v463, v263, v176 + 4, 0x101uLL);
            *(void *)&long long v468 = 513;
            DWORD2(v468) = 0;
            LODWORD(v470[0]) = v417;
            LODWORD(v471) = 0;
            DWORD2(v471) = v263;
            int v473 = 0;
            unsigned int v272 = (void *)(*(uint64_t (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 76, &v468, 1, v470, 2, 0);
            LODWORD(v468) = v9;
            DWORD2(v468) = 1;
            v470[0] = v272;
            v470[1] = v273;
            LODWORD(v471) = 1;
            sub_1CC7382B0((uint64_t)a3);
          }
        }
        else
        {
          if (v170 != 65 && v172 != 1)
          {
            unint64_t v460 = v451;
            if (sub_1CBBDD35C(&v460)) {
              goto LABEL_228;
            }
            if ((v460 & 0xFFFFFFFFFFFFFFF9) != 0 && (v460 & 4) != 0)
            {
              char v286 = 3;
              if ((v460 & 1) == 0) {
                char v286 = 19;
              }
              unint64_t v287 = v460 >> v286;
              v288 = (void *)((v460 & 2) != 0
                            ? (v460 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v287) | 2
                            : v460 & 0x8000000000000000 | (8 * v287) | 1);
              v470[0] = v288;
              if (sub_1CBBDD35C((unint64_t *)v470))
              {
LABEL_228:
                unint64_t v209 = v460;
                if (v460)
                {
                  sub_1CBBDC8D0(&v463, v448, v176, v451);
                  int v167 = v431;
                }
                else
                {
                  if ((v460 & 2) != 0)
                  {
                    char v410 = 35;
                    char v411 = 19;
                    if ((v460 & 4) == 0) {
                      char v410 = 19;
                    }
                    unint64_t v412 = v460 >> v410;
                    if ((v460 & 4) == 0) {
                      char v411 = 3;
                    }
                    unint64_t v210 = (8 * (unsigned __int16)(v460 >> v411)) & 0xFFFFF8000007FFFFLL | ((v412 & 0xFFFFFF) << 19) | 2;
                  }
                  else
                  {
                    unint64_t v210 = v460 & 0x8000000000000000 | (v460 >> 16) & 0x7FFFFFFF8 | 1;
                  }
                  unsigned int v211 = 0;
                  unint64_t v459 = v210;
                  *(void *)&long long v468 = v469;
                  *((void *)&v468 + 1) = 0x400000000;
                  while (1)
                  {
                    uint64_t v212 = 0x800000000000000;
                    if ((v209 & 2) == 0) {
                      uint64_t v212 = 0x8000000000000;
                    }
                    if ((v212 & v209) != 0)
                    {
                      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v208);
                      unint64_t v209 = v460;
                    }
                    if (v211 >= (unsigned __int16)(v209 >> 3)) {
                      break;
                    }
                    if ((v209 & 2) != 0)
                    {
                      char v225 = 19;
                      char v226 = 35;
                      if ((v209 & 4) == 0) {
                        char v226 = 19;
                      }
                      unint64_t v227 = v209 >> v226;
                      if ((v209 & 4) == 0) {
                        char v225 = 3;
                      }
                      if (v209) {
                        char v225 = 3;
                      }
                      unint64_t v214 = (8 * (unsigned __int16)(v209 >> v225)) & 0xFFFFF8000007FFFFLL | ((v227 & 0xFFFFFF) << 19) | 2;
                    }
                    else
                    {
                      char v213 = 3;
                      if ((v209 & 1) == 0) {
                        char v213 = 19;
                      }
                      unint64_t v214 = v209 & 0x8000000000000000 | (8 * (v209 >> v213)) | 1;
                    }
                    unsigned int v215 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
                    unint64_t v216 = v215 & 0x7FFFFFFF;
                    *(void *)(*(void *)(a2 + 24) + 16 * v216) = 4;
                    unint64_t v217 = *(unsigned int *)(a2 + 432);
                    if (v216 >= v217)
                    {
                      unint64_t v218 = v216 + 1;
                      uint64_t v219 = *(void *)(a2 + 440);
                      if (v216 >= *(unsigned int *)(a2 + 436)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      int v220 = *(_DWORD *)(a2 + 432);
                      if (v218 != v217)
                      {
                        uint64_t v221 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                        uint64_t v222 = ~v216 + v217;
                        do
                        {
                          *v221++ = v219;
                          BOOL v186 = __CFADD__(v222++, 1);
                        }
                        while (!v186);
                        int v220 = *(_DWORD *)(a2 + 432);
                      }
                      *(_DWORD *)(a2 + 432) = v220 + v218 - v217;
                    }
                    *(void *)(*(void *)(a2 + 424) + 8 * v216) = v214;
                    uint64_t v223 = *(void *)(a2 + 8);
                    if (v223) {
                      (*(void (**)(uint64_t, void))(*(void *)v223 + 24))(v223, v215);
                    }
                    sub_1CBBDC8D0(&v463, v215, v176, v459);
                    if (DWORD2(v468) >= (unint64_t)HIDWORD(v468)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(_DWORD *)(v468 + 4 * DWORD2(v468)) = v215;
                    ++DWORD2(v468);
                    unint64_t v224 = sub_1CB8F1DC4(&v459);
                    if (v208 == 1) {
                    v176 += v224 >> 3;
                    }
                    ++v211;
                    unint64_t v209 = v460;
                  }
                  LODWORD(v457) = v448;
                  int v458 = 1;
                  v296 = (int *)v468;
                  int v297 = DWORD2(v468);
                  v470[0] = &v471;
                  v470[1] = (void *)0x800000000;
                  if (DWORD2(v468) >= 9) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (DWORD2(v468))
                  {
                    uint64_t v298 = 0;
                    uint64_t v299 = 4 * DWORD2(v468);
                    do
                    {
                      int v300 = *v296++;
                      int v301 = (_DWORD *)((char *)&v471 + v298);
                      *int v301 = v300;
                      v301[4] = 0;
                      v298 += 24;
                      v299 -= 4;
                    }
                    while (v299);
                    int v302 = (int)v470[1];
                  }
                  else
                  {
                    int v302 = 0;
                  }
                  LODWORD(v470[1]) = v302 + v297;
                  (*(void (**)(unint64_t *, uint64_t, unint64_t *, uint64_t, long long *))(*a3 + 32))(a3, 77, &v457, 1, &v471);
                  if (v470[0] != &v471) {
                    free(v470[0]);
                  }
                  int v167 = v431;
                  if ((_OWORD *)v468 != v469) {
                    free((void *)v468);
                  }
                }
                if (v450 == v451 || sub_1CBBDD3E0((uint64_t)&v445, a2, (uint64_t)a3))
                {
                  llvm::MachineInstr::eraseFromParent(v427);
                  unsigned int v166 = 1;
                }
                else
                {
                  unsigned int v166 = 0;
                }
                goto LABEL_339;
              }
            }
            unsigned int v166 = 0;
            goto LABEL_338;
          }
          int v425 = (int)v9;
          size_t v416 = v462;
          unsigned int v420 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
          unint64_t v234 = v420 & 0x7FFFFFFF;
          *(void *)(*(void *)(a2 + 24) + 16 * v234) = 4;
          unint64_t v235 = *(unsigned int *)(a2 + 432);
          if (v234 >= v235)
          {
            uint64_t v236 = *(void *)(a2 + 440);
            uint64_t v237 = v234 + 1 - v235;
            if (v234 >= *(unsigned int *)(a2 + 436)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v238 = *(_DWORD *)(a2 + 432);
            if (v237)
            {
              unsigned int v239 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
              uint64_t v240 = ~v234 + v235;
              do
              {
                *v239++ = v236;
                BOOL v186 = __CFADD__(v240++, 1);
              }
              while (!v186);
              int v238 = *(_DWORD *)(a2 + 432);
            }
            *(_DWORD *)(a2 + 432) = v238 + v237;
          }
          *(void *)(*(void *)(a2 + 424) + 8 * v234) = v416;
          uint64_t v241 = *(void *)(a2 + 8);
          if (v241) {
            (*(void (**)(uint64_t, void))(*(void *)v241 + 24))(v241, v420);
          }
          sub_1CBBDC8D0(&v463, v420, v176 & 0xFFFFFFFE, v462);
          *(void *)&long long v468 = 4194324;
          DWORD2(v468) = 0;
          LODWORD(v470[0]) = v420;
          LODWORD(v471) = 0;
          v242 = (void *)sub_1CC7382B0((uint64_t)a3);
          uint64_t v244 = v243;
          uint64_t v245 = v175 & 1;
          if (v175 < 0) {
            uint64_t v245 = -v245;
          }
          v470[0] = (void *)257;
          LODWORD(v470[1]) = 0;
          unint64_t v246 = v245;
          v247 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x20);
          v248 = llvm::ConstantInt::get(v247, v246, (const llvm::APInt *)1);
          uint64_t v249 = (*(uint64_t (**)(unint64_t *, void **, void *))(*a3 + 16))(a3, v470, v248);
          if (v170 == 65)
          {
            LODWORD(v468) = v425;
            DWORD2(v468) = 1;
            v470[0] = v242;
            v470[1] = v244;
            LODWORD(v471) = 1;
            *((void *)&v471 + 1) = v249;
            uint64_t v472 = v250;
            int v473 = 1;
            (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 205, &v468, 1, v470, 2, 0);
          }
          else
          {
            *(void *)&long long v468 = 65;
            DWORD2(v468) = 0;
            v470[0] = v242;
            v470[1] = v244;
            LODWORD(v471) = 1;
            *((void *)&v471 + 1) = v249;
            uint64_t v472 = v250;
            int v473 = 1;
            (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 205, &v468, 1, v470, 2, 0);
            LODWORD(v468) = v425;
            DWORD2(v468) = 1;
            LODWORD(v470[0]) = *(_DWORD *)(*(void *)(v285 + 32) + 4);
            LODWORD(v471) = 0;
            (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 118, &v468, 1, v470, 1, 0);
          }
        }
        llvm::MachineInstr::eraseFromParent(v427);
        unsigned int v166 = 1;
LABEL_338:
        int v167 = v431;
LABEL_339:
        if (v167) {
          return v166;
        }
        else {
          return 0;
        }
      }
      unint64_t v168 = *v10;
      if (!*v10)
      {
LABEL_180:
        v169 = *v9;
        *uint64_t v10 = *v9;
        if (v169) {
          llvm::MetadataTracking::track((uint64_t)(a3 + 4), v169, 2);
        }
        goto LABEL_182;
      }
      int v303 = *v168;
      if ((v303 - 4) > 0x1E)
      {
        if ((v303 - 3) >= 0xFFFFFFFE) {
          v360 = *v10;
        }
        else {
          v360 = 0;
        }
        if ((v303 - 3) < 0xFFFFFFFE)
        {
          if (v303 == 3) {
            *((void *)v168 + 1) = 0;
          }
          goto LABEL_180;
        }
        unint64_t v305 = (unint64_t)(v360 + 8);
      }
      else
      {
        if ((v168[1] & 0x7F) != 2 && !*((_DWORD *)v168 + 3)) {
          goto LABEL_180;
        }
        uint64_t v304 = *((void *)v168 + 2);
        if ((v304 & 4) == 0) {
          goto LABEL_180;
        }
        unint64_t v305 = v304 & 0xFFFFFFFFFFFFFFF8;
        if (!v305) {
          goto LABEL_180;
        }
      }
      v470[0] = a3 + 4;
      sub_1CC5FA668(v305 + 16, v470);
      goto LABEL_180;
    }
LABEL_210:
    uint64_t v198 = (*(uint64_t (**)(void, const char *))(**(void **)(v145 + 16) + 168))(*(void *)(v145 + 16), v23);
    if ((v446 & 0xFFFFFFFB) == 2
      || v456
      || (sub_1CBB97188(v198, (unint64_t *)a1, a2, (llvm::IntegerType *****)a3) & 1) == 0)
    {
      uint64_t v199 = 0;
      int v200 = v164 & 0xFFFFFF;
      if ((v164 & 0xFFFFFF) <= 0x40)
      {
        switch(v200)
        {
          case 0:
            return sub_1CBBDAAB4((uint64_t)&v445, a2, (llvm::IntegerType *****)a3);
          case 1:
          case 2:
          case 6:
          case 10:
            return sub_1CBBDA510((uint64_t)&v445, a2, (llvm::IntegerType *****)a3);
          case 3:
            return sub_1CBBDA808((uint64_t)&v445, a2, (llvm::IntegerType *****)a3);
          case 5:
            return sub_1CBBDC1A4((uint64_t)&v445, a2, (llvm::IntegerType *****)a3);
          default:
            return v199;
        }
        return v199;
      }
      if ((v164 & 0xFFFFFF) > 0x4A)
      {
        if (v200 == 75) {
          return sub_1CBBDC1A4((uint64_t)&v445, a2, (llvm::IntegerType *****)a3);
        }
        if (v200 != 80) {
          return v199;
        }
      }
      else if (v200 != 65 && v200 != 71)
      {
        return v199;
      }
      return sub_1CBBDA510((uint64_t)&v445, a2, (llvm::IntegerType *****)a3);
    }
    return 1;
  }
  BOOL v192 = sub_1CBBDA488(v143, v34, v145);
  uint64_t v23 = (const char *)a2;
  if (!v192) {
    goto LABEL_210;
  }
  int v193 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  if ((v193 & 0x80000000) == 0 || (v193 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432)) {
    return 0;
  }
  unint64_t v194 = *(void *)(*(void *)(a2 + 424) + 8 * (v193 & 0x7FFFFFFF));
  if (v194 == 129 || v194 == 257) {
    goto LABEL_207;
  }
  if ((v194 & 0xFFFFFFFFFFFFFFF9) == 0 || (*(void *)(*(void *)(a2 + 424) + 8 * (v193 & 0x7FFFFFFF)) & 4) == 0) {
    return 0;
  }
  uint64_t v357 = 0x8000000000000;
  if ((v194 & 2) != 0) {
    uint64_t v357 = 0x800000000000000;
  }
  if ((v357 & v194) != 0) {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
  }
  uint64_t v199 = 0;
  if ((v194 & 2) == 0 && (unsigned __int16)(v194 >> 3) <= 4u)
  {
    char v358 = 3;
    if ((v194 & 1) == 0) {
      char v358 = 19;
    }
    unint64_t v359 = v194 & 0x8000000000000000 | (8 * (v194 >> v358));
    uint64_t v23 = (const char *)a2;
    if (v359 != 256 && v359 != 128) {
      return 0;
    }
LABEL_207:
    v434 = v23 + 424;
    int v195 = sub_1CBBB16A8(v143, (uint64_t)v23, (llvm::IntegerType *****)a3);
    *(void *)&long long v468 = 16777244;
    DWORD2(v468) = 0;
    LODWORD(v470[0]) = v195;
    LODWORD(v471) = 0;
    uint64_t v196 = (void *)(*(uint64_t (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 312, &v468, 1, v470, 1, 0);
    if (v194 == 257) {
      goto LABEL_392;
    }
    if (v194 == 16777244)
    {
      LODWORD(v468) = v193;
      DWORD2(v468) = 1;
      v470[0] = v196;
      v470[1] = v197;
      LODWORD(v471) = 1;
      goto LABEL_426;
    }
    if ((v194 & 0xFFFFFFFFFFFFFFF9) == 0 || (v194 & 6) != 4) {
      goto LABEL_427;
    }
    char v308 = 3;
    if ((v194 & 1) == 0) {
      char v308 = 19;
    }
    if ((v194 & 0x8000000000000000 | (8 * (v194 >> v308))) == 0x100)
    {
LABEL_392:
      v421 = v196;
      v426 = v197;
      int v429 = v193;
      unsigned int v309 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      uint64_t v310 = a2;
      unsigned int v418 = v309;
      uint64_t v311 = v309;
      unint64_t v312 = v309 & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v312) = 4;
      unint64_t v313 = *(unsigned int *)(a2 + 432);
      if (v312 >= v313)
      {
        uint64_t v314 = *(void *)(a2 + 440);
        uint64_t v315 = v312 + 1 - v313;
        if (v312 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v316 = *(_DWORD *)(a2 + 432);
        if (v315)
        {
          v317 = (void *)(*v434 + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v318 = ~v312 + v313;
          do
          {
            *v317++ = v314;
            BOOL v186 = __CFADD__(v318++, 1);
          }
          while (!v186);
          int v316 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v316 + v315;
      }
      unint64_t v319 = v194;
      *(void *)(*(void *)(a2 + 424) + 8 * v312) = 257;
      uint64_t v320 = *(void *)(a2 + 8);
      if (v320)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v320 + 24))(v320, v311);
        uint64_t v310 = a2;
      }
      unsigned int v321 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v310, "", 0);
      uint64_t v322 = a2;
      unsigned int v323 = v321;
      uint64_t v324 = v321;
      unint64_t v325 = v321 & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v325) = 4;
      unint64_t v326 = *(unsigned int *)(a2 + 432);
      if (v325 >= v326)
      {
        uint64_t v327 = *(void *)(a2 + 440);
        uint64_t v328 = v325 + 1 - v326;
        if (v325 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v329 = *(_DWORD *)(a2 + 432);
        if (v328)
        {
          v330 = (void *)(*v434 + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v331 = ~v325 + v326;
          do
          {
            *v330++ = v327;
            BOOL v186 = __CFADD__(v331++, 1);
          }
          while (!v186);
          int v329 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v329 + v328;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v325) = 257;
      uint64_t v332 = *(void *)(a2 + 8);
      if (v332)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v332 + 24))(v332, v324);
        uint64_t v322 = a2;
      }
      unsigned int v333 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v322, "", 0);
      unint64_t v334 = v333 & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v334) = 4;
      unint64_t v335 = *(unsigned int *)(a2 + 432);
      if (v334 >= v335)
      {
        uint64_t v336 = *(void *)(a2 + 440);
        uint64_t v337 = v334 + 1 - v335;
        if (v334 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v338 = *(_DWORD *)(a2 + 432);
        if (v337)
        {
          v339 = (void *)(*v434 + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v340 = ~v334 + v335;
          do
          {
            *v339++ = v336;
            BOOL v186 = __CFADD__(v340++, 1);
          }
          while (!v186);
          int v338 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v338 + v337;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v334) = 257;
      uint64_t v341 = *(void *)(a2 + 8);
      if (v341) {
        (*(void (**)(uint64_t, void))(*(void *)v341 + 24))(v341, v333);
      }
      *(void *)&long long v468 = __PAIR64__(v323, v418);
      DWORD2(v468) = v333;
      v470[0] = v421;
      v470[1] = v426;
      LODWORD(v471) = 1;
      sub_1CC738BB8((uint64_t)a3, (char *)&v468, 3, (uint64_t)v470);
      if (v319 != 16777252)
      {
        if (v319 == 16777236)
        {
          LODWORD(v468) = v429;
          DWORD2(v468) = 1;
          LODWORD(v470[0]) = v418;
          LODWORD(v471) = 0;
          DWORD2(v471) = v323;
          int v473 = 0;
          (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 76, &v468, 1, v470, 2, 0);
          goto LABEL_478;
        }
        if (v319 != 257)
        {
LABEL_478:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
          return 1;
        }
        LODWORD(v468) = v429;
        DWORD2(v468) = 1;
        LODWORD(v470[0]) = v418;
        LODWORD(v471) = 0;
LABEL_426:
        (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, void **, uint64_t, void))(*a3 + 32))(a3, 19, &v468, 1, v470, 1, 0);
        goto LABEL_478;
      }
      v470[0] = (void *)257;
      LODWORD(v470[1]) = 0;
      (*(void (**)(unint64_t *, uint64_t, void **, uint64_t, void, void, void))(*a3 + 32))(a3, 68, v470, 1, 0, 0, 0);
      uint64_t v364 = 0;
      LODWORD(v468) = v429;
      DWORD2(v468) = 1;
      unint64_t v463 = __PAIR64__(v323, v418);
      LODWORD(v464) = v333;
      HIDWORD(v464) = *(_DWORD *)(*(void *)(v365 + 32) + 4);
      v470[0] = &v471;
      v470[1] = (void *)0x800000000;
      uint64_t v366 = 2;
      do
      {
        v367 = &v470[v366];
        *(_DWORD *)v367 = *(_DWORD *)((char *)&v463 + v364);
        *((_DWORD *)v367 + 4) = 0;
        v366 += 3;
        v364 += 4;
      }
      while (v364 != 16);
      LODWORD(v470[1]) += 4;
      (*(void (**)(unint64_t *, uint64_t, long long *, uint64_t, long long *))(*a3 + 32))(a3, 77, &v468, 1, &v471);
      v363 = v470[0];
      if (v470[0] == &v471) {
        goto LABEL_478;
      }
    }
    else
    {
LABEL_427:
      *(void *)&long long v422 = v196;
      *((void *)&v422 + 1) = v197;
      int v430 = v193;
      int v342 = 0;
      unint64_t v414 = v194;
      v470[0] = &v471;
      v470[1] = (void *)0x600000000;
      uint64_t v343 = a2;
      do
      {
        unsigned int v344 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v343, "", 0);
        uint64_t v343 = a2;
        unsigned int v345 = v344;
        uint64_t v346 = v344;
        unint64_t v347 = v344 & 0x7FFFFFFF;
        *(void *)(*(void *)(a2 + 24) + 16 * v347) = 4;
        unint64_t v348 = *(unsigned int *)(a2 + 432);
        if (v347 >= v348)
        {
          unint64_t v349 = v347 + 1;
          uint64_t v350 = *(void *)(a2 + 440);
          if (v347 >= *(unsigned int *)(a2 + 436)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v351 = *(_DWORD *)(a2 + 432);
          if (v349 != v348)
          {
            v352 = (void *)(*v434 + 8 * *(unsigned int *)(a2 + 432));
            uint64_t v353 = ~v347 + v348;
            do
            {
              *v352++ = v350;
              BOOL v186 = __CFADD__(v353++, 1);
            }
            while (!v186);
            int v351 = *(_DWORD *)(a2 + 432);
          }
          *(_DWORD *)(a2 + 432) = v351 + v349 - v348;
        }
        *(void *)(*(void *)(a2 + 424) + 8 * v347) = 129;
        uint64_t v354 = *(void *)(a2 + 8);
        if (v354)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v354 + 24))(v354, v346);
          uint64_t v343 = a2;
        }
        if (LODWORD(v470[1]) >= (unint64_t)HIDWORD(v470[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v470[0] + LODWORD(v470[1])) = v345;
        ++LODWORD(v470[1]);
        ++v342;
      }
      while (v342 != 6);
      unint64_t v463 = 8388660;
      LODWORD(v464) = 0;
      long long v468 = v422;
      LODWORD(v469[0]) = 1;
      *(void *)&long long v468 = sub_1CC7382B0((uint64_t)a3);
      *((void *)&v468 + 1) = v355;
      LODWORD(v469[0]) = 1;
      sub_1CC738BB8((uint64_t)a3, (char *)v470[0], LODWORD(v470[1]), (uint64_t)&v468);
      if (v414 == 129)
      {
        LODWORD(v463) = v430;
        LODWORD(v464) = 1;
        LODWORD(v468) = *(_DWORD *)v470[0];
        LODWORD(v469[0]) = 0;
        (*(void (**)(unint64_t *, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*a3 + 32))(a3, 19, &v463, 1, &v468, 1, 0);
      }
      else
      {
        LODWORD(v468) = v430;
        DWORD2(v468) = 1;
        v361 = (int *)v470[0];
        uint64_t v362 = 0x800000000000000;
        if ((v414 & 2) == 0) {
          uint64_t v362 = 0x8000000000000;
        }
        if ((v362 & v414) != 0) {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v356);
        }
        sub_1CC73661C((uint64_t)a3, (uint64_t)&v468, v361, (unsigned __int16)(v414 >> 3));
      }
      v363 = v470[0];
      if (v470[0] == &v471) {
        goto LABEL_478;
      }
    }
    free(v363);
    goto LABEL_478;
  }
  return v199;
}

uint64_t sub_1CBBB4A84(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  *(void *)(a3 + 40) = a1[3];
  *(void *)(a3 + 48) = a1;
  unint64_t v6 = (unsigned __int8 **)(a1 + 7);
  uint64_t v7 = (unsigned __int8 **)(a3 + 32);
  if (a1 + 7 == (unint64_t *)(a3 + 32)) {
    goto LABEL_5;
  }
  unsigned int v8 = *v7;
  if (*v7)
  {
    int v43 = *v8;
    if ((v43 - 4) > 0x1E)
    {
      if ((v43 - 3) >= 0xFFFFFFFE) {
        uint64_t v78 = *v7;
      }
      else {
        uint64_t v78 = 0;
      }
      if ((v43 - 3) < 0xFFFFFFFE)
      {
        if (v43 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v45 = (unint64_t)(v78 + 8);
    }
    else
    {
      if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
        goto LABEL_3;
      }
      uint64_t v44 = *((void *)v8 + 2);
      if ((v44 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      if (!v45) {
        goto LABEL_3;
      }
    }
    uint64_t v130 = a3 + 32;
    sub_1CC5FA668(v45 + 16, &v130);
  }
LABEL_3:
  uint64_t v9 = *v6;
  const char *v7 = *v6;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)v7, v9, 2);
  }
LABEL_5:
  sub_1CBB910AC((uint64_t)&v130, (uint64_t)a1, a2);
  uint64_t v10 = a1 + 6;
  unint64_t v11 = a1[6];
  if (v11 < 8)
  {
    uint64_t v14 = 0;
  }
  else
  {
    if ((v11 & 7) == 0)
    {
      v11 &= 0xFFFFFFFFFFFFFFF8;
      *uint64_t v10 = v11;
      uint64_t v14 = (unsigned __int8 **)(a1 + 6);
      goto LABEL_17;
    }
    uint64_t v12 = (int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    if ((a1[6] & 7) != 3 || v12 == 0)
    {
      uint64_t v14 = 0;
LABEL_21:
      if ((v11 & 7) != 0)
      {
        uint64_t v10 = 0;
        if ((v11 & 7) == 3 && (uint64_t v17 = (int *)(v11 & 0xFFFFFFFFFFFFFFF8), (v11 & 0xFFFFFFFFFFFFFFF8) != 0))
        {
          uint64_t v18 = *v17;
          uint64_t v10 = (unint64_t *)(v17 + 2);
        }
        else
        {
          uint64_t v18 = 0;
        }
      }
      else
      {
        *uint64_t v10 = v11 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v18 = 1;
      }
      goto LABEL_26;
    }
    uint64_t v16 = *v12;
    uint64_t v14 = (unsigned __int8 **)(v12 + 2);
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_21;
    }
    unint64_t v6 = &v14[v15];
LABEL_17:
    while ((*((_WORD *)*v14 + 18) & 0xF00) == 0)
    {
      if (++v14 == v6)
      {
        uint64_t v14 = v6;
        break;
      }
    }
    if (v11 >= 8) {
      goto LABEL_21;
    }
  }
  uint64_t v10 = 0;
  uint64_t v18 = 0;
LABEL_26:
  if (v14 != (unsigned __int8 **)&v10[v18] && *v14) {
    return sub_1CBBD6790(a1, a2, a3);
  }
  unint64_t v20 = v137;
  unint64_t v21 = v135;
  uint64_t v22 = *(void *)(*(void *)(a1[3] + 32) + 16);
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 168))(v22);
  if ((v131 & 0xFFFFFFFB) == 2 || v139 != 0)
  {
    uint64_t v25 = v20 & 4;
LABEL_34:
    uint64_t v26 = 0;
    char v27 = 35;
    if (!v25) {
      char v27 = 19;
    }
    unsigned int v28 = (v20 >> v27) & 0xFFFFFF;
    if (v28 <= 0x40)
    {
      switch(v28)
      {
        case 0u:
          return sub_1CBBDAAB4((uint64_t)&v130, a2, (llvm::IntegerType *****)a3);
        case 1u:
        case 2u:
        case 6u:
          return sub_1CBBDA510((uint64_t)&v130, a2, (llvm::IntegerType *****)a3);
        case 3u:
          return sub_1CBBDA808((uint64_t)&v130, a2, (llvm::IntegerType *****)a3);
        case 5u:
          return sub_1CBBDC1A4((uint64_t)&v130, a2, (llvm::IntegerType *****)a3);
        default:
          return v26;
      }
      return v26;
    }
    if (v28 != 80)
    {
      if (v28 == 75) {
        return sub_1CBBDC1A4((uint64_t)&v130, a2, (llvm::IntegerType *****)a3);
      }
      if (v28 != 65) {
        return v26;
      }
    }
    return sub_1CBBDA510((uint64_t)&v130, a2, (llvm::IntegerType *****)a3);
  }
  if (v21 == 4194436 || v21 == 8388676 || v21 == 8388660)
  {
    unint64_t v29 = v138;
    if (v138)
    {
      if (v21 >> 19 == 16)
      {
        uint64_t v65 = 262136;
        char v66 = 1;
      }
      else
      {
        uint64_t v65 = 131064;
        char v66 = 2;
      }
      uint64_t v126 = (llvm::MachineInstr *)((v21 >> v66) & v65 | 0x1000004);
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      unint64_t v68 = IncompleteVirtualRegister & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v68) = 4;
      unint64_t v69 = *(unsigned int *)(a2 + 432);
      if (v68 >= v69)
      {
        uint64_t v70 = *(void *)(a2 + 440);
        uint64_t v71 = v68 + 1 - v69;
        if (v68 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v72 = *(_DWORD *)(a2 + 432);
        if (v71)
        {
          uint64_t v73 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v74 = ~v68 + v69;
          do
            *v73++ = v70;
          while (!__CFADD__(v74++, 1));
          int v72 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v72 + v71;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v68) = v126;
      uint64_t v76 = *(void *)(a2 + 8);
      if (v76) {
        (*(void (**)(uint64_t))(*(void *)v76 + 24))(v76);
      }
      uint64_t v26 = 1;
      LODWORD(v147) = IncompleteVirtualRegister;
      LODWORD(v148) = 1;
      LODWORD(v142) = v132;
      LODWORD(v144) = 0;
      sub_1CC7382B0(a3);
      LODWORD(v142) = IncompleteVirtualRegister;
      LODWORD(v144) = 0;
      LODWORD(v147) = v134;
      v149[0] = 0;
      int v42 = (void *)a3;
      uint64_t v41 = v29;
LABEL_102:
      sub_1CC737D1C(v42, (int *)&v142, (int *)&v147, v41);
      int v64 = (llvm::MachineInstr *)a1;
LABEL_103:
      llvm::MachineInstr::eraseFromParent(v64);
      return v26;
    }
    return 0;
  }
  if ((v21 & 0xFFFFFFFFFFFFFFF9) != 0 && (v21 & 2) != 0 && (v21 & 4) == 0)
  {
    uint64_t v30 = *(void *)(**(void **)(a1[3] + 32) + 40);
    uint64_t v31 = (v21 >> 19) & 0xFFFFFF;
    uint64_t v32 = *(void *)(v30 + 504);
    if (!v31) {
      goto LABEL_62;
    }
    unint64_t v33 = *(unsigned int *)(v30 + 512);
    uint64_t v34 = *(void *)(v30 + 504);
    if (v33)
    {
      uint64_t v34 = v32;
      unint64_t v35 = v33;
      do
      {
        unint64_t v36 = v35 >> 1;
        uint64_t v37 = v34 + 16 * (v35 >> 1);
        unsigned int v38 = *(_DWORD *)(v37 + 8);
        uint64_t v39 = v37 + 16;
        v35 += ~(v35 >> 1);
        if (v38 < v31) {
          uint64_t v34 = v39;
        }
        else {
          unint64_t v35 = v36;
        }
      }
      while (v35);
    }
    if (v34 == v32 + 16 * v33 || *(_DWORD *)(v34 + 8) != v31) {
LABEL_62:
    }
      uint64_t v34 = v32;
    uint64_t v26 = 1;
    uint64_t v147 = (unsigned __int8 *)(((((unint64_t)((*(_DWORD *)(v34 + 4) + 7) & 0xFFFFFFF8) >> 3) & 0x1FFFFFFF) << 6) | 1);
    LODWORD(v148) = 0;
    LODWORD(v142) = v132;
    LODWORD(v144) = 0;
    sub_1CC7382B0(a3);
    LODWORD(v142) = *(_DWORD *)(*(void *)(v40 + 32) + 4);
    LODWORD(v144) = 0;
    LODWORD(v147) = v134;
    v149[0] = 0;
    uint64_t v41 = v138;
    int v42 = (void *)a3;
    goto LABEL_102;
  }
  uint64_t v25 = v20 & 4;
  char v46 = 35;
  if ((v20 & 4) == 0) {
    char v46 = 19;
  }
  if (((v20 >> v46) & 0xFFFFFF) != 0x40)
  {
    if (sub_1CBB97C1C(v23, (uint64_t)a1, a2, (llvm::IntegerType *****)a3)) {
      return 1;
    }
    goto LABEL_34;
  }
  sub_1CBA315DC((uint64_t)v128, v134, a2, 1);
  if (!v129) {
    return 0;
  }
  unint64_t v47 = (llvm::MachineInstr *)v130;
  uint64_t v48 = *(void *)(*(void *)(v130 + 24) + 32);
  uint64_t v49 = sub_1CBB35BE4(*(void *)(v48 + 16));
  unsigned int v50 = sub_1CD1117B0(v128[0], (uint64_t)v128[1], *(void *)(v48 + 344), v49 << 32);
  unint64_t v51 = v135;
  if (v135 != v136)
  {
    if (!sub_1CBBDD3E0((uint64_t)&v130, a2, a3)) {
      return 0;
    }
    unint64_t v51 = v136;
  }
  unint64_t v141 = v51;
  if (sub_1CBBDD35C(&v141))
  {
    unsigned int v52 = v133;
    unint64_t v53 = *(llvm::MachineFunction **)(a3 + 8);
    uint64_t v54 = *(void *)(*(void *)(a3 + 16) + 8) + 17184;
    v55 = *(unsigned __int8 **)(a3 + 32);
    uint64_t v147 = v55;
    if (v55) {
      llvm::MetadataTracking::track((uint64_t)&v147, v55, 2);
    }
    uint64_t v56 = llvm::MachineFunction::CreateMachineInstr(v53, v54, &v147, 0);
    if (!v147) {
      goto LABEL_82;
    }
    int v119 = *v147;
    if ((v119 - 4) > 0x1E)
    {
      if ((v119 - 3) >= 0xFFFFFFFE) {
        long long v122 = v147;
      }
      else {
        long long v122 = 0;
      }
      if ((v119 - 3) < 0xFFFFFFFE)
      {
        if (v119 == 3) {
          *((void *)v147 + 1) = 0;
        }
        goto LABEL_82;
      }
      unint64_t v121 = (unint64_t)(v122 + 8);
    }
    else
    {
      if ((v147[1] & 0x7F) != 2 && !*((_DWORD *)v147 + 3)) {
        goto LABEL_82;
      }
      uint64_t v120 = *((void *)v147 + 2);
      if ((v120 & 4) == 0) {
        goto LABEL_82;
      }
      unint64_t v121 = v120 & 0xFFFFFFFFFFFFFFF8;
      if (!v121) {
        goto LABEL_82;
      }
    }
    unint64_t v142 = &v147;
    sub_1CC5FA668(v121 + 16, &v142);
LABEL_82:
    int v57 = *(unint64_t **)(a3 + 48);
    uint64_t v58 = *(void *)(*(void *)(a3 + 40) + 40);
    *((void *)v56 + 3) = v58;
    uint64_t v59 = *(void *)(v58 + 32);
    uint64_t v60 = *((unsigned int *)v56 + 10);
    if (v60)
    {
      uint64_t v112 = *((void *)v56 + 4);
      uint64_t v113 = *(void *)(v59 + 40);
      uint64_t v114 = 32 * v60;
      do
      {
        if (!*(unsigned char *)v112)
        {
          uint64_t v115 = *(unsigned int *)(v112 + 4);
          if ((int)v115 >= 0) {
            unint64_t v116 = (uint64_t *)(*(void *)(v113 + 272) + 8 * v115);
          }
          else {
            unint64_t v116 = (uint64_t *)(*(void *)(v113 + 24) + 16 * (v115 & 0x7FFFFFFF) + 8);
          }
          uint64_t v117 = *v116;
          if (*v116)
          {
            uint64_t v118 = *(void *)(v117 + 16);
            *(void *)(v117 + 16) = v112;
            *(void *)(v112 + 16) = v118;
            if (*(unsigned char *)(v112 + 3))
            {
              *(void *)(v112 + 24) = v117;
            }
            else
            {
              *(void *)(v112 + 24) = 0;
              unint64_t v116 = (uint64_t *)(v118 + 24);
            }
          }
          else
          {
            *(void *)(v112 + 16) = v112;
            *(void *)(v112 + 24) = 0;
          }
          *unint64_t v116 = v112;
        }
        v112 += 32;
        v114 -= 32;
      }
      while (v114);
    }
    uint64_t v61 = *(void *)(v59 + 728);
    if (v61) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v61 + 24))(v61, v56);
    }
    unint64_t v62 = *v57 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v56 = v62 | *(void *)v56 & 7;
    *((void *)v56 + 1) = v57;
    *(void *)(v62 + 8) = v56;
    *int v57 = *v57 & 7 | (unint64_t)v56;
    uint64_t v63 = *(void *)(a3 + 56);
    if (v63) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v63 + 24))(v63, v56);
    }
    uint64_t v143 = 0;
    uint64_t v144 = 0;
    LODWORD(v142) = 0;
    HIDWORD(v142) = v52;
    uint64_t v145 = 0;
    llvm::MachineInstr::addOperand(v56, v53, (const llvm::MachineOperand *)&v142);
    uint64_t v26 = 1;
    LODWORD(v142) = 1;
    uint64_t v143 = 0;
    uint64_t v144 = v50;
    llvm::MachineInstr::addOperand(v56, v53, (const llvm::MachineOperand *)&v142);
    int v64 = v47;
    goto LABEL_103;
  }
  if ((v141 & 0xFFFFFFFFFFFFFFF9) == 0 || (v141 & 4) == 0) {
    return 0;
  }
  char v79 = 3;
  if ((v141 & 1) == 0) {
    char v79 = 19;
  }
  unint64_t v80 = v141 >> v79;
  unint64_t v81 = (v141 & 2) != 0
      ? (v141 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v80) | 2
      : v141 & 0x8000000000000000 | (8 * v80) | 1;
  unint64_t v142 = (unsigned __int8 **)v81;
  if (!sub_1CBBDD35C((unint64_t *)&v142)) {
    return 0;
  }
  uint64_t v127 = v47;
  if ((v141 & 2) != 0)
  {
    char v123 = 35;
    char v124 = 19;
    if ((v141 & 4) == 0) {
      char v123 = 19;
    }
    unint64_t v125 = v141 >> v123;
    if ((v141 & 4) == 0) {
      char v124 = 3;
    }
    if (v141) {
      char v124 = 3;
    }
    unint64_t v83 = (8 * (unsigned __int16)(v141 >> v124)) & 0xFFFFF8000007FFFFLL | ((v125 & 0xFFFFFF) << 19) | 2;
  }
  else
  {
    char v82 = 3;
    if ((v141 & 1) == 0) {
      char v82 = 19;
    }
    unint64_t v83 = v141 & 0x8000000000000000 | (8 * (v141 >> v82)) | 1;
  }
  unint64_t v140 = v83;
  uint64_t v147 = (unsigned __int8 *)v149;
  uint64_t v148 = 0x400000000;
  sub_1CBBB1038(v133, a2, a3, (uint64_t)&v147);
  for (unint64_t i = 0; ; ++i)
  {
    unint64_t v86 = v141;
    if ((v141 & 2) != 0) {
      uint64_t v87 = 0x800000000000000;
    }
    else {
      uint64_t v87 = 0x8000000000000;
    }
    if ((v87 & v141) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v84);
      unint64_t v86 = v141;
    }
    if (i >= (unsigned __int16)(v86 >> 3)) {
      break;
    }
    int v88 = *(_DWORD *)&v147[4 * i];
    uint64_t v89 = *(llvm::MachineFunction **)(a3 + 8);
    uint64_t v90 = *(void *)(*(void *)(a3 + 16) + 8);
    unint64_t v91 = *(unsigned __int8 **)(a3 + 32);
    unint64_t v146 = v91;
    if (v91) {
      llvm::MetadataTracking::track((uint64_t)&v146, v91, 2);
    }
    uint64_t v92 = llvm::MachineFunction::CreateMachineInstr(v89, v90 + 17184, &v146, 0);
    if (v146)
    {
      int v108 = *v146;
      if ((v108 - 4) > 0x1E)
      {
        if ((v108 - 3) >= 0xFFFFFFFE) {
          unint64_t v111 = v146;
        }
        else {
          unint64_t v111 = 0;
        }
        if ((v108 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v110 = (unint64_t)(v111 + 8);
LABEL_170:
          unint64_t v142 = &v146;
          sub_1CC5FA668(v110 + 16, &v142);
          goto LABEL_138;
        }
        if (v108 == 3) {
          *((void *)v146 + 1) = 0;
        }
      }
      else if ((v146[1] & 0x7F) == 2 || *((_DWORD *)v146 + 3))
      {
        uint64_t v109 = *((void *)v146 + 2);
        if ((v109 & 4) != 0)
        {
          unint64_t v110 = v109 & 0xFFFFFFFFFFFFFFF8;
          if (v110) {
            goto LABEL_170;
          }
        }
      }
    }
LABEL_138:
    uint64_t v93 = *(unint64_t **)(a3 + 48);
    uint64_t v94 = *(void *)(*(void *)(a3 + 40) + 40);
    *((void *)v92 + 3) = v94;
    uint64_t v95 = *(void *)(v94 + 32);
    uint64_t v96 = *((unsigned int *)v92 + 10);
    if (v96)
    {
      uint64_t v101 = *((void *)v92 + 4);
      uint64_t v102 = *(void *)(v95 + 40);
      uint64_t v103 = 32 * v96;
      do
      {
        if (!*(unsigned char *)v101)
        {
          uint64_t v104 = *(unsigned int *)(v101 + 4);
          if ((int)v104 >= 0) {
            char v105 = (uint64_t *)(*(void *)(v102 + 272) + 8 * v104);
          }
          else {
            char v105 = (uint64_t *)(*(void *)(v102 + 24) + 16 * (v104 & 0x7FFFFFFF) + 8);
          }
          uint64_t v106 = *v105;
          if (*v105)
          {
            uint64_t v107 = *(void *)(v106 + 16);
            *(void *)(v106 + 16) = v101;
            *(void *)(v101 + 16) = v107;
            if (*(unsigned char *)(v101 + 3))
            {
              *(void *)(v101 + 24) = v106;
            }
            else
            {
              *(void *)(v101 + 24) = 0;
              char v105 = (uint64_t *)(v107 + 24);
            }
          }
          else
          {
            *(void *)(v101 + 16) = v101;
            *(void *)(v101 + 24) = 0;
          }
          *char v105 = v101;
        }
        v101 += 32;
        v103 -= 32;
      }
      while (v103);
    }
    uint64_t v97 = *(void *)(v95 + 728);
    if (v97) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v97 + 24))(v97, v92);
    }
    unint64_t v98 = *v93 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v92 = v98 | *(void *)v92 & 7;
    *((void *)v92 + 1) = v93;
    *(void *)(v98 + 8) = v92;
    unint64_t *v93 = *v93 & 7 | (unint64_t)v92;
    uint64_t v99 = *(void *)(a3 + 56);
    if (v99) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v99 + 24))(v99, v92);
    }
    uint64_t v143 = 0;
    LODWORD(v142) = 0;
    HIDWORD(v142) = v88;
    uint64_t v144 = 0;
    uint64_t v145 = 0;
    llvm::MachineInstr::addOperand(v92, v89, (const llvm::MachineOperand *)&v142);
    LODWORD(v142) = 1;
    uint64_t v143 = 0;
    uint64_t v144 = v50;
    llvm::MachineInstr::addOperand(v92, v89, (const llvm::MachineOperand *)&v142);
    unint64_t v100 = sub_1CB8F1DC4(&v140);
    if (v84 == 1) {
    v50 += v100 >> 3;
    }
  }
  llvm::MachineInstr::eraseFromParent(v127);
  if (v147 != (unsigned __int8 *)v149) {
    free(v147);
  }
  return 1;
}

uint64_t sub_1CBBB5780(unsigned int a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  while (1)
  {
    unint64_t v6 = (uint64_t *)((a1 & 0x80000000) != 0
                   ? *(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8
                   : *(void *)(a2 + 272) + 8 * a1);
    uint64_t v7 = *v6;
    if (!v7) {
      return 0;
    }
    if ((*(unsigned char *)(v7 + 3) & 1) == 0)
    {
      uint64_t v7 = *(void *)(v7 + 24);
      if (!v7 || (*(unsigned char *)(v7 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v3 > 3) {
      return result;
    }
    uint64_t v9 = *(void *)(v7 + 8);
    if (!v9) {
      return result;
    }
    if (!v3)
    {
      uint64_t result = sub_1CBBDF654(a1, a2, 0);
      if (!result) {
        return result;
      }
    }
    if ((a1 & 0x80000000) != 0) {
      uint64_t v10 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v10 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
    }
    uint64_t v11 = *v10;
    if ((*(unsigned char *)(v11 + 3) & 1) == 0) {
      uint64_t v11 = *(void *)(v11 + 24);
    }
    uint64_t v12 = *(void *)(v11 + 8);
    if (**(_WORD **)(v12 + 16) == 121)
    {
      uint64_t v18 = *(void *)(*(void *)(v12 + 32) + 48);
      if (v18)
      {
        if (*(_UNKNOWN **)(v18 + 32) == &unk_1CFB2E344)
        {
          char v19 = *(unsigned char *)(*(void *)(v18 + 40) + 28);
          if ((v19 & 8) != 0) {
            goto LABEL_15;
          }
        }
        else
        {
          char v19 = *(unsigned char *)(v18 + 52);
          if ((v19 & 8) != 0) {
            goto LABEL_15;
          }
        }
        if ((v19 & 7) != 3 && !sub_1CB8456FC(v18 + 24)) {
          return 1;
        }
      }
    }
LABEL_15:
    if ((a1 & 0x80000000) != 0) {
      uint64_t v13 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (a1 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)(*(void *)(a2 + 272) + 8 * a1);
    }
    uint64_t v14 = *v13;
    if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
      uint64_t v14 = *(void *)(v14 + 24);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (**(_WORD **)(v15 + 16) == 121)
    {
      uint64_t v20 = *(void *)(*(void *)(v15 + 32) + 48);
      if (v20)
      {
        if (*(_UNKNOWN **)(v20 + 32) == &unk_1CFB2E344)
        {
          char v21 = *(unsigned char *)(*(void *)(v20 + 40) + 28);
          if ((v21 & 8) != 0) {
            goto LABEL_20;
          }
        }
        else
        {
          char v21 = *(unsigned char *)(v20 + 52);
          if ((v21 & 8) != 0) {
            goto LABEL_20;
          }
        }
        if ((v21 & 7) != 3 && !sub_1CB8456FC(v20 + 24)) {
          return 1;
        }
      }
    }
LABEL_20:
    int v16 = **(unsigned __int16 **)(v9 + 16);
    if (v16 == 166)
    {
      uint64_t v17 = (unsigned int *)(*(void *)(v9 + 32) + 100);
      LODWORD(v3) = v3 + 1;
    }
    else
    {
      if (v16 != 163) {
        return 0;
      }
      uint64_t v3 = (v3 + 1);
      if (sub_1CBBB5780(*(unsigned int *)(*(void *)(v9 + 32) + 36), a2, v3)) {
        return 1;
      }
      uint64_t v17 = (unsigned int *)(*(void *)(v9 + 32) + 68);
    }
    a1 = *v17;
  }
}

#error "1CBBB5C84: too big function (funcsize=0)"

void sub_1CBBD53AC(uint64_t a1, uint64_t a2, unsigned __int8 **a3, unsigned int a4)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  unsigned int v8 = (unsigned __int8 **)(a1 + 56);
  uint64_t v9 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) == a3 + 4) {
    goto LABEL_5;
  }
  uint64_t v10 = *v9;
  if (*v9)
  {
    int v76 = *v10;
    if ((v76 - 4) > 0x1E)
    {
      if ((v76 - 3) >= 0xFFFFFFFE) {
        char v79 = *v9;
      }
      else {
        char v79 = 0;
      }
      if ((v76 - 3) < 0xFFFFFFFE)
      {
        if (v76 == 3) {
          *((void *)v10 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v78 = (unint64_t)(v79 + 8);
    }
    else
    {
      if ((v10[1] & 0x7F) != 2 && !*((_DWORD *)v10 + 3)) {
        goto LABEL_3;
      }
      uint64_t v77 = *((void *)v10 + 2);
      if ((v77 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v78 = v77 & 0xFFFFFFFFFFFFFFF8;
      if (!v78) {
        goto LABEL_3;
      }
    }
    uint64_t v89 = a3 + 4;
    sub_1CC5FA668(v78 + 16, &v89);
  }
LABEL_3:
  uint64_t v11 = *v8;
  *uint64_t v9 = *v8;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)v9, v11, 2);
  }
LABEL_5:
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(unsigned int *)(v12 + 4);
  if ((v13 & 0x80000000) != 0)
  {
    unint64_t v19 = v13 & 0x7FFFFFFF;
    if (v19 >= *(unsigned int *)(a2 + 432)) {
      uint64_t v17 = 0;
    }
    else {
      uint64_t v17 = *(void *)(*(void *)(a2 + 424) + 8 * v19);
    }
    uint64_t v15 = (unsigned __int16 **)(a1 + 16);
    uint64_t v14 = *(unsigned __int16 **)(a1 + 16);
    uint64_t v16 = *v14;
    if (v16 == 86)
    {
      uint64_t v18 = (uint64_t *)(*(void *)(a2 + 24) + 16 * v19 + 8);
      goto LABEL_13;
    }
    if ((v17 & 0xFFFFFFFFFFFFFFF9) != 0 && (v17 & 4) != 0) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v15 = (unsigned __int16 **)(a1 + 16);
    uint64_t v14 = *(unsigned __int16 **)(a1 + 16);
    uint64_t v16 = *v14;
    if (v16 == 86)
    {
      uint64_t v17 = 0;
      uint64_t v18 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v13);
LABEL_13:
      uint64_t v20 = *v18;
      if (v20)
      {
        if ((*(unsigned char *)(v20 + 3) & 0x81) == 0)
        {
LABEL_17:
          uint64_t v21 = *(void *)(v20 + 8);
          char v22 = 1;
LABEL_18:
          if (**(_WORD **)(v21 + 16) == 116)
          {
            uint64_t v23 = *(unsigned int *)(v21 + 40);
            if (v23)
            {
              uint64_t v24 = 0;
              uint64_t v25 = *(unsigned __int8 **)(v21 + 32);
              while (1)
              {
                int v26 = *v25;
                v25 += 32;
                if (v26 == 17) {
                  break;
                }
                if (v23 == ++v24) {
                  goto LABEL_23;
                }
              }
            }
            else
            {
LABEL_23:
              LODWORD(v24) = -1;
            }
            BOOL v27 = (*(_DWORD *)(*(void *)(v21 + 32) + 32 * v24 + 16) - 2797) < 6;
          }
          else
          {
            BOOL v27 = 0;
          }
          v22 &= v27;
          while (1)
          {
            uint64_t v20 = *(void *)(v20 + 24);
            if (!v20) {
              break;
            }
            if ((*(_DWORD *)v20 & 0x81000000) == 0 && *(void *)(v20 + 8) != v21)
            {
              uint64_t v21 = *(void *)(v20 + 8);
              goto LABEL_18;
            }
          }
          if ((v17 & 0xFFFFFFFFFFFFFFF9) == 0 || (v17 & 4) == 0)
          {
            if ((v22 & 1) == 0)
            {
              int v28 = *(_DWORD *)(v12 + 36);
              if (v28 < 0 && (v28 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432))
              {
                unint64_t v29 = *(void *)(*(void *)(a2 + 424) + 8 * (v28 & 0x7FFFFFFF));
                unint64_t v87 = v29;
                if (v29 == 0x8000000000000081)
                {
                  unint64_t v29 = 257;
                  unint64_t v87 = 257;
                  *(void *)&long long v85 = 257;
                  DWORD2(v85) = 0;
                  LODWORD(v89) = v28;
                  int v91 = 0;
                  int v80 = 1;
                  (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
                   + 4))(a3, 178, &v85, 1, &v89, 1, 0);
                  int v28 = *(_DWORD *)(*(void *)(v30 + 32) + 4);
                }
                else
                {
                  int v80 = 0;
                }
              }
              else
              {
                unint64_t v29 = 0;
                int v80 = 0;
                unint64_t v87 = 0;
              }
              unint64_t v84 = 129;
              uint64_t v89 = (void *)v29;
              LODWORD(v90) = 0;
              sub_1CC7374CC((uint64_t)a3, (unint64_t *)&v89, 0.5);
              int v82 = *(_DWORD *)(*(void *)(v43 + 32) + 4);
              uint64_t v89 = (void *)v29;
              LODWORD(v90) = 0;
              sub_1CC7374CC((uint64_t)a3, (unint64_t *)&v89, 0.0);
              int v81 = *(_DWORD *)(*(void *)(v44 + 32) + 4);
              uint64_t v89 = (void *)129;
              LODWORD(v90) = 0;
              sub_1CC7374CC((uint64_t)a3, (unint64_t *)&v89, 0.5);
              int v46 = *(_DWORD *)(*(void *)(v45 + 32) + 4);
              uint64_t v89 = (void *)129;
              LODWORD(v90) = 0;
              sub_1CC7374CC((uint64_t)a3, (unint64_t *)&v89, -0.5);
              int v48 = *(_DWORD *)(*(void *)(v47 + 32) + 4);
              uint64_t v89 = (void *)129;
              LODWORD(v90) = 0;
              sub_1CC7374CC((uint64_t)a3, (unint64_t *)&v89, 0.0);
              int v50 = *(_DWORD *)(*(void *)(v49 + 32) + 4);
              uint64_t v89 = (void *)v29;
              LODWORD(v90) = 0;
              uint64_t v52 = sub_1CB8F1DC4(&v87) + 7;
              if (v51 == 1) {
              double v53 = 1024.0;
              }
              if ((v52 & 0xFFFFFFFFFFFFFFF8) == 0x20) {
                double v53 = 8388608.0;
              }
              sub_1CC7374CC((uint64_t)a3, (unint64_t *)&v89, v53);
              int v83 = *(_DWORD *)(*(void *)(v54 + 32) + 4);
              *(void *)&long long v85 = v87;
              DWORD2(v85) = 0;
              LODWORD(v89) = v28;
              int v91 = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
               + 4))(a3, 184, &v85, 1, &v89, 1, 0);
              int v56 = *(_DWORD *)(*(void *)(v55 + 32) + 4);
              *(void *)&long long v85 = 129;
              DWORD2(v85) = 0;
              LODWORD(v89) = 3;
              int v91 = 2;
              int v92 = v28;
              int v93 = 0;
              int v94 = v81;
              int v95 = 0;
              int v96 = v46;
              int v97 = 0;
              int v98 = v48;
              int v99 = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
               + 4))(a3, 51, &v85, 1, &v89, 5, 0);
              int v58 = *(_DWORD *)(*(void *)(v57 + 32) + 4);
              *(void *)&long long v85 = 129;
              DWORD2(v85) = 0;
              LODWORD(v89) = 4;
              int v91 = 2;
              int v92 = v56;
              int v93 = 0;
              int v94 = v82;
              int v95 = 0;
              int v96 = v50;
              int v97 = 0;
              int v98 = v58;
              int v99 = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
               + 4))(a3, 51, &v85, 1, &v89, 5, 0);
              int v60 = *(_DWORD *)(*(void *)(v59 + 32) + 4);
              unint64_t v62 = sub_1CB8F1DC4(&v87) + 7;
              if (v61 == 1) {
              unint64_t v63 = v62 >> 3;
              }
              unint64_t v65 = (unint64_t)(sub_1CB8F1DC4(&v84) + 7) >> 3;
              if (v64 == 1) {
              if (v63 > v65)
              }
              {
                *(void *)&long long v85 = v87;
                DWORD2(v85) = 0;
                LODWORD(v89) = v60;
                int v91 = 0;
                (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
                 + 4))(a3, 178, &v85, 1, &v89, 1, 0);
                int v60 = *(_DWORD *)(*(void *)(v66 + 32) + 4);
              }
              *(void *)&long long v85 = v87;
              DWORD2(v85) = 0;
              LODWORD(v89) = v28;
              int v91 = 0;
              int v92 = v60;
              int v93 = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
               + 4))(a3, 163, &v85, 1, &v89, 2, 0);
              int v68 = *(_DWORD *)(*(void *)(v67 + 32) + 4);
              unint64_t v69 = v87;
              *(void *)&long long v85 = v87;
              DWORD2(v85) = 0;
              LODWORD(v89) = v68;
              int v91 = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
               + 4))(a3, 180, &v85, 1, &v89, 1, 0);
              int v71 = *(_DWORD *)(*(void *)(v70 + 32) + 4);
              *(void *)&long long v85 = v69;
              DWORD2(v85) = 0;
              LODWORD(v89) = v71;
              int v91 = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
               + 4))(a3, 182, &v85, 1, &v89, 1, 0);
              int v73 = *(_DWORD *)(*(void *)(v72 + 32) + 4);
              *(void *)&long long v85 = v87;
              DWORD2(v85) = 0;
              LODWORD(v89) = 4;
              int v91 = 2;
              int v92 = v56;
              int v93 = 0;
              int v94 = v83;
              int v95 = 0;
              int v96 = v73;
              int v97 = 0;
              int v98 = v28;
              int v99 = 0;
              (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
               + 4))(a3, 51, &v85, 1, &v89, 5, 0);
              if (v80)
              {
                LODWORD(v85) = v13;
                DWORD2(v85) = 1;
                LODWORD(v89) = *(_DWORD *)(*(void *)(v74 + 32) + 4);
                int v91 = 0;
                (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void **, uint64_t, void))*a3
                 + 4))(a3, 179, &v85, 1, &v89, 1, 0);
              }
              else
              {
                llvm::MachineOperand::setReg(*(void *)(v74 + 32), v13);
              }
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
            }
            return;
          }
          goto LABEL_40;
        }
        while (1)
        {
          uint64_t v20 = *(void *)(v20 + 24);
          if (!v20) {
            break;
          }
          if ((*(_DWORD *)v20 & 0x81000000) == 0) {
            goto LABEL_17;
          }
        }
      }
      if ((v17 & 0xFFFFFFFFFFFFFFF9) == 0 || (v17 & 4) == 0) {
        return;
      }
LABEL_40:
      sub_1CBBDFC50(a1, (unsigned __int8 *)a2, a3, a4);
      return;
    }
  }
  uint64_t v89 = &v91;
  uint64_t v90 = 0x300000000;
  unsigned int v31 = *((unsigned __int8 *)v14 + 4);
  uint64_t v32 = *(unsigned int *)(a1 + 40);
  if ((v14[4] & 2) != 0)
  {
    if (v32 == v31) {
      goto LABEL_46;
    }
    unsigned int v33 = *((unsigned __int8 *)v14 + 4);
    do
    {
      int v75 = *(_DWORD *)(v12 + 32 * v31);
      if ((v75 & 0x10000FF) != 0x1000000) {
        break;
      }
      v33 += (v75 & 0x2000000) == 0;
      if (v32 - 1 == v31) {
        break;
      }
      ++v31;
    }
    while ((v75 & 0x2000000) == 0);
  }
  else
  {
    unsigned int v33 = *((unsigned __int8 *)v14 + 4);
  }
  if (v33 != v32)
  {
    LODWORD(v34) = 0;
    uint64_t v36 = v12 + 32 * v33;
    uint64_t v37 = 32 * v32 - 32 * v33;
    do
    {
      int v38 = *(_DWORD *)(v36 + 4);
      if (v38 < 0
        && (v38 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)
        && *(void *)(*(void *)(a2 + 424) + 8 * (v38 & 0x7FFFFFFF)) == 0x8000000000000081)
      {
        unint64_t v87 = 257;
        int v88 = 0;
        LODWORD(v85) = v38;
        LODWORD(v86) = 0;
        (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))*a3
         + 4))(a3, 178, &v87, 1, &v85, 1, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
        llvm::MachineOperand::setReg(v36, *(_DWORD *)(*(void *)(v39 + 32) + 4));
        int v38 = *(_DWORD *)(v36 + 4);
        LODWORD(v34) = v90;
      }
      LODWORD(v85) = v38;
      LODWORD(v86) = 0;
      if (v34 >= HIDWORD(v90))
      {
        if (v89 > &v85 || (char *)v89 + 24 * v34 <= (char *)&v85) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v40 = (char *)v89 + 24 * v90;
      long long v41 = v85;
      *((void *)v40 + 2) = v86;
      *(_OWORD *)uint64_t v40 = v41;
      uint64_t v34 = (v90 + 1);
      LODWORD(v90) = v90 + 1;
      v36 += 32;
      v37 -= 32;
    }
    while (v37);
    uint64_t v16 = **v15;
    unint64_t v35 = (int *)v89;
    goto LABEL_59;
  }
LABEL_46:
  uint64_t v34 = 0;
  unint64_t v35 = &v91;
LABEL_59:
  *(void *)&long long v85 = 257;
  DWORD2(v85) = 0;
  (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, int *, uint64_t, uint64_t))*a3 + 4))(a3, v16, &v85, 1, v35, v34, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
  LODWORD(v87) = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  int v88 = 1;
  LODWORD(v85) = *(_DWORD *)(*(void *)(v42 + 32) + 4);
  LODWORD(v86) = 0;
  (*((void (**)(unsigned __int8 **, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))*a3
   + 4))(a3, 179, &v87, 1, &v85, 1, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  if (v89 != &v91) {
    free(v89);
  }
}

uint64_t sub_1CBBD5F58(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_DWORD **)(a1 + 32);
  int v5 = v4[1];
  if (v5 < 0 && (v5 & 0x7FFFFFFFu) < a3) {
    unint64_t v6 = *(void *)(a2 + 8 * (v5 & 0x7FFFFFFF));
  }
  else {
    unint64_t v6 = 0;
  }
  unint64_t v46 = v6;
  char v7 = 35;
  if ((v6 & 4) == 0) {
    char v7 = 19;
  }
  uint64_t v8 = (v6 >> v7) & 0xFFFFFF;
  BOOL v9 = v8 > 0xA || ((1 << v8) & 0x67F) == 0;
  if (!v9 || (result = 0, unsigned int v11 = v8 - 64, v11 <= 0x10) && ((1 << v11) & 0x10883) != 0)
  {
    int v12 = v4[9];
    int v13 = v4[17];
    uint64_t v14 = *(void *)(a1 + 24);
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    uint64_t v15 = *(void *)(v14 + 32);
    unint64_t v16 = *(void *)(v15 + 40);
    long long v41 = (uint64_t (**)(void **, uint64_t, uint64_t *, uint64_t, char **, uint64_t, void))&unk_1F261CD58;
    *(void *)&long long v42 = v15;
    long long v43 = v16;
    *((void *)&v42 + 1) = (*(uint64_t (**)(void))(**(void **)(v15 + 16) + 104))(*(void *)(v15 + 16));
    uint64_t v47 = 0;
    *((void *)&v44 + 1) = a1;
    *(void *)&long long v45 = 0;
    *(void *)&long long v44 = *(void *)(a1 + 24);
    uint64_t v17 = (unsigned __int8 **)(a1 + 56);
    if ((long long *)(a1 + 56) == (long long *)((char *)&v43 + 8)) {
      goto LABEL_17;
    }
    uint64_t v18 = *v17;
    *((void *)&v43 + 1) = v18;
    if (!v18)
    {
      *((void *)&v43 + 1) = 0;
      goto LABEL_17;
    }
    llvm::MetadataTracking::track((uint64_t)&v43 + 8, v18, 2);
    if (*((void *)&v43 + 1))
    {
      int v32 = **((unsigned char **)&v43 + 1);
      if ((v32 - 4) > 0x1E)
      {
        if ((v32 - 3) >= 0xFFFFFFFE) {
          uint64_t v34 = *((void *)&v43 + 1);
        }
        else {
          uint64_t v34 = 0;
        }
        if ((v32 - 3) < 0xFFFFFFFE)
        {
          if (v32 == 3) {
            *(void *)(*((void *)&v43 + 1) + 8) = 0;
          }
          goto LABEL_37;
        }
        unint64_t v35 = v34 + 8;
        goto LABEL_44;
      }
      if ((*(unsigned char *)(*((void *)&v43 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v43 + 1) + 12))
      {
        uint64_t v37 = *(void *)(*((void *)&v43 + 1) + 16);
        if ((v37 & 4) != 0)
        {
          unint64_t v35 = v37 & 0xFFFFFFFFFFFFFFF8;
          if (v35)
          {
LABEL_44:
            int v50 = (char *)&v43 + 8;
            sub_1CC5FA668(v35 + 16, &v50);
          }
        }
      }
    }
LABEL_37:
    unsigned int v33 = *v17;
    *((void *)&v43 + 1) = v33;
    if (v33) {
      llvm::MetadataTracking::track((uint64_t)&v43 + 8, v33, 2);
    }
LABEL_17:
    unsigned int v19 = sub_1CB8F1DC4(&v46);
    if (v20 == 1)
    {
      unsigned int v38 = v19;
      unsigned int v19 = v38;
    }
    uint64_t v21 = (8 * v19) | 1;
    uint64_t v47 = v21;
    int v48 = 0;
    LODWORD(v50) = v12;
    int v52 = 0;
    uint64_t v22 = sub_1CC739C54(&v41, 0x50u, (unint64_t *)&v47, 1, (int *)&v50, 1, 0);
    uint64_t v24 = v23;
    uint64_t v39 = v21;
    int v40 = 0;
    LODWORD(v47) = v13;
    int v49 = 0;
    uint64_t v25 = sub_1CC738034(&v41, 126, (unint64_t *)&v39, (int *)&v47);
    uint64_t v56 = v21;
    int v57 = 0;
    int v50 = (char *)v22;
    uint64_t v51 = v24;
    int v52 = 1;
    uint64_t v53 = v25;
    uint64_t v54 = v26;
    int v55 = 1;
    uint64_t v27 = v41[4]((void **)&v41, 45, &v56, 1, &v50, 2, 0);
    LODWORD(v47) = v5;
    int v48 = 1;
    int v50 = (char *)v27;
    uint64_t v51 = v28;
    int v52 = 1;
    sub_1CC739C54(&v41, 0x51u, (unint64_t *)&v47, 1, (int *)&v50, 1, 0);
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
    long long v41 = (uint64_t (**)(void **, uint64_t, uint64_t *, uint64_t, char **, uint64_t, void))&unk_1F261CD58;
    if (!*((void *)&v43 + 1)) {
      return 1;
    }
    int v29 = **((unsigned char **)&v43 + 1);
    if ((v29 - 4) > 0x1E)
    {
      if ((v29 - 3) >= 0xFFFFFFFE) {
        uint64_t v30 = *((void *)&v43 + 1);
      }
      else {
        uint64_t v30 = 0;
      }
      if ((v29 - 3) < 0xFFFFFFFE)
      {
        if (v29 == 3) {
          *(void *)(*((void *)&v43 + 1) + 8) = 0;
        }
        return 1;
      }
      unint64_t v31 = v30 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*((void *)&v43 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v43 + 1) + 12)) {
        return 1;
      }
      uint64_t v36 = *(void *)(*((void *)&v43 + 1) + 16);
      if ((v36 & 4) == 0) {
        return 1;
      }
      unint64_t v31 = v36 & 0xFFFFFFFFFFFFFFF8;
      if (!v31) {
        return 1;
      }
    }
    int v50 = (char *)&v43 + 8;
    sub_1CC5FA668(v31 + 16, &v50);
    return 1;
  }
  return result;
}

uint64_t sub_1CBBD645C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  a3[5] = *(void *)(a1 + 24);
  a3[6] = a1;
  unint64_t v6 = (unsigned __int8 **)(a1 + 56);
  char v7 = (unsigned __int8 **)(a3 + 4);
  if ((void *)(a1 + 56) == a3 + 4) {
    goto LABEL_5;
  }
  uint64_t v8 = *v7;
  if (*v7)
  {
    int v25 = *v8;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        uint64_t v28 = *v7;
      }
      else {
        uint64_t v28 = 0;
      }
      if ((v25 - 3) < 0xFFFFFFFE)
      {
        if (v25 == 3) {
          *((void *)v8 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v27 = (unint64_t)(v28 + 8);
    }
    else
    {
      if ((v8[1] & 0x7F) != 2 && !*((_DWORD *)v8 + 3)) {
        goto LABEL_3;
      }
      uint64_t v26 = *((void *)v8 + 2);
      if ((v26 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8;
      if (!v27) {
        goto LABEL_3;
      }
    }
    int v32 = a3 + 4;
    sub_1CC5FA668(v27 + 16, &v32);
  }
LABEL_3:
  BOOL v9 = *v6;
  const char *v7 = *v6;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)v7, v9, 2);
  }
LABEL_5:
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(_DWORD *)(v10 + 4);
  if (v11 < 0 && (v11 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)) {
    uint64_t v12 = *(void *)(*(void *)(a2 + 424) + 8 * (v11 & 0x7FFFFFFF));
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = *(_DWORD *)(v10 + 36);
  if (v13 < 0 && (uint64_t v14 = v13 & 0x7FFFFFFF, v14 < *(_DWORD *)(a2 + 432))) {
    uint64_t v15 = *(void *)(*(void *)(a2 + 424) + 8 * v14);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v12 == 257 || v12 == 129)
  {
    if (v15 != 513)
    {
      if (v15 == 65)
      {
        int v32 = (void *)sub_1CBA5A95C((*(_DWORD *)(a1 + 40) - 1), 0x41uLL);
        LODWORD(v33) = 0;
        uint64_t v16 = 1;
        int v29 = v11;
        int v30 = 1;
        int v32 = (void *)sub_1CBBE0428((uint64_t)&v32, a1, (uint64_t)a3);
        uint64_t v33 = v17;
        v34[0] = 1;
        sub_1CC7382B0((uint64_t)a3);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
        return v16;
      }
      return 0;
    }
  }
  else if (v15 != 513)
  {
    return 0;
  }
  int v32 = v34;
  uint64_t v33 = 0x800000000;
  if (*(_DWORD *)(a1 + 40) < 2u)
  {
    uint64_t v22 = 0;
    uint64_t v23 = v34;
  }
  else
  {
    unint64_t v18 = 1;
    uint64_t v19 = 36;
    do
    {
      int v29 = *(_DWORD *)(*(void *)(a1 + 32) + v19);
      int v31 = 0;
      sub_1CC7363F0(a3, 0x101uLL, &v29);
      if (v33 >= (unint64_t)HIDWORD(v33)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v32 + v33) = *(_DWORD *)(*(void *)(v20 + 32) + 4);
      unsigned int v21 = v33 + 1;
      LODWORD(v33) = v21;
      if (v21 >= HIDWORD(v33)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v32 + v21) = *(_DWORD *)(*(void *)(v20 + 32) + 36);
      uint64_t v22 = (v33 + 1);
      LODWORD(v33) = v33 + 1;
      ++v18;
      v19 += 32;
    }
    while (v18 < *(unsigned int *)(a1 + 40));
    uint64_t v23 = (int *)v32;
  }
  int v29 = v11;
  int v30 = 1;
  sub_1CC73661C((uint64_t)a3, (uint64_t)&v29, v23, v22);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  if (v32 != v34) {
    free(v32);
  }
  return 1;
}

uint64_t sub_1CBBD6790(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v189 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = (unsigned __int16 *)a1[2];
  uint64_t v7 = *((unsigned __int8 *)v6 + 4);
  uint64_t v8 = *v6;
  if (!*((unsigned char *)v6 + 4) && v8 != 96) {
    return 0;
  }
  BOOL v9 = a1 + 6;
  unint64_t v10 = a1[6];
  if (v10 < 8)
  {
    int v13 = 0;
    goto LABEL_23;
  }
  if ((v10 & 7) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
    a1[6] = v10;
    uint64_t v14 = (unsigned __int16 **)(a1 + 7);
    int v13 = (unsigned __int16 **)(a1 + 6);
    goto LABEL_15;
  }
  int v11 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((a1[6] & 7) == 3 && v11 != 0)
  {
    uint64_t v16 = *v11;
    int v13 = (unsigned __int16 **)(v11 + 2);
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_19;
    }
    uint64_t v14 = &v13[v15];
LABEL_15:
    while (((*v13)[18] & 0xF00) == 0)
    {
      if (++v13 == v14)
      {
        int v13 = v14;
        break;
      }
    }
    if (v10 >= 8) {
      goto LABEL_19;
    }
LABEL_23:
    BOOL v9 = 0;
    uint64_t v18 = 0;
    goto LABEL_24;
  }
  int v13 = 0;
LABEL_19:
  if ((v10 & 7) != 0)
  {
    BOOL v9 = 0;
    if ((v10 & 7) == 3 && (uint64_t v17 = (int *)(v10 & 0xFFFFFFFFFFFFFFF8), (v10 & 0xFFFFFFFFFFFFFFF8) != 0))
    {
      uint64_t v18 = *v17;
      BOOL v9 = (unint64_t *)(v17 + 2);
    }
    else
    {
      uint64_t v18 = 0;
    }
  }
  else
  {
    *BOOL v9 = v10 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = 1;
  }
LABEL_24:
  if (v13 == (unsigned __int16 **)&v9[v18]) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *v13;
  }
  if (v8 == 96 && !v19) {
    return 0;
  }
  unint64_t v20 = a1[4];
  if (*(unsigned char *)v20) {
    return 0;
  }
  int v22 = *(_DWORD *)(v20 + 4);
  if ((v22 & 0x80000000) == 0
    || (uint64_t v23 = v22 & 0x7FFFFFFF, (v22 & 0x7FFFFFFFu) >= *(_DWORD *)(a2 + 432))
    || (uint64_t v24 = *(llvm::MachineMemOperand **)(*(void *)(a2 + 424) + 8 * v23),
        uint64_t v150 = v24,
        (v24 == (llvm::MachineMemOperand *)513) != (v24 != (llvm::MachineMemOperand *)257)))
  {
    llvm::report_fatal_error((llvm *)"All non-64b atomic operations must be i32", (const llvm::Twine *)1);
  }
  *(void *)(a3 + 40) = a1[3];
  *(void *)(a3 + 48) = a1;
  int v25 = (unsigned __int8 **)(a1 + 7);
  uint64_t v26 = (unsigned __int8 **)(a3 + 32);
  if (a1 + 7 != (unint64_t *)(a3 + 32))
  {
    unint64_t v27 = *v26;
    if (!*v26) {
      goto LABEL_36;
    }
    int v120 = *v27;
    if ((v120 - 4) > 0x1E)
    {
      if ((v120 - 3) >= 0xFFFFFFFE) {
        int v132 = *v26;
      }
      else {
        int v132 = 0;
      }
      if ((v120 - 3) < 0xFFFFFFFE)
      {
        if (v120 == 3) {
          *((void *)v27 + 1) = 0;
        }
        goto LABEL_36;
      }
      unint64_t v122 = (unint64_t)(v132 + 8);
    }
    else if ((v27[1] & 0x7F) != 2 && !*((_DWORD *)v27 + 3) {
           || (uint64_t v121 = *((void *)v27 + 2), (v121 & 4) == 0)
    }
           || (unint64_t v122 = v121 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_36:
      uint64_t v28 = *v25;
      llvm::MachineInstr *v26 = *v25;
      if (v28) {
        llvm::MetadataTracking::track(a3 + 32, v28, 2);
      }
      goto LABEL_38;
    }
    unint64_t v172 = a3 + 32;
    sub_1CC5FA668(v122 + 16, &v172);
    goto LABEL_36;
  }
LABEL_38:
  if (v8 == 96) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = v7;
  }
  uint64_t v30 = *(unsigned int *)(a1[4] + 32 * v29 + 4);
  int v31 = *(unsigned char **)(*(void *)(a1[3] + 32) + 16);
  if ((v30 & 0x80000000) != 0 && (v30 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v4 + 432)) {
    unint64_t v32 = *(void *)(*(void *)(v4 + 424) + 8 * (v30 & 0x7FFFFFFF));
  }
  else {
    unint64_t v32 = 0;
  }
  char v33 = 35;
  if ((v32 & 4) == 0) {
    char v33 = 19;
  }
  int v155 = (v32 >> v33) & 0xFFFFFF;
  unint64_t v34 = v19[18];
  uint64_t v35 = (v34 >> 8) & 0xF;
  unint64_t v36 = v34 >> 12;
  if (v36 == 5 && v35 == 4 || v36 == 4 && v35 == 5)
  {
    int v37 = 6;
  }
  else if (byte_1CDAF3AB8[8 * v35 + v36])
  {
    int v37 = v35;
  }
  else
  {
    int v37 = v36;
  }
  uint64_t v168 = 0x2FFFFFFFFLL;
  uint64_t v170 = 0;
  int v171 = 0;
  int v167 = &unk_1F25F7768;
  sub_1CBB31168((uint64_t)&v167, v8, v155, v37, (uint64_t)v31);
  LODWORD(v38) = 0;
  unint64_t v39 = a1[4];
  if (v8 == 96) {
    uint64_t v40 = 0;
  }
  else {
    uint64_t v40 = v7 + 1;
  }
  if (HIDWORD(v168) == 2)
  {
    uint64_t v38 = *(unsigned int *)(v39 + 36);
    long long v41 = (uint64_t *)((v38 & 0x80000000) != 0
                    ? *(void *)(v4 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8
                    : *(void *)(v4 + 272) + 8 * v38);
    uint64_t v42 = *v41;
    if (v42)
    {
      if ((*(unsigned char *)(v42 + 3) & 0x81) == 0)
      {
        int v43 = 1;
LABEL_68:
        BOOL v44 = 1;
        goto LABEL_76;
      }
      int v43 = 1;
      while (1)
      {
        uint64_t v42 = *(void *)(v42 + 24);
        if (!v42) {
          break;
        }
        if ((*(_DWORD *)v42 & 0x81000000) == 0) {
          goto LABEL_68;
        }
      }
    }
  }
  if (v8 == 96 || (uint64_t v45 = *(void *)(*(void *)(v4 + 24) + 16 * v23 + 8)) == 0)
  {
    int v43 = 0;
    BOOL v44 = 0;
    goto LABEL_76;
  }
  if ((*(unsigned char *)(v45 + 3) & 0x81) == 0)
  {
    int v43 = 0;
    goto LABEL_68;
  }
  do
  {
    uint64_t v45 = *(void *)(v45 + 24);
    BOOL v44 = v45 != 0;
  }
  while (v45 && (*(_DWORD *)v45 & 0x81000000) != 0);
  int v43 = 0;
LABEL_76:
  if ((v30 & 0x80000000) != 0) {
    unint64_t v46 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v30 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v46 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v30);
  }
  unint64_t v47 = v39 + 32 * v40;
  uint64_t v48 = *v46;
  int v143 = v38;
  int v147 = v43;
  BOOL v149 = v44;
  int v148 = v22;
  if (*v46 && ((*(unsigned char *)(v48 + 3) & 1) != 0 || (uint64_t v48 = *(void *)(v48 + 24)) != 0 && (*(unsigned char *)(v48 + 3) & 1) != 0)) {
    uint64_t v49 = *(void *)(v48 + 8);
  }
  else {
    uint64_t v49 = 0;
  }
  int v153 = *(_DWORD *)(v47 + 4);
  unint64_t v166 = 257;
  if (v155 == 3) {
    uint64_t v50 = 129;
  }
  else {
    uint64_t v50 = 513;
  }
  if (v155 == 3)
  {
    unint64_t v51 = sub_1CBBAAB48(v30, v4, 0);
    if (!HIDWORD(v51))
    {
      uint64_t v146 = 0;
      uint64_t v52 = 16;
      goto LABEL_102;
    }
    unint64_t v172 = 129;
    LODWORD(v173) = 0;
    unint64_t v59 = v51;
    uint64_t v52 = 16;
    int v60 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)0x10);
    uint64_t v61 = llvm::ConstantInt::get(v60, v59, (const llvm::APInt *)1);
    (*(void (**)(uint64_t, unint64_t *, void *))(*(void *)a3 + 16))(a3, &v172, v61);
    uint64_t v146 = 0;
    uint64_t v58 = (unsigned int *)(*(void *)(v62 + 32) + 4);
  }
  else
  {
    if (**(_WORD **)(v49 + 16) != 116) {
      goto LABEL_95;
    }
    uint64_t v53 = *(unsigned int *)(v49 + 40);
    uint64_t v54 = *(void *)(v49 + 32);
    if (v53)
    {
      uint64_t v55 = 0;
      uint64_t v56 = *(unsigned __int8 **)(v49 + 32);
      while (1)
      {
        int v57 = *v56;
        v56 += 32;
        if (v57 == 17) {
          break;
        }
        if (v53 == ++v55) {
          goto LABEL_92;
        }
      }
    }
    else
    {
LABEL_92:
      LODWORD(v55) = -1;
    }
    if ((*(_DWORD *)(v54 + 32 * v55 + 16) - 2746) > 2)
    {
LABEL_95:
      uint64_t v146 = 0;
      uint64_t v52 = 32;
      goto LABEL_102;
    }
    uint64_t v58 = (unsigned int *)(v54 + 32 * (v55 + 1) + 4);
    uint64_t v52 = 32;
    uint64_t v146 = 4096;
  }
  uint64_t v63 = *v58;
  if ((v63 & 0x80000000) != 0) {
    int v64 = (uint64_t *)(*(void *)(v4 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
  }
  else {
    int v64 = (uint64_t *)(*(void *)(v4 + 272) + 8 * v63);
  }
  uint64_t v65 = *v64;
  if ((*(unsigned char *)(v65 + 3) & 1) == 0) {
    uint64_t v65 = *(void *)(v65 + 24);
  }
  uint64_t v49 = *(void *)(v65 + 8);
LABEL_102:
  sub_1CBB8C014((llvm::LLVMContext *)v52, v49, v4, (llvm::IntegerType *****)a3, v155 == 3, (uint64_t *)v50, &v160);
  sub_1CC73C44C(v160, v165, 1, (uint64_t)&v172);
  if (!(_BYTE)v175)
  {
    BOOL v152 = 0;
    unsigned __int8 v145 = 0;
    goto LABEL_104;
  }
  if (v173 > 0x40)
  {
    int v137 = 0;
    int64_t v138 = ((unint64_t)v173 + 63) >> 6;
    do
    {
      if (v138-- < 1) {
        break;
      }
      unint64_t v140 = *(void *)(v172 + 8 * v138);
      v137 += __clz(v140);
    }
    while (!v140);
    int v141 = v173 | 0xFFFFFFC0;
    if ((v173 & 0x3F) == 0) {
      int v141 = 0;
    }
    if ((v173 - v137 - v141) <= 0x40)
    {
      uint64_t v142 = *(void *)v172;
      BOOL v152 = *(void *)v172 < 0x100uLL;
      if (*(void *)v172 >= 0x100uLL) {
        LOBYTE(v142) = 0;
      }
      unsigned __int8 v145 = v142;
    }
    else
    {
      unsigned __int8 v145 = 0;
      BOOL v152 = 0;
      if (!v172) {
        goto LABEL_104;
      }
    }
    MEMORY[0x1D25D9CB0](v172, 0x1000C8000313F17);
    goto LABEL_104;
  }
  unsigned __int8 v112 = v172;
  BOOL v152 = v172 < 0x100;
  if (v172 >= 0x100) {
    unsigned __int8 v112 = 0;
  }
  unsigned __int8 v145 = v112;
LABEL_104:
  int v151 = sub_1CBBDF0B0((uint64_t)&v160);
  if (BYTE2(v170))
  {
    int v66 = *(_DWORD *)(a1[4] + 32 * v7 + 68);
    uint64_t v187 = (uint64_t)&off_1E66AF9A8;
    unsigned int v188 = 2;
    uint64_t v67 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 18, &v187, 1, 0, 0, 0);
    unint64_t v69 = v68;
    uint64_t v173 = 0;
    unint64_t v174 = 0;
    LODWORD(v172) = 0;
    HIDWORD(v172) = v66;
    uint64_t v175 = 0;
    llvm::MachineInstr::addOperand(v68, v67, (const llvm::MachineOperand *)&v172);
    LODWORD(v172) = 1;
    uint64_t v173 = 0;
    unint64_t v174 = 25;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v172);
    uint64_t v173 = 0;
    unint64_t v174 = 0;
    LODWORD(v172) = 0;
    HIDWORD(v172) = v153;
    uint64_t v175 = 0;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v172);
    LODWORD(v172) = 1;
    uint64_t v173 = 0;
    unint64_t v174 = 26;
    llvm::MachineInstr::addOperand(v69, v67, (const llvm::MachineOperand *)&v172);
    int v144 = v153;
    int v70 = *(_DWORD *)(*((void *)v69 + 4) + 4);
    int v71 = v149;
  }
  else
  {
    int v144 = 0;
    int v71 = v149;
    int v70 = v153;
  }
  if (v8 == 112)
  {
    uint64_t v187 = 257;
    unsigned int v188 = 0;
    LODWORD(v172) = v70;
    LODWORD(v174) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 177, &v187, 1, &v172, 1, 0);
    int v70 = *(_DWORD *)(*(void *)(v72 + 32) + 4);
  }
  sub_1CBBD99D4((uint64_t)a1, v169, v31);
  int v154 = v70;
  if (sub_1CBBDF0B0((uint64_t)&v160) >> 16)
  {
    int v76 = 16;
  }
  else
  {
    if (v161 < 0 && (uint64_t v73 = v161 & 0x7FFFFFFF, v73 < *(_DWORD *)(v165 + 432))) {
      unint64_t v74 = *(void *)(*(void *)(v165 + 424) + 8 * v73);
    }
    else {
      unint64_t v74 = 0;
    }
    unint64_t v172 = v74;
    int v76 = sub_1CB8F1DC4(&v172);
    if (v75 == 1) {
  }
    }
  unsigned int v77 = sub_1CBB31348((uint64_t)&v167, v71, v152, BYTE2(v151) != 0, v76, v150 == (llvm::MachineMemOperand *)513);
  unint64_t v78 = *(llvm::MachineFunction **)(a3 + 8);
  uint64_t v79 = *(void *)(*(void *)(a3 + 16) + 8) + 48 * v77;
  int v80 = *(unsigned __int8 **)(a3 + 32);
  uint64_t v187 = (uint64_t)v80;
  if (v80) {
    llvm::MetadataTracking::track((uint64_t)&v187, v80, 2);
  }
  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v78, v79, (unsigned __int8 **)&v187, 0);
  if (v187)
  {
    int v133 = *(unsigned __int8 *)v187;
    if ((v133 - 4) > 0x1E)
    {
      if ((v133 - 3) >= 0xFFFFFFFE) {
        uint64_t v136 = v187;
      }
      else {
        uint64_t v136 = 0;
      }
      if ((v133 - 3) < 0xFFFFFFFE)
      {
        int v71 = v149;
        if (v133 == 3) {
          *(void *)(v187 + 8) = 0;
        }
        goto LABEL_119;
      }
      unint64_t v135 = v136 + 8;
    }
    else
    {
      int v71 = v149;
      if ((*(unsigned char *)(v187 + 1) & 0x7F) != 2 && !*(_DWORD *)(v187 + 12)) {
        goto LABEL_119;
      }
      uint64_t v134 = *(void *)(v187 + 16);
      if ((v134 & 4) == 0) {
        goto LABEL_119;
      }
      unint64_t v135 = v134 & 0xFFFFFFFFFFFFFFF8;
      if (!v135) {
        goto LABEL_119;
      }
    }
    unint64_t v172 = (unint64_t)&v187;
    sub_1CC5FA668(v135 + 16, &v172);
    int v71 = v149;
  }
LABEL_119:
  int v82 = *(unint64_t **)(a3 + 48);
  uint64_t v83 = *(void *)(*(void *)(a3 + 40) + 40);
  *((void *)MachineInstr + 3) = v83;
  uint64_t v84 = *(void *)(v83 + 32);
  uint64_t v85 = *((unsigned int *)MachineInstr + 10);
  if (v85)
  {
    uint64_t v113 = *((void *)MachineInstr + 4);
    uint64_t v114 = *(void *)(v84 + 40);
    uint64_t v115 = 32 * v85;
    do
    {
      if (!*(unsigned char *)v113)
      {
        uint64_t v116 = *(unsigned int *)(v113 + 4);
        if ((int)v116 >= 0) {
          uint64_t v117 = (uint64_t *)(*(void *)(v114 + 272) + 8 * v116);
        }
        else {
          uint64_t v117 = (uint64_t *)(*(void *)(v114 + 24) + 16 * (v116 & 0x7FFFFFFF) + 8);
        }
        uint64_t v118 = *v117;
        if (*v117)
        {
          uint64_t v119 = *(void *)(v118 + 16);
          *(void *)(v118 + 16) = v113;
          *(void *)(v113 + 16) = v119;
          if (*(unsigned char *)(v113 + 3))
          {
            *(void *)(v113 + 24) = v118;
          }
          else
          {
            *(void *)(v113 + 24) = 0;
            uint64_t v117 = (uint64_t *)(v119 + 24);
          }
        }
        else
        {
          *(void *)(v113 + 16) = v113;
          *(void *)(v113 + 24) = 0;
        }
        *uint64_t v117 = v113;
      }
      v113 += 32;
      v115 -= 32;
    }
    while (v115);
  }
  uint64_t v86 = *(void *)(v84 + 728);
  if (v86) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v86 + 24))(v86, MachineInstr);
  }
  unint64_t v87 = *v82 & 0xFFFFFFFFFFFFFFF8;
  *(void *)MachineInstr = v87 | *(void *)MachineInstr & 7;
  *((void *)MachineInstr + 1) = v82;
  *(void *)(v87 + 8) = MachineInstr;
  *int v82 = *v82 & 7 | (unint64_t)MachineInstr;
  uint64_t v88 = *(void *)(a3 + 56);
  if (v88)
  {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v88 + 24))(v88, MachineInstr);
    if (v71) {
      goto LABEL_124;
    }
  }
  else if (v71)
  {
LABEL_124:
    if (v155 == 3 || v31[303] || v31[305])
    {
      int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v4, "", 0);
      *(void *)(*(void *)(v4 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AF580;
      uint64_t v90 = *(void *)(v4 + 8);
      if (v90) {
        (*(void (**)(uint64_t))(*(void *)v90 + 24))(v90);
      }
      uint64_t v173 = 0;
      unint64_t v174 = 0;
      uint64_t v175 = 0;
      LODWORD(v172) = 0x1000000;
      HIDWORD(v172) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
    }
    else
    {
      unint64_t v124 = sub_1CB8F1DC4(&v166);
      if (v123 == 1) {
      unsigned int v125 = (unsigned __int16)(v166 >> 3);
      }
      unsigned int v126 = (unsigned __int16)(v166 >> 19);
      if ((v166 & 2) == 0) {
        unsigned int v126 = v166 >> 19;
      }
      if ((v166 & 4) != 0) {
        unsigned int v125 = v126;
      }
      if (v166) {
        unsigned int v127 = v166 >> 3;
      }
      else {
        unsigned int v127 = v125;
      }
      sub_1CBC2E6F4(a3, v124 >> 3, v127 >> 3, (uint64_t)&v172);
      int v128 = v172;
      uint64_t v4 = v173;
      uint64_t v150 = (llvm::MachineMemOperand *)v174;
      LODWORD(v172) = 5;
      uint64_t v173 = 0;
      BOOL v149 = v128;
      LODWORD(v174) = v128;
      llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
      LODWORD(v172) = 1;
      uint64_t v173 = 0;
      unint64_t v174 = 0;
      llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
    }
  }
  LODWORD(v172) = 1;
  uint64_t v173 = 0;
  unint64_t v174 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
  LODWORD(v172) = 1;
  uint64_t v173 = 0;
  unint64_t v174 = v146 | v168 | ((unint64_t)(v164 != 1) << 9);
  llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
  if (v152)
  {
    LODWORD(v172) = 1;
    uint64_t v173 = 0;
    unint64_t v174 = v145;
  }
  else
  {
    uint64_t v173 = 0;
    unint64_t v174 = 0;
    LODWORD(v172) = 0;
    HIDWORD(v172) = v160;
    uint64_t v175 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
    LODWORD(v172) = 1;
    uint64_t v173 = 0;
    unint64_t v174 = 0;
  }
  llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
  if (BYTE2(v151))
  {
    LODWORD(v172) = 1;
    uint64_t v173 = 0;
    unint64_t v174 = (__int16)v151;
  }
  else
  {
    uint64_t v173 = 0;
    unint64_t v174 = 0;
    LODWORD(v172) = 0;
    HIDWORD(v172) = v161;
    uint64_t v175 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
    LODWORD(v172) = 1;
    uint64_t v173 = 0;
    unint64_t v174 = 0;
  }
  llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
  LODWORD(v172) = 1;
  uint64_t v173 = 0;
  unint64_t v174 = v163;
  llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
  LODWORD(v172) = 1;
  uint64_t v173 = 0;
  unint64_t v174 = v162;
  llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
  uint64_t v173 = 0;
  unint64_t v174 = 0;
  LODWORD(v172) = 0;
  HIDWORD(v172) = v154;
  uint64_t v175 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
  LODWORD(v172) = 1;
  uint64_t v173 = 0;
  unint64_t v174 = 0;
  llvm::MachineInstr::addOperand(MachineInstr, v78, (const llvm::MachineOperand *)&v172);
  if (v155 != 3 && !v31[303])
  {
    char v91 = v71 ^ 1;
    if (v31[305]) {
      char v91 = 1;
    }
    if ((v91 & 1) == 0) {
      llvm::MachineInstr::addMemOperand(MachineInstr, v78, (llvm::MachineMemOperand *)v4);
    }
  }
  llvm::MachineInstr::addMemOperand(MachineInstr, v78, (llvm::MachineMemOperand *)v19);
  uint64_t v92 = (*(uint64_t (**)(unsigned char *))(*(void *)v31 + 104))(v31);
  (*(void (**)(unsigned char *))(*(void *)v31 + 184))(v31);
  int v93 = v71;
  int v94 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v31 + 176))(v31);
  sub_1CC73B5D0(MachineInstr, v92, v94);
  sub_1CBBD9E7C((uint64_t)a1, v169, (uint64_t)v31);
  if (v93)
  {
    if (v155 == 3 || v31[303] || v31[305])
    {
      LODWORD(v187) = v148;
      unsigned int v188 = 1;
      unint64_t v172 = (unint64_t)v78;
      uint64_t v173 = (uint64_t)MachineInstr;
      LODWORD(v174) = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 19, &v187, 1, &v172, 1, 0);
    }
    else
    {
      LODWORD(v187) = v148;
      unsigned int v188 = 1;
      char v129 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 325, &v187, 1, 0, 0, 0);
      int v131 = v130;
      LODWORD(v172) = 1;
      uint64_t v173 = 0;
      unint64_t v174 = 0;
      llvm::MachineInstr::addOperand(v130, v129, (const llvm::MachineOperand *)&v172);
      LODWORD(v172) = 1;
      uint64_t v173 = 0;
      unint64_t v174 = 0;
      llvm::MachineInstr::addOperand(v131, v129, (const llvm::MachineOperand *)&v172);
      LODWORD(v172) = 5;
      uint64_t v173 = 0;
      LODWORD(v174) = v149;
      llvm::MachineInstr::addOperand(v131, v129, (const llvm::MachineOperand *)&v172);
      LODWORD(v172) = 1;
      uint64_t v173 = 0;
      unint64_t v174 = 0;
      llvm::MachineInstr::addOperand(v131, v129, (const llvm::MachineOperand *)&v172);
      LODWORD(v172) = 1;
      uint64_t v173 = 0;
      unint64_t v174 = 0;
      llvm::MachineInstr::addOperand(v131, v129, (const llvm::MachineOperand *)&v172);
      llvm::MachineInstr::addMemOperand(v131, v129, v150);
      sub_1CC73B5D0(v131, v92, v94);
    }
  }
  if (v147)
  {
    unint64_t v185 = v166;
    int v186 = 0;
    LODWORD(v172) = 32;
    LODWORD(v174) = 2;
    LODWORD(v175) = v148;
    int v176 = 0;
    int v177 = v144;
    int v178 = 0;
    unint64_t v158 = v166;
    int v159 = 0;
    if (v166)
    {
      unint64_t v95 = (v166 >> 3);
    }
    else if ((v166 & 4) != 0)
    {
      if ((v166 & 2) != 0) {
        unint64_t v95 = (unsigned __int16)(v166 >> 19);
      }
      else {
        unint64_t v95 = (v166 >> 19);
      }
    }
    else
    {
      unint64_t v95 = (unsigned __int16)(v166 >> 3);
    }
    uint64_t v96 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)v95);
    int v98 = *(llvm::ConstantInt **)v96;
    unsigned int v99 = *(_DWORD *)(v96 + 8);
    unsigned int v188 = v99 >> 8;
    if (v99 >> 8 > 0x40) {
      operator new[]();
    }
    if (v99 <= 0xFF) {
      LOBYTE(v100) = 0;
    }
    else {
      unint64_t v100 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v99) + 63);
    }
    uint64_t v187 = v100 & 1;
    uint64_t v101 = llvm::ConstantInt::get(v98, (llvm::LLVMContext *)&v187, v97);
    if (v188 >= 0x41 && v187) {
      MEMORY[0x1D25D9CB0](v187, 0x1000C8000313F17);
    }
    uint64_t v179 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a3 + 16))(a3, &v158, v101);
    uint64_t v180 = v102;
    int v181 = 1;
    unint64_t v156 = v166;
    int v157 = 0;
    if (v166)
    {
      unint64_t v103 = (v166 >> 3);
    }
    else if ((v166 & 4) != 0)
    {
      if ((v166 & 2) != 0) {
        unint64_t v103 = (unsigned __int16)(v166 >> 19);
      }
      else {
        unint64_t v103 = (v166 >> 19);
      }
    }
    else
    {
      unint64_t v103 = (unsigned __int16)(v166 >> 3);
    }
    uint64_t v104 = llvm::IntegerType::get(****(llvm::IntegerType *****)(a3 + 8), (llvm::LLVMContext *)v103);
    uint64_t v106 = *(llvm::ConstantInt **)v104;
    unsigned int v107 = *(_DWORD *)(v104 + 8);
    unsigned int v188 = v107 >> 8;
    if (v107 >> 8 >= 0x41) {
      operator new[]();
    }
    uint64_t v187 = 0;
    int v108 = llvm::ConstantInt::get(v106, (llvm::LLVMContext *)&v187, v105);
    if (v188 >= 0x41)
    {
      if (v187) {
        MEMORY[0x1D25D9CB0](v187, 0x1000C8000313F17);
      }
    }
    uint64_t v182 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a3 + 16))(a3, &v156, v108);
    uint64_t v183 = v109;
    int v184 = 1;
    uint64_t v110 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a3 + 32))(a3, 51, &v185, 1, &v172, 5, 0);
    LODWORD(v187) = v143;
    unsigned int v188 = 1;
    unint64_t v172 = v110;
    uint64_t v173 = v111;
    LODWORD(v174) = 1;
    sub_1CC738034((void *)a3, 126, (unint64_t *)&v187, (int *)&v172);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  return 1;
}

uint64_t sub_1CBBD7B64(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  uint64_t v8 = (unsigned __int8 **)(a1 + 56);
  BOOL v9 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) == a3 + 4) {
    goto LABEL_5;
  }
  unint64_t v10 = *v9;
  if (*v9)
  {
    int v69 = *v10;
    if ((v69 - 4) > 0x1E)
    {
      if ((v69 - 3) >= 0xFFFFFFFE) {
        uint64_t v89 = *v9;
      }
      else {
        uint64_t v89 = 0;
      }
      if ((v69 - 3) < 0xFFFFFFFE)
      {
        if (v69 == 3) {
          *((void *)v10 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v71 = (unint64_t)(v89 + 8);
    }
    else
    {
      if ((v10[1] & 0x7F) != 2 && !*((_DWORD *)v10 + 3)) {
        goto LABEL_3;
      }
      uint64_t v70 = *((void *)v10 + 2);
      if ((v70 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
      if (!v71) {
        goto LABEL_3;
      }
    }
    int v144 = a3 + 4;
    sub_1CC5FA668(v71 + 16, &v144);
  }
LABEL_3:
  int v11 = *v8;
  *BOOL v9 = *v8;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)v9, v11, 2);
  }
LABEL_5:
  uint64_t v12 = *(void *)(a1 + 32);
  int v13 = *(_DWORD *)(v12 + 4);
  uint64_t v14 = *(unsigned int *)(v12 + 36);
  if ((v14 & 0x80000000) != 0 && (v14 & 0x7FFFFFFF) < *(_DWORD *)(a2 + 432)) {
    unint64_t v15 = *(void *)(*(void *)(a2 + 424) + 8 * (v14 & 0x7FFFFFFF));
  }
  else {
    unint64_t v15 = 0;
  }
  unint64_t v16 = *(void *)(v12 + 80);
  unint64_t v130 = v15;
  if (v13 < 0 && (v13 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)) {
    unint64_t v17 = *(void *)(*(void *)(a2 + 424) + 8 * (v13 & 0x7FFFFFFF));
  }
  else {
    unint64_t v17 = 0;
  }
  uint64_t v19 = sub_1CB8F1DC4(&v130);
  if (v18 == 1) {
  if (v17 == 65 && (v16 & 7) == 0)
  }
  {
    unsigned int v125 = (llvm::MachineInstr *)a1;
    int v127 = v13;
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    unint64_t v20 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(a2 + 24) + 16 * v20) = 4;
    unint64_t v21 = *(unsigned int *)(a2 + 432);
    if (v20 >= v21)
    {
      uint64_t v22 = *(void *)(a2 + 440);
      uint64_t v23 = v20 + 1 - v21;
      if (v20 >= *(unsigned int *)(a2 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v24 = *(_DWORD *)(a2 + 432);
      if (v23)
      {
        int v25 = (void *)(*(void *)(a2 + 424) + 8 * v21);
        uint64_t v26 = ~v20 + v21;
        do
        {
          *v25++ = v22;
          BOOL v27 = __CFADD__(v26++, 1);
        }
        while (!v27);
        int v24 = *(_DWORD *)(a2 + 432);
      }
      *(_DWORD *)(a2 + 432) = v24 + v23;
    }
    unint64_t v28 = v16 & 0xFFFFFFFFFFFFFFF0;
    *(void *)(*(void *)(a2 + 424) + 8 * v20) = 129;
    uint64_t v29 = *(void *)(a2 + 8);
    if (v29) {
      (*(void (**)(uint64_t, void))(*(void *)v29 + 24))(v29, IncompleteVirtualRegister);
    }
    unint64_t v31 = sub_1CB8F1DC4(&v130);
    if (v30 == 1) {
    if (v28 + 16 <= v31)
    }
    {
      int v32 = v14;
    }
    else
    {
      uint64_t v120 = (8 * v19 + 256) & 0x7FFFFFF00 | 1;
      int v32 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
      unint64_t v33 = v32 & 0x7FFFFFFF;
      *(void *)(*(void *)(a2 + 24) + 16 * v33) = 4;
      unint64_t v34 = *(unsigned int *)(a2 + 432);
      if (v33 >= v34)
      {
        uint64_t v35 = *(void *)(a2 + 440);
        uint64_t v36 = v33 + 1 - v34;
        if (v33 >= *(unsigned int *)(a2 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v37 = *(_DWORD *)(a2 + 432);
        if (v36)
        {
          uint64_t v38 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
          uint64_t v39 = ~v33 + v34;
          do
          {
            *v38++ = v35;
            BOOL v27 = __CFADD__(v39++, 1);
          }
          while (!v27);
          int v37 = *(_DWORD *)(a2 + 432);
        }
        *(_DWORD *)(a2 + 432) = v37 + v36;
      }
      *(void *)(*(void *)(a2 + 424) + 8 * v33) = v120;
      uint64_t v40 = *(void *)(a2 + 8);
      if (v40) {
        (*(void (**)(uint64_t))(*(void *)v40 + 24))(v40);
      }
      LODWORD(v140) = v32;
      int v141 = 1;
      LODWORD(v144) = v14;
      v146[0] = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 118, &v140, 1, &v144, 1, 0);
    }
    BOOL v41 = 1;
    LODWORD(v140) = IncompleteVirtualRegister;
    int v141 = 1;
    LODWORD(v144) = v32;
    v146[0] = 0;
    uint64_t v52 = (void *)sub_1CC7383D8(a3, (unint64_t *)&v140, (int *)&v144, v16 & 0xFFFFFFFFFFFFFFF0);
    unint64_t v140 = (void *)4194324;
    int v141 = 0;
    int v144 = v52;
    uint64_t v145 = v53;
    v146[0] = 1;
    uint64_t v54 = (void *)sub_1CC7382B0((uint64_t)a3);
    LODWORD(v140) = v127;
    int v141 = 1;
    int v144 = v54;
    uint64_t v145 = v55;
    v146[0] = 1;
    int v137 = (void *)257;
    LODWORD(v138) = 0;
    uint64_t v56 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)a3[1], (llvm::LLVMContext *)0x20);
    int v57 = llvm::ConstantInt::get(v56, v28 == v16, (const llvm::APInt *)1);
    uint64_t v147 = (*((uint64_t (**)(unsigned __int8 **, void **, void *))*a3 + 2))(a3, &v137, v57);
    uint64_t v148 = v58;
    int v149 = 1;
    (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 205, &v140, 1, &v144, 2, 0);
    llvm::MachineInstr::eraseFromParent(v125);
    return v41;
  }
  if ((v17 & 1) != 0 && v130 - 4194324 <= 0x30 && ((1 << (v130 - 20)) & 0x1000000010001) != 0)
  {
    unsigned int v49 = sub_1CB8F1DC4(&v130);
    if (v48 == 1) {
    unint64_t v140 = (void *)((8 * v49) | 1);
    }
    int v141 = 0;
    LODWORD(v144) = v14;
    v146[0] = 0;
    sub_1CC7382B0((uint64_t)a3);
    uint64_t v51 = v50;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 32))(a4, a1);
    llvm::MachineOperand::setReg(*(void *)(a1 + 32) + 32, *(_DWORD *)(*(void *)(v51 + 32) + 4));
    (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 40))(a4, a1);
    return 1;
  }
  BOOL v41 = 0;
  if ((v17 & 0xFFFFFFFFFFFFFFF9) == 0 || (v17 & 4) == 0) {
    return v41;
  }
  char v42 = 3;
  if ((v17 & 1) == 0) {
    char v42 = 19;
  }
  unint64_t v43 = v17 >> v42;
  if ((v17 & 2) != 0) {
    unint64_t v44 = (v17 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v43) | 2;
  }
  else {
    unint64_t v44 = v17 & 0x8000000000000000 | (8 * v43) | 1;
  }
  int v128 = v13;
  char v129 = (void *)v44;
  unsigned int v46 = sub_1CB8F1DC4((unint64_t *)&v129);
  if (v45 == 1) {
  unint64_t v47 = v16 / v46;
  }
  if (v16 % v46) {
    return 0;
  }
  unsigned int v126 = (llvm::MachineInstr *)a1;
  if (v19 % v46)
  {
    uint64_t v121 = (8 * (v46 + v46 * (v19 / v46))) | 1;
    unsigned int v124 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    uint64_t v122 = v124;
    unint64_t v60 = v124 & 0x7FFFFFFF;
    *(void *)(*(void *)(a2 + 24) + 16 * v60) = 4;
    unint64_t v61 = *(unsigned int *)(a2 + 432);
    if (v60 >= v61)
    {
      uint64_t v62 = *(void *)(a2 + 440);
      uint64_t v63 = v60 + 1 - v61;
      if (v60 >= *(unsigned int *)(a2 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v64 = *(_DWORD *)(a2 + 432);
      if (v63)
      {
        uint64_t v65 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
        uint64_t v66 = ~v60 + v61;
        do
        {
          *v65++ = v62;
          BOOL v27 = __CFADD__(v66++, 1);
        }
        while (!v27);
        int v64 = *(_DWORD *)(a2 + 432);
      }
      *(_DWORD *)(a2 + 432) = v64 + v63;
    }
    *(void *)(*(void *)(a2 + 424) + 8 * v60) = v121;
    uint64_t v67 = *(void *)(a2 + 8);
    unsigned int v68 = v124;
    if (v67) {
      (*(void (**)(uint64_t, void))(*(void *)v67 + 24))(v67, v124);
    }
    LODWORD(v140) = v124;
    int v141 = 1;
    LODWORD(v144) = v14;
    v146[0] = 0;
    (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void **, uint64_t, void))*a3 + 4))(a3, 118, &v140, 1, &v144, 1, 0);
  }
  else
  {
    uint64_t v122 = v14;
    unsigned int v68 = v14;
  }
  int v137 = v139;
  uint64_t v138 = 0x400000000;
  uint64_t v135 = 0x400000000;
  int v133 = v129;
  uint64_t v134 = v136;
  if ((v68 & 0x80000000) != 0 && (unint64_t v72 = v122 & 0x7FFFFFFF, v72 < *(unsigned int *)(a2 + 432))) {
    uint64_t v73 = *(void **)(*(void *)(a2 + 424) + 8 * v72);
  }
  else {
    uint64_t v73 = 0;
  }
  int v144 = v73;
  unsigned int v75 = sub_1CB8F1DC4((unint64_t *)&v144);
  if (v74 == 1) {
  unint64_t v76 = v75;
  }
  unint64_t v78 = sub_1CB8F1DC4((unint64_t *)&v133);
  if (v77 == 1) {
  unint64_t v79 = v76 % v78;
  }
  BOOL v41 = v76 % v78 == 0;
  if (!v79)
  {
    unint64_t v80 = sub_1CB8F1DC4((unint64_t *)&v133);
    if (v81 == 1)
    {
      unsigned int v118 = v68;
      unint64_t v119 = v80;
      unint64_t v80 = v119;
      unsigned int v68 = v118;
      if ((v118 & 0x80000000) != 0) {
        goto LABEL_90;
      }
    }
    else if ((v68 & 0x80000000) != 0)
    {
LABEL_90:
      int v82 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
      goto LABEL_91;
    }
    int v82 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v122);
LABEL_91:
    uint64_t v83 = *v82;
    unint64_t v84 = v76 / v80;
    if ((*(unsigned char *)(v83 + 3) & 1) == 0) {
      uint64_t v83 = *(void *)(v83 + 24);
    }
    uint64_t v85 = *(void *)(v83 + 8);
    int v86 = **(unsigned __int16 **)(v85 + 16);
    if (v86 == 76)
    {
      if (*(_DWORD *)(v85 + 40) == v84 + 1)
      {
        if (v84)
        {
          uint64_t v90 = 0;
          unsigned int v91 = v138;
          uint64_t v92 = 32 * v84;
          do
          {
            if (v91 >= HIDWORD(v138)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v137 + v91) = *(_DWORD *)(*(void *)(v85 + 32) + v90 + 36);
            unsigned int v91 = v138 + 1;
            LODWORD(v138) = v138 + 1;
            v90 += 32;
          }
          while (v92 != v90);
        }
        goto LABEL_138;
      }
    }
    else if (v86 == 68)
    {
      int v144 = v133;
      LODWORD(v145) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, void, void, void))*a3 + 4))(a3, 68, &v144, 1, 0, 0, 0);
      if (v84)
      {
        int v87 = *(_DWORD *)(*(void *)(v81 + 32) + 4);
        unsigned int v88 = v138;
        do
        {
          if (v88 >= HIDWORD(v138)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v137 + v88) = v87;
          unsigned int v88 = v138 + 1;
          LODWORD(v138) = v138 + 1;
          LODWORD(v84) = v84 - 1;
        }
        while (v84);
      }
LABEL_138:
      uint64_t v107 = 0;
      uint64_t v108 = 0x800000000000000;
      if ((v17 & 2) == 0) {
        uint64_t v108 = 0x8000000000000;
      }
      uint64_t v109 = v108 & v17;
      uint64_t v110 = (unsigned __int16)(v17 >> 3);
      if ((v108 & v17) != 0) {
LABEL_141:
      }
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)v81);
      while (v110)
      {
        if (v135 >= (unint64_t)HIDWORD(v135)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v134 + v135) = *((_DWORD *)v137 + v47 + v107);
        LODWORD(v135) = v135 + 1;
        ++v107;
        --v110;
        if (v109) {
          goto LABEL_141;
        }
      }
      LODWORD(v140) = v128;
      int v141 = 1;
      uint64_t v111 = (int *)v134;
      int v112 = v135;
      int v144 = v146;
      uint64_t v145 = 0x800000000;
      if (v135 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v135)
      {
        uint64_t v113 = 0;
        uint64_t v114 = 4 * v135;
        do
        {
          int v115 = *v111++;
          uint64_t v116 = &v146[v113];
          *uint64_t v116 = v115;
          v116[4] = 0;
          v113 += 6;
          v114 -= 4;
        }
        while (v114);
        int v117 = v145;
      }
      else
      {
        int v117 = 0;
      }
      LODWORD(v145) = v117 + v112;
      (*((void (**)(unsigned __int8 **, uint64_t, void **, uint64_t, _DWORD *))*a3 + 4))(a3, 77, &v140, 1, v146);
      if (v144 != v146) {
        free(v144);
      }
      llvm::MachineInstr::eraseFromParent(v126);
      goto LABEL_156;
    }
    unsigned int v93 = v68;
    unint64_t v140 = v143;
    int v142 = 4;
    int v94 = v133;
    if (v84 >= 5)
    {
      int v141 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v80 <= v76)
    {
      unint64_t v95 = v143;
      unint64_t v96 = v76 / v80;
      do
      {
        *v95++ = v94;
        --v96;
      }
      while (v96);
    }
    int v141 = v76 / v80;
    int v97 = (char *)v140;
    unsigned int v131 = v93;
    int v132 = 0;
    int v144 = v146;
    uint64_t v145 = 0x800000000;
    int v98 = 0;
    unsigned int v99 = v146;
    if (v80 <= v76)
    {
      unint64_t v100 = (char *)v140 + 8 * v84;
      uint64_t v101 = v146;
      do
      {
        uint64_t v102 = *(void *)v97;
        v97 += 8;
        *(void *)uint64_t v101 = v102;
        v101[2] = 0;
        v101 += 4;
      }
      while (v97 != v100);
      int v98 = v145;
      unsigned int v99 = v144;
    }
    LODWORD(v145) = v98 + v84;
    (*((void (**)(unsigned __int8 **, uint64_t, _DWORD *))*a3 + 4))(a3, 74, v99);
    if (v144 == v146)
    {
      if (v84) {
        goto LABEL_124;
      }
    }
    else
    {
      uint64_t v106 = v81;
      free(v144);
      uint64_t v81 = v106;
      if (v84)
      {
LABEL_124:
        uint64_t v103 = 0;
        unsigned int v104 = v138;
        uint64_t v105 = 32 * v84;
        do
        {
          if (v104 >= HIDWORD(v138)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v137 + v104) = *(_DWORD *)(*(void *)(v81 + 32) + v103 + 4);
          unsigned int v104 = v138 + 1;
          LODWORD(v138) = v138 + 1;
          v103 += 32;
        }
        while (v105 != v103);
      }
    }
    if (v140 != v143) {
      free(v140);
    }
    goto LABEL_138;
  }
LABEL_156:
  if (v134 != v136) {
    free(v134);
  }
  if (v137 != v139) {
    free(v137);
  }
  return v41;
}

BOOL sub_1CBBD89E8(llvm::MachineInstr *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  a2[5] = *((void *)a1 + 3);
  a2[6] = a1;
  uint64_t v2 = (_DWORD *)*((void *)a1 + 4);
  uint64_t v3 = v2[20];
  if (!v2[20])
  {
    v7[0] = v2[1];
    v7[2] = 1;
    v6[0] = v2[9];
    v6[4] = 0;
    (*(void (**)(void *, uint64_t, _DWORD *, uint64_t, _DWORD *, uint64_t, void))(*a2 + 32))(a2, 334, v7, 1, v6, 1, 0);
    llvm::MachineInstr::eraseFromParent(a1);
  }
  return v3 == 0;
}

void sub_1CBBD8ABC(uint64_t a1)
{
  *(void *)a1 = &unk_1F261CA88;
  sub_1CBA6249C((char **)(a1 + 35456));
  for (uint64_t i = 0; i != -35448; i -= 168)
    sub_1CBA627B0((char **)(a1 + 35296 + i));

  JUMPOUT(0x1D25D9CE0);
}

BOOL sub_1CBBD8B54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  unint64_t v3 = *(void *)(v2 + 8 * *(unsigned int *)(a1 + 8));
  unint64_t v4 = (unsigned __int16)(v3 >> 3);
  unint64_t v5 = (unsigned __int16)(v3 >> 19);
  if ((v3 & 2) == 0) {
    unint64_t v5 = (v3 >> 19);
  }
  if ((v3 & 4) != 0) {
    unint64_t v4 = v5;
  }
  if (v3) {
    unint64_t v6 = (v3 >> 3);
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v7 = sub_1CB8F1DC4((unint64_t *)(v2 + 8 * *(unsigned int *)(a1 + 12)));
  if (v8 == 1)
  {
    unint64_t v10 = v7;
    unint64_t v7 = v10;
  }
  return v7 > v6;
}

void sub_1CBBD8F50(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, llvm::IntegerType *****a6)
{
  v41[1] = *MEMORY[0x1E4F143B8];
  sub_1CBBD9218(&v40, a4, a3, a5, a6);
  unsigned int v9 = a4 & 0xFFFFFFFE;
  if ((a4 & 0xFFFFFFFE) == 6) {
    uint64_t v10 = 16;
  }
  else {
    uint64_t v10 = 8;
  }
  unint64_t v29 = v10;
  *(void *)a1 = a1 + 16;
  *(void *)(a1 + 8) = 0x200000000;
  unsigned int v11 = *(_DWORD *)(a2 + 8);
  if (v11)
  {
    unsigned int v12 = 0;
    if (v9 == 6) {
      char v13 = 4;
    }
    else {
      char v13 = 3;
    }
    char v30 = v13;
    do
    {
      if (v11 - v12 >= 2) {
        uint64_t v14 = 2;
      }
      else {
        uint64_t v14 = v11 - v12;
      }
      int v15 = v14 << v30;
      if (v14 << v30 <= 0x10u) {
        int v15 = 16;
      }
      unint64_t v32 = (8 * v15) | 1u;
      unint64_t v38 = v32;
      int v39 = 0;
      LODWORD(v33) = *((_DWORD *)v40 + (v12 >> 1));
      LODWORD(v35) = 0;
      uint64_t v16 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, void))(*a6)[4])(a6, 54, &v38, 1, &v33, 1, 0);
      uint64_t v18 = v17;
      if (v14)
      {
        uint64_t v19 = (llvm::MachineFunction *)v16;
        unsigned int v20 = v12;
        uint64_t v21 = v14;
        do
        {
          int v22 = *(_DWORD *)(*(void *)a2 + 4 * v20);
          unint64_t v34 = 0;
          LODWORD(v33) = 0;
          HIDWORD(v33) = v22;
          uint64_t v35 = 0;
          unint64_t v36 = 0;
          llvm::MachineInstr::addOperand(v18, v19, (const llvm::MachineOperand *)&v33);
          ++v20;
          --v21;
        }
        while (v21);
        if (v14 == 1)
        {
          unint64_t v23 = sub_1CB8F1DC4(&v32);
          if (v24 == 1)
          {
            unint64_t v28 = v23;
            unint64_t v23 = v28;
          }
          if (v23 > v29)
          {
            unint64_t v38 = v32;
            int v39 = 0;
            unint64_t v33 = v19;
            unint64_t v34 = v18;
            LODWORD(v35) = 1;
            unint64_t v36 = v29;
            int v37 = 3;
            ((void (*)(llvm::IntegerType *****, uint64_t, unint64_t *, uint64_t, llvm::MachineFunction **, uint64_t, void))(*a6)[4])(a6, 259, &v38, 1, &v33, 2, 0);
            uint64_t v18 = v25;
          }
        }
      }
      int v26 = *(_DWORD *)(*((void *)v18 + 4) + 4);
      unint64_t v27 = *(unsigned int *)(a1 + 8);
      if (v27 >= *(unsigned int *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v27) = v26;
      ++*(_DWORD *)(a1 + 8);
      v12 += v14;
    }
    while (v12 < v11);
  }
  if (v40 != v41) {
    free(v40);
  }
}

void *sub_1CBBD9218(void *result, int a2, unsigned int a3, uint64_t a4, llvm::IntegerType *****a5)
{
  unint64_t v5 = result;
  if (a2 != 10)
  {
    result[2] = a3 | ((unint64_t)a3 << 32);
    *uint64_t result = result + 2;
LABEL_63:
    uint64_t v42 = 0x200000002;
    goto LABEL_64;
  }
  if ((a3 & 0x80000000) != 0 && (unint64_t v7 = a5[3], (a3 & 0x7FFFFFFF) < (unint64_t)*((unsigned int *)v7 + 108))) {
    uint64_t v8 = v7[53][a3 & 0x7FFFFFFF];
  }
  else {
    uint64_t v8 = 0;
  }
  if (a4 == 15 || (a4 & 8) == 0)
  {
    unint64_t v59 = v8;
    int v60 = 0;
    if ((v8 & 2) != 0) {
      unint64_t v28 = (unsigned __int16)((unint64_t)v8 >> 19);
    }
    else {
      unint64_t v28 = ((unint64_t)v8 >> 19);
    }
    if ((v8 & 4) == 0) {
      unint64_t v28 = (unsigned __int16)((unint64_t)v8 >> 3);
    }
    if (v8) {
      unint64_t v29 = ((unint64_t)v8 >> 3);
    }
    else {
      unint64_t v29 = v28;
    }
    uint64_t v30 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)v29);
    unint64_t v32 = *(llvm::ConstantInt **)v30;
    unsigned int v33 = *(_DWORD *)(v30 + 8);
    unsigned int v62 = v33 >> 8;
    if (v33 >> 8 > 0x40) {
      operator new[]();
    }
    unint64_t v34 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v33) + 63);
    if (v33 <= 0xFF) {
      LOBYTE(v34) = 0;
    }
    unint64_t v61 = v34 & 0x10;
    uint64_t v35 = llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v61, v31);
    if (v62 >= 0x41 && v61) {
      MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
    }
    ((void (*)(llvm::IntegerType *****, llvm::IntegerType ***, void *))(*a5)[2])(a5, &v59, v35);
    uint64_t v19 = v36;
    unint64_t v59 = v8;
    int v60 = 0;
    if ((v8 & 2) != 0) {
      unint64_t v37 = (unsigned __int16)((unint64_t)v8 >> 19);
    }
    else {
      unint64_t v37 = ((unint64_t)v8 >> 19);
    }
    if ((v8 & 4) == 0) {
      unint64_t v37 = (unsigned __int16)((unint64_t)v8 >> 3);
    }
    if (v8) {
      unint64_t v38 = ((unint64_t)v8 >> 3);
    }
    else {
      unint64_t v38 = v37;
    }
    uint64_t v39 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)v38);
    int v24 = *(llvm::ConstantInt **)v39;
    unint64_t v40 = *(unsigned int *)(v39 + 8);
    unsigned int v62 = v40 >> 8;
    if (v40 >> 8 > 0x40) {
      operator new[]();
    }
    if (v40 <= 0xFF) {
      unint64_t v26 = 0;
    }
    else {
      unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v40) + 63);
    }
    uint64_t v27 = 17;
    goto LABEL_61;
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.i32[0] == 2)
  {
    unint64_t v59 = v8;
    int v60 = 0;
    unint64_t v43 = (llvm::LLVMContext *)(unsigned __int16)((unint64_t)v8 >> 3);
    unint64_t v44 = (llvm::LLVMContext *)(unsigned __int16)((unint64_t)v8 >> 19);
    if ((v8 & 2) == 0) {
      unint64_t v44 = (llvm::LLVMContext *)((unint64_t)v8 >> 19);
    }
    if ((v8 & 4) != 0) {
      unint64_t v43 = v44;
    }
    if (v8) {
      uint64_t v45 = (llvm::LLVMContext *)((unint64_t)v8 >> 3);
    }
    else {
      uint64_t v45 = v43;
    }
    uint64_t v46 = llvm::IntegerType::get(***a5[1], v45);
    uint64_t v48 = *(llvm::ConstantInt **)v46;
    unsigned int v49 = *(_DWORD *)(v46 + 8);
    unsigned int v62 = v49 >> 8;
    if (v49 >> 8 > 0x40) {
      operator new[]();
    }
    if (v49 <= 0xFF) {
      unint64_t v50 = 0;
    }
    else {
      unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v49) + 63);
    }
    uint64_t v51 = 17;
  }
  else
  {
    if (v9.i32[0] == 3)
    {
      unint64_t v59 = v8;
      int v60 = 0;
      if ((v8 & 2) != 0) {
        unint64_t v10 = (unsigned __int16)((unint64_t)v8 >> 19);
      }
      else {
        unint64_t v10 = ((unint64_t)v8 >> 19);
      }
      if ((v8 & 4) == 0) {
        unint64_t v10 = (unsigned __int16)((unint64_t)v8 >> 3);
      }
      if (v8) {
        unint64_t v11 = ((unint64_t)v8 >> 3);
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v12 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)v11);
      uint64_t v14 = *(llvm::ConstantInt **)v12;
      unsigned int v15 = *(_DWORD *)(v12 + 8);
      unsigned int v62 = v15 >> 8;
      if (v15 >> 8 > 0x40) {
        operator new[]();
      }
      unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v15) + 63);
      if (v15 <= 0xFF) {
        LOBYTE(v16) = 0;
      }
      unint64_t v61 = v16 & 0x10;
      unint64_t v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v61, v13);
      if (v62 >= 0x41 && v61) {
        MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
      }
      ((void (*)(llvm::IntegerType *****, llvm::IntegerType ***, void *))(*a5)[2])(a5, &v59, v17);
      uint64_t v19 = v18;
      unint64_t v59 = v8;
      int v60 = 0;
      if ((v8 & 2) != 0) {
        unint64_t v20 = (unsigned __int16)((unint64_t)v8 >> 19);
      }
      else {
        unint64_t v20 = ((unint64_t)v8 >> 19);
      }
      if ((v8 & 4) == 0) {
        unint64_t v20 = (unsigned __int16)((unint64_t)v8 >> 3);
      }
      if (v8) {
        unint64_t v21 = ((unint64_t)v8 >> 3);
      }
      else {
        unint64_t v21 = v20;
      }
      uint64_t v23 = llvm::IntegerType::get(***a5[1], (llvm::LLVMContext *)v21);
      int v24 = *(llvm::ConstantInt **)v23;
      unint64_t v25 = *(unsigned int *)(v23 + 8);
      unsigned int v62 = v25 >> 8;
      if (v25 >> 8 > 0x40) {
        operator new[]();
      }
      if (v25 <= 0xFF) {
        unint64_t v26 = 0;
      }
      else {
        unint64_t v26 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v25) + 63);
      }
      uint64_t v27 = 18;
LABEL_61:
      unint64_t v61 = v26 & v27;
      llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v61, v22);
      if (v62 >= 0x41 && v61) {
        MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
      }
      uint64_t result = (void *)((uint64_t (*)(llvm::IntegerType *****, llvm::IntegerType ***))(*a5)[2])(a5, &v59);
      v5[2] = *(unsigned int *)(*(void *)(v19 + 32) + 4) | ((unint64_t)*(unsigned int *)(*(void *)(v41 + 32)
                                                                                                  + 4) << 32);
      *unint64_t v5 = v5 + 2;
      goto LABEL_63;
    }
    unint64_t v59 = v8;
    int v60 = 0;
    uint64_t v52 = (llvm::LLVMContext *)(unsigned __int16)((unint64_t)v8 >> 3);
    uint64_t v53 = (llvm::LLVMContext *)(unsigned __int16)((unint64_t)v8 >> 19);
    if ((v8 & 2) == 0) {
      uint64_t v53 = (llvm::LLVMContext *)((unint64_t)v8 >> 19);
    }
    if ((v8 & 4) != 0) {
      uint64_t v52 = v53;
    }
    if (v8) {
      uint64_t v54 = (llvm::LLVMContext *)((unint64_t)v8 >> 3);
    }
    else {
      uint64_t v54 = v52;
    }
    uint64_t v55 = llvm::IntegerType::get(***a5[1], v54);
    uint64_t v48 = *(llvm::ConstantInt **)v55;
    unsigned int v56 = *(_DWORD *)(v55 + 8);
    unsigned int v62 = v56 >> 8;
    if (v56 >> 8 > 0x40) {
      operator new[]();
    }
    if (v56 <= 0xFF) {
      unint64_t v50 = 0;
    }
    else {
      unint64_t v50 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v56) + 63);
    }
    uint64_t v51 = 18;
  }
  unint64_t v61 = v50 & v51;
  int v57 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v61, v47);
  if (v62 >= 0x41 && v61) {
    MEMORY[0x1D25D9CB0](v61, 0x1000C8000313F17);
  }
  uint64_t result = (void *)((uint64_t (*)(llvm::IntegerType *****, llvm::IntegerType ***, void *))(*a5)[2])(a5, &v59, v57);
  *((_DWORD *)v5 + 4) = *(_DWORD *)(*(void *)(v58 + 32) + 4);
  *unint64_t v5 = v5 + 2;
  uint64_t v42 = 0x200000001;
LABEL_64:
  v5[1] = v42;
  return result;
}

void sub_1CBBD99D4(uint64_t a1, int a2, unsigned char *a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 32);
  uint64_t v7 = *(void *)v6;
  int v8 = sub_1CBB35BE4((uint64_t)a3);
  if (a3[320]) {
    int v9 = 3;
  }
  else {
    int v9 = 1;
  }
  LODWORD(v45) = 0;
  if (sub_1CBC1C7DC((int)a3, v7, "AtomicCacheCtl", (int *)&v45)) {
    unsigned int v10 = v45;
  }
  else {
    unsigned int v10 = v9;
  }
  if (a3[322])
  {
    unsigned int v44 = v10;
    int v11 = (*(uint64_t (**)(void))(**(void **)(v6 + 344) + 648))(*(void *)(v6 + 344));
    unsigned int v10 = v44;
  }
  else
  {
    int v11 = 1;
  }
  if (v8 == 5) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = 0;
  }
  if (a3[330]) {
    unsigned int v13 = 3;
  }
  else {
    unsigned int v13 = v12;
  }
  if (v10 >= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = v10;
  }
  if (a3[329])
  {
    unsigned int v15 = 0;
  }
  else
  {
    LODWORD(v45) = 0;
    if (sub_1CBC1C7DC((int)a3, v7, "MemoryReadCacheCtl", (int *)&v45)) {
      unsigned int v15 = v45;
    }
    else {
      unsigned int v15 = v14;
    }
    if (!a3[329])
    {
      LODWORD(v45) = 0;
      int v32 = sub_1CBC1C7DC((int)a3, v7, "MemoryWriteCacheCtl", (int *)&v45);
      unsigned int v16 = v45;
      if (!v32) {
        unsigned int v16 = v14;
      }
      goto LABEL_25;
    }
  }
  unsigned int v16 = 0;
LABEL_25:
  if (v16 >= v15) {
    unsigned int v17 = v15;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = *(void *)v6;
  LODWORD(v45) = 0;
  sub_1CBC1C7DC((int)a3, v18, "SampleWriteL2Pers", (int *)&v45);
  switch(a2)
  {
    case 3:
    case 11:
      BOOL v19 = v17 == 0;
      uint64_t v20 = 168;
      uint64_t v21 = 184;
      goto LABEL_31;
    case 4:
    case 12:
      BOOL v19 = v17 == 0;
      uint64_t v20 = 232;
      uint64_t v21 = 248;
LABEL_31:
      if (v19) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = v20;
      }
      uint64_t v23 = *(void *)(a1 + 24);
      long long v49 = 0u;
      long long v48 = 0u;
      long long v47 = 0u;
      long long v46 = 0u;
      uint64_t v24 = *(void *)(v23 + 32);
      uint64_t v25 = *(void *)(v24 + 40);
      uint64_t v45 = &unk_1F261CD58;
      *(void *)&long long v46 = v24;
      *(void *)&long long v47 = v25;
      *((void *)&v46 + 1) = (*(uint64_t (**)(void))(**(void **)(v24 + 16) + 104))(*(void *)(v24 + 16));
      uint64_t v53 = 0;
      if (!*((void *)&v47 + 1)) {
        goto LABEL_35;
      }
      int v35 = **((unsigned char **)&v47 + 1);
      if ((v35 - 4) > 0x1E)
      {
        if ((v35 - 3) >= 0xFFFFFFFE) {
          uint64_t v41 = *((void *)&v47 + 1);
        }
        else {
          uint64_t v41 = 0;
        }
        if ((v35 - 3) > 0xFFFFFFFD)
        {
          unint64_t v37 = v41 + 8;
          goto LABEL_72;
        }
        if (v35 == 3) {
          *(void *)(*((void *)&v47 + 1) + 8) = 0;
        }
LABEL_35:
        *((void *)&v47 + 1) = 0;
        goto LABEL_36;
      }
      if ((*(unsigned char *)(*((void *)&v47 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v47 + 1) + 12)) {
        goto LABEL_35;
      }
      uint64_t v36 = *(void *)(*((void *)&v47 + 1) + 16);
      if ((v36 & 4) == 0) {
        goto LABEL_35;
      }
      unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
      if (!v37) {
        goto LABEL_35;
      }
LABEL_72:
      unint64_t v50 = (char *)&v47 + 8;
      sub_1CC5FA668(v37 + 16, &v50);
      *((void *)&v47 + 1) = v53;
      if (v53) {
        llvm::MetadataTracking::retrack((uint64_t)&v53, v53, (uint64_t)&v47 + 8);
      }
LABEL_36:
      *((void *)&v48 + 1) = a1;
      *(void *)&long long v49 = 0;
      *(void *)&long long v48 = *(void *)(a1 + 24);
      unint64_t v26 = (_OWORD *)(a1 + 56);
      if (v26 != (long long *)((char *)&v47 + 8))
      {
        if (!*((void *)&v47 + 1)) {
          goto LABEL_38;
        }
        int v38 = **((unsigned char **)&v47 + 1);
        if ((v38 - 4) > 0x1E)
        {
          if ((v38 - 3) >= 0xFFFFFFFE) {
            uint64_t v42 = *((void *)&v47 + 1);
          }
          else {
            uint64_t v42 = 0;
          }
          if ((v38 - 3) < 0xFFFFFFFE)
          {
            if (v38 == 3) {
              *(void *)(*((void *)&v47 + 1) + 8) = 0;
            }
            goto LABEL_38;
          }
          unint64_t v40 = v42 + 8;
        }
        else if ((*(unsigned char *)(*((void *)&v47 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v47 + 1) + 12) {
               || (uint64_t v39 = *(void *)(*((void *)&v47 + 1) + 16), (v39 & 4) == 0)
        }
               || (unint64_t v40 = v39 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_38:
          uint64_t v27 = *(unsigned __int8 **)v26;
          *((void *)&v47 + 1) = v27;
          if (v27) {
            llvm::MetadataTracking::track((uint64_t)&v47 + 8, v27, 2);
          }
          goto LABEL_40;
        }
        unint64_t v50 = (char *)&v47 + 8;
        sub_1CC5FA668(v40 + 16, &v50);
        goto LABEL_38;
      }
LABEL_40:
      unint64_t v28 = (llvm::MachineFunction *)sub_1CC739C54(&v45, 0x23E3u, 0, 0, 0, 0, 0);
      uint64_t v30 = v29;
      LODWORD(v50) = 1;
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v50);
      LODWORD(v50) = 1;
      uint64_t v51 = 0;
      uint64_t v52 = v22;
      llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v50);
      uint64_t v45 = &unk_1F261CD58;
      if (*((void *)&v47 + 1))
      {
        int v31 = **((unsigned char **)&v47 + 1);
        if ((v31 - 4) > 0x1E)
        {
          if ((v31 - 3) >= 0xFFFFFFFE) {
            uint64_t v33 = *((void *)&v47 + 1);
          }
          else {
            uint64_t v33 = 0;
          }
          if ((v31 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v34 = v33 + 8;
LABEL_52:
            unint64_t v50 = (char *)&v47 + 8;
            sub_1CC5FA668(v34 + 16, &v50);
            return;
          }
          if (v31 == 3) {
            *(void *)(*((void *)&v47 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v47 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v47 + 1) + 12))
        {
          uint64_t v43 = *(void *)(*((void *)&v47 + 1) + 16);
          if ((v43 & 4) != 0)
          {
            unint64_t v34 = v43 & 0xFFFFFFFFFFFFFFF8;
            if (v34) {
              goto LABEL_52;
            }
          }
        }
      }
      return;
    default:
      return;
  }
}

void sub_1CBBD9E7C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 24) + 32);
  uint64_t v7 = *(void *)v6;
  LODWORD(v44) = 0;
  sub_1CBC1C7DC(a3, v7, "AtomicCacheCtl", (int *)&v44);
  if (*(unsigned char *)(a3 + 322)) {
    (*(void (**)(void))(**(void **)(v6 + 344) + 648))(*(void *)(v6 + 344));
  }
  if (!*(unsigned char *)(a3 + 329))
  {
    LODWORD(v44) = 0;
    sub_1CBC1C7DC(a3, v7, "MemoryReadCacheCtl", (int *)&v44);
    if (!*(unsigned char *)(a3 + 329))
    {
      LODWORD(v44) = 0;
      sub_1CBC1C7DC(a3, v7, "MemoryWriteCacheCtl", (int *)&v44);
    }
  }
  uint64_t v8 = *(void *)v6;
  LODWORD(v44) = 0;
  sub_1CBC1C7DC(a3, v8, "SampleWriteL2Pers", (int *)&v44);
  switch(a2)
  {
    case 7:
    case 11:
      uint64_t v9 = *(void *)(a1 + 24);
      long long v48 = 0u;
      long long v47 = 0u;
      long long v46 = 0u;
      long long v45 = 0u;
      uint64_t v10 = *(void *)(v9 + 32);
      uint64_t v11 = *(void *)(v10 + 40);
      unsigned int v44 = &unk_1F261CD58;
      *(void *)&long long v45 = v10;
      *(void *)&long long v46 = v11;
      *((void *)&v45 + 1) = (*(uint64_t (**)(void))(**(void **)(v10 + 16) + 104))(*(void *)(v10 + 16));
      uint64_t v52 = 0;
      if (!*((void *)&v46 + 1)) {
        goto LABEL_8;
      }
      int v27 = **((unsigned char **)&v46 + 1);
      if ((v27 - 4) > 0x1E)
      {
        if ((v27 - 3) >= 0xFFFFFFFE) {
          uint64_t v39 = *((void *)&v46 + 1);
        }
        else {
          uint64_t v39 = 0;
        }
        if ((v27 - 3) > 0xFFFFFFFD)
        {
          unint64_t v29 = v39 + 8;
          goto LABEL_63;
        }
        if (v27 == 3) {
          *(void *)(*((void *)&v46 + 1) + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(*((void *)&v46 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v46 + 1) + 12))
      {
        uint64_t v28 = *(void *)(*((void *)&v46 + 1) + 16);
        if ((v28 & 4) != 0)
        {
          unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
          if (v29)
          {
LABEL_63:
            long long v49 = (char *)&v46 + 8;
            sub_1CC5FA668(v29 + 16, &v49);
            *((void *)&v46 + 1) = v52;
            if (v52) {
              llvm::MetadataTracking::retrack((uint64_t)&v52, v52, (uint64_t)&v46 + 8);
            }
LABEL_9:
            *((void *)&v47 + 1) = a1;
            *(void *)&long long v48 = 0;
            *(void *)&long long v47 = *(void *)(a1 + 24);
            unsigned int v12 = (_OWORD *)(a1 + 56);
            if (v12 == (long long *)((char *)&v46 + 8))
            {
LABEL_13:
              unsigned int v14 = (llvm::MachineFunction *)sub_1CC739C54(&v44, 0x23E3u, 0, 0, 0, 0, 0);
              unsigned int v16 = v15;
              LODWORD(v49) = 1;
              uint64_t v50 = 0;
              uint64_t v51 = 0;
              llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v49);
              LODWORD(v49) = 1;
              uint64_t v17 = 166;
              goto LABEL_21;
            }
            if (!*((void *)&v46 + 1))
            {
LABEL_11:
              unsigned int v13 = *(unsigned __int8 **)v12;
              *((void *)&v46 + 1) = v13;
              if (v13) {
                llvm::MetadataTracking::track((uint64_t)&v46 + 8, v13, 2);
              }
              goto LABEL_13;
            }
            int v33 = **((unsigned char **)&v46 + 1);
            if ((v33 - 4) > 0x1E)
            {
              if ((v33 - 3) >= 0xFFFFFFFE) {
                uint64_t v41 = *((void *)&v46 + 1);
              }
              else {
                uint64_t v41 = 0;
              }
              if ((v33 - 3) < 0xFFFFFFFE)
              {
                if (v33 == 3) {
                  *(void *)(*((void *)&v46 + 1) + 8) = 0;
                }
                goto LABEL_11;
              }
              unint64_t v35 = v41 + 8;
            }
            else
            {
              if ((*(unsigned char *)(*((void *)&v46 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v46 + 1) + 12)) {
                goto LABEL_11;
              }
              uint64_t v34 = *(void *)(*((void *)&v46 + 1) + 16);
              if ((v34 & 4) == 0) {
                goto LABEL_11;
              }
              unint64_t v35 = v34 & 0xFFFFFFFFFFFFFFF8;
              if (!v35) {
                goto LABEL_11;
              }
            }
            long long v49 = (char *)&v46 + 8;
            sub_1CC5FA668(v35 + 16, &v49);
            goto LABEL_11;
          }
        }
      }
LABEL_8:
      *((void *)&v46 + 1) = 0;
      goto LABEL_9;
    case 8:
    case 12:
      uint64_t v18 = *(void *)(a1 + 24);
      long long v48 = 0u;
      long long v47 = 0u;
      long long v46 = 0u;
      long long v45 = 0u;
      uint64_t v19 = *(void *)(v18 + 32);
      uint64_t v20 = *(void *)(v19 + 40);
      unsigned int v44 = &unk_1F261CD58;
      *(void *)&long long v45 = v19;
      *(void *)&long long v46 = v20;
      *((void *)&v45 + 1) = (*(uint64_t (**)(void))(**(void **)(v19 + 16) + 104))(*(void *)(v19 + 16));
      uint64_t v52 = 0;
      if (!*((void *)&v46 + 1)) {
        goto LABEL_15;
      }
      int v30 = **((unsigned char **)&v46 + 1);
      if ((v30 - 4) > 0x1E)
      {
        if ((v30 - 3) >= 0xFFFFFFFE) {
          uint64_t v40 = *((void *)&v46 + 1);
        }
        else {
          uint64_t v40 = 0;
        }
        if ((v30 - 3) > 0xFFFFFFFD)
        {
          unint64_t v32 = v40 + 8;
          goto LABEL_70;
        }
        if (v30 == 3) {
          *(void *)(*((void *)&v46 + 1) + 8) = 0;
        }
LABEL_15:
        *((void *)&v46 + 1) = 0;
        goto LABEL_16;
      }
      if ((*(unsigned char *)(*((void *)&v46 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v46 + 1) + 12)) {
        goto LABEL_15;
      }
      uint64_t v31 = *(void *)(*((void *)&v46 + 1) + 16);
      if ((v31 & 4) == 0) {
        goto LABEL_15;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      if (!v32) {
        goto LABEL_15;
      }
LABEL_70:
      long long v49 = (char *)&v46 + 8;
      sub_1CC5FA668(v32 + 16, &v49);
      *((void *)&v46 + 1) = v52;
      if (v52) {
        llvm::MetadataTracking::retrack((uint64_t)&v52, v52, (uint64_t)&v46 + 8);
      }
LABEL_16:
      *((void *)&v47 + 1) = a1;
      *(void *)&long long v48 = 0;
      *(void *)&long long v47 = *(void *)(a1 + 24);
      uint64_t v21 = (_OWORD *)(a1 + 56);
      if (v21 != (long long *)((char *)&v46 + 8))
      {
        if (!*((void *)&v46 + 1)) {
          goto LABEL_18;
        }
        int v36 = **((unsigned char **)&v46 + 1);
        if ((v36 - 4) > 0x1E)
        {
          if ((v36 - 3) >= 0xFFFFFFFE) {
            uint64_t v42 = *((void *)&v46 + 1);
          }
          else {
            uint64_t v42 = 0;
          }
          if ((v36 - 3) < 0xFFFFFFFE)
          {
            if (v36 == 3) {
              *(void *)(*((void *)&v46 + 1) + 8) = 0;
            }
            goto LABEL_18;
          }
          unint64_t v38 = v42 + 8;
        }
        else if ((*(unsigned char *)(*((void *)&v46 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v46 + 1) + 12) {
               || (uint64_t v37 = *(void *)(*((void *)&v46 + 1) + 16), (v37 & 4) == 0)
        }
               || (unint64_t v38 = v37 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
LABEL_18:
          uint64_t v22 = *(unsigned __int8 **)v21;
          *((void *)&v46 + 1) = v22;
          if (v22) {
            llvm::MetadataTracking::track((uint64_t)&v46 + 8, v22, 2);
          }
          goto LABEL_20;
        }
        long long v49 = (char *)&v46 + 8;
        sub_1CC5FA668(v38 + 16, &v49);
        goto LABEL_18;
      }
LABEL_20:
      unsigned int v14 = (llvm::MachineFunction *)sub_1CC739C54(&v44, 0x23E3u, 0, 0, 0, 0, 0);
      unsigned int v16 = v23;
      LODWORD(v49) = 1;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      llvm::MachineInstr::addOperand(v23, v14, (const llvm::MachineOperand *)&v49);
      LODWORD(v49) = 1;
      uint64_t v17 = 230;
LABEL_21:
      uint64_t v50 = 0;
      uint64_t v51 = v17;
      llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v49);
      unsigned int v44 = &unk_1F261CD58;
      if (*((void *)&v46 + 1))
      {
        int v24 = **((unsigned char **)&v46 + 1);
        if ((v24 - 4) > 0x1E)
        {
          if ((v24 - 3) >= 0xFFFFFFFE) {
            uint64_t v25 = *((void *)&v46 + 1);
          }
          else {
            uint64_t v25 = 0;
          }
          if ((v24 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v26 = v25 + 8;
LABEL_31:
            long long v49 = (char *)&v46 + 8;
            sub_1CC5FA668(v26 + 16, &v49);
            return;
          }
          if (v24 == 3) {
            *(void *)(*((void *)&v46 + 1) + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(*((void *)&v46 + 1) + 1) & 0x7F) == 2 || *(_DWORD *)(*((void *)&v46 + 1) + 12))
        {
          uint64_t v43 = *(void *)(*((void *)&v46 + 1) + 16);
          if ((v43 & 4) != 0)
          {
            unint64_t v26 = v43 & 0xFFFFFFFFFFFFFFF8;
            if (v26) {
              goto LABEL_31;
            }
          }
        }
      }
      return;
    default:
      return;
  }
}

BOOL sub_1CBBDA488(int a1, uint64_t a2, uint64_t a3)
{
  sub_1CBA315DC((uint64_t)&v6, a1, a2, 0);
  if (!v7) {
    return 0;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a3 + 344) + 400))(*(void *)(a3 + 344), v6);
  return v4 != 17;
}

uint64_t sub_1CBBDA510(uint64_t a1, uint64_t a2, llvm::IntegerType *****a3)
{
  unint64_t v38 = *(void *)(a1 + 32);
  if (!sub_1CBBDD35C(&v38))
  {
    if ((v38 & 0xFFFFFFFFFFFFFFF9) == 0 || (v38 & 4) == 0) {
      return 0;
    }
    char v17 = 3;
    if ((v38 & 1) == 0) {
      char v17 = 19;
    }
    unint64_t v18 = v38 >> v17;
    unint64_t v19 = (v38 & 2) != 0
        ? (v38 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v18) | 2
        : v38 & 0x8000000000000000 | (8 * v18) | 1;
    v29[0] = v19;
    if (!sub_1CBBDD35C(v29)) {
      return 0;
    }
    unsigned int v21 = v38;
    uint64_t v22 = 0x800000000000000;
    if ((v38 & 2) == 0) {
      uint64_t v22 = 0x8000000000000;
    }
    if ((v22 & v38) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v20);
      unsigned int v21 = v38;
    }
    if ((unsigned __int16)(v21 >> 3) > 4u) {
      return 0;
    }
  }
  uint64_t v6 = *(unsigned int *)(a1 + 20);
  v29[0] = a1;
  v29[1] = a2;
  v29[2] = 0;
  int v30 = -1;
  char v35 = 0;
  char v36 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  long long v37 = xmmword_1CDC6D240;
  sub_1CBB91B20(v29);
  if ((v6 & 0x80000000) != 0) {
    char v7 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    char v7 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v6);
  }
  uint64_t v8 = *v7;
  if ((*(unsigned char *)(v8 + 3) & 1) == 0) {
    uint64_t v8 = *(void *)(v8 + 24);
  }
  uint64_t v9 = *(void *)(v8 + 8);
  v28[0] = 0;
  v28[1] = 0;
  sub_1CBB8C014((llvm::LLVMContext *)0x20, v9, a2, a3, 0, (uint64_t *)0x201, v27);
  v32 |= (unint64_t)(v27[6] != 1) << 11;
  int v10 = v31;
  if (v31 != 1
    || *(void *)(a1 + 24) == *(void *)(a1 + 32)
    || (uint64_t result = sub_1CBBDD3E0(a1, a2, (uint64_t)a3), result))
  {
    if ((v27[0] & 0x80000000) != 0) {
      unsigned int v12 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v27[0] & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v12 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v27[0]);
    }
    uint64_t v13 = *v12;
    if (v13)
    {
      if (*(unsigned char *)(v13 + 3) & 1) != 0 || (uint64_t v13 = *(void *)(v13 + 24)) != 0 && (*(unsigned char *)(v13 + 3))
      {
        uint64_t v14 = *(void *)(v13 + 8);
        if (v14)
        {
          if (**(_WORD **)(v14 + 16) == 45 && *(_DWORD *)(v14 + 40) == 3)
          {
            if ((v27[0] & 0x80000000) != 0 && (v27[0] & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(a2 + 432)) {
              uint64_t v15 = *(void *)(*(void *)(a2 + 424) + 8 * (v27[0] & 0x7FFFFFFF));
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v25 = v15;
            int v26 = 0;
            v24[0] = v27[0];
            v24[4] = 0;
            ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*a3)[4])(a3, 19, &v25, 1, v24, 1, 0);
            v27[0] = *(_DWORD *)(*(void *)(v23 + 32) + 4);
          }
        }
      }
    }
    sub_1CBBDE7FC(a1, (uint64_t)v29, (uint64_t)v27, a3, v28);
    if (v10
      || *(void *)(a1 + 24) == *(void *)(a1 + 32)
      || (uint64_t result = sub_1CBBDD3E0(a1, a2, (uint64_t)a3), result))
    {
      llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)a1);
      return 1;
    }
  }
  return result;
}

uint64_t sub_1CBBDA808(uint64_t a1, uint64_t a2, llvm::IntegerType *****a3)
{
  unint64_t v37 = *(void *)(a1 + 32);
  if (!sub_1CBBDD35C(&v37))
  {
    if ((v37 & 0xFFFFFFFFFFFFFFF9) == 0 || (v37 & 4) == 0) {
      return 0;
    }
    char v18 = 3;
    if ((v37 & 1) == 0) {
      char v18 = 19;
    }
    unint64_t v19 = v37 >> v18;
    unint64_t v20 = (v37 & 2) != 0
        ? (v37 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v19) | 2
        : v37 & 0x8000000000000000 | (8 * v19) | 1;
    v28[0] = v20;
    if (!sub_1CBBDD35C(v28)) {
      return 0;
    }
    unsigned int v22 = v37;
    uint64_t v23 = 0x800000000000000;
    if ((v37 & 2) == 0) {
      uint64_t v23 = 0x8000000000000;
    }
    if ((v23 & v37) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v21);
      unsigned int v22 = v37;
    }
    if ((unsigned __int16)(v22 >> 3) > 4u) {
      return 0;
    }
  }
  v28[0] = a1;
  v28[1] = a2;
  v28[2] = 0;
  int v29 = -1;
  char v34 = 0;
  char v35 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  long long v36 = xmmword_1CDC6D240;
  sub_1CBB91B20(v28);
  unint64_t v6 = *(unsigned int *)(a1 + 20);
  unint64_t v7 = sub_1CBBAAB48(*(_DWORD *)(a1 + 20), a2, 0);
  if (HIDWORD(v7))
  {
    uint64_t v24 = 129;
    int v25 = 0;
    unint64_t v8 = v7;
    uint64_t v9 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)0x10);
    int v10 = llvm::ConstantInt::get(v9, v8, (const llvm::APInt *)1);
    ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a3)[2])(a3, &v24, v10);
    unint64_t v6 = *(unsigned int *)(*(void *)(v11 + 32) + 4);
  }
  if (v6 >> 31) {
    unsigned int v12 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v12 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v6);
  }
  uint64_t v13 = *v12;
  if ((*(unsigned char *)(v13 + 3) & 1) == 0) {
    uint64_t v13 = *(void *)(v13 + 24);
  }
  uint64_t v14 = *(void *)(v13 + 8);
  v27[0] = 0;
  v27[1] = 0;
  sub_1CBB8C014((llvm::LLVMContext *)0x10, v14, a2, a3, 1, (uint64_t *)0x81, (unsigned int *)&v24);
  v31 |= (unint64_t)(v26 != 1) << 11;
  int v15 = v30;
  if (v30 == 1)
  {
    if (*(void *)(a1 + 24) == *(void *)(a1 + 32) || (uint64_t result = sub_1CBBDD3E0(a1, a2, (uint64_t)a3), result))
    {
      sub_1CBBDE7FC(a1, (uint64_t)v28, (uint64_t)&v24, a3, v27);
LABEL_31:
      llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)a1);
      return 1;
    }
  }
  else
  {
    sub_1CBBDE7FC(a1, (uint64_t)v28, (uint64_t)&v24, a3, v27);
    if (v15) {
      goto LABEL_31;
    }
    if (*(void *)(a1 + 24) == *(void *)(a1 + 32)) {
      goto LABEL_31;
    }
    uint64_t result = sub_1CBBDD3E0(a1, a2, (uint64_t)a3);
    if (result) {
      goto LABEL_31;
    }
  }
  return result;
}

uint64_t sub_1CBBDAAB4(uint64_t a1, uint64_t a2, llvm::IntegerType *****a3)
{
  uint64_t v190 = *MEMORY[0x1E4F143B8];
  unint64_t v164 = *(void *)(a1 + 32);
  if (!sub_1CBBDD35C(&v164))
  {
    if ((v164 & 0xFFFFFFFFFFFFFFF9) == 0 || (v164 & 4) == 0) {
      return 0;
    }
    char v27 = 3;
    if ((v164 & 1) == 0) {
      char v27 = 19;
    }
    unint64_t v28 = v164 >> v27;
    int v29 = (long long *)((v164 & 2) != 0
                     ? (v164 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v28) | 2
                     : v164 & 0x8000000000000000 | (8 * v28) | 1);
    int v167 = v29;
    if (!sub_1CBBDD35C((unint64_t *)&v167)) {
      return 0;
    }
    unsigned int v31 = v164;
    uint64_t v32 = 0x800000000000000;
    if ((v164 & 2) == 0) {
      uint64_t v32 = 0x8000000000000;
    }
    if ((v32 & v164) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v30);
      unsigned int v31 = v164;
    }
    if ((unsigned __int16)(v31 >> 3) >= 5u) {
      return 0;
    }
  }
  unsigned int v163 = *(_DWORD *)(a1 + 20);
  int v167 = (long long *)&v163;
  LODWORD(v181) = v163;
  sub_1CBA6054C((_DWORD **)&v167, a2, (unsigned int *)&v181);
  uint64_t v6 = v163;
  unint64_t v7 = (uint64_t *)((v163 & 0x80000000) != 0
                 ? *(void *)(a2 + 24) + 16 * (v163 & 0x7FFFFFFF) + 8
                 : *(void *)(a2 + 272) + 8 * v163);
  uint64_t v8 = *v7;
  if (!v8) {
    return 0;
  }
  if ((*(unsigned char *)(v8 + 3) & 1) == 0)
  {
    uint64_t v8 = *(void *)(v8 + 24);
    if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v9 = *(void *)(v8 + 8);
  if (!v9) {
    return 0;
  }
  int v10 = **(unsigned __int16 **)(v9 + 16);
  if (v10 != 66)
  {
    if (v10 == 45) {
      goto LABEL_9;
    }
LABEL_78:
    unsigned int v22 = 0;
    int v48 = v6;
    goto LABEL_105;
  }
  for (uint64_t i = 0; i != 64; i += 32)
  {
    char v35 = (char *)&v181 + i;
    *((_DWORD *)v35 + 2) = 1;
    *(void *)char v35 = 0;
    *((_DWORD *)v35 + 6) = 1;
    *((void *)v35 + 2) = 0;
  }
  uint64_t v36 = *(void *)(*(void *)(v9 + 24) + 32);
  uint64_t v168 = &v172;
  int v169 = &v172;
  uint64_t v170 = 4;
  LODWORD(v171) = 0;
  int v167 = (long long *)&unk_1F261BC50;
  uint64_t v176 = v36;
  *(void *)&long long v177 = *(void *)(v36 + 40);
  *((void *)&v177 + 1) = (*(uint64_t (**)(void))(**(void **)(v36 + 16) + 120))(*(void *)(v36 + 16));
  uint64_t v178 = *(void *)(*(void *)v36 + 40) + 272;
  int v179 = 6;
  uint64_t v180 = 1;
  for (uint64_t j = 120; j != 760; j += 40)
    *(_DWORD *)((char *)&v167 + j) = -1;
  sub_1CC6DEE8C((uint64_t)&v167, (const char *)*(unsigned int *)(*(void *)(v9 + 32) + 36), (uint64_t)&v160);
  if (v182 >= 0x41 && v181) {
    MEMORY[0x1D25D9CB0](v181, 0x1000C8000313F17);
  }
  unint64_t v181 = v160;
  LODWORD(v182) = DWORD2(v160);
  DWORD2(v160) = 0;
  if (v183 >= 0x41 && *((void *)&v182 + 1))
  {
    MEMORY[0x1D25D9CB0](*((void *)&v182 + 1), 0x1000C8000313F17);
    *((void *)&v182 + 1) = v161;
    LODWORD(v183) = DWORD2(v161);
    DWORD2(v161) = 0;
    if (DWORD2(v160) >= 0x41 && (void)v160) {
      MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
    }
  }
  else
  {
    *((void *)&v182 + 1) = v161;
    LODWORD(v183) = DWORD2(v161);
  }
  sub_1CC6DEE8C((uint64_t)&v167, (const char *)*(unsigned int *)(*(void *)(v9 + 32) + 68), (uint64_t)&v160);
  if (v184 >= 0x41 && *((void *)&v183 + 1)) {
    MEMORY[0x1D25D9CB0](*((void *)&v183 + 1), 0x1000C8000313F17);
  }
  *((void *)&v183 + 1) = v160;
  LODWORD(v184) = DWORD2(v160);
  DWORD2(v160) = 0;
  if (v186[0] >= 0x41u && v185)
  {
    MEMORY[0x1D25D9CB0](v185, 0x1000C8000313F17);
    uint64_t v185 = v161;
    v186[0] = DWORD2(v161);
    DWORD2(v161) = 0;
    if (DWORD2(v160) >= 0x41 && (void)v160) {
      MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v185 = v161;
    v186[0] = DWORD2(v161);
  }
  DWORD2(v187) = v182;
  if (v182 > 0x40) {
    operator new[]();
  }
  unint64_t v38 = ~v181;
  if (v182) {
    unint64_t v39 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v182;
  }
  else {
    unint64_t v39 = 0;
  }
  unint64_t v40 = v39 & v38;
  *(void *)&long long v187 = v39 & v38;
  DWORD2(v187) = 0;
  LODWORD(v166) = v184;
  if (v184 > 0x40) {
    operator new[]();
  }
  uint64_t v41 = ~*((void *)&v183 + 1);
  if (v184) {
    unint64_t v42 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v184;
  }
  else {
    unint64_t v42 = 0;
  }
  uint64_t v165 = (unsigned __int8 *)(v42 & v41);
  LODWORD(v166) = 0;
  BOOL v43 = (v42 & v41 & v40) == 0;
  sub_1CB9FB5B0((uint64_t)&v167);
  for (uint64_t k = 0; k != -16; k -= 8)
  {
    long long v45 = (char *)&v181 + k * 4;
    if (v186[k] >= 0x41u)
    {
      uint64_t v46 = *((void *)v45 + 6);
      if (v46) {
        MEMORY[0x1D25D9CB0](v46, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)v45 + 10) >= 0x41u)
    {
      uint64_t v47 = *((void *)v45 + 4);
      if (v47) {
        MEMORY[0x1D25D9CB0](v47, 0x1000C8000313F17);
      }
    }
  }
  if (!v43) {
    goto LABEL_78;
  }
LABEL_9:
  uint64_t v11 = *(void *)(v9 + 32);
  uint64_t v12 = *(unsigned int *)(v11 + 36);
  LODWORD(v160) = v12;
  uint64_t v13 = *(unsigned int *)(v11 + 68);
  if ((v12 & 0x80000000) != 0) {
    uint64_t v14 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v12 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v14 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v12);
  }
  uint64_t v15 = *v14;
  if (v15)
  {
    if (*(unsigned char *)(v15 + 3) & 1) != 0 || (uint64_t v15 = *(void *)(v15 + 24)) != 0 && (*(unsigned char *)(v15 + 3))
    {
      uint64_t v16 = *(void *)(v15 + 8);
      if (v16)
      {
        if (**(_WORD **)(v16 + 16) == 80 && *(_DWORD *)(v16 + 40) == 2)
        {
          LODWORD(v12) = *(_DWORD *)(*(void *)(v16 + 32) + 36);
          LODWORD(v160) = v12;
        }
      }
    }
  }
  int v167 = &v160;
  LODWORD(v181) = v12;
  sub_1CBA60644((_DWORD **)&v167, a2, (unsigned int *)&v181);
  uint64_t v17 = v160;
  if ((v160 & 0x80000000) != 0) {
    char v18 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v160 & 0x7FFFFFFF) + 8);
  }
  else {
    char v18 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v160);
  }
  uint64_t v19 = *v18;
  if (v19)
  {
    if (*(unsigned char *)(v19 + 3))
    {
LABEL_21:
      uint64_t v19 = *(void *)(v19 + 8);
      goto LABEL_22;
    }
    uint64_t v19 = *(void *)(v19 + 24);
    if (v19)
    {
      if (*(unsigned char *)(v19 + 3)) {
        goto LABEL_21;
      }
      uint64_t v19 = 0;
    }
  }
LABEL_22:
  if ((v13 & 0x80000000) != 0) {
    unint64_t v20 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v20 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v13);
  }
  uint64_t v21 = *v20;
  if (v21)
  {
    if (*(unsigned char *)(v21 + 3) & 1) != 0 || (uint64_t v21 = *(void *)(v21 + 24)) != 0 && (*(unsigned char *)(v21 + 3))
    {
      unsigned int v22 = 0;
      if (!v19) {
        goto LABEL_103;
      }
      uint64_t v23 = *(void *)(v21 + 8);
      if (!v23) {
        goto LABEL_103;
      }
      if (**(_WORD **)(v19 + 16) == 70 && **(_WORD **)(v23 + 16) == 120)
      {
        uint64_t v24 = *(void *)(*(void *)(v23 + 32) + 48);
        int v25 = (void *)(v24 + 24);
        if (*(_DWORD *)(v24 + 32) >= 0x41u) {
          int v25 = (void *)*v25;
        }
        unsigned int v22 = *(_DWORD *)v25;
        LODWORD(v6) = v160;
        goto LABEL_104;
      }
    }
  }
  unsigned int v22 = 0;
LABEL_103:
  uint64_t v17 = v6;
LABEL_104:
  int v48 = v6;
  uint64_t v6 = v17;
LABEL_105:
  if (v48 < 0) {
    long long v49 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v6 & 0x7FFFFFFF) + 8);
  }
  else {
    long long v49 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v6);
  }
  uint64_t v50 = *v49;
  if (!v50 || (*(unsigned char *)(v50 + 3) & 1) == 0 && ((uint64_t v50 = *(void *)(v50 + 24)) == 0 || (*(unsigned char *)(v50 + 3) & 1) == 0))
  {
    uint64_t v51 = 0;
LABEL_120:
    int v53 = 1;
    goto LABEL_121;
  }
  uint64_t v51 = *(void *)(v50 + 8);
  if (!v51 || **(_WORD **)(v51 + 16) != 70) {
    goto LABEL_120;
  }
  uint64_t v52 = *(void *)(a1 + 48);
  int v53 = 1;
  uint64_t v54 = (1 << *(unsigned char *)(v52 + 34)) | *(void *)(v52 + 8);
  if ((v54 & -v54) != 1)
  {
    uint64_t v56 = *(void *)(v52 + 24);
    uint64_t v55 = (unint64_t *)(v52 + 24);
    if ((v56 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      unint64_t v58 = (unint64_t)(sub_1CB8F1DC4(v55) + 7) >> 3;
      if (v57 == 1) {
    }
      }
    else
    {
      LOBYTE(v58) = -1;
    }
    int v53 = v58 & 1;
  }
LABEL_121:
  int v167 = (long long *)a1;
  uint64_t v168 = (uint64_t *)a2;
  int v169 = 0;
  LODWORD(v170) = -1;
  char v175 = 0;
  LOBYTE(v176) = 0;
  uint64_t v172 = 0;
  uint64_t v173 = 0;
  long long v177 = xmmword_1CDC6D240;
  sub_1CBB91B20(&v167);
  MachineInstr = (llvm::MachineInstr *)HIDWORD(v170);
  if (HIDWORD(v170) == 1 && *(void *)(a1 + 24) != *(void *)(a1 + 32))
  {
    uint64_t result = sub_1CBBDD3E0(a1, a2, (uint64_t)a3);
    if (!result) {
      return result;
    }
  }
  int v60 = v174;
  if (v174 == 3) {
    unint64_t v61 = v171 & 0xFFFFFFFFFFF80FFFLL | 0x1000;
  }
  else {
    unint64_t v61 = v171 & 0xFFFFFFFFFFFFF9FFLL;
  }
  unint64_t v171 = v61;
  if (!v53)
  {
    unint64_t v181 = *(void *)(a1 + 32);
    int IncompleteVirtualRegister = sub_1CB8F1DC4(&v181);
    if (v65 == 1) {
    unint64_t v67 = (IncompleteVirtualRegister - 8);
    }
    HIDWORD(v68) = IncompleteVirtualRegister;
    LODWORD(v68) = IncompleteVirtualRegister - 8;
    switch((v68 >> 3))
    {
      case 2u:
      case 4u:
      case 6u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
        __break(1u);
        goto LABEL_285;
      case 3u:
        if (MachineInstr) {
          unsigned int v69 = 349;
        }
        else {
          unsigned int v69 = 325;
        }
        uint64_t v70 = &off_1E66AF580;
        break;
      case 5u:
        if (MachineInstr) {
          unsigned int v69 = 351;
        }
        else {
          unsigned int v69 = 327;
        }
        uint64_t v70 = (__int16 ***)&off_1E66AF628;
        break;
      case 7u:
        if (MachineInstr) {
          unsigned int v69 = 352;
        }
        else {
          unsigned int v69 = 328;
        }
        uint64_t v70 = (__int16 ***)&off_1E66AF9A8;
        break;
      case 0xBu:
        if (MachineInstr) {
          unsigned int v69 = 355;
        }
        else {
          unsigned int v69 = 331;
        }
        uint64_t v70 = (__int16 ***)&off_1E66AF6D0;
        break;
      case 0xFu:
        if (MachineInstr) {
          unsigned int v69 = 342;
        }
        else {
          unsigned int v69 = 318;
        }
        uint64_t v70 = (__int16 ***)&off_1E66AF778;
        break;
      default:
        if (MachineInstr) {
          unsigned int v69 = 343;
        }
        else {
          unsigned int v69 = 319;
        }
        uint64_t v70 = (__int16 ***)&off_1E66AF970;
        break;
    }
    int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
    *(void *)(*(void *)(a2 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v70;
    uint64_t v82 = *(void *)(a2 + 8);
    if (v82)
    {
      (*(void (**)(uint64_t))(*(void *)v82 + 24))(v82);
      if (MachineInstr)
      {
LABEL_172:
        LODWORD(v160) = IncompleteVirtualRegister;
        DWORD2(v160) = 1;
        LODWORD(v181) = *(_DWORD *)(a1 + 16);
        DWORD2(v182) = 0;
        ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*a3)[4])(a3, 19, &v160, 1, &v181, 1, 0);
        a2 = (uint64_t)a3[1];
        uint64_t v83 = (uint64_t)&a3[2][1][6 * v69];
        unint64_t v84 = (unsigned __int8 *)a3[4];
        *(void *)&long long v160 = v84;
        if (v84) {
          llvm::MetadataTracking::track((uint64_t)&v160, v84, 2);
        }
        MachineInstr = llvm::MachineFunction::CreateMachineInstr((llvm::MachineFunction *)a2, v83, (unsigned __int8 **)&v160, 0);
        unint64_t v67 = v160;
        if (!(void)v160) {
          goto LABEL_175;
        }
LABEL_285:
        int v150 = *(unsigned __int8 *)v67;
        if ((v150 - 4) > 0x1E)
        {
          if ((v150 - 3) >= 0xFFFFFFFE) {
            unint64_t v157 = v67;
          }
          else {
            unint64_t v157 = 0;
          }
          if ((v150 - 3) < 0xFFFFFFFE)
          {
            if (v150 == 3) {
              *(void *)(v67 + 8) = 0;
            }
            goto LABEL_175;
          }
          unint64_t v152 = v157 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v67 + 1) & 0x7F) != 2 && !*(_DWORD *)(v67 + 12)) {
            goto LABEL_175;
          }
          uint64_t v151 = *(void *)(v67 + 16);
          if ((v151 & 4) == 0) {
            goto LABEL_175;
          }
          unint64_t v152 = v151 & 0xFFFFFFFFFFFFFFF8;
          if (!v152) {
            goto LABEL_175;
          }
        }
        unint64_t v181 = (unint64_t)&v160;
        sub_1CC5FA668(v152 + 16, &v181);
LABEL_175:
        uint64_t v85 = (unint64_t *)a3[6];
        int v86 = a3[5][5];
        *((void *)MachineInstr + 3) = v86;
        int v87 = v86[4];
        uint64_t v88 = *((unsigned int *)MachineInstr + 10);
        if (v88)
        {
          uint64_t v121 = *((void *)MachineInstr + 4);
          uint64_t v122 = v87[5];
          uint64_t v123 = 32 * v88;
          do
          {
            if (!*(unsigned char *)v121)
            {
              uint64_t v124 = *(unsigned int *)(v121 + 4);
              if ((int)v124 >= 0) {
                unsigned int v125 = (uint64_t *)(*((void *)v122 + 34) + 8 * v124);
              }
              else {
                unsigned int v125 = (uint64_t *)(*((void *)v122 + 3) + 16 * (v124 & 0x7FFFFFFF) + 8);
              }
              uint64_t v126 = *v125;
              if (*v125)
              {
                uint64_t v127 = *(void *)(v126 + 16);
                *(void *)(v126 + 16) = v121;
                *(void *)(v121 + 16) = v127;
                if (*(unsigned char *)(v121 + 3))
                {
                  *(void *)(v121 + 24) = v126;
                }
                else
                {
                  *(void *)(v121 + 24) = 0;
                  unsigned int v125 = (uint64_t *)(v127 + 24);
                }
              }
              else
              {
                *(void *)(v121 + 16) = v121;
                *(void *)(v121 + 24) = 0;
              }
              *unsigned int v125 = v121;
            }
            v121 += 32;
            v123 -= 32;
          }
          while (v123);
        }
        uint64_t v89 = v87[91];
        if (v89) {
          (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v89 + 24))(v89, MachineInstr);
        }
        unint64_t v90 = *v85 & 0xFFFFFFFFFFFFFFF8;
        *(void *)MachineInstr = v90 | *(void *)MachineInstr & 7;
        *((void *)MachineInstr + 1) = v85;
        *(void *)(v90 + 8) = MachineInstr;
        *uint64_t v85 = *v85 & 7 | (unint64_t)MachineInstr;
        unsigned int v91 = a3[7];
        if (v91) {
          ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v91)[3])(v91, MachineInstr);
        }
        *(void *)&long long v160 = a2;
        *((void *)&v160 + 1) = MachineInstr;
        LODWORD(v181) = 1;
        *(void *)&long long v182 = 0;
        *((void *)&v182 + 1) = v172 & ~(void)v177 | v173;
        llvm::MachineInstr::addOperand(MachineInstr, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&v181);
        LODWORD(v181) = 1;
        *(void *)&long long v182 = 0;
        *((void *)&v182 + 1) = v61;
        llvm::MachineInstr::addOperand(MachineInstr, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&v181);
        long long v182 = 0uLL;
        LODWORD(v181) = 0;
        HIDWORD(v181) = IncompleteVirtualRegister;
        *(void *)&long long v183 = 0;
        llvm::MachineInstr::addOperand(MachineInstr, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&v181);
        int v92 = *(_DWORD *)(*(void *)(v51 + 32) + 48);
        LODWORD(v181) = 5;
        *(void *)&long long v182 = 0;
        DWORD2(v182) = v92;
        llvm::MachineInstr::addOperand(MachineInstr, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&v181);
        LODWORD(v181) = 1;
        *(void *)&long long v182 = 0;
        *((void *)&v182 + 1) = v22;
        llvm::MachineInstr::addOperand(MachineInstr, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&v181);
        LODWORD(v181) = 1;
        long long v182 = 0uLL;
        llvm::MachineInstr::addOperand(MachineInstr, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&v181);
        llvm::MachineInstr::addMemOperand(MachineInstr, (llvm::MachineFunction *)a2, *(llvm::MachineMemOperand **)(a1 + 48));
        sub_1CBA318C8((uint64_t)&v160);
        goto LABEL_257;
      }
    }
    else if (MachineInstr)
    {
      goto LABEL_172;
    }
    int v128 = (llvm::MachineFunction *)a3[1];
    uint64_t v129 = (uint64_t)&a3[2][1][6 * v69];
    unint64_t v130 = (unsigned __int8 *)a3[4];
    *(void *)&long long v160 = v130;
    if (v130) {
      llvm::MetadataTracking::track((uint64_t)&v160, v130, 2);
    }
    unsigned int v131 = llvm::MachineFunction::CreateMachineInstr(v128, v129, (unsigned __int8 **)&v160, 0);
    if ((void)v160)
    {
      int v153 = *(unsigned __int8 *)v160;
      if ((v153 - 4) > 0x1E)
      {
        if ((v153 - 3) >= 0xFFFFFFFE) {
          uint64_t v158 = v160;
        }
        else {
          uint64_t v158 = 0;
        }
        if ((v153 - 3) < 0xFFFFFFFE)
        {
          if (v153 == 3) {
            *(void *)(v160 + 8) = 0;
          }
          goto LABEL_249;
        }
        unint64_t v155 = v158 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v160 + 1) & 0x7F) != 2 && !*(_DWORD *)(v160 + 12)) {
          goto LABEL_249;
        }
        uint64_t v154 = *(void *)(v160 + 16);
        if ((v154 & 4) == 0) {
          goto LABEL_249;
        }
        unint64_t v155 = v154 & 0xFFFFFFFFFFFFFFF8;
        if (!v155) {
          goto LABEL_249;
        }
      }
      unint64_t v181 = (unint64_t)&v160;
      sub_1CC5FA668(v155 + 16, &v181);
    }
LABEL_249:
    int v132 = (unint64_t *)a3[6];
    int v133 = a3[5][5];
    *((void *)v131 + 3) = v133;
    uint64_t v134 = v133[4];
    uint64_t v135 = *((unsigned int *)v131 + 10);
    if (v135)
    {
      uint64_t v140 = *((void *)v131 + 4);
      int v141 = v134[5];
      uint64_t v142 = 32 * v135;
      do
      {
        if (!*(unsigned char *)v140)
        {
          uint64_t v143 = *(unsigned int *)(v140 + 4);
          if ((int)v143 >= 0) {
            int v144 = (uint64_t *)(*((void *)v141 + 34) + 8 * v143);
          }
          else {
            int v144 = (uint64_t *)(*((void *)v141 + 3) + 16 * (v143 & 0x7FFFFFFF) + 8);
          }
          uint64_t v145 = *v144;
          if (*v144)
          {
            uint64_t v146 = *(void *)(v145 + 16);
            *(void *)(v145 + 16) = v140;
            *(void *)(v140 + 16) = v146;
            if (*(unsigned char *)(v140 + 3))
            {
              *(void *)(v140 + 24) = v145;
            }
            else
            {
              *(void *)(v140 + 24) = 0;
              int v144 = (uint64_t *)(v146 + 24);
            }
          }
          else
          {
            *(void *)(v140 + 16) = v140;
            *(void *)(v140 + 24) = 0;
          }
          *int v144 = v140;
        }
        v140 += 32;
        v142 -= 32;
      }
      while (v142);
    }
    uint64_t v136 = v134[91];
    if (v136) {
      (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v136 + 24))(v136, v131);
    }
    unint64_t v137 = *v132 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unsigned int v131 = v137 | *(void *)v131 & 7;
    *((void *)v131 + 1) = v132;
    *(void *)(v137 + 8) = v131;
    *int v132 = *v132 & 7 | (unint64_t)v131;
    uint64_t v138 = a3[7];
    if (v138) {
      ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v138)[3])(v138, v131);
    }
    long long v182 = 0uLL;
    *(void *)&long long v183 = 0;
    LODWORD(v181) = 0x1000000;
    HIDWORD(v181) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v131, v128, (const llvm::MachineOperand *)&v181);
    *(void *)&long long v160 = v128;
    *((void *)&v160 + 1) = v131;
    LODWORD(v181) = 1;
    *(void *)&long long v182 = 0;
    *((void *)&v182 + 1) = v172 & ~(void)v177;
    llvm::MachineInstr::addOperand(v131, v128, (const llvm::MachineOperand *)&v181);
    LODWORD(v181) = 1;
    *(void *)&long long v182 = 0;
    *((void *)&v182 + 1) = v61;
    llvm::MachineInstr::addOperand(v131, v128, (const llvm::MachineOperand *)&v181);
    int v139 = *(_DWORD *)(*(void *)(v51 + 32) + 48);
    LODWORD(v181) = 5;
    *(void *)&long long v182 = 0;
    DWORD2(v182) = v139;
    llvm::MachineInstr::addOperand(v131, v128, (const llvm::MachineOperand *)&v181);
    LODWORD(v181) = 1;
    *(void *)&long long v182 = 0;
    *((void *)&v182 + 1) = v22;
    llvm::MachineInstr::addOperand(v131, v128, (const llvm::MachineOperand *)&v181);
    LODWORD(v181) = 1;
    long long v182 = 0uLL;
    llvm::MachineInstr::addOperand(v131, v128, (const llvm::MachineOperand *)&v181);
    llvm::MachineInstr::addMemOperand(v131, v128, *(llvm::MachineMemOperand **)(a1 + 48));
    sub_1CBA318C8((uint64_t)&v160);
    LODWORD(v187) = *(_DWORD *)(a1 + 16);
    DWORD2(v187) = 1;
    LODWORD(v181) = IncompleteVirtualRegister;
    DWORD2(v182) = 0;
    ((void (*)(llvm::IntegerType *****, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*a3)[4])(a3, 19, &v187, 1, &v181, 1, 0);
    goto LABEL_255;
  }
  sub_1CBB8F944(v9, a2, a3, 0x20u, (uint64_t)&v181);
  long long v160 = v182;
  long long v161 = v183;
  unint64_t v159 = v181;
  uint64_t v162 = v184;
  unint64_t v171 = v61 | ((unint64_t)(DWORD2(v183) != 1) << 11);
  unsigned int v62 = sub_1CBBDF0B0((uint64_t)&v160);
  if ((DWORD1(v160) & 0x80000000) != 0 && (uint64_t v63 = DWORD1(v160) & 0x7FFFFFFF, v63 < *(_DWORD *)(a2 + 432))) {
    int v64 = *(unsigned __int8 **)(*(void *)(a2 + 424) + 8 * v63);
  }
  else {
    int v64 = 0;
  }
  unsigned int v71 = v62;
  uint64_t v165 = v64;
  int v73 = sub_1CB8F1DC4((unint64_t *)&v165);
  if (v72 == 1) {
  if (v60 <= 4)
  }
  {
    if (v60 == 3)
    {
      BOOL v79 = MachineInstr == 0;
      unsigned int v80 = 106;
      unsigned int v81 = 102;
      goto LABEL_184;
    }
    if (!v60)
    {
      int v74 = 0;
      BOOL v75 = MachineInstr == 0;
      unsigned int v76 = 193;
      unsigned int v77 = 100;
LABEL_145:
      if (v75) {
        uint64_t v78 = v77;
      }
      else {
        uint64_t v78 = v76;
      }
      goto LABEL_188;
    }
  }
  else if (v60 == 5 || v60 == 75)
  {
    int v74 = 0;
    BOOL v75 = MachineInstr == 0;
    unsigned int v76 = 192;
    unsigned int v77 = 98;
    goto LABEL_145;
  }
  BOOL v79 = MachineInstr == 0;
  if (v60 == 80)
  {
    unsigned int v80 = 191;
    unsigned int v81 = 104;
  }
  else
  {
    unsigned int v80 = 190;
    unsigned int v81 = 103;
  }
LABEL_184:
  if (v79) {
    uint64_t v78 = v81;
  }
  else {
    uint64_t v78 = v80;
  }
  int v74 = 1;
LABEL_188:
  if ((unsigned __int16)v170 == 2) {
    int v93 = 54;
  }
  else {
    int v93 = 59;
  }
  long long v187 = xmmword_1CDB16670;
  int v94 = 2 * (v73 != 32);
  if (HIWORD(v71)) {
    int v94 = 42;
  }
  *(void *)&long long v187 = __PAIR64__(*((_DWORD *)&v187 + WORD1(v170) - 1), v93);
  DWORD2(v187) = 49;
  HIDWORD(v187) = v94;
  if (v74)
  {
    LODWORD(v188) = 12;
    uint64_t v95 = 5;
  }
  else
  {
    uint64_t v95 = 4;
  }
  unsigned int v96 = sub_1CBE0418C(v78, v95, &v187);
  int v97 = (llvm::MachineFunction *)a3[1];
  uint64_t v98 = (uint64_t)&a3[2][1][6 * v96];
  unsigned int v99 = (unsigned __int8 *)a3[4];
  uint64_t v165 = v99;
  if (v99) {
    llvm::MetadataTracking::track((uint64_t)&v165, v99, 2);
  }
  unint64_t v100 = llvm::MachineFunction::CreateMachineInstr(v97, v98, &v165, 0);
  if (v165)
  {
    int v147 = *v165;
    if ((v147 - 4) > 0x1E)
    {
      if ((v147 - 3) >= 0xFFFFFFFE) {
        unint64_t v156 = v165;
      }
      else {
        unint64_t v156 = 0;
      }
      if ((v147 - 3) < 0xFFFFFFFE)
      {
        if (v147 == 3) {
          *((void *)v165 + 1) = 0;
        }
        goto LABEL_198;
      }
      unint64_t v149 = (unint64_t)(v156 + 8);
    }
    else
    {
      if ((v165[1] & 0x7F) != 2 && !*((_DWORD *)v165 + 3)) {
        goto LABEL_198;
      }
      uint64_t v148 = *((void *)v165 + 2);
      if ((v148 & 4) == 0) {
        goto LABEL_198;
      }
      unint64_t v149 = v148 & 0xFFFFFFFFFFFFFFF8;
      if (!v149) {
        goto LABEL_198;
      }
    }
    *(void *)&long long v187 = &v165;
    sub_1CC5FA668(v149 + 16, &v187);
  }
LABEL_198:
  uint64_t v101 = (unint64_t *)a3[6];
  uint64_t v102 = a3[5][5];
  *((void *)v100 + 3) = v102;
  uint64_t v103 = v102[4];
  uint64_t v104 = *((unsigned int *)v100 + 10);
  if (v104)
  {
    uint64_t v114 = *((void *)v100 + 4);
    int v115 = v103[5];
    uint64_t v116 = 32 * v104;
    do
    {
      if (!*(unsigned char *)v114)
      {
        uint64_t v117 = *(unsigned int *)(v114 + 4);
        if ((int)v117 >= 0) {
          unsigned int v118 = (uint64_t *)(*((void *)v115 + 34) + 8 * v117);
        }
        else {
          unsigned int v118 = (uint64_t *)(*((void *)v115 + 3) + 16 * (v117 & 0x7FFFFFFF) + 8);
        }
        uint64_t v119 = *v118;
        if (*v118)
        {
          uint64_t v120 = *(void *)(v119 + 16);
          *(void *)(v119 + 16) = v114;
          *(void *)(v114 + 16) = v120;
          if (*(unsigned char *)(v114 + 3))
          {
            *(void *)(v114 + 24) = v119;
          }
          else
          {
            *(void *)(v114 + 24) = 0;
            unsigned int v118 = (uint64_t *)(v120 + 24);
          }
        }
        else
        {
          *(void *)(v114 + 16) = v114;
          *(void *)(v114 + 24) = 0;
        }
        *unsigned int v118 = v114;
      }
      v114 += 32;
      v116 -= 32;
    }
    while (v116);
  }
  uint64_t v105 = v103[91];
  if (v105) {
    (*(void (**)(llvm::IntegerType *, llvm::MachineInstr *))(*(void *)v105 + 24))(v105, v100);
  }
  unint64_t v106 = *v101 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v100 = v106 | *(void *)v100 & 7;
  *((void *)v100 + 1) = v101;
  *(void *)(v106 + 8) = v100;
  *uint64_t v101 = *v101 & 7 | (unint64_t)v100;
  uint64_t v107 = a3[7];
  if (v107) {
    ((void (*)(llvm::IntegerType ****, llvm::MachineInstr *))(*v107)[3])(v107, v100);
  }
  uint64_t v165 = (unsigned __int8 *)v97;
  unint64_t v166 = v100;
  unint64_t v108 = *((void *)&v177 + 1) & v171;
  uint64_t v109 = *(void *)(*(void *)(*(void *)a1 + 24) + 32);
  uint64_t v110 = *(void *)(v109 + 48);
  if (!v110)
  {
    uint64_t v110 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v109 + 8) + 216))(*(void *)(v109 + 8), v109 + 128, v109);
    *(void *)(v109 + 48) = v110;
  }
  if (*(unsigned char *)(v110 + 560)) {
    v108 |= 0x10000uLL;
  }
  unint64_t v111 = v177 & v172;
  int v112 = HIDWORD(v170);
  int v113 = *(_DWORD *)(a1 + 16);
  *((void *)&v187 + 1) = 0;
  unint64_t v188 = 0;
  if (HIDWORD(v170))
  {
    LODWORD(v187) = 0;
    DWORD1(v187) = v113;
    uint64_t v189 = 0;
    llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
    v111 |= v173;
  }
  else
  {
    uint64_t v189 = 0;
    LODWORD(v187) = 0x1000000;
    DWORD1(v187) = v113;
    llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
  }
  LODWORD(v187) = 1;
  *((void *)&v187 + 1) = 0;
  unint64_t v188 = v111;
  llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
  LODWORD(v187) = 1;
  *((void *)&v187 + 1) = 0;
  unint64_t v188 = v108;
  llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
  if ((v159 & 0xFF00000000) != 0)
  {
    LODWORD(v187) = 5;
    *((void *)&v187 + 1) = 0;
    LODWORD(v188) = v159;
  }
  else
  {
    LODWORD(v187) = 1;
    *((void *)&v187 + 1) = 0;
    unint64_t v188 = 0;
  }
  llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
  if (v71 < 0x10000)
  {
    *((void *)&v187 + 1) = 0;
    unint64_t v188 = 0;
    LODWORD(v187) = 0;
    DWORD1(v187) = DWORD1(v160);
    uint64_t v189 = 0;
    llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
    LODWORD(v187) = 1;
    *((void *)&v187 + 1) = 0;
    unint64_t v188 = 0;
  }
  else
  {
    LODWORD(v187) = 1;
    *((void *)&v187 + 1) = 0;
    unint64_t v188 = (__int16)v71;
  }
  llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
  LODWORD(v187) = 1;
  *((void *)&v187 + 1) = 0;
  unint64_t v188 = v161;
  llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
  LODWORD(v187) = 1;
  *((void *)&v187 + 1) = 0;
  unint64_t v188 = *((void *)&v160 + 1);
  llvm::MachineInstr::addOperand(v100, v97, (const llvm::MachineOperand *)&v187);
  llvm::MachineInstr::addMemOperand(v100, v97, *(llvm::MachineMemOperand **)(a1 + 48));
  sub_1CBA318C8((uint64_t)&v165);
  if (v112) {
    goto LABEL_257;
  }
LABEL_255:
  if (*(void *)(a1 + 24) == *(void *)(a1 + 32) || (uint64_t result = sub_1CBBDD3E0(a1, a2, (uint64_t)a3), result))
  {
LABEL_257:
    llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)a1);
    return 1;
  }
  return result;
}

uint64_t sub_1CBBDC1A4(uint64_t a1, uint64_t a2, llvm::IntegerType *****a3)
{
  unint64_t v39 = *(void *)(a1 + 32);
  if (!sub_1CBBDD35C(&v39))
  {
    if ((v39 & 0xFFFFFFFFFFFFFFF9) == 0 || (v39 & 4) == 0) {
      return 0;
    }
    char v15 = 3;
    if ((v39 & 1) == 0) {
      char v15 = 19;
    }
    unint64_t v16 = v39 >> v15;
    unint64_t v17 = (v39 & 2) != 0
        ? (v39 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v16) | 2
        : v39 & 0x8000000000000000 | (8 * v16) | 1;
    v30[0] = v17;
    if (!sub_1CBBDD35C(v30)) {
      return 0;
    }
    unsigned int v19 = v39;
    uint64_t v20 = 0x800000000000000;
    if ((v39 & 2) == 0) {
      uint64_t v20 = 0x8000000000000;
    }
    if ((v20 & v39) != 0)
    {
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v18);
      unsigned int v19 = v39;
    }
    if ((unsigned __int16)(v19 >> 3) > 4u) {
      return 0;
    }
  }
  v30[0] = a1;
  v30[1] = a2;
  v30[2] = 0;
  int v31 = -1;
  char v36 = 0;
  char v37 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  long long v38 = xmmword_1CDC6D240;
  sub_1CBB91B20(v30);
  unsigned int v6 = *(_DWORD *)(a1 + 20);
  unint64_t v7 = sub_1CBBDF198(v6, (uint64_t)a3);
  unint64_t v8 = sub_1CBBDF36C(v6, a3);
  if (!HIDWORD(v7))
  {
    if (HIDWORD(v8))
    {
      LODWORD(v7) = v8;
    }
    else
    {
      unint64_t v9 = sub_1CBBAAB48(v6, a2, 0);
      LODWORD(v7) = v6;
      if (HIDWORD(v9))
      {
        uint64_t v26 = 257;
        int v27 = 0;
        unint64_t v10 = v9;
        uint64_t v11 = (llvm::ConstantInt *)llvm::IntegerType::get(***a3[1], (llvm::LLVMContext *)0x20);
        uint64_t v12 = llvm::ConstantInt::get(v11, v10, (const llvm::APInt *)1);
        ((void (*)(llvm::IntegerType *****, uint64_t *, void *))(*a3)[2])(a3, &v26, v12);
        LODWORD(v7) = *(_DWORD *)(*(void *)(v13 + 32) + 4);
      }
    }
  }
  if ((v7 & 0x80000000) != 0) {
    unsigned int v22 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v7 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v22 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v7);
  }
  uint64_t v23 = *v22;
  if ((*(unsigned char *)(v23 + 3) & 1) == 0) {
    uint64_t v23 = *(void *)(v23 + 24);
  }
  uint64_t v24 = *(void *)(v23 + 8);
  v29[0] = 0;
  v29[1] = 0;
  sub_1CBB8C014((llvm::LLVMContext *)0x20, v24, a2, a3, 0, (uint64_t *)0x101, (unsigned int *)&v26);
  v33 |= (unint64_t)(v28 != 1) << 11;
  int v25 = v32;
  if (v32 == 1)
  {
    if (*(void *)(a1 + 24) == *(void *)(a1 + 32) || (uint64_t result = sub_1CBBDD3E0(a1, a2, (uint64_t)a3), result))
    {
      sub_1CBBDE7FC(a1, (uint64_t)v30, (uint64_t)&v26, a3, v29);
LABEL_34:
      llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)a1);
      return 1;
    }
  }
  else
  {
    sub_1CBBDE7FC(a1, (uint64_t)v30, (uint64_t)&v26, a3, v29);
    if (v25) {
      goto LABEL_34;
    }
    if (*(void *)(a1 + 24) == *(void *)(a1 + 32)) {
      goto LABEL_34;
    }
    uint64_t result = sub_1CBBDD3E0(a1, a2, (uint64_t)a3);
    if (result) {
      goto LABEL_34;
    }
  }
  return result;
}

void sub_1CBBDC490(uint64_t a1, unsigned int a2, int a3, llvm::MachineMemOperand *a4, uint64_t a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  unint64_t v10 = **(void ***)a1;
  if (a2 != 1) {
    unint64_t v10 = (void *)sub_1CBA5A95C(a2, (unint64_t)v10);
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 80))
  {
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(unsigned int *)(v11 + 40);
    uint64_t v13 = *(unsigned __int8 **)(v11 + 32);
    if (v12)
    {
      uint64_t v14 = 0;
      char v15 = v13;
      while (1)
      {
        int v16 = *v15;
        v15 += 32;
        if (v16 == 17) {
          break;
        }
        if (v12 == ++v14) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      LODWORD(v14) = -1;
    }
    int v17 = *(_DWORD *)&v13[32 * v14 + 16];
    uint64_t v18 = *(void *)(a1 + 16);
    uint64_t v47 = v10;
    unsigned int v48 = 0;
    unsigned int v19 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)v18 + 32))(v18, 117, &v47, 1, 0, 0, 0);
    uint64_t v21 = v20;
    LODWORD(v51) = 17;
    uint64_t v52 = 0;
    LODWORD(v53) = v17;
    llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v51);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    LODWORD(v51) = 0;
    HIDWORD(v51) = a3;
    uint64_t v54 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v51);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    LODWORD(v51) = 0;
    HIDWORD(v51) = HIDWORD(a5);
    uint64_t v54 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v51);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    LODWORD(v51) = 0;
    HIDWORD(v51) = a5;
    uint64_t v54 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v51);
    int v22 = *(_DWORD *)(*(void *)(a1 + 8) + 64);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    LODWORD(v51) = 0;
    HIDWORD(v51) = v22;
    uint64_t v54 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v51);
    llvm::MachineInstr::addMemOperand(v21, v19, a4);
    uint64_t v23 = *((void *)v21 + 4);
  }
  else
  {
    uint64_t v24 = *(void **)(a1 + 16);
    uint64_t v47 = v10;
    unsigned int v48 = 0;
    LODWORD(v51) = a3;
    LODWORD(v53) = 0;
    sub_1CC737934(v24, 0x5Au, (int *)&v47, (int *)&v51, a4);
    uint64_t v23 = *(void *)(v25 + 32);
  }
  int v26 = *(_DWORD *)(v23 + 4);
  if (a2 == 1)
  {
    uint64_t v27 = *(void *)(a1 + 32);
    unsigned int v28 = *(_DWORD *)(v27 + 8);
    if (v28 >= *(_DWORD *)(v27 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)v27 + 4 * v28) = v26;
    ++*(_DWORD *)(v27 + 8);
    return;
  }
  uint64_t v29 = a2;
  int v30 = *(void ***)a1;
  uint64_t v47 = v50;
  int v49 = 8;
  int v31 = *v30;
  if (a2 >= 9)
  {
    unsigned int v48 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    int v32 = v50;
    uint64_t v33 = a2;
    do
    {
      *v32++ = v31;
      --v33;
    }
    while (v33);
  }
  unsigned int v48 = a2;
  uint64_t v34 = *(void *)(a1 + 16);
  uint64_t v35 = (uint64_t *)v47;
  uint64_t v51 = &v53;
  uint64_t v52 = 0x800000000;
  if (a2)
  {
    uint64_t v36 = 8 * a2;
    char v37 = &v53;
    do
    {
      uint64_t v38 = *v35++;
      *char v37 = v38;
      *((_DWORD *)v37 + 2) = 0;
      v37 += 2;
      v36 -= 8;
    }
    while (v36);
    char v39 = 0;
    int v40 = v52;
    uint64_t v41 = (uint64_t *)v51;
  }
  else
  {
    int v40 = 0;
    char v39 = 1;
    uint64_t v41 = &v53;
  }
  LODWORD(v52) = v40 + a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v34 + 32))(v34, 74, v41);
  uint64_t v43 = v42;
  if (v51 == &v53)
  {
    if (v39) {
      goto LABEL_25;
    }
LABEL_31:
    uint64_t v44 = 4;
    do
    {
      uint64_t v45 = *(void *)(a1 + 32);
      unint64_t v46 = *(unsigned int *)(v45 + 8);
      if (v46 >= *(unsigned int *)(v45 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)v45 + 4 * v46) = *(_DWORD *)(*(void *)(v43 + 32) + v44);
      ++*(_DWORD *)(v45 + 8);
      v44 += 32;
      --v29;
    }
    while (v29);
    goto LABEL_25;
  }
  free(v51);
  if ((v39 & 1) == 0) {
    goto LABEL_31;
  }
LABEL_25:
  if (v47 != v50) {
    free(v47);
  }
}

void sub_1CBBDC8D0(void *a1, int a2, unint64_t a3, unint64_t a4)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  unint64_t v89 = a4;
  unint64_t v8 = sub_1CB8F1DC4(&v89);
  if (v7 == 1) {
  unint64_t v9 = (v8 >> 3);
  }
  if (!(a3 % v9))
  {
    uint64_t v11 = *a1;
    LODWORD(v95) = a2;
    LODWORD(v96) = 1;
    unint64_t v90 = a3;
    int v92 = 3;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, unint64_t *, uint64_t, void))(*(void *)v11 + 32))(v11, 313, &v95, 1, &v90, 1, 0);
    return;
  }
  uint64_t v95 = &v97;
  uint64_t v96 = 0x200000000;
  unint64_t v88 = a3;
  int v83 = a2;
  if (a3)
  {
    uint64_t v12 = a1[1];
    uint64_t v13 = *(void *)a1[2];
    unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v12, "", 0);
    unint64_t v15 = IncompleteVirtualRegister & 0x7FFFFFFF;
    *(void *)(*(void *)(v12 + 24) + 16 * v15) = 4;
    unint64_t v16 = *(unsigned int *)(v12 + 432);
    unsigned int v84 = IncompleteVirtualRegister;
    if (v15 >= v16)
    {
      uint64_t v17 = *(void *)(v12 + 440);
      uint64_t v18 = v15 + 1 - v16;
      if (v15 >= *(unsigned int *)(v12 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v19 = *(_DWORD *)(v12 + 432);
      if (v18)
      {
        uint64_t v20 = (void *)(*(void *)(v12 + 424) + 8 * v16);
        uint64_t v21 = ~v15 + v16;
        do
        {
          *v20++ = v17;
          BOOL v22 = __CFADD__(v21++, 1);
        }
        while (!v22);
        int v19 = *(_DWORD *)(v12 + 432);
      }
      *(_DWORD *)(v12 + 432) = v19 + v18;
    }
    *(void *)(*(void *)(v12 + 424) + 8 * v15) = v13;
    uint64_t v23 = *(void *)(v12 + 8);
    a3 = v88;
    if (v23)
    {
      unsigned int v82 = IncompleteVirtualRegister;
      (*(void (**)(uint64_t, void))(*(void *)v23 + 24))(v23, IncompleteVirtualRegister);
      unsigned int IncompleteVirtualRegister = v82;
    }
    uint64_t v24 = *a1;
    unsigned int v10 = 1;
    LODWORD(v98) = IncompleteVirtualRegister;
    int v99 = 1;
    unint64_t v90 = v88 - 1;
    int v92 = 3;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v24 + 32))(v24, 313, &v98, 1, &v90, 1, 0);
  }
  else
  {
    unsigned int v84 = 0;
    unsigned int v10 = 0;
  }
  uint64_t v25 = a3 + v10 + 2;
  uint64_t v86 = v9 + a3;
  if ((uint64_t)(v9 + a3) >= v25)
  {
    uint64_t v85 = a1;
    do
    {
      uint64_t v27 = a1[1];
      uint64_t v28 = *(void *)a1[2];
      int v29 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v27, "", 0);
      unint64_t v30 = v29 & 0x7FFFFFFF;
      *(void *)(*(void *)(v27 + 24) + 16 * v30) = 4;
      unint64_t v31 = *(unsigned int *)(v27 + 432);
      if (v30 >= v31)
      {
        unint64_t v32 = v30 + 1;
        uint64_t v33 = *(void *)(v27 + 440);
        if (v30 >= *(unsigned int *)(v27 + 436)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v34 = *(_DWORD *)(v27 + 432);
        if (v32 != v31)
        {
          uint64_t v35 = (void *)(*(void *)(v27 + 424) + 8 * *(unsigned int *)(v27 + 432));
          uint64_t v36 = ~v30 + v31;
          do
          {
            *v35++ = v33;
            BOOL v22 = __CFADD__(v36++, 1);
          }
          while (!v22);
          int v34 = *(_DWORD *)(v27 + 432);
        }
        *(_DWORD *)(v27 + 432) = v34 + v32 - v31;
      }
      *(void *)(*(void *)(v27 + 424) + 8 * v30) = v28;
      uint64_t v37 = *(void *)(v27 + 8);
      LOBYTE(a3) = v88;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 24))(v37);
      }
      a1 = v85;
      if (v96 >= (unint64_t)HIDWORD(v96)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v95 + v96) = v29;
      LODWORD(v96) = v96 + 1;
      uint64_t v38 = *v85;
      LODWORD(v98) = v29;
      int v99 = 1;
      unint64_t v90 = v88 + v10;
      int v92 = 3;
      (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v38 + 32))(v38, 313, &v98, 1, &v90, 1, 0);
      v10 += 2;
      uint64_t v25 = (v25 + 2);
    }
    while (v86 >= v25);
  }
  if (a3)
  {
    uint64_t v39 = a1[1];
    uint64_t v40 = *(void *)a1[2];
    unsigned int v87 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v39, "", 0);
    unint64_t v41 = v87 & 0x7FFFFFFF;
    *(void *)(*(void *)(v39 + 24) + 16 * v41) = 4;
    unint64_t v42 = *(unsigned int *)(v39 + 432);
    if (v41 >= v42)
    {
      uint64_t v43 = *(void *)(v39 + 440);
      uint64_t v44 = v41 + 1 - v42;
      if (v41 >= *(unsigned int *)(v39 + 436)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v45 = *(_DWORD *)(v39 + 432);
      if (v44)
      {
        unint64_t v46 = (void *)(*(void *)(v39 + 424) + 8 * *(unsigned int *)(v39 + 432));
        uint64_t v47 = ~v41 + v42;
        do
        {
          *v46++ = v43;
          BOOL v22 = __CFADD__(v47++, 1);
        }
        while (!v22);
        int v45 = *(_DWORD *)(v39 + 432);
      }
      *(_DWORD *)(v39 + 432) = v45 + v44;
    }
    *(void *)(*(void *)(v39 + 424) + 8 * v41) = v40;
    uint64_t v48 = *(void *)(v39 + 8);
    if (v48) {
      (*(void (**)(uint64_t, void))(*(void *)v48 + 24))(v48, v87);
    }
    uint64_t v49 = *a1;
    unsigned int v26 = v87;
    LODWORD(v98) = v87;
    int v99 = 1;
    unint64_t v90 = v88 + v10;
    int v92 = 3;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v49 + 32))(v49, 313, &v98, 1, &v90, 1, 0);
  }
  else
  {
    unsigned int v26 = 0;
  }
  uint64_t v50 = (llvm::IntegerType *****)*a1;
  unint64_t v51 = *(void *)a1[2];
  unint64_t v98 = v51;
  int v99 = 0;
  uint64_t v52 = (llvm::LLVMContext *)(unsigned __int16)(v51 >> 3);
  uint64_t v53 = (llvm::LLVMContext *)(unsigned __int16)(v51 >> 19);
  if ((v51 & 2) == 0) {
    uint64_t v53 = (llvm::LLVMContext *)(v51 >> 19);
  }
  if ((v51 & 4) != 0) {
    uint64_t v52 = v53;
  }
  if (v51) {
    uint64_t v54 = (llvm::LLVMContext *)(v51 >> 3);
  }
  else {
    uint64_t v54 = v52;
  }
  uint64_t v55 = llvm::IntegerType::get(***v50[1], v54);
  int v57 = *(llvm::ConstantInt **)v55;
  unsigned int v58 = *(_DWORD *)(v55 + 8);
  unsigned int v91 = v58 >> 8;
  if (v58 >> 8 > 0x40) {
    operator new[]();
  }
  if (v58 <= 0xFF) {
    LOBYTE(v59) = 0;
  }
  else {
    unint64_t v59 = 0xFFFFFFFFFFFFFFFFLL >> ~(BYTE1(v58) + 63);
  }
  unint64_t v90 = v59 & 8;
  int v60 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v90, v56);
  if (v91 >= 0x41 && v90) {
    MEMORY[0x1D25D9CB0](v90, 0x1000C8000313F17);
  }
  ((void (*)(llvm::IntegerType *****, unint64_t *, void *))(*v50)[2])(v50, &v98, v60);
  if (v84)
  {
    int v62 = *(_DWORD *)(*(void *)(v61 + 32) + 4);
    uint64_t v63 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v84;
    int v92 = 0;
    int v93 = v62;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v63 + 32))(v63, 128, &v98, 1, &v90, 2, 0);
    int v65 = *(_DWORD *)(*(void *)(v64 + 32) + 4);
    uint64_t v66 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v26;
    int v92 = 0;
    int v93 = v62;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v66 + 32))(v66, 127, &v98, 1, &v90, 2, 0);
    int v68 = *(_DWORD *)(*(void *)(v67 + 32) + 4);
    if (!v96) {
      goto LABEL_65;
    }
    int v69 = *(_DWORD *)v95;
    uint64_t v70 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v69;
    int v92 = 0;
    int v93 = v62;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v70 + 32))(v70, 127, &v98, 1, &v90, 2, 0);
    int v72 = *(_DWORD *)(*(void *)(v71 + 32) + 4);
    uint64_t v73 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v72;
    int v92 = 0;
    int v93 = v65;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v73 + 32))(v73, 66, &v98, 1, &v90, 2, 0);
    int v65 = *(_DWORD *)(*(void *)(v74 + 32) + 4);
    uint64_t v75 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v69;
    int v92 = 0;
    int v93 = v62;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v75 + 32))(v75, 128, &v98, 1, &v90, 2, 0);
    int v77 = *(_DWORD *)(*(void *)(v76 + 32) + 4);
    uint64_t v78 = *a1;
    unint64_t v98 = *(void *)a1[2];
    int v99 = 0;
    LODWORD(v90) = v77;
    int v92 = 0;
    int v93 = v68;
    int v94 = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)v78 + 32))(v78, 66, &v98, 1, &v90, 2, 0);
    unsigned int v80 = *(_DWORD **)(v79 + 32);
  }
  else
  {
    unsigned int v80 = v95;
    int v65 = *(_DWORD *)v95;
  }
  int v68 = v80[1];
LABEL_65:
  uint64_t v81 = *a1;
  LODWORD(v98) = v83;
  int v99 = 1;
  LODWORD(v90) = v65;
  int v92 = 0;
  int v93 = v68;
  int v94 = 0;
  (*(void (**)(void))(*(void *)v81 + 32))();
  if (v95 != &v97) {
    free(v95);
  }
}

BOOL sub_1CBBDD35C(unint64_t *a1)
{
  uint64_t v2 = sub_1CB8F1DC4(a1);
  if ((*(unsigned char *)a1 & 1) == 0) {
    return 0;
  }
  if (v3 == 1)
  {
    uint64_t v5 = v2;
    if (v5 == 16) {
      return 1;
    }
    uint64_t v2 = v5;
  }
  else if (v2 == 16)
  {
    return 1;
  }
  return v2 == 32;
}

uint64_t sub_1CBBDD3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a1 + 12);
  unsigned int v6 = *(_DWORD *)(a1 + 8) - 1;
  int v7 = *(_DWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v147 = *(void *)(a1 + 32);
  uint64_t v148 = v8;
  if (v6 >= 3) {
    int v9 = v5;
  }
  else {
    int v9 = v7;
  }
  if (v6 >= 3) {
    int v10 = v7;
  }
  else {
    int v10 = v5;
  }
  if (v6 >= 3) {
    uint64_t v11 = (unint64_t *)&v148;
  }
  else {
    uint64_t v11 = (unint64_t *)&v147;
  }
  if (v6 >= 3) {
    uint64_t v12 = (unint64_t *)&v147;
  }
  else {
    uint64_t v12 = (unint64_t *)&v148;
  }
  unint64_t v13 = *v11;
  if (*v11 == 9 || v13 == 65)
  {
    if (*v12 == 129)
    {
      uint64_t v14 = 1;
      LODWORD(v152[0]) = v10;
      LODWORD(v152[1]) = 1;
      LODWORD(v157) = v9;
      LODWORD(v159) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 118, v152, 1, &v157, 1, 0);
      return v14;
    }
LABEL_23:
    int v145 = v10;
    uint64_t v20 = sub_1CB8F1DC4(v11);
    int v22 = v21;
    uint64_t v23 = sub_1CB8F1DC4(v12);
    unint64_t v25 = *v11;
    if (v20 == v23 && v22 == v24)
    {
      unint64_t v36 = *v12;
      if ((v25 & 0xFFFFFFFFFFFFFFF9) != 0 && (*v11 & 6) == 2 && v36 == 16777236)
      {
        v152[0] = (void *)513;
        LODWORD(v152[1]) = 0;
        LODWORD(v157) = v9;
        LODWORD(v159) = 0;
        uint64_t v14 = 1;
        unint64_t v51 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 80, v152, 1, &v157, 1, 0);
        LODWORD(v152[0]) = v145;
        LODWORD(v152[1]) = 1;
        unint64_t v157 = v51;
        uint64_t v158 = v52;
        LODWORD(v159) = 1;
        sub_1CC7382B0(a3);
        return v14;
      }
      if (v25 == 16777236 && (v36 & 0xFFFFFFFFFFFFFFF9) != 0 && (*v12 & 6) == 2)
      {
        v152[0] = (void *)513;
        LODWORD(v152[1]) = 0;
        LODWORD(v157) = v9;
        LODWORD(v159) = 0;
        uint64_t v53 = (void *)sub_1CC7382B0(a3);
        uint64_t v14 = 1;
        LODWORD(v152[0]) = v145;
        LODWORD(v152[1]) = 1;
        unint64_t v157 = v53;
        uint64_t v158 = v54;
        LODWORD(v159) = 1;
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 81, v152, 1, &v157, 1, 0);
        return v14;
      }
      uint64_t v14 = 1;
      LODWORD(v152[0]) = v145;
      goto LABEL_76;
    }
    unint64_t v27 = *v12;
    BOOL v28 = v25 == 16777244 && v27 == 16777252;
    if (v28 || (v25 == 8388636 ? (BOOL v29 = v27 == 8388644) : (BOOL v29 = 0), v29))
    {
      uint64_t v41 = 0;
      uint64_t v154 = v156;
      uint64_t v155 = 0x400000000;
      char v42 = 3;
      if ((v25 & 1) == 0) {
        char v42 = 19;
      }
      uint64_t v43 = (void *)(v25 & 0x8000000000000000 | (8 * (v25 >> v42)) | 1);
      unint64_t v44 = (unsigned __int16)(v25 >> 3);
      HIDWORD(v152[1]) = 4;
      v152[0] = v153;
      do
        v152[v41++ + 2] = v43;
      while (v44 != v41);
      LODWORD(v152[1]) = (unsigned __int16)(v25 >> 3);
      int v45 = (uint64_t *)v152[0];
      LODWORD(v149) = v9;
      v151[0] = 0;
      unint64_t v157 = &v159;
      uint64_t v158 = 0x800000000;
      if (v44 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((unsigned __int16)(v25 >> 3))
      {
        uint64_t v46 = 8 * v44;
        uint64_t v47 = &v159;
        do
        {
          uint64_t v48 = *v45++;
          *uint64_t v47 = v48;
          *((_DWORD *)v47 + 2) = 0;
          v47 += 2;
          v46 -= 8;
        }
        while (v46);
        int v49 = v158;
        uint64_t v50 = (uint64_t *)v157;
      }
      else
      {
        int v49 = 0;
        uint64_t v50 = &v159;
      }
      LODWORD(v158) = v49 + v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a3 + 32))(a3, 74, v50);
      uint64_t v56 = v55;
      if (v157 != &v159) {
        free(v157);
      }
      unint64_t v57 = 0;
      for (uint64_t i = 4; ; i += 32)
      {
        unint64_t v59 = *v11;
        if ((*v11 & 2) != 0) {
          uint64_t v60 = 0x800000000000000;
        }
        else {
          uint64_t v60 = 0x8000000000000;
        }
        if ((v60 & v59) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v55);
          unint64_t v59 = *v11;
        }
        if (v57 >= (unsigned __int16)(v59 >> 3)) {
          break;
        }
        if (v155 >= (unint64_t)HIDWORD(v155)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v154 + v155) = *(_DWORD *)(*((void *)v56 + 4) + i);
        LODWORD(v155) = v155 + 1;
        ++v57;
      }
      unint64_t v157 = v43;
      LODWORD(v158) = 0;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 68, &v157, 1, 0, 0, 0);
      if (v155 >= HIDWORD(v155)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v154 + v155) = *(_DWORD *)(*(void *)(v61 + 32) + 4);
      uint64_t v62 = (v155 + 1);
      LODWORD(v155) = v62;
      LODWORD(v149) = v145;
      LODWORD(v150) = 1;
      uint64_t v63 = (int *)v154;
      unint64_t v157 = &v159;
      uint64_t v158 = 0x800000000;
      if (v62 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v62)
      {
        uint64_t v64 = 0;
        uint64_t v65 = 4 * v62;
        do
        {
          int v66 = *v63++;
          uint64_t v67 = (_DWORD *)((char *)&v159 + v64);
          *uint64_t v67 = v66;
          v67[4] = 0;
          v64 += 24;
          v65 -= 4;
        }
        while (v65);
        int v68 = v158;
      }
      else
      {
        int v68 = 0;
      }
      LODWORD(v158) = v68 + v62;
      (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *))(*(void *)a3 + 32))(a3, 77, &v149, 1, &v159);
      if (v157 != &v159) {
        free(v157);
      }
      if (v152[0] != v153) {
        free(v152[0]);
      }
      uint64_t v79 = v154;
      if (v154 == v156) {
        return 1;
      }
    }
    else
    {
      if ((v25 != 16777252 || v27 != 16777244) && (v25 != 8388644 || v27 != 8388636))
      {
        uint64_t v14 = 0;
        if ((v25 & 0xFFFFFFFFFFFFFFF9) == 0) {
          return v14;
        }
        if ((v25 & 4) == 0) {
          return v14;
        }
        uint64_t v14 = 0;
        if ((v27 & 0xFFFFFFFFFFFFFFF9) == 0 || (v27 & 4) == 0) {
          return v14;
        }
        if ((v25 & 2) != 0) {
          uint64_t v32 = 0x800000000000000;
        }
        else {
          uint64_t v32 = 0x8000000000000;
        }
        if ((v32 & v25) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
          unint64_t v25 = *v11;
          unint64_t v27 = *v12;
        }
        if ((v27 & 2) != 0) {
          uint64_t v33 = 0x800000000000000;
        }
        else {
          uint64_t v33 = 0x8000000000000;
        }
        if ((v33 & v27) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
          unint64_t v27 = *v12;
        }
        if ((unsigned __int16)(v25 >> 3) != (unsigned __int16)(v27 >> 3))
        {
          unint64_t v34 = *v11;
          if (*v11)
          {
            unint64_t v35 = (v34 >> 3);
          }
          else if ((v34 & 4) != 0)
          {
            unint64_t v35 = (v34 & 2) != 0 ? (unsigned __int16)(v34 >> 19) : (v34 >> 19);
          }
          else
          {
            unint64_t v35 = (unsigned __int16)(v34 >> 3);
          }
          if (v27)
          {
            unint64_t v96 = (v27 >> 3);
          }
          else if ((v27 & 4) != 0)
          {
            unint64_t v96 = (v27 & 2) != 0 ? (unsigned __int16)(v27 >> 19) : (v27 >> 19);
          }
          else
          {
            unint64_t v96 = (unsigned __int16)(v27 >> 3);
          }
          if ((v35 != 8) == (v96 == 8))
          {
            uint64_t v97 = 0x800000000000000;
            if ((v34 & 2) == 0) {
              uint64_t v97 = 0x8000000000000;
            }
            if ((v97 & v34) != 0)
            {
              llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
              unint64_t v34 = *v11;
            }
            if ((unsigned __int16)(v34 >> 3) <= 4u)
            {
              unint64_t v98 = *v12;
              uint64_t v99 = 0x800000000000000;
              if ((*v12 & 2) == 0) {
                uint64_t v99 = 0x8000000000000;
              }
              if ((v99 & v98) != 0)
              {
                llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
                unint64_t v98 = *v12;
              }
              if ((unsigned __int16)(v98 >> 3) <= 4u)
              {
                unint64_t v100 = *v11;
                if ((*v11 & 2) == 0)
                {
                  char v101 = 3;
                  if ((v100 & 1) == 0) {
                    char v101 = 19;
                  }
                  unint64_t v102 = v100 & 0x8000000000000000 | (8 * (v100 >> v101));
                  if ((v98 & 2) != 0 || v102 != 128)
                  {
                    uint64_t v14 = 0;
                    if ((v98 & 2) != 0 || v102 != 64) {
                      return v14;
                    }
                    char v116 = 3;
                    if ((v98 & 1) == 0) {
                      char v116 = 19;
                    }
                    if ((v98 & 0x8000000000000000 | (8 * (v98 >> v116))) == 0x80)
                    {
                      if ((v100 & 0x8000000000000) != 0)
                      {
                        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
                        unint64_t v100 = *v11;
                      }
                      if ((v100 & 0x7FFF8) == 0x18)
                      {
                        uint64_t v117 = 0;
                        *(int64x2_t *)unint64_t v152 = vdupq_n_s64(0x41uLL);
                        v153[0] = 65;
                        LODWORD(v154) = v9;
                        v156[0] = 0;
                        unint64_t v157 = &v159;
                        uint64_t v158 = 0x800000000;
                        uint64_t v118 = 16;
                        do
                        {
                          uint64_t v119 = (char *)&v157 + v118;
                          *(void *)uint64_t v119 = v152[v117];
                          *((_DWORD *)v119 + 2) = 0;
                          v118 += 16;
                          ++v117;
                        }
                        while (v117 != 3);
                        LODWORD(v158) = v158 + 3;
                        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a3 + 32))(a3, 74, v157);
                        uint64_t v121 = v120;
                        if (v157 != &v159) {
                          free(v157);
                        }
                        unint64_t v157 = (void *)65;
                        LODWORD(v158) = 0;
                        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void, void, void))(*(void *)a3 + 32))(a3, 68, &v157, 1, 0, 0, 0);
                        unsigned int v123 = 0;
                        v152[0] = v153;
                        v152[1] = (void *)0x400000000;
                        for (uint64_t j = 4; j != 100; j += 32)
                        {
                          if (v123 >= HIDWORD(v152[1])) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((_DWORD *)v152[0] + v123) = *(_DWORD *)(*(void *)(v121 + 32) + j);
                          unsigned int v123 = ++LODWORD(v152[1]);
                        }
                        if (v123 >= HIDWORD(v152[1])) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((_DWORD *)v152[0] + v123) = *(_DWORD *)(*(void *)(v122 + 32) + 4);
                        ++LODWORD(v152[1]);
                        unint64_t v125 = sub_1CBA5A95C(4, 0x41uLL);
                        unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a2, "", 0);
                        unint64_t v127 = IncompleteVirtualRegister & 0x7FFFFFFF;
                        *(void *)(*(void *)(a2 + 24) + 16 * v127) = 4;
                        unint64_t v128 = *(unsigned int *)(a2 + 432);
                        if (v127 >= v128)
                        {
                          uint64_t v129 = *(void *)(a2 + 440);
                          uint64_t v130 = v127 + 1 - v128;
                          if (v127 >= *(unsigned int *)(a2 + 436)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          int v131 = *(_DWORD *)(a2 + 432);
                          if (v130)
                          {
                            int v132 = (void *)(*(void *)(a2 + 424) + 8 * *(unsigned int *)(a2 + 432));
                            uint64_t v133 = ~v127 + v128;
                            do
                              *v132++ = v129;
                            while (!__CFADD__(v133++, 1));
                            int v131 = *(_DWORD *)(a2 + 432);
                          }
                          *(_DWORD *)(a2 + 432) = v131 + v130;
                        }
                        *(void *)(*(void *)(a2 + 424) + 8 * v127) = v125;
                        uint64_t v135 = *(void *)(a2 + 8);
                        if (v135) {
                          (*(void (**)(uint64_t, void))(*(void *)v135 + 24))(v135, IncompleteVirtualRegister);
                        }
                        LODWORD(v154) = IncompleteVirtualRegister;
                        LODWORD(v155) = 1;
                        uint64_t v136 = (int *)v152[0];
                        int v137 = (int)v152[1];
                        unint64_t v157 = &v159;
                        uint64_t v158 = 0x800000000;
                        if (LODWORD(v152[1]) >= 9) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        if (LODWORD(v152[1]))
                        {
                          uint64_t v138 = 0;
                          uint64_t v139 = 4 * LODWORD(v152[1]);
                          do
                          {
                            int v140 = *v136++;
                            int v141 = (_DWORD *)((char *)&v159 + v138);
                            *int v141 = v140;
                            v141[4] = 0;
                            v138 += 24;
                            v139 -= 4;
                          }
                          while (v139);
                          int v142 = v158;
                        }
                        else
                        {
                          int v142 = 0;
                        }
                        LODWORD(v158) = v142 + v137;
                        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *))(*(void *)a3 + 32))(a3, 77, &v154, 1, &v159);
                        uint64_t v144 = v143;
                        if (v157 != &v159) {
                          free(v157);
                        }
                        int v9 = *(_DWORD *)(*(void *)(v144 + 32) + 4);
                        if (v152[0] != v153) {
                          free(v152[0]);
                        }
                      }
                      uint64_t v14 = 1;
                      LODWORD(v152[0]) = v145;
                      goto LABEL_76;
                    }
                  }
                  else
                  {
                    char v103 = 3;
                    if ((v98 & 1) == 0) {
                      char v103 = 19;
                    }
                    if ((v98 & 0x8000000000000000 | (8 * (v98 >> v103))) == 0x40)
                    {
                      if ((v98 & 0x8000000000000) != 0)
                      {
                        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v24);
                        unint64_t v98 = *v12;
                      }
                      if ((v98 & 0x7FFF8) == 0x18)
                      {
                        LODWORD(v152[0]) = v9;
                        LODWORD(v153[0]) = 0;
                        unint64_t v157 = &v159;
                        uint64_t v159 = 129;
                        int v160 = 0;
                        uint64_t v161 = 129;
                        int v162 = 0;
                        uint64_t v158 = 0x800000002;
                        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 74, &v159, 2, v152, 1, 0);
                        uint64_t v105 = v104;
                        if (v157 != &v159) {
                          free(v157);
                        }
                        v152[0] = (void *)4194324;
                        LODWORD(v152[1]) = 0;
                        LODWORD(v157) = *(_DWORD *)(*(void *)(v105 + 32) + 4);
                        LODWORD(v159) = 0;
                        sub_1CC7382B0(a3);
                        LODWORD(v152[0]) = *(_DWORD *)(*(void *)(v106 + 32) + 4);
                        LODWORD(v153[0]) = 0;
                        unint64_t v157 = &v159;
                        uint64_t v159 = 65;
                        int v160 = 0;
                        uint64_t v161 = 65;
                        int v162 = 0;
                        uint64_t v158 = 0x800000002;
                        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 74, &v159, 2, v152, 1, 0);
                        uint64_t v108 = v107;
                        if (v157 != &v159) {
                          free(v157);
                        }
                        uint64_t v154 = (void *)129;
                        LODWORD(v155) = 0;
                        LODWORD(v152[0]) = *(_DWORD *)(*(void *)(v105 + 32) + 36);
                        LODWORD(v153[0]) = 0;
                        uint64_t v109 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 259, &v154, 1, v152, 1, 0);
                        unint64_t v111 = v110;
                        LODWORD(v157) = 1;
                        uint64_t v158 = 0;
                        uint64_t v159 = 8;
                        llvm::MachineInstr::addOperand(v110, v109, (const llvm::MachineOperand *)&v157);
                        v152[0] = (void *)65;
                        LODWORD(v152[1]) = 0;
                        LODWORD(v157) = *(_DWORD *)(*((void *)v111 + 4) + 4);
                        LODWORD(v159) = 0;
                        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, v152, 1, &v157, 1, 0);
                        uint64_t v112 = 0;
                        LODWORD(v152[0]) = v145;
                        LODWORD(v152[1]) = 1;
                        uint64_t v154 = (void *)__PAIR64__(*(_DWORD *)(*(void *)(v108 + 32) + 36), *(_DWORD *)(*(void *)(v108 + 32) + 4));
                        LODWORD(v155) = *(_DWORD *)(*(void *)(v113 + 32) + 4);
                        unint64_t v157 = &v159;
                        uint64_t v158 = 0x800000000;
                        uint64_t v114 = 16;
                        do
                        {
                          int v115 = (_DWORD *)((char *)&v157 + v114);
                          *int v115 = *(_DWORD *)((char *)&v154 + v112);
                          v115[4] = 0;
                          v114 += 24;
                          v112 += 4;
                        }
                        while (v112 != 12);
                        LODWORD(v158) = v158 + 3;
                        (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t *))(*(void *)a3 + 32))(a3, 77, v152, 1, &v159);
                        uint64_t v79 = v157;
                        if (v157 == &v159) {
                          return 1;
                        }
                        goto LABEL_123;
                      }
                      uint64_t v14 = 1;
                      LODWORD(v152[0]) = v145;
LABEL_76:
                      LODWORD(v152[1]) = 1;
                      LODWORD(v157) = v9;
                      LODWORD(v159) = 0;
                      sub_1CC7382B0(a3);
                      return v14;
                    }
                  }
                }
              }
            }
          }
        }
        return 0;
      }
      uint64_t v69 = 0;
      uint64_t v154 = v156;
      uint64_t v155 = 0x400000000;
      unint64_t v149 = v151;
      uint64_t v150 = 0x300000000;
      char v70 = 3;
      if ((v25 & 1) == 0) {
        char v70 = 19;
      }
      uint64_t v71 = (void *)(v25 & 0x8000000000000000 | (8 * (v25 >> v70)) | 1);
      unint64_t v72 = (unsigned __int16)(v25 >> 3);
      HIDWORD(v152[1]) = 4;
      v152[0] = v153;
      do
        v152[v69++ + 2] = v71;
      while (v72 != v69);
      LODWORD(v152[1]) = (unsigned __int16)(v25 >> 3);
      uint64_t v73 = (uint64_t *)v152[0];
      v146[0] = v9;
      v146[4] = 0;
      unint64_t v157 = &v159;
      uint64_t v158 = 0x800000000;
      if (v72 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((unsigned __int16)(v25 >> 3))
      {
        uint64_t v74 = 8 * v72;
        uint64_t v75 = &v159;
        do
        {
          uint64_t v76 = *v73++;
          *uint64_t v75 = v76;
          *((_DWORD *)v75 + 2) = 0;
          v75 += 2;
          v74 -= 8;
        }
        while (v74);
        int v77 = v158;
        uint64_t v78 = (uint64_t *)v157;
      }
      else
      {
        int v77 = 0;
        uint64_t v78 = &v159;
      }
      LODWORD(v158) = v77 + v72;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a3 + 32))(a3, 74, v78);
      unsigned int v82 = v81;
      if (v157 != &v159) {
        free(v157);
      }
      unint64_t v83 = 0;
      for (uint64_t k = 4; ; k += 32)
      {
        unint64_t v85 = *v11;
        if ((*v11 & 2) != 0) {
          uint64_t v86 = 0x800000000000000;
        }
        else {
          uint64_t v86 = 0x8000000000000;
        }
        if ((v86 & v85) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v81);
          unint64_t v85 = *v11;
        }
        if (v83 >= (unsigned __int16)(v85 >> 3)) {
          break;
        }
        unint64_t v87 = *v12;
        if ((*v12 & 2) != 0) {
          uint64_t v88 = 0x800000000000000;
        }
        else {
          uint64_t v88 = 0x8000000000000;
        }
        if ((v88 & v87) != 0)
        {
          llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v81);
          unint64_t v87 = *v12;
        }
        if (v83 < (unsigned __int16)(v87 >> 3))
        {
          if (v150 >= (unint64_t)HIDWORD(v150)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v149 + v150) = *(_DWORD *)(*((void *)v82 + 4) + k);
          LODWORD(v150) = v150 + 1;
        }
        ++v83;
      }
      v146[0] = v145;
      _DWORD v146[2] = 1;
      unint64_t v89 = (int *)v149;
      int v90 = v150;
      unint64_t v157 = &v159;
      uint64_t v158 = 0x800000000;
      if (v150 >= 9) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v150)
      {
        uint64_t v91 = 0;
        uint64_t v92 = 4 * v150;
        do
        {
          int v93 = *v89++;
          int v94 = (_DWORD *)((char *)&v159 + v91);
          *int v94 = v93;
          v94[4] = 0;
          v91 += 24;
          v92 -= 4;
        }
        while (v92);
        int v95 = v158;
      }
      else
      {
        int v95 = 0;
      }
      LODWORD(v158) = v95 + v90;
      (*(void (**)(uint64_t, uint64_t, _DWORD *, uint64_t, uint64_t *))(*(void *)a3 + 32))(a3, 77, v146, 1, &v159);
      if (v157 != &v159) {
        free(v157);
      }
      if (v152[0] != v153) {
        free(v152[0]);
      }
      if (v149 != v151) {
        free(v149);
      }
      uint64_t v79 = v154;
      if (v154 == v156) {
        return 1;
      }
    }
LABEL_123:
    free(v79);
    return 1;
  }
  if (v13 != 129) {
    goto LABEL_23;
  }
  if (*v12 == 9)
  {
    uint64_t v14 = 1;
    LODWORD(v152[0]) = v10;
    LODWORD(v152[1]) = 1;
    LODWORD(v157) = v9;
    LODWORD(v159) = 0;
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, v152, 1, &v157, 1, 0);
    return v14;
  }
  if (*v12 != 65) {
    goto LABEL_23;
  }
  v152[0] = (void *)129;
  LODWORD(v152[1]) = 0;
  LODWORD(v157) = v9;
  LODWORD(v159) = 0;
  uint64_t v14 = 1;
  unint64_t v15 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 259, v152, 1, &v157, 1, 0);
  uint64_t v17 = v16;
  uint64_t v19 = sub_1CB8F1DC4(v12);
  if (v18 == 1) {
  LODWORD(v157) = 1;
  }
  uint64_t v158 = 0;
  uint64_t v159 = v19;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v157);
  LODWORD(v152[0]) = v10;
  LODWORD(v152[1]) = 1;
  unint64_t v157 = v15;
  uint64_t v158 = (uint64_t)v17;
  LODWORD(v159) = 1;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void **, uint64_t, void))(*(void *)a3 + 32))(a3, 119, v152, 1, &v157, 1, 0);
  return v14;
}

uint64_t sub_1CBBDE7FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, llvm::MachineFunction **a5)
{
  uint64_t v117 = *MEMORY[0x1E4F143B8];
  sub_1CC73C44C(*(_DWORD *)a3, *(void *)(a3 + 32), 1, (uint64_t)&v114);
  if (!(_BYTE)v116) {
    goto LABEL_2;
  }
  if (DWORD2(v114) > 0x40)
  {
    int v103 = 0;
    int64_t v104 = ((unint64_t)DWORD2(v114) + 63) >> 6;
    do
    {
      if (v104-- < 1) {
        break;
      }
      unint64_t v106 = *(void *)(v114 + 8 * v104);
      v103 += __clz(v106);
    }
    while (!v106);
    unsigned int v107 = DWORD2(v114) | 0xFFFFFFC0;
    if ((BYTE8(v114) & 0x3F) == 0) {
      unsigned int v107 = 0;
    }
    if (DWORD2(v114) - v103 - v107 <= 0x40)
    {
      uint64_t v108 = *(void *)v114;
      BOOL v86 = *(void *)v114 < 0x100uLL;
      if (*(void *)v114 >= 0x100uLL) {
        LOBYTE(v108) = 0;
      }
      unsigned __int8 v110 = v108;
    }
    else
    {
      if (!(void)v114)
      {
LABEL_2:
        unsigned __int8 v110 = 0;
LABEL_3:
        BOOL v112 = 0;
        goto LABEL_4;
      }
      unsigned __int8 v110 = 0;
      BOOL v86 = 0;
    }
    MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
  }
  else
  {
    unsigned __int8 v85 = v114;
    BOOL v86 = (unint64_t)v114 < 0x100;
    if ((unint64_t)v114 >= 0x100) {
      unsigned __int8 v85 = 0;
    }
    unsigned __int8 v110 = v85;
  }
  if (!v86) {
    goto LABEL_3;
  }
  BOOL v112 = 0;
  unint64_t v87 = *(void *)(a1 + 40);
  char v88 = 35;
  if ((v87 & 4) == 0) {
    char v88 = 19;
  }
  unint64_t v89 = v87 >> v88;
  int v90 = v89 & 0xFFFFFF;
  BOOL v91 = (v89 & 0xFFFFFF) > 0xA || ((1 << v89) & 0x446) == 0;
  if (v91 && v90 != 65 && v90 != 71) {
    BOOL v112 = (v89 & 0xFFFFFF) != 80;
  }
LABEL_4:
  unsigned int v10 = sub_1CBBDF0B0(a3);
  if (*(unsigned char *)(a1 + 80))
  {
    sub_1CC73C210(*(_DWORD *)(a1 + 60), *(void *)(a4[1] + 40), (uint64_t)&v114);
    if ((_BYTE)v115)
    {
      if (DWORD2(v114) > 0x40)
      {
        if ((void)v114) {
          MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
        }
        unint64_t v13 = 0;
        uint64_t v14 = 0;
        uint64_t v11 = 0;
      }
      else
      {
        unint64_t v13 = ((uint64_t)((void)v114 << -BYTE8(v114)) >> -BYTE8(v114)) & 0xFFFFFFFFFFFFFF00;
        uint64_t v14 = ((uint64_t)((void)v114 << -BYTE8(v114)) >> -BYTE8(v114));
        uint64_t v11 = 1;
      }
      uint64_t v12 = v14 | v13;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
    BOOL v23 = v11 == 0;
    BOOL v15 = v11 != 0;
    if (v23) {
      uint64_t v12 = 0;
    }
    if (v12 < 0) {
      BOOL v15 = 0;
    }
    uint64_t v109 = v12;
    if (v12 >= 256) {
      BOOL v15 = 0;
    }
    BOOL v111 = v15;
  }
  else
  {
    uint64_t v109 = 0;
    BOOL v111 = 0;
  }
  if (sub_1CBBDF0B0(a3) >> 16)
  {
    int v21 = 16;
  }
  else
  {
    int v16 = *(_DWORD *)(a3 + 4);
    if (v16 < 0 && (uint64_t v17 = *(void *)(a3 + 32), v18 = v16 & 0x7FFFFFFF, v18 < *(_DWORD *)(v17 + 432))) {
      uint64_t v19 = *(void *)(*(void *)(v17 + 424) + 8 * v18);
    }
    else {
      uint64_t v19 = 0;
    }
    *(void *)&long long v114 = v19;
    int v21 = sub_1CB8F1DC4((unint64_t *)&v114);
    if (v20 == 1) {
  }
    }
  int v22 = *(_DWORD *)(a2 + 56);
  if (v22 > 4)
  {
    if (v22 == 5 || v22 == 75)
    {
      int v22 = 0;
      BOOL v23 = *(_DWORD *)(a2 + 28) == 0;
      unsigned int v24 = 192;
      unsigned int v25 = 98;
      goto LABEL_30;
    }
LABEL_39:
    int v27 = *(_DWORD *)(a2 + 28);
    if (v27) {
      unsigned int v28 = 190;
    }
    else {
      unsigned int v28 = 103;
    }
    if (v27) {
      unsigned int v29 = 191;
    }
    else {
      unsigned int v29 = 104;
    }
    BOOL v23 = v22 == 80;
    int v22 = 1;
    if (v23) {
      uint64_t v26 = v29;
    }
    else {
      uint64_t v26 = v28;
    }
    goto LABEL_48;
  }
  if (v22 != 3)
  {
    if (!v22)
    {
      BOOL v23 = *(_DWORD *)(a2 + 28) == 0;
      unsigned int v24 = 193;
      unsigned int v25 = 100;
LABEL_30:
      if (v23) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = v24;
      }
      goto LABEL_48;
    }
    goto LABEL_39;
  }
  if (*(_DWORD *)(a2 + 28)) {
    uint64_t v26 = 106;
  }
  else {
    uint64_t v26 = 102;
  }
  int v22 = 1;
LABEL_48:
  int v30 = *(unsigned __int8 *)(*(void *)a2 + 80);
  if (*(_WORD *)(a2 + 24) == 2) {
    int v31 = 54;
  }
  else {
    int v31 = 59;
  }
  long long v114 = xmmword_1CDB16670;
  unsigned int v32 = *((_DWORD *)&v114 + *(unsigned __int16 *)(a2 + 26) - 1);
  if (v112) {
    int v33 = 49;
  }
  else {
    int v33 = 41;
  }
  int v34 = 2 * (v21 != 32);
  if (HIWORD(v10)) {
    int v34 = 42;
  }
  if (v22)
  {
    if (v111) {
      int v35 = 61;
    }
    else {
      int v35 = 62;
    }
    *(void *)&long long v114 = __PAIR64__(v32, v31);
    if (v30) {
      int v36 = v35;
    }
    else {
      int v36 = 12;
    }
    *((void *)&v114 + 1) = __PAIR64__(v34, v33);
    LODWORD(v115) = v36;
    uint64_t v37 = 5;
  }
  else
  {
    *(void *)&long long v114 = __PAIR64__(v32, v31);
    *((void *)&v114 + 1) = __PAIR64__(v34, v33);
    uint64_t v37 = 4;
  }
  unsigned int v38 = sub_1CBE0418C(v26, v37, &v114);
  uint64_t v39 = (llvm::MachineFunction *)a4[1];
  uint64_t v40 = *(void *)(a4[2] + 8) + 48 * v38;
  uint64_t v41 = (unsigned __int8 *)a4[4];
  uint64_t v113 = v41;
  if (v41) {
    llvm::MetadataTracking::track((uint64_t)&v113, v41, 2);
  }
  char v42 = llvm::MachineFunction::CreateMachineInstr(v39, v40, &v113, 0);
  if (v113)
  {
    int v99 = *v113;
    if ((v99 - 4) > 0x1E)
    {
      if ((v99 - 3) >= 0xFFFFFFFE) {
        unint64_t v102 = v113;
      }
      else {
        unint64_t v102 = 0;
      }
      if ((v99 - 3) < 0xFFFFFFFE)
      {
        if (v99 == 3) {
          *((void *)v113 + 1) = 0;
        }
        goto LABEL_67;
      }
      unint64_t v101 = (unint64_t)(v102 + 8);
    }
    else
    {
      if ((v113[1] & 0x7F) != 2 && !*((_DWORD *)v113 + 3)) {
        goto LABEL_67;
      }
      uint64_t v100 = *((void *)v113 + 2);
      if ((v100 & 4) == 0) {
        goto LABEL_67;
      }
      unint64_t v101 = v100 & 0xFFFFFFFFFFFFFFF8;
      if (!v101) {
        goto LABEL_67;
      }
    }
    *(void *)&long long v114 = &v113;
    sub_1CC5FA668(v101 + 16, &v114);
  }
LABEL_67:
  uint64_t v43 = (unint64_t *)a4[6];
  uint64_t v44 = *(void *)(a4[5] + 40);
  *((void *)v42 + 3) = v44;
  uint64_t v45 = *(void *)(v44 + 32);
  uint64_t v46 = *((unsigned int *)v42 + 10);
  if (v46)
  {
    uint64_t v92 = *((void *)v42 + 4);
    uint64_t v93 = *(void *)(v45 + 40);
    uint64_t v94 = 32 * v46;
    do
    {
      if (!*(unsigned char *)v92)
      {
        uint64_t v95 = *(unsigned int *)(v92 + 4);
        if ((int)v95 >= 0) {
          unint64_t v96 = (uint64_t *)(*(void *)(v93 + 272) + 8 * v95);
        }
        else {
          unint64_t v96 = (uint64_t *)(*(void *)(v93 + 24) + 16 * (v95 & 0x7FFFFFFF) + 8);
        }
        uint64_t v97 = *v96;
        if (*v96)
        {
          uint64_t v98 = *(void *)(v97 + 16);
          *(void *)(v97 + 16) = v92;
          *(void *)(v92 + 16) = v98;
          if (*(unsigned char *)(v92 + 3))
          {
            *(void *)(v92 + 24) = v97;
          }
          else
          {
            *(void *)(v92 + 24) = 0;
            unint64_t v96 = (uint64_t *)(v98 + 24);
          }
        }
        else
        {
          *(void *)(v92 + 16) = v92;
          *(void *)(v92 + 24) = 0;
        }
        *unint64_t v96 = v92;
      }
      v92 += 32;
      v94 -= 32;
    }
    while (v94);
  }
  uint64_t v47 = *(void *)(v45 + 728);
  if (v47) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v47 + 24))(v47, v42);
  }
  unint64_t v48 = *v43 & 0xFFFFFFFFFFFFFFF8;
  *(void *)char v42 = v48 | *(void *)v42 & 7;
  *((void *)v42 + 1) = v43;
  *(void *)(v48 + 8) = v42;
  *uint64_t v43 = *v43 & 7 | (unint64_t)v42;
  uint64_t v49 = a4[7];
  if (v49) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v49 + 24))(v49, v42);
  }
  *a5 = v39;
  a5[1] = v42;
  int v50 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a2 + 28))
  {
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = 0;
    LODWORD(v114) = 0;
    DWORD1(v114) = v50;
    uint64_t v116 = 0;
  }
  else
  {
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    LODWORD(v114) = 0x1000000;
    DWORD1(v114) = v50;
  }
  llvm::MachineInstr::addOperand(v42, v39, (const llvm::MachineOperand *)&v114);
  uint64_t v51 = sub_1CBE52E8C(v38);
  BOOL v53 = v51 == 102 || v51 == 106;
  if ((v51 & 0xFF00000000) != 0 && v53)
  {
    uint64_t v55 = *a5;
    uint64_t v54 = a5[1];
    LODWORD(v114) = 1;
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    uint64_t v56 = *(void *)(a2 + 80) & *(void *)(a2 + 40);
    uint64_t v55 = *a5;
    uint64_t v54 = a5[1];
    LODWORD(v114) = 1;
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = v56;
  }
  llvm::MachineInstr::addOperand(v54, v55, (const llvm::MachineOperand *)&v114);
  uint64_t v57 = *(void *)(a2 + 88) & *(void *)(a2 + 32);
  unint64_t v59 = *a5;
  unsigned int v58 = a5[1];
  LODWORD(v114) = 1;
  *((void *)&v114 + 1) = 0;
  uint64_t v115 = v57;
  llvm::MachineInstr::addOperand(v58, v59, (const llvm::MachineOperand *)&v114);
  uint64_t v61 = *a5;
  uint64_t v60 = a5[1];
  if (v112)
  {
    LODWORD(v114) = 1;
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = v110;
  }
  else
  {
    unsigned int v62 = *(_DWORD *)a3;
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = 0;
    LODWORD(v114) = 0;
    DWORD1(v114) = v62;
    uint64_t v116 = 0;
    llvm::MachineInstr::addOperand(v60, v61, (const llvm::MachineOperand *)&v114);
    uint64_t v61 = *a5;
    uint64_t v60 = a5[1];
    LODWORD(v114) = 1;
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = 0;
  }
  llvm::MachineInstr::addOperand(v60, v61, (const llvm::MachineOperand *)&v114);
  uint64_t v64 = *a5;
  uint64_t v63 = a5[1];
  if (v10 < 0x10000)
  {
    int v65 = *(_DWORD *)(a3 + 4);
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = 0;
    LODWORD(v114) = 0;
    DWORD1(v114) = v65;
    uint64_t v116 = 0;
    llvm::MachineInstr::addOperand(v63, v64, (const llvm::MachineOperand *)&v114);
    uint64_t v64 = *a5;
    uint64_t v63 = a5[1];
    LODWORD(v114) = 1;
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = 0;
  }
  else
  {
    LODWORD(v114) = 1;
    *((void *)&v114 + 1) = 0;
    uint64_t v115 = (__int16)v10;
  }
  llvm::MachineInstr::addOperand(v63, v64, (const llvm::MachineOperand *)&v114);
  uint64_t v66 = *(void *)(a3 + 16);
  int v68 = *a5;
  uint64_t v67 = a5[1];
  LODWORD(v114) = 1;
  *((void *)&v114 + 1) = 0;
  uint64_t v115 = v66;
  llvm::MachineInstr::addOperand(v67, v68, (const llvm::MachineOperand *)&v114);
  uint64_t v69 = *(void *)(a3 + 8);
  uint64_t v71 = *a5;
  char v70 = a5[1];
  LODWORD(v114) = 1;
  *((void *)&v114 + 1) = 0;
  uint64_t v115 = v69;
  llvm::MachineInstr::addOperand(v70, v71, (const llvm::MachineOperand *)&v114);
  if (*(unsigned char *)(a1 + 80))
  {
    if (v111)
    {
      uint64_t v73 = *a5;
      unint64_t v72 = a5[1];
      LODWORD(v114) = 1;
      *((void *)&v114 + 1) = 0;
      uint64_t v115 = v109;
    }
    else
    {
      int v74 = *(_DWORD *)(a1 + 60);
      uint64_t v76 = *a5;
      uint64_t v75 = a5[1];
      *((void *)&v114 + 1) = 0;
      uint64_t v115 = 0;
      LODWORD(v114) = 0;
      DWORD1(v114) = v74;
      uint64_t v116 = 0;
      llvm::MachineInstr::addOperand(v75, v76, (const llvm::MachineOperand *)&v114);
      uint64_t v73 = *a5;
      unint64_t v72 = a5[1];
      LODWORD(v114) = 1;
      *((void *)&v114 + 1) = 0;
      uint64_t v115 = 0;
    }
    llvm::MachineInstr::addOperand(v72, v73, (const llvm::MachineOperand *)&v114);
  }
  unint64_t v77 = *(void *)(a1 + 40);
  char v78 = 35;
  if ((v77 & 4) == 0) {
    char v78 = 19;
  }
  uint64_t v79 = (v77 >> v78) & 0xFFFFFF;
  if (v79 == 65)
  {
    unint64_t v81 = *(void *)(a2 + 32);
    uint64_t v82 = (v81 >> 54);
    if ((v81 & 0x2000000000000000) != 0) {
      uint64_t v82 = 0;
    }
    if (*(_DWORD *)(a2 + 28) == 1) {
      uint64_t v83 = 2;
    }
    else {
      uint64_t v83 = 1;
    }
    sub_1CBC2D9C8((v82 | ((v81 & 0x2000000000000000) >> 29)) ^ 0x100000000, v81 >> 4, *(_DWORD *)(a2 + 32) & 0xF, v83, *(void *)(*((void *)a5[1] + 3) + 32));
  }
  unsigned int v80 = *(llvm::MachineMemOperand **)(a1 + 48);
  if (v79 == 2) {
    *((_WORD *)v80 + 16) |= 0x20u;
  }
  llvm::MachineInstr::addMemOperand(a5[1], *a5, v80);
  return sub_1CBA318C8((uint64_t)a5);
}

uint64_t sub_1CBBDF0B0(uint64_t a1)
{
  sub_1CC73C44C(*(_DWORD *)(a1 + 4), *(void *)(a1 + 32), 1, (uint64_t)&v10);
  LOBYTE(v2) = v12;
  if (!v12)
  {
    int v7 = 0;
    goto LABEL_15;
  }
  if (v11 > 0x40)
  {
    uint64_t v9 = *v10;
    MEMORY[0x1D25D9CB0]();
    LODWORD(v2) = v9;
  }
  else
  {
    uint64_t v2 = (uint64_t)((void)v10 << -(uint64_t)v11) >> -(uint64_t)v11;
  }
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 == 1 && (v2 + 0x8000) >> 16 == 0)
  {
    unsigned int v6 = v2 & 0xFF00;
    int v7 = 0x10000;
    return v2 | v7 | v6;
  }
  if (WORD1(v2)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v3 == 1;
  }
  if (v5)
  {
    int v7 = 0;
    LOBYTE(v2) = 0;
LABEL_15:
    unsigned int v6 = 0;
    return v2 | v7 | v6;
  }
  unsigned int v6 = v2 & 0xFF00;
  int v7 = 0x10000;
  return v2 | v7 | v6;
}

uint64_t sub_1CBBDF198(int a1, uint64_t a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  sub_1CBA315DC((uint64_t)&v20, a1, *(void *)(*(void *)(a2 + 8) + 40), 1);
  if (!v22
    || (Section = llvm::GlobalValue::getSection(v20), v4 != 17)
    || (*(void *)Section == 0x5F7961722E616972 ? (BOOL v5 = *((void *)Section + 1) == 0x7461645F72657375) : (BOOL v5 = 0),
        v5 ? (BOOL v6 = Section[16] == 97) : (BOOL v6 = 0),
        !v6))
  {
    uint64_t v7 = 0;
LABEL_11:
    LOBYTE(v8) = 0;
    unsigned int v9 = 0;
    return v7 | v9 | v8;
  }
  unint64_t v11 = sub_1CBBAB7CC((void *)a2);
  uint64_t v7 = HIDWORD(v11);
  if (!HIDWORD(v11)) {
    goto LABEL_11;
  }
  int v8 = v11;
  unint64_t v12 = v21;
  if (v21)
  {
    uint64_t v18 = 257;
    int v19 = 0;
    unint64_t v13 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a2 + 8), (llvm::LLVMContext *)0x20);
    uint64_t v14 = llvm::ConstantInt::get(v13, v12, (const llvm::APInt *)1);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t *, void *))(*(void *)a2 + 16))(a2, &v18, v14);
    uint64_t v27 = 257;
    int v28 = 0;
    v23[0] = v8;
    v23[4] = 0;
    uint64_t v24 = v15;
    uint64_t v25 = v16;
    int v26 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a2 + 32))(a2, 45, &v27, 1, v23, 2, 0);
    int v8 = *(_DWORD *)(*(void *)(v17 + 32) + 4);
  }
  unsigned int v9 = v8 & 0xFFFFFF00;
  uint64_t v7 = 0x100000000;
  return v7 | v9 | v8;
}

uint64_t sub_1CBBDF36C(int a1, llvm::IntegerType *****a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[1];
  uint64_t v5 = (uint64_t)v4[5];
  if (sub_1CD1124FC((uint64_t)(*v4)[5])
    && (sub_1CBA315DC((uint64_t)&v26, a1, v5, 1), v28)
    && (Section = llvm::GlobalValue::getSection(v26), v7 == 19)
    && (*(void *)Section == 0x5F7961722E616972 ? (BOOL v8 = *((void *)Section + 1) == 0x645F726576697264) : (BOOL v8 = 0),
        v8 ? (BOOL v9 = *(void *)(Section + 11) == 0x617461645F726576) : (BOOL v9 = 0),
        v9))
  {
    unsigned int v14 = sub_1CD871FB0((uint64_t)v4[43]);
    uint64_t v35 = 257;
    int v36 = 0;
    uint64_t v15 = (llvm::MachineFunction *)((uint64_t (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, void, void, void))(*a2)[4])(a2, 313, &v35, 1, 0, 0, 0);
    uint64_t v17 = v16;
    int v29 = 1;
    uint64_t v30 = 0;
    uint64_t v31 = v14;
    llvm::MachineInstr::addOperand(v16, v15, (const llvm::MachineOperand *)&v29);
    int v11 = *(_DWORD *)(*((void *)v17 + 4) + 4);
    unint64_t v18 = v27;
    if (v27)
    {
      uint64_t v24 = 257;
      int v25 = 0;
      int v19 = (llvm::ConstantInt *)llvm::IntegerType::get(***a2[1], (llvm::LLVMContext *)0x20);
      uint64_t v20 = llvm::ConstantInt::get(v19, v18, (const llvm::APInt *)1);
      uint64_t v21 = ((uint64_t (*)(llvm::IntegerType *****, uint64_t *, void *))(*a2)[2])(a2, &v24, v20);
      uint64_t v35 = 257;
      int v36 = 0;
      int v29 = v11;
      LODWORD(v31) = 0;
      uint64_t v32 = v21;
      uint64_t v33 = v22;
      int v34 = 1;
      ((void (*)(llvm::IntegerType *****, uint64_t, uint64_t *, uint64_t, int *, uint64_t, void))(*a2)[4])(a2, 45, &v35, 1, &v29, 2, 0);
      int v11 = *(_DWORD *)(*(void *)(v23 + 32) + 4);
    }
    unsigned int v12 = v11 & 0xFFFFFF00;
    uint64_t v10 = 0x100000000;
  }
  else
  {
    uint64_t v10 = 0;
    LOBYTE(v11) = 0;
    unsigned int v12 = 0;
  }
  return v10 & 0x100000000 | v12 | v11;
}

void sub_1CBBDF5D8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    int v3 = a2;
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a2 != v2) {
        bzero((void *)(*(void *)a1 + 4 * v2), 4 * (a2 - v2));
      }
    }
    *(_DWORD *)(a1 + 8) = v3;
  }
}

uint64_t sub_1CBBDF654(int a1, uint64_t a2, int a3)
{
  LODWORD(v3) = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 272);
  while (1)
  {
    uint64_t v7 = (uint64_t *)(v6 + 8 * a1);
    if (a1 < 0) {
      uint64_t v7 = (uint64_t *)(v5 + 16 * (a1 & 0x7FFFFFFF) + 8);
    }
    uint64_t v8 = *v7;
    if (!v8) {
      return 0;
    }
    if ((*(unsigned char *)(v8 + 3) & 1) == 0)
    {
      uint64_t v8 = *(void *)(v8 + 24);
      if (!v8 || (*(unsigned char *)(v8 + 3) & 1) == 0) {
        return 0;
      }
    }
    uint64_t result = 0;
    if (v3 > 3) {
      return result;
    }
    uint64_t v10 = *(void *)(v8 + 8);
    if (!v10) {
      return result;
    }
    int v11 = *(unsigned int **)(v10 + 32);
    uint64_t v12 = v11[1];
    if ((int)v12 < 0) {
      unint64_t v13 = (uint64_t *)(v5 + 16 * (v12 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v13 = (uint64_t *)(v6 + 8 * v12);
    }
    uint64_t v14 = *v13;
    if ((*(unsigned char *)(v14 + 3) & 1) == 0) {
      uint64_t v14 = *(void *)(v14 + 24);
    }
    uint64_t v15 = *(void *)(v14 + 8);
    if (**(_WORD **)(v15 + 16) == 121)
    {
      uint64_t v31 = *(void *)(*(void *)(v15 + 32) + 48);
      if (v31)
      {
        if (*(_UNKNOWN **)(v31 + 32) == &unk_1CFB2E344) {
          uint64_t v37 = *(void *)(v31 + 40);
        }
        else {
          uint64_t v37 = v31 + 24;
        }
        return (*(unsigned char *)(v37 + 28) & 8) == 0;
      }
    }
    uint64_t result = 0;
    unsigned int v16 = **(unsigned __int16 **)(v10 + 16);
    if (v16 > 0xB1)
    {
      if (v16 - 178 < 2)
      {
        int v19 = (int *)(v11 + 9);
        LODWORD(v3) = v3 + 1;
        goto LABEL_51;
      }
      if (v16 - 187 < 2)
      {
LABEL_25:
        uint64_t v3 = (v3 + 1);
        uint64_t result = sub_1CBBDF654(v11[9], a2, v3);
        if (!result) {
          return result;
        }
        int v19 = (int *)(v11 + 17);
        goto LABEL_51;
      }
      if (v16 != 335) {
        return result;
      }
LABEL_47:
      uint64_t v3 = (v3 + 1);
      uint64_t result = sub_1CBBDF654(v11[33], a2, v3);
      if (!result) {
        return result;
      }
      int v19 = (int *)(v11 + 41);
      goto LABEL_51;
    }
    if (**(unsigned __int16 **)(v10 + 16) <= 0xA2u) {
      break;
    }
    switch(v16)
    {
      case 0xA3u:
        goto LABEL_25;
      case 0xA5u:
        unsigned int v29 = v11[17];
        int v19 = (int *)(v11 + 17);
        uint64_t v30 = *(v19 - 8);
        if (v30 == v29) {
          return 1;
        }
        uint64_t v3 = (v3 + 1);
        if ((sub_1CBBDF654(v30, a2, v3) & 1) == 0) {
          return 0;
        }
        break;
      case 0xA6u:
        uint64_t v17 = v11[9];
        uint64_t v18 = v11[17];
        if (v17 == v18) {
          return 1;
        }
        uint64_t v3 = (v3 + 1);
        uint64_t result = sub_1CBBDF654(v17, a2, v3);
        if (!result) {
          return result;
        }
        uint64_t result = sub_1CBBDF654(v18, a2, v3);
        if (!result) {
          return result;
        }
        int v19 = (int *)(v11 + 25);
        break;
      default:
        return result;
    }
LABEL_51:
    a1 = *v19;
  }
  if (v16 == 51) {
    goto LABEL_47;
  }
  if (v16 == 136)
  {
    uint64_t v20 = v11[9];
    if ((int)v20 < 0) {
      uint64_t v21 = (uint64_t *)(v5 + 16 * (v20 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v21 = (uint64_t *)(v6 + 8 * v20);
    }
    uint64_t v22 = *v21;
    if ((*(unsigned char *)(v22 + 3) & 1) == 0) {
      uint64_t v22 = *(void *)(v22 + 24);
    }
    uint64_t v23 = *(void *)(v22 + 8);
    int v24 = **(unsigned __int16 **)(v23 + 16);
    if (v24 == 179 || v24 == 119)
    {
      uint64_t v25 = *(unsigned int *)(*(void *)(v23 + 32) + 36);
      if ((int)v25 < 0) {
        int v26 = (uint64_t *)(v5 + 16 * (v25 & 0x7FFFFFFF) + 8);
      }
      else {
        int v26 = (uint64_t *)(v6 + 8 * v25);
      }
      uint64_t v27 = *v26;
      if ((*(unsigned char *)(v27 + 3) & 1) == 0) {
        uint64_t v27 = *(void *)(v27 + 24);
      }
      uint64_t v23 = *(void *)(v27 + 8);
      LOWORD(v24) = **(_WORD **)(v23 + 16);
    }
    if ((v24 & 0xFFFE) != 0x86) {
      return 0;
    }
    uint64_t v28 = *(void *)(v23 + 32);
    uint64_t v3 = (v3 + 1);
    uint64_t result = sub_1CBBDF654(*(unsigned int *)(v28 + 68), a2, v3);
    if (!result) {
      return result;
    }
    int v19 = (int *)(v28 + 100);
    goto LABEL_51;
  }
  if (v16 != 116) {
    return result;
  }
  uint64_t v32 = *(unsigned int *)(v10 + 40);
  if (v32)
  {
    uint64_t v33 = 0;
    int v34 = v11;
    while (1)
    {
      int v35 = *(unsigned __int8 *)v34;
      v34 += 8;
      if (v35 == 17) {
        break;
      }
      if (v32 == ++v33) {
        goto LABEL_64;
      }
    }
  }
  else
  {
LABEL_64:
    LODWORD(v33) = -1;
  }
  return v11[8 * v33 + 4] == 2131;
}

void sub_1CBBDF994(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v5 = a3 + a2;
  if (v5 <= 0x39)
  {
    uint64_t v6 = (v5 << 58) | 1;
    sub_1CB9F9F38((unint64_t *)&v6, a2, v5);
    (*(void (**)(void))(**(void **)(a4 + 16) + 104))(*(void *)(a4 + 16));
    operator new();
  }
  operator new();
}

void sub_1CBBDFB90(void *a1)
{
  *a1 = &unk_1F25FA1D8;
  uint64_t v1 = (void **)a1[2];
  if ((v1 & 1) == 0 && v1)
  {
    if (*v1 != v1 + 2) {
      free(*v1);
    }
    MEMORY[0x1D25D9CE0](v1, 0x1080C40EF38A13ELL);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBBDFC30()
{
  return 0;
}

uint64_t sub_1CBBDFC38()
{
  return 1;
}

uint64_t sub_1CBBDFC40()
{
  return 1;
}

uint64_t sub_1CBBDFC48()
{
  return 0;
}

void sub_1CBBDFC50(uint64_t a1, unsigned __int8 *a2, unsigned __int8 **a3, unsigned int a4)
{
  uint64_t v6 = (uint64_t)a2;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  a3[5] = *(unsigned __int8 **)(a1 + 24);
  a3[6] = (unsigned __int8 *)a1;
  uint64_t v8 = (unsigned __int8 **)(a1 + 56);
  BOOL v9 = a3 + 4;
  if ((unsigned __int8 **)(a1 + 56) == a3 + 4) {
    goto LABEL_5;
  }
  uint64_t v10 = *v9;
  if (*v9)
  {
    int v47 = *v10;
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        int v50 = *v9;
      }
      else {
        int v50 = 0;
      }
      if ((v47 - 3) < 0xFFFFFFFE)
      {
        if (v47 == 3) {
          *((void *)v10 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v49 = (unint64_t)(v50 + 8);
    }
    else
    {
      if ((v10[1] & 0x7F) != 2 && !*((_DWORD *)v10 + 3)) {
        goto LABEL_3;
      }
      uint64_t v48 = *((void *)v10 + 2);
      if ((v48 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if (!v49) {
        goto LABEL_3;
      }
    }
    uint64_t v60 = a3 + 4;
    sub_1CC5FA668(v49 + 16, &v60);
  }
LABEL_3:
  a2 = *v8;
  *BOOL v9 = *v8;
  if (a2) {
    llvm::MetadataTracking::track((uint64_t)v9, a2, 2);
  }
LABEL_5:
  uint64_t v11 = *(void *)(a1 + 32);
  int v12 = *(_DWORD *)(v11 + 4);
  int v51 = v12;
  if (v12 < 0 && (v12 & 0x7FFFFFFFu) < *(_DWORD *)(v6 + 432))
  {
    unint64_t v13 = *(void *)(*(void *)(v6 + 424) + 8 * (v12 & 0x7FFFFFFF));
    if ((v13 & 2) != 0)
    {
      char v14 = 35;
      char v15 = 19;
      if ((v13 & 4) == 0) {
        char v14 = 19;
      }
      unint64_t v16 = v13 >> v14;
      if ((v13 & 4) == 0) {
        char v15 = 3;
      }
      if (v13) {
        char v15 = 3;
      }
      unint64_t v17 = (8 * (unsigned __int16)(v13 >> v15)) & 0xFFFFF8000007FFFFLL | ((v16 & 0xFFFFFF) << 19) | 2;
      uint64_t v18 = 0x800000000000000;
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  char v19 = 3;
  if ((v13 & 1) == 0) {
    char v19 = 19;
  }
  unint64_t v17 = v13 & 0x8000000000000000 | (8 * (v13 >> v19)) | 1;
  uint64_t v18 = 0x8000000000000;
LABEL_19:
  uint64_t v57 = v59;
  uint64_t v58 = 0x400000000;
  if ((v13 & v18) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    uint64_t v11 = *(void *)(a1 + 32);
  }
  uint64_t v20 = *(void *)(a1 + 16);
  unsigned int v21 = *(unsigned __int8 *)(v20 + 4);
  uint64_t v22 = *(unsigned int *)(a1 + 40);
  if ((*(unsigned char *)(v20 + 8) & 2) != 0)
  {
    if (v22 == v21) {
      goto LABEL_28;
    }
    unsigned int v23 = *(unsigned __int8 *)(v20 + 4);
    do
    {
      int v46 = *(_DWORD *)(v11 + 32 * v21);
      if ((v46 & 0x10000FF) != 0x1000000) {
        break;
      }
      v23 += (v46 & 0x2000000) == 0;
      if (v22 - 1 == v21) {
        break;
      }
      ++v21;
    }
    while ((v46 & 0x2000000) == 0);
  }
  else
  {
    unsigned int v23 = *(unsigned __int8 *)(v20 + 4);
  }
  if (v23 != v22)
  {
    uint64_t v24 = 32 * v22 - 32 * v23;
    uint64_t v25 = (unsigned int *)(v11 + 32 * v23 + 4);
    do
    {
      uint64_t v60 = v62;
      uint64_t v61 = 0x400000000;
      unsigned int v26 = *v25;
      v25 += 8;
      sub_1CBBB1038(v26, v6, (uint64_t)a3, (uint64_t)&v60);
      sub_1CBA60F10((uint64_t)&v57, (unint64_t)&v60);
      if (v60 != v62) {
        free(v60);
      }
      v24 -= 32;
    }
    while (v24);
  }
LABEL_28:
  uint64_t v54 = v56;
  uint64_t v55 = 0x400000000;
  if ((unsigned __int16)(v13 >> 3))
  {
    uint64_t v27 = 0;
    uint64_t v28 = a4;
    do
    {
      uint64_t v29 = 0;
      unsigned int v30 = 0;
      uint64_t v60 = v62;
      uint64_t v61 = 0x400000000;
      uint64_t v31 = v28;
      do
      {
        LODWORD(v52) = *(_DWORD *)(*(void *)((char *)v57 + v29) + 4 * v27);
        LODWORD(v53) = 0;
        if (v30 >= HIDWORD(v61))
        {
          if (v60 > &v52 || (char *)v60 + 24 * v30 <= (char *)&v52) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v32 = (char *)v60 + 24 * v61;
        long long v33 = v52;
        *((void *)v32 + 2) = v53;
        *(_OWORD *)uint64_t v32 = v33;
        unsigned int v30 = v61 + 1;
        LODWORD(v61) = v61 + 1;
        v29 += 32;
        --v31;
      }
      while (v31);
      uint64_t v34 = **(unsigned __int16 **)(a1 + 16);
      *(void *)&long long v52 = v17;
      DWORD2(v52) = 0;
      (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t, void *))*a3 + 4))(a3, v34, &v52, 1, v60);
      if (v55 >= (unint64_t)HIDWORD(v55)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v54 + v55) = *(_DWORD *)(*(void *)(v35 + 32) + 4);
      LODWORD(v55) = v55 + 1;
      if (v60 != v62) {
        free(v60);
      }
      ++v27;
    }
    while (v27 != (unsigned __int16)(v13 >> 3));
    int v36 = (int *)v54;
    int v37 = v55;
    LODWORD(v52) = v51;
    DWORD2(v52) = 1;
    uint64_t v60 = v62;
    uint64_t v61 = 0x800000000;
    if (v55 >= 9) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v55)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 4 * v55;
      do
      {
        int v40 = *v36++;
        uint64_t v41 = &v62[v38];
        _DWORD *v41 = v40;
        v41[4] = 0;
        v38 += 24;
        v39 -= 4;
      }
      while (v39);
      int v42 = v61;
    }
    else
    {
      int v42 = 0;
    }
  }
  else
  {
    int v37 = 0;
    int v42 = 0;
    LODWORD(v52) = v51;
    DWORD2(v52) = 1;
    uint64_t v60 = v62;
    uint64_t v61 = 0x800000000;
  }
  LODWORD(v61) = v42 + v37;
  (*((void (**)(unsigned __int8 **, uint64_t, long long *, uint64_t))*a3 + 4))(a3, 77, &v52, 1);
  if (v60 != v62) {
    free(v60);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  if (v54 != v56) {
    free(v54);
  }
  uint64_t v43 = (char *)v57;
  if (v58)
  {
    uint64_t v44 = 32 * v58;
    do
    {
      uint64_t v45 = *(char **)&v43[v44 - 32];
      if (&v43[v44 - 16] != v45) {
        free(v45);
      }
      v44 -= 32;
    }
    while (v44);
    uint64_t v43 = (char *)v57;
  }
  if (v43 != v59) {
    free(v43);
  }
}

uint64_t sub_1CBBE0260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (**(_WORD **)(a1 + 16) != 135) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(v6 + 68);
  int v8 = *(_DWORD *)(v6 + 100);
  if (v7 < 0
    && (v7 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)
    && (*(void *)(*(void *)(a2 + 424) + 8 * (v7 & 0x7FFFFFFF)) & 0x8000000000000000) != 0)
  {
    uint64_t v14 = v6 + 64;
    uint64_t v18 = 257;
    int v19 = 0;
    v16[0] = v7;
    int v17 = 0;
    uint64_t v9 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 178, &v18, 1, v16, 1, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
    llvm::MachineOperand::setReg(v14, *(_DWORD *)(*(void *)(v15 + 32) + 4));
    if ((v8 & 0x80000000) == 0) {
      return v9;
    }
  }
  else
  {
    uint64_t v9 = 0;
    if ((v8 & 0x80000000) == 0) {
      return v9;
    }
  }
  if ((v8 & 0x7FFFFFFFu) < *(_DWORD *)(a2 + 432)
    && (*(void *)(*(void *)(a2 + 424) + 8 * (v8 & 0x7FFFFFFF)) & 0x8000000000000000) != 0)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = v10 + 96;
    uint64_t v18 = 257;
    int v19 = 0;
    v16[0] = *(_DWORD *)(v10 + 100);
    int v17 = 0;
    uint64_t v9 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)a3 + 32))(a3, 178, &v18, 1, v16, 1, *(unsigned __int16 *)(a1 + 44) | 0x100000000);
    llvm::MachineOperand::setReg(v11, *(_DWORD *)(*(void *)(v12 + 32) + 4));
  }
  return v9;
}

uint64_t sub_1CBBE0428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  int v17 = v19;
  uint64_t v18 = 0x400000000;
  uint64_t v5 = *(unsigned int *)(a2 + 40);
  if (v5 < 2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (int *)v19;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 32 * v5 - 32;
    do
    {
      uint64_t v15 = 129;
      int v16 = 0;
      v14[0] = *(_DWORD *)(*(void *)(a2 + 32) + v7 + 36);
      v14[4] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, void))(*(void *)a3 + 32))(a3, 118, &v15, 1, v14, 1, 0);
      if (v18 >= (unint64_t)HIDWORD(v18)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v17 + v18) = *(_DWORD *)(*(void *)(v9 + 32) + 4);
      uint64_t v10 = (v18 + 1);
      LODWORD(v18) = v18 + 1;
      v7 += 32;
    }
    while (v8 != v7);
    uint64_t v11 = (int *)v17;
  }
  uint64_t v12 = sub_1CC738E00(a3, a1, v11, v10);
  if (v17 != v19) {
    free(v17);
  }
  return v12;
}

uint64_t sub_1CBBE05BC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  unsigned int v2 = v1 - 1;
  if (v1 > 0x40)
  {
    if (((*(void *)(*(void *)a1 + 8 * (v2 >> 6)) >> v2) & 1) == 0)
    {
      int v6 = 0;
      int64_t v7 = (unint64_t)(v1 + 63) >> 6;
      do
      {
        if (v7-- < 1) {
          break;
        }
        unint64_t v9 = *(void *)(*(void *)a1 + 8 * v7);
        v6 += __clz(v9);
      }
      while (!v9);
      int v10 = v1 | 0xFFFFFFC0;
      if ((v1 & 0x3F) == 0) {
        int v10 = 0;
      }
      BOOL v3 = v6 + v10 == v1;
      goto LABEL_4;
    }
    return 0;
  }
  if ((*(void *)a1 >> v2)) {
    return 0;
  }
  BOOL v3 = *(void *)a1 == 0;
LABEL_4:
  int v4 = v3;
  return v4 ^ 1u;
}

void sub_1CBBE0644()
{
}

void *sub_1CBBE0658(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25F9578;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE06A0(uint64_t result, void *a2)
{
  *a2 = &unk_1F25F9578;
  a2[1] = *(void *)(result + 8);
  return result;
}

BOOL sub_1CBBE06D0(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
  if (v4 == 1)
  {
    unsigned int v8 = v3;
    unsigned int v3 = v8;
  }
  BOOL v5 = (v3 & 0xF) == 0 && *(_DWORD *)(a1 + 8) >= v3;
  BOOL result = 1;
  if (!v5)
  {
    if ((v3 & 0x1F) != 0 || (v3 & 0xFFFFFFE0) == 0x160) {
      return 0;
    }
    if ((v3 & 0xFFFFFFA0) == 0x100 || *(_DWORD *)(a1 + 12) < v3) {
      return 0;
    }
  }
  return result;
}

void sub_1CBBE0774()
{
}

void *sub_1CBBE0788()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F25F95C0;
  return result;
}

void sub_1CBBE07C0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F95C0;
}

uint64_t sub_1CBBE07E8()
{
  return 1;
}

void sub_1CBBE083C()
{
}

void *sub_1CBBE0850()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F25F9608;
  return result;
}

void sub_1CBBE0888(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9608;
}

BOOL sub_1CBBE08B0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(void **)(a2 + 8) & 6) != 2) {
    return 0;
  }
  char v5 = 35;
  if ((v2 & 4) == 0) {
    char v5 = 19;
  }
  return ((v2 >> v5) & 0xFFFFFF) == 64;
}

void sub_1CBBE08FC()
{
}

void *sub_1CBBE0910()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F25F9650;
  return result;
}

void sub_1CBBE0948(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9650;
}

BOOL sub_1CBBE0970(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  unint64_t v3 = (unsigned __int16)(v2 >> 3);
  unint64_t v4 = (unsigned __int16)(v2 >> 19);
  if ((v2 & 2) == 0) {
    unint64_t v4 = (v2 >> 19);
  }
  if ((v2 & 4) != 0) {
    unint64_t v3 = v4;
  }
  if (v2) {
    unint64_t v5 = (v2 >> 3);
  }
  else {
    unint64_t v5 = v3;
  }
  return v5 < 0x10;
}

void sub_1CBBE09B0()
{
}

void *sub_1CBBE09C4()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F25F9698;
  return result;
}

void sub_1CBBE09FC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9698;
}

uint64_t sub_1CBBE0A24(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v4 = (v2 >> 2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

void sub_1CBBE0A40()
{
}

void *sub_1CBBE0A54(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F25F96E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE0A9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F96E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBBE0AC8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  if (v2 == *(void *)(a1 + 8)) {
    return 1;
  }
  BOOL v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v5 = (v2 >> 2) & 1;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_1CBBE0AF8()
{
}

void *sub_1CBBE0B0C(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1F25F9728;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE0B54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9728;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBBE0B80(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  if (v2 == *(void *)(a1 + 8)) {
    return 1;
  }
  BOOL v4 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v5 = (v2 >> 2) & 1;
  if (v4) {
    return 0;
  }
  else {
    return v5;
  }
}

void sub_1CBBE0BB0()
{
}

__n128 sub_1CBBE0BC4(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_1F25F9770;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBBE0C10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9770;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE0C40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  return v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16);
}

void sub_1CBBE0C60()
{
}

__n128 sub_1CBBE0C74(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F97B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBBE0CC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F97B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE0CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  return v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16);
}

void sub_1CBBE0D10()
{
}

void *sub_1CBBE0D24()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F9800;
  return result;
}

void sub_1CBBE0D5C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9800;
}

uint64_t sub_1CBBE0D84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  uint64_t v3 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v3) = 0;
  }
  if (v2 < 0) {
    return 1;
  }
  else {
    return v3;
  }
}

void sub_1CBBE0DA8()
{
}

__n128 sub_1CBBE0DBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F9848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBBE0E08(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9848;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBBE0E38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  if (v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16)) {
    return 1;
  }
  uint64_t v5 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v5) = 0;
  }
  if (v2 < 0) {
    return 1;
  }
  else {
    return v5;
  }
}

void sub_1CBBE0E74()
{
}

__n128 sub_1CBBE0E88(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F9890;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBBE0ED4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9890;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBBE0F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  if (v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16)) {
    return 1;
  }
  uint64_t v5 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v5) = 0;
  }
  if (v2 < 0) {
    return 1;
  }
  else {
    return v5;
  }
}

void sub_1CBBE0F40()
{
}

void *sub_1CBBE0F54()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F98D8;
  return result;
}

void sub_1CBBE0F8C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F98D8;
}

uint64_t sub_1CBBE0FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  uint64_t v3 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v3) = 0;
  }
  if (v2 < 0) {
    return 1;
  }
  else {
    return v3;
  }
}

void sub_1CBBE0FD8()
{
}

void *sub_1CBBE0FEC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F9920;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE1034(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9920;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBBE1060(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBBE107C()
{
}

void *sub_1CBBE1090(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F9968;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE10D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9968;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBBE1104(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBBE1120()
{
}

__n128 sub_1CBBE1134(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25F99B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBBE1180(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F99B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBBE11B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 + 8);
  if (v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16)) {
    return 1;
  }
  uint64_t v5 = ((unint64_t)v2 >> 2) & 1;
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v5) = 0;
  }
  if (v2 < 0) {
    return 1;
  }
  else {
    return v5;
  }
}

void sub_1CBBE11EC()
{
}

void *sub_1CBBE1200()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F99F8;
  return result;
}

void sub_1CBBE1238(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F99F8;
}

uint64_t sub_1CBBE1260(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0) {
    return 1;
  }
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0;
  uint64_t v4 = (v2 >> 2) & 1;
  if (v3) {
    return 0;
  }
  else {
    return v4;
  }
}

void sub_1CBBE1288()
{
}

void *sub_1CBBE129C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F9A40;
  return result;
}

void sub_1CBBE12D4(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9A40;
}

BOOL sub_1CBBE12FC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 8) + 8));
  if (v3 == 1) {
  unint64_t v6 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
  }
  if (v5 == 1) {
  return v4 < v6;
  }
}

void sub_1CBBE1374()
{
}

void *sub_1CBBE1388()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F9A88;
  return result;
}

void sub_1CBBE13C0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9A88;
}

uint64_t sub_1CBBE13E8()
{
  return 0;
}

void sub_1CBBE13FC()
{
}

void *sub_1CBBE1410()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F9AD0;
  return result;
}

void sub_1CBBE1448(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9AD0;
}

BOOL sub_1CBBE1470(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 8) + 8));
  if (v3 == 1) {
  unint64_t v6 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
  }
  if (v5 == 1) {
  return v4 < v6;
  }
}

void sub_1CBBE14E8()
{
}

void *sub_1CBBE14FC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F9B18;
  return result;
}

void sub_1CBBE1534(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9B18;
}

uint64_t sub_1CBBE155C()
{
  return 0;
}

void sub_1CBBE1570()
{
}

void *sub_1CBBE1584(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F9B60;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE15CC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9B60;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBBE15F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  if (*v2 != *(void *)(a1 + 8) && ((*v2 & 0xFFFFFFFFFFFFFFF9) != 0 ? (BOOL v3 = (*v2 & 4) == 0) : (BOOL v3 = 1), v3)) {
    return v2[1] >> 63;
  }
  else {
    return 1;
  }
}

void sub_1CBBE1638()
{
}

__n128 sub_1CBBE164C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F9BA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBBE16A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9BA8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBBE16D8(void *a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 8);
  uint64_t v3 = *v2;
  BOOL v4 = *v2 == a1[1] || v3 == a1[2];
  if (v4 && v2[1] == a1[3]) {
    return 1;
  }
  uint64_t v6 = ((unint64_t)v3 >> 2) & 1;
  if ((v3 & 0xFFFFFFFFFFFFFFF9) == 0) {
    LODWORD(v6) = 0;
  }
  if (v3 < 0) {
    return 1;
  }
  else {
    return v6;
  }
}

void sub_1CBBE1724()
{
}

void *sub_1CBBE1738()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F9BF0;
  return result;
}

void sub_1CBBE1770(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9BF0;
}

BOOL sub_1CBBE1798(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)(a2 + 8);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = sub_1CB8F1DC4(v2);
  int v6 = v5;
  return v4 != sub_1CB8F1DC4(v3) || v6 != v7;
}

void sub_1CBBE17E8()
{
}

void *sub_1CBBE17FC()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F9C38;
  return result;
}

void sub_1CBBE1834(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9C38;
}

BOOL sub_1CBBE185C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unint64_t **)(a2 + 8);
  uint64_t v3 = v2 + 1;
  uint64_t v4 = sub_1CB8F1DC4(v2);
  int v6 = v5;
  return v4 != sub_1CB8F1DC4(v3) || v6 != v7;
}

void sub_1CBBE18AC()
{
}

__n128 sub_1CBBE18C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  *(void *)uint64_t v2 = &unk_1F25F9C80;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((void *)v2 + 11) = *(void *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBBE1934(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9C80;
  long long v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(void *)(a2 + 88) = *(void *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t sub_1CBBE198C(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **(void **)(a2 + 8);
  BOOL v3 = (v2 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(void **)(a2 + 8) & 2) == 0;
  if (v3 || (v2 & 4) != 0) {
    return 0;
  }
  long long v5 = *(_OWORD *)(a1 + 24);
  v9[0] = *(_OWORD *)(a1 + 8);
  v9[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 56);
  v9[2] = *(_OWORD *)(a1 + 40);
  v9[3] = v6;
  v9[4] = *(_OWORD *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 88);
  sub_1CC70A830(1, v9, 11, (uint64_t)v11);
  if (!v12)
  {
    sub_1CB920400();
    JUMPOUT(0x1CBBE1AE8);
  }
  uint64_t v7 = (*(uint64_t (**)(void *, uint64_t))(*v12 + 48))(v12, a2);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  return v7;
}

void sub_1CBBE1AEC()
{
}

void *sub_1CBBE1B00(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F9CC8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE1B48(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9CC8;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBBE1B74(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8) && (*(_DWORD *)a2 - 107) < 4;
}

void sub_1CBBE1B9C()
{
}

void *sub_1CBBE1BB0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F9D10;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE1BF8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9D10;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBBE1C24(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBBE1C40()
{
}

__n128 sub_1CBBE1C54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1F25F9D58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1CBBE1CB0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9D58;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE1CF0(void *a1, uint64_t a2)
{
  long long v3 = *(uint64_t **)(a2 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = 0x800000000000000;
  if ((*v3 & 2) == 0) {
    uint64_t v5 = 0x8000000000000;
  }
  if ((v5 & v4) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", (const char *)a2);
    uint64_t v4 = *v3;
  }
  uint64_t v6 = v3[1];
  if (v6 == a1[1] || v6 == a1[2]) {
    return 1;
  }
  unsigned int v8 = (unsigned __int16)(v4 >> 3);
  if (v6 == a1[3])
  {
    if (v8 < 9) {
      return 1;
    }
  }
  else
  {
    if (v6 == a1[4] && v8 < 9) {
      return 1;
    }
    if (v6 == a1[5] && v8 < 5) {
      return 1;
    }
  }
  return v6 == a1[6] && v8 == 2;
}

void sub_1CBBE1DAC()
{
}

__n128 sub_1CBBE1DC0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = &unk_1F25F9DA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1CBBE1E24(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9DA0;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE1E6C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  int64x2_t v3 = vdupq_n_s64(v2);
  uint64_t v4 = 1;
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) == 0&& v2 != *(void *)(a1 + 40)&& v2 != *(void *)(a1 + 48)&& v2 != *(void *)(a1 + 56))
  {
    return v2 == *(void *)(a1 + 64);
  }
  return v4;
}

void sub_1CBBE1EE8()
{
}

__n128 sub_1CBBE1EFC(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_1F25F9DE8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1CBBE1F58(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9DE8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE1F98(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  char v3 = 3;
  if ((v2 & 1) == 0) {
    char v3 = 19;
  }
  unint64_t v4 = v2 >> v3;
  unint64_t v5 = v2 & 0x8000000000000000 | (8 * v4) | 1;
  uint64_t v6 = (v2 >> 16) & 0x7FFFFF80000 | (8 * (unsigned __int16)v4) | 2;
  if ((v2 & 2) == 0) {
    uint64_t v6 = v5;
  }
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(void **)(a2 + 8) & 4) == 0) {
    unint64_t v8 = **(void **)(a2 + 8);
  }
  else {
    unint64_t v8 = v6;
  }
  int64x2_t v9 = vdupq_n_s64(v8);
  uint64_t v10 = 1;
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v9, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v9, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) == 0&& v8 != *(void *)(a1 + 40))
  {
    return v8 == *(void *)(a1 + 48);
  }
  return v10;
}

void sub_1CBBE2044()
{
}

__n128 sub_1CBBE2058(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0xB0uLL);
  *(void *)unint64_t v2 = &unk_1F25F9E30;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a1 + 152);
  *((void *)v2 + 21) = *(void *)(a1 + 168);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1CBBE20F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9E30;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v6;
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  __n128 result = *(__n128 *)(a1 + 120);
  long long v8 = *(_OWORD *)(a1 + 136);
  long long v9 = *(_OWORD *)(a1 + 152);
  *(void *)(a2 + 168) = *(void *)(a1 + 168);
  *(_OWORD *)(a2 + 152) = v9;
  *(_OWORD *)(a2 + 136) = v8;
  *(__n128 *)(a2 + 120) = result;
  return result;
}

uint64_t sub_1CBBE2174()
{
  return 1;
}

void sub_1CBBE2180()
{
}

void *sub_1CBBE2194()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F25F9E78;
  return result;
}

void sub_1CBBE21CC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25F9E78;
}

BOOL sub_1CBBE21F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
  if (v3 == 1) {
  unint64_t v6 = sub_1CB8F1DC4((unint64_t *)(*(void *)(a2 + 8) + 8));
  }
  if (v5 == 1) {
  return v4 >= v6;
  }
}

void sub_1CBBE226C()
{
}

void *sub_1CBBE2280(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F9EC0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE22C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9EC0;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBBE22F4(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBBE2310()
{
}

__n128 sub_1CBBE2324(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F25F9F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1CBBE2378(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE23B0(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8);
  return v2 == a1[1] || v2 == a1[2] || v2 == a1[3];
}

void sub_1CBBE23E4()
{
}

__n128 sub_1CBBE23F8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v2 = &unk_1F25F9F50;
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBBE2464(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9F50;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  long long v3 = *(_OWORD *)(a1 + 40);
  long long v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

BOOL sub_1CBBE24B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  long long v4 = *(unint64_t **)(a2 + 8);
  long long v5 = *(_OWORD *)(a1 + 24);
  v12[0] = *(_OWORD *)(a1 + 8);
  v12[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 56);
  v12[2] = *(_OWORD *)(a1 + 40);
  v12[3] = v6;
  v12[4] = *(_OWORD *)(a1 + 72);
  while (*(void *)((char *)v12 + v3) != v4[1])
  {
    v3 += 8;
    if (v3 == 80) {
      return 0;
    }
  }
  unsigned int v8 = sub_1CB8F1DC4(v4);
  if (v9 == 1)
  {
    unsigned int v11 = v8;
    unsigned int v8 = v11;
  }
  BOOL v10 = (v8 & (v8 - 1)) == 0;
  if (!v8) {
    BOOL v10 = 0;
  }
  return v8 < 0x41 && v10;
}

void sub_1CBBE2598()
{
}

void *sub_1CBBE25AC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25F9F98;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE25F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25F9F98;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBBE2620(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBBE263C()
{
}

__n128 sub_1CBBE2650(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F25F9FE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1CBBE26A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25F9FE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE26DC(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a2 + 8);
  uint64_t v3 = a1[4];
  if (*v2 == v3) {
    return 1;
  }
  uint64_t v4 = v2[1];
  if (v4 == a1[1] || v4 == a1[2]) {
    return 1;
  }
  if (v4 == v3 || v4 == a1[3]) {
    return 1;
  }
  return (v4 & 0xFFFFFFFFFFFFFFF9) != 0 && (v4 & 2) != 0 && (v4 & 4) == 0;
}

void sub_1CBBE2748()
{
}

__n128 sub_1CBBE275C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x88uLL);
  *(void *)uint64_t v2 = &unk_1F25FA028;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1CBBE27E0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25FA028;
  long long v2 = *(_OWORD *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  __n128 result = *(__n128 *)(a1 + 72);
  long long v6 = *(_OWORD *)(a1 + 88);
  long long v7 = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 104) = v7;
  *(_OWORD *)(a2 + 88) = v6;
  *(__n128 *)(a2 + 72) = result;
  return result;
}

uint64_t sub_1CBBE2848(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = **(void **)(a2 + 8);
  BOOL v4 = (v3 & 0xFFFFFFFFFFFFFFF9) == 0 || (**(void **)(a2 + 8) & 2) == 0;
  if (!v4 && (v3 & 4) == 0) {
    return 1;
  }
  long long v6 = *(_OWORD *)(a1 + 24);
  v11[0] = *(_OWORD *)(a1 + 8);
  v11[1] = v6;
  long long v7 = *(_OWORD *)(a1 + 56);
  v11[2] = *(_OWORD *)(a1 + 40);
  void v11[3] = v7;
  long long v8 = *(_OWORD *)(a1 + 88);
  v11[4] = *(_OWORD *)(a1 + 72);
  v11[5] = v8;
  long long v9 = *(_OWORD *)(a1 + 120);
  v11[6] = *(_OWORD *)(a1 + 104);
  v11[7] = v9;
  sub_1CC70A830(0, v11, 16, (uint64_t)v12);
  if (!v13)
  {
    sub_1CB920400();
    JUMPOUT(0x1CBBE29ACLL);
  }
  uint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*v13 + 48))(v13, a2);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void *))(*v13 + 40))(v13);
  }
  return v5;
}

void sub_1CBBE29B0()
{
}

void *sub_1CBBE29C4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F25FA070;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBBE2A0C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FA070;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBBE2A38(uint64_t a1, uint64_t a2)
{
  return **(void **)(a2 + 8) == *(void *)(a1 + 8);
}

void sub_1CBBE2A54()
{
}

__n128 sub_1CBBE2A68(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25FA0B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBBE2AB4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25FA0B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE2AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8);
  return v2 == *(void *)(a1 + 8) || v2 == *(void *)(a1 + 16);
}

void sub_1CBBE2B04()
{
}

__n128 sub_1CBBE2B18(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25FA100;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CBBE2B74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25FA100;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1CBBE2BB4(uint64_t a1, uint64_t a2)
{
  long long v3 = *(unint64_t **)(a2 + 8);
  unint64_t v4 = v3[1];
  if (v4 == *(void *)(a1 + 8) || v4 == *(void *)(a1 + 16))
  {
    unint64_t v6 = sub_1CB8F1DC4(*(unint64_t **)(a2 + 8));
    if (v5 == 1) {
    if (v6 <= *(unsigned int *)(a1 + 24))
    }
      return 1;
  }
  unint64_t v8 = sub_1CB8F1DC4(v3);
  if (v7 == 1) {
  if (v3[1] != *(void *)(a1 + 32))
  }
    return 0;
  unint64_t v10 = sub_1CB8F1DC4(v3);
  if (v9 == 1) {
  if (v10 > *(unsigned int *)(a1 + 40))
  }
    return 0;
  if ((v8 >> 5) <= 0xB) {
    return (0x2FFu >> (v8 >> 5)) & 1;
  }
  return 1;
}

void sub_1CBBE2CC0()
{
}

__n128 sub_1CBBE2CD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = &unk_1F25FA148;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1CBBE2D30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25FA148;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE2D70(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = **(void **)(a2 + 8);
  int64x2_t v3 = vdupq_n_s64(v2);
  return (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 8)), (int32x4_t)vceqq_s64(v3, *(int64x2_t *)(a1 + 24)))), 0xFuLL))) & 1) != 0|| v2 == *(void *)(a1 + 40);
}

void sub_1CBBE2DC4()
{
}

__n128 sub_1CBBE2DD8(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v2 = &unk_1F25FA190;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  return result;
}

__n128 sub_1CBBE2E34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25FA190;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1CBBE2E74(int64x2_t *a1, uint64_t a2)
{
  long long v3 = *(unint64_t **)(a2 + 8);
  unint64_t v6 = *v3;
  unint64_t v4 = v3 + 1;
  unint64_t v5 = v6;
  if (v6 != a1->i64[1])
  {
    int64x2_t v7 = vdupq_n_s64(v5);
    if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v7, a1[1]), (int32x4_t)vceqq_s64(v7, a1[2]))), 0xFuLL))) & 1) == 0)return 0; {
  }
    }
  unint64_t v8 = sub_1CB8F1DC4(v4);
  if (v9 == 1)
  {
    unint64_t v11 = v8;
    unint64_t v8 = v11;
  }
  return v8 <= a1[3].u32[0];
}

uint64_t sub_1CBBE2F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v5 = a5 & 0x7FFFFFFF;
  if ((*(unsigned char *)(*(void *)(a3 + 264)
                 + 24
                 * (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a2 + 24) + 16 * v5) & 0xFFFFFFFFFFFFFFF8)
                                        + 24)
                  + *(_DWORD *)(a3 + 272) * ((*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 3))) & 0x1F) != 0)
    return 1;
  int64x2_t v7 = (void *)(a4 + 408);
  unint64_t v8 = *(unsigned int *)(a4 + 416);
  BOOL v9 = v5 >= v8;
  unint64_t v10 = v5 - v8;
  if (v9)
  {
    sub_1CB9153B8((uint64_t)v7, v10 + 1, *(void *)(a4 + 424));
LABEL_11:
    llvm::LiveIntervals::createInterval();
  }
  uint64_t v11 = *(void *)(*v7 + 8 * v5);
  if (!v11) {
    goto LABEL_11;
  }
  uint64_t v12 = *(int8x8_t **)(v11 + 104);
  if (!v12) {
    return 0;
  }
  do
  {
    char v13 = vaddlv_u8((uint8x8_t)vcnt_s8(v12[14]));
    uint64_t result = v13 & 1;
    if (v13) {
      break;
    }
    uint64_t v12 = (int8x8_t *)v12[13];
  }
  while (v12);
  return result;
}

void sub_1CBBE3028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  v182[8] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v174 = *(void *)(v4 + 40);
  uint64_t v175 = (*(uint64_t (**)(void))(**(void **)(v4 + 16) + 176))(*(void *)(v4 + 16));
  uint64_t v7 = *(void *)(v4 + 328);
  uint64_t v173 = v4 + 320;
  if (v7 == v4 + 320)
  {
    uint64_t v167 = a1 + 744;
    goto LABEL_69;
  }
  int v8 = 0;
  uint64_t v168 = (void *)(a3 + 408);
  uint64_t v165 = v4;
  do
  {
    int v171 = v8;
    BOOL v9 = (unsigned char *)(v7 + 48);
    uint64_t v170 = v7;
    for (uint64_t i = *(unsigned char **)(v7 + 56); i != v9; uint64_t i = (unsigned char *)*((void *)i + 1))
    {
      LODWORD(v177) = 0;
      uint64_t v11 = sub_1CBE52E8C(**((unsigned __int16 **)i + 2));
      if ((v11 & 0xFF00000000) == 0
        || ((v11 - 64) <= 0x3A
          ? (BOOL v12 = ((1 << (v11 - 64)) & 0x60001F460000001) == 0)
          : (BOOL v12 = 1),
            v12 && ((v11 - 147) <= 0x14 ? (BOOL v13 = ((1 << (v11 + 109)) & 0x1E0001) == 0) : (BOOL v13 = 1), v13)))
      {
        if (!(*(unsigned int (**)(uint64_t, unsigned char *, void **))(*(void *)v6 + 64))(v6, i, &v177)) {
          goto LABEL_17;
        }
      }
      int v17 = (_DWORD *)*((void *)i + 4);
      unint64_t v18 = *(void *)(*(void *)(v174 + 24) + 16 * (v17[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
      if ((*(unsigned char *)(*(void *)(v175 + 264)
                     + 24
                     * (*(unsigned __int16 *)(*(void *)v18 + 24)
                      + *(_DWORD *)(v175 + 272)
                      * ((*(void *)(v175 + 248) - *(void *)(v175 + 240)) >> 3))) & 0x1F) != 0
        || sub_1CBBE42E4(*(void *)(*(void *)(v174 + 24) + 16 * (v17[1] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (*v17 >> 8) & 0xFFF, v175))
      {
        goto LABEL_39;
      }
      uint64_t v19 = v17[1];
      if ((v19 & 0x80000000) != 0) {
        uint64_t v20 = (unsigned int **)(*(void *)(v174 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v20 = (unsigned int **)(*(void *)(v174 + 272) + 8 * v19);
      }
      unsigned int v21 = *v20;
      if (*v20)
      {
        unsigned int v27 = *v21;
        if ((*v21 & 0x1000000) != 0
          || (v21 = (unsigned int *)*((void *)v21 + 3)) != 0 && (unsigned int v27 = *v21, (*v21 & 0x1000000) != 0))
        {
          do
          {
            if (sub_1CBBE42E4(v18, (v27 >> 8) & 0xFFF, v175)) {
              goto LABEL_39;
            }
            unsigned int v21 = (unsigned int *)*((void *)v21 + 3);
            if (!v21) {
              break;
            }
            unsigned int v27 = *v21;
          }
          while ((*v21 & 0x1000000) != 0);
          LODWORD(v19) = v17[1];
        }
      }
      unint64_t v22 = *(unsigned int *)(a3 + 416);
      BOOL v23 = (v19 & 0x7FFFFFFF) >= v22;
      unint64_t v24 = (v19 & 0x7FFFFFFF) - v22;
      if (v23)
      {
        sub_1CB9153B8((uint64_t)v168, v24 + 1, *(void *)(a3 + 424));
LABEL_240:
        operator new();
      }
      uint64_t v25 = *(void *)(*v168 + 8 * (v19 & 0x7FFFFFFF));
      if (!v25) {
        goto LABEL_240;
      }
      unsigned int v26 = *(int8x8_t **)(v25 + 104);
      if (v26)
      {
        while ((vaddlv_u8((uint8x8_t)vcnt_s8(v26[14])) & 1) == 0)
        {
          unsigned int v26 = (int8x8_t *)v26[13];
          if (!v26) {
            goto LABEL_32;
          }
        }
LABEL_39:
        uint64_t v180 = i;
        sub_1CBB239A4(a1 + 576, &v180);
        unint64_t v28 = *(_DWORD *)(*((void *)i + 4) + 4) & 0x7FFFFFFF;
        unint64_t v29 = *(unsigned int *)(a3 + 416);
        BOOL v23 = v28 >= v29;
        unint64_t v30 = v28 - v29;
        if (v23)
        {
          sub_1CB9153B8((uint64_t)v168, v30 + 1, *(void *)(a3 + 424));
LABEL_246:
          llvm::LiveIntervals::createInterval();
        }
        uint64_t v31 = *(void *)(*v168 + 8 * v28);
        if (!v31) {
          goto LABEL_246;
        }
        uint64_t v180 = 0;
        if ((sub_1CBBE5938(*(void *)(a1 + 624), *(_DWORD *)(a1 + 640), v31, &v180) & 1) == 0)
        {
          unsigned int v32 = *(_DWORD *)(a1 + 640);
          int v33 = *(_DWORD *)(a1 + 632);
          if (4 * v33 + 4 >= 3 * v32)
          {
            v32 *= 2;
          }
          else if (v32 + ~v33 - *(_DWORD *)(a1 + 636) > v32 >> 3)
          {
            goto LABEL_44;
          }
          sub_1CBBE59C0(a1 + 624, v32);
          uint64_t v180 = 0;
          sub_1CBBE5938(*(void *)(a1 + 624), *(_DWORD *)(a1 + 640), v31, &v180);
LABEL_44:
          uint64_t v34 = v180;
          ++*(_DWORD *)(a1 + 632);
          if (*v34 != -4096) {
            --*(_DWORD *)(a1 + 636);
          }
          *uint64_t v34 = v31;
          uint64_t v14 = *(uint64_t **)(a1 + 656);
          unint64_t v35 = *(void *)(a1 + 664);
          if ((unint64_t)v14 >= v35)
          {
            int v37 = *(void **)(a1 + 648);
            uint64_t v38 = v14 - v37;
            unint64_t v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 61) {
              abort();
            }
            uint64_t v40 = v35 - (void)v37;
            if (v40 >> 2 > v39) {
              unint64_t v39 = v40 >> 2;
            }
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
            }
            unint64_t v166 = v39;
            if (v39)
            {
              if (v39 >> 61) {
                sub_1CB833614();
              }
              uint64_t v41 = (char *)operator new(8 * v39);
            }
            else
            {
              uint64_t v41 = 0;
            }
            int v16 = (uint64_t *)&v41[8 * v38];
            *int v16 = v31;
            int v36 = v16 + 1;
            if (v14 != v37)
            {
              do
              {
                uint64_t v15 = *--v14;
                *--int v16 = v15;
              }
              while (v14 != v37);
              uint64_t v14 = *(uint64_t **)(a1 + 648);
            }
            *(void *)(a1 + 648) = v16;
            *(void *)(a1 + 656) = v36;
            *(void *)(a1 + 664) = &v41[8 * v166];
            if (v14) {
              operator delete(v14);
            }
          }
          else
          {
            *uint64_t v14 = v31;
            int v36 = v14 + 1;
          }
          *(void *)(a1 + 656) = v36;
        }
LABEL_17:
        if ((*i & 4) != 0) {
          continue;
        }
        goto LABEL_18;
      }
LABEL_32:
      if (i) {
        goto LABEL_17;
      }
LABEL_18:
      while ((*((_WORD *)i + 22) & 8) != 0)
        uint64_t i = (unsigned char *)*((void *)i + 1);
    }
    int v8 = v171 + 1;
    uint64_t v7 = *(void *)(v170 + 8);
  }
  while (v7 != v173);
  uint64_t v167 = a1 + 744;
  if (v171 == -1)
  {
    uint64_t v4 = v165;
  }
  else
  {
    unint64_t v42 = (4 * v8 / 3u + 1) | ((unint64_t)(4 * v8 / 3u + 1) >> 1);
    unint64_t v43 = v42 | (v42 >> 2) | ((v42 | (v42 >> 2)) >> 4);
    unsigned int v44 = ((v43 | (v43 >> 8)) >> 16) | v43 | (v43 >> 8);
    uint64_t v4 = v165;
    if (*(_DWORD *)(a1 + 760) <= v44) {
      sub_1CBBE5AFC(a1 + 744, v44 + 1);
    }
  }
LABEL_69:
  uint64_t v45 = *(void *)(v4 + 328);
  if (v45 != v173)
  {
    int v46 = (void *)(a3 + 408);
    do
    {
      int v47 = *(uint64_t **)(a1 + 600);
      uint64_t v48 = *(uint64_t **)(a1 + 608);
      while (v47 != v48)
      {
        uint64_t v49 = *v47;
        int v50 = *(_DWORD *)(*(void *)(*v47 + 32) + 4);
        uint64_t v51 = v50 & 0x7FFFFFFF;
        uint64_t v52 = *(unsigned int *)(a3 + 416);
        if ((v50 & 0x7FFFFFFFu) >= v52)
        {
          sub_1CB9153B8(a3 + 408, v51 - v52 + 1, *(void *)(a3 + 424));
LABEL_221:
          operator new();
        }
        uint64_t v53 = *(void *)(*v46 + 8 * v51);
        if (!v53) {
          goto LABEL_221;
        }
        uint64_t v54 = llvm::LiveIntervals::intervalIsInOneMBB(a3, v53);
        if (!v54)
        {
          uint64_t v55 = *(void *)(a1 + 672);
          uint64_t v56 = *(unsigned int *)(a1 + 688);
          if (v56)
          {
            unsigned int v57 = v56 - 1;
            uint64_t v58 = (uint64_t *)(v55 + 32 * ((v56 - 1) & ((v49 >> 4) ^ (v49 >> 9))));
            uint64_t v59 = *v58;
            if (*v58 == v49) {
              goto LABEL_80;
            }
            int v101 = 1;
            LODWORD(v102) = v57 & ((v49 >> 4) ^ (v49 >> 9));
            while (v59 != -4096)
            {
              int v103 = v102 + v101++;
              uint64_t v102 = v103 & v57;
              uint64_t v59 = *(void *)(v55 + 32 * v102);
              if (v59 == v49)
              {
                uint64_t v58 = (uint64_t *)(v55 + 32 * v102);
                goto LABEL_80;
              }
            }
          }
          uint64_t v58 = (uint64_t *)(v55 + 32 * v56);
LABEL_80:
          if (v58 != (uint64_t *)(v55 + 32 * v56))
          {
            unint64_t v60 = v58[1];
            unint64_t v61 = v58[2];
            uint64_t v62 = v58[3];
            goto LABEL_82;
          }
          __int16 v131 = *(_WORD *)(v49 + 44);
          unint64_t v132 = v49;
          if ((v131 & 4) != 0)
          {
            do
              unint64_t v132 = *(void *)v132 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v132 + 44) & 4) != 0);
          }
          uint64_t v133 = v49;
          if ((v131 & 8) != 0)
          {
            do
              uint64_t v133 = *(void *)(v133 + 8);
            while ((*(_WORD *)(v133 + 44) & 8) != 0);
          }
          unint64_t v134 = *(void *)(v133 + 8);
          if (v132 != v134)
          {
            while (1)
            {
              unsigned int v135 = **(unsigned __int16 **)(v132 + 16);
              BOOL v68 = v135 > 0x17;
              int v136 = (1 << v135) & 0x83E000;
              if (v68 || v136 == 0) {
                break;
              }
              unint64_t v132 = *(void *)(v132 + 8);
              if (v132 == v134)
              {
                unint64_t v132 = v134;
                break;
              }
            }
          }
          uint64_t v138 = *(void *)(a3 + 288);
          uint64_t v139 = *(void *)(v138 + 368);
          uint64_t v140 = *(unsigned int *)(v138 + 384);
          if (v140)
          {
            LODWORD(v141) = ((v132 >> 4) ^ (v132 >> 9)) & (v140 - 1);
            int v142 = (uint64_t *)(v139 + 16 * v141);
            uint64_t v143 = *v142;
            if (v132 == *v142) {
              goto LABEL_178;
            }
            int v160 = 1;
            while (v143 != -4096)
            {
              int v161 = v141 + v160++;
              uint64_t v141 = v161 & (v140 - 1);
              uint64_t v143 = *(void *)(v139 + 16 * v141);
              if (v132 == v143)
              {
                int v142 = (uint64_t *)(v139 + 16 * v141);
                goto LABEL_178;
              }
            }
          }
          int v142 = (uint64_t *)(v139 + 16 * v140);
LABEL_178:
          uint64_t v144 = *(unsigned int *)(*(void *)(v49 + 32) + 4);
          uint64_t v169 = v142[1];
          unint64_t v145 = v144 & 0x7FFFFFFF;
          unint64_t v146 = *(unsigned int *)(a3 + 416);
          BOOL v23 = v145 >= v146;
          unint64_t v147 = v145 - v146;
          if (v23)
          {
            sub_1CB9153B8(a3 + 408, v147 + 1, *(void *)(a3 + 424));
LABEL_250:
            llvm::LiveIntervals::createInterval();
          }
          uint64_t v172 = *(void *)(*v46 + 8 * v145);
          if (!v172) {
            goto LABEL_250;
          }
          uint64_t v176 = *(void *)(v49 + 24);
          uint64_t v148 = *(void *)(*(void *)(v176 + 32) + 40);
          uint64_t v180 = v182;
          uint64_t v181 = 0x400000000;
          if ((v144 & 0x80000000) != 0) {
            unint64_t v149 = (uint64_t *)(*(void *)(v148 + 24) + 16 * v145 + 8);
          }
          else {
            unint64_t v149 = (uint64_t *)(*(void *)(v148 + 272) + 8 * v144);
          }
          uint64_t v126 = *v149;
          if (!*v149)
          {
LABEL_235:
            unsigned int v123 = 0;
            unint64_t v106 = (char *)v182;
            goto LABEL_185;
          }
          while ((*(unsigned char *)(v126 + 3) & 1) != 0)
          {
            uint64_t v126 = *(void *)(v126 + 24);
            if (!v126) {
              goto LABEL_235;
            }
          }
          unsigned int v123 = 0;
          unint64_t v125 = *(void *)(v126 + 8);
LABEL_138:
          __int16 v109 = *(_WORD *)(v125 + 44);
          unint64_t v110 = v125;
          if ((v109 & 4) != 0)
          {
            do
              unint64_t v110 = *(void *)v110 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v110 + 44) & 4) != 0);
          }
          unint64_t v111 = v125;
          if ((v109 & 8) != 0)
          {
            do
              unint64_t v111 = *(void *)(v111 + 8);
            while ((*(_WORD *)(v111 + 44) & 8) != 0);
          }
          unint64_t v112 = *(void *)(v111 + 8);
          if (v110 != v112)
          {
            while (1)
            {
              unsigned int v113 = **(unsigned __int16 **)(v110 + 16);
              BOOL v68 = v113 > 0x17;
              int v114 = (1 << v113) & 0x83E000;
              if (v68 || v114 == 0) {
                break;
              }
              unint64_t v110 = *(void *)(v110 + 8);
              if (v110 == v112)
              {
                unint64_t v110 = v112;
                break;
              }
            }
          }
          uint64_t v116 = *(void *)(a3 + 288);
          uint64_t v117 = *(void *)(v116 + 368);
          uint64_t v118 = *(unsigned int *)(v116 + 384);
          if (v118)
          {
            LODWORD(v119) = ((v110 >> 4) ^ (v110 >> 9)) & (v118 - 1);
            uint64_t v120 = (uint64_t *)(v117 + 16 * v119);
            uint64_t v121 = *v120;
            if (v110 == *v120) {
              goto LABEL_148;
            }
            int v127 = 1;
            while (v121 != -4096)
            {
              int v128 = v119 + v127++;
              uint64_t v119 = v128 & (v118 - 1);
              uint64_t v121 = *(void *)(v117 + 16 * v119);
              if (v110 == v121)
              {
                uint64_t v120 = (uint64_t *)(v117 + 16 * v119);
                goto LABEL_148;
              }
            }
          }
          uint64_t v120 = (uint64_t *)(v117 + 16 * v118);
LABEL_148:
          if (v123 >= HIDWORD(v181)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v122 = (char *)v180 + 16 * v123;
          *uint64_t v122 = v120[1];
          v122[1] = v125;
          unsigned int v123 = v181 + 1;
          LODWORD(v181) = v181 + 1;
          uint64_t v124 = v126;
          while (1)
          {
            uint64_t v124 = *(void *)(v124 + 24);
            if (!v124) {
              break;
            }
            if ((*(unsigned char *)(v124 + 3) & 1) == 0)
            {
              unint64_t v125 = *(void *)(v124 + 8);
              if (v125 != *(void *)(v126 + 8))
              {
                uint64_t v126 = v124;
                goto LABEL_138;
              }
            }
          }
          unint64_t v106 = (char *)v180;
LABEL_185:
          if (llvm::LiveIntervals::intervalIsInOneMBB(a3, v172))
          {
            unint64_t v162 = 126 - 2 * __clz(v123);
            if (v123) {
              uint64_t v163 = v162;
            }
            else {
              uint64_t v163 = 0;
            }
            sub_1CBBE4900((unint64_t)v106, (uint64_t *)&v106[16 * v123], v163, 1);
            if (!v181)
            {
              uint64_t v150 = v179;
              long long v177 = v179;
              uint64_t v178 = 0x400000000;
              uint64_t v151 = (uint64_t *)v179;
              goto LABEL_214;
            }
            uint64_t v164 = 0;
            unint64_t v106 = (char *)v180;
            unint64_t v152 = (char *)v180 + 16 * v181;
            while (((*(void *)((char *)v180 + v164) >> 1) & 3 | *(_DWORD *)((*(void *)((unsigned char *)v180 + v164) & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 24)) <= (*(_DWORD *)((v169 & 0xFFFFFFFFFFFFFFF8) + 24) | (v169 >> 1) & 3))
            {
              v164 += 16;
              if (16 * v181 == v164) {
                goto LABEL_274;
              }
            }
            unint64_t v61 = *(void *)((char *)v180 + v164 + 8);
            if (!v61)
            {
LABEL_274:
              long long v177 = v179;
              uint64_t v178 = 0x400000000;
              goto LABEL_188;
            }
            uint64_t v62 = 0;
          }
          else
          {
            uint64_t v150 = v179;
            long long v177 = v179;
            uint64_t v178 = 0x400000000;
            uint64_t v151 = (uint64_t *)v179;
            if (v123)
            {
              unint64_t v152 = &v106[16 * v123];
LABEL_188:
              unsigned int v108 = 0;
              do
              {
                uint64_t v104 = *((void *)v106 + 1);
                if (*(void *)(v104 + 24) == v176 || v181 == 1)
                {
                  if (v108 >= HIDWORD(v178)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  unsigned int v107 = (char *)v177 + 16 * v108;
                  *unsigned int v107 = *(void *)v106;
                  v107[1] = v104;
                  unsigned int v108 = v178 + 1;
                  LODWORD(v178) = v178 + 1;
                }
                v106 += 16;
              }
              while (v106 != v152);
              uint64_t v150 = v177;
              uint64_t v151 = (uint64_t *)((char *)v177 + 16 * v108);
              if (v108)
              {
                uint64_t v153 = 126 - 2 * __clz(v108);
                goto LABEL_192;
              }
            }
LABEL_214:
            uint64_t v153 = 0;
LABEL_192:
            sub_1CBBE4900((unint64_t)v150, v151, v153, 1);
            if (v178)
            {
              uint64_t v154 = (unint64_t *)((char *)v177 + 8);
              uint64_t v155 = 16 * v178;
              while (((*(v154 - 1) >> 1) & 3 | *(_DWORD *)((*(v154 - 1) & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v169 & 0xFFFFFFFFFFFFFFF8) + 24) | (v169 >> 1) & 3))
              {
                unint64_t v61 = 0;
                v154 += 2;
                v155 -= 16;
                if (!v155) {
                  goto LABEL_196;
                }
              }
              unint64_t v61 = *v154;
            }
            else
            {
              unint64_t v61 = 0;
            }
LABEL_196:
            if (v177 != v179) {
              free(v177);
            }
            if (v61) {
              uint64_t v62 = 0;
            }
            else {
              uint64_t v62 = v172;
            }
          }
          long long v177 = 0;
          char v156 = sub_1CBBE572C(*(void *)(a1 + 672), *(_DWORD *)(a1 + 688), v49, &v177);
          unint64_t v157 = v177;
          if ((v156 & 1) == 0)
          {
            int v158 = *(_DWORD *)(a1 + 680);
            unsigned int v159 = *(_DWORD *)(a1 + 688);
            if (4 * v158 + 4 >= 3 * v159)
            {
              v159 *= 2;
            }
            else if (v159 + ~v158 - *(_DWORD *)(a1 + 684) > v159 >> 3)
            {
              goto LABEL_204;
            }
            sub_1CBBE57B4(a1 + 672, v159);
            long long v177 = 0;
            sub_1CBBE572C(*(void *)(a1 + 672), *(_DWORD *)(a1 + 688), v49, &v177);
            unint64_t v157 = v177;
LABEL_204:
            ++*(_DWORD *)(a1 + 680);
            if (*v157 != -4096) {
              --*(_DWORD *)(a1 + 684);
            }
            void *v157 = v49;
            v157[1] = 0;
            v157[2] = 0;
            v157[3] = 0;
          }
          v157[1] = v49;
          v157[2] = v61;
          v157[3] = v62;
          if (v180 != v182) {
            free(v180);
          }
          unint64_t v60 = v49;
LABEL_82:
          uint64_t v63 = *(void *)(a3 + 288);
          __int16 v64 = *(_WORD *)(v60 + 44);
          unint64_t v65 = v60;
          if ((v64 & 4) != 0)
          {
            do
              unint64_t v65 = *(void *)v65 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v65 + 44) & 4) != 0);
          }
          if ((v64 & 8) != 0)
          {
            do
              unint64_t v60 = *(void *)(v60 + 8);
            while ((*(_WORD *)(v60 + 44) & 8) != 0);
          }
          unint64_t v66 = *(void *)(v60 + 8);
          if (v65 != v66)
          {
            while (1)
            {
              unsigned int v67 = **(unsigned __int16 **)(v65 + 16);
              BOOL v68 = v67 > 0x17;
              int v69 = (1 << v67) & 0x83E000;
              if (v68 || v69 == 0) {
                break;
              }
              unint64_t v65 = *(void *)(v65 + 8);
              if (v65 == v66)
              {
                unint64_t v65 = v66;
                break;
              }
            }
          }
          uint64_t v71 = *(void *)(v63 + 368);
          uint64_t v72 = *(unsigned int *)(v63 + 384);
          if (v72)
          {
            LODWORD(v73) = ((v65 >> 4) ^ (v65 >> 9)) & (v72 - 1);
            int v74 = (uint64_t *)(v71 + 16 * v73);
            uint64_t v75 = *v74;
            if (v65 == *v74) {
              goto LABEL_92;
            }
            int v97 = 1;
            while (v75 != -4096)
            {
              int v98 = v73 + v97++;
              uint64_t v73 = v98 & (v72 - 1);
              uint64_t v75 = *(void *)(v71 + 16 * v73);
              if (v65 == v75)
              {
                int v74 = (uint64_t *)(v71 + 16 * v73);
                goto LABEL_92;
              }
            }
          }
          int v74 = (uint64_t *)(v71 + 16 * v72);
LABEL_92:
          uint64_t v76 = v74[1];
          if (v62)
          {
            BOOL v86 = (uint64_t *)(*(void *)v62 + 24 * *(unsigned int *)(v62 + 8) - 16);
          }
          else
          {
            __int16 v77 = *(_WORD *)(v61 + 44);
            unint64_t v78 = v61;
            if ((v77 & 4) != 0)
            {
              do
                unint64_t v78 = *(void *)v78 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v78 + 44) & 4) != 0);
            }
            if ((v77 & 8) != 0)
            {
              do
                unint64_t v61 = *(void *)(v61 + 8);
              while ((*(_WORD *)(v61 + 44) & 8) != 0);
            }
            uint64_t v79 = *(void *)(v61 + 8);
            if (v78 != v79)
            {
              while (1)
              {
                unsigned int v80 = **(unsigned __int16 **)(v78 + 16);
                BOOL v68 = v80 > 0x17;
                int v81 = (1 << v80) & 0x83E000;
                if (v68 || v81 == 0) {
                  break;
                }
                unint64_t v78 = *(void *)(v78 + 8);
                if (v78 == v79)
                {
                  unint64_t v78 = *(void *)(v61 + 8);
                  break;
                }
              }
            }
            if (v72)
            {
              LODWORD(v83) = ((v78 >> 4) ^ (v78 >> 9)) & (v72 - 1);
              unsigned int v84 = (uint64_t *)(v71 + 16 * v83);
              uint64_t v85 = *v84;
              if (v78 == *v84) {
                goto LABEL_103;
              }
              int v99 = 1;
              while (v85 != -4096)
              {
                int v100 = v83 + v99++;
                uint64_t v83 = v100 & (v72 - 1);
                uint64_t v85 = *(void *)(v71 + 16 * v83);
                if (v78 == v85)
                {
                  unsigned int v84 = (uint64_t *)(v71 + 16 * v83);
                  goto LABEL_103;
                }
              }
            }
            unsigned int v84 = (uint64_t *)(v71 + 16 * v72);
LABEL_103:
            BOOL v86 = v84 + 1;
          }
          uint64_t v87 = *v86;
          uint64_t v88 = *(unsigned int *)(v45 + 24);
          uint64_t v89 = *(void *)(v63 + 392);
          unsigned int v90 = *(_DWORD *)((v76 & 0xFFFFFFFFFFFFFFF8) + 24) | (v76 >> 1) & 3;
          unsigned int v91 = (*(void *)(v89 + 16 * v88) >> 1) & 3 | *(_DWORD *)((*(void *)(v89 + 16 * v88) & 0xFFFFFFFFFFFFFFF8)
                                                                                 + 24);
          if (v90 > v91 || v91 >= (*(_DWORD *)((v87 & 0xFFFFFFFFFFFFFFF8) + 24) | (v87 >> 1) & 3))
          {
            unsigned int v92 = (*(void *)(v89 + 16 * v88 + 8) >> 1) & 3 | *(_DWORD *)((*(void *)(v89 + 16 * v88 + 8) & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 24);
            if (v90 > v92 || v92 >= (*(_DWORD *)((v87 & 0xFFFFFFFFFFFFFFF8) + 24) | (v87 >> 1) & 3)) {
              goto LABEL_77;
            }
          }
          goto LABEL_108;
        }
        if (v54 != v45) {
          goto LABEL_77;
        }
LABEL_108:
        uint64_t v180 = 0;
        char v93 = sub_1CBBE5BD4(*(void *)(a1 + 744), *(_DWORD *)(a1 + 760), v45, &v180);
        uint64_t v94 = v180;
        if ((v93 & 1) == 0)
        {
          int v95 = *(_DWORD *)(a1 + 752);
          unsigned int v96 = *(_DWORD *)(a1 + 760);
          if (4 * v95 + 4 >= 3 * v96)
          {
            v96 *= 2;
          }
          else if (v96 + ~v95 - *(_DWORD *)(a1 + 756) > v96 >> 3)
          {
LABEL_111:
            ++*(_DWORD *)(a1 + 752);
            if (*v94 != -4096) {
              --*(_DWORD *)(a1 + 756);
            }
            *uint64_t v94 = v45;
            v94[1] = v94 + 3;
            *((_DWORD *)v94 + 4) = 0;
            *((_DWORD *)v94 + 5) = 0;
LABEL_114:
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          sub_1CBBE5AFC(v167, v96);
          uint64_t v180 = 0;
          sub_1CBBE5BD4(*(void *)(a1 + 744), *(_DWORD *)(a1 + 760), v45, &v180);
          uint64_t v94 = v180;
          goto LABEL_111;
        }
        uint64_t v130 = (char *)v180 + 16;
        unint64_t v129 = *((unsigned int *)v180 + 4);
        if (v129 >= *((unsigned int *)v180 + 5)) {
          goto LABEL_114;
        }
        *(void *)(*((void *)v180 + 1) + 8 * v129) = v49;
        ++*v130;
LABEL_77:
        ++v47;
      }
      uint64_t v45 = *(void *)(v45 + 8);
    }
    while (v45 != v173);
  }
}

BOOL sub_1CBBE42E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x11) {
    return (*(unsigned char *)(*(void *)(a3 + 264)
  }
                     + 24
                     * (*(unsigned __int16 *)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 200))(a3, a1, a2)+ 24)+ *(_DWORD *)(a3 + 272) * ((*(void *)(a3 + 248) - *(void *)(a3 + 240)) >> 3))) & 0x1F) != 0;
  return 1;
}

uint64_t sub_1CBBE4384(llvm::yaml::IO *a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v21 = 1;
  unsigned int v8 = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  if (*(unsigned char *)(a3 + 4)) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1);
  if (result)
  {
    if (!*(unsigned char *)(a3 + 4))
    {
LABEL_30:
      *(void *)a3 = *a4;
      return result;
    }
  }
  else if (!*(unsigned char *)(a3 + 4))
  {
    *(_DWORD *)a3 = 0;
    *(unsigned char *)(a3 + 4) = 1;
  }
  uint64_t v22 = 0;
  uint64_t result = (*(uint64_t (**)(llvm::yaml::IO *, uint64_t, void, uint64_t, char *, uint64_t *))(*(void *)a1 + 120))(a1, a2, 0, v9, &v21, &v22);
  if (!result)
  {
    if (!v21) {
      return result;
    }
    goto LABEL_30;
  }
  if ((*(uint64_t (**)(llvm::yaml::IO *))(*(void *)a1 + 16))(a1)) {
    goto LABEL_31;
  }
  uint64_t v11 = *((void *)a1 + 37);
  if (!v11) {
    goto LABEL_31;
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12 || *(_DWORD *)(v12 + 32) != 1) {
    goto LABEL_31;
  }
  uint64_t v14 = *(int **)(v12 + 72);
  unint64_t v15 = *(void *)(v12 + 80);
  unint64_t v16 = v15;
  do
  {
    unint64_t v17 = v16;
    if (!v16) {
      break;
    }
    --v16;
  }
  while (*((unsigned char *)v14 + v17 - 1) == 32);
  if (v17 < v15) {
    unint64_t v15 = v17;
  }
  if (v15 == 6
    && ((v18 = *v14, int v19 = *((unsigned __int16 *)v14 + 2), v18 == 1852796476) ? (v20 = v19 == 15973) : (v20 = 0), v20))
  {
    *(void *)a3 = *a4;
  }
  else
  {
LABEL_31:
    sub_1CD412CEC(a1, (int *)a3);
  }
  return (*(uint64_t (**)(llvm::yaml::IO *, uint64_t))(*(void *)a1 + 128))(a1, v22);
}

uint64_t sub_1CBBE458C(uint64_t a1)
{
  *(void *)a1 = &unk_1F25FA248;
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 768), 8);
  sub_1CBBE4828(a1 + 744);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 744), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 720), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 696), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 672), 8);
  unint64_t v2 = *(void **)(a1 + 648);
  if (v2)
  {
    *(void *)(a1 + 656) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 624), 8);
  long long v3 = *(void **)(a1 + 600);
  if (v3)
  {
    *(void *)(a1 + 608) = v3;
    operator delete(v3);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 576), 8);
  uint64_t v4 = *(void **)(a1 + 504);
  if (v4 != (void *)(a1 + 520)) {
    free(v4);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 456), 4);
  sub_1CBA6598C(a1 + 432);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 432), 8);
  unint64_t v5 = *(char **)(a1 + 256);
  uint64_t v6 = *(unsigned int *)(a1 + 264);
  if (v6)
  {
    uint64_t v18 = 16 * v6;
    int v19 = v5 - 16;
    do
    {
      BOOL v20 = *(void ***)&v19[v18];
      if ((v20 & 1) == 0 && v20)
      {
        if (*v20 != v20 + 2) {
          free(*v20);
        }
        MEMORY[0x1D25D9CE0]();
      }
      v18 -= 16;
    }
    while (v18);
    unint64_t v5 = *(char **)(a1 + 256);
  }
  if (v5 != (char *)(a1 + 272)) {
    free(v5);
  }
  sub_1CBBE4894((uint64_t *)(a1 + 232));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 232), 8);
  sub_1CBBE4894((uint64_t *)(a1 + 208));
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 208), 8);
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 184), 8);
  uint64_t v7 = *(unsigned int *)(a1 + 176);
  uint64_t v8 = *(void *)(a1 + 160);
  if (v7)
  {
    uint64_t v9 = (uint64_t *)(v8 + 8);
    uint64_t v10 = 16 * v7;
    do
    {
      if ((*(v9 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        uint64_t v11 = *v9;
        *uint64_t v9 = 0;
        if (v11) {
          (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        }
      }
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
    uint64_t v8 = *(void *)(a1 + 160);
  }
  MEMORY[0x1D25D9CD0](v8, 8);
  uint64_t v12 = *(char **)(a1 + 16);
  uint64_t v13 = *(unsigned int *)(a1 + 24);
  if (v13)
  {
    uint64_t v15 = 8 * v13;
    unint64_t v16 = v12 - 8;
    do
    {
      uint64_t v17 = *(void *)&v16[v15];
      *(void *)&v16[v15] = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
      }
      v15 -= 8;
    }
    while (v15);
    uint64_t v12 = *(char **)(a1 + 16);
  }
  if (v12 != (char *)(a1 + 32)) {
    free(v12);
  }
  return a1;
}

void sub_1CBBE4828(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 24 * v1;
    uint64_t v3 = *(void *)a1 + 24;
    do
    {
      uint64_t v4 = *(void *)(v3 - 24);
      if (v4 != -4096 && v4 != -8192)
      {
        unint64_t v5 = *(void **)(v3 - 16);
        if ((void *)v3 != v5) {
          free(v5);
        }
      }
      v3 += 24;
      v2 -= 24;
    }
    while (v2);
  }
}

void sub_1CBBE4894(uint64_t *a1)
{
  uint64_t v1 = *((unsigned int *)a1 + 4);
  if (v1)
  {
    uint64_t v2 = *a1;
    uint64_t v3 = 32 * v1;
    do
    {
      if (*(void *)v2 != -4096 && *(void *)v2 != -8192 && *(char *)(v2 + 31) < 0)
      {
        uint64_t v4 = v3;
        uint64_t v5 = v2;
        operator delete(*(void **)(v2 + 8));
        uint64_t v3 = v4;
        uint64_t v2 = v5;
      }
      v2 += 32;
      v3 -= 32;
    }
    while (v3);
  }
}

unint64_t sub_1CBBE4900(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = (uint64_t *)result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          uint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0:
              case 1:
                return result;
              case 2:
                uint64_t v47 = *v10;
                uint64_t v48 = *(a2 - 2);
                if (((v48 >> 1) & 3 | *(_DWORD *)((v48 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v10 >> 1) & 3))
                {
                  uint64_t v49 = v10[1];
                  uint64_t v50 = *(a2 - 1);
                  *uint64_t v10 = v48;
                  v10[1] = v50;
                  *(a2 - 2) = v47;
                  *(a2 - 1) = v49;
                }
                break;
              case 3:
                uint64_t result = (unint64_t)sub_1CBBE534C(v10, v10 + 2, a2 - 2);
                break;
              case 4:
                uint64_t result = (unint64_t)sub_1CBBE562C(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5:
                uint64_t result = (unint64_t)sub_1CBBE51FC(v10, v10 + 2, v10 + 4, v10 + 6, a2 - 2);
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v51 = v10 + 2;
            BOOL v53 = v10 == a2 || v51 == a2;
            if (a4)
            {
              if (!v53)
              {
                uint64_t v54 = 0;
                uint64_t v55 = v10;
                do
                {
                  uint64_t v56 = v51;
                  uint64_t v57 = *v55;
                  uint64_t v58 = v55[2];
                  unsigned int v59 = (v58 >> 1) & 3 | *(_DWORD *)((v58 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if (v59 < (*(_DWORD *)((*v55 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v55 >> 1) & 3))
                  {
                    uint64_t v60 = v55[3];
                    uint64_t v61 = v54;
                    while (1)
                    {
                      uint64_t v62 = (char *)v10 + v61;
                      uint64_t v63 = *(uint64_t *)((char *)v10 + v61 + 8);
                      *((void *)v62 + 2) = v57;
                      *((void *)v62 + 3) = v63;
                      if (!v61) {
                        break;
                      }
                      uint64_t v57 = *((void *)v62 - 2);
                      v61 -= 16;
                      if (v59 >= ((v57 >> 1) & 3 | *(_DWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 24)))
                      {
                        __int16 v64 = (uint64_t *)((char *)v10 + v61 + 16);
                        goto LABEL_83;
                      }
                    }
                    __int16 v64 = v10;
LABEL_83:
                    uint64_t *v64 = v58;
                    v64[1] = v60;
                  }
                  uint64_t v51 = v56 + 2;
                  v54 += 16;
                  uint64_t v55 = v56;
                }
                while (v56 + 2 != a2);
              }
            }
            else if (!v53)
            {
              int v100 = v10 + 3;
              do
              {
                int v101 = v51;
                uint64_t v102 = *v9;
                uint64_t v103 = v9[2];
                unsigned int v104 = (v103 >> 1) & 3 | *(_DWORD *)((v103 & 0xFFFFFFFFFFFFFFF8) + 24);
                if (v104 < (*(_DWORD *)((*v9 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v9 >> 1) & 3))
                {
                  uint64_t v105 = v9[3];
                  unint64_t v106 = v100;
                  do
                  {
                    unsigned int v107 = v106;
                    *(v106 - 1) = v102;
                    uint64_t v108 = *(v106 - 2);
                    v106 -= 2;
                    *unsigned int v107 = v108;
                    uint64_t v102 = *(v107 - 5);
                  }
                  while (v104 < ((v102 >> 1) & 3 | *(_DWORD *)((v102 & 0xFFFFFFFFFFFFFFF8) + 24)));
                  *(v106 - 1) = v103;
                  *unint64_t v106 = v105;
                }
                uint64_t v51 = v101 + 2;
                v100 += 2;
                uint64_t v9 = v101;
              }
              while (v101 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v65 = (unint64_t)(v12 - 2) >> 1;
              int64_t v66 = v65;
              do
              {
                int64_t v67 = v66;
                if (v65 >= v66)
                {
                  uint64_t v68 = (2 * v66) | 1;
                  int v69 = &v10[2 * v68];
                  if (2 * v67 + 2 < v12)
                  {
                    uint64_t v70 = *v69;
                    if (((*v69 >> 1) & 3 | *(_DWORD *)((*v69 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v69[2] & 0xFFFFFFFFFFFFFFF8) + 24) | (v69[2] >> 1) & 3))
                    {
                      uint64_t v70 = v69[2];
                      v69 += 2;
                      uint64_t v68 = 2 * v67 + 2;
                    }
                  }
                  else
                  {
                    uint64_t v70 = *v69;
                  }
                  uint64_t v71 = &v10[2 * v67];
                  uint64_t v72 = *v71;
                  uint64_t result = (*v71 >> 1) & 3;
                  unsigned int v73 = result | *(_DWORD *)((*v71 & 0xFFFFFFFFFFFFFFF8) + 24);
                  if ((*(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24) | (v70 >> 1) & 3) >= v73)
                  {
                    uint64_t v74 = v71[1];
                    do
                    {
                      uint64_t result = (unint64_t)v71;
                      uint64_t v71 = v69;
                      uint64_t v75 = v69[1];
                      *(void *)uint64_t result = v70;
                      *(void *)(result + 8) = v75;
                      if (v65 < v68) {
                        break;
                      }
                      uint64_t v76 = (2 * v68) | 1;
                      int v69 = &v10[2 * v76];
                      uint64_t v68 = 2 * v68 + 2;
                      if (v68 < v12)
                      {
                        uint64_t v70 = v69[2];
                        unsigned int v77 = (*v69 >> 1) & 3 | *(_DWORD *)((*v69 & 0xFFFFFFFFFFFFFFF8) + 24);
                        unsigned int v78 = *(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24) | (v70 >> 1) & 3;
                        if (v77 < v78) {
                          v69 += 2;
                        }
                        else {
                          uint64_t v70 = *v69;
                        }
                        if (v77 >= v78) {
                          uint64_t v68 = v76;
                        }
                      }
                      else
                      {
                        uint64_t v70 = *v69;
                        uint64_t v68 = v76;
                      }
                      uint64_t result = (v70 >> 1) & 3 | *(_DWORD *)((v70 & 0xFFFFFFFFFFFFFFF8) + 24);
                    }
                    while (result >= v73);
                    *uint64_t v71 = v72;
                    v71[1] = v74;
                  }
                }
                int64_t v66 = v67 - 1;
              }
              while (v67);
              do
              {
                uint64_t v79 = 0;
                uint64_t v80 = *v10;
                uint64_t v81 = v10[1];
                uint64_t v82 = v10;
                do
                {
                  uint64_t v83 = (uint64_t)&v82[2 * v79 + 2];
                  uint64_t v84 = (2 * v79) | 1;
                  uint64_t v79 = 2 * v79 + 2;
                  if (v79 < v12)
                  {
                    unint64_t v87 = *(void *)(v83 + 16);
                    uint64_t result = *(void *)v83;
                    unsigned int v85 = (*(void *)v83 >> 1) & 3 | *(_DWORD *)((*(void *)v83 & 0xFFFFFFFFFFFFFFF8)
                                                                              + 24);
                    unsigned int v86 = *(_DWORD *)((v87 & 0xFFFFFFFFFFFFFFF8) + 24) | (v87 >> 1) & 3;
                    if (v85 < v86) {
                      v83 += 16;
                    }
                    else {
                      unint64_t v87 = *(void *)v83;
                    }
                    if (v85 >= v86) {
                      uint64_t v79 = v84;
                    }
                  }
                  else
                  {
                    unint64_t v87 = *(void *)v83;
                    uint64_t v79 = v84;
                  }
                  uint64_t v88 = *(void *)(v83 + 8);
                  *uint64_t v82 = v87;
                  v82[1] = v88;
                  uint64_t v82 = (void *)v83;
                }
                while (v79 <= (uint64_t)((unint64_t)(v12 - 2) >> 1));
                if ((uint64_t *)v83 == a2 - 2)
                {
                  *(void *)uint64_t v83 = v80;
                  *(void *)(v83 + 8) = v81;
                }
                else
                {
                  uint64_t v89 = *(a2 - 1);
                  *(void *)uint64_t v83 = *(a2 - 2);
                  *(void *)(v83 + 8) = v89;
                  *(a2 - 2) = v80;
                  *(a2 - 1) = v81;
                  uint64_t v90 = v83 - (void)v10 + 16;
                  if (v90 >= 17)
                  {
                    unint64_t v91 = (((unint64_t)v90 >> 4) - 2) >> 1;
                    unsigned int v92 = &v10[2 * v91];
                    unint64_t v93 = *(void *)v83;
                    uint64_t v94 = *v92;
                    unsigned int v95 = *(_DWORD *)((*(void *)v83 & 0xFFFFFFFFFFFFFFF8) + 24) | (*(void *)v83 >> 1) & 3;
                    if (((*v92 >> 1) & 3 | *(_DWORD *)((*v92 & 0xFFFFFFFFFFFFFFF8) + 24)) < v95)
                    {
                      uint64_t v96 = *(void *)(v83 + 8);
                      do
                      {
                        int v97 = (void *)v83;
                        uint64_t v83 = (uint64_t)v92;
                        uint64_t v98 = v92[1];
                        void *v97 = v94;
                        v97[1] = v98;
                        if (!v91) {
                          break;
                        }
                        unint64_t v91 = (v91 - 1) >> 1;
                        unsigned int v92 = &v10[2 * v91];
                        uint64_t v94 = *v92;
                        uint64_t result = (*v92 >> 1) & 3;
                      }
                      while ((result | *(_DWORD *)((*v92 & 0xFFFFFFFFFFFFFFF8) + 24)) < v95);
                      *(void *)uint64_t v83 = v93;
                      *(void *)(v83 + 8) = v96;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v12-- > 2);
            }
            return result;
          }
          unint64_t v13 = (unint64_t)v12 >> 1;
          uint64_t v14 = &v10[2 * ((unint64_t)v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            sub_1CBBE534C(v9, &v9[2 * ((unint64_t)v12 >> 1)], a2 - 2);
            sub_1CBBE534C(v9 + 2, v14 - 2, a2 - 4);
            sub_1CBBE534C(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = (unint64_t)sub_1CBBE534C(v14 - 2, v14, &v9[2 * v13 + 2]);
            uint64_t v15 = *v9;
            uint64_t v16 = v9[1];
            uint64_t v17 = v14[1];
            *uint64_t v9 = *v14;
            v9[1] = v17;
            *uint64_t v14 = v15;
            v14[1] = v16;
          }
          else
          {
            uint64_t result = (unint64_t)sub_1CBBE534C(&v9[2 * ((unint64_t)v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          uint64_t v18 = *v9;
          if (a4) {
            break;
          }
          unsigned int v19 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
          if (((*(v9 - 2) >> 1) & 3 | *(_DWORD *)((*(v9 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)) < v19) {
            goto LABEL_13;
          }
          if (v19 >= ((*(a2 - 2) >> 1) & 3 | *(_DWORD *)((*(a2 - 2) & 0xFFFFFFFFFFFFFFF8) + 24)))
          {
            int v36 = v9 + 2;
            do
            {
              uint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              v36 += 2;
            }
            while (v19 >= ((*v10 >> 1) & 3 | *(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24)));
          }
          else
          {
            uint64_t v10 = v9;
            do
            {
              uint64_t v35 = v10[2];
              v10 += 2;
            }
            while (v19 >= ((v35 >> 1) & 3 | *(_DWORD *)((v35 & 0xFFFFFFFFFFFFFFF8) + 24)));
          }
          int v37 = a2;
          if (v10 < a2)
          {
            int v37 = a2;
            do
            {
              uint64_t v38 = *(v37 - 2);
              v37 -= 2;
            }
            while (v19 < ((v38 >> 1) & 3 | *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24)));
          }
          uint64_t v39 = v9[1];
          if (v10 < v37)
          {
            uint64_t v40 = *v10;
            uint64_t v41 = *v37;
            do
            {
              uint64_t v42 = v10[1];
              uint64_t v43 = v37[1];
              *uint64_t v10 = v41;
              v10[1] = v43;
              *int v37 = v40;
              v37[1] = v42;
              do
              {
                uint64_t v44 = v10[2];
                v10 += 2;
                uint64_t v40 = v44;
              }
              while (v19 >= ((v44 >> 1) & 3 | *(_DWORD *)((v44 & 0xFFFFFFFFFFFFFFF8) + 24)));
              do
              {
                uint64_t v45 = *(v37 - 2);
                v37 -= 2;
                uint64_t v41 = v45;
              }
              while (v19 < ((v45 >> 1) & 3 | *(_DWORD *)((v45 & 0xFFFFFFFFFFFFFFF8) + 24)));
            }
            while (v10 < v37);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            uint64_t v46 = *(v10 - 1);
            *uint64_t v9 = *(v10 - 2);
            v9[1] = v46;
          }
          a4 = 0;
          *(v10 - 2) = v18;
          *(v10 - 1) = v39;
        }
        unsigned int v19 = *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24) | (v18 >> 1) & 3;
LABEL_13:
        uint64_t v20 = 0;
        uint64_t v21 = v9[1];
        do
        {
          uint64_t v22 = v9[v20 + 2];
          v20 += 2;
        }
        while (((v22 >> 1) & 3 | *(_DWORD *)((v22 & 0xFFFFFFFFFFFFFFF8) + 24)) < v19);
        BOOL v23 = &v9[v20];
        unint64_t v24 = a2;
        if (v20 == 2)
        {
          unint64_t v24 = a2;
          do
          {
            if (v23 >= v24) {
              break;
            }
            uint64_t v26 = *(v24 - 2);
            v24 -= 2;
          }
          while (((v26 >> 1) & 3 | *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v19);
        }
        else
        {
          do
          {
            uint64_t v25 = *(v24 - 2);
            v24 -= 2;
          }
          while (((v25 >> 1) & 3 | *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v19);
        }
        if (v23 >= v24)
        {
          uint64_t v10 = &v9[v20];
        }
        else
        {
          uint64_t v27 = *v24;
          uint64_t v10 = &v9[v20];
          unint64_t v28 = v24;
          do
          {
            uint64_t v29 = v10[1];
            uint64_t v30 = v28[1];
            *uint64_t v10 = v27;
            v10[1] = v30;
            *unint64_t v28 = v22;
            v28[1] = v29;
            do
            {
              uint64_t v31 = v10[2];
              v10 += 2;
              uint64_t v22 = v31;
            }
            while (((v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24)) < v19);
            do
            {
              uint64_t v32 = *(v28 - 2);
              v28 -= 2;
              uint64_t v27 = v32;
            }
            while (((v32 >> 1) & 3 | *(_DWORD *)((v32 & 0xFFFFFFFFFFFFFFF8) + 24)) >= v19);
          }
          while (v10 < v28);
        }
        if (v10 - 2 != v9)
        {
          uint64_t v33 = *(v10 - 1);
          *uint64_t v9 = *(v10 - 2);
          v9[1] = v33;
        }
        *(v10 - 2) = v18;
        *(v10 - 1) = v21;
        if (v23 >= v24) {
          break;
        }
LABEL_34:
        uint64_t result = sub_1CBBE4900(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v34 = sub_1CBBE5448(v9, v10 - 2);
      uint64_t result = sub_1CBBE5448(v10, a2);
      if (result) {
        break;
      }
      if (!v34) {
        goto LABEL_34;
      }
    }
    a2 = v10 - 2;
    if (!v34) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_1CBBE51FC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_1CBBE562C(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  if (((*a5 >> 1) & 3 | *(_DWORD *)((*a5 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a4 >> 1) & 3))
  {
    *a4 = *a5;
    *a5 = v11;
    uint64_t v12 = *a4;
    uint64_t v13 = a4[1];
    a4[1] = a5[1];
    a5[1] = v13;
    uint64_t v14 = *a3;
    if (((v12 >> 1) & 3 | *(_DWORD *)((v12 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3))
    {
      *a3 = v12;
      *a4 = v14;
      uint64_t v15 = *a3;
      uint64_t v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      uint64_t v17 = *a2;
      if (((v15 >> 1) & 3 | *(_DWORD *)((v15 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
      {
        *a2 = v15;
        *a3 = v17;
        uint64_t v18 = *a2;
        uint64_t v19 = a2[1];
        a2[1] = a3[1];
        a3[1] = v19;
        uint64_t v20 = *a1;
        if (((v18 >> 1) & 3 | *(_DWORD *)((v18 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
        {
          uint64_t v21 = a1[1];
          uint64_t v22 = a2[1];
          *a1 = v18;
          a1[1] = v22;
          *a2 = v20;
          a2[1] = v21;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CBBE534C(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *result;
  uint64_t v4 = *a2;
  unsigned int v5 = (*a2 >> 1) & 3 | *(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  unsigned int v6 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3;
  uint64_t v7 = *a3;
  unsigned int v8 = (*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v4;
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      uint64_t v13 = *result;
      if (((v11 >> 1) & 3 | *(_DWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3))
      {
        uint64_t v14 = result[1];
        uint64_t v15 = a2[1];
        *uint64_t result = v11;
        result[1] = v15;
        *a2 = v13;
        a2[1] = v14;
      }
    }
  }
  else if (v8 >= v5)
  {
    uint64_t v16 = result[1];
    uint64_t v17 = a2[1];
    *uint64_t result = v4;
    result[1] = v17;
    *a2 = v3;
    a2[1] = v16;
    if (((*a3 >> 1) & 3 | *(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24)) < v6)
    {
      uint64_t v18 = a3[1];
      *a2 = *a3;
      a2[1] = v18;
      *a3 = v3;
      a3[1] = v16;
    }
  }
  else
  {
    uint64_t v9 = result[1];
    uint64_t v10 = a3[1];
    *uint64_t result = v7;
    result[1] = v10;
    *a3 = v3;
    a3[1] = v9;
  }
  return result;
}

BOOL sub_1CBBE5448(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = *a1;
      uint64_t v7 = *(a2 - 2);
      if (((v7 >> 1) & 3 | *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
      {
        uint64_t v8 = a1[1];
        uint64_t v9 = *(a2 - 1);
        *a1 = v7;
        a1[1] = v9;
        *(a2 - 2) = v6;
        *(a2 - 1) = v8;
      }
      return result;
    case 3:
      sub_1CBBE534C(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1CBBE562C(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1CBBE51FC(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      uint64_t v10 = a1 + 4;
      sub_1CBBE534C(a1, a1 + 2, a1 + 4);
      uint64_t v11 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    uint64_t v14 = *v10;
    uint64_t v15 = *v11;
    unsigned int v16 = (*v11 >> 1) & 3 | *(_DWORD *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 24);
    if (v16 < (*(_DWORD *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v10 >> 1) & 3))
    {
      uint64_t v17 = v11[1];
      uint64_t v18 = v12;
      while (1)
      {
        uint64_t v19 = (uint64_t *)((char *)a1 + v18);
        uint64_t v20 = *(uint64_t *)((char *)a1 + v18 + 40);
        v19[6] = v14;
        v19[7] = v20;
        if (v18 == -32) {
          break;
        }
        uint64_t v14 = v19[2];
        v18 -= 16;
        if (v16 >= ((v14 >> 1) & 3 | *(_DWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24)))
        {
          uint64_t v21 = (uint64_t *)((char *)a1 + v18 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v21 = a1;
LABEL_12:
      uint64_t *v21 = v15;
      v21[1] = v17;
      if (++v13 == 8) {
        return v11 + 2 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 16;
    v11 += 2;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_1CBBE562C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_1CBBE534C(a1, a2, a3);
  uint64_t v9 = *a3;
  if (((*a4 >> 1) & 3 | *(_DWORD *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a3 >> 1) & 3))
  {
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    a3[1] = a4[1];
    a4[1] = v11;
    uint64_t v12 = *a2;
    if (((v10 >> 1) & 3 | *(_DWORD *)((v10 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a2 >> 1) & 3))
    {
      *a2 = v10;
      *a3 = v12;
      uint64_t v13 = *a2;
      uint64_t v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      uint64_t v15 = *a1;
      if (((v13 >> 1) & 3 | *(_DWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 24) | (*a1 >> 1) & 3))
      {
        uint64_t v16 = a1[1];
        uint64_t v17 = a2[1];
        *a1 = v13;
        a1[1] = v17;
        *a2 = v15;
        a2[1] = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1CBBE572C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unsigned int v5 = (void *)(a1 + 32 * v4);
    uint64_t v6 = *v5;
    if (*v5 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v7 = 0;
      int v8 = 1;
      while (v6 != -4096)
      {
        if (v7) {
          BOOL v9 = 0;
        }
        else {
          BOOL v9 = v6 == -8192;
        }
        if (v9) {
          uint64_t v7 = v5;
        }
        int v10 = v4 + v8++;
        uint64_t v4 = v10 & (a2 - 1);
        unsigned int v5 = (void *)(a1 + 32 * v4);
        uint64_t v6 = *v5;
        if (*v5 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v7) {
        unsigned int v5 = v7;
      }
    }
  }
  else
  {
    unsigned int v5 = 0;
    uint64_t result = 0;
  }
  *a4 = v5;
  return result;
}

void *sub_1CBBE57B4(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CBBE5880(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 32 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBBE5880(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(void *)(result + 8) = 0;
  uint64_t v6 = *(unsigned int *)(result + 16);
  if (v6)
  {
    int v7 = *(void **)result;
    uint64_t v8 = 32 * v6;
    do
    {
      void *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    uint64_t v9 = *(void *)a2;
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v12 = 0;
      uint64_t result = sub_1CBBE572C(*(void *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      uint64_t v10 = v12;
      *uint64_t v12 = *(void *)a2;
      long long v11 = *(_OWORD *)(a2 + 8);
      v10[3] = *(void *)(a2 + 24);
      *(_OWORD *)(v10 + 1) = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_1CBBE5938(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 8 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      uint64_t v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          uint64_t v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        uint64_t v6 = (void *)(a1 + 8 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        uint64_t v6 = v8;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

void *sub_1CBBE59C0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (v12)
    {
      uint64_t v13 = 8 * v12;
      do
      {
        *result++ = -4096;
        v13 -= 8;
      }
      while (v13);
    }
    if (v3)
    {
      uint64_t v14 = 8 * v3;
      uint64_t v15 = (uint64_t *)v4;
      do
      {
        uint64_t v16 = *v15;
        if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v17 = 0;
          sub_1CBBE5938(*(void *)a1, *(_DWORD *)(a1 + 16), v16, &v17);
          *uint64_t v17 = *v15;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v15;
        v14 -= 8;
      }
      while (v14);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

void *sub_1CBBE5AFC(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    sub_1CD424D74(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = *(unsigned int *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = 24 * v10;
    do
    {
      *uint64_t result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1CBBE5BD4(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 24 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v12 = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(a1 + 24 * (v11 & v4));
        uint64_t v7 = *v6;
        uint64_t v12 = 1;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      uint64_t v12 = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

BOOL sub_1CBBE5C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 1;
  if (a2 && *(unsigned char *)(a2 + 16) == 84)
  {
    uint64_t v6 = *(void *)(a2 + 64);
    if ((v6 && (*(unsigned char *)(v6 + 12) & 0x40) != 0 || llvm::CallBase::hasFnAttrOnCalledFunction(a2, 6))
      && (uint64_t v7 = *(void *)(a2 - 32)) != 0
      && !*(unsigned char *)(v7 + 16)
      && *(void *)(v7 + 24) == *(void *)(a2 + 72))
    {
      int v8 = *(_DWORD *)(v7 + 36);
      BOOL result = 1;
      if (v8 > 2578)
      {
        BOOL v10 = (v8 - 2579) > 0x18 || ((1 << (v8 - 19)) & 0x1FE0001) == 0;
        if (!v10 || (v8 - 2677) < 2) {
          return *(void *)(a2 + 40) == *(void *)(a3 + 40);
        }
      }
      else
      {
        BOOL v9 = (v8 - 2484) > 0x18 || ((1 << (v8 + 76)) & 0x1FE0013) == 0;
        if (!v9 || v8 == 2306) {
          return *(void *)(a2 + 40) == *(void *)(a3 + 40);
        }
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

unint64_t sub_1CBBE5D64(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v4 = *(_DWORD *)(a2 + 32);
  unsigned int v9 = v4;
  if (v4 > 0x40) {
    llvm::APInt::initSlowCase((llvm::APInt *)&v8);
  }
  if (v4) {
    unint64_t v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v4;
  }
  else {
    unint64_t v5 = 0;
  }
  unint64_t v8 = v5;
  unint64_t v6 = sub_1CBBE5E30(a1, a2, (uint64_t)&v8, a3, a4);
  if (v9 >= 0x41 && v8) {
    MEMORY[0x1D25D9CB0](v8, 0x1000C8000313F17);
  }
  return v6;
}

unint64_t sub_1CBBE5E30(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v33 = *(_DWORD *)(a2 + 32);
  if (v33 < 1) {
    return 0;
  }
  unsigned int v8 = 0;
  unint64_t v9 = 0;
  do
  {
    if (*(_DWORD *)(a3 + 8) >= 0x41u) {
      BOOL v10 = (void *)(*(void *)a3 + 8 * (v8 >> 6));
    }
    else {
      BOOL v10 = (void *)a3;
    }
    if ((*v10 >> v8))
    {
      if (a4)
      {
        unsigned int v11 = (llvm::EVT *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          unsigned int v11 = **(llvm::EVT ***)(a2 + 16);
        }
        unint64_t v12 = *(void *)(a1 + 32);
        uint64_t v13 = *(llvm::LLVMContext **)v11;
        unint64_t v14 = sub_1CB87DC14(v12, *(void *)(a1 + 8), v11, 0);
        uint64_t v16 = v15;
        uint64_t v39 = 1;
        int v40 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v12, v13, v14, v16, (uint64_t)v36);
          if (!v36[0])
          {
LABEL_12:
            uint64_t v17 = v39;
            goto LABEL_13;
          }
          if (v36[0] == 10) {
            break;
          }
          if ((v36[0] & 0xFB) == 2)
          {
            uint64_t v41 = 2;
            int v42 = 0;
            sub_1CB90C9D4((uint64_t)&v39, (uint64_t)&v41);
          }
          int v29 = v14;
          unint64_t v14 = v37;
          if (v29 == v37)
          {
            if (v29) {
              goto LABEL_12;
            }
            uint64_t v30 = v38;
            if (v16 == v38) {
              goto LABEL_12;
            }
          }
          else
          {
            uint64_t v30 = v38;
          }
          uint64_t v16 = v30;
        }
        uint64_t v17 = 0;
LABEL_13:
        BOOL v18 = __OFADD__(v9, v17);
        uint64_t v19 = v9 + v17;
        if (v18) {
          unint64_t v9 = (v19 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v9 = v19;
        }
      }
      if (a5)
      {
        uint64_t v20 = (llvm::EVT *)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12) {
          uint64_t v20 = **(llvm::EVT ***)(a2 + 16);
        }
        unint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = *(llvm::LLVMContext **)v20;
        unint64_t v23 = sub_1CB87DC14(v21, *(void *)(a1 + 8), v20, 0);
        uint64_t v25 = v24;
        uint64_t v39 = 1;
        int v40 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v21, v22, v23, v25, (uint64_t)v36);
          if (!v36[0])
          {
LABEL_23:
            uint64_t v26 = v39;
            goto LABEL_24;
          }
          if (v36[0] == 10) {
            break;
          }
          if ((v36[0] & 0xFB) == 2)
          {
            uint64_t v41 = 2;
            int v42 = 0;
            sub_1CB90C9D4((uint64_t)&v39, (uint64_t)&v41);
          }
          int v31 = v23;
          unint64_t v23 = v37;
          if (v31 == v37)
          {
            if (v31) {
              goto LABEL_23;
            }
            uint64_t v32 = v38;
            if (v25 == v38) {
              goto LABEL_23;
            }
          }
          else
          {
            uint64_t v32 = v38;
          }
          uint64_t v25 = v32;
        }
        uint64_t v26 = 0;
LABEL_24:
        BOOL v18 = __OFADD__(v9, v26);
        uint64_t v27 = v9 + v26;
        if (v18) {
          unint64_t v9 = (v27 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v9 = v27;
        }
      }
    }
    ++v8;
  }
  while (v8 != v33);
  return v9;
}

unint64_t sub_1CBBE60E4(unint64_t result, llvm::LiveRegUnits *this, void *a3, uint64_t a4)
{
  unint64_t v7 = result;
  if ((*(_WORD *)(result + 44) & 4) != 0)
  {
    unint64_t v7 = result;
    do
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v7 + 44) & 4) != 0);
  }
  uint64_t v8 = *(void *)(result + 24) + 48;
  unint64_t v9 = *(const unsigned int ***)(v7 + 32);
  uint64_t v10 = *(unsigned int *)(v7 + 40);
  unsigned int v11 = (int *)&v9[4 * v10];
  if (!v10)
  {
    unint64_t v31 = *(void *)(v7 + 8);
    if (v31 == v8)
    {
      unint64_t v7 = *(void *)(result + 24) + 48;
    }
    else
    {
      unint64_t v7 = *(void *)(result + 24) + 48;
      if ((*(_WORD *)(v31 + 44) & 4) != 0)
      {
        do
        {
          unint64_t v34 = v31;
          uint64_t v35 = *(unsigned int *)(v31 + 40);
          if (v35)
          {
            unint64_t v7 = v31;
            goto LABEL_46;
          }
          unint64_t v31 = *(void *)(v31 + 8);
        }
        while (v31 != v8 && (*(_WORD *)(v31 + 44) & 4) != 0);
        unint64_t v7 = *(void *)(result + 24) + 48;
LABEL_46:
        unint64_t v9 = *(const unsigned int ***)(v34 + 32);
        unsigned int v11 = (int *)&v9[4 * v35];
      }
    }
  }
  while (v9 != (const unsigned int **)v11)
  {
    int v12 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 == 12)
    {
      BOOL result = (unint64_t)llvm::LiveRegUnits::addRegsInMask(this, v9[2]);
      int v12 = *(_DWORD *)v9;
    }
    if (!(_BYTE)v12)
    {
      int v13 = *((_DWORD *)v9 + 1);
      if ((v13 - 1) <= 0x3FFFFFFE)
      {
        if ((v12 & 0x1000000) != 0)
        {
          BOOL result = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 112))(a4, *((unsigned int *)v9 + 1));
          if ((result & 1) == 0)
          {
            uint64_t v23 = *((void *)this + 1);
            if (*(void *)this) {
              uint64_t v24 = (void *)(*(void *)this + 8);
            }
            else {
              uint64_t v24 = 0;
            }
            unint64_t v25 = *(unsigned int *)(*v24 + 24 * (unsigned __int16)v13 + 16);
            uint64_t v26 = (unsigned __int16 *)(v24[6] + ((v25 >> 3) & 0x1FFFFFFE));
            int v28 = *v26;
            uint64_t v27 = v26 + 1;
            int v29 = v28 + (v25 & 0xF) * v13;
            do
            {
              *(void *)(v23 + 8 * ((unsigned __int16)v29 >> 6)) |= 1 << v29;
              int v30 = *v27++;
              v29 += v30;
            }
            while (v30);
          }
        }
        else
        {
          uint64_t v14 = a3[1];
          if (*a3) {
            uint64_t v15 = (void *)(*a3 + 8);
          }
          else {
            uint64_t v15 = 0;
          }
          unint64_t v16 = *(unsigned int *)(*v15 + 24 * (unsigned __int16)*((_DWORD *)v9 + 1) + 16);
          uint64_t v17 = (unsigned __int16 *)(v15[6] + ((v16 >> 3) & 0x1FFFFFFE));
          int v19 = *v17;
          BOOL v18 = v17 + 1;
          int v20 = v19 + (v16 & 0xF) * v13;
          do
          {
            *(void *)(v14 + 8 * ((unsigned __int16)v20 >> 6)) |= 1 << v20;
            int v21 = *v18++;
            v20 += v21;
          }
          while (v21);
        }
      }
    }
    v9 += 4;
    if (v9 == (const unsigned int **)v11)
    {
      unint64_t v22 = *(void *)(v7 + 8);
      if (v22 == v8) {
        return result;
      }
      unint64_t v9 = (const unsigned int **)v11;
      unint64_t v7 = v8;
      if ((*(_WORD *)(v22 + 44) & 4) != 0)
      {
        while (1)
        {
          unint64_t v32 = v22;
          uint64_t v33 = *(unsigned int *)(v22 + 40);
          if (v33) {
            break;
          }
          unint64_t v22 = *(void *)(v22 + 8);
          if (v22 == v8 || (*(_WORD *)(v22 + 44) & 4) == 0)
          {
            unint64_t v7 = v8;
            goto LABEL_41;
          }
        }
        unint64_t v7 = v22;
LABEL_41:
        unint64_t v9 = *(const unsigned int ***)(v32 + 32);
        unsigned int v11 = (int *)&v9[4 * v33];
      }
    }
  }
  return result;
}

uint64_t sub_1CBBE6384(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *(unsigned int *)(result + 344);
  if (v2)
  {
    unsigned int v3 = a2;
    uint64_t v4 = result;
    unint64_t v5 = *(uint64_t **)(result + 336);
    unint64_t v6 = &v5[2 * v2];
    uint64_t v46 = v6;
    while (1)
    {
      uint64_t v7 = *v5;
      uint64_t v8 = v5[1];
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 8))(v4, v8);
      if ((v10 & 0xFF00000000) != 0) {
        break;
      }
      BOOL result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v8);
      if (result != HIDWORD(result))
      {
        unsigned int v20 = result >> 6;
        if (result >> 6 == HIDWORD(result) >> 6)
        {
          uint64_t v21 = ~((1 << SBYTE4(result)) + (-1 << result));
          uint64_t v22 = *v3;
        }
        else
        {
          uint64_t v22 = *v3;
          *(void *)(*v3 + 8 * v20) &= ~(-1 << result);
          unsigned int v41 = (result + 63) & 0xFFFFFFC0;
          if (v41 + 64 <= HIDWORD(result))
          {
            do
            {
              *(void *)(v22 + 8 * (v41 >> 6)) = 0;
              unsigned int v42 = v41 + 64;
              unsigned int v44 = v41 + 128;
              v41 += 64;
            }
            while (v44 <= HIDWORD(result));
          }
          else
          {
            unsigned int v42 = (result + 63) & 0xFFFFFFC0;
          }
          if (v42 >= HIDWORD(result)) {
            goto LABEL_43;
          }
          uint64_t v21 = -1 << SBYTE4(result);
          unsigned int v20 = v42 >> 6;
        }
        uint64_t v23 = (uint64_t *)(v22 + 8 * v20);
        uint64_t v24 = *v23 & v21;
LABEL_42:
        *uint64_t v23 = v24;
      }
LABEL_43:
      v5 += 2;
      if (v5 == v6) {
        return result;
      }
    }
    unint64_t v11 = v9;
    unsigned int v12 = v10;
    int v13 = *(unsigned __int16 **)(v7 + 16);
    uint64_t v14 = *v13;
    uint64_t v15 = sub_1CBE52E8C(*v13);
    if ((v15 & 0xFF00000000) != 0 && ((v15 - 164) < 4 || (v15 - 78) <= 2))
    {
      uint64_t v16 = *(void *)(v7 + 32);
      uint64_t v17 = v8 - v16;
      unint64_t v18 = (unint64_t)(v8 - v16) >> 5;
      BOOL result = llvm::MachineInstr::getNumExplicitOperands(v7);
      if (result <= v18)
      {
        unsigned int v43 = -1;
      }
      else
      {
        if ((word_1CDF77000[dword_1CDF6DEF0[v14] + (unsigned __int16)v18] & 0xFFFB) != 0x3A)
        {
          if ((*(_DWORD *)(v16 + (v17 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
          {
            unsigned int v26 = *((unsigned __int8 *)v13 + 4);
            if ((v13[4] & 2) != 0)
            {
              int v37 = *(_DWORD *)(v7 + 40);
              unsigned int v3 = a2;
              if (v37 == v26)
              {
                int v27 = *((unsigned __int8 *)v13 + 4);
              }
              else
              {
                int v38 = v37 - 1;
                int v27 = *((unsigned __int8 *)v13 + 4);
                do
                {
                  int v39 = *(_DWORD *)(v16 + 32 * v26);
                  if ((v39 & 0x10000FF) != 0x1000000) {
                    break;
                  }
                  v27 += (v39 & 0x2000000) == 0;
                  if (v38 == v26) {
                    break;
                  }
                  ++v26;
                }
                while ((v39 & 0x2000000) == 0);
              }
            }
            else
            {
              int v27 = *((unsigned __int8 *)v13 + 4);
              unsigned int v3 = a2;
            }
            unsigned int v43 = v27 + v18;
            unint64_t v6 = v46;
          }
          else
          {
            if (*(_DWORD *)(v16 + (v17 & 0x1FFFFFFFE0))) {
              BOOL v19 = *(_DWORD *)(v16 + (v17 & 0x1FFFFFFFE0)) == 7;
            }
            else {
              BOOL v19 = 1;
            }
            unsigned int v3 = a2;
            unint64_t v6 = v46;
            if (v19) {
              unsigned int v43 = v18 + 1;
            }
            else {
              unsigned int v43 = -1;
            }
          }
          goto LABEL_26;
        }
        unsigned int v43 = v18 + 2;
      }
      unsigned int v3 = a2;
      unint64_t v6 = v46;
      goto LABEL_26;
    }
    BOOL result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 56))(v4, v7);
    if ((result & 0xFF00000000) == 0)
    {
      unint64_t v25 = HIDWORD(v11);
      goto LABEL_31;
    }
    unsigned int v43 = result + 1;
LABEL_26:
    unint64_t v25 = HIDWORD(v11);
    if (v11 == HIDWORD(v11))
    {
LABEL_30:
      uint64_t v29 = *(void *)(v7 + 32) + 32 * v43;
      *(void *)(v29 + 16) |= 0x10uLL;
    }
    else
    {
      unsigned int v28 = v11;
      while (((*(void *)(*v3 + 8 * (v28 >> 6)) >> v28) & 1) == 0)
      {
        if (HIDWORD(v11) == ++v28) {
          goto LABEL_30;
        }
      }
    }
LABEL_31:
    if (v12)
    {
      int v30 = v25 - v11;
      if (v30)
      {
        for (int i = 0; i != v30; ++i)
        {
          if ((v12 >> i)) {
            *(void *)(*v3 + 8 * ((v11 + i) >> 6)) |= 1 << (v11 + i);
          }
        }
      }
      goto LABEL_43;
    }
    if (v25 != v11)
    {
      unsigned int v32 = v11 >> 6;
      if (v11 >> 6 == v25 >> 6)
      {
        uint64_t v33 = (1 << v25) + (-1 << v11);
        uint64_t v34 = *v3;
      }
      else
      {
        uint64_t v34 = *v3;
        *(void *)(*v3 + 8 * v32) |= -1 << v11;
        unsigned int v35 = (v11 + 63) & 0xFFFFFFC0;
        if (v35 + 64 <= v25)
        {
          do
          {
            *(void *)(v34 + 8 * (v35 >> 6)) = -1;
            unsigned int v36 = v35 + 64;
            unsigned int v40 = v35 + 128;
            v35 += 64;
          }
          while (v40 <= v25);
        }
        else
        {
          unsigned int v36 = (v11 + 63) & 0xFFFFFFC0;
        }
        if (v36 >= v25) {
          goto LABEL_43;
        }
        uint64_t v33 = ~(-1 << v25);
        unsigned int v32 = v36 >> 6;
      }
      uint64_t v23 = (uint64_t *)(v34 + 8 * v32);
      uint64_t v24 = *v23 | v33;
      goto LABEL_42;
    }
    goto LABEL_43;
  }
  return result;
}

void sub_1CBBE67E0(llvm *a1, llvm::PassRegistry *a2)
{
}

const char *sub_1CBBE6880()
{
  return "AGX3 LUPlacement Pass";
}

uint64_t sub_1CBBE6890(uint64_t a1, void *a2)
{
  v1072[4] = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a2[2] + 283))
  {
    char v52 = 0;
    return v52 & 1;
  }
  uint64_t v982 = a2[2];
  v1022 = v1024;
  uint64_t v1023 = 0x400000000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1330, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1330))
  {
    byte_1EBCC1328 = 1;
    __cxa_guard_release(&qword_1EBCC1330);
  }
  if (byte_1EBCC1328)
  {
    uint64_t v2 = (void *)a2[41];
    if (v2 != a2 + 40)
    {
      unsigned int v3 = (char *)&v1027 + 8;
      do
      {
        for (uint64_t i = v2[7]; (void *)i != v2 + 6; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v5 = sub_1CBE52E8C(**(unsigned __int16 **)(i + 16));
          if ((v5 & 0xFF00000000) == 0 || v5 != 63) {
            goto LABEL_10;
          }
          uint64_t v6 = *(void *)(i + 32);
          size_t v7 = *(void *)(v6 + 16);
          uint64_t v8 = *(void *)(v6 + 48);
          uint64_t v9 = *(void *)(i + 48);
          size_t v989 = v7;
          if ((v9 & 7) != 0)
          {
            uint64_t v10 = *(long long **)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            uint64_t v10 = (long long *)(v9 & 0xFFFFFFFFFFFFFFF8);
            *(void *)(i + 48) = v9 & 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t MachineMemOperand = llvm::MachineFunction::getMachineMemOperand((uint64_t)a2, v10, 5);
          uint64_t v12 = *(void *)(i + 24);
          long long v1028 = 0u;
          long long v1029 = 0u;
          long long v1026 = 0u;
          long long v1027 = 0u;
          uint64_t v13 = *(void *)(v12 + 32);
          v997 = (llvm::MachineMemOperand *)MachineMemOperand;
          __src = &unk_1F261CD58;
          *(void *)&long long v1026 = v13;
          *(void *)&long long v1027 = *(void *)(v13 + 40);
          *((void *)&v1026 + 1) = (*(uint64_t (**)(void))(**(void **)(v13 + 16) + 104))(*(void *)(v13 + 16));
          v1046 = 0;
          uint64_t v1002 = v8;
          if (!*((void *)&v1027 + 1)) {
            goto LABEL_17;
          }
          int v26 = **((unsigned char **)&v1027 + 1);
          if ((v26 - 4) > 0x1E)
          {
            if ((v26 - 3) >= 0xFFFFFFFE) {
              uint64_t v40 = *((void *)&v1027 + 1);
            }
            else {
              uint64_t v40 = 0;
            }
            if ((v26 - 3) <= 0xFFFFFFFD)
            {
              if (v26 == 3) {
                *(void *)(*((void *)&v1027 + 1) + 8) = 0;
              }
LABEL_17:
              uint64_t v14 = 0;
              *((void *)&v1027 + 1) = 0;
              goto LABEL_18;
            }
            unint64_t v28 = v40 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*((void *)&v1027 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v1027 + 1) + 12)) {
              goto LABEL_17;
            }
            uint64_t v27 = *(void *)(*((void *)&v1027 + 1) + 16);
            if ((v27 & 4) == 0) {
              goto LABEL_17;
            }
            unint64_t v28 = v27 & 0xFFFFFFFFFFFFFFF8;
            if (!v28) {
              goto LABEL_17;
            }
          }
          v1052 = v3;
          sub_1CC5FA668(v28 + 16, &v1052);
          uint64_t v14 = (unsigned __int8 *)v1046;
          *((void *)&v1027 + 1) = v1046;
          if (v1046)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v1046, (unsigned __int8 *)v1046, (uint64_t)v3);
            uint64_t v14 = (unsigned __int8 *)*((void *)&v1027 + 1);
          }
LABEL_18:
          *(void *)&long long v1029 = 0;
          *((void *)&v1028 + 1) = i;
          *(void *)&long long v1028 = *(void *)(i + 24);
          *((void *)&v1028 + 1) = i;
          v986 = v3;
          if ((char *)(i + 56) == v3) {
            goto LABEL_39;
          }
          if (v14)
          {
            int v37 = *v14;
            if ((v37 - 4) > 0x1E)
            {
              if ((v37 - 3) >= 0xFFFFFFFE) {
                unsigned int v41 = v14;
              }
              else {
                unsigned int v41 = 0;
              }
              if ((v37 - 3) < 0xFFFFFFFE)
              {
                if (v37 == 3) {
                  *((void *)v14 + 1) = 0;
                }
                goto LABEL_20;
              }
              unint64_t v39 = (unint64_t)(v41 + 8);
            }
            else
            {
              if ((v14[1] & 0x7F) != 2 && !*((_DWORD *)v14 + 3)) {
                goto LABEL_20;
              }
              uint64_t v38 = *((void *)v14 + 2);
              if ((v38 & 4) == 0) {
                goto LABEL_20;
              }
              unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
              if (!v39) {
                goto LABEL_20;
              }
            }
            v1052 = v3;
            sub_1CC5FA668(v39 + 16, &v1052);
          }
LABEL_20:
          uint64_t v15 = *(unsigned __int8 **)(i + 56);
          *((void *)&v1027 + 1) = v15;
          if (!v15)
          {
            uint64_t v16 = (llvm::MachineFunction *)v1026;
            uint64_t v17 = *(void *)(*((void *)&v1026 + 1) + 8) + 15168;
            v1046 = 0;
            goto LABEL_22;
          }
          llvm::MetadataTracking::track((uint64_t)v3, v15, 2);
          uint64_t v14 = (unsigned __int8 *)*((void *)&v1027 + 1);
LABEL_39:
          uint64_t v16 = (llvm::MachineFunction *)v1026;
          uint64_t v17 = *(void *)(*((void *)&v1026 + 1) + 8) + 15168;
          v1046 = v14;
          if (v14)
          {
            uint64_t v29 = (llvm::MachineFunction *)v1026;
            llvm::MetadataTracking::track((uint64_t)&v1046, v14, 2);
            uint64_t v16 = v29;
          }
LABEL_22:
          unint64_t v18 = v16;
          MachineInstr = llvm::MachineFunction::CreateMachineInstr(v16, v17, (unsigned __int8 **)&v1046, 0);
          if (!v1046) {
            goto LABEL_23;
          }
          int v46 = *(unsigned __int8 *)v1046;
          if ((v46 - 4) > 0x1E)
          {
            if ((v46 - 3) >= 0xFFFFFFFE) {
              uint64_t v49 = v1046;
            }
            else {
              uint64_t v49 = 0;
            }
            if ((v46 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v48 = (unint64_t)v49 + 8;
LABEL_103:
              v1052 = &v1046;
              sub_1CC5FA668(v48 + 16, &v1052);
              goto LABEL_23;
            }
            if (v46 == 3) {
              *((void *)v1046 + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v1046 + 1) & 0x7F) == 2 || *((_DWORD *)v1046 + 3))
          {
            uint64_t v47 = *((void *)v1046 + 2);
            if ((v47 & 4) != 0)
            {
              unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
              if (v48) {
                goto LABEL_103;
              }
            }
          }
LABEL_23:
          unsigned int v20 = (unint64_t *)*((void *)&v1028 + 1);
          uint64_t v21 = *(void *)(v1028 + 40);
          *((void *)MachineInstr + 3) = v21;
          uint64_t v22 = *(void *)(v21 + 32);
          uint64_t v23 = *((unsigned int *)MachineInstr + 10);
          if (v23)
          {
            uint64_t v30 = *((void *)MachineInstr + 4);
            uint64_t v31 = *(void *)(v22 + 40);
            uint64_t v32 = 32 * v23;
            do
            {
              if (!*(unsigned char *)v30)
              {
                uint64_t v33 = *(unsigned int *)(v30 + 4);
                if ((int)v33 >= 0) {
                  uint64_t v34 = (uint64_t *)(*(void *)(v31 + 272) + 8 * v33);
                }
                else {
                  uint64_t v34 = (uint64_t *)(*(void *)(v31 + 24) + 16 * (v33 & 0x7FFFFFFF) + 8);
                }
                uint64_t v35 = *v34;
                if (*v34)
                {
                  uint64_t v36 = *(void *)(v35 + 16);
                  *(void *)(v35 + 16) = v30;
                  *(void *)(v30 + 16) = v36;
                  if (*(unsigned char *)(v30 + 3))
                  {
                    *(void *)(v30 + 24) = v35;
                  }
                  else
                  {
                    *(void *)(v30 + 24) = 0;
                    uint64_t v34 = (uint64_t *)(v36 + 24);
                  }
                }
                else
                {
                  *(void *)(v30 + 16) = v30;
                  *(void *)(v30 + 24) = 0;
                }
                *uint64_t v34 = v30;
              }
              v30 += 32;
              v32 -= 32;
            }
            while (v32);
          }
          uint64_t v24 = *(void *)(v22 + 728);
          if (v24) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v24 + 24))(v24, MachineInstr);
          }
          unint64_t v25 = *v20 & 0xFFFFFFFFFFFFFFF8;
          *(void *)MachineInstr = v25 | *(void *)MachineInstr & 7;
          *((void *)MachineInstr + 1) = v20;
          *(void *)(v25 + 8) = MachineInstr;
          *unsigned int v20 = *v20 & 7 | (unint64_t)MachineInstr;
          if ((void)v1029) {
            (*(void (**)(void, llvm::MachineInstr *))(*(void *)v1029 + 24))(v1029, MachineInstr);
          }
          LODWORD(v1052) = 1;
          v1053 = 0;
          uint64_t v1054 = v989;
          llvm::MachineInstr::addOperand(MachineInstr, v18, (const llvm::MachineOperand *)&v1052);
          LODWORD(v1052) = 1;
          v1053 = 0;
          uint64_t v1054 = v1002;
          llvm::MachineInstr::addOperand(MachineInstr, v18, (const llvm::MachineOperand *)&v1052);
          LODWORD(v1052) = 1;
          v1053 = 0;
          uint64_t v1054 = 0;
          llvm::MachineInstr::addOperand(MachineInstr, v18, (const llvm::MachineOperand *)&v1052);
          llvm::MachineInstr::addMemOperand(MachineInstr, v18, v997);
          __src = &unk_1F261CD58;
          unsigned int v3 = v986;
          if (!*((void *)&v1027 + 1)) {
            goto LABEL_29;
          }
          int v42 = **((unsigned char **)&v1027 + 1);
          if ((v42 - 4) > 0x1E)
          {
            if ((v42 - 3) >= 0xFFFFFFFE) {
              uint64_t v45 = *((void *)&v1027 + 1);
            }
            else {
              uint64_t v45 = 0;
            }
            if ((v42 - 3) < 0xFFFFFFFE)
            {
              if (v42 == 3) {
                *(void *)(*((void *)&v1027 + 1) + 8) = 0;
              }
              goto LABEL_29;
            }
            unint64_t v44 = v45 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*((void *)&v1027 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v1027 + 1) + 12)) {
              goto LABEL_29;
            }
            uint64_t v43 = *(void *)(*((void *)&v1027 + 1) + 16);
            if ((v43 & 4) == 0) {
              goto LABEL_29;
            }
            unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
            if (!v44) {
              goto LABEL_29;
            }
          }
          v1052 = v986;
          sub_1CC5FA668(v44 + 16, &v1052);
LABEL_29:
          if (v1023 >= (unint64_t)HIDWORD(v1023)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v1022 + v1023) = MachineInstr;
          LODWORD(v1023) = v1023 + 1;
LABEL_10:
          if ((*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        uint64_t v2 = (void *)v2[1];
      }
      while (v2 != a2 + 40);
    }
  }
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)a2, 0);
  uint64_t v50 = a1;
  uint64_t AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(void *)(a1 + 8) + 24), &llvm::PhysicalRegisterUsageInfo::ID, 1);
  if (AnalysisPass) {
    v990 = (llvm::PhysicalRegisterUsageInfo *)(*(uint64_t (**)(uint64_t, void *))(*(void *)AnalysisPass + 96))(AnalysisPass, &llvm::PhysicalRegisterUsageInfo::ID);
  }
  else {
    v990 = 0;
  }
  BOOL v53 = (void *)(a1 + 256);
  int v54 = *(_DWORD *)(a1 + 264);
  if (v54 || *(_DWORD *)(a1 + 268))
  {
    unsigned int v55 = *(_DWORD *)(a1 + 272);
    uint64_t v56 = *(void *)(a1 + 256);
    if (v55 <= 4 * v54 || v55 < 0x41)
    {
      if (v55)
      {
        uint64_t v951 = v56 + 8;
        uint64_t v952 = 880 * v55;
        uint64_t v953 = v56 + 8;
        do
        {
          uint64_t v954 = *(void *)(v953 - 8);
          if (v954 != -4096)
          {
            if (v954 != -8192) {
              (*(void (**)(uint64_t))(*(void *)v953 + 24))(v953);
            }
            *(void *)(v953 - 8) = -4096;
          }
          v953 += 880;
          v951 += 880;
          v952 -= 880;
        }
        while (v952);
      }
      *(void *)(a1 + 264) = 0;
    }
    else
    {
      uint64_t v57 = v56 + 8;
      uint64_t v58 = 880 * v55;
      uint64_t v59 = v56 + 8;
      do
      {
        uint64_t v60 = *(void *)(v59 - 8);
        if (v60 != -4096 && v60 != -8192) {
          (*(void (**)(uint64_t))(*(void *)v59 + 24))(v59);
        }
        v59 += 880;
        v57 += 880;
        v58 -= 880;
      }
      while (v58);
      int v61 = 1 << (33 - __clz(v54 - 1));
      if (v61 <= 64) {
        int v61 = 64;
      }
      if (v54) {
        unsigned int v62 = v61;
      }
      else {
        unsigned int v62 = 0;
      }
      if (v62 == *(_DWORD *)(a1 + 272))
      {
        *(void *)(a1 + 264) = 0;
        if (v62)
        {
          v959 = *(void **)(a1 + 256);
          uint64_t v960 = 880 * v62;
          do
          {
            void *v959 = -4096;
            v959 += 110;
            v960 -= 880;
          }
          while (v960);
        }
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v53, 8);
        if (v62)
        {
          unint64_t v63 = (4 * v62 / 3 + 1) | ((unint64_t)(4 * v62 / 3 + 1) >> 1);
          unint64_t v64 = v63 | (v63 >> 2) | ((v63 | (v63 >> 2)) >> 4);
          LODWORD(v64) = (((v64 | (v64 >> 8)) >> 16) | v64 | (v64 >> 8)) + 1;
          *(_DWORD *)(a1 + 272) = v64;
          int64_t v65 = operator new(880 * v64, (std::align_val_t)8uLL);
          *(void *)(a1 + 256) = v65;
          *(void *)(a1 + 264) = 0;
          unsigned int v66 = *(_DWORD *)(a1 + 272);
          if (v66)
          {
            uint64_t v67 = 880 * v66;
            do
            {
              void *v65 = -4096;
              v65 += 110;
              v67 -= 880;
            }
            while (v67);
          }
        }
        else
        {
          *BOOL v53 = 0;
          *(void *)(a1 + 264) = 0;
          *(_DWORD *)(a1 + 272) = 0;
        }
      }
    }
  }
  v968 = (uint64_t *)(a1 + 280);
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  v998 = (llvm::MachineMemOperand *)(a1 + 296);
  sub_1CBAEFCF8((_DWORD *)(a1 + 296));
  v994 = (void *)(a1 + 320);
  sub_1CBAEFCF8((_DWORD *)(a1 + 320));
  *(void *)(a1 + 280) = a2;
  *(void *)(a1 + 288) = 0;
  uint64_t v68 = (a2[14] - a2[13]) >> 3;
  int v69 = a2;
  if (v68)
  {
    unint64_t v70 = (4 * (int)v68 / 3u + 1) | ((unint64_t)(4 * (int)v68 / 3u + 1) >> 1);
    unint64_t v71 = v70 | (v70 >> 2) | ((v70 | (v70 >> 2)) >> 4);
    unsigned int v72 = ((v71 | (v71 >> 8)) >> 16) | v71 | (v71 >> 8);
    int v69 = a2;
    if (*(_DWORD *)(a1 + 272) <= v72)
    {
      sub_1CBBED800(a1 + 256, v72 + 1);
      int v69 = (void *)*v968;
    }
  }
  unsigned int v73 = v69 + 40;
  uint64_t v74 = v69[41];
  if ((void *)v74 != v69 + 40)
  {
    while (1)
    {
      __src = &unk_1F25F6D00;
      LOBYTE(v1026) = 0;
      char v1031 = 0;
      LOBYTE(v1032[0]) = 0;
      char v1034 = 0;
      LOBYTE(v1035[0]) = 0;
      char v1037 = 0;
      LOBYTE(v1038[0]) = 0;
      char v1040 = 0;
      uint64_t v1041 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v74 + 32) + 16) + 176))(*(void *)(*(void *)(v74 + 32) + 16));
      v1042 = v1044;
      uint64_t v1043 = 0x2000000000;
      __src = &unk_1F25FA330;
      uint64_t v75 = *(void *)(v74 + 32);
      uint64_t v76 = *(void *)(v75 + 48);
      if (!v76)
      {
        uint64_t v76 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v75 + 8) + 216))(*(void *)(v75 + 8), v75 + 128, *(void *)(v74 + 32));
        *(void *)(v75 + 48) = v76;
      }
      uint64_t v77 = *(void *)(v76 + 552);
      if ((v77 & 0xFF00000000) != 0) {
        int v78 = v77 + 1;
      }
      else {
        int v78 = 4080;
      }
      LODWORD(v1045) = v78;
      unsigned int v79 = *(_DWORD *)(a1 + 272);
      if (!v79)
      {
        uint64_t v88 = 0;
        goto LABEL_155;
      }
      uint64_t v80 = *(void *)(a1 + 256);
      unsigned int v81 = (v79 - 1) & ((v74 >> 4) ^ (v74 >> 9));
      uint64_t v82 = (void *)(v80 + 880 * v81);
      uint64_t v83 = *v82;
      if (v74 != *v82) {
        break;
      }
LABEL_170:
      __src = &unk_1F25F6D00;
      if (v1042 != v1044) {
        free(v1042);
      }
      if (v1040)
      {
        if (v1038[0] != v1039) {
          free(v1038[0]);
        }
        char v1040 = 0;
      }
      if (v1037)
      {
        if (v1035[0] != v1036) {
          free(v1035[0]);
        }
        char v1037 = 0;
      }
      if (v1034)
      {
        if (v1032[0] != v1033) {
          free(v1032[0]);
        }
        char v1034 = 0;
      }
      if (v1031 && (long long *)v1026 != &v1027) {
        free((void *)v1026);
      }
      uint64_t v74 = *(void *)(v74 + 8);
      if ((void *)v74 == v73)
      {
        int v69 = (void *)*v968;
        uint64_t v50 = a1;
        goto LABEL_192;
      }
    }
    uint64_t v84 = 0;
    int v85 = 1;
    while (v83 != -4096)
    {
      if (v84) {
        BOOL v86 = 0;
      }
      else {
        BOOL v86 = v83 == -8192;
      }
      if (v86) {
        uint64_t v84 = v82;
      }
      unsigned int v87 = v81 + v85++;
      unsigned int v81 = v87 & (v79 - 1);
      uint64_t v82 = (void *)(v80 + 880 * v81);
      uint64_t v83 = *v82;
      if (v74 == *v82) {
        goto LABEL_170;
      }
    }
    if (v84) {
      uint64_t v88 = v84;
    }
    else {
      uint64_t v88 = v82;
    }
LABEL_155:
    int v89 = *(_DWORD *)(a1 + 264);
    if (4 * v89 + 4 >= 3 * v79)
    {
      v79 *= 2;
    }
    else if (v79 + ~v89 - *(_DWORD *)(a1 + 268) > v79 >> 3)
    {
LABEL_157:
      ++*(_DWORD *)(a1 + 264);
      if (*v88 != -4096) {
        --*(_DWORD *)(a1 + 268);
      }
      *uint64_t v88 = v74;
      v88[1] = &unk_1F25F6D00;
      *((unsigned char *)v88 + 16) = 0;
      *((unsigned char *)v88 + 88) = 0;
      if (v1031) {
        sub_1CD41E8D8((uint64_t)(v88 + 2), (uint64_t)&v1026);
      }
      *((unsigned char *)v88 + 96) = 0;
      *((unsigned char *)v88 + 168) = 0;
      if (v1034) {
        sub_1CD41E8D8((uint64_t)(v88 + 12), (uint64_t)v1032);
      }
      *((unsigned char *)v88 + 176) = 0;
      *((unsigned char *)v88 + 248) = 0;
      if (v1037) {
        sub_1CD41E8D8((uint64_t)(v88 + 22), (uint64_t)v1035);
      }
      *((unsigned char *)v88 + 256) = 0;
      *((unsigned char *)v88 + 328) = 0;
      if (v1040) {
        sub_1CD41E8D8((uint64_t)(v88 + 32), (uint64_t)v1038);
      }
      v88[42] = v1041;
      v88[43] = v88 + 45;
      v88[44] = 0x2000000000;
      if (v1043) {
        sub_1CD41E954((uint64_t)(v88 + 43), (uint64_t)&v1042);
      }
      v88[1] = &unk_1F25FA330;
      *((_DWORD *)v88 + 218) = v1045;
      goto LABEL_170;
    }
    sub_1CBBED800(a1 + 256, v79);
    v1052 = 0;
    sub_1CBBED9D8(*(void *)(a1 + 256), *(_DWORD *)(a1 + 272), v74, &v1052);
    uint64_t v88 = v1052;
    goto LABEL_157;
  }
LABEL_192:
  uint64_t v90 = (v69[14] - v69[13]) >> 3;
  sub_1CBBEDC90(v994, v90);
  sub_1CBBEDC90(v998, v90);
  uint64_t v91 = *v968 + 320;
  for (uint64_t j = *(void **)(*v968 + 328); j != (void *)v91; uint64_t j = (void *)j[1])
  {
    unint64_t v93 = (void *)j[1];
    if (v93 == (void *)(j[4] + 320))
    {
      __src = (char *)&v1026 + 8;
    }
    else
    {
      uint64_t v94 = (void **)j[11];
      unsigned int v95 = (void **)j[12];
      if (v94 != v95)
      {
        while (*v94 != v93)
        {
          if (++v94 == v95)
          {
            uint64_t v94 = (void **)j[12];
            break;
          }
        }
      }
      __src = (char *)&v1026 + 8;
      if (v94 == v95)
      {
        *((void *)&v1026 + 1) = v93;
        *(void *)&long long v1026 = 0x200000001;
        v1052 = v93;
        int v96 = *(_DWORD *)(v50 + 336);
        if (!v96)
        {
          unint64_t v106 = 0;
          goto LABEL_219;
        }
        uint64_t v97 = *(void *)(v50 + 320);
        int v98 = v96 - 1;
        unsigned int v99 = v98 & ((v93 >> 4) ^ (v93 >> 9));
        int v100 = (void *)(v97 + 40 * v99);
        int v101 = (void *)*v100;
        if (v93 != (void *)*v100)
        {
          uint64_t v102 = 0;
          int v103 = 1;
          while (v101 != (void *)-4096)
          {
            if (v102) {
              BOOL v104 = 0;
            }
            else {
              BOOL v104 = v101 == (void *)-8192;
            }
            if (v104) {
              uint64_t v102 = v100;
            }
            unsigned int v105 = v99 + v103++;
            unsigned int v99 = v105 & v98;
            int v100 = (void *)(v97 + 40 * v99);
            int v101 = (void *)*v100;
            if (v93 == (void *)*v100) {
              goto LABEL_220;
            }
          }
          if (v102) {
            unint64_t v106 = v102;
          }
          else {
            unint64_t v106 = v100;
          }
LABEL_219:
          int v100 = sub_1CBBEDF00(v994, (uint64_t *)&v1052, v106);
          void *v100 = v93;
          v100[1] = v100 + 3;
          v100[2] = 0x200000000;
        }
LABEL_220:
        unint64_t v107 = *((unsigned int *)v100 + 4);
        if (v107 >= *((unsigned int *)v100 + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(v100[1] + 8 * v107) = j;
        ++*((_DWORD *)v100 + 4);
        if (!v1026) {
          goto LABEL_200;
        }
        v1052 = j;
        int v108 = *(_DWORD *)(v50 + 312);
        if (v108)
        {
          uint64_t v109 = *(void *)(v50 + 296);
          int v110 = v108 - 1;
          unsigned int v111 = v110 & ((j >> 4) ^ (j >> 9));
          unint64_t v112 = (void *)(v109 + 40 * v111);
          unsigned int v113 = (void *)*v112;
          if (j != (void *)*v112)
          {
            int v114 = 0;
            int v115 = 1;
            while (v113 != (void *)-4096)
            {
              if (v114) {
                BOOL v116 = 0;
              }
              else {
                BOOL v116 = v113 == (void *)-8192;
              }
              if (v116) {
                int v114 = v112;
              }
              unsigned int v117 = v111 + v115++;
              unsigned int v111 = v117 & v110;
              unint64_t v112 = (void *)(v109 + 40 * v111);
              unsigned int v113 = (void *)*v112;
              if (j == (void *)*v112) {
                goto LABEL_237;
              }
            }
            if (v114) {
              uint64_t v118 = v114;
            }
            else {
              uint64_t v118 = v112;
            }
LABEL_236:
            unint64_t v112 = sub_1CBBEDF00(v998, (uint64_t *)&v1052, v118);
            void *v112 = j;
            v112[1] = v112 + 3;
            v112[2] = 0x200000000;
          }
LABEL_237:
          uint64_t v119 = (void **)(v112 + 1);
          if (v112 + 1 != &__src)
          {
            int v120 = v1026;
            uint64_t v121 = *((unsigned int *)v112 + 4);
            if (v121 >= v1026)
            {
              if (v1026) {
                memmove(*v119, __src, 8 * v1026);
              }
            }
            else
            {
              if (*((_DWORD *)v112 + 5) < v1026)
              {
                *((_DWORD *)v112 + 4) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v121) {
                memmove(*v119, __src, 8 * v121);
              }
              else {
                uint64_t v121 = 0;
              }
              if (v121 != v1026) {
                memcpy((char *)*v119 + 8 * v121, (char *)__src + 8 * v121, 8 * v1026 - 8 * v121);
              }
            }
            *((_DWORD *)v112 + 4) = v120;
          }
          uint64_t v50 = a1;
          goto LABEL_200;
        }
        uint64_t v118 = 0;
        goto LABEL_236;
      }
    }
    *(void *)&long long v1026 = 0x200000000;
LABEL_200:
    if (__src != (char *)&v1026 + 8) {
      free(__src);
    }
  }
  uint64_t v122 = (void *)(v50 + 344);
  int v123 = *(_DWORD *)(v50 + 352);
  if (v123 || *(_DWORD *)(v50 + 356))
  {
    unsigned int v124 = *(_DWORD *)(v50 + 360);
    uint64_t v125 = *(void *)(v50 + 344);
    if (v124 <= 4 * v123 || v124 < 0x41)
    {
      if (v124)
      {
        uint64_t v955 = v125 + 8;
        uint64_t v956 = 880 * v124;
        uint64_t v957 = v125 + 8;
        do
        {
          uint64_t v958 = *(void *)(v957 - 8);
          if (v958 != -4096)
          {
            if (v958 != -8192) {
              (*(void (**)(uint64_t))(*(void *)v957 + 24))(v957);
            }
            *(void *)(v957 - 8) = -4096;
          }
          v957 += 880;
          v955 += 880;
          v956 -= 880;
        }
        while (v956);
      }
      *(void *)(v50 + 352) = 0;
    }
    else
    {
      uint64_t v126 = v125 + 8;
      uint64_t v127 = 880 * v124;
      uint64_t v128 = v125 + 8;
      do
      {
        uint64_t v129 = *(void *)(v128 - 8);
        if (v129 != -4096 && v129 != -8192) {
          (*(void (**)(uint64_t))(*(void *)v128 + 24))(v128);
        }
        v128 += 880;
        v126 += 880;
        v127 -= 880;
      }
      while (v127);
      int v130 = 1 << (33 - __clz(v123 - 1));
      if (v130 <= 64) {
        int v130 = 64;
      }
      if (v123) {
        unsigned int v131 = v130;
      }
      else {
        unsigned int v131 = 0;
      }
      if (v131 == *(_DWORD *)(v50 + 360))
      {
        *(void *)(v50 + 352) = 0;
        if (v131)
        {
          v961 = *(void **)(v50 + 344);
          uint64_t v962 = 880 * v131;
          do
          {
            void *v961 = -4096;
            v961 += 110;
            v962 -= 880;
          }
          while (v962);
        }
      }
      else
      {
        MEMORY[0x1D25D9CD0](*v122, 8);
        if (v131)
        {
          unint64_t v132 = (4 * v131 / 3 + 1) | ((unint64_t)(4 * v131 / 3 + 1) >> 1);
          unint64_t v133 = v132 | (v132 >> 2) | ((v132 | (v132 >> 2)) >> 4);
          LODWORD(v133) = (((v133 | (v133 >> 8)) >> 16) | v133 | (v133 >> 8)) + 1;
          *(_DWORD *)(v50 + 360) = v133;
          unint64_t v134 = operator new(880 * v133, (std::align_val_t)8uLL);
          *(void *)(v50 + 344) = v134;
          *(void *)(v50 + 352) = 0;
          unsigned int v135 = *(_DWORD *)(v50 + 360);
          if (v135)
          {
            uint64_t v136 = 880 * v135;
            do
            {
              void *v134 = -4096;
              v134 += 110;
              v136 -= 880;
            }
            while (v136);
          }
        }
        else
        {
          *uint64_t v122 = 0;
          *(void *)(v50 + 352) = 0;
          *(_DWORD *)(v50 + 360) = 0;
        }
      }
    }
  }
  uint64_t v967 = v50 + 368;
  *(void *)(v50 + 368) = 0;
  *(void *)(v50 + 376) = 0;
  sub_1CBAEFCF8((_DWORD *)(v50 + 384));
  sub_1CBAEFCF8((_DWORD *)(v50 + 408));
  *(void *)(v50 + 368) = a2;
  *(void *)(v50 + 376) = 0;
  uint64_t v137 = (a2[14] - a2[13]) >> 3;
  uint64_t v138 = a2;
  if (v137)
  {
    unint64_t v139 = (4 * (int)v137 / 3u + 1) | ((unint64_t)(4 * (int)v137 / 3u + 1) >> 1);
    unint64_t v140 = v139 | (v139 >> 2) | ((v139 | (v139 >> 2)) >> 4);
    unsigned int v141 = ((v140 | (v140 >> 8)) >> 16) | v140 | (v140 >> 8);
    uint64_t v138 = a2;
    if (*(_DWORD *)(v50 + 360) <= v141)
    {
      sub_1CBBEE0A4(v50 + 344, v141 + 1);
      uint64_t v138 = *(void **)v967;
    }
  }
  int v142 = v138 + 40;
  uint64_t v143 = v138[41];
  if ((void *)v143 != v138 + 40)
  {
    while (1)
    {
      __src = &unk_1F25F6D00;
      LOBYTE(v1026) = 0;
      char v1031 = 0;
      LOBYTE(v1032[0]) = 0;
      char v1034 = 0;
      LOBYTE(v1035[0]) = 0;
      char v1037 = 0;
      LOBYTE(v1038[0]) = 0;
      char v1040 = 0;
      uint64_t v1041 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v143 + 32) + 16) + 176))(*(void *)(*(void *)(v143 + 32) + 16));
      v1042 = v1044;
      uint64_t v1043 = 0x2000000000;
      __src = &unk_1F25FA388;
      LODWORD(v1045) = *(void *)(*(void *)(*(void *)(v143 + 32) + 56) + 48) >> 1;
      unsigned int v144 = *(_DWORD *)(a1 + 360);
      if (!v144)
      {
        uint64_t v153 = 0;
        goto LABEL_292;
      }
      uint64_t v145 = *(void *)(a1 + 344);
      unsigned int v146 = (v144 - 1) & ((v143 >> 4) ^ (v143 >> 9));
      unint64_t v147 = (void *)(v145 + 880 * v146);
      uint64_t v148 = *v147;
      if (v143 != *v147) {
        break;
      }
LABEL_288:
      __src = &unk_1F25F6D00;
LABEL_308:
      if (v1040)
      {
        if (v1038[0] != v1039) {
          free(v1038[0]);
        }
        char v1040 = 0;
      }
      if (v1037)
      {
        if (v1035[0] != v1036) {
          free(v1035[0]);
        }
        char v1037 = 0;
      }
      if (v1034)
      {
        if (v1032[0] != v1033) {
          free(v1032[0]);
        }
        char v1034 = 0;
      }
      if (v1031 && (long long *)v1026 != &v1027) {
        free((void *)v1026);
      }
      uint64_t v143 = *(void *)(v143 + 8);
      if ((void *)v143 == v142) {
        goto LABEL_328;
      }
    }
    unint64_t v149 = 0;
    int v150 = 1;
    while (v148 != -4096)
    {
      if (v149) {
        BOOL v151 = 0;
      }
      else {
        BOOL v151 = v148 == -8192;
      }
      if (v151) {
        unint64_t v149 = v147;
      }
      unsigned int v152 = v146 + v150++;
      unsigned int v146 = v152 & (v144 - 1);
      unint64_t v147 = (void *)(v145 + 880 * v146);
      uint64_t v148 = *v147;
      if (v143 == *v147) {
        goto LABEL_288;
      }
    }
    if (v149) {
      uint64_t v153 = v149;
    }
    else {
      uint64_t v153 = v147;
    }
LABEL_292:
    int v154 = *(_DWORD *)(a1 + 352);
    if (4 * v154 + 4 >= 3 * v144)
    {
      v144 *= 2;
    }
    else if (v144 + ~v154 - *(_DWORD *)(a1 + 356) > v144 >> 3)
    {
LABEL_294:
      ++*(_DWORD *)(a1 + 352);
      if (*v153 != -4096) {
        --*(_DWORD *)(a1 + 356);
      }
      *uint64_t v153 = v143;
      v153[1] = &unk_1F25F6D00;
      *((unsigned char *)v153 + 16) = 0;
      *((unsigned char *)v153 + 88) = 0;
      if (v1031) {
        sub_1CD41E8D8((uint64_t)(v153 + 2), (uint64_t)&v1026);
      }
      *((unsigned char *)v153 + 96) = 0;
      *((unsigned char *)v153 + 168) = 0;
      if (v1034) {
        sub_1CD41E8D8((uint64_t)(v153 + 12), (uint64_t)v1032);
      }
      *((unsigned char *)v153 + 176) = 0;
      *((unsigned char *)v153 + 248) = 0;
      if (v1037) {
        sub_1CD41E8D8((uint64_t)(v153 + 22), (uint64_t)v1035);
      }
      *((unsigned char *)v153 + 256) = 0;
      *((unsigned char *)v153 + 328) = 0;
      if (v1040) {
        sub_1CD41E8D8((uint64_t)(v153 + 32), (uint64_t)v1038);
      }
      v153[42] = v1041;
      v153[43] = v153 + 45;
      v153[44] = 0x2000000000;
      if (v1043) {
        sub_1CD41E954((uint64_t)(v153 + 43), (uint64_t)&v1042);
      }
      v153[1] = &unk_1F25FA388;
      *((_DWORD *)v153 + 218) = v1045;
      __src = &unk_1F25F6D00;
      if (v1042 != v1044) {
        free(v1042);
      }
      goto LABEL_308;
    }
    sub_1CBBEE0A4(v50 + 344, v144);
    v1052 = 0;
    sub_1CBBED9D8(*(void *)(a1 + 344), *(_DWORD *)(a1 + 360), v143, &v1052);
    uint64_t v153 = v1052;
    goto LABEL_294;
  }
LABEL_328:
  BOOL v156 = (*(_WORD *)(*a2 + 18) & 0x3F70) == 0 || (*(_WORD *)(*a2 + 18) & 0x3FF0) == 4080;
  uint64_t v157 = a1;
  *(unsigned char *)(a1 + 524) = v156;
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(*(void *)a2[2] + 176))(a2[2]);
  uint64_t v1017 = 0;
  v1018 = v1020;
  uint64_t v1019 = 0x600000000;
  unsigned int v1021 = 0;
  if (*(unsigned char *)(a1 + 524))
  {
    int v158 = (void *)(a1 + 432);
    int v159 = *(_DWORD *)(a1 + 440);
    if (v159 || *(_DWORD *)(a1 + 444))
    {
      unsigned int v160 = *(_DWORD *)(a1 + 448);
      uint64_t v161 = *(void *)(a1 + 432);
      if (v160 <= 4 * v159 || v160 < 0x41)
      {
        if (v160)
        {
          uint64_t v173 = v161 + 8;
          uint64_t v174 = 888 * v160;
          uint64_t v175 = v161 + 8;
          do
          {
            uint64_t v176 = *(void *)(v175 - 8);
            if (v176 != -4096)
            {
              if (v176 != -8192) {
                (*(void (**)(uint64_t))(*(void *)v175 + 24))(v175);
              }
              *(void *)(v175 - 8) = -4096;
            }
            v175 += 888;
            v173 += 888;
            v174 -= 888;
          }
          while (v174);
        }
        *(void *)(a1 + 440) = 0;
      }
      else
      {
        uint64_t v162 = v161 + 8;
        uint64_t v163 = 888 * v160;
        uint64_t v164 = v161 + 8;
        do
        {
          uint64_t v165 = *(void *)(v164 - 8);
          if (v165 != -4096 && v165 != -8192) {
            (*(void (**)(uint64_t))(*(void *)v164 + 24))(v164);
          }
          v164 += 888;
          v162 += 888;
          v163 -= 888;
        }
        while (v163);
        int v166 = 1 << (33 - __clz(v159 - 1));
        if (v166 <= 64) {
          int v166 = 64;
        }
        if (v159) {
          unsigned int v167 = v166;
        }
        else {
          unsigned int v167 = 0;
        }
        if (v167 == *(_DWORD *)(a1 + 448))
        {
          *(void *)(a1 + 440) = 0;
          if (v167)
          {
            v963 = *(void **)(a1 + 432);
            uint64_t v964 = 888 * v167;
            do
            {
              void *v963 = -4096;
              v963 += 111;
              v964 -= 888;
            }
            while (v964);
          }
        }
        else
        {
          MEMORY[0x1D25D9CD0](*v158, 8);
          if (v167)
          {
            unint64_t v168 = (4 * v167 / 3 + 1) | ((unint64_t)(4 * v167 / 3 + 1) >> 1);
            unint64_t v169 = v168 | (v168 >> 2) | ((v168 | (v168 >> 2)) >> 4);
            LODWORD(v169) = (((v169 | (v169 >> 8)) >> 16) | v169 | (v169 >> 8)) + 1;
            *(_DWORD *)(a1 + 448) = v169;
            uint64_t v170 = operator new(888 * v169, (std::align_val_t)8uLL);
            *(void *)(a1 + 432) = v170;
            *(void *)(a1 + 440) = 0;
            unsigned int v171 = *(_DWORD *)(a1 + 448);
            if (v171)
            {
              uint64_t v172 = 888 * v171;
              do
              {
                *uint64_t v170 = -4096;
                v170 += 111;
                v172 -= 888;
              }
              while (v172);
            }
          }
          else
          {
            *int v158 = 0;
            *(void *)(a1 + 440) = 0;
            *(_DWORD *)(a1 + 448) = 0;
          }
        }
      }
    }
    *(void *)(a1 + 456) = 0;
    *(void *)(a1 + 464) = 0;
    sub_1CBAEFCF8((_DWORD *)(a1 + 472));
    sub_1CBAEFCF8((_DWORD *)(a1 + 496));
    uint64_t v177 = *(void *)(a1 + 248);
    uint64_t v1017 = v177;
    uint64_t v178 = v1018;
    uint64_t v179 = v1019;
    if (v1019) {
      bzero(v1018, 8 * v1019);
    }
    unsigned int v180 = *(_DWORD *)(v177 + 44);
    if ((v1021 & 0x3F) != 0) {
      *((void *)v1018 + v1019 - 1) &= ~(-1 << (v1021 & 0x3F));
    }
    unsigned int v1021 = v180;
    uint64_t v181 = (v180 + 63) >> 6;
    if (v181 != v179)
    {
      if (v181 >= v179)
      {
        if (v181 > HIDWORD(v1019)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        bzero(&v178[v179], 8 * (v181 - v179));
        LODWORD(v179) = (v180 + 63) >> 6;
      }
      else
      {
        LODWORD(v179) = (v180 + 63) >> 6;
      }
      LODWORD(v1019) = v179;
    }
    int v182 = v180 & 0x3F;
    if ((v180 & 0x3F) != 0) {
      v178[v179 - 1] &= ~(-1 << v182);
    }
    uint64_t v183 = (v180 + 63) >> 6;
    v1046 = &v1048;
    HIDWORD(v1047) = 6;
    if (v180 + 63 >= 0x1C0)
    {
      LODWORD(v1047) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v180 + 63 < 0x40)
    {
      LODWORD(v1047) = (v180 + 63) >> 6;
      unsigned int v1050 = v180;
      if ((v180 & 0x3F) != 0) {
LABEL_387:
      }
        v1049[v183 - 2] &= ~(-1 << v182);
    }
    else
    {
      bzero(&v1048, 8 * v183);
      LODWORD(v1047) = (v180 + 63) >> 6;
      unsigned int v1050 = v180;
      if (v1047 <= 1uLL) {
        uint64_t v184 = 1;
      }
      else {
        uint64_t v184 = (v180 + 63) >> 6;
      }
      memset(&v1048, 255, 8 * v184);
      if ((v180 & 0x3F) != 0) {
        goto LABEL_387;
      }
    }
    if (v1021 >= v180) {
      goto LABEL_399;
    }
    uint64_t v185 = v1019;
    if ((v1021 & 0x3F) != 0) {
      *((void *)v1018 + v1019 - 1) &= ~(-1 << (v1021 & 0x3F));
    }
    unsigned int v1021 = v180;
    if (v185 != v183)
    {
      if (v185 > v183)
      {
        LODWORD(v1019) = (v180 + 63) >> 6;
        if ((v180 & 0x3F) == 0)
        {
LABEL_399:
          uint64_t v186 = v1047;
          if (v1047)
          {
            long long v187 = (uint64_t *)v1046;
            unint64_t v188 = v1018;
            do
            {
              uint64_t v189 = *v187++;
              *v188++ |= v189;
              --v186;
            }
            while (v186);
          }
          if (v990)
          {
            RegUsageInfo = (const unsigned int *)llvm::PhysicalRegisterUsageInfo::getRegUsageInfo(v990, (const llvm::Function *)*a2);
            uint64_t v966 = v191;
            v965 = RegUsageInfo;
            if (v191)
            {
              llvm::LiveRegUnits::removeRegsNotPreserved(&v1017, RegUsageInfo);
              goto LABEL_407;
            }
          }
          else
          {
            v965 = 0;
          }
          uint64_t v966 = 0;
LABEL_407:
          uint64_t v984 = a1 + 456;
          *(void *)(a1 + 456) = a2;
          *(void *)(a1 + 464) = &v1018;
          uint64_t v192 = (a2[14] - a2[13]) >> 3;
          int v193 = a2;
          if (v192)
          {
            unint64_t v194 = (4 * (int)v192 / 3u + 1) | ((unint64_t)(4 * (int)v192 / 3u + 1) >> 1);
            unint64_t v195 = v194 | (v194 >> 2) | ((v194 | (v194 >> 2)) >> 4);
            unsigned int v196 = ((v195 | (v195 >> 8)) >> 16) | v195 | (v195 >> 8);
            int v193 = a2;
            if (*(_DWORD *)(a1 + 448) <= v196)
            {
              sub_1CBBEE7CC((uint64_t)v158, v196 + 1);
              int v193 = *(void **)v984;
            }
          }
          unint64_t v197 = v193 + 40;
          uint64_t v198 = v193[41];
          if ((void *)v198 != v193 + 40)
          {
            while (1)
            {
              __src = &unk_1F25F6D00;
              LOBYTE(v1026) = 0;
              char v1031 = 0;
              LOBYTE(v1032[0]) = 0;
              char v1034 = 0;
              LOBYTE(v1035[0]) = 0;
              char v1037 = 0;
              LOBYTE(v1038[0]) = 0;
              char v1040 = 0;
              uint64_t v1041 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v198 + 32) + 16) + 176))(*(void *)(*(void *)(v198 + 32) + 16));
              v1042 = v1044;
              uint64_t v1043 = 0x2000000000;
              __src = &unk_1F25FA3E0;
              *((void *)&v1045 + 1) = v198;
              LODWORD(v1045) = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(*(void *)(v198 + 32)
                                                                                           + 16)
                                                                             + 176))(*(void *)(*(void *)(v198 + 32)
                                                                                                 + 16))
                                         + 44);
              v1052 = 0;
              if ((sub_1CBBEE9A8(*(void *)(a1 + 432), *(_DWORD *)(a1 + 448), v198, &v1052) & 1) == 0) {
                break;
              }
LABEL_427:
              __src = &unk_1F25F6D00;
              if (v1042 != v1044) {
                free(v1042);
              }
              if (v1040)
              {
                if (v1038[0] != v1039) {
                  free(v1038[0]);
                }
                char v1040 = 0;
              }
              if (v1037)
              {
                if (v1035[0] != v1036) {
                  free(v1035[0]);
                }
                char v1037 = 0;
              }
              if (v1034)
              {
                if (v1032[0] != v1033) {
                  free(v1032[0]);
                }
                char v1034 = 0;
              }
              if (v1031 && (long long *)v1026 != &v1027) {
                free((void *)v1026);
              }
              uint64_t v198 = *(void *)(v198 + 8);
              if ((void *)v198 == v197)
              {
                int v193 = *(void **)v984;
                uint64_t v157 = a1;
                goto LABEL_449;
              }
            }
            int v199 = *(_DWORD *)(a1 + 440);
            unsigned int v200 = *(_DWORD *)(a1 + 448);
            if (4 * v199 + 4 >= 3 * v200)
            {
              sub_1CBBEE7CC((uint64_t)v158, 2 * v200);
              v1052 = 0;
              uint64_t v202 = *(void *)(a1 + 432);
              int v203 = *(_DWORD *)(a1 + 448);
            }
            else
            {
              if (v200 + ~v199 - *(_DWORD *)(a1 + 444) > v200 >> 3)
              {
LABEL_414:
                unsigned int v201 = (char *)v1052;
                ++*(_DWORD *)(a1 + 440);
                if (*(void *)v201 != -4096) {
                  --*(_DWORD *)(a1 + 444);
                }
                *(void *)unsigned int v201 = v198;
                *((void *)v201 + 1) = &unk_1F25F6D00;
                v201[16] = 0;
                v201[88] = 0;
                if (v1031) {
                  sub_1CD41E8D8((uint64_t)(v201 + 16), (uint64_t)&v1026);
                }
                v201[96] = 0;
                v201[168] = 0;
                if (v1034) {
                  sub_1CD41E8D8((uint64_t)(v201 + 96), (uint64_t)v1032);
                }
                v201[176] = 0;
                v201[248] = 0;
                if (v1037) {
                  sub_1CD41E8D8((uint64_t)(v201 + 176), (uint64_t)v1035);
                }
                v201[256] = 0;
                v201[328] = 0;
                if (v1040) {
                  sub_1CD41E8D8((uint64_t)(v201 + 256), (uint64_t)v1038);
                }
                *((void *)v201 + 42) = v1041;
                *((void *)v201 + 43) = v201 + 360;
                *((void *)v201 + 44) = 0x2000000000;
                if (v1043) {
                  sub_1CD41E954((uint64_t)(v201 + 344), (uint64_t)&v1042);
                }
                *((void *)v201 + 1) = &unk_1F25FA3E0;
                *(_OWORD *)(v201 + 872) = v1045;
                goto LABEL_427;
              }
              sub_1CBBEE7CC((uint64_t)v158, v200);
              v1052 = 0;
              uint64_t v202 = *(void *)(a1 + 432);
              int v203 = *(_DWORD *)(a1 + 448);
            }
            sub_1CBBEE9A8(v202, v203, v198, &v1052);
            goto LABEL_414;
          }
LABEL_449:
          uint64_t v204 = v193 + 40;
          if ((void *)v193[40] != v193 + 40)
          {
            uint64_t v1065 = 0;
            uint64_t v1066 = 0;
            uint64_t v1064 = (uint64_t)&v1065;
            uint64_t v205 = v193[41];
            if ((void *)v205 != v204)
            {
              for (uint64_t k = 0; ; uint64_t k = v1065)
              {
                unsigned int v207 = *(_DWORD *)(v205 + 24);
                uint64_t v208 = &v1065;
                unint64_t v209 = &v1065;
                if (k)
                {
                  do
                  {
                    while (1)
                    {
                      unint64_t v209 = (uint64_t *)k;
                      unsigned int v210 = *(_DWORD *)(k + 32);
                      if (v207 >= v210) {
                        break;
                      }
                      uint64_t k = *v209;
                      uint64_t v208 = v209;
                      if (!*v209) {
                        goto LABEL_458;
                      }
                    }
                    if (v210 >= v207) {
                      goto LABEL_461;
                    }
                    uint64_t k = v209[1];
                  }
                  while (k);
                  uint64_t v208 = v209 + 1;
                }
LABEL_458:
                unsigned int v211 = operator new(0x30uLL);
                v211[8] = v207;
                *((void *)v211 + 5) = v205;
                *(void *)unsigned int v211 = 0;
                *((void *)v211 + 1) = 0;
                *((void *)v211 + 2) = v209;
                *uint64_t v208 = (uint64_t)v211;
                if (*(void *)v1064)
                {
                  uint64_t v1064 = *(void *)v1064;
                  unsigned int v211 = (_DWORD *)*v208;
                }
                sub_1CB8358B8((uint64_t *)v1065, (uint64_t *)v211);
                ++v1066;
LABEL_461:
                uint64_t v205 = *(void *)(v205 + 8);
                if ((void *)v205 == v204) {
                  break;
                }
              }
              int v193 = *(void **)v984;
            }
            uint64_t v212 = (*(uint64_t (**)(void))(*(void *)v193[2] + 176))(v193[2]);
            unint64_t v213 = ((*(void *)(*(void *)v984 + 112) - *(void *)(*(void *)v984 + 104)) >> 3);
            unsigned int v995 = *(_DWORD *)(v212 + 44);
            unsigned int v214 = v995 + 63;
            __src = (char *)&v1026 + 8;
            DWORD1(v1026) = 6;
            uint64_t v987 = 8 * ((v995 + 63) >> 6);
            if (v995 + 63 >= 0x1C0)
            {
              LODWORD(v1026) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v214 >= 0x40) {
              bzero((char *)&v1026 + 8, v987);
            }
            LODWORD(v1026) = (v995 + 63) >> 6;
            DWORD2(v1029) = v995;
            sub_1CBAF12DC(&v1058, v213, (uint64_t)&__src);
            if (__src != (char *)&v1026 + 8) {
              free(__src);
            }
            uint64_t v215 = v1066;
            while (v1066)
            {
              uint64_t v216 = v1065;
              unint64_t v217 = &v1065;
              if (v1065)
              {
                do
                {
                  unint64_t v217 = (uint64_t *)v216;
                  uint64_t v216 = *(void *)(v216 + 8);
                }
                while (v216);
                uint64_t v218 = v217[5];
              }
              else
              {
                do
                {
                  uint64_t v221 = v217;
                  unint64_t v217 = (uint64_t *)v217[2];
                }
                while ((uint64_t *)*v217 == v221);
                uint64_t v222 = (uint64_t *)v217[1];
                uint64_t v218 = v217[5];
                if (v222)
                {
                  do
                  {
                    uint64_t v219 = v222;
                    uint64_t v222 = (uint64_t *)*v222;
                  }
                  while (v222);
                  goto LABEL_480;
                }
              }
              uint64_t v219 = v217;
              do
              {
                int v220 = v219;
                uint64_t v219 = (uint64_t *)v219[2];
              }
              while ((uint64_t *)*v219 != v220);
LABEL_480:
              if ((uint64_t *)v1064 == v217) {
                uint64_t v1064 = (uint64_t)v219;
              }
              uint64_t v1066 = v215 - 1;
              sub_1CB91F7C8((uint64_t *)v1065, v217);
              operator delete(v217);
              v1052 = &v1054;
              HIDWORD(v1053) = 6;
              if (v214 >= 0x1C0)
              {
                LODWORD(v1053) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v214 >= 0x40) {
                bzero(&v1054, v987);
              }
              LODWORD(v1053) = (v995 + 63) >> 6;
              unsigned int v223 = v995;
              unsigned int v1056 = v995;
              uint64_t v224 = *(void *)(v218 + 88);
              uint64_t v225 = *(void *)(v218 + 96);
              unsigned int v226 = v1053;
              while (v224 != v225)
              {
                uint64_t v227 = v1058 + 72 * *(int *)(*(void *)v224 + 24);
                unsigned int v228 = *(_DWORD *)(v227 + 64);
                if (v223 < v228)
                {
                  int v233 = v223 & 0x3F;
                  if (v233) {
                    *((void *)v1052 + v226 - 1) &= ~(-1 << v233);
                  }
                  unsigned int v1056 = v228;
                  unsigned int v234 = v228 + 63;
                  if (v226 != (v228 + 63) >> 6)
                  {
                    uint64_t v235 = v234 >> 6;
                    if (v226 > v235)
                    {
                      LODWORD(v1053) = v234 >> 6;
                      unsigned int v226 = v234 >> 6;
                    }
                    else
                    {
                      if (v235 > HIDWORD(v1053)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      if (v235 != v226) {
                        bzero((char *)v1052 + 8 * v226, 8 * (v235 - v226));
                      }
                      unsigned int v226 = v235;
                      LODWORD(v1053) = v235;
                      unsigned int v228 = v1056;
                    }
                  }
                  if ((v228 & 0x3F) != 0) {
                    *((void *)v1052 + v226 - 1) &= ~(-1 << (v228 & 0x3F));
                  }
                  unsigned int v223 = v228;
                }
                uint64_t v229 = *(unsigned int *)(v227 + 8);
                if (v229)
                {
                  uint64_t v230 = *(uint64_t **)v227;
                  uint64_t v231 = v1052;
                  do
                  {
                    uint64_t v232 = *v230++;
                    *v231++ |= v232;
                    --v229;
                  }
                  while (v229);
                }
                v224 += 8;
              }
              uint64_t v236 = a1;
              sub_1CBBEF0FC((const llvm::MachineBasicBlock *)v218, (uint64_t)&v1052, *(void *)(a1 + 464));
              int v237 = *(_DWORD *)(v218 + 24);
              uint64_t v238 = v1058;
              uint64_t v239 = v1058 + 72 * v237;
              __src = (char *)&v1026 + 8;
              *(void *)&long long v1026 = 0x600000000;
              unint64_t v240 = *(unsigned int *)(v239 + 8);
              if (&__src != (void **)v239 && v240 != 0)
              {
                if (v240 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy((char *)&v1026 + 8, *(const void **)v239, 8 * *(unsigned int *)(v239 + 8));
                LODWORD(v1026) = v240;
                uint64_t v236 = a1;
              }
              uint64_t v242 = v238 + 72 * v237;
              int v244 = *(_DWORD *)(v242 + 64);
              unint64_t v243 = (unsigned int *)(v242 + 64);
              DWORD2(v1029) = v244;
              v1070 = 0;
              if (sub_1CBBEF45C(*(void *)(v236 + 432), *(_DWORD *)(v236 + 448), v218, &v1070)) {
                uint64_t v245 = v1070;
              }
              else {
                uint64_t v245 = (char *)(*(void *)(v236 + 432) + 888 * *(unsigned int *)(v236 + 448));
              }
              if ((void **)v239 != &v1052)
              {
                int v246 = (int)v1053;
                uint64_t v247 = *(unsigned int *)(v239 + 8);
                if (v247 >= v1053)
                {
                  if (v1053) {
                    memmove(*(void **)v239, v1052, 8 * v1053);
                  }
                }
                else
                {
                  if (*(_DWORD *)(v239 + 12) < v1053)
                  {
                    *(_DWORD *)(v239 + 8) = 0;
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v247) {
                    memmove(*(void **)v239, v1052, 8 * v247);
                  }
                  else {
                    uint64_t v247 = 0;
                  }
                  if (v247 != v1053) {
                    memcpy((void *)(*(void *)v239 + 8 * v247), (char *)v1052 + 8 * v247, 8 * v1053 - 8 * v247);
                  }
                }
                *(_DWORD *)(v239 + 8) = v246;
              }
              v248 = v245 + 8;
              *unint64_t v243 = v1056;
              if (!v245[248]) {
                (*(void (**)(char *))(*(void *)v248 + 40))(v245 + 8);
              }
              LODWORD(v249) = *(_DWORD *)(v239 + 8);
              unsigned int v250 = *((_DWORD *)v245 + 46);
              if (v250 >= v249) {
                uint64_t v249 = v249;
              }
              else {
                uint64_t v249 = v250;
              }
              if (v249)
              {
                unsigned int v251 = (uint64_t *)*((void *)v245 + 22);
                uint64_t v252 = *(void **)v239;
                do
                {
                  uint64_t v253 = *v251++;
                  *v252++ &= ~v253;
                  --v249;
                }
                while (v249);
              }
              if (!v245[328]) {
                (*(void (**)(char *))(*(void *)v248 + 40))(v245 + 8);
              }
              unsigned int v254 = *v243;
              unsigned int v255 = *((_DWORD *)v245 + 80);
              if (*v243 < v255)
              {
                int v272 = *v243 & 0x3F;
                uint64_t v273 = *(unsigned int *)(v239 + 8);
                if (v272) {
                  *(void *)(*(void *)v239 + 8 * v273 - 8) &= ~(-1 << v272);
                }
                unsigned int v274 = v273;
                *unint64_t v243 = v255;
                unsigned int v275 = v255 + 63;
                if (v273 != (v255 + 63) >> 6)
                {
                  uint64_t v276 = v275 >> 6;
                  if (v273 > v276)
                  {
                    *(_DWORD *)(v239 + 8) = v276;
                    unsigned int v274 = v275 >> 6;
                  }
                  else
                  {
                    if (v276 > *(_DWORD *)(v239 + 12)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    if (v276 != v273) {
                      bzero((void *)(*(void *)v239 + 8 * v273), 8 * (v276 - v273));
                    }
                    unsigned int v274 = v276;
                    *(_DWORD *)(v239 + 8) = v276;
                    unsigned int v255 = *v243;
                  }
                }
                if ((v255 & 0x3F) != 0) {
                  *(void *)(*(void *)v239 + 8 * v274 - 8) &= ~(-1 << (v255 & 0x3F));
                }
                unsigned int v254 = v255;
              }
              uint64_t v256 = *((unsigned int *)v245 + 66);
              if (v256)
              {
                uint64_t v257 = (uint64_t *)*((void *)v245 + 32);
                uint64_t v258 = *(void **)v239;
                do
                {
                  uint64_t v259 = *v257++;
                  *v258++ |= v259;
                  --v256;
                }
                while (v256);
              }
              int v260 = (char *)__src;
              BOOL v261 = DWORD2(v1029) != v254 || memcmp(__src, *(const void **)v239, 8 * v1026) != 0;
              if (v260 != (char *)&v1026 + 8) {
                free(v260);
              }
              if (v261)
              {
                uint64_t v262 = *(uint64_t **)(v218 + 64);
                unsigned int v263 = *(uint64_t **)(v218 + 72);
                while (v262 != v263)
                {
                  uint64_t v264 = *v262;
                  unsigned int v265 = *(_DWORD *)(*v262 + 24);
                  uint64_t v266 = (uint64_t *)operator new(0x30uLL);
                  uint64_t v267 = v266;
                  *((_DWORD *)v266 + 8) = v265;
                  v266[5] = v264;
                  uint64_t v268 = v1065;
                  unsigned int v269 = &v1065;
                  uint64_t v270 = &v1065;
                  if (v1065)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        uint64_t v270 = (uint64_t *)v268;
                        unsigned int v271 = *(_DWORD *)(v268 + 32);
                        if (v265 >= v271) {
                          break;
                        }
                        uint64_t v268 = *(void *)v268;
                        unsigned int v269 = v270;
                        if (!*v270) {
                          goto LABEL_559;
                        }
                      }
                      if (v271 >= v265) {
                        break;
                      }
                      uint64_t v268 = *(void *)(v268 + 8);
                      if (!v268)
                      {
                        unsigned int v269 = v270 + 1;
                        goto LABEL_559;
                      }
                    }
                    operator delete(v266);
                  }
                  else
                  {
LABEL_559:
                    *uint64_t v266 = 0;
                    v266[1] = 0;
                    v266[2] = (uint64_t)v270;
                    *unsigned int v269 = (uint64_t)v266;
                    if (*(void *)v1064)
                    {
                      uint64_t v1064 = *(void *)v1064;
                      uint64_t v267 = (uint64_t *)*v269;
                    }
                    sub_1CB8358B8((uint64_t *)v1065, v267);
                    ++v1066;
                  }
                  ++v262;
                }
              }
              if (v1052 != &v1054) {
                free(v1052);
              }
              uint64_t v215 = v1066;
              unsigned int v214 = v995 + 63;
            }
            uint64_t v277 = *(void *)v984 + 320;
            uint64_t v278 = *(void *)(*(void *)v984 + 328);
            if (v278 != v277)
            {
              while (1)
              {
                __src = 0;
                uint64_t v279 = sub_1CBBEF45C(*(void *)(a1 + 432), *(_DWORD *)(a1 + 448), v278, &__src)
                     ? (char *)__src
                     : (char *)(*(void *)(a1 + 432) + 888 * *(unsigned int *)(a1 + 448));
                if (v279[88]) {
                  break;
                }
                uint64_t v280 = v1058;
                int v281 = *(_DWORD *)(v278 + 24);
                uint64_t v282 = v1058 + 72 * v281;
                *((void *)v279 + 2) = v279 + 32;
                *((void *)v279 + 3) = 0x600000000;
                unint64_t v283 = *(unsigned int *)(v282 + 8);
                if (v279 + 16 != (char *)v282 && v283 != 0)
                {
                  if (v283 >= 7) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v279 + 32, *(const void **)v282, 8 * *(unsigned int *)(v282 + 8));
                  *((_DWORD *)v279 + 6) = v283;
                }
                *((_DWORD *)v279 + 20) = *(_DWORD *)(v280 + 72 * v281 + 64);
                v279[88] = 1;
                uint64_t v278 = *(void *)(v278 + 8);
                if (v278 == v277) {
                  goto LABEL_592;
                }
              }
LABEL_1761:
              llvm::report_fatal_error((llvm *)"This should only happen once", (const llvm::Twine *)1);
            }
LABEL_592:
            __src = &v1058;
            sub_1CB837E88((void ***)&__src);
            sub_1CD3C5048((uint64_t)&v1064, (void *)v1065);
            uint64_t v157 = a1;
          }
          if (v1046 != &v1048) {
            free(v1046);
          }
          goto LABEL_595;
        }
LABEL_398:
        *((void *)v1018 + v183 - 1) &= ~(-1 << v182);
        goto LABEL_399;
      }
      if (v183 > HIDWORD(v1019)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v183 != v185) {
        bzero((char *)v1018 + 8 * v185, 8 * (v183 - v185));
      }
      LODWORD(v1019) = (v180 + 63) >> 6;
      int v182 = v1021 & 0x3F;
    }
    if (!v182) {
      goto LABEL_399;
    }
    goto LABEL_398;
  }
  v965 = 0;
  uint64_t v966 = 0;
LABEL_595:
  __src = &unk_1F25FDCB8;
  *(void *)&long long v1026 = v982;
  *(void *)&long long v1027 = &__src;
  unsigned int v285 = sub_1CBD854F8((uint64_t)&__src);
  if ((void **)v1027 == &__src)
  {
    (*((void (**)(void **))__src + 4))(&__src);
  }
  else if ((void)v1027)
  {
    (*(void (**)(void))(*(void *)v1027 + 40))();
  }
  *(unsigned char *)(v157 + 525) = v285 < 4;
  uint64_t v286 = a2[41];
  v971 = a2 + 40;
  if ((void *)v286 != a2 + 40)
  {
    char v970 = 0;
    while (1)
    {
      uint64_t v287 = v286;
      v288 = sub_1CBBEF610(*(void *)(v157 + 256), *(_DWORD *)(v157 + 272), v286);
      v974 = (llvm::MachineBasicBlock *)v287;
      unint64_t v289 = sub_1CBBEF610(*(void *)(v157 + 344), *(_DWORD *)(v157 + 360), v287);
      uint64_t v290 = *(_DWORD **)(v157 + 248);
      *((void *)&v1026 + 1) = 0x600000000;
      *(void *)&long long v1026 = &v1027;
      __src = v290;
      unsigned int v291 = v290[11];
      unsigned int v1030 = v291;
      unsigned int v292 = v291 + 63;
      if (v291 + 63 < 0x40)
      {
        unsigned int v294 = 0;
      }
      else
      {
        uint64_t v293 = v292 >> 6;
        if (v292 >= 0x1C0) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        bzero(&v1027, 8 * v293);
        unsigned int v294 = v293;
        DWORD2(v1026) = v293;
      }
      if ((v291 & 0x3F) != 0) {
        *((void *)&v1027 + v294 - 1) &= ~(-1 << (v291 & 0x3F));
      }
      llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&__src, v974);
      if (*(unsigned char *)(v157 + 524))
      {
        unsigned int v295 = *(_DWORD *)((*(uint64_t (**)(void))(**(void **)(*((void *)v974 + 4) + 16) + 176))(*(void *)(*((void *)v974 + 4) + 16))
                         + 44);
        v1052 = &v1054;
        HIDWORD(v1053) = 6;
        if (v295 + 63 >= 0x1C0)
        {
          LODWORD(v1053) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v295 + 63 >= 0x40) {
          bzero(&v1054, 8 * ((v295 + 63) >> 6));
        }
        LODWORD(v1053) = (v295 + 63) >> 6;
        unsigned int v1056 = v295;
        v296 = (uint64_t *)*((void *)v974 + 11);
        int v297 = (uint64_t *)*((void *)v974 + 12);
        while (v296 != v297)
        {
          uint64_t v298 = *v296;
          v1046 = 0;
          if (sub_1CBBEF45C(*(void *)(v157 + 432), *(_DWORD *)(v157 + 448), v298, &v1046)) {
            uint64_t v299 = v1046;
          }
          else {
            uint64_t v299 = (_DWORD *)(*(void *)(v157 + 432) + 888 * *(unsigned int *)(v157 + 448));
          }
          unsigned int v300 = v299[20];
          if (v1056 < v300)
          {
            uint64_t v305 = v1053;
            if ((v1056 & 0x3F) != 0) {
              *((void *)v1052 + v1053 - 1) &= ~(-1 << (v1056 & 0x3F));
            }
            unsigned int v306 = v305;
            unsigned int v1056 = v300;
            unsigned int v307 = v300 + 63;
            if (v305 != (v300 + 63) >> 6)
            {
              uint64_t v308 = v307 >> 6;
              if (v305 > v308)
              {
                LODWORD(v1053) = v307 >> 6;
                unsigned int v306 = v307 >> 6;
              }
              else
              {
                if (v308 > HIDWORD(v1053)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v308 != v305) {
                  bzero((char *)v1052 + 8 * v305, 8 * (v308 - v305));
                }
                unsigned int v306 = v308;
                LODWORD(v1053) = v308;
                LOBYTE(v300) = v1056;
              }
            }
            int v309 = v300 & 0x3F;
            if (v309) {
              *((void *)v1052 + v306 - 1) &= ~(-1 << v309);
            }
          }
          uint64_t v301 = v299[6];
          if (v301)
          {
            int v302 = (uint64_t *)*((void *)v299 + 2);
            int v303 = v1052;
            do
            {
              uint64_t v304 = *v302++;
              *v303++ |= v304;
              --v301;
            }
            while (v301);
          }
          ++v296;
        }
        v1046 = &v1048;
        v1047 = (void *)0x400000000;
        sub_1CBBEF0FC(v974, (uint64_t)&v1052, *(void *)(v157 + 464));
        if (v1046 != &v1048) {
          free(v1046);
        }
        unsigned int v310 = v1056;
        if (v1030 < v1056)
        {
          uint64_t v311 = DWORD2(v1026);
          if ((v1030 & 0x3F) != 0) {
            *(void *)(v1026 + 8 * DWORD2(v1026) - 8) &= ~(-1 << (v1030 & 0x3F));
          }
          unsigned int v312 = v311;
          unsigned int v1030 = v310;
          unsigned int v313 = v310 + 63;
          if (v311 != (v310 + 63) >> 6)
          {
            uint64_t v314 = v313 >> 6;
            if (v311 > v314)
            {
              DWORD2(v1026) = v313 >> 6;
              unsigned int v312 = v313 >> 6;
            }
            else
            {
              if (v314 > HIDWORD(v1026)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v314 != v311) {
                bzero((void *)(v1026 + 8 * v311), 8 * (v314 - v311));
              }
              unsigned int v312 = v314;
              DWORD2(v1026) = v314;
              LOBYTE(v310) = v1030;
            }
          }
          int v315 = v310 & 0x3F;
          if (v315) {
            *(void *)(v1026 + 8 * v312 - 8) &= ~(-1 << v315);
          }
        }
        uint64_t v316 = v1053;
        v317 = (uint64_t *)v1052;
        if (v1053)
        {
          uint64_t v318 = (void *)v1026;
          unint64_t v319 = (uint64_t *)v1052;
          do
          {
            uint64_t v320 = *v319++;
            *v318++ |= v320;
            --v316;
          }
          while (v316);
        }
        if (v317 != &v1054) {
          free(v317);
        }
      }
      if (__src) {
        unsigned int v321 = (char *)__src + 8;
      }
      else {
        unsigned int v321 = 0;
      }
      unint64_t v322 = *(unsigned int *)(*v321 + 6424);
      unsigned int v323 = (_WORD *)(v321[6] + ((v322 >> 3) & 0x1FFFFFFE));
      __int16 v325 = *v323;
      uint64_t v324 = v323 + 1;
      unsigned __int16 v326 = v325 + 267 * (v322 & 0xF);
      v973 = v288 + 1;
      v972 = v289 + 1;
      do
      {
        uint64_t v976 = (1 << v326) & *(void *)(v1026 + 8 * (v326 >> 6));
        if (v976) {
          break;
        }
        int v327 = *v324++;
        v326 += v327;
      }
      while (v327);
      *(_DWORD *)(v157 + 520) = 0;
      uint64_t v328 = (void *)((char *)v974 + 48);
      unint64_t v329 = *((void *)v974 + 6) & 0xFFFFFFFFFFFFFFF8;
      if ((llvm::MachineBasicBlock *)((char *)v974 + 48) != (llvm::MachineBasicBlock *)v329)
      {
        if (!v329 || (*(unsigned char *)v329 & 4) == 0)
        {
          while ((*(_WORD *)(v329 + 44) & 4) != 0)
            unint64_t v329 = *(void *)v329 & 0xFFFFFFFFFFFFFFF8;
        }
        if (**(_WORD **)(v329 + 16) == 623)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1338, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EBCC1338))
          {
            byte_1EBCC132C = 1;
            __cxa_guard_release(&qword_1EBCC1338);
          }
          if (byte_1EBCC132C == 1) {
            *(_DWORD *)(v157 + 520) = 11;
          }
        }
      }
      uint64_t v330 = *v328 & 0xFFFFFFFFFFFFFFF8;
      if (!v330 || (*(unsigned char *)v330 & 4) == 0)
      {
        while ((*(_WORD *)(v330 + 44) & 4) != 0)
          uint64_t v330 = *(void *)v330 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((void *)v330 != v328) {
        break;
      }
      LOBYTE(v331) = 0;
LABEL_1276:
      if ((long long *)v1026 != &v1027) {
        free((void *)v1026);
      }
      v970 |= v331;
      uint64_t v286 = *((void *)v974 + 1);
      if ((void *)v286 == v971) {
        goto LABEL_1287;
      }
    }
    int v331 = 0;
    int v978 = 0;
    while (**(unsigned __int16 **)(v330 + 16) - 13 < 5)
    {
LABEL_1214:
      uint64_t v330 = *(void *)v330 & 0xFFFFFFFFFFFFFFF8;
      if (!v330 || (*(unsigned char *)v330 & 4) == 0)
      {
        while ((*(_WORD *)(v330 + 44) & 4) != 0)
          uint64_t v330 = *(void *)v330 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((void *)v330 == v328) {
        goto LABEL_1276;
      }
    }
    uint64_t v332 = *(_DWORD **)(v157 + 248);
    uint64_t v1054 = 0x600000000;
    v1053 = v1055;
    v1052 = v332;
    unsigned int v333 = v332[11];
    unsigned int v1057 = v333;
    unsigned int v334 = v333 + 63;
    int v977 = v331;
    if (v333 + 63 < 0x40)
    {
      unsigned int v336 = 0;
    }
    else
    {
      uint64_t v335 = v334 >> 6;
      if (v334 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v1055, 8 * v335);
      unsigned int v336 = v335;
      LODWORD(v1054) = v335;
    }
    if ((v333 & 0x3F) != 0) {
      v1055[v336 - 1] &= ~(-1 << (v333 & 0x3F));
    }
    uint64_t v337 = *(_DWORD **)(v157 + 248);
    uint64_t v1048 = 0x600000000;
    v1047 = v1049;
    v1046 = v337;
    int v338 = v337[11];
    int v1051 = v338;
    unsigned int v339 = v338 + 63;
    if ((v338 + 63) < 0x40)
    {
      unsigned int v341 = 0;
    }
    else
    {
      uint64_t v340 = v339 >> 6;
      if (v339 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v1049, 8 * v340);
      unsigned int v341 = v340;
      LODWORD(v1048) = v340;
    }
    if ((v338 & 0x3F) != 0) {
      v1049[v341 - 1] &= ~(-1 << (v338 & 0x3F));
    }
    int v342 = *(unsigned __int16 **)(v330 + 16);
    uint64_t v343 = sub_1CBE52E8C(*v342);
    if ((v343 & 0xFF00000000) != 0 && v343 == 19)
    {
      uint64_t v347 = *(void *)(v330 + 32);
      unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v330);
      uint64_t v345 = v976;
      int v346 = v978;
      if (NumExplicitOperands)
      {
        uint64_t v349 = v347 + 32 * NumExplicitOperands;
        uint64_t v350 = v1047;
        if (v1046) {
          int v351 = (char *)v1046 + 8;
        }
        else {
          int v351 = 0;
        }
        v352 = v1053;
        if (v1052) {
          uint64_t v353 = (char *)v1052 + 8;
        }
        else {
          uint64_t v353 = 0;
        }
        do
        {
          if (!*(_DWORD *)v347)
          {
            int v354 = *(unsigned __int16 *)(v347 + 4);
            if ((*(_DWORD *)v347 & 0x1000000) != 0)
            {
              v360 = (unsigned __int16 *)(v351[6]
                                        + (((unint64_t)*(unsigned int *)(*v351
                                                                              + 24 * *(unsigned __int16 *)(v347 + 4)
                                                                              + 16) >> 3) & 0x1FFFFFFE));
              int v362 = *v360;
              v361 = v360 + 1;
              int v363 = v362 + (*(_DWORD *)(*v351 + 24 * *(unsigned __int16 *)(v347 + 4) + 16) & 0xF) * v354;
              do
              {
                v350[(unsigned __int16)v363 >> 6] |= 1 << v363;
                int v364 = *v361++;
                v363 += v364;
              }
              while (v364);
            }
            else
            {
              uint64_t v355 = (unsigned __int16 *)(v353[6]
                                        + (((unint64_t)*(unsigned int *)(*v353
                                                                              + 24 * *(unsigned __int16 *)(v347 + 4)
                                                                              + 16) >> 3) & 0x1FFFFFFE));
              int v357 = *v355;
              v356 = v355 + 1;
              int v358 = v357 + (*(_DWORD *)(*v353 + 24 * *(unsigned __int16 *)(v347 + 4) + 16) & 0xF) * v354;
              do
              {
                v352[(unsigned __int16)v358 >> 6] |= 1 << v358;
                int v359 = *v356++;
                v358 += v359;
              }
              while (v359);
            }
          }
          v347 += 32;
        }
        while (v347 != v349);
      }
    }
    else
    {
      sub_1CBBE60E4(v330, (llvm::LiveRegUnits *)&v1046, &v1052, *(void *)(v157 + 248));
      int v342 = *(unsigned __int16 **)(v330 + 16);
      uint64_t v345 = v976;
      int v346 = v978;
    }
    uint64_t v365 = *((void *)v342 + 2);
    int v366 = v346 | ((~v365 & 0x400000040) == 0);
    if (v345 && (v366 & 1) != 0)
    {
      if (__src) {
        v367 = (char *)__src + 8;
      }
      else {
        v367 = 0;
      }
      unint64_t v368 = *(unsigned int *)(*v367 + 6424);
      v369 = (_WORD *)(v367[6] + ((v368 >> 3) & 0x1FFFFFFE));
      __int16 v371 = *v369;
      unint64_t v370 = v369 + 1;
      unsigned __int16 v372 = v371 + 267 * (v368 & 0xF);
      do
      {
        uint64_t v373 = (1 << v372) & *(void *)(v1026 + 8 * (v372 >> 6));
        if (v373) {
          break;
        }
        int v374 = *v370++;
        v372 += v374;
      }
      while (v374);
      int v366 = v366 & (v373 == 0);
    }
    if (v345 && (v366 & 1) != 0)
    {
      uint64_t v375 = v1026;
      if (__src) {
        unint64_t v376 = (char *)__src + 8;
      }
      else {
        unint64_t v376 = 0;
      }
      unint64_t v377 = *(unsigned int *)(*v376 + 6424);
      unint64_t v378 = (unsigned __int16 *)(v376[6] + ((v377 >> 3) & 0x1FFFFFFE));
      int v380 = *v378;
      v379 = v378 + 1;
      int v381 = v380 + 267 * (v377 & 0xF);
      v382 = v379;
      unsigned __int16 v383 = v381;
      while (((*(void *)(v1026 + 8 * (v383 >> 6)) >> v383) & 1) == 0)
      {
        int v384 = *v382++;
        v383 += v384;
        if (!v384)
        {
          do
          {
            int v366 = 0;
            *(void *)(v375 + 8 * ((unsigned __int16)v381 >> 6)) |= 1 << v381;
            int v385 = *v379++;
            v381 += v385;
          }
          while (v385);
          break;
        }
      }
    }
    if (v1048 >= DWORD2(v1026)) {
      uint64_t v386 = DWORD2(v1026);
    }
    else {
      uint64_t v386 = v1048;
    }
    if (v386)
    {
      v387 = (uint64_t *)v1047;
      v388 = (void *)v1026;
      do
      {
        uint64_t v389 = *v387++;
        *v388++ &= ~v389;
        --v386;
      }
      while (v386);
    }
    int v978 = v366;
    if ((v365 & 0x400000000) == 0) {
      goto LABEL_728;
    }
    uint64_t v391 = *((void *)v342 + 1);
    if ((*(_WORD *)(v330 + 44) & 0xC) != 0 && (*(_WORD *)(v330 + 44) & 4) == 0)
    {
      uint64_t v400 = v330;
      if ((v391 & 0x80) == 0)
      {
        while ((*(_WORD *)(v400 + 44) & 8) != 0)
        {
          int v390 = 0;
          uint64_t v400 = *(void *)(v400 + 8);
          if ((*(unsigned char *)(*(void *)(v400 + 16) + 8) & 0x80) != 0) {
            goto LABEL_1186;
          }
        }
LABEL_734:
        v980 = (llvm::MachineInstr *)v330;
        uint64_t v1058 = 1;
        uint64_t v1059 = -1;
        uint64_t v1060 = -1;
        v1061 = v1063;
        uint64_t v1062 = 0x400000000;
        uint64_t v393 = *v342;
        uint64_t v394 = sub_1CBE52E8C(*v342);
        if ((v394 & 0xFF00000000) == 0) {
          goto LABEL_767;
        }
        int v395 = v394;
        char v396 = v394 - 32;
        if ((v394 - 32) > 0x2B) {
          goto LABEL_767;
        }
        if (((1 << v396) & 0xFC000380000) != 0)
        {
          int v397 = v393;
          unsigned int v398 = 20;
        }
        else
        {
          if (((1 << v396) & 3) != 0) {
            goto LABEL_748;
          }
          if (((1 << v396) & 0x1040) == 0) {
            goto LABEL_767;
          }
          uint64_t v401 = *(void *)(*(void *)(*((void *)v980 + 3) + 32) + 16);
          if (sub_1CBDB2780(v393, 16, 0) != 22) {
            goto LABEL_767;
          }
          if (v395 == 44)
          {
LABEL_748:
            unsigned int v399 = sub_1CBDA6464(v393, 0x11u);
            goto LABEL_749;
          }
          if (!*(unsigned char *)(v401 + 350)) {
            goto LABEL_767;
          }
          int v397 = v393;
          unsigned int v398 = 31;
        }
        unsigned int v399 = sub_1CBDA6464(v397, v398);
        if (v399 == -1)
        {
LABEL_767:
          uint64_t v330 = (uint64_t)v980;
          if (!*(_DWORD *)(v157 + 520)) {
            goto LABEL_797;
          }
          if (!*(unsigned char *)(v157 + 525)) {
            goto LABEL_797;
          }
          int v415 = **((unsigned __int16 **)v980 + 2);
          uint64_t v416 = sub_1CBE52E8C(v415);
          if ((v416 & 0xFF00000000) == 0) {
            goto LABEL_797;
          }
          char v417 = v416 - 61;
          if ((v416 - 61) > 0x2D) {
            goto LABEL_774;
          }
          if (((1 << v417) & 0x18000000DLL) != 0)
          {
            unsigned int v418 = 7;
            goto LABEL_779;
          }
          if (((1 << v417) & 0x300000000000) == 0)
          {
LABEL_774:
            if ((v416 - 190) > 3 || v416 == 191) {
              goto LABEL_797;
            }
          }
          unsigned int v418 = 87;
LABEL_779:
          unsigned int v420 = sub_1CBDA6464(v415, v418);
          if (sub_1CBC2D2EC((uint64_t)v980, v420, (void *)(*(void *)(v157 + 248) + 8)) != 1) {
            goto LABEL_797;
          }
          int v421 = *(_DWORD *)(*((void *)v980 + 4) + 32 * v420 + 4);
          LODWORD(v1064) = v421;
          if (v1058)
          {
            int v422 = 4;
            int v423 = &v1059;
          }
          else
          {
            int v422 = v1060;
            if (!v1060)
            {
              int v432 = 0;
LABEL_795:
              unint64_t v433 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)&v1064, &v1064, v432);
              *unint64_t v433 = v1064;
              if (v1062 >= (unint64_t)HIDWORD(v1062)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1061 + v1062) = v1064;
              LODWORD(v1062) = v1062 + 1;
LABEL_797:
              v975 = v342;
              uint64_t v434 = *(void *)(v157 + 248);
              int v435 = **((unsigned __int16 **)v980 + 2);
              uint64_t v436 = sub_1CBE52E8C(v435);
              if ((v436 & 0xFF00000000) == 0) {
                goto LABEL_847;
              }
              if ((v436 - 51) > 0x18 || ((1 << (v436 - 51)) & 0x1F80007) == 0) {
                goto LABEL_847;
              }
              unsigned int v438 = sub_1CBDA6464(v435, 3u);
              uint64_t v439 = *((void *)v980 + 4);
              unsigned int v440 = *(_DWORD *)(v439 + 32 * v438 + 4);
              unsigned int v441 = *(_DWORD *)(v439 + 32 * sub_1CBDA6464(v435, 0x11u) + 4);
              LODWORD(v1064) = v441;
              unsigned int v442 = *(_DWORD *)(v439 + 32 * sub_1CBDA6464(v435, 4u) + 4);
              LODWORD(v1070) = v442;
              if (v440 != v441)
              {
                BOOL v455 = v440 - 1 > 0x3FFFFFFE || v441 - 1 > 0x3FFFFFFE;
                if (v455) {
                  goto LABEL_827;
                }
                if (!llvm::MCRegisterInfo::regsOverlap((void *)(v434 + 8), v440, v441)) {
                  goto LABEL_827;
                }
              }
              if (v1058)
              {
                int v443 = 4;
                uint64_t v444 = &v1059;
              }
              else
              {
                int v443 = v1060;
                if (!v1060)
                {
                  char v453 = 0;
                  goto LABEL_818;
                }
                uint64_t v444 = (uint64_t *)v1059;
              }
              int v445 = v443 - 1;
              unsigned int v446 = v445 & (37 * v441);
              int v447 = (_DWORD *)v444 + v446;
              int v448 = *v447;
              if (v441 == *v447)
              {
LABEL_827:
                uint64_t v330 = (uint64_t)v980;
                goto LABEL_828;
              }
              int v449 = 0;
              int v450 = 1;
              while (v448 != -1)
              {
                if (v449) {
                  BOOL v451 = 0;
                }
                else {
                  BOOL v451 = v448 == -2;
                }
                if (v451) {
                  int v449 = v447;
                }
                unsigned int v452 = v446 + v450++;
                unsigned int v446 = v452 & v445;
                int v447 = (_DWORD *)v444 + v446;
                int v448 = *v447;
                if (v441 == *v447) {
                  goto LABEL_827;
                }
              }
              if (v449) {
                char v453 = v449;
              }
              else {
                char v453 = v447;
              }
LABEL_818:
              int v454 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)&v1064, &v1064, v453);
              *int v454 = v1064;
              uint64_t v330 = (uint64_t)v980;
              if (v1062 >= (unint64_t)HIDWORD(v1062)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_DWORD *)v1061 + v1062) = v1064;
              LODWORD(v1062) = v1062 + 1;
              unsigned int v442 = v1070;
LABEL_828:
              if (v440 != v442
                && (v440 - 1 > 0x3FFFFFFE
                 || v442 - 1 > 0x3FFFFFFE
                 || !llvm::MCRegisterInfo::regsOverlap((void *)(v434 + 8), v440, v442)))
              {
                goto LABEL_846;
              }
              if (v1058)
              {
                int v457 = 4;
                int v458 = &v1059;
              }
              else
              {
                int v457 = v1060;
                if (!v1060)
                {
                  v467 = 0;
LABEL_844:
                  long long v468 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)&v1070, &v1070, v467);
                  *long long v468 = v1070;
                  if (v1062 >= (unint64_t)HIDWORD(v1062)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v1061 + v1062) = v1070;
                  LODWORD(v1062) = v1062 + 1;
                  unsigned int v442 = v1070;
LABEL_846:
                  int v469 = v1064;
                  if (v1064 == v442
                    || v442 - 1 > 0x3FFFFFFE
                    || (v1064 - 1) > 0x3FFFFFFE
                    || !llvm::MCRegisterInfo::regsOverlap((void *)(v434 + 8), v1064, v442))
                  {
                    goto LABEL_847;
                  }
                  char v477 = v1058;
                  if (v1058)
                  {
                    int v478 = 4;
                    v479 = &v1059;
                  }
                  else
                  {
                    int v478 = v1060;
                    if (!v1060)
                    {
                      v677 = 0;
                      goto LABEL_1224;
                    }
                    v479 = (uint64_t *)v1059;
                  }
                  int v480 = v478 - 1;
                  unsigned int v481 = v480 & (37 * v469);
                  v482 = (_DWORD *)v479 + v481;
                  int v483 = *v482;
                  if (v469 == *v482)
                  {
LABEL_1226:
                    if (v477)
                    {
                      int v679 = 4;
                      v680 = &v1059;
                    }
                    else
                    {
                      int v679 = v1060;
                      if (!v1060)
                      {
                        v689 = 0;
LABEL_1241:
                        v690 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)&v1070, &v1070, v689);
                        _DWORD *v690 = v1070;
                        if (v1062 >= (unint64_t)HIDWORD(v1062)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *((_DWORD *)v1061 + v1062) = v1070;
                        LODWORD(v1062) = v1062 + 1;
                        goto LABEL_847;
                      }
                      v680 = (uint64_t *)v1059;
                    }
                    int v681 = v679 - 1;
                    unsigned int v682 = (37 * v1070) & v681;
                    v683 = (_DWORD *)v680 + v682;
                    int v684 = *v683;
                    if (v1070 != *v683)
                    {
                      v685 = 0;
                      int v686 = 1;
                      while (v684 != -1)
                      {
                        if (v685) {
                          BOOL v687 = 0;
                        }
                        else {
                          BOOL v687 = v684 == -2;
                        }
                        if (v687) {
                          v685 = v683;
                        }
                        unsigned int v688 = v682 + v686++;
                        unsigned int v682 = v688 & v681;
                        v683 = (_DWORD *)v680 + v682;
                        int v684 = *v683;
                        if (v1070 == *v683) {
                          goto LABEL_847;
                        }
                      }
                      if (v685) {
                        v689 = v685;
                      }
                      else {
                        v689 = v683;
                      }
                      goto LABEL_1241;
                    }
LABEL_847:
                    v470 = *(void **)(*(void *)(v330 + 24) + 32);
                    long long v471 = (unsigned __int8 *)v470[2];
                    if (!v471[394]
                      || (int v472 = **(unsigned __int16 **)(v330 + 16),
                          uint64_t v473 = sub_1CBE52E8C(v472),
                          (v473 & 0xFF00000000) == 0))
                    {
LABEL_922:
                      int v508 = v471[351];
                      if (!(v508 | v471[349])) {
                        goto LABEL_1088;
                      }
                      int v983 = v471[349];
                      uint64_t v509 = *(void *)(v157 + 248);
                      int v981 = *(unsigned __int8 *)(v157 + 524);
                      v1070 = (char *)v1072;
                      uint64_t v1071 = 0x400000000;
                      uint64_t v510 = *(void *)(v330 + 16);
                      uint64_t v511 = *(unsigned __int8 *)(v510 + 4);
                      uint64_t v512 = *(unsigned __int16 *)(v510 + 2);
                      if ((int)v511 + 1 < v512)
                      {
                        uint64_t v513 = 32 * v511;
                        uint64_t v514 = v512 - 1;
                        do
                        {
                          if (sub_1CBC2D2EC((uint64_t)v980, v511, (void *)(v509 + 8)) == 1)
                          {
                            if (v1071 >= (unint64_t)HIDWORD(v1071)) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            *(void *)&v1070[8 * v1071] = v513 + *((void *)v980 + 4);
                            LODWORD(v1071) = v1071 + 1;
                          }
                          ++v511;
                          v513 += 32;
                        }
                        while (v514 != v511);
                        uint64_t v330 = (uint64_t)v980;
                        v470 = *(void **)(*((void *)v980 + 3) + 32);
                      }
                      unsigned int v515 = ((*(unsigned __int16 *)(*v470 + 18) >> 4) & 0x3FF) - 101;
                      BOOL v455 = v515 > 7;
                      int v516 = (1 << v515) & 0x8D;
                      if (v455 || v516 == 0)
                      {
                        unsigned int v518 = 0;
                      }
                      else
                      {
                        unsigned int v518 = 0;
                        if (v508)
                        {
                          v519 = *(unsigned __int16 **)(v330 + 16);
                          if ((*((void *)v519 + 2) & 0x2001C00) == 0x2000800)
                          {
                            int v520 = *v519;
                            int v521 = sub_1CBDB2780(*v519, 23, 0);
                            unsigned int v518 = 0;
                            if (v521 == 45) {
                              unsigned int v518 = *(_DWORD *)(*(void *)(v330 + 32)
                            }
                                               + 32 * sub_1CBDA6464(v520, 0x57u)
                                               + 4);
                          }
                        }
                      }
                      unsigned int v522 = v518;
                      int v523 = v983;
                      int v524 = v981;
                      unsigned int v996 = v518;
                      v999 = (llvm::MachineMemOperand *)(v509 + 8);
                      while (1)
                      {
                        uint64_t v1064 = 1;
                        uint64_t v1065 = -1;
                        uint64_t v1066 = -1;
                        v1067 = (unsigned int *)v1069;
                        uint64_t v1068 = 0x400000000;
                        if (!v1071)
                        {
                          char v991 = 0;
                          goto LABEL_1083;
                        }
                        int v525 = 0;
                        v526 = v1070;
                        v527 = &v1070[8 * v1071];
                        do
                        {
                          int v528 = *(_DWORD *)(*(void *)v526 + 4);
                          if (__src) {
                            v529 = (char *)__src + 8;
                          }
                          else {
                            v529 = 0;
                          }
                          unint64_t v530 = *(unsigned int *)(*v529
                                                 + 24 * (unsigned __int16)*(_DWORD *)(*(void *)v526 + 4)
                                                 + 16);
                          v531 = (_WORD *)(v529[6] + ((v530 >> 3) & 0x1FFFFFFE));
                          __int16 v533 = *v531;
                          v532 = v531 + 1;
                          unsigned __int16 v534 = v533 + (v530 & 0xF) * v528;
                          while (((*(void *)(v1026 + 8 * (v534 >> 6)) >> v534) & 1) == 0)
                          {
                            int v535 = *v532++;
                            v534 += v535;
                            if (!v535) {
                              goto LABEL_952;
                            }
                          }
                          if (v524 || ((**(_DWORD **)v526 >> 26) & ~HIBYTE(**(_DWORD **)v526) & 1) == 0) {
                            goto LABEL_978;
                          }
LABEL_952:
                          if (v1058)
                          {
                            int v536 = 4;
                            v537 = &v1059;
                          }
                          else
                          {
                            int v536 = v1060;
                            if (!v1060) {
                              goto LABEL_961;
                            }
                            v537 = (uint64_t *)v1059;
                          }
                          int v538 = v536 - 1;
                          unsigned int v539 = v538 & (37 * v528);
                          int v540 = *((_DWORD *)v537 + v539);
                          if (v528 == v540) {
                            goto LABEL_978;
                          }
                          int v541 = 1;
                          while (v540 != -1)
                          {
                            unsigned int v542 = v539 + v541++;
                            unsigned int v539 = v542 & v538;
                            int v540 = *((_DWORD *)v537 + v539);
                            if (v528 == v540) {
                              goto LABEL_978;
                            }
                          }
LABEL_961:
                          LODWORD(v1005[0]) = *(_DWORD *)(*(void *)v526 + 4);
                          if (v1064)
                          {
                            int v543 = 4;
                            v544 = &v1065;
LABEL_963:
                            int v545 = v543 - 1;
                            unsigned int v546 = v545 & (37 * v528);
                            v547 = (_DWORD *)v544 + v546;
                            int v548 = *v547;
                            if (v528 == *v547) {
                              goto LABEL_978;
                            }
                            v549 = 0;
                            int v550 = 1;
                            while (v548 != -1)
                            {
                              if (v549) {
                                BOOL v551 = 0;
                              }
                              else {
                                BOOL v551 = v548 == -2;
                              }
                              if (v551) {
                                v549 = v547;
                              }
                              unsigned int v552 = v546 + v550++;
                              unsigned int v546 = v552 & v545;
                              v547 = (_DWORD *)v544 + v546;
                              int v548 = *v547;
                              if (v528 == *v547) {
                                goto LABEL_978;
                              }
                            }
                            if (v549) {
                              v553 = v549;
                            }
                            else {
                              v553 = v547;
                            }
                            goto LABEL_976;
                          }
                          int v543 = v1066;
                          if (v1066)
                          {
                            v544 = (uint64_t *)v1065;
                            goto LABEL_963;
                          }
                          v553 = 0;
LABEL_976:
                          v554 = sub_1CB834EC4((uint64_t)&v1064, (uint64_t)v1005, v1005, v553);
                          _DWORD *v554 = v1005[0];
                          if (v1068 >= (unint64_t)HIDWORD(v1068)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          v1067[v1068] = v1005[0];
                          int v525 = v1068 + 1;
                          LODWORD(v1068) = v1068 + 1;
                          unsigned int v522 = v996;
LABEL_978:
                          v526 += 8;
                        }
                        while (v526 != v527);
                        v555 = v1067;
                        if (v525)
                        {
                          char v991 = 0;
                          v1003 = (char *)&v1067[v525];
                          while (1)
                          {
                            unsigned int v556 = *v555;
                            char v557 = v1058;
                            if (v1058)
                            {
                              int v558 = 4;
                              v559 = &v1059;
                            }
                            else
                            {
                              int v558 = v1060;
                              if (!v1060) {
                                goto LABEL_995;
                              }
                              v559 = (uint64_t *)v1059;
                            }
                            int v560 = v558 - 1;
                            unsigned int v561 = v560 & (37 * v556);
                            int v562 = *((_DWORD *)v559 + v561);
                            if (v556 == v562) {
                              goto LABEL_1045;
                            }
                            int v563 = 1;
                            while (v562 != -1)
                            {
                              unsigned int v564 = v561 + v563++;
                              unsigned int v561 = v564 & v560;
                              int v562 = *((_DWORD *)v559 + v561);
                              if (v556 == v562) {
                                goto LABEL_1045;
                              }
                            }
LABEL_995:
                            if (v523 && v1071)
                            {
                              v565 = v1070;
                              v566 = &v1070[8 * v1071];
                              if (v1064) {
                                v567 = &v1065;
                              }
                              else {
                                v567 = (uint64_t *)v1065;
                              }
                              if (v1064) {
                                int v568 = 3;
                              }
                              else {
                                int v568 = v1066 - 1;
                              }
                              BOOL v569 = (v1064 & 1 | v1066) == 0;
                              int v985 = 37 * v556;
                              while (1)
                              {
                                unsigned int v570 = *(_DWORD *)(*(void *)v565 + 4);
                                char v571 = v556 == v570 || v569;
                                if ((v571 & 1) == 0)
                                {
                                  int v572 = *((_DWORD *)v567 + (v568 & (37 * v556)));
                                  if (v556 == v572)
                                  {
                                    BOOL v575 = 1;
                                  }
                                  else
                                  {
                                    int v573 = 1;
                                    unsigned int v574 = v568 & (37 * v556);
                                    do
                                    {
                                      BOOL v575 = v572 != -1;
                                      if (v572 == -1) {
                                        break;
                                      }
                                      unsigned int v576 = v574 + v573++;
                                      unsigned int v574 = v576 & v568;
                                      int v572 = *((_DWORD *)v567 + v574);
                                    }
                                    while (v556 != v572);
                                  }
                                  unsigned int v577 = (37 * v570) & v568;
                                  int v578 = *((_DWORD *)v567 + v577);
                                  if (v570 != v578)
                                  {
                                    int v579 = 1;
                                    while (v578 != -1)
                                    {
                                      unsigned int v580 = v577 + v579++;
                                      unsigned int v577 = v580 & v568;
                                      int v578 = *((_DWORD *)v567 + v577);
                                      if (v570 == v578) {
                                        goto LABEL_1023;
                                      }
                                    }
                                    if (v575
                                      && v556 - 1 <= 0x3FFFFFFE
                                      && v570 - 1 <= 0x3FFFFFFE
                                      && llvm::MCRegisterInfo::regsOverlap(v999, v556, v570))
                                    {
                                      break;
                                    }
                                  }
                                }
LABEL_1023:
                                v565 += 8;
                                if (v565 == v566)
                                {
                                  int v523 = v983;
                                  int v524 = v981;
                                  unsigned int v522 = v996;
                                  goto LABEL_1025;
                                }
                              }
                              LODWORD(v1005[0]) = v556;
                              if (v557)
                              {
                                int v593 = 4;
                                v594 = &v1059;
                                int v523 = v983;
                                int v524 = v981;
                                unsigned int v522 = v996;
                                goto LABEL_1053;
                              }
                              int v593 = v1060;
                              int v523 = v983;
                              int v524 = v981;
                              unsigned int v522 = v996;
                              if (!v1060)
                              {
                                v603 = 0;
                                goto LABEL_1066;
                              }
                              v594 = (uint64_t *)v1059;
LABEL_1053:
                              int v595 = v593 - 1;
                              unsigned int v596 = v595 & v985;
                              v597 = (_DWORD *)v594 + (v595 & v985);
                              int v598 = *v597;
                              if (v556 != *v597)
                              {
                                v599 = 0;
                                int v600 = 1;
                                while (v598 != -1)
                                {
                                  if (v599) {
                                    BOOL v601 = 0;
                                  }
                                  else {
                                    BOOL v601 = v598 == -2;
                                  }
                                  if (v601) {
                                    v599 = v597;
                                  }
                                  unsigned int v602 = v596 + v600++;
                                  unsigned int v596 = v602 & v595;
                                  v597 = (_DWORD *)v594 + v596;
                                  int v598 = *v597;
                                  if (v556 == *v597) {
                                    goto LABEL_1068;
                                  }
                                }
                                if (v599) {
                                  v603 = v599;
                                }
                                else {
                                  v603 = v597;
                                }
LABEL_1066:
                                v604 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)v1005, v1005, v603);
                                _DWORD *v604 = v1005[0];
                                if (v1062 >= (unint64_t)HIDWORD(v1062)) {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                                }
                                *((_DWORD *)v1061 + v1062) = v1005[0];
                                LODWORD(v1062) = v1062 + 1;
                              }
LABEL_1068:
                              char v991 = 1;
                              if (!v522) {
                                goto LABEL_1045;
                              }
LABEL_1026:
                              if (v556 != v522
                                && (v522 >> 30
                                 || v556 - 1 > 0x3FFFFFFE
                                 || !llvm::MCRegisterInfo::regsOverlap(v999, v556, v522)))
                              {
                                goto LABEL_1045;
                              }
                              LODWORD(v1005[0]) = v556;
                              if (v1058)
                              {
                                int v581 = 4;
                                v582 = &v1059;
                                goto LABEL_1029;
                              }
                              int v581 = v1060;
                              if (v1060)
                              {
                                v582 = (uint64_t *)v1059;
LABEL_1029:
                                int v583 = v581 - 1;
                                unsigned int v584 = v583 & (37 * v556);
                                v585 = (_DWORD *)v582 + v584;
                                int v586 = *v585;
                                if (v556 != *v585)
                                {
                                  v587 = 0;
                                  int v588 = 1;
                                  while (v586 != -1)
                                  {
                                    if (v587) {
                                      BOOL v589 = 0;
                                    }
                                    else {
                                      BOOL v589 = v586 == -2;
                                    }
                                    if (v589) {
                                      v587 = v585;
                                    }
                                    unsigned int v590 = v584 + v588++;
                                    unsigned int v584 = v590 & v583;
                                    v585 = (_DWORD *)v582 + v584;
                                    int v586 = *v585;
                                    if (v556 == *v585) {
                                      goto LABEL_1044;
                                    }
                                  }
                                  if (v587) {
                                    v591 = v587;
                                  }
                                  else {
                                    v591 = v585;
                                  }
LABEL_1042:
                                  v592 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)v1005, v1005, v591);
                                  _DWORD *v592 = v1005[0];
                                  if (v1062 >= (unint64_t)HIDWORD(v1062)) {
                                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                                  }
                                  *((_DWORD *)v1061 + v1062) = v1005[0];
                                  LODWORD(v1062) = v1062 + 1;
                                }
LABEL_1044:
                                char v991 = 1;
                                goto LABEL_1045;
                              }
                              v591 = 0;
                              goto LABEL_1042;
                            }
LABEL_1025:
                            if (v522) {
                              goto LABEL_1026;
                            }
LABEL_1045:
                            if (++v555 == (unsigned int *)v1003)
                            {
                              v555 = v1067;
                              uint64_t v157 = a1;
                              goto LABEL_1080;
                            }
                          }
                        }
                        char v991 = 0;
LABEL_1080:
                        if (v555 != (unsigned int *)v1069) {
                          free(v555);
                        }
                        uint64_t v330 = (uint64_t)v980;
LABEL_1083:
                        if ((v1064 & 1) == 0) {
                          MEMORY[0x1D25D9CD0](v1065, 4);
                        }
                        if ((v991 & 1) == 0)
                        {
                          if (v1070 != (char *)v1072) {
                            free(v1070);
                          }
LABEL_1088:
                          uint64_t v1064 = 1;
                          uint64_t v1065 = -1;
                          uint64_t v1066 = -1;
                          v1067 = (unsigned int *)v1069;
                          uint64_t v1068 = 0x400000000;
                          uint64_t v605 = *((unsigned __int8 *)v975 + 4);
                          uint64_t v606 = v975[1];
                          unsigned int v607 = v605 + 1;
                          if ((int)v605 + 1 >= v606) {
                            goto LABEL_1132;
                          }
                          uint64_t v608 = v605 + 1;
                          while (2)
                          {
                            if (sub_1CBC2D2EC(v330, v605, (void *)(*(void *)(v157 + 248) + 8)) != 1) {
                              goto LABEL_1126;
                            }
                            v609 = (_DWORD *)(*(void *)(v330 + 32) + 32 * v605);
                            int v610 = v609[1];
                            if (v1058)
                            {
                              int v611 = 4;
                              v612 = &v1059;
                              goto LABEL_1093;
                            }
                            int v611 = v1060;
                            if (v1060)
                            {
                              v612 = (uint64_t *)v1059;
LABEL_1093:
                              int v613 = v611 - 1;
                              unsigned int v614 = v613 & (37 * v610);
                              int v615 = *((_DWORD *)v612 + v614);
                              if (v610 != v615)
                              {
                                int v616 = 1;
                                while (v615 != -1)
                                {
                                  unsigned int v617 = v614 + v616++;
                                  unsigned int v614 = v617 & v613;
                                  int v615 = *((_DWORD *)v612 + v614);
                                  if (v610 == v615) {
                                    goto LABEL_1126;
                                  }
                                }
                                break;
                              }
LABEL_1126:
                              ++v605;
                              if (++v608 != v606) {
                                continue;
                              }
                              uint64_t v605 = *((unsigned __int8 *)v975 + 4);
                              LODWORD(v606) = v975[1];
                              unsigned int v607 = v605 + 1;
LABEL_1132:
                              if (v607 >= v606)
                              {
                                int v390 = 0;
LABEL_1178:
                                if (v1067 != (unsigned int *)v1069) {
                                  free(v1067);
                                }
                                if ((v1064 & 1) == 0) {
                                  MEMORY[0x1D25D9CD0](v1065, 4);
                                }
                                if (v1061 != v1063) {
                                  free(v1061);
                                }
                                if ((v1058 & 1) == 0) {
                                  MEMORY[0x1D25D9CD0](v1059, 4);
                                }
                                goto LABEL_1186;
                              }
                              int v390 = 0;
                              uint64_t v637 = v605 + 1;
                              while (2)
                              {
                                if (sub_1CBC2D2EC(v330, v605, (void *)(*(void *)(v157 + 248) + 8)) != 1) {
                                  goto LABEL_1170;
                                }
                                uint64_t v638 = *(void *)(v330 + 32);
                                int v639 = *(_DWORD *)(v638 + 32 * v605 + 4);
                                if (v1058)
                                {
                                  int v640 = 4;
                                  v641 = &v1059;
                                  goto LABEL_1137;
                                }
                                int v640 = v1060;
                                if (v1060)
                                {
                                  v641 = (uint64_t *)v1059;
LABEL_1137:
                                  int v642 = v640 - 1;
                                  unsigned int v643 = v642 & (37 * v639);
                                  int v644 = *((_DWORD *)v641 + v643);
                                  if (v639 != v644)
                                  {
                                    int v645 = 1;
                                    while (v644 != -1)
                                    {
                                      unsigned int v646 = v643 + v645++;
                                      unsigned int v643 = v646 & v642;
                                      int v644 = *((_DWORD *)v641 + v643);
                                      if (v639 == v644) {
                                        goto LABEL_1169;
                                      }
                                    }
                                    break;
                                  }
LABEL_1169:
                                  uint64_t v330 = (uint64_t)v980;
LABEL_1170:
                                  ++v637;
                                  ++v605;
                                  if (v637 == v606) {
                                    goto LABEL_1178;
                                  }
                                  continue;
                                }
                                break;
                              }
                              if (llvm::MachineInstr::getNumExplicitOperands((uint64_t)v980) <= v605)
                              {
                                unsigned int v648 = -1;
                              }
                              else
                              {
                                v647 = (unsigned __int16 *)*((void *)v980 + 2);
                                if ((word_1CDF77000[dword_1CDF6DEF0[*v647] + (unsigned __int16)v605] & 0xFFFB) == 0x3A)
                                {
                                  unsigned int v648 = v605 + 2;
                                }
                                else if ((*(_DWORD *)(v638 + 32 * v605) & 0x10000FF) == 0x1000000)
                                {
                                  unsigned int v649 = *((unsigned __int8 *)v647 + 4);
                                  if ((v647[4] & 2) != 0)
                                  {
                                    int v659 = *((_DWORD *)v980 + 10);
                                    if (v659 == v649)
                                    {
                                      unsigned int v650 = v649;
                                    }
                                    else
                                    {
                                      int v660 = v659 - 1;
                                      unsigned int v650 = v649;
                                      do
                                      {
                                        int v661 = *(_DWORD *)(v638 + 32 * v649);
                                        if ((v661 & 0x10000FF) != 0x1000000) {
                                          break;
                                        }
                                        v650 += (v661 & 0x2000000) == 0;
                                        if (v660 == v649) {
                                          break;
                                        }
                                        ++v649;
                                      }
                                      while ((v661 & 0x2000000) == 0);
                                    }
                                  }
                                  else
                                  {
                                    unsigned int v650 = *((unsigned __int8 *)v647 + 4);
                                  }
                                  unsigned int v648 = v650 + v605;
                                }
                                else if (!*(_DWORD *)(v638 + 32 * v605) {
                                       || *(_DWORD *)(v638 + 32 * v605) == 7)
                                }
                                {
                                  unsigned int v648 = v605 + 1;
                                }
                                else
                                {
                                  unsigned int v648 = -1;
                                }
                              }
                              if (v1064)
                              {
                                int v651 = 4;
                                v652 = &v1065;
                                goto LABEL_1154;
                              }
                              int v651 = v1066;
                              if (v1066)
                              {
                                v652 = (uint64_t *)v1065;
LABEL_1154:
                                int v653 = v651 - 1;
                                unsigned int v654 = v653 & (37 * v639);
                                int v655 = *((_DWORD *)v652 + v654);
                                if (v639 != v655)
                                {
                                  int v656 = 1;
                                  while (v655 != -1)
                                  {
                                    unsigned int v657 = v654 + v656++;
                                    unsigned int v654 = v657 & v653;
                                    int v655 = *((_DWORD *)v652 + v654);
                                    if (v639 == v655) {
                                      goto LABEL_1158;
                                    }
                                  }
                                  goto LABEL_1167;
                                }
LABEL_1158:
                                *(void *)(v638 + 32 * v648 + 16) |= 0x10uLL;
                                *(_DWORD *)(v638 + 32 * v605) &= ~0x8000000u;
                                int v658 = 1;
                              }
                              else
                              {
LABEL_1167:
                                int v658 = 0;
                              }
                              v390 |= v658;
                              goto LABEL_1169;
                            }
                            break;
                          }
                          if (__src) {
                            v618 = (char *)__src + 8;
                          }
                          else {
                            v618 = 0;
                          }
                          unint64_t v619 = *(unsigned int *)(*v618 + 24 * (unsigned __int16)v609[1] + 16);
                          v620 = (_WORD *)(v618[6] + ((v619 >> 3) & 0x1FFFFFFE));
                          __int16 v622 = *v620;
                          v621 = v620 + 1;
                          unsigned __int16 v623 = v622 + (v619 & 0xF) * v610;
                          while (((*(void *)(v1026 + 8 * (v623 >> 6)) >> v623) & 1) == 0)
                          {
                            int v624 = *v621++;
                            v623 += v624;
                            if (!v624) {
                              goto LABEL_1109;
                            }
                          }
                          if (*(unsigned char *)(v157 + 524) || ((*v609 >> 26) & ~HIBYTE(*v609) & 1) == 0) {
                            goto LABEL_1126;
                          }
LABEL_1109:
                          LODWORD(v1070) = v609[1];
                          if (v1064)
                          {
                            int v625 = 4;
                            v626 = &v1065;
                            goto LABEL_1111;
                          }
                          int v625 = v1066;
                          if (v1066)
                          {
                            v626 = (uint64_t *)v1065;
LABEL_1111:
                            int v627 = v625 - 1;
                            unsigned int v628 = v627 & (37 * v610);
                            v629 = (_DWORD *)v626 + v628;
                            int v630 = *v629;
                            if (v610 == *v629) {
                              goto LABEL_1126;
                            }
                            v631 = 0;
                            int v632 = 1;
                            while (v630 != -1)
                            {
                              if (v631) {
                                BOOL v633 = 0;
                              }
                              else {
                                BOOL v633 = v630 == -2;
                              }
                              if (v633) {
                                v631 = v629;
                              }
                              unsigned int v634 = v628 + v632++;
                              unsigned int v628 = v634 & v627;
                              v629 = (_DWORD *)v626 + v628;
                              int v630 = *v629;
                              if (v610 == *v629) {
                                goto LABEL_1126;
                              }
                            }
                            if (v631) {
                              v635 = v631;
                            }
                            else {
                              v635 = v629;
                            }
                          }
                          else
                          {
                            v635 = 0;
                          }
                          v636 = sub_1CBBEF724((uint64_t)&v1064, (uint64_t)&v1070, &v1070, v635);
                          _DWORD *v636 = v1070;
                          if (v1068 >= (unint64_t)HIDWORD(v1068)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          v1067[v1068] = v1070;
                          LODWORD(v1068) = v1068 + 1;
                          goto LABEL_1126;
                        }
                      }
                    }
                    if ((int)v473 > 163)
                    {
                      if ((v473 - 164) > 0x28
                        || ((1 << (v473 + 92)) & 0x11A3400000FLL) == 0)
                      {
                        goto LABEL_922;
                      }
                    }
                    else if (((v473 - 61) > 0x3D {
                            || ((1 << (v473 - 61)) & 0x300037B3810E000FLL) == 0)
                    }
                           && v473 != 0
                           && v473 != 11)
                    {
                      goto LABEL_922;
                    }
                    v1005[0] = v330;
                    v1005[1] = v434;
                    int v1006 = v472;
                    v1070 = (char *)v1072;
                    uint64_t v1071 = 0x400000000;
                    if (*(_DWORD *)(v330 + 40))
                    {
                      uint64_t v489 = 0;
                      unsigned int v490 = 0;
                      unint64_t v491 = 0;
                      uint64_t v492 = v330;
                      do
                      {
                        if (!*(unsigned char *)(*(void *)(v492 + 32) + v489))
                        {
                          if (v490 >= HIDWORD(v1071)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *(_DWORD *)&v1070[4 * v490] = v491;
                          unsigned int v490 = v1071 + 1;
                          LODWORD(v1071) = v1071 + 1;
                          uint64_t v492 = v1005[0];
                        }
                        ++v491;
                        v489 += 32;
                      }
                      while (v491 < *(unsigned int *)(v492 + 40));
                    }
                    sub_1CBC2EAB8(v1005, (uint64_t)&v1070, 0, 1, 1, &v1064);
                    if (v1070 != (char *)v1072) {
                      free(v1070);
                    }
                    v493 = (uint64_t *)v1064;
                    v494 = (uint64_t *)(v1064 + 8 * v1065);
                    if (!v1065)
                    {
LABEL_919:
                      if (v493 != &v1066) {
                        free(v493);
                      }
                      v470 = *(void **)(*(void *)(v330 + 24) + 32);
                      long long v471 = (unsigned __int8 *)v470[2];
                      goto LABEL_922;
                    }
                    while (1)
                    {
                      v495 = (void *)*v493;
                      v1070 = (char *)*v493;
                      if (v1058)
                      {
                        int v496 = 4;
                        v497 = &v1059;
                      }
                      else
                      {
                        int v496 = v1060;
                        if (!v1060)
                        {
                          v506 = 0;
LABEL_911:
                          v507 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)&v1070, &v1070, v506);
                          _DWORD *v507 = v1070;
                          if (v1062 >= (unint64_t)HIDWORD(v1062)) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          *((_DWORD *)v1061 + v1062) = v1070;
                          LODWORD(v1062) = v1062 + 1;
                          goto LABEL_913;
                        }
                        v497 = (uint64_t *)v1059;
                      }
                      int v498 = v496 - 1;
                      unsigned int v499 = v498 & (37 * v495);
                      v500 = (_DWORD *)v497 + v499;
                      int v501 = *v500;
                      if (*v500 != v495)
                      {
                        v502 = 0;
                        int v503 = 1;
                        while (v501 != -1)
                        {
                          if (v502) {
                            BOOL v504 = 0;
                          }
                          else {
                            BOOL v504 = v501 == -2;
                          }
                          if (v504) {
                            v502 = v500;
                          }
                          unsigned int v505 = v499 + v503++;
                          unsigned int v499 = v505 & v498;
                          v500 = (_DWORD *)v497 + v499;
                          int v501 = *v500;
                          if (*v500 == v495) {
                            goto LABEL_913;
                          }
                        }
                        if (v502) {
                          v506 = v502;
                        }
                        else {
                          v506 = v500;
                        }
                        goto LABEL_911;
                      }
LABEL_913:
                      if (++v493 == v494)
                      {
                        v493 = (uint64_t *)v1064;
                        goto LABEL_919;
                      }
                    }
                  }
                  v484 = 0;
                  int v485 = 1;
                  while (v483 != -1)
                  {
                    if (v484) {
                      BOOL v486 = 0;
                    }
                    else {
                      BOOL v486 = v483 == -2;
                    }
                    if (v486) {
                      v484 = v482;
                    }
                    unsigned int v487 = v481 + v485++;
                    unsigned int v481 = v487 & v480;
                    v482 = (_DWORD *)v479 + v481;
                    int v483 = *v482;
                    if (v469 == *v482) {
                      goto LABEL_1226;
                    }
                  }
                  if (v484) {
                    v677 = v484;
                  }
                  else {
                    v677 = v482;
                  }
LABEL_1224:
                  v678 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)&v1064, &v1064, v677);
                  _DWORD *v678 = v1064;
                  if (v1062 >= (unint64_t)HIDWORD(v1062)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_DWORD *)v1061 + v1062) = v1064;
                  char v477 = v1058;
                  LODWORD(v1062) = v1062 + 1;
                  goto LABEL_1226;
                }
                int v458 = (uint64_t *)v1059;
              }
              int v459 = v457 - 1;
              unsigned int v460 = v459 & (37 * v442);
              unint64_t v461 = (_DWORD *)v458 + v460;
              int v462 = *v461;
              if (v442 == *v461) {
                goto LABEL_846;
              }
              unint64_t v463 = 0;
              int v464 = 1;
              while (v462 != -1)
              {
                if (v463) {
                  BOOL v465 = 0;
                }
                else {
                  BOOL v465 = v462 == -2;
                }
                if (v465) {
                  unint64_t v463 = v461;
                }
                unsigned int v466 = v460 + v464++;
                unsigned int v460 = v466 & v459;
                unint64_t v461 = (_DWORD *)v458 + v460;
                int v462 = *v461;
                if (v442 == *v461) {
                  goto LABEL_846;
                }
              }
              if (v463) {
                v467 = v463;
              }
              else {
                v467 = v461;
              }
              goto LABEL_844;
            }
            int v423 = (uint64_t *)v1059;
          }
          int v424 = v422 - 1;
          unsigned int v425 = v424 & (37 * v421);
          v426 = (_DWORD *)v423 + v425;
          int v427 = *v426;
          if (v421 == *v426) {
            goto LABEL_797;
          }
          int v428 = 0;
          int v429 = 1;
          while (v427 != -1)
          {
            if (v428) {
              BOOL v430 = 0;
            }
            else {
              BOOL v430 = v427 == -2;
            }
            if (v430) {
              int v428 = v426;
            }
            unsigned int v431 = v425 + v429++;
            unsigned int v425 = v431 & v424;
            v426 = (_DWORD *)v423 + v425;
            int v427 = *v426;
            if (v421 == *v426) {
              goto LABEL_797;
            }
          }
          if (v428) {
            int v432 = v428;
          }
          else {
            int v432 = v426;
          }
          goto LABEL_795;
        }
LABEL_749:
        if (sub_1CBC2D2EC((uint64_t)v980, v399, (void *)(*(void *)(v157 + 248) + 8)) != 1) {
          goto LABEL_767;
        }
        int v402 = *(_DWORD *)(*((void *)v980 + 4) + 32 * v399 + 4);
        LODWORD(v1064) = v402;
        if (v1058)
        {
          int v403 = 4;
          char v404 = &v1059;
        }
        else
        {
          int v403 = v1060;
          if (!v1060)
          {
            int v413 = 0;
            goto LABEL_765;
          }
          char v404 = (uint64_t *)v1059;
        }
        int v405 = v403 - 1;
        unsigned int v406 = v405 & (37 * v402);
        uint64_t v407 = (_DWORD *)v404 + v406;
        int v408 = *v407;
        if (v402 == *v407) {
          goto LABEL_767;
        }
        uint64_t v409 = 0;
        int v410 = 1;
        while (v408 != -1)
        {
          if (v409) {
            BOOL v411 = 0;
          }
          else {
            BOOL v411 = v408 == -2;
          }
          if (v411) {
            uint64_t v409 = v407;
          }
          unsigned int v412 = v406 + v410++;
          unsigned int v406 = v412 & v405;
          uint64_t v407 = (_DWORD *)v404 + v406;
          int v408 = *v407;
          if (v402 == *v407) {
            goto LABEL_767;
          }
        }
        if (v409) {
          int v413 = v409;
        }
        else {
          int v413 = v407;
        }
LABEL_765:
        unint64_t v414 = sub_1CBBEF724((uint64_t)&v1058, (uint64_t)&v1064, &v1064, v413);
        *unint64_t v414 = v1064;
        if (v1062 >= (unint64_t)HIDWORD(v1062)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v1061 + v1062) = v1064;
        LODWORD(v1062) = v1062 + 1;
        goto LABEL_767;
      }
    }
    else if ((v391 & 0x80) == 0)
    {
      goto LABEL_734;
    }
LABEL_728:
    int v390 = 0;
LABEL_1186:
    unsigned int v662 = v1057;
    if (v1030 < v1057)
    {
      uint64_t v663 = DWORD2(v1026);
      if ((v1030 & 0x3F) != 0) {
        *(void *)(v1026 + 8 * DWORD2(v1026) - 8) &= ~(-1 << (v1030 & 0x3F));
      }
      unsigned int v664 = v663;
      unsigned int v1030 = v662;
      unsigned int v665 = v662 + 63;
      if (v663 != (v662 + 63) >> 6)
      {
        uint64_t v666 = v665 >> 6;
        if (v663 > v666)
        {
          DWORD2(v1026) = v665 >> 6;
          unsigned int v664 = v665 >> 6;
        }
        else
        {
          if (v666 > HIDWORD(v1026)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v666 != v663) {
            bzero((void *)(v1026 + 8 * v663), 8 * (v666 - v663));
          }
          unsigned int v664 = v666;
          DWORD2(v1026) = v666;
          LOBYTE(v662) = v1030;
        }
      }
      int v667 = v662 & 0x3F;
      if (v667) {
        *(void *)(v1026 + 8 * v664 - 8) &= ~(-1 << v667);
      }
    }
    uint64_t v668 = v1054;
    if (v1054)
    {
      v669 = (uint64_t *)v1053;
      v670 = (void *)v1026;
      do
      {
        uint64_t v671 = *v669++;
        *v670++ |= v671;
        --v668;
      }
      while (v668);
    }
    v672 = *(unsigned __int16 **)(v330 + 16);
    unsigned int v673 = *v672;
    uint64_t v328 = (void *)((char *)v974 + 48);
    if (v673 >= 0x100)
    {
      uint64_t v674 = *((void *)v672 + 1) & 8;
      if (v673 == 316 || v674 == 0)
      {
        (*(void (**)(uint64_t *, uint64_t))(*v973 + 48))(v973, v330);
        (*(void (**)(uint64_t *, uint64_t))(*v972 + 48))(v972, v330);
      }
    }
    int v676 = *(_DWORD *)(v157 + 520);
    if (v676) {
      *(_DWORD *)(v157 + 520) = v676 - 1;
    }
    if (v1047 != v1049) {
      free(v1047);
    }
    if (v1053 != v1055) {
      free(v1053);
    }
    int v331 = v977 | v390;
    goto LABEL_1214;
  }
  char v970 = 0;
LABEL_1287:
  uint64_t v691 = *v968;
  v692 = (void *)(*v968 + 320);
  if ((void *)*v692 != v692)
  {
    uint64_t v1048 = 0;
    v1047 = 0;
    v1046 = &v1047;
    uint64_t v693 = *(void *)(v691 + 328);
    if ((void *)v693 != v692)
    {
      for (m = 0; ; m = (void **)v1047)
      {
        unsigned int v695 = *(_DWORD *)(v693 + 24);
        v696 = &v1047;
        v697 = &v1047;
        if (m)
        {
          do
          {
            while (1)
            {
              v697 = m;
              unsigned int v698 = *((_DWORD *)m + 8);
              if (v695 >= v698) {
                break;
              }
              m = (void **)*v697;
              v696 = v697;
              if (!*v697) {
                goto LABEL_1296;
              }
            }
            if (v698 >= v695) {
              goto LABEL_1299;
            }
            m = (void **)v697[1];
          }
          while (m);
          v696 = v697 + 1;
        }
LABEL_1296:
        v699 = operator new(0x30uLL);
        v699[8] = v695;
        *((void *)v699 + 5) = v693;
        *(void *)v699 = 0;
        *((void *)v699 + 1) = 0;
        *((void *)v699 + 2) = v697;
        *v696 = v699;
        if (*(void *)v1046)
        {
          v1046 = *(void **)v1046;
          v699 = *v696;
        }
        sub_1CB8358B8((uint64_t *)v1047, (uint64_t *)v699);
        ++v1048;
LABEL_1299:
        uint64_t v693 = *(void *)(v693 + 8);
        if ((void *)v693 == v692) {
          break;
        }
      }
      uint64_t v691 = *v968;
    }
    uint64_t v700 = *(void *)(v691 + 48);
    if (!v700)
    {
      uint64_t v700 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v691 + 8) + 216))(*(void *)(v691 + 8), v691 + 128, v691);
      *(void *)(v691 + 48) = v700;
      uint64_t v691 = *v968;
    }
    uint64_t v701 = *(void *)(v700 + 552);
    if ((v701 & 0xFF00000000) != 0) {
      int v702 = v701 + 1;
    }
    else {
      int v702 = 4080;
    }
    unint64_t v703 = ((*(void *)(v691 + 112) - *(void *)(v691 + 104)) >> 3);
    int v1000 = v702;
    unsigned int v704 = v702 + 63;
    __src = (char *)&v1026 + 8;
    DWORD1(v1026) = 6;
    uint64_t v1004 = (v702 + 63) >> 6;
    uint64_t v988 = 8 * v1004;
    if ((v702 + 63) >= 0x1C0)
    {
      LODWORD(v1026) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v704 >= 0x40) {
      bzero((char *)&v1026 + 8, v988);
    }
    LODWORD(v1026) = v1004;
    DWORD2(v1029) = v1000;
    sub_1CBAF12DC(&v1064, v703, (uint64_t)&__src);
    if (__src != (char *)&v1026 + 8) {
      free(__src);
    }
    uint64_t v705 = v1048;
    if (v1048)
    {
      unsigned int v992 = v704;
      while (1)
      {
        v706 = (void **)v1047;
        v707 = &v1047;
        if (v1047) {
          break;
        }
        do
        {
          v711 = v707;
          v707 = (void **)v707[2];
        }
        while (*v707 == v711);
        v712 = (void **)v707[1];
        uint64_t v708 = (uint64_t)v707[5];
        if (!v712) {
          goto LABEL_1318;
        }
        do
        {
          v709 = v712;
          v712 = (void **)*v712;
        }
        while (v712);
LABEL_1324:
        if (v1046 == v707) {
          v1046 = v709;
        }
        uint64_t v1048 = v705 - 1;
        sub_1CB91F7C8((uint64_t *)v1047, (uint64_t *)v707);
        operator delete(v707);
        v1052 = &v1054;
        HIDWORD(v1053) = 6;
        if (v704 >= 0x1C0)
        {
          LODWORD(v1053) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v704 >= 0x40) {
          bzero(&v1054, v988);
        }
        LODWORD(v1053) = v1004;
        unsigned int v713 = v1000;
        unsigned int v1056 = v1000;
        uint64_t v714 = *(void *)(v708 + 88);
        uint64_t v715 = *(void *)(v708 + 96);
        unsigned int v716 = v1004;
        while (v714 != v715)
        {
          uint64_t v717 = v1064 + 72 * *(int *)(*(void *)v714 + 24);
          unsigned int v718 = *(_DWORD *)(v717 + 64);
          if (v713 < v718)
          {
            int v723 = v713 & 0x3F;
            if (v723) {
              *((void *)v1052 + v716 - 1) &= ~(-1 << v723);
            }
            unsigned int v1056 = v718;
            unsigned int v724 = v718 + 63;
            if (v716 != (v718 + 63) >> 6)
            {
              uint64_t v725 = v724 >> 6;
              if (v716 > v725)
              {
                LODWORD(v1053) = v724 >> 6;
                unsigned int v716 = v724 >> 6;
              }
              else
              {
                if (v725 > HIDWORD(v1053)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v725 != v716) {
                  bzero((char *)v1052 + 8 * v716, 8 * (v725 - v716));
                }
                unsigned int v716 = v725;
                LODWORD(v1053) = v725;
                unsigned int v718 = v1056;
              }
            }
            if ((v718 & 0x3F) != 0) {
              *((void *)v1052 + v716 - 1) &= ~(-1 << (v718 & 0x3F));
            }
            unsigned int v713 = v718;
          }
          uint64_t v719 = *(unsigned int *)(v717 + 8);
          if (v719)
          {
            v720 = *(uint64_t **)v717;
            v721 = v1052;
            do
            {
              uint64_t v722 = *v720++;
              *v721++ |= v722;
              --v719;
            }
            while (v719);
          }
          v714 += 8;
        }
        __src = (char *)&v1026 + 8;
        *(void *)&long long v1026 = 0x400000000;
        sub_1CBBEF4F4(*(void *)(a1 + 296), *(_DWORD *)(a1 + 312), v708, (uint64_t)&__src);
        v726 = (char *)__src;
        if (v1026)
        {
          v727 = (char *)__src + 8 * v1026;
          unsigned int v728 = v1056;
          do
          {
            uint64_t v729 = v1064 + 72 * *(int *)(*(void *)v726 + 24);
            unsigned int v730 = *(_DWORD *)(v729 + 64);
            if (v728 < v730)
            {
              int v735 = v728 & 0x3F;
              uint64_t v736 = v1053;
              if (v735) {
                *((void *)v1052 + v1053 - 1) &= ~(-1 << v735);
              }
              unsigned int v737 = v736;
              unsigned int v1056 = v730;
              unsigned int v738 = v730 + 63;
              if (v736 != (v730 + 63) >> 6)
              {
                uint64_t v739 = v738 >> 6;
                if (v736 > v739)
                {
                  LODWORD(v1053) = v738 >> 6;
                  unsigned int v737 = v738 >> 6;
                }
                else
                {
                  if (v739 > HIDWORD(v1053)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v739 != v736) {
                    bzero((char *)v1052 + 8 * v736, 8 * (v739 - v736));
                  }
                  unsigned int v737 = v739;
                  LODWORD(v1053) = v739;
                  unsigned int v730 = v1056;
                }
              }
              if ((v730 & 0x3F) != 0) {
                *((void *)v1052 + v737 - 1) &= ~(-1 << (v730 & 0x3F));
              }
              unsigned int v728 = v730;
            }
            uint64_t v731 = *(unsigned int *)(v729 + 8);
            if (v731)
            {
              v732 = *(uint64_t **)v729;
              v733 = v1052;
              do
              {
                uint64_t v734 = *v732++;
                *v733++ |= v734;
                --v731;
              }
              while (v731);
            }
            v726 += 8;
          }
          while (v726 != v727);
          v726 = (char *)__src;
        }
        if (v726 != (char *)&v1026 + 8) {
          free(v726);
        }
        int v740 = *(_DWORD *)(v708 + 24);
        uint64_t v741 = v1064;
        uint64_t v742 = v1064 + 72 * v740;
        __src = (char *)&v1026 + 8;
        *(void *)&long long v1026 = 0x600000000;
        unint64_t v743 = *(unsigned int *)(v742 + 8);
        if (&__src != (void **)v742 && v743 != 0)
        {
          if (v743 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy((char *)&v1026 + 8, *(const void **)v742, 8 * *(unsigned int *)(v742 + 8));
          LODWORD(v1026) = v743;
        }
        uint64_t v745 = v741 + 72 * v740;
        int v747 = *(_DWORD *)(v745 + 64);
        v746 = (unsigned int *)(v745 + 64);
        DWORD2(v1029) = v747;
        v748 = sub_1CBBEF610(*(void *)(a1 + 256), *(_DWORD *)(a1 + 272), v708);
        if ((void **)v742 != &v1052)
        {
          int v749 = (int)v1053;
          uint64_t v750 = *(unsigned int *)(v742 + 8);
          if (v750 >= v1053)
          {
            if (v1053) {
              memmove(*(void **)v742, v1052, 8 * v1053);
            }
          }
          else
          {
            if (*(_DWORD *)(v742 + 12) < v1053)
            {
              *(_DWORD *)(v742 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v750) {
              memmove(*(void **)v742, v1052, 8 * v750);
            }
            else {
              uint64_t v750 = 0;
            }
            if (v750 != v1053) {
              memcpy((void *)(*(void *)v742 + 8 * v750), (char *)v1052 + 8 * v750, 8 * v1053 - 8 * v750);
            }
          }
          *(_DWORD *)(v742 + 8) = v749;
        }
        v751 = v748 + 1;
        unsigned int *v746 = v1056;
        if (!*((unsigned char *)v748 + 248)) {
          (*(void (**)(uint64_t *))(*v751 + 40))(v748 + 1);
        }
        LODWORD(v752) = *(_DWORD *)(v742 + 8);
        unsigned int v753 = *((_DWORD *)v748 + 46);
        if (v753 >= v752) {
          uint64_t v752 = v752;
        }
        else {
          uint64_t v752 = v753;
        }
        if (v752)
        {
          v754 = (uint64_t *)v748[22];
          v755 = *(void **)v742;
          do
          {
            uint64_t v756 = *v754++;
            *v755++ &= ~v756;
            --v752;
          }
          while (v752);
        }
        if (!*((unsigned char *)v748 + 328)) {
          (*(void (**)(uint64_t *))(*v751 + 40))(v748 + 1);
        }
        unsigned int v757 = *v746;
        unsigned int v758 = *((_DWORD *)v748 + 80);
        if (*v746 < v758)
        {
          int v792 = *v746 & 0x3F;
          uint64_t v793 = *(unsigned int *)(v742 + 8);
          if (v792) {
            *(void *)(*(void *)v742 + 8 * v793 - 8) &= ~(-1 << v792);
          }
          unsigned int v794 = v793;
          unsigned int *v746 = v758;
          unsigned int v795 = v758 + 63;
          if (v793 != (v758 + 63) >> 6)
          {
            uint64_t v796 = v795 >> 6;
            if (v793 > v796)
            {
              *(_DWORD *)(v742 + 8) = v796;
              unsigned int v794 = v795 >> 6;
            }
            else
            {
              if (v796 > *(_DWORD *)(v742 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v796 != v793) {
                bzero((void *)(*(void *)v742 + 8 * v793), 8 * (v796 - v793));
              }
              unsigned int v794 = v796;
              *(_DWORD *)(v742 + 8) = v796;
              unsigned int v758 = *v746;
            }
          }
          if ((v758 & 0x3F) != 0) {
            *(void *)(*(void *)v742 + 8 * v794 - 8) &= ~(-1 << (v758 & 0x3F));
          }
          unsigned int v757 = v758;
        }
        uint64_t v759 = *((unsigned int *)v748 + 66);
        if (v759)
        {
          v760 = (uint64_t *)v748[32];
          v761 = *(void **)v742;
          do
          {
            uint64_t v762 = *v760++;
            *v761++ |= v762;
            --v759;
          }
          while (v759);
        }
        v763 = (char *)__src;
        uint64_t v157 = a1;
        BOOL v764 = DWORD2(v1029) != v757 || memcmp(__src, *(const void **)v742, 8 * v1026) != 0;
        if (v763 != (char *)&v1026 + 8) {
          free(v763);
        }
        if (v764)
        {
          v765 = *(uint64_t **)(v708 + 64);
          v766 = *(uint64_t **)(v708 + 72);
          while (v765 != v766)
          {
            uint64_t v767 = *v765;
            unsigned int v768 = *(_DWORD *)(*v765 + 24);
            v769 = (uint64_t *)operator new(0x30uLL);
            v770 = v769;
            *((_DWORD *)v769 + 8) = v768;
            v769[5] = v767;
            v771 = (void **)v1047;
            v772 = &v1047;
            v773 = &v1047;
            if (v1047)
            {
              while (1)
              {
                while (1)
                {
                  v773 = v771;
                  unsigned int v774 = *((_DWORD *)v771 + 8);
                  if (v768 >= v774) {
                    break;
                  }
                  v771 = (void **)*v771;
                  v772 = v773;
                  if (!*v773) {
                    goto LABEL_1423;
                  }
                }
                if (v774 >= v768) {
                  break;
                }
                v771 = (void **)v771[1];
                if (!v771)
                {
                  v772 = v773 + 1;
                  goto LABEL_1423;
                }
              }
              operator delete(v769);
            }
            else
            {
LABEL_1423:
              uint64_t *v769 = 0;
              v769[1] = 0;
              v769[2] = (uint64_t)v773;
              *v772 = v769;
              if (*(void *)v1046)
              {
                v1046 = *(void **)v1046;
                v770 = (uint64_t *)*v772;
              }
              sub_1CB8358B8((uint64_t *)v1047, v770);
              ++v1048;
            }
            ++v765;
          }
          __src = (char *)&v1026 + 8;
          *(void *)&long long v1026 = 0x400000000;
          uint64_t v775 = *(void *)(a1 + 320);
          unsigned int v776 = *(_DWORD *)(a1 + 336);
          v777 = sub_1CBBEF5AC(v775, v776, v708);
          if ((uint64_t *)(v775 + 40 * v776) != v777)
          {
            uint64_t v778 = *((unsigned int *)v777 + 4);
            if (v778)
            {
              unsigned int v779 = 0;
              v780 = (void *)v777[1];
              uint64_t v781 = 8 * v778;
              do
              {
                if (v779 >= DWORD1(v1026)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)__src + v779) = *v780;
                unsigned int v779 = v1026 + 1;
                LODWORD(v1026) = v1026 + 1;
                ++v780;
                v781 -= 8;
              }
              while (v781);
              v782 = (char *)__src;
              if (v779)
              {
                v783 = (char *)__src + 8 * v779;
                do
                {
                  uint64_t v784 = *(void *)v782;
                  unsigned int v785 = *(_DWORD *)(*(void *)v782 + 24);
                  v786 = (uint64_t *)operator new(0x30uLL);
                  v787 = v786;
                  *((_DWORD *)v786 + 8) = v785;
                  v786[5] = v784;
                  v788 = (void **)v1047;
                  v789 = &v1047;
                  v790 = &v1047;
                  if (v1047)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v790 = v788;
                        unsigned int v791 = *((_DWORD *)v788 + 8);
                        if (v791 <= v785) {
                          break;
                        }
                        v788 = (void **)*v788;
                        v789 = v790;
                        if (!*v790) {
                          goto LABEL_1445;
                        }
                      }
                      if (v791 >= v785) {
                        break;
                      }
                      v788 = (void **)v788[1];
                      if (!v788)
                      {
                        v789 = v790 + 1;
                        goto LABEL_1445;
                      }
                    }
                    operator delete(v786);
                  }
                  else
                  {
LABEL_1445:
                    uint64_t *v786 = 0;
                    v786[1] = 0;
                    v786[2] = (uint64_t)v790;
                    *v789 = v786;
                    if (*(void *)v1046)
                    {
                      v1046 = *(void **)v1046;
                      v787 = (uint64_t *)*v789;
                    }
                    sub_1CB8358B8((uint64_t *)v1047, v787);
                    ++v1048;
                  }
                  v782 += 8;
                }
                while (v782 != v783);
                v782 = (char *)__src;
              }
              if (v782 != (char *)&v1026 + 8) {
                free(v782);
              }
            }
          }
        }
        if (v1052 != &v1054) {
          free(v1052);
        }
        uint64_t v705 = v1048;
        unsigned int v704 = v992;
        if (!v1048) {
          goto LABEL_1467;
        }
      }
      do
      {
        v707 = v706;
        v706 = (void **)v706[1];
      }
      while (v706);
      uint64_t v708 = (uint64_t)v707[5];
LABEL_1318:
      v709 = v707;
      do
      {
        v710 = v709;
        v709 = (void **)v709[2];
      }
      while (*v709 != v710);
      goto LABEL_1324;
    }
LABEL_1467:
    uint64_t v797 = *v968 + 320;
    for (n = *(void *)(*v968 + 328); n != v797; uint64_t v157 = a1)
    {
      v799 = sub_1CBBEF610(*(void *)(v157 + 256), *(_DWORD *)(v157 + 272), n);
      if (*((unsigned char *)v799 + 88)) {
        goto LABEL_1761;
      }
      v800 = v799;
      uint64_t v801 = v1064;
      int v802 = *(_DWORD *)(n + 24);
      uint64_t v803 = v1064 + 72 * v802;
      v799[2] = (uint64_t)(v799 + 4);
      v799[3] = 0x600000000;
      unint64_t v804 = *(unsigned int *)(v803 + 8);
      if (v799 + 2 != (uint64_t *)v803 && v804 != 0)
      {
        if (v804 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v799 + 4, *(const void **)v803, 8 * *(unsigned int *)(v803 + 8));
        *((_DWORD *)v800 + 6) = v804;
      }
      *((_DWORD *)v800 + 20) = *(_DWORD *)(v801 + 72 * v802 + 64);
      *((unsigned char *)v800 + 88) = 1;
      uint64_t n = *(void *)(n + 8);
    }
    __src = &v1064;
    sub_1CB837E88((void ***)&__src);
    sub_1CD3C5048((uint64_t)&v1046, v1047);
  }
  v806 = *(void **)v967;
  v807 = (void *)(*(void *)v967 + 320);
  if ((void *)*v807 != v807)
  {
    uint64_t v1048 = 0;
    v1047 = 0;
    v1046 = &v1047;
    uint64_t v808 = v806[41];
    if ((void *)v808 != v807)
    {
      for (iuint64_t i = 0; ; iuint64_t i = (void **)v1047)
      {
        unsigned int v810 = *(_DWORD *)(v808 + 24);
        v811 = &v1047;
        v812 = &v1047;
        if (ii)
        {
          do
          {
            while (1)
            {
              v812 = ii;
              unsigned int v813 = *((_DWORD *)ii + 8);
              if (v810 >= v813) {
                break;
              }
              iuint64_t i = (void **)*v812;
              v811 = v812;
              if (!*v812) {
                goto LABEL_1487;
              }
            }
            if (v813 >= v810) {
              goto LABEL_1490;
            }
            iuint64_t i = (void **)v812[1];
          }
          while (ii);
          v811 = v812 + 1;
        }
LABEL_1487:
        v814 = operator new(0x30uLL);
        v814[8] = v810;
        *((void *)v814 + 5) = v808;
        *(void *)v814 = 0;
        *((void *)v814 + 1) = 0;
        *((void *)v814 + 2) = v812;
        *v811 = v814;
        if (*(void *)v1046)
        {
          v1046 = *(void **)v1046;
          v814 = *v811;
        }
        sub_1CB8358B8((uint64_t *)v1047, (uint64_t *)v814);
        ++v1048;
LABEL_1490:
        uint64_t v808 = *(void *)(v808 + 8);
        if ((void *)v808 == v807) {
          break;
        }
      }
      v806 = *(void **)v967;
    }
    unint64_t v815 = ((v806[14] - v806[13]) >> 3);
    v1001 = (llvm::MachineMemOperand *)(*(void *)(v806[7] + 48) >> 1);
    uint64_t v816 = (v1001 + 63) >> 6;
    __src = (char *)&v1026 + 8;
    DWORD1(v1026) = 6;
    uint64_t v993 = 8 * v816;
    if (v816 >= 7)
    {
      LODWORD(v1026) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if ((v1001 + 63) >> 6) {
      bzero((char *)&v1026 + 8, v993);
    }
    LODWORD(v1026) = (v1001 + 63) >> 6;
    DWORD2(v1029) = v1001;
    sub_1CBAF12DC(&v1064, v815, (uint64_t)&__src);
    if (__src != (char *)&v1026 + 8) {
      free(__src);
    }
    uint64_t v817 = v1048;
    while (v1048)
    {
      v818 = (void **)v1047;
      v819 = &v1047;
      if (v1047)
      {
        do
        {
          v819 = v818;
          v818 = (void **)v818[1];
        }
        while (v818);
        uint64_t v820 = (uint64_t)v819[5];
      }
      else
      {
        do
        {
          v823 = v819;
          v819 = (void **)v819[2];
        }
        while (*v819 == v823);
        v824 = (void **)v819[1];
        uint64_t v820 = (uint64_t)v819[5];
        if (v824)
        {
          do
          {
            v821 = v824;
            v824 = (void **)*v824;
          }
          while (v824);
          goto LABEL_1509;
        }
      }
      v821 = v819;
      do
      {
        v822 = v821;
        v821 = (void **)v821[2];
      }
      while (*v821 != v822);
LABEL_1509:
      if (v1046 == v819) {
        v1046 = v821;
      }
      uint64_t v1048 = v817 - 1;
      sub_1CB91F7C8((uint64_t *)v1047, (uint64_t *)v819);
      operator delete(v819);
      v1052 = &v1054;
      HIDWORD(v1053) = 6;
      if ((v1001 + 63) >> 6) {
        bzero(&v1054, v993);
      }
      LODWORD(v1053) = (v1001 + 63) >> 6;
      unsigned int v1056 = v1001;
      uint64_t v825 = *(void *)(v820 + 88);
      uint64_t v826 = *(void *)(v820 + 96);
      unsigned int v827 = v1053;
      unsigned int v828 = v1001;
      while (v825 != v826)
      {
        uint64_t v829 = v1064 + 72 * *(int *)(*(void *)v825 + 24);
        unsigned int v830 = *(_DWORD *)(v829 + 64);
        if (v828 < v830)
        {
          int v835 = v828 & 0x3F;
          if (v835) {
            *((void *)v1052 + v827 - 1) &= ~(-1 << v835);
          }
          unsigned int v1056 = v830;
          unsigned int v836 = v830 + 63;
          if (v827 != (v830 + 63) >> 6)
          {
            uint64_t v837 = v836 >> 6;
            if (v827 > v837)
            {
              LODWORD(v1053) = v836 >> 6;
              unsigned int v827 = v836 >> 6;
            }
            else
            {
              if (v837 > HIDWORD(v1053)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v837 != v827) {
                bzero((char *)v1052 + 8 * v827, 8 * (v837 - v827));
              }
              unsigned int v827 = v837;
              LODWORD(v1053) = v837;
              unsigned int v830 = v1056;
            }
          }
          if ((v830 & 0x3F) != 0) {
            *((void *)v1052 + v827 - 1) &= ~(-1 << (v830 & 0x3F));
          }
          unsigned int v828 = v830;
        }
        uint64_t v831 = *(unsigned int *)(v829 + 8);
        if (v831)
        {
          v832 = *(uint64_t **)v829;
          v833 = v1052;
          do
          {
            uint64_t v834 = *v832++;
            *v833++ |= v834;
            --v831;
          }
          while (v831);
        }
        v825 += 8;
      }
      int v838 = *(_DWORD *)(v820 + 24);
      uint64_t v839 = v1064;
      uint64_t v840 = v1064 + 72 * v838;
      __src = (char *)&v1026 + 8;
      *(void *)&long long v1026 = 0x600000000;
      unint64_t v841 = *(unsigned int *)(v840 + 8);
      if (&__src != (void **)v840 && v841 != 0)
      {
        if (v841 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((char *)&v1026 + 8, *(const void **)v840, 8 * *(unsigned int *)(v840 + 8));
        LODWORD(v1026) = v841;
      }
      uint64_t v843 = v839 + 72 * v838;
      int v845 = *(_DWORD *)(v843 + 64);
      v844 = (unsigned int *)(v843 + 64);
      DWORD2(v1029) = v845;
      v846 = sub_1CBBEF610(*(void *)(a1 + 344), *(_DWORD *)(a1 + 360), v820);
      if ((void **)v840 != &v1052)
      {
        int v847 = (int)v1053;
        uint64_t v848 = *(unsigned int *)(v840 + 8);
        if (v848 >= v1053)
        {
          if (v1053) {
            memmove(*(void **)v840, v1052, 8 * v1053);
          }
        }
        else
        {
          if (*(_DWORD *)(v840 + 12) < v1053)
          {
            *(_DWORD *)(v840 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v848) {
            memmove(*(void **)v840, v1052, 8 * v848);
          }
          else {
            uint64_t v848 = 0;
          }
          if (v848 != v1053) {
            memcpy((void *)(*(void *)v840 + 8 * v848), (char *)v1052 + 8 * v848, 8 * v1053 - 8 * v848);
          }
        }
        *(_DWORD *)(v840 + 8) = v847;
      }
      v849 = v846 + 1;
      unsigned int *v844 = v1056;
      if (!*((unsigned char *)v846 + 248)) {
        (*(void (**)(uint64_t *))(*v849 + 40))(v846 + 1);
      }
      LODWORD(v850) = *(_DWORD *)(v840 + 8);
      unsigned int v851 = *((_DWORD *)v846 + 46);
      if (v851 >= v850) {
        uint64_t v850 = v850;
      }
      else {
        uint64_t v850 = v851;
      }
      if (v850)
      {
        v852 = (uint64_t *)v846[22];
        v853 = *(void **)v840;
        do
        {
          uint64_t v854 = *v852++;
          *v853++ &= ~v854;
          --v850;
        }
        while (v850);
      }
      if (!*((unsigned char *)v846 + 328)) {
        (*(void (**)(uint64_t *))(*v849 + 40))(v846 + 1);
      }
      unsigned int v855 = *v844;
      unsigned int v856 = *((_DWORD *)v846 + 80);
      if (*v844 < v856)
      {
        int v873 = *v844 & 0x3F;
        uint64_t v874 = *(unsigned int *)(v840 + 8);
        if (v873) {
          *(void *)(*(void *)v840 + 8 * v874 - 8) &= ~(-1 << v873);
        }
        unsigned int v875 = v874;
        unsigned int *v844 = v856;
        unsigned int v876 = v856 + 63;
        if (v874 != (v856 + 63) >> 6)
        {
          uint64_t v877 = v876 >> 6;
          if (v874 > v877)
          {
            *(_DWORD *)(v840 + 8) = v877;
            unsigned int v875 = v876 >> 6;
          }
          else
          {
            if (v877 > *(_DWORD *)(v840 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v877 != v874) {
              bzero((void *)(*(void *)v840 + 8 * v874), 8 * (v877 - v874));
            }
            unsigned int v875 = v877;
            *(_DWORD *)(v840 + 8) = v877;
            unsigned int v856 = *v844;
          }
        }
        if ((v856 & 0x3F) != 0) {
          *(void *)(*(void *)v840 + 8 * v875 - 8) &= ~(-1 << (v856 & 0x3F));
        }
        unsigned int v855 = v856;
      }
      uint64_t v857 = *((unsigned int *)v846 + 66);
      if (v857)
      {
        v858 = (uint64_t *)v846[32];
        v859 = *(void **)v840;
        do
        {
          uint64_t v860 = *v858++;
          *v859++ |= v860;
          --v857;
        }
        while (v857);
      }
      v861 = (char *)__src;
      uint64_t v157 = a1;
      BOOL v862 = DWORD2(v1029) != v855 || memcmp(__src, *(const void **)v840, 8 * v1026) != 0;
      if (v861 != (char *)&v1026 + 8) {
        free(v861);
      }
      if (v862)
      {
        v863 = *(uint64_t **)(v820 + 64);
        v864 = *(uint64_t **)(v820 + 72);
        while (v863 != v864)
        {
          uint64_t v865 = *v863;
          unsigned int v866 = *(_DWORD *)(*v863 + 24);
          v867 = (uint64_t *)operator new(0x30uLL);
          v868 = v867;
          *((_DWORD *)v867 + 8) = v866;
          v867[5] = v865;
          v869 = (void **)v1047;
          v870 = &v1047;
          v871 = &v1047;
          if (v1047)
          {
            while (1)
            {
              while (1)
              {
                v871 = v869;
                unsigned int v872 = *((_DWORD *)v869 + 8);
                if (v866 >= v872) {
                  break;
                }
                v869 = (void **)*v869;
                v870 = v871;
                if (!*v871) {
                  goto LABEL_1583;
                }
              }
              if (v872 >= v866) {
                break;
              }
              v869 = (void **)v869[1];
              if (!v869)
              {
                v870 = v871 + 1;
                goto LABEL_1583;
              }
            }
            operator delete(v867);
          }
          else
          {
LABEL_1583:
            uint64_t *v867 = 0;
            v867[1] = 0;
            v867[2] = (uint64_t)v871;
            *v870 = v867;
            if (*(void *)v1046)
            {
              v1046 = *(void **)v1046;
              v868 = (uint64_t *)*v870;
            }
            sub_1CB8358B8((uint64_t *)v1047, v868);
            ++v1048;
          }
          ++v863;
        }
      }
      if (v1052 != &v1054) {
        free(v1052);
      }
      uint64_t v817 = v1048;
    }
    uint64_t v878 = *(void *)v967 + 320;
    for (jj = *(void *)(*(void *)v967 + 328); jj != v878; uint64_t v157 = a1)
    {
      v880 = sub_1CBBEF610(*(void *)(v157 + 344), *(_DWORD *)(v157 + 360), jj);
      if (*((unsigned char *)v880 + 88)) {
        goto LABEL_1761;
      }
      v881 = v880;
      uint64_t v882 = v1064;
      int v883 = *(_DWORD *)(jj + 24);
      uint64_t v884 = v1064 + 72 * v883;
      v880[2] = (uint64_t)(v880 + 4);
      v880[3] = 0x600000000;
      unint64_t v885 = *(unsigned int *)(v884 + 8);
      if (v880 + 2 != (uint64_t *)v884 && v885 != 0)
      {
        if (v885 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(v880 + 4, *(const void **)v884, 8 * *(unsigned int *)(v884 + 8));
        *((_DWORD *)v881 + 6) = v885;
      }
      *((_DWORD *)v881 + 20) = *(_DWORD *)(v882 + 72 * v883 + 64);
      *((unsigned char *)v881 + 88) = 1;
      juint64_t j = *(void *)(jj + 8);
    }
    __src = &v1064;
    sub_1CB837E88((void ***)&__src);
    sub_1CD3C5048((uint64_t)&v1046, v1047);
  }
  v887 = (void *)a2[41];
  if (v887 != v971)
  {
    do
    {
      v888 = sub_1CBBEF610(*(void *)(v157 + 256), *(_DWORD *)(v157 + 272), (uint64_t)v887);
      uint64_t v889 = v887[4];
      uint64_t v890 = *(void *)(v889 + 48);
      if (!v890)
      {
        uint64_t v890 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(v889 + 8) + 216))(*(void *)(v889 + 8), v889 + 128, v887[4]);
        *(void *)(v889 + 48) = v890;
      }
      uint64_t v891 = *(void *)(v890 + 552);
      if ((v891 & 0xFF00000000) != 0) {
        unsigned int v892 = v891 + 1;
      }
      else {
        unsigned int v892 = 4080;
      }
      uint64_t v893 = (v892 + 63) >> 6;
      v1012 = v1015;
      unsigned int v1014 = 6;
      if (v892 + 63 >= 0x1C0)
      {
        unsigned int v1013 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v892 + 63 >= 0x40) {
        bzero(v1015, 8 * v893);
      }
      unsigned int v1013 = (v892 + 63) >> 6;
      unsigned int v1016 = v892;
      v894 = (uint64_t *)v887[11];
      v895 = (uint64_t *)v887[12];
      while (v894 != v895)
      {
        v896 = sub_1CBBEF610(*(void *)(v157 + 256), *(_DWORD *)(v157 + 272), *v894);
        unsigned int v897 = *((_DWORD *)v896 + 20);
        if (v892 < v897)
        {
          if ((v892 & 0x3F) != 0) {
            *((void *)v1012 + v893 - 1) &= ~(-1 << (v892 & 0x3F));
          }
          unsigned int v1016 = v897;
          unsigned int v902 = v897 + 63;
          if (v893 != (v897 + 63) >> 6)
          {
            uint64_t v903 = v902 >> 6;
            if (v893 > v903)
            {
              unsigned int v1013 = v902 >> 6;
              LODWORD(v893) = v902 >> 6;
            }
            else
            {
              if (v903 > v1014) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v903 != v893) {
                bzero((char *)v1012 + 8 * v893, 8 * (v903 - v893));
              }
              LODWORD(v893) = v903;
              unsigned int v1013 = v903;
              unsigned int v897 = v1016;
            }
          }
          uint64_t v157 = a1;
          if ((v897 & 0x3F) != 0) {
            *((void *)v1012 + v893 - 1) &= ~(-1 << (v897 & 0x3F));
          }
          unsigned int v892 = v897;
        }
        uint64_t v898 = *((unsigned int *)v896 + 6);
        if (v898)
        {
          v899 = (uint64_t *)v896[2];
          v900 = v1012;
          do
          {
            uint64_t v901 = *v899++;
            *v900++ |= v901;
            --v898;
          }
          while (v898);
        }
        ++v894;
      }
      __src = (char *)&v1026 + 8;
      *(void *)&long long v1026 = 0x400000000;
      sub_1CBBEF4F4(*(void *)(v157 + 296), *(_DWORD *)(v157 + 312), (uint64_t)v887, (uint64_t)&__src);
      v904 = (uint64_t *)__src;
      if (v1026)
      {
        v905 = (uint64_t *)((char *)__src + 8 * v1026);
        unsigned int v906 = v1016;
        do
        {
          v907 = sub_1CBBEF610(*(void *)(v157 + 256), *(_DWORD *)(v157 + 272), *v904);
          unsigned int v908 = *((_DWORD *)v907 + 20);
          if (v906 < v908)
          {
            uint64_t v913 = v1013;
            if ((v906 & 0x3F) != 0) {
              *((void *)v1012 + v1013 - 1) &= ~(-1 << (v906 & 0x3F));
            }
            unsigned int v914 = v913;
            unsigned int v1016 = v908;
            unsigned int v915 = v908 + 63;
            if (v913 != (v908 + 63) >> 6)
            {
              uint64_t v916 = v915 >> 6;
              if (v913 > v916)
              {
                unsigned int v1013 = v915 >> 6;
                unsigned int v914 = v915 >> 6;
              }
              else
              {
                if (v916 > v1014) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v916 != v913) {
                  bzero((char *)v1012 + 8 * v913, 8 * (v916 - v913));
                }
                unsigned int v914 = v916;
                unsigned int v1013 = v916;
                unsigned int v908 = v1016;
              }
            }
            if ((v908 & 0x3F) != 0) {
              *((void *)v1012 + v914 - 1) &= ~(-1 << (v908 & 0x3F));
            }
            unsigned int v906 = v908;
            uint64_t v157 = a1;
          }
          uint64_t v909 = *((unsigned int *)v907 + 6);
          if (v909)
          {
            v910 = (uint64_t *)v907[2];
            v911 = v1012;
            do
            {
              uint64_t v912 = *v910++;
              *v911++ |= v912;
              --v909;
            }
            while (v909);
          }
          ++v904;
        }
        while (v904 != v905);
        v904 = (uint64_t *)__src;
      }
      if (v904 != (uint64_t *)((char *)&v1026 + 8)) {
        free(v904);
      }
      sub_1CBBE6384((uint64_t)(v888 + 1), (uint64_t *)&v1012);
      if (v1012 != v1015) {
        free(v1012);
      }
      v887 = (void *)v887[1];
    }
    while (v887 != v971);
    for (kk = (void *)a2[41]; kk != v971; uint64_t v157 = a1)
    {
      v918 = sub_1CBBEF610(*(void *)(v157 + 344), *(_DWORD *)(v157 + 360), (uint64_t)kk);
      uint64_t v919 = *(void *)(*(void *)(kk[4] + 56) + 48) >> 1;
      uint64_t v920 = (v919 + 63) >> 6;
      v1007 = v1010;
      unsigned int v1009 = 6;
      if (v920 >= 7)
      {
        unsigned int v1008 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((v919 + 63) >> 6) {
        bzero(v1010, 8 * v920);
      }
      unsigned int v1008 = (v919 + 63) >> 6;
      unsigned int v1011 = v919;
      v921 = (uint64_t *)kk[11];
      v922 = (uint64_t *)kk[12];
      while (v921 != v922)
      {
        v923 = sub_1CBBEF610(*(void *)(a1 + 344), *(_DWORD *)(a1 + 360), *v921);
        unsigned int v924 = *((_DWORD *)v923 + 20);
        if (v919 < v924)
        {
          if ((v919 & 0x3F) != 0) {
            *((void *)v1007 + v920 - 1) &= ~(-1 << (v919 & 0x3F));
          }
          unsigned int v1011 = v924;
          unsigned int v929 = v924 + 63;
          if (v920 != (v924 + 63) >> 6)
          {
            uint64_t v930 = v929 >> 6;
            if (v920 > v930)
            {
              unsigned int v1008 = v929 >> 6;
              LODWORD(v920) = v929 >> 6;
            }
            else
            {
              if (v930 > v1009) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v930 != v920) {
                bzero((char *)v1007 + 8 * v920, 8 * (v930 - v920));
              }
              LODWORD(v920) = v930;
              unsigned int v1008 = v930;
              unsigned int v924 = v1011;
            }
          }
          if ((v924 & 0x3F) != 0) {
            *((void *)v1007 + v920 - 1) &= ~(-1 << (v924 & 0x3F));
          }
          LODWORD(v919) = v924;
        }
        uint64_t v925 = *((unsigned int *)v923 + 6);
        if (v925)
        {
          v926 = (uint64_t *)v923[2];
          v927 = v1007;
          do
          {
            uint64_t v928 = *v926++;
            *v927++ |= v928;
            --v925;
          }
          while (v925);
        }
        ++v921;
      }
      sub_1CBBE6384((uint64_t)(v918 + 1), (uint64_t *)&v1007);
      if (v1007 != v1010) {
        free(v1007);
      }
      kuint64_t k = (void *)kk[1];
    }
  }
  char v52 = v970;
  if (*(unsigned char *)(v157 + 524))
  {
    v931 = a2 + 40;
    v932 = (void *)*v971;
    while (v932 != v931)
    {
      v933 = v932 + 6;
      unint64_t v934 = v932[6] & 0xFFFFFFFFFFFFFFF8;
      if (v932 + 6 == (void *)v934) {
        goto LABEL_1717;
      }
      if (v934)
      {
        unint64_t v935 = v932[6] & 0xFFFFFFFFFFFFFFF8;
        if ((*(unsigned char *)v934 & 4) != 0)
        {
          __int16 v936 = *(_WORD *)(v934 + 44);
          unint64_t v935 = v932[6] & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_1708;
        }
      }
      else
      {
        unint64_t v935 = 0;
      }
      while (1)
      {
        __int16 v936 = *(_WORD *)(v935 + 44);
        if ((v936 & 4) == 0) {
          break;
        }
        unint64_t v935 = *(void *)v935 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_1708:
      int v937 = v936 & 0xC;
      int v938 = v936 & 4;
      uint64_t v939 = *(void *)(*(void *)(v935 + 16) + 8);
      if (v937) {
        BOOL v940 = v938 == 0;
      }
      else {
        BOOL v940 = 0;
      }
      if (v940)
      {
        while ((v939 & 0x20) == 0)
        {
          if ((*(_WORD *)(v935 + 44) & 8) == 0) {
            goto LABEL_1717;
          }
          unint64_t v935 = *(void *)(v935 + 8);
          LOBYTE(v939) = *(unsigned char *)(*(void *)(v935 + 16) + 8);
        }
LABEL_1718:
        if (!v932) {
          break;
        }
        while (1)
        {
          uint64_t v941 = *(void *)(v934 + 16);
          uint64_t v942 = *(void *)(v941 + 8);
          if ((*(_WORD *)(v934 + 44) & 0xC) != 0 && (*(_WORD *)(v934 + 44) & 4) == 0)
          {
            unint64_t v944 = v934;
            if ((v942 & 0x20) != 0)
            {
LABEL_1729:
              if (v966 && *(_WORD *)v941 == 547)
              {
                llvm::MachineFunction::allocateRegMask((llvm::MachineFunction *)a2);
                v946 = v945;
                memmove(v945, v965, 4 * v966);
                LODWORD(__src) = 12;
                *(void *)&long long v1026 = 0;
                *((void *)&v1026 + 1) = v946;
                llvm::MachineInstr::addOperand((llvm::MachineInstr *)v934, (llvm::MachineFunction *)a2, (const llvm::MachineOperand *)&__src);
                sub_1CBA6DECC(a2[5] + 280, v946, 0xFFFFFFFF);
              }
              goto LABEL_1732;
            }
            while ((*(_WORD *)(v944 + 44) & 8) != 0)
            {
              unint64_t v944 = *(void *)(v944 + 8);
              if ((*(unsigned char *)(*(void *)(v944 + 16) + 8) & 0x20) != 0) {
                goto LABEL_1729;
              }
            }
          }
          else if ((v942 & 0x20) != 0)
          {
            goto LABEL_1729;
          }
          unint64_t v934 = *(void *)v934 & 0xFFFFFFFFFFFFFFF8;
          if (v933 == (void *)v934) {
            goto LABEL_1732;
          }
        }
      }
      if ((v939 & 0x20) != 0) {
        goto LABEL_1718;
      }
LABEL_1717:
      v932 = (void *)*v932;
      v931 = a2 + 40;
    }
  }
LABEL_1732:
  if (v1018 != v1020) {
    free(v1018);
  }
  v947 = (llvm::MachineInstr **)v1022;
  if (v1023)
  {
    uint64_t v948 = 8 * v1023;
    do
    {
      v949 = *v947++;
      llvm::MachineInstr::eraseFromParent(v949);
      v948 -= 8;
    }
    while (v948);
    v947 = (llvm::MachineInstr **)v1022;
  }
  if (v947 != (llvm::MachineInstr **)v1024) {
    free(v947);
  }
  return v52 & 1;
}

void sub_1CBBED500(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_1F25FA270;
  sub_1CD425298(a1 + 54);
  sub_1CD4252F4(a1 + 43);
  sub_1CD4252F4(a1 + 32);
  *a1 = (uint64_t)&unk_1F260E110;
  uint64_t v2 = (uint64_t *)a1[22];
  if (v2 != a1 + 24) {
    free(v2);
  }
  unsigned int v3 = (uint64_t *)a1[13];
  if (v3 != a1 + 15) {
    free(v3);
  }
  uint64_t v4 = (uint64_t *)a1[4];
  if (v4 != a1 + 6) {
    free(v4);
  }

  llvm::Pass::~Pass((llvm::Pass *)a1);
}

uint64_t *sub_1CBBED5CC(uint64_t *a1)
{
  unsigned int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 888 * v2;
    uint64_t v5 = v3 + 8;
    uint64_t v6 = v3 + 8;
    do
    {
      uint64_t v7 = *(void *)(v6 - 8);
      if (v7 != -4096 && v7 != -8192) {
        (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
      v6 += 888;
      v5 += 888;
      v4 -= 888;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t *sub_1CBBED674(uint64_t *a1)
{
  unsigned int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *a1;
  if (v2)
  {
    uint64_t v4 = 880 * v2;
    uint64_t v5 = v3 + 8;
    uint64_t v6 = v3 + 8;
    do
    {
      uint64_t v7 = *(void *)(v6 - 8);
      if (v7 != -4096 && v7 != -8192) {
        (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
      v6 += 880;
      v5 += 880;
      v4 -= 880;
    }
    while (v4);
    uint64_t v3 = *a1;
  }
  MEMORY[0x1D25D9CD0](v3, 8);
  return a1;
}

uint64_t sub_1CBBED71C(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F6D00;
  unsigned int v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352)) {
    free(v2);
  }
  if (*(unsigned char *)(a1 + 320))
  {
    uint64_t v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264)) {
      free(v3);
    }
    *(unsigned char *)(a1 + 320) = 0;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    uint64_t v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184)) {
      free(v4);
    }
    *(unsigned char *)(a1 + 240) = 0;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104)) {
      free(v7);
    }
    *(unsigned char *)(a1 + 160) = 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24)) {
      free(v6);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  return a1;
}

void *sub_1CBBED800(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(880 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 880 * v10;
      do
      {
        *BOOL result = -4096;
        result += 110;
        v11 -= 880;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = v4 + 8;
      uint64_t v13 = 880 * v3;
      uint64_t v14 = v4;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 != -4096 && v15 != -8192)
        {
          uint64_t v20 = v12;
          uint64_t v21 = 0;
          uint64_t v19 = v13;
          sub_1CBBED9D8(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v21);
          unint64_t v18 = v21;
          void *v21 = *(void *)v14;
          sub_1CBAF0140((uint64_t)(v18 + 1), v14 + 8);
          v18[1] = &unk_1F25FA330;
          *((_DWORD *)v18 + 218) = *(_DWORD *)(v14 + 872);
          ++*(_DWORD *)(a1 + 8);
          (*(void (**)(uint64_t))(*(void *)(v14 + 8) + 24))(v14 + 8);
          uint64_t v13 = v19;
          uint64_t v12 = v20;
        }
        v14 += 880;
        v12 += 880;
        v13 -= 880;
      }
      while (v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v16 = *(_DWORD *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 880 * v16;
    do
    {
      *BOOL result = -4096;
      result += 110;
      v17 -= 880;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1CBBED9D8(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(result + 880 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(result + 880 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_14;
        }
      }
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
LABEL_14:
  *a4 = v6;
  return result;
}

uint64_t sub_1CBBEDA58(uint64_t a1)
{
  return *(unsigned int *)(a1 + 864);
}

unint64_t sub_1CBBEDA60(uint64_t a1, _DWORD *a2)
{
  int v2 = a2[4] - 81;
  if (v2 > 4)
  {
    int v6 = 0;
  }
  else
  {
    int v3 = (*a2 >> 8) & 0xFFF;
    if (!*a2) {
      int v3 = 0;
    }
    int v4 = v3 & 0x200;
    if ((v3 & 0x200) != 0) {
      v3 &= 0xCFFu;
    }
    if ((v3 & 0xFFFFFEFF) != 0) {
      return 0;
    }
    int v6 = a2[1] | (v4 << 22);
  }
  uint64_t v7 = (dword_1CDC6D518[v2] + v6);
  sub_1CBAD8000((uint64_t)a2);
  return v6 & 0xFFFFFF00 | (unint64_t)(v7 << 32) | v6;
}

unint64_t sub_1CBBEDB10(uint64_t a1, _DWORD *a2)
{
  if ((a2[4] - 81) > 4) {
    return 0;
  }
  int v2 = (*a2 >> 8) & 0xFFF;
  if (!*a2) {
    int v2 = 0;
  }
  int v3 = v2 & 0x200;
  if ((v2 & 0x200) != 0) {
    v2 &= 0xFFFFFCFF;
  }
  unsigned int v4 = v2 & 0xFFFFFEFF;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (a2[1] | (v3 << 22)) + ((v4 - 129) >> 2);
  return v5 | ((unint64_t)(v5 + 1) << 32);
}

uint64_t sub_1CBBEDB70(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40))
  {
    uint64_t v3 = result;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = result + 336;
    do
    {
      BOOL result = sub_1CBC2D2EC(a2, v5, (void *)(*(void *)(v3 + 328) + 8));
      if ((result & 0xFFFFFFFE) == 4)
      {
        uint64_t v7 = *(void *)(a2 + 32) + v4;
        uint64_t v8 = a2;
        BOOL result = sub_1CBAF10A8(v6, &v8, &v7);
      }
      ++v5;
      v4 += 32;
    }
    while (v5 < *(unsigned int *)(a2 + 40));
  }
  return result;
}

uint64_t sub_1CBBEDC10(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40))
  {
    unsigned int v4 = 0;
    while (sub_1CBC2D2EC(a2, v4, (void *)(*(void *)(a1 + 328) + 8)) != 4)
    {
      if (++v4 >= *(_DWORD *)(a2 + 40)) {
        goto LABEL_5;
      }
    }
    uint64_t v5 = 0x100000000;
  }
  else
  {
LABEL_5:
    uint64_t v5 = 0;
    unsigned int v4 = 0;
  }
  return v5 | v4;
}

void *sub_1CBBEDC90(void *result, int a2)
{
  if (a2)
  {
    unint64_t v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    unsigned int v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (*((_DWORD *)result + 4) <= v4) {
      return sub_1CBBEDCDC((uint64_t)result, v4 + 1);
    }
  }
  return result;
}

void *sub_1CBBEDCDC(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 40 * v10;
      do
      {
        *BOOL result = -4096;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = v4 + 24;
      uint64_t v13 = 40 * v3;
      do
      {
        uint64_t v14 = *(void *)(v12 - 24);
        if (v14 != -4096 && v14 != -8192)
        {
          uint64_t v21 = v13;
          uint64_t v22 = 0;
          uint64_t v17 = (void *)v12;
          sub_1CBBEDE80(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          unint64_t v18 = v22;
          void *v22 = *(v17 - 3);
          v18[2] = 0x200000000;
          v18[1] = v18 + 3;
          uint64_t v19 = (uint64_t)(v18 + 1);
          if (*((_DWORD *)v17 - 2)) {
            sub_1CD41C56C(v19, (uint64_t)(v17 - 2));
          }
          ++*(_DWORD *)(a1 + 8);
          uint64_t v12 = (uint64_t)v17;
          uint64_t v20 = (void *)*(v17 - 2);
          uint64_t v13 = v21;
          if (v17 != v20)
          {
            free(v20);
            uint64_t v13 = v21;
            uint64_t v12 = (uint64_t)v17;
          }
        }
        v12 += 40;
        v13 -= 40;
      }
      while (v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v15 = *(unsigned int *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = 40 * v15;
    do
    {
      *BOOL result = -4096;
      result += 5;
      v16 -= 40;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1CBBEDE80(uint64_t result, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(result + 40 * v5);
    uint64_t v7 = *v6;
    if (*v6 != a3)
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(result + 40 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_7;
        }
      }
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
  }
LABEL_7:
  *a4 = v6;
  return result;
}

void *sub_1CBBEDF00(_DWORD *a1, uint64_t *a2, void *a3)
{
  int v3 = a1[2];
  unsigned int v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  uint64_t v7 = a1;
  sub_1CBBEDCDC((uint64_t)a1, v4);
  unsigned int v8 = 0;
  sub_1CBBEDE80(*(void *)v7, v7[4], *a2, &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*a3 != -4096) {
    --a1[3];
  }
  return a3;
}

uint64_t sub_1CBBEDFC0(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F6D00;
  unint64_t v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352)) {
    free(v2);
  }
  if (*(unsigned char *)(a1 + 320))
  {
    int v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264)) {
      free(v3);
    }
    *(unsigned char *)(a1 + 320) = 0;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    unsigned int v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184)) {
      free(v4);
    }
    *(unsigned char *)(a1 + 240) = 0;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104)) {
      free(v7);
    }
    *(unsigned char *)(a1 + 160) = 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    unint64_t v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24)) {
      free(v6);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  return a1;
}

void *sub_1CBBEE0A4(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  BOOL result = operator new(880 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 880 * v10;
      do
      {
        *BOOL result = -4096;
        result += 110;
        v11 -= 880;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = v4 + 8;
      uint64_t v13 = 880 * v3;
      uint64_t v14 = v4;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 != -4096 && v15 != -8192)
        {
          uint64_t v20 = v12;
          uint64_t v21 = 0;
          uint64_t v19 = v13;
          sub_1CBBED9D8(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v21);
          unint64_t v18 = v21;
          void *v21 = *(void *)v14;
          sub_1CBAF0140((uint64_t)(v18 + 1), v14 + 8);
          v18[1] = &unk_1F25FA388;
          *((_DWORD *)v18 + 218) = *(_DWORD *)(v14 + 872);
          ++*(_DWORD *)(a1 + 8);
          (*(void (**)(uint64_t))(*(void *)(v14 + 8) + 24))(v14 + 8);
          uint64_t v13 = v19;
          uint64_t v12 = v20;
        }
        v14 += 880;
        v12 += 880;
        v13 -= 880;
      }
      while (v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v16 = *(_DWORD *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 880 * v16;
    do
    {
      *BOOL result = -4096;
      result += 110;
      v17 -= 880;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1CBBEE27C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 864);
}

uint64_t sub_1CBBEE284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (sub_1CBC2D2EC(v4, (unint64_t)(a2 - *(void *)(v4 + 32)) >> 5, (void *)(*(void *)(a1 + 328) + 8)) == 6)return sub_1CBBEE5A0(a1, a2); {
  unint64_t v6 = *(unsigned __int16 **)(v4 + 16);
  }
  uint64_t v7 = sub_1CBE52E8C(*v6);
  if ((v7 & 0xFF00000000) != 0 && v7 == 100) {
    return sub_1CBBEE5A0(a1, a2);
  }
  uint64_t v8 = *((void *)v6 + 1);
  if ((*(_WORD *)(v4 + 44) & 0xC) != 0 && (*(_WORD *)(v4 + 44) & 4) == 0)
  {
    if ((v8 & 0x80) == 0)
    {
      while ((*(_WORD *)(v4 + 44) & 8) != 0)
      {
        uint64_t v4 = *(void *)(v4 + 8);
        if ((*(unsigned char *)(*(void *)(v4 + 16) + 8) & 0x80) != 0) {
          return sub_1CBBEE5A0(a1, a2);
        }
      }
      return 0;
    }
    return sub_1CBBEE5A0(a1, a2);
  }
  if ((v8 & 0x80) != 0) {
    return sub_1CBBEE5A0(a1, a2);
  }
  return 0;
}

uint64_t sub_1CBBEE360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (sub_1CBC2D2EC(v4, (unint64_t)(a2 - *(void *)(v4 + 32)) >> 5, (void *)(*(void *)(a1 + 328) + 8)) == 7)return sub_1CBBEE5A0(a1, a2); {
  uint64_t v5 = sub_1CBE52E8C(**(unsigned __int16 **)(v4 + 16));
  }
  if ((v5 & 0xFF00000000) == 0) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t result = 0;
  if (v6 == 193) {
    return sub_1CBBEE5A0(a1, a2);
  }
  return result;
}

void sub_1CBBEE404(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 240) && !*(unsigned char *)(a1 + 320)) {
    sub_1CBAF0954(a1);
  }
}

uint64_t sub_1CBBEE41C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40))
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    while ((sub_1CBC2D2EC(a2, v5, (void *)(*(void *)(a1 + 328) + 8)) & 0xFFFFFFFE) != 6)
    {
      ++v5;
      v4 += 32;
      if (v5 >= *(_DWORD *)(a2 + 40)) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = *(void *)(a2 + 32) + v4;
    uint64_t v9 = a2;
    sub_1CBAF10A8(a1 + 336, &v9, &v8);
  }
LABEL_7:
  uint64_t result = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
  if ((result & 0xFF00000000) != 0)
  {
    if ((int)result > 99)
    {
      if (result != 193 && result != 100) {
        return result;
      }
    }
    else if (result != 4 && result != 11)
    {
      return result;
    }
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = a2;
    return sub_1CBAF10A8(a1 + 336, &v9, &v8);
  }
  return result;
}

uint64_t sub_1CBBEE508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
  if ((v4 & 0xFF00000000) != 0 && v4 == 100 || !*(_DWORD *)(a2 + 40)) {
    return 0;
  }
  uint64_t v5 = 0;
  while (sub_1CBC2D2EC(a2, v5, (void *)(*(void *)(a1 + 328) + 8)) != 6)
  {
    if (++v5 >= *(_DWORD *)(a2 + 40)) {
      return 0;
    }
  }
  return v5 + 0x100000001;
}

uint64_t sub_1CBBEE5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = sub_1CBC2D2EC(v4, (unint64_t)(a2 - *(void *)(v4 + 32)) >> 5, (void *)(*(void *)(a1 + 328) + 8));
  uint64_t v6 = sub_1CBE52E8C(**(unsigned __int16 **)(v4 + 16));
  if ((v5 - 8) > 0xFFFFFFFD || (v6 & 0xFF00000000) == 0)
  {
    if (*(unsigned char *)a2 == 7) {
      unsigned int v8 = *(_DWORD *)(a2 + 4);
    }
    else {
      unsigned int v8 = *(_DWORD *)(a2 + 16);
    }
    uint64_t v10 = *(void *)(v4 + 48);
    if ((v10 & 7) != 0)
    {
      unint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v4 + 48) = v10 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *(void *)(v11 + 24);
    uint64_t v14 = (unint64_t *)(v11 + 24);
    if ((v15 & 0xFFFFFFFFFFFFFFF9) != 0)
    {
      unint64_t v17 = sub_1CB8F1DC4(v14) + 7;
      if (v16 == 1) {
      uint64_t v18 = (v17 >> 4) & 0x7FFFFFFF;
      }
    }
    else
    {
      LODWORD(v18) = 0x7FFFFFFF;
    }
    uint64_t v13 = v18 + v8;
    uint64_t v12 = v8;
  }
  else
  {
    if ((int)v6 <= 99)
    {
      if (v6 != 4 && v6 != 11) {
LABEL_29:
      }
        llvm::report_fatal_error((llvm *)"Unexpected Opcode", (const llvm::Twine *)1);
      goto LABEL_20;
    }
    if (v6 == 100)
    {
LABEL_20:
      uint64_t v12 = 0;
      uint64_t v13 = *(unsigned int *)(a1 + 864);
      return v12 | (v13 << 32);
    }
    if (v6 != 193) {
      goto LABEL_29;
    }
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  return v12 | (v13 << 32);
}

uint64_t sub_1CBBEE6E8(uint64_t a1)
{
  *(void *)a1 = &unk_1F25F6D00;
  unint64_t v2 = *(void **)(a1 + 336);
  if (v2 != (void *)(a1 + 352)) {
    free(v2);
  }
  if (*(unsigned char *)(a1 + 320))
  {
    unsigned int v3 = *(void **)(a1 + 248);
    if (v3 != (void *)(a1 + 264)) {
      free(v3);
    }
    *(unsigned char *)(a1 + 320) = 0;
  }
  if (*(unsigned char *)(a1 + 240))
  {
    uint64_t v4 = *(void **)(a1 + 168);
    if (v4 != (void *)(a1 + 184)) {
      free(v4);
    }
    *(unsigned char *)(a1 + 240) = 0;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v7 = *(void **)(a1 + 88);
    if (v7 != (void *)(a1 + 104)) {
      free(v7);
    }
    *(unsigned char *)(a1 + 160) = 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v6 = *(void **)(a1 + 8);
    if (v6 != (void *)(a1 + 24)) {
      free(v6);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  return a1;
}

void *sub_1CBBEE7CC(uint64_t a1, int a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(888 * v8, (std::align_val_t)8uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    unsigned int v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 888 * v10;
      do
      {
        *uint64_t result = -4096;
        result += 111;
        v11 -= 888;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = v4 + 8;
      uint64_t v13 = 888 * v3;
      uint64_t v14 = v4;
      do
      {
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 != -4096 && v15 != -8192)
        {
          uint64_t v21 = v12;
          uint64_t v22 = 0;
          uint64_t v20 = v13;
          sub_1CBBEE9A8(*(void *)a1, *(_DWORD *)(a1 + 16), v15, &v22);
          uint64_t v18 = v22;
          void *v22 = *(void *)v14;
          uint64_t v19 = sub_1CBAF0140((uint64_t)(v18 + 1), v14 + 8);
          v18[1] = &unk_1F25FA3E0;
          *(_OWORD *)(v19 + 864) = *(_OWORD *)(v14 + 872);
          ++*(_DWORD *)(a1 + 8);
          (*(void (**)(uint64_t))(*(void *)(v14 + 8) + 24))(v14 + 8);
          uint64_t v13 = v20;
          uint64_t v12 = v21;
        }
        v14 += 888;
        v12 += 888;
        v13 -= 888;
      }
      while (v13);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  unsigned int v16 = *(_DWORD *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 888 * v16;
    do
    {
      *uint64_t result = -4096;
      result += 111;
      v17 -= 888;
    }
    while (v17);
  }
  return result;
}

uint64_t sub_1CBBEE9A8(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    unint64_t v6 = (void *)(a1 + 888 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      uint64_t result = 1;
    }
    else
    {
      unsigned int v8 = 0;
      int v9 = 1;
      while (v7 != -4096)
      {
        if (v8) {
          BOOL v10 = 0;
        }
        else {
          BOOL v10 = v7 == -8192;
        }
        if (v10) {
          unsigned int v8 = v6;
        }
        unsigned int v11 = v5 + v9++;
        unsigned int v5 = v11 & v4;
        unint64_t v6 = (void *)(a1 + 888 * (v11 & v4));
        uint64_t v7 = *v6;
        if (*v6 == a3) {
          goto LABEL_11;
        }
      }
      uint64_t result = 0;
      if (v8) {
        unint64_t v6 = v8;
      }
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t result = 0;
  }
  *a4 = v6;
  return result;
}

uint64_t sub_1CBBEEA34(uint64_t a1)
{
  return *(unsigned int *)(a1 + 864);
}

void sub_1CBBEEA44(uint64_t a1)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 240) && !*(unsigned char *)(a1 + 320))
  {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 872) + 32) + 16);
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 176))(v2);
    uint64_t v48 = 0x600000000;
    uint64_t v46 = v3;
    uint64_t v47 = v49;
    unsigned int v4 = *(_DWORD *)(v3 + 44);
    unsigned int v50 = v4;
    unsigned int v5 = v4 + 63;
    if (v4 + 63 < 0x40)
    {
      unsigned int v7 = 0;
    }
    else
    {
      uint64_t v6 = v5 >> 6;
      if (v5 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v49, 8 * v6);
      unsigned int v7 = v6;
      LODWORD(v48) = v6;
    }
    if ((v4 & 0x3F) != 0) {
      v49[v7 - 1] &= ~(-1 << (v4 & 0x3F));
    }
    uint64_t v43 = 0x600000000;
    uint64_t v41 = v3;
    int v42 = v44;
    unsigned int v8 = *(_DWORD *)(v3 + 44);
    unsigned int v45 = v8;
    unsigned int v9 = v8 + 63;
    if (v8 + 63 < 0x40)
    {
      unsigned int v11 = 0;
    }
    else
    {
      uint64_t v10 = v9 >> 6;
      if (v9 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v44, 8 * v10);
      unsigned int v11 = v10;
      LODWORD(v43) = v10;
    }
    if ((v8 & 0x3F) != 0) {
      v44[v11 - 1] &= ~(-1 << (v8 & 0x3F));
    }
    int v12 = (**(uint64_t (***)(uint64_t))a1)(a1);
    unsigned int v13 = v12 + 63;
    uint64_t v14 = (v12 + 63) >> 6;
    uint64_t v36 = v39;
    int v38 = 6;
    if ((v12 + 63) >= 0x1C0)
    {
      unsigned int v37 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v13 >= 0x40) {
      bzero(v39, 8 * v14);
    }
    unsigned int v37 = (v12 + 63) >> 6;
    int v40 = v12;
    uint64_t v15 = (void **)(a1 + 248);
    if (*(unsigned char *)(a1 + 320))
    {
      sub_1CB837F14(a1 + 248, (uint64_t)&v36);
      *(_DWORD *)(a1 + 312) = v40;
    }
    else
    {
      *(void *)(a1 + 248) = a1 + 264;
      *(void *)(a1 + 256) = 0x600000000;
      if (v15 != &v36 && v13 >= 0x40)
      {
        if (v13 >= 0x1C0) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 264), v39, 8 * v14);
        *(_DWORD *)(a1 + 256) = (v12 + 63) >> 6;
        int v12 = v40;
        unsigned int v37 = 0;
      }
      *(_DWORD *)(a1 + 312) = v12;
      *(unsigned char *)(a1 + 320) = 1;
    }
    if (v36 != v39) {
      free(v36);
    }
    int v16 = (**(uint64_t (***)(uint64_t))a1)(a1);
    unsigned int v17 = v16 + 63;
    uint64_t v18 = (v16 + 63) >> 6;
    uint64_t v36 = v39;
    int v38 = 6;
    if ((v16 + 63) >= 0x1C0)
    {
      unsigned int v37 = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v17 >= 0x40) {
      bzero(v39, 8 * v18);
    }
    unsigned int v37 = (v16 + 63) >> 6;
    int v40 = v16;
    uint64_t v19 = (void **)(a1 + 168);
    if (*(unsigned char *)(a1 + 240))
    {
      sub_1CB837F14(a1 + 168, (uint64_t)&v36);
      *(_DWORD *)(a1 + 232) = v40;
    }
    else
    {
      *(void *)(a1 + 168) = a1 + 184;
      *(void *)(a1 + 176) = 0x600000000;
      if (v19 != &v36 && v17 >= 0x40)
      {
        if (v17 >= 0x1C0) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy((void *)(a1 + 184), v39, 8 * v18);
        *(_DWORD *)(a1 + 176) = (v16 + 63) >> 6;
        int v16 = v40;
        unsigned int v37 = 0;
      }
      *(_DWORD *)(a1 + 232) = v16;
      *(unsigned char *)(a1 + 240) = 1;
    }
    if (v36 != v39) {
      free(v36);
    }
    uint64_t v20 = *(void *)(a1 + 872);
    uint64_t v22 = *(void *)(v20 + 48);
    uint64_t v21 = v20 + 48;
    unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
    if ((v22 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v23 & 4) == 0)
    {
      while ((*(_WORD *)(v23 + 44) & 4) != 0)
        unint64_t v23 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
    }
    while (v23 != v21)
    {
      if (**(unsigned __int16 **)(v23 + 16) - 13 >= 5)
      {
        if (v48) {
          bzero(v47, 8 * v48);
        }
        if (v43) {
          bzero(v42, 8 * v43);
        }
        sub_1CBBE60E4(v23, (llvm::LiveRegUnits *)&v41, &v46, v3);
        LODWORD(v24) = *(_DWORD *)(a1 + 256);
        LODWORD(v25) = v43;
        if (v43 >= v24) {
          uint64_t v24 = v24;
        }
        else {
          uint64_t v24 = v43;
        }
        if (v24)
        {
          int v26 = (uint64_t *)v42;
          uint64_t v27 = *v15;
          do
          {
            uint64_t v28 = *v26++;
            *v27++ &= ~v28;
            --v24;
          }
          while (v24);
        }
        if (*(_DWORD *)(a1 + 232) < v45)
        {
          sub_1CB8F8DF4(a1 + 168, v45, 0);
          LODWORD(v25) = v43;
        }
        if (v25)
        {
          uint64_t v29 = (uint64_t *)v42;
          uint64_t v30 = *v19;
          uint64_t v25 = v25;
          do
          {
            uint64_t v31 = *v29++;
            *v30++ |= v31;
            --v25;
          }
          while (v25);
        }
        if (*(_DWORD *)(a1 + 312) < v50) {
          sub_1CB8F8DF4(a1 + 248, v50, 0);
        }
        uint64_t v32 = v48;
        if (v48)
        {
          uint64_t v33 = (uint64_t *)v47;
          uint64_t v34 = *v15;
          do
          {
            uint64_t v35 = *v33++;
            *v34++ |= v35;
            --v32;
          }
          while (v32);
        }
      }
      unint64_t v23 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
      if (!v23 || (*(unsigned char *)v23 & 4) == 0)
      {
        while ((*(_WORD *)(v23 + 44) & 4) != 0)
          unint64_t v23 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    if (v42 != v44) {
      free(v42);
    }
    if (v47 != v49) {
      free(v47);
    }
  }
}

void sub_1CBBEF0FC(const llvm::MachineBasicBlock *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (void **)*((void *)a1 + 4);
  if ((*((_WORD *)*v6 + 9) & 0x3F70) == 0 || (*((_WORD *)*v6 + 9) & 0x3FF0) == 0xFF0)
  {
    uint64_t v7 = (*(uint64_t (**)(void *))(*v6[2] + 176))(v6[2]);
    uint64_t v35 = 0x600000000;
    uint64_t v33 = v7;
    uint64_t v34 = v36;
    unsigned int v8 = *(_DWORD *)(v7 + 44);
    unsigned int v37 = v8;
    unsigned int v9 = v8 + 63;
    if (v8 + 63 < 0x40)
    {
      unsigned int v11 = 0;
    }
    else
    {
      uint64_t v10 = v9 >> 6;
      if (v9 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v36, 8 * v10);
      unsigned int v11 = v10;
      LODWORD(v35) = v10;
    }
    if ((v8 & 0x3F) != 0) {
      v36[v11 - 1] &= ~(-1 << (v8 & 0x3F));
    }
    llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v33, a1);
    if (*(_DWORD *)(a2 + 64) < v37) {
      sub_1CB8F8DF4(a2, v37, 0);
    }
    uint64_t v12 = v35;
    if (v35)
    {
      unsigned int v13 = (uint64_t *)v34;
      uint64_t v14 = *(void **)a2;
      do
      {
        uint64_t v15 = *v13++;
        *v14++ |= v15;
        --v12;
      }
      while (v12);
    }
    unint64_t v16 = *((void *)a1 + 6) & 0xFFFFFFFFFFFFFFF8;
    if ((const llvm::MachineBasicBlock *)((char *)a1 + 48) == (const llvm::MachineBasicBlock *)v16) {
      goto LABEL_22;
    }
    if (v16 && (*(unsigned char *)v16 & 4) != 0)
    {
      __int16 v17 = *(_WORD *)(v16 + 44);
    }
    else
    {
      while (1)
      {
        __int16 v17 = *(_WORD *)(v16 + 44);
        if ((v17 & 4) == 0) {
          break;
        }
        unint64_t v16 = *(void *)v16 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    int v18 = v17 & 0xC;
    int v19 = v17 & 4;
    uint64_t v20 = *(void *)(*(void *)(v16 + 16) + 8);
    if (v18) {
      BOOL v21 = v19 == 0;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {
      if ((v20 & 0x20) == 0)
      {
        while ((*(_WORD *)(v16 + 44) & 8) != 0)
        {
          unint64_t v16 = *(void *)(v16 + 8);
          if ((*(unsigned char *)(*(void *)(v16 + 16) + 8) & 0x20) != 0) {
            goto LABEL_32;
          }
        }
        goto LABEL_22;
      }
    }
    else if ((v20 & 0x20) == 0)
    {
LABEL_22:
      if (v34 != v36) {
        free(v34);
      }
      return;
    }
LABEL_32:
    unsigned int v22 = *(_DWORD *)(a3 + 64);
    if (*(_DWORD *)(a2 + 64) < v22)
    {
      int v27 = *(_DWORD *)(a2 + 64) & 0x3F;
      uint64_t v28 = *(unsigned int *)(a2 + 8);
      if (v27) {
        *(void *)(*(void *)a2 + 8 * v28 - 8) &= ~(-1 << v27);
      }
      unsigned int v29 = v28;
      *(_DWORD *)(a2 + 64) = v22;
      unsigned int v30 = v22 + 63;
      if (v28 != (v22 + 63) >> 6)
      {
        uint64_t v31 = v30 >> 6;
        if (v28 > v31)
        {
          *(_DWORD *)(a2 + 8) = v31;
          unsigned int v29 = v30 >> 6;
        }
        else
        {
          if (v31 > *(_DWORD *)(a2 + 12)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v31 != v28) {
            bzero((void *)(*(void *)a2 + 8 * v28), 8 * (v31 - v28));
          }
          unsigned int v29 = v31;
          *(_DWORD *)(a2 + 8) = v31;
          unsigned int v22 = *(_DWORD *)(a2 + 64);
        }
      }
      int v32 = v22 & 0x3F;
      if (v32) {
        *(void *)(*(void *)a2 + 8 * v29 - 8) &= ~(-1 << v32);
      }
    }
    uint64_t v23 = *(unsigned int *)(a3 + 8);
    if (v23)
    {
      uint64_t v24 = *(uint64_t **)a3;
      uint64_t v25 = *(void **)a2;
      do
      {
        uint64_t v26 = *v24++;
        *v25++ |= v26;
        --v23;
      }
      while (v23);
    }
    goto LABEL_22;
  }
}

uint64_t sub_1CBBEF45C(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    uint64_t v6 = (void *)(a1 + 888 * v5);
    uint64_t v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -4096)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -8192;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        uint64_t v6 = (void *)(a1 + 888 * (v13 & v4));
        uint64_t v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_4;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        uint64_t v6 = v10;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t *sub_1CBBEF4F4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_1CBBEF5AC(a1, a2, a3);
  if ((uint64_t *)(a1 + 40 * a2) != result)
  {
    uint64_t v8 = *((unsigned int *)result + 4);
    if (v8)
    {
      unsigned int v9 = (void *)result[1];
      unsigned int v10 = *(_DWORD *)(a4 + 8);
      uint64_t v11 = 8 * v8;
      do
      {
        if (v10 >= *(_DWORD *)(a4 + 12)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a4 + 8 * v10) = *v9;
        unsigned int v10 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v10;
        ++v9;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return result;
}

uint64_t *sub_1CBBEF5AC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 40 * a2);
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  unsigned int v5 = (uint64_t *)(a1 + 40 * v4);
  uint64_t v6 = *v5;
  if (*v5 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      unsigned int v5 = (uint64_t *)(a1 + 40 * (v8 & v3));
      uint64_t v6 = *v5;
      if (*v5 == a3) {
        return v5;
      }
    }
    return (uint64_t *)(a1 + 40 * a2);
  }
  return v5;
}

uint64_t *sub_1CBBEF610(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return (uint64_t *)(a1 + 880 * a2);
  }
  unsigned int v3 = a2 - 1;
  unsigned int v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  unsigned int v5 = (uint64_t *)(a1 + 880 * v4);
  uint64_t v6 = *v5;
  if (*v5 != a3)
  {
    int v7 = 1;
    while (v6 != -4096)
    {
      unsigned int v8 = v4 + v7++;
      unsigned int v4 = v8 & v3;
      unsigned int v5 = (uint64_t *)(a1 + 880 * (v8 & v3));
      uint64_t v6 = *v5;
      if (*v5 == a3) {
        return v5;
      }
    }
    return (uint64_t *)(a1 + 880 * a2);
  }
  return v5;
}

uint64_t sub_1CBBEF674(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 4;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  int v7 = (_DWORD *)(v3 + 4 * v6);
  int v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    unsigned int v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        unsigned int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (_DWORD *)(v3 + 4 * (v13 & v5));
      int v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_DWORD *sub_1CBBEF724(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 4;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CBBEF89C(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 4;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = (37 * *a3) & v13;
    a4 = (_DWORD *)(v11 + 4 * v14);
    int v15 = *a4;
    if (*a3 != *a4)
    {
      unint64_t v16 = 0;
      int v17 = 1;
      while (v15 != -1)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          unint64_t v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (_DWORD *)(v11 + 4 * v14);
        int v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CBBEF89C(a1, v8);
      uint64_t v20 = 0;
      sub_1CBBEF674(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

void *sub_1CBBEF89C(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 5)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(int **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CBBEFA14((void *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 24; i += 4)
  {
    unsigned int v8 = *(_DWORD *)(a1 + i);
    if (v8 <= 0xFFFFFFFD) {
      *v6++ = v8;
    }
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBBEFA14((void *)a1, v14, v6);
}

void *sub_1CBBEFA14(void *result, int *a2, int *a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)result;
  *uint64_t result = *(_DWORD *)result & 1;
  int v7 = (char *)(result + 1);
  if (v6)
  {
    size_t v10 = 16;
    uint64_t v9 = result + 1;
  }
  else
  {
    uint64_t v8 = *((unsigned int *)result + 4);
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = (void *)result[1];
    size_t v10 = 4 * v8;
  }
  uint64_t result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    int v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if (*(unsigned char *)v5)
      {
        int v12 = 4;
        uint64_t v13 = v7;
      }
      else
      {
        uint64_t v13 = (char *)v5[1];
        int v12 = *((_DWORD *)v5 + 4);
      }
      int v14 = v12 - 1;
      unsigned int v15 = (v12 - 1) & (37 * v11);
      unint64_t v16 = &v13[4 * v15];
      int v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        BOOL v18 = 0;
        int v19 = 1;
        while (v17 != -1)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            BOOL v18 = v16;
          }
          unsigned int v21 = v15 + v19++;
          unsigned int v15 = v21 & v14;
          unint64_t v16 = &v13[4 * (v21 & v14)];
          int v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16) {
            goto LABEL_14;
          }
        }
        if (v18) {
          unint64_t v16 = v18;
        }
      }
LABEL_14:
      *(_DWORD *)unint64_t v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1CBBEFB30(uint64_t a1)
{
}

uint64_t sub_1CBBEFBD4(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC1400;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25FA438;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC1408, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBBEFB30;
    v5[1] = &PassRegistry;
    unint64_t v4 = v5;
    std::__call_once(&qword_1EBCC1408, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBBEFCCC()
{
}

void sub_1CBBEFD08(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  unint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBBEFDBC(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CBBEFE68(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CBBEFEF4()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  v144[192] = *MEMORY[0x1E4F143B8];
  if (!byte_1EBCC13C0) {
    return 0;
  }
  uint64_t v2 = v1;
  unint64_t v3 = (uint64_t *)(v1 + 320);
  uint64_t v4 = *(void *)(v1 + 328);
  if (v4 == v1 + 320 || *(uint64_t **)(v4 + 8) == v3) {
    return 0;
  }
  int v5 = *(uint64_t **)(v0 + 8);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_7:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::MachineLoopInfo::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::MachineLoopInfo::ID);
  int v11 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(void))(**(void **)(v2 + 16) + 104))(*(void *)(v2 + 16));
  unsigned int v135 = v137;
  uint64_t v136 = 0x1000000000;
  uint64_t v138 = 1;
  for (uint64_t i = 88; i != 344; i += 16)
    *(void **)((char *)&v135 + i) = (void *)-4096;
  v141[0] = 1;
  for (uint64_t j = 352; j != 864; j += 32)
    *(void **)((char *)&v135 + j) = (void *)-4096;
  int v142 = (char *)v144;
  uint64_t v143 = 0x2000000000;
  sub_1CBBF0ADC((uint64_t)&v135, v2, v10);
  v129[0] = (char *)&v130;
  v129[1] = (char *)0x2000000000;
  unsigned int v131 = v133;
  uint64_t v132 = 0x600000000;
  v133[12] = 0;
  unint64_t v134 = &v135;
  sub_1CBBF2FC4((uint64_t)v129);
  llvm::FlowAnalyzer::FlowAnalyzer((uint64_t)v120, (uint64_t *)v129, (int **)&v135, v10, (uint64_t)&off_1EC7DF9E8, v11);
  unsigned int v14 = 0;
  unsigned int v117 = v119;
  uint64_t v118 = 0x2000000000;
  unsigned int v15 = (uint64_t *)((char *)v135 + 4);
  int v16 = *(_DWORD *)v135;
  BOOL v104 = v125;
  if (v136 <= 1) {
    unsigned int v15 = &v143;
  }
  int v17 = *(_DWORD *)v15;
  if (*(_DWORD *)v15 != v16)
  {
    unsigned int v14 = 0;
    do
    {
      --v17;
      if (v14 >= HIDWORD(v118)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v117 + v14) = v104[v17];
      unsigned int v14 = v118 + 1;
      LODWORD(v118) = v118 + 1;
    }
    while (v16 != v17);
  }
  unint64_t v112 = 0;
  uint64_t v113 = 0;
  unsigned int v114 = 0;
  BOOL v18 = *(uint64_t **)(v2 + 328);
  uint64_t v103 = v2;
  if (v18 != v3)
  {
    uint64_t v102 = v10;
    unsigned int v105 = v3;
    while (1)
    {
      int v19 = (uint64_t *)v18[11];
      BOOL v20 = (uint64_t *)v18[12];
      if (v19 == v20) {
        goto LABEL_52;
      }
      do
      {
        uint64_t v21 = *v19;
        if (v18[1] != *v19) {
          goto LABEL_51;
        }
        unsigned int v22 = (uint64_t *)v18[7];
        if (v18 + 6 == v22) {
          goto LABEL_48;
        }
        unint64_t v23 = (unint64_t)(v18 + 6);
        while (1)
        {
          unint64_t v23 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
          if (!v23 || (*(unsigned char *)v23 & 4) == 0)
          {
            while ((*(_WORD *)(v23 + 44) & 4) != 0)
              unint64_t v23 = *(void *)v23 & 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v24 = *(unsigned __int16 **)(v23 + 16);
          int v25 = *v24;
          BOOL v26 = (v25 - 9) > 0x3C || ((1 << (v25 - 9)) & 0x1000000000000605) == 0;
          if (v26 && v25 != 0)
          {
            uint64_t v28 = *((void *)v24 + 1);
            if ((v28 & 0x10) == 0) {
              break;
            }
          }
LABEL_42:
          if ((uint64_t *)v23 == v22) {
            goto LABEL_48;
          }
        }
        if ((*(_WORD *)(v23 + 44) & 0xC) == 0 || (*(_WORD *)(v23 + 44) & 4) != 0)
        {
          if ((v28 & 0x200) == 0) {
            goto LABEL_48;
          }
LABEL_41:
          if (*(void *)((*((uint64_t (**)(_UNKNOWN **, unint64_t))off_1EC7DF9E8 + 5))(&off_1EC7DF9E8, v23)+ 16) == v21)goto LABEL_51; {
          goto LABEL_42;
          }
        }
        unint64_t v30 = v23;
        if ((v28 & 0x200) != 0) {
          goto LABEL_41;
        }
        while ((*(_WORD *)(v30 + 44) & 8) != 0)
        {
          unint64_t v30 = *(void *)(v30 + 8);
          if ((*(unsigned char *)(*(void *)(v30 + 16) + 9) & 2) != 0) {
            goto LABEL_41;
          }
        }
LABEL_48:
        v115[0] = v18;
        unint64_t v106 = 0;
        char v31 = sub_1CBA0E618((uint64_t)&v112, v115, &v106);
        int v32 = v106;
        if ((v31 & 1) == 0)
        {
          int v32 = sub_1CD40E608(&v112, (uint64_t)v115, v115, v106);
          void *v32 = v115[0];
          v32[1] = 0;
        }
        v32[1] = v21;
LABEL_51:
        ++v19;
      }
      while (v19 != v20);
LABEL_52:
      BOOL v18 = (uint64_t *)v18[1];
      unint64_t v3 = v105;
      if (v18 == v105)
      {
        unsigned int v14 = v118;
        uint64_t v2 = v103;
        uint64_t v10 = v102;
        break;
      }
    }
  }
  if (v14)
  {
    while (1)
    {
      int v33 = *((_DWORD *)v117 + --v14);
      LODWORD(v118) = v14;
      uint64_t v34 = &v142[48 * v33];
      char v35 = v34[8];
      uint64_t v36 = (uint64_t *)*((void *)v34 + 2);
      if ((v35 & 0x10) != 0) {
        break;
      }
      unsigned int v37 = (uint64_t *)v36[1];
      if (v3 != v36 && v37 != v3 && v37 != v36)
      {
        uint64_t v40 = *v37;
        uint64_t v41 = *v36;
        *(void *)(v41 + 8) = v37;
        *unsigned int v37 = v41;
        uint64_t v42 = *v3;
        *(void *)(v40 + 8) = v3;
        *uint64_t v36 = v42;
        *(void *)(v42 + 8) = v36;
        *unint64_t v3 = v40;
      }
LABEL_81:
      if (!v14) {
        goto LABEL_95;
      }
    }
    int v43 = *(_DWORD *)(v10 + 264);
    if (!v43) {
      goto LABEL_73;
    }
    uint64_t v44 = *(void *)(v10 + 248);
    unsigned int v45 = v43 - 1;
    uint64_t v46 = (v43 - 1) & ((v36 >> 4) ^ (v36 >> 9));
    uint64_t v47 = *(uint64_t **)(v44 + 16 * v46);
    if (v36 != v47)
    {
      int v48 = 1;
      while (v47 != (uint64_t *)-4096)
      {
        int v49 = v46 + v48++;
        uint64_t v46 = v49 & v45;
        uint64_t v47 = *(uint64_t **)(v44 + 16 * v46);
        if (v36 == v47) {
          goto LABEL_69;
        }
      }
      goto LABEL_73;
    }
LABEL_69:
    uint64_t v50 = *(void *)(v44 + 16 * v46 + 8);
    if (!v50)
    {
LABEL_73:
      unsigned int v54 = 0;
      goto LABEL_77;
    }
    if (v138)
    {
      int v52 = 16;
      uint64_t v51 = &v139;
    }
    else
    {
      uint64_t v51 = v139;
      int v52 = v140;
      if (!v140)
      {
        uint64_t v53 = 0;
        goto LABEL_94;
      }
    }
    int v55 = v52 - 1;
    LODWORD(v56) = (v52 - 1) & ((v50 >> 4) ^ (v50 >> 9));
    uint64_t v57 = &v51[2 * v56];
    uint64_t v58 = *v57;
    if (*v57 == v50)
    {
LABEL_76:
      unsigned int v54 = *((_DWORD *)v57 + 2);
LABEL_77:
      int v59 = *((_DWORD *)v135 + v54);
      unsigned int v60 = v54 + 1;
      if (v60 >= v136) {
        int v61 = &v143;
      }
      else {
        int v61 = (uint64_t *)((char *)v135 + 4 * v60);
      }
      for (int k = *(_DWORD *)v61; v59 != k; LODWORD(v118) = v118 + 1)
      {
        --k;
        if (v14 >= HIDWORD(v118)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v117 + v14) = v104[k];
        unsigned int v14 = v118 + 1;
      }
      goto LABEL_81;
    }
    int v63 = 1;
    while (v58 != -4096)
    {
      int v64 = v56 + v63++;
      uint64_t v56 = v64 & v55;
      uint64_t v58 = v51[2 * v56];
      if (v58 == v50)
      {
        uint64_t v57 = &v51[2 * v56];
        goto LABEL_76;
      }
    }
    if (v138)
    {
      uint64_t v51 = &v139;
      uint64_t v53 = 16;
    }
    else
    {
      uint64_t v51 = v139;
      uint64_t v53 = v140;
    }
LABEL_94:
    uint64_t v57 = &v51[2 * v53];
    goto LABEL_76;
  }
LABEL_95:
  int64_t v65 = v112;
  unsigned int v66 = &v112[2 * v114];
  if (v113)
  {
    if (v114)
    {
      uint64_t v67 = 16 * v114;
      uint64_t v68 = v112;
      while ((*v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v68 += 2;
        v67 -= 16;
        if (!v67) {
          goto LABEL_100;
        }
      }
    }
    else
    {
      uint64_t v68 = v112;
    }
  }
  else
  {
LABEL_100:
    uint64_t v68 = &v112[2 * v114];
  }
  int v69 = &v112[2 * v114];
  if (v68 == v69) {
    goto LABEL_183;
  }
  do
  {
    uint64_t v70 = *v68;
    uint64_t v71 = v68[1];
    if (*(void *)(*v68 + 8) == v71) {
      goto LABEL_123;
    }
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    uint64_t v111 = 0;
    unint64_t v106 = &unk_1F261CD58;
    unint64_t v107 = (llvm::MachineFunction *)v2;
    *((void *)&v108 + 1) = *(void *)(v2 + 40);
    *(void *)&long long v108 = (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 104))(*(void *)(v2 + 16));
    BOOL v116 = 0;
    if (!(void)v109) {
      goto LABEL_110;
    }
    int v86 = *(unsigned __int8 *)v109;
    if ((v86 - 4) > 0x1E)
    {
      if ((v86 - 3) >= 0xFFFFFFFE) {
        uint64_t v96 = v109;
      }
      else {
        uint64_t v96 = 0;
      }
      if ((v86 - 3) <= 0xFFFFFFFD)
      {
        if (v86 == 3) {
          *(void *)(v109 + 8) = 0;
        }
LABEL_110:
        unsigned int v72 = 0;
        *(void *)&long long v109 = 0;
        goto LABEL_111;
      }
      unint64_t v88 = v96 + 8;
    }
    else
    {
      if ((*(unsigned char *)(v109 + 1) & 0x7F) != 2 && !*(_DWORD *)(v109 + 12)) {
        goto LABEL_110;
      }
      uint64_t v87 = *(void *)(v109 + 16);
      if ((v87 & 4) == 0) {
        goto LABEL_110;
      }
      unint64_t v88 = v87 & 0xFFFFFFFFFFFFFFF8;
      if (!v88) {
        goto LABEL_110;
      }
    }
    v115[0] = &v109;
    sub_1CC5FA668(v88 + 16, v115);
    unsigned int v72 = v116;
    *(void *)&long long v109 = v116;
    if (v116)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v116, v116, (uint64_t)&v109);
      unsigned int v72 = (unsigned __int8 *)v109;
    }
LABEL_111:
    *((void *)&v109 + 1) = v70;
    long long v110 = (unint64_t)(v70 + 48);
    unsigned int v73 = v107;
    uint64_t v74 = *(void *)(v108 + 8);
    BOOL v116 = v72;
    if (v72) {
      llvm::MetadataTracking::track((uint64_t)&v116, v72, 2);
    }
    uint64_t v75 = llvm::MachineFunction::CreateMachineInstr(v73, v74 + 14544, &v116, 0);
    if (v116)
    {
      int v98 = *v116;
      if ((v98 - 4) > 0x1E)
      {
        if ((v98 - 3) >= 0xFFFFFFFE) {
          int v101 = v116;
        }
        else {
          int v101 = 0;
        }
        if ((v98 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v100 = (unint64_t)(v101 + 8);
LABEL_180:
          v115[0] = &v116;
          sub_1CC5FA668(v100 + 16, v115);
          goto LABEL_114;
        }
        if (v98 == 3) {
          *((void *)v116 + 1) = 0;
        }
      }
      else if ((v116[1] & 0x7F) == 2 || *((_DWORD *)v116 + 3))
      {
        uint64_t v99 = *((void *)v116 + 2);
        if ((v99 & 4) != 0)
        {
          unint64_t v100 = v99 & 0xFFFFFFFFFFFFFFF8;
          if (v100) {
            goto LABEL_180;
          }
        }
      }
    }
LABEL_114:
    uint64_t v76 = (unint64_t *)v110;
    uint64_t v77 = *(void *)(*((void *)&v109 + 1) + 40);
    *((void *)v75 + 3) = v77;
    uint64_t v78 = *(void *)(v77 + 32);
    uint64_t v79 = *((unsigned int *)v75 + 10);
    if (v79)
    {
      uint64_t v89 = *((void *)v75 + 4);
      uint64_t v90 = *(void *)(v78 + 40);
      uint64_t v91 = 32 * v79;
      do
      {
        if (!*(unsigned char *)v89)
        {
          uint64_t v92 = *(unsigned int *)(v89 + 4);
          if ((int)v92 >= 0) {
            unint64_t v93 = (uint64_t *)(*(void *)(v90 + 272) + 8 * v92);
          }
          else {
            unint64_t v93 = (uint64_t *)(*(void *)(v90 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
          }
          uint64_t v94 = *v93;
          if (*v93)
          {
            uint64_t v95 = *(void *)(v94 + 16);
            *(void *)(v94 + 16) = v89;
            *(void *)(v89 + 16) = v95;
            if (*(unsigned char *)(v89 + 3))
            {
              *(void *)(v89 + 24) = v94;
            }
            else
            {
              *(void *)(v89 + 24) = 0;
              unint64_t v93 = (uint64_t *)(v95 + 24);
            }
          }
          else
          {
            *(void *)(v89 + 16) = v89;
            *(void *)(v89 + 24) = 0;
          }
          uint64_t *v93 = v89;
        }
        v89 += 32;
        v91 -= 32;
      }
      while (v91);
    }
    uint64_t v80 = *(void *)(v78 + 728);
    if (v80) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v80 + 24))(v80, v75);
    }
    unint64_t v81 = *v76 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v75 = v81 | *(void *)v75 & 7;
    *((void *)v75 + 1) = v76;
    *(void *)(v81 + 8) = v75;
    *uint64_t v76 = *v76 & 7 | (unint64_t)v75;
    if (*((void *)&v110 + 1)) {
      (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v110 + 1) + 24))(*((void *)&v110 + 1), v75);
    }
    v115[1] = 0;
    v115[2] = v71;
    LODWORD(v115[0]) = 4;
    llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)v115);
    unint64_t v106 = &unk_1F261CD58;
    uint64_t v2 = v103;
    if ((void)v109)
    {
      int v82 = *(unsigned __int8 *)v109;
      if ((v82 - 4) > 0x1E)
      {
        if ((v82 - 3) >= 0xFFFFFFFE) {
          uint64_t v84 = v109;
        }
        else {
          uint64_t v84 = 0;
        }
        if ((v82 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v85 = v84 + 8;
LABEL_135:
          v115[0] = &v109;
          sub_1CC5FA668(v85 + 16, v115);
          goto LABEL_123;
        }
        if (v82 == 3) {
          *(void *)(v109 + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(v109 + 1) & 0x7F) == 2 || *(_DWORD *)(v109 + 12))
      {
        uint64_t v97 = *(void *)(v109 + 16);
        if ((v97 & 4) != 0)
        {
          unint64_t v85 = v97 & 0xFFFFFFFFFFFFFFF8;
          if (v85) {
            goto LABEL_135;
          }
        }
      }
    }
LABEL_123:
    uint64_t v83 = v68 + 2;
    uint64_t v68 = v66;
    if (v83 != v66)
    {
      uint64_t v68 = v83;
      while ((*v68 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v68 += 2;
        if (v68 == v66)
        {
          uint64_t v68 = v66;
          break;
        }
      }
    }
  }
  while (v68 != v69);
  int64_t v65 = v112;
LABEL_183:
  MEMORY[0x1D25D9CD0](v65, 8);
  if (v117 != v119) {
    free(v117);
  }
  if (v127 != &v128) {
    free(v127);
  }
  if (v125 != &v126) {
    free(v125);
  }
  if (v123 != &v124) {
    free(v123);
  }
  if (v121 != &v122) {
    free(v121);
  }
  if (v131 != v133) {
    free(v131);
  }
  sub_1CBBF3A28(v129);
  sub_1CBBF3AC0(&v142);
  sub_1CBBF3B40((uint64_t)v141);
  if ((v138 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v139, 8);
  }
  if (v135 != v137) {
    free(v135);
  }
  return 1;
}

void sub_1CBBF0ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v131[2] = *MEMORY[0x1E4F143B8];
  unsigned int v5 = *(_DWORD *)(a1 + 8);
  if (v5 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)a1 + 4 * v5) = 0;
  ++*(_DWORD *)(a1 + 8);
  uint64_t v6 = (void *)(a2 + 320);
  uint64_t v7 = *(void **)(a2 + 328);
  if (v7 != (void *)(a2 + 320))
  {
    int v8 = 0;
    uint64_t v9 = (unsigned char *)(a1 + 344);
    uint64_t v121 = (unint64_t *)(a1 + 864);
    uint64_t v122 = a1 + 352;
    while (1)
    {
      int v10 = *(_DWORD *)(a3 + 264);
      unsigned int v11 = v7 >> 4;
      if (!v10) {
        goto LABEL_25;
      }
      uint64_t v12 = *(void *)(a3 + 248);
      unsigned int v13 = v11 ^ (v7 >> 9);
      unsigned int v14 = v10 - 1;
      uint64_t v15 = (v10 - 1) & v13;
      int v16 = *(void **)(v12 + 16 * v15);
      if (v7 != v16) {
        break;
      }
LABEL_9:
      uint64_t v19 = *(void *)(v12 + 16 * v15 + 8);
      if (!v19) {
        goto LABEL_25;
      }
      if (!*(void *)v19 && **(void ***)(v19 + 32) == v7)
      {
        uint64_t v126 = v7;
        if (*v9)
        {
          int v20 = 16;
          uint64_t v21 = v122;
LABEL_15:
          int v22 = v20 - 1;
          uint64_t v23 = v22 & v13;
          uint64_t v24 = (void *)(v21 + 32 * v23);
          int v25 = (void *)*v24;
          if (v7 != (void *)*v24)
          {
            BOOL v26 = 0;
            int v27 = 1;
            while (v25 != (void *)-4096)
            {
              if (v26) {
                BOOL v28 = 0;
              }
              else {
                BOOL v28 = v25 == (void *)-8192;
              }
              if (v28) {
                BOOL v26 = v24;
              }
              int v29 = v23 + v27++;
              uint64_t v23 = v29 & v22;
              uint64_t v24 = (void *)(v21 + 32 * v23);
              int v25 = (void *)*v24;
              if (v7 == (void *)*v24) {
                goto LABEL_57;
              }
            }
            if (v26) {
              int v52 = v26;
            }
            else {
              int v52 = v24;
            }
            goto LABEL_56;
          }
        }
        else
        {
          int v20 = *(_DWORD *)(a1 + 360);
          if (v20)
          {
            uint64_t v21 = *(void *)(a1 + 352);
            goto LABEL_15;
          }
          int v52 = 0;
LABEL_56:
          uint64_t v24 = sub_1CBBF2060(a1 + 344, (uint64_t)&v126, &v126, v52);
          *uint64_t v24 = v126;
          v24[1] = v24 + 3;
          v24[2] = 0x200000000;
        }
LABEL_57:
        unint64_t v53 = *((unsigned int *)v24 + 4);
        if (v53 >= *((unsigned int *)v24 + 5)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(_DWORD *)(v24[1] + 4 * v53) = v8;
        ++*((_DWORD *)v24 + 4);
        uint64_t v126 = (void *)a1;
        char v43 = 16;
LABEL_44:
        LOBYTE(v127) = v43;
        uint64_t v128 = v7;
        uint64_t v129 = v131;
        uint64_t v130 = 0x200000000;
        uint64_t v44 = *(unsigned int *)(a1 + 872);
        unint64_t v45 = *(void *)(a1 + 864);
        if (v44 >= *(_DWORD *)(a1 + 876))
        {
          unint64_t v54 = v44 + 1;
          BOOL v55 = v45 + 48 * v44 > (unint64_t)&v126;
          if (v45 > (unint64_t)&v126 || !v55)
          {
            sub_1CBBF2794((uint64_t)v121, v54);
            unint64_t v45 = *v121;
            goto LABEL_45;
          }
          uint64_t v57 = (char *)&v126 - v45;
          sub_1CBBF2794((uint64_t)v121, v54);
          unint64_t v45 = *v121;
          uint64_t v46 = &v57[*v121];
        }
        else
        {
LABEL_45:
          uint64_t v46 = (char *)&v126;
        }
        uint64_t v47 = v45 + 48 * *(unsigned int *)(a1 + 872);
        long long v48 = *(_OWORD *)v46;
        *(void *)(v47 + 16) = *((void *)v46 + 2);
        *(_OWORD *)uint64_t v47 = v48;
        int v49 = (void *)(v47 + 40);
        *(void *)(v47 + 32) = 0x200000000;
        *(void *)(v47 + 24) = v47 + 40;
        uint64_t v50 = v47 + 24;
        uint64_t v51 = *((unsigned int *)v46 + 8);
        if (v51 && (char *)v50 != v46 + 24)
        {
          uint64_t v56 = (char *)*((void *)v46 + 3);
          if (v56 == v46 + 40)
          {
            if (v51 >= 3)
            {
              *(_DWORD *)(v50 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v49, v56, 4 * v51);
            *(_DWORD *)(v50 + 8) = v51;
          }
          else
          {
            if (v49 != (void *)(v50 + 16))
            {
              free(v49);
              uint64_t v56 = (char *)*((void *)v46 + 3);
              LODWORD(v51) = *((_DWORD *)v46 + 8);
            }
            *(void *)uint64_t v50 = v56;
            *(_DWORD *)(v50 + 8) = v51;
            *(_DWORD *)(v50 + 12) = *((_DWORD *)v46 + 9);
            *((void *)v46 + 3) = v46 + 40;
            *((_DWORD *)v46 + 9) = 0;
          }
          *((_DWORD *)v46 + 8) = 0;
        }
        ++*(_DWORD *)(a1 + 872);
        if (v129 != v131) {
          free(v129);
        }
        ++v8;
      }
      uint64_t v7 = (void *)v7[1];
      if (v7 == v6) {
        goto LABEL_77;
      }
    }
    int v17 = 1;
    while (v16 != (void *)-4096)
    {
      int v18 = v15 + v17++;
      uint64_t v15 = v18 & v14;
      int v16 = *(void **)(v12 + 16 * v15);
      if (v7 == v16) {
        goto LABEL_9;
      }
    }
LABEL_25:
    uint64_t v126 = v7;
    if (*v9)
    {
      int v30 = 16;
      uint64_t v31 = v122;
    }
    else
    {
      int v30 = *(_DWORD *)(a1 + 360);
      if (!v30)
      {
        uint64_t v41 = 0;
        goto LABEL_41;
      }
      uint64_t v31 = *(void *)(a1 + 352);
    }
    unsigned int v32 = v11 ^ (v7 >> 9);
    int v33 = v30 - 1;
    uint64_t v34 = (v30 - 1) & v32;
    char v35 = (void *)(v31 + 32 * v34);
    uint64_t v36 = *v35;
    if (v7 == (void *)*v35)
    {
LABEL_42:
      unint64_t v42 = *((unsigned int *)v35 + 4);
      if (v42 >= *((unsigned int *)v35 + 5)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(v35[1] + 4 * v42) = v8;
      ++*((_DWORD *)v35 + 4);
      uint64_t v126 = (void *)a1;
      char v43 = 1;
      goto LABEL_44;
    }
    unsigned int v37 = 0;
    int v38 = 1;
    while (v36 != -4096)
    {
      if (v37) {
        BOOL v39 = 0;
      }
      else {
        BOOL v39 = v36 == -8192;
      }
      if (v39) {
        unsigned int v37 = v35;
      }
      int v40 = v34 + v38++;
      uint64_t v34 = v40 & v33;
      char v35 = (void *)(v31 + 32 * v34);
      uint64_t v36 = *v35;
      if (v7 == (void *)*v35) {
        goto LABEL_42;
      }
    }
    if (v37) {
      uint64_t v41 = v37;
    }
    else {
      uint64_t v41 = v35;
    }
LABEL_41:
    char v35 = sub_1CBBF2060(a1 + 344, (uint64_t)&v126, &v126, v41);
    void *v35 = v126;
    v35[1] = v35 + 3;
    v35[2] = 0x200000000;
    goto LABEL_42;
  }
LABEL_77:
  uint64_t v126 = &v128;
  uint64_t v127 = 0x500000000;
  uint64_t v58 = *(char **)(a3 + 272);
  int v59 = *(char **)(a3 + 280);
  int v123 = v125;
  uint64_t v124 = 0x500000000;
  sub_1CBAACC38((uint64_t)&v123, v58, v59);
  if (v124)
  {
    LODWORD(v124) = v124 - 1;
    llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopLatches();
  }
  if (v123 != v125) {
    free(v123);
  }
  if (v126 != &v128) {
    free(v126);
  }
  uint64_t v120 = *(unsigned int *)(a1 + 8);
  if (v120)
  {
    unint64_t v60 = 0;
    int v61 = (unsigned int *)(a1 + 872);
    while (1)
    {
      uint64_t v62 = *(unsigned int *)(*(void *)a1 + 4 * v60);
      unint64_t v63 = v60 + 1;
      int v64 = (unsigned int *)(*(void *)a1 + 4 * (v60 + 1));
      if (v60 + 1 >= *(unsigned int *)(a1 + 8)) {
        int v64 = v61;
      }
      unsigned int v65 = *v64;
      int v123 = v125;
      uint64_t v124 = 0x800000000;
      if (v62 != v65) {
        break;
      }
LABEL_176:
      unint64_t v60 = v63;
      if (v63 == v120) {
        return;
      }
    }
    uint64_t v66 = 0xFFFFFFFFLL;
    uint64_t v67 = v62;
    while (1)
    {
      uint64_t v68 = v66;
      uint64_t v69 = *(void *)(a1 + 864);
      uint64_t v70 = v69 + 48 * v67;
      char v72 = *(unsigned char *)(v70 + 8);
      uint64_t v71 = v70 + 8;
      uint64_t v73 = v71 + 8;
      uint64_t v74 = *(void *)(v71 + 8);
      if ((v72 & 0x10) != 0)
      {
        int v101 = *(_DWORD *)(a3 + 264);
        if (v101)
        {
          uint64_t v102 = *(void *)(a3 + 248);
          int v103 = v101 - 1;
          unsigned int v104 = (v101 - 1) & ((v74 >> 4) ^ (v74 >> 9));
          uint64_t v105 = *(void *)(v102 + 16 * v104);
          if (v74 != v105)
          {
            int v106 = 1;
            do
            {
              if (v105 == -4096) {
                break;
              }
              unsigned int v107 = v104 + v106++;
              unsigned int v104 = v107 & v103;
              uint64_t v105 = *(void *)(v102 + 16 * v104);
            }
            while (v74 != v105);
          }
        }
        uint64_t v126 = &v128;
        uint64_t v127 = 0x500000000;
        llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getExitBlocks();
      }
      uint64_t v76 = *(uint64_t **)(v74 + 88);
      uint64_t v75 = *(uint64_t **)(v74 + 96);
      if (v76 != v75) {
        break;
      }
LABEL_138:
      unint64_t v108 = *(void *)(*(void *)v73 + 48) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)v73 + 48 != v108)
      {
        if (v108 && (*(unsigned char *)v108 & 4) != 0)
        {
          __int16 v109 = *(_WORD *)(v108 + 44);
        }
        else
        {
          while (1)
          {
            __int16 v109 = *(_WORD *)(v108 + 44);
            if ((v109 & 4) == 0) {
              break;
            }
            unint64_t v108 = *(void *)v108 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        int v110 = v109 & 0xC;
        int v111 = v109 & 4;
        uint64_t v112 = *(void *)(*(void *)(v108 + 16) + 8);
        if (v110) {
          BOOL v113 = v111 == 0;
        }
        else {
          BOOL v113 = 0;
        }
        if (v113)
        {
          uint64_t v66 = v67;
          if ((v112 & 0x20) != 0) {
            goto LABEL_153;
          }
          while ((*(_WORD *)(v108 + 44) & 8) != 0)
          {
            unint64_t v108 = *(void *)(v108 + 8);
            if ((*(unsigned char *)(*(void *)(v108 + 16) + 8) & 0x20) != 0)
            {
              uint64_t v66 = v67;
              goto LABEL_153;
            }
          }
        }
        else
        {
          uint64_t v66 = v67;
          if ((v112 & 0x20) != 0) {
            goto LABEL_153;
          }
        }
      }
      uint64_t v66 = v67;
      if ((*(unsigned char *)v71 & 8) == 0)
      {
        if (v124 >= (unint64_t)HIDWORD(v124)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v123 + v124) = v67;
        LODWORD(v124) = v124 + 1;
        goto LABEL_152;
      }
LABEL_153:
      uint64_t v67 = (v67 + 1);
      if (v67 == v65)
      {
        BOOL v114 = v66 != -1 || v124 == 0;
        int v115 = v123;
        if (v114) {
          unsigned int v116 = v66;
        }
        else {
          unsigned int v116 = v65 - 1;
        }
        if (v124)
        {
          uint64_t v117 = 4 * v124;
          do
          {
            if (v116 != *v115)
            {
              uint64_t v118 = *(void *)(a1 + 864) + 48 * *v115;
              unint64_t v119 = *(unsigned int *)(v118 + 32);
              if (v119 >= *(unsigned int *)(v118 + 36)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(*(void *)(v118 + 24) + 4 * v119) = v116;
              ++*(_DWORD *)(v118 + 32);
            }
            ++v115;
            v117 -= 4;
          }
          while (v117);
          int v115 = v123;
        }
        if (v115 != (_DWORD *)v125)
        {
          free(v115);
          int v61 = (unsigned int *)(a1 + 872);
        }
        goto LABEL_176;
      }
    }
    char v77 = 0;
    uint64_t v78 = v69 + 48 * v67;
LABEL_92:
    uint64_t v79 = (unsigned int *)(*(void *)a1 + 4 * v63);
    if (v63 >= *(unsigned int *)(a1 + 8)) {
      uint64_t v79 = v61;
    }
    unsigned int v80 = *v79;
    int v81 = *(_DWORD *)(a1 + 344);
    while (1)
    {
      uint64_t v82 = *v76;
      if (v81)
      {
        int v84 = 16;
        uint64_t v83 = a1 + 352;
      }
      else
      {
        uint64_t v83 = *(void *)(a1 + 352);
        int v84 = *(_DWORD *)(a1 + 360);
        if (!v84)
        {
          uint64_t v99 = 0;
          goto LABEL_122;
        }
      }
      int v85 = v84 - 1;
      int v86 = (uint64_t *)(v83 + 32 * ((v84 - 1) & ((v82 >> 4) ^ (v82 >> 9))));
      uint64_t v87 = *v86;
      if (*v86 == v82)
      {
LABEL_102:
        if ((v81 & 1) == 0) {
          goto LABEL_103;
        }
        goto LABEL_123;
      }
      int v88 = 1;
      LODWORD(v89) = v85 & ((v82 >> 4) ^ (v82 >> 9));
      while (v87 != -4096)
      {
        int v90 = v89 + v88++;
        uint64_t v89 = v90 & v85;
        uint64_t v87 = *(void *)(v83 + 32 * v89);
        if (v87 == v82)
        {
          int v86 = (uint64_t *)(v83 + 32 * v89);
          goto LABEL_102;
        }
      }
      if (v81)
      {
        uint64_t v83 = a1 + 352;
        uint64_t v99 = 16;
      }
      else
      {
        uint64_t v83 = *(void *)(a1 + 352);
        uint64_t v99 = *(unsigned int *)(a1 + 360);
      }
LABEL_122:
      int v86 = (uint64_t *)(v83 + 32 * v99);
      int v61 = (unsigned int *)(a1 + 872);
      if ((v81 & 1) == 0)
      {
LABEL_103:
        uint64_t v91 = *(void *)(a1 + 352);
        uint64_t v92 = *(unsigned int *)(a1 + 360);
        goto LABEL_104;
      }
LABEL_123:
      uint64_t v91 = a1 + 352;
      uint64_t v92 = 16;
LABEL_104:
      if ((uint64_t *)(v91 + 32 * v92) != v86)
      {
        uint64_t v93 = *((unsigned int *)v86 + 4);
        if (v93)
        {
          uint64_t v94 = (unsigned int *)v86[1];
          uint64_t v95 = 4 * v93;
          while (1)
          {
            unsigned int v96 = *v94;
            if (*v94 >= *(_DWORD *)(*(void *)a1 + 4 * v60) && v96 <= v80) {
              break;
            }
            ++v94;
            v95 -= 4;
            if (!v95) {
              goto LABEL_118;
            }
          }
          if (v96 < v65 && v96 > v62)
          {
            unint64_t v100 = *(unsigned int *)(v78 + 32);
            if (v100 >= *(unsigned int *)(v78 + 36)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)(v78 + 24) + 4 * v100) = v96;
            ++*(_DWORD *)(v78 + 32);
            ++v76;
            char v77 = 1;
            if (v76 != v75) {
              goto LABEL_92;
            }
LABEL_152:
            uint64_t v66 = v68;
            goto LABEL_153;
          }
        }
      }
LABEL_118:
      if (++v76 == v75)
      {
        if (v77) {
          goto LABEL_152;
        }
        goto LABEL_138;
      }
    }
  }
}

unint64_t sub_1CBBF1D90(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 40))
  {
    sub_1CBBF2EDC((uint64_t **)(a1 + 24), a2, a2);
    return ((unint64_t)v24 << 32) | 1;
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    unsigned int v5 = *a2;
    if (v4)
    {
      uint64_t v7 = 4 * v4;
      int v8 = *(_DWORD **)a1;
      while (*v8 != v5)
      {
        ++v8;
        v7 -= 4;
        if (!v7) {
          goto LABEL_9;
        }
      }
      if (v7) {
        return 1;
      }
LABEL_9:
      if (v4 <= 1) {
        goto LABEL_3;
      }
      uint64_t v9 = (void *)(a1 + 32);
      do
      {
        uint64_t v10 = *(void *)a1 + 4 * v4;
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = (void *)(a1 + 32);
        unsigned int v13 = (void *)(a1 + 32);
        if (v11)
        {
          unsigned int v14 = *(_DWORD *)(v10 - 4);
          do
          {
            while (1)
            {
              unsigned int v13 = (void *)v11;
              unsigned int v15 = *(_DWORD *)(v11 + 28);
              if (v14 >= v15) {
                break;
              }
              uint64_t v11 = *v13;
              uint64_t v12 = v13;
              if (!*v13) {
                goto LABEL_18;
              }
            }
            if (v15 >= v14) {
              goto LABEL_21;
            }
            uint64_t v11 = v13[1];
          }
          while (v11);
          uint64_t v12 = v13 + 1;
        }
LABEL_18:
        int v16 = operator new(0x20uLL);
        v16[7] = *(_DWORD *)(v10 - 4);
        *(void *)int v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v13;
        *uint64_t v12 = v16;
        uint64_t v17 = **(void **)(a1 + 24);
        if (v17)
        {
          *(void *)(a1 + 24) = v17;
          int v16 = (_DWORD *)*v12;
        }
        sub_1CB8358B8(*(uint64_t **)(a1 + 32), (uint64_t *)v16);
        ++*(void *)(a1 + 40);
        LODWORD(v4) = *(_DWORD *)(a1 + 8);
LABEL_21:
        LODWORD(v4) = v4 - 1;
        *(_DWORD *)(a1 + 8) = v4;
      }
      while (v4);
      int v18 = (_DWORD *)*v9;
      unsigned int v19 = *a2;
      int v20 = (void *)(a1 + 32);
      if (*v9)
      {
        do
        {
          while (1)
          {
            int v20 = v18;
            unsigned int v21 = v18[7];
            if (v19 >= v21) {
              break;
            }
            int v18 = (_DWORD *)*v20;
            uint64_t v9 = v20;
            if (!*v20) {
              goto LABEL_28;
            }
          }
          if (v21 >= v19) {
            return 0x100000001;
          }
          int v18 = (_DWORD *)v20[1];
        }
        while (v18);
        uint64_t v9 = v20 + 1;
      }
LABEL_28:
      int v22 = operator new(0x20uLL);
      v22[7] = v19;
      *(void *)int v22 = 0;
      *((void *)v22 + 1) = 0;
      *((void *)v22 + 2) = v20;
      *uint64_t v9 = v22;
      uint64_t v23 = **(void **)(a1 + 24);
      if (v23)
      {
        *(void *)(a1 + 24) = v23;
        int v22 = (_DWORD *)*v9;
      }
      sub_1CB8358B8(*(uint64_t **)(a1 + 32), (uint64_t *)v22);
      ++*(void *)(a1 + 40);
    }
    else
    {
LABEL_3:
      if (v4 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v4) = v5;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1CBBF1FB8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_16;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  uint64_t v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 32 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    uint64_t result = 1;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -8192;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      int v12 = v6 + v10++;
      uint64_t v6 = v12 & v5;
      uint64_t v7 = (void *)(v3 + 32 * v6);
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_13;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_16:
  *a3 = v7;
  return result;
}

void *sub_1CBBF2060(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CBBF21D8(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 16;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    uint64_t v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 32 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      int v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          int v16 = a4;
        }
        int v19 = v14 + v17++;
        uint64_t v14 = v19 & v13;
        a4 = (void *)(v11 + 32 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CBBF21D8(a1, v8);
      int v20 = 0;
      sub_1CBBF1FB8(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

void sub_1CBBF21D8(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  v18[64] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    int v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40) {
      unsigned int v2 = v6 + 1;
    }
    else {
      unsigned int v2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    int v16 = *(uint64_t **)(a1 + 8);
    uint64_t v17 = *(unsigned int *)(a1 + 16);
    if (v2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v2;
    }
    sub_1CBBF2454((int *)a1, v16, &v16[4 * v17]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v7 = 0;
  unsigned int v8 = v18;
  do
  {
    uint64_t v9 = a1 + v7;
    uint64_t v10 = *(void *)(a1 + v7 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v8[1] = (uint64_t)(v8 + 3);
      *unsigned int v8 = v10;
      v8[2] = 0x200000000;
      unsigned int v11 = *(_DWORD *)(v9 + 24);
      int v12 = *(void **)(v9 + 16);
      if (v11) {
        BOOL v13 = a1 + v7 + 8 == (void)v8;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        uint64_t v14 = a1 + v7;
        uint64_t v15 = a1 + v7 + 32;
        if ((void *)v15 == v12)
        {
          if (v11 >= 3) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v8 + 3, v12, 4 * *(unsigned int *)(v9 + 24));
          *((_DWORD *)v8 + 4) = v11;
          int v12 = *(void **)(v9 + 16);
        }
        else
        {
          v8[1] = (uint64_t)v12;
          *((_DWORD *)v8 + 4) = v11;
          *((_DWORD *)v8 + 5) = *(_DWORD *)(v14 + 28);
          *(void *)(v9 + 16) = v15;
          *(_DWORD *)(v14 + 28) = 0;
          int v12 = (void *)(a1 + v7 + 32);
        }
        *(_DWORD *)(v9 + 24) = 0;
      }
      v8 += 4;
      if ((void *)(a1 + v7 + 32) != v12) {
        free(v12);
      }
    }
    v7 += 32;
  }
  while (v7 != 512);
  if (v2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    *(void *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v2;
  }
  sub_1CBBF2454((int *)a1, v18, v8);
}

void sub_1CBBF2454(int *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *a1;
  *(void *)a1 = *a1 & 1;
  uint64_t v7 = a1 + 2;
  if (v6)
  {
    uint64_t v10 = a1 + 130;
    uint64_t v9 = a1 + 2;
  }
  else
  {
    uint64_t v8 = a1[4];
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = (void *)*((void *)a1 + 1);
    uint64_t v10 = &v9[4 * v8];
  }
  do
  {
    *uint64_t v9 = -4096;
    v9 += 4;
  }
  while (v9 != v10);
LABEL_5:
  if (a2 != a3)
  {
    do
    {
      uint64_t v11 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(unsigned char *)a1)
        {
          int v13 = 16;
          int v12 = v7;
        }
        else
        {
          int v12 = (int *)*((void *)a1 + 1);
          int v13 = a1[4];
        }
        int v14 = v13 - 1;
        uint64_t v15 = v14 & ((v11 >> 4) ^ (v11 >> 9));
        int v16 = (uint64_t *)&v12[8 * v15];
        uint64_t v17 = *v16;
        if (v11 != *v16)
        {
          BOOL v18 = 0;
          int v19 = 1;
          while (v17 != -4096)
          {
            if (v18) {
              BOOL v20 = 0;
            }
            else {
              BOOL v20 = v17 == -8192;
            }
            if (v20) {
              BOOL v18 = v16;
            }
            int v21 = v15 + v19++;
            uint64_t v15 = v21 & v14;
            int v16 = (uint64_t *)&v12[8 * v15];
            uint64_t v17 = *v16;
            if (v11 == *v16) {
              goto LABEL_21;
            }
          }
          if (v18) {
            int v16 = v18;
          }
        }
LABEL_21:
        *int v16 = v11;
        v16[1] = (uint64_t)(v16 + 3);
        void v16[2] = 0x200000000;
        unsigned int v22 = *((_DWORD *)v4 + 4);
        if (v16 != v4 && v22 != 0)
        {
          unsigned __int8 v24 = (uint64_t *)v4[1];
          if (v24 == v4 + 3)
          {
            if (v22 >= 3) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v16 + 3, v24, 4 * *((unsigned int *)v4 + 4));
            *((_DWORD *)v16 + 4) = v22;
          }
          else
          {
            v16[1] = (uint64_t)v24;
            int v26 = *((_DWORD *)v4 + 5);
            *((_DWORD *)v16 + 4) = v22;
            *((_DWORD *)v16 + 5) = v26;
            v4[1] = (uint64_t)(v4 + 3);
            *((_DWORD *)v4 + 5) = 0;
          }
          *((_DWORD *)v4 + 4) = 0;
        }
        *a1 += 2;
        int v25 = (uint64_t *)v4[1];
        if (v25 != v4 + 3) {
          free(v25);
        }
      }
      v4 += 4;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1CBBF2654(uint64_t a1, const void **a2)
{
  if ((const void **)a1 != a2)
  {
    unint64_t v4 = a2 + 2;
    uint64_t v3 = *a2;
    if (*a2 == a2 + 2)
    {
      int v6 = a2 + 1;
      uint64_t v5 = *((unsigned int *)a2 + 2);
      uint64_t v7 = *(unsigned int *)(a1 + 8);
      if (v7 >= v5)
      {
        if (v5) {
          memmove(*(void **)a1, *a2, 4 * v5);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v7)
        {
          uint64_t v13 = *(unsigned int *)(a1 + 8);
          int v14 = a2;
          memmove(*(void **)a1, v3, 4 * v7);
          uint64_t v8 = v13;
          a2 = v14;
        }
        else
        {
          uint64_t v8 = 0;
        }
        uint64_t v9 = *v6;
        if (v8 != v9) {
          memcpy((void *)(*(void *)a1 + 4 * v8), (char *)*a2 + 4 * v8, (unsigned char *)*a2 + 4 * v9 - ((unsigned char *)*a2 + 4 * v8));
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
    }
    else
    {
      uint64_t v11 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        int v12 = a2;
        free(v11);
        a2 = v12;
        uint64_t v3 = *v12;
      }
      *(void *)a1 = v3;
      int v6 = a2 + 1;
      *(void *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
    }
    *int v6 = 0;
  }
  return a1;
}

void sub_1CBBF2794(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  int v6 = malloc_type_malloc(48 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  uint64_t v7 = v6;
  sub_1CBBF2850((uint64_t *)a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CBBF2850(uint64_t *a1, uint64_t a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    uint64_t v3 = *a1 + 48 * v2;
    unint64_t v4 = (void *)(a2 + 24);
    uint64_t v5 = *a1 + 24;
    uint64_t v6 = 0x200000000;
    do
    {
      long long v7 = *(_OWORD *)(v5 - 24);
      *(v4 - 1) = *(void *)(v5 - 8);
      *(_OWORD *)(v4 - 3) = v7;
      *unint64_t v4 = v4 + 2;
      v4[1] = v6;
      if (*(_DWORD *)(v5 + 8))
      {
        int v16 = a1;
        uint64_t v18 = v5;
        uint64_t v13 = v3;
        int v14 = v4;
        uint64_t v15 = v6;
        sub_1CBBF2654((uint64_t)v4, (const void **)v5);
        uint64_t v6 = v15;
        uint64_t v3 = v13;
        unint64_t v4 = v14;
        a1 = v16;
        uint64_t v5 = v18;
      }
      uint64_t v8 = v5 - 24;
      v4 += 6;
      v5 += 48;
    }
    while (v8 + 48 != v3);
    uint64_t v9 = *((unsigned int *)a1 + 2);
    if (v9)
    {
      uint64_t v10 = *a1;
      uint64_t v11 = 48 * v9;
      do
      {
        int v12 = *(void **)(v10 + v11 - 24);
        if ((void *)(v10 + v11 - 8) != v12)
        {
          uint64_t v17 = v11;
          uint64_t v19 = v10;
          free(v12);
          uint64_t v11 = v17;
          uint64_t v10 = v19;
        }
        v11 -= 48;
      }
      while (v11);
    }
  }
}

void *sub_1CBBF2934(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v14 = 0;
LABEL_19:
      long long v7 = sub_1CBBF2AC0(a1, (uint64_t)a2, a2, v14);
      void *v7 = *a2;
      *((_DWORD *)v7 + 2) = -1;
      return v7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  long long v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 != *v7)
  {
    uint64_t v10 = 0;
    int v11 = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      long long v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        return v7;
      }
    }
    if (v10) {
      int v14 = v10;
    }
    else {
      int v14 = v7;
    }
    goto LABEL_19;
  }
  return v7;
}

uint64_t sub_1CBBF2A10(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 16;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      long long v7 = 0;
      uint64_t result = 0;
      goto LABEL_7;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  long long v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    uint64_t v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint64_t v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      long long v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_7;
      }
    }
    uint64_t result = 0;
    if (v10) {
      long long v7 = v10;
    }
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void *sub_1CBBF2AC0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1CBBF2C38(a1, 2 * v8);
    uint64_t v11 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v12 = 16;
    }
    else
    {
      int v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        int v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(a1 + 8);
    }
    int v9 = *(_DWORD *)a1 & 1;
    int v13 = v12 - 1;
    unsigned int v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (void *)(v11 + 16 * v14);
    uint64_t v15 = *a4;
    if (*a3 != *a4)
    {
      int v16 = 0;
      int v17 = 1;
      while (v15 != -4096)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -8192;
        }
        if (v18) {
          int v16 = a4;
        }
        unsigned int v19 = v14 + v17++;
        unsigned int v14 = v19 & v13;
        a4 = (void *)(v11 + 16 * v14);
        uint64_t v15 = *a4;
        if (*a3 == *a4) {
          goto LABEL_7;
        }
      }
      if (v16) {
        a4 = v16;
      }
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1CBBF2C38(a1, v8);
      BOOL v20 = 0;
      sub_1CBBF2A10(a1, a3, &v20);
      a4 = v20;
      int v6 = *(_DWORD *)a1;
    }
    int v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

int *sub_1CBBF2C38(uint64_t a1, unsigned int a2)
{
  v14[32] = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(uint64_t **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CBBF2DD0((int *)a1, v11, &v11[2 * v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t *v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 2;
    }
    v6 += 16;
  }
  while (v6 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBBF2DD0((int *)a1, v14, v7);
}

int *sub_1CBBF2DD0(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if (v3)
  {
    uint64_t v6 = result + 66;
    int v5 = result + 2;
  }
  else
  {
    uint64_t v4 = result[4];
    if (!v4) {
      goto LABEL_5;
    }
    int v5 = (void *)*((void *)result + 1);
    uint64_t v6 = &v5[2 * v4];
  }
  do
  {
    *int v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    uint64_t v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (*(unsigned char *)result)
      {
        int v9 = 16;
        uint64_t v8 = result + 2;
      }
      else
      {
        uint64_t v8 = (int *)*((void *)result + 1);
        int v9 = result[4];
      }
      int v10 = v9 - 1;
      unsigned int v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      uint64_t v12 = (uint64_t *)&v8[4 * v11];
      uint64_t v13 = *v12;
      if (v7 != *v12)
      {
        unsigned int v14 = 0;
        int v15 = 1;
        while (v13 != -4096)
        {
          if (v14) {
            BOOL v16 = 0;
          }
          else {
            BOOL v16 = v13 == -8192;
          }
          if (v16) {
            unsigned int v14 = v12;
          }
          unsigned int v17 = v11 + v15++;
          unsigned int v11 = v17 & v10;
          uint64_t v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          uint64_t v13 = *v12;
          if (v7 == *v12) {
            goto LABEL_11;
          }
        }
        if (v14) {
          uint64_t v12 = v14;
        }
      }
LABEL_11:
      *uint64_t v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t **sub_1CBBF2EDC(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    do
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= v7) {
        return v8;
      }
      int v5 = v8[1];
    }
    while (v5);
    uint64_t v6 = v8 + 1;
  }
  else
  {
    uint64_t v8 = a1 + 1;
  }
LABEL_8:
  int v10 = (uint64_t *)v8;
  uint64_t v8 = (uint64_t **)operator new(0x20uLL);
  *((_DWORD *)v8 + 7) = *a3;
  *uint64_t v8 = 0;
  v8[1] = 0;
  v8[2] = v10;
  *uint64_t v6 = (uint64_t *)v8;
  unsigned int v11 = (uint64_t *)**a1;
  uint64_t v12 = (uint64_t *)v8;
  if (v11)
  {
    *a1 = v11;
    uint64_t v12 = *v6;
  }
  sub_1CB8358B8(a1[1], v12);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

void sub_1CBBF2FC4(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  sub_1CBBF3318(a1, *(unsigned int *)(*(void *)(a1 + 2136) + 872));
  int v2 = *(_DWORD *)(*(void *)(a1 + 2136) + 872);
  uint64_t v3 = *(unsigned int *)(a1 + 2072);
  if ((*(_DWORD *)(a1 + 2128) & 0x3F) != 0)
  {
    uint64_t v30 = *(void *)(a1 + 2064) + 8 * v3;
    *(void *)(v30 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 2128) & 0x3F));
  }
  unsigned int v4 = v3;
  int v5 = (void *)(a1 + 2064);
  *(_DWORD *)(a1 + 2128) = v2;
  unsigned int v6 = v2 + 63;
  if (v3 != (v2 + 63) >> 6)
  {
    uint64_t v7 = v6 >> 6;
    if (v3 > v7)
    {
      *(_DWORD *)(a1 + 2072) = v7;
      unsigned int v4 = v6 >> 6;
    }
    else
    {
      if (v7 > *(_DWORD *)(a1 + 2076)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v7 != v3) {
        bzero((void *)(*v5 + 8 * v3), 8 * (v7 - v3));
      }
      unsigned int v4 = v7;
      *(_DWORD *)(a1 + 2072) = v7;
      int v2 = *(_DWORD *)(a1 + 2128);
    }
  }
  int v8 = v2 & 0x3F;
  if (v8) {
    *(void *)(*v5 + 8 * v4 - 8) &= ~(-1 << v8);
  }
  uint64_t v31 = *(unsigned int *)(*(void *)(a1 + 2136) + 8);
  if (v31)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(a1 + 2136);
      unsigned int v11 = *(_DWORD *)(*(void *)v10 + 4 * v9);
      unint64_t v12 = v9 + 1;
      uint64_t v13 = (unsigned int *)(*(void *)v10 + 4 * v12);
      if (v12 >= *(unsigned int *)(v10 + 8)) {
        uint64_t v13 = (unsigned int *)(v10 + 872);
      }
      unsigned int v14 = *v13;
      unint64_t v32 = v12;
      v33[0] = v34;
      v33[1] = (void *)0x2000000000;
      uint64_t v35 = -1;
      sub_1CBBF3544((unsigned int *)v33, v11, v14, v10);
      while (v11 != v14)
      {
        uint64_t v15 = v11;
        uint64_t v16 = *(void *)(*(void *)(a1 + 2136) + 864);
        unint64_t v17 = *(void *)a1 + ((unint64_t)v11 << 6);
        *(void *)unint64_t v17 = a1;
        *(_DWORD *)(v17 + 32) = v11;
        uint64_t v18 = v16 + 48 * v11;
        uint64_t v19 = *(unsigned int *)(v18 + 32);
        if (v19 >= 2)
        {
          uint64_t v20 = 0;
          int v21 = (void *)(v18 + 24);
          int v22 = *((_DWORD *)v33[0] + v11 - v35);
          unint64_t v23 = v17 + 40;
          do
          {
            for (unsigned int i = *(_DWORD *)(*v21 + 4 * v20); i != v22 && i != -1; unsigned int i = *((_DWORD *)v33[0] + i - v35))
            {
              unint64_t v26 = *(void *)a1 + ((unint64_t)i << 6);
              unint64_t v27 = *(unsigned int *)(v26 + 16);
              if (v27 >= *(unsigned int *)(v26 + 20)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v26 + 8) + 8 * v27) = v15 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v20 << 32);
              ++*(_DWORD *)(v26 + 16);
              unint64_t v28 = *(unsigned int *)(v23 + 8);
              if (v28 >= *(unsigned int *)(v23 + 12)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(_DWORD *)(*(void *)v23 + 4 * v28) = i;
              ++*(_DWORD *)(v23 + 8);
            }
            ++v20;
          }
          while (v20 != v19);
        }
        unsigned int v11 = v15 + 1;
      }
      if (v33[0] != v34) {
        free(v33[0]);
      }
      unint64_t v9 = v32;
    }
    while (v32 != v31);
  }
}

void sub_1CBBF3318(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      sub_1CD4254AC(a1, a2);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1CBBF33EC(a1, a2);
        unint64_t v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        uint64_t v5 = *(void *)a1;
        unint64_t v6 = v2 << 6;
        unint64_t v7 = a2 << 6;
        do
        {
          uint64_t v8 = v5 + v6;
          *(void *)(v8 + 8) = v5 + v6 + 24;
          *(void *)(v8 + 16) = 0x100000000;
          *(_DWORD *)(v8 + 32) = -1;
          *(void *)(v8 + 40) = v5 + v6 + 56;
          *(void *)(v8 + 48) = 0x200000000;
          v7 -= 64;
          v5 += 64;
        }
        while (v6 != v7);
      }
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
}

void sub_1CBBF33EC(uint64_t a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  unint64_t v6 = malloc_type_malloc(v5 << 6, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unint64_t v7 = v6;
  sub_1CBBF34A8(a1, (uint64_t)v6);
  if (*(void *)a1 != a1 + 16) {
    free(*(void **)a1);
  }
  *(void *)a1 = v7;
  *(_DWORD *)(a1 + 12) = v5;
}

void sub_1CBBF34A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = v2 << 6;
    do
    {
      uint64_t v6 = sub_1CD425530(a2, v4);
      v4 += 64;
      a2 = v6 + 64;
      v5 -= 64;
    }
    while (v5);
    uint64_t v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = v7 << 6;
      do
      {
        uint64_t v10 = v8 + v9;
        unsigned int v11 = *(void **)(v8 + v9 - 24);
        if ((void *)(v8 + v9 - 8) != v11) {
          free(v11);
        }
        unint64_t v12 = *(void **)(v10 - 56);
        if ((void *)(v10 - 40) != v12) {
          free(v12);
        }
        v9 -= 64;
      }
      while (v9);
    }
  }
}

void sub_1CBBF3544(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  v59[3] = *MEMORY[0x1E4F143B8];
  a1[36] = a2;
  a1[37] = a3;
  sub_1CBBF39AC(a1, a3 - a2);
  unsigned int v9 = a1[36];
  unsigned int v8 = a1[37];
  uint64_t v10 = v8 - v9;
  uint64_t v56 = (unsigned int *)v59;
  int v58 = 5;
  if (v10 >= 6)
  {
    int v57 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v8 != v9) {
    bzero(v59, 4 * v10);
  }
  int v57 = v10;
  unint64_t v53 = v55;
  uint64_t v54 = 0x500000000;
  uint64_t v11 = *(void *)(*(void *)(a4 + 864) + 48 * a2 + 24);
  int v49 = &v51;
  unsigned int v51 = a2;
  uint64_t v52 = v11;
  uint64_t v50 = 0x500000001;
  uint64_t v12 = (a3 + 63) >> 6;
  if (v12 >= 7) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((a3 + 63) >> 6) {
    bzero(v47, 8 * v12);
  }
  unsigned int v13 = 1;
  unsigned int v48 = a3;
  v47[a2 >> 6] |= 1 << a2;
  do
  {
    unsigned int v14 = (char *)v49;
    uint64_t v15 = (char *)v49 + 16 * v13;
    uint64_t v16 = (unsigned int *)*((void *)v15 - 1);
    uint64_t v17 = *(void *)(a4 + 864);
    uint64_t v18 = v17 + 48 * *((unsigned int *)v15 - 4);
    if (v16 == (unsigned int *)(*(void *)(v18 + 24) + 4 * *(unsigned int *)(v18 + 32)))
    {
      LODWORD(v50) = v13 - 1;
      v56[*((_DWORD *)v15 - 4) - a1[36]] = v54;
      if (v54 >= (unint64_t)HIDWORD(v54)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_DWORD *)v53 + v54) = *((_DWORD *)v15 - 4);
      LODWORD(v54) = v54 + 1;
      unsigned int v13 = v50;
    }
    else
    {
      unsigned int v20 = *v16;
      uint64_t v19 = *v16;
      *((void *)v15 - 1) = v16 + 1;
      uint64_t v21 = 1 << v20;
      unint64_t v22 = (unint64_t)v20 >> 6;
      uint64_t v23 = v47[v22];
      if (((1 << v20) & v23) == 0)
      {
        v47[v22] = v21 | v23;
        uint64_t v24 = *(void *)(v17 + 48 * v19 + 24);
        if (v13 >= HIDWORD(v50)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v25 = &v14[16 * v13];
        *(void *)int v25 = v19;
        *((void *)v25 + 1) = v24;
        unsigned int v13 = v50 + 1;
        LODWORD(v50) = v50 + 1;
      }
    }
  }
  while (v13);
  if (v49 != &v51) {
    free(v49);
  }
  unint64_t v26 = v53;
  uint64_t v27 = *(void *)a1;
  *(_DWORD *)(*(void *)a1 + 4 * (*(_DWORD *)v53 - a1[36])) = *(_DWORD *)v53;
  int v28 = a1[37] - a1[36];
  if (v28 != 1)
  {
    uint64_t v29 = *(void *)(a4 + 864);
    unsigned int v30 = 1;
    uint64_t v31 = v56;
    do
    {
      unsigned int v32 = v26[v30];
      uint64_t v33 = v29 + 48 * v32;
      int v34 = *(_DWORD *)(v33 + 32);
      if (v34)
      {
        unsigned int v35 = a1[36];
        uint64_t v36 = *(_DWORD **)(v33 + 24);
        unsigned int v37 = *v36 - v35;
        unint64_t v38 = v31[v37];
        if (v34 == 1)
        {
          unint64_t v39 = v31[v37];
        }
        else
        {
          uint64_t v42 = 1;
          unint64_t v39 = v38;
          do
          {
            unint64_t v43 = v31[v36[v42] - v35];
            if (*(_DWORD *)(v27 + 4 * (v26[v43] - v35)) != -1 && v38 != v43)
            {
              do
              {
                while (v43 > v38)
                {
                  int v46 = *(_DWORD *)(v27 + 4 * (v26[v43] - v35));
                  if (v46 == -1) {
LABEL_51:
                  }
                    llvm::report_fatal_error((llvm *)"Internal Compiler Error: Unhandled control flow", (const llvm::Twine *)1);
                  unint64_t v43 = v31[v46 - v35];
                }
                while (v38 > v43)
                {
                  int v45 = *(_DWORD *)(v27 + 4 * (v26[v38] - v35));
                  if (v45 == -1) {
                    goto LABEL_51;
                  }
                  unint64_t v38 = v31[v45 - v35];
                }
                unint64_t v39 = v43;
              }
              while (v38 != v43);
            }
            ++v42;
            unint64_t v38 = v39;
          }
          while (v34 != v42);
        }
        uint64_t v40 = v32 - v35;
        int v41 = v26[v39];
        if (*(_DWORD *)(v27 + 4 * v40) != v41) {
          *(_DWORD *)(v27 + 4 * v40) = v41;
        }
      }
      ++v30;
    }
    while (v30 != v28);
  }
  if (v26 != (_DWORD *)v55) {
    free(v26);
  }
  if (v56 != (unsigned int *)v59) {
    free(v56);
  }
}

unsigned int *sub_1CBBF39AC(unsigned int *result, unint64_t a2)
{
  unint64_t v2 = result[2];
  if (v2 != a2)
  {
    unsigned int v3 = a2;
    uint64_t v4 = result;
    if (v2 <= a2)
    {
      if (result[3] < a2) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (a2 != v2) {
        uint64_t result = (unsigned int *)memset((void *)(*(void *)result + 4 * v2), 255, 4 * (a2 - v2));
      }
    }
    v4[2] = v3;
  }
  return result;
}

char **sub_1CBBF3A28(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = v3 << 6;
    do
    {
      uint64_t v5 = &v2[v4];
      uint64_t v6 = *(char **)&v2[v4 - 24];
      if (&v2[v4 - 8] != v6) {
        free(v6);
      }
      uint64_t v7 = (char *)*((void *)v5 - 7);
      if (v5 - 40 != v7) {
        free(v7);
      }
      v4 -= 64;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

char **sub_1CBBF3AC0(char **a1)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *((unsigned int *)a1 + 2);
  if (v3)
  {
    uint64_t v4 = 48 * v3;
    do
    {
      uint64_t v5 = *(char **)&v2[v4 - 24];
      if (&v2[v4 - 8] != v5) {
        free(v5);
      }
      v4 -= 48;
    }
    while (v4);
    unint64_t v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2)) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CBBF3B40(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 8), 8);
  }
  return a1;
}

void sub_1CBBF3B7C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v1 = a1 + 8;
    uint64_t v2 = 16;
  }
  else
  {
    uint64_t v2 = *(unsigned int *)(a1 + 16);
    if (!v2) {
      return;
    }
    uint64_t v1 = *(void *)(a1 + 8);
  }
  uint64_t v3 = 32 * v2;
  uint64_t v4 = (void *)(v1 + 24);
  do
  {
    if ((*(v4 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v5 = (void *)*(v4 - 2);
      if (v4 != v5)
      {
        uint64_t v6 = v4;
        uint64_t v7 = v3;
        free(v5);
        uint64_t v4 = v6;
        uint64_t v3 = v7;
      }
    }
    v4 += 4;
    v3 -= 32;
  }
  while (v3);
}

uint64_t sub_1CBBF3BF8()
{
  *(void *)&long long v3 = "Layout the cfg early";
  *((void *)&v3 + 1) = 20;
  char v1 = 1;
  uint64_t v2 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCC1340, "run-agx3-early-block-placement", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1340, &dword_1CB82C000);
}

void sub_1CBBF3C7C()
{
}

void sub_1CBBF3D18()
{
}

void sub_1CBBF3DBC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  char v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  long long v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBBF3E70(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  long long v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBBF3F1C()
{
  return "AGX3 Late Pipeline SWWA Pass";
}

void sub_1CBBF3F2C(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBBF3FA0(uint64_t a1, void *a2)
{
  v427[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (unsigned char *)a2[2];
  int v421 = v423;
  uint64_t v422 = 0x300000000;
  int v405 = v2;
  char v396 = a2 + 40;
  if (v2[361]) {
    BOOL v3 = a2[40] == (void)(a2 + 40);
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && (*(_WORD *)(*a2 + 18) & 0x3FF0) == 0x6C0)
  {
    memset(&v424[16], 0, 56);
    *(void *)int v424 = &unk_1F261CD58;
    *(void *)&v424[8] = a2;
    *(void *)&v424[24] = a2[5];
    *(void *)&v424[16] = (*(uint64_t (**)(unsigned char *))(*(void *)v2 + 104))(v2);
    unsigned int v425 = 0;
    if (!*(void *)&v424[32])
    {
LABEL_7:
      uint64_t v5 = 0;
      *(void *)&v424[32] = 0;
      goto LABEL_8;
    }
    int v371 = **(unsigned char **)&v424[32];
    if ((v371 - 4) > 0x1E)
    {
      if ((v371 - 3) >= 0xFFFFFFFE) {
        uint64_t v383 = *(void *)&v424[32];
      }
      else {
        uint64_t v383 = 0;
      }
      if ((v371 - 3) <= 0xFFFFFFFD)
      {
        if (v371 == 3) {
          *(void *)(*(void *)&v424[32] + 8) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v373 = v383 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v424[32] + 12)) {
        goto LABEL_7;
      }
      uint64_t v372 = *(void *)(*(void *)&v424[32] + 16);
      if ((v372 & 4) == 0) {
        goto LABEL_7;
      }
      unint64_t v373 = v372 & 0xFFFFFFFFFFFFFFF8;
      if (!v373) {
        goto LABEL_7;
      }
    }
    uint64_t v416 = (unsigned __int8 **)&v424[32];
    sub_1CC5FA668(v373 + 16, &v416);
    uint64_t v5 = v425;
    *(void *)&v424[32] = v425;
    if (v425)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v425, v425, (uint64_t)&v424[32]);
      uint64_t v5 = *(unsigned __int8 **)&v424[32];
    }
LABEL_8:
    *(void *)&v424[48] = 0;
    *(void *)&v424[56] = 0;
    uint64_t v6 = *(void *)(a2[41] + 56);
    *(void *)&v424[40] = a2[41];
    *(void *)&v424[48] = v6;
    uint64_t v7 = *(llvm::MachineFunction **)&v424[8];
    uint64_t v8 = *(void *)(*(void *)&v424[16] + 8) + 298656;
    unsigned int v425 = v5;
    if (v5) {
      llvm::MetadataTracking::track((uint64_t)&v425, v5, 2);
    }
    unsigned int v9 = llvm::MachineFunction::CreateMachineInstr(v7, v8, &v425, 0);
    if (!v425)
    {
LABEL_11:
      uint64_t v10 = *(unint64_t **)&v424[48];
      uint64_t v11 = *(void *)(*(void *)&v424[40] + 40);
      *((void *)v9 + 3) = v11;
      uint64_t v12 = *(void *)(v11 + 32);
      uint64_t v13 = *((unsigned int *)v9 + 10);
      if (v13)
      {
        uint64_t v374 = *((void *)v9 + 4);
        uint64_t v375 = *(void *)(v12 + 40);
        uint64_t v376 = 32 * v13;
        do
        {
          if (!*(unsigned char *)v374)
          {
            uint64_t v377 = *(unsigned int *)(v374 + 4);
            if ((int)v377 >= 0) {
              unint64_t v378 = (uint64_t *)(*(void *)(v375 + 272) + 8 * v377);
            }
            else {
              unint64_t v378 = (uint64_t *)(*(void *)(v375 + 24) + 16 * (v377 & 0x7FFFFFFF) + 8);
            }
            uint64_t v379 = *v378;
            if (*v378)
            {
              uint64_t v380 = *(void *)(v379 + 16);
              *(void *)(v379 + 16) = v374;
              *(void *)(v374 + 16) = v380;
              if (*(unsigned char *)(v374 + 3))
              {
                *(void *)(v374 + 24) = v379;
              }
              else
              {
                *(void *)(v374 + 24) = 0;
                unint64_t v378 = (uint64_t *)(v380 + 24);
              }
            }
            else
            {
              *(void *)(v374 + 16) = v374;
              *(void *)(v374 + 24) = 0;
            }
            *unint64_t v378 = v374;
          }
          v374 += 32;
          v376 -= 32;
        }
        while (v376);
      }
      uint64_t v14 = *(void *)(v12 + 728);
      if (v14) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v14 + 24))(v14, v9);
      }
      unint64_t v15 = *v10 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unsigned int v9 = v15 | *(void *)v9 & 7;
      *((void *)v9 + 1) = v10;
      *(void *)(v15 + 8) = v9;
      *uint64_t v10 = *v10 & 7 | (unint64_t)v9;
      if (*(void *)&v424[56]) {
        (*(void (**)(void, llvm::MachineInstr *))(**(void **)&v424[56] + 24))(*(void *)&v424[56], v9);
      }
      LODWORD(v416) = 1;
      uint64_t v417 = 0;
      uint64_t v418 = 64;
      llvm::MachineInstr::addOperand(v9, v7, (const llvm::MachineOperand *)&v416);
      *(void *)int v424 = &unk_1F261CD58;
      uint64_t v16 = v405;
      if (!*(void *)&v424[32]) {
        goto LABEL_20;
      }
      int v17 = **(unsigned char **)&v424[32];
      if ((v17 - 4) > 0x1E)
      {
        if ((v17 - 3) >= 0xFFFFFFFE) {
          uint64_t v356 = *(void *)&v424[32];
        }
        else {
          uint64_t v356 = 0;
        }
        if ((v17 - 3) < 0xFFFFFFFE)
        {
          if (v17 == 3) {
            *(void *)(*(void *)&v424[32] + 8) = 0;
          }
          goto LABEL_20;
        }
        unint64_t v357 = v356 + 8;
      }
      else
      {
        if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v424[32] + 12)) {
          goto LABEL_20;
        }
        uint64_t v385 = *(void *)(*(void *)&v424[32] + 16);
        if ((v385 & 4) == 0) {
          goto LABEL_20;
        }
        unint64_t v357 = v385 & 0xFFFFFFFFFFFFFFF8;
        if (!v357) {
          goto LABEL_20;
        }
      }
      uint64_t v416 = (unsigned __int8 **)&v424[32];
      sub_1CC5FA668(v357 + 16, &v416);
LABEL_20:
      int v18 = 1;
      goto LABEL_22;
    }
    int v389 = *v425;
    if ((v389 - 4) > 0x1E)
    {
      if ((v389 - 3) >= 0xFFFFFFFE) {
        uint64_t v393 = v425;
      }
      else {
        uint64_t v393 = 0;
      }
      if ((v389 - 3) < 0xFFFFFFFE)
      {
        if (v389 == 3) {
          *((void *)v425 + 1) = 0;
        }
        goto LABEL_11;
      }
      unint64_t v391 = (unint64_t)(v393 + 8);
    }
    else
    {
      if ((v425[1] & 0x7F) != 2 && !*((_DWORD *)v425 + 3)) {
        goto LABEL_11;
      }
      uint64_t v390 = *((void *)v425 + 2);
      if ((v390 & 4) == 0) {
        goto LABEL_11;
      }
      unint64_t v391 = v390 & 0xFFFFFFFFFFFFFFF8;
      if (!v391) {
        goto LABEL_11;
      }
    }
    uint64_t v416 = &v425;
    sub_1CC5FA668(v391 + 16, &v416);
    goto LABEL_11;
  }
  int v18 = 0;
  uint64_t v16 = v2;
LABEL_22:
  uint64_t v19 = (void *)a2[41];
  if (v19 != v396)
  {
    while (1)
    {
      unsigned int v20 = v19 + 6;
      int v395 = v19;
      uint64_t v21 = v19[7];
      int v402 = v19 + 6;
      if ((void *)v21 != v19 + 6) {
        break;
      }
LABEL_480:
      uint64_t v19 = (void *)v395[1];
      if (v19 == v396) {
        goto LABEL_481;
      }
    }
    while (**(unsigned __int16 **)(v21 + 16) - 13 < 5)
    {
LABEL_97:
      if ((*(unsigned char *)v21 & 4) == 0)
      {
        while ((*(_WORD *)(v21 + 44) & 8) != 0)
          uint64_t v21 = *(void *)(v21 + 8);
      }
      uint64_t v21 = *(void *)(v21 + 8);
      if ((void *)v21 == v20) {
        goto LABEL_480;
      }
    }
    unsigned int v22 = v422;
    if (v422 == 3)
    {
      *(_OWORD *)int v421 = *(_OWORD *)((char *)v421 + 8);
      unsigned int v22 = v422 - 1;
      LODWORD(v422) = v422 - 1;
    }
    if (v22 >= HIDWORD(v422)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((void *)v421 + v22) = v21;
    LODWORD(v422) = v422 + 1;
    if (!sub_1CBC2F45C(v21))
    {
      LODWORD(v27) = 0;
LABEL_48:
      int v41 = sub_1CBBF72E4((uint64_t)v16, &v421);
      if (!v16[373]
        || (int v42 = **(unsigned __int16 **)(v21 + 16), v43 = sub_1CBE52E8C(v42), (v43 & 0xFF00000000) == 0)
        || (v43 != 151 ? (BOOL v44 = v43 == 3) : (BOOL v44 = 1),
            !v44
         || ((uint64_t v45 = *(void *)(*(void *)(v21 + 32) + 32 * sub_1CBDA6464(v42, 0x2Fu) + 16),
              uint64_t v46 = v45 & 0xB00,
              uint64_t v47 = v45 & 0x480,
              v46)
           ? (BOOL v48 = v47 == 0)
           : (BOOL v48 = 0),
             !v48)))
      {
        int v49 = 0;
        goto LABEL_60;
      }
      uint64_t v110 = *(void *)(v21 + 24);
      memset(&v424[8], 0, 64);
      uint64_t v111 = *(void *)(v110 + 32);
      *(void *)int v424 = &unk_1F261CD58;
      *(void *)&v424[8] = v111;
      *(void *)&v424[24] = *(void *)(v111 + 40);
      *(void *)&v424[16] = (*(uint64_t (**)(void))(**(void **)(v111 + 16) + 104))(*(void *)(v111 + 16));
      unsigned int v425 = 0;
      if (!*(void *)&v424[32])
      {
        uint64_t v112 = 0;
        *(void *)&v424[32] = 0;
        goto LABEL_130;
      }
      int v169 = **(unsigned char **)&v424[32];
      if ((v169 - 4) > 0x1E)
      {
        if ((v169 - 3) >= 0xFFFFFFFE) {
          uint64_t v200 = *(void *)&v424[32];
        }
        else {
          uint64_t v200 = 0;
        }
        if ((v169 - 3) > 0xFFFFFFFD)
        {
          unint64_t v201 = v200 + 8;
          goto LABEL_335;
        }
        if (v169 == 3) {
          *(void *)(*(void *)&v424[32] + 8) = 0;
        }
      }
      else if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v424[32] + 12))
      {
        uint64_t v219 = *(void *)(*(void *)&v424[32] + 16);
        if ((v219 & 4) != 0)
        {
          unint64_t v201 = v219 & 0xFFFFFFFFFFFFFFF8;
          if (v201)
          {
LABEL_335:
            uint64_t v416 = (unsigned __int8 **)&v424[32];
            sub_1CC5FA668(v201 + 16, &v416);
            uint64_t v112 = v425;
            *(void *)&v424[32] = v425;
            if (v425)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v425, v425, (uint64_t)&v424[32]);
              uint64_t v112 = *(unsigned __int8 **)&v424[32];
            }
LABEL_130:
            *(void *)&v424[48] = v21;
            *(void *)&v424[56] = 0;
            *(void *)&v424[40] = *(void *)(v21 + 24);
            *(void *)&v424[48] = v21;
            if ((unsigned char *)(v21 + 56) == &v424[32]) {
              goto LABEL_134;
            }
            if (!v112)
            {
LABEL_132:
              *(void *)&v424[32] = *(void *)(v21 + 56);
              uint64_t v112 = *(unsigned __int8 **)&v424[32];
              if (*(void *)&v424[32])
              {
                llvm::MetadataTracking::track((uint64_t)&v424[32], *(unsigned __int8 **)&v424[32], 2);
                uint64_t v112 = *(unsigned __int8 **)&v424[32];
              }
LABEL_134:
              uint64_t v113 = *(void *)(v21 + 8);
              *(void *)&v424[40] = *(void *)(v21 + 24);
              *(void *)&v424[48] = v113;
              BOOL v114 = *(llvm::MachineFunction **)&v424[8];
              uint64_t v115 = *(void *)(*(void *)&v424[16] + 8);
              unsigned int v425 = v112;
              if (v112) {
                llvm::MetadataTracking::track((uint64_t)&v425, v112, 2);
              }
              unsigned int v116 = llvm::MachineFunction::CreateMachineInstr(v114, v115 + 445536, &v425, 0);
              if (!v425)
              {
LABEL_137:
                uint64_t v117 = *(unint64_t **)&v424[48];
                uint64_t v118 = *(void *)(*(void *)&v424[40] + 40);
                *((void *)v116 + 3) = v118;
                uint64_t v119 = *(void *)(v118 + 32);
                uint64_t v120 = *((unsigned int *)v116 + 10);
                if (v120)
                {
                  uint64_t v185 = *((void *)v116 + 4);
                  uint64_t v186 = *(void *)(v119 + 40);
                  uint64_t v187 = 32 * v120;
                  do
                  {
                    if (!*(unsigned char *)v185)
                    {
                      uint64_t v188 = *(unsigned int *)(v185 + 4);
                      if ((int)v188 >= 0) {
                        uint64_t v189 = (uint64_t *)(*(void *)(v186 + 272) + 8 * v188);
                      }
                      else {
                        uint64_t v189 = (uint64_t *)(*(void *)(v186 + 24) + 16 * (v188 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v190 = *v189;
                      if (*v189)
                      {
                        uint64_t v191 = *(void *)(v190 + 16);
                        *(void *)(v190 + 16) = v185;
                        *(void *)(v185 + 16) = v191;
                        if (*(unsigned char *)(v185 + 3))
                        {
                          *(void *)(v185 + 24) = v190;
                        }
                        else
                        {
                          *(void *)(v185 + 24) = 0;
                          uint64_t v189 = (uint64_t *)(v191 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v185 + 16) = v185;
                        *(void *)(v185 + 24) = 0;
                      }
                      *uint64_t v189 = v185;
                    }
                    v185 += 32;
                    v187 -= 32;
                  }
                  while (v187);
                }
                uint64_t v121 = *(void *)(v119 + 728);
                if (v121) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v121 + 24))(v121, v116);
                }
                unint64_t v122 = *v117 & 0xFFFFFFFFFFFFFFF8;
                *(void *)unsigned int v116 = v122 | *(void *)v116 & 7;
                *((void *)v116 + 1) = v117;
                *(void *)(v122 + 8) = v116;
                *uint64_t v117 = *v117 & 7 | (unint64_t)v116;
                if (*(void *)&v424[56]) {
                  (*(void (**)(void, llvm::MachineInstr *))(**(void **)&v424[56] + 24))(*(void *)&v424[56], v116);
                }
                LODWORD(v416) = 1;
                uint64_t v417 = 0;
                uint64_t v418 = 0;
                llvm::MachineInstr::addOperand(v116, v114, (const llvm::MachineOperand *)&v416);
                LODWORD(v416) = 1;
                uint64_t v417 = 0;
                uint64_t v418 = 0;
                llvm::MachineInstr::addOperand(v116, v114, (const llvm::MachineOperand *)&v416);
                *(void *)int v424 = &unk_1F261CD58;
                uint64_t v16 = v405;
                if (!*(void *)&v424[32]) {
                  goto LABEL_146;
                }
                int v123 = **(unsigned char **)&v424[32];
                if ((v123 - 4) > 0x1E)
                {
                  if ((v123 - 3) >= 0xFFFFFFFE) {
                    uint64_t v155 = *(void *)&v424[32];
                  }
                  else {
                    uint64_t v155 = 0;
                  }
                  if ((v123 - 3) < 0xFFFFFFFE)
                  {
                    if (v123 == 3) {
                      *(void *)(*(void *)&v424[32] + 8) = 0;
                    }
                    goto LABEL_146;
                  }
                  unint64_t v156 = v155 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v424[32] + 12)) {
                    goto LABEL_146;
                  }
                  uint64_t v216 = *(void *)(*(void *)&v424[32] + 16);
                  if ((v216 & 4) == 0) {
                    goto LABEL_146;
                  }
                  unint64_t v156 = v216 & 0xFFFFFFFFFFFFFFF8;
                  if (!v156) {
                    goto LABEL_146;
                  }
                }
                uint64_t v416 = (unsigned __int8 **)&v424[32];
                sub_1CC5FA668(v156 + 16, &v416);
LABEL_146:
                int v49 = 1;
LABEL_60:
                if (!v16[376]) {
                  goto LABEL_67;
                }
                uint64_t v50 = **(unsigned __int16 **)(v21 + 16);
                uint64_t v51 = sub_1CBE52E8C(v50);
                if ((v51 & 0xFF00000000) == 0 || v51 != 44 && v51 != 38) {
                  goto LABEL_67;
                }
                int v52 = 0;
                if (sub_1CBDB2780(v50, 16, 0) != 22
                  || (uint64_t v53 = (*(uint64_t (**)(unsigned char *))(*(void *)v16 + 176))(v16),
                      int v52 = 0,
                      sub_1CBC2D2EC(v21, 0, (void *)(v53 + 8)) == 2))
                {
LABEL_68:
                  if (!v16[377]) {
                    goto LABEL_71;
                  }
                  uint64_t v54 = *(unsigned __int16 **)(v21 + 16);
                  if ((v54[10] & 4) == 0
                    || (int v55 = *v54,
                        unsigned int v56 = sub_1CBDA6464(v55, 0x2Eu),
                        uint64_t v57 = *(void *)(v21 + 32),
                        uint64_t v58 = v57 + 32 * v56,
                        uint64_t v61 = *(void *)(v58 + 16),
                        int v59 = (unint64_t *)(v58 + 16),
                        uint64_t v60 = v61,
                        (v61 & 0x40) == 0))
                  {
LABEL_71:
                    int v62 = 0;
                    goto LABEL_72;
                  }
                  int v407 = v52;
                  int v410 = v41;
                  int v412 = v49;
                  int v85 = v27;
                  uint64_t v86 = v21;
                  if ((*(unsigned char *)v21 & 4) == 0)
                  {
                    uint64_t v86 = v21;
                    if ((*(_WORD *)(v21 + 44) & 8) != 0)
                    {
                      uint64_t v86 = v21;
                      do
                        uint64_t v86 = *(void *)(v86 + 8);
                      while ((*(_WORD *)(v86 + 44) & 8) != 0);
                    }
                  }
                  uint64_t v87 = *(void *)(v86 + 8);
                  uint64_t v88 = *(void *)(v21 + 24);
                  if (v55 == 548)
                  {
                    BOOL v89 = *(void *)(v57 + 80) != 1 || v87 == v88 + 48;
                    if (!v89 && **(_WORD **)(v87 + 16) == 544 && *(void *)(*(void *)(v87 + 32) + 48) == 1)
                    {
                      int v62 = 0;
                      int v41 = v410;
                      int v49 = v412;
                      int v52 = v407;
                      goto LABEL_72;
                    }
                  }
                  *int v59 = v60 & 0xFFFFFFFFFFFFFFBFLL;
                  uint64_t v90 = (*(uint64_t (**)(unsigned char *))(*(void *)v16 + 104))(v16);
                  uint64_t v91 = *(void *)(v90 + 8);
                  uint64_t v92 = *(llvm::MachineFunction **)(v88 + 32);
                  uint64_t v93 = *(unsigned __int8 **)(v21 + 56);
                  uint64_t v416 = (unsigned __int8 **)v93;
                  if (v93) {
                    llvm::MetadataTracking::track((uint64_t)&v416, v93, 2);
                  }
                  MachineInstr = llvm::MachineFunction::CreateMachineInstr(v92, v91 + 26304, (unsigned __int8 **)&v416, 0);
                  if (!v416)
                  {
LABEL_118:
                    uint64_t v95 = *(void *)(v88 + 40);
                    *((void *)MachineInstr + 3) = v95;
                    uint64_t v96 = *(void *)(v95 + 32);
                    uint64_t v97 = *((unsigned int *)MachineInstr + 10);
                    if (v97)
                    {
                      uint64_t v170 = *((void *)MachineInstr + 4);
                      uint64_t v171 = *(void *)(v96 + 40);
                      uint64_t v172 = 32 * v97;
                      do
                      {
                        if (!*(unsigned char *)v170)
                        {
                          uint64_t v173 = *(unsigned int *)(v170 + 4);
                          if ((int)v173 >= 0) {
                            uint64_t v174 = (uint64_t *)(*(void *)(v171 + 272) + 8 * v173);
                          }
                          else {
                            uint64_t v174 = (uint64_t *)(*(void *)(v171 + 24) + 16 * (v173 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v175 = *v174;
                          if (*v174)
                          {
                            uint64_t v176 = *(void *)(v175 + 16);
                            *(void *)(v175 + 16) = v170;
                            *(void *)(v170 + 16) = v176;
                            if (*(unsigned char *)(v170 + 3))
                            {
                              *(void *)(v170 + 24) = v175;
                            }
                            else
                            {
                              *(void *)(v170 + 24) = 0;
                              uint64_t v174 = (uint64_t *)(v176 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v170 + 16) = v170;
                            *(void *)(v170 + 24) = 0;
                          }
                          *uint64_t v174 = v170;
                        }
                        v170 += 32;
                        v172 -= 32;
                      }
                      while (v172);
                    }
                    uint64_t v98 = *(void *)(v96 + 728);
                    if (v98) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v98 + 24))(v98, MachineInstr);
                    }
                    unint64_t v99 = *(void *)v87 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)MachineInstr = v99 | *(void *)MachineInstr & 7;
                    *((void *)MachineInstr + 1) = v87;
                    *(void *)(v99 + 8) = MachineInstr;
                    *(void *)uint64_t v87 = *(void *)v87 & 7 | (unint64_t)MachineInstr;
                    *(_DWORD *)int v424 = 1;
                    *(void *)&v424[8] = 0;
                    *(void *)&v424[16] = 64;
                    llvm::MachineInstr::addOperand(MachineInstr, v92, (const llvm::MachineOperand *)v424);
                    *(_OWORD *)int v424 = 0x100000000uLL;
                    *(void *)&v424[16] = 0;
                    *(void *)&v424[24] = 0;
                    llvm::MachineInstr::addOperand(MachineInstr, v92, (const llvm::MachineOperand *)v424);
                    *(_DWORD *)int v424 = 1;
                    *(void *)&v424[8] = 0;
                    *(void *)&v424[16] = 1;
                    llvm::MachineInstr::addOperand(MachineInstr, v92, (const llvm::MachineOperand *)v424);
                    uint64_t v100 = *(void *)(v90 + 8);
                    int v101 = *(llvm::MachineFunction **)(v88 + 32);
                    uint64_t v102 = *(unsigned __int8 **)(v21 + 56);
                    uint64_t v416 = (unsigned __int8 **)v102;
                    if (v102) {
                      llvm::MetadataTracking::track((uint64_t)&v416, v102, 2);
                    }
                    int v103 = llvm::MachineFunction::CreateMachineInstr(v101, v100 + 26112, (unsigned __int8 **)&v416, 0);
                    unsigned int v20 = v402;
                    if (!v416) {
                      goto LABEL_124;
                    }
                    int v229 = *(unsigned __int8 *)v416;
                    if ((v229 - 4) > 0x1E)
                    {
                      if ((v229 - 3) >= 0xFFFFFFFE) {
                        uint64_t v238 = (unsigned __int8 *)v416;
                      }
                      else {
                        uint64_t v238 = 0;
                      }
                      if ((v229 - 3) < 0xFFFFFFFE)
                      {
                        unsigned int v20 = v402;
                        if (v229 == 3) {
                          v416[1] = 0;
                        }
                        goto LABEL_124;
                      }
                      unint64_t v231 = (unint64_t)(v238 + 8);
                    }
                    else
                    {
                      unsigned int v20 = v402;
                      if ((*((unsigned char *)v416 + 1) & 0x7F) != 2 && !*((_DWORD *)v416 + 3)) {
                        goto LABEL_124;
                      }
                      unint64_t v230 = (unint64_t)v416[2];
                      if ((v230 & 4) == 0) {
                        goto LABEL_124;
                      }
                      unint64_t v231 = v230 & 0xFFFFFFFFFFFFFFF8;
                      if (!v231) {
                        goto LABEL_124;
                      }
                    }
                    *(void *)int v424 = &v416;
                    sub_1CC5FA668(v231 + 16, v424);
                    unsigned int v20 = v402;
LABEL_124:
                    uint64_t v104 = *(void *)(v88 + 40);
                    *((void *)v103 + 3) = v104;
                    uint64_t v105 = *(void *)(v104 + 32);
                    uint64_t v106 = *((unsigned int *)v103 + 10);
                    LODWORD(v27) = v85;
                    int v52 = v407;
                    int v41 = v410;
                    if (v106)
                    {
                      uint64_t v177 = *((void *)v103 + 4);
                      uint64_t v178 = *(void *)(v105 + 40);
                      uint64_t v179 = 32 * v106;
                      do
                      {
                        if (!*(unsigned char *)v177)
                        {
                          uint64_t v180 = *(unsigned int *)(v177 + 4);
                          if ((int)v180 >= 0) {
                            uint64_t v181 = (uint64_t *)(*(void *)(v178 + 272) + 8 * v180);
                          }
                          else {
                            uint64_t v181 = (uint64_t *)(*(void *)(v178 + 24) + 16 * (v180 & 0x7FFFFFFF) + 8);
                          }
                          uint64_t v182 = *v181;
                          if (*v181)
                          {
                            uint64_t v183 = *(void *)(v182 + 16);
                            *(void *)(v182 + 16) = v177;
                            *(void *)(v177 + 16) = v183;
                            if (*(unsigned char *)(v177 + 3))
                            {
                              *(void *)(v177 + 24) = v182;
                            }
                            else
                            {
                              *(void *)(v177 + 24) = 0;
                              uint64_t v181 = (uint64_t *)(v183 + 24);
                            }
                          }
                          else
                          {
                            *(void *)(v177 + 16) = v177;
                            *(void *)(v177 + 24) = 0;
                          }
                          uint64_t *v181 = v177;
                        }
                        v177 += 32;
                        v179 -= 32;
                      }
                      while (v179);
                    }
                    uint64_t v107 = *(void *)(v105 + 728);
                    if (v107) {
                      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v107 + 24))(v107, v103);
                    }
                    unint64_t v108 = *(void *)v87 & 0xFFFFFFFFFFFFFFF8;
                    *(void *)int v103 = v108 | *(void *)v103 & 7;
                    *((void *)v103 + 1) = v87;
                    *(void *)(v108 + 8) = v103;
                    *(void *)uint64_t v87 = *(void *)v87 & 7 | (unint64_t)v103;
                    *(_DWORD *)int v424 = 1;
                    *(void *)&v424[8] = 0;
                    *(void *)&v424[16] = 0;
                    llvm::MachineInstr::addOperand(v103, v101, (const llvm::MachineOperand *)v424);
                    *(_DWORD *)int v424 = 1;
                    *(void *)&v424[8] = 0;
                    *(void *)&v424[16] = 1;
                    __int16 v109 = v101;
                    int v62 = 1;
                    llvm::MachineInstr::addOperand(v103, v109, (const llvm::MachineOperand *)v424);
                    uint64_t v16 = v405;
                    int v49 = v412;
LABEL_72:
                    BOOL v63 = sub_1CBC2FA44(v21);
                    if (!v63)
                    {
LABEL_96:
                      v18 |= v27 | v41 | v49 | v52 | v62 | v63;
                      goto LABEL_97;
                    }
                    BOOL v397 = v63;
                    int v398 = v62;
                    int v400 = v18;
                    int v64 = **(unsigned __int16 **)(v21 + 16);
                    uint64_t v65 = sub_1CBE52E8C(v64);
                    if ((v65 & 0xFF00000000) == 0) {
                      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
                    }
                    if ((v65 & 0xFFFFFFFE) == 0x24) {
                      unsigned int v66 = 25;
                    }
                    else {
                      unsigned int v66 = 4;
                    }
                    unsigned int v67 = sub_1CBDA6464(v64, v66);
                    uint64_t v68 = *(void *)(v21 + 24);
                    uint64_t v69 = *(void *)(v21 + 32);
                    memset(&v424[8], 0, 64);
                    uint64_t v70 = *(void *)(v68 + 32);
                    *(void *)int v424 = &unk_1F261CD58;
                    *(void *)&v424[8] = v70;
                    *(void *)&v424[24] = *(void *)(v70 + 40);
                    *(void *)&v424[16] = (*(uint64_t (**)(void))(**(void **)(v70 + 16) + 104))(*(void *)(v70 + 16));
                    unsigned int v425 = 0;
                    if (!*(void *)&v424[32]) {
                      goto LABEL_78;
                    }
                    int v128 = **(unsigned char **)&v424[32];
                    if ((v128 - 4) > 0x1E)
                    {
                      if ((v128 - 3) >= 0xFFFFFFFE) {
                        uint64_t v168 = *(void *)&v424[32];
                      }
                      else {
                        uint64_t v168 = 0;
                      }
                      if ((v128 - 3) > 0xFFFFFFFD)
                      {
                        unint64_t v130 = v168 + 8;
                        goto LABEL_246;
                      }
                      if (v128 == 3) {
                        *(void *)(*(void *)&v424[32] + 8) = 0;
                      }
                    }
                    else if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) == 2 {
                           || *(_DWORD *)(*(void *)&v424[32] + 12))
                    }
                    {
                      uint64_t v129 = *(void *)(*(void *)&v424[32] + 16);
                      if ((v129 & 4) != 0)
                      {
                        unint64_t v130 = v129 & 0xFFFFFFFFFFFFFFF8;
                        if (v130)
                        {
LABEL_246:
                          uint64_t v416 = (unsigned __int8 **)&v424[32];
                          sub_1CC5FA668(v130 + 16, &v416);
                          *(void *)&v424[32] = v425;
                          if (v425) {
                            llvm::MetadataTracking::retrack((uint64_t)&v425, v425, (uint64_t)&v424[32]);
                          }
LABEL_79:
                          *(void *)&v424[48] = v21;
                          *(void *)&v424[56] = 0;
                          *(void *)&v424[40] = *(void *)(v21 + 24);
                          *(void *)&v424[48] = v21;
                          if ((unsigned char *)(v21 + 56) == &v424[32]) {
                            goto LABEL_83;
                          }
                          if (!*(void *)&v424[32])
                          {
LABEL_81:
                            *(void *)&v424[32] = *(void *)(v21 + 56);
                            if (*(void *)&v424[32]) {
                              llvm::MetadataTracking::track((uint64_t)&v424[32], *(unsigned __int8 **)&v424[32], 2);
                            }
LABEL_83:
                            int v399 = v27;
                            uint64_t v71 = (*(uint64_t (**)(unsigned char *))(*(void *)v16 + 104))(v16);
                            unsigned int v72 = sub_1CD421B9C(v71, *(llvm::MachineBasicBlock **)(v21 + 24), *(void **)&v424[48], (unsigned __int16 ***)&off_1E66AF580);
                            uint64_t v73 = *(llvm::MachineFunction **)&v424[8];
                            uint64_t v74 = *(void *)(*(void *)&v424[16] + 8);
                            unsigned int v425 = *(unsigned __int8 **)&v424[32];
                            if (*(void *)&v424[32]) {
                              llvm::MetadataTracking::track((uint64_t)&v425, *(unsigned __int8 **)&v424[32], 2);
                            }
                            int v409 = v41;
                            uint64_t v75 = llvm::MachineFunction::CreateMachineInstr(v73, v74 + 26496, &v425, 0);
                            if (!v425)
                            {
LABEL_86:
                              uint64_t v76 = *(unint64_t **)&v424[48];
                              uint64_t v77 = *(void *)(*(void *)&v424[40] + 40);
                              *((void *)v75 + 3) = v77;
                              uint64_t v78 = *(void *)(v77 + 32);
                              uint64_t v79 = *((unsigned int *)v75 + 10);
                              if (v79)
                              {
                                uint64_t v145 = *((void *)v75 + 4);
                                uint64_t v146 = *(void *)(v78 + 40);
                                uint64_t v147 = 32 * v79;
                                do
                                {
                                  if (!*(unsigned char *)v145)
                                  {
                                    uint64_t v148 = *(unsigned int *)(v145 + 4);
                                    if ((int)v148 >= 0) {
                                      unint64_t v149 = (uint64_t *)(*(void *)(v146 + 272) + 8 * v148);
                                    }
                                    else {
                                      unint64_t v149 = (uint64_t *)(*(void *)(v146 + 24) + 16 * (v148 & 0x7FFFFFFF) + 8);
                                    }
                                    uint64_t v150 = *v149;
                                    if (*v149)
                                    {
                                      uint64_t v151 = *(void *)(v150 + 16);
                                      *(void *)(v150 + 16) = v145;
                                      *(void *)(v145 + 16) = v151;
                                      if (*(unsigned char *)(v145 + 3))
                                      {
                                        *(void *)(v145 + 24) = v150;
                                      }
                                      else
                                      {
                                        *(void *)(v145 + 24) = 0;
                                        unint64_t v149 = (uint64_t *)(v151 + 24);
                                      }
                                    }
                                    else
                                    {
                                      *(void *)(v145 + 16) = v145;
                                      *(void *)(v145 + 24) = 0;
                                    }
                                    *unint64_t v149 = v145;
                                  }
                                  v145 += 32;
                                  v147 -= 32;
                                }
                                while (v147);
                              }
                              uint64_t v80 = *(void *)(v78 + 728);
                              if (v80) {
                                (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v80 + 24))(v80, v75);
                              }
                              unint64_t v81 = *v76 & 0xFFFFFFFFFFFFFFF8;
                              *(void *)uint64_t v75 = v81 | *(void *)v75 & 7;
                              *((void *)v75 + 1) = v76;
                              *(void *)(v81 + 8) = v75;
                              *uint64_t v76 = *v76 & 7 | (unint64_t)v75;
                              if (*(void *)&v424[56]) {
                                (*(void (**)(void, llvm::MachineInstr *))(**(void **)&v424[56] + 24))(*(void *)&v424[56], v75);
                              }
                              uint64_t v417 = 0;
                              uint64_t v418 = 0;
                              uint64_t v419 = 0;
                              LODWORD(v416) = 0x1000000;
                              HIDWORD(v416) = v72;
                              llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v416);
                              LODWORD(v416) = 1;
                              uint64_t v417 = 0;
                              uint64_t v418 = 0;
                              llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v416);
                              int v82 = *(_DWORD *)(v69 + 32 * v67 + 4);
                              uint64_t v417 = 0;
                              LODWORD(v416) = 0;
                              HIDWORD(v416) = v82;
                              uint64_t v418 = 0;
                              uint64_t v419 = 0;
                              llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v416);
                              LODWORD(v416) = 1;
                              uint64_t v417 = 0;
                              uint64_t v418 = 0;
                              llvm::MachineInstr::addOperand(v75, v73, (const llvm::MachineOperand *)&v416);
                              llvm::MachineOperand::setReg(v69 + 32 * v67, v72);
                              uint64_t v83 = *(void *)(v21 + 32) + 32 * (v67 + 1);
                              *(void *)(v83 + 16) = *(void *)(v83 + 16) & 0xFFFFFFFFFFFFFFCFLL | 0x10;
                              *(void *)int v424 = &unk_1F261CD58;
                              int v18 = v400;
                              uint64_t v16 = v405;
                              unsigned int v20 = v402;
                              LODWORD(v27) = v399;
                              int v41 = v409;
                              int v62 = v398;
                              if (!*(void *)&v424[32]) {
                                goto LABEL_95;
                              }
                              int v84 = **(unsigned char **)&v424[32];
                              if ((v84 - 4) > 0x1E)
                              {
                                if ((v84 - 3) >= 0xFFFFFFFE) {
                                  uint64_t v124 = *(void *)&v424[32];
                                }
                                else {
                                  uint64_t v124 = 0;
                                }
                                if ((v84 - 3) < 0xFFFFFFFE)
                                {
                                  if (v84 == 3) {
                                    *(void *)(*(void *)&v424[32] + 8) = 0;
                                  }
                                  goto LABEL_95;
                                }
                                unint64_t v125 = v124 + 8;
                              }
                              else
                              {
                                if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2
                                  && !*(_DWORD *)(*(void *)&v424[32] + 12))
                                {
                                  goto LABEL_95;
                                }
                                uint64_t v214 = *(void *)(*(void *)&v424[32] + 16);
                                if ((v214 & 4) == 0) {
                                  goto LABEL_95;
                                }
                                unint64_t v125 = v214 & 0xFFFFFFFFFFFFFFF8;
                                if (!v125) {
                                  goto LABEL_95;
                                }
                              }
                              uint64_t v416 = (unsigned __int8 **)&v424[32];
                              sub_1CC5FA668(v125 + 16, &v416);
LABEL_95:
                              BOOL v63 = v397;
                              goto LABEL_96;
                            }
                            int v220 = *v425;
                            if ((v220 - 4) > 0x1E)
                            {
                              if ((v220 - 3) >= 0xFFFFFFFE) {
                                uint64_t v232 = v425;
                              }
                              else {
                                uint64_t v232 = 0;
                              }
                              if ((v220 - 3) < 0xFFFFFFFE)
                              {
                                if (v220 == 3) {
                                  *((void *)v425 + 1) = 0;
                                }
                                goto LABEL_86;
                              }
                              unint64_t v222 = (unint64_t)(v232 + 8);
                            }
                            else
                            {
                              if ((v425[1] & 0x7F) != 2 && !*((_DWORD *)v425 + 3)) {
                                goto LABEL_86;
                              }
                              uint64_t v221 = *((void *)v425 + 2);
                              if ((v221 & 4) == 0) {
                                goto LABEL_86;
                              }
                              unint64_t v222 = v221 & 0xFFFFFFFFFFFFFFF8;
                              if (!v222) {
                                goto LABEL_86;
                              }
                            }
                            uint64_t v416 = &v425;
                            sub_1CC5FA668(v222 + 16, &v416);
                            goto LABEL_86;
                          }
                          int v152 = **(unsigned char **)&v424[32];
                          if ((v152 - 4) > 0x1E)
                          {
                            if ((v152 - 3) >= 0xFFFFFFFE) {
                              uint64_t v184 = *(void *)&v424[32];
                            }
                            else {
                              uint64_t v184 = 0;
                            }
                            if ((v152 - 3) < 0xFFFFFFFE)
                            {
                              if (v152 == 3) {
                                *(void *)(*(void *)&v424[32] + 8) = 0;
                              }
                              goto LABEL_81;
                            }
                            unint64_t v154 = v184 + 8;
                          }
                          else
                          {
                            if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2
                              && !*(_DWORD *)(*(void *)&v424[32] + 12))
                            {
                              goto LABEL_81;
                            }
                            uint64_t v153 = *(void *)(*(void *)&v424[32] + 16);
                            if ((v153 & 4) == 0) {
                              goto LABEL_81;
                            }
                            unint64_t v154 = v153 & 0xFFFFFFFFFFFFFFF8;
                            if (!v154) {
                              goto LABEL_81;
                            }
                          }
                          uint64_t v416 = (unsigned __int8 **)&v424[32];
                          sub_1CC5FA668(v154 + 16, &v416);
                          goto LABEL_81;
                        }
                      }
                    }
LABEL_78:
                    *(void *)&v424[32] = 0;
                    goto LABEL_79;
                  }
                  int v226 = *(unsigned __int8 *)v416;
                  if ((v226 - 4) > 0x1E)
                  {
                    if ((v226 - 3) >= 0xFFFFFFFE) {
                      int v237 = (unsigned __int8 *)v416;
                    }
                    else {
                      int v237 = 0;
                    }
                    if ((v226 - 3) < 0xFFFFFFFE)
                    {
                      if (v226 == 3) {
                        v416[1] = 0;
                      }
                      goto LABEL_118;
                    }
                    unint64_t v228 = (unint64_t)(v237 + 8);
                  }
                  else
                  {
                    if ((*((unsigned char *)v416 + 1) & 0x7F) != 2 && !*((_DWORD *)v416 + 3)) {
                      goto LABEL_118;
                    }
                    unint64_t v227 = (unint64_t)v416[2];
                    if ((v227 & 4) == 0) {
                      goto LABEL_118;
                    }
                    unint64_t v228 = v227 & 0xFFFFFFFFFFFFFFF8;
                    if (!v228) {
                      goto LABEL_118;
                    }
                  }
                  *(void *)int v424 = &v416;
                  sub_1CC5FA668(v228 + 16, v424);
                  goto LABEL_118;
                }
                if ((*(unsigned char *)(*(void *)(v21 + 32)
                               + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v21 + 16), 0x2Eu)
                               + 16) & 0x40) == 0)
                {
LABEL_67:
                  int v52 = 0;
                  goto LABEL_68;
                }
                uint64_t v131 = v21;
                if ((*(unsigned char *)v21 & 4) == 0)
                {
                  uint64_t v131 = v21;
                  if ((*(_WORD *)(v21 + 44) & 8) != 0)
                  {
                    uint64_t v131 = v21;
                    do
                      uint64_t v131 = *(void *)(v131 + 8);
                    while ((*(_WORD *)(v131 + 44) & 8) != 0);
                  }
                }
                uint64_t v132 = *(void *)(v131 + 8);
                uint64_t v133 = *(void *)(*(void *)(v21 + 24) + 32);
                memset(&v424[16], 0, 56);
                *(void *)int v424 = &unk_1F261CD58;
                *(void *)&v424[8] = v133;
                *(void *)&v424[24] = *(void *)(v133 + 40);
                *(void *)&v424[16] = (*(uint64_t (**)(void))(**(void **)(v133 + 16) + 104))(*(void *)(v133 + 16));
                unsigned int v425 = 0;
                if (!*(void *)&v424[32]) {
                  goto LABEL_172;
                }
                int v202 = **(unsigned char **)&v424[32];
                if ((v202 - 4) > 0x1E)
                {
                  if ((v202 - 3) >= 0xFFFFFFFE) {
                    uint64_t v213 = *(void *)&v424[32];
                  }
                  else {
                    uint64_t v213 = 0;
                  }
                  if ((v202 - 3) > 0xFFFFFFFD)
                  {
                    unint64_t v204 = v213 + 8;
                    goto LABEL_373;
                  }
                  if (v202 == 3) {
                    *(void *)(*(void *)&v424[32] + 8) = 0;
                  }
                }
                else if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) == 2 {
                       || *(_DWORD *)(*(void *)&v424[32] + 12))
                }
                {
                  uint64_t v203 = *(void *)(*(void *)&v424[32] + 16);
                  if ((v203 & 4) != 0)
                  {
                    unint64_t v204 = v203 & 0xFFFFFFFFFFFFFFF8;
                    if (v204)
                    {
LABEL_373:
                      uint64_t v416 = (unsigned __int8 **)&v424[32];
                      sub_1CC5FA668(v204 + 16, &v416);
                      unint64_t v134 = v425;
                      *(void *)&v424[32] = v425;
                      if (v425)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&v425, v425, (uint64_t)&v424[32]);
                        unint64_t v134 = *(unsigned __int8 **)&v424[32];
                      }
LABEL_173:
                      int v413 = v49;
                      *(void *)&v424[48] = 0;
                      *(void *)&v424[56] = 0;
                      *(void *)&v424[40] = *(void *)(v21 + 24);
                      *(void *)&v424[48] = v132;
                      unsigned int v135 = *(llvm::MachineFunction **)&v424[8];
                      uint64_t v136 = *(void *)(*(void *)&v424[16] + 8);
                      unsigned int v425 = v134;
                      if (v134) {
                        llvm::MetadataTracking::track((uint64_t)&v425, v134, 2);
                      }
                      uint64_t v137 = llvm::MachineFunction::CreateMachineInstr(v135, v136 + 298656, &v425, 0);
                      if (!v425)
                      {
LABEL_176:
                        uint64_t v138 = *(unint64_t **)&v424[48];
                        uint64_t v139 = *(void *)(*(void *)&v424[40] + 40);
                        *((void *)v137 + 3) = v139;
                        uint64_t v140 = *(void *)(v139 + 32);
                        uint64_t v141 = *((unsigned int *)v137 + 10);
                        if (v141)
                        {
                          uint64_t v206 = *((void *)v137 + 4);
                          uint64_t v207 = *(void *)(v140 + 40);
                          uint64_t v208 = 32 * v141;
                          do
                          {
                            if (!*(unsigned char *)v206)
                            {
                              uint64_t v209 = *(unsigned int *)(v206 + 4);
                              if ((int)v209 >= 0) {
                                unsigned int v210 = (uint64_t *)(*(void *)(v207 + 272) + 8 * v209);
                              }
                              else {
                                unsigned int v210 = (uint64_t *)(*(void *)(v207 + 24) + 16 * (v209 & 0x7FFFFFFF) + 8);
                              }
                              uint64_t v211 = *v210;
                              if (*v210)
                              {
                                uint64_t v212 = *(void *)(v211 + 16);
                                *(void *)(v211 + 16) = v206;
                                *(void *)(v206 + 16) = v212;
                                if (*(unsigned char *)(v206 + 3))
                                {
                                  *(void *)(v206 + 24) = v211;
                                }
                                else
                                {
                                  *(void *)(v206 + 24) = 0;
                                  unsigned int v210 = (uint64_t *)(v212 + 24);
                                }
                              }
                              else
                              {
                                *(void *)(v206 + 16) = v206;
                                *(void *)(v206 + 24) = 0;
                              }
                              *unsigned int v210 = v206;
                            }
                            v206 += 32;
                            v208 -= 32;
                          }
                          while (v208);
                        }
                        uint64_t v142 = *(void *)(v140 + 728);
                        if (v142) {
                          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v142 + 24))(v142, v137);
                        }
                        unint64_t v143 = *v138 & 0xFFFFFFFFFFFFFFF8;
                        *(void *)uint64_t v137 = v143 | *(void *)v137 & 7;
                        *((void *)v137 + 1) = v138;
                        *(void *)(v143 + 8) = v137;
                        *uint64_t v138 = *v138 & 7 | (unint64_t)v137;
                        if (*(void *)&v424[56]) {
                          (*(void (**)(void, llvm::MachineInstr *))(**(void **)&v424[56] + 24))(*(void *)&v424[56], v137);
                        }
                        LODWORD(v416) = 1;
                        uint64_t v417 = 0;
                        uint64_t v418 = 0;
                        llvm::MachineInstr::addOperand(v137, v135, (const llvm::MachineOperand *)&v416);
                        *(void *)int v424 = &unk_1F261CD58;
                        uint64_t v16 = v405;
                        int v49 = v413;
                        if (!*(void *)&v424[32]) {
                          goto LABEL_185;
                        }
                        int v144 = **(unsigned char **)&v424[32];
                        if ((v144 - 4) > 0x1E)
                        {
                          if ((v144 - 3) >= 0xFFFFFFFE) {
                            uint64_t v197 = *(void *)&v424[32];
                          }
                          else {
                            uint64_t v197 = 0;
                          }
                          if ((v144 - 3) < 0xFFFFFFFE)
                          {
                            if (v144 == 3) {
                              *(void *)(*(void *)&v424[32] + 8) = 0;
                            }
                            goto LABEL_185;
                          }
                          unint64_t v198 = v197 + 8;
                        }
                        else
                        {
                          if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2
                            && !*(_DWORD *)(*(void *)&v424[32] + 12))
                          {
                            goto LABEL_185;
                          }
                          uint64_t v218 = *(void *)(*(void *)&v424[32] + 16);
                          if ((v218 & 4) == 0) {
                            goto LABEL_185;
                          }
                          unint64_t v198 = v218 & 0xFFFFFFFFFFFFFFF8;
                          if (!v198) {
                            goto LABEL_185;
                          }
                        }
                        uint64_t v416 = (unsigned __int8 **)&v424[32];
                        sub_1CC5FA668(v198 + 16, &v416);
LABEL_185:
                        int v52 = 1;
                        goto LABEL_68;
                      }
                      int v240 = *v425;
                      if ((v240 - 4) > 0x1E)
                      {
                        if ((v240 - 3) >= 0xFFFFFFFE) {
                          unint64_t v243 = v425;
                        }
                        else {
                          unint64_t v243 = 0;
                        }
                        if ((v240 - 3) < 0xFFFFFFFE)
                        {
                          unsigned int v20 = v402;
                          if (v240 == 3) {
                            *((void *)v425 + 1) = 0;
                          }
                          goto LABEL_176;
                        }
                        unint64_t v242 = (unint64_t)(v243 + 8);
                      }
                      else
                      {
                        unsigned int v20 = v402;
                        if ((v425[1] & 0x7F) != 2 && !*((_DWORD *)v425 + 3)) {
                          goto LABEL_176;
                        }
                        uint64_t v241 = *((void *)v425 + 2);
                        if ((v241 & 4) == 0) {
                          goto LABEL_176;
                        }
                        unint64_t v242 = v241 & 0xFFFFFFFFFFFFFFF8;
                        if (!v242) {
                          goto LABEL_176;
                        }
                      }
                      uint64_t v416 = &v425;
                      sub_1CC5FA668(v242 + 16, &v416);
                      unsigned int v20 = v402;
                      goto LABEL_176;
                    }
                  }
                }
LABEL_172:
                unint64_t v134 = 0;
                *(void *)&v424[32] = 0;
                goto LABEL_173;
              }
              int v233 = *v425;
              if ((v233 - 4) > 0x1E)
              {
                if ((v233 - 3) >= 0xFFFFFFFE) {
                  uint64_t v239 = v425;
                }
                else {
                  uint64_t v239 = 0;
                }
                if ((v233 - 3) < 0xFFFFFFFE)
                {
                  unsigned int v20 = v402;
                  if (v233 == 3) {
                    *((void *)v425 + 1) = 0;
                  }
                  goto LABEL_137;
                }
                unint64_t v235 = (unint64_t)(v239 + 8);
              }
              else
              {
                unsigned int v20 = v402;
                if ((v425[1] & 0x7F) != 2 && !*((_DWORD *)v425 + 3)) {
                  goto LABEL_137;
                }
                uint64_t v234 = *((void *)v425 + 2);
                if ((v234 & 4) == 0) {
                  goto LABEL_137;
                }
                unint64_t v235 = v234 & 0xFFFFFFFFFFFFFFF8;
                if (!v235) {
                  goto LABEL_137;
                }
              }
              uint64_t v416 = &v425;
              sub_1CC5FA668(v235 + 16, &v416);
              unsigned int v20 = v402;
              goto LABEL_137;
            }
            int v192 = *v112;
            if ((v192 - 4) > 0x1E)
            {
              if ((v192 - 3) >= 0xFFFFFFFE) {
                uint64_t v205 = v112;
              }
              else {
                uint64_t v205 = 0;
              }
              if ((v192 - 3) < 0xFFFFFFFE)
              {
                if (v192 == 3) {
                  *((void *)v112 + 1) = 0;
                }
                goto LABEL_132;
              }
              unint64_t v194 = (unint64_t)(v205 + 8);
            }
            else
            {
              if ((v112[1] & 0x7F) != 2 && !*((_DWORD *)v112 + 3)) {
                goto LABEL_132;
              }
              uint64_t v193 = *((void *)v112 + 2);
              if ((v193 & 4) == 0) {
                goto LABEL_132;
              }
              unint64_t v194 = v193 & 0xFFFFFFFFFFFFFFF8;
              if (!v194) {
                goto LABEL_132;
              }
            }
            uint64_t v416 = (unsigned __int8 **)&v424[32];
            sub_1CC5FA668(v194 + 16, &v416);
            goto LABEL_132;
          }
        }
      }
      uint64_t v112 = 0;
      *(void *)&v424[32] = 0;
      goto LABEL_130;
    }
    uint64_t v23 = *(void *)(v21 + 32) + 32 * sub_1CBDA6464(**(unsigned __int16 **)(v21 + 16), 0x2Eu);
    uint64_t v26 = *(void *)(v23 + 16);
    int v25 = (unint64_t *)(v23 + 16);
    uint64_t v24 = v26;
    uint64_t v27 = BYTE3(v26);
    if (!BYTE3(v26)) {
      goto LABEL_48;
    }
    uint64_t v28 = *(void *)(v21 + 24);
    memset(&v424[8], 0, 64);
    uint64_t v29 = *(void *)(v28 + 32);
    *(void *)int v424 = &unk_1F261CD58;
    *(void *)&v424[8] = v29;
    *(void *)&v424[24] = *(void *)(v29 + 40);
    *(void *)&v424[16] = (*(uint64_t (**)(void))(**(void **)(v29 + 16) + 104))(*(void *)(v29 + 16));
    unsigned int v425 = 0;
    if (!*(void *)&v424[32])
    {
      unsigned int v30 = 0;
      *(void *)&v424[32] = 0;
      goto LABEL_32;
    }
    int v157 = **(unsigned char **)&v424[32];
    if ((v157 - 4) > 0x1E)
    {
      if ((v157 - 3) >= 0xFFFFFFFE) {
        uint64_t v195 = *(void *)&v424[32];
      }
      else {
        uint64_t v195 = 0;
      }
      if ((v157 - 3) > 0xFFFFFFFD)
      {
        unint64_t v196 = v195 + 8;
        goto LABEL_308;
      }
      if (v157 == 3) {
        *(void *)(*(void *)&v424[32] + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v424[32] + 12))
    {
      uint64_t v217 = *(void *)(*(void *)&v424[32] + 16);
      if ((v217 & 4) != 0)
      {
        unint64_t v196 = v217 & 0xFFFFFFFFFFFFFFF8;
        if (v196)
        {
LABEL_308:
          uint64_t v416 = (unsigned __int8 **)&v424[32];
          sub_1CC5FA668(v196 + 16, &v416);
          unsigned int v30 = v425;
          *(void *)&v424[32] = v425;
          if (v425)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v425, v425, (uint64_t)&v424[32]);
            unsigned int v30 = *(unsigned __int8 **)&v424[32];
          }
LABEL_32:
          *(void *)&v424[48] = v21;
          *(void *)&v424[56] = 0;
          *(void *)&v424[40] = *(void *)(v21 + 24);
          *(void *)&v424[48] = v21;
          if ((unsigned char *)(v21 + 56) == &v424[32]) {
            goto LABEL_218;
          }
          if (v30)
          {
            int v165 = *v30;
            if ((v165 - 4) > 0x1E)
            {
              if ((v165 - 3) >= 0xFFFFFFFE) {
                int v199 = v30;
              }
              else {
                int v199 = 0;
              }
              if ((v165 - 3) < 0xFFFFFFFE)
              {
                if (v165 == 3) {
                  *((void *)v30 + 1) = 0;
                }
                goto LABEL_34;
              }
              unint64_t v167 = (unint64_t)(v199 + 8);
            }
            else
            {
              if ((v30[1] & 0x7F) != 2 && !*((_DWORD *)v30 + 3)) {
                goto LABEL_34;
              }
              uint64_t v166 = *((void *)v30 + 2);
              if ((v166 & 4) == 0) {
                goto LABEL_34;
              }
              unint64_t v167 = v166 & 0xFFFFFFFFFFFFFFF8;
              if (!v167) {
                goto LABEL_34;
              }
            }
            uint64_t v416 = (unsigned __int8 **)&v424[32];
            sub_1CC5FA668(v167 + 16, &v416);
          }
LABEL_34:
          *(void *)&v424[32] = *(void *)(v21 + 56);
          if (!*(void *)&v424[32])
          {
            uint64_t v31 = *(llvm::MachineFunction **)&v424[8];
            uint64_t v32 = *(void *)(*(void *)&v424[16] + 8) + 298656;
            unsigned int v425 = 0;
            goto LABEL_36;
          }
          llvm::MetadataTracking::track((uint64_t)&v424[32], *(unsigned __int8 **)&v424[32], 2);
          unsigned int v30 = *(unsigned __int8 **)&v424[32];
LABEL_218:
          uint64_t v31 = *(llvm::MachineFunction **)&v424[8];
          uint64_t v32 = *(void *)(*(void *)&v424[16] + 8) + 298656;
          unsigned int v425 = v30;
          if (v30) {
            llvm::MetadataTracking::track((uint64_t)&v425, v30, 2);
          }
LABEL_36:
          uint64_t v33 = llvm::MachineFunction::CreateMachineInstr(v31, v32, &v425, 0);
          if (!v425) {
            goto LABEL_37;
          }
          int v223 = *v425;
          if ((v223 - 4) > 0x1E)
          {
            if ((v223 - 3) >= 0xFFFFFFFE) {
              uint64_t v236 = v425;
            }
            else {
              uint64_t v236 = 0;
            }
            if ((v223 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v225 = (unint64_t)(v236 + 8);
LABEL_437:
              uint64_t v416 = &v425;
              sub_1CC5FA668(v225 + 16, &v416);
              goto LABEL_37;
            }
            if (v223 == 3) {
              *((void *)v425 + 1) = 0;
            }
          }
          else if ((v425[1] & 0x7F) == 2 || *((_DWORD *)v425 + 3))
          {
            uint64_t v224 = *((void *)v425 + 2);
            if ((v224 & 4) != 0)
            {
              unint64_t v225 = v224 & 0xFFFFFFFFFFFFFFF8;
              if (v225) {
                goto LABEL_437;
              }
            }
          }
LABEL_37:
          int v34 = *(unint64_t **)&v424[48];
          uint64_t v35 = *(void *)(*(void *)&v424[40] + 40);
          *((void *)v33 + 3) = v35;
          uint64_t v36 = *(void *)(v35 + 32);
          uint64_t v37 = *((unsigned int *)v33 + 10);
          if (v37)
          {
            uint64_t v158 = *((void *)v33 + 4);
            uint64_t v159 = *(void *)(v36 + 40);
            uint64_t v160 = 32 * v37;
            do
            {
              if (!*(unsigned char *)v158)
              {
                uint64_t v161 = *(unsigned int *)(v158 + 4);
                if ((int)v161 >= 0) {
                  uint64_t v162 = (uint64_t *)(*(void *)(v159 + 272) + 8 * v161);
                }
                else {
                  uint64_t v162 = (uint64_t *)(*(void *)(v159 + 24) + 16 * (v161 & 0x7FFFFFFF) + 8);
                }
                uint64_t v163 = *v162;
                if (*v162)
                {
                  uint64_t v164 = *(void *)(v163 + 16);
                  *(void *)(v163 + 16) = v158;
                  *(void *)(v158 + 16) = v164;
                  if (*(unsigned char *)(v158 + 3))
                  {
                    *(void *)(v158 + 24) = v163;
                  }
                  else
                  {
                    *(void *)(v158 + 24) = 0;
                    uint64_t v162 = (uint64_t *)(v164 + 24);
                  }
                }
                else
                {
                  *(void *)(v158 + 16) = v158;
                  *(void *)(v158 + 24) = 0;
                }
                *uint64_t v162 = v158;
              }
              v158 += 32;
              v160 -= 32;
            }
            while (v160);
          }
          uint64_t v38 = *(void *)(v36 + 728);
          if (v38) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v38 + 24))(v38, v33);
          }
          unint64_t v39 = *v34 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v33 = v39 | *(void *)v33 & 7;
          *((void *)v33 + 1) = v34;
          *(void *)(v39 + 8) = v33;
          *int v34 = *v34 & 7 | (unint64_t)v33;
          if (*(void *)&v424[56]) {
            (*(void (**)(void, llvm::MachineInstr *))(**(void **)&v424[56] + 24))(*(void *)&v424[56], v33);
          }
          LODWORD(v416) = 1;
          uint64_t v417 = 0;
          uint64_t v418 = v27 << 24;
          llvm::MachineInstr::addOperand(v33, v31, (const llvm::MachineOperand *)&v416);
          unint64_t *v25 = v24 & 0xFFFFFFFF00FFFFFFLL;
          *(void *)int v424 = &unk_1F261CD58;
          uint64_t v16 = v405;
          unsigned int v20 = v402;
          if (!*(void *)&v424[32]) {
            goto LABEL_46;
          }
          int v40 = **(unsigned char **)&v424[32];
          if ((v40 - 4) > 0x1E)
          {
            if ((v40 - 3) >= 0xFFFFFFFE) {
              uint64_t v126 = *(void *)&v424[32];
            }
            else {
              uint64_t v126 = 0;
            }
            if ((v40 - 3) < 0xFFFFFFFE)
            {
              if (v40 == 3) {
                *(void *)(*(void *)&v424[32] + 8) = 0;
              }
              goto LABEL_46;
            }
            unint64_t v127 = v126 + 8;
          }
          else
          {
            if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v424[32] + 12)) {
              goto LABEL_46;
            }
            uint64_t v215 = *(void *)(*(void *)&v424[32] + 16);
            if ((v215 & 4) == 0) {
              goto LABEL_46;
            }
            unint64_t v127 = v215 & 0xFFFFFFFFFFFFFFF8;
            if (!v127) {
              goto LABEL_46;
            }
          }
          uint64_t v416 = (unsigned __int8 **)&v424[32];
          sub_1CC5FA668(v127 + 16, &v416);
LABEL_46:
          LODWORD(v27) = 1;
          goto LABEL_48;
        }
      }
    }
    unsigned int v30 = 0;
    *(void *)&v424[32] = 0;
    goto LABEL_32;
  }
LABEL_481:
  if (v422 == 3)
  {
    *(_OWORD *)int v421 = *(_OWORD *)((char *)v421 + 8);
    LODWORD(v422) = v422 - 1;
    v18 |= sub_1CBBF72E4((uint64_t)v16, &v421);
  }
  uint64_t v244 = a2[43];
  if ((*(uint64_t (**)(uint64_t))(*(void *)v244 + 560))(v244)
    && ((int v245 = (*(uint64_t (**)(uint64_t))(*(void *)v244 + 440))(v244),
         unsigned int v246 = (v245 + 15) & 0xFFFFFFF0,
         unsigned int v247 = v246 - v245,
         BOOL v3 = v246 == v245,
         int v248 = (v246 - v245) & 3,
         !v3)
      ? (BOOL v249 = v248 == 0)
      : (BOOL v249 = 0),
        v249 && (*(unsigned int (**)(uint64_t, void))(*(void *)v244 + 376))(v244, 0) != -1))
  {
    unsigned int v250 = 0;
    do
    {
      (*(void (**)(uint64_t, void))(*(void *)v244 + 328))(v244, 0);
      v250 += 4;
    }
    while (v250 < v247 && (*(unsigned int (**)(uint64_t, void))(*(void *)v244 + 376))(v244, 0) != -1);
    int v408 = 1;
  }
  else
  {
    int v408 = 0;
  }
  unsigned int v251 = a2;
  int v404 = sub_1CBC2F74C((uint64_t)a2);
  if (v404)
  {
    uint64_t v252 = *(void *)(a2[41] + 56);
    uint64_t v253 = *(void *)(v252 + 24);
    memset(&v424[24], 0, 48);
    *(_OWORD *)&v424[8] = 0u;
    uint64_t v254 = *(void *)(v253 + 32);
    uint64_t v255 = *(void *)(v254 + 40);
    *(void *)int v424 = &unk_1F261CD58;
    *(void *)&v424[8] = v254;
    *(void *)&v424[24] = v255;
    *(void *)&v424[16] = (*(uint64_t (**)(void))(**(void **)(v254 + 16) + 104))(*(void *)(v254 + 16));
    unsigned int v425 = 0;
    if (!*(void *)&v424[32])
    {
LABEL_497:
      uint64_t v256 = 0;
      *(void *)&v424[32] = 0;
      goto LABEL_498;
    }
    int v358 = **(unsigned char **)&v424[32];
    if ((v358 - 4) > 0x1E)
    {
      if ((v358 - 3) >= 0xFFFFFFFE) {
        uint64_t v381 = *(void *)&v424[32];
      }
      else {
        uint64_t v381 = 0;
      }
      if ((v358 - 3) <= 0xFFFFFFFD)
      {
        if (v358 == 3) {
          *(void *)(*(void *)&v424[32] + 8) = 0;
        }
        goto LABEL_497;
      }
      unint64_t v360 = v381 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v424[32] + 12)) {
        goto LABEL_497;
      }
      uint64_t v359 = *(void *)(*(void *)&v424[32] + 16);
      if ((v359 & 4) == 0) {
        goto LABEL_497;
      }
      unint64_t v360 = v359 & 0xFFFFFFFFFFFFFFF8;
      if (!v360) {
        goto LABEL_497;
      }
    }
    uint64_t v416 = (unsigned __int8 **)&v424[32];
    sub_1CC5FA668(v360 + 16, &v416);
    uint64_t v256 = v425;
    *(void *)&v424[32] = v425;
    if (v425)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v425, v425, (uint64_t)&v424[32]);
      uint64_t v256 = *(unsigned __int8 **)&v424[32];
    }
LABEL_498:
    *(void *)&v424[48] = 0;
    *(void *)&v424[56] = 0;
    *(void *)&v424[40] = *(void *)(v252 + 24);
    *(void *)&v424[48] = v252;
    uint64_t v257 = (unsigned char *)(v252 + 56);
    if (v257 == &v424[32]) {
      goto LABEL_766;
    }
    if (v256)
    {
      int v368 = *v256;
      if ((v368 - 4) > 0x1E)
      {
        if ((v368 - 3) >= 0xFFFFFFFE) {
          v382 = v256;
        }
        else {
          v382 = 0;
        }
        if ((v368 - 3) < 0xFFFFFFFE)
        {
          if (v368 == 3) {
            *((void *)v256 + 1) = 0;
          }
          goto LABEL_500;
        }
        unint64_t v370 = (unint64_t)(v382 + 8);
      }
      else
      {
        if ((v256[1] & 0x7F) != 2 && !*((_DWORD *)v256 + 3)) {
          goto LABEL_500;
        }
        uint64_t v369 = *((void *)v256 + 2);
        if ((v369 & 4) == 0) {
          goto LABEL_500;
        }
        unint64_t v370 = v369 & 0xFFFFFFFFFFFFFFF8;
        if (!v370) {
          goto LABEL_500;
        }
      }
      uint64_t v416 = (unsigned __int8 **)&v424[32];
      sub_1CC5FA668(v370 + 16, &v416);
    }
LABEL_500:
    *(void *)&v424[32] = *(void *)v257;
    if (!*(void *)&v424[32])
    {
      uint64_t v258 = *(llvm::MachineFunction **)&v424[8];
      uint64_t v259 = *(void *)(*(void *)&v424[16] + 8) + 298656;
      unsigned int v425 = 0;
      goto LABEL_502;
    }
    llvm::MetadataTracking::track((uint64_t)&v424[32], *(unsigned __int8 **)&v424[32], 2);
    uint64_t v256 = *(unsigned __int8 **)&v424[32];
LABEL_766:
    uint64_t v258 = *(llvm::MachineFunction **)&v424[8];
    uint64_t v259 = *(void *)(*(void *)&v424[16] + 8) + 298656;
    unsigned int v425 = v256;
    if (v256) {
      llvm::MetadataTracking::track((uint64_t)&v425, v256, 2);
    }
LABEL_502:
    int v260 = llvm::MachineFunction::CreateMachineInstr(v258, v259, &v425, 0);
    if (!v425) {
      goto LABEL_503;
    }
    int v386 = *v425;
    if ((v386 - 4) > 0x1E)
    {
      if ((v386 - 3) >= 0xFFFFFFFE) {
        uint64_t v392 = v425;
      }
      else {
        uint64_t v392 = 0;
      }
      if ((v386 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v388 = (unint64_t)(v392 + 8);
LABEL_860:
        uint64_t v416 = &v425;
        sub_1CC5FA668(v388 + 16, &v416);
        goto LABEL_503;
      }
      if (v386 == 3) {
        *((void *)v425 + 1) = 0;
      }
    }
    else if ((v425[1] & 0x7F) == 2 || *((_DWORD *)v425 + 3))
    {
      uint64_t v387 = *((void *)v425 + 2);
      if ((v387 & 4) != 0)
      {
        unint64_t v388 = v387 & 0xFFFFFFFFFFFFFFF8;
        if (v388) {
          goto LABEL_860;
        }
      }
    }
LABEL_503:
    BOOL v261 = *(unint64_t **)&v424[48];
    uint64_t v262 = *(void *)(*(void *)&v424[40] + 40);
    *((void *)v260 + 3) = v262;
    uint64_t v263 = *(void *)(v262 + 32);
    uint64_t v264 = *((unsigned int *)v260 + 10);
    if (v264)
    {
      uint64_t v361 = *((void *)v260 + 4);
      uint64_t v362 = *(void *)(v263 + 40);
      uint64_t v363 = 32 * v264;
      do
      {
        if (!*(unsigned char *)v361)
        {
          uint64_t v364 = *(unsigned int *)(v361 + 4);
          if ((int)v364 >= 0) {
            uint64_t v365 = (uint64_t *)(*(void *)(v362 + 272) + 8 * v364);
          }
          else {
            uint64_t v365 = (uint64_t *)(*(void *)(v362 + 24) + 16 * (v364 & 0x7FFFFFFF) + 8);
          }
          uint64_t v366 = *v365;
          if (*v365)
          {
            uint64_t v367 = *(void *)(v366 + 16);
            *(void *)(v366 + 16) = v361;
            *(void *)(v361 + 16) = v367;
            if (*(unsigned char *)(v361 + 3))
            {
              *(void *)(v361 + 24) = v366;
            }
            else
            {
              *(void *)(v361 + 24) = 0;
              uint64_t v365 = (uint64_t *)(v367 + 24);
            }
          }
          else
          {
            *(void *)(v361 + 16) = v361;
            *(void *)(v361 + 24) = 0;
          }
          *uint64_t v365 = v361;
        }
        v361 += 32;
        v363 -= 32;
      }
      while (v363);
    }
    uint64_t v265 = *(void *)(v263 + 728);
    if (v265) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v265 + 24))(v265, v260);
    }
    unint64_t v266 = *v261 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v260 = v266 | *(void *)v260 & 7;
    *((void *)v260 + 1) = v261;
    *(void *)(v266 + 8) = v260;
    *BOOL v261 = *v261 & 7 | (unint64_t)v260;
    if (*(void *)&v424[56]) {
      (*(void (**)(void, llvm::MachineInstr *))(**(void **)&v424[56] + 24))(*(void *)&v424[56], v260);
    }
    LODWORD(v416) = 1;
    uint64_t v417 = 0;
    uint64_t v418 = 0;
    llvm::MachineInstr::addOperand(v260, v258, (const llvm::MachineOperand *)&v416);
    *(void *)int v424 = &unk_1F261CD58;
    if (!*(void *)&v424[32]) {
      goto LABEL_512;
    }
    int v267 = **(unsigned char **)&v424[32];
    if ((v267 - 4) > 0x1E)
    {
      if ((v267 - 3) >= 0xFFFFFFFE) {
        uint64_t v354 = *(void *)&v424[32];
      }
      else {
        uint64_t v354 = 0;
      }
      if ((v267 - 3) < 0xFFFFFFFE)
      {
        if (v267 == 3) {
          *(void *)(*(void *)&v424[32] + 8) = 0;
        }
        goto LABEL_512;
      }
      unint64_t v355 = v354 + 8;
    }
    else
    {
      if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v424[32] + 12)) {
        goto LABEL_512;
      }
      uint64_t v384 = *(void *)(*(void *)&v424[32] + 16);
      if ((v384 & 4) == 0) {
        goto LABEL_512;
      }
      unint64_t v355 = v384 & 0xFFFFFFFFFFFFFFF8;
      if (!v355) {
        goto LABEL_512;
      }
    }
    uint64_t v416 = (unsigned __int8 **)&v424[32];
    sub_1CC5FA668(v355 + 16, &v416);
LABEL_512:
    unsigned int v251 = a2;
  }
  int v401 = v18;
  if (*(unsigned char *)(v251[2] + 378))
  {
    uint64_t v268 = (void *)v251[41];
    if (v268 != v396)
    {
      int v269 = 0;
      while (1)
      {
        for (uint64_t i = v268[7]; (void *)i != v268 + 6; uint64_t i = *(void *)(i + 8))
        {
          unsigned int v271 = *(unsigned __int16 **)(i + 16);
          if ((v271[10] & 4) != 0
            && (*(unsigned char *)(*(void *)(i + 32) + 32 * sub_1CBDA6464(*v271, 0x2Eu) + 16) & 0x40) != 0)
          {
            v424[0] = 0;
            *(void *)&v424[8] = i;
            sub_1CBC2F99C((uint64_t)v424);
            if (!v424[0])
            {
              uint64_t v272 = *(void *)&v424[8];
              if (*(void *)&v424[8])
              {
                if (sub_1CBC2F8BC(*(uint64_t *)&v424[8]))
                {
                  uint64_t v273 = *(void *)(v272 + 24);
                  memset(&v424[8], 0, 64);
                  uint64_t v274 = *(void *)(v273 + 32);
                  *(void *)int v424 = &unk_1F261CD58;
                  *(void *)&v424[8] = v274;
                  *(void *)&v424[24] = *(void *)(v274 + 40);
                  *(void *)&v424[16] = (*(uint64_t (**)(void))(**(void **)(v274 + 16) + 104))(*(void *)(v274 + 16));
                  unsigned int v425 = 0;
                  if (!*(void *)&v424[32]) {
                    goto LABEL_528;
                  }
                  int v289 = **(unsigned char **)&v424[32];
                  if ((v289 - 4) > 0x1E)
                  {
                    if ((v289 - 3) >= 0xFFFFFFFE) {
                      uint64_t v302 = *(void *)&v424[32];
                    }
                    else {
                      uint64_t v302 = 0;
                    }
                    if ((v289 - 3) <= 0xFFFFFFFD)
                    {
                      if (v289 == 3) {
                        *(void *)(*(void *)&v424[32] + 8) = 0;
                      }
                      goto LABEL_528;
                    }
                    unint64_t v291 = v302 + 8;
LABEL_585:
                    uint64_t v416 = (unsigned __int8 **)&v424[32];
                    sub_1CC5FA668(v291 + 16, &v416);
                    unsigned int v275 = v425;
                    *(void *)&v424[32] = v425;
                    if (v425)
                    {
                      llvm::MetadataTracking::retrack((uint64_t)&v425, v425, (uint64_t)&v424[32]);
                      unsigned int v275 = *(unsigned __int8 **)&v424[32];
                    }
                  }
                  else
                  {
                    if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) == 2
                      || *(_DWORD *)(*(void *)&v424[32] + 12))
                    {
                      uint64_t v290 = *(void *)(*(void *)&v424[32] + 16);
                      if ((v290 & 4) != 0)
                      {
                        unint64_t v291 = v290 & 0xFFFFFFFFFFFFFFF8;
                        if (v291) {
                          goto LABEL_585;
                        }
                      }
                    }
LABEL_528:
                    unsigned int v275 = 0;
                    *(void *)&v424[32] = 0;
                  }
                  *(void *)&v424[48] = v272;
                  *(void *)&v424[56] = 0;
                  *(void *)&v424[40] = *(void *)(v272 + 24);
                  *(void *)&v424[48] = v272;
                  uint64_t v276 = (unsigned char *)(v272 + 56);
                  if (v276 != &v424[32])
                  {
                    if (!v275) {
                      goto LABEL_531;
                    }
                    int v299 = *v275;
                    if ((v299 - 4) > 0x1E)
                    {
                      if ((v299 - 3) >= 0xFFFFFFFE) {
                        int v303 = v275;
                      }
                      else {
                        int v303 = 0;
                      }
                      if ((v299 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v301 = (unint64_t)(v303 + 8);
                        goto LABEL_592;
                      }
                      if (v299 == 3) {
                        *((void *)v275 + 1) = 0;
                      }
                    }
                    else if ((v275[1] & 0x7F) == 2 || *((_DWORD *)v275 + 3))
                    {
                      uint64_t v300 = *((void *)v275 + 2);
                      if ((v300 & 4) != 0)
                      {
                        unint64_t v301 = v300 & 0xFFFFFFFFFFFFFFF8;
                        if (v301)
                        {
LABEL_592:
                          uint64_t v416 = (unsigned __int8 **)&v424[32];
                          sub_1CC5FA668(v301 + 16, &v416);
                        }
                      }
                    }
LABEL_531:
                    *(void *)&v424[32] = *(void *)v276;
                    if (!*(void *)&v424[32])
                    {
                      uint64_t v277 = *(llvm::MachineFunction **)&v424[8];
                      uint64_t v278 = *(void *)(*(void *)&v424[16] + 8) + 298656;
                      unsigned int v425 = 0;
                      goto LABEL_533;
                    }
                    llvm::MetadataTracking::track((uint64_t)&v424[32], *(unsigned __int8 **)&v424[32], 2);
                    unsigned int v275 = *(unsigned __int8 **)&v424[32];
                  }
                  uint64_t v277 = *(llvm::MachineFunction **)&v424[8];
                  uint64_t v278 = *(void *)(*(void *)&v424[16] + 8) + 298656;
                  unsigned int v425 = v275;
                  if (v275) {
                    llvm::MetadataTracking::track((uint64_t)&v425, v275, 2);
                  }
LABEL_533:
                  uint64_t v279 = llvm::MachineFunction::CreateMachineInstr(v277, v278, &v425, 0);
                  if (v425)
                  {
                    int v305 = *v425;
                    if ((v305 - 4) > 0x1E)
                    {
                      if ((v305 - 3) >= 0xFFFFFFFE) {
                        uint64_t v308 = v425;
                      }
                      else {
                        uint64_t v308 = 0;
                      }
                      if ((v305 - 3) < 0xFFFFFFFE)
                      {
                        if (v305 == 3) {
                          *((void *)v425 + 1) = 0;
                        }
                        goto LABEL_534;
                      }
                      unint64_t v307 = (unint64_t)(v308 + 8);
                    }
                    else
                    {
                      if ((v425[1] & 0x7F) != 2 && !*((_DWORD *)v425 + 3)) {
                        goto LABEL_534;
                      }
                      uint64_t v306 = *((void *)v425 + 2);
                      if ((v306 & 4) == 0) {
                        goto LABEL_534;
                      }
                      unint64_t v307 = v306 & 0xFFFFFFFFFFFFFFF8;
                      if (!v307) {
                        goto LABEL_534;
                      }
                    }
                    uint64_t v416 = &v425;
                    sub_1CC5FA668(v307 + 16, &v416);
                  }
LABEL_534:
                  uint64_t v280 = *(unint64_t **)&v424[48];
                  uint64_t v281 = *(void *)(*(void *)&v424[40] + 40);
                  *((void *)v279 + 3) = v281;
                  uint64_t v282 = *(void *)(v281 + 32);
                  uint64_t v283 = *((unsigned int *)v279 + 10);
                  if (v283)
                  {
                    uint64_t v292 = *((void *)v279 + 4);
                    uint64_t v293 = *(void *)(v282 + 40);
                    uint64_t v294 = 32 * v283;
                    do
                    {
                      if (!*(unsigned char *)v292)
                      {
                        uint64_t v295 = *(unsigned int *)(v292 + 4);
                        if ((int)v295 >= 0) {
                          v296 = (uint64_t *)(*(void *)(v293 + 272) + 8 * v295);
                        }
                        else {
                          v296 = (uint64_t *)(*(void *)(v293 + 24) + 16 * (v295 & 0x7FFFFFFF) + 8);
                        }
                        uint64_t v297 = *v296;
                        if (*v296)
                        {
                          uint64_t v298 = *(void *)(v297 + 16);
                          *(void *)(v297 + 16) = v292;
                          *(void *)(v292 + 16) = v298;
                          if (*(unsigned char *)(v292 + 3))
                          {
                            *(void *)(v292 + 24) = v297;
                          }
                          else
                          {
                            *(void *)(v292 + 24) = 0;
                            v296 = (uint64_t *)(v298 + 24);
                          }
                        }
                        else
                        {
                          *(void *)(v292 + 16) = v292;
                          *(void *)(v292 + 24) = 0;
                        }
                        uint64_t *v296 = v292;
                      }
                      v292 += 32;
                      v294 -= 32;
                    }
                    while (v294);
                  }
                  uint64_t v284 = *(void *)(v282 + 728);
                  if (v284) {
                    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v284 + 24))(v284, v279);
                  }
                  unint64_t v285 = *v280 & 0xFFFFFFFFFFFFFFF8;
                  *(void *)uint64_t v279 = v285 | *(void *)v279 & 7;
                  *((void *)v279 + 1) = v280;
                  *(void *)(v285 + 8) = v279;
                  *uint64_t v280 = *v280 & 7 | (unint64_t)v279;
                  if (*(void *)&v424[56]) {
                    (*(void (**)(void, llvm::MachineInstr *))(**(void **)&v424[56] + 24))(*(void *)&v424[56], v279);
                  }
                  LODWORD(v416) = 1;
                  uint64_t v417 = 0;
                  uint64_t v418 = 0;
                  llvm::MachineInstr::addOperand(v279, v277, (const llvm::MachineOperand *)&v416);
                  *(void *)int v424 = &unk_1F261CD58;
                  if (*(void *)&v424[32])
                  {
                    int v286 = **(unsigned char **)&v424[32];
                    if ((v286 - 4) > 0x1E)
                    {
                      if ((v286 - 3) >= 0xFFFFFFFE) {
                        uint64_t v287 = *(void *)&v424[32];
                      }
                      else {
                        uint64_t v287 = 0;
                      }
                      if ((v286 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v288 = v287 + 8;
                        goto LABEL_549;
                      }
                      if (v286 == 3) {
                        *(void *)(*(void *)&v424[32] + 8) = 0;
                      }
                    }
                    else if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) == 2 {
                           || *(_DWORD *)(*(void *)&v424[32] + 12))
                    }
                    {
                      uint64_t v304 = *(void *)(*(void *)&v424[32] + 16);
                      if ((v304 & 4) != 0)
                      {
                        unint64_t v288 = v304 & 0xFFFFFFFFFFFFFFF8;
                        if (v288)
                        {
LABEL_549:
                          uint64_t v416 = (unsigned __int8 **)&v424[32];
                          sub_1CC5FA668(v288 + 16, &v416);
                        }
                      }
                    }
                  }
                  int v269 = 1;
                }
              }
            }
          }
          if ((*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        uint64_t v268 = (void *)v268[1];
        if (v268 == v396) {
          goto LABEL_618;
        }
      }
    }
  }
  int v269 = 0;
LABEL_618:
  if (v405[386])
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1420, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1420))
    {
      dword_1EBCC1414 = 3;
      __cxa_guard_release(&qword_1EBCC1420);
    }
    if (dword_1EBCC1414 >= 1)
    {
      unsigned int v406 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)v405 + 176))(v405);
      int v309 = (void *)a2[41];
      if (v309 != v396)
      {
        int v310 = 0;
        while (1)
        {
          for (uint64_t j = v309[7]; (void *)j != v309 + 6; uint64_t j = *(void *)(j + 8))
          {
            if (!sub_1CD42CEAC(j)) {
              goto LABEL_626;
            }
            int v403 = v310;
            unsigned int v425 = (unsigned __int8 *)v427;
            uint64_t v426 = 0x400000000;
            sub_1CBAF9B1C(v424, (void *)j, 0, (uint64_t)v406, 0, 0);
            unint64_t v312 = *(void *)v424;
            int v313 = *(_DWORD *)&v424[8];
            uint64_t v314 = HIDWORD(*(void *)v424);
            if (*(_DWORD *)&v424[8] != *(_DWORD *)&v424[4])
            {
              unsigned int v317 = v426;
              do
              {
                if (v317 >= HIDWORD(v426)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(_DWORD *)&v425[4 * v317] = v314 >> 1;
                unsigned int v317 = v426 + 1;
                LODWORD(v426) = v426 + 1;
                unint64_t v312 = (v312 & 0xFFFFFFFF00000000) + 0x100000000;
                uint64_t v314 = HIDWORD(v312);
              }
              while (v313 != HIDWORD(v312));
            }
            int v315 = dword_1EBCC1414;
            v424[0] = 0;
            *(void *)&v424[8] = j;
            sub_1CD42579C((uint64_t)v424);
            long long v415 = *(_OWORD *)v424;
            if (v424[0] || !v315)
            {
LABEL_641:
              int v310 = v403;
              goto LABEL_642;
            }
            while (1)
            {
              if (sub_1CD42CDC8(*((uint64_t *)&v415 + 1))) {
                goto LABEL_641;
              }
              char v414 = 0;
              *(void *)int v424 = &unk_1F25FA5B8;
              *(void *)&v424[8] = &v414;
              *(void *)&v424[16] = &v425;
              *(void *)&v424[24] = v424;
              sub_1CD42D00C(*((uint64_t *)&v415 + 1), v406, (uint64_t)v424);
              if (*(unsigned char **)&v424[24] == v424)
              {
                (*(void (**)(unsigned char *))(*(void *)v424 + 32))(v424);
              }
              else if (*(void *)&v424[24])
              {
                (*(void (**)(void))(**(void **)&v424[24] + 40))();
              }
              if (v414) {
                break;
              }
              unint64_t v316 = *(void *)(*(void *)(*((void *)&v415 + 1) + 16) + 16);
              sub_1CD42579C((uint64_t)&v415);
              if (!(_BYTE)v415)
              {
                v315 += (int)(v316 >> 3) >> 31;
                if (v315) {
                  continue;
                }
              }
              goto LABEL_641;
            }
            uint64_t v318 = *(void *)(j + 24);
            memset(&v424[8], 0, 64);
            uint64_t v319 = *(void *)(v318 + 32);
            *(void *)int v424 = &unk_1F261CD58;
            *(void *)&v424[8] = v319;
            *(void *)&v424[24] = *(void *)(v319 + 40);
            *(void *)&v424[16] = (*(uint64_t (**)(void))(**(void **)(v319 + 16) + 104))(*(void *)(v319 + 16));
            unsigned int v420 = 0;
            if (!*(void *)&v424[32]) {
              goto LABEL_650;
            }
            int v344 = **(unsigned char **)&v424[32];
            if ((v344 - 4) > 0x1E)
            {
              if ((v344 - 3) >= 0xFFFFFFFE) {
                uint64_t v350 = *(void *)&v424[32];
              }
              else {
                uint64_t v350 = 0;
              }
              if ((v344 - 3) <= 0xFFFFFFFD)
              {
                if (v344 == 3) {
                  *(void *)(*(void *)&v424[32] + 8) = 0;
                }
LABEL_650:
                *(void *)&v424[32] = 0;
                goto LABEL_651;
              }
              unint64_t v346 = v350 + 8;
            }
            else
            {
              if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v424[32] + 12)) {
                goto LABEL_650;
              }
              uint64_t v345 = *(void *)(*(void *)&v424[32] + 16);
              if ((v345 & 4) == 0) {
                goto LABEL_650;
              }
              unint64_t v346 = v345 & 0xFFFFFFFFFFFFFFF8;
              if (!v346) {
                goto LABEL_650;
              }
            }
            uint64_t v416 = (unsigned __int8 **)&v424[32];
            sub_1CC5FA668(v346 + 16, &v416);
            *(void *)&v424[32] = v420;
            if (v420) {
              llvm::MetadataTracking::retrack((uint64_t)&v420, v420, (uint64_t)&v424[32]);
            }
LABEL_651:
            *(void *)&v424[48] = j;
            *(void *)&v424[56] = 0;
            *(void *)&v424[40] = *(void *)(j + 24);
            *(void *)&v424[48] = j;
            if ((unsigned char *)(j + 56) == &v424[32]) {
              goto LABEL_655;
            }
            if (*(void *)&v424[32])
            {
              int v347 = **(unsigned char **)&v424[32];
              if ((v347 - 4) > 0x1E)
              {
                if ((v347 - 3) >= 0xFFFFFFFE) {
                  uint64_t v351 = *(void *)&v424[32];
                }
                else {
                  uint64_t v351 = 0;
                }
                if ((v347 - 3) < 0xFFFFFFFE)
                {
                  if (v347 == 3) {
                    *(void *)(*(void *)&v424[32] + 8) = 0;
                  }
                  goto LABEL_653;
                }
                unint64_t v349 = v351 + 8;
LABEL_731:
                uint64_t v416 = (unsigned __int8 **)&v424[32];
                sub_1CC5FA668(v349 + 16, &v416);
                goto LABEL_653;
              }
              if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v424[32] + 12))
              {
                uint64_t v348 = *(void *)(*(void *)&v424[32] + 16);
                if ((v348 & 4) != 0)
                {
                  unint64_t v349 = v348 & 0xFFFFFFFFFFFFFFF8;
                  if (v349) {
                    goto LABEL_731;
                  }
                }
              }
            }
LABEL_653:
            *(void *)&v424[32] = *(void *)(j + 56);
            if (*(void *)&v424[32]) {
              llvm::MetadataTracking::track((uint64_t)&v424[32], *(unsigned __int8 **)&v424[32], 2);
            }
LABEL_655:
            if (v315 >= 1)
            {
              int v320 = 0;
              int v411 = v315;
              do
              {
                unsigned int v321 = *(llvm::MachineFunction **)&v424[8];
                uint64_t v322 = *(void *)(*(void *)&v424[16] + 8);
                unsigned int v420 = *(unsigned __int8 **)&v424[32];
                if (*(void *)&v424[32]) {
                  llvm::MetadataTracking::track((uint64_t)&v420, *(unsigned __int8 **)&v424[32], 2);
                }
                unsigned int v323 = llvm::MachineFunction::CreateMachineInstr(v321, v322 + 298656, &v420, 0);
                if (!v420) {
                  goto LABEL_660;
                }
                int v337 = *v420;
                if ((v337 - 4) > 0x1E)
                {
                  if ((v337 - 3) >= 0xFFFFFFFE) {
                    uint64_t v340 = v420;
                  }
                  else {
                    uint64_t v340 = 0;
                  }
                  if ((v337 - 3) < 0xFFFFFFFE)
                  {
                    if (v337 == 3) {
                      *((void *)v420 + 1) = 0;
                    }
                    goto LABEL_660;
                  }
                  unint64_t v339 = (unint64_t)(v340 + 8);
                }
                else
                {
                  if ((v420[1] & 0x7F) != 2 && !*((_DWORD *)v420 + 3)) {
                    goto LABEL_660;
                  }
                  uint64_t v338 = *((void *)v420 + 2);
                  if ((v338 & 4) == 0) {
                    goto LABEL_660;
                  }
                  unint64_t v339 = v338 & 0xFFFFFFFFFFFFFFF8;
                  if (!v339) {
                    goto LABEL_660;
                  }
                }
                uint64_t v416 = &v420;
                sub_1CC5FA668(v339 + 16, &v416);
LABEL_660:
                uint64_t v324 = *(unint64_t **)&v424[48];
                uint64_t v325 = *(void *)(*(void *)&v424[40] + 40);
                *((void *)v323 + 3) = v325;
                uint64_t v326 = *(void *)(v325 + 32);
                uint64_t v327 = *((unsigned int *)v323 + 10);
                if (v327)
                {
                  uint64_t v330 = *((void *)v323 + 4);
                  uint64_t v331 = *(void *)(v326 + 40);
                  uint64_t v332 = 32 * v327;
                  do
                  {
                    if (!*(unsigned char *)v330)
                    {
                      uint64_t v333 = *(unsigned int *)(v330 + 4);
                      if ((int)v333 >= 0) {
                        unsigned int v334 = (uint64_t *)(*(void *)(v331 + 272) + 8 * v333);
                      }
                      else {
                        unsigned int v334 = (uint64_t *)(*(void *)(v331 + 24) + 16 * (v333 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v335 = *v334;
                      if (*v334)
                      {
                        uint64_t v336 = *(void *)(v335 + 16);
                        *(void *)(v335 + 16) = v330;
                        *(void *)(v330 + 16) = v336;
                        if (*(unsigned char *)(v330 + 3))
                        {
                          *(void *)(v330 + 24) = v335;
                        }
                        else
                        {
                          *(void *)(v330 + 24) = 0;
                          unsigned int v334 = (uint64_t *)(v336 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v330 + 16) = v330;
                        *(void *)(v330 + 24) = 0;
                      }
                      *unsigned int v334 = v330;
                    }
                    v330 += 32;
                    v332 -= 32;
                  }
                  while (v332);
                }
                uint64_t v328 = *(void *)(v326 + 728);
                if (v328) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v328 + 24))(v328, v323);
                }
                unint64_t v329 = *v324 & 0xFFFFFFFFFFFFFFF8;
                *(void *)unsigned int v323 = v329 | *(void *)v323 & 7;
                *((void *)v323 + 1) = v324;
                *(void *)(v329 + 8) = v323;
                *uint64_t v324 = *v324 & 7 | (unint64_t)v323;
                if (*(void *)&v424[56]) {
                  (*(void (**)(void, llvm::MachineInstr *))(**(void **)&v424[56] + 24))(*(void *)&v424[56], v323);
                }
                LODWORD(v416) = 1;
                uint64_t v417 = 0;
                uint64_t v418 = 0;
                llvm::MachineInstr::addOperand(v323, v321, (const llvm::MachineOperand *)&v416);
                ++v320;
              }
              while (v320 != v411);
            }
            *(void *)int v424 = &unk_1F261CD58;
            if (!*(void *)&v424[32]) {
              goto LABEL_698;
            }
            int v341 = **(unsigned char **)&v424[32];
            if ((v341 - 4) > 0x1E)
            {
              if ((v341 - 3) >= 0xFFFFFFFE) {
                uint64_t v342 = *(void *)&v424[32];
              }
              else {
                uint64_t v342 = 0;
              }
              if ((v341 - 3) < 0xFFFFFFFE)
              {
                if (v341 == 3) {
                  *(void *)(*(void *)&v424[32] + 8) = 0;
                }
                goto LABEL_698;
              }
              unint64_t v343 = v342 + 8;
            }
            else
            {
              if ((*(unsigned char *)(*(void *)&v424[32] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v424[32] + 12)) {
                goto LABEL_698;
              }
              uint64_t v352 = *(void *)(*(void *)&v424[32] + 16);
              if ((v352 & 4) == 0) {
                goto LABEL_698;
              }
              unint64_t v343 = v352 & 0xFFFFFFFFFFFFFFF8;
              if (!v343) {
                goto LABEL_698;
              }
            }
            uint64_t v416 = (unsigned __int8 **)&v424[32];
            sub_1CC5FA668(v343 + 16, &v416);
LABEL_698:
            int v310 = 1;
LABEL_642:
            if (v425 != (unsigned __int8 *)v427) {
              free(v425);
            }
LABEL_626:
            if ((*(unsigned char *)j & 4) == 0)
            {
              while ((*(_WORD *)(j + 44) & 8) != 0)
                uint64_t j = *(void *)(j + 8);
            }
          }
          int v309 = (void *)v309[1];
          if (v309 == v396) {
            goto LABEL_742;
          }
        }
      }
    }
  }
  int v310 = 0;
LABEL_742:
  if (v421 != v423) {
    free(v421);
  }
  return (v404 | v401 | v408 | v269 | v310) & 1;
}

uint64_t sub_1CBBF72E4(uint64_t a1, _DWORD *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1418, memory_order_acquire) & 1) == 0)
  {
    uint64_t v9 = a1;
    int v8 = __cxa_guard_acquire(&qword_1EBCC1418);
    a1 = v9;
    if (v8)
    {
      byte_1EBCC1410 = 1;
      __cxa_guard_release(&qword_1EBCC1418);
      a1 = v9;
    }
  }
  if (byte_1EBCC1410) {
    BOOL v3 = *(unsigned char *)(a1 + 371) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  if (a2[2] < 2u) {
    return 0;
  }
  if (**(_WORD **)(**(void **)a2 + 16) != 4982) {
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)a2 + 8);
  if (**(_WORD **)(v4 + 16) == 4982) {
    return 0;
  }
  v10[1] = (uint64_t)a2;
  uint64_t v11 = a1;
  v10[0] = (uint64_t)&v11;
  if (sub_1CBBF7404(v10, v4, 2)) {
    return 1;
  }
  if (a2[2] != 3) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)a2 + 16);
  uint64_t v5 = 1;
  if ((sub_1CBBF7404(v10, v7, 1) & 1) == 0) {
    return 0;
  }
  return v5;
}

uint64_t sub_1CBBF7404(uint64_t *a1, uint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(*(void *)(a2 + 16) + 8);
  if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
  {
    if ((v5 & 0x400) != 0)
    {
      LODWORD(v7) = 1;
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        unsigned int v19 = *(unsigned __int16 *)(v18 + 44);
        LODWORD(v7) = (v19 >> 3) & 1;
        if ((v19 & 8) == 0) {
          break;
        }
        uint64_t v18 = *(void *)(v18 + 8);
      }
      while ((*(unsigned char *)(*(void *)(v18 + 16) + 9) & 4) == 0);
    }
  }
  else
  {
    uint64_t v7 = (v5 >> 10) & 1;
  }
  int v8 = a3 - v7;
  uint64_t v9 = *(unsigned int *)(a2 + 40);
  if (!v9)
  {
LABEL_10:
    if (v8)
    {
      uint64_t v15 = *(void *)(*(void *)(a2 + 16) + 8);
      if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
      {
        if ((v15 & 0x400) != 0) {
          goto LABEL_26;
        }
        uint64_t v20 = a2;
        while ((*(_WORD *)(v20 + 44) & 8) != 0)
        {
          uint64_t v20 = *(void *)(v20 + 8);
          if ((*(unsigned char *)(*(void *)(v20 + 16) + 9) & 4) != 0) {
            goto LABEL_26;
          }
        }
      }
      else if ((v15 & 0x400) != 0)
      {
        goto LABEL_26;
      }
    }
    return 0;
  }
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = (uint64_t *)(v11 + 8);
  uint64_t v13 = 32 * v9;
  while (1)
  {
    uint64_t v14 = (*(uint64_t (**)(void))(**(void **)v10 + 176))();
    if (sub_1CBC2D2EC(*v12, (unint64_t)(v11 - *(void *)(*v12 + 32)) >> 5, (void *)(v14 + 8)) >= 4) {
      break;
    }
    v11 += 32;
    v12 += 4;
    v13 -= 32;
    if (!v13) {
      goto LABEL_10;
    }
  }
LABEL_26:
  uint64_t v21 = *(void *)(a2 + 24);
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  uint64_t v50 = *(llvm::MachineFunction **)(v21 + 32);
  uint64_t v51 = (*(uint64_t (**)(void *))(**((void **)v50 + 2) + 104))(*((void **)v50 + 2));
  unsigned int v56 = 0;
  *((void *)&v52 + 1) = 0;
  *((void *)&v53 + 1) = a2;
  *(void *)&long long v54 = 0;
  *(void *)&long long v53 = *(void *)(a2 + 24);
  if ((long long *)(a2 + 56) != (long long *)((char *)&v52 + 8)
    && (unsigned int v22 = *(unsigned __int8 **)(a2 + 56), (*((void *)&v52 + 1) = v22) != 0))
  {
    llvm::MetadataTracking::track((uint64_t)&v52 + 8, v22, 2);
    if (v8) {
      goto LABEL_29;
    }
  }
  else if (v8)
  {
LABEL_29:
    for (int i = 0; i != v8; ++i)
    {
      uint64_t v24 = *(void *)(v51 + 8);
      unsigned int v56 = (unsigned __int8 *)*((void *)&v52 + 1);
      if (*((void *)&v52 + 1)) {
        llvm::MetadataTracking::track((uint64_t)&v56, *((unsigned __int8 **)&v52 + 1), 2);
      }
      int v25 = llvm::MachineFunction::CreateMachineInstr(v50, v24 + 298656, &v56, 0);
      if (!v56) {
        goto LABEL_33;
      }
      int v39 = *v56;
      if ((v39 - 4) > 0x1E)
      {
        if ((v39 - 3) >= 0xFFFFFFFE) {
          int v42 = v56;
        }
        else {
          int v42 = 0;
        }
        if ((v39 - 3) < 0xFFFFFFFE)
        {
          if (v39 == 3) {
            *((void *)v56 + 1) = 0;
          }
          goto LABEL_33;
        }
        unint64_t v41 = (unint64_t)(v42 + 8);
      }
      else
      {
        if ((v56[1] & 0x7F) != 2 && !*((_DWORD *)v56 + 3)) {
          goto LABEL_33;
        }
        uint64_t v40 = *((void *)v56 + 2);
        if ((v40 & 4) == 0) {
          goto LABEL_33;
        }
        unint64_t v41 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (!v41) {
          goto LABEL_33;
        }
      }
      v55[0] = &v56;
      sub_1CC5FA668(v41 + 16, v55);
LABEL_33:
      uint64_t v26 = (unint64_t *)*((void *)&v53 + 1);
      uint64_t v27 = *(void *)(v53 + 40);
      *((void *)v25 + 3) = v27;
      uint64_t v28 = *(void *)(v27 + 32);
      uint64_t v29 = *((unsigned int *)v25 + 10);
      if (v29)
      {
        uint64_t v32 = *((void *)v25 + 4);
        uint64_t v33 = *(void *)(v28 + 40);
        uint64_t v34 = 32 * v29;
        do
        {
          if (!*(unsigned char *)v32)
          {
            uint64_t v35 = *(unsigned int *)(v32 + 4);
            if ((int)v35 >= 0) {
              uint64_t v36 = (uint64_t *)(*(void *)(v33 + 272) + 8 * v35);
            }
            else {
              uint64_t v36 = (uint64_t *)(*(void *)(v33 + 24) + 16 * (v35 & 0x7FFFFFFF) + 8);
            }
            uint64_t v37 = *v36;
            if (*v36)
            {
              uint64_t v38 = *(void *)(v37 + 16);
              *(void *)(v37 + 16) = v32;
              *(void *)(v32 + 16) = v38;
              if (*(unsigned char *)(v32 + 3))
              {
                *(void *)(v32 + 24) = v37;
              }
              else
              {
                *(void *)(v32 + 24) = 0;
                uint64_t v36 = (uint64_t *)(v38 + 24);
              }
            }
            else
            {
              *(void *)(v32 + 16) = v32;
              *(void *)(v32 + 24) = 0;
            }
            *uint64_t v36 = v32;
          }
          v32 += 32;
          v34 -= 32;
        }
        while (v34);
      }
      uint64_t v30 = *(void *)(v28 + 728);
      if (v30) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v30 + 24))(v30, v25);
      }
      unint64_t v31 = *v26 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v25 = v31 | *(void *)v25 & 7;
      *((void *)v25 + 1) = v26;
      *(void *)(v31 + 8) = v25;
      unint64_t *v26 = *v26 & 7 | (unint64_t)v25;
      if ((void)v54) {
        (*(void (**)(void, llvm::MachineInstr *))(*(void *)v54 + 24))(v54, v25);
      }
      LODWORD(v55[0]) = 1;
      v55[1] = 0;
      v55[2] = 0;
      llvm::MachineInstr::addOperand(v25, v50, (const llvm::MachineOperand *)v55);
    }
  }
  uint64_t v43 = a1[1];
  uint64_t v44 = *(unsigned int *)(v43 + 8);
  if (v44 == 1)
  {
    int v45 = 0;
  }
  else
  {
    memmove(*(void **)v43, (const void *)(*(void *)v43 + 8), 8 * v44 - 8);
    int v45 = *(_DWORD *)(v43 + 8) - 1;
  }
  *(_DWORD *)(v43 + 8) = v45;
  if (!*((void *)&v52 + 1)) {
    return 1;
  }
  int v46 = **((unsigned char **)&v52 + 1);
  if ((v46 - 4) > 0x1E)
  {
    if ((v46 - 3) >= 0xFFFFFFFE) {
      uint64_t v47 = *((void *)&v52 + 1);
    }
    else {
      uint64_t v47 = 0;
    }
    if ((v46 - 3) < 0xFFFFFFFE)
    {
      if (v46 == 3) {
        *(void *)(*((void *)&v52 + 1) + 8) = 0;
      }
      return 1;
    }
    unint64_t v48 = v47 + 8;
  }
  else
  {
    if ((*(unsigned char *)(*((void *)&v52 + 1) + 1) & 0x7F) != 2 && !*(_DWORD *)(*((void *)&v52 + 1) + 12)) {
      return 1;
    }
    uint64_t v49 = *(void *)(*((void *)&v52 + 1) + 16);
    if ((v49 & 4) == 0) {
      return 1;
    }
    unint64_t v48 = v49 & 0xFFFFFFFFFFFFFFF8;
    if (!v48) {
      return 1;
    }
  }
  v55[0] = (char *)&v52 + 8;
  sub_1CC5FA668(v48 + 16, v55);
  return 1;
}

void sub_1CBBF7A20()
{
}

__n128 sub_1CBBF7A34(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F25FA5B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1CBBF7A80(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F25FA5B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__int32 *sub_1CBBF7AB0(uint64_t a1, __int32 *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  size_t v4 = *(unsigned int *)(v3 + 8);
  uint64_t v5 = *(void *)v3 + 4 * v4;
  __n128 result = wmemchr(*(__int32 **)v3, *a2, v4);
  if (result) {
    uint64_t v7 = (uint64_t)result;
  }
  else {
    uint64_t v7 = v5;
  }
  **(unsigned char **)(a1 + 8) |= v7 != **(void **)(a1 + 16) + 4 * *(unsigned int *)(*(void *)(a1 + 16) + 8);
  return result;
}

uint64_t sub_1CBBF7B14(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v6 = **(unsigned __int16 **)(a2 + 16);
  *(_DWORD *)a3 = v6;
  uint64_t v7 = *(unsigned int *)(a2 + 40);
  if (v7)
  {
    uint64_t v161 = a1;
    uint64_t v8 = 32 * v7;
    uint64_t v9 = *(void *)(a2 + 32) + 16;
    while (1)
    {
      unsigned int v10 = *(_DWORD *)(v9 - 16);
      switch((char)v10)
      {
        case 0:
          if ((v10 & 0x2000000) != 0) {
            goto LABEL_78;
          }
          unint64_t v11 = *(unsigned int *)(v9 - 12);
          uint64_t v12 = 1;
          goto LABEL_76;
        case 1:
          unint64_t v11 = *(void *)v9;
          uint64_t v12 = 2;
          goto LABEL_76;
        case 4:
          uint64_t Symbol = llvm::MachineBasicBlock::getSymbol(*(llvm::MachineBasicBlock **)v9);
          uint64_t v14 = *a1;
          *(void *)(v14 + 272) = *(void *)(*a1 + 272) + 24;
          uint64_t v15 = *(void *)(v14 + 192);
          if (((v15 + 7) & 0xFFFFFFFFFFFFFFF8) - v15 + 24 > *(void *)(v14 + 200) - v15)
          {
            unsigned int v108 = *(_DWORD *)(v14 + 216) >> 7;
            if (v108 >= 0x1E) {
              LOBYTE(v108) = 30;
            }
            uint64_t v109 = 4096 << v108;
            unint64_t v11 = (unint64_t)operator new(4096 << v108, (std::align_val_t)8uLL);
            unint64_t v110 = *(unsigned int *)(v14 + 216);
            if (v110 >= *(unsigned int *)(v14 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v14 + 208) + 8 * v110) = v11;
            ++*(_DWORD *)(v14 + 216);
            *(void *)(v14 + 200) = v11 + v109;
          }
          else
          {
            unint64_t v11 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v14 + 192) = v11 + 24;
          int v16 = *(unsigned __int8 *)(*(void *)(v14 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v11 = 2;
          int v17 = v16 | (*(unsigned __int8 *)(v11 + 4) << 24);
          goto LABEL_49;
        case 7:
          int v21 = *(_DWORD *)v9;
          if (*(_DWORD *)v9 == 64)
          {
            if ((_BYTE)v10) {
              int v22 = ((v10 >> 8) & 0xFFF) - 1;
            }
            else {
              int v22 = -1;
            }
            int v23 = dword_1CDC6D538[v22];
            uint64_t v24 = *(unsigned int *)(v9 + 8);
            uint64_t v25 = *(unsigned int *)(v9 - 12);
            uint64_t v26 = *a1;
            *(void *)(v26 + 272) = *(void *)(*a1 + 272) + 24;
            uint64_t v27 = *(void *)(v26 + 192);
            if (((v27 + 7) & 0xFFFFFFFFFFFFFFF8) - v27 + 24 > *(void *)(v26 + 200) - v27)
            {
              unsigned int v114 = *(_DWORD *)(v26 + 216) >> 7;
              if (v114 >= 0x1E) {
                LOBYTE(v114) = 30;
              }
              uint64_t v115 = 4096 << v114;
              unint64_t v28 = (unint64_t)operator new(4096 << v114, (std::align_val_t)8uLL);
              unint64_t v116 = *(unsigned int *)(v26 + 216);
              if (v116 >= *(unsigned int *)(v26 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v26 + 208) + 8 * v116) = v28;
              ++*(_DWORD *)(v26 + 216);
              *(void *)(v26 + 200) = v28 + v115;
            }
            else
            {
              unint64_t v28 = (v27 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v26 + 192) = v28 + 24;
            *(unsigned char *)unint64_t v28 = 1;
            *(_DWORD *)(v28 + 1) = *(unsigned __int8 *)(v28 + 4) << 24;
            *(void *)(v28 + 8) = 0;
            *(void *)(v28 + 16) = v25 | (v24 << 32);
            uint64_t v29 = *a1;
            unint64_t v31 = (uint64_t *)(*a1 + 192);
            uint64_t v30 = *v31;
            *(void *)(v29 + 272) = *(void *)(*a1 + 272) + 48;
            uint64_t v32 = ((v30 + 7) & 0xFFFFFFFFFFFFFFF8) - v30;
            if (v32 + 48 <= (unint64_t)(*(void *)(v29 + 200) - v30))
            {
              int v33 = 0;
LABEL_74:
              unint64_t v64 = v30 + v32;
              goto LABEL_75;
            }
            unsigned int v117 = *(_DWORD *)(v29 + 216) >> 7;
            if (v117 >= 0x1E) {
              LOBYTE(v117) = 30;
            }
            uint64_t v118 = 4096 << v117;
            unint64_t v64 = (unint64_t)operator new(4096 << v117, (std::align_val_t)8uLL);
            unint64_t v119 = *(unsigned int *)(v29 + 216);
            if (v119 >= *(unsigned int *)(v29 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            int v33 = 0;
            goto LABEL_149;
          }
          if ((v21 - 81) <= 4)
          {
            if ((_BYTE)v10) {
              int v54 = (v10 >> 8) & 0xFFF;
            }
            else {
              int v54 = 0;
            }
            if ((v54 & 0x200) != 0) {
              v54 &= 0xCFFu;
            }
            unsigned int v55 = v54 & 0xFFFFFEFF;
            if (v55)
            {
              unsigned int v56 = v55 - 129;
              if (v56) {
                int v23 = 2;
              }
              else {
                int v23 = 4;
              }
              unsigned int v57 = v56 >> 1;
            }
            else
            {
              unsigned int v57 = 0;
              int v23 = dword_1CDC6D574[v21 - 81];
            }
            int v65 = *(_DWORD *)(v9 - 12);
            uint64_t v66 = *a1;
            *(void *)(v66 + 272) = *(void *)(*a1 + 272) + 24;
            uint64_t v67 = *(void *)(v66 + 192);
            if (((v67 + 7) & 0xFFFFFFFFFFFFFFF8) - v67 + 24 > *(void *)(v66 + 200) - v67)
            {
              unsigned int v120 = *(_DWORD *)(v66 + 216) >> 7;
              if (v120 >= 0x1E) {
                LOBYTE(v120) = 30;
              }
              uint64_t v121 = 4096 << v120;
              unint64_t v28 = (unint64_t)operator new(4096 << v120, (std::align_val_t)8uLL);
              unint64_t v122 = *(unsigned int *)(v66 + 216);
              if (v122 >= *(unsigned int *)(v66 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v66 + 208) + 8 * v122) = v28;
              ++*(_DWORD *)(v66 + 216);
              *(void *)(v66 + 200) = v28 + v121;
            }
            else
            {
              unint64_t v28 = (v67 + 7) & 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)(v66 + 192) = v28 + 24;
            *(unsigned char *)unint64_t v28 = 1;
            *(_DWORD *)(v28 + 1) = *(unsigned __int8 *)(v28 + 4) << 24;
            *(void *)(v28 + 8) = 0;
            *(void *)(v28 + 16) = v57 + 2 * v65;
            int v33 = *(_DWORD *)v9 - 77;
            uint64_t v29 = *v161;
            unint64_t v31 = (uint64_t *)(*v161 + 192);
            uint64_t v30 = *v31;
            *(void *)(v29 + 272) = *(void *)(*v161 + 272) + 48;
            uint64_t v32 = ((v30 + 7) & 0xFFFFFFFFFFFFFFF8) - v30;
            if (v32 + 48 <= (unint64_t)(*(void *)(v29 + 200) - v30)) {
              goto LABEL_74;
            }
            unsigned int v123 = *(_DWORD *)(v29 + 216) >> 7;
            if (v123 >= 0x1E) {
              LOBYTE(v123) = 30;
            }
            uint64_t v118 = 4096 << v123;
            unint64_t v64 = (unint64_t)operator new(4096 << v123, (std::align_val_t)8uLL);
            unint64_t v119 = *(unsigned int *)(v29 + 216);
            if (v119 >= *(unsigned int *)(v29 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
LABEL_149:
            *(void *)(*(void *)(v29 + 208) + 8 * v119) = v64;
            ++*(_DWORD *)(v29 + 216);
            *(void *)(v29 + 200) = v64 + v118;
            goto LABEL_75;
          }
          switch(v21)
          {
            case 'D':
              uint64_t v76 = *(unsigned int *)(v9 + 8);
              uint64_t v77 = *(unsigned int *)(v9 - 12);
              uint64_t v78 = *a1;
              *(void *)(v78 + 272) = *(void *)(*a1 + 272) + 24;
              uint64_t v79 = *(void *)(v78 + 192);
              if (((v79 + 7) & 0xFFFFFFFFFFFFFFF8) - v79 + 24 > *(void *)(v78 + 200) - v79)
              {
                unsigned int v145 = *(_DWORD *)(v78 + 216) >> 7;
                if (v145 >= 0x1E) {
                  LOBYTE(v145) = 30;
                }
                uint64_t v146 = 4096 << v145;
                unint64_t v28 = (unint64_t)operator new(4096 << v145, (std::align_val_t)8uLL);
                unint64_t v147 = *(unsigned int *)(v78 + 216);
                if (v147 >= *(unsigned int *)(v78 + 220)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v78 + 208) + 8 * v147) = v28;
                ++*(_DWORD *)(v78 + 216);
                *(void *)(v78 + 200) = v28 + v146;
              }
              else
              {
                unint64_t v28 = (v79 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              *(void *)(v78 + 192) = v28 + 24;
              *(unsigned char *)unint64_t v28 = 1;
              *(_DWORD *)(v28 + 1) = *(unsigned __int8 *)(v28 + 4) << 24;
              *(void *)(v28 + 8) = 0;
              *(void *)(v28 + 16) = v77 | (v76 << 32);
              uint64_t v80 = *a1;
              unint64_t v31 = (uint64_t *)(*a1 + 192);
              uint64_t v81 = *v31;
              *(void *)(v80 + 272) = *(void *)(*a1 + 272) + 48;
              if (((v81 + 7) & 0xFFFFFFFFFFFFFFF8) - v81 + 48 > *(void *)(v80 + 200) - v81)
              {
                unsigned int v148 = *(_DWORD *)(v80 + 216) >> 7;
                if (v148 >= 0x1E) {
                  LOBYTE(v148) = 30;
                }
                uint64_t v149 = 4096 << v148;
                unint64_t v64 = (unint64_t)operator new(4096 << v148, (std::align_val_t)8uLL);
                unint64_t v150 = *(unsigned int *)(v80 + 216);
                if (v150 >= *(unsigned int *)(v80 + 220)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v80 + 208) + 8 * v150) = v64;
                ++*(_DWORD *)(v80 + 216);
                *(void *)(v80 + 200) = v64 + v149;
              }
              else
              {
                unint64_t v64 = (v81 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              int v23 = 12;
              int v33 = 2;
              break;
            case 'C':
              uint64_t v70 = *(unsigned int *)(v9 + 8);
              uint64_t v71 = *(unsigned int *)(v9 - 12);
              uint64_t v72 = *a1;
              *(void *)(v72 + 272) = *(void *)(*a1 + 272) + 24;
              uint64_t v73 = *(void *)(v72 + 192);
              if (((v73 + 7) & 0xFFFFFFFFFFFFFFF8) - v73 + 24 > *(void *)(v72 + 200) - v73)
              {
                unsigned int v139 = *(_DWORD *)(v72 + 216) >> 7;
                if (v139 >= 0x1E) {
                  LOBYTE(v139) = 30;
                }
                uint64_t v140 = 4096 << v139;
                unint64_t v28 = (unint64_t)operator new(4096 << v139, (std::align_val_t)8uLL);
                unint64_t v141 = *(unsigned int *)(v72 + 216);
                if (v141 >= *(unsigned int *)(v72 + 220)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v72 + 208) + 8 * v141) = v28;
                ++*(_DWORD *)(v72 + 216);
                *(void *)(v72 + 200) = v28 + v140;
              }
              else
              {
                unint64_t v28 = (v73 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              *(void *)(v72 + 192) = v28 + 24;
              *(unsigned char *)unint64_t v28 = 1;
              *(_DWORD *)(v28 + 1) = *(unsigned __int8 *)(v28 + 4) << 24;
              *(void *)(v28 + 8) = 0;
              *(void *)(v28 + 16) = v71 | (v70 << 32);
              uint64_t v74 = *a1;
              unint64_t v31 = (uint64_t *)(*a1 + 192);
              uint64_t v75 = *v31;
              *(void *)(v74 + 272) = *(void *)(*a1 + 272) + 48;
              if (((v75 + 7) & 0xFFFFFFFFFFFFFFF8) - v75 + 48 > *(void *)(v74 + 200) - v75)
              {
                unsigned int v142 = *(_DWORD *)(v74 + 216) >> 7;
                if (v142 >= 0x1E) {
                  LOBYTE(v142) = 30;
                }
                uint64_t v143 = 4096 << v142;
                unint64_t v64 = (unint64_t)operator new(4096 << v142, (std::align_val_t)8uLL);
                unint64_t v144 = *(unsigned int *)(v74 + 216);
                if (v144 >= *(unsigned int *)(v74 + 220)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v74 + 208) + 8 * v144) = v64;
                ++*(_DWORD *)(v74 + 216);
                *(void *)(v74 + 200) = v64 + v143;
              }
              else
              {
                unint64_t v64 = (v75 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              int v23 = 24;
              int v33 = 3;
              break;
            case 'B':
              uint64_t v58 = *(unsigned int *)(v9 + 8);
              uint64_t v59 = *(unsigned int *)(v9 - 12);
              uint64_t v60 = *a1;
              *(void *)(v60 + 272) = *(void *)(*a1 + 272) + 24;
              uint64_t v61 = *(void *)(v60 + 192);
              if (((v61 + 7) & 0xFFFFFFFFFFFFFFF8) - v61 + 24 > *(void *)(v60 + 200) - v61)
              {
                unsigned int v133 = *(_DWORD *)(v60 + 216) >> 7;
                if (v133 >= 0x1E) {
                  LOBYTE(v133) = 30;
                }
                uint64_t v134 = 4096 << v133;
                unint64_t v28 = (unint64_t)operator new(4096 << v133, (std::align_val_t)8uLL);
                unint64_t v135 = *(unsigned int *)(v60 + 216);
                if (v135 >= *(unsigned int *)(v60 + 220)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v60 + 208) + 8 * v135) = v28;
                ++*(_DWORD *)(v60 + 216);
                *(void *)(v60 + 200) = v28 + v134;
              }
              else
              {
                unint64_t v28 = (v61 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              *(void *)(v60 + 192) = v28 + 24;
              *(unsigned char *)unint64_t v28 = 1;
              *(_DWORD *)(v28 + 1) = *(unsigned __int8 *)(v28 + 4) << 24;
              *(void *)(v28 + 8) = 0;
              *(void *)(v28 + 16) = v59 | (v58 << 32);
              uint64_t v62 = *a1;
              unint64_t v31 = (uint64_t *)(*a1 + 192);
              uint64_t v63 = *v31;
              *(void *)(v62 + 272) = *(void *)(*a1 + 272) + 48;
              if (((v63 + 7) & 0xFFFFFFFFFFFFFFF8) - v63 + 48 > *(void *)(v62 + 200) - v63)
              {
                unsigned int v136 = *(_DWORD *)(v62 + 216) >> 7;
                if (v136 >= 0x1E) {
                  LOBYTE(v136) = 30;
                }
                uint64_t v137 = 4096 << v136;
                unint64_t v64 = (unint64_t)operator new(4096 << v136, (std::align_val_t)8uLL);
                unint64_t v138 = *(unsigned int *)(v62 + 216);
                if (v138 >= *(unsigned int *)(v62 + 220)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v62 + 208) + 8 * v138) = v64;
                ++*(_DWORD *)(v62 + 216);
                *(void *)(v62 + 200) = v64 + v137;
              }
              else
              {
                unint64_t v64 = (v63 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              int v23 = 8;
              int v33 = 1;
              break;
            default:
              if (v10 != 7 || (v21 & 0xFFFFFFFE) != 0x56) {
                llvm::report_fatal_error((llvm *)"Unhandled target index type!", (const llvm::Twine *)1);
              }
              uint64_t v82 = *(unsigned int *)(v9 + 8);
              uint64_t v83 = *(unsigned int *)(v9 - 12);
              uint64_t v84 = *a1;
              *(void *)(v84 + 272) = *(void *)(*a1 + 272) + 24;
              uint64_t v85 = *(void *)(v84 + 192);
              if (((v85 + 7) & 0xFFFFFFFFFFFFFFF8) - v85 + 24 > *(void *)(v84 + 200) - v85)
              {
                unsigned int v151 = *(_DWORD *)(v84 + 216) >> 7;
                if (v151 >= 0x1E) {
                  LOBYTE(v151) = 30;
                }
                uint64_t v152 = 4096 << v151;
                unint64_t v28 = (unint64_t)operator new(4096 << v151, (std::align_val_t)8uLL);
                unint64_t v153 = *(unsigned int *)(v84 + 216);
                if (v153 >= *(unsigned int *)(v84 + 220)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *(void *)(*(void *)(v84 + 208) + 8 * v153) = v28;
                ++*(_DWORD *)(v84 + 216);
                *(void *)(v84 + 200) = v28 + v152;
              }
              else
              {
                unint64_t v28 = (v85 + 7) & 0xFFFFFFFFFFFFFFF8;
              }
              *(void *)(v84 + 192) = v28 + 24;
              *(unsigned char *)unint64_t v28 = 1;
              *(_DWORD *)(v28 + 1) = *(unsigned __int8 *)(v28 + 4) << 24;
              *(void *)(v28 + 8) = 0;
              *(void *)(v28 + 16) = v83 | (v82 << 32);
              if (*(_DWORD *)v9 == 86) {
                int v33 = 9;
              }
              else {
                int v33 = 10;
              }
              if (*(_DWORD *)v9 == 86) {
                int v86 = 2;
              }
              else {
                int v86 = 4;
              }
              int v23 = v86 << sub_1CBE52FAC(**(unsigned __int16 **)(a2 + 16));
              uint64_t v87 = *v161;
              unint64_t v31 = (uint64_t *)(*v161 + 192);
              uint64_t v30 = *v31;
              *(void *)(v87 + 272) = *(void *)(*v161 + 272) + 48;
              uint64_t v32 = ((v30 + 7) & 0xFFFFFFFFFFFFFFF8) - v30;
              if (v32 + 48 <= (unint64_t)(*(void *)(v87 + 200) - v30)) {
                goto LABEL_74;
              }
              unsigned int v88 = *(_DWORD *)(v87 + 216) >> 7;
              if (v88 >= 0x1E) {
                LOBYTE(v88) = 30;
              }
              uint64_t v89 = 4096 << v88;
              unint64_t v64 = (unint64_t)operator new(4096 << v88, (std::align_val_t)8uLL);
              unint64_t v90 = *(unsigned int *)(v87 + 216);
              if (v90 >= *(unsigned int *)(v87 + 220)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(*(void *)(v87 + 208) + 8 * v90) = v64;
              ++*(_DWORD *)(v87 + 216);
              *(void *)(v87 + 200) = v64 + v89;
              break;
          }
LABEL_75:
          *(unsigned char *)(v64 + 8) = 4;
          unint64_t v11 = v64 + 8;
          uint64_t *v31 = v64 + 48;
          *(_DWORD *)(v64 + 9) = *(unsigned __int8 *)(v64 + 12) << 24;
          *(void *)(v64 + 16) = 0;
          *(void *)unint64_t v64 = &unk_1F25FDA08;
          *(_DWORD *)(v64 + 24) = v33;
          *(void *)(v64 + 32) = v28;
          *(_DWORD *)(v64 + 40) = v23;
          uint64_t v12 = 5;
          a1 = v161;
          goto LABEL_76;
        case 10:
          uint64_t v18 = *(llvm::MachineBasicBlock **)v9;
          uint64_t Symbol = llvm::TargetMachine::getSymbol(*(llvm::TargetMachine **)(a1[1] + 248), *(const llvm::GlobalValue **)v9);
          if (*(_DWORD *)(v9 - 16)) {
            int v19 = ((*(_DWORD *)(v9 - 16) >> 8) & 0xFFF) - 8;
          }
          else {
            int v19 = -8;
          }
          if (v19 > 5)
          {
            int v20 = 0;
            if (!v18) {
              goto LABEL_46;
            }
          }
          else
          {
            int v20 = dword_1CDC6D588[v19];
            if (!v18) {
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)v18 + 16) == 3)
          {
            uint64_t Metadata = llvm::Value::getMetadata((uint64_t)v18, "agx.bind", 8uLL);
            if (Metadata)
            {
              uint64_t v35 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
              uint64_t v37 = *v35;
              uint64_t v36 = v35[1];
              if (*(unsigned char *)(*(void *)(*(void *)(v37 + 128) + 24) + 8) != 17) {
                goto LABEL_31;
              }
              if (*(unsigned char *)v36 != 1 || (uint64_t v38 = *(void *)(v36 + 128), *(unsigned char *)(v38 + 16) != 16))
              {
                uint64_t v36 = *(void *)(v36 - 8 * *(unsigned int *)(v36 + 8));
LABEL_31:
                uint64_t v38 = *(void *)(v36 + 128);
              }
              int v39 = (void *)(v38 + 24);
              if (*(_DWORD *)(v38 + 32) >= 0x41u) {
                int v39 = (void *)*v39;
              }
              int v40 = *(_DWORD *)v39;
              if (v40 == 114 || v40 == 18)
              {
                uint64_t v42 = llvm::Value::getMetadata((uint64_t)v18, "agx.bind", 8uLL);
                if (!v42) {
                  goto LABEL_118;
                }
                uint64_t v43 = (void *)(v42 - 8 * *(unsigned int *)(v42 + 8));
                uint64_t v44 = v43[1];
                if (*(unsigned char *)(*(void *)(*(void *)(*v43 + 128) + 24) + 8) == 17)
                {
                  if (*(unsigned char *)v44 != 1 || (uint64_t v45 = *(void *)(v44 + 128), *(unsigned char *)(v45 + 16) != 16))
                  {
                    int v46 = (void *)(v44 - 8 * *(unsigned int *)(v44 + 8));
                    uint64_t v47 = *(void *)(*v46 + 128);
                    unint64_t v48 = (void *)(v47 + 24);
                    if (*(_DWORD *)(v47 + 32) >= 0x41u) {
                      unint64_t v48 = (void *)*v48;
                    }
                    uint64_t v49 = (void *)*v48;
                    uint64_t v50 = v46[1];
                    goto LABEL_112;
                  }
                }
                else
                {
                  uint64_t v45 = *(void *)(v44 + 128);
                }
                uint64_t v95 = (void *)(v45 + 24);
                if (*(_DWORD *)(v45 + 32) >= 0x41u) {
                  uint64_t v95 = (void *)*v95;
                }
                uint64_t v49 = (void *)*v95;
                uint64_t v50 = v43[2];
LABEL_112:
                uint64_t v96 = *(void *)(v50 + 128);
                uint64_t v97 = (void *)(v96 + 24);
                if (*(_DWORD *)(v96 + 32) >= 0x41u) {
                  uint64_t v97 = (void *)*v97;
                }
                if (v49 == 114 || v49 == 18)
                {
                  uint64_t v132 = (void *)*v97;
                  uint64_t v100 = v132 & 0xFFFFFF00;
                  uint64_t v99 = v132;
                }
                else
                {
LABEL_118:
                  uint64_t v99 = 0;
                  uint64_t v100 = 0;
                }
                uint64_t v101 = *a1;
                *(void *)(v101 + 272) = *(void *)(*a1 + 272) + 24;
                uint64_t v102 = *(void *)(v101 + 192);
                if (((v102 + 7) & 0xFFFFFFFFFFFFFFF8) - v102 + 24 > *(void *)(v101 + 200) - v102)
                {
                  unsigned int v124 = *(_DWORD *)(v101 + 216) >> 7;
                  if (v124 >= 0x1E) {
                    LOBYTE(v124) = 30;
                  }
                  uint64_t v159 = 4096 << v124;
                  unint64_t v103 = (unint64_t)operator new(4096 << v124, (std::align_val_t)8uLL);
                  unint64_t v125 = *(unsigned int *)(v101 + 216);
                  if (v125 >= *(unsigned int *)(v101 + 220)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(v101 + 208) + 8 * v125) = v103;
                  ++*(_DWORD *)(v101 + 216);
                  *(void *)(v101 + 200) = v103 + v159;
                }
                else
                {
                  unint64_t v103 = (v102 + 7) & 0xFFFFFFFFFFFFFFF8;
                }
                *(void *)(v101 + 192) = v103 + 24;
                int v104 = *(unsigned __int8 *)(*(void *)(v101 + 152) + 18);
                *(unsigned char *)unint64_t v103 = 2;
                *(_DWORD *)(v103 + 1) = (*(unsigned __int8 *)(v103 + 4) << 24) | (v104 << 16) | v20;
                *(void *)(v103 + 8) = 0;
                *(void *)(v103 + 16) = Symbol;
                *(void *)(v101 + 272) += 24;
                uint64_t v105 = *(void *)(v101 + 192);
                if (((v105 + 7) & 0xFFFFFFFFFFFFFFF8) - v105 + 24 > *(void *)(v101 + 200) - v105)
                {
                  unsigned int v126 = *(_DWORD *)(v101 + 216) >> 7;
                  if (v126 >= 0x1E) {
                    LOBYTE(v126) = 30;
                  }
                  uint64_t v127 = 4096 << v126;
                  unint64_t v106 = (unint64_t)operator new(4096 << v126, (std::align_val_t)8uLL);
                  unint64_t v128 = *(unsigned int *)(v101 + 216);
                  if (v128 >= *(unsigned int *)(v101 + 220)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(v101 + 208) + 8 * v128) = v106;
                  ++*(_DWORD *)(v101 + 216);
                  *(void *)(v101 + 200) = v106 + v127;
                }
                else
                {
                  unint64_t v106 = (v105 + 7) & 0xFFFFFFFFFFFFFFF8;
                }
                *(void *)(v101 + 192) = v106 + 24;
                *(unsigned char *)unint64_t v106 = 1;
                *(_DWORD *)(v106 + 1) = *(unsigned __int8 *)(v106 + 4) << 24;
                *(void *)(v106 + 8) = 0;
                *(void *)(v106 + 16) = v100 | v99;
                *(void *)(v101 + 272) += 32;
                uint64_t v107 = *(void *)(v101 + 192);
                if (((v107 + 7) & 0xFFFFFFFFFFFFFFF8) - v107 + 32 > *(void *)(v101 + 200) - v107)
                {
                  unsigned int v129 = *(_DWORD *)(v101 + 216) >> 7;
                  if (v129 >= 0x1E) {
                    LOBYTE(v129) = 30;
                  }
                  uint64_t v130 = 4096 << v129;
                  unint64_t v11 = (unint64_t)operator new(4096 << v129, (std::align_val_t)8uLL);
                  unint64_t v131 = *(unsigned int *)(v101 + 216);
                  if (v131 >= *(unsigned int *)(v101 + 220)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(*(void *)(v101 + 208) + 8 * v131) = v11;
                  ++*(_DWORD *)(v101 + 216);
                  *(void *)(v101 + 200) = v11 + v130;
                }
                else
                {
                  unint64_t v11 = (v107 + 7) & 0xFFFFFFFFFFFFFFF8;
                }
                *(void *)(v101 + 192) = v11 + 32;
                *(unsigned char *)unint64_t v11 = 0;
                *(_DWORD *)(v11 + 1) = *(unsigned __int8 *)(v11 + 4) << 24;
                *(void *)(v11 + 8) = 0;
                *(void *)(v11 + 16) = v103;
                *(void *)(v11 + 24) = v106;
                goto LABEL_50;
              }
            }
          }
LABEL_46:
          uint64_t v51 = *a1;
          *(void *)(v51 + 272) = *(void *)(*a1 + 272) + 24;
          uint64_t v52 = *(void *)(v51 + 192);
          if (((v52 + 7) & 0xFFFFFFFFFFFFFFF8) - v52 + 24 > *(void *)(v51 + 200) - v52)
          {
            unsigned int v111 = *(_DWORD *)(v51 + 216) >> 7;
            if (v111 >= 0x1E) {
              LOBYTE(v111) = 30;
            }
            uint64_t v112 = 4096 << v111;
            unint64_t v11 = (unint64_t)operator new(4096 << v111, (std::align_val_t)8uLL);
            unint64_t v113 = *(unsigned int *)(v51 + 216);
            if (v113 >= *(unsigned int *)(v51 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v51 + 208) + 8 * v113) = v11;
            ++*(_DWORD *)(v51 + 216);
            *(void *)(v51 + 200) = v11 + v112;
          }
          else
          {
            unint64_t v11 = (v52 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v51 + 192) = v11 + 24;
          int v53 = *(unsigned __int8 *)(*(void *)(v51 + 152) + 18);
          *(unsigned char *)unint64_t v11 = 2;
          int v17 = (*(unsigned __int8 *)(v11 + 4) << 24) | (v53 << 16) | v20;
LABEL_49:
          *(_DWORD *)(v11 + 1) = v17;
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = Symbol;
LABEL_50:
          uint64_t v12 = 5;
LABEL_76:
          unint64_t v68 = *(unsigned int *)(a3 + 24);
          if (v68 >= *(unsigned int *)(a3 + 28)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v69 = (uint64_t *)(*(void *)(a3 + 16) + 16 * v68);
          *uint64_t v69 = v12;
          v69[1] = v11;
          ++*(_DWORD *)(a3 + 24);
LABEL_78:
          v9 += 32;
          v8 -= 32;
          if (!v8)
          {
            int v6 = *(_DWORD *)a3;
            uint64_t v4 = a2;
            goto LABEL_214;
          }
          break;
        case 11:
          unint64_t v91 = *sub_1CD89D224(a1[1], *(void *)(*(void *)v9 - 32));
          uint64_t v92 = *a1;
          *(void *)(v92 + 272) = *(void *)(*a1 + 272) + 24;
          uint64_t v93 = *(void *)(v92 + 192);
          if (((v93 + 7) & 0xFFFFFFFFFFFFFFF8) - v93 + 24 > *(void *)(v92 + 200) - v93)
          {
            unsigned int v154 = *(_DWORD *)(v92 + 216) >> 7;
            if (v154 >= 0x1E) {
              LOBYTE(v154) = 30;
            }
            uint64_t v155 = 4096 << v154;
            unint64_t v11 = (unint64_t)operator new(4096 << v154, (std::align_val_t)8uLL);
            unint64_t v156 = *(unsigned int *)(v92 + 216);
            if (v156 >= *(unsigned int *)(v92 + 220)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(void *)(*(void *)(v92 + 208) + 8 * v156) = v11;
            ++*(_DWORD *)(v92 + 216);
            *(void *)(v92 + 200) = v11 + v155;
          }
          else
          {
            unint64_t v11 = (v93 + 7) & 0xFFFFFFFFFFFFFFF8;
          }
          *(void *)(v92 + 192) = v11 + 24;
          int v94 = *(unsigned __int8 *)(*(void *)(v92 + 152) + 18) << 16;
          *(unsigned char *)unint64_t v11 = 2;
          *(_DWORD *)(v11 + 1) = v94 | (*(unsigned __int8 *)(v11 + 4) << 24);
          *(void *)(v11 + 8) = 0;
          *(void *)(v11 + 16) = v91;
          goto LABEL_50;
        case 12:
          goto LABEL_78;
        default:
          llvm::MachineInstr::dump((llvm::MachineInstr *)a2);
          __break(1u);
          JUMPOUT(0x1CBBF8DD0);
      }
    }
  }
LABEL_214:
  uint64_t result = sub_1CBE52E8C(v6);
  if ((result & 0xFF00000000) != 0 && (result == 105 || result == 101))
  {
    uint64_t result = sub_1CBDA6464(**(unsigned __int16 **)(v4 + 16), 0x2Fu);
    uint64_t v158 = *(void *)(a3 + 16) + 16 * result;
    *(void *)(v158 + 8) = *(unsigned __int8 *)(v158 + 8);
  }
  return result;
}

void sub_1CBBF8E04()
{
}

void sub_1CBBF8E9C()
{
}

void sub_1CBBF8F40(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  char v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBBF8FF4(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBBF90A0()
{
  return "AGX3 post-RA peephole pass";
}

void sub_1CBBF90B0(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CBBF910C(void *a1, void *a2)
{
  uint64_t v511 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  a1[32] = v4;
  a1[31] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  uint64_t v425 = (*(uint64_t (**)(void))(*(void *)a1[32] + 176))(a1[32]);
  a1[33] = v425;
  uint64_t v5 = a2[5];
  uint64_t v422 = a1;
  a1[34] = v5;
  unsigned int v420 = (llvm::MachineFunction *)a2;
  if (!byte_1EBCC1568 || (int v6 = (void *)a2[41], v423 = a2 + 40, v6 == a2 + 40))
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    BOOL v430 = &v461;
    int v428 = &v452;
    uint64_t v8 = &v484;
    uint64_t v444 = &v493;
    uint64_t v9 = (unsigned int *)&v494;
    int v448 = (unsigned int *)&v499;
    uint64_t v439 = &v502;
    unsigned int v440 = &v497;
    int v449 = (llvm::MachineBasicBlock *)v457;
    unsigned int v446 = (int *)&v509;
    __dst = v462;
    uint64_t v416 = &v468;
    uint64_t v436 = &v504;
    v437 = &v470;
    int v445 = (void **)v471;
    unsigned int v438 = v474;
    uint64_t v434 = &v476;
    int v435 = &v473;
    int v432 = &v463;
    unint64_t v433 = &v477;
    unsigned int v431 = &v464;
    __src = &v484;
    int v447 = (unsigned int *)&v494;
    do
    {
      int v424 = v7;
      int v429 = 0;
      uint64_t v10 = *(void *)(v6[4] + 40);
      uint64_t v426 = v6;
      uint64_t v427 = v10;
      unsigned int v442 = v6 + 6;
      do
      {
        uint64_t v11 = v6[7];
        int v450 = v428;
        uint64_t v451 = 0;
        uint64_t v452 = v425;
        uint64_t v453 = v427;
        __int16 v454 = 0;
        if ((void *)v11 == v442) {
          break;
        }
        do
        {
          uint64_t v12 = v452;
          uint64_t v13 = v453;
          if (!sub_1CBBFBF7C(v11, v452, v453)) {
            goto LABEL_744;
          }
          v482 = v8;
          int v483 = (void *)0x1000000000;
          char v490 = 1;
          unint64_t v491 = v444;
          uint64_t v492 = 0x1000000000;
          char v506 = 0;
          *(void *)uint64_t v9 = 0;
          *((void *)v9 + 1) = 0;
          v9[4] = 0;
          uint64_t v14 = v440;
          *(_OWORD *)unsigned int v440 = 0u;
          *((_OWORD *)v14 + 1) = 0u;
          *((_DWORD *)v14 + 8) = 0;
          uint64_t v15 = v439;
          v439[1] = 0;
          long long v15[2] = 0;
          *uint64_t v15 = 0;
          *((unsigned char *)v15 + 24) = 0;
          sub_1CBBFC2F4(v9);
          uint64_t v497 = v12;
          uint64_t v498 = v13;
          sub_1CBBFC2F4(v448);
          uint64_t v502 = v12;
          uint64_t v503 = v13;
          uint64_t v16 = *(void *)(v11 + 24) + 48;
          uint64_t v17 = v11;
          if (v11 == v16)
          {
LABEL_48:
            if (v17 != v16)
            {
              LODWORD(v483) = 0;
              sub_1CBBFC2F4(v9);
              sub_1CBBFC2F4(v448);
              LODWORD(v492) = 0;
              LOBYTE(v505) = 0;
              char v506 = 0;
              uint64_t v16 = v17;
              char v490 = 1;
            }
          }
          else
          {
            uint64_t v17 = v11;
            while (sub_1CBBFBF7C(v17, v497, v498))
            {
              uint64_t v18 = *(unsigned int **)(v17 + 32);
              if (((v18[8] >> 26) & ~HIBYTE(v18[8]) & 1) == 0) {
                goto LABEL_48;
              }
              uint64_t v19 = v18[9];
              uint64_t v20 = v18[1];
              if (sub_1CBBFC438((uint64_t)v9, v18[1]) || sub_1CBBFC438((uint64_t)v9, v19)) {
                goto LABEL_48;
              }
              BOOL v455 = v449;
              uint64_t v456 = 0x400000000;
              sub_1CBBFC238((uint64_t)&v507, v20, *(void *)(v502 + 8), *(void *)(v502 + 56));
              int v21 = (int *)v507;
              if (v508)
              {
                unsigned int v22 = v456;
                uint64_t v23 = 4 * v508;
                do
                {
                  uint64_t v24 = sub_1CBBFC6DC(v499, v501, *v21);
                  if (v22 >= HIDWORD(v456)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)v455 + v22) = v24;
                  unsigned int v22 = v456 + 1;
                  LODWORD(v456) = v456 + 1;
                  ++v21;
                  v23 -= 4;
                }
                while (v23);
                int v21 = (int *)v507;
                uint64_t v9 = v447;
              }
              if (v21 != v446) {
                free(v21);
              }
              uint64_t v25 = (llvm::MachineBasicBlock *)v455;
              if (v456)
              {
                uint64_t v26 = 0;
                uint64_t v27 = 8 * v456;
                while (*(_DWORD *)((char *)v455 + v26))
                {
                  v26 += 8;
                  if (v27 == v26)
                  {
                    uint64_t v28 = 0;
                    unsigned int v29 = *((_DWORD *)v455 + 1);
                    while (*(_DWORD *)((char *)v455 + v28 + 4) == v29)
                    {
                      v28 += 8;
                      if (v27 == v28) {
                        goto LABEL_31;
                      }
                    }
                    break;
                  }
                }
                unsigned int v29 = 0;
              }
              else
              {
                unsigned int v29 = *((_DWORD *)v455 + 1);
LABEL_31:
                if (!sub_1CBBFC02C(v20, v29, v502, v503)) {
                  unsigned int v29 = 0;
                }
                uint64_t v25 = (llvm::MachineBasicBlock *)v455;
              }
              if (v25 != v449) {
                free(v25);
              }
              if (v29)
              {
                unint64_t v30 = v483;
              }
              else
              {
                if (sub_1CBBFC438((uint64_t)v448, v20)) {
                  goto LABEL_48;
                }
                unint64_t v31 = v483;
                if (v483) {
                  goto LABEL_53;
                }
                unint64_t v30 = 0;
              }
              if (v30 >= HIDWORD(v483)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v482 + v30) = v17;
              LODWORD(v483) = v483 + 1;
              sub_1CBBFC528((uint64_t)v9, v19, v20);
              sub_1CBBFC528((uint64_t)v448, v20, v19);
              if ((*(unsigned char *)v17 & 4) == 0)
              {
                while ((*(_WORD *)(v17 + 44) & 8) != 0)
                  uint64_t v17 = *(void *)(v17 + 8);
              }
              uint64_t v17 = *(void *)(v17 + 8);
              if (v17 == v16) {
                goto LABEL_51;
              }
            }
            uint64_t v16 = v17;
          }
LABEL_51:
          unint64_t v31 = v483;
          if (v483)
          {
            uint64_t v17 = v16;
LABEL_53:
            uint64_t v32 = *(unsigned int *)(*(void *)(*((void *)v482 + v31 - 1) + 32) + 36);
            uint64_t v33 = *(unsigned int *)(*(void *)(*(void *)v482 + 32) + 4);
            uint64_t v8 = (uint64_t *)__src;
            if (!v506) {
              char v506 = 1;
            }
            uint64_t v505 = v32 | (v33 << 32);
            uint64_t v504 = v17;
            unsigned int v460 = __dst;
            unint64_t v461 = 0x1000000000;
            if (v482 == __src)
            {
              if (v31 >= 0x11) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              memcpy(__dst, __src, 8 * v31);
              LODWORD(v461) = v31;
            }
            else
            {
              unsigned int v460 = v482;
              unint64_t v461 = __PAIR64__(HIDWORD(v483), v31);
              v482 = __src;
              HIDWORD(v483) = 0;
            }
            LODWORD(v483) = 0;
            char v467 = v490;
            long long v468 = v437;
            uint64_t v469 = 0x1000000000;
            int v34 = v492;
            if (v492)
            {
              if (v491 == v444)
              {
                if (v492 >= 0x11) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(v437, v444, 8 * v492);
                LODWORD(v469) = v34;
              }
              else
              {
                long long v468 = v491;
                uint64_t v469 = v492;
                unint64_t v491 = v444;
                HIDWORD(v492) = 0;
              }
              LODWORD(v492) = 0;
            }
            uint64_t v35 = 0;
            v471[0] = v494;
            int v472 = v496;
            v474[0] = v499;
            unsigned int v475 = v501;
            uint64_t v36 = v436;
            uint64_t v37 = v433;
            *((_DWORD *)v433 + 4) = *((_DWORD *)v436 + 4);
            uint64_t v494 = 0;
            v471[1] = v495;
            uint64_t v495 = 0;
            int v496 = 0;
            *(_OWORD *)int v435 = *(_OWORD *)v440;
            uint64_t v499 = 0;
            v474[1] = v500;
            uint64_t v500 = 0;
            unsigned int v501 = 0;
            *(_OWORD *)uint64_t v434 = *(_OWORD *)v439;
            *(_OWORD *)uint64_t v37 = *(_OWORD *)v36;
            char v481 = 1;
          }
          else
          {
            uint64_t v504 = v16;
            LOBYTE(v460) = 0;
            char v481 = 0;
            uint64_t v35 = v499;
            uint64_t v8 = (uint64_t *)__src;
          }
          MEMORY[0x1D25D9CD0](v35, 4);
          MEMORY[0x1D25D9CD0](v494, 4);
          if (v491 != v444) {
            free(v491);
          }
          if (v482 != v8) {
            free(v482);
          }
          if (!v481) {
            goto LABEL_744;
          }
          uint64_t v38 = v477;
          unsigned int v39 = v451;
          if (v451)
          {
            do
            {
              --v39;
              int v40 = (char *)v450;
              unint64_t v41 = (char *)v450 + 400 * v39;
              uint64_t v42 = *((unsigned int *)v41 + 2);
              if (v42)
              {
                uint64_t v43 = (char *)v450 + 400 * v39;
                if (v43[392] && v461 && v480)
                {
                  uint64_t v44 = *((void *)v43 + 48);
                  BOOL v45 = v42 == v461 && v44 == v479;
                  if (v45 && HIDWORD(v44) == v478)
                  {
                    uint64_t v48 = 0;
                    unsigned int v49 = v42 - 1;
                    while (*(_DWORD *)(*(void *)(*(void *)(*(void *)v41 + 8 * v48) + 32) + 4) == *(_DWORD *)(*(void *)(*((void *)v460 + v49) + 32) + 36))
                    {
                      ++v48;
                      --v49;
                      if (v42 == v48)
                      {
                        if (*((unsigned char *)v450 + 400 * v39 + 144))
                        {
                          sub_1CBBFCF14((uint64_t **)v450 + 50 * v39);
                          sub_1CBBFCF14((uint64_t **)&v460);
                          uint64_t v50 = &v40[400 * v39];
                          unsigned int v53 = *((_DWORD *)v50 + 40);
                          uint64_t v52 = v50 + 160;
                          uint64_t v51 = v53;
                          if (v53)
                          {
                            int v54 = (int **)*((void *)v52 - 1);
                            unsigned int v55 = (unsigned int *)&v40[400 * v39 + 388];
                            uint64_t v56 = 8 * v51;
                            do
                            {
                              uint64_t v58 = *v54++;
                              unsigned int v57 = v58;
                              int v59 = (*v58 >> 26) & ~HIBYTE(*v58);
                              llvm::MachineOperand::setReg((uint64_t)v58, *v55);
                              int v60 = *v58;
                              int v61 = *v58 | 0x4000000;
                              if (v59) {
                                int v60 = v61;
                              }
                              *unsigned int v57 = v60 | 0x8000000;
                              v56 -= 8;
                            }
                            while (v56);
                          }
                          *uint64_t v52 = 0;
                          LOBYTE(v454) = 1;
                        }
                        else if (v42 != 1)
                        {
                          LOBYTE(v454) = 1;
                          sub_1CBBFC94C((unsigned int *)v450 + 100 * v39);
                          sub_1CBBFC94C((unsigned int *)&v460);
                        }
                        goto LABEL_117;
                      }
                    }
                  }
                }
                if ((sub_1CBBFD0D8((uint64_t)v450 + 400 * v39, (uint64_t)v445) & 1) != 0
                  || sub_1CBBFD0D8((uint64_t)v41, (uint64_t)v438))
                {
                  *((_DWORD *)v41 + 2) = 0;
                  uint64_t v47 = (unsigned int *)&v40[400 * v39];
                  sub_1CBBFC2F4(v47 + 74);
                  sub_1CBBFC2F4(v47 + 84);
                  v47[40] = 0;
                  v43[384] = 0;
                  v43[392] = 0;
                  *((unsigned char *)v47 + 144) = 1;
                  HIBYTE(v454) = 1;
                }
              }
            }
            while (v39);
            unint64_t v62 = v451;
          }
          else
          {
            unint64_t v62 = 0;
          }
          uint64_t v63 = (uint64_t *)v450;
          if (v62 >= HIDWORD(v451))
          {
            BOOL v132 = v450 <= &v460 && (char *)v450 + 400 * v62 > (char *)&v460;
            if (v132) {
              unint64_t v133 = 0x8F5C28F5C28F5C29 * (((char *)&v460 - (unsigned char *)v450) >> 4);
            }
            else {
              unint64_t v133 = -1;
            }
            unint64_t v134 = v62 + 1;
            if (v62 == 0xFFFFFFFF) {
              sub_1CD0A88F0(v134);
            }
            if (HIDWORD(v451) == 0xFFFFFFFFLL) {
              sub_1CD0A89A8(0xFFFFFFFFuLL);
            }
            unint64_t v135 = (2 * HIDWORD(v451)) | 1;
            if (v135 <= v134) {
              unint64_t v135 = v62 + 1;
            }
            if (v135 >= 0xFFFFFFFF) {
              uint64_t v136 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v136 = v135;
            }
            uint64_t v137 = (uint64_t *)malloc_type_malloc(400 * v136, 0x4065EBACuLL);
            if (!v137) {
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            uint64_t v63 = v137;
            unint64_t v138 = (uint64_t *)v450;
            if (v451)
            {
              BOOL v418 = v132;
              uint64_t v419 = v136;
              unint64_t v417 = v133;
              unint64_t v139 = 0;
              uint64_t v421 = 400 * v451;
              do
              {
                uint64_t v140 = &v63[v139 / 8];
                unint64_t v141 = &v138[v139 / 8];
                unsigned int v142 = &v63[v139 / 8 + 2];
                *uint64_t v140 = (uint64_t)v142;
                v140[1] = 0x1000000000;
                if (v138 != v63)
                {
                  unint64_t v143 = *((unsigned int *)v141 + 2);
                  if (*((_DWORD *)v141 + 2))
                  {
                    unint64_t v144 = &v138[v139 / 8];
                    uint64_t v146 = (uint64_t)&v138[v139 / 8 + 2];
                    unsigned int v145 = (const void *)v138[v139 / 8];
                    if ((const void *)v146 == v145)
                    {
                      if (v143 >= 0x11) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      memcpy(v142, v145, 8 * *((unsigned int *)v141 + 2));
                      unint64_t v141 = &v138[v139 / 8];
                      *((_DWORD *)v140 + 2) = v143;
                    }
                    else
                    {
                      *uint64_t v140 = (uint64_t)v145;
                      *((_DWORD *)v140 + 2) = v143;
                      *((_DWORD *)v140 + 3) = *((_DWORD *)v144 + 3);
                      *unint64_t v144 = v146;
                      *((_DWORD *)v144 + 3) = 0;
                    }
                    *((_DWORD *)v141 + 2) = 0;
                  }
                }
                *((unsigned char *)v140 + 144) = *((unsigned char *)v141 + 144);
                v140[19] = (uint64_t)(v140 + 21);
                v140[20] = 0x1000000000;
                unsigned int v147 = *((_DWORD *)v141 + 40);
                if (v147) {
                  BOOL v148 = v141 == v140;
                }
                else {
                  BOOL v148 = 1;
                }
                if (!v148)
                {
                  uint64_t v149 = (const void *)v141[19];
                  unint64_t v150 = &v138[v139 / 8];
                  uint64_t v151 = (uint64_t)&v138[v139 / 8 + 21];
                  if ((const void *)v151 == v149)
                  {
                    if (v147 >= 0x11)
                    {
                      long long v415 = v141;
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    memcpy(v140 + 21, v149, 8 * *((unsigned int *)v141 + 40));
                    *((_DWORD *)v140 + 40) = v147;
                    unint64_t v141 = &v138[v139 / 8];
                  }
                  else
                  {
                    v140[19] = (uint64_t)v149;
                    *((_DWORD *)v140 + 40) = v147;
                    *((_DWORD *)v140 + 41) = *((_DWORD *)v150 + 41);
                    v141[19] = v151;
                    *((_DWORD *)v150 + 41) = 0;
                  }
                  *((_DWORD *)v141 + 40) = 0;
                }
                uint64_t v152 = &v63[v139 / 8];
                unint64_t v153 = &v138[v139 / 8];
                v152[37] = 0;
                v152[38] = 0;
                *((_DWORD *)v152 + 78) = 0;
                v152[37] = v138[v139 / 8 + 37];
                v153[37] = 0;
                *((_DWORD *)v152 + 76) = v138[v139 / 8 + 38];
                *((_DWORD *)v153 + 76) = 0;
                int v154 = HIDWORD(v63[v139 / 8 + 38]);
                *((_DWORD *)v152 + 77) = HIDWORD(v138[v139 / 8 + 38]);
                *((_DWORD *)v153 + 77) = v154;
                int v155 = v63[v139 / 8 + 39];
                *((_DWORD *)v152 + 78) = v138[v139 / 8 + 39];
                *((_DWORD *)v153 + 78) = v155;
                *((_OWORD *)v152 + 20) = *(_OWORD *)&v138[v139 / 8 + 40];
                *((_DWORD *)v152 + 88) = 0;
                v152[42] = 0;
                v152[43] = 0;
                v152[42] = v138[v139 / 8 + 42];
                v153[42] = 0;
                *((_DWORD *)v152 + 86) = v138[v139 / 8 + 43];
                *((_DWORD *)v153 + 86) = 0;
                int v156 = HIDWORD(v63[v139 / 8 + 43]);
                *((_DWORD *)v152 + 87) = HIDWORD(v138[v139 / 8 + 43]);
                *((_DWORD *)v153 + 87) = v156;
                int v157 = v63[v139 / 8 + 44];
                *((_DWORD *)v152 + 88) = v138[v139 / 8 + 44];
                *((_DWORD *)v153 + 88) = v157;
                *(_OWORD *)&v63[v139 / 8 + 45] = *(_OWORD *)&v138[v139 / 8 + 45];
                long long v158 = *(_OWORD *)&v138[v139 / 8 + 47];
                *((_DWORD *)v152 + 98) = v138[v139 / 8 + 49];
                *(_OWORD *)&v63[v139 / 8 + 47] = v158;
                v139 += 400;
              }
              while (v421 != v139);
              unint64_t v138 = (uint64_t *)v450;
              if (v451)
              {
                BOOL v159 = v418;
                uint64_t v160 = 50 * v451;
                do
                {
                  uint64_t v161 = &v138[v160];
                  MEMORY[0x1D25D9CD0](v138[v160 - 8], 4);
                  MEMORY[0x1D25D9CD0](v138[v160 - 13], 4);
                  uint64_t v162 = (uint64_t *)v138[v160 - 31];
                  if (&v138[v160 - 29] != v162) {
                    free(v162);
                  }
                  uint64_t v163 = (char *)*(v161 - 50);
                  if (v161 - 48 != (uint64_t *)v163) {
                    free(v163);
                  }
                  v160 -= 50;
                }
                while (v160 * 8);
                unint64_t v138 = (uint64_t *)v450;
                BOOL v132 = v159;
                unint64_t v133 = v417;
                LODWORD(v136) = v419;
              }
              else
              {
                unint64_t v133 = v417;
                LODWORD(v136) = v419;
                BOOL v132 = v418;
              }
            }
            if (v138 != v428) {
              free(v138);
            }
            int v450 = v63;
            HIDWORD(v451) = v136;
            unint64_t v64 = v132 ? (void **)&v63[50 * v133] : &v460;
            int v65 = v132 ? (unint64_t *)&v63[50 * v133 + 1] : v430;
            LODWORD(v62) = v451;
          }
          else
          {
            unint64_t v64 = &v460;
            int v65 = v430;
          }
          uint64_t v66 = (void **)&v63[50 * v62];
          void *v66 = v66 + 2;
          v66[1] = (void *)0x1000000000;
          unint64_t v67 = *(unsigned int *)v65;
          if (v66 != v64 && v67 != 0)
          {
            if (v67 >= 0x11) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v66 + 2, *v64, 8 * *(unsigned int *)v65);
            *((_DWORD *)v66 + 2) = v67;
          }
          uint64_t v69 = &v63[50 * v62];
          char v70 = *((unsigned char *)v64 + 144);
          uint64_t v71 = v69 + 21;
          v69[19] = (uint64_t)(v69 + 21);
          uint64_t v72 = (char *)(v69 + 19);
          *(v72 - 8) = v70;
          *((void *)v72 + 1) = 0x1000000000;
          unsigned int v73 = *((_DWORD *)v64 + 40);
          if (v73 && v72 != (char *)(v64 + 19))
          {
            if (v73 >= 0x11)
            {
              *((_DWORD *)v72 + 2) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v71, v64[19], 8 * *((unsigned int *)v64 + 40));
            *((_DWORD *)v72 + 2) = v73;
          }
          uint64_t v74 = &v63[50 * v62];
          uint64_t v75 = v74 + 37;
          v74[37] = 0;
          v74[38] = 0;
          *((_DWORD *)v74 + 78) = 0;
          MEMORY[0x1D25D9CD0](0, 4);
          uint64_t v76 = *((unsigned int *)v64 + 78);
          *((_DWORD *)v74 + 78) = v76;
          if (v76)
          {
            uint64_t v77 = operator new(12 * v76, (std::align_val_t)4uLL);
            *uint64_t v75 = v77;
            v74[38] = (uint64_t)v64[38];
            memcpy(v77, v64[37], 12 * *((unsigned int *)v74 + 78));
          }
          else
          {
            *uint64_t v75 = 0;
            v74[38] = 0;
          }
          uint64_t v78 = &v63[50 * v62];
          *((_OWORD *)v78 + 20) = *((_OWORD *)v64 + 20);
          uint64_t v79 = v78 + 42;
          v78[42] = 0;
          v78[43] = 0;
          *((_DWORD *)v78 + 88) = 0;
          MEMORY[0x1D25D9CD0](0, 4);
          uint64_t v80 = *((unsigned int *)v64 + 88);
          *((_DWORD *)v78 + 88) = v80;
          if (v80)
          {
            uint64_t v81 = operator new(12 * v80, (std::align_val_t)4uLL);
            *uint64_t v79 = v81;
            v78[43] = (uint64_t)v64[43];
            memcpy(v81, v64[42], 12 * *((unsigned int *)v78 + 88));
          }
          else
          {
            *uint64_t v79 = 0;
            v78[43] = 0;
          }
          uint64_t v82 = &v63[50 * v62];
          *(_OWORD *)(v82 + 45) = *(_OWORD *)(v64 + 45);
          long long v83 = *(_OWORD *)(v64 + 47);
          *((_DWORD *)v82 + 98) = *((_DWORD *)v64 + 98);
          *(_OWORD *)(v82 + 47) = v83;
          LODWORD(v451) = v451 + 1;
LABEL_117:
          uint64_t v8 = (uint64_t *)__src;
          if (v481)
          {
            MEMORY[0x1D25D9CD0](v474[0], 4);
            MEMORY[0x1D25D9CD0](v471[0], 4);
            if (v468 != v437) {
              free(v468);
            }
            if (v460 != __dst) {
              free(v460);
            }
          }
          if (v11 == v38)
          {
LABEL_744:
            uint64_t v84 = v11;
            if ((*(unsigned char *)v11 & 4) == 0)
            {
              uint64_t v84 = v11;
              if ((*(_WORD *)(v11 + 44) & 8) != 0)
              {
                uint64_t v84 = v11;
                do
                  uint64_t v84 = *(void *)(v84 + 8);
                while ((*(_WORD *)(v84 + 44) & 8) != 0);
              }
            }
            uint64_t v38 = *(void *)(v84 + 8);
            unsigned int v85 = v451;
            if (v451)
            {
              uint64_t v86 = 0;
              uint64_t v87 = (char *)v450;
              while (!*(_DWORD *)((char *)v450 + v86 + 8))
              {
                v86 += 400;
                if (400 * v451 == v86)
                {
                  uint64_t v88 = 400 * v451;
                  do
                  {
                    uint64_t v89 = &v87[v88];
                    MEMORY[0x1D25D9CD0](*(void *)&v87[v88 - 64], 4);
                    MEMORY[0x1D25D9CD0](*(void *)&v87[v88 - 104], 4);
                    unint64_t v90 = *(char **)&v87[v88 - 248];
                    if (&v87[v88 - 232] != v90) {
                      free(v90);
                    }
                    unint64_t v91 = (char *)*((void *)v89 - 50);
                    if (v89 - 384 != v91) {
                      free(v91);
                    }
                    v88 -= 400;
                  }
                  while (v88);
                  LODWORD(v451) = 0;
                  goto LABEL_211;
                }
              }
              unsigned int v460 = __dst;
              unint64_t v461 = 0x400000000;
              uint64_t v92 = v431;
              *unsigned int v431 = 0;
              v92[1] = 0;
              uint64_t v463 = (uint64_t)v92;
              if ((**(_WORD **)(v11 + 16) & 0xFFFE) == 0x104)
              {
                uint64_t v93 = *(unsigned int *)(v11 + 40);
                if (v93)
                {
                  uint64_t v94 = *(void *)(v11 + 32);
                  uint64_t v95 = v94 + 32 * v93;
                  unsigned int v96 = v85;
                  do
                  {
                    if (*(unsigned char *)v94 == 12)
                    {
                      LODWORD(v482) = 0;
                      if (v96)
                      {
                        unsigned int v97 = 0;
                        do
                        {
                          uint64_t v98 = (char *)v450 + 400 * v97;
                          uint64_t v99 = *((unsigned int *)v98 + 2);
                          if (v99)
                          {
                            uint64_t v100 = *(void *)v98;
                            uint64_t v101 = v100 + 8 * v99;
                            while (1)
                            {
                              uint64_t v102 = *(unsigned int *)(*(void *)v100 + 40);
                              if (v102) {
                                break;
                              }
LABEL_151:
                              v100 += 8;
                              if (v100 == v101) {
                                goto LABEL_154;
                              }
                            }
                            uint64_t v103 = 32 * v102;
                            int v104 = (_DWORD *)(*(void *)(*(void *)v100 + 32) + 4);
                            while (*((unsigned char *)v104 - 4)
                                 || ((*(_DWORD *)(*(void *)(v94 + 16)
                                                + (((unint64_t)*v104 >> 3) & 0x1FFFFFFC)) >> *v104) & 1) != 0)
                            {
                              v104 += 8;
                              v103 -= 32;
                              if (!v103) {
                                goto LABEL_151;
                              }
                            }
                            sub_1CB918828((uint64_t)&v460, (unsigned int *)&v482);
                            unsigned int v97 = v482;
                            unsigned int v85 = v451;
                          }
LABEL_154:
                          LODWORD(v482) = ++v97;
                          unsigned int v96 = v85;
                        }
                        while (v85 > v97);
                      }
                    }
                    v94 += 32;
                  }
                  while (v94 != v95);
                }
              }
              uint64_t v105 = *(unsigned int *)(v11 + 40);
              if (v105)
              {
                uint64_t v106 = *(void *)(v11 + 32);
                uint64_t v107 = v106 + 32 * v105;
                unsigned int v108 = v85;
                while (1)
                {
                  if ((*(_DWORD *)v106 & 0x800000FF) == 0)
                  {
                    unsigned int v109 = *(_DWORD *)(v106 + 4);
                    LODWORD(v482) = 0;
                    if (v108) {
                      break;
                    }
                  }
LABEL_184:
                  v106 += 32;
                  if (v106 == v107) {
                    goto LABEL_185;
                  }
                }
                unsigned int v110 = 0;
                while (2)
                {
                  unsigned int v111 = v450;
                  if (*((_DWORD *)v450 + 100 * v110 + 2))
                  {
                    unsigned int v112 = v110;
                    if (sub_1CBBFC438((uint64_t)v450 + 400 * v110 + 296, v109))
                    {
                      sub_1CB918828((uint64_t)&v460, (unsigned int *)&v482);
                      goto LABEL_180;
                    }
                    unint64_t v113 = (char *)&v111[100 * v112];
                    int v115 = v113[144];
                    unsigned int v114 = v113 + 144;
                    if (v115)
                    {
                      unsigned int v116 = *(_DWORD *)(v106 + 4);
                      unsigned int v117 = v111[100 * v112 + 96];
                      if (v116 == v117)
                      {
                        if ((*(_DWORD *)v106 & 0x8000000) == 0)
                        {
                          unsigned int v120 = &v111[100 * v112 + 40];
                          goto LABEL_179;
                        }
                        uint64_t v118 = *(void *)(v106 + 8);
                        if (v118)
                        {
                          uint64_t v119 = *(void *)(*(void *)(v118 + 16) + 8);
                          unsigned int v120 = &v111[100 * v112 + 40];
                          if ((*(_DWORD *)v106 & 0x1000000) != 0)
                          {
                            if ((v119 & 0x100000000) != 0) {
                              goto LABEL_179;
                            }
                          }
                          else if ((v119 & 0x80000000) != 0)
                          {
LABEL_179:
                            unsigned char *v114 = 0;
                            *unsigned int v120 = 0;
                            goto LABEL_180;
                          }
                        }
                        else
                        {
                          unsigned int v120 = &v111[100 * v112 + 40];
                        }
                        uint64_t v121 = (char *)&v111[100 * v112];
                        unint64_t v122 = *v120;
                        if (v122 >= *((unsigned int *)v121 + 41)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        *(void *)(*((void *)v121 + 19) + 8 * v122) = v106;
                        ++*v120;
                      }
                      else if (v116 - 1 <= 0x3FFFFFFE {
                             && v117 - 1 <= 0x3FFFFFFE
                      }
                             && llvm::MCRegisterInfo::regsOverlap((void *)(v452 + 8), v117, v116))
                      {
                        unsigned char *v114 = 0;
                        v111[100 * v112 + 40] = 0;
                      }
                    }
                  }
LABEL_180:
                  unsigned int v110 = v482 + 1;
                  LODWORD(v482) = v110;
                  unsigned int v85 = v451;
                  if (v451 <= v110)
                  {
                    unsigned int v108 = v451;
                    goto LABEL_184;
                  }
                  continue;
                }
              }
LABEL_185:
              if (v465[0]) {
                BOOL v123 = 0;
              }
              else {
                BOOL v123 = v461 == 0;
              }
              BOOL v124 = v123 || v85 == 0;
              uint64_t v8 = (uint64_t *)__src;
              if (!v124)
              {
                unint64_t v125 = 0;
                if (!v465[0])
                {
LABEL_201:
                  if (!v461) {
                    goto LABEL_208;
                  }
                  unint64_t v128 = v460;
                  uint64_t v129 = 4 * v461;
                  while (v125 != *v128)
                  {
                    ++v128;
                    v129 -= 4;
                    if (!v129) {
                      goto LABEL_208;
                    }
                  }
                  if (v129)
                  {
LABEL_207:
                    uint64_t v130 = (char *)v450 + 400 * v125;
                    *((_DWORD *)v130 + 2) = 0;
                    sub_1CBBFC2F4((unsigned int *)v130 + 74);
                    sub_1CBBFC2F4((unsigned int *)v130 + 84);
                    *((_DWORD *)v130 + 40) = 0;
                    v130[384] = 0;
                    v130[392] = 0;
                    v130[144] = 1;
                    unsigned int v85 = v451;
                  }
                  goto LABEL_208;
                }
                while (1)
                {
                  for (int i = v464; i; int i = (void *)*i)
                  {
                    unint64_t v127 = *((unsigned int *)i + 7);
                    if (v125 >= v127)
                    {
                      if (v125 <= v127) {
                        goto LABEL_207;
                      }
                      ++i;
                    }
                  }
LABEL_208:
                  if (++v125 >= v85) {
                    break;
                  }
                  if (!v465[0]) {
                    goto LABEL_201;
                  }
                }
              }
              sub_1CB833A08((uint64_t)v432, v464);
              if (v460 != __dst) {
                free(v460);
              }
            }
          }
LABEL_211:
          uint64_t v11 = v38;
          uint64_t v9 = v447;
        }
        while ((void *)v38 != v442);
        v429 |= (_BYTE)v454 != 0;
        uint64_t v164 = (uint64_t *)v450;
        if (!(_BYTE)v454)
        {
          if (v451)
          {
            uint64_t v170 = 50 * v451;
            do
            {
              uint64_t v171 = &v164[v170];
              MEMORY[0x1D25D9CD0](v164[v170 - 8], 4);
              MEMORY[0x1D25D9CD0](v164[v170 - 13], 4);
              uint64_t v172 = (uint64_t *)v164[v170 - 31];
              if (&v164[v170 - 29] != v172) {
                free(v172);
              }
              uint64_t v173 = (char *)*(v171 - 50);
              if (v171 - 48 != (uint64_t *)v173) {
                free(v173);
              }
              v170 -= 50;
            }
            while (v170 * 8);
            uint64_t v164 = (uint64_t *)v450;
          }
          if (v164 != v428) {
            free(v164);
          }
          int v6 = v426;
          break;
        }
        int v165 = HIBYTE(v454);
        if (v451)
        {
          uint64_t v166 = 50 * v451;
          do
          {
            unint64_t v167 = &v164[v166];
            MEMORY[0x1D25D9CD0](v164[v166 - 8], 4);
            MEMORY[0x1D25D9CD0](v164[v166 - 13], 4);
            uint64_t v168 = (uint64_t *)v164[v166 - 31];
            if (&v164[v166 - 29] != v168) {
              free(v168);
            }
            int v169 = (char *)*(v167 - 50);
            if (v167 - 48 != (uint64_t *)v169) {
              free(v169);
            }
            v166 -= 50;
          }
          while (v166 * 8);
          uint64_t v164 = (uint64_t *)v450;
        }
        if (v164 != v428) {
          free(v164);
        }
        int v6 = v426;
      }
      while (v165);
      int v7 = v424 | v429;
      int v6 = (void *)v6[1];
    }
    while (v6 != v423);
  }
  if (byte_1EBCC16E8) {
    return v7 & 1;
  }
  int v424 = v7;
  uint64_t v439 = (uint64_t *)&unk_1F25F0A58;
  uint64_t v456 = (uint64_t)v459;
  v457[0] = v459;
  v457[1] = (void *)4;
  int v458 = 0;
  BOOL v455 = &unk_1F25FA6C0;
  v462[0] = v465;
  v462[1] = v465;
  uint64_t v463 = 4;
  LODWORD(v464) = 0;
  unsigned int v460 = &unk_1F25F09C0;
  unint64_t v461 = (unint64_t)&unk_1F25F0A18;
  v465[4] = &v466;
  unsigned int v466 = &v455;
  v465[5] = 0x400000001;
  uint64_t v175 = (uint64_t)v420;
  *((void *)v420 + 91) = &v460;
  uint64_t v176 = *(llvm::MachineBasicBlock **)(v175 + 328);
  unsigned int v440 = (uint64_t *)(v175 + 320);
  if (v176 == (llvm::MachineBasicBlock *)(v175 + 320)) {
    goto LABEL_308;
  }
  uint64_t v444 = &v483;
  int v445 = (void **)v486;
  __src = &v508;
  __dst = &v485;
  uint64_t v178 = (void (*)(llvm::raw_ostream *, llvm::raw_ostream *))off_1F2615510;
  do
  {
    unint64_t v179 = *((void *)v176 + 6) & 0xFFFFFFFFFFFFFFF8;
    int v448 = (unsigned int *)((char *)v176 + 48);
    int v449 = v176;
    if ((llvm::MachineBasicBlock *)((char *)v176 + 48) != (llvm::MachineBasicBlock *)v179)
    {
      if (!v179 || (*(unsigned char *)v179 & 4) == 0)
      {
        while ((*(_WORD *)(v179 + 44) & 4) != 0)
          unint64_t v179 = *(void *)v179 & 0xFFFFFFFFFFFFFFF8;
      }
      do
      {
        uint64_t v191 = v179;
        uint64_t v192 = *((void *)v176 + 7);
        if (v179 != v192)
        {
          unint64_t v179 = *(void *)v179 & 0xFFFFFFFFFFFFFFF8;
          if ((*(void *)v191 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v179 & 4) == 0)
          {
            while ((*(_WORD *)(v179 + 44) & 4) != 0)
              unint64_t v179 = *(void *)v179 & 0xFFFFFFFFFFFFFFF8;
          }
        }
        uint64_t v193 = *(unsigned __int16 **)(v191 + 16);
        int v194 = *v193;
        if ((v194 - 13) < 5 || v194 == 3) {
          continue;
        }
        unsigned int v180 = v194 - 1;
        if (v180 <= 1 && (*(unsigned char *)(*(void *)(v191 + 32) + 48) & 8) != 0) {
          continue;
        }
        unsigned int v181 = *(unsigned __int16 *)(v191 + 44);
        BOOL v45 = (v181 & 0xC) == 0;
        int v182 = (v181 >> 2) & 1;
        if (v45) {
          LOBYTE(v182) = 1;
        }
        uint64_t v183 = *((void *)v193 + 1);
        if (v182)
        {
          if ((v183 & 0x80000) != 0) {
            continue;
          }
        }
        else
        {
          uint64_t v188 = v191;
          if ((v183 & 0x80000) != 0) {
            continue;
          }
          while ((*(_WORD *)(v188 + 44) & 8) != 0)
          {
            uint64_t v188 = *(void *)(v188 + 8);
            if ((*(unsigned char *)(*(void *)(v188 + 16) + 10) & 8) != 0) {
              goto LABEL_371;
            }
          }
        }
        if (v180 > 1 || (*(unsigned char *)(*(void *)(v191 + 32) + 48) & 0x10) == 0)
        {
          if ((v182 & 1) == 0)
          {
            uint64_t v189 = v191;
            if ((v183 & 0x100000) != 0) {
              continue;
            }
            while ((*(_WORD *)(v189 + 44) & 8) != 0)
            {
              uint64_t v189 = *(void *)(v189 + 8);
              uint64_t v176 = v449;
              if ((*(unsigned char *)(*(void *)(v189 + 16) + 10) & 0x10) != 0) {
                goto LABEL_371;
              }
            }
            uint64_t v176 = v449;
            if ((v183 & 0x1000000) != 0) {
              continue;
            }
            uint64_t v190 = v191;
            while ((*(_WORD *)(v190 + 44) & 8) != 0)
            {
              uint64_t v190 = *(void *)(v190 + 8);
              if (*(unsigned char *)(*(void *)(v190 + 16) + 11)) {
                goto LABEL_371;
              }
            }
LABEL_330:
            if (v180 > 1 || (*(unsigned char *)(*(void *)(v191 + 32) + 48) & 1) == 0)
            {
              unsigned int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v191);
              uint64_t v176 = v449;
              if (NumExplicitOperands == *(_DWORD *)(v191 + 40))
              {
                if (NumExplicitOperands)
                {
                  uint64_t v185 = *(_DWORD **)(v191 + 32);
                  uint64_t v186 = 32 * NumExplicitOperands;
                  while ((*v185 & 0x10000FF) != 0x1000000 || (*v185 & 0x5000000) == 83886080)
                  {
                    v185 += 8;
                    v186 -= 32;
                    if (!v186) {
                      goto LABEL_340;
                    }
                  }
                }
                else
                {
LABEL_340:
                  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v191);
                  uint64_t v176 = v449;
                }
              }
            }
            continue;
          }
          if ((v183 & 0x1100000) == 0) {
            goto LABEL_330;
          }
        }
LABEL_371:
        ;
      }
      while (v191 != v192);
    }
    unint64_t v196 = (uint64_t *)*((void *)v176 + 4);
    uint64_t v197 = *v196;
    if (!*(unsigned char *)((*(uint64_t (**)(uint64_t, void))(*(void *)v196[1] + 16))(v196[1], *v196) + 295))
    {
      LODWORD(v442) = 0;
      uint64_t v200 = v449;
LABEL_410:
      unint64_t v201 = v448;
      goto LABEL_411;
    }
    unint64_t v198 = *(llvm::Module **)(v197 + 40);
    v482 = "tpp_functions";
    LOWORD(v486[0]) = 259;
    uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v198, (const char **)&v482);
    unint64_t v201 = v448;
    uint64_t v200 = v449;
    if (NamedMetadata)
    {
      int v202 = *(uint64_t **)(NamedMetadata + 48);
      uint64_t v203 = *((unsigned int *)v202 + 2);
      if (v203)
      {
        uint64_t v204 = *v202;
        while (*(void *)(*(void *)(*(void *)v204 - 8 * *(unsigned int *)(*(void *)v204 + 8)) + 128) != v197)
        {
          v204 += 8;
          if (!--v203) {
            goto LABEL_378;
          }
        }
        goto LABEL_408;
      }
    }
LABEL_378:
    uint64_t v205 = (uint64_t *)*((void *)v449 + 11);
    if (((*((void *)v449 + 12) - (void)v205) & 0x7FFFFFFF8) == 8)
    {
      uint64_t v206 = *v205;
      uint64_t v207 = *v205 + 48;
      int v208 = -1;
      uint64_t v209 = v207;
      do
      {
        uint64_t v209 = *(void *)(v209 + 8);
        ++v208;
      }
      while (v209 != v207);
      if (v208 == 1 && **(_WORD **)(*(void *)(v206 + 56) + 16) == 623)
      {
        unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v449);
        uint64_t v200 = v449;
        if (v201 != (unsigned int *)FirstTerminator)
        {
          unint64_t v211 = FirstTerminator;
          do
          {
            uint64_t v212 = *(unsigned int **)(v211 + 8);
            uint64_t v213 = *(void *)(*(void *)(v211 + 24) + 32);
            if (v213)
            {
              uint64_t v214 = *(void *)(v213 + 728);
              if (v214)
              {
                uint64_t v215 = *(unsigned int **)(v211 + 8);
                (*(void (**)(uint64_t, unint64_t))(*(void *)v214 + 32))(v214, v211);
                uint64_t v212 = v215;
                uint64_t v200 = v449;
              }
              uint64_t v216 = *(unsigned int *)(v211 + 40);
              if (v216)
              {
                uint64_t v217 = *(void *)(v211 + 32);
                uint64_t v218 = *(void *)(v213 + 40);
                uint64_t v219 = 32 * v216;
                do
                {
                  if (!*(unsigned char *)v217)
                  {
                    uint64_t v220 = *(unsigned int *)(v217 + 4);
                    if ((v220 & 0x80000000) != 0) {
                      uint64_t v221 = (uint64_t *)(*(void *)(v218 + 24) + 16 * (v220 & 0x7FFFFFFF) + 8);
                    }
                    else {
                      uint64_t v221 = (uint64_t *)(*(void *)(v218 + 272) + 8 * v220);
                    }
                    uint64_t v222 = *v221;
                    uint64_t v224 = *(void *)(v217 + 16);
                    uint64_t v223 = *(void *)(v217 + 24);
                    if (v217 != *v221) {
                      uint64_t v221 = (uint64_t *)(v224 + 24);
                    }
                    *uint64_t v221 = v223;
                    if (v223) {
                      uint64_t v225 = v223;
                    }
                    else {
                      uint64_t v225 = v222;
                    }
                    *(void *)(v225 + 16) = v224;
                    *(void *)(v217 + 16) = 0;
                    *(void *)(v217 + 24) = 0;
                  }
                  v217 += 32;
                  v219 -= 32;
                }
                while (v219);
              }
            }
            *(void *)(v211 + 24) = 0;
            int v226 = *(unint64_t **)(v211 + 8);
            unint64_t v227 = *(void *)v211 & 0xFFFFFFFFFFFFFFF8;
            *int v226 = v227 | *v226 & 7;
            *(void *)(v227 + 8) = v226;
            *(void *)v211 &= 7uLL;
            *(void *)(v211 + 8) = 0;
            uint64_t v228 = *(void *)(*((void *)v200 + 5) + 32);
            int v229 = *(void **)(v211 + 32);
            if (v229)
            {
              uint64_t v230 = *(unsigned __int8 *)(v211 + 47);
              unint64_t v231 = (uint64_t *)(v228 + 232);
              if (*(_DWORD *)(v228 + 240) <= v230)
              {
                int v447 = v212;
                sub_1CC34BDE0(v228 + 232, v230 + 1);
                uint64_t v212 = v447;
                uint64_t v200 = v449;
              }
              uint64_t v232 = *v231;
              *int v229 = *(void *)(*v231 + 8 * v230);
              *(void *)(v232 + 8 * v230) = v229;
            }
            *(void *)unint64_t v211 = *(void *)(v228 + 224);
            *(void *)(v228 + 224) = v211;
            unint64_t v211 = (unint64_t)v212;
          }
          while (v212 != v448);
        }
        for (uint64_t j = *(void *)(v206 + 56); j != v207; uint64_t j = *(void *)(j + 8))
        {
          unint64_t v354 = llvm::MachineFunction::CloneMachineInstr(*(llvm::MachineFunction **)(v206 + 32), (const llvm::MachineInstr *)j);
          uint64_t v200 = v449;
          unint64_t v355 = v354;
          uint64_t v356 = *((void *)v449 + 5);
          *(void *)(v354 + 24) = v356;
          uint64_t v357 = *(void *)(v356 + 32);
          uint64_t v358 = *(unsigned int *)(v354 + 40);
          if (v358)
          {
            uint64_t v362 = *(void *)(v354 + 32);
            uint64_t v363 = *(void *)(v357 + 40);
            uint64_t v364 = 32 * v358;
            do
            {
              if (!*(unsigned char *)v362)
              {
                uint64_t v365 = *(unsigned int *)(v362 + 4);
                if ((int)v365 >= 0) {
                  uint64_t v366 = (uint64_t *)(*(void *)(v363 + 272) + 8 * v365);
                }
                else {
                  uint64_t v366 = (uint64_t *)(*(void *)(v363 + 24) + 16 * (v365 & 0x7FFFFFFF) + 8);
                }
                uint64_t v367 = *v366;
                if (*v366)
                {
                  uint64_t v368 = *(void *)(v367 + 16);
                  *(void *)(v367 + 16) = v362;
                  *(void *)(v362 + 16) = v368;
                  if (*(unsigned char *)(v362 + 3))
                  {
                    *(void *)(v362 + 24) = v367;
                  }
                  else
                  {
                    *(void *)(v362 + 24) = 0;
                    uint64_t v366 = (uint64_t *)(v368 + 24);
                  }
                }
                else
                {
                  *(void *)(v362 + 16) = v362;
                  *(void *)(v362 + 24) = 0;
                }
                *uint64_t v366 = v362;
              }
              v362 += 32;
              v364 -= 32;
            }
            while (v364);
          }
          uint64_t v359 = *(void *)(v357 + 728);
          if (v359)
          {
            (*(void (**)(uint64_t, unint64_t))(*(void *)v359 + 24))(v359, v355);
            uint64_t v200 = v449;
          }
          unint64_t v360 = v448;
          unint64_t v361 = *(void *)v448 & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v355 = v361 | *(void *)v355 & 7;
          *(void *)(v355 + 8) = v360;
          *(void *)(v361 + 8) = v355;
          *(void *)unint64_t v360 = *(void *)v360 & 7 | v355;
          if (!j || (*(unsigned char *)j & 4) == 0)
          {
            while ((*(_WORD *)(j + 44) & 8) != 0)
              uint64_t j = *(void *)(j + 8);
          }
        }
        LODWORD(v442) = 1;
        goto LABEL_410;
      }
    }
LABEL_408:
    LODWORD(v442) = 0;
LABEL_411:
    unint64_t v233 = *(void *)v201 & 0xFFFFFFFFFFFFFFF8;
    if (v201 != (unsigned int *)v233)
    {
      if (!v233 || (*(unsigned char *)v233 & 4) == 0)
      {
        while ((*(_WORD *)(v233 + 44) & 4) != 0)
          unint64_t v233 = *(void *)v233 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v234 = 0;
      LODWORD(v447) = 0;
      while (1)
      {
        unint64_t v235 = v233;
        unint64_t v233 = *(void *)v233 & 0xFFFFFFFFFFFFFFF8;
        if (!v233 || (*(unsigned char *)v233 & 4) == 0)
        {
          while ((*(_WORD *)(v233 + 44) & 4) != 0)
            unint64_t v233 = *(void *)v233 & 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v236 = *((void *)v200 + 7);
        int v237 = *(unsigned __int16 **)(v235 + 16);
        int v238 = *v237;
        if ((unsigned __int16)(v238 - 1) > 1u || (*(unsigned char *)(*(void *)(v235 + 32) + 48) & 8) == 0)
        {
          unsigned int v239 = *(unsigned __int16 *)(v235 + 44);
          BOOL v45 = (v239 & 0xC) == 0;
          int v240 = (v239 >> 2) & 1;
          if (v45) {
            LOBYTE(v240) = 1;
          }
          uint64_t v241 = *((void *)v237 + 1);
          if (v240)
          {
            if ((v241 & 0x80000) != 0) {
              goto LABEL_434;
            }
          }
          else
          {
            unint64_t v279 = v235;
            if ((v241 & 0x80000) != 0) {
              goto LABEL_434;
            }
            while ((*(_WORD *)(v279 + 44) & 8) != 0)
            {
              unint64_t v279 = *(void *)(v279 + 8);
              if ((*(unsigned char *)(*(void *)(v279 + 16) + 10) & 8) != 0) {
                goto LABEL_434;
              }
            }
          }
          if ((unsigned __int16)(v238 - 1) > 1u || (*(unsigned char *)(*(void *)(v235 + 32) + 48) & 0x10) == 0)
          {
            if (v240)
            {
              if ((v241 & 0x1100000) == 0) {
                goto LABEL_536;
              }
            }
            else
            {
              unint64_t v280 = v235;
              if ((v241 & 0x100000) == 0)
              {
                while ((*(_WORD *)(v280 + 44) & 8) != 0)
                {
                  unint64_t v280 = *(void *)(v280 + 8);
                  uint64_t v200 = v449;
                  if ((*(unsigned char *)(*(void *)(v280 + 16) + 10) & 0x10) != 0) {
                    goto LABEL_434;
                  }
                }
                uint64_t v200 = v449;
                if ((v241 & 0x1000000) == 0)
                {
                  unint64_t v281 = v235;
                  while ((*(_WORD *)(v281 + 44) & 8) != 0)
                  {
                    unint64_t v281 = *(void *)(v281 + 8);
                    if (*(unsigned char *)(*(void *)(v281 + 16) + 11)) {
                      goto LABEL_434;
                    }
                  }
LABEL_536:
                  if (unsigned __int16)(v238 - 1) <= 1u && (*(unsigned char *)(*(void *)(v235 + 32) + 48))
                  {
LABEL_539:
                    uint64_t v255 = 0;
                    goto LABEL_540;
                  }
LABEL_537:
                  uint64_t v255 = v234;
                  goto LABEL_540;
                }
              }
            }
          }
        }
LABEL_434:
        if (v238 > 6845)
        {
          if (v238 != 9187 && v238 != 6846) {
            goto LABEL_539;
          }
        }
        else
        {
          if (v238 == 336) {
            goto LABEL_537;
          }
          if (v238 != 414) {
            goto LABEL_539;
          }
        }
        if (!v234 || **((unsigned __int16 **)v234 + 2) != v238)
        {
LABEL_473:
          uint64_t v255 = (llvm::MachineInstr *)v235;
          goto LABEL_540;
        }
        unsigned int v242 = sub_1CBDA6464(v238, 0x2Fu);
        unint64_t v243 = *(void *)(*((void *)v234 + 4) + 32 * v242 + 16);
        unint64_t v244 = *(void *)(*(void *)(v235 + 32) + 32 * v242 + 16);
        unsigned int v245 = (v243 >> 1) & 7;
        if (v243 == v244)
        {
          uint64_t v246 = *(void *)(*((void *)v234 + 4) + 32 * v242 + 16) & 0xF80;
          uint64_t v247 = *(void *)(*((void *)v234 + 4) + 32 * v242 + 16) & 0x70;
LABEL_444:
          uint64_t v248 = v247 | v246 | (2 * v245);
          goto LABEL_445;
        }
        unsigned int v258 = (v244 >> 1) & 7;
        uint64_t v259 = *(void *)(*((void *)v234 + 4) + 32 * v242 + 16) & 0xF80;
        uint64_t v260 = *(void *)(*(void *)(v235 + 32) + 32 * v242 + 16) & 0xF80;
        uint64_t v261 = *(void *)(*((void *)v234 + 4) + 32 * v242 + 16) & 0x70;
        uint64_t v262 = *(void *)(*(void *)(v235 + 32) + 32 * v242 + 16) & 0x70;
        if (v245 == v258)
        {
          uint64_t v247 = v262 | v261;
          uint64_t v246 = v260 | v259;
          uint64_t v200 = v449;
          if (v259 != v260)
          {
            if (((v243 >> 10) & 1) != ((v244 >> 10) & 1))
            {
              unsigned __int8 v263 = (v243 & 0x400) != 0
                   ? *(void *)(*((void *)v234 + 4) + 32 * v242 + 16)
                   : *(void *)(*(void *)(v235 + 32) + 32 * v242 + 16);
              if (((v247 ^ v263) & 0x60) != 0) {
                goto LABEL_473;
              }
            }
            if (((v243 >> 7) & 1) != ((v244 >> 7) & 1))
            {
              if ((v243 & 0x80) == 0) {
                LOBYTE(v243) = *(void *)(*(void *)(v235 + 32) + 32 * v242 + 16);
              }
              uint64_t v255 = (llvm::MachineInstr *)v235;
              if (((v247 ^ v243) & 0x60) != 0) {
                goto LABEL_540;
              }
            }
          }
          goto LABEL_444;
        }
        uint64_t v200 = v449;
        if (((v244 | v243) & 0x400) != 0) {
          goto LABEL_473;
        }
        if (v259 != v260 || v261 != v262) {
          goto LABEL_473;
        }
        BOOL v267 = v245 >= 3;
        char v268 = (v245 < 3) ^ (v258 < 3);
        uint64_t v269 = 4;
        if (v267) {
          uint64_t v269 = 10;
        }
        uint64_t v255 = (llvm::MachineInstr *)v235;
        if (v268) {
          goto LABEL_540;
        }
        uint64_t v248 = v269 | *(void *)(*((void *)v234 + 4) + 32 * v242 + 16) & 0xFF0;
LABEL_445:
        unsigned int v446 = (int *)v248;
        uint64_t v249 = *(void *)(v235 + 24);
        unsigned int v250 = v444;
        *((_OWORD *)v444 + 2) = 0u;
        v250[3] = 0u;
        *unsigned int v250 = 0u;
        v250[1] = 0u;
        uint64_t v251 = *(void *)(v249 + 32);
        v482 = &unk_1F261CD58;
        int v483 = (void *)v251;
        uint64_t v485 = *(void *)(v251 + 40);
        uint64_t v484 = (*(uint64_t (**)(void))(**(void **)(v251 + 16) + 104))(*(void *)(v251 + 16));
        int v450 = 0;
        int v447 = (unsigned int *)&unk_1F261CD58;
        if (!v486[0]) {
          goto LABEL_446;
        }
        int v270 = *(unsigned __int8 *)v486[0];
        if ((v270 - 4) > 0x1E)
        {
          if ((v270 - 3) >= 0xFFFFFFFE) {
            uint64_t v276 = v486[0];
          }
          else {
            uint64_t v276 = 0;
          }
          if ((v270 - 3) <= 0xFFFFFFFD)
          {
            if (v270 == 3) {
              *(void *)(v486[0] + 8) = 0;
            }
LABEL_446:
            v486[0] = 0;
            goto LABEL_447;
          }
          unint64_t v272 = v276 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v486[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v486[0] + 12)) {
            goto LABEL_446;
          }
          uint64_t v271 = *(void *)(v486[0] + 16);
          if ((v271 & 4) == 0) {
            goto LABEL_446;
          }
          unint64_t v272 = v271 & 0xFFFFFFFFFFFFFFF8;
          if (!v272) {
            goto LABEL_446;
          }
        }
        uint64_t v507 = (uint64_t)v445;
        sub_1CC5FA668(v272 + 16, &v507);
        v486[0] = v450;
        if (v450) {
          llvm::MetadataTracking::retrack((uint64_t)&v450, (unsigned __int8 *)v450, (uint64_t)v445);
        }
LABEL_447:
        uint64_t v488 = 0;
        unint64_t v487 = v235;
        v486[1] = *(void *)(v235 + 24);
        unint64_t v487 = v235;
        if ((void **)(v235 + 56) == v445) {
          goto LABEL_451;
        }
        if (v486[0])
        {
          int v273 = *(unsigned __int8 *)v486[0];
          if ((v273 - 4) > 0x1E)
          {
            if ((v273 - 3) >= 0xFFFFFFFE) {
              uint64_t v277 = v486[0];
            }
            else {
              uint64_t v277 = 0;
            }
            if ((v273 - 3) < 0xFFFFFFFE)
            {
              if (v273 == 3) {
                *(void *)(v486[0] + 8) = 0;
              }
              goto LABEL_449;
            }
            unint64_t v275 = v277 + 8;
LABEL_511:
            uint64_t v507 = (uint64_t)v445;
            sub_1CC5FA668(v275 + 16, &v507);
            goto LABEL_449;
          }
          if ((*(unsigned char *)(v486[0] + 1) & 0x7F) == 2 || *(_DWORD *)(v486[0] + 12))
          {
            uint64_t v274 = *(void *)(v486[0] + 16);
            if ((v274 & 4) != 0)
            {
              unint64_t v275 = v274 & 0xFFFFFFFFFFFFFFF8;
              if (v275) {
                goto LABEL_511;
              }
            }
          }
        }
LABEL_449:
        uint64_t v252 = *(unsigned __int8 **)(v235 + 56);
        v486[0] = v252;
        if (v252) {
          llvm::MetadataTracking::track((uint64_t)v445, v252, 2);
        }
LABEL_451:
        uint64_t v253 = (llvm::MachineFunction *)sub_1CC739C54(&v482, **(unsigned __int16 **)(v235 + 16), 0, 0, 0, 0, 0);
        uint64_t v255 = v254;
        LODWORD(v507) = 1;
        uint64_t v256 = __src;
        *(void *)__src = 0;
        v256[1] = 0;
        llvm::MachineInstr::addOperand(v254, v253, (const llvm::MachineOperand *)&v507);
        LODWORD(v507) = 1;
        uint64_t v508 = 0;
        uint64_t v509 = v446;
        llvm::MachineInstr::addOperand(v255, v253, (const llvm::MachineOperand *)&v507);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v235);
        llvm::MachineInstr::eraseFromParent(v234);
        v482 = v447;
        uint64_t v200 = v449;
        if (v486[0])
        {
          int v257 = *(unsigned __int8 *)v486[0];
          if ((v257 - 4) > 0x1E)
          {
            if ((v257 - 3) >= 0xFFFFFFFE) {
              uint64_t v265 = v486[0];
            }
            else {
              uint64_t v265 = 0;
            }
            if ((v257 - 3) < 0xFFFFFFFE)
            {
              if (v257 == 3) {
                *(void *)(v486[0] + 8) = 0;
              }
              goto LABEL_455;
            }
            unint64_t v266 = v265 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v486[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v486[0] + 12)) {
              goto LABEL_455;
            }
            uint64_t v278 = *(void *)(v486[0] + 16);
            if ((v278 & 4) == 0) {
              goto LABEL_455;
            }
            unint64_t v266 = v278 & 0xFFFFFFFFFFFFFFF8;
            if (!v266) {
              goto LABEL_455;
            }
          }
          uint64_t v507 = (uint64_t)v445;
          sub_1CC5FA668(v266 + 16, &v507);
          uint64_t v200 = v449;
        }
LABEL_455:
        LODWORD(v447) = 1;
LABEL_540:
        uint64_t v234 = v255;
        if (v235 == v236) {
          goto LABEL_541;
        }
      }
    }
    LODWORD(v447) = 0;
LABEL_541:
    if (!byte_1EBCC14A8) {
      goto LABEL_646;
    }
    uint64_t v282 = (_DWORD *)v422[33];
    uint64_t v484 = 0x600000000;
    int v483 = __dst;
    v482 = v282;
    int v283 = v282[11];
    int v489 = v283;
    unsigned int v284 = v283 + 63;
    if ((v283 + 63) < 0x40)
    {
      unsigned int v287 = 0;
      int v286 = __dst;
    }
    else
    {
      uint64_t v285 = v284 >> 6;
      if (v284 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v286 = __dst;
      bzero(__dst, 8 * v285);
      unsigned int v287 = v285;
      LODWORD(v484) = v285;
    }
    unint64_t v288 = v448;
    if ((v283 & 0x3F) != 0) {
      v286[v287 - 1] &= ~(-1 << (v283 & 0x3F));
    }
    if (v287) {
      bzero(v286, 8 * v287);
    }
    int v289 = (llvm *)llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v482, v449);
    uint64_t v200 = v449;
    uint64_t v290 = (llvm::Value **)*((void *)v449 + 4);
    unint64_t v291 = *((void *)v449 + 6) & 0xFFFFFFFFFFFFFFF8;
    if (!v291 || (*(unsigned char *)v291 & 4) == 0)
    {
      while ((*(_WORD *)(v291 + 44) & 4) != 0)
        unint64_t v291 = *(void *)v291 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((unsigned int *)v291 != v288)
    {
      uint64_t v292 = *(unsigned __int16 **)(v291 + 16);
      if (*v292 - 13 < 5) {
        goto LABEL_562;
      }
      uint64_t v293 = *((void *)v292 + 1);
      if ((*(_WORD *)(v291 + 44) & 0xC) != 0 && (*(_WORD *)(v291 + 44) & 4) == 0)
      {
        unint64_t v295 = v291;
        if ((v293 & 0x80) == 0)
        {
          while ((*(_WORD *)(v295 + 44) & 8) != 0)
          {
            unint64_t v295 = *(void *)(v295 + 8);
            if ((*(unsigned char *)(*(void *)(v295 + 16) + 8) & 0x80) != 0) {
              goto LABEL_571;
            }
          }
          goto LABEL_561;
        }
LABEL_571:
        v296 = llvm::dbgs(v289);
        uint64_t v297 = (void *)*((void *)v296 + 4);
        if (*((void *)v296 + 3) - (void)v297 > 0x22uLL)
        {
          qmemcpy(v297, "Registers live over call instance: ", 35);
          *((void *)v296 + 4) += 35;
        }
        else
        {
          v296 = llvm::raw_ostream::write(v296, "Registers live over call instance: ", 0x23uLL);
        }
        uint64_t v298 = llvm::dbgs(v296);
        int v299 = v298;
        uint64_t v300 = (_DWORD *)*((void *)v298 + 4);
        if (*((void *)v298 + 3) - (void)v300 > 3uLL)
        {
          *uint64_t v300 = 540697186;
          *((void *)v298 + 4) += 4;
        }
        else
        {
          llvm::raw_ostream::write(v298, "bb: ", 4uLL);
        }
        unint64_t v301 = (llvm::Value *)*((void *)v449 + 2);
        if (v301)
        {
          Name = llvm::Value::getName(v301);
          size_t v304 = v302;
          unint64_t v301 = (llvm::Value *)*((void *)v299 + 4);
          if (v302 <= *((void *)v299 + 3) - (void)v301)
          {
            if (v302)
            {
              unint64_t v301 = (llvm::Value *)memcpy(v301, Name, v302);
              *((void *)v299 + 4) += v304;
            }
          }
          else
          {
            unint64_t v301 = llvm::raw_ostream::write(v299, Name, v302);
          }
        }
        int v305 = llvm::dbgs(v301);
        uint64_t v306 = v305;
        uint64_t v307 = *((void *)v305 + 4);
        if ((unint64_t)(*((void *)v305 + 3) - v307) > 9)
        {
          *(_WORD *)(v307 + 8) = 8250;
          *(void *)uint64_t v307 = *(void *)": caller: ";
          *((void *)v305 + 4) += 10;
        }
        else
        {
          llvm::raw_ostream::write(v305, ": caller: ", 0xAuLL);
        }
        int v309 = llvm::Value::getName(*v290);
        size_t v310 = v308;
        uint64_t v311 = (void *)*((void *)v306 + 4);
        if (v308 <= *((void *)v306 + 3) - (void)v311)
        {
          if (v308)
          {
            uint64_t v311 = memcpy(v311, v309, v308);
            *((void *)v306 + 4) += v310;
          }
        }
        else
        {
          uint64_t v311 = llvm::raw_ostream::write(v306, v309, v308);
        }
        unint64_t v312 = llvm::dbgs((llvm *)v311);
        uint64_t v313 = *((void *)v312 + 4);
        if ((unint64_t)(*((void *)v312 + 3) - v313) > 9)
        {
          *(_WORD *)(v313 + 8) = 8250;
          *(void *)uint64_t v313 = *(void *)": callee: ";
          *((void *)v312 + 4) += 10;
        }
        else
        {
          unint64_t v312 = llvm::raw_ostream::write(v312, ": callee: ", 0xAuLL);
        }
        uint64_t v314 = *(llvm::raw_ostream **)(v291 + 32);
        int v315 = llvm::dbgs(v312);
        llvm::MachineOperand::print(v314, v315, 0, (uint64_t)v282, 0);
        unsigned int v317 = llvm::dbgs(v316);
        uint64_t v318 = *((void *)v317 + 4);
        unint64_t v319 = *((void *)v317 + 3) - v318;
        unsigned int v446 = (int *)v290;
        if (v319 > 0xA)
        {
          *(_DWORD *)(v318 + 7) = 540698678;
          *(void *)uint64_t v318 = *(void *)"\n  gpr16h: ";
          *((void *)v317 + 4) += 11;
        }
        else
        {
          unsigned int v317 = llvm::raw_ostream::write(v317, "\n  gpr16h: ", 0xBuLL);
        }
        unsigned int v320 = 0;
        for (uint64_t k = 263; k != 391; ++k)
        {
          if (v482) {
            uint64_t v322 = (char *)v482 + 8;
          }
          else {
            uint64_t v322 = 0;
          }
          unint64_t v323 = *(unsigned int *)(*v322 + 24 * k + 16);
          uint64_t v324 = (_WORD *)(v322[6] + ((v323 >> 3) & 0x1FFFFFFE));
          __int16 v326 = *v324;
          uint64_t v325 = v324 + 1;
          unsigned __int16 v327 = v326 + (v323 & 0xF) * k;
          while (((*((void *)v483 + (v327 >> 6)) >> v327) & 1) == 0)
          {
            int v328 = *v325++;
            v327 += v328;
            if (!v328) {
              goto LABEL_605;
            }
          }
          unint64_t v329 = llvm::dbgs(v317);
          uint64_t v330 = operator new(0x28uLL);
          *(void *)uint64_t v330 = &unk_1F26154E0;
          v330[2] = k;
          *((void *)v330 + 2) = v282;
          v330[6] = 0;
          *((void *)v330 + 4) = 0;
          uint64_t v510 = (uint64_t *)v330;
          v178((llvm::raw_ostream *)v330, v329);
          uint64_t v331 = (_WORD *)*((void *)v329 + 4);
          if (*((void *)v329 + 3) - (void)v331 > 1uLL)
          {
            *uint64_t v331 = 8236;
            *((void *)v329 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v329, ", ", 2uLL);
          }
          unsigned int v317 = (llvm *)v510;
          if (v510 == &v507)
          {
            unsigned int v317 = (llvm *)(*(uint64_t (**)(uint64_t *))(v507 + 32))(&v507);
          }
          else if (v510)
          {
            unsigned int v317 = (llvm *)(*(uint64_t (**)(void))(*v510 + 40))();
          }
          ++v320;
LABEL_605:
          ;
        }
        uint64_t v332 = llvm::dbgs(v317);
        uint64_t v333 = *((void *)v332 + 4);
        if ((unint64_t)(*((void *)v332 + 3) - v333) > 2)
        {
          *(unsigned char *)(v333 + 2) = 32;
          *(_WORD *)uint64_t v333 = 14880;
          *((void *)v332 + 4) += 3;
        }
        else
        {
          uint64_t v332 = llvm::raw_ostream::write(v332, " : ", 3uLL);
        }
        unsigned int v334 = sub_1CD098D14(v332, v320, 0, 0, 0);
        uint64_t v335 = llvm::dbgs(v334);
        uint64_t v336 = *((void *)v335 + 4);
        if ((unint64_t)(*((void *)v335 + 3) - v336) > 0xA)
        {
          *(_DWORD *)(v336 + 7) = 540699702;
          *(void *)uint64_t v336 = *(void *)"\n  gpr16l: ";
          *((void *)v335 + 4) += 11;
        }
        else
        {
          uint64_t v335 = llvm::raw_ostream::write(v335, "\n  gpr16l: ", 0xBuLL);
        }
        unsigned int v337 = 0;
        for (uint64_t m = 391; m != 519; ++m)
        {
          if (v482) {
            unint64_t v339 = (char *)v482 + 8;
          }
          else {
            unint64_t v339 = 0;
          }
          unint64_t v340 = *(unsigned int *)(*v339 + 24 * m + 16);
          int v341 = (_WORD *)(v339[6] + ((v340 >> 3) & 0x1FFFFFFE));
          __int16 v343 = *v341;
          uint64_t v342 = v341 + 1;
          unsigned __int16 v344 = v343 + (v340 & 0xF) * m;
          while (((*((void *)v483 + (v344 >> 6)) >> v344) & 1) == 0)
          {
            int v345 = *v342++;
            v344 += v345;
            if (!v345) {
              goto LABEL_627;
            }
          }
          unint64_t v346 = llvm::dbgs(v335);
          int v347 = operator new(0x28uLL);
          *(void *)int v347 = &unk_1F26154E0;
          v347[2] = m;
          *((void *)v347 + 2) = v282;
          v347[6] = 0;
          *((void *)v347 + 4) = 0;
          uint64_t v510 = (uint64_t *)v347;
          v178((llvm::raw_ostream *)v347, v346);
          uint64_t v348 = (_WORD *)*((void *)v346 + 4);
          if (*((void *)v346 + 3) - (void)v348 > 1uLL)
          {
            *uint64_t v348 = 8236;
            *((void *)v346 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v346, ", ", 2uLL);
          }
          uint64_t v335 = (llvm *)v510;
          if (v510 == &v507)
          {
            uint64_t v335 = (llvm *)(*(uint64_t (**)(uint64_t *))(v507 + 32))(&v507);
          }
          else if (v510)
          {
            uint64_t v335 = (llvm *)(*(uint64_t (**)(void))(*v510 + 40))();
          }
          ++v337;
LABEL_627:
          ;
        }
        unint64_t v349 = llvm::dbgs(v335);
        uint64_t v350 = v349;
        uint64_t v351 = *((void *)v349 + 4);
        if ((unint64_t)(*((void *)v349 + 3) - v351) > 2)
        {
          *(unsigned char *)(v351 + 2) = 32;
          *(_WORD *)uint64_t v351 = 14880;
          *((void *)v349 + 4) += 3;
        }
        else
        {
          llvm::raw_ostream::write(v349, " : ", 3uLL);
        }
        unint64_t v288 = v448;
        sub_1CD098D14(v350, v337, 0, 0, 0);
        uint64_t v352 = (unsigned char *)*((void *)v350 + 4);
        if (*((unsigned char **)v350 + 3) == v352)
        {
          llvm::raw_ostream::write(v350, "\n", 1uLL);
        }
        else
        {
          unsigned char *v352 = 10;
          ++*((void *)v350 + 4);
        }
        uint64_t v290 = (llvm::Value **)v446;
        goto LABEL_561;
      }
      if ((v293 & 0x80) != 0) {
        goto LABEL_571;
      }
LABEL_561:
      int v289 = (llvm *)llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)&v482, (const llvm::MachineInstr *)v291);
      uint64_t v200 = v449;
LABEL_562:
      unint64_t v291 = *(void *)v291 & 0xFFFFFFFFFFFFFFF8;
      if (!v291 || (*(unsigned char *)v291 & 4) == 0)
      {
        while ((*(_WORD *)(v291 + 44) & 4) != 0)
          unint64_t v291 = *(void *)v291 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    if (v483 != __dst)
    {
      free(v483);
      uint64_t v200 = v449;
    }
LABEL_646:
    v424 |= v442 | v447;
    uint64_t v176 = (llvm::MachineBasicBlock *)*((void *)v200 + 1);
  }
  while (v176 != (llvm::MachineBasicBlock *)v440);
LABEL_308:
  if (!byte_1EBCC1628 || (uint64_t v177 = (uint64_t *)*((void *)v420 + 41), v177 == v440))
  {
    LODWORD(v448) = 0;
    goto LABEL_311;
  }
  LODWORD(v448) = 0;
  uint64_t v369 = v422[33];
  unint64_t v370 = (int *)v422[31];
  int v449 = (llvm::MachineBasicBlock *)*((void *)v420 + 5);
  int v445 = &v483;
  unsigned int v446 = v370;
  int v371 = (unsigned int *)&v485;
  int v447 = (unsigned int *)&v485;
  while (2)
  {
    uint64_t v484 = 0x600000000;
    int v483 = v371;
    v482 = (void *)v369;
    int v372 = *(_DWORD *)(v369 + 44);
    int v489 = v372;
    unsigned int v373 = v372 + 63;
    if ((v372 + 63) < 0x40)
    {
      unsigned int v376 = 0;
      uint64_t v375 = v371;
    }
    else
    {
      uint64_t v374 = v373 >> 6;
      if (v373 >= 0x1C0) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v375 = v371;
      bzero(v371, 8 * v374);
      unsigned int v376 = v374;
      LODWORD(v484) = v374;
    }
    if ((v372 & 0x3F) != 0) {
      *(void *)&v375[2 * v376 - 2] &= ~(-1 << (v372 & 0x3F));
    }
    llvm::LiveRegUnits::addLiveOuts((llvm::LiveRegUnits *)&v482, (const llvm::MachineBasicBlock *)v177);
    unint64_t v377 = v177[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v377 || (*(unsigned char *)v377 & 4) == 0)
    {
      while ((*(_WORD *)(v377 + 44) & 4) != 0)
        unint64_t v377 = *(void *)v377 & 0xFFFFFFFFFFFFFFF8;
    }
    while ((uint64_t *)v377 != v177 + 6)
    {
      uint64_t v378 = v377;
      unint64_t v377 = *(void *)v377 & 0xFFFFFFFFFFFFFFF8;
      if (!v377 || (*(unsigned char *)v377 & 4) == 0)
      {
        while ((*(_WORD *)(v377 + 44) & 4) != 0)
          unint64_t v377 = *(void *)v377 & 0xFFFFFFFFFFFFFFF8;
      }
      int v379 = **(unsigned __int16 **)(v378 + 16);
      if ((v379 - 13) >= 5)
      {
        if ((v379 - 6723) <= 1)
        {
          unsigned int v380 = *(_DWORD *)(*(void *)(v378 + 32) + 4);
          unsigned int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(v369, v380, (uint64_t)v449);
          if (RegSizeInBits < 0x10) {
            goto LABEL_695;
          }
          int v382 = 0;
          int v383 = 0;
          uint64_t v384 = (uint64_t *)((char *)v482 + 8);
          if (!v482) {
            uint64_t v384 = 0;
          }
          uint64_t v385 = *v384;
          uint64_t v386 = v384[6];
          do
          {
            unsigned __int16 v387 = v380;
            if (RegSizeInBits == 32)
            {
              uint64_t v388 = *(void *)(v369 + 8);
              uint64_t v389 = *(void *)(v369 + 56);
              uint64_t v390 = *(unsigned int *)(v388 + 24 * v380 + 4);
              if (*(_WORD *)(v389 + 2 * v390))
              {
                unsigned __int16 v391 = *(_WORD *)(v389 + 2 * v390) + v380;
                uint64_t v392 = (unsigned __int16 *)(*(void *)(v369 + 88) + 2 * *(unsigned int *)(v388 + 24 * v380 + 12));
                uint64_t v393 = (unsigned __int16 *)(v389 + 2 * v390 + 2);
                while (v383 + 1 != *v392)
                {
                  unsigned __int16 v387 = 0;
                  int v394 = *v393++;
                  v391 += v394;
                  ++v392;
                  if (!v394) {
                    goto LABEL_706;
                  }
                }
                unsigned __int16 v387 = v391;
              }
              else
              {
                unsigned __int16 v387 = 0;
              }
            }
LABEL_706:
            unint64_t v395 = *(unsigned int *)(v385 + 24 * v387 + 16);
            uint64_t v396 = (v395 >> 3) & 0x1FFFFFFE;
            unsigned __int16 v397 = *(_WORD *)(v386 + v396) + (v395 & 0xF) * v387;
            int v398 = (unsigned __int16 *)(v386 + 2 + v396);
            do
            {
              uint64_t v399 = (1 << v397) & *((void *)v483 + (v397 >> 6));
              if (v399) {
                break;
              }
              int v400 = *v398++;
              v397 += v400;
            }
            while (v400);
            int v401 = 1 << v383;
            if (!v399) {
              int v401 = 0;
            }
            v382 |= v401;
            ++v383;
          }
          while (v383 != RegSizeInBits >> 4);
          int v402 = RegSizeInBits == 16 ? 1 : 3;
          if (v402 != v382)
          {
            if (!v382)
            {
LABEL_695:
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v378);
              LODWORD(v448) = 1;
              continue;
            }
            uint64_t v403 = *(void *)(v369 + 8);
            uint64_t v404 = *(void *)(v369 + 56);
            uint64_t v405 = *(unsigned int *)(v403 + 24 * v380 + 4);
            if (*(_WORD *)(v404 + 2 * v405))
            {
              unsigned __int16 v406 = *(_WORD *)(v404 + 2 * v405) + v380;
              int v407 = (unsigned __int16 *)(*(void *)(v369 + 88) + 2 * *(unsigned int *)(v403 + 24 * v380 + 12));
              int v408 = (unsigned __int16 *)(v404 + 2 * v405 + 2);
              while (v382 != *v407)
              {
                int v409 = *v408++;
                v406 += v409;
                ++v407;
                if (!v409) {
                  goto LABEL_723;
                }
              }
              unsigned int v410 = v406;
            }
            else
            {
LABEL_723:
              unsigned int v410 = 0;
            }
            llvm::MachineOperand::setReg(*(void *)(v378 + 32), v410);
            *(void *)(v378 + 16) = *((void *)v446 + 1) + 322752;
            if (v382 == 2) {
              *(void *)(*(void *)(v378 + 32) + 80) = (*(_DWORD *)(*(void *)(v378 + 32) + 80) + 1);
            }
            uint64_t v411 = *(void *)(v378 + 48);
            if ((v411 & 7) != 0)
            {
              unint64_t v412 = *(void *)((v411 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              unint64_t v412 = v411 & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v378 + 48) = v411 & 0xFFFFFFFFFFFFFFF8;
            }
            int v413 = v420;
            unint64_t MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)v420, v412, *(void *)(v412 + 8), 129);
            llvm::MachineInstr::dropMemRefs(v378, v413);
            llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v378, v413, MachineMemOperand);
            LODWORD(v448) = 1;
          }
        }
        llvm::LiveRegUnits::stepBackward((llvm::LiveRegUnits *)&v482, (const llvm::MachineInstr *)v378);
      }
    }
    int v371 = v447;
    if (v483 != v447) {
      free(v483);
    }
    uint64_t v177 = (uint64_t *)v177[1];
    if (v177 != v440) {
      continue;
    }
    break;
  }
LABEL_311:
  LOBYTE(v7) = v424 | v448;
  *((void *)v420 + 91) = 0;
  sub_1CD3FC494(&v460);
  BOOL v455 = v439;
  if (v457[0] != (void *)v456) {
    free(v457[0]);
  }
  return v7 & 1;
}

void *sub_1CBBFBF28(void *a1)
{
  *a1 = &unk_1F25F0A58;
  uint64_t v2 = (void *)a1[2];
  if (v2 != (void *)a1[1]) {
    free(v2);
  }
  return a1;
}

uint64_t sub_1CBBFBF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (**(_WORD **)(a1 + 16) != 19) {
    return 0;
  }
  uint64_t v3 = *(int **)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4)
  {
    uint64_t v5 = 32 * v4;
    uint64_t v6 = *(void *)(a1 + 32);
    while ((*(unsigned char *)(v6 + 3) & 2) == 0)
    {
      v6 += 32;
      v5 -= 32;
      if (!v5) {
        goto LABEL_6;
      }
    }
    return 0;
  }
LABEL_6:
  int v7 = *v3;
  if ((*v3 & 0x8000000) == 0) {
    return 0;
  }
  uint64_t v8 = *((void *)v3 + 1);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)(v8 + 16) + 8);
    if ((v7 & 0x1000000) != 0)
    {
      if ((v9 & 0x100000000) != 0) {
        return 0;
      }
    }
    else if ((v9 & 0x80000000) != 0)
    {
      return 0;
    }
  }
  int v10 = v3[8];
  if ((v10 & 0x8000000) == 0) {
    return 0;
  }
  uint64_t v11 = *((void *)v3 + 5);
  if (!v11) {
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)(*(void *)(v11 + 16) + 8);
  if ((v10 & 0x1000000) != 0)
  {
    if ((v12 & 0x100000000) == 0) {
      goto LABEL_18;
    }
    return 0;
  }
  if ((v12 & 0x80000000) != 0) {
    return 0;
  }
LABEL_18:
  if (((v10 | v7) & 0xFFF00) != 0) {
    return 0;
  }
  return sub_1CBBFC02C(v3[9], v3[1], a2, a3);
}

uint64_t sub_1CBBFC02C(unsigned int a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  v28[4] = *MEMORY[0x1E4F143B8];
  if (a1 == a2) {
    return 0;
  }
  unint64_t v8 = a1;
  unint64_t v9 = a2;
  BOOL v10 = a1 - 1 >= 0x3FFFFFFF || a2 - 1 >= 0x3FFFFFFF;
  BOOL v11 = !v10;
  if (v11 && llvm::MCRegisterInfo::regsOverlap((void *)(a3 + 8), a1, a2)) {
    return 0;
  }
  uint64_t v12 = *(void *)(a4 + 352);
  if ((*(void *)(v12 + ((v8 >> 3) & 0x1FFFFFF8)) >> a1)) {
    return 0;
  }
  if ((*(void *)(v12 + ((v9 >> 3) & 0x1FFFFFF8)) >> a2)) {
    return 0;
  }
  int RegSizeInBits = llvm::TargetRegisterInfo::getRegSizeInBits(a3, a1, a4);
  if (RegSizeInBits != llvm::TargetRegisterInfo::getRegSizeInBits(a3, a2, a4)) {
    return 0;
  }
  sub_1CBBFC238((uint64_t)&v26, a1, *(void *)(a3 + 8), *(void *)(a3 + 56));
  sub_1CBBFC238((uint64_t)&v23, a2, *(void *)(a3 + 8), *(void *)(a3 + 56));
  if (v27 == v24)
  {
    uint64_t v14 = 0;
    unint64_t v15 = (unint64_t)a2 >> 3;
    unint64_t v16 = (unint64_t)a1 >> 3;
    while (1)
    {
      if (v11)
      {
        uint64_t v17 = (uint64_t)*(&off_1E66ABC30)[v14];
        unsigned int v18 = *(unsigned __int16 *)(v17 + 22);
        if (v16 < v18)
        {
          uint64_t v19 = *(void *)(v17 + 8);
          BOOL v20 = v15 >= v18 || ((1 << (a1 & 7)) & *(unsigned __int8 *)(v19 + v16)) == 0;
          if (!v20 && ((1 << (a2 & 7)) & *(unsigned __int8 *)(v19 + v15)) != 0) {
            break;
          }
        }
      }
      if (++v14 == 8) {
        goto LABEL_23;
      }
    }
    uint64_t v21 = 1;
  }
  else
  {
LABEL_23:
    uint64_t v21 = 0;
  }
  if (v23 != &v25) {
    free(v23);
  }
  if (v26 != v28) {
    free(v26);
  }
  return v21;
}

uint64_t sub_1CBBFC238(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = 0;
  *(void *)uint64_t result = result + 16;
  *(void *)(result + 8) = 0x800000000;
  unint64_t v5 = *(unsigned int *)(a3 + 24 * a2 + 16);
  uint64_t v6 = (_WORD *)(a4 + ((v5 >> 3) & 0x1FFFFFFE));
  __int16 v8 = *v6;
  int v7 = v6 + 1;
  unsigned __int16 v9 = v8 + (v5 & 0xF) * a2;
  do
  {
    if (v4 >= *(_DWORD *)(result + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(_DWORD *)(*(void *)result + 4 * v4) = v9;
    unsigned int v4 = *(_DWORD *)(result + 8) + 1;
    *(_DWORD *)(result + 8) = v4;
    int v10 = *v7++;
    v9 += v10;
  }
  while (v10);
  return result;
}

unsigned int *sub_1CBBFC2F4(unsigned int *result)
{
  char v1 = result;
  unsigned int v2 = result[2];
  if (v2 || result[3])
  {
    uint64_t v3 = result[4];
    uint64_t result = *(unsigned int **)result;
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if (v3)
      {
        uint64_t v7 = 12 * v3;
        do
        {
          *uint64_t result = -1;
          result += 3;
          v7 -= 12;
        }
        while (v7);
      }
      *((void *)v1 + 1) = 0;
    }
    else if (v2)
    {
      int v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64) {
        int v5 = 64;
      }
      else {
        int v5 = v4;
      }
      if (v5 == v3)
      {
        *((void *)v1 + 1) = 0;
        uint64_t v6 = 12 * v3;
        do
        {
          *uint64_t result = -1;
          result += 3;
          v6 -= 12;
        }
        while (v6);
      }
      else
      {
        MEMORY[0x1D25D9CD0](result, 4);
        unint64_t v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
        unint64_t v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
        LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
        v1[4] = v9;
        uint64_t result = (unsigned int *)operator new(12 * v9, (std::align_val_t)4uLL);
        *(void *)char v1 = result;
        *((void *)v1 + 1) = 0;
        uint64_t v10 = v1[4];
        if (v10)
        {
          uint64_t v11 = 12 * v10;
          do
          {
            *uint64_t result = -1;
            result += 3;
            v11 -= 12;
          }
          while (v11);
        }
      }
    }
    else
    {
      uint64_t result = (unsigned int *)MEMORY[0x1D25D9CD0](result, 4);
      *(void *)char v1 = 0;
      *((void *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

BOOL sub_1CBBFC438(uint64_t a1, unsigned int a2)
{
  v15[4] = *MEMORY[0x1E4F143B8];
  sub_1CBBFC238((uint64_t)&v13, a2, *(void *)(*(void *)(a1 + 24) + 8), *(void *)(*(void *)(a1 + 24) + 56));
  uint64_t v3 = v13;
  if (v14)
  {
    uint64_t v4 = *(void *)a1;
    unsigned int v5 = *(_DWORD *)(a1 + 16);
    uint64_t v6 = 4 * v14 - 4;
    uint64_t v7 = (int *)v13;
    do
    {
      int v8 = *v7++;
      uint64_t v9 = sub_1CBBFC6DC(v4, v5, v8);
      BOOL v10 = v9 != 0;
      if (v9) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v6 == 0;
      }
      v6 -= 4;
    }
    while (!v11);
  }
  else
  {
    BOOL v10 = 0;
  }
  if (v3 != v15) {
    free(v3);
  }
  return v10;
}

void sub_1CBBFC528(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v19[4] = *MEMORY[0x1E4F143B8];
  sub_1CBBFC238((uint64_t)&v18, a2, *(void *)(*(void *)(a1 + 24) + 8), *(void *)(*(void *)(a1 + 24) + 56));
  sub_1CBBFC238((uint64_t)&v15, a3, *(void *)(*(void *)(a1 + 24) + 8), *(void *)(*(void *)(a1 + 24) + 56));
  unint64_t v6 = v16;
  if (v16)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a2 << 32;
    while (1)
    {
      uint64_t v9 = *((unsigned int *)v18 + v7);
      BOOL v10 = v15;
      uint64_t v14 = 0;
      if ((sub_1CBBFC758(*(void *)a1, *(_DWORD *)(a1 + 16), *((_DWORD *)v15 + v7), &v14) & 1) == 0) {
        break;
      }
LABEL_9:
      if (++v7 >= v6) {
        goto LABEL_13;
      }
    }
    int v11 = *(_DWORD *)(a1 + 8);
    unsigned int v12 = *(_DWORD *)(a1 + 16);
    if (4 * v11 + 4 >= 3 * v12)
    {
      v12 *= 2;
    }
    else if (v12 + ~v11 - *(_DWORD *)(a1 + 12) > v12 >> 3)
    {
LABEL_6:
      uint64_t v13 = v14;
      ++*(_DWORD *)(a1 + 8);
      if (*(_DWORD *)v13 != -1) {
        --*(_DWORD *)(a1 + 12);
      }
      *(_DWORD *)uint64_t v13 = v10[v7];
      *(void *)(v13 + 4) = v8 | v9;
      unint64_t v6 = v16;
      goto LABEL_9;
    }
    sub_1CBBFC7F0(a1, v12);
    uint64_t v14 = 0;
    sub_1CBBFC758(*(void *)a1, *(_DWORD *)(a1 + 16), v10[v7], &v14);
    goto LABEL_6;
  }
LABEL_13:
  if (v15 != &v17) {
    free(v15);
  }
  if (v18 != v19) {
    free(v18);
  }
}

uint64_t sub_1CBBFC6DC(uint64_t a1, unsigned int a2, int a3)
{
  if (a2)
  {
    unsigned int v3 = (37 * a3) & (a2 - 1);
    uint64_t v4 = (int *)(a1 + 12 * v3);
    int v5 = *v4;
    if (*v4 == a3) {
      goto LABEL_8;
    }
    int v6 = 1;
    while (v5 != -1)
    {
      unsigned int v7 = v3 + v6++;
      unsigned int v3 = v7 & (a2 - 1);
      uint64_t v4 = (int *)(a1 + 12 * v3);
      int v5 = *v4;
      if (*v4 == a3) {
        goto LABEL_8;
      }
    }
  }
  uint64_t v4 = (int *)(a1 + 12 * a2);
LABEL_8:
  if (v4 == (int *)(a1 + 12 * a2)) {
    return 0;
  }
  else {
    return *(void *)(v4 + 1);
  }
}

uint64_t sub_1CBBFC758(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    int v6 = (_DWORD *)(a1 + 12 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      BOOL v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          BOOL v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (_DWORD *)(a1 + 12 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_DWORD *sub_1CBBFC7F0(uint64_t a1, int a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  unint64_t v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  int v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40) {
    unsigned int v8 = v7 + 1;
  }
  else {
    unsigned int v8 = 64;
  }
  *(_DWORD *)(a1 + 16) = v8;
  uint64_t result = operator new(12 * v8, (std::align_val_t)4uLL);
  *(void *)a1 = result;
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = *(unsigned int *)(a1 + 16);
    if (v10)
    {
      uint64_t v11 = 12 * v10;
      do
      {
        *uint64_t result = -1;
        result += 3;
        v11 -= 12;
      }
      while (v11);
    }
    if (v3)
    {
      uint64_t v12 = 12 * v3;
      unsigned int v13 = (void *)(v4 + 4);
      do
      {
        unsigned int v14 = *((_DWORD *)v13 - 1);
        if (v14 <= 0xFFFFFFFD)
        {
          unsigned int v18 = 0;
          sub_1CBBFC758(*(void *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          unint64_t v15 = v18;
          unsigned int *v18 = v14;
          *(void *)(v15 + 1) = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        unsigned int v13 = (void *)((char *)v13 + 12);
        v12 -= 12;
      }
      while (v12);
    }
    JUMPOUT(0x1D25D9CD0);
  }
  *(void *)(a1 + 8) = 0;
  uint64_t v16 = *(unsigned int *)(a1 + 16);
  if (v16)
  {
    uint64_t v17 = 12 * v16;
    do
    {
      *uint64_t result = -1;
      result += 3;
      v17 -= 12;
    }
    while (v17);
  }
  return result;
}

unsigned int *sub_1CBBFC94C(unsigned int *result)
{
  uint64_t v1 = result[2];
  if (v1 == 1) {
    return result;
  }
  unsigned int v2 = result;
  uint64_t v3 = *(void *)(*(void *)result + 8 * v1 - 8);
  uint64_t v4 = **(void **)result;
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v3 || (*(unsigned char *)v3 & 4) == 0)
  {
    while ((*(_WORD *)(v3 + 44) & 8) != 0)
      uint64_t v3 = *(void *)(v3 + 8);
  }
  unsigned int v52 = result[96];
  unsigned int v6 = result[97];
  unint64_t v7 = *(void *)(v3 + 8);
  if (v4 != v7)
  {
    do
    {
      uint64_t v8 = *(void *)(v4 + 8);
      uint64_t v9 = *(void *)(*(void *)(v4 + 24) + 32);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 728);
        if (v10) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, v4);
        }
        uint64_t v11 = *(unsigned int *)(v4 + 40);
        if (v11)
        {
          uint64_t v12 = *(void *)(v4 + 32);
          uint64_t v13 = *(void *)(v9 + 40);
          uint64_t v14 = 32 * v11;
          do
          {
            if (!*(unsigned char *)v12)
            {
              uint64_t v15 = *(unsigned int *)(v12 + 4);
              if ((v15 & 0x80000000) != 0) {
                uint64_t v16 = (uint64_t *)(*(void *)(v13 + 24) + 16 * (v15 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v16 = (uint64_t *)(*(void *)(v13 + 272) + 8 * v15);
              }
              uint64_t v17 = *v16;
              uint64_t v19 = *(void *)(v12 + 16);
              uint64_t v18 = *(void *)(v12 + 24);
              if (v12 != *v16) {
                uint64_t v16 = (uint64_t *)(v19 + 24);
              }
              *uint64_t v16 = v18;
              if (v18) {
                uint64_t v20 = v18;
              }
              else {
                uint64_t v20 = v17;
              }
              *(void *)(v20 + 16) = v19;
              *(void *)(v12 + 16) = 0;
              *(void *)(v12 + 24) = 0;
            }
            v12 += 32;
            v14 -= 32;
          }
          while (v14);
        }
      }
      *(void *)(v4 + 24) = 0;
      uint64_t v21 = *(unint64_t **)(v4 + 8);
      unint64_t v22 = *(void *)v4 & 0xFFFFFFFFFFFFFFF8;
      unint64_t *v21 = v22 | *v21 & 7;
      *(void *)(v22 + 8) = v21;
      *(void *)v4 &= 7uLL;
      *(void *)(v4 + 8) = 0;
      uint64_t v23 = *(void *)(*(void *)(v5 + 40) + 32);
      int v24 = *(void **)(v4 + 32);
      if (v24)
      {
        uint64_t v25 = *(unsigned __int8 *)(v4 + 47);
        uint64_t v26 = (uint64_t *)(v23 + 232);
        if (*(_DWORD *)(v23 + 240) <= v25) {
          sub_1CC34BDE0(v23 + 232, v25 + 1);
        }
        uint64_t v27 = *v26;
        *int v24 = *(void *)(*v26 + 8 * v25);
        *(void *)(v27 + 8 * v25) = v24;
      }
      *(void *)uint64_t v4 = *(void *)(v23 + 224);
      *(void *)(v23 + 224) = v4;
      uint64_t v4 = v8;
    }
    while (v8 != v7);
  }
  uint64_t v28 = *(llvm::MachineFunction **)(v5 + 32);
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  unsigned int v53 = v28;
  uint64_t v54 = (*(uint64_t (**)(void *))(**((void **)v28 + 2) + 104))(*((void **)v28 + 2));
  unint64_t v62 = 0;
  *(void *)&long long v55 = 0;
  long long v56 = v7;
  *((void *)&v55 + 1) = v5;
  uint64_t v29 = *(void *)(v54 + 8) + 912;
  unint64_t v62 = 0;
  unint64_t v30 = llvm::MachineFunction::CreateMachineInstr(v53, v29, &v62, 0);
  if (v62)
  {
    int v48 = *v62;
    if ((v48 - 4) > 0x1E)
    {
      if ((v48 - 3) >= 0xFFFFFFFE) {
        uint64_t v51 = v62;
      }
      else {
        uint64_t v51 = 0;
      }
      if ((v48 - 3) < 0xFFFFFFFE)
      {
        if (v48 == 3) {
          *((void *)v62 + 1) = 0;
        }
        goto LABEL_31;
      }
      unint64_t v50 = (unint64_t)(v51 + 8);
    }
    else
    {
      if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
        goto LABEL_31;
      }
      uint64_t v49 = *((void *)v62 + 2);
      if ((v49 & 4) == 0) {
        goto LABEL_31;
      }
      unint64_t v50 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v50) {
        goto LABEL_31;
      }
    }
    uint64_t v58 = &v62;
    sub_1CC5FA668(v50 + 16, &v58);
  }
LABEL_31:
  unint64_t v31 = (unint64_t *)v56;
  uint64_t v32 = *(void *)(*((void *)&v55 + 1) + 40);
  *((void *)v30 + 3) = v32;
  uint64_t v33 = *(void *)(v32 + 32);
  uint64_t v34 = *((unsigned int *)v30 + 10);
  if (v34)
  {
    uint64_t v40 = *((void *)v30 + 4);
    uint64_t v41 = *(void *)(v33 + 40);
    uint64_t v42 = 32 * v34;
    do
    {
      if (!*(unsigned char *)v40)
      {
        uint64_t v43 = *(unsigned int *)(v40 + 4);
        if ((int)v43 >= 0) {
          uint64_t v44 = (uint64_t *)(*(void *)(v41 + 272) + 8 * v43);
        }
        else {
          uint64_t v44 = (uint64_t *)(*(void *)(v41 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
        }
        uint64_t v45 = *v44;
        if (*v44)
        {
          uint64_t v46 = *(void *)(v45 + 16);
          *(void *)(v45 + 16) = v40;
          *(void *)(v40 + 16) = v46;
          if (*(unsigned char *)(v40 + 3))
          {
            *(void *)(v40 + 24) = v45;
          }
          else
          {
            *(void *)(v40 + 24) = 0;
            uint64_t v44 = (uint64_t *)(v46 + 24);
          }
        }
        else
        {
          *(void *)(v40 + 16) = v40;
          *(void *)(v40 + 24) = 0;
        }
        *uint64_t v44 = v40;
      }
      v40 += 32;
      v42 -= 32;
    }
    while (v42);
  }
  uint64_t v35 = *(void *)(v33 + 728);
  if (v35) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v35 + 24))(v35, v30);
  }
  unint64_t v36 = *v31 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v30 = v36 | *(void *)v30 & 7;
  *((void *)v30 + 1) = v31;
  *(void *)(v36 + 8) = v30;
  unint64_t *v31 = *v31 & 7 | (unint64_t)v30;
  if (*((void *)&v56 + 1)) {
    (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v56 + 1) + 24))(*((void *)&v56 + 1), v30);
  }
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  LODWORD(v58) = 0x1000000;
  HIDWORD(v58) = v6;
  llvm::MachineInstr::addOperand(v30, v53, (const llvm::MachineOperand *)&v58);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  LODWORD(v58) = 201326592;
  HIDWORD(v58) = v52;
  llvm::MachineInstr::addOperand(v30, v53, (const llvm::MachineOperand *)&v58);
  v2[2] = 0;
  sub_1CBBFC2F4(v2 + 74);
  uint64_t result = sub_1CBBFC2F4(v2 + 84);
  v2[40] = 0;
  *((unsigned char *)v2 + 384) = 0;
  *((unsigned char *)v2 + 392) = 0;
  *((unsigned char *)v2 + 144) = 1;
  if ((void)v55)
  {
    int v37 = *(unsigned __int8 *)v55;
    if ((v37 - 4) > 0x1E)
    {
      if ((v37 - 3) >= 0xFFFFFFFE) {
        uint64_t v38 = v55;
      }
      else {
        uint64_t v38 = 0;
      }
      if ((v37 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v39 = v38 + 8;
LABEL_46:
        uint64_t v58 = (unsigned __int8 **)&v55;
        return (unsigned int *)sub_1CC5FA668(v39 + 16, &v58);
      }
      if (v37 == 3) {
        *(void *)(v55 + 8) = 0;
      }
    }
    else if ((*(unsigned char *)(v55 + 1) & 0x7F) == 2 || *(_DWORD *)(v55 + 12))
    {
      uint64_t v47 = *(void *)(v55 + 16);
      if ((v47 & 4) != 0)
      {
        unint64_t v39 = v47 & 0xFFFFFFFFFFFFFFF8;
        if (v39) {
          goto LABEL_46;
        }
      }
    }
  }
  return result;
}

void sub_1CBBFCF14(uint64_t **a1)
{
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[*((unsigned int *)a1 + 2) - 1];
  if (!v3 || (*(unsigned char *)v3 & 4) == 0)
  {
    while ((*(_WORD *)(v3 + 44) & 8) != 0)
      uint64_t v3 = *(void *)(v3 + 8);
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (v2 != v4)
  {
    uint64_t v5 = *(void *)(v2 + 24);
    do
    {
      uint64_t v6 = *(void *)(v2 + 8);
      uint64_t v7 = *(void *)(*(void *)(v2 + 24) + 32);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 728);
        if (v8) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v2);
        }
        uint64_t v9 = *(unsigned int *)(v2 + 40);
        if (v9)
        {
          uint64_t v10 = *(void *)(v2 + 32);
          uint64_t v11 = *(void *)(v7 + 40);
          uint64_t v12 = 32 * v9;
          do
          {
            if (!*(unsigned char *)v10)
            {
              uint64_t v13 = *(unsigned int *)(v10 + 4);
              if ((v13 & 0x80000000) != 0) {
                uint64_t v14 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v14 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v13);
              }
              uint64_t v15 = *v14;
              uint64_t v17 = *(void *)(v10 + 16);
              uint64_t v16 = *(void *)(v10 + 24);
              if (v10 != *v14) {
                uint64_t v14 = (uint64_t *)(v17 + 24);
              }
              *uint64_t v14 = v16;
              if (v16) {
                uint64_t v18 = v16;
              }
              else {
                uint64_t v18 = v15;
              }
              *(void *)(v18 + 16) = v17;
              *(void *)(v10 + 16) = 0;
              *(void *)(v10 + 24) = 0;
            }
            v10 += 32;
            v12 -= 32;
          }
          while (v12);
        }
      }
      *(void *)(v2 + 24) = 0;
      uint64_t v19 = *(unint64_t **)(v2 + 8);
      unint64_t v20 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
      *uint64_t v19 = v20 | *v19 & 7;
      *(void *)(v20 + 8) = v19;
      *(void *)v2 &= 7uLL;
      *(void *)(v2 + 8) = 0;
      uint64_t v21 = *(void *)(*(void *)(v5 + 40) + 32);
      unint64_t v22 = *(void **)(v2 + 32);
      if (v22)
      {
        uint64_t v23 = *(unsigned __int8 *)(v2 + 47);
        int v24 = (uint64_t *)(v21 + 232);
        if (*(_DWORD *)(v21 + 240) <= v23) {
          sub_1CC34BDE0(v21 + 232, v23 + 1);
        }
        uint64_t v25 = *v24;
        void *v22 = *(void *)(*v24 + 8 * v23);
        *(void *)(v25 + 8 * v23) = v22;
      }
      *(void *)uint64_t v2 = *(void *)(v21 + 224);
      *(void *)(v21 + 224) = v2;
      uint64_t v2 = v6;
    }
    while (v6 != v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

uint64_t sub_1CBBFD0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 16);
  uint64_t v4 = *(void *)a2 + 12 * v3;
  if (*(_DWORD *)(a2 + 8))
  {
    if (v3)
    {
      uint64_t v5 = 12 * v3;
      uint64_t v6 = *(int **)a2;
      while (*v6 >= 0xFFFFFFFE)
      {
        v6 += 3;
        v5 -= 12;
        if (!v5) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      uint64_t v6 = *(int **)a2;
    }
  }
  else
  {
LABEL_6:
    uint64_t v6 = (int *)(*(void *)a2 + 12 * v3);
  }
  uint64_t v7 = *(void *)a2 + 12 * v3;
  while (1)
  {
LABEL_9:
    if (v6 == (int *)v7) {
      return 0;
    }
    uint64_t v11 = 0;
    if (sub_1CBBFC758(*(void *)(a1 + 296), *(_DWORD *)(a1 + 312), *v6, &v11)) {
      return 1;
    }
    uint64_t v11 = 0;
    if (sub_1CBBFC758(*(void *)(a1 + 336), *(_DWORD *)(a1 + 352), *v6, &v11)) {
      return 1;
    }
    uint64_t v8 = (unsigned int *)(v6 + 3);
    while (v8 != (unsigned int *)v4)
    {
      unsigned int v9 = *v8;
      v8 += 3;
      if (v9 <= 0xFFFFFFFD)
      {
        uint64_t v6 = (int *)(v8 - 3);
        goto LABEL_9;
      }
    }
    uint64_t v6 = (int *)v4;
  }
}

void sub_1CBBFD1CC(void *a1)
{
  *a1 = &unk_1F25F0A58;
  uint64_t v2 = (void *)a1[2];
  if (v2 != (void *)a1[1]) {
    free(v2);
  }

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CBBFD250()
{
  v4.n128_u64[0] = (unint64_t)"Show the number of registers live over each call";
  v4.n128_u64[1] = 48;
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD4130FC((llvm::cl::Option *)&unk_1EBCC1428, "agx3-post-ra-peephole-regs-live-over-calls", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1428, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Eliminate Redundant copy instructions PostRA";
  v4.n128_u64[1] = 44;
  char v2 = 1;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD425938(&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC14E8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Eliminate dead rld instructions PostRA";
  v4.n128_u64[1] = 38;
  char v2 = 1;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD425AB0(&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC15A8, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Only run the copy elimination part of this pass";
  v4.n128_u64[1] = 47;
  char v2 = 0;
  uint64_t v3 = &v2;
  int v1 = 1;
  sub_1CD4209D8((llvm::cl::Option *)&unk_1EBCC1668, "agx3-post-ra-peephole-only-copy-eliminate", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1668, &dword_1CB82C000);
}

void sub_1CBBFD3B8()
{
}

void sub_1CBBFD454()
{
}

void sub_1CBBFD4FC(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    __n128 v4 = a1;
    free(v1);
    a1 = v4;
  }
  char v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBBFD5B0(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  char v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  __n128 v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBBFD65C()
{
  return "AGX3 pseudo wait placement pass";
}

BOOL sub_1CBBFD670(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
  if ((v2 & 0xFF00000000) == 0) {
    return 0;
  }
  BOOL v3 = (v2 - 64) > 0x3A || ((1 << (v2 - 64)) & 0x60001F460000001) == 0;
  if (v3 && ((v2 - 147) <= 0x14 ? (BOOL v4 = ((1 << (v2 + 109)) & 0x1E0001) == 0) : (BOOL v4 = 1), v4)) {
    return 0;
  }
  else {
    return v2 != 147;
  }
}

uint64_t sub_1CBBFD6F0(uint64_t a1)
{
  return **(void **)(a1 + 8);
}

uint64_t sub_1CBBFD6FC()
{
  llvm::RegisterBank::RegisterBank((llvm::RegisterBank *)&unk_1EBCC1728, 0, "GPR", 512, dword_1CDC6D5A0, 128);

  return __cxa_atexit((void (*)(void *))sub_1CD413354, &unk_1EBCC1728, &dword_1CB82C000);
}

uint64_t sub_1CBBFD770(uint64_t a1)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1CDEF47A0;
  v4[1] = 64;
  v4[2] = &unk_1CDC7D220;
  v4[3] = 32;
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2)
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8), a1 + 128, a1);
    *(void *)(a1 + 48) = v2;
  }
  return v4[2 * *(unsigned __int8 *)(v2 + 569)];
}

uint64_t sub_1CBBFD830(uint64_t a1)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1CDEF7C50;
  v4[1] = 32;
  v4[2] = &unk_1CDC7D260;
  v4[3] = 16;
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2)
  {
    uint64_t v2 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8), a1 + 128, a1);
    *(void *)(a1 + 48) = v2;
  }
  return v4[2 * *(unsigned __int8 *)(v2 + 569)];
}

uint64_t sub_1CBBFD8F0(uint64_t a1, int a2, int a3)
{
  return byte_1CDC72B7E[230 * byte_1CDC72A98[a2 - 1] + a3 - 1];
}

uint64_t sub_1CBBFD91C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = byte_1CDC74758[a2 - 1];
  uint64_t v4 = qword_1CDC7D280[2 * v3];
  if (!v4) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = &qword_1CDC7D280[2 * v3 + 2];
  do
  {
    uint64_t v7 = v4 & a3;
    uint64_t v8 = __ROR8__(v7, -*((unsigned char *)v6 - 8));
    if (*((unsigned char *)v6 - 8)) {
      uint64_t v7 = v8;
    }
    result |= v7;
    uint64_t v9 = *v6;
    v6 += 2;
    uint64_t v4 = v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1CBBFD97C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = byte_1CDC74758[a2 - 1];
  if (!qword_1CDC7D280[2 * v3]) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v6 = *(void *)(*(void *)(a1 + 232) + 8 * a2) & a3;
  uint64_t v7 = &qword_1CDC7D280[2 * v3 + 2];
  do
  {
    uint64_t v8 = __ROR8__(v6, *((unsigned char *)v7 - 8));
    if (*((unsigned char *)v7 - 8)) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = v6;
    }
    result |= v9;
    uint64_t v10 = *v7;
    v7 += 2;
  }
  while (v10);
  return result;
}

uint64_t sub_1CBBFD9E4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = (char *)&unk_1CDC7483E + 230 * *(unsigned __int16 *)(*(void *)a2 + 24);
    if (v3[a3 - 1]) {
      return *(void *)(*(void *)(a1 + 240) + 8 * (v3[a3 - 1] - 1));
    }
    else {
      return 0;
    }
  }
  return a2;
}

char *sub_1CBBFDA28(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1CDC7BB40 + 8 * *(unsigned __int16 *)(*(void *)a2 + 24);
}

uint64_t sub_1CBBFDA40()
{
  return 1;
}

uint64_t sub_1CBBFDA48()
{
  return 24;
}

char *sub_1CBBFDA50(uint64_t a1, int a2)
{
  return (char *)&unk_1CDC7C070 + 4 * word_1CDC7C668[a2];
}

float sub_1CBBFDA6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
  float result = 1.0;
  if ((v3 & 0xFF00000000) != 0)
  {
    BOOL v5 = (v3 - 64) > 0x3A || ((1 << (v3 - 64)) & 0x60001F460000001) == 0;
    if (!v5 || ((v3 - 147) <= 0x14 ? (BOOL v6 = ((1 << (v3 + 109)) & 0x1E0001) == 0) : (BOOL v6 = 1), !v6))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E768, memory_order_acquire) & 1) == 0)
      {
        int v10 = __cxa_guard_acquire(&qword_1EA61E768);
        float result = 1.0;
        if (v10)
        {
          byte_1EA61E760 = 0;
          __cxa_guard_release(&qword_1EA61E768);
          float result = 1.0;
        }
      }
      if (!byte_1EA61E760 || (*(unsigned char *)(*(void *)(a2 + 16) + 16) & 2) != 0)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E778, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EA61E778))
        {
          dword_1EA61E770 = 63;
          __cxa_guard_release(&qword_1EA61E778);
        }
        int v7 = dword_1EA61E770;
        uint64_t v8 = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
        if ((v8 & 0xFF00000000) == 0) {
          llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
        }
        if ((int)v8 <= 146)
        {
          switch((int)v8)
          {
            case ']':
            case 'b':
              double v9 = 150.0;
              return ceil(((double)v7 + 1.0) * v9 / 500.0);
            case '^':
            case 'd':
              double v9 = 39.0;
              return ceil(((double)v7 + 1.0) * v9 / 500.0);
            case '_':
            case 'a':
            case 'c':
              __break(1u);
              JUMPOUT(0x1CBBFDC54);
            case 'e':
            case 'f':
            case 'g':
            case 'h':
              goto LABEL_22;
            default:
              if (v8 == 64) {
                double v9 = 250.0;
              }
              else {
LABEL_22:
              }
                double v9 = 48.0;
              break;
          }
        }
        else
        {
          double v9 = 32.0;
          if ((v8 - 164) < 4) {
            double v9 = 500.0;
          }
        }
        return ceil(((double)v7 + 1.0) * v9 / 500.0);
      }
    }
  }
  return result;
}

uint64_t sub_1CBBFDC84(uint64_t a1)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  sub_1CD425FB4(a1);
  *(void *)uint64_t v2 = &unk_1F25FAAF8;
  uint64_t v3 = (uint64_t *)(v2 + 280);
  *(void *)(v2 + 280) = v2 + 296;
  *(void *)(v2 + 288) = 0x600000000;
  *(_DWORD *)(v2 + 344) = 0;
  uint64_t v4 = (void *)(v2 + 352);
  *(void *)(v2 + 352) = v2 + 368;
  *(void *)(v2 + 360) = 0x600000000;
  sub_1CB90D610(v2 + 352, 1uLL, 0);
  *(_DWORD *)(a1 + 416) = 24;
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296))(a1);
  *(void *)(a1 + 424) = a1 + 440;
  *(void *)(a1 + 432) = 0x600000000;
  sub_1CB90D610(a1 + 424, (v5 + 63) >> 6, 0);
  *(_DWORD *)(a1 + 488) = v5;
  BOOL v6 = (void *)(a1 + 496);
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296))(a1);
  *(void *)(a1 + 496) = a1 + 512;
  *(void *)(a1 + 504) = 0x600000000;
  sub_1CB90D610(a1 + 496, (v7 + 63) >> 6, 0);
  *(_DWORD *)(a1 + 560) = v7;
  *(void *)(a1 + 584) = a1 + 600;
  *(void *)(a1 + 592) = 0x400000000;
  *(void *)(a1 + 616) = a1 + 632;
  *(void *)(a1 + 624) = 0x400000000;
  *(void *)(a1 + 648) = a1 + 672;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  sub_1CB8F8DF4((uint64_t)v3, *(_DWORD *)(a1 + 16), 0);
  uint64_t v8 = **(unsigned __int16 ****)(*(void *)(a1 + 240) + 96);
  uint64_t v9 = *((unsigned __int16 *)v8 + 10);
  if (*((_WORD *)v8 + 10))
  {
    int v10 = *v8;
    uint64_t v11 = *v3;
    uint64_t v12 = 2 * v9;
    do
    {
      unsigned int v13 = *v10++;
      *(void *)(v11 + (((unint64_t)v13 >> 3) & 0x1FF8)) |= 1 << v13;
      v12 -= 2;
    }
    while (v12);
  }
  unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 296))(a1);
  *(_DWORD *)(a1 + 568) = v14;
  *(_DWORD *)(a1 + 572) = v14;
  v45[0] = v46;
  v45[1] = (void *)0x600000000;
  sub_1CB90D610((uint64_t)v45, (v14 + 63) >> 6, 0);
  v46[12] = v14;
  if (v14)
  {
    unsigned int v15 = 0;
    uint64_t v16 = v45[0];
    while (1)
    {
      if (v15 - 22 <= 1) {
        *(void *)(*v4 + 8 * (v15 >> 6)) |= 1 << v15;
      }
      if (v15 == 3 || v15 == 23)
      {
        *(void *)(*(void *)(a1 + 424) + 8 * (v15 >> 6)) |= 1 << v15;
        if (v15 == 23) {
          break;
        }
      }
      if (v15 == 2)
      {
        uint64_t v17 = 4;
        uint64_t v18 = v16;
LABEL_15:
        *v18 |= v17;
      }
      if (v14 == ++v15)
      {
        unsigned int v19 = 0;
        uint64_t v20 = *(void *)(a1 + 424);
        uint64_t v21 = v45[0];
        while (1)
        {
          uint64_t v22 = 1 << v19;
          uint64_t v23 = v19 >> 6;
          if (((1 << v19) & *(void *)(v20 + 8 * v23)) == 0) {
            break;
          }
          if ((*(void *)(*v4 + 8 * v23) & v22) != 0)
          {
            if ((*(void *)(*v6 + 8 * v23) & v22) == 0) {
              break;
            }
            *(_DWORD *)(a1 + 576) = v19;
          }
          else
          {
            *(_DWORD *)(a1 + 572) = v19;
          }
LABEL_20:
          if (v14 == ++v19)
          {
            int v24 = operator new(4 * v14);
            bzero(v24, 4 * v14);
            goto LABEL_26;
          }
        }
        if ((v21[v23] & v22) != 0) {
          *(_DWORD *)(a1 + 580) = v19;
        }
        goto LABEL_20;
      }
    }
    uint64_t v17 = 0x800000;
    uint64_t v18 = (void *)*v6;
    goto LABEL_15;
  }
  int v24 = 0;
LABEL_26:
  int v25 = *(_DWORD *)(a1 + 44);
  if (v25)
  {
    uint64_t v26 = 0;
    do
    {
      uint64_t v27 = (int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 328))(a1, v26);
      int v28 = *v27;
      if (*v27 != -1)
      {
        unsigned int v29 = 1;
        do
        {
          ++*((_DWORD *)v24 + v28);
          int v28 = v27[v29++];
        }
        while (v28 != -1);
      }
      uint64_t v26 = (v26 + 1);
    }
    while (v26 != v25);
  }
  unsigned int v30 = *(_DWORD *)((*(uint64_t (**)(uint64_t, __int16 ***))(*(void *)a1 + 280))(a1, &off_1E66AF580) + 4);
  (*(void (**)(uint64_t, _UNKNOWN ***))(*(void *)a1 + 280))(a1, &off_1E66ABCB8);
  if (v14)
  {
    uint64_t v31 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = *(unsigned int *)(a1 + 572);
    do
    {
      if (v33 != v31 && ((*(void *)(*v4 + 8 * (v31 >> 6)) >> v31) & 1) != 0)
      {
        unsigned int v34 = *((_DWORD *)v24 + v31);
        if (v34 > v32 && v34 <= v30)
        {
          *(_DWORD *)(a1 + 568) = v31;
          unsigned int v32 = v34;
        }
      }
      ++v31;
    }
    while (v14 != v31);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1858, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1858))
  {
    byte_1EBCC1848 = 1;
    __cxa_guard_release(&qword_1EBCC1858);
  }
  unint64_t v36 = (_DWORD **)(a1 + 616);
  if (byte_1EBCC1848)
  {
    int v37 = *(_DWORD *)(a1 + 576);
    *(_DWORD *)(a1 + 592) = 0;
    if (*(_DWORD *)(a1 + 596) <= 1u) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    **(void **)(a1 + 584) = *(void *)&v37 | 0xFFFFFFFF00000000;
    *(_DWORD *)(a1 + 592) += 2;
    int v38 = *(_DWORD *)(a1 + 568);
    int v39 = *(_DWORD *)(a1 + 576);
    *(_DWORD *)(a1 + 624) = 0;
    if (*(_DWORD *)(a1 + 628) <= 2u) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v40 = *v36;
    *uint64_t v40 = v38;
    v40[1] = v39;
    v40[2] = -1;
    int v41 = 3;
  }
  else
  {
    int v43 = *(_DWORD *)(a1 + 572);
    *(_DWORD *)(a1 + 592) = 0;
    if (*(_DWORD *)(a1 + 596) <= 1u) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    **(void **)(a1 + 584) = *(void *)&v43 | 0xFFFFFFFF00000000;
    *(_DWORD *)(a1 + 592) += 2;
    int v44 = *(_DWORD *)(a1 + 568);
    *(_DWORD *)(a1 + 624) = 0;
    if (*(_DWORD *)(a1 + 628) <= 1u) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)*unint64_t v36 = *(void *)&v44 | 0xFFFFFFFF00000000;
    int v41 = 2;
  }
  *(_DWORD *)(a1 + 624) += v41;
  if (v24) {
    operator delete(v24);
  }
  if (v45[0] != v46) {
    free(v45[0]);
  }
  return a1;
}

char *sub_1CBBFE36C(uint64_t a1, __int16 ***a2)
{
  uint64_t v2 = *((unsigned __int16 *)*a2 + 12);
  BOOL v3 = (v2 - 14) > 0x32 || ((1 << (v2 - 14)) & 0x4000000004001) == 0;
  if (!v3 || v2 == 105) {
    return *(char **)(a1 + 584);
  }
  if (v2 == 127 || a2 == (__int16 ***)&off_1E66ABCB8) {
    return *(char **)(a1 + 584);
  }
  if (a2 == (__int16 ***)&off_1E66AF660
    || a2 == (__int16 ***)&off_1E66AF628
    || a2 == (__int16 ***)&off_1E66AF5F0
    || a2 == (__int16 ***)&off_1E66AF970
    || a2 == (__int16 ***)&off_1E66AF778
    || a2 == (__int16 ***)&off_1E66AF6D0
    || a2 == &off_1E66AF580
    || a2 == (__int16 ***)&off_1E66AF9A8)
  {
    return *(char **)(a1 + 616);
  }
  return (char *)&unk_1CDC7C070 + 4 * word_1CDC7BF70[v2];
}

uint64_t sub_1CBBFE460(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E788, memory_order_acquire) & 1) == 0)
  {
    uint64_t v16 = a1;
    unsigned int v10 = a3;
    uint64_t v13 = a2;
    int v4 = __cxa_guard_acquire(&qword_1EA61E788);
    a3 = v10;
    a2 = v13;
    int v5 = v4;
    a1 = v16;
    if (v5)
    {
      byte_1EA61E780 = 1;
      __cxa_guard_release(&qword_1EA61E788);
      a1 = v16;
      a3 = v10;
      a2 = v13;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E798, memory_order_acquire) & 1) == 0)
  {
    uint64_t v17 = a1;
    unsigned int v11 = a3;
    uint64_t v14 = a2;
    int v6 = __cxa_guard_acquire(&qword_1EA61E798);
    a3 = v11;
    a2 = v14;
    int v7 = v6;
    a1 = v17;
    if (v7)
    {
      dword_1EA61E790 = -1;
      __cxa_guard_release(&qword_1EA61E798);
      a1 = v17;
      a3 = v11;
      a2 = v14;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E7A8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v18 = a1;
    unsigned int v12 = a3;
    uint64_t v15 = a2;
    int v8 = __cxa_guard_acquire(&qword_1EA61E7A8);
    a3 = v12;
    a2 = v15;
    int v9 = v8;
    a1 = v18;
    if (v9)
    {
      dword_1EA61E7A0 = -1;
      __cxa_guard_release(&qword_1EA61E7A8);
      a1 = v18;
      a3 = v12;
      a2 = v15;
    }
  }
  if (*(_DWORD *)(a1 + 572) == a3) {
    return 4080;
  }
  if (((*(void *)(*(void *)(a1 + 352) + 8 * (a3 >> 6)) >> a3) & 1) == 0 || !byte_1EA61E780)
  {
    if (*(_DWORD *)(a1 + 568) != a3) {
      return word_1CDC7BF40[a3];
    }
    return 2 * (*(unsigned int (**)(void))(**(void **)(a2 + 16) + 424))(*(void *)(a2 + 16));
  }
  uint64_t result = dword_1EA61E790;
  if (dword_1EA61E790 < 0) {
    return 2 * (*(unsigned int (**)(void))(**(void **)(a2 + 16) + 424))(*(void *)(a2 + 16));
  }
  return result;
}

void *sub_1CBBFE620()
{
  return &unk_1CDC7D090;
}

void sub_1CBBFE62C(void *a1)
{
  uint64_t v2 = (char *)a1[19];
  BOOL v3 = (char *)a1[20];
  if (v2 == v3) {
    goto LABEL_5;
  }
  int v4 = (char *)a1[19];
  while (*(_WORD *)v4 != 2)
  {
    v4 += 16;
    if (v4 == v3) {
      goto LABEL_5;
    }
  }
  if (!*((void *)v4 + 1))
  {
LABEL_5:
    unint64_t v5 = a1[21];
    if ((unint64_t)v3 >= v5)
    {
      uint64_t v7 = (v3 - v2) >> 4;
      unint64_t v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 60) {
        abort();
      }
      uint64_t v9 = v5 - (void)v2;
      if (v9 >> 3 > v8) {
        unint64_t v8 = v9 >> 3;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v8;
      }
      if (v10)
      {
        if (v10 >> 60) {
          sub_1CB833614();
        }
        unsigned int v11 = (char *)operator new(16 * v10);
      }
      else
      {
        unsigned int v11 = 0;
      }
      unsigned int v12 = &v11[16 * v7];
      *(_WORD *)unsigned int v12 = 2;
      *((void *)v12 + 1) = -1;
      int v6 = v12 + 16;
      if (v2 != v3)
      {
        do
        {
          *((_OWORD *)v12 - 1) = *((_OWORD *)v3 - 1);
          v12 -= 16;
          v3 -= 16;
        }
        while (v3 != v2);
        uint64_t v2 = (char *)a1[19];
      }
      a1[19] = v12;
      a1[20] = v6;
      a1[21] = &v11[16 * v10];
      if (v2) {
        operator delete(v2);
      }
    }
    else
    {
      *(_WORD *)BOOL v3 = 2;
      *((void *)v3 + 1) = -1;
      int v6 = v3 + 16;
    }
    a1[20] = v6;
  }
}

void sub_1CBBFE768(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v255 = *MEMORY[0x1E4F143B8];
  __dst = v253;
  uint64_t v252 = 0x600000000;
  unsigned int v6 = *(_DWORD *)(a1 + 288);
  uint64_t v7 = (void **)(a1 + 280);
  if (v6) {
    BOOL v8 = &__dst == v7;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (v6 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v253, *v7, 8 * v6);
    LODWORD(v252) = v6;
  }
  int v254 = *(_DWORD *)(a1 + 344);
  uint64_t v9 = a2[2];
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 176))(v9);
  unsigned int v11 = *(llvm::Module **)(*a2 + 40);
  unsigned int v245 = &unk_1F25FDCB8;
  uint64_t v246 = v9;
  uint64_t v248 = &v245;
  int v12 = sub_1CBD854F8((uint64_t)&v245);
  if (v248 == &v245)
  {
    (*((void (**)(void **))v245 + 4))(&v245);
  }
  else if (v248)
  {
    (*((void (**)(void))*v248 + 5))();
  }
  unsigned int v13 = dword_1CDC7F304[v12];
  unsigned int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 424))(v9);
  if (v14 < v13) {
    unsigned int v13 = v14;
  }
  sub_1CD1157F4(v11, 0, (uint64_t)&v245);
  unsigned int v15 = v245;
  if (!(_BYTE)v246) {
    unsigned int v15 = 0;
  }
  if (v13 < v15) {
    unsigned int v15 = v13;
  }
  if ((_BYTE)v246) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v13;
  }
  unsigned int v245 = "agx.reduce.reg.pressure";
  __int16 v249 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v11, (const char **)&v245);
  if (NamedMetadata)
  {
    uint64_t v18 = *(void *)(*(void *)(***(void ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(void ***)(NamedMetadata + 48) + 8))
                    + 128);
    unsigned int v19 = (void *)(v18 + 24);
    if (*(_DWORD *)(v18 + 32) >= 0x41u) {
      unsigned int v19 = (void *)*v19;
    }
    uint64_t v20 = (void *)*v19;
    if (v16 >= 0x10) {
      int v21 = 16;
    }
    else {
      int v21 = v16;
    }
    if (v20) {
      unsigned int v16 = v21;
    }
  }
  uint64_t v243 = a3;
  if (!a2[6]) {
    a2[6] = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a2[1] + 216))(a2[1], a2 + 16, a2);
  }
  BOOL v22 = sub_1CBA65424((uint64_t)a2);
  uint64_t v23 = a2[7];
  int v24 = (*(unsigned __int16 *)(*a2 + 18) >> 4) & 0x3FF;
  BOOL v25 = sub_1CD1111E0(*a2, a2[43]);
  BOOL v26 = 1;
  if (v24 && v24 != 8 && v24 != 255) {
    BOOL v26 = *(unsigned char *)(v23 + 62) != 0;
  }
  if (!v25) {
    goto LABEL_45;
  }
  uint64_t v27 = (uint64_t *)a2[41];
LABEL_35:
  if (v27 == a2 + 40)
  {
LABEL_45:
    int v30 = 0;
  }
  else
  {
    for (uint64_t i = v27[7]; ; uint64_t i = *(void *)(i + 8))
    {
      if ((uint64_t *)i == v27 + 6)
      {
        uint64_t v27 = (uint64_t *)v27[1];
        goto LABEL_35;
      }
      uint64_t v29 = *(void *)(i + 16);
      if ((*(unsigned char *)(v29 + 19) & 2) != 0)
      {
        if (*(unsigned char *)(v29 + 4)) {
          break;
        }
      }
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v31 = *(void *)(a1 + 8);
    uint64_t v33 = *(void *)(a1 + 48);
    uint64_t v32 = *(void *)(a1 + 56);
    unsigned int v34 = (unsigned __int16 *)(v32 + (((unint64_t)*(unsigned int *)(v31 + 9496) >> 3) & 0x1FFFFFFE));
    int v36 = *v34;
    uint64_t v35 = v34 + 1;
    int v37 = v36 + 395 * (*(_DWORD *)(v31 + 9496) & 0xF);
    while (1)
    {
      uint64_t v38 = 4 * (unsigned __int16)v37;
      uint64_t v39 = *(unsigned __int16 *)(v33 + v38);
      if (*(_WORD *)(v33 + v38) && v32 != 0) {
        break;
      }
      int v41 = (unsigned __int16)*v35++;
      v37 += v41;
      int v30 = 1;
      if (!v41) {
        goto LABEL_61;
      }
    }
    unsigned int v42 = *(unsigned __int16 *)(v33 + 4 * (unsigned __int16)v37 + 2) << 16;
    int v43 = __dst;
    for (unsigned int j = *(unsigned __int16 *)(v33 + 4 * (unsigned __int16)v37); ; unsigned int j = v39)
    {
      while (1)
      {
        uint64_t v45 = (unsigned __int16 *)(v32 + 2 * *(unsigned int *)(v31 + 24 * v39 + 8));
        do
        {
          v43[(unsigned __int16)j >> 6] |= 1 << j;
          int v46 = *v45++;
          j += v46;
        }
        while (v46);
        uint64_t v39 = HIWORD(v42);
        if (!v39) {
          break;
        }
        unsigned int j = HIWORD(v42);
        v42 >>= 16;
      }
      if (!*v35) {
        break;
      }
      v37 += (unsigned __int16)*v35++;
      uint64_t v47 = (unsigned __int16 *)(v33 + 4 * (unsigned __int16)v37);
      uint64_t v39 = *v47;
      unsigned int v42 = v47[1] << 16;
    }
    int v30 = 1;
  }
LABEL_61:
  int v48 = *(unsigned int **)(a1 + 8);
  uint64_t v49 = *(void *)(a1 + 48);
  uint64_t v50 = *(void *)(a1 + 56);
  uint64_t v244 = a1;
  uint64_t v51 = (unsigned __int16 *)(v50 + (((unint64_t)v48[16] >> 3) & 0x1FFFFFFE));
  int v53 = *v51;
  unsigned int v52 = v51 + 1;
  int v54 = 2 * (v48[16] & 0xF) + v53;
  while (1)
  {
    uint64_t v55 = 4 * (unsigned __int16)v54;
    uint64_t v56 = *(unsigned __int16 *)(v49 + v55);
    if (*(_WORD *)(v49 + v55) && v50 != 0) {
      break;
    }
    int v58 = (unsigned __int16)*v52++;
    v54 += v58;
    if (!v58) {
      goto LABEL_68;
    }
  }
  unsigned int v108 = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v54 + 2) << 16;
  unsigned int v109 = __dst;
  for (unsigned int k = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v54); ; unsigned int k = v56)
  {
    while (1)
    {
      unsigned int v111 = (unsigned __int16 *)(v50 + 2 * v48[6 * v56 + 2]);
      do
      {
        v109[(unsigned __int16)k >> 6] |= 1 << k;
        int v112 = *v111++;
        k += v112;
      }
      while (v112);
      uint64_t v56 = HIWORD(v108);
      if (!v56) {
        break;
      }
      unsigned int k = HIWORD(v108);
      v108 >>= 16;
    }
    if (!*v52) {
      break;
    }
    v54 += (unsigned __int16)*v52++;
    unint64_t v113 = (unsigned __int16 *)(v49 + 4 * (unsigned __int16)v54);
    uint64_t v56 = *v113;
    unsigned int v108 = v113[1] << 16;
  }
LABEL_68:
  uint64_t v241 = v9;
  uint64_t v59 = (unsigned __int16 *)(v50 + (((unint64_t)v48[10] >> 3) & 0x1FFFFFFE));
  int v61 = *v59;
  uint64_t v60 = v59 + 1;
  int v62 = (v48[10] & 0xF) + v61;
  while (1)
  {
    uint64_t v63 = 4 * (unsigned __int16)v62;
    uint64_t v64 = *(unsigned __int16 *)(v49 + v63);
    if (*(_WORD *)(v49 + v63) && v50 != 0) {
      break;
    }
    int v66 = (unsigned __int16)*v60++;
    v62 += v66;
    if (!v66) {
      goto LABEL_75;
    }
  }
  unsigned int v114 = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v62 + 2) << 16;
  int v115 = __dst;
  for (unsigned int m = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v62); ; unsigned int m = v64)
  {
    while (1)
    {
      unsigned int v117 = (unsigned __int16 *)(v50 + 2 * v48[6 * v64 + 2]);
      do
      {
        v115[(unsigned __int16)m >> 6] |= 1 << m;
        int v118 = *v117++;
        m += v118;
      }
      while (v118);
      uint64_t v64 = HIWORD(v114);
      if (!v64) {
        break;
      }
      unsigned int m = HIWORD(v114);
      v114 >>= 16;
    }
    if (!*v60) {
      break;
    }
    v62 += (unsigned __int16)*v60++;
    uint64_t v119 = (unsigned __int16 *)(v49 + 4 * (unsigned __int16)v62);
    uint64_t v64 = *v119;
    unsigned int v114 = v119[1] << 16;
  }
LABEL_75:
  if ((v26 | v22 | v30))
  {
    unint64_t v67 = (unsigned __int16 *)(v50 + (((unint64_t)v48[2350] >> 3) & 0x1FFFFFFE));
    int v69 = *v67;
    unint64_t v68 = v67 + 1;
    int v70 = v69 + 391 * (v48[2350] & 0xF);
    while (1)
    {
      uint64_t v71 = 4 * (unsigned __int16)v70;
      uint64_t v72 = *(unsigned __int16 *)(v49 + v71);
      if (*(_WORD *)(v49 + v71) && v50 != 0) {
        break;
      }
      int v74 = (unsigned __int16)*v68++;
      v70 += v74;
      if (!v74) {
        goto LABEL_83;
      }
    }
    unsigned int v151 = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v70 + 2) << 16;
    uint64_t v152 = __dst;
    for (unsigned int n = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v70); ; unsigned int n = v72)
    {
      while (1)
      {
        int v154 = (unsigned __int16 *)(v50 + 2 * v48[6 * v72 + 2]);
        do
        {
          v152[(unsigned __int16)n >> 6] |= 1 << n;
          int v155 = *v154++;
          n += v155;
        }
        while (v155);
        uint64_t v72 = HIWORD(v151);
        if (!v72) {
          break;
        }
        unsigned int n = HIWORD(v151);
        v151 >>= 16;
      }
      if (!*v68) {
        break;
      }
      v70 += (unsigned __int16)*v68++;
      int v156 = (unsigned __int16 *)(v49 + 4 * (unsigned __int16)v70);
      uint64_t v72 = *v156;
      unsigned int v151 = v156[1] << 16;
    }
LABEL_83:
    uint64_t v75 = (unsigned __int16 *)(v50 + (((unint64_t)v48[1606] >> 3) & 0x1FFFFFFE));
    int v77 = *v75;
    uint64_t v76 = v75 + 1;
    int v78 = v77 + 267 * (v48[1606] & 0xF);
    while (1)
    {
      uint64_t v79 = 4 * (unsigned __int16)v78;
      uint64_t v80 = *(unsigned __int16 *)(v49 + v79);
      if (*(_WORD *)(v49 + v79) && v50 != 0) {
        break;
      }
      int v82 = (unsigned __int16)*v76++;
      v78 += v82;
      if (!v82) {
        goto LABEL_90;
      }
    }
    unsigned int v157 = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v78 + 2) << 16;
    long long v158 = __dst;
    for (iuint64_t i = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v78); ; iuint64_t i = v80)
    {
      while (1)
      {
        uint64_t v160 = (unsigned __int16 *)(v50 + 2 * v48[6 * v80 + 2]);
        do
        {
          v158[(unsigned __int16)ii >> 6] |= 1 << ii;
          int v161 = *v160++;
          ii += v161;
        }
        while (v161);
        uint64_t v80 = HIWORD(v157);
        if (!v80) {
          break;
        }
        iuint64_t i = HIWORD(v157);
        v157 >>= 16;
      }
      if (!*v76) {
        break;
      }
      v78 += (unsigned __int16)*v76++;
      uint64_t v162 = (unsigned __int16 *)(v49 + 4 * (unsigned __int16)v78);
      uint64_t v80 = *v162;
      unsigned int v157 = v162[1] << 16;
    }
LABEL_90:
    long long v83 = (unsigned __int16 *)(v50 + (((unint64_t)v48[448] >> 3) & 0x1FFFFFFE));
    int v85 = *v83;
    uint64_t v84 = v83 + 1;
    int v86 = v85 + 74 * (v48[448] & 0xF);
    while (1)
    {
      uint64_t v87 = 4 * (unsigned __int16)v86;
      unint64_t v88 = *(unsigned __int16 *)(v49 + v87);
      if (*(_WORD *)(v49 + v87) && v50 != 0) {
        break;
      }
      int v90 = (unsigned __int16)*v84++;
      v86 += v90;
      if (!v90) {
        goto LABEL_97;
      }
    }
    LODWORD(v163) = *(unsigned __int16 *)(v49 + 4 * (unsigned __int16)v86 + 2) << 16;
    uint64_t v164 = __dst;
    while (1)
    {
      int v165 = v88;
      while (1)
      {
        uint64_t v166 = (unsigned __int16 *)(v50 + 2 * v48[6 * v88 + 2]);
        do
        {
          v164[(unsigned __int16)v165 >> 6] |= 1 << v165;
          int v167 = *v166++;
          v165 += v167;
        }
        while (v167);
        uint64_t v163 = (unsigned __int16 *)(v163 >> 16);
        if (!v163) {
          break;
        }
        int v165 = (int)v163;
        unint64_t v88 = (unint64_t)v163;
      }
      if (!*v84) {
        break;
      }
      v86 += (unsigned __int16)*v84++;
      uint64_t v163 = (unsigned __int16 *)(v49 + 4 * (unsigned __int16)v86);
      unint64_t v88 = *v163;
      LODWORD(v163) = v163[1] << 16;
    }
  }
LABEL_97:
  BOOL v242 = v26;
  if (v50)
  {
    unsigned __int16 v91 = v16 + 391;
    uint64_t v92 = (unsigned __int16 *)(v50 + 2 * v48[6 * v16 + 2348]);
    uint64_t v93 = (char *)__dst;
    while (1)
    {
      unint64_t v94 = v91;
      int v95 = v91 >> 6;
      unsigned int v96 = (uint64_t *)&v93[8 * (v91 >> 6)];
      uint64_t v97 = *v96;
      if (((unint64_t)*v96 >> v91)) {
        goto LABEL_114;
      }
      uint64_t v98 = 0;
      char v99 = v91 & 0x3F;
      uint64_t v100 = *(uint64_t ***)(v10 + 240);
      unint64_t v101 = v94 >> 3;
      do
      {
        if (v94)
        {
          uint64_t v102 = **v100;
          if (v101 < *(unsigned __int16 *)(v102 + 22)
            && ((1 << (v94 & 7)) & *(unsigned __int8 *)(*(void *)(v102 + 8) + v101)) != 0
            && (!v98
             || *v100 != v98
             && ((*(_DWORD *)(v98[1] + ((*(unsigned __int16 *)(v102 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v102 + 24)) & 1) != 0))
          {
            uint64_t v98 = *v100;
          }
        }
        ++v100;
      }
      while (v100 != *(uint64_t ***)(v10 + 248));
      unsigned int v103 = *(unsigned __int16 *)(*(void *)*v98 + 2 * *(unsigned __int16 *)(*v98 + 20) - 2);
      unsigned int v104 = v103 + 1;
      if (v103 + 1 == v94) {
        goto LABEL_114;
      }
      if (v95 == v104 >> 6)
      {
        uint64_t v105 = (1 << v104) + (-1 << v99);
      }
      else
      {
        *unsigned int v96 = (-1 << v99) | v97;
        unsigned int v107 = (v94 + 63) & 0x1FFC0;
        if (v107 + 64 <= v104)
        {
          memset(&v93[((v94 + 63) >> 3) & 0x3FF8], 255, (((v103 - v107 - 63) >> 3) & 0x1FFFFFF8) + 8);
          unsigned int v107 = ((v103 - 63 - ((v94 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v94 + 63) & 0x1FFC0) + 64;
        }
        if (v107 > v103) {
          goto LABEL_114;
        }
        uint64_t v105 = ~(-1 << v104);
        unsigned int v96 = (uint64_t *)&v93[8 * (v107 >> 6)];
        uint64_t v97 = *v96;
      }
      *unsigned int v96 = v97 | v105;
LABEL_114:
      int v106 = *v92++;
      unsigned __int16 v91 = v106 + v94;
      if (!v106)
      {
        unsigned __int16 v120 = v16 + 263;
        uint64_t v121 = (unsigned __int16 *)(v50 + 2 * v48[6 * v16 + 1580]);
        while (1)
        {
          unint64_t v122 = v120;
          int v123 = v120 >> 6;
          BOOL v124 = (uint64_t *)&v93[8 * (v120 >> 6)];
          uint64_t v125 = *v124;
          if (((unint64_t)*v124 >> v120)) {
            goto LABEL_147;
          }
          unsigned int v126 = 0;
          char v127 = v120 & 0x3F;
          unint64_t v128 = *(uint64_t ***)(v10 + 240);
          unint64_t v129 = v122 >> 3;
          do
          {
            if (v122)
            {
              uint64_t v130 = **v128;
              if (v129 < *(unsigned __int16 *)(v130 + 22)
                && ((1 << (v122 & 7)) & *(unsigned __int8 *)(*(void *)(v130 + 8) + v129)) != 0
                && (!v126
                 || *v128 != v126
                 && ((*(_DWORD *)(v126[1] + ((*(unsigned __int16 *)(v130 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v130 + 24)) & 1) != 0))
              {
                unsigned int v126 = *v128;
              }
            }
            ++v128;
          }
          while (v128 != *(uint64_t ***)(v10 + 248));
          unsigned int v131 = *(unsigned __int16 *)(*(void *)*v126 + 2 * *(unsigned __int16 *)(*v126 + 20) - 2);
          unsigned int v132 = v131 + 1;
          if (v131 + 1 == v122) {
            goto LABEL_147;
          }
          if (v123 == v132 >> 6)
          {
            uint64_t v133 = (1 << v132) + (-1 << v127);
          }
          else
          {
            uint64_t *v124 = (-1 << v127) | v125;
            unsigned int v135 = (v122 + 63) & 0x1FFC0;
            if (v135 + 64 <= v132)
            {
              memset(&v93[((v122 + 63) >> 3) & 0x3FF8], 255, (((v131 - v135 - 63) >> 3) & 0x1FFFFFF8) + 8);
              unsigned int v135 = ((v131 - 63 - ((v122 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v122 + 63) & 0x1FFC0) + 64;
            }
            if (v135 > v131) {
              goto LABEL_147;
            }
            uint64_t v133 = ~(-1 << v132);
            BOOL v124 = (uint64_t *)&v93[8 * (v135 >> 6)];
            uint64_t v125 = *v124;
          }
          uint64_t *v124 = v125 | v133;
LABEL_147:
          int v134 = *v121++;
          unsigned __int16 v120 = v134 + v122;
          if (!v134) {
            goto LABEL_153;
          }
        }
      }
    }
  }
LABEL_153:
  unsigned int v136 = sub_1CBD821A0(v241);
  if (v136 > 0xF) {
    goto LABEL_200;
  }
  unsigned int v137 = v136;
  unint64_t v138 = 0;
  unint64_t v139 = v136 + 71;
  unint64_t v141 = *(uint64_t ***)(v10 + 240);
  uint64_t v140 = *(uint64_t ***)(v10 + 248);
  unint64_t v142 = v139 >> 3;
  unint64_t v143 = v141;
  do
  {
    uint64_t v144 = **v143;
    if (v142 < *(unsigned __int16 *)(v144 + 22)
      && ((1 << ((v136 + 71) & 7)) & *(unsigned __int8 *)(*(void *)(v144 + 8) + v142)) != 0
      && (!v138
       || *v143 != v138
       && ((*(_DWORD *)(v138[1] + ((*(unsigned __int16 *)(v144 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v144 + 24)) & 1) != 0))
    {
      unint64_t v138 = *v143;
    }
    ++v143;
  }
  while (v143 != v140);
  unsigned int v145 = *(unsigned __int16 *)(*(void *)*v138 + 2 * *(unsigned __int16 *)(*v138 + 20) - 2);
  unsigned int v146 = v145 + 1;
  if (v139 != v145 + 1)
  {
    if ((v146 & 0x1FFC0) == 0x40)
    {
      uint64_t v147 = (1 << v146) + (-1 << (v136 + 71));
      BOOL v148 = (char *)__dst + 8;
    }
    else
    {
      unint64_t v233 = (char *)__dst;
      *((void *)__dst + 1) |= -1 << (v136 + 71);
      if (v145 >= 0xBF)
      {
        if (v145 <= 0xFE) {
          int v237 = 254;
        }
        else {
          int v237 = v145;
        }
        int v238 = v237 - 191;
        memset(v233 + 16, 255, (((v237 - 191) >> 3) & 0x1FFFFFF8) + 8);
        unsigned int v234 = (v238 & 0xFFFFFFC0) + 192;
      }
      else
      {
        unsigned int v234 = 128;
      }
      if (v234 > v145) {
        goto LABEL_167;
      }
      uint64_t v147 = ~(-1 << v146);
      BOOL v148 = &v233[8 * (v234 >> 6)];
    }
    *(void *)v148 |= v147;
  }
LABEL_167:
  if (v137 <= 7)
  {
    uint64_t v149 = 0;
    do
    {
      uint64_t v150 = **v141;
      if (*(unsigned __int16 *)(v150 + 22) >= 0xAu
        && *(char *)(*(void *)(v150 + 8) + 9) < 0
        && (!v149
         || *v141 != v149
         && ((*(_DWORD *)(v149[1] + ((*(unsigned __int16 *)(v150 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v150 + 24)) & 1) != 0))
      {
        uint64_t v149 = *v141;
      }
      ++v141;
    }
    while (v141 != v140);
    unsigned int v168 = *(unsigned __int16 *)(*(void *)*v149 + 2 * *(unsigned __int16 *)(*v149 + 20) - 2);
    unsigned int v169 = v168 + 1;
    if (v168 != 78)
    {
      if ((v169 & 0x1FFC0) == 0x40)
      {
        uint64_t v170 = (1 << v169) - 0x8000;
        uint64_t v171 = (char *)__dst + 8;
LABEL_199:
        *(void *)v171 |= v170;
        goto LABEL_200;
      }
      unint64_t v235 = (char *)__dst;
      *((void *)__dst + 1) |= 0xFFFFFFFFFFFF8000;
      if (v168 >= 0xBF)
      {
        if (v168 <= 0xFE) {
          int v239 = 254;
        }
        else {
          int v239 = v168;
        }
        int v240 = v239 - 191;
        memset(v235 + 16, 255, (((v239 - 191) >> 3) & 0x1FFFFFF8) + 8);
        unsigned int v236 = (v240 & 0xFFFFFFC0) + 192;
      }
      else
      {
        unsigned int v236 = 128;
      }
      if (v236 <= v168)
      {
        uint64_t v170 = ~(-1 << v169);
        uint64_t v171 = &v235[8 * (v236 >> 6)];
        goto LABEL_199;
      }
    }
  }
LABEL_200:
  if (v242)
  {
    uint64_t v172 = *(void *)(v244 + 8);
    uint64_t v174 = *(void *)(v244 + 48);
    uint64_t v173 = *(void *)(v244 + 56);
    uint64_t v175 = (unsigned __int16 *)(v173 + (((unint64_t)*(unsigned int *)(v172 + 2536) >> 3) & 0x1FFFFFFE));
    int v177 = *v175;
    uint64_t v176 = v175 + 1;
    int v178 = v177 + 105 * (*(_DWORD *)(v172 + 2536) & 0xF);
    uint64_t v179 = v243;
    while (1)
    {
      uint64_t v180 = 4 * (unsigned __int16)v178;
      unint64_t v181 = *(unsigned __int16 *)(v174 + v180);
      if (*(_WORD *)(v174 + v180) && v173 != 0) {
        break;
      }
      int v183 = (unsigned __int16)*v176++;
      v178 += v183;
      if (!v183)
      {
        uint64_t v186 = __dst;
        goto LABEL_210;
      }
    }
    LODWORD(v185) = *(unsigned __int16 *)(v174 + 4 * (unsigned __int16)v178 + 2) << 16;
    uint64_t v186 = __dst;
    while (1)
    {
      int v187 = v181;
      while (1)
      {
        uint64_t v188 = (unsigned __int16 *)(v173 + 2 * *(unsigned int *)(v172 + 24 * v181 + 8));
        do
        {
          v186[(unsigned __int16)v187 >> 6] |= 1 << v187;
          int v189 = *v188++;
          v187 += v189;
        }
        while (v189);
        uint64_t v185 = (unsigned __int16 *)(v185 >> 16);
        if (!v185) {
          break;
        }
        int v187 = (int)v185;
        unint64_t v181 = (unint64_t)v185;
      }
      if (!*v176) {
        break;
      }
      v178 += (unsigned __int16)*v176++;
      uint64_t v185 = (unsigned __int16 *)(v174 + 4 * (unsigned __int16)v178);
      unint64_t v181 = *v185;
      LODWORD(v185) = v185[1] << 16;
    }
  }
  else
  {
    uint64_t v186 = __dst;
    uint64_t v179 = v243;
  }
LABEL_210:
  *v186 |= 0x10uLL;
  *(void *)uint64_t v179 = v179 + 16;
  *(void *)(v179 + 8) = 0x600000000;
  int v184 = v252;
  if (v252 && &__dst != (void **)v179)
  {
    if (v252 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy((void *)(v179 + 16), v186, 8 * v252);
    *(_DWORD *)(v179 + 8) = v184;
  }
  int v190 = v254;
  *(_DWORD *)(v179 + 64) = v254;
  int v191 = *(_DWORD *)(v244 + 16);
  unsigned int v245 = v247;
  HIDWORD(v246) = 6;
  if ((v191 + 63) >= 0x1C0)
  {
    LODWORD(v246) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if ((v191 + 63) >= 0x40) {
    bzero(v247, 8 * ((v191 + 63) >> 6));
  }
  LODWORD(v246) = (v191 + 63) >> 6;
  int v250 = v191;
  if (v190)
  {
    uint64_t v192 = 0;
    uint64_t v193 = (v190 - 1) >> 6;
    int v194 = (char *)__dst;
    uint64_t v195 = v193 << 6;
    unint64_t v196 = (uint64_t *)__dst;
    while (1)
    {
      uint64_t v198 = *v196++;
      uint64_t v197 = v198;
      unint64_t v199 = v195 + v192 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v190;
      unint64_t v200 = v199 & v197;
      if (v200) {
        break;
      }
      v192 -= 64;
      if (v195 + v192 == -64) {
        goto LABEL_236;
      }
    }
    int v201 = __clz(__rbit64(v200));
    if (v201 + 1 != v192)
    {
      LODWORD(v202) = v201 - v192;
      unint64_t v203 = (v201 - v192);
      uint64_t v204 = *(void **)v179;
      do
      {
        if (((*(void *)&v247[(v203 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v203) & 1) == 0)
        {
          uint64_t v217 = *(void *)(v244 + 56);
          uint64_t v218 = *(void *)(v244 + 8);
          uint64_t v219 = (unsigned __int16 *)(v217 + 2 * *(unsigned int *)(v218 + 24 * v203 + 8));
          if (*v219)
          {
            int v220 = *v219 + v203;
            do
            {
              if (((1 << v220) & v204[(unsigned __int16)v220 >> 6]) == 0)
              {
                unint64_t v222 = ((unint64_t)*(unsigned int *)(v218 + 24 * (unsigned __int16)v220 + 16) >> 3) & 0x1FFFFFFE;
                int v223 = *(unsigned __int16 *)(v217 + v222)
                     + (*(_DWORD *)(v218 + 24 * (unsigned __int16)v220 + 16) & 0xF) * v220;
                uint64_t v224 = *(void *)(v244 + 48);
                uint64_t v225 = (_WORD *)(v217 + 2 + v222);
                while (1)
                {
                  uint64_t v226 = (unsigned __int16)v223;
                  int v227 = *(unsigned __int16 *)(v224 + 4 * (unsigned __int16)v223);
                  if (*(_WORD *)(v224 + 4 * (unsigned __int16)v223)) {
                    break;
                  }
                  int v228 = (unsigned __int16)*v225++;
                  v223 += v228;
                  if (!v228) {
                    goto LABEL_261;
                  }
                }
                while (1)
                {
                  unsigned int v229 = *(unsigned __int16 *)(v224 + 4 * v226 + 2) << 16;
                  for (jj = (unsigned __int16)v227; ; int v227 = jj)
                  {
                    unint64_t v231 = (unsigned __int16 *)(v217 + 2 * *(unsigned int *)(v218 + 24 * jj + 8));
                    do
                    {
                      v204[(unsigned __int16)v227 >> 6] |= 1 << v227;
                      int v232 = *v231++;
                      v227 += v232;
                    }
                    while (v232);
                    junsigned int j = HIWORD(v229);
                    if (!jj) {
                      break;
                    }
                    v229 >>= 16;
                  }
                  if (!*v225) {
                    break;
                  }
                  v223 += (unsigned __int16)*v225++;
                  uint64_t v226 = (unsigned __int16)v223;
                  int v227 = *(unsigned __int16 *)(v224 + 4 * (unsigned __int16)v223);
                }
              }
LABEL_261:
              *(void *)&v247[8 * ((unsigned __int16)v220 >> 6)] |= 1 << v220;
              int v221 = v219[1];
              ++v219;
              v220 += v221;
            }
            while (v221);
          }
        }
        unsigned int v205 = v202 + 1;
        if (v202 + 1 == v190) {
          break;
        }
        unsigned int v206 = v205 >> 6;
        if (v205 >> 6 > v193) {
          break;
        }
        uint64_t v207 = 0;
        int v208 = v205 & 0x3F;
        BOOL v8 = v208 == 0;
        unint64_t v209 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v208;
        uint64_t v210 = v8 ? -1 : ~v209;
        unint64_t v211 = (unint64_t)v206 << 6;
        uint64_t v212 = v193 - v206;
        uint64_t v213 = &v194[8 * v206];
        while (1)
        {
          uint64_t v214 = v207 ? -1 : v210;
          unint64_t v215 = v212 == v207 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v190 : -1;
          unint64_t v216 = v214 & v215 & *(void *)&v213[8 * v207];
          if (v216) {
            break;
          }
          v211 += 64;
          if (v212 + 1 == ++v207) {
            goto LABEL_236;
          }
        }
        unint64_t v202 = __clz(__rbit64(v216)) + v211;
        unint64_t v203 = v202;
      }
      while (v202 != -1);
    }
  }
LABEL_236:
  if (__dst != v253) {
    free(__dst);
  }
}

BOOL sub_1CBBFF9C4(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 56) + 8) != *(void *)(*(void *)(a2 + 56) + 16);
}

BOOL sub_1CBBFF9D8(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a2 + 56) + 8) != *(void *)(*(void *)(a2 + 56) + 16);
}

void sub_1CBBFF9EC(void *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v306 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*(void *)(a2 + 24) + 32);
  BOOL v8 = *(unsigned char **)(v7 + 16);
  uint64_t v9 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 112))(v8);
  uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v8 + 104))(v8);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v12 = a4;
  uint64_t v13 = *(unsigned int *)(*(void *)(a2 + 32) + 32 * a4 + 16);
  int v301 = 0;
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v9 + 232))(v9, v7, v13, &v301);
  int v15 = v14;
  unsigned int v16 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v17 = *v16;
  unsigned __int16 v18 = v17 - 1;
  uint64_t v300 = (llvm::MachineInstr *)a2;
  if ((unsigned __int16)(v17 - 1) <= 1u && (*(unsigned char *)(*(void *)(a2 + 32) + 48) & 0x10) != 0)
  {
    LODWORD(v21) = 1;
  }
  else
  {
    __int16 v19 = *(_WORD *)(a2 + 44);
    unint64_t v20 = *((void *)v16 + 1);
    if ((v19 & 0xC) != 0 && (v19 & 4) == 0)
    {
      uint64_t v237 = v11;
      uint64_t v238 = v10;
      if ((v20 & 0x100000) != 0)
      {
        LODWORD(v21) = 1;
      }
      else
      {
        uint64_t v239 = a2;
        while (1)
        {
          unsigned int v240 = *(unsigned __int16 *)(v239 + 44);
          LODWORD(v21) = (v240 >> 3) & 1;
          if ((v240 & 8) == 0) {
            break;
          }
          uint64_t v239 = *(void *)(v239 + 8);
          uint64_t v10 = v238;
          uint64_t v11 = v237;
          if ((*(unsigned char *)(*(void *)(v239 + 16) + 10) & 0x10) != 0) {
            goto LABEL_5;
          }
        }
      }
      uint64_t v10 = v238;
      uint64_t v11 = v237;
    }
    else
    {
      uint64_t v21 = (v20 >> 20) & 1;
    }
  }
LABEL_5:
  __int16 v22 = v17 - 317;
  if (v17 - 317) < 0x28 && ((0xFFFF00FFFFuLL >> v22))
  {
    unsigned int v47 = dword_1CDC7F31C[v22];
    int v24 = *(unsigned __int8 **)(a2 + 32);
    if (!v21)
    {
LABEL_88:
      uint64_t v50 = 0;
      uint64_t v51 = 2;
LABEL_89:
      unint64_t v88 = *(unsigned int *)&v24[32 * v50 + 4];
      int v89 = *(_DWORD *)&v24[32 * a4 + 48] + v15;
      uint64_t v90 = *(void *)&v24[32 * v51 + 16];
      int v299 = *(_DWORD *)&v24[32 * a4 + 80];
      if (v88 - 1) <= 0x56 && ((byte_1CDEF3152[v88 >> 3] >> (v88 & 7)))
      {
        uint64_t v91 = *(void *)(a2 + 24);
        uint64_t v92 = *(llvm::MachineFunction **)(v91 + 32);
        if (v18 <= 1u && (v24[48] & 0x10) != 0)
        {
LABEL_342:
          if (v89 >= 0) {
            int v249 = *(_DWORD *)&v24[32 * a4 + 48] + v15;
          }
          else {
            int v249 = v89 + 1;
          }
          unsigned int v96 = v249 >> 1;
          goto LABEL_346;
        }
        __int16 v93 = *(_WORD *)(a2 + 44);
        uint64_t v94 = *((void *)v16 + 1);
        if ((v93 & 0xC) != 0 && (v93 & 4) == 0)
        {
          if ((v94 & 0x100000) != 0) {
            goto LABEL_342;
          }
          uint64_t v276 = a2;
          while ((*(_WORD *)(v276 + 44) & 8) != 0)
          {
            uint64_t v276 = *(void *)(v276 + 8);
            if ((*(unsigned char *)(*(void *)(v276 + 16) + 10) & 0x10) != 0) {
              goto LABEL_342;
            }
          }
          if (v89 >= 0) {
            int v283 = *(_DWORD *)&v24[32 * a4 + 48] + v15;
          }
          else {
            int v283 = v89 + 1;
          }
          unsigned int v96 = v283 >> 1;
        }
        else
        {
          if (v89 >= 0) {
            int v95 = *(_DWORD *)&v24[32 * a4 + 48] + v15;
          }
          else {
            int v95 = v89 + 1;
          }
          unsigned int v96 = v95 >> 1;
          if ((v94 & 0x100000) != 0)
          {
LABEL_346:
            long long v303 = xmmword_1CDC6D600;
            uint64_t v250 = *(void *)(v10 + 8) + 48 * sub_1CBE0418C(148, 4, &v303);
            size_t v302 = 0;
            uint64_t v251 = llvm::MachineFunction::CreateMachineInstr(v92, v250, &v302, 0);
            if (v302)
            {
              int v280 = *v302;
              if ((v280 - 4) > 0x1E)
              {
                if ((v280 - 3) >= 0xFFFFFFFE) {
                  unsigned int v287 = v302;
                }
                else {
                  unsigned int v287 = 0;
                }
                if ((v280 - 3) < 0xFFFFFFFE)
                {
                  if (v280 == 3) {
                    *((void *)v302 + 1) = 0;
                  }
                  goto LABEL_347;
                }
                unint64_t v282 = (unint64_t)(v287 + 8);
              }
              else
              {
                if ((v302[1] & 0x7F) != 2 && !*((_DWORD *)v302 + 3)) {
                  goto LABEL_347;
                }
                uint64_t v281 = *((void *)v302 + 2);
                if ((v281 & 4) == 0) {
                  goto LABEL_347;
                }
                unint64_t v282 = v281 & 0xFFFFFFFFFFFFFFF8;
                if (!v282) {
                  goto LABEL_347;
                }
              }
              *(void *)&long long v303 = &v302;
              sub_1CC5FA668(v282 + 16, &v303);
            }
LABEL_347:
            uint64_t v252 = *(void *)(v91 + 40);
            *((void *)v251 + 3) = v252;
            uint64_t v253 = *(void *)(v252 + 32);
            uint64_t v254 = *((unsigned int *)v251 + 10);
            if (v254)
            {
              uint64_t v257 = *((void *)v251 + 4);
              uint64_t v258 = *(void *)(v253 + 40);
              uint64_t v259 = 32 * v254;
              do
              {
                if (!*(unsigned char *)v257)
                {
                  uint64_t v260 = *(unsigned int *)(v257 + 4);
                  if ((int)v260 >= 0) {
                    uint64_t v261 = (uint64_t *)(*(void *)(v258 + 272) + 8 * v260);
                  }
                  else {
                    uint64_t v261 = (uint64_t *)(*(void *)(v258 + 24) + 16 * (v260 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v262 = *v261;
                  if (*v261)
                  {
                    uint64_t v263 = *(void *)(v262 + 16);
                    *(void *)(v262 + 16) = v257;
                    *(void *)(v257 + 16) = v263;
                    if (*(unsigned char *)(v257 + 3))
                    {
                      *(void *)(v257 + 24) = v262;
                    }
                    else
                    {
                      *(void *)(v257 + 24) = 0;
                      uint64_t v261 = (uint64_t *)(v263 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v257 + 16) = v257;
                    *(void *)(v257 + 24) = 0;
                  }
                  *uint64_t v261 = v257;
                }
                v257 += 32;
                v259 -= 32;
              }
              while (v259);
            }
            uint64_t v255 = *(void *)(v253 + 728);
            if (v255) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v255 + 24))(v255, v251);
            }
            unsigned int v107 = (llvm::MachineInstr *)a2;
            unint64_t v256 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v251 = v256 | *(void *)v251 & 7;
            *((void *)v251 + 1) = a2;
            *(void *)(v256 + 8) = v251;
            *(void *)a2 = *(void *)a2 & 7 | (unint64_t)v251;
            *((void *)&v303 + 1) = 0;
            LODWORD(v304) = 86;
            LODWORD(v305) = 0;
            LODWORD(v303) = 7;
            DWORD1(v303) = v96;
            llvm::MachineInstr::addOperand(v251, v92, (const llvm::MachineOperand *)&v303);
            LODWORD(v303) = 1;
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            llvm::MachineInstr::addOperand(v251, v92, (const llvm::MachineOperand *)&v303);
            LODWORD(v303) = 1;
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            llvm::MachineInstr::addOperand(v251, v92, (const llvm::MachineOperand *)&v303);
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            LODWORD(v303) = 0;
            DWORD1(v303) = v88;
            uint64_t v305 = 0;
            llvm::MachineInstr::addOperand(v251, v92, (const llvm::MachineOperand *)&v303);
            LODWORD(v303) = 1;
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 1;
            llvm::MachineInstr::addOperand(v251, v92, (const llvm::MachineOperand *)&v303);
            LODWORD(v303) = 1;
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            llvm::MachineInstr::addOperand(v251, v92, (const llvm::MachineOperand *)&v303);
            *(void *)&long long v303 = v92;
            *((void *)&v303 + 1) = v251;
            sub_1CBC04320(v92, (llvm::MachineInstr *)a2, (llvm::MachineFunction **)&v303, 0x10u, 0);
LABEL_351:
            int v46 = v107;
            goto LABEL_352;
          }
        }
        uint64_t v97 = *((void *)v92 + 5);
        unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v97, "", 0);
        *(void *)(*(void *)(v97 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66AF970;
        uint64_t v99 = *(void *)(v97 + 8);
        if (v99) {
          (*(void (**)(uint64_t, void))(*(void *)v99 + 24))(v99, IncompleteVirtualRegister);
        }
        sub_1CBC043F8(v10, a2, v88, v299, IncompleteVirtualRegister, 0x10u, v96, 0, 0);
        uint64_t v100 = *(void *)(v10 + 8) + 216336;
        unint64_t v101 = *(llvm::MachineFunction **)(v91 + 32);
        size_t v302 = 0;
        uint64_t v102 = llvm::MachineFunction::CreateMachineInstr(v101, v100, &v302, 0);
        if (v302)
        {
          int v277 = *v302;
          if ((v277 - 4) > 0x1E)
          {
            if ((v277 - 3) >= 0xFFFFFFFE) {
              int v286 = v302;
            }
            else {
              int v286 = 0;
            }
            if ((v277 - 3) < 0xFFFFFFFE)
            {
              if (v277 == 3) {
                *((void *)v302 + 1) = 0;
              }
              goto LABEL_101;
            }
            unint64_t v279 = (unint64_t)(v286 + 8);
          }
          else
          {
            if ((v302[1] & 0x7F) != 2 && !*((_DWORD *)v302 + 3)) {
              goto LABEL_101;
            }
            uint64_t v278 = *((void *)v302 + 2);
            if ((v278 & 4) == 0) {
              goto LABEL_101;
            }
            unint64_t v279 = v278 & 0xFFFFFFFFFFFFFFF8;
            if (!v279) {
              goto LABEL_101;
            }
          }
          *(void *)&long long v303 = &v302;
          sub_1CC5FA668(v279 + 16, &v303);
        }
LABEL_101:
        uint64_t v103 = *(void *)(v91 + 40);
        *((void *)v102 + 3) = v103;
        uint64_t v104 = *(void *)(v103 + 32);
        uint64_t v105 = *((unsigned int *)v102 + 10);
        if (v105)
        {
          uint64_t v215 = *((void *)v102 + 4);
          uint64_t v216 = *(void *)(v104 + 40);
          uint64_t v217 = 32 * v105;
          do
          {
            if (!*(unsigned char *)v215)
            {
              uint64_t v218 = *(unsigned int *)(v215 + 4);
              if ((int)v218 >= 0) {
                uint64_t v219 = (uint64_t *)(*(void *)(v216 + 272) + 8 * v218);
              }
              else {
                uint64_t v219 = (uint64_t *)(*(void *)(v216 + 24) + 16 * (v218 & 0x7FFFFFFF) + 8);
              }
              uint64_t v220 = *v219;
              if (*v219)
              {
                uint64_t v221 = *(void *)(v220 + 16);
                *(void *)(v220 + 16) = v215;
                *(void *)(v215 + 16) = v221;
                if (*(unsigned char *)(v215 + 3))
                {
                  *(void *)(v215 + 24) = v220;
                }
                else
                {
                  *(void *)(v215 + 24) = 0;
                  uint64_t v219 = (uint64_t *)(v221 + 24);
                }
              }
              else
              {
                *(void *)(v215 + 16) = v215;
                *(void *)(v215 + 24) = 0;
              }
              *uint64_t v219 = v215;
            }
            v215 += 32;
            v217 -= 32;
          }
          while (v217);
        }
        uint64_t v106 = *(void *)(v104 + 728);
        if (v106) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v106 + 24))(v106, v102);
        }
        unsigned int v107 = (llvm::MachineInstr *)a2;
        unint64_t v108 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v102 = v108 | *(void *)v102 & 7;
        *((void *)v102 + 1) = a2;
        *(void *)(v108 + 8) = v102;
        *(void *)a2 = *(void *)a2 & 7 | (unint64_t)v102;
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 0;
        uint64_t v305 = 0;
        LODWORD(v303) = 0x1000000;
        DWORD1(v303) = v88;
        llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)&v303);
        LODWORD(v303) = 1;
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 0;
        llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)&v303);
        LODWORD(v303) = 1;
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 8;
        llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)&v303);
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 0;
        LODWORD(v303) = 0;
        DWORD1(v303) = IncompleteVirtualRegister;
        uint64_t v305 = 0;
        llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)&v303);
        LODWORD(v303) = 1;
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 0;
        llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)&v303);
        LODWORD(v303) = 1;
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 0;
        llvm::MachineInstr::addOperand(v102, v101, (const llvm::MachineOperand *)&v303);
        goto LABEL_351;
      }
      if ((unint64_t)(v90 & 0xF) - 1 > 1)
      {
        BOOL v112 = 0;
        if (!v90) {
          goto LABEL_119;
        }
      }
      else
      {
        if ((v90 & 0xF) == 1) {
          char v109 = 4;
        }
        else {
          char v109 = 5;
        }
        int v110 = ~(-1 << (v47 >> v109));
        BOOL v112 = (v90 & 0x600) == 0 && v90 >> 4 == v110;
        if (!v90)
        {
LABEL_119:
          unsigned int v297 = v47;
          if ((unsigned __int16)(v17 - 1) <= 1u && (v24[48] & 0x10) != 0)
          {
            uint64_t v113 = v11;
            LOBYTE(v11) = 1;
          }
          else
          {
            uint64_t v113 = v11;
            __int16 v114 = *(_WORD *)(a2 + 44);
            unint64_t v115 = *((void *)v16 + 1);
            if ((v114 & 0xC) != 0 && (v114 & 4) == 0)
            {
              if ((v115 & 0x100000) != 0)
              {
                LOBYTE(v11) = 1;
              }
              else
              {
                uint64_t v247 = a2;
                do
                {
                  unsigned int v248 = *(unsigned __int16 *)(v247 + 44);
                  LODWORD(v11) = (v248 >> 3) & 1;
                  if ((v248 & 8) == 0) {
                    break;
                  }
                  uint64_t v247 = *(void *)(v247 + 8);
                }
                while ((*(unsigned char *)(*(void *)(v247 + 16) + 10) & 0x10) == 0);
              }
            }
            else
            {
              uint64_t v11 = (v115 >> 20) & 1;
            }
          }
          if (v47)
          {
            unsigned int v116 = 0;
            unsigned int v117 = *(_DWORD *)(v113 + 48);
            unsigned int v118 = v47;
            do
            {
              if (v118 >= 0x11) {
                unsigned int v119 = 32;
              }
              else {
                unsigned int v119 = 16;
              }
              unsigned int v120 = v116 >> 4;
              if (v118 > 0x10) {
                unsigned int v121 = dword_1CDC7F2A8[v120];
              }
              else {
                unsigned int v121 = v120 + 1;
              }
              uint64_t v122 = a1[1];
              uint64_t v123 = a1[7];
              uint64_t v124 = *(unsigned int *)(v122 + 24 * v88 + 4);
              __int16 v125 = *(_WORD *)(v123 + 2 * v124);
              if (!v125) {
                goto LABEL_137;
              }
              LOWORD(v126) = v125 + v88;
              char v127 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v122 + 24 * v88 + 12));
              unint64_t v128 = (unsigned __int16 *)(v123 + 2 * v124 + 2);
              while (v121 != *v127)
              {
                int v129 = *v128++;
                LOWORD(v126) = v129 + v126;
                ++v127;
                if (!v129) {
                  goto LABEL_137;
                }
              }
              unsigned int v126 = (unsigned __int16)v126;
              if (!(_WORD)v126) {
LABEL_137:
              }
                unsigned int v126 = v88;
              unsigned int v130 = v47 - v118 + 8 * v89;
              if (v118 >= 0x20
                && v126
                && (v126 > 0xE7
                 || ((byte_1CDEF36D2[(unint64_t)v126 >> 3] >> (v126 & 7)) & 1) == 0
                 || (v130 & 0x10) != 0))
              {
                if (*(_WORD *)(v123 + 2 * v124))
                {
                  unsigned int v131 = v120 + 1;
                  unsigned __int16 v132 = v125 + v88;
                  uint64_t v133 = (unsigned __int16 *)(a1[11] + 2 * *(unsigned int *)(v122 + 24 * v88 + 12));
                  int v134 = (unsigned __int16 *)(v123 + 2 * v124 + 2);
                  while (v131 != *v133)
                  {
                    unsigned int v126 = 0;
                    int v135 = *v134++;
                    v132 += v135;
                    ++v133;
                    unsigned int v119 = 16;
                    if (!v135) {
                      goto LABEL_150;
                    }
                  }
                  unsigned int v126 = v132;
                }
                else
                {
                  unsigned int v126 = 0;
                }
                unsigned int v119 = 16;
              }
LABEL_150:
              unsigned int v136 = v89 + (v116 >> 3) + (v119 >> 3);
              BOOL v137 = v136 > v117;
              if (v136 > v117) {
                char v138 = v11;
              }
              else {
                char v138 = 0;
              }
              if ((v138 & 1) == 0)
              {
                unsigned int v139 = v130 >> 4;
                char v140 = v137;
                sub_1CBC043F8(v10, a2, v88, v299, v126, v119, v139, v116, v140);
                unsigned int v47 = v297;
              }
              v116 += v119;
              v118 -= v119;
            }
            while (v118);
          }
          int v46 = (llvm::MachineInstr *)a2;
          goto LABEL_352;
        }
      }
      if (v112) {
        goto LABEL_119;
      }
      unsigned int v236 = "Incompatible scale or format for spill/reload";
LABEL_313:
      llvm::report_fatal_error((llvm *)v236, (const llvm::Twine *)1);
    }
    goto LABEL_39;
  }
  if (*v16 > 0x1A42u)
  {
    if ((v17 - 9163) < 0x18)
    {
LABEL_18:
      uint64_t v27 = *(llvm::MachineBasicBlock **)(a2 + 24);
      int v28 = (llvm::MachineFunction *)*((void *)v27 + 4);
      unsigned int v29 = sub_1CBDA6464(v17, 0x2Bu);
      unsigned int v30 = sub_1CBDA6464(v17, 0x55u);
      uint64_t v31 = *(void *)(a2 + 32);
      uint64_t v32 = v30;
      uint64_t v33 = *(void *)(v31 + 32 * v30 + 16) + v15;
      BOOL v34 = v33 > -32769;
      if (v33 >= 0) {
        BOOL v34 = v33 < 0x8000;
      }
      if (v34)
      {
        uint64_t v35 = *(void *)(v10 + 8) + 48 * v17;
        int v36 = (unsigned __int8 *)*((void *)v300 + 7);
        size_t v302 = v36;
        if (v36) {
          llvm::MetadataTracking::track((uint64_t)&v302, v36, 2);
        }
        int v37 = llvm::MachineFunction::CreateMachineInstr(v28, v35, &v302, 0);
        if (!v302) {
          goto LABEL_24;
        }
        int v241 = *v302;
        if ((v241 - 4) > 0x1E)
        {
          if ((v241 - 3) >= 0xFFFFFFFE) {
            uint64_t v264 = v302;
          }
          else {
            uint64_t v264 = 0;
          }
          if ((v241 - 3) < 0xFFFFFFFE)
          {
            if (v241 == 3) {
              *((void *)v302 + 1) = 0;
            }
            goto LABEL_24;
          }
          unint64_t v243 = (unint64_t)(v264 + 8);
        }
        else
        {
          if ((v302[1] & 0x7F) != 2 && !*((_DWORD *)v302 + 3)) {
            goto LABEL_24;
          }
          uint64_t v242 = *((void *)v302 + 2);
          if ((v242 & 4) == 0) {
            goto LABEL_24;
          }
          unint64_t v243 = v242 & 0xFFFFFFFFFFFFFFF8;
          if (!v243) {
            goto LABEL_24;
          }
        }
        *(void *)&long long v303 = &v302;
        sub_1CC5FA668(v243 + 16, &v303);
LABEL_24:
        uint64_t v38 = *((void *)v27 + 5);
        *((void *)v37 + 3) = v38;
        uint64_t v39 = *(void *)(v38 + 32);
        uint64_t v40 = *((unsigned int *)v37 + 10);
        if (v40)
        {
          uint64_t v183 = *((void *)v37 + 4);
          uint64_t v184 = *(void *)(v39 + 40);
          uint64_t v185 = 32 * v40;
          do
          {
            if (!*(unsigned char *)v183)
            {
              uint64_t v186 = *(unsigned int *)(v183 + 4);
              if ((int)v186 >= 0) {
                int v187 = (uint64_t *)(*(void *)(v184 + 272) + 8 * v186);
              }
              else {
                int v187 = (uint64_t *)(*(void *)(v184 + 24) + 16 * (v186 & 0x7FFFFFFF) + 8);
              }
              uint64_t v188 = *v187;
              if (*v187)
              {
                uint64_t v189 = *(void *)(v188 + 16);
                *(void *)(v188 + 16) = v183;
                *(void *)(v183 + 16) = v189;
                if (*(unsigned char *)(v183 + 3))
                {
                  *(void *)(v183 + 24) = v188;
                }
                else
                {
                  *(void *)(v183 + 24) = 0;
                  int v187 = (uint64_t *)(v189 + 24);
                }
              }
              else
              {
                *(void *)(v183 + 16) = v183;
                *(void *)(v183 + 24) = 0;
              }
              *int v187 = v183;
            }
            v183 += 32;
            v185 -= 32;
          }
          while (v185);
        }
        uint64_t v41 = *(void *)(v39 + 728);
        if (v41) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v41 + 24))(v41, v37);
        }
        unint64_t v42 = *(void *)v300 & 0xFFFFFFFFFFFFFFF8;
        *(void *)int v37 = v42 | *(void *)v37 & 7;
        *((void *)v37 + 1) = v300;
        *(void *)(v42 + 8) = v37;
        *(void *)uint64_t v300 = *(void *)v300 & 7 | (unint64_t)v37;
        if (*((_DWORD *)v300 + 10))
        {
          for (unint64_t i = 0; i < *((unsigned int *)v300 + 10); ++i)
          {
            if (i == v32)
            {
              LODWORD(v303) = 1;
              *((void *)&v303 + 1) = 0;
              uint64_t v304 = v33;
            }
            else
            {
              if (i != v29)
              {
                int v44 = (const llvm::MachineOperand *)(*((void *)v300 + 4) + 32 * i);
                goto LABEL_35;
              }
              LODWORD(v303) = 1;
              *((void *)&v303 + 1) = 0;
              uint64_t v304 = 0;
            }
            int v44 = (const llvm::MachineOperand *)&v303;
LABEL_35:
            llvm::MachineInstr::addOperand(v37, v28, v44);
          }
        }
        uint64_t v45 = v37;
LABEL_37:
        llvm::MachineInstr::copyImplicitOps(v45, v28, v300);
        int v46 = v300;
LABEL_352:
        llvm::MachineInstr::eraseFromParent(v46);
        return;
      }
      unsigned int v296 = v29;
      uint64_t v298 = sub_1CBDA6464(v17, 0x56u);
      uint64_t v68 = *(void *)(v31 + 32 * v298 + 16);
      uint64_t v69 = sub_1CBDA6464(v17, 0x30u);
      int v70 = (unint64_t *)(v31 + 32 * v69);
      if (*(unsigned char *)v70 == 1)
      {
        unint64_t v73 = v70[2];
        uint64_t v72 = v70 + 2;
        unint64_t v71 = v73;
        unint64_t v74 = v15 / v68 + v73;
        if (v15 % v68) {
          BOOL v75 = 0;
        }
        else {
          BOOL v75 = v74 >> 16 == 0;
        }
        if (v75)
        {
          *uint64_t v72 = v74;
          uint64_t v77 = *((void *)v300 + 4);
          goto LABEL_189;
        }
        unint64_t v76 = v15 + v71 * v68;
        if (!(v76 >> 16))
        {
          *uint64_t v72 = v76;
          *(void *)(*((void *)v300 + 4) + 32 * v298 + 16) = 1;
          uint64_t v77 = *((void *)v300 + 4);
LABEL_189:
          BOOL v26 = (unsigned int *)(v77 + 32 * v296);
          uint64_t v25 = 0;
          goto LABEL_190;
        }
        int v170 = sub_1CD421B9C(v10, v27, v300, (unsigned __int16 ***)&off_1E66AF580);
        sub_1CBAECAFC(v10, (uint64_t)v27, (unint64_t *)v300, v76, v170, 0, 0, (unsigned __int8 **)v300 + 7, 0);
        uint64_t v171 = *(void *)(v10 + 8) + 48 * sub_1CBE52EB8(v17, 4, 0);
        uint64_t v172 = (llvm::MachineFunction *)*((void *)v27 + 4);
        uint64_t v173 = (unsigned __int8 *)*((void *)v300 + 7);
        size_t v302 = v173;
        unsigned int v174 = v296;
        if (v173) {
          llvm::MetadataTracking::track((uint64_t)&v302, v173, 2);
        }
        uint64_t v175 = llvm::MachineFunction::CreateMachineInstr(v172, v171, &v302, 0);
        if (!v302) {
          goto LABEL_194;
        }
        int v265 = *v302;
        if ((v265 - 4) > 0x1E)
        {
          if ((v265 - 3) >= 0xFFFFFFFE) {
            uint64_t v285 = v302;
          }
          else {
            uint64_t v285 = 0;
          }
          if ((v265 - 3) < 0xFFFFFFFE)
          {
            unsigned int v174 = v296;
            if (v265 == 3) {
              *((void *)v302 + 1) = 0;
            }
            goto LABEL_194;
          }
          unint64_t v267 = (unint64_t)(v285 + 8);
        }
        else
        {
          unsigned int v174 = v296;
          if ((v302[1] & 0x7F) != 2 && !*((_DWORD *)v302 + 3)) {
            goto LABEL_194;
          }
          uint64_t v266 = *((void *)v302 + 2);
          if ((v266 & 4) == 0) {
            goto LABEL_194;
          }
          unint64_t v267 = v266 & 0xFFFFFFFFFFFFFFF8;
          if (!v267) {
            goto LABEL_194;
          }
        }
        *(void *)&long long v303 = &v302;
        sub_1CC5FA668(v267 + 16, &v303);
        unsigned int v174 = v296;
LABEL_194:
        uint64_t v176 = *((void *)v27 + 5);
        *((void *)v175 + 3) = v176;
        uint64_t v177 = *(void *)(v176 + 32);
        uint64_t v178 = *((unsigned int *)v175 + 10);
        if (v178)
        {
          uint64_t v208 = *((void *)v175 + 4);
          uint64_t v209 = *(void *)(v177 + 40);
          uint64_t v210 = 32 * v178;
          do
          {
            if (!*(unsigned char *)v208)
            {
              uint64_t v211 = *(unsigned int *)(v208 + 4);
              if ((int)v211 >= 0) {
                uint64_t v212 = (uint64_t *)(*(void *)(v209 + 272) + 8 * v211);
              }
              else {
                uint64_t v212 = (uint64_t *)(*(void *)(v209 + 24) + 16 * (v211 & 0x7FFFFFFF) + 8);
              }
              uint64_t v213 = *v212;
              if (*v212)
              {
                uint64_t v214 = *(void *)(v213 + 16);
                *(void *)(v213 + 16) = v208;
                *(void *)(v208 + 16) = v214;
                if (*(unsigned char *)(v208 + 3))
                {
                  *(void *)(v208 + 24) = v213;
                }
                else
                {
                  *(void *)(v208 + 24) = 0;
                  uint64_t v212 = (uint64_t *)(v214 + 24);
                }
              }
              else
              {
                *(void *)(v208 + 16) = v208;
                *(void *)(v208 + 24) = 0;
              }
              *uint64_t v212 = v208;
            }
            v208 += 32;
            v210 -= 32;
          }
          while (v210);
        }
        uint64_t v179 = *(void *)(v177 + 728);
        if (v179) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v179 + 24))(v179, v175);
        }
        unint64_t v180 = *(void *)v300 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v175 = v180 | *(void *)v175 & 7;
        *((void *)v175 + 1) = v300;
        *(void *)(v180 + 8) = v175;
        *(void *)uint64_t v300 = *(void *)v300 & 7 | (unint64_t)v175;
        if (!*((_DWORD *)v300 + 10))
        {
LABEL_209:
          uint64_t v45 = v175;
          goto LABEL_37;
        }
        uint64_t v181 = 0;
        while (1)
        {
          if (v181 == v174) {
            goto LABEL_202;
          }
          if (v181 == v69) {
            break;
          }
          if (v181 != v298)
          {
            int v182 = (const llvm::MachineOperand *)(*((void *)v300 + 4) + 32 * v181);
            goto LABEL_204;
          }
          LODWORD(v303) = 1;
          *((void *)&v303 + 1) = 0;
          uint64_t v304 = 1;
LABEL_203:
          int v182 = (const llvm::MachineOperand *)&v303;
LABEL_204:
          llvm::MachineInstr::addOperand(v175, v172, v182);
          if (++v181 >= (unint64_t)*((unsigned int *)v300 + 10)) {
            goto LABEL_209;
          }
        }
        *((void *)&v303 + 1) = 0;
        LODWORD(v303) = 0;
        DWORD1(v303) = v170;
        uint64_t v304 = 0;
        uint64_t v305 = 0;
        llvm::MachineInstr::addOperand(v175, v172, (const llvm::MachineOperand *)&v303);
LABEL_202:
        LODWORD(v303) = 1;
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 0;
        goto LABEL_203;
      }
      int v81 = sub_1CBDB2780(v17, 4, 0);
      unsigned int v82 = sub_1CD421B9C(v10, v27, v300, (unsigned __int16 ***)&off_1E66AF580);
      if (v15 >= 0x100)
      {
        sub_1CBAECAFC(v10, (uint64_t)v27, (unint64_t *)v300, v15, v82, 0, 0, (unsigned __int8 **)v300 + 7, 0);
        int v83 = v81;
      }
      else
      {
        int v83 = 1;
      }
      LODWORD(v303) = 0;
      *(void *)((char *)&v303 + 4) = __PAIR64__(v81, v83);
      uint64_t v159 = *(void *)(v10 + 8) + 48 * sub_1CBE0418C(67, 3, &v303);
      uint64_t v160 = (llvm::MachineFunction *)*((void *)v27 + 4);
      int v161 = (unsigned __int8 *)*((void *)v300 + 7);
      size_t v302 = v161;
      if (v161) {
        llvm::MetadataTracking::track((uint64_t)&v302, v161, 2);
      }
      uint64_t v162 = llvm::MachineFunction::CreateMachineInstr(v160, v159, &v302, 0);
      if (v302)
      {
        int v244 = *v302;
        if ((v244 - 4) > 0x1E)
        {
          if ((v244 - 3) >= 0xFFFFFFFE) {
            unsigned int v284 = v302;
          }
          else {
            unsigned int v284 = 0;
          }
          if ((v244 - 3) < 0xFFFFFFFE)
          {
            if (v244 == 3) {
              *((void *)v302 + 1) = 0;
            }
            goto LABEL_182;
          }
          unint64_t v246 = (unint64_t)(v284 + 8);
        }
        else
        {
          if ((v302[1] & 0x7F) != 2 && !*((_DWORD *)v302 + 3)) {
            goto LABEL_182;
          }
          uint64_t v245 = *((void *)v302 + 2);
          if ((v245 & 4) == 0) {
            goto LABEL_182;
          }
          unint64_t v246 = v245 & 0xFFFFFFFFFFFFFFF8;
          if (!v246) {
            goto LABEL_182;
          }
        }
        *(void *)&long long v303 = &v302;
        sub_1CC5FA668(v246 + 16, &v303);
      }
LABEL_182:
      uint64_t v163 = *((void *)v27 + 5);
      *((void *)v162 + 3) = v163;
      uint64_t v164 = *(void *)(v163 + 32);
      uint64_t v165 = *((unsigned int *)v162 + 10);
      if (v165)
      {
        uint64_t v190 = *((void *)v162 + 4);
        uint64_t v191 = *(void *)(v164 + 40);
        uint64_t v192 = 32 * v165;
        do
        {
          if (!*(unsigned char *)v190)
          {
            uint64_t v193 = *(unsigned int *)(v190 + 4);
            if ((int)v193 >= 0) {
              int v194 = (uint64_t *)(*(void *)(v191 + 272) + 8 * v193);
            }
            else {
              int v194 = (uint64_t *)(*(void *)(v191 + 24) + 16 * (v193 & 0x7FFFFFFF) + 8);
            }
            uint64_t v195 = *v194;
            if (*v194)
            {
              uint64_t v196 = *(void *)(v195 + 16);
              *(void *)(v195 + 16) = v190;
              *(void *)(v190 + 16) = v196;
              if (*(unsigned char *)(v190 + 3))
              {
                *(void *)(v190 + 24) = v195;
              }
              else
              {
                *(void *)(v190 + 24) = 0;
                int v194 = (uint64_t *)(v196 + 24);
              }
            }
            else
            {
              *(void *)(v190 + 16) = v190;
              *(void *)(v190 + 24) = 0;
            }
            *int v194 = v190;
          }
          v190 += 32;
          v192 -= 32;
        }
        while (v192);
      }
      uint64_t v166 = *(void *)(v164 + 728);
      if (v166) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v166 + 24))(v166, v162);
      }
      unint64_t v167 = *(void *)v300 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v162 = v167 | *(void *)v162 & 7;
      *((void *)v162 + 1) = v300;
      *(void *)(v167 + 8) = v162;
      *(void *)uint64_t v300 = *(void *)v300 & 7 | (unint64_t)v162;
      *((void *)&v303 + 1) = 0;
      uint64_t v304 = 0;
      uint64_t v305 = 0;
      LODWORD(v303) = 0x1000000;
      DWORD1(v303) = v82;
      llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)&v303);
      LODWORD(v303) = 1;
      *((void *)&v303 + 1) = 0;
      uint64_t v304 = 0;
      llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)&v303);
      if (v15 > 0xFF)
      {
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 0;
        LODWORD(v303) = 0;
        DWORD1(v303) = v82;
        uint64_t v305 = 0;
        llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)&v303);
        LODWORD(v303) = 1;
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = 0;
      }
      else
      {
        LODWORD(v303) = 1;
        *((void *)&v303 + 1) = 0;
        uint64_t v304 = v15;
      }
      llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)&v303);
      llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)v70);
      uint64_t v168 = (v69 + 1);
      unint64_t v169 = *(void *)(*((void *)v300 + 4) + 32 * v168 + 16) & 0xFFFFFFFFFFFFF8FFLL;
      LODWORD(v303) = 1;
      *((void *)&v303 + 1) = 0;
      uint64_t v304 = v169 | (7936 - (__clz(v68) << 8));
      llvm::MachineInstr::addOperand(v162, v160, (const llvm::MachineOperand *)&v303);
      llvm::MachineOperand::setReg((uint64_t)v70, v82);
      *(void *)(*((void *)v300 + 4) + 32 * v168 + 16) = 0;
      *(void *)(*((void *)v300 + 4) + 32 * v298 + 16) = 1;
      uint64_t v77 = *((void *)v300 + 4);
      goto LABEL_189;
    }
    if (((v17 - 9014) > 4 || v17 == 9016) && (v17 - 6723) >= 2) {
      goto LABEL_224;
    }
    goto LABEL_165;
  }
  if (*v16 <= 0x15F8u)
  {
    if (*v16 <= 0x1136u)
    {
      if ((v17 - 4348) >= 6)
      {
        if (v17 == 4360)
        {
          uint64_t v78 = *(void *)(a2 + 24);
          uint64_t v79 = v14;
          if (v14 >= 0x10000 && !v8[364])
          {
            uint64_t v80 = a2;
            if (!a2 || (*(unsigned char *)a2 & 4) == 0)
            {
              while ((*(_WORD *)(v80 + 44) & 8) != 0)
                uint64_t v80 = *(void *)(v80 + 8);
            }
            uint64_t v144 = *(unint64_t **)(v80 + 8);
            int v145 = sub_1CD421B9C(v10, *(llvm::MachineBasicBlock **)(a2 + 24), v144, (unsigned __int16 ***)&off_1E66AF580);
            uint64_t v146 = *(void *)(a2 + 32);
            int v147 = *(_DWORD *)(v146 + 4);
            llvm::MachineOperand::ChangeToImmediate((unsigned int *)(v146 + 32 * v12), 0, 0);
            BOOL v148 = sub_1CBAECAFC(v10, v78, v144, v79, v145, 0, 0, (unsigned __int8 **)(a2 + 56), 0);
            *(void *)&long long v303 = 0;
            DWORD2(v303) = 0;
            uint64_t v149 = *(void *)(v10 + 8) + 48 * sub_1CBE0418C(67, 3, &v303);
            uint64_t v150 = *(llvm::MachineFunction **)(v78 + 32);
            unsigned int v151 = *(unsigned __int8 **)(a2 + 56);
            size_t v302 = v151;
            if (v151) {
              llvm::MetadataTracking::track((uint64_t)&v302, v151, 2);
            }
            uint64_t v152 = llvm::MachineFunction::CreateMachineInstr(v150, v149, &v302, 0);
            if (!v302) {
              goto LABEL_174;
            }
            int v288 = *v302;
            if ((v288 - 4) > 0x1E)
            {
              if ((v288 - 3) >= 0xFFFFFFFE) {
                uint64_t v294 = v302;
              }
              else {
                uint64_t v294 = 0;
              }
              if ((v288 - 3) < 0xFFFFFFFE)
              {
                if (v288 == 3) {
                  *((void *)v302 + 1) = 0;
                }
                goto LABEL_174;
              }
              unint64_t v290 = (unint64_t)(v294 + 8);
            }
            else
            {
              if ((v302[1] & 0x7F) != 2 && !*((_DWORD *)v302 + 3)) {
                goto LABEL_174;
              }
              uint64_t v289 = *((void *)v302 + 2);
              if ((v289 & 4) == 0) {
                goto LABEL_174;
              }
              unint64_t v290 = v289 & 0xFFFFFFFFFFFFFFF8;
              if (!v290) {
                goto LABEL_174;
              }
            }
            *(void *)&long long v303 = &v302;
            sub_1CC5FA668(v290 + 16, &v303);
LABEL_174:
            uint64_t v153 = *(void *)(v78 + 40);
            *((void *)v152 + 3) = v153;
            uint64_t v154 = *(void *)(v153 + 32);
            uint64_t v155 = *((unsigned int *)v152 + 10);
            if (v155)
            {
              uint64_t v222 = *((void *)v152 + 4);
              uint64_t v223 = *(void *)(v154 + 40);
              uint64_t v224 = 32 * v155;
              do
              {
                if (!*(unsigned char *)v222)
                {
                  uint64_t v225 = *(unsigned int *)(v222 + 4);
                  if ((int)v225 >= 0) {
                    uint64_t v226 = (uint64_t *)(*(void *)(v223 + 272) + 8 * v225);
                  }
                  else {
                    uint64_t v226 = (uint64_t *)(*(void *)(v223 + 24) + 16 * (v225 & 0x7FFFFFFF) + 8);
                  }
                  uint64_t v227 = *v226;
                  if (*v226)
                  {
                    uint64_t v228 = *(void *)(v227 + 16);
                    *(void *)(v227 + 16) = v222;
                    *(void *)(v222 + 16) = v228;
                    if (*(unsigned char *)(v222 + 3))
                    {
                      *(void *)(v222 + 24) = v227;
                    }
                    else
                    {
                      *(void *)(v222 + 24) = 0;
                      uint64_t v226 = (uint64_t *)(v228 + 24);
                    }
                  }
                  else
                  {
                    *(void *)(v222 + 16) = v222;
                    *(void *)(v222 + 24) = 0;
                  }
                  *uint64_t v226 = v222;
                }
                v222 += 32;
                v224 -= 32;
              }
              while (v224);
            }
            uint64_t v156 = *(void *)(v154 + 728);
            if (v156) {
              (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v156 + 24))(v156, v152);
            }
            unint64_t v157 = *v144 & 0xFFFFFFFFFFFFFFF8;
            *(void *)uint64_t v152 = v157 | *(void *)v152 & 7;
            *((void *)v152 + 1) = v144;
            *(void *)(v157 + 8) = v152;
            *uint64_t v144 = *v144 & 7 | (unint64_t)v152;
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            uint64_t v305 = 0;
            LODWORD(v303) = 0x1000000;
            DWORD1(v303) = v147;
            llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
            LODWORD(v303) = 1;
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            LODWORD(v303) = 0;
            DWORD1(v303) = v147;
            uint64_t v305 = 0;
            llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
            LODWORD(v303) = 1;
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
            int v158 = *(_DWORD *)(*((void *)v148 + 4) + 4);
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
            LODWORD(v303) = 0;
            DWORD1(v303) = v158;
            uint64_t v305 = 0;
            llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
            LODWORD(v303) = 1;
            *((void *)&v303 + 1) = 0;
            uint64_t v304 = 0;
LABEL_257:
            llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
            return;
          }
          BOOL v26 = (unsigned int *)(*(void *)(a2 + 32) + 32 * v12);
          if (!v8[364])
          {
            uint64_t v25 = v15;
            goto LABEL_190;
          }
          llvm::MachineOperand::ChangeToImmediate(v26, (uint64_t)v15 >> 2, 0);
          if ((v15 & 3) == 0) {
            return;
          }
          *(void *)&long long v303 = 0;
          DWORD2(v303) = 1;
          unsigned int v197 = sub_1CBE0418C(67, 3, &v303);
          uint64_t v198 = a2;
          if (!a2 || (*(unsigned char *)a2 & 4) == 0)
          {
            while ((*(_WORD *)(v198 + 44) & 8) != 0)
              uint64_t v198 = *(void *)(v198 + 8);
          }
          int v199 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
          unint64_t v200 = *(unint64_t **)(v198 + 8);
          uint64_t v201 = *(void *)(v10 + 8) + 48 * v197;
          uint64_t v150 = *(llvm::MachineFunction **)(v78 + 32);
          unint64_t v202 = *(unsigned __int8 **)(a2 + 56);
          size_t v302 = v202;
          if (v202) {
            llvm::MetadataTracking::track((uint64_t)&v302, v202, 2);
          }
          uint64_t v152 = llvm::MachineFunction::CreateMachineInstr(v150, v201, &v302, 0);
          if (v302)
          {
            int v291 = *v302;
            if ((v291 - 4) > 0x1E)
            {
              if ((v291 - 3) >= 0xFFFFFFFE) {
                unint64_t v295 = v302;
              }
              else {
                unint64_t v295 = 0;
              }
              if ((v291 - 3) < 0xFFFFFFFE)
              {
                if (v291 == 3) {
                  *((void *)v302 + 1) = 0;
                }
                goto LABEL_253;
              }
              unint64_t v293 = (unint64_t)(v295 + 8);
            }
            else
            {
              if ((v302[1] & 0x7F) != 2 && !*((_DWORD *)v302 + 3)) {
                goto LABEL_253;
              }
              uint64_t v292 = *((void *)v302 + 2);
              if ((v292 & 4) == 0) {
                goto LABEL_253;
              }
              unint64_t v293 = v292 & 0xFFFFFFFFFFFFFFF8;
              if (!v293) {
                goto LABEL_253;
              }
            }
            *(void *)&long long v303 = &v302;
            sub_1CC5FA668(v293 + 16, &v303);
          }
LABEL_253:
          uint64_t v203 = *(void *)(v78 + 40);
          *((void *)v152 + 3) = v203;
          uint64_t v204 = *(void *)(v203 + 32);
          uint64_t v205 = *((unsigned int *)v152 + 10);
          if (v205)
          {
            uint64_t v229 = *((void *)v152 + 4);
            uint64_t v230 = *(void *)(v204 + 40);
            uint64_t v231 = 32 * v205;
            do
            {
              if (!*(unsigned char *)v229)
              {
                uint64_t v232 = *(unsigned int *)(v229 + 4);
                if ((int)v232 >= 0) {
                  unint64_t v233 = (uint64_t *)(*(void *)(v230 + 272) + 8 * v232);
                }
                else {
                  unint64_t v233 = (uint64_t *)(*(void *)(v230 + 24) + 16 * (v232 & 0x7FFFFFFF) + 8);
                }
                uint64_t v234 = *v233;
                if (*v233)
                {
                  uint64_t v235 = *(void *)(v234 + 16);
                  *(void *)(v234 + 16) = v229;
                  *(void *)(v229 + 16) = v235;
                  if (*(unsigned char *)(v229 + 3))
                  {
                    *(void *)(v229 + 24) = v234;
                  }
                  else
                  {
                    *(void *)(v229 + 24) = 0;
                    unint64_t v233 = (uint64_t *)(v235 + 24);
                  }
                }
                else
                {
                  *(void *)(v229 + 16) = v229;
                  *(void *)(v229 + 24) = 0;
                }
                uint64_t *v233 = v229;
              }
              v229 += 32;
              v231 -= 32;
            }
            while (v231);
          }
          uint64_t v206 = *(void *)(v204 + 728);
          if (v206) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v206 + 24))(v206, v152);
          }
          unint64_t v207 = *v200 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v152 = v207 | *(void *)v152 & 7;
          *((void *)v152 + 1) = v200;
          *(void *)(v207 + 8) = v152;
          unint64_t *v200 = *v200 & 7 | (unint64_t)v152;
          *((void *)&v303 + 1) = 0;
          uint64_t v304 = 0;
          uint64_t v305 = 0;
          LODWORD(v303) = 0x1000000;
          DWORD1(v303) = v199;
          llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
          LODWORD(v303) = 1;
          *((void *)&v303 + 1) = 0;
          uint64_t v304 = 0;
          llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
          *((void *)&v303 + 1) = 0;
          uint64_t v304 = 0;
          LODWORD(v303) = 0;
          DWORD1(v303) = v199;
          uint64_t v305 = 0;
          llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
          LODWORD(v303) = 1;
          *((void *)&v303 + 1) = 0;
          uint64_t v304 = 0;
          llvm::MachineInstr::addOperand(v152, v150, (const llvm::MachineOperand *)&v303);
          LODWORD(v303) = 1;
          *((void *)&v303 + 1) = 0;
          uint64_t v304 = v15 & 3;
          goto LABEL_257;
        }
LABEL_224:
        if (!v21
          || a4 != 1
          || (int v24 = *(unsigned __int8 **)(a2 + 32), v48 = *v24, v48 != 7)
          || (int v49 = *((_DWORD *)v24 + 4), (v49 & 0xFFFFFFFE) != 0x56))
        {
          unsigned int v236 = "Unable to materialize frameindex: invalid opcode!";
          goto LABEL_313;
        }
        unsigned int v47 = 0;
        goto LABEL_40;
      }
LABEL_165:
      if (v14 >= 0) {
        int v141 = v14;
      }
      else {
        int v141 = v14 + 1;
      }
      uint64_t v142 = *(void *)(a2 + 32) + 32 * (a4 + 1);
      int v143 = *(_DWORD *)(v142 + 16) + (v141 >> 1);
      *(void *)(v142 + 16) = 0;
      BOOL v26 = (unsigned int *)(*(void *)(a2 + 32) + 32 * a4);
      uint64_t v25 = v143;
      goto LABEL_190;
    }
    if ((v17 - 4407) >= 3 && ((v17 - 4430) > 3 || v17 == 4431)) {
      goto LABEL_224;
    }
    uint64_t v84 = *(void *)(a2 + 24);
    __int16 v85 = *(_WORD *)(a2 + 44);
    unint64_t v86 = *((void *)v16 + 1);
    if ((v85 & 0xC) != 0 && (v85 & 4) == 0)
    {
      uint64_t v268 = v11;
      uint64_t v269 = v10;
      if ((v86 & 0x100000) == 0)
      {
        uint64_t v270 = a2;
        while ((*(_WORD *)(v270 + 44) & 8) != 0)
        {
          uint64_t v270 = *(void *)(v270 + 8);
          LOBYTE(v87) = 1;
          uint64_t v10 = v269;
          uint64_t v11 = v268;
          if ((*(unsigned char *)(*(void *)(v270 + 16) + 10) & 0x10) != 0) {
            goto LABEL_85;
          }
        }
        int v24 = *(unsigned __int8 **)(a2 + 32);
        uint64_t v10 = v269;
        goto LABEL_385;
      }
      LOBYTE(v87) = 1;
    }
    else
    {
      uint64_t v87 = (v86 >> 20) & 1;
    }
LABEL_85:
    int v24 = *(unsigned __int8 **)(a2 + 32);
    if (a4 == 1 && (v87 & 1) != 0) {
      goto LABEL_87;
    }
LABEL_385:
    uint64_t v271 = a4 + 1;
    uint64_t v272 = *(void *)&v24[32 * v271 + 16];
    if ((v14 & ~(-1 << (BYTE1(v272) & 7))) != 0)
    {
      unsigned int v236 = "Unable to materialize frameindex: invalid shift!";
      goto LABEL_313;
    }
    if (v14 > 255)
    {
      uint64_t v273 = *(void *)(*(void *)(v84 + 32) + 40);
      uint64_t v274 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v273, "", 0);
      *(void *)(*(void *)(v273 + 24) + 16 * (v274 & 0x7FFFFFFF)) = &off_1E66AF580;
      uint64_t v275 = *(void *)(v273 + 8);
      if (v275) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v275 + 24))(v275, v274);
      }
      sub_1CBAECAFC(v10, v84, (unint64_t *)v300, v15, v274, 0, 0, (unsigned __int8 **)v300 + 7, 0);
      llvm::MachineOperand::ChangeToRegister(*((void *)v300 + 4) + 32 * v12, v274, 0, 0, 1, 0, 0, 0);
      BOOL v26 = (unsigned int *)(*((void *)v300 + 4) + 32 * v271);
      uint64_t v25 = v272 & 0xFFFFF8FF;
      goto LABEL_190;
    }
    sub_1CBAD7F90((uint64_t)v300, 1, 1);
    llvm::MachineOperand::ChangeToImmediate((unsigned int *)(*((void *)v300 + 4) + 32 * a4), v15, 0);
    llvm::MachineInstr::removeOperand((char *)v300, a4 + 1);
    return;
  }
  if ((v17 - 5725) < 0x18) {
    goto LABEL_18;
  }
  if (v17 == 5625)
  {
    BOOL v26 = (unsigned int *)(*(void *)(a2 + 32) + 32 * a4);
    uint64_t v25 = v15;
    goto LABEL_190;
  }
  if (v17 != 5627) {
    goto LABEL_224;
  }
  if (a4 == 1) {
    char v23 = v21;
  }
  else {
    char v23 = 0;
  }
  int v24 = *(unsigned __int8 **)(a2 + 32);
  if ((v23 & 1) == 0)
  {
    uint64_t v25 = v14;
    BOOL v26 = (unsigned int *)&v24[32 * a4];
LABEL_190:
    llvm::MachineOperand::ChangeToImmediate(v26, v25, 0);
    return;
  }
LABEL_87:
  unsigned int v47 = 0;
  if (!v21) {
    goto LABEL_88;
  }
LABEL_39:
  int v48 = *v24;
  int v49 = *((_DWORD *)v24 + 4);
LABEL_40:
  uint64_t v50 = 2;
  uint64_t v51 = 1;
  if (v48 != 7 || (v49 & 0xFFFFFFFE) != 0x56) {
    goto LABEL_89;
  }
  int v52 = *((_DWORD *)v24 + 1);
  llvm::MachineOperand::ChangeToImmediate((unsigned int *)&v24[32 * a4], 0, 0);
  int v53 = (uint64_t *)(v24 + 16);
  if (v15 >= 0) {
    int v54 = v15;
  }
  else {
    int v54 = v15 + 1;
  }
  int v55 = v52 + (v54 >> 1);
  if (*((_DWORD *)v24 + 4) == 86) {
    int v56 = 86;
  }
  else {
    int v56 = 87;
  }
  int v57 = *(_DWORD *)v24;
  if (!*(_DWORD *)v24)
  {
    uint64_t v58 = *v53;
    if (*v53)
    {
      uint64_t v59 = *((void *)v24 + 1);
      if (v59)
      {
        uint64_t v60 = *(void *)(v59 + 24);
        if (v60)
        {
          uint64_t v61 = *(void *)(v60 + 32);
          if (v61)
          {
            uint64_t v62 = *(void *)(v61 + 40);
            uint64_t v63 = *((unsigned int *)v24 + 1);
            if ((v63 & 0x80000000) != 0) {
              uint64_t v64 = (unsigned __int8 **)(*(void *)(v62 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v64 = (unsigned __int8 **)(*(void *)(v62 + 272) + 8 * v63);
            }
            int v65 = *v64;
            int v66 = (unsigned __int8 *)*((void *)v24 + 3);
            if (*v64 != v24) {
              uint64_t v64 = (unsigned __int8 **)(v58 + 24);
            }
            unsigned int *v64 = v66;
            if (v66) {
              unint64_t v67 = v66;
            }
            else {
              unint64_t v67 = v65;
            }
            *((void *)v67 + 2) = v58;
            *int v53 = 0;
            *((void *)v24 + 3) = 0;
            int v57 = *(_DWORD *)v24;
          }
        }
      }
    }
  }
  *((_DWORD *)v24 + 4) = v56;
  *((_DWORD *)v24 + 6) = 0;
  *(_DWORD *)int v24 = v57 & 0xFFF00000 | 7;
  *((_DWORD *)v24 + 1) = v55;
}

void *sub_1CBC01814(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(*(void *)a2 + 18) & 0x3FF0) == 0xFF0 || (*(_WORD *)(*(void *)a2 + 18) & 0x3F70) == 0) {
    return &unk_1CDC7D206;
  }
  else {
    return &unk_1CDC7D204;
  }
}

uint64_t sub_1CBC01848(uint64_t a1, unsigned int a2, unsigned __int16 *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = a2;
  v336[7] = *MEMORY[0x1E4F143B8];
  uint64_t v324 = a6;
  uint64_t v322 = a5;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1870, memory_order_acquire) & 1) == 0)
  {
    uint64_t v242 = a7;
    int v244 = __cxa_guard_acquire(&qword_1EBCC1870);
    a5 = v322;
    unsigned int v10 = a2;
    a6 = v324;
    a7 = v242;
    if (v244)
    {
      byte_1EBCC184B = 1;
      __cxa_guard_release(&qword_1EBCC1870);
      a5 = v322;
      unsigned int v10 = a2;
      a6 = v324;
      a7 = v242;
    }
  }
  if (*(unsigned char *)(*(void *)(a6 + 16) + 356)) {
    BOOL v11 = byte_1EBCC184B == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11) {
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(a8 + 256);
  uint64_t v14 = *(void *)(a6 + 48);
  if (!v14)
  {
    uint64_t v15 = a7;
    unsigned int v16 = v10;
    uint64_t v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a6 + 8) + 216))(*(void *)(a6 + 8), a6 + 128, a6);
    unsigned int v10 = v16;
    a6 = v324;
    a7 = v15;
    uint64_t v14 = v17;
    *(void *)(v324 + 48) = v17;
  }
  if (!*(unsigned char *)(v14 + 570))
  {
    unsigned int v197 = v10;
    uint64_t v198 = a7;
    sub_1CBB23528((_DWORD *)(v14 + 576));
    *(void *)(v14 + 608) = *(void *)(v14 + 600);
    int v199 = *(_DWORD *)(v14 + 632);
    if (v199 || *(_DWORD *)(v14 + 636))
    {
      unsigned int v296 = (_DWORD *)(v14 + 624);
      uint64_t v297 = *(unsigned int *)(v14 + 640);
      if (v297 > 4 * v199 && v297 >= 0x41)
      {
        sub_1CD42616C(v296);
      }
      else
      {
        if (v297)
        {
          uint64_t v298 = *(void **)v296;
          uint64_t v299 = 8 * v297;
          do
          {
            *v298++ = -4096;
            v299 -= 8;
          }
          while (v299);
        }
        *(void *)(v14 + 632) = 0;
      }
    }
    *(void *)(v14 + 656) = *(void *)(v14 + 648);
    int v200 = *(_DWORD *)(v14 + 680);
    if (v200 || *(_DWORD *)(v14 + 684))
    {
      uint64_t v300 = (_DWORD *)(v14 + 672);
      uint64_t v301 = *(unsigned int *)(v14 + 688);
      if (v301 > 4 * v200 && v301 >= 0x41)
      {
        sub_1CD426218(v300);
      }
      else
      {
        if (v301)
        {
          size_t v302 = *(void **)v300;
          uint64_t v303 = 32 * v301;
          do
          {
            *size_t v302 = -4096;
            v302 += 4;
            v303 -= 32;
          }
          while (v303);
        }
        *(void *)(v14 + 680) = 0;
      }
    }
    int v201 = *(_DWORD *)(v14 + 704);
    uint64_t v202 = v324;
    if (v201 || *(_DWORD *)(v14 + 708))
    {
      uint64_t v304 = (_DWORD *)(v14 + 696);
      uint64_t v305 = *(unsigned int *)(v14 + 712);
      if (v305 > 4 * v201 && v305 >= 0x41)
      {
        sub_1CD3C8060(v304);
      }
      else
      {
        if (v305)
        {
          uint64_t v306 = *(void **)v304;
          uint64_t v307 = 16 * v305;
          do
          {
            *uint64_t v306 = -4096;
            v306 += 2;
            v307 -= 16;
          }
          while (v307);
        }
        *(void *)(v14 + 704) = 0;
      }
      uint64_t v202 = v324;
    }
    int v203 = *(_DWORD *)(v14 + 728);
    if (v203 || *(_DWORD *)(v14 + 732))
    {
      uint64_t v238 = (_DWORD *)(v14 + 720);
      uint64_t v239 = *(unsigned int *)(v14 + 736);
      if (v239 > 4 * v203 && v239 >= 0x41)
      {
        sub_1CBC04D20(v238);
      }
      else
      {
        if (v239)
        {
          unsigned int v240 = *(_DWORD **)v238;
          uint64_t v241 = 16 * v239;
          do
          {
            *unsigned int v240 = -1;
            v240 += 4;
            v241 -= 16;
          }
          while (v241);
        }
        *(void *)(v14 + 728) = 0;
      }
      uint64_t v202 = v324;
    }
    int v204 = *(_DWORD *)(v14 + 752);
    if (!v204 && !*(_DWORD *)(v14 + 756)) {
      goto LABEL_294;
    }
    size_t v308 = (_DWORD *)(v14 + 744);
    uint64_t v309 = *(unsigned int *)(v14 + 760);
    if (v309 > 4 * v204 && v309 >= 0x41)
    {
      sub_1CD4262C4(v308);
    }
    else
    {
      if (v309)
      {
        uint64_t v310 = *(void *)v308 + 24;
        uint64_t v311 = 24 * v309;
        while (1)
        {
          uint64_t v312 = *(void *)(v310 - 24);
          if (v312 == -8192) {
            goto LABEL_507;
          }
          if (v312 != -4096) {
            break;
          }
LABEL_508:
          v310 += 24;
          v311 -= 24;
          if (!v311) {
            goto LABEL_509;
          }
        }
        uint64_t v313 = *(void **)(v310 - 16);
        if ((void *)v310 != v313) {
          free(v313);
        }
LABEL_507:
        *(void *)(v310 - 24) = -4096;
        goto LABEL_508;
      }
LABEL_509:
      *(void *)(v14 + 752) = 0;
    }
    uint64_t v202 = v324;
LABEL_294:
    sub_1CBBE3028(v14, v202, v13);
    a6 = v324;
    *(unsigned char *)(v14 + 570) = 1;
    a7 = v198;
    unsigned int v10 = v197;
  }
  uint64_t v18 = a7;
  int v19 = v10;
  unint64_t v20 = v10 & 0x7FFFFFFF;
  uint64_t v21 = (void *)(v13 + 408);
  unint64_t v22 = *(unsigned int *)(v13 + 416);
  BOOL v94 = v20 >= v22;
  unint64_t v23 = v20 - v22;
  if (v94)
  {
    sub_1CB9153B8((uint64_t)v21, v23 + 1, *(void *)(v13 + 424));
LABEL_365:
    operator new();
  }
  int v24 = *(llvm::LiveRange **)(*v21 + 8 * v20);
  if (!v24) {
    goto LABEL_365;
  }
  uint64_t v25 = *(void *)(a6 + 40);
  uint64_t v26 = *(void *)(*(void *)(v25 + 24) + 16 * v20);
  uint64_t v27 = (*(uint64_t (**)(void))(**(void **)(a6 + 16) + 176))(*(void *)(a6 + 16));
  a6 = v324;
  int v28 = *(_DWORD *)(v14 + 640);
  a7 = v18;
  unsigned int v10 = v19;
  a5 = v322;
  if (!v28) {
    goto LABEL_7;
  }
  uint64_t v29 = v27;
  uint64_t v30 = *(void *)(v14 + 624);
  int v31 = v28 - 1;
  unsigned int v32 = v31 & ((v24 >> 4) ^ (v24 >> 9));
  uint64_t v33 = *(llvm::LiveRange **)(v30 + 8 * v32);
  if (v24 == v33)
  {
LABEL_19:
    int v36 = sub_1CBBE2F1C(v14, v25, v27, v13, v19);
    a5 = v322;
    unsigned int v10 = v19;
    a6 = v324;
    a7 = v18;
    if (!v36) {
      goto LABEL_7;
    }
    unint64_t v37 = v26 & 0xFFFFFFFFFFFFFFF8;
    if ((*(unsigned char *)(*(void *)(v29 + 264)
                   + 24
                   * (*(unsigned __int16 *)(*(void *)(v26 & 0xFFFFFFFFFFFFFFF8) + 24)
                    + *(_DWORD *)(v29 + 272) * ((*(void *)(v29 + 248) - *(void *)(v29 + 240)) >> 3))) & 0x1F) == 0)
      goto LABEL_7;
    uint64_t v331 = 0;
    uint64_t v332 = 0;
    LODWORD(v333) = 0;
    v336[0] = 0;
    __p = 0;
    uint64_t v335 = 0;
    __int16 v326 = (char *)v327 + 8;
    *(void *)&v327[0] = 0x800000000;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1878, memory_order_acquire) & 1) == 0)
    {
      int v248 = __cxa_guard_acquire(&qword_1EBCC1878);
      unint64_t v37 = v26 & 0xFFFFFFFFFFFFFFF8;
      a5 = v322;
      if (v248)
      {
        byte_1EBCC184C = 1;
        __cxa_guard_release(&qword_1EBCC1878);
        unint64_t v37 = v26 & 0xFFFFFFFFFFFFFFF8;
        a5 = v322;
      }
    }
    ++*(_DWORD *)(a8 + 272);
    if (!a4)
    {
LABEL_295:
      uint64_t v205 = (char *)v326;
      if (LODWORD(v327[0]))
      {
        uint64_t v206 = a4;
        unint64_t v207 = (char *)v326 + 4 * LODWORD(v327[0]);
LABEL_354:
        uint64_t v237 = a5[1];
        do
        {
          if ((unint64_t)(v237 + 1) > a5[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_WORD *)(*a5 + 2 * v237) = *(_DWORD *)v205;
          uint64_t v237 = a5[1] + 1;
          a5[1] = v237;
          v205 += 4;
        }
        while (v205 != v207);
        uint64_t v205 = (char *)v326;
        a4 = v206;
      }
      if (v205 != (char *)v327 + 8) {
        free(v205);
      }
      if (__p)
      {
        uint64_t v335 = (uint64_t)__p;
        operator delete(__p);
      }
      MEMORY[0x1D25D9CD0](v331, 4);
      a7 = v18;
      a6 = v324;
      unsigned int v10 = v19;
      a5 = v322;
      goto LABEL_7;
    }
    uint64_t v38 = a3;
    while (1)
    {
      unsigned int v39 = *v38;
      int v325 = 0;
      HIDWORD(v40) = *(_DWORD *)(*(void *)(v29 + 264)
                               + 24
                               * (*(unsigned __int16 *)(*(void *)v37 + 24)
                                + *(_DWORD *)(v29 + 272)
                                * ((*(void *)(v29 + 248) - *(void *)(v29 + 240)) >> 3)))
                   - 16;
      LODWORD(v40) = HIDWORD(v40);
      uint64_t v41 = (&off_1E66AF9E0)[(int)(v40 >> 5)];
      LODWORD(v42) = v39;
      if (v41 != (__int16 ***)v37)
      {
        uint64_t v43 = *(void *)(v29 + 56);
        uint64_t v42 = *(void *)(v29 + 8) + 24 * v39;
        uint64_t v44 = *(unsigned int *)(v42 + 8);
        if (*(_WORD *)(v43 + 2 * v44))
        {
          unsigned __int16 v45 = *(_WORD *)(v43 + 2 * v44) + v39;
          int v46 = (unsigned __int16 *)(v43 + 2 * v44 + 2);
          do
          {
            LODWORD(v42) = v45;
            if (v45 - 1 <= 0x3FFFFFFE
              && v45 >> 3 < *((unsigned __int16 *)*v41 + 11)
              && ((*((unsigned __int8 *)(*v41)[1] + ((unint64_t)v45 >> 3)) >> (v45 & 7)) & 1) != 0)
            {
              break;
            }
            int v47 = *v46++;
            v45 += v47;
          }
          while (v47);
        }
      }
      int v325 = v42;
      if (v333)
      {
        unsigned int v48 = (v333 - 1) & (37 * v42);
        int v49 = *((_DWORD *)v331 + v48);
        if (v42 == v49) {
          goto LABEL_42;
        }
        int v50 = 1;
        while (v49 != -1)
        {
          unsigned int v51 = v48 + v50++;
          unsigned int v48 = v51 & (v333 - 1);
          int v49 = *((_DWORD *)v331 + v48);
          if (v42 == v49) {
            goto LABEL_42;
          }
        }
      }
      if (LODWORD(v327[0]) > byte_1EBCC184C)
      {
        uint64_t v206 = a4;
        uint64_t v205 = (char *)v326;
        unint64_t v207 = (char *)v326 + 4 * LODWORD(v327[0]);
        goto LABEL_354;
      }
      if (!llvm::LiveRegMatrix::checkInterference(a8, v24, v42))
      {
        if (LODWORD(v327[0]) >= (unint64_t)DWORD1(v327[0])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_DWORD *)v326 + LODWORD(v327[0])) = v39;
        ++LODWORD(v327[0]);
      }
      sub_1CBB29A9C((uint64_t)&v331, &v325);
      a5 = v322;
      unint64_t v37 = v26 & 0xFFFFFFFFFFFFFFF8;
LABEL_42:
      if (++v38 == &a3[a4]) {
        goto LABEL_295;
      }
    }
  }
  int v34 = 1;
  while (v33 != (llvm::LiveRange *)-4096)
  {
    unsigned int v35 = v32 + v34++;
    unsigned int v32 = v35 & v31;
    uint64_t v33 = *(llvm::LiveRange **)(v30 + 8 * v32);
    if (v24 == v33) {
      goto LABEL_19;
    }
  }
LABEL_7:
  if (a5[1]) {
    return 0;
  }
  uint64_t v320 = a4;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1860, memory_order_acquire) & 1) == 0)
  {
    uint64_t v245 = a7;
    unsigned int v246 = v10;
    int v247 = __cxa_guard_acquire(&qword_1EBCC1860);
    a5 = v322;
    unsigned int v10 = v246;
    a6 = v324;
    a7 = v245;
    if (v247)
    {
      byte_1EBCC1849 = 1;
      __cxa_guard_release(&qword_1EBCC1860);
      a5 = v322;
      unsigned int v10 = v246;
      a6 = v324;
      a7 = v245;
    }
  }
  BOOL v53 = byte_1EBCC1849 != 1 || a7 == 0 || a8 == 0;
  uint64_t v54 = a1;
  if (!v53 && *(void *)(*(void *)(a6 + 56) + 8) != *(void *)(*(void *)(a6 + 56) + 16))
  {
    uint64_t v318 = a7;
    uint64_t v64 = *(void *)(a6 + 40);
    uint64_t v65 = *(void *)(a6 + 16);
    unsigned int v66 = v10;
    uint64_t v67 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 104))(v65);
    uint64_t v68 = *(void *)(a8 + 256);
    unint64_t v69 = v66 & 0x7FFFFFFF;
    int v70 = (void *)(v68 + 408);
    unint64_t v71 = *(unsigned int *)(v68 + 416);
    BOOL v94 = v69 >= v71;
    unint64_t v72 = v69 - v71;
    if (v94)
    {
      sub_1CB9153B8((uint64_t)v70, v72 + 1, *(void *)(v68 + 424));
    }
    else
    {
      unsigned int v10 = v66;
      uint64_t v73 = *(void *)(*v70 + 8 * v69);
      if (v73)
      {
        __int16 v326 = (void *)1;
        *(void *)&long long v74 = -1;
        *((void *)&v74 + 1) = -1;
        v327[0] = v74;
        v327[1] = v74;
        int v328 = v330;
        uint64_t v329 = 0x800000000;
        a5 = v322;
        if ((v66 & 0x80000000) != 0) {
          BOOL v75 = (uint64_t *)(*(void *)(v64 + 24) + 16 * v69 + 8);
        }
        else {
          BOOL v75 = (uint64_t *)(*(void *)(v64 + 272) + 8 * v66);
        }
        uint64_t v165 = *v75;
        uint64_t v54 = a1;
        if (!*v75) {
          goto LABEL_460;
        }
        while ((*(_DWORD *)v165 & 0x80000000) != 0)
        {
          uint64_t v165 = *(void *)(v165 + 24);
          if (!v165) {
            goto LABEL_460;
          }
        }
LABEL_214:
        LODWORD(v331) = 0;
        uint64_t v166 = (unint64_t *)(v165 + 8);
        if (!(*(unsigned int (**)(uint64_t, void, void **))(*(void *)v67 + 64))(v67, *(void *)(v165 + 8), &v331)&& !(*(unsigned int (**)(uint64_t, void, void **))(*(void *)v67 + 96))(v67, *(void *)(v165 + 8), &v331))
        {
          unsigned int v10 = v66;
          a5 = v322;
          while (1)
          {
            uint64_t v165 = *(void *)(v165 + 24);
            if (!v165) {
              goto LABEL_460;
            }
            if ((*(_DWORD *)v165 & 0x80000000) == 0) {
              goto LABEL_214;
            }
          }
        }
        unint64_t v167 = *v166;
        unsigned int v10 = v66;
        a5 = v322;
        if (!*v166) {
          goto LABEL_460;
        }
        uint64_t v168 = *(unsigned __int16 **)(v167 + 16);
        if (*v168 - 1 <= 1 && (*(unsigned char *)(*(void *)(v167 + 32) + 48) & 8) != 0)
        {
          __int16 v169 = *(_WORD *)(v167 + 44);
          int v170 = v169 & 4;
          goto LABEL_384;
        }
        __int16 v169 = *(_WORD *)(v167 + 44);
        int v170 = v169 & 4;
        uint64_t v171 = *((void *)v168 + 1);
        if ((v169 & 0xC) != 0 && v170 == 0)
        {
          if ((v171 & 0x80000) != 0)
          {
LABEL_479:
            int v249 = (uint64_t *)(v68 + 288);
            uint64_t v250 = *(void *)(v68 + 288);
            unint64_t v252 = *v166;
            goto LABEL_472;
          }
          unint64_t v295 = *v166;
          uint64_t v54 = a1;
          a5 = v322;
          while (1)
          {
            unsigned int v10 = v66;
            if ((*(_WORD *)(v295 + 44) & 8) == 0) {
              break;
            }
            unint64_t v295 = *(void *)(v295 + 8);
            if ((*(unsigned char *)(*(void *)(v295 + 16) + 10) & 8) != 0) {
              goto LABEL_479;
            }
          }
        }
        else if ((v171 & 0x80000) != 0)
        {
LABEL_384:
          int v249 = (uint64_t *)(v68 + 288);
          uint64_t v250 = *(void *)(v68 + 288);
          uint64_t v251 = v320;
          if (!v170)
          {
            unint64_t v252 = *v166;
LABEL_386:
            unint64_t v253 = *v166;
            if ((v169 & 8) != 0)
            {
              unint64_t v253 = *v166;
              do
                unint64_t v253 = *(void *)(v253 + 8);
              while ((*(_WORD *)(v253 + 44) & 8) != 0);
            }
            uint64_t v254 = *(void *)(v253 + 8);
            if (v252 != v254)
            {
              do
              {
                unsigned int v255 = **(unsigned __int16 **)(v252 + 16);
                BOOL v256 = v255 > 0x17;
                int v257 = (1 << v255) & 0x83E000;
                if (v256 || v257 == 0) {
                  goto LABEL_394;
                }
                unint64_t v252 = *(void *)(v252 + 8);
              }
              while (v252 != v254);
              unint64_t v252 = *(void *)(v253 + 8);
            }
LABEL_394:
            uint64_t v259 = *(void *)(v250 + 368);
            uint64_t v260 = *(unsigned int *)(v250 + 384);
            if (v260)
            {
              LODWORD(v261) = ((v252 >> 4) ^ (v252 >> 9)) & (v260 - 1);
              uint64_t v262 = (uint64_t *)(v259 + 16 * v261);
              uint64_t v263 = *v262;
              if (v252 != *v262)
              {
                int v264 = 1;
                do
                {
                  if (v263 == -4096) {
                    goto LABEL_400;
                  }
                  int v265 = v261 + v264++;
                  uint64_t v261 = v265 & (v260 - 1);
                  uint64_t v263 = *(void *)(v259 + 16 * v261);
                }
                while (v252 != v263);
                uint64_t v262 = (uint64_t *)(v259 + 16 * v261);
              }
            }
            else
            {
LABEL_400:
              uint64_t v262 = (uint64_t *)(v259 + 16 * v260);
            }
            uint64_t v266 = v262[1];
            uint64_t v267 = *(void *)(*(void *)(v167 + 24) + 56);
            uint64_t v331 = &v333;
            uint64_t v332 = 0x1400000000;
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1880, memory_order_acquire) & 1) == 0)
            {
              int v294 = __cxa_guard_acquire(&qword_1EBCC1880);
              a5 = v322;
              if (v294)
              {
                byte_1EBCC1850 = 1;
                __cxa_guard_release(&qword_1EBCC1880);
                a5 = v322;
              }
            }
            if (byte_1EBCC1850) {
              unsigned int v268 = 20;
            }
            else {
              unsigned int v268 = 0;
            }
            if (HIDWORD(v332) < v268) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unsigned int v269 = v332;
            if (v167 == v267 || v251 == 0)
            {
LABEL_453:
              uint64_t v54 = a1;
              if (v269) {
                goto LABEL_454;
              }
              goto LABEL_456;
            }
            uint64_t v317 = v267;
            unint64_t v271 = v266 & 0xFFFFFFFFFFFFFFF8 | 4;
            uint64_t v272 = &a3[v251];
            uint64_t v273 = a3;
            while (1)
            {
              if (byte_1EBCC1850) {
                unsigned int v274 = 20;
              }
              else {
                unsigned int v274 = 0;
              }
              if (v269 > v274)
              {
                uint64_t v54 = a1;
LABEL_454:
                int v292 = *((_DWORD *)v331 + v269 - 1);
                uint64_t v293 = a5[1];
                if ((unint64_t)(v293 + 1) > a5[2]) {
                  llvm::SmallVectorBase<unsigned long long>::grow_pod();
                }
                *(_WORD *)(*a5 + 2 * v293) = v292;
                ++a5[1];
LABEL_456:
                if (v331 != &v333)
                {
                  free(v331);
LABEL_458:
                  a5 = v322;
                }
                goto LABEL_459;
              }
              unint64_t v167 = *(void *)v167 & 0xFFFFFFFFFFFFFFF8;
              if (!v167 || (*(unsigned char *)v167 & 4) == 0) {
                break;
              }
              __int16 v275 = *(_WORD *)(v167 + 44);
              uint64_t v276 = *v249;
              if ((v275 & 4) == 0) {
                goto LABEL_425;
              }
              unint64_t v277 = v167;
              do
                unint64_t v277 = *(void *)v277 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v277 + 44) & 4) != 0);
              a5 = v322;
LABEL_426:
              unint64_t v278 = v167;
              if ((v275 & 8) != 0)
              {
                do
                  unint64_t v278 = *(void *)(v278 + 8);
                while ((*(_WORD *)(v278 + 44) & 8) != 0);
              }
              unint64_t v279 = *(void *)(v278 + 8);
              if (v277 != v279)
              {
                while (1)
                {
                  unsigned int v280 = **(unsigned __int16 **)(v277 + 16);
                  BOOL v256 = v280 > 0x17;
                  int v281 = (1 << v280) & 0x83E000;
                  if (v256 || v281 == 0) {
                    break;
                  }
                  unint64_t v277 = *(void *)(v277 + 8);
                  if (v277 == v279)
                  {
                    unint64_t v277 = v279;
                    break;
                  }
                }
              }
              uint64_t v283 = *(void *)(v276 + 368);
              uint64_t v284 = *(unsigned int *)(v276 + 384);
              if (v284)
              {
                LODWORD(v285) = ((v277 >> 4) ^ (v277 >> 9)) & (v284 - 1);
                int v286 = (uint64_t *)(v283 + 16 * v285);
                uint64_t v287 = *v286;
                if (v277 == *v286) {
                  goto LABEL_441;
                }
                int v288 = 1;
                while (v287 != -4096)
                {
                  int v289 = v285 + v288++;
                  uint64_t v285 = v289 & (v284 - 1);
                  uint64_t v287 = *(void *)(v283 + 16 * v285);
                  if (v277 == v287)
                  {
                    int v286 = (uint64_t *)(v283 + 16 * v285);
                    goto LABEL_441;
                  }
                }
              }
              int v286 = (uint64_t *)(v283 + 16 * v284);
LABEL_441:
              uint64_t v290 = v286[1];
              ++*(_DWORD *)(a8 + 272);
              if (v273 != v272)
              {
                unint64_t v291 = v290 & 0xFFFFFFFFFFFFFFF8 | 4;
                while (llvm::LiveRegMatrix::checkInterference(a8, v291, v271, *v273))
                {
                  if (++v273 == v272)
                  {
                    unsigned int v269 = v332;
                    a5 = v322;
                    goto LABEL_453;
                  }
                }
                if (v332 >= (unint64_t)HIDWORD(v332)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                a5 = v322;
                *((_DWORD *)v331 + v332) = *v273;
                unsigned int v269 = v332 + 1;
                LODWORD(v332) = v332 + 1;
                if (v167 != v317 && v273 != v272) {
                  continue;
                }
              }
              goto LABEL_453;
            }
            while (1)
            {
              __int16 v275 = *(_WORD *)(v167 + 44);
              if ((v275 & 4) == 0) {
                break;
              }
              unint64_t v167 = *(void *)v167 & 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v276 = *v249;
LABEL_425:
            unint64_t v277 = v167;
            goto LABEL_426;
          }
          unint64_t v252 = *v166;
          do
            unint64_t v252 = *(void *)v252 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v252 + 44) & 4) != 0);
LABEL_472:
          uint64_t v251 = v320;
          a5 = v322;
          goto LABEL_386;
        }
        if (*(float *)(v73 + 116) != INFINITY)
        {
LABEL_460:
          if (v328 != v330)
          {
            free(v328);
            a5 = v322;
            unsigned int v10 = v66;
          }
          if ((v326 & 1) == 0)
          {
            MEMORY[0x1D25D9CD0](*(void *)&v327[0], 4);
            a5 = v322;
            unsigned int v10 = v66;
          }
          a7 = v318;
          goto LABEL_54;
        }
        unint64_t v173 = *v166;
        if ((v169 & 8) != 0)
        {
          unint64_t v173 = *v166;
          if ((*(void *)v167 & 4) == 0)
          {
            unint64_t v173 = *v166;
            do
              unint64_t v173 = *(void *)(v173 + 8);
            while ((*(_WORD *)(v173 + 44) & 8) != 0);
          }
        }
        uint64_t v174 = *(void *)(v173 + 8);
        uint64_t v175 = *(void *)(v167 + 24) + 48;
        uint64_t v176 = v320;
        uint64_t v177 = v318;
        if (v174 == v175)
        {
          unsigned int v183 = v329;
          goto LABEL_300;
        }
        int v178 = 10;
        while (1)
        {
          uint64_t v179 = *(unsigned __int16 **)(v174 + 16);
          uint64_t v180 = sub_1CBE52E8C(*v179);
          if ((v180 & 0xFF00000000) != 0)
          {
            BOOL v181 = (v180 - 64) > 0x3A
                || ((1 << (v180 - 64)) & 0x60001F460000001) == 0;
            if (!v181
              || ((v180 - 147) <= 0x14 ? (BOOL v182 = ((1 << (v180 + 109)) & 0x1E0001) == 0) : (BOOL v182 = 1), !v182))
            {
              uint64_t v186 = *(void *)(v174 + 32);
              unsigned int v187 = *((unsigned __int8 *)v179 + 4);
              if ((v179[4] & 2) == 0 || (int v194 = *(_DWORD *)(v174 + 40), v194 == v187))
              {
                unsigned int v188 = *((unsigned __int8 *)v179 + 4);
              }
              else
              {
                int v195 = v194 - 1;
                unsigned int v188 = *((unsigned __int8 *)v179 + 4);
                do
                {
                  int v196 = *(_DWORD *)(v186 + 32 * v187);
                  if ((v196 & 0x10000FF) != 0x1000000) {
                    break;
                  }
                  v188 += (v196 & 0x2000000) == 0;
                  if (v195 == v187) {
                    break;
                  }
                  ++v187;
                }
                while ((v196 & 0x2000000) == 0);
              }
              if (v188) {
                break;
              }
            }
          }
LABEL_245:
          unsigned int v183 = v329;
          int v184 = v178 - 1;
          if (v329 < 6) {
            --v178;
          }
          if (v329 > 5 || v184 == 0)
          {
            uint64_t v177 = v318;
LABEL_300:
            uint64_t v331 = (void *)1;
            uint64_t v332 = -1;
            uint64_t v333 = -1;
            __p = v336;
            uint64_t v335 = 0x400000000;
            if (!v183)
            {
LABEL_326:
              uint64_t v223 = (*(uint64_t (**)(uint64_t))(*(void *)v65 + 176))(v65);
              uint64_t v224 = v335;
              if (v335) {
                BOOL v225 = v176 == 0;
              }
              else {
                BOOL v225 = 1;
              }
              a5 = v322;
              if (!v225)
              {
                uint64_t v226 = (void *)(v223 + 8);
                uint64_t v227 = a3;
                uint64_t v314 = &a3[v320];
                while (1)
                {
                  uint64_t v315 = 4 * v224;
                  unint64_t v316 = (unsigned int *)__p;
                  while (1)
                  {
                    unsigned int v228 = *v227;
                    if (!v224) {
                      break;
                    }
                    uint64_t v229 = v224;
                    uint64_t v231 = v315;
                    uint64_t v230 = v316;
                    while (1)
                    {
                      unsigned int v232 = *v230;
                      if (*v230 == v228) {
                        break;
                      }
                      if (v228 - 1 <= 0x3FFFFFFE && v232 - 1 <= 0x3FFFFFFE)
                      {
                        BOOL v233 = llvm::MCRegisterInfo::regsOverlap(v226, v228, v232);
                        a5 = v322;
                        if (v233) {
                          break;
                        }
                      }
                      ++v230;
                      v231 -= 4;
                      if (!v231) {
                        goto LABEL_346;
                      }
                    }
                    ++v227;
                    uint64_t v224 = v229;
                    if (v227 == v314) {
                      goto LABEL_331;
                    }
                  }
LABEL_346:
                  uint64_t v234 = a5[1];
                  if ((unint64_t)(v234 + 1) > a5[2]) {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod();
                  }
                  *(_WORD *)(*a5 + 2 * v234) = v228;
                  unint64_t v235 = a5[1] + 1;
                  a5[1] = v235;
                  ++v227;
                  if (v235 > 0xA || v227 == v314) {
                    break;
                  }
                  uint64_t v224 = v335;
                }
              }
LABEL_331:
              if (__p != v336)
              {
                free(__p);
                a5 = v322;
              }
              uint64_t v54 = a1;
              if ((v331 & 1) == 0)
              {
                MEMORY[0x1D25D9CD0](v332, 4);
                goto LABEL_458;
              }
LABEL_459:
              unsigned int v10 = v66;
              goto LABEL_460;
            }
            uint64_t v208 = v328;
            uint64_t v209 = (char *)v328 + 4 * v183;
            while (2)
            {
              int v210 = *(_DWORD *)(*(void *)(v177 + 280) + 4 * (*v208 & 0x7FFFFFFF));
              if (v210)
              {
                int v325 = *(_DWORD *)(*(void *)(v177 + 280) + 4 * (*v208 & 0x7FFFFFFF));
                if (v331)
                {
                  int v211 = 4;
                  uint64_t v212 = &v332;
                  goto LABEL_305;
                }
                int v211 = v333;
                if (!v333)
                {
                  uint64_t v221 = 0;
                  goto LABEL_318;
                }
                uint64_t v212 = (void *)v332;
LABEL_305:
                int v213 = v211 - 1;
                unsigned int v214 = v213 & (37 * v210);
                uint64_t v215 = (_DWORD *)v212 + v214;
                int v216 = *v215;
                if (v210 != *v215)
                {
                  uint64_t v217 = 0;
                  int v218 = 1;
                  while (v216 != -1)
                  {
                    if (v217) {
                      BOOL v219 = 0;
                    }
                    else {
                      BOOL v219 = v216 == -2;
                    }
                    if (v219) {
                      uint64_t v217 = v215;
                    }
                    unsigned int v220 = v214 + v218++;
                    unsigned int v214 = v220 & v213;
                    uint64_t v215 = (_DWORD *)v212 + v214;
                    int v216 = *v215;
                    if (v210 == *v215) {
                      goto LABEL_320;
                    }
                  }
                  if (v217) {
                    uint64_t v221 = v217;
                  }
                  else {
                    uint64_t v221 = v215;
                  }
LABEL_318:
                  uint64_t v222 = sub_1CBBEF724((uint64_t)&v331, (uint64_t)&v325, &v325, v221);
                  *uint64_t v222 = v325;
                  if (v335 >= (unint64_t)HIDWORD(v335)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  uint64_t v177 = v318;
                  *((_DWORD *)__p + v335) = v325;
                  LODWORD(v335) = v335 + 1;
                  uint64_t v176 = v320;
                }
              }
LABEL_320:
              if (++v208 == (_DWORD *)v209) {
                goto LABEL_326;
              }
              continue;
            }
          }
          uint64_t v177 = v318;
          if (!v174 || (*(unsigned char *)v174 & 4) == 0)
          {
            while ((*(_WORD *)(v174 + 44) & 8) != 0)
              uint64_t v174 = *(void *)(v174 + 8);
          }
          uint64_t v174 = *(void *)(v174 + 8);
          if (v174 == v175) {
            goto LABEL_300;
          }
        }
        uint64_t v189 = 32 * v188;
        uint64_t v190 = (int *)(v186 + 4);
        while (1)
        {
          int v192 = *v190;
          v190 += 8;
          int v191 = v192;
          if (v192 < 0)
          {
            uint64_t v331 = 0;
            if ((sub_1CBC04EFC((uint64_t)&v326, v191, &v331) & 1) == 0) {
              break;
            }
          }
LABEL_272:
          v189 -= 32;
          if (!v189) {
            goto LABEL_245;
          }
        }
        if (v326) {
          unsigned int v193 = 8;
        }
        else {
          unsigned int v193 = DWORD2(v327[0]);
        }
        if (4 * (v326 >> 1) + 4 >= 3 * v193)
        {
          v193 *= 2;
        }
        else if (v193 + ~(v326 >> 1) - HIDWORD(v326) > v193 >> 3)
        {
LABEL_268:
          LODWORD(v326) = v326 + 2;
          if (*(_DWORD *)v331 != -1) {
            --HIDWORD(v326);
          }
          *(_DWORD *)uint64_t v331 = v191;
          if (v329 >= (unint64_t)HIDWORD(v329)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_DWORD *)v328 + v329) = v191;
          LODWORD(v329) = v329 + 1;
          goto LABEL_272;
        }
        sub_1CBC04FA0((uint64_t)&v326, v193);
        uint64_t v331 = 0;
        sub_1CBC04EFC((uint64_t)&v326, v191, &v331);
        goto LABEL_268;
      }
    }
    operator new();
  }
LABEL_54:
  unsigned int v319 = v10;
  uint64_t v55 = v10;
  uint64_t v56 = v54;
  uint64_t v57 = v320;
  uint64_t v58 = a7;
  llvm::TargetRegisterInfo::getRegAllocationHints(v56, v10, a3, v320, a5, v324, a7);
  unsigned int v59 = v319;
  uint64_t v60 = v324;
  if (v58 && a8)
  {
    uint64_t v61 = v58;
    uint64_t v331 = &v333;
    __p = 0;
    uint64_t v335 = 0;
    uint64_t v333 = 0;
    uint64_t v332 = 0xC00000006;
    uint64_t v62 = *(void *)(v58 + 248);
    if ((v319 & 0x80000000) != 0) {
      uint64_t v63 = (int **)(*(void *)(v62 + 24) + 16 * (v319 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v63 = (int **)(*(void *)(v62 + 272) + 8 * v55);
    }
    unint64_t v76 = *v63;
    if (*v63)
    {
      uint64_t v77 = *(void **)(v58 + 264);
      while (1)
      {
        unsigned int v78 = *v76;
        if ((*v76 & 0x80000000) == 0) {
          break;
        }
        unint64_t v76 = (int *)*((void *)v76 + 3);
        if (!v76) {
          goto LABEL_68;
        }
      }
      unint64_t v101 = byte_1CDEF2F4C;
      uint64_t v102 = byte_1CDEF36D2;
LABEL_105:
      unsigned int v103 = (v78 >> 8) & 0xFFF;
      if (v103)
      {
        if (v103 - 25 > 0xB)
        {
          if (v103 > 0x10)
          {
            uint64_t v105 = *(uint64_t (**)(void *))(*v77 + 208);
            uint64_t v106 = v77;
            uint64_t v107 = v57;
            uint64_t v108 = v62;
            char v109 = v77;
            int v110 = v102;
            unsigned int v111 = v101;
            int v112 = v105(v106);
            unint64_t v101 = v111;
            uint64_t v102 = v110;
            uint64_t v77 = v109;
            uint64_t v62 = v108;
            uint64_t v57 = v107;
            unsigned int v59 = v319;
            uint64_t v60 = v324;
            uint64_t v61 = v58;
            int v104 = v112 - 1;
          }
          else
          {
            int v104 = v103 - 1;
          }
        }
        else
        {
          int v104 = 2 * v103 - 50;
        }
      }
      else
      {
        int v104 = 0;
      }
      for (unint64_t i = *((void *)v76 + 1); (*(_WORD *)(i + 44) & 4) != 0; unint64_t i = *(void *)i & 0xFFFFFFFFFFFFFFF8)
        ;
      if ((*((unsigned char *)v76 + 3) & 1) == 0)
      {
        __int16 v114 = *(_DWORD **)(i + 32);
        uint64_t v115 = *(void *)(i + 24) + 48;
        uint64_t v116 = *(unsigned int *)(i + 40);
        unsigned int v117 = &v114[8 * v116];
        if (v116) {
          goto LABEL_117;
        }
        unint64_t v162 = *(void *)(i + 8);
        if (v162 == v115)
        {
          unint64_t i = *(void *)(i + 24) + 48;
          goto LABEL_117;
        }
        unint64_t i = *(void *)(i + 24) + 48;
        if ((*(_WORD *)(v162 + 44) & 4) == 0) {
          goto LABEL_117;
        }
        while (1)
        {
          unint64_t v163 = v162;
          uint64_t v164 = *(unsigned int *)(v162 + 40);
          if (v164) {
            break;
          }
          unint64_t v162 = *(void *)(v162 + 8);
          if (v162 == v115 || (*(_WORD *)(v162 + 44) & 4) == 0)
          {
            unint64_t i = v115;
            goto LABEL_208;
          }
        }
        unint64_t i = v162;
LABEL_208:
        __int16 v114 = *(_DWORD **)(v163 + 32);
        unsigned int v117 = &v114[8 * v164];
        unsigned int v59 = v319;
        uint64_t v57 = v320;
        uint64_t v61 = v58;
        uint64_t v60 = v324;
        while (1)
        {
LABEL_117:
          if (v114 == v117) {
            break;
          }
          if ((*v114 & 0x10000FF) != 0) {
            goto LABEL_186;
          }
          unsigned int v118 = v114[1];
          if (v118 == v59) {
            goto LABEL_186;
          }
          if ((v118 & 0x80000000) != 0)
          {
            unsigned int v122 = *(_DWORD *)(*(void *)(v61 + 280) + 4 * (v118 & 0x7FFFFFFF));
            if (!v122) {
              goto LABEL_186;
            }
            int v123 = (*v114 >> 8) & 0xFFF;
            if (v123)
            {
              uint64_t v124 = v77[1];
              uint64_t v125 = v77[7];
              uint64_t v126 = *(unsigned int *)(v124 + 24 * v122 + 4);
              if (!*(_WORD *)(v125 + 2 * v126)) {
                goto LABEL_186;
              }
              unsigned __int16 v127 = *(_WORD *)(v125 + 2 * v126) + v122;
              unint64_t v128 = (unsigned __int16 *)(v77[11] + 2 * *(unsigned int *)(v124 + 24 * v122 + 12));
              int v129 = (unsigned __int16 *)(v125 + 2 * v126 + 2);
              while (v123 != *v128)
              {
                int v130 = *v129++;
                v127 += v130;
                ++v128;
                if (!v130) {
                  goto LABEL_186;
                }
              }
              unsigned int v118 = v127;
            }
            else
            {
              unsigned int v118 = v122;
            }
          }
          if (v118 - 1 <= 0x3FFFFFFE)
          {
            unint64_t v119 = (unint64_t)v118 >> 3;
            if (v118 > 0x207)
            {
              if (v118 > 0x827) {
                goto LABEL_186;
              }
              unint64_t v119 = v119;
              int v120 = 1 << (v118 & 7);
            }
            else
            {
              int v120 = 1 << (v118 & 7);
              if ((v120 & v101[v119]) != 0)
              {
                int v121 = *(unsigned __int16 *)(v77[14] + 2 * v118);
                goto LABEL_184;
              }
              if (v118 <= 0xE7 && (v120 & v102[v119]) != 0)
              {
                unsigned int v131 = *(unsigned __int16 *)(v77[14] + 2 * v118) - v104;
                if ((*v76 & 0xFFF00) != 0x200)
                {
                  ++*((_DWORD *)&v333 + v131 % 6);
                  if ((*v76 & 0xFFF00) == 0x100) {
                    goto LABEL_186;
                  }
                }
                unsigned int v132 = v131 + 1;
                goto LABEL_185;
              }
            }
            if ((v120 & byte_1CDEF4514[v119]) != 0)
            {
              uint64_t v133 = v77[1];
              uint64_t v134 = v77[7];
              uint64_t v135 = *(unsigned int *)(v133 + 24 * v118 + 4);
              if (*(_WORD *)(v134 + 2 * v135))
              {
                unsigned __int16 v136 = *(_WORD *)(v134 + 2 * v135) + v118;
                BOOL v137 = (_WORD *)(v77[11] + 2 * *(unsigned int *)(v133 + 24 * v118 + 12));
                char v138 = (unsigned __int16 *)(v134 + 2 * v135 + 2);
                unsigned int v139 = v138;
                char v140 = v137;
                unsigned __int16 v141 = v136;
                while (*v140 != 26)
                {
                  int v142 = *v139++;
                  v141 += v142;
                  ++v140;
                  if (!v142)
                  {
                    unsigned int v143 = 0;
                    goto LABEL_148;
                  }
                }
                unsigned int v143 = v141;
LABEL_148:
                while (*v137 != 25)
                {
                  int v144 = *v138++;
                  v136 += v144;
                  ++v137;
                  if (!v144) {
                    goto LABEL_196;
                  }
                }
                unsigned int v145 = v136;
              }
              else
              {
                unsigned int v143 = 0;
LABEL_196:
                unsigned int v145 = 0;
              }
              int v146 = (*v76 >> 8) & 0xFFF;
              BOOL v148 = v146 == 1 || v146 == 25;
              if ((((((*v76 >> 8) & 0xFFF) != 0) ^ v148) & 1) == 0)
              {
                unsigned int v149 = (*(unsigned __int16 *)(v77[14] + 2 * v145) - v104 + 1) % 6;
                ++*((_DWORD *)&v333 + v149);
              }
              BOOL v151 = v146 == 2 || v146 == 25;
              if ((((v146 != 0) ^ v151) & 1) == 0)
              {
                unsigned int v152 = (*(unsigned __int16 *)(v77[14] + 2 * v145) - v104) % 6;
                ++*((_DWORD *)&v333 + v152);
              }
              BOOL v154 = v146 == 3 || v146 == 26;
              if ((((v146 != 0) ^ v154) & 1) == 0)
              {
                unsigned int v155 = (*(unsigned __int16 *)(v77[14] + 2 * v143) - v104 + 1) % 6;
                ++*((_DWORD *)&v333 + v155);
              }
              BOOL v156 = v146 != 0;
              BOOL v157 = v146 == 4 || v146 == 26;
              BOOL v158 = v157;
              if (((v156 ^ v158) & 1) == 0)
              {
                int v121 = *(unsigned __int16 *)(v77[14] + 2 * v143);
LABEL_184:
                unsigned int v132 = v121 - v104;
LABEL_185:
                ++*((_DWORD *)&v333 + v132 % 6);
              }
            }
          }
LABEL_186:
          v114 += 8;
          if (v114 == v117)
          {
            unint64_t v159 = *(void *)(i + 8);
            if (v159 == v115) {
              break;
            }
            __int16 v114 = v117;
            unint64_t i = v115;
            if ((*(_WORD *)(v159 + 44) & 4) != 0)
            {
              while (1)
              {
                unint64_t v160 = v159;
                uint64_t v161 = *(unsigned int *)(v159 + 40);
                if (v161) {
                  break;
                }
                unint64_t v159 = *(void *)(v159 + 8);
                if (v159 == v115 || (*(_WORD *)(v159 + 44) & 4) == 0)
                {
                  unint64_t i = v115;
                  goto LABEL_194;
                }
              }
              unint64_t i = v159;
LABEL_194:
              __int16 v114 = *(_DWORD **)(v160 + 32);
              unsigned int v117 = &v114[8 * v161];
            }
          }
        }
      }
      while (1)
      {
        unint64_t v76 = (int *)*((void *)v76 + 3);
        if (!v76) {
          break;
        }
        unsigned int v78 = *v76;
        if ((*v76 & 0x80000000) == 0) {
          goto LABEL_105;
        }
      }
    }
LABEL_68:
    unint64_t v79 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v62 + 24) + 16 * (v59 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 24);
    unint64_t v80 = v79 >> 5;
    int v81 = dword_1CDC6E5B8[v79 >> 5];
    int v82 = 1 << v79;
    if ((v82 & v81) != 0
      || (dword_1CDC6F0D8[v80] & v82) != 0
      || (dword_1CDC70098[v80] & v82) != 0
      || (dword_1CDC70B88[v80] & v82) != 0
      || (dword_1CDC718F8[v80] & v82) != 0
      || (dword_1CDC726F8[v80] & v82) != 0
      || (dword_1CDC729C8[v80] & v82) != 0)
    {
      unint64_t v83 = 0;
      do
      {
        uint64_t v84 = (char *)&v331 + 4 * v83;
        int v85 = *((_DWORD *)v84 + 4) + *((_DWORD *)v84 + 5);
        *((_DWORD *)v84 + 4) = v85;
        *((_DWORD *)v84 + 5) = v85;
        BOOL v94 = v83 >= 4;
        v83 += 2;
      }
      while (!v94);
    }
    unsigned int v86 = v333;
    uint64_t v87 = 20;
    unsigned int v88 = v333;
    int v89 = &v333;
    do
    {
      if (*(_DWORD *)((char *)&v331 + v87) < v88)
      {
        unsigned int v88 = *(_DWORD *)((char *)&v331 + v87);
        int v89 = (uint64_t *)((char *)&v331 + v87);
      }
      v87 += 4;
    }
    while (v87 != 40);
    unsigned int v90 = *(_DWORD *)v89;
    uint64_t v91 = 20;
    uint64_t v92 = &v333;
    do
    {
      unsigned int v93 = *(_DWORD *)((char *)&v331 + v91);
      BOOL v94 = v86 >= v93;
      if (v86 <= v93) {
        unsigned int v86 = *(_DWORD *)((char *)&v331 + v91);
      }
      if (!v94) {
        uint64_t v92 = (uint64_t *)((char *)&v331 + v91);
      }
      v91 += 4;
    }
    while (v91 != 40);
    unsigned int v95 = *(_DWORD *)v92 - v90;
    if (*(_DWORD *)v92 != v90 && (v90 < 2 || v95 > v90 >> 1))
    {
      unsigned int v96 = v95 <= 0xF ? 0 : v95 >> 1;
      (*(void (**)(void))(**(void **)(v60 + 16) + 176))(*(void *)(v60 + 16));
      if (v57)
      {
        uint64_t v97 = &a3[v57];
        do
        {
          uint64_t v98 = *a3;
          if (*((_DWORD *)v331 + *(_WORD *)(*(void *)(a1 + 112) + 2 * v98) % 6u) <= v96 + v90)
          {
            uint64_t v99 = v322[1];
            if ((unint64_t)(v99 + 1) > v322[2]) {
              llvm::SmallVectorBase<unsigned long long>::grow_pod();
            }
            *(_WORD *)(*v322 + 2 * v99) = v98;
            uint64_t v100 = v322[1] + 1;
            v322[1] = v100;
            if (v100 == 32) {
              break;
            }
          }
          ++a3;
        }
        while (a3 != v97);
      }
    }
    if (v331 != &v333) {
      free(v331);
    }
  }
  return 0;
}

uint64_t sub_1CBC036D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  v107[8] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(*(void *)(a2 + 24) + 32);
  uint64_t v12 = *(void *)(v11 + 40);
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(v11 + 16) + 176))(*(void *)(v11 + 16));
  int v14 = *(unsigned __int16 *)(*(void *)a7 + 24);
  unsigned int v15 = v14 - 14;
  BOOL v16 = (v14 - 14) > 0x32 || ((1 << (v14 - 14)) & 0x4000000004001) == 0;
  if (!v16 || v14 == 105 || v14 == 127)
  {
    if ((__int16 ***)a3 == &off_1E66ABDD8)
    {
      uint64_t v90 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
      uint64_t v91 = (uint64_t *)((v90 & 0x80000000) != 0
                      ? *(void *)(v12 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8
                      : *(void *)(v12 + 272) + 8 * v90);
      uint64_t v92 = *v91;
      if (!v92) {
        return 0;
      }
      while ((*(unsigned char *)(v92 + 3) & 1) != 0)
      {
        uint64_t v92 = *(void *)(v92 + 24);
        if (!v92) {
          return 0;
        }
      }
      uint64_t v58 = 0;
      while (1)
      {
        uint64_t v92 = *(void *)(v92 + 24);
        if (!v92) {
          break;
        }
        if ((*(unsigned char *)(v92 + 3) & 1) == 0) {
          return v58;
        }
      }
      unsigned int v93 = (uint64_t *)((v90 & 0x80000000) != 0
                      ? *(void *)(v12 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8
                      : *(void *)(v12 + 272) + 8 * v90);
      uint64_t v94 = *v93;
      if (!v94) {
        return 0;
      }
      if ((*(unsigned char *)(v94 + 3) & 1) == 0)
      {
        uint64_t v94 = *(void *)(v94 + 24);
        if (!v94 || (*(unsigned char *)(v94 + 3) & 1) == 0) {
          return 0;
        }
      }
      uint64_t v95 = *(void *)(v94 + 24);
      if (v95)
      {
        if (*(unsigned char *)(v95 + 3)) {
          return 0;
        }
      }
      if ((v90 & 0x80000000) != 0) {
        unsigned int v96 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
      }
      else {
        unsigned int v96 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v90);
      }
      uint64_t v97 = *v96;
      if ((*(unsigned char *)(v97 + 3) & 1) == 0) {
        uint64_t v97 = *(void *)(v97 + 24);
      }
      uint64_t v98 = *(void *)(v97 + 8);
      int v99 = **(unsigned __int16 **)(v98 + 16);
      if ((v99 == 5625 || v99 == 517) && *(void *)(a2 + 24) != *(void *)(v98 + 24)) {
        return 0;
      }
    }
    BOOL v79 = v15 > 0x32;
    uint64_t v80 = (1 << v15) & 0x4000000004001;
    BOOL v81 = v79 || v80 == 0;
    if (!v81 || v14 == 105 || v14 == 127)
    {
      uint64_t v82 = *(unsigned int *)(*(void *)(a2 + 32) + 36);
      unint64_t v83 = (uint64_t *)((v82 & 0x80000000) != 0
                      ? *(void *)(v12 + 24) + 16 * (v82 & 0x7FFFFFFF) + 8
                      : *(void *)(v12 + 272) + 8 * v82);
      uint64_t v84 = *v83;
      if (*v83)
      {
        if (*(unsigned char *)(v84 + 3) & 1) != 0 || (uint64_t v84 = *(void *)(v84 + 24)) != 0 && (*(unsigned char *)(v84 + 3))
        {
          uint64_t v85 = *(void *)(v84 + 8);
LABEL_147:
          int v86 = **(unsigned __int16 **)(v85 + 16);
          uint64_t v87 = *(char **)(*(void *)(*(void *)(v85 + 24) + 32) + 16);
          unsigned int v103 = (char *)&unk_1F25FDCB8;
          int v104 = v87;
          uint64_t v106 = &v103;
          unsigned int v88 = sub_1CBD854F8((uint64_t)&v103);
          if (v106 == &v103)
          {
            (*((void (**)(char **))v103 + 4))(&v103);
          }
          else if (v106)
          {
            (*((void (**)(void))*v106 + 5))();
          }
          if (!sub_1CBE530B4(v86, v88) || sub_1CBC2F844(v85)) {
            return 0;
          }
          uint64_t v89 = *(void *)(v84 + 8);
          while (1)
          {
            uint64_t v84 = *(void *)(v84 + 24);
            if (!v84 || (*(unsigned char *)(v84 + 3) & 1) == 0) {
              break;
            }
            uint64_t v85 = *(void *)(v84 + 8);
            if (v85 != v89) {
              goto LABEL_147;
            }
          }
        }
      }
    }
  }
  uint64_t v17 = *(void *)(v13 + 264);
  int v18 = *(_DWORD *)(v13 + 272) * ((*(void *)(v13 + 248) - *(void *)(v13 + 240)) >> 3);
  if ((*(_DWORD *)(v17 + 24 * (v18 + *(unsigned __int16 *)(*a5 + 24)) + 4) & 0xFFFFFFF8) != 0x10
    || (*(_DWORD *)(v17 + 24 * (v18 + *(unsigned __int16 *)(*(void *)a3 + 24)) + 4) & 0xFFFFFFF8) != 0x20)
  {
    goto LABEL_15;
  }
  uint64_t v19 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
  unint64_t v20 = (uint64_t *)((v19 & 0x80000000) != 0
                  ? *(void *)(v12 + 24) + 16 * (v19 & 0x7FFFFFFF) + 8
                  : *(void *)(v12 + 272) + 8 * v19);
  uint64_t v21 = *v20;
  if (!*v20) {
    goto LABEL_15;
  }
  while ((*(unsigned char *)(v21 + 3) & 1) != 0)
  {
    uint64_t v21 = *(void *)(v21 + 24);
    if (!v21) {
      goto LABEL_15;
    }
  }
  uint64_t v52 = *(void *)(v21 + 8);
LABEL_79:
  if ((~*(_DWORD *)(*(void *)(v52 + 16) + 16) & 0x800200) == 0)
  {
    BOOL v53 = *(llvm::MachineBasicBlock **)(v52 + 24);
    unint64_t FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(v53);
    if ((llvm::MachineBasicBlock *)((char *)v53 + 48) != (llvm::MachineBasicBlock *)FirstTerminator
      && **(_WORD **)(FirstTerminator + 16) == 303)
    {
      return 0;
    }
  }
  uint64_t v55 = *(void *)(v21 + 8);
  while (1)
  {
    uint64_t v21 = *(void *)(v21 + 24);
    if (!v21) {
      break;
    }
    if ((*(unsigned char *)(v21 + 3) & 1) == 0)
    {
      uint64_t v52 = *(void *)(v21 + 8);
      if (v52 != v55) {
        goto LABEL_79;
      }
    }
  }
LABEL_15:
  uint64_t v22 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
  unsigned int v103 = (char *)v107;
  int v104 = (char *)v107;
  uint64_t v105 = 8;
  LODWORD(v106) = 0;
  if ((v22 & 0x80000000) != 0) {
    unint64_t v23 = (uint64_t *)(*(void *)(v12 + 24) + 16 * (v22 & 0x7FFFFFFF) + 8);
  }
  else {
    unint64_t v23 = (uint64_t *)(*(void *)(v12 + 272) + 8 * v22);
  }
  uint64_t v24 = *v23;
  if (!*v23)
  {
LABEL_91:
    uint64_t v58 = 1;
    goto LABEL_92;
  }
  while ((*(unsigned char *)(v24 + 3) & 1) != 0)
  {
    uint64_t v24 = *(void *)(v24 + 24);
    if (!v24) {
      goto LABEL_91;
    }
  }
  uint64_t v25 = *(void *)(v24 + 8);
  unsigned int v26 = 8;
LABEL_22:
  if (sub_1CBC03F78(v25))
  {
    uint64_t v27 = *(void *)(v25 + 24);
    int v28 = v104;
    uint64_t v29 = HIDWORD(v105);
    if (v104 == v103)
    {
      if (HIDWORD(v105))
      {
        uint64_t v30 = 0;
        uint64_t v31 = 8 * HIDWORD(v105);
        unsigned int v32 = v104;
        while (*(void *)v32 != v27)
        {
          if (*(void *)v32 == -2) {
            uint64_t v30 = v32;
          }
          v32 += 8;
          v31 -= 8;
          if (!v31)
          {
            if (!v30) {
              goto LABEL_31;
            }
            *(void *)uint64_t v30 = v27;
            LODWORD(v106) = v106 - 1;
            goto LABEL_54;
          }
        }
        goto LABEL_54;
      }
LABEL_31:
      if (HIDWORD(v105) < v26)
      {
        ++HIDWORD(v105);
        *(void *)&v104[8 * v29] = v27;
        goto LABEL_54;
      }
    }
    if (3 * v26 <= 4 * (HIDWORD(v105) - (int)v106))
    {
      if (v26 >= 0x40) {
        v26 *= 2;
      }
      else {
        unsigned int v26 = 128;
      }
    }
    else if (v26 - HIDWORD(v105) >= v26 >> 3)
    {
      goto LABEL_35;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v103, v26);
    unsigned int v26 = v105;
    int v28 = v104;
LABEL_35:
    unsigned int v33 = v26 - 1;
    unsigned int v34 = (v26 - 1) & ((v27 >> 4) ^ (v27 >> 9));
    unsigned int v35 = &v28[8 * v34];
    uint64_t v36 = *(void *)v35;
    if (*(void *)v35 == -1)
    {
      unint64_t v37 = 0;
LABEL_47:
      if (v37) {
        uint64_t v41 = v37;
      }
      else {
        uint64_t v41 = v35;
      }
      if (*(void *)v41 != v27)
      {
        if (*(void *)v41 == -2) {
          LODWORD(v106) = v106 - 1;
        }
        else {
          ++HIDWORD(v105);
        }
        *(void *)uint64_t v41 = v27;
      }
    }
    else
    {
      unint64_t v37 = 0;
      int v38 = 1;
      while (v36 != v27)
      {
        if (v37) {
          BOOL v39 = 0;
        }
        else {
          BOOL v39 = v36 == -2;
        }
        if (v39) {
          unint64_t v37 = v35;
        }
        unsigned int v40 = v34 + v38++;
        unsigned int v34 = v40 & v33;
        unsigned int v35 = &v28[8 * (v40 & v33)];
        uint64_t v36 = *(void *)v35;
        if (*(void *)v35 == -1) {
          goto LABEL_47;
        }
      }
    }
  }
LABEL_54:
  uint64_t v42 = *(void *)(v24 + 8);
  while (1)
  {
    uint64_t v24 = *(void *)(v24 + 24);
    if (!v24) {
      break;
    }
    if ((*(unsigned char *)(v24 + 3) & 1) == 0)
    {
      uint64_t v25 = *(void *)(v24 + 8);
      if (v25 != v42) {
        goto LABEL_22;
      }
    }
  }
  int v43 = HIDWORD(v105);
  if (HIDWORD(v105) == v106) {
    goto LABEL_91;
  }
  if (*(void *)(a3 + 24) <= 1uLL) {
    unint64_t v44 = 1;
  }
  else {
    unint64_t v44 = *(void *)(a3 + 24);
  }
  unint64_t v45 = a5[3];
  if (v45 <= 1) {
    unint64_t v46 = 1;
  }
  else {
    unint64_t v46 = a5[3];
  }
  int v47 = *(unsigned int **)(a2 + 32);
  unint64_t v48 = ((unint64_t)v47[8] >> 8) & 0xFFF;
  if (v48) {
    unint64_t v44 = *(void *)(*(void *)(v13 + 232) + 8 * v48);
  }
  unint64_t v49 = ((unint64_t)*v47 >> 8) & 0xFFF;
  if (v49) {
    unint64_t v46 = *(void *)(*(void *)(v13 + 232) + 8 * v49);
  }
  uint64_t v50 = v47[9];
  unsigned int v51 = (int **)((v50 & 0x80000000) != 0
               ? *(void *)(v12 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8
               : *(void *)(v12 + 272) + 8 * v50);
  uint64_t v56 = *v51;
  if (!*v51) {
    goto LABEL_91;
  }
  while (1)
  {
    unsigned int v57 = *v56;
    if ((*v56 & 0x1000000) == 0) {
      break;
    }
    uint64_t v56 = (int *)*((void *)v56 + 3);
    if (!v56) {
      goto LABEL_91;
    }
  }
  uint64_t v102 = (v45 << __clz(__rbit64(v44)) >> __clz(__rbit64(v46)));
  uint64_t v61 = v103;
  uint64_t v60 = v104;
  int v62 = v105;
  int v101 = v105 - 1;
  uint64_t v100 = &v104[8 * v105];
  uint64_t v63 = &v104[8 * HIDWORD(v105)];
  uint64_t v64 = 8 * HIDWORD(v105);
LABEL_96:
  uint64_t v65 = *((void *)v56 + 1);
  if (!sub_1CBC03F78(v65)) {
    goto LABEL_131;
  }
  uint64_t v66 = *(void *)(v65 + 24);
  if (v60 == v61)
  {
    uint64_t v67 = v60;
    uint64_t v68 = v63;
    if (v43)
    {
      uint64_t v69 = 0;
      while (*(void *)&v60[v69] != v66)
      {
        v69 += 8;
        if (v64 == v69)
        {
          uint64_t v67 = v60;
          uint64_t v68 = v63;
          goto LABEL_123;
        }
      }
      uint64_t v68 = &v60[v69];
      uint64_t v67 = v60;
    }
  }
  else
  {
    unsigned int v70 = v101 & ((v66 >> 4) ^ (v66 >> 9));
    uint64_t v68 = &v60[8 * v70];
    uint64_t v71 = *(void *)v68;
    if (*(void *)v68 == -1)
    {
      unint64_t v72 = 0;
LABEL_117:
      if (v72) {
        uint64_t v68 = v72;
      }
      uint64_t v76 = *(void *)v68;
    }
    else
    {
      unint64_t v72 = 0;
      int v73 = 1;
      while (v71 != v66)
      {
        if (v72) {
          BOOL v74 = 0;
        }
        else {
          BOOL v74 = v71 == -2;
        }
        if (v74) {
          unint64_t v72 = v68;
        }
        unsigned int v75 = v70 + v73++;
        unsigned int v70 = v75 & v101;
        uint64_t v68 = &v60[8 * (v75 & v101)];
        uint64_t v71 = *(void *)v68;
        if (*(void *)v68 == -1) {
          goto LABEL_117;
        }
      }
      uint64_t v76 = *(void *)(v65 + 24);
    }
    if (v76 != v66) {
      uint64_t v68 = v100;
    }
    uint64_t v67 = v61;
  }
LABEL_123:
  if (v60 == v67) {
    int v77 = v43;
  }
  else {
    int v77 = v62;
  }
  if (v68 == &v60[8 * v77] || (v102 & *(void *)(*(void *)(v13 + 232) + 8 * ((v57 >> 8) & 0xFFF))) == 0)
  {
LABEL_131:
    while (1)
    {
      uint64_t v56 = (int *)*((void *)v56 + 3);
      if (!v56) {
        goto LABEL_91;
      }
      unsigned int v57 = *v56;
      if ((*v56 & 0x1000000) == 0) {
        goto LABEL_96;
      }
    }
  }
  uint64_t v58 = 0;
LABEL_92:
  if (v104 != v103) {
    free(v104);
  }
  return v58;
}

BOOL sub_1CBC03F78(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 16);
  int v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0) {
    return 0;
  }
  uint64_t v5 = *((void *)v1 + 1);
  if ((v5 & 0x10) != 0) {
    return 0;
  }
  uint64_t v6 = *((void *)v1 + 2);
  if (v6) {
    return 0;
  }
  uint64_t v7 = a1;
  uint64_t v8 = sub_1CBE52E8C(*v1);
  if ((v8 & 0xFF00000000) != 0)
  {
    BOOL v9 = (v8 - 64) > 0x3A || ((1 << (v8 - 64)) & 0x60001F460000001) == 0;
    if (!v9 || ((v8 - 147) <= 0x14 ? (BOOL v10 = ((1 << (v8 + 109)) & 0x1E0001) == 0) : (BOOL v10 = 1), !v10))
    {
      if ((v2 - 1) > 1 || (uint64_t v15 = *(void *)(*(void *)(v7 + 32) + 48), (v15 & 8) == 0))
      {
        __int16 v14 = *(_WORD *)(v7 + 44);
        if ((v14 & 0xC) != 0 && (v14 & 4) == 0)
        {
          if ((v5 & 0x80000) == 0)
          {
            uint64_t v16 = v7;
            while ((*(_WORD *)(v16 + 44) & 8) != 0)
            {
              uint64_t v16 = *(void *)(v16 + 8);
              if ((*(unsigned char *)(*(void *)(v16 + 16) + 10) & 8) != 0) {
                goto LABEL_37;
              }
            }
            goto LABEL_21;
          }
        }
        else if ((v5 & 0x80000) == 0)
        {
          goto LABEL_21;
        }
LABEL_37:
        if ((v2 - 1) > 1)
        {
          if ((v14 & 0xC) == 0) {
            goto LABEL_40;
          }
          goto LABEL_39;
        }
        uint64_t v15 = *(void *)(*(void *)(v7 + 32) + 48);
      }
      if ((v15 & 0x10) == 0)
      {
        __int16 v14 = *(_WORD *)(v7 + 44);
        if ((v14 & 0xC) == 0)
        {
LABEL_40:
          if ((v5 & 0x100000) == 0) {
            return 1;
          }
          goto LABEL_21;
        }
LABEL_39:
        if ((v14 & 4) == 0)
        {
          if ((v5 & 0x100000) == 0)
          {
            while ((*(_WORD *)(v7 + 44) & 8) != 0)
            {
              uint64_t v7 = *(void *)(v7 + 8);
              if ((*(unsigned char *)(*(void *)(v7 + 16) + 10) & 0x10) != 0) {
                goto LABEL_21;
              }
            }
            return 1;
          }
          goto LABEL_21;
        }
        goto LABEL_40;
      }
    }
  }
LABEL_21:
  BOOL v12 = (v8 & 0xFF00000000) != 0 && (v8 - 79) < 2;
  BOOL result = 1;
  if ((~v6 & 0x800200) != 0) {
    return v12 || (~v6 & 0x800100) == 0;
  }
  return result;
}

BOOL sub_1CBC0412C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  if (a2 == a4)
  {
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = 0;
    if (a2 && a4)
    {
      uint64_t v8 = *(void *)(a1 + 240);
      unint64_t v9 = (unint64_t)(*(void *)(a1 + 248) - v8) >> 3;
      if (v9)
      {
        unsigned int v10 = 0;
        uint64_t v11 = *(_DWORD **)(a4 + 8);
        for (unint64_t i = *(_DWORD **)(a2 + 8); ; ++i)
        {
          unsigned int v13 = *v11 & *i;
          if (v13) {
            break;
          }
          uint64_t v5 = 0;
          ++v11;
          v10 += 32;
          if (v10 >= v9) {
            return a3 == a5 && v5 != 0;
          }
        }
        uint64_t v5 = *(void *)(v8 + 8 * (__clz(__rbit32(v13)) + v10));
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
  }
  return a3 == a5 && v5 != 0;
}

BOOL sub_1CBC041BC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    unsigned int v4 = 0;
    uint64_t v5 = 24 * v3;
    uint64_t v6 = (void *)(*(void *)a3 + 8);
    do
    {
      unsigned int v4 = ((*v6 >> 1) & 3 | *(_DWORD *)((*v6 & 0xFFFFFFFFFFFFFFF8) + 24))
         + v4
         - ((*(v6 - 1) >> 1) & 3 | *(_DWORD *)((*(v6 - 1) & 0xFFFFFFFFFFFFFFF8) + 24));
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  else
  {
    unsigned int v4 = 0;
  }
  return v4 < dword_1EBCC1808;
}

void sub_1CBC04230(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 48)) {
    *(void *)(a2 + 48) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
  }
}

void sub_1CBC04294(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 48)) {
    *(void *)(a2 + 48) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a2 + 8) + 216))(*(void *)(a2 + 8), a2 + 128, a2);
  }
}

uint64_t sub_1CBC042F8()
{
  return 1;
}

uint64_t sub_1CBC04300(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CBC04308()
{
  return 1;
}

uint64_t sub_1CBC04310()
{
  return 0;
}

uint64_t sub_1CBC04318()
{
  return 1;
}

void sub_1CBC04320(llvm::MachineFunction *a1, llvm::MachineInstr *a2, llvm::MachineFunction **a3, unsigned int a4, unsigned int a5)
{
  unint64_t v9 = (uint64_t *)((char *)a2 + 48);
  unint64_t v8 = *((void *)a2 + 6);
  if (v8 >= 8)
  {
    if ((v8 & 7) != 0)
    {
      unsigned int v10 = (int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      if ((*((void *)a2 + 6) & 7) != 3 || v10 == 0) {
        goto LABEL_12;
      }
      uint64_t v13 = *v10;
      unint64_t v9 = (uint64_t *)(v10 + 2);
      uint64_t v12 = v13;
      if (!v13) {
        goto LABEL_12;
      }
      __int16 v14 = &v9[v12];
    }
    else
    {
      *((void *)a2 + 6) = v8 & 0xFFFFFFFFFFFFFFF8;
      __int16 v14 = (uint64_t *)((char *)a2 + 56);
    }
    uint64_t v15 = a5 >> 3;
    unint64_t v16 = ((unint64_t)(a4 >> 3) << 6) | 1;
    do
    {
      uint64_t v17 = *v9++;
      unint64_t MachineMemOperand = (llvm::MachineMemOperand *)llvm::MachineFunction::getMachineMemOperand((uint64_t)a1, v17, v15, v16);
      llvm::MachineInstr::addMemOperand(a3[1], *a3, MachineMemOperand);
    }
    while (v9 != v14);
  }
LABEL_12:
  uint64_t v19 = a3[1];

  llvm::MachineInstr::copyImplicitOps(v19, a1, a2);
}

void sub_1CBC043F8(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, char a9)
{
  unint64_t v16 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v17 = *(void *)(a2 + 24);
  int v18 = *(llvm::MachineFunction **)(v17 + 32);
  if (*v16 - 1 <= 1 && (*(unsigned char *)(*(void *)(a2 + 32) + 48) & 0x10) != 0) {
    goto LABEL_95;
  }
  unint64_t v19 = *((void *)v16 + 1);
  if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
  {
    if ((v19 & 0x100000) != 0)
    {
LABEL_95:
      LODWORD(v21) = 1;
      goto LABEL_7;
    }
    uint64_t v91 = a2;
    do
    {
      unsigned int v92 = *(unsigned __int16 *)(v91 + 44);
      LODWORD(v21) = (v92 >> 3) & 1;
      if ((v92 & 8) == 0) {
        break;
      }
      uint64_t v91 = *(void *)(v91 + 8);
    }
    while ((*(unsigned char *)(*(void *)(v91 + 16) + 10) & 0x10) == 0);
  }
  else
  {
    uint64_t v21 = (v19 >> 20) & 1;
  }
LABEL_7:
  uint64_t v106 = *((void *)v18 + 5);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1868, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1868))
  {
    byte_1EBCC184A = 1;
    __cxa_guard_release(&qword_1EBCC1868);
  }
  if (!a4 || !byte_1EBCC184A) {
    goto LABEL_13;
  }
  int v22 = (1 << (a8 >> 4)) & a4;
  if (a6 != 16) {
    v22 |= (2 << (a8 >> 4)) & a4;
  }
  if (v22)
  {
LABEL_13:
    long long v109 = 0uLL;
    if (v21)
    {
      uint64_t v23 = 27120;
      if (a6 == 32) {
        uint64_t v23 = 26928;
      }
      uint64_t v24 = *(void *)(*(void *)(a2 + 32) + 16);
      uint64_t v25 = *(void *)(a1 + 8) + v23;
      unsigned int v26 = *(llvm::MachineFunction **)(v17 + 32);
      uint64_t v107 = 0;
      uint64_t v27 = llvm::MachineFunction::CreateMachineInstr(v26, v25, &v107, 0);
      if (!v107) {
        goto LABEL_17;
      }
      int v93 = *v107;
      if ((v93 - 4) > 0x1E)
      {
        if ((v93 - 3) >= 0xFFFFFFFE) {
          uint64_t v102 = v107;
        }
        else {
          uint64_t v102 = 0;
        }
        if ((v93 - 3) < 0xFFFFFFFE)
        {
          if (v93 == 3) {
            *((void *)v107 + 1) = 0;
          }
          goto LABEL_17;
        }
        unint64_t v95 = (unint64_t)(v102 + 8);
      }
      else
      {
        if ((v107[1] & 0x7F) != 2 && !*((_DWORD *)v107 + 3)) {
          goto LABEL_17;
        }
        uint64_t v94 = *((void *)v107 + 2);
        if ((v94 & 4) == 0) {
          goto LABEL_17;
        }
        unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFF8;
        if (!v95) {
          goto LABEL_17;
        }
      }
      int v110 = &v107;
      sub_1CC5FA668(v95 + 16, &v110);
LABEL_17:
      uint64_t v28 = *(void *)(v17 + 40);
      *((void *)v27 + 3) = v28;
      uint64_t v29 = *(void *)(v28 + 32);
      uint64_t v30 = *((unsigned int *)v27 + 10);
      if (v30)
      {
        uint64_t v70 = *((void *)v27 + 4);
        uint64_t v71 = *(void *)(v29 + 40);
        uint64_t v72 = 32 * v30;
        do
        {
          if (!*(unsigned char *)v70)
          {
            uint64_t v73 = *(unsigned int *)(v70 + 4);
            if ((int)v73 >= 0) {
              BOOL v74 = (uint64_t *)(*(void *)(v71 + 272) + 8 * v73);
            }
            else {
              BOOL v74 = (uint64_t *)(*(void *)(v71 + 24) + 16 * (v73 & 0x7FFFFFFF) + 8);
            }
            uint64_t v75 = *v74;
            if (*v74)
            {
              uint64_t v76 = *(void *)(v75 + 16);
              *(void *)(v75 + 16) = v70;
              *(void *)(v70 + 16) = v76;
              if (*(unsigned char *)(v70 + 3))
              {
                *(void *)(v70 + 24) = v75;
              }
              else
              {
                *(void *)(v70 + 24) = 0;
                BOOL v74 = (uint64_t *)(v76 + 24);
              }
            }
            else
            {
              *(void *)(v70 + 16) = v70;
              *(void *)(v70 + 24) = 0;
            }
            *BOOL v74 = v70;
          }
          v70 += 32;
          v72 -= 32;
        }
        while (v72);
      }
      uint64_t v31 = *(void *)(v29 + 728);
      if (v31) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v31 + 24))(v31, v27);
      }
      unint64_t v32 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v27 = v32 | *(void *)v27 & 7;
      *((void *)v27 + 1) = a2;
      *(void *)(v32 + 8) = v27;
      *(void *)a2 = *(void *)a2 & 7 | (unint64_t)v27;
      uint64_t v107 = (unsigned __int8 *)v26;
      uint64_t v108 = v27;
      LODWORD(v110) = 1;
      uint64_t v111 = 0;
      uint64_t v112 = a7;
      llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v110);
      LODWORD(v110) = 1;
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v110);
      LODWORD(v110) = 1;
      uint64_t v111 = 0;
      uint64_t v112 = v24 & 0x20000;
      llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v110);
      if (a5 - 1 > 0x3FFFFFFE) {
        unsigned int v33 = 0;
      }
      else {
        unsigned int v33 = (((*(void *)(*(void *)(v106 + 352) + 8 * (a5 >> 6)) >> a5) & 1) == 0) << 9;
      }
      int v47 = sub_1CB89517C((llvm::MachineFunction **)&v107, a5, v33, 0);
      unint64_t v48 = v47[1];
      unint64_t v49 = *v47;
      LODWORD(v110) = 1;
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      llvm::MachineInstr::addOperand(v48, v49, (const llvm::MachineOperand *)&v110);
      long long v109 = *(_OWORD *)v47;
      unsigned int v50 = 4;
      if (a3 - 1 <= 0x3FFFFFFE)
      {
        if ((*(void *)(*(void *)(v106 + 352) + 8 * (a3 >> 6)) >> a3)) {
          unsigned int v50 = 4;
        }
        else {
          unsigned int v50 = 516;
        }
      }
      sub_1CB89517C((llvm::MachineFunction **)&v109, a3, v50, 0);
LABEL_51:
      sub_1CBC04320(v18, (llvm::MachineInstr *)a2, (llvm::MachineFunction **)&v109, a6, a8);
      return;
    }
    if (a9)
    {
      uint64_t v34 = 24864;
      if (a6 == 32) {
        uint64_t v34 = 24816;
      }
      uint64_t v35 = *(void *)(a1 + 8) + v34;
      uint64_t v36 = *(llvm::MachineFunction **)(v17 + 32);
      uint64_t v107 = 0;
      unint64_t v37 = llvm::MachineFunction::CreateMachineInstr(v36, v35, &v107, 0);
      if (!v107) {
        goto LABEL_26;
      }
      int v96 = *v107;
      if ((v96 - 4) > 0x1E)
      {
        if ((v96 - 3) >= 0xFFFFFFFE) {
          unsigned int v103 = v107;
        }
        else {
          unsigned int v103 = 0;
        }
        if ((v96 - 3) < 0xFFFFFFFE)
        {
          if (v96 == 3) {
            *((void *)v107 + 1) = 0;
          }
          goto LABEL_26;
        }
        unint64_t v98 = (unint64_t)(v103 + 8);
      }
      else
      {
        if ((v107[1] & 0x7F) != 2 && !*((_DWORD *)v107 + 3)) {
          goto LABEL_26;
        }
        uint64_t v97 = *((void *)v107 + 2);
        if ((v97 & 4) == 0) {
          goto LABEL_26;
        }
        unint64_t v98 = v97 & 0xFFFFFFFFFFFFFFF8;
        if (!v98) {
          goto LABEL_26;
        }
      }
      int v110 = &v107;
      sub_1CC5FA668(v98 + 16, &v110);
LABEL_26:
      uint64_t v38 = *(void *)(v17 + 40);
      *((void *)v37 + 3) = v38;
      uint64_t v39 = *(void *)(v38 + 32);
      uint64_t v40 = *((unsigned int *)v37 + 10);
      if (v40)
      {
        uint64_t v77 = *((void *)v37 + 4);
        uint64_t v78 = *(void *)(v39 + 40);
        uint64_t v79 = 32 * v40;
        do
        {
          if (!*(unsigned char *)v77)
          {
            uint64_t v80 = *(unsigned int *)(v77 + 4);
            if ((int)v80 >= 0) {
              BOOL v81 = (uint64_t *)(*(void *)(v78 + 272) + 8 * v80);
            }
            else {
              BOOL v81 = (uint64_t *)(*(void *)(v78 + 24) + 16 * (v80 & 0x7FFFFFFF) + 8);
            }
            uint64_t v82 = *v81;
            if (*v81)
            {
              uint64_t v83 = *(void *)(v82 + 16);
              *(void *)(v82 + 16) = v77;
              *(void *)(v77 + 16) = v83;
              if (*(unsigned char *)(v77 + 3))
              {
                *(void *)(v77 + 24) = v82;
              }
              else
              {
                *(void *)(v77 + 24) = 0;
                BOOL v81 = (uint64_t *)(v83 + 24);
              }
            }
            else
            {
              *(void *)(v77 + 16) = v77;
              *(void *)(v77 + 24) = 0;
            }
            *BOOL v81 = v77;
          }
          v77 += 32;
          v79 -= 32;
        }
        while (v79);
      }
      uint64_t v41 = *(void *)(v39 + 728);
      if (v41) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v41 + 24))(v41, v37);
      }
      unint64_t v42 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v37 = v42 | *(void *)v37 & 7;
      *((void *)v37 + 1) = a2;
      *(void *)(v42 + 8) = v37;
      *(void *)a2 = *(void *)a2 & 7 | (unint64_t)v37;
      uint64_t v107 = (unsigned __int8 *)v36;
      uint64_t v108 = v37;
      unsigned int v43 = 2;
      if (a5 - 1 <= 0x3FFFFFFE)
      {
        if ((*(void *)(*(void *)(v106 + 352) + 8 * (a5 >> 6)) >> a5)) {
          unsigned int v43 = 2;
        }
        else {
          unsigned int v43 = 514;
        }
      }
      unint64_t v44 = sub_1CB89517C((llvm::MachineFunction **)&v107, a5, v43, 0);
      unint64_t v45 = *v44;
      unint64_t v46 = v44[1];
      LODWORD(v110) = 1;
      uint64_t v111 = 0;
      uint64_t v112 = 0;
      llvm::MachineInstr::addOperand(v46, v45, (const llvm::MachineOperand *)&v110);
      return;
    }
    uint64_t v51 = 322752;
    if (a6 == 32) {
      uint64_t v51 = 322704;
    }
    uint64_t v52 = *(void *)(a1 + 8) + v51;
    BOOL v53 = *(llvm::MachineFunction **)(v17 + 32);
    uint64_t v107 = 0;
    uint64_t v54 = llvm::MachineFunction::CreateMachineInstr(v53, v52, &v107, 0);
    if (v107)
    {
      int v99 = *v107;
      if ((v99 - 4) > 0x1E)
      {
        if ((v99 - 3) >= 0xFFFFFFFE) {
          int v104 = v107;
        }
        else {
          int v104 = 0;
        }
        if ((v99 - 3) < 0xFFFFFFFE)
        {
          if (v99 == 3) {
            *((void *)v107 + 1) = 0;
          }
          goto LABEL_43;
        }
        unint64_t v101 = (unint64_t)(v104 + 8);
      }
      else
      {
        if ((v107[1] & 0x7F) != 2 && !*((_DWORD *)v107 + 3)) {
          goto LABEL_43;
        }
        uint64_t v100 = *((void *)v107 + 2);
        if ((v100 & 4) == 0) {
          goto LABEL_43;
        }
        unint64_t v101 = v100 & 0xFFFFFFFFFFFFFFF8;
        if (!v101) {
          goto LABEL_43;
        }
      }
      int v110 = &v107;
      sub_1CC5FA668(v101 + 16, &v110);
    }
LABEL_43:
    uint64_t v55 = *(void *)(v17 + 40);
    *((void *)v54 + 3) = v55;
    uint64_t v56 = *(void *)(v55 + 32);
    uint64_t v57 = *((unsigned int *)v54 + 10);
    if (v57)
    {
      uint64_t v84 = *((void *)v54 + 4);
      uint64_t v85 = *(void *)(v56 + 40);
      uint64_t v86 = 32 * v57;
      do
      {
        if (!*(unsigned char *)v84)
        {
          uint64_t v87 = *(unsigned int *)(v84 + 4);
          if ((int)v87 >= 0) {
            unsigned int v88 = (uint64_t *)(*(void *)(v85 + 272) + 8 * v87);
          }
          else {
            unsigned int v88 = (uint64_t *)(*(void *)(v85 + 24) + 16 * (v87 & 0x7FFFFFFF) + 8);
          }
          uint64_t v89 = *v88;
          if (*v88)
          {
            uint64_t v90 = *(void *)(v89 + 16);
            *(void *)(v89 + 16) = v84;
            *(void *)(v84 + 16) = v90;
            if (*(unsigned char *)(v84 + 3))
            {
              *(void *)(v84 + 24) = v89;
            }
            else
            {
              *(void *)(v84 + 24) = 0;
              unsigned int v88 = (uint64_t *)(v90 + 24);
            }
          }
          else
          {
            *(void *)(v84 + 16) = v84;
            *(void *)(v84 + 24) = 0;
          }
          *unsigned int v88 = v84;
        }
        v84 += 32;
        v86 -= 32;
      }
      while (v86);
    }
    uint64_t v58 = *(void *)(v56 + 728);
    if (v58) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v58 + 24))(v58, v54);
    }
    unint64_t v59 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v54 = v59 | *(void *)v54 & 7;
    *((void *)v54 + 1) = a2;
    *(void *)(v59 + 8) = v54;
    *(void *)a2 = *(void *)a2 & 7 | (unint64_t)v54;
    uint64_t v107 = (unsigned __int8 *)v53;
    uint64_t v108 = v54;
    unsigned int v60 = 2;
    if (a5 - 1 <= 0x3FFFFFFE)
    {
      if ((*(void *)(*(void *)(v106 + 352) + 8 * (a5 >> 6)) >> a5)) {
        unsigned int v60 = 2;
      }
      else {
        unsigned int v60 = 514;
      }
    }
    uint64_t v61 = sub_1CB89517C((llvm::MachineFunction **)&v107, a5, v60, 0);
    int v62 = v61[1];
    uint64_t v63 = *v61;
    LODWORD(v110) = 1;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    llvm::MachineInstr::addOperand(v62, v63, (const llvm::MachineOperand *)&v110);
    uint64_t v65 = *v61;
    uint64_t v64 = v61[1];
    LODWORD(v110) = 1;
    uint64_t v111 = 0;
    uint64_t v112 = a7;
    llvm::MachineInstr::addOperand(v64, v65, (const llvm::MachineOperand *)&v110);
    uint64_t v67 = *v61;
    uint64_t v66 = v61[1];
    LODWORD(v110) = 1;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    llvm::MachineInstr::addOperand(v66, v67, (const llvm::MachineOperand *)&v110);
    uint64_t v69 = *v61;
    uint64_t v68 = v61[1];
    LODWORD(v110) = 1;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    llvm::MachineInstr::addOperand(v68, v69, (const llvm::MachineOperand *)&v110);
    long long v109 = *(_OWORD *)v61;
    goto LABEL_51;
  }
}

_DWORD *sub_1CBC04C8C(_DWORD *result, int a2)
{
  int v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    BOOL result = operator new(32 * v4, (std::align_val_t)8uLL);
    *(void *)int v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 32 * v5;
      do
      {
        *(void *)BOOL result = -4096;
        result += 8;
        v6 -= 32;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)BOOL result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_DWORD *sub_1CBC04D20(_DWORD *result)
{
  int v1 = result;
  uint64_t v2 = result[4];
  int v3 = result[2];
  int v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64) {
    int v4 = 64;
  }
  if (v3) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v5 == v2)
  {
    *((void *)result + 1) = 0;
    if (v2)
    {
      uint64_t v6 = *(_DWORD **)result;
      uint64_t v7 = 16 * v2;
      do
      {
        *uint64_t v6 = -1;
        v6 += 4;
        v7 -= 16;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1D25D9CD0](*(void *)result, 8);
    return sub_1CBC04DCC(v1, v5);
  }
  return result;
}

_DWORD *sub_1CBC04DCC(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    BOOL result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 16 * v5;
      do
      {
        *BOOL result = -1;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)BOOL result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_DWORD *sub_1CBC04E60(_DWORD *result, int a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    unint64_t v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    BOOL result = operator new(24 * v4, (std::align_val_t)8uLL);
    *(void *)uint64_t v2 = result;
    *((void *)v2 + 1) = 0;
    uint64_t v5 = v2[4];
    if (v5)
    {
      uint64_t v6 = 24 * v5;
      do
      {
        *(void *)BOOL result = -4096;
        result += 6;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    *(void *)BOOL result = 0;
    *((void *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1CBC04EFC(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_15;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (v4 - 1) & (37 * a2);
  uint64_t v7 = (_DWORD *)(v3 + 4 * v6);
  int v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    uint64_t result = 1;
  }
  else
  {
    unint64_t v9 = 0;
    int v10 = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v8 == -2;
      }
      if (v11) {
        unint64_t v9 = v7;
      }
      unsigned int v12 = v6 + v10++;
      unsigned int v6 = v12 & v5;
      uint64_t v7 = (_DWORD *)(v3 + 4 * (v12 & v5));
      int v8 = *v7;
      if (*v7 == a2) {
        goto LABEL_12;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1CBC04FA0(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    BOOL v11 = *(int **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CBC05118(a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  unsigned int v6 = v14;
  for (uint64_t i = 8; i != 40; i += 4)
  {
    unsigned int v8 = *(_DWORD *)(a1 + i);
    if (v8 <= 0xFFFFFFFD) {
      *v6++ = v8;
    }
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CBC05118(a1, v14, v6);
}

uint64_t sub_1CBC05118(uint64_t result, int *a2, int *a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    unsigned int v8 = (void *)(result + 8);
    size_t v9 = 32;
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_8;
    }
    unsigned int v8 = *(void **)(result + 8);
    size_t v9 = 4 * v7;
  }
  uint64_t result = (uint64_t)memset(v8, 255, v9);
LABEL_8:
  while (a2 != a3)
  {
    int v10 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      BOOL v11 = 0;
      uint64_t result = sub_1CBC04EFC((uint64_t)v5, v10, &v11);
      *BOOL v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1CBC051C8()
{
  int v4 = 1;
  *(void *)&long long v3 = "Consider any live-interval with a size bigger than this number as being too expensive to break down i"
                   "n region splitting. This is to avoid high compile time. The size of a live-range is the cumulative di"
                   "stance covered by a live-interval in terms of SlotIndex.";
  *((void *)&v3 + 1) = 258;
  int v1 = 320000;
  uint64_t v2 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCC1788, "agx3-huge-life-span", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC1788, &dword_1CB82C000);
}

void sub_1CBC0525C(uint64_t a1)
{
}

uint64_t sub_1CBC05310(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC1948;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25FAD60;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC1950, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBC0525C;
    v5[1] = &PassRegistry;
    int v4 = v5;
    std::__call_once(&qword_1EBCC1950, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBC05408()
{
}

void sub_1CBC05444(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  long long v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC054F8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  long long v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBC055A4()
{
  return "AGX3 rematerialize pass";
}

void sub_1CBC055B4(llvm::PassRegistry *a1, uint64_t a2)
{
  uint64_t v4 = a2 + 112;
  v6[0] = &unk_1F2617E40;
  v6[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v6);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1CB843600(a2, v4, (uint64_t)&llvm::SlotIndexes::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBC056B0(void *a1, void *a2)
{
  v453[128] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  a1[31] = v4;
  a1[32] = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 104))(v4);
  a1[33] = (*(uint64_t (**)(void))(*(void *)a1[31] + 176))(a1[31]);
  uint64_t v389 = a2;
  a1[34] = a2[5];
  int v5 = (uint64_t *)a1[1];
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_4:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::LiveIntervals::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  a1[35] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::LiveIntervals::ID);
  size_t v9 = (uint64_t *)a1[1];
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  if (v10 == v11)
  {
LABEL_9:
    uint64_t v12 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v10 != &llvm::MachineDominatorTree::ID)
    {
      v10 += 16;
      if (v10 == v11) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = *(void *)(v10 + 8);
  }
  a1[36] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v12 + 96))(v12, &llvm::MachineDominatorTree::ID);
  uint64_t v13 = (uint64_t *)a1[1];
  uint64_t v14 = *v13;
  uint64_t v15 = v13[1];
  if (v14 == v15)
  {
LABEL_14:
    uint64_t v16 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v14 != &llvm::MachineLoopInfo::ID)
    {
      v14 += 16;
      if (v14 == v15) {
        goto LABEL_14;
      }
    }
    uint64_t v16 = *(void *)(v14 + 8);
  }
  a1[37] = (*(uint64_t (**)(uint64_t, void *))(*(void *)v16 + 96))(v16, &llvm::MachineLoopInfo::ID);
  a1[38] = *(void *)(a1[31] + 160);
  unint64_t v17 = *(unsigned int *)(a1[34] + 32);
  unsigned int v402 = dword_1EBCC1908;
  unsigned int v424 = 32;
  unsigned int v403 = v17;
  unint64_t v423 = v17;
  llvm::APInt::sqrt(&v423, (uint64_t)&v421);
  if (v422 > 0x40)
  {
    int v19 = 0;
    int64_t v20 = ((unint64_t)v422 + 63) >> 6;
    do
    {
      BOOL v21 = v20-- < 1;
      if (v21) {
        break;
      }
      unint64_t v22 = *(void *)(v421 + 8 * v20);
      v19 += __clz(v22);
    }
    while (!v22);
    unsigned int v23 = v422 | 0xFFFFFFC0;
    if ((v422 & 0x3F) == 0) {
      unsigned int v23 = 0;
    }
    int v18 = v19 + v23;
  }
  else
  {
    int v18 = v422 + __clz(v421) - 64;
  }
  unsigned int v420 = 32;
  unint64_t v419 = v422 + ~v18;
  llvm::APInt::operator*((uint64_t)&v419, &v421, (uint64_t)&v448);
  unint64_t v419 = v448;
  unsigned int v420 = v449;
  uint64_t v448 = 1;
  for (uint64_t i = 8; i != 520; i += 16)
    *(uint64_t *)((char *)&v448 + i) = -4096;
  uint64_t v451 = v453;
  uint64_t v452 = 0x2000000000;
  int v445 = (llvm::MachineInstr **)v447;
  uint64_t v446 = 0x1000000000;
  uint64_t v25 = a2[41];
  v437 = v441;
  uint64_t v438 = (uint64_t)v441;
  int v440 = 0;
  unsigned int v442 = (char *)v444;
  uint64_t v439 = 0x100000008;
  v441[0] = v25;
  uint64_t v26 = *(void *)(v25 + 88);
  v444[0] = v25;
  v444[1] = v26;
  uint64_t v443 = 0x800000001;
  sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v437);
  unsigned int v27 = 0;
  LODWORD(v406) = 0;
  unsigned int v392 = 0;
  uint64_t v28 = 0;
  memset(v435, 0, sizeof(v435));
  uint64_t v436 = 0;
  memset(&v433[1], 0, 72);
  unsigned int v431 = (unsigned int **)&v433[2];
  uint64_t v432 = (uint64_t)&v433[2];
  v433[0] = 8;
  v435[1] = 8;
  int v29 = 1;
  uint64_t v434 = &v435[2];
  int v413 = a1;
  while (1)
  {
    int v30 = v443;
    if (v443 != v27) {
      goto LABEL_37;
    }
    if (!v27) {
      break;
    }
    uint64_t v31 = &v442[16 * v27];
    unint64_t v32 = v434;
    unsigned int v33 = v442;
    while (*(void *)v33 == *v32 && *((void *)v33 + 1) == v32[1])
    {
      v33 += 16;
      v32 += 2;
      if (v33 == v31) {
        goto LABEL_415;
      }
    }
LABEL_37:
    uint64_t v35 = *(void *)&v442[16 * v443 - 16];
    uint64_t v36 = a1[37];
    unsigned int v37 = *(_DWORD *)(v36 + 264);
    if (v37)
    {
      uint64_t v38 = *(void *)(v36 + 248);
      unsigned int v39 = v37 - 1;
      uint64_t v40 = ((v35 >> 4) ^ (v35 >> 9)) & (v37 - 1);
      uint64_t v41 = *(void *)(v38 + 16 * v40);
      if (v35 != v41)
      {
        int v42 = 1;
        while (v41 != -4096)
        {
          int v43 = v40 + v42++;
          uint64_t v40 = v43 & v39;
          uint64_t v41 = *(void *)(v38 + 16 * v40);
          if (v35 == v41) {
            goto LABEL_42;
          }
        }
LABEL_46:
        unsigned int v37 = 0;
        goto LABEL_47;
      }
LABEL_42:
      unint64_t v44 = *(void **)(v38 + 16 * v40 + 8);
      if (!v44) {
        goto LABEL_46;
      }
      unsigned int v37 = 0;
      do
      {
        unint64_t v44 = (void *)*v44;
        ++v37;
      }
      while (v44);
    }
LABEL_47:
    unsigned int v390 = v37;
    uint64_t v46 = *(void *)(v35 + 48);
    unint64_t v45 = (void *)(v35 + 48);
    unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFF8;
    if ((v46 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v47 & 4) == 0)
    {
      while ((*(_WORD *)(v47 + 44) & 4) != 0)
        unint64_t v47 = *(void *)v47 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((void *)v47 != v45)
    {
      unint64_t v48 = (void *)v47;
      unsigned __int16 v391 = v45;
      while (1)
      {
        uint64_t v399 = (uint64_t)v48;
        unint64_t v49 = *v48 & 0xFFFFFFFFFFFFFFF8;
        if (!v49 || (*(unsigned char *)v49 & 4) == 0)
        {
          while ((*(_WORD *)(v49 + 44) & 4) != 0)
            unint64_t v49 = *(void *)v49 & 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v395 = (void *)v49;
        unsigned int v50 = *(unsigned __int16 **)(v399 + 16);
        int v51 = *v50;
        if ((v51 - 9) <= 0x3C && ((1 << (v51 - 9)) & 0x1000000000000605) != 0
          || v51 == 0)
        {
          goto LABEL_401;
        }
        uint64_t v54 = *((void *)v50 + 1);
        if ((v54 & 0x10) != 0) {
          goto LABEL_401;
        }
        __int16 v55 = *(_WORD *)(v399 + 44);
        if ((v55 & 0xC) == 0 || (v55 & 4) != 0)
        {
          if ((v54 & 0x400) != 0) {
            goto LABEL_401;
          }
        }
        else
        {
          uint64_t v56 = v399;
          if ((v54 & 0x400) != 0) {
            goto LABEL_401;
          }
          while ((*(_WORD *)(v56 + 44) & 8) != 0)
          {
            uint64_t v56 = *(void *)(v56 + 8);
            if ((*(unsigned char *)(*(void *)(v56 + 16) + 9) & 4) != 0) {
              goto LABEL_401;
            }
          }
        }
        uint64_t v57 = v399;
        char v58 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 224))(a1, v399);
        unsigned int v59 = v392;
        if (v390 < v392) {
          char v60 = 1;
        }
        else {
          char v60 = v58;
        }
        char v400 = v60;
        if (v390 < v392) {
          unsigned int v59 = v390;
        }
        int v428 = (uint64_t *)v430;
        uint64_t v429 = 0x1000000000;
        __int16 v61 = *(_WORD *)(v399 + 44);
        unint64_t v62 = v399;
        if ((v61 & 4) != 0)
        {
          do
            unint64_t v62 = *(void *)v62 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v62 + 44) & 4) != 0);
        }
        uint64_t v63 = *(void *)(a1[35] + 288);
        if ((v61 & 8) != 0)
        {
          do
            uint64_t v57 = *(void *)(v57 + 8);
          while ((*(_WORD *)(v57 + 44) & 8) != 0);
        }
        uint64_t v64 = *(void *)(v57 + 8);
        unsigned int v392 = v59;
        if (v62 != v64)
        {
          while (1)
          {
            unsigned int v65 = **(unsigned __int16 **)(v62 + 16);
            BOOL v21 = v65 > 0x17;
            int v66 = (1 << v65) & 0x83E000;
            if (v21 || v66 == 0) {
              break;
            }
            unint64_t v62 = *(void *)(v62 + 8);
            if (v62 == v64)
            {
              unint64_t v62 = *(void *)(v57 + 8);
              break;
            }
          }
        }
        uint64_t v68 = *(void *)(v63 + 368);
        uint64_t v69 = *(unsigned int *)(v63 + 384);
        if (!v69) {
          goto LABEL_94;
        }
        LODWORD(v70) = ((v62 >> 4) ^ (v62 >> 9)) & (v69 - 1);
        uint64_t v71 = (uint64_t *)(v68 + 16 * v70);
        uint64_t v72 = *v71;
        if (v62 != *v71) {
          break;
        }
LABEL_95:
        unint64_t v406 = (v406 + 1);
        if (!v452) {
          goto LABEL_289;
        }
        uint64_t v75 = v451;
        uint64_t v405 = &v451[4 * v452];
        uint64_t v76 = v71[1];
        unint64_t v397 = v76 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v396 = (v76 >> 1) & 3;
        do
        {
          uint64_t v78 = *v75;
          unint64_t v77 = v75[1];
          uint64_t v415 = *v75;
          unint64_t v416 = v77;
          if ((v77 & 4) != 0 && (v77 & 0xFFFFFFFFFFFFFFF8) != 0) {
            operator new();
          }
          unint64_t v79 = v75[2];
          int v418 = *((_DWORD *)v75 + 6);
          unint64_t v417 = v79;
          unsigned int v411 = **(unsigned __int16 **)(v78 + 16);
          if (v403 > v402 && v419 < v406)
          {
            int v29 = 0;
            goto LABEL_270;
          }
          if ((v400 & 1) != 0
            || (v406 - v418) >= 0xE
            && ((v406 - v418) > 0x17 || (v96 = v75, v97 = sub_1CBC08B08(a1, &v417, v78, 0), uint64_t v75 = v96, v97)))
          {
            __int16 v80 = *(_WORD *)(v78 + 44);
            unint64_t v81 = v78;
            if ((v80 & 4) != 0)
            {
              do
                unint64_t v81 = *(void *)v81 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v81 + 44) & 4) != 0);
            }
            uint64_t v82 = v78;
            if ((v80 & 8) != 0)
            {
              do
                uint64_t v82 = *(void *)(v82 + 8);
              while ((*(_WORD *)(v82 + 44) & 8) != 0);
            }
            unint64_t v83 = *(void *)(v82 + 8);
            uint64_t v84 = v75;
            if (v81 != v83)
            {
              do
              {
                unsigned int v85 = **(unsigned __int16 **)(v81 + 16);
                BOOL v21 = v85 > 0x17;
                int v86 = (1 << v85) & 0x83E000;
                if (v21 || v86 == 0) {
                  goto LABEL_113;
                }
                unint64_t v81 = *(void *)(v81 + 8);
              }
              while (v81 != v83);
              unint64_t v81 = v83;
            }
LABEL_113:
            uint64_t v88 = *(void *)(a1[35] + 288);
            uint64_t v89 = *(void *)(v88 + 368);
            uint64_t v90 = *(unsigned int *)(v88 + 384);
            if (v90)
            {
              LODWORD(v91) = ((v81 >> 4) ^ (v81 >> 9)) & (v90 - 1);
              unsigned int v92 = (uint64_t *)(v89 + 16 * v91);
              uint64_t v93 = *v92;
              if (v81 != *v92)
              {
                int v94 = 1;
                do
                {
                  if (v93 == -4096) {
                    goto LABEL_123;
                  }
                  int v95 = v91 + v94++;
                  uint64_t v91 = v95 & (v90 - 1);
                  uint64_t v93 = *(void *)(v89 + 16 * v91);
                }
                while (v81 != v93);
                unsigned int v92 = (uint64_t *)(v89 + 16 * v91);
              }
            }
            else
            {
LABEL_123:
              unsigned int v92 = (uint64_t *)(v89 + 16 * v90);
            }
            uint64_t v98 = v92[1];
            if (v429 >= (unint64_t)HIDWORD(v429)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v428[v429] = v78;
            LODWORD(v429) = v429 + 1;
            uint64_t v75 = v84;
            if ((*(_DWORD *)((v98 & 0xFFFFFFFFFFFFFFF8) + 24) | (v98 >> 1) & 3) > (*(_DWORD *)(v397 + 24) | v396)) {
              goto LABEL_270;
            }
            if ((v416 & 4) != 0)
            {
              uint64_t v100 = *(unint64_t **)(v416 & 0xFFFFFFFFFFFFFFF8);
              int v99 = &v100[*(unsigned int *)((v416 & 0xFFFFFFFFFFFFFFF8) + 8)];
            }
            else
            {
              int v99 = &v416 + (v416 > 7);
              uint64_t v100 = &v416;
            }
            int v398 = v29;
            uint64_t v101 = 0xFFFFFFFFLL;
            while (v100 != v99)
            {
              uint64_t v102 = (_DWORD *)*v100++;
              unsigned int v103 = (*v102 >> 8) & 0xFFF;
              if (v103 == v101) {
                unsigned int v104 = v101;
              }
              else {
                unsigned int v104 = 0;
              }
              if (v101 == -1) {
                uint64_t v101 = v103;
              }
              else {
                uint64_t v101 = v104;
              }
            }
            uint64_t v393 = *(unsigned int *)(*(void *)(v78 + 32) + 4);
            unint64_t v394 = v393 & 0x7FFFFFFF;
            unint64_t v408 = *(void *)(*(void *)(a1[34] + 24) + 16 * v394) & 0xFFFFFFFFFFFFFFF8;
            if (v416 >= 8)
            {
              unint64_t v130 = v416 & 0xFFFFFFFFFFFFFFF8;
              if ((v416 & 4) != 0 && v130 || (v416 & 4) != 0)
              {
                if (!*(_DWORD *)(v130 + 8)) {
                  goto LABEL_138;
                }
                unint64_t v130 = *(void *)(*(void *)v130 + 8 * *(unsigned int *)(v130 + 8) - 8);
              }
              unsigned int v131 = *(uint64_t **)(v130 + 8);
              uint64_t v425 = v131;
              sub_1CBC08B08(a1, (unint64_t *)&v425, v78, 0);
              unsigned int v414 = v411;
              if (v101
                && (*(unsigned int (**)(void *, uint64_t, unsigned int *))(*a1 + 272))(a1, v78, &v414))
              {
                uint64_t v132 = (*(uint64_t (**)(void *))(*a1 + 232))(a1);
                char v133 = 1;
              }
              else
              {
                char v133 = 0;
                uint64_t v132 = v408;
              }
              uint64_t v134 = a1[34];
              uint64_t IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v134, "", 0);
              unint64_t v136 = IncompleteVirtualRegister & 0x7FFFFFFF;
              *(void *)(*(void *)(v134 + 24) + 16 * v136) = v132 & 0xFFFFFFFFFFFFFFFBLL;
              uint64_t v137 = *(void *)(v134 + 8);
              if (v137) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v137 + 24))(v137, IncompleteVirtualRegister);
              }
              sub_1CB84B030(v131[3], (uint64_t)v425, (unsigned __int8 **)(v78 + 56), *(void *)(a1[32] + 8) + 48 * v414, IncompleteVirtualRegister);
              unsigned int v139 = v138;
              if (llvm::MachineInstr::getNumExplicitOperands(v78) >= 2)
              {
                uint64_t v140 = 32;
                unint64_t v141 = 1;
                do
                {
                  llvm::MachineInstr::addOperand(v139, *(llvm::MachineFunction **)(*((void *)v139 + 3) + 32), (const llvm::MachineOperand *)(*(void *)(v78 + 32) + v140));
                  ++v141;
                  v140 += 32;
                }
                while (v141 < llvm::MachineInstr::getNumExplicitOperands(v78));
              }
              sub_1CB914C88(*(void *)(a1[35] + 288), (uint64_t)v139, 0);
              if (v133) {
                (*(void (**)(void *, void, uint64_t, llvm::MachineInstr *))(*a1 + 288))(a1, v411, v101, v139);
              }
              int v142 = &v416;
              if ((v416 & 4) != 0)
              {
                int v142 = *(unint64_t **)(v416 & 0xFFFFFFFFFFFFFFF8);
                unsigned int v143 = &v142[*(unsigned int *)((v416 & 0xFFFFFFFFFFFFFFF8) + 8)];
              }
              else
              {
                unsigned int v143 = &v416 + (v416 > 7);
              }
              if (v142 == v143)
              {
                uint64_t v144 = a1[35];
                unint64_t v145 = *(unsigned int *)(v144 + 416);
                BOOL v174 = v136 >= v145;
                unint64_t v146 = v136 - v145;
                if (v174) {
                  sub_1CB9153B8(v144 + 408, v146 + 1, *(void *)(v144 + 424));
                }
                operator new();
              }
              llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)a1[36]);
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates();
            }
LABEL_138:
            uint64_t v105 = a1[35];
            uint64_t v106 = (void *)(v105 + 408);
            unint64_t v107 = *(unsigned int *)(v105 + 416);
            BOOL v174 = v394 >= v107;
            unint64_t v108 = v394 - v107;
            if (v174)
            {
              sub_1CB9153B8((uint64_t)v106, v108 + 1, *(void *)(v105 + 424));
            }
            else
            {
              uint64_t v109 = *(void *)(*v106 + 8 * v394);
              if (v109)
              {
                llvm::LiveIntervals::shrinkToUses((void *)v105, v109, 0);
                unsigned int v414 = 0;
                unsigned int v110 = *(_DWORD *)(v109 + 8);
                if (!v110
                  || (**(void **)v109 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(*(void *)v109 + 24 * v110 - 16) & 0xFFFFFFFFFFFFFFF8))
                {
                  uint64_t v129 = *(void *)(v109 + 104);
                  unint64_t v128 = (void *)(v109 + 104);
                  uint64_t v127 = v129;
                  int v29 = v398;
                  uint64_t v75 = v84;
                  if (!v129) {
                    goto LABEL_267;
                  }
                  while (1)
                  {
                    uint64_t v192 = v127;
                    if (!*(_DWORD *)(v127 + 8)) {
                      break;
                    }
LABEL_266:
                    unint64_t v128 = (void *)(v127 + 104);
                    uint64_t v127 = *(void *)(v127 + 104);
                    int v29 = v398;
                    if (!v127) {
                      goto LABEL_267;
                    }
                  }
                  while (1)
                  {
                    uint64_t v190 = *(void *)(v192 + 96);
                    uint64_t v127 = *(void *)(v192 + 104);
                    *(void *)(v192 + 96) = 0;
                    if (v190)
                    {
                      uint64_t v189 = v75;
                      sub_1CB833A08(v190, *(void **)(v190 + 8));
                      MEMORY[0x1D25D9CE0](v190, 0x1020C4062D53EE8);
                      uint64_t v75 = v189;
                    }
                    int v191 = *(void **)(v192 + 64);
                    if (v191 != (void *)(v192 + 80))
                    {
                      unsigned int v188 = v75;
                      free(v191);
                      uint64_t v75 = v188;
                    }
                    if (*(void *)v192 == v192 + 16)
                    {
                      if (!v127)
                      {
LABEL_277:
                        *unint64_t v128 = 0;
                        int v29 = v398;
LABEL_267:
                        if (v446 >= (unint64_t)HIDWORD(v446)) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        v445[v446] = (llvm::MachineInstr *)v78;
                        LODWORD(v446) = v446 + 1;
LABEL_269:
                        uint64_t v28 = 1;
                        a1 = v413;
                        goto LABEL_270;
                      }
                    }
                    else
                    {
                      unsigned int v187 = v75;
                      free(*(void **)v192);
                      uint64_t v75 = v187;
                      if (!v127) {
                        goto LABEL_277;
                      }
                    }
                    uint64_t v192 = v127;
                    if (*(_DWORD *)(v127 + 8))
                    {
                      *unint64_t v128 = v127;
                      goto LABEL_266;
                    }
                  }
                }
                uint64_t v111 = (*(uint64_t (**)(void *))(*v413 + 240))(v413);
                int v29 = v398;
                uint64_t v75 = v84;
                if (v111 != v408) {
                  goto LABEL_269;
                }
                if (!*(unsigned char *)(v413[34] + 16)) {
                  goto LABEL_269;
                }
                int v112 = (*(uint64_t (**)(void *, uint64_t, unsigned int *))(*v413 + 272))(v413, v78, &v414);
                uint64_t v75 = v84;
                if (!v112) {
                  goto LABEL_269;
                }
                uint64_t v113 = *(void *)(v109 + 104);
                if (!v113) {
                  goto LABEL_269;
                }
                uint64_t v114 = 0;
                do
                {
                  unsigned int v115 = *(_DWORD *)(v113 + 8);
                  if (v115)
                  {
                    if ((**(void **)v113 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(*(void *)v113 + 24 * v115 - 16) & 0xFFFFFFFFFFFFFFF8)) {
                      uint64_t v114 = v114 | *(_DWORD *)(v113 + 112);
                    }
                    uint64_t v75 = v84;
                  }
                  uint64_t v113 = *(void *)(v113 + 104);
                }
                while (v113);
                if ((v114 - 1) >= 2) {
                  goto LABEL_269;
                }
                uint64_t v116 = v413[34];
                uint64_t v117 = (*(uint64_t (**)(void *))(*v413 + 232))(v413);
                uint64_t v118 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v116, "", 0);
                unint64_t v409 = v118 & 0x7FFFFFFF;
                *(void *)(*(void *)(v116 + 24) + 16 * v409) = v117 & 0xFFFFFFFFFFFFFFFBLL;
                uint64_t v119 = *(void *)(v116 + 8);
                if (v119) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v119 + 24))(v119, v118);
                }
                sub_1CB84B030(*(void *)(v78 + 24), v78, (unsigned __int8 **)(v78 + 56), *(void *)(v413[32] + 8) + 48 * v414, v118);
                int v121 = v120;
                if (llvm::MachineInstr::getNumExplicitOperands(v78) >= 2)
                {
                  uint64_t v122 = 32;
                  unint64_t v123 = 1;
                  do
                  {
                    llvm::MachineInstr::addOperand(v121, *(llvm::MachineFunction **)(*((void *)v121 + 3) + 32), (const llvm::MachineOperand *)(*(void *)(v78 + 32) + v122));
                    ++v123;
                    v122 += 32;
                  }
                  while (v123 < llvm::MachineInstr::getNumExplicitOperands(v78));
                }
                uint64_t v124 = (*(uint64_t (**)(void *, uint64_t))(*v413 + 256))(v413, v114);
                (*(void (**)(void *, void, uint64_t, llvm::MachineInstr *))(*v413 + 288))(v413, v411, v124, v121);
                sub_1CB914C88(*(void *)(v413[35] + 288), (uint64_t)v121, 0);
                uint64_t v425 = &v427;
                uint64_t v426 = 0x800000000;
                uint64_t v125 = v413[34];
                if ((v393 & 0x80000000) != 0) {
                  uint64_t v126 = (uint64_t *)(*(void *)(v125 + 24) + 16 * v394 + 8);
                }
                else {
                  uint64_t v126 = (uint64_t *)(*(void *)(v125 + 272) + 8 * v393);
                }
                uint64_t v147 = *v126;
                if (!*v126) {
                  goto LABEL_249;
                }
                while ((*(unsigned char *)(v147 + 3) & 1) != 0)
                {
                  uint64_t v147 = *(void *)(v147 + 24);
                  if (!v147) {
                    goto LABEL_249;
                  }
                }
                unsigned int v148 = 0;
                unsigned int v149 = 8;
LABEL_192:
                if (v148 >= v149) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((void *)v425 + v148) = v147;
                unsigned int v148 = v426 + 1;
                LODWORD(v426) = v426 + 1;
                while (1)
                {
                  uint64_t v147 = *(void *)(v147 + 24);
                  if (!v147) {
                    break;
                  }
                  if ((*(unsigned char *)(v147 + 3) & 1) == 0)
                  {
                    unsigned int v149 = HIDWORD(v426);
                    goto LABEL_192;
                  }
                }
                if (!v148)
                {
LABEL_249:
                  uint64_t v184 = v413[35];
                  unint64_t v185 = *(unsigned int *)(v184 + 416);
                  BOOL v174 = v409 >= v185;
                  unint64_t v186 = v409 - v185;
                  if (v174) {
                    sub_1CB9153B8(v184 + 408, v186 + 1, *(void *)(v184 + 424));
                  }
                  operator new();
                }
                uint64_t v150 = (uint64_t *)v425;
                BOOL v151 = (uint64_t *)((char *)v425 + 8 * v148);
                while (2)
                {
                  unint64_t v152 = *(void *)(*v150 + 8);
                  uint64_t v153 = *(void *)(v413[35] + 288);
                  uint64_t v154 = *(void *)(v152 + 24);
                  unint64_t v155 = v152;
                  while (v155 != *(void *)(v154 + 56))
                  {
                    unint64_t v155 = *(void *)v155 & 0xFFFFFFFFFFFFFFF8;
                    if (!v155 || (*(unsigned char *)v155 & 4) == 0)
                    {
                      while ((*(_WORD *)(v155 + 44) & 4) != 0)
                        unint64_t v155 = *(void *)v155 & 0xFFFFFFFFFFFFFFF8;
                    }
                    uint64_t v156 = *(void *)(v153 + 368);
                    uint64_t v157 = *(unsigned int *)(v153 + 384);
                    if (v157)
                    {
                      LODWORD(v158) = ((v155 >> 4) ^ (v155 >> 9)) & (v157 - 1);
                      unint64_t v159 = (uint64_t *)(v156 + 16 * v158);
                      uint64_t v160 = *v159;
                      if (v155 != *v159)
                      {
                        int v161 = 1;
                        do
                        {
                          if (v160 == -4096) {
                            goto LABEL_212;
                          }
                          int v162 = v158 + v161++;
                          uint64_t v158 = v162 & (v157 - 1);
                          uint64_t v160 = *(void *)(v156 + 16 * v158);
                        }
                        while (v155 != v160);
                        unint64_t v159 = (uint64_t *)(v156 + 16 * v158);
                      }
                    }
                    else
                    {
LABEL_212:
                      unint64_t v159 = (uint64_t *)(v156 + 16 * v157);
                    }
                    if (v159 != (uint64_t *)(v156 + 16 * v157))
                    {
                      unint64_t v163 = v159 + 1;
                      goto LABEL_215;
                    }
                  }
                  unint64_t v163 = (void *)(*(void *)(v153 + 392) + 16 * *(unsigned int *)(v154 + 24));
LABEL_215:
                  unint64_t v164 = *v163 & 0xFFFFFFFFFFFFFFF8;
                  unsigned int v165 = *(_DWORD *)(v109 + 8);
                  uint64_t v166 = *(void **)v109;
                  if (v165)
                  {
                    uint64_t v167 = v166[3 * v165 - 2];
                    unsigned int v168 = *(_DWORD *)(v164 + 24);
                    unsigned int v169 = (v167 >> 1) & 3 | *(_DWORD *)((v167 & 0xFFFFFFFFFFFFFFF8) + 24);
                    int v170 = *(void **)v109;
                    unint64_t v171 = *(unsigned int *)(v109 + 8);
                    if (v168 < v169)
                    {
                      do
                      {
                        unint64_t v172 = v171 >> 1;
                        uint64_t v173 = v170[3 * (v171 >> 1) + 1];
                        LODWORD(v173) = (v173 >> 1) & 3 | *(_DWORD *)((v173 & 0xFFFFFFFFFFFFFFF8) + 24);
                        v171 -= (v171 >> 1) + 1;
                        BOOL v174 = v168 >= v173;
                        if (v168 >= v173) {
                          unint64_t v175 = v172 + 1;
                        }
                        else {
                          unint64_t v175 = 0;
                        }
                        v170 += 3 * v175;
                        if (!v174) {
                          unint64_t v171 = v172;
                        }
                      }
                      while (v171);
LABEL_226:
                      uint64_t v176 = &v166[3 * v165];
                      if (v170 == v176) {
                        goto LABEL_237;
                      }
                      unsigned int v177 = *(_DWORD *)((*v170 & 0xFFFFFFFFFFFFFFF8) + 24);
                      unsigned int v178 = *(_DWORD *)(v164 + 24);
                      if (((*v170 >> 1) & 3 | v177) <= v178 && v164 == (v170[1] & 0xFFFFFFFFFFFFFFF8))
                      {
                        v170 += 3;
                        if (v170 != v176)
                        {
                          unsigned int v177 = *(_DWORD *)((*v170 & 0xFFFFFFFFFFFFFFF8) + 24);
                          goto LABEL_231;
                        }
LABEL_237:
                        uint64_t v179 = 0;
LABEL_238:
                        if (**(unsigned __int16 **)(v152 + 16) - 13 <= 4)
                        {
                          unsigned int v181 = 0;
                          goto LABEL_245;
                        }
                      }
                      else
                      {
LABEL_231:
                        if (v178 < v177) {
                          goto LABEL_237;
                        }
                        uint64_t v179 = v170[2];
                        if ((~*((_DWORD *)v170 + 2) & 6) == 0 || v179 == 0) {
                          goto LABEL_238;
                        }
                      }
                      unint64_t v182 = *(void *)(v179 + 8);
                      if (v182 < 8) {
                        uint64_t v183 = 0;
                      }
                      else {
                        uint64_t v183 = *(void *)((v182 & 0xFFFFFFFFFFFFFFF8) + 16);
                      }
                      if (v183 == v78)
                      {
                        unsigned int v181 = v118;
LABEL_245:
                        llvm::MachineOperand::setReg(*v150, v181);
                        *(_DWORD *)*v150 &= 0xFFF000FF;
                      }
                      if (++v150 == v151) {
                        goto LABEL_249;
                      }
                      continue;
                    }
                  }
                  else
                  {
                    unsigned int v165 = 0;
                  }
                  break;
                }
                int v170 = &v166[3 * v165];
                goto LABEL_226;
              }
            }
            operator new();
          }
LABEL_270:
          if ((v416 & 4) != 0)
          {
            unsigned int v193 = (void **)(v416 & 0xFFFFFFFFFFFFFFF8);
            if ((v416 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              int v194 = v75;
              if (*v193 != v193 + 2) {
                free(*v193);
              }
              MEMORY[0x1D25D9CE0](v193, 0x1080C40ED926357);
              uint64_t v75 = v194;
            }
          }
          v75 += 4;
        }
        while (v75 != v405);
        int v195 = v428;
        if (v429)
        {
          uint64_t v196 = 8 * v429;
          do
          {
            uint64_t v197 = *v195++;
            sub_1CBA72FE8((uint64_t)&v448, v197);
            v196 -= 8;
          }
          while (v196);
          int v195 = v428;
        }
        if (v195 != (uint64_t *)v430) {
          free(v195);
        }
LABEL_289:
        unint64_t v45 = v391;
        unint64_t v48 = v395;
        if (v400) {
          goto LABEL_402;
        }
        if (v29)
        {
          if (((*(uint64_t (**)(void *, void))(*a1 + 184))(a1, **(unsigned __int16 **)(v399 + 16)) & 1) != 0
            || (*(unsigned char *)(*(void *)(v399 + 16) + 9) & 0x20) != 0)
          {
            if (v448)
            {
              int v264 = 32;
              int v265 = &v449;
              goto LABEL_385;
            }
            int v265 = v449;
            int v264 = v450;
            if (!v450)
            {
              uint64_t v267 = 0;
              goto LABEL_392;
            }
LABEL_385:
            int v266 = v264 - 1;
            LODWORD(v267) = (v264 - 1) & ((v399 >> 4) ^ (v399 >> 9));
            unsigned int v268 = &v265[2 * v267];
            uint64_t v269 = *v268;
            if (*v268 != v399)
            {
              int v270 = 1;
              while (v269 != -4096)
              {
                int v271 = v267 + v270++;
                uint64_t v267 = v271 & v266;
                uint64_t v269 = v265[2 * v267];
                if (v269 == v399) {
                  goto LABEL_392;
                }
              }
              if (v448)
              {
                int v265 = &v449;
                uint64_t v267 = 32;
              }
              else
              {
                int v265 = v449;
                uint64_t v267 = v450;
              }
LABEL_392:
              unsigned int v268 = &v265[2 * v267];
            }
            if (v448) {
              uint64_t v272 = &v449;
            }
            else {
              uint64_t v272 = v449;
            }
            unsigned int v273 = v450;
            if (v448) {
              unsigned int v273 = 32;
            }
            if (&v272[2 * v273] != v268) {
              sub_1CBA72FE8((uint64_t)&v448, v399);
            }
            int v29 = 1;
            unint64_t v45 = v391;
LABEL_401:
            unint64_t v48 = v395;
            goto LABEL_402;
          }
          unint64_t v48 = v395;
          if (*(_DWORD *)(v399 + 40))
          {
            uint64_t v198 = v28;
            unint64_t v199 = 0;
            uint64_t v200 = v399;
            unint64_t v45 = v391;
            while (1)
            {
              unint64_t v201 = v200;
              uint64_t v202 = *(void *)(v200 + 32) + 32 * v199;
              if ((*(_DWORD *)v202 & 0x130000FF) != 0) {
                goto LABEL_340;
              }
              int v203 = *(_DWORD *)(v202 + 4);
              if ((v203 - 1) < 0x3FFFFFFF) {
                goto LABEL_340;
              }
              if (((*(_DWORD *)v202 >> 8) & 0xFFF) != 0)
              {
                int v204 = (*(uint64_t (**)(void *))(*a1 + 248))(a1);
                unint64_t v45 = v391;
                if (!v204) {
                  goto LABEL_340;
                }
              }
              uint64_t v205 = a1[35];
              uint64_t v206 = v203 & 0x7FFFFFFF;
              unint64_t v207 = (void *)(v205 + 408);
              uint64_t v208 = *(unsigned int *)(v205 + 416);
              if ((v203 & 0x7FFFFFFFu) >= v208)
              {
                sub_1CB9153B8((uint64_t)v207, v206 - v208 + 1, *(void *)(v205 + 424));
LABEL_358:
                operator new();
              }
              uint64_t v209 = *(uint64_t **)(*v207 + 8 * v206);
              if (!v209) {
                goto LABEL_358;
              }
              uint64_t v210 = *(void *)(v205 + 288);
              __int16 v211 = *(_WORD *)(v201 + 44);
              unint64_t v212 = v201;
              if ((v211 & 4) != 0)
              {
                do
                  unint64_t v212 = *(void *)v212 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v212 + 44) & 4) != 0);
              }
              unint64_t v213 = v201;
              if ((v211 & 8) != 0)
              {
                do
                  unint64_t v213 = *(void *)(v213 + 8);
                while ((*(_WORD *)(v213 + 44) & 8) != 0);
              }
              unint64_t v214 = *(void *)(v213 + 8);
              if (v212 != v214)
              {
                while (1)
                {
                  unsigned int v215 = **(unsigned __int16 **)(v212 + 16);
                  BOOL v21 = v215 > 0x17;
                  int v216 = (1 << v215) & 0x83E000;
                  if (v21 || v216 == 0) {
                    break;
                  }
                  unint64_t v212 = *(void *)(v212 + 8);
                  if (v212 == v214)
                  {
                    unint64_t v212 = v214;
                    break;
                  }
                }
              }
              uint64_t v218 = *(void *)(v210 + 368);
              uint64_t v219 = *(unsigned int *)(v210 + 384);
              if (v219)
              {
                LODWORD(v220) = ((v212 >> 4) ^ (v212 >> 9)) & (v219 - 1);
                uint64_t v221 = (uint64_t *)(v218 + 16 * v220);
                uint64_t v222 = *v221;
                if (v212 == *v221) {
                  goto LABEL_317;
                }
                int v223 = 1;
                while (v222 != -4096)
                {
                  int v224 = v220 + v223++;
                  uint64_t v220 = v224 & (v219 - 1);
                  uint64_t v222 = *(void *)(v218 + 16 * v220);
                  if (v212 == v222)
                  {
                    uint64_t v221 = (uint64_t *)(v218 + 16 * v220);
                    goto LABEL_317;
                  }
                }
              }
              uint64_t v221 = (uint64_t *)(v218 + 16 * v219);
LABEL_317:
              unint64_t v225 = v221[1] & 0xFFFFFFFFFFFFFFF8;
              unsigned int v226 = *((_DWORD *)v209 + 2);
              uint64_t v227 = *v209;
              if (!v226)
              {
                unsigned int v226 = 0;
LABEL_327:
                unint64_t v45 = v391;
                uint64_t v231 = v227 + 24 * v226;
                goto LABEL_328;
              }
              uint64_t v228 = *(void *)(v227 + 24 * v226 - 16);
              unsigned int v229 = *(_DWORD *)(v225 + 24);
              unsigned int v230 = (v228 >> 1) & 3 | *(_DWORD *)((v228 & 0xFFFFFFFFFFFFFFF8) + 24);
              uint64_t v231 = *v209;
              unint64_t v232 = *((unsigned int *)v209 + 2);
              if (v229 >= v230) {
                goto LABEL_327;
              }
              do
              {
                unint64_t v233 = v232 >> 1;
                uint64_t v234 = *(void *)(v231 + 24 * (v232 >> 1) + 8);
                LODWORD(v234) = (v234 >> 1) & 3 | *(_DWORD *)((v234 & 0xFFFFFFFFFFFFFFF8) + 24);
                v232 -= (v232 >> 1) + 1;
                BOOL v235 = v229 >= v234;
                if (v229 >= v234) {
                  unint64_t v236 = v233 + 1;
                }
                else {
                  unint64_t v236 = 0;
                }
                v231 += 24 * v236;
                if (!v235) {
                  unint64_t v232 = v233;
                }
              }
              while (v232);
              unint64_t v45 = v391;
LABEL_328:
              uint64_t v237 = v227 + 24 * v226;
              uint64_t v238 = *(void *)(v231 + 16);
              unint64_t v239 = *(void *)(v231 + 8) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v240 = v231 + 24;
              BOOL v241 = v225 == v239 && v240 == v237;
              if (!v241 && *(void *)(v238 + 8) == v225) {
                uint64_t v238 = 0;
              }
              unint64_t v242 = *(void *)(v238 + 8);
              if (v242 < 8) {
                goto LABEL_340;
              }
              uint64_t v243 = *(void *)((v242 & 0xFFFFFFFFFFFFFFF8) + 16);
              if (!v243) {
                goto LABEL_340;
              }
              if (((*(uint64_t (**)(void *, void))(*a1 + 184))(a1, **(unsigned __int16 **)(v243 + 16)) & 1) != 0
                || (*(unsigned char *)(*(void *)(v243 + 16) + 9) & 0x20) != 0)
              {
                int v244 = *(_DWORD **)(v243 + 32);
                unint64_t v45 = v391;
                if ((v244[1] - 1) < 0x3FFFFFFF) {
                  goto LABEL_340;
                }
                unint64_t v48 = v395;
                if ((*v244 & 0xFFF00) != 0) {
                  goto LABEL_341;
                }
                uint64_t v245 = sub_1CBA731F0((int *)&v448, v243);
                if ((uint64_t *)v245 != &v451[4 * v452])
                {
                  unint64_t v246 = *(void *)(v245 + 8);
                  if (v246 <= 7)
                  {
                    *(void *)(v245 + 8) = v202 & 0xFFFFFFFFFFFFFFFBLL;
                    unint64_t v45 = v391;
                  }
                  else
                  {
                    unint64_t v45 = v391;
                    if ((v246 & 4) == 0) {
                      operator new();
                    }
                    unint64_t v247 = v246 & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v248 = *(unsigned int *)((v246 & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v248 >= *(unsigned int *)((v246 & 0xFFFFFFFFFFFFFFF8) + 12)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)v247 + 8 * v248) = v202;
                    ++*(_DWORD *)(v247 + 8);
                  }
                  *(void *)(v245 + 16) = v201;
                  *(_DWORD *)(v245 + 24) = v406;
                  goto LABEL_340;
                }
                uint64_t v425 = (void *)v243;
                LODWORD(v426) = 0;
                sub_1CBA73414((uint64_t)&v448, &v425, &v426, (uint64_t)&v428);
                if (v430[0])
                {
                  unint64_t v249 = v202 & 0xFFFFFFFFFFFFFFFBLL;
                  uint64_t v250 = v452;
                  *((_DWORD *)v428 + 2) = v452;
                  unint64_t v45 = v391;
                  if (v250 < HIDWORD(v452))
                  {
                    uint64_t v251 = &v451[4 * v250];
                    *uint64_t v251 = v243;
                    v251[1] = v249;
                    v251[2] = v201;
                    *((_DWORD *)v251 + 6) = v406;
                    LODWORD(v452) = v452 + 1;
                    goto LABEL_340;
                  }
                  if (HIDWORD(v452) == -1) {
                    sub_1CD0A89A8(0xFFFFFFFFuLL);
                  }
                  if (((2 * HIDWORD(v452)) | 1uLL) >= 0xFFFFFFFF) {
                    uint64_t v252 = 0xFFFFFFFFLL;
                  }
                  else {
                    uint64_t v252 = (2 * HIDWORD(v452)) | 1;
                  }
                  unint64_t v253 = (char *)malloc_type_malloc(32 * v252, 0x4065EBACuLL);
                  if (!v253) {
                    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                  }
                  uint64_t v254 = (uint64_t *)v253;
                  unsigned int v255 = &v253[32 * v452];
                  *(void *)unsigned int v255 = v243;
                  *((void *)v255 + 1) = v249;
                  *((void *)v255 + 2) = v201;
                  *((_DWORD *)v255 + 6) = v406;
                  BOOL v256 = v451;
                  if (v452)
                  {
                    int v257 = &v451[4 * v452];
                    uint64_t v258 = v254;
                    do
                    {
                      uint64_t *v258 = *v256;
                      v258[1] = v256[1];
                      v256[1] = 0;
                      uint64_t v259 = v256[2];
                      *((_DWORD *)v258 + 6) = *((_DWORD *)v256 + 6);
                      v258[2] = v259;
                      v256 += 4;
                      v258 += 4;
                    }
                    while (v256 != v257);
                    BOOL v256 = v451;
                    if (v452)
                    {
                      uint64_t v260 = v451 - 3;
                      uint64_t v261 = 4 * v452;
                      do
                      {
                        uint64_t v262 = v260[v261];
                        if ((v262 & 4) != 0)
                        {
                          uint64_t v263 = (void **)(v262 & 0xFFFFFFFFFFFFFFF8);
                          if ((v262 & 0xFFFFFFFFFFFFFFF8) != 0)
                          {
                            if (*v263 != v263 + 2) {
                              free(*v263);
                            }
                            MEMORY[0x1D25D9CE0](v263, 0x1080C40ED926357);
                          }
                        }
                        v261 -= 4;
                      }
                      while (v261 * 8);
                      BOOL v256 = v451;
                    }
                  }
                  if (v256 != v453) {
                    free(v256);
                  }
                  uint64_t v451 = v254;
                  HIDWORD(v452) = v252;
                  LODWORD(v452) = v452 + 1;
                  a1 = v413;
                }
              }
              unint64_t v45 = v391;
LABEL_340:
              unint64_t v48 = v395;
LABEL_341:
              ++v199;
              uint64_t v200 = v201;
              int v29 = 1;
              if (v199 >= *(unsigned int *)(v201 + 40))
              {
                uint64_t v28 = v198;
                goto LABEL_402;
              }
            }
          }
          int v29 = 1;
          unint64_t v45 = v391;
        }
        else
        {
          int v29 = 0;
        }
LABEL_402:
        if (v48 == v45)
        {
          int v30 = v443;
          goto LABEL_412;
        }
      }
      int v73 = 1;
      while (v72 != -4096)
      {
        int v74 = v70 + v73++;
        uint64_t v70 = v74 & (v69 - 1);
        uint64_t v72 = *(void *)(v68 + 16 * v70);
        if (v62 == v72)
        {
          uint64_t v71 = (uint64_t *)(v68 + 16 * v70);
          goto LABEL_95;
        }
      }
LABEL_94:
      uint64_t v71 = (uint64_t *)(v68 + 16 * v69);
      goto LABEL_95;
    }
LABEL_412:
    LODWORD(v443) = v30 - 1;
    if (v30 != 1) {
      sub_1CB93B280((llvm::SmallPtrSetImplBase *)&v437);
    }
    unsigned int v27 = v435[0];
    unsigned int v392 = v390;
  }
LABEL_415:
  if (v434 != &v435[2]) {
    free(v434);
  }
  if ((unsigned int **)v432 != v431) {
    free((void *)v432);
  }
  if (v442 != (char *)v444) {
    free(v442);
  }
  if ((uint64_t *)v438 != v437) {
    free((void *)v438);
  }
  if (v446)
  {
    unsigned int v274 = v445;
    __int16 v275 = (char *)&v445[v446];
    while (1)
    {
      uint64_t v276 = *v274;
      unint64_t v277 = *(int32x2_t **)(a1[35] + 288);
      int32x2_t v278 = v277[46];
      uint64_t v279 = v277[48].u32[0];
      if (!v279) {
        goto LABEL_431;
      }
      LODWORD(v280) = (v279 - 1) & ((v276 >> 4) ^ (v276 >> 9));
      int v281 = (llvm::MachineInstr **)(*(void *)&v278 + 16 * v280);
      unint64_t v282 = *v281;
      if (*v281 != v276) {
        break;
      }
LABEL_432:
      if (v281 != (llvm::MachineInstr **)(*(void *)&v278 + 16 * v279))
      {
        unint64_t v285 = (unint64_t)v281[1] & 0xFFFFFFFFFFFFFFF8;
        void *v281 = (llvm::MachineInstr *)-8192;
        v277[47] = vadd_s32(v277[47], (int32x2_t)0x1FFFFFFFFLL);
        *(void *)(v285 + 16) = 0;
      }
      llvm::MachineInstr::eraseFromParent(v276);
      if (++v274 == (llvm::MachineInstr **)v275) {
        goto LABEL_435;
      }
    }
    int v283 = 1;
    while (v282 != (llvm::MachineInstr *)-4096)
    {
      int v284 = v280 + v283++;
      uint64_t v280 = v284 & (v279 - 1);
      unint64_t v282 = *(llvm::MachineInstr **)(*(void *)&v278 + 16 * v280);
      if (v282 == v276)
      {
        int v281 = (llvm::MachineInstr **)(*(void *)&v278 + 16 * v280);
        goto LABEL_432;
      }
    }
LABEL_431:
    int v281 = (llvm::MachineInstr **)(*(void *)&v278 + 16 * v279);
    goto LABEL_432;
  }
LABEL_435:
  int v286 = (void *)v389[41];
  char v412 = v28;
  if (v286 != v389 + 40)
  {
    while (1)
    {
      v437 = &v439;
      uint64_t v438 = 0x800000000;
      int v428 = 0;
      uint64_t v429 = 0;
      uint64_t v287 = v286 + 6;
      uint64_t v288 = v286[7];
      if ((void *)v288 != v286 + 6) {
        break;
      }
LABEL_544:
      unint64_t v352 = v286[7];
      if ((void *)v352 == v287)
      {
        char v353 = 0;
      }
      else
      {
        char v353 = 0;
        while (1)
        {
          uint64_t v354 = v352;
          if (!v352 || (unint64_t v355 = v352, (*(unsigned char *)v352 & 4) == 0))
          {
            unint64_t v355 = v352;
            if ((*(_WORD *)(v352 + 44) & 8) != 0)
            {
              unint64_t v355 = v352;
              do
                unint64_t v355 = *(void *)(v355 + 8);
              while ((*(_WORD *)(v355 + 44) & 8) != 0);
            }
          }
          unint64_t v352 = *(void *)(v355 + 8);
          if ((void *)v352 == v287) {
            break;
          }
          if (((*(uint64_t (**)(void *, void))(*a1 + 184))(a1, **(unsigned __int16 **)(v354 + 16)) & 1) != 0
            || (*(unsigned char *)(*(void *)(v354 + 16) + 9) & 0x20) != 0)
          {
            uint64_t v356 = *(void *)(v354 + 32);
            if (!*(unsigned char *)v356)
            {
              v437 = (uint64_t *)v352;
              uint64_t v357 = *(void *)(*(void *)(v354 + 24) + 32);
              if (v357)
              {
                uint64_t v358 = *(void *)(v357 + 728);
                if (v358)
                {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v358 + 32))(v358, v354);
                  uint64_t v356 = *(void *)(v354 + 32);
                }
                uint64_t v359 = *(unsigned int *)(v354 + 40);
                if (v359)
                {
                  uint64_t v360 = *(void *)(v357 + 40);
                  uint64_t v361 = 32 * v359;
                  do
                  {
                    if (!*(unsigned char *)v356)
                    {
                      uint64_t v362 = *(unsigned int *)(v356 + 4);
                      if ((v362 & 0x80000000) != 0) {
                        uint64_t v363 = (uint64_t *)(*(void *)(v360 + 24) + 16 * (v362 & 0x7FFFFFFF) + 8);
                      }
                      else {
                        uint64_t v363 = (uint64_t *)(*(void *)(v360 + 272) + 8 * v362);
                      }
                      uint64_t v364 = *v363;
                      uint64_t v366 = *(void *)(v356 + 16);
                      uint64_t v365 = *(void *)(v356 + 24);
                      if (v356 != *v363) {
                        uint64_t v363 = (uint64_t *)(v366 + 24);
                      }
                      uint64_t *v363 = v365;
                      if (v365) {
                        uint64_t v367 = v365;
                      }
                      else {
                        uint64_t v367 = v364;
                      }
                      *(void *)(v367 + 16) = v366;
                      *(void *)(v356 + 16) = 0;
                      *(void *)(v356 + 24) = 0;
                    }
                    v356 += 32;
                    v361 -= 32;
                  }
                  while (v361);
                  uint64_t v356 = *(void *)(v354 + 32);
                }
              }
              *(void *)(v354 + 24) = 0;
              uint64_t v368 = *(unint64_t **)(v354 + 8);
              unint64_t v369 = *(void *)v354 & 0xFFFFFFFFFFFFFFF8;
              unint64_t *v368 = v369 | *v368 & 7;
              *(void *)(v369 + 8) = v368;
              *(void *)v354 &= 7uLL;
              *(void *)(v354 + 8) = 0;
              sub_1CBC08B08(a1, (unint64_t *)&v437, v354, *(_DWORD *)(v356 + 4));
              unint64_t v370 = v437;
              uint64_t v371 = v286[5];
              *(void *)(v354 + 24) = v371;
              uint64_t v372 = *(void *)(v371 + 32);
              uint64_t v373 = *(unsigned int *)(v354 + 40);
              if (v373)
              {
                uint64_t v376 = *(void *)(v354 + 32);
                uint64_t v377 = *(void *)(v372 + 40);
                uint64_t v378 = 32 * v373;
                do
                {
                  if (!*(unsigned char *)v376)
                  {
                    uint64_t v379 = *(unsigned int *)(v376 + 4);
                    if ((int)v379 >= 0) {
                      unsigned int v380 = (uint64_t *)(*(void *)(v377 + 272) + 8 * v379);
                    }
                    else {
                      unsigned int v380 = (uint64_t *)(*(void *)(v377 + 24) + 16 * (v379 & 0x7FFFFFFF) + 8);
                    }
                    uint64_t v381 = *v380;
                    if (*v380)
                    {
                      uint64_t v382 = *(void *)(v381 + 16);
                      *(void *)(v381 + 16) = v376;
                      *(void *)(v376 + 16) = v382;
                      if (*(unsigned char *)(v376 + 3))
                      {
                        *(void *)(v376 + 24) = v381;
                      }
                      else
                      {
                        *(void *)(v376 + 24) = 0;
                        unsigned int v380 = (uint64_t *)(v382 + 24);
                      }
                    }
                    else
                    {
                      *(void *)(v376 + 16) = v376;
                      *(void *)(v376 + 24) = 0;
                    }
                    uint64_t *v380 = v376;
                  }
                  v376 += 32;
                  v378 -= 32;
                }
                while (v378);
              }
              uint64_t v374 = *(void *)(v372 + 728);
              if (v374) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v374 + 24))(v374, v354);
              }
              unint64_t v375 = *v370 & 0xFFFFFFFFFFFFFFF8;
              *(void *)uint64_t v354 = v375 | *(void *)v354 & 7;
              *(void *)(v354 + 8) = v370;
              *(void *)(v375 + 8) = v354;
              *unint64_t v370 = *v370 & 7 | v354;
              if (v370 != (uint64_t *)v352)
              {
                llvm::LiveIntervals::handleMove((llvm::LiveIntervals *)a1[35], (llvm::MachineInstr *)v354, 0);
                char v353 = 1;
              }
            }
          }
        }
      }
      v412 |= v353;
      int v286 = (void *)v286[1];
      if (v286 == v389 + 40) {
        goto LABEL_593;
      }
    }
    int v407 = v286;
    uint64_t v289 = 0;
    int v290 = 0;
    while (1)
    {
      if (!v288 || (uint64_t v291 = v288, (*(unsigned char *)v288 & 4) == 0))
      {
        uint64_t v291 = v288;
        if ((*(_WORD *)(v288 + 44) & 8) != 0)
        {
          uint64_t v291 = v288;
          do
            uint64_t v291 = *(void *)(v291 + 8);
          while ((*(_WORD *)(v291 + 44) & 8) != 0);
        }
      }
      int v292 = *(void **)(v291 + 8);
      uint64_t v293 = *(unsigned __int16 **)(v288 + 16);
      int v294 = *v293;
      BOOL v296 = (v294 - 9) <= 0x3C && ((1 << (v294 - 9)) & 0x1000000000000605) != 0
          || v294 == 0;
      if (!v296 && (v293[4] & 0x10) == 0)
      {
        if (((*(uint64_t (**)(void *, uint64_t))(*a1 + 192))(a1, v288) & 1) == 0)
        {
          uint64_t v288 = 0;
          int v428 = 0;
          goto LABEL_458;
        }
        if (++v290 >= 0xF)
        {
          uint64_t v289 = 0;
          int v428 = 0;
        }
        if ((*(unsigned int (**)(void *, void))(*a1 + 280))(a1, **(unsigned __int16 **)(v288 + 16)))
        {
          int v297 = *(_DWORD *)(*(void *)(v288 + 32) + 4);
          if (v297 < 0)
          {
            uint64_t v298 = v297 & 0x7FFFFFFF;
            unint64_t v299 = *(void *)(*(void *)(a1[34] + 24) + 16 * v298) & 0xFFFFFFFFFFFFFFF8;
            if ((*(uint64_t (**)(void *))(*a1 + 232))(a1) != v299
              || (uint64_t v300 = a1[34], (v301 = *(void *)(*(void *)(v300 + 24) + 16 * v298 + 8)) == 0)
              || (*(unsigned char *)(v301 + 3) & 1) == 0
              && ((uint64_t v301 = *(void *)(v301 + 24)) == 0 || (*(unsigned char *)(v301 + 3) & 1) == 0))
            {
              uint64_t v288 = v289;
              goto LABEL_458;
            }
            uint64_t v302 = *(void *)(v301 + 24);
            if (!v302 || (*(unsigned char *)(v302 + 3) & 1) == 0)
            {
              if (!v289)
              {
                int v290 = 0;
                int v428 = (uint64_t *)v288;
                goto LABEL_458;
              }
              uint64_t v429 = v288;
              if (**(_WORD **)(v289 + 16) == 518) {
                uint64_t v303 = 0;
              }
              else {
                uint64_t v303 = *(unsigned __int16 *)(*(void *)(v289 + 32) + 80);
              }
              if (**(_WORD **)(v288 + 16) == 518) {
                uint64_t v304 = 0;
              }
              else {
                uint64_t v304 = *(unsigned __int16 *)(*(void *)(v288 + 32) + 80);
              }
              uint64_t v305 = a1;
              uint64_t v306 = (*(uint64_t (**)(void *))(*a1 + 240))(a1);
              unsigned int v307 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v300, "", 0);
              unsigned int v308 = v307;
              unint64_t v404 = v307 & 0x7FFFFFFF;
              *(void *)(*(void *)(v300 + 24) + 16 * v404) = v306 & 0xFFFFFFFFFFFFFFFBLL;
              uint64_t v309 = *(void *)(v300 + 8);
              if (v309)
              {
                unsigned int v329 = v307;
                (*(void (**)(uint64_t, void))(*(void *)v309 + 24))(v309, v307);
                unsigned int v307 = v329;
              }
              uint64_t v310 = v303 | (v304 << 16);
              char v311 = 1;
              int v401 = sub_1CBAECAFC(v305[32], *(void *)(v289 + 24), (unint64_t *)v289, v310, v307, 0, 1, (unsigned __int8 **)(v289 + 56), 0);
              uint64_t v312 = 0;
              uint64_t v313 = v305;
              while (2)
              {
                char v314 = v311;
                uint64_t v315 = *(unsigned int *)((&v428)[v312][4] + 4);
                unsigned int v431 = (unsigned int **)v433;
                uint64_t v432 = 0x800000000;
                uint64_t v316 = v313[34];
                if ((v315 & 0x80000000) != 0) {
                  uint64_t v317 = (uint64_t *)(*(void *)(v316 + 24) + 16 * (v315 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v317 = (uint64_t *)(*(void *)(v316 + 272) + 8 * v315);
                }
                uint64_t v318 = *v317;
                if (*v317)
                {
                  while ((*(unsigned char *)(v318 + 3) & 1) != 0)
                  {
                    uint64_t v318 = *(void *)(v318 + 24);
                    if (!v318) {
                      goto LABEL_504;
                    }
                  }
                  LODWORD(v319) = 0;
                  unsigned int v320 = 8;
LABEL_485:
                  if (v319 >= v320) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v431[v319] = (unsigned int *)v318;
                  uint64_t v319 = (v432 + 1);
                  LODWORD(v432) = v432 + 1;
                  while (1)
                  {
                    uint64_t v318 = *(void *)(v318 + 24);
                    if (!v318) {
                      break;
                    }
                    if ((*(unsigned char *)(v318 + 3) & 1) == 0)
                    {
                      unsigned int v320 = HIDWORD(v432);
                      goto LABEL_485;
                    }
                  }
                  unsigned int v321 = v431;
                  if (v319)
                  {
                    char v410 = v314;
                    uint64_t v322 = 8 * v319;
                    while (1)
                    {
                      unint64_t v323 = *v321;
                      uint64_t v324 = (*(uint64_t (**)(void *, uint64_t))(*v313 + 264))(v313, v312);
                      if (v324)
                      {
                        LOWORD(v325) = v324;
                        if (((*v323 >> 8) & 0xFFF) != 0)
                        {
                          int v325 = (*(uint64_t (**)(void, uint64_t))(*(void *)v413[33] + 208))(v413[33], v324);
                          llvm::MachineOperand::setReg((uint64_t)v323, v308);
                          if (!v325) {
                            goto LABEL_498;
                          }
                        }
                        else
                        {
                          llvm::MachineOperand::setReg((uint64_t)v323, v308);
                        }
                        *unint64_t v323 = *v323 & 0xFFF000FF | ((v325 & 0xFFF) << 8);
                      }
                      else
                      {
                        llvm::MachineOperand::setReg((uint64_t)v323, v308);
                      }
LABEL_498:
                      ++v321;
                      v322 -= 8;
                      uint64_t v313 = v413;
                      if (!v322)
                      {
                        unsigned int v321 = v431;
                        char v314 = v410;
                        break;
                      }
                    }
                  }
                  if (v321 != v433) {
                    free(v321);
                  }
                }
LABEL_504:
                char v311 = 0;
                uint64_t v312 = 1;
                if ((v314 & 1) == 0)
                {
                  sub_1CB914C88(*(void *)(v313[35] + 288), (uint64_t)v401, 0);
                  uint64_t v326 = v313[35];
                  unint64_t v327 = *(unsigned int *)(v326 + 416);
                  BOOL v174 = v404 >= v327;
                  unint64_t v328 = v404 - v327;
                  if (v174) {
                    sub_1CB9153B8(v326 + 408, v328 + 1, *(void *)(v326 + 424));
                  }
                  operator new();
                }
                continue;
              }
            }
          }
        }
      }
      uint64_t v288 = v289;
LABEL_458:
      uint64_t v289 = v288;
      uint64_t v288 = (uint64_t)v292;
      if (v292 == v287)
      {
        uint64_t v330 = v437;
        uint64_t v331 = &v437[v438];
        if (!v438)
        {
LABEL_541:
          if (v330 != &v439) {
            free(v330);
          }
          int v286 = v407;
          goto LABEL_544;
        }
        while (1)
        {
          uint64_t v336 = (llvm::MachineInstr *)*v330;
          uint64_t v337 = a1[35];
          uint64_t v338 = *(_DWORD *)(*(void *)(*v330 + 32) + 4) & 0x7FFFFFFF;
          uint64_t v339 = *(void *)(v337 + 408);
          uint64_t v340 = *(void *)(v339 + 8 * v338);
          if (v340)
          {
            uint64_t v335 = *(void *)(v340 + 104);
            if (v335)
            {
              do
              {
                uint64_t v332 = *(void *)(v335 + 96);
                uint64_t v333 = *(void *)(v335 + 104);
                *(void *)(v335 + 96) = 0;
                if (v332)
                {
                  sub_1CB833A08(v332, *(void **)(v332 + 8));
                  MEMORY[0x1D25D9CE0](v332, 0x1020C4062D53EE8);
                }
                unsigned int v334 = *(void **)(v335 + 64);
                if (v334 != (void *)(v335 + 80)) {
                  free(v334);
                }
                if (*(void *)v335 != v335 + 16) {
                  free(*(void **)v335);
                }
                uint64_t v335 = v333;
              }
              while (v333);
            }
            uint64_t v341 = *(void *)(v340 + 96);
            *(void *)(v340 + 96) = 0;
            *(void *)(v340 + 104) = 0;
            if (v341)
            {
              sub_1CB833A08(v341, *(void **)(v341 + 8));
              MEMORY[0x1D25D9CE0](v341, 0x1020C4062D53EE8);
            }
            uint64_t v342 = *(void **)(v340 + 64);
            if (v342 != (void *)(v340 + 80)) {
              free(v342);
            }
            if (*(void *)v340 != v340 + 16) {
              free(*(void **)v340);
            }
            MEMORY[0x1D25D9CE0](v340, 0x10A0C408DA535C6);
            uint64_t v339 = *(void *)(v337 + 408);
          }
          *(void *)(v339 + 8 * v338) = 0;
          a1 = v413;
          __int16 v343 = *(int32x2_t **)(v413[35] + 288);
          int32x2_t v344 = v343[46];
          uint64_t v345 = v343[48].u32[0];
          if (!v345) {
            goto LABEL_536;
          }
          LODWORD(v346) = (v345 - 1) & ((v336 >> 4) ^ (v336 >> 9));
          int v347 = (llvm::MachineInstr **)(*(void *)&v344 + 16 * v346);
          uint64_t v348 = *v347;
          if (*v347 != v336) {
            break;
          }
LABEL_537:
          if (v347 != (llvm::MachineInstr **)(*(void *)&v344 + 16 * v345))
          {
            unint64_t v351 = (unint64_t)v347[1] & 0xFFFFFFFFFFFFFFF8;
            *int v347 = (llvm::MachineInstr *)-8192;
            v343[47] = vadd_s32(v343[47], (int32x2_t)0x1FFFFFFFFLL);
            *(void *)(v351 + 16) = 0;
          }
          llvm::MachineInstr::eraseFromParent(v336);
          if (++v330 == v331)
          {
            uint64_t v330 = v437;
            goto LABEL_541;
          }
        }
        int v349 = 1;
        while (v348 != (llvm::MachineInstr *)-4096)
        {
          int v350 = v346 + v349++;
          uint64_t v346 = v350 & (v345 - 1);
          uint64_t v348 = *(llvm::MachineInstr **)(*(void *)&v344 + 16 * v346);
          if (v348 == v336)
          {
            int v347 = (llvm::MachineInstr **)(*(void *)&v344 + 16 * v346);
            goto LABEL_537;
          }
        }
LABEL_536:
        int v347 = (llvm::MachineInstr **)(*(void *)&v344 + 16 * v345);
        goto LABEL_537;
      }
    }
  }
LABEL_593:
  if (v445 != (llvm::MachineInstr **)v447) {
    free(v445);
  }
  int v383 = v451;
  if (v452)
  {
    uint64_t v384 = v451 - 3;
    uint64_t v385 = 4 * v452;
    do
    {
      uint64_t v386 = v384[v385];
      if ((v386 & 4) != 0)
      {
        unsigned __int16 v387 = (void **)(v386 & 0xFFFFFFFFFFFFFFF8);
        if ((v386 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (*v387 != v387 + 2) {
            free(*v387);
          }
          MEMORY[0x1D25D9CE0](v387, 0x1080C40ED926357);
        }
      }
      v385 -= 4;
    }
    while (v385 * 8);
    int v383 = v451;
  }
  if (v383 != v453) {
    free(v383);
  }
  if ((v448 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v449, 8);
  }
  if (v420 >= 0x41 && v419) {
    MEMORY[0x1D25D9CB0](v419, 0x1000C8000313F17);
  }
  if (v422 >= 0x41 && v421) {
    MEMORY[0x1D25D9CB0](v421, 0x1000C8000313F17);
  }
  if (v424 >= 0x41 && v423) {
    MEMORY[0x1D25D9CB0](v423, 0x1000C8000313F17);
  }
  return v412 & 1;
}

BOOL sub_1CBC086DC(uint64_t a1, int a2)
{
  return (a2 - 6717) < 6;
}

uint64_t sub_1CBC086F0()
{
  return 0;
}

uint64_t sub_1CBC086F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 **)(a2 + 16);
  int v3 = *v2;
  BOOL v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  if (v5 || (v2[4] & 0x10) != 0) {
    return 1;
  }
  else {
    return v2[8] & 1;
  }
}

uint64_t sub_1CBC08744()
{
  return 0;
}

uint64_t sub_1CBC0874C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 3) & 1;
}

uint64_t sub_1CBC0875C(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 16) >> 1) & 1;
}

BOOL sub_1CBC0876C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int16 **)(a2 + 16);
  int v3 = *v2;
  BOOL v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  return !v5 && (v2[4] & 0x10) == 0 && (v2[8] & 1) == 0;
}

_UNKNOWN ***sub_1CBC087BC()
{
  return &off_1E66AF970;
}

__int16 ***sub_1CBC087C8()
{
  return &off_1E66AF580;
}

BOOL sub_1CBC087D4(uint64_t a1, int a2)
{
  return (a2 - 1) < 2;
}

uint64_t sub_1CBC087E4(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_1CBC087F4(uint64_t a1, int a2)
{
  if (a2) {
    return 2;
  }
  else {
    return 1;
  }
}

uint64_t sub_1CBC08804(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = **(unsigned __int16 **)(a2 + 16);
  if (v3 == 517)
  {
    int v4 = 518;
    goto LABEL_9;
  }
  if (v3 == 5622)
  {
    if (*(unsigned char *)(*(void *)(a2 + 32) + 64) == 1)
    {
      int v4 = 5623;
      goto LABEL_9;
    }
  }
  else if (v3 == 5625 && *(unsigned char *)(*(void *)(a2 + 32) + 64) == 1)
  {
    int v4 = 5626;
LABEL_9:
    *a3 = v4;
    return 1;
  }
  return 0;
}

uint64_t sub_1CBC08874(uint64_t a1, int a2)
{
  BOOL v2 = a2 == 5623 || a2 == 5626;
  return a2 == 518 || v2;
}

void sub_1CBC0889C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  if (a2 != 517)
  {
    uint64_t v4 = *(void *)(a4 + 32);
    uint64_t v5 = *(uint64_t *)(v4 + 80) >> 16;
    if (a3 == 1) {
      uint64_t v5 = (unsigned __int16)*(void *)(v4 + 80);
    }
    *(void *)(v4 + 80) = v5;
  }
}

uint64_t sub_1CBC088C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 176))(a1, **(unsigned __int16 **)(a2 + 16)) & 1) != 0
    || !sub_1CBC08EC0(a1, a3))
  {
    return 1;
  }
  uint64_t v6 = *(unsigned int *)(a3 + 40);
  if (!v6) {
    return 0;
  }
  unsigned int v7 = 0;
  unsigned int v8 = *(unsigned __int16 *)(*(void *)(a3 + 16) + 6);
  uint64_t v9 = *(void *)(*(void *)(a1 + 304) + 40);
  int v10 = *(_DWORD *)(*(void *)(a2 + 32) + 4);
  for (uint64_t i = *(int **)(a3 + 32); ; i += 8)
  {
    int v12 = *i;
    if (*i == 1 || !*i && (v12 & 0x1000000) != 0) {
      goto LABEL_11;
    }
    if ((v12 & 0x10000FF) == 0 && i[1] == v10) {
      break;
    }
    ++v7;
LABEL_11:
    if (!--v6) {
      return 0;
    }
  }
  unint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 272) + 24) + 16 * (v10 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 248) + 176))(*(void *)(a1 + 248));
  if ((*(_DWORD *)(*(void *)(v15 + 264)
                  + 24
                  * (*(unsigned __int16 *)(*(void *)v14 + 24)
                   + *(_DWORD *)(v15 + 272) * ((*(void *)(v15 + 248) - *(void *)(v15 + 240)) >> 3))
                  + 4) & 0xFFFFFFF8) != 0x10
    && (*i & 0xFFF00) == 0)
  {
    uint64_t v25 = v9 + 24 * v8;
    int v26 = *(unsigned __int16 *)(v25 + 20);
    if (*(_WORD *)(v25 + 20))
    {
      int64_t v20 = (unsigned int *)(*(void *)(*(void *)(a1 + 248) + 152) + 12 * *(unsigned __int16 *)(v25 + 18));
      BOOL v21 = &v20[3 * v26];
      goto LABEL_25;
    }
    return 1;
  }
  uint64_t v16 = v9 + 24 * v8;
  uint64_t v17 = *(unsigned __int16 *)(v16 + 20);
  if (*(_WORD *)(v16 + 20))
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 248) + 152);
    unsigned int v19 = *(unsigned __int16 *)(v16 + 18);
    int64_t v20 = (unsigned int *)(v18 + 12 * *(unsigned __int16 *)(v16 + 18));
    BOOL v21 = &v20[3 * v17];
    unint64_t v22 = (_DWORD *)(v18 + 12 * v19 + 8);
    uint64_t v23 = 12 * v17;
    do
    {
      unsigned int v24 = *(v22 - 2);
      if (v24 >= v7)
      {
        if (v24 > v7) {
          break;
        }
        if (!*(v22 - 1))
        {
          if ((*v22 & 0x80000000) == 0) {
            break;
          }
          return 2;
        }
      }
      v22 += 3;
      v23 -= 12;
    }
    while (v23);
LABEL_25:
    do
    {
      if (*v20 >= v7)
      {
        if (*v20 > v7) {
          return 1;
        }
        if (!v20[1]) {
          break;
        }
      }
      v20 += 3;
    }
    while (v20 != v21);
    if (v20[2]) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1CBC08B08(void *a1, unint64_t *a2, uint64_t a3, int a4)
{
  unint64_t v8 = *a2;
  int v32 = (*(uint64_t (**)(void *, void))(*a1 + 176))(a1, **(unsigned __int16 **)(a3 + 16));
  uint64_t v31 = (uint64_t *)a2;
  uint64_t v9 = *(void *)(*a2 + 24);
  int v10 = (*(uint64_t (**)(void *, uint64_t, unint64_t))(*a1 + 296))(a1, a3, v8);
  int v11 = 0;
  while (1)
  {
    uint64_t v12 = v8;
    if (((*(uint64_t (**)(void *, unint64_t))(*a1 + 224))(a1, v8) & 1) != 0
      || *(void *)(v9 + 56) == v8)
    {
      return 0;
    }
    uint64_t v13 = *(void *)v8;
    unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
    if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v8 & 4) == 0)
    {
      while ((*(_WORD *)(v8 + 44) & 4) != 0)
        unint64_t v8 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = v12;
    if ((v13 & 4) == 0)
    {
      uint64_t v14 = v12;
      if ((*(_WORD *)(v12 + 44) & 8) != 0)
      {
        uint64_t v14 = v12;
        do
          uint64_t v14 = *(void *)(v14 + 8);
        while ((*(_WORD *)(v14 + 44) & 8) != 0);
      }
    }
    uint64_t v15 = *(void *)(v14 + 8);
    int v16 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 200))(a1, v12);
    int v17 = (*(uint64_t (**)(void *, unint64_t))(*a1 + 200))(a1, v8);
    if (v32 && ((*(unsigned int (**)(void *, uint64_t))(*a1 + 208))(a1, v12) ^ 1 | v17) != 1) {
      goto LABEL_48;
    }
    if (v10)
    {
      uint64_t *v31 = v12;
      goto LABEL_17;
    }
    if (sub_1CBC08EC0((uint64_t)a1, v8))
    {
      if (sub_1CBC08EC0((uint64_t)a1, v12))
      {
        uint64_t v20 = *(void *)(v8 + 32);
        if (!*(unsigned char *)v20
          && (*(_WORD *)(*(void *)(a1[38] + 40) + 24 * *(unsigned __int16 *)(*(void *)(v8 + 16) + 6) + 8) & 0x1FFF) == 1)
        {
          uint64_t v21 = *(unsigned int *)(v12 + 40);
          if (v21 >= 2) {
            break;
          }
        }
      }
    }
LABEL_37:
    if ((sub_1CBC08EC0((uint64_t)a1, v8) & v16) == 1 && v15 != v9 + 48)
    {
      if ((*(unsigned int (**)(void *, uint64_t))(*a1 + 208))(a1, v15))
      {
        uint64_t v25 = *(void *)(v8 + 32);
        if (!*(unsigned char *)v25)
        {
          uint64_t v26 = *(unsigned int *)(v15 + 40);
          if (v26 >= 2)
          {
            int v27 = *(_DWORD *)(v25 + 4);
            uint64_t v28 = v26 - 1;
            int v29 = (_DWORD *)(*(void *)(v15 + 32) + 36);
            while (*((unsigned char *)v29 - 4) || *v29 != v27)
            {
              v29 += 8;
              if (!--v28) {
                goto LABEL_17;
              }
            }
            goto LABEL_48;
          }
        }
      }
    }
LABEL_17:
    if (a4)
    {
      uint64_t v18 = *(unsigned int *)(v8 + 40);
      if (v18)
      {
        unsigned int v19 = (_DWORD *)(*(void *)(v8 + 32) + 4);
        while (*((unsigned char *)v19 - 4) || *v19 != a4)
        {
          v19 += 8;
          if (!--v18) {
            goto LABEL_23;
          }
        }
        return 0;
      }
    }
LABEL_23:
    if (v10) {
      --v10;
    }
    else {
      int v10 = 0;
    }
    if (++v11 == 6) {
      return 0;
    }
  }
  int v22 = *(_DWORD *)(v20 + 4);
  uint64_t v23 = v21 - 1;
  unsigned int v24 = (_DWORD *)(*(void *)(v12 + 32) + 36);
  while (*((unsigned char *)v24 - 4) || *v24 != v22)
  {
    v24 += 8;
    if (!--v23) {
      goto LABEL_37;
    }
  }
LABEL_48:
  uint64_t *v31 = v12;
  return 1;
}

uint64_t sub_1CBC08EC0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(unsigned __int16 **)(a2 + 16);
  int v3 = *v2;
  BOOL v5 = (v3 - 9) <= 0x3C && ((1 << (v3 - 9)) & 0x1000000000000605) != 0 || v3 == 0;
  if (v5 || (v2[4] & 0x2010) != 0) {
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
  if (result) {
    return (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 200))(a1, a2) ^ 1;
  }
  return result;
}

uint64_t sub_1CBC08F84()
{
  int v4 = 1;
  *(void *)&long long v3 = "Use scaling rematerializations limit (100000 virtual registers) or user a supplied value that grows w"
                   "ith program size beyond that value";
  *((void *)&v3 + 1) = 135;
  int v1 = 100000;
  BOOL v2 = &v1;
  sub_1CD413D64((uint64_t)&unk_1EBCC1888, "agx3-rematerialize-large-programs", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &unk_1EBCC1888, &dword_1CB82C000);
}

void sub_1CBC09018()
{
}

void sub_1CBC090B4()
{
}

void sub_1CBC09158(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  BOOL v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    BOOL v5 = a1;
    free(v2);
    a1 = v5;
  }
  long long v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC0920C(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  BOOL v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  long long v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBC092B8()
{
  return "AGX3 ROC/WB Cache Control Pass";
}

void sub_1CBC092C8(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

BOOL sub_1CBC0933C(uint64_t a1, uint64_t a2)
{
  v319[24] = *MEMORY[0x1E4F143B8];
  BOOL v2 = *(unsigned __int8 **)(a2 + 16);
  int v223 = v2[282];
  if (!v2[282]) {
    return v223 != 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1970, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1970))
  {
    byte_1EBCC1958 = 0;
    __cxa_guard_release(&qword_1EBCC1970);
  }
  if (!byte_1EBCC1958)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1978, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1978))
    {
      dword_1EBCC195C = 6;
      __cxa_guard_release(&qword_1EBCC1978);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1980, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1980))
    {
      dword_1EBCC1960 = 2;
      __cxa_guard_release(&qword_1EBCC1980);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1988, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1988))
    {
      dword_1EBCC1964 = 3;
      __cxa_guard_release(&qword_1EBCC1988);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1990, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1990))
    {
      dword_1EBCC1968 = 2;
      __cxa_guard_release(&qword_1EBCC1990);
    }
    uint64_t v227 = a2;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1998, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1998))
    {
      byte_1EBCC1959 = 1;
      __cxa_guard_release(&qword_1EBCC1998);
    }
    int v23 = v2[391];
    unsigned __int8 v286 = v2[395];
    sub_1CBC0AE44((uint64_t)v282, (uint64_t)v2, 0);
    sub_1CBC0AE44((uint64_t)v278, (uint64_t)v2, 2);
    unsigned int v226 = (const llvm::TargetSubtargetInfo *)v2;
    sub_1CBC0AE44((uint64_t)v274, (uint64_t)v2, 1);
    *(void *)&v297[0] = v282;
    uint64_t v310 = v312;
    uint64_t v311 = 0x300000000;
    sub_1CBC0B0A0((unsigned int *)&v310, v297, 1);
    int v235 = v23;
    if (v23)
    {
      *(void *)&v297[0] = v278;
      *((void *)&v297[0] + 1) = v274;
      sub_1CBC0B0A0((unsigned int *)&v310, v297, 2);
    }
    unsigned int v24 = (char *)v310;
    uint64_t v225 = a2 + 320;
    if (*(void *)(a2 + 328) != a2 + 320)
    {
      uint64_t v25 = *(void *)(a2 + 328);
      int v26 = 0;
      uint64_t v241 = **(void **)v310;
      do
      {
        uint64_t v27 = v25 + 48;
        uint64_t v228 = v25;
        uint64_t v229 = v25 + 48;
        uint64_t v28 = *(void *)(v25 + 56);
        while (v28 != v27)
        {
          int v29 = *(unsigned __int16 **)(v28 + 16);
          uint64_t v30 = *((void *)v29 + 2);
          if ((v30 & 0x400000000) != 0)
          {
            int v31 = *v29;
            uint64_t v32 = sub_1CBE52E8C(v31);
            if ((v32 & 0xFF00000000) == 0
              || ((v32 - 51) <= 0x18 ? (BOOL v33 = ((1 << (v32 - 51)) & 0x1F80007) == 0) : (BOOL v33 = 1), v33))
            {
              BOOL v34 = (v31 - 9) > 0x3C || ((1 << (v31 - 9)) & 0x1000000000000605) == 0;
              BOOL v36 = !v34 || v31 == 0 || (v29[4] & 0x10) != 0 || v30 & 1;
              int v238 = *(_DWORD *)(v28 + 40);
              if (v238)
              {
                unsigned int v37 = 0;
                if (v36) {
                  uint64_t v38 = 0x100000000;
                }
                else {
                  uint64_t v38 = 0;
                }
                uint64_t v231 = v38 | (v26 + 1);
                uint64_t v243 = v28;
                while (1)
                {
                  if (sub_1CBC2D2EC(v28, v37, (void *)(v241 + 8)) == 1)
                  {
                    char v39 = sub_1CBC0CFB8(**(_WORD **)(v28 + 16), v37);
                    int v40 = sub_1CBC0CE48((llvm::MachineInstr *)v28, v37);
                    if (v311) {
                      break;
                    }
                  }
LABEL_100:
                  if (++v37 == v238) {
                    goto LABEL_101;
                  }
                }
                char v41 = v40;
                int v42 = (char *)v310;
                uint64_t v245 = (char *)v310 + 8 * v311;
                uint64_t v43 = 0x10000000000;
                if (!v40) {
                  uint64_t v43 = 0;
                }
                uint64_t v44 = v231 | v43;
                unsigned int v250 = v37;
                while (1)
                {
                  uint64_t v45 = *(void *)v42;
                  sub_1CBAF9B1C(v297, (void *)v28, v37, v241, 0, 0);
                  unint64_t v46 = *(void *)&v297[0];
                  int v47 = DWORD2(v297[0]);
                  uint64_t v48 = HIDWORD(*(void *)&v297[0]);
                  if (DWORD2(v297[0]) != DWORD1(v297[0])) {
                    break;
                  }
LABEL_86:
                  v42 += 8;
                  uint64_t v28 = v243;
                  unsigned int v37 = v250;
                  if (v42 == v245) {
                    goto LABEL_100;
                  }
                }
                while (2)
                {
                  int v49 = *(_DWORD *)(v45 + 24);
                  if (v39)
                  {
                    if (v49 == 2) {
                      goto LABEL_97;
                    }
                  }
                  else if (v49 == 1)
                  {
                    goto LABEL_97;
                  }
                  uint64_t v50 = *(void *)(v45 + 8) + 24 * v48;
                  unint64_t v51 = *(unsigned int *)(v50 + 8);
                  if (v51 && (uint64_t v52 = *(void *)v50 + 8 * v51, *(_DWORD *)(v52 - 8) > v26))
                  {
                    *(unsigned char *)(v52 - 3) |= v41;
                  }
                  else
                  {
                    if (v51 >= *(unsigned int *)(v50 + 12)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    *(void *)(*(void *)v50 + 8 * v51) = v44;
                    ++*(_DWORD *)(v50 + 8);
                  }
LABEL_97:
                  unint64_t v46 = (v46 & 0xFFFFFFFF00000000) + 0x100000000;
                  uint64_t v48 = HIDWORD(v46);
                  if (v47 == HIDWORD(v46)) {
                    goto LABEL_86;
                  }
                  continue;
                }
              }
            }
          }
LABEL_101:
          if ((*(unsigned char *)v28 & 4) == 0)
          {
            while ((*(_WORD *)(v28 + 44) & 8) != 0)
              uint64_t v28 = *(void *)(v28 + 8);
          }
          uint64_t v28 = *(void *)(v28 + 8);
          ++v26;
          uint64_t v27 = v229;
        }
        uint64_t v25 = *(void *)(v228 + 8);
      }
      while (v25 != v225);
      unsigned int v24 = (char *)v310;
    }
    if (v311)
    {
      BOOL v53 = &v24[8 * v311];
      do
      {
        unsigned int v54 = *(_DWORD *)(*(void *)v24 + 16);
        if (v54)
        {
          __int16 v55 = *(void **)(*(void *)v24 + 8);
          uint64_t v56 = &v55[3 * v54];
          do
          {
            v55[2] = *v55;
            v55 += 3;
          }
          while (v55 != v56);
        }
        v24 += 8;
      }
      while (v24 != v53);
    }
    uint64_t v273 = 0;
    uint64_t v244 = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(void *)v226 + 176))(v226);
    memset(&v297[2], 0, 32);
    v297[0] = llvm::MCSchedModel::Default;
    v297[1] = unk_1CFB28DE0;
    long long v300 = unk_1CFB28DE0;
    long long v301 = xmmword_1CFB28DF0;
    long long v302 = unk_1CFB28E00;
    uint64_t v298 = 0;
    uint64_t v303 = 0;
    long long v299 = llvm::MCSchedModel::Default;
    long long v306 = 0u;
    long long v305 = 0u;
    long long v304 = 0u;
    unsigned int v307 = v309;
    uint64_t v308 = 0x1000000000;
    v309[8] = 0;
    llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v297, v226);
    int v57 = dword_1EBCC195C;
    int v58 = dword_1EBCC1960;
    v269[0] = "WB";
    __int16 v270 = 259;
    int v271 = &v273;
    uint64_t v272 = 0;
    if (dword_1EBCC1960)
    {
      unsigned int v59 = 0;
      unsigned int v60 = 0;
      int v61 = 0;
      while (1)
      {
        if (v60 >= v59)
        {
          if (v59 == -1) {
LABEL_442:
          }
            sub_1CD0A89A8(0xFFFFFFFFuLL);
          unint64_t v63 = (2 * v59) | 1;
          if (v63 >= 0xFFFFFFFF) {
            unint64_t v63 = 0xFFFFFFFFLL;
          }
          int v230 = v63;
          uint64_t v64 = (char *)malloc_type_malloc(40 * v63, 0x4065EBACuLL);
          if (!v64) {
LABEL_443:
          }
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          unsigned int v65 = v64;
          int v66 = &v64[40 * v272];
          *(_DWORD *)int v66 = v57;
          *((_DWORD *)v66 + 8) = 0;
          *((void *)v66 + 1) = v297;
          *((void *)v66 + 2) = v66 + 32;
          *((void *)v66 + 3) = 0;
          uint64_t v67 = v271;
          if (v272)
          {
            uint64_t v68 = (char *)v271 + 40 * v272;
            uint64_t v69 = v65;
            uint64_t v70 = (char *)v271;
            unint64_t v242 = v68;
            unint64_t v232 = v65;
            do
            {
              *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
              *((void *)v69 + 2) = v69 + 32;
              *((void *)v69 + 3) = 0;
              if (v69 != v70)
              {
                unint64_t v71 = *((unsigned int *)v70 + 6);
                if (v71)
                {
                  uint64_t v72 = (char *)*((void *)v70 + 2);
                  if (v72 == v70 + 32)
                  {
                    int v239 = *((_DWORD *)v70 + 6);
                    sub_1CBC0D144((char **)v69 + 2, v71);
                    uint64_t v75 = *((void *)v70 + 2);
                    uint64_t v76 = *((unsigned int *)v70 + 6);
                    if (v76)
                    {
                      unint64_t v233 = v69;
                      unint64_t v236 = v70;
                      uint64_t v77 = 0;
                      uint64_t v78 = *((void *)v69 + 2);
                      uint64_t v79 = 56 * v76;
                      uint64_t v246 = 56 * v76;
                      uint64_t v251 = v78;
                      do
                      {
                        uint64_t v80 = v78 + v77;
                        uint64_t v81 = v75 + v77;
                        uint64_t v82 = (void *)(v78 + v77 + 16);
                        *(void *)uint64_t v80 = v82;
                        *(void *)(v80 + 8) = 0x300000000;
                        if (v75 != v78)
                        {
                          unint64_t v83 = *(unsigned int *)(v81 + 8);
                          if (*(_DWORD *)(v81 + 8))
                          {
                            uint64_t v84 = v75 + v77;
                            uint64_t v86 = v75 + v77 + 16;
                            unsigned int v85 = *(const void **)(v75 + v77);
                            if ((const void *)v86 == v85)
                            {
                              if (v83 >= 4) {
                                llvm::SmallVectorBase<unsigned int>::grow_pod();
                              }
                              memcpy(v82, v85, 8 * *(unsigned int *)(v81 + 8));
                              *(_DWORD *)(v80 + 8) = v83;
                              uint64_t v79 = v246;
                              uint64_t v78 = v251;
                            }
                            else
                            {
                              *(void *)uint64_t v80 = v85;
                              *(_DWORD *)(v80 + 8) = v83;
                              *(_DWORD *)(v80 + 12) = *(_DWORD *)(v84 + 12);
                              *(void *)uint64_t v84 = v86;
                              *(_DWORD *)(v84 + 12) = 0;
                            }
                            *(_DWORD *)(v81 + 8) = 0;
                          }
                        }
                        *(void *)(v80 + 40) = *(void *)(v81 + 40);
                        int v87 = *(_DWORD *)(v81 + 48);
                        *(unsigned char *)(v80 + 52) = *(unsigned char *)(v81 + 52);
                        *(_DWORD *)(v80 + 48) = v87;
                        v77 += 56;
                      }
                      while (v79 != v77);
                      uint64_t v70 = v236;
                      uint64_t v75 = *((void *)v236 + 2);
                      unsigned int v65 = v232;
                      uint64_t v69 = v233;
                    }
                    int v74 = v69;
                    *((_DWORD *)v69 + 6) = v239;
                    uint64_t v88 = *((unsigned int *)v70 + 6);
                    if (v88)
                    {
                      uint64_t v89 = 56 * v88;
                      do
                      {
                        uint64_t v90 = *(void **)(v75 + v89 - 56);
                        if ((void *)(v75 + v89 - 40) != v90) {
                          free(v90);
                        }
                        v89 -= 56;
                      }
                      while (v89);
                    }
                  }
                  else
                  {
                    int v73 = *((_DWORD *)v70 + 7);
                    *((void *)v69 + 2) = v72;
                    *((_DWORD *)v69 + 6) = v71;
                    *((_DWORD *)v69 + 7) = v73;
                    int v74 = v69;
                    *((void *)v70 + 2) = v70 + 32;
                    *((_DWORD *)v70 + 7) = 0;
                  }
                  *((_DWORD *)v70 + 6) = 0;
                  uint64_t v68 = v242;
                  uint64_t v69 = v74;
                }
              }
              *((_DWORD *)v69 + 8) = *((_DWORD *)v70 + 8);
              v70 += 40;
              v69 += 40;
            }
            while (v70 != v68);
            uint64_t v67 = v271;
            unsigned int v91 = v272;
          }
          else
          {
            unsigned int v91 = 0;
          }
          sub_1CBC0D0B4((uint64_t)v67, (uint64_t)v67 + 40 * v91);
          if (v271 != &v273) {
            free(v271);
          }
          int v271 = v65;
          HIDWORD(v272) = v230;
        }
        else
        {
          unint64_t v62 = (char *)v271 + 40 * v60;
          *(_DWORD *)unint64_t v62 = v57;
          *((_DWORD *)v62 + 8) = 0;
          *((void *)v62 + 1) = v297;
          *((void *)v62 + 2) = v62 + 32;
          *((void *)v62 + 3) = 0;
        }
        unsigned int v60 = v272 + 1;
        LODWORD(v272) = v272 + 1;
        if (++v61 == v58) {
          break;
        }
        unsigned int v59 = HIDWORD(v272);
      }
      int v57 = dword_1EBCC195C;
      int v92 = dword_1EBCC1960;
    }
    else
    {
      int v92 = 0;
    }
    *(void *)&long long v264 = "WB";
    __int16 v265 = 259;
    sub_1CBC0B120((uint64_t)v266, &v264, 1, v57, v92, v244);
    v263[0] = &v286;
    v263[1] = v269;
    v263[2] = v266;
    *(void *)&v258[0] = "ROC";
    __int16 v259 = 259;
    sub_1CBC0B120((uint64_t)v260, v258, 0, dword_1EBCC1964, 6, v244);
    *(void *)&long long v253 = "POC";
    __int16 v254 = 259;
    sub_1CBC0B120((uint64_t)v255, &v253, 0, dword_1EBCC1968, 2, v244);
    uint64_t v93 = *(void *)(v227 + 328);
    if (v93 == v225)
    {
LABEL_392:
      sub_1CBC0D32C((char *)v256, (char *)v256 + 24 * v257);
      if (v256 != v258) {
        free(v256);
      }
      sub_1CBC0D32C((char *)v261, (char *)v261 + 24 * v262);
      if (v261 != v263) {
        free(v261);
      }
      sub_1CBC0D32C((char *)v267, (char *)v267 + 24 * v268);
      if (v267 != v269) {
        free(v267);
      }
      sub_1CBC0D0B4((uint64_t)v271, (uint64_t)v271 + 40 * v272);
      if (v271 != &v273) {
        free(v271);
      }
      if (v307 != v309) {
        free(v307);
      }
      if (v310 != v312) {
        free(v310);
      }
      uint64_t v210 = (char *)v275;
      if (v276)
      {
        uint64_t v211 = 24 * v276;
        do
        {
          unint64_t v212 = *(char **)&v210[v211 - 24];
          if (&v210[v211 - 8] != v212) {
            free(v212);
          }
          v211 -= 24;
        }
        while (v211);
        uint64_t v210 = (char *)v275;
      }
      if (v210 != (char *)&v277) {
        free(v210);
      }
      unint64_t v213 = (char *)v279;
      if (v280)
      {
        uint64_t v214 = 24 * v280;
        do
        {
          unsigned int v215 = *(char **)&v213[v214 - 24];
          if (&v213[v214 - 8] != v215) {
            free(v215);
          }
          v214 -= 24;
        }
        while (v214);
        unint64_t v213 = (char *)v279;
      }
      if (v213 != (char *)&v281) {
        free(v213);
      }
      int v216 = (char *)v283;
      if (v284)
      {
        uint64_t v217 = 24 * v284;
        do
        {
          uint64_t v218 = *(char **)&v216[v217 - 24];
          if (&v216[v217 - 8] != v218) {
            free(v218);
          }
          v217 -= 24;
        }
        while (v217);
        int v216 = (char *)v283;
      }
      if (v216 != (char *)&v285) {
        free(v216);
      }
      return v223 != 0;
    }
    int v94 = 0;
    uint64_t v95 = 0;
    int v240 = 0;
    int v96 = &unk_1EBCC1000;
    while (1)
    {
      uint64_t v97 = v93 + 48;
      uint64_t v224 = v93;
      uint64_t v98 = *(void *)(v93 + 56);
      uint64_t v234 = v93 + 48;
      if (v98 != v93 + 48) {
        break;
      }
LABEL_391:
      uint64_t v93 = *(void *)(v224 + 8);
      if (v93 == v225) {
        goto LABEL_392;
      }
    }
    while (1)
    {
      int v99 = v94;
      if (v286) {
        sub_1CBC0B45C((uint64_t)v271, v272);
      }
      ++v94;
      if ((*(unsigned char *)(*(void *)(v98 + 16) + 20) & 4) == 0)
      {
        uint64_t v100 = v95;
        int v101 = v240;
        goto LABEL_163;
      }
      uint64_t v237 = v95;
      if (v96[2393] && sub_1CBC2D6DC(&v273, v98, v244, 0))
      {
        if (v272)
        {
          uint64_t v102 = (char *)v271;
          unsigned int v103 = (char *)v271 + 40 * v272;
          do
          {
            uint64_t v104 = *((unsigned int *)v102 + 6);
            if (v104)
            {
              uint64_t v105 = *((void *)v102 + 2);
              uint64_t v106 = 56 * v104;
              do
              {
                unint64_t v107 = *(void **)(v105 + v106 - 56);
                if ((void *)(v105 + v106 - 40) != v107) {
                  free(v107);
                }
                v106 -= 56;
              }
              while (v106);
            }
            *((_DWORD *)v102 + 6) = 0;
            *((_DWORD *)v102 + 8) = 0;
            v102 += 40;
          }
          while (v102 != v103);
        }
        if (v268)
        {
          unint64_t v108 = (char *)v267;
          uint64_t v109 = (char *)v267 + 24 * v268;
          do
          {
            uint64_t v110 = *((unsigned int *)v108 + 4);
            if (v110)
            {
              uint64_t v111 = *((void *)v108 + 1);
              uint64_t v112 = 48 * v110;
              do
              {
                uint64_t v113 = *(void **)(v111 + v112 - 48);
                if ((void *)(v111 + v112 - 32) != v113) {
                  free(v113);
                }
                v112 -= 48;
              }
              while (v112);
            }
            *((_DWORD *)v108 + 4) = 0;
            v108 += 24;
          }
          while (v108 != v109);
        }
        if (v262)
        {
          uint64_t v114 = (char *)v261;
          unsigned int v115 = (char *)v261 + 24 * v262;
          do
          {
            uint64_t v116 = *((unsigned int *)v114 + 4);
            if (v116)
            {
              uint64_t v117 = *((void *)v114 + 1);
              uint64_t v118 = 48 * v116;
              do
              {
                uint64_t v119 = *(void **)(v117 + v118 - 48);
                if ((void *)(v117 + v118 - 32) != v119) {
                  free(v119);
                }
                v118 -= 48;
              }
              while (v118);
            }
            *((_DWORD *)v114 + 4) = 0;
            v114 += 24;
          }
          while (v114 != v115);
        }
        if (v257)
        {
          int v120 = (char *)v256;
          int v121 = (char *)v256 + 24 * v257;
          do
          {
            uint64_t v122 = *((unsigned int *)v120 + 4);
            if (v122)
            {
              uint64_t v123 = *((void *)v120 + 1);
              uint64_t v124 = 48 * v122;
              do
              {
                uint64_t v125 = *(void **)(v123 + v124 - 48);
                if ((void *)(v123 + v124 - 32) != v125) {
                  free(v125);
                }
                v124 -= 48;
              }
              while (v124);
            }
            *((_DWORD *)v120 + 4) = 0;
            v120 += 24;
          }
          while (v120 != v121);
        }
      }
      uint64_t v126 = *(unsigned __int16 **)(v98 + 16);
      int v127 = *v126;
      uint64_t v128 = sub_1CBE52E8C(v127);
      if ((v128 & 0xFF00000000) != 0 && (v128 - 51) <= 0x18 && ((1 << (v128 - 51)) & 0x1F80007) != 0)
      {
        uint64_t v100 = v98;
        int v101 = v99 + 1;
        uint64_t v97 = v234;
        if (v237)
        {
          uint64_t v100 = v98;
          int v101 = v99 + 1;
          if (v99 == v240)
          {
            BOOL v130 = sub_1CBC2FDB8(v237, v98);
            uint64_t v100 = v98;
            int v101 = v99 + 1;
            if (v130)
            {
              if (llvm::MachineInstr::getNumExplicitOperands(v237))
              {
                unsigned int v131 = *(unsigned __int16 **)(v237 + 16);
                if ((word_1CDF77000[dword_1CDF6DEF0[*v131]] & 0xFFFB) == 0x3A)
                {
                  unsigned int v134 = 2;
                }
                else
                {
                  uint64_t v132 = *(_DWORD **)(v237 + 32);
                  if ((*v132 & 0x10000FF) == 0x1000000)
                  {
                    unsigned int v205 = *((unsigned __int8 *)v131 + 4);
                    if ((v131[4] & 2) == 0 || (int v207 = *(_DWORD *)(v237 + 40), v207 == v205))
                    {
                      unsigned int v134 = v205;
                    }
                    else
                    {
                      int v208 = v207 - 1;
                      unsigned int v134 = v205;
                      do
                      {
                        int v209 = v132[8 * v205];
                        if ((v209 & 0x10000FF) != 0x1000000) {
                          break;
                        }
                        v134 += (v209 & 0x2000000) == 0;
                        if (v208 == v205) {
                          break;
                        }
                        ++v205;
                      }
                      while ((v209 & 0x2000000) == 0);
                    }
                  }
                  else if (*v132 == 7 || *v132 == 0)
                  {
                    unsigned int v134 = 1;
                  }
                  else
                  {
                    unsigned int v134 = -1;
                  }
                }
              }
              else
              {
                unsigned int v134 = -1;
              }
              uint64_t v206 = *(void *)(v237 + 32) + 32 * v134;
              *(void *)(v206 + 16) |= 0x20uLL;
              uint64_t v100 = v98;
              int v101 = v99 + 1;
            }
          }
        }
        goto LABEL_163;
      }
      BOOL v136 = (v127 - 9) <= 0x3C && ((1 << (v127 - 9)) & 0x1000000000000605) != 0
          || v127 == 0;
      if (!v136 && (v126[4] & 0x10) == 0 && (v126[8] & 1) == 0)
      {
        uint64_t v100 = v237;
        int v101 = v240;
        uint64_t v97 = v234;
        goto LABEL_163;
      }
      int v294 = v296;
      uint64_t v295 = 0x400000000;
      LOBYTE(__dst) = 0;
      char v293 = 0;
      __base = v319;
      size_t __nel = 0x800000000;
      uint64_t v137 = *(unsigned int *)(v98 + 40);
      int v252 = v94;
      if (v137)
      {
        uint64_t v138 = 0;
        for (uint64_t i = 0; i != v137; ++i)
        {
          int v140 = sub_1CBC2D2EC(v98, i, (void *)(v244 + 8));
          if (v140 == 1)
          {
            sub_1CBAF9B1C(&v287, (void *)v98, i, v244, 0, 0);
            unsigned __int8 v142 = sub_1CBC0CFB8(**(_WORD **)(v98 + 16), i);
            __src.n128_u32[0] = v288;
            __src.n128_u64[1] = *(void *)(v98 + 32) + v138;
            LOBYTE(v314[0]) = v142;
            sub_1CBC0D590((uint64_t)&__base, &__src);
            __n128 __src = (__n128)HIDWORD(v288);
            v314[0] = v142;
            sub_1CBC0D590((uint64_t)&__base, &__src);
          }
          else if (v140 == 2)
          {
            sub_1CBAF9B1C(&v287, (void *)v98, i, v244, 0, 0);
            __src.n128_u64[0] = (unint64_t)v314;
            uint64_t v141 = v138 + *(void *)(v98 + 32);
            v314[0] = v141;
            __src.n128_u64[1] = 0x300000001;
            uint64_t v315 = v288;
            if (v293)
            {
              if (v290)
              {
                *(void *)__dst = v141;
              }
              else
              {
                if (!HIDWORD(v290))
                {
                  LODWORD(v290) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(__dst, (const void *)__src.n128_u64[0], 8uLL);
              }
              LODWORD(v290) = 1;
              uint64_t v292 = v315;
              if ((void *)__src.n128_u64[0] != v314) {
                free((void *)__src.n128_u64[0]);
              }
            }
            else
            {
              __dst = v291;
              uint64_t v290 = 0x300000001;
              v291[0] = v141;
              uint64_t v292 = v315;
              char v293 = 1;
            }
          }
          v138 += 32;
        }
        uint64_t v143 = __nel;
        uint64_t v144 = (char *)__base;
        if (__nel >= 2)
        {
          qsort(__base, __nel, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1CBC0D63C);
          uint64_t v144 = (char *)__base;
          uint64_t v143 = __nel;
        }
        int v94 = v252;
        __src.n128_u64[0] = (unint64_t)v314;
        __src.n128_u64[1] = 0x300000000;
        if (v143)
        {
          unsigned __int32 v145 = 0;
          int v146 = 0;
          uint64_t v147 = &v144[24 * v143];
          do
          {
            uint64_t v148 = *((void *)v144 + 1);
            if (v148)
            {
              if (!v145) {
                LODWORD(v315) = *(_DWORD *)v144;
              }
              if (v145 >= __src.n128_u32[3]) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(__src.n128_u64[0] + 8 * v145) = v148;
              unsigned __int32 v145 = ++__src.n128_u32[2];
              char v316 = v144[16];
              ++v146;
            }
            else if (!--v146)
            {
              HIDWORD(v315) = *(_DWORD *)v144;
              int v149 = v295;
              uint64_t v150 = (char *)v294;
              if (v295 >= HIDWORD(v295))
              {
                unint64_t v156 = v295 + 1;
                BOOL v158 = v294 <= &__src && (char *)v294 + 56 * v295 > (char *)&__src;
                if (v158) {
                  uint64_t v159 = 0x6DB6DB6DB6DB6DB7 * (((char *)&__src - (unsigned char *)v294) >> 3);
                }
                else {
                  uint64_t v159 = -1;
                }
                if (v295 == -1) {
                  sub_1CD0A88F0(v156);
                }
                if (HIDWORD(v295) == -1) {
                  goto LABEL_442;
                }
                unint64_t v160 = (2 * HIDWORD(v295)) | 1;
                if (v160 <= v156) {
                  unint64_t v160 = v295 + 1;
                }
                if (v160 >= 0xFFFFFFFF) {
                  uint64_t v161 = 0xFFFFFFFFLL;
                }
                else {
                  uint64_t v161 = v160;
                }
                int v162 = (char *)malloc_type_malloc(56 * v161, 0x4065EBACuLL);
                if (!v162) {
                  goto LABEL_443;
                }
                uint64_t v150 = v162;
                unint64_t v163 = (char *)v294;
                if (v295)
                {
                  int v220 = v161;
                  BOOL v221 = v158;
                  uint64_t v222 = v159;
                  uint64_t v164 = 0;
                  uint64_t v165 = 56 * v295;
                  unint64_t v247 = (char *)v294;
                  do
                  {
                    uint64_t v166 = &v150[v164];
                    uint64_t v167 = &v163[v164];
                    unsigned int v168 = &v150[v164 + 16];
                    *(void *)uint64_t v166 = v168;
                    *((void *)v166 + 1) = 0x300000000;
                    if (v163 != v150)
                    {
                      unint64_t v169 = *((unsigned int *)v167 + 2);
                      if (*((_DWORD *)v167 + 2))
                      {
                        int v170 = &v163[v164];
                        uint64_t v172 = (uint64_t)&v163[v164 + 16];
                        unint64_t v171 = *(const void **)&v163[v164];
                        if ((const void *)v172 == v171)
                        {
                          if (v169 >= 4) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          unsigned int v173 = *((_DWORD *)v167 + 2);
                          memcpy(v168, v171, 8 * v173);
                          uint64_t v166 = &v150[v164];
                          *(_DWORD *)&v150[v164 + 8] = v173;
                          unint64_t v163 = v247;
                        }
                        else
                        {
                          *(void *)uint64_t v166 = v171;
                          *((_DWORD *)v166 + 2) = v169;
                          *((_DWORD *)v166 + 3) = *((_DWORD *)v170 + 3);
                          *(void *)int v170 = v172;
                          *((_DWORD *)v170 + 3) = 0;
                        }
                        *((_DWORD *)v167 + 2) = 0;
                      }
                    }
                    *((void *)v166 + 5) = *((void *)v167 + 5);
                    v166[48] = v167[48];
                    v164 += 56;
                  }
                  while (v165 != v164);
                  unint64_t v163 = (char *)v294;
                  if (v295)
                  {
                    BOOL v174 = v150;
                    uint64_t v175 = 56 * v295;
                    uint64_t v159 = v222;
                    BOOL v158 = v221;
                    do
                    {
                      uint64_t v176 = *(char **)&v163[v175 - 56];
                      if (&v163[v175 - 40] != v176)
                      {
                        unsigned int v177 = v163;
                        free(v176);
                        unint64_t v163 = v177;
                      }
                      v175 -= 56;
                    }
                    while (v175);
                    unint64_t v163 = (char *)v294;
                    uint64_t v150 = v174;
                  }
                  else
                  {
                    uint64_t v159 = v222;
                    BOOL v158 = v221;
                  }
                  LODWORD(v161) = v220;
                }
                if (v163 != v296) {
                  free(v163);
                }
                int v294 = v150;
                HIDWORD(v295) = v161;
                BOOL v178 = !v158;
                if (v158) {
                  p_src = (__n128 *)&v150[56 * v159];
                }
                else {
                  p_src = &__src;
                }
                if (v178) {
                  unint64_t v152 = &__src.n128_u64[1];
                }
                else {
                  unint64_t v152 = (unint64_t *)&v150[56 * v159 + 8];
                }
                int v149 = v295;
              }
              else
              {
                p_src = &__src;
                unint64_t v152 = &__src.n128_u64[1];
              }
              uint64_t v153 = (__n128 *)&v150[56 * v149];
              v153->n128_u64[0] = (unint64_t)v153[1].n128_u64;
              v153->n128_u64[1] = 0x300000000;
              unint64_t v154 = *(unsigned int *)v152;
              if (v153 != p_src && v154 != 0)
              {
                if (v154 >= 4) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(&v153[1], (const void *)p_src->n128_u64[0], 8 * *(unsigned int *)v152);
                v153->n128_u32[2] = v154;
              }
              unsigned __int32 v145 = 0;
              int v146 = 0;
              v153[2].n128_u64[1] = p_src[2].n128_u64[1];
              v150[56 * v149 + 48] = p_src[3].n128_i8[0];
              LODWORD(v295) = v295 + 1;
              __src.n128_u32[2] = 0;
            }
            v144 += 24;
          }
          while (v144 != v147);
          int v94 = v252;
          if ((void *)__src.n128_u64[0] != v314) {
            free((void *)__src.n128_u64[0]);
          }
        }
      }
      if (__base != v319) {
        free(__base);
      }
      if (v295) {
        break;
      }
LABEL_362:
      int v96 = (unsigned char *)&unk_1EBCC1000;
      if (v293)
      {
        sub_1CBC0B4C8((uint64_t)v263, (unsigned int *)&__dst, 0, v94, (uint64_t)v282);
        if (v293)
        {
          if (__dst != v291) {
            free(__dst);
          }
        }
      }
      uint64_t v202 = (char *)v294;
      if (v295)
      {
        uint64_t v203 = 56 * v295;
        do
        {
          int v204 = *(char **)&v202[v203 - 56];
          if (&v202[v203 - 40] != v204) {
            free(v204);
          }
          v203 -= 56;
        }
        while (v203);
        uint64_t v202 = (char *)v294;
      }
      if (v202 != v296) {
        free(v202);
      }
      uint64_t v100 = v237;
      int v101 = v240;
      uint64_t v97 = v234;
      if (!v98)
      {
LABEL_377:
        while ((*(_WORD *)(v98 + 44) & 8) != 0)
          uint64_t v98 = *(void *)(v98 + 8);
        goto LABEL_378;
      }
LABEL_163:
      if ((*(unsigned char *)v98 & 4) == 0) {
        goto LABEL_377;
      }
LABEL_378:
      uint64_t v98 = *(void *)(v98 + 8);
      int v240 = v101;
      uint64_t v95 = v100;
      if (v98 == v97) {
        goto LABEL_391;
      }
    }
    uint64_t v179 = (unsigned int *)v294;
    unint64_t v248 = (unsigned int *)((char *)v294 + 56 * v295);
    while (v235)
    {
      int v180 = *((unsigned __int8 *)v179 + 48);
      BOOL v181 = *((unsigned char *)v179 + 48) != 0;
      int v182 = 1;
      if (sub_1CBC0B4C8((uint64_t)v263, v179, 1, v94, (uint64_t)v282)) {
        goto LABEL_323;
      }
      if (!v180)
      {
        uint64_t v184 = v278;
LABEL_325:
        int v183 = sub_1CBC0C224((uint64_t)v260, (uint64_t)v179, 1, v94, (uint64_t)v184);
        int v182 = 0;
        BOOL v181 = 0;
        goto LABEL_326;
      }
      BOOL v181 = 1;
      int v183 = sub_1CBC0C224((uint64_t)v255, (uint64_t)v179, 1, v94, (uint64_t)v274);
      int v182 = 0;
LABEL_326:
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC19A0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCC19A0))
      {
        byte_1EBCC195A = 0;
        __cxa_guard_release(&qword_1EBCC19A0);
      }
      if (byte_1EBCC195A)
      {
        uint64_t v185 = v179[2];
        if (v185)
        {
          uint64_t v186 = *(void *)v179;
          uint64_t v187 = *(void *)v179 + 8 * v185;
          uint64_t v188 = 0x4000;
          if (v181) {
            uint64_t v188 = 49152;
          }
          if (v182) {
            uint64_t v188 = 0x8000;
          }
          if (v183) {
            uint64_t v189 = v188;
          }
          else {
            uint64_t v189 = 0;
          }
          while (1)
          {
            uint64_t v190 = *(void *)(*(void *)v186 + 8);
            uint64_t v191 = *(void *)(v190 + 32);
            unint64_t v192 = *(void *)v186 - v191;
            unint64_t v193 = v192 >> 5;
            if (llvm::MachineInstr::getNumExplicitOperands(v190) <= (v192 >> 5)) {
              break;
            }
            int v194 = *(unsigned __int16 **)(v190 + 16);
            if ((word_1CDF77000[dword_1CDF6DEF0[*v194] + (unsigned __int16)v193] & 0xFFFB) == 0x3A)
            {
              unsigned int v196 = v193 + 2;
            }
            else
            {
              if ((*(_DWORD *)(v191 + (v192 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
              {
                unsigned int v197 = *((unsigned __int8 *)v194 + 4);
                if ((v194[4] & 2) == 0 || (int v199 = *(_DWORD *)(v190 + 40), v199 == v197))
                {
                  unsigned int v198 = v197;
                }
                else
                {
                  int v200 = v199 - 1;
                  unsigned int v198 = v197;
                  do
                  {
                    int v201 = *(_DWORD *)(v191 + 32 * v197);
                    if ((v201 & 0x10000FF) != 0x1000000) {
                      break;
                    }
                    v198 += (v201 & 0x2000000) == 0;
                    if (v200 == v197) {
                      break;
                    }
                    ++v197;
                  }
                  while ((v201 & 0x2000000) == 0);
                }
                unsigned int v196 = v198 + v193;
                goto LABEL_348;
              }
              if (*(_DWORD *)(v191 + (v192 & 0x1FFFFFFFE0))) {
                BOOL v195 = *(_DWORD *)(v191 + (v192 & 0x1FFFFFFFE0)) == 7;
              }
              else {
                BOOL v195 = 1;
              }
              if (!v195) {
                break;
              }
              unsigned int v196 = v193 + 1;
            }
LABEL_348:
            *(void *)(v191 + 32 * v196 + 16) |= v189;
            v186 += 8;
            if (v186 == v187) {
              goto LABEL_358;
            }
          }
          unsigned int v196 = -1;
          goto LABEL_348;
        }
      }
LABEL_358:
      v179 += 14;
      int v94 = v252;
      if (v179 == v248) {
        goto LABEL_362;
      }
    }
    int v182 = 1;
    uint64_t v184 = v282;
    if ((sub_1CBC0B4C8((uint64_t)v263, v179, 1, v94, (uint64_t)v282) & 1) == 0) {
      goto LABEL_325;
    }
    BOOL v181 = 0;
LABEL_323:
    int v183 = 1;
    goto LABEL_326;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 328);
  uint64_t v249 = a2 + 320;
  if (v5 != a2 + 320)
  {
    uint64_t v6 = (void *)(v4 + 8);
    do
    {
      for (uint64_t j = *(void *)(v5 + 56); j != v5 + 48; uint64_t j = *(void *)(j + 8))
      {
        unint64_t v8 = *(unsigned __int16 **)(j + 16);
        if ((*((void *)v8 + 2) & 0x400000000) != 0)
        {
          int v9 = *v8;
          BOOL v10 = (v9 - 9) > 0x3C || ((1 << (v9 - 9)) & 0x1000000000000605) == 0;
          BOOL v11 = !v10 || v9 == 0;
          if (v11 || *((void *)v8 + 1) & 0x10 | *((void *)v8 + 2) & 1)
          {
            uint64_t v12 = *(unsigned int *)(j + 40);
            if (v12)
            {
              unint64_t v13 = 0;
              while (2)
              {
                if (sub_1CBC2D2EC(j, v13, v6) - 3 < 0xFFFFFFFE
                  || (sub_1CBC0CE48((llvm::MachineInstr *)j, v13) & 1) != 0)
                {
                  goto LABEL_30;
                }
                if (v13 >= llvm::MachineInstr::getNumExplicitOperands(j))
                {
LABEL_40:
                  unsigned int v16 = -1;
                }
                else
                {
                  uint64_t v14 = *(unsigned __int16 **)(j + 16);
                  if ((word_1CDF77000[dword_1CDF6DEF0[*v14] + (unsigned __int16)v13] & 0xFFFB) == 0x3A)
                  {
                    unsigned int v16 = v13 + 2;
                  }
                  else
                  {
                    uint64_t v15 = *(void *)(j + 32);
                    if ((*(_DWORD *)(v15 + 32 * v13) & 0x10000FF) == 0x1000000)
                    {
                      unsigned int v17 = *((unsigned __int8 *)v14 + 4);
                      if ((v14[4] & 2) == 0 || (int v20 = *(_DWORD *)(j + 40), v20 == v17))
                      {
                        unsigned int v18 = v17;
                      }
                      else
                      {
                        int v21 = v20 - 1;
                        unsigned int v18 = v17;
                        do
                        {
                          int v22 = *(_DWORD *)(v15 + 32 * v17);
                          if ((v22 & 0x10000FF) != 0x1000000) {
                            break;
                          }
                          v18 += (v22 & 0x2000000) == 0;
                          if (v21 == v17) {
                            break;
                          }
                          ++v17;
                        }
                        while ((v22 & 0x2000000) == 0);
                      }
                      unsigned int v16 = v18 + v13;
                    }
                    else
                    {
                      if (*(_DWORD *)(v15 + 32 * v13)
                        && *(_DWORD *)(v15 + 32 * v13) != 7)
                      {
                        goto LABEL_40;
                      }
                      unsigned int v16 = v13 + 1;
                    }
                  }
                }
                uint64_t v19 = *(void *)(j + 32) + 32 * v16;
                *(void *)(v19 + 16) |= 0x20uLL;
LABEL_30:
                if (++v13 == v12) {
                  break;
                }
                continue;
              }
            }
          }
        }
        if ((*(unsigned char *)j & 4) == 0)
        {
          while ((*(_WORD *)(j + 44) & 8) != 0)
            uint64_t j = *(void *)(j + 8);
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
    }
    while (v5 != v249);
  }
  return v223 != 0;
}

uint64_t sub_1CBC0AE44(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 176))(a2);
  __n128 __src = &unk_1F25FDCB8;
  uint64_t v18 = a2;
  p_src = &__src;
  int v6 = sub_1CBD854F8((uint64_t)&__src);
  if (p_src == &__src)
  {
    (*((void (**)(void **))__src + 4))(&__src);
  }
  else if (p_src)
  {
    (*((void (**)(void))*p_src + 5))();
  }
  uint64_t v7 = dword_1CDC7F3BC[v6];
  uint64_t v19 = 0;
  __n128 __src = &v19;
  uint64_t v18 = 0;
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0;
  unint64_t v8 = malloc_type_malloc(8 * (v7 + 2 * v7), 0x4065EBACuLL);
  if (!v8) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  int v9 = v8;
  BOOL v10 = (void **)v8;
  uint64_t v11 = v7;
  do
  {
    *BOOL v10 = v10 + 2;
    v10[1] = 0;
    if (v10 != &__src && v18) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v10[2] = v19;
    v10 += 3;
    --v11;
  }
  while (v11);
  uint64_t v12 = *(char **)(a1 + 8);
  uint64_t v13 = *(unsigned int *)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = 24 * v13;
    do
    {
      uint64_t v15 = *(char **)&v12[v14 - 24];
      if (&v12[v14 - 8] != v15) {
        free(v15);
      }
      v14 -= 24;
    }
    while (v14);
    uint64_t v12 = *(char **)(a1 + 8);
  }
  if (v12 != (char *)(a1 + 24)) {
    free(v12);
  }
  *(void *)(a1 + 8) = v9;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v7;
  if (__src != &v19) {
    free(__src);
  }
  *(_DWORD *)(a1 + 24) = a3;
  return a1;
}

unsigned int *sub_1CBC0B0A0(unsigned int *result, void *__src, uint64_t a3)
{
  long long v3 = result;
  size_t v4 = 8 * a3;
  uint64_t v5 = result[2];
  if (v5 + ((8 * a3) >> 3) > (unint64_t)result[3]) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a3)
  {
    uint64_t result = (unsigned int *)memcpy((void *)(*(void *)result + 8 * v5), __src, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 3);
  return result;
}

uint64_t sub_1CBC0B120(uint64_t a1, long long *a2, char a3, int a4, int a5, uint64_t a6)
{
  long long v7 = *a2;
  long long v8 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v7;
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 40) = a3;
  int v9 = (void *)(a1 + 72);
  *(void *)(a1 + 48) = a6;
  *(void *)(a1 + 56) = a1 + 72;
  *(void *)(a1 + 64) = 0;
  if (a5)
  {
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    int v14 = 0;
    while (1)
    {
      if (v13 >= v12)
      {
        if (v12 == -1) {
          sub_1CD0A89A8(0xFFFFFFFFuLL);
        }
        unint64_t v16 = (2 * v12) | 1;
        if (v16 >= 0xFFFFFFFF) {
          unint64_t v16 = 0xFFFFFFFFLL;
        }
        int v50 = v16;
        unsigned int v17 = (char *)malloc_type_malloc(24 * v16, 0x4065EBACuLL);
        if (!v17) {
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        uint64_t v18 = v17;
        uint64_t v19 = &v17[24 * *(unsigned int *)(a1 + 64)];
        *(_DWORD *)uint64_t v19 = a4;
        *((void *)v19 + 1) = v19 + 24;
        *((void *)v19 + 2) = 0;
        int v20 = *(char **)(a1 + 56);
        int v21 = *(_DWORD *)(a1 + 64);
        if (v21)
        {
          int v49 = v9;
          int v22 = &v20[24 * v21];
          int v23 = v18;
          uint64_t v24 = *(void *)(a1 + 56);
          __int16 v55 = v22;
          unint64_t v51 = v18;
          do
          {
            *(_DWORD *)int v23 = *(_DWORD *)v24;
            uint64_t v25 = v23 + 24;
            *((void *)v23 + 1) = v23 + 24;
            int v26 = (uint64_t *)(v23 + 8);
            *((void *)v23 + 2) = 0;
            if (v23 != (char *)v24)
            {
              unint64_t v27 = *(unsigned int *)(v24 + 16);
              if (v27)
              {
                uint64_t v28 = *(void *)(v24 + 8);
                uint64_t v56 = v23 + 24;
                if (v28 == v24 + 24)
                {
                  int v54 = *(_DWORD *)(v24 + 16);
                  sub_1CBC0D3B8((char **)v23 + 1, v27);
                  uint64_t v30 = *(void *)(v24 + 8);
                  uint64_t v31 = *(unsigned int *)(v24 + 16);
                  if (v31)
                  {
                    uint64_t v52 = v23;
                    uint64_t v53 = v24;
                    uint64_t v32 = 0;
                    uint64_t v33 = *v26;
                    uint64_t v34 = 48 * v31;
                    uint64_t v57 = 48 * v31;
                    uint64_t v58 = *v26;
                    do
                    {
                      uint64_t v35 = v33 + v32;
                      uint64_t v36 = v30 + v32;
                      unsigned int v37 = (void *)(v33 + v32 + 16);
                      *(void *)uint64_t v35 = v37;
                      *(void *)(v35 + 8) = 0x300000000;
                      if (v30 != v33)
                      {
                        unint64_t v38 = *(unsigned int *)(v36 + 8);
                        if (*(_DWORD *)(v36 + 8))
                        {
                          uint64_t v39 = v30 + v32;
                          uint64_t v41 = v30 + v32 + 16;
                          int v40 = *(const void **)(v30 + v32);
                          if ((const void *)v41 == v40)
                          {
                            if (v38 >= 4) {
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            memcpy(v37, v40, 8 * *(unsigned int *)(v36 + 8));
                            *(_DWORD *)(v35 + 8) = v38;
                            uint64_t v34 = v57;
                            uint64_t v33 = v58;
                          }
                          else
                          {
                            *(void *)uint64_t v35 = v40;
                            int v42 = *(_DWORD *)(v39 + 12);
                            *(_DWORD *)(v35 + 8) = v38;
                            *(_DWORD *)(v35 + 12) = v42;
                            *(void *)uint64_t v39 = v41;
                            *(_DWORD *)(v39 + 12) = 0;
                          }
                          *(_DWORD *)(v36 + 8) = 0;
                        }
                      }
                      *(void *)(v35 + 40) = *(void *)(v36 + 40);
                      v32 += 48;
                    }
                    while (v34 != v32);
                    int v23 = v52;
                    uint64_t v24 = v53;
                    uint64_t v30 = *(void *)(v53 + 8);
                    uint64_t v18 = v51;
                  }
                  *((_DWORD *)v23 + 4) = v54;
                  uint64_t v43 = *(unsigned int *)(v24 + 16);
                  if (v43)
                  {
                    uint64_t v44 = 48 * v43;
                    do
                    {
                      uint64_t v45 = *(void **)(v30 + v44 - 48);
                      if ((void *)(v30 + v44 - 32) != v45) {
                        free(v45);
                      }
                      v44 -= 48;
                    }
                    while (v44);
                  }
                }
                else
                {
                  int v29 = *(_DWORD *)(v24 + 20);
                  *((void *)v23 + 1) = v28;
                  *((_DWORD *)v23 + 4) = v27;
                  *((_DWORD *)v23 + 5) = v29;
                  *(void *)(v24 + 8) = v24 + 24;
                  *(_DWORD *)(v24 + 20) = 0;
                }
                *(_DWORD *)(v24 + 16) = 0;
                int v22 = v55;
                uint64_t v25 = v56;
              }
            }
            v24 += 24;
            int v23 = v25;
          }
          while ((char *)v24 != v22);
          int v20 = *(char **)(a1 + 56);
          int v46 = *(_DWORD *)(a1 + 64);
          int v9 = v49;
        }
        else
        {
          int v46 = 0;
        }
        sub_1CBC0D32C(v20, &v20[24 * v46]);
        int v47 = *(void **)(a1 + 56);
        if (v47 != v9) {
          free(v47);
        }
        *(void *)(a1 + 56) = v18;
        *(_DWORD *)(a1 + 68) = v50;
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 56) + 24 * v13;
        *(_DWORD *)uint64_t v15 = a4;
        *(void *)(v15 + 8) = v15 + 24;
        *(void *)(v15 + 16) = 0;
      }
      unsigned int v13 = *(_DWORD *)(a1 + 64) + 1;
      *(_DWORD *)(a1 + 64) = v13;
      if (++v14 == a5) {
        break;
      }
      unsigned int v12 = *(_DWORD *)(a1 + 68);
    }
  }
  return a1;
}

uint64_t sub_1CBC0B45C(uint64_t result, unsigned int a2)
{
  if (a2)
  {
    uint64_t v2 = result + 40 * a2;
    do
    {
      uint64_t v3 = *(unsigned int *)(result + 24);
      if (v3)
      {
        int v4 = *(_DWORD *)(result + 32);
        uint64_t v5 = 56 * v3;
        int v6 = (int *)(*(void *)(result + 16) + 48);
        do
        {
          int v7 = *v6;
          if (*v6 <= 1) {
            int v8 = 1;
          }
          else {
            int v8 = *v6;
          }
          BOOL v9 = v7 == 0;
          int v10 = v7 > 0;
          if (v9) {
            int v11 = -1;
          }
          else {
            int v11 = 0;
          }
          BOOL v12 = v8 != 0;
          int v13 = v8 - 1;
          if (v13 != 0 && v12) {
            int v10 = v11;
          }
          v4 += v10;
          *int v6 = v13;
          v6 += 14;
          v5 -= 56;
        }
        while (v5);
        *(_DWORD *)(result + 32) = v4;
      }
      result += 40;
    }
    while (result != v2);
  }
  return result;
}

uint64_t sub_1CBC0B4C8(uint64_t a1, unsigned int *a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5 = a5;
  int v6 = a4;
  int v7 = a3;
  int v8 = a2;
  v181[1] = *MEMORY[0x1E4F143B8];
  if (**(unsigned char **)a1)
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v10 = *(unsigned int *)(v9 + 48);
    unint64_t v12 = a2[10];
    LODWORD(v11) = a2[11];
    uint64_t v159 = v9;
    uint64_t v161 = v10;
    int v13 = 0;
    if (v12 < v11)
    {
      do
      {
        uint64_t v164 = *(void *)(v9 + 40);
        unsigned int v165 = v12 % v10;
        uint64_t v14 = v164 + 40 * (v12 % v10);
        uint64_t v167 = (uint64_t *)(v14 + 16);
        uint64_t v162 = v14;
        unsigned int v17 = *(_DWORD *)(v14 + 24);
        unint64_t v16 = (unsigned int *)(v14 + 24);
        unsigned int v15 = v17;
        if (v17)
        {
          uint64_t v18 = *v167;
          uint64_t v19 = *v167 + 56 * v15;
          do
          {
            uint64_t v20 = v18;
            while (v12 != *(_DWORD *)(v20 + 40))
            {
              v20 += 56;
              if (v20 == v19) {
                goto LABEL_15;
              }
            }
            while (v18 != v19)
            {
              if (v12 == *(_DWORD *)(v18 + 40))
              {
                uint64_t v19 = v18;
                break;
              }
              v18 += 56;
            }
            if (*(int *)(v19 + 48) < 5) {
              break;
            }
            sub_1CBC0B45C(*(void *)(v9 + 40), *(_DWORD *)(v9 + 48));
            uint64_t v18 = *v167;
            uint64_t v19 = *v167 + 56 * *v16;
          }
          while (*v16);
        }
LABEL_15:
        int v21 = sub_1CBC0D688(*(void *)(v5 + 8), v12, v6);
        uint64_t v22 = *v167;
        unint64_t v163 = v16;
        uint64_t v23 = *v16;
        uint64_t v24 = *v167;
        if (v23)
        {
          uint64_t v25 = 0;
          while (1)
          {
            uint64_t v24 = v22 + v25;
            if (v12 == *(_DWORD *)(v22 + v25 + 40)) {
              break;
            }
            v25 += 56;
            if (56 * v23 == v25) {
              goto LABEL_47;
            }
          }
        }
        if (v24 == v22 + 56 * v23)
        {
LABEL_47:
          int v43 = 0;
          if (v7) {
            goto LABEL_60;
          }
        }
        else
        {
          int v157 = v13;
          uint64_t v26 = *(unsigned int *)(v24 + 8);
          int v156 = v21;
          char v27 = 0;
          if (v26)
          {
            uint64_t v28 = *(void *)v24;
            uint64_t v29 = *(void *)v24 + 8 * v26;
            while (1)
            {
              uint64_t v30 = *(void *)(*(void *)v28 + 8);
              uint64_t v31 = *(void *)(v30 + 32);
              unint64_t v32 = *(void *)v28 - v31;
              unint64_t v33 = v32 >> 5;
              char v34 = sub_1CBC0CE48((llvm::MachineInstr *)v30, v32 >> 5);
              if ((v34 & 1) == 0) {
                break;
              }
LABEL_37:
              v27 |= v34 ^ 1;
              v28 += 8;
              if (v28 == v29) {
                goto LABEL_49;
              }
            }
            if (llvm::MachineInstr::getNumExplicitOperands(v30) <= v33)
            {
LABEL_46:
              unsigned int v37 = -1;
            }
            else
            {
              uint64_t v35 = *(unsigned __int16 **)(v30 + 16);
              if ((word_1CDF77000[dword_1CDF6DEF0[*v35] + (unsigned __int16)v33] & 0xFFFB) == 0x3A)
              {
                unsigned int v37 = v33 + 2;
              }
              else if ((*(_DWORD *)(v31 + (v32 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
              {
                unsigned int v38 = *((unsigned __int8 *)v35 + 4);
                if ((v35[4] & 2) == 0 || (int v40 = *(_DWORD *)(v30 + 40), v40 == v38))
                {
                  unsigned int v39 = v38;
                }
                else
                {
                  int v41 = v40 - 1;
                  unsigned int v39 = v38;
                  do
                  {
                    int v42 = *(_DWORD *)(v31 + 32 * v38);
                    if ((v42 & 0x10000FF) != 0x1000000) {
                      break;
                    }
                    v39 += (v42 & 0x2000000) == 0;
                    if (v41 == v38) {
                      break;
                    }
                    ++v38;
                  }
                  while ((v42 & 0x2000000) == 0);
                }
                unsigned int v37 = v39 + v33;
              }
              else
              {
                if (*(_DWORD *)(v31 + (v32 & 0x1FFFFFFFE0))) {
                  BOOL v36 = *(_DWORD *)(v31 + (v32 & 0x1FFFFFFFE0)) == 7;
                }
                else {
                  BOOL v36 = 1;
                }
                if (!v36) {
                  goto LABEL_46;
                }
                unsigned int v37 = v33 + 1;
              }
            }
            *(void *)(v31 + 32 * v37 + 16) |= 0x20uLL;
            goto LABEL_37;
          }
LABEL_49:
          int v44 = *(_DWORD *)(v24 + 48);
          sub_1CBC0D6E8(v162, a2, v12, v156);
          uint64_t v22 = *v167;
          uint64_t v23 = *v163;
          uint64_t v45 = *v167;
          uint64_t v5 = a5;
          int v7 = a3;
          int v6 = a4;
          uint64_t v9 = v159;
          uint64_t v10 = v161;
          if (v23)
          {
            uint64_t v46 = 56 * v23;
            uint64_t v45 = *v167;
            while (v12 != *(_DWORD *)(v45 + 40))
            {
              v45 += 56;
              v46 -= 56;
              if (!v46)
              {
                uint64_t v45 = v22 + 56 * v23;
                break;
              }
            }
          }
          int v47 = *(_DWORD *)(v45 + 48);
          BOOL v36 = v47 == 0;
          int v48 = v47 > 0;
          if (v36) {
            int v49 = -1;
          }
          else {
            int v49 = 0;
          }
          if (v44 > 0) {
            int v48 = v49;
          }
          *(_DWORD *)(v164 + 40 * v165 + 32) += v48;
          *(_DWORD *)(v45 + 48) = v44;
          *(unsigned char *)(v45 + 52) = v27 & 1;
          int v43 = 1;
          int v13 = v157;
          int v8 = a2;
          if (a3)
          {
LABEL_60:
            uint64_t v50 = *(void *)(v5 + 8) + 24 * v12;
            uint64_t v53 = *(_DWORD **)(v50 + 16);
            uint64_t v52 = (void *)(v50 + 16);
            unint64_t v51 = v53;
            if (*v53 != v6)
            {
              do
              {
                int v54 = v51[2];
                v51 += 2;
              }
              while (v54 != v6);
              *uint64_t v52 = v51;
            }
            if (*((unsigned char *)v51 + 5)) {
              BOOL v55 = v23 == 0;
            }
            else {
              BOOL v55 = 1;
            }
            if (!v55)
            {
              uint64_t v56 = (unsigned char *)(v22 + 52);
              uint64_t v57 = 56 * v23;
              while (v12 != *((_DWORD *)v56 - 3))
              {
                v56 += 56;
                v57 -= 56;
                if (!v57) {
                  goto LABEL_72;
                }
              }
              *(_DWORD *)(v164 + 40 * v165 + 32) = (__PAIR64__(*(_DWORD *)(v164 + 40 * v165 + 32), *((_DWORD *)v56 - 1))- 1) >> 32;
              *((_DWORD *)v56 - 1) = 2;
              *uint64_t v56 = 0;
            }
          }
        }
LABEL_72:
        v13 |= v43;
        ++v12;
        unint64_t v11 = v8[11];
      }
      while (v12 < v11);
    }
    if ((v7 & 1) == 0)
    {
      BOOL v178 = v181;
      int v180 = 2;
      char v158 = v13;
      if (v10 >= 3)
      {
        int v179 = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v10) {
        bzero(v181, 4 * v10);
      }
      int v179 = v10;
      uint64_t v175 = (unsigned int *)v177;
      uint64_t v176 = 0x400000000;
      uint64_t v172 = v174;
      uint64_t v173 = 0x400000000;
      unsigned int v170 = 0;
      unsigned int v58 = v8[10];
      if (v58 < v11)
      {
        do
        {
          uint64_t v59 = v58 % v10;
          uint64_t v60 = *(void *)(v159 + 40) + 40 * v59;
          uint64_t v61 = *(unsigned int *)(v60 + 24);
          if (v61)
          {
            unint64_t v62 = (int *)(*(void *)(v60 + 16) + 40);
            uint64_t v63 = 56 * v61;
            while (1)
            {
              int v64 = *v62;
              v62 += 14;
              if (v64 == v58) {
                break;
              }
              v63 -= 56;
              if (!v63) {
                goto LABEL_82;
              }
            }
            if (v173 >= (unint64_t)HIDWORD(v173)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)v172 + v173) = v58;
            LODWORD(v173) = v173 + 1;
          }
          else
          {
LABEL_82:
            if (v170 >= 4uLL) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v171[v170++] = v58;
            ++v178[v59];
          }
          ++v58;
        }
        while (v58 < v8[11]);
        if (v173)
        {
          uint64_t v67 = (unsigned int *)v172;
          uint64_t v68 = 4 * v173;
          do
          {
            unsigned int v69 = *v67++;
            uint64_t v70 = *(void *)(v159 + 40) + 40 * (v69 % v10);
            int v71 = sub_1CBC0D688(*(void *)(v5 + 8), v69, v6);
            sub_1CBC0D6E8(v70, v8, v69, v71);
            v68 -= 4;
          }
          while (v68);
        }
      }
      uint64_t v72 = v159;
      if (v10)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          uint64_t v74 = *(void *)(v72 + 40);
          uint64_t v75 = (unsigned int *)(v74 + 40 * i);
          uint64_t v76 = v178[i];
          uint64_t v77 = v75[8];
          unint64_t v78 = *v75;
          unsigned int v81 = v75[6];
          uint64_t v80 = v75 + 6;
          uint64_t v79 = v81;
          if ((unint64_t)v81 + v76 - v77 > v78)
          {
            do
            {
              sub_1CBC0B45C(v74, *(_DWORD *)(v72 + 48));
              uint64_t v74 = *(void *)(v72 + 40);
              uint64_t v82 = (unsigned int *)(v74 + 40 * i);
              uint64_t v76 = v178[i];
              uint64_t v83 = v82[8];
              unint64_t v78 = *v82;
              unsigned int v84 = v82[6];
              uint64_t v80 = v82 + 6;
              uint64_t v79 = v84;
            }
            while ((unint64_t)v84 + v76 - v83 > v78);
          }
          if (v76)
          {
            unsigned int v85 = v78 - v79;
            int v86 = v76 >= v85 ? v76 - v85 : 0;
            if (v85 < v76)
            {
              int v87 = *(uint64_t **)(v74 + 40 * i + 16);
              uint64_t v88 = v87;
              if (v79)
              {
                uint64_t v89 = 0;
                while (1)
                {
                  uint64_t v88 = &v87[v89];
                  if (!LODWORD(v87[v89 + 6]) && BYTE4(v87[v89 + 6]) == 0) {
                    break;
                  }
                  v89 += 7;
                  if (7 * v79 == v89) {
                    goto LABEL_149;
                  }
                }
              }
              uint64_t v166 = (uint64_t **)(v74 + 40 * i + 16);
              unsigned int v91 = &v87[7 * v79];
              if (v88 == v91)
              {
LABEL_149:
                uint64_t v72 = v159;
              }
              else
              {
LABEL_114:
                int v168 = v86;
                if (v176 >= (unint64_t)HIDWORD(v176)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v175[v176] = *((_DWORD *)v88 + 10);
                LODWORD(v176) = v176 + 1;
                uint64_t v92 = *((unsigned int *)v88 + 2);
                if (v92)
                {
                  uint64_t v93 = *v88;
                  uint64_t v94 = *v88 + 8 * v92;
                  while (1)
                  {
                    uint64_t v95 = *(void *)(*(void *)v93 + 8);
                    uint64_t v96 = *(void *)(v95 + 32);
                    unint64_t v97 = *(void *)v93 - v96;
                    unint64_t v98 = v97 >> 5;
                    if (llvm::MachineInstr::getNumExplicitOperands(v95) <= (v97 >> 5)) {
                      break;
                    }
                    int v99 = *(unsigned __int16 **)(v95 + 16);
                    if ((word_1CDF77000[dword_1CDF6DEF0[*v99] + (unsigned __int16)v98] & 0xFFFB) == 0x3A)
                    {
                      unsigned int v101 = v98 + 2;
                    }
                    else
                    {
                      if ((*(_DWORD *)(v96 + (v97 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
                      {
                        unsigned int v102 = *((unsigned __int8 *)v99 + 4);
                        if ((v99[4] & 2) == 0 || (int v104 = *(_DWORD *)(v95 + 40), v104 == v102))
                        {
                          unsigned int v103 = v102;
                        }
                        else
                        {
                          int v105 = v104 - 1;
                          unsigned int v103 = v102;
                          do
                          {
                            int v106 = *(_DWORD *)(v96 + 32 * v102);
                            if ((v106 & 0x10000FF) != 0x1000000) {
                              break;
                            }
                            v103 += (v106 & 0x2000000) == 0;
                            if (v105 == v102) {
                              break;
                            }
                            ++v102;
                          }
                          while ((v106 & 0x2000000) == 0);
                        }
                        unsigned int v101 = v103 + v98;
                        goto LABEL_129;
                      }
                      if (*(_DWORD *)(v96 + (v97 & 0x1FFFFFFFE0))) {
                        BOOL v100 = *(_DWORD *)(v96 + (v97 & 0x1FFFFFFFE0)) == 7;
                      }
                      else {
                        BOOL v100 = 1;
                      }
                      if (!v100) {
                        break;
                      }
                      unsigned int v101 = v98 + 1;
                    }
LABEL_129:
                    *(void *)(v96 + 32 * v101 + 16) &= ~0x20uLL;
                    v93 += 8;
                    if (v93 == v94) {
                      goto LABEL_139;
                    }
                  }
                  unsigned int v101 = -1;
                  goto LABEL_129;
                }
LABEL_139:
                int v86 = v168 - 1;
                unint64_t v107 = v88 + 7;
                uint64_t v5 = a5;
                int v6 = a4;
                uint64_t v72 = v159;
                int v8 = a2;
                uint64_t v10 = v161;
                while (v107 != v91)
                {
                  int v108 = *((_DWORD *)v107 + 12);
                  int v109 = *((unsigned __int8 *)v107 + 52);
                  v107 += 7;
                  if (v108) {
                    BOOL v110 = 0;
                  }
                  else {
                    BOOL v110 = v109 == 0;
                  }
                  if (v110)
                  {
                    uint64_t v88 = v107 - 7;
                    if (v168 != 1) {
                      goto LABEL_114;
                    }
                    uint64_t v72 = v159;
                    break;
                  }
                }
                int v87 = *v166;
                LODWORD(v79) = *v80;
              }
              uint64_t v111 = v87;
              if (v79)
              {
                uint64_t v112 = 56 * v79;
                uint64_t v111 = v87;
                while (*((_DWORD *)v111 + 12) || *((unsigned char *)v111 + 52) == 0)
                {
                  v111 += 7;
                  v112 -= 56;
                  if (!v112) {
                    goto LABEL_196;
                  }
                }
              }
              if (v86)
              {
                uint64_t v114 = &v87[7 * v79];
                if (v111 != v114)
                {
LABEL_162:
                  int v169 = v86;
                  if (v176 >= (unint64_t)HIDWORD(v176)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  v175[v176] = *((_DWORD *)v111 + 10);
                  LODWORD(v176) = v176 + 1;
                  uint64_t v115 = *((unsigned int *)v111 + 2);
                  if (v115)
                  {
                    uint64_t v116 = *v111;
                    uint64_t v117 = *v111 + 8 * v115;
                    while (1)
                    {
                      uint64_t v118 = *(void *)(*(void *)v116 + 8);
                      uint64_t v119 = *(void *)(v118 + 32);
                      unint64_t v120 = *(void *)v116 - v119;
                      unint64_t v121 = v120 >> 5;
                      if (llvm::MachineInstr::getNumExplicitOperands(v118) <= (v120 >> 5)) {
                        break;
                      }
                      uint64_t v122 = *(unsigned __int16 **)(v118 + 16);
                      if ((word_1CDF77000[dword_1CDF6DEF0[*v122] + (unsigned __int16)v121] & 0xFFFB) == 0x3A)
                      {
                        unsigned int v124 = v121 + 2;
                      }
                      else
                      {
                        if ((*(_DWORD *)(v119 + (v120 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
                        {
                          unsigned int v125 = *((unsigned __int8 *)v122 + 4);
                          if ((v122[4] & 2) == 0 || (int v127 = *(_DWORD *)(v118 + 40), v127 == v125))
                          {
                            unsigned int v126 = v125;
                          }
                          else
                          {
                            int v128 = v127 - 1;
                            unsigned int v126 = v125;
                            do
                            {
                              int v129 = *(_DWORD *)(v119 + 32 * v125);
                              if ((v129 & 0x10000FF) != 0x1000000) {
                                break;
                              }
                              v126 += (v129 & 0x2000000) == 0;
                              if (v128 == v125) {
                                break;
                              }
                              ++v125;
                            }
                            while ((v129 & 0x2000000) == 0);
                          }
                          unsigned int v124 = v126 + v121;
                          goto LABEL_177;
                        }
                        if (*(_DWORD *)(v119 + (v120 & 0x1FFFFFFFE0))) {
                          BOOL v123 = *(_DWORD *)(v119 + (v120 & 0x1FFFFFFFE0)) == 7;
                        }
                        else {
                          BOOL v123 = 1;
                        }
                        if (!v123) {
                          break;
                        }
                        unsigned int v124 = v121 + 1;
                      }
LABEL_177:
                      *(void *)(v119 + 32 * v124 + 16) &= ~0x20uLL;
                      v116 += 8;
                      if (v116 == v117) {
                        goto LABEL_187;
                      }
                    }
                    unsigned int v124 = -1;
                    goto LABEL_177;
                  }
LABEL_187:
                  int v86 = v169 - 1;
                  BOOL v130 = v111 + 7;
                  uint64_t v5 = a5;
                  int v6 = a4;
                  uint64_t v72 = v159;
                  int v8 = a2;
                  while (v130 != v114)
                  {
                    int v131 = *((_DWORD *)v130 + 12);
                    int v132 = *((unsigned __int8 *)v130 + 52);
                    v130 += 7;
                    if (v131) {
                      BOOL v133 = 1;
                    }
                    else {
                      BOOL v133 = v132 == 0;
                    }
                    if (!v133)
                    {
                      uint64_t v111 = v130 - 7;
                      if (v169 != 1) {
                        goto LABEL_162;
                      }
                      break;
                    }
                  }
                }
              }
            }
          }
LABEL_196:
          ;
        }
      }
      unsigned int v134 = v176;
      uint64_t v135 = v175;
      if (v176 >= 2)
      {
        qsort(v175, v176, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1CBC0DC50);
        unsigned int v134 = v176;
        uint64_t v135 = v175;
      }
      BOOL v136 = &v135[v134];
      uint64_t v137 = v135;
      if (v134)
      {
        uint64_t v137 = v135 - 1;
        uint64_t v138 = 4 * v134 - 4;
        while (v138)
        {
          unsigned int v139 = v137[1];
          unsigned int v140 = v137[2];
          ++v137;
          v138 -= 4;
          if (v139 == v140) {
            goto LABEL_203;
          }
        }
      }
      else
      {
LABEL_203:
        if (v137 != v136)
        {
          uint64_t v141 = v137 + 2;
          if (v137 + 2 != v136)
          {
            unsigned int v142 = *v137;
            do
            {
              unsigned int v143 = v142;
              unsigned int v142 = *v141;
              if (v143 != *v141)
              {
                v137[1] = v142;
                ++v137;
              }
              ++v141;
            }
            while (v141 != v136);
          }
          BOOL v136 = v137 + 1;
        }
      }
      unint64_t v144 = (unint64_t)((char *)v136 - (char *)v135) >> 2;
      LODWORD(v176) = v144;
      if (v144)
      {
        unsigned int v145 = *(_DWORD *)(v72 + 48);
        uint64_t v146 = 4 * v144;
        do
        {
          unsigned int v147 = *v135++;
          sub_1CBC0DA70(*(void *)(v72 + 40) + 40 * (v147 % v145), v147);
          v146 -= 4;
        }
        while (v146);
      }
      uint64_t v148 = v171;
      if (v170)
      {
        uint64_t v149 = 4 * v170;
        do
        {
          unsigned int v150 = *v148++;
          uint64_t v10 = *(void *)(v72 + 40) + 40 * (v150 % v10);
          int v151 = sub_1CBC0D688(*(void *)(v5 + 8), v150, v6);
          uint64_t v152 = v10;
          LODWORD(v10) = v161;
          sub_1CBC0D798(v152, v8, v150, v151);
          v149 -= 4;
        }
        while (v149);
      }
      LOBYTE(v13) = v158;
      if (v172 != v174) {
        free(v172);
      }
      if (v175 != (unsigned int *)v177) {
        free(v175);
      }
      if (v178 != (_DWORD *)v181) {
        free(v178);
      }
    }
    return v13 & 1;
  }
  else
  {
    uint64_t v65 = *(void *)(a1 + 16);
    return sub_1CBC0C224(v65, (uint64_t)a2, a3, a4, a5);
  }
}

uint64_t sub_1CBC0C224(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5 = a5;
  int v6 = a4;
  uint64_t v7 = a2;
  v161[3] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned int *)(a1 + 64);
  LODWORD(v9) = *(_DWORD *)(a2 + 44);
  uint64_t v143 = v8;
  if (*(_DWORD *)(a2 + 40) >= v9)
  {
    LOBYTE(v11) = 0;
    goto LABEL_47;
  }
  uint64_t v10 = *(unsigned int *)(a2 + 40);
  int v11 = 0;
  int v12 = 0;
  int v13 = 1;
  LODWORD(v145) = a3;
  while (2)
  {
    while (2)
    {
      int v135 = v12;
      uint64_t v134 = v10;
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = *(void *)(a1 + 56) + 24 * (v14 % v8);
        uint64_t v18 = *(void *)(v15 + 8);
        uint64_t v17 = v15 + 8;
        uint64_t v16 = v18;
        uint64_t v19 = *(unsigned int *)(v17 + 8);
        if (v19)
        {
          uint64_t v20 = 48 * v19;
          uint64_t v21 = v16;
          while (v14 != *(_DWORD *)(v21 + 40))
          {
            v21 += 48;
            v20 -= 48;
            if (!v20) {
              goto LABEL_35;
            }
          }
        }
        else
        {
          uint64_t v21 = v16;
        }
        if (v21 == v16 + 48 * v19)
        {
LABEL_35:
          int v37 = 0;
        }
        else
        {
          int v138 = v11;
          uint64_t v22 = *(unsigned int *)(v21 + 8);
          if (v22)
          {
            uint64_t v23 = *(void *)v21;
            uint64_t v24 = *(void *)v21 + 8 * v22;
            while (1)
            {
              uint64_t v25 = *(void *)(*(void *)v23 + 8);
              uint64_t v26 = *(void *)(v25 + 32);
              unint64_t v27 = *(void *)v23 - v26;
              unint64_t v28 = v27 >> 5;
              if (llvm::MachineInstr::getNumExplicitOperands(v25) <= (v27 >> 5)) {
                break;
              }
              uint64_t v29 = *(unsigned __int16 **)(v25 + 16);
              if ((word_1CDF77000[dword_1CDF6DEF0[*v29] + (unsigned __int16)v28] & 0xFFFB) == 0x3A)
              {
                unsigned int v31 = v28 + 2;
              }
              else
              {
                if ((*(_DWORD *)(v26 + (v27 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
                {
                  unsigned int v32 = *((unsigned __int8 *)v29 + 4);
                  if ((v29[4] & 2) == 0 || (int v34 = *(_DWORD *)(v25 + 40), v34 == v32))
                  {
                    unsigned int v33 = v32;
                  }
                  else
                  {
                    int v35 = v34 - 1;
                    unsigned int v33 = v32;
                    do
                    {
                      int v36 = *(_DWORD *)(v26 + 32 * v32);
                      if ((v36 & 0x10000FF) != 0x1000000) {
                        break;
                      }
                      v33 += (v36 & 0x2000000) == 0;
                      if (v35 == v32) {
                        break;
                      }
                      ++v32;
                    }
                    while ((v36 & 0x2000000) == 0);
                  }
                  unsigned int v31 = v33 + v28;
                  goto LABEL_25;
                }
                if (*(_DWORD *)(v26 + (v27 & 0x1FFFFFFFE0))) {
                  BOOL v30 = *(_DWORD *)(v26 + (v27 & 0x1FFFFFFFE0)) == 7;
                }
                else {
                  BOOL v30 = 1;
                }
                if (!v30) {
                  break;
                }
                unsigned int v31 = v28 + 1;
              }
LABEL_25:
              *(void *)(v26 + 32 * v31 + 16) |= 0x20uLL;
              v23 += 8;
              if (v23 == v24) {
                goto LABEL_36;
              }
            }
            unsigned int v31 = -1;
            goto LABEL_25;
          }
LABEL_36:
          sub_1CBC0DC6C((uint64_t *)v17, v21);
          int v37 = 1;
          int v11 = v138;
          int v6 = a4;
          uint64_t v5 = a5;
          uint64_t v7 = a2;
          a3 = (int)v145;
        }
        v11 |= v37;
        v13 &= v37;
        uint64_t v8 = v143;
        if (a3) {
          break;
        }
        if (++v14 >= (unint64_t)*(unsigned int *)(v7 + 44))
        {
          LODWORD(v9) = *(_DWORD *)(v7 + 44);
          goto LABEL_47;
        }
      }
      uint64_t v38 = *(void *)(v5 + 8) + 24 * v134;
      int v41 = *(_DWORD **)(v38 + 16);
      int v40 = (void *)(v38 + 16);
      unsigned int v39 = v41;
      if (*v41 == v6)
      {
        int v12 = v135 | (*((unsigned char *)v39 + 5) != 0);
        uint64_t v10 = v134 + 1;
        unint64_t v9 = *(unsigned int *)(v7 + 44);
        if (v134 + 1 >= v9) {
          goto LABEL_167;
        }
        continue;
      }
      break;
    }
    do
    {
      int v42 = v39[2];
      v39 += 2;
    }
    while (v42 != v6);
    *int v40 = v39;
    int v12 = v135 | (*((unsigned char *)v39 + 5) != 0);
    uint64_t v10 = v134 + 1;
    unint64_t v9 = *(unsigned int *)(v7 + 44);
    if (v134 + 1 < v9) {
      continue;
    }
    break;
  }
LABEL_167:
  if (v12) {
    return v11 & 1;
  }
  int v133 = *(unsigned char *)(a1 + 40) ? v13 : 1;
  if (v133 != 1) {
    return v11 & 1;
  }
LABEL_47:
  char v158 = v161;
  int v160 = 6;
  char v139 = v11;
  if (v8 > 6)
  {
    int v159 = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v8)
  {
    bzero(v161, 4 * v8);
    int v159 = v8;
    __b = v157;
    int v156 = 6;
    memset_pattern16(v157, &unk_1CDB165A0, 4 * v8);
  }
  else
  {
    int v159 = 0;
    __b = v157;
    int v156 = 6;
  }
  int v155 = v8;
  unsigned int v43 = *(_DWORD *)(v7 + 40);
  if (v43 < v9)
  {
    do
    {
      ++v158[v43 % v8];
      int v44 = sub_1CBC0D688(*(void *)(v5 + 8), v43, v6);
      int v45 = *((_DWORD *)__b + v43 % v8);
      if (v45 >= v44) {
        int v45 = v44;
      }
      *((_DWORD *)__b + v43 % v8) = v45;
      ++v43;
    }
    while (v43 < *(_DWORD *)(v7 + 44));
  }
  int v151 = v153;
  uint64_t v152 = 0x200000000;
  if (v8)
  {
    unsigned int v46 = 0;
    uint64_t v47 = 0;
    do
    {
      unsigned int v48 = v158[v47];
      if (v48)
      {
        int v49 = *((_DWORD *)__b + v47);
        if (v49 == 0x7FFFFFFF) {
          goto LABEL_144;
        }
        uint64_t v50 = *(void *)(a1 + 56);
        unsigned int v51 = *(_DWORD *)(v50 + 24 * v47);
        unsigned int v52 = v51 - v48;
        if (v51 < v48) {
          goto LABEL_144;
        }
        uint64_t v53 = v50 + 24 * v47;
        unsigned int v56 = *(_DWORD *)(v53 + 16);
        BOOL v55 = (unsigned int *)(v53 + 16);
        unsigned int v54 = v56;
        uint64_t v57 = v55 - 2;
        if (v52 < v56)
        {
          unsigned int v58 = v54 + v48 - v51;
          uint64_t v59 = 48 * v52;
          do
          {
            uint64_t v60 = *(void *)v57 + v59;
            uint64_t v61 = *(unsigned int *)(v60 + 8);
            if (v61 + (unint64_t)v46 > HIDWORD(v152)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v61)
            {
              memcpy((char *)v151 + 8 * v46, *(const void **)v60, 8 * v61);
              unsigned int v46 = v152;
            }
            v46 += v61;
            LODWORD(v152) = v46;
            v59 += 48;
            --v58;
          }
          while (v58);
          unsigned int v54 = *v55;
        }
        if (v54 > v52 && *(_DWORD *)(*(void *)v57 + 48 * v52 + 44) <= v49) {
          goto LABEL_144;
        }
      }
      ++v47;
      LODWORD(v8) = v143;
    }
    while (v47 != v143);
    unint64_t v62 = (char *)v151;
    __base = v150;
    size_t __nel = 0x800000000;
    if (v46)
    {
      uint64_t v63 = (char *)v151 + 8 * v46;
      do
      {
        sub_1CBAF9B1C(&v146, *(void **)(*(void *)v62 + 8), (*(void *)v62 - *(void *)(*(void *)(*(void *)v62 + 8) + 32)) >> 5, *(void *)(a1 + 48), 0, 0);
        unint64_t v64 = v146;
        int v65 = v147;
        unint64_t v66 = HIDWORD(v146);
        if (v147 != HIDWORD(v146))
        {
          unsigned int v67 = __nel;
          do
          {
            if (v67 >= HIDWORD(__nel)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_DWORD *)__base + v67) = v66;
            unsigned int v67 = __nel + 1;
            LODWORD(__nel) = __nel + 1;
            unint64_t v64 = (v64 & 0xFFFFFFFF00000000) + 0x100000000;
            unint64_t v66 = HIDWORD(v64);
          }
          while (v65 != HIDWORD(v64));
        }
        v62 += 8;
      }
      while (v62 != v63);
      unsigned int v125 = __nel;
      uint64_t v68 = (int *)__base;
      if (__nel >= 2)
      {
        qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1CBC0DC50);
        unsigned int v125 = __nel;
        uint64_t v68 = (int *)__base;
      }
      uint64_t v5 = a5;
      int v6 = a4;
      unsigned int v69 = &v68[v125];
      unsigned int v126 = v68;
      if (v125)
      {
        unint64_t v127 = 0;
        while (4 * v125 - 4 != v127)
        {
          int v129 = v68[v127 / 4];
          int v128 = v68[v127 / 4 + 1];
          v127 += 4;
          if (v129 == v128)
          {
            unsigned int v126 = &v68[v127 / 4 - 1];
            goto LABEL_159;
          }
        }
      }
      else
      {
LABEL_159:
        if (v126 != v69)
        {
          BOOL v130 = v126 + 2;
          if (v126 + 2 != v69)
          {
            int v131 = *v126;
            do
            {
              int v132 = v131;
              int v131 = *v130;
              if (v132 != *v130)
              {
                v126[1] = v131;
                ++v126;
              }
              ++v130;
            }
            while (v130 != v69);
          }
          unsigned int v69 = v126 + 1;
        }
      }
    }
    else
    {
      uint64_t v68 = (int *)v150;
      unsigned int v69 = (int *)v150;
      uint64_t v5 = a5;
      int v6 = a4;
    }
  }
  else
  {
    __base = v150;
    HIDWORD(__nel) = 8;
    uint64_t v68 = (int *)v150;
    unsigned int v69 = (int *)v150;
  }
  unint64_t v70 = (char *)v69 - (char *)v68;
  unint64_t v71 = (unint64_t)((char *)v69 - (char *)v68) >> 2;
  LODWORD(__nel) = v71;
  if ((v70 >> 2))
  {
    uint64_t v72 = &v68[v71];
    BOOL v136 = v72;
    while (1)
    {
      uint64_t v73 = *(void *)(a1 + 56) + 24 * (*v68 % v8);
      uint64_t v76 = *(void *)(v73 + 8);
      uint64_t v75 = v73 + 8;
      uint64_t v74 = v76;
      uint64_t v77 = v76 + 48 * *(unsigned int *)(v75 + 8);
      uint64_t v78 = 48 * *(unsigned int *)(v75 + 8);
      do
      {
        if (!v78) {
          goto LABEL_112;
        }
        int v79 = *(_DWORD *)(v77 - 8);
        v77 -= 48;
        v78 -= 48;
      }
      while (v79 != *v68);
      unsigned int v145 = (uint64_t *)(v74 + v78);
      uint64_t v80 = *(unsigned int *)(v74 + v78 + 8);
      if (v80) {
        break;
      }
LABEL_111:
      sub_1CBC0DC6C((uint64_t *)v75, (uint64_t)v145);
      uint64_t v5 = a5;
      int v6 = a4;
      LODWORD(v8) = v143;
      uint64_t v72 = v136;
LABEL_112:
      if (++v68 == v72) {
        goto LABEL_113;
      }
    }
    uint64_t v81 = *v145;
    uint64_t v82 = *v145 + 8 * v80;
    while (2)
    {
      uint64_t v83 = *(void *)(*(void *)v81 + 8);
      uint64_t v84 = *(void *)(v83 + 32);
      unint64_t v85 = *(void *)v81 - v84;
      unint64_t v86 = v85 >> 5;
      if (llvm::MachineInstr::getNumExplicitOperands(v83) <= (v85 >> 5))
      {
LABEL_110:
        unsigned int v89 = -1;
      }
      else
      {
        int v87 = *(unsigned __int16 **)(v83 + 16);
        if ((word_1CDF77000[dword_1CDF6DEF0[*v87] + (unsigned __int16)v86] & 0xFFFB) == 0x3A)
        {
          unsigned int v89 = v86 + 2;
        }
        else if ((*(_DWORD *)(v84 + (v85 & 0x1FFFFFFFE0)) & 0x10000FF) == 0x1000000)
        {
          unsigned int v90 = *((unsigned __int8 *)v87 + 4);
          if ((v87[4] & 2) == 0 || (int v92 = *(_DWORD *)(v83 + 40), v92 == v90))
          {
            unsigned int v91 = v90;
          }
          else
          {
            int v93 = v92 - 1;
            unsigned int v91 = v90;
            do
            {
              int v94 = *(_DWORD *)(v84 + 32 * v90);
              if ((v94 & 0x10000FF) != 0x1000000) {
                break;
              }
              v91 += (v94 & 0x2000000) == 0;
              if (v93 == v90) {
                break;
              }
              ++v90;
            }
            while ((v94 & 0x2000000) == 0);
          }
          unsigned int v89 = v91 + v86;
        }
        else
        {
          if (*(_DWORD *)(v84 + (v85 & 0x1FFFFFFFE0))) {
            BOOL v88 = *(_DWORD *)(v84 + (v85 & 0x1FFFFFFFE0)) == 7;
          }
          else {
            BOOL v88 = 1;
          }
          if (!v88) {
            goto LABEL_110;
          }
          unsigned int v89 = v86 + 1;
        }
      }
      *(void *)(v84 + 32 * v89 + 16) &= ~0x20uLL;
      v81 += 8;
      if (v81 == v82) {
        goto LABEL_111;
      }
      continue;
    }
  }
LABEL_113:
  for (unsigned int i = *(_DWORD *)(a2 + 40); i < *(_DWORD *)(a2 + 44); LODWORD(v8) = v143)
  {
    uint64_t v96 = *(void *)(a1 + 56);
    LODWORD(v145) = sub_1CBC0D688(*(void *)(v5 + 8), i, v6);
    uint64_t v97 = v96 + 24 * (i % v8);
    unsigned int v100 = *(_DWORD *)(v97 + 16);
    int v99 = (char **)(v97 + 16);
    unsigned int v98 = v100;
    unsigned int v101 = (unsigned int *)(v99 - 1);
    unint64_t v102 = v100 + 1;
    uint64_t v103 = v100;
    long long v104 = 0uLL;
    if (v100 < *((_DWORD *)v99 + 1)
      || (sub_1CBC0D3B8(v99 - 1, v102), v104 = 0uLL, uint64_t v103 = *(unsigned int *)v99, v102 != v103))
    {
      uint64_t v105 = 3 * v103;
      uint64_t v106 = 48 * v98 - 48 * v103 + 48;
      unint64_t v107 = (_OWORD *)(*(void *)v101 + 16 * v105 + 16);
      do
      {
        *unint64_t v107 = v104;
        v107[1] = v104;
        *((void *)v107 - 2) = v107;
        *((void *)v107 - 1) = 0x300000000;
        v107 += 3;
        v106 -= 48;
      }
      while (v106);
    }
    *(_DWORD *)int v99 = v102;
    if (v102 == 1)
    {
      unsigned int v98 = 0;
    }
    else
    {
      unsigned int v137 = i;
      uint64_t v108 = 48 * v98 + 40;
      while (1)
      {
        unsigned int v109 = v98 - 1;
        uint64_t v110 = *(void *)v101;
        if (*(_DWORD *)(*(void *)v101 + 48 * (v98 - 1) + 44) <= (int)v145) {
          break;
        }
        uint64_t v111 = v110 + 48 * v109;
        uint64_t v112 = v110 + v108;
        uint64_t v113 = (void **)(v110 + v108 - 40);
        uint64_t v114 = *(unsigned int *)(v111 + 8);
        uint64_t v115 = *(unsigned int *)(v110 + v108 - 32);
        if (v115 >= v114)
        {
          if (v114) {
            memmove(*v113, *(const void **)v111, 8 * v114);
          }
        }
        else
        {
          if (*(_DWORD *)(v112 - 28) < v114)
          {
            *(_DWORD *)(v112 - 32) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v115) {
            memmove(*v113, *(const void **)v111, 8 * v115);
          }
          else {
            uint64_t v115 = 0;
          }
          uint64_t v116 = *(unsigned int *)(v111 + 8);
          if (v115 != v116) {
            memcpy((char *)*v113 + 8 * v115, (const void *)(*(void *)v111 + 8 * v115), *(void *)v111 + 8 * v116 - (*(void *)v111 + 8 * v115));
          }
        }
        *(_DWORD *)(v112 - 32) = v114;
        *(void *)(v110 + v108) = *(void *)(v110 + 48 * v109 + 40);
        v108 -= 48;
        if (!--v98)
        {
          unsigned int v98 = 0;
          break;
        }
      }
      uint64_t v5 = a5;
      int v6 = a4;
      unsigned int i = v137;
    }
    unsigned int v117 = v98;
    uint64_t v118 = *(void *)v101;
    uint64_t v8 = *(void *)v101 + 48 * v98;
    uint64_t v119 = *(const void **)a2;
    uint64_t v120 = *(unsigned int *)(a2 + 8);
    *(_DWORD *)(v8 + 8) = 0;
    if (v120 > *(_DWORD *)(v8 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    if (v120)
    {
      memcpy(*(void **)v8, v119, 8 * v120);
      int v121 = *(_DWORD *)(v8 + 8);
      uint64_t v118 = *(void *)v101;
    }
    else
    {
      int v121 = 0;
    }
    *(_DWORD *)(v8 + 8) = v121 + v120;
    uint64_t v122 = v118 + 48 * v117;
    int v123 = (int)v145;
    *(_DWORD *)(v122 + 40) = i;
    *(_DWORD *)(v122 + 44) = v123;
    ++i;
  }
  if (__base != v150) {
    free(__base);
  }
LABEL_144:
  if (v151 != v153) {
    free(v151);
  }
  if (__b != v157) {
    free(__b);
  }
  if (v158 != (_DWORD *)v161) {
    free(v158);
  }
  LOBYTE(v11) = v139;
  return v11 & 1;
}

uint64_t sub_1CBC0CE48(llvm::MachineInstr *this, unsigned int a2)
{
  int v4 = (_DWORD *)*((void *)this + 4);
  uint64_t v5 = 8 * a2;
  BOOL v6 = (*v4 & 0x10000FF) == 0x1000000 && (v4[8 * a2] & 0x10000FF) == 0 && v4[1] == v4[8 * a2 + 1];
  if (llvm::MachineInstr::getNumExplicitOperands((uint64_t)this) <= a2) {
    goto LABEL_25;
  }
  uint64_t v7 = (unsigned __int16 *)*((void *)this + 2);
  if ((word_1CDF77000[dword_1CDF6DEF0[*v7] + (unsigned __int16)a2] & 0xFFFB) == 0x3A)
  {
    unsigned int v9 = a2 + 2;
  }
  else if ((v4[v5] & 0x10000FF) == 0x1000000)
  {
    int v10 = *((unsigned __int8 *)v7 + 4);
    if ((v7[4] & 2) == 0 || (int v13 = *((_DWORD *)this + 10), v13 == v10))
    {
      int v11 = v10;
    }
    else
    {
      int v14 = v13 - 1;
      int v11 = v10;
      do
      {
        int v15 = v4[8 * v10];
        if ((v15 & 0x10000FF) != 0x1000000) {
          break;
        }
        v11 += (v15 & 0x2000000) == 0;
        if (v14 == v10) {
          break;
        }
        ++v10;
      }
      while ((v15 & 0x2000000) == 0);
    }
    unsigned int v9 = v11 + a2;
  }
  else
  {
    if (v4[v5]) {
      BOOL v8 = v4[v5] == 7;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
LABEL_25:
      unsigned int v9 = -1;
      return v6 | ((v4[8 * v9 + 4] & 0x10) >> 4);
    }
    unsigned int v9 = a2 + 1;
  }
  return v6 | ((v4[8 * v9 + 4] & 0x10) >> 4);
}

uint64_t sub_1CBC0CFB8(unsigned __int16 a1, int a2)
{
  uint64_t v4 = sub_1CBE52E8C(a1);
  if ((v4 & 0xFF00000000) == 0) {
    return 0;
  }
  unsigned int v5 = v4;
  if ((v4 - 125) <= 0x3C && ((1 << (v4 - 125)) & 0x1FFF801FF80FFFFFLL) != 0) {
    goto LABEL_4;
  }
  uint64_t result = 0;
  if (v5 <= 0x29)
  {
    if (((1 << v5) & 0x300C000000) != 0)
    {
LABEL_4:
      if (sub_1CBDA6464(a1, 0x42u) == a2) {
        return 1;
      }
      unsigned int v7 = 67;
      return sub_1CBDA6464(a1, v7) == a2;
    }
    if (((1 << v5) & 0x30030000000) != 0)
    {
      unsigned int v7 = 25;
      return sub_1CBDA6464(a1, v7) == a2;
    }
    if (((1 << v5) & 0x4300000000) != 0)
    {
      unsigned int v7 = 24;
      return sub_1CBDA6464(a1, v7) == a2;
    }
  }
  return result;
}

void sub_1CBC0D0B4(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v4 = *(char **)(v2 - 24);
      uint64_t v5 = *(unsigned int *)(v2 - 16);
      if (v5)
      {
        uint64_t v6 = 56 * v5;
        do
        {
          unsigned int v7 = *(char **)&v4[v6 - 56];
          if (&v4[v6 - 40] != v7) {
            free(v7);
          }
          v6 -= 56;
        }
        while (v6);
        uint64_t v4 = *(char **)(v2 - 24);
      }
      if (v4 != (char *)(v2 - 8)) {
        free(v4);
      }
      v2 -= 40;
    }
    while (v2 != a1);
  }
}

void sub_1CBC0D144(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(56 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unsigned int v7 = v6;
  BOOL v8 = *a1;
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 56 * v9;
    do
    {
      int v12 = &v7[v10];
      int v13 = &v8[v10];
      int v14 = &v7[v10 + 16];
      *(void *)int v12 = v14;
      *((void *)v12 + 1) = 0x300000000;
      if (v8 != v7)
      {
        unint64_t v15 = *((unsigned int *)v13 + 2);
        if (*((_DWORD *)v13 + 2))
        {
          uint64_t v16 = &v8[v10];
          uint64_t v18 = (uint64_t)&v8[v10 + 16];
          uint64_t v17 = *(const void **)&v8[v10];
          if ((const void *)v18 == v17)
          {
            if (v15 >= 4) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v14, v17, 8 * *((unsigned int *)v13 + 2));
            *((_DWORD *)v12 + 2) = v15;
          }
          else
          {
            *(void *)int v12 = v17;
            int v20 = *((_DWORD *)v16 + 3);
            *((_DWORD *)v12 + 2) = v15;
            *((_DWORD *)v12 + 3) = v20;
            *(void *)uint64_t v16 = v18;
            *((_DWORD *)v16 + 3) = 0;
          }
          *((_DWORD *)v13 + 2) = 0;
        }
      }
      *((void *)v12 + 5) = *((void *)v13 + 5);
      int v19 = *((_DWORD *)v13 + 12);
      v12[52] = v13[52];
      *((_DWORD *)v12 + 12) = v19;
      v10 += 56;
    }
    while (v11 != v10);
    BOOL v8 = *a1;
    uint64_t v21 = *((unsigned int *)a1 + 2);
    if (v21)
    {
      uint64_t v22 = 56 * v21;
      do
      {
        uint64_t v23 = *(char **)&v8[v22 - 56];
        if (&v8[v22 - 40] != v23) {
          free(v23);
        }
        v22 -= 56;
      }
      while (v22);
      BOOL v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

void sub_1CBC0D32C(char *a1, char *a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v4 = (char *)*((void *)v2 - 2);
      uint64_t v5 = *((unsigned int *)v2 - 2);
      if (v5)
      {
        uint64_t v6 = 48 * v5;
        do
        {
          unsigned int v7 = *(char **)&v4[v6 - 48];
          if (&v4[v6 - 32] != v7) {
            free(v7);
          }
          v6 -= 48;
        }
        while (v6);
        unint64_t v4 = (char *)*((void *)v2 - 2);
      }
      if (v4 != v2) {
        free(v4);
      }
      v2 -= 24;
    }
    while (v2 != a1);
  }
}

void sub_1CBC0D3B8(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(48 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unsigned int v7 = v6;
  BOOL v8 = *a1;
  uint64_t v9 = *((unsigned int *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 48 * v9;
    do
    {
      int v12 = &v7[v10];
      int v13 = &v8[v10];
      int v14 = &v7[v10 + 16];
      *(void *)int v12 = v14;
      *((void *)v12 + 1) = 0x300000000;
      if (v8 != v7)
      {
        unint64_t v15 = *((unsigned int *)v13 + 2);
        if (*((_DWORD *)v13 + 2))
        {
          uint64_t v16 = &v8[v10];
          uint64_t v18 = (uint64_t)&v8[v10 + 16];
          uint64_t v17 = *(const void **)&v8[v10];
          if ((const void *)v18 == v17)
          {
            if (v15 >= 4) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v14, v17, 8 * *((unsigned int *)v13 + 2));
            *((_DWORD *)v12 + 2) = v15;
          }
          else
          {
            *(void *)int v12 = v17;
            int v19 = *((_DWORD *)v16 + 3);
            *((_DWORD *)v12 + 2) = v15;
            *((_DWORD *)v12 + 3) = v19;
            *(void *)uint64_t v16 = v18;
            *((_DWORD *)v16 + 3) = 0;
          }
          *((_DWORD *)v13 + 2) = 0;
        }
      }
      *((void *)v12 + 5) = *((void *)v13 + 5);
      v10 += 48;
    }
    while (v11 != v10);
    BOOL v8 = *a1;
    uint64_t v20 = *((unsigned int *)a1 + 2);
    if (v20)
    {
      uint64_t v21 = 48 * v20;
      do
      {
        uint64_t v22 = *(char **)&v8[v21 - 48];
        if (&v8[v21 - 32] != v22) {
          free(v22);
        }
        v21 -= 48;
      }
      while (v21);
      BOOL v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

__n128 sub_1CBC0D590(uint64_t a1, __n128 *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  unint64_t v3 = *(void *)a1;
  if (v2 >= *(_DWORD *)(a1 + 12))
  {
    unint64_t v6 = v3 + 24 * v2;
    if (v3 > (unint64_t)a2 || v6 <= (unint64_t)a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v4 = (__n128 *)(v3 + 24 * *(unsigned int *)(a1 + 8));
  __n128 result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  *unint64_t v4 = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1CBC0D63C(unsigned int *a1, unsigned int *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v5 = *((void *)a2 + 1);
  uint64_t v6 = *((void *)a1 + 1);
  if (v5) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  int v8 = !v7;
  BOOL v9 = v3 >= v2;
  if (v3 >= v2) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = 1;
  }
  if (v9 && v5 != 0 && v6 == 0) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v10;
  }
}

uint64_t sub_1CBC0D688(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v3 = a1 + 24 * a2;
  uint64_t v4 = *(void *)v3 + 8 * *(unsigned int *)(v3 + 8);
  BOOL v7 = *(unsigned char **)(v3 + 16);
  uint64_t v6 = (void *)(v3 + 16);
  for (i = v7; i != (unsigned char *)v4; *uint64_t v6 = i)
  {
    if (*(_DWORD *)i >= a3)
    {
      if (*(_DWORD *)i != a3 || (i += 8, i != (unsigned char *)v4))
      {
        if (i[4]) {
          return *(unsigned int *)i;
        }
      }
      return 0x7FFFFFFFLL;
    }
    i += 8;
  }
  return 0x7FFFFFFFLL;
}

uint64_t sub_1CBC0D6E8(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(unsigned int *)(a1 + 24);
  if (v9)
  {
    uint64_t v10 = v8 + 56 * v9;
    uint64_t v11 = 56 * v9;
    while (*(_DWORD *)(v8 + 40) != a3)
    {
      v8 += 56;
      v11 -= 56;
      if (!v11)
      {
        uint64_t v8 = v10;
        break;
      }
    }
  }
  int v12 = *(_DWORD *)(a1 + 32);
  if (*(int *)(v8 + 48) > 0) {
    ++v12;
  }
  *(_DWORD *)(a1 + 32) = v12;
  *(_DWORD *)(v8 + 48) = 0;
  sub_1CBC0DA70(a1, a3);

  return sub_1CBC0D798(a1, a2, a3, a4);
}

uint64_t sub_1CBC0D798(uint64_t a1, unsigned int *a2, int a3, int a4)
{
  uint64_t v6 = a1;
  uint64_t v38 = (char **)(a1 + 16);
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = v7 + 1;
  uint64_t v9 = v7;
  if (v7 < *(_DWORD *)(a1 + 28)
    || (sub_1CBC0D144(v38, v7 + 1), uint64_t v9 = *(unsigned int *)(v6 + 24), v8 != v9))
  {
    uint64_t v10 = 56 * v9;
    uint64_t v11 = 56 * v7 - 56 * v9 + 56;
    uint64_t v12 = (uint64_t)&(*v38)[v10 + 16];
    do
    {
      *(void *)(v12 + 32) = 0;
      *(_OWORD *)uint64_t v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      *(void *)(v12 - 16) = v12;
      *(void *)(v12 - 8) = 0x300000000;
      v12 += 56;
      v11 -= 56;
    }
    while (v11);
  }
  *(_DWORD *)(v6 + 24) = v8;
  if (v7)
  {
    int v35 = a2;
    uint64_t v36 = v6;
    uint64_t v13 = 56 * v7 + 48;
    while (1)
    {
      int v14 = *v38;
      uint64_t v15 = (uint64_t)&(*v38)[56 * (v7 - 1)];
      if (*(_DWORD *)(v15 + 44) <= a4) {
        break;
      }
      uint64_t v16 = &v14[v13];
      uint64_t v17 = (void **)&v14[v13 - 48];
      uint64_t v18 = *(unsigned int *)(v15 + 8);
      uint64_t v19 = *(unsigned int *)&v14[v13 - 40];
      if (v19 >= v18)
      {
        if (v18) {
          memmove(*v17, *(const void **)v15, 8 * v18);
        }
      }
      else
      {
        if (*((_DWORD *)v16 - 9) < v18)
        {
          *((_DWORD *)v16 - 10) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v19) {
          memmove(*v17, *(const void **)v15, 8 * v19);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *(unsigned int *)(v15 + 8);
        if (v19 != v20) {
          memcpy((char *)*v17 + 8 * v19, (const void *)(*(void *)v15 + 8 * v19), *(void *)v15 + 8 * v20 - (*(void *)v15 + 8 * v19));
        }
      }
      *((_DWORD *)v16 - 10) = v18;
      uint64_t v21 = &v14[v13];
      *((void *)v21 - 1) = *(void *)(v15 + 40);
      uint64_t v22 = &v14[56 * (v7 - 1)];
      int v23 = *((_DWORD *)v22 + 12);
      v21[4] = v22[52];
      *(_DWORD *)uint64_t v21 = v23;
      v13 -= 56;
      LODWORD(v7) = v7 - 1;
      if (!v7)
      {
        LODWORD(v7) = 0;
        break;
      }
    }
    uint64_t v6 = v36;
    a2 = v35;
  }
  else
  {
    LODWORD(v7) = 0;
  }
  uint64_t v24 = *(const void **)a2;
  uint64_t v25 = *(const llvm::MachineInstr **)(**(void **)a2 + 8);
  uint64_t v26 = *v38;
  uint64_t v27 = (uint64_t)&(*v38)[56 * v7];
  uint64_t v28 = a2[2];
  *(_DWORD *)(v27 + 8) = 0;
  if (v28 > *(_DWORD *)(v27 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v28)
  {
    memcpy(*(void **)v27, v24, 8 * v28);
    int v29 = *(_DWORD *)(v27 + 8);
    uint64_t v26 = *v38;
  }
  else
  {
    int v29 = 0;
  }
  *(_DWORD *)(v27 + 8) = v29 + v28;
  uint64_t v30 = 56 * v7;
  unsigned int v31 = &v26[v30];
  *((_DWORD *)v31 + 10) = a3;
  *((_DWORD *)v31 + 11) = a4;
  uint64_t result = llvm::TargetSchedModel::computeInstrLatency(*(llvm::TargetSchedModel **)(v6 + 8), v25, 1);
  int v33 = result - 1;
  if ((result - 1) <= 2) {
    int v33 = 2;
  }
  uint64_t v34 = *(void *)(v6 + 16) + v30;
  *(_DWORD *)(v34 + 48) = v33 + 4;
  *(unsigned char *)(v34 + 52) = 0;
  return result;
}

void sub_1CBC0DA70(uint64_t a1, int a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v6 = v5 + v4;
      if (*(_DWORD *)(v5 + v4 + 40) == a2) {
        break;
      }
      v4 += 56;
      if (56 * v2 == v4) {
        return;
      }
    }
    if (56 * v2 - 56 != v4)
    {
      uint64_t v7 = 56 * v2 - 56;
      do
      {
        uint64_t v8 = v5 + v4;
        uint64_t v9 = *(const void **)(v5 + v4 + 56);
        uint64_t v10 = v5 + v4 + 72;
        if ((const void *)v10 == v9)
        {
          uint64_t v12 = (_DWORD *)(v8 + 64);
          uint64_t v11 = *(unsigned int *)(v8 + 64);
          uint64_t v13 = *(unsigned int *)(v8 + 8);
          if (v13 >= v11)
          {
            if (v11) {
              memmove(*(void **)v8, v9, 8 * v11);
            }
          }
          else
          {
            if (*(_DWORD *)(v5 + v4 + 12) < v11)
            {
              *(_DWORD *)(v8 + 8) = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v13) {
              memmove(*(void **)v8, v9, 8 * v13);
            }
            else {
              uint64_t v13 = 0;
            }
            uint64_t v14 = *v12;
            if (v13 != v14) {
              memcpy((void *)(*(void *)v8 + 8 * v13), (const void *)(*(void *)(v8 + 56) + 8 * v13), 8 * v14 - 8 * v13);
            }
          }
          *(_DWORD *)(v8 + 8) = v11;
        }
        else
        {
          if (v8 + 16 != *(void *)v8)
          {
            free(*(void **)v8);
            uint64_t v9 = *(const void **)(v8 + 56);
          }
          uint64_t v16 = v5 + v4;
          *(void *)uint64_t v16 = v9;
          uint64_t v12 = (_DWORD *)(v6 + 64);
          *(void *)(v16 + 8) = *(void *)(v5 + v4 + 64);
          *(void *)(v8 + 56) = v10;
          *(_DWORD *)(v16 + 68) = 0;
        }
        *uint64_t v12 = 0;
        uint64_t v15 = v5 + v4;
        *(void *)(v15 + 40) = *(void *)(v5 + v4 + 96);
        *(_DWORD *)(v15 + 48) = *(_DWORD *)(v5 + v4 + 104);
        *(unsigned char *)(v15 + 52) = *(unsigned char *)(v5 + v4 + 108);
        v6 += 56;
        v4 += 56;
      }
      while (v7 != v4);
      LODWORD(v2) = *(_DWORD *)(a1 + 24);
      uint64_t v5 = *(void *)(a1 + 16);
    }
    unsigned int v17 = v2 - 1;
    *(_DWORD *)(a1 + 24) = v17;
    uint64_t v18 = (void **)(v5 + 56 * v17);
    if (*v18 != v18 + 2) {
      free(*v18);
    }
    --*(_DWORD *)(a1 + 32);
  }
}

uint64_t sub_1CBC0DC50(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

uint64_t sub_1CBC0DC6C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a1 + 48 * v5;
  uint64_t v7 = a2 + 48;
  if (a2 + 48 != v6)
  {
    uint64_t v8 = a2;
    do
    {
      uint64_t v9 = *(const void **)v7;
      if (v7 + 16 == *(void *)v7)
      {
        uint64_t v10 = (void **)(v7 - 48);
        uint64_t v12 = (_DWORD *)(v7 + 8);
        uint64_t v11 = *(unsigned int *)(v7 + 8);
        uint64_t v13 = *(unsigned int *)(v7 - 40);
        if (v13 >= v11)
        {
          if (v11) {
            memmove(*v10, v9, 8 * v11);
          }
        }
        else
        {
          if (*(_DWORD *)(v7 - 36) < v11)
          {
            *(_DWORD *)(v7 - 40) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          if (v13) {
            memmove(*v10, v9, 8 * v13);
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = *v12;
          if (v13 != v14) {
            memcpy((void *)(*(void *)(v7 - 48) + 8 * v13), (const void *)(*(void *)v7 + 8 * v13), *(void *)v7 + 8 * v14 - (*(void *)v7 + 8 * v13));
          }
        }
        *(_DWORD *)(v7 - 40) = v11;
      }
      else
      {
        uint64_t v15 = *(void **)(v7 - 48);
        if ((void *)(v7 - 32) != v15)
        {
          free(v15);
          uint64_t v9 = *(const void **)v7;
        }
        *(void *)(v7 - 48) = v9;
        uint64_t v12 = (_DWORD *)(v8 + 56);
        *(void *)(v7 - 40) = *(void *)(v7 + 8);
        *(void *)uint64_t v7 = v7 + 16;
        *(_DWORD *)(v7 + 12) = 0;
      }
      *uint64_t v12 = 0;
      *(void *)(v7 - 8) = *(void *)(v7 + 40);
      v8 += 48;
      v7 += 48;
    }
    while (v7 != v6);
    unsigned int v5 = *((_DWORD *)a1 + 2);
    uint64_t v4 = *a1;
  }
  unsigned int v16 = v5 - 1;
  *((_DWORD *)a1 + 2) = v16;
  unsigned int v17 = (void **)(v4 + 48 * v16);
  if (*v17 != v17 + 2) {
    free(*v17);
  }
  return a2;
}

void sub_1CBC0DDF4()
{
}

void sub_1CBC0DE90()
{
}

void sub_1CBC0DF34(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unsigned int v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC0DFE8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBC0E094()
{
  return "AGX3 Clique Scheduling Hints Placement Pass";
}

void sub_1CBC0E0A4(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

BOOL sub_1CBC0E118(uint64_t a1, uint64_t a2)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC19E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC19E8))
  {
    dword_1EBCC19B0 = 30;
    __cxa_guard_release(&qword_1EBCC19E8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC19F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC19F0))
  {
    dword_1EBCC19B4 = 20;
    __cxa_guard_release(&qword_1EBCC19F0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC19F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC19F8))
  {
    dword_1EBCC19B8 = -1;
    __cxa_guard_release(&qword_1EBCC19F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A00))
  {
    dword_1EBCC19BC = -1;
    __cxa_guard_release(&qword_1EBCC1A00);
  }
  if (dword_1EBCC19B8 >= 0) {
    int v3 = dword_1EBCC19B8;
  }
  else {
    int v3 = dword_1EBCC19B0;
  }
  if (dword_1EBCC19BC >= 0) {
    int v4 = dword_1EBCC19BC;
  }
  else {
    int v4 = dword_1EBCC19B4;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A08))
  {
    dword_1EBCC19C0 = 10;
    __cxa_guard_release(&qword_1EBCC1A08);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A10))
  {
    dword_1EBCC19C4 = 32;
    __cxa_guard_release(&qword_1EBCC1A10);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A18))
  {
    dword_1EBCC19C8 = 5;
    __cxa_guard_release(&qword_1EBCC1A18);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A20))
  {
    byte_1EBCC19A8 = 1;
    __cxa_guard_release(&qword_1EBCC1A20);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A28))
  {
    byte_1EBCC19A9 = 0;
    __cxa_guard_release(&qword_1EBCC1A28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A30))
  {
    byte_1EBCC19AA = 0;
    __cxa_guard_release(&qword_1EBCC1A30);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A38))
  {
    dword_1EBCC19CC = 10;
    __cxa_guard_release(&qword_1EBCC1A38);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A40))
  {
    dword_1EBCC19D0 = 32;
    __cxa_guard_release(&qword_1EBCC1A40);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1A48))
  {
    dword_1EBCC19D4 = 30;
    __cxa_guard_release(&qword_1EBCC1A48);
  }
  unsigned int v5 = *(unsigned __int8 **)(a2 + 16);
  int v6 = v5[285];
  if (v5[285])
  {
    int v30 = v5[285];
    long long v75 = xmmword_1CFB28DF0;
    long long v76 = unk_1CFB28E00;
    v74[0] = llvm::MCSchedModel::Default;
    v74[1] = unk_1CFB28DE0;
    long long v79 = unk_1CFB28DE0;
    long long v80 = xmmword_1CFB28DF0;
    long long v81 = unk_1CFB28E00;
    uint64_t v77 = 0;
    uint64_t v82 = 0;
    long long v78 = llvm::MCSchedModel::Default;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v83 = 0u;
    unint64_t v86 = v88;
    uint64_t v87 = 0x1000000000;
    v88[8] = 0;
    llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v74, (const llvm::TargetSubtargetInfo *)v5);
    uint64_t v7 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v5 + 104))(v5);
    int v89 = *(unsigned __int16 *)(*(void *)(v85 + 136)
                              + 4
                              * *(unsigned __int16 *)(*((void *)&v75 + 1)
                                                    + 24 * *(unsigned __int16 *)(*(void *)(v7 + 8) + 270054)
                                                    + 10));
    *(_OWORD *)int v41 = xmmword_1CDC7F400;
    sub_1CBC0EE3C((uint64_t)v71, (int *)v41, 4, v3, dword_1EBCC19C4, dword_1EBCC19C0, byte_1EBCC19A8, (uint64_t)v74, 1, 1);
    v41[0] = (void *)0x500000004FLL;
    sub_1CBC0EE3C((uint64_t)v68, (int *)v41, 2, dword_1EBCC19D4, dword_1EBCC19D0, dword_1EBCC19CC, byte_1EBCC19A8, (uint64_t)v74, byte_1EBCC19A9, byte_1EBCC19AA);
    v64[0] = v65;
    __int16 v66 = 0;
    uint64_t v67 = 32;
    uint64_t v8 = *(void **)(a2 + 16);
    v65[0] = v71;
    v65[1] = v68;
    v64[1] = (void *)0x400000002;
    v41[0] = &unk_1F25FDCB8;
    v41[1] = v8;
    unsigned int v43 = v41;
    unsigned int v9 = sub_1CBD854F8((uint64_t)v41);
    if (v43 == v41)
    {
      (*((void (**)(void **))v41[0] + 4))(v41);
    }
    else if (v43)
    {
      (*((void (**)(void))*v43 + 5))();
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A50, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1A50))
    {
      byte_1EBCC19AB = 1;
      __cxa_guard_release(&qword_1EBCC1A50);
    }
    uint64_t v59 = &v61;
    int v61 = 103;
    uint64_t v60 = 0x800000001;
    unsigned int v10 = 1;
    if (byte_1EBCC19AB && v9 >= 4)
    {
      long long v62 = xmmword_1CDC7F410;
      int v63 = 101;
      LODWORD(v60) = 6;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A58, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCC1A58))
      {
        byte_1EBCC19AC = 0;
        __cxa_guard_release(&qword_1EBCC1A58);
      }
      unsigned int v10 = v60;
      if (byte_1EBCC19AC)
      {
        if ((unint64_t)v60 + 2 > HIDWORD(v60)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)((char *)v59 + 4 * v60) = 0x6400000093;
        unsigned int v10 = v60 + 2;
        LODWORD(v60) = v60 + 2;
      }
    }
    sub_1CBC0EE3C((uint64_t)v56, (int *)v59, v10, v4, dword_1EBCC19C8, dword_1EBCC19C8, byte_1EBCC19A8, (uint64_t)v74, 1, 1);
    v52[0] = v53;
    __int16 v54 = 0;
    uint64_t v55 = 36;
    v53[0] = v56;
    v52[1] = (void *)0x400000001;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A60, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1A60))
    {
      byte_1EBCC19AD = 1;
      __cxa_guard_release(&qword_1EBCC1A60);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1A68))
    {
      byte_1EBCC19AE = 1;
      __cxa_guard_release(&qword_1EBCC1A68);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A70, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1A70))
    {
      dword_1EBCC19D8 = 10;
      __cxa_guard_release(&qword_1EBCC1A70);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A78, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1A78))
    {
      dword_1EBCC19DC = 32;
      __cxa_guard_release(&qword_1EBCC1A78);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A80, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1EBCC1A80))
    {
      dword_1EBCC19E0 = 30;
      __cxa_guard_release(&qword_1EBCC1A80);
    }
    BOOL v11 = v9 >= 4 && (byte_1EBCC19AD | byte_1EBCC19AE) != 0;
    v41[0] = (void *)0x5D0000005CLL;
    sub_1CBC0EE3C((uint64_t)v49, (int *)v41, 2, dword_1EBCC19E0, dword_1EBCC19DC, dword_1EBCC19D8, byte_1EBCC19A8, (uint64_t)v74, byte_1EBCC19AD != 0, byte_1EBCC19AE != 0);
    v45[0] = v46;
    __int16 v47 = 0;
    uint64_t v48 = 40;
    v46[0] = v49;
    v45[1] = (void *)0x400000001;
    uint64_t v12 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v5 + 176))(v5);
    v41[0] = &v42;
    uint64_t v42 = 0;
    unsigned int v43 = 0;
    int v44 = 0;
    v41[1] = (void *)0xC00000001;
    uint64_t v31 = 0;
    uint64_t v13 = (void *)(a2 + 320);
    uint64_t v14 = *(void **)(a2 + 328);
    if (v14 == (void *)(a2 + 320))
    {
      int v16 = 0;
      goto LABEL_61;
    }
    uint64_t v15 = v12;
    int v16 = 0;
    while (1)
    {
      for (uint64_t i = v14[7]; (void *)i != v14 + 6; uint64_t i = *(void *)(i + 8))
      {
        int v18 = sub_1CBC0F028((uint64_t)v74, i);
        if ((*(unsigned char *)(*(void *)(i + 16) + 20) & 4) != 0)
        {
          if (sub_1CBC2D6DC(&v31, i, v15, 1)) {
            sub_1CBC0F150((uint64_t)v41, v16);
          }
          unsigned int v19 = v41[1];
          if (LODWORD(v41[1]) == 1)
          {
            sub_1CBC0F150((uint64_t)v41, v16);
            uint64_t v20 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 344) + 592))(*(void *)(a2 + 344), 100);
            if (v20) {
              BOOL v21 = *(void *)a2 == v20;
            }
            else {
              BOOL v21 = 1;
            }
            if (v21) {
              goto LABEL_54;
            }
            unsigned int v19 = v41[1];
          }
          sub_1CBC0F238((uint64_t)v71, i, (_DWORD *)v41[0] + 5 * v19 - 4);
          sub_1CBC0F238((uint64_t)v68, i, (_DWORD *)v41[0] + 5 * LODWORD(v41[1]) - 3);
          sub_1CBC0F238((uint64_t)v56, i, (_DWORD *)v41[0] + 5 * LODWORD(v41[1]) - 2);
          if (v11) {
            sub_1CBC0F238((uint64_t)v49, i, (_DWORD *)v41[0] + 5 * LODWORD(v41[1]) - 1);
          }
        }
LABEL_54:
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
        v16 += v18;
      }
      uint64_t v14 = (void *)v14[1];
      if (v14 == v13)
      {
LABEL_61:
        uint64_t v22 = (void *)*v13;
        if ((void *)*v13 != v13)
        {
          int v23 = (char *)v41[0] + 20 * LODWORD(v41[1]);
          do
          {
            unint64_t v24 = v22[6] & 0xFFFFFFFFFFFFFFF8;
            if (!v24 || (*(unsigned char *)v24 & 4) == 0)
            {
              while ((*(_WORD *)(v24 + 44) & 4) != 0)
                unint64_t v24 = *(void *)v24 & 0xFFFFFFFFFFFFFFF8;
            }
            while ((void *)v24 != v22 + 6)
            {
              v16 -= sub_1CBC0F028((uint64_t)v74, v24);
              if ((*(unsigned char *)(*(void *)(v24 + 16) + 20) & 4) != 0)
              {
                if (*((_DWORD *)v23 - 5) > v16) {
                  v23 -= 20;
                }
                if (*((_DWORD *)v23 - 5) == v16) {
                  int v25 = v16 - *((_DWORD *)v23 - 10);
                }
                else {
                  int v25 = -1;
                }
                uint64_t v26 = *((void *)v23 - 2);
                uint64_t v38 = v40;
                *(void *)int v40 = v26;
                uint64_t v39 = 0x400000002;
                sub_1CBC0F320((uint64_t **)v64, v24, v25, v40);
                if (v38 != v40) {
                  free(v38);
                }
                int v27 = *((_DWORD *)v23 - 2);
                int v35 = v37;
                v37[0] = v27;
                uint64_t v36 = 0x400000001;
                sub_1CBC0F320((uint64_t **)v52, v24, v25, v37);
                if (v35 != v37) {
                  free(v35);
                }
                if (v11)
                {
                  int v28 = *((_DWORD *)v23 - 1);
                  unsigned int v32 = v34;
                  v34[0] = v28;
                  uint64_t v33 = 0x400000001;
                  sub_1CBC0F320((uint64_t **)v45, v24, v25, v34);
                  if (v32 != v34) {
                    free(v32);
                  }
                }
              }
              unint64_t v24 = *(void *)v24 & 0xFFFFFFFFFFFFFFF8;
              if (!v24 || (*(unsigned char *)v24 & 4) == 0)
              {
                while ((*(_WORD *)(v24 + 44) & 4) != 0)
                  unint64_t v24 = *(void *)v24 & 0xFFFFFFFFFFFFFFF8;
              }
            }
            uint64_t v22 = (void *)*v22;
          }
          while (v22 != (void *)(a2 + 320));
        }
        sub_1CBC0F628((uint64_t)v64, a2);
        sub_1CBC0F628((uint64_t)v52, a2);
        if (v11) {
          sub_1CBC0F628((uint64_t)v45, a2);
        }
        if (v41[0] != &v42) {
          free(v41[0]);
        }
        if (v45[0] != v46) {
          free(v45[0]);
        }
        sub_1CBC0FD34(v51[5]);
        if (v50 != v51) {
          free(v50);
        }
        if (v52[0] != v53) {
          free(v52[0]);
        }
        sub_1CBC0FD34(v58[5]);
        if (v57 != v58) {
          free(v57);
        }
        if (v59 != &v61) {
          free(v59);
        }
        if (v64[0] != v65) {
          free(v64[0]);
        }
        sub_1CBC0FD34(v70[5]);
        if (v69 != v70) {
          free(v69);
        }
        sub_1CBC0FD34(v73[5]);
        if (v72 != v73) {
          free(v72);
        }
        if (v86 != v88) {
          free(v86);
        }
        int v6 = v30;
        return v6 != 0;
      }
    }
  }
  return v6 != 0;
}

uint64_t sub_1CBC0EE3C(uint64_t result, int *a2, uint64_t a3, int a4, int a5, int a6, char a7, uint64_t a8, char a9, char a10)
{
  *(_DWORD *)uint64_t result = 100 * a4;
  *(_DWORD *)(result + 4) = 100 * a5;
  *(_DWORD *)(result + 8) = 100 * a6;
  *(unsigned char *)(result + 12) = a7;
  *(void *)(result + 16) = a8;
  *(unsigned char *)(result + 24) = 0;
  *(void *)(result + 28) = 0x7FFFFFFF00000000;
  *(void *)(result + 40) = 0;
  *(unsigned char *)(result + 48) = a9;
  *(unsigned char *)(result + 49) = a10;
  uint64_t v10 = result + 72;
  *(void *)(result + 56) = result + 72;
  uint64_t v11 = result + 56;
  *(void *)(result + 64) = 0x800000000;
  *(void *)(result + 112) = 0;
  *(void *)(result + 104) = result + 112;
  uint64_t v12 = (uint64_t *)(result + 104);
  *(void *)(result + 120) = 0;
  if (a3)
  {
    uint64_t v13 = &a2[a3];
    do
    {
      int v14 = *a2;
      if (*(void *)(result + 120))
      {
        int v27 = a2;
        uint64_t v28 = result;
        unsigned int v19 = v12;
        int v20 = *a2;
        int v21 = v14;
        uint64_t v25 = v10;
        uint64_t v23 = v11;
        uint64_t v26 = v12;
        unint64_t v24 = v13;
      }
      else
      {
        uint64_t v15 = *(unsigned int *)(result + 64);
        if (!v15)
        {
LABEL_9:
          if (v15 >= *(_DWORD *)(result + 68)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_DWORD *)(*(void *)(result + 56) + 4 * v15) = v14;
          ++*(_DWORD *)(result + 64);
          goto LABEL_11;
        }
        uint64_t v16 = 4 * v15;
        unsigned int v17 = *(_DWORD **)(result + 56);
        while (*v17 != v14)
        {
          ++v17;
          v16 -= 4;
          if (!v16) {
            goto LABEL_8;
          }
        }
        if (v16) {
          goto LABEL_11;
        }
LABEL_8:
        if (v15 < 8) {
          goto LABEL_9;
        }
        do
        {
          int v22 = v14;
          uint64_t v23 = v11;
          unint64_t v24 = v13;
          uint64_t v25 = v10;
          uint64_t v26 = v12;
          int v27 = a2;
          uint64_t v28 = result;
          int v18 = *(_DWORD *)(*(void *)(result + 56) + 4 * v15 - 4);
          sub_1CD4265AC(v12, v18, v18);
          uint64_t v11 = v23;
          uint64_t v13 = v24;
          int v14 = v22;
          uint64_t v12 = v26;
          a2 = v27;
          uint64_t v10 = v25;
          uint64_t result = v28;
          LODWORD(v15) = *(_DWORD *)(v28 + 64) - 1;
          *(_DWORD *)(v28 + 64) = v15;
        }
        while (v15);
        unsigned int v19 = v26;
        int v20 = v22;
        int v21 = v22;
      }
      sub_1CD4265AC(v19, v20, v21);
      uint64_t v11 = v23;
      uint64_t v13 = v24;
      uint64_t v12 = v26;
      a2 = v27;
      uint64_t v10 = v25;
      uint64_t result = v28;
LABEL_11:
      ++a2;
    }
    while (a2 != v13);
  }
  return result;
}

uint64_t sub_1CBC0F028(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_WORD **)(a2 + 16);
  if (*v2 == 6222) {
    return 1;
  }
  unsigned int v5 = (_WORD *)(*(void *)(a1 + 40) + 24 * (unsigned __int16)v2[3]);
  if ((v5[4] & 0x1FFF) == 0x1FFE)
  {
    do
    {
      unsigned int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 176) + 200))(*(void *)(a1 + 176));
      uint64_t v9 = *(void *)(a1 + 40);
    }
    while ((*(_WORD *)(v9 + 24 * v8 + 8) & 0x1FFF) == 0x1FFE);
    unsigned int v5 = (_WORD *)(v9 + 24 * v8);
  }
  if ((~(unsigned __int16)v5[4] & 0x1FFF) == 0 || !v5[6]) {
    return 100;
  }
  int v6 = (unsigned __int16 *)(*(void *)(*(void *)(a1 + 176) + 136) + 4 * (unsigned __int16)v5[5] + 2);
  uint64_t v7 = 4 * (unsigned __int16)v5[6];
  while (*(_DWORD *)(a1 + 280) != *(v6 - 1))
  {
    v6 += 2;
    v7 -= 4;
    if (!v7) {
      return 100;
    }
  }
  return 100 * *v6;
}

uint64_t sub_1CBC0F150(uint64_t result, int a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2 >= *(_DWORD *)(result + 12))
  {
    int v5 = a2;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    BOOL v4 = *(void *)result + 20 * (unint64_t)v2 > (unint64_t)&v5;
    if (*(void *)result > (unint64_t)&v5 || !v4) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v3 = *(void *)result + 20 * v2;
  *(_DWORD *)uint64_t v3 = a2;
  *(void *)(v3 + 12) = 0;
  *(void *)(v3 + 4) = 0;
  *(_DWORD *)(result + 8) = v2 + 1;
  return result;
}

uint64_t sub_1CBC0F238(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
  if ((result & 0xFF00000000) == 0) {
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  }
  if (*(void *)(a1 + 120))
  {
    uint64_t v10 = *(void *)(a1 + 112);
    if (v10)
    {
      uint64_t v11 = a1 + 112;
      do
      {
        int v12 = *(_DWORD *)(v10 + 28);
        BOOL v13 = v12 < (int)result;
        if (v12 >= (int)result) {
          int v14 = (uint64_t *)v10;
        }
        else {
          int v14 = (uint64_t *)(v10 + 8);
        }
        if (!v13) {
          uint64_t v11 = v10;
        }
        uint64_t v10 = *v14;
      }
      while (*v14);
      if (v11 != a1 + 112 && *(_DWORD *)(v11 + 28) <= (int)result)
      {
LABEL_9:
        ++*a3;
        if (!*(void *)(a1 + 40)) {
          *(void *)(a1 + 40) = a2;
        }
      }
    }
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    if (v7)
    {
      unsigned int v8 = *(_DWORD **)(a1 + 56);
      uint64_t v9 = 4 * v7;
      while (*v8 != result)
      {
        ++v8;
        v9 -= 4;
        if (!v9) {
          return result;
        }
      }
      if (v9) {
        goto LABEL_9;
      }
    }
  }
  return result;
}

uint64_t sub_1CBC0F320(uint64_t **a1, uint64_t a2, int a3, int *a4)
{
  *((unsigned char *)a1 + 48) = 0;
  uint64_t v6 = *((unsigned int *)a1 + 2);
  if (v6)
  {
    uint64_t v9 = *a1;
    uint64_t v10 = (uint64_t)&(*a1)[v6];
    do
    {
      uint64_t v11 = *v9;
      int v13 = *a4++;
      int v12 = v13;
      int v14 = *((unsigned __int8 *)a1 + 49);
      int v15 = sub_1CBC0F028(*(void *)(*v9 + 16), a2);
      uint64_t v16 = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
      if ((v16 & 0xFF00000000) == 0) {
        goto LABEL_65;
      }
      if (*(void *)(v11 + 120))
      {
        uint64_t v24 = *(void *)(v11 + 112);
        if (v24)
        {
          uint64_t v25 = v11 + 112;
          do
          {
            int v26 = *(_DWORD *)(v24 + 28);
            BOOL v27 = v26 < (int)v16;
            if (v26 >= (int)v16) {
              uint64_t v28 = (uint64_t *)v24;
            }
            else {
              uint64_t v28 = (uint64_t *)(v24 + 8);
            }
            if (!v27) {
              uint64_t v25 = v24;
            }
            uint64_t v24 = *v28;
          }
          while (*v28);
          if (v25 != v11 + 112 && *(_DWORD *)(v25 + 28) <= (int)v16) {
            goto LABEL_29;
          }
        }
      }
      else
      {
        uint64_t v17 = *(unsigned int *)(v11 + 64);
        if (v17)
        {
          int v18 = *(_DWORD **)(v11 + 56);
          uint64_t v19 = 4 * v17;
          while (*v18 != v16)
          {
            ++v18;
            v19 -= 4;
            if (!v19) {
              goto LABEL_9;
            }
          }
          if (v19)
          {
LABEL_29:
            int v21 = 0;
            *(_DWORD *)(v11 + 32) = 0;
            if (*(void *)(v11 + 40) == a2)
            {
              int v21 = 0;
              *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 4);
            }
            goto LABEL_11;
          }
        }
      }
LABEL_9:
      int v20 = *(_DWORD *)(v11 + 32);
      int v21 = 0x7FFFFFFF;
      if (v20 != 0x7FFFFFFF)
      {
        int v21 = v20 + v15;
        *(_DWORD *)(v11 + 32) = v20 + v15;
      }
LABEL_11:
      int v22 = *(_DWORD *)(v11 + 28) + v15;
      *(_DWORD *)(v11 + 28) = v22;
      if (*(unsigned char *)(v11 + 48) && *(unsigned char *)(v11 + 24))
      {
        if (v21 < v22 || (char v23 = 0, v14) && v12 >= 1 && *(unsigned char *)(v11 + 12)) {
          char v23 = 1;
        }
      }
      else
      {
        char v23 = 0;
      }
      if (*(unsigned char *)(v11 + 49) && v21 < *(_DWORD *)(v11 + 8)) {
        char v23 = 1;
      }
      if ((a3 & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v11 + 12)) {
          *(_DWORD *)(v11 + 32) = 0x7FFFFFFF;
        }
        *(_DWORD *)(v11 + 28) = 0;
        *(unsigned char *)(v11 + 24) = *(_DWORD *)v11 > a3;
      }
      LOBYTE(v6) = *((unsigned char *)a1 + 48) | v23;
      *((unsigned char *)a1 + 48) = v6;
      ++v9;
    }
    while (v9 != (uint64_t *)v10);
  }
  int v29 = *((unsigned __int8 *)a1 + 49);
  int v30 = **(unsigned __int16 **)(a2 + 16);
  if (v29 != v6) {
    goto LABEL_51;
  }
  uint64_t result = sub_1CBE52E8C(**(unsigned __int16 **)(a2 + 16));
  if ((result & 0xFF00000000) == 0) {
LABEL_65:
  }
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  unsigned int v32 = *(void **)(a2 + 24);
  if ((result - 13) > 1)
  {
    if (v32[7] != a2) {
      return result;
    }
    uint64_t v33 = (void *)v32[4];
    if (v32 == (void *)v33[41])
    {
      int v39 = (*(unsigned __int16 *)(*v33 + 18) >> 4) & 0x3FF;
      if (v39)
      {
        if (v39 != 255 && v39 != 8) {
          return result;
        }
      }
    }
    else if (((v32[9] - v32[8]) & 0x7FFFFFFF0) == 0)
    {
      return result;
    }
  }
  else
  {
    uint64_t v33 = (void *)v32[4];
  }
  if ((*(_WORD *)(*v33 + 18) & 0x3FF0) != 0x640
    || ((v34 = v33[40], v41 = v34 + 48, uint64_t result = sub_1CBC0FC88((unint64_t *)&v41, v34), result)
      ? (BOOL v35 = v41 == a2)
      : (BOOL v35 = 0),
        !v35))
  {
LABEL_51:
    uint64_t v36 = a1[7];
    uint64_t result = sub_1CBDA6464(v30, 0x2Eu);
    uint64_t v38 = 1;
    if (!v29) {
      uint64_t v38 = 2;
    }
    uint64_t v37 = *(void *)(a2 + 32) + 32 * result;
    *(void *)(v37 + 16) = *(void *)(v37 + 16) & ~(3 << (char)v36) | (v38 << (char)v36);
    *((unsigned char *)a1 + 49) = *((unsigned char *)a1 + 48);
  }
  return result;
}

uint64_t sub_1CBC0F628(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 49))
  {
    int v3 = (*(unsigned __int16 *)(*(void *)a2 + 18) >> 4) & 0x3FF;
    BOOL v4 = !v3 || v3 == 8;
    if (!v4 && v3 != 255)
    {
      uint64_t v5 = result;
      uint64_t v6 = *(void *)(a2 + 344);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1A88, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1EBCC1A88))
      {
        byte_1EBCC19AF = 1;
        __cxa_guard_release(&qword_1EBCC1A88);
      }
      if (byte_1EBCC19AF)
      {
        uint64_t v7 = (const Function *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 592))(v6, 100);
        unsigned int v8 = v7;
        if (v7) {
          BOOL v9 = v7 == *(const Function **)a2;
        }
        else {
          BOOL v9 = 1;
        }
        if (!v9)
        {
          uint64_t v10 = *(void *)(llvm::MachineModuleInfo::getMachineFunction(*(llvm::MachineModuleInfo **)(a2 + 32), v7) + 320);
          uint64_t v57 = (void *)(v10 + 48);
          goto LABEL_19;
        }
      }
      else
      {
        unsigned int v8 = 0;
      }
      uint64_t v10 = *(void *)(a2 + 328);
      unint64_t v11 = *(void *)(v10 + 56);
      uint64_t v57 = (void *)v11;
      if (v11 == v10 + 48
        || (int v12 = *(unsigned __int16 **)(v11 + 16), (v12[10] & 4) == 0)
        || (uint64_t v13 = *(void *)(v5 + 56),
            uint64_t result = sub_1CBDA6464(*v12, 0x2Eu),
            ((*(void *)(*(void *)(v11 + 32) + 32 * result + 16) >> v13) & 3) != 2))
      {
        if (v8 != *(const Function **)a2
          || (uint64_t v32 = *(void *)(a2 + 320),
              unsigned int v51 = (void *)(v32 + 48),
              uint64_t result = sub_1CBC0FC88((unint64_t *)&v51, v32),
              !result)
          || v51 != (void *)v11)
        {
LABEL_19:
          if (sub_1CBC0FC88((unint64_t *)&v57, v10))
          {
            unint64_t v14 = (unint64_t)v57;
            goto LABEL_40;
          }
          uint64_t v15 = *(void *)(v10 + 32);
          uint64_t v56 = 0;
          long long v55 = 0u;
          long long v54 = 0u;
          long long v53 = 0u;
          unsigned int v51 = &unk_1F261CD58;
          unsigned int v52 = (llvm::MachineFunction *)v15;
          *((void *)&v53 + 1) = *(void *)(v15 + 40);
          *(void *)&long long v53 = (*(uint64_t (**)(void))(**(void **)(v15 + 16) + 104))(*(void *)(v15 + 16));
          long long v62 = 0;
          if (!(void)v54) {
            goto LABEL_22;
          }
          int v35 = *(unsigned __int8 *)v54;
          if ((v35 - 4) > 0x1E)
          {
            if ((v35 - 3) >= 0xFFFFFFFE) {
              uint64_t v45 = v54;
            }
            else {
              uint64_t v45 = 0;
            }
            if ((v35 - 3) > 0xFFFFFFFD)
            {
              unint64_t v37 = v45 + 8;
              goto LABEL_79;
            }
            if (v35 == 3) {
              *(void *)(v54 + 8) = 0;
            }
          }
          else if ((*(unsigned char *)(v54 + 1) & 0x7F) == 2 || *(_DWORD *)(v54 + 12))
          {
            uint64_t v36 = *(void *)(v54 + 16);
            if ((v36 & 4) != 0)
            {
              unint64_t v37 = v36 & 0xFFFFFFFFFFFFFFF8;
              if (v37)
              {
LABEL_79:
                uint64_t v58 = (uint64_t)&v54;
                sub_1CC5FA668(v37 + 16, &v58);
                uint64_t v16 = v62;
                *(void *)&long long v54 = v62;
                if (v62)
                {
                  llvm::MetadataTracking::retrack((uint64_t)&v62, v62, (uint64_t)&v54);
                  uint64_t v16 = (unsigned __int8 *)v54;
                }
LABEL_23:
                uint64_t v17 = v57;
                *((void *)&v54 + 1) = v10;
                long long v55 = (unint64_t)v57;
                int v18 = v52;
                uint64_t v19 = *(void *)(v53 + 8) + 26688;
                long long v62 = v16;
                if (v16) {
                  llvm::MetadataTracking::track((uint64_t)&v62, v16, 2);
                }
                int v20 = llvm::MachineFunction::CreateMachineInstr(v18, v19, &v62, 0);
                if (!v62) {
                  goto LABEL_26;
                }
                int v47 = *v62;
                if ((v47 - 4) > 0x1E)
                {
                  if ((v47 - 3) >= 0xFFFFFFFE) {
                    uint64_t v50 = v62;
                  }
                  else {
                    uint64_t v50 = 0;
                  }
                  if ((v47 - 3) < 0xFFFFFFFE)
                  {
                    if (v47 == 3) {
                      *((void *)v62 + 1) = 0;
                    }
                    goto LABEL_26;
                  }
                  unint64_t v49 = (unint64_t)(v50 + 8);
                }
                else
                {
                  if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
                    goto LABEL_26;
                  }
                  uint64_t v48 = *((void *)v62 + 2);
                  if ((v48 & 4) == 0) {
                    goto LABEL_26;
                  }
                  unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
                  if (!v49) {
                    goto LABEL_26;
                  }
                }
                uint64_t v58 = (uint64_t)&v62;
                sub_1CC5FA668(v49 + 16, &v58);
LABEL_26:
                int v21 = (unint64_t *)v55;
                uint64_t v22 = *(void *)(*((void *)&v54 + 1) + 40);
                *((void *)v20 + 3) = v22;
                uint64_t v23 = *(void *)(v22 + 32);
                uint64_t v24 = *((unsigned int *)v20 + 10);
                if (v24)
                {
                  uint64_t v38 = *((void *)v20 + 4);
                  uint64_t v39 = *(void *)(v23 + 40);
                  uint64_t v40 = 32 * v24;
                  do
                  {
                    if (!*(unsigned char *)v38)
                    {
                      uint64_t v41 = *(unsigned int *)(v38 + 4);
                      if ((int)v41 >= 0) {
                        uint64_t v42 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v41);
                      }
                      else {
                        uint64_t v42 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
                      }
                      uint64_t v43 = *v42;
                      if (*v42)
                      {
                        uint64_t v44 = *(void *)(v43 + 16);
                        *(void *)(v43 + 16) = v38;
                        *(void *)(v38 + 16) = v44;
                        if (*(unsigned char *)(v38 + 3))
                        {
                          *(void *)(v38 + 24) = v43;
                        }
                        else
                        {
                          *(void *)(v38 + 24) = 0;
                          uint64_t v42 = (uint64_t *)(v44 + 24);
                        }
                      }
                      else
                      {
                        *(void *)(v38 + 16) = v38;
                        *(void *)(v38 + 24) = 0;
                      }
                      *uint64_t v42 = v38;
                    }
                    v38 += 32;
                    v40 -= 32;
                  }
                  while (v40);
                }
                uint64_t v25 = *(void *)(v23 + 728);
                if (v25) {
                  (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v25 + 24))(v25, v20);
                }
                unint64_t v26 = *v21 & 0xFFFFFFFFFFFFFFF8;
                *(void *)int v20 = v26 | *(void *)v20 & 7;
                *((void *)v20 + 1) = v21;
                *(void *)(v26 + 8) = v20;
                unint64_t *v21 = *v21 & 7 | (unint64_t)v20;
                if (*((void *)&v55 + 1)) {
                  (*(void (**)(void, llvm::MachineInstr *))(**((void **)&v55 + 1) + 24))(*((void *)&v55 + 1), v20);
                }
                uint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v61 = 0;
                uint64_t v58 = 0x18701000000;
                llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v58);
                LODWORD(v58) = 1;
                uint64_t v59 = 0;
                uint64_t v60 = 0;
                llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v58);
                uint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v58 = 0x18700000000;
                uint64_t v61 = 0;
                llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v58);
                LODWORD(v58) = 1;
                uint64_t v59 = 0;
                uint64_t v60 = 0;
                llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v58);
                uint64_t v59 = 0;
                uint64_t v60 = 0;
                uint64_t v61 = 0;
                uint64_t v58 = 0x6712000000;
                llvm::MachineInstr::addOperand(v20, v18, (const llvm::MachineOperand *)&v58);
                unint64_t v14 = *v17 & 0xFFFFFFFFFFFFFFF8;
                if (!v14 || (*(unsigned char *)v14 & 4) == 0)
                {
                  while ((*(_WORD *)(v14 + 44) & 4) != 0)
                    unint64_t v14 = *(void *)v14 & 0xFFFFFFFFFFFFFFF8;
                }
                uint64_t v57 = (void *)v14;
                unsigned int v51 = &unk_1F261CD58;
                if (!(void)v54) {
                  goto LABEL_40;
                }
                int v27 = *(unsigned __int8 *)v54;
                if ((v27 - 4) > 0x1E)
                {
                  if ((v27 - 3) >= 0xFFFFFFFE) {
                    uint64_t v33 = v54;
                  }
                  else {
                    uint64_t v33 = 0;
                  }
                  if ((v27 - 3) < 0xFFFFFFFE)
                  {
                    if (v27 == 3) {
                      *(void *)(v54 + 8) = 0;
                    }
                    goto LABEL_40;
                  }
                  unint64_t v34 = v33 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v54 + 1) & 0x7F) != 2 && !*(_DWORD *)(v54 + 12)) {
                    goto LABEL_40;
                  }
                  uint64_t v46 = *(void *)(v54 + 16);
                  if ((v46 & 4) == 0) {
                    goto LABEL_40;
                  }
                  unint64_t v34 = v46 & 0xFFFFFFFFFFFFFFF8;
                  if (!v34) {
                    goto LABEL_40;
                  }
                }
                uint64_t v58 = (uint64_t)&v54;
                sub_1CC5FA668(v34 + 16, &v58);
LABEL_40:
                uint64_t v28 = *(void *)(v5 + 56);
                int v29 = *(unsigned __int8 *)(v5 + 49);
                uint64_t result = sub_1CBDA6464(**(unsigned __int16 **)(v14 + 16), 0x2Eu);
                uint64_t v31 = 1;
                if (!v29) {
                  uint64_t v31 = 2;
                }
                uint64_t v30 = *(void *)(v14 + 32) + 32 * result;
                *(void *)(v30 + 16) = *(void *)(v30 + 16) & ~(3 << v28) | (v31 << v28);
                return result;
              }
            }
          }
LABEL_22:
          uint64_t v16 = 0;
          *(void *)&long long v54 = 0;
          goto LABEL_23;
        }
      }
    }
  }
  return result;
}

BOOL sub_1CBC0FC88(unint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2 + 48;
  for (unint64_t i = *a1; v2 == i; *a1 = i)
  {
    if (v2 == *(void *)(a2 + 56)) {
      return 0;
    }
LABEL_11:
    unint64_t i = *(void *)i & 0xFFFFFFFFFFFFFFF8;
    if (!i || (*(unsigned char *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 4) != 0)
        unint64_t i = *(void *)i & 0xFFFFFFFFFFFFFFF8;
    }
  }
  BOOL v4 = *(unsigned __int16 **)(i + 16);
  if ((v4[10] & 4) == 0)
  {
    if (i == *(void *)(a2 + 56)) {
      return 0;
    }
    goto LABEL_11;
  }
  int v5 = *v4;
  if ((v5 == 6222 || v5 == 623) && i != *(void *)(a2 + 56)) {
    goto LABEL_11;
  }
  return v5 != 623 && v5 != 6222;
}

void sub_1CBC0FD34(void *a1)
{
  if (a1)
  {
    sub_1CBC0FD34(*a1);
    sub_1CBC0FD34(a1[1]);
    operator delete(a1);
  }
}

BOOL sub_1CBC0FD84(_DWORD *a1, const llvm::MachineInstr *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0x600000000;
  uint64_t v17 = a3;
  int v18 = v20;
  int v5 = *(_DWORD *)(a3 + 44);
  int v21 = v5;
  unsigned int v6 = v5 + 63;
  if ((v5 + 63) < 0x40)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = v6 >> 6;
    if (v6 >= 0x1C0) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(v20, 8 * v7);
    uint64_t v8 = v7;
    LODWORD(v19) = v7;
  }
  if ((v5 & 0x3F) != 0) {
    v20[v8 - 1] &= ~(-1 << (v5 & 0x3F));
  }
  llvm::LiveRegUnits::accumulate((llvm::LiveRegUnits *)&v17, a2);
  if (v17) {
    BOOL v9 = (void *)(v17 + 8);
  }
  else {
    BOOL v9 = 0;
  }
  uint64_t v10 = (unsigned __int16 *)(v9[6]
                           + (((unint64_t)*(unsigned int *)(*v9 + 24 * (unsigned __int16)*a1 + 16) >> 3) & 0x1FFFFFFE));
  int v12 = *v10;
  unint64_t v11 = v10 + 1;
  int v13 = v12 + (*(_DWORD *)(*v9 + 24 * (unsigned __int16)*a1 + 16) & 0xF) * *a1;
  do
  {
    uint64_t v14 = (1 << v13) & v18[(unsigned __int16)v13 >> 6];
    if (v14) {
      break;
    }
    int v15 = *v11++;
    LOWORD(v13) = v15 + v13;
  }
  while (v15);
  if (v18 != v20) {
    free(v18);
  }
  return v14 != 0;
}

void sub_1CBC0FF28()
{
}

const char *sub_1CBC0FFC4()
{
  return "AGX3 RLD Promotion Pass";
}

uint64_t sub_1CBC0FFD4(uint64_t a1, uint64_t a2)
{
  v151[9] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 248) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v129 = a1;
  *(void *)(a1 + 256) = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  long long v138 = xmmword_1CFB28DF0;
  long long v139 = unk_1CFB28E00;
  uint64_t v140 = 0;
  v137[0] = llvm::MCSchedModel::Default;
  v137[1] = unk_1CFB28DE0;
  long long v142 = unk_1CFB28DE0;
  long long v143 = xmmword_1CFB28DF0;
  long long v144 = unk_1CFB28E00;
  uint64_t v145 = 0;
  long long v141 = llvm::MCSchedModel::Default;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v146 = 0u;
  uint64_t v149 = v151;
  uint64_t v150 = 0x1000000000;
  v151[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)v137, *(const llvm::TargetSubtargetInfo **)(a2 + 16));
  BOOL v4 = *(void **)(a2 + 328);
  BOOL v130 = (void *)(a2 + 320);
  if (v4 == (void *)(a2 + 320))
  {
    LOBYTE(j) = 0;
    goto LABEL_134;
  }
  int j = 0;
  do
  {
    uint64_t v134 = &v134;
    __p = &v134;
    uint64_t v136 = 0;
    unsigned int v6 = v4 + 6;
    unint64_t v7 = v4[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v7 || (*(unsigned char *)v7 & 4) == 0)
    {
      while ((*(_WORD *)(v7 + 44) & 4) != 0)
        unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((void *)v7 == v6)
    {
      int v132 = 0;
      goto LABEL_91;
    }
    int v131 = j;
    int v132 = 0;
    do
    {
      uint64_t v8 = v7;
      unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v7 || (*(unsigned char *)v7 & 4) == 0)
      {
        while ((*(_WORD *)(v7 + 44) & 4) != 0)
          unint64_t v7 = *(void *)v7 & 0xFFFFFFFFFFFFFFF8;
      }
      BOOL v9 = *(unsigned __int16 **)(v8 + 16);
      if ((*((void *)v9 + 2) & 0x400001C00) == 0x400000C00)
      {
        unint64_t v11 = *(void *)(v8 + 48);
        if (v11 >= 8)
        {
          if ((v11 & 7) != 0)
          {
            unsigned int v124 = (_DWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
            BOOL v125 = (*(void *)(v8 + 48) & 7) != 3 || v124 == 0;
            if (v125 || *v124 != 1) {
              goto LABEL_12;
            }
          }
          else
          {
            *(void *)(v8 + 48) = v11 & 0xFFFFFFFFFFFFFFF8;
          }
          int v12 = *v9;
          if ((v12 - 1) > 1 || (*(unsigned char *)(*(void *)(v8 + 32) + 48) & 0x10) == 0)
          {
            __int16 v13 = *(_WORD *)(v8 + 44);
            if ((v13 & 0xC) == 0 || (v13 & 4) != 0)
            {
              if ((v9[5] & 0x10) == 0) {
                goto LABEL_21;
              }
            }
            else if (!llvm::MachineInstr::hasPropertyInBundle(v8, 0x100000, 1))
            {
              BOOL v9 = *(unsigned __int16 **)(v8 + 16);
              int v12 = *v9;
LABEL_21:
              uint64_t v14 = sub_1CBE52E8C(v12);
              if ((v14 & 0xFF00000000) == 0 || v14 != 100)
              {
                uint64_t v15 = *(void *)(v8 + 48);
                if ((v15 & 7) != 0)
                {
                  uint64_t v16 = *(uint64_t **)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
                }
                else
                {
                  uint64_t v16 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFF8);
                  *(void *)(v8 + 48) = v16;
                }
                uint64_t v17 = *v16;
                if ((v17 & 4) != 0)
                {
                  unint64_t v64 = v17 & 0xFFFFFFFFFFFFFFF8;
                  if (v64)
                  {
                    if (*(_DWORD *)(v64 + 8) == 4)
                    {
                      int v133 = *(_DWORD *)(*(void *)(v8 + 32) + 32 * sub_1CBDA6464(*v9, 3u) + 4);
                      uint64_t v65 = v8;
                      if ((*(unsigned char *)v8 & 4) == 0)
                      {
                        uint64_t v65 = v8;
                        if ((*(_WORD *)(v8 + 44) & 8) != 0)
                        {
                          uint64_t v65 = v8;
                          do
                            uint64_t v65 = *(void *)(v65 + 8);
                          while ((*(_WORD *)(v65 + 44) & 8) != 0);
                        }
                      }
                      uint64_t v50 = *(void *)(v65 + 8);
                      if ((void *)v50 == v6)
                      {
                        int v49 = 1;
                      }
                      else
                      {
                        uint64_t v127 = *(void *)(v129 + 248);
                        int v49 = 1;
                        do
                        {
                          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1AA0, memory_order_acquire) & 1) == 0
                            && __cxa_guard_acquire(&qword_1EBCC1AA0))
                          {
                            dword_1EBCC1A94 = 31;
                            __cxa_guard_release(&qword_1EBCC1AA0);
                          }
                          if (v49 >= dword_1EBCC1A94 || sub_1CBC0FD84(&v133, (const llvm::MachineInstr *)v50, v127)) {
                            break;
                          }
                          if ((*(unsigned char *)(*(void *)(v50 + 16) + 20) & 4) == 0) {
                            goto LABEL_180;
                          }
                          uint64_t v43 = *(void *)(*(void *)(*(void *)(v50 + 24) + 32) + 16);
                          (*(void (**)(uint64_t))(*(void *)v43 + 104))(v43);
                          uint64_t v44 = (_WORD *)(*((void *)&v138 + 1)
                                        + 24 * *(unsigned __int16 *)(*(void *)(v50 + 16) + 6));
                          if ((v44[4] & 0x1FFF) == 0x1FFE)
                          {
                            do
                              unsigned int v95 = (*(uint64_t (**)(void))(*(void *)v148 + 200))(v148);
                            while ((*(_WORD *)(*((void *)&v138 + 1) + 24 * v95 + 8) & 0x1FFF) == 0x1FFE);
                            uint64_t v44 = (_WORD *)(*((void *)&v138 + 1) + 24 * v95);
                          }
                          uint64_t v45 = (unsigned __int16)v44[6];
                          if (v44[6])
                          {
                            uint64_t v46 = (unsigned __int16 *)(*(void *)(v148 + 136) + 4 * (unsigned __int16)v44[5] + 2);
                            uint64_t v47 = 4 * v45;
                            while (*(v46 - 1) != 9)
                            {
                              v46 += 2;
                              v47 -= 4;
                              if (!v47) {
                                goto LABEL_180;
                              }
                            }
                            unsigned int v48 = *v46;
                            if (v48 <= 1) {
                              unsigned int v48 = 1;
                            }
                          }
                          else
                          {
LABEL_180:
                            unsigned int v48 = 1;
                          }
                          if ((*(unsigned char *)v50 & 4) == 0)
                          {
                            while ((*(_WORD *)(v50 + 44) & 8) != 0)
                              uint64_t v50 = *(void *)(v50 + 8);
                          }
                          v49 += v48;
                          uint64_t v50 = *(void *)(v50 + 8);
                        }
                        while ((void *)v50 != v6);
                      }
                      uint64_t v72 = *(void *)(*(void *)(v8 + 24) + 32);
                      if (v72)
                      {
                        uint64_t v73 = *(void *)(v72 + 728);
                        if (v73) {
                          (*(void (**)(uint64_t, uint64_t))(*(void *)v73 + 32))(v73, v8);
                        }
                        uint64_t v74 = *(unsigned int *)(v8 + 40);
                        if (v74)
                        {
                          uint64_t v57 = *(void *)(v8 + 32);
                          uint64_t v75 = *(void *)(v72 + 40);
                          uint64_t v58 = 32 * v74;
                          do
                          {
                            if (!*(unsigned char *)v57)
                            {
                              uint64_t v51 = *(unsigned int *)(v57 + 4);
                              if ((v51 & 0x80000000) != 0) {
                                unsigned int v52 = (uint64_t *)(*(void *)(v75 + 24) + 16 * (v51 & 0x7FFFFFFF) + 8);
                              }
                              else {
                                unsigned int v52 = (uint64_t *)(*(void *)(v75 + 272) + 8 * v51);
                              }
                              uint64_t v53 = *v52;
                              uint64_t v55 = *(void *)(v57 + 16);
                              uint64_t v54 = *(void *)(v57 + 24);
                              if (v57 != *v52) {
                                unsigned int v52 = (uint64_t *)(v55 + 24);
                              }
                              *unsigned int v52 = v54;
                              if (v54) {
                                uint64_t v56 = v54;
                              }
                              else {
                                uint64_t v56 = v53;
                              }
                              *(void *)(v56 + 16) = v55;
                              *(void *)(v57 + 16) = 0;
                              *(void *)(v57 + 24) = 0;
                            }
                            v57 += 32;
                            v58 -= 32;
                          }
                          while (v58);
                        }
                      }
                      *(void *)(v8 + 24) = 0;
                      uint64_t v59 = *(unint64_t **)(v8 + 8);
                      unint64_t v60 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
                      *uint64_t v59 = v60 | *v59 & 7;
                      *(void *)(v60 + 8) = v59;
                      *(void *)v8 &= 7uLL;
                      *(void *)(v8 + 8) = 0;
                      uint64_t v61 = operator new(0x20uLL);
                      v61[1] = &v134;
                      v61[2] = v8;
                      *((_DWORD *)v61 + 6) = v49;
                      long long v62 = v134;
                      *uint64_t v61 = v134;
                      v62[1] = v61;
                      uint64_t v134 = v61;
                      ++v136;
                      continue;
                    }
                  }
                }
              }
            }
          }
        }
      }
LABEL_12:
      uint64_t v10 = __p;
      if (__p == &v134) {
        continue;
      }
      do
      {
        uint64_t v26 = v10[2];
        int v27 = *((_DWORD *)v10 + 6);
        unsigned int v28 = sub_1CBDA6464(**(unsigned __int16 **)(v26 + 16), 3u);
        uint64_t v29 = *(void *)(v26 + 32);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1AA0, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EBCC1AA0))
        {
          dword_1EBCC1A94 = 31;
          __cxa_guard_release(&qword_1EBCC1AA0);
        }
        if (v27 < dword_1EBCC1A94)
        {
          uint64_t v30 = *(unsigned __int16 **)(v8 + 16);
          if ((*((void *)v30 + 2) & 0x400000040) == 0x400000000)
          {
            uint64_t v31 = sub_1CBE52E8C(*v30);
            if ((v31 & 0xFF00000000) == 0) {
              llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
            }
            if (v31 != 6 && v31 != 83)
            {
              int v133 = *(_DWORD *)(v29 + 32 * v28 + 4);
              if (!sub_1CBC0FD84(&v133, (const llvm::MachineInstr *)v8, *(void *)(v129 + 248)))
              {
                uint64_t v32 = *(void *)(v26 + 48);
                if ((v32 & 7) != 0)
                {
                  uint64_t v33 = *(void **)((v32 & 0xFFFFFFFFFFFFFFF8) + 8);
                }
                else
                {
                  uint64_t v33 = (void *)(v32 & 0xFFFFFFFFFFFFFFF8);
                  *(void *)(v26 + 48) = v32 & 0xFFFFFFFFFFFFFFF8;
                }
                unint64_t v34 = (int *)(v8 + 48);
                unint64_t v35 = *(void *)(v8 + 48);
                if (v35 < 8) {
                  goto LABEL_49;
                }
                uint64_t v66 = *v33;
                uint64_t v67 = (int *)(v35 & 0xFFFFFFFFFFFFFFF8);
                uint64_t v68 = *(void *)(v8 + 48) & 7;
                if (v68)
                {
                  if (v68 != 3) {
                    goto LABEL_49;
                  }
                  if (!v67) {
                    goto LABEL_49;
                  }
                  uint64_t v116 = *v67;
                  uint64_t v115 = v67 + 2;
                  uint64_t v114 = v116;
                  if (!v116) {
                    goto LABEL_49;
                  }
                  unsigned int v69 = &v115[2 * v114];
                  unint64_t v34 = v115;
                }
                else
                {
                  unsigned int v69 = (int *)(v8 + 56);
                  *(void *)(v8 + 48) = v67;
                }
                unint64_t v70 = v66 & (v66 << 61 >> 63) & 0xFFFFFFFFFFFFFFF8;
                while (1)
                {
                  unint64_t v71 = *(void **)v34;
                  if ((**(void **)v34 & ((uint64_t)(**(void **)v34 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) == v70) {
                    break;
                  }
                  v34 += 2;
                  if (v34 == v69) {
                    goto LABEL_49;
                  }
                }
                if (*v33 < 8uLL || (*v33 & 4) != 0)
                {
                  uint64_t v106 = v33[3];
                  uint64_t v105 = v33 + 3;
                  uint64_t v128 = *(v105 - 2);
                  uint64_t v126 = v71[1];
                  if ((v106 & 0xFFFFFFFFFFFFFFF9) != 0)
                  {
                    unint64_t v108 = (unint64_t)(sub_1CB8F1DC4(v105) + 7) >> 3;
                    if (v107 == 1) {
                  }
                    }
                  else
                  {
                    unint64_t v108 = -1;
                  }
                  uint64_t v110 = v71[3];
                  unsigned int v109 = v71 + 3;
                  if ((v110 & 0xFFFFFFFFFFFFFFF9) != 0)
                  {
                    unint64_t v112 = (unint64_t)(sub_1CB8F1DC4(v109) + 7) >> 3;
                    if (v111 == 1) {
                  }
                    }
                  else
                  {
                    unint64_t v112 = -1;
                  }
                  BOOL v113 = (uint64_t)(v108 + v128) > v126;
                  if (v128 >= v126) {
                    BOOL v113 = (uint64_t)(v112 + v126) > v128;
                  }
                  if (!v113)
                  {
LABEL_49:
                    p_p = (void **)(v10 + 1);
                    goto LABEL_50;
                  }
                }
              }
            }
          }
        }
        uint64_t v76 = v8;
        if ((*(unsigned char *)v8 & 4) == 0)
        {
          uint64_t v76 = v8;
          if ((*(_WORD *)(v8 + 44) & 8) != 0)
          {
            uint64_t v76 = v8;
            do
              uint64_t v76 = *(void *)(v76 + 8);
            while ((*(_WORD *)(v76 + 44) & 8) != 0);
          }
        }
        uint64_t v77 = *(uint64_t **)(v76 + 8);
        uint64_t v78 = v4[5];
        *(void *)(v26 + 24) = v78;
        uint64_t v79 = *(void *)(v78 + 32);
        uint64_t v80 = *(unsigned int *)(v26 + 40);
        if (v80)
        {
          uint64_t v97 = *(void *)(v26 + 32);
          uint64_t v98 = *(void *)(v79 + 40);
          uint64_t v99 = 32 * v80;
          do
          {
            if (!*(unsigned char *)v97)
            {
              uint64_t v100 = *(unsigned int *)(v97 + 4);
              if ((int)v100 >= 0) {
                unsigned int v101 = (uint64_t *)(*(void *)(v98 + 272) + 8 * v100);
              }
              else {
                unsigned int v101 = (uint64_t *)(*(void *)(v98 + 24) + 16 * (v100 & 0x7FFFFFFF) + 8);
              }
              uint64_t v102 = *v101;
              if (*v101)
              {
                uint64_t v103 = *(void *)(v102 + 16);
                *(void *)(v102 + 16) = v97;
                *(void *)(v97 + 16) = v103;
                if (*(unsigned char *)(v97 + 3))
                {
                  *(void *)(v97 + 24) = v102;
                }
                else
                {
                  *(void *)(v97 + 24) = 0;
                  unsigned int v101 = (uint64_t *)(v103 + 24);
                }
              }
              else
              {
                *(void *)(v97 + 16) = v97;
                *(void *)(v97 + 24) = 0;
              }
              *unsigned int v101 = v97;
            }
            v97 += 32;
            v99 -= 32;
          }
          while (v99);
        }
        uint64_t v81 = *(void *)(v79 + 728);
        if (v81) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 24))(v81, v26);
        }
        unint64_t v82 = *v77 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v26 = v82 | *(void *)v26 & 7;
        *(void *)(v26 + 8) = v77;
        *(void *)(v82 + 8) = v26;
        *uint64_t v77 = *v77 & 7 | v26;
        uint64_t v83 = *v10;
        *(void *)(v83 + 8) = v10[1];
        *(void *)v10[1] = v83;
        --v136;
        operator delete(v10);
        uint64_t v24 = (void **)__p;
        if (__p == &v134)
        {
          int v132 = 1;
          goto LABEL_13;
        }
        do
        {
          if ((*(unsigned char *)(*(void *)(v26 + 16) + 20) & 4) == 0) {
            goto LABEL_184;
          }
          uint64_t v18 = *(void *)(*(void *)(*(void *)(v26 + 24) + 32) + 16);
          (*(void (**)(uint64_t))(*(void *)v18 + 104))(v18);
          uint64_t v19 = (_WORD *)(*((void *)&v138 + 1) + 24 * *(unsigned __int16 *)(*(void *)(v26 + 16) + 6));
          if ((v19[4] & 0x1FFF) == 0x1FFE)
          {
            do
              unsigned int v25 = (*(uint64_t (**)(void))(*(void *)v148 + 200))(v148);
            while ((*(_WORD *)(*((void *)&v138 + 1) + 24 * v25 + 8) & 0x1FFF) == 0x1FFE);
            uint64_t v19 = (_WORD *)(*((void *)&v138 + 1) + 24 * v25);
          }
          uint64_t v20 = (unsigned __int16)v19[6];
          if (v19[6])
          {
            int v21 = (unsigned __int16 *)(*(void *)(v148 + 136) + 4 * (unsigned __int16)v19[5] + 2);
            uint64_t v22 = 4 * v20;
            while (*(v21 - 1) != 9)
            {
              v21 += 2;
              v22 -= 4;
              if (!v22) {
                goto LABEL_184;
              }
            }
            unsigned int v23 = *v21;
            if (v23 <= 1) {
              unsigned int v23 = 1;
            }
          }
          else
          {
LABEL_184:
            unsigned int v23 = 1;
          }
          *((_DWORD *)v24 + 6) += v23;
          uint64_t v24 = (void **)v24[1];
        }
        while (v24 != (void **)&v134);
        int v132 = 1;
        p_p = &__p;
LABEL_50:
        uint64_t v10 = *p_p;
      }
      while (*p_p != &v134);
      for (unint64_t i = (void **)__p; i != (void **)&v134; unint64_t i = (void **)i[1])
      {
        if ((*(unsigned char *)(*(void *)(v8 + 16) + 20) & 4) == 0) {
          goto LABEL_181;
        }
        uint64_t v37 = *(void *)(*(void *)(*(void *)(v8 + 24) + 32) + 16);
        (*(void (**)(uint64_t))(*(void *)v37 + 104))(v37);
        uint64_t v38 = (_WORD *)(*((void *)&v138 + 1) + 24 * *(unsigned __int16 *)(*(void *)(v8 + 16) + 6));
        if ((v38[4] & 0x1FFF) == 0x1FFE)
        {
          do
            unsigned int v85 = (*(uint64_t (**)(void))(*(void *)v148 + 200))(v148);
          while ((*(_WORD *)(*((void *)&v138 + 1) + 24 * v85 + 8) & 0x1FFF) == 0x1FFE);
          uint64_t v38 = (_WORD *)(*((void *)&v138 + 1) + 24 * v85);
        }
        uint64_t v39 = (unsigned __int16)v38[6];
        if (v38[6])
        {
          uint64_t v40 = (unsigned __int16 *)(*(void *)(v148 + 136) + 4 * (unsigned __int16)v38[5] + 2);
          uint64_t v41 = 4 * v39;
          while (*(v40 - 1) != 9)
          {
            v40 += 2;
            v41 -= 4;
            if (!v41) {
              goto LABEL_181;
            }
          }
          unsigned int v42 = *v40;
          if (v42 <= 1) {
            unsigned int v42 = 1;
          }
        }
        else
        {
LABEL_181:
          unsigned int v42 = 1;
        }
        *((_DWORD *)i + 6) += v42;
      }
LABEL_13:
      ;
    }
    while ((void *)v7 != v6);
    uint64_t v63 = v136;
    for (j = v131; v136; int v132 = 1)
    {
      unint64_t v86 = (void **)__p;
      uint64_t v87 = *((void *)__p + 2);
      uint64_t v88 = *(void *)__p;
      *(void *)(v88 + 8) = *((void *)__p + 1);
      *v86[1] = v88;
      uint64_t v136 = v63 - 1;
      operator delete(v86);
      int v89 = (uint64_t *)v4[7];
      uint64_t v90 = v4[5];
      *(void *)(v87 + 24) = v90;
      uint64_t v91 = *(void *)(v90 + 32);
      uint64_t v92 = *(unsigned int *)(v87 + 40);
      if (v92)
      {
        uint64_t v117 = *(void *)(v87 + 32);
        uint64_t v118 = *(void *)(v91 + 40);
        uint64_t v119 = 32 * v92;
        do
        {
          if (!*(unsigned char *)v117)
          {
            uint64_t v120 = *(unsigned int *)(v117 + 4);
            if ((int)v120 >= 0) {
              int v121 = (uint64_t *)(*(void *)(v118 + 272) + 8 * v120);
            }
            else {
              int v121 = (uint64_t *)(*(void *)(v118 + 24) + 16 * (v120 & 0x7FFFFFFF) + 8);
            }
            uint64_t v122 = *v121;
            if (*v121)
            {
              uint64_t v123 = *(void *)(v122 + 16);
              *(void *)(v122 + 16) = v117;
              *(void *)(v117 + 16) = v123;
              if (*(unsigned char *)(v117 + 3))
              {
                *(void *)(v117 + 24) = v122;
              }
              else
              {
                *(void *)(v117 + 24) = 0;
                int v121 = (uint64_t *)(v123 + 24);
              }
            }
            else
            {
              *(void *)(v117 + 16) = v117;
              *(void *)(v117 + 24) = 0;
            }
            *int v121 = v117;
          }
          v117 += 32;
          v119 -= 32;
        }
        while (v119);
      }
      uint64_t v93 = *(void *)(v91 + 728);
      if (v93) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v93 + 24))(v93, v87);
      }
      unint64_t v94 = *v89 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v87 = v94 | *(void *)v87 & 7;
      *(void *)(v87 + 8) = v89;
      *(void *)(v94 + 8) = v87;
      *int v89 = *v89 & 7 | v87;
      uint64_t v63 = v136;
    }
LABEL_91:
    j |= v132;
    BOOL v4 = (void *)v4[1];
  }
  while (v4 != v130);
LABEL_134:
  if (v149 != v151) {
    free(v149);
  }
  return j & 1;
}

uint64_t sub_1CBC10DD8(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 192) == -1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  int v5 = *(unsigned __int16 **)(v4 + 16);
  int v6 = *v5;
  BOOL v7 = (v6 - 9) > 0x3C || ((1 << (v6 - 9)) & 0x1000000000000605) == 0;
  BOOL v8 = !v7 || v6 == 0;
  if (!v8 && (v5[4] & 0x10) == 0 && (v5[8] & 1) == 0
    || (v5[4] & 8) != 0
    || !*(_DWORD *)(v4 + 40)
    || (**(_DWORD **)(v4 + 32) & 0x10000FF) != 0x1000000
    || sub_1CBC2D2EC(v4, 0, (void *)(*(void *)(a1 + 24) + 8)) != 2)
  {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(a2 + 120);
  if (v9)
  {
    uint64_t v10 = *(void **)(a2 + 112);
    uint64_t v11 = 16 * v9;
    while ((*v10 & 6) == 0)
    {
      unint64_t v12 = *v10 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v12 + 192) == -1) {
        break;
      }
      uint64_t v13 = *(void *)(v12 + 8);
      uint64_t v14 = *(unsigned __int16 **)(v13 + 16);
      int v15 = *v14;
      BOOL v16 = (v15 - 9) > 0x3C || ((1 << (v15 - 9)) & 0x1000000000000605) == 0;
      BOOL v17 = !v16 || v15 == 0;
      if (!v17 && (v14[4] & 0x10) == 0 && (v14[8] & 1) == 0
        || (v14[4] & 8) != 0
        || !*(_DWORD *)(v13 + 40)
        || (**(_DWORD **)(v13 + 32) & 0x10000FF) != 0x1000000
        || sub_1CBC2D2EC(v13, 0, (void *)(*(void *)(a1 + 24) + 8)) != 2)
      {
        break;
      }
      v10 += 2;
      uint64_t result = 1;
      v11 -= 16;
      if (!v11) {
        return result;
      }
    }
    return 0;
  }
  return 1;
}

void sub_1CBC10F7C(uint64_t a1, llvm::SUnit *a2, int a3)
{
  if (*(unsigned char *)(a1 + 1674))
  {
    uint64_t v6 = *((void *)a2 + 3);
    if (!v6)
    {
      if (byte_1EBD06248 && (uint64_t v48 = *(void *)(a1 + 128), *(void *)(v48 + 672)))
      {
        uint64_t v6 = llvm::TargetSchedModel::resolveSchedClass((llvm::TargetSchedModel *)(v48 + 632), *((const llvm::MachineInstr **)a2 + 1));
        *((void *)a2 + 3) = v6;
      }
      else
      {
        uint64_t v6 = 0;
      }
    }
    if (*(_WORD *)(v6 + 12))
    {
      unsigned int v7 = *(unsigned __int16 *)(a1 + 1676);
      BOOL v8 = (unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 176) + 136)
                              + 4 * *(unsigned __int16 *)(v6 + 10)
                              + 2);
      uint64_t v9 = 4 * *(unsigned __int16 *)(v6 + 12);
      while (*(v8 - 1) != v7)
      {
        v8 += 2;
        v9 -= 4;
        if (!v9) {
          goto LABEL_9;
        }
      }
      unsigned int v10 = *v8;
      if (v10 >= 2)
      {
        unsigned int NextResourceCycle = llvm::SchedBoundary::getNextResourceCycle(a1 + 848, v6, v7, v10);
        unsigned int v35 = *(_DWORD *)(a1 + 996);
        if (v35 < NextResourceCycle)
        {
          uint64_t v36 = *(_DWORD **)(a1 + 856);
          if (!v36[1] && *(_DWORD *)(a1 + 1004) > NextResourceCycle) {
            unsigned int NextResourceCycle = *(_DWORD *)(a1 + 1004);
          }
          unsigned int v37 = NextResourceCycle - v35;
          unsigned int v38 = (NextResourceCycle - v35) * *v36;
          unsigned int v39 = *(_DWORD *)(a1 + 1000);
          BOOL v40 = v39 >= v38;
          unsigned int v41 = v39 - v38;
          if (!v40) {
            unsigned int v41 = 0;
          }
          *(_DWORD *)(a1 + 1000) = v41;
          unsigned int v42 = *(_DWORD *)(a1 + 1012);
          BOOL v40 = v42 >= v37;
          unsigned int v43 = v42 - v37;
          if (!v40) {
            unsigned int v43 = 0;
          }
          *(_DWORD *)(a1 + 1012) = v43;
          if (*(_DWORD *)(*(void *)(a1 + 984) + 8))
          {
            if (NextResourceCycle != v35)
            {
              unsigned int v53 = NextResourceCycle;
              do
              {
                uint64_t v54 = **(void **)(a1 + 984);
                if (*(_DWORD *)(a1 + 872) == 1) {
                  (*(void (**)(void))(v54 + 80))();
                }
                else {
                  (*(void (**)(void))(v54 + 88))();
                }
                int v55 = *(_DWORD *)(a1 + 996) + 1;
                *(_DWORD *)(a1 + 996) = v55;
              }
              while (v55 != v53);
              uint64_t v36 = *(_DWORD **)(a1 + 856);
              unsigned int NextResourceCycle = v53;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 996) = NextResourceCycle;
          }
          *(unsigned char *)(a1 + 992) = 1;
          int v44 = v36[69];
          uint64_t v45 = *(unsigned int *)(a1 + 1108);
          if (v45) {
            int v46 = *(_DWORD *)(*(void *)(a1 + 1024) + 4 * v45);
          }
          else {
            int v46 = v36[68] * *(_DWORD *)(a1 + 1016);
          }
          unsigned int v47 = *(_DWORD *)(a1 + 1008);
          if (v47 <= NextResourceCycle) {
            unsigned int v47 = NextResourceCycle;
          }
          *(unsigned char *)(a1 + 1112) = (int)(v46 - v47 * v44) >= v44;
        }
      }
    }
LABEL_9:
    if (*(void *)(a1 + 1736))
    {
      unsigned int v33 = *(_DWORD *)(a1 + 1728) + 1;
      *(_DWORD *)(a1 + 1728) = v33;
      if (v33 >= 9)
      {
        *(_DWORD *)(a1 + 1728) = 0;
        *(void *)(a1 + 1736) = 0;
      }
    }
    int v11 = *(_DWORD *)(a1 + 996);
    int v12 = *((_DWORD *)a2 + 48);
    if (v12 != -1)
    {
      uint64_t v13 = *(unsigned __int16 **)(*((void *)a2 + 1) + 16);
      uint64_t v14 = *((void *)v13 + 2);
      if ((v14 & 0x400000000) != 0)
      {
        if ((v14 & 2) != 0
          || ((uint64_t v15 = sub_1CBE52E8C(*v13), (v15 & 0xFF00000000) != 0)
            ? (BOOL v16 = (v15 - 79) > 1)
            : (BOOL v16 = 1),
              !v16))
        {
          *(void *)(a1 + 1736) = a2;
          *(_DWORD *)(a1 + 1728) = 0;
          int v12 = *((_DWORD *)a2 + 48);
        }
      }
    }
    int v57 = v12;
    int v58 = 0;
    int v17 = *(_DWORD *)(a1 + 1696);
    if (v17)
    {
      uint64_t v18 = *(void *)(a1 + 1680);
      unsigned int v19 = v17 - 1;
      uint64_t v20 = (v17 - 1) & (37 * v12);
      int v21 = (_DWORD *)(v18 + 8 * v20);
      int v22 = *v21;
      if (v12 == *v21)
      {
LABEL_67:
        unsigned int v31 = *(_DWORD *)(v18 + 8 * v20 + 4);
        uint64_t v30 = *(void *)(a1 + 1704);
LABEL_28:
        *(_DWORD *)(v30 + 8 * v31 + 4) = v11;
        goto LABEL_29;
      }
      unsigned int v23 = 0;
      int v24 = 1;
      while (v22 != -1)
      {
        if (v23) {
          BOOL v50 = 0;
        }
        else {
          BOOL v50 = v22 == -2;
        }
        if (v50) {
          unsigned int v23 = v21;
        }
        int v51 = v20 + v24++;
        uint64_t v20 = v51 & v19;
        int v21 = (_DWORD *)(v18 + 8 * v20);
        int v22 = *v21;
        if (v12 == *v21) {
          goto LABEL_67;
        }
      }
      if (v23) {
        unsigned int v25 = v23;
      }
      else {
        unsigned int v25 = v21;
      }
    }
    else
    {
      unsigned int v25 = 0;
    }
    uint64_t v26 = sub_1CB83889C(a1 + 1680, (uint64_t)&v57, &v57, v25);
    _DWORD *v26 = v57;
    v26[1] = v58;
    uint64_t v27 = *((unsigned int *)a2 + 48);
    uint64_t v56 = v27;
    unsigned int v28 = *(void **)(a1 + 1712);
    if ((unint64_t)v28 >= *(void *)(a1 + 1720))
    {
      unsigned int v52 = v26;
      uint64_t v29 = sub_1CBC13470((void **)(a1 + 1704), &v56);
      uint64_t v26 = v52;
    }
    else
    {
      *unsigned int v28 = v27;
      uint64_t v29 = v28 + 1;
    }
    *(void *)(a1 + 1712) = v29;
    uint64_t v30 = *(void *)(a1 + 1704);
    unsigned int v31 = (((unint64_t)v29 - v30) >> 3) - 1;
    v26[1] = v31;
    goto LABEL_28;
  }
LABEL_29:
  if (!a3)
  {
    unsigned int v32 = *(_DWORD *)(a1 + 996);
    if (*((_DWORD *)a2 + 63) > v32) {
      unsigned int v32 = *((_DWORD *)a2 + 63);
    }
    *((_DWORD *)a2 + 63) = v32;
    llvm::SchedBoundary::bumpNode((llvm::SchedBoundary *)(a1 + 848), a2);
    if ((*((_WORD *)a2 + 114) & 0x40) == 0) {
      return;
    }
LABEL_60:
    llvm::GenericScheduler::reschedulePhysReg((uint64_t **)a1, a2, a3);
    return;
  }
  unsigned int v49 = *(_DWORD *)(a1 + 292);
  if (*((_DWORD *)a2 + 62) > v49) {
    unsigned int v49 = *((_DWORD *)a2 + 62);
  }
  *((_DWORD *)a2 + 62) = v49;
  llvm::SchedBoundary::bumpNode((llvm::SchedBoundary *)(a1 + 144), a2);
  if ((*((_WORD *)a2 + 114) & 0x20) != 0) {
    goto LABEL_60;
  }
}

uint64_t sub_1CBC11378(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10 = a2[1];
  unsigned int v11 = a3[1];
  if (v10 >> 15 > v11 >> 15) {
    goto LABEL_21;
  }
  if (v10 >> 15 < v11 >> 15) {
    goto LABEL_19;
  }
  int v15 = *a2;
  int v16 = *a3;
  if (v15 != v16)
  {
    if (*a2)
    {
      int v20 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a7 + 272))(a7, a8, (unsigned __int16)(v15 - 1));
      int v21 = *a3;
    }
    else
    {
      int v20 = 0x7FFFFFFF;
      int v21 = *a3;
    }
    if (v21) {
      int v22 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a7 + 272))(a7, a8, (unsigned __int16)(v16 - 1));
    }
    else {
      int v22 = 0x7FFFFFFF;
    }
    int v23 = (__int16)a2[1];
    BOOL v24 = v23 < 0;
    if (v23 >= 0) {
      int v25 = v20;
    }
    else {
      int v25 = v22;
    }
    if (v24) {
      int v26 = v20;
    }
    else {
      int v26 = v22;
    }
    if (v25 <= v26)
    {
      if (v25 >= v26) {
        return 0;
      }
      goto LABEL_19;
    }
LABEL_21:
    uint64_t v27 = (unsigned char *)(a4 + 16);
    goto LABEL_22;
  }
  if ((__int16)v10 < (__int16)v11) {
    goto LABEL_21;
  }
  if ((__int16)v10 <= (__int16)v11) {
    return 0;
  }
LABEL_19:
  unsigned int v28 = *(unsigned __int8 *)(a5 + 16);
  uint64_t v27 = (unsigned char *)(a5 + 16);
  if (v28 > a6) {
LABEL_22:
  }
    *uint64_t v27 = a6;
  return 1;
}

uint64_t sub_1CBC114EC(uint64_t result, unsigned __int8 *a2, unsigned __int8 *a3, _DWORD *a4)
{
  uint64_t v5 = *((void *)a2 + 1);
  if (!v5)
  {
LABEL_148:
    char v82 = 17;
    goto LABEL_149;
  }
  unsigned int v7 = a3[32];
  unsigned int v8 = a2[32];
  if (v7 > v8)
  {
    char v82 = 2;
    goto LABEL_149;
  }
  if (v7 < v8)
  {
    if (a2[16] < 3u) {
      return result;
    }
    char v81 = 2;
    goto LABEL_127;
  }
  uint64_t v10 = result;
  uint64_t v11 = *((void *)a3 + 1);
  uint64_t v12 = a3[30];
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v14 = *(unsigned __int16 **)(v13 + 16);
  int v15 = *v14;
  if (a3[30])
  {
    if (v15 == 19)
    {
      uint64_t v112 = *(void *)(v13 + 32);
      if ((*(_DWORD *)(v112 + 32 * v12 + 4) - 1) < 0x3FFFFFFF) {
        goto LABEL_203;
      }
      uint64_t v113 = 212;
      if (!a3[30]) {
        uint64_t v113 = 208;
      }
      unsigned int v114 = *(_DWORD *)(v112 + 32 * (v12 == 0) + 4) - 0x40000000;
      if (*(_DWORD *)(v11 + v113)) {
        int v17 = 1;
      }
      else {
        int v17 = -1;
      }
      if (v114 > 0xC0000000) {
        goto LABEL_8;
      }
    }
    uint64_t v92 = *((void *)v14 + 1);
    if ((v92 & 0x2000) == 0) {
      goto LABEL_7;
    }
    uint64_t v93 = *(void *)(v13 + 32);
    unsigned int v94 = *((unsigned __int8 *)v14 + 4);
    if ((v92 & 2) == 0 || (int v118 = *(_DWORD *)(v13 + 40), v118 == v94))
    {
      unsigned int v95 = v94;
    }
    else
    {
      int v119 = v118 - 1;
      unsigned int v95 = v94;
      do
      {
        int v120 = *(_DWORD *)(v93 + 32 * v94);
        if ((v120 & 0x10000FF) != 0x1000000) {
          break;
        }
        v95 += (v120 & 0x2000000) == 0;
        if (v119 == v94) {
          break;
        }
        ++v94;
      }
      while ((v120 & 0x2000000) == 0);
    }
    if (v95)
    {
      uint64_t v96 = 32 * v95;
      uint64_t v97 = (_DWORD *)(v93 + 4);
      while (*((unsigned char *)v97 - 4) || (*v97 - 1) <= 0x3FFFFFFE)
      {
        v97 += 8;
        v96 -= 32;
        if (!v96) {
          goto LABEL_159;
        }
      }
      goto LABEL_7;
    }
LABEL_159:
    if (a3[30]) {
      int v17 = -1;
    }
    else {
      int v17 = 1;
    }
    goto LABEL_8;
  }
  if (v15 != 19)
  {
LABEL_6:
    uint64_t v16 = *((void *)v14 + 1);
    if ((v16 & 0x2000) == 0)
    {
LABEL_7:
      int v17 = 0;
      goto LABEL_8;
    }
    uint64_t v53 = *(void *)(v13 + 32);
    unsigned int v54 = *((unsigned __int8 *)v14 + 4);
    if ((v16 & 2) == 0 || (int v74 = *(_DWORD *)(v13 + 40), v74 == v54))
    {
      unsigned int v55 = *((unsigned __int8 *)v14 + 4);
    }
    else
    {
      int v75 = v74 - 1;
      unsigned int v55 = *((unsigned __int8 *)v14 + 4);
      do
      {
        int v76 = *(_DWORD *)(v53 + 32 * v54);
        if ((v76 & 0x10000FF) != 0x1000000) {
          break;
        }
        v55 += (v76 & 0x2000000) == 0;
        if (v75 == v54) {
          break;
        }
        ++v54;
      }
      while ((v76 & 0x2000000) == 0);
    }
    if (v55)
    {
      uint64_t v56 = (_DWORD *)(v53 + 4);
      uint64_t v57 = 32 * v55;
      while (*((unsigned char *)v56 - 4) || (*v56 - 1) <= 0x3FFFFFFE)
      {
        v56 += 8;
        int v17 = 1;
        v57 -= 32;
        if (!v57) {
          goto LABEL_8;
        }
      }
      goto LABEL_7;
    }
    goto LABEL_203;
  }
  uint64_t v69 = *(void *)(v13 + 32);
  if ((*(_DWORD *)(v69 + 32 * v12 + 4) - 1) < 0x3FFFFFFF)
  {
LABEL_203:
    int v17 = 1;
    goto LABEL_8;
  }
  unsigned int v70 = *(_DWORD *)(v69 + 32 * (v12 == 0) + 4) - 0x40000000;
  if (*(_DWORD *)(v11 + 208)) {
    int v17 = 1;
  }
  else {
    int v17 = -1;
  }
  if (v70 <= 0xC0000000) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v18 = a2[30];
  uint64_t v19 = *(void *)(v5 + 8);
  int v20 = *(unsigned __int16 **)(v19 + 16);
  int v21 = *v20;
  if (a2[30])
  {
    if (v21 == 19)
    {
      uint64_t v115 = *(void *)(v19 + 32);
      if ((*(_DWORD *)(v115 + 32 * v18 + 4) - 1) < 0x3FFFFFFF) {
        goto LABEL_212;
      }
      uint64_t v116 = 212;
      if (!a2[30]) {
        uint64_t v116 = 208;
      }
      unsigned int v117 = *(_DWORD *)(v115 + 32 * (v18 == 0) + 4) - 0x40000000;
      if (*(_DWORD *)(v5 + v116)) {
        int v23 = 1;
      }
      else {
        int v23 = -1;
      }
      if (v117 > 0xC0000000) {
        goto LABEL_12;
      }
    }
    uint64_t v98 = *((void *)v20 + 1);
    if ((v98 & 0x2000) == 0) {
      goto LABEL_11;
    }
    uint64_t v99 = *(void *)(v19 + 32);
    unsigned int v100 = *((unsigned __int8 *)v20 + 4);
    if ((v98 & 2) == 0 || (int v121 = *(_DWORD *)(v19 + 40), v121 == v100))
    {
      unsigned int v101 = v100;
    }
    else
    {
      int v122 = v121 - 1;
      unsigned int v101 = v100;
      do
      {
        int v123 = *(_DWORD *)(v99 + 32 * v100);
        if ((v123 & 0x10000FF) != 0x1000000) {
          break;
        }
        v101 += (v123 & 0x2000000) == 0;
        if (v122 == v100) {
          break;
        }
        ++v100;
      }
      while ((v123 & 0x2000000) == 0);
    }
    if (v101)
    {
      uint64_t v102 = 32 * v101;
      uint64_t v103 = (_DWORD *)(v99 + 4);
      while (*((unsigned char *)v103 - 4) || (*v103 - 1) <= 0x3FFFFFFE)
      {
        v103 += 8;
        v102 -= 32;
        if (!v102) {
          goto LABEL_171;
        }
      }
      goto LABEL_11;
    }
LABEL_171:
    if (a2[30]) {
      int v23 = -1;
    }
    else {
      int v23 = 1;
    }
    goto LABEL_12;
  }
  if (v21 != 19)
  {
LABEL_10:
    uint64_t v22 = *((void *)v20 + 1);
    if ((v22 & 0x2000) == 0)
    {
LABEL_11:
      int v23 = 0;
      goto LABEL_12;
    }
    uint64_t v58 = *(void *)(v19 + 32);
    unsigned int v59 = *((unsigned __int8 *)v20 + 4);
    if ((v22 & 2) == 0 || (int v77 = *(_DWORD *)(v19 + 40), v77 == v59))
    {
      unsigned int v60 = *((unsigned __int8 *)v20 + 4);
    }
    else
    {
      int v78 = v77 - 1;
      unsigned int v60 = *((unsigned __int8 *)v20 + 4);
      do
      {
        int v79 = *(_DWORD *)(v58 + 32 * v59);
        if ((v79 & 0x10000FF) != 0x1000000) {
          break;
        }
        v60 += (v79 & 0x2000000) == 0;
        if (v78 == v59) {
          break;
        }
        ++v59;
      }
      while ((v79 & 0x2000000) == 0);
    }
    if (v60)
    {
      uint64_t v61 = (_DWORD *)(v58 + 4);
      uint64_t v62 = 32 * v60;
      while (*((unsigned char *)v61 - 4) || (*v61 - 1) <= 0x3FFFFFFE)
      {
        v61 += 8;
        int v23 = 1;
        v62 -= 32;
        if (!v62) {
          goto LABEL_12;
        }
      }
      goto LABEL_11;
    }
    goto LABEL_212;
  }
  uint64_t v71 = *(void *)(v19 + 32);
  if ((*(_DWORD *)(v71 + 32 * v18 + 4) - 1) < 0x3FFFFFFF)
  {
LABEL_212:
    int v23 = 1;
    goto LABEL_12;
  }
  unsigned int v72 = *(_DWORD *)(v71 + 32 * (v18 == 0) + 4) - 0x40000000;
  if (*(_DWORD *)(v5 + 208)) {
    int v23 = 1;
  }
  else {
    int v23 = -1;
  }
  if (v72 <= 0xC0000000) {
    goto LABEL_10;
  }
LABEL_12:
  if (v17 > v23)
  {
    char v82 = 3;
LABEL_149:
    a3[16] = v82;
    return result;
  }
  if (v17 < v23)
  {
    if (a2[16] < 4u) {
      return result;
    }
    char v81 = 3;
    goto LABEL_127;
  }
  uint64_t v24 = *(void *)(result + 128);
  if (!*(unsigned char *)(v24 + 3120)) {
    goto LABEL_25;
  }
  unsigned int v25 = *((unsigned __int16 *)a3 + 10);
  unsigned int v26 = *((unsigned __int16 *)a2 + 10);
  if (v25 >> 15 > v26 >> 15) {
    goto LABEL_116;
  }
  if (v25 >> 15 < v26 >> 15) {
    goto LABEL_100;
  }
  uint64_t v27 = *(void *)(result + 24);
  uint64_t v28 = *(void *)(v24 + 32);
  int v29 = *((unsigned __int16 *)a3 + 9);
  int v30 = *((unsigned __int16 *)a2 + 9);
  if (v29 != v30)
  {
    if (*((_WORD *)a3 + 9))
    {
      int v45 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)v27 + 272))(*(void *)(result + 24), v28, (unsigned __int16)(v29 - 1));
      int v46 = *((unsigned __int16 *)a2 + 9);
    }
    else
    {
      int v45 = 0x7FFFFFFF;
      int v46 = *((unsigned __int16 *)a2 + 9);
    }
    if (v46) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v27 + 272))(v27, v28, (unsigned __int16)(v30 - 1));
    }
    else {
      uint64_t result = 0x7FFFFFFFLL;
    }
    int v47 = *((__int16 *)a3 + 10);
    BOOL v48 = v47 < 0;
    if (v47 >= 0) {
      int v49 = v45;
    }
    else {
      int v49 = result;
    }
    if (v48) {
      int v50 = v45;
    }
    else {
      int v50 = result;
    }
    if (v49 <= v50)
    {
      if (v49 >= v50)
      {
        uint64_t v111 = *(void *)(v10 + 128);
        if (!*(unsigned char *)(v111 + 3120)) {
          goto LABEL_25;
        }
        uint64_t v27 = *(void *)(v10 + 24);
        uint64_t v28 = *(void *)(v111 + 32);
        goto LABEL_20;
      }
      unsigned int v52 = a2[16];
      int v51 = (char *)(a2 + 16);
      if (v52 < 5) {
        return result;
      }
LABEL_117:
      char v80 = 4;
LABEL_118:
      char *v51 = v80;
      return result;
    }
LABEL_116:
    int v51 = (char *)(a3 + 16);
    goto LABEL_117;
  }
  if ((__int16)v25 < (__int16)v26) {
    goto LABEL_116;
  }
  if ((__int16)v25 > (__int16)v26)
  {
LABEL_100:
    int v51 = (char *)(a2 + 16);
    if (a2[16] <= 4u) {
      return result;
    }
    goto LABEL_117;
  }
LABEL_20:
  unsigned int v31 = *((unsigned __int16 *)a3 + 12);
  unsigned int v32 = *((unsigned __int16 *)a2 + 12);
  if (v31 >> 15 > v32 >> 15) {
    goto LABEL_119;
  }
  if (v31 >> 15 < v32 >> 15)
  {
LABEL_102:
    unsigned int v73 = a2[16];
    int v51 = (char *)(a2 + 16);
    if (v73 <= 5) {
      return result;
    }
    goto LABEL_120;
  }
  int v33 = *((unsigned __int16 *)a3 + 11);
  int v34 = *((unsigned __int16 *)a2 + 11);
  if (v33 == v34)
  {
    if ((__int16)v31 >= (__int16)v32)
    {
      if ((__int16)v31 <= (__int16)v32) {
        goto LABEL_25;
      }
      goto LABEL_102;
    }
    goto LABEL_119;
  }
  int v63 = *((_WORD *)a3 + 11)
      ? (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v27 + 272))(v27, v28, (unsigned __int16)(v33 - 1)): 0x7FFFFFFF;
  uint64_t result = *((_WORD *)a2 + 11)
         ? (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v27 + 272))(v27, v28, (unsigned __int16)(v34 - 1)): 0x7FFFFFFFLL;
  int v64 = *((__int16 *)a3 + 12);
  BOOL v65 = v64 < 0;
  int v66 = v64 >= 0 ? v63 : result;
  int v67 = v65 ? v63 : result;
  if (v66 > v67)
  {
LABEL_119:
    int v51 = (char *)(a3 + 16);
LABEL_120:
    char v80 = 5;
    goto LABEL_118;
  }
  if (v66 < v67)
  {
    unsigned int v68 = a2[16];
    int v51 = (char *)(a2 + 16);
    if (v68 < 6) {
      return result;
    }
    goto LABEL_120;
  }
LABEL_25:
  if (!a4) {
    goto LABEL_33;
  }
  if (!*(unsigned char *)(v10 + 44)
    || a4[38]
    || (uint64_t result = sub_1CD426874(result, (uint64_t)a3, (uint64_t)a2, a4), (result & 1) == 0))
  {
    uint64_t v35 = *((void *)a3 + 1);
    if ((*(_WORD *)(v35 + 228) & 0x4000) != 0)
    {
      uint64_t v104 = 252;
      if (a4[6] == 1) {
        uint64_t v104 = 248;
      }
      unsigned int v105 = *(_DWORD *)(v35 + v104);
      unsigned int v106 = a4[37];
      BOOL v107 = v105 >= v106;
      int v36 = v105 - v106;
      if (!v107) {
        int v36 = 0;
      }
    }
    else
    {
      int v36 = 0;
    }
    uint64_t v37 = *((void *)a2 + 1);
    if ((*(_WORD *)(v37 + 228) & 0x4000) != 0)
    {
      uint64_t v108 = 252;
      if (a4[6] == 1) {
        uint64_t v108 = 248;
      }
      unsigned int v109 = *(_DWORD *)(v37 + v108);
      unsigned int v110 = a4[37];
      BOOL v107 = v109 >= v110;
      int v38 = v109 - v110;
      if (!v107) {
        int v38 = 0;
      }
    }
    else
    {
      int v38 = 0;
    }
    if (v36 < v38)
    {
      char v82 = 6;
      goto LABEL_149;
    }
    if (v36 > v38)
    {
      if (a2[16] < 7u) {
        return result;
      }
      char v81 = 6;
      goto LABEL_127;
    }
LABEL_33:
    uint64_t v39 = *(void *)(v10 + 128);
    BOOL v40 = (uint64_t *)(v39 + 2696);
    if (a2[30]) {
      unsigned int v41 = (uint64_t *)(v39 + 2704);
    }
    else {
      unsigned int v41 = (uint64_t *)(v39 + 2696);
    }
    uint64_t v42 = *v41;
    if (a3[30]) {
      BOOL v40 = (uint64_t *)(v39 + 2704);
    }
    uint64_t v43 = *v40;
    uint64_t result = *((void *)a3 + 1);
    uint64_t v44 = *((void *)a2 + 1);
    if (result == v43 && v44 != v42)
    {
      char v82 = 7;
      goto LABEL_149;
    }
    if (result != v43 && v44 == v42)
    {
      if (a2[16] < 8u) {
        return result;
      }
      char v81 = 7;
      goto LABEL_127;
    }
    if (a4)
    {
      int WeakLeft = llvm::getWeakLeft(result, a3[30] != 0);
      uint64_t result = llvm::getWeakLeft(*((void *)a2 + 1), a2[30]);
      if (WeakLeft < (int)result)
      {
        char v82 = 8;
        goto LABEL_149;
      }
      if (WeakLeft > (int)result)
      {
        if (a2[16] < 9u) {
          return result;
        }
        char v81 = 8;
        goto LABEL_127;
      }
      uint64_t v39 = *(void *)(v10 + 128);
    }
    if (*(unsigned char *)(v39 + 3120))
    {
      uint64_t result = sub_1CBC11378(result, (unsigned __int16 *)a3 + 13, (unsigned __int16 *)a2 + 13, (uint64_t)a3, (uint64_t)a2, 9u, *(void *)(v10 + 24), *(void *)(v39 + 32));
      if (result) {
        return result;
      }
    }
    if (!*(unsigned char *)(v10 + 1744)) {
      goto LABEL_141;
    }
    unsigned int v84 = a3[31];
    unsigned int v85 = a2[31];
    if (v84 > v85)
    {
      char v82 = 10;
      goto LABEL_149;
    }
    if (v84 < v85)
    {
      if (a2[16] < 0xBu) {
        return result;
      }
      char v81 = 10;
    }
    else
    {
LABEL_141:
      unsigned int v86 = *a3;
      unsigned int v87 = *a2;
      if (v86 > v87)
      {
        char v82 = 11;
        goto LABEL_149;
      }
      if (v86 < v87)
      {
        if (a2[16] < 0xCu) {
          return result;
        }
        char v81 = 11;
      }
      else
      {
        unsigned int v88 = a3[1];
        unsigned int v89 = a2[1];
        if (v88 > v89)
        {
          char v82 = 12;
          goto LABEL_149;
        }
        if (v88 >= v89)
        {
          if (!a4) {
            return result;
          }
          unsigned int v90 = *(_DWORD *)(*((void *)a3 + 1) + 192);
          unsigned int v91 = *(_DWORD *)(*((void *)a2 + 1) + 192);
          if (a4[6] == 1)
          {
            if (v90 >= v91) {
              return result;
            }
          }
          else if (v90 <= v91)
          {
            return result;
          }
          goto LABEL_148;
        }
        if (a2[16] < 0xDu) {
          return result;
        }
        char v81 = 12;
      }
    }
LABEL_127:
    a2[16] = v81;
  }
  return result;
}

void sub_1CBC11F0C(uint64_t a1, llvm::ScheduleDAGMI *a2)
{
  llvm::GenericScheduler::initialize((llvm::GenericScheduler *)a1, a2);
  uint64_t v4 = *(_DWORD **)(a1 + 24);
  *(_DWORD *)(a1 + 1664) = v4[144];
  *(_DWORD *)(a1 + 1668) = v4[143];
  *(_DWORD *)(a1 + 1660) = (*(uint64_t (**)(void))(*(void *)v4 + 312))();
  uint64_t v6 = &byte_1EA61E000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E7B8, memory_order_acquire) & 1) == 0)
  {
    int v8 = __cxa_guard_acquire(&qword_1EA61E7B8);
    uint64_t v6 = &byte_1EA61E000;
    if (v8)
    {
      qword_1EA61E7B0 = 0x3FE99999A0000000;
      __cxa_guard_release(&qword_1EA61E7B8);
      uint64_t v6 = &byte_1EA61E000;
    }
  }
  double v7 = *((double *)v6 + 246);
  LODWORD(v5) = *(_DWORD *)(a1 + 1660);
  *(_DWORD *)(a1 + 1656) = (v7 * (double)v5);
  *(_DWORD *)(a1 + 1652) = 228;
  *(_DWORD *)(a1 + 1648) = (v7 * 228.0);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 3128) + 4 * *(unsigned int *)(a1 + 1664)) >= 0xE5u) {
    *(unsigned char *)(a1 + 1673) = 1;
  }
  *(unsigned char *)(a1 + 1674) = *(unsigned char *)(a1 + 138) ^ 1;
  *(_WORD *)(a1 + 1676) = 9;
  sub_1CBC120AC(a1 + 1680, -252645135 * ((*((void *)a2 + 7) - *((void *)a2 + 6)) >> 4));
  *(void *)(a1 + 1736) = 0;
  *(_DWORD *)(a1 + 1728) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E7C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA61E7C8))
  {
    byte_1EA61E7C0 = 1;
    __cxa_guard_release(&qword_1EA61E7C8);
  }
  *(unsigned char *)(a1 + 1744) = byte_1EA61E7C0;
}

void sub_1CBC120AC(uint64_t a1, unsigned int a2)
{
  int v4 = *(_DWORD *)(a1 + 8);
  if (v4 || *(_DWORD *)(a1 + 12))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 16);
    if (v5 <= 4 * v4 || v5 < 0x41)
    {
      if (v5)
      {
        uint64_t v6 = *(_DWORD **)a1;
        uint64_t v7 = 8 * v5;
        do
        {
          *uint64_t v6 = -1;
          v6 += 2;
          v7 -= 8;
        }
        while (v7);
      }
      *(void *)(a1 + 8) = 0;
    }
    else
    {
      sub_1CB83872C((_DWORD *)a1);
    }
  }
  int v8 = *(unsigned char **)(a1 + 24);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = a2;
  if (a2)
  {
    unint64_t v10 = (4 * a2 / 3 + 1) | ((unint64_t)(4 * a2 / 3 + 1) >> 1);
    unint64_t v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    unsigned int v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
    if (*(_DWORD *)(a1 + 16) <= v12)
    {
      sub_1CB838A28(a1, v12 + 1);
      int v8 = *(unsigned char **)(a1 + 24);
    }
  }
  if (a2 > (unint64_t)((uint64_t)(*(void *)(a1 + 40) - (void)v8) >> 3))
  {
    uint64_t v13 = *(unsigned char **)(a1 + 32);
    uint64_t v14 = (char *)operator new(8 * v9);
    int v15 = &v14[(v13 - v8) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v16 = v15;
    if (v13 != v8)
    {
      uint64_t v16 = &v14[(v13 - v8) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v17 = *((void *)v13 - 1);
        v13 -= 8;
        *((void *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v13 != v8);
    }
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v15;
    *(void *)(a1 + 40) = &v14[8 * v9];
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_1CBC12208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a2 + 8) = a3;
  *(unsigned char *)(a2 + 30) = *(unsigned char *)(a1 + 1674) ^ 1;
  uint64_t v9 = *(const llvm::MachineInstr **)(a3 + 8);
  unint64_t v10 = *(void **)(a1 + 128);
  if (*(unsigned char *)(a1 + 138)) {
    llvm::RegPressureTracker::getMaxDownwardPressureDelta(a4, v9, a2 + 18, v10[476], (uint64_t)(v10[477] - v10[476]) >> 2, v10[391], (uint64_t)(v10[392] - v10[391]) >> 2);
  }
  else {
    llvm::RegPressureTracker::getUpwardPressureDelta(a4, (uint64_t)v9, (unsigned __int16 *)(v10[388] + ((unint64_t)*(unsigned int *)(a3 + 192) << 6)), a2 + 18, v10[476], (uint64_t)(v10[477] - v10[476]) >> 2, v10[391]);
  }
  if (!*(unsigned char *)(a1 + 1674)) {
    return;
  }
  if (!sub_1CBC10DD8(a1, a3)) {
    goto LABEL_5;
  }
  uint64_t v16 = *(unsigned int *)(a3 + 120);
  if (!v16) {
    goto LABEL_5;
  }
  char v17 = 0;
  uint64_t v18 = *(void *)(a3 + 112);
  uint64_t v19 = v18 + 16 * v16;
  uint64_t v20 = *(void *)(a1 + 1680);
  uint64_t v21 = *(unsigned int *)(a1 + 1696);
  unsigned int v22 = v21 - 1;
  do
  {
    if (v21)
    {
      int v23 = *(_DWORD *)((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) + 192);
      LODWORD(v24) = (37 * v23) & v22;
      unsigned int v25 = (int *)(v20 + 8 * v24);
      int v26 = *v25;
      if (v23 == *v25)
      {
LABEL_17:
        if ((int *)(v20 + 8 * v21) != v25)
        {
          uint64_t v27 = *(void *)(a1 + 1704) + 8 * v25[1];
          goto LABEL_19;
        }
      }
      else
      {
        int v50 = 1;
        while (v26 != -1)
        {
          int v52 = v24 + v50++;
          uint64_t v24 = v52 & v22;
          int v26 = *(_DWORD *)(v20 + 8 * v24);
          if (v23 == v26)
          {
            unsigned int v25 = (int *)(v20 + 8 * v24);
            goto LABEL_17;
          }
        }
      }
    }
    uint64_t v27 = *(void *)(a1 + 1712);
LABEL_19:
    unsigned int v28 = *(_DWORD *)(a5 + 148) - *(_DWORD *)(v27 + 4);
    unsigned int v29 = *(_DWORD *)(v18 + 12);
    if (v28 < v29) {
      return;
    }
    v17 |= v28 == v29;
    v18 += 16;
  }
  while (v18 != v19);
  if (v17)
  {
    if (v16 == 1) {
      *(unsigned char *)a2 = 1;
    }
    else {
      *(unsigned char *)(a2 + 1) = 1;
    }
  }
LABEL_5:
  if (*(unsigned char *)(a1 + 1744))
  {
    LOBYTE(isIdenticalTo) = 0;
    uint64_t v12 = *(void *)(a2 + 8);
    if (!v12) {
      goto LABEL_8;
    }
    uint64_t v13 = *(void *)(a1 + 1736);
    if (!v13) {
      goto LABEL_8;
    }
    if (*(_DWORD *)(v12 + 192) == -1) {
      goto LABEL_32;
    }
    uint64_t v30 = *(void *)(v12 + 8);
    unsigned int v31 = *(unsigned __int16 **)(v30 + 16);
    uint64_t v32 = *((void *)v31 + 2);
    if ((v32 & 0x400000000) == 0) {
      goto LABEL_32;
    }
    if ((v32 & 2) == 0)
    {
      uint64_t v33 = sub_1CBE52E8C(*v31);
      if ((v33 & 0xFF00000000) == 0 || (v33 - 79) > 1) {
        goto LABEL_32;
      }
    }
    if (*(_DWORD *)(v13 + 192) == -1
      || (uint64_t v35 = *(void *)(v13 + 8),
          int v36 = *(unsigned __int16 **)(v35 + 16),
          uint64_t v37 = *((void *)v36 + 2),
          (v37 & 0x400000000) == 0)
      || (v37 & 2) == 0
      && ((uint64_t v48 = sub_1CBE52E8C(*v36), (v48 & 0xFF00000000) != 0) ? (v49 = (v48 - 79) > 1) : (v49 = 1),
          v49))
    {
LABEL_32:
      LOBYTE(isIdenticalTo) = 0;
      goto LABEL_8;
    }
    if (*v31 - 1 <= 1 && (*(unsigned char *)(*(void *)(v30 + 32) + 48) & 0x10) != 0)
    {
      int hasPropertyInBundle = 1;
    }
    else
    {
      __int16 v38 = *(_WORD *)(v30 + 44);
      if ((v38 & 0xC) != 0 && (v38 & 4) == 0)
      {
        int hasPropertyInBundle = llvm::MachineInstr::hasPropertyInBundle(v30, 0x100000, 1);
        int v36 = *(unsigned __int16 **)(v35 + 16);
      }
      else
      {
        int hasPropertyInBundle = (*((unsigned __int8 *)v31 + 10) >> 4) & 1;
      }
    }
    int v40 = *v36;
    if ((unsigned __int16)(v40 - 1) <= 1u && (uint64_t v43 = *(void *)(v35 + 32), (*(unsigned char *)(v43 + 48) & 0x10) != 0))
    {
      if ((hasPropertyInBundle & 1) == 0) {
        goto LABEL_32;
      }
    }
    else
    {
      __int16 v41 = *(_WORD *)(v35 + 44);
      if ((v41 & 0xC) != 0 && (v41 & 4) == 0)
      {
        int v51 = hasPropertyInBundle;
        int v42 = llvm::MachineInstr::hasPropertyInBundle(v35, 0x100000, 1);
        int hasPropertyInBundle = v51;
      }
      else
      {
        int v42 = (*((unsigned __int8 *)v36 + 10) >> 4) & 1;
      }
      if (hasPropertyInBundle != v42) {
        goto LABEL_32;
      }
      int v40 = **(unsigned __int16 **)(v35 + 16);
      uint64_t v43 = *(void *)(v35 + 32);
    }
    unsigned int v44 = sub_1CBDA6464(**(unsigned __int16 **)(v30 + 16), 0x59u);
    unsigned int v45 = sub_1CBDA6464(v40, 0x59u);
    BOOL isIdenticalTo = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(void *)(v30 + 32) + 32 * v44), (const llvm::MachineOperand *)(v43 + 32 * v45));
    if (isIdenticalTo)
    {
      unsigned int v46 = sub_1CBDA6464(**(unsigned __int16 **)(v30 + 16), 0x5Au);
      unsigned int v47 = sub_1CBDA6464(**(unsigned __int16 **)(v35 + 16), 0x5Au);
      LOBYTE(isIdenticalTo) = llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(void *)(v30 + 32) + 32 * v46), (const llvm::MachineOperand *)(*(void *)(v35 + 32) + 32 * v47));
    }
LABEL_8:
    *(unsigned char *)(a2 + 31) = isIdenticalTo;
  }
  uint64_t v14 = *(void *)(a1 + 1712);
  if (*(void *)(a1 + 1704) != v14)
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 128) + 48);
    if (v15) {
      *(unsigned char *)(a2 + 32) = sub_1CBC2FDB8(*(void *)(*(void *)(a2 + 8) + 8), *(void *)(v15 + 272 * *(unsigned int *)(v14 - 8) + 8));
    }
  }
}

_DWORD *sub_1CBC1260C(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (v2[335] == v2[336]) {
    return 0;
  }
  *(unsigned char *)(a1 + 1672) = *(_DWORD *)(v2[614] + 4 * *(unsigned int *)(a1 + 1664)) >= *(_DWORD *)(a1 + 1648);
  uint64_t v5 = (_DWORD *)(a1 + 144);
  uint64_t v6 = (_DWORD *)(a1 + 848);
  if (*(unsigned char *)(a1 + 1674)) {
    uint64_t v7 = (llvm::SchedBoundary *)(a1 + 848);
  }
  else {
    uint64_t v7 = (llvm::SchedBoundary *)(a1 + 144);
  }
  uint64_t v8 = llvm::SchedBoundary::pickOnlyChoice(v7);
  if (!v8 || (uint64_t v18 = (_DWORD *)v8, *(unsigned char *)(a1 + 1672)))
  {
    LOWORD(v64) = 0;
    *((void *)&v64 + 1) = 0;
    v65[0] = 0;
    *(void *)&v65[2] = 0;
    *(void *)&v65[9] = 0;
    uint64_t v9 = a1 + 872;
    if (!*(unsigned char *)(a1 + 1674)) {
      uint64_t v9 = a1 + 168;
    }
    uint64_t v10 = *(void *)(a1 + 128);
    uint64_t v11 = v10 + 4160;
    uint64_t v12 = v10 + 4840;
    uint64_t v13 = *(unsigned char *)(a1 + 1674) ? v6 : v5;
    uint64_t v14 = *(unsigned char *)(a1 + 1674) ? v12 : v11;
    uint64_t v15 = *(uint64_t **)(v9 + 32);
    uint64_t v16 = *(uint64_t **)(v9 + 40);
    if (v15 == v16)
    {
      uint64_t v18 = 0;
    }
    else
    {
      do
      {
        uint64_t v17 = *v15;
        LOWORD(v66) = 0;
        *((void *)&v66 + 1) = 0;
        v67[0] = 0;
        *(void *)&v67[2] = 0;
        *(void *)&v67[9] = 0;
        sub_1CBC12208(a1, (uint64_t)&v66, v17, v14, (uint64_t)v13);
        sub_1CBC114EC(a1, (unsigned __int8 *)&v64, (unsigned __int8 *)&v66, v13);
        if (v67[0])
        {
          long long v64 = v66;
          *(_OWORD *)BOOL v65 = *(_OWORD *)v67;
          v65[16] = v67[16];
        }
        ++v15;
      }
      while (v15 != v16);
      uint64_t v18 = (_DWORD *)*((void *)&v64 + 1);
    }
    if (*(unsigned char *)(a1 + 1672))
    {
      if (*(unsigned char *)(a1 + 1674))
      {
        int v23 = *(uint64_t **)(a1 + 960);
        uint64_t v24 = *(uint64_t **)(a1 + 968);
        if (v23 == v24) {
          goto LABEL_20;
        }
        do
        {
          uint64_t v25 = *v23;
          LOWORD(v66) = 0;
          *((void *)&v66 + 1) = 0;
          v67[0] = 0;
          *(void *)&v67[2] = 0;
          *(void *)&v67[9] = 0;
          sub_1CBC12208(a1, (uint64_t)&v66, v25, v14, (uint64_t)v6);
          sub_1CBC114EC(a1, (unsigned __int8 *)&v64, (unsigned __int8 *)&v66, v6);
          if (v67[0])
          {
            long long v64 = v66;
            *(_OWORD *)BOOL v65 = *(_OWORD *)v67;
            v65[16] = v67[16];
          }
          ++v23;
        }
        while (v23 != v24);
        int v26 = (_DWORD *)*((void *)&v64 + 1);
        if (*((_DWORD **)&v64 + 1) == v18) {
          goto LABEL_20;
        }
        if (*(unsigned char *)(a1 + 1674))
        {
          unsigned int v27 = *(_DWORD *)(*((void *)&v64 + 1) + 252);
          unsigned int v28 = *(_DWORD *)(a1 + 996);
          if (v27 > v28)
          {
            unsigned int v29 = *(_DWORD **)(a1 + 856);
            if (!v29[1] && *(_DWORD *)(a1 + 1004) > v27) {
              unsigned int v27 = *(_DWORD *)(a1 + 1004);
            }
            unsigned int v30 = v27 - v28;
            unsigned int v31 = (v27 - v28) * *v29;
            unsigned int v32 = *(_DWORD *)(a1 + 1000);
            BOOL v33 = v32 >= v31;
            unsigned int v34 = v32 - v31;
            if (!v33) {
              unsigned int v34 = 0;
            }
            *(_DWORD *)(a1 + 1000) = v34;
            unsigned int v35 = *(_DWORD *)(a1 + 1012);
            BOOL v33 = v35 >= v30;
            unsigned int v36 = v35 - v30;
            if (!v33) {
              unsigned int v36 = 0;
            }
            *(_DWORD *)(a1 + 1012) = v36;
            if (!*(_DWORD *)(*(void *)(a1 + 984) + 8))
            {
LABEL_46:
              *(_DWORD *)(a1 + 996) = v27;
LABEL_47:
              *(unsigned char *)(a1 + 992) = 1;
              int v37 = v29[69];
              uint64_t v38 = *(unsigned int *)(a1 + 1108);
              if (v38) {
                int v39 = *(_DWORD *)(*(void *)(a1 + 1024) + 4 * v38);
              }
              else {
                int v39 = v29[68] * *(_DWORD *)(a1 + 1016);
              }
              unsigned int v40 = *(_DWORD *)(a1 + 1008);
              if (v40 <= v27) {
                unsigned int v40 = v27;
              }
              *(unsigned char *)(a1 + 1112) = (int)(v39 - v40 * v37) >= v37;
LABEL_52:
              uint64_t v18 = v26;
              goto LABEL_20;
            }
            if (v27 == v28) {
              goto LABEL_47;
            }
            do
            {
              uint64_t v61 = *(uint64_t **)(a1 + 984);
              uint64_t v62 = *v61;
              if (*(_DWORD *)(a1 + 872) == 1) {
                (*(void (**)(uint64_t *))(v62 + 80))(v61);
              }
              else {
                (*(void (**)(uint64_t *))(v62 + 88))(v61);
              }
              int v63 = *(_DWORD *)(a1 + 996) + 1;
              *(_DWORD *)(a1 + 996) = v63;
            }
            while (v63 != v27);
LABEL_101:
            unsigned int v29 = *(_DWORD **)(a1 + 856);
            goto LABEL_47;
          }
        }
      }
      else
      {
        unsigned int v47 = *(uint64_t **)(a1 + 256);
        uint64_t v48 = *(uint64_t **)(a1 + 264);
        if (v47 == v48) {
          goto LABEL_20;
        }
        do
        {
          uint64_t v49 = *v47;
          LOWORD(v66) = 0;
          *((void *)&v66 + 1) = 0;
          v67[0] = 0;
          *(void *)&v67[2] = 0;
          *(void *)&v67[9] = 0;
          sub_1CBC12208(a1, (uint64_t)&v66, v49, v14, (uint64_t)v5);
          sub_1CBC114EC(a1, (unsigned __int8 *)&v64, (unsigned __int8 *)&v66, v5);
          if (v67[0])
          {
            long long v64 = v66;
            *(_OWORD *)BOOL v65 = *(_OWORD *)v67;
            v65[16] = v67[16];
          }
          ++v47;
        }
        while (v47 != v48);
        int v26 = (_DWORD *)*((void *)&v64 + 1);
        if (*((_DWORD **)&v64 + 1) == v18) {
          goto LABEL_20;
        }
        if (*(unsigned char *)(a1 + 1674))
        {
          unsigned int v27 = *(_DWORD *)(*((void *)&v64 + 1) + 252);
          unsigned int v50 = *(_DWORD *)(a1 + 996);
          if (v27 > v50)
          {
            unsigned int v29 = *(_DWORD **)(a1 + 856);
            if (!v29[1] && *(_DWORD *)(a1 + 1004) > v27) {
              unsigned int v27 = *(_DWORD *)(a1 + 1004);
            }
            unsigned int v51 = v27 - v50;
            unsigned int v52 = (v27 - v50) * *v29;
            unsigned int v53 = *(_DWORD *)(a1 + 1000);
            BOOL v33 = v53 >= v52;
            unsigned int v54 = v53 - v52;
            if (!v33) {
              unsigned int v54 = 0;
            }
            *(_DWORD *)(a1 + 1000) = v54;
            unsigned int v55 = *(_DWORD *)(a1 + 1012);
            BOOL v33 = v55 >= v51;
            unsigned int v56 = v55 - v51;
            if (!v33) {
              unsigned int v56 = 0;
            }
            *(_DWORD *)(a1 + 1012) = v56;
            if (!*(_DWORD *)(*(void *)(a1 + 984) + 8)) {
              goto LABEL_46;
            }
            if (v27 == v50) {
              goto LABEL_47;
            }
            do
            {
              uint64_t v57 = *(uint64_t **)(a1 + 984);
              uint64_t v58 = *v57;
              if (*(_DWORD *)(a1 + 872) == 1) {
                (*(void (**)(uint64_t *))(v58 + 80))(v57);
              }
              else {
                (*(void (**)(uint64_t *))(v58 + 88))(v57);
              }
              int v59 = *(_DWORD *)(a1 + 996) + 1;
              *(_DWORD *)(a1 + 996) = v59;
            }
            while (v59 != v27);
            goto LABEL_101;
          }
        }
      }
      unsigned int v60 = v26[62];
      if (v60 > *(_DWORD *)(a1 + 292)) {
        llvm::SchedBoundary::bumpCycle((uint64_t)v5, v60);
      }
      goto LABEL_52;
    }
  }
LABEL_20:
  *a2 = *(unsigned char *)(a1 + 1674) ^ 1;
  if (!v18[53])
  {
    int v19 = *(_DWORD *)(a1 + 872);
    if ((v19 & v18[49]) != 0)
    {
      uint64_t v20 = *(void *)(a1 + 904);
      uint64_t v21 = (void *)(a1 + 912);
      uint64_t v22 = *(void *)(a1 + 912);
      if (v20 != v22)
      {
        while (*(_DWORD **)v20 != v18)
        {
          v20 += 8;
          if (v20 == v22)
          {
            uint64_t v20 = *(void *)(a1 + 912);
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v20 = *(void *)(a1 + 960);
      uint64_t v21 = (void *)(a1 + 968);
      uint64_t v22 = *(void *)(a1 + 968);
      if (v20 != v22)
      {
        while (*(_DWORD **)v20 != v18)
        {
          v20 += 8;
          if (v20 == v22)
          {
            uint64_t v20 = *(void *)(a1 + 968);
            break;
          }
        }
      }
      int v19 = *(_DWORD *)(a1 + 928);
    }
    *(_DWORD *)(*(void *)v20 + 196) &= ~v19;
    *(void *)uint64_t v20 = *(void *)(v22 - 8);
    *v21 -= 8;
  }
  if (!v18[52])
  {
    int v42 = *(_DWORD *)(a1 + 168);
    if ((v42 & v18[49]) != 0)
    {
      uint64_t v45 = *(void *)(a1 + 208);
      unsigned int v44 = (void *)(a1 + 208);
      uint64_t v43 = v45;
      uint64_t v46 = *(v44 - 1);
      if (v46 != v45)
      {
        while (*(_DWORD **)v46 != v18)
        {
          v46 += 8;
          if (v46 == v43)
          {
            uint64_t v46 = v43;
            break;
          }
        }
      }
    }
    else
    {
      uint64_t v46 = *(void *)(a1 + 256);
      uint64_t v43 = *(void *)(a1 + 264);
      if (v46 != v43)
      {
        while (*(_DWORD **)v46 != v18)
        {
          v46 += 8;
          if (v46 == v43)
          {
            uint64_t v46 = *(void *)(a1 + 264);
            break;
          }
        }
      }
      int v42 = *(_DWORD *)(a1 + 224);
      unsigned int v44 = (void *)(a1 + 264);
    }
    *(_DWORD *)(*(void *)v46 + 196) &= ~v42;
    *(void *)uint64_t v46 = *(void *)(v43 - 8);
    *v44 -= 8;
  }
  return v18;
}

void sub_1CBC12C5C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1AB0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EBCC1AB0))
    {
      byte_1EBCC1AA8 = 1;
      __cxa_guard_release(&qword_1EBCC1AB0);
    }
  }
  operator new();
}

void sub_1CBC13394(void *a1)
{
  *a1 = &unk_1F25FB0E0;
  uint64_t v2 = (void *)a1[213];
  if (v2)
  {
    a1[214] = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](a1[210], 4);
  *a1 = &unk_1F260FA48;
  llvm::SchedBoundary::~SchedBoundary((llvm::SchedBoundary *)(a1 + 106));
  llvm::SchedBoundary::~SchedBoundary((llvm::SchedBoundary *)(a1 + 18));
  *a1 = &unk_1F25F5C98;
  int v3 = (void *)a1[6];
  if (v3 != a1 + 8) {
    free(v3);
  }

  JUMPOUT(0x1D25D9CE0);
}

void *sub_1CBC13470(void **a1, void *a2)
{
  int v3 = (char *)*a1;
  uint64_t v2 = (char *)a1[1];
  uint64_t v4 = (v2 - (unsigned char *)*a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    abort();
  }
  uint64_t v8 = (unsigned char *)a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  if (v9)
  {
    if (v9 >> 61) {
      sub_1CB833614();
    }
    uint64_t v10 = (char *)operator new(8 * v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[8 * v4];
  *(void *)uint64_t v11 = *a2;
  uint64_t v12 = v11 + 8;
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *((void *)v2 - 1);
      v2 -= 8;
      *((void *)v11 - 1) = v13;
      v11 -= 8;
    }
    while (v2 != v3);
    uint64_t v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v12;
  a1[2] = &v10[8 * v9];
  if (v2) {
    operator delete(v2);
  }
  return v12;
}

void sub_1CBC13550()
{
}

void sub_1CBC13564(uint64_t a1, uint64_t a2)
{
  v54[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 48);
  uint64_t v3 = *(void *)(a2 + 56);
  if (v2 != v3)
  {
    do
    {
      BOOL v6 = sub_1CBAD8504(*(void *)(v2 + 8), 1024);
      if (v6) {
        break;
      }
      v2 += 272;
    }
    while (v2 != v3);
    uint64_t v8 = *(void *)(a2 + 48);
    uint64_t v7 = *(void *)(a2 + 56);
    if (v8 != v7)
    {
      unint64_t v9 = &v48;
      uint64_t v10 = &v45;
      uint64_t v40 = *(void *)(a2 + 56);
LABEL_6:
      if ((*(unsigned char *)(*(void *)(*(void *)(v8 + 8) + 16) + 16) & 2) == 0) {
        goto LABEL_60;
      }
      unsigned int v52 = v54;
      uint64_t v53 = 0x400000000;
      uint64_t v49 = v51;
      uint64_t v50 = 0x400000000;
      uint64_t v11 = v9;
      uint64_t v46 = v9;
      uint64_t v47 = 0x400000000;
      uint64_t v12 = v10;
      uint64_t v43 = v10;
      uint64_t v44 = 0x400000000;
      uint64_t v13 = *(unsigned int *)(v8 + 120);
      if (!v13) {
        goto LABEL_25;
      }
      uint64_t v14 = *(uint64_t **)(v8 + 112);
      uint64_t v15 = 16 * v13;
      while (1)
      {
        uint64_t v16 = *v14;
        if ((~*(_DWORD *)v14 & 6) == 0)
        {
          if (!v6 || *((_DWORD *)v14 + 2)) {
            goto LABEL_14;
          }
          if (sub_1CBC13938((uint64_t)&v49, v16 & 0xFFFFFFFFFFFFFFF8, 0)) {
            break;
          }
        }
LABEL_19:
        v14 += 2;
        v15 -= 16;
        if (!v15)
        {
          if (v53)
          {
            uint64_t v18 = v52;
            uint64_t v19 = 8 * v53;
            do
            {
              uint64_t v20 = *v18++;
              sub_1CB905384(v20, v8);
              v19 -= 8;
            }
            while (v19);
          }
LABEL_25:
          int v21 = *(_DWORD *)(v8 + 40);
          if (v21)
          {
            unsigned int v22 = v21 - 1;
            while (1)
            {
              uint64_t v23 = v22;
              uint64_t v24 = *(void *)(v8 + 32);
              uint64_t v25 = (uint64_t *)(v24 + 16 * v22);
              uint64_t v26 = *v25;
              if ((~*(_DWORD *)v25 & 6) == 0)
              {
                if (!v6 || *(_DWORD *)(v24 + 16 * v22 + 8)) {
                  goto LABEL_32;
                }
                if (sub_1CBC13938((uint64_t)&v43, v26 & 0xFFFFFFFFFFFFFFF8, 1)) {
                  break;
                }
              }
LABEL_36:
              --v22;
              if (!v23) {
                goto LABEL_39;
              }
            }
            uint64_t v26 = *v25;
LABEL_32:
            unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8;
            if (!*(unsigned char *)(a1 + 8) || (*(unsigned char *)(*(void *)(*(void *)(v27 + 8) + 16) + 16) & 2) != 0)
            {
              llvm::SUnit::removePred(v8, (uint64_t)v25);
              if (v47 >= (unint64_t)HIDWORD(v47)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v46 + v47) = v27;
              LODWORD(v47) = v47 + 1;
            }
            goto LABEL_36;
          }
LABEL_39:
          if (v44)
          {
            unsigned int v28 = (uint64_t *)v43;
            uint64_t v29 = 8 * v44;
            do
            {
              uint64_t v30 = *v28++;
              uint64_t v41 = v30 | 6;
              uint64_t v42 = 0;
              llvm::SUnit::addPred(v8, &v41, 1);
              v29 -= 8;
            }
            while (v29);
          }
          if (v50)
          {
            unsigned int v31 = (uint64_t *)v49;
            uint64_t v32 = 8 * v50;
            do
            {
              uint64_t v33 = *v31++;
              uint64_t v41 = v8 | 6;
              uint64_t v42 = 0;
              llvm::SUnit::addPred(v33, &v41, 1);
              v32 -= 8;
            }
            while (v32);
          }
          if (v53)
          {
            unsigned int v34 = v52;
            unsigned int v35 = &v52[v53];
            do
            {
              if (v47)
              {
                uint64_t v36 = *v34;
                int v37 = (uint64_t *)v46;
                uint64_t v38 = 8 * v47;
                do
                {
                  uint64_t v39 = *v37++;
                  uint64_t v41 = v39 | 6;
                  uint64_t v42 = 0;
                  llvm::SUnit::addPred(v36, &v41, 1);
                  v38 -= 8;
                }
                while (v38);
              }
              ++v34;
            }
            while (v34 != v35);
          }
          uint64_t v10 = v12;
          if (v43 != v12) {
            free(v43);
          }
          unint64_t v9 = v11;
          if (v46 != v11) {
            free(v46);
          }
          if (v49 != v51) {
            free(v49);
          }
          if (v52 != v54) {
            free(v52);
          }
          uint64_t v7 = v40;
LABEL_60:
          v8 += 272;
          if (v8 == v7) {
            return;
          }
          goto LABEL_6;
        }
      }
      uint64_t v16 = *v14;
LABEL_14:
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)((v16 & 0xFFFFFFFFFFFFFFF8) + 192) != -1
        && (!*(unsigned char *)(a1 + 8) || (*(unsigned char *)(*(void *)(*(void *)(v17 + 8) + 16) + 16) & 2) != 0))
      {
        if (v53 >= (unint64_t)HIDWORD(v53)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v52[v53] = v17;
        LODWORD(v53) = v53 + 1;
      }
      goto LABEL_19;
    }
  }
}

uint64_t sub_1CBC13938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1F25FB250;
  BOOL v6 = v5;
  uint64_t v3 = sub_1CBC13A24(a1, a2, 0, a3, v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v3;
}

uint64_t sub_1CBC13A24(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, void *a5)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a3 > 0x20) {
    return 0;
  }
  uint64_t v24 = a2;
  uint64_t v9 = a5[3];
  if (!v9)
  {
    sub_1CB920400();
    JUMPOUT(0x1CBC13C8CLL);
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v9 + 48))(v9, &v24))
  {
    unsigned int v12 = *(_DWORD *)(a1 + 8);
    if (v12 >= *(_DWORD *)(a1 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a1 + 8 * v12) = a2;
    ++*(_DWORD *)(a1 + 8);
  }
  else
  {
    uint64_t v13 = a2 + 32;
    uint64_t v14 = 112;
    if (a4) {
      uint64_t v14 = 32;
    }
    else {
      uint64_t v13 = a2 + 112;
    }
    uint64_t v15 = *(unsigned int *)(v13 + 8);
    if (v15)
    {
      uint64_t v16 = *(void *)(a2 + v14);
      uint64_t v17 = a3 + 1;
      uint64_t v18 = 16 * v15;
      for (unint64_t i = (_DWORD *)(v16 + 8); ; i += 4)
      {
        uint64_t v20 = *((void *)i - 1);
        if ((~*(i - 2) & 6) == 0 && !*i)
        {
          unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
          if (*(void *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8))
          {
            unsigned int v22 = (void *)a5[3];
            if (v22)
            {
              if (v22 == a5)
              {
                uint64_t v26 = v25;
                (*(void (**)(void *, void *))(*a5 + 24))(a5, v25);
              }
              else
              {
                uint64_t v26 = (void *)(*(uint64_t (**)(void *))(*v22 + 16))(v22);
              }
            }
            else
            {
              uint64_t v26 = 0;
            }
            int v23 = sub_1CBC13A24(a1, v21, v17, a4, v25);
            if (v26 == v25)
            {
              (*(void (**)(void *))(v25[0] + 32))(v25);
            }
            else if (v26)
            {
              (*(void (**)(void *))(*v26 + 40))(v26);
            }
            if (!v23) {
              break;
            }
          }
        }
        v18 -= 16;
        if (!v18) {
          return 1;
        }
      }
      return 0;
    }
  }
  return 1;
}

void sub_1CBC13C90()
{
}

void *sub_1CBC13CA4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25FB250;
  return result;
}

void sub_1CBC13CDC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FB250;
}

uint64_t sub_1CBC13D04(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(*(void *)a2 + 8);
  if (result) {
    return sub_1CBAD8504(result, 1024);
  }
  return result;
}

void sub_1CBC13D20()
{
}

void sub_1CBC13D34(uint64_t a1, void *a2)
{
  v21[8] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2[2];
  do
  {
    uint64_t v4 = a2[6];
    uint64_t v5 = a2[7];
    if (v4 == v5) {
      break;
    }
    char v6 = 0;
    do
    {
      uint64_t v7 = *(void *)(v4 + 8);
      uint64_t v19 = v21;
      uint64_t v20 = 0x400000000;
      uint64_t v8 = *(unsigned int *)(v4 + 40);
      if (v8)
      {
        uint64_t v9 = *(void **)(v4 + 32);
        uint64_t v10 = 16 * v8;
        do
        {
          if ((~*(_DWORD *)v9 & 6) == 0)
          {
            unint64_t v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
            if (*(_DWORD *)(v11 + 192) != -1)
            {
              uint64_t v12 = *(void *)(v11 + 8);
              if (**(_WORD **)(v7 + 16) == 9211 || **(_WORD **)(v12 + 16) == 9211)
              {
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 1064))(v3, v7, v12))
                {
                  if (v20 >= (unint64_t)HIDWORD(v20)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((_OWORD *)v19 + v20) = *(_OWORD *)v9;
                  LODWORD(v20) = v20 + 1;
                }
              }
            }
          }
          v9 += 2;
          v10 -= 16;
        }
        while (v10);
        uint64_t v13 = (char *)v19;
        uint64_t v14 = (char *)v19 + 16 * v20;
        if (v20)
        {
          do
          {
            *(_OWORD *)uint64_t v18 = *(_OWORD *)v13;
            llvm::SUnit::removePred(v4, (uint64_t)v18);
            uint64_t v15 = *(unsigned int *)(v4 + 120);
            if (v15)
            {
              uint64_t v16 = *(void **)(v4 + 112);
              uint64_t v17 = 16 * v15;
              do
              {
                if ((~*(_DWORD *)v16 & 6) == 0) {
                  llvm::SUnit::addPred(*v16 & 0xFFFFFFFFFFFFFFF8, v18, 1);
                }
                v16 += 2;
                v17 -= 16;
              }
              while (v17);
            }
            v13 += 16;
          }
          while (v13 != v14);
          char v6 = 1;
          uint64_t v13 = (char *)v19;
        }
        if (v13 != (char *)v21) {
          free(v13);
        }
      }
      v4 += 272;
    }
    while (v4 != v5);
  }
  while ((v6 & 1) != 0);
}

void sub_1CBC13F60()
{
}

void sub_1CBC13F74(uint64_t a1, uint64_t a2)
{
  v106[24] = *MEMORY[0x1E4F143B8];
  uint64_t v104 = v106;
  uint64_t v105 = 0x800000000;
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v2 = *(void *)(a2 + 56);
  if (v3 != v2)
  {
    uint64_t v4 = *(void *)(a2 + 48);
    int v5 = 1;
    do
    {
      unsigned int v6 = **(unsigned __int16 **)(*(void *)(v4 + 8) + 16);
      if (v6 > 0x1ABD)
      {
        if (v6 == 6846 || v6 == 9187) {
          goto LABEL_13;
        }
      }
      else if (v6 == 336 || v6 == 414)
      {
        goto LABEL_13;
      }
      v4 += 272;
    }
    while (v4 != v2);
    int v5 = 0;
LABEL_13:
    uint64_t v87 = *(void *)(a2 + 56);
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(v3 + 8) + 16) + 16);
      uint64_t v9 = v8 & 0x800200;
      if ((v8 & 0x800200) == 0x800200 || (v8 & 0x800100) == 8388864) {
        break;
      }
LABEL_149:
      v3 += 272;
      if (v3 == v2)
      {
        if (v104 != v106) {
          free(v104);
        }
        return;
      }
    }
    unsigned int v101 = v103;
    uint64_t v102 = 0x400000000;
    uint64_t v98 = v100;
    uint64_t v99 = 0x400000000;
    unsigned int v95 = v97;
    uint64_t v96 = 0x400000000;
    unsigned int v11 = *(_DWORD *)(v3 + 40);
    while (v11)
    {
      --v11;
      uint64_t v12 = *(void *)(v3 + 32);
      uint64_t v13 = (uint64_t *)(v12 + 16 * v11);
      uint64_t v14 = *v13;
      unint64_t v15 = *v13 & 0xFFFFFFFFFFFFFFF8;
      if (*(_DWORD *)(v15 + 192) == -1) {
        continue;
      }
      uint64_t v16 = *(void *)(v15 + 8);
      uint64_t v17 = *(unsigned __int16 **)(v16 + 16);
      int v18 = *v17;
      BOOL v19 = (v18 - 6165) >= 2 && (v18 - 6495) >= 8;
      BOOL v20 = !v19 && v9 == 8389120;
      BOOL v21 = v20;
      if ((~(_BYTE)v14 & 6) != 0 || v21) {
        continue;
      }
      uint64_t v22 = *((void *)v17 + 1);
      if ((*(_WORD *)(v16 + 44) & 0xC) != 0 && (*(_WORD *)(v16 + 44) & 4) == 0)
      {
        uint64_t v26 = *(void *)(v15 + 8);
        if ((v22 & 0x1000000) != 0) {
          continue;
        }
        while ((*(_WORD *)(v26 + 44) & 8) != 0)
        {
          uint64_t v26 = *(void *)(v26 + 8);
          if (*(unsigned char *)(*(void *)(v26 + 16) + 11)) {
            goto LABEL_44;
          }
        }
      }
      else if ((v22 & 0x1000000) != 0)
      {
        continue;
      }
      if ((v18 - 1) > 1 || (*(unsigned char *)(*(void *)(v16 + 32) + 48) & 1) == 0)
      {
        if (!v5 || *(_DWORD *)(v12 + 16 * v11 + 8)) {
          goto LABEL_42;
        }
        if (sub_1CBC147E8((uint64_t)&v98, v15, 1))
        {
          uint64_t v14 = *v13;
LABEL_42:
          uint64_t v24 = v13[1];
          if (v96 >= (unint64_t)HIDWORD(v96)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v25 = (char *)v95 + 16 * v96;
          void *v25 = v14;
          v25[1] = v24;
          LODWORD(v96) = v96 + 1;
        }
      }
LABEL_44:
      ;
    }
    uint64_t v92 = v94;
    uint64_t v93 = 0x400000000;
    uint64_t v27 = *(unsigned int *)(v3 + 120);
    if (v27)
    {
      uint64_t v28 = *(void *)(v3 + 112);
      uint64_t v29 = v28 + 16 * v27;
      do
      {
        unint64_t v30 = *(void *)v28 & 0xFFFFFFFFFFFFFFF8;
        if (*(_DWORD *)(v30 + 192) == -1) {
          goto LABEL_79;
        }
        uint64_t v31 = *(void *)(v30 + 8);
        uint64_t v32 = *(unsigned __int16 **)(v31 + 16);
        int v33 = *v32;
        BOOL v34 = (v33 - 6165) >= 2 && (v33 - 6495) >= 8;
        BOOL v35 = !v34 && v9 == 8389120;
        BOOL v36 = v35;
        if ((~*(void *)v28 & 6) != 0 || v36) {
          goto LABEL_79;
        }
        uint64_t v37 = *((void *)v32 + 1);
        if ((*(_WORD *)(v31 + 44) & 0xC) != 0 && (*(_WORD *)(v31 + 44) & 4) == 0)
        {
          uint64_t v39 = *(void *)(v30 + 8);
          if ((v37 & 0x1000000) != 0) {
            goto LABEL_79;
          }
          while ((*(_WORD *)(v39 + 44) & 8) != 0)
          {
            uint64_t v39 = *(void *)(v39 + 8);
            if (*(unsigned char *)(*(void *)(v39 + 16) + 11)) {
              goto LABEL_79;
            }
          }
        }
        else if ((v37 & 0x1000000) != 0)
        {
          goto LABEL_79;
        }
        if ((v33 - 1) > 1 || (*(unsigned char *)(*(void *)(v31 + 32) + 48) & 1) == 0)
        {
          if (!v5 || *(_DWORD *)(v28 + 8)) {
            goto LABEL_77;
          }
          if (sub_1CBC147E8((uint64_t)&v101, *(void *)v28 & 0xFFFFFFFFFFFFFFF8, 0))
          {
            unint64_t v30 = *(void *)v28 & 0xFFFFFFFFFFFFFFF8;
LABEL_77:
            if (v93 >= (unint64_t)HIDWORD(v93)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((void *)v92 + v93) = v30;
            LODWORD(v93) = v93 + 1;
          }
        }
LABEL_79:
        v28 += 16;
      }
      while (v28 != v29);
    }
    if (v96)
    {
      uint64_t v40 = (long long *)v95;
      uint64_t v41 = 16 * v96;
      do
      {
        long long v42 = *v40++;
        long long v90 = v42;
        llvm::SUnit::removePred(v3, (uint64_t)&v90);
        v41 -= 16;
      }
      while (v41);
    }
    if (v93)
    {
      uint64_t v43 = (uint64_t *)v92;
      uint64_t v44 = 8 * v93;
      do
      {
        uint64_t v45 = *v43++;
        sub_1CB905384(v45, v3);
        v44 -= 8;
      }
      while (v44);
    }
    *((void *)&v90 + 1) = 0;
    uint64_t v46 = *(void **)(v3 + 8);
    uint64_t v47 = (void *)(v46[6] & 0xFFFFFFFFFFFFFFF8);
    if ((v46[6] & 7) != 0) {
      uint64_t v47 = (void *)v47[1];
    }
    else {
      v46[6] = v47;
    }
    uint64_t v48 = (unint64_t *)((*v47 & ((uint64_t)(*v47 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 16);
    unint64_t v49 = *(void *)((*v47 & ((uint64_t)(*v47 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
    if (v49)
    {
      unint64_t v61 = (v49 >> 1) & ~(-1 << (v49 >> 58));
      if (v61)
      {
        int v60 = __clz(__rbit64(v61));
        goto LABEL_110;
      }
    }
    else
    {
      int v50 = *(_DWORD *)(v49 + 64);
      if (v50)
      {
        uint64_t v51 = 0;
        int v52 = v50 - 1;
        uint64_t v53 = *(uint64_t **)v49;
        unint64_t v54 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v50;
        uint64_t v55 = v52 & 0xFFFFFFC0;
        while (1)
        {
          uint64_t v57 = *v53++;
          uint64_t v56 = v57;
          unint64_t v58 = v55 == v51 ? v54 : -1;
          unint64_t v59 = v58 & v56;
          if (v59) {
            break;
          }
          v51 += 64;
          int v60 = -1;
          if (v55 + 64 == v51) {
            goto LABEL_110;
          }
        }
        int v60 = __clz(__rbit64(v59)) + v51;
LABEL_110:
        LODWORD(v90) = v60;
        DWORD1(v90) = sub_1CB9E5BDC(v48);
        uint64_t v62 = (unsigned __int16 *)v46[2];
        if ((v62[10] & 4) != 0)
        {
          unsigned int v65 = sub_1CBDA6464(*v62, 0x6Bu);
          uint64_t v66 = v46[4];
          if (*(unsigned char *)(v66 + 32 * v65) == 1)
          {
            LODWORD(v63) = 0;
            uint64_t v64 = *(void *)(v66 + 32 * v65 + 16);
          }
          else
          {
            uint64_t v67 = *(void *)(*(void *)(v46[3] + 32) + 40);
            uint64_t v63 = *(unsigned int *)(v66 + 32 * v65 + 4);
            if ((v63 & 0x80000000) != 0) {
              unsigned int v68 = (uint64_t *)(*(void *)(v67 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
            }
            else {
              unsigned int v68 = (uint64_t *)(*(void *)(v67 + 272) + 8 * v63);
            }
            uint64_t v69 = *v68;
            if (!v69) {
              goto LABEL_118;
            }
            if ((*(unsigned char *)(v69 + 3) & 1) == 0)
            {
              uint64_t v86 = *(void *)(v69 + 24);
              if (!v86 || (*(unsigned char *)(v86 + 3) & 1) == 0) {
                goto LABEL_118;
              }
            }
            if ((v63 & 0x80000000) != 0) {
              char v82 = (uint64_t *)(*(void *)(v67 + 24) + 16 * (v63 & 0x7FFFFFFF) + 8);
            }
            else {
              char v82 = (uint64_t *)(*(void *)(v67 + 272) + 8 * v63);
            }
            uint64_t v83 = *v82;
            if (v83)
            {
              if ((*(unsigned char *)(v83 + 3) & 1) == 0)
              {
                uint64_t v83 = *(void *)(v83 + 24);
                if (v83)
                {
                  if ((*(unsigned char *)(v83 + 3) & 1) == 0) {
                    uint64_t v83 = 0;
                  }
                }
              }
            }
            uint64_t v84 = *(void *)(v83 + 8);
            while (1)
            {
              uint64_t v83 = *(void *)(v83 + 24);
              if (!v83 || (*(unsigned char *)(v83 + 3) & 1) == 0) {
                break;
              }
              if (*(void *)(v83 + 8) != v84) {
                goto LABEL_118;
              }
            }
            if (!v84) {
              goto LABEL_118;
            }
            int v85 = **(unsigned __int16 **)(v84 + 16);
            if (v85 == 518)
            {
              LODWORD(v64) = 0;
              LODWORD(v63) = 0;
              goto LABEL_119;
            }
            if (v85 == 5626)
            {
              LODWORD(v63) = 0;
              uint64_t v64 = *(void *)(*(void *)(v84 + 32) + 80);
            }
            else
            {
LABEL_118:
              LODWORD(v64) = 0;
            }
          }
        }
        else
        {
          LODWORD(v63) = 0;
          *(void *)&long long v90 = 0xFF00000000;
          LODWORD(v64) = 255;
        }
LABEL_119:
        *((void *)&v90 + 1) = __PAIR64__(v63, v64);
        uint64_t v91 = v3;
        if (!v105)
        {
LABEL_133:
          if (v99)
          {
            int v74 = (uint64_t *)v98;
            uint64_t v75 = 8 * v99;
            do
            {
              uint64_t v76 = *v74++;
              uint64_t v88 = v76 | 6;
              uint64_t v89 = 0;
              llvm::SUnit::addPred(v3, &v88, 1);
              v75 -= 8;
            }
            while (v75);
          }
          if (v102)
          {
            int v77 = (uint64_t *)v101;
            uint64_t v78 = 8 * v102;
            do
            {
              uint64_t v79 = *v77++;
              uint64_t v88 = v3 | 6;
              uint64_t v89 = 0;
              llvm::SUnit::addPred(v79, &v88, 1);
              v78 -= 8;
            }
            while (v78);
          }
          if (v105 >= HIDWORD(v105))
          {
            if (v104 > &v90 || (char *)v104 + 24 * v105 <= (char *)&v90) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          char v80 = (char *)v104 + 24 * v105;
          long long v81 = v90;
          *((void *)v80 + 2) = v91;
          *(_OWORD *)char v80 = v81;
          LODWORD(v105) = v105 + 1;
          if (v92 != v94) {
            free(v92);
          }
          if (v95 != v97) {
            free(v95);
          }
          if (v98 != v100) {
            free(v98);
          }
          if (v101 != v103) {
            free(v101);
          }
          uint64_t v2 = v87;
          goto LABEL_149;
        }
        uint64_t v70 = 24 * v105;
        uint64_t v71 = (char *)v104 + 8;
        while (1)
        {
          if (DWORD2(v90) == *(_DWORD *)v71 && HIDWORD(v90) == *((_DWORD *)v71 + 1))
          {
            int v73 = *((_DWORD *)v71 - 2);
            if ((int)v90 <= v73)
            {
              if (SDWORD1(v90) < v73) {
                goto LABEL_126;
              }
            }
            else if (*((_DWORD *)v71 - 1) < (int)v90)
            {
              goto LABEL_126;
            }
          }
          uint64_t v88 = *((void *)v71 + 1) | 6;
          uint64_t v89 = 0;
          llvm::SUnit::addPred(v3, &v88, 1);
LABEL_126:
          v71 += 24;
          v70 -= 24;
          if (!v70) {
            goto LABEL_133;
          }
        }
      }
    }
    int v60 = -1;
    goto LABEL_110;
  }
}

uint64_t sub_1CBC147E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1F25FB2F8;
  unsigned int v6 = v5;
  uint64_t v3 = sub_1CBC13A24(a1, a2, 0, a3, v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  return v3;
}

void sub_1CBC148D8()
{
}

void *sub_1CBC148EC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25FB2F8;
  return result;
}

void sub_1CBC14924(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FB2F8;
}

uint64_t sub_1CBC1494C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)a2 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = **(unsigned __int16 **)(v2 + 16);
  uint64_t result = 1;
  if (v3 <= 6845)
  {
    if (v3 == 336 || v3 == 414) {
      return result;
    }
    return 0;
  }
  if (v3 != 6846 && v3 != 9187) {
    return 0;
  }
  return result;
}

void sub_1CBC149A4()
{
}

void sub_1CBC149B8(int a1, uint64_t a2)
{
  v48[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = v48;
  uint64_t v46 = v48;
  uint64_t v47 = 0x400000000;
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 56);
  if (v3 == v4) {
    goto LABEL_67;
  }
  uint64_t v6 = a2 + 344;
  uint64_t v7 = *(void *)(a2 + 48);
  do
  {
    if (**(unsigned __int16 **)(*(void *)(v7 + 8) + 16) - 6165 <= 1)
    {
      if (v47 >= (unint64_t)HIDWORD(v47)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v46 + v47) = v3;
      LODWORD(v47) = v47 + 1;
      if (!*(_DWORD *)(v7 + 204))
      {
        uint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)(v7 + 8) + 24) + 32) + 16);
        uint64_t v40 = (void *)(v3 | 6);
        LODWORD(v41) = 3;
        HIDWORD(v41) = *(unsigned __int16 *)(v7 + 226) - 1;
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, void **))(*(void *)v8 + 304))(v8, v7, 0, v6, 0, &v40);
        llvm::SUnit::addPred(v6, (uint64_t *)&v40, 1);
      }
    }
    v7 += 272;
    v3 += 272;
  }
  while (v7 != v4);
  if (!v47) {
    goto LABEL_67;
  }
  uint64_t v9 = (uint64_t *)v46;
  uint64_t v10 = (char *)v46 + 8 * v47;
  while (1)
  {
    uint64_t v11 = *v9;
    uint64_t v43 = v45;
    uint64_t v44 = 0x400000000;
    uint64_t v12 = *(unsigned int *)(v11 + 120);
    if (!v12) {
      break;
    }
    unsigned int v13 = 0;
    uint64_t v14 = *(void **)(v11 + 112);
    uint64_t v15 = 16 * v12;
    do
    {
      if ((~*(_DWORD *)v14 & 6) == 0)
      {
        if (v13 >= HIDWORD(v44)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v43 + v13) = *v14 & 0xFFFFFFFFFFFFFFF8;
        unsigned int v13 = v44 + 1;
        LODWORD(v44) = v44 + 1;
      }
      v14 += 2;
      v15 -= 16;
    }
    while (v15);
    if (!v13) {
      break;
    }
    uint64_t v16 = (llvm::SUnit **)v43;
LABEL_48:
    int v33 = &v16[v13];
    do
    {
      BOOL v34 = *v16;
      if ((*((unsigned char *)*v16 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(*v16);
      }
      uint64_t v35 = *((unsigned int *)v34 + 10);
      if (v35)
      {
        uint64_t v36 = *((void *)v34 + 4);
        int v37 = *((_DWORD *)v34 + 60) + 1;
        uint64_t v38 = 16 * v35;
        do
        {
          if (v11 == (*(void *)v36 & 0xFFFFFFFFFFFFFFF8)) {
            *(_DWORD *)(v36 + 12) = v37;
          }
          v36 += 16;
          v38 -= 16;
        }
        while (v38);
      }
      ++v16;
    }
    while (v16 != v33);
    uint64_t v16 = (llvm::SUnit **)v43;
LABEL_58:
    if (v16 != (llvm::SUnit **)v45) {
      free(v16);
    }
    if (++v9 == (uint64_t *)v10) {
      goto LABEL_67;
    }
  }
  uint64_t v40 = v42;
  uint64_t v41 = 0x800000000;
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  if (v17 == v18) {
    goto LABEL_65;
  }
  unsigned int v19 = 0;
  uint64_t v20 = v17 - 272;
  do
  {
    uint64_t v21 = v17 - 272;
    int v22 = *(_DWORD *)(v17 - 60);
    if (v21 != v11 && v22 == 0)
    {
      if (v19 >= HIDWORD(v41)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((void *)v40 + v19) = v20;
      unsigned int v19 = v41 + 1;
      LODWORD(v41) = v41 + 1;
    }
    v20 -= 272;
    uint64_t v17 = v21;
  }
  while (v21 != v18);
  uint64_t v24 = (llvm::SUnit **)v40;
  if (v19)
  {
    uint64_t v25 = v10;
    uint64_t v26 = v2;
    if (v19 != 1)
    {
      uint64_t v27 = (llvm::SUnit **)((char *)v40 + 8);
      uint64_t v28 = 8 * v19 - 8;
      do
      {
        uint64_t v29 = *v24;
        unint64_t v30 = *v27;
        if ((*((unsigned char *)*v24 + 236) & 1) == 0) {
          llvm::SUnit::ComputeDepth(*v24);
        }
        unsigned int v31 = *((_DWORD *)v29 + 60);
        if ((*((unsigned char *)v30 + 236) & 1) == 0) {
          llvm::SUnit::ComputeDepth(v30);
        }
        if (v31 < *((_DWORD *)v30 + 60)) {
          uint64_t v24 = v27;
        }
        ++v27;
        v28 -= 8;
      }
      while (v28);
    }
    uint64_t v32 = *v24;
    v39[0] = v11 | 6;
    v39[1] = 0;
    llvm::ScheduleDAGInstrs::addEdge(a2, v32, (uint64_t)v39);
    if (v44 >= (unint64_t)HIDWORD(v44)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v2 = v26;
    *((void *)v43 + v44) = v32;
    unsigned int v13 = v44 + 1;
    LODWORD(v44) = v44 + 1;
    uint64_t v10 = v25;
    if (v40 != v42)
    {
      free(v40);
      unsigned int v13 = v44;
    }
    uint64_t v16 = (llvm::SUnit **)v43;
    if (!v13) {
      goto LABEL_58;
    }
    goto LABEL_48;
  }
  if (v40 != v42) {
    free(v40);
  }
LABEL_65:
  if (v43 != v45) {
    free(v43);
  }
LABEL_67:
  if (v46 != v2) {
    free(v46);
  }
}

void sub_1CBC14E40()
{
}

void sub_1CBC14E54(uint64_t a1, uint64_t a2)
{
  v31[8] = *MEMORY[0x1E4F143B8];
  if ((*(_WORD *)(**(void **)(a2 + 32) + 18) & 0x3FF0) == 0x640)
  {
    uint64_t v2 = *(void *)(a2 + 16);
    do
    {
      uint64_t v3 = *(void *)(a2 + 48);
      uint64_t v4 = *(void *)(a2 + 56);
      if (v3 == v4) {
        return;
      }
      char v5 = 0;
      do
      {
        uint64_t v6 = *(void *)(v3 + 8);
        uint64_t v29 = v31;
        uint64_t v30 = 0x400000000;
        uint64_t v7 = *(unsigned int *)(v3 + 40);
        if (!v7) {
          goto LABEL_48;
        }
        uint64_t v8 = *(_DWORD **)(v3 + 32);
        uint64_t v9 = 16 * v7;
        do
        {
          if ((~*v8 & 6) != 0) {
            goto LABEL_35;
          }
          unint64_t v10 = *(void *)v8 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)(v10 + 192) == -1) {
            goto LABEL_35;
          }
          uint64_t v11 = *(unsigned __int16 **)(v6 + 16);
          int v12 = *v11;
          BOOL v14 = (v12 - 9) <= 0x3C && ((1 << (v12 - 9)) & 0x1000000000000605) != 0
             || v12 == 0;
          if (v14 || (v11[4] & 0x10) != 0 || (v11[8])
            && (uint64_t v15 = *(void *)(v6 + 32), *(unsigned char *)v15 == 7)
            && *(_DWORD *)(v15 + 16) == 64)
          {
            uint64_t v16 = *(void *)(v10 + 8);
          }
          else
          {
            uint64_t v16 = *(void *)(v10 + 8);
            uint64_t v17 = *(unsigned __int16 **)(v16 + 16);
            int v18 = *v17;
            BOOL v20 = (v18 - 9) <= 0x3C && ((1 << (v18 - 9)) & 0x1000000000000605) != 0
               || v18 == 0;
            if (!v20 && (v17[4] & 0x10) == 0 && (v17[8] & 1) == 0) {
              goto LABEL_35;
            }
            uint64_t v21 = *(void *)(v16 + 32);
            if (*(unsigned char *)v21 != 7 || *(_DWORD *)(v21 + 16) != 64) {
              goto LABEL_35;
            }
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 1064))(v2, v6, v16))
          {
            if (v30 >= (unint64_t)HIDWORD(v30)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)v29 + v30) = *(_OWORD *)v8;
            LODWORD(v30) = v30 + 1;
          }
LABEL_35:
          v8 += 4;
          v9 -= 16;
        }
        while (v9);
        int v22 = (long long *)v29;
        int v23 = (char *)v29 + 16 * v30;
        if (v30)
        {
          do
          {
            long long v28 = *v22;
            llvm::SUnit::removePred(v3, (uint64_t)&v28);
            uint64_t v24 = *(unsigned int *)(v3 + 120);
            if (v24)
            {
              uint64_t v25 = *(void **)(v3 + 112);
              uint64_t v26 = 16 * v24;
              do
              {
                if ((~*(_DWORD *)v25 & 6) == 0) {
                  llvm::SUnit::addPred(*v25 & 0xFFFFFFFFFFFFFFF8, (uint64_t *)&v28, 1);
                }
                v25 += 2;
                v26 -= 16;
              }
              while (v26);
            }
            ++v22;
          }
          while (v22 != (long long *)v23);
          char v5 = 1;
          int v22 = (long long *)v29;
        }
        if (v22 != (long long *)v31) {
          free(v22);
        }
LABEL_48:
        v3 += 272;
      }
      while (v3 != v4);
    }
    while ((v5 & 1) != 0);
  }
}

void sub_1CBC15130()
{
}

void sub_1CBC15144(uint64_t a1, uint64_t a2)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  do
  {
    uint64_t v2 = *(void *)(a2 + 48);
    uint64_t v28 = *(void *)(a2 + 56);
    if (v2 == v28) {
      break;
    }
    char v27 = 0;
    do
    {
      uint64_t v29 = *(void *)(v2 + 8);
      unsigned int v31 = v33;
      uint64_t v32 = 0x400000000;
      uint64_t v3 = *(unsigned int *)(v2 + 40);
      if (v3)
      {
        unsigned int v4 = 0;
        char v5 = *(uint64_t **)(v2 + 32);
        uint64_t v6 = &v5[2 * v3];
        do
        {
          uint64_t v7 = *v5;
          if ((~*(_DWORD *)v5 & 6) == 0 && *(_DWORD *)((v7 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
          {
            char v8 = 0;
            uint64_t v9 = 0;
            uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8);
            LODWORD(v30) = **(unsigned __int16 **)(v29 + 16);
            DWORD1(v30) = **(unsigned __int16 **)(v10 + 16);
            v34[0] = 0x100000000;
            while (1)
            {
              char v11 = v8;
              uint64_t v12 = *((unsigned int *)v34 + v9);
              uint64_t v13 = sub_1CBE52E8C(*((_DWORD *)&v30 + v12));
              if ((v13 & 0xFF00000000) != 0 && (v13 - 79) <= 1)
              {
                int v15 = *((_DWORD *)&v30 + (1 - v12));
                unsigned int v16 = v15 - 317;
                unsigned int v17 = v15 - 341;
                if (v16 < 0x10 || v17 < 0x10) {
                  break;
                }
              }
              char v8 = 1;
              uint64_t v9 = 1;
              if (v11) {
                goto LABEL_22;
              }
            }
            uint64_t v19 = v5[1];
            if (v4 >= HIDWORD(v32)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            BOOL v20 = (char *)v31 + 16 * v4;
            *BOOL v20 = v7;
            v20[1] = v19;
            unsigned int v4 = v32 + 1;
            LODWORD(v32) = v32 + 1;
          }
LABEL_22:
          v5 += 2;
        }
        while (v5 != v6);
        uint64_t v21 = (char *)v31;
        if (v4)
        {
          int v22 = (char *)v31 + 16 * v4;
          do
          {
            long long v30 = *(_OWORD *)v21;
            llvm::SUnit::removePred(v2, (uint64_t)&v30);
            uint64_t v23 = *(unsigned int *)(v2 + 120);
            if (v23)
            {
              uint64_t v24 = *(void **)(v2 + 112);
              uint64_t v25 = 16 * v23;
              do
              {
                if ((~*(_DWORD *)v24 & 6) == 0) {
                  llvm::SUnit::addPred(*v24 & 0xFFFFFFFFFFFFFFF8, (uint64_t *)&v30, 1);
                }
                v24 += 2;
                v25 -= 16;
              }
              while (v25);
            }
            v21 += 16;
          }
          while (v21 != v22);
          char v27 = 1;
          uint64_t v21 = (char *)v31;
        }
        if (v21 != v33) {
          free(v21);
        }
      }
      v2 += 272;
    }
    while (v2 != v28);
  }
  while ((v27 & 1) != 0);
}

uint64_t sub_1CBC153B8()
{
  qword_1EBCC1AB8 = 0;
  unk_1EBCC1AC0 = "agx3-new-scheduler";
  qword_1EBCC1AC8 = 18;
  unk_1EBCC1AD0 = "New AGX3 scheduler";
  qword_1EBCC1AD8 = 18;
  unk_1EBCC1AE0 = sub_1CBC12C5C;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCC1AB8);
  __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCC1AB8, &dword_1CB82C000);
  qword_1EBCC1AE8 = 0;
  unk_1EBCC1AF0 = "agx3-post-scheduler";
  qword_1EBCC1AF8 = 19;
  qword_1EBCC1B00 = (uint64_t)"New Post RA AGX3 scheduler";
  unk_1EBCC1B08 = 26;
  qword_1EBCC1B10 = (uint64_t)sub_1CD426A78;
  sub_1CB835A84(&llvm::MachineSchedRegistry::Registry, &qword_1EBCC1AE8);

  return __cxa_atexit((void (*)(void *))sub_1CB835A50, &qword_1EBCC1AE8, &dword_1CB82C000);
}

void sub_1CBC154A8()
{
}

void sub_1CBC15544()
{
}

void sub_1CBC155E8()
{
}

void sub_1CBC1568C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    unsigned int v4 = a1;
    free(v1);
    a1 = v4;
  }
  uint64_t v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    char v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC15740(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  uint64_t v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  unsigned int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBC157EC()
{
  return "AGX3 Static Performance Model and Simulator";
}

void sub_1CBC157FC(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBC15870()
{
  MEMORY[0x1F4188790]();
  uint64_t v1 = (void *)v0;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned __int8 **)(v0 + 16);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1B20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC1B20))
  {
    byte_1EBCC1B18 = 0;
    __cxa_guard_release(&qword_1EBCC1B20);
  }
  if (v2[393]) {
    BOOL v3 = byte_1EBCC1B18 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  char v4 = v3;
  sub_1CBC15A58((uint64_t)v13, v2, v4);
  sub_1CBC15C28((uint64_t)v12, (uint64_t)v13, v1);
  MEMORY[0x1D25D9CD0](v19, 8);
  char v5 = v16;
  if (v17)
  {
    uint64_t v6 = 2704 * v17;
    uint64_t v7 = (char *)v16 - 2704;
    do
    {
      sub_1CBC19FF4((uint64_t)&v7[v6]);
      v6 -= 2704;
    }
    while (v6);
    char v5 = v16;
  }
  if (v5 != v18) {
    free(v5);
  }
  if (v14 != v15) {
    free(v14);
  }
  if (byte_1EBCC1B18)
  {
    sub_1CBC15A58((uint64_t)v13, v2, 1);
    sub_1CBC15C28((uint64_t)v12, (uint64_t)v13, v1);
    MEMORY[0x1D25D9CD0](v19, 8);
    char v8 = v16;
    if (v17)
    {
      uint64_t v9 = 2704 * v17;
      uint64_t v10 = (char *)v16 - 2704;
      do
      {
        sub_1CBC19FF4((uint64_t)&v10[v9]);
        v9 -= 2704;
      }
      while (v9);
      char v8 = v16;
    }
    if (v8 != v18) {
      free(v8);
    }
    if (v14 != v15) {
      free(v14);
    }
  }
  return 0;
}

uint64_t sub_1CBC15A58(uint64_t a1, unsigned __int8 *a2, char a3)
{
  *(void *)a1 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a2 + 176))(a2);
  if (a2[303] | a2[305]) {
    int v6 = 8;
  }
  else {
    int v6 = 6;
  }
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 12) = a3;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_1CFB28DF0;
  *(_OWORD *)(a1 + 64) = unk_1CFB28E00;
  *(_OWORD *)(a1 + 16) = llvm::MCSchedModel::Default;
  *(_OWORD *)(a1 + 32) = unk_1CFB28DE0;
  *(_OWORD *)(a1 + 88) = llvm::MCSchedModel::Default;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = unk_1CFB28E00;
  *(_OWORD *)(a1 + 120) = xmmword_1CFB28DF0;
  *(_OWORD *)(a1 + 104) = unk_1CFB28DE0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 208) = a1 + 224;
  *(void *)(a1 + 216) = 0x1000000000;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = a1 + 312;
  *(void *)(a1 + 304) = 0xF00000000;
  *(_DWORD *)(a1 + 40888) = 0;
  *(_OWORD *)(a1 + 40872) = 0u;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)(a1 + 16), (const llvm::TargetSubtargetInfo *)a2);
  unsigned int v7 = *(_DWORD *)(a1 + 304);
  uint64_t v8 = *(unsigned int *)(a1 + 308);
  if (v7 >= v8)
  {
    if (v8 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    if (((2 * v8) | 1uLL) >= 0xFFFFFFFF) {
      uint64_t v10 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v10 = (2 * v8) | 1;
    }
    char v11 = malloc_type_malloc(2704 * v10, 0x4065EBACuLL);
    if (!v11) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v12 = (uint64_t)v11;
    sub_1CBC19548((uint64_t)v11 + 2704 * *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 8));
    sub_1CBC19810(a1 + 296, v12);
    uint64_t v13 = *(void **)(a1 + 296);
    if (v13 != (void *)(a1 + 312)) {
      free(v13);
    }
    *(void *)(a1 + 296) = v12;
    *(_DWORD *)(a1 + 308) = v10;
  }
  else
  {
    sub_1CBC19548(*(void *)(a1 + 296) + 2704 * v7, *(_DWORD *)(a1 + 8));
  }
  ++*(_DWORD *)(a1 + 304);
  return a1;
}

uint64_t sub_1CBC15C28(uint64_t result, uint64_t a2, void *a3)
{
  unint64_t v423 = (_OWORD *)result;
  uint64_t v502 = *MEMORY[0x1E4F143B8];
  uint64_t v475 = 1;
  int64x2_t v476 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v477 = v476;
  char v4 = (void *)a3[41];
  uint64_t v427 = a3 + 40;
  if (v4 != a3 + 40)
  {
    do
    {
      for (uint64_t i = v4[7]; (void *)i != v4 + 6; uint64_t i = *(void *)(i + 8))
      {
        int v6 = *(unsigned __int16 **)(i + 16);
        if ((v6[10] & 4) != 0)
        {
          int v7 = *v6;
          uint64_t result = sub_1CBE52E8C(v7);
          if ((result & 0xFF00000000) == 0) {
            goto LABEL_672;
          }
          if (result == 5)
          {
            *(void *)&long long v499 = *(void *)(*(void *)(i + 32) + 32 * sub_1CBDA6464(v7, 0x24u) + 16);
            uint64_t result = (uint64_t)sub_1CD426D54((uint64_t)&__base, (uint64_t)&v475, (uint64_t *)&v499);
          }
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      char v4 = (void *)v4[1];
    }
    while (v4 != v427);
    uint64_t v8 = a3[41];
    if ((void *)v8 != v427)
    {
      unsigned int v422 = (void **)(a2 + 296);
      unint64_t v419 = (void *)(a2 + 312);
      uint64_t v420 = a2 + 40872;
      unint64_t v421 = (llvm::TargetSchedModel *)(a2 + 16);
      uint64_t v432 = a2;
      do
      {
        uint64_t v425 = *(void *)(v8 + 8);
        __base = 0;
        uint64_t result = sub_1CD426E14((uint64_t)&v475, v8, &__base);
        if (result)
        {
          int v9 = *(_DWORD *)(a2 + 304) - 1;
          uint64_t v10 = *(void *)(a2 + 296) + 2704 * v9;
          LODWORD(__base) = *(_DWORD *)v10;
          size_t __nel = (size_t)v481;
          uint64_t v480 = 0x800000000;
          if (*(_DWORD *)(v10 + 16)) {
            sub_1CBC1A4C0((uint64_t)&__nel, v10 + 8);
          }
          uint64_t v11 = 0;
          unsigned int v455 = v9;
          int v12 = v9;
          do
          {
            uint64_t v13 = (char *)&__base + v11;
            uint64_t v14 = v10 + v11;
            *((void *)v13 + 283) = v13 + 2280;
            *((void *)v13 + 284) = 0x600000000;
            if (&__base != (void **)v10)
            {
              unint64_t v15 = *(unsigned int *)(v14 + 2272);
              if (*(_DWORD *)(v14 + 2272))
              {
                if (v15 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(&v481[v11 + 2256], *(const void **)(v14 + 2264), 8 * *(unsigned int *)(v14 + 2272));
                *((_DWORD *)v13 + 568) = v15;
              }
            }
            *((_DWORD *)v13 + 582) = *(_DWORD *)(v14 + 2328);
            *((_DWORD *)v13 + 584) = *(_DWORD *)(v14 + 2336);
            v11 += 80;
          }
          while (v11 != 240);
          v482 = &v484;
          uint64_t v483 = 0;
          if (*(_DWORD *)(v10 + 2512)) {
            sub_1CD41B6B0((uint64_t)&v482, v10 + 2504);
          }
          uint64_t v484 = &v487;
          uint64_t v485 = 0;
          uint64_t v486 = 0;
          if (*(void *)(v10 + 2528)) {
            sub_1CD4271C0((uint64_t)&v484, v10 + 2520);
          }
          unint64_t v487 = &v489;
          uint64_t v488 = 0;
          if (*(_DWORD *)(v10 + 2552)) {
            sub_1CD41B6B0((uint64_t)&v487, v10 + 2544);
          }
          int v489 = &v492;
          uint64_t v490 = 0;
          uint64_t v491 = 0;
          if (*(void *)(v10 + 2568)) {
            sub_1CD4271C0((uint64_t)&v489, v10 + 2560);
          }
          uint64_t v492 = &v494;
          uint64_t v493 = 0;
          if (*(_DWORD *)(v10 + 2592)) {
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v492, v10 + 2584);
          }
          long long v494 = *(_OWORD *)(v10 + 2600);
          long long v16 = *(_OWORD *)(v10 + 2616);
          long long v17 = *(_OWORD *)(v10 + 2632);
          long long v18 = *(_OWORD *)(v10 + 2664);
          long long v497 = *(_OWORD *)(v10 + 2648);
          long long v498 = v18;
          long long v495 = v16;
          long long v496 = v17;
          uint64_t v19 = (char *)*v422;
          uint64_t v20 = *((int *)*v422 + 676 * v12 + 670);
          if (v20 > 3) {
            int v21 = 0;
          }
          else {
            int v21 = dword_1CDC7F460[v20];
          }
          unsigned int v22 = *(_DWORD *)(v432 + 304);
          uint64_t v23 = *(unsigned int *)(v432 + 308);
          if (v22 >= v23)
          {
            if (v23 == -1) {
              sub_1CD0A89A8(0xFFFFFFFFuLL);
            }
            unint64_t v329 = (2 * v23) | 1;
            if (v329 >= 0xFFFFFFFF) {
              uint64_t v330 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v330 = v329;
            }
            uint64_t v331 = (char *)malloc_type_malloc(2704 * v330, 0x4065EBACuLL);
            if (!v331) {
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            uint64_t v332 = (uint64_t)v331;
            unsigned int v454 = *(_DWORD *)(v432 + 304);
            uint64_t v333 = (void **)&v331[2704 * v454];
            *(_DWORD *)uint64_t v333 = __base;
            v333[1] = v333 + 3;
            v333[2] = (void *)0x800000000;
            if (v480) {
              sub_1CBC1A4C0((uint64_t)(v333 + 1), (uint64_t)&__nel);
            }
            for (uint64_t j = 0; j != 30; j += 10)
            {
              uint64_t v335 = (char *)&v333[j];
              uint64_t v336 = (const void **)((char *)&__base + j * 8);
              uint64_t v337 = (char *)&v333[j + 285];
              *((void *)v335 + 283) = v337;
              *((void *)v335 + 284) = 0x600000000;
              if (v333 != &__base)
              {
                unint64_t v338 = *((unsigned int *)v336 + 568);
                if (*((_DWORD *)v336 + 568))
                {
                  if (v338 >= 7) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v337, v336[283], 8 * *((unsigned int *)v336 + 568));
                  *((_DWORD *)v335 + 568) = v338;
                }
              }
              *((_DWORD *)v335 + 582) = *((_DWORD *)v336 + 582);
              *((_DWORD *)v335 + 584) = *((_DWORD *)v336 + 584);
            }
            v333[313] = v333 + 315;
            v333[314] = 0;
            if (v483) {
              sub_1CD41B6B0((uint64_t)(v333 + 313), (uint64_t)&v482);
            }
            v333[315] = v333 + 318;
            v333[317] = 0;
            v333[316] = 0;
            if (v485) {
              sub_1CD4271C0((uint64_t)(v333 + 315), (uint64_t)&v484);
            }
            v333[318] = v333 + 320;
            v333[319] = 0;
            if (v488) {
              sub_1CD41B6B0((uint64_t)(v333 + 318), (uint64_t)&v487);
            }
            v333[320] = v333 + 323;
            v333[322] = 0;
            v333[321] = 0;
            if (v490) {
              sub_1CD4271C0((uint64_t)(v333 + 320), (uint64_t)&v489);
            }
            v333[323] = v333 + 325;
            v333[324] = 0;
            if (v493) {
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v333 + 323), (uint64_t)&v492);
            }
            *(_OWORD *)(v333 + 325) = v494;
            long long v339 = v495;
            long long v340 = v496;
            long long v341 = v498;
            *(_OWORD *)(v333 + 331) = v497;
            *(_OWORD *)(v333 + 333) = v341;
            *(_OWORD *)(v333 + 327) = v339;
            *(_OWORD *)(v333 + 329) = v340;
            uint64_t v342 = v332 + 2704 * v454;
            *(_DWORD *)(v342 + 2680) = v21;
            *(void *)(v342 + 2684) = v455;
            *(void *)(v342 + 2696) = 0;
            sub_1CBC19810((uint64_t)v422, v332);
            a2 = v432;
            if (*v422 != v419) {
              free(*v422);
            }
            *(void *)(v432 + 296) = v332;
            *(_DWORD *)(v432 + 308) = v330;
          }
          else
          {
            int v24 = v21;
            uint64_t v25 = (void **)&v19[2704 * v22];
            *(_DWORD *)uint64_t v25 = __base;
            v25[1] = v25 + 3;
            v25[2] = (void *)0x800000000;
            if (v480) {
              sub_1CBC1A4C0((uint64_t)(v25 + 1), (uint64_t)&__nel);
            }
            for (uint64_t k = 0; k != 30; k += 10)
            {
              char v27 = (char *)&v25[k];
              uint64_t v28 = (const void **)((char *)&__base + k * 8);
              uint64_t v29 = (char *)&v25[k + 285];
              *((void *)v27 + 283) = v29;
              *((void *)v27 + 284) = 0x600000000;
              if (v25 != &__base)
              {
                unint64_t v30 = *((unsigned int *)v28 + 568);
                if (*((_DWORD *)v28 + 568))
                {
                  if (v30 >= 7) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v29, v28[283], 8 * *((unsigned int *)v28 + 568));
                  *((_DWORD *)v27 + 568) = v30;
                }
              }
              *((_DWORD *)v27 + 582) = *((_DWORD *)v28 + 582);
              *((_DWORD *)v27 + 584) = *((_DWORD *)v28 + 584);
            }
            v25[313] = v25 + 315;
            v25[314] = 0;
            if (v483) {
              sub_1CD41B6B0((uint64_t)(v25 + 313), (uint64_t)&v482);
            }
            v25[315] = v25 + 318;
            v25[317] = 0;
            v25[316] = 0;
            a2 = v432;
            if (v485) {
              sub_1CD4271C0((uint64_t)(v25 + 315), (uint64_t)&v484);
            }
            v25[318] = v25 + 320;
            v25[319] = 0;
            if (v488) {
              sub_1CD41B6B0((uint64_t)(v25 + 318), (uint64_t)&v487);
            }
            v25[320] = v25 + 323;
            v25[322] = 0;
            v25[321] = 0;
            if (v490) {
              sub_1CD4271C0((uint64_t)(v25 + 320), (uint64_t)&v489);
            }
            v25[323] = v25 + 325;
            v25[324] = 0;
            if (v493) {
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v25 + 323), (uint64_t)&v492);
            }
            *(_OWORD *)(v25 + 325) = v494;
            long long v31 = v495;
            long long v32 = v496;
            long long v33 = v498;
            *(_OWORD *)(v25 + 331) = v497;
            *(_OWORD *)(v25 + 333) = v33;
            *(_OWORD *)(v25 + 327) = v31;
            *(_OWORD *)(v25 + 329) = v32;
            BOOL v34 = &v19[2704 * v22];
            *((_DWORD *)v34 + 670) = v24;
            *(void *)(v34 + 2684) = v455;
            *((void *)v34 + 337) = 0;
          }
          ++*(_DWORD *)(a2 + 304);
          uint64_t result = sub_1CBC19FF4((uint64_t)&__base);
        }
        uint64_t v35 = v8 + 48;
        uint64_t v36 = *(void *)(v8 + 56);
        if (v36 == v8 + 48) {
          goto LABEL_520;
        }
        uint64_t v426 = v8 + 48;
        while (1)
        {
          int v37 = *(unsigned __int16 **)(v36 + 16);
          if ((v37[10] & 4) == 0) {
            goto LABEL_63;
          }
          int v38 = *v37;
          if (v38 == 623)
          {
            uint64_t v39 = *(void *)(*(void *)(*(void *)(v36 + 24) + 32) + 16);
            if (*(unsigned __int8 *)(v39 + 303) | *(unsigned __int8 *)(v39 + 305)) {
              unint64_t v40 = 255;
            }
            else {
              unint64_t v40 = 63;
            }
          }
          else
          {
            unint64_t v40 = *(unsigned __int8 *)(*(void *)(v36 + 32) + 32 * sub_1CBDA6464(v38, 0x2Eu) + 19);
          }
          uint64_t v41 = *(void *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304);
          double v42 = sub_1CBC1A944((unsigned int *)(v41 - 2704), v40);
          double v43 = v42;
          *(double *)&long long v457 = v42;
          uint64_t v44 = *(unsigned int *)(v41 - 112);
          if (v44)
          {
            uint64_t v45 = *(double **)(v41 - 120);
            uint64_t v46 = 8 * v44;
            do
            {
              *uint64_t v45 = (1.0 - v42) * *v45;
              ++v45;
              v46 -= 8;
            }
            while (v46);
          }
          *(double *)(v41 - 48) = v42 + *(double *)(v41 - 48);
          unint64_t v47 = sub_1CBC1AA00((unsigned int *)(v41 - 2704), v40);
          sub_1CBC1AADC(v41 - 2704, v47, SHIDWORD(v47));
          uint64_t v48 = *(unsigned int *)(v41 - 2704);
          if (v48)
          {
            uint64_t v49 = 0;
            uint64_t v50 = 272;
            do
            {
              if ((v40 >> v49))
              {
                uint64_t v51 = (void *)(*(void *)(v41 - 2696) + v50);
                *((_DWORD *)v51 - 66) = 0;
                void *v51 = 0;
              }
              ++v49;
              v50 += 280;
            }
            while (v48 != v49);
          }
          if (v43 != 0.0)
          {
            *(void *)&long long v499 = v36;
            sub_1CD427358((uint64_t)&__base, v420, (uint64_t *)&v499, &v457);
          }
          uint64_t v52 = *(void *)(a2 + 296);
          unsigned int v53 = *(_DWORD *)(a2 + 304);
          uint64_t v438 = (_WORD *)(*(void *)(a2 + 56) + 24 * *(unsigned __int16 *)(*(void *)(v36 + 16) + 6));
          if ((v438[4] & 0x1FFF) == 0x1FFE)
          {
            do
            {
              unsigned int v325 = (*(uint64_t (**)(void))(**(void **)(a2 + 192) + 200))(*(void *)(a2 + 192));
              uint64_t v326 = *(void *)(a2 + 56);
            }
            while ((*(_WORD *)(v326 + 24 * v325 + 8) & 0x1FFF) == 0x1FFE);
            uint64_t v438 = (_WORD *)(v326 + 24 * v325);
          }
          int v428 = *(void **)(a2 + 192);
          uint64_t v54 = (*(uint64_t (**)(void))(*v428 + 176))();
          uint64_t v55 = v54;
          uint64_t v56 = *(unsigned __int16 **)(v36 + 16);
          int v57 = *v56;
          unsigned int v58 = v57 - 9;
          BOOL v60 = (v57 - 9) <= 0x3C && ((1 << (v57 - 9)) & 0x1000000000000605) != 0
             || v57 == 0;
          if (v60 || (v56[4] & 0x10) != 0 || (*((void *)v56 + 2) & 1) != 0) {
            int v61 = 1;
          }
          else {
            int v61 = -5;
          }
          int v436 = v61;
          BOOL v431 = (v58 <= 0x3C && ((1 << v58) & 0x1000000000000605) != 0
               || !*v56
               || (v56[4] & 0x10) != 0
               || (v56[8] & 1) != 0)
              && (v56[4] & 8) == 0;
          uint64_t v62 = v52 + 2704 * v53;
          uint64_t v450 = v62;
          uint64_t v456 = (llvm::MachineInstr *)v36;
          uint64_t v63 = (const llvm::MachineInstr *)*(unsigned int *)(v36 + 40);
          if (v63)
          {
            uint64_t v70 = 0;
            int v64 = 0;
            unsigned int v441 = (void *)(v54 + 8);
            uint64_t v429 = (uint64_t *)(v62 - 160);
            uint64_t v430 = v54;
            uint64_t v71 = (uint64_t *)(v62 - 200);
            unint64_t v433 = v63;
            int v435 = (void *)(v62 - 184);
            while (1)
            {
              int v72 = sub_1CBC2D2EC((uint64_t)v456, v70, v441);
              uint64_t v73 = 32 * (void)v70;
              if (v72 == 1) {
                break;
              }
              uint64_t v79 = *((void *)v456 + 4);
              if ((*(_DWORD *)(v79 + 32 * (void)v70) & 0x10000FF) == 0)
              {
                unint64_t v80 = *(unsigned int *)(v79 + 32 * (void)v70 + 4);
                if ((v80 - 1) <= 0x56
                  && ((byte_1CDEF3152[v80 >> 3] >> (v80 & 7)) & 1) != 0)
                {
                  break;
                }
              }
              uint64_t v62 = v450;
LABEL_177:
              uint64_t v70 = (const llvm::MachineInstr *)((char *)v70 + 1);
              if (v70 == v63) {
                goto LABEL_104;
              }
            }
            int v445 = v64;
            uint64_t v74 = (unsigned __int16)v438[10];
            int v75 = v436;
            if (v438[10])
            {
              unsigned int UseIdx = llvm::TargetSchedModel::findUseIdx((uint64_t)v456, v70);
              uint64_t v73 = 32 * (void)v70;
              uint64_t v103 = (int *)(v428[19] + 12 * (unsigned __int16)v438[9] + 8);
              uint64_t v104 = 12 * v74;
              while (1)
              {
                unsigned int v105 = *(v103 - 2);
                if (v105 >= UseIdx)
                {
                  if (v105 > UseIdx)
                  {
                    int v75 = 0;
                    goto LABEL_110;
                  }
                  if (!*(v103 - 1)) {
                    break;
                  }
                }
                int v75 = 0;
                v103 += 3;
                v104 -= 12;
                if (!v104) {
                  goto LABEL_110;
                }
              }
              int v75 = *v103;
            }
LABEL_110:
            uint64_t v76 = *((void *)v456 + 4);
            int v447 = v70;
            if ((*(_DWORD *)(v76 + v73) & 0x10000FF) == 0)
            {
              unint64_t v77 = *(unsigned int *)(v76 + 32 * (void)v70 + 4);
              if ((v77 - 1) <= 0x56
                && ((byte_1CDEF3152[v77 >> 3] >> (v77 & 7)) & 1) != 0)
              {
                int v78 = sub_1CBC1AE94(v429, *(unsigned __int16 *)(*(void *)(v55 + 112) + 2 * v77), v75);
LABEL_174:
                int v64 = v445;
                if (v445 <= v78) {
                  int v64 = v78;
                }
                uint64_t v70 = v447;
                uint64_t v62 = v450;
                goto LABEL_177;
              }
            }
            uint64_t v434 = v73;
            sub_1CBAF9B1C(&__base, v456, v70, v55, 0, 0);
            int v78 = 0;
            unint64_t v81 = (unint64_t)__base;
            int v82 = __nel;
            unint64_t v83 = (unint64_t)__base >> 32;
            if (__nel == HIDWORD(__base))
            {
LABEL_173:
              uint64_t v63 = v433;
              goto LABEL_174;
            }
            int v78 = 0;
            do
            {
              int v84 = sub_1CBC1AE94(v71, v83, v75);
              if (v78 <= v84) {
                int v78 = v84;
              }
              unint64_t v81 = (v81 & 0xFFFFFFFF00000000) + 0x100000000;
              unint64_t v83 = HIDWORD(v81);
            }
            while (v82 != HIDWORD(v81));
            unint64_t v85 = (unint64_t)__base;
            int v86 = __nel;
            unint64_t v87 = (unint64_t)__base >> 32;
            if (__nel == HIDWORD(__base))
            {
              a2 = v432;
              goto LABEL_173;
            }
            unsigned int v88 = 0;
            char v89 = 1;
            uint64_t v90 = v450;
            uint64_t v91 = v435;
            do
            {
              unint64_t v92 = *(void *)(v90 - 176);
              unint64_t v93 = (v87 + 1);
              if (v92 <= v87 && v93 != v92)
              {
                if (v93 >= v92)
                {
                  sub_1CD42762C(v435, v93 - v92);
                  uint64_t v91 = v435;
                  uint64_t v90 = v450;
                }
                else
                {
                  *(void *)(v90 - 176) = v93;
                }
              }
              if (*(unsigned char *)(*v91 + v87))
              {
                uint64_t v95 = *(unsigned int *)(v90 - 192);
                uint64_t v96 = (v87 + 1);
                if (v95 <= v87 && v95 != v96)
                {
                  if (v95 <= v96)
                  {
                    if (v96 > *(_DWORD *)(v90 - 188)) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    memset_pattern16((void *)(*(void *)(v90 - 200) + 4 * *(unsigned int *)(v90 - 192)), &unk_1CDC7F450, 4 * (v96 - v95));
                    uint64_t v90 = v450;
                    LODWORD(v96) = v96 - v95 + *(_DWORD *)(v450 - 192);
                    uint64_t v91 = v435;
                  }
                  *(_DWORD *)(v90 - 192) = v96;
                }
                if (*(_DWORD *)(*v71 + 4 * v87) >= v75) {
                  ++v88;
                }
                else {
                  char v89 = 0;
                }
              }
              else
              {
                char v89 = 0;
              }
              unint64_t v85 = (v85 & 0xFFFFFFFF00000000) + 0x100000000;
              unint64_t v87 = HIDWORD(v85);
            }
            while (v86 != HIDWORD(v85));
            BOOL v98 = v431;
            if (!v88) {
              BOOL v98 = 0;
            }
            a2 = v432;
            if (v98)
            {
              *(void *)(v90 - 32) += v88;
              if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC1B28, memory_order_acquire) & 1) == 0
                && __cxa_guard_acquire(&qword_1EBCC1B28))
              {
                byte_1EBCC1B19 = 0;
                __cxa_guard_release(&qword_1EBCC1B28);
              }
              if (byte_1EBCC1B19)
              {
                if (llvm::MachineInstr::getNumExplicitOperands((uint64_t)v456) <= v447) {
                  goto LABEL_189;
                }
                uint64_t v99 = (unsigned __int16 *)*((void *)v456 + 2);
                if ((word_1CDF77000[dword_1CDF6DEF0[*v99] + (unsigned __int16)v447] & 0xFFFB) == 0x3A)
                {
                  unsigned int v101 = v447 + 2;
                }
                else
                {
                  uint64_t v100 = *((void *)v456 + 4);
                  if ((*(_DWORD *)(v100 + v434) & 0x10000FF) == 0x1000000)
                  {
                    unsigned int v106 = *((unsigned __int8 *)v99 + 4);
                    if ((v99[4] & 2) == 0 || (int v110 = *((_DWORD *)v456 + 10), v110 == v106))
                    {
                      unsigned int v107 = v106;
                    }
                    else
                    {
                      int v111 = v110 - 1;
                      unsigned int v107 = v106;
                      do
                      {
                        int v112 = *(_DWORD *)(v100 + 32 * v106);
                        if ((v112 & 0x10000FF) != 0x1000000) {
                          break;
                        }
                        v107 += (v112 & 0x2000000) == 0;
                        if (v111 == v106) {
                          break;
                        }
                        ++v106;
                      }
                      while ((v112 & 0x2000000) == 0);
                    }
                    unsigned int v101 = v107 + v447;
                  }
                  else if (!*(_DWORD *)(v100 + v434) || *(_DWORD *)(v100 + v434) == 7)
                  {
                    unsigned int v101 = v447 + 1;
                  }
                  else
                  {
LABEL_189:
                    unsigned int v101 = -1;
                  }
                }
                uint64_t v108 = *((void *)v456 + 4) + 32 * v101;
                uint64_t v109 = 0x10000;
                if (!v89) {
                  uint64_t v109 = 81920;
                }
                *(void *)(v108 + 16) = *(void *)(v108 + 16) & 0xFFFFFFFFFFFE3FFFLL | v109;
              }
            }
            uint64_t v55 = v430;
            goto LABEL_173;
          }
          int v64 = 0;
LABEL_104:
          sub_1CBC1AADC(v62 - 2704, v64, v64);
          uint64_t v36 = (uint64_t)v456;
          int v65 = sub_1CBC2D2EC((uint64_t)v456, 0, (void *)(v55 + 8));
          int v66 = v65;
          int v67 = 0;
          unsigned int v68 = (_DWORD *)*((void *)v456 + 4);
          if ((*v68 & 0x10000FF) == 0x1000000)
          {
            unint64_t v69 = v68[1];
            if ((v69 - 1) > 0x56) {
              int v67 = 0;
            }
            else {
              int v67 = (byte_1CDEF3152[v69 >> 3] >> (v69 & 7)) & 1;
            }
          }
          if (v65 == 2 || (v67 & 1) != 0)
          {
            int v113 = llvm::TargetSchedModel::computeInstrLatency(v421, v456, 1);
            if (v67)
            {
              sub_1CBC1B004((uint64_t *)(v450 - 160), *(unsigned __int16 *)(*(void *)(v55 + 112) + 2 * *(unsigned int *)(*((void *)v456 + 4) + 4)), v113, 0);
            }
            else
            {
              sub_1CBAF9B1C(&__base, v456, 0, v55, 0, 0);
              unint64_t v114 = (unint64_t)__base;
              int v115 = __nel;
              char v116 = v66 == 2 && v431;
              unint64_t v117 = (unint64_t)__base >> 32;
              if (__nel != HIDWORD(__base))
              {
                do
                {
                  sub_1CBC1B004((uint64_t *)(v450 - 200), v117, v113, v116);
                  unint64_t v114 = (v114 & 0xFFFFFFFF00000000) + 0x100000000;
                  unint64_t v117 = HIDWORD(v114);
                }
                while (v115 != HIDWORD(v114));
              }
            }
          }
          uint64_t v118 = *(void *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304);
          uint64_t v119 = *(void *)a2;
          int v120 = *((_DWORD *)v456 + 10);
          if (v120)
          {
            unsigned int v124 = 0;
            BOOL v125 = (void *)(v118 - 120);
            double v122 = 0.0;
            do
            {
              if (sub_1CBC2D2EC(v36, v124, (void *)(v119 + 8)) - 3 >= 0xFFFFFFFE)
              {
                sub_1CBAF9B1C(&__base, (void *)v36, v124, v119, 0, 0);
                unint64_t v126 = (unint64_t)__base;
                int v127 = __nel;
                unint64_t v128 = (unint64_t)__base >> 32;
                double v129 = 0.0;
                if (__nel != HIDWORD(__base))
                {
                  do
                  {
                    unsigned int v130 = v128 >> 1;
                    if (*(_DWORD *)(v118 - 112) <= v128 >> 1) {
                      sub_1CD42769C(v118 - 120, v130 + 1);
                    }
                    double v129 = v129 + 1.0 - *(double *)(*v125 + 8 * v130);
                    *(void *)(*v125 + 8 * v130) = 0x3FF0000000000000;
                    unint64_t v126 = (v126 & 0xFFFFFFFF00000000) + 0x100000000;
                    unint64_t v128 = HIDWORD(v126);
                  }
                  while (v127 != HIDWORD(v126));
                }
                double v122 = v122 + v129;
                uint64_t v36 = (uint64_t)v456;
              }
              ++v124;
            }
            while (v124 != v120);
            uint64_t v123 = v432;
            uint64_t v119 = *(void *)v432;
            uint64_t v121 = *(unsigned int *)(v36 + 40);
          }
          else
          {
            uint64_t v121 = 0;
            double v122 = 0.0;
            uint64_t v123 = v432;
          }
          *(double *)(v118 - 40) = v122 + *(double *)(v118 - 40);
          *(void *)&long long v499 = &v500;
          *((void *)&v499 + 1) = 0x200000000;
          int v131 = *(unsigned __int8 *)(v123 + 12);
          __base = &v480;
          size_t __nel = 0x600000000;
          if (v121)
          {
            unint64_t v161 = 0;
            while (1)
            {
              if (!sub_1CBC2D2EC(v36, v161, (void *)(v119 + 8))) {
                goto LABEL_288;
              }
              if (v161 >= llvm::MachineInstr::getNumExplicitOperands(v36)) {
                goto LABEL_307;
              }
              uint64_t v162 = *(unsigned __int16 **)(v36 + 16);
              if ((word_1CDF77000[dword_1CDF6DEF0[*v162] + (unsigned __int16)v161] & 0xFFFB) == 0x3A)
              {
                unsigned int v165 = v161 + 2;
                goto LABEL_263;
              }
              uint64_t v163 = *(void *)(v36 + 32);
              if ((*(_DWORD *)(v163 + 32 * v161) & 0x10000FF) != 0x1000000) {
                break;
              }
              unsigned int v166 = *((unsigned __int8 *)v162 + 4);
              if ((v162[4] & 2) == 0 || (int v179 = *(_DWORD *)(v36 + 40), v179 == v166))
              {
                unsigned int v167 = v166;
              }
              else
              {
                int v180 = v179 - 1;
                unsigned int v167 = v166;
                do
                {
                  int v181 = *(_DWORD *)(v163 + 32 * v166);
                  if ((v181 & 0x10000FF) != 0x1000000) {
                    break;
                  }
                  v167 += (v181 & 0x2000000) == 0;
                  if (v180 == v166) {
                    break;
                  }
                  ++v166;
                }
                while ((v181 & 0x2000000) == 0);
              }
              unsigned int v165 = v167 + v161;
LABEL_263:
              int v168 = (*(_DWORD *)(*(void *)(v36 + 32) + 32 * v165 + 16) >> 20) & 0xF;
              int v169 = 1 << sub_1CBC2D2EC(v36, v161, (void *)(v119 + 8));
              if ((v169 & 0xAC) != 0)
              {
                int v170 = 3;
LABEL_278:
                LODWORD(v467) = v170;
                goto LABEL_279;
              }
              if ((v169 & 0x52) == 0)
              {
                LODWORD(v467) = 0;
                HIDWORD(v467) = 0;
                goto LABEL_280;
              }
              if (v161 >= llvm::MachineInstr::getNumExplicitOperands(v36)) {
                goto LABEL_305;
              }
              unint64_t v171 = *(unsigned __int16 **)(v36 + 16);
              if ((word_1CDF77000[dword_1CDF6DEF0[*v171] + (unsigned __int16)v161] & 0xFFFB) == 0x3A)
              {
                unsigned int v173 = v161 + 2;
                goto LABEL_275;
              }
              uint64_t v172 = *(void *)(v36 + 32);
              if ((*(_DWORD *)(v172 + 32 * v161) & 0x10000FF) != 0x1000000)
              {
                if (!*(_DWORD *)(v172 + 32 * v161)
                  || *(_DWORD *)(v172 + 32 * v161) == 7)
                {
                  unsigned int v173 = v161 + 1;
                  goto LABEL_275;
                }
LABEL_305:
                unsigned int v173 = -1;
                goto LABEL_275;
              }
              unsigned int v174 = *((unsigned __int8 *)v171 + 4);
              if ((v171[4] & 2) == 0 || (int v182 = *(_DWORD *)(v36 + 40), v182 == v174))
              {
                unsigned int v175 = v174;
              }
              else
              {
                int v183 = v182 - 1;
                unsigned int v175 = v174;
                do
                {
                  int v184 = *(_DWORD *)(v172 + 32 * v174);
                  if ((v184 & 0x10000FF) != 0x1000000) {
                    break;
                  }
                  v175 += (v184 & 0x2000000) == 0;
                  if (v183 == v174) {
                    break;
                  }
                  ++v174;
                }
                while ((v184 & 0x2000000) == 0);
              }
              unsigned int v173 = v175 + v161;
LABEL_275:
              if ((*(unsigned char *)(*(void *)(v36 + 32) + 32 * v173 + 16) & 0x10) != 0)
              {
                int v170 = 2;
                goto LABEL_278;
              }
              LODWORD(v467) = 1;
LABEL_279:
              sub_1CBAF9B1C((_DWORD *)&v467 + 1, (void *)v36, v161, v119, 0, 0);
LABEL_280:
              long long v176 = v467;
              if (!v168 || v131 && sub_1CBC2D2EC((uint64_t)v456, v161, (void *)(v119 + 8)) == 3)
              {
                if (__nel >= (unint64_t)HIDWORD(__nel)) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                *((_OWORD *)__base + __nel) = v176;
                LODWORD(__nel) = __nel + 1;
                uint64_t v36 = (uint64_t)v456;
                if (!v168) {
                  goto LABEL_288;
                }
                *(void *)&long long v462 = sub_1CBB13ED8((uint64_t)v456, v161, v119);
                DWORD2(v462) = v177;
                long long v467 = 0uLL;
              }
              else
              {
                uint64_t v36 = (uint64_t)v456;
                *(void *)&long long v462 = sub_1CBB13ED8((uint64_t)v456, v161, v119);
                DWORD2(v462) = v178;
                long long v467 = v176;
              }
              sub_1CBC1B194((uint64_t)&v499, v168, (uint64_t)&v462, &v467);
LABEL_288:
              if (++v161 == v121) {
                goto LABEL_215;
              }
            }
            if (*(_DWORD *)(v163 + 32 * v161)) {
              BOOL v164 = *(_DWORD *)(v163 + 32 * v161) == 7;
            }
            else {
              BOOL v164 = 1;
            }
            if (v164)
            {
              unsigned int v165 = v161 + 1;
              goto LABEL_263;
            }
LABEL_307:
            unsigned int v165 = -1;
            goto LABEL_263;
          }
LABEL_215:
          int v132 = **(unsigned __int16 **)(v36 + 16);
          uint64_t v133 = sub_1CBE52E8C(v132);
          if ((v133 & 0xFF00000000) == 0) {
            goto LABEL_672;
          }
          a2 = v432;
          if (v133 == 100 || v133 == 193)
          {
            int v134 = *(_DWORD *)(*(void *)(v36 + 32) + 32 * sub_1CBDA6464(v132, 0x2Fu) + 16);
            int v135 = (unsigned __int16)v134 >> 12;
            if ((unsigned __int16)v134 >> 12)
            {
              *(void *)&long long v462 = sub_1CBB14150(v36);
              DWORD2(v462) = v136;
              long long v467 = 0uLL;
              sub_1CBC1B194((uint64_t)&v499, v135, (uint64_t)&v462, &v467);
            }
          }
          uint64_t v137 = __nel;
          long long v138 = (uint64_t *)__base;
          if (__nel >= 2)
          {
            qsort(__base, __nel, 0x10uLL, (int (__cdecl *)(const void *, const void *))sub_1CBC1B264);
            uint64_t v137 = __nel;
            long long v138 = (uint64_t *)__base;
          }
          if (v137)
          {
            uint64_t v139 = 16 * v137;
            do
            {
              sub_1CBC1A6A0(*(void *)(v432 + 296) + 2704 * *(unsigned int *)(v432 + 304) - 2704, v138);
              v138 += 2;
              v139 -= 16;
            }
            while (v139);
            long long v138 = (uint64_t *)__base;
          }
          if (v138 != &v480) {
            free(v138);
          }
          if (DWORD2(v499))
          {
            uint64_t v140 = (unsigned int *)v499;
            long long v141 = (unsigned int *)(v499 + 32 * DWORD2(v499));
            long long v142 = (void *)(*(void *)(v432 + 296) + 2704 * *(unsigned int *)(v432 + 304) - 2696);
            do
            {
              uint64_t v143 = *v142 + 280 * *v140;
              uint64_t v144 = *(unsigned int *)(v143 + 8);
              if (v144)
              {
                uint64_t v145 = 32 * v144;
                long long v146 = (int *)(*(void *)v143 + 12);
                double v147 = 1.0;
                do
                {
                  double v148 = (double)*(v146 - 2);
                  int v149 = *v146;
                  v146 += 8;
                  double v150 = (double)v149;
                  double v151 = (double)v149 - (v148 + -1.0);
                  if ((double)v149 < 0.0) {
                    double v150 = 0.0;
                  }
                  if (v151 < v150) {
                    double v150 = v151;
                  }
                  double v147 = v147 * (1.0 - v150 / v151);
                  v145 -= 32;
                }
                while (v145);
              }
              else
              {
                double v147 = 1.0;
              }
              uint64_t v152 = *v142 + 280 * *v140;
              double v153 = *(double *)(v152 + 272);
              sub_1CB8BBE7C((unint64_t *)v143, (unint64_t)v140);
              double v154 = (1.0 - v147) * v153;
              if ((int)v140[2] > 60) {
                double v154 = 1.0;
              }
              *(double *)(v152 + 272) = v154;
              v140 += 8;
            }
            while (v140 != v141);
          }
          uint64_t v155 = *(void *)(*(void *)(*(void *)(v36 + 24) + 32) + 16);
          (*(void (**)(uint64_t))(*(void *)v155 + 104))(v155);
          int v156 = (_WORD *)(*(void *)(v432 + 56) + 24 * *(unsigned __int16 *)(*(void *)(v36 + 16) + 6));
          if ((v156[4] & 0x1FFF) == 0x1FFE)
          {
            do
            {
              unsigned int v327 = (*(uint64_t (**)(void))(**(void **)(v432 + 192) + 200))(*(void *)(v432 + 192));
              uint64_t v328 = *(void *)(v432 + 56);
            }
            while ((*(_WORD *)(v328 + 24 * v327 + 8) & 0x1FFF) == 0x1FFE);
            int v156 = (_WORD *)(v328 + 24 * v327);
          }
          uint64_t v157 = sub_1CD420520(v36);
          if ((v157 & 0xFF00000000) != 0)
          {
            int v160 = v157;
          }
          else if (v156[6])
          {
            char v158 = (unsigned __int16 *)(*(void *)(*(void *)(v432 + 192) + 136)
                                      + 4 * (unsigned __int16)v156[5]
                                      + 2);
            uint64_t v159 = 4 * (unsigned __int16)v156[6];
            while (*(v158 - 1) != 9)
            {
              v158 += 2;
              int v160 = 1;
              v159 -= 4;
              if (!v159) {
                goto LABEL_312;
              }
            }
            unsigned int v185 = *v158;
            if (v185 <= 1) {
              int v160 = 1;
            }
            else {
              int v160 = v185;
            }
          }
          else
          {
            int v160 = 1;
          }
LABEL_312:
          uint64_t v186 = *(unsigned int *)(v36 + 40);
          if (v186)
          {
            uint64_t v187 = 0;
            LODWORD(v188) = 0;
            uint64_t v189 = (void *)(*(void *)v432 + 8);
            uint64_t v190 = 16;
            do
            {
              int v191 = sub_1CBC2D2EC(v36, v187, v189);
              if (v191 == 4)
              {
                uint64_t v192 = *(void *)(v36 + 32);
                uint64_t v193 = *(int *)(v192 + v190);
                uint64_t v194 = sub_1CBAD8000(v192 + v190 - 16);
                if ((v194 & 0xFF00000000) == 0)
                {
                  LODWORD(v188) = dword_1CDC7F470[v193 - 81];
                  uint64_t v36 = (uint64_t)v456;
                  goto LABEL_336;
                }
                uint8x8_t v195 = (uint8x8_t)vcnt_s8((int8x8_t)v194);
                v195.i16[0] = vaddlv_u8(v195);
                LODWORD(v188) = v195.i32[0] + v188;
                uint64_t v36 = (uint64_t)v456;
              }
              else if (v191 == 5)
              {
                LODWORD(v188) = v188 + 1;
              }
              ++v187;
              v190 += 32;
            }
            while (v186 != v187);
            if (v188) {
              goto LABEL_336;
            }
          }
          unsigned int v196 = (int *)(v36 + 48);
          unint64_t v197 = *(void *)(v36 + 48);
          if (v197 < 8)
          {
LABEL_335:
            LODWORD(v188) = 0;
            goto LABEL_336;
          }
          if ((v197 & 7) == 0)
          {
            *(void *)(v36 + 48) = v197 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v201 = v36 + 56;
            goto LABEL_330;
          }
          LODWORD(v188) = 0;
          if ((*(void *)(v36 + 48) & 7) == 3)
          {
            unsigned int v198 = (int *)(v197 & 0xFFFFFFFFFFFFFFF8);
            if ((v197 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              uint64_t v200 = *v198;
              unsigned int v196 = v198 + 2;
              uint64_t v199 = v200;
              if (!v200) {
                goto LABEL_335;
              }
              uint64_t v201 = (uint64_t)&v196[2 * v199];
LABEL_330:
              while (1)
              {
                uint64_t v202 = *(void **)v196;
                if (!*(_DWORD *)(*(void *)v196 + 16))
                {
                  if ((*v202 & 4) == 0) {
                    break;
                  }
                  unint64_t v203 = *v202 & 0xFFFFFFFFFFFFFFF8;
                  if (!v203 || *(_DWORD *)(v203 + 8) != 7) {
                    break;
                  }
                }
                v196 += 2;
                if (v196 == (int *)v201) {
                  goto LABEL_335;
                }
              }
              uint64_t v322 = v202[3];
              unsigned int v321 = v202 + 3;
              if ((v322 & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                unint64_t v324 = (unint64_t)(sub_1CB8F1DC4(v321) + 7) >> 3;
                if (v323 == 1) {
              }
                }
              else
              {
                unint64_t v324 = -1;
              }
              unint64_t v188 = (v324 + 3) >> 2;
            }
          }
LABEL_336:
          uint64_t v204 = *(void *)(v432 + 296) + 2704 * *(unsigned int *)(v432 + 304);
          sub_1CBC1AADC(v204 - 2704, v160, v160);
          *(void *)(v204 - 80) += v160;
          *(_DWORD *)(v204 - 72) += v188;
          if ((long long *)v499 != &v500) {
            free((void *)v499);
          }
          int v205 = **(unsigned __int16 **)(v36 + 16);
          uint64_t result = sub_1CBE52E8C(v205);
          if ((result & 0xFF00000000) == 0) {
LABEL_672:
          }
            llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
          if ((int)result > 13)
          {
            if (result != 14)
            {
              uint64_t v35 = v426;
              if (result != 17) {
                goto LABEL_63;
              }
              int v206 = *(_DWORD *)(*(void *)(v36 + 32) + 32 * sub_1CBDA6464(v205, 0x3Cu) + 16);
              uint64_t v207 = sub_1CBC1A440(v36);
LABEL_366:
              uint64_t result = sub_1CBC1A1CC(v432, v206, v207);
LABEL_402:
              uint64_t v35 = v426;
              goto LABEL_63;
            }
            uint64_t result = sub_1CBDA6464(v205, 0x3Cu);
            int v247 = *(_DWORD *)(*(void *)(v36 + 32) + 32 * result + 16);
            uint64_t v35 = v426;
            if (v247 < 1) {
              goto LABEL_63;
            }
            while (2)
            {
              uint64_t v248 = *(void *)(a2 + 296);
              uint64_t v249 = *(unsigned int *)(a2 + 304);
              uint64_t v448 = (unsigned int *)(v248 + 2704 * v249);
              int v250 = *(v448 - 6);
              switch(v250)
              {
                case 1:
                  int v444 = v247;
                  uint64_t v282 = (int)*(v448 - 5);
                  uint64_t v283 = v248 + 2704 * (int)v282;
                  int v284 = *(_DWORD *)(v283 + 5392);
                  uint64_t v452 = (long long *)(v283 + 2600);
                  sub_1CBC1B760((uint64_t)&v499, (_OWORD *)(v283 + 5304), v283 + 2600);
                  LODWORD(__base) = *(_DWORD *)(v283 + 2704);
                  size_t __nel = (size_t)v481;
                  uint64_t v480 = 0x800000000;
                  if (*(_DWORD *)(v283 + 2720)) {
                    sub_1CBC1A4C0((uint64_t)&__nel, v283 + 2712);
                  }
                  uint64_t v285 = 0;
                  uint64_t v449 = v282 + 1;
                  int v443 = v444 - v284;
                  uint64_t v286 = v248 + 2704 * (int)v282;
                  do
                  {
                    int v287 = (char *)&__base + v285;
                    uint64_t v288 = v286 + v285;
                    *((void *)v287 + 283) = v287 + 2280;
                    *((void *)v287 + 284) = 0x600000000;
                    unint64_t v289 = *(unsigned int *)(v286 + v285 + 4976);
                    if (&v481[v285 + 2240] != (unsigned char *)(v286 + 4968 + v285) && v289 != 0)
                    {
                      if (v289 >= 7) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      memcpy(&v481[v285 + 2256], *(const void **)(v288 + 4968), 8 * *(unsigned int *)(v286 + v285 + 4976));
                      *((_DWORD *)v287 + 568) = v289;
                    }
                    *((_DWORD *)v287 + 582) = *(_DWORD *)(v288 + 5032);
                    *((_DWORD *)v287 + 584) = *(_DWORD *)(v288 + 5040);
                    v285 += 80;
                  }
                  while (v285 != 240);
                  v482 = &v484;
                  uint64_t v483 = 0;
                  if (*(_DWORD *)(v283 + 5216)) {
                    sub_1CD41B6B0((uint64_t)&v482, v283 + 5208);
                  }
                  uint64_t v484 = &v487;
                  uint64_t v485 = 0;
                  uint64_t v486 = 0;
                  if (*(void *)(v283 + 5232)) {
                    sub_1CD4271C0((uint64_t)&v484, v283 + 5224);
                  }
                  unint64_t v487 = &v489;
                  uint64_t v488 = 0;
                  uint64_t v36 = (uint64_t)v456;
                  if (*(_DWORD *)(v283 + 5256)) {
                    sub_1CD41B6B0((uint64_t)&v487, v283 + 5248);
                  }
                  int v489 = &v492;
                  uint64_t v490 = 0;
                  uint64_t v491 = 0;
                  if (*(void *)(v283 + 5272)) {
                    sub_1CD4271C0((uint64_t)&v489, v283 + 5264);
                  }
                  uint64_t v492 = &v494;
                  uint64_t v493 = 0;
                  if (*(_DWORD *)(v283 + 5296)) {
                    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v492, v283 + 5288);
                  }
                  long long v494 = *(_OWORD *)(v283 + 5304);
                  long long v291 = *(_OWORD *)(v283 + 5320);
                  long long v292 = *(_OWORD *)(v283 + 5336);
                  long long v293 = *(_OWORD *)(v283 + 5368);
                  long long v497 = *(_OWORD *)(v283 + 5352);
                  long long v498 = v293;
                  long long v495 = v291;
                  long long v496 = v292;
                  sub_1CBC1B7EC((uint64_t)&v462, (uint64_t)&v499, 0.9);
                  long long v467 = *v452;
                  long long v294 = *(_OWORD *)(v283 + 2616);
                  long long v295 = *(_OWORD *)(v283 + 2632);
                  long long v296 = *(_OWORD *)(v283 + 2664);
                  long long v470 = *(_OWORD *)(v283 + 2648);
                  long long v471 = v296;
                  long long v468 = v294;
                  long long v469 = v295;
                  sub_1CBC1BB30((uint64_t)&v467, (uint64_t)&v462);
                  long long v496 = v469;
                  long long v497 = v470;
                  long long v498 = v471;
                  long long v494 = v467;
                  long long v495 = v468;
                  *(_DWORD *)uint64_t v283 = __base;
                  sub_1CBC1A4C0(v283 + 8, (uint64_t)&__nel);
                  uint64_t v297 = 0;
                  a2 = v432;
                  do
                  {
                    uint64_t v298 = (unsigned int *)(v283 + v297);
                    long long v299 = (const void **)((char *)&__base + v297);
                    if ((void **)v283 != &__base)
                    {
                      long long v300 = (void **)(v298 + 566);
                      uint64_t v301 = *((unsigned int *)v299 + 568);
                      uint64_t v302 = v298[568];
                      if (v302 >= v301)
                      {
                        if (v301) {
                          memmove(*v300, v299[283], 8 * v301);
                        }
                      }
                      else
                      {
                        if (*(_DWORD *)(v283 + v297 + 2276) < v301)
                        {
                          v298[568] = 0;
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        if (v302) {
                          memmove(*v300, v299[283], 8 * v302);
                        }
                        else {
                          uint64_t v302 = 0;
                        }
                        uint64_t v303 = *((unsigned int *)v299 + 568);
                        if (v302 != v303) {
                          memcpy((char *)*v300 + 8 * v302, (char *)v299[283] + 8 * v302, 8 * v303 - 8 * v302);
                        }
                      }
                      v298[568] = v301;
                    }
                    v298[582] = *((_DWORD *)v299 + 582);
                    v298[584] = *((_DWORD *)v299 + 584);
                    v297 += 80;
                  }
                  while (v297 != 240);
                  sub_1CD41B6B0(v283 + 2504, (uint64_t)&v482);
                  sub_1CD4271C0(v283 + 2520, (uint64_t)&v484);
                  sub_1CD41B6B0(v283 + 2544, (uint64_t)&v487);
                  sub_1CD4271C0(v283 + 2560, (uint64_t)&v489);
                  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v283 + 2584, (uint64_t)&v492);
                  long long *v452 = v494;
                  long long v304 = v495;
                  long long v305 = v496;
                  long long v306 = v498;
                  *(_OWORD *)(v283 + 2648) = v497;
                  *(_OWORD *)(v283 + 2664) = v306;
                  *(_OWORD *)(v283 + 2616) = v304;
                  *(_OWORD *)(v283 + 2632) = v305;
                  uint64_t v280 = *(void *)(v432 + 296);
                  uint64_t v281 = v449;
                  break;
                case 2:
                  int v442 = v247;
                  uint64_t v251 = (int)*(v448 - 5);
                  uint64_t v252 = v248 + 2704 * (int)v251;
                  int v253 = *(_DWORD *)(v252 + 5392);
                  uint64_t v254 = v251 + 1;
                  LODWORD(v501[0]) = 0;
                  long long v499 = 0u;
                  long long v500 = 0u;
                  memset((char *)v501 + 8, 0, 40);
                  uint64_t v440 = v249;
                  if ((int)v251 + 1 < (int)v249)
                  {
                    int v255 = ~v251 + v249;
                    BOOL v256 = (_OWORD *)(v248 + 2704 * (int)v251 + 5304);
                    do
                    {
                      sub_1CBC1B760((uint64_t)&__base, v256, v252 + 2600);
                      sub_1CBC1BB30((uint64_t)&v499, (uint64_t)&__base);
                      v256 += 169;
                      --v255;
                    }
                    while (v255);
                  }
                  unsigned int v257 = (unsigned int *)(v248 + 2704 * v254);
                  uint64_t v439 = v251 + 1;
                  int v437 = v253;
                  if (v254 == v440 || (uint64_t v258 = v257 + 676, v257 + 676 == v448))
                  {
                    __int16 v259 = (unsigned int *)(v248 + 2704 * v254);
                  }
                  else
                  {
                    unint64_t v453 = ~(-1 << *(_DWORD *)(v432 + 8));
                    uint64_t v307 = v248 + 2704 * (int)v251 + 7744;
                    __int16 v259 = (unsigned int *)(v248 + 2704 * v254);
                    do
                    {
                      int v308 = 0;
                      uint64_t v309 = v257;
                      unsigned int v257 = v258;
                      for (uint64_t m = 584; m != 644; m += 20)
                        v308 += v259[m];
                      unint64_t v446 = sub_1CBC1AA00(v259, v453);
                      uint64_t v311 = 0;
                      int v312 = 0;
                      uint64_t v313 = *((void *)v259 + 328);
                      signed int v314 = v259[658];
                      uint64_t v315 = *((void *)v259 + 330);
                      do
                      {
                        v312 += *(_DWORD *)(v307 + v311);
                        v311 += 80;
                      }
                      while (v311 != 240);
                      unint64_t v316 = sub_1CBC1AA00(v257, v453);
                      uint64_t v317 = *((void *)v309 + 666);
                      if (v313 < v317
                        || v317 >= v313
                        && ((signed int v318 = v309[1334], v314 < v318)
                         || v318 >= v314
                         && ((uint64_t v319 = *((void *)v309 + 668), v315 < v319)
                          || v319 >= v315
                          && (v308 < v312
                           || v312 >= v308
                           && (SHIDWORD(v446) < SHIDWORD(v316)
                            || ((int)v446 < (int)v316 ? (BOOL v320 = SHIDWORD(v316) < SHIDWORD(v446)) : (BOOL v320 = 1), !v320))))))
                      {
                        __int16 v259 = v257;
                      }
                      uint64_t v258 = v257 + 676;
                      v307 += 2704;
                    }
                    while (v257 + 676 != v448);
                  }
                  LODWORD(__base) = *v259;
                  size_t __nel = (size_t)v481;
                  uint64_t v480 = 0x800000000;
                  if (v259[4]) {
                    sub_1CBC1A4C0((uint64_t)&__nel, (uint64_t)(v259 + 2));
                  }
                  uint64_t v260 = 0;
                  int v443 = v442 - v437;
                  uint64_t v36 = (uint64_t)v456;
                  do
                  {
                    uint64_t v261 = (char *)&__base + v260 * 4;
                    unsigned int v262 = &v259[v260];
                    *((void *)v261 + 283) = v261 + 2280;
                    *((void *)v261 + 284) = 0x600000000;
                    if (&__base != (void **)v259)
                    {
                      unint64_t v263 = v262[568];
                      if (v262[568])
                      {
                        if (v263 >= 7) {
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        memcpy(&v481[v260 * 4 + 2256], *((const void **)v262 + 283), 8 * v262[568]);
                        *((_DWORD *)v261 + 568) = v263;
                      }
                    }
                    *((_DWORD *)v261 + 582) = v262[582];
                    *((_DWORD *)v261 + 584) = v262[584];
                    v260 += 20;
                  }
                  while (v260 != 60);
                  v482 = &v484;
                  uint64_t v483 = 0;
                  if (v259[628]) {
                    sub_1CD41B6B0((uint64_t)&v482, (uint64_t)(v259 + 626));
                  }
                  uint64_t v484 = &v487;
                  uint64_t v485 = 0;
                  uint64_t v486 = 0;
                  if (*((void *)v259 + 316)) {
                    sub_1CD4271C0((uint64_t)&v484, (uint64_t)(v259 + 630));
                  }
                  unint64_t v487 = &v489;
                  uint64_t v488 = 0;
                  if (v259[638]) {
                    sub_1CD41B6B0((uint64_t)&v487, (uint64_t)(v259 + 636));
                  }
                  int v489 = &v492;
                  uint64_t v490 = 0;
                  uint64_t v491 = 0;
                  if (*((void *)v259 + 321)) {
                    sub_1CD4271C0((uint64_t)&v489, (uint64_t)(v259 + 640));
                  }
                  uint64_t v492 = &v494;
                  uint64_t v493 = 0;
                  if (v259[648]) {
                    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v492, (uint64_t)(v259 + 646));
                  }
                  long long v494 = *(_OWORD *)(v259 + 650);
                  long long v264 = *(_OWORD *)(v259 + 654);
                  long long v265 = *(_OWORD *)(v259 + 658);
                  long long v266 = *(_OWORD *)(v259 + 666);
                  long long v497 = *(_OWORD *)(v259 + 662);
                  long long v498 = v266;
                  long long v495 = v264;
                  long long v496 = v265;
                  sub_1CBC1B7EC((uint64_t)&v462, (uint64_t)&v499, 1.0 / ((double)v440 - (double)(int)v439));
                  long long v467 = *(_OWORD *)(v252 + 2600);
                  long long v267 = *(_OWORD *)(v252 + 2616);
                  long long v268 = *(_OWORD *)(v252 + 2632);
                  long long v269 = *(_OWORD *)(v252 + 2664);
                  long long v470 = *(_OWORD *)(v252 + 2648);
                  long long v471 = v269;
                  long long v468 = v267;
                  long long v469 = v268;
                  sub_1CBC1BB30((uint64_t)&v467, (uint64_t)&v462);
                  long long v496 = v469;
                  long long v497 = v470;
                  long long v498 = v471;
                  long long v494 = v467;
                  long long v495 = v468;
                  *(_DWORD *)uint64_t v252 = __base;
                  sub_1CBC1A4C0(v252 + 8, (uint64_t)&__nel);
                  for (uint64_t n = 0; n != 240; n += 80)
                  {
                    int v271 = (unsigned int *)(v252 + n);
                    uint64_t v272 = (const void **)((char *)&__base + n);
                    if ((void **)v252 != &__base)
                    {
                      uint64_t v273 = (void **)(v271 + 566);
                      uint64_t v274 = *((unsigned int *)v272 + 568);
                      uint64_t v275 = v271[568];
                      if (v275 >= v274)
                      {
                        if (v274) {
                          memmove(*v273, v272[283], 8 * v274);
                        }
                      }
                      else
                      {
                        if (*(_DWORD *)(v252 + n + 2276) < v274)
                        {
                          v271[568] = 0;
                          llvm::SmallVectorBase<unsigned int>::grow_pod();
                        }
                        if (v275) {
                          memmove(*v273, v272[283], 8 * v275);
                        }
                        else {
                          uint64_t v275 = 0;
                        }
                        uint64_t v276 = *((unsigned int *)v272 + 568);
                        if (v275 != v276) {
                          memcpy((char *)*v273 + 8 * v275, (char *)v272[283] + 8 * v275, 8 * v276 - 8 * v275);
                        }
                      }
                      v271[568] = v274;
                      uint64_t v36 = (uint64_t)v456;
                    }
                    v271[582] = *((_DWORD *)v272 + 582);
                    v271[584] = *((_DWORD *)v272 + 584);
                  }
                  sub_1CD41B6B0(v252 + 2504, (uint64_t)&v482);
                  sub_1CD4271C0(v252 + 2520, (uint64_t)&v484);
                  sub_1CD41B6B0(v252 + 2544, (uint64_t)&v487);
                  sub_1CD4271C0(v252 + 2560, (uint64_t)&v489);
                  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v252 + 2584, (uint64_t)&v492);
                  *(_OWORD *)(v252 + 2600) = v494;
                  long long v277 = v495;
                  long long v278 = v496;
                  long long v279 = v498;
                  *(_OWORD *)(v252 + 2648) = v497;
                  *(_OWORD *)(v252 + 2664) = v279;
                  *(_OWORD *)(v252 + 2616) = v277;
                  *(_OWORD *)(v252 + 2632) = v278;
                  a2 = v432;
                  uint64_t v280 = *(void *)(v432 + 296);
                  uint64_t v281 = v439;
                  break;
                case 0:
                  goto LABEL_63;
                default:
LABEL_407:
                  if (v247 <= 0) {
                    goto LABEL_63;
                  }
                  continue;
              }
              break;
            }
            sub_1CBC1B87C((uint64_t *)v422, v280 + 2704 * v281, v280 + 2704 * *(unsigned int *)(a2 + 304));
            uint64_t result = sub_1CBC19FF4((uint64_t)&__base);
            uint64_t v35 = v426;
            int v247 = v443;
            goto LABEL_407;
          }
          if (result == 5) {
            break;
          }
          uint64_t v35 = v426;
          if (result == 13)
          {
            int v206 = *(_DWORD *)(*(void *)(v36 + 32) + 32 * sub_1CBDA6464(v205, 0x3Cu) + 16);
            uint64_t v207 = sub_1CBC1A440(v36);
            LODWORD(v467) = v206;
            *(void *)&long long v499 = v207;
            uint64_t v208 = *(void *)(v432 + 296);
            uint64_t v209 = v208 + 2704 * *(unsigned int *)(v432 + 304);
            if ((*(_DWORD *)(v209 - 24) - 1) >= 2) {
              goto LABEL_366;
            }
            LODWORD(v462) = *(_DWORD *)(v209 - 20);
            uint64_t v210 = v208 + 2704 * (int)v462;
            LODWORD(__base) = *(_DWORD *)v210;
            size_t __nel = (size_t)v481;
            uint64_t v480 = 0x800000000;
            if (*(_DWORD *)(v210 + 16)) {
              sub_1CBC1A4C0((uint64_t)&__nel, v210 + 8);
            }
            for (iuint64_t i = 0; ii != 240; ii += 80)
            {
              unint64_t v212 = (char *)&__base + ii;
              uint64_t v213 = v210 + ii;
              *((void *)v212 + 283) = v212 + 2280;
              *((void *)v212 + 284) = 0x600000000;
              if (&__base != (void **)v210)
              {
                unint64_t v214 = *(unsigned int *)(v213 + 2272);
                if (*(_DWORD *)(v213 + 2272))
                {
                  if (v214 >= 7) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(&v481[ii + 2256], *(const void **)(v213 + 2264), 8 * *(unsigned int *)(v213 + 2272));
                  *((_DWORD *)v212 + 568) = v214;
                }
              }
              *((_DWORD *)v212 + 582) = *(_DWORD *)(v213 + 2328);
              *((_DWORD *)v212 + 584) = *(_DWORD *)(v213 + 2336);
            }
            v482 = &v484;
            uint64_t v483 = 0;
            if (*(_DWORD *)(v210 + 2512)) {
              sub_1CD41B6B0((uint64_t)&v482, v210 + 2504);
            }
            uint64_t v484 = &v487;
            uint64_t v485 = 0;
            uint64_t v486 = 0;
            if (*(void *)(v210 + 2528)) {
              sub_1CD4271C0((uint64_t)&v484, v210 + 2520);
            }
            unint64_t v487 = &v489;
            uint64_t v488 = 0;
            if (*(_DWORD *)(v210 + 2552)) {
              sub_1CD41B6B0((uint64_t)&v487, v210 + 2544);
            }
            int v489 = &v492;
            uint64_t v490 = 0;
            uint64_t v491 = 0;
            if (*(void *)(v210 + 2568)) {
              sub_1CD4271C0((uint64_t)&v489, v210 + 2560);
            }
            uint64_t v492 = &v494;
            uint64_t v493 = 0;
            if (*(_DWORD *)(v210 + 2592)) {
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v492, v210 + 2584);
            }
            long long v494 = *(_OWORD *)(v210 + 2600);
            long long v215 = *(_OWORD *)(v210 + 2616);
            long long v216 = *(_OWORD *)(v210 + 2632);
            long long v217 = *(_OWORD *)(v210 + 2664);
            long long v497 = *(_OWORD *)(v210 + 2648);
            long long v498 = v217;
            long long v495 = v215;
            long long v496 = v216;
            LODWORD(v457) = 2;
            sub_1CBC1B280((uint64_t)v422, (uint64_t)&__base, (int *)&v457, (int *)&v462, (int *)&v467, (uint64_t *)&v499);
            uint64_t result = sub_1CBC19FF4((uint64_t)&__base);
            goto LABEL_402;
          }
LABEL_63:
          if ((*(unsigned char *)v36 & 4) == 0)
          {
            while ((*(_WORD *)(v36 + 44) & 8) != 0)
              uint64_t v36 = *(void *)(v36 + 8);
          }
          uint64_t v36 = *(void *)(v36 + 8);
          if (v36 == v35) {
            goto LABEL_520;
          }
        }
        uint64_t result = sub_1CBDA6464(v205, 0x24u);
        uint64_t v218 = *(void *)(v432 + 296);
        uint64_t v219 = v218 + 2704 * *(unsigned int *)(v432 + 304);
        if (*(_DWORD *)(v219 - 24) != 3)
        {
          int v220 = *(_DWORD *)(v219 - 20);
          uint64_t v221 = v218 + 2704 * (v220 + 1);
          uint64_t v222 = v218 + 2704 * (v220 - 1);
          int v451 = v220;
          int v223 = (_OWORD *)(v218 + 2704 * v220 + 2600);
          uint64_t v224 = (long long *)(v222 + 2600);
          sub_1CBC1B760((uint64_t)&v499, v223, v222 + 2600);
          sub_1CBC1B760((uint64_t)&v467, (_OWORD *)(v221 + 2600), (uint64_t)v223);
          sub_1CBC1B7EC((uint64_t)&__base, (uint64_t)&v467, 9.0);
          long long v464 = v501[0];
          long long v465 = v501[1];
          long long v466 = v501[2];
          long long v462 = v499;
          long long v463 = v500;
          sub_1CBC1BB30((uint64_t)&v462, (uint64_t)&__base);
          LODWORD(__base) = *(_DWORD *)v221;
          size_t __nel = (size_t)v481;
          uint64_t v480 = 0x800000000;
          if (*(_DWORD *)(v221 + 16)) {
            sub_1CBC1A4C0((uint64_t)&__nel, v221 + 8);
          }
          for (juint64_t j = 0; jj != 240; jj += 80)
          {
            unsigned int v226 = (char *)&__base + jj;
            uint64_t v227 = v221 + jj;
            *((void *)v226 + 283) = v226 + 2280;
            *((void *)v226 + 284) = 0x600000000;
            if (&__base != (void **)v221)
            {
              unint64_t v228 = *(unsigned int *)(v227 + 2272);
              if (*(_DWORD *)(v227 + 2272))
              {
                if (v228 >= 7) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                memcpy(&v481[jj + 2256], *(const void **)(v227 + 2264), 8 * *(unsigned int *)(v227 + 2272));
                *((_DWORD *)v226 + 568) = v228;
              }
            }
            *((_DWORD *)v226 + 582) = *(_DWORD *)(v227 + 2328);
            *((_DWORD *)v226 + 584) = *(_DWORD *)(v227 + 2336);
          }
          v482 = &v484;
          uint64_t v483 = 0;
          if (*(_DWORD *)(v221 + 2512)) {
            sub_1CD41B6B0((uint64_t)&v482, v221 + 2504);
          }
          uint64_t v484 = &v487;
          uint64_t v485 = 0;
          uint64_t v486 = 0;
          if (*(void *)(v221 + 2528)) {
            sub_1CD4271C0((uint64_t)&v484, v221 + 2520);
          }
          unint64_t v487 = &v489;
          uint64_t v488 = 0;
          if (*(_DWORD *)(v221 + 2552)) {
            sub_1CD41B6B0((uint64_t)&v487, v221 + 2544);
          }
          int v489 = &v492;
          uint64_t v490 = 0;
          uint64_t v491 = 0;
          if (*(void *)(v221 + 2568)) {
            sub_1CD4271C0((uint64_t)&v489, v221 + 2560);
          }
          uint64_t v492 = &v494;
          uint64_t v493 = 0;
          if (*(_DWORD *)(v221 + 2592)) {
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v492, v221 + 2584);
          }
          long long v494 = *(_OWORD *)(v221 + 2600);
          long long v229 = *(_OWORD *)(v221 + 2616);
          long long v230 = *(_OWORD *)(v221 + 2632);
          long long v231 = *(_OWORD *)(v221 + 2664);
          long long v497 = *(_OWORD *)(v221 + 2648);
          long long v498 = v231;
          long long v495 = v229;
          long long v496 = v230;
          long long v457 = *v224;
          long long v232 = *(_OWORD *)(v222 + 2616);
          long long v233 = *(_OWORD *)(v222 + 2632);
          long long v234 = *(_OWORD *)(v222 + 2664);
          long long v460 = *(_OWORD *)(v222 + 2648);
          long long v461 = v234;
          long long v458 = v232;
          long long v459 = v233;
          sub_1CBC1BB30((uint64_t)&v457, (uint64_t)&v462);
          long long v496 = v459;
          long long v497 = v460;
          long long v498 = v461;
          long long v494 = v457;
          long long v495 = v458;
          *(_DWORD *)uint64_t v222 = __base;
          sub_1CBC1A4C0(v222 + 8, (uint64_t)&__nel);
          uint64_t v235 = 0;
          uint64_t v236 = v218 + 2704 * v451;
          do
          {
            uint64_t v237 = v236 + v235;
            int v238 = (const void **)((char *)&__base + v235);
            if ((void **)v222 != &__base)
            {
              int v239 = (void **)(v237 - 440);
              uint64_t v240 = *((unsigned int *)v238 + 568);
              uint64_t v241 = (_DWORD *)(v237 - 432);
              uint64_t v242 = *(unsigned int *)(v237 - 432);
              if (v242 >= v240)
              {
                if (v240) {
                  memmove(*v239, v238[283], 8 * v240);
                }
              }
              else
              {
                if (*(_DWORD *)(v236 + v235 - 428) < v240)
                {
                  *uint64_t v241 = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v242) {
                  memmove(*v239, v238[283], 8 * v242);
                }
                else {
                  uint64_t v242 = 0;
                }
                uint64_t v243 = *((unsigned int *)v238 + 568);
                if (v242 != v243) {
                  memcpy((char *)*v239 + 8 * v242, (char *)v238[283] + 8 * v242, 8 * v243 - 8 * v242);
                }
              }
              *uint64_t v241 = v240;
            }
            *(_DWORD *)(v237 - 376) = *((_DWORD *)v238 + 582);
            *(_DWORD *)(v237 - 368) = *((_DWORD *)v238 + 584);
            v235 += 80;
          }
          while (v235 != 240);
          sub_1CD41B6B0(v222 + 2504, (uint64_t)&v482);
          sub_1CD4271C0(v222 + 2520, (uint64_t)&v484);
          sub_1CD41B6B0(v222 + 2544, (uint64_t)&v487);
          sub_1CD4271C0(v222 + 2560, (uint64_t)&v489);
          llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v222 + 2584, (uint64_t)&v492);
          long long *v224 = v494;
          long long v244 = v495;
          long long v245 = v496;
          long long v246 = v498;
          *(_OWORD *)(v222 + 2648) = v497;
          *(_OWORD *)(v222 + 2664) = v246;
          *(_OWORD *)(v222 + 2616) = v244;
          *(_OWORD *)(v222 + 2632) = v245;
          a2 = v432;
          sub_1CBC1B87C((uint64_t *)v422, *(void *)(v432 + 296) + 2704 * v451, *(void *)(v432 + 296) + 2704 * *(unsigned int *)(v432 + 304));
          uint64_t result = sub_1CBC19FF4((uint64_t)&__base);
          uint64_t v36 = (uint64_t)v456;
          goto LABEL_402;
        }
        uint64_t v425 = *(void *)(*((void *)v456 + 4) + 32 * result + 16);
LABEL_520:
        uint64_t v8 = v425;
      }
      while ((void *)v425 != v427);
    }
  }
  if (byte_1EBCC1BB0 && (*(_WORD *)(*a3 + 18) & 0x3FF0) != 0x640)
  {
    uint64_t v343 = *(void *)(a2 + 296) + 2704 * *(unsigned int *)(a2 + 304);
    uint64_t result = (uint64_t)llvm::dbgs((llvm *)result);
    int32x2_t v344 = (llvm::raw_ostream *)result;
    uint64_t v345 = *(unsigned char **)(result + 32);
    unint64_t v346 = *(void *)(result + 24) - (void)v345;
    if (*(void *)(v343 - 80))
    {
      if (v346 > 0x10)
      {
        v345[16] = 32;
        *(_OWORD *)uint64_t v345 = *(_OWORD *)"\nTotalIssueTime: ";
        *(void *)(result + 32) += 17;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)result, "\nTotalIssueTime: ", 0x11uLL);
      }
      llvm::raw_ostream::operator<<(v344, *(void *)(v343 - 80));
      int v347 = (_DWORD *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v347 > 6uLL)
      {
        *(_DWORD *)((char *)v347 + 3) = 1936026723;
        *int v347 = 1668891424;
        uint64_t v348 = (void *)(*((void *)v344 + 4) + 7);
        *((void *)v344 + 4) = v348;
      }
      else
      {
        llvm::raw_ostream::write(v344, " Cycles", 7uLL);
        uint64_t v348 = (void *)*((void *)v344 + 4);
      }
      if (*((void *)v344 + 3) - (void)v348 > 0x15uLL)
      {
        qmemcpy(v348, "\nIntegralGPRPressure: ", 22);
        *((void *)v344 + 4) += 22;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nIntegralGPRPressure: ", 0x16uLL);
      }
      int v349 = (uint64_t *)(v343 - 104);
      *(double *)&uint64_t v350 = (double)*(uint64_t *)(v343 - 104) * 0.0009765625;
      __base = &unk_1F25F6490;
      size_t __nel = (size_t)"%0.3f KGPR * Cycles per Thread";
      uint64_t v480 = v350;
      llvm::raw_ostream::operator<<(v344, (uint64_t)&__base);
      unint64_t v351 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v351 > 0x15uLL)
      {
        qmemcpy(v351, "\nIntegralRegPressure: ", 22);
        *((void *)v344 + 4) += 22;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nIntegralRegPressure: ", 0x16uLL);
      }
      uint64_t v352 = 0;
      uint64_t v353 = 0;
      do
        v353 += v349[v352++];
      while (v352 != 3);
      *(void *)&long long v499 = &unk_1F25F6490;
      *((void *)&v499 + 1) = "%0.3f KReg * Cycles per Thread";
      *(double *)&long long v500 = (double)v353 * 0.0009765625;
      llvm::raw_ostream::operator<<(v344, (uint64_t)&v499);
      uint64_t v354 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v354 > 0x17uLL)
      {
        qmemcpy(v354, "\nIntegralIRSTKPressure: ", 24);
        *((void *)v344 + 4) += 24;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nIntegralIRSTKPressure: ", 0x18uLL);
      }
      uint64_t v355 = 0;
      uint64_t v356 = 0;
      do
        v356 += v349[v355++];
      while (v355 != 3);
      double v357 = (double)v356 * 0.0009765625 - (double)*v349 * 0.0009765625;
      *(void *)&long long v467 = &unk_1F25F6490;
      *((void *)&v467 + 1) = "%0.3f KReg * Cycles per Thread";
      *(double *)&long long v468 = v357;
      llvm::raw_ostream::operator<<(v344, (uint64_t)&v467);
      uint64_t v358 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v358 > 0x14uLL)
      {
        qmemcpy(v358, "\nAvgGPRDynFootprint: ", 21);
        *((void *)v344 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nAvgGPRDynFootprint: ", 0x15uLL);
      }
      double v359 = round((double)*(uint64_t *)(v343 - 104) / (double)*(uint64_t *)(v343 - 80)) * 0.125;
      *(void *)&long long v462 = &unk_1F25F6490;
      *((void *)&v462 + 1) = "%0.3f KB per TEC";
      *(double *)&long long v463 = v359;
      llvm::raw_ostream::operator<<(v344, (uint64_t)&v462);
      uint64_t v360 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v360 > 0x14uLL)
      {
        qmemcpy(v360, "\nAvgRegDynFootprint: ", 21);
        *((void *)v344 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nAvgRegDynFootprint: ", 0x15uLL);
      }
      uint64_t v361 = 0;
      uint64_t v362 = 0;
      do
        v362 += v349[v361++];
      while (v361 != 3);
      double v363 = round((double)v362 / (double)*(uint64_t *)(v343 - 80)) * 0.125;
      *(void *)&long long v457 = &unk_1F25F6490;
      *((void *)&v457 + 1) = "%0.3f KB per TEC";
      *(double *)&long long v458 = v363;
      llvm::raw_ostream::operator<<(v344, (uint64_t)&v457);
      uint64_t v364 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v364 > 0x1AuLL)
      {
        qmemcpy(v364, "\nMeanOccupancyRequirement: ", 27);
        *((void *)v344 + 4) += 27;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nMeanOccupancyRequirement: ", 0x1BuLL);
      }
      double v365 = (double)*(uint64_t *)(v343 - 64) / (double)*(uint64_t *)(v343 - 80);
      v474[0] = &unk_1F25F6490;
      v474[1] = "%0.3f per TEC";
      *(double *)&void v474[2] = v365;
      llvm::raw_ostream::operator<<(v344, (uint64_t)v474);
      uint64_t v366 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v366 > 0x18uLL)
      {
        qmemcpy(v366, "\nMeanChannelRequirement: ", 25);
        *((void *)v344 + 4) += 25;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nMeanChannelRequirement: ", 0x19uLL);
      }
      double v367 = (double)*(uint64_t *)(v343 - 56) / (double)*(uint64_t *)(v343 - 80);
      v473[0] = &unk_1F25F6490;
      v473[1] = "%0.3f per TEC";
      *(double *)&v473[2] = v367;
      llvm::raw_ostream::operator<<(v344, (uint64_t)v473);
      uint64_t v368 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v368 > 0x14uLL)
      {
        qmemcpy(v368, "\nTotalShaderLatency: ", 21);
        *((void *)v344 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nTotalShaderLatency: ", 0x15uLL);
      }
      llvm::raw_ostream::operator<<(v344, *(void *)(v343 - 64));
      unint64_t v369 = (_DWORD *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v369 > 6uLL)
      {
        *(_DWORD *)((char *)v369 + 3) = 1936026723;
        _DWORD *v369 = 1668891424;
        unint64_t v370 = (void *)(*((void *)v344 + 4) + 7);
        *((void *)v344 + 4) = v370;
      }
      else
      {
        llvm::raw_ostream::write(v344, " Cycles", 7uLL);
        unint64_t v370 = (void *)*((void *)v344 + 4);
      }
      if (*((void *)v344 + 3) - (void)v370 > 0x14uLL)
      {
        qmemcpy(v370, "\nTotalTimeInChannel: ", 21);
        *((void *)v344 + 4) += 21;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nTotalTimeInChannel: ", 0x15uLL);
      }
      llvm::raw_ostream::operator<<(v344, *(void *)(v343 - 56));
      uint64_t v371 = (_DWORD *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v371 > 6uLL)
      {
        *(_DWORD *)((char *)v371 + 3) = 1936026723;
        _DWORD *v371 = 1668891424;
        uint64_t v372 = *((void *)v344 + 4) + 7;
        *((void *)v344 + 4) = v372;
      }
      else
      {
        llvm::raw_ostream::write(v344, " Cycles", 7uLL);
        uint64_t v372 = *((void *)v344 + 4);
      }
      if ((unint64_t)(*((void *)v344 + 3) - v372) > 0x12)
      {
        *(_DWORD *)(v372 + 15) = 540701550;
        *(_OWORD *)uint64_t v372 = *(_OWORD *)"\nNumDeactivations: ";
        *((void *)v344 + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nNumDeactivations: ", 0x13uLL);
      }
      uint64_t v373 = *(void *)(v343 - 48);
      v472[0] = &unk_1F25F6490;
      v472[1] = "%0.1f per Clique";
      v472[2] = v373;
      llvm::raw_ostream::operator<<(v344, (uint64_t)v472);
      uint64_t v374 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v374 > 0xEuLL)
      {
        qmemcpy(v374, "\nNumTagChecks: ", 15);
        *((void *)v344 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nNumTagChecks: ", 0xFuLL);
      }
      signed int v375 = llround(*(double *)(v343 - 40));
      unint64_t v376 = v375;
      if (v375 < 0)
      {
        unint64_t v376 = -(uint64_t)v375;
        uint64_t v377 = v344;
        int v378 = 1;
      }
      else
      {
        uint64_t v377 = v344;
        int v378 = 0;
      }
      sub_1CD098D14(v377, v376, 0, 0, v378);
      uint64_t v380 = *((void *)v344 + 4);
      if ((unint64_t)(*((void *)v344 + 3) - v380) > 0xA)
      {
        *(_DWORD *)(v380 + 7) = 1702195561;
        *(void *)uint64_t v380 = *(void *)" per Clique";
        uint64_t v381 = *((void *)v344 + 4) + 11;
        *((void *)v344 + 4) = v381;
      }
      else
      {
        llvm::raw_ostream::write(v344, " per Clique", 0xBuLL);
        uint64_t v381 = *((void *)v344 + 4);
      }
      if ((unint64_t)(*((void *)v344 + 3) - v381) > 0x13)
      {
        *(_DWORD *)(v381 + 16) = 540697970;
        *(_OWORD *)uint64_t v381 = *(_OWORD *)"\nAvgGPRDynPressure: ";
        *((void *)v344 + 4) += 20;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nAvgGPRDynPressure: ", 0x14uLL);
      }
      LODWORD(v379) = vcvtad_u64_f64((double)*(uint64_t *)(v343 - 104) / (double)*(uint64_t *)(v343 - 64));
      sub_1CD098D14(v344, v379, 0, 0, 0);
      int v383 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v383 > 0x16uLL)
      {
        qmemcpy(v383, " 32-bit GPRs per Thread", 23);
        uint64_t v384 = *((void *)v344 + 4) + 23;
        *((void *)v344 + 4) = v384;
      }
      else
      {
        llvm::raw_ostream::write(v344, " 32-bit GPRs per Thread", 0x17uLL);
        uint64_t v384 = *((void *)v344 + 4);
      }
      if ((unint64_t)(*((void *)v344 + 3) - v384) > 0x13)
      {
        *(_DWORD *)(v384 + 16) = 540697970;
        *(_OWORD *)uint64_t v384 = *(_OWORD *)"\nAvgRegDynPressure: ";
        *((void *)v344 + 4) += 20;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nAvgRegDynPressure: ", 0x14uLL);
      }
      uint64_t v385 = 0;
      uint64_t v386 = 0;
      do
        v386 += v349[v385++];
      while (v385 != 3);
      LODWORD(v382) = vcvtad_u64_f64((double)v386 / (double)*(uint64_t *)(v343 - 64));
      sub_1CD098D14(v344, v382, 0, 0, 0);
      unsigned __int16 v387 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v387 > 0x16uLL)
      {
        qmemcpy(v387, " 32-bit Regs per Thread", 23);
        uint64_t v388 = *((void *)v344 + 4) + 23;
        *((void *)v344 + 4) = v388;
      }
      else
      {
        llvm::raw_ostream::write(v344, " 32-bit Regs per Thread", 0x17uLL);
        uint64_t v388 = *((void *)v344 + 4);
      }
      if ((unint64_t)(*((void *)v344 + 3) - v388) > 0x10)
      {
        *(unsigned char *)(v388 + 16) = 32;
        *(_OWORD *)uint64_t v388 = *(_OWORD *)"\nUL1ReadsWrites: ";
        *((void *)v344 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nUL1ReadsWrites: ", 0x11uLL);
      }
      unint64_t v389 = *(int *)(v343 - 72);
      if ((v389 & 0x80000000) != 0)
      {
        unint64_t v389 = -(uint64_t)v389;
        unsigned int v390 = v344;
        int v391 = 1;
      }
      else
      {
        unsigned int v390 = v344;
        int v391 = 0;
      }
      sub_1CD098D14(v390, v389, 0, 0, v391);
      unsigned int v392 = (_OWORD *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v392 > 0xFuLL)
      {
        *unsigned int v392 = *(_OWORD *)" 4B Transactions";
        uint64_t v393 = *((void *)v344 + 4) + 16;
        *((void *)v344 + 4) = v393;
      }
      else
      {
        llvm::raw_ostream::write(v344, " 4B Transactions", 0x10uLL);
        uint64_t v393 = *((void *)v344 + 4);
      }
      if ((unint64_t)(*((void *)v344 + 3) - v393) > 0x12)
      {
        *(_DWORD *)(v393 + 15) = 540697965;
        *(_OWORD *)uint64_t v393 = *(_OWORD *)"\nWaitAndStallTime: ";
        *((void *)v344 + 4) += 19;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nWaitAndStallTime: ", 0x13uLL);
      }
      llvm::raw_ostream::operator<<(v344, *(void *)(v343 - 64) - *(void *)(v343 - 80));
      unint64_t v394 = (_DWORD *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v394 > 6uLL)
      {
        *(_DWORD *)((char *)v394 + 3) = 1936026723;
        *unint64_t v394 = 1668891424;
        uint64_t v395 = *((void *)v344 + 4) + 7;
        *((void *)v344 + 4) = v395;
      }
      else
      {
        llvm::raw_ostream::write(v344, " Cycles", 7uLL);
        uint64_t v395 = *((void *)v344 + 4);
      }
      if ((unint64_t)(*((void *)v344 + 3) - v395) > 0x11)
      {
        *(_WORD *)(v395 + 16) = 8250;
        *(_OWORD *)uint64_t v395 = *(_OWORD *)"\nTotalCycleCount: ";
        *((void *)v344 + 4) += 18;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nTotalCycleCount: ", 0x12uLL);
      }
      uint64_t v396 = 0;
      uint64_t v397 = 0;
      do
        v397 += v349[v396++];
      while (v396 != 3);
      double v398 = (double)*(uint64_t *)(v343 - 80);
      v399.i64[0] = v397;
      v399.i64[1] = *(void *)(v343 - 104);
      __asm { FMOV            V2.2D, #4.0 }
      float64x2_t v404 = vmulq_f64(vdivq_f64(vcvtq_f64_s64(vshlq_n_s64(vcvtq_s64_f64(vcvtq_f64_s64(v399)), 7uLL)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v398, 0)), _Q2);
      double v405 = 0.0;
      double v406 = 0.0;
      do
      {
        float64x2_t v407 = vmulq_n_f64(v404, v405);
        double v408 = v407.f64[1] + -196608.0;
        if (v407.f64[1] + -196608.0 < 0.0) {
          double v408 = 0.0;
        }
        double v409 = v407.f64[0] - v407.f64[1] + v408;
        if (v409 <= 145408.0) {
          double v410 = 1.0;
        }
        else {
          double v410 = 145408.0 / v409;
        }
        double v411 = v405 * v410;
        if (v406 < v411) {
          double v406 = v411;
        }
        double v405 = v405 + 0.0009765625;
      }
      while (v405 <= 2.0);
      llvm::raw_ostream::operator<<(v344, llround(v398 / v406));
      char v412 = (void *)*((void *)v344 + 4);
      if (*((void *)v344 + 3) - (void)v412 > 0x19uLL)
      {
        qmemcpy(v412, " Cycles per Clique per TEC", 26);
        uint64_t v413 = *((void *)v344 + 4) + 26;
        *((void *)v344 + 4) = v413;
      }
      else
      {
        llvm::raw_ostream::write(v344, " Cycles per Clique per TEC", 0x1AuLL);
        uint64_t v413 = *((void *)v344 + 4);
      }
      if ((unint64_t)(*((void *)v344 + 3) - v413) > 0x10)
      {
        *(unsigned char *)(v413 + 16) = 32;
        *(_OWORD *)uint64_t v413 = *(_OWORD *)"\nResBusForwards: ";
        *((void *)v344 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v344, "\nResBusForwards: ", 0x11uLL);
      }
      uint64_t result = (uint64_t)llvm::raw_ostream::operator<<(v344, *(void *)(v343 - 32));
      uint64_t v414 = *((void *)v344 + 4);
      if ((unint64_t)(*((void *)v344 + 3) - v414) > 0xB)
      {
        *(_DWORD *)(v414 + 8) = 1935962721;
        *(void *)uint64_t v414 = *(void *)" 2B Forwards";
        uint64_t v415 = (_DWORD *)(*((void *)v344 + 4) + 12);
        *((void *)v344 + 4) = v415;
      }
      else
      {
        uint64_t result = (uint64_t)llvm::raw_ostream::write(v344, " 2B Forwards", 0xCuLL);
        uint64_t v415 = (_DWORD *)*((void *)v344 + 4);
      }
      if (*((void *)v344 + 3) - (void)v415 <= 3uLL)
      {
        unint64_t v416 = "\n\n\n\n";
        uint64_t result = (uint64_t)v344;
        size_t v417 = 4;
LABEL_638:
        uint64_t result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, v416, v417);
        goto LABEL_551;
      }
      *uint64_t v415 = 168430090;
      uint64_t v418 = *((void *)v344 + 4) + 4;
    }
    else
    {
      if (v346 <= 0x19)
      {
        unint64_t v416 = "\nTotalIssueTime: 0 Cycles\n";
        size_t v417 = 26;
        goto LABEL_638;
      }
      qmemcpy(v345, "\nTotalIssueTime: 0 Cycles\n", 26);
      uint64_t v418 = *(void *)(result + 32) + 26;
    }
    *((void *)v344 + 4) = v418;
  }
LABEL_551:
  v423[1] = 0u;
  v423[2] = 0u;
  *unint64_t v423 = 0u;
  if ((v475 & 1) == 0) {
    return MEMORY[0x1D25D9CD0](v476.i64[0], 8);
  }
  return result;
}

uint64_t sub_1CBC19548(uint64_t a1, unsigned int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = a2;
  uint64_t v4 = a2;
  memset(v23, 0, sizeof(v23));
  int v21 = v23;
  uint64_t v22 = 0x800000000;
  uint64_t v24 = 0;
  char v5 = (char *)(a1 + 24);
  *(void *)(a1 + 8) = a1 + 24;
  *(void *)(a1 + 16) = 0x800000000;
  if (a2 < 9)
  {
    if (a2)
    {
      uint64_t v16 = 0;
      long long v17 = (void *)a1;
      do
      {
        v17[3] = v17 + 5;
        v17[4] = 0x800000000;
        if (v22)
        {
          sub_1CBC1A0FC((uint64_t)(v17 + 3), (uint64_t)&v21);
          uint64_t v16 = v24;
        }
        v17[37] = v16;
        v17 += 35;
        --v4;
      }
      while (v4);
    }
  }
  else
  {
    if (a2 <= 0x11uLL) {
      unsigned int v6 = 17;
    }
    else {
      unsigned int v6 = a2;
    }
    int v7 = (char *)malloc_type_malloc(280 * v6, 0x4065EBACuLL);
    if (!v7) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    uint64_t v10 = 280 * v4;
    do
    {
      uint64_t v11 = &v8[v9];
      *(void *)uint64_t v11 = &v8[v9 + 16];
      *((void *)v11 + 1) = 0x800000000;
      if (v22) {
        uint64_t v11 = (char *)sub_1CBC1A0FC((uint64_t)v11, (uint64_t)&v21);
      }
      *((void *)v11 + 34) = v24;
      v9 += 280;
    }
    while (v10 != v9);
    int v12 = *(char **)(a1 + 8);
    unsigned int v13 = *(_DWORD *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = 280 * v13;
      do
      {
        unint64_t v15 = *(char **)&v12[v14 - 280];
        if (&v12[v14 - 264] != v15) {
          free(v15);
        }
        v14 -= 280;
      }
      while (v14);
      int v12 = *(char **)(a1 + 8);
    }
    if (v12 != v5) {
      free(v12);
    }
    *(void *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 20) = v6;
  }
  *(_DWORD *)(a1 + 16) = a2;
  if (v21 != v23) {
    free(v21);
  }
  uint64_t v18 = 0;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2344) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2280) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2264) = 0u;
  do
  {
    uint64_t v19 = a1 + v18;
    *(void *)(v19 + 2264) = a1 + v18 + 2280;
    *(void *)(v19 + 2272) = 0x600000000;
    *(_DWORD *)(v19 + 2328) = 0;
    *(_DWORD *)(v19 + 2336) = 0;
    v18 += 80;
  }
  while (v18 != 240);
  *(void *)(a1 + 2504) = a1 + 2520;
  *(void *)(a1 + 2512) = 0;
  *(void *)(a1 + 2520) = a1 + 2544;
  *(void *)(a1 + 2536) = 0;
  *(void *)(a1 + 2528) = 0;
  *(void *)(a1 + 2544) = a1 + 2560;
  *(void *)(a1 + 2552) = 0;
  *(void *)(a1 + 2560) = a1 + 2584;
  *(void *)(a1 + 2576) = 0;
  *(void *)(a1 + 2568) = 0;
  *(void *)(a1 + 2584) = a1 + 2600;
  *(_OWORD *)(a1 + 2592) = 0u;
  *(_OWORD *)(a1 + 2608) = 0u;
  *(_OWORD *)(a1 + 2620) = 0u;
  *(_OWORD *)(a1 + 2640) = 0u;
  *(_OWORD *)(a1 + 2656) = 0u;
  *(_OWORD *)(a1 + 2668) = 0u;
  *(void *)(a1 + 2684) = 0xFFFFFFFFLL;
  *(void *)(a1 + 2696) = 0;
  return a1;
}

uint64_t sub_1CBC19810(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(void *)result;
    uint64_t v6 = *(void *)result + 2704 * v2;
    do
    {
      *(_DWORD *)a2 = *(_DWORD *)v5;
      *(void *)(a2 + 8) = a2 + 24;
      uint64_t result = a2 + 8;
      *(void *)(a2 + 16) = 0x800000000;
      if (*(_DWORD *)(v5 + 16)) {
        uint64_t result = sub_1CBC19AA4(result, v5 + 8);
      }
      for (uint64_t i = 0; i != 240; i += 80)
      {
        uint64_t v8 = a2 + i;
        uint64_t v9 = v5 + i;
        uint64_t v10 = (void *)(a2 + i + 2280);
        *(void *)(v8 + 2264) = v10;
        *(void *)(v8 + 2272) = 0x600000000;
        if (a2 != v5)
        {
          unint64_t v11 = *(unsigned int *)(v9 + 2272);
          if (*(_DWORD *)(v9 + 2272))
          {
            uint64_t result = v8 + 2264;
            int v12 = *(const void **)(v9 + 2264);
            uint64_t v13 = v5 + i;
            uint64_t v14 = v5 + i + 2280;
            if ((const void *)v14 == v12)
            {
              if (v11 >= 7) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              uint64_t result = (uint64_t)memcpy(v10, v12, 8 * *(unsigned int *)(v9 + 2272));
              *(_DWORD *)(v8 + 2272) = v11;
            }
            else
            {
              *(void *)uint64_t result = v12;
              *(_DWORD *)(v8 + 2272) = v11;
              *(_DWORD *)(v8 + 2276) = *(_DWORD *)(v13 + 2276);
              *(void *)(v9 + 2264) = v14;
              *(_DWORD *)(v13 + 2276) = 0;
            }
            *(_DWORD *)(v9 + 2272) = 0;
          }
        }
        *(_DWORD *)(v8 + 2328) = *(_DWORD *)(v9 + 2328);
        *(_DWORD *)(v8 + 2336) = *(_DWORD *)(v9 + 2336);
      }
      *(void *)(a2 + 2504) = a2 + 2520;
      *(void *)(a2 + 2512) = 0;
      if (*(_DWORD *)(v5 + 2512)) {
        uint64_t result = sub_1CD41B598(a2 + 2504, v5 + 2504);
      }
      *(void *)(a2 + 2520) = a2 + 2544;
      *(void *)(a2 + 2536) = 0;
      *(void *)(a2 + 2528) = 0;
      if (*(void *)(v5 + 2528)) {
        uint64_t result = sub_1CD426C4C(a2 + 2520, v5 + 2520);
      }
      *(void *)(a2 + 2544) = a2 + 2560;
      *(void *)(a2 + 2552) = 0;
      if (*(_DWORD *)(v5 + 2552)) {
        uint64_t result = sub_1CD41B598(a2 + 2544, v5 + 2544);
      }
      *(void *)(a2 + 2560) = a2 + 2584;
      *(void *)(a2 + 2576) = 0;
      *(void *)(a2 + 2568) = 0;
      if (*(void *)(v5 + 2568)) {
        uint64_t result = sub_1CD426C4C(a2 + 2560, v5 + 2560);
      }
      *(void *)(a2 + 2584) = a2 + 2600;
      *(void *)(a2 + 2592) = 0;
      if (*(_DWORD *)(v5 + 2592)) {
        uint64_t result = sub_1CD41C56C(a2 + 2584, v5 + 2584);
      }
      *(_OWORD *)(a2 + 2600) = *(_OWORD *)(v5 + 2600);
      long long v15 = *(_OWORD *)(v5 + 2616);
      long long v16 = *(_OWORD *)(v5 + 2632);
      long long v17 = *(_OWORD *)(v5 + 2664);
      *(_OWORD *)(a2 + 2648) = *(_OWORD *)(v5 + 2648);
      *(_OWORD *)(a2 + 2664) = v17;
      *(_OWORD *)(a2 + 2616) = v15;
      *(_OWORD *)(a2 + 2632) = v16;
      long long v18 = *(_OWORD *)(v5 + 2680);
      *(void *)(a2 + 2696) = *(void *)(v5 + 2696);
      *(_OWORD *)(a2 + 2680) = v18;
      v5 += 2704;
      a2 += 2704;
    }
    while (v5 != v6);
    unsigned int v19 = *(_DWORD *)(v4 + 8);
    if (v19)
    {
      uint64_t v20 = *(void *)v4;
      uint64_t v21 = 2704 * v19;
      uint64_t v22 = v20 - 2704;
      do
      {
        uint64_t result = sub_1CBC19FF4(v22 + v21);
        v21 -= 2704;
      }
      while (v21);
    }
  }
  return result;
}

uint64_t sub_1CBC19AA4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 16;
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2 != a2 + 16)
    {
      uint64_t v6 = *(char **)a1;
      unsigned int v7 = *(_DWORD *)(a1 + 8);
      if (v7)
      {
        uint64_t v8 = 280 * v7;
        do
        {
          uint64_t v9 = *(char **)&v6[v8 - 280];
          if (&v6[v8 - 264] != v9) {
            free(v9);
          }
          v8 -= 280;
        }
        while (v8);
        uint64_t v6 = *(char **)a1;
      }
      if (v6 != (char *)(a1 + 16)) {
        free(v6);
      }
      *(void *)a1 = *(void *)a2;
      uint64_t v10 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
LABEL_12:
      *uint64_t v10 = 0;
      return a1;
    }
    uint64_t v10 = (_DWORD *)(a2 + 8);
    unint64_t v12 = *(unsigned int *)(a2 + 8);
    uint64_t v13 = *(unsigned int *)(a1 + 8);
    if (v13 >= v12)
    {
      uint64_t v17 = *(void *)a1;
      if (v12)
      {
        uint64_t v18 = 280 * v12;
        do
        {
          sub_1CBC19ED8(v17, v4);
          *(void *)(v17 + 272) = *(void *)(v4 + 272);
          v4 += 280;
          v17 += 280;
          v18 -= 280;
        }
        while (v18);
        LODWORD(v13) = *(_DWORD *)(a1 + 8);
        unsigned int v19 = *(char **)a1;
      }
      else
      {
        unsigned int v19 = *(char **)a1;
      }
      long long v31 = &v19[280 * v13];
      if (v31 != (char *)v17)
      {
        do
        {
          long long v32 = v31 - 280;
          long long v33 = (char *)*((void *)v31 - 35);
          if (v31 - 264 != v33) {
            free(v33);
          }
          long long v31 = v32;
        }
        while (v32 != (char *)v17);
      }
      *(_DWORD *)(a1 + 8) = v12;
      unsigned int v34 = *(_DWORD *)(a2 + 8);
      if (v34)
      {
        uint64_t v35 = *(void *)a2;
        uint64_t v36 = 280 * v34;
        do
        {
          int v37 = *(void **)(v35 + v36 - 280);
          if ((void *)(v35 + v36 - 264) != v37) {
            free(v37);
          }
          v36 -= 280;
        }
        while (v36);
      }
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v12)
    {
      if (v13)
      {
        uint64_t v20 = *(void *)a1;
        uint64_t v21 = 280 * v13;
        do
        {
          uint64_t v22 = sub_1CBC19ED8(v20, v4);
          *(void *)(v22 + 272) = *(void *)(v4 + 272);
          v4 += 280;
          uint64_t v20 = v22 + 280;
          v21 -= 280;
        }
        while (v21);
        goto LABEL_31;
      }
    }
    else
    {
      if (v13)
      {
        uint64_t v14 = *(char **)a1;
        uint64_t v15 = 280 * v13;
        do
        {
          long long v16 = *(char **)&v14[v15 - 280];
          if (&v14[v15 - 264] != v16) {
            free(v16);
          }
          v15 -= 280;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1CBC19D7C((char **)a1, v12);
    }
    uint64_t v13 = 0;
LABEL_31:
    uint64_t v23 = *(void *)a2;
    uint64_t v24 = *(unsigned int *)(a2 + 8);
    if (v13 != v24)
    {
      uint64_t v25 = *(char **)a1;
      uint64_t v26 = 280 * v13;
      uint64_t v27 = 280 * v24;
      do
      {
        uint64_t v28 = &v25[v26];
        *(void *)uint64_t v28 = &v25[v26 + 16];
        *((void *)v28 + 1) = 0x800000000;
        if (*(_DWORD *)(v23 + v26 + 8)) {
          uint64_t v28 = (char *)sub_1CBC19ED8((uint64_t)v28, v23 + v26);
        }
        *((void *)v28 + 34) = *(void *)(v23 + v26 + 272);
        v25 += 280;
        v27 -= 280;
        v23 += 280;
      }
      while (v26 != v27);
      uint64_t v23 = *(void *)a2;
    }
    *(_DWORD *)(a1 + 8) = v12;
    if (*v10)
    {
      uint64_t v29 = 280 * *v10;
      do
      {
        unint64_t v30 = *(void **)(v23 + v29 - 280);
        if ((void *)(v23 + v29 - 264) != v30) {
          free(v30);
        }
        v29 -= 280;
      }
      while (v29);
    }
    goto LABEL_12;
  }
  return a1;
}

void sub_1CBC19D7C(char **a1, unint64_t a2)
{
  if (HIDWORD(a2)) {
    sub_1CD0A88F0(a2);
  }
  uint64_t v3 = *((unsigned int *)a1 + 3);
  if (v3 == -1) {
    sub_1CD0A89A8(0xFFFFFFFFuLL);
  }
  unint64_t v4 = (2 * v3) | 1;
  if (v4 <= a2) {
    unint64_t v4 = a2;
  }
  if (v4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = v4;
  }
  uint64_t v6 = (char *)malloc_type_malloc(280 * v5, 0x4065EBACuLL);
  if (!v6) {
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  unsigned int v7 = v6;
  uint64_t v8 = *a1;
  unsigned int v9 = *((_DWORD *)a1 + 2);
  if (v9)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 280 * v9;
    do
    {
      unint64_t v12 = &v7[v10];
      *(void *)unint64_t v12 = &v7[v10 + 16];
      *((void *)v12 + 1) = 0x800000000;
      if (*(_DWORD *)&v8[v10 + 8]) {
        unint64_t v12 = (char *)sub_1CBC19ED8((uint64_t)v12, (uint64_t)&v8[v10]);
      }
      *((void *)v12 + 34) = *(void *)&v8[v10 + 272];
      v10 += 280;
    }
    while (v11 != v10);
    uint64_t v8 = *a1;
    unsigned int v13 = *((_DWORD *)a1 + 2);
    if (v13)
    {
      uint64_t v14 = 280 * v13;
      do
      {
        uint64_t v15 = *(char **)&v8[v14 - 280];
        if (&v8[v14 - 264] != v15) {
          free(v15);
        }
        v14 -= 280;
      }
      while (v14);
      uint64_t v8 = *a1;
    }
  }
  if (v8 != (char *)(a1 + 2)) {
    free(v8);
  }
  *a1 = v7;
  *((_DWORD *)a1 + 3) = v5;
}

uint64_t sub_1CBC19ED8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = (const void *)(a2 + 16);
    unint64_t v4 = *(const void **)a2;
    if (v4 == v5)
    {
      unsigned int v7 = (_DWORD *)(a2 + 8);
      uint64_t v8 = *(unsigned int *)(a2 + 8);
      uint64_t v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if (v8) {
          memmove(*(void **)a1, v4, 32 * v8);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v8)
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v9) {
          memmove(*(void **)a1, v4, 32 * v9);
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *v7;
        if (v9 != v10) {
          memcpy((void *)(*(void *)a1 + 32 * v9), (const void *)(*(void *)a2 + 32 * v9), *(void *)a2 + 32 * v10 - (*(void *)a2 + 32 * v9));
        }
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      uint64_t v6 = *(void **)a1;
      if (*(void *)a1 != a1 + 16)
      {
        free(v6);
        unint64_t v4 = *(const void **)a2;
      }
      *(void *)a1 = v4;
      unsigned int v7 = (_DWORD *)(a2 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    _DWORD *v7 = 0;
  }
  return a1;
}

uint64_t sub_1CBC19FF4(uint64_t a1)
{
  unsigned int v2 = (void *)(a1 + 2584);
  uint64_t v3 = *(void **)(a1 + 2584);
  if (v3 != (void *)(a1 + 2600)) {
    free(v3);
  }
  unint64_t v4 = (void **)(a1 + 2544);
  uint64_t v5 = *(void **)(a1 + 2560);
  if (v5 != v2) {
    free(v5);
  }
  if (*v4 != (void *)(a1 + 2560)) {
    free(*v4);
  }
  uint64_t v6 = *(void ***)(a1 + 2520);
  if (v6 != v4) {
    free(v6);
  }
  unsigned int v7 = *(void **)(a1 + 2504);
  if (v7 != (void *)(a1 + 2520)) {
    free(v7);
  }
  for (uint64_t i = 0; i != -240; i -= 80)
  {
    uint64_t v9 = *(void **)(a1 + i + 2424);
    if ((void *)(a1 + i + 2440) != v9) {
      free(v9);
    }
  }
  uint64_t v10 = *(char **)(a1 + 8);
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  if (v11)
  {
    uint64_t v12 = 280 * v11;
    do
    {
      unsigned int v13 = *(char **)&v10[v12 - 280];
      if (&v10[v12 - 264] != v13) {
        free(v13);
      }
      v12 -= 280;
    }
    while (v12);
    uint64_t v10 = *(char **)(a1 + 8);
  }
  if (v10 != (char *)(a1 + 24)) {
    free(v10);
  }
  return a1;
}

uint64_t sub_1CBC1A0FC(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4) {
        memmove(*(void **)a1, *(const void **)a2, 32 * v4);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v5) {
        memmove(*(void **)a1, *(const void **)a2, 32 * v5);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6) {
        memcpy((void *)(*(void *)a1 + 32 * v5), (const void *)(*(void *)a2 + 32 * v5), *(void *)a2 + 32 * v6 - (*(void *)a2 + 32 * v5));
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t sub_1CBC1A1CC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v16 = a3;
  uint64_t v3 = a1 + 296;
  int v15 = *(_DWORD *)(a1 + 304) - 1;
  uint64_t v4 = *(void *)(a1 + 296) + 2704 * v15;
  int v5 = *(_DWORD *)v4;
  int v17 = a2;
  v18[0] = v5;
  v19[0] = v20;
  v19[1] = 0x800000000;
  if (*(_DWORD *)(v4 + 16)) {
    sub_1CBC1A4C0((uint64_t)v19, v4 + 8);
  }
  for (uint64_t i = 0; i != 60; i += 20)
  {
    unsigned int v7 = &v18[i];
    uint64_t v8 = v4 + i * 4;
    *((void *)v7 + 283) = &v20[i * 4 + 2256];
    *((void *)v7 + 284) = 0x600000000;
    if (v18 != (_DWORD *)v4)
    {
      unint64_t v9 = *(unsigned int *)(v8 + 2272);
      if (*(_DWORD *)(v8 + 2272))
      {
        if (v9 >= 7) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memcpy(&v20[i * 4 + 2256], *(const void **)(v8 + 2264), 8 * *(unsigned int *)(v8 + 2272));
        v7[568] = v9;
      }
    }
    v7[582] = *(_DWORD *)(v8 + 2328);
    v7[584] = *(_DWORD *)(v8 + 2336);
  }
  v21[0] = v22;
  v21[1] = 0;
  if (*(_DWORD *)(v4 + 2512)) {
    sub_1CD41B6B0((uint64_t)v21, v4 + 2504);
  }
  v22[0] = v23;
  v22[2] = 0;
  v22[1] = 0;
  if (*(void *)(v4 + 2528)) {
    sub_1CD4271C0((uint64_t)v22, v4 + 2520);
  }
  v23[0] = v24;
  v23[1] = 0;
  if (*(_DWORD *)(v4 + 2552)) {
    sub_1CD41B6B0((uint64_t)v23, v4 + 2544);
  }
  v24[0] = v25;
  v24[2] = 0;
  v24[1] = 0;
  if (*(void *)(v4 + 2568)) {
    sub_1CD4271C0((uint64_t)v24, v4 + 2560);
  }
  v25[0] = v26;
  v25[1] = 0;
  if (*(_DWORD *)(v4 + 2592)) {
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v25, v4 + 2584);
  }
  v26[0] = *(_OWORD *)(v4 + 2600);
  long long v10 = *(_OWORD *)(v4 + 2616);
  long long v11 = *(_OWORD *)(v4 + 2632);
  long long v12 = *(_OWORD *)(v4 + 2664);
  v26[3] = *(_OWORD *)(v4 + 2648);
  v26[4] = v12;
  v26[1] = v10;
  v26[2] = v11;
  int v14 = 1;
  sub_1CBC1B280(v3, (uint64_t)v18, &v14, &v15, &v17, &v16);
  return sub_1CBC19FF4((uint64_t)v18);
}

uint64_t sub_1CBC1A440(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)a1 & 4) == 0)
  {
    uint64_t v1 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      uint64_t v1 = a1;
      do
        uint64_t v1 = *(void *)(v1 + 8);
      while ((*(_WORD *)(v1 + 44) & 8) != 0);
    }
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v2 == v3 + 48)
  {
    uint64_t v4 = *(void **)(v3 + 8);
    uint64_t v5 = v4[4] + 320;
    while (1)
    {
      if (v4 == (void *)v5) {
        return 0;
      }
      if (v4 + 6 != (void *)(v4[6] & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      uint64_t v4 = (void *)v4[1];
    }
    return v4[7];
  }
  return v2;
}

uint64_t sub_1CBC1A4C0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = *(unsigned int *)(a2 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
      {
        uint64_t v9 = *(void *)a2;
        long long v10 = *(char **)a1;
        uint64_t v11 = 280 * v4;
        do
        {
          sub_1CBC1A0FC((uint64_t)v10, v9);
          *((void *)v10 + 34) = *(void *)(v9 + 272);
          v9 += 280;
          v10 += 280;
          v11 -= 280;
        }
        while (v11);
        LODWORD(v5) = *(_DWORD *)(a1 + 8);
        long long v12 = *(char **)a1;
      }
      else
      {
        long long v12 = *(char **)a1;
        long long v10 = *(char **)a1;
      }
      uint64_t v23 = &v12[280 * v5];
      if (v23 != v10)
      {
        do
        {
          uint64_t v24 = v23 - 280;
          uint64_t v25 = (char *)*((void *)v23 - 35);
          if (v23 - 264 != v25) {
            free(v25);
          }
          uint64_t v23 = v24;
        }
        while (v24 != v10);
      }
      goto LABEL_30;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if (v5)
      {
        uint64_t v13 = *(void *)a2;
        uint64_t v14 = *(void *)a1;
        uint64_t v15 = 280 * v5;
        do
        {
          uint64_t v16 = sub_1CBC1A0FC(v14, v13);
          *(void *)(v16 + 272) = *(void *)(v13 + 272);
          v13 += 280;
          uint64_t v14 = v16 + 280;
          v15 -= 280;
        }
        while (v15);
LABEL_19:
        uint64_t v17 = *(unsigned int *)(a2 + 8);
        if (v5 != v17)
        {
          uint64_t v18 = *(void *)a2;
          unsigned int v19 = *(char **)a1;
          uint64_t v20 = 280 * v5;
          uint64_t v21 = 280 * v17;
          do
          {
            uint64_t v22 = &v19[v20];
            *(void *)uint64_t v22 = &v19[v20 + 16];
            *((void *)v22 + 1) = 0x800000000;
            if (*(_DWORD *)(v18 + v20 + 8)) {
              uint64_t v22 = (char *)sub_1CBC1A0FC((uint64_t)v22, v18 + v20);
            }
            *((void *)v22 + 34) = *(void *)(v18 + v20 + 272);
            v19 += 280;
            v21 -= 280;
            v18 += 280;
          }
          while (v20 != v21);
        }
LABEL_30:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      if (v5)
      {
        uint64_t v6 = *(char **)a1;
        uint64_t v7 = 280 * v5;
        do
        {
          uint64_t v8 = *(char **)&v6[v7 - 280];
          if (&v6[v7 - 264] != v8) {
            free(v8);
          }
          v7 -= 280;
        }
        while (v7);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1CBC19D7C((char **)a1, v4);
    }
    uint64_t v5 = 0;
    goto LABEL_19;
  }
  return a1;
}

void sub_1CBC1A6A0(uint64_t a1, _DWORD *a2)
{
  int v4 = a2[1];
  uint64_t v5 = a1 + 80 * v4;
  uint64_t v6 = (uint64_t *)(v5 + 2264);
  unint64_t v7 = *(void *)(a2 + 1);
  unsigned int v8 = a2[3];
  unsigned int v9 = *(_DWORD *)(v5 + 2328);
  if (v8 >= v9)
  {
    unsigned int v10 = v8 + 1;
    int v11 = v9 & 0x3F;
    uint64_t v12 = *((unsigned int *)v6 + 2);
    if (v11) {
      *(void *)(*v6 + 8 * v12 - 8) &= ~(-1 << v11);
    }
    unsigned int v13 = v12;
    *((_DWORD *)v6 + 16) = v10;
    unsigned int v14 = v8 + 64;
    if (v12 != (v8 + 64) >> 6)
    {
      uint64_t v15 = v14 >> 6;
      if (v12 > v15)
      {
        *((_DWORD *)v6 + 2) = v15;
        unsigned int v13 = v14 >> 6;
      }
      else
      {
        if (v15 > *((_DWORD *)v6 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v15 != v12) {
          bzero((void *)(*v6 + 8 * v12), 8 * (v15 - v12));
        }
        unsigned int v13 = v15;
        *((_DWORD *)v6 + 2) = v15;
        unsigned int v10 = *((_DWORD *)v6 + 16);
      }
    }
    int v16 = v10 & 0x3F;
    if (v16) {
      *(void *)(*v6 + 8 * v13 - 8) &= ~(-1 << v16);
    }
  }
  uint64_t v17 = v7;
  if (*a2 != 3)
  {
    if (*a2 == 2)
    {
      unint64_t v18 = HIDWORD(v7);
      if (v8 != HIDWORD(v7))
      {
        int v19 = 0;
        uint64_t v20 = *v6;
        while (1)
        {
          unint64_t v21 = v7 >> 38;
          unint64_t v22 = *(void *)(v20 + 8 * (v7 >> 38));
          if (v17 == 1)
          {
            uint64_t v23 = 1 << v18;
            *(void *)(v20 + 8 * v21) = v22 & ~v23;
            if ((v22 & v23) != 0)
            {
              LODWORD(v24) = 0;
              goto LABEL_24;
            }
          }
          else
          {
            char v25 = v18 & 0x3E;
            uint64_t v26 = 1 << (v18 & 0x3E);
            if ((v22 & v26) != 0)
            {
              unint64_t v27 = v22 & ~(1 << v18);
              *(void *)(v20 + 8 * v21) = v27;
LABEL_22:
              BOOL v28 = (v27 & v26) == 0;
              uint64_t v24 = (v27 >> (v25 | 1u)) & 1;
              if (!v28) {
                LODWORD(v24) = 1;
              }
LABEL_24:
              v19 -= v24 ^ 1;
              goto LABEL_25;
            }
            unint64_t v27 = v22 & ~(1 << v18);
            *(void *)(v20 + 8 * v21) = v27;
            if ((v22 >> (v25 | 1u))) {
              goto LABEL_22;
            }
          }
LABEL_25:
          unint64_t v7 = (v7 & 0xFFFFFFFF00000000) + 0x100000000;
          unint64_t v18 = HIDWORD(v7);
          if (v8 == HIDWORD(v7)) {
            goto LABEL_35;
          }
        }
      }
    }
    goto LABEL_28;
  }
  unint64_t v29 = HIDWORD(v7);
  if (v8 == HIDWORD(v7))
  {
LABEL_28:
    int v19 = 0;
    goto LABEL_35;
  }
  int v19 = 0;
  uint64_t v30 = *v6;
  do
  {
    unint64_t v31 = *(void *)(v30 + 8 * (v7 >> 38));
    uint64_t v32 = (v31 >> (v29 & 0x3E | 1)) & 1;
    if ((v31 >> (v29 & 0x3E))) {
      LODWORD(v32) = 1;
    }
    if (v17 == 1) {
      LODWORD(v32) = (v31 >> v29) & 1;
    }
    v19 += v32 ^ 1;
    *(void *)(v30 + 8 * (v7 >> 38)) = v31 | (1 << v29);
    unint64_t v7 = (v7 & 0xFFFFFFFF00000000) + 0x100000000;
    unint64_t v29 = HIDWORD(v7);
  }
  while (v8 != HIDWORD(v7));
LABEL_35:
  *(_DWORD *)(a1 + 80 * v4 + 2336) += v19;
}

double sub_1CBC1A944(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  double v3 = 1.0;
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((a2 >> i))
      {
        uint64_t v5 = *((void *)a1 + 1);
        uint64_t v6 = (unsigned int *)(v5 + 280 * i);
        uint64_t v7 = v6[2];
        if (v7)
        {
          uint64_t v8 = 32 * v7;
          unsigned int v9 = (int *)(*(void *)v6 + 12);
          double v10 = 1.0;
          do
          {
            double v11 = (double)*(v9 - 2);
            int v12 = *v9;
            v9 += 8;
            double v13 = (double)v12;
            double v14 = (double)v12 - (v11 + -1.0);
            if ((double)v12 < 0.0) {
              double v13 = 0.0;
            }
            if (v14 < v13) {
              double v13 = v14;
            }
            double v10 = v10 * (1.0 - v13 / v14);
            v8 -= 32;
          }
          while (v8);
        }
        else
        {
          double v10 = 1.0;
        }
        double v3 = v3 * (1.0 - (1.0 - v10) * *(double *)(v5 + 280 * i + 272));
      }
    }
  }
  return 1.0 - v3;
}

unint64_t sub_1CBC1AA00(unsigned int *a1, unint64_t a2)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    do
    {
      if ((a2 >> v3))
      {
        uint64_t v5 = *((void *)a1 + 1) + 280 * v3;
        uint64_t v6 = *(unsigned int *)(v5 + 8);
        if (v6)
        {
          int v7 = 0;
          uint64_t v8 = 32 * v6;
          unsigned int v9 = (int *)(*(void *)v5 + 8);
          do
          {
            int v11 = *v9;
            v9 += 8;
            int v10 = v11;
            if (v11 > v7) {
              int v7 = v10;
            }
            v8 -= 32;
          }
          while (v8);
        }
        else
        {
          int v7 = 0;
        }
        if (v4 <= v7) {
          int v4 = v7;
        }
      }
      ++v3;
    }
    while (v3 != v2);
  }
  else
  {
    int v4 = 0;
  }
  if (v4 <= 10) {
    int v12 = 10;
  }
  else {
    int v12 = v4;
  }
  double v13 = sub_1CBC1A944(a1, a2);
  double v14 = round(v13 * 10.0);
  if (v13 == 0.0) {
    double v14 = (double)v4;
  }
  return (int)(round(v13 * (double)(v12 - v4 + 10)) + (double)v4) | ((unint64_t)(int)v14 << 32);
}

void sub_1CBC1AADC(uint64_t a1, int a2, int a3)
{
  int v3 = a2;
  v52[32] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(unsigned int *)(a1 + 2512);
  if (v5)
  {
    uint64_t v6 = *(_DWORD **)(a1 + 2504);
    uint64_t v7 = 4 * v5;
    do
    {
      *v6++ -= a2;
      v7 -= 4;
    }
    while (v7);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 2552);
  if (v8)
  {
    unsigned int v9 = *(_DWORD **)(a1 + 2544);
    uint64_t v10 = 4 * v8;
    do
    {
      *v9++ -= a2;
      v10 -= 4;
    }
    while (v10);
  }
  *(void *)(a1 + 2648) += a3;
  if (a2 >= 1)
  {
    do
    {
      uint64_t v11 = *(void *)(a1 + 8);
      unsigned int v12 = *(_DWORD *)(a1 + 16);
      double v13 = (uint64_t *)(v11 + 280 * v12);
      int v14 = 0x7FFFFFFF;
      if (v12)
      {
        uint64_t v15 = *(uint64_t **)(a1 + 8);
        do
        {
          uint64_t v16 = *((unsigned int *)v15 + 2);
          if (v16)
          {
            uint64_t v17 = *v15;
            uint64_t v18 = *v15 + 32 * v16;
            int v19 = 0x7FFFFFFF;
            do
            {
              uint64_t v20 = 0;
              uint64_t v50 = *(void **)(v17 + 4);
              LODWORD(v51) = *(_DWORD *)(v17 + 12);
              int v21 = 0x7FFFFFFF;
              do
              {
                int v22 = *(_DWORD *)((char *)&v50 + v20);
                if (v22 >= v21) {
                  int v23 = v21;
                }
                else {
                  int v23 = *(_DWORD *)((char *)&v50 + v20);
                }
                if (v22 > 0) {
                  int v21 = v23;
                }
                v20 += 4;
              }
              while (v20 != 12);
              if (v21 < v19) {
                int v19 = v21;
              }
              v17 += 32;
            }
            while (v17 != v18);
          }
          else
          {
            int v19 = 0x7FFFFFFF;
          }
          if (v19 < v14) {
            int v14 = v19;
          }
          v15 += 35;
        }
        while (v15 != v13);
      }
      if (v3 < v14) {
        int v14 = v3;
      }
      uint64_t v24 = v14;
      uint64_t v25 = 2600;
      for (uint64_t i = 2336; i != 2576; i += 80)
      {
        *(void *)(a1 + v25) += *(int *)(a1 + i) * (uint64_t)(int)v24;
        v25 += 8;
      }
      uint64_t v50 = v52;
      uint64_t v51 = 0x1000000000;
      if (v12)
      {
        int32x2_t v27 = vdup_n_s32(v24);
        do
        {
          BOOL v28 = *(_OWORD **)v11;
          uint64_t v29 = *(unsigned int *)(v11 + 8);
          if (!v29) {
            goto LABEL_52;
          }
          uint64_t v30 = 32 * v29;
          unint64_t v31 = (int32x2_t *)(v28 + 1);
          do
          {
            __int32 v32 = v31[-2].i32[1];
            int32x2_t v33 = vsub_s32(v31[-1], v27);
            v31[-1] = v33;
            __int32 v34 = v33.i32[0];
            __int32 v35 = v32 - v24;
            v31[-2].i32[1] = v35;
            if (!v35 && v31->i32[0] == 3)
            {
              if (v51 >= (unint64_t)HIDWORD(v51)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_OWORD *)v50 + v51) = *(_OWORD *)v31->i8;
              LODWORD(v51) = v51 + 1;
              __int32 v34 = v31[-1].i32[0];
            }
            if (!v34 && v31->i32[0] == 2)
            {
              if (v51 >= (unint64_t)HIDWORD(v51)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((_OWORD *)v50 + v51) = *(_OWORD *)v31->i8;
              LODWORD(v51) = v51 + 1;
            }
            v31 += 4;
            v30 -= 32;
          }
          while (v30);
          BOOL v28 = *(_OWORD **)v11;
          uint64_t v36 = *(unsigned int *)(v11 + 8);
          if (v36)
          {
            unint64_t v37 = 0;
            int v38 = &v28[2 * v36];
            uint64_t v39 = 32 * v36;
            uint64_t v40 = 32 * v36 - 32;
            uint64_t v41 = v40;
            while (1)
            {
              double v42 = &v28[v37 / 0x10];
              if (!HIDWORD(v28[v37 / 0x10])) {
                break;
              }
              v37 += 32;
              v41 -= 32;
              if (v39 == v37)
              {
                double v42 = v38;
                goto LABEL_53;
              }
            }
            if (v40 != v37)
            {
              uint64_t v44 = v42 + 2;
              do
              {
                if (*((_DWORD *)v44 + 3))
                {
                  long long v45 = v44[1];
                  *double v42 = *v44;
                  v42[1] = v45;
                  v42 += 2;
                }
                v44 += 2;
                v41 -= 32;
              }
              while (v41);
              BOOL v28 = *(_OWORD **)v11;
            }
          }
          else
          {
LABEL_52:
            double v42 = v28;
          }
LABEL_53:
          unint64_t v43 = (unint64_t)((char *)v42 - (char *)v28) >> 5;
          *(_DWORD *)(v11 + 8) = v43;
          if (!v43) {
            *(void *)(v11 + 272) = 0;
          }
          v11 += 280;
        }
        while ((uint64_t *)v11 != v13);
        uint64_t v46 = v50;
        uint64_t v47 = v51;
        *(void *)(a1 + 2640) += v24;
        if (v47)
        {
          uint64_t v48 = 16 * v47;
          do
          {
            sub_1CBC1A6A0(a1, v46);
            v46 += 4;
            v48 -= 16;
          }
          while (v48);
          uint64_t v46 = v50;
        }
        if (v46 != (_DWORD *)v52) {
          free(v46);
        }
      }
      else
      {
        *(void *)(a1 + 2640) += v24;
      }
      BOOL v49 = __OFSUB__(v3, v24);
      v3 -= v24;
    }
    while (!((v3 < 0) ^ v49 | (v3 == 0)));
  }
}

uint64_t sub_1CBC1AE94(uint64_t *a1, unsigned int a2, int a3)
{
  uint64_t v6 = *((unsigned int *)a1 + 2);
  uint64_t v7 = a2 + 1;
  if (v6 <= a2 && v7 != v6)
  {
    int v9 = v7 - v6;
    if (v7 >= v6)
    {
      if (v7 > *((_DWORD *)a1 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memset_pattern16((void *)(*a1 + 4 * *((unsigned int *)a1 + 2)), &unk_1CDC7F450, 4 * (v7 - v6));
      LODWORD(v7) = v9 + *((_DWORD *)a1 + 2);
    }
    *((_DWORD *)a1 + 2) = v7;
    LODWORD(v6) = v7;
  }
  uint64_t v10 = *a1;
  int v11 = *(_DWORD *)(*a1 + 4 * a2);
  if (v11 <= a3) {
    return 0;
  }
  if (v6 <= a2)
  {
    uint64_t v12 = a2 + 1;
    int v13 = v12 - v6;
    if (v12 != v6)
    {
      if (v12 >= v6)
      {
        if (v12 > *((_DWORD *)a1 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        memset_pattern16((void *)(v10 + 4 * v6), &unk_1CDC7F450, 4 * (v12 - v6));
        LODWORD(v12) = v13 + *((_DWORD *)a1 + 2);
      }
      *((_DWORD *)a1 + 2) = v12;
      int v11 = *(_DWORD *)(v10 + 4 * a2);
    }
  }
  return (v11 - a3);
}

void sub_1CBC1B004(uint64_t *a1, unsigned int a2, int a3, char a4)
{
  uint64_t v8 = *((unsigned int *)a1 + 2);
  uint64_t v9 = a2 + 1;
  if (v8 > a2 || v9 == v8)
  {
    uint64_t v9 = *((unsigned int *)a1 + 2);
  }
  else
  {
    int v11 = v9 - v8;
    if (v9 >= v8)
    {
      if (v9 > *((_DWORD *)a1 + 3)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memset_pattern16((void *)(*a1 + 4 * *((unsigned int *)a1 + 2)), &unk_1CDC7F450, 4 * (v9 - v8));
      uint64_t v9 = (*((_DWORD *)a1 + 2) + v11);
    }
    *((_DWORD *)a1 + 2) = v9;
    LODWORD(v8) = v9;
  }
  uint64_t v12 = *a1;
  if (*(_DWORD *)(*a1 + 4 * a2) <= a3) {
    int v13 = a3;
  }
  else {
    int v13 = *(_DWORD *)(*a1 + 4 * a2);
  }
  if (v8 <= a2)
  {
    uint64_t v14 = a2 + 1;
    if (v8 != v14)
    {
      if (v8 <= v14)
      {
        if (v14 > *((_DWORD *)a1 + 3)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        if (v14 != v9)
        {
          memset_pattern16((void *)(v12 + 4 * v9), &unk_1CDC7F450, 4 * (v14 - v9));
          LODWORD(v8) = *((_DWORD *)a1 + 2);
        }
        LODWORD(v14) = v14 - v9 + v8;
      }
      *((_DWORD *)a1 + 2) = v14;
    }
  }
  *(_DWORD *)(v12 + 4 * a2) = v13;
  unint64_t v15 = a1[3];
  if (v15 <= a2)
  {
    unint64_t v16 = a2 + 1;
    if (v16 != v15)
    {
      if (v16 >= v15) {
        sub_1CD42762C(a1 + 2, v16 - v15);
      }
      else {
        a1[3] = v16;
      }
    }
  }
  *(unsigned char *)(a1[2] + a2) = a4;
}

double sub_1CBC1B194(uint64_t a1, int a2, uint64_t a3, long long *a4)
{
  uint64_t v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    long long v14 = *a4;
    uint64_t v9 = *(unsigned int *)(a3 + 4);
    int v11 = a2 - 1;
    unint64_t v10 = (unint64_t)&unk_1CDC7F000;
    LODWORD(v10) = vcvtpd_s64_f64((double)(int)v9 / 1.2);
    unint64_t v12 = v10 | (v9 << 32);
    unsigned int v13 = vcvtpd_s64_f64((double)(int)v9 * 1.2);
    *(void *)&double result = sub_1CB8BBE7C((unint64_t *)a1, (unint64_t)&v11).n128_u64[0];
  }
  else
  {
    uint64_t v5 = *(void *)a1 + 32 * v4;
    *(void *)(v5 + 4) = 0x8000000080000000;
    *(_DWORD *)(v5 + 12) = 0x80000000;
    *(_OWORD *)(v5 + 16) = *a4;
    *(_DWORD *)uint64_t v5 = a2 - 1;
    uint64_t v6 = *(unsigned int *)(a3 + 4);
    unint64_t v7 = (unint64_t)&unk_1CDC7F000;
    LODWORD(v7) = vcvtpd_s64_f64((double)(int)v6 / 1.2);
    double result = (double)(int)v6 * 1.2;
    *(void *)(v5 + 4) = v7 | (v6 << 32);
    *(_DWORD *)(v5 + 12) = vcvtpd_s64_f64(result);
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

uint64_t sub_1CBC1B264(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a2 < *a1;
  }
}

void sub_1CBC1B280(uint64_t a1, uint64_t a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  unsigned int v13 = *(_DWORD *)(a1 + 8);
  uint64_t v12 = *(unsigned int *)(a1 + 12);
  if (v13 >= v12)
  {
    if (v12 == -1) {
      sub_1CD0A89A8(0xFFFFFFFFuLL);
    }
    unint64_t v25 = (2 * v12) | 1;
    if (v25 >= 0xFFFFFFFF) {
      uint64_t v26 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v26 = v25;
    }
    int32x2_t v27 = (char *)malloc_type_malloc(2704 * v26, 0x4065EBACuLL);
    if (!v27) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    uint64_t v28 = (uint64_t)v27;
    int v48 = v26;
    unsigned int v29 = *(_DWORD *)(a1 + 8);
    uint64_t v30 = &v27[2704 * v29];
    int v44 = *a4;
    int v46 = *a3;
    int v42 = *a5;
    uint64_t v40 = *a6;
    *(_DWORD *)uint64_t v30 = *(_DWORD *)a2;
    *((void *)v30 + 1) = v30 + 24;
    *((void *)v30 + 2) = 0x800000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CBC1A4C0((uint64_t)(v30 + 8), a2 + 8);
    }
    for (uint64_t i = 0; i != 240; i += 80)
    {
      __int32 v32 = &v30[i];
      uint64_t v33 = a2 + i;
      __int32 v34 = &v30[i + 2280];
      *((void *)v32 + 283) = v34;
      *((void *)v32 + 284) = 0x600000000;
      if (v30 != (char *)a2)
      {
        unint64_t v35 = *(unsigned int *)(v33 + 2272);
        if (*(_DWORD *)(v33 + 2272))
        {
          if (v35 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v34, *(const void **)(v33 + 2264), 8 * *(unsigned int *)(v33 + 2272));
          *((_DWORD *)v32 + 568) = v35;
        }
      }
      *((_DWORD *)v32 + 582) = *(_DWORD *)(v33 + 2328);
      *((_DWORD *)v32 + 584) = *(_DWORD *)(v33 + 2336);
    }
    *((void *)v30 + 313) = v30 + 2520;
    *((void *)v30 + 314) = 0;
    if (*(_DWORD *)(a2 + 2512)) {
      sub_1CD41B6B0((uint64_t)(v30 + 2504), a2 + 2504);
    }
    *((void *)v30 + 315) = v30 + 2544;
    *((void *)v30 + 317) = 0;
    *((void *)v30 + 316) = 0;
    if (*(void *)(a2 + 2528)) {
      sub_1CD4271C0((uint64_t)(v30 + 2520), a2 + 2520);
    }
    *((void *)v30 + 318) = v30 + 2560;
    *((void *)v30 + 319) = 0;
    if (*(_DWORD *)(a2 + 2552)) {
      sub_1CD41B6B0((uint64_t)(v30 + 2544), a2 + 2544);
    }
    *((void *)v30 + 320) = v30 + 2584;
    *((void *)v30 + 322) = 0;
    *((void *)v30 + 321) = 0;
    if (*(void *)(a2 + 2568)) {
      sub_1CD4271C0((uint64_t)(v30 + 2560), a2 + 2560);
    }
    *((void *)v30 + 323) = v30 + 2600;
    *((void *)v30 + 324) = 0;
    if (*(_DWORD *)(a2 + 2592)) {
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)(v30 + 2584), a2 + 2584);
    }
    *(_OWORD *)(v30 + 2600) = *(_OWORD *)(a2 + 2600);
    long long v36 = *(_OWORD *)(a2 + 2616);
    long long v37 = *(_OWORD *)(a2 + 2632);
    long long v38 = *(_OWORD *)(a2 + 2664);
    *(_OWORD *)(v30 + 2648) = *(_OWORD *)(a2 + 2648);
    *(_OWORD *)(v30 + 2664) = v38;
    *(_OWORD *)(v30 + 2616) = v36;
    *(_OWORD *)(v30 + 2632) = v37;
    uint64_t v39 = v28 + 2704 * v29;
    *(_DWORD *)(v39 + 2680) = v46;
    *(_DWORD *)(v39 + 2684) = v44;
    *(_DWORD *)(v39 + 2688) = v42;
    *(void *)(v39 + 2696) = v40;
    sub_1CBC19810(a1, v28);
    if (*(void *)a1 != a1 + 16) {
      free(*(void **)a1);
    }
    *(void *)a1 = v28;
    *(_DWORD *)(a1 + 12) = v48;
  }
  else
  {
    long long v14 = *(char **)a1;
    uint64_t v15 = *(void *)a1 + 2704 * v13;
    int v45 = *a4;
    int v47 = *a3;
    int v43 = *a5;
    uint64_t v41 = *a6;
    *(_DWORD *)uint64_t v15 = *(_DWORD *)a2;
    *(void *)(v15 + 8) = v15 + 24;
    *(void *)(v15 + 16) = 0x800000000;
    if (*(_DWORD *)(a2 + 16)) {
      sub_1CBC1A4C0(v15 + 8, a2 + 8);
    }
    for (uint64_t j = 0; j != 240; j += 80)
    {
      uint64_t v17 = v15 + j;
      uint64_t v18 = a2 + j;
      int v19 = (void *)(v15 + j + 2280);
      *(void *)(v17 + 2264) = v19;
      *(void *)(v17 + 2272) = 0x600000000;
      if (v15 != a2)
      {
        unint64_t v20 = *(unsigned int *)(v18 + 2272);
        if (*(_DWORD *)(v18 + 2272))
        {
          if (v20 >= 7) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          memcpy(v19, *(const void **)(v18 + 2264), 8 * *(unsigned int *)(v18 + 2272));
          *(_DWORD *)(v17 + 2272) = v20;
        }
      }
      *(_DWORD *)(v17 + 2328) = *(_DWORD *)(v18 + 2328);
      *(_DWORD *)(v17 + 2336) = *(_DWORD *)(v18 + 2336);
    }
    *(void *)(v15 + 2504) = v15 + 2520;
    *(void *)(v15 + 2512) = 0;
    if (*(_DWORD *)(a2 + 2512)) {
      sub_1CD41B6B0(v15 + 2504, a2 + 2504);
    }
    *(void *)(v15 + 2520) = v15 + 2544;
    *(void *)(v15 + 2536) = 0;
    *(void *)(v15 + 2528) = 0;
    if (*(void *)(a2 + 2528)) {
      sub_1CD4271C0(v15 + 2520, a2 + 2520);
    }
    *(void *)(v15 + 2544) = v15 + 2560;
    *(void *)(v15 + 2552) = 0;
    if (*(_DWORD *)(a2 + 2552)) {
      sub_1CD41B6B0(v15 + 2544, a2 + 2544);
    }
    *(void *)(v15 + 2560) = v15 + 2584;
    *(void *)(v15 + 2576) = 0;
    *(void *)(v15 + 2568) = 0;
    if (*(void *)(a2 + 2568)) {
      sub_1CD4271C0(v15 + 2560, a2 + 2560);
    }
    *(void *)(v15 + 2584) = v15 + 2600;
    *(void *)(v15 + 2592) = 0;
    if (*(_DWORD *)(a2 + 2592)) {
      llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v15 + 2584, a2 + 2584);
    }
    *(_OWORD *)(v15 + 2600) = *(_OWORD *)(a2 + 2600);
    long long v21 = *(_OWORD *)(a2 + 2616);
    long long v22 = *(_OWORD *)(a2 + 2632);
    long long v23 = *(_OWORD *)(a2 + 2664);
    *(_OWORD *)(v15 + 2648) = *(_OWORD *)(a2 + 2648);
    *(_OWORD *)(v15 + 2664) = v23;
    *(_OWORD *)(v15 + 2616) = v21;
    *(_OWORD *)(v15 + 2632) = v22;
    uint64_t v24 = &v14[2704 * v13];
    *((_DWORD *)v24 + 670) = v47;
    *((_DWORD *)v24 + 671) = v45;
    *((_DWORD *)v24 + 672) = v43;
    *((void *)v24 + 337) = v41;
  }
  ++*(_DWORD *)(a1 + 8);
}

float64x2_t sub_1CBC1B760(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = a2[4];
  long long v5 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v5;
  do
  {
    *(void *)(a1 + v3) -= *(void *)(a3 + v3);
    v3 += 8;
  }
  while (v3 != 24);
  *(void *)(a1 + 24) -= *(void *)(a3 + 24);
  *(_DWORD *)(a1 + 32) -= *(_DWORD *)(a3 + 32);
  *(int64x2_t *)(a1 + 40) = vsubq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a3 + 40));
  float64x2_t result = vsubq_f64(*(float64x2_t *)(a1 + 56), *(float64x2_t *)(a3 + 56));
  *(float64x2_t *)(a1 + 56) = result;
  *(void *)(a1 + 72) -= *(void *)(a3 + 72);
  return result;
}

double sub_1CBC1B7EC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  do
  {
    *(void *)(a1 + v3) = llround((double)*(uint64_t *)(a2 + v3) * a3);
    v3 += 8;
  }
  while (v3 != 24);
  *(void *)(a1 + 24) = llround((double)*(uint64_t *)(a2 + 24) * a3);
  *(_DWORD *)(a1 + 32) = llround((double)*(int *)(a2 + 32) * a3);
  *(int64x2_t *)(a1 + 40) = vcvtq_s64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_s64(*(int64x2_t *)(a2 + 40)), a3)));
  *(float64x2_t *)(a1 + 56) = vmulq_n_f64(*(float64x2_t *)(a2 + 56), a3);
  double result = (double)*(uint64_t *)(a2 + 72) * a3;
  *(void *)(a1 + 72) = llround(result);
  return result;
}

uint64_t sub_1CBC1B87C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  long long v4 = a1;
  uint64_t v5 = *a1;
  unsigned int v6 = *((_DWORD *)a1 + 2);
  uint64_t v29 = *a1 + 2704 * v6;
  if (v29 == a3)
  {
    uint64_t v8 = a2;
  }
  else
  {
    uint64_t v7 = a3;
    uint64_t v8 = a2;
    do
    {
      *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
      sub_1CBC19AA4(v8 + 8, v7 + 8);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v30 = v7;
      do
      {
        uint64_t v11 = v8 + v9;
        uint64_t v12 = v7 + v9;
        if (v8 != v7)
        {
          unsigned int v13 = (void **)(v11 + 2264);
          long long v14 = *(void **)(v12 + 2264);
          if ((void *)(v12 + 2280) == v14)
          {
            uint64_t v15 = (_DWORD *)(v7 + v9 + 2272);
            uint64_t v16 = *v15;
            uint64_t v17 = v8;
            uint64_t v18 = v8 + v9;
            uint64_t v19 = *(unsigned int *)(v18 + 2272);
            if (v19 < v16)
            {
              if (*(_DWORD *)(v18 + 2276) < v16)
              {
                *(_DWORD *)(v18 + 2272) = 0;
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              if (v19) {
                memmove(*v13, v14, 8 * v19);
              }
              else {
                uint64_t v19 = 0;
              }
              uint64_t v20 = *v15;
              if (v19 != v20) {
                memcpy((char *)*v13 + 8 * v19, (const void *)(*(void *)(v12 + 2264) + 8 * v19), 8 * v20 - 8 * v19);
              }
            }
            else if (v16)
            {
              memmove(*v13, v14, 8 * v16);
            }
            *(_DWORD *)(v18 + 2272) = v16;
            uint64_t v8 = v17;
            uint64_t v7 = v30;
          }
          else
          {
            if ((void *)(v8 + v9 + 2280) != *v13)
            {
              free(*v13);
              long long v14 = *(void **)(v12 + 2264);
            }
            *unsigned int v13 = v14;
            uint64_t v15 = (_DWORD *)(v7 + 80 * v10 + 2272);
            *(void *)(v8 + v9 + 2272) = *(void *)(v7 + v9 + 2272);
            *(void *)(v12 + 2264) = v12 + 2280;
            *(_DWORD *)(v7 + v9 + 2276) = 0;
          }
          *uint64_t v15 = 0;
        }
        *(_DWORD *)(v11 + 2328) = *(_DWORD *)(v12 + 2328);
        *(_DWORD *)(v11 + 2336) = *(_DWORD *)(v12 + 2336);
        ++v10;
        v9 += 80;
      }
      while (v9 != 240);
      sub_1CD427714(v8 + 2504, v7 + 2504);
      sub_1CD427798((void *)(v8 + 2520), (void *)(v7 + 2520));
      sub_1CD427714(v8 + 2544, v7 + 2544);
      sub_1CD427798((void *)(v8 + 2560), (void *)(v7 + 2560));
      sub_1CD427714(v8 + 2584, v7 + 2584);
      *(_OWORD *)(v8 + 2600) = *(_OWORD *)(v7 + 2600);
      long long v21 = *(_OWORD *)(v7 + 2616);
      long long v22 = *(_OWORD *)(v7 + 2632);
      long long v23 = *(_OWORD *)(v7 + 2664);
      *(_OWORD *)(v8 + 2648) = *(_OWORD *)(v7 + 2648);
      *(_OWORD *)(v8 + 2664) = v23;
      *(_OWORD *)(v8 + 2616) = v21;
      *(_OWORD *)(v8 + 2632) = v22;
      long long v24 = *(_OWORD *)(v7 + 2680);
      *(void *)(v8 + 2696) = *(void *)(v7 + 2696);
      *(_OWORD *)(v8 + 2680) = v24;
      v7 += 2704;
      v8 += 2704;
    }
    while (v7 != v29);
    long long v4 = a1;
    uint64_t v3 = a2;
    uint64_t v5 = *a1;
    unsigned int v6 = *((_DWORD *)a1 + 2);
  }
  uint64_t v25 = v5 + 2704 * v6;
  if (v25 != v8)
  {
    do
      uint64_t v25 = sub_1CBC19FF4(v25 - 2704);
    while (v25 != v8);
    uint64_t v5 = *v4;
  }
  *((_DWORD *)v4 + 2) = -76242023 * ((unint64_t)(v8 - v5) >> 4);
  return v3;
}

float64x2_t sub_1CBC1BB30(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 24; i += 8)
    *(void *)(a1 + i) += *(void *)(a2 + i);
  *(void *)(a1 + 24) += *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) += *(_DWORD *)(a2 + 32);
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), *(int64x2_t *)(a2 + 40));
  float64x2_t result = vaddq_f64(*(float64x2_t *)(a2 + 56), *(float64x2_t *)(a1 + 56));
  *(float64x2_t *)(a1 + 56) = result;
  *(void *)(a1 + 72) += *(void *)(a2 + 72);
  return result;
}

uint64_t sub_1CBC1BBA4()
{
  *(void *)&long long v3 = "Run AGX3 Static Sim and Print Stats";
  *((void *)&v3 + 1) = 35;
  char v1 = 0;
  uint64_t v2 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCC1B30, "print-agx3-static-sim-stats", &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1B30, &dword_1CB82C000);
}

uint64_t sub_1CBC1BC24(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2 > 329)
  {
    if (a2 == 330)
    {
      int v13 = *(_DWORD *)(a4 + 28);
      if (v13 == 1 || v13 == 2 || v13 == 3)
      {
        uint64_t v14 = *(void *)(a3 + 32);
        if (*(unsigned char *)v14
          || *(unsigned char *)(v14 + 32)
          || (*(_DWORD *)(v14 + 4) - 1) < 0x3FFFFFFF
          || (*(_DWORD *)(v14 + 36) - 1) <= 0x3FFFFFFE)
        {
          return 364;
        }
        else
        {
          return 363;
        }
      }
    }
  }
  else
  {
    if (a2 > 306)
    {
      switch(a2)
      {
        case 307:
        case 309:
          int v5 = *(_DWORD *)(a4 + 28);
          if (v5 != 3 && v5 != 2) {
            goto LABEL_6;
          }
          goto LABEL_7;
        case 308:
          int v5 = *(_DWORD *)(a4 + 28);
          if (v5 == 2 || v5 == 3) {
            goto LABEL_7;
          }
LABEL_6:
          if (v5 != 1) {
            goto LABEL_178;
          }
LABEL_7:
          int v6 = **(unsigned __int16 **)(a3 + 16);
          unsigned int v7 = sub_1CBDA6464(v6, 0x11u);
          uint64_t v8 = *(void *)(a3 + 32);
          if (!*(unsigned char *)(v8 + 32 * v7)
            && *(unsigned char *)(v8 + 32 * (v7 + 1)) == 1
            && (*(unsigned char *)(v8 + 32 * (v7 + 1) + 16) & 1) != 0)
          {
            return 359;
          }
          unsigned int v9 = sub_1CBDA6464(v6, 4u);
          if (!*(unsigned char *)(v8 + 32 * v9) && *(unsigned char *)(v8 + 32 * (v9 + 1)) == 1)
          {
            BOOL v10 = (*(void *)(v8 + 32 * (v9 + 1) + 16) & 1) == 0;
            unsigned int v11 = 359;
            goto LABEL_13;
          }
          return 360;
        case 310:
        case 311:
        case 312:
          int v20 = *(_DWORD *)(a4 + 28);
          if (v20 != 2 && v20 != 3) {
            goto LABEL_38;
          }
          goto LABEL_39;
        case 313:
          int v20 = *(_DWORD *)(a4 + 28);
          if (v20 == 3 || v20 == 2) {
            goto LABEL_39;
          }
LABEL_38:
          if (v20 != 1) {
            goto LABEL_178;
          }
LABEL_39:
          int v21 = **(unsigned __int16 **)(a3 + 16);
          unsigned int v22 = sub_1CBDA6464(v21, 0x11u);
          uint64_t v23 = *(void *)(a3 + 32);
          if (!*(unsigned char *)(v23 + 32 * v22)
            && *(unsigned char *)(v23 + 32 * (v22 + 1)) == 1
            && (*(unsigned char *)(v23 + 32 * (v22 + 1) + 16) & 1) != 0
            || (unsigned int v24 = sub_1CBDA6464(v21, 4u), !*(unsigned char *)(v23 + 32 * v24))
            && *(unsigned char *)(v23 + 32 * (v24 + 1)) == 1
            && (*(unsigned char *)(v23 + 32 * (v24 + 1) + 16) & 1) != 0)
          {
            uint64_t result = 361;
          }
          else
          {
            unsigned int v25 = sub_1CBDA6464(v21, 0x14u);
            if (!*(unsigned char *)(v23 + 32 * v25) && *(unsigned char *)(v23 + 32 * (v25 + 1)) == 1)
            {
              BOOL v10 = (*(void *)(v23 + 32 * (v25 + 1) + 16) & 1) == 0;
              unsigned int v11 = 361;
              goto LABEL_13;
            }
            uint64_t result = 362;
          }
          break;
        default:
          goto LABEL_178;
      }
      return result;
    }
    switch(a2)
    {
      case 150:
        int v69 = *(_DWORD *)(a4 + 28);
        if (v69 != 2 && v69 != 3 && v69 != 1) {
          break;
        }
        int v70 = **(unsigned __int16 **)(a3 + 16);
        if ((sub_1CBE52E8C(v70) & 0xFF00000000) == 0) {
          goto LABEL_183;
        }
        BOOL v54 = (*(void *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v70, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
        unsigned int v55 = 333;
        goto LABEL_125;
      case 151:
        int v15 = *(_DWORD *)(a4 + 28);
        if (v15 == 1)
        {
          uint64_t v16 = **(unsigned __int16 **)(a3 + 16);
          if ((sub_1CBE52E8C(v16) & 0xFF00000000) != 0)
          {
            unsigned int v28 = sub_1CBDA6464(v16, 0x2Fu);
            uint64_t v18 = *(void *)(a3 + 32);
            if ((*(void *)(v18 + 32 * v28 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
            {
              int v29 = sub_1CBDB2780(v16, 2, 0);
              if (v29 != 9 && v29 != 2) {
                return 335;
              }
            }
            goto LABEL_65;
          }
          goto LABEL_183;
        }
        if (v15 != 2 && v15 != 3) {
          break;
        }
        uint64_t v16 = **(unsigned __int16 **)(a3 + 16);
        if ((sub_1CBE52E8C(v16) & 0xFF00000000) == 0) {
          goto LABEL_183;
        }
        unsigned int v17 = sub_1CBDA6464(v16, 0x2Fu);
        uint64_t v18 = *(void *)(a3 + 32);
        if ((*(void *)(v18 + 32 * v17 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
        {
          int v19 = sub_1CBDB2780(v16, 2, 0);
          if (v19 != 9 && v19 != 2) {
            return 335;
          }
        }
LABEL_65:
        if ((*(void *)(v18 + 32 * sub_1CBDA6464(v16, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
        {
          int v42 = sub_1CBDB2780(v16, 2, 0);
          if (v42 != 9 && v42 != 2) {
            return 336;
          }
        }
        if ((*(void *)(v18 + 32 * sub_1CBDA6464(v16, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) != 4
          || (int v43 = sub_1CBDB2780(v16, 2, 0), result = 337, v43 != 2) && v43 != 9)
        {
          if ((*(void *)(v18 + 32 * sub_1CBDA6464(v16, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4) {
            return 338;
          }
          int v31 = sub_1CBDB2780(v16, 2, 0);
          BOOL v10 = v31 == 2 || v31 == 9;
          unsigned int v11 = 339;
          goto LABEL_13;
        }
        return result;
      case 152:
        int v50 = *(_DWORD *)(a4 + 28);
        if (v50 != 1 && v50 != 2 && v50 != 3) {
          break;
        }
        int v51 = **(unsigned __int16 **)(a3 + 16);
        if ((sub_1CBE52E8C(v51) & 0xFF00000000) == 0) {
          goto LABEL_183;
        }
        BOOL v39 = (*(void *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v51, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
        unsigned int v40 = 334;
        unsigned int v41 = 341;
        goto LABEL_87;
      case 153:
        int v61 = *(_DWORD *)(a4 + 28);
        if (v61 != 3 && v61 != 2 && v61 != 1) {
          break;
        }
        int v62 = **(unsigned __int16 **)(a3 + 16);
        if ((sub_1CBE52E8C(v62) & 0xFF00000000) == 0) {
          goto LABEL_183;
        }
        BOOL v54 = (*(void *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v62, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
        unsigned int v55 = 342;
        goto LABEL_125;
      case 154:
        int v32 = *(_DWORD *)(a4 + 28);
        if (v32 == 2)
        {
          uint64_t v33 = **(unsigned __int16 **)(a3 + 16);
          if ((sub_1CBE52E8C(v33) & 0xFF00000000) != 0)
          {
            unsigned int v44 = sub_1CBDA6464(v33, 0x2Fu);
            uint64_t v35 = *(void *)(a3 + 32);
            if ((*(void *)(v35 + 32 * v44 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
            {
              int v45 = sub_1CBDB2780(v33, 2, 0);
              if (v45 != 9 && v45 != 2) {
                return 344;
              }
            }
            goto LABEL_103;
          }
LABEL_183:
          int v75 = "Unknown Opcode";
LABEL_179:
          llvm::report_fatal_error((llvm *)v75, (const llvm::Twine *)1);
        }
        if (v32 == 3 || v32 == 1)
        {
          uint64_t v33 = **(unsigned __int16 **)(a3 + 16);
          if ((sub_1CBE52E8C(v33) & 0xFF00000000) != 0)
          {
            unsigned int v34 = sub_1CBDA6464(v33, 0x2Fu);
            uint64_t v35 = *(void *)(a3 + 32);
            if ((*(void *)(v35 + 32 * v34 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
            {
              int v36 = sub_1CBDB2780(v33, 2, 0);
              if (v36 != 9 && v36 != 2) {
                return 344;
              }
            }
LABEL_103:
            if ((*(void *)(v35 + 32 * sub_1CBDA6464(v33, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
            {
              int v47 = sub_1CBDB2780(v33, 2, 0);
              if (v47 != 9 && v47 != 2) {
                return 345;
              }
            }
            if ((*(void *)(v35 + 32 * sub_1CBDA6464(v33, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) != 4
              || (v48 = sub_1CBDB2780(v33, 2, 0), uint64_t result = 346, v48 != 2) && v48 != 9)
            {
              if ((*(void *)(v35 + 32 * sub_1CBDA6464(v33, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4) {
                return 347;
              }
              int v49 = sub_1CBDB2780(v33, 2, 0);
              BOOL v10 = v49 == 2 || v49 == 9;
              unsigned int v11 = 348;
              goto LABEL_13;
            }
            return result;
          }
          goto LABEL_183;
        }
        break;
      case 155:
        int v71 = *(_DWORD *)(a4 + 28);
        if (v71 != 2 && v71 != 3 && v71 != 1) {
          break;
        }
        int v72 = **(unsigned __int16 **)(a3 + 16);
        if ((sub_1CBE52E8C(v72) & 0xFF00000000) == 0) {
          goto LABEL_183;
        }
        BOOL v39 = (*(void *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v72, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
        unsigned int v40 = 343;
        unsigned int v41 = 350;
        goto LABEL_87;
      case 156:
        int v73 = *(_DWORD *)(a4 + 28);
        if (v73 != 2 && v73 != 3 && v73 != 1) {
          break;
        }
        int v74 = **(unsigned __int16 **)(a3 + 16);
        if ((sub_1CBE52E8C(v74) & 0xFF00000000) == 0) {
          goto LABEL_183;
        }
        BOOL v54 = (*(void *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v74, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
        unsigned int v55 = 351;
        goto LABEL_125;
      case 157:
        int v56 = *(_DWORD *)(a4 + 28);
        if (v56 == 1)
        {
          uint64_t v57 = **(unsigned __int16 **)(a3 + 16);
          if ((sub_1CBE52E8C(v57) & 0xFF00000000) == 0) {
            goto LABEL_183;
          }
          unsigned int v63 = sub_1CBDA6464(v57, 0x2Fu);
          uint64_t v59 = *(void *)(a3 + 32);
          if ((*(void *)(v59 + 32 * v63 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
          {
            int v64 = sub_1CBDB2780(v57, 2, 0);
            if (v64 != 9 && v64 != 2) {
              return 353;
            }
          }
          goto LABEL_151;
        }
        if (v56 == 2 || v56 == 3)
        {
          uint64_t v57 = **(unsigned __int16 **)(a3 + 16);
          if ((sub_1CBE52E8C(v57) & 0xFF00000000) == 0) {
            goto LABEL_183;
          }
          unsigned int v58 = sub_1CBDA6464(v57, 0x2Fu);
          uint64_t v59 = *(void *)(a3 + 32);
          if ((*(void *)(v59 + 32 * v58 + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
          {
            int v60 = sub_1CBDB2780(v57, 2, 0);
            if (v60 != 9 && v60 != 2) {
              return 353;
            }
          }
LABEL_151:
          if ((*(void *)(v59 + 32 * sub_1CBDA6464(v57, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
          {
            int v66 = sub_1CBDB2780(v57, 2, 0);
            if (v66 != 9 && v66 != 2) {
              return 354;
            }
          }
          if ((*(void *)(v59 + 32 * sub_1CBDA6464(v57, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) != 4
            || (v67 = sub_1CBDB2780(v57, 2, 0), uint64_t result = 341, v67 != 2) && v67 != 9)
          {
            if ((*(void *)(v59 + 32 * sub_1CBDA6464(v57, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4)
            {
              return 350;
            }
            else
            {
              int v68 = sub_1CBDB2780(v57, 2, 0);
              BOOL v39 = v68 == 2 || v68 == 9;
              unsigned int v40 = 334;
              unsigned int v41 = 343;
LABEL_87:
              if (v39) {
                return v41;
              }
              else {
                return v40;
              }
            }
          }
          return result;
        }
        break;
      case 158:
        int v37 = *(_DWORD *)(a4 + 28);
        if (v37 != 1 && v37 != 3 && v37 != 2) {
          break;
        }
        int v38 = **(unsigned __int16 **)(a3 + 16);
        if ((sub_1CBE52E8C(v38) & 0xFF00000000) == 0) {
          goto LABEL_183;
        }
        BOOL v39 = (*(void *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v38, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
        unsigned int v40 = 352;
        unsigned int v41 = 355;
        goto LABEL_87;
      default:
        if (a2 == 212)
        {
          int v26 = *(_DWORD *)(a4 + 28);
          if (v26 == 2 || v26 == 3 || v26 == 1)
          {
            int v27 = **(unsigned __int16 **)(a3 + 16);
            if ((sub_1CBE52E8C(v27) & 0xFF00000000) != 0)
            {
              BOOL v10 = (*(void *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v27, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
              unsigned int v11 = 357;
LABEL_13:
              if (v10) {
                return v11 + 1;
              }
              else {
                return v11;
              }
            }
            goto LABEL_183;
          }
        }
        else if (a2 == 211)
        {
          int v52 = *(_DWORD *)(a4 + 28);
          if (v52 == 3 || v52 == 2 || v52 == 1)
          {
            int v53 = **(unsigned __int16 **)(a3 + 16);
            if ((sub_1CBE52E8C(v53) & 0xFF00000000) != 0)
            {
              BOOL v54 = (*(void *)(*(void *)(a3 + 32) + 32 * sub_1CBDA6464(v53, 0x2Fu) + 16) & 0xFFFFFFFFFFFFFFFELL) == 4;
              unsigned int v55 = 356;
LABEL_125:
              if (v54) {
                return v55;
              }
              else {
                return v55 + 1;
              }
            }
            goto LABEL_183;
          }
        }
        break;
    }
  }
LABEL_178:
  int v75 = "Expected a variant SchedClass";
  goto LABEL_179;
}

uint64_t sub_1CBC1C7BC(uint64_t a1)
{
  return *(void *)(a1 + 400);
}

uint64_t sub_1CBC1C7C4(uint64_t a1)
{
  return *(void *)(a1 + 408);
}

uint64_t sub_1CBC1C7CC(uint64_t a1)
{
  return *(void *)(a1 + 416);
}

uint64_t sub_1CBC1C7D4(uint64_t a1)
{
  return *(void *)(a1 + 424);
}

uint64_t sub_1CBC1C7DC(int a1, uint64_t a2, char *__s, int *a4)
{
  uint64_t v6 = *(void *)(a2 + 112);
  if (__s) {
    size_t v7 = strlen(__s);
  }
  else {
    size_t v7 = 0;
  }
  if (!v6) {
    goto LABEL_11;
  }
  if (!*(_DWORD *)(v6 + 8)) {
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(v6 + 40);
  if (!v8) {
    goto LABEL_11;
  }
  int v9 = *(_DWORD *)(v8 + 40);
  if (!v9) {
    goto LABEL_11;
  }
  uint64_t v10 = *(void *)(v8 + 24);
  int v11 = sub_1CD0B03C8(__s, (uint64_t)&__s[v7]);
  unsigned int v12 = v9 - 1;
  for (int i = 1; ; ++i)
  {
    int v14 = v11 & v12;
    uint64_t v15 = v10 + 24 * (v11 & v12);
    uint64_t v16 = *(const void **)v15;
    if (*(void *)v15 == -1)
    {
      if (__s == (char *)-1) {
        goto LABEL_17;
      }
      goto LABEL_10;
    }
    if (v16 != (const void *)-2) {
      break;
    }
    if (__s == (char *)-2) {
      goto LABEL_17;
    }
LABEL_10:
    if (v16 == (const void *)-1) {
      goto LABEL_11;
    }
    int v11 = i + v14;
  }
  if (v7 != *(void *)(v15 + 8) || v7 && memcmp(__s, *(const void **)v15, v7)) {
    goto LABEL_10;
  }
LABEL_17:
  uint64_t v18 = *(void *)(v15 + 16);
  *a4 = -1;
  if (!v18 || *(unsigned char *)(v18 + 8) != 2)
  {
LABEL_11:
    uint64_t result = 0;
    *a4 = 0;
    return result;
  }
  uint64_t v19 = v18 + 24;
  uint64_t v21 = *(unsigned int *)(v18 + 12);
  size_t v20 = *(unsigned int *)(v18 + 16);
  uint64_t v22 = v18;
  if (v20 >= 0x17)
  {
    if ((v20 | 7) == 0x17) {
      uint64_t v24 = (v20 & 0xFFFFFFF8) + 8;
    }
    else {
      uint64_t v24 = v20 | 7;
    }
    p_dst = (void **)operator new(v24 + 1);
    size_t v81 = v20;
    uint64_t v82 = v24 - 0x7FFFFFFFFFFFFFFFLL;
    __dst = p_dst;
    goto LABEL_27;
  }
  HIBYTE(v82) = *(_DWORD *)(v18 + 16);
  p_dst = (void **)&__dst;
  if (v20) {
LABEL_27:
  }
    memmove(p_dst, (const void *)(v19 + v21 + 1), v20);
  *((unsigned char *)p_dst + v20) = 0;
  if (v82 < 0)
  {
    size_t v77 = v81;
    if (v81)
    {
      int v78 = __dst;
      do
      {
        *int v78 = __tolower((char)*v78);
        ++v78;
        --v77;
      }
      while (v77);
    }
  }
  else if ((v82 & 0x7F00000000000000) != 0)
  {
    uint64_t v25 = HIBYTE(v82) & 0x7F;
    int v26 = (void **)&__dst;
    do
    {
      *(unsigned char *)int v26 = __tolower(*(char *)v26);
      int v26 = (void **)((char *)v26 + 1);
      --v25;
    }
    while (v25);
  }
  size_t v27 = strlen(__s);
  if (v27 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  std::string::size_type v28 = v27;
  if (v27 >= 0x17)
  {
    uint64_t v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v30 = v27 | 7;
    }
    uint64_t v31 = v30 + 1;
    p_p = (std::string *)operator new(v30 + 1);
    __p.__r_.__value_.__l.__size_ = v28;
    __p.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    goto LABEL_39;
  }
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = v27;
  p_p = &__p;
  if (v27) {
LABEL_39:
  }
    memcpy(p_p, __s, v28);
  p_p->__r_.__value_.__s.__data_[v28] = 0;
  int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  unsigned int v34 = (void *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    uint64_t v35 = &__p;
  }
  else
  {
    int64_t size = __p.__r_.__value_.__l.__size_;
    uint64_t v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v36 = (char *)v35 + size;
  if (size >= 8)
  {
    int v56 = v35;
    do
    {
      int v37 = (char *)memchr(v56, 67, size - 7);
      if (!v37) {
        break;
      }
      if (*(void *)v37 == 0x6C74436568636143) {
        goto LABEL_45;
      }
      int v56 = (std::string *)(v37 + 1);
      int64_t size = v36 - (char *)v56;
    }
    while (v36 - (char *)v56 > 7);
  }
  int v37 = v36;
LABEL_45:
  BOOL v39 = v37 == v36 || v37 - (char *)v35 == -1;
  if (v33 < 0) {
    operator delete(v34);
  }
  if (v39)
  {
    std::string::size_type v74 = strlen(__s);
    std::string::__init(&__p, __s, v74);
    unint64_t v75 = sub_1CBC1CE7C((uint64_t *)&__p, "L2Pers", 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v75 == -1) {
      goto LABEL_81;
    }
    if (sub_1CBA86C10(&__dst, "low")) {
      *a4 = 0;
    }
    if (!sub_1CBA86C10(&__dst, "high")) {
      goto LABEL_81;
    }
    int v76 = 1;
  }
  else
  {
    unint64_t v40 = HIBYTE(v82);
    unint64_t v41 = v81;
    if (v82 >= 0) {
      size_t v42 = HIBYTE(v82) & 0x7F;
    }
    else {
      size_t v42 = v81;
    }
    if (v42 != 11) {
      goto LABEL_81;
    }
    if (v82 < 0)
    {
      int v43 = __dst;
      unint64_t v44 = v81;
    }
    else
    {
      int v43 = (void **)&__dst;
      unint64_t v44 = HIBYTE(v82);
    }
    if (v44 >= 0xB) {
      size_t v45 = 11;
    }
    else {
      size_t v45 = v44;
    }
    if (!memcmp(v43, "cacl1_cacl2", v45) && v44 == 11) {
      *a4 = 0;
    }
    if ((v40 & 0x80) != 0)
    {
      int v46 = __dst;
      unint64_t v47 = v41;
    }
    else
    {
      int v46 = (void **)&__dst;
      unint64_t v47 = v40;
    }
    if (v47 >= 0xB) {
      size_t v48 = 11;
    }
    else {
      size_t v48 = v47;
    }
    if (!memcmp(v46, "bypl1_cacl2", v48) && v47 == 11) {
      *a4 = 1;
    }
    if ((v40 & 0x80) != 0)
    {
      int v49 = __dst;
      unint64_t v40 = v41;
    }
    else
    {
      int v49 = (void **)&__dst;
    }
    size_t v50 = v40 >= 0xB ? 11 : v40;
    if (memcmp(v49, "bypl1_bypl2", v50) || v40 != 11) {
      goto LABEL_81;
    }
    int v76 = 3;
  }
  *a4 = v76;
LABEL_81:
  char v51 = HIBYTE(v82);
  unint64_t v52 = v81;
  if (v82 >= 0) {
    size_t v53 = HIBYTE(v82) & 0x7F;
  }
  else {
    size_t v53 = v81;
  }
  switch(v53)
  {
    case 2uLL:
      if (v82 < 0)
      {
        BOOL v54 = __dst;
      }
      else
      {
        BOOL v54 = (void **)&__dst;
        unint64_t v52 = HIBYTE(v82);
      }
      if (v52 >= 2) {
        size_t v55 = 2;
      }
      else {
        size_t v55 = v52;
      }
      if (!memcmp(v54, "no", v55) && v52 == 2) {
        goto LABEL_113;
      }
      break;
    case 3uLL:
      if (v82 < 0)
      {
        int v62 = __dst;
      }
      else
      {
        int v62 = (void **)&__dst;
        unint64_t v52 = HIBYTE(v82);
      }
      if (v52 >= 3) {
        size_t v63 = 3;
      }
      else {
        size_t v63 = v52;
      }
      if (!memcmp(v62, "yes", v63) && v52 == 3) {
        goto LABEL_159;
      }
      break;
    case 4uLL:
      if (v82 < 0)
      {
        uint64_t v57 = __dst;
      }
      else
      {
        uint64_t v57 = (void **)&__dst;
        unint64_t v52 = HIBYTE(v82);
      }
      if (v52 >= 4) {
        size_t v58 = 4;
      }
      else {
        size_t v58 = v52;
      }
      if (!memcmp(v57, "true", v58) && v52 == 4)
      {
LABEL_159:
        int v61 = 1;
        goto LABEL_160;
      }
      break;
    case 5uLL:
      if (v82 < 0)
      {
        uint64_t v59 = __dst;
      }
      else
      {
        uint64_t v59 = (void **)&__dst;
        unint64_t v52 = HIBYTE(v82);
      }
      if (v52 >= 5) {
        size_t v60 = 5;
      }
      else {
        size_t v60 = v52;
      }
      if (!memcmp(v59, "false", v60) && v52 == 5)
      {
LABEL_113:
        int v61 = 0;
LABEL_160:
        *a4 = v61;
      }
      break;
    default:
      break;
  }
  if (v51 < 0) {
    operator delete(__dst);
  }
  if (*a4 != -1) {
    return 1;
  }
  uint64_t result = 0;
  int v64 = *(unsigned __int8 *)(v22 + 8);
  *a4 = 0;
  if (v64 == 2)
  {
    size_t v65 = *(unsigned int *)(v22 + 16);
    __dst = (void **)(v19 + *(unsigned int *)(v22 + 12) + 1);
    size_t v81 = v65;
    unsigned int v66 = sub_1CD0AF898((uint64_t)&__dst);
    size_t v67 = v81;
    if (v81)
    {
      unint64_t v68 = 0;
      for (uint64_t j = __dst; ; uint64_t j = (void **)((char *)j + 1))
      {
        int v70 = *(unsigned __int8 *)j;
        if ((v70 - 48) >= 0xA)
        {
          if ((v70 - 97) >= 0x1A)
          {
            if ((v70 - 65) > 0x19) {
              return 0;
            }
            int v71 = -55;
          }
          else
          {
            int v71 = -87;
          }
        }
        else
        {
          int v71 = -48;
        }
        unsigned int v72 = v71 + v70;
        if (v72 >= v66) {
          break;
        }
        unint64_t v73 = v68 * v66 + v72;
        if (v73 / v66 < v68) {
          break;
        }
        unint64_t v68 = v73;
        if (!--v67)
        {
          if (HIDWORD(v73)) {
            return 0;
          }
          *a4 = v73;
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_1CBC1CE7C(uint64_t *a1, char *__s, unint64_t a3)
{
  uint64_t v5 = (uint64_t)a1;
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
  }
  else
  {
    unint64_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  size_t v7 = strlen(__s);
  if (v6 < a3) {
    return -1;
  }
  int64_t v8 = v7;
  if (v7)
  {
    int v9 = (void *)(v5 + a3);
    uint64_t v10 = (char *)(v5 + v6);
    int64_t v11 = v6 - a3;
    if ((uint64_t)(v6 - a3) >= v8)
    {
      int v14 = *__s;
      do
      {
        uint64_t v15 = v11 - v8;
        if (v15 == -1) {
          break;
        }
        uint64_t v16 = (char *)memchr(v9, v14, v15 + 1);
        if (!v16) {
          break;
        }
        unsigned int v12 = v16;
        if (!memcmp(v16, __s, v8)) {
          goto LABEL_9;
        }
        int v9 = v12 + 1;
        int64_t v11 = v10 - (v12 + 1);
      }
      while (v11 >= v8);
    }
    unsigned int v12 = v10;
LABEL_9:
    if (v12 == v10) {
      return -1;
    }
    else {
      return (unint64_t)&v12[-v5];
    }
  }
  return a3;
}

void sub_1CBC1CF54(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 3) = 1;
  *(_WORD *)a2 = 257;
}

void sub_1CBC1CF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)a6 & 6;
  BOOL v9 = v8 == 6 && *(_DWORD *)(a4 + 192) == -1;
  if (v8) {
    BOOL v10 = !v9;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10)
  {
    uint64_t v11 = *(void *)(a2 + 8);
    unsigned int v12 = *(unsigned __int16 **)(v11 + 16);
    unint64_t v13 = *((void *)v12 + 2);
    if ((v13 & 0x400000000) != 0)
    {
      int v14 = *v12;
      if ((v14 - 6165) <= 1) {
        *(_DWORD *)(a6 + 12) += 998;
      }
      uint64_t v15 = v13 & 0x1D00;
      BOOL v16 = (v13 & 0x1900 | 0x400) == 0xD00 || (v13 >> 26) & 1;
      int v17 = v15 == 1280 || v16;
      unsigned int v18 = v14 - 6495;
      BOOL v19 = (~v13 & 0x800100) != 0 && v18 >= 8;
      BOOL v20 = !v19;
      int v21 = v19 ? v17 : 1;
      int v22 = v15 == 4352 ? 1 : v21;
      uint64_t v23 = *(void *)(*(void *)(*(void *)(v11 + 24) + 32) + 16);
      unsigned int v24 = ((*(uint64_t (**)(uint64_t))(*(void *)v23 + 424))(v23) + 7) & 0xFFFFFFF8;
      if (v24 <= 0x5F)
      {
        uint64_t v28 = (v24 - 64) >> 3;
        uint64_t v29 = v28 - 1;
        if ((v28 - 1) > 2)
        {
          int v25 = 170;
          int v27 = 35;
          int v26 = 35;
        }
        else
        {
          int v27 = dword_1CDC7F484[v29];
          int v26 = dword_1CDC7F490[(int)v29];
          int v25 = dword_1CDC7F49C[(int)v29];
        }
      }
      else
      {
        int v25 = 480;
        int v26 = 450;
        int v27 = 60;
      }
      if (((v13 >> 1) & 1 | v22) == 1)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E7E0, memory_order_acquire) & 1) == 0)
        {
          int v36 = v27;
          int v37 = __cxa_guard_acquire(&qword_1EA61E7E0);
          int v27 = v36;
          if (v37)
          {
            byte_1EA61E7D8 = 1;
            __cxa_guard_release(&qword_1EA61E7E0);
            int v27 = v36;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E7F0, memory_order_acquire) & 1) == 0)
        {
          int v38 = v27;
          int v39 = __cxa_guard_acquire(&qword_1EA61E7F0);
          int v27 = v38;
          if (v39)
          {
            dword_1EA61E7E8 = byte_1EA61E7D8 << 31 >> 31;
            __cxa_guard_release(&qword_1EA61E7F0);
            int v27 = v38;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E800, memory_order_acquire) & 1) == 0)
        {
          int v40 = v27;
          int v41 = __cxa_guard_acquire(&qword_1EA61E800);
          int v27 = v40;
          if (v41)
          {
            byte_1EA61E7F8 = 1;
            __cxa_guard_release(&qword_1EA61E800);
            int v27 = v40;
          }
        }
        if (v16)
        {
          int v30 = byte_1EA61E7D8;
          goto LABEL_45;
        }
        if (v20)
        {
          if (dword_1EA61E7E8 != -1) {
            int v27 = dword_1EA61E7E8;
          }
          goto LABEL_47;
        }
        if (v15 == 4352)
        {
          int v30 = byte_1EA61E7F8;
LABEL_45:
          if (!v30) {
            int v27 = 0;
          }
LABEL_47:
          *(_DWORD *)(a6 + 12) = *(_DWORD *)(a6 + 12) + v27 - *(unsigned __int16 *)(a2 + 226);
          return;
        }
        uint64_t v31 = *(void *)(*(void *)(v11 + 24) + 32);
        uint64_t v32 = (*(uint64_t (**)(void))(**(void **)(v31 + 344) + 560))(*(void *)(v31 + 344));
        if (!v32) {
          uint64_t v32 = *(void *)v31;
        }
        int v33 = (*(unsigned __int16 *)(v32 + 18) >> 4) & 0x3FF;
        if ((v33 - 103) < 2 || v33 == 101)
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E830, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EA61E830))
          {
            byte_1EA61E828 = 1;
            __cxa_guard_release(&qword_1EA61E830);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E840, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EA61E840))
          {
            byte_1EA61E838 = 1;
            __cxa_guard_release(&qword_1EA61E840);
          }
          if ((v13 & 2) == 0)
          {
            int v35 = byte_1EA61E838;
            goto LABEL_72;
          }
          int v34 = byte_1EA61E828;
        }
        else
        {
          if (v33 == 102)
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E850, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EA61E850))
            {
              byte_1EA61E848 = 1;
              __cxa_guard_release(&qword_1EA61E850);
            }
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E860, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_1EA61E860))
            {
              byte_1EA61E858 = 1;
              __cxa_guard_release(&qword_1EA61E860);
            }
            if ((v13 & 2) != 0)
            {
              int v34 = byte_1EA61E848;
              goto LABEL_67;
            }
            int v35 = byte_1EA61E858;
LABEL_72:
            if (v35) {
              int v27 = v26;
            }
            else {
              int v27 = 0;
            }
            goto LABEL_47;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E810, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EA61E810))
          {
            byte_1EA61E808 = 1;
            __cxa_guard_release(&qword_1EA61E810);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E820, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_1EA61E820))
          {
            byte_1EA61E818 = 1;
            __cxa_guard_release(&qword_1EA61E820);
          }
          if ((v13 & 2) == 0)
          {
            int v35 = byte_1EA61E818;
            goto LABEL_72;
          }
          int v34 = byte_1EA61E808;
        }
LABEL_67:
        if (v34) {
          int v27 = v25;
        }
        else {
          int v27 = 0;
        }
        goto LABEL_47;
      }
    }
  }
}

uint64_t sub_1CBC1D478()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA618AE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA618AE0))
  {
    __cxa_guard_release(&qword_1EA618AE0);
  }
  return 0;
}

uint64_t sub_1CBC1D4C0(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (word_1EBD022A0) {
    return dword_1EBD02318;
  }
  v4[0] = &unk_1F25FDCB8;
  v4[1] = a1;
  uint64_t v5 = v4;
  int v1 = sub_1CBD854F8((uint64_t)v4);
  if (v5 == v4)
  {
    (*(void (**)(void *))(v4[0] + 32))(v4);
  }
  else if (v5)
  {
    (*(void (**)(void))(*v5 + 40))();
  }
  unsigned int v2 = dword_1CDC7F4A8[v1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA61E870))
  {
    dword_1EA61E868 = 0;
    __cxa_guard_release(&qword_1EA61E870);
  }
  if (dword_1EA61E868) {
    return dword_1EA61E868;
  }
  else {
    return v2;
  }
}

uint64_t sub_1CBC1D614(uint64_t a1)
{
  return a1 + 440;
}

uint64_t sub_1CBC1D61C(uint64_t a1)
{
  return *(void *)(a1 + 432);
}

uint64_t sub_1CBC1D624(uint64_t a1)
{
  return *(void *)(a1 + 1224);
}

uint64_t sub_1CBC1D62C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1) + 88;
}

uint64_t sub_1CBC1D668()
{
  return 1;
}

uint64_t sub_1CBC1D670()
{
  return 0;
}

uint64_t sub_1CBC1D678(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 281);
}

uint64_t sub_1CBC1D680(uint64_t a1, llvm::Function **a2)
{
  if ((*((unsigned char *)a2[1] + 1042) & 8) == 0) {
    return 0;
  }
  unsigned int v2 = *a2;
  if ((*((_DWORD *)*a2 + 8) & 0xFu) - 7 > 1) {
    return 0;
  }
  hasAddressTakeuint64_t n = llvm::Function::hasAddressTaken(*a2, 0, 0, 1, 0, 0);
  uint64_t result = 0;
  if ((hasAddressTaken & 1) == 0)
  {
    uint64_t v5 = *((void *)v2 + 14);
    if (v5 && (*(unsigned char *)(v5 + 15) & 0x40) != 0)
    {
      uint64_t v6 = *((void *)v2 + 1);
      if (!v6) {
        return 1;
      }
      uint64_t result = 1;
      while (1)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        if (*(unsigned char *)(v7 + 16) == 84 && (*(_WORD *)(v7 + 18) & 3u) - 1 < 2) {
          break;
        }
        uint64_t v6 = *(void *)(v6 + 8);
        if (!v6) {
          return result;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_1CBC1D740()
{
  *(void *)&long long v1 = "Maximum number of GPRs that can be allocated, idential to AGX3_TEMP_REG_LIMIT EV and overrides it";
  *((void *)&v1 + 1) = 97;
  sub_1CD4284E8(&v1);

  return __cxa_atexit((void (*)(void *))sub_1CB8598A4, &qword_1EBD02298, &dword_1CB82C000);
}

double sub_1CBC1D7A4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 80) += 792;
  if (((*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2 + 792 > *(void *)(a2 + 8) - *(void *)a2)
  {
    unsigned int v5 = *(_DWORD *)(a2 + 24) >> 7;
    if (v5 >= 0x1E) {
      LOBYTE(v5) = 30;
    }
    uint64_t v6 = 4096 << v5;
    uint64_t v3 = (uint64_t)operator new(4096 << v5, (std::align_val_t)8uLL);
    unsigned int v7 = *(_DWORD *)(a2 + 24);
    if (v7 >= *(_DWORD *)(a2 + 28)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)(a2 + 16) + 8 * v7) = v3;
    ++*(_DWORD *)(a2 + 24);
    *(void *)(a2 + 8) = v3 + v6;
  }
  else
  {
    uint64_t v3 = (*(void *)a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)a2 = v3 + 792;

  return sub_1CBC1E3A8(v3);
}

uint64_t sub_1CBC1D894()
{
  return 1;
}

void sub_1CBC1D8BC()
{
}

uint64_t sub_1CBC1D8C4(uint64_t a1, const llvm::Function *a2)
{
  uint64_t v4 = *((void *)a2 + 14);
  if (!v4 || !*(_DWORD *)(v4 + 8))
  {
    uint64_t v24 = 0;
    goto LABEL_21;
  }
  uint64_t v5 = *(void *)(v4 + 40);
  if (!v5 || (int v6 = *(_DWORD *)(v5 + 40)) == 0)
  {
    uint64_t v14 = 0;
    goto LABEL_12;
  }
  uint64_t v7 = *(void *)(v5 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v68 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v68 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v68;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xBC30287DAC2F782DLL)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1EBCBE580 ^ 0xBC30287DAC2F782DLL)) >> 47) ^ 0xDF1D5C18CB5D1959);
  unsigned int v9 = (-348639895 * ((v8 >> 47) ^ v8)) ^ 0x74656772;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v9 & (v6 - 1);
    unsigned int v12 = (uint64_t *)(v7 + 24 * v11);
    uint64_t v13 = *v12;
    if (*v12 == -1)
    {
      if ("target-cpu" == (char *)-1) {
        goto LABEL_70;
      }
      goto LABEL_9;
    }
    if (v13 != -2) {
      break;
    }
    if ("target-cpu" == (char *)-2) {
      goto LABEL_70;
    }
LABEL_9:
    if (v13 == -1)
    {
      uint64_t v14 = 0;
      goto LABEL_11;
    }
    unsigned int v9 = i + v11;
  }
  if (v12[1] != 10) {
    goto LABEL_9;
  }
  if (*(void *)v13 != 0x632D746567726174 || *(_WORD *)(v13 + 8) != 30064) {
    goto LABEL_9;
  }
LABEL_70:
  uint64_t v14 = v12[2];
LABEL_11:
  if (!*(_DWORD *)(v4 + 8))
  {
LABEL_19:
    uint64_t v24 = 0;
    goto LABEL_20;
  }
LABEL_12:
  uint64_t v15 = *(void *)(v4 + 40);
  if (!v15) {
    goto LABEL_19;
  }
  int v16 = *(_DWORD *)(v15 + 40);
  if (!v16) {
    goto LABEL_19;
  }
  uint64_t v17 = *(void *)(v15 + 24);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCBE588))
  {
    unint64_t v69 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override) {
      unint64_t v69 = 0xFF51AFD7ED558CCDLL;
    }
    qword_1EBCBE580 = v69;
    __cxa_guard_release(&qword_1EBCBE588);
  }
  unint64_t v18 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                             * (qword_1EBCBE580 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  unsigned int v19 = (-348639895 * ((v18 >> 47) ^ v18)) ^ 0x74616566;
  for (int j = 1; ; ++j)
  {
    unsigned int v21 = v19 & (v16 - 1);
    uint64_t v22 = v17 + 24 * v21;
    uint64_t v23 = *(void **)v22;
    if (*(void *)v22 == -1)
    {
      if ("target-features" == (char *)-1) {
        goto LABEL_78;
      }
      goto LABEL_18;
    }
    if (v23 != (void *)-2) {
      break;
    }
    if ("target-features" == (char *)-2) {
      goto LABEL_78;
    }
LABEL_18:
    if (v23 == (void *)-1) {
      goto LABEL_19;
    }
    unsigned int v19 = j + v21;
  }
  if (*(void *)(v22 + 8) != 15) {
    goto LABEL_18;
  }
  if (*v23 != 0x662D746567726174 || *(void *)((char *)v23 + 7) != 0x7365727574616566) {
    goto LABEL_18;
  }
LABEL_78:
  uint64_t v24 = *(void *)(v22 + 16);
LABEL_20:
  if (v14)
  {
    if (*(unsigned char *)(v14 + 8) == 2)
    {
      unsigned int v45 = *(_DWORD *)(v14 + 12);
    }
    else
    {
      unsigned int v45 = *(_DWORD *)(v14 + 12);
      if (!v45) {
        goto LABEL_21;
      }
    }
    std::string::__init(&v88, (const std::string::value_type *)(v14 + v45 + 25), *(unsigned int *)(v14 + 16));
  }
  else
  {
LABEL_21:
    if (*(char *)(a1 + 519) < 0) {
      sub_1CB8BDF7C((uint64_t)&v88, *(const void **)(a1 + 496), *(void *)(a1 + 504));
    }
    else {
      std::string v88 = *(std::string *)(a1 + 496);
    }
  }
  if (v24)
  {
    if (*(unsigned char *)(v24 + 8) == 2)
    {
      unsigned int v46 = *(_DWORD *)(v24 + 12);
    }
    else
    {
      unsigned int v46 = *(_DWORD *)(v24 + 12);
      if (!v46) {
        goto LABEL_24;
      }
    }
    std::string::size_type v47 = *(unsigned int *)(v24 + 16);
    uint64_t v48 = v24 + 24;
    if (v47 >= 0x17)
    {
      if ((v47 | 7) == 0x17) {
        uint64_t v50 = (v47 & 0xFFFFFFF8) + 8;
      }
      else {
        uint64_t v50 = v47 | 7;
      }
      p_dst = (std::string *)operator new(v50 + 1);
      __dst.__r_.__value_.__l.__size_ = v47;
      __dst.__r_.__value_.__r.__words[2] = v50 - 0x7FFFFFFFFFFFFFFFLL;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(_DWORD *)(v24 + 16);
      p_dst = &__dst;
      if (!v47)
      {
LABEL_94:
        p_dst->__r_.__value_.__s.__data_[v47] = 0;
        uint64_t v51 = *(unsigned int *)(v24 + 12);
        size_t v52 = *(unsigned int *)(v24 + 16);
        if (v52 >= 0x17)
        {
          if ((v52 | 7) == 0x17) {
            uint64_t v54 = (v52 & 0xFFFFFFF8) + 8;
          }
          else {
            uint64_t v54 = v52 | 7;
          }
          size_t v53 = operator new(v54 + 1);
          size_t v83 = v52;
          uint64_t v84 = v54 - 0x7FFFFFFFFFFFFFFFLL;
          uint64_t v82 = v53;
        }
        else
        {
          HIBYTE(v84) = *(_DWORD *)(v24 + 16);
          size_t v53 = &v82;
          if (!v52) {
            goto LABEL_102;
          }
        }
        memmove(v53, (const void *)(v48 + v51 + 1), v52);
LABEL_102:
        *((unsigned char *)v53 + v52) = 0;
        int v55 = SHIBYTE(v84);
        size_t v56 = HIBYTE(v84) & 0x7F;
        if (v84 < 0) {
          size_t v56 = v83;
        }
        if (v56) {
          uint64_t v57 = ",";
        }
        else {
          uint64_t v57 = (const std::string::value_type *)&unk_1CFB4178D;
        }
        size_t v58 = std::string::append(&__dst, v57);
        std::string::size_type v59 = v58->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v59;
        v58->__r_.__value_.__l.__size_ = 0;
        v58->__r_.__value_.__r.__words[2] = 0;
        v58->__r_.__value_.__r.__words[0] = 0;
        char v60 = *(unsigned char *)(a1 + 543);
        int v61 = v60;
        if (v60 >= 0) {
          int v62 = (const std::string::value_type *)(a1 + 520);
        }
        else {
          int v62 = *(const std::string::value_type **)(a1 + 520);
        }
        std::string::size_type v63 = v60 & 0x7F;
        if (v61 >= 0) {
          std::string::size_type v64 = v63;
        }
        else {
          std::string::size_type v64 = *(void *)(a1 + 528);
        }
        size_t v65 = std::string::append(&v79, v62, v64);
        std::string::size_type v66 = v65->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
        std::string::size_type v87 = v66;
        v65->__r_.__value_.__l.__size_ = 0;
        v65->__r_.__value_.__r.__words[2] = 0;
        v65->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (v55 < 0) {
          operator delete(v82);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        goto LABEL_26;
      }
    }
    memmove(p_dst, (const void *)(v48 + v46 + 1), v47);
    goto LABEL_94;
  }
LABEL_24:
  if (*(char *)(a1 + 543) < 0)
  {
    sub_1CB8BDF7C((uint64_t)__p, *(const void **)(a1 + 520), *(void *)(a1 + 528));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 520);
    std::string::size_type v87 = *(void *)(a1 + 536);
  }
LABEL_26:
  sub_1CB906918((const void **)&v88.__r_.__value_.__l.__data_, (const void **)__p, (uint64_t)&v79);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v25 = &v79;
  }
  else {
    int v25 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = *((unsigned char *)&v79.__r_.__value_.__s + 23) & 0x7F;
  }
  else {
    size_t size = v79.__r_.__value_.__l.__size_;
  }
  unsigned int v27 = *(_DWORD *)(a1 + 2568);
  if (!v27)
  {
    *(void *)(a1 + 2572) = 0;
    size_t v67 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v67) {
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    v67[16] = 2;
    *(void *)(a1 + 2560) = v67;
    unsigned int v27 = 16;
    *(_DWORD *)(a1 + 2568) = 16;
  }
  int v76 = (llvm::StringMapImpl *)(a1 + 2560);
  size_t v77 = a2;
  int v28 = 0;
  if (size)
  {
    size_t v29 = size;
    int v30 = v25;
    do
    {
      int v31 = v30->__r_.__value_.__s.__data_[0];
      int v30 = (std::string *)((char *)v30 + 1);
      int v28 = 33 * v28 + v31;
      --v29;
    }
    while (v29);
  }
  uint64_t v78 = a1;
  uint64_t v32 = *(void *)(a1 + 2560);
  unsigned int v33 = v27 - 1;
  uint64_t v34 = v32 + 8 * v27 + 8;
  int v35 = -1;
  int v36 = 1;
  int v37 = v28;
  while (1)
  {
    uint64_t v38 = v37 & v33;
    int v39 = *(void **)(v32 + 8 * v38);
    if (!v39) {
      break;
    }
    if (v39 == (void *)-8)
    {
      if (v35 == -1) {
        int v35 = v37 & v33;
      }
    }
    else if (*(_DWORD *)(v34 + 4 * v38) == v28 {
           && size == *v39
    }
           && (!size || !memcmp(v25, (char *)v39 + *(unsigned int *)(v78 + 2580), size)))
    {
      goto LABEL_48;
    }
    int v37 = v36 + v38;
    ++v36;
  }
  uint64_t v40 = v35;
  if (v35 == -1)
  {
    uint64_t v40 = v38;
    uint64_t v38 = v38;
  }
  else
  {
    uint64_t v38 = v35;
  }
  *(_DWORD *)(v34 + 4 * v40) = v28;
  int v39 = *(void **)(v32 + 8 * v38);
LABEL_48:
  if (v39)
  {
    if (v39 != (void *)-8) {
      goto LABEL_50;
    }
    --*(_DWORD *)(v78 + 2576);
  }
  uint64_t v70 = v32;
  int v71 = operator new(size + 17, (std::align_val_t)8uLL);
  unsigned int v72 = v71;
  unint64_t v73 = (char *)(v71 + 2);
  if (size) {
    memcpy(v71 + 2, v25, size);
  }
  v73[size] = 0;
  *unsigned int v72 = size;
  v72[1] = 0;
  *(void *)(v70 + 8 * v38) = v72;
  ++*(_DWORD *)(v78 + 2572);
  for (uint64_t k = (void **)(*(void *)(v78 + 2560) + 8 * llvm::StringMapImpl::RehashTable(v76, v38)); ; ++k)
  {
    int v39 = *k;
    if (*k && v39 + 1 != 0) {
      break;
    }
  }
LABEL_50:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  uint64_t v41 = v39[1];
  if (!v41)
  {
    llvm::TargetMachine::resetTargetOptions((llvm::TargetMachine *)v78, v77);
    if (*(char *)(v78 + 471) < 0) {
      sub_1CB8BDF7C((uint64_t)&v79, *(const void **)(v78 + 448), *(void *)(v78 + 456));
    }
    else {
      std::string v79 = *(std::string *)(v78 + 448);
    }
    uint64_t v81 = *(void *)(v78 + 488);
    long long v80 = *(_OWORD *)(v78 + 472);
    sub_1CBC1E17C();
  }
  if (SHIBYTE(v87) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v88.__r_.__value_.__l.__data_);
  }
  return v41;
}

void sub_1CBC1E17C()
{
}

void sub_1CBC1E21C(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t))(*(void *)v1 + 120))(v1);
  operator new();
}

void sub_1CBC1E32C()
{
}

BOOL sub_1CBC1E384(uint64_t a1, __int16 ***a2)
{
  return a2 == &off_1E66AF900;
}

uint64_t sub_1CBC1E398(uint64_t a1)
{
  return *(void *)(a1 + 1320);
}

uint64_t sub_1CBC1E3A0()
{
  return 1;
}

double sub_1CBC1E3A8(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = -1;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1F25FA248;
  *(void *)(a1 + 16) = a1 + 32;
  *(void *)(a1 + 24) = 0x1000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_DWORD *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = a1 + 272;
  *(void *)(a1 + 264) = 0xA00000000;
  *(unsigned char *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 495) = 0;
  *(void *)(a1 + 504) = a1 + 520;
  *(void *)(a1 + 512) = 0x300000000;
  *(unsigned char *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 540) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 548) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 556) = 0;
  *(_WORD *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 564) = 0;
  *(_DWORD *)(a1 + 567) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 628) = 0u;
  *(_OWORD *)(a1 + 676) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_DWORD *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_DWORD *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_DWORD *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  return result;
}

uint64_t sub_1CBC1E4D0()
{
  return 0;
}

void sub_1CBC1E4D8()
{
}

uint64_t sub_1CBC1E4EC()
{
  return 1;
}

uint64_t sub_1CBC1E4F4()
{
  return 0;
}

uint64_t sub_1CBC1E4FC()
{
  return 150;
}

uint64_t sub_1CBC1E504(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  return sub_1CBC1EBBC(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1CBC1E50C(uint64_t a1, llvm::ShuffleVectorInst *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CBC1F4B0(a1 + 16, a2, a3, a4, a5);
}

uint64_t sub_1CBC1E514()
{
  return 2126008812;
}

BOOL sub_1CBC1E520(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1CBC1E52C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 8) + 80))();
}

uint64_t sub_1CBC1E558(uint64_t a1, uint64_t ***a2)
{
  return sub_1CB9091FC(a1 + 16, a2);
}

void sub_1CBC1E560(uint64_t a1, llvm::Loop *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1CBC1E568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(_WORD *)(a4 + 4) = 1;
  *(unsigned char *)(a4 + 6) = 1;
}

uint64_t sub_1CBC1E57C()
{
  return 0;
}

uint64_t sub_1CBC1E588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = a1 + 8;
  unsigned int v8 = *((_DWORD *)a4 + 2);
  if (v8 > 0x40) {
    operator new[]();
  }
  uint64_t v7 = *a4;
  uint64_t result = sub_1CBA8D9B8(v4, a2, a3, (uint64_t)&v7);
  if (v8 >= 0x41)
  {
    if (v7)
    {
      uint64_t v6 = result;
      MEMORY[0x1D25D9CB0](v7, 0x1000C8000313F17);
      return v6;
    }
  }
  return result;
}

uint64_t sub_1CBC1E66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a4 + 8) > 0x40u) {
    operator new[]();
  }
  sub_1CB90D414((uint64_t)v9, a8);
  sub_1CB90D414((uint64_t)v11, (uint64_t)v9);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void))(*v10 + 40))();
  }
  return 0;
}

uint64_t sub_1CBC1E884()
{
  return 0;
}

uint64_t sub_1CBC1E88C()
{
  return 1;
}

uint64_t sub_1CBC1E894()
{
  return 0;
}

uint64_t sub_1CBC1E89C(uint64_t a1, llvm::IntegerType *this, llvm::LLVMContext *a3)
{
  if ((int)a3 <= 31)
  {
    if (a3 != 1 && a3 != 16 && a3 != 8) {
      goto LABEL_14;
    }
  }
  else if (a3 != 32 && a3 != 64 && a3 != 128)
  {
LABEL_14:
    llvm::IntegerType::get(this, a3);
  }
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 40) + 648);

  return v4();
}

uint64_t sub_1CBC1E9B0(uint64_t a1, llvm::EVT *this)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unsigned __int8 v3 = sub_1CB87DC14(v2, *(void *)(a1 + 16), this, 0);
  if (v3 && (v3 == 1 || *(void *)(v2 + 8 * v3 + 96)) && (unint64_t v4 = *(char *)(v2 + 390 * v3 + 3958), v4 <= 4)) {
    return qword_1CDC7F4C0[v4];
  }
  else {
    return 4;
  }
}

uint64_t sub_1CBC1EA30(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  *a3 = 0;
  return 0;
}

unint64_t sub_1CBC1EA3C(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, unint64_t a10, uint64_t a11)
{
  return sub_1CBC20CFC(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t sub_1CBC1EA54(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  return sub_1CBC21D98(a1 + 8, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1CBC1EA5C()
{
  return 0;
}

BOOL sub_1CBC1EA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CBA65B28(a1 + 8, a2, a3);
}

BOOL sub_1CBC1EA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CB90D6C8(a1 + 16, a2, a3);
}

uint64_t sub_1CBC1EA74()
{
  return 128;
}

uint64_t sub_1CBC1EA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if (v3
    && *(void *)(v3 + 56)
    && *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24)) + 339))
  {
    return 0;
  }
  uint64_t v4 = *(void *)(a2 - 32);
  int v5 = *(_DWORD *)(*(void *)v4 + 8);
  if ((v5 & 0xFE) == 0x12) {
    int v5 = *(_DWORD *)(**(void **)(*(void *)v4 + 16) + 8);
  }
  if ((v5 & 0xFFFFFF00) != 0x4000) {
    return 1;
  }
  char v7 = sub_1CD0FF880(v4, 0);
  uint64_t result = 0;
  if ((v7 & 1) == 0) {
    return 1;
  }
  return result;
}

BOOL sub_1CBC1EB34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = **(void **)(a2 - 32);
  int v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0xFE) == 0x12) {
    int v3 = *(_DWORD *)(**(void **)(v2 + 16) + 8);
  }
  return (v3 & 0xFFFFFF00) != 0x4000;
}

BOOL sub_1CBC1EB6C(uint64_t a1, unsigned int a2, char a3, unsigned int a4)
{
  return sub_1CD1103C4(a2, 1 << a3, a4);
}

BOOL sub_1CBC1EB80(uint64_t a1, unsigned int a2, char a3, unsigned int a4)
{
  return sub_1CD1103C4(a2, 1 << a3, a4);
}

uint64_t sub_1CBC1EB94(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***a5)
{
  return sub_1CBA65C98(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1CBC1EB9C(int a1, uint64_t a2, unsigned int a3, int a4, llvm::Type ***a5)
{
  return sub_1CBA65C98(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1CBC1EBA4()
{
  return 0;
}

uint64_t sub_1CBC1EBAC()
{
  return 1;
}

BOOL sub_1CBC1EBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1CBBE5C6C(a1 + 8, a2, a3);
}

uint64_t sub_1CBC1EBBC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = ((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 8);
  *a3 = 0;
  unsigned __int8 v12 = (*(uint64_t (**)(uint64_t, void))(*(void *)v10 + 528))(v10, *(void *)(*(void *)(a2 + 40) + 56));
  if (!v9) {
    return v9;
  }
  unsigned __int8 v13 = v12;
  if ((v12 & 1) == 0 && *(_DWORD *)(*(void *)(v11 + 232) + 12) < v9) {
    return v9;
  }
  int v14 = *(_DWORD *)(a2 + 20);
  unint64_t v75 = a3;
  if ((v14 & 0x40000000) != 0) {
    uint64_t v15 = *(void *)(a2 - 8);
  }
  else {
    uint64_t v15 = a2 - 32 * (v14 & 0x7FFFFFF);
  }
  uint64_t v16 = *(void *)(v15 + 64);
  unsigned int v17 = *(_DWORD *)(v16 + 32);
  unsigned int v86 = v17;
  uint64_t v76 = a4;
  uint64_t v77 = a5;
  if (v17 > 0x40) {
    operator new[]();
  }
  unint64_t v85 = *(void **)(v16 + 24);
  unsigned int v84 = v17;
  std::string __dst = v85;
  int v18 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
  uint64_t v19 = (v18 - 1);
  if (v18 != 1)
  {
    for (uint64_t i = 0; i != v19; ++i)
    {
      int v21 = *(_DWORD *)(a2 + 20);
      if ((v21 & 0x40000000) != 0) {
        uint64_t v22 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v22 = a2 - 32 * (v21 & 0x7FFFFFF);
      }
      uint64_t v23 = *(void *)(v22 + 32 * (2 * i + 2));
      uint64_t v24 = (void **)(v23 + 24);
      uint64_t v25 = *(unsigned int *)(v23 + 32);
      if (v25 > 0x40)
      {
        uint64_t v27 = *((void *)*v24 + ((v25 - 1) >> 6)) & (1 << (v25 - 1));
        unsigned int v28 = v86 - 1;
        if (v86 >= 0x41) {
          size_t v29 = (void **)((char *)v85 + 8 * (v28 >> 6));
        }
        else {
          size_t v29 = &v85;
        }
        if ((v27 != 0) == (((unint64_t)*v29 >> v28) & 1))
        {
          unint64_t v34 = ((unint64_t)(v25 + 63) >> 3) & 0x3FFFFFF8;
          while (v34)
          {
            unint64_t v35 = *(void *)((char *)*v24 + v34 - 8);
            unint64_t v36 = *(void *)((char *)v85 + v34 - 8);
            v34 -= 8;
            if (v35 != v36)
            {
              BOOL v30 = &v85 == v24;
              if (v35 > v36) {
                goto LABEL_34;
              }
              break;
            }
          }
        }
        else
        {
          BOOL v30 = &v85 == v24;
          if (v27) {
            goto LABEL_17;
          }
LABEL_34:
          if (!v30)
          {
LABEL_27:
            llvm::APInt::reallocate((uint64_t)&v85, v25);
            if (v86 <= 0x40) {
              unint64_t v85 = *v24;
            }
            else {
              memcpy(v85, *v24, (((unint64_t)v86 + 63) >> 3) & 0x3FFFFFF8);
            }
          }
        }
      }
      else
      {
        if ((uint64_t)((void)*v24 << -(char)v25) >> -(char)v25 <= (uint64_t)((void)v85 << -(char)v25) >> -(char)v25) {
          goto LABEL_17;
        }
        if (v86 <= 0x40)
        {
          unint64_t v85 = *v24;
          unsigned int v86 = v25;
          goto LABEL_17;
        }
        if (&v85 != v24) {
          goto LABEL_27;
        }
      }
LABEL_17:
      uint64_t v26 = *(unsigned int *)(v23 + 32);
      if (v26 > 0x40)
      {
        uint64_t v31 = *((void *)*v24 + ((v26 - 1) >> 6)) & (1 << (v26 - 1));
        unsigned int v32 = v84 - 1;
        if (v84 >= 0x41) {
          p_dst = (void **)((char *)__dst + 8 * (v32 >> 6));
        }
        else {
          p_dst = &__dst;
        }
        if ((v31 != 0) == (((unint64_t)*p_dst >> v32) & 1))
        {
          unint64_t v37 = ((unint64_t)(v26 + 63) >> 3) & 0x3FFFFFF8;
          while (v37)
          {
            unint64_t v38 = *(void *)((char *)*v24 + v37 - 8);
            unint64_t v39 = *(void *)((char *)__dst + v37 - 8);
            v37 -= 8;
            if (v38 != v39)
            {
              if (v38 > v39 || &__dst == v24) {
                goto LABEL_22;
              }
              goto LABEL_42;
            }
          }
          continue;
        }
        if (v31 && &__dst != v24)
        {
LABEL_42:
          llvm::APInt::reallocate((uint64_t)&__dst, v26);
          if (v84 <= 0x40) {
            std::string __dst = *v24;
          }
          else {
            memcpy(__dst, *v24, (((unint64_t)v84 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
      }
      else if ((uint64_t)((void)*v24 << -(char)v26) >> -(char)v26 < (uint64_t)((void)__dst << -(char)v26) >> -(char)v26)
      {
        if (v84 > 0x40)
        {
          if (&__dst != v24) {
            goto LABEL_42;
          }
        }
        else
        {
          std::string __dst = *v24;
          unsigned int v84 = v26;
        }
      }
LABEL_22:
      ;
    }
  }
  if (v9 > *(_DWORD *)(*(void *)(v11 + 232) + 12))
  {
    if (v9 > 1) {
      unsigned __int8 v40 = v13;
    }
    else {
      unsigned __int8 v40 = 0;
    }
    uint64_t v41 = v76;
    if ((v40 & 1) == 0) {
      goto LABEL_136;
    }
LABEL_125:
    if (v9 >= (*(unsigned int (**)(uint64_t))(*(void *)v10 + 696))(v10))
    {
      if (v86 >= 0x41) {
        operator new[]();
      }
      unint64_t v67 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v86;
      if (!v86) {
        unint64_t v67 = 0;
      }
      int64_t v68 = v67 & ((unsigned char *)v85 - (unsigned char *)__dst);
      BOOL v69 = __CFADD__(v68, 1);
      uint64_t v70 = v68 + 1;
      if (v69) {
        uint64_t v71 = -1;
      }
      else {
        uint64_t v71 = v70;
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 536))(v10, a2, v9, v71, v41, a5))
      {
        *unint64_t v75 = v71;
        uint64_t v9 = 1;
      }
    }
    goto LABEL_136;
  }
  size_t v42 = v82;
  uint64_t v78 = v82;
  std::string v79 = v82;
  uint64_t v80 = 4;
  int v81 = 0;
  int v43 = (*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF;
  uint64_t v44 = (v43 - 1);
  if (v43 != 1)
  {
    unsigned int v45 = 0;
    uint64_t v46 = 0;
    unsigned int v47 = 4;
    uint64_t v48 = v82;
    while (1)
    {
      int v49 = *(_DWORD *)(a2 + 20);
      if ((v49 & 0x40000000) != 0) {
        uint64_t v50 = *(void *)(a2 - 8);
      }
      else {
        uint64_t v50 = a2 - 32 * (v49 & 0x7FFFFFF);
      }
      uint64_t v51 = (2 * v46 + 3);
      if (v46 == 4294967294) {
        uint64_t v51 = 1;
      }
      uint64_t v52 = *(void *)(v50 + 32 * v51);
      if (v48 != v42) {
        break;
      }
      if (v45)
      {
        size_t v53 = 0;
        uint64_t v54 = 8 * v45;
        int v55 = v42;
        while (*v55 != v52)
        {
          if (*v55 == -2) {
            size_t v53 = v55;
          }
          ++v55;
          v54 -= 8;
          if (!v54)
          {
            if (!v53) {
              goto LABEL_78;
            }
            *size_t v53 = v52;
            --v81;
            goto LABEL_101;
          }
        }
        goto LABEL_101;
      }
LABEL_78:
      if (v47 <= v45) {
        break;
      }
      HIDWORD(v80) = v45 + 1;
      *(void *)&v42[8 * v45] = v52;
LABEL_101:
      size_t v42 = v78;
      uint64_t v48 = v79;
      unsigned int v47 = v80;
      unsigned int v45 = HIDWORD(v80);
      if (++v46 == v44)
      {
        int v65 = HIDWORD(v80) - v81;
        goto LABEL_110;
      }
    }
    if (3 * v47 <= 4 * (v45 - v81))
    {
      if (v47 >= 0x40) {
        v47 *= 2;
      }
      else {
        unsigned int v47 = 128;
      }
    }
    else if (v47 - v45 >= v47 >> 3)
    {
      goto LABEL_82;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v78, v47);
    unsigned int v47 = v80;
    uint64_t v48 = v79;
LABEL_82:
    unsigned int v56 = v47 - 1;
    unsigned int v57 = (v47 - 1) & ((v52 >> 4) ^ (v52 >> 9));
    size_t v58 = &v48[8 * v57];
    uint64_t v59 = *v58;
    if (*v58 == -1)
    {
      char v60 = 0;
LABEL_94:
      if (v60) {
        std::string::size_type v64 = v60;
      }
      else {
        std::string::size_type v64 = v58;
      }
      if (*v64 != v52)
      {
        if (*v64 == -2) {
          --v81;
        }
        else {
          ++HIDWORD(v80);
        }
        void *v64 = v52;
      }
    }
    else
    {
      char v60 = 0;
      int v61 = 1;
      while (v59 != v52)
      {
        if (v60) {
          BOOL v62 = 0;
        }
        else {
          BOOL v62 = v59 == -2;
        }
        if (v62) {
          char v60 = v58;
        }
        unsigned int v63 = v57 + v61++;
        unsigned int v57 = v63 & v56;
        size_t v58 = &v48[8 * (v63 & v56)];
        uint64_t v59 = *v58;
        if (*v58 == -1) {
          goto LABEL_94;
        }
      }
    }
    goto LABEL_101;
  }
  int v65 = 0;
LABEL_110:
  if (sub_1CB908330(v10, &__dst, (uint64_t)&v85, v11))
  {
    uint64_t v41 = v76;
    a5 = v77;
    if (v9 < 3 || v65 != 1) {
      int v65 = v9 >= 5 && v65 == 2 || v9 > 5 && v65 == 3;
    }
  }
  else
  {
    int v65 = 0;
    uint64_t v41 = v76;
    a5 = v77;
  }
  if (v79 != v78) {
    free(v79);
  }
  if (v65) {
    uint64_t v66 = 1;
  }
  else {
    uint64_t v66 = v9;
  }
  if ((v65 | v13 ^ 1))
  {
    uint64_t v9 = v66;
  }
  else if (v9 >= 2)
  {
    goto LABEL_125;
  }
LABEL_136:
  if (v84 >= 0x41 && __dst) {
    MEMORY[0x1D25D9CB0](__dst, 0x1000C8000313F17);
  }
  if (v86 >= 0x41 && v85) {
    MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
  }
  return v9;
}

uint64_t sub_1CBC1F4B0(uint64_t a1, llvm::ShuffleVectorInst *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v129[7] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = *((unsigned __int8 *)this + 16);
  uint64_t v8 = v7 - 28;
  if (v7 < 0x1C) {
    goto LABEL_16;
  }
  if (v7 == 33 || v7 == 39) {
    goto LABEL_9;
  }
  if (v7 == 84)
  {
    uint64_t v9 = *((void *)this - 4);
    if (!v9
      || *(unsigned char *)(v9 + 16)
      || *(void *)(v9 + 24) != *((void *)this + 9)
      || (uint64_t v10 = this, (*(unsigned char *)(v9 + 33) & 0x20) == 0))
    {
LABEL_9:
      uint64_t v11 = *((void *)this - 4);
      if (!v11 || *(unsigned char *)(v11 + 16) || *(void *)(v11 + 24) != *((void *)this + 9))
      {
        if (v7 == 84)
        {
          uint64_t v12 = 0;
        }
        else if (v7 == 39)
        {
          uint64_t v12 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          uint64_t v12 = 2;
        }
        int v13 = 0;
        int v14 = *((_DWORD *)this + 5);
        uint64_t v15 = -(uint64_t)(v14 & 0x7FFFFFF);
        if (v14 < 0)
        {
          unint64_t v114 = (char *)this - 32 * (v14 & 0x7FFFFFF);
          uint64_t v115 = *((void *)v114 - 1);
          if ((v115 & 0xFFFFFFFF0) != 0) {
            int v13 = *((_DWORD *)v114 - 3) - *(_DWORD *)&v114[-v115];
          }
          else {
            int v13 = 0;
          }
        }
        return ((-32 * v12 + 32 * (unint64_t)-v13 - 32 * v15 - 32) >> 5) + 1;
      }
      if (sub_1CB9091FC(a1, *((uint64_t ****)this - 4))) {
        return *(unsigned int *)(*(void *)(v11 + 24) + 12);
      }
      return 1;
    }
  }
  else
  {
LABEL_16:
    uint64_t v10 = 0;
  }
  int v17 = *((_DWORD *)this + 5);
  uint64_t v18 = v17 & 0x7FFFFFF;
  if ((v17 & 0x7FFFFFF) == 1)
  {
    if ((v17 & 0x40000000) != 0) {
      uint64_t v19 = (llvm::Type *****)*((void *)this - 1);
    }
    else {
      uint64_t v19 = (llvm::Type *****)((char *)this - 32);
    }
    BOOL v20 = **v19;
  }
  else
  {
    BOOL v20 = 0;
  }
  uint64_t v21 = *(void *)this;
  if (v7 <= 0x1B)
  {
    if (v7 != 5) {
      return 1;
    }
    uint64_t v8 = *((unsigned __int16 *)this + 9);
  }
  if (v7 <= 0x1B) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = this;
  }
  unint64_t v16 = 0;
  uint64_t v23 = a1 - 8;
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if (a5) {
        BOOL v39 = v8 == 55;
      }
      else {
        BOOL v39 = 0;
      }
      return !v39;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      LODWORD(v121) = 0;
      LODWORD(v119) = 0;
      if ((v17 & 0x40000000) != 0) {
        uint64_t v24 = (uint64_t *)*((void *)this - 1);
      }
      else {
        uint64_t v24 = (uint64_t *)((char *)this - 32 * v18);
      }
      unsigned int OperandInfo = llvm::TargetTransformInfo::getOperandInfo(*v24, &v121);
      if (v8 == 12)
      {
        unsigned int v28 = 0;
      }
      else
      {
        int v29 = *((_DWORD *)this + 5);
        if ((v29 & 0x40000000) != 0) {
          BOOL v30 = (char *)*((void *)this - 1);
        }
        else {
          BOOL v30 = (char *)this - 32 * (v29 & 0x7FFFFFF);
        }
        unsigned int v28 = llvm::TargetTransformInfo::getOperandInfo(*((void *)v30 + 4), &v119);
      }
      int v31 = *((_DWORD *)this + 5);
      if ((v31 & 0x40000000) != 0)
      {
        unsigned int v33 = (uint64_t *)*((void *)this - 1);
        unint64_t v32 = v31 & 0x7FFFFFF;
      }
      else
      {
        unint64_t v32 = v31 & 0x7FFFFFF;
        unsigned int v33 = (uint64_t *)((char *)this - 32 * v32);
      }
      uint64_t v123 = &v125;
      uint64_t v124 = 0x200000000;
      if (v32 >= 3) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v32)
      {
        uint64_t v34 = 32 * v32;
        unint64_t v35 = &v125;
        do
        {
          uint64_t v36 = *v33;
          v33 += 4;
          *v35++ = v36;
          v34 -= 32;
        }
        while (v34);
        unint64_t v37 = (uint64_t *)v123;
      }
      else
      {
        unint64_t v37 = &v125;
      }
      LODWORD(v124) = v32;
      unint64_t v16 = sub_1CBC20CFC(v23, v8, v21, a5, OperandInfo, v28, v121, v119, (uint64_t)v37, v32, (uint64_t)v22);
      unint64_t v38 = v123;
      if (v123 != &v125) {
        goto LABEL_51;
      }
      return v16;
    case 31:
      if (*(unsigned char *)(*((void *)this - 4) + 16) != 16) {
        return 1;
      }
      uint64_t v41 = *((void *)this + 5);
      uint64_t v42 = *(void *)(*(void *)(v41 + 56) + 80);
      uint64_t v43 = v42 ? v42 - 24 : 0;
      return v41 != v43 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 32:
      if (a5 == 2)
      {
        uint64_t v54 = *((void *)this + 1);
        if (v54)
        {
          if (!*(void *)(v54 + 8) && (*(_DWORD *)(v21 + 8) & 0xFE) != 0x12)
          {
            uint64_t v55 = *(void *)(v54 + 24);
            if (v55)
            {
              if (*(unsigned char *)(v55 + 16) == 66) {
                uint64_t v21 = *(void *)v55;
              }
            }
          }
        }
      }
      uint64_t v56 = **((void **)this - 4);
      unsigned int v57 = *(_DWORD *)(v56 + 8);
      if ((v57 & 0xFE) == 0x12) {
        unsigned int v57 = *(_DWORD *)(**(void **)(v56 + 16) + 8);
      }
      if (a5) {
        return 1;
      }
      unint64_t v58 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      uint64_t v59 = v57 >> 8;
      uint64_t v60 = a1 - 8;
      int v61 = 32;
      BOOL v62 = (llvm::EVT *)v21;
      return sub_1CD424E58(v60, v61, v62, v58, v59, 0);
    case 33:
      if ((v17 & 0x40000000) != 0) {
        size_t v53 = (llvm::EVT ***)*((void *)this - 1);
      }
      else {
        size_t v53 = (llvm::EVT ***)((char *)this - 32 * v18);
      }
      uint64_t v71 = **((void **)this - 4);
      unsigned int v72 = *(_DWORD *)(v71 + 8);
      if ((v72 & 0xFE) == 0x12) {
        unsigned int v72 = *(_DWORD *)(**(void **)(v71 + 16) + 8);
      }
      if (a5) {
        return 1;
      }
      BOOL v62 = **v53;
      unint64_t v58 = ((unint64_t)*((unsigned __int16 *)this + 9) >> 1) & 0x3F | 0x100;
      uint64_t v59 = v72 >> 8;
      uint64_t v60 = a1 - 8;
      int v61 = 33;
      return sub_1CD424E58(v60, v61, v62, v58, v59, 0);
    case 34:
      BOOL v39 = v7 == 62;
      uint64_t v44 = 24;
      if (v39) {
        uint64_t v44 = 64;
      }
      uint64_t v45 = *(void *)((char *)this + v44);
      if ((v17 & 0x40000000) != 0) {
        uint64_t v46 = (llvm::Value **)*((void *)this - 1);
      }
      else {
        uint64_t v46 = (llvm::Value **)((char *)this - 32 * v18);
      }
      return sub_1CBA8813C((llvm::DataLayout **)a1, v45, *v46, (llvm::Constant **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      unsigned int CastContextHint = llvm::TargetTransformInfo::getCastContextHint((uint64_t)v22);
      return sub_1CBC213DC(v23, v8, (llvm::Type ***)v21, v20, CastContextHint, a5, (uint64_t)v22);
    case 53:
    case 54:
      if ((v17 & 0x40000000) != 0) {
        unsigned __int8 v40 = (uint64_t **)*((void *)this - 1);
      }
      else {
        unsigned __int8 v40 = (uint64_t **)((char *)this - 32 * v18);
      }
      if (v22) {
        unsigned int v47 = *((_WORD *)v22 + 9) & 0x3F;
      }
      else {
        unsigned int v47 = 42;
      }
      return sub_1CBC21D98(a1 - 8, v8, **v40, *(void *)this, v47, a5, (uint64_t)v22);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v123, *(_DWORD *)(*((void *)this - 4) + 36), (uint64_t)v10, 0, 1);
      unint64_t v16 = sub_1CBC202A4(v23, (uint64_t)&v123, a5);
      if (v128 != v129) {
        free(v128);
      }
      unint64_t v38 = v126;
      if (v126 != &v127) {
LABEL_51:
      }
        free(v38);
      return v16;
    case 57:
      *(void *)uint64_t v118 = 0;
      uint64_t v119 = 0;
      uint64_t v123 = &v119;
      uint64_t v124 = (uint64_t)v118;
      if ((sub_1CB90D004((void **)&v123, (uint64_t)this) & 1) != 0
        || (uint64_t v121 = (llvm::Type *)&v119, v122 = v118, (sub_1CB90D1A4((void **)&v121, (uint64_t)this) & 1) != 0))
      {
        LODWORD(v121) = 0;
        int v117 = 0;
        unsigned int v48 = llvm::TargetTransformInfo::getOperandInfo(v119, &v121);
        unsigned int v49 = llvm::TargetTransformInfo::getOperandInfo(*(uint64_t *)v118, &v117);
        uint64_t v123 = &v125;
        uint64_t v125 = v119;
        unint64_t v126 = *(uint64_t **)v118;
        uint64_t v124 = 0x200000002;
        if (sub_1CB90D2C0((uint64_t)v116, (unsigned __int8 *)this)) {
          unsigned int v50 = 29;
        }
        else {
          unsigned int v50 = 28;
        }
        unint64_t v16 = sub_1CBC20CFC(v23, v50, v21, a5, v48, v49, v121, v117, (uint64_t)v123, v124, (uint64_t)v22);
        if (v123 != &v125) {
          free(v123);
        }
      }
      else
      {
        int v73 = *((_DWORD *)this + 5);
        if ((v73 & 0x40000000) != 0) {
          std::string::size_type v74 = (uint64_t **)*((void *)this - 1);
        }
        else {
          std::string::size_type v74 = (uint64_t **)((char *)this - 32 * (v73 & 0x7FFFFFF));
        }
        return sub_1CBC21D98(v23, 0x39u, *(void *)this, **v74, 0x2Au, a5, (uint64_t)v22);
      }
      return v16;
    case 61:
      if (v7 != 89) {
        return 1;
      }
      if ((v17 & 0x40000000) != 0) {
        uint64_t v52 = (uint64_t **)*((void *)this - 1);
      }
      else {
        uint64_t v52 = (uint64_t **)((char *)this - 32 * v18);
      }
      uint64_t v83 = **v52;
      unint64_t v84 = *(void *)(a1 + 24);
      if ((*(_DWORD *)(v83 + 8) & 0xFE) == 0x12) {
        uint64_t v83 = **(void **)(v83 + 16);
      }
      unint64_t v85 = *(llvm::LLVMContext **)v83;
      unint64_t v86 = sub_1CB87DC14(*(void *)(a1 + 24), *(void *)a1, (llvm::EVT *)v83, 0);
      uint64_t v88 = v87;
      uint64_t v119 = 1;
      LODWORD(v120) = 0;
      while (2)
      {
        llvm::TargetLoweringBase::getTypeConversion(v84, v85, v86, v88, (uint64_t)&v123);
        if (!(_BYTE)v123) {
          return v119;
        }
        if (v123 == 10) {
          return 0;
        }
        if ((v123 & 0xFB) == 2)
        {
          uint64_t v121 = (llvm::Type *)2;
          LODWORD(v122) = 0;
          sub_1CB90C9D4((uint64_t)&v119, (uint64_t)&v121);
        }
        int v89 = v86;
        unint64_t v86 = v124;
        if (v89 != v124)
        {
          uint64_t v90 = v125;
LABEL_155:
          uint64_t v88 = v90;
          continue;
        }
        break;
      }
      if (!v89)
      {
        uint64_t v90 = v125;
        if (v88 != v125) {
          goto LABEL_155;
        }
      }
      return v119;
    case 62:
      if (v7 != 90) {
        return 1;
      }
      unint64_t v63 = *(void *)(a1 + 24);
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
        uint64_t v21 = **(void **)(v21 + 16);
      }
      std::string::size_type v64 = *(llvm::Type ***)v21;
      unint64_t v65 = sub_1CB87DC14(*(void *)(a1 + 24), *(void *)a1, (llvm::EVT *)v21, 0);
      uint64_t v67 = v66;
      uint64_t v119 = 1;
      LODWORD(v120) = 0;
      while (2)
      {
        llvm::TargetLoweringBase::getTypeConversion(v63, (llvm::LLVMContext *)v64, v65, v67, (uint64_t)&v123);
        if (!(_BYTE)v123) {
          return v119;
        }
        if (v123 == 10) {
          return 0;
        }
        if ((v123 & 0xFB) == 2)
        {
          uint64_t v121 = (llvm::Type *)2;
          LODWORD(v122) = 0;
          sub_1CB90C9D4((uint64_t)&v119, (uint64_t)&v121);
        }
        int v68 = v65;
        unint64_t v65 = v124;
        if (v68 == v124)
        {
          if (v68) {
            return v119;
          }
          uint64_t v69 = v125;
          if (v67 == v125) {
            return v119;
          }
        }
        else
        {
          uint64_t v69 = v125;
        }
        uint64_t v67 = v69;
        continue;
      }
    case 63:
      if (v7 != 91) {
        return 1;
      }
      if ((v17 & 0x40000000) != 0) {
        uint64_t v51 = (uint64_t **)*((void *)this - 1);
      }
      else {
        uint64_t v51 = (uint64_t **)((char *)this - 32 * v18);
      }
      uint64_t v75 = **v51;
      LODWORD(v121) = 0;
      LODWORD(v119) = 0;
      uint64_t v76 = (uint64_t *)*((void *)this - 8);
      uint64_t v77 = *v76;
      uint64_t v78 = *(unsigned int *)(*v76 + 32);
      uint64_t v79 = *((unsigned int *)this + 18);
      if (v78 != v79)
      {
        if (v78 >= v79 || (llvm::ShuffleVectorInst::isIdentityWithPadding(this) & 1) == 0)
        {
          if (*(unsigned char *)(v21 + 8) == 19) {
            goto LABEL_141;
          }
          unint64_t v92 = (int *)*((void *)this + 8);
          if (llvm::ShuffleVectorInst::isExtractSubvectorMask(v92, v79, v78, (int *)&v119))
          {
            uint64_t v81 = v23;
            int v82 = 5;
            uint64_t v93 = v75;
            unsigned int v94 = v92;
            uint64_t v95 = v79;
            uint64_t v96 = v21;
            return sub_1CBC21F88(v81, v82, v93, v94, v95, v96);
          }
          if (*(unsigned char *)(v21 + 8) == 19
            || !llvm::ShuffleVectorInst::isInsertSubvectorMask(v92, v79, *(_DWORD *)(v77 + 32), &v121, (signed int *)&v119))
          {
LABEL_141:
            int v117 = 0;
            v118[0] = 0;
            if (llvm::ShuffleVectorInst::isReplicationMask(this, v118, &v117))
            {
              unsigned int v109 = *((_DWORD *)this + 18);
              LODWORD(v124) = v109;
              if (v109 > 0x40) {
                operator new[]();
              }
              unint64_t v110 = 0;
              uint64_t v123 = 0;
              if (v109)
              {
                uint64_t v111 = 0;
                uint64_t v112 = *((void *)this + 8);
                uint64_t v113 = 4 * v109;
                do
                {
                  if (*(_DWORD *)(v112 + 4 * v111) != -1)
                  {
                    v110 |= 1 << v111;
                    uint64_t v123 = (void *)v110;
                  }
                  ++v111;
                  v113 -= 4;
                }
                while (v113);
              }
              unint64_t v16 = sub_1CD42B708(v23, *(llvm::FixedVectorType **)(v75 + 24), v118[0], (llvm::Type *)v117, (llvm::APIntOps *)&v123);
              if (v124 >= 0x41 && v123) {
                MEMORY[0x1D25D9CB0](v123, 0x1000C8000313F17);
              }
            }
            else if (a5)
            {
              return 1;
            }
            else
            {
              return -1;
            }
            return v16;
          }
          uint64_t v97 = (int *)*((void *)this + 8);
          uint64_t v98 = *((unsigned int *)this + 18);
          uint64_t v99 = (llvm::FixedVectorType *)v21;
          if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
            uint64_t v99 = **(llvm::FixedVectorType ***)(v21 + 16);
          }
          llvm::FixedVectorType::get(v99, (llvm::Type *)v121);
          uint64_t v96 = v100;
          uint64_t v81 = v23;
          int v82 = 4;
          uint64_t v93 = v21;
          unsigned int v94 = v97;
          uint64_t v95 = v98;
          return sub_1CBC21F88(v81, v82, v93, v94, v95, v96);
        }
        return 0;
      }
      uint64_t v80 = (int *)*((void *)this + 8);
      if (sub_1CC5D47FC(v80, *(unsigned int *)(*v76 + 32), *(_DWORD *)(*v76 + 32))) {
        return 0;
      }
      if (llvm::ShuffleVectorInst::isReverseMask(v80, v78))
      {
        uint64_t v81 = v23;
        int v82 = 1;
LABEL_202:
        uint64_t v93 = v21;
        unsigned int v94 = v80;
        uint64_t v95 = v78;
        uint64_t v96 = 0;
        return sub_1CBC21F88(v81, v82, v93, v94, v95, v96);
      }
      if (llvm::ShuffleVectorInst::isSelectMask(v80, v78))
      {
        uint64_t v81 = v23;
        int v82 = 2;
        goto LABEL_202;
      }
      if (llvm::ShuffleVectorInst::isTransposeMask(v80, v78))
      {
        uint64_t v81 = v23;
        int v82 = 3;
        goto LABEL_202;
      }
      if (llvm::ShuffleVectorInst::isZeroEltSplatMask(v80, v78))
      {
        uint64_t v81 = v23;
        int v82 = 0;
        goto LABEL_202;
      }
      if (v78)
      {
        char v101 = 0;
        char v102 = 0;
        uint64_t v103 = 4 * v78;
        uint64_t v104 = v80;
        while (1)
        {
          int v105 = *v104;
          if (*v104 != -1)
          {
            v101 |= v105 < (int)v78;
            v102 |= v105 >= (int)v78;
            if (v101 & 1) != 0 && (v102) {
              break;
            }
          }
          ++v104;
          v103 -= 4;
          if (!v103)
          {
            if (v101) {
              goto LABEL_201;
            }
            goto LABEL_184;
          }
        }
      }
      else
      {
        char v102 = 0;
LABEL_184:
        if (v102)
        {
LABEL_201:
          uint64_t v81 = v23;
          int v82 = 7;
          goto LABEL_202;
        }
      }
      if (*(unsigned char *)(v21 + 8) == 19
        || (isInsertSubvectorMask = llvm::ShuffleVectorInst::isInsertSubvectorMask(v80, v78, v78, &v121, (signed int *)&v119), uint64_t v78 = *((unsigned int *)this + 18), v80 = (int *)*((void *)this + 8), !isInsertSubvectorMask))
      {
        uint64_t v81 = v23;
        int v82 = 6;
        goto LABEL_202;
      }
      unsigned int v107 = (llvm::FixedVectorType *)v21;
      if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12) {
        unsigned int v107 = **(llvm::FixedVectorType ***)(v21 + 16);
      }
      llvm::FixedVectorType::get(v107, (llvm::Type *)v121);
      uint64_t v96 = v108;
      uint64_t v81 = v23;
      int v82 = 4;
      uint64_t v93 = v21;
      unsigned int v94 = v80;
      uint64_t v95 = v78;
      return sub_1CBC21F88(v81, v82, v93, v94, v95, v96);
    case 64:
    case 67:
      return v16;
    default:
      return 1;
  }
}

uint64_t sub_1CBC202A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 8;
  uint64_t v7 = sub_1CB90A9F8(a1 + 8, a2);
  BOOL v9 = v7 < 0;
  if (v8) {
    BOOL v9 = v8 < 0;
  }
  if (!v9)
  {
    BOOL v10 = v8 < 1;
    if (!v8) {
      BOOL v10 = v7 < 1;
    }
    if (v10) {
      return 0;
    }
  }
  int v12 = *(_DWORD *)(a2 + 16);
  if (v12 > 0x181) {
    return 1;
  }
  unsigned int v13 = *(_DWORD *)(a2 + 80);
  if (!v13) {
    return sub_1CBC22938(a1, a2, a3);
  }
  uint64_t v14 = *(void *)(a2 + 8);
  int v15 = *(_DWORD *)(v14 + 8);
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
    unint64_t v16 = *(unsigned int *)(v14 + 32) | ((unint64_t)(v15 == 19) << 32);
  }
  else {
    unint64_t v16 = 1;
  }
  uint64_t v18 = *(void *)a2;
  int v19 = *(_DWORD *)(a2 + 120);
  if (v12 <= 185)
  {
    if (v12 <= 147)
    {
      switch(v12)
      {
        case 130:
          if (v15 == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          return 1;
        case 131:
          if (v15 == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          uint64_t v48 = ***(void ***)(a2 + 72);
          uint64_t v49 = a1;
          int v50 = 5;
          goto LABEL_65;
        case 132:
          uint64_t v51 = *(uint64_t ***)(a2 + 72);
          uint64_t v52 = *v51[1];
          if (*(unsigned char *)(v52 + 8) == 19) {
            return sub_1CB90A9F8(v6, a2);
          }
          uint64_t v48 = **v51;
          uint64_t v49 = a1;
          int v50 = 4;
          return sub_1CBC21F88(v49, v50, v48, 0, 0, v52);
        case 133:
          uint64_t v48 = ***(void ***)(a2 + 72);
          uint64_t v49 = a1;
          int v50 = 1;
          goto LABEL_65;
        case 134:
          uint64_t v48 = ***(void ***)(a2 + 72);
          uint64_t v49 = a1;
          int v50 = 8;
LABEL_65:
          uint64_t v52 = *(void *)(a2 + 8);
          return sub_1CBC21F88(v49, v50, v48, 0, 0, v52);
        default:
          if (v12 == 52)
          {
            if (v16 != 1) {
              goto LABEL_108;
            }
            char v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 224))(*(void *)(a1 + 32));
          }
          else
          {
            if (v12 != 54 || v16 != 1) {
              goto LABEL_108;
            }
            char v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 216))(*(void *)(a1 + 32));
          }
          unint64_t v53 = 0;
          unint64_t v11 = 1;
          if (v33) {
            return v11;
          }
          break;
      }
      goto LABEL_118;
    }
    if ((v12 - 148) >= 2)
    {
      if (v12 == 153)
      {
        unint64_t v37 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), *(llvm::EVT **)(a2 + 8), (llvm::Type *)1);
        uint64_t v39 = v38;
        unint64_t v40 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), **(llvm::EVT ***)(a2 + 24), (llvm::Type *)1);
        if ((*(uint64_t (**)(void, unint64_t, uint64_t, unint64_t, uint64_t))(**(void **)(a1 + 32) + 104))(*(void *)(a1 + 32), v37, v39, v40, v41))
        {
          uint64_t v42 = **(uint64_t ****)(a2 + 24);
          uint64_t v43 = (llvm::Type *)*(unsigned int *)(v14 + 32);
          if (*(unsigned char *)(v14 + 8) == 19) {
            llvm::ScalableVectorType::get(v42, v43);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v42, v43);
          }
          uint64_t v45 = v44;
          uint64_t v102 = 0;
          unint64_t v103 = v44;
          LODWORD(v104) = 300;
          int v105 = v107;
          uint64_t v108 = v110;
          uint64_t v109 = 0x400000000;
          int v111 = v19;
          long long v112 = xmmword_1CD96D880;
          uint64_t v106 = 0x400000000;
          unint64_t v46 = sub_1CBC22938(a1, (uint64_t)&v102, a3);
          unint64_t v47 = sub_1CBC21D98(a1, 0x35u, v45, v14, 0x24u, a3, 0);
          if (__OFADD__(v46, v47)) {
            unint64_t v11 = ((uint64_t)(v46 + v47) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v11 = v46 + v47;
          }
          if (v108 != v110) {
            free(v108);
          }
          uint64_t v22 = v105;
          if (v105 != v107) {
            goto LABEL_24;
          }
        }
        else
        {
          unint64_t v54 = *(void *)(a1 + 32);
          uint64_t v55 = *(void *)(a1 + 8);
          uint64_t v56 = *(llvm::LLVMContext **)v14;
          unint64_t v57 = sub_1CB87DC14(v54, v55, (llvm::EVT *)v14, 0);
          uint64_t v59 = v58;
          uint64_t v100 = 1;
          LODWORD(v101) = 0;
          while (1)
          {
            llvm::TargetLoweringBase::getTypeConversion(v54, v56, v57, v59, (uint64_t)&v102);
            if (!(_BYTE)v102) {
              return v100;
            }
            if (v102 == 10) {
              break;
            }
            if ((v102 & 0xFB) == 2)
            {
              uint64_t __src = 2;
              LODWORD(v114) = 0;
              sub_1CB90C9D4((uint64_t)&v100, (uint64_t)&__src);
            }
            int v60 = v57;
            unint64_t v57 = v103;
            if (v60 == v103)
            {
              if (v60) {
                return v100;
              }
              uint64_t v61 = v104;
              if (v59 == v104) {
                return v100;
              }
            }
            else
            {
              uint64_t v61 = v104;
            }
            uint64_t v59 = v61;
          }
          return 0;
        }
        return v11;
      }
      if (v12 == 184)
      {
        uint64_t v89 = *(void *)(a2 + 72);
        uint64_t v90 = *(void *)(v89 + 8);
        unsigned int v91 = *(unsigned __int8 *)(*(void *)(v89 + 16) + 16);
        unint64_t v92 = (unint64_t *)(v90 + 24);
        if (*(_DWORD *)(v90 + 32) >= 0x41u) {
          unint64_t v92 = (unint64_t *)*v92;
        }
        BOOL v66 = v91 > 0x14;
        unint64_t v93 = *v92;
        unint64_t v94 = __clz(v93) ^ 0x3F;
        if (v93) {
          unsigned __int8 v70 = v94;
        }
        else {
          unsigned __int8 v70 = 0;
        }
        uint64_t v71 = a1;
        int v72 = 32;
        uint64_t v69 = *(void *)(a2 + 8);
        return sub_1CD42BBC8(v71, v72, v69, v70, v66, 1, a3);
      }
      goto LABEL_108;
    }
    if (v15 != 19)
    {
      uint64_t v24 = *(uint64_t **)(a2 + 72);
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      uint64_t v27 = v24[2];
      LODWORD(v102) = 0;
      LODWORD(__src) = 0;
      LODWORD(v100) = 0;
      uint64_t v99 = v25;
      unsigned int OperandInfo = llvm::TargetTransformInfo::getOperandInfo(v25, &v102);
      unsigned int v29 = llvm::TargetTransformInfo::getOperandInfo(v26, &__src);
      unsigned int v30 = llvm::TargetTransformInfo::getOperandInfo(v27, &v100);
      int v31 = (llvm::Type *)v14;
      if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12) {
        int v31 = **(llvm::Type ***)(v14 + 16);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v31);
      if (PrimitiveSizeInBits) {
        unsigned int v98 = (PrimitiveSizeInBits & (PrimitiveSizeInBits - 1)) == 0;
      }
      else {
        unsigned int v98 = 0;
      }
      unint64_t v73 = sub_1CBC20CFC(a1, 0x1Du, v14, a3, 0, 0, 0, 0, 0, 0, 0);
      unint64_t v74 = sub_1CBC20CFC(a1, 0xFu, v14, a3, 0, 0, 0, 0, 0, 0, 0);
      if (__OFADD__(v73, v74)) {
        unint64_t v75 = ((uint64_t)(v73 + v74) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v75 = v73 + v74;
      }
      unint64_t v76 = sub_1CBC20CFC(a1, 0x19u, v14, a3, OperandInfo, v30, v102, 0, 0, 0, 0);
      if (__OFADD__(v75, v76)) {
        unint64_t v77 = ((uint64_t)(v75 + v76) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v77 = v75 + v76;
      }
      unint64_t v78 = sub_1CBC20CFC(a1, 0x1Au, v14, a3, v29, v30, __src, 0, 0, 0, 0);
      if (__OFADD__(v77, v78)) {
        unint64_t v11 = ((uint64_t)(v77 + v78) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v11 = v77 + v78;
      }
      if (v30 - 4 <= 0xFFFFFFFD)
      {
        unint64_t v79 = sub_1CBC20CFC(a1, 0x16u, v14, a3, v30, 2u, v100, v98, 0, 0, 0);
        if (__OFADD__(v11, v79)) {
          unint64_t v11 = ((uint64_t)(v11 + v79) >> 63) ^ 0x8000000000000000;
        }
        else {
          v11 += v79;
        }
      }
      if (v99 != v26)
      {
        uint64_t v80 = **(void **)v14 + 1888;
        if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
        {
          uint64_t v95 = (llvm::Type *)*(unsigned int *)(v14 + 32);
          uint64_t v96 = (uint64_t **)(**(void **)v14 + 1888);
          if (*(_DWORD *)(v14 + 8) == 19) {
            llvm::ScalableVectorType::get(v96, v95);
          }
          else {
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v96, v95);
          }
          uint64_t v80 = v97;
        }
        unint64_t v81 = sub_1CBC21D98(a1, 0x35u, v14, v80, 0x20u, a3, 0);
        if (__OFADD__(v11, v81)) {
          unint64_t v82 = ((uint64_t)(v11 + v81) >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v82 = v11 + v81;
        }
        unint64_t v83 = sub_1CBC21D98(a1, 0x39u, v14, v80, 0x20u, a3, 0);
        if (__OFADD__(v82, v83)) {
          return ((uint64_t)(v82 + v83) >> 63) ^ 0x8000000000000000;
        }
        else {
          return v82 + v83;
        }
      }
      return v11;
    }
    return sub_1CB90A9F8(v6, a2);
  }
  if ((v12 - 317) <= 0xC)
  {
    if (((1 << (v12 - 61)) & 0x1FDB) != 0)
    {
      uint64_t __src = ***(void ***)(a2 + 72);
      uint64_t v102 = v18;
      unint64_t v103 = v14;
      LODWORD(v104) = v12;
      int v105 = v107;
      uint64_t v106 = 0x400000000;
      uint64_t v108 = v110;
      uint64_t v109 = 0x400000000;
      int v111 = v19;
      long long v112 = xmmword_1CD91D2E0;
      BOOL v20 = (char *)&v114;
    }
    else
    {
      uint64_t v34 = *(uint64_t ***)(a2 + 72);
      uint64_t v36 = *v34;
      unint64_t v35 = v34[1];
      uint64_t __src = *v36;
      uint64_t v114 = *v35;
      uint64_t v102 = v18;
      unint64_t v103 = v14;
      LODWORD(v104) = v12;
      int v105 = v107;
      uint64_t v106 = 0x400000000;
      uint64_t v108 = v110;
      uint64_t v109 = 0x400000000;
      int v111 = v19;
      long long v112 = xmmword_1CD91D2E0;
      BOOL v20 = (char *)&v115;
    }
    p_src = (char *)&__src;
    goto LABEL_21;
  }
  if (v12 == 194) {
    return 4;
  }
  if (v12 == 186)
  {
    uint64_t v62 = *(void *)(a2 + 72);
    uint64_t v63 = *(void *)(v62 + 16);
    unsigned int v64 = *(unsigned __int8 *)(*(void *)(v62 + 24) + 16);
    unint64_t v65 = (unint64_t *)(v63 + 24);
    if (*(_DWORD *)(v63 + 32) >= 0x41u) {
      unint64_t v65 = (unint64_t *)*v65;
    }
    BOOL v66 = v64 > 0x14;
    unint64_t v67 = *v65;
    unint64_t v68 = __clz(v67) ^ 0x3F;
    uint64_t v69 = **(void **)(a2 + 24);
    if (v67) {
      unsigned __int8 v70 = v68;
    }
    else {
      unsigned __int8 v70 = 0;
    }
    uint64_t v71 = a1;
    int v72 = 33;
    return sub_1CD42BBC8(v71, v72, v69, v70, v66, 1, a3);
  }
LABEL_108:
  unint64_t v53 = 0;
  unint64_t v11 = 1;
  if (!HIDWORD(v16) && v16 >= 2)
  {
    if (v15 == 7)
    {
      unint64_t v11 = 0;
      unint64_t v84 = 0;
    }
    else
    {
      unint64_t v84 = sub_1CBBE5D64(a1, *(void *)(a2 + 8), 1, 0);
      unint64_t v11 = v85 == 1;
      unsigned int v13 = *(_DWORD *)(a2 + 80);
    }
    unint64_t v86 = sub_1CBC2467C(a1, *(void *)(a2 + 72), v13, *(void *)(a2 + 24));
    if (v87 == 1) {
      unint64_t v11 = 1;
    }
    if (__OFADD__(v84, v86)) {
      unint64_t v53 = ((uint64_t)(v84 + v86) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v53 = v84 + v86;
    }
  }
LABEL_118:
  p_src = *(char **)(a2 + 24);
  uint64_t v88 = *(unsigned int *)(a2 + 32);
  uint64_t v102 = v18;
  unint64_t v103 = v14;
  LODWORD(v104) = v12;
  int v105 = v107;
  uint64_t v106 = 0x400000000;
  uint64_t v108 = v110;
  uint64_t v109 = 0x400000000;
  int v111 = v19;
  BOOL v20 = &p_src[8 * v88];
  *(void *)&long long v112 = v53;
  *((void *)&v112 + 1) = v11;
LABEL_21:
  sub_1CC1587C8((uint64_t)&v105, (uint64_t)v107, p_src, v20);
  unint64_t v11 = sub_1CBC22938(a1, (uint64_t)&v102, a3);
  if (v108 != v110) {
    free(v108);
  }
  uint64_t v22 = v105;
  if (v105 != v107) {
LABEL_24:
  }
    free(v22);
  return v11;
}

unint64_t sub_1CBC20CFC(uint64_t a1, unsigned int a2, uint64_t a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, unint64_t a10, uint64_t a11)
{
  v52[7] = *MEMORY[0x1E4F143B8];
  int v11 = 0;
  unsigned int v12 = 0;
  switch(a2)
  {
    case 0xCu:
      int v11 = 0;
      unsigned int v12 = 222;
      break;
    case 0xDu:
      int v11 = 0;
      unsigned int v12 = 56;
      break;
    case 0xEu:
      int v11 = 0;
      unsigned int v12 = 96;
      break;
    case 0xFu:
      int v11 = 0;
      unsigned int v12 = 57;
      break;
    case 0x10u:
      int v11 = 0;
      unsigned int v12 = 97;
      break;
    case 0x11u:
      int v11 = 0;
      unsigned int v12 = 58;
      break;
    case 0x12u:
      int v11 = 0;
      unsigned int v12 = 98;
      break;
    case 0x13u:
      int v11 = 0;
      unsigned int v12 = 60;
      break;
    case 0x14u:
      int v11 = 0;
      unsigned int v12 = 59;
      break;
    case 0x15u:
      int v11 = 0;
      unsigned int v12 = 99;
      break;
    case 0x16u:
      int v11 = 0;
      unsigned int v12 = 62;
      break;
    case 0x17u:
      unsigned int v12 = 61;
      int v11 = 1;
      break;
    case 0x18u:
      int v11 = 0;
      unsigned int v12 = 100;
      break;
    case 0x19u:
      int v11 = 0;
      unsigned int v12 = 175;
      break;
    case 0x1Au:
      int v11 = 0;
      unsigned int v12 = 177;
      break;
    case 0x1Bu:
      int v11 = 0;
      unsigned int v12 = 176;
      break;
    case 0x1Cu:
      int v11 = 0;
      unsigned int v12 = 171;
      break;
    case 0x1Du:
      int v11 = 0;
      unsigned int v12 = 172;
      break;
    case 0x1Eu:
      int v11 = 0;
      unsigned int v12 = 173;
      break;
    case 0x20u:
      int v11 = 0;
      unsigned int v12 = 253;
      break;
    case 0x21u:
      int v11 = 0;
      unsigned int v12 = 254;
      break;
    case 0x26u:
      int v11 = 0;
      unsigned int v12 = 201;
      break;
    case 0x27u:
      int v11 = 0;
      unsigned int v12 = 199;
      break;
    case 0x28u:
      int v11 = 0;
      unsigned int v12 = 198;
      break;
    case 0x29u:
      int v11 = 0;
      unsigned int v12 = 209;
      break;
    case 0x2Au:
      int v11 = 0;
      unsigned int v12 = 208;
      break;
    case 0x2Bu:
      int v11 = 0;
      unsigned int v12 = 203;
      break;
    case 0x2Cu:
      int v11 = 0;
      unsigned int v12 = 202;
      break;
    case 0x2Du:
      int v11 = 0;
      unsigned int v12 = 212;
      break;
    case 0x2Eu:
      int v11 = 0;
      unsigned int v12 = 215;
      break;
    case 0x2Fu:
    case 0x30u:
    case 0x31u:
      int v11 = 0;
      unsigned int v12 = 216;
      break;
    case 0x32u:
      int v11 = 0;
      unsigned int v12 = 217;
      break;
    case 0x35u:
    case 0x36u:
      int v11 = 0;
      unsigned int v12 = 193;
      break;
    case 0x39u:
      int v11 = 0;
      unsigned int v12 = 190;
      break;
    case 0x3Du:
      int v11 = 0;
      unsigned int v12 = 148;
      break;
    case 0x3Eu:
      int v11 = 0;
      unsigned int v12 = 147;
      break;
    case 0x3Fu:
      int v11 = 0;
      unsigned int v12 = 153;
      break;
    case 0x40u:
    case 0x41u:
      int v11 = 0;
      unsigned int v12 = 55;
      break;
    case 0x43u:
      int v11 = 0;
      unsigned int v12 = 52;
      break;
    default:
      break;
  }
  if (!a4)
  {
    uint64_t v14 = *(llvm::TargetLoweringBase **)(a1 + 32);
    llvm::TargetLoweringBase::getTypeLegalizationCost(v14, *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v47);
    uint64_t v16 = a3;
    int v17 = *(_DWORD *)(a3 + 8);
    int v18 = *(_DWORD *)(a3 + 8) & 0xFE;
    unsigned int v19 = v17;
    if (v18 == 18) {
      unsigned int v19 = *(unsigned __int8 *)(**(void **)(a3 + 16) + 8);
    }
    BOOL v20 = v19 >= 7;
    uint64_t v21 = 1;
    if (!v20) {
      uint64_t v21 = 2;
    }
    unint64_t v22 = v21;
    uint64_t v45 = v21;
    LODWORD(v46) = 0;
    if (v48 && (v48 == 1 || *((void *)v14 + v48 + 12)))
    {
      unsigned int v23 = *((unsigned __int8 *)v14 + 390 * v48 + v12 + 3862);
      if (v23 <= 1)
      {
        *(_OWORD *)uint64_t v51 = v47;
LABEL_54:
        sub_1CB90C9D4((uint64_t)v51, (uint64_t)&v45);
        return (unint64_t)v51[0];
      }
      if (*((void *)v14 + v48 + 12)) {
        BOOL v24 = v23 == 2;
      }
      else {
        BOOL v24 = 1;
      }
      if (!v24)
      {
        uint64_t v49 = 2;
        int v50 = 0;
        *(_OWORD *)uint64_t v51 = v47;
        sub_1CB90C9D4((uint64_t)v51, (uint64_t)&v49);
        goto LABEL_54;
      }
    }
    if (v12 - 61 > 1) {
      goto LABEL_71;
    }
    uint64_t v25 = 65;
    if (!v11) {
      uint64_t v25 = 66;
    }
    if (!v48 || v48 != 1 && !*((void *)v14 + v48 + 12)) {
      goto LABEL_71;
    }
    if ((*((unsigned char *)v14 + 390 * v48 + v25 + 3862) & 0xFB) == 0) {
      goto LABEL_75;
    }
    uint64_t v26 = 59;
    if (!v11) {
      uint64_t v26 = 60;
    }
    if ((*((unsigned char *)v14 + 390 * v48 + v26 + 3862) & 0xFB) == 0)
    {
LABEL_75:
      if (v11) {
        uint64_t v27 = 20;
      }
      else {
        uint64_t v27 = 19;
      }
      uint64_t v28 = v16;
      uint64_t v29 = sub_1CBC20CFC(a1, v27, v16, 0, a5, a6, a7, a8, 0, 0, 0);
      uint64_t v30 = sub_1CBC20CFC(a1, 17, v16, 0, 0, 0, 0, 0, 0, 0, 0);
      uint64_t v31 = sub_1CBC20CFC(a1, 15, v28, 0, 0, 0, 0, 0, 0, 0, 0);
      unint64_t v32 = v29 + v30;
      if (__OFADD__(v29, v30)) {
        unint64_t v32 = ((v29 + v30) >> 63) ^ 0x8000000000000000;
      }
      BOOL v33 = __OFADD__(v32, v31);
      uint64_t v34 = v32 + v31;
      if (v33) {
        return (v34 >> 63) ^ 0x8000000000000000;
      }
      else {
        return v34;
      }
    }
    else
    {
LABEL_71:
      if (v17 == 19)
      {
        return 0;
      }
      else if (v17 == 18)
      {
        uint64_t v35 = v16;
        if (v18 == 18) {
          uint64_t v35 = **(void **)(v16 + 16);
        }
        v44[0] = sub_1CBC20CFC(a1, a2, v35, 0, a5, a6, a7, a8, a9, a10, a11);
        v44[1] = v36;
        v51[0] = v52;
        v51[1] = (void *)0x600000000;
        sub_1CB90CB08((uint64_t)v51, a10, v16);
        unint64_t v37 = sub_1CD42C238(a1, v16, a9, a10, (uint64_t)v51[0]);
        uint64_t v49 = *(unsigned int *)(v16 + 32);
        int v50 = 0;
        sub_1CB90C9D4((uint64_t)&v49, (uint64_t)v44);
        if (__OFADD__(v37, v49)) {
          unint64_t v22 = ((uint64_t)(v37 + v49) >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v22 = v37 + v49;
        }
        if (v51[0] != v52) {
          free(v51[0]);
        }
      }
    }
    return v22;
  }
  if (a2 - 19 >= 6) {
    return 1;
  }
  else {
    return 4;
  }
}

uint64_t sub_1CBC213DC(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10 = (uint64_t)a4;
  int v11 = a3;
  uint64_t v14 = (uint64_t *)(a1 + 8);
  uint64_t v15 = sub_1CB90CBC0((uint64_t *)(a1 + 8), a2, a3, a4);
  BOOL v17 = v15 < 0;
  if (v16) {
    BOOL v17 = v16 < 0;
  }
  if (!v17)
  {
    BOOL v18 = v16 < 1;
    if (!v16) {
      BOOL v18 = v15 < 1;
    }
    if (v18) {
      return 0;
    }
  }
  unsigned int v99 = a5;
  unsigned int v96 = a6;
  unint64_t v20 = *(void *)(a1 + 32);
  uint64_t v100 = qword_1CDC7F4E8[(int)a2 - 1];
  uint64_t v101 = a7;
  uint64_t v21 = *(llvm::LLVMContext **)v10;
  unint64_t v22 = sub_1CB87DC14(v20, *(void *)(a1 + 8), (llvm::EVT *)v10, 0);
  uint64_t v24 = v23;
  *(void *)&long long v102 = 1;
  DWORD2(v102) = 0;
  while (1)
  {
    int v25 = v22;
    llvm::TargetLoweringBase::getTypeConversion(v20, v21, v22, v24, (uint64_t)&v106);
    if (!(_BYTE)v106)
    {
LABEL_18:
      long long v27 = v102;
      goto LABEL_19;
    }
    if (v106 == 10) {
      break;
    }
    if ((v106 & 0xFB) == 2)
    {
      *(void *)&long long v104 = 2;
      DWORD2(v104) = 0;
      sub_1CB90C9D4((uint64_t)&v102, (uint64_t)&v104);
    }
    unint64_t v22 = *((void *)&v106 + 1);
    if (v25 == BYTE8(v106))
    {
      if (v25) {
        goto LABEL_18;
      }
      uint64_t v26 = v107;
      if (v24 == v107) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v26 = v107;
    }
    uint64_t v24 = v26;
  }
  if (!v25) {
    LOBYTE(v25) = 6;
  }
  long long v27 = xmmword_1CD96D880;
LABEL_19:
  long long v104 = v27;
  v105[0] = v25;
  uint64_t v28 = (llvm::LLVMContext *)*v11;
  unint64_t v29 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v11, 0);
  uint64_t v31 = v30;
  *(void *)&long long v108 = 1;
  DWORD2(v108) = 0;
  while (1)
  {
    int v32 = v29;
    llvm::TargetLoweringBase::getTypeConversion(v20, v28, v29, v31, (uint64_t)&v106);
    if (!(_BYTE)v106)
    {
LABEL_29:
      long long v34 = v108;
      goto LABEL_30;
    }
    if (v106 == 10) {
      break;
    }
    if ((v106 & 0xFB) == 2)
    {
      *(void *)&long long v102 = 2;
      DWORD2(v102) = 0;
      sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v102);
    }
    unint64_t v29 = *((void *)&v106 + 1);
    if (v32 == BYTE8(v106))
    {
      if (v32) {
        goto LABEL_29;
      }
      uint64_t v33 = v107;
      if (v31 == v107) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v33 = v107;
    }
    uint64_t v31 = v33;
  }
  if (!v32) {
    LOBYTE(v32) = 6;
  }
  long long v34 = xmmword_1CD96D880;
LABEL_30:
  long long v102 = v34;
  v103[0] = v32;
  uint64_t v98 = sub_1CB87E200(v105);
  int v36 = v35;
  uint64_t v97 = sub_1CB87E200(v103);
  int v95 = v38;
  unsigned int v39 = *(_DWORD *)(v10 + 8);
  unsigned int v40 = *((_DWORD *)v11 + 2);
  switch((int)a2)
  {
    case '&':
      char v41 = (*(uint64_t (**)(unint64_t, void, void, void, void))(*(void *)v20 + 1160))(v20, v105[0], 0, v103[0], 0);
      uint64_t result = 0;
      if ((v41 & 1) == 0) {
        goto LABEL_32;
      }
      return result;
    case '\'':
      char v44 = (*(uint64_t (**)(unint64_t, void, void, void, void))(*(void *)v20 + 1192))(v20, v105[0], 0, v103[0], 0);
      uint64_t result = 0;
      if ((v44 & 1) == 0) {
        goto LABEL_50;
      }
      return result;
    case '(':
LABEL_50:
      if (v101 && (sub_1CB90CE98(*(void *)(a1 + 32), v101, v37) & 1) != 0) {
        return 0;
      }
      if (v99 == 1)
      {
        unsigned __int8 EVT = llvm::EVT::getEVT((llvm::EVT *)v11, 0, v37);
        unsigned __int8 v47 = llvm::EVT::getEVT((llvm::EVT *)v10, 0, v46);
        BOOL v48 = (uint64_t)v102 < (uint64_t)v104;
        if (DWORD2(v102) != DWORD2(v104)) {
          BOOL v48 = SDWORD2(v102) < SDWORD2(v104);
        }
        if (!v48)
        {
          BOOL v49 = DWORD2(v102) == DWORD2(v104) ? (uint64_t)v104 >= (uint64_t)v102 : SDWORD2(v104) >= SDWORD2(v102);
          if (v49 && EVT && v47)
          {
            __int16 v50 = a2 == 39 ? -4096 : 3840;
            if (((unsigned __int16)v50 & *(_WORD *)(v20 + 358 * EVT + 2 * v47 + 73672)) == 0) {
              return 0;
            }
          }
        }
      }
      goto LABEL_69;
    case '.':
      if (v101 && (sub_1CB90CE98(*(void *)(a1 + 32), v101, v37) & 1) != 0) {
        return 0;
      }
      goto LABEL_69;
    case '1':
LABEL_32:
      BOOL v42 = (uint64_t)v104 < (uint64_t)v102;
      if (DWORD2(v104) != DWORD2(v102)) {
        BOOL v42 = SDWORD2(v104) < SDWORD2(v102);
      }
      if (!v42)
      {
        BOOL v43 = DWORD2(v104) == DWORD2(v102) ? (uint64_t)v102 < (uint64_t)v104 : SDWORD2(v102) < SDWORD2(v104);
        if (!v43 && ((v39 & 0xFD) == 13) == ((v40 & 0xFD) == 13) && v98 == v97 && v36 == v95) {
          return 0;
        }
      }
      goto LABEL_69;
    case '2':
      if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
        unsigned int v39 = *(_DWORD *)(**(void **)(v10 + 16) + 8);
      }
      if ((v11[1] & 0xFE) == 0x12) {
        unsigned int v40 = *((_DWORD *)*v11[2] + 2);
      }
      if ((*(uint64_t (**)(unint64_t, void, void))(*(void *)v20 + 840))(v20, v39 >> 8, v40 >> 8))return 0; {
      goto LABEL_69;
      }
    default:
LABEL_69:
      int v51 = v36;
      int v52 = *(_DWORD *)(v10 + 8) & 0xFE;
      if (v52 == 18) {
        uint64_t v53 = v10;
      }
      else {
        uint64_t v53 = 0;
      }
      int v54 = v11[1] & 0xFE;
      if (v54 == 18) {
        uint64_t v55 = (uint64_t)v11;
      }
      else {
        uint64_t v55 = 0;
      }
      uint64_t result = v104;
      BOOL v56 = (uint64_t)v104 < (uint64_t)v102;
      if (DWORD2(v104) != DWORD2(v102)) {
        BOOL v56 = SDWORD2(v104) < SDWORD2(v102);
      }
      if (!v56)
      {
        BOOL v57 = SDWORD2(v102) >= SDWORD2(v104);
        if (DWORD2(v104) == DWORD2(v102)) {
          BOOL v57 = (uint64_t)v102 >= (uint64_t)v104;
        }
        if (v57
          && v103[0]
          && (v103[0] == 1 || *(void *)(v20 + 8 * v103[0] + 96))
          && *(unsigned __int8 *)(v20 + 390 * v103[0] + v100 + 3862) <= 1u)
        {
          return result;
        }
      }
      if (v52 == 18 || v54 == 18)
      {
        if (v52 == 18 && v54 == 18)
        {
          if (!v56)
          {
            BOOL v58 = SDWORD2(v102) >= SDWORD2(v104);
            if (DWORD2(v104) == DWORD2(v102)) {
              BOOL v58 = (uint64_t)v102 >= (uint64_t)v104;
            }
            if (v58 && v98 == v97 && v51 == v95)
            {
              if (a2 == 40)
              {
                uint64_t v94 = 2;
              }
              else
              {
                if (a2 == 39) {
                  return result;
                }
                if (!v103[0]
                  || !*(void *)(v20 + 8 * v103[0] + 96)
                  || *(unsigned char *)(v20 + 390 * v103[0] + v100 + 3862) == 2)
                {
                  goto LABEL_106;
                }
                uint64_t v94 = 1;
              }
              *(void *)&long long v108 = v94;
              DWORD2(v108) = 0;
              long long v106 = v104;
              sub_1CB90C9D4((uint64_t)&v106, (uint64_t)&v108);
              return v106;
            }
          }
LABEL_106:
          uint64_t v59 = *(llvm::LLVMContext **)v10;
          unint64_t v60 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v10, 0);
          llvm::TargetLoweringBase::getTypeConversion(v20, v59, v60, v61, (uint64_t)&v106);
          int v62 = v106;
          uint64_t v63 = (llvm::LLVMContext *)*v11;
          unint64_t v64 = sub_1CB87DC14(v20, *v14, (llvm::EVT *)v11, 0);
          llvm::TargetLoweringBase::getTypeConversion(v20, v63, v64, v65, (uint64_t)&v106);
          int v67 = v106;
          if (v62 == 6 || v106 == 6)
          {
            unsigned int v68 = *(_DWORD *)(v53 + 32);
            BOOL v69 = v68 && *(unsigned char *)(v53 + 8) == 19;
            BOOL v70 = v69;
            if (v68 > 1 || v70)
            {
              unsigned int v71 = *(_DWORD *)(v55 + 32);
              int v72 = *(unsigned __int8 *)(v55 + 8);
              BOOL v73 = v71 && v72 == 19;
              BOOL v74 = v73;
              if (v71 > 1 || v74)
              {
                unint64_t v83 = *(uint64_t ***)(v55 + 24);
                unint64_t v84 = (llvm::Type *)(v71 >> 1);
                if (v72 == 19) {
                  llvm::ScalableVectorType::get(v83, v84);
                }
                else {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)v83, v84);
                }
                uint64_t v86 = v85;
                int v87 = *(uint64_t ***)(v53 + 24);
                uint64_t v88 = (llvm::Type *)(*(_DWORD *)(v53 + 32) >> 1);
                if (*(unsigned char *)(v53 + 8) == 19) {
                  v90.n128_f64[0] = llvm::ScalableVectorType::get(v87, v88);
                }
                else {
                  v90.n128_f64[0] = llvm::FixedVectorType::get((llvm::FixedVectorType *)v87, v88);
                }
                BOOL v92 = v62 != 6 || v67 != 6;
                *(void *)&long long v108 = sub_1CBC213DC(a1, a2, v86, v89, v99, v96, v101, v90);
                *((void *)&v108 + 1) = v93;
                *(void *)&long long v106 = 2;
                DWORD2(v106) = 0;
                sub_1CB90C9D4((uint64_t)&v106, (uint64_t)&v108);
                BOOL v77 = __OFADD__(v92, (void)v106);
                uint64_t v78 = v92 + v106;
                unint64_t v82 = 0x7FFFFFFFFFFFFFFFLL;
                goto LABEL_139;
              }
            }
          }
          if (*(unsigned char *)(v55 + 8) == 19) {
            return 0;
          }
          uint64_t v79 = *(unsigned int *)(v55 + 32);
          if ((v11[1] & 0xFE) == 0x12) {
            int v11 = (llvm::Type ***)*v11[2];
          }
          if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12) {
            uint64_t v10 = **(void **)(v10 + 16);
          }
          *(void *)&long long v108 = sub_1CBC213DC(a1, a2, v11, v10, v99, v96, v101, v66);
          *((void *)&v108 + 1) = v80;
          unint64_t v81 = sub_1CBBE5D64(a1, v55, 1, 1);
          *(void *)&long long v106 = v79;
          DWORD2(v106) = 0;
          sub_1CB90C9D4((uint64_t)&v106, (uint64_t)&v108);
          BOOL v77 = __OFADD__(v81, (void)v106);
          uint64_t v78 = v81 + v106;
LABEL_138:
          unint64_t v82 = (v78 >> 63) ^ 0x8000000000000000;
LABEL_139:
          if (v77) {
            return v82;
          }
          else {
            return v78;
          }
        }
        if (v52 == 18)
        {
          unint64_t v75 = sub_1CBBE5D64(a1, v10, 0, 1);
          if (v55)
          {
LABEL_129:
            unint64_t v76 = sub_1CBBE5D64(a1, v55, 1, 0);
LABEL_132:
            BOOL v77 = __OFADD__(v75, v76);
            uint64_t v78 = v75 + v76;
            goto LABEL_138;
          }
        }
        else
        {
          unint64_t v75 = 0;
          if (v55) {
            goto LABEL_129;
          }
        }
        unint64_t v76 = 0;
        goto LABEL_132;
      }
      if (!v103[0] || !*(void *)(v20 + 8 * v103[0] + 96)) {
        return 4;
      }
      if (*(unsigned char *)(v20 + 390 * v103[0] + v100 + 3862) == 2) {
        return 4;
      }
      return 1;
  }
}

unint64_t sub_1CBC21D98(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6, uint64_t a7)
{
  if (a6) {
    return 1;
  }
  uint64_t v27 = v7;
  uint64_t v28 = v8;
  uint64_t v10 = *(llvm::TargetLoweringBase **)(a1 + 32);
  unsigned int v11 = llvm::TargetLoweringBase::InstructionOpcodeToISD(v10, a2);
  if (v11 == 190)
  {
    if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
      unsigned int v11 = 191;
    }
    else {
      unsigned int v11 = 190;
    }
  }
  llvm::TargetLoweringBase::getTypeLegalizationCost(v10, *(const llvm::DataLayout **)(a1 + 8), (llvm::LLVMContext **)a3, (uint64_t)&v24);
  int v12 = *(_DWORD *)(a3 + 8) & 0xFE;
  if (v12 == 18)
  {
    if (v25 - 15 >= 0x9C) {
      goto LABEL_9;
    }
  }
  else if (!v25)
  {
    return 1;
  }
  if (*((void *)v10 + v25 + 12) && (v11 > 0x185 || *((unsigned char *)v10 + 390 * v25 + v11 + 3862) != 2))
  {
    uint64_t v22 = 1;
    LODWORD(v23) = 0;
    long long v26 = v24;
    sub_1CB90C9D4((uint64_t)&v26, (uint64_t)&v22);
    return v26;
  }
  if (v12 != 18) {
    return 1;
  }
LABEL_9:
  uint64_t v13 = *(unsigned int *)(a3 + 32);
  if (a4)
  {
    if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12) {
      a4 = **(void **)(a4 + 16);
    }
  }
  else
  {
    a4 = 0;
  }
  uint64_t v22 = sub_1CBC21D98(a1, a2, **(void **)(a3 + 16), a4, a5, 0, a7);
  uint64_t v23 = v14;
  unint64_t v15 = sub_1CBBE5D64(a1, a3, 1, 0);
  *(void *)&long long v26 = v13;
  DWORD2(v26) = 0;
  sub_1CB90C9D4((uint64_t)&v26, (uint64_t)&v22);
  if (__OFADD__(v15, (void)v26)) {
    return ((uint64_t)(v15 + v26) >> 63) ^ 0x8000000000000000;
  }
  else {
    return v15 + v26;
  }
}

unint64_t sub_1CBC21F88(uint64_t a1, int a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v10 = 4 * a5;
    unsigned int v11 = a4;
    while (*v11 < 2 * (int)a5)
    {
      ++v11;
      v10 -= 4;
      if (!v10)
      {
        switch(a2)
        {
          case 1:
          case 2:
          case 3:
          case 6:
          case 8:
            goto LABEL_32;
          case 4:
            goto LABEL_86;
          case 5:
            goto LABEL_66;
          case 7:
            if ((llvm::ShuffleVectorInst::isReverseMask(a4, a5) & 1) == 0
              && (llvm::ShuffleVectorInst::isZeroEltSplatMask(a4, a5) & 1) != 0)
            {
              goto LABEL_8;
            }
            goto LABEL_32;
          default:
            goto LABEL_8;
        }
      }
    }
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
LABEL_32:
      unint64_t v12 = 0;
      if (!a3 || *(unsigned char *)(a3 + 8) != 18) {
        return v12;
      }
      int v32 = *(_DWORD *)(a3 + 32);
      if (v32 < 1) {
        return 0;
      }
      int v33 = 0;
      unint64_t v12 = 0;
      do
      {
        long long v34 = (llvm::EVT *)a3;
        if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
          long long v34 = **(llvm::EVT ***)(a3 + 16);
        }
        unint64_t v35 = *(void *)(a1 + 32);
        int v36 = *(llvm::LLVMContext **)v34;
        unint64_t v37 = sub_1CB87DC14(v35, *(void *)(a1 + 8), v34, 0);
        uint64_t v39 = v38;
        uint64_t v108 = 1;
        int v109 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v35, v36, v37, v39, (uint64_t)v105);
          if (!v105[0])
          {
LABEL_40:
            uint64_t v40 = v108;
            goto LABEL_41;
          }
          if (v105[0] == 10) {
            break;
          }
          if ((v105[0] & 0xFB) == 2)
          {
            uint64_t v110 = 2;
            int v111 = 0;
            sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v110);
          }
          int v51 = v37;
          unint64_t v37 = v106;
          if (v51 == v106)
          {
            if (v51) {
              goto LABEL_40;
            }
            uint64_t v52 = v107;
            if (v39 == v107) {
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v52 = v107;
          }
          uint64_t v39 = v52;
        }
        uint64_t v40 = 0;
LABEL_41:
        BOOL v28 = __OFADD__(v12, v40);
        uint64_t v41 = v12 + v40;
        if (v28) {
          unint64_t v42 = (v41 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v42 = v41;
        }
        unint64_t v43 = *(void *)(a1 + 32);
        char v44 = (llvm::EVT *)a3;
        if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
          char v44 = **(llvm::EVT ***)(a3 + 16);
        }
        uint64_t v45 = *(llvm::LLVMContext **)v44;
        unint64_t v46 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), v44, 0);
        uint64_t v48 = v47;
        uint64_t v108 = 1;
        int v109 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v43, v45, v46, v48, (uint64_t)v105);
          if (!v105[0])
          {
LABEL_48:
            uint64_t v49 = v108;
            goto LABEL_49;
          }
          if (v105[0] == 10) {
            break;
          }
          if ((v105[0] & 0xFB) == 2)
          {
            uint64_t v110 = 2;
            int v111 = 0;
            sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v110);
          }
          int v53 = v46;
          unint64_t v46 = v106;
          if (v53 == v106)
          {
            if (v53) {
              goto LABEL_48;
            }
            uint64_t v54 = v107;
            if (v48 == v107) {
              goto LABEL_48;
            }
          }
          else
          {
            uint64_t v54 = v107;
          }
          uint64_t v48 = v54;
        }
        uint64_t v49 = 0;
LABEL_49:
        BOOL v28 = __OFADD__(v42, v49);
        uint64_t v50 = v42 + v49;
        if (v28) {
          unint64_t v12 = (v50 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v12 = v50;
        }
        ++v33;
      }
      while (v33 != v32);
      return v12;
    case 4:
LABEL_86:
      int v103 = *(_DWORD *)(a6 + 32);
      if (!v103) {
        return 0;
      }
      int v73 = 0;
      unint64_t v12 = 0;
      do
      {
        BOOL v74 = (llvm::EVT *)a6;
        if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12) {
          BOOL v74 = **(llvm::EVT ***)(a6 + 16);
        }
        unint64_t v75 = *(void *)(a1 + 32);
        unint64_t v76 = *(llvm::LLVMContext **)v74;
        unint64_t v77 = sub_1CB87DC14(v75, *(void *)(a1 + 8), v74, 0);
        uint64_t v79 = v78;
        uint64_t v108 = 1;
        int v109 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v75, v76, v77, v79, (uint64_t)v105);
          if (!v105[0])
          {
LABEL_92:
            uint64_t v80 = v108;
            goto LABEL_93;
          }
          if (v105[0] == 10) {
            break;
          }
          if ((v105[0] & 0xFB) == 2)
          {
            uint64_t v110 = 2;
            int v111 = 0;
            sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v110);
          }
          int v91 = v77;
          unint64_t v77 = v106;
          if (v91 == v106)
          {
            if (v91) {
              goto LABEL_92;
            }
            uint64_t v92 = v107;
            if (v79 == v107) {
              goto LABEL_92;
            }
          }
          else
          {
            uint64_t v92 = v107;
          }
          uint64_t v79 = v92;
        }
        uint64_t v80 = 0;
LABEL_93:
        BOOL v28 = __OFADD__(v12, v80);
        uint64_t v81 = v12 + v80;
        if (v28) {
          unint64_t v82 = (v81 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v82 = v81;
        }
        unint64_t v83 = *(void *)(a1 + 32);
        unint64_t v84 = (llvm::EVT *)a3;
        if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
          unint64_t v84 = **(llvm::EVT ***)(a3 + 16);
        }
        uint64_t v85 = *(llvm::LLVMContext **)v84;
        unint64_t v86 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), v84, 0);
        uint64_t v88 = v87;
        uint64_t v108 = 1;
        int v109 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v83, v85, v86, v88, (uint64_t)v105);
          if (!v105[0])
          {
LABEL_100:
            uint64_t v89 = v108;
            goto LABEL_101;
          }
          if (v105[0] == 10) {
            break;
          }
          if ((v105[0] & 0xFB) == 2)
          {
            uint64_t v110 = 2;
            int v111 = 0;
            sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v110);
          }
          int v93 = v86;
          unint64_t v86 = v106;
          if (v93 == v106)
          {
            if (v93) {
              goto LABEL_100;
            }
            uint64_t v94 = v107;
            if (v88 == v107) {
              goto LABEL_100;
            }
          }
          else
          {
            uint64_t v94 = v107;
          }
          uint64_t v88 = v94;
        }
        uint64_t v89 = 0;
LABEL_101:
        BOOL v28 = __OFADD__(v82, v89);
        uint64_t v90 = v82 + v89;
        if (v28) {
          unint64_t v12 = (v90 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v12 = v90;
        }
        ++v73;
      }
      while (v73 != v103);
      return v12;
    case 5:
LABEL_66:
      int v102 = *(_DWORD *)(a6 + 32);
      if (!v102) {
        return 0;
      }
      int v55 = 0;
      unint64_t v12 = 0;
      do
      {
        BOOL v56 = (llvm::EVT *)a3;
        if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
          BOOL v56 = **(llvm::EVT ***)(a3 + 16);
        }
        unint64_t v57 = *(void *)(a1 + 32);
        BOOL v58 = *(llvm::LLVMContext **)v56;
        unint64_t v59 = sub_1CB87DC14(v57, *(void *)(a1 + 8), v56, 0);
        uint64_t v61 = v60;
        uint64_t v108 = 1;
        int v109 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v57, v58, v59, v61, (uint64_t)v105);
          if (!v105[0])
          {
LABEL_72:
            uint64_t v62 = v108;
            goto LABEL_73;
          }
          if (v105[0] == 10) {
            break;
          }
          if ((v105[0] & 0xFB) == 2)
          {
            uint64_t v110 = 2;
            int v111 = 0;
            sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v110);
          }
          int v96 = v59;
          unint64_t v59 = v106;
          if (v96 == v106)
          {
            if (v96) {
              goto LABEL_72;
            }
            uint64_t v97 = v107;
            if (v61 == v107) {
              goto LABEL_72;
            }
          }
          else
          {
            uint64_t v97 = v107;
          }
          uint64_t v61 = v97;
        }
        uint64_t v62 = 0;
LABEL_73:
        BOOL v28 = __OFADD__(v12, v62);
        uint64_t v63 = v12 + v62;
        if (v28) {
          unint64_t v64 = (v63 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v64 = v63;
        }
        unint64_t v65 = *(void *)(a1 + 32);
        __n128 v66 = (llvm::EVT *)a6;
        if ((*(_DWORD *)(a6 + 8) & 0xFE) == 0x12) {
          __n128 v66 = **(llvm::EVT ***)(a6 + 16);
        }
        int v67 = *(llvm::LLVMContext **)v66;
        unint64_t v68 = sub_1CB87DC14(*(void *)(a1 + 32), *(void *)(a1 + 8), v66, 0);
        uint64_t v70 = v69;
        uint64_t v108 = 1;
        int v109 = 0;
        while (1)
        {
          llvm::TargetLoweringBase::getTypeConversion(v65, v67, v68, v70, (uint64_t)v105);
          if (!v105[0])
          {
LABEL_80:
            uint64_t v71 = v108;
            goto LABEL_81;
          }
          if (v105[0] == 10) {
            break;
          }
          if ((v105[0] & 0xFB) == 2)
          {
            uint64_t v110 = 2;
            int v111 = 0;
            sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v110);
          }
          int v98 = v68;
          unint64_t v68 = v106;
          if (v98 == v106)
          {
            if (v98) {
              goto LABEL_80;
            }
            uint64_t v99 = v107;
            if (v70 == v107) {
              goto LABEL_80;
            }
          }
          else
          {
            uint64_t v99 = v107;
          }
          uint64_t v70 = v99;
        }
        uint64_t v71 = 0;
LABEL_81:
        BOOL v28 = __OFADD__(v64, v71);
        uint64_t v72 = v64 + v71;
        if (v28) {
          unint64_t v12 = (v72 >> 63) ^ 0x8000000000000000;
        }
        else {
          unint64_t v12 = v72;
        }
        ++v55;
      }
      while (v55 != v102);
      return v12;
    default:
LABEL_8:
      unint64_t v12 = 0;
      if (!a3 || *(unsigned char *)(a3 + 8) != 18) {
        return v12;
      }
      unint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = **(llvm::EVT ***)(a3 + 16);
      unint64_t v15 = *(llvm::LLVMContext **)v14;
      unint64_t v16 = sub_1CB87DC14(v13, *(void *)(a1 + 8), v14, 0);
      uint64_t v18 = v17;
      uint64_t v108 = 1;
      int v109 = 0;
      while (2)
      {
        llvm::TargetLoweringBase::getTypeConversion(v13, v15, v16, v18, (uint64_t)v105);
        if (!v105[0]) {
          goto LABEL_12;
        }
        if (v105[0] == 10)
        {
          unint64_t v12 = 0;
        }
        else
        {
          if ((v105[0] & 0xFB) == 2)
          {
            uint64_t v110 = 2;
            int v111 = 0;
            sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v110);
          }
          int v100 = v16;
          unint64_t v16 = v106;
          if (v100 != v106)
          {
            uint64_t v101 = v107;
LABEL_137:
            uint64_t v18 = v101;
            continue;
          }
          if (!v100)
          {
            uint64_t v101 = v107;
            if (v18 != v107) {
              goto LABEL_137;
            }
          }
LABEL_12:
          unint64_t v12 = v108;
        }
        break;
      }
      int v19 = *(_DWORD *)(a3 + 32);
      if (v19 >= 1)
      {
        for (int i = 0; i != v19; ++i)
        {
          uint64_t v21 = (llvm::EVT *)a3;
          if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12) {
            uint64_t v21 = **(llvm::EVT ***)(a3 + 16);
          }
          unint64_t v22 = *(void *)(a1 + 32);
          uint64_t v23 = *(llvm::LLVMContext **)v21;
          unint64_t v24 = sub_1CB87DC14(v22, *(void *)(a1 + 8), v21, 0);
          uint64_t v26 = v25;
          uint64_t v108 = 1;
          int v109 = 0;
          while (1)
          {
            llvm::TargetLoweringBase::getTypeConversion(v22, v23, v24, v26, (uint64_t)v105);
            if (!v105[0])
            {
LABEL_19:
              uint64_t v27 = v108;
              goto LABEL_20;
            }
            if (v105[0] == 10) {
              break;
            }
            if ((v105[0] & 0xFB) == 2)
            {
              uint64_t v110 = 2;
              int v111 = 0;
              sub_1CB90C9D4((uint64_t)&v108, (uint64_t)&v110);
            }
            int v30 = v24;
            unint64_t v24 = v106;
            if (v30 == v106)
            {
              if (v30) {
                goto LABEL_19;
              }
              uint64_t v31 = v107;
              if (v26 == v107) {
                goto LABEL_19;
              }
            }
            else
            {
              uint64_t v31 = v107;
            }
            uint64_t v26 = v31;
          }
          uint64_t v27 = 0;
LABEL_20:
          BOOL v28 = __OFADD__(v12, v27);
          uint64_t v29 = v12 + v27;
          if (v28) {
            unint64_t v12 = (v29 >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v12 = v29;
          }
        }
      }
      return v12;
  }
}

unint64_t sub_1CBC22938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a1;
  uint64_t v253 = *MEMORY[0x1E4F143B8];
  int v5 = *(_DWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(unsigned int *)(a2 + 120);
  unint64_t v9 = *(void *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 136);
  uint64_t v218 = v8;
  uint64_t v10 = *(unsigned int *)(a2 + 32);
  if (v10)
  {
    BOOL v11 = v5 == 319 || v5 == 322;
    unsigned int v12 = v11;
    uint64_t v13 = *(void *)(*(void *)(a2 + 24) + 8 * v12);
    if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12) {
      uint64_t v14 = (llvm::FixedVectorType **)v13;
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  unint64_t v15 = 0;
  if (a3 == 2) {
    int v16 = 1;
  }
  else {
    int v16 = 10;
  }
  int v250 = &v252;
  uint64_t v251 = 0x200000000;
  if (v5 <= 186)
  {
    if (v5 > 75)
    {
      if (v5 > 166)
      {
        switch(v5)
        {
          case 167:
          case 168:
            goto LABEL_246;
          case 169:
          case 170:
          case 171:
          case 172:
          case 173:
          case 174:
            goto LABEL_300;
          case 175:
            int v17 = 230;
            goto LABEL_151;
          case 176:
            int v17 = 232;
            goto LABEL_151;
          case 177:
            int v17 = 231;
            goto LABEL_151;
          default:
            if (v5 != 185) {
              goto LABEL_300;
            }
            unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), (llvm::Type *)v6, 1);
            uint64_t v171 = v4;
            int v172 = 32;
            goto LABEL_363;
        }
      }
      switch(v5)
      {
        case 139:
          int v17 = 223;
          break;
        case 140:
          int v17 = 241;
          break;
        case 141:
          goto LABEL_300;
        case 142:
        case 143:
          int v17 = 141;
          break;
        default:
          if (v5 == 76)
          {
            int v17 = 234;
          }
          else
          {
            if (v5 != 90) {
              goto LABEL_300;
            }
            int v17 = 106;
          }
          break;
      }
    }
    else
    {
      if (v5 <= 50)
      {
        switch(v5)
        {
          case 5:
            goto LABEL_246;
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 15:
          case 16:
          case 17:
          case 18:
            goto LABEL_300;
          case 8:
            int v17 = 186;
            goto LABEL_151;
          case 9:
            int v17 = 182;
            goto LABEL_151;
          case 13:
            int v17 = 145;
            goto LABEL_151;
          case 14:
            int v17 = 235;
            goto LABEL_151;
          case 19:
            int v17 = 143;
            goto LABEL_151;
          default:
            if (v5 != 1) {
              goto LABEL_300;
            }
            uint64_t v96 = **(void **)v6 + 1888;
            if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
            {
              uint64_t v204 = (llvm::Type *)*(unsigned int *)(v6 + 32);
              int v205 = (uint64_t **)(**(void **)v6 + 1888);
              if (*(_DWORD *)(v6 + 8) == 19) {
                llvm::ScalableVectorType::get(v205, v204);
              }
              else {
                llvm::FixedVectorType::get((llvm::FixedVectorType *)v205, v204);
              }
              uint64_t v96 = v206;
            }
            unint64_t v97 = sub_1CBC21D98(v4, 0x35u, v6, v96, 0x26u, v3, 0);
            unint64_t v98 = sub_1CBC21D98(v4, 0x39u, v6, v96, 0x26u, v3, 0);
            if (__OFADD__(v97, v98)) {
              unint64_t v99 = ((uint64_t)(v97 + v98) >> 63) ^ 0x8000000000000000;
            }
            else {
              unint64_t v99 = v97 + v98;
            }
            unint64_t v100 = sub_1CBC20CFC(v4, 0xFu, v6, v3, 2u, 0, 0, 0, 0, 0, 0);
            BOOL v30 = __OFADD__(v99, v100);
            uint64_t v31 = v99 + v100;
            goto LABEL_126;
        }
      }
      switch(v5)
      {
        case '3':
          int v17 = 227;
          break;
        case '4':
          int v17 = 184;
          break;
        case '5':
          int v16 = 4;
          int v17 = 185;
          break;
        case '6':
          int v17 = 183;
          break;
        default:
          if (v5 != 75) {
            goto LABEL_300;
          }
          int v17 = 233;
          break;
      }
    }
LABEL_151:
    unsigned int v210 = v16;
    uint64_t v207 = v8;
    int v208 = v7;
    int v219 = v5;
    int v252 = v17;
    LODWORD(v251) = 1;
    unint64_t v101 = *(void *)(a1 + 32);
    int v102 = *(llvm::LLVMContext **)v6;
    unint64_t v103 = sub_1CB87DC14(v101, *(void *)(a1 + 8), (llvm::EVT *)v6, 0);
    uint64_t v105 = v104;
    uint64_t v237 = (void *)1;
    LODWORD(v238) = 0;
    unint64_t v217 = v9;
    while (1)
    {
      llvm::TargetLoweringBase::getTypeConversion(v101, v102, v103, v105, (uint64_t)&v240);
      if (!(_BYTE)v240)
      {
LABEL_161:
        uint64_t v107 = (uint64_t)v237;
        uint64_t v108 = v238;
        goto LABEL_162;
      }
      if (v240 == 10) {
        break;
      }
      if ((v240 & 0xFB) == 2)
      {
        uint64_t __src = 2;
        LODWORD(v226) = 0;
        sub_1CB90C9D4((uint64_t)&v237, (uint64_t)&__src);
      }
      if (v103 == BYTE8(v240))
      {
        if ((_BYTE)v103) {
          goto LABEL_161;
        }
        uint64_t v106 = v241;
        if (v105 == v241) {
          goto LABEL_161;
        }
      }
      else
      {
        uint64_t v106 = v241;
      }
      uint64_t v105 = v106;
      unint64_t v103 = *((void *)&v240 + 1);
    }
    uint64_t v107 = 0;
    if (!(_BYTE)v103) {
      LOBYTE(v103) = 6;
    }
    uint64_t v108 = 1;
LABEL_162:
    uint64_t v237 = v239;
    uint64_t v238 = 0x200000000;
    long long v234 = v236;
    uint64_t v235 = 0x200000000;
    if (!v251) {
      goto LABEL_221;
    }
    uint64_t v211 = v4;
    unsigned int v215 = v3;
    int v109 = (unsigned int *)v250;
    uint64_t v110 = (uint64_t *)(v101 + 8 * v103 + 96);
    BOOL v111 = v107 > 1;
    if (v108) {
      BOOL v111 = (int)v108 > 0;
    }
    BOOL v221 = v111;
    BOOL v115 = ((v103 - 8) < 7u
         || (v103 - 75) < 0x2Du
         || (v103 + 104) < 0x13u)
        && v219 == 139;
    uint64_t v116 = 4 * v251;
    while (!(_BYTE)v103)
    {
LABEL_200:
      ++v109;
      v116 -= 4;
      if (!v116)
      {
        uint64_t v121 = (unint64_t *)v237;
        if (v238 >= 2)
        {
          double v122 = (char *)v237 + 16;
          uint64_t v123 = *(void *)v237;
          uint64_t v124 = 16 * v238 - 16;
          uint64_t v4 = v211;
          uint64_t v3 = v215;
          do
          {
            int v125 = *((_DWORD *)v122 + 2);
            int v126 = *((_DWORD *)v121 + 2);
            BOOL v11 = v125 == v126;
            BOOL v127 = v125 < v126;
            if (v11) {
              BOOL v127 = *(void *)v122 < v123;
            }
            if (v127)
            {
              uint64_t v123 = *(void *)v122;
              uint64_t v121 = (unint64_t *)v122;
            }
            v122 += 16;
            v124 -= 16;
          }
          while (v124);
        }
        else
        {
          uint64_t v4 = v211;
          uint64_t v3 = v215;
        }
        if (v121 != (unint64_t *)((char *)v237 + 16 * v238)) {
          goto LABEL_220;
        }
        uint64_t v121 = (unint64_t *)v234;
        if (v235 >= 2)
        {
          unint64_t v128 = (char *)v234 + 16;
          uint64_t v129 = *(void *)v234;
          uint64_t v130 = 16 * v235 - 16;
          do
          {
            int v131 = *((_DWORD *)v128 + 2);
            int v132 = *((_DWORD *)v121 + 2);
            BOOL v11 = v131 == v132;
            BOOL v133 = v131 < v132;
            if (v11) {
              BOOL v133 = *(void *)v128 < v129;
            }
            if (v133)
            {
              uint64_t v129 = *(void *)v128;
              uint64_t v121 = (unint64_t *)v128;
            }
            v128 += 16;
            v130 -= 16;
          }
          while (v130);
        }
        if (v121 != (unint64_t *)((char *)v234 + 16 * v235))
        {
LABEL_220:
          unint64_t v15 = *v121;
          goto LABEL_242;
        }
LABEL_221:
        int v134 = v219;
        if (v219 == 90)
        {
          uint64_t v137 = *(char **)(a2 + 24);
          uint64_t v138 = *(unsigned int *)(a2 + 32);
          *(void *)&long long v240 = 0;
          *((void *)&v240 + 1) = v6;
          LODWORD(v241) = 89;
          uint64_t v242 = v244;
          uint64_t v243 = 0x400000000;
          long long v245 = v247;
          uint64_t v246 = 0x400000000;
          int v248 = 0;
          long long v249 = xmmword_1CD96D880;
          sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, v137, &v137[8 * v138]);
          uint64_t v139 = *(char **)(a2 + 24);
          uint64_t v140 = *(unsigned int *)(a2 + 32);
          uint64_t __src = 0;
          uint64_t v226 = v6;
          int v227 = 83;
          v228[0] = v229;
          v228[1] = (void *)0x400000000;
          long long v230 = v232;
          uint64_t v231 = 0x400000000;
          v232[8] = 0;
          long long v233 = xmmword_1CD96D880;
          sub_1CC1587C8((uint64_t)v228, (uint64_t)v229, v139, &v139[8 * v140]);
          uint64_t v141 = sub_1CBC202A4(v4, &v240, v3);
          uint64_t v142 = sub_1CBC202A4(v4, &__src, v3);
          if (__OFADD__(v141, v142)) {
            unint64_t v15 = ((v141 + v142) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v15 = v141 + v142;
          }
          if (v230 != v232) {
            free(v230);
          }
          if (v228[0] != v229) {
            free(v228[0]);
          }
          if (v245 != v247) {
            free(v245);
          }
          uint64_t v143 = (char *)v242;
          if (v242 == v244) {
            goto LABEL_242;
          }
        }
        else
        {
          if (v219 == 143)
          {
            unint64_t v135 = sub_1CBC20CFC(v4, 0x12u, v6, v3, 0, 0, 0, 0, 0, 0, 0);
            unint64_t v136 = sub_1CBC20CFC(v4, 0xEu, v6, v3, 0, 0, 0, 0, 0, 0, 0);
            if (__OFADD__(v135, v136)) {
              unint64_t v15 = ((uint64_t)(v135 + v136) >> 63) ^ 0x8000000000000000;
            }
            else {
              unint64_t v15 = v135 + v136;
            }
            goto LABEL_242;
          }
          if ((*(_DWORD *)(v6 + 8) & 0xFE) != 0x12)
          {
            unint64_t v15 = v210;
            goto LABEL_242;
          }
          if (*(_DWORD *)(v6 + 8) == 19)
          {
            unint64_t v15 = 0;
            goto LABEL_242;
          }
          uint64_t v145 = *(unsigned int *)(a2 + 32);
          if (v145)
          {
            uint64_t v146 = *(void *)(a2 + 24);
            uint64_t v147 = 8 * v145;
            while (*(unsigned char *)(*(void *)v146 + 8) != 19)
            {
              v146 += 8;
              v147 -= 8;
              if (!v147) {
                goto LABEL_253;
              }
            }
            unint64_t v15 = 0;
LABEL_242:
            if (v234 != v236) {
              free(v234);
            }
            unint64_t v42 = v237;
            if (v237 != v239) {
LABEL_245:
            }
              free(v42);
            goto LABEL_246;
          }
LABEL_253:
          uint64_t v148 = v3;
          if (v218)
          {
            unint64_t v217 = sub_1CBBE5D64(v4, v6, 1, 0);
            uint64_t v150 = v149;
            LODWORD(v145) = *(_DWORD *)(a2 + 32);
          }
          else
          {
            uint64_t v150 = v207;
          }
          unsigned int v153 = *(_DWORD *)(v6 + 32);
          uint64_t __src = (uint64_t)&v227;
          uint64_t v226 = 0x400000000;
          if (v145)
          {
            uint64_t v154 = 0;
            LODWORD(v155) = 0;
            do
            {
              uint64_t v156 = *(void *)(*(void *)(a2 + 24) + v154);
              if ((*(_DWORD *)(v156 + 8) & 0xFE) == 0x12) {
                uint64_t v156 = **(void **)(v156 + 16);
              }
              if (v155 >= HIDWORD(v226)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *(void *)(__src + 8 * v155) = v156;
              uint64_t v155 = (v226 + 1);
              LODWORD(v226) = v226 + 1;
              v154 += 8;
            }
            while (8 * v145 != v154);
            int v134 = v219;
          }
          else
          {
            uint64_t v155 = 0;
          }
          uint64_t v157 = v150;
          if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
            uint64_t v6 = **(void **)(v6 + 16);
          }
          *(void *)&long long v240 = 0;
          *((void *)&v240 + 1) = v6;
          LODWORD(v241) = v134;
          uint64_t v242 = v244;
          uint64_t v243 = 0x400000000;
          long long v245 = v247;
          uint64_t v246 = 0x400000000;
          int v248 = v208;
          long long v249 = xmmword_1CD96D880;
          sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, (char *)__src, (char *)(__src + 8 * v155));
          v222[0] = sub_1CBC202A4(v4, &v240, v148);
          v222[1] = v158;
          uint64_t v159 = *(unsigned int *)(a2 + 32);
          if (v159)
          {
            uint64_t v160 = v4;
            uint64_t v161 = 0;
            uint64_t v162 = 8 * v159;
            uint64_t v163 = v157;
            do
            {
              uint64_t v164 = *(void *)(*(void *)(a2 + 24) + v161);
              if (v164) {
                BOOL v165 = (*(_DWORD *)(v164 + 8) & 0xFE) == 18;
              }
              else {
                BOOL v165 = 0;
              }
              if (v165)
              {
                if (*(_DWORD *)(a2 + 136))
                {
                  uint64_t v166 = v163;
                  unint64_t v167 = sub_1CBBE5D64(v160, *(void *)(*(void *)(a2 + 24) + v161), 0, 1);
                  if (v168 == 1) {
                    uint64_t v163 = 1;
                  }
                  else {
                    uint64_t v163 = v166;
                  }
                  unint64_t v169 = v217 + v167;
                  if (__OFADD__(v217, v167)) {
                    unint64_t v169 = ((uint64_t)(v217 + v167) >> 63) ^ 0x8000000000000000;
                  }
                  unint64_t v217 = v169;
                }
                if (v153 <= *(_DWORD *)(v164 + 32)) {
                  unsigned int v153 = *(_DWORD *)(v164 + 32);
                }
              }
              v161 += 8;
            }
            while (v162 != v161);
          }
          uint64_t v223 = v153;
          LODWORD(v224) = 0;
          sub_1CB90C9D4((uint64_t)&v223, (uint64_t)v222);
          if (__OFADD__(v223, v217)) {
            unint64_t v15 = ((uint64_t)(v223 + v217) >> 63) ^ 0x8000000000000000;
          }
          else {
            unint64_t v15 = v223 + v217;
          }
          if (v245 != v247) {
            free(v245);
          }
          if (v242 != v244) {
            free(v242);
          }
          uint64_t v143 = (char *)__src;
          if ((int *)__src == &v227) {
            goto LABEL_242;
          }
        }
        free(v143);
        goto LABEL_242;
      }
    }
    uint64_t v117 = *v109;
    if (v103 == 1)
    {
      if (v117 > 0x185)
      {
LABEL_194:
        uint64_t v118 = *v110;
        goto LABEL_195;
      }
    }
    else
    {
      uint64_t v118 = *v110;
      if (v117 > 0x185 || v118 == 0)
      {
LABEL_195:
        if (v118 && (v117 > 0x185 || *(unsigned char *)(v101 + 390 * v103 + v117 + 3862) != 2))
        {
          uint64_t __src = 2;
          LODWORD(v226) = 0;
          *(void *)&long long v240 = v107;
          *((void *)&v240 + 1) = v108;
          sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
          if (v235 >= (unint64_t)HIDWORD(v235)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v234 + v235) = v240;
          LODWORD(v235) = v235 + 1;
        }
        goto LABEL_200;
      }
    }
    if (*(unsigned __int8 *)(v101 + 390 * v103 + v117 + 3862) <= 1u)
    {
      if (v115
        && ((*(uint64_t (**)(unint64_t, void, void))(*(void *)v101 + 1328))(v101, v103, 0) & 1) != 0)
      {
        unint64_t v15 = 0;
        goto LABEL_242;
      }
      if (v221) {
        uint64_t v120 = 2;
      }
      else {
        uint64_t v120 = 1;
      }
      uint64_t __src = v120;
      LODWORD(v226) = 0;
      *(void *)&long long v240 = v107;
      *((void *)&v240 + 1) = v108;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      if (v238 >= (unint64_t)HIDWORD(v238)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v237 + v238) = v240;
      LODWORD(v238) = v238 + 1;
      goto LABEL_200;
    }
    goto LABEL_194;
  }
  int v17 = 224;
  switch(v5)
  {
    case 238:
      int v17 = 229;
      goto LABEL_151;
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 261:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 277:
    case 279:
    case 281:
    case 282:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 297:
    case 298:
    case 299:
    case 302:
    case 303:
    case 304:
    case 308:
    case 310:
    case 313:
    case 314:
    case 315:
    case 316:
LABEL_300:
      int v173 = *(unsigned __int8 *)(v6 + 8);
      if (v173 == 19)
      {
        unint64_t v15 = 0;
        goto LABEL_246;
      }
      if (!v10) {
        goto LABEL_306;
      }
      uint64_t v174 = *(void *)(a2 + 24);
      uint64_t v175 = 8 * v10;
      break;
    case 244:
    case 272:
      goto LABEL_246;
    case 258:
      int v17 = 237;
      goto LABEL_151;
    case 259:
      int v17 = 239;
      goto LABEL_151;
    case 260:
      int v17 = 240;
      goto LABEL_151;
    case 262:
    case 283:
      int v32 = v7;
      int v33 = (uint64_t **)(**(void **)v6 + 1888);
      unsigned int v213 = a3;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        unsigned int v196 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        if (*(_DWORD *)(v6 + 8) == 19) {
          llvm::ScalableVectorType::get(v33, v196);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v33, v196);
        }
        int v33 = v197;
      }
      *(void *)&long long v240 = v6;
      *((void *)&v240 + 1) = v33;
      uint64_t v35 = llvm::StructType::create(*(uint64_t **)v6, 0, 0);
      llvm::StructType::setBody(v35, (uint64_t)&v240, 2, 0);
      if (v5 == 262) {
        int v36 = 263;
      }
      else {
        int v36 = 284;
      }
      uint64_t __src = v6;
      uint64_t v226 = v6;
      *(void *)&long long v240 = 0;
      *((void *)&v240 + 1) = v35;
      LODWORD(v241) = v36;
      uint64_t v242 = v244;
      uint64_t v243 = 0x400000000;
      long long v245 = v247;
      uint64_t v246 = 0x400000000;
      int v248 = v32;
      *(void *)&long long v249 = v9;
      *((void *)&v249 + 1) = v8;
      sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, (char *)&__src, (char *)&v227);
      uint64_t v37 = sub_1CBC202A4(a1, &v240, v213);
      unint64_t v38 = sub_1CBC21D98(a1, 0x35u, v6, (uint64_t)v33, 0x26u, v213, 0);
      uint64_t v39 = v6;
      if (__OFADD__(v37, v38)) {
        unint64_t v40 = ((uint64_t)(v37 + v38) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v40 = v37 + v38;
      }
      uint64_t v237 = (void *)sub_1CBC21D98(a1, 0x39u, v39, (uint64_t)v33, 0x26u, v213, 0);
      uint64_t v238 = v41;
      uint64_t __src = 2;
      LODWORD(v226) = 0;
      sub_1CB90C9D4((uint64_t)&__src, (uint64_t)&v237);
      if (__OFADD__(v40, __src)) {
        unint64_t v15 = ((uint64_t)(v40 + __src) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v15 = v40 + __src;
      }
      if (v245 != v247) {
        free(v245);
      }
      unint64_t v42 = v242;
      if (v242 != v244) {
        goto LABEL_245;
      }
      goto LABEL_246;
    case 263:
    case 284:
      uint64_t v80 = *(uint64_t **)(v6 + 16);
      uint64_t v82 = *v80;
      uint64_t v81 = v80[1];
      if (v5 == 263) {
        unsigned int v83 = 13;
      }
      else {
        unsigned int v83 = 15;
      }
      unint64_t v84 = sub_1CBC20CFC(a1, v83, v82, a3, 0, 0, 0, 0, 0, 0, 0);
      uint64_t __src = sub_1CBC21D98(v4, 0x35u, v82, v81, 0x26u, v3, 0);
      uint64_t v226 = v85;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      int v86 = v3;
      if (__OFADD__(v84, (void)v240)) {
        unint64_t v60 = ((uint64_t)(v84 + v240) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v60 = v84 + v240;
      }
      unint64_t v62 = sub_1CBC20CFC(v4, 0x1Eu, v81, v86, 0, 0, 0, 0, 0, 0, 0);
      goto LABEL_106;
    case 273:
      int v17 = 226;
      goto LABEL_151;
    case 274:
    case 275:
    case 305:
    case 306:
      uint64_t v18 = **(void **)v6 + 1888;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        uint64_t v193 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        uint64_t v194 = (uint64_t **)(**(void **)v6 + 1888);
        if (*(_DWORD *)(v6 + 8) == 19) {
          llvm::ScalableVectorType::get(v194, v193);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v194, v193);
        }
        uint64_t v18 = v195;
      }
      if ((v5 - 305) >= 2) {
        unsigned int v19 = 38;
      }
      else {
        unsigned int v19 = 34;
      }
      unint64_t v20 = sub_1CBC21D98(v4, 0x35u, v6, v18, v19, v3, 0);
      uint64_t v21 = v4;
      unint64_t v22 = v20;
      uint64_t v23 = v21;
      unsigned int v24 = 57;
      goto LABEL_45;
    case 276:
    case 307:
      uint64_t v63 = (llvm::Type *)v6;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12) {
        uint64_t v63 = **(llvm::Type ***)(v6 + 16);
      }
      int PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v63);
      unint64_t v65 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v6, (llvm::LLVMContext *)(2 * PrimitiveSizeInBits));
      __n128 v66 = (llvm::Type ***)v65;
      if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
      {
        uint64_t v200 = (llvm::Type *)*(unsigned int *)(v6 + 32);
        if (*(_DWORD *)(v6 + 8) == 19) {
          llvm::ScalableVectorType::get(v65, v200);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v65, v200);
        }
        __n128 v66 = v201;
      }
      if (v5 == 276) {
        uint64_t v67 = 40;
      }
      else {
        uint64_t v67 = 39;
      }
      uint64_t __src = sub_1CBC213DC(v4, v67, v66, (llvm::Type ***)v6, 0, v3, 0);
      uint64_t v226 = v68;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      uint64_t v69 = (llvm::Type ***)v6;
      uint64_t v70 = v240;
      unint64_t v71 = sub_1CBC20CFC(v4, 0x11u, (uint64_t)v66, v3, 0, 0, 0, 0, 0, 0, 0);
      if (__OFADD__(v70, v71)) {
        unint64_t v72 = ((uint64_t)(v70 + v71) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v72 = v70 + v71;
      }
      uint64_t __src = sub_1CBC213DC(v4, 38, v69, v66, 0, v3, 0);
      uint64_t v226 = v73;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      if (__OFADD__(v72, (void)v240)) {
        unint64_t v74 = ((uint64_t)(v72 + v240) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v74 = v72 + v240;
      }
      unint64_t v75 = sub_1CBC20CFC(v4, 0x1Au, (uint64_t)v69, v3, 0, 2u, 0, 0, 0, 0, 0);
      if (__OFADD__(v74, v75)) {
        unint64_t v76 = ((uint64_t)(v74 + v75) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v76 = v74 + v75;
      }
      unint64_t v77 = sub_1CBC20CFC(v4, 0x19u, (uint64_t)v69, v3, 0, 2u, 0, 0, 0, 0, 0);
      if (__OFADD__(v76, v77)) {
        unint64_t v78 = ((uint64_t)(v76 + v77) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v78 = v76 + v77;
      }
      unint64_t v79 = sub_1CBC20CFC(v4, 0x1Du, (uint64_t)v69, v3, 0, 0, 0, 0, 0, 0, 0);
      BOOL v30 = __OFADD__(v78, v79);
      uint64_t v31 = v78 + v79;
      goto LABEL_126;
    case 278:
    case 309:
      unint64_t v43 = *(uint64_t **)(v6 + 16);
      uint64_t v44 = *v43;
      uint64_t v45 = (llvm::Type *)*v43;
      if ((*(_DWORD *)(*v43 + 8) & 0xFE) == 0x12) {
        uint64_t v45 = **(llvm::Type ***)(v44 + 16);
      }
      uint64_t v46 = v43[1];
      int v47 = llvm::Type::getPrimitiveSizeInBits(v45);
      uint64_t v48 = (uint64_t **)llvm::IntegerType::get(*(llvm::IntegerType **)v44, (llvm::LLVMContext *)(2 * v47));
      uint64_t v49 = (llvm::Type ***)v48;
      if ((*(_DWORD *)(v44 + 8) & 0xFE) == 0x12)
      {
        unsigned int v198 = (llvm::Type *)*(unsigned int *)(v44 + 32);
        if (*(_DWORD *)(v44 + 8) == 19) {
          llvm::ScalableVectorType::get(v48, v198);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v48, v198);
        }
        uint64_t v49 = v199;
      }
      if (v5 == 278) {
        uint64_t v50 = 40;
      }
      else {
        uint64_t v50 = 39;
      }
      uint64_t __src = sub_1CBC213DC(v4, v50, v49, (llvm::Type ***)v44, 0, v3, 0);
      uint64_t v226 = v51;
      int v52 = v3;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      int v53 = v5;
      uint64_t v54 = v240;
      unint64_t v55 = sub_1CBC20CFC(v4, 0x11u, (uint64_t)v49, v3, 0, 0, 0, 0, 0, 0, 0);
      if (__OFADD__(v54, v55)) {
        unint64_t v56 = ((uint64_t)(v54 + v55) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v56 = v54 + v55;
      }
      uint64_t __src = sub_1CBC213DC(v4, 38, (llvm::Type ***)v44, v49, 0, v3, 0);
      uint64_t v226 = v57;
      *(void *)&long long v240 = 2;
      DWORD2(v240) = 0;
      sub_1CB90C9D4((uint64_t)&v240, (uint64_t)&__src);
      if (__OFADD__(v56, (void)v240)) {
        unint64_t v58 = ((uint64_t)(v56 + v240) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v58 = v56 + v240;
      }
      unint64_t v59 = sub_1CBC20CFC(v4, 0x1Au, (uint64_t)v49, v3, 0, 2u, 0, 0, 0, 0, 0);
      if (__OFADD__(v58, v59)) {
        unint64_t v60 = ((uint64_t)(v58 + v59) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v60 = v58 + v59;
      }
      if (v53 == 278)
      {
        unint64_t v61 = sub_1CBC20CFC(v4, 0x1Bu, v44, v52, 0, 2u, 0, 0, 0, 0, 0);
        if (__OFADD__(v60, v61)) {
          unint64_t v60 = ((uint64_t)(v60 + v61) >> 63) ^ 0x8000000000000000;
        }
        else {
          v60 += v61;
        }
      }
      unint64_t v62 = sub_1CBC21D98(v4, 0x35u, v44, v46, 0x21u, v52, 0);
LABEL_106:
      BOOL v30 = __OFADD__(v60, v62);
      uint64_t v31 = v60 + v62;
      goto LABEL_126;
    case 280:
      goto LABEL_151;
    case 296:
      int v17 = 236;
      goto LABEL_151;
    case 300:
    case 311:
      unsigned int v214 = a3;
      uint64_t v87 = (uint64_t **)(**(void **)v6 + 1888);
      uint64_t v88 = v6;
      int v89 = *(_DWORD *)(v6 + 8);
      int v90 = v7;
      if ((v89 & 0xFE) == 0x12)
      {
        uint64_t v202 = (llvm::Type *)*(unsigned int *)(v88 + 32);
        if (v89 == 19) {
          llvm::ScalableVectorType::get(v87, v202);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v87, v202);
        }
        uint64_t v87 = v203;
      }
      *(void *)&long long v240 = v88;
      *((void *)&v240 + 1) = v87;
      uint64_t v92 = llvm::StructType::create(*(uint64_t **)v88, 0, 0);
      llvm::StructType::setBody(v92, (uint64_t)&v240, 2, 0);
      if (v5 == 300) {
        int v93 = 301;
      }
      else {
        int v93 = 312;
      }
      uint64_t __src = v88;
      uint64_t v226 = v88;
      *(void *)&long long v240 = 0;
      *((void *)&v240 + 1) = v92;
      LODWORD(v241) = v93;
      uint64_t v242 = v244;
      uint64_t v243 = 0x400000000;
      long long v245 = v247;
      uint64_t v246 = 0x400000000;
      int v248 = v90;
      *(void *)&long long v249 = v9;
      *((void *)&v249 + 1) = v8;
      sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, (char *)&__src, (char *)&v227);
      uint64_t v94 = sub_1CBC202A4(a1, &v240, v214);
      unint64_t v95 = sub_1CBC21D98(a1, 0x39u, v88, (uint64_t)v87, 0x2Au, v214, 0);
      if (__OFADD__(v94, v95)) {
        unint64_t v15 = ((uint64_t)(v94 + v95) >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v15 = v94 + v95;
      }
      if (v245 != v247) {
        free(v245);
      }
      unint64_t v42 = v242;
      if (v242 != v244) {
        goto LABEL_245;
      }
      goto LABEL_246;
    case 301:
    case 312:
      uint64_t v25 = *(uint64_t **)(v6 + 16);
      uint64_t v6 = *v25;
      uint64_t v18 = v25[1];
      if (v5 == 301) {
        unsigned int v26 = 13;
      }
      else {
        unsigned int v26 = 15;
      }
      if (v5 == 301) {
        unsigned int v19 = 36;
      }
      else {
        unsigned int v19 = 34;
      }
      unint64_t v27 = sub_1CBC20CFC(a1, v26, v6, a3, 0, 0, 0, 0, 0, 0, 0);
      uint64_t v28 = v4;
      unint64_t v22 = v27;
      uint64_t v23 = v28;
      unsigned int v24 = 53;
LABEL_45:
      unint64_t v29 = sub_1CBC21D98(v23, v24, v6, v18, v19, v3, 0);
      BOOL v30 = __OFADD__(v22, v29);
      uint64_t v31 = v22 + v29;
LABEL_126:
      if (v30) {
        unint64_t v15 = (v31 >> 63) ^ 0x8000000000000000;
      }
      else {
        unint64_t v15 = v31;
      }
      goto LABEL_246;
    case 317:
      unsigned int v190 = 13;
      goto LABEL_359;
    case 318:
      unsigned int v190 = 28;
      goto LABEL_359;
    case 319:
      uint64_t v188 = v7 | 0x100000000;
      unsigned int v189 = 14;
      goto LABEL_361;
    case 320:
    case 321:
    case 325:
    case 326:
    case 327:
    case 328:
      double v151 = (uint64_t **)(*(void *)*v14 + 1888);
      if (v14 && (v14[1] & 0xFE) == 0x12)
      {
        int v191 = (llvm::Type *)*((unsigned int *)v14 + 8);
        if (*((_DWORD *)v14 + 2) == 19) {
          llvm::ScalableVectorType::get(v151, v191);
        }
        else {
          llvm::FixedVectorType::get((llvm::FixedVectorType *)v151, v191);
        }
        double v151 = v192;
      }
      unint64_t v152 = sub_1CD42B820(v4, v14, (uint64_t)v151, v3);
      goto LABEL_364;
    case 322:
      uint64_t v188 = v7 | 0x100000000;
      unsigned int v189 = 18;
LABEL_361:
      unint64_t v152 = sub_1CD42B804(a1, v189, v14, v188, a3);
      goto LABEL_364;
    case 323:
      unsigned int v190 = 17;
      goto LABEL_359;
    case 324:
      unsigned int v190 = 29;
      goto LABEL_359;
    case 329:
      unsigned int v190 = 30;
LABEL_359:
      unint64_t v152 = sub_1CD42BEB4(a1, v190, v14, a3);
      goto LABEL_364;
    default:
      switch(v5)
      {
        case 192:
          int v17 = 251;
          goto LABEL_151;
        case 193:
          int v17 = 247;
          goto LABEL_151;
        case 194:
        case 195:
        case 196:
        case 197:
        case 198:
        case 199:
        case 200:
          goto LABEL_300;
        case 201:
          int v17 = 250;
          goto LABEL_151;
        case 202:
          int v17 = 246;
          goto LABEL_151;
        case 203:
          int v17 = 238;
          goto LABEL_151;
        default:
          if (v5 != 187) {
            goto LABEL_300;
          }
          uint64_t v6 = **(void **)(a2 + 24);
          unsigned __int8 Alignment = llvm::DataLayout::getAlignment(*(llvm::DataLayout **)(a1 + 8), (llvm::Type *)v6, 1);
          uint64_t v171 = v4;
          int v172 = 33;
LABEL_363:
          unint64_t v152 = sub_1CD42BBC8(v171, v172, v6, Alignment, 1, 0, v3);
          break;
      }
LABEL_364:
      unint64_t v15 = v152;
      goto LABEL_246;
  }
  do
  {
    if (*(unsigned char *)(*(void *)v174 + 8) == 19)
    {
      unint64_t v15 = 0;
      goto LABEL_246;
    }
    v174 += 8;
    v175 -= 8;
  }
  while (v175);
LABEL_306:
  int v209 = v7;
  if (v8) {
    unint64_t v176 = 0;
  }
  else {
    unint64_t v176 = v9;
  }
  unsigned int v177 = 1;
  if ((v173 & 0xFE) == 0x12 && v6)
  {
    if (v218)
    {
      unint64_t v9 = sub_1CBBE5D64(a1, v6, 1, 0);
      int v173 = *(_DWORD *)(v6 + 8);
    }
    if (*(_DWORD *)(v6 + 32) <= 1u) {
      unsigned int v177 = 1;
    }
    else {
      unsigned int v177 = *(_DWORD *)(v6 + 32);
    }
    if ((v173 & 0xFE) == 0x12) {
      uint64_t v6 = **(void **)(v6 + 16);
    }
  }
  else
  {
    unint64_t v9 = v176;
  }
  uint64_t __src = (uint64_t)&v227;
  uint64_t v226 = 0x400000000;
  uint64_t v178 = *(unsigned int *)(a2 + 32);
  if (v178)
  {
    uint64_t v212 = v6;
    unsigned int v216 = v3;
    uint64_t v179 = 0;
    uint64_t v180 = 8 * v178;
    do
    {
      uint64_t v181 = *(void *)(*(void *)(a2 + 24) + v179);
      int v182 = *(_DWORD *)(v181 + 8);
      if (v181) {
        BOOL v183 = (*(_DWORD *)(v181 + 8) & 0xFE) == 18;
      }
      else {
        BOOL v183 = 0;
      }
      if (v183)
      {
        if (v218)
        {
          unint64_t v184 = sub_1CBBE5D64(v4, *(void *)(*(void *)(a2 + 24) + v179), 0, 1);
          if (__OFADD__(v9, v184)) {
            unint64_t v9 = ((uint64_t)(v9 + v184) >> 63) ^ 0x8000000000000000;
          }
          else {
            v9 += v184;
          }
          int v182 = *(_DWORD *)(v181 + 8);
        }
        if (v177 <= *(_DWORD *)(v181 + 32)) {
          unsigned int v177 = *(_DWORD *)(v181 + 32);
        }
        if ((v182 & 0xFE) == 0x12) {
          uint64_t v181 = **(void **)(v181 + 16);
        }
      }
      if (v226 >= (unint64_t)HIDWORD(v226)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(__src + 8 * v226) = v181;
      uint64_t v185 = (v226 + 1);
      LODWORD(v226) = v226 + 1;
      v179 += 8;
    }
    while (v180 != v179);
    uint64_t v186 = (char *)__src;
    uint64_t v3 = v216;
    uint64_t v6 = v212;
  }
  else
  {
    uint64_t v185 = 0;
    uint64_t v186 = (char *)&v227;
  }
  if (v177 == 1)
  {
    unint64_t v15 = 1;
  }
  else
  {
    *(void *)&long long v240 = 0;
    *((void *)&v240 + 1) = v6;
    LODWORD(v241) = v5;
    uint64_t v242 = v244;
    uint64_t v243 = 0x400000000;
    long long v245 = v247;
    uint64_t v246 = 0x400000000;
    int v248 = v209;
    long long v249 = xmmword_1CD96D880;
    sub_1CC1587C8((uint64_t)&v242, (uint64_t)v244, v186, &v186[8 * v185]);
    long long v234 = (void *)sub_1CBC202A4(v4, &v240, v3);
    uint64_t v235 = v187;
    uint64_t v237 = (void *)v177;
    LODWORD(v238) = 0;
    sub_1CB90C9D4((uint64_t)&v237, (uint64_t)&v234);
    if (__OFADD__(v237, v9)) {
      unint64_t v15 = ((uint64_t)((uint64_t)v237 + v9) >> 63) ^ 0x8000000000000000;
    }
    else {
      unint64_t v15 = (unint64_t)v237 + v9;
    }
    if (v245 != v247) {
      free(v245);
    }
    if (v242 != v244) {
      free(v242);
    }
    uint64_t v186 = (char *)__src;
  }
  if (v186 != (char *)&v227)
  {
    unint64_t v42 = v186;
    goto LABEL_245;
  }
LABEL_246:
  if (v250 != &v252) {
    free(v250);
  }
  return v15;
}

unint64_t sub_1CBC2467C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v31 = v35;
  int v32 = v35;
  uint64_t v33 = 4;
  int v34 = 0;
  uint64_t v4 = a3;
  if (!a3) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  do
  {
    uint64_t v10 = *(void *)(a2 + 8 * v8);
    uint64_t v11 = *(void *)(a4 + 8 * v8);
    if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12) {
      unsigned int v12 = *(unsigned __int8 *)(**(void **)(v11 + 16) + 8);
    }
    else {
      unsigned int v12 = *(_DWORD *)(v11 + 8);
    }
    BOOL v13 = v12 < 7 || v12 == 13;
    if (!v13 && v12 != 15 || *(unsigned __int8 *)(v10 + 16) < 0x15u) {
      goto LABEL_51;
    }
    uint64_t v14 = v32;
    uint64_t v15 = HIDWORD(v33);
    if (v32 == v31)
    {
      if (HIDWORD(v33))
      {
        int v16 = 0;
        uint64_t v17 = 8 * HIDWORD(v33);
        uint64_t v18 = v32;
        while (*(void *)v18 != v10)
        {
          if (*(void *)v18 == -2) {
            int v16 = v18;
          }
          v18 += 8;
          v17 -= 8;
          if (!v17)
          {
            if (!v16) {
              goto LABEL_20;
            }
            *(void *)int v16 = v10;
            --v34;
            if (v11) {
              goto LABEL_47;
            }
            goto LABEL_51;
          }
        }
        goto LABEL_51;
      }
LABEL_20:
      unsigned int v19 = v33;
      if (HIDWORD(v33) < v33)
      {
        ++HIDWORD(v33);
        *(void *)&v32[8 * v15] = v10;
        if (!v11) {
          goto LABEL_51;
        }
LABEL_47:
        if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
        {
          unint64_t v29 = sub_1CBBE5D64(a1, v11, 0, 1);
          if (__OFADD__(v9, v29)) {
            unint64_t v9 = ((uint64_t)(v9 + v29) >> 63) ^ 0x8000000000000000;
          }
          else {
            v9 += v29;
          }
        }
        goto LABEL_51;
      }
    }
    else
    {
      unsigned int v19 = v33;
    }
    if (3 * v19 <= 4 * (HIDWORD(v33) - v34))
    {
      if (v19 >= 0x40) {
        v19 *= 2;
      }
      else {
        unsigned int v19 = 128;
      }
    }
    else if (v19 - HIDWORD(v33) >= v19 >> 3)
    {
      goto LABEL_26;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v31, v19);
    unsigned int v19 = v33;
    uint64_t v14 = v32;
LABEL_26:
    unsigned int v20 = v19 - 1;
    unsigned int v21 = (v19 - 1) & ((v10 >> 4) ^ (v10 >> 9));
    unint64_t v22 = &v14[8 * v21];
    uint64_t v23 = *(void *)v22;
    if (*(void *)v22 == -1)
    {
      unsigned int v24 = 0;
LABEL_40:
      if (v24) {
        uint64_t v28 = v24;
      }
      else {
        uint64_t v28 = v22;
      }
      if (*(void *)v28 != v10)
      {
        if (*(void *)v28 == -2) {
          --v34;
        }
        else {
          ++HIDWORD(v33);
        }
        *(void *)uint64_t v28 = v10;
        if (v11) {
          goto LABEL_47;
        }
      }
    }
    else
    {
      unsigned int v24 = 0;
      int v25 = 1;
      while (v23 != v10)
      {
        if (v24) {
          BOOL v26 = 0;
        }
        else {
          BOOL v26 = v23 == -2;
        }
        if (v26) {
          unsigned int v24 = v22;
        }
        unsigned int v27 = v21 + v25++;
        unsigned int v21 = v27 & v20;
        unint64_t v22 = &v14[8 * (v27 & v20)];
        uint64_t v23 = *(void *)v22;
        if (*(void *)v22 == -1) {
          goto LABEL_40;
        }
      }
    }
LABEL_51:
    ++v8;
  }
  while (v8 != v4);
  if (v32 != v31) {
    free(v32);
  }
  return v9;
}

void sub_1CBC24928()
{
}

uint64_t sub_1CBC2493C(uint64_t a1, int a2)
{
  uint64_t result = 1;
  if (a2 > 117)
  {
    if (a2 != 205 && ((a2 - 118) > 0xB || ((1 << (a2 - 118)) & 0xF4F) == 0) && a2 != 193) {
      return 0;
    }
  }
  else if ((a2 - 45) > 0x25 || ((1 << (a2 - 45)) & 0x2930F3C007) == 0)
  {
    return 0;
  }
  return result;
}

void sub_1CBC249B4()
{
}

void *sub_1CBC249C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FBF38;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC24A10(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FBF38;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC24A3C(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 313);
}

void sub_1CBC24A84()
{
}

void *sub_1CBC24A98(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FBF80;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC24AE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FBF80;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC24B0C(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 286);
}

void sub_1CBC24B54()
{
}

void *sub_1CBC24B68(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FBFC8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC24BB0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FBFC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC24BDC(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 287);
}

void sub_1CBC24C24()
{
}

void *sub_1CBC24C38(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC010;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC24C80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC010;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC24CAC(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 335);
}

void sub_1CBC24CF4()
{
}

void *sub_1CBC24D08()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25FC058;
  return result;
}

void sub_1CBC24D40(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FC058;
}

uint64_t sub_1CBC24D68()
{
  return 1;
}

void sub_1CBC24D74()
{
}

void *sub_1CBC24D88()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25FC0A0;
  return result;
}

void sub_1CBC24DC0(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FC0A0;
}

uint64_t sub_1CBC24DE8()
{
  return 0;
}

void sub_1CBC24DF4()
{
}

void *sub_1CBC24E08(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC0E8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC24E50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC0E8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC24E7C(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 341);
}

void sub_1CBC24EC4()
{
}

void *sub_1CBC24ED8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC130;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC24F20(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC130;
  a2[1] = v2;
  return result;
}

BOOL sub_1CBC24F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  return *(unsigned char *)((*(uint64_t (**)(void))(**(void **)(v3 + 112) + 16))(*(void *)(v3 + 112)) + 296)
      || *(unsigned char *)((*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 112) + 16))(*(void *)(v3 + 112), a2)+ 306) != 0;
}

void sub_1CBC24FE4()
{
}

void *sub_1CBC24FF8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC178;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC25040(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC178;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC2506C(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 332);
}

void sub_1CBC250B4()
{
}

void *sub_1CBC250C8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25FC1C0;
  return result;
}

void sub_1CBC25100(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FC1C0;
}

uint64_t sub_1CBC25128()
{
  return 1;
}

void sub_1CBC25134()
{
}

void *sub_1CBC25148(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC208;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC25190(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC208;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC251BC(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112));
  if (v1[291])
  {
    int v2 = 1;
  }
  else if (v1[292])
  {
    int v2 = 2;
  }
  else if (v1[294])
  {
    int v2 = 4;
  }
  else
  {
    int v2 = 8 * v1[293];
  }
  return v2 | (16 * v1[342]);
}

void sub_1CBC25240()
{
}

void *sub_1CBC25254()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25FC250;
  return result;
}

void sub_1CBC2528C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FC250;
}

uint64_t sub_1CBC252B4()
{
  return 1;
}

void sub_1CBC252C0()
{
}

void *sub_1CBC252D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC298;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC2531C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC298;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC25348(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 314);
}

void sub_1CBC25390()
{
}

void *sub_1CBC253A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC2E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC253EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC2E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC25418(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 315);
}

void sub_1CBC25460()
{
}

void *sub_1CBC25474(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC328;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC254BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC328;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC254E8(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 316);
}

void sub_1CBC25530()
{
}

void *sub_1CBC25544(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC370;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC2558C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC370;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC255B8(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 317);
}

void sub_1CBC25600()
{
}

void *sub_1CBC25614(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC3B8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC2565C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC3B8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC25688(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 336);
}

void sub_1CBC256D0()
{
}

void *sub_1CBC256E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC400;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC2572C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC400;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC25758(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 337);
}

void sub_1CBC257A0()
{
}

void *sub_1CBC257B4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25FC448;
  return result;
}

void sub_1CBC257EC(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FC448;
}

uint64_t sub_1CBC25814()
{
  return 0;
}

void sub_1CBC25820()
{
}

void *sub_1CBC25834()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F25FC490;
  return result;
}

void sub_1CBC2586C(uint64_t a1, void *a2)
{
  *a2 = &unk_1F25FC490;
}

uint64_t sub_1CBC25894()
{
  return 0;
}

void sub_1CBC258A0()
{
}

void *sub_1CBC258B4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F25FC4D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1CBC258FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F25FC4D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1CBC25928(uint64_t a1)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 112) + 16))(*(void *)(*(void *)(a1 + 8) + 112))
                            + 328);
}

uint64_t sub_1CBC2596C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_1CBC2597C()
{
  v4.n128_u64[0] = (unint64_t)"FMA contraction at IR level";
  v4.n128_u64[1] = 27;
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCC1C10, "disable-agx3-fma-contraction", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1C10, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Show the number of values live over each call";
  v4.n128_u64[1] = 45;
  char v2 = 0;
  uint64_t v3 = (int *)&v2;
  int v1 = 1;
  sub_1CD42AACC(&v4, (char **)&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &qword_1EBCC1CD0, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Enable verification of presence of Mem Operands";
  v4.n128_u64[1] = 47;
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCC1D90, "enable-agx3-memop-verifier", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1D90, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Enable expansion of AGX specific builtins";
  v4.n128_u64[1] = 41;
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  sub_1CD41D15C((uint64_t)&unk_1EBCC1E50, "run-agx-expand-builtins", &v4, (unsigned char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1E50, &dword_1CB82C000);
  v4.n128_u64[0] = (unint64_t)"Add relaxed-math flags to fp operations that have fast.";
  v4.n128_u64[1] = 55;
  LOBYTE(v1) = 0;
  uint64_t v3 = &v1;
  sub_1CD3F48AC((uint64_t)&unk_1EBCC1F10, "agx3-replace-fast-math-with-relaxed", &v4, (unsigned char **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1F10, &dword_1CB82C000);
}

void sub_1CBC25B28(llvm *a1)
{
  llvm::initializeMachineDominatorTreePass((uint64_t)a1);
  llvm::initializeMachinePostDominatorTreePass(a1, v2);
  llvm::initializeMachineLoopInfoPass((uint64_t)a1);
  operator new();
}

uint64_t sub_1CBC25BD8(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EBCC2090;
  *(_DWORD *)(a1 + 24) = 2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = a1 + 48;
  *(void *)(a1 + 40) = 0x600000001;
  *(_DWORD *)(a1 + 96) = 11;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 120;
  *(void *)(a1 + 112) = 0x600000001;
  *(_DWORD *)(a1 + 168) = 11;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = a1 + 192;
  *(void *)(a1 + 184) = 0x600000001;
  *(_DWORD *)(a1 + 240) = 11;
  *(void *)a1 = &unk_1F25FC568;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EBCC2098, memory_order_acquire) != -1)
  {
    v5[0] = sub_1CBC25B28;
    v5[1] = &PassRegistry;
    __n128 v4 = v5;
    std::__call_once(&qword_1EBCC2098, &v4, (void (__cdecl *)(void *))sub_1CB848390);
  }
  return a1;
}

void sub_1CBC25CD0()
{
}

void sub_1CBC25D0C(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  int v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    __n128 v4 = a1;
    free(v1);
    a1 = v4;
  }
  char v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC25DC0(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  char v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  __n128 v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

void sub_1CBC25E6C(llvm::PassRegistry *a1, uint64_t a2)
{
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(a1);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachinePostDominatorTree::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1CB843600(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);

  llvm::MachineFunctionPass::getAnalysisUsage((uint64_t)a1, a2);
}

uint64_t sub_1CBC25F30()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  BOOL v764 = v1;
  uint64_t v2 = v0;
  v865[209] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(v0 + 8);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (v4 == v5)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v4 != &llvm::MachineDominatorTree::ID)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_4;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8);
  }
  v763 = (void ***)(*(uint64_t (**)(uint64_t, void *))(*(void *)v6 + 96))(v6, &llvm::MachineDominatorTree::ID);
  uint64_t v7 = *(uint64_t **)(v2 + 8);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (v8 == v9)
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v8 != &llvm::MachinePostDominatorTree::ID)
    {
      v8 += 16;
      if (v8 == v9) {
        goto LABEL_9;
      }
    }
    uint64_t v10 = *(void *)(v8 + 8);
  }
  uint64_t v767 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v10 + 96))(v10, &llvm::MachinePostDominatorTree::ID);
  uint64_t v11 = *(uint64_t **)(v2 + 8);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  if (v12 == v13)
  {
LABEL_14:
    uint64_t v14 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v12 != &llvm::MachineLoopInfo::ID)
    {
      v12 += 16;
      if (v12 == v13) {
        goto LABEL_14;
      }
    }
    uint64_t v14 = *(void *)(v12 + 8);
  }
  uint64_t v765 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v14 + 96))(v14, &llvm::MachineLoopInfo::ID);
  uint64_t v15 = *(uint64_t **)(v2 + 8);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v16 == v17)
  {
LABEL_19:
    uint64_t v18 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v16 != &llvm::FunctionGroupInfoWrapperPass::ID)
    {
      v16 += 16;
      if (v16 == v17) {
        goto LABEL_19;
      }
    }
    uint64_t v18 = *(void *)(v16 + 8);
  }
  uint64_t v19 = *(void *)((*(uint64_t (**)(uint64_t, void *))(*(void *)v18 + 96))(v18, &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  unsigned int v20 = *(llvm::Module **)(*v764 + 40);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCC20A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EBCC20A0))
  {
    dword_1EBCC2094 = 20;
    __cxa_guard_release(&qword_1EBCC20A0);
  }
  unsigned int v21 = ((*(unsigned __int16 *)(*v764 + 18) >> 4) & 0x3FF) - 101;
  BOOL v22 = v21 > 7;
  int v23 = (1 << v21) & 0x8D;
  if (v22 || v23 == 0) {
    return 0;
  }
  uint64_t __s1 = "agx.prid";
  LOWORD(v863[0]) = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v20, (const char **)&__s1);
  if (NamedMetadata && (v26 = *(uint64_t **)(NamedMetadata + 48), uint64_t v27 = *((unsigned int *)v26 + 2), v27))
  {
    unsigned int v28 = 0;
    unsigned int v29 = 0;
    int v30 = 0;
    uint64_t v31 = *v26;
    do
    {
      int v32 = (uint64_t *)(*(void *)v31 - 8 * *(unsigned int *)(*(void *)v31 + 8));
      uint64_t v33 = *v32;
      if (*v32)
      {
        if (!*(unsigned char *)v33)
        {
          uint64_t v34 = *(void *)(v33 + 8);
          if (*(void *)v34 == 5)
          {
            int v35 = *(_DWORD *)(v34 + 24);
            int v36 = *(unsigned __int8 *)(v34 + 28);
            if (v35 == 1702390118 && v36 == 100)
            {
              uint64_t v38 = *(void *)(v32[2] + 128);
              uint64_t v39 = (void *)(v38 + 24);
              if (*(_DWORD *)(v38 + 32) >= 0x41u) {
                uint64_t v39 = (void *)*v39;
              }
              uint64_t v40 = *(void *)(v32[4] + 128);
              uint64_t v41 = (void *)(v40 + 24);
              if (*(_DWORD *)(v40 + 32) >= 0x41u) {
                uint64_t v41 = (void *)*v41;
              }
              uint64_t v42 = *(void *)(v32[6] + 128);
              unint64_t v43 = (void *)(v42 + 24);
              if (*(_DWORD *)(v42 + 32) >= 0x41u) {
                unint64_t v43 = (void *)*v43;
              }
              unsigned int v28 = *(_DWORD *)v39;
              unsigned int v29 = *(_DWORD *)v41;
              int v30 = *(_DWORD *)v43;
            }
          }
        }
      }
      v31 += 8;
      --v27;
    }
    while (v27);
  }
  else
  {
    int v30 = 0;
    unsigned int v29 = 0;
    unsigned int v28 = 0;
  }
  uint64_t v44 = (unsigned __int8 *)v764[2];
  v761 = v44;
  if (*(_DWORD *)(*(void *)(*(void *)(v767 + 248) + 72) + 32) != 1)
  {
    BOOL v52 = (v44[298] | v44[299] | v44[300]) == 0;
    uint64_t v53 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v44 + 104))(v44);
    uint64_t v54 = (void *)v764[41];
    unint64_t v55 = (unint64_t *)v54[7];
    uint64_t v56 = *(void *)(v53 + 8) + 312192;
    uint64_t v57 = (llvm::MachineFunction *)v54[4];
    uint64_t v820 = 0;
    MachineInstr = llvm::MachineFunction::CreateMachineInstr(v57, v56, (unsigned __int8 **)&v820, 0);
    if (!v820) {
      goto LABEL_56;
    }
    int v722 = *(unsigned __int8 *)v820;
    if ((v722 - 4) > 0x1E)
    {
      if ((v722 - 3) >= 0xFFFFFFFE) {
        unsigned int v737 = v820;
      }
      else {
        unsigned int v737 = 0;
      }
      if ((v722 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v724 = (unint64_t)v737 + 8;
LABEL_1381:
        uint64_t __s1 = &v820;
        sub_1CC5FA668(v724 + 16, &__s1);
        goto LABEL_56;
      }
      if (v722 == 3) {
        *((void *)v820 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v820 + 1) & 0x7F) == 2 || *((_DWORD *)v820 + 3))
    {
      uint64_t v723 = *((void *)v820 + 2);
      if ((v723 & 4) != 0)
      {
        unint64_t v724 = v723 & 0xFFFFFFFFFFFFFFF8;
        if (v724) {
          goto LABEL_1381;
        }
      }
    }
LABEL_56:
    uint64_t v59 = v54[5];
    *((void *)MachineInstr + 3) = v59;
    uint64_t v60 = *(void *)(v59 + 32);
    uint64_t v61 = *((unsigned int *)MachineInstr + 10);
    if (v61)
    {
      uint64_t v302 = *((void *)MachineInstr + 4);
      uint64_t v303 = *(void *)(v60 + 40);
      uint64_t v304 = 32 * v61;
      do
      {
        if (!*(unsigned char *)v302)
        {
          uint64_t v305 = *(unsigned int *)(v302 + 4);
          if ((int)v305 >= 0) {
            long long v306 = (uint64_t *)(*(void *)(v303 + 272) + 8 * v305);
          }
          else {
            long long v306 = (uint64_t *)(*(void *)(v303 + 24) + 16 * (v305 & 0x7FFFFFFF) + 8);
          }
          uint64_t v307 = *v306;
          if (*v306)
          {
            uint64_t v308 = *(void *)(v307 + 16);
            *(void *)(v307 + 16) = v302;
            *(void *)(v302 + 16) = v308;
            if (*(unsigned char *)(v302 + 3))
            {
              *(void *)(v302 + 24) = v307;
            }
            else
            {
              *(void *)(v302 + 24) = 0;
              long long v306 = (uint64_t *)(v308 + 24);
            }
          }
          else
          {
            *(void *)(v302 + 16) = v302;
            *(void *)(v302 + 24) = 0;
          }
          *long long v306 = v302;
        }
        v302 += 32;
        v304 -= 32;
      }
      while (v304);
    }
    uint64_t v62 = *(void *)(v60 + 728);
    if (v62) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v62 + 24))(v62, MachineInstr);
    }
    unint64_t v63 = *v55 & 0xFFFFFFFFFFFFFFF8;
    *(void *)MachineInstr = v63 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v55;
    *(void *)(v63 + 8) = MachineInstr;
    unint64_t *v55 = *v55 & 7 | (unint64_t)MachineInstr;
    uint64_t v64 = 1;
    LODWORD(__s1) = 1;
    uint64_t v860 = 0;
    v859 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v57, (const llvm::MachineOperand *)&__s1);
    uint64_t v65 = 3;
    LODWORD(__s1) = 1;
    if (!v52) {
      uint64_t v65 = 1;
    }
    v859 = 0;
    uint64_t v860 = v65;
    llvm::MachineInstr::addOperand(MachineInstr, v57, (const llvm::MachineOperand *)&__s1);
    LODWORD(__s1) = 1;
    v859 = 0;
    uint64_t v860 = 1023;
    llvm::MachineInstr::addOperand(MachineInstr, v57, (const llvm::MachineOperand *)&__s1);
    if (!v761[369] && dword_1EBCC2094) {
      return v64;
    }
    __n128 v66 = (void *)v764[40];
    unint64_t v67 = v66[6] & 0xFFFFFFFFFFFFFFF8;
    if (v67 && (*(unsigned char *)v67 & 4) != 0)
    {
      __int16 v68 = *(_WORD *)(v67 + 44);
    }
    else
    {
      while (1)
      {
        __int16 v68 = *(_WORD *)(v67 + 44);
        if ((v68 & 4) == 0) {
          break;
        }
        unint64_t v67 = *(void *)v67 & 0xFFFFFFFFFFFFFFF8;
      }
    }
    uint64_t v69 = *(void *)(v53 + 8) + 312144;
    if ((v68 & 4) == 0)
    {
      uint64_t v70 = (llvm::MachineFunction *)v66[4];
      unint64_t v71 = *(void **)(v67 + 56);
      uint64_t v820 = v71;
      if (v71) {
        llvm::MetadataTracking::track((uint64_t)&v820, (unsigned __int8 *)v71, 2);
      }
      uint64_t v72 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v70, v69, (unsigned __int8 **)&v820, 0);
      if (!v820) {
        goto LABEL_72;
      }
      int v738 = *(unsigned __int8 *)v820;
      if ((v738 - 4) > 0x1E)
      {
        if ((v738 - 3) >= 0xFFFFFFFE) {
          v754 = v820;
        }
        else {
          v754 = 0;
        }
        if ((v738 - 3) < 0xFFFFFFFE)
        {
          if (v738 == 3) {
            *((void *)v820 + 1) = 0;
          }
          goto LABEL_72;
        }
        unint64_t v740 = (unint64_t)v754 + 8;
      }
      else
      {
        if ((*((unsigned char *)v820 + 1) & 0x7F) != 2 && !*((_DWORD *)v820 + 3)) {
          goto LABEL_72;
        }
        uint64_t v739 = *((void *)v820 + 2);
        if ((v739 & 4) == 0) {
          goto LABEL_72;
        }
        unint64_t v740 = v739 & 0xFFFFFFFFFFFFFFF8;
        if (!v740) {
          goto LABEL_72;
        }
      }
      uint64_t __s1 = &v820;
      sub_1CC5FA668(v740 + 16, &__s1);
LABEL_72:
      uint64_t v73 = v66[5];
      *(void *)(v72 + 24) = v73;
      uint64_t v74 = *(void *)(v73 + 32);
      uint64_t v75 = *(unsigned int *)(v72 + 40);
      if (v75)
      {
        uint64_t v705 = *(void *)(v72 + 32);
        uint64_t v706 = *(void *)(v74 + 40);
        uint64_t v707 = 32 * v75;
        do
        {
          if (!*(unsigned char *)v705)
          {
            uint64_t v708 = *(unsigned int *)(v705 + 4);
            if ((int)v708 >= 0) {
              v709 = (uint64_t *)(*(void *)(v706 + 272) + 8 * v708);
            }
            else {
              v709 = (uint64_t *)(*(void *)(v706 + 24) + 16 * (v708 & 0x7FFFFFFF) + 8);
            }
            uint64_t v710 = *v709;
            if (*v709)
            {
              uint64_t v711 = *(void *)(v710 + 16);
              *(void *)(v710 + 16) = v705;
              *(void *)(v705 + 16) = v711;
              if (*(unsigned char *)(v705 + 3))
              {
                *(void *)(v705 + 24) = v710;
              }
              else
              {
                *(void *)(v705 + 24) = 0;
                v709 = (uint64_t *)(v711 + 24);
              }
            }
            else
            {
              *(void *)(v705 + 16) = v705;
              *(void *)(v705 + 24) = 0;
            }
            uint64_t *v709 = v705;
          }
          v705 += 32;
          v707 -= 32;
        }
        while (v707);
      }
      uint64_t v76 = *(void *)(v74 + 728);
      if (v76) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v76 + 24))(v76, v72);
      }
      unint64_t v77 = *(void *)v67 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v72 = v77 | *(void *)v72 & 7;
      *(void *)(v72 + 8) = v67;
      *(void *)(v77 + 8) = v72;
      *(void *)unint64_t v67 = *(void *)v67 & 7 | v72;
LABEL_83:
      uint64_t v64 = 1;
      LODWORD(__s1) = 1;
      uint64_t v860 = 0;
      v859 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v70, (const llvm::MachineOperand *)&__s1);
      LODWORD(__s1) = 1;
      v859 = 0;
      uint64_t v860 = 1023;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v70, (const llvm::MachineOperand *)&__s1);
      return v64;
    }
    uint64_t v70 = (llvm::MachineFunction *)v66[4];
    unint64_t v78 = *(void **)(v67 + 56);
    uint64_t v820 = v78;
    if (v78) {
      llvm::MetadataTracking::track((uint64_t)&v820, (unsigned __int8 *)v78, 2);
    }
    uint64_t v72 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v70, v69, (unsigned __int8 **)&v820, 0);
    if (v820)
    {
      int v741 = *(unsigned __int8 *)v820;
      if ((v741 - 4) > 0x1E)
      {
        if ((v741 - 3) >= 0xFFFFFFFE) {
          v755 = v820;
        }
        else {
          v755 = 0;
        }
        if ((v741 - 3) < 0xFFFFFFFE)
        {
          if (v741 == 3) {
            *((void *)v820 + 1) = 0;
          }
          goto LABEL_79;
        }
        unint64_t v743 = (unint64_t)v755 + 8;
      }
      else
      {
        if ((*((unsigned char *)v820 + 1) & 0x7F) != 2 && !*((_DWORD *)v820 + 3)) {
          goto LABEL_79;
        }
        uint64_t v742 = *((void *)v820 + 2);
        if ((v742 & 4) == 0) {
          goto LABEL_79;
        }
        unint64_t v743 = v742 & 0xFFFFFFFFFFFFFFF8;
        if (!v743) {
          goto LABEL_79;
        }
      }
      uint64_t __s1 = &v820;
      sub_1CC5FA668(v743 + 16, &__s1);
    }
LABEL_79:
    if (v66 + 6 != (void *)v67 && (*(_WORD *)(v67 + 44) & 4) != 0) {
      *(_WORD *)(v72 + 44) |= 0xCu;
    }
    sub_1CC31973C(v66 + 5, (uint64_t *)v67, v72);
    goto LABEL_83;
  }
  for (uint64_t i = 0; i != 110; i += 10)
  {
    uint64_t v46 = &v824[i + 209];
    *uint64_t v46 = &v824[i + 211];
    v46[1] = 0x400000000;
  }
  unsigned __int8 v831 = 0;
  long long v826 = 0u;
  long long v827 = 0u;
  long long v828 = 0u;
  v832 = v834;
  uint64_t v833 = 0x200000000;
  unsigned int v47 = 62;
  uint64_t v48 = v764 + 40;
  do
  {
    unsigned int v49 = v47;
    uint64_t v48 = (void *)v48[1];
    ++v47;
  }
  while (v48 != v764 + 40);
  unint64_t v758 = __PAIR64__(v29, v28);
  unsigned int v50 = v49 - 62;
  unint64_t v51 = v47 >> 6;
  v812 = &v813.u64[1];
  v813.i32[1] = 6;
  if (v51 >= 7)
  {
    v813.i32[0] = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v47 >> 6) {
    bzero(&v813.u64[1], 8 * v51);
  }
  v813.i32[0] = v51;
  v816.i32[2] = v50;
  uint64_t v79 = v764[6];
  if (!v79)
  {
    uint64_t v79 = (*(uint64_t (**)(void, void *, void *))(*(void *)v764[1] + 216))(v764[1], v764 + 16, v764);
    v764[6] = v79;
  }
  if (!*(unsigned char *)(v79 + 480))
  {
    sub_1CD10B93C(*(llvm::Module **)(*v764 + 40), v79 + 432, v79 + 256, v79 + 456);
    *(unsigned char *)(v79 + 480) = 1;
  }
  uint64_t v80 = *(void *)(*v764 + 40);
  uint64_t v788 = 0;
  uint64_t v789 = 0;
  unsigned int v790 = 0;
  sub_1CBA9B7F4((uint64_t)&v788, v79 + 432);
  unint64_t v81 = v788 + ((unint64_t)v790 << 6);
  v766 = v764 + 40;
  int v760 = v30;
  uint64_t v759 = v19;
  if (v789)
  {
    if (v790)
    {
      unint64_t v82 = (unint64_t)v790 << 6;
      uint64_t v83 = v788;
      while ((*(void *)v83 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v83 += 64;
        v82 -= 64;
        if (!v82) {
          goto LABEL_94;
        }
      }
    }
    else
    {
      uint64_t v83 = v788;
    }
  }
  else
  {
LABEL_94:
    uint64_t v83 = v788 + ((unint64_t)v790 << 6);
  }
  unint64_t v84 = v788 + ((unint64_t)v790 << 6);
  uint64_t v772 = v79;
  while (v83 != v84)
  {
    uint64_t v85 = *(unsigned int *)(v83 + 40);
    if (v85)
    {
      int v86 = *(unsigned int **)(v83 + 32);
      unsigned int v87 = v833;
      uint64_t v88 = 6 * v85;
      do
      {
        uint64_t v89 = *((unsigned __int16 *)v86 + 2);
        uint64_t v90 = *v86;
        if (v87 >= HIDWORD(v833)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v91 = (char *)v832 + 6 * v87;
        *(_DWORD *)int v91 = v90;
        *((_WORD *)v91 + 2) = (v90 | (unint64_t)(v89 << 32)) >> 32;
        unsigned int v87 = v833 + 1;
        LODWORD(v833) = v833 + 1;
        int v86 = (unsigned int *)((char *)v86 + 6);
        v88 -= 6;
      }
      while (v88);
    }
    uint64_t v92 = v83 + 64;
    uint64_t v83 = v81;
    uint64_t v79 = v772;
    if (v92 != v81)
    {
      uint64_t v83 = v92;
      while ((*(void *)v83 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v83 += 64;
        if (v83 == v81)
        {
          uint64_t v83 = v81;
          break;
        }
      }
    }
  }
  uint64_t v801 = 0;
  uint64_t v802 = 0;
  unsigned int v803 = 0;
  BOOL v811 = 0;
  unsigned int v809 = 0;
  uint64_t v93 = *(void *)(v79 + 432);
  uint64_t v94 = *(unsigned int *)(v79 + 448);
  uint64_t v95 = v93 + (v94 << 6);
  if (*(_DWORD *)(v79 + 440))
  {
    if (v94)
    {
      uint64_t v96 = v94 << 6;
      uint64_t v97 = *(void *)(v79 + 432);
      while ((*(void *)v97 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v97 += 64;
        v96 -= 64;
        if (!v96) {
          goto LABEL_114;
        }
      }
    }
    else
    {
      uint64_t v97 = *(void *)(v79 + 432);
    }
  }
  else
  {
LABEL_114:
    uint64_t v97 = v93 + (v94 << 6);
  }
  unint64_t v98 = (void *)(v93 + ((unint64_t)v94 << 6));
  if ((void *)v97 != v98)
  {
    v777 = (void *)(v93 + ((unint64_t)v94 << 6));
    while (1)
    {
      int v835 = *(unsigned __int8 ***)v97;
      unsigned int v836 = &v838;
      uint64_t v837 = 0x100000000;
      if (*(_DWORD *)(v97 + 16)) {
        sub_1CBA9B97C((uint64_t)&v836, v97 + 8);
      }
      uint64_t v839 = v841;
      uint64_t v840 = 0x200000000;
      if (*(_DWORD *)(v97 + 40)) {
        sub_1CBA9B97C((uint64_t)&v839, v97 + 32);
      }
      unint64_t v99 = (unsigned __int8 *)v835;
      if (!v835[1]) {
        goto LABEL_206;
      }
      __int16 v800 = 0;
      int v808 = 0;
      if ((*((unsigned char *)v835 + 34) & 0x40) == 0) {
        goto LABEL_131;
      }
      uint64_t v100 = **(void **)*v835;
      uint64_t __s1 = v835;
      int v101 = *(_DWORD *)(v100 + 2520);
      if (!v101) {
        break;
      }
      uint64_t v102 = *(void *)(v100 + 2504);
      int v103 = v101 - 1;
      unsigned int v104 = v103 & ((v835 >> 4) ^ (v835 >> 9));
      uint64_t v105 = (unsigned __int8 **)(v102 + 24 * v104);
      uint64_t v106 = *v105;
      if (*v105 != (unsigned __int8 *)v835)
      {
        uint64_t v166 = 0;
        int v167 = 1;
        while (v106 != (unsigned __int8 *)-4096)
        {
          if (v166) {
            BOOL v168 = 0;
          }
          else {
            BOOL v168 = v106 == (unsigned __int8 *)-8192;
          }
          if (v168) {
            uint64_t v166 = v105;
          }
          unsigned int v169 = v104 + v167++;
          unsigned int v104 = v169 & v103;
          uint64_t v105 = (unsigned __int8 **)(v102 + 24 * v104);
          uint64_t v106 = *v105;
          if (*v105 == (unsigned __int8 *)v835) {
            goto LABEL_126;
          }
        }
        if (v166) {
          uint64_t v178 = v166;
        }
        else {
          uint64_t v178 = v105;
        }
        goto LABEL_251;
      }
LABEL_126:
      if (v105[2] == (unsigned __int8 *)15)
      {
        uint64_t v107 = v105[1];
        uint64_t v108 = *(void *)v107;
        uint64_t v109 = *(void *)(v107 + 7);
        if (v108 == 0x625F726566667562 && v109 == 0x73676E69646E6962)
        {
LABEL_217:
          if (v840) {
            int v135 = 3;
          }
          else {
            int v135 = 2;
          }
          goto LABEL_151;
        }
      }
LABEL_131:
      if ((v99[34] & 0x40) == 0) {
        goto LABEL_142;
      }
      uint64_t v111 = ***(void ***)v99;
      uint64_t __s1 = v99;
      int v112 = *(_DWORD *)(v111 + 2520);
      if (!v112)
      {
        uint64_t v180 = 0;
LABEL_255:
        uint64_t v116 = (unsigned __int8 **)sub_1CC5BF31C(v111 + 2504, (uint64_t)&__s1, (uint64_t *)&__s1, v180);
        uint64_t v181 = (unsigned __int8 *)__s1;
        v116[1] = 0;
        char v116[2] = 0;
        *uint64_t v116 = v181;
        goto LABEL_134;
      }
      uint64_t v113 = *(void *)(v111 + 2504);
      int v114 = v112 - 1;
      unsigned int v115 = v114 & ((v99 >> 4) ^ (v99 >> 9));
      uint64_t v116 = (unsigned __int8 **)(v113 + 24 * v115);
      uint64_t v117 = *v116;
      if (*v116 != v99)
      {
        int v170 = 0;
        int v171 = 1;
        while (v117 != (unsigned __int8 *)-4096)
        {
          if (v170) {
            BOOL v172 = 0;
          }
          else {
            BOOL v172 = v117 == (unsigned __int8 *)-8192;
          }
          if (v172) {
            int v170 = v116;
          }
          unsigned int v173 = v115 + v171++;
          unsigned int v115 = v173 & v114;
          uint64_t v116 = (unsigned __int8 **)(v113 + 24 * v115);
          uint64_t v117 = *v116;
          if (*v116 == v99) {
            goto LABEL_134;
          }
        }
        if (v170) {
          uint64_t v180 = v170;
        }
        else {
          uint64_t v180 = v116;
        }
        goto LABEL_255;
      }
LABEL_134:
      if (v116[2] == (unsigned __int8 *)19)
      {
        uint64_t v118 = v116[1];
        uint64_t v119 = *(void *)v118;
        uint64_t v120 = *((void *)v118 + 1);
        uint64_t v121 = *(void *)(v118 + 11);
        BOOL v122 = v119 == 0x705F726576697264 && v120 == 0x6675625F6D617261;
        if (v122 && v121 == 0x7265666675625F6DLL) {
          goto LABEL_217;
        }
      }
LABEL_142:
      if ((v99[34] & 0x40) == 0) {
        goto LABEL_150;
      }
      uint64_t v124 = ***(void ***)v99;
      uint64_t __s1 = v99;
      int v125 = *(_DWORD *)(v124 + 2520);
      if (!v125)
      {
        int v182 = 0;
LABEL_259:
        uint64_t v129 = (unsigned __int8 **)sub_1CC5BF31C(v124 + 2504, (uint64_t)&__s1, (uint64_t *)&__s1, v182);
        BOOL v183 = (unsigned __int8 *)__s1;
        v129[1] = 0;
        v129[2] = 0;
        *uint64_t v129 = v183;
        goto LABEL_145;
      }
      uint64_t v126 = *(void *)(v124 + 2504);
      int v127 = v125 - 1;
      unsigned int v128 = v127 & ((v99 >> 4) ^ (v99 >> 9));
      uint64_t v129 = (unsigned __int8 **)(v126 + 24 * v128);
      uint64_t v130 = *v129;
      if (*v129 != v99)
      {
        uint64_t v174 = 0;
        int v175 = 1;
        while (v130 != (unsigned __int8 *)-4096)
        {
          if (v174) {
            BOOL v176 = 0;
          }
          else {
            BOOL v176 = v130 == (unsigned __int8 *)-8192;
          }
          if (v176) {
            uint64_t v174 = v129;
          }
          unsigned int v177 = v128 + v175++;
          unsigned int v128 = v177 & v127;
          uint64_t v129 = (unsigned __int8 **)(v126 + 24 * v128);
          uint64_t v130 = *v129;
          if (*v129 == v99) {
            goto LABEL_145;
          }
        }
        if (v174) {
          int v182 = v174;
        }
        else {
          int v182 = v129;
        }
        goto LABEL_259;
      }
LABEL_145:
      if (v129[2] != (unsigned __int8 *)11
        || ((v131 = v129[1], uint64_t v132 = *(void *)v131, v133 = *(void *)(v131 + 3), v132 == 0x74735F6567616D69)
          ? (BOOL v134 = v133 == 0x65746174735F6567)
          : (BOOL v134 = 0),
            !v134))
      {
LABEL_150:
        int v135 = 2;
LABEL_151:
        int v808 = v135;
        goto LABEL_152;
      }
      int v808 = 1;
LABEL_152:
      __p[0] = &v801;
      __p[1] = &v808;
      v806 = &v811;
      v807 = &v809;
      v799[0] = (unsigned __int8 *)&v811;
      v799[1] = (unsigned __int8 *)&v809;
      v799[2] = (unsigned __int8 *)&v800;
      uint64_t __s1 = v99;
      int v862 = 0;
      v859 = 0;
      uint64_t v860 = 0;
      LOBYTE(v861) = 0;
      uint64_t v820 = v822;
      uint64_t v821 = 0x400000000;
      sub_1CBA9C1F8((uint64_t *)&v820, 1uLL, (uint64_t)&__s1);
      uint64_t __s1 = v863;
      v859 = v863;
      uint64_t v860 = 16;
      int v861 = 0;
      unsigned int v136 = v821;
      if (v821)
      {
        while (1)
        {
          unsigned int v810 = 0;
          unint64_t v804 = 0;
          unsigned int v798 = 0;
          char v797 = 0;
          unint64_t v796 = 0;
          uint64_t v137 = (char *)v820 + 32 * v136;
          uint64_t v138 = *((void *)v137 - 4);
          uint64_t v139 = (unsigned __int8 *)*((void *)v137 - 3);
          unsigned int v140 = *((_DWORD *)v137 - 4);
          unsigned int v141 = *((_DWORD *)v137 - 3);
          char v142 = *(v137 - 8);
          LODWORD(v137) = *((_DWORD *)v137 - 1);
          LODWORD(v821) = v136 - 1;
          unsigned int v810 = (unsigned __int8 *)v138;
          unint64_t v804 = v139;
          unsigned int v798 = v140;
          unint64_t v796 = __PAIR64__(v137, v141);
          char v797 = v142;
          *(void *)&long long v842 = v80 + 272;
          *((void *)&v842 + 1) = &v797;
          *(void *)&long long v843 = &v808;
          *((void *)&v843 + 1) = &v798;
          *(void *)&long long v844 = (char *)&v800 + 1;
          *((void *)&v844 + 1) = __p;
          *(void *)&long long v845 = &v804;
          *((void *)&v845 + 1) = &v835;
          v846 = &v796;
          *(void *)&long long v847 = (char *)&v796 + 4;
          *((void *)&v847 + 1) = &v810;
          *(void *)&long long v848 = v799;
          unsigned int v143 = *(unsigned __int8 *)(v138 + 16);
          if (!v138 || (int v144 = v143 - 28, v143 < 0x1C))
          {
            if (!v138 || v143 != 5)
            {
LABEL_159:
              uint64_t v145 = *((void *)v810 + 1);
              if (!v145) {
                goto LABEL_201;
              }
              while (2)
              {
                uint64_t v148 = *(uint64_t **)(v145 + 24);
                uint64_t v147 = (char *)v859;
                uint64_t v149 = HIDWORD(v860);
                if (v859 == __s1)
                {
                  if (HIDWORD(v860))
                  {
                    uint64_t v150 = 0;
                    uint64_t v151 = 8 * HIDWORD(v860);
                    unint64_t v152 = (uint64_t **)v859;
                    while (*v152 != v148)
                    {
                      if (*v152 == (uint64_t *)-2) {
                        uint64_t v150 = v152;
                      }
                      ++v152;
                      v151 -= 8;
                      if (!v151)
                      {
                        if (v150)
                        {
                          *uint64_t v150 = v148;
                          --v861;
                          goto LABEL_199;
                        }
                        goto LABEL_175;
                      }
                    }
                    goto LABEL_200;
                  }
LABEL_175:
                  unsigned int v146 = v860;
                  if (HIDWORD(v860) < v860)
                  {
                    ++HIDWORD(v860);
                    *((void *)v859 + v149) = v148;
                    goto LABEL_199;
                  }
                }
                else
                {
                  unsigned int v146 = v860;
                }
                if (3 * v146 <= 4 * (HIDWORD(v860) - v861))
                {
                  if (v146 >= 0x40) {
                    v146 *= 2;
                  }
                  else {
                    unsigned int v146 = 128;
                  }
                }
                else if (v146 - HIDWORD(v860) >= v146 >> 3)
                {
                  goto LABEL_180;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__s1, v146);
                unsigned int v146 = v860;
                uint64_t v147 = (char *)v859;
LABEL_180:
                unsigned int v153 = v146 - 1;
                unsigned int v154 = (v146 - 1) & ((v148 >> 4) ^ (v148 >> 9));
                uint64_t v155 = &v147[8 * v154];
                uint64_t v156 = *(uint64_t **)v155;
                if (*(void *)v155 != -1)
                {
                  uint64_t v157 = 0;
                  int v158 = 1;
                  while (v156 != v148)
                  {
                    if (v157) {
                      BOOL v159 = 0;
                    }
                    else {
                      BOOL v159 = v156 == (uint64_t *)-2;
                    }
                    if (v159) {
                      uint64_t v157 = v155;
                    }
                    unsigned int v160 = v154 + v158++;
                    unsigned int v154 = v160 & v153;
                    uint64_t v155 = &v147[8 * (v160 & v153)];
                    uint64_t v156 = *(uint64_t **)v155;
                    if (*(void *)v155 == -1) {
                      goto LABEL_192;
                    }
                  }
                  goto LABEL_200;
                }
                uint64_t v157 = 0;
LABEL_192:
                if (v157) {
                  uint64_t v161 = (uint64_t **)v157;
                }
                else {
                  uint64_t v161 = (uint64_t **)v155;
                }
                if (*v161 == v148)
                {
LABEL_200:
                  uint64_t v145 = *(void *)(v145 + 8);
                  if (!v145) {
                    goto LABEL_201;
                  }
                  continue;
                }
                break;
              }
              if (*v161 == (uint64_t *)-2) {
                --v861;
              }
              else {
                ++HIDWORD(v860);
              }
              *uint64_t v161 = v148;
LABEL_199:
              unsigned int v791 = v148;
              int v792 = (unsigned int *)v810;
              uint64_t v793 = (uint64_t *)__PAIR64__(v796, v798);
              char v794 = v797;
              int v795 = HIDWORD(v796);
              uint64_t v162 = (_OWORD *)sub_1CBA9C894((uint64_t)&v820, (unint64_t)&v791, 1);
              uint64_t v163 = (char *)v820 + 32 * v821;
              long long v164 = v162[1];
              *uint64_t v163 = *v162;
              v163[1] = v164;
              LODWORD(v821) = v821 + 1;
              goto LABEL_200;
            }
            int v144 = *(unsigned __int16 *)(v138 + 18);
          }
          if ((sub_1CBC2B070((uint64_t)&v842, v138, v144) & 1) == 0) {
            goto LABEL_159;
          }
LABEL_201:
          unsigned int v136 = v821;
          if (!v821)
          {
            unint64_t v98 = v777;
            if (v859 != __s1) {
              free(v859);
            }
            break;
          }
        }
      }
      if (v820 != v822) {
        free(v820);
      }
LABEL_206:
      if (v839 != v841) {
        free(v839);
      }
      if (v836 != &v838) {
        free(v836);
      }
      uint64_t v165 = v97 + 64;
      uint64_t v97 = v95;
      if (v165 != v95)
      {
        uint64_t v97 = v165;
        while ((*(void *)v97 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v97 += 64;
          if (v97 == v95)
          {
            uint64_t v97 = v95;
            break;
          }
        }
      }
      if ((void *)v97 == v98) {
        goto LABEL_263;
      }
    }
    uint64_t v178 = 0;
LABEL_251:
    uint64_t v105 = (unsigned __int8 **)sub_1CC5BF31C(v100 + 2504, (uint64_t)&__s1, (uint64_t *)&__s1, v178);
    uint64_t v179 = (unsigned __int8 *)__s1;
    v105[1] = 0;
    v105[2] = 0;
    *uint64_t v105 = v179;
    goto LABEL_126;
  }
LABEL_263:
  MEMORY[0x1D25D9CD0](0, 8);
  uint64_t v774 = v803;
  if (v803)
  {
    size_t v184 = 40 * v803;
    v771 = (char *)operator new(v184, (std::align_val_t)8uLL);
    uint64_t v185 = 0;
    long long v186 = xmmword_1CDB158C0;
    uint64_t v187 = v772;
    do
    {
      uint64_t v188 = (char *)v801;
      uint64_t v189 = *(void *)(v801 + v185);
      *(void *)&v771[v185] = v189;
      if ((v189 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        unsigned int v190 = &v771[v185 + 32];
        *(void *)&v771[v185 + 8] = v190;
        *(_OWORD *)&v771[v185 + 16] = v186;
        unint64_t v191 = *(void *)&v188[v185 + 16];
        if (v771 != v188 && v191 != 0)
        {
          if (v191 >= 3) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          memcpy(v190, *(const void **)&v188[v185 + 8], 2 * *(void *)&v188[v185 + 16]);
          *(void *)&v771[v185 + 16] = v191;
          long long v186 = xmmword_1CDB158C0;
        }
      }
      v185 += 40;
    }
    while (v184 != v185);
    BOOL v781 = v811;
    unsigned int v780 = v809;
    if (v803)
    {
      uint64_t v193 = 40 * v803;
      uint64_t v194 = (void *)(v801 + 32);
      do
      {
        if ((*(v194 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          uint64_t v195 = (void *)*(v194 - 3);
          if (v194 != v195) {
            free(v195);
          }
        }
        v194 += 5;
        v193 -= 40;
      }
      while (v193);
    }
  }
  else
  {
    v771 = 0;
    BOOL v781 = v811;
    unsigned int v780 = v809;
    uint64_t v187 = v772;
  }
  MEMORY[0x1D25D9CD0](v801, 8);
  MEMORY[0x1D25D9CD0](0, 8);
  MEMORY[0x1D25D9CD0](0, 8);
  char v830 = 0;
  uint64_t v829 = 0;
  unsigned int v196 = (void *)v764[41];
  if (v196 != v766)
  {
    v769 = (uint64_t *)(v187 + 456);
    int v770 = v774 - 1;
    while (1)
    {
      unint64_t v197 = v196 + 6;
      uint64_t v762 = v196;
      uint64_t v198 = v196[7];
      unsigned int v768 = v196 + 6;
LABEL_286:
      if ((void *)v198 != v197) {
        break;
      }
      unsigned int v196 = (void *)v762[1];
      if (v196 == v766) {
        goto LABEL_483;
      }
    }
    sub_1CBC2B808((uint64_t)&v820, v198);
    if (v820)
    {
      int v210 = __clz(__rbit64(~(-1 << ((unint64_t)v820 >> 58)) & ((unint64_t)v820 >> 1)));
      if ((~(-1 << ((unint64_t)v820 >> 58)) & ((unint64_t)v820 >> 1)) != 0) {
        LODWORD(v209) = v210;
      }
      else {
        LODWORD(v209) = -1;
      }
    }
    else
    {
      int v199 = *((_DWORD *)v820 + 16);
      if (v199)
      {
        uint64_t v200 = 0;
        int v201 = v199 - 1;
        uint64_t v202 = *(uint64_t **)v820;
        unint64_t v203 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v199;
        uint64_t v204 = v201 & 0xFFFFFFC0;
        while (1)
        {
          uint64_t v206 = *v202++;
          uint64_t v205 = v206;
          unint64_t v207 = v204 == v200 ? v203 : -1;
          unint64_t v208 = v207 & v205;
          if (v208) {
            break;
          }
          v200 += 64;
          LODWORD(v209) = -1;
          if (v204 + 64 == v200) {
            goto LABEL_300;
          }
        }
        uint64_t v209 = __clz(__rbit64(v208)) + v200;
      }
      else
      {
        LODWORD(v209) = -1;
      }
    }
LABEL_300:
    unsigned __int8 v776 = 0;
    unsigned __int8 v779 = 0;
    unsigned int v211 = 0;
    int v212 = 0;
    int v213 = v209;
    uint64_t v783 = v198;
    v786 = (unint64_t *)(v198 + 48);
    while (1)
    {
      switch(v213)
      {
        case -1:
          uint64_t v279 = 0;
          uint64_t v280 = &v825;
          do
          {
            if (((1 << v279) & v212) != 0)
            {
              int v281 = 2;
            }
            else
            {
              if (((1 << v279) & v211) == 0) {
                goto LABEL_456;
              }
              int v281 = 0;
            }
            unint64_t v282 = *((unsigned int *)v280 - 2);
            if (v282 >= *((unsigned int *)v280 - 1)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v283 = (uint64_t *)(*(v280 - 2) + 16 * v282);
            *uint64_t v283 = v198;
            v283[1] = v281 | (v211 >> v279) & 1;
            ++*((_DWORD *)v280 - 2);
LABEL_456:
            ++v279;
            v280 += 10;
          }
          while (v279 != 11);
          int v284 = v820;
          if ((v820 & 1) == 0 && v820)
          {
            if (*(void **)v820 != (char *)v820 + 16) {
              free(*(void **)v820);
            }
            MEMORY[0x1D25D9CE0](v284, 0x1080C40EF38A13ELL);
          }
          BOOL v285 = sub_1CBAD8504(v198, 128);
          BOOL v286 = sub_1CBAD8504(v198, 1024);
          BOOL v287 = v286;
          if (v779 | v776 || v285 || v286)
          {
            BOOL v288 = !v285;
            if (v779) {
              BOOL v288 = 0;
            }
            if (!v288) {
              sub_1CBA9CC0C(*(void *)(v767 + 248), v198, &v826, (void *)&v827 + 1);
            }
            if (v779) {
              BOOL v289 = 0;
            }
            else {
              BOOL v289 = v287;
            }
            if (v776 || v289) {
              sub_1CBA9CC0C(*(void *)(v767 + 248), v198, (void *)&v826 + 1, &v828);
            }
          }
          if ((*(unsigned char *)v198 & 4) == 0)
          {
            while ((*(_WORD *)(v198 + 44) & 8) != 0)
              uint64_t v198 = *(void *)(v198 + 8);
          }
          uint64_t v198 = *(void *)(v198 + 8);
          unint64_t v197 = v768;
          goto LABEL_286;
        case 0:
          if (**(_WORD **)(v198 + 16) != 6166) {
            int v212 = 1;
          }
          unsigned int v211 = 1;
          goto LABEL_384;
        case 1:
          unint64_t v220 = *v786;
          if (*v786 < 8) {
            goto LABEL_320;
          }
          if ((v220 & 7) != 0)
          {
            BOOL v221 = (int *)(v220 & 0xFFFFFFFFFFFFFFF8);
            if ((*v786 & 7) != 3 || v221 == 0)
            {
LABEL_320:
              uint64_t __s1 = &v860;
              v859 = (void *)0x1000000000;
LABEL_321:
              v212 |= 2u;
              v211 |= 2u;
              uint64_t v223 = &v860;
              goto LABEL_322;
            }
            int v230 = *v221;
            uint64_t __s1 = &v860;
            v859 = (void *)0x1000000000;
            if (v230 != 1) {
              goto LABEL_321;
            }
          }
          else
          {
            v220 &= 0xFFFFFFFFFFFFFFF8;
            unint64_t *v786 = v220;
            uint64_t __s1 = &v860;
            v859 = (void *)0x1000000000;
          }
          if ((v220 & 7) != 0)
          {
            uint64_t v231 = (unint64_t *)((v220 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            unint64_t *v786 = v220 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v231 = v786;
          }
          uint64_t v232 = *(unsigned int *)(v187 + 264);
          if (v232)
          {
            long long v233 = *(void **)(v187 + 256);
            long long v234 = &v233[2 * v232];
            uint64_t v235 = (unint64_t *)((*(void *)*v231 & ((uint64_t)(*(void *)*v231 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8)
                                      + 16);
            while (1)
            {
              *(void *)&long long v842 = 1;
              if ((*v233 & 1) == 0) {
                operator new();
              }
              *(void *)&long long v842 = *v233;
              sub_1CBA7B2F4((unint64_t *)&v842, v235);
              uint64_t v236 = (void **)v842;
              if (v842)
              {
                if ((((unint64_t)v842 >> 1) & ~(-1 << ((unint64_t)v842 >> 58))) != 0) {
                  goto LABEL_357;
                }
              }
              else
              {
                uint64_t v237 = *(unsigned int *)(v842 + 8);
                if (v237)
                {
                  uint64_t v238 = *(void **)v842;
                  uint64_t v239 = 8 * v237;
                  while (!*v238)
                  {
                    ++v238;
                    v239 -= 8;
                    if (!v239) {
                      goto LABEL_359;
                    }
                  }
LABEL_357:
                  if (v859 >= (unint64_t)HIDWORD(v859)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *((void *)__s1 + v859) = v233;
                  LODWORD(v859) = v859 + 1;
                  uint64_t v236 = (void **)v842;
                }
              }
LABEL_359:
              if ((v236 & 1) == 0 && v236)
              {
                if (*v236 != v236 + 2) {
                  free(*v236);
                }
                MEMORY[0x1D25D9CE0](v236, 0x1080C40EF38A13ELL);
              }
              v233 += 2;
              if (v233 == v234)
              {
                uint64_t v223 = (uint64_t *)__s1;
                uint64_t v198 = v783;
                if (v859)
                {
                  uint64_t v240 = 0;
                  uint64_t v187 = v772;
                  do
                  {
                    uint64_t v241 = *(void *)((char *)__s1 + v240);
                    v212 |= 1 << *(_WORD *)(v241 + 10);
                    v211 |= 1 << *(_WORD *)(v241 + 8);
                    v240 += 8;
                  }
                  while (8 * v859 != v240);
                }
                else
                {
                  uint64_t v187 = v772;
                }
                goto LABEL_322;
              }
            }
          }
          uint64_t v223 = &v860;
LABEL_322:
          WORD2(v829) |= (unsigned __int16)v212 | (unsigned __int16)v211;
          BYTE6(v829) |= (v212 | v211) == 0;
          if (v223 != &v860) {
            free(v223);
          }
          goto LABEL_384;
        case 2:
        case 10:
          unint64_t v214 = *v786;
          if (*v786 < 8) {
            goto LABEL_309;
          }
          if ((v214 & 7) != 0)
          {
            unsigned int v215 = (_DWORD *)(v214 & 0xFFFFFFFFFFFFFFF8);
            BOOL v216 = (*v786 & 7) != 3 || v215 == 0;
            if (v216 || *v215 != 1)
            {
LABEL_309:
              char v217 = 0;
LABEL_310:
              int v218 = sub_1CBC2BAB0(v198);
              v212 |= v780;
              v211 |= v781;
              BOOL v219 = 1;
              if (v213 == 2 && (v217 & 1) == 0)
              {
                v212 |= 4u;
                v211 |= 4u;
                goto LABEL_379;
              }
              goto LABEL_377;
            }
          }
          else
          {
            v214 &= 0xFFFFFFFFFFFFFFF8;
            unint64_t *v786 = v214;
          }
          if ((v214 & 7) != 0)
          {
            uint64_t v224 = *(uint64_t **)((v214 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            uint64_t v224 = (uint64_t *)(v214 & 0xFFFFFFFFFFFFFFF8);
            unint64_t *v786 = (unint64_t)v224;
          }
          uint64_t v225 = *v224;
          unint64_t v226 = v225 & 0xFFFFFFFFFFFFFFF8;
          if (v213 == 2)
          {
            if ((v225 & 4) != 0)
            {
              char v217 = 1;
              goto LABEL_310;
            }
          }
          else
          {
            char v217 = 1;
            if ((v225 & 4) == 0 || !v226) {
              goto LABEL_310;
            }
            unint64_t v226 = *(void *)(v226 + 16);
          }
          int v218 = sub_1CBC2BAB0(v198);
          BOOL v219 = v226 == 0;
          if (!v774 || !v226) {
            goto LABEL_341;
          }
          unsigned int v227 = ((v226 >> 4) ^ (v226 >> 9)) & v770;
          unint64_t v228 = &v771[40 * v227];
          uint64_t v229 = *(void *)v228;
          if (v226 != *(void *)v228)
          {
            int v277 = 1;
            while (v229 != -4096)
            {
              unsigned int v278 = v227 + v277++;
              unsigned int v227 = v278 & v770;
              unint64_t v228 = &v771[40 * v227];
              uint64_t v229 = *(void *)v228;
              if (v226 == *(void *)v228) {
                goto LABEL_339;
              }
            }
LABEL_340:
            BOOL v219 = 0;
LABEL_341:
            v212 |= v780;
            v211 |= v781;
            goto LABEL_377;
          }
LABEL_339:
          if (v227 == v774) {
            goto LABEL_340;
          }
          uint64_t v242 = *((void *)v228 + 2);
          if (v242)
          {
            uint64_t v243 = 2 * v242;
            long long v244 = (unsigned char *)(*((void *)v228 + 1) + 1);
            do
            {
              v212 |= 1 << *v244;
              v211 |= 1 << *(v244 - 1);
              v244 += 2;
              v243 -= 2;
            }
            while (v243);
          }
          BOOL v219 = 0;
LABEL_377:
          if (v213 != 10)
          {
            if (v213 == 2)
            {
LABEL_379:
              LOWORD(v829) = v829 | v211 | v212;
              if (v211 | v212) {
                unsigned __int8 v245 = v218;
              }
              else {
                unsigned __int8 v245 = 0;
              }
              unsigned __int8 v779 = v245;
              HIBYTE(v829) |= v245;
            }
            uint64_t v198 = v783;
            goto LABEL_384;
          }
          int v246 = *(_DWORD *)(v187 + 464);
          if (v246)
          {
            int v247 = **(unsigned __int16 **)(v783 + 16);
            if ((sub_1CBE52E8C(v247) & 0xFF00000000) != 0)
            {
              unsigned int v248 = sub_1CBDA6464(v247, 0x5Au);
              uint64_t v249 = *(void *)(v783 + 32);
              if (*(unsigned char *)(v249 + 32 * v248) != 1)
              {
                uint64_t v252 = *(unsigned int *)(v187 + 472);
                if (v252)
                {
                  uint64_t v253 = 8 * v252;
                  uint64_t v254 = *(unsigned int **)(v187 + 456);
                  while (*v254 >= 0xFFFFFFFE)
                  {
                    v254 += 2;
                    v253 -= 8;
                    if (!v253) {
                      goto LABEL_404;
                    }
                  }
                }
                else
                {
                  uint64_t v254 = *(unsigned int **)(v187 + 456);
                }
                uint64_t v255 = *(void *)(v187 + 456) + 8 * v252;
                if (v254 == (unsigned int *)v255)
                {
LABEL_404:
                  int v251 = 0;
                  int v246 = 0;
                }
                else
                {
                  int v246 = 0;
                  int v251 = 0;
LABEL_400:
                  v251 |= (1 << *((unsigned char *)v254 + 4));
                  v246 |= (1 << *((unsigned char *)v254 + 5));
                  BOOL v256 = v254 + 2;
                  while (v256 != (unsigned int *)v255)
                  {
                    unsigned int v257 = *v256;
                    v256 += 2;
                    if (v257 <= 0xFFFFFFFD)
                    {
                      uint64_t v254 = v256 - 2;
                      goto LABEL_400;
                    }
                  }
                }
                goto LABEL_405;
              }
              LODWORD(__s1) = *(void *)(v249 + 32 * v248 + 16);
              int v250 = sub_1CBA9CB98(v769, &__s1);
              if ((int *)(*(void *)(v187 + 456) + 8 * *(unsigned int *)(v187 + 472)) != v250)
              {
                int v246 = (1 << *((unsigned char *)v250 + 5));
                int v251 = (1 << *((unsigned char *)v250 + 4));
LABEL_405:
                v211 |= v251;
                goto LABEL_406;
              }
            }
            int v246 = 0;
          }
LABEL_406:
          v212 |= v246;
          if (*(_DWORD *)(v187 + 464)) {
            BOOL v258 = 0;
          }
          else {
            BOOL v258 = v219;
          }
          if (v258)
          {
            uint64_t v259 = v833;
            if (v833
              && (int v260 = **(unsigned __int16 **)(v783 + 16), v261 = sub_1CBE52E8C(v260), (v261 & 0xFF00000000) != 0)
              && ((v261 - 164) < 4 || (v261 - 78) <= 2)
              && *(unsigned char *)(*(void *)(v783 + 32) + 32 * sub_1CBDA6464(v260, 0x5Au)) != 1)
            {
              int v273 = 0;
              int v262 = 0;
              uint64_t v274 = (unsigned __int8 *)v832;
              uint64_t v275 = 6 * v259;
              do
              {
                unsigned int v276 = *v274;
                v274 += 6;
                v273 |= 1 << (v276 & 0xF);
                v262 |= 1 << (v276 >> 4);
                v275 -= 6;
              }
              while (v275);
              int v262 = v262;
              v211 |= v273;
            }
            else
            {
              int v262 = 0;
            }
            v212 |= v262;
          }
          WORD1(v829) |= (unsigned __int16)v212 | (unsigned __int16)v211;
          if (v212 | v211) {
            int v263 = v218;
          }
          else {
            int v263 = 0;
          }
          v830 |= v263;
          unsigned __int8 v776 = v263;
          if (v263 == 1)
          {
            uint64_t v198 = v783;
            int v264 = **(unsigned __int16 **)(v783 + 16);
            uint64_t v265 = sub_1CBE52E8C(v264);
            BOOL v267 = (v265 & 0xFF00000000) != 0 && (v265 - 79) < 2;
            if ((v264 - 4741) >= 2 && !v267)
            {
              BOOL v272 = 0;
            }
            else
            {
              unsigned int v269 = *(_DWORD *)(*(void *)(v783 + 32) + 32 * sub_1CBDA6464(v264, 0x2Fu) + 16);
              if (v267) {
                char v270 = 28;
              }
              else {
                char v270 = 14;
              }
              if (v267) {
                int v271 = 3;
              }
              else {
                int v271 = 7;
              }
              BOOL v272 = ((v269 >> v270) & v271) == 0;
            }
          }
          else
          {
            BOOL v272 = 0;
            uint64_t v198 = v783;
          }
          v831 |= v272;
LABEL_384:
          int v213 = sub_1CB9F9DF0((unint64_t *)&v820, v213);
          break;
        default:
          goto LABEL_384;
      }
    }
  }
LABEL_483:
  if ((void)v826)
  {
    uint64_t v290 = v764 + 40;
    long long v291 = (void *)&unk_1CD91C000;
    uint64_t v292 = v774;
    if (*((void *)&v826 + 1)) {
      llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
    }
    *(void *)&long long v827 = v826;
    uint64_t v293 = *((void *)&v827 + 1);
    goto LABEL_489;
  }
  uint64_t v290 = v764 + 40;
  long long v291 = (void *)&unk_1CD91C000;
  uint64_t v292 = v774;
  *(void *)&long long v827 = *((void *)&v826 + 1);
  if (*((void *)&v826 + 1))
  {
    uint64_t v293 = v828;
LABEL_489:
    *((void *)&v828 + 1) = v293;
  }
  if (v292)
  {
    uint64_t v294 = 40 * v292;
    long long v295 = v771 + 32;
    do
    {
      if ((*((void *)v295 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        long long v296 = (char *)*((void *)v295 - 3);
        if (v295 != v296) {
          free(v296);
        }
      }
      v295 += 40;
      v294 -= 40;
    }
    while (v294);
  }
  MEMORY[0x1D25D9CD0](v771, 8);
  sub_1CBA6598C((uint64_t)&v788);
  MEMORY[0x1D25D9CD0](v788, 8);
  if (v812 != &v813.u64[1]) {
    free(v812);
  }
  uint64_t v297 = (*(uint64_t (**)(uint64_t, void))(*(void *)v759 + 24))(v759, *v764);
  uint64_t v778 = (unsigned int (***)(void *, uint64_t, void, uint64_t, uint64_t))v297;
  if ((**(uint64_t (***)(void))v297)()
    || (long long v299 = *(llvm::Module **)(*v764 + 40), ((*(unsigned __int16 *)(*v764 + 18) >> 4) & 0x3FFu) - 103 >= 2)
    && (uint64_t __s1 = "agx.sample_rate", LOWORD(v863[0]) = 259, !llvm::Module::getNamedMetadata(v299, (const char **)&__s1)))
  {
    BOOL v298 = 0;
  }
  else
  {
    sub_1CD10B764(v299, 0x100u, (uint64_t)&__s1);
    int v300 = v864;
    if (v864 && *(_DWORD *)(*(void *)(*(void *)(v767 + 248) + 72) + 32) == 1)
    {
      uint64_t v301 = (v864 + 63) >> 6;
      uint64_t v820 = v822;
      HIDWORD(v821) = 6;
      if ((v864 + 63) >= 0x1C0)
      {
        LODWORD(v821) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if ((v864 + 63) >= 0x40) {
        bzero(v822, 8 * v301);
      }
      LODWORD(v821) = v301;
      int v823 = v300;
      if ((void *)v764[41] != v290) {
        llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::dominates();
      }
      uint64_t v309 = v859;
      if (v859 >= v301) {
        uint64_t v310 = v301;
      }
      else {
        uint64_t v310 = v859;
      }
      if (v310)
      {
        uint64_t v311 = (uint64_t *)__s1;
        int v312 = v822;
        uint64_t v313 = v310;
        do
        {
          uint64_t v314 = *v311++;
          *v312++ &= v314;
          --v313;
        }
        while (v313);
      }
      if (v301 > v309)
      {
        do
        {
          v822[v310] = 0;
          LODWORD(v310) = v310 + 1;
        }
        while (v301 != v310);
      }
      BOOL v298 = v864 == v823 && memcmp(__s1, v822, 8 * v309) == 0;
      uint64_t v297 = (uint64_t)v778;
    }
    else
    {
      BOOL v298 = 0;
    }
    if (__s1 != &v860) {
      free(__s1);
    }
  }
  (*(void (**)(uint64_t, uint64_t, BOOL, uint64_t, void, uint64_t, uint64_t))(*(void *)v297 + 8))(v297, 30, v298, 1, 0, 1, 2);
  uint64_t v820 = (void *)1;
  for (uint64_t j = 8; j != 1672; j += 104)
    *(void **)((char *)&v820 + j) = (void *)-4096;
  v824[0] = 1;
  for (uint64_t k = 1680; k != 3344; k += 104)
    *(void **)((char *)&v820 + k) = (void *)-4096;
  sub_1CBA9CCC0((uint64_t)&v820, (uint64_t)v764, v767);
  int v317 = dword_1EBCC2094;
  uint64_t v801 = 0;
  LODWORD(v802) = 0;
  uint64_t v318 = (*(uint64_t (**)(void, void))(*(void *)v764[1] + 16))(v764[1], *v764);
  if (!*(unsigned char *)(v318 + 289)) {
    goto LABEL_968;
  }
  uint64_t v319 = (unsigned char *)v318;
  uint64_t v788 = 0;
  uint64_t v788 = (*(uint64_t (**)(void))(*(void *)v764[2] + 104))(v764[2]);
  BOOL v320 = v290;
  do
  {
    BOOL v320 = (void *)*v320;
    if (v320 == v290) {
      goto LABEL_944;
    }
  }
  while (((v320[12] - v320[11]) & 0x7FFFFFFF8) != 0);
  int v773 = v317;
  uint64_t v775 = v319;
  unsigned int v321 = (llvm::MachineBasicBlock *)v764[41];
  BOOL v811 = (*(_WORD *)(*v764 + 18) & 0x3FF0) == 1728;
  FirstInstrTerminator = (void *)llvm::MachineBasicBlock::getFirstInstrTerminator(v321);
  if (v758) {
    FirstInstrTerminator = sub_1CBC2BB3C(v321, 0);
  }
  uint64_t v323 = (uint64_t)FirstInstrTerminator;
  BOOL v784 = v298;
  if ((void *)((char *)v321 + 48) == FirstInstrTerminator)
  {
    unsigned int v810 = 0;
    unsigned int v325 = v764;
    unsigned int v326 = HIDWORD(v758);
  }
  else
  {
    unint64_t v324 = (unsigned __int8 *)FirstInstrTerminator[7];
    unsigned int v810 = v324;
    unsigned int v325 = v764;
    unsigned int v326 = HIDWORD(v758);
    if (v324)
    {
      llvm::MetadataTracking::track((uint64_t)&v810, v324, 2);
      unsigned int v326 = HIDWORD(v758);
      unsigned int v325 = v764;
    }
  }
  unsigned int v327 = (unsigned __int8 *)v325[2];
  unsigned int v809 = 6222;
  BOOL v328 = (v327[298] | v327[299] | v327[300]) == 0;
  int v808 = 2 * v328;
  if (v327[363]) {
    BOOL v329 = BYTE6(v829) == 0;
  }
  else {
    BOOL v329 = 0;
  }
  int v330 = !v329;
  if (v329) {
    unsigned int v331 = 0;
  }
  else {
    unsigned int v331 = 2 * v328;
  }
  unsigned int v791 = &v788;
  int v792 = &v809;
  uint64_t v793 = &v801;
  if (v326) {
    sub_1CBC2BCEC((uint64_t)&v791, (uint64_t)v321, v323, v326, v331 | 1);
  }
  if (v758) {
    sub_1CBC2BCEC((uint64_t)&v791, (uint64_t)v321, v323, v758, v331);
  }
  sub_1CD112980(*(llvm::Module **)(*v764 + 40), (uint64_t)__p);
  if (!v758 && BYTE6(v829))
  {
    int v332 = ((*(unsigned __int16 *)(*v764 + 18) >> 4) & 0x3FFu) - 103 < 2 ? v330 : 0;
    if ((v332 & v328) == 1)
    {
      uint64_t v333 = sub_1CBC2BB3C(v321, 0x100000001);
      sub_1CBC2BCEC((uint64_t)&v791, (uint64_t)v321, (uint64_t)v333, 0, v331);
    }
  }
  uint64_t v334 = 0;
  v812 = &v810;
  v813.i64[0] = (uint64_t)&v788;
  v813.i64[1] = (uint64_t)v327;
  v814.i64[0] = (uint64_t)&v808;
  v814.i64[1] = (uint64_t)&v811;
  v815.i64[0] = (uint64_t)&v801;
  BOOL v335 = v784;
  do
  {
    uint64_t v336 = (uint64_t **)&v824[10 * v334 + 209];
    int v337 = 1 << v334;
    uint64_t v338 = *((unsigned int *)v336 + 2);
    if (!v338)
    {
      LODWORD(v801) = v801 | v337;
      goto LABEL_881;
    }
    uint64_t __s1 = v863;
    v859 = v863;
    uint64_t v860 = 16;
    int v861 = 0;
    *(void *)&long long v842 = &v844;
    *((void *)&v842 + 1) = &v844;
    *(void *)&long long v843 = 16;
    DWORD2(v843) = 0;
    if (((unsigned __int16)v337 & WORD1(v829)) != 0 && ((unsigned __int16)v337 & (unsigned __int16)v829) != 0)
    {
      long long v339 = (void *)v827;
      uint64_t v340 = *((void *)&v828 + 1);
      if (*((void *)&v828 + 1)) {
        goto LABEL_585;
      }
    }
    else if (((unsigned __int16)v337 & WORD1(v829)) != 0)
    {
      long long v339 = (void *)*((void *)&v826 + 1);
      uint64_t v340 = v828;
      if ((void)v828) {
        goto LABEL_585;
      }
    }
    else
    {
      if (((unsigned __int16)v337 & (unsigned __int16)v829) != 0)
      {
        long long v339 = (void *)v826;
        uint64_t v340 = *((void *)&v827 + 1);
        if (!*((void *)&v827 + 1)) {
          goto LABEL_586;
        }
LABEL_585:
        HIDWORD(v860) = 1;
        v863[0] = v340;
        goto LABEL_586;
      }
      long long v339 = 0;
    }
LABEL_586:
    uint64_t v341 = 0;
    int v787 = (unsigned __int16)(v337 & WORD2(v829));
    uint64_t v342 = *v336;
    uint64_t v343 = (uint64_t)&(*v336)[2 * v338];
    if (!v787) {
      BOOL v335 = 0;
    }
    do
    {
      if (sub_1CBC2BAB0(*v342))
      {
        if (v335)
        {
LABEL_656:
          uint64_t v377 = *(void **)(*v342 + 24);
          if (v339)
          {
            if (v377) {
              llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
            }
            uint64_t v377 = v339;
          }
          long long v339 = sub_1CBC2C1E0(v377);
          uint64_t v378 = *v342;
          unint64_t v379 = (char *)v859;
          uint64_t v380 = HIDWORD(v860);
          if (v859 != __s1)
          {
            unsigned int v384 = v860;
            goto LABEL_671;
          }
          if (!HIDWORD(v860))
          {
LABEL_668:
            unsigned int v384 = v860;
            if (HIDWORD(v860) < v860)
            {
              ++HIDWORD(v860);
              *((void *)v859 + v380) = v378;
              goto LABEL_737;
            }
LABEL_671:
            if (3 * v384 <= 4 * (HIDWORD(v860) - v861))
            {
              if (v384 >= 0x40) {
                v384 *= 2;
              }
              else {
                unsigned int v384 = 128;
              }
            }
            else if (v384 - HIDWORD(v860) >= v384 >> 3)
            {
              goto LABEL_673;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__s1, v384);
            unsigned int v384 = v860;
            unint64_t v379 = (char *)v859;
LABEL_673:
            unsigned int v385 = v384 - 1;
            unsigned int v386 = (v384 - 1) & ((v378 >> 4) ^ (v378 >> 9));
            unsigned __int16 v387 = &v379[8 * v386];
            uint64_t v388 = *(void *)v387;
            if (*(void *)v387 == -1)
            {
              unint64_t v389 = 0;
LABEL_685:
              if (v389) {
                uint64_t v393 = v389;
              }
              else {
                uint64_t v393 = v387;
              }
              if (*(void *)v393 != v378)
              {
                if (*(void *)v393 == -2) {
                  --v861;
                }
                else {
                  ++HIDWORD(v860);
                }
                *(void *)uint64_t v393 = v378;
              }
            }
            else
            {
              unint64_t v389 = 0;
              int v390 = 1;
              while (v388 != v378)
              {
                if (v389) {
                  BOOL v391 = 0;
                }
                else {
                  BOOL v391 = v388 == -2;
                }
                if (v391) {
                  unint64_t v389 = v387;
                }
                unsigned int v392 = v386 + v390++;
                unsigned int v386 = v392 & v385;
                unsigned __int16 v387 = &v379[8 * (v392 & v385)];
                uint64_t v388 = *(void *)v387;
                if (*(void *)v387 == -1) {
                  goto LABEL_685;
                }
              }
            }
            goto LABEL_737;
          }
          uint64_t v381 = 0;
          uint64_t v382 = 8 * HIDWORD(v860);
          int v383 = v859;
          while (*v383 != v378)
          {
            if (*v383 == -2) {
              uint64_t v381 = v383;
            }
            ++v383;
            v382 -= 8;
            if (!v382)
            {
              if (!v381) {
                goto LABEL_668;
              }
              void *v381 = v378;
              --v861;
              goto LABEL_737;
            }
          }
          goto LABEL_737;
        }
        uint64_t v344 = *v342;
        if (v341)
        {
          if (*(void *)(*v342 + 24))
          {
            llvm::MachineDominatorTree::applySplitCriticalEdges(v763);
            llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator();
          }
        }
        else
        {
          uint64_t v341 = *(void *)(*v342 + 24);
        }
        uint64_t v347 = *((void *)&v842 + 1);
        uint64_t v348 = DWORD1(v843);
        if (*((void *)&v842 + 1) == (void)v842)
        {
          if (DWORD1(v843))
          {
            int v349 = 0;
            uint64_t v350 = 8 * DWORD1(v843);
            unint64_t v351 = (void *)*((void *)&v842 + 1);
            while (*v351 != v344)
            {
              if (*v351 == -2) {
                int v349 = v351;
              }
              ++v351;
              v350 -= 8;
              if (!v350)
              {
                if (!v349) {
                  goto LABEL_606;
                }
                *int v349 = v344;
                --DWORD2(v843);
                goto LABEL_656;
              }
            }
            goto LABEL_656;
          }
LABEL_606:
          unsigned int v352 = v843;
          if (DWORD1(v843) < v843)
          {
            ++DWORD1(v843);
            *(void *)(*((void *)&v842 + 1) + 8 * v348) = v344;
            goto LABEL_656;
          }
        }
        else
        {
          unsigned int v352 = v843;
        }
        if (3 * v352 <= 4 * (DWORD1(v843) - DWORD2(v843)))
        {
          if (v352 >= 0x40) {
            v352 *= 2;
          }
          else {
            unsigned int v352 = 128;
          }
        }
        else if (v352 - DWORD1(v843) >= v352 >> 3)
        {
          goto LABEL_611;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v842, v352);
        unsigned int v352 = v843;
        uint64_t v347 = *((void *)&v842 + 1);
LABEL_611:
        unsigned int v353 = v352 - 1;
        unsigned int v354 = (v352 - 1) & ((v344 >> 4) ^ (v344 >> 9));
        uint64_t v355 = (void *)(v347 + 8 * v354);
        uint64_t v356 = *v355;
        if (*v355 == -1)
        {
          double v357 = 0;
LABEL_649:
          if (v357) {
            unint64_t v376 = v357;
          }
          else {
            unint64_t v376 = v355;
          }
          if (*v376 != v344)
          {
            if (*v376 == -2) {
              --DWORD2(v843);
            }
            else {
              ++DWORD1(v843);
            }
            *unint64_t v376 = v344;
          }
        }
        else
        {
          double v357 = 0;
          int v358 = 1;
          while (v356 != v344)
          {
            if (v357) {
              BOOL v359 = 0;
            }
            else {
              BOOL v359 = v356 == -2;
            }
            if (v359) {
              double v357 = v355;
            }
            unsigned int v360 = v354 + v358++;
            unsigned int v354 = v360 & v353;
            uint64_t v355 = (void *)(v347 + 8 * (v360 & v353));
            uint64_t v356 = *v355;
            if (*v355 == -1) {
              goto LABEL_649;
            }
          }
        }
        goto LABEL_656;
      }
      char v345 = *((unsigned char *)v342 + 8);
      if ((v345 & 1) == 0) {
        goto LABEL_700;
      }
      unint64_t v346 = *(void **)(*v342 + 24);
      if (v339)
      {
        if (v346) {
          llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator();
        }
        unint64_t v346 = v339;
      }
      long long v339 = sub_1CBC2C1E0(v346);
      uint64_t v361 = *v342;
      uint64_t v362 = (char *)v859;
      uint64_t v363 = HIDWORD(v860);
      if (v859 != __s1)
      {
        unsigned int v367 = v860;
        goto LABEL_635;
      }
      if (!HIDWORD(v860))
      {
LABEL_631:
        unsigned int v367 = v860;
        if (HIDWORD(v860) < v860)
        {
          ++HIDWORD(v860);
          *((void *)v859 + v363) = v361;
          if ((v345 & 2) == 0) {
            goto LABEL_737;
          }
          goto LABEL_701;
        }
LABEL_635:
        if (3 * v367 <= 4 * (HIDWORD(v860) - v861))
        {
          if (v367 >= 0x40) {
            v367 *= 2;
          }
          else {
            unsigned int v367 = 128;
          }
        }
        else if (v367 - HIDWORD(v860) >= v367 >> 3)
        {
          goto LABEL_637;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&__s1, v367);
        unsigned int v367 = v860;
        uint64_t v362 = (char *)v859;
LABEL_637:
        unsigned int v368 = v367 - 1;
        unsigned int v369 = (v367 - 1) & ((v361 >> 4) ^ (v361 >> 9));
        unint64_t v370 = &v362[8 * v369];
        uint64_t v371 = *(void *)v370;
        if (*(void *)v370 == -1)
        {
          uint64_t v372 = 0;
LABEL_693:
          if (v372) {
            unint64_t v394 = v372;
          }
          else {
            unint64_t v394 = (uint64_t *)v370;
          }
          if (*v394 != v361)
          {
            if (*v394 == -2) {
              --v861;
            }
            else {
              ++HIDWORD(v860);
            }
            *unint64_t v394 = v361;
          }
        }
        else
        {
          uint64_t v372 = 0;
          int v373 = 1;
          while (v371 != v361)
          {
            if (v372) {
              BOOL v374 = 0;
            }
            else {
              BOOL v374 = v371 == -2;
            }
            if (v374) {
              uint64_t v372 = (uint64_t *)v370;
            }
            unsigned int v375 = v369 + v373++;
            unsigned int v369 = v375 & v368;
            unint64_t v370 = &v362[8 * (v375 & v368)];
            uint64_t v371 = *(void *)v370;
            if (*(void *)v370 == -1) {
              goto LABEL_693;
            }
          }
        }
        goto LABEL_700;
      }
      uint64_t v364 = 0;
      uint64_t v365 = 8 * HIDWORD(v860);
      uint64_t v366 = (uint64_t *)v859;
      while (*v366 != v361)
      {
        if (*v366 == -2) {
          uint64_t v364 = v366;
        }
        ++v366;
        v365 -= 8;
        if (!v365)
        {
          if (!v364) {
            goto LABEL_631;
          }
          *uint64_t v364 = v361;
          --v861;
          if ((v345 & 2) != 0) {
            goto LABEL_701;
          }
          goto LABEL_737;
        }
      }
LABEL_700:
      if ((v345 & 2) == 0) {
        goto LABEL_737;
      }
LABEL_701:
      uint64_t v395 = *v342;
      if (v341)
      {
        if (*(void *)(*v342 + 24))
        {
          llvm::MachineDominatorTree::applySplitCriticalEdges(v763);
          llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::findNearestCommonDominator();
        }
      }
      else
      {
        uint64_t v341 = *(void *)(*v342 + 24);
      }
      uint64_t v396 = *((void *)&v842 + 1);
      uint64_t v397 = DWORD1(v843);
      if (*((void *)&v842 + 1) != (void)v842)
      {
        unsigned int v401 = v843;
        goto LABEL_716;
      }
      if (!DWORD1(v843))
      {
LABEL_713:
        unsigned int v401 = v843;
        if (DWORD1(v843) < v843)
        {
          ++DWORD1(v843);
          *(void *)(*((void *)&v842 + 1) + 8 * v397) = v395;
          goto LABEL_737;
        }
LABEL_716:
        if (3 * v401 <= 4 * (DWORD1(v843) - DWORD2(v843)))
        {
          if (v401 >= 0x40) {
            v401 *= 2;
          }
          else {
            unsigned int v401 = 128;
          }
        }
        else if (v401 - DWORD1(v843) >= v401 >> 3)
        {
          goto LABEL_718;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v842, v401);
        unsigned int v401 = v843;
        uint64_t v396 = *((void *)&v842 + 1);
LABEL_718:
        unsigned int v402 = v401 - 1;
        unsigned int v403 = (v401 - 1) & ((v395 >> 4) ^ (v395 >> 9));
        float64x2_t v404 = (uint64_t *)(v396 + 8 * v403);
        uint64_t v405 = *v404;
        if (*v404 == -1)
        {
          double v406 = 0;
LABEL_730:
          if (v406) {
            double v410 = v406;
          }
          else {
            double v410 = v404;
          }
          if (*v410 != v395)
          {
            if (*v410 == -2) {
              --DWORD2(v843);
            }
            else {
              ++DWORD1(v843);
            }
            *double v410 = v395;
          }
        }
        else
        {
          double v406 = 0;
          int v407 = 1;
          while (v405 != v395)
          {
            if (v406) {
              BOOL v408 = 0;
            }
            else {
              BOOL v408 = v405 == -2;
            }
            if (v408) {
              double v406 = v404;
            }
            unsigned int v409 = v403 + v407++;
            unsigned int v403 = v409 & v402;
            float64x2_t v404 = (uint64_t *)(v396 + 8 * (v409 & v402));
            uint64_t v405 = *v404;
            if (*v404 == -1) {
              goto LABEL_730;
            }
          }
        }
        goto LABEL_737;
      }
      double v398 = 0;
      uint64_t v399 = 8 * DWORD1(v843);
      char v400 = (uint64_t *)*((void *)&v842 + 1);
      while (*v400 != v395)
      {
        if (*v400 == -2) {
          double v398 = v400;
        }
        ++v400;
        v399 -= 8;
        if (!v399)
        {
          if (!v398) {
            goto LABEL_713;
          }
          *double v398 = v395;
          --DWORD2(v843);
          break;
        }
      }
LABEL_737:
      v342 += 2;
    }
    while (v342 != (uint64_t *)v343);
    BOOL v335 = v784;
    if (v341)
    {
      int v411 = *(_DWORD *)(v765 + 264);
      if (v411)
      {
        uint64_t v412 = *(void *)(v765 + 248);
        unsigned int v413 = v411 - 1;
        uint64_t v414 = (v411 - 1) & ((v341 >> 4) ^ (v341 >> 9));
        uint64_t v415 = *(void *)(v412 + 16 * v414);
        if (v341 == v415)
        {
LABEL_770:
          if (*(void *)(v412 + 16 * v414 + 8)) {
            llvm::LoopBase<llvm::MachineBasicBlock,llvm::MachineLoop>::getLoopPreheader();
          }
        }
        else
        {
          int v416 = 1;
          while (v415 != -4096)
          {
            int v417 = v414 + v416++;
            uint64_t v414 = v417 & v413;
            uint64_t v415 = *(void *)(v412 + 16 * v414);
            if (v341 == v415) {
              goto LABEL_770;
            }
          }
        }
      }
      uint64_t v418 = (void *)(v341 + 48);
      unint64_t v419 = *(void **)(v341 + 56);
      if (v419 != (void *)(v341 + 48))
      {
        int v420 = v843 - 1;
        if (*((void *)&v842 + 1) == (void)v842) {
          unsigned int v421 = DWORD1(v843);
        }
        else {
          unsigned int v421 = v843;
        }
        uint64_t v422 = *((void *)&v842 + 1) + 8 * v421;
        uint64_t v423 = *((void *)&v842 + 1);
        while (1)
        {
          if (v423 == (void)v842)
          {
            if (DWORD1(v843))
            {
              uint64_t v424 = 0;
              while (*(void **)(v842 + v424) != v419)
              {
                v424 += 8;
                if (8 * DWORD1(v843) == v424)
                {
                  unsigned int v425 = DWORD1(v843);
                  goto LABEL_797;
                }
              }
              uint64_t v434 = (void *)(v842 + v424);
              unsigned int v425 = DWORD1(v843);
              uint64_t v423 = v842;
            }
            else
            {
              unsigned int v425 = 0;
LABEL_797:
              uint64_t v423 = v842;
              uint64_t v434 = (void *)(v842 + 8 * DWORD1(v843));
            }
          }
          else
          {
            unsigned int v426 = v420 & ((v419 >> 4) ^ (v419 >> 9));
            uint64_t v427 = (void *)(*((void *)&v842 + 1) + 8 * v426);
            int v428 = (void *)*v427;
            if (*v427 == -1)
            {
              uint64_t v429 = 0;
LABEL_799:
              if (v429) {
                uint64_t v427 = v429;
              }
              unint64_t v433 = (void *)*v427;
            }
            else
            {
              uint64_t v429 = 0;
              int v430 = 1;
              while (v428 != v419)
              {
                if (v429) {
                  BOOL v431 = 0;
                }
                else {
                  BOOL v431 = v428 == (void *)-2;
                }
                if (v431) {
                  uint64_t v429 = v427;
                }
                unsigned int v432 = v426 + v430++;
                unsigned int v426 = v432 & v420;
                uint64_t v427 = (void *)(*((void *)&v842 + 1) + 8 * (v432 & v420));
                int v428 = (void *)*v427;
                if (*v427 == -1) {
                  goto LABEL_799;
                }
              }
              unint64_t v433 = v419;
            }
            uint64_t v434 = v433 == v419 ? v427 : (void *)v422;
            unsigned int v425 = DWORD1(v843);
            uint64_t v423 = *((void *)&v842 + 1);
          }
          if (v423 != (void)v842) {
            unsigned int v425 = v843;
          }
          if (v434 != (void *)(v423 + 8 * v425)) {
            break;
          }
          unint64_t v419 = (void *)v419[1];
          if (v419 == v418) {
            goto LABEL_812;
          }
        }
        uint64_t v418 = v419;
      }
LABEL_812:
      sub_1CBC2C244((uint64_t)&v812, v341, v418, 1 << v334, v809, v787 != 0);
    }
    if (v339)
    {
      if (v787) {
        BOOL v435 = v784;
      }
      else {
        BOOL v435 = 0;
      }
      if (!v435)
      {
        int v436 = v339 + 6;
        int v437 = v860 - 1;
        uint64_t v438 = v339 + 6;
        while (1)
        {
          uint64_t v438 = (void *)(*v438 & 0xFFFFFFFFFFFFFFF8);
          if (v436 == v438) {
            break;
          }
          if (v859 == __s1)
          {
            if (HIDWORD(v860))
            {
              uint64_t v439 = 0;
              while (*(void **)((char *)v859 + v439) != v438)
              {
                v439 += 8;
                if (8 * HIDWORD(v860) == v439)
                {
                  unsigned int v440 = HIDWORD(v860);
                  goto LABEL_840;
                }
              }
              int v442 = (char *)v859 + v439;
              unsigned int v440 = HIDWORD(v860);
              uint64_t v449 = v859;
            }
            else
            {
              unsigned int v440 = 0;
LABEL_840:
              uint64_t v449 = v859;
              int v442 = (char *)v859 + 8 * HIDWORD(v860);
            }
          }
          else
          {
            unsigned int v441 = v437 & ((v438 >> 4) ^ (v438 >> 9));
            int v442 = (char *)v859 + 8 * v441;
            int v443 = *(void **)v442;
            if (*(void *)v442 == -1)
            {
              int v444 = 0;
LABEL_842:
              if (v444) {
                int v442 = v444;
              }
              uint64_t v448 = *(void **)v442;
            }
            else
            {
              int v444 = 0;
              int v445 = 1;
              while (v443 != v438)
              {
                if (v444) {
                  BOOL v446 = 0;
                }
                else {
                  BOOL v446 = v443 == (void *)-2;
                }
                if (v446) {
                  int v444 = v442;
                }
                unsigned int v447 = v441 + v445++;
                unsigned int v441 = v447 & v437;
                int v442 = (char *)v859 + 8 * (v447 & v437);
                int v443 = *(void **)v442;
                if (*(void *)v442 == -1) {
                  goto LABEL_842;
                }
              }
              uint64_t v448 = v438;
            }
            if (v448 != v438) {
              int v442 = (char *)v859 + 8 * v860;
            }
            unsigned int v440 = HIDWORD(v860);
            uint64_t v449 = __s1;
          }
          if (v859 != v449) {
            unsigned int v440 = v860;
          }
          uint64_t v450 = v438;
          if (v442 != (char *)v859 + 8 * v440) {
            goto LABEL_854;
          }
        }
        uint64_t v450 = (void *)v339[7];
LABEL_854:
        if (v450 == v436)
        {
          unint64_t v804 = 0;
LABEL_866:
          uint64_t v452 = v339 + 6;
        }
        else
        {
          int v451 = (unsigned __int8 *)v450[7];
          unint64_t v804 = v451;
          if (v451) {
            llvm::MetadataTracking::track((uint64_t)&v804, v451, 2);
          }
          uint64_t v452 = v450;
          if (v334 != 1)
          {
            uint64_t v452 = v450;
            while (*(_WORD *)v452[2] == 544)
            {
              uint64_t v452 = (void *)v452[1];
              if (v452 == v436) {
                goto LABEL_866;
              }
            }
          }
          if (v436 != v438 && v452 == v450 && v452 != v436) {
            uint64_t v452 = (void *)v450[1];
          }
        }
        uint64_t v453 = *(void *)(v788 + 8);
        unsigned int v454 = (llvm::MachineFunction *)v339[4];
        v799[0] = v804;
        if (v804) {
          llvm::MetadataTracking::track((uint64_t)v799, v804, 2);
        }
        unsigned int v455 = llvm::MachineFunction::CreateMachineInstr(v454, v453 + 312144, v799, 0);
        if (v799[0])
        {
          int v460 = *v799[0];
          if ((v460 - 4) > 0x1E)
          {
            if ((v460 - 3) >= 0xFFFFFFFE) {
              long long v463 = v799[0];
            }
            else {
              long long v463 = 0;
            }
            if ((v460 - 3) < 0xFFFFFFFE)
            {
              BOOL v335 = v784;
              if (v460 == 3) {
                *((void *)v799[0] + 1) = 0;
              }
              goto LABEL_870;
            }
            unint64_t v462 = (unint64_t)(v463 + 8);
          }
          else
          {
            BOOL v335 = v784;
            if ((v799[0][1] & 0x7F) != 2 && !*((_DWORD *)v799[0] + 3)) {
              goto LABEL_870;
            }
            uint64_t v461 = *((void *)v799[0] + 2);
            if ((v461 & 4) == 0) {
              goto LABEL_870;
            }
            unint64_t v462 = v461 & 0xFFFFFFFFFFFFFFF8;
            if (!v462) {
              goto LABEL_870;
            }
          }
          int v835 = v799;
          sub_1CC5FA668(v462 + 16, &v835);
          BOOL v335 = v784;
        }
LABEL_870:
        if (v436 != v452 && (*((_WORD *)v452 + 22) & 4) != 0) {
          *((_WORD *)v455 + 22) |= 0xCu;
        }
        sub_1CC31973C(v339 + 5, v452, (uint64_t)v455);
        LODWORD(v835) = 1;
        unsigned int v836 = 0;
        uint64_t v837 = 0;
        llvm::MachineInstr::addOperand(v455, v454, (const llvm::MachineOperand *)&v835);
        LODWORD(v835) = 1;
        unsigned int v836 = 0;
        uint64_t v837 = 1 << v334;
        llvm::MachineInstr::addOperand(v455, v454, (const llvm::MachineOperand *)&v835);
        HIDWORD(v801) |= v337;
        if (v804)
        {
          int v456 = *v804;
          if ((v456 - 4) > 0x1E)
          {
            if ((v456 - 3) >= 0xFFFFFFFE) {
              long long v457 = v804;
            }
            else {
              long long v457 = 0;
            }
            if ((v456 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v458 = (unint64_t)(v457 + 8);
              goto LABEL_889;
            }
            if (v456 == 3) {
              *((void *)v804 + 1) = 0;
            }
          }
          else if ((v804[1] & 0x7F) == 2 || *((_DWORD *)v804 + 3))
          {
            uint64_t v459 = *((void *)v804 + 2);
            if ((v459 & 4) != 0)
            {
              unint64_t v458 = v459 & 0xFFFFFFFFFFFFFFF8;
              if (v458)
              {
LABEL_889:
                int v835 = &v804;
                sub_1CC5FA668(v458 + 16, &v835);
              }
            }
          }
        }
      }
    }
    else
    {
      LODWORD(v801) = v801 | v337;
    }
    if (*((void *)&v842 + 1) != (void)v842) {
      free(*((void **)&v842 + 1));
    }
    long long v291 = &unk_1CD91C000;
    if (v859 != __s1) {
      free(v859);
    }
LABEL_881:
    ++v334;
  }
  while (v334 != 10);
  uint64_t v290 = v764 + 40;
  if (v335)
  {
    uint64_t v464 = v764[41];
    if ((void *)v464 == v766)
    {
      long long v465 = 0;
      uint64_t v464 = 0;
    }
    else
    {
      long long v465 = 0;
      char v466 = BYTE4(v829);
      do
      {
        for (uint64_t m = *(void *)(v464 + 56); m != v464 + 48; uint64_t m = *(void *)(m + 8))
        {
          uint64_t v468 = *(void *)(*(void *)(m + 16) + 16) & 0x800200;
          char v469 = v468 == 8389120;
          if (v466)
          {
            sub_1CBC2B808((uint64_t)&__s1, m);
            long long v470 = __s1;
            if (__s1)
            {
              unint64_t v472 = ((unint64_t)__s1 >> 1) & ~(-1 << ((unint64_t)__s1 >> 58));
            }
            else
            {
              long long v471 = *(unint64_t **)__s1;
              unint64_t v472 = **(void **)__s1;
              if (__s1)
              {
                if (v471 != (unint64_t *)((char *)__s1 + 16)) {
                  free(v471);
                }
                MEMORY[0x1D25D9CE0](v470, 0x1080C40EF38A13ELL);
              }
            }
            char v469 = (v468 == 8389120) | v472;
            long long v291 = (void *)&unk_1CD91C000;
          }
          if (v469)
          {
            long long v465 = (void *)m;
            goto LABEL_927;
          }
        }
        uint64_t v464 = *(void *)(v464 + 8);
      }
      while ((void *)v464 != v766);
      uint64_t v464 = 0;
LABEL_927:
      uint64_t v290 = v764 + 40;
    }
    uint64_t v473 = sub_1CBA9E42C((uint64_t)&v820, v464);
    uint64_t v474 = &v821;
    if (v820)
    {
      unsigned int v475 = 16;
    }
    else
    {
      uint64_t v474 = (uint64_t *)v821;
      unsigned int v475 = v822[0];
    }
    if (&v474[13 * v475] != v473 && *((_DWORD *)v473 + 7) != *((_DWORD *)v473 + 8))
    {
      uint64_t v464 = v764[41];
      long long v465 = (void *)(v464 + 48);
    }
    if (v464) {
      sub_1CBC2C244((uint64_t)&v812, v464, v465, WORD2(v829), v809, 1);
    }
  }
  if ((_BYTE)v807 && SHIBYTE(v806) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v319 = v775;
  int v317 = v773;
  if (v810)
  {
    int v476 = *v810;
    if ((v476 - 4) > 0x1E)
    {
      if ((v476 - 3) >= 0xFFFFFFFE) {
        v675 = v810;
      }
      else {
        v675 = 0;
      }
      if ((v476 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v676 = (unint64_t)(v675 + 8);
        goto LABEL_1250;
      }
      if (v476 == 3) {
        *((void *)v810 + 1) = 0;
      }
    }
    else if ((v810[1] & 0x7F) == 2 || *((_DWORD *)v810 + 3))
    {
      uint64_t v721 = *((void *)v810 + 2);
      if ((v721 & 4) != 0)
      {
        unint64_t v676 = v721 & 0xFFFFFFFFFFFFFFF8;
        if (v676)
        {
LABEL_1250:
          uint64_t __s1 = &v810;
          sub_1CC5FA668(v676 + 16, &__s1);
        }
      }
    }
  }
LABEL_944:
  if (v317 && !v319[369]) {
    goto LABEL_968;
  }
  uint64_t v477 = (unsigned __int16)v802 & (unsigned __int16)~WORD2(v801) & 0x3FF;
  if (((unsigned __int16)v802 & (unsigned __int16)~WORD2(v801) & 0x3FF) == 0) {
    goto LABEL_968;
  }
  uint64_t v478 = (*(uint64_t (**)(unsigned char *))(*(void *)v319 + 104))(v319);
  uint64_t v479 = *v290;
  uint64_t v480 = *v290;
  uint64_t v482 = *(void *)(v480 + 48);
  uint64_t v481 = v480 + 48;
  unint64_t v483 = v482 & 0xFFFFFFFFFFFFFFF8;
  if ((v482 & 0xFFFFFFFFFFFFFFF8) != 0 && (*(unsigned char *)v483 & 4) != 0)
  {
    __int16 v484 = *(_WORD *)(v483 + 44);
  }
  else
  {
    while (1)
    {
      __int16 v484 = *(_WORD *)(v483 + 44);
      if ((v484 & 4) == 0) {
        break;
      }
      unint64_t v483 = *(void *)v483 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  uint64_t v485 = *(void *)(v478 + 8) + 312144;
  if ((v484 & 4) != 0)
  {
    uint64_t v486 = *(llvm::MachineFunction **)(v479 + 32);
    long long v494 = *(unsigned __int8 **)(v483 + 56);
    *(void *)&long long v842 = v494;
    if (v494) {
      llvm::MetadataTracking::track((uint64_t)&v842, v494, 2);
    }
    uint64_t v488 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v486, v485, (unsigned __int8 **)&v842, 0);
    if (!(void)v842) {
      goto LABEL_963;
    }
    int v751 = *(unsigned __int8 *)v842;
    if ((v751 - 4) > 0x1E)
    {
      if ((v751 - 3) >= 0xFFFFFFFE) {
        uint64_t v757 = v842;
      }
      else {
        uint64_t v757 = 0;
      }
      if ((v751 - 3) < 0xFFFFFFFE)
      {
        long long v291 = (void *)&unk_1CD91C000;
        if (v751 == 3) {
          *(void *)(v842 + 8) = 0;
        }
        goto LABEL_963;
      }
      unint64_t v753 = v757 + 8;
    }
    else
    {
      long long v291 = (void *)&unk_1CD91C000;
      if ((*(unsigned char *)(v842 + 1) & 0x7F) != 2 && !*(_DWORD *)(v842 + 12)) {
        goto LABEL_963;
      }
      uint64_t v752 = *(void *)(v842 + 16);
      if ((v752 & 4) == 0) {
        goto LABEL_963;
      }
      unint64_t v753 = v752 & 0xFFFFFFFFFFFFFFF8;
      if (!v753) {
        goto LABEL_963;
      }
    }
    uint64_t __s1 = &v842;
    sub_1CC5FA668(v753 + 16, &__s1);
    long long v291 = (void *)&unk_1CD91C000;
LABEL_963:
    if (v481 != v483 && (*(_WORD *)(v483 + 44) & 4) != 0) {
      *(_WORD *)(v488 + 44) |= 0xCu;
    }
    sub_1CC31973C((uint64_t *)(v479 + 40), (uint64_t *)v483, v488);
    goto LABEL_967;
  }
  uint64_t v486 = *(llvm::MachineFunction **)(v479 + 32);
  unint64_t v487 = *(unsigned __int8 **)(v483 + 56);
  *(void *)&long long v842 = v487;
  if (v487) {
    llvm::MetadataTracking::track((uint64_t)&v842, v487, 2);
  }
  uint64_t v488 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v486, v485, (unsigned __int8 **)&v842, 0);
  if ((void)v842)
  {
    int v748 = *(unsigned __int8 *)v842;
    if ((v748 - 4) > 0x1E)
    {
      if ((v748 - 3) >= 0xFFFFFFFE) {
        uint64_t v756 = v842;
      }
      else {
        uint64_t v756 = 0;
      }
      if ((v748 - 3) < 0xFFFFFFFE)
      {
        long long v291 = (void *)&unk_1CD91C000;
        if (v748 == 3) {
          *(void *)(v842 + 8) = 0;
        }
        goto LABEL_956;
      }
      unint64_t v750 = v756 + 8;
    }
    else
    {
      long long v291 = (void *)&unk_1CD91C000;
      if ((*(unsigned char *)(v842 + 1) & 0x7F) != 2 && !*(_DWORD *)(v842 + 12)) {
        goto LABEL_956;
      }
      uint64_t v749 = *(void *)(v842 + 16);
      if ((v749 & 4) == 0) {
        goto LABEL_956;
      }
      unint64_t v750 = v749 & 0xFFFFFFFFFFFFFFF8;
      if (!v750) {
        goto LABEL_956;
      }
    }
    uint64_t __s1 = &v842;
    sub_1CC5FA668(v750 + 16, &__s1);
    long long v291 = (void *)&unk_1CD91C000;
  }
LABEL_956:
  uint64_t v489 = *(void *)(v479 + 40);
  *(void *)(v488 + 24) = v489;
  uint64_t v490 = *(void *)(v489 + 32);
  uint64_t v491 = *(unsigned int *)(v488 + 40);
  if (v491)
  {
    uint64_t v712 = *(void *)(v488 + 32);
    uint64_t v713 = *(void *)(v490 + 40);
    uint64_t v714 = 32 * v491;
    do
    {
      if (!*(unsigned char *)v712)
      {
        uint64_t v715 = *(unsigned int *)(v712 + 4);
        if ((int)v715 >= 0) {
          unsigned int v716 = (uint64_t *)(*(void *)(v713 + 272) + 8 * v715);
        }
        else {
          unsigned int v716 = (uint64_t *)(*(void *)(v713 + 24) + 16 * (v715 & 0x7FFFFFFF) + 8);
        }
        uint64_t v717 = *v716;
        if (*v716)
        {
          uint64_t v718 = *(void *)(v717 + 16);
          *(void *)(v717 + 16) = v712;
          *(void *)(v712 + 16) = v718;
          if (*(unsigned char *)(v712 + 3))
          {
            *(void *)(v712 + 24) = v717;
          }
          else
          {
            *(void *)(v712 + 24) = 0;
            unsigned int v716 = (uint64_t *)(v718 + 24);
          }
        }
        else
        {
          *(void *)(v712 + 16) = v712;
          *(void *)(v712 + 24) = 0;
        }
        *unsigned int v716 = v712;
      }
      v712 += 32;
      v714 -= 32;
    }
    while (v714);
  }
  uint64_t v492 = *(void *)(v490 + 728);
  if (v492) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v492 + 24))(v492, v488);
  }
  unint64_t v493 = *(void *)v483 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v488 = v493 | *(void *)v488 & 7;
  *(void *)(v488 + 8) = v483;
  *(void *)(v493 + 8) = v488;
  *(void *)unint64_t v483 = *(void *)v483 & 7 | v488;
LABEL_967:
  LODWORD(__s1) = 1;
  uint64_t v860 = 0;
  v859 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v488, v486, (const llvm::MachineOperand *)&__s1);
  LODWORD(__s1) = 1;
  v859 = 0;
  uint64_t v860 = v477;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v488, v486, (const llvm::MachineOperand *)&__s1);
LABEL_968:
  int v495 = dword_1EBCC2094;
  v812 = (void *)1;
  int64x2_t v813 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  int64x2_t v814 = v813;
  int64x2_t v815 = v813;
  int64x2_t v816 = v813;
  uint64_t v817 = v819;
  uint64_t v818 = 0x800000000;
  uint64_t __s1 = (void *)1;
  for (uint64_t n = 8; n != 1672; n += 104)
    *(void **)((char *)&__s1 + n) = (void *)-4096;
  v865[0] = 1;
  for (iuint64_t i = 1680; ii != 3344; ii += 104)
    *(void **)((char *)&__s1 + ii) = (void *)-4096;
  sub_1CBA9CCC0((uint64_t)&__s1, (uint64_t)v764, v767);
  long long v498 = (const llvm::TargetSubtargetInfo *)v764[2];
  (*(void (**)(const llvm::TargetSubtargetInfo *))(*(void *)v498 + 104))(v498);
  long long v843 = unk_1CFB28DE0;
  long long v844 = xmmword_1CFB28DF0;
  long long v845 = unk_1CFB28E00;
  long long v842 = llvm::MCSchedModel::Default;
  long long v848 = unk_1CFB28DE0;
  long long v849 = xmmword_1CFB28DF0;
  long long v850 = unk_1CFB28E00;
  v846 = 0;
  uint64_t v851 = 0;
  long long v847 = llvm::MCSchedModel::Default;
  long long v853 = 0u;
  long long v854 = 0u;
  long long v852 = 0u;
  unsigned int v855 = v857;
  uint64_t v856 = v291[24];
  v857[8] = 0;
  llvm::TargetSchedModel::init((llvm::TargetSchedModel *)&v842, v498);
  long long v499 = (void *)v764[41];
  if (v499 != v766)
  {
    unsigned int v785 = v495;
    do
    {
      v782 = v499;
      uint64_t v501 = v499[6];
      long long v500 = v499 + 6;
      unint64_t v502 = v501 & 0xFFFFFFFFFFFFFFF8;
      if ((v501 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(unsigned char *)v502 & 4) == 0)
      {
        while ((*(_WORD *)(v502 + 44) & 4) != 0)
          unint64_t v502 = *(void *)v502 & 0xFFFFFFFFFFFFFFF8;
      }
      while ((void *)v502 != v500)
      {
        char v503 = (char)v812;
        unsigned int v504 = v502 >> 4;
        if (v812)
        {
          int v505 = 8;
          char v506 = &v813;
        }
        else
        {
          int v505 = v813.i32[2];
          if (!v813.i32[2]) {
            goto LABEL_989;
          }
          char v506 = (int64x2_t *)v813.i64[0];
        }
        int v507 = v505 - 1;
        unsigned int v508 = v507 & (v504 ^ (v502 >> 9));
        uint64_t v509 = v506->i64[v508];
        if (v502 == v509) {
          goto LABEL_1159;
        }
        int v510 = 1;
        while (v509 != -4096)
        {
          unsigned int v511 = v508 + v510++;
          unsigned int v508 = v511 & v507;
          uint64_t v509 = v506->i64[v508];
          if (v502 == v509) {
            goto LABEL_1159;
          }
        }
LABEL_989:
        int v512 = **(unsigned __int16 **)(v502 + 16);
        if (v512 == 6503)
        {
          unint64_t v515 = *(void *)v502 & 0xFFFFFFFFFFFFFFF8;
          unsigned int v516 = sub_1CBDA6464(6503, 0x70u);
          if (!v515 || (*(unsigned char *)v515 & 4) == 0)
          {
            while ((*(_WORD *)(v515 + 44) & 4) != 0)
              unint64_t v515 = *(void *)v515 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((void *)v515 != v500)
          {
            unsigned int v517 = 0;
            uint64_t v518 = v516;
            while (1)
            {
              unint64_t v519 = *(void *)v515 & 0xFFFFFFFFFFFFFFF8;
              if (!v519 || (*(unsigned char *)v519 & 4) == 0)
              {
                while ((*(_WORD *)(v519 + 44) & 4) != 0)
                  unint64_t v519 = *(void *)v519 & 0xFFFFFFFFFFFFFFF8;
              }
              unsigned int v520 = v515 >> 4;
              if (v812)
              {
                int v521 = 8;
                unsigned int v522 = &v813;
              }
              else
              {
                int v521 = v813.i32[2];
                if (!v813.i32[2]) {
                  goto LABEL_1014;
                }
                unsigned int v522 = (int64x2_t *)v813.i64[0];
              }
              int v523 = v521 - 1;
              unsigned int v524 = v523 & (v520 ^ (v515 >> 9));
              uint64_t v525 = v522->i64[v524];
              if (v515 != v525) {
                break;
              }
LABEL_1043:
              unint64_t v515 = v519;
              if ((void *)v519 == v500)
              {
LABEL_1047:
                if (v517)
                {
                  uint64_t v547 = *(void *)(v502 + 32) + 32 * sub_1CBDA6464(6503, 0x70u);
                  *(void *)(v547 + 16) = v517 | *(_DWORD *)(v547 + 16);
                }
                goto LABEL_1049;
              }
            }
            int v526 = 1;
            while (v525 != -4096)
            {
              unsigned int v527 = v524 + v526++;
              unsigned int v524 = v527 & v523;
              uint64_t v525 = v522->i64[v524];
              if (v515 == v525) {
                goto LABEL_1043;
              }
            }
LABEL_1014:
            uint64_t v528 = *(void *)(v515 + 16);
            if (*(_WORD *)v528 != 6503) {
              goto LABEL_1047;
            }
            uint64_t v529 = *(void *)(v528 + 16);
            uint64_t v530 = ~v529 & 0x800200;
            uint64_t v531 = v529 & 0x800100;
            if (v530) {
              BOOL v532 = v531 == 8388864;
            }
            else {
              BOOL v532 = 1;
            }
            if (v532) {
              goto LABEL_1043;
            }
            int v533 = *(_DWORD *)(*(void *)(v515 + 32) + 32 * v518 + 16);
            int v835 = (unsigned __int8 **)v515;
            if (v812)
            {
              int v534 = 8;
              int v535 = &v813;
LABEL_1023:
              unsigned int v536 = v520 ^ (v515 >> 9);
              int v537 = v534 - 1;
              unsigned int v538 = (v534 - 1) & v536;
              unsigned int v539 = &v535->i64[v538];
              uint64_t v540 = *v539;
              if (v515 != *v539)
              {
                int v541 = 0;
                int v542 = 1;
                while (v540 != -4096)
                {
                  if (v541) {
                    BOOL v543 = 0;
                  }
                  else {
                    BOOL v543 = v540 == -8192;
                  }
                  if (v543) {
                    int v541 = v539;
                  }
                  unsigned int v544 = v538 + v542++;
                  unsigned int v538 = v544 & v537;
                  unsigned int v539 = &v535->i64[v538];
                  uint64_t v540 = *v539;
                  if (v515 == *v539) {
                    goto LABEL_1038;
                  }
                }
                if (v541) {
                  int v545 = v541;
                }
                else {
                  int v545 = v539;
                }
                goto LABEL_1036;
              }
            }
            else
            {
              int v534 = v813.i32[2];
              if (v813.i32[2])
              {
                int v535 = (int64x2_t *)v813.i64[0];
                goto LABEL_1023;
              }
              int v545 = 0;
LABEL_1036:
              unsigned int v546 = sub_1CB938A98((uint64_t)&v812, (uint64_t)&v835, &v835, v545);
              *unsigned int v546 = v835;
              if (v818 >= (unint64_t)HIDWORD(v818)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v817 + v818) = v835;
              LODWORD(v818) = v818 + 1;
            }
LABEL_1038:
            v517 |= v533;
            unint64_t v519 = *(void *)v515 & 0xFFFFFFFFFFFFFFF8;
            if (!v519 || (*(unsigned char *)v519 & 4) == 0)
            {
              while ((*(_WORD *)(v519 + 44) & 4) != 0)
                unint64_t v519 = *(void *)v519 & 0xFFFFFFFFFFFFFFF8;
            }
            goto LABEL_1043;
          }
LABEL_1049:
          uint64_t v548 = *(void *)(v502 + 24);
          if (v548 != *v766)
          {
            int v549 = *(_DWORD *)(v765 + 264);
            if (!v549) {
              goto LABEL_1056;
            }
            uint64_t v550 = *(void *)(v765 + 248);
            unsigned int v551 = v549 - 1;
            uint64_t v552 = (v549 - 1) & ((v548 >> 4) ^ (v548 >> 9));
            uint64_t v553 = *(void *)(v550 + 16 * v552);
            if (v548 == v553)
            {
LABEL_1055:
              if (!*(void *)(v550 + 16 * v552 + 8)) {
                goto LABEL_1056;
              }
            }
            else
            {
              int v554 = 1;
              while (v553 != -4096)
              {
                int v555 = v552 + v554++;
                uint64_t v552 = v555 & v551;
                uint64_t v553 = *(void *)(v550 + 16 * v552);
                if (v548 == v553) {
                  goto LABEL_1055;
                }
              }
LABEL_1056:
              unsigned int v556 = sub_1CBA9E42C((uint64_t)&__s1, v548);
              char v557 = (char *)&v859;
              if (__s1)
              {
                unsigned int v558 = 16;
              }
              else
              {
                char v557 = (char *)v859;
                unsigned int v558 = v860;
              }
              if (&v557[104 * v558] == (char *)v556 || *((_DWORD *)v556 + 7) == *((_DWORD *)v556 + 8)) {
                goto LABEL_1159;
              }
            }
LABEL_1061:
            int v835 = (unsigned __int8 **)v502;
            if (v812)
            {
              int v559 = 8;
              int v560 = &v813;
            }
            else
            {
              int v559 = v813.i32[2];
              if (!v813.i32[2]) {
                goto LABEL_1166;
              }
              int v560 = (int64x2_t *)v813.i64[0];
            }
            int v590 = v559 - 1;
            unsigned int v591 = v590 & (v504 ^ (v502 >> 9));
            v592 = &v560->i64[v591];
            uint64_t v593 = *v592;
            if (v502 == *v592) {
              goto LABEL_1159;
            }
            v594 = 0;
            int v595 = 1;
            while (v593 != -4096)
            {
              if (v594) {
                BOOL v596 = 0;
              }
              else {
                BOOL v596 = v593 == -8192;
              }
              if (v596) {
                v594 = v592;
              }
              unsigned int v597 = v591 + v595++;
              unsigned int v591 = v597 & v590;
              v592 = &v560->i64[v591];
              uint64_t v593 = *v592;
              if (v502 == *v592) {
                goto LABEL_1159;
              }
            }
LABEL_1154:
            if (v594) {
              int v610 = v594;
            }
            else {
              int v610 = v592;
            }
            goto LABEL_1157;
          }
          uint64_t v576 = v764[2];
          if (*(unsigned char *)(v576 + 369)) {
            BOOL v577 = 1;
          }
          else {
            BOOL v577 = v785 == 0;
          }
          if (v577) {
            goto LABEL_1159;
          }
          unsigned int v578 = 0;
          unint64_t v579 = *(void *)(v548 + 48) & 0xFFFFFFFFFFFFFFF8;
          if (v812) {
            unsigned int v580 = &v813;
          }
          else {
            unsigned int v580 = (int64x2_t *)v813.i64[0];
          }
          if (v812) {
            int v581 = 7;
          }
          else {
            int v581 = v813.i32[2] - 1;
          }
          unint64_t v582 = v502;
          while (1)
          {
LABEL_1106:
            if (!v579 || (unint64_t v583 = *(void *)(v548 + 48) & 0xFFFFFFFFFFFFFFF8, (*(unsigned char *)v579 & 4) == 0))
            {
              unint64_t v583 = *(void *)(v548 + 48) & 0xFFFFFFFFFFFFFFF8;
              if ((*(_WORD *)(v579 + 44) & 4) != 0)
              {
                unint64_t v583 = *(void *)(v548 + 48) & 0xFFFFFFFFFFFFFFF8;
                do
                  unint64_t v583 = *(void *)v583 & 0xFFFFFFFFFFFFFFF8;
                while ((*(_WORD *)(v583 + 44) & 4) != 0);
              }
            }
            if (v582 == v583) {
              goto LABEL_1061;
            }
            if (!v582 || (*(unsigned char *)v582 & 4) == 0)
            {
              while ((*(_WORD *)(v582 + 44) & 8) != 0)
                unint64_t v582 = *(void *)(v582 + 8);
            }
            unint64_t v582 = *(void *)(v582 + 8);
            if (v812 & 1 | (v813.i32[2] != 0))
            {
              unsigned int v584 = ((v582 >> 4) ^ (v582 >> 9)) & v581;
              uint64_t v585 = v580->i64[v584];
              if (v582 == v585) {
                continue;
              }
              int v586 = 1;
              while (v585 != -4096)
              {
                unsigned int v587 = v584 + v586++;
                unsigned int v584 = v587 & v581;
                uint64_t v585 = v580->i64[v584];
                if (v582 == v585) {
                  goto LABEL_1106;
                }
              }
            }
            int v588 = *(_WORD **)(v582 + 16);
            if (*v588 == 6504)
            {
              v578 += 100;
            }
            else
            {
              unsigned int v589 = (unsigned __int16)v588[3];
              if (*(_WORD *)(*((void *)&v844 + 1) + 24 * v589 + 16)) {
                v578 += *(__int16 *)(*(void *)(v576 + 144)
              }
                                   + 4 * *(unsigned __int16 *)(*((void *)&v844 + 1) + 24 * v589 + 14));
            }
            if (v578 >= v785) {
              goto LABEL_1159;
            }
          }
        }
        if (v512 != 6504) {
          goto LABEL_1159;
        }
        int v513 = sub_1CBDA6464(6504, 0x2Fu);
        if (v513 < 0) {
          int v514 = -1;
        }
        else {
          int v514 = *(_DWORD *)(*(void *)(v502 + 32) + 32 * (unsigned __int16)v513 + 16) & 1;
        }
        unint64_t v561 = *(void *)v502 & 0xFFFFFFFFFFFFFFF8;
        if (!v561 || (*(unsigned char *)v561 & 4) == 0)
        {
          while ((*(_WORD *)(v561 + 44) & 4) != 0)
            unint64_t v561 = *(void *)v561 & 0xFFFFFFFFFFFFFFF8;
        }
        if ((void *)v561 == v500) {
          goto LABEL_1159;
        }
        int v562 = (int64x2_t *)v813.i64[0];
        int v563 = v813.i32[2] - 1;
        char v564 = v503 | (v813.i32[2] != 0);
        if (v503)
        {
          int v562 = &v813;
          int v563 = 7;
        }
        while (1)
        {
          unint64_t v565 = v561;
          unint64_t v561 = *(void *)v561 & 0xFFFFFFFFFFFFFFF8;
          if (!v561 || (*(unsigned char *)v561 & 4) == 0)
          {
            while ((*(_WORD *)(v561 + 44) & 4) != 0)
              unint64_t v561 = *(void *)v561 & 0xFFFFFFFFFFFFFFF8;
          }
          if ((v564 & 1) == 0) {
            goto LABEL_1084;
          }
          unsigned int v566 = ((v565 >> 4) ^ (v565 >> 9)) & v563;
          uint64_t v567 = v562->i64[v566];
          if (v565 != v567) {
            break;
          }
LABEL_1093:
          if ((void *)v561 == v500) {
            goto LABEL_1159;
          }
        }
        int v568 = 1;
        while (v567 != -4096)
        {
          unsigned int v569 = v566 + v568++;
          unsigned int v566 = v569 & v563;
          uint64_t v567 = v562->i64[v566];
          if (v565 == v567) {
            goto LABEL_1093;
          }
        }
LABEL_1084:
        uint64_t v570 = *(void *)(v565 + 16);
        if (*(_WORD *)v570 != 6504) {
          goto LABEL_1159;
        }
        uint64_t v571 = *(void *)(v570 + 16);
        uint64_t v572 = ~v571 & 0x800200;
        uint64_t v573 = v571 & 0x800100;
        if (v572) {
          BOOL v574 = v573 == 8388864;
        }
        else {
          BOOL v574 = 1;
        }
        if (v574) {
          goto LABEL_1093;
        }
        int v575 = v513 < 0 ? -1 : *(_DWORD *)(*(void *)(v565 + 32) + 32 * (unsigned __int16)v513 + 16) & 1;
        if (v575 != v514) {
          goto LABEL_1093;
        }
        unsigned int v598 = sub_1CBDA6464(6504, 0x70u);
        uint64_t v599 = *(void *)(v565 + 32) + 32 * v598;
        *(void *)(v599 + 16) |= *(unsigned int *)(*(void *)(v502 + 32) + 32 * v598 + 16);
        unsigned int v600 = sub_1CBDA6464(6504, 0x2Fu);
        uint64_t v601 = *(void *)(v565 + 32) + 32 * v600;
        *(void *)(v601 + 16) |= *(unsigned int *)(*(void *)(v502 + 32) + 32 * v600 + 16);
        int v835 = (unsigned __int8 **)v502;
        if (v812)
        {
          int v602 = 8;
          v603 = &v813;
LABEL_1144:
          int v604 = v602 - 1;
          unsigned int v605 = v604 & (v504 ^ (v502 >> 9));
          v592 = &v603->i64[v605];
          uint64_t v606 = *v592;
          if (v502 == *v592) {
            goto LABEL_1159;
          }
          v594 = 0;
          int v607 = 1;
          while (v606 != -4096)
          {
            if (v594) {
              BOOL v608 = 0;
            }
            else {
              BOOL v608 = v606 == -8192;
            }
            if (v608) {
              v594 = v592;
            }
            unsigned int v609 = v605 + v607++;
            unsigned int v605 = v609 & v604;
            v592 = &v603->i64[v605];
            uint64_t v606 = *v592;
            if (v502 == *v592) {
              goto LABEL_1159;
            }
          }
          goto LABEL_1154;
        }
        int v602 = v813.i32[2];
        if (v813.i32[2])
        {
          v603 = (int64x2_t *)v813.i64[0];
          goto LABEL_1144;
        }
LABEL_1166:
        int v610 = 0;
LABEL_1157:
        int v611 = sub_1CB938A98((uint64_t)&v812, (uint64_t)&v835, &v835, v610);
        *int v611 = v835;
        if (v818 >= (unint64_t)HIDWORD(v818)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v817 + v818) = v835;
        LODWORD(v818) = v818 + 1;
LABEL_1159:
        unint64_t v502 = *(void *)v502 & 0xFFFFFFFFFFFFFFF8;
        if (!v502 || (*(unsigned char *)v502 & 4) == 0)
        {
          while ((*(_WORD *)(v502 + 44) & 4) != 0)
            unint64_t v502 = *(void *)v502 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      long long v499 = (void *)v782[1];
    }
    while (v499 != v766);
  }
  if (v855 != v857) {
    free(v855);
  }
  sub_1CBA9E4F0((uint64_t)v865);
  sub_1CBA9E4F0((uint64_t)&__s1);
  v612 = v761;
  int v613 = v778;
  if (v818)
  {
    unsigned int v614 = (llvm::MachineInstr **)v817;
    uint64_t v615 = 8 * v818;
    do
    {
      int v616 = *v614++;
      llvm::MachineInstr::eraseFromParent(v616);
      v615 -= 8;
    }
    while (v615);
  }
  if (HIBYTE(v829))
  {
    uint64_t v617 = v826;
    uint64_t v618 = *((void *)&v827 + 1);
    if (*((void *)&v827 + 1))
    {
      if ((**((unsigned char **)&v827 + 1) & 4) == 0)
      {
        while ((*(_WORD *)(v618 + 44) & 8) != 0)
          uint64_t v618 = *(void *)(v618 + 8);
      }
      unint64_t v619 = (unint64_t **)(v618 + 8);
    }
    else
    {
      unint64_t v619 = (unint64_t **)(v826 + 56);
    }
    v620 = *v619;
    uint64_t v621 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v761 + 104))(v761);
    int v835 = 0;
    uint64_t v622 = *(void *)(v621 + 8) + 440976;
    unsigned __int16 v623 = *(llvm::MachineFunction **)(v617 + 32);
    *(void *)&long long v842 = 0;
    int v624 = llvm::MachineFunction::CreateMachineInstr(v623, v622, (unsigned __int8 **)&v842, 0);
    if ((void)v842)
    {
      int v725 = *(unsigned __int8 *)v842;
      if ((v725 - 4) > 0x1E)
      {
        if ((v725 - 3) >= 0xFFFFFFFE) {
          uint64_t v744 = v842;
        }
        else {
          uint64_t v744 = 0;
        }
        if ((v725 - 3) < 0xFFFFFFFE)
        {
          v612 = v761;
          if (v725 == 3) {
            *(void *)(v842 + 8) = 0;
          }
          goto LABEL_1181;
        }
        unint64_t v727 = v744 + 8;
      }
      else
      {
        v612 = v761;
        if ((*(unsigned char *)(v842 + 1) & 0x7F) != 2 && !*(_DWORD *)(v842 + 12)) {
          goto LABEL_1181;
        }
        uint64_t v726 = *(void *)(v842 + 16);
        if ((v726 & 4) == 0) {
          goto LABEL_1181;
        }
        unint64_t v727 = v726 & 0xFFFFFFFFFFFFFFF8;
        if (!v727) {
          goto LABEL_1181;
        }
      }
      uint64_t __s1 = &v842;
      sub_1CC5FA668(v727 + 16, &__s1);
      v612 = v761;
    }
LABEL_1181:
    uint64_t v625 = *(void *)(v617 + 40);
    *((void *)v624 + 3) = v625;
    uint64_t v626 = *(void *)(v625 + 32);
    uint64_t v627 = *((unsigned int *)v624 + 10);
    int v613 = v778;
    if (v627)
    {
      uint64_t v677 = *((void *)v624 + 4);
      uint64_t v678 = *(void *)(v626 + 40);
      uint64_t v679 = 32 * v627;
      do
      {
        if (!*(unsigned char *)v677)
        {
          uint64_t v680 = *(unsigned int *)(v677 + 4);
          if ((int)v680 >= 0) {
            int v681 = (uint64_t *)(*(void *)(v678 + 272) + 8 * v680);
          }
          else {
            int v681 = (uint64_t *)(*(void *)(v678 + 24) + 16 * (v680 & 0x7FFFFFFF) + 8);
          }
          uint64_t v682 = *v681;
          if (*v681)
          {
            uint64_t v683 = *(void *)(v682 + 16);
            *(void *)(v682 + 16) = v677;
            *(void *)(v677 + 16) = v683;
            if (*(unsigned char *)(v677 + 3))
            {
              *(void *)(v677 + 24) = v682;
            }
            else
            {
              *(void *)(v677 + 24) = 0;
              int v681 = (uint64_t *)(v683 + 24);
            }
          }
          else
          {
            *(void *)(v677 + 16) = v677;
            *(void *)(v677 + 24) = 0;
          }
          *int v681 = v677;
        }
        v677 += 32;
        v679 -= 32;
      }
      while (v679);
    }
    uint64_t v628 = *(void *)(v626 + 728);
    if (v628) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v628 + 24))(v628, v624);
    }
    unint64_t v629 = *v620 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v624 = v629 | *(void *)v624 & 7;
    *((void *)v624 + 1) = v620;
    *(void *)(v629 + 8) = v624;
    unint64_t *v620 = *v620 & 7 | (unint64_t)v624;
    LODWORD(__s1) = 1;
    uint64_t v860 = 0;
    v859 = 0;
    llvm::MachineInstr::addOperand(v624, v623, (const llvm::MachineOperand *)&__s1);
    LODWORD(__s1) = 1;
    v859 = 0;
    uint64_t v860 = 150;
    llvm::MachineInstr::addOperand(v624, v623, (const llvm::MachineOperand *)&__s1);
    if (v835)
    {
      int v630 = *(unsigned __int8 *)v835;
      if ((v630 - 4) > 0x1E)
      {
        if ((v630 - 3) >= 0xFFFFFFFE) {
          uint64_t v671 = (unsigned __int8 *)v835;
        }
        else {
          uint64_t v671 = 0;
        }
        if ((v630 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v672 = (unint64_t)(v671 + 8);
          goto LABEL_1238;
        }
        if (v630 == 3) {
          v835[1] = 0;
        }
      }
      else if ((*((unsigned char *)v835 + 1) & 0x7F) == 2 || *((_DWORD *)v835 + 3))
      {
        unint64_t v719 = (unint64_t)v835[2];
        if ((v719 & 4) != 0)
        {
          unint64_t v672 = v719 & 0xFFFFFFFFFFFFFFF8;
          if (v672)
          {
LABEL_1238:
            uint64_t __s1 = &v835;
            sub_1CC5FA668(v672 + 16, &__s1);
          }
        }
      }
    }
  }
  if (v830)
  {
    uint64_t v631 = *((void *)&v826 + 1);
    uint64_t v632 = v828;
    if ((void)v828)
    {
      if ((*(unsigned char *)v828 & 4) == 0)
      {
        while ((*(_WORD *)(v632 + 44) & 8) != 0)
          uint64_t v632 = *(void *)(v632 + 8);
      }
      BOOL v633 = (unint64_t **)(v632 + 8);
    }
    else
    {
      BOOL v633 = (unint64_t **)(*((void *)&v826 + 1) + 56);
    }
    unsigned int v634 = *v633;
    int v635 = v831;
    uint64_t v636 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v761 + 104))(v761);
    if (v635) {
      uint64_t v637 = 1120;
    }
    else {
      uint64_t v637 = 1056;
    }
    uint64_t v638 = *(void *)(v636 + 8) + 440976;
    int v639 = *(llvm::MachineFunction **)(v631 + 32);
    *(void *)&long long v842 = 0;
    int v640 = llvm::MachineFunction::CreateMachineInstr(v639, v638, (unsigned __int8 **)&v842, 0);
    if ((void)v842)
    {
      int v728 = *(unsigned __int8 *)v842;
      if ((v728 - 4) > 0x1E)
      {
        if ((v728 - 3) >= 0xFFFFFFFE) {
          uint64_t v745 = v842;
        }
        else {
          uint64_t v745 = 0;
        }
        if ((v728 - 3) < 0xFFFFFFFE)
        {
          if (v728 == 3) {
            *(void *)(v842 + 8) = 0;
          }
          goto LABEL_1199;
        }
        unint64_t v730 = v745 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v842 + 1) & 0x7F) != 2 && !*(_DWORD *)(v842 + 12)) {
          goto LABEL_1199;
        }
        uint64_t v729 = *(void *)(v842 + 16);
        if ((v729 & 4) == 0) {
          goto LABEL_1199;
        }
        unint64_t v730 = v729 & 0xFFFFFFFFFFFFFFF8;
        if (!v730) {
          goto LABEL_1199;
        }
      }
      uint64_t __s1 = &v842;
      sub_1CC5FA668(v730 + 16, &__s1);
    }
LABEL_1199:
    uint64_t v641 = *(void *)(v631 + 40);
    *((void *)v640 + 3) = v641;
    uint64_t v642 = *(void *)(v641 + 32);
    uint64_t v643 = *((unsigned int *)v640 + 10);
    if (v643)
    {
      uint64_t v684 = *((void *)v640 + 4);
      uint64_t v685 = *(void *)(v642 + 40);
      uint64_t v686 = 32 * v643;
      do
      {
        if (!*(unsigned char *)v684)
        {
          uint64_t v687 = *(unsigned int *)(v684 + 4);
          if ((int)v687 >= 0) {
            unsigned int v688 = (uint64_t *)(*(void *)(v685 + 272) + 8 * v687);
          }
          else {
            unsigned int v688 = (uint64_t *)(*(void *)(v685 + 24) + 16 * (v687 & 0x7FFFFFFF) + 8);
          }
          uint64_t v689 = *v688;
          if (*v688)
          {
            uint64_t v690 = *(void *)(v689 + 16);
            *(void *)(v689 + 16) = v684;
            *(void *)(v684 + 16) = v690;
            if (*(unsigned char *)(v684 + 3))
            {
              *(void *)(v684 + 24) = v689;
            }
            else
            {
              *(void *)(v684 + 24) = 0;
              unsigned int v688 = (uint64_t *)(v690 + 24);
            }
          }
          else
          {
            *(void *)(v684 + 16) = v684;
            *(void *)(v684 + 24) = 0;
          }
          *unsigned int v688 = v684;
        }
        v684 += 32;
        v686 -= 32;
      }
      while (v686);
    }
    uint64_t v644 = *(void *)(v642 + 728);
    if (v644) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v644 + 24))(v644, v640);
    }
    unint64_t v645 = *v634 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v640 = v645 | *(void *)v640 & 7;
    *((void *)v640 + 1) = v634;
    *(void *)(v645 + 8) = v640;
    *unsigned int v634 = *v634 & 7 | (unint64_t)v640;
    LODWORD(__s1) = 1;
    uint64_t v860 = 0;
    v859 = 0;
    llvm::MachineInstr::addOperand(v640, v639, (const llvm::MachineOperand *)&__s1);
    LODWORD(__s1) = 1;
    v859 = 0;
    uint64_t v860 = v637 | 8;
    llvm::MachineInstr::addOperand(v640, v639, (const llvm::MachineOperand *)&__s1);
    unsigned int v646 = *(llvm::MachineFunction **)(v631 + 32);
    *(void *)&long long v842 = 0;
    v647 = llvm::MachineFunction::CreateMachineInstr(v646, v638, (unsigned __int8 **)&v842, 0);
    if ((void)v842)
    {
      int v731 = *(unsigned __int8 *)v842;
      if ((v731 - 4) > 0x1E)
      {
        if ((v731 - 3) >= 0xFFFFFFFE) {
          uint64_t v746 = v842;
        }
        else {
          uint64_t v746 = 0;
        }
        if ((v731 - 3) < 0xFFFFFFFE)
        {
          if (v731 == 3) {
            *(void *)(v842 + 8) = 0;
          }
          goto LABEL_1203;
        }
        unint64_t v733 = v746 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v842 + 1) & 0x7F) != 2 && !*(_DWORD *)(v842 + 12)) {
          goto LABEL_1203;
        }
        uint64_t v732 = *(void *)(v842 + 16);
        if ((v732 & 4) == 0) {
          goto LABEL_1203;
        }
        unint64_t v733 = v732 & 0xFFFFFFFFFFFFFFF8;
        if (!v733) {
          goto LABEL_1203;
        }
      }
      uint64_t __s1 = &v842;
      sub_1CC5FA668(v733 + 16, &__s1);
    }
LABEL_1203:
    uint64_t v648 = *(void *)(v631 + 40);
    *((void *)v647 + 3) = v648;
    uint64_t v649 = *(void *)(v648 + 32);
    uint64_t v650 = *((unsigned int *)v647 + 10);
    v612 = v761;
    int v613 = v778;
    if (v650)
    {
      uint64_t v691 = *((void *)v647 + 4);
      uint64_t v692 = *(void *)(v649 + 40);
      uint64_t v693 = 32 * v650;
      do
      {
        if (!*(unsigned char *)v691)
        {
          uint64_t v694 = *(unsigned int *)(v691 + 4);
          if ((int)v694 >= 0) {
            unsigned int v695 = (uint64_t *)(*(void *)(v692 + 272) + 8 * v694);
          }
          else {
            unsigned int v695 = (uint64_t *)(*(void *)(v692 + 24) + 16 * (v694 & 0x7FFFFFFF) + 8);
          }
          uint64_t v696 = *v695;
          if (*v695)
          {
            uint64_t v697 = *(void *)(v696 + 16);
            *(void *)(v696 + 16) = v691;
            *(void *)(v691 + 16) = v697;
            if (*(unsigned char *)(v691 + 3))
            {
              *(void *)(v691 + 24) = v696;
            }
            else
            {
              *(void *)(v691 + 24) = 0;
              unsigned int v695 = (uint64_t *)(v697 + 24);
            }
          }
          else
          {
            *(void *)(v691 + 16) = v691;
            *(void *)(v691 + 24) = 0;
          }
          *unsigned int v695 = v691;
        }
        v691 += 32;
        v693 -= 32;
      }
      while (v693);
    }
    uint64_t v651 = *(void *)(v649 + 728);
    if (v651) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v651 + 24))(v651, v647);
    }
    unint64_t v652 = *v634 & 0xFFFFFFFFFFFFFFF8;
    *(void *)v647 = v652 | *(void *)v647 & 7;
    *((void *)v647 + 1) = v634;
    *(void *)(v652 + 8) = v647;
    *unsigned int v634 = *v634 & 7 | (unint64_t)v647;
    LODWORD(__s1) = 1;
    uint64_t v860 = 0;
    v859 = 0;
    llvm::MachineInstr::addOperand(v647, v646, (const llvm::MachineOperand *)&__s1);
    LODWORD(__s1) = 1;
    v859 = 0;
    uint64_t v860 = v637 | 6;
    llvm::MachineInstr::addOperand(v647, v646, (const llvm::MachineOperand *)&__s1);
  }
  ((void (*)(unsigned int (***)(void *, uint64_t, void, uint64_t, uint64_t), uint64_t, void, uint64_t, void, uint64_t, uint64_t))(*v613)[1])(v613, 1, v801 & ~v760, 1, 0, 1, 1);
  if (v612[288] && (**v613)(v613, 1, 0, 1, 1))
  {
    uint64_t v653 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v612 + 104))(v612);
    uint64_t v654 = v653;
    int v655 = (void *)v764[41];
    int v656 = (unint64_t *)v655[7];
    unsigned int v657 = (unsigned __int8 *)v656[7];
    int v835 = (unsigned __int8 **)v657;
    if (v657)
    {
      llvm::MetadataTracking::track((uint64_t)&v835, v657, 2);
      uint64_t v658 = *(void *)(v654 + 8) + 312144;
      int v659 = (llvm::MachineFunction *)v655[4];
      *(void *)&long long v842 = v835;
      if (v835) {
        llvm::MetadataTracking::track((uint64_t)&v842, (unsigned __int8 *)v835, 2);
      }
    }
    else
    {
      uint64_t v658 = *(void *)(v653 + 8) + 312144;
      int v659 = (llvm::MachineFunction *)v655[4];
      *(void *)&long long v842 = 0;
    }
    int v660 = llvm::MachineFunction::CreateMachineInstr(v659, v658, (unsigned __int8 **)&v842, 0);
    if ((void)v842)
    {
      int v734 = *(unsigned __int8 *)v842;
      if ((v734 - 4) > 0x1E)
      {
        if ((v734 - 3) >= 0xFFFFFFFE) {
          uint64_t v747 = v842;
        }
        else {
          uint64_t v747 = 0;
        }
        if ((v734 - 3) < 0xFFFFFFFE)
        {
          if (v734 == 3) {
            *(void *)(v842 + 8) = 0;
          }
          goto LABEL_1214;
        }
        unint64_t v736 = v747 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v842 + 1) & 0x7F) != 2 && !*(_DWORD *)(v842 + 12)) {
          goto LABEL_1214;
        }
        uint64_t v735 = *(void *)(v842 + 16);
        if ((v735 & 4) == 0) {
          goto LABEL_1214;
        }
        unint64_t v736 = v735 & 0xFFFFFFFFFFFFFFF8;
        if (!v736) {
          goto LABEL_1214;
        }
      }
      uint64_t __s1 = &v842;
      sub_1CC5FA668(v736 + 16, &__s1);
    }
LABEL_1214:
    uint64_t v661 = v655[5];
    *((void *)v660 + 3) = v661;
    uint64_t v662 = *(void *)(v661 + 32);
    uint64_t v663 = *((unsigned int *)v660 + 10);
    if (v663)
    {
      uint64_t v698 = *((void *)v660 + 4);
      uint64_t v699 = *(void *)(v662 + 40);
      uint64_t v700 = 32 * v663;
      do
      {
        if (!*(unsigned char *)v698)
        {
          uint64_t v701 = *(unsigned int *)(v698 + 4);
          if ((int)v701 >= 0) {
            int v702 = (uint64_t *)(*(void *)(v699 + 272) + 8 * v701);
          }
          else {
            int v702 = (uint64_t *)(*(void *)(v699 + 24) + 16 * (v701 & 0x7FFFFFFF) + 8);
          }
          uint64_t v703 = *v702;
          if (*v702)
          {
            uint64_t v704 = *(void *)(v703 + 16);
            *(void *)(v703 + 16) = v698;
            *(void *)(v698 + 16) = v704;
            if (*(unsigned char *)(v698 + 3))
            {
              *(void *)(v698 + 24) = v703;
            }
            else
            {
              *(void *)(v698 + 24) = 0;
              int v702 = (uint64_t *)(v704 + 24);
            }
          }
          else
          {
            *(void *)(v698 + 16) = v698;
            *(void *)(v698 + 24) = 0;
          }
          *int v702 = v698;
        }
        v698 += 32;
        v700 -= 32;
      }
      while (v700);
    }
    uint64_t v664 = *(void *)(v662 + 728);
    if (v664) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v664 + 24))(v664, v660);
    }
    unint64_t v665 = *v656 & 0xFFFFFFFFFFFFFFF8;
    *(void *)int v660 = v665 | *(void *)v660 & 7;
    *((void *)v660 + 1) = v656;
    *(void *)(v665 + 8) = v660;
    *int v656 = *v656 & 7 | (unint64_t)v660;
    LODWORD(__s1) = 1;
    uint64_t v860 = 0;
    v859 = 0;
    llvm::MachineInstr::addOperand(v660, v659, (const llvm::MachineOperand *)&__s1);
    unsigned int v666 = (**v778)(v778, 1, 0, 1, 1);
    LODWORD(__s1) = 1;
    v859 = 0;
    uint64_t v860 = v666;
    llvm::MachineInstr::addOperand(v660, v659, (const llvm::MachineOperand *)&__s1);
    if (v835)
    {
      int v667 = *(unsigned __int8 *)v835;
      if ((v667 - 4) > 0x1E)
      {
        if ((v667 - 3) >= 0xFFFFFFFE) {
          unsigned int v673 = (unsigned __int8 *)v835;
        }
        else {
          unsigned int v673 = 0;
        }
        if ((v667 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v674 = (unint64_t)(v673 + 8);
          goto LABEL_1244;
        }
        if (v667 == 3) {
          v835[1] = 0;
        }
      }
      else if ((*((unsigned char *)v835 + 1) & 0x7F) == 2 || *((_DWORD *)v835 + 3))
      {
        unint64_t v720 = (unint64_t)v835[2];
        if ((v720 & 4) != 0)
        {
          unint64_t v674 = v720 & 0xFFFFFFFFFFFFFFF8;
          if (v674)
          {
LABEL_1244:
            uint64_t __s1 = &v835;
            sub_1CC5FA668(v674 + 16, &__s1);
          }
        }
      }
    }
  }
  if (v817 != v819) {
    free(v817);
  }
  if ((v812 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v813.i64[0], 8);
  }
  sub_1CBA9E4F0((uint64_t)v824);
  sub_1CBA9E4F0((uint64_t)&v820);
  if (v832 != v834) {
    free(v832);
  }
  uint64_t v668 = 110;
  do
  {
    v669 = (void *)v824[v668 + 199];
    if (&v824[v668 + 201] != v669) {
      free(v669);
    }
    v668 -= 10;
  }
  while (v668 * 8);
  return 0;
}

uint64_t sub_1CBC2B070(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = 0;
  switch(a3)
  {
    case ' ':
    case '!':
    case '%':
      **(unsigned char **)(a1 + 32) |= sub_1CBA9C308(*(uint64_t **)(a1 + 40), ++**(unsigned char **)(a1 + 8), **(void **)(a1 + 48), (unsigned __int8 **)(*(void *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
      if (**(_DWORD **)(a1 + 16) == **(unsigned __int8 **)(a1 + 8)) {
        return 1;
      }
      uint64_t v6 = ***(void ***)(a1 + 80);
      unsigned int v7 = *(unsigned __int8 *)(v6 + 8);
      if (v7 > 0x11) {
        goto LABEL_64;
      }
      if (((1 << v7) & 0xAC7F) != 0) {
        goto LABEL_6;
      }
      if (((1 << v7) & 0x30000) != 0) {
        goto LABEL_62;
      }
LABEL_64:
      if ((v7 & 0xFE) != 0x12 && v7 != 21) {
        return 0;
      }
LABEL_62:
      uint64_t result = llvm::Type::isSizedDerivedType(***(void ***)(a1 + 80), 0);
      if (result)
      {
        uint64_t v6 = ***(void ***)(a1 + 80);
LABEL_6:
        uint64_t v8 = *(llvm::DataLayout **)a1;
        goto LABEL_7;
      }
      return result;
    case '""':
      int v29 = sub_1CD10C828(a2, *(llvm::DataLayout **)a1);
      if (**(_DWORD **)(a1 + 16) - 1 == **(unsigned __int8 **)(a1 + 8)) {
        return 0;
      }
      LODWORD(v30) = v29;
      goto LABEL_22;
    case '#':
    case '$':
    case ')':
    case '*':
    case '+':
    case ',':
    case '-':
    case '.':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '9':
    case ':':
    case ';':
    case '<':
      goto LABEL_13;
    case '&':
    case '\'':
    case '(':
    case '/':
    case '0':
    case '1':
    case '2':
      return result;
    case '8':
      if (*(unsigned char *)(a2 + 16) != 84
        || (uint64_t v36 = *(void *)(a2 - 32)) == 0
        || *(unsigned char *)(v36 + 16)
        || *(void *)(v36 + 24) != *(void *)(a2 + 72)
        || (*(unsigned char *)(v36 + 33) & 0x20) == 0)
      {
        uint64_t v15 = *(void *)(a1 + 88);
        uint64_t v37 = *(void *)(a1 + 56);
        uint64_t v38 = *(unsigned int *)(v37 + 16);
        if (v38)
        {
          uint64_t v39 = *(unsigned char **)(v37 + 8);
          uint64_t v40 = *(_DWORD **)v15;
          uint64_t v41 = *(_DWORD **)(v15 + 8);
          uint64_t v42 = 6 * v38;
          do
          {
            *v40 |= 1 << (*v39 & 0xF);
            unsigned int v43 = *v39;
            v39 += 6;
            *v41 |= 1 << (v43 >> 4);
            v42 -= 6;
          }
          while (v42);
        }
        uint64_t v44 = *(unsigned int *)(v37 + 40);
        if (v44)
        {
          uint64_t v45 = *(unsigned char **)(v37 + 32);
          uint64_t v46 = *(_DWORD **)v15;
          unsigned int v47 = *(_DWORD **)(v15 + 8);
          uint64_t v48 = 6 * v44;
          do
          {
            *v46 |= 1 << (*v45 & 0xF);
            unsigned int v49 = *v45;
            v45 += 6;
            *v47 |= 1 << (v49 >> 4);
            v48 -= 6;
          }
          while (v48);
        }
LABEL_47:
        uint64_t result = 1;
        **(unsigned char **)(v15 + 16) = 1;
        return result;
      }
      int v67 = *(_DWORD *)(v36 + 36);
      if ((v67 - 1282) < 0x190 || (v67 - 2824) < 0xC || (v67 - 1682) <= 0x8B)
      {
        **(unsigned char **)(a1 + 32) |= sub_1CBA9C308(*(uint64_t **)(a1 + 40), ++**(unsigned char **)(a1 + 8), **(void **)(a1 + 48), (unsigned __int8 **)(*(void *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
        return 1;
      }
      if ((v67 - 2630) >= 0x20
        && v67 != 2144
        && (v67 - 2838) >= 3
        && (v67 - 2376) >= 0x20
        && v67 != 2142
        && (v67 - 2784) > 2)
      {
        uint64_t v15 = *(void *)(a1 + 88);
        uint64_t v68 = *(void *)(a1 + 56);
        uint64_t v69 = *(unsigned int *)(v68 + 16);
        if (v69)
        {
          uint64_t v70 = *(unsigned char **)(v68 + 8);
          unint64_t v71 = *(_DWORD **)v15;
          uint64_t v72 = *(_DWORD **)(v15 + 8);
          uint64_t v73 = 6 * v69;
          do
          {
            *v71 |= 1 << (*v70 & 0xF);
            unsigned int v74 = *v70;
            v70 += 6;
            *v72 |= 1 << (v74 >> 4);
            v73 -= 6;
          }
          while (v73);
        }
        uint64_t v75 = *(unsigned int *)(v68 + 40);
        if (v75)
        {
          uint64_t v76 = *(unsigned char **)(v68 + 32);
          unint64_t v77 = *(_DWORD **)v15;
          unint64_t v78 = *(_DWORD **)(v15 + 8);
          uint64_t v79 = 6 * v75;
          do
          {
            *v77 |= 1 << (*v76 & 0xF);
            unsigned int v80 = *v76;
            v76 += 6;
            *v78 |= 1 << (v80 >> 4);
            v79 -= 6;
          }
          while (v79);
        }
        goto LABEL_47;
      }
      **(unsigned char **)(a1 + 32) |= sub_1CBA9C308(*(uint64_t **)(a1 + 40), ++**(unsigned char **)(a1 + 8), **(void **)(a1 + 48), (unsigned __int8 **)(*(void *)(a1 + 56) + 8), **(_DWORD **)(a1 + 64), **(_DWORD **)(a1 + 72));
      if (**(_DWORD **)(a1 + 16) == **(unsigned __int8 **)(a1 + 8)) {
        return 1;
      }
      uint64_t v8 = *(llvm::DataLayout **)a1;
      uint64_t v6 = ***(void ***)(a1 + 80);
LABEL_7:
      unint64_t v10 = sub_1CB83544C((uint64_t)v8, v6) + 7;
      if (v9 == 1) {
      uint64_t result = 0;
      }
      uint64_t v11 = *(_DWORD **)(a1 + 64);
      **(_DWORD **)(a1 + 72) = v10 >> 3;
      uint64_t v12 = *(_DWORD **)(a1 + 24);
      *uint64_t v11 = *v12;
      *uint64_t v12 = 0;
      return result;
    case '=':
      if (*(unsigned char *)(*(void *)(a2 - 32) + 16) == 16)
      {
        unint64_t v32 = (unint64_t)(sub_1CB83544C(*(void *)a1, *(void *)(**(void **)(a2 - 64) + 24)) + 7) >> 3;
        if (v31 == 1)
        {
          int v81 = v32;
          LODWORD(v32) = v81;
        }
        uint64_t v33 = *(void *)(a2 - 32);
        uint64_t v34 = (void *)(v33 + 24);
        if (*(_DWORD *)(v33 + 32) >= 0x41u) {
          uint64_t v34 = (void *)*v34;
        }
        uint64_t result = 0;
        int v35 = *(_DWORD **)(a1 + 72);
        **(_DWORD **)(a1 + 64) += *(_DWORD *)v34 * v32;
        _DWORD *v35 = v32;
        return result;
      }
      uint64_t v15 = *(void *)(a1 + 88);
      uint64_t v50 = *(void *)(a1 + 56);
      uint64_t v51 = *(unsigned int *)(v50 + 16);
      if (v51)
      {
        BOOL v52 = *(unsigned char **)(v50 + 8);
        uint64_t v53 = *(_DWORD **)v15;
        uint64_t v54 = *(_DWORD **)(v15 + 8);
        uint64_t v55 = 6 * v51;
        do
        {
          *v53 |= 1 << (*v52 & 0xF);
          unsigned int v56 = *v52;
          v52 += 6;
          *v54 |= 1 << (v56 >> 4);
          v55 -= 6;
        }
        while (v55);
      }
      uint64_t v57 = *(unsigned int *)(v50 + 40);
      if (v57)
      {
        unint64_t v58 = *(unsigned char **)(v50 + 32);
        uint64_t v59 = *(_DWORD **)v15;
        uint64_t v60 = *(_DWORD **)(v15 + 8);
        uint64_t v61 = 6 * v57;
        do
        {
          *v59 |= 1 << (*v58 & 0xF);
          unsigned int v62 = *v58;
          v58 += 6;
          *v60 |= 1 << (v62 >> 4);
          v61 -= 6;
        }
        while (v61);
      }
      goto LABEL_47;
    default:
      if (a3 != 13)
      {
LABEL_13:
        uint64_t v15 = *(void *)(a1 + 88);
        uint64_t v16 = *(void *)(a1 + 56);
        uint64_t v17 = *(unsigned int *)(v16 + 16);
        if (v17)
        {
          uint64_t v18 = *(unsigned char **)(v16 + 8);
          uint64_t v19 = *(_DWORD **)v15;
          unsigned int v20 = *(_DWORD **)(v15 + 8);
          uint64_t v21 = 6 * v17;
          do
          {
            *v19 |= 1 << (*v18 & 0xF);
            unsigned int v22 = *v18;
            v18 += 6;
            *v20 |= 1 << (v22 >> 4);
            v21 -= 6;
          }
          while (v21);
        }
        uint64_t v23 = *(unsigned int *)(v16 + 40);
        if (v23)
        {
          unsigned int v24 = *(unsigned char **)(v16 + 32);
          int v25 = *(_DWORD **)v15;
          BOOL v26 = *(_DWORD **)(v15 + 8);
          uint64_t v27 = 6 * v23;
          do
          {
            *v25 |= 1 << (*v24 & 0xF);
            unsigned int v28 = *v24;
            v24 += 6;
            *v26 |= 1 << (v28 >> 4);
            v27 -= 6;
          }
          while (v27);
        }
        goto LABEL_47;
      }
      int v13 = *(_DWORD *)(a2 + 20);
      if ((v13 & 0x40000000) != 0) {
        uint64_t v14 = *(uint64_t **)(a2 - 8);
      }
      else {
        uint64_t v14 = (uint64_t *)(a2 - 32 * (v13 & 0x7FFFFFF));
      }
      if (**(_DWORD **)(a1 + 16) - 1 == **(unsigned __int8 **)(a1 + 8)) {
        return 0;
      }
      uint64_t v63 = *v14;
      uint64_t v64 = v14[4];
      if (v64 == **(void **)(a1 + 48)) {
        uint64_t v64 = v63;
      }
      if (*(unsigned char *)(v64 + 16) != 16 || v64 == 0)
      {
        if (MEMORY[0x20] > 0x40u) {
          uint64_t v30 = *MEMORY[0x18];
        }
        else {
          uint64_t v30 = (uint64_t)(MEMORY[0x18] << -(uint64_t)MEMORY[0x20]) >> -(uint64_t)MEMORY[0x20];
        }
LABEL_22:
        uint64_t result = 0;
        **(_DWORD **)(a1 + 24) += v30;
      }
      else
      {
        uint64_t result = 0;
        **(_DWORD **)(a1 + 24) = 0;
        **(_DWORD **)(a1 + 72) = -1;
      }
      return result;
  }
}

uint64_t sub_1CBC2B808(uint64_t result, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (void *)result;
  uint64_t v4 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v5 = *((void *)v4 + 2);
  uint64_t v6 = v5 & 0x800100;
  uint64_t v7 = v5 & 0x800200;
  unint64_t v8 = *(void *)(a2 + 48);
  if (v8 < 8) {
    goto LABEL_18;
  }
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (_DWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
    BOOL v10 = (*(void *)(a2 + 48) & 7) != 3 || v9 == 0;
    if (v10 || !*v9) {
      goto LABEL_18;
    }
  }
  else
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)(a2 + 48) = v8;
  }
  if ((v8 & 7) != 0)
  {
    uint64_t v11 = *(uint64_t **)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (!v11) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v11 = (uint64_t *)(v8 & 0xFFFFFFFFFFFFFFF8);
    *(void *)(a2 + 48) = v8 & 0xFFFFFFFFFFFFFFF8;
    if ((v8 & 0xFFFFFFFFFFFFFFF8) == 0) {
      goto LABEL_18;
    }
  }
  BOOL v12 = 0;
  uint64_t v13 = *v11;
  if ((v13 & 4) == 0) {
    goto LABEL_19;
  }
  uint64_t result = v13 & 0xFFFFFFFFFFFFFFF8;
  if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0) {
    goto LABEL_19;
  }
  if (*(_DWORD *)(result + 8) == 7)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
    BOOL v12 = result == 0;
    uint64_t v4 = *(unsigned __int16 **)(v2 + 16);
    goto LABEL_19;
  }
LABEL_18:
  BOOL v12 = 0;
LABEL_19:
  uint64_t v14 = 0x2C00000000000005;
  if (v6 == 8388864 || v7 == 8389120) {
    goto LABEL_29;
  }
  if (v12) {
    goto LABEL_29;
  }
  int v16 = *v4;
  if ((v16 - 6495) < 8) {
    goto LABEL_29;
  }
  BOOL v17 = (v16 - 566) >= 3 && (v16 - 6165) >= 2;
  uint64_t v14 = 0x2C00000000000003;
  if (!v17) {
    goto LABEL_29;
  }
  uint64_t v14 = 0x2C00000000000801;
  if ((v4[8] & 2) != 0) {
    goto LABEL_29;
  }
  uint64_t result = sub_1CBE52E8C(*v4);
  BOOL v18 = (result - 79) >= 2 || (result & 0xFF00000000) == 0;
  if (!v18 || (v16 - 4741) < 2) {
    goto LABEL_29;
  }
  unint64_t v20 = *(void *)(v2 + 48);
  if (v20 >= 8)
  {
    if ((v20 & 7) != 0)
    {
      if ((*(void *)(v2 + 48) & 7) != 3
        || (v20 & 0xFFFFFFFFFFFFFFF8) == 0
        || !*(_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8))
      {
        goto LABEL_44;
      }
    }
    else
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
      *(void *)(v2 + 48) = v20;
      if (!v20)
      {
LABEL_67:
        uint64_t v14 = 0x2C00000000000009;
        goto LABEL_29;
      }
    }
    if ((v20 & 7) != 0)
    {
      if ((v20 & 7) != 3 || (v20 & 0xFFFFFFFFFFFFFFF8) == 0 || *(_DWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) != 1) {
        goto LABEL_67;
      }
    }
    else
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
      *(void *)(v2 + 48) = v20;
    }
    if ((v20 & 7) != 0)
    {
      unint64_t v26 = *(void *)((v20 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v26 = v20 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v2 + 48) = v26;
    }
    if (v26 && !*(_DWORD *)(v26 + 16))
    {
      uint64_t v14 = 0x2C00000000000001;
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_44:
  __int16 v21 = *(_WORD *)(v2 + 44);
  unint64_t v22 = *((void *)v4 + 1);
  if ((v21 & 0xC) == 0 || (v21 & 4) != 0)
  {
    uint64_t v24 = (v22 >> 7) & 1;
  }
  else if ((v22 & 0x80) != 0)
  {
    LOBYTE(v24) = 1;
  }
  else
  {
    do
    {
      unsigned int v23 = *(unsigned __int16 *)(v2 + 44);
      LODWORD(v24) = (v23 >> 3) & 1;
      if ((v23 & 8) == 0) {
        break;
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while ((*(unsigned char *)(*(void *)(v2 + 16) + 8) & 0x80) == 0);
  }
  BOOL v10 = (v24 & (byte_1EBCC2050 != 0)) == 0;
  uint64_t v25 = 2060;
  if (v10) {
    uint64_t v25 = -2;
  }
  uint64_t v14 = v25 + 0x2C00000000000003;
LABEL_29:
  *uint64_t v3 = v14;
  return result;
}

uint64_t sub_1CBC2BAB0(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 48);
  if (v1 >= 8)
  {
    if ((v1 & 7) != 0)
    {
      uint64_t v2 = (_DWORD *)(v1 & 0xFFFFFFFFFFFFFFF8);
      BOOL v3 = (*(void *)(a1 + 48) & 7) != 3 || v2 == 0;
      if (v3 || *v2 != 1) {
        goto LABEL_14;
      }
    }
    else
    {
      v1 &= 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 48) = v1;
    }
    if ((v1 & 7) != 0)
    {
      unint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v4)
      {
LABEL_12:
        unsigned int v5 = (*(unsigned __int16 *)(v4 + 32) >> 1) & 1;
        goto LABEL_15;
      }
    }
    else
    {
      unint64_t v4 = v1 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 48) = v4;
      if (v4) {
        goto LABEL_12;
      }
    }
  }
LABEL_14:
  unsigned int v5 = 1;
LABEL_15:
  uint64_t v6 = *(unsigned __int16 **)(a1 + 16);
  BOOL v3 = (v6[8] & 2) == 0;
  int v7 = *v6;
  if (!v3 || v7 == 6166) {
    return 0;
  }
  else {
    return v5;
  }
}

void *sub_1CBC2BB3C(llvm::MachineBasicBlock *a1, uint64_t a2)
{
  uint64_t FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(a1);
  uint64_t v5 = *((void *)a1 + 7);
  if (v5 == FirstInstrTerminator)
  {
LABEL_25:
    uint64_t v5 = FirstInstrTerminator;
  }
  else
  {
    uint64_t v6 = a2 & 0xFF00000000;
    uint64_t v7 = 1 << a2;
    uint64_t v8 = a2 >> 6;
    while (1)
    {
      sub_1CBC2B808((uint64_t)&v14, v5);
      unint64_t v9 = v14;
      if (v6)
      {
        if (v14)
        {
          if ((v7 & (v14 >> 1) & ~(-1 << (v14 >> 58))) != 0) {
            break;
          }
        }
        else if ((*(void *)(*(void *)v14 + 8 * v8) & v7) != 0)
        {
          break;
        }
      }
      else if (v14)
      {
        if (((v14 >> 1) & ~(-1 << (v14 >> 58))) != 0) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v10 = *(unsigned int *)(v14 + 8);
        if (v10)
        {
          uint64_t v11 = *(void **)v14;
          uint64_t v12 = 8 * v10;
          while (!*v11)
          {
            ++v11;
            v12 -= 8;
            if (!v12) {
              goto LABEL_16;
            }
          }
          goto LABEL_27;
        }
      }
LABEL_16:
      if ((*(unsigned char *)(*(void *)(v5 + 16) + 16) & 0x40) != 0 && *(void *)(v5 + 8) != FirstInstrTerminator) {
        break;
      }
      if ((v14 & 1) == 0 && v14)
      {
        if (*(void *)v14 != v14 + 16) {
          free(*(void **)v14);
        }
        MEMORY[0x1D25D9CE0](v9, 0x1080C40EF38A13ELL);
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == FirstInstrTerminator) {
        goto LABEL_25;
      }
    }
    if (v14) {
      goto LABEL_31;
    }
LABEL_27:
    if (v14)
    {
      if (*(void *)v14 != v14 + 16) {
        free(*(void **)v14);
      }
      MEMORY[0x1D25D9CE0](v9, 0x1080C40EF38A13ELL);
    }
  }
LABEL_31:
  if ((llvm::MachineBasicBlock *)v5 == (llvm::MachineBasicBlock *)((char *)a1 + 48)) {
    return sub_1CBC2C878((uint64_t)a1);
  }
  return (void *)v5;
}

void sub_1CBC2BCEC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = a2 + 48;
  if (a2 + 48 == a3)
  {
LABEL_36:
    int v29 = 0;
    uint64_t v48 = 0;
    goto LABEL_39;
  }
  if (*(void *)(*(void *)(a3 + 24) + 56) == a3) {
    goto LABEL_30;
  }
  unint64_t v12 = *(void *)a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(*(void *)(v12 + 16) + 8);
  if ((*(_WORD *)(v12 + 44) & 0xC) != 0 && (*(_WORD *)(v12 + 44) & 4) == 0)
  {
    if ((v13 & 0x400) == 0)
    {
      while ((*(_WORD *)(v12 + 44) & 8) != 0)
      {
        unint64_t v12 = *(void *)(v12 + 8);
        if ((*(unsigned char *)(*(void *)(v12 + 16) + 9) & 4) != 0) {
          goto LABEL_8;
        }
      }
      goto LABEL_30;
    }
  }
  else if ((v13 & 0x400) == 0)
  {
    goto LABEL_30;
  }
LABEL_8:
  uint64_t v15 = a3;
  while (1)
  {
    unsigned int v16 = **(unsigned __int16 **)(v15 + 16);
    BOOL v17 = v16 > 0x17;
    int v18 = (1 << v16) & 0x83E000;
    if (v17 || v18 == 0) {
      break;
    }
    uint64_t v15 = *(void *)(v15 + 8);
    if (v15 == v11)
    {
      unint64_t v20 = 0;
      uint64_t v48 = 0;
      goto LABEL_21;
    }
  }
  unint64_t v20 = *(unsigned __int8 **)(v15 + 56);
  uint64_t v48 = v20;
  if (v20)
  {
    llvm::MetadataTracking::track((uint64_t)&v48, v20, 2);
    unint64_t v20 = v48;
  }
LABEL_21:
  uint64_t v21 = *(void *)(**(void **)a1 + 8) + 48 * **(unsigned int **)(a1 + 8);
  unint64_t v22 = *(llvm::MachineFunction **)(a2 + 32);
  BOOL v52 = v20;
  if (v20) {
    llvm::MetadataTracking::track((uint64_t)&v52, v20, 2);
  }
  unsigned int v23 = llvm::MachineFunction::CreateMachineInstr(v22, v21, &v52, 0);
  if (v52)
  {
    int v44 = *v52;
    if ((v44 - 4) > 0x1E)
    {
      if ((v44 - 3) >= 0xFFFFFFFE) {
        unsigned int v47 = v52;
      }
      else {
        unsigned int v47 = 0;
      }
      if ((v44 - 3) < 0xFFFFFFFE)
      {
        if (v44 == 3) {
          *((void *)v52 + 1) = 0;
        }
        goto LABEL_24;
      }
      unint64_t v46 = (unint64_t)(v47 + 8);
    }
    else
    {
      if ((v52[1] & 0x7F) != 2 && !*((_DWORD *)v52 + 3)) {
        goto LABEL_24;
      }
      uint64_t v45 = *((void *)v52 + 2);
      if ((v45 & 4) == 0) {
        goto LABEL_24;
      }
      unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (!v46) {
        goto LABEL_24;
      }
    }
    unsigned int v49 = &v52;
    sub_1CC5FA668(v46 + 16, &v49);
  }
LABEL_24:
  if ((*(_WORD *)(a3 + 44) & 4) != 0) {
    *((_WORD *)v23 + 22) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(a2 + 40), (uint64_t *)a3, (uint64_t)v23);
  LODWORD(v49) = 1;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v49);
  if (v48)
  {
    int v24 = *v48;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        uint64_t v36 = v48;
      }
      else {
        uint64_t v36 = 0;
      }
      if ((v24 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v37 = (unint64_t)(v36 + 8);
LABEL_63:
        unsigned int v49 = &v48;
        sub_1CC5FA668(v37 + 16, &v49);
        goto LABEL_30;
      }
      if (v24 == 3) {
        *((void *)v48 + 1) = 0;
      }
    }
    else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
    {
      uint64_t v39 = *((void *)v48 + 2);
      if ((v39 & 4) != 0)
      {
        unint64_t v37 = v39 & 0xFFFFFFFFFFFFFFF8;
        if (v37) {
          goto LABEL_63;
        }
      }
    }
  }
LABEL_30:
  uint64_t v25 = a3;
  while (1)
  {
    unsigned int v26 = **(unsigned __int16 **)(v25 + 16);
    BOOL v17 = v26 > 0x17;
    int v27 = (1 << v26) & 0x83E000;
    if (v17 || v27 == 0) {
      break;
    }
    uint64_t v25 = *(void *)(v25 + 8);
    if (v25 == v11) {
      goto LABEL_36;
    }
  }
  int v29 = *(unsigned __int8 **)(v25 + 56);
  uint64_t v48 = v29;
  if (v29)
  {
    llvm::MetadataTracking::track((uint64_t)&v48, v29, 2);
    int v29 = v48;
  }
LABEL_39:
  uint64_t v30 = *(void *)(**(void **)a1 + 8) + 312192;
  uint64_t v31 = *(llvm::MachineFunction **)(a2 + 32);
  BOOL v52 = v29;
  if (v29) {
    llvm::MetadataTracking::track((uint64_t)&v52, v29, 2);
  }
  unint64_t v32 = llvm::MachineFunction::CreateMachineInstr(v31, v30, &v52, 0);
  if (v52)
  {
    int v40 = *v52;
    if ((v40 - 4) > 0x1E)
    {
      if ((v40 - 3) >= 0xFFFFFFFE) {
        unsigned int v43 = v52;
      }
      else {
        unsigned int v43 = 0;
      }
      if ((v40 - 3) < 0xFFFFFFFE)
      {
        if (v40 == 3) {
          *((void *)v52 + 1) = 0;
        }
        goto LABEL_42;
      }
      unint64_t v42 = (unint64_t)(v43 + 8);
    }
    else
    {
      if ((v52[1] & 0x7F) != 2 && !*((_DWORD *)v52 + 3)) {
        goto LABEL_42;
      }
      uint64_t v41 = *((void *)v52 + 2);
      if ((v41 & 4) == 0) {
        goto LABEL_42;
      }
      unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
      if (!v42) {
        goto LABEL_42;
      }
    }
    unsigned int v49 = &v52;
    sub_1CC5FA668(v42 + 16, &v49);
  }
LABEL_42:
  if (v11 != a3 && (*(_WORD *)(a3 + 44) & 4) != 0) {
    *((_WORD *)v32 + 22) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(a2 + 40), (uint64_t *)a3, (uint64_t)v32);
  LODWORD(v49) = 1;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  llvm::MachineInstr::addOperand(v32, v31, (const llvm::MachineOperand *)&v49);
  LODWORD(v49) = 1;
  uint64_t v50 = 0;
  uint64_t v51 = a5;
  llvm::MachineInstr::addOperand(v32, v31, (const llvm::MachineOperand *)&v49);
  LODWORD(v49) = 1;
  uint64_t v50 = 0;
  uint64_t v51 = a4;
  llvm::MachineInstr::addOperand(v32, v31, (const llvm::MachineOperand *)&v49);
  if (v48)
  {
    int v33 = *v48;
    if ((v33 - 4) > 0x1E)
    {
      if ((v33 - 3) >= 0xFFFFFFFE) {
        uint64_t v34 = v48;
      }
      else {
        uint64_t v34 = 0;
      }
      if ((v33 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v35 = (unint64_t)(v34 + 8);
LABEL_55:
        unsigned int v49 = &v48;
        sub_1CC5FA668(v35 + 16, &v49);
        goto LABEL_49;
      }
      if (v33 == 3) {
        *((void *)v48 + 1) = 0;
      }
    }
    else if ((v48[1] & 0x7F) == 2 || *((_DWORD *)v48 + 3))
    {
      uint64_t v38 = *((void *)v48 + 2);
      if ((v38 & 4) != 0)
      {
        unint64_t v35 = v38 & 0xFFFFFFFFFFFFFFF8;
        if (v35) {
          goto LABEL_55;
        }
      }
    }
  }
LABEL_49:
  *(_DWORD *)(v10 + 8) |= a4;
}

void *sub_1CBC2C1E0(void *result)
{
  uint64_t v1 = result[4] + 320;
  if ((void *)v1 != result)
  {
    do
    {
      for (uint64_t i = result[7]; (void *)i != result + 6; uint64_t i = *(void *)(i + 8))
      {
        if (**(_WORD **)(i + 16) != 544) {
          return result;
        }
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            uint64_t i = *(void *)(i + 8);
        }
      }
      uint64_t result = (void *)result[1];
    }
    while (result != (void *)v1);
  }
  return *(void **)v1;
}

void sub_1CBC2C244(uint64_t a1, uint64_t a2, void *a3, unsigned int a4, unsigned int a5, int a6)
{
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = (void *)(a2 + 48);
  if ((void *)(a2 + 48) == a3) {
    uint64_t v13 = sub_1CBC2C878(a2);
  }
  else {
    uint64_t v13 = a3;
  }
  if (v13 != v12)
  {
    unint64_t v14 = (unsigned __int8 *)v13[7];
    uint64_t v59 = v14;
    if (v14) {
      llvm::MetadataTracking::track((uint64_t)&v59, v14, 2);
    }
    goto LABEL_20;
  }
  uint64_t v59 = 0;
  unint64_t v15 = *v12 & 0xFFFFFFFFFFFFFFF8;
  if (v12 != (void *)v15)
  {
    uint64_t v16 = *(void *)(*(void *)(v15 + 16) + 8);
    if ((*(_WORD *)(v15 + 44) & 0xC) != 0 && (*(_WORD *)(v15 + 44) & 4) == 0)
    {
      if ((v16 & 0x400) == 0)
      {
        while ((*(_WORD *)(v15 + 44) & 8) != 0)
        {
          unint64_t v15 = *(void *)(v15 + 8);
          if ((*(unsigned char *)(*(void *)(v15 + 16) + 9) & 4) != 0) {
            goto LABEL_13;
          }
        }
        goto LABEL_34;
      }
    }
    else if ((v16 & 0x400) == 0)
    {
      goto LABEL_34;
    }
LABEL_13:
    int v18 = *(unsigned __int8 ***)a1;
    uint64_t v19 = *(void *)(**(void **)(a1 + 8) + 8) + 48 * a5;
    if ((MEMORY[0x2C] & 4) != 0)
    {
      unint64_t v20 = *(llvm::MachineFunction **)(a2 + 32);
      uint64_t v21 = *v18;
      uint64_t v63 = v21;
      if (v21) {
        llvm::MetadataTracking::track((uint64_t)&v63, v21, 2);
      }
      unint64_t v22 = llvm::MachineFunction::CreateMachineInstr(v20, v19, &v63, 0);
      if (!v63) {
        goto LABEL_17;
      }
      int v53 = *v63;
      if ((v53 - 4) > 0x1E)
      {
        if ((v53 - 3) >= 0xFFFFFFFE) {
          uint64_t v57 = v63;
        }
        else {
          uint64_t v57 = 0;
        }
        if ((v53 - 3) < 0xFFFFFFFE)
        {
          if (v53 == 3) {
            *((void *)v63 + 1) = 0;
          }
          goto LABEL_17;
        }
        unint64_t v55 = (unint64_t)(v57 + 8);
      }
      else
      {
        if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
          goto LABEL_17;
        }
        uint64_t v54 = *((void *)v63 + 2);
        if ((v54 & 4) == 0) {
          goto LABEL_17;
        }
        unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
        if (!v55) {
          goto LABEL_17;
        }
      }
      uint64_t v60 = &v63;
      sub_1CC5FA668(v55 + 16, &v60);
LABEL_17:
      if ((MEMORY[0x2C] & 4) != 0) {
        *((_WORD *)v22 + 22) |= 0xCu;
      }
      unsigned int v23 = (uint64_t *)(a2 + 40);
      int v24 = 0;
      goto LABEL_33;
    }
    unsigned int v47 = *(llvm::MachineFunction **)(a2 + 32);
    uint64_t v48 = *v18;
    uint64_t v63 = v48;
    if (v48) {
      llvm::MetadataTracking::track((uint64_t)&v63, v48, 2);
    }
    unsigned int v49 = llvm::MachineFunction::CreateMachineInstr(v47, v19, &v63, 0);
    if (v63)
    {
      int v50 = *v63;
      if ((v50 - 4) > 0x1E)
      {
        if ((v50 - 3) >= 0xFFFFFFFE) {
          unint64_t v58 = v63;
        }
        else {
          unint64_t v58 = 0;
        }
        if ((v50 - 3) < 0xFFFFFFFE)
        {
          if (v50 == 3) {
            *((void *)v63 + 1) = 0;
          }
          goto LABEL_129;
        }
        unint64_t v52 = (unint64_t)(v58 + 8);
      }
      else
      {
        if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
          goto LABEL_129;
        }
        uint64_t v51 = *((void *)v63 + 2);
        if ((v51 & 4) == 0) {
          goto LABEL_129;
        }
        unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
        if (!v52) {
          goto LABEL_129;
        }
      }
      uint64_t v60 = &v63;
      sub_1CC5FA668(v52 + 16, &v60);
    }
LABEL_129:
    llvm::ilist_traits<llvm::MachineInstr>::addNodeToList((uint64_t *)(a2 + 40), (uint64_t)v49);
    __break(1u);
    return;
  }
LABEL_20:
  if (v13 == *(void **)(v13[3] + 56)) {
    goto LABEL_34;
  }
  unint64_t v25 = *v13 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)(*(void *)(v25 + 16) + 8);
  if ((*(_WORD *)(v25 + 44) & 0xC) == 0 || (*(_WORD *)(v25 + 44) & 4) != 0)
  {
    if ((v26 & 0x400) == 0) {
      goto LABEL_34;
    }
LABEL_26:
    uint64_t v28 = *(void *)(**(void **)(a1 + 8) + 8) + 48 * a5;
    unint64_t v20 = *(llvm::MachineFunction **)(a2 + 32);
    int v29 = **(unsigned __int8 ***)a1;
    uint64_t v63 = v29;
    if (v29) {
      llvm::MetadataTracking::track((uint64_t)&v63, v29, 2);
    }
    unint64_t v22 = llvm::MachineFunction::CreateMachineInstr(v20, v28, &v63, 0);
    if (!v63) {
      goto LABEL_29;
    }
    int v44 = *v63;
    if ((v44 - 4) > 0x1E)
    {
      if ((v44 - 3) >= 0xFFFFFFFE) {
        unsigned int v56 = v63;
      }
      else {
        unsigned int v56 = 0;
      }
      if ((v44 - 3) < 0xFFFFFFFE)
      {
        if (v44 == 3) {
          *((void *)v63 + 1) = 0;
        }
        goto LABEL_29;
      }
      unint64_t v46 = (unint64_t)(v56 + 8);
    }
    else
    {
      if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
        goto LABEL_29;
      }
      uint64_t v45 = *((void *)v63 + 2);
      if ((v45 & 4) == 0) {
        goto LABEL_29;
      }
      unint64_t v46 = v45 & 0xFFFFFFFFFFFFFFF8;
      if (!v46) {
        goto LABEL_29;
      }
    }
    uint64_t v60 = &v63;
    sub_1CC5FA668(v46 + 16, &v60);
LABEL_29:
    if (v13 != v12 && (*((_WORD *)v13 + 22) & 4) != 0) {
      *((_WORD *)v22 + 22) |= 0xCu;
    }
    unsigned int v23 = (uint64_t *)(a2 + 40);
    int v24 = v13;
LABEL_33:
    sub_1CC31973C(v23, v24, (uint64_t)v22);
    LODWORD(v60) = 1;
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v60);
    goto LABEL_34;
  }
  if ((v26 & 0x400) != 0) {
    goto LABEL_26;
  }
  while ((*(_WORD *)(v25 + 44) & 8) != 0)
  {
    unint64_t v25 = *(void *)(v25 + 8);
    if ((*(unsigned char *)(*(void *)(v25 + 16) + 9) & 4) != 0) {
      goto LABEL_26;
    }
  }
LABEL_34:
  if (*(unsigned char *)(*(void *)(a1 + 16) + 363)) {
    BOOL v30 = a6 == 0;
  }
  else {
    BOOL v30 = 0;
  }
  if (v30) {
    unsigned int v31 = 0;
  }
  else {
    unsigned int v31 = **(_DWORD **)(a1 + 24);
  }
  uint64_t v32 = *(void *)(**(void **)(a1 + 8) + 8) + 312192;
  int v33 = *(llvm::MachineFunction **)(a2 + 32);
  uint64_t v63 = v59;
  if (v59) {
    llvm::MetadataTracking::track((uint64_t)&v63, v59, 2);
  }
  uint64_t v34 = llvm::MachineFunction::CreateMachineInstr(v33, v32, &v63, 0);
  if (v63)
  {
    int v40 = *v63;
    if ((v40 - 4) > 0x1E)
    {
      if ((v40 - 3) >= 0xFFFFFFFE) {
        unsigned int v43 = v63;
      }
      else {
        unsigned int v43 = 0;
      }
      if ((v40 - 3) < 0xFFFFFFFE)
      {
        if (v40 == 3) {
          *((void *)v63 + 1) = 0;
        }
        goto LABEL_43;
      }
      unint64_t v42 = (unint64_t)(v43 + 8);
    }
    else
    {
      if ((v63[1] & 0x7F) != 2 && !*((_DWORD *)v63 + 3)) {
        goto LABEL_43;
      }
      uint64_t v41 = *((void *)v63 + 2);
      if ((v41 & 4) == 0) {
        goto LABEL_43;
      }
      unint64_t v42 = v41 & 0xFFFFFFFFFFFFFFF8;
      if (!v42) {
        goto LABEL_43;
      }
    }
    uint64_t v60 = &v63;
    sub_1CC5FA668(v42 + 16, &v60);
  }
LABEL_43:
  if (v13 != v12 && (*((_WORD *)v13 + 22) & 4) != 0) {
    *((_WORD *)v34 + 22) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(a2 + 40), v13, (uint64_t)v34);
  LODWORD(v60) = 1;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  llvm::MachineInstr::addOperand(v34, v33, (const llvm::MachineOperand *)&v60);
  uint64_t v35 = **(_DWORD **)(a1 + 32) | v31;
  LODWORD(v60) = 1;
  uint64_t v61 = 0;
  uint64_t v62 = v35;
  llvm::MachineInstr::addOperand(v34, v33, (const llvm::MachineOperand *)&v60);
  LODWORD(v60) = 1;
  uint64_t v61 = 0;
  uint64_t v62 = a4;
  llvm::MachineInstr::addOperand(v34, v33, (const llvm::MachineOperand *)&v60);
  *(_DWORD *)(v11 + 8) |= a4;
  if (v59)
  {
    int v36 = *v59;
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        unint64_t v37 = v59;
      }
      else {
        unint64_t v37 = 0;
      }
      if ((v36 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v38 = (unint64_t)(v37 + 8);
LABEL_60:
        uint64_t v60 = &v59;
        sub_1CC5FA668(v38 + 16, &v60);
        return;
      }
      if (v36 == 3) {
        *((void *)v59 + 1) = 0;
      }
    }
    else if ((v59[1] & 0x7F) == 2 || *((_DWORD *)v59 + 3))
    {
      uint64_t v39 = *((void *)v59 + 2);
      if ((v39 & 4) != 0)
      {
        unint64_t v38 = v39 & 0xFFFFFFFFFFFFFFF8;
        if (v38) {
          goto LABEL_60;
        }
      }
    }
  }
}

void *sub_1CBC2C878(uint64_t a1)
{
  uint64_t result = (void *)(a1 + 48);
  int v3 = -1;
  unint64_t v4 = result;
  do
  {
    unint64_t v4 = (void *)v4[1];
    ++v3;
  }
  while (v4 != result);
  if (v3)
  {
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v5 = *(void *)(a1 + 56);
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
    while (1)
    {
      if (v5 == v7) {
        return result;
      }
      uint64_t v8 = (void *)v7;
      char v9 = *(_WORD *)(v7 + 44);
      int v10 = v9 & 0xC;
      int v11 = v9 & 4;
      uint64_t v12 = v8[2];
      uint64_t v13 = *(void *)(v12 + 8);
      if (v10) {
        BOOL v14 = v11 == 0;
      }
      else {
        BOOL v14 = 0;
      }
      if (v14)
      {
        unint64_t v15 = v8;
        if ((v13 & 0x200) != 0) {
          goto LABEL_12;
        }
        while ((*((_WORD *)v15 + 22) & 8) != 0)
        {
          unint64_t v15 = (void *)v15[1];
          if ((*(unsigned char *)(v15[2] + 9) & 2) != 0) {
            goto LABEL_12;
          }
        }
      }
      else if ((v13 & 0x200) != 0)
      {
        goto LABEL_12;
      }
      if ((*(unsigned char *)(v12 + 16) & 0x40) == 0) {
        return result;
      }
LABEL_12:
      unint64_t v7 = *v8 & 0xFFFFFFFFFFFFFFF8;
      uint64_t result = v8;
    }
  }
  return result;
}

uint64_t sub_1CBC2C914()
{
  char v3 = 1;
  unint64_t v4 = &v3;
  int v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Assume whether or not unknown functions have side effects";
  v1.n128_u64[1] = 57;
  sub_1CBA9E5B0((llvm::cl::Option *)&unk_1EBCC1FD0, "agx3-frag-sync-func-calls-side-effects", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1CB9064B0, &unk_1EBCC1FD0, &dword_1CB82C000);
}

void sub_1CBC2C9A0(llvm::Pass *this)
{
  *(void *)this = &unk_1F25FC628;
  int v2 = (char *)*((void *)this + 31);
  if (v2 != (char *)this + 264) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  char v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }

  llvm::Pass::~Pass(this);
}

void sub_1CBC2CA68(llvm::Pass *this)
{
  *(void *)this = &unk_1F25FC628;
  int v2 = (char *)*((void *)this + 31);
  if (v2 != (char *)this + 264) {
    free(v2);
  }
  *(void *)this = &unk_1F260E110;
  char v3 = (char *)*((void *)this + 22);
  if (v3 != (char *)this + 192) {
    free(v3);
  }
  unint64_t v4 = (char *)*((void *)this + 13);
  if (v4 != (char *)this + 120) {
    free(v4);
  }
  uint64_t v5 = (char *)*((void *)this + 4);
  if (v5 != (char *)this + 48) {
    free(v5);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBC2CB44()
{
  return "AGX3 verifier of memory operands for instructions";
}

uint64_t sub_1CBC2CB54(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 256) = 0;
  uint64_t v2 = *(void *)(a2 + 328);
  if (v2 == a2 + 320) {
    return 0;
  }
  do
  {
    for (uint64_t i = *(void *)(v2 + 56); i != v2 + 48; uint64_t i = *(void *)(i + 8))
    {
      if ((*(unsigned char *)(*(void *)(i + 16) + 18) & 0x40) == 0) {
        goto LABEL_15;
      }
      unint64_t v5 = *(void *)(i + 48);
      if (v5 >= 8)
      {
        if ((v5 & 7) == 0)
        {
          *(void *)(i + 48) = v5 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_15;
        }
        uint64_t v6 = (_DWORD *)(v5 & 0xFFFFFFFFFFFFFFF8);
        BOOL v7 = (*(void *)(i + 48) & 7) != 3 || v6 == 0;
        if (!v7 && *v6) {
          goto LABEL_15;
        }
      }
      unint64_t v8 = *(unsigned int *)(a1 + 256);
      if (v8 >= *(unsigned int *)(a1 + 260)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(void *)(*(void *)(a1 + 248) + 8 * v8) = i;
      ++*(_DWORD *)(a1 + 256);
LABEL_15:
      if ((*(unsigned char *)i & 4) == 0)
      {
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
    }
    uint64_t v2 = *(void *)(v2 + 8);
  }
  while (v2 != a2 + 320);
  uint64_t v9 = *(unsigned int *)(a1 + 256);
  if (v9)
  {
    int v10 = *(llvm::MachineInstr ***)(a1 + 248);
    uint64_t v11 = 8 * v9;
    do
    {
      uint64_t v12 = *v10;
      uint64_t v13 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
      BOOL v14 = (void *)*((void *)v13 + 4);
      if (*((void *)v13 + 3) - (void)v14 > 0x1EuLL)
      {
        qmemcpy(v14, "Instruction should have MemOp: ", 31);
        *((void *)v13 + 4) += 31;
      }
      else
      {
        llvm::raw_ostream::write(v13, "Instruction should have MemOp: ", 0x1FuLL);
      }
      llvm::MachineInstr::dump(v12);
      ++v10;
      v11 -= 8;
    }
    while (v11);
    if (*(_DWORD *)(a1 + 256)) {
      llvm::report_fatal_error((llvm *)"Some instructions should have memory operands", (const llvm::Twine *)1);
    }
  }
  return 0;
}

uint64_t sub_1CBC2CCF8(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned __int16 *)a1[2];
  if ((v2[10] & 4) != 0)
  {
    uint64_t v7 = *(void *)(*(void *)(a1[3] + 32) + 16);
    uint64_t v8 = *v2;
    uint64_t v9 = sub_1CBE52E8C(*v2);
    if ((v9 & 0xFF00000000) == 0) {
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
    }
    int v10 = v9;
    uint64_t v3 = 0x200000000;
    uint64_t v4 = 5;
    switch((int)v9)
    {
      case 1:
      case 2:
      case 7:
      case 8:
      case 9:
      case 10:
      case 19:
      case 21:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 76:
      case 77:
      case 81:
      case 82:
      case 84:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 95:
      case 96:
      case 109:
      case 110:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
      case 148:
      case 150:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 186:
      case 187:
      case 195:
      case 196:
      case 201:
      case 202:
      case 203:
        uint64_t v11 = a1[4];
        if (*(unsigned char *)v11 == 7 && *(_DWORD *)(v11 + 16) == 64)
        {
          if ((int v14 = sub_1CBDA6464(v8, 0x2Eu), (v10 - 190) >= 4) && (v10 - 105) > 1
            || (v20 = v14, v21 = sub_1CBDA6464(v8, 0x57u), int v14 = v20, v21))
          {
            if (v14)
            {
              uint64_t v4 = 0;
              goto LABEL_32;
            }
          }
        }
        int v12 = sub_1CBC2D2EC((uint64_t)a1, 0, (void *)(a2 + 8));
        uint64_t v4 = qword_1CDC7F730[v12];
        uint64_t v3 = qword_1CDC7F770[v12];
        return v3 | v4;
      case 3:
      case 123:
      case 146:
      case 151:
      case 194:
        return v3 | v4;
      case 4:
      case 5:
      case 6:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 22:
      case 51:
      case 52:
      case 53:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 83:
      case 99:
      case 108:
      case 111:
      case 124:
      case 149:
      case 168:
      case 169:
        goto LABEL_36;
      case 11:
      case 197:
      case 204:
        if (*(unsigned char *)(v7 + 303)) {
          uint64_t v4 = 2;
        }
        else {
          uint64_t v4 = 3;
        }
        goto LABEL_32;
      case 18:
      case 20:
      case 107:
        uint64_t v3 = 0;
        uint64_t v4 = 2 * *(unsigned __int8 *)(v7 + 303);
        return v3 | v4;
      case 61:
      case 62:
      case 92:
      case 97:
      case 105:
      case 106:
      case 190:
      case 191:
      case 192:
        goto LABEL_10;
      case 63:
      case 64:
      case 93:
      case 94:
      case 98:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 121:
      case 122:
      case 193:
        uint64_t v3 = 0;
LABEL_10:
        uint64_t v4 = 3;
        return v3 | v4;
      case 78:
      case 79:
      case 80:
      case 164:
      case 165:
      case 166:
      case 167:
        goto LABEL_29;
      case 85:
        uint64_t v3 = 0;
        uint64_t v4 = 2;
        if (!*(unsigned char *)(v7 + 303)) {
          uint64_t v4 = 3;
        }
        return v3 | v4;
      case 147:
        uint64_t v3 = 0;
        uint64_t v4 = 1;
        return v3 | v4;
      case 188:
        unsigned int v15 = sub_1CBDB2780(v8, 46, 0) - 79;
        if (v15 >= 3) {
          goto LABEL_46;
        }
        uint64_t v3 = qword_1CDC7F7B0[v15];
LABEL_36:
        uint64_t v4 = 4;
        return v3 | v4;
      case 189:
        uint64_t v3 = 0;
        goto LABEL_36;
      case 198:
        uint64_t v4 = 2 * *(unsigned __int8 *)(v7 + 303);
LABEL_32:
        uint64_t v3 = 0x200000000;
        return v3 | v4;
      case 199:
        if (*(unsigned char *)(v7 + 303)) {
          uint64_t v4 = 2;
        }
        else {
          uint64_t v4 = 3;
        }
        goto LABEL_24;
      case 200:
        if (*(unsigned char *)(v7 + 303))
        {
LABEL_29:
          uint64_t v3 = 0;
          uint64_t v4 = 2;
          return v3 | v4;
        }
        int v16 = sub_1CBDA6464(v8, 0x83u);
        if (v16 < 0) {
          goto LABEL_46;
        }
        uint64_t v17 = a1[4];
        int v18 = (unsigned char *)(v17 + 32 * (unsigned __int16)v16);
        if ((v8 - 9209) >= 2)
        {
          if (v8 != 9211)
          {
LABEL_46:
            uint64_t v3 = 0;
            goto LABEL_3;
          }
          int v19 = *v18;
          if (v19 == 7 && *(_DWORD *)(v17 + 32 * (unsigned __int16)v16 + 16) == 64)
          {
            uint64_t v4 = 0;
            uint64_t v3 = 0;
          }
          else
          {
            uint64_t v3 = 0;
            uint64_t v4 = 5;
            if (!v19) {
              uint64_t v4 = 3;
            }
          }
        }
        else
        {
          uint64_t v3 = 0;
          uint64_t v4 = 5;
          if (*v18 == 1) {
            uint64_t v4 = 0;
          }
        }
        break;
      default:
        uint64_t v4 = 2 * *(unsigned __int8 *)(v7 + 303);
LABEL_24:
        uint64_t v3 = 0x100000000;
        return v3 | v4;
    }
  }
  else
  {
    uint64_t v3 = 0x100000000;
LABEL_3:
    uint64_t v4 = 5;
  }
  return v3 | v4;
}

uint64_t sub_1CBC2D2EC(uint64_t a1, unsigned int a2, void *a3)
{
  if (llvm::MachineInstr::getNumExplicitOperands(a1) <= a2) {
    return 0;
  }
  uint64_t v6 = **(unsigned __int16 **)(a1 + 16);
  if (word_1CDF77000[dword_1CDF6DEF0[v6] + (unsigned __int16)a2] == 62
    || (uint64_t v7 = *(void *)(a1 + 32),
        uint64_t v8 = (unsigned int *)(v7 + 32 * a2),
        unsigned int v9 = *v8,
        int v10 = *v8,
        unsigned int v11 = v8[4],
        v10 == 7)
    && (v11 & 0xFFFFFFFE) == 0x56)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    if ((v12 & 7) != 0)
    {
      unint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      *(void *)(a1 + 48) = v13;
    }
    if ((*(_WORD *)(v13 + 32) & 2) != 0) {
      return 7;
    }
    else {
      return 6;
    }
  }
  if (v10)
  {
    if (v10 == 7 && v11 - 81 <= 4)
    {
      if ((v9 & 0x20000) != 0) {
        int v16 = 3327;
      }
      else {
        int v16 = 3839;
      }
      if ((v16 & (v9 >> 8)) != 0) {
        return 5;
      }
      if ((v9 & 0x10000) == 0
        || sub_1CBDA6464(**(unsigned __int16 **)(a1 + 16), 0x5Eu) != a2
        && sub_1CBDA6464(v6, 0x5Fu) != a2)
      {
        return 4;
      }
    }
    return 0;
  }
  unsigned int v17 = *(_DWORD *)(v7 + 32 * a2 + 4);
  if (!v17) {
    return 0;
  }
  if ((v17 & 0x80000000) != 0)
  {
    uint64_t v24 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 40) + 24)
                    + 16 * (v17 & 0x7FFFFFFF));
    if ((v24 & 4) != 0) {
      unint64_t v25 = 0;
    }
    else {
      unint64_t v25 = (__int16 ***)(v24 & 0xFFFFFFFFFFFFFFF8);
    }
    if (v25 != &off_1E66AF900 && v25 != &off_1E66AF938) {
      goto LABEL_42;
    }
    return 0;
  }
  uint64_t v18 = a3[6];
  uint64_t v19 = *(unsigned int *)(*a3 + 24 * v17 + 4);
  if (*(_WORD *)(v18 + 2 * v19))
  {
    unsigned __int16 v20 = *(_WORD *)(v18 + 2 * v19) + v17;
    int v21 = (_WORD *)(a3[10] + 2 * *(unsigned int *)(*a3 + 24 * v17 + 12));
    unint64_t v22 = (unsigned __int16 *)(v18 + 2 * v19 + 2);
    while (*v21 != 1)
    {
      int v23 = *v22++;
      v20 += v23;
      ++v21;
      if (!v23) {
        goto LABEL_30;
      }
    }
    if (v20) {
      unsigned int v17 = v20;
    }
  }
LABEL_30:
  if (v17 - 1 > 0x206 || ((byte_1CDEF2F4C[(unint64_t)v17 >> 3] >> (v17 & 7)) & 1) == 0) {
    return 0;
  }
LABEL_42:
  if ((v9 & 0x1000000) == 0) {
    return 1;
  }
  uint64_t v27 = sub_1CBE52E8C(**(unsigned __int16 **)(a1 + 16));
  if ((v27 & 0xFF00000000) == 0) {
    return 2;
  }
  int v28 = v27;
  uint64_t result = 3;
  if ((v28 - 64) > 0x3A || ((1 << (v28 - 64)) & 0x60001F460000001) == 0)
  {
    unsigned int v29 = v28 - 147;
    if (v29 > 0x14 || ((1 << v29) & 0x1E0001) == 0) {
      return 2;
    }
  }
  return result;
}

uint64_t sub_1CBC2D588(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  unint64_t v2 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v2 || (*(unsigned char *)v2 & 4) == 0)
  {
    while ((*(_WORD *)(v2 + 44) & 4) != 0)
      unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
  }
  if (v2 == v1) {
    return 0;
  }
  while (1)
  {
    uint64_t v3 = *(unsigned __int16 **)(v2 + 16);
    uint64_t v4 = *((void *)v3 + 1);
    if ((*(_WORD *)(v2 + 44) & 0xC) != 0 && (*(_WORD *)(v2 + 44) & 4) == 0)
    {
      unint64_t v9 = v2;
      if ((v4 & 0x20) != 0) {
        goto LABEL_11;
      }
      while ((*(_WORD *)(v9 + 44) & 8) != 0)
      {
        unint64_t v9 = *(void *)(v9 + 8);
        if ((*(unsigned char *)(*(void *)(v9 + 16) + 8) & 0x20) != 0) {
          goto LABEL_11;
        }
      }
      if ((v4 & 0x400) != 0) {
        goto LABEL_11;
      }
      unint64_t v10 = v2;
      while ((*(_WORD *)(v10 + 44) & 8) != 0)
      {
        unint64_t v10 = *(void *)(v10 + 8);
        if ((*(unsigned char *)(*(void *)(v10 + 16) + 9) & 4) != 0) {
          goto LABEL_11;
        }
      }
    }
    else if ((v4 & 0x420) != 0)
    {
      goto LABEL_11;
    }
    if ((v3[8] & 0x40) == 0) {
      return 0;
    }
LABEL_11:
    int v6 = *v3;
    uint64_t v7 = sub_1CBE52E8C(v6);
    if ((v7 & 0xFF00000000) == 0) {
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
    }
    if (v7 == 5) {
      return *(void *)(*(void *)(v2 + 32) + 32 * sub_1CBDA6464(v6, 0x24u) + 16);
    }
    unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
    if (!v2 || (*(unsigned char *)v2 & 4) == 0)
    {
      while ((*(_WORD *)(v2 + 44) & 4) != 0)
        unint64_t v2 = *(void *)v2 & 0xFFFFFFFFFFFFFFF8;
    }
    if (v2 == v1) {
      return 0;
    }
  }
}

BOOL sub_1CBC2D6DC(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v8 = **(unsigned __int16 **)(a2 + 16);
  unsigned int v9 = sub_1CBDA6464(v8, 0x2Eu);
  uint64_t v10 = *a1;
  if ((*(unsigned char *)(*(void *)(a2 + 32) + 32 * v9 + 19) & *a1) != 0)
  {
    BOOL v12 = 1;
  }
  else
  {
    uint64_t v11 = sub_1CBE52E8C(v8);
    if ((v11 & 0xFF00000000) == 0) {
LABEL_53:
    }
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
    BOOL v12 = 1;
    BOOL v13 = v11 > 0x16 || ((1 << v11) & 0x500008) == 0;
    if (v13) {
      BOOL v12 = v11 == 107;
    }
  }
  uint64_t v14 = *(unsigned int *)(a2 + 40);
  if (v14)
  {
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    unsigned int v17 = (void *)(a3 + 8);
    while (1)
    {
      if (sub_1CBC2D2EC(a2, v15, v17) - 4 >= 0xFFFFFFFD)
      {
        uint64_t v18 = *(unsigned __int16 **)(a2 + 16);
        uint64_t v19 = *v18;
        uint64_t v20 = sub_1CBE52E8C(*v18);
        uint64_t v21 = v20 & 0xFF00000000;
        if (a4)
        {
          if (!v21) {
            goto LABEL_53;
          }
          if ((v20 - 103) >= 2 && (v20 - 164) >= 4) {
            goto LABEL_12;
          }
        }
        else if (!v21)
        {
          goto LABEL_53;
        }
        if (v20 != 147) {
          break;
        }
        unsigned int v33 = sub_1CBDA6464(v19, 0x11u);
        uint64_t v34 = *(void *)(a2 + 32);
        if (*(unsigned char *)(v34 + 32 * v33)) {
          break;
        }
        unsigned int v35 = *(_DWORD *)(v34 + 32 * v33 + 4) - 7;
        BOOL v36 = v35 > 0x3D;
        uint64_t v37 = (1 << v35) & 0x200003C102000203;
        if (!v36 && v37 != 0) {
          break;
        }
      }
LABEL_12:
      if (++v15 == v14)
      {
        uint64_t v10 = *a1;
        goto LABEL_32;
      }
    }
    if (v15 >= llvm::MachineInstr::getNumExplicitOperands(a2)) {
      goto LABEL_52;
    }
    if ((word_1CDF77000[dword_1CDF6DEF0[v19] + (unsigned __int16)v15] & 0xFFFB) == 0x3A)
    {
      unsigned int v23 = v15 + 2;
    }
    else
    {
      uint64_t v22 = *(void *)(a2 + 32);
      if ((*(_DWORD *)(v22 + 32 * v15) & 0x10000FF) == 0x1000000)
      {
        unsigned int v26 = *((unsigned __int8 *)v18 + 4);
        if ((v18[4] & 2) == 0 || (int v30 = *(_DWORD *)(a2 + 40), v30 == v26))
        {
          int v27 = *((unsigned __int8 *)v18 + 4);
        }
        else
        {
          int v31 = v30 - 1;
          int v27 = *((unsigned __int8 *)v18 + 4);
          do
          {
            int v32 = *(_DWORD *)(v22 + 32 * v26);
            if ((v32 & 0x10000FF) != 0x1000000) {
              break;
            }
            v27 += (v32 & 0x2000000) == 0;
            if (v31 == v26) {
              break;
            }
            ++v26;
          }
          while ((v32 & 0x2000000) == 0);
        }
        unsigned int v23 = v27 + v15;
      }
      else
      {
        if (*(_DWORD *)(v22 + 32 * v15) && *(_DWORD *)(v22 + 32 * v15) != 7)
        {
LABEL_52:
          unsigned int v23 = -1;
          goto LABEL_26;
        }
        unsigned int v23 = v15 + 1;
      }
    }
LABEL_26:
    unint64_t v24 = *(void *)(*(void *)(a2 + 32) + 32 * v23 + 16);
    BOOL v13 = ((v24 >> 20) & 0xF) == 0;
    uint64_t v25 = 1 << (((v24 >> 20) & 0xFu) - 1);
    if (v13) {
      uint64_t v25 = 0;
    }
    v16 |= v25;
    goto LABEL_12;
  }
  uint64_t v16 = 0;
LABEL_32:
  if (v12) {
    uint64_t v28 = 0;
  }
  else {
    uint64_t v28 = v10;
  }
  *a1 = v28 | v16;
  return v12;
}

void sub_1CBC2D9C8(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  int v5 = 4;
  int v6 = 1;
  if (((1 << a3) & 0xF531) == 0)
  {
    if (((1 << a3) & 0xCA) == 0) {
      goto LABEL_5;
    }
    int v6 = 2;
  }
  if (a3 <= 0xF && ((1 << a3) & 0xF100) != 0)
  {
    a2 = 15;
LABEL_6:
    unsigned int v8 = __clz(__rbit32(a2)) & 0x1F;
    unsigned int v9 = a1 + v8 * v6;
    unsigned int v10 = (32 - __clz(a2) - v8) * v6;
    if ((a1 & 0xFF00000000) != 0) {
      unsigned int v11 = v9;
    }
    else {
      unsigned int v11 = 0;
    }
    if ((a1 & 0xFF00000000) != 0) {
      int v12 = v10;
    }
    else {
      int v12 = 256;
    }
    uint64_t v13 = *(void *)(a5 + 48);
    if (!v13)
    {
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a5 + 8) + 216))(*(void *)(a5 + 8), a5 + 128, a5);
      *(void *)(a5 + 48) = v13;
    }
    sub_1CBBDF994(v13, v11, v12, a5);
  }
  int v5 = v6;
LABEL_5:
  int v6 = v5;
  goto LABEL_6;
}

void sub_1CBC2DBFC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v6 = a3;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  unsigned int v10 = (uint64_t *)*(unsigned int *)(a1 + 4);
  if ((v10 & 0x80000000) != 0) {
    unsigned int v11 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
    unsigned int v11 = (uint64_t *)(*(void *)(a2 + 272) + 8 * (void)v10);
  }
  uint64_t v12 = *v11;
  if ((*(unsigned char *)(v12 + 3) & 1) == 0) {
    uint64_t v12 = *(void *)(v12 + 24);
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (**(_WORD **)(v13 + 16) != 121)
  {
    BOOL v14 = (a3 & 0xFF00000000) != 0;
    goto LABEL_7;
  }
  BOOL v14 = (a3 & 0xFF00000000) != 0;
  if ((a3 & 0xFF00000000) != 0)
  {
    uint64_t v22 = *(void *)(*(void *)(v13 + 32) + 48);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 32);
      if ((_UNKNOWN *)v23 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v45, (const llvm::detail::DoubleAPFloat *)(v22 + 32));
      }
      else
      {
        uint64_t v45 = *(void *)(v22 + 32);
        if ((*(_DWORD *)(v23 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v24 = *(unsigned char *)(v22 + 52);
        int v25 = v24 & 7;
        char v48 = v24 & 0xF;
        int v47 = *(_DWORD *)(v22 + 48);
        BOOL v27 = (v24 & 6) != 0 && v25 != 3;
        if (v25 == 1 || v27)
        {
          uint64_t v29 = *(unsigned int *)(v23 + 8);
          if ((v29 - 64) <= 0xFFFFFF7F) {
            int v30 = v10;
          }
          else {
            int v30 = (uint64_t *)&v46;
          }
          unsigned int v33 = *(uint64_t **)(v22 + 40);
          int v31 = (uint64_t *)(v22 + 40);
          int v32 = v33;
          if ((*(_DWORD *)(*(v31 - 1) + 8) - 64) < 0xFFFFFF80) {
            int v31 = v32;
          }
          if (v29 <= 0xFFFFFFBF)
          {
            unint64_t v34 = (unint64_t)(v29 + 64) >> 6;
            do
            {
              uint64_t v35 = *v31++;
              *v30++ = v35;
              --v34;
            }
            while (v34);
          }
        }
      }
      llvm::APFloat::convert((uint64_t)&v44, &unk_1CFB2E308, 1, &v43);
      if (v6 == 1)
      {
        if ((_UNKNOWN *)v45 == &unk_1CFB2E344) {
          uint64_t v39 = v46;
        }
        else {
          uint64_t v39 = &v44;
        }
        char v40 = *((unsigned char *)v39 + 28);
        if ((v40 & 7) != 1)
        {
          if ((v40 & 7) == 0)
          {
            if ((v40 & 8) != 0) {
              unsigned int v38 = 0;
            }
            else {
              unsigned int v38 = 1023;
            }
LABEL_76:
            *(_DWORD *)a5 = 1;
            *(void *)(a5 + 8) = 0;
            *(void *)(a5 + 16) = v38;
            *(unsigned char *)(a5 + 32) = 1;
            if ((_UNKNOWN *)v45 == &unk_1CFB2E344)
            {
              sub_1CB845718((uint64_t *)&v46);
              return;
            }
            if ((*(_DWORD *)(v45 + 8) - 64) <= 0xFFFFFF7F)
            {
              uint64_t v16 = (uint64_t)v46;
              if (v46) {
                goto LABEL_28;
              }
            }
            return;
          }
          float v42 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v44);
          if (v42 >= 15.984)
          {
            unsigned int v38 = 1023;
            goto LABEL_76;
          }
          if (v42 > 0.0)
          {
            unsigned int v38 = (float)(v42 * 64.0) & 0x3FF;
            goto LABEL_76;
          }
        }
      }
      else if (!v6)
      {
        BOOL v36 = &v44;
        if ((_UNKNOWN *)v45 == &unk_1CFB2E344) {
          BOOL v36 = v46;
        }
        char v37 = *((unsigned char *)v36 + 28);
        if ((v37 & 7) != 1)
        {
          if ((v37 & 7) != 0)
          {
            float v41 = llvm::APFloat::convertToFloat((llvm::APFloat *)&v44);
            if (v41 >= 31.984)
            {
              unsigned int v38 = 2047;
            }
            else if (v41 <= -32.0)
            {
              unsigned int v38 = 2048;
            }
            else
            {
              unsigned int v38 = (int)(float)(v41 * 64.0) & 0xFFF;
            }
          }
          else if ((v37 & 8) != 0)
          {
            unsigned int v38 = 2048;
          }
          else
          {
            unsigned int v38 = 2047;
          }
          goto LABEL_76;
        }
      }
      unsigned int v38 = 0;
      goto LABEL_76;
    }
  }
LABEL_7:
  sub_1CC73C824(v10, a2, 0, 0, (uint64_t)&v44);
  if ((_BYTE)v47)
  {
    unsigned int v15 = v45;
    uint64_t v16 = v44;
    if (v45 > 0x40) {
      uint64_t v17 = *(void *)v44;
    }
    else {
      uint64_t v17 = v44 << -(char)v45 >> -(char)v45;
    }
    char v19 = !v14;
    if (v6) {
      char v19 = 1;
    }
    uint64_t v20 = 2048;
    uint64_t v21 = 1984;
    if ((int)v17 <= 31) {
      uint64_t v21 = (unint64_t)(v17 & 0x3F) << 6;
    }
    if ((int)v17 >= -32) {
      uint64_t v20 = v21;
    }
    *(_DWORD *)a5 = 1;
    if ((v19 & 1) == 0) {
      uint64_t v17 = v20;
    }
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = v17;
    *(unsigned char *)(a5 + 32) = 1;
    if (v15 >= 0x41 && v16) {
LABEL_28:
    }
      MEMORY[0x1D25D9CB0](v16, 0x1000C8000313F17);
  }
  else
  {
    sub_1CBC2E00C(*(unsigned int *)(a1 + 4), a2, a5);
    if (!*(unsigned char *)(a5 + 32) || (!v6 ? (char v18 = a4) : (char v18 = 0), v14 && (v18 & 1) == 0))
    {
      *(unsigned char *)a5 = 0;
      *(unsigned char *)(a5 + 32) = 0;
    }
  }
}

uint64_t sub_1CBC2E00C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = result;
  if ((result & 0x80000000) == 0) {
    goto LABEL_2;
  }
  uint64_t v7 = *(void *)(*(void *)(a2 + 24) + 16 * (result & 0x7FFFFFFF) + 8);
  if (v7 && ((*(unsigned char *)(v7 + 3) & 1) != 0 || (uint64_t v7 = *(void *)(v7 + 24)) != 0 && (*(unsigned char *)(v7 + 3) & 1) != 0)) {
    uint64_t v8 = *(void *)(v7 + 8);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void *)(*(void *)(v8 + 24) + 32);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v9 + 16) + 184))(*(void *)(v9 + 16));
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v9 + 16) + 176))(*(void *)(v9 + 16));
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(*(void *)(v8 + 32) + 4);
  if (v13 - 1 <= 0x3FFFFFFE) {
    uint64_t result = *(unsigned int *)(*(void *)(v11 + 264)
  }
                             + 24
                             * (*(unsigned __int16 *)(*llvm::RegisterBankInfo::getMinimalPhysRegClass(v10, v13, v11) + 24)
                              + *(_DWORD *)(v12 + 272)
                              * ((*(void *)(v12 + 248) - *(void *)(v12 + 240)) >> 3)));
  else {
    uint64_t result = llvm::TargetRegisterInfo::getRegSizeInBits(v11, v13, a2);
  }
  int v14 = **(unsigned __int16 **)(v8 + 16);
  if (v14 == 19)
  {
    while (1)
    {
      uint64_t v15 = *(void *)(v8 + 32);
      if ((*(_DWORD *)(v15 + 32) & 0xFFF00) != 0) {
        goto LABEL_2;
      }
      unsigned int v16 = *(_DWORD *)(v15 + 36);
      if ((v16 & 0x80000000) == 0) {
        goto LABEL_2;
      }
      uint64_t v17 = *(void *)(*(void *)(a2 + 24) + 16 * (v16 & 0x7FFFFFFF) + 8);
      if (v17
        && ((*(unsigned char *)(v17 + 3) & 1) != 0 || (uint64_t v17 = *(void *)(v17 + 24)) != 0 && (*(unsigned char *)(v17 + 3) & 1) != 0))
      {
        uint64_t v8 = *(void *)(v17 + 8);
      }
      else
      {
        uint64_t v8 = 0;
      }
      int v14 = **(unsigned __int16 **)(v8 + 16);
      if (v14 != 19) {
        goto LABEL_21;
      }
    }
  }
  unsigned int v16 = v3;
  if ((unint64_t)v3 >> 31) {
LABEL_21:
  }
    char v18 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v16 & 0x7FFFFFFF) + 8);
  else {
    char v18 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v3);
  }
  uint64_t v19 = *v18;
  if (!v19
    || (*(unsigned char *)(v19 + 3) & 1) == 0 && ((uint64_t v19 = *(void *)(v19 + 24)) == 0 || (*(unsigned char *)(v19 + 3) & 1) == 0)
    || (uint64_t v20 = *(void *)(v19 + 8)) == 0
    || **(_WORD **)(v20 + 16) != 313
    || (uint64_t v21 = *(void *)(v20 + 32), *(unsigned char *)(v21 + 32) != 1))
  {
    if (v14 != 119 || result != 16)
    {
      if (v14 != 76 || result != 64) {
        goto LABEL_2;
      }
      uint64_t v27 = *(void *)(v8 + 32);
      uint64_t v28 = *(unsigned int *)(v27 + 36);
      uint64_t v29 = (uint64_t *)((v28 & 0x80000000) != 0
                      ? *(void *)(a2 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8
                      : *(void *)(a2 + 272) + 8 * v28);
      uint64_t v30 = *v29;
      if (!v30) {
        goto LABEL_2;
      }
      if ((*(unsigned char *)(v30 + 3) & 1) == 0)
      {
        uint64_t v30 = *(void *)(v30 + 24);
        if (!v30 || (*(unsigned char *)(v30 + 3) & 1) == 0) {
          goto LABEL_2;
        }
      }
      uint64_t v31 = *(void *)(v30 + 8);
      if (!v31 || **(_WORD **)(v31 + 16) != 313 || *(unsigned char *)(*(void *)(v31 + 32) + 32) != 1) {
        goto LABEL_2;
      }
      uint64_t v32 = *(unsigned int *)(v27 + 68);
      unsigned int v33 = (uint64_t *)((v32 & 0x80000000) != 0
                      ? *(void *)(a2 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8
                      : *(void *)(a2 + 272) + 8 * v32);
      uint64_t v34 = *v33;
      if (!v34) {
        goto LABEL_2;
      }
      if ((*(unsigned char *)(v34 + 3) & 1) == 0)
      {
        uint64_t v34 = *(void *)(v34 + 24);
        if (!v34 || (*(unsigned char *)(v34 + 3) & 1) == 0) {
          goto LABEL_2;
        }
      }
      uint64_t v35 = *(void *)(v34 + 8);
      if (!v35 || **(_WORD **)(v35 + 16) != 313 || *(unsigned char *)(*(void *)(v35 + 32) + 32) != 1) {
        goto LABEL_2;
      }
      if ((v28 & 0x80000000) != 0) {
        BOOL v36 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v28 & 0x7FFFFFFF) + 8);
      }
      else {
        BOOL v36 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v28);
      }
      uint64_t v37 = *v36;
      if (!v37) {
        goto LABEL_98;
      }
      if ((*(unsigned char *)(v37 + 3) & 1) == 0)
      {
        uint64_t v37 = *(void *)(v37 + 24);
        if (!v37) {
          goto LABEL_98;
        }
        if ((*(unsigned char *)(v37 + 3) & 1) == 0)
        {
LABEL_97:
          uint64_t v37 = 0;
          goto LABEL_98;
        }
      }
      uint64_t v37 = *(void *)(v37 + 8);
      if (v37)
      {
        if (**(_WORD **)(v37 + 16) == 313)
        {
          uint64_t v38 = *(void *)(v37 + 32);
          if (*(unsigned char *)(v38 + 32) == 1)
          {
            uint64_t v37 = *(void *)(v38 + 48);
            unint64_t v39 = v37 & 0xFFFFFFFFFFFFFF00;
            uint64_t v37 = v37;
            goto LABEL_99;
          }
        }
        goto LABEL_97;
      }
LABEL_98:
      unint64_t v39 = 0;
LABEL_99:
      if ((v32 & 0x80000000) != 0) {
        uint64_t v51 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v32 & 0x7FFFFFFF) + 8);
      }
      else {
        uint64_t v51 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v32);
      }
      uint64_t v52 = *v51;
      if (!v52) {
        goto LABEL_110;
      }
      if ((*(unsigned char *)(v52 + 3) & 1) == 0)
      {
        uint64_t v52 = *(void *)(v52 + 24);
        if (!v52) {
          goto LABEL_110;
        }
        if ((*(unsigned char *)(v52 + 3) & 1) == 0)
        {
LABEL_109:
          uint64_t v52 = 0;
          goto LABEL_110;
        }
      }
      uint64_t v52 = *(void *)(v52 + 8);
      if (v52)
      {
        if (**(_WORD **)(v52 + 16) == 313)
        {
          uint64_t v53 = *(void *)(v52 + 32);
          if (*(unsigned char *)(v53 + 32) == 1)
          {
            uint64_t v52 = *(void *)(v53 + 48);
            unint64_t v54 = v52 & 0xFFFFFFFFFFFFFF00;
            uint64_t v52 = v52;
            goto LABEL_111;
          }
        }
        goto LABEL_109;
      }
LABEL_110:
      unint64_t v54 = 0;
LABEL_111:
      if ((v37 & 7) != 0 || (uint64_t v55 = v39 | v37, v55 + 4 != (v54 | v52)))
      {
LABEL_2:
        char v5 = 0;
        *(unsigned char *)a3 = 0;
        goto LABEL_3;
      }
      if (v55 >= 0) {
        uint64_t v56 = v55;
      }
      else {
        uint64_t v56 = v55 + 1;
      }
      unint64_t v48 = v56 >> 1;
      unint64_t v49 = HIDWORD(v48);
      int v50 = 775;
LABEL_90:
      *(_DWORD *)a3 = v50;
      *(_DWORD *)(a3 + 4) = v48;
      *(void *)(a3 + 8) = 0;
      *(_DWORD *)(a3 + 16) = 64;
      *(_DWORD *)(a3 + 24) = v49;
      char v5 = 1;
      goto LABEL_3;
    }
    uint64_t v40 = *(unsigned int *)(*(void *)(v8 + 32) + 36);
    if ((v40 & 0x80000000) != 0) {
      float v41 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
    }
    else {
      float v41 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v40);
    }
    uint64_t v42 = *v41;
    if (!v42) {
      goto LABEL_2;
    }
    if ((*(unsigned char *)(v42 + 3) & 1) == 0)
    {
      uint64_t v42 = *(void *)(v42 + 24);
      if (!v42 || (*(unsigned char *)(v42 + 3) & 1) == 0) {
        goto LABEL_2;
      }
    }
    uint64_t v43 = *(void *)(v42 + 8);
    if (!v43 || **(_WORD **)(v43 + 16) != 313 || *(unsigned char *)(*(void *)(v43 + 32) + 32) != 1) {
      goto LABEL_2;
    }
    if ((v40 & 0x80000000) != 0) {
      uint64_t v44 = (uint64_t *)(*(void *)(a2 + 24) + 16 * (v40 & 0x7FFFFFFF) + 8);
    }
    else {
      uint64_t v44 = (uint64_t *)(*(void *)(a2 + 272) + 8 * v40);
    }
    uint64_t v45 = *v44;
    if (!v45) {
      goto LABEL_88;
    }
    if ((*(unsigned char *)(v45 + 3) & 1) == 0)
    {
      uint64_t v45 = *(void *)(v45 + 24);
      if (!v45) {
        goto LABEL_88;
      }
      if ((*(unsigned char *)(v45 + 3) & 1) == 0)
      {
LABEL_87:
        uint64_t v45 = 0;
        goto LABEL_88;
      }
    }
    uint64_t v45 = *(void *)(v45 + 8);
    if (v45)
    {
      if (**(_WORD **)(v45 + 16) == 313)
      {
        uint64_t v46 = *(void *)(v45 + 32);
        if (*(unsigned char *)(v46 + 32) == 1)
        {
          uint64_t v45 = *(void *)(v46 + 48);
          unint64_t v47 = v45 & 0xFFFFFFFFFFFFFF00;
          uint64_t v45 = v45;
LABEL_89:
          unint64_t v48 = (uint64_t)(v47 | v45) / 2;
          unint64_t v49 = HIDWORD(v48);
          int v50 = 263;
          goto LABEL_90;
        }
      }
      goto LABEL_87;
    }
LABEL_88:
    unint64_t v47 = 0;
    goto LABEL_89;
  }
  unint64_t v22 = *(void *)(v21 + 48) / 2;
  uint64_t v23 = ((result + 7) >> 3) - 2;
  if (v23 > 6) {
    int v24 = 7;
  }
  else {
    int v24 = dword_1CDC7F7C8[v23];
  }
  unint64_t v25 = HIDWORD(v22);
  *(_DWORD *)a3 = v24;
  *(_DWORD *)(a3 + 4) = v22;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 64;
  char v5 = 1;
  *(_DWORD *)(a3 + 24) = v25;
LABEL_3:
  *(unsigned char *)(a3 + 32) = v5;
  return result;
}

void sub_1CBC2E5E8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = &byte_1EA61E000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E890, memory_order_acquire) & 1) == 0)
  {
    int v9 = __cxa_guard_acquire(&qword_1EA61E890);
    int v6 = &byte_1EA61E000;
    if (v9)
    {
      byte_1EA61E888 = 1;
      __cxa_guard_release(&qword_1EA61E890);
      int v6 = &byte_1EA61E000;
    }
  }
  if ((v6[2184] & 1) == 0) {
    goto LABEL_5;
  }
  sub_1CC73C210(*(_DWORD *)(a1 + 4), a2, (uint64_t)&v10);
  if (v12)
  {
    if (v11 < 0x41)
    {
      uint64_t v7 = -(uint64_t)v11;
      uint64_t v8 = v10 << v7;
      *(_DWORD *)a3 = 1;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = v8 >> v7;
      *(unsigned char *)(a3 + 32) = 1;
      return;
    }
    if (v10) {
      MEMORY[0x1D25D9CB0](v10, 0x1000C8000313F17);
    }
  }
  sub_1CBC2E00C(*(unsigned int *)(a1 + 4), a2, a3);
  if (!*(unsigned char *)(a3 + 32))
  {
LABEL_5:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
  }
}

unint64_t sub_1CBC2E6F4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = a2;
  char v7 = 63 - __clz(a3);
  int SpillStackObject = llvm::MachineFrameInfo::CreateSpillStackObject(*(unsigned __int8 **)(v5 + 56), a2, v7);
  *(_DWORD *)a4 = SpillStackObject;
  FixedStacuint64_t k = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v5 + 432), SpillStackObject);
  if (FixedStack) {
    int v10 = *((_DWORD *)FixedStack + 3);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = (unint64_t)FixedStack | 4;
  v18[0] = (unint64_t)FixedStack | 4;
  v18[1] = 0;
  int v19 = v10;
  char v20 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  *(void *)(a4 + 8) = llvm::MachineFunction::getMachineMemOperand(v5, (uint64_t)v18, 2, v6, v7, &v16, 0, 1, 0, 0, 0);
  v13[0] = v11;
  v13[1] = 0;
  int v14 = v10;
  char v15 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  unint64_t result = llvm::MachineFunction::getMachineMemOperand(v5, (uint64_t)v13, 1, v6, v7, &v16, 0, 1, 0, 0, 0);
  *(void *)(a4 + 16) = result;
  return result;
}

llvm::MachineFunction *sub_1CBC2E7FC(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = (2 * a2) | 0x810;
  unsigned int v3 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void))(*(void *)a1 + 32))(a1, 6846, 0, 0, 0, 0, 0);
  uint64_t v5 = v4;
  int v7 = 1;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  llvm::MachineInstr::addOperand(v4, v3, (const llvm::MachineOperand *)&v7);
  int v7 = 1;
  uint64_t v8 = 0;
  uint64_t v9 = v2;
  llvm::MachineInstr::addOperand(v5, v3, (const llvm::MachineOperand *)&v7);
  return v3;
}

void sub_1CBC2E8B4(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = sub_1CBE52E8C(a1[4]);
  if ((v4 & 0xFF00000000) == 0) {
    llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
  }
  char v12 = &v15;
  int v14 = 4;
  char v5 = v4 - 61;
  if ((v4 - 61) > 0x3D) {
    goto LABEL_19;
  }
  if (((1 << v5) & 0x26B18000000FLL) == 0)
  {
    if (((1 << v5) & 0x110000000000) != 0)
    {
      uint64_t v15 = 0x6C0000006ALL;
      int v16 = 107;
      uint64_t v7 = 3;
LABEL_16:
      int v6 = v7;
      goto LABEL_5;
    }
    if (((1 << v5) & 0x3000000000000000) != 0)
    {
      uint64_t v15 = 0x6B0000006CLL;
      uint64_t v7 = 2;
      goto LABEL_16;
    }
LABEL_19:
    if (v4 == 191) {
      __break(1u);
    }
  }
  uint64_t v15 = 0x300000002BLL;
  int v6 = 2;
  uint64_t v7 = 2;
LABEL_5:
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  int v13 = v6;
  *(void *)a2 = a2 + 16;
  *(void *)(a2 + 8) = 0x400000000;
  uint64_t v10 = 4 * v7;
  do
  {
    unsigned int v11 = sub_1CBDA6464(*((unsigned __int16 *)a1 + 8), *(unsigned __int16 *)((char *)&v15 + v8));
    if (!*(unsigned char *)(*(void *)(*(void *)a1 + 32) + 32 * v11))
    {
      if (v9 >= *(_DWORD *)(a2 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a2 + 4 * v9) = v11;
      unsigned int v9 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v9;
    }
    v8 += 4;
  }
  while (v10 != v8);
  if (v12 != &v15) {
    free(v12);
  }
}

void sub_1CBC2EAB8(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  uint64_t v135 = 1;
  *(void *)&long long v9 = -1;
  *((void *)&v9 + 1) = -1;
  v136[0] = v9;
  v136[1] = v9;
  v136[2] = v9;
  v136[3] = v9;
  uint64_t v132 = 1;
  uint64_t v133 = -1;
  uint64_t v134 = -1;
  uint64_t v10 = a3;
  uint64_t v127 = (uint64_t)a6;
  if (a3)
  {
    uint64_t v12 = a1[1];
    uint64_t v13 = *(unsigned __int16 *)(*(void *)(v12 + 112) + 2 * a3);
    int v14 = (void *)(v12 + 648);
    unint64_t v15 = *(void *)(v12 + 656);
    if (v15 <= a3)
    {
      unint64_t v118 = a3 + 1;
      if (v15 != v118)
      {
        if (v15 <= v118)
        {
          if (*(void *)(v12 + 664) < v118) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          if (v118 != v15) {
            bzero((void *)(*(void *)(v12 + 648) + 2 * v15), 2 * (v118 - v15));
          }
        }
        *(void *)(v12 + 656) = v118;
      }
    }
    else
    {
      unsigned int v16 = *(unsigned __int16 *)(*v14 + 2 * a3);
      if (*(_WORD *)(*v14 + 2 * a3))
      {
LABEL_4:
        uint64_t v17 = v13 + (v16 >> 4);
        unint64_t v130 = v13 | (v17 << 32);
        if (a4)
        {
          LODWORD(v13) = v13 >> 1;
          LODWORD(v17) = (v17 + 1) >> 1;
          unint64_t v130 = __PAIR64__(v17, v13);
        }
        for (; v13 < v17; LODWORD(v130) = v13)
        {
          if (v135)
          {
            int v18 = 16;
            int v19 = v136;
          }
          else
          {
            int v18 = DWORD2(v136[0]);
            if (!DWORD2(v136[0]))
            {
              uint64_t v28 = 0;
LABEL_22:
              uint64_t v29 = sub_1CB8FB9D8((uint64_t)&v135, (uint64_t)&v130, &v130, v28);
              _DWORD *v29 = v130;
              LODWORD(v13) = v130;
              LODWORD(v17) = HIDWORD(v130);
              goto LABEL_23;
            }
            int v19 = *(_OWORD **)&v136[0];
          }
          int v20 = v18 - 1;
          unsigned int v21 = v20 & (37 * v13);
          unint64_t v22 = (_DWORD *)v19 + v21;
          int v23 = *v22;
          if (v13 != *v22)
          {
            int v24 = 0;
            int v25 = 1;
            while (v23 != -1)
            {
              if (v24) {
                BOOL v26 = 0;
              }
              else {
                BOOL v26 = v23 == -2;
              }
              if (v26) {
                int v24 = v22;
              }
              unsigned int v27 = v21 + v25++;
              unsigned int v21 = v27 & v20;
              unint64_t v22 = (_DWORD *)v19 + v21;
              int v23 = *v22;
              if (v13 == *v22) {
                goto LABEL_23;
              }
            }
            if (v24) {
              uint64_t v28 = v24;
            }
            else {
              uint64_t v28 = v22;
            }
            goto LABEL_22;
          }
LABEL_23:
          LODWORD(v13) = v13 + 1;
        }
        a6 = (void *)v127;
        goto LABEL_29;
      }
    }
    uint64_t v119 = 0;
    uint64_t v120 = *(uint64_t ***)(v12 + 248);
    uint64_t v121 = *(uint64_t ***)(v12 + 240);
    do
    {
      if (a3 - 0x40000000 >= 0xC0000001)
      {
        uint64_t v122 = **v121;
        if (a3 >> 3 < *(unsigned __int16 *)(v122 + 22)
          && ((1 << (a3 & 7)) & *(unsigned __int8 *)(*(void *)(v122 + 8) + (a3 >> 3))) != 0
          && (!v119
           || *v121 != v119
           && ((*(_DWORD *)(v119[1] + ((*(unsigned __int16 *)(v122 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v122 + 24)) & 1) != 0))
        {
          uint64_t v119 = *v121;
        }
      }
      ++v121;
    }
    while (v121 != v120);
    unsigned int v16 = *(_DWORD *)(*(void *)(v12 + 264)
                    + 24
                    * (*(unsigned __int16 *)(*v119 + 24)
                     + *(_DWORD *)(v12 + 272) * (((unint64_t)v120 - *(void *)(v12 + 240)) >> 3)));
    *(_WORD *)(*(void *)(v12 + 648) + 2 * v10) = v16;
    goto LABEL_4;
  }
LABEL_29:
  *a6 = a6 + 2;
  a6[1] = 0x400000000;
  uint64_t v30 = *(unsigned int *)(a2 + 8);
  if (!v30) {
    goto LABEL_166;
  }
  int v125 = a5;
  uint64_t v126 = a2;
  uint64_t v31 = &v135;
  uint64_t v32 = *(unsigned int **)a2;
  unsigned int v33 = &v32[v30];
  do
  {
    unsigned int v129 = *v32;
    unsigned int v34 = *(_DWORD *)(*(void *)(*a1 + 32) + 32 * v129 + 4);
    if (!v34) {
      goto LABEL_85;
    }
    sub_1CBAF9B1C(&v130, (void *)*a1, v129, a1[1], 0, a4 != 0);
    int v35 = v131;
    unint64_t v36 = HIDWORD(v130);
    if (v131 == HIDWORD(v130)) {
      goto LABEL_85;
    }
    char v37 = 0;
    do
    {
      if (v135)
      {
        int v38 = 16;
        unint64_t v39 = v136;
      }
      else
      {
        int v38 = DWORD2(v136[0]);
        if (!DWORD2(v136[0]))
        {
          if (!v10) {
            goto LABEL_65;
          }
          goto LABEL_58;
        }
        unint64_t v39 = *(_OWORD **)&v136[0];
      }
      int v40 = v38 - 1;
      unsigned int v41 = v40 & (37 * v36);
      int v42 = *((_DWORD *)v39 + v41);
      if (v36 == v42)
      {
LABEL_40:
        char v37 = 1;
        goto LABEL_58;
      }
      int v43 = 1;
      while (v42 != -1)
      {
        unsigned int v44 = v41 + v43++;
        unsigned int v41 = v44 & v40;
        int v42 = *((_DWORD *)v39 + v41);
        if (v36 == v42) {
          goto LABEL_40;
        }
      }
      if (!v10)
      {
        if (v135)
        {
          int v45 = 16;
          uint64_t v46 = v136;
          goto LABEL_44;
        }
        int v45 = DWORD2(v136[0]);
        if (DWORD2(v136[0]))
        {
          uint64_t v46 = *(_OWORD **)&v136[0];
LABEL_44:
          int v47 = v45 - 1;
          unsigned int v48 = v47 & (37 * v36);
          unint64_t v49 = (_DWORD *)v46 + v48;
          int v50 = *v49;
          if (v36 == *v49) {
            goto LABEL_58;
          }
          uint64_t v51 = 0;
          int v52 = 1;
          while (v50 != -1)
          {
            if (v51) {
              BOOL v53 = 0;
            }
            else {
              BOOL v53 = v50 == -2;
            }
            if (v53) {
              uint64_t v51 = v49;
            }
            unsigned int v54 = v48 + v52++;
            unsigned int v48 = v54 & v47;
            unint64_t v49 = (_DWORD *)v46 + v48;
            int v50 = *v49;
            if (v36 == *v49) {
              goto LABEL_58;
            }
          }
          if (v51) {
            uint64_t v55 = v51;
          }
          else {
            uint64_t v55 = v49;
          }
        }
        else
        {
LABEL_65:
          uint64_t v55 = 0;
        }
        uint64_t v56 = sub_1CB8FB9D8((uint64_t)&v135, (uint64_t)&v130 + 4, (_DWORD *)&v130 + 1, v55);
        *uint64_t v56 = HIDWORD(v130);
        LODWORD(v36) = HIDWORD(v130);
        int v35 = v131;
      }
LABEL_58:
      LODWORD(v36) = v36 + 1;
      HIDWORD(v130) = v36;
    }
    while (v36 != v35);
    if (v37)
    {
      uint64_t v57 = *(unsigned int *)(v127 + 8);
      if (v57 >= *(_DWORD *)(v127 + 12))
      {
        sub_1CD42D360(v127, v34, v129);
      }
      else
      {
        unint64_t v58 = (unsigned int *)(*(void *)v127 + 8 * v57);
        *unint64_t v58 = v34;
        v58[1] = v129;
        ++*(_DWORD *)(v127 + 8);
      }
      if (v132)
      {
        int v59 = 4;
        uint64_t v60 = &v133;
        goto LABEL_71;
      }
      int v59 = v134;
      if (!v134)
      {
        uint64_t v69 = 0;
        goto LABEL_84;
      }
      uint64_t v60 = (uint64_t *)v133;
LABEL_71:
      int v61 = v59 - 1;
      unsigned int v62 = (37 * v129) & v61;
      uint64_t v63 = (_DWORD *)v60 + v62;
      int v64 = *v63;
      if (v129 != *v63)
      {
        uint64_t v65 = 0;
        int v66 = 1;
        while (v64 != -1)
        {
          if (v65) {
            BOOL v67 = 0;
          }
          else {
            BOOL v67 = v64 == -2;
          }
          if (v67) {
            uint64_t v65 = v63;
          }
          unsigned int v68 = v62 + v66++;
          unsigned int v62 = v68 & v61;
          uint64_t v63 = (_DWORD *)v60 + v62;
          int v64 = *v63;
          if (v129 == *v63) {
            goto LABEL_85;
          }
        }
        if (v65) {
          uint64_t v69 = v65;
        }
        else {
          uint64_t v69 = v63;
        }
LABEL_84:
        uint64_t v70 = sub_1CB834EC4((uint64_t)&v132, (uint64_t)&v129, &v129, v69);
        _DWORD *v70 = v129;
      }
    }
LABEL_85:
    ++v32;
  }
  while (v32 != v33);
  uint64_t v71 = v126;
  if (!v125 || !*(_DWORD *)(v127 + 8)) {
    goto LABEL_166;
  }
  sub_1CBC30010(&v135);
  int v72 = v132;
  if (v132 <= 1)
  {
    uint64_t v73 = (uint64_t *)v133;
    unsigned int v75 = v134;
    if (v132) {
      uint64_t v123 = &v133;
    }
    else {
      uint64_t v123 = (uint64_t *)v133;
    }
    if (v132) {
      unsigned int v124 = 4;
    }
    else {
      unsigned int v124 = v134;
    }
    unsigned int v74 = (unsigned int *)v123 + v124;
    uint64_t v31 = (uint64_t *)v74;
  }
  else
  {
    uint64_t v73 = &v133;
    if (v132)
    {
LABEL_95:
      int v72 = v132 & 1;
      while (*(_DWORD *)v73 >= 0xFFFFFFFE)
      {
        uint64_t v73 = (uint64_t *)((char *)v73 + 4);
        if (v73 == v31)
        {
          uint64_t v73 = v31;
          break;
        }
      }
      unsigned int v74 = (unsigned int *)v73;
      uint64_t v73 = (uint64_t *)v133;
      unsigned int v75 = v134;
    }
    else
    {
      uint64_t v73 = (uint64_t *)v133;
      unsigned int v75 = v134;
      if (v134)
      {
        uint64_t v31 = (uint64_t *)(v133 + 4 * v134);
        uint64_t v71 = v126;
        goto LABEL_95;
      }
      int v72 = 0;
      unsigned int v74 = (unsigned int *)v133;
      uint64_t v31 = (uint64_t *)v133;
      uint64_t v71 = v126;
    }
  }
  BOOL v76 = v72 == 0;
  if (v72) {
    unint64_t v77 = &v133;
  }
  else {
    unint64_t v77 = v73;
  }
  if (v76) {
    unsigned int v78 = v75;
  }
  else {
    unsigned int v78 = 4;
  }
  uint64_t v79 = (unsigned int *)v77 + v78;
  if (v74 != v79)
  {
    while (1)
    {
      sub_1CBAF9B1C(&v130, (void *)*a1, *v74, a1[1], 0, a4 != 0);
      int v80 = v131;
      unint64_t v81 = HIDWORD(v130);
      if (v131 != HIDWORD(v130)) {
        break;
      }
LABEL_108:
      unint64_t v82 = v74 + 1;
      while (v82 != (unsigned int *)v31)
      {
        unsigned int v83 = *v82++;
        if (v83 <= 0xFFFFFFFD)
        {
          unsigned int v74 = v82 - 1;
          goto LABEL_134;
        }
      }
      unsigned int v74 = (unsigned int *)v31;
LABEL_134:
      if (v74 == v79) {
        goto LABEL_135;
      }
    }
    while (2)
    {
      if (v135)
      {
        int v84 = 16;
        uint64_t v85 = v136;
        goto LABEL_114;
      }
      int v84 = DWORD2(v136[0]);
      if (DWORD2(v136[0]))
      {
        uint64_t v85 = *(_OWORD **)&v136[0];
LABEL_114:
        int v86 = v84 - 1;
        unsigned int v87 = v86 & (37 * v81);
        uint64_t v88 = (_DWORD *)v85 + v87;
        int v89 = *v88;
        if (v81 != *v88)
        {
          uint64_t v90 = 0;
          int v91 = 1;
          while (v89 != -1)
          {
            if (v90) {
              BOOL v92 = 0;
            }
            else {
              BOOL v92 = v89 == -2;
            }
            if (v92) {
              uint64_t v90 = v88;
            }
            unsigned int v93 = v87 + v91++;
            unsigned int v87 = v93 & v86;
            uint64_t v88 = (_DWORD *)v85 + v87;
            int v89 = *v88;
            if (v81 == *v88) {
              goto LABEL_128;
            }
          }
          if (v90) {
            uint64_t v94 = v90;
          }
          else {
            uint64_t v94 = v88;
          }
LABEL_127:
          uint64_t v95 = sub_1CB8FB9D8((uint64_t)&v135, (uint64_t)&v130 + 4, (_DWORD *)&v130 + 1, v94);
          *uint64_t v95 = HIDWORD(v130);
          LODWORD(v81) = HIDWORD(v130);
          int v80 = v131;
        }
LABEL_128:
        LODWORD(v81) = v81 + 1;
        HIDWORD(v130) = v81;
        if (v81 == v80) {
          goto LABEL_108;
        }
        continue;
      }
      break;
    }
    uint64_t v94 = 0;
    goto LABEL_127;
  }
LABEL_135:
  uint64_t v96 = *(unsigned int *)(v71 + 8);
  if (!v96) {
    goto LABEL_166;
  }
  uint64_t v97 = *(unsigned int **)v71;
  uint64_t v98 = *(void *)v71 + 4 * v96;
  while (2)
  {
    uint64_t v99 = *v97;
    if (v132)
    {
      int v100 = 4;
      int v101 = &v133;
LABEL_139:
      int v102 = v100 - 1;
      unsigned int v103 = v102 & (37 * v99);
      int v104 = *((_DWORD *)v101 + v103);
      if (v99 == v104) {
        goto LABEL_163;
      }
      int v105 = 1;
      while (v104 != -1)
      {
        unsigned int v106 = v103 + v105++;
        unsigned int v103 = v106 & v102;
        int v104 = *((_DWORD *)v101 + v103);
        if (v99 == v104) {
          goto LABEL_163;
        }
      }
    }
    else
    {
      int v100 = v134;
      if (v134)
      {
        int v101 = (uint64_t *)v133;
        goto LABEL_139;
      }
    }
    sub_1CBAF9B1C(&v130, (void *)*a1, *v97, a1[1], 0, a4 != 0);
    unint64_t v107 = v130;
    unint64_t v108 = HIDWORD(v130);
    if (v131 == HIDWORD(v130)) {
      goto LABEL_163;
    }
    if (v135) {
      uint64_t v109 = v136;
    }
    else {
      uint64_t v109 = *(_OWORD **)&v136[0];
    }
    if (v135) {
      int v110 = 15;
    }
    else {
      int v110 = DWORD2(v136[0]) - 1;
    }
    while (2)
    {
      if (!(v135 & 1 | (DWORD2(v136[0]) != 0)))
      {
LABEL_159:
        unint64_t v107 = (v107 & 0xFFFFFFFF00000000) + 0x100000000;
        unint64_t v108 = HIDWORD(v107);
        if (v131 == HIDWORD(v107)) {
          goto LABEL_163;
        }
        continue;
      }
      break;
    }
    unsigned int v111 = (37 * v108) & v110;
    int v112 = *((_DWORD *)v109 + v111);
    if (v112 != v108)
    {
      int v113 = 1;
      while (v112 != -1)
      {
        unsigned int v114 = v111 + v113++;
        unsigned int v111 = v114 & v110;
        int v112 = *((_DWORD *)v109 + v111);
        if (v112 == v108) {
          goto LABEL_161;
        }
      }
      goto LABEL_159;
    }
LABEL_161:
    unsigned int v115 = *(_DWORD *)(*(void *)(*a1 + 32) + 32 * v99 + 4);
    uint64_t v116 = *(unsigned int *)(v127 + 8);
    if (v116 >= *(_DWORD *)(v127 + 12))
    {
      sub_1CD42D360(v127, v115, v99);
    }
    else
    {
      uint64_t v117 = (unsigned int *)(*(void *)v127 + 8 * v116);
      *uint64_t v117 = v115;
      v117[1] = v99;
      ++*(_DWORD *)(v127 + 8);
    }
LABEL_163:
    if (++v97 != (unsigned int *)v98) {
      continue;
    }
    break;
  }
LABEL_166:
  if ((v132 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v133, 4);
  }
  if ((v135 & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)&v136[0], 4);
  }
}

BOOL sub_1CBC2F45C(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(*(void *)(*(void *)(a1 + 24) + 32) + 16);
  if (v1[374])
  {
    int v3 = **(unsigned __int16 **)(a1 + 16);
    uint64_t v4 = sub_1CBE52E8C(v3);
    if ((v4 & 0xFF00000000) != 0)
    {
      unsigned int v5 = v4;
      BOOL result = 0;
      switch(v5)
      {
        case 0x76u:
          if (*(_DWORD *)(*(void *)(a1 + 32) + 32 * sub_1CBDA6464(v3, 0x2Fu) + 16) != 8) {
            return 0;
          }
          goto LABEL_6;
        case 0x77u:
        case 0x78u:
        case 0x79u:
        case 0x7Au:
        case 0x7Bu:
        case 0x7Cu:
        case 0x8Cu:
        case 0x8Du:
        case 0x91u:
        case 0x92u:
        case 0x93u:
        case 0x94u:
        case 0x95u:
        case 0x96u:
        case 0x97u:
        case 0x9Au:
        case 0x9Bu:
        case 0xA2u:
        case 0xA3u:
        case 0xA4u:
        case 0xA5u:
        case 0xA6u:
        case 0xA7u:
        case 0xA8u:
        case 0xA9u:
        case 0xAAu:
        case 0xABu:
          return result;
        case 0x7Du:
        case 0x7Eu:
        case 0x7Fu:
        case 0x80u:
        case 0x81u:
        case 0x82u:
        case 0x83u:
        case 0x84u:
        case 0x85u:
        case 0x86u:
        case 0x87u:
        case 0x88u:
        case 0x89u:
        case 0x8Au:
        case 0xACu:
        case 0xADu:
        case 0xAEu:
        case 0xAFu:
        case 0xB0u:
        case 0xB1u:
        case 0xB2u:
        case 0xB3u:
        case 0xB4u:
        case 0xB5u:
        case 0xB6u:
        case 0xB7u:
        case 0xB8u:
        case 0xB9u:
          goto LABEL_6;
        case 0x8Bu:
        case 0x8Eu:
        case 0x8Fu:
        case 0x90u:
        case 0x98u:
        case 0x99u:
        case 0x9Cu:
        case 0x9Du:
        case 0x9Eu:
        case 0x9Fu:
        case 0xA0u:
        case 0xA1u:
          unsigned int v7 = sub_1CBDA6464(v3, 0x45u);
          uint64_t v8 = *(void *)(a1 + 32);
          uint64_t v9 = 32 * v7;
          goto LABEL_8;
        default:
          if (v5 > 0x38) {
            return result;
          }
          if (((1 << v5) & 0x30030200000) != 0) {
            goto LABEL_6;
          }
          if (v5 == 38)
          {
            int v10 = sub_1CBDA6464(v3, 0x1Fu);
            unsigned int v11 = sub_1CBDA6464(v3, 0x1Eu);
            uint64_t v8 = *(void *)(a1 + 32);
            if (!*(unsigned char *)(v8 + 32 * v11)) {
              goto LABEL_6;
            }
            if ((v10 & 0x80000000) == 0)
            {
              uint64_t v9 = 32 * (unsigned __int16)v10;
LABEL_8:
              if (!*(unsigned char *)(v8 + v9)) {
                goto LABEL_6;
              }
            }
          }
          else
          {
            if (v5 != 56) {
              return result;
            }
            if ((sub_1CBDA6464(v3, 4u) & 0x80000000) == 0
              && (*(void *)(*(void *)(a1 + 32) + 32 * sub_1CBDA6464(v3, 0x2Fu) + 16) & 0xFFFFFFFELL) == 4)
            {
LABEL_6:
              uint64_t v6 = (*(uint64_t (**)(unsigned char *))(*(void *)v1 + 176))(v1);
              return (~sub_1CBC2D2EC(a1, 0, (void *)(v6 + 8)) & 5) == 0;
            }
          }
          break;
      }
    }
  }
  return 0;
}

uint64_t sub_1CBC2F74C(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EA61E898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EA61E898))
  {
    __cxa_guard_release(&qword_1EA61E898);
  }
  return 0;
}

BOOL sub_1CBC2F7C4(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 16) + 385)) {
    return 0;
  }
  uint64_t v1 = **(unsigned __int16 **)(a1 + 16);
  uint64_t v2 = sub_1CBE52E8C(v1);
  BOOL result = 0;
  if ((v2 & 0xFF00000000) != 0 && v2 == 42) {
    return sub_1CBDB2780(v1, 16, 0) == 22;
  }
  return result;
}

BOOL sub_1CBC2F844(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 16) + 396)
    && (uint64_t v1 = **(unsigned __int16 **)(a1 + 16), v2 = sub_1CBE52E8C(v1), (v2 & 0xFF00000000) != 0)
    && (v2 == 44 || v2 == 38))
  {
    return sub_1CBDB2780(v1, 16, 0) == 22;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1CBC2F8BC(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 **)(a1 + 16);
  uint64_t v2 = *((void *)v1 + 2);
  if ((v2 & 0x400000000) == 0) {
    return 0;
  }
  uint64_t v4 = a1;
  unint64_t v5 = *((void *)v1 + 1);
  if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0)
  {
    if ((v5 & 0x400) != 0) {
      return 1;
    }
    uint64_t result = 1;
    while ((*(_WORD *)(v4 + 44) & 8) != 0)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if ((*(unsigned char *)(*(void *)(v4 + 16) + 9) & 4) != 0) {
        return result;
      }
    }
    LOBYTE(v7) = 0;
  }
  else
  {
    uint64_t v7 = (v5 >> 10) & 1;
  }
  uint64_t result = 1;
  if ((v2 & 0x40) == 0 && (v7 & 1) == 0)
  {
    uint64_t v8 = sub_1CBE52E8C(*v1);
    if ((v8 & 0xFF00000000) == 0) {
      llvm::report_fatal_error((llvm *)"Unknown Opcode", (const llvm::Twine *)1);
    }
    int v9 = v8;
    uint64_t result = 0;
    if (v9 > 187)
    {
      if ((v9 - 188) > 1) {
        return result;
      }
    }
    else if (v9 != 20 && v9 != 22 && v9 != 107)
    {
      return result;
    }
    return 1;
  }
  return result;
}

uint64_t sub_1CBC2F99C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (!v1 || (uint64_t v2 = *(void *)(result + 8), (*(unsigned char *)v1 & 4) == 0))
  {
    uint64_t v2 = *(void *)(result + 8);
    if ((*(_WORD *)(v1 + 44) & 8) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      do
        uint64_t v2 = *(void *)(v2 + 8);
      while ((*(_WORD *)(v2 + 44) & 8) != 0);
    }
  }
  int v3 = *(void **)(v2 + 8);
  uint64_t v4 = *(void **)(v1 + 24);
  if (v3 == v4 + 6)
  {
    uint64_t v6 = v4[4] + 320;
    while (1)
    {
      uint64_t v4 = (void *)v4[1];
      if (v4 == (void *)v6) {
        break;
      }
      if (v4 + 6 != (void *)(v4[6] & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v5 = v4[7];
        goto LABEL_8;
      }
    }
    *(unsigned char *)uint64_t result = 1;
  }
  else
  {
    if ((*(unsigned char *)v1 & 4) == 0)
    {
      while ((*(_WORD *)(v1 + 44) & 8) != 0)
        uint64_t v1 = *(void *)(v1 + 8);
    }
    uint64_t v5 = *(void *)(v1 + 8);
LABEL_8:
    *(void *)(result + 8) = v5;
  }
  return result;
}

BOOL sub_1CBC2FA44(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 32) + 16) + 397)) {
    return 0;
  }
  uint64_t v3 = **(unsigned __int16 **)(a1 + 16);
  uint64_t v4 = sub_1CBE52E8C(v3);
  if ((v4 & 0xFF00000000) == 0) {
    return 0;
  }
  if (v4 == 88 || v4 == 59)
  {
    int v20 = sub_1CBDB2780(v3, 1, 0);
    int v21 = sub_1CBDB2780(v3, 2, 0);
    int v22 = sub_1CBDB2780(v3, 13, 0);
    int v23 = sub_1CBDB2780(v3, 22, 0);
    BOOL result = 0;
    if (v20) {
      BOOL v24 = 0;
    }
    else {
      BOOL v24 = v21 == 0;
    }
    if (!v24 || v22 != 0 || v23 != 0) {
      return result;
    }
    unsigned int v27 = sub_1CBDA6464(v3, 0x11u);
    uint64_t v28 = *(void *)(a1 + 32);
    int v14 = (unsigned __int8 *)(v28 + 32 * v27);
    int v29 = *v14;
    unsigned int v16 = (unsigned __int8 *)(v28 + 32 * sub_1CBDA6464(v3, 4u));
    int v30 = *v16;
    int v31 = *(unsigned __int8 *)(v28 + 32 * sub_1CBDA6464(v3, 0x14u));
    int v17 = *(unsigned __int8 *)(v28 + 32 * sub_1CBDA6464(v3, 0x37u));
    if (v29) {
      BOOL v32 = 0;
    }
    else {
      BOOL v32 = v30 == 0;
    }
    BOOL v19 = v32 && v31 == 0;
  }
  else
  {
    if ((v4 - 36) >= 2) {
      return 0;
    }
    int v5 = sub_1CBDB2780(v3, 17, 0);
    int v6 = sub_1CBDB2780(v3, 6, 0);
    int v7 = sub_1CBDB2780(v3, 7, 0);
    BOOL v8 = !v5 && v6 == 0;
    if (!v8 || v7 != 0) {
      return 0;
    }
    unsigned int v10 = sub_1CBDA6464(v3, 0x42u);
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = *(unsigned __int8 *)(v11 + 32 * v10);
    int v13 = *(unsigned __int8 *)(v11 + 32 * sub_1CBDA6464(v3, 0x43u));
    int v14 = (unsigned __int8 *)(v11 + 32 * sub_1CBDA6464(v3, 0x19u));
    int v15 = *v14;
    unsigned int v16 = (unsigned __int8 *)(v11 + 32 * sub_1CBDA6464(v3, 0x1Au));
    int v17 = *v16;
    if (v12) {
      BOOL v18 = 0;
    }
    else {
      BOOL v18 = v13 == 0;
    }
    BOOL v19 = v18 && v15 == 0;
  }
  if (!v19 || v17 != 0) {
    return 0;
  }
  return *((_DWORD *)v14 + 1) == *((_DWORD *)v16 + 1);
}

uint64_t sub_1CBC2FC68(void *a1)
{
  uint64_t v2 = a1[1];
  int v3 = *(unsigned __int8 *)(*(void *)(v2 + 16) + 389);
  uint64_t v9 = 129;
  int v10 = 0;
  if (v3) {
    unint64_t v4 = 255;
  }
  else {
    unint64_t v4 = 15;
  }
  int v5 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)v2, (llvm::LLVMContext *)0x10);
  int v6 = llvm::ConstantInt::get(v5, v4, (const llvm::APInt *)1);
  (*(void (**)(void *, uint64_t *, void *))(*a1 + 16))(a1, &v9, v6);
  return *(unsigned int *)(*(void *)(v7 + 32) + 4);
}

uint64_t sub_1CBC2FD10(void *a1)
{
  uint64_t v2 = a1[1];
  int v3 = *(unsigned __int8 *)(*(void *)(v2 + 16) + 389);
  uint64_t v9 = 129;
  int v10 = 0;
  if (v3) {
    unint64_t v4 = 8;
  }
  else {
    unint64_t v4 = 4;
  }
  int v5 = (llvm::ConstantInt *)llvm::IntegerType::get(***(llvm::IntegerType ****)v2, (llvm::LLVMContext *)0x10);
  int v6 = llvm::ConstantInt::get(v5, v4, (const llvm::APInt *)1);
  (*(void (**)(void *, uint64_t *, void *))(*a1 + 16))(a1, &v9, v6);
  return *(unsigned int *)(*(void *)(v7 + 32) + 4);
}

BOOL sub_1CBC2FDB8(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    int v5 = **(unsigned __int16 **)(a1 + 16);
    uint64_t v6 = sub_1CBE52E8C(v5);
    if ((v6 & 0xFF00000000) == 0) {
      return 0;
    }
    if ((v6 - 51) > 0x18 || ((1 << (v6 - 51)) & 0x1F80007) == 0) {
      return 0;
    }
    uint64_t v8 = **(unsigned __int16 **)(a2 + 16);
    uint64_t v9 = sub_1CBE52E8C(v8);
    if ((v9 & 0xFF00000000) == 0) {
      return 0;
    }
    if ((v9 - 51) > 0x18 || ((1 << (v9 - 51)) & 0x1F80007) == 0) {
      return 0;
    }
    if (sub_1CBDB2780(v8, 13, 0) == 33) {
      return 0;
    }
    unsigned int v11 = sub_1CBDA6464(v5, 3u);
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = v11;
    unsigned int v14 = sub_1CBDA6464(v8, 0x14u);
    uint64_t v15 = *(void *)(a2 + 32);
    return *(_DWORD *)(v12 + 32 * v13 + 4) == *(_DWORD *)(v15 + 32 * v14 + 4)
        && ((*(_DWORD *)(v15 + 32 * v14) ^ *(_DWORD *)(v12 + 32 * v13)) & 0xFFF00) == 0;
  }
  return result;
}

uint64_t sub_1CBC2FEDC(void *a1, unsigned int a2)
{
  uint64_t v2 = a2;
  if (a1[82] <= (unint64_t)a2)
  {
    uint64_t v13 = a2;
    unsigned int v11 = a2;
    uint64_t v12 = a1;
    sub_1CBAF9DF4(a1 + 81, a2 + 1);
    uint64_t v2 = v13;
    a2 = v11;
    a1 = v12;
  }
  else
  {
    uint64_t v3 = *(unsigned __int16 *)(a1[81] + 2 * a2);
    if (*(_WORD *)(a1[81] + 2 * a2)) {
      return v3;
    }
  }
  int v5 = 0;
  uint64_t v6 = (char *)a1[30];
  uint64_t v7 = (char *)a1[31];
  uint64_t v8 = a1;
  uint64_t v9 = v6;
  do
  {
    if (a2 - 0x40000000 >= 0xC0000001)
    {
      uint64_t v10 = **(void **)v9;
      if (a2 >> 3 < *(unsigned __int16 *)(v10 + 22)
        && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(void *)(v10 + 8) + (a2 >> 3))) != 0
        && (!v5
         || *(uint64_t **)v9 != v5
         && ((*(_DWORD *)(v5[1] + ((*(unsigned __int16 *)(v10 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v10 + 24)) & 1) != 0))
      {
        int v5 = *(uint64_t **)v9;
      }
    }
    v9 += 8;
  }
  while (v9 != v7);
  uint64_t v3 = *(unsigned int *)(v8[33]
                       + 24
                       * (*(unsigned __int16 *)(*v5 + 24)
                        + *((_DWORD *)v8 + 68) * ((unint64_t)(v7 - v6) >> 3)));
  *(_WORD *)(v8[81] + 2 * v2) = v3;
  return v3;
}

void *sub_1CBC30010(void *result)
{
  uint64_t v1 = result;
  int v2 = *(_DWORD *)result;
  if (*(_DWORD *)result <= 1u && !*((_DWORD *)result + 1)) {
    return result;
  }
  if (v2)
  {
    uint64_t v3 = result + 1;
    size_t v4 = 64;
    goto LABEL_4;
  }
  unsigned int v6 = (2 * v2) & 0xFFFFFFFC;
  uint64_t v5 = *((unsigned int *)result + 4);
  if (v6 >= v5 || v5 < 0x41)
  {
    if (!v5) {
      goto LABEL_5;
    }
    uint64_t v3 = (void *)result[1];
    size_t v4 = 4 * v5;
LABEL_4:
    BOOL result = memset(v3, 255, v4);
    LODWORD(v5) = *v1 & 1;
LABEL_5:
    *uint64_t v1 = v5;
    v1[1] = 0;
    return result;
  }

  return sub_1CD42D3D4(result);
}

void sub_1CBC300B4(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  uint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    size_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unsigned int v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CBC30168(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  size_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CBC30214()
{
  return "AGX3 nopifier pass";
}

void sub_1CBC30224(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CBC30280(uint64_t a1, llvm::MachineFunction *a2)
{
  v214[32] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (unsigned __int8 *)*((void *)a2 + 2);
  int v4 = v3[323];
  int v5 = v3[324];
  int v6 = v3[325];
  int v7 = v3[326];
  unsigned __int8 v8 = v3[327];
  uint64_t v204 = v208;
  uint64_t v205 = v208;
  uint64_t v206 = 32;
  int v207 = 0;
  int v200 = v4;
  int v199 = v5;
  int v198 = v6;
  if (!((v4 | v8 | v5 | v6) | v7)) {
    goto LABEL_431;
  }
  uint64_t v9 = a2;
  if ((*(_WORD *)(*(void *)a2 + 18) & 0x3FF0) == 0x640) {
    goto LABEL_431;
  }
  *(void *)(a1 + 248) = (*(uint64_t (**)(unsigned __int8 *))(*(void *)v3 + 104))(v3);
  uint64_t v10 = *((void *)v9 + 5);
  *(void *)(a1 + 256) = v10;
  if (**(unsigned char **)(*(void *)v10 + 360))
  {
    uint64_t v209 = 1;
    uint64_t v38 = 8;
    int64x2_t v39 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(int64x2_t *)((char *)&v209 + v38) = v39;
      v38 += 16;
    }
    while (v38 != 264);
    int v212 = v214;
    uint64_t v213 = 0x2000000000;
    int v40 = (char *)*((void *)v9 + 41);
    int v201 = (char *)v9 + 320;
    if (v40 == (char *)v9 + 320) {
      goto LABEL_379;
    }
    unint64_t v197 = v9;
    while (1)
    {
      for (uint64_t i = *((void *)v40 + 7); (char *)i != v40 + 48; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v203 = i;
        int v42 = *(unsigned __int16 **)(i + 16);
        uint64_t v43 = *((void *)v42 + 1);
        if ((*(_WORD *)(i + 44) & 0xC) != 0 && (*(_WORD *)(i + 44) & 4) == 0)
        {
          uint64_t v85 = i;
          if ((v43 & 0x200) == 0)
          {
            while ((*(_WORD *)(v85 + 44) & 8) != 0)
            {
              uint64_t v85 = *(void *)(v85 + 8);
              if ((*(unsigned char *)(*(void *)(v85 + 16) + 9) & 2) != 0) {
                goto LABEL_182;
              }
            }
LABEL_88:
            uint64_t v45 = *((void *)v42 + 2);
            uint64_t v46 = v45 & 0x1D00;
            if (v46 == 1280
              || v46 == 2304
              || v46 == 3328
              || (uint64_t v92 = v45 & 0x1E00, v92 == 1536)
              || v92 == 2560
              || v92 == 3584
              || (v45 & 2) != 0
              || ((uint64_t v93 = sub_1CBE52E8C(*v42), (v93 & 0xFF00000000) != 0)
                ? (BOOL v94 = (v93 - 79) >= 2)
                : (BOOL v94 = 1),
                  v94 ? (char v95 = 0) : (char v95 = 1),
                  (v45 & 0x2000000) != 0 || (v95 & 1) != 0))
            {
              if (*(_DWORD *)(i + 40) >= 4u)
              {
                uint64_t v47 = i;
                uint64_t v48 = 3;
                while (1)
                {
                  uint64_t v49 = *(void *)(v47 + 32);
                  if (!*(unsigned char *)(v49 + 32 * v48)) {
                    break;
                  }
LABEL_99:
                  if (++v48 >= (unint64_t)*(unsigned int *)(v47 + 40)) {
                    goto LABEL_246;
                  }
                }
                uint64_t v50 = *(unsigned int *)(v49 + 32 * v48 + 4);
                uint64_t v202 = 0;
                uint64_t v51 = *(void *)(a1 + 256);
                if ((v50 & 0x80000000) != 0) {
                  int v52 = (uint64_t *)(*(void *)(v51 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
                }
                else {
                  int v52 = (uint64_t *)(*(void *)(v51 + 272) + 8 * v50);
                }
                uint64_t v53 = *v52;
                if (!v53) {
                  goto LABEL_98;
                }
                if ((*(unsigned char *)(v53 + 3) & 1) == 0)
                {
                  uint64_t v84 = *(void *)(v53 + 24);
                  if (!v84 || (*(unsigned char *)(v84 + 3) & 1) == 0) {
                    goto LABEL_98;
                  }
                }
                if ((v50 & 0x80000000) != 0) {
                  unsigned int v54 = (uint64_t *)(*(void *)(v51 + 24) + 16 * (v50 & 0x7FFFFFFF) + 8);
                }
                else {
                  unsigned int v54 = (uint64_t *)(*(void *)(v51 + 272) + 8 * v50);
                }
                uint64_t v55 = *v54;
                if (v55)
                {
                  if ((*(unsigned char *)(v55 + 3) & 1) == 0)
                  {
                    uint64_t v55 = *(void *)(v55 + 24);
                    if (v55)
                    {
                      if ((*(unsigned char *)(v55 + 3) & 1) == 0) {
                        uint64_t v55 = 0;
                      }
                    }
                  }
                }
                uint64_t v56 = *(void *)(v55 + 8);
                while (1)
                {
                  uint64_t v55 = *(void *)(v55 + 24);
                  if (!v55 || (*(unsigned char *)(v55 + 3) & 1) == 0) {
                    break;
                  }
                  if (*(void *)(v55 + 8) != v56) {
                    goto LABEL_98;
                  }
                }
                uint64_t v202 = v56;
                if (!v56) {
                  goto LABEL_98;
                }
                uint64_t v57 = v205;
                uint64_t v58 = HIDWORD(v206);
                if (v205 == v204)
                {
                  if (HIDWORD(v206))
                  {
                    int v59 = 0;
                    uint64_t v60 = 8 * HIDWORD(v206);
                    int v61 = v205;
                    while (*v61 != v56)
                    {
                      if (*v61 == -2) {
                        int v59 = v61;
                      }
                      ++v61;
                      v60 -= 8;
                      if (!v60)
                      {
                        if (!v59) {
                          goto LABEL_120;
                        }
                        *int v59 = v56;
                        --v207;
                        break;
                      }
                    }
LABEL_144:
                    if (v209)
                    {
                      int v72 = 32;
                      uint64_t v73 = &v210;
LABEL_148:
                      int v74 = v72 - 1;
                      unsigned int v75 = ((v202 >> 4) ^ (v202 >> 9)) & v74;
                      BOOL v76 = &v73[v75];
                      uint64_t v77 = *v76;
                      if (v202 != *v76)
                      {
                        unsigned int v78 = 0;
                        int v79 = 1;
                        while (v77 != -4096)
                        {
                          if (v78) {
                            BOOL v80 = 0;
                          }
                          else {
                            BOOL v80 = v77 == -8192;
                          }
                          if (v80) {
                            unsigned int v78 = v76;
                          }
                          unsigned int v81 = v75 + v79++;
                          unsigned int v75 = v81 & v74;
                          BOOL v76 = &v73[v75];
                          uint64_t v77 = *v76;
                          if (v202 == *v76) {
                            goto LABEL_98;
                          }
                        }
                        if (v78) {
                          unint64_t v82 = v78;
                        }
                        else {
                          unint64_t v82 = v76;
                        }
                        goto LABEL_161;
                      }
                    }
                    else
                    {
                      int v72 = v211;
                      if (v211)
                      {
                        uint64_t v73 = v210;
                        goto LABEL_148;
                      }
                      unint64_t v82 = 0;
LABEL_161:
                      unsigned int v83 = sub_1CBAA320C((uint64_t)&v209, (uint64_t)&v202, &v202, v82);
                      void *v83 = v202;
                      if (v213 >= (unint64_t)HIDWORD(v213)) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      *((void *)v212 + v213) = v202;
                      LODWORD(v213) = v213 + 1;
                    }
LABEL_98:
                    uint64_t v47 = v203;
                    goto LABEL_99;
                  }
LABEL_120:
                  unsigned int v62 = v206;
                  if (HIDWORD(v206) < v206)
                  {
                    ++HIDWORD(v206);
                    *(void *)&v205[8 * v58] = v56;
                    goto LABEL_144;
                  }
                }
                else
                {
                  unsigned int v62 = v206;
                }
                if (3 * v62 <= 4 * (HIDWORD(v206) - v207))
                {
                  if (v62 >= 0x40) {
                    v62 *= 2;
                  }
                  else {
                    unsigned int v62 = 128;
                  }
                }
                else if (v62 - HIDWORD(v206) >= v62 >> 3)
                {
                  goto LABEL_125;
                }
                llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v204, v62);
                unsigned int v62 = v206;
                uint64_t v57 = v205;
LABEL_125:
                unsigned int v63 = v62 - 1;
                unsigned int v64 = (v62 - 1) & ((v56 >> 4) ^ (v56 >> 9));
                uint64_t v65 = &v57[8 * v64];
                uint64_t v66 = *(void *)v65;
                if (*(void *)v65 == -1)
                {
                  BOOL v67 = 0;
LABEL_137:
                  if (v67) {
                    uint64_t v71 = v67;
                  }
                  else {
                    uint64_t v71 = v65;
                  }
                  if (*(void *)v71 != v56)
                  {
                    if (*(void *)v71 == -2) {
                      --v207;
                    }
                    else {
                      ++HIDWORD(v206);
                    }
                    *(void *)uint64_t v71 = v56;
                  }
                }
                else
                {
                  BOOL v67 = 0;
                  int v68 = 1;
                  while (v66 != v56)
                  {
                    if (v67) {
                      BOOL v69 = 0;
                    }
                    else {
                      BOOL v69 = v66 == -2;
                    }
                    if (v69) {
                      BOOL v67 = v65;
                    }
                    unsigned int v70 = v64 + v68++;
                    unsigned int v64 = v70 & v63;
                    uint64_t v65 = &v57[8 * (v70 & v63)];
                    uint64_t v66 = *(void *)v65;
                    if (*(void *)v65 == -1) {
                      goto LABEL_137;
                    }
                  }
                }
                goto LABEL_144;
              }
            }
LABEL_247:
            if ((*(unsigned char *)i & 4) != 0) {
              continue;
            }
            goto LABEL_250;
          }
        }
        else if ((v43 & 0x200) == 0)
        {
          goto LABEL_88;
        }
LABEL_182:
        int v86 = v205;
        uint64_t v87 = HIDWORD(v206);
        if (v205 != v204)
        {
          unsigned int v91 = v206;
          goto LABEL_206;
        }
        if (!HIDWORD(v206))
        {
LABEL_190:
          unsigned int v91 = v206;
          if (HIDWORD(v206) < v206)
          {
            ++HIDWORD(v206);
            *(void *)&v205[8 * v87] = i;
            goto LABEL_227;
          }
LABEL_206:
          if (3 * v91 <= 4 * (HIDWORD(v206) - v207))
          {
            if (v91 >= 0x40) {
              v91 *= 2;
            }
            else {
              unsigned int v91 = 128;
            }
          }
          else if (v91 - HIDWORD(v206) >= v91 >> 3)
          {
            goto LABEL_208;
          }
          llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v204, v91);
          unsigned int v91 = v206;
          int v86 = v205;
LABEL_208:
          unsigned int v96 = v91 - 1;
          unsigned int v97 = (v91 - 1) & ((i >> 4) ^ (i >> 9));
          uint64_t v98 = &v86[8 * v97];
          uint64_t v99 = *(void *)v98;
          if (*(void *)v98 == -1)
          {
            int v100 = 0;
LABEL_220:
            if (v100) {
              int v104 = v100;
            }
            else {
              int v104 = v98;
            }
            if (*(void *)v104 != i)
            {
              if (*(void *)v104 == -2) {
                --v207;
              }
              else {
                ++HIDWORD(v206);
              }
              *(void *)int v104 = i;
            }
          }
          else
          {
            int v100 = 0;
            int v101 = 1;
            while (v99 != i)
            {
              if (v100) {
                BOOL v102 = 0;
              }
              else {
                BOOL v102 = v99 == -2;
              }
              if (v102) {
                int v100 = v98;
              }
              unsigned int v103 = v97 + v101++;
              unsigned int v97 = v103 & v96;
              uint64_t v98 = &v86[8 * (v103 & v96)];
              uint64_t v99 = *(void *)v98;
              if (*(void *)v98 == -1) {
                goto LABEL_220;
              }
            }
          }
          goto LABEL_227;
        }
        uint64_t v88 = 0;
        uint64_t v89 = 8 * HIDWORD(v206);
        uint64_t v90 = v205;
        while (*v90 != i)
        {
          if (*v90 == -2) {
            uint64_t v88 = v90;
          }
          ++v90;
          v89 -= 8;
          if (!v89)
          {
            if (!v88) {
              goto LABEL_190;
            }
            *uint64_t v88 = i;
            --v207;
            break;
          }
        }
LABEL_227:
        if (v209)
        {
          int v105 = 32;
          unsigned int v106 = &v210;
        }
        else
        {
          int v105 = v211;
          if (!v211)
          {
            unsigned int v115 = 0;
            goto LABEL_244;
          }
          unsigned int v106 = v210;
        }
        int v107 = v105 - 1;
        unsigned int v108 = ((v203 >> 4) ^ (v203 >> 9)) & v107;
        uint64_t v109 = &v106[v108];
        uint64_t v110 = *v109;
        if (v203 == *v109) {
          goto LABEL_246;
        }
        unsigned int v111 = 0;
        int v112 = 1;
        while (v110 != -4096)
        {
          if (v111) {
            BOOL v113 = 0;
          }
          else {
            BOOL v113 = v110 == -8192;
          }
          if (v113) {
            unsigned int v111 = v109;
          }
          unsigned int v114 = v108 + v112++;
          unsigned int v108 = v114 & v107;
          uint64_t v109 = &v106[v108];
          uint64_t v110 = *v109;
          if (v203 == *v109) {
            goto LABEL_246;
          }
        }
        if (v111) {
          unsigned int v115 = v111;
        }
        else {
          unsigned int v115 = v109;
        }
LABEL_244:
        uint64_t v116 = sub_1CBAA320C((uint64_t)&v209, (uint64_t)&v203, &v203, v115);
        *uint64_t v116 = v203;
        if (v213 >= (unint64_t)HIDWORD(v213)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((void *)v212 + v213) = v203;
        LODWORD(v213) = v213 + 1;
LABEL_246:
        if (i) {
          goto LABEL_247;
        }
LABEL_250:
        while ((*(_WORD *)(i + 44) & 8) != 0)
          uint64_t i = *(void *)(i + 8);
      }
      int v40 = (char *)*((void *)v40 + 1);
      if (v40 == v201)
      {
        unsigned int v117 = v213;
        if (!v213) {
          goto LABEL_379;
        }
LABEL_262:
        unint64_t v118 = (char *)v212 + 8 * v117;
        uint64_t v119 = *((void *)v118 - 1);
        sub_1CBAA360C(&v209, (void *)v118 - 1);
        unsigned int v117 = v213 - 1;
        LODWORD(v213) = v213 - 1;
        unint64_t v120 = *(unsigned __int8 *)(*(void *)(v119 + 16) + 4);
        unint64_t v121 = *(unsigned int *)(v119 + 40);
        if (v121 <= v120) {
          goto LABEL_378;
        }
        while (2)
        {
          uint64_t v122 = *(void *)(v119 + 32);
          if (*(unsigned char *)(v122 + 32 * v120)) {
            goto LABEL_269;
          }
          uint64_t v123 = *(unsigned int *)(v122 + 32 * v120 + 4);
          uint64_t v203 = 0;
          uint64_t v124 = *(void *)(a1 + 256);
          if ((v123 & 0x80000000) != 0) {
            int v125 = (uint64_t *)(*(void *)(v124 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8);
          }
          else {
            int v125 = (uint64_t *)(*(void *)(v124 + 272) + 8 * v123);
          }
          uint64_t v126 = *v125;
          if (!v126) {
            goto LABEL_268;
          }
          if ((*(unsigned char *)(v126 + 3) & 1) == 0)
          {
            uint64_t v155 = *(void *)(v126 + 24);
            if (!v155 || (*(unsigned char *)(v155 + 3) & 1) == 0) {
              goto LABEL_268;
            }
          }
          if ((v123 & 0x80000000) != 0) {
            uint64_t v127 = (uint64_t *)(*(void *)(v124 + 24) + 16 * (v123 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v127 = (uint64_t *)(*(void *)(v124 + 272) + 8 * v123);
          }
          uint64_t v128 = *v127;
          if (v128 && (*(unsigned char *)(v128 + 3) & 1) == 0)
          {
            uint64_t v128 = *(void *)(v128 + 24);
            if (v128 && (*(unsigned char *)(v128 + 3) & 1) == 0) {
              uint64_t v128 = 0;
            }
            uint64_t v9 = v197;
          }
          uint64_t v129 = *(void *)(v128 + 8);
          while (1)
          {
            uint64_t v128 = *(void *)(v128 + 24);
            if (!v128 || (*(unsigned char *)(v128 + 3) & 1) == 0) {
              break;
            }
            if (*(void *)(v128 + 8) != v129) {
              goto LABEL_268;
            }
          }
          uint64_t v203 = v129;
          if (!v129) {
            goto LABEL_268;
          }
          int v131 = v204;
          unint64_t v130 = v205;
          if (v205 == v204)
          {
            unsigned int v132 = HIDWORD(v206);
            uint64_t v133 = &v205[8 * HIDWORD(v206)];
            if (HIDWORD(v206))
            {
              uint64_t v134 = 0;
              while (*(void *)&v205[v134] != v129)
              {
                v134 += 8;
                if (8 * HIDWORD(v206) == v134) {
                  goto LABEL_301;
                }
              }
              uint64_t v133 = &v205[v134];
            }
LABEL_301:
            int v131 = v205;
          }
          else
          {
            int v135 = v206 - 1;
            unsigned int v136 = (v206 - 1) & ((v129 >> 4) ^ (v129 >> 9));
            uint64_t v133 = &v205[8 * v136];
            uint64_t v137 = *(void *)v133;
            if (*(void *)v133 == -1)
            {
              uint64_t v138 = 0;
LABEL_330:
              if (v138) {
                uint64_t v133 = v138;
              }
              unsigned int v132 = HIDWORD(v206);
              if (*(void *)v133 != v129) {
                uint64_t v133 = &v205[8 * v206];
              }
            }
            else
            {
              uint64_t v138 = 0;
              int v139 = 1;
              while (v137 != v129)
              {
                if (v138) {
                  BOOL v140 = 0;
                }
                else {
                  BOOL v140 = v137 == -2;
                }
                if (v140) {
                  uint64_t v138 = v133;
                }
                unsigned int v141 = v136 + v139++;
                unsigned int v136 = v141 & v135;
                uint64_t v133 = &v205[8 * (v141 & v135)];
                uint64_t v137 = *(void *)v133;
                if (*(void *)v133 == -1) {
                  goto LABEL_330;
                }
              }
              unsigned int v132 = HIDWORD(v206);
            }
          }
          unsigned int v142 = v206;
          int v143 = v205 == v131 ? v132 : v206;
          if (v133 != &v205[8 * v143]) {
            goto LABEL_268;
          }
          if (v205 != v131) {
            goto LABEL_316;
          }
          if (v132)
          {
            int v144 = 0;
            uint64_t v145 = 8 * v132;
            unsigned int v146 = v205;
            do
            {
              if (*v146 == v129) {
                goto LABEL_346;
              }
              if (*v146 == -2) {
                int v144 = v146;
              }
              ++v146;
              v145 -= 8;
            }
            while (v145);
            if (v144)
            {
              *int v144 = v129;
              --v207;
              goto LABEL_346;
            }
          }
          if (v206 > v132)
          {
            HIDWORD(v206) = v132 + 1;
            *(void *)&v205[8 * v132] = v129;
            goto LABEL_346;
          }
LABEL_316:
          if (3 * (int)v206 <= 4 * (v132 - v207))
          {
            if (v206 >= 0x40) {
              unsigned int v142 = 2 * v206;
            }
            else {
              unsigned int v142 = 128;
            }
          }
          else if (v206 - v132 >= v206 >> 3)
          {
LABEL_318:
            unsigned int v147 = v142 - 1;
            unsigned int v148 = (v142 - 1) & ((v129 >> 4) ^ (v129 >> 9));
            uint64_t v149 = &v130[8 * v148];
            uint64_t v150 = *(void *)v149;
            if (*(void *)v149 == -1)
            {
              uint64_t v151 = 0;
LABEL_339:
              if (v151) {
                uint64_t v156 = v151;
              }
              else {
                uint64_t v156 = v149;
              }
              if (*(void *)v156 != v129)
              {
                if (*(void *)v156 == -2) {
                  --v207;
                }
                else {
                  ++HIDWORD(v206);
                }
                *(void *)uint64_t v156 = v129;
              }
            }
            else
            {
              uint64_t v151 = 0;
              int v152 = 1;
              while (v150 != v129)
              {
                if (v151) {
                  BOOL v153 = 0;
                }
                else {
                  BOOL v153 = v150 == -2;
                }
                if (v153) {
                  uint64_t v151 = v149;
                }
                unsigned int v154 = v148 + v152++;
                unsigned int v148 = v154 & v147;
                uint64_t v149 = &v130[8 * (v154 & v147)];
                uint64_t v150 = *(void *)v149;
                if (*(void *)v149 == -1) {
                  goto LABEL_339;
                }
              }
            }
LABEL_346:
            if (v209)
            {
              int v157 = 32;
              int v158 = &v210;
LABEL_350:
              int v159 = v157 - 1;
              unsigned int v160 = ((v203 >> 4) ^ (v203 >> 9)) & v159;
              uint64_t v161 = &v158[v160];
              uint64_t v162 = *v161;
              if (v203 != *v161)
              {
                uint64_t v163 = 0;
                int v164 = 1;
                while (v162 != -4096)
                {
                  if (v163) {
                    BOOL v165 = 0;
                  }
                  else {
                    BOOL v165 = v162 == -8192;
                  }
                  if (v165) {
                    uint64_t v163 = v161;
                  }
                  unsigned int v166 = v160 + v164++;
                  unsigned int v160 = v166 & v159;
                  uint64_t v161 = &v158[v160];
                  uint64_t v162 = *v161;
                  if (v203 == *v161) {
                    goto LABEL_268;
                  }
                }
                if (v163) {
                  int v167 = v163;
                }
                else {
                  int v167 = v161;
                }
                goto LABEL_363;
              }
            }
            else
            {
              int v157 = v211;
              if (v211)
              {
                int v158 = v210;
                goto LABEL_350;
              }
              int v167 = 0;
LABEL_363:
              BOOL v168 = sub_1CBAA320C((uint64_t)&v209, (uint64_t)&v203, &v203, v167);
              *BOOL v168 = v203;
              if (v213 >= (unint64_t)HIDWORD(v213)) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              *((void *)v212 + v213) = v203;
              LODWORD(v213) = v213 + 1;
            }
LABEL_268:
            unint64_t v121 = *(unsigned int *)(v119 + 40);
LABEL_269:
            if (++v120 < v121) {
              continue;
            }
            unsigned int v117 = v213;
LABEL_378:
            if (v117) {
              goto LABEL_262;
            }
LABEL_379:
            uint64_t v169 = *((void *)v9 + 41);
            if ((char *)v169 == v201) {
              goto LABEL_427;
            }
            int v171 = v204;
            int v170 = v205;
            int v172 = v206;
            uint64_t v173 = HIDWORD(v206);
            int v174 = v206 - 1;
            if (v205 == v204) {
              int v175 = HIDWORD(v206);
            }
            else {
              int v175 = v206;
            }
            BOOL v176 = &v205[8 * v175];
            uint64_t v177 = 8 * HIDWORD(v206);
            while (2)
            {
              uint64_t v178 = *(void *)(v169 + 56);
              uint64_t v179 = v170;
LABEL_385:
              if (v178 == v169 + 48)
              {
                uint64_t v169 = *(void *)(v169 + 8);
                if ((char *)v169 == v201)
                {
LABEL_427:
                  if (v212 != v214) {
                    free(v212);
                  }
                  if ((v209 & 1) == 0) {
                    MEMORY[0x1D25D9CD0](v210, 8);
                  }
                  goto LABEL_431;
                }
                continue;
              }
              break;
            }
            if (v179 == v171)
            {
              if (v173)
              {
                uint64_t v180 = 0;
                while (*(void *)&v171[v180] != v178)
                {
                  v180 += 8;
                  if (v177 == v180)
                  {
                    int v181 = v173;
                    goto LABEL_406;
                  }
                }
                unsigned int v190 = &v171[v180];
                int v181 = v173;
                uint64_t v179 = v171;
              }
              else
              {
                int v181 = 0;
LABEL_406:
                uint64_t v179 = v171;
                unsigned int v190 = &v171[8 * v173];
              }
            }
            else
            {
              unsigned int v182 = v174 & ((v178 >> 4) ^ (v178 >> 9));
              BOOL v183 = &v170[8 * v182];
              uint64_t v184 = *(void *)v183;
              if (*(void *)v183 == -1)
              {
                uint64_t v185 = 0;
LABEL_408:
                if (v185) {
                  BOOL v183 = v185;
                }
                uint64_t v189 = *(void *)v183;
              }
              else
              {
                uint64_t v185 = 0;
                int v186 = 1;
                while (v184 != v178)
                {
                  if (v185) {
                    BOOL v187 = 0;
                  }
                  else {
                    BOOL v187 = v184 == -2;
                  }
                  if (v187) {
                    uint64_t v185 = v183;
                  }
                  unsigned int v188 = v182 + v186++;
                  unsigned int v182 = v188 & v174;
                  BOOL v183 = &v170[8 * (v188 & v174)];
                  uint64_t v184 = *(void *)v183;
                  if (*(void *)v183 == -1) {
                    goto LABEL_408;
                  }
                }
                uint64_t v189 = v178;
              }
              if (v189 == v178) {
                unsigned int v190 = v183;
              }
              else {
                unsigned int v190 = v176;
              }
              int v181 = v173;
              uint64_t v179 = v170;
            }
            if (v179 != v171) {
              int v181 = v172;
            }
            if (v190 == &v179[8 * v181])
            {
              *(_WORD *)(v178 + 44) = *(_WORD *)(v178 + 44) & 0xC | 0x80;
            }
            else if (!v178)
            {
              goto LABEL_424;
            }
            if ((*(unsigned char *)v178 & 4) == 0)
            {
LABEL_424:
              while ((*(_WORD *)(v178 + 44) & 8) != 0)
                uint64_t v178 = *(void *)(v178 + 8);
            }
            uint64_t v178 = *(void *)(v178 + 8);
            goto LABEL_385;
          }
          break;
        }
        llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v204, v142);
        unsigned int v142 = v206;
        unint64_t v130 = v205;
        goto LABEL_318;
      }
    }
  }
  uint64_t v195 = (char *)v9 + 320;
  unsigned int v196 = v9;
  uint64_t v11 = *((void *)v9 + 41);
  if ((char *)v11 != v195)
  {
    int v193 = v7;
    int v12 = 0;
    while (1)
    {
      uint64_t v13 = *(void *)(v11 + 56);
      if (v13 != v11 + 48) {
        break;
      }
LABEL_75:
      uint64_t v11 = *(void *)(v11 + 8);
      if ((char *)v11 == v195) {
        goto LABEL_432;
      }
    }
    while (1)
    {
      if (v13 && (*(unsigned char *)v13 & 4) != 0)
      {
        __int16 v14 = *(_WORD *)(v13 + 44);
      }
      else
      {
        __int16 v14 = *(_WORD *)(v13 + 44);
        if ((v14 & 8) != 0)
        {
          uint64_t v15 = v13;
          do
            uint64_t v15 = *(void *)(v15 + 8);
          while ((*(_WORD *)(v15 + 44) & 8) != 0);
          goto LABEL_15;
        }
      }
      uint64_t v15 = v13;
LABEL_15:
      uint64_t v16 = *(void *)(v15 + 8);
      if ((v14 & 0x80) == 0) {
        goto LABEL_47;
      }
      int v17 = *(unsigned __int16 **)(v13 + 16);
      int v18 = *v17;
      unsigned int v19 = v18 - 9;
      BOOL v20 = (v18 - 9) > 0x3C || ((1 << (v18 - 9)) & 0x1000000000000605) == 0;
      if (!v20 || v18 == 0) {
        goto LABEL_47;
      }
      uint64_t v22 = *((void *)v17 + 1);
      if ((v22 & 0x10) != 0) {
        goto LABEL_47;
      }
      uint64_t v23 = *((void *)v17 + 2);
      if ((v23 & 0x40) != 0) {
        goto LABEL_47;
      }
      if ((v22 & 0x2000) != 0)
      {
        int v24 = *(_DWORD *)(*(void *)(v13 + 32) + 4);
        if (v24 == 103 || v24 == 391) {
          goto LABEL_47;
        }
      }
      uint64_t v25 = *((void *)v17 + 2) & 0x1D00;
      if (v199) {
        BOOL v26 = v25 == 1280;
      }
      else {
        BOOL v26 = 0;
      }
      char v27 = v26;
      BOOL v28 = v25 != 2304 || v200 == 0;
      if (!v28 || (v27 & 1) != 0 || v198 && (v23 & 2) != 0)
      {
        unsigned int v29 = *(_DWORD *)(v13 + 40);
        for (unsigned int j = *((unsigned __int8 *)v17 + 4); v29 > j; unsigned int j = *(unsigned __int8 *)(*(void *)(v13 + 16) + 4))
        {
          llvm::MachineInstr::removeOperand((char *)v13, v29 - 1);
          unsigned int v29 = *(_DWORD *)(v13 + 40);
        }
        *(void *)(v13 + 16) = *(void *)(*(void *)(a1 + 248) + 8) + 480;
        llvm::MachineInstr::dropMemRefs(v13, v196);
      }
      else
      {
        uint64_t v31 = *((void *)v17 + 2) & 0x1E00;
        if (v199) {
          BOOL v32 = v31 == 1536;
        }
        else {
          BOOL v32 = 0;
        }
        char v33 = v32;
        BOOL v34 = v31 != 2560 || v200 == 0;
        if (!v34
          || (v33 & 1) != 0
          || v198
          && (v194 = v12, v35 = sub_1CBE52E8C(*v17), int v12 = v194, (v35 & 0xFF00000000) != 0)
          && (v35 - 79) <= 1)
        {
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v13);
        }
        else
        {
          if (!v193 || (v19 > 0x3C || ((1 << v19) & 0x1000000000000405) == 0) && v18 && (v23 & 1) == 0)
          {
            *(_WORD *)(v13 + 44) = v14 & 0xFF7F;
            goto LABEL_47;
          }
          unsigned int v36 = *(_DWORD *)(v13 + 40);
          for (unsigned int k = *((unsigned __int8 *)v17 + 4); v36 > k; unsigned int k = *(unsigned __int8 *)(*(void *)(v13 + 16) + 4))
          {
            llvm::MachineInstr::removeOperand((char *)v13, v36 - 1);
            unsigned int v36 = *(_DWORD *)(v13 + 40);
          }
          *(void *)(v13 + 16) = *(void *)(*(void *)(a1 + 248) + 8) + 480;
        }
      }
      int v12 = 1;
LABEL_47:
      uint64_t v13 = v16;
      if (v16 == v11 + 48) {
        goto LABEL_75;
      }
    }
  }
LABEL_431:
  LOBYTE(v12) = 0;
LABEL_432:
  if (v205 != v204)
  {
    char v191 = v12;
    free(v205);
    LOBYTE(v12) = v191;
  }
  return v12 & 1;
}

void sub_1CBC3130C(uint64_t a1)
{
}

uint64_t sub_1CBC313BC(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if ((**(unsigned char **)(a2 + 360) & 0x10) != 0 || !byte_1EBCC2138) {
    return v2;
  }
  int v5 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  if (v6 == v7)
  {
LABEL_29:
    uint64_t v8 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v6 != &llvm::TargetPassConfig::ID)
    {
      v6 += 16;
      if (v6 == v7) {
        goto LABEL_29;
      }
    }
    uint64_t v8 = *(void *)(v6 + 8);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v8 + 96))(v8, &llvm::TargetPassConfig::ID);
  uint64_t v10 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  if (v11 == v12)
  {
LABEL_9:
    uint64_t v13 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v11 != &unk_1EA61EFE3)
    {
      v11 += 16;
      if (v11 == v12) {
        goto LABEL_9;
      }
    }
    uint64_t v13 = *(void *)(v11 + 8);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v13 + 96))(v13, &unk_1EA61EFE3);
  if (word_1EBCC2180)
  {
    if (byte_1EBCC21F8) {
      goto LABEL_13;
    }
  }
  else if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 280))(v9))
  {
LABEL_13:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 288))(&v24, v9);
    if (!*(unsigned char *)(v14 + 624))
    {
      sub_1CC6DE3E0(v14 + 248);
      uint64_t v22 = v24;
      uint64_t v24 = 0;
      uint64_t v23 = *(void *)(v14 + 448);
      *(void *)(v14 + 448) = v22;
      if (v23) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
      sub_1CC6DE1A0((uint64_t *)(v14 + 248), *(void **)(v14 + 616));
      *(unsigned char *)(v14 + 624) = 1;
    }
    uint64_t v15 = v24;
    uint64_t v24 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  if (*(_DWORD *)(*(void *)(a2 + 8) + 552)) {
    llvm::FunctionPass::skipFunction(a1, *(llvm::LLVMContextImpl *****)a2);
  }
  uint64_t v16 = (uint64_t *)*((void *)a1 + 1);
  uint64_t v17 = *v16;
  uint64_t v18 = v16[1];
  if (v17 == v18)
  {
LABEL_21:
    uint64_t v19 = 0;
  }
  else
  {
    while (*(_UNKNOWN **)v17 != &unk_1EA61EFE4)
    {
      v17 += 16;
      if (v17 == v18) {
        goto LABEL_21;
      }
    }
    uint64_t v19 = *(void *)(v17 + 8);
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v19 + 96))(v19, &unk_1EA61EFE4);
  sub_1CBA02330(v20);
  return sub_1CC6EB0C4();
}

uint64_t sub_1CBC31760(uint64_t a1, llvm::IntegerType *****a2, uint64_t a3, uint64_t a4)
{
  uint64_t v361 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(llvm::IntegerType ******)(a1 + 32);
  uint64_t v8 = *(void *)(a4 + 8);
  uint64_t v9 = *(llvm::IntegerType ******)(v8 + 40);
  v332[0] = (llvm::IntegerType *****)a4;
  v332[1] = v9;
  v332[2] = a2;
  v332[3] = v7;
  v332[4] = 0;
  v332[5] = 0;
  v332[6] = (llvm::IntegerType *****)(*(uint64_t (**)(void))(**(void **)(v8 + 16) + 184))(*(void *)(v8 + 16));
  v332[7] = (llvm::IntegerType *****)(*(uint64_t (**)(void))(**(void **)(*(void *)(a4 + 8) + 16)
                                                                       + 176))(*(void *)(*(void *)(a4 + 8) + 16));
  uint64_t v10 = *(void **)(a4 + 8);
  uint64_t v11 = v10[5];
  uint64_t v12 = **(unsigned __int16 **)(a3 + 16);
  if (v12 <= 0xA2)
  {
    if (**(unsigned __int16 **)(a3 + 16) > 0x4Bu)
    {
      switch(**(_WORD **)(a3 + 16))
      {
        case 0x77:
          *(void *)(a4 + 40) = *(void *)(a3 + 24);
          *(void *)(a4 + 48) = a3;
          uint64_t v13 = *(void *)(a3 + 32);
          unsigned int v14 = *(_DWORD *)(v13 + 4);
          if ((v14 & 0x80000000) != 0 && (v14 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432)) {
            unint64_t v15 = *(void *)(*(void *)(v11 + 424) + 8 * (v14 & 0x7FFFFFFF));
          }
          else {
            unint64_t v15 = 0;
          }
          unint64_t v359 = v15;
          uint64_t v122 = *(unsigned int *)(v13 + 36);
          if ((v122 & 0x80000000) != 0) {
            uint64_t v123 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v122 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v123 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v122);
          }
          uint64_t v124 = *v123;
          if (v124
            && ((*(unsigned char *)(v124 + 3) & 1) != 0
             || (uint64_t v124 = *(void *)(v124 + 24)) != 0 && (*(unsigned char *)(v124 + 3) & 1) != 0))
          {
            uint64_t v125 = *(void *)(v124 + 8);
          }
          else
          {
            uint64_t v125 = 0;
          }
          uint64_t v127 = sub_1CB8F1DC4(&v359);
          if (v126 == 1) {
          int v128 = **(unsigned __int16 **)(v125 + 16);
          }
          if (v127 == 16 && v128 == 313)
          {
            LODWORD(v333) = v14;
            LODWORD(v334) = 1;
            uint64_t v129 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 313, &v333, 1, 0, 0, 0);
            uint64_t v130 = *(void *)(*(void *)(v125 + 32) + 48);
            LODWORD(v346) = 1;
            *((void *)&v346 + 1) = 0;
            *(void *)&long long v347 = v130;
            llvm::MachineInstr::addOperand(v131, v129, (const llvm::MachineOperand *)&v346);
            goto LABEL_370;
          }
          if (v128 == 116)
          {
            if (!sub_1CBC3CF54((uint64_t)v332, *(_DWORD *)(*(void *)(a3 + 32) + 36))) {
              goto LABEL_14;
            }
            uint64_t v213 = *(unsigned int *)(v125 + 40);
            if (v213)
            {
              uint64_t v214 = 0;
              unsigned int v215 = *(unsigned __int8 **)(v125 + 32);
              while (1)
              {
                int v216 = *v215;
                v215 += 32;
                if (v216 == 17) {
                  break;
                }
                if (v213 == ++v214) {
                  goto LABEL_346;
                }
              }
            }
            else
            {
LABEL_346:
              LODWORD(v214) = -1;
            }
            int v217 = *(_DWORD *)(*(void *)(v125 + 32) + 32 * v214 + 16);
            if (v217 == 2579 || v217 == 2488)
            {
              ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[4])(a2, v125);
              llvm::MachineOperand::setReg(*(void *)(v125 + 32), v14);
              ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[5])(a2, v125);
              llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
              return 1;
            }
            goto LABEL_14;
          }
          if (v128 != 308) {
            goto LABEL_14;
          }
          uint64_t v156 = *(unsigned int *)(*(void *)(v125 + 32) + 4);
          int v157 = (uint64_t *)((v156 & 0x80000000) != 0
                           ? *(void *)(v11 + 24) + 16 * (v156 & 0x7FFFFFFF) + 8
                           : *(void *)(v11 + 272) + 8 * v156);
          uint64_t v158 = *v157;
          if (!v158) {
            goto LABEL_14;
          }
          while ((*(unsigned char *)(v158 + 3) & 1) != 0)
          {
            uint64_t v158 = *(void *)(v158 + 24);
            if (!v158) {
              goto LABEL_14;
            }
          }
          while (1)
          {
            uint64_t v158 = *(void *)(v158 + 24);
            if (!v158) {
              break;
            }
            if ((*(unsigned char *)(v158 + 3) & 1) == 0) {
              goto LABEL_14;
            }
          }
          int v159 = sub_1CBAA7360(&v359, v125, 1u, *(void *)(v11 + 424), *(_DWORD *)(v11 + 432), (void *)a4);
          int v160 = sub_1CBAA7360(&v359, v125, 3u, *(void *)(v11 + 424), *(_DWORD *)(v11 + 432), (void *)a4);
          uint64_t v161 = *(unsigned __int16 *)(v125 + 44) | 0x100000000;
          LODWORD(v333) = v14;
          LODWORD(v334) = 1;
          LODWORD(v346) = v159;
          LODWORD(v347) = 0;
          DWORD2(v347) = v160;
          LODWORD(v349) = 0;
          uint64_t v162 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32);
          uint64_t v163 = a4;
          uint64_t v164 = 47;
          goto LABEL_245;
        case 0x78:
        case 0x79:
        case 0x7A:
        case 0x7B:
        case 0x7C:
        case 0x7D:
          goto LABEL_121;
        case 0x7E:
          goto LABEL_13;
        case 0x7F:
          int v104 = *(_DWORD *)(*(void *)(a3 + 32) + 4);
          if (v104 < 0 && (uint64_t v105 = v104 & 0x7FFFFFFF, v105 < *(_DWORD *)(v11 + 432))) {
            unint64_t v106 = *(void *)(*(void *)(v11 + 424) + 8 * v105);
          }
          else {
            unint64_t v106 = 0;
          }
          unint64_t v331 = v106;
          if (sub_1CBC3CDF8((uint64_t *)v332, a3, &v331)) {
            return 1;
          }
          uint64_t v132 = *(unsigned int *)(*(void *)(a3 + 32) + 4);
          *(void *)(a4 + 40) = *(void *)(a3 + 24);
          *(void *)(a4 + 48) = a3;
          if ((v132 & 0x80000000) != 0) {
            uint64_t v133 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v132 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v133 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v132);
          }
          uint64_t v134 = *v133;
          if (!v134) {
            goto LABEL_191;
          }
          while ((*(unsigned char *)(v134 + 3) & 1) != 0)
          {
            uint64_t v134 = *(void *)(v134 + 24);
            if (!v134) {
              goto LABEL_191;
            }
          }
          uint64_t v166 = *(void *)(v134 + 8);
LABEL_247:
          uint64_t v167 = v166;
          if (**(_WORD **)(v166 + 16) == 45)
          {
            uint64_t v168 = *(void *)(v166 + 32);
            uint64_t v169 = *(unsigned int *)(v168 + 36);
            if ((v169 & 0x80000000) != 0) {
              int v170 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v169 & 0x7FFFFFFF) + 8);
            }
            else {
              int v170 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v169);
            }
            uint64_t v171 = *v170;
            if ((*(unsigned char *)(v171 + 3) & 1) == 0) {
              uint64_t v171 = *(void *)(v171 + 24);
            }
            if (**(_WORD **)(*(void *)(v171 + 8) + 16) == 282) {
              goto LABEL_197;
            }
            uint64_t v172 = *(unsigned int *)(v168 + 68);
            if ((v172 & 0x80000000) != 0) {
              uint64_t v173 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v172 & 0x7FFFFFFF) + 8);
            }
            else {
              uint64_t v173 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v172);
            }
            uint64_t v174 = *v173;
            if ((*(unsigned char *)(v174 + 3) & 1) == 0) {
              uint64_t v174 = *(void *)(v174 + 24);
            }
            if (**(_WORD **)(*(void *)(v174 + 8) + 16) == 282) {
              goto LABEL_197;
            }
          }
          while (1)
          {
            uint64_t v134 = *(void *)(v134 + 24);
            if (!v134) {
              break;
            }
            if ((*(unsigned char *)(v134 + 3) & 1) == 0)
            {
              uint64_t v166 = *(void *)(v134 + 8);
              if (v166 != v167) {
                goto LABEL_247;
              }
            }
          }
LABEL_191:
          int v135 = (uint64_t *)((v132 & 0x80000000) != 0
                           ? *(void *)(v11 + 24) + 16 * (v132 & 0x7FFFFFFF) + 8
                           : *(void *)(v11 + 272) + 8 * v132);
          uint64_t v136 = *v135;
          if (!v136) {
            goto LABEL_197;
          }
          if ((*(unsigned char *)(v136 + 3) & 1) == 0)
          {
            uint64_t v136 = *(void *)(v136 + 24);
            if (!v136 || (*(unsigned char *)(v136 + 3) & 1) == 0) {
              goto LABEL_197;
            }
          }
          uint64_t v137 = *(void *)(v136 + 8);
          if (!v137) {
            goto LABEL_197;
          }
          if (**(_WORD **)(v137 + 16) != 127) {
            goto LABEL_197;
          }
          if (*(_DWORD *)(v137 + 40) != 3) {
            goto LABEL_197;
          }
          uint64_t v226 = *(void *)(v137 + 32);
          uint64_t v227 = *(unsigned int *)(v226 + 36);
          sub_1CC73C210(*(_DWORD *)(v226 + 68), v11, (uint64_t)&v346);
          if (!(_BYTE)v347) {
            goto LABEL_197;
          }
          if (DWORD2(v346) >= 0x41) {
            goto LABEL_571;
          }
          if ((v227 & 0x80000000) != 0) {
            unint64_t v228 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v227 & 0x7FFFFFFF) + 8);
          }
          else {
            unint64_t v228 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v227);
          }
          uint64_t v229 = *v228;
          if (!v229) {
            goto LABEL_197;
          }
          while ((*(unsigned char *)(v229 + 3) & 1) != 0)
          {
            uint64_t v229 = *(void *)(v229 + 24);
            if (!v229) {
              goto LABEL_197;
            }
          }
          int64_t v242 = (uint64_t)((void)v346 << -(uint64_t)DWORD2(v346)) >> -(uint64_t)DWORD2(v346);
          while (1)
          {
            uint64_t v229 = *(void *)(v229 + 24);
            if (!v229) {
              break;
            }
            if ((*(unsigned char *)(v229 + 3) & 1) == 0) {
              goto LABEL_197;
            }
          }
          if ((v227 & 0x80000000) != 0) {
            uint64_t v252 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v227 & 0x7FFFFFFF) + 8);
          }
          else {
            uint64_t v252 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v227);
          }
          uint64_t v253 = *v252;
          if (!v253) {
            goto LABEL_412;
          }
          if ((*(unsigned char *)(v253 + 3) & 1) == 0)
          {
            uint64_t v253 = *(void *)(v253 + 24);
            if (!v253 || (*(unsigned char *)(v253 + 3) & 1) == 0) {
              goto LABEL_412;
            }
          }
          uint64_t v254 = *(void *)(v253 + 8);
          if (!v254 || **(_WORD **)(v254 + 16) != 45 || *(_DWORD *)(v254 + 40) != 3) {
            goto LABEL_412;
          }
          uint64_t v255 = *(void *)(v254 + 32);
          unsigned int v256 = *(_DWORD *)(v255 + 36);
          sub_1CC73C210(*(_DWORD *)(v255 + 68), v11, (uint64_t)&v346);
          if (!(_BYTE)v347) {
            goto LABEL_411;
          }
          if (DWORD2(v346) < 0x41)
          {
            uint64_t v261 = (uint64_t)((void)v346 << -(uint64_t)DWORD2(v346)) >> -(uint64_t)DWORD2(v346);
            goto LABEL_479;
          }
          if ((void)v346) {
            MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
          }
LABEL_411:
          sub_1CC73C210(*(_DWORD *)(*(void *)(v254 + 32) + 36), v11, (uint64_t)&v346);
          if ((_BYTE)v347)
          {
            if (DWORD2(v346) < 0x41)
            {
              uint64_t v261 = (uint64_t)((void)v346 << -(uint64_t)DWORD2(v346)) >> -(uint64_t)DWORD2(v346);
              unsigned int v256 = *(_DWORD *)(*(void *)(v254 + 32) + 68);
LABEL_479:
              if (v242 <= 4)
              {
LABEL_506:
                if ((v256 & 0x80000000) != 0) {
                  uint64_t v297 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v256 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v297 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v256);
                }
                uint64_t v298 = *v297;
                if (v298)
                {
                  if ((*(unsigned char *)(v298 + 3) & 1) != 0
                    || (uint64_t v298 = *(void *)(v298 + 24)) != 0 && (*(unsigned char *)(v298 + 3) & 1) != 0)
                  {
                    uint64_t v299 = *(void *)(v298 + 8);
                    if (v299)
                    {
                      if (**(_WORD **)(v299 + 16) == 127 && *(_DWORD *)(v299 + 40) == 3)
                      {
                        sub_1CC73C210(*(_DWORD *)(*(void *)(v299 + 32) + 68), v11, (uint64_t)&v346);
                        if ((_BYTE)v347)
                        {
                          if (DWORD2(v346) < 0x41)
                          {
                            if (((uint64_t)((void)v346 << -(uint64_t)DWORD2(v346)) >> -(uint64_t)DWORD2(v346)) + v242 <= 4) {
                              goto LABEL_512;
                            }
                            goto LABEL_197;
                          }
                          if ((void)v346) {
                            MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
                          }
                        }
                      }
                    }
                  }
                }
LABEL_512:
                *(_WORD *)(a3 + 44) &= 0xE7FFu;
                unint64_t v333 = v331;
                LODWORD(v334) = 0;
                LODWORD(v346) = v256;
                LODWORD(v347) = 0;
                unint64_t v359 = v331;
                unsigned int v360 = 0;
                int v300 = (llvm::LLVMContext *)(unsigned __int16)(v331 >> 3);
                uint64_t v301 = (llvm::LLVMContext *)(unsigned __int16)(v331 >> 19);
                if ((v331 & 2) == 0) {
                  uint64_t v301 = (llvm::LLVMContext *)(v331 >> 19);
                }
                if ((v331 & 4) != 0) {
                  int v300 = v301;
                }
                if (v331) {
                  uint64_t v302 = (llvm::LLVMContext *)(v331 >> 3);
                }
                else {
                  uint64_t v302 = v300;
                }
                uint64_t v303 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), v302);
                uint64_t v304 = llvm::ConstantInt::get(v303, v242, (const llvm::APInt *)1);
                *((void *)&v347 + 1) = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a4 + 16))(a4, &v359, v304);
                uint64_t v348 = v305;
                LODWORD(v349) = 1;
                (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 127, &v333, 1, &v346, 2, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
                if ((v227 & 0x80000000) != 0) {
                  uint64_t v307 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v227 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v307 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v227);
                }
                uint64_t v308 = *v307;
                if ((*(unsigned char *)(v308 + 3) & 1) == 0) {
                  uint64_t v308 = *(void *)(v308 + 24);
                }
                uint64_t v309 = **(unsigned __int16 **)(*(void *)(v308 + 8) + 16);
                LODWORD(v333) = v132;
                LODWORD(v334) = 1;
                LODWORD(v346) = *(_DWORD *)(*(void *)(v306 + 32) + 4);
                LODWORD(v347) = 0;
                unint64_t v359 = v331;
                unsigned int v360 = 0;
                unint64_t v310 = v261 << v242;
                if (v331)
                {
                  unint64_t v311 = (v331 >> 3);
                }
                else if ((v331 & 4) != 0)
                {
                  if ((v331 & 2) != 0) {
                    unint64_t v311 = (unsigned __int16)(v331 >> 19);
                  }
                  else {
                    unint64_t v311 = (v331 >> 19);
                  }
                }
                else
                {
                  unint64_t v311 = (unsigned __int16)(v331 >> 3);
                }
                int v312 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)v311);
                uint64_t v313 = llvm::ConstantInt::get(v312, v310, (const llvm::APInt *)1);
                *((void *)&v347 + 1) = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a4 + 16))(a4, &v359, v313);
                uint64_t v348 = v314;
                LODWORD(v349) = 1;
                uint64_t v161 = *(unsigned __int16 *)(a3 + 44) | 0x100000000;
                uint64_t v162 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32);
                uint64_t v163 = a4;
                uint64_t v164 = v309;
LABEL_245:
                uint64_t v165 = 2;
                goto LABEL_369;
              }
LABEL_197:
              if (sub_1CD2C1210(v332, (llvm::MachineInstr *)a3)) {
                return 1;
              }
              return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
            }
            if ((void)v346) {
              MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
            }
          }
LABEL_412:
          if ((v227 & 0x80000000) != 0) {
            unsigned int v257 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v227 & 0x7FFFFFFF) + 8);
          }
          else {
            unsigned int v257 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v227);
          }
          uint64_t v258 = *v257;
          if (!v258) {
            goto LABEL_197;
          }
          if ((*(unsigned char *)(v258 + 3) & 1) == 0)
          {
            uint64_t v258 = *(void *)(v258 + 24);
            if (!v258 || (*(unsigned char *)(v258 + 3) & 1) == 0) {
              goto LABEL_197;
            }
          }
          uint64_t v259 = *(void *)(v258 + 8);
          if (!v259 || **(_WORD **)(v259 + 16) != 66 || *(_DWORD *)(v259 + 40) != 3) {
            goto LABEL_197;
          }
          uint64_t v260 = *(void *)(v259 + 32);
          unsigned int v256 = *(_DWORD *)(v260 + 36);
          sub_1CC73C210(*(_DWORD *)(v260 + 68), v11, (uint64_t)&v346);
          if (!(_BYTE)v347) {
            goto LABEL_420;
          }
          if (DWORD2(v346) >= 0x41)
          {
            if ((void)v346) {
              MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
            }
LABEL_420:
            sub_1CC73C210(*(_DWORD *)(*(void *)(v259 + 32) + 36), v11, (uint64_t)&v346);
            if (!(_BYTE)v347) {
              goto LABEL_197;
            }
            if (DWORD2(v346) >= 0x41)
            {
LABEL_571:
              if ((void)v346) {
                MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
              }
              goto LABEL_197;
            }
            uint64_t v261 = (uint64_t)((void)v346 << -(uint64_t)DWORD2(v346)) >> -(uint64_t)DWORD2(v346);
            unsigned int v256 = *(_DWORD *)(*(void *)(v259 + 32) + 68);
          }
          else
          {
            uint64_t v261 = (uint64_t)((void)v346 << -(uint64_t)DWORD2(v346)) >> -(uint64_t)DWORD2(v346);
          }
          if (v242 < 5) {
            goto LABEL_506;
          }
          goto LABEL_197;
        case 0x80:
          if ((sub_1CD2C1210(v332, (llvm::MachineInstr *)a3) & 1) == 0) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
          return 1;
        default:
          if (v12 != 76)
          {
            if (v12 != 116) {
              goto LABEL_121;
            }
            uint64_t v22 = *(unsigned int *)(a3 + 40);
            uint64_t v23 = *(void *)(a3 + 32);
            if (v22)
            {
              uint64_t v24 = 0;
              uint64_t v25 = *(unsigned __int8 **)(a3 + 32);
              while (1)
              {
                int v26 = *v25;
                v25 += 32;
                if (v26 == 17) {
                  break;
                }
                if (v22 == ++v24) {
                  goto LABEL_28;
                }
              }
            }
            else
            {
LABEL_28:
              LODWORD(v24) = -1;
            }
            uint64_t v27 = v24;
            int v28 = *(_DWORD *)(v23 + 32 * v24 + 16);
            int v29 = v28 - 2756;
            if ((v28 - 2756) <= 0xA && ((1 << (v28 + 60)) & 0x555) != 0)
            {
              if (!*(unsigned char *)(v10[2] + 305)) {
                return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
              }
              uint64_t v31 = *(unsigned int *)(v23 + 4);
              BOOL v32 = (uint64_t *)((v31 & 0x80000000) != 0
                              ? *(void *)(v11 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8
                              : *(void *)(v11 + 272) + 8 * v31);
              uint64_t v33 = *v32;
              if (!v33) {
                return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
              }
              while ((*(unsigned char *)(v33 + 3) & 1) != 0)
              {
                uint64_t v33 = *(void *)(v33 + 24);
                if (!v33) {
                  return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
                }
              }
              while (1)
              {
                uint64_t v33 = *(void *)(v33 + 24);
                if (!v33) {
                  break;
                }
                if ((*(unsigned char *)(v33 + 3) & 1) == 0) {
                  return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
                }
              }
              BOOL v34 = (uint64_t *)((v31 & 0x80000000) != 0
                              ? *(void *)(v11 + 24) + 16 * (v31 & 0x7FFFFFFF) + 8
                              : *(void *)(v11 + 272) + 8 * v31);
              for (uint64_t i = *v34; (*(unsigned char *)(i + 3) & 1) != 0; uint64_t i = *(void *)(i + 24))
                ;
              uint64_t v198 = *(void *)(i + 8);
              if (**(_WORD **)(v198 + 16) != 74) {
                return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
              }
              *(void *)&long long v346 = &v347;
              *((void *)&v346 + 1) = 0x800000000;
              int v199 = *(_DWORD *)(v198 + 40);
              unint64_t v200 = (v199 - 1);
              if (v199 == 1)
              {
LABEL_371:
                ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[4])(a2, a3);
                *(_DWORD *)(*(void *)(a3 + 32) + 32 * v27 + 16) = dword_1CDC7F7E4[v29];
                ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[5])(a2, a3);
                if (DWORD2(v346))
                {
                  uint64_t v239 = (uint64_t *)v346;
                  uint64_t v240 = 8 * DWORD2(v346);
                  do
                  {
                    uint64_t v241 = *v239++;
                    ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[4])(a2, v241);
                    *(void *)(v241 + 16) = *(void *)(*(void *)(a4 + 16) + 8) + 912;
                    ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[5])(a2, v241);
                    v240 -= 8;
                  }
                  while (v240);
                }
                BOOL v203 = 0;
              }
              else
              {
                unsigned int v201 = 0;
                uint64_t v202 = 0;
                BOOL v203 = 1;
                while (1)
                {
                  uint64_t v204 = *(unsigned int *)(*(void *)(v198 + 32) + 32 * v202 + 4);
                  uint64_t v205 = (uint64_t *)((v204 & 0x80000000) != 0
                                   ? *(void *)(v11 + 24) + 16 * (v204 & 0x7FFFFFFF) + 8
                                   : *(void *)(v11 + 272) + 8 * v204);
                  uint64_t v206 = *v205;
                  if (!v206) {
                    break;
                  }
                  while ((*(unsigned char *)(v206 + 3) & 1) != 0)
                  {
                    uint64_t v206 = *(void *)(v206 + 24);
                    if (!v206) {
                      goto LABEL_375;
                    }
                  }
                  while (1)
                  {
                    uint64_t v206 = *(void *)(v206 + 24);
                    if (!v206) {
                      break;
                    }
                    if ((*(unsigned char *)(v206 + 3) & 1) == 0) {
                      goto LABEL_375;
                    }
                  }
                  int v207 = (uint64_t *)((v204 & 0x80000000) != 0
                                   ? *(void *)(v11 + 24) + 16 * (v204 & 0x7FFFFFFF) + 8
                                   : *(void *)(v11 + 272) + 8 * v204);
                  for (uint64_t j = *v207; (*(unsigned char *)(j + 3) & 1) != 0; uint64_t j = *(void *)(j + 24))
                    ;
                  uint64_t v209 = *(void *)(j + 8);
                  if (**(_WORD **)(v209 + 16) != 182) {
                    break;
                  }
                  if (v201 >= HIDWORD(v346)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  *(void *)(v346 + 8 * v201) = v209;
                  unsigned int v201 = ++DWORD2(v346);
                  BOOL v203 = ++v202 < v200;
                  if (v202 == v200) {
                    goto LABEL_371;
                  }
                }
              }
LABEL_375:
              if ((long long *)v346 != &v347) {
                free((void *)v346);
              }
              if (!v203) {
                return 1;
              }
              return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
            }
            if (v28 != 2131) {
              return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
            }
            uint64_t v190 = *(unsigned int *)(v23 + 68);
            if ((v190 & 0x80000000) != 0) {
              char v191 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v190 & 0x7FFFFFFF) + 8);
            }
            else {
              char v191 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v190);
            }
            uint64_t v192 = *v191;
            if ((*(unsigned char *)(v192 + 3) & 1) == 0) {
              uint64_t v192 = *(void *)(v192 + 24);
            }
            int v193 = *(_DWORD *)(v23 + 4);
            uint64_t v194 = *(void *)(v192 + 8);
            int v195 = **(unsigned __int16 **)(v194 + 16);
            if ((v195 & 0xFFFE) == 0x74)
            {
              uint64_t v196 = *(unsigned int *)(v194 + 40);
              if (v196)
              {
                unint64_t v197 = (_DWORD *)(*(void *)(v194 + 32) + 16);
                while (*((unsigned char *)v197 - 16) != 17)
                {
                  v197 += 8;
                  if (!--v196) {
                    goto LABEL_386;
                  }
                }
                if (*v197 == 2131)
                {
                  *(void *)(a4 + 40) = *(void *)(a3 + 24);
                  *(void *)(a4 + 48) = a3;
                  uint64_t v75 = 1;
                  LODWORD(v333) = v193;
                  LODWORD(v334) = 1;
                  LODWORD(v346) = v190;
                  goto LABEL_171;
                }
              }
            }
LABEL_386:
            if (v195 != 301 && v195 != 299) {
              return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
            }
            uint64_t v243 = (uint64_t *)((v190 & 0x80000000) != 0
                             ? *(void *)(v11 + 24) + 16 * (v190 & 0x7FFFFFFF) + 8
                             : *(void *)(v11 + 272) + 8 * v190);
            uint64_t v244 = *v243;
            if (!v244) {
              return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
            }
            while ((*(unsigned char *)(v244 + 3) & 1) != 0)
            {
              uint64_t v244 = *(void *)(v244 + 24);
              if (!v244) {
                return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
              }
            }
            while (1)
            {
              uint64_t v244 = *(void *)(v244 + 24);
              if (!v244) {
                break;
              }
              if ((*(unsigned char *)(v244 + 3) & 1) == 0) {
                return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
              }
            }
            if (v195 == 301) {
              uint64_t v245 = 302;
            }
            else {
              uint64_t v245 = 300;
            }
            *(void *)(a4 + 40) = *(void *)(a3 + 24);
            *(void *)(a4 + 48) = a3;
            LODWORD(v346) = v193;
            DWORD2(v346) = 1;
            uint64_t v246 = (*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, v245, &v346, 1, 0, 0, 0);
            if (*(_DWORD *)(v194 + 40) >= 2u)
            {
              unsigned int v248 = (llvm::MachineFunction *)v246;
              uint64_t v249 = v247;
              unint64_t v250 = 1;
              uint64_t v251 = 32;
              do
              {
                llvm::MachineInstr::addOperand(v249, v248, (const llvm::MachineOperand *)(*(void *)(v194 + 32) + v251));
                ++v250;
                v251 += 32;
              }
              while (v250 < *(unsigned int *)(v194 + 40));
            }
            goto LABEL_370;
          }
          uint64_t v109 = *(_DWORD **)(a3 + 32);
          int v110 = v109[1];
          if (v110 < 0 && (v110 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432))
          {
            unint64_t v111 = *(void *)(*(void *)(v11 + 424) + 8 * (v110 & 0x7FFFFFFF));
            if (v111)
            {
              uint64_t v112 = (v111 >> 3);
              goto LABEL_213;
            }
            if ((v111 & 4) != 0)
            {
              if ((v111 & 2) != 0) {
                uint64_t v112 = (unsigned __int16)(v111 >> 19);
              }
              else {
                uint64_t v112 = (v111 >> 19);
              }
LABEL_213:
              if (v112 != 32 || *(_DWORD *)(a3 + 40) != 3) {
                return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
              }
              uint64_t v147 = v109[9];
              if ((v147 & 0x80000000) != 0) {
                unsigned int v148 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v147 & 0x7FFFFFFF) + 8);
              }
              else {
                unsigned int v148 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v147);
              }
              uint64_t v149 = *v148;
              if (v149)
              {
                if (*(unsigned char *)(v149 + 3))
                {
LABEL_219:
                  uint64_t v149 = *(void *)(v149 + 8);
                  goto LABEL_220;
                }
                uint64_t v149 = *(void *)(v149 + 24);
                if (v149)
                {
                  if (*(unsigned char *)(v149 + 3)) {
                    goto LABEL_219;
                  }
                  uint64_t v149 = 0;
                }
              }
LABEL_220:
              uint64_t v150 = v109[17];
              if ((v150 & 0x80000000) != 0) {
                uint64_t v151 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
              }
              else {
                uint64_t v151 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v150);
              }
              uint64_t v152 = *v151;
              if (v152)
              {
                if ((*(unsigned char *)(v152 + 3) & 1) == 0)
                {
                  uint64_t v152 = *(void *)(v152 + 24);
                  if (!v152) {
                    goto LABEL_225;
                  }
                  if ((*(unsigned char *)(v152 + 3) & 1) == 0)
                  {
                    uint64_t v152 = 0;
                    goto LABEL_225;
                  }
                }
                uint64_t v152 = *(void *)(v152 + 8);
              }
LABEL_225:
              if (**(_WORD **)(v149 + 16) == 313 && **(_WORD **)(v152 + 16) == 313)
              {
                uint64_t v153 = *(void *)(v149 + 32);
                uint64_t v154 = *(void *)(v153 + 48);
                if ((v154 & 3) == 0 && v154 + 2 == *(void *)(*(void *)(v152 + 32) + 48))
                {
                  *(void *)(a4 + 40) = *(void *)(a3 + 24);
                  *(void *)(a4 + 48) = a3;
                  uint64_t v75 = 1;
                  LODWORD(v333) = v110;
                  LODWORD(v334) = 1;
                  *(void *)&long long v346 = *(void *)(v153 + 48);
                  LODWORD(v347) = 3;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 313, &v333, 1, &v346, 1, 0);
                  goto LABEL_172;
                }
              }
              return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
            }
          }
          else
          {
            unint64_t v111 = 0;
          }
          uint64_t v112 = (unsigned __int16)(v111 >> 3);
          goto LABEL_213;
      }
    }
    if (**(unsigned __int16 **)(a3 + 16) > 0x33u)
    {
      if ((v12 - 52) < 2)
      {
LABEL_13:
        *(void *)(a4 + 40) = *(void *)(a3 + 24);
        *(void *)(a4 + 48) = a3;
LABEL_14:
        if (sub_1CBC42E88((uint64_t *)v332, a3)) {
          return 1;
        }
        return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
      }
      if (v12 == 65)
      {
        *(void *)(a4 + 40) = *(void *)(a3 + 24);
        *(void *)(a4 + 48) = a3;
        unsigned int v78 = *(_DWORD **)(a3 + 32);
        int v79 = v78[1];
        if (v79 < 0 && (v79 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
          unint64_t v80 = *(void *)(*(void *)(v11 + 424) + 8 * (v79 & 0x7FFFFFFF));
        }
        else {
          unint64_t v80 = 0;
        }
        unint64_t v331 = v80;
        uint64_t v138 = v78[9];
        if ((v138 & 0x80000000) != 0) {
          int v139 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v138 & 0x7FFFFFFF) + 8);
        }
        else {
          int v139 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v138);
        }
        uint64_t v140 = *v139;
        if (v140
          && ((*(unsigned char *)(v140 + 3) & 1) != 0 || (uint64_t v140 = *(void *)(v140 + 24)) != 0 && (*(unsigned char *)(v140 + 3) & 1) != 0))
        {
          uint64_t v141 = *(void *)(v140 + 8);
        }
        else
        {
          uint64_t v141 = 0;
        }
        sub_1CC73C210(v78[17], v11, (uint64_t)&v346);
        if ((_BYTE)v347)
        {
          if (DWORD2(v346) >= 0x41)
          {
            if ((void)v346) {
              MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
            }
          }
          else if (v80 == 257)
          {
            unint64_t v142 = (uint64_t)((void)v346 << -(uint64_t)DWORD2(v346)) >> -(uint64_t)DWORD2(v346);
            int v143 = **(unsigned __int16 **)(v141 + 16);
            if (v143 == 313)
            {
              if (v142 == 0xFFFF)
              {
                *(void *)&long long v346 = 129;
                DWORD2(v346) = 0;
                int v144 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 313, &v346, 1, 0, 0, 0);
                unsigned int v146 = v145;
                llvm::MachineInstr::addOperand(v145, v144, (const llvm::MachineOperand *)(*(void *)(v141 + 32) + 32));
                LODWORD(v333) = v79;
                LODWORD(v334) = 1;
                *(void *)&long long v346 = v144;
                *((void *)&v346 + 1) = v146;
LABEL_355:
                LODWORD(v347) = 1;
                goto LABEL_368;
              }
              if (v142 <= 0xFFFE)
              {
                *(void *)&long long v346 = 129;
                DWORD2(v346) = 0;
                int v230 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, long long *, uint64_t, void, void, void))(*(void *)a4 + 32))(a4, 313, &v346, 1, 0, 0, 0);
                uint64_t v232 = v231;
                llvm::MachineInstr::addOperand(v231, v230, (const llvm::MachineOperand *)(*(void *)(v141 + 32) + 32));
                unint64_t v359 = 129;
                unsigned int v360 = 0;
                long long v233 = (llvm::ConstantInt *)llvm::IntegerType::get(****(llvm::IntegerType *****)(a4 + 8), (llvm::LLVMContext *)0x10);
                long long v234 = llvm::ConstantInt::get(v233, v142, (const llvm::APInt *)1);
                uint64_t v235 = (*(uint64_t (**)(uint64_t, unint64_t *, void *))(*(void *)a4 + 16))(a4, &v359, v234);
                unint64_t v333 = 129;
                LODWORD(v334) = 0;
                *(void *)&long long v346 = v230;
                *((void *)&v346 + 1) = v232;
                LODWORD(v347) = 1;
                *((void *)&v347 + 1) = v235;
                uint64_t v348 = v236;
                LODWORD(v349) = 1;
                uint64_t v237 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 65, &v333, 1, &v346, 2, 0);
                LODWORD(v333) = v79;
                LODWORD(v334) = 1;
                *(void *)&long long v346 = v237;
                *((void *)&v346 + 1) = v238;
                LODWORD(v347) = 1;
LABEL_368:
                uint64_t v162 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32);
                uint64_t v163 = a4;
                uint64_t v164 = 126;
                uint64_t v161 = 0;
                uint64_t v165 = 1;
LABEL_369:
                v162(v163, v164, &v333, 1, &v346, v165, v161);
LABEL_370:
                llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
                return 1;
              }
            }
            else if (v142 == 0xFFFF {
                   && ((v143 - 45) < 3 || v143 == 127)
            }
                   && sub_1CBC3CF54((uint64_t)v332, *(_DWORD *)(*(void *)(v141 + 32) + 4)))
            {
              unint64_t v333 = 129;
              LODWORD(v334) = 0;
              LODWORD(v346) = *(_DWORD *)(*(void *)(v141 + 32) + 36);
              LODWORD(v347) = 0;
              uint64_t v218 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 119, &v333, 1, &v346, 1, 0);
              uint64_t v220 = v219;
              unint64_t v333 = 129;
              LODWORD(v334) = 0;
              LODWORD(v346) = *(_DWORD *)(*(void *)(v141 + 32) + 68);
              LODWORD(v347) = 0;
              uint64_t v221 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 119, &v333, 1, &v346, 1, 0);
              uint64_t v222 = **(unsigned __int16 **)(v141 + 16);
              unint64_t v333 = 129;
              LODWORD(v334) = 0;
              *(void *)&long long v346 = v218;
              *((void *)&v346 + 1) = v220;
              LODWORD(v347) = 1;
              *((void *)&v347 + 1) = v221;
              uint64_t v348 = v223;
              LODWORD(v349) = 1;
              uint64_t v224 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, v222, &v333, 1, &v346, 2, *(unsigned __int16 *)(v141 + 44) | 0x100000000);
              LODWORD(v333) = v79;
              LODWORD(v334) = 1;
              *(void *)&long long v346 = v224;
              *((void *)&v346 + 1) = v225;
              goto LABEL_355;
            }
          }
        }
        if (sub_1CBC3CDF8((uint64_t *)v332, a3, &v331) & 1) != 0 || (sub_1CBAB8124((uint64_t *)v332, a3)) {
          return 1;
        }
        return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
      }
LABEL_121:
      uint64_t v95 = sub_1CBE52E8C(v12);
      if ((v95 & 0xFF00000000) != 0 && (v95 - 101) <= 0x15 && ((1 << (v95 - 101)) & 0x300011) != 0)
      {
        unsigned int v97 = sub_1CBDA6464(v12, 0x6Bu);
        uint64_t v98 = (unsigned int *)(*(void *)(a3 + 32) + 32 * v97);
        if (!*(unsigned char *)v98)
        {
          unsigned int v99 = v98[1];
          if ((v99 & 0x80000000) != 0)
          {
            unint64_t v100 = v99 & 0x7FFFFFFF;
            if (v100 < *(unsigned int *)(v11 + 432))
            {
              unint64_t v331 = *(void *)(*(void *)(v11 + 424) + 8 * v100);
              if ((v331 & 0xFFFFFFFFFFFFFFF9) != 0)
              {
                uint64_t v101 = *(void *)(*(void *)(v11 + 24) + 16 * v100 + 8);
                if (v101
                  && ((*(unsigned char *)(v101 + 3) & 1) != 0
                   || (uint64_t v101 = *(void *)(v101 + 24)) != 0 && (*(unsigned char *)(v101 + 3) & 1) != 0))
                {
                  uint64_t v102 = *(void *)(v101 + 8);
                }
                else
                {
                  uint64_t v102 = 0;
                }
                if ((*(_WORD *)(*v10 + 18) & 0x3FF0) == 0x650)
                {
                  uint64_t v103 = 1;
                }
                else if (*(unsigned char *)(v10[2] + 389))
                {
                  uint64_t v103 = 255;
                }
                else
                {
                  uint64_t v103 = 15;
                }
                unsigned int v265 = sub_1CB8F1DC4(&v331);
                if (v264 == 1) {
                unsigned int v360 = v265;
                }
                if (v265 > 0x40) {
                  operator new[]();
                }
                unint64_t v266 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v265;
                if (!v265) {
                  unint64_t v266 = 0;
                }
                unint64_t v359 = v266 & v103;
                DWORD2(v346) = 1;
                *(void *)&long long v346 = 0;
                DWORD2(v347) = 1;
                *(void *)&long long v347 = 0;
                int v267 = sub_1CBC3E4F4((uint64_t *)v332, v102, &v331, (unint64_t)&v359, (unint64_t *)&v346, 0, 0);
                sub_1CC73C44C(v99, v11, 1, (uint64_t)&v333);
                if ((_BYTE)v336)
                {
                  ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[4])(a2, a3);
                  sub_1CBAD7F90(a3, 36, 49);
                  llvm::MachineInstr::removeOperand((char *)a3, v97 + 1);
                  if (v334 >= 0x41) {
                    long long v268 = (unint64_t *)v333;
                  }
                  else {
                    long long v268 = &v333;
                  }
                  llvm::MachineOperand::ChangeToImmediate(v98, *v268 & v103, 0);
                  ((void (*)(llvm::IntegerType *****, uint64_t))(*a2)[5])(a2, a3);
                  int v269 = 1;
                  if ((_BYTE)v336 && v334 >= 0x41 && v333) {
                    MEMORY[0x1D25D9CB0](v333, 0x1000C8000313F17);
                  }
                }
                else
                {
                  int v269 = v267 ? 1 : 13;
                }
                if (DWORD2(v347) >= 0x41 && (void)v347) {
                  MEMORY[0x1D25D9CB0](v347, 0x1000C8000313F17);
                }
                if (DWORD2(v346) >= 0x41 && (void)v346) {
                  MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
                }
                if (v360 >= 0x41 && v359) {
                  MEMORY[0x1D25D9CB0](v359, 0x1000C8000313F17);
                }
                if (v269 != 13) {
                  return 1;
                }
              }
            }
          }
        }
      }
      return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
    }
    if (v12 != 47)
    {
      if (v12 != 51) {
        goto LABEL_121;
      }
      goto LABEL_52;
    }
    *(void *)(a4 + 40) = *(void *)(a3 + 24);
    *(void *)(a4 + 48) = a3;
    if (**(_WORD **)(a3 + 16) != 47) {
      return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
    }
    unsigned int v107 = *(_DWORD *)(*(void *)(a3 + 32) + 68);
    if ((v107 & 0x80000000) != 0
      && (v107 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432)
      && *(void *)(*(void *)(v11 + 424) + 8 * (v107 & 0x7FFFFFFF)) == 513)
    {
      return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
    }
    uint64_t v108 = sub_1CC73C210(v107, v11, (uint64_t)&v346);
    if (!(_BYTE)v347) {
      return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
    }
    if (DWORD2(v346) >= 0x41)
    {
      if ((void)v346) {
        MEMORY[0x1D25D9CB0](v346, 0x1000C8000313F17);
      }
      return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
    }
    if ((sub_1CD2C1F30(v108, a3, *(_DWORD *)(*(void *)(a3 + 32) + 36), (uint64_t)((void)v346 << -(uint64_t)DWORD2(v346)) >> -(uint64_t)DWORD2(v346), v11, a4) & 1) == 0)return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3); {
    return 1;
    }
  }
  if (**(unsigned __int16 **)(a3 + 16) <= 0x10Eu)
  {
    if (v12 != 163)
    {
      if (v12 == 179)
      {
        uint64_t v55 = *(unsigned int *)(*(void *)(a3 + 32) + 36);
        if ((v55 & 0x80000000) != 0) {
          uint64_t v56 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
        }
        else {
          uint64_t v56 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v55);
        }
        uint64_t v57 = *v56;
        if ((*(unsigned char *)(v57 + 3) & 1) == 0) {
          uint64_t v57 = *(void *)(v57 + 24);
        }
        uint64_t v58 = *(void *)(v57 + 8);
        if (**(_WORD **)(v58 + 16) != 74) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        int v59 = (uint64_t *)((v55 & 0x80000000) != 0
                        ? *(void *)(v11 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8
                        : *(void *)(v11 + 272) + 8 * v55);
        uint64_t v60 = *v59;
        if (!v60) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        while ((*(unsigned char *)(v60 + 3) & 1) != 0)
        {
          uint64_t v60 = *(void *)(v60 + 24);
          if (!v60) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
        }
        while (1)
        {
          uint64_t v60 = *(void *)(v60 + 24);
          if (!v60) {
            break;
          }
          if ((*(unsigned char *)(v60 + 3) & 1) == 0) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
        }
        int v61 = *(unsigned int **)(v58 + 32);
        uint64_t v62 = v61[17];
        if ((v62 & 0x80000000) != 0) {
          unsigned int v63 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
        }
        else {
          unsigned int v63 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v62);
        }
        uint64_t v64 = *v63;
        if ((*(unsigned char *)(v64 + 3) & 1) == 0) {
          uint64_t v64 = *(void *)(v64 + 24);
        }
        uint64_t v65 = *(void *)(v64 + 8);
        if ((**(_WORD **)(v65 + 16) & 0xFFFE) != 0x114) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        uint64_t v66 = (uint64_t *)((v62 & 0x80000000) != 0
                        ? *(void *)(v11 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8
                        : *(void *)(v11 + 272) + 8 * v62);
        uint64_t v67 = *v66;
        if (!v67) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        while ((*(unsigned char *)(v67 + 3) & 1) != 0)
        {
          uint64_t v67 = *(void *)(v67 + 24);
          if (!v67) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
        }
        while (1)
        {
          uint64_t v67 = *(void *)(v67 + 24);
          if (!v67) {
            break;
          }
          if ((*(unsigned char *)(v67 + 3) & 1) == 0) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
        }
        uint64_t v68 = v61[1];
        BOOL v69 = (uint64_t *)((v68 & 0x80000000) != 0
                        ? *(void *)(v11 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8
                        : *(void *)(v11 + 272) + 8 * v68);
        uint64_t v70 = *v69;
        if (!v70) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        uint64_t v71 = v61[9];
        while ((*(unsigned char *)(v70 + 3) & 1) != 0)
        {
          uint64_t v70 = *(void *)(v70 + 24);
          if (!v70) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
        }
        while (1)
        {
          uint64_t v70 = *(void *)(v70 + 24);
          if (!v70) {
            break;
          }
          if ((*(unsigned char *)(v70 + 3) & 1) == 0) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
        }
        BOOL v76 = (uint64_t *)((v71 & 0x80000000) != 0
                        ? *(void *)(v11 + 24) + 16 * (v71 & 0x7FFFFFFF) + 8
                        : *(void *)(v11 + 272) + 8 * v71);
        uint64_t v77 = *v76;
        if (!v77) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        while ((*(unsigned char *)(v77 + 3) & 1) != 0)
        {
          uint64_t v77 = *(void *)(v77 + 24);
          if (!v77) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
        }
        while (1)
        {
          uint64_t v77 = *(void *)(v77 + 24);
          if (!v77) {
            break;
          }
          if ((*(unsigned char *)(v77 + 3) & 1) == 0) {
            return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
          }
        }
        uint64_t v155 = (uint64_t *)((v68 & 0x80000000) != 0
                         ? *(void *)(v11 + 24) + 16 * (v68 & 0x7FFFFFFF) + 8
                         : *(void *)(v11 + 272) + 8 * v68);
        for (uint64_t k = *v155; (*(unsigned char *)(k + 3) & 1) != 0; uint64_t k = *(void *)(k + 24))
          ;
        int v271 = *(llvm::MachineInstr **)(k + 8);
        int v272 = *(_DWORD *)(*((void *)v271 + 4) + 4);
        int v273 = (uint64_t *)((v71 & 0x80000000) != 0
                         ? *(void *)(v11 + 24) + 16 * (v71 & 0x7FFFFFFF) + 8
                         : *(void *)(v11 + 272) + 8 * v71);
        for (uint64_t m = *v273; (*(unsigned char *)(m + 3) & 1) != 0; uint64_t m = *(void *)(m + 24))
          ;
        uint64_t v275 = *(llvm::MachineInstr **)(m + 8);
        int v276 = *(_DWORD *)(*((void *)v275 + 4) + 4);
        if (v272 < 0 && (uint64_t v277 = v272 & 0x7FFFFFFF, v277 < *(_DWORD *)(v11 + 432))) {
          unint64_t v278 = *(void *)(*(void *)(v11 + 424) + 8 * v277);
        }
        else {
          unint64_t v278 = 0;
        }
        if (v276 < 0 && (uint64_t v279 = v276 & 0x7FFFFFFF, v279 < *(_DWORD *)(v11 + 432))) {
          uint64_t v280 = *(void *)(*(void *)(v11 + 424) + 8 * v279);
        }
        else {
          uint64_t v280 = 0;
        }
        if (v278 != v280) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        if (v278)
        {
          uint64_t v281 = (v278 >> 3);
        }
        else if ((v278 & 4) != 0)
        {
          uint64_t v281 = (v278 & 2) != 0 ? (unsigned __int16)(v278 >> 19) : (v278 >> 19);
        }
        else
        {
          uint64_t v281 = (unsigned __int16)(v278 >> 3);
        }
        if (v281 != 16) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        *(void *)(a4 + 40) = *(void *)(v65 + 24);
        *(void *)(a4 + 48) = v65;
        *(void *)&long long v346 = v278 & 0x8000000000000000 | 0x800014;
        DWORD2(v346) = 0;
        unint64_t v282 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
        int v284 = v283;
        llvm::MachineInstr::addOperand(v283, v282, (const llvm::MachineOperand *)(*(void *)(v65 + 32) + 32));
        llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)(*(void *)(v65 + 32) + 64));
        llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)(*(void *)(v65 + 32) + 96));
        llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)(*(void *)(v65 + 32) + 128));
        llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)(*(void *)(v65 + 32) + 160));
        llvm::MachineInstr::addOperand(v284, v282, (const llvm::MachineOperand *)(*(void *)(v65 + 32) + 192));
        *(void *)&long long v346 = v278;
        DWORD2(v346) = 0;
        *(void *)&long long v347 = v278;
        DWORD2(v347) = 0;
        unint64_t v333 = (unint64_t)v282;
        uint64_t v334 = v284;
        LODWORD(v335) = 1;
        (*(void (**)(uint64_t, uint64_t, long long *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a4 + 32))(a4, 74, &v346, 2, &v333, 1, 0);
        uint64_t v286 = v285;
        sub_1CBA0A7C8((void *)v11, v271, *(_DWORD *)(*(void *)(v285 + 32) + 4), (uint64_t)a2);
        sub_1CBA0A7C8((void *)v11, v275, *(_DWORD *)(*(void *)(v286 + 32) + 36), (uint64_t)a2);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v58);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v65);
        return 1;
      }
      else
      {
        if (v12 != 193) {
          goto LABEL_121;
        }
        *(void *)(a4 + 40) = *(void *)(a3 + 24);
        *(void *)(a4 + 48) = a3;
        uint64_t v19 = *(_DWORD **)(a3 + 32);
        int v20 = v19[1];
        if (v20 < 0 && (v20 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
          uint64_t v21 = *(void *)(*(void *)(v11 + 424) + 8 * (v20 & 0x7FFFFFFF));
        }
        else {
          uint64_t v21 = 0;
        }
        uint64_t v81 = 0x7FFFFF800000000;
        if ((v21 & 4) == 0) {
          uint64_t v81 = 0x7FFFFF80000;
        }
        if ((v81 & v21) != 0) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        int v82 = v19[17];
        int v83 = v19[9];
        unint64_t v333 = 513;
        LODWORD(v334) = 0;
        LODWORD(v346) = v83;
        LODWORD(v347) = 0;
        uint64_t v84 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 80, &v333, 1, &v346, 1, 0);
        unint64_t v333 = 257;
        LODWORD(v334) = 0;
        *(void *)&long long v346 = v84;
        *((void *)&v346 + 1) = v85;
        LODWORD(v347) = 1;
        uint64_t v86 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 119, &v333, 1, &v346, 1, 0);
        uint64_t v88 = v87;
        unint64_t v333 = 257;
        LODWORD(v334) = 0;
        LODWORD(v346) = v82;
        LODWORD(v347) = 0;
        uint64_t v89 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 119, &v333, 1, &v346, 1, 0);
        unint64_t v333 = 257;
        LODWORD(v334) = 0;
        *(void *)&long long v346 = v86;
        *((void *)&v346 + 1) = v88;
        LODWORD(v347) = 1;
        *((void *)&v347 + 1) = v89;
        uint64_t v348 = v90;
        LODWORD(v349) = 1;
        uint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 45, &v333, 1, &v346, 2, 0);
        unint64_t v333 = 513;
        LODWORD(v334) = 0;
        *(void *)&long long v346 = v91;
        *((void *)&v346 + 1) = v92;
        LODWORD(v347) = 1;
        uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 126, &v333, 1, &v346, 1, 0);
        LODWORD(v333) = v20;
        LODWORD(v334) = 1;
        *(void *)&long long v346 = v93;
        *((void *)&v346 + 1) = v94;
        LODWORD(v347) = 1;
        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 81, &v333, 1, &v346, 1, 0);
        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
        return 1;
      }
    }
    if ((sub_1CBC3A930((uint64_t *)v332, a3) & 1) == 0) {
      return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
    }
    return 1;
  }
  if ((v12 - 274) < 4)
  {
    uint64_t v16 = (unsigned char *)v10[2];
    int v17 = v16[352];
    if (v16[303]) {
      char v18 = 1;
    }
    else {
      char v18 = v16[305] != 0;
    }
    char v72 = v17 != 0;
    int v73 = sub_1CBC3443C(v10[5], (void *)a4, *(void *)(a3 + 32) + 32, *(void *)(a3 + 32) + 64, v17 != 0, (uint64_t)a2, v18);
    int v74 = v73 | sub_1CBC3443C(v11, (void *)a4, *(void *)(a3 + 32) + 96, *(void *)(a3 + 32) + 128, v72, (uint64_t)a2, v18);
    return v74 | sub_1CBC3443C(v11, (void *)a4, *(void *)(a3 + 32) + 160, *(void *)(a3 + 32) + 192, v72, (uint64_t)a2, 0);
  }
  if (v12 == 271)
  {
    *(void *)(a4 + 40) = *(void *)(a3 + 24);
    *(void *)(a4 + 48) = a3;
    uint64_t v113 = *(void *)(a3 + 32);
    unint64_t v114 = *(unsigned int *)(v113 + 36);
    if ((v114 & 0x80000000) != 0) {
      unsigned int v115 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v115 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v114);
    }
    uint64_t v116 = *v115;
    if (v116)
    {
      if (*(unsigned char *)(v116 + 3) & 1) != 0 || (uint64_t v116 = *(void *)(v116 + 24)) != 0 && (*(unsigned char *)(v116 + 3))
      {
        uint64_t v117 = *(void *)(v116 + 8);
        if (v117)
        {
          if (**(_WORD **)(v117 + 16) == 82 && *(_DWORD *)(v117 + 40) == 2) {
            unint64_t v114 = *(unsigned int *)(*(void *)(v117 + 32) + 36);
          }
        }
      }
    }
    if (v114 >> 31) {
      unint64_t v118 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8);
    }
    else {
      unint64_t v118 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v114);
    }
    uint64_t v119 = *v118;
    if ((*(unsigned char *)(v119 + 3) & 1) == 0) {
      uint64_t v119 = *(void *)(v119 + 24);
    }
    uint64_t v120 = *(void *)(v119 + 8);
    if (**(_WORD **)(v120 + 16) != 78) {
      return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
    }
    uint64_t v121 = *(void *)(v113 + 80) + 1;
    if (v121 >= *(_DWORD *)(v120 + 40)) {
      return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
    }
    uint64_t v75 = 1;
    LODWORD(v333) = *(_DWORD *)(v113 + 4);
    LODWORD(v334) = 1;
    LODWORD(v346) = *(_DWORD *)(*(void *)(v120 + 32) + 32 * v121 + 4);
LABEL_171:
    LODWORD(v347) = 0;
    (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, void))(*(void *)a4 + 32))(a4, 19, &v333, 1, &v346, 1, 0);
LABEL_172:
    llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
    return v75;
  }
  if (v12 != 335) {
    goto LABEL_121;
  }
LABEL_52:
  *(void *)(a4 + 40) = *(void *)(a3 + 24);
  *(void *)(a4 + 48) = a3;
  unsigned int v36 = *(_DWORD **)(a3 + 32);
  uint64_t v37 = v36[33];
  uint64_t v38 = v36[41];
  if ((v37 & 0x80000000) != 0) {
    int64x2_t v39 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8);
  }
  else {
    int64x2_t v39 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v37);
  }
  uint64_t v40 = *v39;
  if (v40 && ((*(unsigned char *)(v40 + 3) & 1) != 0 || (uint64_t v40 = *(void *)(v40 + 24)) != 0 && (*(unsigned char *)(v40 + 3) & 1) != 0))
  {
    uint64_t v41 = *(void *)(v40 + 8);
    if ((v38 & 0x80000000) == 0)
    {
LABEL_537:
      int v42 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v38);
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v41 = 0;
    if ((v38 & 0x80000000) == 0) {
      goto LABEL_537;
    }
  }
  int v42 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8);
LABEL_58:
  uint64_t v43 = *v42;
  unsigned int v328 = v36[1];
  if ((*(unsigned char *)(v43 + 3) & 1) == 0) {
    uint64_t v43 = *(void *)(v43 + 24);
  }
  uint64_t v325 = v36[17];
  size_t v327 = v36[25];
  uint64_t v44 = *(void *)(v43 + 8);
  int v45 = v36[12];
  int v46 = **(unsigned __int16 **)(v41 + 16);
  if (v46 != **(unsigned __int16 **)(v44 + 16) || v46 != 184 && v46 != 177) {
    goto LABEL_282;
  }
  int v47 = v45;
  char v48 = sub_1CBC3568C(v328, v11);
  int v45 = v47;
  if ((v48 & 1) == 0)
  {
    uint64_t v178 = (uint64_t *)((v37 & 0x80000000) != 0
                     ? *(void *)(v11 + 24) + 16 * (v37 & 0x7FFFFFFF) + 8
                     : *(void *)(v11 + 272) + 8 * v37);
    uint64_t v179 = *v178;
    if (v179)
    {
      while ((*(unsigned char *)(v179 + 3) & 1) != 0)
      {
        uint64_t v179 = *(void *)(v179 + 24);
        if (!v179) {
          goto LABEL_64;
        }
      }
      while (1)
      {
        uint64_t v179 = *(void *)(v179 + 24);
        if (!v179) {
          break;
        }
        if ((*(unsigned char *)(v179 + 3) & 1) == 0) {
          goto LABEL_64;
        }
      }
      uint64_t v180 = (uint64_t *)((v38 & 0x80000000) != 0
                       ? *(void *)(v11 + 24) + 16 * (v38 & 0x7FFFFFFF) + 8
                       : *(void *)(v11 + 272) + 8 * v38);
      uint64_t v181 = *v180;
      if (v181)
      {
        while ((*(unsigned char *)(v181 + 3) & 1) != 0)
        {
          uint64_t v181 = *(void *)(v181 + 24);
          if (!v181) {
            goto LABEL_64;
          }
        }
        while (1)
        {
          uint64_t v181 = *(void *)(v181 + 24);
          if (!v181) {
            break;
          }
          if ((*(unsigned char *)(v181 + 3) & 1) == 0) {
            goto LABEL_64;
          }
        }
LABEL_282:
        int v326 = v45;
        if ((v45 - 32) < 0xA) {
          return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
        }
        uint64_t v182 = *(unsigned __int16 *)(a3 + 44);
        uint64_t v183 = v10[1];
        long long v184 = *(_OWORD *)(v183 + 1024);
        long long v346 = *(_OWORD *)(v183 + 1008);
        long long v347 = v184;
        uint64_t v185 = *(void *)(v183 + 1048);
        uint64_t v348 = *(void *)(v183 + 1040);
        uint64_t v349 = v185;
        uint64_t v186 = *(void *)(v183 + 1056);
        uint64_t v350 = v186;
        if (v186) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v186 + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v351 = *(_WORD *)(v183 + 1064);
        if (*(char *)(v183 + 1095) < 0)
        {
          sub_1CB8BDF7C((uint64_t)&v352, *(const void **)(v183 + 1072), *(void *)(v183 + 1080));
        }
        else
        {
          long long v352 = *(_OWORD *)(v183 + 1072);
          uint64_t v353 = *(void *)(v183 + 1088);
        }
        long long v354 = *(_OWORD *)(v183 + 1096);
        long long v355 = *(_OWORD *)(v183 + 1112);
        sub_1CB906B78((uint64_t)&v356, (uint64_t *)(v183 + 1128));
        if (*(char *)(v183 + 1311) < 0)
        {
          sub_1CB8BDF7C((uint64_t)&v357, *(const void **)(v183 + 1288), *(void *)(v183 + 1296));
        }
        else
        {
          long long v357 = *(_OWORD *)(v183 + 1288);
          uint64_t v358 = *(void *)(v183 + 1304);
        }
        int v187 = BYTE12(v346) & 1;
        if (v12 == 51)
        {
          unsigned int v188 = (v182 >> 10) & 1;
          if ((~v182 & 0x3C0) != 0) {
            unsigned int v188 = 0;
          }
          if (!(v188 | v187)) {
            goto LABEL_340;
          }
        }
        else if (!(v187 | v182 & 0x10))
        {
          goto LABEL_340;
        }
        if ((v326 - 7) <= 1)
        {
          if (v326 == 7) {
            int v189 = v37;
          }
          else {
            int v189 = v38;
          }
          LODWORD(v359) = v328;
          unsigned int v360 = 1;
          LODWORD(v333) = v189;
          LODWORD(v335) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, void))(*(void *)a4 + 32))(a4, 19, &v359, 1, &v333, 1, 0);
          goto LABEL_300;
        }
        if ((v327 & 0x80000000) != 0) {
          int v210 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v327 & 0x7FFFFFFF) + 8);
        }
        else {
          int v210 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v327);
        }
        uint64_t v211 = *v210;
        if ((*(unsigned char *)(v211 + 3) & 1) == 0) {
          uint64_t v211 = *(void *)(v211 + 24);
        }
        uint64_t v212 = *(void *)(v211 + 8);
        if (**(_WORD **)(v212 + 16) == 121)
        {
          uint64_t v262 = *(void *)(*(void *)(v212 + 32) + 48);
          if (v262)
          {
            uint64_t v263 = *(_UNKNOWN **)(v262 + 32) == &unk_1CFB2E344 ? *(void *)(v262 + 40) : v262 + 24;
            if ((*(unsigned char *)(v263 + 28) & 7) == 3)
            {
              BOOL v287 = (uint64_t *)((v325 & 0x80000000) != 0
                               ? *(void *)(v11 + 24) + 16 * (v325 & 0x7FFFFFFF) + 8
                               : *(void *)(v11 + 272) + 8 * v325);
              uint64_t v288 = *v287;
              if (v288)
              {
                while ((*(unsigned char *)(v288 + 3) & 1) != 0)
                {
                  uint64_t v288 = *(void *)(v288 + 24);
                  if (!v288) {
                    goto LABEL_340;
                  }
                }
                while (1)
                {
                  uint64_t v288 = *(void *)(v288 + 24);
                  if (!v288) {
                    break;
                  }
                  if ((*(unsigned char *)(v288 + 3) & 1) == 0) {
                    goto LABEL_340;
                  }
                }
                uint64_t v289 = v182;
                int v330 = 0;
                LODWORD(v331) = 0;
                if ((v325 & 0x80000000) != 0) {
                  uint64_t v290 = (uint64_t *)(*(void *)(v11 + 24) + 16 * (v325 & 0x7FFFFFFF) + 8);
                }
                else {
                  uint64_t v290 = (uint64_t *)(*(void *)(v11 + 272) + 8 * v325);
                }
                uint64_t v291 = *v290;
                if (v291)
                {
                  if ((*(unsigned char *)(v291 + 3) & 1) != 0
                    || (uint64_t v291 = *(void *)(v291 + 24)) != 0 && (*(unsigned char *)(v291 + 3) & 1) != 0)
                  {
                    uint64_t v292 = *(void *)(v291 + 8);
                    if (v292)
                    {
                      if (**(_WORD **)(v292 + 16) == 163 && *(_DWORD *)(v292 + 40) == 3)
                      {
                        uint64_t v293 = *(void *)(v292 + 32);
                        int v294 = *(_DWORD *)(v293 + 36);
                        int v295 = *(_DWORD *)(v293 + 68);
                        int v330 = v295;
                        LODWORD(v331) = v294;
                        if (v295 < 0 && (v295 & 0x7FFFFFFFu) < *(_DWORD *)(v11 + 432)) {
                          unint64_t v296 = *(void *)(*(void *)(v11 + 424) + 8 * (v295 & 0x7FFFFFFF));
                        }
                        else {
                          unint64_t v296 = 0;
                        }
                        unint64_t v359 = v296;
                        unsigned int v360 = 0;
                        LODWORD(v333) = v295;
                        LODWORD(v335) = 0;
                        uint64_t v315 = v182 | 0x100000000;
                        uint64_t v316 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 177, &v359, 1, &v333, 1, v182 | 0x100000000);
                        LODWORD(v359) = v328;
                        unsigned int v360 = 1;
                        LODWORD(v333) = v326;
                        LODWORD(v335) = 2;
                        LODWORD(v336) = v331;
                        int v338 = 0;
                        uint64_t v339 = v316;
                        uint64_t v340 = v317;
                        int v341 = 1;
LABEL_612:
                        int v342 = v37;
                        int v343 = 0;
                        int v344 = v38;
                        int v345 = 0;
                        (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 51, &v359, 1, &v333, 5, v315);
LABEL_300:
                        llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
                        sub_1CB906D7C((uint64_t)&v346);
                        return 1;
                      }
                    }
                  }
                }
                int v329 = 0;
                unint64_t v333 = (unint64_t)&v331;
                uint64_t v334 = (llvm::MachineInstr *)&v330;
                BOOL v335 = &v329;
                LODWORD(v359) = v325;
                if (sub_1CBAA89D0((uint64_t)&v333, v11, (unsigned int *)&v359))
                {
                  if ((v331 & 0x80000000) != 0 && (v331 & 0x7FFFFFFF) < *(_DWORD *)(v11 + 432)) {
                    unint64_t v319 = *(void *)(*(void *)(v11 + 424) + 8 * (v331 & 0x7FFFFFFF));
                  }
                  else {
                    unint64_t v319 = 0;
                  }
                  unint64_t v359 = v319;
                  unsigned int v360 = 0;
                  LODWORD(v333) = v331;
                  LODWORD(v335) = 0;
                  LODWORD(v336) = v330;
                  int v338 = 0;
                  uint64_t v315 = v289 | 0x100000000;
                  uint64_t v320 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 165, &v359, 1, &v333, 2, v289 | 0x100000000);
                  uint64_t v322 = v321;
                  unint64_t v359 = v319;
                  unsigned int v360 = 0;
                  LODWORD(v333) = v329;
                  LODWORD(v335) = 0;
                  uint64_t v323 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, unint64_t *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, 177, &v359, 1, &v333, 1, v315);
                  LODWORD(v359) = v328;
                  unsigned int v360 = 1;
                  LODWORD(v333) = v326;
                  LODWORD(v335) = 2;
                  uint64_t v336 = v320;
                  uint64_t v337 = v322;
                  int v338 = 1;
                  uint64_t v339 = v323;
                  uint64_t v340 = v324;
                  int v341 = 1;
                  goto LABEL_612;
                }
              }
            }
          }
        }
LABEL_340:
        sub_1CB906D7C((uint64_t)&v346);
        return sub_1CBC4375C((int)v332, (llvm::MachineInstr *)a3);
      }
    }
  }
LABEL_64:
  uint64_t v49 = *(void *)(a3 + 32);
  int v50 = *(_DWORD *)(v49 + 68);
  int v51 = *(_DWORD *)(v49 + 100);
  int v52 = *(_DWORD *)(*(void *)(v41 + 32) + 36);
  int v53 = *(_DWORD *)(*(void *)(v44 + 32) + 36);
  if ((v328 & 0x80000000) != 0 && (v328 & 0x7FFFFFFF) < (unint64_t)*(unsigned int *)(v11 + 432)) {
    unint64_t v54 = *(void *)(*(void *)(v11 + 424) + 8 * (v328 & 0x7FFFFFFF));
  }
  else {
    unint64_t v54 = 0;
  }
  unint64_t v333 = v54;
  LODWORD(v334) = 0;
  LODWORD(v346) = v47;
  LODWORD(v347) = 2;
  DWORD2(v347) = v50;
  LODWORD(v349) = 0;
  LODWORD(v350) = v51;
  LODWORD(v352) = 0;
  DWORD2(v352) = v52;
  LODWORD(v354) = 0;
  DWORD2(v354) = v53;
  DWORD2(v355) = 0;
  uint64_t v75 = 1;
  uint64_t v175 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, v12, &v333, 1, &v346, 5, *(unsigned __int16 *)(a3 + 44) | 0x100000000);
  uint64_t v176 = **(unsigned __int16 **)(v41 + 16);
  LODWORD(v333) = v328;
  LODWORD(v334) = 1;
  *(void *)&long long v346 = v175;
  *((void *)&v346 + 1) = v177;
  LODWORD(v347) = 1;
  (*(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t, long long *, uint64_t, uint64_t))(*(void *)a4 + 32))(a4, v176, &v333, 1, &v346, 1, *(unsigned __int16 *)(v41 + 44) | 0x100000000);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a3);
  return v75;
}