uint64_t sub_1CB892E1C(uint64_t a1, double a2)
{
  uint64_t v3;
  void v5[2];
  int v6;
  char v7;
  const llvm::APInt *v8;
  int v9;

  v9 = 64;
  v8 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v5, &v8);
  v3 = v5[1];
  *(void *)(a1 + 8) = v5[0];
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a1 + 28) & 0xF0 | v7 & 0xF;
  return a1;
}

uint64_t sub_1CB892E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 176))(*(void *)(a1 + 16));
  v6 = *(void **)(*(void *)(a1 + 24) + 160);
  if (v5) {
    v7 = (void *)(v5 + 8);
  }
  else {
    v7 = 0;
  }
  unint64_t v8 = *(unsigned int *)(*v7 + 24 * a2 + 16);
  v9 = (_WORD *)(v7[6] + ((v8 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v10 = *v9 + (v8 & 0xF) * a2;
  do
  {
    uint64_t v11 = v6[5];
    unsigned __int16 v12 = *(_WORD *)(v11 + 4 * v10);
    if (v12)
    {
      unsigned __int16 v13 = *(_WORD *)(v11 + 4 * v10 + 2);
      do
      {
        unsigned __int16 v14 = v12;
        unsigned __int16 v12 = v13;
        uint64_t v15 = v6[6];
        if (v15)
        {
          v16 = (unsigned __int16 *)(v15 + 2 * *(unsigned int *)(*v6 + 24 * v14 + 8));
          do
          {
            v17 = *(unsigned int **)(*(void *)(v4 + 272) + 8 * v14);
            if (v17)
            {
              while (1)
              {
                unsigned int v18 = *v17;
                if ((*v17 & 0x1000000) == 0) {
                  break;
                }
                v17 = (unsigned int *)*((void *)v17 + 3);
                if (!v17) {
                  goto LABEL_12;
                }
              }
LABEL_14:
              unsigned int *v17 = v18 & 0xFBFFFFFF;
              while (1)
              {
                v17 = (unsigned int *)*((void *)v17 + 3);
                if (!v17) {
                  break;
                }
                unsigned int v18 = *v17;
                if ((*v17 & 0x1000000) == 0) {
                  goto LABEL_14;
                }
              }
            }
LABEL_12:
            int v19 = *v16++;
            v14 += v19;
          }
          while (v19);
        }
        unsigned __int16 v13 = 0;
      }
      while (v12);
    }
    int v20 = (unsigned __int16)v9[1];
    ++v9;
    v10 += v20;
  }
  while (v20);
  return a2;
}

unint64_t sub_1CB892FC4(uint64_t a1)
{
  v2 = *(void (****)(void, void, void, uint64_t, uint64_t))(a1 + 344);
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3)
  {
    uint64_t v3 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 216))(*(void *)(a1 + 8), a1 + 128, a1);
    *(void *)(a1 + 48) = v3;
  }
  int v5 = *(_DWORD *)(v3 + 16) + 7;
  uint64_t v6 = v5 & 0xFFFFFFF8;
  if ((v5 & 0xFFFFFFF8) != 0)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      uint64_t v8 = (i + 1795);
      v9 = (_DWORD *)v4[57];
      unsigned __int16 v10 = (_DWORD *)v4[58];
      uint64_t v11 = v9;
      if (v10 == v9)
      {
        unsigned int v12 = i + 1539;
        unsigned int v14 = i + 771;
LABEL_19:
        if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, v14, 0) & 1) == 0)
        {
          if ((llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)i + 1795, 0) & 1) == 0
            && (llvm::MachineRegisterInfo::isPhysRegModified(v4, v12, 0) & 1) == 0)
          {
            return v12 | (unint64_t)(v8 << 32);
          }
          break;
        }
      }
      else
      {
        while (*v11 != v8 && v11[1] != v8)
        {
          v11 += 2;
          if (v11 == v10)
          {
            unsigned int v12 = i + 1539;
            unsigned __int16 v13 = (_DWORD *)v4[57];
            while (*v13 != v12 && v13[1] != v12)
            {
              v13 += 2;
              if (v13 == v10)
              {
                unsigned int v14 = i + 771;
                while (*v9 != v14 && v9[1] != v14)
                {
                  v9 += 2;
                  if (v9 == v10) {
                    goto LABEL_19;
                  }
                }
                goto LABEL_20;
              }
            }
            break;
          }
        }
      }
LABEL_20:
      ;
    }
  }
  (**v2)(v2, 0, 0, 1, 1);
  unint64_t v15 = 0;
  v16 = (_DWORD *)v4[58];
  while (1)
  {
    int v17 = v15 + 1283;
    unsigned int v18 = (_DWORD *)v4[57];
    if (v16 == v18) {
      break;
    }
    while (*v18 != v17 && v18[1] != v17)
    {
      v18 += 2;
      if (v18 == v16)
      {
        int v19 = v15 + 1027;
        int v20 = (_DWORD *)v4[57];
        while (*v20 != v19 && v20[1] != v19)
        {
          v20 += 2;
          if (v20 == v16)
          {
            int v21 = v15 | 3;
            v22 = (_DWORD *)v4[57];
            while (*v22 != v21 && v22[1] != v21)
            {
              v22 += 2;
              if (v22 == v16) {
                goto LABEL_39;
              }
            }
            goto LABEL_35;
          }
        }
        break;
      }
    }
LABEL_35:
    BOOL v23 = v15 >= 0xFC;
    v15 += 4;
    if (v23)
    {
LABEL_44:
      uint64_t v8 = 1530;
      unsigned int v12 = 1274;
      return v12 | (unint64_t)(v8 << 32);
    }
  }
  LODWORD(v15) = 0;
LABEL_39:
  uint64_t v24 = v15 & 0xFFFFFFFC;
  while ((llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)v24 + 3, 0) & 1) != 0
       || (llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)v24 + 1283, 0) & 1) != 0
       || llvm::MachineRegisterInfo::isPhysRegModified(v4, (int)v24 + 1027, 0))
  {
    if (++v24 == 256) {
      goto LABEL_44;
    }
  }
  uint64_t v8 = (v24 + 1283);
  unsigned int v12 = v24 + 1027;
  return v12 | (unint64_t)(v8 << 32);
}

unint64_t sub_1CB89327C(uint64_t a1, llvm::TargetInstrInfo *this)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (a1 + 48 == v2) {
    return 0;
  }
  unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(unsigned char *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  while (1)
  {
    uint64_t v6 = *(unsigned __int16 **)(v5 + 16);
    int v7 = *v6;
    BOOL v8 = (v7 - 9) > 0x3C || ((1 << (v7 - 9)) & 0x1000000000000605) == 0;
    BOOL v9 = !v8 || v7 == 0;
    if (!v9 && (v6[4] & 0x10) == 0) {
      break;
    }
    if (v5 == v2) {
      return 0;
    }
    unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    if (!v5 || (*(unsigned char *)v5 & 4) == 0)
    {
      while ((*(_WORD *)(v5 + 44) & 4) != 0)
        unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
    }
  }
  while (**(_WORD **)(v5 + 16) != 11576)
  {
    if (v5 != *(void *)(a1 + 56))
    {
      unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
      if (!v5 || (*(unsigned char *)v5 & 4) == 0)
      {
        while ((*(_WORD *)(v5 + 44) & 4) != 0)
          unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
      }
      if (llvm::TargetInstrInfo::isUnpredicatedTerminator(this, (const llvm::MachineInstr *)v5)) {
        continue;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t sub_1CB8933AC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = (uint64_t *)(a2 + 8 * a3);
  if (a3 < 0) {
    uint64_t v3 = (uint64_t *)(a1 + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  uint64_t v4 = *v3;
  if (!v4) {
    return 0;
  }
  if ((*(unsigned char *)(v4 + 3) & 1) == 0)
  {
    uint64_t v4 = *(void *)(v4 + 24);
    if (!v4 || (*(unsigned char *)(v4 + 3) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v5 = *(void *)(v4 + 24);
  if (v5)
  {
    if (*(unsigned char *)(v5 + 3)) {
      return 0;
    }
  }
  uint64_t v6 = (uint64_t *)(a1 + 16 * (a3 & 0x7FFFFFFF) + 8);
  if (a3 < 0) {
    int v7 = (uint64_t *)(a1 + 16 * (a3 & 0x7FFFFFFF) + 8);
  }
  else {
    int v7 = (uint64_t *)(a2 + 8 * a3);
  }
  uint64_t v8 = *v7;
  if (v8)
  {
    if ((*(unsigned char *)(v8 + 3) & 1) == 0) {
      return 0;
    }
    uint64_t result = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(v8 + 24);
      if (!v8) {
        break;
      }
      if ((*(unsigned char *)(v8 + 3) & 1) == 0) {
        return result;
      }
    }
  }
  if (a3 >= 0) {
    uint64_t v6 = (uint64_t *)(a2 + 8 * a3);
  }
  uint64_t v10 = *v6;
  if ((*(unsigned char *)(v10 + 3) & 1) == 0)
  {
    uint64_t v10 = *(void *)(v10 + 24);
    if ((*(unsigned char *)(v10 + 3) & 1) == 0) {
      uint64_t v10 = 0;
    }
  }
  uint64_t v11 = *(void *)(v10 + 8);
  if (**(_WORD **)(v11 + 16) == 1015)
  {
    uint64_t v12 = *(void *)(v11 + 32);
    if (*(_DWORD *)(v12 + 4) == a3
      && !*(void *)(v12 + 80)
      && !*(void *)(v12 + 112)
      && !*(void *)(v12 + 144)
      && !*(void *)(v12 + 176))
    {
      return 1;
    }
  }
  return 0;
}

void sub_1CB8934B4(llvm::MachineBasicBlock *this, int a2, unsigned __int8 **a3, int a4, uint64_t a5, int a6, int a7)
{
  LODWORD(v7) = a7;
  if (a6) {
    FirstInstrTerminator = (uint64_t *)*((void *)this + 7);
  }
  else {
    FirstInstrTerminator = (uint64_t *)llvm::MachineBasicBlock::getFirstInstrTerminator(this);
  }
  uint64_t v14 = *(void *)(a5 + 8) + 28320;
  unint64_t v15 = (llvm::MachineFunction *)*((void *)this + 4);
  v16 = *a3;
  v25 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v25, v16, 2);
  }
  int v17 = llvm::MachineFunction::CreateMachineInstr(v15, v14, &v25, 0);
  if (v25)
  {
    int v19 = *v25;
    if ((v19 - 4) > 0x1E)
    {
      if ((v19 - 3) >= 0xFFFFFFFE) {
        v22 = v25;
      }
      else {
        v22 = 0;
      }
      if ((v19 - 3) < 0xFFFFFFFE)
      {
        if (v19 == 3) {
          *((void *)v25 + 1) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v21 = (unint64_t)(v22 + 8);
    }
    else
    {
      if ((v25[1] & 0x7F) != 2 && !*((_DWORD *)v25 + 3)) {
        goto LABEL_7;
      }
      uint64_t v20 = *((void *)v25 + 2);
      if ((v20 & 4) == 0) {
        goto LABEL_7;
      }
      unint64_t v21 = v20 & 0xFFFFFFFFFFFFFFF8;
      if (!v21) {
        goto LABEL_7;
      }
    }
    *(void *)&long long v23 = &v25;
    sub_1CC5FA668(v21 + 16, &v23);
  }
LABEL_7:
  if ((uint64_t *)((char *)this + 48) != FirstInstrTerminator && (*((_WORD *)FirstInstrTerminator + 22) & 4) != 0) {
    *((_WORD *)v17 + 22) |= 0xCu;
  }
  if (a2) {
    unsigned int v18 = 2;
  }
  else {
    unsigned int v18 = 1;
  }
  if (v7 == -1) {
    uint64_t v7 = v18;
  }
  else {
    uint64_t v7 = v7;
  }
  sub_1CC31973C((uint64_t *)this + 5, FirstInstrTerminator, (uint64_t)v17);
  *((void *)&v23 + 1) = 0;
  long long v24 = 0uLL;
  LODWORD(v23) = 0x1000000;
  DWORD1(v23) = a4;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
  LODWORD(v23) = 1;
  *((void *)&v23 + 1) = 0;
  *(void *)&long long v24 = 0;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
  *((void *)&v23 + 1) = 0;
  long long v24 = 0uLL;
  LODWORD(v23) = 0;
  DWORD1(v23) = a4;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
  LODWORD(v23) = 1;
  *((void *)&v23 + 1) = 0;
  *(void *)&long long v24 = 0;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
  LODWORD(v23) = 1;
  *((void *)&v23 + 1) = 0;
  *(void *)&long long v24 = v7;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
  LODWORD(v23) = 1;
  *((void *)&v23 + 1) = 0;
  *(void *)&long long v24 = 2;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
  long long v23 = 0u;
  long long v24 = 0u;
  llvm::MachineInstr::addOperand(v17, v15, (const llvm::MachineOperand *)&v23);
}

uint64_t sub_1CB8936E4()
{
  return __cxa_atexit((void (*)(void *))nullsub_1482, off_1EC7DF9B8, &dword_1CB82C000);
}

uint64_t sub_1CB893708(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t sub_1CB89372C()
{
  return 0;
}

uint64_t sub_1CB893734()
{
  return 0;
}

uint64_t sub_1CB89373C()
{
  return 0;
}

uint64_t sub_1CB893748()
{
  return 0;
}

uint64_t sub_1CB893750(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 200))(a1) ^ 1;
}

uint64_t sub_1CB89378C(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1)) {
    return 1;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 200);

  return v5(a1, a2);
}

uint64_t sub_1CB893828()
{
  return 1;
}

void sub_1CB895024(uint64_t a1)
{
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = -1;
  *(void *)(a1 + 72) = -1;
  *(void *)(a1 + 8) = &unk_1E66B1058;
  *(void *)(a1 + 16) = &unk_1CDDFCF4C;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = "10000";
  *(_DWORD *)(a1 + 48) = 13480;
  *(void *)a1 = &unk_1F25EA498;
  sub_1CD3EED04(a1 + 80);
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  operator new();
}

llvm::MachineFunction **sub_1CB89517C(llvm::MachineFunction **a1, int a2, unsigned int a3, __int16 a4)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v8[0] = (a3 << 23) & 0x13000000 | (((a3 >> 9) & 1) << 27) & 0x1FF000FF | (((a3 >> 8) & 1) << 29) & 0x3FF000FF | ((a3 >> 6) << 30) | (((a3 & 0x18) != 0) << 26) | ((a4 & 0xFFF) << 8);
  v8[1] = a2;
  llvm::MachineInstr::addOperand(v5, v6, (const llvm::MachineOperand *)v8);
  return a1;
}

void sub_1CB895294(void *a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, unsigned int a5, unsigned int a6, int a7)
{
  unsigned int v11 = a5 - 1;
  uint64_t v12 = a5 >> 3;
  if (a5 - 1 > 0x3FFFFFFE) {
    goto LABEL_22;
  }
  if (a5 > 0x407)
  {
    if (a5 <= 0x807)
    {
      uint64_t v15 = v12;
      int v13 = 1 << (a5 & 7);
      goto LABEL_21;
    }
LABEL_22:
    uint64_t v21 = (*(uint64_t (**)(void *))(*a1 + 1288))(a1);
    v22 = (void *)v21;
    uint64_t v23 = 0;
    unint64_t v24 = (unint64_t)a6 >> 3;
    while (1)
    {
      if (v11 <= 0x3FFFFFFE)
      {
        uint64_t v25 = (uint64_t)*(&off_1E66A3D20)[v23];
        unsigned int v26 = *(unsigned __int16 *)(v25 + 22);
        if (v12 < v26)
        {
          uint64_t v27 = *(void *)(v25 + 8);
          BOOL v28 = ((1 << (a5 & 7)) & *(unsigned __int8 *)(v27 + v12)) == 0 || a6 - 1 > 0x3FFFFFFE;
          BOOL v29 = v28 || v24 >= v26;
          if (!v29 && ((1 << (a6 & 7)) & *(unsigned __int8 *)(v27 + v24)) != 0) {
            break;
          }
        }
      }
      v23 += 3;
      if (v23 == 87) {
        return;
      }
    }
    int v76 = HIDWORD((&off_1E66A3D20)[v23 + 1]);
    v30 = (void *)(v21 + 8);
    uint64_t v31 = v22[1];
    uint64_t v32 = v22[7];
    uint64_t v33 = *(unsigned int *)(v31 + 24 * a5 + 4);
    unsigned int v34 = *(unsigned __int16 *)(v32 + 2 * v33);
    if (!*(_WORD *)(v32 + 2 * v33)) {
      goto LABEL_41;
    }
    LOWORD(v34) = v34 + a5;
    v35 = (unsigned __int16 *)(v22[11] + 2 * *(unsigned int *)(v31 + 24 * a5 + 12));
    v36 = (unsigned __int16 *)(v32 + 2 * v33 + 2);
    while (v76 != *v35)
    {
      int v37 = *v36++;
      LOWORD(v34) = v37 + v34;
      ++v35;
      if (!v37)
      {
        unsigned int v34 = 0;
        goto LABEL_41;
      }
    }
    unsigned int v34 = (unsigned __int16)v34;
LABEL_41:
    if (v34 == a6) {
      BOOL v74 = 1;
    }
    else {
      BOOL v74 = v34 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v30, a6, v34);
    }
    int v38 = 0;
    unsigned int v72 = LODWORD((&off_1E66A3D20)[v23 + 2]) - v76;
    int v73 = (int)(&off_1E66A3D20)[v23 + 2];
    v75 = *(llvm::MachineFunction **)(a2 + 32);
    int v71 = LOBYTE((&off_1E66A3D20)[v23 + 1]);
    while (1)
    {
      int v39 = v73 - v38;
      if (!v74) {
        int v39 = v38 + v76;
      }
      uint64_t v40 = v22[1];
      uint64_t v41 = v22[7];
      uint64_t v42 = *(unsigned int *)(v40 + 24 * a6 + 4);
      if (*(_WORD *)(v41 + 2 * v42))
      {
        unsigned __int16 v43 = *(_WORD *)(v41 + 2 * v42) + a6;
        v44 = (unsigned __int16 *)(v22[11] + 2 * *(unsigned int *)(v40 + 24 * a6 + 12));
        v45 = (unsigned __int16 *)(v41 + 2 * v42 + 2);
        while (v39 != *v44)
        {
          int v46 = *v45++;
          v43 += v46;
          ++v44;
          if (!v46) {
            goto LABEL_53;
          }
        }
        unsigned int v47 = v43;
      }
      else
      {
LABEL_53:
        unsigned int v47 = 0;
      }
      uint64_t v48 = *(unsigned int *)(v40 + 24 * a5 + 4);
      if (*(_WORD *)(v41 + 2 * v48))
      {
        unsigned __int16 v49 = *(_WORD *)(v41 + 2 * v48) + a5;
        v50 = (unsigned __int16 *)(v22[11] + 2 * *(unsigned int *)(v40 + 24 * a5 + 12));
        v51 = (unsigned __int16 *)(v41 + 2 * v48 + 2);
        while (v39 != *v50)
        {
          int v52 = *v51++;
          v49 += v52;
          ++v50;
          if (!v52) {
            goto LABEL_59;
          }
        }
        int v53 = v49;
      }
      else
      {
LABEL_59:
        int v53 = 0;
      }
      v54 = *a4;
      if (v71)
      {
        v83 = *a4;
        if (v54) {
          llvm::MetadataTracking::track((uint64_t)&v83, v54, 2);
        }
        v55 = sub_1CD3D2D88(a1, a2, a3, &v83, v53, v47, a7);
        v56 = v83;
        if (v83)
        {
          int v57 = *v83;
          if ((v57 - 4) > 0x1E)
          {
            if ((v57 - 3) >= 0xFFFFFFFE) {
              v65 = v83;
            }
            else {
              v65 = 0;
            }
            if ((v57 - 3) < 0xFFFFFFFE)
            {
LABEL_102:
              v58 = v75;
              if (v57 == 3) {
                *((void *)v56 + 1) = 0;
              }
              goto LABEL_80;
            }
            unint64_t v60 = (unint64_t)(v65 + 8);
LABEL_100:
            v58 = v75;
            v64 = &v83;
            goto LABEL_101;
          }
          v58 = v75;
          if ((v83[1] & 0x7F) != 2 && !*((_DWORD *)v83 + 3)) {
            goto LABEL_80;
          }
          uint64_t v61 = *((void *)v83 + 2);
          if ((v61 & 4) != 0)
          {
            unint64_t v60 = v61 & 0xFFFFFFFFFFFFFFF8;
            if (v60) {
              goto LABEL_100;
            }
          }
        }
      }
      else
      {
        v82 = *a4;
        if (v54) {
          llvm::MetadataTracking::track((uint64_t)&v82, v54, 2);
        }
        v55 = sub_1CD3D2F58(a1, a2, a3, &v82, v53, v47, a7);
        v56 = v82;
        if (v82)
        {
          int v57 = *v82;
          if ((v57 - 4) > 0x1E)
          {
            if ((v57 - 3) >= 0xFFFFFFFE) {
              v63 = v82;
            }
            else {
              v63 = 0;
            }
            if ((v57 - 3) < 0xFFFFFFFE) {
              goto LABEL_102;
            }
            unint64_t v60 = (unint64_t)(v63 + 8);
LABEL_94:
            v58 = v75;
            v64 = &v82;
LABEL_101:
            v86 = v64;
            sub_1CC5FA668(v60 + 16, &v86);
            goto LABEL_80;
          }
          v58 = v75;
          if ((v82[1] & 0x7F) != 2 && !*((_DWORD *)v82 + 3)) {
            goto LABEL_80;
          }
          uint64_t v59 = *((void *)v82 + 2);
          if ((v59 & 4) != 0)
          {
            unint64_t v60 = v59 & 0xFFFFFFFFFFFFFFF8;
            if (v60) {
              goto LABEL_94;
            }
          }
        }
      }
      v58 = v75;
LABEL_80:
      v80 = v58;
      v81 = v55;
      if (*(unsigned char *)(*(void *)(*(void *)(a2 + 32) + 40) + 16))
      {
        if (((v38 != 0) & a7) != 0) {
          unsigned int v62 = 36;
        }
        else {
          unsigned int v62 = 4;
        }
        sub_1CB89517C(&v80, a6, v62, 0);
      }
      else
      {
        uint64_t v87 = 0;
        uint64_t v88 = 0;
        uint64_t v89 = 0;
        LODWORD(v86) = 50331648;
        HIDWORD(v86) = a5;
        llvm::MachineInstr::addOperand(v55, v58, (const llvm::MachineOperand *)&v86);
        if (v38)
        {
          uint64_t v87 = 0;
          uint64_t v88 = 0;
          uint64_t v89 = 0;
          LODWORD(v86) = 0x2000000;
          HIDWORD(v86) = a5;
          llvm::MachineInstr::addOperand(v81, v80, (const llvm::MachineOperand *)&v86);
        }
      }
      if (++v38 > v72) {
        return;
      }
    }
  }
  int v13 = 1 << (a5 & 7);
  BOOL v14 = (v13 & byte_1CDD6BEEA[v12]) == 0 || a6 - 1 > 0x3FFFFFFE;
  if (v14 || a6 > 0x407)
  {
    uint64_t v15 = a5 >> 3;
LABEL_21:
    if ((v13 & byte_1CDD6A15E[v15]) != 0)
    {
      v66 = *a4;
      v84 = v66;
      if (v66) {
        llvm::MetadataTracking::track((uint64_t)&v84, v66, 2);
      }
      sub_1CD3D2F58(a1, a2, a3, &v84, a5, a6, a7);
      int v17 = v84;
      if (!v84) {
        return;
      }
      int v18 = *v84;
      if ((v18 - 4) > 0x1E)
      {
        if ((v18 - 3) >= 0xFFFFFFFE) {
          v68 = v84;
        }
        else {
          v68 = 0;
        }
        if ((v18 - 3) < 0xFFFFFFFE)
        {
LABEL_126:
          if (v18 == 3) {
            *((void *)v17 + 1) = 0;
          }
          return;
        }
        unint64_t v20 = (unint64_t)(v68 + 8);
      }
      else
      {
        if ((v84[1] & 0x7F) != 2 && !*((_DWORD *)v84 + 3)) {
          return;
        }
        uint64_t v67 = *((void *)v84 + 2);
        if ((v67 & 4) == 0) {
          return;
        }
        unint64_t v20 = v67 & 0xFFFFFFFFFFFFFFF8;
        if (!v20) {
          return;
        }
      }
      v69 = &v84;
LABEL_125:
      v86 = v69;
      sub_1CC5FA668(v20 + 16, &v86);
      return;
    }
    goto LABEL_22;
  }
  uint64_t v15 = a5 >> 3;
  if (((byte_1CDD6BEEA[a6 >> 3] >> (a6 & 7)) & 1) == 0) {
    goto LABEL_21;
  }
  v16 = *a4;
  v85 = v16;
  if (v16) {
    llvm::MetadataTracking::track((uint64_t)&v85, v16, 2);
  }
  sub_1CD3D2D88(a1, a2, a3, &v85, a5, a6, a7);
  int v17 = v85;
  if (!v85) {
    return;
  }
  int v18 = *v85;
  if ((v18 - 4) > 0x1E)
  {
    if ((v18 - 3) >= 0xFFFFFFFE) {
      v70 = v85;
    }
    else {
      v70 = 0;
    }
    if ((v18 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unint64_t)(v70 + 8);
LABEL_124:
      v69 = &v85;
      goto LABEL_125;
    }
    goto LABEL_126;
  }
  if ((v85[1] & 0x7F) == 2 || *((_DWORD *)v85 + 3))
  {
    uint64_t v19 = *((void *)v85 + 2);
    if ((v19 & 4) != 0)
    {
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (v20) {
        goto LABEL_124;
      }
    }
  }
}

uint64_t sub_1CB895984(char a1, int a2, uint64_t a3)
{
  uint64_t result = 0;
  if (!a1 && a2 < 0)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = *(void *)(a3 + 16 * (a2 & 0x7FFFFFFF) + 8);
    if (v7)
    {
      uint64_t v8 = *(void *)(a3 + 16 * (a2 & 0x7FFFFFFF) + 8);
      if ((*(_DWORD *)v7 & 0x81000000) == 0) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a3 + 16 * (a2 & 0x7FFFFFFF) + 8);
      while (1)
      {
        uint64_t v8 = *(void *)(v8 + 24);
        if (!v8) {
          break;
        }
        if ((*(_DWORD *)v8 & 0x81000000) == 0)
        {
LABEL_8:
          while (1)
          {
            uint64_t v8 = *(void *)(v8 + 24);
            if (!v8) {
              break;
            }
            uint64_t result = 0;
            if ((*(_DWORD *)v8 & 0x81000000) == 0) {
              return result;
            }
          }
          if (*(_DWORD *)v7 & 0x1000000) != 0 || (uint64_t v7 = *(void *)(v7 + 24)) != 0 && (*(unsigned char *)(v7 + 3))
          {
            uint64_t v9 = *(void *)(v7 + 8);
            if (v9)
            {
              if ((*(_WORD *)(v9 + 44) & 0xC) != 0 && (*(_WORD *)(v9 + 44) & 4) == 0)
              {
                for (uint64_t i = *(void *)(v7 + 8); ; uint64_t i = *(void *)(i + 8))
                {
                  uint64_t v13 = *(void *)(i + 16);
                  if ((*(unsigned char *)(v13 + 10) & 0x40) == 0 && *(_WORD *)v13 != 20) {
                    break;
                  }
                  if ((*(_WORD *)(i + 44) & 8) == 0)
                  {
                    uint64_t v11 = *(void *)(v9 + 16);
                    goto LABEL_25;
                  }
                }
              }
              else
              {
                uint64_t v11 = *(void *)(v9 + 16);
                if ((*(unsigned char *)(v11 + 10) & 0x40) == 0) {
                  return 0;
                }
LABEL_25:
                if ((*(unsigned char *)(v11 + 17) & 2) == 0)
                {
                  int v14 = *(_DWORD *)(v9 + 40) - 1;
                  if (*(_DWORD *)(v9 + 40) != 1)
                  {
                    uint64_t v15 = (_DWORD *)(*(void *)(v9 + 32) + 36);
                    do
                    {
                      int v16 = *(v15 - 1);
                      if ((_BYTE)v16)
                      {
                        if (v16 - 5 < 2 || v16 == 8) {
                          return 0;
                        }
                      }
                      else if ((v16 & 0xF00000) != 0 {
                             || (*v15 - 1) < 0x3FFFFFFF
                      }
                             || (v16 & 0x1000000) != 0 && (v16 & 0x5000000) != 0x5000000)
                      {
                        return 0;
                      }
                      v15 += 8;
                      --v14;
                    }
                    while (v14);
                  }
                  BOOL v18 = 1;
                  if (llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v9, 0, &v18)) {
                    return v9;
                  }
                  else {
                    return 0;
                  }
                }
              }
            }
          }
          return 0;
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1CB895E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  int v57 = &v66;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  v65[1] = 0x600000002;
  int v68 = 128;
  v69 = v71;
  v71[0] = 0;
  v71[1] = 0;
  uint64_t v70 = 0x600000002;
  int v72 = 128;
  uint64_t v5 = *(unsigned __int16 **)(a2 + 16);
  uint64_t v6 = *((void *)v5 + 2);
  uint64_t v7 = *(unsigned __int16 **)(a3 + 16);
  uint64_t v8 = *((void *)v7 + 2);
  v64[0] = v6;
  v64[1] = v8;
  v65[0] = &v66;
  int v9 = *v5;
  int v10 = *v7;
  v63[0] = v9;
  v63[1] = v10;
  v62[0] = a2;
  v62[1] = a3;
  char v11 = 1;
  do
  {
    char v12 = v11;
    int v13 = v63[v4];
    if ((v13 - 11972) < 2 || v13 == 813)
    {
      uint64_t v14 = v4 ^ 1;
      if (sub_1CB84E50C(v63[v4 ^ 1]) || (v64[v14] & 0x2000) != 0) {
        goto LABEL_14;
      }
    }
    char v11 = 0;
    uint64_t v4 = 1;
  }
  while ((v12 & 1) != 0);
  if (((v6 | v8) & 0x20) != 0)
  {
    if (!sub_1CB84E50C(v9) || !sub_1CB84E50C(v10)) {
      goto LABEL_89;
    }
LABEL_14:
    BOOL v17 = 0;
    goto LABEL_90;
  }
  if ((v9 - 13424) < 3) {
    goto LABEL_11;
  }
  if (v9 == 13427)
  {
    int v16 = *(_DWORD *)(*(void *)(a2 + 32) + 48);
    char v15 = 1;
  }
  else
  {
    if (v9 == 13428)
    {
LABEL_11:
      char v15 = 1;
      int v16 = -1;
      goto LABEL_17;
    }
    int v16 = 0;
    char v15 = 0;
  }
LABEL_17:
  int v18 = -1;
  if ((v10 - 13424) < 3 || v10 == 13428) {
    goto LABEL_21;
  }
  if (v10 == 13427)
  {
    int v18 = *(_DWORD *)(*(void *)(a3 + 32) + 48);
LABEL_21:
    if ((v15 & 1) == 0) {
      goto LABEL_89;
    }
    BOOL v17 = (v16 | v18) >= 0 && v16 != v18;
    goto LABEL_90;
  }
  BOOL v17 = 1;
  if (v15) {
    goto LABEL_90;
  }
  uint64_t v20 = 0;
  char v21 = 1;
  do
  {
    char v22 = v21;
    HIDWORD(v24) = v63[v20] - 11791;
    LODWORD(v24) = HIDWORD(v24);
    unsigned int v23 = v24 >> 1;
    BOOL v25 = v23 > 9;
    int v26 = (1 << v23) & 0x303;
    if (!v25 && v26 != 0)
    {
      BOOL v28 = (void *)v65[9 * v20];
      *v28 |= 8uLL;
      goto LABEL_35;
    }
    uint64_t v33 = v62[v20];
    unsigned int v34 = (int *)(v33 + 48);
    unint64_t v35 = *(void *)(v33 + 48);
    if (v35 >= 8)
    {
      if ((v35 & 7) == 0)
      {
        *(void *)(v33 + 48) = v35 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v40 = (int *)(v33 + 56);
LABEL_57:
        uint64_t v41 = (void **)&v65[9 * v20];
        while (1)
        {
          unsigned int v42 = *(_DWORD *)(*(void *)v34 + 16);
          if (!v42 && (v64[v20] & 0x30000) == 0) {
            goto LABEL_14;
          }
          BOOL v28 = *v41;
          (*v41)[v42 >> 6] |= 1 << v42;
          v34 += 2;
          if (v34 == v40) {
            goto LABEL_35;
          }
        }
      }
      v36 = (int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      if ((*(void *)(v33 + 48) & 7) == 3 && v36 != 0)
      {
        uint64_t v39 = *v36;
        unsigned int v34 = v36 + 2;
        uint64_t v38 = v39;
        if (v39)
        {
          uint64_t v40 = &v34[2 * v38];
          goto LABEL_57;
        }
      }
    }
    BOOL v28 = (void *)v65[9 * v20];
LABEL_35:
    uint64_t v29 = LODWORD(v65[9 * v20 + 1]);
    uint64_t v30 = 8 * v29;
    if (v29)
    {
      uint64_t v31 = 8 * v29;
      uint64_t v32 = v28;
      while (!*v32)
      {
        ++v32;
        v31 -= 8;
        if (!v31) {
          goto LABEL_39;
        }
      }
    }
    else
    {
LABEL_39:
      if ((v64[v20] & 0x30000) != 0) {
        *v28 |= 1uLL;
      }
    }
    if (!v29) {
      goto LABEL_14;
    }
    while (!*v28)
    {
      BOOL v17 = 0;
      ++v28;
      v30 -= 8;
      if (!v30) {
        goto LABEL_90;
      }
    }
    char v21 = 0;
    uint64_t v20 = 1;
  }
  while ((v22 & 1) != 0);
  if (v68 != v72) {
    goto LABEL_70;
  }
  if (v66 != *v69 || v67 != v69[1]) {
    goto LABEL_70;
  }
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v59 = 0;
  if (!sub_1CD3D47BC(a2, (int *)&v59 + 1, (_DWORD *)&v61 + 1, (int *)&v60 + 1)
    || !sub_1CD3D47BC(a3, (int *)&v59, &v61, (int *)&v60)
    || HIDWORD(v59) != v59)
  {
    goto LABEL_70;
  }
  int v51 = HIDWORD(v61);
  if (SHIDWORD(v61) >= (int)v61) {
    int v52 = v61;
  }
  else {
    int v52 = HIDWORD(v61);
  }
  if (SHIDWORD(v61) <= (int)v61) {
    int v51 = v61;
  }
  int v53 = (uint64_t *)((char *)&v60 + 4);
  if (SHIDWORD(v61) > (int)v61) {
    int v53 = &v60;
  }
  if (*(_DWORD *)v53 + v52 > v51)
  {
LABEL_70:
    uint64_t v44 = v70 >= 2 ? 2 : v70;
    if (v44)
    {
      v45 = v69;
      uint64_t v46 = v44 - 1;
      do
      {
        uint64_t v47 = *v45++;
        uint64_t v48 = v47 & *v57;
        BOOL v17 = v48 == 0;
        BOOL v50 = v46-- != 0;
        if (v48) {
          break;
        }
        ++v57;
      }
      while (v50);
      goto LABEL_90;
    }
  }
LABEL_89:
  BOOL v17 = 1;
LABEL_90:
  for (uint64_t i = 0; i != -18; i -= 9)
  {
    v55 = (&v69)[i];
    if (&v71[i] != v55) {
      free(v55);
    }
  }
  return v17;
}

uint64_t sub_1CB89629C()
{
  return 0;
}

uint64_t sub_1CB8962A4()
{
  return 0;
}

uint64_t sub_1CB8962AC()
{
  return 0;
}

uint64_t sub_1CB8962B4()
{
  return 0;
}

uint64_t sub_1CB8962BC()
{
  return 0;
}

uint64_t sub_1CB8962C4(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 44) & 0xC) == 0 || (*(_WORD *)(a2 + 44) & 4) != 0) {
    return (*(unsigned __int8 *)(*(void *)(a2 + 16) + 11) >> 6) & 1;
  }
  while (1)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if ((*(unsigned char *)(v4 + 11) & 0x40) == 0 && *(_WORD *)v4 != 20) {
      break;
    }
    if ((*(_WORD *)(a2 + 44) & 8) == 0) {
      return 1;
    }
    a2 = *(void *)(a2 + 8);
  }
  return 0;
}

void sub_1CB896320(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t sub_1CB89632C()
{
  return 0;
}

uint64_t sub_1CB896334(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 448))(a1, a2, a3, a4);
}

uint64_t sub_1CB896364(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 464))(a1, a2, a3, a4);
}

uint64_t sub_1CB896394()
{
  return 0;
}

uint64_t sub_1CB89639C()
{
  return 0;
}

uint64_t sub_1CB8963A4()
{
  return 0;
}

uint64_t sub_1CB8963AC()
{
  return 1;
}

uint64_t sub_1CB8963B4()
{
  return 0;
}

uint64_t sub_1CB8963BC()
{
  return 0;
}

uint64_t sub_1CB8963C4()
{
  return 5;
}

uint64_t sub_1CB8963CC()
{
  return 1;
}

uint64_t sub_1CB8963D4()
{
  return 16;
}

uint64_t sub_1CB8963DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(a2 + 16) + 8);
  if ((*(_WORD *)(a2 + 44) & 0xC) == 0 || (*(_WORD *)(a2 + 44) & 4) != 0)
  {
    if ((v2 & 0x20) != 0) {
      return (v2 >> 7) & 1;
    }
    return 0;
  }
  if ((v2 & 0x20) == 0)
  {
    uint64_t v5 = a2;
    while ((*(_WORD *)(v5 + 44) & 8) != 0)
    {
      uint64_t v5 = *(void *)(v5 + 8);
      if ((*(unsigned char *)(*(void *)(v5 + 16) + 8) & 0x20) != 0) {
        goto LABEL_12;
      }
    }
    return 0;
  }
LABEL_12:
  if ((v2 & 0x80) != 0) {
    return 1;
  }
  do
  {
    unsigned int v6 = *(unsigned __int16 *)(a2 + 44);
    uint64_t result = (v6 >> 3) & 1;
    if ((v6 & 8) == 0) {
      break;
    }
    a2 = *(void *)(a2 + 8);
  }
  while ((*(unsigned char *)(*(void *)(a2 + 16) + 8) & 0x80) == 0);
  return result;
}

uint64_t sub_1CB89645C()
{
  return 0;
}

llvm::MachineInstr *sub_1CB896464(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, int a6)
{
  uint64_t v10 = *(void *)(a1 + 8) + 912;
  char v11 = *(llvm::MachineFunction **)(a2 + 32);
  char v12 = *a4;
  uint64_t v27 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v27, v12, 2);
  }
  int v13 = llvm::MachineFunction::CreateMachineInstr(v11, v10, &v27, 0);
  if (v27) {
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  }
  uint64_t v14 = *(void *)(a2 + 40);
  *((void *)v13 + 3) = v14;
  uint64_t v15 = *(void *)(v14 + 32);
  uint64_t v16 = *((unsigned int *)v13 + 10);
  if (v16)
  {
    uint64_t v20 = *((void *)v13 + 4);
    uint64_t v21 = *(void *)(v15 + 40);
    uint64_t v22 = 32 * v16;
    do
    {
      if (!*(unsigned char *)v20)
      {
        uint64_t v23 = *(unsigned int *)(v20 + 4);
        if ((int)v23 >= 0) {
          unint64_t v24 = (uint64_t *)(*(void *)(v21 + 272) + 8 * v23);
        }
        else {
          unint64_t v24 = (uint64_t *)(*(void *)(v21 + 24) + 16 * (v23 & 0x7FFFFFFF) + 8);
        }
        uint64_t v25 = *v24;
        if (*v24)
        {
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = v20;
          *(void *)(v20 + 16) = v26;
          if (*(unsigned char *)(v20 + 3))
          {
            *(void *)(v20 + 24) = v25;
          }
          else
          {
            *(void *)(v20 + 24) = 0;
            unint64_t v24 = (uint64_t *)(v26 + 24);
          }
        }
        else
        {
          *(void *)(v20 + 16) = v20;
          *(void *)(v20 + 24) = 0;
        }
        *unint64_t v24 = v20;
      }
      v20 += 32;
      v22 -= 32;
    }
    while (v22);
  }
  uint64_t v17 = *(void *)(v15 + 728);
  if (v17) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v17 + 24))(v17, v13);
  }
  unint64_t v18 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v13 = v18 | *(void *)v13 & 7;
  *((void *)v13 + 1) = a3;
  *(void *)(v18 + 8) = v13;
  *a3 = *a3 & 7 | (unint64_t)v13;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v28 = 0x1000000;
  int v29 = a6;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v28);
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  int v28 = 0;
  int v29 = a5;
  uint64_t v32 = 0;
  llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v28);
  return v13;
}

llvm::MachineInstr *sub_1CB89662C(uint64_t a1, uint64_t a2, unint64_t *a3, unsigned __int8 **a4, int a5, __int16 a6, int a7)
{
  uint64_t v12 = *(void *)(a1 + 8) + 912;
  int v13 = *(llvm::MachineFunction **)(a2 + 32);
  uint64_t v14 = *a4;
  int v29 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v29, v14, 2);
  }
  uint64_t v15 = llvm::MachineFunction::CreateMachineInstr(v13, v12, &v29, 0);
  if (v29) {
    llvm::MetadataTracking::untrack((uint64_t)&v29, v29);
  }
  uint64_t v16 = *(void *)(a2 + 40);
  *((void *)v15 + 3) = v16;
  uint64_t v17 = *(void *)(v16 + 32);
  uint64_t v18 = *((unsigned int *)v15 + 10);
  if (v18)
  {
    uint64_t v22 = *((void *)v15 + 4);
    uint64_t v23 = *(void *)(v17 + 40);
    uint64_t v24 = 32 * v18;
    do
    {
      if (!*(unsigned char *)v22)
      {
        uint64_t v25 = *(unsigned int *)(v22 + 4);
        if ((int)v25 >= 0) {
          uint64_t v26 = (uint64_t *)(*(void *)(v23 + 272) + 8 * v25);
        }
        else {
          uint64_t v26 = (uint64_t *)(*(void *)(v23 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
        }
        uint64_t v27 = *v26;
        if (*v26)
        {
          uint64_t v28 = *(void *)(v27 + 16);
          *(void *)(v27 + 16) = v22;
          *(void *)(v22 + 16) = v28;
          if (*(unsigned char *)(v22 + 3))
          {
            *(void *)(v22 + 24) = v27;
          }
          else
          {
            *(void *)(v22 + 24) = 0;
            uint64_t v26 = (uint64_t *)(v28 + 24);
          }
        }
        else
        {
          *(void *)(v22 + 16) = v22;
          *(void *)(v22 + 24) = 0;
        }
        *uint64_t v26 = v22;
      }
      v22 += 32;
      v24 -= 32;
    }
    while (v24);
  }
  uint64_t v19 = *(void *)(v17 + 728);
  if (v19) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v19 + 24))(v19, v15);
  }
  unint64_t v20 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v15 = v20 | *(void *)v15 & 7;
  *((void *)v15 + 1) = a3;
  *(void *)(v20 + 8) = v15;
  *a3 = *a3 & 7 | (unint64_t)v15;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v30 = 0x1000000;
  int v31 = a7;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v30);
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  int v30 = (a6 & 0xFFF) << 8;
  int v31 = a5;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v30);
  return v15;
}

unsigned __int8 **sub_1CB896804(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (a2 == a1) {
    return a1;
  }
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v7 = *v4;
    if ((v7 - 4) > 0x1E)
    {
      if ((v7 - 3) >= 0xFFFFFFFE) {
        uint64_t v10 = *a1;
      }
      else {
        uint64_t v10 = 0;
      }
      if ((v7 - 3) < 0xFFFFFFFE)
      {
        if (v7 == 3) {
          *((void *)v4 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v9 = (unint64_t)(v10 + 8);
    }
    else
    {
      if ((v4[1] & 0x7F) != 2 && !*((_DWORD *)v4 + 3)) {
        goto LABEL_3;
      }
      uint64_t v8 = *((void *)v4 + 2);
      if ((v8 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if (!v9) {
        goto LABEL_3;
      }
    }
    char v11 = a1;
    sub_1CC5FA668(v9 + 16, &v11);
  }
LABEL_3:
  uint64_t v5 = *a2;
  *a1 = *a2;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)a1, v5, 2);
  }
  return a1;
}

unint64_t sub_1CB8968D4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    unint64_t v5 = *(void *)a1 + 32 * v3;
    if (*(void *)a1 > a2 || v5 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  return a2;
}

void *sub_1CB89694C(llvm::SmallPtrSetImplBase *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *((unsigned int *)this + 5);
  if (v4 != *(void *)this)
  {
    unsigned int v9 = *((_DWORD *)this + 4);
    goto LABEL_12;
  }
  if (!v5)
  {
LABEL_9:
    unsigned int v9 = *((_DWORD *)this + 4);
    if (v5 < v9)
    {
      *((_DWORD *)this + 5) = v5 + 1;
      *(void *)(v4 + 8 * v5) = a2;
      return (void *)(*(void *)this + 8 * v5);
    }
LABEL_12:
    if (3 * v9 <= 4 * ((int)v5 - *((_DWORD *)this + 6)))
    {
      if (v9 >= 0x40) {
        v9 *= 2;
      }
      else {
        unsigned int v9 = 128;
      }
    }
    else if (v9 - v5 >= v9 >> 3)
    {
      goto LABEL_14;
    }
    llvm::SmallPtrSetImplBase::Grow(this, v9);
    unsigned int v9 = *((_DWORD *)this + 4);
    uint64_t v4 = *((void *)this + 1);
LABEL_14:
    unsigned int v10 = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t result = (void *)(v4 + 8 * v10);
    uint64_t v11 = *result;
    if (*result == -1)
    {
      uint64_t v12 = 0;
LABEL_26:
      if (v12) {
        uint64_t result = v12;
      }
      if (*result != a2)
      {
        if (*result == -2) {
          --*((_DWORD *)this + 6);
        }
        else {
          ++*((_DWORD *)this + 5);
        }
        *uint64_t result = a2;
      }
    }
    else
    {
      uint64_t v12 = 0;
      int v13 = 1;
      while (v11 != a2)
      {
        if (v12) {
          BOOL v14 = 0;
        }
        else {
          BOOL v14 = v11 == -2;
        }
        if (v14) {
          uint64_t v12 = result;
        }
        unsigned int v15 = v10 + v13++;
        unsigned int v10 = v15 & (v9 - 1);
        uint64_t result = (void *)(v4 + 8 * v10);
        uint64_t v11 = *result;
        if (*result == -1) {
          goto LABEL_26;
        }
      }
    }
    return result;
  }
  unsigned int v6 = 0;
  uint64_t v7 = 8 * v5;
  uint64_t result = (void *)*((void *)this + 1);
  while (*result != a2)
  {
    if (*result == -2) {
      unsigned int v6 = result;
    }
    ++result;
    v7 -= 8;
    if (!v7)
    {
      if (!v6) {
        goto LABEL_9;
      }
      void *v6 = a2;
      --*((_DWORD *)this + 6);
      return v6;
    }
  }
  return result;
}

void *sub_1CB896AE8(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2 == *(void **)a1)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 20);
    uint64_t result = &v2[v3];
    if (v3)
    {
      uint64_t v5 = 8 * v3;
      while (*v2 != a2)
      {
        ++v2;
        v5 -= 8;
        if (!v5) {
          return result;
        }
      }
      return v2;
    }
  }
  else
  {
    uint64_t v6 = *(unsigned int *)(a1 + 16);
    int v7 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t result = &v2[v7];
    uint64_t v8 = *result;
    if (*result == -1)
    {
      unsigned int v9 = 0;
LABEL_20:
      if (v9) {
        uint64_t result = v9;
      }
      if (*result != a2) {
        return &v2[v6];
      }
    }
    else
    {
      unsigned int v9 = 0;
      int v10 = 1;
      while (v8 != a2)
      {
        if (v9) {
          BOOL v11 = 0;
        }
        else {
          BOOL v11 = v8 == -2;
        }
        if (v11) {
          unsigned int v9 = result;
        }
        int v12 = v7 + v10++;
        int v7 = v12 & (v6 - 1);
        uint64_t result = &v2[v7];
        uint64_t v8 = *result;
        if (*result == -1) {
          goto LABEL_20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1CB896BAC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char a9, char a10, unsigned int a11)
{
  int v13 = (uint64_t *)a2;
  int v15 = *(unsigned __int16 *)(a2 + 24);
  if ((v15 - 11) > 1)
  {
    unsigned int v21 = a11;
    if (a8)
    {
      BOOL v22 = (a11 & 6) != 0 || a7 == 0;
      if (!v22 && v15 == 46)
      {
        uint64_t v23 = *(void *)(a2 + 32);
        uint64_t v24 = *(void *)(*(void *)v23 + 80);
        uint64_t v25 = (void *)(v24 + 24);
        if (*(_DWORD *)(v24 + 32) >= 0x41u) {
          uint64_t v25 = (void *)*v25;
        }
        if (*v25 == 1830)
        {
          int v13 = *(uint64_t **)(v23 + 40);
          a3 = *(_DWORD *)(v23 + 48);
          unsigned int v21 = a11 | 1;
        }
      }
      if (a9 && (v21 & 4) == 0 && *((_WORD *)v13 + 12) == 222)
      {
        uint64_t v26 = v13[4];
        int v13 = *(uint64_t **)v26;
        a3 = *(_DWORD *)(v26 + 8);
        v21 ^= 2u;
      }
      if (*((_WORD *)v13 + 12) == 223)
      {
        uint64_t v27 = v13[4];
        int v13 = *(uint64_t **)v27;
        a3 = *(_DWORD *)(v27 + 8);
        v21 |= 4u;
      }
    }
    else if (v15 == 57 && a9 != 0)
    {
      uint64_t v29 = *(void *)(a2 + 32);
      int v30 = *(unsigned __int16 *)(*(void *)v29 + 24);
      if (v30 == 35 || v30 == 11)
      {
        uint64_t v32 = *(void *)(*(void *)v29 + 80);
        uint64_t v33 = (void *)(v32 + 24);
        if (*(_DWORD *)(v32 + 32) >= 0x41u) {
          uint64_t v33 = (void *)*v33;
        }
        if (!*v33)
        {
          int v13 = *(uint64_t **)(v29 + 40);
          a3 = *(_DWORD *)(v29 + 48);
          unsigned int v21 = a11 | 2;
        }
      }
    }
    int v34 = *((unsigned __int16 *)v13 + 12);
    switch(v34)
    {
      case 201:
        int v52 = (llvm **)(v13[5] + 16 * a3);
        int v53 = *v52;
        if (*v52 != 4) {
          goto LABEL_73;
        }
        uint64_t v54 = *(void *)v13[4];
        if (*(_WORD *)(v54 + 24) != 395) {
          goto LABEL_73;
        }
        uint64_t v55 = **(void **)(v54 + 32);
        int v56 = *(unsigned __int16 *)(v55 + 24);
        if (v56 != 35 && v56 != 11) {
          goto LABEL_73;
        }
        uint64_t v47 = *(void *)(a1 + 296);
        uint64_t v49 = (uint64_t)v52[1];
        uint64_t v58 = *(void *)(v55 + 80);
        uint64_t v59 = (void *)(v58 + 24);
        if (*(_DWORD *)(v58 + 32) >= 0x41u) {
          uint64_t v59 = (void *)*v59;
        }
        uint64_t v50 = *v59 >> 1;
        uint64_t v48 = v53;
        int v46 = 2;
        break;
      case 395:
        uint64_t v35 = *(void *)v13[4];
        int v36 = *(unsigned __int16 *)(v35 + 24);
        if (v36 != 35 && v36 != 11) {
          goto LABEL_73;
        }
        uint64_t v38 = *(void *)(a1 + 296);
        uint64_t v39 = (llvm **)(v13[5] + 16 * a3);
        uint64_t v40 = *v39;
        uint64_t v41 = (uint64_t)v39[1];
        uint64_t v42 = *(void *)(v35 + 80);
        unsigned __int16 v43 = (void *)(v42 + 24);
        if (*(_DWORD *)(v42 + 32) >= 0x41u) {
          unsigned __int16 v43 = (void *)*v43;
        }
        uint64_t v44 = *v43 >> 1;
        uint64_t v73 = v40;
        uint64_t v74 = v41;
        int v46 = sub_1CB896FB8((unsigned __int8 *)&v73);
        if (v45 == 1)
        {
          int v72 = v46;
          int v46 = v72;
        }
        uint64_t v47 = v38;
        uint64_t v48 = v40;
        uint64_t v49 = v41;
        uint64_t v50 = v44;
        break;
      case 212:
        if (!a10) {
          goto LABEL_73;
        }
        uint64_t v60 = *(void *)v13[4];
        if (*(_WORD *)(v60 + 24) != 395) {
          goto LABEL_73;
        }
        uint64_t v61 = **(void **)(v60 + 32);
        int v62 = *(unsigned __int16 *)(v61 + 24);
        if (v62 != 35 && v62 != 11) {
          goto LABEL_73;
        }
        uint64_t v47 = *(void *)(a1 + 296);
        uint64_t v64 = v13[5] + 16 * a3;
        uint64_t v48 = *(llvm **)v64;
        uint64_t v49 = *(void *)(v64 + 8);
        uint64_t v65 = *(void *)(v61 + 80);
        uint64_t v66 = (void *)(v65 + 24);
        if (*(_DWORD *)(v65 + 32) >= 0x41u) {
          uint64_t v66 = (void *)*v66;
        }
        uint64_t v50 = *v66 >> 1;
        int v46 = 4;
        break;
      default:
        goto LABEL_73;
    }
    int v13 = sub_1CD7ED9FC(v47, 64, v48, v49, v50, v46);
    a3 = v51;
LABEL_73:
    *(void *)a4 = v13;
    *(_DWORD *)(a4 + 8) = a3;
    uint64_t v19 = *(void *)(a1 + 296);
    uint64_t v20 = v21;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    goto LABEL_74;
  }
  if (*(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) == 6)
  {
    uint64_t v16 = *(void *)(a2 + 80);
    uint64_t v17 = (uint64_t *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u) {
      uint64_t v17 = (uint64_t *)*v17;
    }
    if (!*((_DWORD *)v17 + 1) && (a6 & 1) == 0) {
      return 0;
    }
  }
  else if (!a6)
  {
    return 0;
  }
  *(void *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  uint64_t v19 = *(void *)(a1 + 296);
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  uint64_t v20 = 0;
LABEL_74:
  *(void *)a5 = sub_1CD7EBF14(v19, v20, (const llvm::APInt *)&v73, (llvm *)5, 0, 1, 0);
  *(_DWORD *)(a5 + 8) = v67;
  if (v73)
  {
    int v68 = *(unsigned __int8 *)v73;
    if ((v68 - 4) > 0x1E)
    {
      if ((v68 - 3) >= 0xFFFFFFFE) {
        v69 = v73;
      }
      else {
        v69 = 0;
      }
      if ((v68 - 3) < 0xFFFFFFFE)
      {
        if (v68 == 3) {
          *((void *)v73 + 1) = 0;
        }
        return 1;
      }
      unint64_t v70 = (unint64_t)v69 + 8;
    }
    else
    {
      if ((*((unsigned char *)v73 + 1) & 0x7F) != 2 && !*((_DWORD *)v73 + 3)) {
        return 1;
      }
      uint64_t v71 = *((void *)v73 + 2);
      if ((v71 & 4) == 0) {
        return 1;
      }
      unint64_t v70 = v71 & 0xFFFFFFFFFFFFFFF8;
      if (!v70) {
        return 1;
      }
    }
    v75 = &v73;
    sub_1CC5FA668(v70 + 16, &v75);
  }
  return 1;
}

unint64_t sub_1CB896FB8(unsigned __int8 *a1)
{
  if (*a1) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200(a1);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
  }
  return (unint64_t)(ExtendedSizeInBits + 7) >> 3;
}

uint64_t sub_1CB896FF0(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, uint64_t a7)
{
  sub_1CD3D5F48(a1, a2, a3);
  sub_1CD3D5F48(a1, a2, a4);
  sub_1CD3D5F48(a1, a2, a5);
  sub_1CD3D5F48(a1, a2, a6);
  uint64_t v13 = *(unsigned int *)(a7 + 4);
  v26[0] = 0;
  v26[1] = 0;
  int v15 = sub_1CD7EBF14(a1, v13, (const llvm::APInt *)v26, (llvm *)5, 0, 1, 0);
  unsigned int v16 = *(_DWORD *)(a2 + 8);
  if (v16 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v17 = (uint64_t **)(*(void *)a2 + 16 * v16);
  uint64_t *v17 = v15;
  v17[1] = v14;
  ++*(_DWORD *)(a2 + 8);
  if (v26[0])
  {
    int v18 = *(unsigned __int8 *)v26[0];
    if ((v18 - 4) <= 0x1E)
    {
      if ((*(unsigned char *)(v26[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v26[0] + 12)) {
        goto LABEL_6;
      }
      uint64_t v25 = *(void *)(v26[0] + 16);
      if ((v25 & 4) == 0) {
        goto LABEL_6;
      }
      unint64_t v24 = v25 & 0xFFFFFFFFFFFFFFF8;
      if (!v24) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
    if ((v18 - 3) >= 0xFFFFFFFE) {
      uint64_t v23 = v26[0];
    }
    else {
      uint64_t v23 = 0;
    }
    if ((v18 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v24 = v23 + 8;
LABEL_13:
      uint64_t v27 = v26;
      sub_1CC5FA668(v24 + 16, &v27);
      goto LABEL_6;
    }
    if (v18 == 3) {
      *(void *)(v26[0] + 8) = 0;
    }
  }
LABEL_6:
  uint64_t result = sub_1CD7EEB94(a1, *(_DWORD *)a7, (llvm *)5, 0);
  unsigned int v21 = *(_DWORD *)(a2 + 8);
  if (v21 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v22 = (uint64_t *)(*(void *)a2 + 16 * v21);
  uint64_t *v22 = result;
  v22[1] = v20;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void sub_1CB8971BC(llvm::Pass *a1)
{
  sub_1CD807DD8(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB8971F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  uint64_t v716 = *MEMORY[0x1E4F143B8];
  unsigned int v9 = *(void **)(a1 + 296);
  int v10 = v9 + 26;
  BOOL v11 = (void *)v9[27];
  if (v11 != v9 + 26)
  {
    int v679 = *(unsigned __int8 *)(*(void *)(v8 + 480) + 281);
    v650 = &unk_1CD91C000;
    uint64_t v681 = v8;
    v680 = v9 + 26;
    while (1)
    {
      if (v11) {
        uint64_t v12 = (uint64_t)(v11 - 1);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = *(unsigned __int8 **)(v12 + 64);
      v698 = v13;
      if (v13) {
        llvm::MetadataTracking::track((uint64_t)&v698, v13, 2);
      }
      int v699 = *(_DWORD *)(v12 + 60);
      int v14 = *(unsigned __int16 *)(v12 + 24);
      if (v14 == 65517)
      {
        int v15 = v11;
        __src[0] = &v707;
        __src[1] = (void *)0x1000000000;
        LOWORD(v16) = *(_WORD *)(v12 + 56);
        if ((_WORD)v16)
        {
          uint64_t v17 = 0;
          unsigned int v18 = 0;
          unint64_t v19 = 0;
          do
          {
            if (v18 >= HIDWORD(__src[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)__src[0] + v18) = *(_OWORD *)(*(void *)(v12 + 32) + v17);
            unsigned int v18 = ++LODWORD(__src[1]);
            ++v19;
            unsigned int v16 = (char *)*(unsigned __int16 *)(v12 + 56);
            v17 += 40;
          }
          while (v19 < (unint64_t)v16);
          if (v16 == 4) {
            goto LABEL_68;
          }
        }
        char v20 = 0;
        unsigned int v21 = 1;
        while (2)
        {
          while (2)
          {
            uint64_t v22 = *(void *)(v12 + 32);
            uint64_t v23 = *(void *)(*(void *)(v22 + 40 * (v21 + 1)) + 80);
            unint64_t v24 = (void *)(v23 + 24);
            if (*(_DWORD *)(v23 + 32) >= 0x41u) {
              unint64_t v24 = (void *)*v24;
            }
            uint64_t v25 = *(void *)(*(void *)(v22 + 40 * (v21 + 3)) + 80);
            uint64_t v26 = (void *)(v25 + 24);
            if (*(_DWORD *)(v25 + 32) >= 0x41u) {
              uint64_t v26 = (void *)*v26;
            }
            unsigned int v27 = *(_DWORD *)v24 - 1;
            unsigned int v28 = *(_DWORD *)v26 - 1;
            BOOL v29 = v27 > 0xF || v28 > 0xF;
            BOOL v30 = !v29 && v28 - v27 == 1;
            if (!v30 || (v27 & 1) != 0) {
              goto LABEL_47;
            }
            uint64_t v32 = (uint64_t *)(v22 + 40 * v21);
            uint64_t v33 = *v32;
            uint64_t v34 = v32[1];
            uint64_t v35 = v21 + 2;
            int v36 = (uint64_t *)(v22 + 40 * v35);
            uint64_t v37 = *v36;
            uint64_t v38 = v36[1];
            v696 = v698;
            if (v698) {
              llvm::MetadataTracking::track((uint64_t)&v696, v698, 2);
            }
            int v697 = v699;
            uint64_t v39 = sub_1CB8B1EC8(v681, v33, v34, v37, v38, (const llvm::APInt *)&v696, (llvm *)0x26, 0);
            if (v696)
            {
              int v40 = *v696;
              if ((v40 - 4) > 0x1E)
              {
                if ((v40 - 3) >= 0xFFFFFFFE) {
                  uint64_t v41 = v696;
                }
                else {
                  uint64_t v41 = 0;
                }
                if ((v40 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v42 = (unint64_t)(v41 + 8);
                  goto LABEL_54;
                }
                if (v40 == 3) {
                  *((void *)v696 + 1) = 0;
                }
              }
              else if ((v696[1] & 0x7F) == 2 || *((_DWORD *)v696 + 3))
              {
                uint64_t v59 = *((void *)v696 + 2);
                if ((v59 & 4) != 0)
                {
                  unint64_t v42 = v59 & 0xFFFFFFFFFFFFFFF8;
                  if (v42)
                  {
LABEL_54:
                    *(void *)&long long v713 = &v696;
                    sub_1CC5FA668(v42 + 16, &v713);
                  }
                }
              }
            }
            if (v39)
            {
              unsigned __int16 v43 = sub_1CD7EBF14(*(void *)(v681 + 296), 0, (const llvm::APInt *)&v698, (llvm *)5, 0, 0, 0);
              uint64_t v45 = v44;
              uint64_t v47 = sub_1CD7EBF14(*(void *)(v681 + 296), 1, (const llvm::APInt *)&v698, (llvm *)5, 0, 0, 0);
              uint64_t v48 = *(void *)(v681 + 296);
              uint64_t v49 = *(void *)(v48 + 832);
              uint64_t v669 = v50;
              if (v49) {
                LOWORD(v49) = *(_WORD *)(v49 + 8);
              }
              unsigned int v51 = sub_1CCFDED5C(v48, 437, (const llvm::APInt *)&v698, (llvm *)4, 0, (uint64_t)v39, 0, v46, (uint64_t)v43, v45, v49);
              int v53 = (char *)__src[0] + 16 * v21;
              *(void *)int v53 = v51;
              *((_DWORD *)v53 + 2) = v54;
              uint64_t v55 = *(void *)(v681 + 296);
              uint64_t v56 = *(void *)(v55 + 832);
              if (v56) {
                LOWORD(v56) = *(_WORD *)(v56 + 8);
              }
              int v57 = sub_1CCFDED5C(v55, 437, (const llvm::APInt *)&v698, (llvm *)4, 0, (uint64_t)v39, 0, v52, (uint64_t)v47, v669, v56);
              unsigned int v16 = (char *)__src[0] + 16 * v35;
              *(void *)unsigned int v16 = v57;
              *((_DWORD *)v16 + 2) = v58;
              v21 += 4;
              LODWORD(v16) = *(unsigned __int16 *)(v12 + 56);
              char v20 = 1;
              if (v21 > (int)v16 - 4) {
                goto LABEL_67;
              }
              continue;
            }
            break;
          }
          LOWORD(v16) = *(_WORD *)(v12 + 56);
LABEL_47:
          v21 += 4;
          if (v21 > (unsigned __int16)v16 - 4)
          {
            if ((v20 & 1) == 0) {
              goto LABEL_68;
            }
LABEL_67:
            sub_1CD800398(*(void *)(v681 + 296), v12, (uint64_t *)__src[0], LODWORD(__src[1]));
LABEL_68:
            if (__src[0] != &v707) {
              free(__src[0]);
            }
            uint64_t v8 = v681;
            BOOL v11 = v15;
            int v10 = v680;
            goto LABEL_71;
          }
          continue;
        }
      }
      if (!sub_1CB8B2278(*(unsigned __int16 *)(v12 + 24))
        || (*(_WORD *)(**(void **)(v8 + 296) + 1020) & 1) == 0
        || **(unsigned char **)(v12 + 40) != 9)
      {
        goto LABEL_165;
      }
      if (v14 == 98)
      {
        for (uint64_t i = *(void *)(v12 + 48); i; uint64_t i = *(void *)(i + 32))
        {
          if (*(_WORD *)(*(void *)(i + 16) + 24) == 141) {
            goto LABEL_165;
          }
        }
      }
      else if (v14 == 141 && *(_WORD *)(*(void *)(*(void *)(v12 + 32) + 80) + 24) == 98)
      {
        goto LABEL_165;
      }
      v677 = v11;
      unsigned __int8 v705 = 0;
      __int16 v704 = 0;
      LODWORD(v64) = *(unsigned __int16 *)(v12 + 56);
      if (!*(_WORD *)(v12 + 56))
      {
        int v98 = 0;
        int v97 = 0;
LABEL_162:
        if (v97 || v98) {
          goto LABEL_457;
        }
        goto LABEL_164;
      }
      unint64_t v65 = 0;
      do
      {
        uint64_t v66 = (_DWORD *)(*(void *)(v12 + 32) + 40 * v65);
        uint64_t v67 = *(void *)v66;
        int v68 = *(unsigned __int16 *)(*(void *)v66 + 24);
        if (v68 == 46)
        {
          uint64_t v69 = *(void *)(v67 + 32);
          uint64_t v70 = *(void *)(*(void *)v69 + 80);
          uint64_t v71 = (void *)(v70 + 24);
          if (*(_DWORD *)(v70 + 32) >= 0x41u) {
            uint64_t v71 = (void *)*v71;
          }
          if (*v71 == 1830)
          {
            uint64_t v72 = *(void *)(v69 + 40);
            uint64_t v73 = *(void *)(v72 + 48);
            if (!v73) {
              goto LABEL_164;
            }
            int v74 = *(_DWORD *)(v69 + 48);
            int v75 = 1;
            do
            {
              if (*(_DWORD *)(v73 + 8) == v74)
              {
                if (!v75) {
                  goto LABEL_164;
                }
                --v75;
              }
              uint64_t v73 = *(void *)(v73 + 32);
            }
            while (v73);
            if (v75) {
              goto LABEL_164;
            }
            int v76 = *(unsigned __int16 *)(v72 + 24);
            BOOL v77 = (v76 - 96) > 0x2D || ((1 << (v76 - 96)) & 0x200000000005) == 0;
            if (v77 && v76 != 443) {
              goto LABEL_164;
            }
            goto LABEL_158;
          }
          int v68 = 46;
          goto LABEL_118;
        }
        int v78 = v66[2];
        if (v68 == 222)
        {
          uint64_t v79 = *(void *)(v67 + 48);
          if (!v79) {
            goto LABEL_158;
          }
          int v80 = 1;
          do
          {
            if (*(_DWORD *)(v79 + 8) == v78)
            {
              if (!v80) {
                goto LABEL_158;
              }
              --v80;
            }
            uint64_t v79 = *(void *)(v79 + 32);
          }
          while (v79);
          if (v80) {
            goto LABEL_158;
          }
          uint64_t v66 = *(_DWORD **)(v67 + 32);
          uint64_t v67 = *(void *)v66;
          int v68 = *(unsigned __int16 *)(*(void *)v66 + 24);
LABEL_118:
          int v78 = v66[2];
        }
        if (v68 == 223)
        {
          uint64_t v81 = *(void *)(v67 + 48);
          if (!v81) {
            goto LABEL_158;
          }
          int v82 = 1;
          do
          {
            if (*(_DWORD *)(v81 + 8) == v78)
            {
              if (!v82) {
                goto LABEL_158;
              }
              --v82;
            }
            uint64_t v81 = *(void *)(v81 + 32);
          }
          while (v81);
          if (v82) {
            goto LABEL_158;
          }
          uint64_t v83 = *(void *)(v67 + 32);
          uint64_t v67 = *(void *)v83;
          int v78 = *(_DWORD *)(v83 + 8);
          int v68 = *(unsigned __int16 *)(v67 + 24);
        }
        if (v68 != 212) {
          goto LABEL_158;
        }
        uint64_t v84 = *(void *)(v67 + 48);
        if (!v84) {
          goto LABEL_136;
        }
        int v85 = 1;
        do
        {
          if (*(_DWORD *)(v84 + 8) == v78)
          {
            if (!v85) {
              goto LABEL_136;
            }
            --v85;
          }
          uint64_t v84 = *(void *)(v84 + 32);
        }
        while (v84);
        if (v85)
        {
LABEL_136:
          __src[0] = &v709;
          __src[1] = &v709;
          uint64_t v707 = 8;
          unsigned int v708 = 0;
          int v86 = sub_1CB8B5768(v67, (uint64_t)__src);
          if (__src[1] != __src[0]) {
            free(__src[1]);
          }
          if (!v86) {
            goto LABEL_158;
          }
        }
        uint64_t v87 = *(uint64_t **)(v67 + 32);
        uint64_t v88 = *v87;
        int v89 = *(unsigned __int16 *)(*v87 + 24);
        if (v89 != 395)
        {
          uint64_t v90 = v87[1];
          if (v89 != 47) {
            goto LABEL_144;
          }
          uint64_t v91 = *(void *)(v87[5] + 80);
          v92 = (void *)(v91 + 24);
          if (*(_DWORD *)(v91 + 32) >= 0x41u) {
            v92 = (void *)*v92;
          }
          if ((*(_DWORD *)v92 - 2022) >= 0x40)
          {
LABEL_144:
            uint64_t v93 = *(void *)(v88 + 48);
            if (!v93) {
              goto LABEL_151;
            }
            int v94 = 1;
            do
            {
              if (*(_DWORD *)(v93 + 8) == v90)
              {
                if (!v94) {
                  goto LABEL_151;
                }
                --v94;
              }
              uint64_t v93 = *(void *)(v93 + 32);
            }
            while (v93);
            if (v94) {
LABEL_151:
            }
              *((unsigned char *)&v704 + v65) = 1;
            if ((sub_1CB8B595C(v88) & 1) == 0)
            {
              if (v89 != 46) {
                goto LABEL_157;
              }
              uint64_t v95 = *(void *)(**(void **)(v88 + 32) + 80);
              v96 = (void *)(v95 + 24);
              if (*(_DWORD *)(v95 + 32) >= 0x41u) {
                v96 = (void *)*v96;
              }
              if (*v96 != 1830) {
LABEL_157:
              }
                *((unsigned char *)&v704 + v65) = 1;
            }
          }
        }
LABEL_158:
        ++v65;
        uint64_t v64 = (uint64_t **)*(unsigned __int16 *)(v12 + 56);
      }
      while (v65 < (unint64_t)v64);
      int v97 = HIBYTE(v704);
      int v98 = v705;
      if (!(_BYTE)v704) {
        goto LABEL_162;
      }
LABEL_457:
      v368 = *(unsigned __int8 **)(v12 + 64);
      v702 = v368;
      if (v368)
      {
        llvm::MetadataTracking::track((uint64_t)&v702, v368, 2);
        LODWORD(v64) = *(unsigned __int16 *)(v12 + 56);
      }
      int v703 = *(_DWORD *)(v12 + 60);
      v369 = &v707;
      __src[0] = &v707;
      __src[1] = (void *)0x300000000;
      if (v64)
      {
        uint64_t v370 = 0;
        unint64_t v371 = 0;
        do
        {
          v373 = sub_1CB8B59FC(*(void *)(*(void *)(v12 + 32) + v370), *(void *)(*(void *)(v12 + 32) + v370 + 8), *(llvm::APFloatBase **)(v8 + 296), *((unsigned __int8 *)&v704 + v371), 0, 0);
          if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v64 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
          *uint64_t v64 = v373;
          v64[1] = v372;
          LODWORD(v64) = ++LODWORD(__src[1]);
          ++v371;
          v370 += 40;
        }
        while (v371 < *(unsigned __int16 *)(v12 + 56));
        v369 = (uint64_t *)__src[0];
      }
      v461 = *(void **)(v8 + 296);
      uint64_t v462 = v461[104];
      if (v462) {
        uint64_t v463 = *(unsigned __int16 *)(v462 + 8);
      }
      else {
        uint64_t v463 = 0;
      }
      v464 = sub_1CD7FF4E8(v461, (const char *)*(unsigned __int16 *)(v12 + 24), (const llvm::APInt *)&v702, (llvm *)0xA, 0, v369, v64, v463);
      uint64_t v466 = v465;
      uint64_t v467 = *(void *)(v12 + 48);
      if (!v467) {
        goto LABEL_601;
      }
      int v468 = 1;
      uint64_t v469 = *(void *)(v12 + 48);
      do
      {
        if (!*(_DWORD *)(v469 + 8))
        {
          if (!v468) {
            goto LABEL_580;
          }
          --v468;
        }
        uint64_t v469 = *(void *)(v469 + 32);
      }
      while (v469);
      if (!v468)
      {
        uint64_t v470 = *(void *)(v467 + 16);
        if (*(_WORD *)(v470 + 24) == 215)
        {
          uint64_t v471 = *(void *)(v8 + 296);
          v472 = v464;
          int v473 = v466;
          goto LABEL_547;
        }
      }
LABEL_580:
      int v483 = 1;
      uint64_t v484 = *(void *)(v12 + 48);
      do
      {
        if (!*(_DWORD *)(v484 + 8))
        {
          if (!v483) {
            goto LABEL_601;
          }
          --v483;
        }
        uint64_t v484 = *(void *)(v484 + 32);
      }
      while (v484);
      if (v483) {
        goto LABEL_601;
      }
      uint64_t v485 = *(void *)(v467 + 16);
      if (*(_WORD *)(v485 + 24) != 46) {
        goto LABEL_601;
      }
      uint64_t v486 = *(void *)(**(void **)(v485 + 32) + 80);
      v487 = (void *)(v486 + 24);
      if (*(_DWORD *)(v486 + 32) >= 0x41u) {
        v487 = (void *)*v487;
      }
      if (*v487 == 1830)
      {
        v700 = v702;
        if (v702) {
          llvm::MetadataTracking::track((uint64_t)&v700, v702, 2);
        }
        int v701 = v703;
        v488 = *(void **)(v8 + 296);
        v489 = sub_1CD7EBF14((uint64_t)v488, 1830, (const llvm::APInt *)&v700, (llvm *)5, 0, 1, 0);
        uint64_t v490 = 0;
        *(void *)&long long v713 = v489;
        *((void *)&v713 + 1) = v491;
        v714 = v464;
        unsigned int v715 = v466;
        uint64_t v492 = v488[104];
        if (v492) {
          uint64_t v490 = *(unsigned __int16 *)(v492 + 8);
        }
        v493 = sub_1CD7FF4E8(v488, (const char *)0x2E, (const llvm::APInt *)&v700, (llvm *)0xA, 0, (uint64_t *)&v713, 2, v490);
        unsigned int v495 = v494;
        if (v700)
        {
          int v496 = *v700;
          if ((v496 - 4) > 0x1E)
          {
            if ((v496 - 3) >= 0xFFFFFFFE) {
              v626 = v700;
            }
            else {
              v626 = 0;
            }
            if ((v496 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v627 = (unint64_t)(v626 + 8);
              goto LABEL_687;
            }
            if (v496 == 3) {
              *((void *)v700 + 1) = 0;
            }
          }
          else if ((v700[1] & 0x7F) == 2 || *((_DWORD *)v700 + 3))
          {
            uint64_t v632 = *((void *)v700 + 2);
            if ((v632 & 4) != 0)
            {
              unint64_t v627 = v632 & 0xFFFFFFFFFFFFFFF8;
              if (v627)
              {
LABEL_687:
                *(void *)&long long v713 = &v700;
                sub_1CC5FA668(v627 + 16, &v713);
              }
            }
          }
        }
        uint64_t v497 = *(void *)(v8 + 296);
        v498 = sub_1CD7EBF14(v497, 0, (const llvm::APInt *)&v702, (llvm *)5, 0, 0, 0);
        uint64_t v501 = *(void *)(v497 + 832);
        if (v501) {
          LOWORD(v501) = *(_WORD *)(v501 + 8);
        }
        v472 = sub_1CCFDED5C(v497, 212, (const llvm::APInt *)&v702, (llvm *)9, 0, (uint64_t)v493, v466 & 0xFFFFFFFF00000000 | v495, v500, (uint64_t)v498, v499, v501);
        int v473 = v502;
        uint64_t v471 = *(void *)(v8 + 296);
        uint64_t v470 = *(void *)(*(void *)(v12 + 48) + 16);
      }
      else
      {
LABEL_601:
        uint64_t v503 = *(void *)(v8 + 296);
        v504 = sub_1CD7EBF14(v503, 0, (const llvm::APInt *)&v702, (llvm *)5, 0, 0, 0);
        uint64_t v507 = *(void *)(v503 + 832);
        if (v507) {
          LOWORD(v507) = *(_WORD *)(v507 + 8);
        }
        v472 = sub_1CCFDED5C(v503, 212, (const llvm::APInt *)&v702, (llvm *)9, 0, (uint64_t)v464, v466, v506, (uint64_t)v504, v505, v507);
        int v473 = v508;
        uint64_t v471 = *(void *)(v8 + 296);
        uint64_t v470 = v12;
      }
LABEL_547:
      sub_1CD801F28(v471, v470, 0, (uint64_t)v472, v473);
      if (__src[0] != &v707) {
        free(__src[0]);
      }
      if (v702)
      {
        int v474 = *v702;
        if ((v474 - 4) > 0x1E)
        {
          if ((v474 - 3) >= 0xFFFFFFFE) {
            v477 = v702;
          }
          else {
            v477 = 0;
          }
          if ((v474 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v476 = (unint64_t)(v477 + 8);
            goto LABEL_561;
          }
          if (v474 == 3) {
            *((void *)v702 + 1) = 0;
          }
        }
        else if ((v702[1] & 0x7F) == 2 || *((_DWORD *)v702 + 3))
        {
          uint64_t v475 = *((void *)v702 + 2);
          if ((v475 & 4) != 0)
          {
            unint64_t v476 = v475 & 0xFFFFFFFFFFFFFFF8;
            if (v476)
            {
LABEL_561:
              __src[0] = &v702;
              sub_1CC5FA668(v476 + 16, __src);
            }
          }
        }
      }
LABEL_164:
      BOOL v11 = v677;
LABEL_165:
      if (v14 > 171)
      {
        switch(v14)
        {
          case 172:
            for (uint64_t j = 0; j != 8; j += 4)
            {
              v346 = &__src[j];
              *((_DWORD *)v346 + 2) = 1;
              *v346 = 0;
              *((_DWORD *)v346 + 6) = 1;
              v346[2] = 0;
            }
            sub_1CD7F121C(*(void *)(v8 + 296), **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), 0, (uint64_t)&v713);
            if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
              MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
            }
            __src[0] = (void *)v713;
            LODWORD(__src[1]) = DWORD2(v713);
            DWORD2(v713) = 0;
            if (v708 >= 0x41 && v707)
            {
              MEMORY[0x1D25D9CB0](v707, 0x1000C8000313F17);
              uint64_t v707 = (uint64_t)v714;
              unsigned int v708 = v715;
              unsigned int v715 = 0;
              if (DWORD2(v713) >= 0x41 && (void)v713) {
                MEMORY[0x1D25D9CB0](v713, 0x1000C8000313F17);
              }
            }
            else
            {
              uint64_t v707 = (uint64_t)v714;
              unsigned int v708 = v715;
            }
            sub_1CD7F121C(*(void *)(v8 + 296), *(void *)(*(void *)(v12 + 32) + 40), *(void *)(*(void *)(v12 + 32) + 48), 0, (uint64_t)&v713);
            if (v710 >= 0x41 && v709) {
              MEMORY[0x1D25D9CB0](v709, 0x1000C8000313F17);
            }
            v709 = (void *)v713;
            unsigned int v710 = DWORD2(v713);
            DWORD2(v713) = 0;
            if (v712[0] >= 0x41u && v711)
            {
              MEMORY[0x1D25D9CB0](v711, 0x1000C8000313F17);
              v711 = v714;
              v712[0] = v715;
              unsigned int v715 = 0;
              if (DWORD2(v713) >= 0x41 && (void)v713) {
                MEMORY[0x1D25D9CB0](v713, 0x1000C8000313F17);
              }
            }
            else
            {
              v711 = v714;
              v712[0] = v715;
            }
            int v695 = (int)__src[1];
            if (LODWORD(__src[1]) > 0x40) {
              operator new[]();
            }
            if (LODWORD(__src[1])) {
              unint64_t v347 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
            }
            else {
              unint64_t v347 = 0;
            }
            uint64_t v348 = v347 & ~(uint64_t)__src[0];
            uint64_t v694 = v348;
            int v695 = 0;
            unsigned int v693 = v710;
            if (v710 > 0x40) {
              operator new[]();
            }
            if (v710) {
              unint64_t v362 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v710;
            }
            else {
              unint64_t v362 = 0;
            }
            unint64_t v692 = v362 & ~(unint64_t)v709;
            unsigned int v693 = 0;
            if ((v362 & ~(unint64_t)v709 & v348) != 0)
            {
              v363 = v11;
            }
            else
            {
              unsigned int v509 = v650 & 0xFFFFF000 | 3;
              if ((((unint64_t)__src[0] >> (LOBYTE(__src[1]) - 1)) & 1) != 0
                && (((unint64_t)v709 >> (v710 - 1)) & 1) != 0)
              {
                unsigned int v509 = v650 & 0xFFFFF000 | 7;
              }
              v363 = v11;
              LODWORD(v650) = v509;
              v510 = sub_1CCFDED5C(*(void *)(v8 + 296), 56, (const llvm::APInt *)&v698, **(llvm ***)(v12 + 40), *(void *)(*(void *)(v12 + 40) + 8), **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), a8, *(void *)(*(void *)(v12 + 32) + 40), *(void *)(*(void *)(v12 + 32) + 48), v509);
              sub_1CD800DA0(*(void *)(v8 + 296), v12, 0, (uint64_t)v510, v511);
              sub_1CD808A6C((uint64_t)v510);
            }
            if (**(unsigned char **)(v12 + 40) == 6)
            {
              v512 = *(uint64_t **)(v12 + 32);
              uint64_t v514 = *v512;
              uint64_t v513 = v512[1];
              uint64_t v658 = v512[6];
              uint64_t v663 = v512[5];
              v515 = sub_1CD7EBF14(*(void *)(v8 + 296), 0, (const llvm::APInt *)&v698, (llvm *)5, 0, 0, 0);
              uint64_t v517 = v516;
              v676 = sub_1CD7EBF14(*(void *)(v8 + 296), 1, (const llvm::APInt *)&v698, (llvm *)5, 0, 0, 0);
              uint64_t v668 = v519;
              __int16 v520 = 0;
              uint64_t v521 = *(void *)(v8 + 296);
              uint64_t v522 = *(void *)(v521 + 832);
              if (v522) {
                __int16 v520 = *(_WORD *)(v522 + 8);
              }
              v524 = sub_1CCFDED5C(v521, 437, (const llvm::APInt *)&v698, (llvm *)5, 0, v514, v513, v518, (uint64_t)v515, v517, v520);
              uint64_t v526 = v525;
              __int16 v527 = 0;
              uint64_t v528 = *(void *)(v681 + 296);
              uint64_t v529 = *(void *)(v528 + 832);
              if (v529) {
                __int16 v527 = *(_WORD *)(v529 + 8);
              }
              v653 = sub_1CCFDED5C(v528, 437, (const llvm::APInt *)&v698, (llvm *)5, 0, v514, v513, v523, (uint64_t)v676, v668, v527);
              uint64_t v649 = v531;
              __int16 v532 = 0;
              uint64_t v533 = *(void *)(v681 + 296);
              uint64_t v534 = *(void *)(v533 + 832);
              if (v534) {
                __int16 v532 = *(_WORD *)(v534 + 8);
              }
              v648 = sub_1CCFDED5C(v533, 437, (const llvm::APInt *)&v698, (llvm *)5, 0, v663, v658, v530, (uint64_t)v515, v517, v532);
              uint64_t v537 = v536;
              __int16 v538 = 0;
              uint64_t v539 = *(void *)(v681 + 296);
              uint64_t v540 = *(void *)(v539 + 832);
              if (v540) {
                __int16 v538 = *(_WORD *)(v540 + 8);
              }
              v542 = sub_1CCFDED5C(v539, 437, (const llvm::APInt *)&v698, (llvm *)5, 0, v663, v658, v535, (uint64_t)v676, v668, v538);
              uint64_t v544 = v543;
              __int16 v545 = 0;
              uint64_t v546 = *(void *)(v681 + 296);
              uint64_t v547 = v524[5] + 16 * v526;
              v548 = *(llvm **)v547;
              uint64_t v549 = *(void *)(v547 + 8);
              uint64_t v550 = *(void *)(v546 + 832);
              if (v550) {
                __int16 v545 = *(_WORD *)(v550 + 8);
              }
              uint64_t v551 = v526;
              v553 = sub_1CCFDED5C(v546, 172, (const llvm::APInt *)&v698, v548, v549, (uint64_t)v524, v526, v541, (uint64_t)v648, v537, v545);
              uint64_t v555 = v554;
              uint64_t v556 = *(void *)(v681 + 296);
              uint64_t v557 = v524[5] + 16 * v551;
              v558 = *(llvm **)v557;
              uint64_t v559 = *(void *)(v557 + 8);
              uint64_t v560 = *(void *)(v556 + 832);
              if (v560) {
                LOWORD(v560) = *(_WORD *)(v560 + 8);
              }
              v561 = sub_1CCFDED5C(v556, 172, (const llvm::APInt *)&v698, v558, v559, (uint64_t)v653, v649, v552, (uint64_t)v542, v544, v560);
              uint64_t v8 = v681;
              uint64_t v564 = *(void *)(v681 + 296);
              uint64_t v565 = *(void *)(v564 + 832);
              if (v565) {
                LOWORD(v565) = *(_WORD *)(v565 + 8);
              }
              v567 = sub_1CCFDED5C(v564, 146, (const llvm::APInt *)&v698, (llvm *)0x31, 0, (uint64_t)v553, v555, v563, (uint64_t)v561, v562, v565);
              __int16 v568 = 0;
              v569 = *(llvm::APFloatBase **)(v681 + 296);
              uint64_t v570 = *((void *)v569 + 104);
              if (v570) {
                __int16 v568 = *(_WORD *)(v570 + 8);
              }
              v571 = sub_1CD7F3564(v569, (const char *)0xD8, (uint64_t)&v698, (llvm *)6, 0, (uint64_t)v567, v566, v568);
              sub_1CD800DA0(*(void *)(v681 + 296), v12, 0, (uint64_t)v571, v572);
              sub_1CD808A6C((uint64_t)v571);
            }
            for (unint64_t k = 0; k != 0x3FFFFFFFFFFFFFF0; k -= 8)
            {
              v365 = &__src[k / 2];
              if (v712[k] >= 0x41u)
              {
                v366 = v365[6];
                if (v366) {
                  MEMORY[0x1D25D9CB0](v366, 0x1000C8000313F17);
                }
              }
              if (*((_DWORD *)v365 + 10) >= 0x41u)
              {
                v367 = v365[4];
                if (v367) {
                  MEMORY[0x1D25D9CB0](v367, 0x1000C8000313F17);
                }
              }
            }
            BOOL v11 = v363;
            goto LABEL_71;
          case 173:
            long long v205 = *(_OWORD *)*(void *)(v12 + 40);
            *(_OWORD *)__src = v205;
            if (*(_WORD *)(v12 + 24) != 173) {
              goto LABEL_71;
            }
            v206 = *(uint64_t **)(v12 + 32);
            uint64_t v207 = *v206;
            if (*(_WORD *)(*v206 + 24) != 56) {
              goto LABEL_71;
            }
            uint64_t v208 = v206[5];
            uint64_t v209 = *(void *)(v207 + 32);
            if (*(void *)(v209 + 40) != v208) {
              goto LABEL_71;
            }
            if (*(_DWORD *)(v209 + 48) != *((_DWORD *)v206 + 12)) {
              goto LABEL_71;
            }
            if (*(_WORD *)(v208 + 24) != 176) {
              goto LABEL_71;
            }
            uint64_t v210 = *(void *)(v208 + 32);
            if (*(void *)v210 != *(void *)v209 || *(_DWORD *)(v210 + 8) != *(_DWORD *)(v209 + 8)) {
              goto LABEL_71;
            }
            uint64_t v211 = *(void *)(v210 + 40);
            int v212 = *(unsigned __int16 *)(v211 + 24);
            if (v212 != 35 && v212 != 11) {
              goto LABEL_71;
            }
            v214 = v11;
            uint64_t v215 = *(void *)(v211 + 80);
            if ((_BYTE)v205) {
              uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)__src);
            }
            else {
              uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
            }
            uint64_t v589 = ExtendedSizeInBits;
            if (v217 == 1) {
            v590 = (void *)(v215 + 24);
            }
            uint64_t v591 = *(unsigned int *)(v215 + 32);
            if (v591 >= 0x41)
            {
              int v592 = 0;
              int64_t v593 = (unint64_t)(v591 + 63) >> 6;
              BOOL v11 = v214;
              do
              {
                BOOL v29 = v593-- < 1;
                if (v29) {
                  break;
                }
                unint64_t v594 = *(void *)(*v590 + 8 * v593);
                v592 += __clz(v594);
              }
              while (!v594);
              int v595 = v591 | 0xFFFFFFC0;
              if ((v591 & 0x3F) == 0) {
                int v595 = 0;
              }
              if ((v591 - v592 - v595) > 0x40) {
                goto LABEL_71;
              }
              v590 = (void *)*v590;
            }
            else
            {
              BOOL v11 = v214;
            }
            if (*v590 == v589 - 1)
            {
              v598 = sub_1CD7EBF14(*(void *)(v8 + 296), 0, (const llvm::APInt *)&v698, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
              int v599 = v596;
              __int16 v600 = 0;
              uint64_t v601 = *(void *)(v8 + 296);
              uint64_t v602 = *(void *)(v601 + 832);
              if (v602) {
                __int16 v600 = *(_WORD *)(v602 + 8);
              }
              v603 = sub_1CCFDED5C(v601, 57, (const llvm::APInt *)&v698, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v598, v596, v597, **(void **)(v207 + 32), *(void *)(*(void *)(v207 + 32) + 8), v600);
              v161 = sub_1CD3D6058(*(void **)(v8 + 296), (const llvm::APInt *)&v698, **(void **)(v207 + 32), *(void *)(*(void *)(v207 + 32) + 8), (uint64_t)v598, v599, (uint64_t)v603, v604, **(void **)(v207 + 32), *(void *)(*(void *)(v207 + 32) + 8), HIDWORD(*(void *)(*(void *)(v207 + 32) + 8)), 0x14u);
              goto LABEL_437;
            }
            goto LABEL_71;
          case 174:
          case 176:
            goto LABEL_71;
          case 175:
          case 177:
            v100 = *(uint64_t **)(v12 + 32);
            uint64_t v99 = *(void *)(v12 + 40);
            v101 = *(llvm **)v99;
            v102 = *(void **)(v99 + 8);
            __src[0] = *(void **)v99;
            __src[1] = v102;
            uint64_t v103 = v100[5];
            int v104 = *(unsigned __int16 *)(v103 + 24);
            if (v104 != 35 && v104 != 11 || v101 == 6) {
              goto LABEL_175;
            }
            uint64_t v240 = *v100;
            uint64_t v241 = v100[6];
            int v242 = *(unsigned __int16 *)(*v100 + 24);
            if (v14 != 177) {
              goto LABEL_308;
            }
            if ((v242 - 171) > 2) {
              goto LABEL_308;
            }
            uint64_t v243 = *(void *)(v240 + 48);
            if (!v243) {
              goto LABEL_308;
            }
            int v244 = *((_DWORD *)v100 + 2);
            int v245 = 1;
            break;
          default:
            if (v14 == 192)
            {
              uint64_t v227 = *(void *)(v12 + 32);
              *(_OWORD *)__src = *(_OWORD *)v227;
              long long v713 = *(_OWORD *)(v227 + 40);
              LODWORD(v702) = *(_DWORD *)(*(void *)(v227 + 160) + 76);
              if (sub_1CB8B22D8(v8, __src, &v713, (int *)&v702))
              {
                v228 = *(void **)(v8 + 296);
                v671 = __src[0];
                uint64_t v661 = v713;
                int v664 = (int)__src[1];
                int v656 = DWORD2(v713);
                v229 = *(void **)(v12 + 32);
                uint64_t v230 = v229[10];
                uint64_t v231 = v229[11];
                v232 = v11;
                uint64_t v233 = v229[15];
                uint64_t v234 = v229[16];
                uint64_t v235 = *(void *)(v230 + 40) + 16 * v231;
                v236 = *(llvm **)v235;
                uint64_t v237 = *(void *)(v235 + 8);
                uint64_t v647 = sub_1CD7EE368(v228, v702);
                uint64_t v645 = v233;
                int v646 = v234;
                uint64_t v8 = v681;
                BOOL v11 = v232;
                int v10 = v680;
                v161 = sub_1CD7F6564(v228, (const char *)0xC0, (const llvm::APInt *)&v698, v236, v237, (uint64_t)v671, v664, v239, v661, v656, v230, v231, v645, v646, v647, v238);
                goto LABEL_437;
              }
            }
            else if (v14 == 260)
            {
              uint64_t v150 = *(void *)(v12 + 32);
              LODWORD(v702) = *(_DWORD *)(*(void *)(v150 + 40) + 76);
              *(_OWORD *)__src = *(_OWORD *)(v150 + 80);
              long long v713 = *(_OWORD *)(v150 + 120);
              if (sub_1CB8B22D8(v8, __src, &v713, (int *)&v702))
              {
                v151 = *(void **)(v8 + 296);
                v153 = *(uint64_t **)(v12 + 32);
                uint64_t v152 = *(void *)(v12 + 40);
                v154 = *(llvm **)v152;
                uint64_t v155 = *(void *)(v152 + 8);
                uint64_t v156 = *v153;
                uint64_t v157 = v153[1];
                uint64_t v158 = sub_1CD7EE368(v151, v702);
                v161 = sub_1CD7F6564(v151, (const char *)0x104, (const llvm::APInt *)&v698, v154, v155, v156, v157, v160, v158, v159, (uint64_t)__src[0], (int)__src[1], v713, SDWORD2(v713), *(void *)(*(void *)(v12 + 32) + 160), *(void *)(*(void *)(v12 + 32) + 168));
                goto LABEL_437;
              }
            }
            goto LABEL_71;
        }
        do
        {
          if (*(_DWORD *)(v243 + 8) == v244)
          {
            if (!v245) {
              goto LABEL_308;
            }
            --v245;
          }
          uint64_t v243 = *(void *)(v243 + 32);
        }
        while (v243);
        if (v245) {
          goto LABEL_308;
        }
        v246 = *(uint64_t **)(v240 + 32);
        uint64_t v247 = v246[5];
        int v248 = *(unsigned __int16 *)(v247 + 24);
        if (v248 != 35 && v248 != 11) {
          goto LABEL_308;
        }
        uint64_t v250 = *(void *)(v247 + 80);
        v251 = (unint64_t *)(v250 + 24);
        if (*(_DWORD *)(v250 + 32) >= 0x41u) {
          v251 = (unint64_t *)*v251;
        }
        uint64_t v252 = *(void *)(v103 + 80);
        v253 = (void *)(v252 + 24);
        if (*(_DWORD *)(v252 + 32) >= 0x41u) {
          v253 = (void *)*v253;
        }
        unint64_t v254 = *v251;
        v255 = (void *)*v253;
        uint64_t v256 = v254 >> (char)v255;
        if (v254 >> (char)v255 << (char)v255 == v254)
        {
          uint64_t v575 = *(void *)(v681 + 296);
          uint64_t v576 = *(void *)(v575 + 832);
          v678 = v11;
          if (v576) {
            LOWORD(v576) = *(_WORD *)(v576 + 8);
          }
          v577 = sub_1CCFDED5C(v575, 177, (const llvm::APInt *)&v698, v101, (uint64_t)v102, *v246, v246[1], a8, v103, v241, v576);
          uint64_t v579 = v578;
          v580 = sub_1CD7EBF14(*(void *)(v681 + 296), v256, (const llvm::APInt *)&v698, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
          uint64_t v583 = *(void *)(v681 + 296);
          uint64_t v584 = *(void *)(v583 + 832);
          if (v584) {
            __int16 v585 = *(_WORD *)(v584 + 8);
          }
          else {
            __int16 v585 = 0;
          }
          v342 = sub_1CCFDED5C(v583, *(unsigned __int16 *)(v240 + 24), (const llvm::APInt *)&v698, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v577, v579, v582, (uint64_t)v580, v581, v585);
          int v344 = v605;
          uint64_t v332 = v681;
        }
        else
        {
LABEL_308:
          if (v242 != 176) {
            goto LABEL_175;
          }
          uint64_t v257 = *(void *)(*(void *)(v240 + 32) + 40);
          int v258 = *(unsigned __int16 *)(v257 + 24);
          if (v258 != 35 && v258 != 11) {
            goto LABEL_175;
          }
          uint64_t v260 = *(void *)(v257 + 80);
          v261 = (void *)(v260 + 24);
          v262 = v11;
          if (*(_DWORD *)(v260 + 32) >= 0x41u) {
            v261 = (void *)*v261;
          }
          v263 = (void *)*v261;
          if ((_BYTE)v101) {
            uint64_t v264 = sub_1CB87E200((unsigned __int8 *)__src);
          }
          else {
            uint64_t v264 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          }
          uint64_t v320 = v264;
          if (v265 == 1) {
          BOOL v30 = v263 == (void *)(v320 - 1);
          }
          BOOL v11 = v262;
          if (!v30) {
            goto LABEL_175;
          }
          v678 = v262;
          v672 = sub_1CD7EBF14(*(void *)(v681 + 296), 0, (const llvm::APInt *)&v698, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
          int v322 = v321;
          v324 = sub_1CD7EBF14(*(void *)(v681 + 296), -1, (const llvm::APInt *)&v698, (llvm *)__src[0], (uint64_t)__src[1], 0, 0);
          __int16 v326 = 0;
          uint64_t v327 = *(void *)(v681 + 296);
          uint64_t v328 = *(void *)(v327 + 832);
          if (v328) {
            __int16 v326 = *(_WORD *)(v328 + 8);
          }
          v329 = sub_1CCFDED5C(v327, *(unsigned __int16 *)(v12 + 24), (const llvm::APInt *)&v698, (llvm *)__src[0], (uint64_t)__src[1], (uint64_t)v324, v323, v325, v103, v241, v326);
          int v331 = v330;
          uint64_t v332 = v681;
          v333 = *(void **)(v681 + 296);
          v334 = *(uint64_t **)(v240 + 32);
          uint64_t v335 = v334[1];
          uint64_t v665 = *v334;
          uint64_t v336 = v329[5] + 16 * v330;
          v337 = *(llvm **)v336;
          uint64_t v338 = *(void *)(v336 + 8);
          uint64_t v339 = sub_1CD7EE368(v333, 0x14u);
          v342 = sub_1CD7F6564(v333, (const char *)0xC0, (const llvm::APInt *)&v698, v337, v338, v665, v335, v341, (uint64_t)v672, v322, (uint64_t)v329, v331, (uint64_t)v672, v322, v339, v340);
          int v344 = v343;
        }
        sub_1CD800DA0(*(void *)(v332 + 296), v12, 0, (uint64_t)v342, v344);
        sub_1CD808A6C((uint64_t)v342);
        BOOL v11 = v678;
        int v10 = v680;
LABEL_175:
        uint64_t v8 = v681;
        goto LABEL_71;
      }
      if (v14 <= 55)
      {
        if (v14 != 46)
        {
          if (v14 != 47) {
            goto LABEL_71;
          }
          v163 = *(uint64_t **)(v12 + 32);
          uint64_t v164 = *(void *)(v163[5] + 80);
          v165 = (void *)(v164 + 24);
          if (*(_DWORD *)(v164 + 32) >= 0x41u) {
            v165 = (void *)*v165;
          }
          int v166 = *(_DWORD *)v165;
          unint64_t v167 = (1 << (*(_DWORD *)v165 + 26)) & 0xE709E709E709E709;
          if ((v166 - 2022) > 0x3F || v167 == 0) {
            goto LABEL_71;
          }
          uint64_t v169 = *(void *)(v12 + 48);
          if (v169)
          {
            while (*(_DWORD *)(v169 + 8))
            {
              uint64_t v169 = *(void *)(v169 + 32);
              if (!v169) {
                goto LABEL_231;
              }
            }
          }
          else
          {
LABEL_231:
            uint64_t v170 = *v163;
            sub_1CD800DA0(*(void *)(v8 + 296), v12, 1, *v163, v163[1]);
            sub_1CD808A6C(v170);
          }
          sub_1CB8B29C8(v8, v12, v166, 0);
          goto LABEL_71;
        }
        v218 = *(void **)(v12 + 32);
        uint64_t v219 = *(void *)(*v218 + 80);
        v220 = (void *)(v219 + 24);
        if (*(_DWORD *)(v219 + 32) >= 0x41u) {
          v220 = (void *)*v220;
        }
        if (*(_DWORD *)v220 != 1851) {
          goto LABEL_71;
        }
        uint64_t v221 = *(void *)(v12 + 48);
        uint64_t v222 = v221;
        if (v221)
        {
          while (1)
          {
            uint64_t v223 = *(void *)(v222 + 16);
            int v224 = *(unsigned __int16 *)(v223 + 24);
            BOOL v225 = (v224 - 96) > 0x2D || ((1 << (v224 - 96)) & 0x200000000005) == 0;
            if (v225 && v224 != 443 || **(unsigned char **)(v223 + 40) != 9) {
              break;
            }
            uint64_t v222 = *(void *)(v222 + 32);
            if (!v222) {
              goto LABEL_286;
            }
          }
          int v226 = 0;
        }
        else
        {
LABEL_286:
          int v226 = 1;
        }
        uint64_t v410 = *(void *)(v12 + 40);
        v411 = *(llvm **)v410;
        uint64_t v412 = *(void *)(v410 + 8);
        uint64_t v413 = v218[5];
        uint64_t v414 = v218[6];
        if (v226)
        {
          sub_1CD7ECDC4(*(void *)(v8 + 296), (uint64_t)&v698, *(void *)v410, *(void *)(v410 + 8), 1, 0.0);
          v690 = v698;
          if (v698) {
            llvm::MetadataTracking::track((uint64_t)&v690, v698, 2);
          }
          int v691 = v699;
          v415 = sub_1CB8B28D4(v411, v412, v413, v414, (const llvm::APInt *)&v690, *(void **)(v8 + 296));
          unsigned int v417 = v416;
          if (v690)
          {
            int v418 = *v690;
            if ((v418 - 4) > 0x1E)
            {
              if ((v418 - 3) >= 0xFFFFFFFE) {
                v478 = v690;
              }
              else {
                v478 = 0;
              }
              if ((v418 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v479 = (unint64_t)(v478 + 8);
                goto LABEL_567;
              }
              if (v418 == 3) {
                *((void *)v690 + 1) = 0;
              }
            }
            else if ((v690[1] & 0x7F) == 2 || *((_DWORD *)v690 + 3))
            {
              uint64_t v628 = *((void *)v690 + 2);
              if ((v628 & 4) != 0)
              {
                unint64_t v479 = v628 & 0xFFFFFFFFFFFFFFF8;
                if (v479)
                {
LABEL_567:
                  __src[0] = &v690;
                  sub_1CC5FA668(v479 + 16, __src);
                }
              }
            }
          }
          v688 = v698;
          if (v698) {
            llvm::MetadataTracking::track((uint64_t)&v688, v698, 2);
          }
          int v689 = v699;
          v419 = *(void **)(v8 + 296);
          v420 = sub_1CD7EBF14((uint64_t)v419, 1830, (const llvm::APInt *)&v688, (llvm *)5, 0, 1, 0);
          uint64_t v421 = 0;
          __src[0] = v420;
          __src[1] = v422;
          uint64_t v707 = (uint64_t)v415;
          unsigned int v708 = v417;
          uint64_t v423 = v419[104];
          if (v423) {
            uint64_t v421 = *(unsigned __int16 *)(v423 + 8);
          }
          v356 = sub_1CD7FF4E8(v419, (const char *)0x2E, (const llvm::APInt *)&v688, v411, v412, (uint64_t *)__src, 2, v421);
          int v425 = v424;
          if (v688)
          {
            int v426 = *v688;
            if ((v426 - 4) > 0x1E)
            {
              if ((v426 - 3) >= 0xFFFFFFFE) {
                v480 = v688;
              }
              else {
                v480 = 0;
              }
              if ((v426 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v428 = (unint64_t)(v480 + 8);
                goto LABEL_573;
              }
              if (v426 == 3) {
                *((void *)v688 + 1) = 0;
              }
            }
            else if ((v688[1] & 0x7F) == 2 || *((_DWORD *)v688 + 3))
            {
              uint64_t v427 = *((void *)v688 + 2);
              if ((v427 & 4) != 0)
              {
                unint64_t v428 = v427 & 0xFFFFFFFFFFFFFFF8;
                if (v428)
                {
LABEL_573:
                  __src[0] = &v688;
                  sub_1CC5FA668(v428 + 16, __src);
                }
              }
            }
          }
LABEL_532:
          uint64_t v358 = *(void *)(v8 + 296);
          uint64_t v359 = v12;
          int v360 = 0;
          uint64_t v361 = (uint64_t)v356;
          int v357 = v425;
LABEL_533:
          sub_1CD800DA0(v358, v359, v360, v361, v357);
          uint64_t v204 = (uint64_t)v356;
LABEL_534:
          sub_1CD808A6C(v204);
          goto LABEL_71;
        }
        if (v221 && !*(void *)(v221 + 32) && *(_WORD *)(v413 + 24) == 212)
        {
          v429 = v11;
          v430 = *(uint64_t **)(v413 + 32);
          uint64_t v432 = *v430;
          uint64_t v431 = v430[1];
          v686 = v698;
          if (v698) {
            llvm::MetadataTracking::track((uint64_t)&v686, v698, 2);
          }
          int v687 = v699;
          v433 = *(void **)(v8 + 296);
          v434 = sub_1CD7EBF14((uint64_t)v433, 1830, (const llvm::APInt *)&v686, (llvm *)5, 0, 1, 0);
          uint64_t v435 = 0;
          __src[0] = v434;
          __src[1] = v436;
          uint64_t v707 = v432;
          unsigned int v708 = v431;
          uint64_t v437 = v433[104];
          if (v437) {
            uint64_t v435 = *(unsigned __int16 *)(v437 + 8);
          }
          v438 = sub_1CD7FF4E8(v433, (const char *)0x2E, (const llvm::APInt *)&v686, (llvm *)0xA, 0, (uint64_t *)__src, 2, v435);
          uint64_t v440 = v439;
          BOOL v11 = v429;
          if (v686)
          {
            int v441 = *v686;
            if ((v441 - 4) > 0x1E)
            {
              if ((v441 - 3) >= 0xFFFFFFFE) {
                v624 = v686;
              }
              else {
                v624 = 0;
              }
              if ((v441 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v625 = (unint64_t)(v624 + 8);
                goto LABEL_679;
              }
              if (v441 == 3) {
                *((void *)v686 + 1) = 0;
              }
            }
            else if ((v686[1] & 0x7F) == 2 || *((_DWORD *)v686 + 3))
            {
              uint64_t v631 = *((void *)v686 + 2);
              if ((v631 & 4) != 0)
              {
                unint64_t v625 = v631 & 0xFFFFFFFFFFFFFFF8;
                if (v625)
                {
LABEL_679:
                  __src[0] = &v686;
                  sub_1CC5FA668(v625 + 16, __src);
                }
              }
            }
          }
          uint64_t v442 = *(void *)(v8 + 296);
          v443 = sub_1CD7EBF14(v442, 0, (const llvm::APInt *)&v698, (llvm *)5, 0, 0, 0);
          __int16 v446 = 0;
          uint64_t v447 = *(void *)(v442 + 832);
          if (v447) {
            __int16 v446 = *(_WORD *)(v447 + 8);
          }
          v448 = sub_1CCFDED5C(v442, 212, (const llvm::APInt *)&v698, (llvm *)9, 0, (uint64_t)v438, v440, v445, (uint64_t)v443, v444, v446);
          unsigned int v450 = v449;
        }
        else
        {
          v684 = v698;
          if (v698) {
            llvm::MetadataTracking::track((uint64_t)&v684, v698, 2);
          }
          int v685 = v699;
          v451 = *(void **)(v8 + 296);
          v452 = sub_1CD7EBF14((uint64_t)v451, 1830, (const llvm::APInt *)&v684, (llvm *)5, 0, 1, 0);
          uint64_t v453 = 0;
          __src[0] = v452;
          __src[1] = v454;
          uint64_t v707 = v413;
          unsigned int v708 = v414;
          uint64_t v455 = v451[104];
          if (v455) {
            uint64_t v453 = *(unsigned __int16 *)(v455 + 8);
          }
          v448 = sub_1CD7FF4E8(v451, (const char *)0x2E, (const llvm::APInt *)&v684, v411, v412, (uint64_t *)__src, 2, v453);
          unsigned int v450 = v456;
          if (v684)
          {
            int v457 = *v684;
            if ((v457 - 4) > 0x1E)
            {
              if ((v457 - 3) >= 0xFFFFFFFE) {
                v573 = v684;
              }
              else {
                v573 = 0;
              }
              if ((v457 - 3) < 0xFFFFFFFE)
              {
                if (v457 == 3) {
                  *((void *)v684 + 1) = 0;
                }
                goto LABEL_525;
              }
              unint64_t v574 = (unint64_t)(v573 + 8);
            }
            else
            {
              if ((v684[1] & 0x7F) != 2 && !*((_DWORD *)v684 + 3)) {
                goto LABEL_525;
              }
              uint64_t v630 = *((void *)v684 + 2);
              if ((v630 & 4) == 0 || (unint64_t v574 = v630 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
                uint64_t v8 = v681;
                int v10 = v680;
                goto LABEL_525;
              }
              uint64_t v8 = v681;
              int v10 = v680;
            }
            __src[0] = &v684;
            sub_1CC5FA668(v574 + 16, __src);
          }
        }
LABEL_525:
        sub_1CD7ECDC4(*(void *)(v8 + 296), (uint64_t)&v698, (BOOL)v411, v412, 1, 0.0);
        v682 = v698;
        if (v698) {
          llvm::MetadataTracking::track((uint64_t)&v682, v698, 2);
        }
        unint64_t v458 = v450 | v651 & 0xFFFFFFFF00000000;
        int v683 = v699;
        v356 = sub_1CB8B28D4(v411, v412, (uint64_t)v448, v450, (const llvm::APInt *)&v682, *(void **)(v8 + 296));
        int v425 = v459;
        if (v682)
        {
          int v460 = *v682;
          if ((v460 - 4) > 0x1E)
          {
            if ((v460 - 3) >= 0xFFFFFFFE) {
              v481 = v682;
            }
            else {
              v481 = 0;
            }
            if ((v460 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v482 = (unint64_t)(v481 + 8);
              goto LABEL_579;
            }
            if (v460 == 3) {
              *((void *)v682 + 1) = 0;
            }
          }
          else if ((v682[1] & 0x7F) == 2 || *((_DWORD *)v682 + 3))
          {
            uint64_t v629 = *((void *)v682 + 2);
            if ((v629 & 4) != 0)
            {
              unint64_t v482 = v629 & 0xFFFFFFFFFFFFFFF8;
              if (v482)
              {
LABEL_579:
                __src[0] = &v682;
                sub_1CC5FA668(v482 + 16, __src);
              }
            }
          }
        }
        unint64_t v651 = v458;
        goto LABEL_532;
      }
      if ((v14 - 56) >= 2)
      {
        if (v14 != 141) {
          goto LABEL_71;
        }
        uint64_t v187 = *(void *)(v12 + 32);
        v188 = *(BOOL **)(v12 + 40);
        v189 = (llvm *)*v188;
        uint64_t v190 = *(void *)(v187 + 80);
        if (*(_WORD *)(v190 + 24) != 96 || *v188 != 9) {
          goto LABEL_71;
        }
        uint64_t v192 = *(void *)(v190 + 32);
        uint64_t v193 = *(void *)v192;
        if (*(void *)v192 != *(void *)(v192 + 40) || *(_DWORD *)(v192 + 8) != *(_DWORD *)(v192 + 48)) {
          goto LABEL_71;
        }
        uint64_t v194 = v188[1];
        uint64_t v195 = *(void *)(v187 + 88);
        uint64_t v196 = *(void *)(v8 + 296);
        uint64_t v197 = *(void *)(v192 + 8);
        v198 = sub_1CD7ECDC4(v196, (uint64_t)&v698, *v188, v194, 0, 2.0);
        uint64_t v201 = *(void *)(v196 + 832);
        if (v201) {
          LOWORD(v201) = *(_WORD *)(v201 + 8);
        }
        v202 = sub_1CCFDED5C(v196, 98, (const llvm::APInt *)&v698, v189, v194, v193, v197, v200, (uint64_t)v198, v199, v201);
        uint64_t v8 = v681;
        sub_1CD800DA0(*(void *)(v681 + 296), v190, v195, (uint64_t)v202, v203);
        uint64_t v204 = (uint64_t)v202;
        goto LABEL_534;
      }
      uint64_t v107 = 0;
      uint64_t v108 = *(void *)(v12 + 40);
      v110 = *(llvm **)v108;
      uint64_t v109 = *(void *)(v108 + 8);
      char v111 = 1;
      do
      {
        char v112 = v111;
        v113 = (uint64_t *)(*(void *)(v12 + 32) + 40 * v107);
        uint64_t v114 = *v113;
        if (*(_WORD *)(*v113 + 24) == 171)
        {
          uint64_t v115 = *(void *)(v114 + 48);
          if (v115)
          {
            uint64_t v116 = v113[1];
            int v117 = 1;
            do
            {
              if (*(_DWORD *)(v115 + 8) == v116)
              {
                if (!v117) {
                  goto LABEL_187;
                }
                --v117;
              }
              uint64_t v115 = *(void *)(v115 + 32);
            }
            while (v115);
            if (!v117)
            {
              v118 = *(uint64_t **)(v114 + 32);
              uint64_t v119 = v118[5];
              int v120 = *(unsigned __int16 *)(v119 + 24);
              if (v120 == 35 || v120 == 11)
              {
                uint64_t v122 = *(void *)(v119 + 80);
                v123 = (void *)(v122 + 24);
                if (*(_DWORD *)(v122 + 32) >= 0x41u) {
                  v123 = (void *)*v123;
                }
                uint64_t v124 = *v118;
                if (*(_WORD *)(*v118 + 24) == 175)
                {
                  uint64_t v125 = *(void *)(v124 + 48);
                  if (v125)
                  {
                    unsigned int v126 = *(_DWORD *)v123;
                    int v127 = *((_DWORD *)v118 + 2);
                    int v128 = 1;
                    do
                    {
                      if (*(_DWORD *)(v125 + 8) == v127)
                      {
                        if (!v128) {
                          goto LABEL_187;
                        }
                        --v128;
                      }
                      uint64_t v125 = *(void *)(v125 + 32);
                    }
                    while (v125);
                    if (!v128)
                    {
                      v129 = *(uint64_t **)(v124 + 32);
                      uint64_t v130 = v129[5];
                      int v131 = *(unsigned __int16 *)(v130 + 24);
                      if (v131 == 35 || v131 == 11)
                      {
                        uint64_t v133 = *(void *)(v130 + 80);
                        v134 = (unsigned int *)(v133 + 24);
                        if (*(_DWORD *)(v133 + 32) >= 0x41u) {
                          v134 = *(unsigned int **)v134;
                        }
                        uint64_t v135 = *v134;
                        uint64_t v136 = *(void *)(v681 + 296);
                        uint64_t v654 = v129[1];
                        uint64_t v659 = *v129;
                        uint64_t v670 = v109;
                        v137 = sub_1CD7EBF14(v136, v126 >> v135, (const llvm::APInt *)&v698, v110, v109, 0, 0);
                        uint64_t v140 = *(void *)(v136 + 832);
                        if (v140) {
                          LOWORD(v140) = *(_WORD *)(v140 + 8);
                        }
                        v141 = sub_1CCFDED5C(v136, 171, (const llvm::APInt *)&v698, v110, v670, v659, v654, v139, (uint64_t)v137, v138, v140);
                        uint64_t v655 = v142;
                        uint64_t v660 = (uint64_t)v141;
                        uint64_t v143 = *(void *)(v681 + 296);
                        v144 = sub_1CD7EBF14(v143, v135, (const llvm::APInt *)&v698, v110, v670, 0, 0);
                        uint64_t v147 = *(void *)(v143 + 832);
                        if (v147) {
                          LOWORD(v147) = *(_WORD *)(v147 + 8);
                        }
                        v148 = sub_1CCFDED5C(v143, 175, (const llvm::APInt *)&v698, v110, v670, v660, v655, v146, (uint64_t)v144, v145, v147);
                        sub_1CD800DA0(*(void *)(v681 + 296), v114, v116, (uint64_t)v148, v149);
                        sub_1CD808A6C((uint64_t)v148);
                        uint64_t v109 = v670;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_187:
        char v111 = 0;
        uint64_t v107 = 1;
      }
      while ((v112 & 1) != 0);
      v171 = v11;
      if (v110 == 4)
      {
        v172 = *(uint64_t **)(v12 + 32);
        uint64_t v173 = *v172;
        uint64_t v175 = v172[5];
        uint64_t v174 = v172[6];
        if (*(_WORD *)(*v172 + 24) != 175
          || ((v176 = *(uint64_t **)(v173 + 32), uint64_t v177 = v176[5], v178 = *(unsigned __int16 *)(v177 + 24), v178 != 35)
            ? (BOOL v179 = v178 == 11)
            : (BOOL v179 = 1),
              !v179))
        {
          int v186 = 0;
          goto LABEL_319;
        }
        uint64_t v180 = v172[1];
        uint64_t v181 = *(void *)(v177 + 80);
        if (v679)
        {
          v182 = (void *)(v181 + 24);
          unsigned int v183 = *(_DWORD *)(v181 + 32);
          if (v183 >= 0x41) {
            v182 = (void *)*v182;
          }
          if (*v182 < 5uLL)
          {
            char v184 = 0;
            goto LABEL_245;
          }
        }
        else
        {
          unsigned int v183 = *(_DWORD *)(v181 + 32);
        }
        v374 = (void *)(v181 + 24);
        int v666 = v180;
        if (v183 >= 0x41) {
          v374 = (void *)*v374;
        }
        uint64_t v662 = *v176;
        uint64_t v652 = *(void *)(v681 + 296);
        uint64_t v657 = v176[1];
        uint64_t v673 = v109;
        v375 = sub_1CD7EBF14(v652, (1 << *(_DWORD *)v374), (const llvm::APInt *)&v698, v110, v109, 0, 0);
        uint64_t v378 = *(void *)(v652 + 832);
        if (v378) {
          LOWORD(v378) = *(_WORD *)(v378 + 8);
        }
        v379 = sub_1CCFDED5C(v652, 58, (const llvm::APInt *)&v698, v110, v673, v662, v657, v377, (uint64_t)v375, v376, v378);
        int v381 = v380;
        uint64_t v382 = v173;
        uint64_t v383 = (uint64_t)v379;
        sub_1CD800DA0(*(void *)(v681 + 296), v382, v666, (uint64_t)v379, v381);
        sub_1CD808A6C(v383);
        uint64_t v109 = v673;
        if (v679)
        {
          uint64_t v181 = *(void *)(v177 + 80);
          unsigned int v183 = *(_DWORD *)(v181 + 32);
          char v184 = 1;
LABEL_245:
          v185 = (void *)(v181 + 24);
          if (v183 >= 0x41) {
            v185 = (void *)*v185;
          }
          int v186 = *v185 < 5uLL;
          if ((v184 & 1) == 0)
          {
LABEL_319:
            if (*(_WORD *)(v175 + 24) != 175) {
              goto LABEL_329;
            }
            v266 = *(uint64_t **)(v175 + 32);
            uint64_t v267 = v266[5];
            int v268 = *(unsigned __int16 *)(v267 + 24);
            if (v268 != 35 && v268 != 11) {
              goto LABEL_329;
            }
            uint64_t v270 = *(void *)(v267 + 80);
            if (v679)
            {
              v271 = (void *)(v270 + 24);
              unsigned int v272 = *(_DWORD *)(v270 + 32);
              if (v272 >= 0x41) {
                v271 = (void *)*v271;
              }
              if (((*v271 < 5uLL) & ~v186) != 0) {
                goto LABEL_329;
              }
            }
            else
            {
              unsigned int v272 = *(_DWORD *)(v270 + 32);
            }
            v384 = (void *)(v270 + 24);
            if (v272 >= 0x41) {
              v384 = (void *)*v384;
            }
            uint64_t v385 = *(void *)(v681 + 296);
            uint64_t v674 = *v266;
            uint64_t v667 = v266[1];
            uint64_t v386 = v109;
            v387 = sub_1CD7EBF14(v385, (1 << *(_DWORD *)v384), (const llvm::APInt *)&v698, v110, v109, 0, 0);
            uint64_t v390 = *(void *)(v385 + 832);
            if (v390) {
              LOWORD(v390) = *(_WORD *)(v390 + 8);
            }
            v391 = sub_1CCFDED5C(v385, 58, (const llvm::APInt *)&v698, v110, v386, v674, v667, v389, (uint64_t)v387, v388, v390);
            sub_1CD800DA0(*(void *)(v681 + 296), v175, v174, (uint64_t)v391, v392);
            sub_1CD808A6C((uint64_t)v391);
            uint64_t v109 = v386;
          }
        }
      }
LABEL_329:
      if (v14 != 56)
      {
        BOOL v11 = v171;
        int v10 = v680;
        if (v14 != 57) {
          goto LABEL_353;
        }
        uint64_t v280 = *(void *)(v12 + 32);
        uint64_t v281 = *(void *)(v280 + 40);
        if (*(_WORD *)(v281 + 24) != 58) {
          goto LABEL_353;
        }
        uint64_t v282 = *(void *)(v281 + 48);
        if (!v282) {
          goto LABEL_353;
        }
        int v283 = *(_DWORD *)(v280 + 48);
        int v284 = 1;
        do
        {
          if (*(_DWORD *)(v282 + 8) == v283)
          {
            if (!v284) {
              goto LABEL_353;
            }
            --v284;
          }
          uint64_t v282 = *(void *)(v282 + 32);
        }
        while (v282);
        if (v284
          || ((v285 = *(uint64_t **)(v281 + 32), uint64_t v286 = v285[5], v287 = *(unsigned __int16 *)(v286 + 24), v287 != 35)
            ? (BOOL v288 = v287 == 11)
            : (BOOL v288 = 1),
              v288 ? (BOOL v289 = (v110 & 0xFE) == 4) : (BOOL v289 = 0),
              !v289))
        {
LABEL_353:
          uint64_t v8 = v681;
          if (!v679 || v110 != 6) {
            goto LABEL_71;
          }
          v273 = *(uint64_t **)(v12 + 32);
          uint64_t v274 = v273[5];
          int v275 = *(unsigned __int16 *)(v274 + 24);
          goto LABEL_370;
        }
        uint64_t v586 = *(void *)(v286 + 80);
        unsigned int v587 = *(_DWORD *)(v586 + 32);
        uint64_t v8 = v681;
        if (v587 > 0x40) {
          uint64_t v588 = **(void **)(v586 + 24);
        }
        else {
          uint64_t v588 = (uint64_t)(*(void *)(v586 + 24) << -(char)v587) >> -(char)v587;
        }
        uint64_t v607 = *(void *)(v681 + 296);
        uint64_t v609 = *v285;
        uint64_t v608 = v285[1];
        uint64_t v610 = v109;
        v611 = sub_1CD7EBF14(v607, -v588, (const llvm::APInt *)&v698, v110, v109, 0, 0);
        __int16 v614 = 0;
        uint64_t v615 = *(void *)(v607 + 832);
        if (v615) {
          __int16 v614 = *(_WORD *)(v615 + 8);
        }
        v617 = sub_1CCFDED5C(v607, 58, (const llvm::APInt *)&v698, v110, v610, v609, v608, v613, (uint64_t)v611, v612, v614);
        uint64_t v619 = *(void *)(v681 + 296);
        v620 = *(uint64_t **)(v12 + 32);
        uint64_t v621 = *v620;
        uint64_t v622 = v620[1];
        uint64_t v623 = *(void *)(v619 + 832);
        if (v623) {
          LOWORD(v623) = *(_WORD *)(v623 + 8);
        }
        v161 = sub_1CCFDED5C(v619, 56, (const llvm::APInt *)&v698, v110, v610, (uint64_t)v617, v616, v618, v621, v622, v623);
LABEL_437:
        v356 = v161;
        int v357 = v162;
        uint64_t v358 = *(void *)(v8 + 296);
        uint64_t v359 = v12;
        int v360 = 0;
LABEL_438:
        uint64_t v361 = (uint64_t)v356;
        goto LABEL_533;
      }
      v273 = *(uint64_t **)(v12 + 32);
      uint64_t v274 = v273[5];
      int v275 = *(unsigned __int16 *)(v274 + 24);
      BOOL v276 = v275 == 35 || v275 == 11;
      uint64_t v8 = v681;
      BOOL v11 = v171;
      int v10 = v680;
      if (v276)
      {
        uint64_t v277 = *(void *)(v274 + 80);
        unsigned int v278 = *(_DWORD *)(v277 + 32);
        unint64_t v279 = v278 > 0x40 ? **(void **)(v277 + 24) : (uint64_t)(*(void *)(v277 + 24) << -(char)v278) >> -(char)v278;
        if (v279 >= 0x8000000000000001)
        {
          if (!v679 || *(_WORD *)(*v273 + 24) != 175) {
            goto LABEL_434;
          }
          uint64_t v290 = *(void *)(*(void *)(*v273 + 32) + 40);
          int v291 = *(unsigned __int16 *)(v290 + 24);
          if (v291 != 35 && v291 != 11) {
            goto LABEL_434;
          }
          uint64_t v293 = *(void *)(v290 + 80);
          v294 = (void *)(v293 + 24);
          if (*(_DWORD *)(v293 + 32) >= 0x41u) {
            v294 = (void *)*v294;
          }
          if (*v294 >= 5uLL)
          {
LABEL_434:
            uint64_t v349 = v109;
            v350 = sub_1CD7EBF14(*(void *)(v681 + 296), -(uint64_t)v279, (const llvm::APInt *)&v698, v110, v109, 0, 0);
            __int16 v353 = 0;
            uint64_t v354 = *(void *)(v681 + 296);
            uint64_t v355 = *(void *)(v354 + 832);
            if (v355) {
              __int16 v353 = *(_WORD *)(v355 + 8);
            }
            v161 = sub_1CCFDED5C(v354, 57, (const llvm::APInt *)&v698, v110, v349, **(void **)(v12 + 32), *(void *)(*(void *)(v12 + 32) + 8), v352, (uint64_t)v350, v351, v353);
            goto LABEL_437;
          }
        }
      }
      if (!v679 || v110 != 6) {
        goto LABEL_71;
      }
LABEL_370:
      if (v275 != 175) {
        goto LABEL_408;
      }
      uint64_t v295 = *(void *)(*(void *)(v274 + 32) + 40);
      int v296 = *(unsigned __int16 *)(v295 + 24);
      if (v296 != 35 && v296 != 11) {
        goto LABEL_408;
      }
      uint64_t v298 = *(void *)(v295 + 80);
      v299 = (void *)(v298 + 24);
      if (*(_DWORD *)(v298 + 32) >= 0x41u) {
        v299 = (void *)*v299;
      }
      if (*v299 >= 5uLL)
      {
LABEL_408:
        if (v14 == 56)
        {
          uint64_t v300 = *v273;
          int v301 = *(unsigned __int16 *)(*v273 + 24);
          if (v301 == 175)
          {
            uint64_t v302 = *(void *)(*(void *)(v300 + 32) + 40);
            int v303 = *(unsigned __int16 *)(v302 + 24);
            if (v303 == 35 || v303 == 11)
            {
              uint64_t v305 = *(void *)(v302 + 80);
              v306 = (void *)(v305 + 24);
              if (*(_DWORD *)(v305 + 32) >= 0x41u) {
                v306 = (void *)*v306;
              }
              if (*v306 < 5uLL) {
                goto LABEL_71;
              }
            }
            int v301 = 175;
          }
        }
        else
        {
          uint64_t v300 = *v273;
          int v301 = *(unsigned __int16 *)(*v273 + 24);
        }
        BOOL v307 = v14 == 56;
        int v308 = *((_DWORD *)v273 + 2);
        uint64_t v309 = v273[6];
        BOOL v310 = v301 == 175;
        uint64_t v311 = v307 && v310 ? v300 : v274;
        int v312 = v307 && v310 ? v308 : v309;
        if (*(_WORD *)(v311 + 24) == 175)
        {
          uint64_t v313 = *(void *)(v311 + 48);
          if (v313)
          {
            int v314 = 1;
            do
            {
              if (*(_DWORD *)(v313 + 8) == v312)
              {
                if (!v314) {
                  goto LABEL_71;
                }
                --v314;
              }
              uint64_t v313 = *(void *)(v313 + 32);
            }
            while (v313);
            if (!v314)
            {
              uint64_t v315 = *(void *)(*(void *)(v311 + 32) + 40);
              int v316 = *(unsigned __int16 *)(v315 + 24);
              if (v316 == 35 || v316 == 11)
              {
                uint64_t v318 = *(void *)(v315 + 80);
                if (*(_DWORD *)(v318 + 32) > 0x40u)
                {
                  uint64_t v319 = **(void **)(v318 + 24);
                  if ((unint64_t)(v319 - 5) > 3) {
                    goto LABEL_71;
                  }
                }
                else
                {
                  uint64_t v319 = *(void *)(v318 + 24);
                  if ((unint64_t)(v319 - 5) >= 4) {
                    goto LABEL_71;
                  }
                }
                uint64_t v675 = v109;
                v393 = sub_1CD7EBF14(*(void *)(v8 + 296), v319 - 4, (const llvm::APInt *)&v698, (llvm *)5, 0, 0, 0);
                uint64_t v395 = v394;
                v397 = sub_1CD7EBF14(*(void *)(v8 + 296), 4, (const llvm::APInt *)&v698, (llvm *)5, 0, 0, 0);
                uint64_t v398 = v8;
                uint64_t v400 = v399;
                __int16 v401 = 0;
                uint64_t v402 = *(void *)(v398 + 296);
                uint64_t v403 = *(void *)(v402 + 832);
                if (v403) {
                  __int16 v401 = *(_WORD *)(v403 + 8);
                }
                v405 = sub_1CCFDED5C(v402, 175, (const llvm::APInt *)&v698, v110, v675, **(void **)(v311 + 32), *(void *)(*(void *)(v311 + 32) + 8), v396, (uint64_t)v393, v395, v401);
                uint64_t v407 = *(void *)(v681 + 296);
                uint64_t v408 = *(void *)(v407 + 832);
                if (v408) {
                  LOWORD(v408) = *(_WORD *)(v408 + 8);
                }
                v356 = sub_1CCFDED5C(v407, 175, (const llvm::APInt *)&v698, v110, v675, (uint64_t)v405, v404, v406, (uint64_t)v397, v400, v408);
                int v357 = v409;
                uint64_t v8 = v681;
                uint64_t v358 = *(void *)(v681 + 296);
                uint64_t v359 = v311;
                int v360 = v312;
                goto LABEL_438;
              }
            }
          }
        }
      }
LABEL_71:
      if (v698)
      {
        int v60 = *v698;
        if ((v60 - 4) > 0x1E)
        {
          if ((v60 - 3) >= 0xFFFFFFFE) {
            uint64_t v61 = v698;
          }
          else {
            uint64_t v61 = 0;
          }
          if ((v60 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v62 = (unint64_t)(v61 + 8);
            goto LABEL_82;
          }
          if (v60 == 3) {
            *((void *)v698 + 1) = 0;
          }
        }
        else if ((v698[1] & 0x7F) == 2 || *((_DWORD *)v698 + 3))
        {
          uint64_t v606 = *((void *)v698 + 2);
          if ((v606 & 4) != 0)
          {
            unint64_t v62 = v606 & 0xFFFFFFFFFFFFFFF8;
            if (v62)
            {
LABEL_82:
              __src[0] = &v698;
              sub_1CC5FA668(v62 + 16, __src);
            }
          }
        }
      }
      BOOL v11 = (void *)v11[1];
      if (v11 == v10)
      {
        unsigned int v9 = *(void **)(v8 + 296);
        int v10 = (void *)v9[27];
        break;
      }
    }
  }
  v633 = v9 + 26;
  if (v10 != v9 + 26)
  {
    while (1)
    {
      if (v10) {
        uint64_t v634 = (uint64_t)(v10 - 1);
      }
      else {
        uint64_t v634 = 0;
      }
      v635 = *(void **)(v634 + 64);
      __src[0] = v635;
      if (v635) {
        llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v635, 2);
      }
      LODWORD(__src[1]) = *(_DWORD *)(v634 + 60);
      if (*(_WORD *)(v634 + 24) == 429)
      {
        uint64_t v639 = *(void *)(v8 + 296);
        uint64_t v640 = *(void *)(v639 + 832);
        if (v640) {
          LOWORD(v640) = *(_WORD *)(v640 + 8);
        }
        v641 = sub_1CCFDED5C(v639, 58, (const llvm::APInt *)__src, **(llvm ***)(v634 + 40), *(void *)(*(void *)(v634 + 40) + 8), **(void **)(v634 + 32), *(void *)(*(void *)(v634 + 32) + 8), a8, *(void *)(*(void *)(v634 + 32) + 40), *(void *)(*(void *)(v634 + 32) + 48), v640);
        sub_1CD800DA0(*(void *)(v8 + 296), v634, 0, (uint64_t)v641, v642);
        sub_1CD808A6C((uint64_t)v641);
      }
      if (!__src[0]) {
        goto LABEL_731;
      }
      int v636 = *(unsigned __int8 *)__src[0];
      if ((v636 - 4) > 0x1E)
      {
        if ((v636 - 3) >= 0xFFFFFFFE) {
          v637 = __src[0];
        }
        else {
          v637 = 0;
        }
        if ((v636 - 3) < 0xFFFFFFFE)
        {
          if (v636 == 3) {
            *((void *)__src[0] + 1) = 0;
          }
          goto LABEL_731;
        }
        unint64_t v638 = (unint64_t)v637 + 8;
      }
      else
      {
        if ((*((unsigned char *)__src[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__src[0] + 3)) {
          goto LABEL_731;
        }
        uint64_t v643 = *((void *)__src[0] + 2);
        if ((v643 & 4) == 0) {
          goto LABEL_731;
        }
        unint64_t v638 = v643 & 0xFFFFFFFFFFFFFFF8;
        if (!v638) {
          goto LABEL_731;
        }
      }
      *(void *)&long long v713 = __src;
      sub_1CC5FA668(v638 + 16, &v713);
LABEL_731:
      int v10 = (void *)v10[1];
      if (v10 == v633)
      {
        unsigned int v9 = *(void **)(v8 + 296);
        return sub_1CD7EA154(v9);
      }
    }
  }
  return sub_1CD7EA154(v9);
}

#error "1CB899F5C: too big function (funcsize=0)"

BOOL sub_1CB8B0EB0(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t v3 = *(unsigned __int8 **)(a1 + 480);
      goto LABEL_10;
    case 2:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 313);
      return v2 != 0;
    case 3:
      uint64_t v3 = *(unsigned __int8 **)(a1 + 480);
      if (!v3[287] || !v3[288]) {
        goto LABEL_10;
      }
      return 0;
    case 4:
      uint64_t v3 = *(unsigned __int8 **)(a1 + 480);
      if (!v3[287] || !v3[288]) {
        return 0;
      }
LABEL_10:
      int v2 = v3[280];
      return v2 != 0;
    default:
      int v2 = *(unsigned __int8 *)(*(void *)(a1 + 480) + 281);
      return v2 != 0;
  }
}

uint64_t sub_1CB8B0F4C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = 1;
  switch(a3)
  {
    case 1:
      uint64_t v6 = *(void *)(a2 + 80);
      int v7 = (void *)(v6 + 24);
      if (*(_DWORD *)(v6 + 32) >= 0x41u) {
        int v7 = (void *)*v7;
      }
      uint64_t result = *v7 < 0x10000uLL;
      break;
    case 2:
      uint64_t v8 = *(void *)(a2 + 80);
      unsigned int v9 = (uint64_t *)(v8 + 24);
      if (*(_DWORD *)(v8 + 32) >= 0x41u) {
        unsigned int v9 = (uint64_t *)*v9;
      }
      BOOL v5 = *((_DWORD *)v9 + 1) == 0;
      goto LABEL_12;
    case 3:
    case 4:
      return result;
    case 5:
      uint64_t result = sub_1CB8BE1E4(*(void *)(a2 + 80) + 24, 0.0);
      break;
    default:
      if (**(unsigned char **)(a2 + 40) != 4)
      {
        uint64_t v4 = *(void *)(a2 + 48);
        if (v4)
        {
          BOOL v5 = *(void *)(v4 + 32) == 0;
LABEL_12:
          uint64_t result = v5;
        }
        else
        {
          uint64_t result = 0;
        }
      }
      break;
  }
  return result;
}

uint64_t sub_1CB8B101C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  unsigned int v7 = *(_DWORD *)(a7 + 8);
  switch(a6)
  {
    case 1:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v23 = *(void *)a7 + 24 * v7;
      uint64_t v24 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CD3D5CCC(a1, a4, a5, v23, v24);
    case 2:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v25 = *(void *)a7 + 24 * v7;
      uint64_t v26 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CD3D5E3C(a1, a4, a5, v25, v26);
    case 3:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v27 = *(void *)a7 + 24 * v7;
      uint64_t v28 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CD3D5D30(a1, a4, a5, v27, v28, 0);
    case 4:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v29 = *(void *)a7 + 24 * v7;
      uint64_t v30 = *(void *)a7 + 24 * (v7 + 1);
      uint64_t v31 = a1;
      uint64_t v32 = a4;
      uint64_t v33 = a5;
      return sub_1CD3D5DCC(v31, v32, v33, v29, v30);
    case 5:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v34 = *(void *)a7 + 24 * v7;
      uint64_t v35 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CD3D531C(a1, a4, a5, v34, v35, 0);
    case 6:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v36 = *(void *)a7 + 24 * v7;
      uint64_t v37 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CD3D5C68(a1, a4, a5, v36, v37);
    case 7:
    case 9:
    case 13:
    case 15:
    case 25:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v12 = *(void *)a7 + 24 * v7;
      uint64_t v13 = *(void *)a7 + 24 * (v7 + 1);
      __int16 v43 = 0;
      uint64_t v14 = a1;
      uint64_t v15 = a4;
      unsigned int v16 = a5;
      int v17 = 0;
      goto LABEL_6;
    case 8:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v29 = *(void *)a7 + 24 * v7;
      uint64_t v30 = *(void *)a7 + 24 * (v7 + 1);
      uint64_t v31 = a1;
      uint64_t v32 = a4;
      uint64_t v33 = a5;
      return sub_1CD3D5DCC(v31, v32, v33, v29, v30);
    case 10:
    case 14:
    case 16:
    case 23:
    case 24:
    case 26:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v12 = *(void *)a7 + 24 * v7;
      uint64_t v13 = *(void *)a7 + 24 * (v7 + 1);
      __int16 v43 = 0;
      uint64_t v14 = a1;
      uint64_t v15 = a4;
      unsigned int v16 = a5;
      int v17 = 0;
      int v18 = 1;
      goto LABEL_7;
    case 11:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v38 = *(void *)a7 + 24 * v7;
      uint64_t v39 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CD3D5AF8(a1, a4, a5, v38, v39);
    case 12:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v40 = *(void *)a7 + 24 * v7;
      uint64_t v41 = *(void *)a7 + 24 * (v7 + 1);
      return sub_1CD3D54B0(a1, a4, a5, v40, v41, 0);
    case 17:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v12 = *(void *)a7 + 24 * v7;
      uint64_t v13 = *(void *)a7 + 24 * (v7 + 1);
      __int16 v43 = 257;
      uint64_t v14 = a1;
      uint64_t v15 = a4;
      unsigned int v16 = a5;
      int v17 = 0;
      int v18 = 1;
      goto LABEL_41;
    case 18:
    case 19:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v12 = *(void *)a7 + 24 * v7;
      uint64_t v13 = *(void *)a7 + 24 * (v7 + 1);
      __int16 v43 = 1;
      uint64_t v14 = a1;
      uint64_t v15 = a4;
      unsigned int v16 = a5;
      int v17 = 0;
      int v18 = 0;
LABEL_41:
      int v19 = 1;
      goto LABEL_8;
    case 20:
    case 21:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v12 = *(void *)a7 + 24 * v7;
      uint64_t v13 = *(void *)a7 + 24 * (v7 + 1);
      __int16 v43 = 0;
      uint64_t v14 = a1;
      uint64_t v15 = a4;
      unsigned int v16 = a5;
      int v17 = 1;
LABEL_6:
      int v18 = 0;
LABEL_7:
      int v19 = 0;
LABEL_8:
      uint64_t result = sub_1CB896BAC(v14, v15, v16, v12, v13, v17, v18, v19, v43, SHIBYTE(v43), 0);
      break;
    case 22:
      sub_1CD3D6DA0(a7, v7 + 1);
      uint64_t v42 = *(void *)a7 + 24 * v7;
      *(void *)uint64_t v42 = a4;
      *(_DWORD *)(v42 + 8) = a5;
      uint64_t result = 1;
      break;
    default:
      sub_1CD3D6DA0(a7, v7 + 2);
      uint64_t v21 = *(void *)a7 + 24 * v7;
      uint64_t v22 = *(void *)a7 + 24 * (v7 + 1);
      uint64_t result = sub_1CD3D5A5C(a1, a4, a5, v21, v22, 0);
      break;
  }
  return result;
}

uint64_t *sub_1CB8B15C0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  switch(a4)
  {
    case 1:
    case 2:
      uint64_t v6 = *(void *)(a1 + 296);
      uint64_t v7 = *(void *)(a2 + 80);
      uint64_t v8 = (unsigned int *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u) {
        uint64_t v8 = *(unsigned int **)v8;
      }
      uint64_t v9 = *v8;
      goto LABEL_45;
    case 3:
      uint64_t v36 = *(void *)(a2 + 80);
      uint64_t v37 = *(void *)(v36 + 32);
      if ((_UNKNOWN *)v37 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v98, (const llvm::detail::DoubleAPFloat *)(v36 + 32));
      }
      else
      {
        uint64_t v98 = *(void *)(v36 + 32);
        if ((*(_DWORD *)(v37 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v38 = *(unsigned char *)(v36 + 52);
        int v39 = v38 & 7;
        char v101 = v38 & 0xF;
        int v100 = *(_DWORD *)(v36 + 48);
        BOOL v41 = (v38 & 6) != 0 && v39 != 3;
        if (v39 == 1 || v41)
        {
          uint64_t v43 = *(unsigned int *)(v37 + 8);
          if ((v43 - 64) <= 0xFFFFFF7F) {
            uint64_t v44 = (uint64_t **)a1;
          }
          else {
            uint64_t v44 = &v99;
          }
          uint64_t v47 = *(uint64_t ***)(v36 + 40);
          uint64_t v46 = (uint64_t **)(v36 + 40);
          uint64_t v45 = v47;
          if ((*((_DWORD *)*(v46 - 1) + 2) - 64) >= 0xFFFFFF80) {
            uint64_t v45 = v46;
          }
          if (v43 <= 0xFFFFFFBF)
          {
            unint64_t v48 = (unint64_t)(v43 + 64) >> 6;
            do
            {
              uint64_t v49 = *v45++;
              *v44++ = v49;
              --v48;
            }
            while (v48);
          }
        }
      }
      if ((_UNKNOWN *)v98 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v93, (const llvm::detail::DoubleAPFloat *)&v98);
      }
      else
      {
        uint64_t v93 = v98;
        if ((*(_DWORD *)(v98 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        int v50 = v101 & 7;
        char v96 = v96 & 0xF0 | v101 & 0xF;
        int v95 = v100;
        BOOL v52 = (v101 & 6) != 0 && v50 != 3;
        if (v50 == 1 || v52)
        {
          uint64_t v53 = *(unsigned int *)(v93 + 8);
          int v54 = (v53 - 64) <= 0xFFFFFF7F ? v94 : (uint64_t *)&v94;
          uint64_t v55 = (*(_DWORD *)(v98 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v99 : v99;
          if (v53 <= 0xFFFFFFBF)
          {
            unint64_t v56 = (unint64_t)(v53 + 64) >> 6;
            do
            {
              uint64_t v57 = *v55++;
              *v54++ = v57;
              --v56;
            }
            while (v56);
          }
        }
      }
      char v90 = 0;
      if (llvm::APFloat::convert((uint64_t)&v92, &unk_1CFB2E2E0, 1, &v90)
        || v90
        || sub_1CB8456FC((uint64_t)&v92))
      {
        if ((_UNKNOWN *)v98 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v98, (llvm::APInt *)&v88);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v98, (uint64_t)&v88);
        }
        uint64_t v58 = *(void *)(a1 + 296);
        if (v89 >= 0x41)
        {
          int v75 = 0;
          int64_t v76 = ((unint64_t)v89 + 63) >> 6;
          do
          {
            BOOL v72 = v76-- < 1;
            if (v72) {
              break;
            }
            unint64_t v77 = *(void *)&v88[8 * v76];
            v75 += __clz(v77);
          }
          while (!v77);
          unsigned int v78 = v89 | 0xFFFFFFC0;
          if ((v89 & 0x3F) == 0) {
            unsigned int v78 = 0;
          }
          if (v89 - v75 - v78 > 0x40) {
            unsigned int v59 = -1;
          }
          else {
            unsigned int v59 = *(_DWORD *)v88;
          }
        }
        else
        {
          unsigned int v59 = v88;
        }
        uint64_t v60 = v59;
      }
      else
      {
        if ((_UNKNOWN *)v93 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v93, (llvm::APInt *)&v88);
        }
        else {
          llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v93, (uint64_t)&v88);
        }
        uint64_t v58 = *(void *)(a1 + 296);
        if (v89 >= 0x41)
        {
          int v79 = 0;
          int64_t v80 = ((unint64_t)v89 + 63) >> 6;
          do
          {
            BOOL v72 = v80-- < 1;
            if (v72) {
              break;
            }
            unint64_t v81 = *(void *)&v88[8 * v80];
            v79 += __clz(v81);
          }
          while (!v81);
          unsigned int v82 = v89 | 0xFFFFFFC0;
          if ((v89 & 0x3F) == 0) {
            unsigned int v82 = 0;
          }
          if (v89 - v79 - v82 > 0x40) {
            uint64_t v63 = -1;
          }
          else {
            uint64_t v63 = *(void *)v88;
          }
        }
        else
        {
          uint64_t v63 = (uint64_t)v88;
        }
        uint64_t v60 = v63 | 0x100000000;
      }
      uint64_t v64 = *(unsigned __int8 **)(a2 + 64);
      int v86 = v64;
      if (v64) {
        llvm::MetadataTracking::track((uint64_t)&v86, v64, 2);
      }
      int v87 = *(_DWORD *)(a2 + 60);
      uint64_t v28 = sub_1CD7EBF14(v58, v60, (const llvm::APInt *)&v86, (llvm *)6, 0, 1, 0);
      if (!v86) {
        goto LABEL_117;
      }
      int v65 = *v86;
      if ((v65 - 4) > 0x1E)
      {
        if ((v65 - 3) >= 0xFFFFFFFE) {
          int v68 = v86;
        }
        else {
          int v68 = 0;
        }
        if ((v65 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v69 = (unint64_t)(v68 + 8);
LABEL_135:
          uint64_t v91 = &v86;
          sub_1CC5FA668(v69 + 16, &v91);
          goto LABEL_117;
        }
        if (v65 == 3) {
          *((void *)v86 + 1) = 0;
        }
      }
      else if ((v86[1] & 0x7F) == 2 || *((_DWORD *)v86 + 3))
      {
        uint64_t v85 = *((void *)v86 + 2);
        if ((v85 & 4) != 0)
        {
          unint64_t v69 = v85 & 0xFFFFFFFFFFFFFFF8;
          if (v69) {
            goto LABEL_135;
          }
        }
      }
LABEL_117:
      if (v89 >= 0x41 && v88) {
        MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
      }
      if ((_UNKNOWN *)v93 == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v94);
      }
      else if ((*(_DWORD *)(v93 + 8) - 64) <= 0xFFFFFF7F && v94)
      {
        MEMORY[0x1D25D9CB0](v94, 0x1000C8000313F17);
      }
      uint64_t v30 = v98;
      if ((_UNKNOWN *)v98 == &unk_1CFB2E344) {
        goto LABEL_123;
      }
      goto LABEL_39;
    case 4:
      uint64_t v10 = *(void *)(a2 + 80);
      uint64_t v11 = *(void *)(v10 + 32);
      if ((_UNKNOWN *)v11 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v98, (const llvm::detail::DoubleAPFloat *)(v10 + 32));
      }
      else
      {
        uint64_t v98 = *(void *)(v10 + 32);
        if ((*(_DWORD *)(v11 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        char v12 = *(unsigned char *)(v10 + 52);
        int v13 = v12 & 7;
        char v101 = v12 & 0xF;
        int v100 = *(_DWORD *)(v10 + 48);
        BOOL v15 = (v12 & 6) != 0 && v13 != 3;
        if (v13 == 1 || v15)
        {
          uint64_t v17 = *(unsigned int *)(v11 + 8);
          if ((v17 - 64) <= 0xFFFFFF7F) {
            int v18 = (uint64_t **)a1;
          }
          else {
            int v18 = &v99;
          }
          uint64_t v21 = *(uint64_t ***)(v10 + 40);
          char v20 = (uint64_t **)(v10 + 40);
          int v19 = v21;
          if ((*((_DWORD *)*(v20 - 1) + 2) - 64) >= 0xFFFFFF80) {
            int v19 = v20;
          }
          if (v17 <= 0xFFFFFFBF)
          {
            unint64_t v22 = (unint64_t)(v17 + 64) >> 6;
            do
            {
              uint64_t v23 = *v19++;
              *v18++ = v23;
              --v22;
            }
            while (v22);
          }
        }
      }
      if ((_UNKNOWN *)v98 == &unk_1CFB2E344) {
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v98, (llvm::APInt *)&v92);
      }
      else {
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v98, (uint64_t)&v92);
      }
      uint64_t v24 = *(void *)(a1 + 296);
      if (v93 >= 0x41)
      {
        int v70 = 0;
        int64_t v71 = ((unint64_t)v93 + 63) >> 6;
        do
        {
          BOOL v72 = v71-- < 1;
          if (v72) {
            break;
          }
          unint64_t v73 = v92[v71];
          v70 += __clz(v73);
        }
        while (!v73);
        int v74 = v93 | 0xFFFFFFC0;
        if ((v93 & 0x3F) == 0) {
          int v74 = 0;
        }
        if ((v93 - v70 - v74) > 0x40) {
          uint64_t v25 = -1;
        }
        else {
          uint64_t v25 = *v92;
        }
      }
      else
      {
        uint64_t v25 = (uint64_t)v92;
      }
      uint64_t v26 = v25 | 0x100000000;
      uint64_t v27 = *(unsigned __int8 **)(a2 + 64);
      uint64_t v88 = v27;
      if (v27) {
        llvm::MetadataTracking::track((uint64_t)&v88, v27, 2);
      }
      unsigned int v89 = *(_DWORD *)(a2 + 60);
      uint64_t v28 = sub_1CD7EBF14(v24, v26, (const llvm::APInt *)&v88, (llvm *)6, 0, 1, 0);
      if (!v88) {
        goto LABEL_35;
      }
      int v29 = *v88;
      if ((v29 - 4) > 0x1E)
      {
        if ((v29 - 3) >= 0xFFFFFFFE) {
          uint64_t v66 = v88;
        }
        else {
          uint64_t v66 = 0;
        }
        if ((v29 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v67 = (unint64_t)(v66 + 8);
LABEL_129:
          int v86 = (unsigned __int8 *)&v88;
          sub_1CC5FA668(v67 + 16, &v86);
          goto LABEL_35;
        }
        if (v29 == 3) {
          *((void *)v88 + 1) = 0;
        }
      }
      else if ((v88[1] & 0x7F) == 2 || *((_DWORD *)v88 + 3))
      {
        uint64_t v84 = *((void *)v88 + 2);
        if ((v84 & 4) != 0)
        {
          unint64_t v67 = v84 & 0xFFFFFFFFFFFFFFF8;
          if (v67) {
            goto LABEL_129;
          }
        }
      }
LABEL_35:
      if (v93 >= 0x41 && v92) {
        MEMORY[0x1D25D9CB0](v92, 0x1000C8000313F17);
      }
      uint64_t v30 = v98;
      if ((_UNKNOWN *)v98 == &unk_1CFB2E344)
      {
LABEL_123:
        sub_1CB845718((uint64_t *)&v99);
      }
      else
      {
LABEL_39:
        if ((*(_DWORD *)(v30 + 8) - 64) <= 0xFFFFFF7F && v99) {
          MEMORY[0x1D25D9CB0](v99, 0x1000C8000313F17);
        }
      }
      return v28;
    default:
      uint64_t v6 = *(void *)(a1 + 296);
      uint64_t v31 = *(void *)(a2 + 80);
      uint64_t v32 = (void *)(v31 + 24);
      if (*(_DWORD *)(v31 + 32) >= 0x41u) {
        uint64_t v32 = (void *)*v32;
      }
      uint64_t v9 = *v32 | 0x100000000;
LABEL_45:
      uint64_t v33 = *(unsigned __int8 **)(a2 + 64);
      int v97 = v33;
      if (v33) {
        llvm::MetadataTracking::track((uint64_t)&v97, v33, 2);
      }
      LODWORD(v98) = *(_DWORD *)(a2 + 60);
      uint64_t v28 = sub_1CD7EBF14(v6, v9, (const llvm::APInt *)&v97, (llvm *)6, 0, 1, 0);
      if (!v97) {
        return v28;
      }
      int v34 = *v97;
      if ((v34 - 4) > 0x1E)
      {
        if ((v34 - 3) >= 0xFFFFFFFE) {
          uint64_t v61 = v97;
        }
        else {
          uint64_t v61 = 0;
        }
        if ((v34 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v62 = (unint64_t)(v61 + 8);
LABEL_103:
          v92 = (uint64_t *)&v97;
          sub_1CC5FA668(v62 + 16, &v92);
          return v28;
        }
        if (v34 == 3) {
          *((void *)v97 + 1) = 0;
        }
      }
      else if ((v97[1] & 0x7F) == 2 || *((_DWORD *)v97 + 3))
      {
        uint64_t v83 = *((void *)v97 + 2);
        if ((v83 & 4) != 0)
        {
          unint64_t v62 = v83 & 0xFFFFFFFFFFFFFFF8;
          if (v62) {
            goto LABEL_103;
          }
        }
      }
      return v28;
  }
}

uint64_t *sub_1CB8B1EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6, llvm *a7, uint64_t a8)
{
  v59[14] = *MEMORY[0x1E4F143B8];
  int v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 == 36 || v8 == 12) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v8 == 35 || v8 == 11) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = *(unsigned __int16 *)(a4 + 24);
  if (v13 == 36 || v13 == 12) {
    uint64_t v15 = a4;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v13 == 35 || v13 == 11) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = 0;
  }
  if (!(v10 | v12) || !(v15 | v17)) {
    return 0;
  }
  if (v10)
  {
    uint64_t v24 = *(void *)(v10 + 80);
    uint64_t v26 = *(void **)(v24 + 32);
    uint64_t v25 = (llvm::detail::DoubleAPFloat *)(v24 + 32);
    if (v26 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v25, (llvm::APInt *)&v57);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v25, (uint64_t)&v57);
    }
    if (v58 >= 0x41) {
      uint64_t v27 = (uint64_t *)v57;
    }
    else {
      uint64_t v27 = (uint64_t *)&v57;
    }
    uint64_t v28 = *v27;
    if (v58 >= 0x41 && v57) {
      MEMORY[0x1D25D9CB0]();
    }
  }
  else
  {
    uint64_t v29 = *(void *)(v12 + 80);
    uint64_t v30 = (unsigned __int16 *)(v29 + 24);
    if (*(_DWORD *)(v29 + 32) >= 0x41u) {
      uint64_t v30 = *(unsigned __int16 **)v30;
    }
    uint64_t v28 = *v30;
  }
  if (v15)
  {
    uint64_t v31 = *(void *)(v15 + 80);
    uint64_t v33 = *(void **)(v31 + 32);
    uint64_t v32 = (llvm::detail::DoubleAPFloat *)(v31 + 32);
    if (v33 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v32, (llvm::APInt *)&v57);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v32, (uint64_t)&v57);
    }
    if (v58 >= 0x41) {
      int v34 = (uint64_t *)v57;
    }
    else {
      int v34 = (uint64_t *)&v57;
    }
    uint64_t v35 = *v34;
    if (v58 >= 0x41 && v57) {
      MEMORY[0x1D25D9CB0]();
    }
  }
  else
  {
    uint64_t v36 = *(void *)(v17 + 80);
    uint64_t v37 = (unsigned __int16 *)(v36 + 24);
    if (*(_DWORD *)(v36 + 32) >= 0x41u) {
      uint64_t v37 = *(unsigned __int16 **)v37;
    }
    uint64_t v35 = *v37;
  }
  char v38 = sub_1CD7EBF14(*(void *)(a1 + 296), v28 + (v35 << 16), a6, (llvm *)6, 0, 1, 0);
  uint64_t v40 = v39;
  *(void *)&long long v54 = v38;
  *((void *)&v54 + 1) = v39;
  uint64_t v41 = *(void *)(a1 + 296);
  uint64_t v42 = *(unsigned __int8 **)a6;
  BOOL v52 = v42;
  uint64_t v43 = v41;
  if (v42)
  {
    llvm::MetadataTracking::track((uint64_t)&v52, v42, 2);
    uint64_t v43 = *(void *)(a1 + 296);
  }
  int v53 = *((_DWORD *)a6 + 2);
  *(void *)&long long v51 = sub_1CD7EEB94(v43, 0, (llvm *)5, 0);
  *((void *)&v51 + 1) = v44;
  uint64_t v50 = 0;
  uint64_t v57 = v59;
  uint64_t v58 = 0x700000000;
  uint64_t v55 = 0;
  char v56 = 6;
  sub_1CD3D5EA0(v41, (uint64_t)&v57, (uint64_t)&v55);
  if (v58 >= HIDWORD(v58)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v45 = (uint64_t **)((char *)v57 + 16 * v58);
  const char *v45 = v38;
  v45[1] = v40;
  LODWORD(v58) = v58 + 1;
  sub_1CD3D5F48(v41, (uint64_t)&v57, &v54);
  sub_1CD3D5F48(v41, (uint64_t)&v57, &v54);
  sub_1CD3D5F48(v41, (uint64_t)&v57, &v51);
  sub_1CB8B55E4(v41, (uint64_t)&v57, (uint64_t)&v50);
  int v18 = sub_1CD801450(v41, 1445, (uint64_t)&v52, a7, a8, (uint64_t *)v57, v58);
  if (v57 != v59) {
    free(v57);
  }
  if (v52)
  {
    int v46 = *v52;
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        uint64_t v49 = v52;
      }
      else {
        uint64_t v49 = 0;
      }
      if ((v46 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v48 = (unint64_t)(v49 + 8);
LABEL_70:
        uint64_t v57 = &v52;
        sub_1CC5FA668(v48 + 16, &v57);
        return v18;
      }
      if (v46 == 3) {
        *((void *)v52 + 1) = 0;
      }
    }
    else if ((v52[1] & 0x7F) == 2 || *((_DWORD *)v52 + 3))
    {
      uint64_t v47 = *((void *)v52 + 2);
      if ((v47 & 4) != 0)
      {
        unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
        if (v48) {
          goto LABEL_70;
        }
      }
    }
  }
  return v18;
}

BOOL sub_1CB8B2278(int a1)
{
  BOOL result = 1;
  if (((a1 - 96) > 0x2D || ((1 << (a1 - 96)) & 0x200000000005) == 0)
    && ((a1 - 231) > 0xA || ((1 << (a1 + 25)) & 0x409) == 0))
  {
    return (a1 - 424) < 3;
  }
  return result;
}

uint64_t sub_1CB8B22D8(uint64_t a1, void **a2, _DWORD *a3, int *a4)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  int v4 = *(unsigned __int16 *)(*(void *)a3 + 24);
  if (v4 != 35 && v4 != 11) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)a3 + 80);
  uint64_t v9 = (unint64_t *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u) {
    uint64_t v9 = (unint64_t *)*v9;
  }
  uint64_t v10 = *a2;
  int v11 = *((unsigned __int16 *)*a2 + 12);
  if ((v11 - 173) < 0xFFFFFFFE) {
    return 0;
  }
  if (*(unsigned char *)(v10[5] + 16 * *((unsigned int *)a2 + 2)) != 4) {
    return 0;
  }
  unint64_t v12 = *v9;
  if (*a4 != 22 && *a4 != 17) {
    return 0;
  }
  if (v12 > 1) {
    return 0;
  }
  uint64_t v14 = v10[6];
  if (v14)
  {
    int v15 = 3;
    do
    {
      int v16 = *(unsigned __int16 *)(*(void *)(v14 + 16) + 24);
      if (v16 != 260 && v16 != 192) {
        return 0;
      }
      if (!--v15) {
        return 0;
      }
      uint64_t v14 = *(void *)(v14 + 32);
    }
    while (v14);
  }
  uint64_t result = 0;
  uint64_t v17 = (BOOL *)v10[4];
  uint64_t v18 = *v17;
  int v19 = *(unsigned __int16 *)(*v17 + 24);
  if (v19 != 50 && v19 != 437 && v19 != 65527)
  {
    uint64_t v21 = *(void *)(v18 + 48);
    if (v21)
    {
      while (*(_WORD *)(*(void *)(v21 + 16) + 24) != 49)
      {
        uint64_t v21 = *(void *)(v21 + 32);
        if (!v21) {
          goto LABEL_29;
        }
      }
      return 0;
    }
LABEL_29:
    uint64_t result = 0;
    uint64_t v22 = v17[5];
    int v23 = *(unsigned __int16 *)(v22 + 24);
    if (v23 != 50 && v23 != 437 && v23 != 65527)
    {
      uint64_t v25 = *(void *)(v22 + 48);
      if (v25)
      {
        while (*(_WORD *)(*(void *)(v25 + 16) + 24) != 49)
        {
          uint64_t v25 = *(void *)(v25 + 32);
          if (!v25) {
            goto LABEL_37;
          }
        }
        return 0;
      }
LABEL_37:
      for (uint64_t i = 0; i != 8; i += 4)
      {
        uint64_t v27 = &(&v71)[i];
        *((_DWORD *)v27 + 2) = 1;
        *uint64_t v27 = 0;
        *((_DWORD *)v27 + 6) = 1;
        v27[2] = 0;
      }
      sub_1CD7F121C(*(void *)(a1 + 296), v18, v17[1], 0, (uint64_t)&v66);
      if (v72 >= 0x41 && v71) {
        MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
      }
      uint64_t v28 = v66;
      int64_t v71 = v66;
      unsigned int v29 = v67;
      unsigned int v72 = v67;
      unsigned int v67 = 0;
      if (v74 >= 0x41 && v73)
      {
        MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
        uint64_t v73 = v68;
        unsigned int v74 = v69;
        unsigned int v69 = 0;
        if (v67 >= 0x41 && v66) {
          MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v73 = v68;
        unsigned int v74 = v69;
      }
      sub_1CD7F121C(*(void *)(a1 + 296), *(void *)(*((void *)*a2 + 4) + 40), *(void *)(*((void *)*a2 + 4) + 48), 0, (uint64_t)&v66);
      if (v76 >= 0x41 && v75) {
        MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
      }
      uint64_t v31 = v66;
      int v75 = v66;
      unsigned int v32 = v67;
      unsigned int v76 = v67;
      unsigned int v67 = 0;
      if (v78[0] >= 0x41u && v77)
      {
        uint64_t v63 = v66;
        unsigned int v62 = v32;
        MEMORY[0x1D25D9CB0](v77, 0x1000C8000313F17);
        unsigned int v32 = v62;
        uint64_t v31 = v63;
        uint64_t v77 = v68;
        v78[0] = v69;
        unsigned int v69 = 0;
        if (v67 >= 0x41 && v66)
        {
          MEMORY[0x1D25D9CB0](v66, 0x1000C8000313F17);
          unsigned int v32 = v62;
          uint64_t v31 = v63;
        }
      }
      else
      {
        uint64_t v77 = v68;
        v78[0] = v69;
      }
      uint64_t v33 = &v71;
      if (v29 >= 0x41) {
        uint64_t v33 = v28;
      }
      if (*v33 != 65534) {
        goto LABEL_52;
      }
      if (v32 < 0x41) {
        uint64_t v31 = (unsigned __int8 *)&v75;
      }
      if (*(void *)v31 != 65534)
      {
LABEL_52:
        uint64_t result = 0;
        if (v11 != 172 || v12) {
          goto LABEL_53;
        }
      }
      int v39 = (unsigned int *)*a2;
      uint64_t v40 = (unsigned __int8 *)*((void *)*a2 + 8);
      uint64_t v66 = v40;
      uint64_t v41 = v39;
      if (v40)
      {
        llvm::MetadataTracking::track((uint64_t)&v66, v40, 2);
        uint64_t v41 = *a2;
      }
      unsigned int v67 = v39[15];
      uint64_t v42 = *(void *)(a1 + 296);
      uint64_t v43 = (uint64_t *)*((void *)v41 + 4);
      uint64_t v44 = *v43;
      uint64_t v45 = v43[1];
      uint64_t v46 = v43[5];
      uint64_t v47 = v43[6];
      uint64_t v48 = *(void *)(v42 + 832);
      if (v48) {
        LOWORD(v48) = *(_WORD *)(v48 + 8);
      }
      uint64_t v49 = sub_1CCFDED5C(v42, 146, (const llvm::APInt *)&v66, (llvm *)0x26, 0, v44, v45, v30, v46, v47, v48);
      __int16 v50 = 0;
      *a2 = v49;
      *((_DWORD *)a2 + 2) = v51;
      BOOL v52 = *(llvm::APFloatBase **)(a1 + 296);
      uint64_t v53 = *((void *)v52 + 104);
      if (v53) {
        __int16 v50 = *(_WORD *)(v53 + 8);
      }
      long long v54 = sub_1CD7F3564(v52, (const char *)0xD8, (uint64_t)&v66, (llvm *)5, 0, (uint64_t)v49, a2[1], v50);
      *a2 = v54;
      *((_DWORD *)a2 + 2) = v55;
      if (v11 == 172 && v12 == 1 || v11 == 171 && !v12)
      {
        char v56 = (void *)(v54[5] + 16 * v55);
        *a4 = sub_1CD7E9F74(*a4, *v56, v56[1]);
        v12 ^= 1uLL;
      }
      *(void *)a3 = sub_1CD7EBF14(*(void *)(a1 + 296), 65537 * v12, (const llvm::APInt *)&v66, (llvm *)5, 0, 0, 0);
      a3[2] = v57;
      if (v66)
      {
        int v58 = *v66;
        if ((v58 - 4) > 0x1E)
        {
          if ((v58 - 3) >= 0xFFFFFFFE) {
            unsigned int v59 = v66;
          }
          else {
            unsigned int v59 = 0;
          }
          if ((v58 - 3) < 0xFFFFFFFE)
          {
            if (v58 == 3) {
              *((void *)v66 + 1) = 0;
            }
            goto LABEL_77;
          }
          unint64_t v60 = (unint64_t)(v59 + 8);
        }
        else
        {
          if ((v66[1] & 0x7F) != 2 && !*((_DWORD *)v66 + 3)) {
            goto LABEL_77;
          }
          uint64_t v61 = *((void *)v66 + 2);
          if ((v61 & 4) == 0) {
            goto LABEL_77;
          }
          unint64_t v60 = v61 & 0xFFFFFFFFFFFFFFF8;
          if (!v60) {
            goto LABEL_77;
          }
        }
        int v70 = &v66;
        sub_1CC5FA668(v60 + 16, &v70);
      }
LABEL_77:
      uint64_t result = 1;
LABEL_53:
      for (unint64_t j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
      {
        uint64_t v35 = &(&v71)[j / 2];
        if (v78[j] >= 0x41u && v35[6])
        {
          uint64_t v36 = result;
          MEMORY[0x1D25D9CB0](v35[6], 0x1000C8000313F17);
          uint64_t result = v36;
        }
        if (*((_DWORD *)v35 + 10) >= 0x41u)
        {
          uint64_t v37 = v35[4];
          if (v37)
          {
            uint64_t v38 = result;
            MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
            uint64_t result = v38;
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CB8B28D4(llvm *a1, uint64_t a2, uint64_t a3, int a4, const llvm::APInt *a5, void *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  v18[0] = (uint64_t)sub_1CD7EBF14((uint64_t)a6, 1847, a5, (llvm *)5, 0, 1, 0);
  v18[1] = v12;
  v18[2] = a3;
  int v19 = a4;
  int v13 = sub_1CD7ECDC4((uint64_t)a6, (uint64_t)a5, (BOOL)a1, a2, 1, 0.0);
  uint64_t v14 = 0;
  char v20 = v13;
  uint64_t v21 = v15;
  uint64_t v16 = a6[104];
  if (v16) {
    uint64_t v14 = *(unsigned __int16 *)(v16 + 8);
  }
  return sub_1CD7FF4E8(a6, (const char *)0x2E, a5, a1, a2, v18, 3, v14);
}

void sub_1CB8B29C8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v469 = *MEMORY[0x1E4F143B8];
  uint64_t v404 = **(void **)(a1 + 280);
  uint64_t v8 = *(void *)(a1 + 480);
  LODWORD(v418) = *(unsigned __int8 *)(v8 + 280);
  int v416 = *(unsigned __int8 *)(v8 + 281);
  sub_1CD430D9C((uint64_t)v428, a3, 0);
  uint64_t v9 = *(unsigned __int8 **)(a2 + 64);
  int v426 = v9;
  if (v9) {
    llvm::MetadataTracking::track((uint64_t)&v426, v9, 2);
  }
  int v427 = *(_DWORD *)(a2 + 60);
  uint64_t v10 = *(void *)(a2 + 32);
  int v11 = (uint64_t *)(v10 + 40 * v434);
  uint64_t v12 = *v11;
  int v13 = *(void **)(*v11 + 32);
  uint64_t v14 = v13[5];
  uint64_t v15 = v13[15];
  int v16 = *(unsigned __int16 *)(v14 + 24);
  BOOL v17 = v16 == 35 || v16 == 11;
  if (!v17) {
    goto LABEL_19;
  }
  uint64_t v18 = *(void *)(v14 + 80);
  int v19 = (void *)(v18 + 24);
  if (*(_DWORD *)(v18 + 32) >= 0x41u) {
    int v19 = (void *)*v19;
  }
  if (*v19)
  {
LABEL_19:
    int v24 = 1;
  }
  else
  {
    int v20 = *(unsigned __int16 *)(v15 + 24);
    if (v20 == 35 || v20 == 11)
    {
      uint64_t v22 = *(void *)(v15 + 80);
      int v23 = (void *)(v22 + 24);
      if (*(_DWORD *)(v22 + 32) >= 0x41u) {
        int v23 = (void *)*v23;
      }
      BOOL v25 = *v23 == 0;
    }
    else
    {
      BOOL v25 = 0;
    }
    int v24 = !v25;
  }
  uint64_t v26 = *(void *)(*(void *)(v10 + 40 * v435) + 80);
  uint64_t v27 = (unsigned int *)(v26 + 24);
  if (*(_DWORD *)(v26 + 32) >= 0x41u) {
    uint64_t v27 = *(unsigned int **)v27;
  }
  uint64_t v398 = v13[6];
  uint64_t v399 = v13[16];
  uint64_t v28 = *v27;
  unsigned int v29 = (uint64_t *)(v10 + 40 * v436);
  uint64_t v30 = *(void *)(v10 + 40 * v442);
  uint64_t v407 = *(void *)(v10 + 40 * v443);
  uint64_t v31 = *(void *)(v10 + 40 * v444);
  uint64_t v32 = *v29;
  uint64_t v33 = (uint64_t *)(v10 + 40 * v445);
  uint64_t v396 = v33[1];
  uint64_t v397 = *v33;
  LODWORD(v415) = v24;
  int v409 = a4;
  long long v408 = *(_OWORD *)(v10 + 40 * v431);
  uint64_t v395 = v28;
  uint64_t v414 = v29[1];
  int v393 = a3;
  if (v428[0])
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    unsigned int v413 = 0;
    uint64_t v410 = 0;
    goto LABEL_77;
  }
  uint64_t v392 = *(void *)(v10 + 40 * v444);
  uint64_t v34 = v11[1];
  uint64_t v35 = *(void *)(*(void *)(v10 + 40 * v437) + 80);
  uint64_t v36 = (void *)(v35 + 24);
  uint64_t v389 = v14;
  if (*(_DWORD *)(v35 + 32) >= 0x41u) {
    uint64_t v36 = (void *)*v36;
  }
  uint64_t v390 = *(void *)(v10 + 40 * v442);
  uint64_t v37 = (void *)*v36;
  unsigned int v413 = v37 != 0;
  uint64_t v38 = (unsigned int *)(v10 + 40 * v438);
  uint64_t v39 = *(void *)v38;
  uint64_t v40 = (unsigned char *)v38[2];
  int v41 = *(unsigned __int16 *)(*(void *)v38 + 24);
  uint64_t v386 = a2;
  if (v41 == 36 || v41 == 12)
  {
    uint64_t v42 = *(void *)(v39 + 80);
    uint64_t v43 = v15;
    if (*(_UNKNOWN **)(v42 + 32) == &unk_1CFB2E344) {
      uint64_t v44 = *(void *)(v42 + 40);
    }
    else {
      uint64_t v44 = v42 + 24;
    }
    char v47 = 0;
    if ((*(unsigned char *)(v44 + 28) & 7) == 3 && v37 == 0) {
      int v49 = v24;
    }
    else {
      int v49 = 1;
    }
    uint64_t v50 = v39;
    if (v24) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v43 = v15;
    uint64_t v50 = 0;
    char v47 = 1;
    int v49 = 1;
    if (v24)
    {
LABEL_39:
      uint64_t v51 = v28;
      BOOL v52 = v40;
      int v53 = sub_1CB8B5CDC(v12, v34, 0);
      uint64_t v40 = v52;
      uint64_t v28 = v51;
      goto LABEL_42;
    }
  }
  int v53 = 1;
LABEL_42:
  if ((v49 & v53) != 1)
  {
    long long v54 = 0;
    uint64_t v15 = v43;
    goto LABEL_51;
  }
  if ((v47 & 1) == 0)
  {
    uint64_t v412 = v40;
    uint64_t v58 = *(void *)(a1 + 296);
    uint64_t v59 = *(void *)(v50 + 80);
    uint64_t v61 = *(void **)(v59 + 32);
    unint64_t v60 = (uint64_t *)(v59 + 32);
    if (v61 == &unk_1CFB2E344) {
LABEL_531:
    }
      llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)v60, (llvm::APInt *)&v451);
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v60, (uint64_t)&v451);
    }
    if (v452 >= 0x41) {
      unsigned int v62 = (uint64_t *)v451;
    }
    else {
      unsigned int v62 = (uint64_t *)&v451;
    }
    uint64_t v63 = *v62;
    uint64_t v64 = *v62;
    if (v452 >= 0x41 && v451) {
      MEMORY[0x1D25D9CB0]();
    }
    if (v416) {
      int v65 = 2;
    }
    else {
      int v65 = 4;
    }
    uint64_t v66 = *(void *)(*(void *)(v58 + 40) + 344);
    uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v66 + 224))(v66, v64);
    if ((v67 & 0xFF00000000) != 0)
    {
      uint64_t v69 = (2 * v67);
    }
    else
    {
      uint64_t v411 = v63;
      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v66 + 376))(v66, 1);
      if (v68 == -1)
      {
        long long v54 = 0;
        uint64_t v28 = v395;
        uint64_t v15 = v43;
        uint64_t v14 = v389;
LABEL_69:
        a2 = v386;
        uint64_t v31 = v392;
        uint64_t v30 = v390;
LABEL_70:
        uint64_t v40 = v412;
        goto LABEL_71;
      }
      int v70 = v68;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v66 + 232))(v66, v64, v68);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v66 + 328))(v66, v411);
      uint64_t v69 = (2 * v70);
    }
    long long v54 = sub_1CD7ED9FC(v58, 64, (llvm *)0xA, 0, v69, v65);
    uint64_t v15 = v43;
    uint64_t v14 = v389;
    uint64_t v28 = v395;
    goto LABEL_69;
  }
  long long v54 = 0;
  uint64_t v15 = v43;
  if (!v416)
  {
    BOOL v17 = v41 == 395;
    a2 = v386;
    uint64_t v14 = v389;
    uint64_t v30 = v390;
    uint64_t v31 = v392;
    if (!v17) {
      goto LABEL_71;
    }
    uint64_t v55 = *(void *)(**(void **)(v39 + 32) + 80);
    char v56 = (void *)(v55 + 24);
    uint64_t v412 = v40;
    uint64_t v57 = v28;
    if (*(_DWORD *)(v55 + 32) >= 0x41u) {
      char v56 = (void *)*v56;
    }
    long long v54 = sub_1CD7ED9FC(*(void *)(a1 + 296), 64, (llvm *)0xA, 0, *v56 >> 1, 4);
    uint64_t v28 = v57;
    goto LABEL_70;
  }
LABEL_51:
  a2 = v386;
  uint64_t v14 = v389;
  uint64_t v30 = v390;
  uint64_t v31 = v392;
LABEL_71:
  uint64_t v410 = v54;
  BOOL v71 = v54 == 0;
  BOOL v72 = (v49 & v71) == 0;
  if ((v49 & v71) != 0) {
    uint64_t v45 = v39;
  }
  else {
    uint64_t v45 = 0;
  }
  if (v72) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = v40;
  }
LABEL_77:
  v464 = &v466;
  uint64_t v465 = 0x400000000;
  uint64_t v412 = v463;
  __src = v463;
  uint64_t v462 = 0x400000000;
  if (v416) {
    BOOL v73 = 0;
  }
  else {
    BOOL v73 = v28 == 0;
  }
  int v75 = v73 && *(unsigned char *)(*(void *)(a1 + 480) + 306) == 0;
  int v76 = *(unsigned __int16 *)(v32 + 24);
  if (v76 != 65517)
  {
    if (!v75) {
      goto LABEL_98;
    }
    if (v76 == 99)
    {
      int v104 = *(long long **)(v32 + 32);
      long long v105 = *(long long *)((char *)v104 + 40);
      long long v466 = *v104;
      long long v467 = v105;
      int v91 = 2;
LABEL_121:
      uint64_t v394 = 1;
      goto LABEL_133;
    }
    if (v76 == 98 && (unsigned int v89 = *(long long **)(v32 + 32), v90 = *((void *)v89 + 5), *(_WORD *)(v90 + 24) == 423))
    {
      long long v466 = *v89;
      uint64_t v394 = 1;
      LODWORD(v465) = 1;
      long long v467 = *(_OWORD *)*(void *)(v90 + 32);
      int v91 = 2;
    }
    else
    {
LABEL_98:
      uint64_t v394 = 0;
      *(void *)&long long v466 = v32;
      *((void *)&v466 + 1) = v414;
      int v91 = 1;
    }
LABEL_133:
    LODWORD(v465) = v91;
    goto LABEL_135;
  }
  int v77 = *(unsigned __int16 *)(v32 + 56);
  uint64_t v78 = *(void *)(v32 + 32);
  uint64_t v79 = *(void *)(v78 + 40);
  uint64_t v80 = *(void *)(v78 + 120);
  if (v77 != 7)
  {
    uint64_t v81 = 0;
    unsigned int v82 = 0;
    char v92 = 1;
    goto LABEL_108;
  }
  uint64_t v81 = *(void *)(v78 + 200);
  unsigned int v82 = *(_DWORD *)(v78 + 208);
  int v83 = *(unsigned __int16 *)(v79 + 24);
  int v84 = *(unsigned __int16 *)(v81 + 24);
  if (v83 == 98)
  {
    if (v84 == 98)
    {
      uint64_t v85 = *(void *)(v79 + 32);
      uint64_t v86 = *(void *)(v81 + 32);
      uint64_t v87 = *(void *)(v85 + 40);
      if (v87 == *(void *)(v86 + 40) && *(_DWORD *)(v85 + 48) == *(_DWORD *)(v86 + 48))
      {
        BOOL v88 = *(unsigned __int16 *)(v87 + 24) == 423;
        goto LABEL_104;
      }
    }
    goto LABEL_107;
  }
  char v92 = 0;
  if (v83 == 99 && v84 == 99)
  {
    uint64_t v93 = *(void *)(v79 + 32);
    uint64_t v94 = *(void *)(v81 + 32);
    if (*(void *)(v93 + 40) == *(void *)(v94 + 40))
    {
      BOOL v88 = *(_DWORD *)(v93 + 48) == *(_DWORD *)(v94 + 48);
LABEL_104:
      char v92 = v88;
      goto LABEL_108;
    }
LABEL_107:
    char v92 = 0;
  }
LABEL_108:
  uint64_t v95 = *(void *)(v78 + 48);
  uint64_t v96 = *(void *)(v78 + 128);
  if (v75)
  {
    int v97 = *(unsigned __int16 *)(v79 + 24);
    if (v97 == 99)
    {
      if (*(_WORD *)(v80 + 24) == 99)
      {
        v106 = *(long long **)(v79 + 32);
        uint64_t v107 = *(long long **)(v80 + 32);
        if (*((void *)v106 + 5) == *((void *)v107 + 5))
        {
          char v108 = v92 ^ 1;
          if (*((_DWORD *)v106 + 12) != *((_DWORD *)v107 + 12)) {
            char v108 = 1;
          }
          if ((v108 & 1) == 0)
          {
            long long v466 = *v106;
            LODWORD(v465) = 1;
            long long v467 = *v107;
            unsigned int v102 = 2;
            LODWORD(v465) = 2;
            if (v77 == 7)
            {
              long long v468 = *(_OWORD *)*(void *)(v81 + 32);
              unsigned int v102 = 3;
            }
            long long v103 = *(_OWORD *)(*(void *)(v79 + 32) + 40);
            goto LABEL_130;
          }
        }
      }
    }
    else if (v97 == 98 && *(_WORD *)(v80 + 24) == 98)
    {
      uint64_t v98 = *(long long **)(v79 + 32);
      uint64_t v99 = *(long long **)(v80 + 32);
      uint64_t v100 = *((void *)v98 + 5);
      if (v100 == *((void *)v99 + 5) && *((_DWORD *)v98 + 12) == *((_DWORD *)v99 + 12))
      {
        char v101 = v92 ^ 1;
        if (*(_WORD *)(v100 + 24) != 423) {
          char v101 = 1;
        }
        if ((v101 & 1) == 0)
        {
          long long v466 = *v98;
          LODWORD(v465) = 1;
          long long v467 = *v99;
          unsigned int v102 = 2;
          LODWORD(v465) = 2;
          if (v77 == 7)
          {
            long long v468 = *(_OWORD *)*(void *)(v81 + 32);
            unsigned int v102 = 3;
            LODWORD(v465) = 3;
          }
          long long v103 = *(_OWORD *)*(void *)(*(void *)(*(void *)(v79 + 32) + 40) + 32);
LABEL_130:
          *(&v466 + v102) = v103;
          int v91 = v102 + 1;
          goto LABEL_121;
        }
      }
    }
  }
  *(void *)&long long v466 = v79;
  *((void *)&v466 + 1) = v95;
  *(void *)&long long v467 = v80;
  *((void *)&v467 + 1) = v96;
  LODWORD(v465) = 2;
  if (v77 == 7)
  {
    uint64_t v394 = 0;
    *(void *)&long long v468 = v81;
    *((void *)&v468 + 1) = v82;
    int v91 = 3;
    goto LABEL_133;
  }
  uint64_t v394 = 0;
LABEL_135:
  uint64_t v109 = (void *)(*(void *)(a2 + 32) + 40 * v432);
  uint64_t v110 = *(void *)(*(void *)(*v109 + 32) + 40);
  if (*(_WORD *)(v110 + 24) == 11)
  {
    uint64_t v111 = *(void *)(v110 + 80);
    char v112 = (unint64_t *)(v111 + 24);
    if (*(_DWORD *)(v111 + 32) >= 0x41u) {
      char v112 = (unint64_t *)*v112;
    }
    unint64_t v113 = *v112;
  }
  else
  {
    unint64_t v113 = *(int *)(v110 + 80);
  }
  uint64_t v401 = v109[1];
  if (v418)
  {
    uint64_t v114 = 97;
    int v115 = 16;
  }
  else
  {
    uint64_t v114 = 174;
    int v115 = 24;
  }
  uint64_t v406 = sub_1CD7ED9FC(*(void *)(a1 + 296), 64, (llvm *)v114, 0, v113 >> 1, v115);
  unsigned int v400 = v116;
  int v117 = (uint64_t *)(*(void *)(a2 + 32) + 40 * v433);
  uint64_t v119 = *v117;
  uint64_t v118 = v117[1];
  uint64_t v120 = *(void *)(*(void *)(*(void *)(v119 + 32) + 40) + 80);
  v121 = (void *)(v120 + 24);
  if (*(_DWORD *)(v120 + 32) >= 0x41u) {
    v121 = (void *)*v121;
  }
  uint64_t v122 = *(void *)(a1 + 296);
  uint64_t v123 = *v121 >> 1;
  unint64_t v124 = v118 & 0xFFFFFFFF00000000;
  if (v418)
  {
    v405 = sub_1CD7ED9FC(v122, 64, (llvm *)0x61, 0, v123, 16);
    unint64_t v403 = v125 | v124;
    int v126 = v428[0];
    BOOL v127 = v428[0] == 0;
    char v128 = v413;
    if (v428[0])
    {
      char v128 = 1;
      int v129 = 3;
    }
    else
    {
      int v129 = 2;
    }
    unsigned int v413 = v129;
    if (v128)
    {
      BOOL v391 = 0;
    }
    else
    {
      int v126 = 0;
      BOOL v127 = 0;
      BOOL v391 = (v45 | (unint64_t)v410) != 0;
      unsigned int v413 = v391;
    }
    int v131 = v415;
    if (v45) {
      goto LABEL_173;
    }
    goto LABEL_166;
  }
  v405 = sub_1CD7ED9FC(v122, 64, (llvm *)0x5F, 0, v123, 8);
  unint64_t v403 = v130 | v124;
  if (!v428[0])
  {
    int v131 = v415;
    if (v413)
    {
      int v126 = 0;
      BOOL v391 = 0;
      BOOL v127 = v45 == 0;
      if (v45) {
        int v132 = 6;
      }
      else {
        int v132 = 2;
      }
    }
    else
    {
      if (!(v45 | (unint64_t)v410))
      {
        unsigned int v413 = 0;
        BOOL v127 = 0;
        BOOL v391 = 0;
        goto LABEL_190;
      }
      int v126 = 0;
      BOOL v127 = 0;
      BOOL v391 = v45 == 0;
      if (v45) {
        int v132 = 5;
      }
      else {
        int v132 = 1;
      }
    }
    unsigned int v413 = v132;
    if (v45) {
      goto LABEL_173;
    }
LABEL_166:
    if (!v126) {
      goto LABEL_190;
    }
    goto LABEL_167;
  }
  BOOL v127 = 0;
  BOOL v391 = 0;
  unsigned int v413 = 7;
  int v131 = v415;
  if (v45)
  {
LABEL_173:
    if (v462 >= HIDWORD(v462)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v138 = (char *)__src + 16 * v462;
    *uint64_t v138 = v45;
    v138[1] = v46;
    LODWORD(v462) = v462 + 1;
    goto LABEL_190;
  }
LABEL_167:
  uint64_t v133 = *(void *)(*(void *)(a2 + 32) + 40 * v439);
  unint64_t v134 = *(unsigned __int16 *)(v133 + 56);
  if (v134 >= 2)
  {
    unsigned int v135 = v462;
    unint64_t v136 = 1;
    uint64_t v137 = 40;
    do
    {
      if (v135 >= HIDWORD(v462)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)__src + v135) = *(_OWORD *)(*(void *)(v133 + 32) + v137);
      unsigned int v135 = v462 + 1;
      LODWORD(v462) = v462 + 1;
      v136 += 2;
      v137 += 80;
    }
    while (v136 < v134);
  }
  unsigned int v139 = v429;
  if (v429 > 1)
  {
    uint64_t v140 = *(void *)(*(void *)(a2 + 32) + 40 * v440);
    unint64_t v141 = *(unsigned __int16 *)(v140 + 56);
    if (v141 >= 2)
    {
      unsigned int v142 = v462;
      unint64_t v143 = 1;
      uint64_t v144 = 40;
      do
      {
        if (v142 >= HIDWORD(v462)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)__src + v142) = *(_OWORD *)(*(void *)(v140 + 32) + v144);
        unsigned int v142 = v462 + 1;
        LODWORD(v462) = v462 + 1;
        v143 += 2;
        v144 += 80;
      }
      while (v143 < v141);
      unsigned int v139 = v429;
    }
    if (v139 >= 3)
    {
      uint64_t v145 = *(void *)(*(void *)(a2 + 32) + 40 * v441);
      unint64_t v146 = *(unsigned __int16 *)(v145 + 56);
      if (v146 >= 2)
      {
        unsigned int v147 = v462;
        unint64_t v148 = 1;
        uint64_t v149 = 40;
        do
        {
          if (v147 >= HIDWORD(v462)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)__src + v147) = *(_OWORD *)(*(void *)(v145 + 32) + v149);
          unsigned int v147 = v462 + 1;
          LODWORD(v462) = v462 + 1;
          v148 += 2;
          v149 += 80;
        }
        while (v148 < v146);
      }
    }
  }
LABEL_190:
  LODWORD(v392) = v127;
  if (v131)
  {
    if (v462 >= HIDWORD(v462)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v150 = (char *)__src + 16 * v462;
    *uint64_t v150 = v14;
    v150[1] = v398;
    unsigned int v151 = v462 + 1;
    LODWORD(v462) = v151;
    if (v151 >= HIDWORD(v462)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v152 = (uint64_t *)((char *)__src + 16 * v151);
    *uint64_t v152 = v15;
    v152[1] = v399;
    LODWORD(v462) = v462 + 1;
  }
  uint64_t v153 = *(void *)(v407 + 80);
  v154 = (unsigned int *)(v153 + 24);
  if (*(_DWORD *)(v153 + 32) >= 0x41u) {
    v154 = *(unsigned int **)v154;
  }
  uint64_t v155 = *v154;
  uint64_t v156 = *(void *)(v30 + 80);
  uint64_t v157 = (unsigned int *)(v156 + 24);
  if (*(_DWORD *)(v156 + 32) >= 0x41u) {
    uint64_t v157 = *(unsigned int **)v157;
  }
  uint64_t v158 = *v157;
  uint64_t v159 = *(void *)(v31 + 80);
  uint64_t v160 = (unsigned int *)(v159 + 24);
  uint64_t v161 = a2;
  if (*(_DWORD *)(v159 + 32) >= 0x41u) {
    uint64_t v160 = *(unsigned int **)v160;
  }
  uint64_t v407 = *v160;
  BOOL v162 = (v155 | v158) != 0;
  if (v418 && v155 | v158)
  {
    if (v462 >= HIDWORD(v462)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v163 = (char *)__src + 16 * v462;
    void *v163 = v397;
    v163[1] = v396;
    LODWORD(v462) = v462 + 1;
  }
  uint64_t v387 = v155;
  uint64_t v164 = *(void *)(a1 + 480);
  if (v430)
  {
    LODWORD(v451) = 0;
    BOOL v174 = sub_1CD3CA314(v164, v404, "SMPCMode", &v451);
    int v175 = (int)v451;
    if (!v174) {
      int v175 = 0;
    }
    LODWORD(v389) = v175;
    uint64_t v176 = *(void *)(a1 + 480);
    if (*(unsigned char *)(v176 + 287))
    {
      LODWORD(v451) = 0;
      if (sub_1CD3CA314(v176, v404, "SMPSLCMode", &v451)) {
        int v166 = (int)v451;
      }
      else {
        int v166 = 1;
      }
    }
    else
    {
      int v166 = 0;
    }
  }
  else
  {
    LODWORD(v451) = 0;
    BOOL v165 = sub_1CD3CA314(v164, v404, "SMPWriteCMode", &v451);
    int v166 = 0;
    int v167 = (int)v451;
    if (!v165) {
      int v167 = 2;
    }
    LODWORD(v389) = v167;
    uint64_t v168 = *(void *)(a1 + 480);
    if (*(unsigned char *)(v168 + 287))
    {
      LODWORD(v451) = 0;
      if (sub_1CD3CA314(v168, v404, "SMPWriteSLCMode", &v451)) {
        int v166 = (int)v451;
      }
      else {
        int v166 = 1;
      }
    }
    uint64_t v169 = *(void *)(*(void *)(v161 + 32) + 40 * v446);
    unint64_t v170 = *(unsigned __int16 *)(v169 + 56);
    if (v170 >= 2)
    {
      unsigned int v171 = v462;
      unint64_t v172 = 1;
      uint64_t v173 = 40;
      do
      {
        if (v171 >= HIDWORD(v462)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)__src + v171) = *(_OWORD *)(*(void *)(v169 + 32) + v173);
        unsigned int v171 = v462 + 1;
        LODWORD(v462) = v462 + 1;
        v172 += 2;
        v173 += 80;
      }
      while (v172 < v170);
    }
  }
  if (!v416)
  {
    sub_1CD3D61B4((unsigned int *)&v464, __src, (unsigned char *)__src + 16 * v462);
    LODWORD(v462) = 0;
  }
  uint64_t v177 = sub_1CB8B5E0C(*(void *)(a1 + 296), (const llvm::APInt *)&v426, (uint64_t)&v464, 0xAEu);
  unsigned int v180 = v179;
  LODWORD(v390) = v166;
  uint64_t v388 = v158;
  uint64_t v399 = v162;
  uint64_t v58 = (uint64_t)v177;
  if (v447 == 1)
  {
    uint64_t v181 = v161;
    uint64_t v404 = *(void *)(v161 + 40);
    uint64_t v398 = *(unsigned __int16 *)(v161 + 58);
    unsigned int v183 = v400;
    uint64_t v182 = v401;
  }
  else
  {
    uint64_t v404 = sub_1CD7F95FC(*(void *)(a1 + 296), 174, 0, 1, 0);
    uint64_t v398 = v184;
    unsigned int v183 = v400;
    uint64_t v182 = v401;
    uint64_t v181 = v161;
  }
  unint64_t v185 = v182 & 0xFFFFFFFF00000000;
  uint64_t v186 = v183;
  uint64_t v187 = (const llvm::Twine *)v429;
  uint64_t v423 = 0;
  uint64_t v424 = 0;
  unsigned int v425 = 0;
  uint64_t v43 = v181;
  uint64_t v188 = *(void *)(v181 + 48);
  if (!v188)
  {
LABEL_230:
    uint64_t v189 = 0;
    int v190 = 1;
    if (!v416) {
      goto LABEL_249;
    }
    uint64_t v191 = v414;
    if (v430 == 1)
    {
      uint64_t v189 = 1;
      uint64_t v404 = sub_1CD7F95FC(*(void *)(a1 + 296), 9, 0, 1, 0);
      uint64_t v398 = v192;
      int v190 = 1;
    }
    goto LABEL_250;
  }
  while (1)
  {
    if (*(_DWORD *)(v188 + 8)) {
      goto LABEL_234;
    }
    v451 = 0;
    uint64_t v193 = *(void *)(v188 + 16);
    int v194 = *(unsigned __int16 *)(v193 + 24);
    if ((v194 & 0x8000) == 0)
    {
      if (v194 != 212) {
        break;
      }
      int v200 = 0;
      v451 = *(void **)(v188 + 16);
      goto LABEL_246;
    }
    if (v194 != 65527) {
      break;
    }
    uint64_t v195 = *(void *)(v193 + 48);
    if (!v195 || *(void *)(v195 + 32)) {
      break;
    }
    uint64_t v196 = *(void *)(*(void *)(*(void *)(v193 + 32) + 40) + 80);
    uint64_t v197 = (void *)(v196 + 24);
    if (*(_DWORD *)(v196 + 32) >= 0x41u) {
      uint64_t v197 = (void *)*v197;
    }
    int v198 = *(_DWORD *)v197;
    uint64_t v193 = *(void *)(v195 + 16);
    int v199 = *(unsigned __int16 *)(v193 + 24);
    v451 = (void *)v193;
    if (v199 != 212) {
      break;
    }
    int v200 = v198 - 33;
LABEL_246:
    if (**(unsigned char **)(v193 + 40) != 9) {
      break;
    }
    *((_DWORD *)sub_1CD3CDD24(&v423, &v451) + 2) = v200;
LABEL_234:
    uint64_t v188 = *(void *)(v188 + 32);
    if (!v188) {
      goto LABEL_230;
    }
  }
  uint64_t v189 = 0;
  int v190 = 0;
LABEL_249:
  uint64_t v191 = v414;
LABEL_250:
  unint64_t v201 = v186 | v185;
  unint64_t v202 = v191 & 0xFFFFFFFF00000000 | v180;
  if (v418)
  {
    switch(v393)
    {
      case 2023:
      case 2026:
        LODWORD(v414) = 0;
        v273 = v410;
        BOOL v288 = v410 == 0;
        int v289 = 12880;
        goto LABEL_349;
      case 2024:
      case 2027:
        LODWORD(v414) = 0;
        v273 = v410;
        BOOL v288 = v410 == 0;
        int v289 = 12688;
LABEL_349:
        if (!v288) {
          ++v289;
        }
        int v417 = v289;
        uint64_t v275 = 1;
        goto LABEL_383;
      case 2028:
      case 2033:
        LODWORD(v414) = 0;
        v273 = v410;
        if (v410) {
          int v294 = 12777;
        }
        else {
          int v294 = 12776;
        }
        int v417 = v294;
        uint64_t v275 = 1;
        goto LABEL_356;
      case 2029:
      case 2034:
        LODWORD(v414) = 0;
        uint64_t v402 = 0;
        v273 = v410;
        if (v410) {
          int v284 = 12869;
        }
        else {
          int v284 = 12868;
        }
        int v417 = v284;
        goto LABEL_374;
      case 2030:
      case 2035:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v290 = v190 == 0;
        if (v190) {
          int v291 = 12537;
        }
        else {
          int v291 = 12733;
        }
        int v292 = 12732;
        int v293 = 12536;
        goto LABEL_369;
      case 2031:
      case 2036:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v290 = v190 == 0;
        if (v190) {
          int v291 = 12581;
        }
        else {
          int v291 = 12777;
        }
        int v292 = 12776;
        int v293 = 12580;
        goto LABEL_369;
      case 2032:
      case 2037:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v290 = v190 == 0;
        if (v190) {
          int v291 = 12625;
        }
        else {
          int v291 = 12821;
        }
        int v292 = 12820;
        int v293 = 12624;
        goto LABEL_369;
      case 2038:
      case 2041:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v279 = v190 == 0;
        if (v190) {
          int v280 = 12673;
        }
        else {
          int v280 = 12873;
        }
        int v281 = 12872;
        int v282 = 12672;
        goto LABEL_389;
      case 2039:
      case 2042:
        LODWORD(v414) = 0;
        v273 = v410;
        BOOL v286 = v410 == 0;
        int v287 = 12880;
        goto LABEL_380;
      case 2040:
      case 2043:
        LODWORD(v414) = 0;
        v273 = v410;
        BOOL v286 = v410 == 0;
        int v287 = 12688;
LABEL_380:
        if (!v286) {
          ++v287;
        }
        int v417 = v287;
        uint64_t v275 = 2;
LABEL_383:
        uint64_t v295 = 3;
        goto LABEL_384;
      case 2044:
      case 2049:
        LODWORD(v414) = 0;
        v273 = v410;
        if (v410) {
          int v283 = 12777;
        }
        else {
          int v283 = 12776;
        }
        int v417 = v283;
        uint64_t v402 = 2;
        goto LABEL_394;
      case 2045:
      case 2050:
        LODWORD(v414) = 0;
        uint64_t v402 = 0;
        v273 = v410;
        if (v410) {
          int v285 = 12869;
        }
        else {
          int v285 = 12868;
        }
        int v417 = v285;
        goto LABEL_394;
      case 2046:
      case 2051:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v279 = v190 == 0;
        if (v190) {
          int v280 = 12537;
        }
        else {
          int v280 = 12733;
        }
        int v281 = 12732;
        int v282 = 12536;
        goto LABEL_389;
      case 2047:
      case 2052:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v279 = v190 == 0;
        if (v190) {
          int v280 = 12581;
        }
        else {
          int v280 = 12777;
        }
        int v281 = 12776;
        int v282 = 12580;
        goto LABEL_389;
      case 2048:
      case 2053:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v279 = v190 == 0;
        if (v190) {
          int v280 = 12625;
        }
        else {
          int v280 = 12821;
        }
        int v281 = 12820;
        int v282 = 12624;
LABEL_389:
        if (!v279) {
          int v281 = v282;
        }
        if (!v410) {
          int v280 = v281;
        }
        int v417 = v280;
        v273 = v410;
LABEL_394:
        uint64_t v275 = 2;
        break;
      case 2054:
      case 2057:
      case 2070:
      case 2073:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v203 = v190 == 0;
        if (v190) {
          int v204 = 12673;
        }
        else {
          int v204 = 12873;
        }
        int v205 = 12872;
        int v206 = 12672;
        goto LABEL_312;
      case 2055:
      case 2058:
      case 2071:
      case 2074:
        LODWORD(v414) = 0;
        v273 = v410;
        BOOL v277 = v410 == 0;
        int v278 = 12880;
        goto LABEL_318;
      case 2056:
      case 2059:
      case 2072:
      case 2075:
        LODWORD(v414) = 0;
        v273 = v410;
        BOOL v277 = v410 == 0;
        int v278 = 12688;
LABEL_318:
        if (!v277) {
          ++v278;
        }
        int v417 = v278;
        uint64_t v402 = 3;
        goto LABEL_321;
      case 2060:
      case 2065:
      case 2076:
      case 2081:
        LODWORD(v414) = 0;
        v273 = v410;
        if (v410) {
          int v274 = 12777;
        }
        else {
          int v274 = 12776;
        }
        int v417 = v274;
        uint64_t v275 = 3;
LABEL_356:
        uint64_t v295 = 2;
LABEL_384:
        uint64_t v402 = v295;
        break;
      case 2061:
      case 2066:
      case 2077:
      case 2082:
        LODWORD(v414) = 0;
        uint64_t v402 = 0;
        v273 = v410;
        if (v410) {
          int v276 = 12869;
        }
        else {
          int v276 = 12868;
        }
        int v417 = v276;
        goto LABEL_321;
      case 2062:
      case 2067:
      case 2078:
      case 2083:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v203 = v190 == 0;
        if (v190) {
          int v204 = 12537;
        }
        else {
          int v204 = 12733;
        }
        int v205 = 12732;
        int v206 = 12536;
        goto LABEL_312;
      case 2063:
      case 2068:
      case 2079:
      case 2084:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v203 = v190 == 0;
        if (v190) {
          int v204 = 12581;
        }
        else {
          int v204 = 12777;
        }
        int v205 = 12776;
        int v206 = 12580;
        goto LABEL_312;
      case 2064:
      case 2069:
      case 2080:
      case 2085:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v203 = v190 == 0;
        if (v190) {
          int v204 = 12625;
        }
        else {
          int v204 = 12821;
        }
        int v205 = 12820;
        int v206 = 12624;
LABEL_312:
        if (!v203) {
          int v205 = v206;
        }
        if (!v410) {
          int v204 = v205;
        }
        int v417 = v204;
        v273 = v410;
LABEL_321:
        uint64_t v275 = 3;
        break;
      default:
        uint64_t v402 = 0;
        LODWORD(v414) = v190;
        BOOL v290 = v190 == 0;
        if (v190) {
          int v291 = 12673;
        }
        else {
          int v291 = 12873;
        }
        int v292 = 12872;
        int v293 = 12672;
LABEL_369:
        if (!v290) {
          int v292 = v293;
        }
        if (!v410) {
          int v291 = v292;
        }
        int v417 = v291;
        v273 = v410;
LABEL_374:
        uint64_t v275 = 1;
        break;
    }
    v451 = &v453;
    if (v273) {
      uint64_t v296 = 0;
    }
    else {
      uint64_t v296 = v392 | v391;
    }
    uint64_t v453 = v406;
    unint64_t v454 = v201;
    uint64_t v455 = v405;
    unint64_t v456 = v403;
    uint64_t v457 = v58;
    unint64_t v458 = v202;
    uint64_t v452 = 0x800000003;
    if (v273)
    {
      int v459 = v273;
      uint64_t v460 = 0;
      LODWORD(v452) = 4;
    }
    uint64_t v298 = sub_1CD7EBF14(*(void *)(a1 + 296), v275, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v299 = (uint64_t **)((char *)v451 + 16 * v452);
    void *v299 = v298;
    v299[1] = v297;
    LODWORD(v452) = v452 + 1;
    int v301 = sub_1CD7EBF14(*(void *)(a1 + 296), v413, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v302 = (uint64_t **)((char *)v451 + 16 * v452);
    *uint64_t v302 = v301;
    v302[1] = v300;
    LODWORD(v452) = v452 + 1;
    v304 = sub_1CD7EBF14(*(void *)(a1 + 296), v296, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v305 = (uint64_t **)((char *)v451 + 16 * v452);
    *uint64_t v305 = v304;
    v305[1] = v303;
    LODWORD(v452) = v452 + 1;
    BOOL v307 = sub_1CD7EBF14(*(void *)(a1 + 296), v394, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v308 = (uint64_t **)((char *)v451 + 16 * v452);
    *int v308 = v307;
    v308[1] = v306;
    LODWORD(v452) = v452 + 1;
    BOOL v310 = sub_1CD7EBF14(*(void *)(a1 + 296), v415, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v311 = (uint64_t **)((char *)v451 + 16 * v452);
    *uint64_t v311 = v310;
    v311[1] = v309;
    LODWORD(v452) = v452 + 1;
    uint64_t v313 = sub_1CD7EBF14(*(void *)(a1 + 296), v387, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v314 = (uint64_t **)((char *)v451 + 16 * v452);
    *int v314 = v313;
    v314[1] = v312;
    LODWORD(v452) = v452 + 1;
    int v316 = sub_1CD7EBF14(*(void *)(a1 + 296), v388, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v317 = (uint64_t **)((char *)v451 + 16 * v452);
    *v317 = v316;
    v317[1] = v315;
    LODWORD(v452) = v452 + 1;
    uint64_t v319 = sub_1CD7EBF14(*(void *)(a1 + 296), v407, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v320 = (uint64_t **)((char *)v451 + 16 * v452);
    *uint64_t v320 = v319;
    v320[1] = v318;
    LODWORD(v452) = v452 + 1;
    int v322 = sub_1CD7EBF14(*(void *)(a1 + 296), v395, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v323 = (uint64_t **)((char *)v451 + 16 * v452);
    *uint64_t v323 = v322;
    v323[1] = v321;
    LODWORD(v452) = v452 + 1;
    uint64_t v325 = sub_1CD7EBF14(*(void *)(a1 + 296), v389, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __int16 v326 = (uint64_t **)((char *)v451 + 16 * v452);
    *__int16 v326 = v325;
    v326[1] = v324;
    LODWORD(v452) = v452 + 1;
    uint64_t v328 = sub_1CD7EBF14(*(void *)(a1 + 296), v390, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    v329 = (uint64_t **)((char *)v451 + 16 * v452);
    uint64_t *v329 = v328;
    v329[1] = v327;
    LODWORD(v452) = v452 + 1;
    v269 = sub_1CD7EBF14(*(void *)(a1 + 296), v402, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    v271 = v330;
    unsigned int v272 = v452;
    if (v452 < HIDWORD(v452)) {
      goto LABEL_412;
    }
LABEL_290:
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v415 = v189;
  LODWORD(v414) = v190;
  uint64_t v32 = sub_1CB8B6130(v413, v187, v430, -1, v399, v190, 0, 0, v178, -1);
  int v418 = &v453;
  v451 = &v453;
  uint64_t v453 = v406;
  unint64_t v454 = v201;
  uint64_t v455 = v405;
  unint64_t v456 = v403;
  uint64_t v207 = *(void *)(a1 + 296);
  uint64_t v457 = v58;
  unint64_t v458 = v202;
  uint64_t v452 = 0x800000003;
  unint64_t v60 = sub_1CD7EBF14(v207, 0, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v209 = (uint64_t **)((char *)v451 + 16 * v452);
  *uint64_t v209 = v60;
  v209[1] = v208;
  unsigned int v210 = v452 + 1;
  LODWORD(v452) = v452 + 1;
  uint64_t v39 = v413;
  int v49 = v399;
  switch(v413)
  {
    case 1u:
    case 2u:
      if (v210 >= HIDWORD(v452)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v211 = (char *)v451 + 16 * v210;
      *uint64_t v211 = v410;
      v211[1] = 0;
      goto LABEL_264;
    case 3u:
    case 4u:
      __break(1u);
      goto LABEL_531;
    case 5u:
    case 6u:
      long long v212 = *((_OWORD *)__src + v462 - 1);
      LODWORD(v462) = v462 - 1;
      if (v210 >= HIDWORD(v452)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v451 + v210) = v212;
      goto LABEL_264;
    case 7u:
      v214 = sub_1CB8B5E0C(*(void *)(a1 + 296), (const llvm::APInt *)&v426, (uint64_t)&__src, 0xAEu);
      if (v452 >= HIDWORD(v452)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v215 = (uint64_t **)((char *)v451 + 16 * v452);
      *uint64_t v215 = v214;
      v215[1] = v213;
LABEL_264:
      LODWORD(v452) = v452 + 1;
      v217 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
      if (v452 >= HIDWORD(v452)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v218 = (uint64_t **)((char *)v451 + 16 * v452);
      void *v218 = v217;
      v218[1] = v216;
      unsigned int v210 = v452 + 1;
      LODWORD(v452) = v452 + 1;
      break;
    default:
      break;
  }
  if (v399)
  {
    if (v210 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v219 = (char *)v451 + 16 * v210;
    *uint64_t v219 = v397;
    v219[1] = v396;
    LODWORD(v452) = v452 + 1;
    uint64_t v221 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
    if (v452 >= HIDWORD(v452)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v222 = (uint64_t **)((char *)v451 + 16 * v452);
    *uint64_t v222 = v221;
    v222[1] = v220;
    LODWORD(v452) = v452 + 1;
  }
  int v224 = sub_1CD7EBF14(*(void *)(a1 + 296), v407 != 0, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  BOOL v225 = (uint64_t **)((char *)v451 + 16 * v452);
  *BOOL v225 = v224;
  v225[1] = v223;
  LODWORD(v452) = v452 + 1;
  uint64_t v227 = sub_1CD7EBF14(*(void *)(a1 + 296), qword_1CD935D38[(int)v187 - 1], (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v228 = (uint64_t **)((char *)v451 + 16 * v452);
  void *v228 = v227;
  v228[1] = v226;
  LODWORD(v452) = v452 + 1;
  uint64_t v230 = sub_1CD7EBF14(*(void *)(a1 + 296), v413, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v231 = (uint64_t **)((char *)v451 + 16 * v452);
  *uint64_t v231 = v230;
  v231[1] = v229;
  LODWORD(v452) = v452 + 1;
  uint64_t v233 = sub_1CD7EBF14(*(void *)(a1 + 296), v399, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v234 = (uint64_t **)((char *)v451 + 16 * v452);
  *uint64_t v234 = v233;
  v234[1] = v232;
  LODWORD(v452) = v452 + 1;
  v236 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v417 = v32;
  uint64_t v237 = (uint64_t **)((char *)v451 + 16 * v452);
  *uint64_t v237 = v236;
  v237[1] = v235;
  LODWORD(v452) = v452 + 1;
  uint64_t v239 = sub_1CD7EBF14(*(void *)(a1 + 296), qword_1CD935D50[v430 - 1], (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v240 = (uint64_t **)((char *)v451 + 16 * v452);
  *uint64_t v240 = v239;
  v240[1] = v238;
  LODWORD(v452) = v452 + 1;
  unsigned int v241 = sub_1CD3CE4FC(*(unsigned char **)(a1 + 480), **(void **)(a1 + 280), "ImageReadPersist");
  uint64_t v242 = *(void *)(a1 + 480);
  uint64_t v243 = **(void **)(a1 + 280);
  LODWORD(v449[0]) = 0;
  BOOL v244 = sub_1CD3CA314(v242, v243, "ImageReadTPUCohMode", v449);
  uint64_t v245 = LODWORD(v449[0]);
  uint64_t v246 = *(void *)(a1 + 480);
  uint64_t v247 = **(void **)(a1 + 280);
  LODWORD(v449[0]) = 0;
  BOOL v248 = sub_1CD3CA314(v246, v247, "ImageReadMCUCohMode", v449);
  uint64_t v249 = LODWORD(v449[0]);
  uint64_t v250 = *(void *)(a1 + 480);
  uint64_t v251 = **(void **)(a1 + 280);
  LODWORD(v449[0]) = 0;
  BOOL v252 = sub_1CD3CA314(v250, v251, "ImageReadSLCCohMode", v449);
  uint64_t v253 = LODWORD(v449[0]);
  v255 = sub_1CD7EBF14(*(void *)(a1 + 296), v241, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v256 = (uint64_t **)((char *)v451 + 16 * v452);
  *uint64_t v256 = v255;
  v256[1] = v254;
  LODWORD(v452) = v452 + 1;
  if (v244) {
    uint64_t v257 = v245;
  }
  else {
    uint64_t v257 = 0;
  }
  v259 = sub_1CD7EBF14(*(void *)(a1 + 296), v257, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v260 = (uint64_t **)((char *)v451 + 16 * v452);
  *uint64_t v260 = v259;
  v260[1] = v258;
  LODWORD(v452) = v452 + 1;
  if (v248) {
    uint64_t v261 = v249;
  }
  else {
    uint64_t v261 = 0;
  }
  v263 = sub_1CD7EBF14(*(void *)(a1 + 296), v261, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v264 = (uint64_t **)((char *)v451 + 16 * v452);
  *uint64_t v264 = v263;
  v264[1] = v262;
  LODWORD(v452) = v452 + 1;
  if (v252) {
    uint64_t v265 = v253;
  }
  else {
    uint64_t v265 = 0;
  }
  uint64_t v267 = sub_1CD7EBF14(*(void *)(a1 + 296), v265, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v268 = (uint64_t **)((char *)v451 + 16 * v452);
  *int v268 = v267;
  v268[1] = v266;
  LODWORD(v452) = v452 + 1;
  v269 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  v271 = v270;
  unsigned int v272 = v452;
  uint64_t v189 = v415;
  if (v452 >= HIDWORD(v452)) {
    goto LABEL_290;
  }
LABEL_412:
  int v331 = (uint64_t **)((char *)v451 + 16 * v272);
  *int v331 = v269;
  v331[1] = v271;
  LODWORD(v452) = v452 + 1;
  v333 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  v334 = (uint64_t **)((char *)v451 + 16 * v452);
  uint64_t *v334 = v333;
  v334[1] = v332;
  LODWORD(v452) = v452 + 1;
  uint64_t v335 = *(void *)(a1 + 296);
  v449[0] = 0;
  sub_1CB8B55E4(v335, (uint64_t)&v451, (uint64_t)v449);
  if (v452 >= HIDWORD(v452)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_OWORD *)v451 + v452) = v408;
  uint64_t v336 = (v452 + 1);
  LODWORD(v452) = v452 + 1;
  uint64_t v337 = *(void *)(a1 + 296);
  if (v430)
  {
    int v343 = sub_1CD801044(v337, v417, (uint64_t)&v426, v404, v398, (uint64_t *)v451, v336);
    uint64_t v344 = *(void *)(a1 + 280);
    uint64_t v419 = 0;
    v420[0] = 0;
    *(void *)((char *)v420 + 5) = 0;
    *(_OWORD *)unsigned int v449 = 0u;
    v450[0] = 0u;
    MachineMemOperand = (void *)llvm::MachineFunction::getMachineMemOperand(v344, (uint64_t)&v419, 1, 16, 3, (long long *)v449, 0, 1, 0, 0, 0);
    v346 = *(uint64_t **)(a1 + 296);
    v449[0] = MachineMemOperand;
    sub_1CD8005B8(v346, (uint64_t)v343, v449, 1);
    if (v447 == 1)
    {
      if (v414)
      {
        uint64_t v347 = v423 + 16 * v425;
        if (v424)
        {
          if (v425)
          {
            uint64_t v371 = 16 * v425;
            uint64_t v348 = v423;
            while ((*(void *)v348 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v348 += 16;
              v371 -= 16;
              if (!v371) {
                goto LABEL_465;
              }
            }
          }
          else
          {
            uint64_t v348 = v423;
          }
        }
        else
        {
LABEL_465:
          uint64_t v348 = v423 + 16 * v425;
        }
        uint64_t v372 = v423 + 16 * v425;
        while (1)
        {
LABEL_467:
          if (v348 == v372) {
            goto LABEL_442;
          }
          if (!v189) {
            break;
          }
          sub_1CD800DA0(*(void *)(a1 + 296), *(void *)v348, 0, (uint64_t)v343, 0);
          v373 = v343;
LABEL_477:
          sub_1CD808A6C((uint64_t)v373);
          uint64_t v381 = v348 + 16;
          uint64_t v348 = v347;
          if (v381 != v347)
          {
            uint64_t v348 = v381;
            while ((*(void *)v348 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v348 += 16;
              if (v348 == v347)
              {
                uint64_t v348 = v347;
                goto LABEL_467;
              }
            }
          }
        }
        uint64_t v374 = v189;
        uint64_t v375 = *(void *)(a1 + 296);
        int v376 = *(_DWORD *)(v348 + 8);
        uint64_t v377 = *(void **)(v43 + 64);
        v449[0] = v377;
        if (v377) {
          llvm::MetadataTracking::track((uint64_t)v449, (unsigned __int8 *)v377, 2);
        }
        LODWORD(v449[1]) = *(_DWORD *)(v43 + 60);
        v373 = sub_1CD8015C0(v375, v376 + 1, (const llvm::APInt *)v449, (llvm *)9, 0, (uint64_t)v343, 0);
        int v379 = v378;
        if (v449[0])
        {
          int v380 = *(unsigned __int8 *)v449[0];
          if ((v380 - 4) > 0x1E)
          {
            if ((v380 - 3) >= 0xFFFFFFFE) {
              uint64_t v382 = v449[0];
            }
            else {
              uint64_t v382 = 0;
            }
            if ((v380 - 3) < 0xFFFFFFFE)
            {
              if (v380 == 3) {
                *((void *)v449[0] + 1) = 0;
              }
              goto LABEL_476;
            }
            unint64_t v383 = (unint64_t)v382 + 8;
          }
          else
          {
            if ((*((unsigned char *)v449[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v449[0] + 3)) {
              goto LABEL_476;
            }
            uint64_t v384 = *((void *)v449[0] + 2);
            if ((v384 & 4) == 0) {
              goto LABEL_476;
            }
            unint64_t v383 = v384 & 0xFFFFFFFFFFFFFFF8;
            if (!v383) {
              goto LABEL_476;
            }
          }
          v448 = v449;
          sub_1CC5FA668(v383 + 16, &v448);
        }
LABEL_476:
        sub_1CD800DA0(*(void *)(a1 + 296), *(void *)v348, 0, (uint64_t)v373, v379);
        uint64_t v189 = v374;
        goto LABEL_477;
      }
      sub_1CD800DA0(*(void *)(a1 + 296), v43, 0, (uint64_t)v343, 0);
      sub_1CD808A6C((uint64_t)v343);
LABEL_442:
      int i = 1;
    }
    else if (v430 == 4)
    {
      if (v447)
      {
        int v358 = 0;
        for (int i = 0; i != v447; ++i)
        {
          v449[0] = v450;
          v449[1] = (void *)0x800000000;
          int v360 = sub_1CD7EBF14(*(void *)(a1 + 296), 63, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
          if (LODWORD(v449[1]) >= (unint64_t)HIDWORD(v449[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v361 = (uint64_t **)((char *)v449[0] + 16 * LODWORD(v449[1]));
          *uint64_t v361 = v360;
          v361[1] = v359;
          ++LODWORD(v449[1]);
          for (uint64_t j = 33; j != 37; ++j)
          {
            v364 = sub_1CD8015C0(*(void *)(a1 + 296), v358 + (int)j, (const llvm::APInt *)&v426, (llvm *)5, 0, (uint64_t)v343, 0);
            if (LODWORD(v449[1]) >= (unint64_t)HIDWORD(v449[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v365 = (uint64_t **)((char *)v449[0] + 16 * LODWORD(v449[1]));
            *v365 = v364;
            v365[1] = v363;
            ++LODWORD(v449[1]);
            v367 = sub_1CD7EBF14(*(void *)(a1 + 296), j, (const llvm::APInt *)&v426, (llvm *)5, 0, 1, 0);
            if (LODWORD(v449[1]) >= (unint64_t)HIDWORD(v449[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v368 = (uint64_t **)((char *)v449[0] + 16 * LODWORD(v449[1]));
            unsigned __int8 *v368 = v367;
            v368[1] = v366;
            uint64_t v369 = ++LODWORD(v449[1]);
          }
          uint64_t v370 = sub_1CD801450(*(void *)(a1 + 296), 18, (uint64_t)&v426, (llvm *)0xAE, 0, (uint64_t *)v449[0], v369);
          sub_1CD800DA0(*(void *)(a1 + 296), v43, i, (uint64_t)v370, 0);
          sub_1CD808A6C((uint64_t)v370);
          if (v449[0] != v450) {
            free(v449[0]);
          }
          v358 += 4;
        }
      }
      else
      {
        int i = 0;
      }
    }
    else
    {
      uint64_t v352 = sub_1CD8015C0(*(void *)(a1 + 296), 33, (const llvm::APInt *)&v426, (llvm *)5, 0, (uint64_t)v343, 0);
      int v354 = v353;
      uint64_t v355 = sub_1CD8015C0(*(void *)(a1 + 296), 34, (const llvm::APInt *)&v426, (llvm *)5, 0, (uint64_t)v343, 0);
      int v357 = v356;
      sub_1CD800DA0(*(void *)(a1 + 296), v43, 0, (uint64_t)v352, v354);
      sub_1CD808A6C((uint64_t)v352);
      sub_1CD800DA0(*(void *)(a1 + 296), v43, 1, (uint64_t)v355, v357);
      sub_1CD808A6C((uint64_t)v355);
      int i = 2;
    }
    sub_1CD800DA0(*(void *)(a1 + 296), v43, i, (uint64_t)v343, 1);
    sub_1CD808A6C((uint64_t)v343);
    if (v409) {
      goto LABEL_445;
    }
    goto LABEL_416;
  }
  uint64_t v338 = sub_1CD801450(v337, v417, (uint64_t)&v426, (llvm *)1, 0, (uint64_t *)v451, v336);
  uint64_t v339 = *(void *)(a1 + 280);
  uint64_t v421 = 0;
  v422[0] = 0;
  *(void *)((char *)v422 + 5) = 0;
  *(_OWORD *)unsigned int v449 = 0u;
  v450[0] = 0u;
  int v340 = (void *)llvm::MachineFunction::getMachineMemOperand(v339, (uint64_t)&v421, 2, 16, 3, (long long *)v449, 0, 1, 0, 0, 0);
  uint64_t v341 = *(uint64_t **)(a1 + 296);
  v449[0] = v340;
  sub_1CD8005B8(v341, (uint64_t)v338, v449, 1);
  sub_1CD800DA0(*(void *)(a1 + 296), v43, 0, (uint64_t)v338, 0);
  sub_1CD808A6C((uint64_t)v338);
  if ((v409 & 1) == 0) {
    goto LABEL_416;
  }
LABEL_445:
  sub_1CD7EA438(*(void **)(a1 + 296), v43);
LABEL_416:
  if (v451 != &v453) {
    free(v451);
  }
  MEMORY[0x1D25D9CD0](v423, 8);
  if (__src != v463) {
    free(__src);
  }
  if (v464 != &v466) {
    free(v464);
  }
  if (v426)
  {
    int v342 = *v426;
    if ((v342 - 4) > 0x1E)
    {
      if ((v342 - 3) >= 0xFFFFFFFE) {
        v350 = v426;
      }
      else {
        v350 = 0;
      }
      if ((v342 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v351 = (unint64_t)(v350 + 8);
        goto LABEL_440;
      }
      if (v342 == 3) {
        *((void *)v426 + 1) = 0;
      }
    }
    else if ((v426[1] & 0x7F) == 2 || *((_DWORD *)v426 + 3))
    {
      uint64_t v385 = *((void *)v426 + 2);
      if ((v385 & 4) != 0)
      {
        unint64_t v351 = v385 & 0xFFFFFFFFFFFFFFF8;
        if (v351)
        {
LABEL_440:
          v451 = &v426;
          sub_1CC5FA668(v351 + 16, &v451);
        }
      }
    }
  }
}

uint64_t sub_1CB8B55E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 4);
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v8 = sub_1CD7EBF14(a1, v6, (const llvm::APInt *)v19, (llvm *)5, 0, 1, 0);
  unsigned int v9 = *(_DWORD *)(a2 + 8);
  if (v9 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v10 = (uint64_t **)(*(void *)a2 + 16 * v9);
  *uint64_t v10 = v8;
  v10[1] = v7;
  ++*(_DWORD *)(a2 + 8);
  if (v19[0])
  {
    int v11 = *(unsigned __int8 *)v19[0];
    if ((v11 - 4) <= 0x1E)
    {
      if ((*(unsigned char *)(v19[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v19[0] + 12)) {
        goto LABEL_6;
      }
      uint64_t v18 = *(void *)(v19[0] + 16);
      if ((v18 & 4) == 0) {
        goto LABEL_6;
      }
      unint64_t v17 = v18 & 0xFFFFFFFFFFFFFFF8;
      if (!v17) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
    if ((v11 - 3) >= 0xFFFFFFFE) {
      uint64_t v16 = v19[0];
    }
    else {
      uint64_t v16 = 0;
    }
    if ((v11 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v17 = v16 + 8;
LABEL_13:
      int v20 = v19;
      sub_1CC5FA668(v17 + 16, &v20);
      goto LABEL_6;
    }
    if (v11 == 3) {
      *(void *)(v19[0] + 8) = 0;
    }
  }
LABEL_6:
  uint64_t result = sub_1CD7EEB94(a1, *(_DWORD *)a3, (llvm *)5, 0);
  unsigned int v14 = *(_DWORD *)(a2 + 8);
  if (v14 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v15 = (uint64_t *)(*(void *)a2 + 16 * v14);
  *uint64_t v15 = result;
  v15[1] = v13;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1CB8B5768(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t result = sub_1CB8B595C(v4);
      if (!result) {
        return result;
      }
      if ((*(_WORD *)(v4 + 24) & 0xFFFE) == 0xDE)
      {
        if ((sub_1CB8B5768(v4, a2) & 1) == 0) {
          return 0;
        }
        goto LABEL_39;
      }
      uint64_t v6 = *(void *)(a2 + 8);
      uint64_t v7 = *(unsigned int *)(a2 + 20);
      if (v6 != *(void *)a2)
      {
        unsigned int v11 = *(_DWORD *)(a2 + 16);
        goto LABEL_17;
      }
      if (!v7) {
        break;
      }
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v7;
      uint64_t v10 = *(uint64_t **)(a2 + 8);
      while (*v10 != v4)
      {
        if (*v10 == -2) {
          uint64_t v8 = v10;
        }
        ++v10;
        v9 -= 8;
        if (!v9)
        {
          if (!v8) {
            goto LABEL_14;
          }
          *uint64_t v8 = v4;
          --*(_DWORD *)(a2 + 24);
          break;
        }
      }
LABEL_38:
      if ((*(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24)) > 2) {
        return 0;
      }
LABEL_39:
      uint64_t v2 = *(void *)(v2 + 32);
      if (!v2) {
        return 1;
      }
    }
LABEL_14:
    unsigned int v11 = *(_DWORD *)(a2 + 16);
    if (v7 < v11)
    {
      *(_DWORD *)(a2 + 20) = v7 + 1;
      *(void *)(v6 + 8 * v7) = v4;
      goto LABEL_38;
    }
LABEL_17:
    if (3 * v11 <= 4 * ((int)v7 - *(_DWORD *)(a2 + 24)))
    {
      if (v11 >= 0x40) {
        v11 *= 2;
      }
      else {
        unsigned int v11 = 128;
      }
    }
    else if (v11 - v7 >= v11 >> 3)
    {
      goto LABEL_19;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)a2, v11);
    unsigned int v11 = *(_DWORD *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 8);
LABEL_19:
    unsigned int v12 = v11 - 1;
    unsigned int v13 = (v11 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    unsigned int v14 = (uint64_t *)(v6 + 8 * v13);
    uint64_t v15 = *v14;
    if (*v14 == -1)
    {
      uint64_t v16 = 0;
LABEL_31:
      if (v16) {
        int v20 = v16;
      }
      else {
        int v20 = v14;
      }
      if (*v20 != v4)
      {
        if (*v20 == -2) {
          --*(_DWORD *)(a2 + 24);
        }
        else {
          ++*(_DWORD *)(a2 + 20);
        }
        *int v20 = v4;
      }
    }
    else
    {
      uint64_t v16 = 0;
      int v17 = 1;
      while (v15 != v4)
      {
        if (v16) {
          BOOL v18 = 0;
        }
        else {
          BOOL v18 = v15 == -2;
        }
        if (v18) {
          uint64_t v16 = v14;
        }
        unsigned int v19 = v13 + v17++;
        unsigned int v13 = v19 & v12;
        unsigned int v14 = (uint64_t *)(v6 + 8 * (v19 & v12));
        uint64_t v15 = *v14;
        if (*v14 == -1) {
          goto LABEL_31;
        }
      }
    }
    goto LABEL_38;
  }
  return 1;
}

uint64_t sub_1CB8B595C(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 == 46)
  {
    uint64_t v2 = *(void *)(**(void **)(a1 + 32) + 80);
    uint64_t v3 = (void *)(v2 + 24);
    if (*(_DWORD *)(v2 + 32) >= 0x41u) {
      uint64_t v3 = (void *)*v3;
    }
    return (unint64_t)(*v3 - 2091) < 6;
  }
  else if (sub_1CB8B2278(*(unsigned __int16 *)(a1 + 24)))
  {
    return 1;
  }
  else
  {
    BOOL v5 = v1 == 443;
    if (v1 == 423) {
      BOOL v5 = 1;
    }
    return (v1 - 202) <= 0x15 && ((1 << (v1 + 54)) & 0x300003) != 0 || v5;
  }
}

uint64_t *sub_1CB8B59FC(uint64_t a1, unint64_t a2, llvm::APFloatBase *a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12 = *(unsigned __int8 **)(a1 + 64);
  int v41 = v12;
  if (v12) {
    llvm::MetadataTracking::track((uint64_t)&v41, v12, 2);
  }
  int v42 = *(_DWORD *)(a1 + 60);
  int v13 = *(unsigned __int16 *)(a1 + 24);
  if (v13 == 222)
  {
    uint64_t v14 = **(void **)(a1 + 32);
    unint64_t v15 = a2 & 0xFFFFFFFF00000000;
    int v16 = *(unsigned __int16 *)(v14 + 24);
  }
  else
  {
    int v16 = *(unsigned __int16 *)(a1 + 24);
    uint64_t v14 = a1;
    unint64_t v15 = a2;
  }
  if (v16 == 223)
  {
    uint64_t v14 = **(void **)(v14 + 32);
    v15 &= 0xFFFFFFFF00000000;
    int v17 = *(unsigned __int16 *)(v14 + 24);
  }
  else
  {
    int v17 = v16;
  }
  if (v17 != 212 || (a4 & 1) != 0) {
    goto LABEL_27;
  }
  BOOL v18 = *(_DWORD **)(v14 + 32);
  int v19 = *(unsigned __int16 *)(*(void *)v18 + 24);
  uint64_t v20 = *(void *)(*(void *)v18 + 48);
  if (!v20)
  {
    int v22 = 1;
    goto LABEL_20;
  }
  int v21 = v18[2];
  int v22 = 1;
  while (*(_DWORD *)(v20 + 8) != v21)
  {
LABEL_16:
    uint64_t v20 = *(void *)(v20 + 32);
    if (!v20) {
      goto LABEL_20;
    }
  }
  if (v22)
  {
    --v22;
    goto LABEL_16;
  }
  LODWORD(v20) = 1;
LABEL_20:
  if (v22) {
    int v23 = 1;
  }
  else {
    int v23 = v20;
  }
  if (v19 == 395) {
    a4 = 1;
  }
  else {
    a4 = v23;
  }
  int v17 = *(unsigned __int16 *)(v14 + 24);
LABEL_27:
  if (v17 != 212 || a4 == 0)
  {
    uint64_t v33 = *((void *)a3 + 104);
    if (v33) {
      __int16 v34 = *(_WORD *)(v33 + 8);
    }
    else {
      __int16 v34 = 0;
    }
    uint64_t v26 = sub_1CD7F3564(a3, (const char *)0xD7, (uint64_t)&v41, (llvm *)0xA, 0, a1, (void *)a2, v34);
    if (a5) {
      goto LABEL_60;
    }
  }
  else
  {
    uint64_t v25 = *(void *)(v14 + 32);
    uint64_t v26 = *(uint64_t **)v25;
    unint64_t v27 = v15 & 0xFFFFFFFF00000000;
    uint64_t v28 = (void *)(v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25 + 8));
    if (v16 == 223)
    {
      uint64_t v35 = *((void *)a3 + 104);
      __int16 v36 = v35 ? *(_WORD *)(v35 + 8) : 0;
      uint64_t v26 = sub_1CD7F3564(a3, (const char *)0xDF, (uint64_t)&v41, (llvm *)0xA, 0, *(void *)v25, (void *)(v15 & 0xFFFFFFFF00000000 | *(unsigned int *)(v25 + 8)), v36);
      uint64_t v28 = (void *)(v39 | v27);
      if (a5) {
        sub_1CD3D60FC((uint64_t)a3, a5, a6, (uint64_t)v26);
      }
    }
    if (v13 == 222)
    {
      uint64_t v37 = *((void *)a3 + 104);
      __int16 v38 = v37 ? *(_WORD *)(v37 + 8) : 0;
      uint64_t v26 = sub_1CD7F3564(a3, (const char *)0xDE, (uint64_t)&v41, (llvm *)0xA, 0, (uint64_t)v26, v28, v38);
      if (a5) {
LABEL_60:
      }
        sub_1CD3D60FC((uint64_t)a3, a5, a6, (uint64_t)v26);
    }
  }
  if (v41)
  {
    int v29 = *v41;
    if ((v29 - 4) > 0x1E)
    {
      if ((v29 - 3) >= 0xFFFFFFFE) {
        uint64_t v31 = v41;
      }
      else {
        uint64_t v31 = 0;
      }
      if ((v29 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v32 = (unint64_t)(v31 + 8);
        goto LABEL_43;
      }
      if (v29 == 3) {
        *((void *)v41 + 1) = 0;
      }
    }
    else if ((v41[1] & 0x7F) == 2 || *((_DWORD *)v41 + 3))
    {
      uint64_t v40 = *((void *)v41 + 2);
      if ((v40 & 4) != 0)
      {
        unint64_t v32 = v40 & 0xFFFFFFFFFFFFFFF8;
        if (v32)
        {
LABEL_43:
          uint64_t v43 = &v41;
          sub_1CC5FA668(v32 + 16, &v43);
        }
      }
    }
  }
  return v26;
}

uint64_t sub_1CB8B5CDC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 > 3) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a1 + 24);
  if ((*(__int16 *)(a1 + 24) & 0x80000000) == 0)
  {
    if (v4 <= 0x3A)
    {
      if (((1 << v4) & 0x800001802) != 0) {
        return 1;
      }
      if (((1 << v4) & 0x504000000000000) != 0) {
        goto LABEL_32;
      }
    }
    unsigned int v5 = v4 - 175;
    BOOL v6 = v5 > 0x29;
    uint64_t v7 = (1 << v5) & 0x20001800007;
    if (!v6 && v7 != 0)
    {
LABEL_32:
      if (*(_WORD *)(a1 + 56))
      {
        uint64_t v9 = a3 + 1;
        uint64_t v10 = *(unsigned __int16 *)(a1 + 56) - 1;
        unsigned int v11 = (void *)(*(void *)(a1 + 32) + 8);
        do
        {
          uint64_t result = sub_1CB8B5CDC(*(v11 - 1), *v11, v9);
          BOOL v12 = v10-- != 0;
          char v13 = v12;
          if (!result) {
            break;
          }
          v11 += 5;
        }
        while ((v13 & 1) != 0);
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (v4 != 65517) {
    return 0;
  }
  if (!*(_WORD *)(a1 + 56)) {
    return 1;
  }
  uint64_t v14 = a3 + 1;
  uint64_t v15 = *(unsigned __int16 *)(a1 + 56) - 1;
  int v16 = (void *)(*(void *)(a1 + 32) + 8);
  do
  {
    uint64_t result = sub_1CB8B5CDC(*(v16 - 1), *v16, v14);
    BOOL v12 = v15-- != 0;
    char v17 = v12;
    if (!result) {
      break;
    }
    v16 += 5;
  }
  while ((v17 & 1) != 0);
  return result;
}

uint64_t *sub_1CB8B5E0C(uint64_t a1, const llvm::APInt *a2, uint64_t a3, unsigned __int8 a4)
{
  v24[16] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 27;
  switch(*(_DWORD *)(a3 + 8))
  {
    case 2:
      goto LABEL_17;
    case 3:
      uint64_t v5 = 45;
      goto LABEL_17;
    case 4:
      uint64_t v5 = 63;
      goto LABEL_17;
    case 5:
      uint64_t v5 = 81;
      goto LABEL_17;
    case 6:
      uint64_t v5 = 99;
      goto LABEL_17;
    case 7:
      uint64_t v5 = 117;
      goto LABEL_17;
    case 8:
      uint64_t v5 = 135;
      goto LABEL_17;
    case 9:
      uint64_t v5 = 143;
      goto LABEL_17;
    case 0xA:
      uint64_t v5 = 146;
      goto LABEL_17;
    case 0xB:
      uint64_t v5 = 149;
      goto LABEL_17;
    case 0xC:
      uint64_t v5 = 152;
      goto LABEL_17;
    case 0xD:
      uint64_t v5 = 155;
      goto LABEL_17;
    case 0xE:
      uint64_t v5 = 158;
      goto LABEL_17;
    case 0xF:
      uint64_t v5 = 161;
      goto LABEL_17;
    case 0x10:
      uint64_t v5 = 164;
LABEL_17:
      v24[0] = (uint64_t)sub_1CD7EBF14(a1, v5, a2, (llvm *)5, 0, 1, 0);
      v24[1] = v9;
      unsigned int v10 = 1;
      int v22 = 1;
      uint64_t v11 = *(unsigned int *)(a3 + 8);
      if (v11)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 16 * v11;
        int v15 = 1;
        int v16 = 33;
        do
        {
          if (v10 >= 8) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *(_OWORD *)&v24[2 * v10] = *(_OWORD *)(*(void *)a3 + v13);
          unsigned int v23 = v22 + 1;
          if (*(unsigned char *)(*(void *)(*(void *)(*(void *)a3 + v13) + 40)
                        + 16 * *(unsigned int *)(*(void *)a3 + v13 + 8)) == 4)
            unsigned int v17 = v15;
          else {
            unsigned int v17 = v16;
          }
          int v19 = sub_1CD7EBF14(a1, v17, a2, (llvm *)5, 0, 1, 0);
          if (v23 >= 8uLL) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v20 = &v24[2 * v23];
          *uint64_t v20 = (uint64_t)v19;
          v20[1] = v18;
          unsigned int v10 = v23 + 1;
          int v22 = v23 + 1;
          v13 += 16;
          v15 += 2;
          ++v16;
        }
        while (v14 != v13);
      }
      uint64_t v8 = sub_1CD801450(a1, 18, (uint64_t)a2, (llvm *)a4, 0, v24, v10);
      break;
    default:
      uint64_t v8 = **(uint64_t ***)a3;
      break;
  }
  return v8;
}

uint64_t sub_1CB8B6130(int a1, const llvm::Twine *a2, __int32 a3, int a4, int a5, int a6, int a7, int a8, int8x8_t a9, __int32 a10)
{
  if (a3 == -1)
  {
    BOOL v12 = (unsigned int *)&unk_1CD923950;
    if (a6) {
      BOOL v12 = (unsigned int *)&unk_1CD923930;
    }
    uint64_t v13 = (unsigned int *)&unk_1CD923990;
    if (a6) {
      uint64_t v13 = (unsigned int *)&unk_1CD923970;
    }
    uint64_t v14 = (unsigned int *)&unk_1CD923910;
    if (a6) {
      uint64_t v14 = (unsigned int *)&unk_1CD9238F0;
    }
    if ((a1 - 5) >= 2) {
      uint64_t v13 = v14;
    }
    if ((a1 - 1) >= 2) {
      int v15 = v13;
    }
    else {
      int v15 = v12;
    }
    return v15[4 * a7 + a4 - 1];
  }
  else
  {
    switch(a1)
    {
      case 1:
      case 2:
        unsigned int v10 = (unsigned int *)&unk_1CD923730;
        uint64_t v11 = (unsigned int *)&unk_1CD9236F0;
        break;
      case 3:
      case 4:
      case 7:
LABEL_187:
        __break(1u);
        JUMPOUT(0x1CB8B67ACLL);
      case 5:
      case 6:
        unsigned int v10 = (unsigned int *)&unk_1CD9237B0;
        uint64_t v11 = (unsigned int *)&unk_1CD923770;
        break;
      case 8:
        if (a2 == 2)
        {
          unsigned int v10 = (unsigned int *)&unk_1CD923830;
          uint64_t v11 = (unsigned int *)&unk_1CD9237F0;
        }
        else
        {
          if (a2 == 1) {
            llvm::report_fatal_error((llvm *)"grad_1d not supported on architecture!", a2);
          }
          unsigned int v10 = (unsigned int *)&unk_1CD9238B0;
          uint64_t v11 = (unsigned int *)&unk_1CD923870;
        }
        break;
      default:
        unsigned int v10 = (unsigned int *)&unk_1CD9236B0;
        uint64_t v11 = (unsigned int *)&unk_1CD923670;
        break;
    }
    if (a6) {
      unsigned int v10 = v11;
    }
    a9.i32[0] = a10;
    uint8x8_t v17 = (uint8x8_t)vcnt_s8(a9);
    v17.i16[0] = vaddlv_u8(v17);
    __int32 v18 = v17.i32[0];
    if (v17.i32[0] > 4u) {
      __int32 v18 = a3;
    }
    uint64_t v19 = v10[8 * a7 + 4 * a8 + v18 - 1];
    uint64_t result = v19;
    if (a5)
    {
      uint64_t result = 12501;
      switch((int)v19)
      {
        case 12497:
          return 12498;
        case 12498:
        case 12500:
        case 12501:
        case 12503:
        case 12505:
        case 12508:
        case 12510:
        case 12511:
        case 12513:
        case 12515:
        case 12518:
        case 12520:
        case 12521:
        case 12523:
        case 12525:
        case 12528:
        case 12530:
        case 12531:
        case 12533:
        case 12535:
        case 12536:
        case 12537:
        case 12538:
        case 12539:
        case 12542:
        case 12544:
        case 12545:
        case 12547:
        case 12549:
        case 12552:
        case 12554:
        case 12555:
        case 12557:
        case 12559:
        case 12562:
        case 12564:
        case 12565:
        case 12567:
        case 12569:
        case 12572:
        case 12574:
        case 12575:
        case 12577:
        case 12579:
        case 12580:
        case 12581:
        case 12582:
        case 12583:
        case 12586:
        case 12588:
        case 12589:
        case 12591:
        case 12593:
        case 12596:
        case 12598:
        case 12599:
        case 12601:
        case 12603:
        case 12606:
        case 12608:
        case 12609:
        case 12611:
        case 12613:
        case 12616:
        case 12618:
        case 12619:
        case 12621:
        case 12623:
        case 12624:
        case 12625:
        case 12626:
        case 12627:
        case 12630:
        case 12632:
        case 12633:
        case 12635:
        case 12637:
        case 12640:
        case 12642:
        case 12643:
        case 12645:
        case 12647:
        case 12650:
        case 12652:
        case 12653:
        case 12655:
        case 12657:
        case 12660:
        case 12662:
        case 12663:
        case 12665:
        case 12667:
        case 12668:
        case 12669:
        case 12670:
        case 12671:
        case 12672:
        case 12673:
        case 12674:
        case 12675:
        case 12676:
        case 12677:
        case 12678:
        case 12679:
        case 12680:
        case 12681:
        case 12682:
        case 12683:
        case 12684:
        case 12685:
        case 12686:
        case 12687:
        case 12688:
        case 12689:
        case 12690:
        case 12691:
        case 12694:
        case 12696:
        case 12697:
        case 12699:
        case 12701:
        case 12704:
        case 12706:
        case 12707:
        case 12709:
        case 12711:
        case 12714:
        case 12716:
        case 12717:
        case 12719:
        case 12721:
        case 12724:
        case 12726:
        case 12727:
        case 12729:
        case 12731:
        case 12732:
        case 12733:
        case 12734:
        case 12735:
        case 12738:
        case 12740:
        case 12741:
        case 12743:
        case 12745:
        case 12748:
        case 12750:
        case 12751:
        case 12753:
        case 12755:
        case 12758:
        case 12760:
        case 12761:
        case 12763:
        case 12765:
        case 12768:
        case 12770:
        case 12771:
        case 12773:
        case 12775:
        case 12776:
        case 12777:
        case 12778:
        case 12779:
        case 12782:
        case 12784:
        case 12785:
        case 12787:
        case 12789:
        case 12792:
        case 12794:
        case 12795:
        case 12797:
        case 12799:
        case 12802:
        case 12804:
        case 12805:
        case 12807:
        case 12809:
        case 12812:
        case 12814:
        case 12815:
        case 12817:
        case 12819:
        case 12820:
        case 12821:
        case 12822:
        case 12823:
        case 12826:
        case 12828:
        case 12829:
        case 12831:
        case 12833:
        case 12836:
        case 12838:
        case 12839:
        case 12841:
        case 12843:
        case 12846:
        case 12848:
        case 12849:
        case 12851:
        case 12853:
        case 12856:
        case 12858:
        case 12859:
        case 12861:
          goto LABEL_187;
        case 12499:
          return 12500;
        case 12502:
          return 12503;
        case 12504:
          return 12505;
        case 12506:
          return 12511;
        case 12507:
          return 12508;
        case 12509:
          return 12510;
        case 12512:
          return 12513;
        case 12514:
          return 12515;
        case 12516:
          return 12521;
        case 12517:
          return 12518;
        case 12519:
          return 12520;
        case 12522:
          return 12523;
        case 12524:
          return 12525;
        case 12526:
          return 12531;
        case 12527:
          return 12528;
        case 12529:
          return 12530;
        case 12532:
          return 12533;
        case 12534:
          return 12535;
        case 12540:
          return 12545;
        case 12541:
          return 12542;
        case 12543:
          return 12544;
        case 12546:
          return 12547;
        case 12548:
          return 12549;
        case 12550:
          return 12555;
        case 12551:
          return 12552;
        case 12553:
          return 12554;
        case 12556:
          return 12557;
        case 12558:
          return 12559;
        case 12560:
          return 12565;
        case 12561:
          return 12562;
        case 12563:
          return 12564;
        case 12566:
          return 12567;
        case 12568:
          return 12569;
        case 12570:
          return 12575;
        case 12571:
          return 12572;
        case 12573:
          return 12574;
        case 12576:
          return 12577;
        case 12578:
          return 12579;
        case 12584:
          return 12589;
        case 12585:
          return 12586;
        case 12587:
          return 12588;
        case 12590:
          return 12591;
        case 12592:
          return 12593;
        case 12594:
        case 12638:
          return 12599;
        case 12595:
          return 12596;
        case 12597:
          return 12598;
        case 12600:
          return 12601;
        case 12602:
          return 12603;
        case 12604:
        case 12648:
          return 12609;
        case 12605:
          return 12606;
        case 12607:
          return 12608;
        case 12610:
          return 12611;
        case 12612:
          return 12613;
        case 12614:
          return 12619;
        case 12615:
          return 12616;
        case 12617:
          return 12618;
        case 12620:
          return 12621;
        case 12622:
          return 12623;
        case 12628:
          return 12633;
        case 12629:
          return 12630;
        case 12631:
          return 12632;
        case 12634:
          return 12635;
        case 12636:
          return 12637;
        case 12639:
          return 12640;
        case 12641:
          return 12642;
        case 12644:
          return 12645;
        case 12646:
          return 12647;
        case 12649:
          return 12650;
        case 12651:
          return 12652;
        case 12654:
          return 12655;
        case 12656:
          return 12657;
        case 12658:
          return 12663;
        case 12659:
          return 12660;
        case 12661:
          return 12662;
        case 12664:
          return 12665;
        case 12666:
          return 12667;
        case 12692:
          return 12697;
        case 12693:
          return 12694;
        case 12695:
          return 12696;
        case 12698:
          return 12699;
        case 12700:
          return 12701;
        case 12702:
          return 12707;
        case 12703:
          return 12704;
        case 12705:
          return 12706;
        case 12708:
          return 12709;
        case 12710:
          return 12711;
        case 12712:
          return 12717;
        case 12713:
          return 12714;
        case 12715:
          return 12716;
        case 12718:
          return 12719;
        case 12720:
          return 12721;
        case 12722:
          return 12727;
        case 12723:
          return 12724;
        case 12725:
          return 12726;
        case 12728:
          return 12729;
        case 12730:
          return 12731;
        case 12736:
          return 12741;
        case 12737:
          return 12738;
        case 12739:
          return 12740;
        case 12742:
          return 12743;
        case 12744:
          return 12745;
        case 12746:
          return 12751;
        case 12747:
          return 12748;
        case 12749:
          return 12750;
        case 12752:
          return 12753;
        case 12754:
          return 12755;
        case 12756:
          return 12761;
        case 12757:
          return 12758;
        case 12759:
          return 12760;
        case 12762:
          return 12763;
        case 12764:
          return 12765;
        case 12766:
          return 12771;
        case 12767:
          return 12768;
        case 12769:
          return 12770;
        case 12772:
          return 12773;
        case 12774:
          return 12775;
        case 12780:
          return 12785;
        case 12781:
          return 12782;
        case 12783:
          return 12784;
        case 12786:
          return 12787;
        case 12788:
          return 12789;
        case 12790:
          return 12795;
        case 12791:
          return 12792;
        case 12793:
          return 12794;
        case 12796:
          return 12797;
        case 12798:
          return 12799;
        case 12800:
          return 12805;
        case 12801:
          return 12802;
        case 12803:
          return 12804;
        case 12806:
          return 12807;
        case 12808:
          return 12809;
        case 12810:
          return 12815;
        case 12811:
          return 12812;
        case 12813:
          return 12814;
        case 12816:
          return 12817;
        case 12818:
          return 12819;
        case 12824:
          return 12829;
        case 12825:
          return 12826;
        case 12827:
          return 12828;
        case 12830:
          return 12831;
        case 12832:
          return 12833;
        case 12834:
          return 12839;
        case 12835:
          return 12836;
        case 12837:
          return 12838;
        case 12840:
          return 12841;
        case 12842:
          return 12843;
        case 12844:
          return 12849;
        case 12845:
          return 12846;
        case 12847:
          return 12848;
        case 12850:
          return 12851;
        case 12852:
          return 12853;
        case 12854:
          return 12859;
        case 12855:
          return 12856;
        case 12857:
          return 12858;
        case 12860:
          return 12861;
        case 12862:
          return 12863;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t *sub_1CB8B6D8C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, unsigned int *a8, int *a9, int *a10, uint64_t a11)
{
  uint64_t v24[18] = *MEMORY[0x1E4F143B8];
  int v22 = v24;
  uint64_t v23 = 0x900000000;
  uint64_t v20 = a4;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a5);
  uint64_t v20 = *a6;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a7);
  uint64_t v20 = *a8;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  uint64_t v20 = *a9;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  uint64_t v20 = *a10;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CB8B55E4(a1, (uint64_t)&v22, a11);
  int v16 = sub_1CD801450(a1, a2, a3, (llvm *)4, 0, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v16;
}

uint64_t *sub_1CB8B6F2C(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, unsigned int a5, _OWORD *a6, _OWORD *a7, _OWORD *a8, _OWORD *a9, _OWORD *a10, _OWORD *a11, _OWORD *a12, _OWORD *a13, _OWORD *a14, uint64_t a15)
{
  v28[24] = *MEMORY[0x1E4F143B8];
  uint64_t v26 = v28;
  uint64_t v27 = 0xC00000000;
  uint64_t v24 = a5;
  char v25 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v26, (uint64_t)&v24);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a6);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a7);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a8);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a9);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a10);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a11);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a12);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a13);
  sub_1CD3D5F48(a1, (uint64_t)&v26, a14);
  sub_1CB8B55E4(a1, (uint64_t)&v26, a15);
  uint64_t v19 = sub_1CD801450(a1, 1003, a2, a3, a4, (uint64_t *)v26, v27);
  if (v26 != v28) {
    free(v26);
  }
  return v19;
}

uint64_t *sub_1CB8B70D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  uint64_t v8 = a2;
  uint64_t v9 = a1;
  v80[18] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v75 = a4;
  *((void *)&v75 + 1) = a5;
  unsigned int v10 = *(unsigned __int16 *)(a2 + 24);
  if (v10 > 0x1B5)
  {
    if (v10 - 438 < 2)
    {
      BOOL v13 = 1;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v10 == 11 || v10 == 35)
  {
    int v14 = *(unsigned __int16 *)(a4 + 24);
    if (v14 == 35 || v14 == 11)
    {
      uint64_t v30 = *(void *)(a2 + 80);
      uint64_t v31 = (unsigned __int8 *)(v30 + 24);
      if (*(_DWORD *)(v30 + 32) >= 0x41u) {
        uint64_t v31 = *(unsigned __int8 **)v31;
      }
      uint64_t v32 = *v31;
      uint64_t v33 = *(void *)(a4 + 80);
      __int16 v34 = (void *)(v33 + 24);
      if (*(_DWORD *)(v33 + 32) >= 0x41u) {
        __int16 v34 = (void *)*v34;
      }
      *(void *)&long long v74 = sub_1CD7EBF14(*(void *)(a1 + 296), v32 & 0xFFFFFFFFFFFF00FFLL | ((unint64_t)*(_DWORD *)v34 << 8), a6, (llvm *)4, 0, 1, 0);
      *((void *)&v74 + 1) = v35;
      uint64_t v36 = *(void *)(v9 + 296);
      uint64_t v37 = *(unsigned __int8 **)a6;
      BOOL v72 = v37;
      uint64_t v38 = v36;
      if (v37)
      {
        llvm::MetadataTracking::track((uint64_t)&v72, v37, 2);
        uint64_t v38 = *(void *)(v9 + 296);
      }
      int v73 = *((_DWORD *)a6 + 2);
      *(void *)&long long v71 = sub_1CD7EEB94(v38, 0, (llvm *)5, 0);
      *((void *)&v71 + 1) = v39;
      uint64_t v70 = 0;
      uint64_t v78 = v80;
      uint64_t v79 = 0x800000000;
      uint64_t v76 = 0;
      char v77 = 6;
      sub_1CD3D5EA0(v36, (uint64_t)&v78, (uint64_t)&v76);
      sub_1CD3D5F48(v36, (uint64_t)&v78, &v74);
      sub_1CD3D5F48(v36, (uint64_t)&v78, &v74);
      sub_1CD3D5F48(v36, (uint64_t)&v78, &v74);
      sub_1CD3D5F48(v36, (uint64_t)&v78, &v74);
      sub_1CD3D5F48(v36, (uint64_t)&v78, &v71);
      sub_1CB8B55E4(v36, (uint64_t)&v78, (uint64_t)&v70);
      uint64_t v40 = sub_1CD801450(v36, 1015, (uint64_t)&v72, (llvm *)0x1B, 0, (uint64_t *)v78, v79);
      if (v78 != v80) {
        free(v78);
      }
      int v41 = v72;
      if (!v72) {
        return v40;
      }
      int v42 = *v72;
      if ((v42 - 4) > 0x1E)
      {
        if ((v42 - 3) >= 0xFFFFFFFE) {
          int v53 = v72;
        }
        else {
          int v53 = 0;
        }
        if ((v42 - 3) < 0xFFFFFFFE) {
          goto LABEL_116;
        }
        unint64_t v44 = (unint64_t)(v53 + 8);
      }
      else
      {
        if ((v72[1] & 0x7F) != 2 && !*((_DWORD *)v72 + 3)) {
          return v40;
        }
        uint64_t v43 = *((void *)v72 + 2);
        if ((v43 & 4) == 0) {
          return v40;
        }
        unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
        if (!v44) {
          return v40;
        }
      }
      long long v54 = &v72;
LABEL_115:
      uint64_t v78 = v54;
      sub_1CC5FA668(v44 + 16, &v78);
      return v40;
    }
    goto LABEL_14;
  }
  if (v10 != 46)
  {
LABEL_14:
    BOOL v13 = 0;
    goto LABEL_15;
  }
  uint64_t v11 = *(void *)(**(void **)(a2 + 32) + 80);
  BOOL v12 = (void *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    BOOL v12 = (void *)*v12;
  }
  BOOL v13 = ((*v12 - 1986) & 0xFFFFFFFFFFFFFFFDLL) == 0;
LABEL_15:
  int v16 = *(unsigned __int16 *)(a4 + 24);
  if ((v16 - 438) >= 2)
  {
    if (v16 == 46)
    {
      uint64_t v17 = *(void *)(**(void **)(a4 + 32) + 80);
      __int32 v18 = (void *)(v17 + 24);
      if (*(_DWORD *)(v17 + 32) >= 0x41u) {
        __int32 v18 = (void *)*v18;
      }
      if (((*v18 - 1986) & 0xFFFFFFFFFFFFFFFDLL) == 0) {
        goto LABEL_20;
      }
      goto LABEL_79;
    }
    if (!v13)
    {
      if (v16 == 51)
      {
        uint64_t v45 = *(llvm::APFloatBase **)(a1 + 296);
        uint64_t v46 = *((void *)v45 + 104);
        if (v46) {
          __int16 v47 = *(_WORD *)(v46 + 8);
        }
        else {
          __int16 v47 = 0;
        }
        uint64_t v40 = sub_1CD7F3564(v45, (const char *)0xD8, (uint64_t)a6, (llvm *)0x1B, 0, a2, a3, v47);
        sub_1CD3D60FC(*(void *)(v9 + 296), v8, (uint64_t)a3, (uint64_t)v40);
        return v40;
      }
      goto LABEL_79;
    }
    if (v16 == 437)
    {
      int v22 = *(uint64_t **)(a4 + 32);
      int v23 = *(unsigned __int8 *)(*(void *)(*v22 + 40) + 16 * *((unsigned int *)v22 + 2));
      if (v23 != 27)
      {
        if (v23 != 28) {
          goto LABEL_79;
        }
        uint64_t v48 = v22[5];
        int v49 = *(unsigned __int16 *)(v48 + 24);
        if (v49 != 35 && v49 != 11) {
          goto LABEL_79;
        }
        uint64_t v51 = *(void *)(v48 + 80);
        if (*(_DWORD *)(v51 + 32) > 0x40u) {
          uint64_t v52 = **(void **)(v51 + 24);
        }
        else {
          uint64_t v52 = *(void *)(v51 + 24);
        }
        if (v52 == 1)
        {
          uint64_t v55 = *(void *)(a1 + 296);
          uint64_t v56 = v22[1];
          int v57 = 1;
        }
        else
        {
          if (v52 != 3) {
            goto LABEL_79;
          }
          uint64_t v55 = *(void *)(a1 + 296);
          uint64_t v56 = v22[1];
          int v57 = 2;
        }
        uint64_t v19 = sub_1CD8015C0(v55, v57, a6, (llvm *)0x1B, 0, *v22, v56);
        uint64_t v20 = v58;
        a1 = v9;
        a2 = v8;
        goto LABEL_35;
      }
      uint64_t v24 = v22[5];
      int v25 = *(unsigned __int16 *)(v24 + 24);
      if (v25 == 35 || v25 == 11)
      {
        uint64_t v27 = *(void *)(v24 + 80);
        uint64_t v28 = (void *)(v27 + 24);
        if (*(_DWORD *)(v27 + 32) >= 0x41u) {
          uint64_t v28 = (void *)*v28;
        }
        if (*v28 == 1)
        {
          uint64_t v20 = v22[1];
          uint64_t v19 = (uint64_t *)*v22;
          goto LABEL_35;
        }
      }
    }
    else if (v16 == 51)
    {
      uint64_t v19 = 0;
      uint64_t v20 = 0;
LABEL_35:
      int v21 = 0;
      goto LABEL_36;
    }
LABEL_79:
    uint64_t v59 = *(void *)(a1 + 296);
    unint64_t v60 = *(unsigned __int8 **)a6;
    if (v10 != 51)
    {
      uint64_t v66 = *(unsigned __int8 **)a6;
      if (v60) {
        llvm::MetadataTracking::track((uint64_t)&v66, v60, 2);
      }
      int v67 = *((_DWORD *)a6 + 2);
      *(void *)&long long v74 = 0x100000008;
      BYTE8(v74) = 6;
      *(void *)&long long v71 = 0;
      uint64_t v78 = v80;
      uint64_t v79 = 0x900000000;
      uint64_t v76 = 0;
      char v77 = 6;
      sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v76);
      if (v79 >= HIDWORD(v79)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v62 = (uint64_t *)((char *)v78 + 16 * v79);
      *unsigned int v62 = v8;
      v62[1] = (uint64_t)a3;
      LODWORD(v79) = v79 + 1;
      uint64_t v76 = 0;
      char v77 = 6;
      sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v76);
      sub_1CD3D5F48(v59, (uint64_t)&v78, &v75);
      uint64_t v76 = 0;
      char v77 = 6;
      sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v76);
      sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v74);
      uint64_t v76 = 8;
      char v77 = 6;
      sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v76);
      sub_1CB8B55E4(v59, (uint64_t)&v78, (uint64_t)&v71);
      uint64_t v40 = sub_1CD801450(v59, 12407, (uint64_t)&v66, (llvm *)0x1B, 0, (uint64_t *)v78, v79);
      if (v78 != v80) {
        free(v78);
      }
      int v41 = v66;
      if (!v66) {
        return v40;
      }
      int v42 = *v66;
      if ((v42 - 4) > 0x1E)
      {
        if ((v42 - 3) >= 0xFFFFFFFE) {
          int v65 = v66;
        }
        else {
          int v65 = 0;
        }
        if ((v42 - 3) < 0xFFFFFFFE) {
          goto LABEL_116;
        }
        unint64_t v44 = (unint64_t)(v65 + 8);
      }
      else
      {
        if ((v66[1] & 0x7F) != 2 && !*((_DWORD *)v66 + 3)) {
          return v40;
        }
        uint64_t v63 = *((void *)v66 + 2);
        if ((v63 & 4) == 0) {
          return v40;
        }
        unint64_t v44 = v63 & 0xFFFFFFFFFFFFFFF8;
        if (!v44) {
          return v40;
        }
      }
      long long v54 = &v66;
      goto LABEL_115;
    }
    uint64_t v68 = *(unsigned __int8 **)a6;
    if (v60) {
      llvm::MetadataTracking::track((uint64_t)&v68, v60, 2);
    }
    int v69 = *((_DWORD *)a6 + 2);
    *(void *)&long long v74 = 0x100000000;
    BYTE8(v74) = 6;
    uint64_t v70 = 0;
    *(void *)&long long v71 = 0x100000008;
    BYTE8(v71) = 6;
    uint64_t v78 = v80;
    uint64_t v79 = 0x800000000;
    uint64_t v76 = 0;
    char v77 = 6;
    sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v76);
    sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v74);
    sub_1CD3D5F48(v59, (uint64_t)&v78, &v75);
    uint64_t v76 = 0;
    char v77 = 6;
    sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v76);
    sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v71);
    uint64_t v76 = 8;
    char v77 = 6;
    sub_1CD3D5EA0(v59, (uint64_t)&v78, (uint64_t)&v76);
    sub_1CB8B55E4(v59, (uint64_t)&v78, (uint64_t)&v70);
    uint64_t v40 = sub_1CD801450(v59, 12435, (uint64_t)&v68, (llvm *)0x1B, 0, (uint64_t *)v78, v79);
    if (v78 != v80) {
      free(v78);
    }
    int v41 = v68;
    if (!v68) {
      return v40;
    }
    int v42 = *v68;
    if ((v42 - 4) <= 0x1E)
    {
      if ((v68[1] & 0x7F) != 2 && !*((_DWORD *)v68 + 3)) {
        return v40;
      }
      uint64_t v61 = *((void *)v68 + 2);
      if ((v61 & 4) == 0) {
        return v40;
      }
      unint64_t v44 = v61 & 0xFFFFFFFFFFFFFFF8;
      if (!v44) {
        return v40;
      }
      goto LABEL_108;
    }
    if ((v42 - 3) >= 0xFFFFFFFE) {
      uint64_t v64 = v68;
    }
    else {
      uint64_t v64 = 0;
    }
    if ((v42 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v44 = (unint64_t)(v64 + 8);
LABEL_108:
      long long v54 = &v68;
      goto LABEL_115;
    }
LABEL_116:
    if (v42 == 3) {
      *((void *)v41 + 1) = 0;
    }
    return v40;
  }
LABEL_20:
  a2 = a4;
  uint64_t v19 = (uint64_t *)v8;
  uint64_t v20 = (uint64_t)a3;
  int v21 = 1;
LABEL_36:

  return sub_1CB8B8524(a1, a2, (llvm *)0x1B, 0, (uint64_t)v19, v20, v21);
}

uint64_t *sub_1CB8B7978(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6 = *(void **)(a2 + 32);
  uint64_t v7 = *(void *)(*v6 + 80);
  uint64_t v8 = (void *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u) {
    uint64_t v8 = (void *)*v8;
  }
  if (*v8 == 2094) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 2;
  }
  uint64_t v10 = v6[5];
  uint64_t v11 = *(void *)(v6[10] + 80);
  BOOL v12 = (void *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    BOOL v12 = (void *)*v12;
  }
  uint64_t v13 = v6[6];
  int v14 = (void *)*v12;
  int v15 = *(unsigned __int8 **)(a2 + 64);
  int v42 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v42, v15, 2);
  }
  int v43 = *(_DWORD *)(a2 + 60);
  if (*(_WORD *)(v10 + 24) == 395)
  {
    uint64_t v16 = *(void *)(**(void **)(v10 + 32) + 80);
    uint64_t v17 = (void *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u) {
      uint64_t v17 = (void *)*v17;
    }
    __int32 v18 = sub_1CD7ED9FC(*(void *)(a1 + 296), 64, (llvm *)0x1B, 0, (v14 >> 1) + (*v17 >> 1), 2);
  }
  else
  {
    if (v14 <= 1) {
      int v32 = 1;
    }
    else {
      int v32 = 2;
    }
    __int32 v18 = sub_1CD8015C0(*(void *)(a1 + 296), v32, (const llvm::APInt *)&v42, (llvm *)0x1B, 0, v10, v13);
  }
  *(void *)&long long v41 = v18;
  DWORD2(v41) = v19;
  if (a3) {
    unsigned __int8 v20 = 9;
  }
  else {
    unsigned __int8 v20 = 10;
  }
  if (a3) {
    int v21 = 13420;
  }
  else {
    int v21 = 13412;
  }
  int v22 = v21 & 0xFFFFFFFE | v14 & 1;
  uint64_t v23 = *(void *)(a1 + 296);
  uint64_t v39 = v42;
  if (v42) {
    llvm::MetadataTracking::track((uint64_t)&v39, v42, 2);
  }
  int v40 = v43;
  uint64_t v37 = (unsigned __int8 **)v9;
  char v38 = 4;
  unsigned int v36 = 0;
  uint64_t v35 = 0;
  uint64_t v24 = sub_1CB8BE018(v23, v22, (uint64_t)&v39, v20, 0, (uint64_t)&v37, &v41, &v36, (uint64_t)&v35);
  if (v39)
  {
    int v25 = *v39;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        uint64_t v28 = v39;
      }
      else {
        uint64_t v28 = 0;
      }
      if ((v25 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v29 = (unint64_t)(v28 + 8);
LABEL_36:
        uint64_t v37 = &v39;
        sub_1CC5FA668(v29 + 16, &v37);
        goto LABEL_26;
      }
      if (v25 == 3) {
        *((void *)v39 + 1) = 0;
      }
    }
    else if ((v39[1] & 0x7F) == 2 || *((_DWORD *)v39 + 3))
    {
      uint64_t v33 = *((void *)v39 + 2);
      if ((v33 & 4) != 0)
      {
        unint64_t v29 = v33 & 0xFFFFFFFFFFFFFFF8;
        if (v29) {
          goto LABEL_36;
        }
      }
    }
  }
LABEL_26:
  if (v42)
  {
    int v26 = *v42;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v30 = v42;
      }
      else {
        uint64_t v30 = 0;
      }
      if ((v26 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v31 = (unint64_t)(v30 + 8);
LABEL_42:
        *(void *)&long long v41 = &v42;
        sub_1CC5FA668(v31 + 16, &v41);
        return v24;
      }
      if (v26 == 3) {
        *((void *)v42 + 1) = 0;
      }
    }
    else if ((v42[1] & 0x7F) == 2 || *((_DWORD *)v42 + 3))
    {
      uint64_t v34 = *((void *)v42 + 2);
      if ((v34 & 4) != 0)
      {
        unint64_t v31 = v34 & 0xFFFFFFFFFFFFFFF8;
        if (v31) {
          goto LABEL_42;
        }
      }
    }
  }
  return v24;
}

uint64_t *sub_1CB8B7C44(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6 = *(void **)(a2 + 32);
  uint64_t v7 = *(void *)(*v6 + 80);
  uint64_t v8 = (void *)(v7 + 24);
  if (*(_DWORD *)(v7 + 32) >= 0x41u) {
    uint64_t v8 = (void *)*v8;
  }
  if (*v8 == 2093) {
    uint64_t v9 = 7;
  }
  else {
    uint64_t v9 = 6;
  }
  uint64_t v10 = v6[5];
  uint64_t v11 = *(void *)(v6[10] + 80);
  BOOL v12 = (unsigned int *)(v11 + 24);
  if (*(_DWORD *)(v11 + 32) >= 0x41u) {
    BOOL v12 = *(unsigned int **)v12;
  }
  uint64_t v13 = v6[6];
  uint64_t v14 = *v12;
  int v15 = *(unsigned __int8 **)(a2 + 64);
  long long v41 = v15;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v41, v15, 2);
  }
  int v42 = *(_DWORD *)(a2 + 60);
  if (*(_WORD *)(v10 + 24) == 395)
  {
    uint64_t v16 = *(void *)(**(void **)(v10 + 32) + 80);
    uint64_t v17 = (void *)(v16 + 24);
    if (*(_DWORD *)(v16 + 32) >= 0x41u) {
      uint64_t v17 = (void *)*v17;
    }
    __int32 v18 = sub_1CD7ED9FC(*(void *)(a1 + 296), 64, (llvm *)4, 0, v14 + (*v17 >> 1), 2);
  }
  else
  {
    if (v14 == 1) {
      int v31 = 2;
    }
    else {
      int v31 = 1;
    }
    __int32 v18 = sub_1CD8015C0(*(void *)(a1 + 296), v31, (const llvm::APInt *)&v41, (llvm *)4, 0, v10, v13);
  }
  *(void *)&long long v40 = v18;
  DWORD2(v40) = v19;
  if (a3) {
    int v20 = 13423;
  }
  else {
    int v20 = 13415;
  }
  uint64_t v21 = *(void *)(a1 + 296);
  char v38 = v41;
  if (v41) {
    llvm::MetadataTracking::track((uint64_t)&v38, v41, 2);
  }
  int v39 = v42;
  unsigned int v36 = (unsigned __int8 **)v9;
  char v37 = 4;
  unsigned int v35 = 0;
  uint64_t v34 = 0;
  if (a3) {
    unsigned int v22 = 9;
  }
  else {
    unsigned int v22 = 10;
  }
  uint64_t v23 = sub_1CB8BE018(v21, v20, (uint64_t)&v38, v22, 0, (uint64_t)&v36, &v40, &v35, (uint64_t)&v34);
  if (v38)
  {
    int v24 = *v38;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        uint64_t v27 = v38;
      }
      else {
        uint64_t v27 = 0;
      }
      if ((v24 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v28 = (unint64_t)(v27 + 8);
LABEL_36:
        unsigned int v36 = &v38;
        sub_1CC5FA668(v28 + 16, &v36);
        goto LABEL_26;
      }
      if (v24 == 3) {
        *((void *)v38 + 1) = 0;
      }
    }
    else if ((v38[1] & 0x7F) == 2 || *((_DWORD *)v38 + 3))
    {
      uint64_t v32 = *((void *)v38 + 2);
      if ((v32 & 4) != 0)
      {
        unint64_t v28 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (v28) {
          goto LABEL_36;
        }
      }
    }
  }
LABEL_26:
  if (v41)
  {
    int v25 = *v41;
    if ((v25 - 4) > 0x1E)
    {
      if ((v25 - 3) >= 0xFFFFFFFE) {
        unint64_t v29 = v41;
      }
      else {
        unint64_t v29 = 0;
      }
      if ((v25 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v30 = (unint64_t)(v29 + 8);
LABEL_42:
        *(void *)&long long v40 = &v41;
        sub_1CC5FA668(v30 + 16, &v40);
        return v23;
      }
      if (v25 == 3) {
        *((void *)v41 + 1) = 0;
      }
    }
    else if ((v41[1] & 0x7F) == 2 || *((_DWORD *)v41 + 3))
    {
      uint64_t v33 = *((void *)v41 + 2);
      if ((v33 & 4) != 0)
      {
        unint64_t v30 = v33 & 0xFFFFFFFFFFFFFFF8;
        if (v30) {
          goto LABEL_42;
        }
      }
    }
  }
  return v23;
}

uint64_t sub_1CB8B7F08(uint64_t a1, void *a2)
{
  if (**(unsigned char **)(a1 + 40) != 9) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 **)(a1 + 64);
  unsigned int v36 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v36, v4, 2);
  }
  int v37 = *(_DWORD *)(a1 + 60);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(v5 + 40);
  unint64_t v7 = *(void *)(v5 + 48);
  if (*(_WORD *)(v6 + 24) != 222) {
    goto LABEL_11;
  }
  uint64_t v8 = **(void **)(v6 + 32);
  if (*(_WORD *)(v8 + 24) != 46) {
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(**(void **)(v8 + 32) + 80);
  uint64_t v10 = (void *)(v9 + 24);
  if (*(_DWORD *)(v9 + 32) >= 0x41u) {
    uint64_t v10 = (void *)*v10;
  }
  if (*v10 == 1830)
  {
    unint64_t v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 8);
    uint64_t v11 = *(void *)v5;
  }
  else
  {
LABEL_11:
    uint64_t v11 = *(void *)(v5 + 40);
    uint64_t v6 = *(void *)v5;
  }
  if (*(_WORD *)(v6 + 24) != 222) {
    goto LABEL_33;
  }
  uint64_t v13 = *(uint64_t **)(v6 + 32);
  uint64_t v14 = *v13;
  if (*(_WORD *)(*v13 + 24) != 46) {
    goto LABEL_33;
  }
  uint64_t v15 = *(void *)(v14 + 32);
  uint64_t v16 = *(void *)(*(void *)v15 + 80);
  uint64_t v17 = (void *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u) {
    uint64_t v17 = (void *)*v17;
  }
  if (*v17 == 1830)
  {
    uint64_t v18 = *(void *)(v15 + 40);
    uint64_t v19 = *(void *)(v18 + 48);
    if (!v19) {
      goto LABEL_30;
    }
    int v20 = *(_DWORD *)(v15 + 48);
    int v21 = 1;
    do
    {
      if (*(_DWORD *)(v19 + 8) == v20)
      {
        if (!v21) {
          goto LABEL_30;
        }
        --v21;
      }
      uint64_t v19 = *(void *)(v19 + 32);
    }
    while (v19);
    if (v21
      || ((uint64_t v12 = 0, v22 = *(unsigned __int16 *)(v18 + 24), (v22 - 96) <= 0x2D)
        ? (BOOL v23 = ((1 << (v22 - 96)) & 0x200000000005) == 0)
        : (BOOL v23 = 1),
          v23 && v22 != 443))
    {
LABEL_30:
      uint64_t v24 = v13[1];
      int v25 = sub_1CD7ECDC4((uint64_t)a2, (uint64_t)&v36, 9, 0, 0, -1.0);
      __int16 v28 = 0;
      uint64_t v29 = a2[104];
      if (v29) {
        __int16 v28 = *(_WORD *)(v29 + 8);
      }
      unint64_t v30 = sub_1CD7F5D38(a2, (const char *)0x8D, (const llvm::APInt *)&v36, (llvm *)9, 0, v14, v24, v27, (uint64_t)v25, v26, v11, v7, SHIDWORD(v7), v28);
      sub_1CD3D60FC((uint64_t)a2, a1, 0, (uint64_t)v30);
      sub_1CCFCC50C((uint64_t)a2, a1, (uint64_t)v30);
      sub_1CD7EA438(a2, a1);
      uint64_t v12 = 1;
    }
  }
  else
  {
LABEL_33:
    uint64_t v12 = 0;
  }
  if (v36)
  {
    int v31 = *v36;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        uint64_t v33 = v36;
      }
      else {
        uint64_t v33 = 0;
      }
      if ((v31 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v34 = (unint64_t)(v33 + 8);
LABEL_44:
        char v38 = &v36;
        sub_1CC5FA668(v34 + 16, &v38);
        return v12;
      }
      if (v31 == 3) {
        *((void *)v36 + 1) = 0;
      }
    }
    else if ((v36[1] & 0x7F) == 2 || *((_DWORD *)v36 + 3))
    {
      uint64_t v35 = *((void *)v36 + 2);
      if ((v35 & 4) != 0)
      {
        unint64_t v34 = v35 & 0xFFFFFFFFFFFFFFF8;
        if (v34) {
          goto LABEL_44;
        }
      }
    }
  }
  return v12;
}

uint64_t *sub_1CB8B81C8(uint64_t *a1, int a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 **a9)
{
  uint64_t v15 = *a9;
  if (a3 != 9)
  {
    if (a2)
    {
      long long v40 = *a9;
      if (v15) {
        llvm::MetadataTracking::track((uint64_t)&v40, v15, 2);
      }
      int v41 = *((_DWORD *)a9 + 2);
      *((void *)&v35 + 1) = a6;
      *((void *)&v31 + 1) = a8;
      *(void *)&long long v35 = a5;
      *(void *)&long long v31 = a7;
      uint64_t v16 = sub_1CB8C2108(a1, 4, a7, a8, 1, a5, a6, 0, v31, v35, (const llvm::APInt *)&v40);
      uint64_t v17 = v40;
      if (!v40) {
        return v16;
      }
      int v18 = *v40;
      if ((v18 - 4) > 0x1E)
      {
        if ((v18 - 3) >= 0xFFFFFFFE) {
          uint64_t v26 = v40;
        }
        else {
          uint64_t v26 = 0;
        }
        if ((v18 - 3) < 0xFFFFFFFE) {
          goto LABEL_65;
        }
        unint64_t v20 = (unint64_t)(v26 + 8);
      }
      else
      {
        if ((v40[1] & 0x7F) != 2 && !*((_DWORD *)v40 + 3)) {
          return v16;
        }
        uint64_t v21 = *((void *)v40 + 2);
        if ((v21 & 4) == 0) {
          return v16;
        }
        unint64_t v20 = v21 & 0xFFFFFFFFFFFFFFF8;
        if (!v20) {
          return v16;
        }
      }
      int v25 = &v40;
      goto LABEL_64;
    }
    char v38 = *a9;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v38, v15, 2);
    }
    int v39 = *((_DWORD *)a9 + 2);
    *((void *)&v37 + 1) = a6;
    *((void *)&v33 + 1) = a8;
    *(void *)&long long v37 = a5;
    *(void *)&long long v33 = a7;
    uint64_t v16 = sub_1CB8C2108(a1, 4, a7, a8, 0, a5, a6, 1, v33, v37, (const llvm::APInt *)&v38);
    uint64_t v17 = v38;
    if (!v38) {
      return v16;
    }
    int v18 = *v38;
    if ((v18 - 4) > 0x1E)
    {
      if ((v18 - 3) >= 0xFFFFFFFE) {
        __int16 v28 = v38;
      }
      else {
        __int16 v28 = 0;
      }
      if ((v18 - 3) < 0xFFFFFFFE) {
        goto LABEL_65;
      }
      unint64_t v20 = (unint64_t)(v28 + 8);
    }
    else
    {
      if ((v38[1] & 0x7F) != 2 && !*((_DWORD *)v38 + 3)) {
        return v16;
      }
      uint64_t v23 = *((void *)v38 + 2);
      if ((v23 & 4) == 0) {
        return v16;
      }
      unint64_t v20 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        return v16;
      }
    }
    int v25 = &v38;
    goto LABEL_64;
  }
  if (!a2)
  {
    int v42 = *a9;
    if (v15) {
      llvm::MetadataTracking::track((uint64_t)&v42, v15, 2);
    }
    int v43 = *((_DWORD *)a9 + 2);
    *((void *)&v36 + 1) = a6;
    *((void *)&v32 + 1) = a8;
    *(void *)&long long v36 = a5;
    *(void *)&long long v32 = a7;
    uint64_t v16 = sub_1CD3D79F0(a1, 4, a7, a8, 0, a5, a6, 1, v32, v36, (const llvm::APInt *)&v42);
    uint64_t v17 = v42;
    if (!v42) {
      return v16;
    }
    int v18 = *v42;
    if ((v18 - 4) <= 0x1E)
    {
      if ((v42[1] & 0x7F) != 2 && !*((_DWORD *)v42 + 3)) {
        return v16;
      }
      uint64_t v22 = *((void *)v42 + 2);
      if ((v22 & 4) == 0) {
        return v16;
      }
      unint64_t v20 = v22 & 0xFFFFFFFFFFFFFFF8;
      if (!v20) {
        return v16;
      }
LABEL_57:
      int v25 = &v42;
      goto LABEL_64;
    }
    if ((v18 - 3) >= 0xFFFFFFFE) {
      uint64_t v27 = v42;
    }
    else {
      uint64_t v27 = 0;
    }
    if ((v18 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unint64_t)(v27 + 8);
      goto LABEL_57;
    }
LABEL_65:
    if (v18 == 3) {
      *((void *)v17 + 1) = 0;
    }
    return v16;
  }
  unint64_t v44 = *a9;
  if (v15) {
    llvm::MetadataTracking::track((uint64_t)&v44, v15, 2);
  }
  int v45 = *((_DWORD *)a9 + 2);
  *((void *)&v34 + 1) = a6;
  *((void *)&v30 + 1) = a8;
  *(void *)&long long v34 = a5;
  *(void *)&long long v30 = a7;
  uint64_t v16 = sub_1CD3D79F0(a1, 4, a7, a8, 1, a5, a6, 0, v30, v34, (const llvm::APInt *)&v44);
  uint64_t v17 = v44;
  if (!v44) {
    return v16;
  }
  int v18 = *v44;
  if ((v18 - 4) > 0x1E)
  {
    if ((v18 - 3) >= 0xFFFFFFFE) {
      uint64_t v24 = v44;
    }
    else {
      uint64_t v24 = 0;
    }
    if ((v18 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v20 = (unint64_t)(v24 + 8);
LABEL_45:
      int v25 = &v44;
LABEL_64:
      uint64_t v46 = v25;
      sub_1CC5FA668(v20 + 16, &v46);
      return v16;
    }
    goto LABEL_65;
  }
  if ((v44[1] & 0x7F) == 2 || *((_DWORD *)v44 + 3))
  {
    uint64_t v19 = *((void *)v44 + 2);
    if ((v19 & 4) != 0)
    {
      unint64_t v20 = v19 & 0xFFFFFFFFFFFFFFF8;
      if (v20) {
        goto LABEL_45;
      }
    }
  }
  return v16;
}

uint64_t *sub_1CB8B8524(uint64_t a1, uint64_t a2, llvm *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v60[16] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v55 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v55, v10, 2);
  }
  int v56 = *(_DWORD *)(a2 + 60);
  unsigned int v11 = sub_1CB8BE160(a2);
  uint64_t v12 = (uint64_t *)(*(void *)(a2 + 32) + 40 * (*(_WORD *)(a2 + 24) == 46));
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  uint64_t v15 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v55, (llvm *)5, 0, 1, 0);
  uint64_t v17 = v15;
  int v18 = v16;
  BOOL v19 = 0;
  if (a5) {
    BOOL v19 = *(unsigned __int16 *)(a5 + 24) != 51;
  }
  uint64_t v47 = a5;
  BOOL v20 = *(unsigned __int8 *)(*(void *)(v13 + 40) + 16 * v14) == 9;
  if (*(_WORD *)(v13 + 24) == 215)
  {
    uint64_t v21 = *(void *)(v13 + 32);
    uint64_t v13 = *(void *)v21;
    unint64_t v14 = v14 & 0xFFFFFFFF00000000 | *(unsigned int *)(v21 + 8);
    BOOL v20 = 1;
  }
  uint64_t v58 = v60;
  v60[0] = v15;
  v60[1] = v16;
  uint64_t v59 = 0x800000001;
  uint64_t v23 = sub_1CD7EBF14(*(void *)(a1 + 296), v11 | 0x100000000, (const llvm::APInt *)&v55, (llvm *)6, 0, 1, 0);
  if (v59 >= HIDWORD(v59)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v24 = (uint64_t **)((char *)v58 + 16 * v59);
  *uint64_t v24 = v23;
  v24[1] = v22;
  LODWORD(v59) = v59 + 1;
  *(void *)&long long v54 = 0;
  DWORD2(v54) = 0;
  uint64_t v52 = 0;
  LODWORD(v53) = 0;
  if (v20)
  {
    if ((sub_1CB896BAC(a1, v13, v14, (uint64_t)&v54, (uint64_t)&v52, 0, 1, 0, 0, 0, 0) & 1) == 0)
    {
LABEL_10:
      if (v59 >= HIDWORD(v59)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v25 = (uint64_t *)((char *)v58 + 16 * v59);
      uint64_t *v25 = v13;
      v25[1] = v14;
      unsigned int v26 = v59 + 1;
      LODWORD(v59) = v26;
      if (v26 >= HIDWORD(v59)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v27 = (char *)v58 + 16 * v26;
      *(void *)uint64_t v27 = v17;
      __int16 v28 = v18;
      goto LABEL_17;
    }
  }
  else if (!sub_1CB896BAC(a1, v13, v14, (uint64_t)&v54, (uint64_t)&v52, 0, 0, 0, 0, 0, 0))
  {
    goto LABEL_10;
  }
  if (v59 >= HIDWORD(v59)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *((_OWORD *)v58 + v59) = v54;
  unsigned int v29 = v59 + 1;
  LODWORD(v59) = v29;
  __int16 v28 = v53;
  if (v29 >= HIDWORD(v59)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v27 = (char *)v58 + 16 * v29;
  *(void *)uint64_t v27 = v52;
LABEL_17:
  *((void *)v27 + 1) = v28;
  unsigned int v30 = v59 + 1;
  LODWORD(v59) = v59 + 1;
  if (v19)
  {
    if (v30 >= HIDWORD(v59)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v31 = (char *)v58 + 16 * v30;
    *long long v31 = v47;
    v31[1] = a6;
    unsigned int v32 = v59 + 1;
    LODWORD(v59) = v32;
    if (v32 >= HIDWORD(v59)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v33 = (uint64_t **)((char *)v58 + 16 * v32);
    *long long v33 = v17;
    v33[1] = v18;
    LODWORD(v59) = v59 + 1;
    if (v20) {
      int v34 = 12123;
    }
    else {
      int v34 = 12121;
    }
    if (v20) {
      int v35 = 12129;
    }
    else {
      int v35 = 12127;
    }
    if (a7) {
      int v36 = v35;
    }
    else {
      int v36 = v34;
    }
  }
  else if (a7)
  {
    char v38 = sub_1CD7EBF14(*(void *)(a1 + 296), 0, (const llvm::APInt *)&v55, (llvm *)5, 0, 1, 0);
    if (v59 >= HIDWORD(v59)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v39 = (uint64_t **)((char *)v58 + 16 * v59);
    *int v39 = v38;
    v39[1] = v37;
    LODWORD(v59) = v59 + 1;
    if (v20) {
      int v36 = 12130;
    }
    else {
      int v36 = 12128;
    }
  }
  else if (v20)
  {
    int v36 = 12143;
  }
  else
  {
    int v36 = 12142;
  }
  uint64_t v40 = *(void *)(a1 + 296);
  uint64_t v57 = 0;
  sub_1CB8B55E4(v40, (uint64_t)&v58, (uint64_t)&v57);
  int v41 = sub_1CD801450(*(void *)(a1 + 296), v36, (uint64_t)&v55, a3, a4, (uint64_t *)v58, v59);
  if (v58 != v60) {
    free(v58);
  }
  if (v55)
  {
    int v42 = *v55;
    if ((v42 - 4) > 0x1E)
    {
      if ((v42 - 3) >= 0xFFFFFFFE) {
        unint64_t v44 = v55;
      }
      else {
        unint64_t v44 = 0;
      }
      if ((v42 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v45 = (unint64_t)(v44 + 8);
LABEL_49:
        uint64_t v58 = &v55;
        sub_1CC5FA668(v45 + 16, &v58);
        return v41;
      }
      if (v42 == 3) {
        *((void *)v55 + 1) = 0;
      }
    }
    else if ((v55[1] & 0x7F) == 2 || *((_DWORD *)v55 + 3))
    {
      uint64_t v46 = *((void *)v55 + 2);
      if ((v46 & 4) != 0)
      {
        unint64_t v45 = v46 & 0xFFFFFFFFFFFFFFF8;
        if (v45) {
          goto LABEL_49;
        }
      }
    }
  }
  return v41;
}

uint64_t *sub_1CB8B8A7C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  v89[16] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v12 = *(llvm **)v10;
  uint64_t v61 = *(void *)(v10 + 8);
  long long v13 = *(_OWORD *)(v11 + 40);
  long long v83 = *(_OWORD *)(v11 + 80);
  long long v84 = v13;
  uint64_t v14 = v13;
  uint64_t v15 = sub_1CD3D62F0(a1, v13, DWORD2(v13), 0);
  unsigned int v17 = v16;
  *(void *)&long long v82 = v15;
  *((void *)&v82 + 1) = v16;
  *(void *)&long long v81 = sub_1CD3D62F0(a1, v83, DWORD2(v83), 0);
  *((void *)&v81 + 1) = v18;
  unint64_t v19 = (unint64_t)v15 | v17;
  BOOL v20 = v19 != 0;
  if (!v19)
  {
    if (a3 != 58 || ((unint64_t)v81 | v18) == 0)
    {
      if (a4) {
        uint64_t v23 = 8;
      }
      else {
        uint64_t v23 = 0;
      }
      if (!((unint64_t)v81 | v18))
      {
        if (a5)
        {
          if (v12 == 4)
          {
            if (a3 == 57) {
              int v52 = 10145;
            }
            else {
              int v52 = 4624;
            }
            BOOL v51 = a3 == 56;
            int v53 = 2640;
          }
          else
          {
            BOOL v51 = a3 == 56;
            int v52 = 10131;
            int v53 = 2626;
          }
        }
        else if (v12 == 4)
        {
          if (a3 == 57) {
            int v52 = 10249;
          }
          else {
            int v52 = 4664;
          }
          BOOL v51 = a3 == 56;
          int v53 = 2744;
        }
        else
        {
          if (a3 == 57) {
            int v52 = 10199;
          }
          else {
            int v52 = 4643;
          }
          BOOL v51 = a3 == 56;
          int v53 = 2694;
        }
        if (v51) {
          int v54 = v53;
        }
        else {
          int v54 = v52;
        }
        uint64_t v55 = *(unsigned __int8 **)(a2 + 64);
        uint64_t v66 = v55;
        if (v55) {
          llvm::MetadataTracking::track((uint64_t)&v66, v55, 2);
        }
        int v67 = *(_DWORD *)(a2 + 60);
        uint64_t v77 = 0;
        uint64_t v87 = v89;
        uint64_t v88 = 0x700000000;
        uint64_t v85 = 0;
        char v86 = 6;
        sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
        sub_1CD3D5F48(a1, (uint64_t)&v87, &v84);
        uint64_t v85 = v23;
        char v86 = 6;
        sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
        sub_1CD3D5F48(a1, (uint64_t)&v87, &v83);
        uint64_t v85 = v23;
        char v86 = 6;
        sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
        sub_1CB8B55E4(a1, (uint64_t)&v87, (uint64_t)&v77);
        unsigned int v29 = sub_1CD801450(a1, v54, (uint64_t)&v66, v12, v61, v87, v88);
        if (v87 != v89) {
          free(v87);
        }
        unsigned int v30 = v66;
        if (!v66) {
          return v29;
        }
        int v31 = *v66;
        if ((v31 - 4) > 0x1E)
        {
          if ((v31 - 3) >= 0xFFFFFFFE) {
            uint64_t v59 = v66;
          }
          else {
            uint64_t v59 = 0;
          }
          if ((v31 - 3) < 0xFFFFFFFE) {
            goto LABEL_169;
          }
          unint64_t v33 = (unint64_t)(v59 + 8);
        }
        else
        {
          if ((v66[1] & 0x7F) != 2 && !*((_DWORD *)v66 + 3)) {
            return v29;
          }
          uint64_t v56 = *((void *)v66 + 2);
          if ((v56 & 4) == 0) {
            return v29;
          }
          unint64_t v33 = v56 & 0xFFFFFFFFFFFFFFF8;
          if (!v33) {
            return v29;
          }
        }
        int v43 = (uint64_t *)&v66;
        goto LABEL_168;
      }
      goto LABEL_56;
    }
LABEL_21:
    uint64_t v25 = *(void *)(v83 + 80);
    unsigned int v26 = (void *)(v25 + 24);
    if (*(_DWORD *)(v25 + 32) >= 0x41u) {
      unsigned int v26 = (void *)*v26;
    }
    if (!*v26)
    {
LABEL_24:
      uint64_t v27 = *(unsigned __int8 **)(a2 + 64);
      if (v12 != 4)
      {
        uint64_t v68 = *(unsigned __int8 **)(a2 + 64);
        if (v27) {
          llvm::MetadataTracking::track((uint64_t)&v68, v27, 2);
        }
        int v69 = *(_DWORD *)(a2 + 60);
        uint64_t v77 = 0x100000000;
        char v78 = 6;
        uint64_t v75 = 0x100000000;
        char v76 = 6;
        uint64_t v73 = 0x100000000;
        char v74 = 6;
        *(void *)&long long v72 = sub_1CD7EEB94(a1, 0, (llvm *)5, 0);
        *((void *)&v72 + 1) = v34;
        *(void *)&long long v71 = 0;
        uint64_t v87 = v89;
        uint64_t v88 = 0x700000000;
        uint64_t v85 = 0;
        char v86 = 6;
        sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
        sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v77);
        sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v75);
        sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v73);
        sub_1CD3D5F48(a1, (uint64_t)&v87, &v72);
        sub_1CB8B55E4(a1, (uint64_t)&v87, (uint64_t)&v71);
        unsigned int v29 = sub_1CD801450(a1, 1445, (uint64_t)&v68, (llvm *)5, 0, v87, v88);
        if (v87 != v89) {
          free(v87);
        }
        unsigned int v30 = v68;
        if (!v68) {
          return v29;
        }
        int v31 = *v68;
        if ((v31 - 4) > 0x1E)
        {
          if ((v31 - 3) >= 0xFFFFFFFE) {
            uint64_t v58 = v68;
          }
          else {
            uint64_t v58 = 0;
          }
          if ((v31 - 3) < 0xFFFFFFFE) {
            goto LABEL_169;
          }
          unint64_t v33 = (unint64_t)(v58 + 8);
        }
        else
        {
          if ((v68[1] & 0x7F) != 2 && !*((_DWORD *)v68 + 3)) {
            return v29;
          }
          uint64_t v35 = *((void *)v68 + 2);
          if ((v35 & 4) == 0) {
            return v29;
          }
          unint64_t v33 = v35 & 0xFFFFFFFFFFFFFFF8;
          if (!v33) {
            return v29;
          }
        }
        int v43 = (uint64_t *)&v68;
        goto LABEL_168;
      }
      uint64_t v79 = *(unsigned __int8 **)(a2 + 64);
      if (v27) {
        llvm::MetadataTracking::track((uint64_t)&v79, v27, 2);
      }
      int v80 = *(_DWORD *)(a2 + 60);
      uint64_t v77 = 0x100000000;
      char v78 = 6;
      uint64_t v75 = 0x100000000;
      char v76 = 6;
      uint64_t v73 = 0x100000000;
      char v74 = 6;
      *(void *)&long long v72 = 0x100000000;
      BYTE8(v72) = 6;
      *(void *)&long long v71 = sub_1CD7EEB94(a1, 0, (llvm *)5, 0);
      *((void *)&v71 + 1) = v28;
      uint64_t v70 = 0;
      uint64_t v87 = v89;
      uint64_t v88 = 0x800000000;
      uint64_t v85 = 0;
      char v86 = 6;
      sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
      sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v77);
      sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v75);
      sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v73);
      sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v72);
      sub_1CD3D5F48(a1, (uint64_t)&v87, &v71);
      sub_1CB8B55E4(a1, (uint64_t)&v87, (uint64_t)&v70);
      unsigned int v29 = sub_1CD801450(a1, 1015, (uint64_t)&v79, (llvm *)4, 0, v87, v88);
      if (v87 != v89) {
        free(v87);
      }
      unsigned int v30 = v79;
      if (!v79) {
        return v29;
      }
      int v31 = *v79;
      if ((v31 - 4) <= 0x1E)
      {
        if ((v79[1] & 0x7F) != 2 && !*((_DWORD *)v79 + 3)) {
          return v29;
        }
        uint64_t v32 = *((void *)v79 + 2);
        if ((v32 & 4) == 0) {
          return v29;
        }
        unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
        if (!v33) {
          return v29;
        }
LABEL_155:
        int v43 = (uint64_t *)&v79;
        goto LABEL_168;
      }
      if ((v31 - 3) >= 0xFFFFFFFE) {
        uint64_t v57 = v79;
      }
      else {
        uint64_t v57 = 0;
      }
      if ((v31 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v33 = (unint64_t)(v57 + 8);
        goto LABEL_155;
      }
LABEL_169:
      if (v31 == 3) {
        *((void *)v30 + 1) = 0;
      }
      return v29;
    }
    if (a4) {
      LODWORD(v23) = 8;
    }
    else {
      LODWORD(v23) = 0;
    }
    if (v20) {
      goto LABEL_10;
    }
LABEL_56:
    if (a5)
    {
      if (v12 == 4)
      {
        if (a3 == 57) {
          int v45 = 10146;
        }
        else {
          int v45 = 4625;
        }
        BOOL v44 = a3 == 56;
        int v46 = 2641;
      }
      else
      {
        BOOL v44 = a3 == 56;
        int v45 = 10133;
        int v46 = 2628;
      }
    }
    else if (v12 == 4)
    {
      if (a3 == 57) {
        int v45 = 10252;
      }
      else {
        int v45 = 4666;
      }
      BOOL v44 = a3 == 56;
      int v46 = 2747;
    }
    else
    {
      if (a3 == 57) {
        int v45 = 10203;
      }
      else {
        int v45 = 4645;
      }
      BOOL v44 = a3 == 56;
      int v46 = 2698;
    }
    if (v44) {
      int v47 = v46;
    }
    else {
      int v47 = v45;
    }
    uint64_t v48 = *(unsigned __int8 **)(a2 + 64);
    unsigned int v62 = v48;
    if (v48) {
      llvm::MetadataTracking::track((uint64_t)&v62, v48, 2);
    }
    int v63 = *(_DWORD *)(a2 + 60);
    uint64_t v77 = 0;
    uint64_t v87 = v89;
    uint64_t v88 = 0x600000000;
    uint64_t v85 = 0;
    char v86 = 6;
    sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
    sub_1CD3D5F48(a1, (uint64_t)&v87, &v84);
    uint64_t v85 = v23;
    char v86 = 6;
    sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
    sub_1CD3D5F48(a1, (uint64_t)&v87, &v81);
    sub_1CB8B55E4(a1, (uint64_t)&v87, (uint64_t)&v77);
    unsigned int v29 = sub_1CD801450(a1, v47, (uint64_t)&v62, v12, v61, v87, v88);
    if (v87 != v89) {
      free(v87);
    }
    unsigned int v30 = v62;
    if (!v62) {
      return v29;
    }
    int v31 = *v62;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        uint64_t v50 = v62;
      }
      else {
        uint64_t v50 = 0;
      }
      if ((v31 - 3) < 0xFFFFFFFE) {
        goto LABEL_169;
      }
      unint64_t v33 = (unint64_t)(v50 + 8);
    }
    else
    {
      if ((v62[1] & 0x7F) != 2 && !*((_DWORD *)v62 + 3)) {
        return v29;
      }
      uint64_t v49 = *((void *)v62 + 2);
      if ((v49 & 4) == 0) {
        return v29;
      }
      unint64_t v33 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (!v33) {
        return v29;
      }
    }
    int v43 = (uint64_t *)&v62;
    goto LABEL_168;
  }
  if (a3 != 58) {
    goto LABEL_7;
  }
  uint64_t v21 = *(void *)(v14 + 80);
  uint64_t v22 = (void *)(v21 + 24);
  if (*(_DWORD *)(v21 + 32) >= 0x41u) {
    uint64_t v22 = (void *)*v22;
  }
  if (!*v22) {
    goto LABEL_24;
  }
  if ((unint64_t)v81 | v18) {
    goto LABEL_21;
  }
LABEL_7:
  if (a4) {
    LODWORD(v23) = 8;
  }
  else {
    LODWORD(v23) = 0;
  }
LABEL_10:
  if (a5)
  {
    if (v12 == 4)
    {
      if (a3 == 57) {
        int v37 = 10148;
      }
      else {
        int v37 = 4626;
      }
      BOOL v36 = a3 == 56;
      int v38 = 2643;
    }
    else
    {
      BOOL v36 = a3 == 56;
      int v37 = 10138;
      int v38 = 2633;
    }
  }
  else if (v12 == 4)
  {
    if (a3 == 57) {
      int v37 = 10265;
    }
    else {
      int v37 = 4672;
    }
    BOOL v36 = a3 == 56;
    int v38 = 2760;
  }
  else
  {
    if (a3 == 57) {
      int v37 = 10215;
    }
    else {
      int v37 = 4651;
    }
    BOOL v36 = a3 == 56;
    int v38 = 2710;
  }
  if (v36) {
    int v39 = v38;
  }
  else {
    int v39 = v37;
  }
  uint64_t v40 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v64 = v40;
  if (v40) {
    llvm::MetadataTracking::track((uint64_t)&v64, v40, 2);
  }
  int v65 = *(_DWORD *)(a2 + 60);
  uint64_t v77 = 0;
  uint64_t v87 = v89;
  uint64_t v88 = 0x600000000;
  uint64_t v85 = 0;
  char v86 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
  sub_1CD3D5F48(a1, (uint64_t)&v87, &v82);
  sub_1CD3D5F48(a1, (uint64_t)&v87, &v83);
  uint64_t v85 = v23;
  char v86 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v87, (uint64_t)&v85);
  sub_1CB8B55E4(a1, (uint64_t)&v87, (uint64_t)&v77);
  unsigned int v29 = sub_1CD801450(a1, v39, (uint64_t)&v64, v12, v61, v87, v88);
  if (v87 != v89) {
    free(v87);
  }
  unsigned int v30 = v64;
  if (!v64) {
    return v29;
  }
  int v31 = *v64;
  if ((v31 - 4) > 0x1E)
  {
    if ((v31 - 3) >= 0xFFFFFFFE) {
      int v42 = v64;
    }
    else {
      int v42 = 0;
    }
    if ((v31 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v33 = (unint64_t)(v42 + 8);
LABEL_102:
      int v43 = (uint64_t *)&v64;
LABEL_168:
      uint64_t v87 = v43;
      sub_1CC5FA668(v33 + 16, &v87);
      return v29;
    }
    goto LABEL_169;
  }
  if ((v64[1] & 0x7F) == 2 || *((_DWORD *)v64 + 3))
  {
    uint64_t v41 = *((void *)v64 + 2);
    if ((v41 & 4) != 0)
    {
      unint64_t v33 = v41 & 0xFFFFFFFFFFFFFFF8;
      if (v33) {
        goto LABEL_102;
      }
    }
  }
  return v29;
}

void sub_1CB8B943C(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  llvm::SampleInfo::SampleInfo((uint64_t)v104, a3, 0);
  char v103 = 0;
  (*(void (**)(long long *__return_ptr, void *, uint64_t, uint64_t, void, void, void, char *))(*a1 + 48))(&v93, a1, a4, a2, v111, v112, v113, &v103);
  if (v103) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v102 == 0;
  }
  if (!v7)
  {
    int v92 = v99;
    long long v90 = v93;
    uint64_t v91 = v94;
    long long v88 = v95;
    uint64_t v89 = v96;
    long long v86 = v97;
    uint64_t v87 = v98;
    long long v84 = v100;
    uint64_t v85 = v101;
    uint64_t v133 = v135;
    uint64_t v134 = 0x400000000;
    uint64_t v8 = (void *)(*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v114);
    uint64_t v10 = v9;
    uint64_t v11 = v106 + v117;
    char v12 = (*(uint64_t (**)(void))(*(void *)a1[1] + 200))(a1[1]);
    if (v105) {
      char v13 = v12;
    }
    else {
      char v13 = 0;
    }
    int v14 = (*(uint64_t (**)(void))(*(void *)a1[1] + 168))(a1[1]);
    if (v116 == -1) {
      int v15 = 0;
    }
    else {
      int v15 = v14;
    }
    char v16 = v15 & v13;
    if ((v123 & v115) == 0xFFFFFFFF) {
      char v16 = v13;
    }
    if (v11 == 2) {
      char v17 = ((v121 == -1) | ~(_BYTE)v15) & v16;
    }
    else {
      char v17 = v16;
    }
    if (v11 != 1)
    {
      memset(v132, 0, 48);
      if (!v11)
      {
        v132[0] = v8;
        LODWORD(v132[1]) = v10;
        if ((v17 & 1) == 0)
        {
LABEL_63:
          uint64_t v11 = 0;
          goto LABEL_64;
        }
        uint64_t v24 = 0;
        uint64_t v23 = 0;
        goto LABEL_60;
      }
      (*(void (**)(void *, void *, uint64_t, void **, uint64_t))(*a1 + 120))(a1, v8, v10, v132, v11);
      unint64_t v19 = &v132[1];
      uint64_t v20 = v11;
      do
      {
        if (!*(v19 - 1) && !*(_DWORD *)v19)
        {
          (*(void (**)(void *, void *, uint64_t, char **, uint64_t))(*a1 + 80))(a1, v8, v10, &v133, v11);
          goto LABEL_63;
        }
        v19 += 2;
        --v20;
      }
      while (v20);
      if ((v17 & 1) == 0) {
        goto LABEL_50;
      }
      uint64_t v68 = a4;
      uint64_t v70 = a2;
      uint64_t v21 = v11;
LABEL_36:
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      memset(v137, 0, sizeof(v137));
      long long v136 = 0u;
      int v25 = v11;
      while (1)
      {
        uint64_t v130 = 0;
        int v129 = 0;
        uint64_t v127 = 0;
        int v126 = 0;
        if (!(*(unsigned int (**)(void *, void *, void *, void **, void **))(*a1 + 128))(a1, v132[v22 / 8], v132[v22 / 8 + 1], &v129, &v126))
        {
          uint64_t v130 = 0;
          int v129 = 0;
          uint64_t v127 = 0;
          int v126 = 0;
          if (!(*(unsigned int (**)(void *, void *, void *, void **, void **))(*a1 + 136))(a1, v132[v22 / 8], v132[v22 / 8 + 1], &v129, &v126))break; {
        }
          }
        unsigned int v26 = &v137[v22 / 0x10 - 1];
        *(void *)unsigned int v26 = v129;
        *((_DWORD *)v26 + 2) = v130;
        if (v23 || v24)
        {
          if (v23 != v126 || v127 != v24) {
            break;
          }
        }
        else
        {
          uint64_t v24 = v127;
          uint64_t v23 = v126;
        }
        --v25;
        v22 += 16;
        if (16 * v21 == v22) {
          goto LABEL_55;
        }
      }
      if (v25)
      {
        a2 = v70;
        a4 = v68;
        goto LABEL_50;
      }
LABEL_55:
      int v31 = (void *)&v136 + 1;
      a4 = v68;
      do
      {
        uint64_t v33 = (*(uint64_t (**)(void *, void, void))(*a1 + 168))(a1, *(v31 - 1), *v31);
        v103 |= (v33 | v32) == 0;
        if (v134 >= (unint64_t)HIDWORD(v134)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v31 += 2;
        uint64_t v34 = (uint64_t *)&v133[16 * v134];
        *uint64_t v34 = v33;
        v34[1] = v32;
        LODWORD(v134) = v134 + 1;
        --v21;
      }
      while (v21);
      a2 = v70;
LABEL_60:
      uint64_t v36 = (*(uint64_t (**)(void *, void *, uint64_t))(*a1 + 168))(a1, v23, v24);
      v103 |= (v36 | v35) == 0;
      if (v134 >= HIDWORD(v134)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v37 = (uint64_t *)&v133[16 * v134];
      *int v37 = v36;
      v37[1] = v35;
      LODWORD(v134) = v134 + 1;
      uint64_t v11 = 1;
LABEL_64:
      if (v103)
      {
LABEL_94:
        if (v133 != v135) {
          free(v133);
        }
        return;
      }
      unsigned int v83 = -1;
      v132[0] = &v132[2];
      v132[1] = (void *)0x400000000;
      (*(void (**)(void *, unsigned char *, uint64_t, uint64_t, unsigned int *, void **, char *))(*a1 + 256))(a1, v104, a4, a2, &v83, v132, &v103);
      if (v103)
      {
LABEL_92:
        if (v132[0] != &v132[2]) {
          free(v132[0]);
        }
        goto LABEL_94;
      }
      *(void *)&long long v136 = v137;
      *((void *)&v136 + 1) = 0x200000000;
      if (v116 != -1 && (*(unsigned int (**)(void))(*(void *)a1[1] + 168))(a1[1]))
      {
        uint64_t v38 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v116);
        (*(void (**)(void *, uint64_t, uint64_t, long long *, uint64_t))(*a1 + 80))(a1, v38, v39, &v136, 0xFFFFFFFFLL);
      }
      if (v103)
      {
LABEL_90:
        if ((_OWORD *)v136 != v137) {
          free((void *)v136);
        }
        goto LABEL_92;
      }
      BOOL v40 = (v123 & v119) != -1;
      int v129 = v131;
      uint64_t v130 = 0x200000000;
      (*(void (**)(void *, unsigned char *, uint64_t, void **))(*a1 + 264))(a1, v104, a2, &v129);
      int v41 = v107;
      unsigned int v82 = -1;
      int v42 = v118;
      unsigned int v69 = v106;
      if (!v118 || v124 == -1)
      {
        if (!v118)
        {
LABEL_77:
          if (v118) {
            int v42 = 1;
          }
          unsigned int v67 = v42;
          int v126 = v128;
          uint64_t v127 = 0x200000000;
          if (v109 != -1)
          {
            uint64_t v45 = (*(uint64_t (**)(void *, uint64_t, void))(*a1 + 16))(a1, a2, v125);
            (*(void (**)(void *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 80))(a1, v45, v46, &v126, 0xFFFFFFFFLL);
          }
          if (!v103)
          {
            BOOL v66 = v40;
            (*(void (**)(void *, unsigned char *, uint64_t, char **, void **, void, void **, long long *, void **))(*a1 + 272))(a1, v104, a2, &v133, v132, v83, &v129, &v136, &v126);
            unsigned int v81 = -1;
            if (v110 != -1)
            {
              uint64_t v47 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
              (*(void (**)(void *, uint64_t, uint64_t, unsigned int *, void))(*a1 + 144))(a1, v47, v48, &v81, 0);
            }
            BOOL v65 = v41 == 0;
            char v49 = (*(uint64_t (**)(void *, unsigned char *, uint64_t))(*a1 + 200))(a1, v104, a2);
            char v50 = (*(uint64_t (**)(void *, unsigned char *, uint64_t))(*a1 + 208))(a1, v104, a2);
            uint64_t v71 = a2;
            uint64_t v51 = a1[1];
            uint64_t v52 = v83;
            unsigned int v62 = v109;
            unsigned int v63 = v108;
            unsigned int v61 = v105;
            unsigned int v64 = v82;
            BOOL v53 = v119 != -1;
            char v54 = v104[1];
            char v55 = (*(uint64_t (**)(uint64_t, void, unsigned char *, uint64_t))(*(void *)v51 + 104))(v51, v83, v104, v11);
            HIDWORD(v59) = v81;
            BYTE1(v59) = v50;
            LOBYTE(v59) = v49;
            HIBYTE(v58) = v54;
            BYTE2(v58) = v65;
            BYTE1(v58) = v53;
            LOBYTE(v58) = v66;
            uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void, void, int, int *, char, uint64_t))(*(void *)v51 + 112))(v51, v52, v69, v63, v62, v61, v67, v64, v58, &v92, v55, v59);
            long long v78 = v90;
            uint64_t v79 = v91;
            long long v76 = v88;
            uint64_t v77 = v89;
            long long v74 = v86;
            uint64_t v75 = v87;
            uint64_t v73 = v85;
            long long v72 = v84;
            HIDWORD(v60) = v83;
            BYTE2(v60) = v50;
            BYTE1(v60) = v49;
            LOBYTE(v60) = v11;
            v80[0] = (*(uint64_t (**)(void *, unsigned char *, uint64_t, uint64_t, long long *, long long *, long long *, long long *, char *, void, void *, void, void *, void, void *, void, uint64_t, unsigned int))(*a1 + 88))(a1, v104, v71, v56, &v78, &v76, &v74, &v72, v133, v134, v132[0], LODWORD(v132[1]), v129, v130, v126, v127, v60, v82);
            v80[1] = v57;
            if ((_BYTE)v57)
            {
              (*(void (**)(void *, unsigned char *, uint64_t, void *))(*a1 + 104))(a1, v104, v71, v80);
              (*(void (**)(void *, unsigned char *, uint64_t, void, void, void))(*a1 + 112))(a1, v104, v71, v80[0], v82, v81);
            }
          }
          if (v126 != v128) {
            free(v126);
          }
          if (v129 != v131) {
            free(v129);
          }
          goto LABEL_90;
        }
      }
      else
      {
        uint64_t v43 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
        (*(void (**)(void *, uint64_t, uint64_t, unsigned int *, void))(*a1 + 144))(a1, v43, v44, &v82, 0);
        if (v82 < 4) {
          goto LABEL_76;
        }
      }
      unsigned int v82 = 0;
LABEL_76:
      int v42 = -1;
      goto LABEL_77;
    }
    if (v123 == -1)
    {
      if (v115 == -1) {
        LOBYTE(v15) = 0;
      }
      if (v15)
      {
LABEL_19:
        if ((v120 & v122) == 0xFFFFFFFF) {
          char v18 = v17;
        }
        else {
          char v18 = 0;
        }
        memset(&v132[1], 0, 40);
        v132[0] = v8;
        LODWORD(v132[1]) = v10;
        if ((v18 & 1) == 0)
        {
LABEL_50:
          uint64_t v27 = &v132[1];
          do
          {
            uint64_t v29 = (*(uint64_t (**)(void *, void, void *))(*a1 + 168))(a1, *(v27 - 1), *v27);
            v103 |= (v29 | v28) == 0;
            if (v134 >= (unint64_t)HIDWORD(v134)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v27 += 2;
            unsigned int v30 = (uint64_t *)&v133[16 * v134];
            uint64_t *v30 = v29;
            v30[1] = v28;
            LODWORD(v134) = v134 + 1;
            --v11;
          }
          while (v11);
          goto LABEL_64;
        }
        goto LABEL_35;
      }
    }
    else if (v15)
    {
      goto LABEL_19;
    }
    memset(&v132[1], 0, 40);
    v132[0] = v8;
    LODWORD(v132[1]) = v10;
    if ((v17 & 1) == 0) {
      goto LABEL_50;
    }
LABEL_35:
    uint64_t v68 = a4;
    uint64_t v70 = a2;
    uint64_t v21 = 1;
    goto LABEL_36;
  }
}

uint64_t *sub_1CB8BA1AC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, _OWORD *a6, unsigned int *a7, _OWORD *a8, unsigned int *a9, int *a10, uint64_t a11)
{
  uint64_t v24[18] = *MEMORY[0x1E4F143B8];
  unint64_t v22 = v24;
  uint64_t v23 = 0x900000000;
  uint64_t v20 = a4;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a5);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a6);
  uint64_t v20 = *a7;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a8);
  uint64_t v20 = *a9;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  uint64_t v20 = *a10;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CB8B55E4(a1, (uint64_t)&v22, a11);
  char v16 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v16;
}

uint64_t *sub_1CB8BA340(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, unsigned int *a8, _OWORD *a9, unsigned int *a10, int *a11, uint64_t a12)
{
  v25[20] = *MEMORY[0x1E4F143B8];
  uint64_t v23 = v25;
  uint64_t v24 = 0xA00000000;
  uint64_t v21 = a4;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CD3D5F48(a1, (uint64_t)&v23, a5);
  uint64_t v21 = *a6;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CD3D5F48(a1, (uint64_t)&v23, a7);
  uint64_t v21 = *a8;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CD3D5F48(a1, (uint64_t)&v23, a9);
  uint64_t v21 = *a10;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  uint64_t v21 = *a11;
  char v22 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1CB8B55E4(a1, (uint64_t)&v23, a12);
  char v17 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v23, v24);
  if (v23 != v25) {
    free(v23);
  }
  return v17;
}

uint64_t *sub_1CB8BA4F8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, _OWORD *a8, unsigned int *a9, int *a10, uint64_t a11)
{
  uint64_t v24[18] = *MEMORY[0x1E4F143B8];
  char v22 = v24;
  uint64_t v23 = 0x900000000;
  uint64_t v20 = a4;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a5);
  uint64_t v20 = *a6;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a7);
  sub_1CD3D5F48(a1, (uint64_t)&v22, a8);
  uint64_t v20 = *a9;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  uint64_t v20 = *a10;
  char v21 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1CB8B55E4(a1, (uint64_t)&v22, a11);
  char v16 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v22, v23);
  if (v22 != v24) {
    free(v22);
  }
  return v16;
}

uint64_t *sub_1CB8BA68C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, unsigned int *a8, uint64_t a9)
{
  v22[14] = *MEMORY[0x1E4F143B8];
  uint64_t v20 = v22;
  uint64_t v21 = 0x700000000;
  uint64_t v18 = a4;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD3D5F48(a1, (uint64_t)&v20, a5);
  uint64_t v18 = *a6;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD3D5F48(a1, (uint64_t)&v20, a7);
  uint64_t v18 = *a8;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CB8B55E4(a1, (uint64_t)&v20, a9);
  char v16 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t *sub_1CB8BA7F0(uint64_t a1, int a2, uint64_t a3, unsigned int a4, _OWORD *a5, unsigned int *a6, _OWORD *a7, uint64_t a8)
{
  v21[12] = *MEMORY[0x1E4F143B8];
  char v19 = v21;
  uint64_t v20 = 0x600000000;
  uint64_t v17 = a4;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD3D5F48(a1, (uint64_t)&v19, a5);
  uint64_t v17 = *a6;
  char v18 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1CD3D5F48(a1, (uint64_t)&v19, a7);
  sub_1CB8B55E4(a1, (uint64_t)&v19, a8);
  int v15 = sub_1CD801450(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v19, v20);
  if (v19 != v21) {
    free(v19);
  }
  return v15;
}

uint64_t sub_1CB8BA934(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 != 35 && v4 != 11) {
    return 0;
  }
  uint64_t v6 = *(void *)(a2 + 80);
  BOOL v7 = (void *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u) {
    BOOL v7 = (void *)*v7;
  }
  *a4 = *v7;
  return 1;
}

uint64_t sub_1CB8BA974(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, __n128 a5)
{
  uint64_t v232 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v223 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v223, v8, 2);
  }
  int v224 = *(_DWORD *)(a2 + 60);
  *(void *)&long long v222 = 0;
  DWORD2(v222) = 0;
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v208 = a4;
  uint64_t v209 = *(llvm **)v9;
  uint64_t v207 = *(void *)(v9 + 8);
  *(_DWORD *)(a1 + 1096) = 0;
  LODWORD(v10) = **(_DWORD **)(a1 + 800);
  LODWORD(v11) = **(_DWORD **)(a1 + 944);
  uint64_t v12 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v12 + 20) == 1)
  {
    int v14 = *(void **)v12;
    unint64_t v13 = *(void *)(v12 + 8);
  }
  else
  {
    int v14 = 0;
    unint64_t v13 = 0;
  }
  unsigned int v15 = *(_DWORD *)(a1 + 16);
  if (v15 < 2)
  {
    int v18 = 0;
    if (v14)
    {
LABEL_33:
      v227[0] = v14;
      v227[1] = (void *)v13;
      int v228 = v10;
      int v229 = v11;
      int v230 = v18;
      unsigned int v231 = v15 - 1;
      a5 = sub_1CB8BBE7C((unint64_t *)(a1 + 1088), (unint64_t)v227);
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v18 = 0;
    int v19 = 1;
    uint64_t v20 = **(unsigned int **)(a1 + 800);
    uint64_t v21 = **(unsigned int **)(a1 + 944);
    char v22 = v14;
    do
    {
      uint64_t v23 = *(void *)(a1 + 8) + v16;
      if (*(_DWORD *)(v23 + 44) == 1)
      {
        int v14 = *(void **)(v23 + 24);
        uint64_t v24 = *(unsigned int *)(v23 + 32);
      }
      else
      {
        int v14 = 0;
        uint64_t v24 = 0;
      }
      uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 800) + 4 * v17 + 4);
      uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 944) + 4 * v17 + 4);
      if (a3 && !v14)
      {
        uint64_t v24 = v13;
        if (!*(_DWORD *)(a1 + 1096)) {
          int v18 = 0;
        }
        int v14 = v22;
        uint64_t v10 = v20;
        uint64_t v11 = v21;
      }
      if (v10 == v20 && v11 == v21 && v14 == v22 && v24 == v13)
      {
        int v14 = v22;
        LODWORD(v11) = v21;
        LODWORD(v10) = v20;
      }
      else
      {
        if (v22)
        {
          v227[0] = v22;
          v227[1] = (void *)v13;
          int v228 = v20;
          int v229 = v21;
          int v230 = v18;
          unsigned int v231 = v17;
          a5 = sub_1CB8BBE7C((unint64_t *)(a1 + 1088), (unint64_t)v227);
          unsigned int v15 = *(_DWORD *)(a1 + 16);
          int v18 = v19;
        }
        else
        {
          int v18 = v17 + 1;
        }
        unint64_t v13 = v24 | v13 & 0xFFFFFFFF00000000;
        uint64_t v20 = v10;
        uint64_t v21 = v11;
        char v22 = v14;
      }
      ++v19;
      unint64_t v28 = v17 + 2;
      ++v17;
      v16 += 24;
    }
    while (v28 < v15);
    if (v14) {
      goto LABEL_33;
    }
  }
  if (!*(_DWORD *)(a1 + 1096)) {
    goto LABEL_265;
  }
  int v29 = *(_DWORD *)(a1 + 1624);
  if (v29 || *(_DWORD *)(a1 + 1628))
  {
    unsigned int v30 = *(_DWORD *)(a1 + 1632);
    uint64_t v31 = *(void *)(a1 + 1616);
    uint64_t v32 = v31 + 56 * v30;
    if (v30 <= 4 * v29 || v30 < 0x41)
    {
      if (v30)
      {
        do
        {
          *(void *)uint64_t v31 = 0;
          *(_DWORD *)(v31 + 8) = -1;
          *(_DWORD *)(v31 + 16) = -1;
          v31 += 56;
        }
        while (v31 != v32);
      }
      *(void *)(a1 + 1624) = 0;
    }
    else if (v29)
    {
      int v33 = 1 << (33 - __clz(v29 - 1));
      if (v33 <= 64) {
        int v34 = 64;
      }
      else {
        int v34 = v33;
      }
      if (v34 == v30)
      {
        *(void *)(a1 + 1624) = 0;
        do
        {
          *(_OWORD *)uint64_t v31 = xmmword_1CD923640;
          *(_DWORD *)(v31 + 16) = -1;
          v31 += 56;
        }
        while (v31 != v32);
      }
      else
      {
        MEMORY[0x1D25D9CD0](a5);
        unint64_t v35 = (4 * v34 / 3u + 1) | ((unint64_t)(4 * v34 / 3u + 1) >> 1);
        unint64_t v36 = v35 | (v35 >> 2) | ((v35 | (v35 >> 2)) >> 4);
        LODWORD(v36) = (((v36 | (v36 >> 8)) >> 16) | v36 | (v36 >> 8)) + 1;
        *(_DWORD *)(a1 + 1632) = v36;
        int v37 = (char *)operator new(56 * v36, (std::align_val_t)8uLL);
        *(void *)(a1 + 1616) = v37;
        *(void *)(a1 + 1624) = 0;
        int v38 = *(_DWORD *)(a1 + 1632);
        if (v38)
        {
          uint64_t v39 = &v37[56 * v38];
          do
          {
            *(_OWORD *)int v37 = xmmword_1CD923640;
            *((_DWORD *)v37 + 4) = -1;
            v37 += 56;
          }
          while (v37 != v39);
        }
      }
    }
    else
    {
      MEMORY[0x1D25D9CD0](a5);
      *(void *)(a1 + 1616) = 0;
      *(void *)(a1 + 1624) = 0;
      *(_DWORD *)(a1 + 1632) = 0;
    }
  }
  uint64_t v40 = *(unsigned int *)(a1 + 1096);
  if (v40)
  {
    int v41 = *(uint64_t **)(a1 + 1088);
    int v42 = &v41[4 * v40];
    while (1)
    {
      int v43 = *((_DWORD *)v41 + 4) + ((*((_DWORD *)v41 + 5) == 0) << 6);
      *(_OWORD *)uint64_t v227 = *(_OWORD *)v41;
      int v228 = v43;
      *(void *)&long long v218 = 0;
      int v44 = sub_1CB8BBF18(*(void *)(a1 + 1616), *(_DWORD *)(a1 + 1632), (uint64_t)v227, &v218);
      uint64_t v45 = v218;
      if (!v44) {
        break;
      }
      int v46 = *(_DWORD *)(v218 + 48);
      unsigned int v47 = *(_DWORD *)(v218 + 52);
LABEL_70:
      uint64_t v52 = *v41;
      *(_DWORD *)(v45 + 32) = *((_DWORD *)v41 + 2);
      *(void *)(v45 + 24) = v52;
      *(void *)(v45 + 40) = v41[2];
      *(_DWORD *)(v45 + 48) = v46 + 1;
      unsigned int v53 = *((_DWORD *)v41 + 6);
      if (v53 >= v47) {
        unsigned int v53 = v47;
      }
      *(_DWORD *)(v45 + 52) = v53;
      v41 += 4;
      if (v41 == v42) {
        goto LABEL_103;
      }
    }
    *(void *)&long long v219 = v218;
    int v48 = *(_DWORD *)(a1 + 1624);
    uint64_t v49 = *(unsigned int *)(a1 + 1632);
    if (4 * v48 + 4 >= (3 * v49))
    {
      int v50 = 2 * v49;
    }
    else
    {
      int v50 = *(_DWORD *)(a1 + 1632);
      if ((int)v49 + ~v48 - *(_DWORD *)(a1 + 1628) > v49 >> 3)
      {
LABEL_62:
        *(_DWORD *)(a1 + 1624) = v48 + 1;
        if (*(void *)v45) {
          BOOL v51 = 0;
        }
        else {
          BOOL v51 = *(_DWORD *)(v45 + 8) == -1;
        }
        if (!v51 || *(_DWORD *)(v45 + 16) != -1) {
          --*(_DWORD *)(a1 + 1628);
        }
        int v46 = 0;
        *(void **)uint64_t v45 = v227[0];
        *(_DWORD *)(v45 + 8) = v227[1];
        *(_DWORD *)(v45 + 16) = v43;
        *(void *)(v45 + 24) = 0;
        *(_DWORD *)(v45 + 32) = 0;
        *(_OWORD *)(v45 + 40) = xmmword_1CD923650;
        unsigned int v47 = -1;
        goto LABEL_70;
      }
    }
    uint64_t v54 = *(void *)(a1 + 1616);
    unint64_t v55 = (v50 - 1) | ((unint64_t)(v50 - 1) >> 1);
    unint64_t v56 = v55 | (v55 >> 2) | ((v55 | (v55 >> 2)) >> 4);
    int v57 = ((v56 | (v56 >> 8)) >> 16) | v56 | (v56 >> 8);
    if ((v57 + 1) > 0x40) {
      unsigned int v58 = v57 + 1;
    }
    else {
      unsigned int v58 = 64;
    }
    *(_DWORD *)(a1 + 1632) = v58;
    uint64_t v59 = (char *)operator new(56 * v58, (std::align_val_t)8uLL);
    *(void *)(a1 + 1616) = v59;
    if (v54)
    {
      *(void *)(a1 + 1624) = 0;
      int v60 = *(_DWORD *)(a1 + 1632);
      __n128 v61 = (__n128)xmmword_1CD923640;
      if (v60)
      {
        unsigned int v62 = &v59[56 * v60];
        do
        {
          *(_OWORD *)uint64_t v59 = xmmword_1CD923640;
          *((_DWORD *)v59 + 4) = -1;
          v59 += 56;
        }
        while (v59 != v62);
      }
      if (v49)
      {
        uint64_t v63 = 56 * v49;
        uint64_t v64 = v54;
        while (1)
        {
          int v65 = *(_DWORD *)(v64 + 8);
          if (*(void *)v64 || v65 != -1) {
            break;
          }
          if (*(_DWORD *)(v64 + 16) != -1) {
            goto LABEL_96;
          }
LABEL_97:
          v64 += 56;
          v63 -= 56;
          if (!v63) {
            goto LABEL_98;
          }
        }
        if (*(void *)v64) {
          BOOL v67 = 0;
        }
        else {
          BOOL v67 = v65 == -2;
        }
        if (v67 && *(_DWORD *)(v64 + 16) == -2) {
          goto LABEL_97;
        }
LABEL_96:
        uint64_t v225 = 0;
        sub_1CB8BBF18(*(void *)(a1 + 1616), *(_DWORD *)(a1 + 1632), v64, &v225);
        uint64_t v68 = v225;
        uint64_t v69 = *(void *)v64;
        *(_DWORD *)(v225 + 8) = *(_DWORD *)(v64 + 8);
        *(void *)uint64_t v68 = v69;
        *(_DWORD *)(v68 + 16) = *(_DWORD *)(v64 + 16);
        __n128 v61 = *(__n128 *)(v64 + 40);
        *(_OWORD *)(v68 + 24) = *(_OWORD *)(v64 + 24);
        *(__n128 *)(v68 + 40) = v61;
        ++*(_DWORD *)(a1 + 1624);
        goto LABEL_97;
      }
LABEL_98:
      MEMORY[0x1D25D9CD0](v54, 8, v61);
      uint64_t v59 = *(char **)(a1 + 1616);
      unsigned int v70 = *(_DWORD *)(a1 + 1632);
    }
    else
    {
      *(void *)(a1 + 1624) = 0;
      unsigned int v70 = *(_DWORD *)(a1 + 1632);
      if (v70)
      {
        uint64_t v71 = v59;
        do
        {
          *(_OWORD *)uint64_t v71 = xmmword_1CD923640;
          *((_DWORD *)v71 + 4) = -1;
          v71 += 56;
        }
        while (v71 != &v59[56 * v70]);
      }
    }
    sub_1CB8BBF18((uint64_t)v59, v70, (uint64_t)v227, &v219);
    int v48 = *(_DWORD *)(a1 + 1624);
    uint64_t v45 = v219;
    goto LABEL_62;
  }
LABEL_103:
  *(_DWORD *)(a1 + 1648) = 0;
  uint64_t v72 = *(void *)(a1 + 1616);
  uint64_t v73 = *(unsigned int *)(a1 + 1632);
  uint64_t v74 = v72 + 56 * v73;
  if (*(_DWORD *)(a1 + 1624))
  {
    if (v73)
    {
      uint64_t v75 = 56 * v73;
      uint64_t v76 = *(void *)(a1 + 1616);
      while (1)
      {
        int v77 = *(_DWORD *)(v76 + 8);
        if (*(void *)v76) {
          BOOL v78 = 0;
        }
        else {
          BOOL v78 = v77 == -1;
        }
        if (v78)
        {
          if (*(_DWORD *)(v76 + 16) != -1) {
            goto LABEL_121;
          }
        }
        else
        {
          if (*(void *)v76) {
            BOOL v79 = 0;
          }
          else {
            BOOL v79 = v77 == -2;
          }
          if (!v79 || *(_DWORD *)(v76 + 16) != -2) {
            goto LABEL_121;
          }
        }
        v76 += 56;
        v75 -= 56;
        if (!v75) {
          goto LABEL_119;
        }
      }
    }
    uint64_t v76 = *(void *)(a1 + 1616);
  }
  else
  {
LABEL_119:
    uint64_t v76 = v72 + 56 * v73;
  }
LABEL_121:
  int v80 = (long long **)(a1 + 1640);
  uint64_t v81 = v72 + 56 * v73;
  if (v76 == v81)
  {
    uint64_t v94 = *v80;
    unint64_t v93 = (unint64_t)*v80;
  }
  else
  {
    LODWORD(v82) = 0;
    do
    {
      unsigned int v83 = (_OWORD *)(v76 + 24);
      unint64_t v84 = *(void *)(a1 + 1640);
      if (v82 >= *(_DWORD *)(a1 + 1652))
      {
        unint64_t v91 = v84 + 32 * v82;
        if (v84 > (unint64_t)v83 || v91 <= (unint64_t)v83) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v85 = (_OWORD *)(v84 + 32 * *(unsigned int *)(a1 + 1648));
      long long v86 = *(_OWORD *)(v76 + 40);
      _OWORD *v85 = *v83;
      v85[1] = v86;
      unint64_t v82 = (*(_DWORD *)(a1 + 1648) + 1);
      *(_DWORD *)(a1 + 1648) = v82;
      uint64_t v87 = v76 + 56;
      uint64_t v76 = v74;
      if (v87 != v74)
      {
        uint64_t v76 = v87;
        do
        {
          int v88 = *(_DWORD *)(v76 + 8);
          if (*(void *)v76) {
            BOOL v89 = 0;
          }
          else {
            BOOL v89 = v88 == -1;
          }
          if (v89)
          {
            if (*(_DWORD *)(v76 + 16) != -1) {
              goto LABEL_140;
            }
          }
          else
          {
            if (*(void *)v76) {
              BOOL v90 = 0;
            }
            else {
              BOOL v90 = v88 == -2;
            }
            if (!v90 || *(_DWORD *)(v76 + 16) != -2) {
              goto LABEL_140;
            }
          }
          v76 += 56;
        }
        while (v76 != v74);
        uint64_t v76 = v74;
      }
LABEL_140:
      ;
    }
    while (v76 != v81);
    unint64_t v93 = (unint64_t)*v80;
    uint64_t v94 = &(*v80)[2 * v82];
    if (v82)
    {
      uint64_t v95 = 126 - 2 * __clz(v82);
      uint64_t v96 = v208;
      goto LABEL_152;
    }
  }
  uint64_t v96 = v208;
  uint64_t v95 = 0;
LABEL_152:
  sub_1CB8BC038(v93, v94, v95, 1);
  if (v96) {
    _DWORD *v96 = 0;
  }
  uint64_t v97 = v209;
  if (v209 == 5)
  {
    v220 = v223;
    if (v223) {
      llvm::MetadataTracking::track((uint64_t)&v220, v223, 2);
    }
    int v221 = v224;
    int v186 = sub_1CD3D68DC(a1, v209, v207, (uint64_t)&v220, (uint64_t)&v222, v96);
    char v187 = v186;
    if (!v220)
    {
      if (v186) {
        goto LABEL_267;
      }
      goto LABEL_155;
    }
    int v188 = *v220;
    if ((v188 - 4) > 0x1E)
    {
      if ((v188 - 3) >= 0xFFFFFFFE) {
        unint64_t v201 = v220;
      }
      else {
        unint64_t v201 = 0;
      }
      if ((v188 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v202 = (unint64_t)(v201 + 8);
LABEL_320:
        v227[0] = &v220;
        sub_1CC5FA668(v202 + 16, v227);
        goto LABEL_287;
      }
      if (v188 == 3) {
        *((void *)v220 + 1) = 0;
      }
    }
    else if ((v220[1] & 0x7F) == 2 || *((_DWORD *)v220 + 3))
    {
      uint64_t v205 = *((void *)v220 + 2);
      if ((v205 & 4) != 0)
      {
        unint64_t v202 = v205 & 0xFFFFFFFFFFFFFFF8;
        if (v202) {
          goto LABEL_320;
        }
      }
    }
LABEL_287:
    if (v187) {
      goto LABEL_267;
    }
  }
LABEL_155:
  uint64_t v98 = *(unsigned int *)(a1 + 1096);
  if (!v98) {
    goto LABEL_266;
  }
  unsigned __int32 v99 = 0;
  long long v100 = *(long long **)(a1 + 1088);
  int32x4_t v101 = (int32x4_t)xmmword_1CD923660;
  v102.i64[0] = 0x100000001;
  v102.i64[1] = 0x100000001;
  v103.i64[0] = 0x400000004;
  v103.i64[1] = 0x400000004;
  int v104 = &v100[2 * v98];
  do
  {
    unsigned __int8 v105 = v104;
    v104 -= 2;
    uint64_t v106 = v222;
    unsigned int v107 = *((_DWORD *)v105 - 4);
    unsigned int v108 = *((_DWORD *)v105 - 1);
    unsigned int v109 = v108 + 1;
    if ((void)v222) {
      BOOL v110 = 0;
    }
    else {
      BOOL v110 = v107 == 0;
    }
    if (v110 && *(_DWORD *)(a1 + 16) == v109)
    {
      *(void *)&long long v222 = *(void *)v104;
      DWORD2(v222) = *((_DWORD *)v104 + 2);
      int v111 = *((_DWORD *)v105 - 2);
      if (v111)
      {
        unsigned int v112 = (v111 + 3) & 0xFFFFFFFC;
        uint32x4_t v113 = (uint32x4_t)vdupq_n_s32(v111 - 1);
        int8x16_t v114 = (int8x16_t)v99;
        int32x4_t v115 = v101;
        do
        {
          uint32x4_t v116 = (uint32x4_t)v115;
          int8x16_t v117 = v114;
          int8x16_t v114 = vorrq_s8((int8x16_t)vshlq_u32(v102, (uint32x4_t)v115), v114);
          int32x4_t v115 = vaddq_s32(v115, v103);
          v112 -= 4;
        }
        while (v112);
        int8x16_t v118 = vbslq_s8((int8x16_t)vcgtq_u32(v116, v113), v117, v114);
        *(int8x8_t *)v118.i8 = vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
        unsigned __int32 v99 = v118.i32[0] | v118.i32[1];
      }
      continue;
    }
    unsigned int v119 = *((_DWORD *)v105 - 2);
    if (*((_DWORD *)v105 - 3))
    {
      unsigned int v136 = v119 - v107;
      if (v119 > v107)
      {
        int v137 = 0;
        uint32x4_t v138 = (uint32x4_t)vdupq_n_s32(v136 - 1);
        int8x16_t v139 = (int8x16_t)v99;
        int32x4_t v140 = vaddq_s32(vdupq_n_s32(v107), v101);
        do
        {
          int8x16_t v141 = v139;
          int8x16_t v139 = vorrq_s8((int8x16_t)vshlq_u32(v102, (uint32x4_t)v140), v139);
          v137 += 4;
          int32x4_t v140 = vaddq_s32(v140, v103);
        }
        while (((v136 + 3) & 0xFFFFFFFC) != v137);
        int8x16_t v142 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v137 - 4), (int8x16_t)v101), v138), v141, v139);
        int8x8_t v143 = vorr_s8(*(int8x8_t *)v142.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL));
        unsigned __int32 v99 = v143.i32[0] | v143.i32[1];
      }
      int v128 = v109 - v107;
      if (v119 <= v108)
      {
        int v129 = 0;
        if (v119 + 1 > v109) {
          unsigned int v109 = v119 + 1;
        }
        unsigned int v144 = v109 - v119;
        unsigned int v145 = (v109 - v119 + 3) & 0xFFFFFFFC;
        uint32x4_t v132 = (uint32x4_t)vdupq_n_s32(v144 - 1);
        v133.i64[1] = -1;
        v133.i64[0] = v99 | 0xFFFFFFFF00000000;
        int32x4_t v146 = vaddq_s32(vdupq_n_s32(v119), v101);
        do
        {
          int8x16_t v135 = v133;
          int8x16_t v133 = vbicq_s8(v133, (int8x16_t)vshlq_u32(v102, (uint32x4_t)v146));
          v129 += 4;
          int32x4_t v146 = vaddq_s32(v146, v103);
        }
        while (v145 != v129);
        goto LABEL_189;
      }
    }
    else
    {
      if (v119)
      {
        unsigned int v120 = (v119 + 3) & 0xFFFFFFFC;
        uint32x4_t v121 = (uint32x4_t)vdupq_n_s32(v119 - 1);
        int8x16_t v122 = (int8x16_t)v99;
        int32x4_t v123 = v101;
        do
        {
          uint32x4_t v124 = (uint32x4_t)v123;
          int8x16_t v125 = v122;
          int8x16_t v122 = vorrq_s8((int8x16_t)vshlq_u32(v102, (uint32x4_t)v123), v122);
          int32x4_t v123 = vaddq_s32(v123, v103);
          v120 -= 4;
        }
        while (v120);
        int8x16_t v126 = vbslq_s8((int8x16_t)vcgtq_u32(v124, v121), v125, v122);
        int8x8_t v127 = vorr_s8(*(int8x8_t *)v126.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
        unsigned __int32 v99 = v127.i32[0] | v127.i32[1];
      }
      int v128 = v109 + v107;
      if (v119 <= v108)
      {
        int v129 = 0;
        if (v119 + 1 > v109) {
          unsigned int v109 = v119 + 1;
        }
        unsigned int v130 = v109 - v119;
        unsigned int v131 = (v109 - v119 + 3) & 0xFFFFFFFC;
        uint32x4_t v132 = (uint32x4_t)vdupq_n_s32(v130 - 1);
        v133.i64[1] = -1;
        v133.i64[0] = v99 | 0xFFFFFFFF00000000;
        int32x4_t v134 = vaddq_s32(vdupq_n_s32(v119), v101);
        do
        {
          int8x16_t v135 = v133;
          int8x16_t v133 = vbicq_s8(v133, (int8x16_t)vshlq_u32(v102, (uint32x4_t)v134));
          v129 += 4;
          int32x4_t v134 = vaddq_s32(v134, v103);
        }
        while (v131 != v129);
LABEL_189:
        int8x16_t v147 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v129 - 4), (int8x16_t)v101), v132), v135, v133);
        int8x8_t v148 = vand_s8(*(int8x8_t *)v147.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL));
        unsigned __int32 v99 = v148.i32[0] & v148.i32[1];
      }
    }
    int v149 = *(_DWORD *)(a1 + 16);
    if (v149 >= (v128 & ~(v128 >> 31))) {
      int v149 = v128 & ~(v128 >> 31);
    }
    if (v149 == 32) {
      int v150 = 0;
    }
    else {
      int v150 = v149;
    }
    long long v219 = *v104;
    *(void *)&long long v218 = sub_1CD7EBF14(*(void *)(a1 + 2168), 0, (const llvm::APInt *)&v223, (llvm *)5, 0, 1, 0);
    *((void *)&v218 + 1) = v151;
    if (v106)
    {
      int v206 = v150;
      if (v97 == 5)
      {
        if (*(_WORD *)(v219 + 24) == 199)
        {
          uint64_t v154 = *(void *)(v219 + 32);
          uint64_t v155 = *(void *)v154;
          DWORD2(v219) = *(_DWORD *)(v154 + 8);
          *(void *)&long long v219 = v155;
          sub_1CB896BAC(*(void *)(a1 + 2176), v155, DWORD2(v219), (uint64_t)&v219, (uint64_t)&v218, 0, 1, 0, 0, 0, 0);
          BOOL v159 = *((_DWORD *)v105 - 3) == 0;
          int v160 = 12335;
          int v161 = 13101;
        }
        else
        {
          sub_1CB896BAC(*(void *)(a1 + 2176), v219, DWORD2(v219), (uint64_t)&v219, (uint64_t)&v218, 0, 0, 0, 0, 0, 0);
          BOOL v159 = *((_DWORD *)v105 - 3) == 0;
          int v160 = 12331;
          int v161 = 13097;
        }
      }
      else
      {
        sub_1CB896BAC(*(void *)(a1 + 2176), v219, DWORD2(v219), (uint64_t)&v219, (uint64_t)&v218, 0, 1, 0, 0, 0, 0);
        BOOL v159 = *((_DWORD *)v105 - 3) == 0;
        int v160 = 12407;
        int v161 = 13173;
      }
      if (v159) {
        int v170 = v161;
      }
      else {
        int v170 = v160;
      }
      uint64_t v171 = v97;
      uint64_t v172 = *(void *)(a1 + 2168);
      v213 = v223;
      if (v223) {
        llvm::MetadataTracking::track((uint64_t)&v213, v223, 2);
      }
      int v214 = v224;
      uint64_t v215 = 0;
      v227[0] = &v228;
      v227[1] = (void *)0x900000000;
      uint64_t v225 = 0;
      char v226 = 6;
      sub_1CD3D5EA0(v172, (uint64_t)v227, (uint64_t)&v225);
      uint64_t v173 = *((void *)&v222 + 1);
      if (LODWORD(v227[1]) >= (unint64_t)HIDWORD(v227[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      BOOL v174 = (char *)v227[0] + 16 * LODWORD(v227[1]);
      *BOOL v174 = v106;
      v174[1] = v173;
      ++LODWORD(v227[1]);
      uint64_t v225 = 0;
      char v226 = 6;
      sub_1CD3D5EA0(v172, (uint64_t)v227, (uint64_t)&v225);
      if (LODWORD(v227[1]) >= (unint64_t)HIDWORD(v227[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v97 = v171;
      *((_OWORD *)v227[0] + LODWORD(v227[1])) = v219;
      unsigned int v175 = LODWORD(v227[1]) + 1;
      LODWORD(v227[1]) = v175;
      if (v175 >= HIDWORD(v227[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v227[0] + v175) = v218;
      ++LODWORD(v227[1]);
      uint64_t v225 = *((unsigned int *)v105 - 4);
      char v226 = 6;
      sub_1CD3D5EA0(v172, (uint64_t)v227, (uint64_t)&v225);
      uint64_t v225 = v206;
      char v226 = 6;
      sub_1CD3D5EA0(v172, (uint64_t)v227, (uint64_t)&v225);
      sub_1CB8B55E4(v172, (uint64_t)v227, (uint64_t)&v215);
      uint64_t v176 = sub_1CD801450(v172, v170, (uint64_t)&v213, v209, v207, (uint64_t *)v227[0], LODWORD(v227[1]));
      if (v227[0] != &v228) {
        free(v227[0]);
      }
      *(void *)&long long v222 = v176;
      DWORD2(v222) = 0;
      int v166 = v213;
      uint64_t v96 = v208;
      int32x4_t v101 = (int32x4_t)xmmword_1CD923660;
      v102.i64[0] = 0x100000001;
      v102.i64[1] = 0x100000001;
      v103.i64[0] = 0x400000004;
      v103.i64[1] = 0x400000004;
      if (!v213)
      {
LABEL_254:
        if (!v96) {
          continue;
        }
LABEL_255:
        ++*v96;
        continue;
      }
      int v167 = *v213;
      if ((v167 - 4) > 0x1E)
      {
        if ((v167 - 3) >= 0xFFFFFFFE) {
          unsigned int v180 = v213;
        }
        else {
          unsigned int v180 = 0;
        }
        if ((v167 - 3) < 0xFFFFFFFE) {
          goto LABEL_253;
        }
        unint64_t v169 = (unint64_t)(v180 + 8);
      }
      else
      {
        if ((v213[1] & 0x7F) != 2 && !*((_DWORD *)v213 + 3)) {
          goto LABEL_254;
        }
        uint64_t v177 = *((void *)v213 + 2);
        if ((v177 & 4) == 0) {
          goto LABEL_254;
        }
        unint64_t v169 = v177 & 0xFFFFFFFFFFFFFFF8;
        if (!v169) {
          goto LABEL_254;
        }
      }
      unsigned int v179 = &v213;
LABEL_251:
      v227[0] = v179;
      sub_1CC5FA668(v169 + 16, v227);
      int32x4_t v101 = (int32x4_t)xmmword_1CD923660;
      v102.i64[0] = 0x100000001;
      v102.i64[1] = 0x100000001;
      v103.i64[0] = 0x400000004;
      v103.i64[1] = 0x400000004;
      if (v96) {
        goto LABEL_255;
      }
      continue;
    }
    if (v97 == 5)
    {
      if (*(_WORD *)(v219 + 24) == 199)
      {
        uint64_t v152 = *(void *)(v219 + 32);
        uint64_t v153 = *(void *)v152;
        DWORD2(v219) = *(_DWORD *)(v152 + 8);
        *(void *)&long long v219 = v153;
        sub_1CB896BAC(*(void *)(a1 + 2176), v153, DWORD2(v219), (uint64_t)&v219, (uint64_t)&v218, 0, 1, 0, 0, 0, 0);
        BOOL v156 = *((_DWORD *)v105 - 3) == 0;
        int v157 = 12379;
        int v158 = 13145;
      }
      else
      {
        sub_1CB896BAC(*(void *)(a1 + 2176), v219, DWORD2(v219), (uint64_t)&v219, (uint64_t)&v218, 0, 0, 0, 0, 0, 0);
        BOOL v156 = *((_DWORD *)v105 - 3) == 0;
        int v157 = 12375;
        int v158 = 13141;
      }
    }
    else
    {
      sub_1CB896BAC(*(void *)(a1 + 2176), v219, DWORD2(v219), (uint64_t)&v219, (uint64_t)&v218, 0, 1, 0, 0, 0, 0);
      BOOL v156 = *((_DWORD *)v105 - 3) == 0;
      int v157 = 12435;
      int v158 = 13201;
    }
    if (v156) {
      int v162 = v158;
    }
    else {
      int v162 = v157;
    }
    uint64_t v163 = *(void *)(a1 + 2168);
    v216 = v223;
    if (v223) {
      llvm::MetadataTracking::track((uint64_t)&v216, v223, 2);
    }
    int v217 = v224;
    uint64_t v215 = 0;
    v227[0] = &v228;
    v227[1] = (void *)0x800000000;
    uint64_t v225 = 0;
    char v226 = 6;
    sub_1CD3D5EA0(v163, (uint64_t)v227, (uint64_t)&v225);
    uint64_t v225 = 0;
    char v226 = 6;
    sub_1CD3D5EA0(v163, (uint64_t)v227, (uint64_t)&v225);
    if (LODWORD(v227[1]) >= (unint64_t)HIDWORD(v227[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v227[0] + LODWORD(v227[1])) = v219;
    unsigned int v164 = LODWORD(v227[1]) + 1;
    LODWORD(v227[1]) = v164;
    if (v164 >= HIDWORD(v227[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v227[0] + v164) = v218;
    ++LODWORD(v227[1]);
    uint64_t v225 = *((unsigned int *)v105 - 4);
    char v226 = 6;
    sub_1CD3D5EA0(v163, (uint64_t)v227, (uint64_t)&v225);
    uint64_t v225 = v150;
    char v226 = 6;
    sub_1CD3D5EA0(v163, (uint64_t)v227, (uint64_t)&v225);
    sub_1CB8B55E4(v163, (uint64_t)v227, (uint64_t)&v215);
    BOOL v165 = sub_1CD801450(v163, v162, (uint64_t)&v216, v209, v207, (uint64_t *)v227[0], LODWORD(v227[1]));
    if (v227[0] != &v228) {
      free(v227[0]);
    }
    *(void *)&long long v222 = v165;
    DWORD2(v222) = 0;
    int v166 = v216;
    uint64_t v96 = v208;
    int32x4_t v101 = (int32x4_t)xmmword_1CD923660;
    v102.i64[0] = 0x100000001;
    v102.i64[1] = 0x100000001;
    v103.i64[0] = 0x400000004;
    v103.i64[1] = 0x400000004;
    if (!v216) {
      goto LABEL_254;
    }
    int v167 = *v216;
    if ((v167 - 4) <= 0x1E)
    {
      if ((v216[1] & 0x7F) != 2 && !*((_DWORD *)v216 + 3)) {
        goto LABEL_254;
      }
      uint64_t v168 = *((void *)v216 + 2);
      if ((v168 & 4) == 0) {
        goto LABEL_254;
      }
      unint64_t v169 = v168 & 0xFFFFFFFFFFFFFFF8;
      if (!v169) {
        goto LABEL_254;
      }
      goto LABEL_244;
    }
    if ((v167 - 3) >= 0xFFFFFFFE) {
      int8x8_t v178 = v216;
    }
    else {
      int8x8_t v178 = 0;
    }
    if ((v167 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v169 = (unint64_t)(v178 + 8);
LABEL_244:
      unsigned int v179 = &v216;
      goto LABEL_251;
    }
LABEL_253:
    if (v167 != 3) {
      goto LABEL_254;
    }
    *((void *)v166 + 1) = 0;
    if (v96) {
      goto LABEL_255;
    }
  }
  while (v104 != v100);
  if ((a3 & 1) == 0 && v99)
  {
LABEL_265:
    uint64_t v181 = 0;
    goto LABEL_268;
  }
LABEL_266:
  if (a3)
  {
    uint64_t v189 = *(unsigned int *)(a1 + 16);
    if (v189)
    {
      uint64_t v191 = 0;
      LODWORD(v190) = 0;
      uint64_t v192 = (int *)(*(void *)(a1 + 8) + 20);
      do
      {
        int v193 = *v192;
        v192 += 6;
        if (v193 == 1) {
          int v194 = 1 << v191;
        }
        else {
          int v194 = 0;
        }
        uint64_t v190 = v194 | v190;
        ++v191;
      }
      while (v189 != v191);
    }
    else
    {
      uint64_t v190 = 0;
    }
    if (v96) {
      ++*v96;
    }
    if (v97 == 5) {
      int v195 = 356;
    }
    else {
      int v195 = 373;
    }
    uint64_t v196 = *(void *)(a1 + 2168);
    uint64_t v211 = v223;
    if (v223) {
      llvm::MetadataTracking::track((uint64_t)&v211, v223, 2);
    }
    int v212 = v224;
    *(void *)&long long v219 = 0;
    v227[0] = &v228;
    v227[1] = (void *)0x600000000;
    uint64_t v225 = 0;
    char v226 = 6;
    sub_1CD3D5EA0(v196, (uint64_t)v227, (uint64_t)&v225);
    if (LODWORD(v227[1]) >= HIDWORD(v227[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v227[0] + LODWORD(v227[1])) = v222;
    ++LODWORD(v227[1]);
    uint64_t v225 = 0;
    char v226 = 6;
    sub_1CD3D5EA0(v196, (uint64_t)v227, (uint64_t)&v225);
    uint64_t v225 = v190;
    char v226 = 6;
    sub_1CD3D5EA0(v196, (uint64_t)v227, (uint64_t)&v225);
    sub_1CB8B55E4(v196, (uint64_t)v227, (uint64_t)&v219);
    uint64_t v197 = sub_1CD801450(v196, v195, (uint64_t)&v211, v209, v207, (uint64_t *)v227[0], LODWORD(v227[1]));
    if (v227[0] != &v228) {
      free(v227[0]);
    }
    *(void *)&long long v222 = v197;
    DWORD2(v222) = 0;
    if (v211)
    {
      int v198 = *v211;
      if ((v198 - 4) > 0x1E)
      {
        if ((v198 - 3) >= 0xFFFFFFFE) {
          BOOL v203 = v211;
        }
        else {
          BOOL v203 = 0;
        }
        if ((v198 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v200 = (unint64_t)(v203 + 8);
          goto LABEL_326;
        }
        if (v198 == 3) {
          *((void *)v211 + 1) = 0;
        }
      }
      else if ((v211[1] & 0x7F) == 2 || *((_DWORD *)v211 + 3))
      {
        uint64_t v199 = *((void *)v211 + 2);
        if ((v199 & 4) != 0)
        {
          unint64_t v200 = v199 & 0xFFFFFFFFFFFFFFF8;
          if (v200)
          {
LABEL_326:
            v227[0] = &v211;
            sub_1CC5FA668(v200 + 16, v227);
          }
        }
      }
    }
  }
LABEL_267:
  uint64_t v181 = v222;
LABEL_268:
  if (v223)
  {
    int v182 = *v223;
    if ((v182 - 4) > 0x1E)
    {
      if ((v182 - 3) >= 0xFFFFFFFE) {
        uint64_t v184 = v223;
      }
      else {
        uint64_t v184 = 0;
      }
      if ((v182 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v185 = (unint64_t)(v184 + 8);
        goto LABEL_278;
      }
      if (v182 == 3) {
        *((void *)v223 + 1) = 0;
      }
    }
    else if ((v223[1] & 0x7F) == 2 || *((_DWORD *)v223 + 3))
    {
      uint64_t v204 = *((void *)v223 + 2);
      if ((v204 & 4) != 0)
      {
        unint64_t v185 = v204 & 0xFFFFFFFFFFFFFFF8;
        if (v185)
        {
LABEL_278:
          v227[0] = &v223;
          sub_1CC5FA668(v185 + 16, v227);
        }
      }
    }
  }
  return v181;
}

uint64_t sub_1CB8BBE6C()
{
  return 1;
}

__n128 sub_1CB8BBE7C(unint64_t *a1, unint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 2);
  unint64_t v3 = *a1;
  if (v2 >= *((_DWORD *)a1 + 3))
  {
    unint64_t v7 = v3 + 32 * v2;
    if (v3 > a2 || v7 <= a2) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v4 = (_OWORD *)(v3 + 32 * *((unsigned int *)a1 + 2));
  __n128 result = *(__n128 *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  *int v4 = *(_OWORD *)a2;
  v4[1] = v6;
  ++*((_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_1CB8BBF18(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (!a2)
  {
    int v14 = 0;
    uint64_t result = 0;
    goto LABEL_28;
  }
  int v4 = 0;
  int v5 = *(_DWORD *)(a3 + 16);
  int v6 = *(_DWORD *)(a3 + 8);
  unint64_t v7 = ~((unint64_t)(37 * v5) << 32)
     + (37 * v5)
     + ((unint64_t)(v6 + ((*(void *)a3 >> 4) ^ (*(void *)a3 >> 9))) << 32);
  unint64_t v8 = 9 * (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) ^ (((v7 ^ (v7 >> 22)) + ~((v7 ^ (v7 >> 22)) << 13)) >> 8));
  unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  int v10 = (v9 >> 31) ^ v9;
  int v11 = a2 - 1;
  unsigned int v12 = (a2 - 1) & v10;
  for (int i = 1; ; ++i)
  {
    int v14 = (uint64_t *)(a1 + 56 * v12);
    uint64_t v15 = *v14;
    int v16 = *((_DWORD *)v14 + 2);
    BOOL v17 = *(void *)a3 == *v14 && v6 == v16;
    if (v17 && v5 == *((_DWORD *)v14 + 4))
    {
      uint64_t result = 1;
      goto LABEL_28;
    }
    if (!v15 && v16 == -1) {
      break;
    }
    if (v15) {
      BOOL v19 = 0;
    }
    else {
      BOOL v19 = v16 == -2;
    }
    if (!v19) {
      goto LABEL_15;
    }
    BOOL v20 = *((_DWORD *)v14 + 4) == -2;
LABEL_21:
    if (v20 && v4 == 0) {
      int v4 = (uint64_t *)(a1 + 56 * v12);
    }
    unsigned int v21 = v12 + i;
    unsigned int v12 = v21 & v11;
  }
  if (*((_DWORD *)v14 + 4) != -1)
  {
LABEL_15:
    BOOL v20 = 0;
    goto LABEL_21;
  }
  uint64_t result = 0;
  if (v4) {
    int v14 = v4;
  }
LABEL_28:
  *a4 = v14;
  return result;
}

void sub_1CB8BC038(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
LABEL_1:
  int v10 = a2 - 2;
  unint64_t i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v12 = (uint64_t)a2 - i;
    uint64_t v13 = (uint64_t)((uint64_t)a2 - i) >> 5;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return;
        case 2:
          unsigned int v55 = *((_DWORD *)a2 - 2);
          unsigned int v56 = *(_DWORD *)(i + 24);
          if (v55 > v56 || v55 >= v56 && *((_DWORD *)a2 - 1) < *(_DWORD *)(i + 28))
          {
            long long v155 = *(_OWORD *)i;
            long long v164 = *(_OWORD *)(i + 16);
            long long v57 = *(a2 - 1);
            *(_OWORD *)unint64_t i = *v10;
            *(_OWORD *)(i + 16) = v57;
            *int v10 = v155;
            *(a2 - 1) = v164;
          }
          break;
        case 3:
          sub_1CB8BCBA4((long long *)i, (long long *)(i + 32), a2 - 2);
          break;
        case 4:
          sub_1CB8BCFCC(i, i + 32, i + 64, (uint64_t)(a2 - 2));
          break;
        case 5:
          unsigned int v58 = (long long *)(i + 32);
          uint64_t v59 = (long long *)(i + 64);
          int v60 = (long long *)(i + 96);
          sub_1CB8BCFCC(i, i + 32, i + 64, i + 96);
          unsigned int v61 = *((_DWORD *)a2 - 2);
          unsigned int v62 = *(_DWORD *)(i + 120);
          if (v61 > v62 || v61 >= v62 && *((_DWORD *)a2 - 1) < *(_DWORD *)(i + 124))
          {
            long long v63 = *v60;
            long long v165 = *(_OWORD *)(i + 112);
            long long v64 = *(a2 - 1);
            *int v60 = *v10;
            *(_OWORD *)(i + 112) = v64;
            *int v10 = v63;
            *(a2 - 1) = v165;
            unsigned int v65 = *(_DWORD *)(i + 120);
            unsigned int v66 = *(_DWORD *)(i + 88);
            if (v65 > v66 || v65 >= v66 && *(_DWORD *)(i + 124) < *(_DWORD *)(i + 92))
            {
              long long v68 = *v59;
              long long v67 = *(_OWORD *)(i + 80);
              long long v69 = *(_OWORD *)(i + 112);
              *uint64_t v59 = *v60;
              *(_OWORD *)(i + 80) = v69;
              *int v60 = v68;
              *(_OWORD *)(i + 112) = v67;
              unsigned int v70 = *(_DWORD *)(i + 88);
              unsigned int v71 = *(_DWORD *)(i + 56);
              if (v70 > v71 || v70 >= v71 && *(_DWORD *)(i + 92) < *(_DWORD *)(i + 60))
              {
                long long v73 = *v58;
                long long v72 = *(_OWORD *)(i + 48);
                long long v74 = *(_OWORD *)(i + 80);
                long long *v58 = *v59;
                *(_OWORD *)(i + 48) = v74;
                *uint64_t v59 = v73;
                *(_OWORD *)(i + 80) = v72;
                unsigned int v75 = *(_DWORD *)(i + 56);
                unsigned int v76 = *(_DWORD *)(i + 24);
                if (v75 > v76 || v75 >= v76 && *(_DWORD *)(i + 60) < *(_DWORD *)(i + 28))
                {
                  long long v156 = *(_OWORD *)i;
                  long long v166 = *(_OWORD *)(i + 16);
                  long long v77 = *(_OWORD *)(i + 48);
                  *(_OWORD *)unint64_t i = *v58;
                  *(_OWORD *)(i + 16) = v77;
                  long long *v58 = v156;
                  *(_OWORD *)(i + 48) = v166;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 767) {
      break;
    }
    if (!a3)
    {
      if ((long long *)i == a2) {
        return;
      }
      int64_t v93 = (unint64_t)(v13 - 2) >> 1;
      int64_t v94 = v93;
      while (2)
      {
        int64_t v95 = v94;
        if (v93 >= v94)
        {
          uint64_t v96 = (2 * v94) | 1;
          unint64_t v97 = i + 32 * v96;
          if (2 * v95 + 2 < v13)
          {
            unsigned int v98 = *(_DWORD *)(v97 + 24);
            unsigned int v99 = *(_DWORD *)(v97 + 56);
            if (v98 > v99)
            {
              v97 += 32;
              goto LABEL_144;
            }
            if (v98 >= v99)
            {
              BOOL v100 = *(_DWORD *)(i + 32 * v96 + 28) < *(_DWORD *)(v97 + 60);
              v97 += 32 * v100;
              if (v100) {
LABEL_144:
              }
                uint64_t v96 = 2 * v95 + 2;
            }
          }
          unsigned int v101 = *(_DWORD *)(v97 + 24);
          unsigned int v102 = *(_DWORD *)(i + 32 * v95 + 24);
          if (v101 <= v102)
          {
            unint64_t v103 = i + 32 * v95;
            if (v101 < v102)
            {
              unsigned int v104 = *(_DWORD *)(v103 + 28);
              goto LABEL_151;
            }
            unsigned int v104 = *(_DWORD *)(i + 32 * v95 + 28);
            if (*(_DWORD *)(v97 + 28) >= v104)
            {
LABEL_151:
              uint64_t v168 = *(void *)(v103 + 16);
              long long v158 = *(_OWORD *)v103;
              long long v105 = *(_OWORD *)(v97 + 16);
              *(_OWORD *)unint64_t v103 = *(_OWORD *)v97;
              *(_OWORD *)(v103 + 16) = v105;
              if (v93 < v96)
              {
LABEL_152:
                unint64_t v106 = v97;
LABEL_153:
                *(void *)(v106 + 16) = v168;
                *(_OWORD *)unint64_t v106 = v158;
                *(_DWORD *)(v106 + 24) = v102;
                *(_DWORD *)(v106 + 28) = v104;
                goto LABEL_154;
              }
              while (2)
              {
                uint64_t v107 = 2 * v96;
                uint64_t v96 = (2 * v96) | 1;
                unint64_t v106 = i + 32 * v96;
                uint64_t v108 = v107 + 2;
                if (v108 < v13)
                {
                  unsigned int v109 = *(_DWORD *)(v106 + 24);
                  unsigned int v110 = *(_DWORD *)(v106 + 56);
                  if (v109 > v110)
                  {
                    v106 += 32;
                    goto LABEL_161;
                  }
                  if (v109 >= v110)
                  {
                    BOOL v111 = *(_DWORD *)(i + 32 * v96 + 28) < *(_DWORD *)(v106 + 60);
                    v106 += 32 * v111;
                    if (v111) {
LABEL_161:
                    }
                      uint64_t v96 = v108;
                  }
                }
                unsigned int v112 = *(_DWORD *)(v106 + 24);
                if (v112 > v102 || v112 >= v102 && *(_DWORD *)(v106 + 28) < v104) {
                  goto LABEL_152;
                }
                long long v113 = *(_OWORD *)(v106 + 16);
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v106;
                *(_OWORD *)(v97 + 16) = v113;
                unint64_t v97 = v106;
                if (v93 < v96) {
                  goto LABEL_153;
                }
                continue;
              }
            }
          }
        }
LABEL_154:
        int64_t v94 = v95 - 1;
        if (v95) {
          continue;
        }
        break;
      }
      while (2)
      {
        uint64_t v114 = 0;
        long long v159 = *(_OWORD *)i;
        long long v169 = *(_OWORD *)(i + 16);
        unint64_t v115 = i;
LABEL_168:
        uint32x4_t v116 = (_OWORD *)v115;
        uint64_t v117 = v114 + 1;
        v115 += 32 * (v114 + 1);
        uint64_t v118 = 2 * v114;
        uint64_t v114 = (2 * v114) | 1;
        uint64_t v119 = v118 + 2;
        if (v119 < v13)
        {
          unsigned int v120 = *(_DWORD *)(v115 + 24);
          unsigned int v121 = *(_DWORD *)(v115 + 56);
          if (v120 > v121)
          {
            v115 += 32;
            goto LABEL_171;
          }
          if (v120 >= v121)
          {
            BOOL v122 = HIDWORD(v116[2 * v117 + 1]) < *(_DWORD *)(v115 + 60);
            v115 += 32 * v122;
            if (v122) {
LABEL_171:
            }
              uint64_t v114 = v119;
          }
        }
        long long v123 = *(_OWORD *)(v115 + 16);
        *uint32x4_t v116 = *(_OWORD *)v115;
        v116[1] = v123;
        if (v114 > (uint64_t)((unint64_t)(v13 - 2) >> 1))
        {
          a2 -= 2;
          if ((long long *)v115 == a2)
          {
            *(_OWORD *)unint64_t v115 = v159;
            *(_OWORD *)(v115 + 16) = v169;
          }
          else
          {
            long long v124 = a2[1];
            *(_OWORD *)unint64_t v115 = *a2;
            *(_OWORD *)(v115 + 16) = v124;
            *a2 = v159;
            a2[1] = v169;
            uint64_t v125 = v115 - i + 32;
            if (v125 >= 33)
            {
              unint64_t v126 = ((unint64_t)v125 >> 5) - 2;
              unint64_t v127 = v126 >> 1;
              unint64_t v128 = i + 32 * (v126 >> 1);
              unsigned int v129 = *(_DWORD *)(v128 + 24);
              unsigned int v130 = *(_DWORD *)(v115 + 24);
              if (v129 > v130 || v129 >= v130 && *(_DWORD *)(i + 32 * v127 + 28) < *(_DWORD *)(v115 + 28))
              {
                uint64_t v151 = *(void *)(v115 + 16);
                long long v148 = *(_OWORD *)v115;
                unsigned int v131 = *(_DWORD *)(v115 + 24);
                unsigned int v132 = *(_DWORD *)(v115 + 28);
                long long v133 = *(_OWORD *)(v128 + 16);
                *(_OWORD *)unint64_t v115 = *(_OWORD *)v128;
                *(_OWORD *)(v115 + 16) = v133;
                if (v126 >= 2)
                {
                  while (1)
                  {
                    unint64_t v135 = v127 - 1;
                    unint64_t v127 = (v127 - 1) >> 1;
                    unint64_t v134 = i + 32 * v127;
                    unsigned int v136 = *(_DWORD *)(v134 + 24);
                    if (v136 <= v131 && (v136 < v131 || *(_DWORD *)(i + 32 * v127 + 28) >= v132)) {
                      break;
                    }
                    long long v137 = *(_OWORD *)(v134 + 16);
                    *(_OWORD *)unint64_t v128 = *(_OWORD *)v134;
                    *(_OWORD *)(v128 + 16) = v137;
                    unint64_t v128 = i + 32 * v127;
                    if (v135 < 2) {
                      goto LABEL_187;
                    }
                  }
                }
                unint64_t v134 = v128;
LABEL_187:
                *(void *)(v134 + 16) = v151;
                *(_OWORD *)unint64_t v134 = v148;
                *(_DWORD *)(v134 + 24) = v131;
                *(_DWORD *)(v134 + 28) = v132;
              }
            }
          }
          if (v13-- <= 2) {
            return;
          }
          continue;
        }
        goto LABEL_168;
      }
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = (long long *)(i + 32 * ((unint64_t)v13 >> 1));
    if ((unint64_t)v12 > 0x1000)
    {
      sub_1CB8BCBA4((long long *)a1, (long long *)(a1 + 32 * ((unint64_t)v13 >> 1)), a2 - 2);
      sub_1CB8BCBA4((long long *)(a1 + 32), v15 - 2, a2 - 4);
      sub_1CB8BCBA4((long long *)(a1 + 64), (long long *)(a1 + 32 + 32 * v14), a2 - 6);
      sub_1CB8BCBA4(v15 - 2, v15, (long long *)(a1 + 32 + 32 * v14));
      long long v152 = *(_OWORD *)a1;
      long long v161 = *(_OWORD *)(a1 + 16);
      long long v16 = v15[1];
      *(_OWORD *)a1 = *v15;
      *(_OWORD *)(a1 + 16) = v16;
      *uint64_t v15 = v152;
      v15[1] = v161;
    }
    else
    {
      sub_1CB8BCBA4((long long *)(a1 + 32 * ((unint64_t)v13 >> 1)), (long long *)a1, a2 - 2);
    }
    --a3;
    if (a4)
    {
      unsigned int v17 = *(_DWORD *)(a1 + 24);
LABEL_15:
      uint64_t v19 = 0;
      uint64_t v149 = *(void *)(a1 + 16);
      long long v146 = *(_OWORD *)a1;
      unsigned int v20 = *(_DWORD *)(a1 + 28);
      while (1)
      {
        unsigned int v21 = *(_DWORD *)(a1 + v19 + 56);
        if (v21 <= v17 && (v21 < v17 || *(_DWORD *)(a1 + v19 + 60) >= v20)) {
          break;
        }
        v19 += 32;
      }
      unint64_t v22 = a1 + v19 + 32;
      if (v19)
      {
        unsigned int v23 = *((_DWORD *)a2 - 2);
        uint64_t v24 = (_DWORD *)a2 - 10;
        int v25 = a2 - 2;
        if (v23 <= v17)
        {
          do
          {
            if (v23 >= v17 && v24[9] < v20) {
              break;
            }
            unsigned int v26 = *v24;
            v24 -= 8;
            unsigned int v23 = v26;
          }
          while (v26 <= v17);
LABEL_25:
          int v25 = (long long *)(v24 + 2);
        }
      }
      else
      {
        int v25 = a2;
        if (v22 < (unint64_t)a2)
        {
          unsigned int v27 = *((_DWORD *)a2 - 2);
          int v25 = a2 - 2;
          if (v27 <= v17)
          {
            uint64_t v24 = (_DWORD *)a2 - 10;
            int v25 = a2 - 2;
            while (1)
            {
              int v37 = v24 + 2;
              if (v27 >= v17)
              {
                if (v24[9] < v20 || v22 >= (unint64_t)v37) {
                  goto LABEL_25;
                }
              }
              else if (v22 >= (unint64_t)v37)
              {
                break;
              }
              v25 -= 2;
              unsigned int v39 = *v24;
              v24 -= 8;
              unsigned int v27 = v39;
              if (v39 > v17) {
                goto LABEL_25;
              }
            }
          }
        }
      }
      unint64_t i = v22;
      if (v22 < (unint64_t)v25)
      {
        unint64_t v28 = v25;
        do
        {
          long long v153 = *(_OWORD *)i;
          long long v162 = *(_OWORD *)(i + 16);
          long long v29 = v28[1];
          *(_OWORD *)unint64_t i = *v28;
          *(_OWORD *)(i + 16) = v29;
          *unint64_t v28 = v153;
          v28[1] = v162;
          do
          {
            do
            {
              i += 32;
              unsigned int v30 = *(_DWORD *)(i + 24);
            }
            while (v30 > v17);
          }
          while (v30 >= v17 && *(_DWORD *)(i + 28) < v20);
          unsigned int v31 = *((_DWORD *)v28 - 2);
          if (v31 <= v17)
          {
            uint64_t v32 = (_DWORD *)v28 - 10;
            do
            {
              if (v31 >= v17 && v32[9] < v20) {
                break;
              }
              unsigned int v33 = *v32;
              v32 -= 8;
              unsigned int v31 = v33;
            }
            while (v33 <= v17);
            unint64_t v28 = (long long *)(v32 + 2);
          }
          else
          {
            v28 -= 2;
          }
        }
        while (i < (unint64_t)v28);
      }
      int v34 = (long long *)(i - 32);
      if (i - 32 != a1)
      {
        long long v35 = *(_OWORD *)(i - 16);
        *(_OWORD *)a1 = *v34;
        *(_OWORD *)(a1 + 16) = v35;
      }
      *(void *)(i - 16) = v149;
      *int v34 = v146;
      *(_DWORD *)(i - 8) = v17;
      *(_DWORD *)(i - 4) = v20;
      if (v22 < (unint64_t)v25) {
        goto LABEL_47;
      }
      BOOL v36 = sub_1CB8BCCB4(a1, i - 32);
      if (sub_1CB8BCCB4(i, (uint64_t)a2))
      {
        a2 = (long long *)(i - 32);
        if (v36) {
          return;
        }
        goto LABEL_1;
      }
      if (!v36)
      {
LABEL_47:
        sub_1CB8BC038(a1, i - 32, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(a1 - 8);
      unsigned int v17 = *(_DWORD *)(a1 + 24);
      if (v18 > v17) {
        goto LABEL_15;
      }
      if (v18 >= v17)
      {
        unsigned int v40 = *(_DWORD *)(a1 + 28);
        if (*(_DWORD *)(a1 - 4) < v40) {
          goto LABEL_15;
        }
      }
      else
      {
        unsigned int v40 = *(_DWORD *)(a1 + 28);
      }
      uint64_t v150 = *(void *)(a1 + 16);
      long long v147 = *(_OWORD *)a1;
      unsigned int v41 = *((_DWORD *)a2 - 2);
      if (v17 <= v41 && (v17 < v41 || v40 >= *((_DWORD *)a2 - 1)))
      {
        for (unint64_t i = a1 + 32; i < (unint64_t)a2; i += 32)
        {
          unsigned int v43 = *(_DWORD *)(i + 24);
          if (v17 > v43 || v17 >= v43 && v40 < *(_DWORD *)(i + 28)) {
            break;
          }
        }
      }
      else
      {
        unsigned int v42 = *(_DWORD *)(a1 + 56);
        if (v17 <= v42)
        {
          int v44 = (unsigned int *)(a1 + 88);
          do
          {
            if (v17 >= v42 && v40 < *(v44 - 7)) {
              break;
            }
            unsigned int v45 = *v44;
            v44 += 8;
            unsigned int v42 = v45;
          }
          while (v17 <= v45);
          unint64_t i = (unint64_t)(v44 - 14);
        }
        else
        {
          unint64_t i = a1 + 32;
        }
      }
      int v46 = a2;
      if (i < (unint64_t)a2)
      {
        for (uint64_t j = (unsigned int *)a2 - 1; v17 > v41 || v17 >= v41 && v40 < *j; j -= 8)
          unsigned int v41 = *(j - 9);
        int v46 = (long long *)(j - 7);
      }
      while (i < (unint64_t)v46)
      {
        long long v154 = *(_OWORD *)i;
        long long v163 = *(_OWORD *)(i + 16);
        long long v48 = v46[1];
        *(_OWORD *)unint64_t i = *v46;
        *(_OWORD *)(i + 16) = v48;
        *int v46 = v154;
        v46[1] = v163;
        unsigned int v49 = *(_DWORD *)(i + 56);
        if (v17 <= v49)
        {
          int v50 = (unsigned int *)(i + 88);
          do
          {
            if (v17 >= v49 && v40 < *(v50 - 7)) {
              break;
            }
            unsigned int v51 = *v50;
            v50 += 8;
            unsigned int v49 = v51;
          }
          while (v17 <= v51);
          unint64_t i = (unint64_t)(v50 - 14);
        }
        else
        {
          i += 32;
        }
        do
        {
          do
          {
            v46 -= 2;
            unsigned int v52 = *((_DWORD *)v46 + 6);
          }
          while (v17 > v52);
        }
        while (v17 >= v52 && v40 < *((_DWORD *)v46 + 7));
      }
      unsigned int v53 = (long long *)(i - 32);
      BOOL v4 = i - 32 >= a1;
      BOOL v5 = i - 32 == a1;
      if (i - 32 != a1)
      {
        long long v54 = *(_OWORD *)(i - 16);
        *(_OWORD *)a1 = *v53;
        *(_OWORD *)(a1 + 16) = v54;
      }
      a4 = 0;
      *(void *)(i - 16) = v150;
      *unsigned int v53 = v147;
      *(_DWORD *)(i - 8) = v17;
      *(_DWORD *)(i - 4) = v40;
    }
  }
  BOOL v78 = (long long *)(i + 32);
  BOOL v80 = (long long *)i == a2 || v78 == a2;
  if (a4)
  {
    if (v80) {
      return;
    }
    uint64_t v81 = 0;
    unint64_t v82 = i;
    while (2)
    {
      unint64_t v83 = v82;
      unint64_t v82 = (unint64_t)v78;
      unsigned int v84 = *(_DWORD *)(v83 + 56);
      unsigned int v85 = *(_DWORD *)(v83 + 24);
      if (v84 > v85)
      {
        unsigned int v86 = *(_DWORD *)(v83 + 60);
        goto LABEL_124;
      }
      if (v84 >= v85)
      {
        unsigned int v86 = *(_DWORD *)(v83 + 60);
        if (v86 < *(_DWORD *)(v83 + 28))
        {
LABEL_124:
          uint64_t v167 = *(void *)(v82 + 16);
          long long v157 = *(_OWORD *)v82;
          long long v87 = *(_OWORD *)(v83 + 16);
          *(_OWORD *)unint64_t v82 = *(_OWORD *)v83;
          *(_OWORD *)(v82 + 16) = v87;
          unint64_t v88 = i;
          if (v83 != i)
          {
            uint64_t v89 = v81;
            do
            {
              BOOL v90 = (_OWORD *)(i + v89);
              unsigned int v91 = *(_DWORD *)(i + v89 - 8);
              if (v84 <= v91)
              {
                if (v84 < v91)
                {
                  unint64_t v88 = v83;
                  goto LABEL_135;
                }
                unint64_t v88 = i + v89;
                if (v86 >= *(_DWORD *)(i + v89 - 4)) {
                  goto LABEL_135;
                }
              }
              v83 -= 32;
              long long v92 = *(v90 - 1);
              *BOOL v90 = *(v90 - 2);
              v90[1] = v92;
              v89 -= 32;
            }
            while (v89);
            unint64_t v88 = i;
          }
LABEL_135:
          *(void *)(v88 + 16) = v167;
          *(_OWORD *)unint64_t v88 = v157;
          *(_DWORD *)(v88 + 24) = v84;
          *(_DWORD *)(v88 + 28) = v86;
        }
      }
      BOOL v78 = (long long *)(v82 + 32);
      v81 += 32;
      if ((long long *)(v82 + 32) == a2) {
        return;
      }
      continue;
    }
  }
  if (!v80)
  {
    while (2)
    {
      unint64_t v139 = a1;
      a1 = (unint64_t)v78;
      unsigned int v140 = *(_DWORD *)(v139 + 56);
      unsigned int v141 = *(_DWORD *)(v139 + 24);
      if (v140 <= v141)
      {
        if (v140 >= v141)
        {
          unsigned int v142 = *(_DWORD *)(v139 + 60);
          if (v142 < *(_DWORD *)(v139 + 28)) {
            goto LABEL_200;
          }
        }
      }
      else
      {
        unsigned int v142 = *(_DWORD *)(v139 + 60);
LABEL_200:
        uint64_t v170 = *(void *)(a1 + 16);
        long long v160 = *(_OWORD *)a1;
        do
        {
          do
          {
            unint64_t v143 = v139;
            long long v144 = *(_OWORD *)(v139 + 16);
            *(_OWORD *)(v139 + 32) = *(_OWORD *)v139;
            *(_OWORD *)(v139 + 48) = v144;
            v139 -= 32;
            unsigned int v145 = *(_DWORD *)(v143 - 8);
          }
          while (v140 > v145);
        }
        while (v140 >= v145 && v142 < *(_DWORD *)(v143 - 4));
        *(void *)(v143 + 16) = v170;
        *(_OWORD *)unint64_t v143 = v160;
        *(_DWORD *)(v143 + 24) = v140;
        *(_DWORD *)(v143 + 28) = v142;
      }
      BOOL v78 = (long long *)(a1 + 32);
      if ((long long *)(a1 + 32) == a2) {
        return;
      }
      continue;
    }
  }
}

  int v10 = a2 - 2;
  unint64_t i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v12 = (uint64_t)a2 - i;
    uint64_t v13 = (uint64_t)((uint64_t)a2 - i) >> 5;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return;
        case 2:
          unsigned int v55 = *((_DWORD *)a2 - 2);
          unsigned int v56 = *(_DWORD *)(i + 24);
          if (v55 > v56 || v55 >= v56 && *((_DWORD *)a2 - 1) < *(_DWORD *)(i + 28))
          {
            long long v155 = *(_OWORD *)i;
            long long v164 = *(_OWORD *)(i + 16);
            long long v57 = *(a2 - 1);
            *(_OWORD *)unint64_t i = *v10;
            *(_OWORD *)(i + 16) = v57;
            *int v10 = v155;
            *(a2 - 1) = v164;
          }
          break;
        case 3:
          sub_1CB8BCBA4((long long *)i, (long long *)(i + 32), a2 - 2);
          break;
        case 4:
          sub_1CB8BCFCC(i, i + 32, i + 64, (uint64_t)(a2 - 2));
          break;
        case 5:
          unsigned int v58 = (long long *)(i + 32);
          uint64_t v59 = (long long *)(i + 64);
          int v60 = (long long *)(i + 96);
          sub_1CB8BCFCC(i, i + 32, i + 64, i + 96);
          unsigned int v61 = *((_DWORD *)a2 - 2);
          unsigned int v62 = *(_DWORD *)(i + 120);
          if (v61 > v62 || v61 >= v62 && *((_DWORD *)a2 - 1) < *(_DWORD *)(i + 124))
          {
            long long v63 = *v60;
            long long v165 = *(_OWORD *)(i + 112);
            long long v64 = *(a2 - 1);
            *int v60 = *v10;
            *(_OWORD *)(i + 112) = v64;
            *int v10 = v63;
            *(a2 - 1) = v165;
            unsigned int v65 = *(_DWORD *)(i + 120);
            unsigned int v66 = *(_DWORD *)(i + 88);
            if (v65 > v66 || v65 >= v66 && *(_DWORD *)(i + 124) < *(_DWORD *)(i + 92))
            {
              long long v68 = *v59;
              long long v67 = *(_OWORD *)(i + 80);
              long long v69 = *(_OWORD *)(i + 112);
              *uint64_t v59 = *v60;
              *(_OWORD *)(i + 80) = v69;
              *int v60 = v68;
              *(_OWORD *)(i + 112) = v67;
              unsigned int v70 = *(_DWORD *)(i + 88);
              unsigned int v71 = *(_DWORD *)(i + 56);
              if (v70 > v71 || v70 >= v71 && *(_DWORD *)(i + 92) < *(_DWORD *)(i + 60))
              {
                long long v73 = *v58;
                long long v72 = *(_OWORD *)(i + 48);
                long long v74 = *(_OWORD *)(i + 80);
                long long *v58 = *v59;
                *(_OWORD *)(i + 48) = v74;
                *uint64_t v59 = v73;
                *(_OWORD *)(i + 80) = v72;
                unsigned int v75 = *(_DWORD *)(i + 56);
                unsigned int v76 = *(_DWORD *)(i + 24);
                if (v75 > v76 || v75 >= v76 && *(_DWORD *)(i + 60) < *(_DWORD *)(i + 28))
                {
                  long long v156 = *(_OWORD *)i;
                  long long v166 = *(_OWORD *)(i + 16);
                  long long v77 = *(_OWORD *)(i + 48);
                  *(_OWORD *)unint64_t i = *v58;
                  *(_OWORD *)(i + 16) = v77;
                  long long *v58 = v156;
                  *(_OWORD *)(i + 48) = v166;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 767) {
      break;
    }
    if (!a3)
    {
      if ((long long *)i == a2) {
        return;
      }
      int64_t v93 = (unint64_t)(v13 - 2) >> 1;
      int64_t v94 = v93;
      while (2)
      {
        int64_t v95 = v94;
        if (v93 >= v94)
        {
          uint64_t v96 = (2 * v94) | 1;
          unint64_t v97 = i + 32 * v96;
          if (2 * v95 + 2 < v13)
          {
            unsigned int v98 = *(_DWORD *)(v97 + 24);
            unsigned int v99 = *(_DWORD *)(v97 + 56);
            if (v98 > v99)
            {
              v97 += 32;
              goto LABEL_144;
            }
            if (v98 >= v99)
            {
              BOOL v100 = *(_DWORD *)(i + 32 * v96 + 28) < *(_DWORD *)(v97 + 60);
              v97 += 32 * v100;
              if (v100) {
LABEL_144:
              }
                uint64_t v96 = 2 * v95 + 2;
            }
          }
          unsigned int v101 = *(_DWORD *)(v97 + 24);
          unsigned int v102 = *(_DWORD *)(i + 32 * v95 + 24);
          if (v101 <= v102)
          {
            unint64_t v103 = i + 32 * v95;
            if (v101 < v102)
            {
              unsigned int v104 = *(_DWORD *)(v103 + 28);
              goto LABEL_151;
            }
            unsigned int v104 = *(_DWORD *)(i + 32 * v95 + 28);
            if (*(_DWORD *)(v97 + 28) >= v104)
            {
LABEL_151:
              uint64_t v168 = *(void *)(v103 + 16);
              long long v158 = *(_OWORD *)v103;
              long long v105 = *(_OWORD *)(v97 + 16);
              *(_OWORD *)unint64_t v103 = *(_OWORD *)v97;
              *(_OWORD *)(v103 + 16) = v105;
              if (v93 < v96)
              {
LABEL_152:
                unint64_t v106 = v97;
LABEL_153:
                *(void *)(v106 + 16) = v168;
                *(_OWORD *)unint64_t v106 = v158;
                *(_DWORD *)(v106 + 24) = v102;
                *(_DWORD *)(v106 + 28) = v104;
                goto LABEL_154;
              }
              while (2)
              {
                uint64_t v107 = 2 * v96;
                uint64_t v96 = (2 * v96) | 1;
                unint64_t v106 = i + 32 * v96;
                uint64_t v108 = v107 + 2;
                if (v108 < v13)
                {
                  unsigned int v109 = *(_DWORD *)(v106 + 24);
                  unsigned int v110 = *(_DWORD *)(v106 + 56);
                  if (v109 > v110)
                  {
                    v106 += 32;
                    goto LABEL_161;
                  }
                  if (v109 >= v110)
                  {
                    BOOL v111 = *(_DWORD *)(i + 32 * v96 + 28) < *(_DWORD *)(v106 + 60);
                    v106 += 32 * v111;
                    if (v111) {
LABEL_161:
                    }
                      uint64_t v96 = v108;
                  }
                }
                unsigned int v112 = *(_DWORD *)(v106 + 24);
                if (v112 > v102 || v112 >= v102 && *(_DWORD *)(v106 + 28) < v104) {
                  goto LABEL_152;
                }
                long long v113 = *(_OWORD *)(v106 + 16);
                *(_OWORD *)unint64_t v97 = *(_OWORD *)v106;
                *(_OWORD *)(v97 + 16) = v113;
                unint64_t v97 = v106;
                if (v93 < v96) {
                  goto LABEL_153;
                }
                continue;
              }
            }
          }
        }
LABEL_154:
        int64_t v94 = v95 - 1;
        if (v95) {
          continue;
        }
        break;
      }
      while (2)
      {
        uint64_t v114 = 0;
        long long v159 = *(_OWORD *)i;
        long long v169 = *(_OWORD *)(i + 16);
        unint64_t v115 = i;
LABEL_168:
        uint32x4_t v116 = (_OWORD *)v115;
        uint64_t v117 = v114 + 1;
        v115 += 32 * (v114 + 1);
        uint64_t v118 = 2 * v114;
        uint64_t v114 = (2 * v114) | 1;
        uint64_t v119 = v118 + 2;
        if (v119 < v13)
        {
          unsigned int v120 = *(_DWORD *)(v115 + 24);
          unsigned int v121 = *(_DWORD *)(v115 + 56);
          if (v120 > v121)
          {
            v115 += 32;
            goto LABEL_171;
          }
          if (v120 >= v121)
          {
            BOOL v122 = HIDWORD(v116[2 * v117 + 1]) < *(_DWORD *)(v115 + 60);
            v115 += 32 * v122;
            if (v122) {
LABEL_171:
            }
              uint64_t v114 = v119;
          }
        }
        long long v123 = *(_OWORD *)(v115 + 16);
        *uint32x4_t v116 = *(_OWORD *)v115;
        v116[1] = v123;
        if (v114 > (uint64_t)((unint64_t)(v13 - 2) >> 1))
        {
          a2 -= 2;
          if ((long long *)v115 == a2)
          {
            *(_OWORD *)unint64_t v115 = v159;
            *(_OWORD *)(v115 + 16) = v169;
          }
          else
          {
            long long v124 = a2[1];
            *(_OWORD *)unint64_t v115 = *a2;
            *(_OWORD *)(v115 + 16) = v124;
            *a2 = v159;
            a2[1] = v169;
            uint64_t v125 = v115 - i + 32;
            if (v125 >= 33)
            {
              unint64_t v126 = ((unint64_t)v125 >> 5) - 2;
              unint64_t v127 = v126 >> 1;
              unint64_t v128 = i + 32 * (v126 >> 1);
              unsigned int v129 = *(_DWORD *)(v128 + 24);
              unsigned int v130 = *(_DWORD *)(v115 + 24);
              if (v129 > v130 || v129 >= v130 && *(_DWORD *)(i + 32 * v127 + 28) < *(_DWORD *)(v115 + 28))
              {
                uint64_t v151 = *(void *)(v115 + 16);
                long long v148 = *(_OWORD *)v115;
                unsigned int v131 = *(_DWORD *)(v115 + 24);
                unsigned int v132 = *(_DWORD *)(v115 + 28);
                long long v133 = *(_OWORD *)(v128 + 16);
                *(_OWORD *)unint64_t v115 = *(_OWORD *)v128;
                *(_OWORD *)(v115 + 16) = v133;
                if (v126 >= 2)
                {
                  while (1)
                  {
                    unint64_t v135 = v127 - 1;
                    unint64_t v127 = (v127 - 1) >> 1;
                    unint64_t v134 = i + 32 * v127;
                    unsigned int v136 = *(_DWORD *)(v134 + 24);
                    if (v136 <= v131 && (v136 < v131 || *(_DWORD *)(i + 32 * v127 + 28) >= v132)) {
                      break;
                    }
                    long long v137 = *(_OWORD *)(v134 + 16);
                    *(_OWORD *)unint64_t v128 = *(_OWORD *)v134;
                    *(_OWORD *)(v128 + 16) = v137;
                    unint64_t v128 = i + 32 * v127;
                    if (v135 < 2) {
                      goto LABEL_187;
                    }
                  }
                }
                unint64_t v134 = v128;
LABEL_187:
                *(void *)(v134 + 16) = v151;
                *(_OWORD *)unint64_t v134 = v148;
                *(_DWORD *)(v134 + 24) = v131;
                *(_DWORD *)(v134 + 28) = v132;
              }
            }
          }
          if (v13-- <= 2) {
            return;
          }
          continue;
        }
        goto LABEL_168;
      }
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = (long long *)(i + 32 * ((unint64_t)v13 >> 1));
    if ((unint64_t)v12 > 0x1000)
    {
      sub_1CB8BCBA4((long long *)a1, (long long *)(a1 + 32 * ((unint64_t)v13 >> 1)), a2 - 2);
      sub_1CB8BCBA4((long long *)(a1 + 32), v15 - 2, a2 - 4);
      sub_1CB8BCBA4((long long *)(a1 + 64), (long long *)(a1 + 32 + 32 * v14), a2 - 6);
      sub_1CB8BCBA4(v15 - 2, v15, (long long *)(a1 + 32 + 32 * v14));
      long long v152 = *(_OWORD *)a1;
      long long v161 = *(_OWORD *)(a1 + 16);
      long long v16 = v15[1];
      *(_OWORD *)a1 = *v15;
      *(_OWORD *)(a1 + 16) = v16;
      *uint64_t v15 = v152;
      v15[1] = v161;
    }
    else
    {
      sub_1CB8BCBA4((long long *)(a1 + 32 * ((unint64_t)v13 >> 1)), (long long *)a1, a2 - 2);
    }
    --a3;
    if (a4)
    {
      unsigned int v17 = *(_DWORD *)(a1 + 24);
LABEL_15:
      uint64_t v19 = 0;
      uint64_t v149 = *(void *)(a1 + 16);
      long long v146 = *(_OWORD *)a1;
      unsigned int v20 = *(_DWORD *)(a1 + 28);
      while (1)
      {
        unsigned int v21 = *(_DWORD *)(a1 + v19 + 56);
        if (v21 <= v17 && (v21 < v17 || *(_DWORD *)(a1 + v19 + 60) >= v20)) {
          break;
        }
        v19 += 32;
      }
      unint64_t v22 = a1 + v19 + 32;
      if (v19)
      {
        unsigned int v23 = *((_DWORD *)a2 - 2);
        uint64_t v24 = (_DWORD *)a2 - 10;
        int v25 = a2 - 2;
        if (v23 <= v17)
        {
          do
          {
            if (v23 >= v17 && v24[9] < v20) {
              break;
            }
            unsigned int v26 = *v24;
            v24 -= 8;
            unsigned int v23 = v26;
          }
          while (v26 <= v17);
LABEL_25:
          int v25 = (long long *)(v24 + 2);
        }
      }
      else
      {
        int v25 = a2;
        if (v22 < (unint64_t)a2)
        {
          unsigned int v27 = *((_DWORD *)a2 - 2);
          int v25 = a2 - 2;
          if (v27 <= v17)
          {
            uint64_t v24 = (_DWORD *)a2 - 10;
            int v25 = a2 - 2;
            while (1)
            {
              int v37 = v24 + 2;
              if (v27 >= v17)
              {
                if (v24[9] < v20 || v22 >= (unint64_t)v37) {
                  goto LABEL_25;
                }
              }
              else if (v22 >= (unint64_t)v37)
              {
                break;
              }
              v25 -= 2;
              unsigned int v39 = *v24;
              v24 -= 8;
              unsigned int v27 = v39;
              if (v39 > v17) {
                goto LABEL_25;
              }
            }
          }
        }
      }
      unint64_t i = v22;
      if (v22 < (unint64_t)v25)
      {
        unint64_t v28 = v25;
        do
        {
          long long v153 = *(_OWORD *)i;
          long long v162 = *(_OWORD *)(i + 16);
          long long v29 = v28[1];
          *(_OWORD *)unint64_t i = *v28;
          *(_OWORD *)(i + 16) = v29;
          *unint64_t v28 = v153;
          v28[1] = v162;
          do
          {
            do
            {
              i += 32;
              unsigned int v30 = *(_DWORD *)(i + 24);
            }
            while (v30 > v17);
          }
          while (v30 >= v17 && *(_DWORD *)(i + 28) < v20);
          unsigned int v31 = *((_DWORD *)v28 - 2);
          if (v31 <= v17)
          {
            uint64_t v32 = (_DWORD *)v28 - 10;
            do
            {
              if (v31 >= v17 && v32[9] < v20) {
                break;
              }
              unsigned int v33 = *v32;
              v32 -= 8;
              unsigned int v31 = v33;
            }
            while (v33 <= v17);
            unint64_t v28 = (long long *)(v32 + 2);
          }
          else
          {
            v28 -= 2;
          }
        }
        while (i < (unint64_t)v28);
      }
      int v34 = (long long *)(i - 32);
      if (i - 32 != a1)
      {
        long long v35 = *(_OWORD *)(i - 16);
        *(_OWORD *)a1 = *v34;
        *(_OWORD *)(a1 + 16) = v35;
      }
      *(void *)(i - 16) = v149;
      *int v34 = v146;
      *(_DWORD *)(i - 8) = v17;
      *(_DWORD *)(i - 4) = v20;
      if (v22 < (unint64_t)v25) {
        goto LABEL_47;
      }
      BOOL v36 = sub_1CB9CB900(a1, i - 32);
      if (sub_1CB9CB900(i, (uint64_t)a2))
      {
        a2 = (long long *)(i - 32);
        if (v36) {
          return;
        }
        goto LABEL_1;
      }
      if (!v36)
      {
LABEL_47:
        sub_1CB9CAD94(a1, i - 32, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(a1 - 8);
      unsigned int v17 = *(_DWORD *)(a1 + 24);
      if (v18 > v17) {
        goto LABEL_15;
      }
      if (v18 >= v17)
      {
        unsigned int v40 = *(_DWORD *)(a1 + 28);
        if (*(_DWORD *)(a1 - 4) < v40) {
          goto LABEL_15;
        }
      }
      else
      {
        unsigned int v40 = *(_DWORD *)(a1 + 28);
      }
      uint64_t v150 = *(void *)(a1 + 16);
      long long v147 = *(_OWORD *)a1;
      unsigned int v41 = *((_DWORD *)a2 - 2);
      if (v17 <= v41 && (v17 < v41 || v40 >= *((_DWORD *)a2 - 1)))
      {
        for (unint64_t i = a1 + 32; i < (unint64_t)a2; i += 32)
        {
          unsigned int v43 = *(_DWORD *)(i + 24);
          if (v17 > v43 || v17 >= v43 && v40 < *(_DWORD *)(i + 28)) {
            break;
          }
        }
      }
      else
      {
        unsigned int v42 = *(_DWORD *)(a1 + 56);
        if (v17 <= v42)
        {
          int v44 = (unsigned int *)(a1 + 88);
          do
          {
            if (v17 >= v42 && v40 < *(v44 - 7)) {
              break;
            }
            unsigned int v45 = *v44;
            v44 += 8;
            unsigned int v42 = v45;
          }
          while (v17 <= v45);
          unint64_t i = (unint64_t)(v44 - 14);
        }
        else
        {
          unint64_t i = a1 + 32;
        }
      }
      int v46 = a2;
      if (i < (unint64_t)a2)
      {
        for (uint64_t j = (unsigned int *)a2 - 1; v17 > v41 || v17 >= v41 && v40 < *j; j -= 8)
          unsigned int v41 = *(j - 9);
        int v46 = (long long *)(j - 7);
      }
      while (i < (unint64_t)v46)
      {
        long long v154 = *(_OWORD *)i;
        long long v163 = *(_OWORD *)(i + 16);
        long long v48 = v46[1];
        *(_OWORD *)unint64_t i = *v46;
        *(_OWORD *)(i + 16) = v48;
        *int v46 = v154;
        v46[1] = v163;
        unsigned int v49 = *(_DWORD *)(i + 56);
        if (v17 <= v49)
        {
          int v50 = (unsigned int *)(i + 88);
          do
          {
            if (v17 >= v49 && v40 < *(v50 - 7)) {
              break;
            }
            unsigned int v51 = *v50;
            v50 += 8;
            unsigned int v49 = v51;
          }
          while (v17 <= v51);
          unint64_t i = (unint64_t)(v50 - 14);
        }
        else
        {
          i += 32;
        }
        do
        {
          do
          {
            v46 -= 2;
            unsigned int v52 = *((_DWORD *)v46 + 6);
          }
          while (v17 > v52);
        }
        while (v17 >= v52 && v40 < *((_DWORD *)v46 + 7));
      }
      unsigned int v53 = (long long *)(i - 32);
      BOOL v4 = i - 32 >= a1;
      BOOL v5 = i - 32 == a1;
      if (i - 32 != a1)
      {
        long long v54 = *(_OWORD *)(i - 16);
        *(_OWORD *)a1 = *v53;
        *(_OWORD *)(a1 + 16) = v54;
      }
      a4 = 0;
      *(void *)(i - 16) = v150;
      *unsigned int v53 = v147;
      *(_DWORD *)(i - 8) = v17;
      *(_DWORD *)(i - 4) = v40;
    }
  }
  BOOL v78 = (long long *)(i + 32);
  BOOL v80 = (long long *)i == a2 || v78 == a2;
  if (a4)
  {
    if (v80) {
      return;
    }
    uint64_t v81 = 0;
    unint64_t v82 = i;
    while (2)
    {
      unint64_t v83 = v82;
      unint64_t v82 = (unint64_t)v78;
      unsigned int v84 = *(_DWORD *)(v83 + 56);
      unsigned int v85 = *(_DWORD *)(v83 + 24);
      if (v84 > v85)
      {
        unsigned int v86 = *(_DWORD *)(v83 + 60);
        goto LABEL_124;
      }
      if (v84 >= v85)
      {
        unsigned int v86 = *(_DWORD *)(v83 + 60);
        if (v86 < *(_DWORD *)(v83 + 28))
        {
LABEL_124:
          uint64_t v167 = *(void *)(v82 + 16);
          long long v157 = *(_OWORD *)v82;
          long long v87 = *(_OWORD *)(v83 + 16);
          *(_OWORD *)unint64_t v82 = *(_OWORD *)v83;
          *(_OWORD *)(v82 + 16) = v87;
          unint64_t v88 = i;
          if (v83 != i)
          {
            uint64_t v89 = v81;
            do
            {
              BOOL v90 = (_OWORD *)(i + v89);
              unsigned int v91 = *(_DWORD *)(i + v89 - 8);
              if (v84 <= v91)
              {
                if (v84 < v91)
                {
                  unint64_t v88 = v83;
                  goto LABEL_135;
                }
                unint64_t v88 = i + v89;
                if (v86 >= *(_DWORD *)(i + v89 - 4)) {
                  goto LABEL_135;
                }
              }
              v83 -= 32;
              long long v92 = *(v90 - 1);
              *BOOL v90 = *(v90 - 2);
              v90[1] = v92;
              v89 -= 32;
            }
            while (v89);
            unint64_t v88 = i;
          }
LABEL_135:
          *(void *)(v88 + 16) = v167;
          *(_OWORD *)unint64_t v88 = v157;
          *(_DWORD *)(v88 + 24) = v84;
          *(_DWORD *)(v88 + 28) = v86;
        }
      }
      BOOL v78 = (long long *)(v82 + 32);
      v81 += 32;
      if ((long long *)(v82 + 32) == a2) {
        return;
      }
      continue;
    }
  }
  if (!v80)
  {
    while (2)
    {
      unint64_t v139 = a1;
      a1 = (unint64_t)v78;
      unsigned int v140 = *(_DWORD *)(v139 + 56);
      unsigned int v141 = *(_DWORD *)(v139 + 24);
      if (v140 <= v141)
      {
        if (v140 >= v141)
        {
          unsigned int v142 = *(_DWORD *)(v139 + 60);
          if (v142 < *(_DWORD *)(v139 + 28)) {
            goto LABEL_200;
          }
        }
      }
      else
      {
        unsigned int v142 = *(_DWORD *)(v139 + 60);
LABEL_200:
        uint64_t v170 = *(void *)(a1 + 16);
        long long v160 = *(_OWORD *)a1;
        do
        {
          do
          {
            unint64_t v143 = v139;
            long long v144 = *(_OWORD *)(v139 + 16);
            *(_OWORD *)(v139 + 32) = *(_OWORD *)v139;
            *(_OWORD *)(v139 + 48) = v144;
            v139 -= 32;
            unsigned int v145 = *(_DWORD *)(v143 - 8);
          }
          while (v140 > v145);
        }
        while (v140 >= v145 && v142 < *(_DWORD *)(v143 - 4));
        *(void *)(v143 + 16) = v170;
        *(_OWORD *)unint64_t v143 = v160;
        *(_DWORD *)(v143 + 24) = v140;
        *(_DWORD *)(v143 + 28) = v142;
      }
      BOOL v78 = (long long *)(a1 + 32);
      if ((long long *)(a1 + 32) == a2) {
        return;
      }
      continue;
    }
  }
}

  BOOL v4 = a2 - 1;
LABEL_2:
  BOOL v5 = 1 - a3;
  while (1)
  {
    int v6 = (char *)a2 - (char *)result;
    unint64_t v7 = a2 - result;
    if (v7 < 2) {
      return result;
    }
    uint64_t v32 = v4;
    unsigned int v33 = a2;
    int v34 = result;
    if (v7 <= 2)
    {
      switch(v7)
      {
        case 2uLL:
          uint64_t v12 = *result;
          if (*v4 < *result)
          {
            *uint64_t result = *v4;
            *BOOL v4 = v12;
          }
          break;
        case 3uLL:
          uint64_t result = sub_1CBB10A88(result, result + 1, v4);
          break;
        case 4uLL:
          uint64_t result = sub_1CBB10C78(result, result + 1, result + 2, v4);
          break;
        case 5uLL:
          uint64_t result = sub_1CBB10CF8(result, result + 1, result + 2, result + 3, v4);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    unint64_t v8 = a4;
    if (v6 <= 95)
    {
      uint64_t v13 = result + 1;
      uint64_t v15 = result == a2 || v13 == a2;
      if (a4)
      {
        long long v16 = result;
        if (!v15)
        {
          unsigned int v17 = 4;
          do
          {
            uint64_t v19 = *v16;
            unsigned int v18 = v16[1];
            long long v16 = v13;
            if (v18 < v19)
            {
              unsigned int v20 = v17;
              while (1)
              {
                *(unsigned int *)((char *)result + v20) = v19;
                unsigned int v21 = v20 - 4;
                if (v20 == 4) {
                  break;
                }
                uint64_t v19 = *(unsigned int *)((char *)result + v20 - 8);
                v20 -= 4;
                if (v18 >= v19)
                {
                  unint64_t v22 = (unsigned int *)((char *)result + v21);
                  goto LABEL_28;
                }
              }
              unint64_t v22 = result;
LABEL_28:
              void *v22 = v18;
            }
            uint64_t v13 = v16 + 1;
            v17 += 4;
          }
          while (v16 + 1 != a2);
        }
      }
      else
      {
        unsigned int v23 = result;
        if (!v15)
        {
          do
          {
            uint64_t v24 = v23;
            int v25 = v23[1];
            unsigned int v26 = *v24;
            if (v25 < v26)
            {
              unsigned int v27 = v13;
              do
              {
                *unsigned int v27 = v26;
                unsigned int v26 = *(v27 - 2);
                --v27;
              }
              while (v25 < v26);
              *unsigned int v27 = v25;
            }
            unsigned int v23 = v13++;
          }
          while (v13 != a2);
        }
      }
      return result;
    }
    if (v5 == 1)
    {
      if (result != a2)
      {
        return (unsigned int *)sub_1CBB10D9C((uint64_t)result, a2, a2);
      }
      return result;
    }
    unint64_t v9 = v7 >> 1;
    int v10 = &result[v7 >> 1];
    if ((unint64_t)v6 < 0x201)
    {
      sub_1CBB10A88(&result[v7 >> 1], result, v4);
    }
    else
    {
      sub_1CBB10A88(result, &result[v7 >> 1], v4);
      sub_1CBB10A88(v34 + 1, v10 - 1, v33 - 2);
      sub_1CBB10A88(v34 + 2, &v34[v9 + 1], v33 - 3);
      sub_1CBB10A88(v10 - 1, v10, &v34[v9 + 1]);
      int v11 = *v34;
      *int v34 = *v10;
      *int v10 = v11;
    }
    if ((v8 & 1) != 0 || *(v34 - 1) < *v34)
    {
      unint64_t v28 = sub_1CB946348(v34, v33);
      if ((v29 & 1) == 0) {
        goto LABEL_60;
      }
      unsigned int v30 = sub_1CBB10AF8(v34, v28);
      unsigned int v31 = v28 + 1;
      if (sub_1CBB10AF8(v28 + 1, v33))
      {
        a3 = -v5;
        a2 = v28;
        uint64_t result = v34;
        a4 = v8;
        if (!v30) {
          goto LABEL_1;
        }
        return result;
      }
      if (!v30)
      {
LABEL_60:
        sub_1CBB10688(v34, v28, -v5, v8 & 1);
        a3 = -v5;
        a4 = 0;
        uint64_t result = v28 + 1;
        BOOL v4 = v32;
        a2 = v33;
        goto LABEL_2;
      }
    }
    else
    {
      unsigned int v31 = sub_1CB946298(v34, (int *)v33);
    }
    ++v5;
    uint64_t result = v31;
    BOOL v4 = v32;
    a2 = v33;
    a4 = v8;
  }
}

  int v10 = a2 - 1;
  int v11 = a1;
  while (1)
  {
    a1 = v11;
    uint64_t v12 = (uint64_t)a2 - v11;
    uint64_t v13 = (uint64_t)((uint64_t)a2 - v11) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return;
        case 2:
          int v60 = a2 - 1;
          unsigned int v61 = *((void *)a2 - 2);
          if (v61 < *(void *)v11
            || (v61 == *(void *)v11 ? (unsigned int v62 = *((void *)a2 - 1) < *(void *)(v11 + 8)) : (unsigned int v62 = 0), v62))
          {
            unint64_t v134 = *(_OWORD *)v11;
            *(_OWORD *)int v11 = *v60;
            *int v60 = v134;
          }
          break;
        case 3:
          sub_1CBF98BD8((long long *)v11, (unint64_t *)(v11 + 16), a2 - 1);
          break;
        case 4:
          sub_1CBF98FCC(v11, (unint64_t *)(v11 + 16), v11 + 32, (uint64_t)(a2 - 1));
          break;
        case 5:
          long long v63 = (long long *)(v11 + 16);
          long long v64 = (long long *)(v11 + 32);
          unsigned int v65 = (long long *)(v11 + 48);
          sub_1CBF98FCC(v11, (unint64_t *)(v11 + 16), v11 + 32, v11 + 48);
          unsigned int v66 = a2 - 1;
          long long v67 = *((void *)a2 - 2);
          long long v68 = *(void *)(v11 + 48);
          if (v67 < v68 || (v67 == v68 ? (long long v69 = *((void *)a2 - 1) < *(void *)(v11 + 56)) : (long long v69 = 0), v69))
          {
            unsigned int v70 = *v65;
            unsigned __int8 *v65 = *v66;
            unsigned __int8 *v66 = v70;
            if (*(void *)v65 < *(void *)v64
              || (*(void *)v65 == *(void *)v64 ? (unsigned int v71 = *(void *)(v11 + 56) < *(void *)(v11 + 40)) : (unsigned int v71 = 0),
                  v71))
            {
              long long v72 = *v64;
              *long long v64 = *v65;
              unsigned __int8 *v65 = v72;
              if (*(void *)v64 < *(void *)v63
                || *(void *)v64 == *(void *)v63 && *(void *)(v11 + 40) < *(void *)(v11 + 24))
              {
                long long v73 = *v63;
                unsigned __int8 *v63 = *v64;
                *long long v64 = v73;
                long long v74 = *(void *)(v11 + 16);
                if (v74 < *(void *)v11 || v74 == *(void *)v11 && *(void *)(v11 + 24) < *(void *)(v11 + 8))
                {
                  unint64_t v135 = *(_OWORD *)v11;
                  *(_OWORD *)int v11 = *v63;
                  unsigned __int8 *v63 = v135;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 383)
    {
      unsigned int v75 = (long long *)(v11 + 16);
      long long v77 = (long long *)v11 == a2 || v75 == a2;
      if (a4)
      {
        if (v77) {
          return;
        }
        BOOL v78 = 0;
        BOOL v79 = (unint64_t *)v11;
        while (2)
        {
          BOOL v80 = v75;
          uint64_t v81 = v79[2];
          if (v81 < *v79)
          {
            unint64_t v82 = v79[3];
            goto LABEL_155;
          }
          unint64_t v82 = v79[3];
          if (v81 == *v79 && v82 < (uint64_t)v79[1])
          {
LABEL_155:
            llvm::MachineFunction *v80 = *(_OWORD *)v79;
            unsigned int v84 = (void *)v11;
            if (v79 != (unint64_t *)v11)
            {
              unsigned int v85 = v78;
              do
              {
                unsigned int v86 = (_OWORD *)(v11 + v85);
                long long v87 = *(void *)(v11 + v85 - 16);
                if (v81 >= v87 && (v81 != v87 || v82 >= *((void *)v86 - 1)))
                {
                  unsigned int v84 = (void *)(v11 + v85);
                  goto LABEL_165;
                }
                *unsigned int v86 = *(_OWORD *)(v11 + v85 - 16);
                v85 -= 16;
              }
              while (v85);
              unsigned int v84 = (void *)v11;
            }
LABEL_165:
            unsigned __int8 *v84 = v81;
            v84[1] = v82;
          }
          unsigned int v75 = v80 + 1;
          v78 += 16;
          BOOL v79 = (unint64_t *)v80;
          if (v80 + 1 == a2) {
            return;
          }
          continue;
        }
      }
      if (v77) {
        return;
      }
      while (2)
      {
        long long v123 = (unint64_t)v75;
        long long v124 = *(void *)(a1 + 16);
        if (v124 < *(void *)a1)
        {
          uint64_t v125 = *(void *)(a1 + 24);
          goto LABEL_243;
        }
        uint64_t v125 = *(void *)(a1 + 24);
        if (v124 == *(void *)a1 && v125 < *(void *)(a1 + 8))
        {
          do
          {
            do
            {
LABEL_243:
              unint64_t v127 = (void *)a1;
              *(_OWORD *)(a1 + 16) = *(_OWORD *)a1;
              unint64_t v128 = *(void *)(a1 - 16);
              a1 -= 16;
              unsigned int v129 = v124 == v128;
            }
            while (v124 < v128);
          }
          while (v129 && v125 < *(v127 - 1));
          *unint64_t v127 = v124;
          v127[1] = v125;
        }
        unsigned int v75 = (long long *)(v123 + 16);
        a1 = v123;
        if ((long long *)(v123 + 16) == a2) {
          return;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = (unint64_t *)(v11 + 16 * ((unint64_t)v13 >> 1));
    if ((unint64_t)v12 >= 0x801)
    {
      sub_1CBF98BD8((long long *)a1, (unint64_t *)(a1 + 16 * ((unint64_t)v13 >> 1)), a2 - 1);
      sub_1CBF98BD8((long long *)(a1 + 16), v15 - 2, a2 - 2);
      sub_1CBF98BD8((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v14), a2 - 3);
      sub_1CBF98BD8((long long *)v15 - 1, v15, (long long *)(a1 + 16 + 16 * v14));
      unsigned int v131 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = v131;
    }
    else
    {
      sub_1CBF98BD8((long long *)(a1 + 16 * ((unint64_t)v13 >> 1)), (unint64_t *)a1, a2 - 1);
    }
    --a3;
    long long v16 = *(void *)a1;
    if (a4)
    {
      unsigned int v17 = *(void *)a1;
LABEL_15:
      unsigned int v20 = 0;
      unsigned int v21 = *(void *)(a1 + 8);
      while (1)
      {
        unint64_t v22 = *(void *)(a1 + v20 + 16);
        if (v17 <= v22)
        {
          unsigned int v23 = v17 == v22 && *(void *)(a1 + v20 + 24) < v21;
          if (!v23) {
            break;
          }
        }
        v20 += 16;
      }
      uint64_t v24 = a1 + v20 + 16;
      int v25 = a2 - 1;
      if (v20)
      {
        do
        {
          unsigned int v26 = v25;
          unsigned int v27 = *(void *)v25;
          if (v17 > *(void *)v25) {
            break;
          }
          unint64_t v28 = *((void *)v25-- + 1);
        }
        while (v17 != v27 || v28 >= v21);
      }
      else
      {
        unsigned int v30 = a2 - 1;
        while (1)
        {
          unsigned int v26 = v30;
          unsigned int v31 = v30 + 1;
          if (v24 >= (unint64_t)v31) {
            break;
          }
          if (v17 <= *(void *)v26)
          {
            unsigned int v30 = v26 - 1;
            if (v17 != *(void *)v26 || *((void *)v26 + 1) >= v21) {
              continue;
            }
          }
          goto LABEL_41;
        }
        unsigned int v26 = v31;
      }
LABEL_41:
      int v11 = v24;
      if (v24 < (unint64_t)v26)
      {
        unsigned int v33 = v26;
        do
        {
          unsigned int v132 = *(_OWORD *)v11;
          *(_OWORD *)int v11 = *v33;
          *unsigned int v33 = v132;
          do
          {
            do
            {
              int v34 = *(void *)(v11 + 16);
              v11 += 16;
              long long v35 = v17 == v34;
            }
            while (v17 > v34);
          }
          while (v35 && *(void *)(v11 + 8) < v21);
          int v37 = v33 - 1;
          do
          {
            unsigned int v33 = v37;
            int v38 = *(void *)v37;
            if (v17 > *(void *)v37) {
              break;
            }
            unsigned int v39 = *((void *)v37-- + 1);
          }
          while (v17 != v38 || v39 >= v21);
        }
        while (v11 < (unint64_t)v33);
      }
      if (v11 - 16 != a1) {
        *(_OWORD *)a1 = *(_OWORD *)(v11 - 16);
      }
      *(void *)(v11 - 16) = v16;
      *(void *)(v11 - 8) = v21;
      if (v24 < (unint64_t)v26) {
        goto LABEL_62;
      }
      unsigned int v41 = sub_1CBF98CE4(a1, (long long *)(v11 - 16));
      if (sub_1CBF98CE4(v11, a2))
      {
        a2 = (long long *)(v11 - 16);
        if (v41) {
          return;
        }
        goto LABEL_1;
      }
      if (!v41)
      {
LABEL_62:
        sub_1CBF98228(a1, v11 - 16, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      unsigned int v18 = *(void *)(a1 - 16);
      unsigned int v17 = *(void *)a1;
      if (v18 < v16) {
        goto LABEL_15;
      }
      uint64_t v19 = *(void *)(a1 + 8);
      if (v18 == v16 && *(void *)(a1 - 8) < v19)
      {
        unsigned int v17 = *(void *)(a1 - 16);
        goto LABEL_15;
      }
      unsigned int v42 = *(void *)v10;
      if (v16 < *(void *)v10 || v16 == *(void *)v10 && v19 < *((void *)a2 - 1))
      {
        unsigned int v43 = (unint64_t *)(a1 + 16);
        do
        {
          int v11 = (unint64_t)v43;
          int v44 = *v43;
          if (v16 < *v43) {
            break;
          }
          unsigned int v45 = v43[1];
          v43 += 2;
        }
        while (v16 != v44 || v19 >= v45);
      }
      else
      {
        unsigned int v56 = (long long *)(a1 + 16);
        do
        {
          int v11 = (unint64_t)v56;
          if (v56 >= a2) {
            break;
          }
          long long v57 = *(void *)v56;
          if (v16 < *(void *)v56) {
            break;
          }
          unsigned int v58 = *((void *)v56++ + 1);
        }
        while (v16 != v57 || v19 >= v58);
      }
      unint64_t i = a2;
      if (v11 < (unint64_t)a2)
      {
        for (unint64_t i = a2 - 1; v16 < v42 || v16 == v42 && v19 < *((void *)i + 1); --i)
        {
          long long v48 = *((void *)i - 2);
          unsigned int v42 = v48;
        }
      }
      while (v11 < (unint64_t)i)
      {
        long long v133 = *(_OWORD *)v11;
        *(_OWORD *)int v11 = *i;
        *unint64_t i = v133;
        unsigned int v49 = (unint64_t *)(v11 + 16);
        do
        {
          int v11 = (unint64_t)v49;
          int v50 = *v49;
          if (v16 < *v49) {
            break;
          }
          unsigned int v51 = v49[1];
          v49 += 2;
        }
        while (v16 != v50 || v19 >= v51);
        do
        {
          do
          {
            unsigned int v53 = *((void *)i-- - 2);
            long long v54 = v16 == v53;
          }
          while (v16 < v53);
        }
        while (v54 && v19 < *((void *)i + 1));
      }
      BOOL v4 = v11 - 16 >= a1;
      BOOL v5 = v11 - 16 == a1;
      if (v11 - 16 != a1) {
        *(_OWORD *)a1 = *(_OWORD *)(v11 - 16);
      }
      a4 = 0;
      *(void *)(v11 - 16) = v16;
      *(void *)(v11 - 8) = v19;
    }
  }
  if ((long long *)v11 != a2)
  {
    uint64_t v89 = (unint64_t)(v13 - 2) >> 1;
    BOOL v90 = v89;
    do
    {
      unsigned int v91 = v90;
      if (v89 >= v90)
      {
        long long v92 = (2 * v90) | 1;
        int64_t v93 = (unint64_t *)(v11 + 16 * v92);
        if (2 * v91 + 2 < v13)
        {
          int64_t v95 = v93[2];
          if (*v93 < v95 || ((uint64_t)v93[1] < (uint64_t)v93[3] ? (int64_t v94 = *v93 == v95) : (int64_t v94 = 0), v94))
          {
            v93 += 2;
            long long v92 = 2 * v91 + 2;
          }
          else
          {
            int64_t v95 = *v93;
          }
        }
        else
        {
          int64_t v95 = *v93;
        }
        uint64_t v96 = (unint64_t *)(v11 + 16 * v91);
        unint64_t v97 = *v96;
        if (v95 >= *v96)
        {
          unsigned int v98 = v96[1];
          if (v95 != v97 || (uint64_t)v93[1] >= v98)
          {
            do
            {
              BOOL v100 = v96;
              uint64_t v96 = v93;
              *(_OWORD *)BOOL v100 = *(_OWORD *)v93;
              if (v89 < v92) {
                break;
              }
              unsigned int v101 = 2 * v92;
              long long v92 = (2 * v92) | 1;
              int64_t v93 = (unint64_t *)(v11 + 16 * v92);
              unsigned int v102 = v101 + 2;
              if (v101 + 2 < v13)
              {
                unsigned int v104 = v93[2];
                if (*v93 < v104 || ((uint64_t)v93[1] < (uint64_t)v93[3] ? (unint64_t v103 = *v93 == v104) : (unint64_t v103 = 0), v103))
                {
                  v93 += 2;
                  long long v92 = v102;
                }
                else
                {
                  unsigned int v104 = *v93;
                }
              }
              else
              {
                unsigned int v104 = *v93;
              }
              if (v104 < v97) {
                break;
              }
            }
            while (v104 != v97 || (uint64_t)v93[1] >= v98);
            _DWORD *v96 = v97;
            v96[1] = v98;
          }
        }
      }
      BOOL v90 = v91 - 1;
    }
    while (v91);
    do
    {
      unint64_t v106 = 0;
      unsigned int v136 = *(_OWORD *)v11;
      uint64_t v107 = (long long *)v11;
      do
      {
        uint64_t v108 = v107;
        v107 += v106 + 1;
        unsigned int v109 = 2 * v106;
        unint64_t v106 = (2 * v106) | 1;
        unsigned int v110 = v109 + 2;
        if (v110 < v13)
        {
          BOOL v111 = *((void *)v107 + 2);
          if (*(void *)v107 < v111
            || (*((void *)v107 + 1) < *((void *)v107 + 3) ? (unsigned int v112 = *(void *)v107 == v111) : (unsigned int v112 = 0), v112))
          {
            ++v107;
            unint64_t v106 = v110;
          }
        }
        *uint64_t v108 = *v107;
      }
      while (v106 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
      if (v107 == --a2)
      {
        *uint64_t v107 = v136;
      }
      else
      {
        *uint64_t v107 = *a2;
        *a2 = v136;
        long long v113 = (uint64_t)v107 - v11 + 16;
        if (v113 >= 17)
        {
          uint64_t v114 = ((unint64_t)v113 >> 4) - 2;
          unint64_t v115 = v114 >> 1;
          uint32x4_t v116 = (unint64_t *)(v11 + 16 * (v114 >> 1));
          uint64_t v117 = *(void *)v107;
          uint64_t v118 = *((void *)v107 + 1);
          if (*v116 < *(void *)v107
            || (*v116 == *(void *)v107 ? (uint64_t v119 = (uint64_t)v116[1] < v118) : (uint64_t v119 = 0), v119))
          {
            *uint64_t v107 = *(_OWORD *)v116;
            if (v114 >= 2)
            {
              while (1)
              {
                unsigned int v121 = v115 - 1;
                unint64_t v115 = (v115 - 1) >> 1;
                unsigned int v120 = (unint64_t *)(v11 + 16 * v115);
                if (*v120 >= v117 && (*v120 != v117 || (uint64_t)v120[1] >= v118)) {
                  break;
                }
                *(_OWORD *)uint32x4_t v116 = *(_OWORD *)v120;
                uint32x4_t v116 = (unint64_t *)(v11 + 16 * v115);
                if (v121 < 2) {
                  goto LABEL_231;
                }
              }
            }
            unsigned int v120 = v116;
LABEL_231:
            *unsigned int v120 = v117;
            v120[1] = v118;
          }
        }
      }
      unsigned int v23 = v13-- <= 2;
    }
    while (!v23);
  }
}

  uint64_t v12 = a2 - 2;
LABEL_2:
  for (unint64_t i = 1 - a4; ; ++i)
  {
    unint64_t v14 = (char *)a2 - (char *)a1;
    uint64_t v15 = ((char *)a2 - (char *)a1) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v28 = *(void *)a3;
          long long v29 = *(a2 - 1) & 0xFFFFFFFFFFFFFFF8;
          *(void *)&unsigned int v39 = *(a2 - 2);
          *((void *)&v39 + 1) = v29;
          unsigned int v30 = sub_1CBFEC774(v28, (uint64_t *)&v39);
          unsigned int v31 = *(void *)a3;
          uint64_t v32 = a1[1] & 0xFFFFFFFFFFFFFFF8;
          *(void *)&unsigned int v39 = *a1;
          *((void *)&v39 + 1) = v32;
          unsigned int v33 = sub_1CBFEC774(v31, (uint64_t *)&v39);
          int v34 = *((_DWORD *)v30 + 4);
          long long v35 = *((_DWORD *)v33 + 4);
          if (**(unsigned char **)(a3 + 8))
          {
            if (v34 >= v35) {
              return;
            }
          }
          else if (v34 <= v35)
          {
            return;
          }
          unsigned int v39 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)uint64_t v12 = v39;
          return;
        case 3uLL:
          sub_1CBFED0D4(a1, a1 + 2, a2 - 2, a3);
          return;
        case 4uLL:
          sub_1CBFEDB68(a1, a1 + 2, a1 + 4, a2 - 2, a3);
          return;
        case 5uLL:
          sub_1CBFEDCF0(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 383)
    {
      if (a5) {
        sub_1CBFECDF4(a1, a2, a3);
      }
      else {
        sub_1CBFECF90(a1, a2, a3);
      }
      return;
    }
    if (i == 1) {
      break;
    }
    long long v16 = v15 >> 1;
    unsigned int v17 = &a1[2 * (v15 >> 1)];
    if ((unint64_t)v14 < 0x801)
    {
      sub_1CBFED0D4(&a1[2 * (v15 >> 1)], a1, a2 - 2, a3);
    }
    else
    {
      sub_1CBFED0D4(a1, &a1[2 * (v15 >> 1)], a2 - 2, a3);
      sub_1CBFED0D4(a1 + 2, v17 - 2, a2 - 4, a3);
      BOOL v36 = &a1[2 * v16 + 2];
      sub_1CBFED0D4(a1 + 4, v36, a2 - 6, a3);
      sub_1CBFED0D4(v17 - 2, v17, v36, a3);
      unsigned int v39 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v17;
      *(_OWORD *)unsigned int v17 = v39;
    }
    if ((a5 & 1) == 0)
    {
      unsigned int v20 = *(void *)a3;
      unsigned int v21 = *(a1 - 1) & 0xFFFFFFFFFFFFFFF8;
      *(void *)&unsigned int v39 = *(a1 - 2);
      *((void *)&v39 + 1) = v21;
      unint64_t v22 = sub_1CBFEC774(v20, (uint64_t *)&v39);
      unsigned int v23 = *(void *)a3;
      uint64_t v24 = a1[1] & 0xFFFFFFFFFFFFFFF8;
      *(void *)&unsigned int v39 = *a1;
      *((void *)&v39 + 1) = v24;
      int v25 = sub_1CBFEC774(v23, (uint64_t *)&v39);
      unsigned int v26 = *((_DWORD *)v22 + 4);
      unsigned int v27 = *((_DWORD *)v25 + 4);
      if (**(unsigned char **)(a3 + 8))
      {
        if (v26 >= v27)
        {
LABEL_33:
          int v38 = sub_1CBFED32C(a1, a2, a3);
          goto LABEL_34;
        }
      }
      else if (v26 <= v27)
      {
        goto LABEL_33;
      }
    }
    unsigned int v18 = sub_1CBFED5E4(a1, a2, a3);
    if ((v19 & 1) == 0) {
      goto LABEL_18;
    }
    int v37 = sub_1CBFED890(a1, v18, a3);
    int v38 = v18 + 2;
    if (sub_1CBFED890(v18 + 2, a2, a3))
    {
      a4 = -i;
      a2 = v18;
      if (v37) {
        return;
      }
      goto LABEL_1;
    }
    if (!v37)
    {
LABEL_18:
      a4 = -i;
      sub_1CBFECA88(a1, v18, a3, -i, a5 & 1);
      a5 = 0;
      a1 = v18 + 2;
      goto LABEL_2;
    }
LABEL_34:
    a1 = v38;
  }
  if (a1 != a2) {
    sub_1CBFEDEEC(a1, a2, a2, a3);
  }
}

  int v10 = a2 - 1;
  int v11 = (unint64_t *)a1;
  while (1)
  {
    a1 = (uint64_t)v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v5 & v4))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (*(void *)v10 < *v11)
          {
            int v46 = *(_OWORD *)v11;
            *(_OWORD *)int v11 = *v10;
            *int v10 = v46;
          }
          break;
        case 3uLL:
          sub_1CC0A3150((long long *)v11, v11 + 2, (unint64_t *)a2 - 2);
          break;
        case 4uLL:
          sub_1CC0A3450((long long *)v11, v11 + 2, v11 + 4, a2 - 1);
          break;
        case 5uLL:
          sub_1CC0A34F0((long long *)v11, v11 + 2, v11 + 4, (__n128 *)v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v11 != (unint64_t *)a2)
      {
        sub_1CC0A35BC((uint64_t)v11, a2, a2);
      }
      return;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = &v11[2 * (v13 >> 1)];
    if ((unint64_t)v12 < 0x801)
    {
      sub_1CC0A3150((long long *)(a1 + 16 * (v13 >> 1)), (unint64_t *)a1, (unint64_t *)a2 - 2);
    }
    else
    {
      sub_1CC0A3150((long long *)a1, (unint64_t *)(a1 + 16 * (v13 >> 1)), (unint64_t *)a2 - 2);
      sub_1CC0A3150((long long *)(a1 + 16), v15 - 2, (unint64_t *)a2 - 4);
      sub_1CC0A3150((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v14), (unint64_t *)a2 - 6);
      sub_1CC0A3150((long long *)v15 - 1, v15, (unint64_t *)(a1 + 16 + 16 * v14));
      unsigned int v45 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = v45;
    }
    --a3;
    long long v16 = *(void *)a1;
    if ((a4 & 1) != 0 || *(void *)(a1 - 16) < v16)
    {
      unsigned int v17 = 0;
      unsigned int v18 = *(void *)(a1 + 8);
      do
      {
        uint64_t v19 = *(void *)(a1 + v17 + 16);
        v17 += 16;
      }
      while (v19 < v16);
      unsigned int v20 = a1 + v17;
      unsigned int v21 = a2;
      if (v17 == 16)
      {
        unsigned int v21 = a2;
        do
        {
          if (v20 >= (unint64_t)v21) {
            break;
          }
          unsigned int v26 = *((void *)v21-- - 2);
        }
        while (v26 >= v16);
      }
      else
      {
        do
          unint64_t v22 = *((void *)v21-- - 2);
        while (v22 >= v16);
      }
      int v11 = (unint64_t *)(a1 + v17);
      if (v20 < (unint64_t)v21)
      {
        unsigned int v23 = (unint64_t *)v21;
        do
        {
          int v44 = *(_OWORD *)v11;
          *(_OWORD *)int v11 = *(_OWORD *)v23;
          *(_OWORD *)unsigned int v23 = v44;
          do
          {
            uint64_t v24 = v11[2];
            v11 += 2;
          }
          while (v24 < v16);
          do
          {
            int v25 = *(v23 - 2);
            v23 -= 2;
          }
          while (v25 >= v16);
        }
        while (v11 < v23);
      }
      if (v11 - 2 != (unint64_t *)a1) {
        *(_OWORD *)a1 = *((_OWORD *)v11 - 1);
      }
      *(v11 - 2) = v16;
      *(v11 - 1) = v18;
      if (v20 < (unint64_t)v21) {
        goto LABEL_24;
      }
      unsigned int v43 = sub_1CC0A32B4(a1, v11 - 2);
      if (sub_1CC0A32B4((uint64_t)v11, (unint64_t *)a2))
      {
        a2 = (long long *)(v11 - 2);
        if (v43) {
          return;
        }
        goto LABEL_1;
      }
      if (!v43)
      {
LABEL_24:
        sub_1CC0A2CCC(a1, v11 - 2, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      int v11 = sub_1CC0A31F4((unint64_t *)a1, (unint64_t *)a2);
    }
  }
  unsigned int v27 = (long long *)(v11 + 2);
  long long v29 = v11 == (unint64_t *)a2 || v27 == a2;
  if (a4)
  {
    if (!v29)
    {
      long long v35 = 0;
      BOOL v36 = v11;
      do
      {
        int v37 = v27;
        int v38 = v36[2];
        if (v38 < *v36)
        {
          unsigned int v39 = v36[3];
          unsigned int v40 = v35;
          while (1)
          {
            *(_OWORD *)((char *)v11 + v40 + 16) = *(_OWORD *)((char *)v11 + v40);
            if (!v40) {
              break;
            }
            unsigned int v41 = *(unint64_t *)((char *)v11 + v40 - 16);
            v40 -= 16;
            if (v38 >= v41)
            {
              unsigned int v42 = (unint64_t *)((char *)v11 + v40 + 16);
              goto LABEL_54;
            }
          }
          unsigned int v42 = v11;
LABEL_54:
          *unsigned int v42 = v38;
          v42[1] = v39;
        }
        unsigned int v27 = v37 + 1;
        v35 += 16;
        BOOL v36 = (unint64_t *)v37;
      }
      while (v37 + 1 != a2);
    }
  }
  else if (!v29)
  {
    do
    {
      unsigned int v30 = (uint64_t)v27;
      unsigned int v31 = *(void *)(a1 + 16);
      if (v31 < *(void *)a1)
      {
        uint64_t v32 = *(void *)(a1 + 24);
        unsigned int v33 = v30;
        do
        {
          *(_OWORD *)unsigned int v33 = *(_OWORD *)(v33 - 16);
          int v34 = *(void *)(v33 - 32);
          v33 -= 16;
        }
        while (v31 < v34);
        *(void *)unsigned int v33 = v31;
        *(void *)(v33 + 8) = v32;
      }
      unsigned int v27 = (long long *)(v30 + 16);
      a1 = v30;
    }
    while ((long long *)(v30 + 16) != a2);
  }
}

  BOOL v4 = (unint64_t *)(a2 - 2);
LABEL_2:
  BOOL v5 = 1 - a3;
  while (2)
  {
    int v6 = (char *)a2 - (char *)result;
    unint64_t v7 = ((char *)a2 - (char *)result) >> 4;
    if (v7 < 2) {
      return result;
    }
    unint64_t v22 = v4;
    unsigned int v23 = (uint64_t)result;
    unsigned int v21 = (unint64_t *)a2;
    switch(v7)
    {
      case 2uLL:
        unint64_t v9 = *v4;
        int v10 = *result;
        if (*v22 >= *result)
        {
          if (v10 < v9) {
            return result;
          }
          uint64_t v12 = *((_DWORD *)a2 - 2);
          int v11 = *((_DWORD *)result + 2);
          if (v12 >= v11) {
            return result;
          }
        }
        else
        {
          int v11 = *((_DWORD *)result + 2);
          uint64_t v12 = *((_DWORD *)a2 - 2);
        }
        *uint64_t result = v9;
        *(a2 - 2) = v10;
        *((_DWORD *)result + 2) = v12;
        *((_DWORD *)a2 - 2) = v11;
        return result;
      case 3uLL:
        return sub_1CC1F689C(result, result + 2, v4);
      case 4uLL:
        return sub_1CC1F6EA8((uint64_t)result, (uint64_t)(result + 2), (uint64_t)(result + 4), (uint64_t)v4);
      case 5uLL:
        return sub_1CC1F6FAC((uint64_t)result, (uint64_t)(result + 2), (uint64_t)(result + 4), (uint64_t)(result + 6), v4);
      default:
        unint64_t v8 = a4;
        if (v6 <= 383)
        {
          if (a4)
          {
            return (unint64_t *)sub_1CC1F6710((uint64_t *)result, a2);
          }
          else
          {
            return (unint64_t *)sub_1CC1F67F8((uint64_t *)result, a2);
          }
        }
        if (v5 != 1)
        {
          uint64_t v13 = v7 >> 1;
          unint64_t v14 = &result[2 * (v7 >> 1)];
          if ((unint64_t)v6 < 0x801)
          {
            sub_1CC1F689C(&result[2 * (v7 >> 1)], result, v4);
          }
          else
          {
            sub_1CC1F689C(result, &result[2 * (v7 >> 1)], v4);
            sub_1CC1F689C((unint64_t *)(v23 + 16), v14 - 2, v21 - 4);
            sub_1CC1F689C((unint64_t *)(v23 + 32), (unint64_t *)(v23 + 16 + 16 * v13), v21 - 6);
            sub_1CC1F689C(v14 - 2, v14, (unint64_t *)(v23 + 16 + 16 * v13));
            uint64_t v15 = *(void *)v23;
            *(void *)unsigned int v23 = *v14;
            *unint64_t v14 = v15;
            LODWORD(v15) = *(_DWORD *)(v23 + 8);
            *(_DWORD *)(v23 + 8) = *((_DWORD *)v14 + 2);
            *((_DWORD *)v14 + 2) = v15;
          }
          if ((v8 & 1) == 0)
          {
            long long v16 = *(void *)(v23 - 16);
            if (v16 >= *(void *)v23 && (*(void *)v23 < v16 || *(_DWORD *)(v23 - 8) >= *(_DWORD *)(v23 + 8)))
            {
              unsigned int v20 = sub_1CC1F69E4((unint64_t *)v23, v21);
LABEL_42:
              ++v5;
              uint64_t result = v20;
              a2 = (uint64_t *)v21;
              BOOL v4 = v22;
              a4 = v8;
              continue;
            }
          }
          unsigned int v17 = sub_1CC1F6B38((uint64_t *)v23, (unint64_t)v21);
          if ((v18 & 1) == 0)
          {
LABEL_45:
            sub_1CC1F630C(v23, v17, -v5, v8 & 1);
            a3 = -v5;
            a4 = 0;
            uint64_t result = (unint64_t *)(v17 + 16);
            a2 = (uint64_t *)v21;
            BOOL v4 = v22;
            goto LABEL_2;
          }
          uint64_t v19 = sub_1CC1F6C88(v23, v17);
          unsigned int v20 = (unint64_t *)(v17 + 16);
          if (!sub_1CC1F6C88(v17 + 16, (uint64_t)v21))
          {
            if (v19) {
              goto LABEL_42;
            }
            goto LABEL_45;
          }
          a3 = -v5;
          a2 = (uint64_t *)v17;
          uint64_t result = (unint64_t *)v23;
          a4 = v8;
          if (v19) {
            return result;
          }
          goto LABEL_1;
        }
        if (result != (unint64_t *)a2)
        {
          return (unint64_t *)sub_1CC1F7100((unint64_t)result, (uint64_t)a2, (uint64_t)a2);
        }
        return result;
    }
  }
}

  while (1)
  {
    if (*a1 == a1[4])
    {
      unint64_t v7 = a1[2];
      unint64_t v8 = a1[6];
      if (v7 == v8 || v7 == a1[3] && v8 == a1[7]) {
        break;
      }
    }
    uint64_t v2 = a1[11];
    if (v2)
    {
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1[2])) {
        return;
      }
      unint64_t v3 = a1[3];
      BOOL v4 = a1[2] + 32;
      a1[2] = v4;
      if (v4 == v3)
      {
        int v6 = *a1;
        BOOL v5 = a1[1];
        goto LABEL_6;
      }
    }
    else
    {
      sub_1CB920400();
      while (1)
      {
        unint64_t v9 = *(void *)(v6 + 32);
        int v10 = *(unsigned int *)(v6 + 40);
        a1[2] = v9;
        a1[3] = v9 + 32 * v10;
        if (v10) {
          break;
        }
LABEL_6:
        int v6 = *(void *)(v6 + 8);
        if (v6 == v5 || (*(_WORD *)(v6 + 44) & 4) == 0)
        {
          *a1 = v5;
          goto LABEL_1;
        }
      }
      *a1 = v6;
    }
  }
}

  int v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    unint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unsigned int v33 = *(_DWORD **)a3;
          int v34 = *(a2 - 2);
          long long v35 = *(a2 - 1);
          BOOL v36 = a2 - 2;
          *(void *)&int v46 = v34;
          *((void *)&v46 + 1) = v35 & 0xFFFFFFFFFFFFFFF8;
          int v37 = sub_1CC3405D0(v33, (uint64_t *)&v46);
          int v38 = *(_DWORD **)a3;
          unsigned int v39 = v11[1] & 0xFFFFFFFFFFFFFFF8;
          *(void *)&int v46 = *v11;
          *((void *)&v46 + 1) = v39;
          unsigned int v40 = sub_1CC3405D0(v38, (uint64_t *)&v46);
          unsigned int v41 = *((_DWORD *)v37 + 4);
          unsigned int v42 = *((_DWORD *)v40 + 4);
          unsigned int v26 = v41 <= v42;
          unsigned int v43 = v41 < v42;
          int v44 = !v26;
          if (**(unsigned char **)(a3 + 8)) {
            unsigned int v45 = v43;
          }
          else {
            unsigned int v45 = v44;
          }
          if (v45 == 1)
          {
            int v46 = *(_OWORD *)v11;
            *(_OWORD *)int v11 = *(_OWORD *)v36;
            *(_OWORD *)BOOL v36 = v46;
          }
          break;
        case 3uLL:
          sub_1CC340D50(v11, v11 + 2, a2 - 2, a3);
          break;
        case 4uLL:
          sub_1CC3417C0(v11, v11 + 2, v11 + 4, a2 - 2, a3);
          break;
        case 5uLL:
          sub_1CC341960(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383)
    {
      if (a5) {
        sub_1CC340A80(v11, a2, a3);
      }
      else {
        sub_1CC340BFC(v11, a2, a3);
      }
      return;
    }
    if (v13 == 1) {
      break;
    }
    long long v16 = v15 >> 1;
    unsigned int v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_1CC340D50(v11, &v11[2 * (v15 >> 1)], a2 - 2, a3);
      sub_1CC340D50(v11 + 2, v17 - 2, a2 - 4, a3);
      sub_1CC340D50(v11 + 4, &v11[2 * v16 + 2], a2 - 6, a3);
      sub_1CC340D50(v17 - 2, v17, &v11[2 * v16 + 2], a3);
      int v46 = *(_OWORD *)v11;
      *(_OWORD *)int v11 = *(_OWORD *)v17;
      *(_OWORD *)unsigned int v17 = v46;
      if (a5) {
        goto LABEL_19;
      }
    }
    else
    {
      sub_1CC340D50(&v11[2 * (v15 >> 1)], v11, a2 - 2, a3);
      if (a5) {
        goto LABEL_19;
      }
    }
    unsigned int v18 = *(_DWORD **)a3;
    uint64_t v19 = *(v11 - 1) & 0xFFFFFFFFFFFFFFF8;
    *(void *)&int v46 = *(v11 - 2);
    *((void *)&v46 + 1) = v19;
    unsigned int v20 = sub_1CC3405D0(v18, (uint64_t *)&v46);
    unsigned int v21 = *(_DWORD **)a3;
    unint64_t v22 = v11[1] & 0xFFFFFFFFFFFFFFF8;
    *(void *)&int v46 = *v11;
    *((void *)&v46 + 1) = v22;
    unsigned int v23 = sub_1CC3405D0(v21, (uint64_t *)&v46);
    uint64_t v24 = *((_DWORD *)v20 + 4);
    int v25 = *((_DWORD *)v23 + 4);
    unsigned int v26 = v24 <= v25;
    unsigned int v27 = v24 < v25;
    unint64_t v28 = !v26;
    if (**(unsigned char **)(a3 + 8)) {
      long long v29 = v27;
    }
    else {
      long long v29 = v28;
    }
    if ((v29 & 1) == 0)
    {
      int v11 = sub_1CC340FD8(v11, a2, a3);
      goto LABEL_24;
    }
LABEL_19:
    unsigned int v30 = sub_1CC34128C(v11, a2, a3);
    if ((v31 & 1) == 0) {
      goto LABEL_22;
    }
    uint64_t v32 = sub_1CC341500(v11, v30, a3);
    int v11 = v30 + 2;
    if (sub_1CC341500(v30 + 2, a2, a3))
    {
      a4 = -v13;
      a2 = v30;
      if (v32) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v32)
    {
LABEL_22:
      sub_1CC340708(a1, v30, a3, -v13, a5 & 1);
      int v11 = v30 + 2;
LABEL_24:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (v11 != a2) {
    sub_1CC341B7C(v11, a2, a2, a3);
  }
}

  int v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    unint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v22 = (long long *)&a2[-1];
          unsigned int v23 = a2[-1].n128_u32[0];
          if (v23 < v11->n128_u32[0] || v23 == v11->n128_u32[0] && a2[-1].n128_u64[1] < v11->n128_u64[1])
          {
            int v25 = (__int128)*v11;
            *int v11 = (__n128)*v22;
            void *v22 = v25;
          }
          break;
        case 3uLL:
          sub_1CC3FAE6C((long long *)v11, (unsigned int *)&v11[1], (long long *)&a2[-1]);
          break;
        case 4uLL:
          sub_1CC3FB420((uint64_t)v11, (uint64_t)&v11[1], (uint64_t)&v11[2], (uint64_t)&a2[-1]);
          break;
        case 5uLL:
          sub_1CC3FB508(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        sub_1CC3FB638((uint64_t)v11, a2, a2, a3);
      }
      return;
    }
    long long v16 = v15 >> 1;
    unsigned int v17 = (unsigned int *)&v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x801)
    {
      sub_1CC3FAE6C((long long *)v11, (unsigned int *)&v11[v15 >> 1], (long long *)&a2[-1]);
      sub_1CC3FAE6C((long long *)&v11[1], v17 - 4, (long long *)&a2[-2]);
      sub_1CC3FAE6C((long long *)&v11[2], (unsigned int *)&v11[v16 + 1], (long long *)&a2[-3]);
      sub_1CC3FAE6C((long long *)v17 - 1, v17, (long long *)&v11[v16 + 1]);
      uint64_t v24 = (__int128)*v11;
      *int v11 = *(__n128 *)v17;
      *(_OWORD *)unsigned int v17 = v24;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      sub_1CC3FAE6C((long long *)&v11[v15 >> 1], (unsigned int *)v11, (long long *)&a2[-1]);
      if (a5) {
        goto LABEL_15;
      }
    }
    unsigned int v18 = v11[-1].n128_u32[0];
    if (v18 >= v11->n128_u32[0] && (v18 != v11->n128_u32[0] || v11[-1].n128_u64[1] >= v11->n128_u64[1]))
    {
      int v11 = (__n128 *)sub_1CC3FAF94(v11, (unint64_t)a2);
      goto LABEL_20;
    }
LABEL_15:
    uint64_t v19 = sub_1CC3FB0C4((uint64_t *)v11, (unint64_t)a2);
    if ((v20 & 1) == 0) {
      goto LABEL_18;
    }
    unsigned int v21 = sub_1CC3FB204((uint64_t)v11, v19);
    int v11 = (__n128 *)(v19 + 16);
    if (sub_1CC3FB204(v19 + 16, (uint64_t)a2))
    {
      a4 = -v13;
      a2 = (__n128 *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_18:
      sub_1CC3FA914(a1, v19, a3, -v13, a5 & 1);
      int v11 = (__n128 *)(v19 + 16);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1CC3FAD10(v11, a2);
  }
  else
  {
    sub_1CC3FADE8((uint64_t)v11, (uint64_t)a2);
  }
}

  BOOL v4 = a2 - 2;
LABEL_2:
  BOOL v5 = 1 - a3;
  while (2)
  {
    int v6 = (char *)a2 - (char *)result;
    unint64_t v7 = ((char *)a2 - (char *)result) >> 4;
    switch(v7)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        unint64_t v8 = *result;
        unint64_t v9 = (*v4 >> 1) & 3 | *(_DWORD *)((*v4 & 0xFFFFFFFFFFFFFFF8) + 24);
        int v10 = *(_DWORD *)((*result & 0xFFFFFFFFFFFFFFF8) + 24) | (*result >> 1) & 3;
        if (v9 < v10)
        {
          uint64_t v12 = result[1];
          int v11 = *(a2 - 1);
        }
        else
        {
          if (v10 < v9) {
            return result;
          }
          int v11 = *(a2 - 1);
          uint64_t v12 = result[1];
          if (v11 >= v12) {
            return result;
          }
        }
        *uint64_t result = *v4;
        result[1] = v11;
        *(a2 - 2) = v8;
        *(a2 - 1) = v12;
        return result;
      case 3uLL:
        return sub_1CC4331C0(result, result + 2, v4);
      case 4uLL:
        return sub_1CC4338FC(result, result + 2, result + 4, v4);
      case 5uLL:
        return sub_1CC433A48(result, result + 2, result + 4, result + 6, v4);
      default:
        if (v6 <= 383)
        {
          if (a4)
          {
            return sub_1CC432FE4(result, a2);
          }
          else
          {
            return sub_1CC4330F4(result, a2);
          }
        }
        unsigned int v26 = v4;
        unsigned int v27 = a2;
        unint64_t v28 = result;
        if (v5 != 1)
        {
          uint64_t v13 = a4;
          unint64_t v14 = v5;
          uint64_t v15 = v7 >> 1;
          long long v16 = &result[2 * (v7 >> 1)];
          if ((unint64_t)v6 < 0x801)
          {
            sub_1CC4331C0(&result[2 * (v7 >> 1)], result, v4);
          }
          else
          {
            sub_1CC4331C0(result, &result[2 * (v7 >> 1)], v4);
            sub_1CC4331C0(v28 + 2, v16 - 2, v27 - 4);
            sub_1CC4331C0(v28 + 4, &v28[2 * v15 + 2], v27 - 6);
            sub_1CC4331C0(v16 - 2, v16, &v28[2 * v15 + 2]);
            unsigned int v17 = *v28;
            unsigned int v18 = v28[1];
            uint64_t v19 = v16[1];
            *unint64_t v28 = *v16;
            v28[1] = v19;
            uint64_t *v16 = v17;
            v16[1] = v18;
          }
          if ((v13 & 1) == 0)
          {
            unsigned int v20 = (*(v28 - 2) >> 1) & 3 | *(_DWORD *)((*(v28 - 2) & 0xFFFFFFFFFFFFFFF8) + 24);
            unsigned int v21 = *(_DWORD *)((*v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (*v28 >> 1) & 3;
            if (v20 >= v21 && (v21 < v20 || *(v28 - 1) >= (unint64_t)v28[1]))
            {
              int v25 = sub_1CC433350(v28, v27);
LABEL_40:
              BOOL v5 = v14 + 1;
              uint64_t result = v25;
              BOOL v4 = v26;
              a2 = v27;
              a4 = v13;
              continue;
            }
          }
          unint64_t v22 = sub_1CC433504(v28, v27);
          if ((v23 & 1) == 0)
          {
LABEL_43:
            sub_1CC432BE8(v28, v22, -v14, v13 & 1);
            a3 = -v14;
            a4 = 0;
            uint64_t result = v22 + 2;
            BOOL v4 = v26;
            a2 = v27;
            goto LABEL_2;
          }
          uint64_t v24 = sub_1CC43369C(v28, v22);
          int v25 = v22 + 2;
          if (!sub_1CC43369C(v22 + 2, v27))
          {
            if (v24) {
              goto LABEL_40;
            }
            goto LABEL_43;
          }
          a3 = -v14;
          a2 = v22;
          uint64_t result = v28;
          a4 = v13;
          if (v24) {
            return result;
          }
          goto LABEL_1;
        }
        if (result != a2)
        {
          return (uint64_t *)sub_1CC433BFC((unint64_t)result, a2, a2);
        }
        return result;
    }
  }
}

  int v11 = (unint64_t *)(a2 - 24);
  uint64_t j = a1;
  while (1)
  {
LABEL_2:
    a1 = j;
    uint64_t v13 = a2 - j;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - j) >> 3);
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return;
        case 2:
          BOOL v79 = *(_DWORD *)(j + 20);
          BOOL v80 = *(_DWORD *)(a2 - 4);
          uint64_t v81 = v80 > v79;
          if (v80 == v79 && (v82 = *(_DWORD *)(a2 - 8), v83 = *(_DWORD *)(j + 16), uint64_t v81 = v82 > v83, v82 == v83))
          {
            if (*v11 >= *(void *)j) {
              return;
            }
          }
          else if (!v81)
          {
            return;
          }
          unint64_t v185 = *(void *)(j + 16);
          unsigned int v180 = *(__n128 *)j;
          long long v164 = *(_OWORD *)v11;
          *(void *)(j + 16) = *(void *)(a2 - 8);
          *(_OWORD *)uint64_t j = v164;
          *(void *)(a2 - 8) = v185;
          *(__n128 *)int v11 = v180;
          break;
        case 3:
          sub_1CC495D10(j, j + 24, a2 - 24, a5);
          return;
        case 4:
          sub_1CC49613C(j, j + 24, j + 48, a2 - 24, a5);
          return;
        case 5:
          sub_1CC495B64(j, j + 24, j + 48, j + 72, a2 - 24, a5);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 575)
    {
      unsigned int v84 = (void *)(j + 24);
      unsigned int v86 = j == a2 || v84 == (void *)a2;
      if ((a4 & 1) == 0)
      {
        if (v86) {
          return;
        }
        while (1)
        {
          long long v165 = a1;
          a1 = (unint64_t)v84;
          long long v166 = *(_DWORD *)(v165 + 20);
          uint64_t v167 = *(_DWORD *)(v165 + 44);
          if (v167 == v166)
          {
            uint64_t v168 = *(_DWORD *)(v165 + 40);
            long long v169 = *(_DWORD *)(v165 + 16);
            if (v168 == v169)
            {
              if (*(void *)a1 >= *(void *)v165) {
                goto LABEL_257;
              }
              goto LABEL_248;
            }
            if (v168 > v169) {
              goto LABEL_248;
            }
          }
          else if (v167 > v166)
          {
            uint64_t v168 = *(_DWORD *)(v165 + 40);
LABEL_248:
            uint64_t v170 = *(void *)a1;
            uint64_t v171 = *(void *)(v165 + 32);
            for (unint64_t i = a1; ; i -= 24)
            {
              *(_OWORD *)unint64_t i = *(_OWORD *)(i - 24);
              *(void *)(i + 16) = *(void *)(i - 8);
              uint64_t v173 = *(_DWORD *)(i - 28);
              BOOL v174 = v167 > v173;
              if (v167 == v173 && (v175 = *(_DWORD *)(i - 32), BOOL v174 = v168 > v175, v168 == v175))
              {
                if (v170 >= *(void *)(i - 48)) {
                  goto LABEL_256;
                }
              }
              else if (!v174)
              {
LABEL_256:
                *(void *)(i - 24) = v170;
                *(void *)(i - 16) = v171;
                *(_DWORD *)(i - 8) = v168;
                *(_DWORD *)(i - 4) = v167;
                break;
              }
            }
          }
LABEL_257:
          unsigned int v84 = (void *)(a1 + 24);
          if (a1 + 24 == a2) {
            return;
          }
        }
      }
      if (v86) {
        return;
      }
      long long v87 = 0;
      unint64_t v88 = (void *)j;
LABEL_140:
      uint64_t v89 = v88;
      unint64_t v88 = v84;
      BOOL v90 = *((_DWORD *)v89 + 5);
      unsigned int v91 = *((_DWORD *)v89 + 11);
      if (v91 == v90)
      {
        long long v92 = *((_DWORD *)v89 + 10);
        int64_t v93 = *((_DWORD *)v89 + 4);
        if (v92 == v93)
        {
          if (*v88 >= *v89) {
            goto LABEL_161;
          }
        }
        else if (v92 <= v93)
        {
          goto LABEL_161;
        }
      }
      else
      {
        if (v91 <= v90) {
          goto LABEL_161;
        }
        long long v92 = *((_DWORD *)v89 + 10);
      }
      int64_t v95 = v89[3];
      int64_t v94 = v89[4];
      uint64_t v96 = v89[2];
      *(_OWORD *)unint64_t v88 = *(_OWORD *)v89;
      v88[2] = v96;
      unint64_t v97 = j;
      if (v89 == (void *)j) {
        goto LABEL_160;
      }
      unsigned int v98 = v87;
      while (1)
      {
        unsigned int v99 = j + v98;
        BOOL v100 = (unint64_t *)(j + v98 - 24);
        unsigned int v101 = *(_DWORD *)(j + v98 - 4);
        if (v91 == v101)
        {
          unsigned int v102 = *(_DWORD *)(v99 - 8);
          if (v92 == v102)
          {
            if (v95 >= *v100) {
              goto LABEL_159;
            }
          }
          else if (v92 <= v102)
          {
            unint64_t v97 = j + v98;
            goto LABEL_160;
          }
        }
        else if (v91 <= v101)
        {
LABEL_159:
          unint64_t v97 = (unint64_t)v89;
LABEL_160:
          *(void *)unint64_t v97 = v95;
          *(void *)(v97 + 8) = v94;
          *(_DWORD *)(v97 + 16) = v92;
          *(_DWORD *)(v97 + 20) = v91;
LABEL_161:
          unsigned int v84 = v88 + 3;
          v87 += 24;
          if (v88 + 3 == (void *)a2) {
            return;
          }
          goto LABEL_140;
        }
        v89 -= 3;
        *(_OWORD *)unsigned int v99 = *(_OWORD *)v100;
        *(void *)(v99 + 16) = *(void *)(j + v98 - 8);
        v98 -= 24;
        if (!v98)
        {
          unint64_t v97 = j;
          goto LABEL_160;
        }
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v15 = (unint64_t)v14 >> 1;
    long long v16 = j + 24 * ((unint64_t)v14 >> 1);
    if ((unint64_t)v13 >= 0xC01)
    {
      unsigned int v17 = sub_1CC495D10(a1, a1 + 24 * ((unint64_t)v14 >> 1), a2 - 24, a5);
      unsigned int v18 = 3 * v15;
      uint64_t v19 = a1 + 24 * v15 - 24;
      unsigned int v20 = sub_1CC495D10(a1 + 24, v19, a2 - 48, v17);
      unsigned int v21 = a1 + 24 + 8 * v18;
      unint64_t v22 = sub_1CC495D10(a1 + 48, v21, a2 - 72, v20);
      sub_1CC495D10(v19, v16, v21, v22);
      uint64_t v181 = *(void *)(a1 + 16);
      uint64_t v176 = *(__n128 *)a1;
      unsigned int v23 = *(void *)(v16 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v16;
      *(void *)(a1 + 16) = v23;
      a5 = v176;
      *(void *)(v16 + 16) = v181;
      *(__n128 *)long long v16 = v176;
    }
    else
    {
      a5 = sub_1CC495D10(a1 + 24 * ((unint64_t)v14 >> 1), a1, a2 - 24, a5);
    }
    --a3;
    if (a4)
    {
      uint64_t v24 = *(_DWORD *)(a1 + 20);
    }
    else
    {
      uint64_t v24 = *(_DWORD *)(a1 + 20);
      int v25 = *(_DWORD *)(a1 - 4);
      if (v25 == v24)
      {
        unsigned int v26 = *(_DWORD *)(a1 - 8);
        unsigned int v27 = *(_DWORD *)(a1 + 16);
        if (v26 == v27)
        {
          if (*(void *)(a1 - 24) >= *(void *)a1)
          {
            unsigned int v27 = *(_DWORD *)(a1 - 8);
            goto LABEL_68;
          }
        }
        else if (v26 <= v27)
        {
          goto LABEL_68;
        }
      }
      else if (v25 <= v24)
      {
        unsigned int v27 = *(_DWORD *)(a1 + 16);
LABEL_68:
        unsigned int v56 = *(void *)a1;
        long long v57 = *(_DWORD *)(a2 - 4);
        unsigned int v58 = v24 > v57;
        if (v24 == v57 && (uint64_t v59 = *(_DWORD *)(a2 - 8), v58 = v27 > v59, v27 == v59))
        {
          if (v56 < *v11) {
            goto LABEL_81;
          }
        }
        else if (v58)
        {
LABEL_81:
          for (uint64_t j = a1 + 24; ; j += 24)
          {
            long long v63 = *(_DWORD *)(j + 20);
            long long v64 = v24 > v63;
            if (v24 == v63 && (v65 = *(_DWORD *)(j + 16), long long v64 = v27 > v65, v27 == v65))
            {
              if (v56 < *(void *)j) {
                goto LABEL_88;
              }
            }
            else if (v64)
            {
              goto LABEL_88;
            }
          }
        }
        for (uint64_t j = a1 + 24; j < a2; j += 24)
        {
          int v60 = *(_DWORD *)(j + 20);
          unsigned int v61 = v24 > v60;
          if (v24 == v60 && (v62 = *(_DWORD *)(j + 16), unsigned int v61 = v27 > v62, v27 == v62))
          {
            if (v56 < *(void *)j) {
              break;
            }
          }
          else if (v61)
          {
            break;
          }
        }
LABEL_88:
        unsigned int v66 = *(void *)(a1 + 8);
        long long v67 = a2;
        if (j >= a2) {
          goto LABEL_111;
        }
        for (unint64_t k = a2 - 28; ; k -= 24)
        {
          long long v69 = v24 > v57;
          if (v24 == v57 && (unsigned int v70 = *(_DWORD *)(k + 20), v69 = v27 > v70, v27 == v70))
          {
            if (v56 >= *(void *)(k + 4)) {
              goto LABEL_97;
            }
          }
          else if (!v69)
          {
LABEL_97:
            long long v67 = k + 4;
LABEL_111:
            while (j < v67)
            {
              unsigned int v183 = *(void *)(j + 16);
              int8x8_t v178 = *(__n128 *)j;
              long long v72 = *(__n128 *)v67;
              *(void *)(j + 16) = *(void *)(v67 + 16);
              *(__n128 *)uint64_t j = v72;
              a5 = v178;
              *(void *)(v67 + 16) = v183;
              *(__n128 *)long long v67 = v178;
              do
              {
                while (1)
                {
                  j += 24;
                  long long v73 = *(_DWORD *)(j + 20);
                  long long v74 = v24 > v73;
                  if (v24 == v73)
                  {
                    unsigned int v75 = *(_DWORD *)(j + 16);
                    long long v74 = v27 > v75;
                    if (v27 == v75) {
                      break;
                    }
                  }
                  if (v74) {
                    goto LABEL_108;
                  }
                }
              }
              while (v56 >= *(void *)j);
              do
              {
LABEL_108:
                while (1)
                {
                  v67 -= 24;
                  unsigned int v76 = *(_DWORD *)(v67 + 20);
                  long long v77 = v24 > v76;
                  if (v24 == v76)
                  {
                    BOOL v78 = *(_DWORD *)(v67 + 16);
                    long long v77 = v27 > v78;
                    if (v27 == v78) {
                      break;
                    }
                  }
                  if (!v77) {
                    goto LABEL_111;
                  }
                }
              }
              while (v56 < *(void *)v67);
            }
            BOOL v5 = j - 24 >= a1;
            int v6 = j - 24 == a1;
            if (j - 24 != a1)
            {
              a5 = *(__n128 *)(j - 24);
              *(void *)(a1 + 16) = *(void *)(j - 8);
              *(__n128 *)a1 = a5;
            }
            a4 = 0;
            *(void *)(j - 24) = v56;
            *(void *)(j - 16) = v66;
            *(_DWORD *)(j - 8) = v27;
            *(_DWORD *)(j - 4) = v24;
            goto LABEL_2;
          }
          unsigned int v71 = *(_DWORD *)k;
          long long v57 = v71;
        }
      }
    }
    unint64_t v28 = 0;
    long long v29 = *(void *)a1;
    unsigned int v30 = *(void *)(a1 + 8);
    unsigned int v31 = *(_DWORD *)(a1 + 16);
    while (1)
    {
      uint64_t v32 = a1 + v28;
      unsigned int v33 = *(_DWORD *)(a1 + v28 + 44);
      int v34 = v33 > v24;
      if (v33 != v24) {
        break;
      }
      long long v35 = *(_DWORD *)(v32 + 40);
      int v34 = v35 > v31;
      if (v35 != v31) {
        break;
      }
      if (*(void *)(v32 + 24) >= v29) {
        goto LABEL_26;
      }
LABEL_25:
      v28 += 24;
    }
    if (v34) {
      goto LABEL_25;
    }
LABEL_26:
    BOOL v36 = a1 + v28 + 24;
    m = a2 - 24;
    if (v28)
    {
      while (1)
      {
        int v38 = *(_DWORD *)(m + 20);
        unsigned int v39 = v38 > v24;
        if (v38 == v24 && (v40 = *(_DWORD *)(m + 16), unsigned int v39 = v40 > v31, v40 == v31))
        {
          if (*(void *)m < v29) {
            goto LABEL_48;
          }
        }
        else if (v39)
        {
          goto LABEL_48;
        }
        m -= 24;
      }
    }
    m = a2;
    if (v36 < a2)
    {
      for (m = a2 - 24; ; m -= 24)
      {
        unsigned int v41 = *(_DWORD *)(m + 20);
        unsigned int v42 = v41 > v24;
        if (v41 == v24 && (v43 = *(_DWORD *)(m + 16), unsigned int v42 = v43 > v31, v43 == v31))
        {
          if (*(void *)m < v29 || v36 >= m) {
            break;
          }
        }
        else if (v42 || v36 >= m)
        {
          break;
        }
      }
    }
LABEL_48:
    uint64_t j = v36;
    if (v36 < m)
    {
      int v46 = m;
      do
      {
        int v182 = *(void *)(j + 16);
        uint64_t v177 = *(__n128 *)j;
        unsigned int v47 = *(__n128 *)v46;
        *(void *)(j + 16) = *(void *)(v46 + 16);
        *(__n128 *)uint64_t j = v47;
        a5 = v177;
        *(void *)(v46 + 16) = v182;
        *(__n128 *)int v46 = v177;
        do
        {
          while (1)
          {
            j += 24;
            long long v48 = *(_DWORD *)(j + 20);
            unsigned int v49 = v48 > v24;
            if (v48 == v24)
            {
              int v50 = *(_DWORD *)(j + 16);
              unsigned int v49 = v50 > v31;
              if (v50 == v31) {
                break;
              }
            }
            if (!v49) {
              goto LABEL_58;
            }
          }
        }
        while (*(void *)j < v29);
        do
        {
LABEL_58:
          while (1)
          {
            v46 -= 24;
            unsigned int v51 = *(_DWORD *)(v46 + 20);
            unsigned int v52 = v51 > v24;
            if (v51 == v24)
            {
              unsigned int v53 = *(_DWORD *)(v46 + 16);
              unsigned int v52 = v53 > v31;
              if (v53 == v31) {
                break;
              }
            }
            if (v52) {
              goto LABEL_61;
            }
          }
        }
        while (*(void *)v46 >= v29);
LABEL_61:
        ;
      }
      while (j < v46);
    }
    if (j - 24 != a1)
    {
      a5 = *(__n128 *)(j - 24);
      *(void *)(a1 + 16) = *(void *)(j - 8);
      *(__n128 *)a1 = a5;
    }
    *(void *)(j - 24) = v29;
    *(void *)(j - 16) = v30;
    *(_DWORD *)(j - 8) = v31;
    *(_DWORD *)(j - 4) = v24;
    if (v36 < m)
    {
LABEL_67:
      sub_1CC494F30(a1, j - 24, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      long long v54 = sub_1CC495EC4(a1, j - 24, a5);
      if (sub_1CC495EC4(j, a2, v55))
      {
        a2 = j - 24;
        if (v54) {
          return;
        }
        goto LABEL_1;
      }
      if (!v54) {
        goto LABEL_67;
      }
    }
  }
  if (j == a2) {
    return;
  }
  unint64_t v103 = (unint64_t)(v14 - 2) >> 1;
  unsigned int v104 = v103;
  while (2)
  {
    long long v105 = v104;
    if (v103 >= v104)
    {
      unint64_t v106 = (2 * v104) | 1;
      uint64_t v107 = j + 24 * v106;
      if (2 * v105 + 2 < v14)
      {
        uint64_t v108 = *(_DWORD *)(v107 + 44);
        unsigned int v109 = *(_DWORD *)(j + 24 * v106 + 20);
        unsigned int v110 = v109 > v108;
        if (v109 == v108
          && (BOOL v111 = *(_DWORD *)(j + 24 * v106 + 16), v112 = *(_DWORD *)(v107 + 40), v110 = v111 > v112, v111 == v112))
        {
          long long v113 = *(void *)v107 < *(void *)(v107 + 24);
        }
        else
        {
          long long v113 = v110;
        }
        if (v113)
        {
          v107 += 24;
          unint64_t v106 = 2 * v105 + 2;
        }
      }
      uint64_t v114 = j + 24 * v105;
      unint64_t v115 = *(_DWORD *)(v114 + 20);
      uint32x4_t v116 = *(_DWORD *)(v107 + 20);
      if (v116 == v115)
      {
        uint64_t v117 = *(_DWORD *)(v107 + 16);
        uint64_t v118 = *(_DWORD *)(j + 24 * v105 + 16);
        if (v117 == v118)
        {
          uint64_t v118 = *(_DWORD *)(v107 + 16);
          if (*(void *)v107 < *(void *)v114) {
            goto LABEL_201;
          }
        }
        else if (v117 > v118)
        {
          goto LABEL_201;
        }
      }
      else
      {
        if (v116 > v115) {
          goto LABEL_201;
        }
        uint64_t v118 = *(_DWORD *)(v114 + 16);
      }
      uint64_t v119 = *(void *)v114;
      unsigned int v120 = *(void *)(v114 + 8);
      while (1)
      {
        unsigned int v121 = *(_OWORD *)v107;
        *(void *)(v114 + 16) = *(void *)(v107 + 16);
        *(_OWORD *)uint64_t v114 = v121;
        if (v103 < v106) {
          break;
        }
        uint64_t v114 = v107;
        BOOL v122 = 2 * v106;
        unint64_t v106 = (2 * v106) | 1;
        uint64_t v107 = j + 24 * v106;
        long long v123 = v122 + 2;
        if (v123 < v14)
        {
          long long v124 = *(_DWORD *)(v107 + 44);
          uint64_t v125 = *(_DWORD *)(j + 24 * v106 + 20);
          unint64_t v126 = v125 > v124;
          if (v125 == v124
            && (v127 = *(_DWORD *)(j + 24 * v106 + 16), v128 = *(_DWORD *)(v107 + 40), unint64_t v126 = v127 > v128, v127 == v128))
          {
            unsigned int v129 = *(void *)v107 < *(void *)(v107 + 24);
          }
          else
          {
            unsigned int v129 = v126;
          }
          if (v129)
          {
            v107 += 24;
            unint64_t v106 = v123;
          }
        }
        unsigned int v130 = *(_DWORD *)(v107 + 20);
        unsigned int v131 = v130 > v115;
        if (v130 == v115 && (v132 = *(_DWORD *)(v107 + 16), unsigned int v131 = v132 > v118, v132 == v118))
        {
          if (*(void *)v107 < v119) {
            goto LABEL_199;
          }
        }
        else if (v131)
        {
LABEL_199:
          uint64_t v107 = v114;
          break;
        }
      }
      *(void *)uint64_t v107 = v119;
      *(void *)(v107 + 8) = v120;
      *(_DWORD *)(v107 + 16) = v118;
      *(_DWORD *)(v107 + 20) = v115;
    }
LABEL_201:
    unsigned int v104 = v105 - 1;
    if (v105) {
      continue;
    }
    break;
  }
  do
  {
    long long v133 = 0;
    uint64_t v184 = *(void *)(j + 16);
    unsigned int v179 = *(__n128 *)j;
    unint64_t v134 = j;
    do
    {
      unint64_t v135 = v133 + 1;
      unsigned int v136 = v134 + 24 * (v133 + 1);
      long long v137 = (2 * v133) | 1;
      uint32x4_t v138 = 2 * v133 + 2;
      if (v138 < v14)
      {
        unint64_t v139 = *(_DWORD *)(v136 + 44);
        unsigned int v140 = *(_DWORD *)(v134 + 24 * v135 + 20);
        unsigned int v141 = v140 > v139;
        if (v140 == v139
          && (unsigned int v142 = *(_DWORD *)(v134 + 24 * v135 + 16), v143 = *(_DWORD *)(v136 + 40), v141 = v142 > v143, v142 == v143))
        {
          long long v144 = *(void *)v136 < *(void *)(v136 + 24);
        }
        else
        {
          long long v144 = v141;
        }
        if (v144)
        {
          v136 += 24;
          long long v137 = v138;
        }
      }
      unsigned int v145 = *(_OWORD *)v136;
      *(void *)(v134 + 16) = *(void *)(v136 + 16);
      *(_OWORD *)unint64_t v134 = v145;
      unint64_t v134 = v136;
      long long v133 = v137;
    }
    while (v137 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
    a2 -= 24;
    if (v136 == a2)
    {
      *(void *)(v136 + 16) = v184;
      *(__n128 *)unsigned int v136 = v179;
      goto LABEL_234;
    }
    long long v146 = *(_OWORD *)a2;
    *(void *)(v136 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)unsigned int v136 = v146;
    *(void *)(a2 + 16) = v184;
    *(__n128 *)a2 = v179;
    long long v147 = v136 - j + 24;
    if (v147 >= 25)
    {
      long long v148 = v147 / 0x18uLL - 2;
      uint64_t v149 = v148 >> 1;
      uint64_t v150 = j + 24 * (v148 >> 1);
      uint64_t v151 = *(_DWORD *)(v136 + 20);
      long long v152 = *(_DWORD *)(v150 + 20);
      if (v152 == v151)
      {
        long long v153 = *(_DWORD *)(j + 24 * v149 + 16);
        long long v154 = *(_DWORD *)(v136 + 16);
        if (v153 == v154)
        {
          long long v154 = *(_DWORD *)(j + 24 * v149 + 16);
          if (*(void *)v150 >= *(void *)v136) {
            goto LABEL_234;
          }
        }
        else if (v153 <= v154)
        {
          goto LABEL_234;
        }
      }
      else
      {
        if (v152 <= v151) {
          goto LABEL_234;
        }
        long long v154 = *(_DWORD *)(v136 + 16);
      }
      long long v155 = *(void *)v136;
      long long v156 = *(void *)(v136 + 8);
      long long v157 = *(_OWORD *)v150;
      *(void *)(v136 + 16) = *(void *)(v150 + 16);
      *(_OWORD *)unsigned int v136 = v157;
      if (v148 < 2) {
        goto LABEL_233;
      }
      while (1)
      {
        long long v158 = v150;
        long long v159 = v149 - 1;
        uint64_t v149 = (v149 - 1) >> 1;
        uint64_t v150 = j + 24 * v149;
        long long v160 = *(_DWORD *)(v150 + 20);
        long long v161 = v160 > v151;
        if (v160 == v151 && (long long v162 = *(_DWORD *)(j + 24 * v149 + 16), v161 = v162 > v154, v162 == v154))
        {
          if (*(void *)v150 >= v155) {
            goto LABEL_232;
          }
        }
        else if (!v161)
        {
LABEL_232:
          uint64_t v150 = v158;
LABEL_233:
          *(void *)uint64_t v150 = v155;
          *(void *)(v150 + 8) = v156;
          *(_DWORD *)(v150 + 16) = v154;
          *(_DWORD *)(v150 + 20) = v151;
          break;
        }
        long long v163 = *(_OWORD *)v150;
        *(void *)(v158 + 16) = *(void *)(v150 + 16);
        *(_OWORD *)long long v158 = v163;
        if (v159 <= 1) {
          goto LABEL_233;
        }
      }
    }
LABEL_234:
    int v34 = v14-- <= 2;
  }
  while (!v34);
}

  int v10 = a2;
  v255 = &a2[-1].i64[1];
  int v11 = a1;
  while (1)
  {
    uint64_t v12 = (uint64_t *)v11;
    uint64_t v13 = (char *)v10 - (char *)v11;
    unint64_t v14 = ((char *)v10 - (char *)v11) >> 3;
    uint64_t v261 = (int8x16_t *)v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return result;
        case 2:
          v213 = *v12;
          int v214 = *a3;
          uint64_t v215 = (uint64_t *)(*a3 + 576);
          v263 = a2[-1].i64[1];
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v215, &v263, &v264)) {
            v216 = v264;
          }
          else {
            v216 = *(void *)(v214 + 576) + 16 * *(unsigned int *)(v214 + 592);
          }
          int v224 = *(_DWORD *)(v216 + 8);
          v263 = v213;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v215, &v263, &v264)) {
            uint64_t v225 = v264;
          }
          else {
            uint64_t v225 = *(void *)(v214 + 576) + 16 * *(unsigned int *)(v214 + 592);
          }
          if (v224 < *(_DWORD *)(v225 + 8))
          {
            int v228 = *v12;
            *uint64_t v12 = a2[-1].i64[1];
            a2[-1].i64[1] = v228;
          }
          break;
        case 3:
          sub_1CC4E6284(v12, v12 + 1, v255, a3);
          break;
        case 4:
          sub_1CC4E6AA8(v12, v12 + 1, v12 + 2, v255, a3);
          break;
        case 5:
          int v217 = v12 + 1;
          long long v218 = v12 + 2;
          long long v219 = v12 + 3;
          sub_1CC4E6AA8(v12, v12 + 1, v12 + 2, v12 + 3, a3);
          v220 = v12[3];
          int v221 = *a3;
          long long v222 = (uint64_t *)(*a3 + 576);
          v263 = a2[-1].i64[1];
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v222, &v263, &v264)) {
            uint64_t v223 = v264;
          }
          else {
            uint64_t v223 = *(void *)(v221 + 576) + 16 * *(unsigned int *)(v221 + 592);
          }
          char v226 = *(_DWORD *)(v223 + 8);
          v263 = v220;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v222, &v263, &v264)) {
            uint64_t v227 = v264;
          }
          else {
            uint64_t v227 = *(void *)(v221 + 576) + 16 * *(unsigned int *)(v221 + 592);
          }
          if (v226 < *(_DWORD *)(v227 + 8))
          {
            int v229 = *v219;
            *long long v219 = a2[-1].i64[1];
            a2[-1].i64[1] = v229;
            int v230 = *v218;
            unsigned int v231 = *a3;
            uint64_t v232 = (uint64_t *)(*a3 + 576);
            v263 = *v219;
            uint64_t v264 = 0;
            uint64_t v233 = (sub_1CD3C8538(v232, &v263, &v264) & 1) != 0
                 ? v264
                 : *(void *)(v231 + 576) + 16 * *(unsigned int *)(v231 + 592);
            uint64_t v234 = *(_DWORD *)(v233 + 8);
            v263 = v230;
            uint64_t v264 = 0;
            uint64_t v235 = (sub_1CD3C8538(v232, &v263, &v264) & 1) != 0
                 ? v264
                 : *(void *)(v231 + 576) + 16 * *(unsigned int *)(v231 + 592);
            if (v234 < *(_DWORD *)(v235 + 8))
            {
              v236 = *v218;
              uint64_t v237 = *v219;
              void *v218 = *v219;
              *long long v219 = v236;
              int v238 = *v217;
              uint64_t v239 = *a3;
              uint64_t v240 = (uint64_t *)(*a3 + 576);
              v263 = v237;
              uint64_t v264 = 0;
              unsigned int v241 = (sub_1CD3C8538(v240, &v263, &v264) & 1) != 0
                   ? v264
                   : *(void *)(v239 + 576) + 16 * *(unsigned int *)(v239 + 592);
              uint64_t v242 = *(_DWORD *)(v241 + 8);
              v263 = v238;
              uint64_t v264 = 0;
              uint64_t v243 = (sub_1CD3C8538(v240, &v263, &v264) & 1) != 0
                   ? v264
                   : *(void *)(v239 + 576) + 16 * *(unsigned int *)(v239 + 592);
              if (v242 < *(_DWORD *)(v243 + 8))
              {
                uint64_t v245 = v261->i64[1];
                BOOL v244 = v261[1].i64[0];
                uint64_t v246 = v261->i64[0];
                v261->i64[1] = v244;
                v261[1].i64[0] = v245;
                uint64_t v247 = *a3;
                BOOL v248 = (uint64_t *)(*a3 + 576);
                v263 = v244;
                uint64_t v264 = 0;
                uint64_t v249 = (sub_1CD3C8538(v248, &v263, &v264) & 1) != 0
                     ? v264
                     : *(void *)(v247 + 576) + 16 * *(unsigned int *)(v247 + 592);
                uint64_t v250 = *(_DWORD *)(v249 + 8);
                v263 = v246;
                uint64_t v264 = 0;
                uint64_t v251 = (sub_1CD3C8538(v248, &v263, &v264) & 1) != 0
                     ? v264
                     : *(void *)(v247 + 576) + 16 * *(unsigned int *)(v247 + 592);
                if (v250 < *(_DWORD *)(v251 + 8))
                {
                  uint64_t result = vextq_s8(*v261, *v261, 8uLL);
                  void *v261 = result;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 191) {
      break;
    }
    if (!a4)
    {
      if (v12 == (uint64_t *)v10) {
        return result;
      }
      unsigned int v130 = (unint64_t)(v14 - 2) >> 1;
      unsigned int v131 = v130;
      do
      {
        unsigned int v132 = v131;
        if (v130 >= v131)
        {
          long long v133 = (2 * v131) | 1;
          unint64_t v134 = &v261->i64[v133];
          if (2 * v131 + 2 < v14)
          {
            unint64_t v135 = v134 + 1;
            unsigned int v136 = v134[1];
            long long v137 = *a3;
            uint32x4_t v138 = (uint64_t *)(*a3 + 576);
            v263 = *v134;
            uint64_t v264 = 0;
            unint64_t v139 = sub_1CD3C8538(v138, &v263, &v264);
            unsigned int v140 = v136;
            unsigned int v141 = (v139 & 1) != 0 ? v264 : *(void *)(v137 + 576) + 16 * *(unsigned int *)(v137 + 592);
            unsigned int v142 = *(_DWORD *)(v141 + 8);
            v263 = v140;
            uint64_t v264 = 0;
            unint64_t v143 = (sub_1CD3C8538(v138, &v263, &v264) & 1) != 0
                 ? v264
                 : *(void *)(v137 + 576) + 16 * *(unsigned int *)(v137 + 592);
            unint64_t v134 = &v261->i64[v133];
            if (v142 < *(_DWORD *)(v143 + 8))
            {
              unint64_t v134 = v135;
              long long v133 = 2 * v132 + 2;
            }
          }
          long long v144 = &v261->i64[v132];
          v259 = v134;
          unsigned int v145 = *v144;
          long long v146 = *a3;
          long long v147 = (uint64_t *)(*a3 + 576);
          v263 = *v134;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v147, &v263, &v264)) {
            long long v148 = v264;
          }
          else {
            long long v148 = *(void *)(v146 + 576) + 16 * *(unsigned int *)(v146 + 592);
          }
          uint64_t v149 = *(_DWORD *)(v148 + 8);
          v263 = v145;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v147, &v263, &v264)) {
            uint64_t v150 = v264;
          }
          else {
            uint64_t v150 = *(void *)(v146 + 576) + 16 * *(unsigned int *)(v146 + 592);
          }
          uint64_t v151 = v259;
          if (v149 >= *(_DWORD *)(v150 + 8))
          {
            uint64_t v256 = *v144;
            do
            {
              long long v152 = v151;
              uint64_t *v144 = *v151;
              if (v130 < v133) {
                break;
              }
              long long v153 = (2 * v133) | 1;
              long long v154 = &v261->i64[v153];
              long long v133 = 2 * v133 + 2;
              if (v133 < v14)
              {
                long long v155 = v154 + 1;
                uint64_t v253 = v154[1];
                long long v156 = *a3;
                long long v157 = (uint64_t *)(*a3 + 576);
                v263 = *v154;
                uint64_t v264 = 0;
                long long v158 = (sub_1CD3C8538(v157, &v263, &v264) & 1) != 0
                     ? v264
                     : *(void *)(v156 + 576) + 16 * *(unsigned int *)(v156 + 592);
                BOOL v252 = *(_DWORD *)(v158 + 8);
                v263 = v253;
                uint64_t v264 = 0;
                long long v159 = (sub_1CD3C8538(v157, &v263, &v264) & 1) != 0
                     ? v264
                     : *(void *)(v156 + 576) + 16 * *(unsigned int *)(v156 + 592);
                long long v154 = &v261->i64[v153];
                if (v252 >= *(_DWORD *)(v159 + 8)) {
                  long long v133 = v153;
                }
                else {
                  long long v154 = v155;
                }
              }
              else
              {
                long long v133 = v153;
              }
              long long v160 = v154;
              long long v161 = *a3;
              long long v162 = (uint64_t *)(*a3 + 576);
              v263 = *v154;
              uint64_t v264 = 0;
              long long v163 = (sub_1CD3C8538(v162, &v263, &v264) & 1) != 0
                   ? v264
                   : *(void *)(v161 + 576) + 16 * *(unsigned int *)(v161 + 592);
              long long v164 = *(_DWORD *)(v163 + 8);
              v263 = v256;
              uint64_t v264 = 0;
              long long v165 = (sub_1CD3C8538(v162, &v263, &v264) & 1) != 0
                   ? v264
                   : *(void *)(v161 + 576) + 16 * *(unsigned int *)(v161 + 592);
              uint64_t v151 = v160;
              long long v144 = v152;
            }
            while (v164 >= *(_DWORD *)(v165 + 8));
            *long long v152 = v256;
          }
        }
        unsigned int v131 = v132 - 1;
      }
      while (v132);
      long long v166 = (uint64_t *)v261;
      while (2)
      {
        uint64_t v167 = 0;
        unint64_t v254 = *v166;
        uint64_t v257 = v14;
        uint64_t v168 = (unint64_t)(v14 - 2) >> 1;
        do
        {
          long long v169 = &v166[v167 + 1];
          uint64_t v170 = (2 * v167) | 1;
          uint64_t v171 = 2 * v167 + 2;
          if (v171 < v14)
          {
            uint64_t v260 = v166[v167 + 2];
            uint64_t v172 = *a3;
            uint64_t v173 = (uint64_t *)(*a3 + 576);
            v263 = *v169;
            uint64_t v264 = 0;
            BOOL v174 = sub_1CD3C8538(v173, &v263, &v264);
            if (v174) {
              unsigned int v175 = v264;
            }
            else {
              unsigned int v175 = *(void *)(v172 + 576) + 16 * *(unsigned int *)(v172 + 592);
            }
            uint64_t v176 = *(_DWORD *)(v175 + 8);
            v263 = v260;
            uint64_t v264 = 0;
            if (sub_1CD3C8538(v173, &v263, &v264)) {
              uint64_t v177 = v264;
            }
            else {
              uint64_t v177 = *(void *)(v172 + 576) + 16 * *(unsigned int *)(v172 + 592);
            }
            if (v176 < *(_DWORD *)(v177 + 8))
            {
              ++v169;
              uint64_t v170 = v171;
            }
            unint64_t v14 = v257;
          }
          *long long v166 = *v169;
          long long v166 = v169;
          uint64_t v167 = v170;
        }
        while (v170 <= v168);
        int8x8_t v178 = &a2[-1].i64[1];
        int v6 = v169 == (uint64_t *)&a2[-1].u64[1];
        a2 = (int8x16_t *)((char *)a2 - 8);
        if (v6)
        {
          *long long v169 = v254;
          goto LABEL_217;
        }
        *long long v169 = *v178;
        *int8x8_t v178 = v254;
        long long v166 = (uint64_t *)v261;
        unsigned int v179 = (char *)v169 - (char *)v261 + 8;
        if (v179 >= 9)
        {
          unsigned int v180 = (((unint64_t)v179 >> 3) - 2) >> 1;
          uint64_t v181 = &v261->i64[v180];
          int v182 = *v169;
          unsigned int v183 = *a3;
          uint64_t v184 = (uint64_t *)(*a3 + 576);
          v263 = *v181;
          uint64_t v264 = 0;
          unint64_t v185 = (sub_1CD3C8538(v184, &v263, &v264) & 1) != 0
               ? v264
               : *(void *)(v183 + 576) + 16 * *(unsigned int *)(v183 + 592);
          char v187 = *(_DWORD *)(v185 + 8);
          v263 = v182;
          uint64_t v264 = 0;
          int v188 = (sub_1CD3C8538(v184, &v263, &v264) & 1) != 0
               ? v264
               : *(void *)(v183 + 576) + 16 * *(unsigned int *)(v183 + 592);
          long long v166 = (uint64_t *)v261;
          BOOL v5 = v187 >= *(_DWORD *)(v188 + 8);
          unint64_t v14 = v257;
          if (!v5)
          {
            uint64_t v189 = *v169;
            do
            {
              uint64_t v190 = v181;
              *long long v169 = *v181;
              if (!v180) {
                break;
              }
              unsigned int v180 = (v180 - 1) >> 1;
              uint64_t v181 = &v261->i64[v180];
              uint64_t v191 = *a3;
              uint64_t v192 = (uint64_t *)(*a3 + 576);
              v263 = *v181;
              uint64_t v264 = 0;
              int v193 = (sub_1CD3C8538(v192, &v263, &v264) & 1) != 0
                   ? v264
                   : *(void *)(v191 + 576) + 16 * *(unsigned int *)(v191 + 592);
              int v194 = *(_DWORD *)(v193 + 8);
              v263 = v189;
              uint64_t v264 = 0;
              int v195 = (sub_1CD3C8538(v192, &v263, &v264) & 1) != 0
                   ? v264
                   : *(void *)(v191 + 576) + 16 * *(unsigned int *)(v191 + 592);
              long long v169 = v190;
            }
            while (v194 < *(_DWORD *)(v195 + 8));
            *uint64_t v190 = v189;
LABEL_217:
            long long v166 = (uint64_t *)v261;
          }
        }
        if (v14-- <= 2) {
          return result;
        }
        continue;
      }
    }
    uint64_t v15 = (unint64_t)v14 >> 1;
    long long v16 = &v12[(unint64_t)v14 >> 1];
    if ((unint64_t)v13 < 0x401)
    {
      sub_1CC4E6284(v16, v12, v255, a3);
    }
    else
    {
      sub_1CC4E6284(v12, v16, v255, a3);
      sub_1CC4E6284(v12 + 1, v16 - 1, a2[-1].i64, a3);
      sub_1CC4E6284(v12 + 2, &v12[v15 + 1], &a2[-2].i64[1], a3);
      sub_1CC4E6284(v16 - 1, v16, &v12[v15 + 1], a3);
      unsigned int v17 = *v12;
      *uint64_t v12 = *v16;
      uint64_t *v16 = v17;
    }
    --a4;
    if (a5) {
      goto LABEL_10;
    }
    unsigned int v56 = *v12;
    long long v57 = *a3;
    unsigned int v58 = (uint64_t *)(*a3 + 576);
    v263 = *(v12 - 1);
    uint64_t v264 = 0;
    uint64_t v59 = (sub_1CD3C8538(v58, &v263, &v264) & 1) != 0
        ? v264
        : *(void *)(v57 + 576) + 16 * *(unsigned int *)(v57 + 592);
    int v60 = *(_DWORD *)(v59 + 8);
    v263 = v56;
    uint64_t v264 = 0;
    unsigned int v61 = (sub_1CD3C8538(v58, &v263, &v264) & 1) != 0
        ? v264
        : *(void *)(v57 + 576) + 16 * *(unsigned int *)(v57 + 592);
    if (v60 < *(_DWORD *)(v61 + 8))
    {
LABEL_10:
      unsigned int v18 = 0;
      uint64_t v19 = *v12;
      do
      {
        unsigned int v20 = *a3;
        unsigned int v21 = (uint64_t *)(*a3 + 576);
        v263 = v12[v18 + 1];
        uint64_t v264 = 0;
        if (sub_1CD3C8538(v21, &v263, &v264)) {
          unint64_t v22 = v264;
        }
        else {
          unint64_t v22 = *(void *)(v20 + 576) + 16 * *(unsigned int *)(v20 + 592);
        }
        unsigned int v23 = *(_DWORD *)(v22 + 8);
        v263 = v19;
        uint64_t v264 = 0;
        if (sub_1CD3C8538(v21, &v263, &v264)) {
          uint64_t v24 = v264;
        }
        else {
          uint64_t v24 = *(void *)(v20 + 576) + 16 * *(unsigned int *)(v20 + 592);
        }
        ++v18;
      }
      while (v23 < *(_DWORD *)(v24 + 8));
      int v25 = (int8x16_t *)&v12[v18];
      unsigned int v26 = a2;
      if (v18 == 1)
      {
        unsigned int v26 = a2;
        do
        {
          if (v25 >= v26) {
            break;
          }
          int v50 = v26[-1].i64[1];
          unsigned int v26 = (int8x16_t *)((char *)v26 - 8);
          unsigned int v51 = *a3;
          unsigned int v52 = (uint64_t *)(*a3 + 576);
          v263 = v50;
          uint64_t v264 = 0;
          unsigned int v53 = (sub_1CD3C8538(v52, &v263, &v264) & 1) != 0
              ? v264
              : *(void *)(v51 + 576) + 16 * *(unsigned int *)(v51 + 592);
          long long v54 = *(_DWORD *)(v53 + 8);
          v263 = v19;
          uint64_t v264 = 0;
          unsigned int v55 = (sub_1CD3C8538(v52, &v263, &v264) & 1) != 0
              ? v264
              : *(void *)(v51 + 576) + 16 * *(unsigned int *)(v51 + 592);
        }
        while (v54 >= *(_DWORD *)(v55 + 8));
      }
      else
      {
        do
        {
          unsigned int v27 = v26[-1].i64[1];
          unsigned int v26 = (int8x16_t *)((char *)v26 - 8);
          unint64_t v28 = *a3;
          long long v29 = (uint64_t *)(*a3 + 576);
          v263 = v27;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v29, &v263, &v264)) {
            unsigned int v30 = v264;
          }
          else {
            unsigned int v30 = *(void *)(v28 + 576) + 16 * *(unsigned int *)(v28 + 592);
          }
          unsigned int v31 = *(_DWORD *)(v30 + 8);
          v263 = v19;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v29, &v263, &v264)) {
            uint64_t v32 = v264;
          }
          else {
            uint64_t v32 = *(void *)(v28 + 576) + 16 * *(unsigned int *)(v28 + 592);
          }
        }
        while (v31 >= *(_DWORD *)(v32 + 8));
      }
      int v11 = v25;
      if (v25 < v26)
      {
        unsigned int v33 = v26;
        do
        {
          int v34 = v11->i64[0];
          v11->i64[0] = v33->i64[0];
          v33->i64[0] = v34;
          do
          {
            long long v35 = v11->i64[1];
            int v11 = (int8x16_t *)((char *)v11 + 8);
            BOOL v36 = *a3;
            int v37 = (uint64_t *)(*a3 + 576);
            v263 = v35;
            uint64_t v264 = 0;
            if (sub_1CD3C8538(v37, &v263, &v264)) {
              int v38 = v264;
            }
            else {
              int v38 = *(void *)(v36 + 576) + 16 * *(unsigned int *)(v36 + 592);
            }
            unsigned int v39 = *(_DWORD *)(v38 + 8);
            v263 = v19;
            uint64_t v264 = 0;
            if (sub_1CD3C8538(v37, &v263, &v264)) {
              unsigned int v40 = v264;
            }
            else {
              unsigned int v40 = *(void *)(v36 + 576) + 16 * *(unsigned int *)(v36 + 592);
            }
          }
          while (v39 < *(_DWORD *)(v40 + 8));
          do
          {
            unsigned int v41 = v33[-1].i64[1];
            unsigned int v33 = (int8x16_t *)((char *)v33 - 8);
            unsigned int v42 = *a3;
            unsigned int v43 = (uint64_t *)(*a3 + 576);
            v263 = v41;
            uint64_t v264 = 0;
            if (sub_1CD3C8538(v43, &v263, &v264)) {
              int v44 = v264;
            }
            else {
              int v44 = *(void *)(v42 + 576) + 16 * *(unsigned int *)(v42 + 592);
            }
            unsigned int v45 = *(_DWORD *)(v44 + 8);
            v263 = v19;
            uint64_t v264 = 0;
            if (sub_1CD3C8538(v43, &v263, &v264)) {
              int v46 = v264;
            }
            else {
              int v46 = *(void *)(v42 + 576) + 16 * *(unsigned int *)(v42 + 592);
            }
          }
          while (v45 >= *(_DWORD *)(v46 + 8));
        }
        while (v11 < v33);
      }
      unsigned int v47 = &v11[-1].i64[1];
      a1 = v261;
      if (&v11[-1].u64[1] != (unint64_t *)v261) {
        v261->i64[0] = *v47;
      }
      *unsigned int v47 = v19;
      int v10 = a2;
      if (v25 < v26) {
        goto LABEL_49;
      }
      long long v48 = sub_1CC4E656C(v261, (int8x16_t *)((char *)v11 - 8), a3);
      if (sub_1CC4E656C(v11, a2, a3))
      {
        a2 = (int8x16_t *)((char *)v11 - 8);
        if (v48) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v48)
      {
LABEL_49:
        sub_1CC4E4F70(v261, &v11[-1].u64[1], a3, a4, a5 & 1);
        a5 = 0;
      }
    }
    else
    {
      unsigned int v62 = *v12;
      long long v63 = *v255;
      long long v64 = *a3;
      unsigned int v65 = (uint64_t *)(*a3 + 576);
      v263 = *v12;
      uint64_t v264 = 0;
      if (sub_1CD3C8538(v65, &v263, &v264)) {
        unsigned int v66 = v264;
      }
      else {
        unsigned int v66 = *(void *)(v64 + 576) + 16 * *(unsigned int *)(v64 + 592);
      }
      long long v67 = *(_DWORD *)(v66 + 8);
      v263 = v63;
      uint64_t v264 = 0;
      if (sub_1CD3C8538(v65, &v263, &v264)) {
        long long v68 = v264;
      }
      else {
        long long v68 = *(void *)(v64 + 576) + 16 * *(unsigned int *)(v64 + 592);
      }
      long long v69 = a2;
      if (v67 >= *(_DWORD *)(v68 + 8))
      {
        unsigned int v101 = (int8x16_t *)(v12 + 1);
        do
        {
          int v11 = v101;
          if (v101 >= v69) {
            break;
          }
          unsigned int v102 = v101->i64[0];
          unint64_t v103 = *a3;
          unsigned int v104 = (uint64_t *)(*a3 + 576);
          v263 = v62;
          uint64_t v264 = 0;
          long long v105 = (sub_1CD3C8538(v104, &v263, &v264) & 1) != 0
               ? v264
               : *(void *)(v103 + 576) + 16 * *(unsigned int *)(v103 + 592);
          unint64_t v106 = *(_DWORD *)(v105 + 8);
          v263 = v102;
          uint64_t v264 = 0;
          uint64_t v107 = (sub_1CD3C8538(v104, &v263, &v264) & 1) != 0
               ? v264
               : *(void *)(v103 + 576) + 16 * *(unsigned int *)(v103 + 592);
          uint64_t v108 = *(_DWORD *)(v107 + 8);
          unsigned int v101 = (int8x16_t *)&v11->u64[1];
          BOOL v5 = v106 >= v108;
          uint64_t v12 = (uint64_t *)v261;
          long long v69 = a2;
        }
        while (v5);
      }
      else
      {
        int v11 = (int8x16_t *)v12;
        do
        {
          unsigned int v71 = v11->i64[1];
          int v11 = (int8x16_t *)((char *)v11 + 8);
          unsigned int v70 = v71;
          long long v72 = *a3;
          long long v73 = (uint64_t *)(*a3 + 576);
          v263 = v62;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v73, &v263, &v264)) {
            long long v74 = v264;
          }
          else {
            long long v74 = *(void *)(v72 + 576) + 16 * *(unsigned int *)(v72 + 592);
          }
          unsigned int v75 = *(_DWORD *)(v74 + 8);
          v263 = v70;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v73, &v263, &v264)) {
            unsigned int v76 = v264;
          }
          else {
            unsigned int v76 = *(void *)(v72 + 576) + 16 * *(unsigned int *)(v72 + 592);
          }
          BOOL v5 = v75 >= *(_DWORD *)(v76 + 8);
          uint64_t v12 = (uint64_t *)v261;
          long long v69 = a2;
        }
        while (v5);
      }
      long long v77 = v69;
      if (v11 < v69)
      {
        long long v77 = a2;
        do
        {
          BOOL v79 = v77[-1].i64[1];
          long long v77 = (int8x16_t *)((char *)v77 - 8);
          BOOL v78 = v79;
          BOOL v80 = *a3;
          uint64_t v81 = (uint64_t *)(*a3 + 576);
          v263 = v62;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v81, &v263, &v264)) {
            unint64_t v82 = v264;
          }
          else {
            unint64_t v82 = *(void *)(v80 + 576) + 16 * *(unsigned int *)(v80 + 592);
          }
          unint64_t v83 = *(_DWORD *)(v82 + 8);
          v263 = v78;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v81, &v263, &v264)) {
            unsigned int v84 = v264;
          }
          else {
            unsigned int v84 = *(void *)(v80 + 576) + 16 * *(unsigned int *)(v80 + 592);
          }
          uint64_t v12 = (uint64_t *)v261;
        }
        while (v83 < *(_DWORD *)(v84 + 8));
      }
      while (v11 < v77)
      {
        unsigned int v85 = v11->i64[0];
        v11->i64[0] = v77->i64[0];
        v77->i64[0] = v85;
        do
        {
          long long v87 = v11->i64[1];
          int v11 = (int8x16_t *)((char *)v11 + 8);
          unsigned int v86 = v87;
          unint64_t v88 = *a3;
          uint64_t v89 = (uint64_t *)(*a3 + 576);
          v263 = v62;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v89, &v263, &v264)) {
            BOOL v90 = v264;
          }
          else {
            BOOL v90 = *(void *)(v88 + 576) + 16 * *(unsigned int *)(v88 + 592);
          }
          unsigned int v91 = *(_DWORD *)(v90 + 8);
          v263 = v86;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v89, &v263, &v264)) {
            long long v92 = v264;
          }
          else {
            long long v92 = *(void *)(v88 + 576) + 16 * *(unsigned int *)(v88 + 592);
          }
        }
        while (v91 >= *(_DWORD *)(v92 + 8));
        do
        {
          int64_t v94 = v77[-1].i64[1];
          long long v77 = (int8x16_t *)((char *)v77 - 8);
          int64_t v93 = v94;
          int64_t v95 = *a3;
          uint64_t v96 = (uint64_t *)(*a3 + 576);
          v263 = v62;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v96, &v263, &v264)) {
            unint64_t v97 = v264;
          }
          else {
            unint64_t v97 = *(void *)(v95 + 576) + 16 * *(unsigned int *)(v95 + 592);
          }
          unsigned int v98 = *(_DWORD *)(v97 + 8);
          v263 = v93;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v96, &v263, &v264)) {
            unsigned int v99 = v264;
          }
          else {
            unsigned int v99 = *(void *)(v95 + 576) + 16 * *(unsigned int *)(v95 + 592);
          }
          uint64_t v12 = (uint64_t *)v261;
        }
        while (v98 < *(_DWORD *)(v99 + 8));
      }
      BOOL v100 = &v11[-1].i64[1];
      BOOL v5 = &v11[-1].u64[1] >= (unint64_t *)v12;
      int v6 = &v11[-1].u64[1] == (unint64_t *)v12;
      if (&v11[-1].u64[1] != (unint64_t *)v12) {
        *uint64_t v12 = *v100;
      }
      a5 = 0;
      long long *v100 = v62;
      int v10 = a2;
    }
  }
  unsigned int v109 = v12 + 1;
  BOOL v111 = v12 == (uint64_t *)v10 || v109 == (uint64_t *)v10;
  if (a5)
  {
    if (!v111)
    {
      unsigned int v112 = 0;
      long long v113 = v12;
      do
      {
        unint64_t v115 = *v113;
        uint64_t v114 = v113[1];
        long long v113 = v109;
        uint32x4_t v116 = *a3;
        uint64_t v117 = (uint64_t *)(*a3 + 576);
        v263 = v114;
        uint64_t v264 = 0;
        if (sub_1CD3C8538(v117, &v263, &v264)) {
          uint64_t v118 = v264;
        }
        else {
          uint64_t v118 = *(void *)(v116 + 576) + 16 * *(unsigned int *)(v116 + 592);
        }
        uint64_t v119 = *(_DWORD *)(v118 + 8);
        v263 = v115;
        uint64_t v264 = 0;
        if (sub_1CD3C8538(v117, &v263, &v264)) {
          unsigned int v120 = v264;
        }
        else {
          unsigned int v120 = *(void *)(v116 + 576) + 16 * *(unsigned int *)(v116 + 592);
        }
        if (v119 < *(_DWORD *)(v120 + 8))
        {
          unsigned int v121 = *v113;
          BOOL v122 = v112;
          while (1)
          {
            *(uint64_t *)((char *)&v261->i64[1] + v122) = *(uint64_t *)((char *)v261->i64 + v122);
            if (!v122) {
              break;
            }
            long long v123 = *(uint64_t *)((char *)&v261->i64[-1] + v122);
            long long v124 = *a3;
            uint64_t v125 = (uint64_t *)(*a3 + 576);
            v263 = v121;
            uint64_t v264 = 0;
            if (sub_1CD3C8538(v125, &v263, &v264)) {
              unint64_t v126 = v264;
            }
            else {
              unint64_t v126 = *(void *)(v124 + 576) + 16 * *(unsigned int *)(v124 + 592);
            }
            unint64_t v127 = *(_DWORD *)(v126 + 8);
            v263 = v123;
            uint64_t v264 = 0;
            if (sub_1CD3C8538(v125, &v263, &v264)) {
              unint64_t v128 = v264;
            }
            else {
              unint64_t v128 = *(void *)(v124 + 576) + 16 * *(unsigned int *)(v124 + 592);
            }
            v122 -= 8;
            if (v127 >= *(_DWORD *)(v128 + 8))
            {
              unsigned int v129 = (uint64_t *)((char *)&v261->i64[1] + v122);
              goto LABEL_153;
            }
          }
          unsigned int v129 = (uint64_t *)v261;
LABEL_153:
          void *v129 = v121;
        }
        unsigned int v109 = v113 + 1;
        v112 += 8;
      }
      while (v113 + 1 != (uint64_t *)a2);
    }
  }
  else if (!v111)
  {
    do
    {
      uint64_t v197 = *v12;
      uint64_t v196 = v12[1];
      uint64_t v12 = v109;
      int v198 = *a3;
      uint64_t v199 = (uint64_t *)(*a3 + 576);
      v263 = v196;
      uint64_t v264 = 0;
      if (sub_1CD3C8538(v199, &v263, &v264)) {
        unint64_t v200 = v264;
      }
      else {
        unint64_t v200 = *(void *)(v198 + 576) + 16 * *(unsigned int *)(v198 + 592);
      }
      unint64_t v201 = *(_DWORD *)(v200 + 8);
      v263 = v197;
      uint64_t v264 = 0;
      if (sub_1CD3C8538(v199, &v263, &v264)) {
        unint64_t v202 = v264;
      }
      else {
        unint64_t v202 = *(void *)(v198 + 576) + 16 * *(unsigned int *)(v198 + 592);
      }
      BOOL v203 = a2;
      if (v201 < *(_DWORD *)(v202 + 8))
      {
        uint64_t v204 = *v12;
        uint64_t v205 = v12;
        int v206 = v12;
        do
        {
          uint64_t v207 = *(v205 - 2);
          *uint64_t v205 = *(v205 - 1);
          uint64_t v208 = *a3;
          uint64_t v209 = (uint64_t *)(*a3 + 576);
          v263 = v204;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v209, &v263, &v264)) {
            unsigned int v210 = v264;
          }
          else {
            unsigned int v210 = *(void *)(v208 + 576) + 16 * *(unsigned int *)(v208 + 592);
          }
          uint64_t v211 = *(_DWORD *)(v210 + 8);
          v263 = v207;
          uint64_t v264 = 0;
          if (sub_1CD3C8538(v209, &v263, &v264)) {
            int v212 = v264;
          }
          else {
            int v212 = *(void *)(v208 + 576) + 16 * *(unsigned int *)(v208 + 592);
          }
          --v205;
        }
        while (v211 < *(_DWORD *)(v212 + 8));
        uint64_t v12 = v206;
        *uint64_t v205 = v204;
        BOOL v203 = a2;
      }
      unsigned int v109 = v12 + 1;
    }
    while (v12 + 1 != (uint64_t *)v203);
  }
  return result;
}

  int v11 = (__n128 *)(a2 - 72);
  uint64_t j = a1;
  while (1)
  {
    a1 = j;
    uint64_t v13 = a2 - j;
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(a2 - j) >> 3);
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return result;
        case 2:
          long long v137 = *(_DWORD *)(a2 - 48);
          uint32x4_t v138 = *(_DWORD *)(a2 - 44);
          unint64_t v139 = *(_DWORD *)(j + 24);
          unsigned int v140 = *(_DWORD *)(j + 28);
          if (v137 == v139 && v138 == v140)
          {
            int v301 = *(_DWORD *)(a2 - 40);
            uint64_t v300 = *(_DWORD *)(a2 - 36);
            int v303 = *(_DWORD *)(j + 32);
            uint64_t v302 = *(_DWORD *)(j + 36);
            if (v301 == v303 && v300 == v302)
            {
              if (*(_DWORD *)(a2 - 32) >= *(_DWORD *)(j + 40)) {
                return result;
              }
            }
            else if (v303 >= v301 && (v301 < v303 || v302 >= v300))
            {
              return result;
            }
          }
          else if (v137 >= v139 && (v139 < v137 || v138 >= v140))
          {
            return result;
          }
          uint64_t v387 = *(__n128 *)j;
          uint64_t v423 = *(void *)(j + 64);
          v405 = *(_OWORD *)(j + 32);
          uint64_t v414 = *(_OWORD *)(j + 48);
          uint64_t v396 = *(_OWORD *)(j + 16);
          unsigned int v330 = *(_OWORD *)(a2 - 40);
          v329 = *(_OWORD *)(a2 - 24);
          int v331 = *(_OWORD *)(a2 - 56);
          *(unsigned char *)(j + 64) = *(unsigned char *)(a2 - 8);
          *(_OWORD *)(j + 32) = v330;
          *(_OWORD *)(j + 48) = v329;
          *(_OWORD *)(j + 16) = v331;
          *(__n128 *)uint64_t j = *v11;
          *(unsigned char *)(a2 - 8) = v423;
          *(_OWORD *)(a2 - 40) = v405;
          *(_OWORD *)(a2 - 24) = v414;
          *(_OWORD *)(a2 - 56) = v396;
          uint64_t result = v387;
          *int v11 = v387;
          return result;
        case 3:
          result.n128_u64[0] = sub_1CC656414(j, j + 72, a2 - 72).n128_u64[0];
          return result;
        case 4:
          result.n128_u64[0] = sub_1CC656EAC(j, j + 72, j + 144, a2 - 72).n128_u64[0];
          return result;
        case 5:
          unint64_t v143 = (__n128 *)(j + 72);
          long long v144 = (__n128 *)(j + 144);
          unsigned int v145 = (__n128 *)(j + 216);
          result.n128_u64[0] = sub_1CC656EAC(j, j + 72, j + 144, j + 216).n128_u64[0];
          long long v147 = *(_DWORD *)(a2 - 48);
          long long v146 = *(_DWORD *)(a2 - 44);
          uint64_t v149 = *(_DWORD *)(j + 240);
          long long v148 = *(_DWORD *)(j + 244);
          if (v147 == v149 && v146 == v148)
          {
            v306 = *(_DWORD *)(a2 - 40);
            uint64_t v305 = *(_DWORD *)(a2 - 36);
            int v308 = *(_DWORD *)(j + 248);
            BOOL v307 = *(_DWORD *)(j + 252);
            if (v306 == v308 && v305 == v307)
            {
              if (*(_DWORD *)(a2 - 32) >= *(_DWORD *)(j + 256)) {
                return result;
              }
            }
            else if (v308 >= v306 && (v306 < v308 || v307 >= v305))
            {
              return result;
            }
          }
          else if (v147 >= v149 && (v149 < v147 || v146 >= v148))
          {
            return result;
          }
          uint64_t v406 = *(_OWORD *)(j + 248);
          uint64_t v415 = *(_OWORD *)(j + 264);
          uint64_t v424 = *(void *)(j + 280);
          uint64_t v388 = *v145;
          uint64_t v397 = *(__n128 *)(j + 232);
          v333 = *(_OWORD *)(a2 - 40);
          uint64_t v332 = *(_OWORD *)(a2 - 24);
          v334 = *(_OWORD *)(a2 - 56);
          *(unsigned char *)(j + 280) = *(unsigned char *)(a2 - 8);
          *(_OWORD *)(j + 248) = v333;
          *(_OWORD *)(j + 264) = v332;
          *(_OWORD *)(j + 232) = v334;
          *unsigned int v145 = *v11;
          *int v11 = v388;
          uint64_t result = v397;
          *(unsigned char *)(a2 - 8) = v424;
          *(_OWORD *)(a2 - 40) = v406;
          *(_OWORD *)(a2 - 24) = v415;
          *(__n128 *)(a2 - 56) = v397;
          uint64_t v336 = *(_DWORD *)(j + 240);
          uint64_t v335 = *(_DWORD *)(j + 244);
          uint64_t v338 = *(_DWORD *)(j + 168);
          uint64_t v337 = *(_DWORD *)(j + 172);
          if (v336 == v338 && v335 == v337)
          {
            int v340 = *(_DWORD *)(j + 248);
            uint64_t v339 = *(_DWORD *)(j + 252);
            int v342 = *(_DWORD *)(j + 176);
            uint64_t v341 = *(_DWORD *)(j + 180);
            if (v340 == v342 && v339 == v341)
            {
              if (*(_DWORD *)(j + 256) >= *(_DWORD *)(j + 184)) {
                return result;
              }
            }
            else if (v342 >= v340 && (v340 < v342 || v341 >= v339))
            {
              return result;
            }
          }
          else if (v336 >= v338 && (v338 < v336 || v335 >= v337))
          {
            return result;
          }
          uint64_t v407 = *(_OWORD *)(j + 176);
          int v416 = *(_OWORD *)(j + 192);
          unsigned int v425 = *(void *)(j + 208);
          uint64_t v389 = *v144;
          uint64_t v398 = *(_OWORD *)(j + 160);
          int v343 = *(_OWORD *)(j + 264);
          *(_OWORD *)(j + 176) = *(_OWORD *)(j + 248);
          *(_OWORD *)(j + 192) = v343;
          *(unsigned char *)(j + 208) = *(unsigned char *)(j + 280);
          uint64_t v344 = *(_OWORD *)(j + 232);
          uint64_t *v144 = *v145;
          *(_OWORD *)(j + 160) = v344;
          uint64_t result = v389;
          *(unsigned char *)(j + 280) = v425;
          *(_OWORD *)(j + 248) = v407;
          *(_OWORD *)(j + 264) = v416;
          *unsigned int v145 = v389;
          *(_OWORD *)(j + 232) = v398;
          v346 = *(_DWORD *)(j + 168);
          v345 = *(_DWORD *)(j + 172);
          uint64_t v348 = *(_DWORD *)(j + 96);
          uint64_t v347 = *(_DWORD *)(j + 100);
          if (v346 == v348 && v345 == v347)
          {
            v350 = *(_DWORD *)(j + 176);
            uint64_t v349 = *(_DWORD *)(j + 180);
            uint64_t v352 = *(_DWORD *)(j + 104);
            unint64_t v351 = *(_DWORD *)(j + 108);
            if (v350 == v352 && v349 == v351)
            {
              if (*(_DWORD *)(j + 184) >= *(_DWORD *)(j + 112)) {
                return result;
              }
            }
            else if (v352 >= v350 && (v350 < v352 || v351 >= v349))
            {
              return result;
            }
          }
          else if (v346 >= v348 && (v348 < v346 || v345 >= v347))
          {
            return result;
          }
          long long v408 = *(_OWORD *)(j + 104);
          int v417 = *(_OWORD *)(j + 120);
          int v426 = *(void *)(j + 136);
          uint64_t v390 = *v143;
          uint64_t v399 = *(_OWORD *)(j + 88);
          int v353 = *(_OWORD *)(j + 192);
          *(_OWORD *)(j + 104) = *(_OWORD *)(j + 176);
          *(_OWORD *)(j + 120) = v353;
          *(unsigned char *)(j + 136) = *(unsigned char *)(j + 208);
          int v354 = *(_OWORD *)(j + 160);
          *unint64_t v143 = *v144;
          *(_OWORD *)(j + 88) = v354;
          uint64_t result = v390;
          *(unsigned char *)(j + 208) = v426;
          *(_OWORD *)(j + 176) = v408;
          *(_OWORD *)(j + 192) = v417;
          uint64_t *v144 = v390;
          *(_OWORD *)(j + 160) = v399;
          int v356 = *(_DWORD *)(j + 96);
          uint64_t v355 = *(_DWORD *)(j + 100);
          int v358 = *(_DWORD *)(j + 24);
          int v357 = *(_DWORD *)(j + 28);
          if (v356 == v358 && v355 == v357)
          {
            int v360 = *(_DWORD *)(j + 104);
            uint64_t v359 = *(_DWORD *)(j + 108);
            unint64_t v362 = *(_DWORD *)(j + 32);
            uint64_t v361 = *(_DWORD *)(j + 36);
            if (v360 == v362 && v359 == v361)
            {
              if (*(_DWORD *)(j + 112) >= *(_DWORD *)(j + 40)) {
                return result;
              }
            }
            else if (v362 >= v360 && (v360 < v362 || v361 >= v359))
            {
              return result;
            }
          }
          else if (v356 >= v358 && (v358 < v356 || v355 >= v357))
          {
            return result;
          }
          BOOL v391 = *(__n128 *)j;
          int v427 = *(void *)(j + 64);
          int v409 = *(_OWORD *)(j + 32);
          int v418 = *(_OWORD *)(j + 48);
          unsigned int v400 = *(_OWORD *)(j + 16);
          *(unsigned char *)(j + 64) = *(unsigned char *)(j + 136);
          v363 = *(_OWORD *)(j + 120);
          *(_OWORD *)(j + 32) = *(_OWORD *)(j + 104);
          *(_OWORD *)(j + 48) = v363;
          v364 = *(_OWORD *)(j + 88);
          *(__n128 *)uint64_t j = *v143;
          *(_OWORD *)(j + 16) = v364;
          uint64_t result = v391;
          *(unsigned char *)(j + 136) = v427;
          *(_OWORD *)(j + 104) = v409;
          *(_OWORD *)(j + 120) = v418;
          *unint64_t v143 = v391;
          *(_OWORD *)(j + 88) = v400;
          return result;
        default:
          JUMPOUT(0);
      }
    }
    if (v13 <= 1727) {
      break;
    }
    if (!a3)
    {
      if (j == a2) {
        return result;
      }
      uint64_t v184 = (unint64_t)(v14 - 2) >> 1;
      unint64_t v185 = v184;
      while (1)
      {
        int v186 = v185;
        if (v184 < v185) {
          goto LABEL_473;
        }
        char v187 = (2 * v185) | 1;
        int v188 = j + 72 * v187;
        if (2 * v186 + 2 >= v14) {
          goto LABEL_401;
        }
        uint64_t v189 = *(_DWORD *)(v188 + 24);
        uint64_t v190 = *(_DWORD *)(v188 + 28);
        uint64_t v192 = *(_DWORD *)(v188 + 96);
        uint64_t v191 = *(_DWORD *)(v188 + 100);
        if (v189 != v192 || v190 != v191) {
          break;
        }
        int v195 = *(_DWORD *)(v188 + 32);
        uint64_t v196 = *(_DWORD *)(v188 + 36);
        int v198 = *(_DWORD *)(v188 + 104);
        uint64_t v197 = *(_DWORD *)(v188 + 108);
        if (v195 != v198 || v196 != v197)
        {
          if (v198 >= v195 && (v197 >= v196 || v195 < v198)) {
            goto LABEL_401;
          }
LABEL_400:
          v188 += 72;
          char v187 = 2 * v186 + 2;
          goto LABEL_401;
        }
        if (*(_DWORD *)(v188 + 40) < *(_DWORD *)(v188 + 112)) {
          goto LABEL_400;
        }
LABEL_401:
        unint64_t v201 = j + 72 * v186;
        unint64_t v202 = *(_DWORD *)(v188 + 24);
        BOOL v203 = *(_DWORD *)(v188 + 28);
        uint64_t v204 = *(_DWORD *)(v201 + 24);
        uint64_t v205 = *(_DWORD *)(v201 + 28);
        if (v202 == v204 && v203 == v205)
        {
          uint64_t v209 = *(_DWORD *)(v188 + 32);
          uint64_t v208 = *(_DWORD *)(v188 + 36);
          unsigned int v210 = *(_DWORD *)(v201 + 32);
          uint64_t v211 = *(_DWORD *)(v201 + 36);
          if (v209 == v210 && v208 == v211)
          {
            if (*(_DWORD *)(v188 + 40) < *(_DWORD *)(v201 + 40)) {
              goto LABEL_473;
            }
          }
          else
          {
            if (v210 < v209) {
              goto LABEL_473;
            }
            if (v209 >= v210 && v211 < v208) {
              goto LABEL_473;
            }
            uint64_t v208 = *(_DWORD *)(v201 + 36);
            uint64_t v209 = *(_DWORD *)(v201 + 32);
          }
        }
        else
        {
          if (v202 < v204) {
            goto LABEL_473;
          }
          if (v204 >= v202 && v203 < v205) {
            goto LABEL_473;
          }
          uint64_t v209 = *(_DWORD *)(v201 + 32);
          uint64_t v208 = *(_DWORD *)(v201 + 36);
        }
        uint64_t v372 = *(void *)(v201 + 16);
        v368 = *(_OWORD *)v201;
        int v214 = *(_DWORD *)(v201 + 40);
        *(_OWORD *)&v384[12] = *(_OWORD *)(v201 + 56);
        *(_OWORD *)uint64_t v384 = *(_OWORD *)(v201 + 44);
        v216 = *(_OWORD *)(v188 + 32);
        uint64_t v215 = *(_OWORD *)(v188 + 48);
        int v217 = *(_OWORD *)(v188 + 16);
        *(unsigned char *)(v201 + 64) = *(unsigned char *)(v188 + 64);
        *(_OWORD *)(v201 + 32) = v216;
        *(_OWORD *)(v201 + 48) = v215;
        *(_OWORD *)(v201 + 16) = v217;
        *(_OWORD *)unint64_t v201 = *(_OWORD *)v188;
        while (1)
        {
          if (v184 < v187) {
            goto LABEL_472;
          }
          long long v218 = v188;
          long long v219 = 2 * v187;
          char v187 = (2 * v187) | 1;
          int v188 = j + 72 * v187;
          v220 = v219 + 2;
          if (v220 < v14)
          {
            int v221 = *(_DWORD *)(v188 + 24);
            long long v222 = *(_DWORD *)(v188 + 28);
            uint64_t v223 = *(_DWORD *)(v188 + 96);
            int v224 = *(_DWORD *)(v188 + 100);
            if (v221 == v223 && v222 == v224)
            {
              uint64_t v227 = *(_DWORD *)(v188 + 32);
              int v228 = *(_DWORD *)(v188 + 36);
              int v229 = *(_DWORD *)(v188 + 104);
              int v230 = *(_DWORD *)(v188 + 108);
              if (v227 == v229 && v228 == v230)
              {
                if (*(_DWORD *)(v188 + 40) >= *(_DWORD *)(v188 + 112)) {
                  goto LABEL_449;
                }
LABEL_448:
                v188 += 72;
                char v187 = v220;
                goto LABEL_449;
              }
              if (v229 < v227) {
                goto LABEL_448;
              }
              if (v230 < v228 && v227 >= v229) {
                goto LABEL_448;
              }
            }
            else
            {
              if (v221 < v223) {
                goto LABEL_448;
              }
              if (v222 < v224 && v223 >= v221) {
                goto LABEL_448;
              }
            }
          }
LABEL_449:
          uint64_t v233 = *(_DWORD *)(v188 + 24);
          uint64_t v234 = *(_DWORD *)(v188 + 28);
          if (v233 == v204 && v234 == v205) {
            break;
          }
          if (v233 < v204) {
            goto LABEL_471;
          }
          if (v204 >= v233 && v234 < v205) {
            goto LABEL_471;
          }
LABEL_470:
          *(_OWORD *)long long v218 = *(_OWORD *)v188;
          unsigned int v241 = *(_OWORD *)(v188 + 16);
          uint64_t v242 = *(_OWORD *)(v188 + 32);
          uint64_t v243 = *(_OWORD *)(v188 + 48);
          *(unsigned char *)(v218 + 64) = *(unsigned char *)(v188 + 64);
          *(_OWORD *)(v218 + 32) = v242;
          *(_OWORD *)(v218 + 48) = v243;
          *(_OWORD *)(v218 + 16) = v241;
        }
        uint64_t v237 = *(_DWORD *)(v188 + 32);
        int v238 = *(_DWORD *)(v188 + 36);
        if (v237 == v209 && v238 == v208)
        {
          if (*(_DWORD *)(v188 + 40) < v214) {
            goto LABEL_471;
          }
          goto LABEL_470;
        }
        if (v209 >= v237 && (v237 < v209 || v208 >= v238)) {
          goto LABEL_470;
        }
LABEL_471:
        int v188 = v218;
LABEL_472:
        *(void *)(v188 + 16) = v372;
        *(_OWORD *)int v188 = v368;
        *(_DWORD *)(v188 + 24) = v204;
        *(_DWORD *)(v188 + 28) = v205;
        *(_DWORD *)(v188 + 32) = v209;
        *(_DWORD *)(v188 + 36) = v208;
        *(_DWORD *)(v188 + 40) = v214;
        *(_OWORD *)(v188 + 44) = *(_OWORD *)v384;
        *(void *)(v188 + 57) = *(void *)&v384[13];
LABEL_473:
        unint64_t v185 = v186 - 1;
        if (!v186)
        {
LABEL_474:
          BOOL v244 = 0;
          uint64_t v385 = *(__n128 *)j;
          v422 = *(void *)(j + 64);
          uint64_t v404 = *(_OWORD *)(j + 32);
          unsigned int v413 = *(_OWORD *)(j + 48);
          uint64_t v395 = *(__n128 *)(j + 16);
          uint64_t v245 = j;
          while (1)
          {
            uint64_t v246 = v245;
            v245 += 72 * v244 + 72;
            uint64_t v247 = 2 * v244;
            BOOL v244 = (2 * v244) | 1;
            BOOL v248 = v247 + 2;
            if (v248 < v14)
            {
              uint64_t v249 = *(_DWORD *)(v245 + 24);
              uint64_t v250 = *(_DWORD *)(v245 + 28);
              uint64_t v251 = *(_DWORD *)(v245 + 96);
              BOOL v252 = *(_DWORD *)(v245 + 100);
              if (v249 != v251 || v250 != v252)
              {
                if (v249 >= v251 && (v250 >= v252 || v251 < v249)) {
                  goto LABEL_498;
                }
                goto LABEL_497;
              }
              v255 = *(_DWORD *)(v245 + 32);
              uint64_t v256 = *(_DWORD *)(v245 + 36);
              uint64_t v257 = *(_DWORD *)(v245 + 104);
              int v258 = *(_DWORD *)(v245 + 108);
              if (v255 != v257 || v256 != v258)
              {
                if (v257 >= v255 && (v258 >= v256 || v255 < v257)) {
                  goto LABEL_498;
                }
LABEL_497:
                v245 += 72;
                BOOL v244 = v248;
                goto LABEL_498;
              }
              if (*(_DWORD *)(v245 + 40) < *(_DWORD *)(v245 + 112)) {
                goto LABEL_497;
              }
            }
LABEL_498:
            *(_OWORD *)uint64_t v246 = *(_OWORD *)v245;
            uint64_t v261 = *(_OWORD *)(v245 + 16);
            v262 = *(_OWORD *)(v245 + 32);
            v263 = *(_OWORD *)(v245 + 48);
            *(unsigned char *)(v246 + 64) = *(unsigned char *)(v245 + 64);
            *(_OWORD *)(v246 + 32) = v262;
            *(_OWORD *)(v246 + 48) = v263;
            *(_OWORD *)(v246 + 16) = v261;
            if (v244 > (uint64_t)((unint64_t)(v14 - 2) >> 1))
            {
              a2 -= 72;
              if (v245 == a2)
              {
                *(__n128 *)uint64_t v245 = v385;
                uint64_t result = v395;
                *(unsigned char *)(v245 + 64) = v422;
                *(_OWORD *)(v245 + 32) = v404;
                *(_OWORD *)(v245 + 48) = v413;
                *(__n128 *)(v245 + 16) = v395;
                goto LABEL_553;
              }
              *(_OWORD *)uint64_t v245 = *(_OWORD *)a2;
              uint64_t v264 = *(_OWORD *)(a2 + 16);
              uint64_t v265 = *(_OWORD *)(a2 + 32);
              v266 = *(_OWORD *)(a2 + 48);
              *(unsigned char *)(v245 + 64) = *(unsigned char *)(a2 + 64);
              *(_OWORD *)(v245 + 32) = v265;
              *(_OWORD *)(v245 + 48) = v266;
              *(_OWORD *)(v245 + 16) = v264;
              *(unsigned char *)(a2 + 64) = v422;
              *(_OWORD *)(a2 + 32) = v404;
              *(_OWORD *)(a2 + 48) = v413;
              *(__n128 *)(a2 + 16) = v395;
              uint64_t result = v385;
              *(__n128 *)a2 = v385;
              uint64_t v267 = v245 - j + 72;
              if (v267 >= 73)
              {
                int v268 = v267 / 0x48uLL - 2;
                v269 = v268 >> 1;
                uint64_t v270 = j + 72 * (v268 >> 1);
                unsigned int v272 = *(_DWORD *)(v270 + 24);
                v271 = *(_DWORD *)(v270 + 28);
                result.n128_u64[0] = *(void *)(v245 + 24);
                if (v272 == result.n128_u32[0] && v271 == result.n128_u32[1])
                {
                  int v276 = *(_DWORD *)(v270 + 32);
                  uint64_t v275 = *(_DWORD *)(v270 + 36);
                  BOOL v277 = *(_DWORD *)(v245 + 32);
                  int v278 = *(_DWORD *)(v245 + 36);
                  if (v276 == v277 && v275 == v278)
                  {
                    if (*(_DWORD *)(v270 + 40) >= *(_DWORD *)(v245 + 40)) {
                      goto LABEL_553;
                    }
                  }
                  else if (v277 >= v276 && (v276 < v277 || v278 >= v275))
                  {
                    goto LABEL_553;
                  }
                }
                else if (v272 >= result.n128_u32[0] && (result.n128_u32[0] < v272 || v271 >= result.n128_u32[1]))
                {
                  goto LABEL_553;
                }
                int v379 = *(void *)(v245 + 16);
                int v376 = *(_OWORD *)v245;
                int v281 = *(void *)(v245 + 32);
                int v282 = *(_DWORD *)(v245 + 40);
                *(_OWORD *)&v369[12] = *(_OWORD *)(v245 + 56);
                *(_OWORD *)uint64_t v369 = *(_OWORD *)(v245 + 44);
                int v284 = *(_OWORD *)(v270 + 32);
                int v283 = *(_OWORD *)(v270 + 48);
                int v285 = *(_OWORD *)(v270 + 16);
                *(unsigned char *)(v245 + 64) = *(unsigned char *)(v270 + 64);
                *(_OWORD *)(v245 + 32) = v284;
                *(_OWORD *)(v245 + 48) = v283;
                *(_OWORD *)uint64_t v245 = *(_OWORD *)v270;
                *(_OWORD *)(v245 + 16) = v285;
                if (v268 < 2) {
                  goto LABEL_552;
                }
                while (1)
                {
                  BOOL v286 = v270;
                  int v287 = v269 - 1;
                  v269 = (v269 - 1) >> 1;
                  uint64_t v270 = j + 72 * v269;
                  BOOL v288 = *(_DWORD *)(v270 + 24);
                  int v289 = *(_DWORD *)(v270 + 28);
                  if (v288 == result.n128_u32[0] && v289 == result.n128_u32[1])
                  {
                    int v292 = *(_DWORD *)(v270 + 32);
                    int v293 = *(_DWORD *)(v270 + 36);
                    if (v292 == v281 && v293 == HIDWORD(v281))
                    {
                      if (*(_DWORD *)(v270 + 40) >= v282) {
                        goto LABEL_551;
                      }
                    }
                    else if (v281 >= v292 && (v292 < v281 || HIDWORD(v281) >= v293))
                    {
LABEL_551:
                      uint64_t v270 = v286;
LABEL_552:
                      *(void *)(v270 + 16) = v379;
                      *(_OWORD *)uint64_t v270 = v376;
                      result.n128_u64[1] = v281;
                      *(__n128 *)(v270 + 24) = result;
                      *(_DWORD *)(v270 + 40) = v282;
                      uint64_t result = *(__n128 *)v369;
                      *(_OWORD *)(v270 + 44) = *(_OWORD *)v369;
                      *(void *)(v270 + 57) = *(void *)&v369[13];
                      break;
                    }
                  }
                  else if (v288 >= result.n128_u32[0] && (result.n128_u32[0] < v288 || v289 >= result.n128_u32[1]))
                  {
                    goto LABEL_551;
                  }
                  *(_OWORD *)BOOL v286 = *(_OWORD *)v270;
                  uint64_t v296 = *(_OWORD *)(v270 + 16);
                  v297 = *(_OWORD *)(v270 + 32);
                  uint64_t v298 = *(_OWORD *)(v270 + 48);
                  *(unsigned char *)(v286 + 64) = *(unsigned char *)(v270 + 64);
                  *(_OWORD *)(v286 + 32) = v297;
                  *(_OWORD *)(v286 + 48) = v298;
                  *(_OWORD *)(v286 + 16) = v296;
                  if (v287 <= 1) {
                    goto LABEL_552;
                  }
                }
              }
LABEL_553:
              if (v14-- <= 2) {
                return result;
              }
              goto LABEL_474;
            }
          }
        }
      }
      if (v189 >= v192 && (v190 >= v191 || v192 < v189)) {
        goto LABEL_401;
      }
      goto LABEL_400;
    }
    uint64_t v15 = (unint64_t)v14 >> 1;
    long long v16 = j + 72 * ((unint64_t)v14 >> 1);
    if ((unint64_t)v13 >= 0x2401)
    {
      sub_1CC656414(a1, a1 + 72 * ((unint64_t)v14 >> 1), a2 - 72);
      unsigned int v17 = 9 * v15;
      unsigned int v18 = a1 + 72 * v15 - 72;
      sub_1CC656414(a1 + 72, v18, a2 - 144);
      uint64_t v19 = a1 + 72 + 8 * v17;
      sub_1CC656414(a1 + 144, v19, a2 - 216);
      sub_1CC656414(v18, v16, v19);
      int v380 = *(_OWORD *)a1;
      uint64_t v419 = *(void *)(a1 + 64);
      uint64_t v401 = *(_OWORD *)(a1 + 32);
      uint64_t v410 = *(_OWORD *)(a1 + 48);
      uint64_t v392 = *(_OWORD *)(a1 + 16);
      unsigned int v21 = *(_OWORD *)(v16 + 32);
      unsigned int v20 = *(_OWORD *)(v16 + 48);
      unint64_t v22 = *(_OWORD *)(v16 + 16);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(v16 + 64);
      *(_OWORD *)(a1 + 32) = v21;
      *(_OWORD *)(a1 + 48) = v20;
      *(_OWORD *)(a1 + 16) = v22;
      *(_OWORD *)a1 = *(_OWORD *)v16;
      *(unsigned char *)(v16 + 64) = v419;
      *(_OWORD *)(v16 + 32) = v401;
      *(_OWORD *)(v16 + 48) = v410;
      *(_OWORD *)(v16 + 16) = v392;
      *(_OWORD *)long long v16 = v380;
    }
    else
    {
      sub_1CC656414(a1 + 72 * ((unint64_t)v14 >> 1), a1, a2 - 72);
    }
    --a3;
    if (a4)
    {
      uint64_t v24 = *(_DWORD *)(a1 + 24);
      unsigned int v23 = *(_DWORD *)(a1 + 28);
LABEL_24:
      unsigned int v31 = 0;
      uint64_t v377 = *(void *)(a1 + 16);
      uint64_t v374 = *(_OWORD *)a1;
      uint64_t v32 = *(_DWORD *)(a1 + 32);
      unsigned int v33 = *(_DWORD *)(a1 + 36);
      int v34 = *(_DWORD *)(a1 + 40);
      *(_OWORD *)v365 = *(_OWORD *)(a1 + 44);
      *(_OWORD *)&v365[12] = *(_OWORD *)(a1 + 56);
      while (1)
      {
        long long v35 = a1 + v31;
        BOOL v36 = *(_DWORD *)(a1 + v31 + 96);
        int v37 = *(_DWORD *)(a1 + v31 + 100);
        if (v36 == v24 && v37 == v23) {
          break;
        }
        if (v36 >= v24 && (v24 < v36 || v37 >= v23)) {
          goto LABEL_49;
        }
LABEL_48:
        v31 += 72;
      }
      unsigned int v40 = *(_DWORD *)(v35 + 104);
      unsigned int v41 = *(_DWORD *)(v35 + 108);
      if (v40 == v32 && v41 == v33)
      {
        if (*(_DWORD *)(a1 + v31 + 112) >= v34) {
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      if (v32 < v40) {
        goto LABEL_48;
      }
      if (v40 >= v32 && v33 < v41) {
        goto LABEL_48;
      }
LABEL_49:
      int v44 = a1 + v31 + 72;
      unint64_t i = (_DWORD *)(a2 - 72);
      if (v31)
      {
        while (1)
        {
          int v46 = i[6];
          unsigned int v47 = i[7];
          if (v46 == v24 && v47 == v23)
          {
            int v50 = i[8];
            unsigned int v51 = i[9];
            if (v50 == v32 && v51 == v33)
            {
              if (i[10] < v34) {
                goto LABEL_101;
              }
            }
            else
            {
              if (v32 < v50) {
                goto LABEL_101;
              }
              if (v50 >= v32 && v33 < v51) {
                goto LABEL_101;
              }
            }
          }
          else
          {
            if (v46 < v24) {
              goto LABEL_101;
            }
            if (v24 >= v46 && v47 < v23) {
              goto LABEL_101;
            }
          }
          i -= 18;
        }
      }
      unint64_t i = (_DWORD *)a2;
      if (v44 < a2)
      {
        for (unint64_t i = (_DWORD *)(a2 - 72); ; i -= 18)
        {
          long long v54 = i[6];
          unsigned int v55 = i[7];
          if (v54 != v24 || v55 != v23) {
            break;
          }
          unsigned int v58 = i[8];
          uint64_t v59 = i[9];
          if (v58 != v32 || v59 != v33)
          {
            if (v32 < v58) {
              goto LABEL_101;
            }
            long long v57 = v33 < v59 && v58 >= v32;
LABEL_90:
            if (v57 || v44 >= (unint64_t)i) {
              goto LABEL_101;
            }
            continue;
          }
          if (i[10] < v34 || v44 >= (unint64_t)i) {
            goto LABEL_101;
          }
        }
        if (v54 < v24) {
          goto LABEL_101;
        }
        long long v57 = v55 < v23 && v24 >= v54;
        goto LABEL_90;
      }
LABEL_101:
      uint64_t j = v44;
      if (v44 < (unint64_t)i)
      {
        long long v63 = i;
        do
        {
          uint64_t v381 = *(__n128 *)j;
          v420 = *(void *)(j + 64);
          uint64_t v402 = *(_OWORD *)(j + 32);
          uint64_t v411 = *(_OWORD *)(j + 48);
          int v393 = *(_OWORD *)(j + 16);
          unsigned int v65 = *((_OWORD *)v63 + 2);
          long long v64 = *((_OWORD *)v63 + 3);
          unsigned int v66 = *((_OWORD *)v63 + 1);
          *(unsigned char *)(j + 64) = *((unsigned char *)v63 + 64);
          *(_OWORD *)(j + 32) = v65;
          *(_OWORD *)(j + 48) = v64;
          *(_OWORD *)(j + 16) = v66;
          *(_OWORD *)uint64_t j = *(_OWORD *)v63;
          *((unsigned char *)v63 + 64) = v420;
          *((_OWORD *)v63 + 2) = v402;
          *((_OWORD *)v63 + 3) = v411;
          *((_OWORD *)v63 + 1) = v393;
          *(__n128 *)long long v63 = v381;
          do
          {
            while (1)
            {
              while (1)
              {
                j += 72;
                long long v67 = *(_DWORD *)(j + 24);
                long long v68 = *(_DWORD *)(j + 28);
                if (v67 == v24 && v68 == v23) {
                  break;
                }
                if (v67 >= v24 && (v24 < v67 || v68 >= v23)) {
                  goto LABEL_139;
                }
              }
              unsigned int v71 = *(_DWORD *)(j + 32);
              long long v72 = *(_DWORD *)(j + 36);
              if (v71 != v32 || v72 != v33) {
                break;
              }
              if (*(_DWORD *)(j + 40) >= v34) {
                goto LABEL_139;
              }
            }
          }
          while (v32 < v71 || v71 >= v32 && v33 < v72);
          do
          {
            while (1)
            {
LABEL_139:
              while (1)
              {
                v63 -= 18;
                BOOL v79 = v63[6];
                BOOL v80 = v63[7];
                if (v79 == v24 && v80 == v23) {
                  break;
                }
                if (v79 >= v24 && (v24 < v79 || v80 >= v23)) {
                  continue;
                }
                goto LABEL_148;
              }
              unsigned int v75 = v63[8];
              unsigned int v76 = v63[9];
              if (v75 != v32 || v76 != v33) {
                break;
              }
              if (v63[10] < v34) {
                goto LABEL_148;
              }
            }
            if (v32 < v75) {
              break;
            }
          }
          while (v75 < v32 || v33 >= v76);
LABEL_148:
          ;
        }
        while (j < (unint64_t)v63);
      }
      unint64_t v83 = (_OWORD *)(j - 72);
      if (j - 72 != a1)
      {
        *(_OWORD *)a1 = *v83;
        unsigned int v84 = *(_OWORD *)(j - 56);
        unsigned int v85 = *(_OWORD *)(j - 40);
        unsigned int v86 = *(_OWORD *)(j - 24);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(j - 8);
        *(_OWORD *)(a1 + 32) = v85;
        *(_OWORD *)(a1 + 48) = v86;
        *(_OWORD *)(a1 + 16) = v84;
      }
      *(void *)(j - 56) = v377;
      _OWORD *v83 = v374;
      *(_DWORD *)(j - 48) = v24;
      *(_DWORD *)(j - 44) = v23;
      *(_DWORD *)(j - 40) = v32;
      *(_DWORD *)(j - 36) = v33;
      *(_DWORD *)(j - 32) = v34;
      *(void *)(j - 15) = *(void *)&v365[13];
      *(_OWORD *)(j - 28) = *(_OWORD *)v365;
      if (v44 < (unint64_t)i)
      {
LABEL_154:
        sub_1CC654D0C(a1, j - 72, a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        long long v87 = sub_1CC6567CC(a1, j - 72);
        if (sub_1CC6567CC(j, a2))
        {
          a2 = j - 72;
          if (v87) {
            return result;
          }
          goto LABEL_1;
        }
        if (!v87) {
          goto LABEL_154;
        }
      }
    }
    else
    {
      uint64_t v24 = *(_DWORD *)(a1 - 48);
      unsigned int v23 = *(_DWORD *)(a1 - 44);
      int v25 = *(_DWORD *)(a1 + 24);
      unsigned int v26 = *(_DWORD *)(a1 + 28);
      if (v24 == v25 && v23 == v26)
      {
        unint64_t v28 = *(_DWORD *)(a1 - 40);
        unsigned int v27 = *(_DWORD *)(a1 - 36);
        long long v29 = *(_DWORD *)(a1 + 32);
        unsigned int v30 = *(_DWORD *)(a1 + 36);
        if (v28 == v29 && v27 == v30)
        {
          if (*(_DWORD *)(a1 - 32) < *(_DWORD *)(a1 + 40)) {
            goto LABEL_24;
          }
          unsigned int v30 = *(_DWORD *)(a1 - 36);
          long long v29 = *(_DWORD *)(a1 - 40);
        }
        else if (v29 < v28 || v28 >= v29 && v30 < v27)
        {
          goto LABEL_24;
        }
      }
      else
      {
        if (v24 < v25 || v25 >= v24 && v23 < v26)
        {
          unsigned int v23 = *(_DWORD *)(a1 + 28);
          uint64_t v24 = *(_DWORD *)(a1 + 24);
          goto LABEL_24;
        }
        long long v29 = *(_DWORD *)(a1 + 32);
        unsigned int v30 = *(_DWORD *)(a1 + 36);
      }
      int v378 = *(void *)(a1 + 16);
      uint64_t v375 = *(_OWORD *)a1;
      unint64_t v88 = *(_DWORD *)(a1 + 40);
      *(_OWORD *)v366 = *(_OWORD *)(a1 + 44);
      *(_OWORD *)&v366[12] = *(_OWORD *)(a1 + 56);
      BOOL v90 = *(_DWORD *)(a2 - 48);
      uint64_t v89 = *(_DWORD *)(a2 - 44);
      if (v25 == v90 && v26 == v89)
      {
        long long v92 = *(_DWORD *)(a2 - 40);
        unsigned int v91 = *(_DWORD *)(a2 - 36);
        if (v29 == v92 && v30 == v91)
        {
          if (v88 < *(_DWORD *)(a2 - 32)) {
            goto LABEL_169;
          }
        }
        else if (v92 < v29 || v29 >= v92 && v91 < v30)
        {
          goto LABEL_169;
        }
      }
      else if (v25 < v90 || v90 >= v25 && v26 < v89)
      {
LABEL_169:
        for (uint64_t j = a1 + 72; ; j += 72)
        {
          int64_t v93 = *(_DWORD *)(j + 24);
          int64_t v94 = *(_DWORD *)(j + 28);
          if (v25 == v93 && v26 == v94)
          {
            unint64_t v97 = *(_DWORD *)(j + 32);
            unsigned int v98 = *(_DWORD *)(j + 36);
            if (v29 == v97 && v30 == v98)
            {
              if (v88 < *(_DWORD *)(j + 40)) {
                goto LABEL_216;
              }
            }
            else
            {
              if (v97 < v29) {
                goto LABEL_216;
              }
              if (v29 >= v97 && v98 < v30) {
                goto LABEL_216;
              }
            }
          }
          else
          {
            if (v25 < v93) {
              goto LABEL_216;
            }
            if (v93 >= v25 && v26 < v94) {
              goto LABEL_216;
            }
          }
        }
      }
      for (uint64_t j = a1 + 72; j < a2; j += 72)
      {
        unsigned int v101 = *(_DWORD *)(j + 24);
        unsigned int v102 = *(_DWORD *)(j + 28);
        if (v25 == v101 && v26 == v102)
        {
          long long v105 = *(_DWORD *)(j + 32);
          unint64_t v106 = *(_DWORD *)(j + 36);
          if (v29 == v105 && v30 == v106)
          {
            if (v88 < *(_DWORD *)(j + 40)) {
              break;
            }
          }
          else
          {
            if (v105 < v29) {
              break;
            }
            if (v29 >= v105 && v106 < v30) {
              break;
            }
          }
        }
        else
        {
          if (v25 < v101) {
            break;
          }
          if (v101 >= v25 && v26 < v102) {
            break;
          }
        }
      }
LABEL_216:
      unsigned int v109 = (unsigned int *)a2;
      if (j >= a2) {
        goto LABEL_280;
      }
      unsigned int v110 = (unsigned int *)(a2 - 40);
      while (v25 == v90 && v26 == v89)
      {
        unsigned int v112 = *v110;
        BOOL v111 = v110[1];
        if (v29 == *v110 && v30 == v111)
        {
          if (v88 >= (int)v110[2]) {
            goto LABEL_234;
          }
        }
        else if (v112 >= v29 && (v29 < v112 || v111 >= v30))
        {
          goto LABEL_234;
        }
LABEL_233:
        BOOL v90 = *(v110 - 20);
        uint64_t v89 = *(v110 - 19);
        v110 -= 18;
      }
      if (v25 < v90 || v90 >= v25 && v26 < v89) {
        goto LABEL_233;
      }
LABEL_234:
      unsigned int v109 = v110 - 8;
LABEL_280:
      while (j < (unint64_t)v109)
      {
        uint64_t v382 = *(__n128 *)j;
        uint64_t v421 = *(void *)(j + 64);
        unint64_t v403 = *(_OWORD *)(j + 32);
        uint64_t v412 = *(_OWORD *)(j + 48);
        uint64_t v394 = *(_OWORD *)(j + 16);
        unint64_t v115 = *((_OWORD *)v109 + 2);
        uint64_t v114 = *((_OWORD *)v109 + 3);
        uint32x4_t v116 = *((_OWORD *)v109 + 1);
        *(unsigned char *)(j + 64) = *((unsigned char *)v109 + 64);
        *(_OWORD *)(j + 32) = v115;
        *(_OWORD *)(j + 48) = v114;
        *(_OWORD *)(j + 16) = v116;
        *(_OWORD *)uint64_t j = *(_OWORD *)v109;
        *((unsigned char *)v109 + 64) = v421;
        *((_OWORD *)v109 + 2) = v403;
        *((_OWORD *)v109 + 3) = v412;
        *((_OWORD *)v109 + 1) = v394;
        *(__n128 *)unsigned int v109 = v382;
        do
        {
          while (1)
          {
            while (1)
            {
              j += 72;
              uint64_t v117 = *(_DWORD *)(j + 24);
              uint64_t v118 = *(_DWORD *)(j + 28);
              if (v25 == v117 && v26 == v118) {
                break;
              }
              if (v25 >= v117 && (v117 < v25 || v26 >= v118)) {
                continue;
              }
              goto LABEL_270;
            }
            unsigned int v121 = *(_DWORD *)(j + 32);
            BOOL v122 = *(_DWORD *)(j + 36);
            if (v29 != v121 || v30 != v122) {
              break;
            }
            if (v88 < *(_DWORD *)(j + 40)) {
              goto LABEL_270;
            }
          }
          if (v121 < v29) {
            break;
          }
        }
        while (v29 < v121 || v122 >= v30);
        do
        {
          while (1)
          {
LABEL_270:
            while (1)
            {
              v109 -= 18;
              unsigned int v129 = v109[6];
              unsigned int v130 = v109[7];
              if (v25 == v129 && v26 == v130) {
                break;
              }
              if (v25 >= v129 && (v129 < v25 || v26 >= v130)) {
                goto LABEL_280;
              }
            }
            uint64_t v125 = v109[8];
            unint64_t v126 = v109[9];
            if (v29 != v125 || v30 != v126) {
              break;
            }
            if (v88 >= (int)v109[10]) {
              goto LABEL_280;
            }
          }
        }
        while (v125 < v29 || v29 >= v125 && v126 < v30);
      }
      long long v133 = (_OWORD *)(j - 72);
      BOOL v5 = j - 72 >= a1;
      int v6 = j - 72 == a1;
      if (j - 72 != a1)
      {
        *(_OWORD *)a1 = *v133;
        unint64_t v134 = *(_OWORD *)(j - 56);
        unint64_t v135 = *(_OWORD *)(j - 40);
        unsigned int v136 = *(_OWORD *)(j - 24);
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(j - 8);
        *(_OWORD *)(a1 + 32) = v135;
        *(_OWORD *)(a1 + 48) = v136;
        *(_OWORD *)(a1 + 16) = v134;
      }
      a4 = 0;
      *(void *)(j - 56) = v378;
      *long long v133 = v375;
      *(_DWORD *)(j - 48) = v25;
      *(_DWORD *)(j - 44) = v26;
      *(_DWORD *)(j - 40) = v29;
      *(_DWORD *)(j - 36) = v30;
      *(_DWORD *)(j - 32) = v88;
      uint64_t result = *(__n128 *)v366;
      *(void *)(j - 15) = *(void *)&v366[13];
      *(_OWORD *)(j - 28) = *(_OWORD *)v366;
    }
  }
  uint64_t v151 = j + 72;
  long long v153 = j == a2 || v151 == a2;
  if ((a4 & 1) == 0)
  {
    if (v153) {
      return result;
    }
    while (1)
    {
      uint64_t v309 = a1;
      a1 = v151;
      result.n128_u64[0] = *(void *)(v309 + 96);
      BOOL v310 = *(_DWORD *)(v309 + 24);
      uint64_t v311 = *(_DWORD *)(v309 + 28);
      if (result.n128_u32[0] == v310 && result.n128_u32[1] == v311)
      {
        int v314 = *(_DWORD *)(v309 + 104);
        uint64_t v315 = *(_DWORD *)(v309 + 108);
        int v316 = *(_DWORD *)(v309 + 32);
        v317 = *(_DWORD *)(v309 + 36);
        if (v314 == v316 && v315 == v317)
        {
          if (*(_DWORD *)(v309 + 112) >= *(_DWORD *)(v309 + 40)) {
            goto LABEL_605;
          }
        }
        else if (v316 >= v314 && (v314 < v316 || v317 >= v315))
        {
          goto LABEL_605;
        }
      }
      else if (result.n128_u32[0] >= v310 && (v310 < result.n128_u32[0] || result.n128_u32[1] >= v311))
      {
        goto LABEL_605;
      }
      v373 = *(void *)(a1 + 16);
      uint64_t v370 = *(_OWORD *)a1;
      uint64_t v320 = *(void *)(v309 + 104);
      int v321 = *(_DWORD *)(v309 + 112);
      *(_OWORD *)uint64_t v386 = *(_OWORD *)(v309 + 116);
      *(_OWORD *)&v386[12] = *(_OWORD *)(v309 + 128);
      do
      {
        while (1)
        {
          int v322 = v309;
          uint64_t v323 = *(_OWORD *)v309;
          *(_OWORD *)(v309 + 88) = *(_OWORD *)(v309 + 16);
          v324 = *(_OWORD *)(v309 + 48);
          *(_OWORD *)(v309 + 104) = *(_OWORD *)(v309 + 32);
          *(_OWORD *)(v309 + 120) = v324;
          *(unsigned char *)(v309 + 136) = *(unsigned char *)(v309 + 64);
          *(_OWORD *)(v309 + 72) = v323;
          v309 -= 72;
          __int16 v326 = *(_DWORD *)(v322 - 48);
          uint64_t v325 = *(_DWORD *)(v322 - 44);
          if (result.n128_u64[0] != __PAIR64__(v325, v326)) {
            break;
          }
          uint64_t v328 = *(_DWORD *)(v322 - 40);
          uint64_t v327 = *(_DWORD *)(v322 - 36);
          if (v320 == __PAIR64__(v327, v328))
          {
            if (v321 >= *(_DWORD *)(v322 - 32)) {
              goto LABEL_604;
            }
          }
          else if (v328 >= v320 && (v320 < v328 || v327 >= HIDWORD(v320)))
          {
            goto LABEL_604;
          }
        }
      }
      while (result.n128_u32[0] < v326 || v326 >= result.n128_u32[0] && result.n128_u32[1] < v325);
LABEL_604:
      *(void *)(v322 + 16) = v373;
      *(_OWORD *)int v322 = v370;
      result.n128_u64[1] = v320;
      *(__n128 *)(v322 + 24) = result;
      *(_DWORD *)(v322 + 40) = v321;
      uint64_t result = *(__n128 *)v386;
      *(_OWORD *)(v322 + 44) = *(_OWORD *)v386;
      *(void *)(v322 + 57) = *(void *)&v386[13];
LABEL_605:
      uint64_t v151 = a1 + 72;
      if (a1 + 72 == a2) {
        return result;
      }
    }
  }
  if (v153) {
    return result;
  }
  long long v154 = 0;
  long long v155 = j;
  while (2)
  {
    long long v156 = v155;
    long long v155 = v151;
    result.n128_u64[0] = *(void *)(v156 + 96);
    long long v157 = *(_DWORD *)(v156 + 24);
    long long v158 = *(_DWORD *)(v156 + 28);
    if (result.n128_u32[0] == v157 && result.n128_u32[1] == v158)
    {
      long long v161 = *(_DWORD *)(v156 + 104);
      long long v162 = *(_DWORD *)(v156 + 108);
      long long v163 = *(_DWORD *)(v156 + 32);
      long long v164 = *(_DWORD *)(v156 + 36);
      if (v161 == v163 && v162 == v164)
      {
        if (*(_DWORD *)(v156 + 112) >= *(_DWORD *)(v156 + 40)) {
          goto LABEL_373;
        }
      }
      else if (v163 >= v161 && (v161 < v163 || v164 >= v162))
      {
        goto LABEL_373;
      }
    }
    else if (result.n128_u32[0] >= v157 && (v157 < result.n128_u32[0] || result.n128_u32[1] >= v158))
    {
      goto LABEL_373;
    }
    uint64_t v371 = *(void *)(v151 + 16);
    v367 = *(_OWORD *)v151;
    uint64_t v167 = *(void *)(v156 + 104);
    uint64_t v168 = *(_DWORD *)(v156 + 112);
    *(_OWORD *)&v383[12] = *(_OWORD *)(v156 + 128);
    *(_OWORD *)unint64_t v383 = *(_OWORD *)(v156 + 116);
    long long v169 = *(_OWORD *)(v156 + 48);
    *(_OWORD *)(v151 + 32) = *(_OWORD *)(v156 + 32);
    *(_OWORD *)(v151 + 48) = v169;
    *(unsigned char *)(v151 + 64) = *(unsigned char *)(v156 + 64);
    uint64_t v170 = *(_OWORD *)(v156 + 16);
    *(_OWORD *)uint64_t v151 = *(_OWORD *)v156;
    *(_OWORD *)(v151 + 16) = v170;
    uint64_t v171 = j;
    if (v156 == j) {
      goto LABEL_372;
    }
    uint64_t v172 = v154;
    while (2)
    {
      uint64_t v173 = j + v172;
      BOOL v174 = *(_DWORD *)(j + v172 - 48);
      unsigned int v175 = *(_DWORD *)(j + v172 - 44);
      if (result.n128_u32[0] == v174 && result.n128_u32[1] == v175)
      {
        int8x8_t v178 = *(_DWORD *)(v173 - 40);
        unsigned int v179 = *(_DWORD *)(v173 - 36);
        if (v167 == v178 && HIDWORD(v167) == v179)
        {
          if (v168 >= *(_DWORD *)(j + v172 - 32)) {
            break;
          }
        }
        else if (v178 >= v167 && (v167 < v178 || v179 >= HIDWORD(v167)))
        {
          uint64_t v171 = j + v172;
          goto LABEL_372;
        }
        goto LABEL_369;
      }
      if (result.n128_u32[0] < v174
        || (v174 >= result.n128_u32[0] ? (uint64_t v177 = result.n128_u32[1] >= v175) : (uint64_t v177 = 1), !v177))
      {
LABEL_369:
        v156 -= 72;
        int v182 = *(_OWORD *)(v173 - 24);
        *(_OWORD *)(v173 + 32) = *(_OWORD *)(v173 - 40);
        *(_OWORD *)(v173 + 48) = v182;
        *(unsigned char *)(v173 + 64) = *(unsigned char *)(v173 - 8);
        unsigned int v183 = *(_OWORD *)(v173 - 56);
        *(_OWORD *)uint64_t v173 = *(_OWORD *)(v173 - 72);
        *(_OWORD *)(v173 + 16) = v183;
        v172 -= 72;
        if (!v172)
        {
          uint64_t v171 = j;
          goto LABEL_372;
        }
        continue;
      }
      break;
    }
    uint64_t v171 = v156;
LABEL_372:
    *(void *)(v171 + 16) = v371;
    *(_OWORD *)uint64_t v171 = v367;
    result.n128_u64[1] = v167;
    *(__n128 *)(v171 + 24) = result;
    *(_DWORD *)(v171 + 40) = v168;
    uint64_t result = *(__n128 *)v383;
    *(_OWORD *)(v171 + 44) = *(_OWORD *)v383;
    *(void *)(v171 + 57) = *(void *)&v383[13];
LABEL_373:
    v151 += 72;
    v154 += 72;
    if (v155 + 72 != a2) {
      continue;
    }
    return result;
  }
}

  int v11 = a2 - 2;
  unint64_t i = a1;
  while (1)
  {
    a1 = i;
    uint64_t v13 = (uint64_t)a2 - i;
    unint64_t v14 = (uint64_t)((uint64_t)a2 - i) >> 5;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0:
        case 1:
          return result;
        case 2:
          if (a2[-1].n128_u8[8]) {
            long long v57 = *(unsigned char *)(i + 24) == 0;
          }
          else {
            long long v57 = 1;
          }
          if (v57)
          {
            if (!*(unsigned char *)(i + 24)) {
              return result;
            }
          }
          else if (v11->n128_u64[0] >= *(void *)i)
          {
            return result;
          }
          long long v146 = *(__n128 *)i;
          long long v153 = *(__n128 *)(i + 16);
          uint64_t v118 = a2[-1];
          *(__n128 *)unint64_t i = *v11;
          *(__n128 *)(i + 16) = v118;
          uint64_t result = v146;
          *int v11 = v146;
          a2[-1] = v153;
          return result;
        case 3:
          result.n128_u64[0] = sub_1CC683384((long long *)i, (long long *)(i + 32), (long long *)&a2[-2], result).n128_u64[0];
          return result;
        case 4:
          result.n128_u64[0] = sub_1CC6837EC(i, i + 32, i + 64, (uint64_t)&a2[-2], result).n128_u64[0];
          return result;
        case 5:
          unsigned int v58 = (__n128 *)(i + 32);
          uint64_t v59 = (__n128 *)(i + 64);
          int v60 = (__n128 *)(i + 96);
          result.n128_u64[0] = sub_1CC6837EC(i, i + 32, i + 64, i + 96, result).n128_u64[0];
          if (a2[-1].n128_u8[8]) {
            unsigned int v61 = *(unsigned char *)(i + 120) == 0;
          }
          else {
            unsigned int v61 = 1;
          }
          if (v61)
          {
            if (!*(unsigned char *)(i + 120)) {
              return result;
            }
          }
          else if (v11->n128_u64[0] >= v60->n128_u64[0])
          {
            return result;
          }
          uint64_t result = *v60;
          long long v154 = *(__n128 *)(i + 112);
          uint64_t v119 = a2[-1];
          *int v60 = *v11;
          *(__n128 *)(i + 112) = v119;
          *int v11 = result;
          a2[-1] = v154;
          if (*(unsigned char *)(i + 120) && *(unsigned char *)(i + 88))
          {
            if (v60->n128_u64[0] >= v59->n128_u64[0]) {
              return result;
            }
          }
          else if (!*(unsigned char *)(i + 88))
          {
            return result;
          }
          unint64_t v126 = *v59;
          uint64_t result = *(__n128 *)(i + 80);
          unint64_t v127 = *(_OWORD *)(i + 112);
          *uint64_t v59 = *v60;
          *(_OWORD *)(i + 80) = v127;
          *int v60 = v126;
          *(__n128 *)(i + 112) = result;
          if (*(unsigned char *)(i + 88) && *(unsigned char *)(i + 56))
          {
            if (v59->n128_u64[0] >= v58->n128_u64[0]) {
              return result;
            }
          }
          else if (!*(unsigned char *)(i + 56))
          {
            return result;
          }
          unint64_t v128 = *v58;
          uint64_t result = *(__n128 *)(i + 48);
          unsigned int v129 = *(_OWORD *)(i + 80);
          long long *v58 = *v59;
          *(_OWORD *)(i + 48) = v129;
          *uint64_t v59 = v128;
          *(__n128 *)(i + 80) = result;
          if (*(unsigned char *)(i + 56) && *(unsigned char *)(i + 24))
          {
            if (*(void *)(i + 32) >= *(void *)i) {
              return result;
            }
          }
          else if (!*(unsigned char *)(i + 24))
          {
            return result;
          }
          long long v148 = *(__n128 *)i;
          long long v155 = *(_OWORD *)(i + 16);
          unsigned int v130 = *(_OWORD *)(i + 48);
          *(__n128 *)unint64_t i = *v58;
          *(_OWORD *)(i + 16) = v130;
          uint64_t result = v148;
          long long *v58 = v148;
          *(_OWORD *)(i + 48) = v155;
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 767) {
      break;
    }
    if (!a3)
    {
      if ((__n128 *)i == a2) {
        return result;
      }
      long long v77 = (unint64_t)(v14 - 2) >> 1;
      BOOL v78 = v77;
      while (2)
      {
        BOOL v79 = v78;
        if (v77 >= v78)
        {
          BOOL v80 = (2 * v78) | 1;
          uint64_t v81 = i + 32 * v80;
          if (2 * v79 + 2 < v14)
          {
            unint64_t v82 = *(unsigned char *)(v81 + 56) != 0;
            if (*(unsigned char *)(v81 + 24)) {
              unint64_t v83 = *(unsigned char *)(v81 + 56) == 0;
            }
            else {
              unint64_t v83 = 1;
            }
            if (!v83) {
              unint64_t v82 = *(void *)v81 < *(void *)(v81 + 32);
            }
            if (v82)
            {
              v81 += 32;
              BOOL v80 = 2 * v79 + 2;
            }
          }
          unsigned int v84 = i + 32 * v79;
          unsigned int v85 = *(unsigned __int8 *)(v84 + 24);
          if (*(unsigned char *)(v81 + 24)) {
            unsigned int v86 = v85 == 0;
          }
          else {
            unsigned int v86 = 1;
          }
          if (v86)
          {
            if (!*(unsigned char *)(v84 + 24))
            {
              long long v87 = *(void *)v84;
              goto LABEL_192;
            }
          }
          else
          {
            long long v87 = *(void *)v84;
            if (*(void *)v81 >= *(void *)v84)
            {
LABEL_192:
              long long v144 = *(_OWORD *)(v84 + 8);
              *(_DWORD *)long long v137 = *(_DWORD *)(v84 + 25);
              *(_DWORD *)&v137[3] = *(_DWORD *)(v84 + 28);
              unint64_t v88 = *(_OWORD *)(v81 + 16);
              *(_OWORD *)unsigned int v84 = *(_OWORD *)v81;
              *(_OWORD *)(v84 + 16) = v88;
              if (v77 >= v80)
              {
                do
                {
                  BOOL v90 = 2 * v80;
                  BOOL v80 = (2 * v80) | 1;
                  uint64_t v89 = i + 32 * v80;
                  unsigned int v91 = v90 + 2;
                  if (v91 < v14)
                  {
                    long long v92 = *(unsigned char *)(v89 + 56) != 0;
                    if (*(unsigned char *)(v89 + 24)) {
                      int64_t v93 = *(unsigned char *)(v89 + 56) == 0;
                    }
                    else {
                      int64_t v93 = 1;
                    }
                    if (!v93) {
                      long long v92 = *(void *)v89 < *(void *)(v89 + 32);
                    }
                    if (v92)
                    {
                      v89 += 32;
                      BOOL v80 = v91;
                    }
                  }
                  if (*(unsigned char *)(v89 + 24)) {
                    int64_t v94 = v85 == 0;
                  }
                  else {
                    int64_t v94 = 1;
                  }
                  if (v94)
                  {
                    if (v85) {
                      goto LABEL_193;
                    }
                  }
                  else if (*(void *)v89 < v87)
                  {
                    goto LABEL_193;
                  }
                  int64_t v95 = *(_OWORD *)(v89 + 16);
                  *(_OWORD *)uint64_t v81 = *(_OWORD *)v89;
                  *(_OWORD *)(v81 + 16) = v95;
                  uint64_t v81 = v89;
                }
                while (v77 >= v80);
              }
              else
              {
LABEL_193:
                uint64_t v89 = v81;
              }
              *(void *)uint64_t v89 = v87;
              *(_OWORD *)(v89 + 8) = v144;
              *(unsigned char *)(v89 + 24) = v85;
              *(_DWORD *)(v89 + 25) = *(_DWORD *)v137;
              *(_DWORD *)(v89 + 28) = *(_DWORD *)&v137[3];
            }
          }
        }
        BOOL v78 = v79 - 1;
        if (v79) {
          continue;
        }
        break;
      }
      while (2)
      {
        uint64_t v96 = 0;
        unsigned int v145 = *(__n128 *)i;
        long long v152 = *(__n128 *)(i + 16);
        unint64_t v97 = (_OWORD *)i;
        do
        {
          unsigned int v98 = (uint64_t)&v97[2 * v96 + 2];
          unsigned int v99 = (2 * v96) | 1;
          BOOL v100 = 2 * v96 + 2;
          if (v100 < v14)
          {
            unsigned int v101 = *(unsigned char *)(v98 + 56) != 0;
            if (*(unsigned char *)(v98 + 24)) {
              unsigned int v102 = *(unsigned char *)(v98 + 56) == 0;
            }
            else {
              unsigned int v102 = 1;
            }
            if (!v102) {
              unsigned int v101 = *(void *)v98 < *(void *)(v98 + 32);
            }
            if (v101)
            {
              v98 += 32;
              unsigned int v99 = v100;
            }
          }
          unint64_t v103 = *(_OWORD *)(v98 + 16);
          *unint64_t v97 = *(_OWORD *)v98;
          v97[1] = v103;
          unint64_t v97 = (_OWORD *)v98;
          uint64_t v96 = v99;
        }
        while (v99 <= (uint64_t)((unint64_t)(v14 - 2) >> 1));
        a2 -= 2;
        if ((__n128 *)v98 == a2)
        {
          uint64_t result = v145;
          *(__n128 *)unsigned int v98 = v145;
          *(__n128 *)(v98 + 16) = v152;
          goto LABEL_246;
        }
        unsigned int v104 = a2[1];
        *(__n128 *)unsigned int v98 = *a2;
        *(__n128 *)(v98 + 16) = v104;
        uint64_t result = v145;
        *a2 = v145;
        a2[1] = v152;
        long long v105 = v98 - i + 32;
        if (v105 >= 33)
        {
          unint64_t v106 = ((unint64_t)v105 >> 5) - 2;
          uint64_t v107 = v106 >> 1;
          uint64_t v108 = i + 32 * (v106 >> 1);
          if (*(unsigned char *)(v108 + 24)) {
            unsigned int v109 = *(unsigned char *)(v98 + 24) == 0;
          }
          else {
            unsigned int v109 = 1;
          }
          if (v109)
          {
            if (*(unsigned char *)(v98 + 24))
            {
              unsigned int v110 = *(void *)v98;
              goto LABEL_234;
            }
          }
          else
          {
            unsigned int v110 = *(void *)v98;
            if (*(void *)v108 < *(void *)v98)
            {
LABEL_234:
              uint32x4_t v138 = *(__n128 *)(v98 + 8);
              BOOL v111 = *(unsigned __int8 *)(v98 + 24);
              *(_DWORD *)&v133[3] = *(_DWORD *)(v98 + 28);
              *(_DWORD *)long long v133 = *(_DWORD *)(v98 + 25);
              unsigned int v112 = *(_OWORD *)(v108 + 16);
              *(_OWORD *)unsigned int v98 = *(_OWORD *)v108;
              *(_OWORD *)(v98 + 16) = v112;
              if (v106 >= 2)
              {
                do
                {
                  uint64_t v114 = v107 - 1;
                  uint64_t v107 = (v107 - 1) >> 1;
                  long long v113 = i + 32 * v107;
                  if (*(unsigned char *)(v113 + 24)) {
                    unint64_t v115 = v111 == 0;
                  }
                  else {
                    unint64_t v115 = 1;
                  }
                  if (v115)
                  {
                    if (!v111) {
                      goto LABEL_235;
                    }
                  }
                  else if (*(void *)v113 >= v110)
                  {
                    goto LABEL_235;
                  }
                  uint32x4_t v116 = *(_OWORD *)(v113 + 16);
                  *(_OWORD *)uint64_t v108 = *(_OWORD *)v113;
                  *(_OWORD *)(v108 + 16) = v116;
                  uint64_t v108 = i + 32 * v107;
                }
                while (v114 > 1);
              }
              else
              {
LABEL_235:
                long long v113 = v108;
              }
              *(void *)long long v113 = v110;
              uint64_t result = v138;
              *(__n128 *)(v113 + 8) = v138;
              *(unsigned char *)(v113 + 24) = v111;
              *(_DWORD *)(v113 + 25) = *(_DWORD *)v133;
              *(_DWORD *)(v113 + 28) = *(_DWORD *)&v133[3];
            }
          }
        }
LABEL_246:
        if (v14-- <= 2) {
          return result;
        }
        continue;
      }
    }
    uint64_t v15 = (unint64_t)v14 >> 1;
    long long v16 = (long long *)(i + 32 * ((unint64_t)v14 >> 1));
    if ((unint64_t)v13 > 0x1000)
    {
      unsigned int v17 = sub_1CC683384((long long *)a1, (long long *)(a1 + 32 * ((unint64_t)v14 >> 1)), (long long *)&a2[-2], result);
      unsigned int v18 = sub_1CC683384((long long *)(a1 + 32), v16 - 2, (long long *)&a2[-4], v17);
      uint64_t v19 = sub_1CC683384((long long *)(a1 + 64), (long long *)(a1 + 32 + 32 * v15), (long long *)&a2[-6], v18);
      sub_1CC683384(v16 - 2, v16, (long long *)(a1 + 32 + 32 * v15), v19);
      unsigned int v140 = *(_OWORD *)a1;
      uint64_t v149 = *(_OWORD *)(a1 + 16);
      unsigned int v20 = v16[1];
      *(_OWORD *)a1 = *v16;
      *(_OWORD *)(a1 + 16) = v20;
      uint64_t *v16 = v140;
      v16[1] = v149;
    }
    else
    {
      sub_1CC683384((long long *)(a1 + 32 * ((unint64_t)v14 >> 1)), (long long *)a1, (long long *)&a2[-2], result);
    }
    --a3;
    if (a4)
    {
      unsigned int v21 = *(void *)a1;
      unint64_t v22 = *(unsigned __int8 *)(a1 + 24);
    }
    else
    {
      unint64_t v22 = *(unsigned __int8 *)(a1 + 24);
      if (*(unsigned char *)(a1 - 8) && *(unsigned char *)(a1 + 24))
      {
        unsigned int v21 = *(void *)a1;
        if (*(void *)(a1 - 32) >= *(void *)a1) {
          goto LABEL_77;
        }
      }
      else
      {
        unsigned int v21 = *(void *)a1;
        if (!*(unsigned char *)(a1 + 24))
        {
LABEL_77:
          unint64_t v135 = *(__n128 *)(a1 + 8);
          *(_DWORD *)unsigned int v132 = *(_DWORD *)(a1 + 25);
          *(_DWORD *)&v132[3] = *(_DWORD *)(a1 + 28);
          unsigned int v45 = a2[-1].n128_u8[8];
          if (*(unsigned char *)(a1 + 24) && a2[-1].n128_u8[8])
          {
            if (v21 >= v11->n128_u64[0])
            {
LABEL_80:
              for (unint64_t i = a1 + 32; i < (unint64_t)a2; i += 32)
              {
                if (*(unsigned char *)(a1 + 24) && *(unsigned char *)(i + 24))
                {
                  if (v21 < *(void *)i) {
                    goto LABEL_95;
                  }
                }
                else if (*(unsigned char *)(i + 24))
                {
                  goto LABEL_95;
                }
              }
              goto LABEL_95;
            }
          }
          else if (!a2[-1].n128_u8[8])
          {
            goto LABEL_80;
          }
          int v46 = a1 + 32;
          do
          {
            while (1)
            {
              unint64_t i = v46;
              unsigned int v47 = *(unsigned __int8 *)(v46 + 24);
              v46 += 32;
              if (!*(unsigned char *)(a1 + 24) || !v47) {
                break;
              }
              if (v21 < *(void *)i) {
                goto LABEL_95;
              }
            }
          }
          while (!v47);
LABEL_95:
          long long v48 = (long long *)a2;
          if (i < (unint64_t)a2)
          {
            unsigned int v49 = &a2[-3].n128_u8[8];
            if (!*(unsigned char *)(a1 + 24)) {
              goto LABEL_100;
            }
LABEL_97:
            if (v45)
            {
              if (v21 < *((void *)v49 + 1)) {
                goto LABEL_101;
              }
            }
            else
            {
LABEL_100:
              while (v45)
              {
LABEL_101:
                int v50 = *v49;
                v49 -= 32;
                unsigned int v45 = v50;
                if (*(unsigned char *)(a1 + 24)) {
                  goto LABEL_97;
                }
              }
            }
            long long v48 = (long long *)(v49 + 8);
          }
LABEL_116:
          while (i < (unint64_t)v48)
          {
            unsigned int v142 = *(_OWORD *)i;
            uint64_t v151 = *(_OWORD *)(i + 16);
            unsigned int v51 = v48[1];
            *(_OWORD *)unint64_t i = *v48;
            *(_OWORD *)(i + 16) = v51;
            *long long v48 = v142;
            v48[1] = v151;
            unsigned int v52 = i + 32;
            do
            {
              while (1)
              {
                unint64_t i = v52;
                unsigned int v53 = *(unsigned __int8 *)(v52 + 24);
                v52 += 32;
                if (!v22 || !v53) {
                  break;
                }
                if (v21 < *(void *)i) {
                  goto LABEL_110;
                }
              }
            }
            while (!v53);
LABEL_110:
            long long v54 = v48 - 2;
            do
            {
              while (1)
              {
                long long v48 = v54;
                unsigned int v55 = *((unsigned __int8 *)v54 + 24);
                v54 -= 2;
                if (!v22 || !v55) {
                  break;
                }
                if (v21 >= *(void *)v48) {
                  goto LABEL_116;
                }
              }
            }
            while (v55);
          }
          BOOL v5 = i - 32 >= a1;
          int v6 = i - 32 == a1;
          if (i - 32 != a1)
          {
            unsigned int v56 = *(_OWORD *)(i - 16);
            *(_OWORD *)a1 = *(_OWORD *)(i - 32);
            *(_OWORD *)(a1 + 16) = v56;
          }
          a4 = 0;
          *(void *)(i - 32) = v21;
          uint64_t result = v135;
          *(__n128 *)(i - 24) = v135;
          *(unsigned char *)(i - 8) = v22;
          *(_DWORD *)(i - 4) = *(_DWORD *)&v132[3];
          *(_DWORD *)(i - 7) = *(_DWORD *)v132;
          continue;
        }
      }
    }
    unsigned int v23 = 0;
    unint64_t v134 = *(__n128 *)(a1 + 8);
    *(_DWORD *)unsigned int v131 = *(_DWORD *)(a1 + 25);
    *(_DWORD *)&v131[3] = *(_DWORD *)(a1 + 28);
    while (!*(unsigned char *)(a1 + v23 + 56) || v22 == 0)
    {
      if (!v22) {
        goto LABEL_24;
      }
LABEL_23:
      v23 += 32;
    }
    if (*(void *)(a1 + v23 + 32) < v21) {
      goto LABEL_23;
    }
LABEL_24:
    int v25 = a1 + v23 + 32;
    unsigned int v26 = a2 - 2;
    if (v23)
    {
      do
      {
        while (1)
        {
          unsigned int v27 = v26;
          unint64_t v28 = v26[1].n128_u8[8];
          v26 -= 2;
          if (v28 && v22 != 0) {
            break;
          }
          if (v22) {
            goto LABEL_49;
          }
        }
      }
      while (v27->n128_u64[0] >= v21);
    }
    else
    {
      unsigned int v27 = a2;
      if (v25 < (unint64_t)a2)
      {
        unsigned int v30 = a2 - 2;
        do
        {
          while (1)
          {
            unsigned int v27 = v30;
            unsigned int v31 = v30[1].n128_u8[8];
            v30 -= 2;
            if (v31 && v22 != 0) {
              break;
            }
            if (v22 || v25 >= (unint64_t)v27) {
              goto LABEL_49;
            }
          }
        }
        while (v27->n128_u64[0] >= v21 && v25 < (unint64_t)v27);
      }
    }
LABEL_49:
    unint64_t i = v25;
    if (v25 < (unint64_t)v27)
    {
      int v34 = (long long *)v27;
      do
      {
        unsigned int v141 = *(_OWORD *)i;
        uint64_t v150 = *(_OWORD *)(i + 16);
        long long v35 = v34[1];
        *(_OWORD *)unint64_t i = *v34;
        *(_OWORD *)(i + 16) = v35;
        *int v34 = v141;
        v34[1] = v150;
        BOOL v36 = i + 32;
        do
        {
          while (1)
          {
            unint64_t i = v36;
            int v37 = *(unsigned __int8 *)(v36 + 24);
            v36 += 32;
            if (v37 && v22 != 0) {
              break;
            }
            if (!v22) {
              goto LABEL_60;
            }
          }
        }
        while (*(void *)i < v21);
LABEL_60:
        unsigned int v39 = v34 - 2;
        do
        {
          while (1)
          {
            int v34 = v39;
            unsigned int v40 = *((unsigned __int8 *)v39 + 24);
            v39 -= 2;
            if (v40 && v22 != 0) {
              break;
            }
            if (v22) {
              goto LABEL_69;
            }
          }
        }
        while (*(void *)v34 >= v21);
LABEL_69:
        ;
      }
      while (i < (unint64_t)v34);
    }
    if (i - 32 != a1)
    {
      unsigned int v42 = *(_OWORD *)(i - 16);
      *(_OWORD *)a1 = *(_OWORD *)(i - 32);
      *(_OWORD *)(a1 + 16) = v42;
    }
    *(void *)(i - 32) = v21;
    *(__n128 *)(i - 24) = v134;
    *(unsigned char *)(i - 8) = v22;
    *(_DWORD *)(i - 4) = *(_DWORD *)&v131[3];
    *(_DWORD *)(i - 7) = *(_DWORD *)v131;
    if (v25 < (unint64_t)v27)
    {
LABEL_75:
      sub_1CC6827AC(a1, i - 32, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      unsigned int v43 = sub_1CC6834A8(a1, i - 32, v134);
      if (sub_1CC6834A8(i, (uint64_t)a2, v44))
      {
        a2 = (__n128 *)(i - 32);
        if (v43) {
          return result;
        }
        goto LABEL_1;
      }
      if (!v43) {
        goto LABEL_75;
      }
    }
  }
  unsigned int v62 = (__n128 *)(i + 32);
  long long v64 = (__n128 *)i == a2 || v62 == a2;
  if ((a4 & 1) == 0)
  {
    if (v64) {
      return result;
    }
    while (1)
    {
      unsigned int v120 = a1;
      a1 = (unint64_t)v62;
      unsigned int v121 = *(unsigned __int8 *)(v120 + 56);
      if (*(unsigned char *)(v120 + 56)) {
        BOOL v122 = *(unsigned char *)(v120 + 24) == 0;
      }
      else {
        BOOL v122 = 1;
      }
      if (v122)
      {
        if (!*(unsigned char *)(v120 + 24)) {
          goto LABEL_272;
        }
        long long v123 = v62->n128_u64[0];
      }
      else
      {
        long long v123 = v62->n128_u64[0];
        if (*(void *)a1 >= *(void *)v120) {
          goto LABEL_272;
        }
      }
      long long v147 = *(__n128 *)(v120 + 40);
      *(_DWORD *)unint64_t v139 = *(_DWORD *)(v120 + 57);
      *(_DWORD *)&v139[3] = *(_DWORD *)(v120 + 60);
      do
      {
        while (1)
        {
          long long v124 = v120;
          uint64_t v125 = *(_OWORD *)(v120 + 16);
          *(_OWORD *)(v120 + 32) = *(_OWORD *)v120;
          *(_OWORD *)(v120 + 48) = v125;
          v120 -= 32;
          if (!v121 || !*(unsigned char *)(v124 - 8)) {
            break;
          }
          if (v123 >= *(void *)(v124 - 32)) {
            goto LABEL_271;
          }
        }
      }
      while (*(unsigned char *)(v124 - 8));
LABEL_271:
      *(void *)long long v124 = v123;
      uint64_t result = v147;
      *(__n128 *)(v124 + 8) = v147;
      *(unsigned char *)(v124 + 24) = v121;
      *(_DWORD *)(v124 + 25) = *(_DWORD *)v139;
      *(_DWORD *)(v124 + 28) = *(_DWORD *)&v139[3];
LABEL_272:
      unsigned int v62 = (__n128 *)(a1 + 32);
      if ((__n128 *)(a1 + 32) == a2) {
        return result;
      }
    }
  }
  if (v64) {
    return result;
  }
  unsigned int v65 = 0;
  unsigned int v66 = (__n128 *)i;
  while (2)
  {
    long long v67 = v66;
    unsigned int v66 = v62;
    long long v68 = v67[3].n128_u8[8];
    if (v67[3].n128_u8[8]) {
      long long v69 = v67[1].n128_u8[8] == 0;
    }
    else {
      long long v69 = 1;
    }
    if (v69)
    {
      if (!v67[1].n128_u8[8]) {
        goto LABEL_171;
      }
      unsigned int v70 = v66->n128_u64[0];
    }
    else
    {
      unsigned int v70 = v66->n128_u64[0];
      if (v66->n128_u64[0] >= v67->n128_u64[0]) {
        goto LABEL_171;
      }
    }
    unint64_t v143 = *(__n128 *)((char *)v67 + 40);
    *(_DWORD *)unsigned int v136 = *(unsigned __int32 *)((char *)&v67[3].n128_u32[2] + 1);
    *(_DWORD *)&v136[3] = v67[3].n128_u32[3];
    unsigned int v71 = v67[1];
    unsigned __int8 *v66 = *v67;
    v66[1] = v71;
    long long v72 = i;
    if (v67 == (__n128 *)i) {
      goto LABEL_170;
    }
    long long v73 = v65;
    while (2)
    {
      long long v74 = (_OWORD *)(i + v73);
      unsigned int v75 = (unint64_t *)(i + v73 - 32);
      if (v68 && *(unsigned char *)(i + v73 - 8))
      {
        if (v70 >= *v75)
        {
          long long v72 = i + v73;
          goto LABEL_170;
        }
LABEL_167:
        v67 -= 2;
        unsigned int v76 = *(_OWORD *)(i + v73 - 16);
        *long long v74 = *(_OWORD *)v75;
        v74[1] = v76;
        v73 -= 32;
        if (!v73)
        {
          long long v72 = i;
          goto LABEL_170;
        }
        continue;
      }
      break;
    }
    if (*(unsigned char *)(i + v73 - 8)) {
      goto LABEL_167;
    }
    long long v72 = (unint64_t)v67;
LABEL_170:
    *(void *)long long v72 = v70;
    uint64_t result = v143;
    *(__n128 *)(v72 + 8) = v143;
    *(unsigned char *)(v72 + 24) = v68;
    *(_DWORD *)(v72 + 25) = *(_DWORD *)v136;
    *(_DWORD *)(v72 + 28) = *(_DWORD *)&v136[3];
LABEL_171:
    unsigned int v62 = v66 + 2;
    v65 += 32;
    if (&v66[2] != a2) {
      continue;
    }
    return result;
  }
}

  BOOL v4 = a2 - 2;
LABEL_2:
  BOOL v5 = 1 - a3;
  while (2)
  {
    int v6 = (char *)a2 - (char *)result;
    unint64_t v7 = ((char *)a2 - (char *)result) >> 2;
    if (v7 < 2) {
      return result;
    }
    switch(v7)
    {
      case 2uLL:
        unint64_t v8 = *v4;
        unint64_t v9 = *result;
        if (v8 < v9)
        {
          int v10 = result;
          LOBYTE(v11) = *((unsigned char *)result + 2);
          uint64_t v12 = a2;
          LOBYTE(v13) = *((unsigned char *)a2 - 2);
        }
        else
        {
          if (v9 < v8) {
            return result;
          }
          uint64_t v13 = *((unsigned __int8 *)a2 - 2);
          int v11 = *((unsigned __int8 *)result + 2);
          if (v13 >= v11) {
            return result;
          }
          int v10 = result;
          uint64_t v12 = a2;
        }
        *int v10 = v8;
        *(v12 - 2) = v9;
        *((unsigned char *)v10 + 2) = v13;
        *((unsigned char *)v12 - 2) = v11;
        return result;
      case 3uLL:
        return sub_1CC730C7C(result, result + 2, v4);
      case 4uLL:
        return sub_1CC731280(result, result + 2, result + 4, v4);
      case 5uLL:
        return sub_1CC731384(result, result + 2, result + 4, result + 6, v4);
      default:
        if (v6 <= 95)
        {
          if (a4)
          {
            return sub_1CC730AE8(result, a2);
          }
          else
          {
            return (unsigned __int16 *)sub_1CC730BD4(result, a2);
          }
        }
        int v25 = v4;
        unsigned int v26 = a2;
        unsigned int v27 = result;
        if (v5 != 1)
        {
          unint64_t v14 = a4;
          uint64_t v15 = v5;
          long long v16 = v7 >> 1;
          unsigned int v17 = &result[2 * (v7 >> 1)];
          if ((unint64_t)v6 < 0x201)
          {
            sub_1CC730C7C(&result[2 * (v7 >> 1)], result, v4);
          }
          else
          {
            sub_1CC730C7C(result, &result[2 * (v7 >> 1)], v4);
            sub_1CC730C7C(v27 + 2, v17 - 2, v26 - 4);
            sub_1CC730C7C(v27 + 4, &v27[2 * v16 + 2], v26 - 6);
            sub_1CC730C7C(v17 - 2, v17, &v27[2 * v16 + 2]);
            unsigned int v18 = *v27;
            *unsigned int v27 = *v17;
            uint64_t *v17 = v18;
            LOBYTE(v18) = *((unsigned char *)v27 + 2);
            *((unsigned char *)v27 + 2) = *((unsigned char *)v17 + 2);
            *((unsigned char *)v17 + 2) = v18;
          }
          if ((v14 & 1) == 0)
          {
            uint64_t v19 = *(v27 - 2);
            unsigned int v20 = *v27;
            if (v19 >= v20
              && (v20 < v19 || *((unsigned __int8 *)v27 - 2) >= *((unsigned __int8 *)v27 + 2)))
            {
              uint64_t v24 = sub_1CC730DC4(v27, (unint64_t)v26);
LABEL_42:
              BOOL v5 = v15 + 1;
              uint64_t result = v24;
              BOOL v4 = v25;
              a2 = v26;
              a4 = v14;
              continue;
            }
          }
          unsigned int v21 = (unsigned __int16 *)sub_1CC730F10((uint64_t)v27, (unint64_t)v26);
          if ((v22 & 1) == 0)
          {
LABEL_45:
            sub_1CC730704(v27, v21, -v15, v14 & 1);
            a3 = -v15;
            a4 = 0;
            uint64_t result = v21 + 2;
            BOOL v4 = v25;
            a2 = v26;
            goto LABEL_2;
          }
          unsigned int v23 = sub_1CC73105C(v27, v21);
          uint64_t v24 = v21 + 2;
          if (!sub_1CC73105C(v21 + 2, v26))
          {
            if (v23) {
              goto LABEL_42;
            }
            goto LABEL_45;
          }
          a3 = -v15;
          a2 = v21;
          uint64_t result = v27;
          a4 = v14;
          if (v23) {
            return result;
          }
          goto LABEL_1;
        }
        if (result != a2)
        {
          return (unsigned __int16 *)sub_1CC7314D8((uint64_t)result, a2, a2);
        }
        return result;
    }
  }
}

  BOOL v4 = a2 - 1;
LABEL_2:
  BOOL v5 = 1 - a3;
  while (2)
  {
    int v6 = (char *)a2 - (char *)result;
    unint64_t v7 = a2 - result;
    if (v7 == 2)
    {
      unint64_t v8 = *result;
      if (*v4 < *result)
      {
        *uint64_t result = *v4;
        *BOOL v4 = v8;
      }
      return result;
    }
    switch(v7)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 3uLL:
        return sub_1CBB10A88(result, result + 1, v4);
      case 4uLL:
        return sub_1CBB10C78(result, result + 1, result + 2, v4);
      case 5uLL:
        return sub_1CBB10CF8(result, result + 1, result + 2, result + 3, v4);
      default:
        unint64_t v9 = a4;
        uint64_t v32 = v4;
        unsigned int v33 = (int *)a2;
        int v34 = result;
        if (v6 > 95)
        {
          if (v5 == 1)
          {
            if (result != a2)
            {
              return (unsigned int *)sub_1CBB10D9C((uint64_t)result, a2, a2);
            }
            return result;
          }
          int v10 = v7 >> 1;
          int v11 = &result[v7 >> 1];
          if ((unint64_t)v6 < 0x201)
          {
            sub_1CBB10A88(&result[v10], result, v4);
          }
          else
          {
            sub_1CBB10A88(result, &result[v10], v4);
            sub_1CBB10A88(v34 + 1, v11 - 1, (unsigned int *)v33 - 2);
            sub_1CBB10A88(v34 + 2, &v34[v10 + 1], (unsigned int *)v33 - 3);
            sub_1CBB10A88(v11 - 1, v11, &v34[v10 + 1]);
            uint64_t v12 = *v34;
            *int v34 = *v11;
            *int v11 = v12;
          }
          if ((v9 & 1) == 0 && *(v34 - 1) >= *v34)
          {
            unsigned int v31 = sub_1CB946298(v34, v33);
LABEL_56:
            ++v5;
            uint64_t result = v31;
            BOOL v4 = v32;
            a2 = (unsigned int *)v33;
            a4 = v9;
            continue;
          }
          unint64_t v28 = sub_1CB946348(v34, (unsigned int *)v33);
          if ((v29 & 1) == 0)
          {
LABEL_59:
            sub_1CC752C98(v34, v28, -v5, v9 & 1);
            a3 = -v5;
            a4 = 0;
            uint64_t result = v28 + 1;
            BOOL v4 = v32;
            a2 = (unsigned int *)v33;
            goto LABEL_2;
          }
          unsigned int v30 = sub_1CC753088(v34, v28);
          unsigned int v31 = v28 + 1;
          if (!sub_1CC753088(v28 + 1, (unsigned int *)v33))
          {
            if (v30) {
              goto LABEL_56;
            }
            goto LABEL_59;
          }
          a3 = -v5;
          a2 = v28;
          uint64_t result = v34;
          a4 = v9;
          if (v30) {
            return result;
          }
          goto LABEL_1;
        }
        uint64_t v13 = result + 1;
        uint64_t v15 = result == a2 || v13 == a2;
        if (a4)
        {
          long long v16 = result;
          if (!v15)
          {
            unsigned int v17 = 4;
            do
            {
              uint64_t v19 = *v16;
              unsigned int v18 = v16[1];
              long long v16 = v13;
              if (v18 < v19)
              {
                unsigned int v20 = v17;
                while (1)
                {
                  *(unsigned int *)((char *)result + v20) = v19;
                  unsigned int v21 = v20 - 4;
                  if (v20 == 4) {
                    break;
                  }
                  uint64_t v19 = *(unsigned int *)((char *)result + v20 - 8);
                  v20 -= 4;
                  if (v18 >= v19)
                  {
                    unint64_t v22 = (unsigned int *)((char *)result + v21);
                    goto LABEL_36;
                  }
                }
                unint64_t v22 = result;
LABEL_36:
                void *v22 = v18;
              }
              uint64_t v13 = v16 + 1;
              v17 += 4;
            }
            while (v16 + 1 != a2);
          }
        }
        else
        {
          unsigned int v23 = result;
          if (!v15)
          {
            do
            {
              uint64_t v24 = v23;
              int v25 = v23[1];
              unsigned int v26 = *v24;
              if (v25 < v26)
              {
                unsigned int v27 = v13;
                do
                {
                  *unsigned int v27 = v26;
                  unsigned int v26 = *(v27 - 2);
                  --v27;
                }
                while (v25 < v26);
                *unsigned int v27 = v25;
              }
              unsigned int v23 = v13++;
            }
            while (v13 != a2);
          }
        }
        return result;
    }
  }
}

  int v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    unint64_t v14 = (uint64_t)a2 - v11;
    uint64_t v15 = 0x70913F8BCD29C245 * ((uint64_t)((uint64_t)a2 - v11) >> 3);
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unsigned int v27 = *((_DWORD *)a2 - 2);
          unint64_t v28 = *(_DWORD *)(v11 + 1120);
          if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
          {
            if (v27 <= v28) {
              return;
            }
          }
          else if (v27 >= v28)
          {
            return;
          }
          sub_1CC7EB1E0((uint64_t *)v11, a2 - 141);
          break;
        case 3uLL:
          sub_1CC7EA654(v11, v11 + 1128, (uint64_t)(a2 - 141), a3);
          return;
        case 4uLL:
          sub_1CC7EB3AC(v11, v11 + 1128, v11 + 2256, (uint64_t)(a2 - 141), a3);
          return;
        case 5uLL:
          sub_1CC7E999C(v11, v11 + 1128, v11 + 2256, v11 + 3384, (uint64_t)(a2 - 141), a3);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 27071) {
      break;
    }
    if (v13 == 1)
    {
      sub_1CC7EA018(v11, a2, a2, a3);
      return;
    }
    long long v16 = v15 >> 1;
    unsigned int v17 = (uint64_t *)(v11 + 1128 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x23401)
    {
      sub_1CC7EA654(v11, v11 + 1128 * (v15 >> 1), (uint64_t)(a2 - 141), a3);
      unsigned int v18 = 1128 * v16;
      uint64_t v19 = 1128 * v16 + v11 - 1128;
      sub_1CC7EA654(v11 + 1128, v19, (uint64_t)(a2 - 282), a3);
      unsigned int v20 = v11 + 2256;
      unsigned int v21 = v11 + 1128 + v18;
      sub_1CC7EA654(v20, v21, (uint64_t)(a2 - 423), a3);
      sub_1CC7EA654(v19, (uint64_t)v17, v21, a3);
      sub_1CC7EB1E0((uint64_t *)a1, v17);
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      sub_1CC7EA654(v11 + 1128 * (v15 >> 1), v11, (uint64_t)(a2 - 141), a3);
      if (a5) {
        goto LABEL_16;
      }
    }
    unint64_t v22 = *(_DWORD *)(a1 - 8);
    unsigned int v23 = *(_DWORD *)(a1 + 1120);
    if ((*(_DWORD *)(*(void *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
    {
      if (v22 <= v23) {
        goto LABEL_20;
      }
    }
    else if (v22 >= v23)
    {
LABEL_20:
      int v11 = sub_1CC7EA790((uint64_t *)a1, a2, a3);
      goto LABEL_21;
    }
LABEL_16:
    uint64_t v24 = sub_1CC7EAAAC(a1, a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_19;
    }
    unsigned int v26 = sub_1CC7EADD8(a1, (uint64_t)v24, a3);
    int v11 = (unint64_t)(v24 + 141);
    if (sub_1CC7EADD8((uint64_t)(v24 + 141), (uint64_t)a2, a3))
    {
      a4 = -v13;
      a2 = v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v26)
    {
LABEL_19:
      sub_1CC7E9544(a1, v24, a3, -v13, a5 & 1);
      int v11 = (unint64_t)(v24 + 141);
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1CC7E9AF4((void *)v11, a2, a3);
  }
  else
  {
    sub_1CC7E9D8C((void *)v11, a2, a3);
  }
}

  int v10 = (unint64_t *)(a2 - 24);
  uint64_t j = a1;
  while (1)
  {
    a1 = j;
    uint64_t v12 = a2 - j;
    uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - j) >> 3);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          long long v54 = (long long *)(a2 - 24);
          unsigned int v55 = *(void *)(a2 - 24);
          if (v55 < *(void *)j || v55 == *(void *)j && *(_DWORD *)(a2 - 8) < *(_DWORD *)(j + 16))
          {
            unint64_t v143 = *(void *)(j + 16);
            long long v137 = *(_OWORD *)j;
            unsigned int v56 = *v54;
            *(void *)(j + 16) = *(void *)(a2 - 8);
            *(_OWORD *)uint64_t j = v56;
            *(void *)(a2 - 8) = v143;
            uint64_t *v54 = v137;
          }
          break;
        case 3uLL:
          sub_1CC874290((long long *)j, (unint64_t *)(j + 24), (long long *)(a2 - 24));
          break;
        case 4uLL:
          sub_1CC874768(j, (unint64_t *)(j + 24), j + 48, a2 - 24);
          break;
        case 5uLL:
          long long v57 = (long long *)(j + 24);
          unsigned int v58 = (long long *)(j + 48);
          uint64_t v59 = (long long *)(j + 72);
          sub_1CC874768(j, (unint64_t *)(j + 24), j + 48, j + 72);
          int v60 = (long long *)(a2 - 24);
          unsigned int v61 = *(void *)(a2 - 24);
          unsigned int v62 = *(void *)(j + 72);
          if (v61 < v62 || v61 == v62 && *(_DWORD *)(a2 - 8) < *(_DWORD *)(j + 88))
          {
            long long v63 = *v59;
            long long v64 = *(void *)(j + 88);
            unsigned int v65 = *(void *)(a2 - 8);
            *uint64_t v59 = *v60;
            *(void *)(j + 88) = v65;
            *(void *)(a2 - 8) = v64;
            *int v60 = v63;
            if (*(void *)v59 < *(void *)v58
              || *(void *)v59 == *(void *)v58 && *(_DWORD *)(j + 88) < *(_DWORD *)(j + 64))
            {
              unsigned int v66 = *(void *)(j + 64);
              long long v67 = *v58;
              long long *v58 = *v59;
              *(void *)(j + 64) = *(void *)(j + 88);
              *uint64_t v59 = v67;
              *(void *)(j + 88) = v66;
              if (*(void *)v58 < *(void *)v57
                || *(void *)v58 == *(void *)v57 && *(_DWORD *)(j + 64) < *(_DWORD *)(j + 40))
              {
                long long v68 = *(void *)(j + 40);
                long long v69 = *v57;
                *long long v57 = *v58;
                *(void *)(j + 40) = *(void *)(j + 64);
                long long *v58 = v69;
                *(void *)(j + 64) = v68;
                unsigned int v70 = *(void *)(j + 24);
                if (v70 < *(void *)j || v70 == *(void *)j && *(_DWORD *)(j + 40) < *(_DWORD *)(j + 16))
                {
                  long long v144 = *(void *)(j + 16);
                  uint32x4_t v138 = *(_OWORD *)j;
                  *(_OWORD *)uint64_t j = *v57;
                  *(void *)(j + 16) = *(void *)(j + 40);
                  *long long v57 = v138;
                  *(void *)(j + 40) = v144;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 575)
    {
      unsigned int v71 = j + 24;
      long long v73 = j == a2 || v71 == a2;
      if (a4)
      {
        if (v73) {
          return;
        }
        long long v74 = 0;
        unsigned int v75 = j;
        while (2)
        {
          unsigned int v76 = v75;
          unsigned int v75 = v71;
          long long v77 = *(void *)(v76 + 24);
          if (v77 < *(void *)v76)
          {
            BOOL v78 = *(_DWORD *)(v76 + 40);
            goto LABEL_111;
          }
          if (v77 == *(void *)v76)
          {
            BOOL v78 = *(_DWORD *)(v76 + 40);
            if (v78 < *(_DWORD *)(v76 + 16))
            {
LABEL_111:
              BOOL v79 = *(void *)(v76 + 32);
              BOOL v80 = *(_DWORD *)(v76 + 44);
              *(_OWORD *)unsigned int v75 = *(_OWORD *)v76;
              *(void *)(v75 + 16) = *(void *)(v76 + 16);
              uint64_t v81 = j;
              if (v76 != j)
              {
                unint64_t v82 = v74;
                do
                {
                  unint64_t v83 = j + v82;
                  unsigned int v84 = *(void *)(j + v82 - 24);
                  if (v77 >= v84)
                  {
                    if (v77 != v84)
                    {
                      uint64_t v81 = v76;
                      goto LABEL_122;
                    }
                    uint64_t v81 = j + v82;
                    if (v78 >= *(_DWORD *)(j + v82 - 8)) {
                      goto LABEL_122;
                    }
                  }
                  v76 -= 24;
                  *(_OWORD *)unint64_t v83 = *(_OWORD *)(j + v82 - 24);
                  *(void *)(v83 + 16) = *(void *)(j + v82 - 8);
                  v82 -= 24;
                }
                while (v82);
                uint64_t v81 = j;
              }
LABEL_122:
              *(void *)uint64_t v81 = v77;
              *(void *)(v81 + 8) = v79;
              *(_DWORD *)(v81 + 16) = v78;
              *(_DWORD *)(v81 + 20) = v80;
            }
          }
          unsigned int v71 = v75 + 24;
          v74 += 24;
          if (v75 + 24 == a2) {
            return;
          }
          continue;
        }
      }
      if (v73) {
        return;
      }
      while (2)
      {
        unint64_t v126 = a1;
        a1 = v71;
        unint64_t v127 = *(void *)(v126 + 24);
        if (v127 >= *(void *)v126)
        {
          if (v127 == *(void *)v126)
          {
            unint64_t v128 = *(_DWORD *)(v126 + 40);
            if (v128 < *(_DWORD *)(v126 + 16)) {
              goto LABEL_183;
            }
          }
        }
        else
        {
          unint64_t v128 = *(_DWORD *)(v126 + 40);
LABEL_183:
          unsigned int v129 = *(void *)(v126 + 32);
          unsigned int v130 = *(_DWORD *)(v126 + 44);
          do
          {
            do
            {
              unsigned int v131 = v126;
              *(_OWORD *)(v126 + 24) = *(_OWORD *)v126;
              *(void *)(v126 + 40) = *(void *)(v126 + 16);
              unsigned int v132 = *(void *)(v126 - 24);
              v126 -= 24;
              long long v133 = v127 == v132;
            }
            while (v127 < v132);
          }
          while (v133 && v128 < *(_DWORD *)(v131 - 8));
          *(void *)unsigned int v131 = v127;
          *(void *)(v131 + 8) = v129;
          *(_DWORD *)(v131 + 16) = v128;
          *(_DWORD *)(v131 + 20) = v130;
        }
        unsigned int v71 = a1 + 24;
        if (a1 + 24 == a2) {
          return;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (unint64_t *)(j + 24 * (v13 >> 1));
    if ((unint64_t)v12 >= 0xC01)
    {
      sub_1CC874290((long long *)a1, (unint64_t *)(a1 + 24 * (v13 >> 1)), (long long *)(a2 - 24));
      long long v16 = 3 * v14;
      unsigned int v17 = (unint64_t *)(a1 + 24 * v14 - 24);
      sub_1CC874290((long long *)(a1 + 24), v17, (long long *)(a2 - 48));
      unsigned int v18 = (unint64_t *)(a1 + 24 + 8 * v16);
      sub_1CC874290((long long *)(a1 + 48), v18, (long long *)(a2 - 72));
      sub_1CC874290((long long *)v17, v15, (long long *)v18);
      unsigned int v140 = *(void *)(a1 + 16);
      unint64_t v134 = *(_OWORD *)a1;
      uint64_t v19 = v15[2];
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(void *)(a1 + 16) = v19;
      v15[2] = v140;
      *(_OWORD *)uint64_t v15 = v134;
    }
    else
    {
      sub_1CC874290((long long *)(a1 + 24 * (v13 >> 1)), (unint64_t *)a1, (long long *)(a2 - 24));
    }
    --a3;
    unsigned int v20 = *(void *)a1;
    if (a4) {
      goto LABEL_14;
    }
    unsigned int v21 = *(void *)(a1 - 24);
    if (v21 < v20) {
      goto LABEL_14;
    }
    if (v21 == v20)
    {
      unsigned int v40 = *(_DWORD *)(a1 + 16);
      if (*(_DWORD *)(a1 - 8) >= v40) {
        goto LABEL_51;
      }
LABEL_14:
      unint64_t v22 = 0;
      unsigned int v23 = *(void *)(a1 + 8);
      uint64_t v24 = *(void *)(a1 + 16);
      while (1)
      {
        int v25 = *(void *)(a1 + v22 + 24);
        if (v25 >= v20 && (v25 != v20 || *(_DWORD *)(a1 + v22 + 40) >= v24)) {
          break;
        }
        v22 += 24;
      }
      unsigned int v26 = a1 + v22 + 24;
      if (v22)
      {
        unsigned int v27 = *v10;
        for (unint64_t i = a2 - 24; v27 >= v20 && (v27 != v20 || *(_DWORD *)(i + 16) >= v24); i -= 24)
        {
          long long v29 = *(void *)(i - 24);
          unsigned int v27 = v29;
        }
      }
      else
      {
        unint64_t i = a2;
        if (v26 < a2)
        {
          unsigned int v30 = *v10;
          unint64_t i = a2 - 24;
          if (*v10 >= v20)
          {
            unint64_t i = a2 - 24;
            do
            {
              if (v30 == v20)
              {
                if (v26 >= i || *(_DWORD *)(i + 16) < v24) {
                  break;
                }
              }
              else if (v26 >= i)
              {
                break;
              }
              unsigned int v31 = *(void *)(i - 24);
              i -= 24;
              unsigned int v30 = v31;
            }
            while (v31 >= v20);
          }
        }
      }
      uint64_t j = v26;
      if (v26 < i)
      {
        uint64_t v32 = i;
        do
        {
          unsigned int v141 = *(void *)(j + 16);
          unint64_t v135 = *(_OWORD *)j;
          unsigned int v33 = *(_OWORD *)v32;
          *(void *)(j + 16) = *(void *)(v32 + 16);
          *(_OWORD *)uint64_t j = v33;
          *(void *)(v32 + 16) = v141;
          *(_OWORD *)uint64_t v32 = v135;
          do
          {
            do
            {
              int v34 = *(void *)(j + 24);
              j += 24;
              long long v35 = v34 == v20;
            }
            while (v34 < v20);
          }
          while (v35 && *(_DWORD *)(j + 16) < v24);
          do
          {
            int v37 = *(void *)(v32 - 24);
            v32 -= 24;
            BOOL v36 = v37;
          }
          while (v37 >= v20 && (v36 != v20 || *(_DWORD *)(v32 + 16) >= v24));
        }
        while (j < v32);
      }
      if (j - 24 != a1)
      {
        int v38 = *(_OWORD *)(j - 24);
        *(void *)(a1 + 16) = *(void *)(j - 8);
        *(_OWORD *)a1 = v38;
      }
      *(void *)(j - 24) = v20;
      *(void *)(j - 16) = v23;
      *(void *)(j - 8) = v24;
      if (v26 < i) {
        goto LABEL_50;
      }
      unsigned int v39 = sub_1CC8743F4(a1, j - 24);
      if (sub_1CC8743F4(j, a2))
      {
        a2 = j - 24;
        if (v39) {
          return;
        }
        goto LABEL_1;
      }
      if (!v39)
      {
LABEL_50:
        sub_1CC873704(a1, j - 24, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      unsigned int v40 = *(_DWORD *)(a1 + 16);
LABEL_51:
      unsigned int v41 = *v10;
      if (v20 < *v10 || v20 == *v10 && v40 < *(_DWORD *)(a2 - 8))
      {
        uint64_t j = a1;
        do
        {
          unsigned int v43 = *(void *)(j + 24);
          j += 24;
          unsigned int v42 = v43;
        }
        while (v20 >= v43 && (v20 != v42 || v40 >= *(_DWORD *)(j + 16)));
      }
      else
      {
        for (uint64_t j = a1 + 24; j < a2 && v20 >= *(void *)j && (v20 != *(void *)j || v40 >= *(_DWORD *)(j + 16)); j += 24)
          ;
      }
      unint64_t k = a2;
      if (j < a2)
      {
        for (unint64_t k = a2 - 24; v20 < v41 || v20 == v41 && v40 < *(_DWORD *)(k + 16); k -= 24)
        {
          unsigned int v45 = *(void *)(k - 24);
          unsigned int v41 = v45;
        }
      }
      int v46 = *(void *)(a1 + 8);
      unsigned int v47 = *(_DWORD *)(a1 + 20);
      while (j < k)
      {
        unsigned int v142 = *(void *)(j + 16);
        unsigned int v136 = *(_OWORD *)j;
        long long v48 = *(_OWORD *)k;
        *(void *)(j + 16) = *(void *)(k + 16);
        *(_OWORD *)uint64_t j = v48;
        *(void *)(k + 16) = v142;
        *(_OWORD *)unint64_t k = v136;
        do
        {
          int v50 = *(void *)(j + 24);
          j += 24;
          unsigned int v49 = v50;
        }
        while (v20 >= v50 && (v20 != v49 || v40 >= *(_DWORD *)(j + 16)));
        do
        {
          do
          {
            unsigned int v51 = *(void *)(k - 24);
            k -= 24;
            unsigned int v52 = v20 == v51;
          }
          while (v20 < v51);
        }
        while (v52 && v40 < *(_DWORD *)(k + 16));
      }
      BOOL v4 = j - 24 >= a1;
      BOOL v5 = j - 24 == a1;
      if (j - 24 != a1)
      {
        unsigned int v53 = *(_OWORD *)(j - 24);
        *(void *)(a1 + 16) = *(void *)(j - 8);
        *(_OWORD *)a1 = v53;
      }
      a4 = 0;
      *(void *)(j - 24) = v20;
      *(void *)(j - 16) = v46;
      *(_DWORD *)(j - 8) = v40;
      *(_DWORD *)(j - 4) = v47;
    }
  }
  if (j != a2)
  {
    unsigned int v85 = (v13 - 2) >> 1;
    unsigned int v86 = v85;
    while (2)
    {
      long long v87 = v86;
      if (v85 >= v86)
      {
        unint64_t v88 = (2 * v86) | 1;
        uint64_t v89 = j + 24 * v88;
        BOOL v90 = 2 * v86 + 2;
        if (v90 >= (uint64_t)v13
          || (unsigned int v91 = (unint64_t *)(v89 + 24), v92 = *(void *)(v89 + 24), *(void *)v89 >= v92)
          && (*(void *)v89 != v92 || *(_DWORD *)(j + 24 * v88 + 16) >= *(_DWORD *)(v89 + 40)))
        {
          unsigned int v91 = (unint64_t *)(j + 24 * v88);
          BOOL v90 = (2 * v87) | 1;
        }
        int64_t v93 = j + 24 * v87;
        int64_t v94 = *(void *)v93;
        if (*v91 >= *(void *)v93)
        {
          if (*v91 != *(void *)v93)
          {
            int64_t v95 = *(_DWORD *)(v93 + 16);
            goto LABEL_137;
          }
          int64_t v95 = *(_DWORD *)(j + 24 * v87 + 16);
          if (*((_DWORD *)v91 + 4) >= v95)
          {
LABEL_137:
            uint64_t v96 = *(void *)(v93 + 8);
            unint64_t v97 = *(_DWORD *)(v93 + 20);
            unsigned int v98 = v91[2];
            *(_OWORD *)int64_t v93 = *(_OWORD *)v91;
            *(void *)(v93 + 16) = v98;
            if (v85 >= v90)
            {
              while (1)
              {
                BOOL v100 = (2 * v90) | 1;
                unsigned int v101 = j + 24 * v100;
                BOOL v90 = 2 * v90 + 2;
                if (v90 >= (uint64_t)v13
                  || (unsigned int v99 = (unint64_t *)(v101 + 24), v102 = *(void *)(v101 + 24), *(void *)v101 >= v102)
                  && (*(void *)v101 != v102 || *(_DWORD *)(j + 24 * v100 + 16) >= *(_DWORD *)(v101 + 40)))
                {
                  unsigned int v99 = (unint64_t *)(j + 24 * v100);
                  BOOL v90 = v100;
                }
                if (*v99 < v94 || *v99 == v94 && *((_DWORD *)v99 + 4) < v95) {
                  break;
                }
                unint64_t v103 = *(_OWORD *)v99;
                v91[2] = v99[2];
                *(_OWORD *)unsigned int v91 = v103;
                unsigned int v91 = v99;
                if (v85 < v90) {
                  goto LABEL_148;
                }
              }
            }
            unsigned int v99 = v91;
LABEL_148:
            *unsigned int v99 = v94;
            v99[1] = v96;
            *((_DWORD *)v99 + 4) = v95;
            *((_DWORD *)v99 + 5) = v97;
          }
        }
      }
      unsigned int v86 = v87 - 1;
      if (v87) {
        continue;
      }
      break;
    }
    while (2)
    {
      unsigned int v104 = 0;
      unsigned int v145 = *(void *)(j + 16);
      unint64_t v139 = *(_OWORD *)j;
      long long v105 = j;
      do
      {
        unint64_t v106 = v105;
        uint64_t v107 = v104 + 1;
        uint64_t v108 = v105 + 24 * (v104 + 1);
        unsigned int v109 = (2 * v104) | 1;
        unsigned int v104 = 2 * v104 + 2;
        if (v104 >= (uint64_t)v13
          || (long long v105 = v108 + 24, v110 = *(void *)(v108 + 24), *(void *)v108 >= v110)
          && (*(void *)v108 != v110 || *(_DWORD *)(v106 + 24 * v107 + 16) >= *(_DWORD *)(v108 + 40)))
        {
          long long v105 = v108;
          unsigned int v104 = v109;
        }
        BOOL v111 = *(_OWORD *)v105;
        *(void *)(v106 + 16) = *(void *)(v105 + 16);
        *(_OWORD *)unint64_t v106 = v111;
      }
      while (v104 <= (uint64_t)((v13 - 2) >> 1));
      a2 -= 24;
      if (v105 == a2)
      {
        *(void *)(v105 + 16) = v145;
        *(_OWORD *)long long v105 = v139;
        goto LABEL_171;
      }
      unsigned int v112 = *(_OWORD *)a2;
      *(void *)(v105 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)long long v105 = v112;
      *(void *)(a2 + 16) = v145;
      *(_OWORD *)a2 = v139;
      long long v113 = v105 - j + 24;
      if (v113 >= 25)
      {
        uint64_t v114 = v113 / 0x18uLL - 2;
        unint64_t v115 = v114 >> 1;
        uint32x4_t v116 = (unint64_t *)(j + 24 * (v114 >> 1));
        uint64_t v117 = *(void *)v105;
        if (*v116 < *(void *)v105)
        {
          uint64_t v118 = *(_DWORD *)(v105 + 16);
          goto LABEL_162;
        }
        if (*v116 == *(void *)v105)
        {
          uint64_t v118 = *(_DWORD *)(v105 + 16);
          if (*(_DWORD *)(j + 24 * v115 + 16) < v118)
          {
LABEL_162:
            uint64_t v119 = *(void *)(v105 + 8);
            unsigned int v120 = *(_DWORD *)(v105 + 20);
            unsigned int v121 = v116[2];
            *(_OWORD *)long long v105 = *(_OWORD *)v116;
            *(void *)(v105 + 16) = v121;
            if (v114 >= 2)
            {
              while (1)
              {
                long long v123 = v115 - 1;
                unint64_t v115 = (v115 - 1) >> 1;
                BOOL v122 = (unint64_t *)(j + 24 * v115);
                if (*v122 >= v117 && (*v122 != v117 || *(_DWORD *)(j + 24 * v115 + 16) >= v118)) {
                  break;
                }
                long long v124 = *(_OWORD *)v122;
                v116[2] = v122[2];
                *(_OWORD *)uint32x4_t v116 = v124;
                uint32x4_t v116 = (unint64_t *)(j + 24 * v115);
                if (v123 <= 1) {
                  goto LABEL_168;
                }
              }
            }
            BOOL v122 = v116;
LABEL_168:
            *BOOL v122 = v117;
            v122[1] = v119;
            *((_DWORD *)v122 + 4) = v118;
            *((_DWORD *)v122 + 5) = v120;
          }
        }
      }
LABEL_171:
      if ((uint64_t)v13-- <= 2) {
        return;
      }
      continue;
    }
  }
}

  int v10 = (__n128 *)((char *)a2 - 24);
  int v11 = a1;
  while (1)
  {
    a1 = v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    if (!(!v5 & v4))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (llvm::MachObjectWriter::MachSymbolData::operator<(&a2[-2].n128_u64[1], v11))
          {
            unsigned int v20 = *v11;
            unsigned int v58 = v11[1].n128_u64[0];
            long long v57 = v20;
            unsigned int v21 = *v10;
            v11[1].n128_u64[0] = a2[-1].n128_u64[1];
            *int v11 = v21;
            unint64_t v22 = v57;
            a2[-1].n128_u64[1] = v58;
            *int v10 = v22;
          }
          break;
        case 3uLL:
          sub_1CCBE2614(v11, &v11[1].n128_u64[1], &a2[-2].n128_u64[1]);
          break;
        case 4uLL:
          sub_1CCBE2A60(v11, &v11[1].n128_u64[1], (__n128 *)v11[3].n128_u64, &a2[-2].n128_u64[1]);
          break;
        case 5uLL:
          sub_1CCBE2B30(v11, &v11[1].n128_u64[1], (__n128 *)v11[3].n128_u64, &v11[4].n128_u64[1], &a2[-2].n128_u64[1]);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 575) {
      break;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        sub_1CCBE2C3C(v11, a2, a2);
      }
      return;
    }
    uint64_t v32 = v13 >> 1;
    unsigned int v33 = (__n128 *)((char *)v11 + 24 * (v13 >> 1));
    if ((unint64_t)v12 < 0xC01)
    {
      sub_1CCBE2614(&a1->n128_u64[3 * (v13 >> 1)], a1, &a2[-2].n128_u64[1]);
    }
    else
    {
      sub_1CCBE2614(a1, &a1->n128_u64[3 * (v13 >> 1)], &a2[-2].n128_u64[1]);
      long long v48 = 3 * v32;
      unsigned int v49 = (void *)&a1[-1] + 3 * v32 - 1;
      sub_1CCBE2614(&a1[1].n128_u64[1], v49, (__n128 *)a2[-3].n128_u64);
      int v50 = &a1[1].n128_u64[v48 + 1];
      sub_1CCBE2614((__n128 *)a1[3].n128_u64, v50, &a2[-5].n128_u64[1]);
      sub_1CCBE2614(v49, v33, v50);
      unsigned int v51 = *a1;
      unsigned int v58 = a1[1].n128_u64[0];
      long long v57 = v51;
      unsigned int v52 = v33[1].n128_u64[0];
      *a1 = *v33;
      a1[1].n128_u64[0] = v52;
      unsigned int v53 = v57;
      v33[1].n128_u64[0] = v58;
      *unsigned int v33 = v53;
    }
    --a3;
    if ((a4 & 1) != 0 || llvm::MachObjectWriter::MachSymbolData::operator<(&a1[-2].n128_u64[1], a1))
    {
      int v34 = 0;
      long long v35 = *a1;
      unsigned int v56 = a1[1].n128_u64[0];
      unsigned int v55 = v35;
      do
        v34 += 3;
      while (llvm::MachObjectWriter::MachSymbolData::operator<(&a1->n128_u64[v34], &v55));
      BOOL v36 = (char *)a1 + v34 * 8;
      int v37 = a2;
      if (v34 == 3)
      {
        int v37 = a2;
        do
        {
          if (v36 >= (char *)v37) {
            break;
          }
          int v37 = (__n128 *)((char *)v37 - 24);
        }
        while (!llvm::MachObjectWriter::MachSymbolData::operator<(v37, &v55));
      }
      else
      {
        do
          int v37 = (__n128 *)((char *)v37 - 24);
        while (!llvm::MachObjectWriter::MachSymbolData::operator<(v37, &v55));
      }
      if (v36 >= (char *)v37)
      {
        uint64_t v19 = (__n128 *)(v36 - 24);
      }
      else
      {
        unsigned int v17 = &a1->n128_u64[v34];
        unsigned int v18 = v37;
        do
        {
          unint64_t v14 = *(__n128 *)v17;
          unsigned int v58 = v17[2];
          long long v57 = v14;
          uint64_t v15 = *v18;
          v17[2] = v18[1].n128_u64[0];
          *(__n128 *)unsigned int v17 = v15;
          long long v16 = v57;
          v18[1].n128_u64[0] = v58;
          *unsigned int v18 = v16;
          do
            v17 += 3;
          while (llvm::MachObjectWriter::MachSymbolData::operator<(v17, &v55));
          do
            unsigned int v18 = (__n128 *)((char *)v18 - 24);
          while (!llvm::MachObjectWriter::MachSymbolData::operator<(v18, &v55));
        }
        while (v17 < (unint64_t *)v18);
        uint64_t v19 = (__n128 *)(v17 - 3);
      }
      if (v19 != a1)
      {
        int v46 = *v19;
        a1[1].n128_u64[0] = v19[1].n128_u64[0];
        *a1 = v46;
      }
      unsigned int v47 = v55;
      v19[1].n128_u64[0] = v56;
      *uint64_t v19 = v47;
      if (v36 < (char *)v37) {
        goto LABEL_60;
      }
      long long v54 = sub_1CCBE2878(a1, v19);
      int v11 = (__n128 *)((char *)v19 + 24);
      if (sub_1CCBE2878((__n128 *)((char *)v19 + 24), a2))
      {
        a2 = v19;
        if (v54) {
          return;
        }
        goto LABEL_1;
      }
      if (!v54)
      {
LABEL_60:
        sub_1CCBE208C(a1, v19, a3, a4 & 1);
        a4 = 0;
        int v11 = (__n128 *)((char *)v19 + 24);
      }
    }
    else
    {
      int v11 = (__n128 *)sub_1CCBE2734(a1, a2);
    }
  }
  unsigned int v23 = (__n128 *)((char *)v11 + 24);
  int v25 = v11 == a2 || v23 == a2;
  if (a4)
  {
    if (!v25)
    {
      int v38 = 0;
      unsigned int v39 = v11;
      do
      {
        unsigned int v40 = v39;
        unsigned int v39 = v23;
        if (llvm::MachObjectWriter::MachSymbolData::operator<(v23, v40))
        {
          unsigned int v41 = *v39;
          unsigned int v58 = v39[1].n128_u64[0];
          long long v57 = v41;
          unsigned int v42 = v38;
          while (1)
          {
            unsigned int v43 = (char *)v11 + v42;
            *(__n128 *)(v43 + 24) = *(__n128 *)((char *)v11 + v42);
            *((void *)v43 + 5) = *(unint64_t *)((char *)v11[1].n128_u64 + v42);
            if (!v42) {
              break;
            }
            v42 -= 24;
            if (!llvm::MachObjectWriter::MachSymbolData::operator<(&v57, (unint64_t *)((char *)v11->n128_u64 + v42)))
            {
              int v44 = (uint64_t)&v11[1].n128_i64[1] + v42;
              goto LABEL_53;
            }
          }
          int v44 = (uint64_t)v11;
LABEL_53:
          unsigned int v45 = v57;
          *(void *)(v44 + 16) = v58;
          *(__n128 *)int v44 = v45;
        }
        unsigned int v23 = (__n128 *)((char *)v39 + 24);
        v38 += 24;
      }
      while (&v39[1].n128_i8[8] != (__int8 *)a2);
    }
  }
  else if (!v25)
  {
    unsigned int v26 = &v11[-2].n128_i8[8];
    do
    {
      unsigned int v27 = a1;
      a1 = v23;
      if (llvm::MachObjectWriter::MachSymbolData::operator<(v23, v27))
      {
        unint64_t v28 = *a1;
        unsigned int v58 = a1[1].n128_u64[0];
        long long v57 = v28;
        long long v29 = v26;
        do
        {
          *((_OWORD *)v29 + 3) = *(_OWORD *)(v29 + 24);
          *((void *)v29 + 8) = *((void *)v29 + 5);
          unsigned int v30 = llvm::MachObjectWriter::MachSymbolData::operator<(&v57, v29);
          v29 -= 24;
        }
        while (v30);
        unsigned int v31 = v57;
        *((void *)v29 + 8) = v58;
        *((__n128 *)v29 + 3) = v31;
      }
      unsigned int v23 = (__n128 *)((char *)a1 + 24);
      v26 += 24;
    }
    while (&a1[1].n128_i8[8] != (__int8 *)a2);
  }
}

  int v10 = (__n128 *)(a2 - 16);
  unsigned int v140 = (__n128 *)(a2 - 48);
  unsigned int v141 = (__n128 *)(a2 - 32);
  int v11 = a1;
  long long v144 = (__n128 *)a2;
  while (1)
  {
    a1 = v11;
    uint64_t v12 = a2 - (void)v11;
    uint64_t v13 = (uint64_t)(a2 - (void)v11) >> 4;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return FragmentInfo.n128_f64[0];
        case 2:
          unsigned int v65 = *(void *)(a2 - 8);
          unsigned int v66 = v11->n128_u64[1];
          if (v65) {
            long long v67 = v66 == 0;
          }
          else {
            long long v67 = 1;
          }
          if (v67)
          {
            if (!v66) {
              return FragmentInfo.n128_f64[0];
            }
          }
          else
          {
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v65 + 24), *(uint64_t **)(v65 + 32), (int8x16_t *)&v148);
            FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v66 + 24), (uint64_t *)*(void *)(v66 + 32), &v146).u64[0];
            if (v149 && v147)
            {
              if (v148.n128_u64[1] >= v146.i64[1]) {
                return FragmentInfo.n128_f64[0];
              }
            }
            else if (!v147)
            {
              return FragmentInfo.n128_f64[0];
            }
          }
          long long v148 = *a1;
          *a1 = *v10;
          FragmentInfo.n128_u64[0] = v148.n128_u64[0];
          *int v10 = v148;
          break;
        case 3:
          FragmentInfo.n128_u64[0] = sub_1CD2A6F70(v11, v11 + 1, v10, FragmentInfo).n128_u64[0];
          return FragmentInfo.n128_f64[0];
        case 4:
          FragmentInfo.n128_u64[0] = sub_1CD2A7488(v11, v11 + 1, v11 + 2, v10, FragmentInfo).n128_u64[0];
          return FragmentInfo.n128_f64[0];
        case 5:
          FragmentInfo.n128_u64[0] = sub_1CD2A6D80(v11, v11 + 1, v11 + 2, v11 + 3, v10, FragmentInfo).n128_u64[0];
          return FragmentInfo.n128_f64[0];
        default:
          JUMPOUT(0);
      }
      return FragmentInfo.n128_f64[0];
    }
    if (v12 <= 383) {
      break;
    }
    if (!a3)
    {
      if (v11 == (__n128 *)a2) {
        return FragmentInfo.n128_f64[0];
      }
      unint64_t v82 = (unint64_t)(v13 - 2) >> 1;
      unint64_t v83 = v82;
      do
      {
        unsigned int v84 = v83;
        if (v82 < v83) {
          goto LABEL_288;
        }
        unsigned int v85 = (2 * v83) | 1;
        unsigned int v86 = &a1[v85];
        if (2 * v83 + 2 < v13)
        {
          long long v87 = v86->n128_u64[1];
          unint64_t v88 = v86[1].n128_u64[1];
          uint64_t v89 = v88 != 0;
          if (v87) {
            BOOL v90 = v88 == 0;
          }
          else {
            BOOL v90 = 1;
          }
          if (!v90)
          {
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v87 + 24), *(uint64_t **)(v87 + 32), (int8x16_t *)&v148);
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v88 + 24), *(uint64_t **)(v88 + 32), &v146);
            uint64_t v89 = v147 != 0;
            if (v149)
            {
              if (v147) {
                uint64_t v89 = v148.n128_u64[1] < v146.i64[1];
              }
            }
          }
          v86 += v89;
          if (v89) {
            unsigned int v85 = 2 * v84 + 2;
          }
        }
        unsigned int v91 = &a1[v84];
        long long v92 = v86->n128_u64[1];
        int64_t v93 = v91->n128_u64[1];
        if (v92) {
          int64_t v94 = v93 == 0;
        }
        else {
          int64_t v94 = 1;
        }
        if (v94)
        {
          if (v93) {
            goto LABEL_288;
          }
        }
        else
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v92 + 24), *(uint64_t **)(v92 + 32), (int8x16_t *)&v148);
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v93 + 24), *(uint64_t **)(v93 + 32), &v146);
          if (v149 && v147)
          {
            if (v148.n128_u64[1] < v146.i64[1]) {
              goto LABEL_288;
            }
          }
          else if (v147)
          {
            goto LABEL_288;
          }
        }
        int64_t v95 = v91->n128_u64[0];
        *unsigned int v91 = *v86;
        unint64_t v143 = v95;
        if (v82 < v85) {
          goto LABEL_287;
        }
        while (1)
        {
          uint64_t v96 = v86;
          unint64_t v97 = 2 * v85;
          unsigned int v85 = (2 * v85) | 1;
          unsigned int v86 = &a1[v85];
          unsigned int v98 = v97 + 2;
          if (v97 + 2 < v13)
          {
            unsigned int v99 = v86->n128_u64[1];
            BOOL v100 = v86[1].n128_u64[1];
            unsigned int v101 = v100 != 0;
            if (v99) {
              unsigned int v102 = v100 == 0;
            }
            else {
              unsigned int v102 = 1;
            }
            if (!v102)
            {
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v99 + 24), *(uint64_t **)(v99 + 32), (int8x16_t *)&v148);
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v100 + 24), *(uint64_t **)(v100 + 32), &v146);
              unsigned int v101 = v147 != 0;
              if (v149)
              {
                if (v147) {
                  unsigned int v101 = v148.n128_u64[1] < v146.i64[1];
                }
              }
            }
            v86 += v101;
            if (v101) {
              unsigned int v85 = v98;
            }
          }
          unint64_t v103 = v86->n128_u64[1];
          if (v103) {
            unsigned int v104 = v93 == 0;
          }
          else {
            unsigned int v104 = 1;
          }
          if (v104)
          {
            if (v93) {
              break;
            }
            goto LABEL_284;
          }
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v103 + 24), *(uint64_t **)(v103 + 32), (int8x16_t *)&v148);
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v93 + 24), *(uint64_t **)(v93 + 32), &v146);
          if (v149 && v147)
          {
            if (v148.n128_u64[1] < v146.i64[1]) {
              break;
            }
            goto LABEL_284;
          }
          if (v147) {
            break;
          }
LABEL_284:
          _DWORD *v96 = *v86;
          if (v82 < v85) {
            goto LABEL_287;
          }
        }
        unsigned int v86 = v96;
LABEL_287:
        v86->n128_u64[0] = v143;
        v86->n128_u64[1] = v93;
LABEL_288:
        unint64_t v83 = v84 - 1;
      }
      while (v84);
      long long v105 = v144;
      while (1)
      {
        unint64_t v106 = 0;
        unsigned int v145 = *a1;
        uint64_t v107 = a1;
        do
        {
          uint64_t v108 = (uint64_t)&v107[v106 + 1];
          unsigned int v109 = (2 * v106) | 1;
          unsigned int v110 = 2 * v106 + 2;
          if (v110 < v13)
          {
            BOOL v111 = *((void *)&v107[v106 + 1] + 1);
            unsigned int v112 = *((void *)&v107[v106 + 2] + 1);
            long long v113 = v112 != 0;
            if (v111) {
              uint64_t v114 = v112 == 0;
            }
            else {
              uint64_t v114 = 1;
            }
            if (!v114)
            {
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v111 + 24), *(uint64_t **)(v111 + 32), (int8x16_t *)&v148);
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v112 + 24), *(uint64_t **)(v112 + 32), &v146);
              long long v113 = v147 != 0;
              if (v149)
              {
                if (v147) {
                  long long v113 = v148.n128_u64[1] < v146.i64[1];
                }
              }
            }
            v108 += 16 * v113;
            if (v113) {
              unsigned int v109 = v110;
            }
          }
          *uint64_t v107 = *(_OWORD *)v108;
          uint64_t v107 = (_OWORD *)v108;
          unint64_t v106 = v109;
        }
        while (v109 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
        unint64_t v115 = v105 - 1;
        if ((__n128 *)v108 == &v105[-1])
        {
          --v105;
          FragmentInfo.n128_u64[0] = v145.n128_u64[0];
          *(__n128 *)uint64_t v108 = v145;
        }
        else
        {
          *(__n128 *)uint64_t v108 = *v115;
          FragmentInfo.n128_u64[0] = v145.n128_u64[0];
          --v105;
          *unint64_t v115 = v145;
          uint32x4_t v116 = v108 - (void)a1 + 16;
          if (v116 >= 17)
          {
            uint64_t v117 = ((unint64_t)v116 >> 4) - 2;
            uint64_t v118 = v117 >> 1;
            uint64_t v119 = &a1[v117 >> 1];
            unsigned int v120 = v119->n128_u64[1];
            unsigned int v121 = *(void *)(v108 + 8);
            if (v120) {
              BOOL v122 = v121 == 0;
            }
            else {
              BOOL v122 = 1;
            }
            if (v122)
            {
              if (v121) {
                goto LABEL_318;
              }
            }
            else
            {
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v120 + 24), *(uint64_t **)(v120 + 32), (int8x16_t *)&v148);
              FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v121 + 24), (uint64_t *)*(void *)(v121 + 32), &v146).u64[0];
              if (v149 && v147)
              {
                if (v148.n128_u64[1] < v146.i64[1]) {
                  goto LABEL_317;
                }
              }
              else if (v147)
              {
LABEL_317:
                unsigned int v121 = *(void *)(v108 + 8);
LABEL_318:
                long long v123 = *(void *)v108;
                FragmentInfo = *v119;
                *(__n128 *)uint64_t v108 = *v119;
                if (v117 >= 2)
                {
                  do
                  {
                    uint64_t v125 = v118 - 1;
                    uint64_t v118 = (v118 - 1) >> 1;
                    long long v124 = &a1[v118];
                    unint64_t v126 = v124->n128_u64[1];
                    if (v126) {
                      unint64_t v127 = v121 == 0;
                    }
                    else {
                      unint64_t v127 = 1;
                    }
                    if (v127)
                    {
                      if (!v121) {
                        goto LABEL_319;
                      }
                    }
                    else
                    {
                      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v126 + 24), *(uint64_t **)(v126 + 32), (int8x16_t *)&v148);
                      FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v121 + 24), (uint64_t *)*(void *)(v121 + 32), &v146).u64[0];
                      if (v149) {
                        unint64_t v128 = v147 == 0;
                      }
                      else {
                        unint64_t v128 = 1;
                      }
                      if (v128)
                      {
                        if (!v147) {
                          goto LABEL_319;
                        }
                      }
                      else if (v148.n128_u64[1] >= v146.i64[1])
                      {
                        goto LABEL_319;
                      }
                    }
                    FragmentInfo = *v124;
                    *uint64_t v119 = *v124;
                    uint64_t v119 = &a1[v118];
                  }
                  while (v125 > 1);
                }
                else
                {
LABEL_319:
                  long long v124 = v119;
                }
                v124->n128_u64[0] = v123;
                v124->n128_u64[1] = v121;
              }
            }
          }
        }
        if (v13-- <= 2) {
          return FragmentInfo.n128_f64[0];
        }
      }
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = &a1[(unint64_t)v13 >> 1];
    if ((unint64_t)v12 < 0x801)
    {
      FragmentInfo = sub_1CD2A6F70(v15, a1, v10, FragmentInfo);
    }
    else
    {
      long long v16 = sub_1CD2A6F70(a1, v15, v10, FragmentInfo);
      unsigned int v17 = sub_1CD2A6F70(a1 + 1, v15 - 1, v141, v16);
      unsigned int v18 = sub_1CD2A6F70(a1 + 2, &a1[v14 + 1], v140, v17);
      sub_1CD2A6F70(v15 - 1, v15, &a1[v14 + 1], v18);
      long long v148 = *a1;
      *a1 = *v15;
      FragmentInfo = v148;
      *uint64_t v15 = v148;
    }
    --a3;
    if (a4) {
      goto LABEL_17;
    }
    uint64_t v19 = a1[-1].n128_u64[1];
    unsigned int v20 = a1->n128_u64[1];
    if (v19 && v20)
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v19 + 24), *(uint64_t **)(v19 + 32), (int8x16_t *)&v148);
      FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v20 + 24), (uint64_t *)*(void *)(v20 + 32), &v146);
      if (v149 && v147)
      {
        if (v148.n128_u64[1] >= v146.i64[1]) {
          goto LABEL_115;
        }
        goto LABEL_17;
      }
      if (v147) {
        goto LABEL_17;
      }
LABEL_115:
      unsigned int v51 = a1->n128_u64[0];
      int v50 = a1->n128_u64[1];
      unsigned int v52 = *(void *)(a2 - 8);
      if (v50 && v52)
      {
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v50 + 24), *(uint64_t **)(v50 + 32), (int8x16_t *)&v148);
        FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v52 + 24), (uint64_t *)*(void *)(v52 + 32), &v146);
        if (v149 && v147)
        {
          if (v148.n128_u64[1] >= v146.i64[1]) {
            goto LABEL_120;
          }
        }
        else if (!v147)
        {
LABEL_120:
          int v11 = a1 + 1;
          if ((unint64_t)a1[1].n128_u64 < a2)
          {
            do
            {
              unsigned int v53 = v11->n128_u64[1];
              if (v50 && v53)
              {
                llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v50 + 24), *(uint64_t **)(v50 + 32), (int8x16_t *)&v148);
                FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v53 + 24), (uint64_t *)*(void *)(v53 + 32), &v146);
                if (v149 && v147)
                {
                  long long v54 = v144;
                  if (v148.n128_u64[1] < v146.i64[1]) {
                    goto LABEL_143;
                  }
                }
                else
                {
                  long long v54 = v144;
                  if (v147) {
                    goto LABEL_143;
                  }
                }
              }
              else
              {
                long long v54 = v144;
                if (v53) {
                  goto LABEL_143;
                }
              }
              ++v11;
            }
            while (v11 < v54);
          }
          goto LABEL_143;
        }
      }
      else if (!v52)
      {
        goto LABEL_120;
      }
      unsigned int v55 = a1 + 1;
      do
      {
        while (1)
        {
          while (1)
          {
            int v11 = v55;
            unsigned int v56 = v55->n128_u64[1];
            ++v55;
            if (v50)
            {
              if (v56) {
                break;
              }
            }
            if (v56) {
              goto LABEL_143;
            }
          }
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v50 + 24), *(uint64_t **)(v50 + 32), (int8x16_t *)&v148);
          FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v56 + 24), (uint64_t *)*(void *)(v56 + 32), &v146);
          if (!v149 || !v147) {
            break;
          }
          if (v148.n128_u64[1] < v146.i64[1]) {
            goto LABEL_143;
          }
        }
      }
      while (!v147);
LABEL_143:
      long long v57 = v144;
      if (v11 < v144)
      {
        unsigned int v58 = v10;
        do
        {
          while (1)
          {
            while (1)
            {
              long long v57 = v58;
              uint64_t v59 = v58->n128_u64[1];
              --v58;
              if (v50)
              {
                if (v59) {
                  break;
                }
              }
              if (!v59) {
                goto LABEL_175;
              }
            }
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v50 + 24), *(uint64_t **)(v50 + 32), (int8x16_t *)&v148);
            FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v59 + 24), (uint64_t *)*(void *)(v59 + 32), &v146);
            if (!v149 || !v147) {
              break;
            }
            if (v148.n128_u64[1] >= v146.i64[1]) {
              goto LABEL_175;
            }
          }
        }
        while (v147);
      }
LABEL_175:
      while (v11 < v57)
      {
        long long v148 = *v11;
        *int v11 = *v57;
        FragmentInfo = v148;
        *long long v57 = v148;
        int v60 = v11 + 1;
        do
        {
          while (1)
          {
            while (1)
            {
              int v11 = v60;
              unsigned int v61 = v60->n128_u64[1];
              ++v60;
              if (v50)
              {
                if (v61) {
                  break;
                }
              }
              if (v61) {
                goto LABEL_165;
              }
            }
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v50 + 24), *(uint64_t **)(v50 + 32), (int8x16_t *)&v148);
            FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v61 + 24), (uint64_t *)*(void *)(v61 + 32), &v146);
            if (!v149 || !v147) {
              break;
            }
            if (v148.n128_u64[1] < v146.i64[1]) {
              goto LABEL_165;
            }
          }
        }
        while (!v147);
LABEL_165:
        unsigned int v62 = v57 - 1;
        do
        {
          while (1)
          {
            while (1)
            {
              long long v57 = v62;
              long long v63 = v62->n128_i64[1];
              --v62;
              if (v50)
              {
                if (v63) {
                  break;
                }
              }
              if (!v63) {
                goto LABEL_175;
              }
            }
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v50 + 24), *(uint64_t **)(v50 + 32), (int8x16_t *)&v148);
            FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v63 + 24), (uint64_t *)*(void *)(v63 + 32), &v146);
            if (!v149 || !v147) {
              break;
            }
            if (v148.n128_u64[1] >= v146.i64[1]) {
              goto LABEL_175;
            }
          }
        }
        while (v147);
      }
      long long v64 = v11 - 1;
      BOOL v5 = &v11[-1] >= a1;
      int v6 = &v11[-1] == a1;
      a2 = (unint64_t)v144;
      if (&v11[-1] != a1)
      {
        FragmentInfo = *v64;
        *a1 = *v64;
      }
      a4 = 0;
      v11[-1].n128_u64[0] = v51;
      v11[-1].n128_u64[1] = v50;
    }
    else
    {
      if (!v20) {
        goto LABEL_115;
      }
LABEL_17:
      unsigned int v21 = 0;
      unsigned int v23 = a1->n128_u64[0];
      unint64_t v22 = a1->n128_u64[1];
      while (1)
      {
        uint64_t v24 = a1[v21 + 1].n128_u64[1];
        if (v24) {
          int v25 = v22 == 0;
        }
        else {
          int v25 = 1;
        }
        if (v25)
        {
          if (!v22) {
            goto LABEL_34;
          }
          goto LABEL_33;
        }
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v24 + 24), *(uint64_t **)(v24 + 32), (int8x16_t *)&v148);
        FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v22 + 24), (uint64_t *)*(void *)(v22 + 32), &v146);
        if (v149 && v147 != 0) {
          break;
        }
        if (!v147) {
          goto LABEL_34;
        }
LABEL_33:
        ++v21;
      }
      if (v148.n128_u64[1] < v146.i64[1]) {
        goto LABEL_33;
      }
LABEL_34:
      n128_u64 = (unint64_t)a1[v21 + 1].n128_u64;
      unint64_t v28 = v10;
      if (!(v21 * 16))
      {
        long long v29 = v144;
        if (n128_u64 >= (unint64_t)v144) {
          goto LABEL_73;
        }
        unsigned int v33 = v10;
        while (1)
        {
          long long v29 = v33;
          int v34 = v33->n128_u64[1];
          --v33;
          if (!v34 || v22 == 0) {
            break;
          }
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v34 + 24), *(uint64_t **)(v34 + 32), (int8x16_t *)&v148);
          FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v22 + 24), (uint64_t *)*(void *)(v22 + 32), &v146);
          if (v149) {
            BOOL v36 = v147 == 0;
          }
          else {
            BOOL v36 = 1;
          }
          if (v36)
          {
            if (v147) {
              goto LABEL_73;
            }
LABEL_66:
            if (n128_u64 >= (unint64_t)v29) {
              goto LABEL_73;
            }
            continue;
          }
          if (v148.n128_u64[1] < v146.i64[1] || n128_u64 >= (unint64_t)v29) {
            goto LABEL_73;
          }
        }
        if (v22) {
          goto LABEL_73;
        }
        goto LABEL_66;
      }
      do
      {
        while (1)
        {
          while (1)
          {
            long long v29 = v28;
            unsigned int v30 = v28->n128_u64[1];
            --v28;
            if (v30 && v22 != 0) {
              break;
            }
            if (v22) {
              goto LABEL_73;
            }
          }
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v30 + 24), *(uint64_t **)(v30 + 32), (int8x16_t *)&v148);
          FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v22 + 24), (uint64_t *)*(void *)(v22 + 32), &v146);
          if (v149 && v147 != 0) {
            break;
          }
          if (v147) {
            goto LABEL_73;
          }
        }
      }
      while (v148.n128_u64[1] >= v146.i64[1]);
LABEL_73:
      int v11 = (__n128 *)n128_u64;
      if (n128_u64 < (unint64_t)v29)
      {
        int v38 = v29;
        do
        {
          long long v148 = *v11;
          *int v11 = *v38;
          FragmentInfo = v148;
          *int v38 = v148;
          unsigned int v39 = v11 + 1;
          do
          {
            while (1)
            {
              while (1)
              {
                int v11 = v39;
                unsigned int v40 = v39->n128_u64[1];
                ++v39;
                if (v40 && v22 != 0) {
                  break;
                }
                if (!v22) {
                  goto LABEL_91;
                }
              }
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v40 + 24), *(uint64_t **)(v40 + 32), (int8x16_t *)&v148);
              FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v22 + 24), (uint64_t *)*(void *)(v22 + 32), &v146);
              if (v149 && v147 != 0) {
                break;
              }
              if (!v147) {
                goto LABEL_91;
              }
            }
          }
          while (v148.n128_u64[1] < v146.i64[1]);
LABEL_91:
          unsigned int v43 = v38 - 1;
          do
          {
            while (1)
            {
              while (1)
              {
                int v38 = v43;
                int v44 = v43->n128_i64[1];
                --v43;
                if (v44 && v22 != 0) {
                  break;
                }
                if (v22) {
                  goto LABEL_107;
                }
              }
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v44 + 24), *(uint64_t **)(v44 + 32), (int8x16_t *)&v148);
              FragmentInfo = (__n128)llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v22 + 24), (uint64_t *)*(void *)(v22 + 32), &v146);
              if (v149 && v147 != 0) {
                break;
              }
              if (v147) {
                goto LABEL_107;
              }
            }
          }
          while (v148.n128_u64[1] >= v146.i64[1]);
LABEL_107:
          ;
        }
        while (v11 < v38);
      }
      unsigned int v47 = v11 - 1;
      if (&v11[-1] != a1)
      {
        FragmentInfo = *v47;
        *a1 = *v47;
      }
      v11[-1].n128_u64[0] = v23;
      v11[-1].n128_u64[1] = v22;
      a2 = (unint64_t)v144;
      if (n128_u64 < (unint64_t)v29)
      {
LABEL_113:
        sub_1CD2A5E90(a1, &v11[-1], a3, a4 & 1);
        a4 = 0;
      }
      else
      {
        long long v48 = sub_1CD2A71BC(a1, v11 - 1, FragmentInfo);
        if (sub_1CD2A71BC(v11, v144, v49))
        {
          a2 = (unint64_t)v11[-1].n128_u64;
          if (v48) {
            return FragmentInfo.n128_f64[0];
          }
          goto LABEL_1;
        }
        if (!v48) {
          goto LABEL_113;
        }
      }
    }
  }
  if ((a4 & 1) == 0)
  {
    if (v11 == (__n128 *)a2) {
      return FragmentInfo.n128_f64[0];
    }
    while (1)
    {
      while (1)
      {
        if (&a1[1] == (__n128 *)a2) {
          return FragmentInfo.n128_f64[0];
        }
        unsigned int v130 = a1++;
        unsigned int v131 = v130[1].n128_u64[1];
        unsigned int v132 = v130->n128_u64[1];
        if (!v131 || v132 == 0) {
          break;
        }
        llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v131 + 24), *(uint64_t **)(v131 + 32), (int8x16_t *)&v148);
        FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v132 + 24), (uint64_t *)*(void *)(v132 + 32), &v146).u64[0];
        if (v149) {
          unint64_t v134 = v147 == 0;
        }
        else {
          unint64_t v134 = 1;
        }
        if (v134)
        {
          if (v147) {
            goto LABEL_361;
          }
        }
        else if (v148.n128_u64[1] < v146.i64[1])
        {
          goto LABEL_361;
        }
      }
      if (v132)
      {
LABEL_361:
        unint64_t v135 = a1->n128_u64[0];
        unsigned int v136 = v130[1].n128_u64[1];
        do
        {
          while (1)
          {
            while (1)
            {
              long long v137 = v130;
              FragmentInfo = *v130;
              v130[1] = *v130;
              --v130;
              uint32x4_t v138 = v137[-1].n128_i64[1];
              if (v136)
              {
                if (v138) {
                  break;
                }
              }
              if (!v138) {
                goto LABEL_371;
              }
            }
            llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v136 + 24), *(uint64_t **)(v136 + 32), (int8x16_t *)&v148);
            FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v138 + 24), (uint64_t *)*(void *)(v138 + 32), &v146).u64[0];
            if (!v149 || !v147) {
              break;
            }
            if (v148.n128_u64[1] >= v146.i64[1]) {
              goto LABEL_371;
            }
          }
        }
        while (v147);
LABEL_371:
        v137->n128_u64[0] = v135;
        v137->n128_u64[1] = v136;
        a2 = (unint64_t)v144;
      }
    }
  }
  if (v11 == (__n128 *)a2) {
    return FragmentInfo.n128_f64[0];
  }
  long long v68 = v11 + 1;
  if (&v11[1] == (__n128 *)a2) {
    return FragmentInfo.n128_f64[0];
  }
  long long v69 = 0;
  unsigned int v70 = v11;
  while (2)
  {
    unsigned int v71 = v70;
    unsigned int v70 = v68;
    long long v72 = v71[1].n128_u64[1];
    long long v73 = v71->n128_u64[1];
    if (v72) {
      long long v74 = v73 == 0;
    }
    else {
      long long v74 = 1;
    }
    if (v74)
    {
      if (!v73) {
        goto LABEL_234;
      }
    }
    else
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v72 + 24), *(uint64_t **)(v72 + 32), (int8x16_t *)&v148);
      FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v73 + 24), (uint64_t *)*(void *)(v73 + 32), &v146).u64[0];
      if (v149) {
        unsigned int v75 = v147 == 0;
      }
      else {
        unsigned int v75 = 1;
      }
      if (v75)
      {
        if (!v147) {
          goto LABEL_234;
        }
      }
      else if (v148.n128_u64[1] >= v146.i64[1])
      {
        goto LABEL_234;
      }
    }
    long long v77 = v71[1].n128_u64[0];
    unsigned int v76 = v71[1].n128_u64[1];
    FragmentInfo = *v71;
    unsigned __int8 *v70 = *v71;
    BOOL v78 = a1;
    if (v71 == a1) {
      goto LABEL_233;
    }
    BOOL v79 = v69;
    while (2)
    {
      BOOL v80 = (__n128 *)((char *)a1 + v79);
      uint64_t v81 = *(uint64_t *)((char *)&a1->n128_i64[-1] + v79);
      if (!v76 || !v81)
      {
        if (!v81) {
          goto LABEL_232;
        }
        goto LABEL_230;
      }
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v76 + 24), *(uint64_t **)(v76 + 32), (int8x16_t *)&v148);
      FragmentInfo.n128_u64[0] = llvm::DIExpression::getFragmentInfo((uint64_t *)*(void *)(v81 + 24), (uint64_t *)*(void *)(v81 + 32), &v146).u64[0];
      if (v149 && v147)
      {
        if (v148.n128_u64[1] >= v146.i64[1])
        {
          BOOL v78 = (__n128 *)((char *)a1 + v79);
          goto LABEL_233;
        }
LABEL_230:
        --v71;
        FragmentInfo = v80[-1];
        llvm::MachineFunction *v80 = FragmentInfo;
        v79 -= 16;
        if (!v79)
        {
          BOOL v78 = a1;
          goto LABEL_233;
        }
        continue;
      }
      break;
    }
    if (v147) {
      goto LABEL_230;
    }
LABEL_232:
    BOOL v78 = v71;
LABEL_233:
    v78->n128_u64[0] = v77;
    v78->n128_u64[1] = v76;
    a2 = (unint64_t)v144;
LABEL_234:
    long long v68 = v70 + 1;
    v69 += 16;
    if (&v70[1] != (__n128 *)a2) {
      continue;
    }
    return FragmentInfo.n128_f64[0];
  }
}

  BOOL v4 = (uint64_t *)(a2 - 80);
LABEL_2:
  BOOL v5 = 1 - a3;
  while (1)
  {
    int v6 = a2 - (void)a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)a1) >> 4);
    if (v7 < 2) {
      break;
    }
    unsigned int v17 = v4;
    unsigned int v18 = (uint64_t *)a2;
    uint64_t v19 = a1;
    if (v7 <= 2)
    {
      switch(v7)
      {
        case 2uLL:
          if (sub_1CD8ACCB0(*(uint64_t **)(*v4 + 24), *(uint64_t **)(*v4 + 32), *a1))
          {
            sub_1CD2AB0F0(v19, v17);
          }
          break;
        case 3uLL:
          sub_1CD2AA610((uint64_t)a1, (uint64_t)(a1 + 10), v4);
          break;
        case 4uLL:
          sub_1CD2AB1E0((uint64_t)a1, a1 + 10, a1 + 20, v4);
          break;
        case 5uLL:
          sub_1CD2AB42C((uint64_t)a1, (uint64_t)(a1 + 10), (uint64_t)(a1 + 20), a1 + 30, v4);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    unint64_t v8 = a4;
    if (v6 <= 1919)
    {
      if (a4)
      {
        sub_1CD2AA328((uint64_t)a1, a2);
      }
      else
      {
        sub_1CD2AA4B0((uint64_t)a1, a2);
      }
      return;
    }
    if (v5 == 1)
    {
      if (a1 != (uint64_t *)a2)
      {
        sub_1CD2AB718((uint64_t)a1, a2, a2);
      }
      return;
    }
    unint64_t v9 = v7 >> 1;
    int v10 = &a1[10 * (v7 >> 1)];
    if ((unint64_t)v6 < 0x2801)
    {
      sub_1CD2AA610((uint64_t)v10, (uint64_t)a1, v4);
    }
    else
    {
      sub_1CD2AA610((uint64_t)a1, (uint64_t)v10, v4);
      int v11 = 5 * v9;
      uint64_t v12 = (uint64_t)&v19[10 * v9 - 10];
      sub_1CD2AA610((uint64_t)(v19 + 10), v12, (unsigned char *)v18 - 160);
      sub_1CD2AA610((uint64_t)(v19 + 20), (uint64_t)&v19[2 * v11 + 10], (unsigned char *)v18 - 240);
      sub_1CD2AA610(v12, (uint64_t)v10, &v19[2 * v11 + 10]);
      sub_1CD2AB0F0(v19, v10);
    }
    if ((v8 & 1) != 0 || sub_1CD8ACCB0(*(uint64_t **)(*(v19 - 10) + 24), *(uint64_t **)(*(v19 - 10) + 32), *v19))
    {
      uint64_t v13 = (uint64_t *)sub_1CD2AABA8((uint64_t)v19, (unint64_t)v18);
      if ((v14 & 1) == 0) {
        goto LABEL_43;
      }
      uint64_t v15 = sub_1CD2AADF0((uint64_t)v19, v13);
      long long v16 = (unint64_t)(v13 + 10);
      if (sub_1CD2AADF0((uint64_t)(v13 + 10), v18))
      {
        a3 = -v5;
        a2 = (uint64_t)v13;
        a1 = v19;
        a4 = v8;
        if (!v15) {
          goto LABEL_1;
        }
        return;
      }
      if (!v15)
      {
LABEL_43:
        sub_1CD2A9F2C(v19, v13, -v5, v8 & 1);
        a3 = -v5;
        a4 = 0;
        a1 = v13 + 10;
        BOOL v4 = v17;
        a2 = (uint64_t)v18;
        goto LABEL_2;
      }
    }
    else
    {
      long long v16 = sub_1CD2AA950(v19, (unint64_t)v18);
    }
    ++v5;
    a1 = (uint64_t *)v16;
    BOOL v4 = v17;
    a2 = (uint64_t)v18;
    a4 = v8;
  }
}

  int v10 = a2 - 5;
LABEL_2:
  for (unint64_t i = 1 - a3; ; ++i)
  {
    uint64_t v12 = (uint64_t)a2 - a1;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - a1) >> 2);
    if (!(!v5 & v4))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v24 = *v10;
          int v25 = *(_DWORD *)a1;
          if (*v10 >= *(_DWORD *)a1)
          {
            if (v25 < v24) {
              return;
            }
            unsigned int v26 = *(_DWORD *)(a1 + 4);
            if (*(a2 - 4) >= v26) {
              return;
            }
          }
          else
          {
            unsigned int v26 = *(_DWORD *)(a1 + 4);
          }
          unsigned int v27 = *(_DWORD *)(a1 + 16);
          *(_DWORD *)a1 = v24;
          *(_DWORD *)(a1 + 4) = *(a2 - 4);
          unint64_t v28 = *(void *)(a1 + 8);
          *(_DWORD *)(a1 + 8) = *(a2 - 3);
          *(void *)(a1 + 12) = *((void *)a2 - 1);
          *(a2 - 5) = v25;
          *(a2 - 4) = v26;
          *(void *)(a2 - 3) = v28;
          *(a2 - 1) = v27;
          return;
        case 3uLL:
          sub_1CC4E902C((unsigned int *)a1, (unsigned int *)(a1 + 20), a2 - 5);
          return;
        case 4uLL:
          sub_1CC4E9764(a1, a1 + 20, a1 + 40, (uint64_t)(a2 - 5));
          return;
        case 5uLL:
          sub_1CC4E98BC(a1, a1 + 20, a1 + 40, a1 + 60, a2 - 5);
          return;
        default:
          JUMPOUT(0);
      }
    }
    if (v12 <= 479) {
      break;
    }
    if (i == 1)
    {
      if ((unsigned int *)a1 != a2)
      {
        sub_1CC4E9A80(a1, (uint64_t)a2, (uint64_t)a2);
      }
      return;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = (unsigned int *)(a1 + 20 * (v13 >> 1));
    if ((unint64_t)v12 >= 0xA01)
    {
      sub_1CC4E902C((unsigned int *)a1, (unsigned int *)(a1 + 20 * (v13 >> 1)), a2 - 5);
      long long v16 = a1 + 20 * v14;
      sub_1CC4E902C((unsigned int *)(a1 + 20), (unsigned int *)(v16 - 20), a2 - 10);
      sub_1CC4E902C((unsigned int *)(a1 + 40), (unsigned int *)(a1 + 20 + 20 * v14), a2 - 15);
      sub_1CC4E902C((unsigned int *)(v16 - 20), v15, (unsigned int *)(a1 + 20 + 20 * v14));
      unsigned int v17 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v16 + 16);
      unsigned int v18 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = v18;
      *(_DWORD *)(v16 + 16) = v17;
    }
    else
    {
      sub_1CC4E902C((unsigned int *)(a1 + 20 * (v13 >> 1)), (unsigned int *)a1, a2 - 5);
    }
    if ((a4 & 1) != 0
      || (uint64_t v19 = *(_DWORD *)(a1 - 20), v19 < *(_DWORD *)a1)
      || *(_DWORD *)a1 >= v19 && *(_DWORD *)(a1 - 16) < *(_DWORD *)(a1 + 4))
    {
      unsigned int v20 = sub_1CC4E9378((long long *)a1, a2);
      if ((v21 & 1) == 0) {
        goto LABEL_49;
      }
      unint64_t v22 = sub_1CC4E94F0(a1, v20);
      unsigned int v23 = (unsigned int *)(v20 + 20);
      if (sub_1CC4E94F0(v20 + 20, (uint64_t)a2))
      {
        a3 = -i;
        a2 = (unsigned int *)v20;
        if (v22) {
          return;
        }
        goto LABEL_1;
      }
      if (!v22)
      {
LABEL_49:
        a3 = -i;
        sub_1CD59F280(a1, v20, -i, a4 & 1);
        a4 = 0;
        a1 = v20 + 20;
        goto LABEL_2;
      }
    }
    else
    {
      unsigned int v23 = sub_1CC4E91E0((int *)a1, a2);
    }
    a1 = (unint64_t)v23;
  }
  if (a4)
  {
    sub_1CC4E8E60((int *)a1, (int *)a2);
  }
  else
  {
    sub_1CC4E8F70((int *)a1, (int *)a2);
  }
}

  while (2)
  {
    for (unint64_t i = 1 - a3; ; ++i)
    {
      int v11 = (char *)a2 - (char *)a1;
      uint64_t v12 = 0x2E8BA2E8BA2E8BA3 * (((char *)a2 - (char *)a1) >> 3);
      if (!(!v5 & v4))
      {
        switch(v12)
        {
          case 0uLL:
          case 1uLL:
            return;
          case 2uLL:
            if (*(a2 - 11) < *(double *)a1)
            {
              sub_1CD0B637C((uint64_t)a1, (long long *)(a2 - 11));
            }
            break;
          case 3uLL:
            sub_1CD0B59B4((uint64_t)a1, (long long *)((char *)a1 + 88), (long long *)(a2 - 11));
            break;
          case 4uLL:
            sub_1CD0B643C((uint64_t)a1, (uint64_t)a1 + 88, (uint64_t)(a1 + 11), (long long *)(a2 - 11));
            break;
          case 5uLL:
            sub_1CD0B666C((uint64_t)a1, (uint64_t)a1 + 88, (uint64_t)(a1 + 11), (uint64_t)a1 + 264, (long long *)(a2 - 11));
            break;
          default:
            JUMPOUT(0);
        }
        return;
      }
      if (v11 <= 2111)
      {
        if (a4)
        {
          sub_1CD0B572C((uint64_t)a1, a2);
        }
        else
        {
          sub_1CD0B588C((uint64_t)a1, a2);
        }
        return;
      }
      if (i == 1)
      {
        if (a1 != (long long *)a2)
        {
          sub_1CD0B693C((uint64_t)a1, (long long *)a2, (long long *)a2);
        }
        return;
      }
      uint64_t v13 = v12 >> 1;
      unint64_t v14 = (long long *)((char *)a1 + 88 * (v12 >> 1));
      if ((unint64_t)v11 >= 0x2C01)
      {
        sub_1CD0B59B4((uint64_t)a1, (long long *)((char *)a1 + 88 * (v12 >> 1)), (long long *)(a2 - 11));
        sub_1CD0B59B4((uint64_t)a1 + 88, (long long *)((char *)a1 + 88 * v13 - 88), (long long *)a2 - 11);
        uint64_t v15 = (long long *)((char *)a1 + 88 * v13 + 88);
        sub_1CD0B59B4((uint64_t)(a1 + 11), v15, (long long *)(a2 - 33));
        sub_1CD0B59B4((uint64_t)a1 + 88 * v13 - 88, v14, v15);
        sub_1CD0B637C((uint64_t)a1, v14);
      }
      else
      {
        sub_1CD0B59B4((uint64_t)a1 + 88 * (v12 >> 1), a1, (long long *)(a2 - 11));
      }
      if ((a4 & 1) == 0 && *((double *)a1 - 11) >= *(double *)a1)
      {
        uint64_t v19 = sub_1CD0B5CB8((unint64_t)a1, (long long *)a2);
        goto LABEL_14;
      }
      long long v16 = (long long *)sub_1CD0B5EA4((uint64_t)a1, a2);
      if ((v17 & 1) == 0) {
        goto LABEL_44;
      }
      unsigned int v18 = sub_1CD0B60A4((uint64_t)a1, v16);
      uint64_t v19 = (unint64_t)v16 + 88;
      if (sub_1CD0B60A4((uint64_t)v16 + 88, (long long *)a2)) {
        break;
      }
      if (!v18)
      {
LABEL_44:
        a3 = -i;
        sub_1CD84EB0C(a1, v16, -i, a4 & 1);
        a4 = 0;
        a1 = (long long *)((char *)v16 + 88);
        goto LABEL_1;
      }
LABEL_14:
      a1 = (long long *)v19;
    }
    a3 = -i;
    a2 = (double *)v16;
    if (!v18) {
      continue;
    }
    break;
  }
}

long long *sub_1CB8BCBA4(long long *result, long long *a2, long long *a3)
{
  unsigned int v3 = *((_DWORD *)a2 + 6);
  unsigned int v4 = *((_DWORD *)result + 6);
  if (v3 <= v4 && (v3 < v4 || *((_DWORD *)a2 + 7) >= *((_DWORD *)result + 7)))
  {
    unsigned int v9 = *((_DWORD *)a3 + 6);
    if (v9 > v3 || v9 >= v3 && *((_DWORD *)a3 + 7) < *((_DWORD *)a2 + 7))
    {
      long long v11 = *a2;
      long long v10 = a2[1];
      long long v12 = a3[1];
      *a2 = *a3;
      a2[1] = v12;
      *a3 = v11;
      a3[1] = v10;
      unsigned int v13 = *((_DWORD *)a2 + 6);
      unsigned int v14 = *((_DWORD *)result + 6);
      if (v13 > v14 || v13 >= v14 && *((_DWORD *)a2 + 7) < *((_DWORD *)result + 7))
      {
        long long v16 = *result;
        long long v15 = result[1];
        long long v17 = a2[1];
        *uint64_t result = *a2;
        result[1] = v17;
        *a2 = v16;
        a2[1] = v15;
      }
    }
  }
  else
  {
    unsigned int v5 = *((_DWORD *)a3 + 6);
    if (v5 > v3 || v5 >= v3 && *((_DWORD *)a3 + 7) < *((_DWORD *)a2 + 7))
    {
      long long v7 = *result;
      long long v6 = result[1];
      long long v8 = a3[1];
      *uint64_t result = *a3;
      result[1] = v8;
LABEL_17:
      *a3 = v7;
      a3[1] = v6;
      return result;
    }
    long long v19 = *result;
    long long v18 = result[1];
    long long v20 = a2[1];
    *uint64_t result = *a2;
    result[1] = v20;
    *a2 = v19;
    a2[1] = v18;
    unsigned int v21 = *((_DWORD *)a3 + 6);
    unsigned int v22 = *((_DWORD *)a2 + 6);
    if (v21 > v22 || v21 >= v22 && *((_DWORD *)a3 + 7) < *((_DWORD *)a2 + 7))
    {
      long long v7 = *a2;
      long long v6 = a2[1];
      long long v23 = a3[1];
      *a2 = *a3;
      a2[1] = v23;
      goto LABEL_17;
    }
  }
  return result;
}

BOOL sub_1CB8BCCB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unsigned int v6 = *(_DWORD *)(a2 - 8);
      unsigned int v7 = *(_DWORD *)(a1 + 24);
      if (v6 > v7 || v6 >= v7 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 28))
      {
        long long v8 = (long long *)(a2 - 32);
        long long v10 = *(_OWORD *)a1;
        long long v9 = *(_OWORD *)(a1 + 16);
        long long v11 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v11;
        *long long v8 = v10;
        v8[1] = v9;
      }
      return result;
    case 3:
      sub_1CB8BCBA4((long long *)a1, (long long *)(a1 + 32), (long long *)(a2 - 32));
      return 1;
    case 4:
      sub_1CB8BCFCC(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      int v25 = (long long *)(a1 + 32);
      unsigned int v26 = (long long *)(a1 + 64);
      unsigned int v27 = (long long *)(a1 + 96);
      sub_1CB8BCFCC(a1, a1 + 32, a1 + 64, a1 + 96);
      unsigned int v28 = *(_DWORD *)(a2 - 8);
      unsigned int v29 = *(_DWORD *)(a1 + 120);
      if (v28 > v29 || v28 >= v29 && *(_DWORD *)(a2 - 4) < *(_DWORD *)(a1 + 124))
      {
        unsigned int v30 = (_OWORD *)(a2 - 32);
        long long v32 = *v27;
        long long v31 = *(_OWORD *)(a1 + 112);
        long long v33 = *(_OWORD *)(a2 - 16);
        *unsigned int v27 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v33;
        _OWORD *v30 = v32;
        v30[1] = v31;
        unsigned int v34 = *(_DWORD *)(a1 + 120);
        unsigned int v35 = *(_DWORD *)(a1 + 88);
        if (v34 > v35 || v34 >= v35 && *(_DWORD *)(a1 + 124) < *(_DWORD *)(a1 + 92))
        {
          long long v37 = *v26;
          long long v36 = *(_OWORD *)(a1 + 80);
          long long v38 = *(_OWORD *)(a1 + 112);
          *unsigned int v26 = *v27;
          *(_OWORD *)(a1 + 80) = v38;
          *unsigned int v27 = v37;
          *(_OWORD *)(a1 + 112) = v36;
          unsigned int v39 = *(_DWORD *)(a1 + 88);
          unsigned int v40 = *(_DWORD *)(a1 + 56);
          if (v39 > v40 || v39 >= v40 && *(_DWORD *)(a1 + 92) < *(_DWORD *)(a1 + 60))
          {
            long long v42 = *v25;
            long long v41 = *(_OWORD *)(a1 + 48);
            long long v43 = *(_OWORD *)(a1 + 80);
            long long *v25 = *v26;
            *(_OWORD *)(a1 + 48) = v43;
            *unsigned int v26 = v42;
            *(_OWORD *)(a1 + 80) = v41;
            unsigned int v44 = *(_DWORD *)(a1 + 56);
            unsigned int v45 = *(_DWORD *)(a1 + 24);
            if (v44 > v45 || v44 >= v45 && *(_DWORD *)(a1 + 60) < *(_DWORD *)(a1 + 28))
            {
              long long v47 = *(_OWORD *)a1;
              long long v46 = *(_OWORD *)(a1 + 16);
              long long v48 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v25;
              *(_OWORD *)(a1 + 16) = v48;
              long long *v25 = v47;
              *(_OWORD *)(a1 + 48) = v46;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v12 = a1 + 64;
      sub_1CB8BCBA4((long long *)a1, (long long *)(a1 + 32), (long long *)(a1 + 64));
      uint64_t v13 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unsigned int v16 = *(_DWORD *)(v13 + 24);
    unsigned int v17 = *(_DWORD *)(v12 + 24);
    if (v16 > v17) {
      break;
    }
    if (v16 >= v17)
    {
      unsigned int v18 = *(_DWORD *)(v13 + 28);
      if (v18 < *(_DWORD *)(v12 + 28)) {
        goto LABEL_10;
      }
    }
LABEL_20:
    uint64_t v12 = v13;
    v14 += 32;
    v13 += 32;
    if (v13 == a2) {
      return 1;
    }
  }
  unsigned int v18 = *(_DWORD *)(v13 + 28);
LABEL_10:
  uint64_t v50 = *(void *)(v13 + 16);
  long long v49 = *(_OWORD *)v13;
  long long v19 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v12;
  *(_OWORD *)(v13 + 16) = v19;
  uint64_t v20 = a1;
  if (v12 != a1)
  {
    uint64_t v21 = v14;
    while (1)
    {
      unsigned int v22 = (_OWORD *)(a1 + v21);
      unsigned int v23 = *(_DWORD *)(a1 + v21 + 56);
      if (v16 <= v23)
      {
        if (v16 < v23)
        {
          uint64_t v20 = a1 + v21 + 64;
          goto LABEL_19;
        }
        if (v18 >= *(_DWORD *)(a1 + v21 + 60)) {
          break;
        }
      }
      v12 -= 32;
      long long v24 = v22[3];
      v22[4] = v22[2];
      v22[5] = v24;
      v21 -= 32;
      if (v21 == -64)
      {
        uint64_t v20 = a1;
        goto LABEL_19;
      }
    }
    uint64_t v20 = v12;
  }
LABEL_19:
  *(void *)(v20 + 16) = v50;
  *(_OWORD *)uint64_t v20 = v49;
  *(_DWORD *)(v20 + 24) = v16;
  *(_DWORD *)(v20 + 28) = v18;
  if (++v15 != 8) {
    goto LABEL_20;
  }
  return v13 + 32 == a2;
}

__n128 sub_1CB8BCFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1CB8BCBA4((long long *)a1, (long long *)a2, (long long *)a3);
  unsigned int v9 = *(_DWORD *)(a4 + 24);
  unsigned int v10 = *(_DWORD *)(a3 + 24);
  if (v9 > v10 || v9 >= v10 && *(_DWORD *)(a4 + 28) < *(_DWORD *)(a3 + 28))
  {
    long long v11 = *(_OWORD *)a3;
    __n128 result = *(__n128 *)(a3 + 16);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(_OWORD *)a4 = v11;
    *(__n128 *)(a4 + 16) = result;
    unsigned int v13 = *(_DWORD *)(a3 + 24);
    unsigned int v14 = *(_DWORD *)(a2 + 24);
    if (v13 > v14 || v13 >= v14 && *(_DWORD *)(a3 + 28) < *(_DWORD *)(a2 + 28))
    {
      long long v15 = *(_OWORD *)a2;
      __n128 result = *(__n128 *)(a2 + 16);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(__n128 *)(a3 + 16) = result;
      unsigned int v17 = *(_DWORD *)(a2 + 24);
      unsigned int v18 = *(_DWORD *)(a1 + 24);
      if (v17 > v18 || v17 >= v18 && *(_DWORD *)(a2 + 28) < *(_DWORD *)(a1 + 28))
      {
        long long v19 = *(_OWORD *)a1;
        __n128 result = *(__n128 *)(a1 + 16);
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_OWORD *)a2 = v19;
        *(__n128 *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1CB8BD0B0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, uint64_t a5)
{
  uint64_t v10 = a3;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  uint64_t v10 = *a4;
  char v11 = 6;
  sub_1CD3D5EA0(a1, a2, (uint64_t)&v10);
  return sub_1CB8B55E4(a1, a2, a5);
}

unint64_t sub_1CB8BD138(uint64_t *a1, uint64_t a2, BOOL a3, uint64_t a4, int a5)
{
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 + 48);
  if (v10)
  {
    int v11 = 1;
    while (1)
    {
      if (*(_DWORD *)(v10 + 8) == a3)
      {
        if (!v11)
        {
          int v12 = 0;
          goto LABEL_11;
        }
        --v11;
      }
      uint64_t v10 = *(void *)(v10 + 32);
      if (!v10) {
        goto LABEL_9;
      }
    }
  }
  int v11 = 1;
LABEL_9:
  int v12 = 1;
LABEL_11:
  if (v11) {
    int v13 = 0;
  }
  else {
    int v13 = v12;
  }
  if (a5 && !v13) {
    goto LABEL_128;
  }
  int v14 = *(unsigned __int16 *)(a2 + 24);
  switch(*(_WORD *)(a2 + 24))
  {
    case 0xAB:
      LODWORD(v102) = 0;
      if (((*(uint64_t (**)(uint64_t *, void, void, long long *))*a1)(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v102) & 1) == 0)goto LABEL_128; {
      unint64_t v15 = *(unsigned int *)(a4 + 8);
      }
      *(void *)&long long v107 = 0;
      DWORD2(v107) = 0;
      uint64_t v108 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&__src, v15, &v107);
      uint64_t v16 = sub_1CB8BD138(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, (a5 + 1));
      if (*(_DWORD *)(a4 + 8))
      {
        uint64_t v17 = 0;
        unint64_t v18 = 0;
        do
        {
          if ((v102 >> v18))
          {
            uint64_t v19 = *(void *)a4 + v17;
            long long v20 = *(_OWORD *)((char *)__src + v17);
            *(void *)(v19 + 16) = *(void *)((char *)__src + v17 + 16);
            *(_OWORD *)uint64_t v19 = v20;
          }
          else
          {
            uint64_t v21 = *(void *)a4 + v17;
            *(void *)uint64_t v21 = 0;
            *(_DWORD *)(v21 + 8) = 0;
            *(void *)(v21 + 16) = 0xFFFFFFFFLL;
          }
          ++v18;
          v17 += 24;
        }
        while (v18 < *(unsigned int *)(a4 + 8));
      }
      LODWORD(v22) = v16 + 1;
      uint64_t v23 = (HIDWORD(v16) + 1);
      long long v24 = (uint64_t *)__src;
      goto LABEL_71;
    case 0xAC:
      goto LABEL_103;
    case 0xAD:
    case 0xAE:
    case 0xB0:
      goto LABEL_128;
    case 0xAF:
      LODWORD(v102) = 0;
      if (((*(uint64_t (**)(uint64_t *, void, void, long long *))*a1)(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v102) & 1) == 0)goto LABEL_128; {
      unint64_t v36 = *(unsigned int *)(a4 + 8);
      }
      *(void *)&long long v107 = 0;
      DWORD2(v107) = 0;
      uint64_t v108 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&__src, v36, &v107);
      unint64_t v37 = sub_1CB8BD138(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, (a5 + 1));
      unint64_t v30 = HIDWORD(v37);
      int v38 = v102;
      if (*(_DWORD *)(a4 + 8) > v102)
      {
        uint64_t v39 = 0;
        uint64_t v40 = 24 * v102;
        unint64_t v41 = v102;
        do
        {
          uint64_t v42 = *(void *)a4 + v40 + v39;
          long long v43 = *(_OWORD *)((char *)__src + v39);
          *(void *)(v42 + 16) = *(void *)((char *)__src + v39 + 16);
          *(_OWORD *)uint64_t v42 = v43;
          ++v41;
          v39 += 24;
        }
        while (v41 < *(unsigned int *)(a4 + 8));
      }
      if (v38)
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          uint64_t v46 = *(void *)a4 + v44;
          *(void *)uint64_t v46 = 0;
          *(_DWORD *)(v46 + 8) = 0;
          *(void *)(v46 + 16) = 0xFFFFFFFFLL;
          ++v45;
          v44 += 24;
        }
        while (v45 < v102);
        if (v102 <= 4) {
          int v47 = 1;
        }
        else {
          int v47 = 2;
        }
        if (v102 <= 8) {
          int v48 = v47;
        }
        else {
          int v48 = 4;
        }
        if (v102 == 16) {
          int v35 = 1;
        }
        else {
          int v35 = v48;
        }
      }
      else
      {
        int v35 = 1;
      }
      LODWORD(v22) = v37 + 1;
      goto LABEL_69;
    case 0xB1:
      LODWORD(v102) = 0;
      if (((*(uint64_t (**)(uint64_t *, void, void, long long *))*a1)(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v102) & 1) == 0)goto LABEL_128; {
      unint64_t v49 = *(unsigned int *)(a4 + 8);
      }
      *(void *)&long long v107 = 0;
      DWORD2(v107) = 0;
      uint64_t v108 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&__src, v49, &v107);
      uint64_t v50 = sub_1CB8BD138(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, (a5 + 1));
      uint64_t v51 = v102;
      LODWORD(v52) = v102;
      if (*(_DWORD *)(a4 + 8) != v102)
      {
        uint64_t v53 = 0;
        unsigned int v54 = 1;
        do
        {
          unsigned int v55 = (char *)__src + 24 * v51 + 24 * v54 - 24;
          uint64_t v56 = *(void *)a4 + 24 * v53;
          long long v57 = *(_OWORD *)v55;
          *(void *)(v56 + 16) = *((void *)v55 + 2);
          *(_OWORD *)uint64_t v56 = v57;
          uint64_t v53 = v54;
          uint64_t v52 = *(unsigned int *)(a4 + 8);
        }
        while (v52 - v51 > (unint64_t)v54++);
      }
      unint64_t v59 = (v52 - v51);
      if (v52 > v59)
      {
        uint64_t v60 = 24 * v59;
        do
        {
          uint64_t v61 = *(void *)a4 + v60;
          *(void *)uint64_t v61 = 0;
          *(_DWORD *)(v61 + 8) = 0;
          *(void *)(v61 + 16) = 0xFFFFFFFFLL;
          ++v59;
          v60 += 24;
        }
        while (v59 < *(unsigned int *)(a4 + 8));
      }
      LODWORD(v22) = v50 + 1;
      uint64_t v23 = (HIDWORD(v50) + 4);
      goto LABEL_70;
    default:
      if (v14 == 58)
      {
        LODWORD(v102) = 0;
        if (!(*(unsigned int (**)(uint64_t *, void, void, long long *))*a1)(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v102))goto LABEL_128; {
        uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v102);
        }
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.i32[0] != 1) {
          goto LABEL_128;
        }
        unsigned int v26 = __clz(v102);
        unsigned int v27 = 31 - v26;
        unint64_t v28 = *(unsigned int *)(a4 + 8);
        *(void *)&long long v107 = 0;
        DWORD2(v107) = 0;
        uint64_t v108 = 0x1FFFFFFFFLL;
        sub_1CB8BDE30(&__src, v28, &v107);
        unint64_t v29 = sub_1CB8BD138(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, (a5 + 1));
        unint64_t v30 = HIDWORD(v29);
        if (*(_DWORD *)(a4 + 8) > 31 - v26)
        {
          uint64_t v31 = 0;
          unint64_t v32 = 31 - v26;
          do
          {
            uint64_t v33 = *(void *)a4 + 24 * (31 - v26) + v31;
            long long v34 = *(_OWORD *)((char *)__src + v31);
            *(void *)(v33 + 16) = *(void *)((char *)__src + v31 + 16);
            *(_OWORD *)uint64_t v33 = v34;
            ++v32;
            v31 += 24;
          }
          while (v32 < *(unsigned int *)(a4 + 8));
        }
        if (v26 == 31)
        {
          LODWORD(v22) = v29 + 1;
        }
        else
        {
          uint64_t v62 = 0;
          if (v27 <= 1) {
            unsigned int v63 = 1;
          }
          else {
            unsigned int v63 = 31 - v26;
          }
          uint64_t v64 = 24 * v63;
          do
          {
            uint64_t v65 = *(void *)a4 + v62;
            *(void *)uint64_t v65 = 0;
            *(_DWORD *)(v65 + 8) = 0;
            *(void *)(v65 + 16) = 0xFFFFFFFFLL;
            v62 += 24;
          }
          while (v64 != v62);
          LODWORD(v22) = v29 + 1;
          if (v26 == 15)
          {
            int v35 = 1;
            goto LABEL_69;
          }
          if (v27 > 8)
          {
            int v35 = 4;
            goto LABEL_69;
          }
        }
        if (v27 <= 4) {
          int v35 = 1;
        }
        else {
          int v35 = 2;
        }
LABEL_69:
        uint64_t v23 = (v35 + v30);
LABEL_70:
        long long v24 = (uint64_t *)__src;
LABEL_71:
        if (v24 != &v112) {
          free(v24);
        }
        return v22 | (unint64_t)(v23 << 32);
      }
      if (v14 != 56) {
        goto LABEL_128;
      }
      for (uint64_t i = 0; i != 64; i += 32)
      {
        long long v67 = (char *)&__src + i;
        *((_DWORD *)v67 + 2) = 1;
        *(void *)long long v67 = 0;
        *((_DWORD *)v67 + 6) = 1;
        *((void *)v67 + 2) = 0;
      }
      sub_1CD7F121C(a1[271], **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0, (uint64_t)&v107);
      if (v111 >= 0x41 && __src) {
        MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
      }
      __src = (void *)v107;
      unsigned int v111 = DWORD2(v107);
      DWORD2(v107) = 0;
      if (v113 >= 0x41 && v112)
      {
        MEMORY[0x1D25D9CB0](v112, 0x1000C8000313F17);
        uint64_t v112 = v108;
        unsigned int v113 = v109;
        unsigned int v109 = 0;
        if (DWORD2(v107) >= 0x41 && (void)v107) {
          MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v112 = v108;
        unsigned int v113 = v109;
      }
      sub_1CD7F121C(a1[271], *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0, (uint64_t)&v107);
      if (v115 >= 0x41 && v114) {
        MEMORY[0x1D25D9CB0](v114, 0x1000C8000313F17);
      }
      uint64_t v114 = (void *)v107;
      unsigned int v115 = DWORD2(v107);
      DWORD2(v107) = 0;
      if (v117[0] >= 0x41u && v116)
      {
        MEMORY[0x1D25D9CB0](v116, 0x1000C8000313F17);
        uint64_t v116 = v108;
        v117[0] = v109;
        unsigned int v109 = 0;
        if (DWORD2(v107) >= 0x41 && (void)v107) {
          MEMORY[0x1D25D9CB0](v107, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v116 = v108;
        v117[0] = v109;
      }
      unsigned int v106 = v111;
      if (v111 > 0x40) {
        operator new[]();
      }
      unint64_t v68 = ~(unint64_t)__src;
      if (v111) {
        unint64_t v69 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v111;
      }
      else {
        unint64_t v69 = 0;
      }
      unint64_t v70 = v69 & v68;
      unint64_t v105 = v69 & v68;
      unsigned int v104 = v115;
      if (v115 > 0x40) {
        operator new[]();
      }
      unint64_t v71 = v115 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v115 : 0;
      BOOL v72 = (v71 & ~(unint64_t)v114 & v70) != 0;
      for (uint64_t j = 0; j != -16; j -= 8)
      {
        long long v74 = (char *)&__src + j * 4;
        if (v117[j] >= 0x41u)
        {
          uint64_t v75 = *((void *)v74 + 6);
          if (v75)
          {
            MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
            long long v74 = (char *)&__src + j * 4;
          }
        }
        if (*((_DWORD *)v74 + 10) >= 0x41u)
        {
          uint64_t v76 = *((void *)v74 + 4);
          if (v76) {
            MEMORY[0x1D25D9CB0](v76, 0x1000C8000313F17);
          }
        }
      }
      if (v72) {
        goto LABEL_128;
      }
LABEL_103:
      unint64_t v77 = *(unsigned int *)(a4 + 8);
      *(void *)&long long v107 = 0;
      DWORD2(v107) = 0;
      uint64_t v108 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&__src, v77, &v107);
      unint64_t v78 = *(unsigned int *)(a4 + 8);
      *(void *)&long long v102 = 0;
      DWORD2(v102) = 0;
      uint64_t v103 = 0x1FFFFFFFFLL;
      sub_1CB8BDE30(&v107, v78, &v102);
      uint64_t v23 = (a5 + 1);
      unint64_t v22 = sub_1CB8BD138(a1, **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), &__src, v23);
      uint64_t v79 = sub_1CB8BD138(a1, *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), &v107, v23);
      if (!*(_DWORD *)(a4 + 8))
      {
LABEL_110:
        unint64_t v86 = HIDWORD(v22);
        LODWORD(v22) = v79 + v22;
        uint64_t v23 = (HIDWORD(v79) + v86);
        if (!(*(unsigned int (**)(uint64_t *))(*a1 + 8))(a1)) {
          goto LABEL_122;
        }
        if (*(_WORD *)(a2 + 24) != 56) {
          goto LABEL_122;
        }
        uint64_t v87 = *(void *)(*(void *)(a2 + 32) + 40);
        if (*(_WORD *)(v87 + 24) != 175) {
          goto LABEL_122;
        }
        uint64_t v88 = *(void *)(*(void *)(v87 + 32) + 40);
        int v89 = *(unsigned __int16 *)(v88 + 24);
        if (v89 != 35 && v89 != 11) {
          goto LABEL_122;
        }
        uint64_t v91 = *(void *)(v88 + 80);
        long long v92 = (void *)(v91 + 24);
        if (*(_DWORD *)(v91 + 32) >= 0x41u) {
          long long v92 = (void *)*v92;
        }
        if (*v92 < 5uLL)
        {
          int v93 = 0;
        }
        else
        {
LABEL_122:
          int v93 = 0;
          LODWORD(v22) = v22 + 1;
          uint64_t v23 = (v23 + 1);
        }
        goto LABEL_123;
      }
      uint64_t v80 = 0;
      unint64_t v81 = 0;
      break;
  }
  while (1)
  {
    uint64_t v82 = (uint64_t)__src;
    if (!*(_DWORD *)((char *)__src + v80 + 20))
    {
      uint64_t v82 = v107;
      goto LABEL_109;
    }
    if (*(_DWORD *)(v107 + v80 + 20)) {
      break;
    }
LABEL_109:
    unint64_t v83 = (long long *)(v82 + v80);
    uint64_t v84 = *(void *)a4 + v80;
    long long v85 = *v83;
    *(void *)(v84 + 16) = *((void *)v83 + 2);
    *(_OWORD *)uint64_t v84 = v85;
    ++v81;
    v80 += 24;
    if (v81 >= *(unsigned int *)(a4 + 8)) {
      goto LABEL_110;
    }
  }
  int v93 = 1;
LABEL_123:
  if ((uint64_t *)v107 != &v108) {
    free((void *)v107);
  }
  if (__src != &v112) {
    free(__src);
  }
  if (!v93) {
    return v22 | (unint64_t)(v23 << 32);
  }
LABEL_128:
  sub_1CD7F121C(a1[271], a2, a3, 0, (uint64_t)&__src);
  if (*(_DWORD *)(a4 + 8))
  {
    uint64_t v94 = 0;
    unint64_t v95 = 0;
    do
    {
      if (v111 >= 0x41) {
        p_src = (unint64_t *)__src;
      }
      else {
        p_src = (unint64_t *)&__src;
      }
      unint64_t v97 = *p_src;
      uint64_t v98 = *(void *)a4 + v94;
      if ((v97 >> v95))
      {
        uint64_t v99 = 0;
        *(_DWORD *)(v98 + 8) = 0;
        uint64_t v100 = 0xFFFFFFFFLL;
      }
      else
      {
        *(void *)(v98 + 8) = a3;
        uint64_t v100 = v95 | 0x100000000;
        uint64_t v99 = a2;
      }
      *(void *)uint64_t v98 = v99;
      *(void *)(v98 + 16) = v100;
      ++v95;
      v94 += 24;
    }
    while (v95 < *(unsigned int *)(a4 + 8));
  }
  if (v113 >= 0x41 && v112) {
    MEMORY[0x1D25D9CB0](v112, 0x1000C8000313F17);
  }
  if (v111 >= 0x41 && __src) {
    MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
  }
  LODWORD(v22) = 0;
  uint64_t v23 = 0;
  return v22 | (unint64_t)(v23 << 32);
}

void *sub_1CB8BDE30(void *result, unint64_t a2, long long *a3)
{
  uint64_t v4 = result + 2;
  *__n128 result = result + 2;
  result[1] = 0x2000000000;
  if (a2 >= 0x21)
  {
    *((_DWORD *)result + 2) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (a2)
  {
    unint64_t v5 = a2;
    do
    {
      long long v6 = *a3;
      v4[2] = *((void *)a3 + 2);
      *(_OWORD *)uint64_t v4 = v6;
      v4 += 3;
      --v5;
    }
    while (v5);
  }
  *((_DWORD *)result + 2) = a2;
  return result;
}

__n128 sub_1CB8BDEEC(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v5 = a2;
    uint64_t v7 = a1;
    sub_1CB8BDF7C(a1, *(const void **)a2, *((void *)a2 + 1));
    a2 = v5;
    a1 = v7;
  }
  else
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
  }
  if (*((char *)a2 + 47) < 0)
  {
    long long v6 = a2;
    uint64_t v8 = a1;
    sub_1CB8BDF7C(a1 + 24, *((const void **)a2 + 3), *((void *)a2 + 4));
    a2 = v6;
    a1 = v8;
  }
  else
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
  }
  __n128 result = (__n128)a2[3];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void *sub_1CB8BDF7C(uint64_t a1, const void *a2, unint64_t a3)
{
  unint64_t v5 = (void *)a1;
  if (a3 <= 0x16)
  {
    *(unsigned char *)(a1 + 23) = a3;
  }
  else
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *unint64_t v5 = v8;
    unint64_t v5 = v8;
  }

  return memmove(v5, a2, a3 + 1);
}

uint64_t *sub_1CB8BE018(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, _OWORD *a7, unsigned int *a8, uint64_t a9)
{
  v22[12] = *MEMORY[0x1E4F143B8];
  long long v20 = v22;
  uint64_t v21 = 0x600000000;
  uint64_t v18 = a5;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CD3D5EA0(a1, (uint64_t)&v20, a6);
  sub_1CD3D5F48(a1, (uint64_t)&v20, a7);
  uint64_t v18 = *a8;
  char v19 = 6;
  sub_1CD3D5EA0(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1CB8B55E4(a1, (uint64_t)&v20, a9);
  uint64_t v16 = sub_1CD801450(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22) {
    free(v20);
  }
  return v16;
}

uint64_t sub_1CB8BE160(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 == 438) {
    return 0;
  }
  if (v1 == 439) {
    return 1;
  }
  uint64_t v3 = *(void *)(**(void **)(a1 + 32) + 80);
  uint64_t v4 = (void *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u) {
    uint64_t v4 = (void *)*v4;
  }
  unint64_t v5 = *v4 - 1983;
  if (v5 >= 6) {
    llvm::report_fatal_error((llvm *)"Unimplemented pack opcode!", (const llvm::Twine *)1);
  }
  return dword_1CD935D70[v5];
}

uint64_t sub_1CB8BE1E4(uint64_t a1, double a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v17 = 64;
  uint64_t v16 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v13, &v16);
  uint64_t v19 = v13[0];
  long long v20 = (uint64_t *)v13[1];
  int v21 = v14;
  unsigned __int8 v22 = v15 & 0xF;
  llvm::APFloat::convert((uint64_t)v18, *(void **)(a1 + 8), 1, v13);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3 != v19)
  {
    uint64_t result = 0;
    uint64_t v3 = v19;
    goto LABEL_20;
  }
  if ((_UNKNOWN *)v3 == &unk_1CFB2E344)
  {
    uint64_t result = llvm::detail::DoubleAPFloat::bitwiseIsEqual((llvm::detail::DoubleAPFloat *)(a1 + 8), (const llvm::detail::DoubleAPFloat *)&v19);
    uint64_t v3 = v19;
LABEL_20:
    if ((_UNKNOWN *)v3 == &unk_1CFB2E344)
    {
      uint64_t v11 = result;
      sub_1CB845718((uint64_t *)&v20);
      return v11;
    }
    goto LABEL_17;
  }
  if (v18 == (unsigned char *)a1)
  {
    uint64_t result = 1;
  }
  else
  {
    int v4 = *(unsigned __int8 *)(a1 + 28);
    if ((v4 & 7) != (v22 & 7) || ((v22 ^ v4) & 8) != 0)
    {
LABEL_16:
      uint64_t result = 0;
      goto LABEL_17;
    }
    uint64_t result = 1;
    if ((v4 & 7) != 3 && (v4 & 7) != 0)
    {
      if ((v4 & 6) == 0 || *(_DWORD *)(a1 + 24) == v21)
      {
        int v6 = *(_DWORD *)(v3 + 8);
        unsigned int v7 = v6 - 64;
        uint64_t v8 = (void *)(a1 + 16);
        if ((v6 - 64) <= 0xFFFFFF7F) {
          uint64_t v8 = (void *)*v8;
        }
        unsigned int v9 = v6 + 64;
        if (v7 >= 0xFFFFFF80) {
          uint64_t v10 = (uint64_t *)&v20;
        }
        else {
          uint64_t v10 = v20;
        }
        uint64_t result = memcmp(v8, v10, (v9 >> 3) & 0x1FFFFFF8) == 0;
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
LABEL_17:
  if ((*(_DWORD *)(v3 + 8) - 64) <= 0xFFFFFF7F)
  {
    uint64_t v12 = result;
    if (v20) {
      MEMORY[0x1D25D9CB0](v20, 0x1000C8000313F17);
    }
    return v12;
  }
  return result;
}

void sub_1CB8BE3E4()
{
}

uint64_t sub_1CB8BE3F8()
{
  return 0;
}

uint64_t sub_1CB8BE400()
{
  return 1;
}

uint64_t sub_1CB8BE408()
{
  return 0;
}

uint64_t sub_1CB8BE410()
{
  return 16;
}

uint64_t sub_1CB8BE418()
{
  return 16;
}

uint64_t sub_1CB8BE420(uint64_t a1, unsigned int a2)
{
  return a2 >> 1;
}

uint64_t sub_1CB8BE428()
{
  return 0;
}

uint64_t sub_1CB8BE430()
{
  return 0;
}

uint64_t sub_1CB8BE438(uint64_t a1, _DWORD *a2)
{
  *a2 = 4;
  return 0;
}

uint64_t sub_1CB8BE448()
{
  return 0;
}

uint64_t sub_1CB8BE450()
{
  return 0;
}

uint64_t sub_1CB8BE458()
{
  return 0;
}

uint64_t sub_1CB8BE460(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8, __int16 a9, char a10, uint64_t a11, uint64_t a12, int a13, unsigned int a14)
{
  if (a14 == -1)
  {
    if (a4 == -1)
    {
      long long v20 = (char *)*(&off_1E66A4038 + a2);
      return *(unsigned int *)v20;
    }
  }
  else
  {
    if (a14 <= 1) {
      int v14 = 1;
    }
    else {
      int v14 = 2;
    }
    if (a14 <= 3) {
      int v15 = v14;
    }
    else {
      int v15 = 3;
    }
    if (a14 <= 7) {
      a4 = v15;
    }
    else {
      a4 = 4;
    }
  }
  if (a7 == 1)
  {
    uint64_t v18 = (char *)&unk_1CD923DB0;
    if (a10)
    {
      uint64_t v18 = (char *)&unk_1CD923DA0;
      uint64_t v19 = (char *)&unk_1CD923DC0;
    }
    else
    {
      uint64_t v19 = (char *)&unk_1CD923DD0;
    }
    if ((a2 - 1) < 2) {
      uint64_t v19 = v18;
    }
    long long v20 = &v19[4 * a8];
  }
  else
  {
    if (a7) {
      return 0xFFFFFFFFLL;
    }
    switch(a2)
    {
      case 1:
      case 2:
        uint64_t v16 = (char *)&unk_1CD923D70;
        int v17 = (char *)&unk_1CD923D60;
        break;
      case 3:
      case 4:
      case 7:
        __break(1u);
        JUMPOUT(0x1CB8BE578);
      default:
        uint64_t v16 = (char *)&unk_1CD923D90;
        int v17 = (char *)&unk_1CD923D80;
        break;
    }
    if (a10) {
      unsigned __int8 v22 = v17;
    }
    else {
      unsigned __int8 v22 = v16;
    }
    long long v20 = &v22[4 * (a4 - 1)];
  }
  return *(unsigned int *)v20;
}

uint64_t sub_1CB8BE59C()
{
  return 0;
}

uint64_t sub_1CB8BE5A4()
{
  return 0;
}

uint64_t sub_1CB8BE5AC(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB8BE5C0(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB8BE5D4(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB8BE5E8()
{
  return 423;
}

uint64_t sub_1CB8BE5F0()
{
  return 1;
}

uint64_t sub_1CB8BE5F8()
{
  return 2;
}

uint64_t sub_1CB8BE600()
{
  return 0;
}

uint64_t sub_1CB8BE608()
{
  return 1;
}

BOOL sub_1CB8BE610(uint64_t a1)
{
  return *(unsigned char *)(a1 + 8) == 0;
}

uint64_t sub_1CB8BE620()
{
  return 3;
}

uint64_t sub_1CB8BE628()
{
  return 1;
}

uint64_t sub_1CB8BE630()
{
  return 6;
}

uint64_t sub_1CB8BE638()
{
  return 1;
}

uint64_t sub_1CB8BE640()
{
  return 0;
}

uint64_t sub_1CB8BE648(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    return *(unsigned __int16 *)(*(void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2, 1)+ 24);
  }
  else {
    return dword_1CD935D88[(int)a2 - 2];
  }
}

uint64_t sub_1CB8BE6AC(uint64_t a1, int a2, int a3)
{
  uint64_t v3 = &off_1E66A4070[a2 - 1];
  if (!a3) {
    uint64_t v3 = &off_1E66A3FD8[a2 - 1];
  }
  return (uint64_t)*v3;
}

uint64_t sub_1CB8BE6DC()
{
  return 0x2100000001;
}

uint64_t sub_1CB8BE6E8()
{
  return 0;
}

uint64_t sub_1CB8BE6F0(uint64_t a1, int a2)
{
  return dword_1CD935DC4[a2];
}

BOOL sub_1CB8BE700(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3[1] + 16))(a3[1], *a3);
  int v17 = *(_DWORD *)(a2 + 4);
  int v18 = *(unsigned __int8 *)(a2 + 61);
  unsigned int v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a4);
  int v51 = *(_DWORD *)(a2 + 56);
  int v53 = *(_DWORD *)(a2 + 80);
  int v54 = *(_DWORD *)(a2 + 52);
  int v20 = *(unsigned __int8 *)(a2 + 2);
  uint64_t v21 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    unsigned int v56 = 0;
    BOOL result = sub_1CD3CA314(v16, v21, "SMPWriteCMode", &v56);
    if (result) {
      unsigned int v23 = v56;
    }
    else {
      unsigned int v23 = 2;
    }
  }
  else
  {
    unsigned int v55 = 0;
    BOOL result = sub_1CD3CA314(v16, v21, "SMPCMode", &v55);
    if (result) {
      unsigned int v23 = v55;
    }
    else {
      unsigned int v23 = 0;
    }
  }
  uint64_t v24 = (v17 + v18);
  if (*(unsigned char *)(v16 + 287))
  {
    uint64_t v50 = *a3;
    unsigned int v57 = 0;
    BOOL result = sub_1CD3CA314(v16, v50, "SMPSLCMode", &v57);
    if (result) {
      uint64_t v25 = v57;
    }
    else {
      uint64_t v25 = 1;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  unsigned int v26 = *(_DWORD *)(a10 + 8);
  if (v26 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v27 = a4 - 5;
  *(void *)(*(void *)a10 + 8 * v26) = v24;
  unsigned int v28 = *(_DWORD *)(a10 + 12);
  unsigned int v29 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v29;
  if (v29 >= v28) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v29) = v19;
  unsigned int v30 = *(_DWORD *)(a10 + 12);
  unsigned int v31 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v31;
  if (v31 >= v30) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v31) = v27 < 2;
  unsigned int v32 = *(_DWORD *)(a10 + 12);
  unsigned int v33 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v33;
  if (v33 >= v32) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v33) = a7;
  unsigned int v34 = *(_DWORD *)(a10 + 12);
  unsigned int v35 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v35;
  if (v35 >= v34) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v35) = v51 != -1;
  unsigned int v36 = *(_DWORD *)(a10 + 12);
  unsigned int v37 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v37;
  if (v37 >= v36) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v37) = v53 != -1;
  unsigned int v38 = *(_DWORD *)(a10 + 12);
  unsigned int v39 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v39;
  if (v39 >= v38) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v39) = v54 != -1;
  unsigned int v40 = *(_DWORD *)(a10 + 12);
  unsigned int v41 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v41;
  if (v41 >= v40) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v41) = a11 ^ 1u;
  unsigned int v42 = *(_DWORD *)(a10 + 12);
  unsigned int v43 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v43;
  if (v43 >= v42) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v43) = v20 == 0;
  unsigned int v44 = *(_DWORD *)(a10 + 12);
  unsigned int v45 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v45;
  if (v45 >= v44) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v45) = v23;
  unsigned int v46 = *(_DWORD *)(a10 + 12);
  unsigned int v47 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v47;
  if (v47 >= v46) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v47) = v25;
  unsigned int v48 = *(_DWORD *)(a10 + 12);
  unsigned int v49 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v49;
  if (v49 >= v48) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v49) = a5 != -1;
  ++*(_DWORD *)(a10 + 8);
  return result;
}

void sub_1CB8BEB8C(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 1445;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  uint64_t v8 = a2 | 0x100000000;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v9 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v9 = v8;
  v9[1] = -1;
  unsigned int v10 = *(_DWORD *)(a5 + 12);
  unsigned int v11 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v11;
  if (v11 >= v10) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v12 = (uint64_t *)(*(void *)a5 + 16 * v11);
  *uint64_t v12 = v8;
  v12[1] = -1;
  unsigned int v13 = *(_DWORD *)(a5 + 12);
  unsigned int v14 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v14;
  if (v14 >= v13) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v15 = (uint64_t *)(*(void *)a5 + 16 * v14);
  *int v15 = v8;
  v15[1] = -1;
  unsigned int v16 = *(_DWORD *)(a5 + 12);
  unsigned int v17 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v17;
  if (v17 >= v16) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v17) = xmmword_1CD91C150;
  unsigned int v18 = *(_DWORD *)(a5 + 12);
  unsigned int v19 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v19;
  if (v19 >= v18) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v19) = xmmword_1CD91C140;
  unsigned int v20 = *(_DWORD *)(a5 + 12);
  unsigned int v21 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v21;
  if (v21 >= v20) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v21) = xmmword_1CD91C150;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66A4180;
}

void sub_1CB8BEDC0(uint64_t a1, unsigned int a2, _DWORD *a3, void *a4, uint64_t a5)
{
  *a3 = 1445;
  unsigned int v5 = *(_DWORD *)(a5 + 8);
  if (v5 >= *(_DWORD *)(a5 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v5) = xmmword_1CD91C140;
  unsigned int v6 = *(_DWORD *)(a5 + 12);
  unsigned int v7 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v7;
  uint64_t v8 = a2 | 0x100000000;
  if (v7 >= v6) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v9 = (uint64_t *)(*(void *)a5 + 16 * v7);
  uint64_t *v9 = v8;
  v9[1] = -1;
  unsigned int v10 = *(_DWORD *)(a5 + 12);
  unsigned int v11 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v11;
  if (v11 >= v10) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v12 = (uint64_t *)(*(void *)a5 + 16 * v11);
  *uint64_t v12 = v8;
  v12[1] = -1;
  unsigned int v13 = *(_DWORD *)(a5 + 12);
  unsigned int v14 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v14;
  if (v14 >= v13) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v15 = (uint64_t *)(*(void *)a5 + 16 * v14);
  *int v15 = v8;
  v15[1] = -1;
  unsigned int v16 = *(_DWORD *)(a5 + 12);
  unsigned int v17 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v17;
  if (v17 >= v16) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v17) = xmmword_1CD91C150;
  unsigned int v18 = *(_DWORD *)(a5 + 12);
  unsigned int v19 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v19;
  if (v19 >= v18) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v19) = xmmword_1CD91C140;
  unsigned int v20 = *(_DWORD *)(a5 + 12);
  unsigned int v21 = *(_DWORD *)(a5 + 8) + 1;
  *(_DWORD *)(a5 + 8) = v21;
  if (v21 >= v20) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_OWORD *)(*(void *)a5 + 16 * v21) = xmmword_1CD91C150;
  ++*(_DWORD *)(a5 + 8);
  *a4 = &off_1E66A4340;
}

uint64_t sub_1CB8BEFF4(int a1, llvm::GlobalValue *a2, llvm::Module *this)
{
  v41[0] = "agx.driver_bindings";
  __int16 v42 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(this, v41);
  if (NamedMetadata)
  {
    uint64_t v6 = NamedMetadata;
    uint64_t v7 = *(unsigned int *)(*(void *)(NamedMetadata + 48) + 8);
    if (v7)
    {
      uint64_t v8 = 0;
      while (1)
      {
        uint64_t v9 = *(void *)(**(void **)(v6 + 48) + 8 * v8);
        uint64_t v10 = *(void *)(v9 - 8 * *(unsigned int *)(v9 + 8));
        if (v10)
        {
          if (*(llvm::GlobalValue **)(v10 + 128) == a2)
          {
            Section = llvm::GlobalValue::getSection(a2);
            if (v12 == 11
              && *(void *)Section == 0x74735F6567616D69
              && *(void *)(Section + 3) == 0x65746174735F6567)
            {
              uint64_t v14 = *(unsigned int *)(v9 + 8);
              if (v14 >= 5) {
                break;
              }
            }
          }
        }
LABEL_21:
        if (++v8 == v7) {
          return 0;
        }
      }
      uint64_t v15 = -8 * v14;
      while (1)
      {
        uint64_t v16 = *(void *)(v9 + v15 + 24);
        if (!*(unsigned char *)v16)
        {
          uint64_t v17 = *(void *)(v16 + 8);
          if (*(void *)v17 == 7)
          {
            int v18 = *(_DWORD *)(v17 + 24);
            int v19 = *(_DWORD *)(v17 + 27);
            if (v18 == 1601069926 && v19 == 1953063519) {
              break;
            }
          }
        }
        v15 += 8;
        if (v15 == -24) {
          goto LABEL_21;
        }
      }
      unsigned int v37 = (unsigned __int8 *)(v9 + v15);
      goto LABEL_50;
    }
    return 0;
  }
  v41[0] = "agx.compute_driver_bindings";
  __int16 v42 = 259;
  uint64_t result = llvm::Module::getNamedMetadata(this, v41);
  if (!result) {
    return result;
  }
  uint64_t v22 = ***(void ***)(result + 48);
  unint64_t v23 = *(unsigned int *)(v22 + 8);
  if (!v23) {
    return 0;
  }
  uint64_t v24 = 0;
  while (1)
  {
    uint64_t v25 = *(unsigned __int8 **)(v22 - 8 * v23 + 8 * v24);
    if (!v25 || *v25 - 4 > 0x1E) {
      goto LABEL_46;
    }
    uint64_t v26 = *(void *)&v25[-8 * *((unsigned int *)v25 + 2)];
    if (v26)
    {
      if (*(llvm::GlobalValue **)(v26 + 128) == a2)
      {
        unsigned int v27 = llvm::GlobalValue::getSection(a2);
        if (v28 == 11 && *(void *)v27 == 0x74735F6567616D69 && *(void *)(v27 + 3) == 0x65746174735F6567)
        {
          uint64_t v30 = *((unsigned int *)v25 + 2);
          if (v30 >= 5) {
            break;
          }
        }
      }
    }
LABEL_45:
    unint64_t v23 = *(unsigned int *)(v22 + 8);
LABEL_46:
    if (++v24 >= v23) {
      return 0;
    }
  }
  uint64_t v31 = -8 * v30;
  while (1)
  {
    uint64_t v32 = *(void *)&v25[v31 + 24];
    if (!*(unsigned char *)v32)
    {
      uint64_t v33 = *(void *)(v32 + 8);
      if (*(void *)v33 == 7)
      {
        int v34 = *(_DWORD *)(v33 + 24);
        int v35 = *(_DWORD *)(v33 + 27);
        if (v34 == 1601069926 && v35 == 1953063519) {
          break;
        }
      }
    }
    v31 += 8;
    if (v31 == -24) {
      goto LABEL_45;
    }
  }
  unsigned int v37 = &v25[v31];
LABEL_50:
  uint64_t v38 = *(void *)(*((void *)v37 + 4) + 128);
  if (*(unsigned char *)(v38 + 16) == 16) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  unsigned int v40 = (void *)(v39 + 24);
  if (*(_DWORD *)(v39 + 32) >= 0x41u) {
    unsigned int v40 = (void *)*v40;
  }
  return *v40 == 0;
}

uint64_t sub_1CB8BF2C0()
{
  return 1;
}

uint64_t sub_1CB8BF2C8()
{
  return 0;
}

uint64_t sub_1CB8BF2D0()
{
  return 1;
}

uint64_t sub_1CB8BF2D8()
{
  return 0;
}

uint64_t sub_1CB8BF2E0()
{
  return 1;
}

uint64_t sub_1CB8BF2E8()
{
  return 395;
}

uint64_t sub_1CB8BF2F0()
{
  return 0;
}

uint64_t sub_1CB8BF2F8()
{
  return 1;
}

uint64_t sub_1CB8BF300()
{
  return 1;
}

void sub_1CB8BF308()
{
}

uint64_t sub_1CB8BF31C()
{
  return 24;
}

uint64_t sub_1CB8BF324()
{
  return 8;
}

uint64_t sub_1CB8BF32C()
{
  return 1;
}

uint64_t sub_1CB8BF334()
{
  return 0;
}

uint64_t sub_1CB8BF33C(uint64_t a1, _DWORD *a2)
{
  *a2 = 2;
  return 1;
}

uint64_t sub_1CB8BF34C(int8x8_t a1, uint64_t a2, int a3, const llvm::Twine *a4, __int32 a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, char a11, unsigned __int8 a12, _DWORD *a13, uint64_t a14, int a15, __int32 a16)
{
  return sub_1CB8B6130(a3, a4, a5, a6, a10, a12, (*a13 & 0xFFFFFFFE) == 2, *a13 & 1, a1, a16);
}

uint64_t sub_1CB8BF38C()
{
  return 1;
}

uint64_t sub_1CB8BF394()
{
  return 13201;
}

uint64_t sub_1CB8BF39C(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB8BF3B0(uint64_t a1, unint64_t a2)
{
  return (a2 >> 1) | 0x200000000;
}

uint64_t sub_1CB8BF3C4()
{
  return 0;
}

uint64_t sub_1CB8BF3CC()
{
  return 0;
}

uint64_t sub_1CB8BF3D4()
{
  return 1;
}

uint64_t sub_1CB8BF3DC()
{
  return 0;
}

uint64_t sub_1CB8BF3E4()
{
  return 0;
}

uint64_t sub_1CB8BF3EC()
{
  return 3;
}

uint64_t sub_1CB8BF3F4()
{
  return 0;
}

uint64_t sub_1CB8BF3FC()
{
  return 4;
}

uint64_t sub_1CB8BF404()
{
  return 0;
}

uint64_t sub_1CB8BF40C()
{
  return 1;
}

_UNKNOWN ***sub_1CB8BF414(uint64_t a1, int a2, int a3)
{
  return (&off_1E66A3FF8[2 * (a2 - 1)])[a3];
}

uint64_t sub_1CB8BF42C(uint64_t a1, int a2)
{
  return dword_1CD935DE8[a2];
}

BOOL sub_1CB8BF43C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a3[1] + 16))(a3[1], *a3);
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    unsigned int v17 = *(_DWORD *)(a10 + 8);
    if (v17 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v17) = *(unsigned char *)(a2 + 2) == 0;
    ++*(_DWORD *)(a10 + 8);
  }
  int v18 = *(_DWORD *)(a2 + 4);
  if (v18 == 1)
  {
    uint64_t v19 = *(_DWORD *)(a2 + 56) != -1;
  }
  else if (v18 == 2)
  {
    if (*(_DWORD *)(a2 + 48) != -1 || *(unsigned __int8 *)(a2 + 61) | *(unsigned __int8 *)(a2 + 60))
    {
      uint64_t v19 = 6;
    }
    else if (*(_DWORD *)(a2 + 52) == -1)
    {
      if (*(_DWORD *)(a2 + 56) == -1) {
        uint64_t v19 = 2;
      }
      else {
        uint64_t v19 = 3;
      }
    }
    else
    {
      uint64_t v19 = 4;
    }
  }
  else
  {
    uint64_t v19 = 5;
  }
  unsigned int v20 = *(_DWORD *)(a10 + 8);
  if (v20 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v20) = v19;
  ++*(_DWORD *)(a10 + 8);
  uint64_t v21 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 280))(a1, a4);
  unsigned int v22 = *(_DWORD *)(a10 + 8);
  if (v22 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v22) = v21;
  unsigned int v23 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v23;
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    int v24 = *(_DWORD *)(a2 + 64);
    BOOL v25 = v24 == -1;
    uint64_t v26 = 2 * (v24 != -1);
    uint64_t v27 = 3;
    if (v25) {
      uint64_t v27 = 1;
    }
    if (*(_DWORD *)(a2 + 80) == -1) {
      uint64_t v28 = v26;
    }
    else {
      uint64_t v28 = v27;
    }
    if (v23 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v23) = v28;
    unsigned int v29 = *(_DWORD *)(a10 + 8) + 1;
    *(_DWORD *)(a10 + 8) = v29;
    if (*(unsigned char *)(a2 + 62))
    {
      if (*(_DWORD *)(a2 + 84) == -1)
      {
        unsigned int v31 = *(_DWORD *)(a10 + 12);
        uint64_t v30 = 4;
LABEL_33:
        if (v29 >= v31) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *(void *)(*(void *)a10 + 8 * v29) = v30;
        unsigned int v23 = *(_DWORD *)(a10 + 8) + 1;
        *(_DWORD *)(a10 + 8) = v23;
        goto LABEL_35;
      }
      if (a5 >= 4) {
        uint64_t v30 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v30 = a5 + 4;
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
    unsigned int v31 = *(_DWORD *)(a10 + 12);
    goto LABEL_33;
  }
LABEL_35:
  if (*(_DWORD *)(a2 + 24) != -1)
  {
    if (v23 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v23) = a6;
    ++*(_DWORD *)(a10 + 8);
  }
  uint64_t v32 = *a3;
  if (*(_DWORD *)(a2 + 12) == -1)
  {
    uint64_t v33 = sub_1CD3CE4FC(v16, v32, "ImageWritePersist");
    unsigned int v34 = *(_DWORD *)(a10 + 8);
    if (v34 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v34) = v33;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v35 = *a3;
    unsigned int v56 = 0;
    if (sub_1CD3CA314((int)v16, v35, "ImageWriteTPUCohMode", &v56)) {
      uint64_t v36 = v56;
    }
    else {
      uint64_t v36 = 0;
    }
    unsigned int v37 = *(_DWORD *)(a10 + 8);
    if (v37 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v37) = v36;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v38 = *a3;
    unsigned int v56 = 0;
    if (sub_1CD3CA314((int)v16, v38, "ImageWriteMCUCohMode", &v56)) {
      uint64_t v39 = v56;
    }
    else {
      uint64_t v39 = 0;
    }
    unsigned int v40 = *(_DWORD *)(a10 + 8);
    if (v40 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v40) = v39;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v41 = *a3;
    unsigned int v56 = 0;
    BOOL result = sub_1CD3CA314((int)v16, v41, "ImageWriteSLCCohMode", &v56);
    if (result) {
      uint64_t v43 = v56;
    }
    else {
      uint64_t v43 = 1;
    }
  }
  else
  {
    uint64_t v44 = sub_1CD3CE4FC(v16, v32, "ImageReadPersist");
    unsigned int v45 = *(_DWORD *)(a10 + 8);
    if (v45 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v45) = v44;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v46 = *a3;
    unsigned int v56 = 0;
    if (sub_1CD3CA314((int)v16, v46, "ImageReadTPUCohMode", &v56)) {
      uint64_t v47 = v56;
    }
    else {
      uint64_t v47 = 0;
    }
    unsigned int v48 = *(_DWORD *)(a10 + 8);
    if (v48 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v48) = v47;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v49 = *a3;
    unsigned int v56 = 0;
    if (sub_1CD3CA314((int)v16, v49, "ImageReadMCUCohMode", &v56)) {
      uint64_t v50 = v56;
    }
    else {
      uint64_t v50 = 0;
    }
    unsigned int v51 = *(_DWORD *)(a10 + 8);
    if (v51 >= *(_DWORD *)(a10 + 12)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *(void *)(*(void *)a10 + 8 * v51) = v50;
    ++*(_DWORD *)(a10 + 8);
    uint64_t v52 = *a3;
    unsigned int v56 = 0;
    BOOL result = sub_1CD3CA314((int)v16, v52, "ImageReadSLCCohMode", &v56);
    if (result) {
      uint64_t v43 = v56;
    }
    else {
      uint64_t v43 = 0;
    }
  }
  unsigned int v53 = *(_DWORD *)(a10 + 8);
  if (v53 >= *(_DWORD *)(a10 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v53) = v43;
  unsigned int v54 = *(_DWORD *)(a10 + 12);
  unsigned int v55 = *(_DWORD *)(a10 + 8) + 1;
  *(_DWORD *)(a10 + 8) = v55;
  if (v55 >= v54) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(void *)(*(void *)a10 + 8 * v55) = 0;
  ++*(_DWORD *)(a10 + 8);
  return result;
}

uint64_t sub_1CB8BFA80()
{
  return 1;
}

uint64_t sub_1CB8BFA88()
{
  return 0;
}

uint64_t sub_1CB8BFA90()
{
  return 1;
}

uint64_t sub_1CB8BFA98()
{
  return 0;
}

uint64_t sub_1CB8BFAA0()
{
  return 0;
}

uint64_t sub_1CB8BFAA8()
{
  return 0;
}

uint64_t *sub_1CB8BFAB0(uint64_t *a1, uint64_t a2)
{
  int v4 = *(long long **)(a2 + 32);
  long long v5 = *v4;
  long long v64 = *(long long *)((char *)v4 + 40);
  long long v65 = v5;
  long long v6 = v4[5];
  long long v62 = *(long long *)((char *)v4 + 120);
  long long v63 = v6;
  uint64_t v7 = *(unsigned int *)(*((void *)v4 + 20) + 76);
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v60 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v60, v8, 2);
  }
  int v61 = *(_DWORD *)(a2 + 60);
  __int16 v59 = 0;
  if ((v7 - 7) <= 1)
  {
    int v9 = (*(_WORD *)(*(void *)a1[1] + 1020) & 1) == 0;
    if (v7 == 7)
    {
      uint64_t v10 = (uint64_t *)v63;
    }
    else
    {
      uint64_t v10 = (uint64_t *)v62;
      LOBYTE(v59) = 1;
    }
    goto LABEL_7;
  }
  int v18 = *(unsigned __int8 *)(*(void *)(*a1 + 480) + 281);
  int v19 = sub_1CD3D75A0((void **)a1, v7, (unsigned int *)&v65, (uint64_t)&v64, &v63, (uint64_t)&v62, (unsigned char *)&v59 + 1, &v59, 0);
  int v9 = HIBYTE(v59);
  if (v18) {
    BOOL v20 = HIBYTE(v59) == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20)
  {
    uint64_t v10 = sub_1CD3D6E84(a1, a2);
    goto LABEL_44;
  }
  int v21 = v19;
  uint64_t v23 = *((void *)&v65 + 1);
  uint64_t v22 = v65;
  long long v24 = v64;
  long long v25 = v63;
  long long v26 = v62;
  unsigned int v57 = v60;
  if (v60)
  {
    uint64_t v52 = v65;
    llvm::MetadataTracking::track((uint64_t)&v57, v60, 2);
    uint64_t v22 = v52;
  }
  int v58 = v61;
  uint64_t v10 = sub_1CD3D79F0(a1, v21, v22, v23, 0, v24, *((uint64_t *)&v24 + 1), 1, v25, v26, (const llvm::APInt *)&v57);
  if (v57)
  {
    int v27 = *v57;
    if ((v27 - 4) > 0x1E)
    {
      if ((v27 - 3) >= 0xFFFFFFFE) {
        uint64_t v44 = v57;
      }
      else {
        uint64_t v44 = 0;
      }
      if ((v27 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v29 = (unint64_t)(v44 + 8);
LABEL_71:
        v66[0] = &v57;
        sub_1CC5FA668(v29 + 16, v66);
        goto LABEL_7;
      }
      if (v27 == 3) {
        *((void *)v57 + 1) = 0;
      }
    }
    else if ((v57[1] & 0x7F) == 2 || *((_DWORD *)v57 + 3))
    {
      uint64_t v28 = *((void *)v57 + 2);
      if ((v28 & 4) != 0)
      {
        unint64_t v29 = v28 & 0xFFFFFFFFFFFFFFF8;
        if (v29) {
          goto LABEL_71;
        }
      }
    }
  }
LABEL_7:
  if (!v9) {
    goto LABEL_44;
  }
  unsigned int v11 = &v63;
  if (!(_BYTE)v59) {
    unsigned int v11 = &v62;
  }
  uint64_t v12 = *(uint64_t **)v11;
  uint64_t v13 = *((void *)v11 + 1);
  uint64_t v14 = v65;
  int v15 = *(unsigned __int16 *)(v65 + 24);
  if (v15 == 36 || v15 == 12)
  {
    uint64_t v16 = *(void *)(v65 + 80);
    if (*(_UNKNOWN **)(v16 + 32) == &unk_1CFB2E344) {
      uint64_t v17 = *(void *)(v16 + 40);
    }
    else {
      uint64_t v17 = v16 + 24;
    }
    if ((*(unsigned char *)(v17 + 28) & 7) == 1)
    {
      uint64_t v10 = v12;
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v30 = *((void *)&v65 + 1);
    unsigned int v55 = v60;
    if (v60) {
      llvm::MetadataTracking::track((uint64_t)&v55, v60, 2);
    }
    int v56 = v61;
    *((void *)&v50 + 1) = v13;
    *(void *)&long long v50 = v12;
    uint64_t v10 = sub_1CD3D79F0(a1, 1, v14, v30, 0, v14, v30, 1, (unint64_t)v10, v50, (const llvm::APInt *)&v55);
    if (v55)
    {
      int v31 = *v55;
      if ((v31 - 4) > 0x1E)
      {
        if ((v31 - 3) >= 0xFFFFFFFE) {
          unsigned int v45 = v55;
        }
        else {
          unsigned int v45 = 0;
        }
        if ((v31 - 3) < 0xFFFFFFFE)
        {
          if (v31 == 3) {
            *((void *)v55 + 1) = 0;
          }
          goto LABEL_37;
        }
        unint64_t v46 = (unint64_t)(v45 + 8);
      }
      else
      {
        if ((v55[1] & 0x7F) != 2 && !*((_DWORD *)v55 + 3)) {
          goto LABEL_37;
        }
        uint64_t v49 = *((void *)v55 + 2);
        if ((v49 & 4) == 0) {
          goto LABEL_37;
        }
        unint64_t v46 = v49 & 0xFFFFFFFFFFFFFFF8;
        if (!v46) {
          goto LABEL_37;
        }
      }
      v66[0] = &v55;
      sub_1CC5FA668(v46 + 16, v66);
    }
  }
LABEL_37:
  uint64_t v32 = v64;
  int v33 = *(unsigned __int16 *)(v64 + 24);
  if (v33 == 36 || v33 == 12)
  {
    uint64_t v34 = *(void *)(v64 + 80);
    if (*(_UNKNOWN **)(v34 + 32) == &unk_1CFB2E344) {
      uint64_t v35 = *(void *)(v34 + 40);
    }
    else {
      uint64_t v35 = v34 + 24;
    }
    if ((*(unsigned char *)(v35 + 28) & 7) == 1) {
      uint64_t v10 = v12;
    }
    goto LABEL_44;
  }
  uint64_t v40 = *((void *)&v64 + 1);
  unsigned int v53 = v60;
  if (v60) {
    llvm::MetadataTracking::track((uint64_t)&v53, v60, 2);
  }
  int v54 = v61;
  *((void *)&v51 + 1) = v13;
  *(void *)&long long v51 = v12;
  uint64_t v10 = sub_1CD3D79F0(a1, 1, v32, v40, 0, v32, v40, 1, (unint64_t)v10, v51, (const llvm::APInt *)&v53);
  if (v53)
  {
    int v41 = *v53;
    if ((v41 - 4) <= 0x1E)
    {
      if ((v53[1] & 0x7F) != 2 && !*((_DWORD *)v53 + 3)) {
        goto LABEL_44;
      }
      uint64_t v42 = *((void *)v53 + 2);
      if ((v42 & 4) == 0) {
        goto LABEL_44;
      }
      unint64_t v43 = v42 & 0xFFFFFFFFFFFFFFF8;
      if (!v43) {
        goto LABEL_44;
      }
LABEL_85:
      v66[0] = &v53;
      sub_1CC5FA668(v43 + 16, v66);
      goto LABEL_44;
    }
    if ((v41 - 3) >= 0xFFFFFFFE) {
      uint64_t v47 = v53;
    }
    else {
      uint64_t v47 = 0;
    }
    if ((v41 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v43 = (unint64_t)(v47 + 8);
      goto LABEL_85;
    }
    if (v41 == 3) {
      *((void *)v53 + 1) = 0;
    }
  }
LABEL_44:
  if (v60)
  {
    int v36 = *v60;
    if ((v36 - 4) > 0x1E)
    {
      if ((v36 - 3) >= 0xFFFFFFFE) {
        uint64_t v38 = v60;
      }
      else {
        uint64_t v38 = 0;
      }
      if ((v36 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v39 = (unint64_t)(v38 + 8);
LABEL_54:
        v66[0] = &v60;
        sub_1CC5FA668(v39 + 16, v66);
        return v10;
      }
      if (v36 == 3) {
        *((void *)v60 + 1) = 0;
      }
    }
    else if ((v60[1] & 0x7F) == 2 || *((_DWORD *)v60 + 3))
    {
      uint64_t v48 = *((void *)v60 + 2);
      if ((v48 & 4) != 0)
      {
        unint64_t v39 = v48 & 0xFFFFFFFFFFFFFFF8;
        if (v39) {
          goto LABEL_54;
        }
      }
    }
  }
  return v10;
}

uint64_t *sub_1CB8BFFB8(uint64_t *a1, uint64_t a2)
{
  v133[24] = *MEMORY[0x1E4F143B8];
  int v4 = *(long long **)(a2 + 32);
  long long v5 = *v4;
  long long v128 = *(long long *)((char *)v4 + 40);
  long long v129 = v5;
  long long v6 = v4[5];
  long long v126 = *(long long *)((char *)v4 + 120);
  long long v127 = v6;
  int v7 = *(unsigned __int8 *)(*(void *)(*a1 + 480) + 280);
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  long long v124 = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)&v124, v8, 2);
    int v4 = *(long long **)(a2 + 32);
  }
  int v125 = *(_DWORD *)(a2 + 60);
  unsigned int v9 = *(_DWORD *)(*((void *)v4 + 20) + 76);
  signed int v10 = v9 - 11;
  if (v9 - 11 <= 0xB && ((0xD05u >> v10) & 1) != 0)
  {
    unsigned int v9 = dword_1CD935E18[v10];
    *(_OWORD *)unsigned int v132 = v127;
    DWORD2(v127) = DWORD2(v126);
    *(void *)&long long v127 = v126;
    *(void **)&long long v126 = v132[0];
    DWORD2(v126) = v132[1];
  }
  unsigned int v123 = v9;
  sub_1CB8C14AC((uint64_t)a1, &v123, (unsigned int *)&v129, &v128, (uint64_t *)&v127, (uint64_t *)&v126, 1);
  unsigned int v11 = v123;
  unsigned int v12 = v123 - 18;
  int v13 = *(unsigned __int16 *)(v129 + 24);
  int v114 = v7;
  if (v13 == 200)
  {
LABEL_19:
    uint64_t v16 = *(void *)(v129 + 32);
    int v17 = *(_DWORD *)(v16 + 8);
    *(void *)&long long v129 = *(void *)v16;
    DWORD2(v129) = v17;
LABEL_20:
    uint64_t v14 = v128;
    int v15 = *(unsigned __int16 *)(v128 + 24);
    if (v15 == 198)
    {
      if (v12 >= 4 && v123 != 17 && v123 != 22) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    if (v15 == 199)
    {
      if (v12 < 4 || v123 == 17 || v123 == 22) {
        goto LABEL_32;
      }
      goto LABEL_31;
    }
    goto LABEL_26;
  }
  if (v13 != 199)
  {
    if (v13 != 198 || v12 >= 4 && v123 != 17 && v123 != 22) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v12 >= 4)
  {
    if (v123 == 17 || v123 == 22) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v14 = v128;
  int v15 = *(unsigned __int16 *)(v128 + 24);
  if (v15 == 198)
  {
LABEL_31:
    uint64_t v18 = *(void *)(v14 + 32);
    int v19 = *(_DWORD *)(v18 + 8);
    *(void *)&long long v128 = *(void *)v18;
    DWORD2(v128) = v19;
    goto LABEL_32;
  }
  if (v15 == 199) {
    goto LABEL_32;
  }
LABEL_26:
  if (v15 == 200) {
    goto LABEL_31;
  }
LABEL_32:
  BOOL v20 = sub_1CD3D62F0(a1[1], v127, DWORD2(v127), 0);
  uint64_t v116 = v21;
  uint64_t v117 = v20;
  long long v22 = v126;
  uint64_t v23 = sub_1CD3D62F0(a1[1], v126, DWORD2(v126), 0);
  uint64_t v25 = v24;
  long long v26 = sub_1CD3D62F0(a1[1], v129, DWORD2(v129), 0);
  uint64_t v28 = v27;
  unint64_t v29 = sub_1CD3D62F0(a1[1], v128, DWORD2(v128), 0);
  uint64_t v31 = v30;
  long long v122 = *(_OWORD *)*(void *)(a2 + 40);
  *(_OWORD *)unsigned int v132 = *(_OWORD *)(*(void *)(v129 + 40) + 16 * DWORD2(v129));
  if (LOBYTE(v132[0])) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v132);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v132);
  }
  uint64_t v109 = ExtendedSizeInBits;
  if (v33 == 1) {
  *(_OWORD *)unsigned int v132 = *(_OWORD *)(*(void *)(v128 + 40) + 16 * DWORD2(v128));
  }
  if (LOBYTE(v132[0])) {
    uint64_t v34 = sub_1CB87E200((unsigned __int8 *)v132);
  }
  else {
    uint64_t v34 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v132);
  }
  uint64_t v112 = v34;
  if (v35 == 1) {
  *(_OWORD *)unsigned int v132 = *(_OWORD *)(*(void *)(v127 + 40) + 16 * DWORD2(v127));
  }
  if (LOBYTE(v132[0])) {
    uint64_t v36 = sub_1CB87E200((unsigned __int8 *)v132);
  }
  else {
    uint64_t v36 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v132);
  }
  uint64_t v111 = v36;
  if (v37 == 1) {
  if ((_BYTE)v122)
  }
    uint64_t v38 = sub_1CB87E200((unsigned __int8 *)&v122);
  else {
    uint64_t v38 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v122);
  }
  uint64_t v40 = v38;
  int v41 = v117;
  if (v39 == 1)
  {
    int v41 = v117;
  }
  unint64_t v42 = (unint64_t)v41 | v116;
  BOOL v105 = v42 == 0;
  if (v42)
  {
    uint64_t v44 = v41[10];
    unsigned int v45 = (unsigned int *)(v44 + 24);
    if (*(_DWORD *)(v44 + 32) >= 0x41u) {
      unsigned int v45 = *(unsigned int **)v45;
    }
    uint64_t v46 = *v45;
    if (v46 == 1) {
      int v47 = 1;
    }
    else {
      int v47 = 2;
    }
    if (v46) {
      int v43 = v47;
    }
    else {
      int v43 = 0;
    }
  }
  else
  {
    int v43 = 3;
  }
  unint64_t v48 = (unint64_t)v23 | v25;
  BOOL v108 = v48 == 0;
  int v113 = v11;
  uint64_t v103 = v25;
  uint64_t v115 = v40;
  int v120 = v43;
  if (v48)
  {
    uint64_t v53 = v23[10];
    int v54 = (unsigned int *)(v53 + 24);
    if (*(_DWORD *)(v53 + 32) >= 0x41u) {
      int v54 = *(unsigned int **)v54;
    }
    uint64_t v49 = v23;
    uint64_t v55 = *v54;
    if (v55 == 1) {
      int v50 = 1;
    }
    else {
      int v50 = 2;
    }
    if (!v55) {
      int v50 = 0;
    }
    BOOL v107 = v43 == 0;
    if (!v43 && v55 == 1)
    {
      BOOL v51 = 0;
      BOOL v52 = 0;
      BOOL v107 = 1;
      BOOL v119 = 1;
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v49 = v23;
    BOOL v107 = v43 == 0;
    int v50 = 3;
  }
  BOOL v119 = v50;
  BOOL v51 = v50 != 0;
  if (v50) {
    BOOL v52 = 1;
  }
  else {
    BOOL v52 = v43 != 1;
  }
LABEL_77:
  unsigned int v104 = sub_1CD7EBF14(a1[1], 0, (const llvm::APInt *)&v124, (llvm *)5, 0, 1, 0);
  unsigned int v106 = v56;
  v132[0] = v133;
  v132[1] = (void *)0xC00000000;
  int v58 = sub_1CD7EBF14(a1[1], 0, (const llvm::APInt *)&v124, (llvm *)5, 0, 1, 0);
  if (LODWORD(v132[1]) >= HIDWORD(v132[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  __int16 v59 = (uint64_t **)((char *)v132[0] + 16 * LODWORD(v132[1]));
  *__int16 v59 = v58;
  v59[1] = v57;
  unsigned int v60 = ++LODWORD(v132[1]);
  if ((unint64_t)v26 | v28)
  {
    if (v60 >= HIDWORD(v132[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v61 = (char *)v132[0] + 16 * v60;
    *int v61 = v26;
    v61[1] = v28;
  }
  else
  {
    v130[0] = 0;
    LODWORD(v130[1]) = 0;
    sub_1CB896BAC(*a1, v129, DWORD2(v129), (uint64_t)&v129, (uint64_t)v130, 0, *(unsigned __int8 *)(*(void *)(v129 + 40) + 16 * DWORD2(v129)) == 4, 0, 0, 0, 0);
    if (LODWORD(v132[1]) >= HIDWORD(v132[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v132[0] + LODWORD(v132[1])) = v129;
    unsigned int v62 = LODWORD(v132[1]) + 1;
    LODWORD(v132[1]) = v62;
    if (v62 >= HIDWORD(v132[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v132[0] + v62) = *(_OWORD *)v130;
  }
  unsigned int v63 = ++LODWORD(v132[1]);
  if ((unint64_t)v29 | v31)
  {
    if (v63 >= HIDWORD(v132[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    long long v64 = (char *)v132[0] + 16 * v63;
    *long long v64 = v29;
    v64[1] = v31;
  }
  else
  {
    v130[0] = 0;
    LODWORD(v130[1]) = 0;
    sub_1CB896BAC(*a1, v128, DWORD2(v128), (uint64_t)&v128, (uint64_t)v130, 0, *(unsigned __int8 *)(*(void *)(v128 + 40) + 16 * DWORD2(v128)) == 4, 0, 0, 0, 0);
    if (LODWORD(v132[1]) >= HIDWORD(v132[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v132[0] + LODWORD(v132[1])) = v128;
    unsigned int v65 = LODWORD(v132[1]) + 1;
    LODWORD(v132[1]) = v65;
    if (v65 >= HIDWORD(v132[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    *((_OWORD *)v132[0] + v65) = *(_OWORD *)v130;
  }
  unsigned int v66 = ++LODWORD(v132[1]);
  if (v52)
  {
    if (v105)
    {
      v130[0] = v104;
      v130[1] = v106;
      long long v121 = *(_OWORD *)(*(void *)(v127 + 40) + 16 * DWORD2(v127));
      if ((_BYTE)v121) {
        uint64_t v67 = sub_1CB87E200((unsigned __int8 *)&v121);
      }
      else {
        uint64_t v67 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v121);
      }
      uint64_t v71 = v67;
      if (v68 == 1) {
      sub_1CB896BAC(*a1, v127, DWORD2(v127), (uint64_t)&v127, (uint64_t)v130, 0, v71 != 32, 0, 0, 0, 0);
      }
      if (LODWORD(v132[1]) >= HIDWORD(v132[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v132[0] + LODWORD(v132[1])) = v127;
      unsigned int v72 = LODWORD(v132[1]) + 1;
      LODWORD(v132[1]) = v72;
      if (v72 >= HIDWORD(v132[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v69 = (char *)v132[0] + 16 * v72;
      *(void *)unint64_t v69 = v104;
      unint64_t v70 = v106;
    }
    else
    {
      if (v66 >= HIDWORD(v132[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v69 = (char *)v132[0] + 16 * v66;
      *(void *)unint64_t v69 = v117;
      unint64_t v70 = v116;
    }
    *((void *)v69 + 1) = v70;
    ++LODWORD(v132[1]);
  }
  if (!v51)
  {
    uint64_t v75 = v29;
    uint64_t v76 = v109;
LABEL_121:
    int v118 = 0;
    int v80 = 0;
    goto LABEL_128;
  }
  if (v108)
  {
    v130[0] = 0;
    LODWORD(v130[1]) = 0;
    long long v121 = *(_OWORD *)(*(void *)(v22 + 40) + 16 * DWORD2(v22));
    if ((_BYTE)v121) {
      uint64_t v73 = sub_1CB87E200((unsigned __int8 *)&v121);
    }
    else {
      uint64_t v73 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v121);
    }
    uint64_t v79 = v73;
    if (v74 == 1) {
    uint64_t v75 = v29;
    }
    sub_1CB896BAC(*a1, v22, DWORD2(v22), (uint64_t)&v126, (uint64_t)v130, 0, v79 != 32, 0, 0, 0, 0);
    uint64_t v78 = v126;
    int v77 = DWORD2(v126);
  }
  else
  {
    int v77 = DWORD2(v22);
    uint64_t v78 = v22;
    if (v49)
    {
      uint64_t v75 = v29;
      if (v29)
      {
        uint64_t v76 = v109;
        if (v75 == v49 && v31 == v103) {
          goto LABEL_121;
        }
        goto LABEL_122;
      }
    }
    else
    {
      uint64_t v75 = v29;
    }
  }
  uint64_t v76 = v109;
  if ((void)v128 == v78 && DWORD2(v128) == v77) {
    goto LABEL_121;
  }
LABEL_122:
  int v81 = v107;
  if (v120 == 1) {
    int v81 = 1;
  }
  if (v81 == 1)
  {
    BOOL v119 = v120 != 1;
    --LODWORD(v132[1]);
  }
  else
  {
    BOOL v119 = 0;
  }
  int v80 = 2;
  int v118 = 1;
LABEL_128:
  int v110 = v80;
  uint64_t v83 = sub_1CD7EEB94(a1[1], v80, (llvm *)5, 0);
  if (LODWORD(v132[1]) >= HIDWORD(v132[1])) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v84 = (uint64_t *)((char *)v132[0] + 16 * LODWORD(v132[1]));
  uint64_t *v84 = v83;
  v84[1] = v82;
  ++LODWORD(v132[1]);
  sub_1CB8C2E38(a1[1], (uint64_t)v132, 0);
  int v85 = sub_1CD3D40C8(v113, v114 != 0, v115 == 16, ((unint64_t)v26 | v28) != 0, v76 == 16, ((unint64_t)v75 | v31) != 0, v112 == 16, v120, v111 == 16, v119);
  uint64_t v86 = a1[1];
  uint64_t v87 = (uint64_t *)v132[0];
  uint64_t v88 = LODWORD(v132[1]);
  uint64_t v89 = sub_1CD7F95FC(v86, v122, *((uint64_t *)&v122 + 1), 172, 0);
  uint64_t v91 = sub_1CD801044(v86, v85, (uint64_t)&v124, v89, v90, v87, v88);
  long long v92 = v91;
  if (v118)
  {
    v130[0] = v131;
    v131[0] = v91;
    v131[1] = 0;
    uint64_t v98 = *((void *)&v126 + 1);
    unint64_t v97 = (uint64_t *)v126;
    if (!v108)
    {
      unint64_t v97 = v49;
      uint64_t v98 = v103;
    }
    v131[2] = v97;
    v131[3] = v98;
    v130[1] = (void *)0x500000002;
    sub_1CB8C2E38(a1[1], (uint64_t)v130, v110);
    if (LODWORD(v130[1]) >= HIDWORD(v130[1])) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v99 = (uint64_t **)((char *)v130[0] + 16 * LODWORD(v130[1]));
    *uint64_t v99 = v92;
    v99[1] = (uint64_t *)1;
    uint64_t v100 = ++LODWORD(v130[1]);
    uint64_t v101 = 2;
    if (v108) {
      uint64_t v101 = 0;
    }
    long long v92 = sub_1CD801450(a1[1], dword_1CD923568[v101 | (v115 == 16)], (uint64_t)&v124, (llvm *)v122, *((uint64_t *)&v122 + 1), (uint64_t *)v130[0], v100);
    if (v130[0] != v131) {
      free(v130[0]);
    }
  }
  if (v132[0] != v133) {
    free(v132[0]);
  }
  if (v124)
  {
    int v93 = *v124;
    if ((v93 - 4) > 0x1E)
    {
      if ((v93 - 3) >= 0xFFFFFFFE) {
        unint64_t v95 = v124;
      }
      else {
        unint64_t v95 = 0;
      }
      if ((v93 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v96 = (unint64_t)(v95 + 8);
LABEL_142:
        v132[0] = &v124;
        sub_1CC5FA668(v96 + 16, v132);
        return v92;
      }
      if (v93 == 3) {
        *((void *)v124 + 1) = 0;
      }
    }
    else if ((v124[1] & 0x7F) == 2 || *((_DWORD *)v124 + 3))
    {
      uint64_t v102 = *((void *)v124 + 2);
      if ((v102 & 4) != 0)
      {
        unint64_t v96 = v102 & 0xFFFFFFFFFFFFFFF8;
        if (v96) {
          goto LABEL_142;
        }
      }
    }
  }
  return v92;
}

BOOL sub_1CB8C0D18(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 8);
  if (v1 > 0x40)
  {
    if (((*(void *)(*(void *)a1 + 8 * ((v1 - 1) >> 6)) >> (v1 - 1)) & 1) == 0) {
      return 0;
    }
    return llvm::APInt::countTrailingZerosSlowCase((unint64_t **)a1) == v1 - 1;
  }
  else
  {
    return *(void *)a1 == 1 << (v1 - 1);
  }
}

BOOL sub_1CB8C0D84(llvm::APInt *a1)
{
  unsigned int v1 = *((_DWORD *)a1 + 2);
  if (v1 > 0x40)
  {
    if ((*(void *)(*(void *)a1 + 8 * ((v1 - 1) >> 6)) >> (v1 - 1))) {
      return 0;
    }
    return llvm::APInt::countTrailingOnesSlowCase(a1) == v1 - 1;
  }
  else
  {
    return *(void *)a1 == ~(-1 << (v1 - 1));
  }
}

BOOL sub_1CB8C0DF4(uint64_t a1)
{
  int v4 = *(_DWORD **)(a1 + 8);
  long long v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v3 = v4;
  if (v4 == (_DWORD *)&unk_1CFB2E344) {
    return llvm::detail::DoubleAPFloat::isLargest(v2);
  }
  BOOL v6 = (*(unsigned char *)(a1 + 28) & 6) != 0 && (*(unsigned char *)(a1 + 28) & 7) != 3;
  if (v3[4] == 1)
  {
    if (!v6 || *(_DWORD *)(a1 + 24) != *v3) {
      return 0;
    }
    return llvm::detail::IEEEFloat::isSignificandAllOnesExceptLSB(v2);
  }
  else
  {
    if (!v6 || *(_DWORD *)(a1 + 24) != *v3) {
      return 0;
    }
    return llvm::detail::IEEEFloat::isSignificandAllOnes(v2);
  }
}

BOOL sub_1CB8C0EC0(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 24);
  uint64_t v2 = 1;
  if (v1 > 0x22)
  {
    if (v1 != 35)
    {
      if (v1 != 36) {
        return 0;
      }
LABEL_7:
      uint64_t v3 = *(void *)(a1 + 80);
      uint64_t v4 = v3 + 24;
      if (*(_UNKNOWN **)(v3 + 32) == &unk_1CFB2E344) {
        uint64_t v4 = *(void *)(v3 + 40);
      }
      if ((*(unsigned char *)(v4 + 28) & 7) != 3) {
        return !sub_1CB8456FC(v3 + 24);
      }
      return 0;
    }
  }
  else if (v1 != 11)
  {
    if (v1 != 12) {
      return 0;
    }
    goto LABEL_7;
  }
  return v2;
}

uint64_t sub_1CB8C0F50(uint64_t *a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  int v16 = *(unsigned __int8 *)(*(void *)(*a1 + 480) + 281);
  int v17 = *a2;
  long long v70 = *(_OWORD *)(*(void *)(*(void *)a3 + 40) + 16 * a3[2]);
  unsigned __int8 v18 = sub_1CD3D796C((llvm::EVT *)&v70, (uint64_t)a2, (BOOL)a3);
  int v19 = v17;
  unsigned __int8 v20 = a9;
  unsigned int v22 = sub_1CD7E9F74(v19, v18, v21);
  if (a9) {
    unsigned int v23 = (v22 >> 1) & 2 | v22 & 0xFFFFFFF9 | (4 * ((v22 >> 1) & 1));
  }
  else {
    unsigned int v23 = v22;
  }
  unsigned int v69 = v23;
  if (v16) {
    goto LABEL_5;
  }
  int v25 = *(unsigned __int16 *)(*(void *)a4 + 24);
  BOOL v26 = v25 == 35 || v25 == 11;
  int v27 = a8;
  uint64_t v28 = a4;
  uint64_t v29 = (uint64_t)a1;
  if (!v26) {
    goto LABEL_63;
  }
  uint64_t v30 = *(void *)(*(void *)a4 + 80);
  uint64_t v31 = (void *)(v30 + 24);
  if (*(_DWORD *)(v30 + 32) >= 0x41u) {
    uint64_t v31 = (void *)*v31;
  }
  if (*v31 != 65537 || *a2 != 17) {
    goto LABEL_63;
  }
  uint64_t v33 = *(void *)a3;
  if (*(_WORD *)(*(void *)a3 + 24) != 216) {
    goto LABEL_63;
  }
  if (*(unsigned char *)(*(void *)(v33 + 40) + 16 * a3[2]) != 5) {
    goto LABEL_63;
  }
  uint64_t v34 = *(unsigned int **)(v33 + 32);
  uint64_t v35 = *(void *)v34;
  if (*(unsigned char *)(*(void *)(*(void *)v34 + 40) + 16 * v34[2]) != 38 || *(_WORD *)(v35 + 24) != 146) {
    goto LABEL_63;
  }
  for (uint64_t i = 0; i != 64; i += 32)
  {
    unsigned int v37 = (char *)&v70 + i;
    *((_DWORD *)v37 + 2) = 1;
    *(void *)unsigned int v37 = 0;
    *((_DWORD *)v37 + 6) = 1;
    *((void *)v37 + 2) = 0;
  }
  uint64_t v63 = a4;
  sub_1CD7F121C(a1[1], **(void **)(v35 + 32), *(void *)(*(void *)(v35 + 32) + 8), 0, (uint64_t)&v65);
  if (DWORD2(v70) >= 0x41 && (void)v70) {
    MEMORY[0x1D25D9CB0](v70, 0x1000C8000313F17);
  }
  uint64_t v38 = v65;
  *(void *)&long long v70 = v65;
  uint64_t v39 = v66;
  DWORD2(v70) = v66;
  unsigned int v66 = 0;
  if (v72 >= 0x41 && v71)
  {
    MEMORY[0x1D25D9CB0](v71, 0x1000C8000313F17);
    uint64_t v71 = v67;
    unsigned int v72 = v68;
    unsigned int v68 = 0;
    if (v66 >= 0x41 && v65) {
      MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v71 = v67;
    unsigned int v72 = v68;
  }
  uint64_t v40 = *(void *)(**(void **)(*(void *)a3 + 32) + 32);
  sub_1CD7F121C(a1[1], *(void *)(v40 + 40), *(void *)(v40 + 48), 0, (uint64_t)&v65);
  if (v74 >= 0x41 && v73) {
    MEMORY[0x1D25D9CB0](v73, 0x1000C8000313F17);
  }
  int v41 = v65;
  uint64_t v73 = v65;
  uint64_t v42 = v66;
  unsigned int v74 = v66;
  unsigned int v66 = 0;
  if (v76[0] >= 0x41u && v75)
  {
    unsigned int v62 = v65;
    uint64_t v61 = v42;
    MEMORY[0x1D25D9CB0](v75, 0x1000C8000313F17);
    uint64_t v42 = v61;
    int v41 = v62;
    uint64_t v75 = v67;
    v76[0] = v68;
    unsigned int v68 = 0;
    if (v66 >= 0x41 && v65)
    {
      MEMORY[0x1D25D9CB0](v65, 0x1000C8000313F17);
      uint64_t v42 = v61;
      int v41 = v62;
    }
  }
  else
  {
    uint64_t v75 = v67;
    v76[0] = v68;
  }
  if (v39 >= 0x41)
  {
    int v47 = 0;
    int64_t v48 = (unint64_t)(v39 + 63) >> 6;
    do
    {
      BOOL v49 = v48-- < 1;
      if (v49) {
        break;
      }
      unint64_t v50 = v38[v48];
      v47 += __clz(v50);
    }
    while (!v50);
    uint64_t v43 = a5;
    int v44 = a6;
    uint64_t v45 = a7;
    int v51 = v39 | 0xFFFFFFC0;
    if ((v39 & 0x3F) == 0) {
      int v51 = 0;
    }
    int v46 = a8;
    if ((v39 - v47 - v51) > 0x40) {
      goto LABEL_52;
    }
    uint64_t v38 = (void *)*v38;
  }
  else
  {
    uint64_t v43 = a5;
    int v44 = a6;
    uint64_t v45 = a7;
    int v46 = a8;
  }
  if (v38 != (void *)65534) {
    goto LABEL_52;
  }
  if (v42 >= 0x41)
  {
    int v52 = 0;
    int64_t v53 = (unint64_t)(v42 + 63) >> 6;
    do
    {
      BOOL v49 = v53-- < 1;
      if (v49) {
        break;
      }
      unint64_t v54 = v41[v53];
      v52 += __clz(v54);
    }
    while (!v54);
    int v55 = v42 | 0xFFFFFFC0;
    if ((v42 & 0x3F) == 0) {
      int v55 = 0;
    }
    if ((v42 - v52 - v55) > 0x40) {
      goto LABEL_52;
    }
    int v41 = (void *)*v41;
  }
  if (v41 != (void *)65534)
  {
LABEL_52:
    int v56 = 1;
    goto LABEL_53;
  }
  int v56 = 0;
  *a2 = 12;
LABEL_53:
  for (uint64_t j = 0; j != -16; j -= 8)
  {
    int v58 = (char *)&v70 + j * 4;
    if (v76[j] >= 0x41u)
    {
      uint64_t v59 = *((void *)v58 + 6);
      if (v59) {
        MEMORY[0x1D25D9CB0](v59, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)v58 + 10) >= 0x41u)
    {
      uint64_t v60 = *((void *)v58 + 4);
      if (v60) {
        MEMORY[0x1D25D9CB0](v60, 0x1000C8000313F17);
      }
    }
  }
  int v27 = v46;
  a7 = v45;
  a6 = v44;
  a5 = v43;
  uint64_t v28 = v63;
  unsigned __int8 v20 = a9;
  if (!v56) {
    return 1;
  }
LABEL_63:
  uint64_t result = sub_1CD3D77F0(v29, (int *)&v69, (uint64_t)a3, v28, a5, a6, a7, v27, v20);
  if (result)
  {
    unsigned int v23 = v69;
LABEL_5:
    *a2 = v23;
    return 1;
  }
  return result;
}

uint64_t sub_1CB8C14AC(uint64_t result, unsigned int *a2, unsigned int *a3, _DWORD *a4, uint64_t *a5, uint64_t *a6, int a7)
{
  int v7 = a7;
  unsigned int v9 = a5;
  int v13 = (uint64_t *)result;
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(void *)a3;
  uint64_t v15 = *(void *)a4;
  int v16 = a4[2];
  int v17 = *(unsigned __int16 *)(*(void *)a3 + 24);
  if (v17 != 36 && v17 != 12)
  {
    unsigned int v19 = a3[2];
    uint64_t v20 = *(void *)a4;
    goto LABEL_6;
  }
  uint64_t v48 = *(void *)(v14 + 80);
  unint64_t v50 = *(void **)(v48 + 32);
  BOOL v49 = (const llvm::detail::DoubleAPFloat *)(v48 + 32);
  if (v50 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v144 + 1, v49);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v144 + 8, v49);
  }
  if (*((_UNKNOWN **)&v144 + 1) == &unk_1CFB2E344)
  {
    sub_1CBFC6FB8(v145);
    sub_1CBFC6FB8(v145 + 32);
  }
  else
  {
    v146 ^= 8u;
  }
  uint64_t v51 = v13[1];
  uint64_t v52 = *(void *)a3;
  int64_t v53 = *(unsigned __int8 **)(*(void *)a3 + 64);
  unsigned int v141 = v53;
  uint64_t v54 = v52;
  if (v53)
  {
    llvm::MetadataTracking::track((uint64_t)&v141, v53, 2);
    uint64_t v54 = *(void *)a3;
  }
  int v142 = *(_DWORD *)(v52 + 60);
  uint64_t v55 = *(void *)(v54 + 40) + 16 * a3[2];
  uint64_t result = (uint64_t)sub_1CD7ECA8C(v51, (llvm::LLVMContext *)&v144, (const llvm::APFloat *)&v141, *(llvm **)v55, *(void *)(v55 + 8), 0);
  uint64_t v14 = result;
  unsigned int v9 = a5;
  int v7 = a7;
  if (v141)
  {
    int v56 = *v141;
    if ((v56 - 4) > 0x1E)
    {
      if ((v56 - 3) >= 0xFFFFFFFE) {
        long long v92 = v141;
      }
      else {
        long long v92 = 0;
      }
      if ((v56 - 3) >= 0xFFFFFFFE)
      {
        unsigned int v93 = v19;
        unint64_t v94 = (unint64_t)(v92 + 8);
LABEL_114:
        unint64_t v143 = &v141;
        uint64_t result = sub_1CC5FA668(v94 + 16, &v143);
        unsigned int v9 = a5;
        int v7 = a7;
        unsigned int v19 = v93;
        goto LABEL_65;
      }
      if (v56 == 3) {
        *((void *)v141 + 1) = 0;
      }
    }
    else if ((v141[1] & 0x7F) == 2 || *((_DWORD *)v141 + 3))
    {
      uint64_t v126 = *((void *)v141 + 2);
      if ((v126 & 4) != 0)
      {
        unint64_t v94 = v126 & 0xFFFFFFFFFFFFFFF8;
        if (v94)
        {
          unsigned int v93 = v19;
          goto LABEL_114;
        }
      }
    }
  }
LABEL_65:
  if (*((_UNKNOWN **)&v144 + 1) == &unk_1CFB2E344)
  {
    unsigned int v128 = v19;
    uint64_t result = (uint64_t)sub_1CB845718(&v145);
  }
  else
  {
    if ((*(_DWORD *)(*((void *)&v144 + 1) + 8) - 64) > 0xFFFFFF7F) {
      goto LABEL_67;
    }
    uint64_t result = v145;
    if (!v145) {
      goto LABEL_67;
    }
    unsigned int v128 = v19;
    uint64_t result = MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
  }
  unsigned int v19 = v128;
  int v7 = a7;
  unsigned int v9 = a5;
LABEL_67:
  uint64_t v20 = *(void *)a4;
LABEL_6:
  int v21 = *(unsigned __int16 *)(v20 + 24);
  if (v21 == 36 || v21 == 12)
  {
    unsigned int v132 = v19;
    int v137 = v7;
    unsigned int v140 = v9;
    uint64_t v57 = *(void *)(v20 + 80);
    uint64_t v59 = *(void **)(v57 + 32);
    int v58 = (const llvm::detail::DoubleAPFloat *)(v57 + 32);
    if (v59 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v144 + 1, v58);
    }
    else {
      llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v144 + 8, v58);
    }
    if (*((_UNKNOWN **)&v144 + 1) == &unk_1CFB2E344)
    {
      sub_1CBFC6FB8(v145);
      sub_1CBFC6FB8(v145 + 32);
    }
    else
    {
      v146 ^= 8u;
    }
    uint64_t v60 = v13[1];
    uint64_t v61 = *(void *)a4;
    unsigned int v62 = *(unsigned __int8 **)(*(void *)a4 + 64);
    unsigned int v141 = v62;
    uint64_t v63 = v61;
    if (v62)
    {
      llvm::MetadataTracking::track((uint64_t)&v141, v62, 2);
      uint64_t v63 = *(void *)a4;
    }
    int v142 = *(_DWORD *)(v61 + 60);
    uint64_t v64 = *(void *)(v63 + 40) + 16 * a4[2];
    uint64_t result = (uint64_t)sub_1CD7ECA8C(v60, (llvm::LLVMContext *)&v144, (const llvm::APFloat *)&v141, *(llvm **)v64, *(void *)(v64 + 8), 0);
    uint64_t v15 = result;
    int v16 = v65;
    unsigned int v9 = v140;
    int v7 = v137;
    unsigned int v19 = v132;
    if (v141)
    {
      int v66 = *v141;
      if ((v66 - 4) > 0x1E)
      {
        if ((v66 - 3) >= 0xFFFFFFFE) {
          unint64_t v95 = v141;
        }
        else {
          unint64_t v95 = 0;
        }
        if ((v66 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v96 = (unint64_t)(v95 + 8);
LABEL_120:
          unint64_t v143 = &v141;
          uint64_t result = sub_1CC5FA668(v96 + 16, &v143);
          unsigned int v9 = v140;
          int v7 = v137;
          unsigned int v19 = v132;
          goto LABEL_78;
        }
        if (v66 == 3) {
          *((void *)v141 + 1) = 0;
        }
      }
      else if ((v141[1] & 0x7F) == 2 || *((_DWORD *)v141 + 3))
      {
        uint64_t v127 = *((void *)v141 + 2);
        if ((v127 & 4) != 0)
        {
          unint64_t v96 = v127 & 0xFFFFFFFFFFFFFFF8;
          if (v96) {
            goto LABEL_120;
          }
        }
      }
    }
LABEL_78:
    if (*((_UNKNOWN **)&v144 + 1) == &unk_1CFB2E344)
    {
      uint64_t result = (uint64_t)sub_1CB845718(&v145);
    }
    else
    {
      if ((*(_DWORD *)(*((void *)&v144 + 1) + 8) - 64) > 0xFFFFFF7F) {
        goto LABEL_10;
      }
      uint64_t result = v145;
      if (!v145) {
        goto LABEL_10;
      }
      uint64_t result = MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
    }
    unsigned int v19 = v132;
    int v7 = v137;
    unsigned int v9 = v140;
  }
LABEL_10:
  int v23 = *(unsigned __int16 *)(v14 + 24);
  if (v23 == 222)
  {
    uint64_t v24 = *(_DWORD **)(v14 + 32);
    uint64_t v14 = *(void *)v24;
    unsigned int v19 = v24[2];
    int v23 = *(unsigned __int16 *)(*(void *)v24 + 24);
  }
  if (v23 == 223)
  {
    uint64_t v25 = *(void *)(v14 + 32);
    uint64_t v14 = *(void *)v25;
    unsigned int v19 = *(_DWORD *)(v25 + 8);
  }
  int v26 = *(unsigned __int16 *)(v15 + 24);
  if (v26 == 222)
  {
    int v27 = *(_DWORD **)(v15 + 32);
    uint64_t v15 = *(void *)v27;
    int v16 = v27[2];
    int v26 = *(unsigned __int16 *)(*(void *)v27 + 24);
  }
  unint64_t v135 = v13;
  uint32x4_t v138 = a2;
  if (v26 == 223)
  {
    uint64_t v28 = *(void *)(v15 + 32);
    uint64_t v15 = *(void *)v28;
    int v16 = *(_DWORD *)(v28 + 8);
  }
  uint64_t v29 = *a6;
  if (v15 == *a6 && v16 == *((_DWORD *)a6 + 2)) {
    return result;
  }
  uint64_t v30 = *v9;
  int v31 = *(unsigned __int16 *)(*v9 + 24);
  if (v31 == 35 || v31 == 11) {
    uint64_t v33 = *v9;
  }
  else {
    uint64_t v33 = 0;
  }
  if (v31 != 36 && v31 != 12) {
    uint64_t v30 = 0;
  }
  int v34 = *(unsigned __int16 *)(v29 + 24);
  if (v34 == 35 || v34 == 11) {
    uint64_t v35 = *a6;
  }
  else {
    uint64_t v35 = 0;
  }
  if (v34 != 36 && v34 != 12) {
    uint64_t v29 = 0;
  }
  if (v33)
  {
    uint64_t v36 = *(void *)(v33 + 80);
    unsigned int v37 = (uint64_t *)(v36 + 24);
    if (*(_DWORD *)(v36 + 32) >= 0x41u) {
      unsigned int v37 = (uint64_t *)*v37;
    }
    uint64_t v38 = *v37;
    if (!v35) {
      goto LABEL_83;
    }
LABEL_51:
    uint64_t v45 = *(void *)(v35 + 80);
    int v46 = (uint64_t *)(v45 + 24);
    if (*(_DWORD *)(v45 + 32) >= 0x41u) {
      int v46 = (uint64_t *)*v46;
    }
    uint64_t v47 = *v46;
    if (!*v46) {
      return result;
    }
    goto LABEL_93;
  }
  if (!v30)
  {
    uint64_t v38 = -1;
    if (!v35) {
      goto LABEL_83;
    }
    goto LABEL_51;
  }
  long long v129 = a6;
  unsigned int v131 = v19;
  int v39 = v7;
  uint64_t v40 = v9;
  uint64_t v41 = *(void *)(v30 + 80);
  uint64_t v43 = *(void **)(v41 + 32);
  uint64_t v42 = (llvm::detail::DoubleAPFloat *)(v41 + 32);
  if (v43 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v42, (llvm::APInt *)&v144);
  }
  else {
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v42, (uint64_t)&v144);
  }
  uint64_t result = v144;
  if (DWORD2(v144) >= 0x41) {
    int v44 = (uint64_t *)v144;
  }
  else {
    int v44 = (uint64_t *)&v144;
  }
  uint64_t v38 = *v44;
  if (DWORD2(v144) >= 0x41 && (void)v144) {
    uint64_t result = MEMORY[0x1D25D9CB0]();
  }
  unsigned int v9 = v40;
  int v7 = v39;
  a6 = v129;
  unsigned int v19 = v131;
  if (v35) {
    goto LABEL_51;
  }
LABEL_83:
  if (v29)
  {
    unsigned int v130 = a6;
    unsigned int v133 = v19;
    int v67 = v7;
    unsigned int v68 = v9;
    uint64_t v69 = *(void *)(v29 + 80);
    uint64_t v71 = *(void **)(v69 + 32);
    long long v70 = (llvm::detail::DoubleAPFloat *)(v69 + 32);
    if (v71 == &unk_1CFB2E344) {
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v70, (llvm::APInt *)&v144);
    }
    else {
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v70, (uint64_t)&v144);
    }
    uint64_t result = v144;
    if (DWORD2(v144) >= 0x41) {
      unsigned int v72 = (uint64_t *)v144;
    }
    else {
      unsigned int v72 = (uint64_t *)&v144;
    }
    uint64_t v47 = *v72;
    if (DWORD2(v144) >= 0x41 && (void)v144) {
      uint64_t result = MEMORY[0x1D25D9CB0]();
    }
    unsigned int v9 = v68;
    int v7 = v67;
    a6 = v130;
    unsigned int v19 = v133;
    if (!v47) {
      return result;
    }
LABEL_93:
    BOOL v73 = v38 == 0;
    if (!v38 && v47 == 1) {
      return result;
    }
    goto LABEL_97;
  }
  BOOL v73 = v38 == 0;
  uint64_t v47 = -1;
LABEL_97:
  unsigned int v74 = v135;
  uint64_t v75 = v138;
  if (v73 && v47 != 1)
  {
    if (v7)
    {
      uint64_t v76 = *a6;
      uint64_t v77 = a6[1];
      unsigned int v134 = v19;
      uint64_t v78 = v9;
      uint64_t v79 = a6;
      int v80 = v7;
      uint64_t result = sub_1CB8C0F50(v135, v138, a3, (uint64_t)a4, *v9, v9[1], v76, v77, 0);
      unsigned int v19 = v134;
      int v7 = v80;
      a6 = v79;
      uint64_t v75 = v138;
      unsigned int v74 = v135;
      unsigned int v9 = v78;
      if (result) {
        goto LABEL_155;
      }
    }
  }
  uint64_t v81 = *a6;
  if (v14 == *a6 && v19 == *((_DWORD *)a6 + 2))
  {
    long long v144 = *(_OWORD *)a3;
    unsigned int v82 = a4[2];
    *(void *)a3 = *(void *)a4;
    a3[2] = v82;
    *(void *)a4 = v144;
    a4[2] = DWORD2(v144);
    unsigned int *v75 = (*v75 >> 1) & 2 | *v75 & 0xFFFFFFF9 | (4 * ((*v75 >> 1) & 1));
    return result;
  }
  if (v7)
  {
    uint64_t v83 = *v9;
    int v84 = *((_DWORD *)v9 + 2);
    if (v15 == *v9 && v16 == v84)
    {
      int v85 = v75;
      unsigned int v86 = v19;
      uint64_t v87 = a6;
      int v88 = v7;
      uint64_t v89 = v85;
      uint64_t v90 = v9;
      uint64_t result = sub_1CB8C0F50(v74, v85, a3, (uint64_t)a4, v83, v9[1], v81, v87[1], 0);
      if (result)
      {
        long long v144 = *(_OWORD *)v90;
        int v91 = *((_DWORD *)v87 + 2);
        *uint64_t v90 = *v87;
        *((_DWORD *)v90 + 2) = v91;
        *uint64_t v87 = v144;
        *((_DWORD *)v87 + 2) = DWORD2(v144);
        return result;
      }
      uint64_t v83 = *v90;
      int v84 = *((_DWORD *)v90 + 2);
      unsigned int v9 = v90;
      int v7 = v88;
      a6 = v87;
      unsigned int v19 = v86;
      uint64_t v75 = v89;
    }
    if (v14 == v83 && v19 == v84)
    {
      uint64_t v97 = *a6;
      uint64_t v98 = a6[1];
      uint64_t v99 = v74;
      uint64_t v100 = v9;
      uint64_t v101 = a6;
      int v102 = v7;
      uint64_t result = sub_1CB8C0F50(v99, v75, a3, (uint64_t)a4, v83, v9[1], v97, v98, 1u);
      int v7 = v102;
      a6 = v101;
      unsigned int v9 = v100;
      if (result)
      {
        long long v144 = *(_OWORD *)a3;
        unsigned int v103 = a4[2];
        *(void *)a3 = *(void *)a4;
        a3[2] = v103;
        *(void *)a4 = v144;
        a4[2] = DWORD2(v144);
LABEL_155:
        long long v144 = *(_OWORD *)v9;
        int v118 = *((_DWORD *)a6 + 2);
        uint64_t *v9 = *a6;
        *((_DWORD *)v9 + 2) = v118;
LABEL_156:
        *a6 = v144;
        *((_DWORD *)a6 + 2) = DWORD2(v144);
        return result;
      }
    }
  }
  int v104 = *(unsigned __int16 *)(*(void *)a4 + 24);
  if (v104 == 35 || v104 == 11)
  {
    uint64_t v105 = *(void *)(*(void *)a4 + 80);
    unsigned int v106 = (void *)(v105 + 24);
    if (*(_DWORD *)(v105 + 32) >= 0x41u) {
      unsigned int v106 = (void *)*v106;
    }
    if (*v75 == 17 && !*v106)
    {
      uint64_t result = *v9;
      int v107 = *(unsigned __int16 *)(*v9 + 24);
      if (v107 == 35 || v107 == 11) {
        uint64_t v108 = *v9;
      }
      else {
        uint64_t v108 = 0;
      }
      uint64_t v109 = v107 == 36 || v107 == 12 ? *v9 : 0;
      if (v108)
      {
        uint64_t v110 = *(void *)(v108 + 80);
        uint64_t v111 = (void *)(v110 + 24);
        if (*(_DWORD *)(v110 + 32) >= 0x41u) {
          uint64_t v111 = (void *)*v111;
        }
        if (!*v111) {
          goto LABEL_154;
        }
      }
      if (v109)
      {
        uint64_t v112 = *(void *)(v109 + 80);
        uint64_t v113 = *(_UNKNOWN **)(v112 + 32) == &unk_1CFB2E344 ? *(void *)(v112 + 40) : v112 + 24;
        if ((*(unsigned char *)(v113 + 28) & 7) == 3) {
          goto LABEL_154;
        }
      }
      int v114 = v9;
      uint64_t v115 = a6;
      int v116 = v7;
      unsigned int v117 = sub_1CB8C1EEC(result, v9[1]);
      uint64_t result = sub_1CB8C1EEC(*v115, v115[1]);
      int v7 = v116;
      a6 = v115;
      unsigned int v9 = v114;
      if (v117 > result)
      {
LABEL_154:
        unsigned int *v75 = 10;
        goto LABEL_155;
      }
    }
  }
  if (v7)
  {
    uint64_t v119 = *v9;
    uint64_t v120 = v9[1];
    long long v121 = v9;
    unsigned int v122 = sub_1CB8C1EEC(*v9, v120);
    uint64_t v123 = *a6;
    uint64_t v124 = a6[1];
    uint64_t result = sub_1CB8C1EEC(*a6, v124);
    if (v122 > result)
    {
      uint64_t result = sub_1CB8C0F50(v135, v138, a3, (uint64_t)a4, v119, v120, v123, v124, 0);
      if (result)
      {
        long long v144 = *(_OWORD *)v121;
        int v125 = *((_DWORD *)a6 + 2);
        uint64_t *v121 = *a6;
        *((_DWORD *)v121 + 2) = v125;
        goto LABEL_156;
      }
    }
  }
  return result;
}

uint64_t sub_1CB8C1EEC(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 24);
    if (v2 <= 0x24 && ((1 << v2) & 0x1800001800) != 0) {
      return 0;
    }
    if ((v2 & 0x8000) != 0)
    {
      if (v2 == 65527 || v2 == 65517) {
        return 0;
      }
      else {
        return 2;
      }
    }
    uint64_t v4 = 0;
    if (*(unsigned __int16 *)(a1 + 24) > 0x91u)
    {
      if (*(unsigned __int16 *)(a1 + 24) > 0x18Au)
      {
        if (v2 == 395 || v2 == 437) {
          return v4;
        }
      }
      else if (v2 == 146 || v2 == 201)
      {
        return v4;
      }
    }
    else if (v2 <= 0x36 && ((1 << v2) & 0x44000000040100) != 0)
    {
      return v4;
    }
    if (v2 - 397 < 0x1A) {
      return 0;
    }
    if (v2 - 3 >= 2 && v2 != 216) {
      break;
    }
    long long v5 = *(uint64_t **)(a1 + 32);
    a1 = *v5;
    a2 = v5[1];
  }
  uint64_t v8 = *(void *)(a1 + 48);
  if (!v8) {
    return 1;
  }
  int v9 = 1;
  do
  {
    if (*(_DWORD *)(v8 + 8) == a2)
    {
      if (!v9) {
        return 1;
      }
      --v9;
    }
    uint64_t v8 = *(void *)(v8 + 32);
  }
  while (v8);
  if (v2 == 192) {
    unsigned int v10 = 3;
  }
  else {
    unsigned int v10 = 4;
  }
  if (v9) {
    return 1;
  }
  else {
    return v10;
  }
}

BOOL sub_1CB8C2014(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 != 35 && v1 != 11) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 32);
  if (v4 > 0x40)
  {
    int v7 = 0;
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    do
    {
      if (v8-- < 1) {
        break;
      }
      unint64_t v10 = *(void *)(*(void *)(v3 + 24) + 8 * v8);
      v7 += __clz(v10);
    }
    while (!v10);
    int v11 = v4 | 0xFFFFFFC0;
    if ((v4 & 0x3F) == 0) {
      int v11 = 0;
    }
    return v7 + v11 == v4;
  }
  else
  {
    return *(void *)(v3 + 24) == 0;
  }
}

BOOL sub_1CB8C208C(uint64_t a1)
{
  int v1 = *(unsigned __int16 *)(a1 + 24);
  if (v1 != 35 && v1 != 11) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v4 = *(unsigned int *)(v3 + 32);
  if (v4 > 0x40)
  {
    int v7 = 0;
    int64_t v8 = (unint64_t)(v4 + 63) >> 6;
    do
    {
      if (v8-- < 1) {
        break;
      }
      unint64_t v10 = *(void *)(*(void *)(v3 + 24) + 8 * v8);
      v7 += __clz(v10);
    }
    while (!v10);
    int v11 = v4 | 0xFFFFFFC0;
    if ((v4 & 0x3F) == 0) {
      int v11 = 0;
    }
    return v7 + v11 == v4 - 1;
  }
  else
  {
    return *(void *)(v3 + 24) == 1;
  }
}

uint64_t *sub_1CB8C2108(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8, long long a9, long long a10, const llvm::APInt *a11)
{
  v158[24] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v153 = a3;
  *((void *)&v153 + 1) = a4;
  *(void *)&long long v152 = a6;
  *((void *)&v152 + 1) = a7;
  long long v151 = a9;
  long long v150 = a10;
  if (*(_WORD *)(a3 + 24) == 215)
  {
    uint64_t v13 = *(void *)(a3 + 32);
    int v14 = *(_DWORD *)(v13 + 8);
    *(void *)&long long v153 = *(void *)v13;
    DWORD2(v153) = v14;
  }
  if (*(_WORD *)(a6 + 24) == 215)
  {
    uint64_t v15 = *(void *)(a6 + 32);
    int v16 = *(_DWORD *)(v15 + 8);
    *(void *)&long long v152 = *(void *)v15;
    DWORD2(v152) = v16;
  }
  long long v149 = *(_OWORD *)(*(void *)(a9 + 40) + 16 * DWORD2(a9));
  *(_OWORD *)long long v157 = *(_OWORD *)(*(void *)(v153 + 40) + 16 * DWORD2(v153));
  if (LOBYTE(v157[0])) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v157);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v157);
  }
  uint64_t v19 = ExtendedSizeInBits;
  if (v18 == 1) {
  BOOL v20 = v19 == 16;
  }
  *(_OWORD *)long long v157 = *(_OWORD *)(*(void *)(v152 + 40) + 16 * DWORD2(v152));
  if (LOBYTE(v157[0])) {
    uint64_t v21 = sub_1CB87E200((unsigned __int8 *)v157);
  }
  else {
    uint64_t v21 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v157);
  }
  uint64_t v23 = v21;
  if (v22 == 1) {
  BOOL v131 = v23 == 16;
  }
  *(_OWORD *)long long v157 = *(_OWORD *)(*(void *)(a9 + 40) + 16 * DWORD2(a9));
  if (LOBYTE(v157[0])) {
    uint64_t v24 = sub_1CB87E200((unsigned __int8 *)v157);
  }
  else {
    uint64_t v24 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v157);
  }
  uint64_t v129 = v24;
  if (v25 == 1) {
  if ((_BYTE)v149)
  }
    uint64_t v26 = sub_1CB87E200((unsigned __int8 *)&v149);
  else {
    uint64_t v26 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v149);
  }
  uint64_t v28 = v26;
  if (v27 == 1) {
  unsigned int v140 = sub_1CD3D6758(a1[1], v153, DWORD2(v153), a5);
  }
  uint64_t v30 = v29;
  unint64_t v130 = (unint64_t)sub_1CD3D6758(a1[1], v152, DWORD2(v152), a8);
  uint64_t v133 = v31;
  uint64_t v32 = sub_1CD3D62F0(a1[1], a9, DWORD2(a9), 0);
  uint64_t v136 = v33;
  int v137 = v32;
  int v34 = sub_1CD3D62F0(a1[1], a10, DWORD2(a10), 0);
  uint64_t v135 = v35;
  int v37 = *(unsigned __int16 *)(v152 + 24);
  if (v37 == 36 || (BOOL v38 = 0, v37 == 12))
  {
    uint64_t v39 = *(void *)(v152 + 80);
    if (*(_UNKNOWN **)(v39 + 32) == &unk_1CFB2E344) {
      uint64_t v40 = *(void *)(v39 + 40);
    }
    else {
      uint64_t v40 = v39 + 24;
    }
    BOOL v38 = (*(unsigned char *)(v40 + 28) & 7) == 3;
  }
  uint64_t v41 = a11;
  if (*(unsigned char *)(*(void *)(*a1 + 480) + 281)) {
    BOOL v42 = v38;
  }
  else {
    BOOL v42 = 0;
  }
  unint64_t v43 = (unint64_t)v137 | v136;
  BOOL v44 = v43 == 0;
  if (v43)
  {
    uint64_t v46 = v137[10];
    uint64_t v47 = (unsigned int *)(v46 + 24);
    if (*(_DWORD *)(v46 + 32) >= 0x41u) {
      uint64_t v47 = *(unsigned int **)v47;
    }
    uint64_t v48 = *v47;
    if (v48 == 1) {
      int v49 = 1;
    }
    else {
      int v49 = 2;
    }
    if (v48) {
      int v45 = v49;
    }
    else {
      int v45 = 0;
    }
  }
  else
  {
    int v45 = 3;
  }
  unint64_t v50 = (unint64_t)v34 | v35;
  BOOL v123 = v50 == 0;
  unsigned int v132 = v34;
  int v141 = v45;
  if (v50)
  {
    uint64_t v59 = v34[10];
    uint64_t v60 = (unsigned int *)(v59 + 24);
    if (*(_DWORD *)(v59 + 32) >= 0x41u) {
      uint64_t v60 = *(unsigned int **)v60;
    }
    uint64_t v61 = *v60;
    if (v61 == 1) {
      int v51 = 1;
    }
    else {
      int v51 = 2;
    }
    if (!v61) {
      int v51 = 0;
    }
    BOOL v124 = v45 == 0;
    if (!v45 && v61 == 1)
    {
      int v119 = *(unsigned __int8 *)(*(void *)(*a1 + 480) + 281);
      uint64_t v120 = a10;
      unsigned int v121 = DWORD2(a10);
      uint64_t v122 = v28;
      BOOL v117 = 0;
      BOOL v126 = 0;
      BOOL v127 = 1;
      BOOL v128 = v20;
      BOOL v124 = 1;
      goto LABEL_70;
    }
  }
  else
  {
    BOOL v124 = v45 == 0;
    int v51 = 3;
  }
  BOOL v52 = v45 != 1;
  if (v51) {
    BOOL v52 = 1;
  }
  else {
    BOOL v42 = 0;
  }
  if (!v42)
  {
    BOOL v117 = v52;
    BOOL v126 = v51 != 0;
    BOOL v127 = v51;
    int v119 = *(unsigned __int8 *)(*(void *)(*a1 + 480) + 281);
    uint64_t v120 = a10;
    unsigned int v121 = DWORD2(a10);
    BOOL v128 = v20;
    uint64_t v122 = v28;
LABEL_70:
    uint64_t v63 = sub_1CD7EBF14(a1[1], 0, a11, (llvm *)5, 0, 1, 0);
    v157[0] = v158;
    v158[0] = v63;
    v158[1] = v62;
    v157[1] = (void *)0xC00000001;
    uint64_t v145 = v63;
    uint64_t v146 = v62;
    unint64_t v64 = (unint64_t)v140 | v30;
    BOOL v65 = v64 == 0;
    int v125 = (uint64_t *)v62;
    if (!v64)
    {
      if (a5) {
        unsigned int v66 = 2;
      }
      else {
        unsigned int v66 = 0;
      }
      sub_1CB896BAC(*a1, v153, DWORD2(v153), (uint64_t)&v153, (uint64_t)&v145, 0, 0, 1, 1, 0, v66);
      uint64_t v62 = (uint64_t)v125;
      BOOL v128 = *(unsigned __int8 *)(*(void *)(v153 + 40) + 16 * DWORD2(v153)) == 9;
    }
    unint64_t v143 = v63;
    uint64_t v144 = v62;
    unint64_t v67 = v130;
    unint64_t v68 = v130 | v133;
    BOOL v69 = v68 == 0;
    if (!v68)
    {
      if (a8) {
        unsigned int v70 = 2;
      }
      else {
        unsigned int v70 = 0;
      }
      sub_1CB896BAC(*a1, v152, DWORD2(v152), (uint64_t)&v152, (uint64_t)&v143, 0, 0, 1, 1, 0, v70);
      uint64_t v62 = (uint64_t)v125;
      BOOL v131 = *(unsigned __int8 *)(*(void *)(v152 + 40) + 16 * DWORD2(v152)) == 9;
    }
    uint64_t v71 = v132;
    int v72 = v141;
    uint64_t v118 = v30;
    if (v65)
    {
      if (LODWORD(v157[1]) >= HIDWORD(v157[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v157[0] + LODWORD(v157[1])) = v153;
      unsigned int v73 = LODWORD(v157[1]) + 1;
      LODWORD(v157[1]) = v73;
      uint64_t v30 = v146;
      uint64_t v75 = v120;
      unsigned int v74 = v121;
      if (v73 >= HIDWORD(v157[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v76 = (char *)v157[0] + 16 * v73;
      *(void *)uint64_t v76 = v145;
      unint64_t v67 = v130;
    }
    else
    {
      if (LODWORD(v157[1]) >= HIDWORD(v157[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v76 = (char *)v157[0] + 16 * LODWORD(v157[1]);
      *(void *)uint64_t v76 = v140;
      uint64_t v75 = v120;
      unsigned int v74 = v121;
    }
    *((void *)v76 + 1) = v30;
    unsigned int v77 = ++LODWORD(v157[1]);
    if (v69)
    {
      if (v77 >= HIDWORD(v157[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *((_OWORD *)v157[0] + v77) = v152;
      unsigned int v78 = LODWORD(v157[1]) + 1;
      LODWORD(v157[1]) = v78;
      uint64_t v79 = v144;
      if (v78 >= HIDWORD(v157[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v80 = (char *)v157[0] + 16 * v78;
      *(void *)int v80 = v143;
      uint64_t v81 = DWORD2(a9);
    }
    else
    {
      uint64_t v81 = DWORD2(a9);
      if (v77 >= HIDWORD(v157[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v80 = (char *)v157[0] + 16 * v77;
      *(void *)int v80 = v67;
      uint64_t v79 = v133;
    }
    *((void *)v80 + 1) = v79;
    unsigned int v82 = ++LODWORD(v157[1]);
    if (v117)
    {
      if (v44)
      {
        long long v154 = v63;
        uint64_t v155 = v62;
        long long v142 = *(_OWORD *)(*(void *)(a9 + 40) + 16 * v81);
        if ((_BYTE)v142) {
          uint64_t v83 = sub_1CB87E200((unsigned __int8 *)&v142);
        }
        else {
          uint64_t v83 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v142);
        }
        uint64_t v90 = v83;
        if (v84 == 1) {
        sub_1CB896BAC(*a1, a9, DWORD2(a9), (uint64_t)&v151, (uint64_t)&v154, 0, v90 != 32, 0, 0, 0, 0);
        }
        if (LODWORD(v157[1]) >= HIDWORD(v157[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        *((_OWORD *)v157[0] + LODWORD(v157[1])) = v151;
        unsigned int v91 = LODWORD(v157[1]) + 1;
        LODWORD(v157[1]) = v91;
        if (v91 >= HIDWORD(v157[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        long long v92 = (uint64_t **)((char *)v157[0] + 16 * v91);
        uint64_t v62 = (uint64_t)v125;
        unsigned __int8 *v92 = v63;
        v92[1] = v125;
        ++LODWORD(v157[1]);
        uint64_t v71 = v132;
        int v72 = v141;
        if (!v126) {
          goto LABEL_108;
        }
        goto LABEL_99;
      }
      if (v82 >= HIDWORD(v157[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v85 = (char *)v157[0] + 16 * v82;
      void *v85 = v137;
      v85[1] = v136;
      ++LODWORD(v157[1]);
    }
    if (!v126)
    {
LABEL_108:
      int v93 = 0;
      int v94 = 0;
      uint64_t v86 = v129;
      uint64_t v87 = v133;
      uint64_t v95 = v118;
LABEL_132:
      int v139 = v94;
      uint64_t v101 = sub_1CD7EEB94(a1[1], v94, (llvm *)5, 0);
      if (LODWORD(v157[1]) >= HIDWORD(v157[1])) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      int v102 = (uint64_t *)((char *)v157[0] + 16 * LODWORD(v157[1]));
      uint64_t *v102 = v101;
      v102[1] = v100;
      ++LODWORD(v157[1]);
      sub_1CB8C2E38(a1[1], (uint64_t)v157, 0);
      int v103 = sub_1CD3D3F60(a2, v122 == 16, ((unint64_t)v140 | v95) != 0, v128, (v67 | v87) != 0, v131, v141, v86 == 16, v127, v119 != 0, 0);
      uint64_t v104 = a1[1];
      uint64_t v105 = (uint64_t *)v157[0];
      uint64_t v106 = LODWORD(v157[1]);
      uint64_t v107 = sub_1CD7F95FC(v104, v149, *((uint64_t *)&v149 + 1), 172, 0);
      uint64_t v109 = sub_1CD801044(v104, v103, (uint64_t)a11, v107, v108, v105, v106);
      uint64_t v55 = v109;
      if (v93)
      {
        long long v154 = v156;
        v156[0] = v109;
        v156[1] = 0;
        uint64_t v113 = *((void *)&v150 + 1);
        uint64_t v112 = v150;
        if (!v123)
        {
          uint64_t v112 = (uint64_t)v132;
          uint64_t v113 = v135;
        }
        v156[2] = v112;
        v156[3] = v113;
        uint64_t v155 = 0x500000002;
        sub_1CB8C2E38(a1[1], (uint64_t)&v154, v139);
        if (v155 >= HIDWORD(v155)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        int v114 = (uint64_t **)((char *)v154 + 16 * v155);
        *int v114 = v55;
        v114[1] = (uint64_t *)1;
        uint64_t v115 = (v155 + 1);
        LODWORD(v155) = v155 + 1;
        uint64_t v116 = 2;
        if (v123) {
          uint64_t v116 = 0;
        }
        uint64_t v55 = sub_1CD801450(a1[1], dword_1CD923568[v116 | (v122 == 16)], (uint64_t)a11, (llvm *)v149, *((uint64_t *)&v149 + 1), (uint64_t *)v154, v115);
        if (v154 != v156) {
          free(v154);
        }
      }
      if (v157[0] != v158) {
        free(v157[0]);
      }
      return v55;
    }
LABEL_99:
    uint64_t v86 = v129;
    uint64_t v87 = v133;
    if (v123)
    {
      long long v154 = v63;
      uint64_t v155 = v62;
      long long v142 = *(_OWORD *)(*(void *)(v75 + 40) + 16 * v74);
      if ((_BYTE)v142) {
        uint64_t v88 = sub_1CB87E200((unsigned __int8 *)&v142);
      }
      else {
        uint64_t v88 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v142);
      }
      uint64_t v96 = v88;
      if (v89 == 1) {
      sub_1CB896BAC(*a1, v75, v74, (uint64_t)&v150, (uint64_t)&v154, 0, v96 != 32, 0, 0, 0, 0);
      }
      uint64_t v75 = v150;
      unsigned int v74 = DWORD2(v150);
      uint64_t v71 = v132;
      int v72 = v141;
    }
    BOOL v98 = (void)v152 != v75 || DWORD2(v152) != v74;
    if (v67 && v71 && v127)
    {
      uint64_t v95 = v118;
      if ((uint64_t *)v67 == v71 && v133 == v135) {
        goto LABEL_129;
      }
    }
    else
    {
      uint64_t v95 = v118;
      if (!v98)
      {
LABEL_129:
        int v93 = 0;
        int v94 = 0;
        goto LABEL_132;
      }
    }
    int v99 = v124;
    if (v72 == 1) {
      int v99 = 1;
    }
    if (v99 == 1)
    {
      BOOL v127 = v72 != 1;
      --LODWORD(v157[1]);
    }
    else
    {
      BOOL v127 = 0;
    }
    int v94 = 2;
    int v93 = 1;
    goto LABEL_132;
  }
  long long v53 = v153;
  uint64_t v54 = *(unsigned __int8 **)a11;
  uint64_t v147 = v54;
  if (v54)
  {
    llvm::MetadataTracking::track((uint64_t)&v147, v54, 2);
    uint64_t v41 = a11;
  }
  int v148 = *((_DWORD *)v41 + 2);
  uint64_t v55 = sub_1CD3D8B08(a1, a2, v53, *((uint64_t *)&v53 + 1), a5, a9, *((uint64_t *)&a9 + 1), v36, a10, (const llvm::APInt *)&v147);
  if (v147)
  {
    int v56 = *v147;
    if ((v56 - 4) > 0x1E)
    {
      if ((v56 - 3) >= 0xFFFFFFFE) {
        uint64_t v111 = v147;
      }
      else {
        uint64_t v111 = 0;
      }
      if ((v56 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v58 = (unint64_t)(v111 + 8);
LABEL_142:
        v157[0] = &v147;
        sub_1CC5FA668(v58 + 16, v157);
        return v55;
      }
      if (v56 == 3) {
        *((void *)v147 + 1) = 0;
      }
    }
    else if ((v147[1] & 0x7F) == 2 || *((_DWORD *)v147 + 3))
    {
      uint64_t v57 = *((void *)v147 + 2);
      if ((v57 & 4) != 0)
      {
        unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
        if (v58) {
          goto LABEL_142;
        }
      }
    }
  }
  return v55;
}

uint64_t sub_1CB8C2E38(uint64_t a1, uint64_t a2, int a3)
{
  v18[0] = 0;
  v18[1] = 0;
  int v7 = sub_1CD7EBF14(a1, 0, (const llvm::APInt *)v18, (llvm *)5, 0, 1, 0);
  unsigned int v8 = *(_DWORD *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v9 = (uint64_t **)(*(void *)a2 + 16 * v8);
  uint64_t *v9 = v7;
  v9[1] = v6;
  ++*(_DWORD *)(a2 + 8);
  if (v18[0])
  {
    int v10 = *(unsigned __int8 *)v18[0];
    if ((v10 - 4) <= 0x1E)
    {
      if ((*(unsigned char *)(v18[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(v18[0] + 12)) {
        goto LABEL_6;
      }
      uint64_t v17 = *(void *)(v18[0] + 16);
      if ((v17 & 4) == 0) {
        goto LABEL_6;
      }
      unint64_t v16 = v17 & 0xFFFFFFFFFFFFFFF8;
      if (!v16) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
    if ((v10 - 3) >= 0xFFFFFFFE) {
      uint64_t v15 = v18[0];
    }
    else {
      uint64_t v15 = 0;
    }
    if ((v10 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v16 = v15 + 8;
LABEL_13:
      uint64_t v19 = v18;
      sub_1CC5FA668(v16 + 16, &v19);
      goto LABEL_6;
    }
    if (v10 == 3) {
      *(void *)(v18[0] + 8) = 0;
    }
  }
LABEL_6:
  uint64_t result = sub_1CD7EEB94(a1, a3, (llvm *)5, 0);
  unsigned int v13 = *(_DWORD *)(a2 + 8);
  if (v13 >= *(_DWORD *)(a2 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v14 = (uint64_t *)(*(void *)a2 + 16 * v13);
  *int v14 = result;
  v14[1] = v12;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

uint64_t sub_1CB8C2FBC(unsigned __int8 *a1)
{
  int v1 = *a1;
  if ((v1 - 94) >= 0x10)
  {
    uint64_t result = 2;
    switch(v1)
    {
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
        return 3;
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
        return 4;
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 140:
      case 141:
      case 142:
      case 143:
      case 144:
      case 145:
        return 5;
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 146:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
        return 6;
      case 74:
        return 7;
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
      case 157:
        return 9;
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 158:
      case 159:
      case 160:
      case 161:
        return 8;
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
        __break(1u);
        JUMPOUT(0x1CB8C3040);
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 167:
      case 168:
      case 169:
      case 170:
        return 11;
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
        return 10;
      default:
        return result;
    }
  }
  return 10;
}

uint64_t sub_1CB8C32B0(unsigned __int8 *a1)
{
  int v1 = *a1;
  uint64_t result = 2048;
  switch(v1)
  {
    case 16:
    case 27:
    case 38:
    case 49:
    case 65:
    case 76:
    case 86:
    case 95:
    case 111:
    case 121:
    case 128:
    case 135:
    case 141:
    case 147:
    case 153:
    case 159:
    case 163:
    case 168:
      uint64_t result = 2;
      break;
    case 17:
    case 28:
    case 40:
    case 51:
    case 67:
    case 78:
    case 88:
    case 97:
    case 113:
    case 122:
    case 129:
    case 136:
    case 142:
    case 148:
    case 154:
    case 160:
    case 164:
    case 169:
      uint64_t result = 4;
      break;
    case 18:
    case 29:
    case 41:
    case 55:
    case 68:
    case 79:
    case 89:
    case 101:
    case 114:
    case 123:
    case 130:
    case 137:
    case 143:
    case 149:
    case 155:
    case 161:
    case 165:
    case 170:
      uint64_t result = 8;
      break;
    case 19:
    case 30:
    case 42:
    case 56:
    case 69:
    case 80:
    case 90:
    case 102:
    case 115:
    case 124:
    case 131:
    case 138:
    case 144:
    case 150:
    case 156:
    case 166:
      uint64_t result = 16;
      break;
    case 20:
    case 31:
    case 43:
    case 57:
    case 70:
    case 81:
    case 91:
    case 103:
    case 116:
    case 125:
    case 132:
    case 139:
    case 145:
    case 151:
    case 157:
      uint64_t result = 32;
      break;
    case 21:
    case 32:
    case 44:
    case 58:
    case 71:
    case 82:
    case 92:
    case 104:
    case 117:
    case 126:
    case 133:
      uint64_t result = 64;
      break;
    case 22:
    case 33:
    case 45:
    case 59:
    case 72:
    case 83:
    case 93:
    case 105:
    case 118:
      uint64_t result = 128;
      break;
    case 23:
    case 34:
    case 46:
    case 60:
    case 73:
    case 84:
    case 106:
    case 119:
      uint64_t result = 256;
      break;
    case 24:
    case 35:
    case 47:
    case 61:
    case 85:
    case 107:
      uint64_t result = 512;
      break;
    case 25:
    case 36:
    case 62:
    case 108:
      uint64_t result = 1024;
      break;
    case 39:
    case 50:
    case 66:
    case 77:
    case 87:
    case 96:
    case 112:
      uint64_t result = 3;
      break;
    case 52:
    case 98:
      uint64_t result = 5;
      break;
    case 53:
    case 99:
      uint64_t result = 6;
      break;
    case 54:
    case 100:
      uint64_t result = 7;
      break;
    case 63:
    case 109:
      return result;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t *sub_1CB8C35C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v166[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 40);
  unsigned int v8 = *(llvm **)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  int v10 = *(unsigned __int8 **)(a2 + 64);
  long long v161 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v161, v10, 2);
  }
  int v162 = *(_DWORD *)(a2 + 60);
  if ((v8 == 6) != (v8 != 5)) {
    goto LABEL_17;
  }
  int v11 = *(uint64_t ***)(a2 + 32);
  uint64_t v12 = v11[5];
  int v13 = *((unsigned __int16 *)v12 + 12);
  if (v13 != 35 && v13 != 11) {
    goto LABEL_17;
  }
  uint64_t v15 = *v11;
  unint64_t v16 = (unint64_t)v11[1];
  long long v17 = *(_OWORD *)((*v11)[5] + 16 * v16);
  long long v160 = v17;
  if ((v15[3] & 0xFFFE) == 0xC6)
  {
    long long v160 = *(_OWORD *)(*(void *)(*(void *)v15[4] + 40) + 16 * *(unsigned int *)(v15[4] + 8));
    if ((_BYTE)v160) {
      uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v160);
    }
    else {
      uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v160);
    }
    unint64_t v21 = ExtendedSizeInBits;
    if (v19 == 1) {
    if (v21 < 0x11)
    }
    {
LABEL_17:
      unsigned int v22 = 0;
      goto LABEL_18;
    }
    char v20 = v160;
  }
  else
  {
    char v20 = v17;
  }
  BOOL v28 = v8 == 6 && v20 == 5;
  uint64_t v29 = (int8x8_t *)v12[10];
  uint64_t v30 = v29 + 3;
  if (v29[4].i32[0] >= 0x41u) {
    uint64_t v30 = (int8x8_t *)*v30;
  }
  unint64_t v31 = (unint64_t)*v30;
  uint8x8_t v32 = (uint8x8_t)vcnt_s8(*v30);
  v32.i16[0] = vaddlv_u8(v32);
  if (v32.u32[0] != 1)
  {
    long long v165 = *(_OWORD *)*(void *)(a2 + 40);
    uint64_t v33 = *(unsigned __int8 **)(a2 + 64);
    long long v163 = v33;
    if (v33) {
      llvm::MetadataTracking::track((uint64_t)&v163, v33, 2);
    }
    int v164 = *(_DWORD *)(a2 + 60);
    if (!a4)
    {
LABEL_47:
      LODWORD(v37) = 0;
      unsigned int v22 = 0;
      goto LABEL_48;
    }
    uint64_t v34 = 0;
    while (1)
    {
      unint64_t v35 = byte_1CD935E60[v34];
      unint64_t v36 = v31 / v35;
      if (!(v31 % v35)) {
        break;
      }
      if (++v34 == 4) {
        goto LABEL_47;
      }
    }
    LODWORD(v37) = 0;
    v166[0] = byte_1CD935E60[v34];
    v166[1] = v31 / v35;
    BOOL v41 = v36 != 1 && v28;
    unsigned int v22 = 0;
    if (v31 >= v35 && !v41)
    {
      if ((v36 & (v36 - 1)) != 0)
      {
        uint64_t v85 = 0;
        while (v36 != byte_1CD935E60[v85])
        {
          if (++v85 == 4) {
            goto LABEL_47;
          }
        }
      }
      char v42 = 0;
      uint64_t v43 = 0;
      unint64_t v37 = v16;
      unsigned int v22 = v15;
      BOOL v158 = v28;
      while (1)
      {
        unint64_t v44 = v16;
        char v45 = v42;
        unint64_t v46 = v166[v43];
        if (!v46) {
          goto LABEL_71;
        }
        if (v46 != 1) {
          break;
        }
        unint64_t v16 = v44;
        BOOL v28 = v158;
LABEL_91:
        char v42 = 1;
        uint64_t v43 = 1;
        if (v45) {
          goto LABEL_48;
        }
      }
      if ((v46 & (v46 - 1)) != 0)
      {
LABEL_71:
        unint64_t v49 = v46 - 1;
        uint8x8_t v50 = (uint8x8_t)vcnt_s8((int8x8_t)v49);
        v50.i16[0] = vaddlv_u8(v50);
        if (v50.u32[0] != 1) {
          llvm::llvm_unreachable_internal((llvm *)"Invalid multiply factor", 0, 0);
        }
        char v154 = v42;
        if ((_BYTE)v165) {
          uint64_t v51 = sub_1CB87E200((unsigned __int8 *)&v165);
        }
        else {
          uint64_t v51 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v165);
        }
        unint64_t v53 = v51;
        if (v52 == 1) {
        unint64_t v54 = 63 - __clz(v49);
        }
        if (v53 <= v54)
        {
LABEL_112:
          LODWORD(v37) = 0;
          unsigned int v22 = 0;
          unint64_t v16 = v44;
          BOOL v28 = v158;
          goto LABEL_48;
        }
        long long v55 = v165;
        int v56 = sub_1CD7EBF14(a3, v54, (const llvm::APInt *)&v163, (llvm *)5, 0, 0, 0);
        uint64_t v59 = *(void *)(a3 + 832);
        if (v59) {
          LOWORD(v59) = *(_WORD *)(v59 + 8);
        }
        uint64_t v60 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v163, (llvm *)v55, *((uint64_t *)&v55 + 1), (uint64_t)v22, v37, v58, (uint64_t)v56, v57, v59);
        uint64_t v63 = *(void *)(a3 + 832);
        if (v63) {
          LOWORD(v63) = *(_WORD *)(v63 + 8);
        }
        unint64_t v16 = v44;
        unsigned int v22 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v163, (llvm *)v165, *((uint64_t *)&v165 + 1), (uint64_t)v22, v37, v62, (uint64_t)v60, v61, v63);
        unint64_t v37 = v37 & 0xFFFFFFFF00000000 | v64;
      }
      else
      {
        char v154 = v42;
        if ((_BYTE)v165) {
          uint64_t v47 = sub_1CB87E200((unsigned __int8 *)&v165);
        }
        else {
          uint64_t v47 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v165);
        }
        unint64_t v65 = v47;
        if (v48 == 1) {
        unint64_t v66 = 63 - __clz(v46);
        }
        if (v65 <= v66) {
          goto LABEL_112;
        }
        long long v67 = v165;
        unint64_t v68 = sub_1CD7EBF14(a3, v66, (const llvm::APInt *)&v163, (llvm *)5, 0, 0, 0);
        uint64_t v71 = *(void *)(a3 + 832);
        if (v71) {
          LOWORD(v71) = *(_WORD *)(v71 + 8);
        }
        unsigned int v22 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v163, (llvm *)v67, *((uint64_t *)&v67 + 1), (uint64_t)v22, v37, v70, (uint64_t)v68, v69, v71);
        unint64_t v37 = v37 & 0xFFFFFFFF00000000 | v72;
        unint64_t v16 = v44;
      }
      BOOL v28 = v158;
      char v45 = v154;
      goto LABEL_91;
    }
LABEL_48:
    if (v163)
    {
      int v38 = *v163;
      if ((v38 - 4) > 0x1E)
      {
        if ((v38 - 3) >= 0xFFFFFFFE) {
          int v80 = v163;
        }
        else {
          int v80 = 0;
        }
        if ((v38 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v81 = (unint64_t)(v80 + 8);
LABEL_111:
          v166[0] = &v163;
          sub_1CC5FA668(v81 + 16, v166);
          goto LABEL_52;
        }
        if (v38 == 3) {
          *((void *)v163 + 1) = 0;
        }
      }
      else if ((v163[1] & 0x7F) == 2 || *((_DWORD *)v163 + 3))
      {
        uint64_t v150 = *((void *)v163 + 2);
        if ((v150 & 4) != 0)
        {
          unint64_t v81 = v150 & 0xFFFFFFFFFFFFFFF8;
          if (v81) {
            goto LABEL_111;
          }
        }
      }
    }
LABEL_52:
    if (v22 || v37) {
      goto LABEL_18;
    }
    long long v153 = *(_OWORD *)*(void *)(a2 + 40);
    long long v165 = v153;
    uint64_t v39 = *(unsigned __int8 **)(a2 + 64);
    long long v163 = v39;
    if (v39) {
      llvm::MetadataTracking::track((uint64_t)&v163, v39, 2);
    }
    int v164 = *(_DWORD *)(a2 + 60);
    if (v28)
    {
      int v40 = 0;
      unsigned int v22 = 0;
    }
    else
    {
      BOOL v159 = v28;
      uint64_t v73 = v16;
      uint64_t v74 = 0;
      while (1)
      {
        uint64_t v75 = byte_1CD935E68[v74];
        if ((int)v75 >= 0) {
          LOBYTE(v76) = byte_1CD935E68[v74];
        }
        else {
          int v76 = -(int)v75;
        }
        if ((a4 & 1) == 0 && v76 != 1) {
          goto LABEL_128;
        }
        unint64_t v77 = v31 - v75;
        uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)v77);
        v78.i16[0] = vaddlv_u8(v78);
        if (v77 && v78.u32[0] <= 1uLL) {
          break;
        }
        if (++v74 == 10) {
          goto LABEL_128;
        }
      }
      unint64_t v82 = 63 - __clz(v77);
      if ((_BYTE)v153) {
        uint64_t v83 = sub_1CB87E200((unsigned __int8 *)&v165);
      }
      else {
        uint64_t v83 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v165);
      }
      unint64_t v90 = v83;
      if (v84 == 1) {
      if (v90 <= v82)
      }
      {
LABEL_128:
        int v40 = 0;
        unsigned int v22 = 0;
        unint64_t v16 = v73;
        goto LABEL_129;
      }
      uint64_t v124 = *((void *)&v165 + 1);
      long long v156 = (llvm *)v165;
      int v125 = sub_1CD7EBF14(a3, v82, (const llvm::APInt *)&v163, (llvm *)5, 0, 0, 0);
      uint64_t v128 = *(void *)(a3 + 832);
      if (v128) {
        LOWORD(v128) = *(_WORD *)(v128 + 8);
      }
      unint64_t v129 = v73;
      unint64_t v130 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v163, v156, v124, (uint64_t)v15, v73, v127, (uint64_t)v125, v126, v128);
      uint64_t v133 = v132;
      unsigned int v134 = v15;
      if (v76 >= 2u)
      {
        long long v157 = v130;
        long long v143 = v165;
        uint64_t v144 = sub_1CD7EBF14(a3, __clz(v76) ^ 0x1F, (const llvm::APInt *)&v163, (llvm *)5, 0, 0, 0);
        uint64_t v147 = *(void *)(a3 + 832);
        if (v147) {
          LOWORD(v147) = *(_WORD *)(v147 + 8);
        }
        unsigned int v134 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v163, (llvm *)v143, *((uint64_t *)&v143 + 1), (uint64_t)v15, v73, v146, (uint64_t)v144, v145, v147);
        unint64_t v129 = v73 & 0xFFFFFFFF00000000 | v148;
        unint64_t v130 = v157;
      }
      if ((0x155uLL >> v74)) {
        uint64_t v135 = 56;
      }
      else {
        uint64_t v135 = 57;
      }
      uint64_t v136 = *(void *)(a3 + 832);
      if (v136) {
        LOWORD(v136) = *(_WORD *)(v136 + 8);
      }
      unint64_t v16 = v73;
      unsigned int v22 = sub_1CCFDED5C(a3, v135, (const llvm::APInt *)&v163, (llvm *)v165, *((uint64_t *)&v165 + 1), (uint64_t)v130, v133, v131, (uint64_t)v134, v129, v136);
      int v40 = v137;
LABEL_129:
      BOOL v28 = v159;
    }
    if (v163)
    {
      int v91 = *v163;
      if ((v91 - 4) > 0x1E)
      {
        if ((v91 - 3) >= 0xFFFFFFFE) {
          uint64_t v104 = v163;
        }
        else {
          uint64_t v104 = 0;
        }
        if ((v91 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v105 = (unint64_t)(v104 + 8);
LABEL_170:
          v166[0] = &v163;
          sub_1CC5FA668(v105 + 16, v166);
          goto LABEL_134;
        }
        if (v91 == 3) {
          *((void *)v163 + 1) = 0;
        }
      }
      else if ((v163[1] & 0x7F) == 2 || *((_DWORD *)v163 + 3))
      {
        uint64_t v151 = *((void *)v163 + 2);
        if ((v151 & 4) != 0)
        {
          unint64_t v105 = v151 & 0xFFFFFFFFFFFFFFF8;
          if (v105) {
            goto LABEL_170;
          }
        }
      }
    }
LABEL_134:
    if (v22 || v40) {
      goto LABEL_18;
    }
    uint64_t v92 = *(void *)(a2 + 40);
    uint64_t v93 = *(void *)(v92 + 8);
    uint64_t v155 = *(llvm **)v92;
    int v94 = *(unsigned __int8 **)(a2 + 64);
    *(void *)&long long v165 = v94;
    if (v94) {
      llvm::MetadataTracking::track((uint64_t)&v165, v94, 2);
    }
    unsigned int v22 = 0;
    int v95 = 0;
    DWORD2(v165) = *(_DWORD *)(a2 + 60);
    if (v31 <= 0x21 && !v28 && a4)
    {
      unint64_t v96 = 0;
      int v97 = 0;
      do
      {
        uint64_t v98 = 0;
        while (1)
        {
          int v99 = byte_1CD935E64[v98];
          uint64_t v100 = (v99 + byte_1CD935E68[v96]);
          if ((int)v100 >= 1 && v31 == v100) {
            break;
          }
          if (++v98 == 4)
          {
            int v99 = 0;
            goto LABEL_150;
          }
        }
        int v97 = byte_1CD935E68[v96];
LABEL_150:
        if (v96 > 8) {
          break;
        }
        ++v96;
      }
      while (!v99);
      if (v99)
      {
        uint64_t v108 = sub_1CD7EBF14(a3, 63 - __clz(v99 - 1), (const llvm::APInt *)&v165, (llvm *)5, 0, 0, 0);
        uint64_t v111 = *(void *)(a3 + 832);
        if (v111) {
          LOWORD(v111) = *(_WORD *)(v111 + 8);
        }
        uint64_t v112 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v165, v155, v93, (uint64_t)v15, v16, v110, (uint64_t)v108, v109, v111);
        uint64_t v115 = *(void *)(a3 + 832);
        if (v115) {
          LOWORD(v115) = *(_WORD *)(v115 + 8);
        }
        BOOL v117 = sub_1CCFDED5C(a3, 56, (const llvm::APInt *)&v165, v155, v93, (uint64_t)v15, v16, v114, (uint64_t)v112, v113, v115);
        uint64_t v119 = v118;
        if (v97 >= 0) {
          unsigned int v120 = v97;
        }
        else {
          unsigned int v120 = -v97;
        }
        if (v120 >= 2)
        {
          uint32x4_t v138 = sub_1CD7EBF14(a3, __clz(v120) ^ 0x1F, (const llvm::APInt *)&v165, (llvm *)5, 0, 0, 0);
          uint64_t v141 = *(void *)(a3 + 832);
          if (v141) {
            LOWORD(v141) = *(_WORD *)(v141 + 8);
          }
          uint64_t v15 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v165, v155, v93, (uint64_t)v15, v16, v140, (uint64_t)v138, v139, v141);
          unint64_t v16 = v16 & 0xFFFFFFFF00000000 | v142;
        }
        if (v97 > 0) {
          uint64_t v121 = 56;
        }
        else {
          uint64_t v121 = 57;
        }
        uint64_t v122 = *(void *)(a3 + 832);
        if (v122) {
          LOWORD(v122) = *(_WORD *)(v122 + 8);
        }
        unsigned int v22 = sub_1CCFDED5C(a3, v121, (const llvm::APInt *)&v165, v155, v93, (uint64_t)v117, v119, v116, (uint64_t)v15, v16, v122);
        int v95 = v123;
      }
      else
      {
        int v95 = 0;
        unsigned int v22 = 0;
      }
    }
    if (!(void)v165) {
      goto LABEL_158;
    }
    int v102 = *(unsigned __int8 *)v165;
    if ((v102 - 4) > 0x1E)
    {
      if ((v102 - 3) >= 0xFFFFFFFE) {
        uint64_t v106 = v165;
      }
      else {
        uint64_t v106 = 0;
      }
      if ((v102 - 3) < 0xFFFFFFFE)
      {
        if (v102 == 3) {
          *(void *)(v165 + 8) = 0;
        }
        goto LABEL_158;
      }
      unint64_t v107 = v106 + 8;
    }
    else if ((*(unsigned char *)(v165 + 1) & 0x7F) != 2 && !*(_DWORD *)(v165 + 12) {
           || (uint64_t v152 = *(void *)(v165 + 16), (v152 & 4) == 0)
    }
           || (unint64_t v107 = v152 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
LABEL_158:
      if (v22) {
        BOOL v103 = 0;
      }
      else {
        BOOL v103 = v95 == 0;
      }
      if (v103) {
        unsigned int v22 = 0;
      }
      goto LABEL_18;
    }
    long long v163 = (unsigned __int8 *)&v165;
    sub_1CC5FA668(v107 + 16, &v163);
    goto LABEL_158;
  }
  uint64_t v86 = sub_1CD7EBF14(a3, 63 - __clz(v31), (const llvm::APInt *)&v161, (llvm *)5, 0, 0, 0);
  uint64_t v89 = *(void *)(a3 + 832);
  if (v89) {
    LOWORD(v89) = *(_WORD *)(v89 + 8);
  }
  unsigned int v22 = sub_1CCFDED5C(a3, 175, (const llvm::APInt *)&v161, v8, v9, (uint64_t)v15, v16, v88, (uint64_t)v86, v87, v89);
LABEL_18:
  if (v161)
  {
    int v23 = *v161;
    if ((v23 - 4) > 0x1E)
    {
      if ((v23 - 3) >= 0xFFFFFFFE) {
        uint64_t v25 = v161;
      }
      else {
        uint64_t v25 = 0;
      }
      if ((v23 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v26 = (unint64_t)(v25 + 8);
LABEL_28:
        *(void *)&long long v165 = &v161;
        sub_1CC5FA668(v26 + 16, &v165);
        return v22;
      }
      if (v23 == 3) {
        *((void *)v161 + 1) = 0;
      }
    }
    else if ((v161[1] & 0x7F) == 2 || *((_DWORD *)v161 + 3))
    {
      uint64_t v149 = *((void *)v161 + 2);
      if ((v149 & 4) != 0)
      {
        unint64_t v26 = v149 & 0xFFFFFFFFFFFFFFF8;
        if (v26) {
          goto LABEL_28;
        }
      }
    }
  }
  return v22;
}

uint64_t *sub_1CB8C42A4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 a5)
{
  v37[8] = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int8 **)(a1 + 64);
  uint8x8_t v32 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v32, v10, 2);
  }
  int v33 = *(_DWORD *)(a1 + 60);
  unint64_t v35 = v37;
  uint64_t v36 = 0x400000000;
  if (a4)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = sub_1CD7EBF14(a3, v11, (const llvm::APInt *)&v32, (llvm *)5, 0, 0, 0);
      uint64_t v15 = *(void *)(a3 + 832);
      if (v15) {
        LOWORD(v15) = *(_WORD *)(v15 + 8);
      }
      long long v17 = sub_1CCFDED5C(a3, 148, (const llvm::APInt *)&v32, (llvm *)a5, 0, a1, a2, v14, (uint64_t)v12, v13, v15);
      if (v36 >= (unint64_t)HIDWORD(v36)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned __int8 v18 = (uint64_t **)((char *)v35 + 16 * v36);
      *unsigned __int8 v18 = v17;
      v18[1] = v16;
      LODWORD(v36) = v36 + 1;
      ++v11;
    }
    while (a4 != v11);
    uint64_t v19 = v35;
  }
  else
  {
    uint64_t v19 = v37;
  }
  uint64_t v30 = v32;
  if (v32) {
    llvm::MetadataTracking::track((uint64_t)&v30, v32, 2);
  }
  int v31 = v33;
  char v20 = sub_1CD3F7F0C(v19, a4, a5, a3, (const llvm::APInt *)&v30);
  if (v30)
  {
    int v21 = *v30;
    if ((v21 - 4) > 0x1E)
    {
      if ((v21 - 3) >= 0xFFFFFFFE) {
        uint64_t v24 = v30;
      }
      else {
        uint64_t v24 = 0;
      }
      if ((v21 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v25 = (unint64_t)(v24 + 8);
LABEL_30:
        uint64_t v34 = &v30;
        sub_1CC5FA668(v25 + 16, &v34);
        goto LABEL_18;
      }
      if (v21 == 3) {
        *((void *)v30 + 1) = 0;
      }
    }
    else if ((v30[1] & 0x7F) == 2 || *((_DWORD *)v30 + 3))
    {
      uint64_t v28 = *((void *)v30 + 2);
      if ((v28 & 4) != 0)
      {
        unint64_t v25 = v28 & 0xFFFFFFFFFFFFFFF8;
        if (v25) {
          goto LABEL_30;
        }
      }
    }
  }
LABEL_18:
  if (v35 != v37) {
    free(v35);
  }
  if (v32)
  {
    int v22 = *v32;
    if ((v22 - 4) > 0x1E)
    {
      if ((v22 - 3) >= 0xFFFFFFFE) {
        unint64_t v26 = v32;
      }
      else {
        unint64_t v26 = 0;
      }
      if ((v22 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v27 = (unint64_t)(v26 + 8);
LABEL_36:
        unint64_t v35 = &v32;
        sub_1CC5FA668(v27 + 16, &v35);
        return v20;
      }
      if (v22 == 3) {
        *((void *)v32 + 1) = 0;
      }
    }
    else if ((v32[1] & 0x7F) == 2 || *((_DWORD *)v32 + 3))
    {
      uint64_t v29 = *((void *)v32 + 2);
      if ((v29 & 4) != 0)
      {
        unint64_t v27 = v29 & 0xFFFFFFFFFFFFFFF8;
        if (v27) {
          goto LABEL_36;
        }
      }
    }
  }
  return v20;
}

uint64_t sub_1CB8C4588(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 400))(a2, *(void *)(a1 + 80));
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 336))(a2);
  return *(_DWORD *)(a1 + 88) + (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, v6) * v4;
}

uint64_t sub_1CB8C465C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int a6, uint64_t a7, void *a8, uint64_t a9, void *a10, unsigned int a11, uint64_t *a12, char a13)
{
  char v20 = (uint64_t *)a9;
  uint64_t v282 = *MEMORY[0x1E4F143B8];
  int v21 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v270 = v21;
  if (v21) {
    llvm::MetadataTracking::track((uint64_t)&v270, v21, 2);
  }
  int v271 = *(_DWORD *)(a2 + 60);
  uint64_t v22 = *(void *)(a7 + 40) + 16 * a8;
  uint64_t v24 = *(llvm **)v22;
  uint64_t v23 = *(void *)(v22 + 8);
  int v25 = *(void *)v22;
  if (v25 != 4 || *(unsigned char *)(*(void *)(a3 + 40) + 16 * a4) != 5) {
    goto LABEL_51;
  }
  int v26 = *(unsigned __int16 *)(a5 + 24);
  if (v26 == 35 || v26 == 11) {
    uint64_t v27 = a5;
  }
  else {
    uint64_t v27 = 0;
  }
  int v28 = *(unsigned __int16 *)(a7 + 24);
  if (v28 == 35 || v28 == 11) {
    uint64_t v29 = a7;
  }
  else {
    uint64_t v29 = 0;
  }
  int v30 = *(unsigned __int16 *)(a9 + 24);
  if (v30 == 35 || v30 == 11) {
    uint64_t v32 = a9;
  }
  else {
    uint64_t v32 = 0;
  }
  if (v28 == 201)
  {
    uint64_t v33 = *(void *)(a7 + 32);
    if (*(void *)v33 == a3 && *(_DWORD *)(v33 + 8) == a4) {
      goto LABEL_43;
    }
    if (*(void *)v33 == a5 && *(_DWORD *)(v33 + 8) == a6) {
      goto LABEL_43;
    }
  }
  if (!v29 || !v27) {
    goto LABEL_51;
  }
  uint64_t v34 = *(void *)(v29 + 80);
  unint64_t v35 = (uint64_t *)(v34 + 24);
  uint64_t v36 = *(unsigned int *)(v34 + 32);
  unint64_t v37 = v35;
  if (v36 >= 0x41) {
    unint64_t v37 = (uint64_t *)*v35;
  }
  uint64_t v38 = *v37;
  uint64_t v39 = *(void *)(v27 + 80);
  int v40 = (void *)(v39 + 24);
  if (*(_DWORD *)(v39 + 32) >= 0x41u) {
    int v40 = (void *)*v40;
  }
  if (v38 != *v40) {
    goto LABEL_51;
  }
  if (v36 > 0x40)
  {
    int v41 = 0;
    int64_t v42 = (unint64_t)(v36 + 63) >> 6;
    do
    {
      BOOL v43 = v42-- < 1;
      if (v43) {
        break;
      }
      unint64_t v44 = *(void *)(*v35 + 8 * v42);
      v41 += __clz(v44);
    }
    while (!v44);
    int v45 = v36 | 0xFFFFFFC0;
    if ((v36 & 0x3F) == 0) {
      int v45 = 0;
    }
    if (v41 + v45 == v36) {
      goto LABEL_51;
    }
  }
  else if (!*v35)
  {
    goto LABEL_51;
  }
  if (!v32)
  {
LABEL_43:
    uint64_t v48 = (llvm::APFloatBase *)a12[2];
    uint64_t v49 = *((void *)v48 + 104);
    int v263 = a4;
    if (v49) {
      __int16 v50 = *(_WORD *)(v49 + 8);
    }
    else {
      __int16 v50 = 0;
    }
    uint64_t v151 = a5;
    uint64_t v261 = a1;
    uint64_t v152 = sub_1CD7F3564(v48, (const char *)0xC8, (uint64_t)&v270, (llvm *)5, 0, a7, a8, v50);
    unsigned int v154 = v153;
    __int16 v155 = 0;
    long long v156 = (llvm::APFloatBase *)a12[2];
    uint64_t v157 = *((void *)v156 + 104);
    if (v157) {
      __int16 v155 = *(_WORD *)(v157 + 8);
    }
    BOOL v158 = sub_1CD7F3564(v156, (const char *)0xC8, (uint64_t)&v270, (llvm *)5, 0, a9, a10, v155);
    if (a13) {
      uint64_t v160 = (uint64_t)v152;
    }
    else {
      uint64_t v160 = (uint64_t)v158;
    }
    if (a13) {
      int v161 = v154;
    }
    else {
      int v161 = v159;
    }
    if (a13) {
      uint64_t v162 = (uint64_t)v158;
    }
    else {
      uint64_t v162 = (uint64_t)v152;
    }
    if (a13) {
      unsigned int v163 = v159;
    }
    else {
      unsigned int v163 = v154;
    }
    int v164 = (void *)a12[2];
    uint64_t v165 = *(void *)(v162 + 40) + 16 * v163;
    long long v166 = *(llvm **)v165;
    uint64_t v167 = *(void *)(v165 + 8);
    uint64_t v168 = sub_1CD7EE368(v164, a11);
    uint64_t v172 = sub_1CD7F6564(v164, (const char *)0xC0, (const llvm::APInt *)&v270, v166, v167, a3, v263, v170, v151, a6, v162, v163, v160, v161, v168, v169);
    uint64_t v173 = (llvm::APFloatBase *)a12[2];
    uint64_t v174 = *((void *)v173 + 104);
    if (v174) {
      __int16 v175 = *(_WORD *)(v174 + 8);
    }
    else {
      __int16 v175 = 0;
    }
    *(void *)uint64_t v261 = sub_1CD7F3564(v173, (const char *)0xC9, (uint64_t)&v270, (llvm *)4, 0, (uint64_t)v172, v171, v175);
    *(_DWORD *)(v261 + 8) = v176;
    goto LABEL_301;
  }
  uint64_t v46 = *(void *)(v32 + 80);
  uint64_t v47 = *(unsigned int *)(v46 + 32);
  if (v47 > 0x40)
  {
    int v51 = 0;
    int64_t v52 = (unint64_t)(v47 + 63) >> 6;
    do
    {
      BOOL v43 = v52-- < 1;
      if (v43) {
        break;
      }
      unint64_t v53 = *(void *)(*(void *)(v46 + 24) + 8 * v52);
      v51 += __clz(v53);
    }
    while (!v53);
    int v54 = v47 | 0xFFFFFFC0;
    if ((v47 & 0x3F) == 0) {
      int v54 = 0;
    }
    if (v51 + v54 == v47) {
      goto LABEL_51;
    }
    goto LABEL_43;
  }
  if (*(void *)(v46 + 24)) {
    goto LABEL_43;
  }
LABEL_51:
  uint64_t v267 = a5;
  int v55 = *(unsigned __int16 *)(a9 + 24);
  if (v55 == 35 || v55 == 11) {
    uint64_t v57 = a9;
  }
  else {
    uint64_t v57 = 0;
  }
  int v58 = *(unsigned __int16 *)(a7 + 24);
  if ((v58 & 0xFFFE) == 0xC6)
  {
    uint64_t v59 = *(void *)(a7 + 48);
    if (v59)
    {
      int v60 = 1;
      do
      {
        if (*(_DWORD *)(v59 + 8) == a8)
        {
          if (!v60) {
            goto LABEL_74;
          }
          --v60;
        }
        uint64_t v59 = *(void *)(v59 + 32);
      }
      while (v59);
      if (!v60)
      {
        if (v57)
        {
          if (v25 == 5)
          {
            uint64_t v61 = *(uint64_t **)(a7 + 32);
            uint64_t v62 = *v61;
            if (*(unsigned char *)(*(void *)(*v61 + 40) + 16 * *((unsigned int *)v61 + 2)) == 4)
            {
              if (v58 == 198)
              {
                uint64_t v116 = *(void *)(v57 + 80);
                unsigned int v117 = *(_DWORD *)(v116 + 32);
                if (v117 > 0x40) {
                  uint64_t v118 = **(void **)(v116 + 24);
                }
                else {
                  uint64_t v118 = (uint64_t)(*(void *)(v116 + 24) << -(char)v117) >> -(char)v117;
                }
                if (v118 < 0x8000 && v118 >= -32768)
                {
LABEL_268:
                  uint64_t v196 = v61[1];
                  uint64_t v197 = (llvm::APFloatBase *)a12[2];
                  uint64_t v198 = *((void *)v197 + 104);
                  uint64_t v262 = a1;
                  uint64_t v265 = a3;
                  if (v198) {
                    __int16 v199 = *(_WORD *)(v198 + 8);
                  }
                  else {
                    __int16 v199 = 0;
                  }
                  int v221 = sub_1CD7F3564(v197, (const char *)0xC9, (uint64_t)&v270, (llvm *)4, 0, a9, a10, v199);
                  if (a13) {
                    uint64_t v223 = v62;
                  }
                  else {
                    uint64_t v223 = (uint64_t)v221;
                  }
                  if (a13) {
                    int v224 = v196;
                  }
                  else {
                    int v224 = v222;
                  }
                  if (a13) {
                    uint64_t v225 = (uint64_t)v221;
                  }
                  else {
                    uint64_t v225 = v62;
                  }
                  if (a13) {
                    unsigned int v226 = v222;
                  }
                  else {
                    unsigned int v226 = v196;
                  }
                  uint64_t v227 = (void *)a12[2];
                  uint64_t v228 = *(void *)(v225 + 40) + 16 * v226;
                  int v229 = *(llvm **)v228;
                  uint64_t v230 = *(void *)(v228 + 8);
                  uint64_t v231 = sub_1CD7EE368(v227, a11);
                  uint64_t v235 = sub_1CD7F6564(v227, (const char *)0xC0, (const llvm::APInt *)&v270, v229, v230, v265, a4, v233, v267, a6, v225, v226, v223, v224, v231, v232);
                  v236 = (llvm::APFloatBase *)a12[2];
                  uint64_t v237 = *((void *)v236 + 104);
                  if (v237) {
                    __int16 v238 = *(_WORD *)(v237 + 8);
                  }
                  else {
                    __int16 v238 = 0;
                  }
                  *(void *)uint64_t v262 = sub_1CD7F3564(v236, (const char *)*(unsigned __int16 *)(a7 + 24), (uint64_t)&v270, (llvm *)5, 0, (uint64_t)v235, v234, v238);
                  *(_DWORD *)(v262 + 8) = v239;
                  sub_1CCEF0788(*a12, (uint64_t)v235);
LABEL_301:
                  uint64_t v126 = 1;
                  goto LABEL_255;
                }
              }
              else
              {
                if (v58 != 199) {
                  goto LABEL_268;
                }
                uint64_t v63 = *(void *)(v57 + 80);
                unsigned int v64 = (void *)(v63 + 24);
                if (*(_DWORD *)(v63 + 32) >= 0x41u) {
                  unsigned int v64 = (void *)*v64;
                }
                if (!(*v64 >> 16)) {
                  goto LABEL_268;
                }
              }
LABEL_195:
              uint64_t v126 = 0;
              goto LABEL_255;
            }
          }
        }
      }
    }
  }
LABEL_74:
  if (v55 != 36 && v55 != 12) {
    goto LABEL_195;
  }
  uint64_t v259 = v23;
  uint64_t v260 = a1;
  uint64_t v65 = *(void *)(a9 + 80);
  uint64_t v66 = *(void *)(v65 + 32);
  if ((_UNKNOWN *)v66 == &unk_1CFB2E344)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v278, (const llvm::detail::DoubleAPFloat *)(v65 + 32));
  }
  else
  {
    uint64_t v278 = *(void *)(v65 + 32);
    if ((*(_DWORD *)(v66 + 8) + 64) >= 0x80) {
      operator new[]();
    }
    char v67 = *(unsigned char *)(v65 + 52);
    int v68 = v67 & 7;
    char v281 = v281 & 0xF0 | v67 & 0xF;
    int v280 = *(_DWORD *)(v65 + 48);
    BOOL v70 = (v67 & 6) != 0 && v68 != 3;
    if (v68 == 1 || v70)
    {
      uint64_t v72 = *(unsigned int *)(v278 + 8);
      if ((v72 - 64) <= 0xFFFFFF7F) {
        uint64_t v73 = (uint64_t **)v279;
      }
      else {
        uint64_t v73 = &v279;
      }
      int v76 = *(uint64_t ***)(v65 + 40);
      uint64_t v75 = (uint64_t **)(v65 + 40);
      uint64_t v74 = v76;
      if ((*((_DWORD *)*(v75 - 1) + 2) - 64) >= 0xFFFFFF80) {
        uint64_t v74 = v75;
      }
      if (v72 <= 0xFFFFFFBF)
      {
        unint64_t v77 = (unint64_t)(v72 + 64) >> 6;
        do
        {
          uint8x8_t v78 = *v74++;
          *v73++ = v78;
          --v77;
        }
        while (v77);
      }
    }
  }
  uint64_t v264 = a3;
  uint64_t v79 = *(void *)(a7 + 48);
  if (v79)
  {
    int v80 = 1;
    uint64_t v81 = *(void *)(a7 + 48);
    do
    {
      if (*(_DWORD *)(v81 + 8) == a8)
      {
        if (!v80) {
          goto LABEL_125;
        }
        --v80;
      }
      uint64_t v81 = *(void *)(v81 + 32);
    }
    while (v81);
    if (!v80 && *(_WORD *)(a7 + 24) == 215)
    {
      if ((_UNKNOWN *)v278 == &unk_1CFB2E344)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat(&v273, (const llvm::detail::DoubleAPFloat *)&v278);
        int v82 = a4;
      }
      else
      {
        uint64_t v273 = v278;
        int v82 = a4;
        if ((*(_DWORD *)(v278 + 8) + 64) >= 0x80) {
          operator new[]();
        }
        int v83 = v281 & 7;
        char v276 = v276 & 0xF0 | v281 & 0xF;
        int v275 = v280;
        BOOL v85 = (v281 & 6) != 0 && v83 != 3;
        if (v83 == 1 || v85)
        {
          uint64_t v86 = *(unsigned int *)(v273 + 8);
          uint64_t v87 = (v86 - 64) <= 0xFFFFFF7F ? v274 : (uint64_t *)&v274;
          uint64_t v88 = (*(_DWORD *)(v278 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v279 : v279;
          if (v86 <= 0xFFFFFFBF)
          {
            unint64_t v89 = (unint64_t)(v86 + 64) >> 6;
            do
            {
              uint64_t v90 = *v88++;
              *v87++ = v90;
              --v89;
            }
            while (v89);
          }
        }
      }
      char v269 = 0;
      llvm::APFloat::convert((uint64_t)v272, &unk_1CFB2E2E0, 1, &v269);
      if (!v269)
      {
        unint64_t v200 = sub_1CD7ECA8C(a12[2], (llvm::LLVMContext *)v272, (const llvm::APFloat *)&v270, (llvm *)9, 0, 0);
        unint64_t v202 = *(uint64_t **)(a7 + 32);
        uint64_t v204 = *v202;
        uint64_t v203 = v202[1];
        if (a13) {
          uint64_t v205 = v204;
        }
        else {
          uint64_t v205 = (uint64_t)v200;
        }
        if (a13) {
          int v206 = v203;
        }
        else {
          int v206 = v201;
        }
        if (a13) {
          uint64_t v207 = (uint64_t)v200;
        }
        else {
          uint64_t v207 = v204;
        }
        if (a13) {
          unsigned int v208 = v201;
        }
        else {
          unsigned int v208 = v203;
        }
        uint64_t v209 = (void *)a12[2];
        uint64_t v210 = *(void *)(v207 + 40) + 16 * v208;
        uint64_t v211 = *(llvm **)v210;
        uint64_t v212 = *(void *)(v210 + 8);
        uint64_t v213 = sub_1CD7EE368(v209, a11);
        int v217 = sub_1CD7F6564(v209, (const char *)0xC0, (const llvm::APInt *)&v270, v211, v212, v264, v82, v215, v267, a6, v207, v208, v205, v206, v213, v214);
        long long v218 = (llvm::APFloatBase *)a12[2];
        uint64_t v219 = *((void *)v218 + 104);
        if (v219) {
          __int16 v220 = *(_WORD *)(v219 + 8);
        }
        else {
          __int16 v220 = 0;
        }
        *(void *)uint64_t v260 = sub_1CD7F3564(v218, (const char *)0xD7, (uint64_t)&v270, (llvm *)0xA, 0, (uint64_t)v217, v216, v220);
        *(_DWORD *)(v260 + 8) = v240;
        sub_1CCEF0788(*a12, (uint64_t)v217);
        if ((_UNKNOWN *)v273 != &unk_1CFB2E344)
        {
          if ((*(_DWORD *)(v273 + 8) - 64) > 0xFFFFFF7F || !v274) {
            goto LABEL_305;
          }
LABEL_339:
          MEMORY[0x1D25D9CB0](v274, 0x1000C8000313F17);
LABEL_305:
          uint64_t v126 = 1;
          goto LABEL_253;
        }
LABEL_340:
        sub_1CB845718((uint64_t *)&v274);
        goto LABEL_305;
      }
      if ((_UNKNOWN *)v273 == &unk_1CFB2E344)
      {
        sub_1CB845718((uint64_t *)&v274);
      }
      else if ((*(_DWORD *)(v273 + 8) - 64) <= 0xFFFFFF7F && v274)
      {
        MEMORY[0x1D25D9CB0](v274, 0x1000C8000313F17);
      }
      uint64_t v79 = *(void *)(a7 + 48);
    }
LABEL_125:
    if (v79)
    {
      int v91 = 1;
      do
      {
        if (*(_DWORD *)(v79 + 8) == a8)
        {
          if (!v91) {
            goto LABEL_132;
          }
          --v91;
        }
        uint64_t v79 = *(void *)(v79 + 32);
      }
      while (v79);
      if (!v91)
      {
        int v92 = *(unsigned __int16 *)(a7 + 24);
        if (v92 != 212) {
          goto LABEL_133;
        }
        uint64_t v100 = *(uint64_t **)(a7 + 32);
        uint64_t v101 = *v100;
        uint64_t v102 = v100[1];
        if (!sub_1CB8C57D0(*v100, v102, 1, 0))
        {
          if (sub_1CB8C59E4(a2))
          {
            BOOL v103 = v101 == v264 && v102 == a4;
            if (v103 || v101 == v267 && v102 == a6) {
              goto LABEL_159;
            }
            uint64_t v104 = (uint64_t *)&v277;
            if ((_UNKNOWN *)v278 == &unk_1CFB2E344) {
              uint64_t v104 = v279;
            }
            if ((*((unsigned char *)v104 + 28) & 0xF) == 3)
            {
LABEL_159:
              if ((_UNKNOWN *)v278 == &unk_1CFB2E344)
              {
                llvm::detail::DoubleAPFloat::DoubleAPFloat(&v273, (const llvm::detail::DoubleAPFloat *)&v278);
                uint64_t v110 = a1;
                int v105 = a4;
                uint64_t v106 = v264;
              }
              else
              {
                uint64_t v273 = v278;
                int v105 = a4;
                uint64_t v106 = v264;
                if ((*(_DWORD *)(v278 + 8) + 64) >= 0x80) {
                  operator new[]();
                }
                int v107 = v281 & 7;
                char v276 = v276 & 0xF0 | v281 & 0xF;
                int v275 = v280;
                BOOL v109 = (v281 & 6) != 0 && v107 != 3;
                uint64_t v110 = v260;
                if (v107 == 1 || v109)
                {
                  uint64_t v111 = *(unsigned int *)(v273 + 8);
                  uint64_t v112 = (v111 - 64) <= 0xFFFFFF7F ? v274 : (uint64_t *)&v274;
                  uint64_t v113 = (*(_DWORD *)(v278 + 8) - 64) >= 0xFFFFFF80 ? (uint64_t *)&v279 : v279;
                  if (v111 <= 0xFFFFFFBF)
                  {
                    unint64_t v114 = (unint64_t)(v111 + 64) >> 6;
                    do
                    {
                      uint64_t v115 = *v113++;
                      *v112++ = v115;
                      --v114;
                    }
                    while (v114);
                  }
                }
              }
              char v269 = 0;
              llvm::APFloat::convert((uint64_t)v272, &unk_1CFB2E308, 1, &v269);
              if (v269)
              {
                if ((_UNKNOWN *)v273 == &unk_1CFB2E344)
                {
                  sub_1CB845718((uint64_t *)&v274);
                }
                else if ((*(_DWORD *)(v273 + 8) - 64) <= 0xFFFFFF7F && v274)
                {
                  MEMORY[0x1D25D9CB0](v274, 0x1000C8000313F17);
                }
                goto LABEL_132;
              }
              unsigned int v241 = sub_1CD7ECA8C(a12[2], (llvm::LLVMContext *)v272, (const llvm::APFloat *)&v270, (llvm *)0xA, 0, 0);
              uint64_t v243 = *(uint64_t **)(a7 + 32);
              uint64_t v245 = *v243;
              uint64_t v244 = v243[1];
              unint64_t v246 = v242 & 0xFFFFFFFF00000000 | v244;
              if (a13) {
                uint64_t v247 = (uint64_t)v241;
              }
              else {
                uint64_t v247 = v245;
              }
              if (a13)
              {
                unsigned int v248 = v242;
              }
              else
              {
                unint64_t v246 = v242;
                uint64_t v245 = (uint64_t)v241;
                unsigned int v248 = v244;
              }
              uint64_t v251 = sub_1CD3D6058((void *)a12[2], (const llvm::APInt *)&v270, v106, v105, v267, a6, v247, v248, v245, v246, SHIDWORD(v246), a11);
              uint64_t v252 = a12[2];
              uint64_t v253 = *(void *)(a7 + 32);
              uint64_t v254 = *(void *)(v253 + 40);
              uint64_t v255 = *(void *)(v253 + 48);
              uint64_t v256 = *(void *)(v252 + 832);
              if (v256) {
                LOWORD(v256) = *(_WORD *)(v256 + 8);
              }
              *(void *)uint64_t v110 = sub_1CCFDED5C(v252, 212, (const llvm::APInt *)&v270, (llvm *)9, 0, (uint64_t)v251, v249, v250, v254, v255, v256);
              *(_DWORD *)(v110 + 8) = v257;
              sub_1CCEF0788(*a12, (uint64_t)v251);
              if ((_UNKNOWN *)v273 != &unk_1CFB2E344)
              {
                if ((*(_DWORD *)(v273 + 8) - 64) > 0xFFFFFF7F || !v274) {
                  goto LABEL_305;
                }
                goto LABEL_339;
              }
              goto LABEL_340;
            }
          }
        }
      }
    }
  }
LABEL_132:
  int v92 = *(unsigned __int16 *)(a7 + 24);
LABEL_133:
  if ((v92 & 0xFFFE) != 0xDE || !sub_1CB8C5A98(a2)) {
    goto LABEL_198;
  }
  uint64_t v93 = *(uint64_t **)(a7 + 32);
  uint64_t v95 = *v93;
  uint64_t v94 = v93[1];
  uint64_t v96 = *(void *)(*v93 + 48);
  if (!v96) {
    goto LABEL_142;
  }
  int v97 = 1;
  do
  {
    if (*(_DWORD *)(v96 + 8) == v94)
    {
      if (!v97) {
        goto LABEL_142;
      }
      --v97;
    }
    uint64_t v96 = *(void *)(v96 + 32);
  }
  while (v96);
  if (v97)
  {
LABEL_142:
    if (v92 != 222) {
      goto LABEL_143;
    }
LABEL_190:
    int v123 = (llvm::APFloatBase *)a12[2];
    uint64_t v124 = *((void *)v123 + 104);
    if (v124) {
      __int16 v125 = *(_WORD *)(v124 + 8);
    }
    else {
      __int16 v125 = 0;
    }
    char v20 = sub_1CD7F3564(v123, (const char *)0xDE, (uint64_t)&v270, v24, v259, a9, a10, v125);
    int v99 = v177;
    goto LABEL_246;
  }
  int v119 = *(unsigned __int16 *)(v95 + 24);
  if (v92 == 222)
  {
    unsigned int v120 = v119 - 96;
    BOOL v43 = v120 > 0x2D;
    uint64_t v121 = (1 << v120) & 0x200000000005;
    if (v43 || v121 == 0) {
      goto LABEL_190;
    }
LABEL_198:
    uint64_t v127 = a12[2];
    if (*(_WORD *)(*(void *)v127 + 1020))
    {
      uint64_t v128 = (uint64_t *)&v277;
      if ((_UNKNOWN *)v278 == &unk_1CFB2E344) {
        uint64_t v128 = v279;
      }
      if ((*((unsigned char *)v128 + 28) & 0xF) == 0xB)
      {
        uint64_t v129 = *(void *)(a2 + 48);
        if (v129)
        {
          while (1)
          {
            uint64_t v130 = *(void *)(v129 + 16);
            int v131 = *(unsigned __int16 *)(v130 + 24);
            if ((sub_1CB8C5B2C(v131) & 1) == 0)
            {
              if (v131 != 46) {
                break;
              }
              uint64_t v132 = *(void *)(**(void **)(v130 + 32) + 80);
              uint64_t v133 = *(_DWORD *)(v132 + 32) > 0x40u ? **(void **)(v132 + 24) : *(void *)(v132 + 24);
              if (v133 != 1830 && v133 != 1851) {
                break;
              }
            }
            uint64_t v129 = *(void *)(v129 + 32);
            if (!v129) {
              goto LABEL_211;
            }
          }
          uint64_t v126 = 0;
          goto LABEL_253;
        }
LABEL_211:
        unsigned int v134 = sub_1CD7ECDC4(v127, (uint64_t)&v270, (BOOL)v24, v259, 0, 0.0);
        uint64_t v136 = v135;
        if (a13) {
          uint64_t v137 = (uint64_t)v134;
        }
        else {
          uint64_t v137 = a7;
        }
        if (a13)
        {
          int v138 = v135;
        }
        else
        {
          uint64_t v136 = a8;
          int v138 = (int)a8;
        }
        if (a13) {
          int v139 = (int)a8;
        }
        else {
          int v139 = v135;
        }
        if (!a13) {
          a7 = (uint64_t)v134;
        }
        uint64_t v140 = (void *)a12[2];
        uint64_t v141 = *(void *)(v137 + 40) + 16 * v136;
        unsigned int v142 = *(llvm **)v141;
        uint64_t v143 = *(void *)(v141 + 8);
        uint64_t v144 = sub_1CD7EE368(v140, a11);
        uint64_t v147 = sub_1CD7F6564(v140, (const char *)0xC0, (const llvm::APInt *)&v270, v142, v143, v264, a4, v146, v267, a6, v137, v138, a7, v139, v144, v145);
        *(void *)uint64_t v260 = v147;
        *(_DWORD *)(v260 + 8) = v148;
        uint64_t v149 = *a12;
        uint64_t v150 = (uint64_t)v147;
        goto LABEL_252;
      }
    }
LABEL_223:
    uint64_t v126 = 0;
    goto LABEL_253;
  }
  if (v92 == 223 && v119 == 98) {
    goto LABEL_198;
  }
LABEL_143:
  uint64_t v98 = (uint64_t *)&v277;
  if ((_UNKNOWN *)v278 == &unk_1CFB2E344) {
    uint64_t v98 = v279;
  }
  if ((*((unsigned char *)v98 + 28) & 8) != 0) {
    goto LABEL_223;
  }
  int v99 = (int)a10;
LABEL_246:
  if (a13)
  {
    int v178 = v99;
    unsigned int v179 = (uint64_t *)v95;
    int v99 = v94;
    LODWORD(v94) = v178;
    uint64_t v95 = (uint64_t)v20;
    char v20 = v179;
  }
  unsigned int v180 = (void *)a12[2];
  uint64_t v181 = *(void *)(v95 + 40) + 16 * v94;
  uint64_t v182 = *(void *)(v181 + 8);
  v266 = *(llvm **)v181;
  uint64_t v183 = sub_1CD7EE368(v180, a11);
  char v187 = sub_1CD7F6564(v180, (const char *)0xC0, (const llvm::APInt *)&v270, v266, v182, v264, a4, v185, v267, a6, v95, v94, (uint64_t)v20, v99, v183, v184);
  int v188 = (llvm::APFloatBase *)a12[2];
  uint64_t v189 = *((void *)v188 + 104);
  if (v189) {
    __int16 v190 = *(_WORD *)(v189 + 8);
  }
  else {
    __int16 v190 = 0;
  }
  *(void *)uint64_t v260 = sub_1CD7F3564(v188, (const char *)*(unsigned __int16 *)(a7 + 24), (uint64_t)&v270, v24, v259, (uint64_t)v187, v186, v190);
  *(_DWORD *)(v260 + 8) = v191;
  uint64_t v149 = *a12;
  uint64_t v150 = (uint64_t)v187;
LABEL_252:
  sub_1CCEF0788(v149, v150);
  uint64_t v126 = 1;
LABEL_253:
  if ((_UNKNOWN *)v278 == &unk_1CFB2E344)
  {
    sub_1CB845718((uint64_t *)&v279);
  }
  else if ((*(_DWORD *)(v278 + 8) - 64) <= 0xFFFFFF7F && v279)
  {
    MEMORY[0x1D25D9CB0](v279, 0x1000C8000313F17);
  }
LABEL_255:
  if (v270)
  {
    int v192 = *v270;
    if ((v192 - 4) > 0x1E)
    {
      if ((v192 - 3) >= 0xFFFFFFFE) {
        int v194 = v270;
      }
      else {
        int v194 = 0;
      }
      if ((v192 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v195 = (unint64_t)(v194 + 8);
LABEL_265:
        BOOL v277 = &v270;
        sub_1CC5FA668(v195 + 16, &v277);
        return v126;
      }
      if (v192 == 3) {
        *((void *)v270 + 1) = 0;
      }
    }
    else if ((v270[1] & 0x7F) == 2 || *((_DWORD *)v270 + 3))
    {
      uint64_t v258 = *((void *)v270 + 2);
      if ((v258 & 4) != 0)
      {
        unint64_t v195 = v258 & 0xFFFFFFFFFFFFFFF8;
        if (v195) {
          goto LABEL_265;
        }
      }
    }
  }
  return v126;
}

BOOL sub_1CB8C57D0(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v5 = *(unsigned __int16 *)(a1 + 24);
  BOOL result = 1;
  BOOL v7 = v5 > 0x24 || ((1 << v5) & 0x1800001800) == 0;
  if (v7 && v5 != 395)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    if (!v8) {
      return 0;
    }
    int v10 = 1;
    uint64_t v11 = *(void *)(a1 + 48);
    do
    {
      if (*(_DWORD *)(v11 + 8) == a2)
      {
        if (!v10) {
          goto LABEL_14;
        }
        --v10;
      }
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10)
    {
LABEL_14:
      if (!a4) {
        return 0;
      }
      int v12 = 2;
      do
      {
        if (!*(_DWORD *)(v8 + 8))
        {
          if (!v12) {
            return 0;
          }
          --v12;
        }
        uint64_t v8 = *(void *)(v8 + 32);
      }
      while (v8);
      if (v12) {
        return 0;
      }
    }
    if (v5 == 47 && a3)
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 32) + 40) + 80);
      uint64_t v14 = (void *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u) {
        uint64_t v14 = (void *)*v14;
      }
      if ((*(_DWORD *)v14 - 2022) < 0x40) {
        return 1;
      }
      int v15 = 47;
LABEL_28:
      if (sub_1CB8C5B2C(v15)) {
        return 1;
      }
LABEL_36:
      if (v5 > 211)
      {
        if (v5 != 212) {
          return v5 == 215 && (a3 & 1) != 0;
        }
        if (a3) {
          return 1;
        }
        uint64_t v22 = *(uint64_t **)(a1 + 32);
        uint64_t v17 = *v22;
        uint64_t v18 = v22[1];
        uint64_t v19 = 0;
      }
      else
      {
        if (v5 == 46)
        {
          uint64_t v20 = *(void *)(**(void **)(a1 + 32) + 80);
          if (*(_DWORD *)(v20 + 32) > 0x40u) {
            uint64_t v21 = **(void **)(v20 + 24);
          }
          else {
            uint64_t v21 = *(void *)(v20 + 24);
          }
          return v21 == 1830 || v21 == 1851;
        }
        if (v5 != 192) {
          return 0;
        }
        unint64_t v16 = *(void **)(a1 + 32);
        if (!sub_1CB8C57D0(v16[10], v16[11], a3, 0)) {
          return 0;
        }
        uint64_t v17 = v16[15];
        uint64_t v18 = v16[16];
        uint64_t v19 = a3;
      }
      return (sub_1CB8C57D0(v17, v18, v19, 0) & 1) != 0;
    }
    BOOL result = 1;
    if (((v5 - 397) > 0x2E || ((1 << (v5 + 115)) & 0x40000000001BLL) == 0)
      && ((v5 - 96) > 0x2D || ((1 << (v5 - 96)) & 0x200000000005) == 0)
      && (v5 & 0xFFFE) != 0xDE)
    {
      int v15 = v5;
      if (!a3) {
        goto LABEL_36;
      }
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t sub_1CB8C59E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 1;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    int v3 = *(unsigned __int16 *)(v2 + 24);
    if (v3 != 215 && v3 != 212) {
      break;
    }
    if ((sub_1CB8C59E4(*(void *)(v1 + 16)) & 1) == 0) {
      return 0;
    }
LABEL_13:
    uint64_t v1 = *(void *)(v1 + 32);
    if (!v1) {
      return 1;
    }
  }
  if (sub_1CB8C5B2C(*(unsigned __int16 *)(v2 + 24))) {
    goto LABEL_13;
  }
  if (v3 == 46)
  {
    uint64_t v4 = *(void *)(**(void **)(v2 + 32) + 80);
    uint64_t v5 = *(_DWORD *)(v4 + 32) > 0x40u ? **(void **)(v4 + 24) : *(void *)(v4 + 24);
    if (v5 == 1830 || v5 == 1851) {
      goto LABEL_13;
    }
  }
  return 0;
}

uint64_t sub_1CB8C5A98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 1;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    int v4 = *(unsigned __int16 *)(v3 + 24);
    if (v4 == 192) {
      break;
    }
    if (v4 == 215 || v4 == 212)
    {
      if ((sub_1CB8C5A98() & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = sub_1CB8C5B2C(*(unsigned __int16 *)(v3 + 24));
      if (!result) {
        return result;
      }
    }
LABEL_11:
    uint64_t v1 = *(void *)(v1 + 32);
    if (!v1) {
      return 1;
    }
  }
  uint64_t v5 = *(void *)(v3 + 32);
  if (*(void *)(v5 + 80) != a1 && *(void *)(v5 + 120) != a1) {
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_1CB8C5B2C(int a1)
{
  uint64_t result = 1;
  if (((a1 - 222) > 0x13 || ((1 << (a1 + 34)) & 0x81203) == 0)
    && ((a1 - 423) > 0x14 || ((1 << (a1 + 89)) & 0x10000B) == 0))
  {
    unsigned int v3 = a1 - 96;
    if (v3 > 0x2D || ((1 << v3) & 0x200000000005) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CB8C5BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a2;
  v3822[3] = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int8 **)(a2 + 64);
  v3789 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v3789, v10, 2);
  }
  uint64_t v11 = v3793;
  int v12 = *(_DWORD *)(v8 + 60);
  int v3790 = v12;
  uint64_t v13 = *(unsigned __int16 *)(v8 + 24);
  if (*(unsigned __int16 *)(v8 + 24) > 0xD3u)
  {
    if (*(unsigned __int16 *)(v8 + 24) <= 0x121u)
    {
      if (*(unsigned __int16 *)(v8 + 24) <= 0xE6u)
      {
        switch(*(_WORD *)(v8 + 24))
        {
          case 0xD4:
            uint64_t v14 = *(void *)(v8 + 32);
            uint64_t v15 = *(void *)v14;
            uint64_t v16 = *(void *)(*(void *)v14 + 48);
            if (!v16) {
              goto LABEL_3081;
            }
            int v17 = 1;
            do
            {
              if (*(_DWORD *)(v16 + 8) == *(_DWORD *)(v14 + 8))
              {
                if (!v17) {
                  goto LABEL_3081;
                }
                --v17;
              }
              uint64_t v16 = *(void *)(v16 + 32);
            }
            while (v16);
            if (v17) {
              goto LABEL_3081;
            }
            uint64_t v18 = *(unsigned __int16 *)(v15 + 24);
            uint64_t v19 = *(void *)(v8 + 40);
            uint64_t v21 = *(llvm **)v19;
            uint64_t v20 = *(void *)(v19 + 8);
            switch(*(_WORD *)(v15 + 24))
            {
              case 0x18D:
              case 0x190:
                uint64_t v22 = *(void *)(a3 + 16);
                uint64_t v23 = *(uint64_t **)(v15 + 32);
                uint64_t v24 = *v23;
                uint64_t v25 = v23[1];
                uint64_t v26 = v23[5];
                uint64_t v27 = v23[6];
                uint64_t v28 = *(void *)(v22 + 832);
                if (v28) {
                  LOWORD(v28) = *(_WORD *)(v28 + 8);
                }
                uint64_t v29 = (uint64_t)sub_1CCFDED5C(v22, v18, (const llvm::APInt *)&v3789, v21, v20, v24, v25, a8, v26, v27, v28);
                goto LABEL_2210;
              case 0x18E:
              case 0x191:
                v1510 = *(void **)(a3 + 16);
                v1753 = *(uint64_t **)(v15 + 32);
                uint64_t v1514 = *v1753;
                uint64_t v1515 = v1753[1];
                uint64_t v1754 = v1753[5];
                uint64_t v1755 = v1753[6];
                uint64_t v1756 = v1753[10];
                uint64_t v1757 = v1753[11];
                uint64_t v1758 = v1510[104];
                if (v1758) {
                  LOWORD(v1758) = *(_WORD *)(v1758 + 8);
                }
                unint64_t v3663 = v1757;
                __int16 v3666 = v1758;
                uint64_t v3654 = v1755;
                uint64_t v3659 = v1756;
                uint64_t v3649 = v1754;
                uint64_t v1511 = *(unsigned __int16 *)(v15 + 24);
                v1512 = v21;
                uint64_t v1513 = v20;
                goto LABEL_1898;
              default:
                if ((v18 & 0xFFFE) == 0xDE)
                {
                  if (!sub_1CB8C5A98(v8))
                  {
                    if (v18 != 192 || !*(_DWORD *)(a3 + 8)) {
                      goto LABEL_3081;
                    }
LABEL_2126:
                    uint64_t v2003 = *(void *)(v15 + 32);
                    v3745 = *(uint64_t **)v2003;
                    uint64_t v3714 = *(void *)(v2003 + 8);
                    v3726 = *(uint64_t **)(v2003 + 40);
                    uint64_t v3703 = *(void *)(v2003 + 48);
                    uint64_t v2004 = *(void *)(v2003 + 80);
                    uint64_t v2005 = *(void *)(v2003 + 88);
                    uint64_t v2006 = *(void *)(v2003 + 120);
                    uint64_t v2007 = *(void *)(v2003 + 128);
                    v2008 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                    uint64_t v3688 = v2009;
                    uint64_t v3695 = (uint64_t)v2008;
                    if (sub_1CB8C59E4(v15)) {
                      unsigned int v2010 = 2;
                    }
                    else {
                      unsigned int v2010 = 1;
                    }
                    v2011 = *(void **)(a3 + 16);
                    if ((*(_WORD *)(*v2011 + 1020) & 1) != 0
                      && ((uint64_t *)v2004 == v3745
                       && v2005 == v3714
                       && (uint64_t *)v2006 == v3726
                       && v2007 == v3703
                       || (uint64_t *)v2004 == v3726
                       && v3703 == v2005
                       && (uint64_t *)v2006 == v3745
                       && v2007 == v3714)
                      && (BOOL v2012 = sub_1CB8C57D0(v2004, v2005, 1, 1),
                          sub_1CB8C57D0(v2006, v2007, 1, 1) + v2012 >= v2010))
                    {
                      uint64_t v3481 = v2011[104];
                      if (v3481) {
                        LOWORD(v3481) = *(_WORD *)(v3481 + 8);
                      }
                      v3745 = sub_1CCFDED5C((uint64_t)v2011, 212, (const llvm::APInt *)&v3789, v21, v20, (uint64_t)v3745, v3714, v2013, v3695, v3688, v3481);
                      int v3484 = v3483;
                      uint64_t v3485 = *(void *)(a3 + 16);
                      uint64_t v3486 = *(void *)(v3485 + 832);
                      if (v3486) {
                        LOWORD(v3486) = *(_WORD *)(v3486 + 8);
                      }
                      v3726 = sub_1CCFDED5C(v3485, 212, (const llvm::APInt *)&v3789, v21, v20, (uint64_t)v3726, v3703, v3482, v3695, v3688, v3486);
                      uint64_t v3489 = *(void *)(a3 + 16);
                      uint64_t v3490 = *(void *)(v3489 + 832);
                      if (v3490) {
                        LOWORD(v3490) = *(_WORD *)(v3490 + 8);
                      }
                      LODWORD(v3714) = v3484;
                      LODWORD(v3703) = v3487;
                      v2025 = sub_1CCFDED5C(v3489, 212, (const llvm::APInt *)&v3789, v21, v20, v2004, v2005, v3488, v3695, v3688, v3490);
                    }
                    else
                    {
                      if (*(_WORD *)(v2004 + 24) == 222)
                      {
                        uint64_t v2014 = *(void *)(v2004 + 32);
                        if (*(void *)v2014 == v2006 && *(_DWORD *)(v2014 + 8) == v2007)
                        {
                          uint64_t v2015 = *(void *)(v2004 + 48);
                          if (v2015)
                          {
                            int v2016 = 1;
                            do
                            {
                              if (*(_DWORD *)(v2015 + 8) == v2005)
                              {
                                if (!v2016) {
                                  goto LABEL_2150;
                                }
                                --v2016;
                              }
                              uint64_t v2015 = *(void *)(v2015 + 32);
                            }
                            while (v2015);
                            if (!v2016 && sub_1CB8C57D0(v2006, v2007, 1, 1))
                            {
                              uint64_t v3591 = v2011[104];
                              if (v3591) {
                                LOWORD(v3591) = *(_WORD *)(v3591 + 8);
                              }
                              v2034 = sub_1CCFDED5C((uint64_t)v2011, 212, (const llvm::APInt *)&v3789, v21, v20, v2006, v2007, v2017, v3695, v3688, v3591);
                              v2035 = (void *)(v2007 & 0xFFFFFFFF00000000 | v3592);
                              v3593 = *(llvm::APFloatBase **)(a3 + 16);
                              uint64_t v3594 = *((void *)v3593 + 104);
                              if (v3594) {
                                __int16 v3595 = *(_WORD *)(v3594 + 8);
                              }
                              else {
                                __int16 v3595 = 0;
                              }
                              v2028 = sub_1CD7F3564(v3593, (const char *)0xDE, (uint64_t)&v3789, v21, v20, (uint64_t)v2034, v2035, v3595);
                              LODWORD(v2029) = v3623;
                              goto LABEL_2169;
                            }
                          }
                        }
                      }
LABEL_2150:
                      if (*(_WORD *)(v2006 + 24) == 222)
                      {
                        uint64_t v2018 = *(void *)(v2006 + 32);
                        if (*(void *)v2018 == v2004 && *(_DWORD *)(v2018 + 8) == v2005)
                        {
                          uint64_t v2019 = *(void *)(v2006 + 48);
                          if (v2019)
                          {
                            int v2020 = 1;
                            do
                            {
                              if (*(_DWORD *)(v2019 + 8) == v2007)
                              {
                                if (!v2020) {
                                  goto LABEL_2161;
                                }
                                --v2020;
                              }
                              uint64_t v2019 = *(void *)(v2019 + 32);
                            }
                            while (v2019);
                            if (!v2020 && sub_1CB8C57D0(v2004, v2005, 1, 1))
                            {
                              uint64_t v3596 = v2011[104];
                              if (v3596) {
                                LOWORD(v3596) = *(_WORD *)(v3596 + 8);
                              }
                              v2028 = sub_1CCFDED5C((uint64_t)v2011, 212, (const llvm::APInt *)&v3789, v21, v20, v2004, v2005, v2021, v3695, v3688, v3596);
                              v2029 = (void *)(v2005 & 0xFFFFFFFF00000000 | v3597);
                              v3598 = *(llvm::APFloatBase **)(a3 + 16);
                              uint64_t v3599 = *((void *)v3598 + 104);
                              if (v3599) {
                                __int16 v3600 = *(_WORD *)(v3599 + 8);
                              }
                              else {
                                __int16 v3600 = 0;
                              }
                              v2032 = sub_1CD7F3564(v3598, (const char *)0xDE, (uint64_t)&v3789, v21, v20, (uint64_t)v2028, v2029, v3600);
                              goto LABEL_2168;
                            }
                          }
                        }
                      }
LABEL_2161:
                      BOOL v2022 = sub_1CB8C57D0(v2004, v2005, 1, 0);
                      if (sub_1CB8C57D0(v2006, v2007, 1, 0) + v2022 < v2010) {
                        goto LABEL_3081;
                      }
                      uint64_t v2024 = v2011[104];
                      if (v2024) {
                        LOWORD(v2024) = *(_WORD *)(v2024 + 8);
                      }
                      v2025 = sub_1CCFDED5C((uint64_t)v2011, 212, (const llvm::APInt *)&v3789, v21, v20, v2004, v2005, v2023, v3695, v3688, v2024);
                    }
                    v2028 = v2025;
                    LODWORD(v2029) = v2026;
                    uint64_t v2030 = *(void *)(a3 + 16);
                    uint64_t v2031 = *(void *)(v2030 + 832);
                    if (v2031) {
                      LOWORD(v2031) = *(_WORD *)(v2031 + 8);
                    }
                    v2032 = sub_1CCFDED5C(v2030, 212, (const llvm::APInt *)&v3789, v21, v20, v2006, v2007, v2027, v3695, v3688, v2031);
LABEL_2168:
                    v2034 = v2032;
                    LODWORD(v2035) = v2033;
LABEL_2169:
                    sub_1CCEF0788(*(void *)a3, (uint64_t)v2028);
                    sub_1CCEF0788(*(void *)a3, (uint64_t)v2034);
                    uint64_t v29 = (uint64_t)sub_1CD7F6564(*(void **)(a3 + 16), (const char *)0xC0, (const llvm::APInt *)&v3789, v21, v20, (uint64_t)v3745, v3714, v2036, (uint64_t)v3726, v3703, (uint64_t)v2028, (int)v2029, (uint64_t)v2034, (int)v2035, *(void *)(*(void *)(v15 + 32) + 160), *(void *)(*(void *)(v15 + 32) + 168));
                    goto LABEL_2210;
                  }
                  uint64_t v2291 = *(void *)(a3 + 16);
                  uint64_t v2292 = *(void *)(v2291 + 832);
                  if (v2292) {
                    LOWORD(v2292) = *(_WORD *)(v2292 + 8);
                  }
                  uint64_t v36 = sub_1CCFDED5C(v2291, 212, (const llvm::APInt *)&v3789, v21, v20, **(void **)(v15 + 32), *(void *)(*(void *)(v15 + 32) + 8), v1025, *(void *)(v14 + 40), *(void *)(v14 + 48), v2292);
                  uint64_t v38 = v2293;
                  int v41 = *(llvm::APFloatBase **)(a3 + 16);
                }
                else
                {
                  if (v18 == 192 && *(_DWORD *)(a3 + 8)) {
                    goto LABEL_2126;
                  }
                  if ((v18 & 0xFFFE) != 0xCA) {
                    goto LABEL_3081;
                  }
                  int v41 = *(llvm::APFloatBase **)(a3 + 16);
                  uint64_t v1234 = *(void *)(v15 + 32);
                  uint64_t v36 = *(void **)v1234;
                  uint64_t v38 = *(void **)(v1234 + 8);
                }
                uint64_t v2294 = *((void *)v41 + 104);
                if (v2294) {
                  __int16 v39 = *(_WORD *)(v2294 + 8);
                }
                else {
                  __int16 v39 = 0;
                }
                uint64_t v42 = v18;
                uint64_t v43 = (uint64_t)v21;
                break;
            }
            goto LABEL_2464;
          case 0xD7:
            uint64_t v170 = *(llvm::APFloatBase **)(a3 + 16);
            if ((*(_WORD *)(*(void *)v170 + 1020) & 1) == 0) {
              goto LABEL_3081;
            }
            uint64_t v171 = **(void **)(v8 + 32);
            uint64_t v172 = *(unsigned __int16 *)(v171 + 24);
            if (v172 == 212)
            {
              uint64_t v11 = *(void ***)(v171 + 32);
              uint64_t v173 = (uint64_t)*v11;
              if (*((_WORD *)*v11 + 12) == 395
                || !sub_1CB8D70B0(v8)
                || !sub_1CB8C57D0(v173, (int)v11[1], 1, 0))
              {
                if (!*(unsigned char *)(*(void *)(a1 + 184296) + 294)) {
                  goto LABEL_180;
                }
                uint64_t v174 = *(void *)(v8 + 48);
                if (!v174) {
                  goto LABEL_180;
                }
                while (1)
                {
                  int v175 = *(unsigned __int16 *)(*(void *)(v174 + 16) + 24);
                  if (v175 == 99 || v175 == 423) {
                    break;
                  }
                  uint64_t v174 = *(void *)(v174 + 32);
                  if (!v174) {
                    goto LABEL_180;
                  }
                }
              }
              goto LABEL_3081;
            }
            if ((v172 & 0xFFFE) != 0xDE) {
              goto LABEL_3081;
            }
            uint64_t v664 = **(void **)(v171 + 32);
            if (*(_WORD *)(v664 + 24) != 212) {
              goto LABEL_3081;
            }
            uint64_t v665 = *(uint64_t **)(v8 + 40);
            uint64_t v666 = *v665;
            uint64_t v667 = (void *)v665[1];
            uint64_t v668 = *(uint64_t **)(v664 + 32);
            uint64_t v669 = *v668;
            if (*(_WORD *)(*v668 + 24) != 395
              && sub_1CB8D70B0(v8)
              && sub_1CB8C57D0(v669, v668[1], 1, 0))
            {
              goto LABEL_3081;
            }
            uint64_t v38 = (void *)v668[1];
            uint64_t v670 = *((void *)v170 + 104);
            if (v670) {
              __int16 v39 = *(_WORD *)(v670 + 8);
            }
            else {
              __int16 v39 = 0;
            }
            int v41 = v170;
            uint64_t v42 = v172;
            uint64_t v43 = v666;
            v1311 = v667;
            uint64_t v36 = (void *)v669;
            goto LABEL_2209;
          case 0xD8:
            uint64_t v205 = **(void **)(v8 + 32);
            if (*(_WORD *)(v205 + 24) != 395) {
              goto LABEL_3081;
            }
            int v206 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v207 = *(void **)(v205 + 64);
            v3793[0] = v207;
            uint64_t v208 = v205;
            if (v207)
            {
              llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v207, 2);
              uint64_t v208 = **(void **)(v8 + 32);
            }
            LODWORD(v3793[1]) = *(_DWORD *)(v205 + 60);
            uint64_t v209 = *(uint64_t **)(v8 + 40);
            uint64_t v210 = *v209;
            uint64_t v211 = v209[1];
            uint64_t v212 = *(void *)(v208 + 32);
            uint64_t v213 = *(uint64_t **)v212;
            int v214 = *(void **)(v212 + 8);
            uint64_t v215 = *((void *)v206 + 104);
            if (v215) {
              __int16 v216 = *(_WORD *)(v215 + 8);
            }
            else {
              __int16 v216 = 0;
            }
            v1173 = v206;
            uint64_t v1174 = 395;
            break;
          case 0xDE:
            int v177 = *(uint64_t **)(v8 + 32);
            uint64_t v178 = *v177;
            uint64_t v179 = v177[1];
            unsigned int v180 = *(void **)(v8 + 64);
            v3793[0] = v180;
            if (v180)
            {
              llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v180, 2);
              int v12 = *(_DWORD *)(v8 + 60);
            }
            LODWORD(v3793[1]) = v12;
            if (*(int *)(a3 + 8) < 2) {
              goto LABEL_1322;
            }
            uint64_t v181 = *(void *)(v8 + 40);
            uint64_t v183 = *(llvm **)v181;
            uint64_t v182 = *(void *)(v181 + 8);
            int v184 = *(unsigned __int16 *)(v178 + 24);
            if ((v184 - 96) <= 0x2D && ((1 << (v184 - 96)) & 0x200000000005) != 0)
            {
              uint64_t v186 = *(void *)(v178 + 48);
              if (!v186) {
                goto LABEL_195;
              }
              int v187 = 1;
              do
              {
                if (*(_DWORD *)(v186 + 8) == v179)
                {
                  if (!v187) {
                    goto LABEL_195;
                  }
                  --v187;
                }
                uint64_t v186 = *(void *)(v186 + 32);
              }
              while (v186);
              if (v187)
              {
LABEL_195:
                if ((sub_1CB8C5A98(v8) & 1) != 0 || !sub_1CB8C5A98(v178)) {
                  goto LABEL_1322;
                }
              }
              switch(v184)
              {
                case 141:
                  v1205 = *(llvm::APFloatBase **)(a3 + 16);
                  if (*(_WORD *)(*(void *)v1205 + 1020))
                  {
                    v1206 = *(uint64_t **)(v178 + 32);
                    uint64_t v1207 = *v1206;
                    unint64_t v3722 = v1206[1];
                    v1208 = (uint64_t *)v1206[5];
                    unint64_t v3739 = v1206[6];
                    uint64_t v1209 = v1206[10];
                    unint64_t v1210 = v1206[11];
                    uint64_t v1211 = *(void *)(v8 + 48);
                    if (v1211)
                    {
                      if (!*(void *)(v1211 + 32)) {
                        goto LABEL_2532;
                      }
                    }
                    if ((sub_1CB8C5A98(v8) & 1) == 0)
                    {
LABEL_2532:
                      if (*(_WORD *)(v1207 + 24) == 222)
                      {
                        uint64_t v2393 = *(void *)(v1207 + 32);
                        uint64_t v1207 = *(void *)v2393;
                        unint64_t v3722 = v3722 & 0xFFFFFFFF00000000 | *(unsigned int *)(v2393 + 8);
                      }
                      else if (*((_WORD *)v1208 + 12) == 222)
                      {
                        uint64_t v2764 = v1208[4];
                        v1208 = *(uint64_t **)v2764;
                        unint64_t v3739 = v3739 & 0xFFFFFFFF00000000 | *(unsigned int *)(v2764 + 8);
                      }
                      else
                      {
                        uint64_t v2984 = *((void *)v1205 + 104);
                        if (v2984) {
                          __int16 v2985 = *(_WORD *)(v2984 + 8);
                        }
                        else {
                          __int16 v2985 = 0;
                        }
                        v1208 = sub_1CD7F3564(v1205, (const char *)0xDE, (uint64_t)v3793, v183, v182, (uint64_t)v1208, (void *)v3739, v2985);
                        unint64_t v3739 = v3739 & 0xFFFFFFFF00000000 | v3225;
                      }
                      if (*(_WORD *)(v1209 + 24) == 222)
                      {
                        uint64_t v3226 = *(void *)(v1209 + 32);
                        v3227 = *(uint64_t **)v3226;
                        unint64_t v3228 = v1210 & 0xFFFFFFFF00000000 | *(unsigned int *)(v3226 + 8);
                      }
                      else
                      {
                        v3229 = *(llvm::APFloatBase **)(a3 + 16);
                        uint64_t v3230 = *((void *)v3229 + 104);
                        if (v3230) {
                          __int16 v3231 = *(_WORD *)(v3230 + 8);
                        }
                        else {
                          __int16 v3231 = 0;
                        }
                        v3227 = sub_1CD7F3564(v3229, (const char *)0xDE, (uint64_t)v3793, v183, v182, v1209, (void *)v1210, v3231);
                        unint64_t v3228 = v1210 & 0xFFFFFFFF00000000 | v3232;
                      }
                      v3233 = *(void **)(a3 + 16);
                      uint64_t v3234 = v3233[104];
                      if (v3234) {
                        LOWORD(v3234) = *(_WORD *)(v3234 + 8);
                      }
                      unint64_t v200 = sub_1CD7F5D38(v3233, (const char *)0x8D, (const llvm::APInt *)v3793, v183, v182, v1207, v3722, a8, (uint64_t)v1208, v3739, (uint64_t)v3227, v3228, SHIDWORD(v3228), v3234);
                      unint64_t v202 = v3235;
                      *(void *)&long long v3791 = v200;
                      *((void *)&v3791 + 1) = v3235;
                      uint64_t v3236 = *(void *)(v178 + 48);
                      if (!v3236) {
                        goto LABEL_3212;
                      }
                      int v204 = 1;
                      do
                      {
                        if (*(_DWORD *)(v3236 + 8) == v179)
                        {
                          if (!v204) {
                            goto LABEL_3212;
                          }
                          --v204;
                        }
                        uint64_t v3236 = *(void *)(v3236 + 32);
                      }
                      while (v3236);
                      goto LABEL_1586;
                    }
                  }
                  break;
                case 98:
                  v1199 = *(uint64_t **)(v178 + 32);
                  uint64_t v1200 = *v1199;
                  unint64_t v1201 = v1199[1];
                  v1202 = (uint64_t *)v1199[5];
                  unint64_t v1203 = v1199[6];
                  if (*(_WORD *)(*v1199 + 24) == 222)
                  {
                    uint64_t v1204 = *(void *)(v1200 + 32);
                    uint64_t v1200 = *(void *)v1204;
                    unint64_t v1201 = v1201 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1204 + 8);
                  }
                  else if (*((_WORD *)v1202 + 12) == 222)
                  {
                    uint64_t v1436 = v1202[4];
                    v1202 = *(uint64_t **)v1436;
                    unint64_t v1203 = v1203 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1436 + 8);
                  }
                  else
                  {
                    v2717 = *(llvm::APFloatBase **)(a3 + 16);
                    uint64_t v2718 = *((void *)v2717 + 104);
                    if (v2718) {
                      __int16 v2719 = *(_WORD *)(v2718 + 8);
                    }
                    else {
                      __int16 v2719 = 0;
                    }
                    v1202 = sub_1CD7F3564(v2717, (const char *)0xDE, (uint64_t)v3793, v183, v182, (uint64_t)v1202, (void *)v1203, v2719);
                    unint64_t v1203 = v1203 & 0xFFFFFFFF00000000 | v2866;
                  }
                  unint64_t v200 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3793, v183, v182, v1200, v1201, a8, (uint64_t)v1202, v1203, *(_WORD *)(v178 + 72));
                  unint64_t v202 = v1437;
                  *(void *)&long long v3791 = v200;
                  *((void *)&v3791 + 1) = v1437;
                  uint64_t v1438 = *(void *)(v178 + 48);
                  if (!v1438) {
                    goto LABEL_3212;
                  }
                  int v204 = 1;
                  do
                  {
                    if (*(_DWORD *)(v1438 + 8) == v179)
                    {
                      if (!v204) {
                        goto LABEL_3212;
                      }
                      --v204;
                    }
                    uint64_t v1438 = *(void *)(v1438 + 32);
                  }
                  while (v1438);
                  goto LABEL_1586;
                case 96:
                  int v188 = *(llvm::APFloatBase **)(a3 + 16);
                  if (*(_WORD *)(*(void *)v188 + 1020))
                  {
                    uint64_t v189 = *(uint64_t **)(v178 + 32);
                    uint64_t v190 = *v189;
                    unint64_t v191 = v189[1];
                    uint64_t v193 = v189[5];
                    unint64_t v192 = v189[6];
                    if (*(_WORD *)(*v189 + 24) == 222)
                    {
                      uint64_t v194 = *(void *)(v190 + 32);
                      unint64_t v195 = *(uint64_t **)v194;
                      unint64_t v196 = v191 & 0xFFFFFFFF00000000 | *(unsigned int *)(v194 + 8);
                    }
                    else
                    {
                      uint64_t v2720 = *((void *)v188 + 104);
                      if (v2720) {
                        __int16 v2721 = *(_WORD *)(v2720 + 8);
                      }
                      else {
                        __int16 v2721 = 0;
                      }
                      unint64_t v195 = sub_1CD7F3564(v188, (const char *)0xDE, (uint64_t)v3793, v183, v182, v190, (void *)v191, v2721);
                      unint64_t v196 = v191 & 0xFFFFFFFF00000000 | v2867;
                    }
                    if (*(_WORD *)(v193 + 24) == 222)
                    {
                      uint64_t v197 = *(void *)(v193 + 32);
                      uint64_t v198 = *(uint64_t **)v197;
                      unint64_t v199 = v192 & 0xFFFFFFFF00000000 | *(unsigned int *)(v197 + 8);
                    }
                    else
                    {
                      v2722 = *(llvm::APFloatBase **)(a3 + 16);
                      uint64_t v2723 = *((void *)v2722 + 104);
                      if (v2723) {
                        __int16 v2724 = *(_WORD *)(v2723 + 8);
                      }
                      else {
                        __int16 v2724 = 0;
                      }
                      uint64_t v198 = sub_1CD7F3564(v2722, (const char *)0xDE, (uint64_t)v3793, v183, v182, v193, (void *)v192, v2724);
                      unint64_t v199 = v192 & 0xFFFFFFFF00000000 | v2868;
                    }
                    unint64_t v200 = sub_1CCFDED5C(*(void *)(a3 + 16), 96, (const llvm::APInt *)v3793, v183, v182, (uint64_t)v195, v196, a8, (uint64_t)v198, v199, *(_WORD *)(v178 + 72));
                    unint64_t v202 = v201;
                    *(void *)&long long v3791 = v200;
                    *((void *)&v3791 + 1) = v201;
                    uint64_t v203 = *(void *)(v178 + 48);
                    if (!v203) {
                      goto LABEL_3212;
                    }
                    int v204 = 1;
                    do
                    {
                      if (*(_DWORD *)(v203 + 8) == v179)
                      {
                        if (!v204) {
                          goto LABEL_3212;
                        }
                        --v204;
                      }
                      uint64_t v203 = *(void *)(v203 + 32);
                    }
                    while (v203);
LABEL_1586:
                    if (!v204)
                    {
LABEL_1587:
                      char v897 = 0;
                      goto LABEL_1323;
                    }
LABEL_3212:
                    uint64_t v3237 = *(void *)(a3 + 16);
                    uint64_t v3238 = *(void *)(v3237 + 832);
                    if (v3238) {
                      __int16 v3239 = *(_WORD *)(v3238 + 8);
                    }
                    else {
                      __int16 v3239 = 0;
                    }
                    v3240 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xDE, (uint64_t)v3793, v183, v182, (uint64_t)v200, v202, v3239);
                    sub_1CD801F28(v3237, v178, v179, (uint64_t)v3240, v3241);
                    goto LABEL_1587;
                  }
                  break;
              }
LABEL_1322:
              char v897 = 1;
LABEL_1323:
              v1212 = v3793[0];
              if (!v3793[0]) {
                goto LABEL_3080;
              }
              int v1213 = *(unsigned __int8 *)v3793[0];
              if ((v1213 - 4) <= 0x1E)
              {
                if ((*((unsigned char *)v3793[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3793[0] + 3))
                {
                  uint64_t v1214 = *((void *)v3793[0] + 2);
                  if ((v1214 & 4) != 0)
                  {
                    unint64_t v1215 = v1214 & 0xFFFFFFFFFFFFFFF8;
                    if (v1215) {
                      goto LABEL_1335;
                    }
                  }
                }
LABEL_3080:
                if ((v897 & 1) == 0) {
                  goto LABEL_3082;
                }
                goto LABEL_3081;
              }
              if ((v1213 - 3) >= 0xFFFFFFFE) {
                v1216 = v3793[0];
              }
              else {
                v1216 = 0;
              }
              if ((v1213 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v1215 = (unint64_t)v1216 + 8;
LABEL_1335:
                *(void *)&long long v3815 = v3793;
                uint64_t v1217 = v1215 + 16;
                v1218 = (void **)&v3815;
LABEL_3077:
                sub_1CC5FA668(v1217, v1218);
                goto LABEL_3080;
              }
LABEL_3078:
              if (v1213 == 3) {
                v1212[1] = 0;
              }
              goto LABEL_3080;
            }
            if (v184 == 212)
            {
              uint64_t v886 = *(void *)(v178 + 32);
              uint64_t v887 = *(void *)v886;
              if (*(_WORD *)(*(void *)v886 + 24) == 222)
              {
                uint64_t v888 = *(void *)(a3 + 16);
                uint64_t v889 = *(void *)(v887 + 32);
                v890 = *(uint64_t **)v889;
                uint64_t v891 = *(void *)(v889 + 8);
                uint64_t v892 = *(void *)(v886 + 40);
                uint64_t v893 = *(void *)(v886 + 48);
              }
              else
              {
                if (sub_1CB8C5A98(v8)) {
                  goto LABEL_1322;
                }
                uint64_t v1026 = *(void *)(v178 + 48);
                if (!v1026) {
                  goto LABEL_1322;
                }
                int v1027 = 1;
                do
                {
                  if (*(_DWORD *)(v1026 + 8) == v179)
                  {
                    if (!v1027) {
                      goto LABEL_1322;
                    }
                    --v1027;
                  }
                  uint64_t v1026 = *(void *)(v1026 + 32);
                }
                while (v1026);
                if (v1027) {
                  goto LABEL_1322;
                }
                v1028 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v1029 = *(void *)(v887 + 40) + 16 * *(unsigned int *)(v886 + 8);
                v1030 = *(llvm **)v1029;
                uint64_t v1031 = *(void *)(v1029 + 8);
                uint64_t v1032 = *((void *)v1028 + 104);
                if (v1032) {
                  __int16 v1033 = *(_WORD *)(v1032 + 8);
                }
                else {
                  __int16 v1033 = 0;
                }
                v890 = sub_1CD7F3564(v1028, (const char *)0xDE, (uint64_t)v3793, v1030, v1031, v887, *(void **)(v886 + 8), v1033);
                uint64_t v891 = v3030;
                uint64_t v888 = *(void *)(a3 + 16);
                uint64_t v3031 = *(void *)(v178 + 32);
                uint64_t v892 = *(void *)(v3031 + 40);
                uint64_t v893 = *(void *)(v3031 + 48);
              }
              uint64_t v894 = *(void *)(v888 + 832);
              if (v894) {
                LOWORD(v894) = *(_WORD *)(v894 + 8);
              }
              v895 = sub_1CCFDED5C(v888, 212, (const llvm::APInt *)v3793, v183, v182, (uint64_t)v890, v891, a8, v892, v893, v894);
            }
            else
            {
              if (v184 != 215) {
                goto LABEL_1322;
              }
              v700 = *(unsigned int **)(v178 + 32);
              uint64_t v701 = *(void *)v700;
              if (*(_WORD *)(*(void *)v700 + 24) == 222)
              {
                v702 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v703 = *(void *)(v701 + 32);
                __int16 v704 = *(uint64_t **)v703;
                unsigned __int8 v705 = *(void **)(v703 + 8);
              }
              else
              {
                v1992 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v1993 = *(void *)(v701 + 40) + 16 * v700[2];
                v1994 = (void *)*((void *)v700 + 1);
                uint64_t v1995 = *((void *)v1992 + 104);
                if (v1995) {
                  __int16 v1996 = *(_WORD *)(v1995 + 8);
                }
                else {
                  __int16 v1996 = 0;
                }
                __int16 v704 = sub_1CD7F3564(v1992, (const char *)0xDE, (uint64_t)v3793, *(llvm **)v1993, *(void *)(v1993 + 8), v701, v1994, v1996);
                unsigned __int8 v705 = v2275;
                v702 = *(llvm::APFloatBase **)(a3 + 16);
              }
              uint64_t v2276 = *((void *)v702 + 104);
              if (v2276) {
                __int16 v2277 = *(_WORD *)(v2276 + 8);
              }
              else {
                __int16 v2277 = 0;
              }
              v895 = sub_1CD7F3564(v702, (const char *)0xD7, (uint64_t)v3793, v183, v182, (uint64_t)v704, v705, v2277);
            }
            char v897 = 0;
            *(void *)&long long v3791 = v895;
            *((void *)&v3791 + 1) = v896;
            goto LABEL_1323;
          case 0xDF:
            int v161 = *(uint64_t **)(v8 + 32);
            uint64_t v162 = *v161;
            unsigned int v163 = *((_DWORD *)v161 + 2);
            unsigned int v164 = *((_DWORD *)v161 + 3);
            uint64_t v165 = *(void **)(v8 + 64);
            v3793[0] = v165;
            if (v165)
            {
              llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v165, 2);
              int v12 = *(_DWORD *)(v8 + 60);
            }
            LODWORD(v3793[1]) = v12;
            if (*(int *)(a3 + 8) < 2) {
              goto LABEL_163;
            }
            uint64_t v546 = *(void *)(v8 + 40);
            v548 = *(llvm **)v546;
            uint64_t v547 = *(void *)(v546 + 8);
            int v549 = *(unsigned __int16 *)(v162 + 24);
            if (v549 != 215)
            {
              if (v549 != 212)
              {
                if (v549 == 98)
                {
                  uint64_t v550 = *(void *)(v162 + 48);
                  if (v550)
                  {
                    int v551 = 1;
                    do
                    {
                      if (*(_DWORD *)(v550 + 8) == v163)
                      {
                        if (!v551) {
                          goto LABEL_163;
                        }
                        --v551;
                      }
                      uint64_t v550 = *(void *)(v550 + 32);
                    }
                    while (v550);
                    if (!v551)
                    {
                      uint64_t v552 = *(uint64_t ***)(v162 + 32);
                      uint64_t v554 = *v552;
                      unint64_t v553 = (unint64_t)v552[1];
                      uint64_t v556 = v552[5];
                      unint64_t v555 = (unint64_t)v552[6];
                      if (*((_WORD *)*v552 + 12) != 223)
                      {
                        v2395 = *(llvm::APFloatBase **)(a3 + 16);
                        uint64_t v2396 = *((void *)v2395 + 104);
                        if (v2396) {
                          __int16 v2397 = *(_WORD *)(v2396 + 8);
                        }
                        else {
                          __int16 v2397 = 0;
                        }
                        uint64_t v554 = sub_1CD7F3564(v2395, (const char *)0xDF, (uint64_t)v3793, v548, v547, (uint64_t)v554, (void *)v553, v2397);
                        unint64_t v553 = v553 & 0xFFFFFFFF00000000 | v2769;
                      }
                      if (*((_WORD *)v556 + 12) != 223)
                      {
                        v2398 = *(llvm::APFloatBase **)(a3 + 16);
                        uint64_t v2399 = *((void *)v2398 + 104);
                        if (v2399) {
                          __int16 v2400 = *(_WORD *)(v2399 + 8);
                        }
                        else {
                          __int16 v2400 = 0;
                        }
                        uint64_t v556 = sub_1CD7F3564(v2398, (const char *)0xDF, (uint64_t)v3793, v548, v547, (uint64_t)v556, (void *)v555, v2400);
                        unint64_t v555 = v555 & 0xFFFFFFFF00000000 | v2770;
                      }
                      uint64_t v557 = sub_1CCFDED5C(*(void *)(a3 + 16), 98, (const llvm::APInt *)v3793, v548, v547, (uint64_t)v554, v553, a8, (uint64_t)v556, v555, *(_WORD *)(v162 + 72));
                      goto LABEL_1915;
                    }
                  }
                }
                goto LABEL_163;
              }
              v862 = *(void ***)(v162 + 32);
              uint64_t v863 = (uint64_t)*v862;
              if (*((_WORD *)*v862 + 12) != 223)
              {
                if ((sub_1CB8C5A98(v8) & 1) == 0)
                {
                  uint64_t v864 = *(void *)(v162 + 48);
                  if (v864)
                  {
                    int v865 = 1;
                    do
                    {
                      if (*(_DWORD *)(v864 + 8) == v163)
                      {
                        if (!v865) {
                          goto LABEL_163;
                        }
                        --v865;
                      }
                      uint64_t v864 = *(void *)(v864 + 32);
                    }
                    while (v864);
                    if (!v865)
                    {
                      v866 = *(llvm::APFloatBase **)(a3 + 16);
                      uint64_t v867 = *(void *)(v863 + 40) + 16 * *((unsigned int *)v862 + 2);
                      v868 = *(llvm **)v867;
                      uint64_t v869 = *(void *)(v867 + 8);
                      uint64_t v870 = *((void *)v866 + 104);
                      if (v870) {
                        __int16 v871 = *(_WORD *)(v870 + 8);
                      }
                      else {
                        __int16 v871 = 0;
                      }
                      v2870 = sub_1CD7F3564(v866, (const char *)0xDF, (uint64_t)v3793, v868, v869, v863, v862[1], v871);
                      uint64_t v2872 = *(void *)(a3 + 16);
                      uint64_t v2873 = *(void *)(v162 + 32);
                      uint64_t v2874 = *(void *)(v2873 + 40);
                      uint64_t v2875 = *(void *)(v2873 + 48);
                      uint64_t v2876 = *(void *)(v2872 + 832);
                      if (v2876) {
                        LOWORD(v2876) = *(_WORD *)(v2876 + 8);
                      }
                      uint64_t v557 = sub_1CCFDED5C(v2872, 212, (const llvm::APInt *)v3793, v548, v547, (uint64_t)v2870, v2869, v2871, v2874, v2875, v2876);
                      goto LABEL_1915;
                    }
                  }
                }
LABEL_163:
                long long v166 = v3793[0];
                if (!v3793[0]) {
                  goto LABEL_3081;
                }
                int v167 = *(unsigned __int8 *)v3793[0];
                if ((v167 - 4) <= 0x1E)
                {
                  if ((*((unsigned char *)v3793[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3793[0] + 3)) {
                    goto LABEL_3081;
                  }
                  uint64_t v168 = *((void *)v3793[0] + 2);
                  if ((v168 & 4) == 0) {
                    goto LABEL_3081;
                  }
                  unint64_t v169 = v168 & 0xFFFFFFFFFFFFFFF8;
                  if (!v169) {
                    goto LABEL_3081;
                  }
LABEL_878:
                  *(void *)&long long v3815 = v3793;
                  uint64_t v797 = v169 + 16;
                  v798 = (void **)&v3815;
                  goto LABEL_879;
                }
                if ((v167 - 3) >= 0xFFFFFFFE) {
                  v796 = v3793[0];
                }
                else {
                  v796 = 0;
                }
                if ((v167 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v169 = (unint64_t)v796 + 8;
                  goto LABEL_878;
                }
LABEL_2273:
                if (v167 == 3) {
                  v166[1] = 0;
                }
                goto LABEL_3081;
              }
LABEL_962:
              *(void *)&long long v3791 = v162;
              *((void *)&v3791 + 1) = __PAIR64__(v164, v163);
LABEL_1916:
              v858 = (unsigned __int8 *)v3793[0];
              if (!v3793[0]) {
                goto LABEL_3082;
              }
              int v859 = *(unsigned __int8 *)v3793[0];
              if ((v859 - 4) <= 0x1E)
              {
                if ((*((unsigned char *)v3793[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3793[0] + 3)) {
                  goto LABEL_3082;
                }
                uint64_t v1763 = *((void *)v3793[0] + 2);
                if ((v1763 & 4) == 0) {
                  goto LABEL_3082;
                }
                unint64_t v1764 = v1763 & 0xFFFFFFFFFFFFFFF8;
                if (!v1764) {
                  goto LABEL_3082;
                }
                goto LABEL_1928;
              }
              if ((v859 - 3) >= 0xFFFFFFFE) {
                v1765 = v3793[0];
              }
              else {
                v1765 = 0;
              }
              if ((v859 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v1764 = (unint64_t)v1765 + 8;
LABEL_1928:
                *(void *)&long long v3815 = v3793;
                uint64_t v1524 = v1764 + 16;
                v1525 = &v3815;
                goto LABEL_1929;
              }
LABEL_3395:
              if (v859 == 3) {
                *((void *)v858 + 1) = 0;
              }
              goto LABEL_3082;
            }
            v872 = *(unsigned int **)(v162 + 32);
            uint64_t v873 = *(void *)v872;
            if (*(_WORD *)(*(void *)v872 + 24) == 223) {
              goto LABEL_962;
            }
            v1619 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1620 = *(void *)(v873 + 40) + 16 * v872[2];
            v1621 = (void *)*((void *)v872 + 1);
            uint64_t v1622 = *((void *)v1619 + 104);
            if (v1622) {
              __int16 v1623 = *(_WORD *)(v1622 + 8);
            }
            else {
              __int16 v1623 = 0;
            }
            uint64_t v213 = sub_1CD7F3564(v1619, (const char *)0xDF, (uint64_t)v3793, *(llvm **)v1620, *(void *)(v1620 + 8), v873, v1621, v1623);
            int v214 = v1924;
            v1173 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1925 = *((void *)v1173 + 104);
            if (v1925) {
              __int16 v216 = *(_WORD *)(v1925 + 8);
            }
            else {
              __int16 v216 = 0;
            }
            uint64_t v1174 = 215;
            uint64_t v210 = (uint64_t)v548;
            uint64_t v211 = v547;
            break;
          case 0xE0:
            uint64_t v149 = **(void **)(v8 + 32);
            int v150 = *(unsigned __int16 *)(v149 + 24);
            if (v150 != 36 && v150 != 12) {
              goto LABEL_3081;
            }
            uint64_t v152 = *(void *)(v149 + 80);
            unsigned int v154 = *(void **)(v152 + 32);
            unsigned int v153 = (const llvm::detail::DoubleAPFloat *)(v152 + 32);
            if (v154 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v153);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v153);
            }
            llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E31C, 1, &v3815);
            double v155 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3793);
            uint64_t v156 = *(void *)(a3 + 16);
            uint64_t v157 = *(uint64_t **)(v8 + 40);
            uint64_t v158 = *v157;
            uint64_t v159 = v157[1];
            double v160 = sqrt(v155);
            goto LABEL_783;
          default:
            goto LABEL_3081;
        }
LABEL_1914:
        uint64_t v557 = sub_1CD7F3564(v1173, (const char *)v1174, (uint64_t)v3793, (llvm *)v210, v211, (uint64_t)v213, v214, v216);
LABEL_1915:
        *(void *)&long long v3791 = v557;
        *((void *)&v3791 + 1) = v558;
        goto LABEL_1916;
      }
      if (*(unsigned __int16 *)(v8 + 24) <= 0xFCu)
      {
        if (v13 == 231)
        {
          uint64_t v217 = **(void **)(v8 + 32);
          int v218 = *(unsigned __int16 *)(v217 + 24);
          if (v218 != 36 && v218 != 12) {
            goto LABEL_3081;
          }
          __int16 v220 = *(uint64_t **)(v8 + 40);
          uint64_t v64 = *v220;
          uint64_t v65 = v220[1];
          uint64_t v221 = *(void *)(v217 + 80);
          uint64_t v223 = *(void **)(v221 + 32);
          unsigned int v222 = (const llvm::detail::DoubleAPFloat *)(v221 + 32);
          if (v223 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v222);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v222);
          }
          llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E31C, 1, &v3815);
          double v224 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3793);
          uint64_t v70 = *(void *)(a3 + 16);
          double v71 = log2(v224);
        }
        else
        {
          if (v13 != 234) {
            goto LABEL_3081;
          }
          uint64_t v60 = **(void **)(v8 + 32);
          int v61 = *(unsigned __int16 *)(v60 + 24);
          if (v61 != 36 && v61 != 12) {
            goto LABEL_3081;
          }
          uint64_t v63 = *(uint64_t **)(v8 + 40);
          uint64_t v64 = *v63;
          uint64_t v65 = v63[1];
          uint64_t v66 = *(void *)(v60 + 80);
          int v68 = *(void **)(v66 + 32);
          char v67 = (const llvm::detail::DoubleAPFloat *)(v66 + 32);
          if (v68 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v67);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v67);
          }
          llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E31C, 1, &v3815);
          double v69 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3793);
          uint64_t v70 = *(void *)(a3 + 16);
          double v71 = exp2(v69);
        }
        *(void *)&long long v3791 = sub_1CD7ECDC4(v70, (uint64_t)&v3789, v64, v65, 0, v71);
        *((void *)&v3791 + 1) = v225;
        uint64_t v132 = v3793[1];
        if (v3793[1] == &unk_1CFB2E344)
        {
LABEL_3817:
          sub_1CB845718((uint64_t *)&v3793[2]);
          goto LABEL_3082;
        }
        goto LABEL_1035;
      }
      if (v13 != 253)
      {
        if (v13 != 254 || *(_DWORD *)(a3 + 8)) {
          goto LABEL_3081;
        }
        uint64_t v94 = *(void **)(v8 + 32);
        uint64_t v95 = v94[15];
        int v96 = *(unsigned __int16 *)(v95 + 24);
        if (v96 == 35 || v96 == 11)
        {
          uint64_t v98 = *(void *)(v95 + 80);
          int v99 = (void *)(v98 + 24);
          if (*(_DWORD *)(v98 + 32) >= 0x41u) {
            int v99 = (void *)*v99;
          }
          if (*v99) {
            goto LABEL_3081;
          }
        }
        uint64_t v100 = v94[10];
        uint64_t v101 = v94[11];
        unsigned int v102 = *(unsigned __int16 *)(v100 + 24);
        BOOL v273 = v102 > 0x26;
        uint64_t v103 = (1 << v102) & 0x6000006000;
        if (!v273 && v103 != 0)
        {
          uint64_t v1079 = (uint64_t)sub_1CD3DC75C(a1, v100, *(llvm::APFloatBase **)(a3 + 16));
          if (!(v1079 | v1080)) {
            goto LABEL_3081;
          }
          sub_1CD801F28(*(void *)(a3 + 16), v100, v101, v1079, v1080);
          uint64_t v1081 = *(void *)(v8 + 32);
          uint64_t v100 = *(void *)(v1081 + 80);
          LODWORD(v101) = *(_DWORD *)(v1081 + 88);
        }
        if (*(unsigned __int8 *)(*(void *)(v100 + 40) + 16 * v101) == 174)
        {
LABEL_3081:
          long long v3791 = 0uLL;
          goto LABEL_3082;
        }
LABEL_106:
        uint64_t v29 = (uint64_t)sub_1CB8D97D0(a1, v8, (uint64_t *)a3);
        goto LABEL_2210;
      }
      if (*(_DWORD *)(a3 + 8)) {
        goto LABEL_3081;
      }
      uint64_t v226 = *(void *)(v8 + 32);
      uint64_t v227 = *(void *)(v226 + 80);
      int v228 = *(unsigned __int16 *)(v227 + 24);
      if (v228 == 35 || v228 == 11)
      {
        uint64_t v230 = *(void *)(v227 + 80);
        uint64_t v231 = (void *)(v230 + 24);
        if (*(_DWORD *)(v230 + 32) >= 0x41u) {
          uint64_t v231 = (void *)*v231;
        }
        if (*v231) {
          goto LABEL_3081;
        }
      }
      uint64_t v232 = *(void *)(v226 + 40);
      uint64_t v233 = *(unsigned int *)(v226 + 48);
      uint64_t v234 = *(void *)(v232 + 40) + 16 * v233;
      uint64_t v235 = *(llvm **)v234;
      uint64_t v236 = *(void *)(v234 + 8);
      LODWORD(v234) = *(unsigned __int16 *)(v232 + 24);
      BOOL v273 = v234 > 0x26;
      uint64_t v237 = (1 << v234) & 0x6000006000;
      if (v273 || v237 == 0) {
        uint64_t v239 = 0;
      }
      else {
        uint64_t v239 = v232;
      }
      unsigned int v241 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, v235, v236, 0, 0);
      unint64_t v243 = v242;
      v3793[0] = &v3793[2];
      v3793[1] = (void *)0x100000000;
      unsigned int v244 = *(unsigned __int16 *)(v232 + 24);
      if (v239)
      {
        if (v244 == 56)
        {
          uint64_t v245 = *(void **)(v232 + 32);
          uint64_t v246 = *v245;
          unsigned int v247 = *(unsigned __int16 *)(*v245 + 24);
          BOOL v273 = v247 > 0x26;
          uint64_t v248 = (1 << v247) & 0x6000006000;
          if (!v273 && v248 != 0)
          {
            uint64_t v250 = v245[5];
            if (*(_WORD *)(v250 + 24) == 11)
            {
              uint64_t v251 = *(void *)(v232 + 40) + 16 * v233;
              uint64_t v252 = *(llvm **)v251;
              uint64_t v253 = *(void *)(v251 + 8);
              uint64_t v254 = *(void *)(v246 + 80);
              uint64_t v255 = *(void *)(v246 + 88);
              uint64_t v256 = *(void *)(v250 + 80);
              unsigned int v257 = *(_DWORD *)(v256 + 32);
              if (v257 > 0x40) {
                uint64_t v258 = **(void **)(v256 + 24);
              }
              else {
                uint64_t v258 = (uint64_t)(*(void *)(v256 + 24) << -(char)v257) >> -(char)v257;
              }
              sub_1CD7ECF00(*(void *)(a3 + 16), v254, (uint64_t)&v3789, v252, v253, v258 + v255, 0, 0);
            }
          }
        }
      }
      else
      {
        unsigned int v1460 = 0;
        do
        {
          if (v244 != 56)
          {
            unsigned int v241 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            uint64_t v239 = 0;
            unint64_t v243 = v243 & 0xFFFFFFFF00000000 | v3152;
            goto LABEL_2284;
          }
          if (v1460 >= HIDWORD(v3793[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((_OWORD *)v3793[0] + v1460) = *(_OWORD *)(*(void *)(v232 + 32) + 40);
          unsigned int v1460 = ++LODWORD(v3793[1]);
          uint64_t v232 = **(void **)(v232 + 32);
          unsigned int v244 = *(unsigned __int16 *)(v232 + 24);
        }
        while (v244 > 0x26 || ((1 << v244) & 0x6000006000) == 0);
        if (v1460)
        {
          v1494 = (uint64_t *)v3793[0];
          v1495 = (uint64_t *)((char *)v3793[0] + 16 * v1460);
          do
          {
            uint64_t v1496 = *(void *)(a3 + 16);
            uint64_t v1497 = *(void *)(v1496 + 832);
            if (v1497) {
              LOWORD(v1497) = *(_WORD *)(v1497 + 8);
            }
            uint64_t v1498 = *v1494;
            uint64_t v1499 = v1494[1];
            v1494 += 2;
            unsigned int v241 = sub_1CCFDED5C(v1496, 56, (const llvm::APInt *)&v3789, v235, v236, (uint64_t)v241, v243, v240, v1498, v1499, v1497);
            unint64_t v243 = v243 & 0xFFFFFFFF00000000 | v1500;
          }
          while (v1494 != v1495);
        }
        uint64_t v239 = v232;
      }
LABEL_2284:
      int v2162 = *(_DWORD *)(*(void *)(v8 + 96) + 16);
      if (v2162 == 3 || v2162 == 64)
      {
        if (v239)
        {
          if (!v241 || (int v2163 = *((unsigned __int16 *)v241 + 12), v2163 == 11) || v2163 == 35)
          {
            int v2164 = *(_DWORD *)(**(void **)(v239 + 80) + 8) >> 8;
            if (v2164 != 3)
            {
              if (v2164 == 64)
              {
                char v2165 = *(unsigned char *)(*(void *)(a1 + 184296) + 281);
                v2166 = (uint64_t **)a3;
                uint64_t v2167 = v239;
                uint64_t v2168 = (uint64_t)v241;
                v2169 = (void *)v243;
                uint64_t v2170 = v8;
                uint64_t v2171 = 395;
LABEL_2331:
                sub_1CB8D86C0(v2166, v2167, v2168, v2169, v2170, v2165, (const char *)v2171);
              }
LABEL_2332:
              char v897 = 1;
LABEL_2333:
              if (v3793[0] != &v3793[2]) {
                free(v3793[0]);
              }
              goto LABEL_3080;
            }
            uint64_t v2176 = *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344);
            (*(void (**)(uint64_t))(*(void *)v2176 + 400))(v2176);
            if (v2177 != 17)
            {
              char v2165 = *(unsigned char *)(*(void *)(a1 + 184296) + 281);
              v2166 = (uint64_t **)a3;
              uint64_t v2167 = v239;
              uint64_t v2168 = (uint64_t)v241;
              v2169 = (void *)v243;
              uint64_t v2170 = v8;
              uint64_t v2171 = 396;
              goto LABEL_2331;
            }
            uint64_t v2172 = a1;
            uint64_t v2173 = v8;
            uint64_t v2174 = a3;
LABEL_2295:
            char v897 = 0;
            *(void *)&long long v3791 = sub_1CB8D7D2C(v2172, v2173, v2174);
            *((void *)&v3791 + 1) = v2175;
            goto LABEL_2333;
          }
        }
      }
      else if (*(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(v8 + 32) + 40) + 40) {
                                   + 16 * *(unsigned int *)(*(void *)(v8 + 32) + 48)) == 174)
      }
      {
        goto LABEL_2332;
      }
      uint64_t v2172 = a1;
      uint64_t v2173 = v8;
      uint64_t v2174 = a3;
      goto LABEL_2295;
    }
    switch(*(_WORD *)(v8 + 24))
    {
      case 0x1A7:
        int v496 = *(uint64_t **)(v8 + 40);
        uint64_t v497 = **(void **)(v8 + 32);
        uint64_t v56 = *v496;
        uint64_t v55 = v496[1];
        int v498 = *(unsigned __int16 *)(v497 + 24);
        if (v498 != 36 && v498 != 12)
        {
          int v41 = *(llvm::APFloatBase **)(a3 + 16);
          if ((*(_WORD *)(*(void *)v41 + 1020) & 1) == 0) {
            goto LABEL_3081;
          }
          if (v498 == 423)
          {
            v765 = *(unsigned int **)(v497 + 32);
            goto LABEL_809;
          }
          if (v498 != 224) {
            goto LABEL_3081;
          }
          uint64_t v500 = *(void *)(v497 + 32);
          uint64_t v36 = *(void **)v500;
          uint64_t v38 = *(void **)(v500 + 8);
          uint64_t v501 = *((void *)v41 + 104);
          if (v501) {
            __int16 v39 = *(_WORD *)(v501 + 8);
          }
          else {
            __int16 v39 = 0;
          }
          uint64_t v42 = 424;
          goto LABEL_1976;
        }
        uint64_t v954 = *(void *)(v497 + 80);
        v956 = *(void **)(v954 + 32);
        v955 = (const llvm::detail::DoubleAPFloat *)(v954 + 32);
        if (v956 == &unk_1CFB2E344) {
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v955);
        }
        else {
          llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v955);
        }
        llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E31C, 1, &v3815);
        double v957 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3793);
        *(void *)&long long v3791 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)&v3789, v56, v55, 0, 1.0 / v957);
        *((void *)&v3791 + 1) = v958;
        uint64_t v132 = v3793[1];
        if (v3793[1] == &unk_1CFB2E344) {
          goto LABEL_3817;
        }
        goto LABEL_1035;
      case 0x1A8:
      case 0x1AA:
        unint64_t v44 = *(uint64_t **)(v8 + 32);
        int v45 = *(unsigned __int16 *)(*v44 + 24);
        if (v45 == 36 || v45 == 12)
        {
          uint64_t v737 = *(void *)(*v44 + 80);
          v739 = *(void **)(v737 + 32);
          v738 = (const llvm::detail::DoubleAPFloat *)(v737 + 32);
          if (v739 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v738);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v738);
          }
          llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E31C, 1, &v3815);
          double v160 = 1.0 / sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v3793));
          uint64_t v156 = *(void *)(a3 + 16);
          v740 = *(uint64_t **)(v8 + 40);
          uint64_t v158 = *v740;
          uint64_t v159 = v740[1];
LABEL_783:
          *(void *)&long long v3791 = sub_1CD7ECDC4(v156, (uint64_t)&v3789, v158, v159, 0, v160);
          *((void *)&v3791 + 1) = v741;
          uint64_t v132 = v3793[1];
          if (v3793[1] != &unk_1CFB2E344) {
            goto LABEL_1035;
          }
          goto LABEL_3817;
        }
        uint64_t v47 = *(unsigned __int8 **)(v8 + 40);
        uint64_t v48 = *v47;
        *(_OWORD *)v3793 = *(_OWORD *)v44;
        if (v13 == 426)
        {
          uint64_t v959 = *(void *)(a3 + 16);
          uint64_t v960 = *(void *)(v959 + 832);
          __int16 v961 = v960 ? *(_WORD *)(v960 + 8) : 0;
          v1096 = sub_1CD801794(v959, 0x1A8u, (uint64_t)v47, *(unsigned __int16 *)(v8 + 58), v44, 1, v961);
          if (v1096) {
            goto LABEL_2094;
          }
        }
        if (v48 != 9) {
          goto LABEL_3081;
        }
        uint64_t v49 = *(void **)(a3 + 16);
        if ((*(_WORD *)(*v49 + 1020) & 1) == 0) {
          goto LABEL_3081;
        }
        if (*((_WORD *)v3793[0] + 12) == 212)
        {
          uint64_t v50 = *((void *)v3793[0] + 4);
          int v51 = *(_DWORD *)(v50 + 8);
          v3793[0] = *(void **)v50;
          LODWORD(v3793[1]) = v51;
        }
        else
        {
          uint64_t v1307 = v49[104];
          if (v1307) {
            __int16 v1308 = *(_WORD *)(v1307 + 8);
          }
          else {
            __int16 v1308 = 0;
          }
          v3793[0] = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xD7, (uint64_t)&v3789, (llvm *)0xA, 0, (uint64_t)v3793[0], v3793[1], v1308);
          LODWORD(v3793[1]) = v1557;
          uint64_t v49 = *(void **)(a3 + 16);
        }
        unsigned __int16 v1558 = *(_WORD *)(v8 + 24);
        uint64_t v1559 = sub_1CD7FFC1C((llvm *)0xA, 0);
        __int16 v1560 = 0;
        uint64_t v1561 = v49[104];
        if (v1561) {
          __int16 v1560 = *(_WORD *)(v1561 + 8);
        }
        v1562 = sub_1CD801794((uint64_t)v49, v1558, v1559, 1, (uint64_t *)v3793, 1, v1560);
        if (v1562)
        {
          uint64_t v2154 = (uint64_t)v1562;
          uint64_t v2155 = *(void *)(a3 + 16);
          v2156 = sub_1CD7EBF14(v2155, 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          uint64_t v2159 = *(void *)(v2155 + 832);
          if (v2159) {
            LOWORD(v2159) = *(_WORD *)(v2159 + 8);
          }
          uint64_t v29 = (uint64_t)sub_1CCFDED5C(v2155, 212, (const llvm::APInt *)&v3789, (llvm *)9, 0, v2154, 0, v2158, (uint64_t)v2156, v2157, v2159);
          goto LABEL_2210;
        }
        if (*(_WORD *)(v8 + 24) == 424)
        {
          uint64_t v1563 = *(void *)(a3 + 16);
          uint64_t v1564 = sub_1CD7FFC1C((llvm *)0xA, 0);
          __int16 v1565 = 0;
          uint64_t v1566 = *(void *)(v1563 + 832);
          if (v1566) {
            __int16 v1565 = *(_WORD *)(v1566 + 8);
          }
          v1567 = sub_1CD801794(v1563, 0x1AAu, v1564, 1, (uint64_t *)v3793, 1, v1565);
          if (v1567)
          {
            uint64_t v1568 = (uint64_t)v1567;
            v1569 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1570 = *((void *)v1569 + 104);
            if (v1570) {
              __int16 v1571 = *(_WORD *)(v1570 + 8);
            }
            else {
              __int16 v1571 = 0;
            }
            uint64_t v503 = sub_1CD7F3564(v1569, (const char *)0x1A8, (uint64_t)&v3789, (llvm *)0xA, 0, (uint64_t)v3793[0], v3793[1], v1571);
            uint64_t v518 = v3449;
            sub_1CD801F28(*(void *)(a3 + 16), v1568, 0, (uint64_t)v503, v3449);
            uint64_t v3450 = *(void *)(a3 + 16);
            goto LABEL_3453;
          }
        }
        goto LABEL_3081;
      case 0x1A9:
      case 0x1AD:
      case 0x1AE:
      case 0x1AF:
      case 0x1B1:
      case 0x1B3:
      case 0x1B6:
      case 0x1B7:
      case 0x1B8:
      case 0x1B9:
      case 0x1BA:
      case 0x1BB:
      case 0x1BC:
      case 0x1BD:
        goto LABEL_3081;
      case 0x1AB:
        int v502 = *(uint64_t ***)(v8 + 32);
        uint64_t v503 = *v502;
        int v511 = *((unsigned __int16 *)*v502 + 12);
        if (v511 == 35 || v511 == 11) {
          uint64_t v513 = *v502;
        }
        else {
          uint64_t v513 = 0;
        }
        uint64_t v514 = v502[5];
        int v515 = *((unsigned __int16 *)v514 + 12);
        if (v515 == 11 || v515 == 35)
        {
          if (!v513)
          {
            uint64_t v510 = v514[10];
            goto LABEL_512;
          }
          uint64_t v1181 = v513[10];
          v1182 = (void *)(v1181 + 24);
          if (*(_DWORD *)(v1181 + 32) >= 0x41u) {
            v1182 = (void *)*v1182;
          }
          v1183 = (void *)*v1182;
          uint64_t v1184 = v514[10];
          v1185 = (void *)(v1184 + 24);
          if (*(_DWORD *)(v1184 + 32) >= 0x41u) {
            v1185 = (void *)*v1185;
          }
          uint64_t v476 = *(void *)(a3 + 16);
          unint64_t v1180 = (unint64_t)v1183 + *v1185;
          goto LABEL_1298;
        }
        if (!v513) {
          goto LABEL_3081;
        }
        uint64_t v522 = *(void *)(a3 + 16);
        uint64_t v526 = (uint64_t)v502[6];
        uint64_t v671 = (uint64_t)v502[1];
        uint64_t v672 = *(void *)(v522 + 832);
        if (v672) {
          LOWORD(v672) = *(_WORD *)(v672 + 8);
        }
        uint64_t v3652 = v671;
        __int16 v3657 = v672;
        uint64_t v3647 = (uint64_t)v503;
        uint64_t v523 = 427;
        goto LABEL_706;
      case 0x1AC:
        int v502 = *(uint64_t ***)(v8 + 32);
        uint64_t v503 = *v502;
        int v504 = *((unsigned __int16 *)*v502 + 12);
        if (v504 == 35 || v504 == 11) {
          uint64_t v506 = *v502;
        }
        else {
          uint64_t v506 = 0;
        }
        uint64_t v507 = v502[5];
        int v508 = *((unsigned __int16 *)v507 + 12);
        if (v508 != 35 && v508 != 11) {
          goto LABEL_3081;
        }
        if (v506)
        {
          uint64_t v1175 = v506[10];
          v1176 = (void *)(v1175 + 24);
          if (*(_DWORD *)(v1175 + 32) >= 0x41u) {
            v1176 = (void *)*v1176;
          }
          v1177 = (void *)*v1176;
          uint64_t v1178 = v507[10];
          v1179 = (void *)(v1178 + 24);
          if (*(_DWORD *)(v1178 + 32) >= 0x41u) {
            v1179 = (void *)*v1179;
          }
          uint64_t v476 = *(void *)(a3 + 16);
          unint64_t v1180 = (unint64_t)v1177 - *v1179;
LABEL_1298:
          uint64_t v478 = v1180 >> 16;
          goto LABEL_1310;
        }
        uint64_t v510 = v507[10];
LABEL_512:
        uint64_t v516 = (void *)(v510 + 24);
        if (*(_DWORD *)(v510 + 32) >= 0x41u) {
          uint64_t v516 = (void *)*v516;
        }
        if (!*v516)
        {
          uint64_t v517 = *(void *)(a3 + 16);
          uint64_t v518 = (uint64_t)v502[1];
          uint64_t v519 = sub_1CD7EBF14(v517, 16, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          uint64_t v521 = *(void *)(v517 + 832);
          if (v521) {
            LOWORD(v521) = *(_WORD *)(v521 + 8);
          }
          uint64_t v3652 = v520;
          __int16 v3657 = v521;
          uint64_t v3647 = (uint64_t)v519;
          uint64_t v522 = v517;
          uint64_t v523 = 177;
          uint64_t v524 = 5;
          goto LABEL_518;
        }
        goto LABEL_3081;
      case 0x1B0:
      case 0x1B2:
        uint64_t v133 = *(uint64_t **)(v8 + 32);
        uint64_t v134 = *v133;
        int v135 = *(unsigned __int16 *)(*v133 + 24);
        if (v135 == 35 || v135 == 11) {
          uint64_t v137 = *v133;
        }
        else {
          uint64_t v137 = 0;
        }
        uint64_t v138 = v133[5];
        int v139 = *(unsigned __int16 *)(v138 + 24);
        if (v139 == 35 || v139 == 11) {
          uint64_t v141 = v133[5];
        }
        else {
          uint64_t v141 = 0;
        }
        uint64_t v142 = v133[10];
        int v143 = *(unsigned __int16 *)(v142 + 24);
        if (v143 == 11 || v143 == 35)
        {
          BOOL v144 = v13 == 434;
          BOOL v145 = v141 != 0;
          if (v137 && v141)
          {
            uint64_t v146 = *(void *)(v137 + 80);
            unsigned int v147 = *(_DWORD *)(v146 + 32);
            if (v147 > 0x40) {
              uint64_t v148 = **(void **)(v146 + 24);
            }
            else {
              uint64_t v148 = (uint64_t)(*(void *)(v146 + 24) << -(char)v147) >> -(char)v147;
            }
            uint64_t v1186 = *(void *)(v141 + 80);
            unsigned int v1187 = *(_DWORD *)(v1186 + 32);
            if (v1187 > 0x40) {
              uint64_t v1188 = **(void **)(v1186 + 24);
            }
            else {
              uint64_t v1188 = (uint64_t)(*(void *)(v1186 + 24) << -(char)v1187) >> -(char)v1187;
            }
            uint64_t v1189 = *(void *)(v142 + 80);
            v1190 = (uint64_t *)(v1189 + 24);
            unsigned int v1191 = *(_DWORD *)(v1189 + 32);
            if (v13 == 434)
            {
              if (v1191 <= 0x40)
              {
                uint64_t v1192 = *v1190 << -(char)v1191 >> -(char)v1191;
LABEL_1309:
                uint64_t v476 = *(void *)(a3 + 16);
                uint64_t v478 = (v1192 + v1188 * v148) >> 16;
                goto LABEL_1310;
              }
            }
            else if (v1191 < 0x41)
            {
LABEL_1308:
              uint64_t v1192 = *v1190;
              goto LABEL_1309;
            }
            v1190 = (uint64_t *)*v1190;
            goto LABEL_1308;
          }
        }
        else
        {
          BOOL v144 = v13 == 434;
          BOOL v145 = v141 != 0;
        }
        if (v137 && !v145)
        {
          v949 = *(void **)(a3 + 16);
          uint64_t v950 = v133[6];
          uint64_t v951 = v133[1];
          uint64_t v952 = v133[11];
          uint64_t v953 = v949[104];
          if (v953) {
            LOWORD(v953) = *(_WORD *)(v953 + 8);
          }
          uint64_t v29 = (uint64_t)sub_1CD7F5D38(v949, (const char *)v13, (const llvm::APInt *)&v3789, (llvm *)5, 0, v138, v950, a8, v134, v951, v142, v952, SHIDWORD(v952), v953);
          goto LABEL_2210;
        }
        if (v145)
        {
          uint64_t v559 = *(void *)(v141 + 80);
          uint64_t v560 = (void *)(v559 + 24);
          if (*(_DWORD *)(v559 + 32) >= 0x41u) {
            uint64_t v560 = (void *)*v560;
          }
          if (!*v560)
          {
            uint64_t v561 = *(void *)(a3 + 16);
            if (v144) {
              uint64_t v562 = 176;
            }
            else {
              uint64_t v562 = 177;
            }
            uint64_t v563 = v133[11];
            uint64_t v564 = sub_1CD7EBF14(*(void *)(a3 + 16), 16, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            uint64_t v567 = *(void *)(v561 + 832);
            if (v567) {
              LOWORD(v567) = *(_WORD *)(v567 + 8);
            }
            uint64_t v29 = (uint64_t)sub_1CCFDED5C(v561, v562, (const llvm::APInt *)&v3789, (llvm *)5, 0, v142, v563, v566, (uint64_t)v564, v565, v567);
            goto LABEL_2210;
          }
        }
        goto LABEL_3081;
      case 0x1B4:
        __int16 v527 = *(void **)(v8 + 32);
        uint64_t v528 = v527[5];
        uint64_t v529 = v527[10];
        uint64_t v530 = *v527;
        if (*(_WORD *)(*v527 + 24) != 146
          || ((int v531 = *(unsigned __int16 *)(v529 + 24), v531 != 35) ? (v532 = v531 == 11) : (v532 = 1), !v532))
        {
          int v533 = *(unsigned __int16 *)(v528 + 24);
          if (v533 != 35 && v533 != 11) {
            goto LABEL_3081;
          }
          int v535 = *(unsigned __int16 *)(v529 + 24);
          if (v535 != 35 && v535 != 11) {
            goto LABEL_3081;
          }
          long long v3815 = *(_OWORD *)*(void *)(v8 + 40);
          unsigned int v537 = sub_1CD3DB440((llvm::EVT *)&v3815, (const char *)v13);
          uint64_t v538 = *(void *)(v529 + 80);
          uint64_t v539 = (void *)(v538 + 24);
          if (*(_DWORD *)(v538 + 32) >= 0x41u) {
            uint64_t v539 = (void *)*v539;
          }
          uint64_t v540 = (void *)*v539;
          DWORD2(v3813) = v537;
          if (v537 > 0x40) {
            llvm::APInt::initSlowCase((llvm::APInt *)&v3813);
          }
          *(void *)&long long v3813 = 1 << (char)v540;
          sub_1CCFCE670(*(void *)(a3 + 16), **(void **)(v8 + 32), *(void *)(*(void *)(v8 + 32) + 8), (unsigned int *)&v3813, 0, (uint64_t)v3793);
          unsigned int v541 = v3793[1];
          if (LODWORD(v3793[1]) > 0x40)
          {
            __int32 v543 = 0;
            unint64_t v3573 = ((unint64_t)LODWORD(v3793[1]) + 63) >> 6;
            v3574 = (int8x8_t *)v3793[0];
            do
            {
              int8x8_t v3575 = *v3574++;
              uint8x8_t v3576 = (uint8x8_t)vcnt_s8(v3575);
              v3576.i16[0] = vaddlv_u8(v3576);
              v543 += v3576.i32[0];
              --v3573;
            }
            while (v3573);
          }
          else
          {
            uint8x8_t v542 = (uint8x8_t)vcnt_s8((int8x8_t)v3793[0]);
            v542.i16[0] = vaddlv_u8(v542);
            __int32 v543 = v542.i32[0];
          }
          if (v3794 > 0x40)
          {
            uint64_t v3577 = 0;
            int v3578 = 0;
            v3579 = v3793[2];
            do
            {
              uint8x8_t v3580 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)v3793[2] + v3577));
              v3580.i16[0] = vaddlv_u8(v3580);
              v3578 += v3580.i32[0];
              v3577 += 8;
            }
            while (((((unint64_t)v3794 + 63) >> 3) & 0x3FFFFFF8) != v3577);
            if (v3578 + v543 == LODWORD(v3793[1])
              && !memcmp(v3793[2], *(const void **)(*(void *)(v528 + 80) + 24), (((unint64_t)v3794 + 63) >> 3) & 0x3FFFFFF8))
            {
              long long v3791 = *(_OWORD *)*(void *)(v8 + 32);
              MEMORY[0x1D25D9CB0](v3579, 0x1000C8000313F17);
              unsigned int v541 = v3793[1];
              goto LABEL_544;
            }
            MEMORY[0x1D25D9CB0](v3579, 0x1000C8000313F17);
            unsigned int v541 = v3793[1];
          }
          else
          {
            uint8x8_t v544 = (uint8x8_t)vcnt_s8((int8x8_t)v3793[2]);
            v544.i16[0] = vaddlv_u8(v544);
            if (v543 + v544.i32[0] == LODWORD(v3793[1]) && v3793[2] == *(void **)(*(void *)(v528 + 80) + 24))
            {
              long long v3791 = *(_OWORD *)*(void *)(v8 + 32);
LABEL_544:
              if (v541 >= 0x41 && v3793[0]) {
                MEMORY[0x1D25D9CB0](v3793[0], 0x1000C8000313F17);
              }
              if (DWORD2(v3813) < 0x41) {
                goto LABEL_3082;
              }
              __int16 v545 = (void *)v3813;
              if (!(void)v3813) {
                goto LABEL_3082;
              }
              goto LABEL_547;
            }
          }
          if (v541 >= 0x41 && v3793[0]) {
            MEMORY[0x1D25D9CB0](v3793[0], 0x1000C8000313F17);
          }
          if (DWORD2(v3813) >= 0x41 && (void)v3813) {
            MEMORY[0x1D25D9CB0](v3813, 0x1000C8000313F17);
          }
          goto LABEL_3081;
        }
        uint64_t v1082 = v527[6];
        uint64_t v1083 = *(void *)(v529 + 80);
        v1084 = (unsigned int *)(v1083 + 24);
        if (*(_DWORD *)(v1083 + 32) >= 0x41u) {
          v1084 = *(unsigned int **)v1084;
        }
        uint64_t v1085 = *v1084;
        v3793[0] = &v3793[2];
        v3793[1] = (void *)0x400000000;
        if (*(_WORD *)(v530 + 56))
        {
          uint64_t v1276 = 0;
          unsigned int v1277 = 0;
          uint64_t v1278 = 40 * *(unsigned __int16 *)(v530 + 56);
          do
          {
            if (v1277 >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)v3793[0] + v1277) = *(_OWORD *)(*(void *)(v530 + 32) + v1276);
            unsigned int v1277 = ++LODWORD(v3793[1]);
            v1276 += 40;
          }
          while (v1278 != v1276);
          v1086 = (void **)v3793[0];
        }
        else
        {
          v1086 = &v3793[2];
        }
        v1279 = &v1086[2 * v1085];
        *v1279 = (void *)v528;
        *((_DWORD *)v1279 + 2) = v1082;
        v1280 = *(void **)(a3 + 16);
        v1281 = *(unsigned __int8 **)(v8 + 64);
        *(void *)&long long v3815 = v1281;
        if (v1281) {
          llvm::MetadataTracking::track((uint64_t)&v3815, v1281, 2);
        }
        DWORD2(v3815) = *(_DWORD *)(v8 + 60);
        uint64_t v1282 = *(void *)(v8 + 40);
        v1283 = *(llvm **)v1282;
        uint64_t v1284 = *(void *)(v1282 + 8);
        v1285 = (uint64_t *)v3793[0];
        uint64_t v1286 = LODWORD(v3793[1]);
        uint64_t v1287 = v1280[104];
        if (v1287) {
          uint64_t v1288 = *(unsigned __int16 *)(v1287 + 8);
        }
        else {
          uint64_t v1288 = 0;
        }
        v1289 = v1280;
        uint64_t v1290 = 146;
        goto LABEL_1411;
      case 0x1B5:
        unint64_t v479 = *(uint64_t **)(v8 + 32);
        uint64_t v480 = v479[5];
        int v481 = *(unsigned __int16 *)(v480 + 24);
        if (v481 != 35 && v481 != 11) {
          goto LABEL_3081;
        }
        uint64_t v483 = *(void *)(v480 + 80);
        uint64_t v484 = (void *)(v483 + 24);
        if (*(_DWORD *)(v483 + 32) >= 0x41u) {
          uint64_t v484 = (void *)*v484;
        }
        uint64_t v485 = (void *)*v484;
        uint64_t v486 = *(void *)(v8 + 40);
        v488 = *(void **)v486;
        v487 = *(void **)(v486 + 8);
        v3793[0] = v488;
        v3793[1] = v487;
        uint64_t v489 = *v479;
        uint64_t v490 = *((unsigned int *)v479 + 2);
        int v491 = *(unsigned __int16 *)(*v479 + 24);
        int v492 = v488;
        if (v491 != 216)
        {
          if (v491 != 51) {
            goto LABEL_470;
          }
LABEL_1432:
          uint64_t v1125 = *(void *)(a3 + 16);
          uint64_t v1126 = (uint64_t)v488;
          uint64_t v1127 = (uint64_t)v487;
          goto LABEL_1433;
        }
        uint64_t v673 = **(void **)(v489 + 32);
        int v674 = *(unsigned __int16 *)(v673 + 24);
        if ((v674 - 198) <= 2)
        {
          uint64_t v675 = *(void **)(v673 + 32);
          uint64_t v676 = *v675;
          uint64_t v677 = v675[1];
          v678 = (void **)(*(void *)(*v675 + 40) + 16 * v677);
          if (*(unsigned __int8 *)v678 == v488 && ((_BYTE)v488 || v678[1] == v487))
          {
            if (!v485)
            {
              *(void *)&long long v3791 = v676;
              *((void *)&v3791 + 1) = v677;
              goto LABEL_3082;
            }
            if (v674 == 200) {
              goto LABEL_1432;
            }
            if (v674 == 199) {
              goto LABEL_971;
            }
          }
        }
        if (v674 == 4 && v485 == 1)
        {
          uint64_t v883 = *(void *)(*(void *)(v673 + 32) + 40);
          if (*(unsigned __int8 *)(v883 + 80) == v488
            && ((_BYTE)v488 || *(void **)(v883 + 88) == v487))
          {
LABEL_971:
            uint64_t v476 = *(void *)(a3 + 16);
            uint64_t v478 = 0;
            uint64_t v884 = (uint64_t)v488;
            uint64_t v885 = (uint64_t)v487;
            goto LABEL_1311;
          }
        }
        else if (v674 == 35 || v674 == 11)
        {
          uint64_t v681 = (uint64_t *)(*(void *)(v489 + 40) + 16 * v490);
          uint64_t v683 = *v681;
          uint64_t v682 = v681[1];
          *(void *)&long long v3815 = v683;
          *((void *)&v3815 + 1) = v682;
          char v684 = (_BYTE)v683
               ? sub_1CB8C2FBC((unsigned __int8 *)&v3815)
               : llvm::EVT::getEVT(*(llvm::EVT **)(v682 + 24), 0, a3);
          if (v684 != 3)
          {
            v1193 = (uint64_t *)(*(void *)(v489 + 40) + 16 * v490);
            uint64_t v1195 = *v1193;
            uint64_t v1194 = v1193[1];
            *(void *)&long long v3813 = v1195;
            *((void *)&v3813 + 1) = v1194;
            if ((_BYTE)v1195)
            {
              LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v3813);
              unint64_t v1197 = 0;
              uint64_t v1198 = 0;
            }
            else
            {
              unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v1194 + 24), 0, a3);
              unint64_t v1197 = EVT & 0xFFFFFFFFFFFFFF00;
            }
            *(void *)&long long v3815 = v1197 | EVT;
            *((void *)&v3815 + 1) = v1198;
            uint64_t v1386 = *(void *)(**(void **)(v489 + 32) + 80);
            v1387 = (unint64_t *)(v1386 + 24);
            if (*(_DWORD *)(v1386 + 32) >= 0x41u) {
              v1387 = (unint64_t *)*v1387;
            }
            unint64_t v1388 = *v1387;
            if ((_BYTE)EVT) {
              unsigned __int8 ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v3815);
            }
            else {
              unsigned __int8 ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3815);
            }
            unsigned __int8 v1392 = ExtendedSizeInBits;
            if (v1390 == 1) {
            *(void *)&long long v3791 = 0;
            }
            DWORD2(v3791) = 0;
            if (v485)
            {
              if (v485 != 1)
              {
                v1393 = 0;
                if ((_BYTE)v488) {
                  goto LABEL_1486;
                }
                goto LABEL_2649;
              }
              if ((_BYTE)v3815) {
                unsigned __int8 v2161 = sub_1CB87E200((unsigned __int8 *)&v3815);
              }
              else {
                unsigned __int8 v2161 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3815);
              }
              unsigned __int8 v2623 = v2161;
              if (v1390 == 1) {
              v1388 >>= v2623;
              }
            }
            uint64_t v2624 = *(void *)(a3 + 16);
            v2625 = (llvm *)sub_1CD3D796C((llvm::EVT *)v3793, (uint64_t)v1390, v1391);
            v1393 = sub_1CD7EBF14(v2624, v1388 & ~(-1 << v1392), (const llvm::APInt *)&v3789, v2625, v2626, 0, 0);
            *(void *)&long long v3791 = v1393;
            DWORD2(v3791) = v2627;
            int v492 = LOBYTE(v3793[0]);
            if (LOBYTE(v3793[0]))
            {
LABEL_1486:
              if ((v492 - 120) < 0x20 || (v492 - 2) < 6 || (v492 - 15) < 0x3C) {
                goto LABEL_3082;
              }
              v1394 = v3793[1];
LABEL_2652:
              uint64_t v2273 = sub_1CD7EF724(*(void *)(a3 + 16), (uint64_t)v3793[0], (uint64_t)v1394, (uint64_t)v1393, *((uint64_t *)&v3791 + 1));
              goto LABEL_2653;
            }
LABEL_2649:
            v1394 = v3793[1];
            if ((*((_DWORD *)v3793[1] + 2) & 0xFE) == 0x12) {
              int v2628 = *(unsigned __int8 *)(**((void **)v3793[1] + 2) + 8);
            }
            else {
              int v2628 = *((_DWORD *)v3793[1] + 2);
            }
            if (v2628 == 13) {
              goto LABEL_3082;
            }
            goto LABEL_2652;
          }
        }
LABEL_470:
        if (v488 == 5)
        {
          int v493 = *(unsigned __int16 *)(v489 + 24);
          if (*(unsigned char *)(*(void *)(v489 + 40) + 16 * v490) == 6)
          {
            if (*(unsigned __int16 *)(v489 + 24) <= 0xD7u)
            {
              if (v493 != 146)
              {
                if (v493 == 11 || v493 == 35)
                {
                  uint64_t v494 = *(void *)(**(void **)(v8 + 32) + 80);
                  unsigned int v495 = (unint64_t *)(v494 + 24);
                  if (*(_DWORD *)(v494 + 32) >= 0x41u) {
                    unsigned int v495 = (unint64_t *)*v495;
                  }
                  unint64_t v477 = *v495;
                  if (v485)
                  {
                    uint64_t v476 = *(void *)(a3 + 16);
                    uint64_t v478 = HIDWORD(v477);
                  }
                  else
                  {
                    uint64_t v476 = *(void *)(a3 + 16);
LABEL_460:
                    uint64_t v478 = v477;
                  }
LABEL_1310:
                  uint64_t v884 = 5;
                  uint64_t v885 = 0;
LABEL_1311:
                  uint64_t v29 = (uint64_t)sub_1CD7EBF14(v476, v478, (const llvm::APInt *)&v3789, (llvm *)v884, v885, 0, 0);
                  goto LABEL_2210;
                }
LABEL_1240:
                if (((v493 & 0xFFFE) == 0xC6 || v493 == 200) && !v485)
                {
                  v765 = *(unsigned int **)(v489 + 32);
                  if (*(unsigned char *)(*(void *)(*(void *)v765 + 40) + 16 * v765[2]) == 5)
                  {
LABEL_809:
                    long long v176 = *(_OWORD *)v765;
                    goto LABEL_1104;
                  }
                }
                else
                {
                  if (v493 == 199 && v485)
                  {
                    uint64_t v476 = *(void *)(a3 + 16);
                    uint64_t v478 = 0;
                    goto LABEL_1310;
                  }
                  if (v493 == 200 && v485)
                  {
                    uint64_t v1125 = *(void *)(a3 + 16);
                    uint64_t v1126 = 5;
                    uint64_t v1127 = 0;
LABEL_1433:
                    uint64_t v29 = (uint64_t)sub_1CD3DD4D8(v1125, (llvm *)v1126, v1127);
                    goto LABEL_2210;
                  }
                }
LABEL_1435:
                v1313 = *(unsigned int **)(v8 + 32);
                uint64_t v1314 = *(void *)v1313;
                if (*(_WORD *)(*(void *)v1313 + 24) != 395) {
                  goto LABEL_3081;
                }
                uint64_t v1315 = **(void **)(v1314 + 32);
                int v1316 = *(unsigned __int16 *)(v1315 + 24);
                if (v1316 != 35 && v1316 != 11) {
                  goto LABEL_3081;
                }
                uint64_t v1318 = *(void *)(v1315 + 80);
                v1319 = (void *)(v1318 + 24);
                if (*(_DWORD *)(v1318 + 32) >= 0x41u) {
                  v1319 = (void *)*v1319;
                }
                v1320 = (void *)*v1319;
                v1321 = (uint64_t *)(*(void *)(v1314 + 40) + 16 * v1313[2]);
                uint64_t v1323 = *v1321;
                uint64_t v1322 = v1321[1];
                *(void *)&long long v3815 = v1323;
                *((void *)&v3815 + 1) = v1322;
                if (v1323 == 27)
                {
                  if (v485) {
                    goto LABEL_3081;
                  }
                }
                else if (v1323 != 28)
                {
                  if ((_BYTE)v1323)
                  {
                    LOBYTE(v1921) = sub_1CB8C2FBC((unsigned __int8 *)&v3815);
                    unint64_t v1923 = 0;
                    uint64_t v1922 = 0;
                  }
                  else
                  {
                    unint64_t v1921 = llvm::EVT::getEVT(*(llvm::EVT **)(v1322 + 24), 0, a3);
                    unint64_t v1923 = v1921 & 0xFFFFFFFFFFFFFF00;
                  }
                  *(void *)&long long v3813 = v1923 | v1921;
                  *((void *)&v3813 + 1) = v1922;
                  int v2194 = sub_1CB896FB8((unsigned __int8 *)&v3813) * v485;
                  if (v2193 == 1) {
                  v2195 = *(llvm::APFloatBase **)(a3 + 16);
                  }
                  v2196 = *(unsigned __int8 **)(v8 + 64);
                  *(void *)&long long v3813 = v2196;
                  uint64_t v2197 = (uint64_t)v2195;
                  if (v2196)
                  {
                    llvm::MetadataTracking::track((uint64_t)&v3813, v2196, 2);
                    uint64_t v2197 = *(void *)(a3 + 16);
                  }
                  DWORD2(v3813) = *(_DWORD *)(v8 + 60);
                  v2199 = sub_1CD7EBF14(v2197, (v2194 + v1320), (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                  __int16 v2200 = 0;
                  uint64_t v2201 = *((void *)v2195 + 104);
                  if (v2201) {
                    __int16 v2200 = *(_WORD *)(v2201 + 8);
                  }
                  v2202 = sub_1CD7F3564(v2195, (const char *)0x18B, (uint64_t)&v3813, (llvm *)v488, (uint64_t)v487, (uint64_t)v2199, v2198, v2200);
                  goto LABEL_2323;
                }
                v1607 = *(llvm::APFloatBase **)(a3 + 16);
                v1608 = *(unsigned __int8 **)(v8 + 64);
                *(void *)&long long v3813 = v1608;
                uint64_t v1609 = (uint64_t)v1607;
                if (v1608)
                {
                  llvm::MetadataTracking::track((uint64_t)&v3813, v1608, 2);
                  uint64_t v1609 = *(void *)(a3 + 16);
                }
                DWORD2(v3813) = *(_DWORD *)(v8 + 60);
                v1611 = sub_1CD7EBF14(v1609, v1320 + (v485 & 0xFFFFFFFE), (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                __int16 v1612 = 0;
                if (v485) {
                  uint64_t v1613 = 27;
                }
                else {
                  uint64_t v1613 = 4;
                }
                uint64_t v1614 = *((void *)v1607 + 104);
                if (v1614) {
                  __int16 v1612 = *(_WORD *)(v1614 + 8);
                }
                v1615 = sub_1CD7F3564(v1607, (const char *)0x18B, (uint64_t)&v3813, (llvm *)v1613, 0, (uint64_t)v1611, v1610, v1612);
                uint64_t v1617 = v1616;
                if ((void)v3813)
                {
                  int v1618 = *(unsigned __int8 *)v3813;
                  if ((v1618 - 4) > 0x1E)
                  {
                    if ((v1618 - 3) >= 0xFFFFFFFE) {
                      uint64_t v2391 = v3813;
                    }
                    else {
                      uint64_t v2391 = 0;
                    }
                    if ((v1618 - 3) < 0xFFFFFFFE)
                    {
                      if (v1618 == 3) {
                        *(void *)(v3813 + 8) = 0;
                      }
                      goto LABEL_1794;
                    }
                    unint64_t v2392 = v2391 + 8;
                  }
                  else
                  {
                    if ((*(unsigned char *)(v3813 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3813 + 12)) {
                      goto LABEL_1794;
                    }
                    uint64_t v3629 = *(void *)(v3813 + 16);
                    if ((v3629 & 4) == 0) {
                      goto LABEL_1794;
                    }
                    unint64_t v2392 = v3629 & 0xFFFFFFFFFFFFFFF8;
                    if (!v2392) {
                      goto LABEL_1794;
                    }
                  }
                  *(void *)&long long v3821 = &v3813;
                  sub_1CC5FA668(v2392 + 16, &v3821);
                }
LABEL_1794:
                if ((v485 & 1) == 0)
                {
                  *(void *)&long long v3791 = v1615;
                  *((void *)&v3791 + 1) = v1617;
                  goto LABEL_3082;
                }
                uint64_t v2789 = *(void *)(a3 + 16);
                v2790 = *(unsigned __int8 **)(v8 + 64);
                *(void *)&long long v3813 = v2790;
                uint64_t v2791 = v2789;
                if (v2790)
                {
                  llvm::MetadataTracking::track((uint64_t)&v3813, v2790, 2);
                  uint64_t v2791 = *(void *)(a3 + 16);
                }
                DWORD2(v3813) = *(_DWORD *)(v8 + 60);
                v2792 = sub_1CD7EBF14(v2791, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                uint64_t v2795 = *(void *)(v2789 + 832);
                if (v2795) {
                  LOWORD(v2795) = *(_WORD *)(v2795 + 8);
                }
                v2202 = sub_1CCFDED5C(v2789, 437, (const llvm::APInt *)&v3813, (llvm *)v488, (uint64_t)v487, (uint64_t)v1615, v1617, v2794, (uint64_t)v2792, v2793, v2795);
LABEL_2323:
                *(void *)&long long v3791 = v2202;
                *((void *)&v3791 + 1) = v2203;
                v858 = (unsigned __int8 *)v3813;
                if (!(void)v3813) {
                  goto LABEL_3082;
                }
                int v859 = *(unsigned __int8 *)v3813;
                if ((v859 - 4) > 0x1E)
                {
                  if ((v859 - 3) >= 0xFFFFFFFE) {
                    uint64_t v2729 = v3813;
                  }
                  else {
                    uint64_t v2729 = 0;
                  }
                  if ((v859 - 3) < 0xFFFFFFFE) {
                    goto LABEL_3395;
                  }
                  unint64_t v2205 = v2729 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v3813 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3813 + 12)) {
                    goto LABEL_3082;
                  }
                  uint64_t v2204 = *(void *)(v3813 + 16);
                  if ((v2204 & 4) == 0) {
                    goto LABEL_3082;
                  }
                  unint64_t v2205 = v2204 & 0xFFFFFFFFFFFFFFF8;
                  if (!v2205) {
                    goto LABEL_3082;
                  }
                }
                *(void *)&long long v3821 = &v3813;
                uint64_t v1524 = v2205 + 16;
                v1525 = &v3821;
                goto LABEL_1929;
              }
LABEL_741:
              uint64_t v694 = *(void *)(*(void *)(*(void *)(v8 + 32) + 40) + 80);
              int v695 = (unsigned int *)(v694 + 24);
              if (*(_DWORD *)(v694 + 32) >= 0x41u) {
                int v695 = *(unsigned int **)v695;
              }
              v696 = (uint64_t *)(*(void *)(v489 + 32) + 40 * *v695);
              uint64_t v697 = *v696;
              uint64_t v698 = v696[1];
              int v699 = (void **)(*(void *)(*v696 + 40) + 16 * v698);
              if (*(unsigned __int8 *)v699 == v488 && ((_BYTE)v488 || v699[1] == v487))
              {
                *(void *)&long long v3791 = v697;
                *((void *)&v3791 + 1) = v698;
                goto LABEL_3082;
              }
              uint64_t v29 = sub_1CD7EB67C(*(void *)(a3 + 16), v697, v698, (uint64_t)&v3789, (uint64_t)v488, (uint64_t)v487);
              goto LABEL_2210;
            }
            if (v493 != 216) {
              goto LABEL_1240;
            }
            v1021 = *(unsigned int **)(v489 + 32);
            uint64_t v1022 = *(void *)v1021;
            if (*(_WORD *)(*(void *)v1021 + 24) != 146
              || *(unsigned char *)(*(void *)(v1022 + 40) + 16 * v1021[2]) != 49)
            {
              goto LABEL_1435;
            }
            uint64_t v1023 = *(void *)(*(void *)(*(void *)(v8 + 32) + 40) + 80);
            v1024 = (unsigned int *)(v1023 + 24);
            if (*(_DWORD *)(v1023 + 32) >= 0x41u) {
              v1024 = *(unsigned int **)v1024;
            }
            long long v176 = *(_OWORD *)(*(void *)(v1022 + 32) + 40 * *v1024);
LABEL_1104:
            long long v3791 = v176;
            goto LABEL_3082;
          }
        }
        else
        {
          int v493 = *(unsigned __int16 *)(v489 + 24);
        }
        if (v493 != 146) {
          goto LABEL_1435;
        }
        goto LABEL_741;
      case 0x1BE:
        unint64_t v456 = *(uint64_t **)(v8 + 32);
        uint64_t v457 = *v456;
        uint64_t v458 = v456[5];
        uint64_t v459 = v456[10];
        int v460 = *(unsigned __int16 *)(v457 + 24);
        if (v460 == 35 || v460 == 11) {
          uint64_t v462 = v457;
        }
        else {
          uint64_t v462 = 0;
        }
        int v463 = *(unsigned __int16 *)(v458 + 24);
        if (v463 == 35 || v463 == 11) {
          uint64_t v465 = v458;
        }
        else {
          uint64_t v465 = 0;
        }
        int v466 = *(unsigned __int16 *)(v459 + 24);
        if (v466 != 35 && v466 != 11) {
          uint64_t v459 = 0;
        }
        if (!v462 || **(unsigned char **)(v8 + 40) != 5 || !v465 || !v459) {
          goto LABEL_3081;
        }
        uint64_t v468 = *(void *)(v462 + 80);
        uint64_t v469 = (unint64_t *)(v468 + 24);
        if (*(_DWORD *)(v468 + 32) >= 0x41u) {
          uint64_t v469 = (unint64_t *)*v469;
        }
        uint64_t v470 = *(void *)(v465 + 80);
        uint64_t v471 = (void *)(v470 + 24);
        if (*(_DWORD *)(v470 + 32) >= 0x41u) {
          uint64_t v471 = (void *)*v471;
        }
        unint64_t v472 = *v469;
        int v473 = (void *)*v471;
        uint64_t v474 = *(void *)(v459 + 80);
        uint64_t v475 = (void *)(v474 + 24);
        if (*(_DWORD *)(v474 + 32) >= 0x41u) {
          uint64_t v475 = (void *)*v475;
        }
        uint64_t v476 = *(void *)(a3 + 16);
        unint64_t v477 = (v472 | ((void)v473 << 32)) >> *v475;
        goto LABEL_460;
      default:
        if ((v13 - 290) > 0xF) {
          goto LABEL_885;
        }
        if (v13 != 291)
        {
          if (((1 << (v13 - 34)) & 0xFEF1) != 0)
          {
            uint64_t v29 = (uint64_t)sub_1CD3DB4E4(a1, v8, (uint64_t *)a3);
            goto LABEL_2210;
          }
          if (v13 == 293)
          {
            uint64_t v29 = (uint64_t)sub_1CD3DBFB0(a1, v8, a3);
            goto LABEL_2210;
          }
LABEL_885:
          if (v13 != 405) {
            goto LABEL_3081;
          }
          uint64_t v808 = *(void *)(*(void *)(*(void *)(v8 + 32) + 40) + 32);
          long long v3815 = *(_OWORD *)(v808 + 40);
          long long v3813 = *(_OWORD *)(v808 + 120);
          long long v3821 = *(_OWORD *)(v808 + 200);
          uint64_t v809 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a3 + 16) + 40) + 344) + 336))();
          int v810 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v809 + 24))(v809, 16);
          uint64_t v811 = 0;
          int v812 = 0;
          uint64_t v813 = 0;
          uint64_t v814 = 0;
          v3793[0] = (void *)v3815;
          LODWORD(v3793[1]) = DWORD2(v3815);
          v3793[2] = (void *)v3813;
          LODWORD(v3794) = DWORD2(v3813);
          *((void *)&v3794 + 1) = v3821;
          uint64_t v815 = 0xFFFFFFFFLL;
          LODWORD(v3795) = DWORD2(v3821);
          unsigned int v816 = -1;
          while (1)
          {
            v817 = (unsigned __int16 *)v3793[v811];
            int v818 = v817[12];
            if (v818 == 215)
            {
              v817 = (unsigned __int16 *)**((void **)v817 + 4);
              int v818 = v817[12];
            }
            if (v818 != 398) {
              break;
            }
            uint64_t v819 = *((void *)v817 + 4);
            if (v811 * 8)
            {
              if (v814 != *(void *)v819 || *(_DWORD *)(v819 + 8) != v813) {
                break;
              }
            }
            else
            {
              uint64_t v813 = *(unsigned int *)(v819 + 8);
              uint64_t v814 = *(void *)v819;
            }
            uint64_t v820 = *(void *)(v819 + 40);
            int v821 = *(unsigned __int16 *)(v820 + 24);
            if (v821 != 35 && v821 != 11) {
              break;
            }
            uint64_t v823 = *(void *)(v820 + 80);
            v824 = (void *)(v823 + 24);
            unsigned int v825 = *(_DWORD *)(v823 + 32);
            if (v811 * 8)
            {
              if (v825 >= 0x41) {
                v824 = (void *)*v824;
              }
              if (*v824 != v812 + v816) {
                break;
              }
              uint64_t v826 = *(void *)(*(void *)(v819 + 80) + 80);
              v827 = (void *)(v826 + 24);
              if (*(_DWORD *)(v826 + 32) >= 0x41u) {
                v827 = (void *)*v827;
              }
              if (*v827 != v815) {
                break;
              }
            }
            else
            {
              if (v825 >= 0x41) {
                v824 = (void *)*v824;
              }
              uint64_t v828 = *(void *)(*(void *)(v819 + 80) + 80);
              v829 = (unsigned int *)(v828 + 24);
              if (*(_DWORD *)(v828 + 32) >= 0x41u) {
                v829 = *(unsigned int **)v829;
              }
              unsigned int v816 = *(_DWORD *)v824;
              uint64_t v815 = *v829;
            }
            v812 += v810;
            v811 += 2;
            if (v811 == 6)
            {
              v830 = sub_1CD7EBF14(*(void *)(a3 + 16), v816, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
              uint64_t v832 = v831;
              goto LABEL_932;
            }
          }
          int v833 = 0;
          uint64_t v834 = 0;
          v835 = v3793;
          for (uint64_t i = 33; i != 36; ++i)
          {
            if (*((__int16 *)*v835 + 12) != -9) {
              goto LABEL_3081;
            }
            v837 = (uint64_t *)*((void *)*v835 + 4);
            uint64_t v838 = *(void *)(v837[5] + 80);
            v839 = (void *)(v838 + 24);
            if (*(_DWORD *)(v838 + 32) >= 0x41u) {
              v839 = (void *)*v839;
            }
            if (i != *v839) {
              goto LABEL_3081;
            }
            uint64_t v840 = *v837;
            if (*(_WORD *)(*v837 + 24) != 420) {
              goto LABEL_3081;
            }
            int v841 = *((_DWORD *)v837 + 2);
            if (i == 33)
            {
              uint64_t v834 = v840;
              int v833 = v841;
            }
            else if (v834 != v840 || v833 != v841)
            {
              goto LABEL_3081;
            }
            v835 += 2;
          }
          uint64_t v843 = *(void *)(v834 + 32);
          uint64_t v814 = *(void *)v843;
          uint64_t v813 = *(unsigned int *)(v843 + 8);
          v830 = *(uint64_t **)(v843 + 40);
          uint64_t v832 = *(unsigned int *)(v843 + 48);
          uint64_t v844 = *(void *)(*(void *)(v843 + 80) + 80);
          v845 = (unsigned int *)(v844 + 24);
          if (*(_DWORD *)(v844 + 32) >= 0x41u) {
            v845 = *(unsigned int **)v845;
          }
          uint64_t v815 = *v845;
LABEL_932:
          uint64_t v846 = *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344);
          if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v846 + 176))(v846, 18)) {
            goto LABEL_3081;
          }
          (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t))(*(void *)v846 + 128))(&v3787, v846, 18);
          uint64_t v847 = *(void *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v3787 + 32))(v3787);
          v848 = v3787;
          v3787 = 0;
          if (v848) {
            (*(void (**)(unsigned __int8 *))(*(void *)v848 + 8))(v848);
          }
          if (!v847) {
            goto LABEL_3081;
          }
          if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v846 + 176))(v846, 18))
          {
            (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t))(*(void *)v846 + 128))(&v3787, v846, 18);
            uint64_t v849 = *(void *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)v3787 + 32))(v3787);
            v2780 = v3787;
            v3787 = 0;
            if (v2780) {
              (*(void (**)(unsigned __int8 *))(*(void *)v2780 + 8))(v2780);
            }
          }
          else
          {
            uint64_t v849 = 0;
          }
          if (v815 != (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v846 + 400))(v846, v849)) {
            goto LABEL_3081;
          }
          uint64_t v851 = *(void *)(a3 + 16);
          v852 = *(unsigned __int8 **)(v8 + 64);
          v3787 = v852;
          if (v852) {
            llvm::MetadataTracking::track((uint64_t)&v3787, v852, 2);
          }
          int v3788 = *(_DWORD *)(v8 + 60);
          uint64_t v853 = *(void *)(v8 + 40);
          v854 = *(llvm **)v853;
          uint64_t v855 = *(void *)(v853 + 8);
          uint64_t v856 = *(void *)(v851 + 832);
          if (v856) {
            LOWORD(v856) = *(_WORD *)(v856 + 8);
          }
          *(void *)&long long v3791 = sub_1CCFDED5C(v851, 399, (const llvm::APInt *)&v3787, v854, v855, v814, v813, v850, (uint64_t)v830, v832, v856);
          *((void *)&v3791 + 1) = v857;
          v858 = v3787;
          if (!v3787) {
            goto LABEL_3082;
          }
          int v859 = *v3787;
          if ((v859 - 4) > 0x1E)
          {
            if ((v859 - 3) >= 0xFFFFFFFE) {
              v2768 = v3787;
            }
            else {
              v2768 = 0;
            }
            if ((v859 - 3) < 0xFFFFFFFE) {
              goto LABEL_3395;
            }
            unint64_t v861 = (unint64_t)(v2768 + 8);
          }
          else
          {
            if ((v3787[1] & 0x7F) != 2 && !*((_DWORD *)v3787 + 3)) {
              goto LABEL_3082;
            }
            uint64_t v860 = *((void *)v3787 + 2);
            if ((v860 & 4) == 0) {
              goto LABEL_3082;
            }
            unint64_t v861 = v860 & 0xFFFFFFFFFFFFFFF8;
            if (!v861) {
              goto LABEL_3082;
            }
          }
          v3792 = &v3787;
          uint64_t v1524 = v861 + 16;
          v1525 = (long long *)&v3792;
          goto LABEL_1929;
        }
        if (*(_DWORD *)(a3 + 8)) {
          goto LABEL_3081;
        }
        goto LABEL_106;
    }
  }
  if (*(unsigned __int16 *)(v8 + 24) > 0x91u)
  {
    if (*(unsigned __int16 *)(v8 + 24) > 0xBEu)
    {
      switch(*(_WORD *)(v8 + 24))
      {
        case 0xBF:
          uint64_t v1016 = *(void *)(v8 + 40);
          v1017 = *(llvm **)v1016;
          uint64_t v1018 = *(void *)(v1016 + 8);
          v1019 = *(void **)(v8 + 64);
          v3793[0] = v1019;
          if (v1019)
          {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1019, 2);
            int v12 = *(_DWORD *)(v8 + 60);
          }
          LODWORD(v3793[1]) = v12;
          v1020 = *(uint64_t **)(v8 + 32);
          uint64_t v557 = sub_1CD3DA974(v1017, v1018, (BOOL)v3793, *v1020, v1020[1], v1020[5], v1020[6], a8, v1020[10], v1020[11], (uint64_t *)a3);
          goto LABEL_1915;
        case 0xC0:
          uint64_t v389 = *(uint64_t **)(v8 + 32);
          unsigned int v390 = *(_DWORD *)(v389[20] + 76);
          uint64_t v391 = *v389;
          uint64_t v392 = (void *)v389[1];
          uint64_t v393 = v389[5];
          uint64_t v394 = (void *)v389[6];
          uint64_t v396 = v389[10];
          uint64_t v395 = (void *)v389[11];
          uint64_t v398 = v389[15];
          uint64_t v397 = (void *)v389[16];
          uint64_t v399 = *(llvm::APFloatBase **)(a3 + 16);
          if ((*(_WORD *)(*(void *)v399 + 1020) & 1) == 0) {
            goto LABEL_393;
          }
          if (v390 == 8)
          {
            *(void *)&long long v3791 = v389[15];
            *((void *)&v3791 + 1) = v397;
            goto LABEL_3082;
          }
          if (v390 == 7)
          {
            *(void *)&long long v3791 = v389[10];
            *((void *)&v3791 + 1) = v395;
            goto LABEL_3082;
          }
          int v792 = *(unsigned __int16 *)(v393 + 24);
          BOOL v793 = v792 == 36 || v792 == 12;
          if (v793
            && ((uint64_t v794 = *(void *)(v393 + 80), *(_UNKNOWN **)(v794 + 32) == &unk_1CFB2E344)
              ? (uint64_t v795 = *(void *)(v794 + 40))
              : (uint64_t v795 = v794 + 24),
                (*(unsigned char *)(v795 + 28) & 7) == 3))
          {
            if (*(_WORD *)(v391 + 24) == 96)
            {
              uint64_t v1097 = *(void *)(v391 + 48);
              if (v1097)
              {
                int v1098 = 1;
                do
                {
                  if (*(_DWORD *)(v1097 + 8) == v392)
                  {
                    if (!v1098) {
                      goto LABEL_393;
                    }
                    --v1098;
                  }
                  uint64_t v1097 = *(void *)(v1097 + 32);
                }
                while (v1097);
                if (!v1098)
                {
                  unsigned int v1099 = v390;
                  uint64_t v1100 = v398;
                  uint64_t v1101 = v396;
                  v1102 = v397;
                  unsigned int v1103 = v395;
                  v1104 = *(uint64_t ***)(v391 + 32);
                  v1105 = *v1104;
                  v1106 = v1104[1];
                  uint64_t v1107 = (uint64_t)v1104[5];
                  v1108 = v1104[6];
                  uint64_t v1109 = *(void *)(v1107 + 40) + 16 * *((unsigned int *)v1104 + 12);
                  uint64_t v1110 = *((void *)v399 + 104);
                  if (v1110) {
                    __int16 v1111 = *(_WORD *)(v1110 + 8);
                  }
                  else {
                    __int16 v1111 = 0;
                  }
                  v2962 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xDE, (uint64_t)&v3789, *(llvm **)v1109, *(void *)(v1109 + 8), v1107, v1108, v1111);
                  int v2964 = v3032;
                  v2965 = *(void **)(a3 + 16);
                  unsigned int v3661 = v1099;
                  uint64_t v3651 = v1100;
                  v3656 = v1102;
                  v2966 = v1105;
                  int v2967 = (int)v1106;
                  uint64_t v2982 = v1101;
                  unsigned int v2983 = v1103;
                  goto LABEL_2985;
                }
              }
            }
          }
          else if (*(unsigned char *)(*(void *)(a1 + 184296) + 281))
          {
            uint64_t v1112 = *(void *)(v391 + 40) + 16 * v392;
            v1113 = *(llvm **)v1112;
            uint64_t v1114 = *(void *)(v1112 + 8);
            if (*(_WORD *)(v391 + 24) != 98) {
              goto LABEL_1230;
            }
            uint64_t v1115 = *(void *)(v391 + 48);
            if (!v1115) {
              goto LABEL_1230;
            }
            int v1116 = 1;
            do
            {
              if (*(_DWORD *)(v1115 + 8) == v392)
              {
                if (!v1116) {
                  goto LABEL_1230;
                }
                --v1116;
              }
              uint64_t v1115 = *(void *)(v1115 + 32);
            }
            while (v1115);
            if (!v1116)
            {
              uint64_t v2741 = v391;
              unsigned int v2742 = v390;
              uint64_t v2743 = v398;
              uint64_t v1122 = v396;
              v2744 = v397;
              unsigned int v3738 = v395;
              uint64_t v2745 = *((void *)v399 + 104);
              if (v2745) {
                __int16 v2746 = *(_WORD *)(v2745 + 8);
              }
              else {
                __int16 v2746 = 0;
              }
              v2949 = sub_1CD7F3564(v399, (const char *)0xDE, (uint64_t)&v3789, v1113, v1114, v393, v394, v2746);
              v2952 = *(void **)(a3 + 16);
              v2953 = *(uint64_t **)(v2741 + 32);
              uint64_t v2954 = *v2953;
              uint64_t v2955 = v2953[1];
              uint64_t v2956 = v2953[5];
              uint64_t v2957 = v2953[6];
              uint64_t v2958 = v2952[104];
              if (v2958) {
                LOWORD(v2958) = *(_WORD *)(v2958 + 8);
              }
              v2959 = sub_1CD7F5D38(v2952, (const char *)0x8D, (const llvm::APInt *)&v3789, v1113, v1114, v2954, v2955, v2951, v2956, v2957, (uint64_t)v2949, v2950, SHIDWORD(v2950), v2958);
              int v2961 = v2960;
              v2962 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)&v3789, (BOOL)v1113, v1114, 0, 0.0);
              int v2964 = v2963;
              v2965 = *(void **)(a3 + 16);
              unsigned int v3661 = v2742;
              uint64_t v3651 = v2743;
              v3656 = v2744;
              v2966 = v2959;
              int v2967 = v2961;
            }
            else
            {
LABEL_1230:
              if (v792 != 98) {
                goto LABEL_393;
              }
              uint64_t v1117 = *(void *)(v393 + 48);
              if (!v1117) {
                goto LABEL_393;
              }
              int v1118 = 1;
              do
              {
                if (*(_DWORD *)(v1117 + 8) == v394)
                {
                  if (!v1118) {
                    goto LABEL_393;
                  }
                  --v1118;
                }
                uint64_t v1117 = *(void *)(v1117 + 32);
              }
              while (v1117);
              if (v1118) {
                goto LABEL_393;
              }
              uint64_t v1119 = v393;
              unsigned int v1120 = v390;
              uint64_t v1121 = v398;
              uint64_t v1122 = v396;
              v3721 = v397;
              unsigned int v3738 = v395;
              uint64_t v1123 = *((void *)v399 + 104);
              if (v1123) {
                __int16 v1124 = *(_WORD *)(v1123 + 8);
              }
              else {
                __int16 v1124 = 0;
              }
              v2968 = sub_1CD7F3564(v399, (const char *)0xDE, (uint64_t)&v3789, v1113, v1114, v391, v392, v1124);
              v2971 = *(void **)(a3 + 16);
              v2972 = *(uint64_t **)(v1119 + 32);
              uint64_t v2973 = *v2972;
              uint64_t v2974 = v2972[1];
              uint64_t v2975 = v2972[5];
              uint64_t v2976 = v2972[6];
              uint64_t v2977 = v2971[104];
              if (v2977) {
                LOWORD(v2977) = *(_WORD *)(v2977 + 8);
              }
              v2978 = sub_1CD7F5D38(v2971, (const char *)0x8D, (const llvm::APInt *)&v3789, v1113, v1114, v2973, v2974, v2970, v2975, v2976, (uint64_t)v2968, v2969, SHIDWORD(v2969), v2977);
              int v2980 = v2979;
              v2966 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)&v3789, (BOOL)v1113, v1114, 0, 0.0);
              int v2967 = v2981;
              v2965 = *(void **)(a3 + 16);
              unsigned int v3661 = v1120;
              uint64_t v3651 = v1121;
              v3656 = v3721;
              v2962 = v2978;
              int v2964 = v2980;
            }
            uint64_t v2982 = v1122;
            unsigned int v2983 = v3738;
LABEL_2985:
            uint64_t v29 = (uint64_t)sub_1CD3D6058(v2965, (const llvm::APInt *)&v3789, (uint64_t)v2966, v2967, (uint64_t)v2962, v2964, v2982, v2983, v3651, (int)v3656, SHIDWORD(v3656), v3661);
            goto LABEL_2210;
          }
LABEL_393:
          int v400 = *(unsigned __int16 *)(v396 + 24);
          if (v400 != *(unsigned __int16 *)(v398 + 24)) {
            goto LABEL_396;
          }
          if ((v400 & 0xFFFE) != 0xDE) {
            goto LABEL_396;
          }
          uint64_t v401 = v8;
          uint64_t v402 = v395;
          uint64_t v403 = v396;
          uint64_t v404 = v397;
          uint64_t v405 = v398;
          unsigned int v406 = v390;
          uint64_t v407 = v391;
          uint64_t v408 = v393;
          int v409 = (int)v394;
          int v410 = (int)v392;
          uint64_t v3733 = v8;
          uint64_t v411 = *(void **)(a3 + 16);
          int v412 = sub_1CB8C5A98(v401);
          unsigned int v413 = v411;
          uint64_t v8 = v3733;
          LODWORD(v392) = v410;
          LODWORD(v394) = v409;
          uint64_t v393 = v408;
          uint64_t v391 = v407;
          unsigned int v390 = v406;
          uint64_t v398 = v405;
          uint64_t v397 = v404;
          uint64_t v396 = v403;
          uint64_t v395 = v402;
          if (!v412)
          {
LABEL_396:
            *(void *)&long long v3791 = 0;
            DWORD2(v3791) = 0;
            unsigned int v414 = v390;
            uint64_t v415 = v397;
            uint64_t v416 = v398;
            uint64_t v417 = v391;
            unsigned int v418 = v392;
            uint64_t v419 = v393;
            int v420 = (int)v394;
            uint64_t v421 = v396;
            v422 = v395;
            if ((sub_1CB8C465C((uint64_t)&v3791, v8, v391, v392, v393, (int)v394, v396, v395, v398, v397, v390, (uint64_t *)a3, 0) & 1) != 0|| (sub_1CB8C465C((uint64_t)&v3791, v8, v417, v418, v419,
                    v420,
                    v416,
                    v415,
                    v421,
                    v422,
                    v414,
                    (uint64_t *)a3,
                    1) & 1) != 0)
            {
              goto LABEL_3082;
            }
            goto LABEL_3081;
          }
          uint64_t v36 = sub_1CD3D6058(v413, (const llvm::APInt *)&v3789, v407, v410, v408, v409, **(void **)(v403 + 32), *(void *)(*(void *)(v403 + 32) + 8), **(void **)(v405 + 32), *(void *)(*(void *)(v405 + 32) + 8), HIDWORD(*(void *)(*(void *)(v405 + 32) + 8)), v406);
          uint64_t v38 = v1309;
          int v41 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v42 = *(unsigned __int16 *)(v403 + 24);
          v1310 = (uint64_t *)(*(void *)(v403 + 40) + 16 * v402);
          uint64_t v43 = *v1310;
          v1311 = (void *)v1310[1];
          uint64_t v1312 = *((void *)v41 + 104);
          if (v1312) {
            __int16 v39 = *(_WORD *)(v1312 + 8);
          }
          else {
            __int16 v39 = 0;
          }
          goto LABEL_2209;
        case 0xC1:
          if (*(_DWORD *)(a3 + 8)) {
            goto LABEL_3081;
          }
          uint64_t v384 = *(uint64_t **)(v8 + 40);
          uint64_t v386 = *v384;
          uint64_t v385 = v384[1];
          *(void *)&long long v3815 = v386;
          *((void *)&v3815 + 1) = v385;
          if ((_BYTE)v386)
          {
            if (v386 - 15 >= 0x9C) {
              goto LABEL_3081;
            }
            char v387 = sub_1CB8C2FBC((unsigned __int8 *)&v3815);
          }
          else
          {
            if ((*(_DWORD *)(v385 + 8) & 0xFE) != 0x12) {
              goto LABEL_3081;
            }
            char v387 = llvm::EVT::getEVT(*(llvm::EVT **)(v385 + 24), 0, a3);
          }
          if (v387 != 2) {
            goto LABEL_3081;
          }
          v874 = *(uint64_t **)(v8 + 32);
          uint64_t v3698 = v874[6];
          uint64_t v3707 = v874[5];
          uint64_t v3737 = *v874;
          uint64_t v3720 = v874[1];
          uint64_t v875 = *(void *)(*v874 + 40) + 16 * v3720;
          v877 = *(void **)v875;
          v876 = *(llvm::EVT ***)(v875 + 8);
          v3793[0] = v877;
          v3793[1] = v876;
          if ((_BYTE)v877)
          {
            unsigned __int8 v879 = sub_1CB8C2FBC((unsigned __int8 *)v3793);
            unint64_t v882 = 0;
            uint64_t v881 = 0;
          }
          else
          {
            unint64_t v878 = llvm::EVT::getEVT(v876[3], 0, v388);
            unsigned __int8 v879 = v878;
            uint64_t v881 = v880;
            unint64_t v882 = v878 & 0xFFFFFFFFFFFFFF00;
          }
          v3793[0] = &v3793[2];
          v3793[1] = (void *)0x400000000;
          v1856 = *(unsigned __int8 **)(v8 + 64);
          *(void *)&long long v3813 = v1856;
          if (v1856) {
            llvm::MetadataTracking::track((uint64_t)&v3813, v1856, 2);
          }
          DWORD2(v3813) = *(_DWORD *)(v8 + 60);
          unsigned int v1857 = sub_1CD3DB440((llvm::EVT *)&v3815, (const char *)v1856);
          if (v1857)
          {
            uint64_t v1859 = 0;
            v1860 = (llvm *)(v882 | v879);
            uint64_t v3694 = v1857;
            do
            {
              uint64_t v1861 = *(void *)(a3 + 16);
              v1862 = sub_1CD7EBF14(v1861, v1859, (const llvm::APInt *)&v3813, (llvm *)5, 0, 0, 0);
              __int16 v1865 = 0;
              uint64_t v1866 = *(void *)(v1861 + 832);
              if (v1866) {
                __int16 v1865 = *(_WORD *)(v1866 + 8);
              }
              v1867 = sub_1CCFDED5C(v1861, 148, (const llvm::APInt *)&v3813, v1860, v881, v3737, v3720, v1864, (uint64_t)v1862, v1863, v1865);
              uint64_t v1869 = v1868;
              uint64_t v1870 = *(void *)(a3 + 16);
              v1871 = sub_1CD7EBF14(v1870, v1859, (const llvm::APInt *)&v3813, (llvm *)5, 0, 0, 0);
              __int16 v1874 = 0;
              uint64_t v1875 = *(void *)(v1870 + 832);
              if (v1875) {
                __int16 v1874 = *(_WORD *)(v1875 + 8);
              }
              v1878 = sub_1CCFDED5C(v1870, 148, (const llvm::APInt *)&v3813, v1860, v881, v3707, v3698, v1873, (uint64_t)v1871, v1872, v1874);
              v1879 = *(void **)(a3 + 16);
              uint64_t v1880 = *(void *)(v8 + 32);
              uint64_t v1881 = *(void *)(v1880 + 80);
              uint64_t v1882 = *(void *)(v1880 + 88);
              uint64_t v1883 = v1879[104];
              if (v1883) {
                LOWORD(v1883) = *(_WORD *)(v1883 + 8);
              }
              v1885 = sub_1CD7F5D38(v1879, (const char *)0xC1, (const llvm::APInt *)&v3813, (llvm *)5, 0, (uint64_t)v1867, v1869, v1877, (uint64_t)v1878, v1876, v1881, v1882, SHIDWORD(v1882), v1883);
              __int16 v1886 = 0;
              v1887 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v1888 = *((void *)v1887 + 104);
              if (v1888) {
                __int16 v1886 = *(_WORD *)(v1888 + 8);
              }
              v1889 = sub_1CD7F3564(v1887, (const char *)0xC9, (uint64_t)&v3813, (llvm *)2, 0, (uint64_t)v1885, v1884, v1886);
              v1891 = v1890;
              sub_1CCEF0788(*(void *)a3, (uint64_t)v1867);
              sub_1CCEF0788(*(void *)a3, (uint64_t)v1878);
              sub_1CCEF0788(*(void *)a3, (uint64_t)v1885);
              sub_1CCEF0788(*(void *)a3, (uint64_t)v1889);
              if (LODWORD(v3793[1]) >= (unint64_t)HIDWORD(v3793[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1892 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
              *v1892 = v1889;
              v1892[1] = v1891;
              unsigned int v1858 = ++LODWORD(v3793[1]);
              ++v1859;
            }
            while (v3694 != v1859);
          }
          else
          {
            unsigned int v1858 = v3793[1];
          }
          v1893 = *(void **)(a3 + 16);
          uint64_t v1894 = v1858;
          uint64_t v1895 = v1893[104];
          if (v1895) {
            uint64_t v1896 = *(unsigned __int16 *)(v1895 + 8);
          }
          else {
            uint64_t v1896 = 0;
          }
          *(void *)&long long v3791 = sub_1CD7FF4E8(v1893, (const char *)0x92, (const llvm::APInt *)&v3813, (llvm *)v3815, *((uint64_t *)&v3815 + 1), (uint64_t *)v3793[0], v1894, v1896);
          *((void *)&v3791 + 1) = v1897;
          uint64_t v1292 = v3813;
          if (!(void)v3813) {
            goto LABEL_1415;
          }
          int v1293 = *(unsigned __int8 *)v3813;
          if ((v1293 - 4) > 0x1E)
          {
            if ((v1293 - 3) >= 0xFFFFFFFE) {
              uint64_t v2246 = v3813;
            }
            else {
              uint64_t v2246 = 0;
            }
            if ((v1293 - 3) < 0xFFFFFFFE) {
              goto LABEL_2401;
            }
            unint64_t v1899 = v2246 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v3813 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3813 + 12)) {
              goto LABEL_1415;
            }
            uint64_t v1898 = *(void *)(v3813 + 16);
            if ((v1898 & 4) == 0) {
              goto LABEL_1415;
            }
            unint64_t v1899 = v1898 & 0xFFFFFFFFFFFFFFF8;
            if (!v1899) {
              goto LABEL_1415;
            }
          }
          *(void *)&long long v3821 = &v3813;
          uint64_t v1626 = v1899 + 16;
          v1627 = &v3821;
          goto LABEL_1804;
        case 0xC9:
          uint64_t v423 = *(uint64_t **)(v8 + 32);
          uint64_t v424 = *v423;
          uint64_t v425 = v423[1];
          int v426 = *(unsigned __int16 *)(*v423 + 24);
          if (((v426 - 56) < 3 || v426 == 175) && sub_1CB8D66E8(v424, v425, a3))
          {
            uint64_t v1087 = *(void *)(v8 + 40);
            v1088 = *(llvm **)v1087;
            uint64_t v1089 = *(void *)(v1087 + 8);
            v1090 = *(llvm::APFloatBase **)(a3 + 16);
            v1091 = *(uint64_t **)(v424 + 32);
            uint64_t v1092 = *v1091;
            v1093 = (void *)v1091[1];
            uint64_t v1094 = *((void *)v1090 + 104);
            if (v1094) {
              __int16 v1095 = *(_WORD *)(v1094 + 8);
            }
            else {
              __int16 v1095 = 0;
            }
            v1294 = sub_1CD7F3564(v1090, (const char *)0xC9, (uint64_t)&v3789, v1088, v1089, v1092, v1093, v1095);
            uint64_t v1296 = v1295;
            v1297 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1298 = *(void *)(v424 + 32);
            uint64_t v1299 = *(void *)(v1298 + 40);
            v1300 = *(void **)(v1298 + 48);
            uint64_t v1301 = *((void *)v1297 + 104);
            if (v1301) {
              __int16 v1302 = *(_WORD *)(v1301 + 8);
            }
            else {
              __int16 v1302 = 0;
            }
            v1303 = sub_1CD7F3564(v1297, (const char *)0xC9, (uint64_t)&v3789, v1088, v1089, v1299, v1300, v1302);
            uint64_t v1305 = v1304;
            sub_1CCEF0788(*(void *)a3, (uint64_t)v1294);
            sub_1CCEF0788(*(void *)a3, (uint64_t)v1303);
            uint64_t v522 = *(void *)(a3 + 16);
            uint64_t v523 = *(unsigned __int16 *)(v424 + 24);
            uint64_t v1306 = *(void *)(v522 + 832);
            if (v1306) {
              LOWORD(v1306) = *(_WORD *)(v1306 + 8);
            }
            uint64_t v3652 = v1305;
            __int16 v3657 = v1306;
            uint64_t v3647 = (uint64_t)v1303;
LABEL_1424:
            uint64_t v524 = (uint64_t)v1088;
            uint64_t v525 = v1089;
            uint64_t v514 = v1294;
            goto LABEL_1425;
          }
          if (!*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
            goto LABEL_3081;
          }
          int v427 = **(unsigned __int8 **)(v8 + 40);
          if (v427 == 5)
          {
            if (*(unsigned char *)(*(void *)(v424 + 40) + 16 * v425) == 6 && *(_WORD *)(v424 + 24) == 177)
            {
              v712 = *(uint64_t **)(v424 + 32);
              uint64_t v713 = v712[5];
              int v714 = *(unsigned __int16 *)(v713 + 24);
              if (v714 == 35 || v714 == 11)
              {
                uint64_t v716 = *(void *)(v713 + 80);
                v717 = (void *)(v716 + 24);
                if (*(_DWORD *)(v716 + 32) >= 0x41u) {
                  v717 = (void *)*v717;
                }
                if (*v717 == 32)
                {
                  uint64_t v718 = *v712;
                  v719 = (void *)v712[1];
                  v720 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                  uint64_t v722 = v721;
                  __int16 v723 = 0;
                  v724 = *(llvm::APFloatBase **)(a3 + 16);
                  uint64_t v725 = *((void *)v724 + 104);
                  if (v725) {
                    __int16 v723 = *(_WORD *)(v725 + 8);
                  }
                  uint64_t v514 = sub_1CD7F3564(v724, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x31, 0, v718, v719, v723);
                  uint64_t v526 = v726;
                  uint64_t v522 = *(void *)(a3 + 16);
                  uint64_t v727 = *(void *)(v522 + 832);
                  if (v727) {
                    LOWORD(v727) = *(_WORD *)(v727 + 8);
                  }
                  uint64_t v3652 = v722;
                  __int16 v3657 = v727;
                  uint64_t v3647 = (uint64_t)v720;
                  uint64_t v523 = 437;
LABEL_706:
                  uint64_t v524 = 5;
                  uint64_t v525 = 0;
                  goto LABEL_1675;
                }
              }
            }
          }
          else
          {
            if (v427 != 4) {
              goto LABEL_3081;
            }
            int v428 = *(unsigned __int8 *)(*(void *)(v424 + 40) + 16 * v425);
            if (v428 == 5)
            {
              if (*(_WORD *)(v424 + 24) != 395) {
                goto LABEL_3081;
              }
              int v41 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v1011 = *(void *)(v424 + 32);
              uint64_t v36 = *(void **)v1011;
              uint64_t v38 = *(void **)(v1011 + 8);
              uint64_t v1012 = *((void *)v41 + 104);
              if (v1012) {
                __int16 v39 = *(_WORD *)(v1012 + 8);
              }
              else {
                __int16 v39 = 0;
              }
              uint64_t v42 = 395;
              goto LABEL_31;
            }
            if (v428 == 6 && *(_WORD *)(v424 + 24) == 216)
            {
              uint64_t v429 = **(void **)(v424 + 32);
              if (*(_WORD *)(v429 + 24) == 146 && **(unsigned char **)(v429 + 40) == 49)
              {
                int v41 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v430 = *(void *)(v429 + 32);
                uint64_t v36 = *(void **)v430;
                uint64_t v38 = *(void **)(v430 + 8);
                uint64_t v431 = *((void *)v41 + 104);
                if (v431) {
                  __int16 v39 = *(_WORD *)(v431 + 8);
                }
                else {
                  __int16 v39 = 0;
                }
                goto LABEL_30;
              }
            }
          }
          goto LABEL_3081;
        case 0xCA:
        case 0xCB:
          int64_t v52 = *(unsigned int **)(v8 + 32);
          uint64_t v53 = *(void *)v52;
          if (*(unsigned char *)(*(void *)(*(void *)v52 + 40) + 16 * v52[2]) != 5) {
            goto LABEL_3081;
          }
          int v54 = *(uint64_t **)(v8 + 40);
          uint64_t v56 = *v54;
          uint64_t v55 = v54[1];
          int v57 = *(unsigned __int16 *)(v53 + 24);
          if (v57 == 171)
          {
            uint64_t v652 = *(uint64_t **)(v53 + 32);
            uint64_t v653 = v652[5];
            int v654 = *(unsigned __int16 *)(v653 + 24);
            if (v654 != 35 && v654 != 11) {
              goto LABEL_3081;
            }
            uint64_t v656 = *(void *)(v653 + 80);
            uint64_t v657 = (void *)(v656 + 24);
            if (*(_DWORD *)(v656 + 32) >= 0x41u) {
              uint64_t v657 = (void *)*v657;
            }
            if (*v657 != 0xFFFFLL) {
              goto LABEL_3081;
            }
            uint64_t v658 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v659 = *v652;
            uint64_t v660 = (void *)v652[1];
            uint64_t v661 = *((void *)v658 + 104);
            if (v661) {
              __int16 v662 = *(_WORD *)(v661 + 8);
            }
            else {
              __int16 v662 = 0;
            }
            uint64_t v36 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xC9, (uint64_t)&v3789, (llvm *)4, 0, v659, v660, v662);
            uint64_t v38 = v1771;
            __int16 v39 = 0;
            uint64_t v1772 = *((void *)v658 + 104);
            if (v1772) {
              __int16 v39 = *(_WORD *)(v1772 + 8);
            }
            int v41 = v658;
          }
          else
          {
            if (v57 != 199) {
              goto LABEL_3081;
            }
            int v58 = *(unsigned int **)(v53 + 32);
            uint64_t v36 = *(void **)v58;
            if (*(unsigned char *)(*(void *)(*(void *)v58 + 40) + 16 * v58[2]) != 4) {
              goto LABEL_3081;
            }
            int v41 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v38 = (void *)*((void *)v58 + 1);
            uint64_t v59 = *((void *)v41 + 104);
            if (v59) {
              __int16 v39 = *(_WORD *)(v59 + 8);
            }
            else {
              __int16 v39 = 0;
            }
          }
          uint64_t v42 = 203;
LABEL_1976:
          uint64_t v43 = v56;
          goto LABEL_1977;
        case 0xCC:
          uint64_t v370 = *(uint64_t **)(v8 + 32);
          uint64_t v372 = *v370;
          uint64_t v371 = (void *)v370[1];
          int v373 = *(unsigned __int16 *)(*v370 + 24);
          if (v373 != 192
            || ((v374 = *(void **)(v372 + 32), v375 = v374[10], int v376 = *(unsigned __int16 *)(v375 + 24), v376 != 35)
              ? (BOOL v377 = v376 == 11)
              : (BOOL v377 = 1),
                !v377
             || ((int v378 = *(unsigned __int16 *)(v374[15] + 24), v378 != 35) ? (v379 = v378 == 11) : (v379 = 1), !v379)))
          {
            if (*(unsigned char *)(v370[5] + 80) != 4) {
              goto LABEL_3081;
            }
            if (v373 == 395)
            {
              v1242 = *(llvm::APFloatBase **)(a3 + 16);
              v1243 = *(void **)(v372 + 64);
              v3793[0] = v1243;
              if (v1243) {
                llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1243, 2);
              }
              LODWORD(v3793[1]) = *(_DWORD *)(v372 + 60);
              v1244 = *(uint64_t **)(v372 + 32);
              uint64_t v1245 = *v1244;
              v1246 = (void *)v1244[1];
              uint64_t v1247 = *((void *)v1242 + 104);
              if (v1247) {
                __int16 v383 = *(_WORD *)(v1247 + 8);
              }
              else {
                __int16 v383 = 0;
              }
              v1462 = v1242;
              uint64_t v1463 = 395;
            }
            else
            {
              if (*(int *)(a3 + 8) < 3 || **(unsigned char **)(v8 + 40) != 5) {
                goto LABEL_3081;
              }
              int v380 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v381 = *(void **)(v8 + 64);
              v3793[0] = v381;
              if (v381)
              {
                llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v381, 2);
                int v12 = *(_DWORD *)(v8 + 60);
              }
              LODWORD(v3793[1]) = v12;
              uint64_t v382 = *((void *)v380 + 104);
              if (v382) {
                __int16 v383 = *(_WORD *)(v382 + 8);
              }
              else {
                __int16 v383 = 0;
              }
              v1462 = v380;
              uint64_t v1463 = 201;
              uint64_t v1245 = v372;
              v1246 = v371;
            }
            v1603 = sub_1CD7F3564(v1462, (const char *)v1463, (uint64_t)v3793, (llvm *)4, 0, v1245, v1246, v383);
            goto LABEL_1902;
          }
          uint64_t v1130 = *(void *)(a3 + 16);
          v1131 = *(void **)(v8 + 64);
          v3793[0] = v1131;
          if (v1131)
          {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1131, 2);
            int v12 = *(_DWORD *)(v8 + 60);
            uint64_t v374 = *(void **)(v372 + 32);
            uint64_t v375 = v374[10];
            uint64_t v370 = *(uint64_t **)(v8 + 32);
          }
          LODWORD(v3793[1]) = v12;
          uint64_t v1132 = *(void *)(v372 + 40) + 16 * v371;
          v1133 = *(llvm **)v1132;
          uint64_t v1134 = *(void *)(v1132 + 8);
          uint64_t v1135 = v374[11];
          uint64_t v1136 = v370[5];
          uint64_t v1137 = v370[6];
          uint64_t v1138 = *(void *)(v1130 + 832);
          if (v1138) {
            LOWORD(v1138) = *(_WORD *)(v1138 + 8);
          }
          v1140 = sub_1CCFDED5C(v1130, 204, (const llvm::APInt *)v3793, v1133, v1134, v375, v1135, a8, v1136, v1137, v1138);
          int v1142 = v1141;
          if (!v3793[0]) {
            goto LABEL_1258;
          }
          int v1143 = *(unsigned __int8 *)v3793[0];
          if ((v1143 - 4) > 0x1E)
          {
            if ((v1143 - 3) >= 0xFFFFFFFE) {
              v1906 = v3793[0];
            }
            else {
              v1906 = 0;
            }
            if ((v1143 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v1907 = (unint64_t)v1906 + 8;
LABEL_2035:
              *(void *)&long long v3815 = v3793;
              sub_1CC5FA668(v1907 + 16, &v3815);
              goto LABEL_1258;
            }
            if (v1143 == 3) {
              *((void *)v3793[0] + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v3793[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3793[0] + 3))
          {
            uint64_t v3624 = *((void *)v3793[0] + 2);
            if ((v3624 & 4) != 0)
            {
              unint64_t v1907 = v3624 & 0xFFFFFFFFFFFFFFF8;
              if (v1907) {
                goto LABEL_2035;
              }
            }
          }
LABEL_1258:
          uint64_t v1144 = v371;
          uint64_t v1145 = *(void *)(a3 + 16);
          v1146 = *(void **)(v8 + 64);
          v3793[0] = v1146;
          if (v1146) {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1146, 2);
          }
          LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
          uint64_t v1147 = *(void *)(v372 + 32);
          uint64_t v1148 = *(void *)(v372 + 40) + 16 * v1144;
          v1149 = *(llvm **)v1148;
          uint64_t v1150 = *(void *)(v1148 + 8);
          uint64_t v1151 = *(void *)(v1147 + 120);
          uint64_t v1152 = *(void *)(v1147 + 128);
          uint64_t v1153 = *(void *)(v8 + 32);
          uint64_t v1154 = *(void *)(v1153 + 40);
          uint64_t v1155 = *(void *)(v1153 + 48);
          uint64_t v1156 = *(void *)(v1145 + 832);
          if (v1156) {
            LOWORD(v1156) = *(_WORD *)(v1156 + 8);
          }
          v1158 = sub_1CCFDED5C(v1145, 204, (const llvm::APInt *)v3793, v1149, v1150, v1151, v1152, v1139, v1154, v1155, v1156);
          int v1160 = v1159;
          if (!v3793[0]) {
            goto LABEL_1266;
          }
          int v1161 = *(unsigned __int8 *)v3793[0];
          if ((v1161 - 4) > 0x1E)
          {
            if ((v1161 - 3) >= 0xFFFFFFFE) {
              v1908 = v3793[0];
            }
            else {
              v1908 = 0;
            }
            if ((v1161 - 3) < 0xFFFFFFFE)
            {
              if (v1161 == 3) {
                *((void *)v3793[0] + 1) = 0;
              }
              goto LABEL_1266;
            }
            unint64_t v1909 = (unint64_t)v1908 + 8;
          }
          else
          {
            if ((*((unsigned char *)v3793[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3793[0] + 3)) {
              goto LABEL_1266;
            }
            uint64_t v3625 = *((void *)v3793[0] + 2);
            if ((v3625 & 4) == 0) {
              goto LABEL_1266;
            }
            unint64_t v1909 = v3625 & 0xFFFFFFFFFFFFFFF8;
            if (!v1909) {
              goto LABEL_1266;
            }
          }
          *(void *)&long long v3815 = v3793;
          sub_1CC5FA668(v1909 + 16, &v3815);
LABEL_1266:
          v1162 = *(void **)(a3 + 16);
          v1163 = *(void **)(v8 + 64);
          v3793[0] = v1163;
          if (v1163) {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1163, 2);
          }
          LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
          v1164 = *(uint64_t **)(v372 + 32);
          uint64_t v557 = sub_1CD7F6564(v1162, (const char *)0xC0, (const llvm::APInt *)v3793, *(llvm **)(*(void *)(v372 + 40) + 16 * v1144), *(void *)(*(void *)(v372 + 40) + 16 * v1144 + 8), *v1164, v1164[1], v1157, v1164[5], v1164[6], (uint64_t)v1140, v1142, (uint64_t)v1158, v1160, v1164[20], v1164[21]);
          goto LABEL_1915;
        default:
          goto LABEL_3081;
      }
    }
    switch(*(_WORD *)(v8 + 24))
    {
      case 0xAB:
        v1013 = *(uint64_t **)(v8 + 40);
        uint64_t v1014 = *v1013;
        uint64_t v20 = v1013[1];
        v3793[0] = 0;
        LODWORD(v3793[1]) = 0;
        if (sub_1CD3DD0E4((uint64_t)v3793, v8, a3))
        {
          long long v176 = *(_OWORD *)v3793;
          goto LABEL_1104;
        }
        if (v1014 == 5)
        {
          v1219 = *(uint64_t **)(v8 + 32);
          uint64_t v1220 = v1219[5];
          int v1221 = *(unsigned __int16 *)(v1220 + 24);
          if (v1221 == 35 || v1221 == 11)
          {
            uint64_t v1223 = *(void *)(v1220 + 80);
            v1224 = (void *)(v1223 + 24);
            if (*(_DWORD *)(v1223 + 32) >= 0x41u) {
              v1224 = (void *)*v1224;
            }
            if (*v1224 == 0xFFFFLL)
            {
              uint64_t v1225 = *v1219;
              int v1226 = *(unsigned __int16 *)(*v1219 + 24);
              if ((v1226 - 56) < 3 || v1226 == 175)
              {
                if (sub_1CB8D66E8(*v1219, v1219[1], v1015))
                {
                  v3153 = *(llvm::APFloatBase **)(a3 + 16);
                  v3154 = *(uint64_t **)(v1225 + 32);
                  uint64_t v3155 = *v3154;
                  v3156 = (void *)v3154[1];
                  uint64_t v3157 = *((void *)v3153 + 104);
                  if (v3157) {
                    __int16 v3158 = *(_WORD *)(v3157 + 8);
                  }
                  else {
                    __int16 v3158 = 0;
                  }
                  v3358 = sub_1CD7F3564(v3153, (const char *)0xC9, (uint64_t)&v3789, (llvm *)4, 0, v3155, v3156, v3158);
                  uint64_t v3360 = v3359;
                  __int16 v3361 = 0;
                  v3362 = *(llvm::APFloatBase **)(a3 + 16);
                  uint64_t v3363 = *(void *)(v1225 + 32);
                  uint64_t v3364 = *(void *)(v3363 + 40);
                  v3365 = *(void **)(v3363 + 48);
                  uint64_t v3366 = *((void *)v3362 + 104);
                  if (v3366) {
                    __int16 v3361 = *(_WORD *)(v3366 + 8);
                  }
                  v3367 = sub_1CD7F3564(v3362, (const char *)0xC9, (uint64_t)&v3789, (llvm *)4, 0, v3364, v3365, v3361);
                  uint64_t v3369 = v3368;
                  sub_1CCEF0788(*(void *)a3, (uint64_t)v3358);
                  sub_1CCEF0788(*(void *)a3, (uint64_t)v3367);
                  __int16 v3371 = 0;
                  uint64_t v3372 = *(void *)(a3 + 16);
                  uint64_t v3373 = *(void *)(v3372 + 832);
                  if (v3373) {
                    __int16 v3371 = *(_WORD *)(v3373 + 8);
                  }
                  uint64_t v36 = sub_1CCFDED5C(v3372, *(unsigned __int16 *)(v1225 + 24), (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v3358, v3360, v3370, (uint64_t)v3367, v3369, v3371);
                  uint64_t v38 = v3374;
                  __int16 v39 = 0;
                  int v41 = *(llvm::APFloatBase **)(a3 + 16);
                  uint64_t v3375 = *((void *)v41 + 104);
                  if (v3375) {
                    __int16 v39 = *(_WORD *)(v3375 + 8);
                  }
                  uint64_t v42 = 199;
                  uint64_t v43 = v1014;
LABEL_2464:
                  v1311 = (void *)v20;
LABEL_2209:
                  uint64_t v29 = (uint64_t)sub_1CD7F3564(v41, (const char *)v42, (uint64_t)&v3789, (llvm *)v43, (uint64_t)v1311, (uint64_t)v36, v38, v39);
                  goto LABEL_2210;
                }
              }
            }
          }
        }
        if (**(unsigned char **)(v8 + 40) != 5) {
          goto LABEL_3081;
        }
        v1227 = *(void **)(v8 + 32);
        uint64_t v1228 = v1227[5];
        int v1229 = *(unsigned __int16 *)(v1228 + 24);
        if (v1229 != 35 && v1229 != 11) {
          goto LABEL_3081;
        }
        uint64_t v1231 = *v1227;
        if (*(_WORD *)(*v1227 + 24) != 395) {
          goto LABEL_3081;
        }
        uint64_t v1232 = *(void *)(v1228 + 80);
        if (*(_DWORD *)(v1232 + 32) > 0x40u) {
          unint64_t v1233 = **(void **)(v1232 + 24);
        }
        else {
          unint64_t v1233 = *(void *)(v1232 + 24);
        }
        if (v1233 != 0xFFFF)
        {
          if (v1233 > 0xFFFE) {
            goto LABEL_3081;
          }
          v2133 = *(llvm::APFloatBase **)(a3 + 16);
          v2134 = *(unsigned __int8 **)(v1231 + 64);
          *(void *)&long long v3815 = v2134;
          uint64_t v2135 = v1231;
          if (v2134)
          {
            llvm::MetadataTracking::track((uint64_t)&v3815, v2134, 2);
            uint64_t v2135 = **(void **)(v8 + 32);
          }
          DWORD2(v3815) = *(_DWORD *)(v1231 + 60);
          v2136 = *(uint64_t **)(v2135 + 32);
          uint64_t v2137 = *v2136;
          v2138 = (void *)v2136[1];
          uint64_t v2139 = *((void *)v2133 + 104);
          if (v2139) {
            __int16 v2140 = *(_WORD *)(v2139 + 8);
          }
          else {
            __int16 v2140 = 0;
          }
          v3306 = sub_1CD7F3564(v2133, (const char *)0x18B, (uint64_t)&v3815, (llvm *)4, 0, v2137, v2138, v2140);
          uint64_t v3308 = v3307;
          if (!(void)v3815) {
            goto LABEL_3294;
          }
          int v3309 = *(unsigned __int8 *)v3815;
          if ((v3309 - 4) > 0x1E)
          {
            if ((v3309 - 3) >= 0xFFFFFFFE) {
              uint64_t v3493 = v3815;
            }
            else {
              uint64_t v3493 = 0;
            }
            if ((v3309 - 3) < 0xFFFFFFFE)
            {
              if (v3309 == 3) {
                *(void *)(v3815 + 8) = 0;
              }
              goto LABEL_3294;
            }
            unint64_t v3494 = v3493 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v3815 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3815 + 12)) {
              goto LABEL_3294;
            }
            uint64_t v3641 = *(void *)(v3815 + 16);
            if ((v3641 & 4) == 0) {
              goto LABEL_3294;
            }
            unint64_t v3494 = v3641 & 0xFFFFFFFFFFFFFFF8;
            if (!v3494) {
              goto LABEL_3294;
            }
          }
          *(void *)&long long v3813 = &v3815;
          sub_1CC5FA668(v3494 + 16, &v3813);
LABEL_3294:
          uint64_t v3310 = *(void *)(a3 + 16);
          uint64_t v3311 = *(void *)(*(void *)(*(void *)(v8 + 32) + 40) + 80);
          v3312 = (uint64_t *)(v3311 + 24);
          if (*(_DWORD *)(v3311 + 32) >= 0x41u) {
            v3312 = (uint64_t *)*v3312;
          }
          v3313 = sub_1CD7EBF14(*(void *)(a3 + 16), *v3312, (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
          __int16 v3316 = 0;
          uint64_t v3317 = *(void *)(v3310 + 832);
          if (v3317) {
            __int16 v3316 = *(_WORD *)(v3317 + 8);
          }
          v3318 = sub_1CCFDED5C(v3310, 171, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v3306, v3308, v3315, (uint64_t)v3313, v3314, v3316);
          unint64_t v3320 = v3308 & 0xFFFFFFFF00000000 | v3319;
          v3321 = *(llvm::APFloatBase **)(a3 + 16);
          v3322 = *(unsigned __int8 **)(v8 + 64);
          *(void *)&long long v3815 = v3322;
          if (v3322) {
            llvm::MetadataTracking::track((uint64_t)&v3815, v3322, 2);
          }
          DWORD2(v3815) = *(_DWORD *)(v8 + 60);
          uint64_t v3323 = *((void *)v3321 + 104);
          if (v3323) {
            __int16 v3288 = *(_WORD *)(v3323 + 8);
          }
          else {
            __int16 v3288 = 0;
          }
          v3289 = v3321;
          uint64_t v3290 = (uint64_t)v3318;
          v3291 = (void *)v3320;
          goto LABEL_3304;
        }
        v3034 = *(llvm::APFloatBase **)(a3 + 16);
        v3035 = *(unsigned __int8 **)(v1231 + 64);
        *(void *)&long long v3815 = v3035;
        uint64_t v3036 = v1231;
        if (v3035)
        {
          llvm::MetadataTracking::track((uint64_t)&v3815, v3035, 2);
          uint64_t v3036 = **(void **)(v8 + 32);
        }
        DWORD2(v3815) = *(_DWORD *)(v1231 + 60);
        v3037 = *(uint64_t **)(v3036 + 32);
        uint64_t v3038 = *v3037;
        v3039 = (void *)v3037[1];
        uint64_t v3040 = *((void *)v3034 + 104);
        if (v3040) {
          __int16 v3041 = *(_WORD *)(v3040 + 8);
        }
        else {
          __int16 v3041 = 0;
        }
        v3281 = sub_1CD7F3564(v3034, (const char *)0x18B, (uint64_t)&v3815, (llvm *)4, 0, v3038, v3039, v3041);
        v3283 = v3282;
        if (!(void)v3815) {
          goto LABEL_3277;
        }
        int v3284 = *(unsigned __int8 *)v3815;
        if ((v3284 - 4) > 0x1E)
        {
          if ((v3284 - 3) >= 0xFFFFFFFE) {
            uint64_t v3491 = v3815;
          }
          else {
            uint64_t v3491 = 0;
          }
          if ((v3284 - 3) < 0xFFFFFFFE)
          {
            if (v3284 == 3) {
              *(void *)(v3815 + 8) = 0;
            }
            goto LABEL_3277;
          }
          unint64_t v3492 = v3491 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v3815 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3815 + 12)) {
            goto LABEL_3277;
          }
          uint64_t v3640 = *(void *)(v3815 + 16);
          if ((v3640 & 4) == 0) {
            goto LABEL_3277;
          }
          unint64_t v3492 = v3640 & 0xFFFFFFFFFFFFFFF8;
          if (!v3492) {
            goto LABEL_3277;
          }
        }
        *(void *)&long long v3813 = &v3815;
        sub_1CC5FA668(v3492 + 16, &v3813);
LABEL_3277:
        v3285 = *(llvm::APFloatBase **)(a3 + 16);
        v3286 = *(unsigned __int8 **)(v8 + 64);
        *(void *)&long long v3815 = v3286;
        if (v3286) {
          llvm::MetadataTracking::track((uint64_t)&v3815, v3286, 2);
        }
        DWORD2(v3815) = *(_DWORD *)(v8 + 60);
        uint64_t v3287 = *((void *)v3285 + 104);
        if (v3287) {
          __int16 v3288 = *(_WORD *)(v3287 + 8);
        }
        else {
          __int16 v3288 = 0;
        }
        v3289 = v3285;
        uint64_t v3290 = (uint64_t)v3281;
        v3291 = v3283;
LABEL_3304:
        *(void *)&long long v3791 = sub_1CD7F3564(v3289, (const char *)0xC7, (uint64_t)&v3815, (llvm *)5, 0, v3290, v3291, v3288);
        *((void *)&v3791 + 1) = v3324;
        v858 = (unsigned __int8 *)v3815;
        if (!(void)v3815) {
          goto LABEL_3082;
        }
        int v859 = *(unsigned __int8 *)v3815;
        if ((v859 - 4) > 0x1E)
        {
          if ((v859 - 3) >= 0xFFFFFFFE) {
            uint64_t v3403 = v3815;
          }
          else {
            uint64_t v3403 = 0;
          }
          if ((v859 - 3) < 0xFFFFFFFE) {
            goto LABEL_3395;
          }
          unint64_t v3326 = v3403 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v3815 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3815 + 12)) {
            goto LABEL_3082;
          }
          uint64_t v3325 = *(void *)(v3815 + 16);
          if ((v3325 & 4) == 0) {
            goto LABEL_3082;
          }
          unint64_t v3326 = v3325 & 0xFFFFFFFFFFFFFFF8;
          if (!v3326) {
            goto LABEL_3082;
          }
        }
        *(void *)&long long v3813 = &v3815;
        uint64_t v1524 = v3326 + 16;
        v1525 = &v3813;
        goto LABEL_1929;
      case 0xAC:
        *(void *)&long long v3813 = 0;
        DWORD2(v3813) = 0;
        if (sub_1CD3DD0E4((uint64_t)&v3813, v8, a3))
        {
          long long v176 = v3813;
          goto LABEL_1104;
        }
        uint64_t v1977 = *(void *)(v8 + 40);
        v1979 = *(llvm **)v1977;
        uint64_t v1978 = *(void *)(v1977 + 8);
        if (sub_1CD7F3030(*(void *)(a3 + 16), v8)
          && sub_1CD7F3030(*(void *)(a3 + 16), **(void **)(v8 + 32)))
        {
          v3184 = *(void **)(v8 + 32);
          uint64_t v3185 = *(void *)(v3184[5] + 80);
          v3186 = (void *)(v3185 + 24);
          if (*(_DWORD *)(v3185 + 32) >= 0x41u) {
            v3186 = (void *)*v3186;
          }
          v3187 = (void *)*v3186;
          v3188 = *(uint64_t ***)(*v3184 + 32);
          uint64_t v3189 = v3188[5][10];
          v3190 = (void *)(v3189 + 24);
          if (*(_DWORD *)(v3189 + 32) >= 0x41u) {
            v3190 = (void *)*v3190;
          }
          uint64_t v3191 = *(void *)(a3 + 16);
          v3192 = *v3188;
          uint64_t v1296 = (uint64_t)v3188[1];
          v3193 = sub_1CD7EBF14(v3191, (uint64_t)v3187 + *v3190, (const llvm::APInt *)&v3789, v1979, v1978, 0, 0);
          uint64_t v3195 = *(void *)(v3191 + 832);
          if (v3195) {
            LOWORD(v3195) = *(_WORD *)(v3195 + 8);
          }
          uint64_t v3652 = v3194;
          __int16 v3657 = v3195;
          uint64_t v3647 = (uint64_t)v3193;
          uint64_t v522 = v3191;
          uint64_t v523 = 56;
          uint64_t v524 = (uint64_t)v1979;
          uint64_t v525 = v1978;
          uint64_t v514 = v3192;
LABEL_1425:
          uint64_t v526 = v1296;
          goto LABEL_1675;
        }
        if (v1979 - 7 <= 0xFFFFFFFD) {
          goto LABEL_3081;
        }
        uint64_t v1980 = 0;
        v1981 = *(uint64_t **)(v8 + 32);
        uint64_t v1982 = *v1981;
        unint64_t v3725 = v1981[1];
        uint64_t v3713 = v1981[5];
        uint64_t v3744 = v1981[6];
        if (v1979 == 6) {
          char v1983 = 5;
        }
        else {
          char v1983 = 4;
        }
        LOBYTE(v3821) = v1983;
        *((void *)&v3821 + 1) = 0;
        do
        {
          v1984 = &v3793[v1980];
          *((_DWORD *)v1984 + 2) = 1;
          *v1984 = 0;
          *((_DWORD *)v1984 + 6) = 1;
          v1984[2] = 0;
          v1980 += 4;
        }
        while (v1980 != 8);
        uint64_t v1985 = 38;
        if (v1979 == 6) {
          uint64_t v1985 = 49;
        }
        v3702 = (llvm *)v1985;
        sub_1CD7F121C(*(void *)(a3 + 16), v1982, v3725, 0, (uint64_t)&v3815);
        if (LODWORD(v3793[1]) >= 0x41 && v3793[0]) {
          MEMORY[0x1D25D9CB0](v3793[0], 0x1000C8000313F17);
        }
        v1986 = (void *)v3815;
        v3793[0] = (void *)v3815;
        unsigned int v1987 = DWORD2(v3815);
        LODWORD(v3793[1]) = DWORD2(v3815);
        DWORD2(v3815) = 0;
        if (v3794 >= 0x41 && v3793[2])
        {
          MEMORY[0x1D25D9CB0](v3793[2], 0x1000C8000313F17);
          v3793[2] = v3816;
          LODWORD(v3794) = v3817;
          LODWORD(v3817) = 0;
          if (DWORD2(v3815) >= 0x41 && (void)v3815) {
            MEMORY[0x1D25D9CB0](v3815, 0x1000C8000313F17);
          }
        }
        else
        {
          v3793[2] = v3816;
          LODWORD(v3794) = v3817;
        }
        sub_1CD7F121C(*(void *)(a3 + 16), v3713, v3744, 0, (uint64_t)&v3815);
        if (v3795 >= 0x41 && *((void *)&v3794 + 1)) {
          MEMORY[0x1D25D9CB0](*((void *)&v3794 + 1), 0x1000C8000313F17);
        }
        v1988 = (void *)v3815;
        *((void *)&v3794 + 1) = v3815;
        unsigned int v1989 = DWORD2(v3815);
        LODWORD(v3795) = DWORD2(v3815);
        DWORD2(v3815) = 0;
        if (v3797 >= 0x41 && v3796)
        {
          MEMORY[0x1D25D9CB0](v3796, 0x1000C8000313F17);
          v3796 = (const char *)v3816;
          LODWORD(v3797) = v3817;
          LODWORD(v3817) = 0;
          if (DWORD2(v3815) >= 0x41 && (void)v3815) {
            MEMORY[0x1D25D9CB0](v3815, 0x1000C8000313F17);
          }
        }
        else
        {
          v3796 = (const char *)v3816;
          LODWORD(v3797) = v3817;
        }
        if ((_BYTE)v3821) {
          unsigned int v1990 = sub_1CB87E200((unsigned __int8 *)&v3821);
        }
        else {
          unsigned int v1990 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3821);
        }
        unsigned int v3418 = v1990;
        if (v1991 == 1) {
        DWORD2(v3815) = v1987;
        }
        if (v1987 >= 0x41) {
          operator new[]();
        }
        char v3419 = v3418;
        if (v1987 == v3418) {
          char v3419 = 63;
        }
        uint64_t v3420 = (uint64_t)((void)v1986 << -(char)v1987) >> -(char)v1987 >> v3419;
        if (v1987) {
          unint64_t v3421 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1987;
        }
        else {
          unint64_t v3421 = 0;
        }
        *(void *)&long long v3815 = v3421 & v3420;
        if (v1987 && (void)v3815 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1987) {
          goto LABEL_3589;
        }
        if (*(_WORD *)(v3713 + 24) != 175) {
          goto LABEL_3589;
        }
        uint64_t v3454 = *(void *)(*(void *)(v3713 + 32) + 40);
        int v3455 = *(unsigned __int16 *)(v3454 + 24);
        if (v3455 != 35 && v3455 != 11) {
          goto LABEL_3589;
        }
        uint64_t v3456 = *(void *)(v3454 + 80);
        v3457 = (void *)(v3456 + 24);
        if (*(_DWORD *)(v3456 + 32) >= 0x41u) {
          v3457 = (void *)*v3457;
        }
        v3458 = (void *)*v3457;
        if ((_BYTE)v3821) {
          uint64_t v3459 = sub_1CB87E200((unsigned __int8 *)&v3821);
        }
        else {
          uint64_t v3459 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3821);
        }
        uint64_t v3553 = v3459;
        if (v3460 == 1) {
        if (DWORD2(v3815) >= 0x41 && (void)v3815)
        }
          MEMORY[0x1D25D9CB0](v3815, 0x1000C8000313F17);
        if (v3458 == (void *)v3553)
        {
          uint64_t v3554 = v3713;
          uint64_t v3713 = v1982;
        }
        else
        {
LABEL_3589:
          unint64_t v3725 = v3725 & 0xFFFFFFFF00000000 | v3744;
          v3744 &= 0xFFFFFFFF00000000;
          v3793[0] = v1988;
          *((void *)&v3794 + 1) = v1986;
          LODWORD(v3795) = v1987;
          v1986 = v1988;
          unsigned int v1987 = v1989;
          uint64_t v3554 = v1982;
          LODWORD(v3793[1]) = v1989;
        }
        if ((_BYTE)v3821) {
          unsigned int v3555 = sub_1CB87E200((unsigned __int8 *)&v3821);
        }
        else {
          unsigned int v3555 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3821);
        }
        unsigned int v3557 = v3555;
        if (v3556 == 1) {
        DWORD2(v3815) = v1987;
        }
        if (v1987 >= 0x41) {
          operator new[]();
        }
        char v3558 = v3557;
        if (v1987 == v3557) {
          char v3558 = 63;
        }
        uint64_t v3559 = (uint64_t)((void)v1986 << -(char)v1987) >> -(char)v1987 >> v3558;
        if (v1987) {
          unint64_t v3560 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1987;
        }
        else {
          unint64_t v3560 = 0;
        }
        *(void *)&long long v3815 = v3560 & v3559;
        if (v1987 && (void)v3815 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v1987) {
          goto LABEL_3618;
        }
        if (*(_WORD *)(v3554 + 24) != 175) {
          goto LABEL_3618;
        }
        uint64_t v3561 = *(void *)(*(void *)(v3554 + 32) + 40);
        int v3562 = *(unsigned __int16 *)(v3561 + 24);
        if (v3562 != 35 && v3562 != 11) {
          goto LABEL_3618;
        }
        uint64_t v3563 = *(void *)(v3561 + 80);
        v3564 = (void *)(v3563 + 24);
        if (*(_DWORD *)(v3563 + 32) >= 0x41u) {
          v3564 = (void *)*v3564;
        }
        v3565 = (void *)*v3564;
        if ((_BYTE)v3821) {
          uint64_t v3566 = sub_1CB87E200((unsigned __int8 *)&v3821);
        }
        else {
          uint64_t v3566 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v3821);
        }
        uint64_t v3568 = v3566;
        if (v3567 == 1) {
        if (DWORD2(v3815) >= 0x41 && (void)v3815)
        }
          MEMORY[0x1D25D9CB0](v3815, 0x1000C8000313F17);
        if (v3565 == (void *)v3568)
        {
          v3588 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v3589 = *((void *)v3588 + 104);
          if (v3589) {
            __int16 v3590 = *(_WORD *)(v3589 + 8);
          }
          else {
            __int16 v3590 = 0;
          }
          v3603 = sub_1CD7F3564(v3588, (const char *)0xC9, (uint64_t)&v3789, (llvm *)v3821, *((uint64_t *)&v3821 + 1), v3713, (void *)v3725, v3590);
          unint64_t v3605 = v3725 & 0xFFFFFFFF00000000 | v3604;
          v3606 = *(llvm::APFloatBase **)(a3 + 16);
          v3607 = *(uint64_t **)(v3554 + 32);
          uint64_t v3608 = *v3607;
          v3609 = (void *)v3607[1];
          uint64_t v3610 = *((void *)v3606 + 104);
          if (v3610) {
            __int16 v3611 = *(_WORD *)(v3610 + 8);
          }
          else {
            __int16 v3611 = 0;
          }
          v3612 = sub_1CD7F3564(v3606, (const char *)0xC9, (uint64_t)&v3789, (llvm *)v3821, *((uint64_t *)&v3821 + 1), v3608, v3609, v3611);
          unint64_t v3752 = v3744 & 0xFFFFFFFF00000000 | v3614;
          uint64_t v3615 = *(void *)(a3 + 16);
          uint64_t v3616 = *(void *)(v3615 + 832);
          if (v3616) {
            LOWORD(v3616) = *(_WORD *)(v3616 + 8);
          }
          v3618 = sub_1CCFDED5C(v3615, 146, (const llvm::APInt *)&v3789, v3702, 0, (uint64_t)v3603, v3605, v3613, (uint64_t)v3612, v3752, v3616);
          __int16 v3619 = 0;
          v3620 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v3621 = *((void *)v3620 + 104);
          if (v3621) {
            __int16 v3619 = *(_WORD *)(v3621 + 8);
          }
          char v897 = 0;
          *(void *)&long long v3791 = sub_1CD7F3564(v3620, (const char *)0xD8, (uint64_t)&v3789, v1979, v1978, (uint64_t)v3618, v3617, v3619);
          *((void *)&v3791 + 1) = v3622;
        }
        else
        {
LABEL_3618:
          char v897 = 1;
        }
        for (uint64_t j = 0; j != -8; j -= 4)
        {
          v3570 = &v3793[j];
          if (*(_DWORD *)((char *)&v3797 + j * 8) >= 0x41u)
          {
            v3571 = v3570[6];
            if (v3571) {
              MEMORY[0x1D25D9CB0](v3571, 0x1000C8000313F17);
            }
          }
          if (*((_DWORD *)v3570 + 10) >= 0x41u)
          {
            v3572 = v3570[4];
            if (v3572) {
              MEMORY[0x1D25D9CB0](v3572, 0x1000C8000313F17);
            }
          }
        }
        goto LABEL_3080;
      case 0xAD:
        *(void *)&long long v3791 = 0;
        DWORD2(v3791) = 0;
        if ((sub_1CD3DCE78((uint64_t)&v3791, v8, a3, a4, a5, a6, a7, a8) & 1) == 0) {
          goto LABEL_3081;
        }
        goto LABEL_3082;
      case 0xAE:
        goto LABEL_3081;
      case 0xAF:
        uint64_t v73 = *(uint64_t **)(v8 + 32);
        uint64_t v72 = *(void *)(v8 + 40);
        uint64_t v74 = *(llvm **)v72;
        uint64_t v75 = *v73;
        uint64_t v76 = v73[5];
        int v77 = *(unsigned __int16 *)(v76 + 24);
        if (v77 == 35 || v77 == 11) {
          uint64_t v79 = v73[5];
        }
        else {
          uint64_t v79 = 0;
        }
        if (*(void *)v72 == 6)
        {
          if (!v79 || !*(_DWORD *)(a3 + 8)) {
            goto LABEL_3081;
          }
          uint64_t v80 = *(void *)(v79 + 80);
          if (*(_DWORD *)(v80 + 32) > 0x40u)
          {
            unint64_t v81 = **(void **)(v80 + 24);
            if (v81 >= 0x20) {
              goto LABEL_975;
            }
          }
          else
          {
            unint64_t v81 = *(void *)(v80 + 24);
            if (v81 > 0x1F) {
              goto LABEL_975;
            }
          }
          if (v81 < 5 || *(_WORD *)(v75 + 24) != 199) {
            goto LABEL_3081;
          }
LABEL_975:
          uint64_t v29 = (uint64_t)sub_1CB8D6CA8(v8, 0, *(llvm::APFloatBase **)(a3 + 16));
          goto LABEL_2210;
        }
        if (*(void *)v72 != 4 || v79 == 0) {
          goto LABEL_3081;
        }
        uint64_t v602 = *(void *)(v75 + 48);
        if (!v602) {
          goto LABEL_3081;
        }
        uint64_t v603 = *(void *)(v72 + 8);
        int v604 = 1;
        uint64_t v605 = v73[6];
        do
        {
          if (*(_DWORD *)(v602 + 8) == *((_DWORD *)v73 + 2))
          {
            if (!v604) {
              goto LABEL_3081;
            }
            --v604;
          }
          uint64_t v602 = *(void *)(v602 + 32);
        }
        while (v602);
        if (v604 || *(_WORD *)(v75 + 24) != 56) {
          goto LABEL_3081;
        }
        uint64_t v606 = *(uint64_t **)(v75 + 32);
        uint64_t v607 = *v606;
        if (*(_WORD *)(*v606 + 24) == 58)
        {
          int v608 = *(unsigned __int16 *)(*(void *)(*(void *)(v607 + 32) + 40) + 24);
          if (v608 != 35 && v608 != 11) {
            goto LABEL_3081;
          }
        }
        uint64_t v610 = v606[5];
        if (*(_WORD *)(v610 + 24) == 58)
        {
          int v611 = *(unsigned __int16 *)(*(void *)(*(void *)(v610 + 32) + 40) + 24);
          if (v611 != 35 && v611 != 11) {
            goto LABEL_3081;
          }
        }
        uint64_t v613 = *(void *)(v8 + 48);
        if (!v613) {
          goto LABEL_3081;
        }
        while (1)
        {
          uint64_t v614 = *(void *)(v613 + 16);
          if ((*(_WORD *)(v614 + 24) & 0xFFFE) != 0x38) {
            break;
          }
          uint64_t v615 = 0;
          int v616 = 0;
          int v617 = 0;
          uint64_t v618 = *(void *)(v614 + 32);
          char v619 = 1;
          do
          {
            char v620 = v619;
            uint64_t v621 = *(void *)(v618 + 40 * v615);
            int v622 = *(unsigned __int16 *)(v621 + 24);
            if (v622 == 175)
            {
              uint64_t v625 = *(void *)(*(void *)(v621 + 32) + 40);
              int v626 = *(unsigned __int16 *)(v625 + 24);
              if (v626 == 35 || v626 == 11)
              {
                uint64_t v628 = *(void *)(v625 + 80);
                uint64_t v629 = (void *)(v628 + 24);
                if (*(_DWORD *)(v628 + 32) >= 0x41u) {
                  uint64_t v629 = (void *)*v629;
                }
                unsigned int v630 = *(_DWORD *)v629;
                if (*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
                  BOOL v631 = v630 > 4;
                }
                else {
                  BOOL v631 = 1;
                }
                if (v631) {
                  ++v616;
                }
              }
            }
            else if (v622 == 58)
            {
              int v623 = *(unsigned __int16 *)(*(void *)(*(void *)(v621 + 32) + 40) + 24);
              if (v623 == 35 || v623 == 11) {
                ++v616;
              }
              else {
                ++v617;
              }
            }
            char v619 = 0;
            uint64_t v615 = 1;
          }
          while ((v620 & 1) != 0);
          if ((v616 + v617) >= 2) {
            break;
          }
          uint64_t v613 = *(void *)(v613 + 32);
          if (!v613) {
            goto LABEL_3081;
          }
        }
        if (!*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
          goto LABEL_2437;
        }
        uint64_t v1826 = *(void *)(v79 + 80);
        if (*(_DWORD *)(v1826 + 32) > 0x40u)
        {
          unint64_t v1827 = **(void **)(v1826 + 24);
          if (v1827 >= 5) {
            goto LABEL_1981;
          }
        }
        else
        {
          unint64_t v1827 = *(void *)(v1826 + 24);
          if (v1827 > 4)
          {
LABEL_1981:
            v1829 = sub_1CD7EBF14(*(void *)(a3 + 16), v1827 - 4, (const llvm::APInt *)&v3789, v74, v603, 0, 0);
            unint64_t v1831 = v605 & 0xFFFFFFFF00000000 | v1830;
            uint64_t v1832 = *(void *)(a3 + 16);
            v1833 = *(uint64_t **)(v75 + 32);
            uint64_t v1834 = *v1833;
            uint64_t v1835 = v1833[1];
            uint64_t v1836 = *(void *)(v1832 + 832);
            if (v1836) {
              LOWORD(v1836) = *(_WORD *)(v1836 + 8);
            }
            v1838 = sub_1CCFDED5C(v1832, 175, (const llvm::APInt *)&v3789, v74, v603, v1834, v1835, v1828, (uint64_t)v1829, v1831, v1836);
            uint64_t v1840 = v1839;
            uint64_t v1841 = *(void *)(a3 + 16);
            uint64_t v1842 = *(void *)(v75 + 32);
            uint64_t v1843 = *(void *)(v1842 + 40);
            uint64_t v1844 = *(void *)(v1842 + 48);
            uint64_t v1845 = *(void *)(v1841 + 832);
            if (v1845) {
              LOWORD(v1845) = *(_WORD *)(v1845 + 8);
            }
            v1846 = sub_1CCFDED5C(v1841, 175, (const llvm::APInt *)&v3789, v74, v603, v1843, v1844, v1837, (uint64_t)v1829, v1831, v1845);
            uint64_t v1849 = *(void *)(a3 + 16);
            uint64_t v1850 = *(void *)(v1849 + 832);
            if (v1850) {
              LOWORD(v1850) = *(_WORD *)(v1850 + 8);
            }
            uint64_t v503 = sub_1CCFDED5C(v1849, 56, (const llvm::APInt *)&v3789, v74, v603, (uint64_t)v1838, v1840, v1848, (uint64_t)v1846, v1847, v1850);
            uint64_t v518 = v1851;
            uint64_t v1852 = *(void *)(a3 + 16);
            v1853 = sub_1CD7EBF14(v1852, 4, (const llvm::APInt *)&v3789, v74, v603, 0, 0);
            uint64_t v1855 = *(void *)(v1852 + 832);
            if (v1855) {
              LOWORD(v1855) = *(_WORD *)(v1855 + 8);
            }
            uint64_t v3652 = v1854;
            __int16 v3657 = v1855;
            uint64_t v3647 = (uint64_t)v1853;
            uint64_t v522 = v1852;
            uint64_t v523 = 175;
LABEL_2444:
            uint64_t v524 = (uint64_t)v74;
            uint64_t v525 = v603;
            goto LABEL_519;
          }
        }
LABEL_2437:
        uint64_t v2279 = *(void *)(a3 + 16);
        uint64_t v2280 = *(void *)(v2279 + 832);
        if (v2280) {
          LOWORD(v2280) = *(_WORD *)(v2280 + 8);
        }
        uint64_t v503 = sub_1CCFDED5C(v2279, 175, (const llvm::APInt *)&v3789, v74, v603, v607, v606[1], a8, v76, v605, v2280);
        uint64_t v518 = v2282;
        uint64_t v2283 = *(void *)(a3 + 16);
        uint64_t v2284 = *(void *)(v75 + 32);
        uint64_t v2285 = *(void *)(v2284 + 40);
        uint64_t v2286 = *(void *)(v2284 + 48);
        uint64_t v2287 = *(void *)(v2283 + 832);
        if (v2287) {
          LOWORD(v2287) = *(_WORD *)(v2287 + 8);
        }
        v2288 = sub_1CCFDED5C(v2283, 175, (const llvm::APInt *)&v3789, v74, v603, v2285, v2286, v2281, v76, v605, v2287);
        uint64_t v2290 = *(void *)(*(void *)(a3 + 16) + 832);
        if (v2290) {
          LOWORD(v2290) = *(_WORD *)(v2290 + 8);
        }
        uint64_t v3652 = v2289;
        __int16 v3657 = v2290;
        uint64_t v3647 = (uint64_t)v2288;
        uint64_t v522 = *(void *)(a3 + 16);
        uint64_t v523 = 56;
        goto LABEL_2444;
      case 0xB0:
        uint64_t v278 = **(unsigned __int8 **)(v8 + 40);
        if (v278 != 5)
        {
          if (v278 != 6 || *(_DWORD *)(a3 + 8) == 0) {
            goto LABEL_3081;
          }
          uint64_t v633 = *(void *)(*(void *)(v8 + 32) + 40);
          int v634 = *(unsigned __int16 *)(v633 + 24);
          if (v634 != 35 && v634 != 11) {
            goto LABEL_3081;
          }
          uint64_t v636 = *(void *)(v633 + 80);
          if (*(_DWORD *)(v636 + 32) > 0x40u)
          {
            unint64_t v637 = **(void **)(v636 + 24);
            if (v637 < 0x20) {
              goto LABEL_3081;
            }
          }
          else
          {
            unint64_t v637 = *(void *)(v636 + 24);
            if (v637 <= 0x1F) {
              goto LABEL_3081;
            }
          }
          v962 = sub_1CD7EBF14(*(void *)(a3 + 16), v637 - 32, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          uint64_t v964 = v963;
          __int16 v965 = 0;
          v966 = *(llvm::APFloatBase **)(a3 + 16);
          v967 = *(uint64_t **)(v8 + 32);
          uint64_t v968 = *v967;
          v969 = (void *)v967[1];
          uint64_t v970 = *((void *)v966 + 104);
          if (v970) {
            __int16 v965 = *(_WORD *)(v970 + 8);
          }
          v971 = sub_1CD7F3564(v966, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x31, 0, v968, v969, v965);
          uint64_t v973 = v972;
          uint64_t v974 = *(void *)(a3 + 16);
          v975 = sub_1CD7EBF14(v974, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          __int16 v978 = 0;
          uint64_t v979 = *(void *)(v974 + 832);
          if (v979) {
            __int16 v978 = *(_WORD *)(v979 + 8);
          }
          v981 = sub_1CCFDED5C(v974, 437, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v971, v973, v977, (uint64_t)v975, v976, v978);
          __int16 v983 = 0;
          uint64_t v984 = *(void *)(a3 + 16);
          uint64_t v985 = *(void *)(v984 + 832);
          if (v985) {
            __int16 v983 = *(_WORD *)(v985 + 8);
          }
          uint64_t v36 = sub_1CCFDED5C(v984, 176, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v981, v980, v982, (uint64_t)v962, v964, v983);
          uint64_t v38 = v986;
          __int16 v39 = 0;
          int v41 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v987 = *((void *)v41 + 104);
          if (v987) {
            __int16 v39 = *(_WORD *)(v987 + 8);
          }
          uint64_t v42 = 198;
LABEL_1053:
          uint64_t v43 = 6;
LABEL_2208:
          v1311 = 0;
          goto LABEL_2209;
        }
        uint64_t v279 = *(void *)(v8 + 32);
        uint64_t v280 = *(void *)(v279 + 40);
        int v281 = *(unsigned __int16 *)(v280 + 24);
        if (v281 != 35 && v281 != 11) {
          goto LABEL_3081;
        }
        uint64_t v283 = *(void *)(v280 + 80);
        int v284 = (void *)(v283 + 24);
        if (*(_DWORD *)(v283 + 32) >= 0x41u) {
          int v284 = (void *)*v284;
        }
        if (*v284 != 16 || *(_DWORD *)(a3 + 8) < 2) {
          goto LABEL_3081;
        }
        BOOL v286 = *(llvm::APFloatBase **)(a3 + 16);
        int v287 = *(void **)(v8 + 64);
        v3793[0] = v287;
        if (v287)
        {
          llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v287, 2);
          int v12 = *(_DWORD *)(v8 + 60);
          uint64_t v279 = *(void *)(v8 + 32);
        }
        LODWORD(v3793[1]) = v12;
        uint64_t v288 = *((void *)v286 + 104);
        if (v288) {
          __int16 v289 = *(_WORD *)(v288 + 8);
        }
        else {
          __int16 v289 = 0;
        }
        v1591 = sub_1CD7F3564(v286, (const char *)0xD8, (uint64_t)v3793, (llvm *)0x26, 0, *(void *)v279, *(void **)(v279 + 8), v289);
        uint64_t v1593 = v1592;
        if (!v3793[0]) {
          goto LABEL_1773;
        }
        int v1594 = *(unsigned __int8 *)v3793[0];
        if ((v1594 - 4) > 0x1E)
        {
          if ((v1594 - 3) >= 0xFFFFFFFE) {
            v2131 = v3793[0];
          }
          else {
            v2131 = 0;
          }
          if ((v1594 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v2132 = (unint64_t)v2131 + 8;
LABEL_2244:
            *(void *)&long long v3815 = v3793;
            sub_1CC5FA668(v2132 + 16, &v3815);
            goto LABEL_1773;
          }
          if (v1594 == 3) {
            *((void *)v3793[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)v3793[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3793[0] + 3))
        {
          uint64_t v3628 = *((void *)v3793[0] + 2);
          if ((v3628 & 4) != 0)
          {
            unint64_t v2132 = v3628 & 0xFFFFFFFFFFFFFFF8;
            if (v2132) {
              goto LABEL_2244;
            }
          }
        }
LABEL_1773:
        uint64_t v1595 = *(void *)(a3 + 16);
        v1596 = *(void **)(v8 + 64);
        v3793[0] = v1596;
        uint64_t v1597 = v1595;
        if (v1596)
        {
          llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1596, 2);
          uint64_t v1597 = *(void *)(a3 + 16);
        }
        LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
        v1598 = sub_1CD7EBF14(v1597, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
        __int16 v1601 = 0;
        uint64_t v1602 = *(void *)(v1595 + 832);
        if (v1602) {
          __int16 v1601 = *(_WORD *)(v1602 + 8);
        }
        v1603 = sub_1CCFDED5C(v1595, 437, (const llvm::APInt *)v3793, (llvm *)4, 0, (uint64_t)v1591, v1593, v1600, (uint64_t)v1598, v1599, v1601);
LABEL_1902:
        uint64_t v260 = v1603;
        uint64_t v262 = v1604;
        if (!v3793[0]) {
          goto LABEL_1906;
        }
        int v1759 = *(unsigned __int8 *)v3793[0];
        if ((v1759 - 4) > 0x1E)
        {
          if ((v1759 - 3) >= 0xFFFFFFFE) {
            v1766 = v3793[0];
          }
          else {
            v1766 = 0;
          }
          if ((v1759 - 3) < 0xFFFFFFFE)
          {
            if (v1759 == 3) {
              *((void *)v3793[0] + 1) = 0;
            }
            goto LABEL_1906;
          }
          unint64_t v1767 = (unint64_t)v1766 + 8;
        }
        else
        {
          if ((*((unsigned char *)v3793[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3793[0] + 3)) {
            goto LABEL_1906;
          }
          uint64_t v3601 = *((void *)v3793[0] + 2);
          if ((v3601 & 4) == 0) {
            goto LABEL_1906;
          }
          unint64_t v1767 = v3601 & 0xFFFFFFFFFFFFFFF8;
          if (!v1767) {
            goto LABEL_1906;
          }
        }
        *(void *)&long long v3815 = v3793;
        sub_1CC5FA668(v1767 + 16, &v3815);
LABEL_1906:
        v1760 = *(llvm::APFloatBase **)(a3 + 16);
        v1761 = *(void **)(v8 + 64);
        v3793[0] = v1761;
        if (v1761) {
          llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1761, 2);
        }
        LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
        uint64_t v1762 = *((void *)v1760 + 104);
        if (v1762) {
          __int16 v216 = *(_WORD *)(v1762 + 8);
        }
        else {
          __int16 v216 = 0;
        }
        v1173 = v1760;
        uint64_t v1174 = 198;
        goto LABEL_1912;
      case 0xB1:
        uint64_t v266 = **(unsigned __int8 **)(v8 + 40);
        if (v266 == 5)
        {
          uint64_t v267 = *(void *)(v8 + 32);
          uint64_t v268 = *(void *)(v267 + 40);
          int v269 = *(unsigned __int16 *)(v268 + 24);
          if (v269 != 35 && v269 != 11) {
            goto LABEL_3081;
          }
          uint64_t v271 = *(void *)(v268 + 80);
          unsigned int v272 = (void *)(v271 + 24);
          if (*(_DWORD *)(v271 + 32) >= 0x41u) {
            unsigned int v272 = (void *)*v272;
          }
          BOOL v273 = *v272 != 16 || *(_DWORD *)(a3 + 8) < 2;
          if (v273) {
            goto LABEL_3081;
          }
          int v274 = *(llvm::APFloatBase **)(a3 + 16);
          int v275 = *(void **)(v8 + 64);
          v3793[0] = v275;
          if (v275)
          {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v275, 2);
            int v12 = *(_DWORD *)(v8 + 60);
            uint64_t v267 = *(void *)(v8 + 32);
          }
          LODWORD(v3793[1]) = v12;
          uint64_t v276 = *((void *)v274 + 104);
          if (v276) {
            __int16 v277 = *(_WORD *)(v276 + 8);
          }
          else {
            __int16 v277 = 0;
          }
          v1574 = sub_1CD7F3564(v274, (const char *)0xD8, (uint64_t)v3793, (llvm *)0x26, 0, *(void *)v267, *(void **)(v267 + 8), v277);
          uint64_t v1576 = v1575;
          if (v3793[0])
          {
            int v1577 = *(unsigned __int8 *)v3793[0];
            if ((v1577 - 4) > 0x1E)
            {
              if ((v1577 - 3) >= 0xFFFFFFFE) {
                v2127 = v3793[0];
              }
              else {
                v2127 = 0;
              }
              if ((v1577 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v2128 = (unint64_t)v2127 + 8;
LABEL_2232:
                *(void *)&long long v3815 = v3793;
                sub_1CC5FA668(v2128 + 16, &v3815);
                goto LABEL_1754;
              }
              if (v1577 == 3) {
                *((void *)v3793[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v3793[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3793[0] + 3))
            {
              uint64_t v3626 = *((void *)v3793[0] + 2);
              if ((v3626 & 4) != 0)
              {
                unint64_t v2128 = v3626 & 0xFFFFFFFFFFFFFFF8;
                if (v2128) {
                  goto LABEL_2232;
                }
              }
            }
          }
LABEL_1754:
          uint64_t v1578 = *(void *)(a3 + 16);
          v1579 = *(void **)(v8 + 64);
          v3793[0] = v1579;
          uint64_t v1580 = v1578;
          if (v1579)
          {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1579, 2);
            uint64_t v1580 = *(void *)(a3 + 16);
          }
          LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
          v1581 = sub_1CD7EBF14(v1580, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          __int16 v1584 = 0;
          uint64_t v1585 = *(void *)(v1578 + 832);
          if (v1585) {
            __int16 v1584 = *(_WORD *)(v1585 + 8);
          }
          uint64_t v260 = sub_1CCFDED5C(v1578, 437, (const llvm::APInt *)v3793, (llvm *)4, 0, (uint64_t)v1574, v1576, v1583, (uint64_t)v1581, v1582, v1584);
          uint64_t v262 = v1586;
          if (v3793[0])
          {
            int v1587 = *(unsigned __int8 *)v3793[0];
            if ((v1587 - 4) > 0x1E)
            {
              if ((v1587 - 3) >= 0xFFFFFFFE) {
                v2129 = v3793[0];
              }
              else {
                v2129 = 0;
              }
              if ((v1587 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v2130 = (unint64_t)v2129 + 8;
LABEL_2238:
                *(void *)&long long v3815 = v3793;
                sub_1CC5FA668(v2130 + 16, &v3815);
                goto LABEL_1762;
              }
              if (v1587 == 3) {
                *((void *)v3793[0] + 1) = 0;
              }
            }
            else if ((*((unsigned char *)v3793[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3793[0] + 3))
            {
              uint64_t v3627 = *((void *)v3793[0] + 2);
              if ((v3627 & 4) != 0)
              {
                unint64_t v2130 = v3627 & 0xFFFFFFFFFFFFFFF8;
                if (v2130) {
                  goto LABEL_2238;
                }
              }
            }
          }
LABEL_1762:
          v1588 = *(llvm::APFloatBase **)(a3 + 16);
          v1589 = *(void **)(v8 + 64);
          v3793[0] = v1589;
          if (v1589) {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1589, 2);
          }
          LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
          uint64_t v1590 = *((void *)v1588 + 104);
          if (v1590) {
            __int16 v216 = *(_WORD *)(v1590 + 8);
          }
          else {
            __int16 v216 = 0;
          }
          v1173 = v1588;
          uint64_t v1174 = 199;
LABEL_1912:
          uint64_t v210 = 5;
LABEL_1913:
          uint64_t v211 = 0;
          uint64_t v213 = v260;
          int v214 = v262;
          goto LABEL_1914;
        }
        if (v266 != 6 || *(_DWORD *)(a3 + 8) == 0) {
          goto LABEL_3081;
        }
        v569 = *(void **)(v8 + 32);
        uint64_t v570 = v569[5];
        int v571 = *(unsigned __int16 *)(v570 + 24);
        if (v571 != 35 && v571 != 11) {
          goto LABEL_3081;
        }
        uint64_t v573 = *(void *)(v570 + 80);
        if (*(_DWORD *)(v573 + 32) > 0x40u)
        {
          unint64_t v574 = **(void **)(v573 + 24);
          if (v574 >= 0x20) {
            goto LABEL_587;
          }
        }
        else
        {
          unint64_t v574 = *(void *)(v573 + 24);
          if (v574 > 0x1F)
          {
LABEL_587:
            uint64_t v575 = sub_1CD7EBF14(*(void *)(a3 + 16), v574 - 32, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            uint64_t v577 = v576;
            __int16 v578 = 0;
            uint64_t v579 = *(llvm::APFloatBase **)(a3 + 16);
            v580 = *(uint64_t **)(v8 + 32);
            uint64_t v581 = *v580;
            uint64_t v582 = (void *)v580[1];
            uint64_t v583 = *((void *)v579 + 104);
            if (v583) {
              __int16 v578 = *(_WORD *)(v583 + 8);
            }
            uint64_t v584 = sub_1CD7F3564(v579, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x31, 0, v581, v582, v578);
            uint64_t v586 = v585;
            uint64_t v587 = *(void *)(a3 + 16);
            uint64_t v588 = sub_1CD7EBF14(v587, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            __int16 v591 = 0;
            uint64_t v592 = *(void *)(v587 + 832);
            if (v592) {
              __int16 v591 = *(_WORD *)(v592 + 8);
            }
            unint64_t v594 = sub_1CCFDED5C(v587, 437, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v584, v586, v590, (uint64_t)v588, v589, v591);
            __int16 v596 = 0;
            uint64_t v597 = *(void *)(a3 + 16);
            uint64_t v598 = *(void *)(v597 + 832);
            if (v598) {
              __int16 v596 = *(_WORD *)(v598 + 8);
            }
            uint64_t v36 = sub_1CCFDED5C(v597, 177, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v594, v593, v595, (uint64_t)v575, v577, v596);
            uint64_t v38 = v599;
            __int16 v39 = 0;
            int v41 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v600 = *((void *)v41 + 104);
            if (v600) {
              __int16 v39 = *(_WORD *)(v600 + 8);
            }
            uint64_t v42 = 199;
            goto LABEL_1053;
          }
        }
        if (*(_WORD *)(*v569 + 24) != 199) {
          goto LABEL_3081;
        }
        uint64_t v29 = (uint64_t)sub_1CB8D688C(v8, 0, *(llvm::APFloatBase **)(a3 + 16));
        goto LABEL_2210;
      default:
        if (v13 != 146)
        {
          if (v13 != 153) {
            goto LABEL_3081;
          }
          uint64_t v766 = *(void *)(v8 + 40);
          v768 = *(const char **)v766;
          uint64_t v767 = *(void *)(v766 + 8);
          *(void *)&long long v3815 = *(void *)v766;
          *((void *)&v3815 + 1) = v767;
          v769 = *(unsigned __int8 **)(v8 + 64);
          *(void *)&long long v3813 = v769;
          if (v769)
          {
            llvm::MetadataTracking::track((uint64_t)&v3813, v769, 2);
            int v12 = *(_DWORD *)(v8 + 60);
            uint64_t v766 = *(void *)(v8 + 40);
            uint64_t v767 = *(void *)(v766 + 8);
          }
          DWORD2(v3813) = v12;
          if (!sub_1CD804960(*(void *)(v8 + 80), *(const char **)v766, v767)) {
            goto LABEL_814;
          }
          *(_OWORD *)v3793 = *(_OWORD *)*(void *)(v8 + 40);
          unsigned int v1997 = sub_1CD3DB440((llvm::EVT *)v3793, v770);
          if (v1997)
          {
            uint64_t v1998 = v8;
            v1999 = *(unsigned int **)(v8 + 80);
            uint64_t v2000 = v1997;
            while (1)
            {
              unsigned int v2002 = *v1999++;
              unsigned int v2001 = v2002;
              if ((v2002 & 0x80000000) == 0) {
                break;
              }
              if (!--v2000) {
                goto LABEL_2555;
              }
            }
          }
          else
          {
            uint64_t v1998 = v8;
LABEL_2555:
            unsigned int v2001 = 0;
          }
          if (v768 - 27 > 0x31
            || ((1 << (v768 - 27)) & 0x2000000000801) == 0)
          {
LABEL_814:
            if (!(void)v3813) {
              goto LABEL_3081;
            }
            int v771 = *(unsigned __int8 *)v3813;
            if ((v771 - 4) > 0x1E)
            {
              if ((v771 - 3) >= 0xFFFFFFFE) {
                uint64_t v1573 = v3813;
              }
              else {
                uint64_t v1573 = 0;
              }
              if ((v771 - 3) < 0xFFFFFFFE)
              {
                if (v771 == 3) {
                  *(void *)(v3813 + 8) = 0;
                }
                goto LABEL_3081;
              }
              unint64_t v773 = v1573 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v3813 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3813 + 12)) {
                goto LABEL_3081;
              }
              uint64_t v772 = *(void *)(v3813 + 16);
              if ((v772 & 4) == 0) {
                goto LABEL_3081;
              }
              unint64_t v773 = v772 & 0xFFFFFFFFFFFFFFF8;
              if (!v773) {
                goto LABEL_3081;
              }
            }
            v3793[0] = &v3813;
            sub_1CC5FA668(v773 + 16, v3793);
            goto LABEL_3081;
          }
          uint64_t v2405 = v1998;
          uint64_t v2406 = *(void *)(v1998 + 32);
          uint64_t v2407 = 8;
          if (v2001 > 1) {
            uint64_t v2407 = 48;
          }
          uint64_t v2408 = *(unsigned int *)(v2406 + v2407);
          uint64_t v2409 = *(void *)(v2406 + 40 * (v2001 > 1));
          unsigned __int8 v2410 = sub_1CB8C2FBC((unsigned __int8 *)&v3815);
          if (v2410 == 3) {
            unsigned __int8 v2411 = 4;
          }
          else {
            unsigned __int8 v2411 = v2410;
          }
          v2412 = (llvm *)v2411;
          v2413 = sub_1CD7EBF14(*(void *)(a3 + 16), v2001 & 1, (const llvm::APInt *)&v3813, (llvm *)5, 0, 0, 0);
          uint64_t v2416 = *(void *)(a3 + 16);
          uint64_t v2417 = *(void *)(v2416 + 832);
          if (v2417) {
            LOWORD(v2417) = *(_WORD *)(v2417 + 8);
          }
          v2419 = sub_1CCFDED5C(v2416, 437, (const llvm::APInt *)&v3813, v2412, 0, v2409, v2408, v2415, (uint64_t)v2413, v2414, v2417);
          uint64_t v2421 = *(void *)(a3 + 16);
          uint64_t v2422 = *(void *)(v2421 + 832);
          if (v2422) {
            LOWORD(v2422) = *(_WORD *)(v2422 + 8);
          }
          v2423 = sub_1CCFDED5C(v2421, 146, (const llvm::APInt *)&v3813, (llvm *)v3815, *((uint64_t *)&v3815 + 1), (uint64_t)v2419, v2418, v2420, (uint64_t)v2419, v2418, v2422);
          v2424 = *(uint64_t **)a3;
          v3793[0] = v2423;
          v3793[1] = v2425;
          *(void *)&long long v3791 = sub_1CCEF083C(v2424, v2405, (uint64_t *)v3793, 1, 1);
          *((void *)&v3791 + 1) = v2426;
          v858 = (unsigned __int8 *)v3813;
          if (!(void)v3813) {
            goto LABEL_3082;
          }
          int v859 = *(unsigned __int8 *)v3813;
          if ((v859 - 4) > 0x1E)
          {
            if ((v859 - 3) >= 0xFFFFFFFE) {
              uint64_t v3404 = v3813;
            }
            else {
              uint64_t v3404 = 0;
            }
            if ((v859 - 3) < 0xFFFFFFFE) {
              goto LABEL_3395;
            }
            unint64_t v1399 = v3404 + 8;
          }
          else
          {
            if ((*(unsigned char *)(v3813 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3813 + 12)) {
              goto LABEL_3082;
            }
            uint64_t v2427 = *(void *)(v3813 + 16);
            if ((v2427 & 4) == 0) {
              goto LABEL_3082;
            }
            unint64_t v1399 = v2427 & 0xFFFFFFFFFFFFFFF8;
            if (!v1399) {
              goto LABEL_3082;
            }
          }
          v1523 = (unsigned __int8 **)&v3813;
LABEL_1703:
          v3793[0] = v1523;
          uint64_t v1524 = v1399 + 16;
          v1525 = (long long *)v3793;
LABEL_1929:
          sub_1CC5FA668(v1524, v1525);
          goto LABEL_3082;
        }
        if (!*(_DWORD *)(a3 + 8)) {
          goto LABEL_3081;
        }
        *(_OWORD *)v3793 = *(_OWORD *)*(void *)(v8 + 40);
        if (LOBYTE(v3793[0]) == 38)
        {
          uint64_t v259 = 5;
        }
        else
        {
          if (LOBYTE(v3793[0]) != 49 || !*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
            goto LABEL_3081;
          }
          uint64_t v259 = 6;
        }
        uint64_t v728 = *(void *)(*(void *)(v8 + 32) + 40);
        int v729 = *(unsigned __int16 *)(v728 + 24);
        if (v729 != 35 && v729 != 11) {
          goto LABEL_3081;
        }
        uint64_t v731 = *(void *)(v728 + 80);
        uint64_t v732 = *(unsigned int *)(v731 + 32);
        if (v732 > 0x40)
        {
          int v898 = 0;
          int64_t v899 = (unint64_t)(v732 + 63) >> 6;
          do
          {
            BOOL v273 = v899-- < 1;
            if (v273) {
              break;
            }
            unint64_t v900 = *(void *)(*(void *)(v731 + 24) + 8 * v899);
            v898 += __clz(v900);
          }
          while (!v900);
          int v901 = v732 | 0xFFFFFFC0;
          if ((v732 & 0x3F) == 0) {
            int v901 = 0;
          }
          if (v898 + v901 != v732) {
            goto LABEL_3081;
          }
        }
        else if (*(void *)(v731 + 24))
        {
          goto LABEL_3081;
        }
        v902 = *(llvm::APFloatBase **)(a3 + 16);
        v904 = (llvm *)sub_1CD3DD468((unsigned __int8 *)v3793, v13, a3);
        v905 = *(uint64_t **)(v8 + 32);
        uint64_t v906 = *v905;
        v907 = (void *)v905[1];
        uint64_t v908 = *((void *)v902 + 104);
        if (v908) {
          __int16 v909 = *(_WORD *)(v908 + 8);
        }
        else {
          __int16 v909 = 0;
        }
        v1776 = sub_1CD7F3564(v902, (const char *)0xC9, (uint64_t)&v3789, v904, v903, v906, v907, v909);
        v1777 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v1778 = *((void *)v1777 + 104);
        if (v1778) {
          __int16 v1779 = *(_WORD *)(v1778 + 8);
        }
        else {
          __int16 v1779 = 0;
        }
        uint64_t v36 = sub_1CD7F3564(v1777, (const char *)0xC7, (uint64_t)&v3789, (llvm *)v259, 0, (uint64_t)v1776, v1775, v1779);
        uint64_t v38 = v1780;
        __int16 v39 = 0;
        int v41 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v43 = (uint64_t)v3793[0];
        v1311 = v3793[1];
        uint64_t v1781 = *((void *)v41 + 104);
        if (v1781) {
          __int16 v39 = *(_WORD *)(v1781 + 8);
        }
        uint64_t v42 = 216;
        goto LABEL_2209;
    }
  }
  if (*(unsigned __int16 *)(v8 + 24) > 0x5Fu)
  {
    if (*(unsigned __int16 *)(v8 + 24) <= 0x62u)
    {
      if (v13 != 96)
      {
        if (v13 != 98) {
          goto LABEL_3081;
        }
        int v83 = *(uint64_t **)(v8 + 32);
        uint64_t v82 = *(void *)(v8 + 40);
        BOOL v85 = *(llvm **)v82;
        uint64_t v84 = *(void *)(v82 + 8);
        uint64_t v87 = *v83;
        uint64_t v86 = v83[1];
        uint64_t v89 = v83[5];
        uint64_t v88 = (void *)v83[6];
        uint64_t v90 = *(unsigned __int8 **)(v8 + 64);
        *(void *)&long long v3815 = v90;
        if (v90)
        {
          llvm::MetadataTracking::track((uint64_t)&v3815, v90, 2);
          int v12 = *(_DWORD *)(v8 + 60);
        }
        DWORD2(v3815) = v12;
        int v91 = *(unsigned __int16 *)(v89 + 24);
        if (*(_WORD *)(v87 + 24) == 222)
        {
          if (v91 == 36 || v91 == 12)
          {
            uint64_t v1045 = *(void *)(a3 + 16);
            v1046 = *(uint64_t **)(v87 + 32);
            uint64_t v1047 = *v1046;
            uint64_t v1048 = v1046[1];
            uint64_t v1049 = *(void *)(v1045 + 832);
            if (v1049) {
              __int16 v1050 = *(_WORD *)(v1049 + 8);
            }
            else {
              __int16 v1050 = 0;
            }
            v1262 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xDE, (uint64_t)&v3815, v85, v84, v89, v88, v1050);
            v1265 = sub_1CCFDED5C(v1045, 98, (const llvm::APInt *)&v3815, v85, v84, v1047, v1048, v1264, (uint64_t)v1262, v1263, *(_WORD *)(v8 + 72));
            goto LABEL_2492;
          }
          uint64_t v93 = 0;
        }
        else if (v91 == 36 || v91 == 12)
        {
          uint64_t v93 = v89;
        }
        else
        {
          uint64_t v93 = 0;
        }
        uint64_t v639 = *(void **)(a3 + 16);
        if ((*(_WORD *)(*v639 + 1020) & 1) == 0 && v93)
        {
          uint64_t v640 = *(void *)(v93 + 80);
          uint64_t v641 = *(_UNKNOWN **)(v640 + 32) == &unk_1CFB2E344 ? *(void *)(v640 + 40) : v640 + 24;
          if ((*(unsigned char *)(v641 + 28) & 7) == 3)
          {
            uint64_t v1248 = v639[2];
            llvm::DiagnosticLocation::DiagnosticLocation(&v3813, (const llvm::DebugLoc *)&v3815);
            uint64_t v1249 = *(void *)(*(void *)(v1248 + 640) + 16);
            v1250 = *(void **)(v1249 + 56);
            LODWORD(v3793[1]) = 11;
            BYTE4(v3793[1]) = 2;
            long long v3794 = v3813;
            v3793[2] = v1250;
            v3795 = "agx1-lower";
            v3796 = "SlowMathFMulWithZero";
            uint64_t v3797 = 20;
            LOBYTE(v3798) = 0;
            LOBYTE(v3799) = 0;
            v3800 = &v3802;
            uint64_t v3801 = 0x400000000;
            char v3810 = 0;
            int v3811 = -1;
            uint64_t v3812 = v1249;
            v3793[0] = &unk_1F26165E0;
            char v3774 = 6;
            strcpy((char *)v3773, "String");
            v1251 = (char *)operator new(0x58uLL);
            long long v3776 = xmmword_1CD935ED0;
            strcpy(v1251, "A floating point mul with zero cannot be optimized away because fast-math is disabled.");
            uint64_t v3777 = 0;
            uint64_t v3778 = 0;
            v3775 = v1251;
            sub_1CD3D6290((uint64_t)v3793, (long long *)v3773);
            if (SHIBYTE(v3776) < 0) {
              operator delete(v3775);
            }
            if (v3774 < 0) {
              operator delete(v3773[0]);
            }
            llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3793);
            v3793[0] = &unk_1F2616800;
            v1252 = (uint64_t *)v3800;
            if (v3801)
            {
              unint64_t v1253 = (unint64_t)v3801 << 6;
              v3740 = (uint64_t *)v3800;
              do
              {
                v1254 = (void **)((char *)v1252 + v1253);
                if (*((char *)v1252 + v1253 - 17) < 0)
                {
                  operator delete(*(v1254 - 5));
                  v1252 = v3740;
                }
                if (*((char *)v1254 - 41) < 0)
                {
                  operator delete(*(v1254 - 8));
                  v1252 = v3740;
                }
                v1253 -= 64;
              }
              while (v1253);
              v1252 = (uint64_t *)v3800;
            }
            if (v1252 != &v3802) {
              free(v1252);
            }
          }
        }
        if (*(int *)(a3 + 8) < 2) {
          goto LABEL_3063;
        }
        if (*(_WORD *)(v87 + 24) == 222)
        {
          if (!sub_1CB8C5A98(v8)) {
            goto LABEL_831;
          }
          uint64_t v774 = *(void *)(v87 + 32);
          v775 = *(void **)v774;
          int v776 = *(_DWORD *)(v774 + 8);
          v777 = (uint64_t *)v89;
          int v778 = (int)v88;
        }
        else
        {
          int v779 = *(unsigned __int16 *)(v89 + 24);
          if (v779 != 12 && v779 != 222 && v779 != 36 || (sub_1CB8C5A98(v8) & 1) == 0) {
            goto LABEL_831;
          }
          if (v779 == 222)
          {
            uint64_t v1572 = *(void *)(v89 + 32);
            v777 = *(uint64_t **)v1572;
            int v778 = *(_DWORD *)(v1572 + 8);
          }
          else
          {
            v1903 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v1904 = *((void *)v1903 + 104);
            if (v1904) {
              __int16 v1905 = *(_WORD *)(v1904 + 8);
            }
            else {
              __int16 v1905 = 0;
            }
            v777 = sub_1CD7F3564(v1903, (const char *)0xDE, (uint64_t)&v3815, v85, v84, v89, v88, v1905);
            int v778 = v2141;
          }
          v775 = (void *)v87;
          int v776 = v86;
        }
        uint64_t v2142 = *(void *)(a3 + 16);
        uint64_t v2143 = *(void *)(v8 + 40);
        uint64_t v2144 = *(unsigned __int16 *)(v8 + 58);
        v3715 = v775;
        int v3727 = v778;
        v3793[0] = v775;
        LODWORD(v3793[1]) = v776;
        v3746 = v777;
        v3793[2] = v777;
        LODWORD(v3794) = v778;
        v2145 = sub_1CD801794(v2142, 0x62u, v2143, v2144, (uint64_t *)v3793, 2, *(_WORD *)(v8 + 72));
        v2146 = *(llvm::APFloatBase **)(a3 + 16);
        if (v2145 && v2145 != (unsigned __int8 **)v8)
        {
LABEL_2257:
          uint64_t v2147 = *((void *)v2146 + 104);
          if (v2147) {
            __int16 v2148 = *(_WORD *)(v2147 + 8);
          }
          else {
            __int16 v2148 = 0;
          }
          v2152 = v85;
          uint64_t v2153 = v84;
LABEL_2491:
          v1265 = sub_1CD7F3564(v2146, (const char *)0xDE, (uint64_t)&v3815, v2152, v2153, (uint64_t)v2145, 0, v2148);
LABEL_2492:
          *(void *)&long long v3791 = v1265;
          char v897 = 0;
          *((void *)&v3791 + 1) = v1266;
          goto LABEL_3064;
        }
        uint64_t v2149 = *(void *)(v8 + 40);
        uint64_t v2150 = *(unsigned __int16 *)(v8 + 58);
        v3793[0] = v3746;
        LODWORD(v3793[1]) = v3727;
        v3793[2] = v3715;
        LODWORD(v3794) = v776;
        v2151 = sub_1CD801794((uint64_t)v2146, 0x62u, v2149, v2150, (uint64_t *)v3793, 2, *(_WORD *)(v8 + 72));
        if (v2151)
        {
          v2145 = v2151;
          if (v2151 != (unsigned __int8 **)v8)
          {
            v2146 = *(llvm::APFloatBase **)(a3 + 16);
            goto LABEL_2257;
          }
        }
LABEL_831:
        if (v85 != 9 || (*(_WORD *)(**(void **)(a3 + 16) + 1020) & 1) == 0) {
          goto LABEL_3063;
        }
        if (*(_WORD *)(v87 + 24) != 96)
        {
          if (*(_WORD *)(v89 + 24) != 96 || !*(unsigned char *)(*(void *)(a1 + 184296) + 313)) {
            goto LABEL_3063;
          }
LABEL_1122:
          uint64_t v1034 = *(void *)(v89 + 48);
          if (!v1034) {
            goto LABEL_3063;
          }
          int v1035 = 1;
          do
          {
            if (*(_DWORD *)(v1034 + 8) == v88)
            {
              if (!v1035) {
                goto LABEL_3063;
              }
              --v1035;
            }
            uint64_t v1034 = *(void *)(v1034 + 32);
          }
          while (v1034);
          if (v1035) {
            goto LABEL_3063;
          }
          int v1036 = *(unsigned __int16 *)(v87 + 24);
          BOOL v1037 = v1036 == 36 || v1036 == 12;
          if (!v1037 || !sub_1CB8BE1E4(*(void *)(v87 + 80) + 24, 0.5)) {
            goto LABEL_3063;
          }
          v1038 = *(void **)(a3 + 16);
          v1039 = *(uint64_t **)(v89 + 32);
          uint64_t v1040 = *v1039;
          uint64_t v1041 = v1039[1];
          uint64_t v1042 = v1039[5];
          uint64_t v1043 = v1039[6];
          uint64_t v1044 = v1038[104];
          if (v1044) {
            LOWORD(v1044) = *(_WORD *)(v1044 + 8);
          }
          uint64_t v3662 = v1043;
          __int16 v3665 = v1044;
          uint64_t v3653 = v86;
          uint64_t v3658 = v1042;
          uint64_t v3648 = v87;
LABEL_3157:
          v1265 = sub_1CD7F5D38(v1038, (const char *)0x1BB, (const llvm::APInt *)&v3815, (llvm *)9, 0, v1040, v1041, v784, v3648, v3653, v3658, v3662, SHIDWORD(v3662), v3665);
          goto LABEL_2492;
        }
        if (*(unsigned char *)(*(void *)(a1 + 184296) + 313))
        {
          uint64_t v780 = *(void *)(v87 + 48);
          if (v780)
          {
            int v781 = 1;
            do
            {
              if (*(_DWORD *)(v780 + 8) == v86)
              {
                if (!v781) {
                  goto LABEL_848;
                }
                --v781;
              }
              uint64_t v780 = *(void *)(v780 + 32);
            }
            while (v780);
            int v782 = *(unsigned __int16 *)(v89 + 24);
            if (v781 || (v782 != 36 ? (BOOL v783 = v782 == 12) : (BOOL v783 = 1), !v783))
            {
LABEL_849:
              if (v782 != 96) {
                goto LABEL_3063;
              }
              goto LABEL_1122;
            }
            if (sub_1CB8BE1E4(*(void *)(v89 + 80) + 24, 0.5))
            {
              v1038 = *(void **)(a3 + 16);
              v3196 = *(uint64_t **)(v87 + 32);
              uint64_t v1040 = *v3196;
              uint64_t v1041 = v3196[1];
              uint64_t v3197 = v3196[5];
              uint64_t v3198 = v3196[6];
              uint64_t v3199 = v1038[104];
              if (v3199) {
                LOWORD(v3199) = *(_WORD *)(v3199 + 8);
              }
              uint64_t v3662 = v3198;
              __int16 v3665 = v3199;
              uint64_t v3653 = (uint64_t)v88;
              uint64_t v3658 = v3197;
              uint64_t v3648 = v89;
              goto LABEL_3157;
            }
          }
LABEL_848:
          int v782 = *(unsigned __int16 *)(v89 + 24);
          goto LABEL_849;
        }
LABEL_3063:
        char v897 = 1;
LABEL_3064:
        v1212 = (void *)v3815;
        if (!(void)v3815) {
          goto LABEL_3080;
        }
        int v1213 = *(unsigned __int8 *)v3815;
        if ((v1213 - 4) > 0x1E)
        {
          if ((v1213 - 3) >= 0xFFFFFFFE) {
            uint64_t v3109 = v3815;
          }
          else {
            uint64_t v3109 = 0;
          }
          if ((v1213 - 3) < 0xFFFFFFFE) {
            goto LABEL_3078;
          }
          unint64_t v3108 = v3109 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v3815 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3815 + 12)) {
            goto LABEL_3080;
          }
          uint64_t v3107 = *(void *)(v3815 + 16);
          if ((v3107 & 4) == 0) {
            goto LABEL_3080;
          }
          unint64_t v3108 = v3107 & 0xFFFFFFFFFFFFFFF8;
          if (!v3108) {
            goto LABEL_3080;
          }
        }
        v3793[0] = &v3815;
        uint64_t v1217 = v3108 + 16;
        v1218 = v3793;
        goto LABEL_3077;
      }
      unsigned int v432 = *(uint64_t **)(v8 + 32);
      uint64_t v433 = *(void *)(v8 + 40);
      uint64_t v435 = *v432;
      unint64_t v434 = v432[1];
      uint64_t v436 = v432[5];
      unint64_t v437 = v432[6];
      v3734 = *(llvm **)v433;
      uint64_t v3718 = *(void *)(v433 + 8);
      int v438 = *(unsigned __int16 *)(v436 + 24);
      if (v438 == 36 || v438 == 12) {
        uint64_t v440 = v436;
      }
      else {
        uint64_t v440 = 0;
      }
      if (v440)
      {
        unsigned int v441 = *(void **)(a3 + 16);
        if ((*(_WORD *)(*v441 + 1020) & 1) == 0)
        {
          uint64_t v442 = *(void *)(v440 + 80);
          uint64_t v443 = *(_UNKNOWN **)(v442 + 32) == &unk_1CFB2E344 ? *(void *)(v442 + 40) : v442 + 24;
          if ((*(unsigned char *)(v443 + 28) & 7) == 3)
          {
            uint64_t v1235 = v441[2];
            llvm::DiagnosticLocation::DiagnosticLocation(&v3815, (const llvm::DebugLoc *)&v3789);
            uint64_t v1236 = *(void *)(*(void *)(v1235 + 640) + 16);
            v1237 = *(void **)(v1236 + 56);
            LODWORD(v3793[1]) = 11;
            BYTE4(v3793[1]) = 2;
            long long v3794 = v3815;
            v3793[2] = v1237;
            v3795 = "agx1-lower";
            v3796 = "SlowMathFAddWithZero";
            uint64_t v3797 = 20;
            LOBYTE(v3798) = 0;
            LOBYTE(v3799) = 0;
            v3800 = &v3802;
            uint64_t v3801 = 0x400000000;
            char v3810 = 0;
            int v3811 = -1;
            uint64_t v3812 = v1236;
            v3793[0] = &unk_1F26165E0;
            char v3768 = 6;
            strcpy((char *)v3767, "String");
            v1238 = (char *)operator new(0x58uLL);
            long long v3770 = xmmword_1CD935ED0;
            strcpy(v1238, "A floating point add with zero cannot be optimized away because fast-math is disabled.");
            uint64_t v3771 = 0;
            uint64_t v3772 = 0;
            v3769 = v1238;
            sub_1CD3D6290((uint64_t)v3793, (long long *)v3767);
            if (SHIBYTE(v3770) < 0) {
              operator delete(v3769);
            }
            if (v3768 < 0) {
              operator delete(v3767[0]);
            }
            llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3793);
            v3793[0] = &unk_1F2616800;
            v1239 = (uint64_t *)v3800;
            if (v3801)
            {
              unint64_t v1240 = (unint64_t)v3801 << 6;
              do
              {
                v1241 = (void **)((char *)v1239 + v1240);
                if (*((char *)v1239 + v1240 - 17) < 0) {
                  operator delete(*(v1241 - 5));
                }
                if (*((char *)v1241 - 41) < 0) {
                  operator delete(*(v1241 - 8));
                }
                v1240 -= 64;
              }
              while (v1240);
              v1239 = (uint64_t *)v3800;
            }
            if (v1239 != &v3802) {
              free(v1239);
            }
          }
        }
      }
      if (!*(_DWORD *)(a3 + 8)) {
        goto LABEL_3081;
      }
      int v760 = *(unsigned __int16 *)(v435 + 24);
      int v761 = *(unsigned __int16 *)(v436 + 24);
      if (v760 != 98)
      {
LABEL_806:
        BOOL v764 = v760 == 222;
        if ((v761 == 222) == v764) {
          goto LABEL_993;
        }
LABEL_991:
        if (!sub_1CB8C5A98(v8)
          || (v910 = *(llvm::APFloatBase **)(a3 + 16), (*(_WORD *)(*(void *)v910 + 1020) & 1) == 0))
        {
LABEL_993:
          uint64_t v911 = **(void **)(a3 + 16);
          if ((*(_WORD *)(v911 + 1020) & 1) == 0 && *(_DWORD *)(v911 + 1104)) {
            goto LABEL_3081;
          }
          v3793[0] = 0;
          LODWORD(v3793[1]) = 0;
          char v912 = 1;
          do
          {
            v913 = (uint64_t *)v436;
            uint64_t v436 = v435;
            char v914 = v912;
            if (sub_1CD3D9EE8((uint64_t **)v3793, v8, v3734, v3718, v435, v434, v913, v437, (uint64_t *)a3, 1, 0, 1))
            {
              long long v3791 = *(_OWORD *)v3793;
              goto LABEL_3082;
            }
            char v912 = 0;
            unint64_t v915 = v434 & 0xFFFFFFFF00000000 | v437;
            unint64_t v437 = v437 & 0xFFFFFFFF00000000 | v434;
            unint64_t v434 = v915;
            uint64_t v435 = (uint64_t)v913;
          }
          while ((v914 & 1) != 0);
          char v916 = 1;
          while (1)
          {
            uint64_t v917 = v436;
            uint64_t v436 = (uint64_t)v913;
            char v918 = v916;
            if (sub_1CD3D9EE8((uint64_t **)v3793, v8, v3734, v3718, (uint64_t)v913, v915, (uint64_t *)v917, v437, (uint64_t *)a3, 0, 0, 1))break; {
            char v916 = 0;
            }
            unint64_t v920 = v915 & 0xFFFFFFFF00000000 | v437;
            unint64_t v437 = v437 & 0xFFFFFFFF00000000 | v915;
            unint64_t v915 = v920;
            v913 = (uint64_t *)v917;
            if ((v918 & 1) == 0)
            {
              v921 = *(void **)(a3 + 16);
              if (*(_WORD *)(*v921 + 1020))
              {
                char v922 = 1;
                while (1)
                {
                  uint64_t v923 = v436;
                  uint64_t v436 = v917;
                  char v924 = v922;
                  if (*(_WORD *)(v917 + 24) == 96) {
                    break;
                  }
LABEL_1008:
                  char v922 = 0;
                  unint64_t v929 = v920 & 0xFFFFFFFF00000000 | v437;
                  unint64_t v437 = v437 & 0xFFFFFFFF00000000 | v920;
                  unint64_t v920 = v929;
                  uint64_t v917 = v923;
                  if ((v924 & 1) == 0)
                  {
                    char v930 = 1;
                    while (1)
                    {
                      uint64_t v931 = v436;
                      uint64_t v436 = v923;
                      char v932 = v930;
                      if (*(_WORD *)(v931 + 24) == 141)
                      {
                        uint64_t v933 = *(void *)(v931 + 48);
                        if (v933)
                        {
                          int v934 = 1;
                          do
                          {
                            if (*(_DWORD *)(v933 + 8) == v437)
                            {
                              if (!v934) {
                                goto LABEL_1022;
                              }
                              --v934;
                            }
                            uint64_t v933 = *(void *)(v933 + 32);
                          }
                          while (v933);
                          if (!v934)
                          {
                            v935 = *(uint64_t **)(v931 + 32);
                            uint64_t v936 = v935[10];
                            int v937 = *(unsigned __int16 *)(v936 + 24);
                            if (v3734 == 10 && v937 == 98)
                            {
                              v3327 = *(uint64_t **)(v936 + 32);
                              uint64_t v3328 = *v3327;
                              uint64_t v3329 = v3327[1];
                              uint64_t v3330 = v3327[5];
                              uint64_t v3331 = v3327[6];
                              uint64_t v3332 = *v935;
                              uint64_t v1258 = v935[1];
                              uint64_t v3333 = v935[5];
                              uint64_t v3334 = v935[6];
                              uint64_t v3335 = v921[104];
                              if (v3335) {
                                LOWORD(v3335) = *(_WORD *)(v3335 + 8);
                              }
                              v3336 = sub_1CD7F5D38(v921, (const char *)0x8D, (const llvm::APInt *)&v3789, v3734, v3718, v3328, v3329, v919, v3330, v3331, v436, v929, SHIDWORD(v929), v3335);
                              uint64_t v3338 = v921[104];
                              if (v3338) {
                                LOWORD(v3338) = *(_WORD *)(v3338 + 8);
                              }
                              unint64_t v3663 = v3337;
                              __int16 v3666 = v3338;
                              uint64_t v3654 = v3334;
                              uint64_t v3659 = (uint64_t)v3336;
                              uint64_t v3649 = v3333;
                              v1510 = v921;
                              uint64_t v1511 = 141;
                              v1512 = v3734;
                              uint64_t v1513 = v3718;
                              uint64_t v1514 = v3332;
                              goto LABEL_1680;
                            }
                            if (v937 == 215)
                            {
                              uint64_t v938 = **(void **)(v936 + 32);
                              if (*(_WORD *)(v938 + 24) == 98) {
                                break;
                              }
                            }
                          }
                        }
                      }
LABEL_1022:
                      char v930 = 0;
                      int v939 = v929;
                      unint64_t v929 = v929 & 0xFFFFFFFF00000000 | v437;
                      uint64_t v923 = v931;
                      LODWORD(v437) = v939;
                      if ((v932 & 1) == 0) {
                        goto LABEL_3081;
                      }
                    }
                    v3442 = *(uint64_t **)(v938 + 32);
                    uint64_t v3443 = *v3442;
                    v3444 = (void *)v3442[1];
                    uint64_t v3445 = v921[104];
                    if (v3445) {
                      __int16 v3446 = *(_WORD *)(v3445 + 8);
                    }
                    else {
                      __int16 v3446 = 0;
                    }
                    v3495 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xD7, (uint64_t)&v3789, v3734, v3718, v3443, v3444, v3446);
                    uint64_t v3497 = v3496;
                    v3498 = *(llvm::APFloatBase **)(a3 + 16);
                    uint64_t v3499 = *(void *)(v938 + 32);
                    uint64_t v3500 = *(void *)(v3499 + 40);
                    v3501 = *(void **)(v3499 + 48);
                    uint64_t v3502 = *((void *)v3498 + 104);
                    if (v3502) {
                      __int16 v3503 = *(_WORD *)(v3502 + 8);
                    }
                    else {
                      __int16 v3503 = 0;
                    }
                    v3504 = sub_1CD7F3564(v3498, (const char *)0xD7, (uint64_t)&v3789, v3734, v3718, v3500, v3501, v3503);
                    v3507 = *(void **)(a3 + 16);
                    v3508 = *(uint64_t **)(v931 + 32);
                    uint64_t v3509 = *v3508;
                    uint64_t v3510 = v3508[1];
                    uint64_t v3511 = v3508[5];
                    uint64_t v3512 = v3508[6];
                    uint64_t v3513 = v3507[104];
                    if (v3513) {
                      LOWORD(v3513) = *(_WORD *)(v3513 + 8);
                    }
                    v3514 = sub_1CD7F5D38(v3507, (const char *)0x8D, (const llvm::APInt *)&v3789, v3734, v3718, (uint64_t)v3495, v3497, v3506, (uint64_t)v3504, v3505, v436, v929, SHIDWORD(v929), v3513);
                    uint64_t v3517 = v3507[104];
                    if (v3517) {
                      LOWORD(v3517) = *(_WORD *)(v3517 + 8);
                    }
                    uint64_t v29 = (uint64_t)sub_1CD7F5D38(v3507, (const char *)0x8D, (const llvm::APInt *)&v3789, v3734, v3718, v3509, v3510, v3516, v3511, v3512, (uint64_t)v3514, v3515, SHIDWORD(v3515), v3517);
                    goto LABEL_2210;
                  }
                }
                uint64_t v925 = 0;
                char v926 = 1;
                while (1)
                {
                  char v927 = v926;
                  v928 = (void *)(*(void *)(v436 + 32) + 40 * v925);
                  if (*v928 == v923 && *((_DWORD *)v928 + 2) == v437) {
                    break;
                  }
                  char v926 = 0;
                  uint64_t v925 = 1;
                  if ((v927 & 1) == 0) {
                    goto LABEL_1008;
                  }
                }
                uint64_t v940 = v921[104];
                if (v940) {
                  LOWORD(v940) = *(_WORD *)(v940 + 8);
                }
                v942 = sub_1CCFDED5C((uint64_t)v921, 96, (const llvm::APInt *)&v3789, v3734, v3718, v923, v928[1], v919, v923, v437, v940);
                uint64_t v944 = *(void *)(a3 + 16);
                v945 = (uint64_t *)(*(void *)(v436 + 32) + 40 * (v925 ^ 1));
                uint64_t v946 = *v945;
                uint64_t v947 = v945[1];
                uint64_t v948 = *(void *)(v944 + 832);
                if (v948) {
                  LOWORD(v948) = *(_WORD *)(v948 + 8);
                }
                uint64_t v29 = (uint64_t)sub_1CCFDED5C(v944, 96, (const llvm::APInt *)&v3789, v3734, v3718, (uint64_t)v942, v941, v943, v946, v947, v948);
LABEL_2210:
                *(void *)&long long v3791 = v29;
                *((void *)&v3791 + 1) = v30;
                goto LABEL_3082;
              }
              goto LABEL_3081;
            }
          }
LABEL_180:
          long long v176 = *(_OWORD *)v11;
          goto LABEL_1104;
        }
        if (v764)
        {
          uint64_t v1605 = *(void *)(v435 + 32);
          v3710 = *(uint64_t **)v1605;
          int v1606 = *(_DWORD *)(v1605 + 8);
        }
        else
        {
          uint64_t v1919 = *((void *)v910 + 104);
          if (v1919) {
            __int16 v1920 = *(_WORD *)(v1919 + 8);
          }
          else {
            __int16 v1920 = 0;
          }
          v3710 = sub_1CD7F3564(v910, (const char *)0xDE, (uint64_t)&v3789, v3734, v3718, v435, (void *)v434, v1920);
          int v1606 = v2178;
          int v761 = *(unsigned __int16 *)(v436 + 24);
        }
        if (v761 == 222)
        {
          uint64_t v2179 = *(void *)(v436 + 32);
          v2180 = *(uint64_t **)v2179;
          int v2181 = *(_DWORD *)(v2179 + 8);
        }
        else
        {
          v2182 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v2183 = *((void *)v2182 + 104);
          if (v2183) {
            __int16 v2184 = *(_WORD *)(v2183 + 8);
          }
          else {
            __int16 v2184 = 0;
          }
          v2180 = sub_1CD7F3564(v2182, (const char *)0xDE, (uint64_t)&v3789, v3734, v3718, v436, (void *)v437, v2184);
          int v2181 = v2185;
        }
        uint64_t v2186 = *(void *)(a3 + 16);
        uint64_t v2187 = *(void *)(v8 + 40);
        uint64_t v2188 = *(unsigned __int16 *)(v8 + 58);
        v3793[0] = v3710;
        LODWORD(v3793[1]) = v1606;
        v3793[2] = v2180;
        LODWORD(v3794) = v2181;
        uint64_t v36 = sub_1CD801794(v2186, 0x60u, v2187, v2188, (uint64_t *)v3793, 2, *(_WORD *)(v8 + 72));
        int v41 = *(llvm::APFloatBase **)(a3 + 16);
        if (!v36 || v36 == (void *)v8)
        {
          uint64_t v2190 = *(void *)(v8 + 40);
          uint64_t v2191 = *(unsigned __int16 *)(v8 + 58);
          v3793[0] = v2180;
          LODWORD(v3793[1]) = v2181;
          v3793[2] = v3710;
          LODWORD(v3794) = v1606;
          v2192 = sub_1CD801794((uint64_t)v41, 0x60u, v2190, v2191, (uint64_t *)v3793, 2, *(_WORD *)(v8 + 72));
          if (!v2192) {
            goto LABEL_993;
          }
          uint64_t v36 = v2192;
          if (v2192 == (unsigned __int8 **)v8) {
            goto LABEL_993;
          }
          int v41 = *(llvm::APFloatBase **)(a3 + 16);
        }
        uint64_t v2189 = *((void *)v41 + 104);
        if (v2189) {
          __int16 v39 = *(_WORD *)(v2189 + 8);
        }
        else {
          __int16 v39 = 0;
        }
        uint64_t v42 = 222;
        uint64_t v43 = (uint64_t)v3734;
        v1311 = (void *)v3718;
        uint64_t v38 = 0;
        goto LABEL_2209;
      }
      if (v761 == 222)
      {
        LOBYTE(v764) = 0;
        goto LABEL_991;
      }
      if (v761 != 98) {
        goto LABEL_993;
      }
      uint64_t v762 = *(void *)(v435 + 48);
      if (!v762) {
        goto LABEL_805;
      }
      int v763 = 1;
      do
      {
        if (*(_DWORD *)(v762 + 8) == v434)
        {
          if (!v763) {
            goto LABEL_805;
          }
          --v763;
        }
        uint64_t v762 = *(void *)(v762 + 32);
      }
      while (v762);
      if (v763) {
        goto LABEL_805;
      }
      uint64_t v1430 = *(void *)(v436 + 48);
      if (!v1430) {
        goto LABEL_805;
      }
      int v1431 = 1;
      do
      {
        if (*(_DWORD *)(v1430 + 8) == v437)
        {
          if (!v1431) {
            goto LABEL_805;
          }
          --v1431;
        }
        uint64_t v1430 = *(void *)(v1430 + 32);
      }
      while (v1430);
      if (v1431 || (*(void *)&long long v3791 = 0, DWORD2(v3791) = 0, !*(unsigned char *)(*(void *)(a1 + 184296) + 313)))
      {
LABEL_805:
        int v760 = *(unsigned __int16 *)(v435 + 24);
        int v761 = *(unsigned __int16 *)(v436 + 24);
        goto LABEL_806;
      }
      v1432 = *(unsigned __int8 **)(v8 + 64);
      v3765 = v1432;
      if (v1432) {
        llvm::MetadataTracking::track((uint64_t)&v3765, v1432, 2);
      }
      int v3766 = *(_DWORD *)(v8 + 60);
      v1433 = *(uint64_t **)(v435 + 32);
      char v1434 = sub_1CD3DA6BC((uint64_t)&v3791, (char)v3734, v3718, (const llvm::APInt *)&v3765, *v1433, v1433[1], v1433[5], v1433[6], **(void **)(v436 + 32), *(void *)(*(void *)(v436 + 32) + 8), *(void *)(*(void *)(v436 + 32) + 40), *(void *)(*(void *)(v436 + 32) + 48), *(void **)(a3 + 16));
      if (v3765)
      {
        int v1435 = *v3765;
        if ((v1435 - 4) > 0x1E)
        {
          if ((v1435 - 3) >= 0xFFFFFFFE) {
            v3526 = v3765;
          }
          else {
            v3526 = 0;
          }
          if ((v1435 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v3527 = (unint64_t)(v3526 + 8);
LABEL_3559:
            v3793[0] = &v3765;
            sub_1CC5FA668(v3527 + 16, v3793);
            goto LABEL_1576;
          }
          if (v1435 == 3) {
            *((void *)v3765 + 1) = 0;
          }
        }
        else if ((v3765[1] & 0x7F) == 2 || *((_DWORD *)v3765 + 3))
        {
          uint64_t v3642 = *((void *)v3765 + 2);
          if ((v3642 & 4) != 0)
          {
            unint64_t v3527 = v3642 & 0xFFFFFFFFFFFFFFF8;
            if (v3527) {
              goto LABEL_3559;
            }
          }
        }
      }
LABEL_1576:
      if (v1434) {
        goto LABEL_3082;
      }
      goto LABEL_805;
    }
    if (v13 != 99)
    {
      if (v13 != 141) {
        goto LABEL_3081;
      }
      int v105 = *(uint64_t **)(v8 + 32);
      uint64_t v106 = *(void *)(v8 + 40);
      uint64_t v108 = *v105;
      uint64_t v107 = v105[1];
      BOOL v109 = (uint64_t *)v105[5];
      unint64_t v110 = v105[6];
      *(void *)&long long v3821 = v110;
      uint64_t v112 = (uint64_t *)v105[10];
      unint64_t v111 = v105[11];
      uint64_t v113 = *(llvm **)v106;
      uint64_t v114 = *(void *)(v106 + 8);
      int v115 = *(unsigned __int16 *)(v108 + 24);
      if (v115 != 12)
      {
        if (v115 == 222)
        {
          int v685 = *((unsigned __int16 *)v109 + 12);
          if (v685 == 36 || v685 == 12)
          {
            v1255 = *(void **)(a3 + 16);
            v1256 = *(uint64_t **)(v108 + 32);
            uint64_t v1257 = *v1256;
            uint64_t v1258 = v1256[1];
            uint64_t v1259 = v1255[104];
            uint64_t v1260 = *(void *)(v106 + 8);
            if (v1259) {
              __int16 v1261 = *(_WORD *)(v1259 + 8);
            }
            else {
              __int16 v1261 = 0;
            }
            v1506 = *(llvm **)v106;
            v1507 = sub_1CD7F3564(*(llvm::APFloatBase **)(a3 + 16), (const char *)0xDE, (uint64_t)&v3789, v113, v1260, (uint64_t)v109, (void *)v110, v1261);
            uint64_t v1509 = v1255[104];
            if (v1509) {
              LOWORD(v1509) = *(_WORD *)(v1509 + 8);
            }
            unint64_t v3663 = v111;
            __int16 v3666 = v1509;
            uint64_t v3654 = v1508;
            uint64_t v3659 = (uint64_t)v112;
            uint64_t v3649 = (uint64_t)v1507;
            v1510 = v1255;
            uint64_t v1511 = 141;
            v1512 = v1506;
            uint64_t v1513 = v1260;
            uint64_t v1514 = v1257;
LABEL_1680:
            uint64_t v1515 = v1258;
LABEL_1898:
            uint64_t v29 = (uint64_t)sub_1CD7F5D38(v1510, (const char *)v1511, (const llvm::APInt *)&v3789, v1512, v1513, v1514, v1515, a8, v3649, v3654, v3659, v3663, SHIDWORD(v3663), v3666);
            goto LABEL_2210;
          }
          goto LABEL_729;
        }
        if (v115 != 36) {
          goto LABEL_729;
        }
      }
      int v116 = *((unsigned __int16 *)v109 + 12);
      if (v116 == 36 || v116 == 12)
      {
        int v118 = *((unsigned __int16 *)v112 + 12);
        if (v118 == 36 || v118 == 12)
        {
          unsigned int v120 = *(llvm **)v106;
          uint64_t v121 = *(void *)(v106 + 8);
          uint64_t v122 = *(void *)(v108 + 80);
          uint64_t v124 = *(void **)(v122 + 32);
          int v123 = (const llvm::detail::DoubleAPFloat *)(v122 + 32);
          if (v124 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v123);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v123);
          }
          uint64_t v125 = v109[10];
          uint64_t v127 = *(void **)(v125 + 32);
          uint64_t v126 = (const llvm::detail::DoubleAPFloat *)(v125 + 32);
          if (v127 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v3815 + 1, v126);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3815 + 8, v126);
          }
          uint64_t v128 = v112[10];
          uint64_t v130 = *(void **)(v128 + 32);
          uint64_t v129 = (const llvm::detail::DoubleAPFloat *)(v128 + 32);
          if (v130 == &unk_1CFB2E344) {
            llvm::detail::DoubleAPFloat::DoubleAPFloat((void *)&v3813 + 1, v129);
          }
          else {
            llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3813 + 8, v129);
          }
          sub_1CB8DA0F4((uint64_t)v3793, (uint64_t)&v3815, (uint64_t)&v3813, 1);
          *(void *)&long long v3791 = sub_1CD7ECA8C(*(void *)(a3 + 16), (llvm::LLVMContext *)v3793, (const llvm::APFloat *)&v3789, v120, v121, 0);
          *((void *)&v3791 + 1) = v131;
          if (*((_UNKNOWN **)&v3813 + 1) == &unk_1CFB2E344)
          {
            sub_1CB845718(v3814);
          }
          else if ((*(_DWORD *)(*((void *)&v3813 + 1) + 8) - 64) <= 0xFFFFFF7F && v3814[0])
          {
            MEMORY[0x1D25D9CB0](v3814[0], 0x1000C8000313F17);
          }
          if (*((_UNKNOWN **)&v3815 + 1) == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v3816);
          }
          else if ((*(_DWORD *)(*((void *)&v3815 + 1) + 8) - 64) <= 0xFFFFFF7F && v3816)
          {
            MEMORY[0x1D25D9CB0](v3816, 0x1000C8000313F17);
          }
          uint64_t v132 = v3793[1];
          if (v3793[1] == &unk_1CFB2E344) {
            goto LABEL_3817;
          }
LABEL_1035:
          if ((v132[2] - 64) > 0xFFFFFF7F) {
            goto LABEL_3082;
          }
          __int16 v545 = v3793[2];
          if (!v3793[2]) {
            goto LABEL_3082;
          }
LABEL_547:
          MEMORY[0x1D25D9CB0](v545, 0x1000C8000313F17);
          goto LABEL_3082;
        }
      }
LABEL_729:
      int v687 = *((unsigned __int16 *)v112 + 12);
      if (v687 == 36 || v687 == 12) {
        int v689 = v112;
      }
      else {
        int v689 = 0;
      }
      v690 = *(llvm::APFloatBase **)(a3 + 16);
      int v691 = *(_WORD *)(*(void *)v690 + 1020) & 1;
      if (!v691 && v689)
      {
        uint64_t v692 = v689[10];
        if (*(_UNKNOWN **)(v692 + 32) == &unk_1CFB2E344) {
          uint64_t v693 = *(void *)(v692 + 40);
        }
        else {
          uint64_t v693 = v692 + 24;
        }
        if ((*(unsigned char *)(v693 + 28) & 7) != 3) {
          goto LABEL_1633;
        }
        v3706 = v113;
        uint64_t v3719 = v114;
        uint64_t v3736 = v107;
        uint64_t v785 = *((void *)v690 + 2);
        llvm::DiagnosticLocation::DiagnosticLocation(&v3815, (const llvm::DebugLoc *)&v3789);
        uint64_t v786 = *(void *)(*(void *)(v785 + 640) + 16);
        v787 = *(void **)(v786 + 56);
        LODWORD(v3793[1]) = 11;
        BYTE4(v3793[1]) = 2;
        long long v3794 = v3815;
        v3793[2] = v787;
        v3795 = "agx1-lower";
        v3796 = "SlowMathFAddWithZero";
        uint64_t v3797 = 20;
        LOBYTE(v3798) = 0;
        LOBYTE(v3799) = 0;
        v3800 = &v3802;
        uint64_t v3801 = 0x400000000;
        char v3810 = 0;
        int v3811 = -1;
        uint64_t v3812 = v786;
        v3793[0] = &unk_1F26165E0;
        char v3782 = 6;
        strcpy((char *)v3781, "String");
        v788 = (char *)operator new(0x58uLL);
        long long v3784 = xmmword_1CD935ED0;
        strcpy(v788, "A floating point add with zero cannot be optimized away because fast-math is disabled.");
        uint64_t v3785 = 0;
        uint64_t v3786 = 0;
        __p = v788;
        sub_1CD3D6290((uint64_t)v3793, (long long *)v3781);
        if (SHIBYTE(v3784) < 0) {
          operator delete(__p);
        }
        if (v3782 < 0) {
          operator delete(v3781[0]);
        }
        llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)v3793);
        v3793[0] = &unk_1F2616800;
        v789 = (uint64_t *)v3800;
        uint64_t v107 = v3736;
        uint64_t v113 = v3706;
        uint64_t v114 = v3719;
        if (v3801)
        {
          unint64_t v790 = (unint64_t)v3801 << 6;
          do
          {
            v791 = (void **)((char *)v789 + v790);
            if (*((char *)v789 + v790 - 17) < 0)
            {
              operator delete(*(v791 - 5));
              uint64_t v113 = v3706;
              uint64_t v114 = v3719;
              uint64_t v107 = v3736;
            }
            if (*((char *)v791 - 41) < 0)
            {
              operator delete(*(v791 - 8));
              uint64_t v113 = v3706;
              uint64_t v114 = v3719;
              uint64_t v107 = v3736;
            }
            v790 -= 64;
          }
          while (v790);
          v789 = (uint64_t *)v3800;
        }
        if (v789 != &v3802)
        {
          free(v789);
          uint64_t v113 = v3706;
          uint64_t v114 = v3719;
          uint64_t v107 = v3736;
        }
        v690 = *(llvm::APFloatBase **)(a3 + 16);
        int v691 = *(_WORD *)(*(void *)v690 + 1020) & 1;
      }
      if (v691)
      {
        int v1464 = *((unsigned __int16 *)v109 + 12);
        if (v1464 == 36 || v1464 == 12)
        {
          int v1465 = *(unsigned __int16 *)(v108 + 24);
          if (v1465 == 215 || v1465 == 212)
          {
            uint64_t v1466 = **(void **)(v108 + 32);
            if (*(_WORD *)(v1466 + 24) == 98)
            {
              uint64_t v1467 = *(void *)(v1466 + 32);
              v1468 = *(uint64_t **)(v1467 + 40);
              int v1469 = *((unsigned __int16 *)v1468 + 12);
              if (v1469 == 36 || v1469 == 12)
              {
                unint64_t v1746 = *(void *)(v1467 + 48);
                v1748 = *(uint64_t **)v1467;
                unint64_t v1747 = *(void *)(v1467 + 8);
                v1749 = v113;
                uint64_t v1750 = v114;
                if (*(unsigned char *)(v109[5] + 16 * v110) != 10)
                {
                  uint64_t v1751 = *((void *)v690 + 104);
                  if (v1751) {
                    __int16 v1752 = *(_WORD *)(v1751 + 8);
                  }
                  else {
                    __int16 v1752 = 0;
                  }
                  BOOL v109 = sub_1CD7F3564(v690, (const char *)0xD7, (uint64_t)&v3789, (llvm *)0xA, 0, (uint64_t)v109, (void *)v110, v1752);
                  unint64_t v110 = v110 & 0xFFFFFFFF00000000 | v2247;
                  v690 = *(llvm::APFloatBase **)(a3 + 16);
                }
                if (*(unsigned char *)(v1468[5] + 16 * v1746) != 10)
                {
                  uint64_t v2248 = *((void *)v690 + 104);
                  if (v2248) {
                    __int16 v2249 = *(_WORD *)(v2248 + 8);
                  }
                  else {
                    __int16 v2249 = 0;
                  }
                  v1468 = sub_1CD7F3564(v690, (const char *)0xD7, (uint64_t)&v3789, (llvm *)0xA, 0, (uint64_t)v1468, (void *)v1746, v2249);
                  unint64_t v1746 = v1746 & 0xFFFFFFFF00000000 | v2250;
                  v690 = *(llvm::APFloatBase **)(a3 + 16);
                }
                if (*(unsigned char *)(v1748[5] + 16 * v1747) != 10)
                {
                  uint64_t v2251 = *((void *)v690 + 104);
                  if (v2251) {
                    __int16 v2252 = *(_WORD *)(v2251 + 8);
                  }
                  else {
                    __int16 v2252 = 0;
                  }
                  v1748 = sub_1CD7F3564(v690, (const char *)0xD7, (uint64_t)&v3789, (llvm *)0xA, 0, (uint64_t)v1748, (void *)v1747, v2252);
                  unint64_t v1747 = v1747 & 0xFFFFFFFF00000000 | v2253;
                  v690 = *(llvm::APFloatBase **)(a3 + 16);
                }
                if (*(unsigned char *)(v112[5] + 16 * v111) != 10)
                {
                  uint64_t v2254 = *((void *)v690 + 104);
                  if (v2254) {
                    __int16 v2255 = *(_WORD *)(v2254 + 8);
                  }
                  else {
                    __int16 v2255 = 0;
                  }
                  uint64_t v112 = sub_1CD7F3564(v690, (const char *)0xD7, (uint64_t)&v3789, (llvm *)0xA, 0, (uint64_t)v112, (void *)v111, v2255);
                  unint64_t v111 = v111 & 0xFFFFFFFF00000000 | v2256;
                  v690 = *(llvm::APFloatBase **)(a3 + 16);
                }
                uint64_t v2257 = *((void *)v690 + 104);
                if (v2257) {
                  LOWORD(v2257) = *(_WORD *)(v2257 + 8);
                }
                v2258 = sub_1CCFDED5C((uint64_t)v690, 98, (const llvm::APInt *)&v3789, (llvm *)0xA, 0, (uint64_t)v109, v110, a8, (uint64_t)v1468, v1746, v2257);
                __int16 v2261 = 0;
                v2262 = *(void **)(a3 + 16);
                uint64_t v2263 = v2262[104];
                if (v2263) {
                  __int16 v2261 = *(_WORD *)(v2263 + 8);
                }
                v2264 = sub_1CD7F5D38(v2262, (const char *)0x8D, (const llvm::APInt *)&v3789, (llvm *)0xA, 0, (uint64_t)v1748, v1747, v2260, (uint64_t)v2258, v2259, (uint64_t)v112, v111, SHIDWORD(v111), v2261);
                *(void *)&long long v3791 = v2264;
                *((void *)&v3791 + 1) = v2265;
                if (v1749 != 9) {
                  goto LABEL_3082;
                }
                uint64_t v2266 = (uint64_t)v2264;
                uint64_t v2267 = v2265;
                uint64_t v2268 = *(void *)(a3 + 16);
                v2269 = sub_1CD7EBF14(v2268, 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                uint64_t v2272 = *(void *)(v2268 + 832);
                if (v2272) {
                  LOWORD(v2272) = *(_WORD *)(v2272 + 8);
                }
                uint64_t v2273 = (uint64_t)sub_1CCFDED5C(v2268, 212, (const llvm::APInt *)&v3789, v1749, v1750, v2266, v2267, v2271, (uint64_t)v2269, v2270, v2272);
LABEL_2653:
                *(void *)&long long v3791 = v2273;
                DWORD2(v3791) = v2274;
                goto LABEL_3082;
              }
            }
          }
        }
      }
LABEL_1633:
      if (*(int *)(a3 + 8) <= 1) {
        goto LABEL_3081;
      }
      v1471 = v113;
      uint64_t v3723 = v114;
      unint64_t v3742 = v107;
      v1472 = *(unsigned __int8 **)(v8 + 64);
      *(void *)&long long v3815 = v1472;
      if (v1472) {
        llvm::MetadataTracking::track((uint64_t)&v3815, v1472, 2);
      }
      DWORD2(v3815) = *(_DWORD *)(v8 + 60);
      int v1473 = *(unsigned __int16 *)(v108 + 24);
      if (v1473 != 222
        && (int v1474 = *((unsigned __int16 *)v109 + 12), v1474 != 222)
        && *((_WORD *)v112 + 12) != 222
        && v1474 != 36
        && v1474 != 12
        || !sub_1CB8C5A98(v8)
        || (v1475 = *(llvm::APFloatBase **)(a3 + 16), (*(_WORD *)(*(void *)v1475 + 1020) & 1) == 0))
      {
LABEL_1643:
        if (v1471 != 9) {
          goto LABEL_3063;
        }
        BOOL v1476 = (BOOL)v1471;
        int v1477 = *((unsigned __int16 *)v112 + 12);
        if (v1477 != 98)
        {
LABEL_1647:
          if (v1477 == 141)
          {
            v1478 = *(void **)(a3 + 16);
            if ((*(_WORD *)(*v1478 + 1020) & 1) == 0) {
              goto LABEL_3063;
            }
            v1479 = (uint64_t *)v112[4];
            uint64_t v1480 = *v1479;
            v1481 = (void *)v1479[1];
            uint64_t v1482 = v1479[5];
            v1483 = (void *)v1479[6];
            uint64_t v1485 = v1479[10];
            uint64_t v1484 = v1479[11];
            if (v1482 == v1485 && v1483 == v1484)
            {
              uint64_t v2037 = v1479[11];
              v2039 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)&v3815, v1476, v3723, 0, 1.0);
              uint64_t v2041 = v1478[104];
              if (v2041) {
                LOWORD(v2041) = *(_WORD *)(v2041 + 8);
              }
              v2042 = sub_1CCFDED5C((uint64_t)v1478, 96, (const llvm::APInt *)&v3815, v1471, v3723, (uint64_t)v2039, v2038, v2040, v1480, (uint64_t)v1481, v2041);
              uint64_t v2045 = v2037;
            }
            else if (v1480 == v1485 && v1481 == v1484)
            {
              v2049 = sub_1CD7ECDC4(*(void *)(a3 + 16), (uint64_t)&v3815, v1476, v3723, 0, 1.0);
              uint64_t v2051 = v1478[104];
              if (v2051) {
                LOWORD(v2051) = *(_WORD *)(v2051 + 8);
              }
              v2042 = sub_1CCFDED5C((uint64_t)v1478, 96, (const llvm::APInt *)&v3815, v1471, v3723, (uint64_t)v2049, v2048, v2050, v1482, (uint64_t)v1483, v2051);
              uint64_t v1482 = v1480;
              uint64_t v2045 = (uint64_t)v1481;
            }
            else
            {
              if (*(_WORD *)(v1482 + 24) == 222
                && (uint64_t v1486 = *(void *)(v1482 + 32), *(void *)v1486 == v1485)
                && *(_DWORD *)(v1486 + 8) == v1484)
              {
                uint64_t v3708 = v1484;
                v2781 = sub_1CD7ECDC4((uint64_t)v1478, (uint64_t)&v3815, v1476, v3723, 0, 1.0);
                uint64_t v2783 = v2782;
                v2784 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v2785 = *((void *)v2784 + 104);
                if (v2785) {
                  __int16 v2786 = *(_WORD *)(v2785 + 8);
                }
                else {
                  __int16 v2786 = 0;
                }
                v3042 = sub_1CD7F3564(v2784, (const char *)0xDE, (uint64_t)&v3815, v1471, v3723, v1480, v1481, v2786);
                uint64_t v3045 = v1478[104];
                if (v3045) {
                  LOWORD(v3045) = *(_WORD *)(v3045 + 8);
                }
                v2042 = sub_1CCFDED5C((uint64_t)v1478, 96, (const llvm::APInt *)&v3815, v1471, v3723, (uint64_t)v2781, v2783, v3044, (uint64_t)v3042, v3043, v3045);
              }
              else
              {
                if (*(_WORD *)(v1480 + 24) != 222) {
                  goto LABEL_3063;
                }
                uint64_t v1487 = *(void *)(v1480 + 32);
                if (*(void *)v1487 != v1485 || *(_DWORD *)(v1487 + 8) != v1484) {
                  goto LABEL_3063;
                }
                uint64_t v3708 = v1484;
                v1488 = sub_1CD7ECDC4((uint64_t)v1478, (uint64_t)&v3815, v1476, v3723, 0, 1.0);
                uint64_t v1490 = v1489;
                v1491 = *(llvm::APFloatBase **)(a3 + 16);
                uint64_t v1492 = *((void *)v1491 + 104);
                if (v1492) {
                  __int16 v1493 = *(_WORD *)(v1492 + 8);
                }
                else {
                  __int16 v1493 = 0;
                }
                v3046 = sub_1CD7F3564(v1491, (const char *)0xDE, (uint64_t)&v3815, v1471, v3723, v1482, v1483, v1493);
                uint64_t v3049 = v1478[104];
                if (v3049) {
                  LOWORD(v3049) = *(_WORD *)(v3049 + 8);
                }
                v2042 = sub_1CCFDED5C((uint64_t)v1478, 96, (const llvm::APInt *)&v3815, v1471, v3723, (uint64_t)v1488, v1490, v3048, (uint64_t)v3046, v3047, v3049);
              }
              uint64_t v1482 = v1485;
              uint64_t v2045 = v3708;
            }
            uint64_t v3050 = *(void *)(a3 + 16);
            uint64_t v3051 = *(void *)(v3050 + 832);
            if (v3051) {
              LOWORD(v3051) = *(_WORD *)(v3051 + 8);
            }
            uint64_t v112 = sub_1CCFDED5C(v3050, 98, (const llvm::APInt *)&v3815, v1471, v3723, v1482, v2045, v2044, (uint64_t)v2042, v2043, v3051);
            int v1477 = *((unsigned __int16 *)v112 + 12);
          }
          unint64_t v3052 = v3742;
          if (v1477 != 98) {
            goto LABEL_3063;
          }
          uint64_t v3053 = v112[4];
          uint64_t v3054 = *(void *)v3053;
          unint64_t v3055 = *(void *)(v3053 + 8);
          uint64_t v3056 = *(void *)(v3053 + 40);
          uint64_t v3057 = *(unsigned int *)(v3053 + 48);
          if (*(_WORD *)(v3056 + 24) != 96) {
            goto LABEL_3016;
          }
          uint64_t v3058 = *(void *)(*(void *)(v3056 + 32) + 40);
          int v3059 = *(unsigned __int16 *)(v3058 + 24);
          BOOL v3060 = v3059 == 36 || v3059 == 12;
          if (v3060
            && (v3061 = sub_1CB8BE1E4(*(void *)(v3058 + 80) + 24, 1.0), unint64_t v3052 = v3742, v3061)
            && (uint64_t v3062 = **(void **)(v3056 + 32), *(_WORD *)(v3062 + 24) == 222)
            && (uint64_t v3063 = *(void *)(v3062 + 32), *(uint64_t **)v3063 == v109)
            && *(_DWORD *)(v3063 + 8) == v3821
            && (v3064 = sub_1CB8DA118((uint64_t)v109, v3821, 0), unint64_t v3052 = v3742, v3064))
          {
            uint64_t v3065 = v3056;
            uint64_t v3056 = v3054;
          }
          else
          {
LABEL_3016:
            unint64_t v3066 = v3055 & 0xFFFFFFFF00000000 | v3057;
            LODWORD(v3057) = v3055;
            uint64_t v3065 = v3054;
            unint64_t v3055 = v3066;
          }
          if (*(_WORD *)(v3065 + 24) != 96) {
            goto LABEL_3029;
          }
          uint64_t v3067 = *(void *)(*(void *)(v3065 + 32) + 40);
          int v3068 = *(unsigned __int16 *)(v3067 + 24);
          BOOL v3069 = v3068 == 36 || v3068 == 12;
          if (v3069
            && (v3070 = sub_1CB8BE1E4(*(void *)(v3067 + 80) + 24, 1.0), unint64_t v3052 = v3742, v3070)
            && (uint64_t v3071 = **(void **)(v3065 + 32), *(_WORD *)(v3071 + 24) == 222)
            && (uint64_t v3072 = *(void *)(v3071 + 32), *(uint64_t **)v3072 == v109)
            && *(_DWORD *)(v3072 + 8) == v3821
            && (v3073 = v3821, v3074 = sub_1CB8DA118((uint64_t)v109, v3821, 0), unint64_t v3052 = v3742, v3074))
          {
            v3075 = v109;
            uint64_t v3076 = (uint64_t)v109;
            BOOL v109 = (uint64_t *)v3065;
            v3077 = (uint64_t *)v3056;
            uint64_t v3056 = v108;
          }
          else
          {
LABEL_3029:
            unint64_t v3078 = v3052 & 0xFFFFFFFF00000000 | v3055;
            unint64_t v3055 = v3055 & 0xFFFFFFFF00000000 | v3052;
            int v3079 = v3821;
            v3075 = (uint64_t *)v3065;
            LODWORD(v3821) = v3057;
            uint64_t v3076 = v3065;
            unsigned int v3073 = v3057;
            v3077 = (uint64_t *)v108;
            LODWORD(v3057) = v3079;
            unint64_t v3052 = v3078;
          }
          if (*((_WORD *)v109 + 12) == 96)
          {
            uint64_t v3080 = *(void *)(v109[4] + 40);
            int v3081 = *(unsigned __int16 *)(v3080 + 24);
            if (v3081 == 36 || v3081 == 12)
            {
              unint64_t v3082 = v3052;
              if (sub_1CB8BE1E4(*(void *)(v3080 + 80) + 24, 1.0)
                && (uint64_t v3083 = *(void *)v109[4], *(_WORD *)(v3083 + 24) == 222)
                && (uint64_t v3084 = *(void *)(v3083 + 32), *(uint64_t **)v3084 == v3075))
              {
                unint64_t v3052 = v3082;
                if (*(_DWORD *)(v3084 + 8) == v3073)
                {
                  unsigned int v3073 = v3821;
                  BOOL v3115 = sub_1CB8DA118(v3076, v3821, 0);
                  unint64_t v3052 = v3082;
                  if (v3115)
                  {
                    uint64_t v3086 = (uint64_t)v3075;
                    v3075 = (uint64_t *)v3056;
                    goto LABEL_3038;
                  }
                }
              }
              else
              {
                unint64_t v3052 = v3082;
              }
            }
          }
          uint64_t v3085 = v3073;
          LODWORD(v3821) = v3052;
          unsigned int v3073 = v3052;
          unint64_t v3052 = v3052 & 0xFFFFFFFF00000000 | v3085;
          uint64_t v3086 = v3056;
          uint64_t v3076 = v3056;
LABEL_3038:
          if (*((_WORD *)v109 + 12) == 96)
          {
            uint64_t v3087 = *(void *)(v109[4] + 40);
            int v3088 = *(unsigned __int16 *)(v3087 + 24);
            if (v3088 == 36 || v3088 == 12)
            {
              unint64_t v3089 = v3052;
              if (sub_1CB8BE1E4(*(void *)(v3087 + 80) + 24, 1.0)
                && (uint64_t v3090 = *(void *)v109[4], *(_WORD *)(v3090 + 24) == 222)
                && (uint64_t v3091 = *(void *)(v3090 + 32), *(void *)v3091 == v3086))
              {
                unint64_t v3052 = v3089;
                if (*(_DWORD *)(v3091 + 8) == v3073)
                {
                  unsigned int v3073 = v3821;
                  BOOL v3116 = sub_1CB8DA118(v3076, v3821, 0);
                  unint64_t v3052 = v3089;
                  if (v3116)
                  {
                    v3092 = v109;
                    BOOL v109 = v3077;
                    goto LABEL_3046;
                  }
                }
              }
              else
              {
                unint64_t v3052 = v3089;
              }
            }
          }
          unint64_t v3055 = v3055 & 0xFFFFFFFF00000000 | v3057;
          v3092 = v3077;
LABEL_3046:
          if (*((_WORD *)v3092 + 12) == 96)
          {
            uint64_t v3093 = *(void *)(v3092[4] + 40);
            int v3094 = *(unsigned __int16 *)(v3093 + 24);
            if (v3094 == 36 || v3094 == 12)
            {
              unint64_t v3095 = v3052;
              if (sub_1CB8BE1E4(*(void *)(v3093 + 80) + 24, 1.0)
                && (uint64_t v3096 = *(void *)v3092[4], *(_WORD *)(v3096 + 24) == 222)
                && (uint64_t v3097 = *(void *)(v3096 + 32), *(void *)v3097 == v3086))
              {
                unint64_t v3052 = v3095;
                if (*(_DWORD *)(v3097 + 8) == v3073)
                {
                  unsigned int v3073 = v3821;
                  BOOL v3117 = sub_1CB8DA118(v3076, v3821, 0);
                  unint64_t v3052 = v3095;
                  if (v3117)
                  {
                    uint64_t v3099 = v3086;
                    uint64_t v3086 = (uint64_t)v3075;
LABEL_3054:
                    if (*((_WORD *)v3092 + 12) == 96)
                    {
                      uint64_t v3100 = *(void *)(v3092[4] + 40);
                      int v3101 = *(unsigned __int16 *)(v3100 + 24);
                      if (v3101 == 36 || v3101 == 12)
                      {
                        unint64_t v3102 = v3052;
                        if (sub_1CB8BE1E4(*(void *)(v3100 + 80) + 24, 1.0))
                        {
                          uint64_t v3103 = *(void *)v3092[4];
                          if (*(_WORD *)(v3103 + 24) == 222)
                          {
                            uint64_t v3104 = *(void *)(v3103 + 32);
                            if (*(void *)v3104 == v3099 && *(_DWORD *)(v3104 + 8) == v3073)
                            {
                              uint64_t v3105 = v3821;
                              if (sub_1CB8DA118(v3076, v3821, 0))
                              {
                                if (*(unsigned char *)(*(void *)(a1 + 184296) + 313))
                                {
                                  v3519 = *(void **)(a3 + 16);
                                  if (*(_WORD *)(v3099 + 24) == 46)
                                  {
                                    v3520 = *(uint64_t **)(v3099 + 32);
                                    uint64_t v3521 = *(void *)(*v3520 + 80);
                                    v3522 = (void *)(v3521 + 24);
                                    if (*(_DWORD *)(v3521 + 32) >= 0x41u) {
                                      v3522 = (void *)*v3522;
                                    }
                                    v3523 = (void *)*v3522;
                                    BOOL v3524 = v3523 == (void *)1830;
                                    if (v3523 == (void *)1830) {
                                      v3525 = v3520 + 6;
                                    }
                                    else {
                                      v3525 = (uint64_t *)&v3821;
                                    }
                                    uint64_t v3105 = *v3525;
                                    if (v3524) {
                                      uint64_t v3099 = v3520[5];
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v3099 = v3076;
                                  }
                                  uint64_t v3581 = v3519[104];
                                  if (v3581) {
                                    LOWORD(v3581) = *(_WORD *)(v3581 + 8);
                                  }
                                  v1265 = sub_1CD7F5D38(v3519, (const char *)0x1BB, (const llvm::APInt *)&v3815, (llvm *)9, 0, (uint64_t)v109, v3055, v3106, v3099, v3105, v3086, v3102, SHIDWORD(v3102), v3581);
                                  goto LABEL_2492;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    goto LABEL_3063;
                  }
                }
              }
              else
              {
                unint64_t v3052 = v3095;
              }
            }
          }
          uint64_t v3098 = v3073;
          LODWORD(v3821) = v3052;
          unsigned int v3073 = v3052;
          unint64_t v3052 = v3052 & 0xFFFFFFFF00000000 | v3098;
          uint64_t v3099 = (uint64_t)v3075;
          uint64_t v3076 = (uint64_t)v3075;
          goto LABEL_3054;
        }
        *(void *)&long long v3791 = 0;
        DWORD2(v3791) = 0;
        if (!*(unsigned char *)(*(void *)(a1 + 184296) + 313))
        {
LABEL_1646:
          int v1477 = *((unsigned __int16 *)v112 + 12);
          goto LABEL_1647;
        }
        v1768 = *(unsigned __int8 **)(v8 + 64);
        v3779 = v1768;
        if (v1768)
        {
          llvm::MetadataTracking::track((uint64_t)&v3779, v1768, 2);
          LOBYTE(v1476) = (_BYTE)v1471;
        }
        int v3780 = *(_DWORD *)(v8 + 60);
        char v1769 = sub_1CD3DA6BC((uint64_t)&v3791, v1476, v3723, (const llvm::APInt *)&v3779, v108, v3742, (uint64_t)v109, v110, *(void *)v112[4], *(void *)(v112[4] + 8), *(void *)(v112[4] + 40), *(void *)(v112[4] + 48), *(void **)(a3 + 16));
        if (v3779)
        {
          int v1770 = *v3779;
          if ((v1770 - 4) > 0x1E)
          {
            if ((v1770 - 3) >= 0xFFFFFFFE) {
              v2629 = v3779;
            }
            else {
              v2629 = 0;
            }
            if ((v1770 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v2630 = (unint64_t)(v2629 + 8);
LABEL_2659:
              v3793[0] = &v3779;
              sub_1CC5FA668(v2630 + 16, v3793);
              goto LABEL_1942;
            }
            if (v1770 == 3) {
              *((void *)v3779 + 1) = 0;
            }
          }
          else if ((v3779[1] & 0x7F) == 2 || *((_DWORD *)v3779 + 3))
          {
            uint64_t v3630 = *((void *)v3779 + 2);
            if ((v3630 & 4) != 0)
            {
              unint64_t v2630 = v3630 & 0xFFFFFFFFFFFFFFF8;
              if (v2630) {
                goto LABEL_2659;
              }
            }
          }
        }
LABEL_1942:
        BOOL v1476 = (BOOL)v1471;
        if (v1769)
        {
          char v897 = 0;
          goto LABEL_3064;
        }
        goto LABEL_1646;
      }
      if (v1473 == 222)
      {
        uint64_t v1516 = *(void *)(v108 + 32);
        v3691 = *(void **)v1516;
        int v3699 = v110;
        int v1517 = *(_DWORD *)(v1516 + 8);
        v3709 = v109;
      }
      else
      {
        if (*((_WORD *)v109 + 12) == 222)
        {
          uint64_t v1773 = v109[4];
          v3709 = *(uint64_t **)v1773;
          int v1774 = *(_DWORD *)(v1773 + 8);
        }
        else
        {
          uint64_t v2046 = *((void *)v1475 + 104);
          if (v2046) {
            __int16 v2047 = *(_WORD *)(v2046 + 8);
          }
          else {
            __int16 v2047 = 0;
          }
          v3709 = sub_1CD7F3564(v1475, (const char *)0xDE, (uint64_t)&v3815, v1471, v3723, (uint64_t)v109, (void *)v110, v2047);
          int v1774 = v2318;
        }
        v3691 = (void *)v108;
        int v3699 = v1774;
        int v1517 = v3742;
      }
      if (*((_WORD *)v112 + 12) == 222)
      {
        uint64_t v2319 = v112[4];
        v2320 = *(uint64_t **)v2319;
        int v2321 = *(_DWORD *)(v2319 + 8);
      }
      else
      {
        v2322 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v2323 = *((void *)v2322 + 104);
        if (v2323) {
          __int16 v2324 = *(_WORD *)(v2323 + 8);
        }
        else {
          __int16 v2324 = 0;
        }
        v2320 = sub_1CD7F3564(v2322, (const char *)0xDE, (uint64_t)&v3815, v1471, v3723, (uint64_t)v112, (void *)v111, v2324);
        int v2321 = v2325;
      }
      uint64_t v2326 = *(void *)(a3 + 16);
      uint64_t v2327 = *(void *)(v8 + 40);
      uint64_t v2328 = *(unsigned __int16 *)(v8 + 58);
      v3793[0] = v3691;
      LODWORD(v3793[1]) = v1517;
      v3793[2] = v3709;
      LODWORD(v3794) = v3699;
      *((void *)&v3794 + 1) = v2320;
      LODWORD(v3795) = v2321;
      uint64_t v2329 = *(void *)(v2326 + 832);
      if (v2329) {
        __int16 v2330 = *(_WORD *)(v2329 + 8);
      }
      else {
        __int16 v2330 = 0;
      }
      v2145 = sub_1CD801794(v2326, 0x8Du, v2327, v2328, (uint64_t *)v3793, 3, v2330);
      v2146 = *(llvm::APFloatBase **)(a3 + 16);
      if (!v2145 || v2145 == (unsigned __int8 **)v8)
      {
        uint64_t v2332 = *(void *)(v8 + 40);
        uint64_t v2333 = *(unsigned __int16 *)(v8 + 58);
        v3793[0] = v3709;
        LODWORD(v3793[1]) = v3699;
        v3793[2] = v3691;
        LODWORD(v3794) = v1517;
        *((void *)&v3794 + 1) = v2320;
        LODWORD(v3795) = v2321;
        uint64_t v2334 = *((void *)v2146 + 104);
        if (v2334) {
          __int16 v2335 = *(_WORD *)(v2334 + 8);
        }
        else {
          __int16 v2335 = 0;
        }
        v2336 = sub_1CD801794((uint64_t)v2146, 0x8Du, v2332, v2333, (uint64_t *)v3793, 3, v2335);
        if (!v2336) {
          goto LABEL_1643;
        }
        v2145 = v2336;
        if (v2336 == (unsigned __int8 **)v8) {
          goto LABEL_1643;
        }
        v2146 = *(llvm::APFloatBase **)(a3 + 16);
      }
      uint64_t v2331 = *((void *)v2146 + 104);
      if (v2331) {
        __int16 v2148 = *(_WORD *)(v2331 + 8);
      }
      else {
        __int16 v2148 = 0;
      }
      v2152 = v1471;
      uint64_t v2153 = v3723;
      goto LABEL_2491;
    }
    uint64_t v444 = *(void *)(v8 + 40);
    unsigned int v445 = *(llvm **)v444;
    uint64_t v55 = *(void *)(v444 + 8);
    uint64_t v446 = **(void **)(v8 + 32);
    int v447 = *(unsigned __int16 *)(v446 + 24);
    BOOL v448 = v447 == 36 || v447 == 12;
    if (v448 && sub_1CB8BE1E4(*(void *)(v446 + 80) + 24, 1.0))
    {
      int v41 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v1128 = *(void *)(v8 + 32);
      uint64_t v36 = *(void **)(v1128 + 40);
      uint64_t v38 = *(void **)(v1128 + 48);
      uint64_t v1129 = *((void *)v41 + 104);
      if (v1129) {
        __int16 v39 = *(_WORD *)(v1129 + 8);
      }
      else {
        __int16 v39 = 0;
      }
      uint64_t v42 = 423;
      uint64_t v43 = (uint64_t)v445;
LABEL_1977:
      v1311 = (void *)v55;
      goto LABEL_2209;
    }
    unsigned int v449 = *(llvm::APFloatBase **)(a3 + 16);
    if ((*(_WORD *)(*(void *)v449 + 1020) & 1) == 0) {
      goto LABEL_3081;
    }
    uint64_t v450 = *(void *)(v8 + 32);
    uint64_t v451 = *(void *)(v450 + 40);
    int v452 = *(unsigned __int16 *)(v451 + 24);
    if (v452 == 215 || v452 == 212)
    {
      uint64_t v453 = *(void **)(v451 + 32);
      uint64_t v455 = *v453;
      unint64_t v454 = (unsigned int *)(v453 + 1);
      uint64_t v451 = v455;
      int v452 = *(unsigned __int16 *)(v455 + 24);
    }
    else
    {
      unint64_t v454 = (unsigned int *)(v450 + 48);
    }
    if (v452 != 224) {
      goto LABEL_3081;
    }
    uint64_t v800 = v451 + 32;
    v799 = *(uint64_t **)(v451 + 32);
    uint64_t v801 = *(void *)(v800 + 8) + 16 * *v454;
    v803 = *(llvm **)v801;
    uint64_t v802 = *(void *)(v801 + 8);
    uint64_t v804 = *v799;
    v805 = (void *)v799[1];
    uint64_t v806 = *((void *)v449 + 104);
    if (v806) {
      __int16 v807 = *(_WORD *)(v806 + 8);
    }
    else {
      __int16 v807 = 0;
    }
    v1502 = sub_1CD7F3564(v449, (const char *)0x1A8, (uint64_t)&v3789, *(llvm **)v801, *(void *)(v801 + 8), v804, v805, v807);
    unint64_t v1503 = (unint64_t)v1501;
    if (v803 == v445)
    {
      if ((_BYTE)v803) {
        BOOL v1504 = 1;
      }
      else {
        BOOL v1504 = v802 == v55;
      }
      if (v1504) {
        goto LABEL_1674;
      }
    }
    else if (v803 == 9)
    {
      v2308 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2309 = *((void *)v2308 + 104);
      if (v2309) {
        __int16 v2310 = *(_WORD *)(v2309 + 8);
      }
      else {
        __int16 v2310 = 0;
      }
      v2316 = sub_1CD7F3564(v2308, (const char *)0xD7, (uint64_t)&v3789, v445, v55, (uint64_t)v1502, v1501, v2310);
LABEL_2912:
      v1502 = v2316;
      unint64_t v1503 = v1503 & 0xFFFFFFFF00000000 | v2317;
LABEL_1674:
      uint64_t v522 = *(void *)(a3 + 16);
      uint64_t v1505 = *(void *)(v8 + 32);
      uint64_t v514 = *(uint64_t **)v1505;
      uint64_t v526 = *(void *)(v1505 + 8);
      uint64_t v3652 = v1503;
      __int16 v3657 = *(_WORD *)(v8 + 72);
      uint64_t v3647 = (uint64_t)v1502;
      uint64_t v523 = 98;
      uint64_t v524 = (uint64_t)v445;
      uint64_t v525 = v55;
      goto LABEL_1675;
    }
    uint64_t v2311 = *(void *)(a3 + 16);
    v2312 = sub_1CD7EBF14(v2311, 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
    uint64_t v2315 = *(void *)(v2311 + 832);
    if (v2315) {
      LOWORD(v2315) = *(_WORD *)(v2315 + 8);
    }
    v2316 = sub_1CCFDED5C(v2311, 212, (const llvm::APInt *)&v3789, v445, v55, (uint64_t)v1502, v1503, v2314, (uint64_t)v2312, v2313, v2315);
    goto LABEL_2912;
  }
  switch(*(_WORD *)(v8 + 24))
  {
    case '.':
      int v31 = *(uint64_t **)(v8 + 32);
      uint64_t v32 = *(void *)(*v31 + 80);
      uint64_t v33 = (uint64_t *)(v32 + 24);
      if (*(_DWORD *)(v32 + 32) >= 0x41u) {
        uint64_t v33 = (uint64_t *)*v33;
      }
      uint64_t v34 = *v33;
      if ((int)*v33 <= 1280)
      {
        switch(v34)
        {
          case 0xFD:
            v990 = *(unsigned __int8 **)(v8 + 64);
            *(void *)&long long v3815 = v990;
            if (v990)
            {
              llvm::MetadataTracking::track((uint64_t)&v3815, v990, 2);
              int v12 = *(_DWORD *)(v8 + 60);
              int v31 = *(uint64_t **)(v8 + 32);
            }
            DWORD2(v3815) = v12;
            uint64_t v991 = v31[5];
            int v992 = *(unsigned __int16 *)(v991 + 24);
            if (v992 != 36 && v992 != 12)
            {
              v1267 = (void *)v31[6];
              uint64_t v1268 = *(void *)(v8 + 40);
              v1269 = *(llvm **)v1268;
              uint64_t v1270 = *(void *)(v1268 + 8);
              v1271 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v1272 = *((void *)v1271 + 104);
              if (v1272) {
                __int16 v1273 = *(_WORD *)(v1272 + 8);
              }
              else {
                __int16 v1273 = 0;
              }
              uint64_t v1518 = 423;
LABEL_1688:
              v1519 = sub_1CD7F3564(v1271, (const char *)v1518, (uint64_t)&v3815, v1269, v1270, v991, v1267, v1273);
LABEL_1689:
              *(void *)&long long v3791 = v1519;
              *((void *)&v3791 + 1) = v1520;
              goto LABEL_1690;
            }
            uint64_t v994 = *(void *)(v991 + 80);
            v996 = *(void **)(v994 + 32);
            v995 = (const llvm::detail::DoubleAPFloat *)(v994 + 32);
            if (v996 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v995);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v995);
            }
            llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E31C, 1, &v3813);
            double v997 = llvm::APFloat::convertToDouble((llvm::APFloat *)v3793);
            uint64_t v998 = *(void *)(a3 + 16);
            v999 = *(uint64_t **)(v8 + 40);
            uint64_t v1000 = *v999;
            uint64_t v1001 = v999[1];
            double v1002 = 1.0 / v997;
            break;
          case 0x105:
            v1003 = *(unsigned __int8 **)(v8 + 64);
            *(void *)&long long v3815 = v1003;
            if (v1003)
            {
              llvm::MetadataTracking::track((uint64_t)&v3815, v1003, 2);
              int v12 = *(_DWORD *)(v8 + 60);
              int v31 = *(uint64_t **)(v8 + 32);
            }
            DWORD2(v3815) = v12;
            uint64_t v991 = v31[5];
            int v1004 = *(unsigned __int16 *)(v991 + 24);
            if (v1004 != 36 && v1004 != 12)
            {
              v1267 = (void *)v31[6];
              uint64_t v1274 = *(void *)(v8 + 40);
              v1269 = *(llvm **)v1274;
              uint64_t v1270 = *(void *)(v1274 + 8);
              v1271 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v1275 = *((void *)v1271 + 104);
              if (v1275) {
                __int16 v1273 = *(_WORD *)(v1275 + 8);
              }
              else {
                __int16 v1273 = 0;
              }
              uint64_t v1518 = 424;
              goto LABEL_1688;
            }
            uint64_t v1006 = *(void *)(v991 + 80);
            v1008 = *(void **)(v1006 + 32);
            v1007 = (const llvm::detail::DoubleAPFloat *)(v1006 + 32);
            if (v1008 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v1007);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v1007);
            }
            llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E31C, 1, &v3813);
            double v1002 = 1.0 / sqrt(llvm::APFloat::convertToDouble((llvm::APFloat *)v3793));
            uint64_t v998 = *(void *)(a3 + 16);
            v1009 = *(uint64_t **)(v8 + 40);
            uint64_t v1000 = *v1009;
            uint64_t v1001 = v1009[1];
            break;
          case 0x4F5:
            unint64_t v35 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v36 = sub_1CD3D6670(v35, (uint64_t)v35 + 112, 0, (const llvm::APInt *)&v3789, 291, (llvm *)5, 0);
            uint64_t v38 = v37;
            __int16 v39 = 0;
            uint64_t v40 = *((void *)v35 + 104);
            if (v40) {
              __int16 v39 = *(_WORD *)(v40 + 8);
            }
            int v41 = v35;
LABEL_30:
            uint64_t v42 = 201;
LABEL_31:
            uint64_t v43 = 4;
            goto LABEL_2208;
          default:
            goto LABEL_3081;
        }
        *(void *)&long long v3791 = sub_1CD7ECDC4(v998, (uint64_t)&v3815, v1000, v1001, 0, v1002);
        *((void *)&v3791 + 1) = v1010;
        if (v3793[1] == &unk_1CFB2E344)
        {
          sub_1CB845718((uint64_t *)&v3793[2]);
        }
        else if ((*((_DWORD *)v3793[1] + 2) - 64) <= 0xFFFFFF7F && v3793[2])
        {
          MEMORY[0x1D25D9CB0](v3793[2], 0x1000C8000313F17);
        }
LABEL_1690:
        v858 = (unsigned __int8 *)v3815;
        if (!(void)v3815) {
          goto LABEL_3082;
        }
        int v859 = *(unsigned __int8 *)v3815;
        if ((v859 - 4) > 0x1E)
        {
          if ((v859 - 3) >= 0xFFFFFFFE) {
            uint64_t v1522 = v3815;
          }
          else {
            uint64_t v1522 = 0;
          }
          if ((v859 - 3) < 0xFFFFFFFE) {
            goto LABEL_3395;
          }
          unint64_t v1399 = v1522 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v3815 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3815 + 12)) {
            goto LABEL_3082;
          }
          uint64_t v1521 = *(void *)(v3815 + 16);
          if ((v1521 & 4) == 0) {
            goto LABEL_3082;
          }
          unint64_t v1399 = v1521 & 0xFFFFFFFFFFFFFFF8;
          if (!v1399) {
            goto LABEL_3082;
          }
        }
        v1523 = (unsigned __int8 **)&v3815;
        goto LABEL_1703;
      }
      switch((int)v34)
      {
        case 1822:
          uint64_t v1926 = v8;
          v2814 = *(void **)(v8 + 64);
          v3793[0] = v2814;
          if (v2814)
          {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v2814, 2);
            int v12 = *(_DWORD *)(v8 + 60);
            int v31 = *(uint64_t **)(v8 + 32);
          }
          LODWORD(v3793[1]) = v12;
          v2816 = sub_1CD3DC75C(a1, v31[5], *(llvm::APFloatBase **)(a3 + 16));
          v2817 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v2818 = *((void *)v2817 + 104);
          if (v2818) {
            __int16 v2819 = *(_WORD *)(v2818 + 8);
          }
          else {
            __int16 v2819 = 0;
          }
          v3143 = sub_1CD7F3564(v2817, (const char *)0xC9, (uint64_t)v3793, (llvm *)5, 0, (uint64_t)v2816, v2815, v2819);
          uint64_t v3145 = v3144;
          uint64_t v3146 = a3;
          uint64_t v3147 = *(void *)(a3 + 16);
          uint64_t v3148 = v3147;
          uint64_t v3149 = 32;
LABEL_3132:
          v3160 = sub_1CD7EBF14(v3148, v3149, (const llvm::APInt *)v3793, (llvm *)5, 0, 0, 0);
          uint64_t v3162 = v3161;
          __int16 v3163 = 0;
          v3164 = *(llvm::APFloatBase **)(v3146 + 16);
          uint64_t v3165 = *(void *)(v1926 + 32);
          uint64_t v3166 = *(void *)(v3165 + 80);
          v3167 = *(void **)(v3165 + 88);
          uint64_t v3168 = *((void *)v3164 + 104);
          if (v3168) {
            __int16 v3163 = *(_WORD *)(v3168 + 8);
          }
          v3169 = sub_1CD7F3564(v3164, (const char *)0xC9, (uint64_t)v3793, (llvm *)5, 0, v3166, v3167, v3163);
          __int16 v3172 = 0;
          uint64_t v3173 = *(void *)(v3147 + 832);
          if (v3173) {
            __int16 v3172 = *(_WORD *)(v3173 + 8);
          }
          v3174 = sub_1CCFDED5C(v3147, 58, (const llvm::APInt *)v3793, (llvm *)5, 0, (uint64_t)v3160, v3162, v3171, (uint64_t)v3169, v3170, v3172);
          __int16 v3177 = 0;
          uint64_t v3178 = *(void *)(a3 + 16);
          uint64_t v3179 = *(void *)(v3178 + 832);
          if (v3179) {
            __int16 v3177 = *(_WORD *)(v3179 + 8);
          }
          uint64_t v213 = sub_1CCFDED5C(v3178, 56, (const llvm::APInt *)v3793, (llvm *)5, 0, (uint64_t)v3143, v3145, v3176, (uint64_t)v3174, v3175, v3177);
          int v214 = v3180;
          __int16 v216 = 0;
          uint64_t v3181 = *(void *)(v3178 + 832);
          if (v3181) {
            __int16 v216 = *(_WORD *)(v3181 + 8);
          }
          v1173 = (llvm::APFloatBase *)v3178;
          uint64_t v1174 = 199;
          uint64_t v210 = 6;
          uint64_t v211 = 0;
          goto LABEL_1914;
        case 1823:
        case 1824:
        case 1825:
        case 1826:
        case 1828:
        case 1829:
        case 1831:
        case 1832:
        case 1833:
        case 1834:
        case 1835:
        case 1836:
        case 1837:
        case 1838:
        case 1847:
        case 1848:
        case 1849:
        case 1852:
        case 1855:
        case 1858:
        case 1860:
        case 1861:
        case 1862:
        case 1863:
        case 1864:
        case 1865:
        case 1866:
        case 1867:
        case 1868:
        case 1869:
        case 1870:
        case 1871:
        case 1872:
        case 1873:
        case 1874:
        case 1875:
        case 1876:
        case 1877:
        case 1878:
        case 1879:
        case 1880:
        case 1881:
        case 1882:
        case 1883:
        case 1884:
        case 1885:
        case 1960:
        case 1961:
        case 1962:
        case 1963:
        case 1964:
        case 1965:
        case 1966:
        case 1967:
        case 1970:
        case 1971:
        case 1972:
        case 1973:
        case 1974:
        case 1975:
        case 1976:
        case 1977:
        case 1978:
        case 1979:
        case 1980:
        case 1981:
        case 1982:
        case 1983:
        case 1984:
        case 1986:
        case 1988:
        case 1989:
        case 1990:
        case 1991:
        case 1992:
        case 1993:
        case 1994:
        case 1995:
        case 1996:
        case 1997:
        case 1998:
        case 2003:
        case 2004:
        case 2005:
        case 2006:
        case 2007:
        case 2008:
        case 2010:
        case 2011:
        case 2012:
        case 2013:
        case 2014:
          goto LABEL_3081;
        case 1827:
          uint64_t v1633 = *(void *)(a3 + 16);
          v1634 = (double (*)(double))sub_1CB8DA6B4;
          goto LABEL_1826;
        case 1830:
        case 1851:
          v1400 = (uint64_t *)v31[5];
          uint64_t v1401 = v31[6];
          v1402 = (uint64_t *)v1400[5];
          v1403 = (llvm **)&v1402[2 * v1401];
          v1404 = *v1403;
          uint64_t v1405 = (uint64_t)v1403[1];
          unsigned int v1406 = *((unsigned __int16 *)v1400 + 12);
          if (v1406 > 0x18C)
          {
            if (v1406 - 397 > 9 || ((1 << (v1406 + 115)) & 0x3C7) == 0) {
              goto LABEL_1511;
            }
            uint64_t v1408 = v1400[6];
            if (!v1408) {
              goto LABEL_1511;
            }
            int v1409 = 1;
            do
            {
              if (*(_DWORD *)(v1408 + 8) == v1401)
              {
                if (!v1409) {
                  goto LABEL_1511;
                }
                --v1409;
              }
              uint64_t v1408 = *(void *)(v1408 + 32);
            }
            while (v1408);
            if (v1409) {
              goto LABEL_1511;
            }
            v3793[0] = &v3793[2];
            v3793[1] = (void *)0x400000000;
            sub_1CD3DF8C4((uint64_t)v3793, (uint64_t)&v3793[2], (char *)v1400[4], (char *)(v1400[4] + 40 * *((unsigned __int16 *)v1400 + 28)));
            unsigned int v3150 = *((unsigned __int16 *)v1400 + 12) - 397;
            if (v3150 > 9) {
              uint64_t v3151 = 0;
            }
            else {
              uint64_t v3151 = dword_1CD936270[(__int16)v3150];
            }
            v3354 = *(void **)(a3 + 16);
            v3355 = (unsigned __int8 *)v1400[8];
            *(void *)&long long v3815 = v3355;
            if (v3355) {
              llvm::MetadataTracking::track((uint64_t)&v3815, v3355, 2);
            }
            DWORD2(v3815) = *((_DWORD *)v1400 + 15);
            uint64_t v3356 = *(void *)(v8 + 40);
            v1283 = *(llvm **)v3356;
            uint64_t v1284 = *(void *)(v3356 + 8);
            v1285 = (uint64_t *)v3793[0];
            uint64_t v1286 = LODWORD(v3793[1]);
            uint64_t v3357 = v3354[104];
            if (v3357) {
              uint64_t v1288 = *(unsigned __int16 *)(v3357 + 8);
            }
            else {
              uint64_t v1288 = 0;
            }
            v1289 = v3354;
            uint64_t v1290 = v3151;
LABEL_1411:
            *(void *)&long long v3791 = sub_1CD7FF4E8(v1289, (const char *)v1290, (const llvm::APInt *)&v3815, v1283, v1284, v1285, v1286, v1288);
            *((void *)&v3791 + 1) = v1291;
            uint64_t v1292 = v3815;
            if (!(void)v3815) {
              goto LABEL_1415;
            }
            int v1293 = *(unsigned __int8 *)v3815;
            if ((v1293 - 4) <= 0x1E)
            {
              if ((*(unsigned char *)(v3815 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3815 + 12)) {
                goto LABEL_1415;
              }
              uint64_t v3602 = *(void *)(v3815 + 16);
              if ((v3602 & 4) == 0) {
                goto LABEL_1415;
              }
              unint64_t v1625 = v3602 & 0xFFFFFFFFFFFFFFF8;
              if (!v1625) {
                goto LABEL_1415;
              }
              goto LABEL_1803;
            }
            if ((v1293 - 3) >= 0xFFFFFFFE) {
              uint64_t v1624 = v3815;
            }
            else {
              uint64_t v1624 = 0;
            }
            if ((v1293 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v1625 = v1624 + 8;
LABEL_1803:
              *(void *)&long long v3813 = &v3815;
              uint64_t v1626 = v1625 + 16;
              v1627 = &v3813;
LABEL_1804:
              sub_1CC5FA668(v1626, v1627);
LABEL_1415:
              v989 = (void **)v3793[0];
              if (v3793[0] == &v3793[2]) {
                goto LABEL_3082;
              }
              goto LABEL_1061;
            }
LABEL_2401:
            if (v1293 == 3) {
              *(void *)(v1292 + 8) = 0;
            }
            goto LABEL_1415;
          }
          if (v1406 != 12 && v1406 != 36)
          {
            if (v1406 == 46)
            {
              uint64_t v1900 = *(void *)(*(void *)v1400[4] + 80);
              v1901 = (void *)(v1900 + 24);
              if (*(_DWORD *)(v1900 + 32) >= 0x41u) {
                v1901 = (void *)*v1901;
              }
              int v1902 = *(_DWORD *)v1901;
              if (v1902 == 1851 || v1902 == 1830)
              {
                if (v34 != 1851 || v1902 != 1830)
                {
                  *(void *)&long long v3791 = v1400;
                  *((void *)&v3791 + 1) = v1401;
                  goto LABEL_3082;
                }
                uint64_t v3467 = *(void *)(a3 + 16);
                v3469 = sub_1CD7EBF14(v3467, 1851, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                uint64_t v3471 = v1400[4];
                uint64_t v3472 = *(void *)(v3471 + 40);
                uint64_t v3473 = *(void *)(v3471 + 48);
                uint64_t v3474 = *(void *)(v3467 + 832);
                if (v3474) {
                  LOWORD(v3474) = *(_WORD *)(v3474 + 8);
                }
                uint64_t v29 = (uint64_t)sub_1CCFDED5C(v3467, 46, (const llvm::APInt *)&v3789, v1404, v1405, (uint64_t)v3469, v3468, v3470, v3472, v3473, v3474);
                goto LABEL_2210;
              }
            }
LABEL_1511:
            if (v34 == 1830 && *(int *)(a3 + 8) >= 2)
            {
              if (v1406 != 212) {
                goto LABEL_1522;
              }
              uint64_t v1410 = v1400[6];
              if (v1410)
              {
                int v1411 = 1;
                do
                {
                  if (*(_DWORD *)(v1410 + 8) == v1401)
                  {
                    if (!v1411) {
                      goto LABEL_1521;
                    }
                    --v1411;
                  }
                  uint64_t v1410 = *(void *)(v1410 + 32);
                }
                while (v1410);
                if (!v1411)
                {
                  v3422 = (uint64_t *)v1400[4];
                  uint64_t v3423 = *v3422;
                  uint64_t v3424 = v3422[1];
                  v3425 = sub_1CD7EBF14(*(void *)(a3 + 16), 1830, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                  __int16 v3426 = 0;
                  uint64_t v3427 = *(void *)(a3 + 16);
                  uint64_t v3428 = *(void *)(v3423 + 40);
                  uint64_t v3429 = *(unsigned __int16 *)(v3423 + 58);
                  uint64_t v3751 = (uint64_t)v3425;
                  v3793[0] = v3425;
                  uint64_t v3732 = v3430;
                  LODWORD(v3793[1]) = v3430;
                  v3793[2] = (void *)v3423;
                  LODWORD(v3794) = v3424;
                  uint64_t v3431 = *(void *)(v3427 + 832);
                  if (v3431) {
                    __int16 v3426 = *(_WORD *)(v3431 + 8);
                  }
                  if (sub_1CD801794(v3427, 0x2Eu, v3428, v3429, (uint64_t *)v3793, 2, v3426)) {
                    goto LABEL_3563;
                  }
                  uint64_t v3433 = *(void *)(v8 + 48);
                  if (v3433)
                  {
                    while (1)
                    {
                      uint64_t v3434 = *(void *)(v3433 + 16);
                      int v3435 = *(unsigned __int16 *)(v3434 + 24);
                      BOOL v3436 = (v3435 - 96) > 0x2D
                           || ((1 << (v3435 - 96)) & 0x200000000005) == 0;
                      if (v3436 && v3435 != 443)
                      {
                        if (v3435 != 222) {
                          break;
                        }
                        uint64_t v3437 = *(void *)(v3434 + 48);
                        if (!v3437) {
                          break;
                        }
                        if (*(void *)(v3437 + 32)) {
                          break;
                        }
                        uint64_t v3438 = *(void *)(v3437 + 16);
                        if (*(_WORD *)(v3438 + 24) != 96) {
                          break;
                        }
                        uint64_t v3439 = *(void *)(*(void *)(v3438 + 32) + 40);
                        int v3440 = *(unsigned __int16 *)(v3439 + 24);
                        BOOL v3441 = v3440 == 36 || v3440 == 12;
                        if (!v3441 || !sub_1CB8BE1E4(*(void *)(v3439 + 80) + 24, 1.0)) {
                          break;
                        }
                      }
                      uint64_t v3433 = *(void *)(v3433 + 32);
                      if (!v3433) {
                        goto LABEL_1521;
                      }
                    }
                    if (sub_1CB8C57D0(v3423, v3424, 0, 0))
                    {
LABEL_3563:
                      uint64_t v3528 = *(void *)(a3 + 16);
                      uint64_t v3529 = *(void *)(v3528 + 832);
                      if (v3529) {
                        LOWORD(v3529) = *(_WORD *)(v3529 + 8);
                      }
                      uint64_t v503 = sub_1CCFDED5C(v3528, 46, (const llvm::APInt *)&v3789, (llvm *)0xA, 0, v3751, v3732, v3432, v3423, v3424, v3529);
                      uint64_t v518 = v3530;
                      sub_1CCEF0788(*(void *)a3, (uint64_t)v503);
                      uint64_t v3450 = *(void *)(a3 + 16);
LABEL_3453:
                      v3451 = sub_1CD7EBF14(v3450, 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                      uint64_t v3453 = *(void *)(v3450 + 832);
                      if (v3453) {
                        LOWORD(v3453) = *(_WORD *)(v3453 + 8);
                      }
                      uint64_t v3652 = v3452;
                      __int16 v3657 = v3453;
                      uint64_t v3647 = (uint64_t)v3451;
                      uint64_t v522 = v3450;
                      uint64_t v523 = 212;
                      uint64_t v524 = 9;
LABEL_518:
                      uint64_t v525 = 0;
LABEL_519:
                      uint64_t v514 = v503;
                      uint64_t v526 = v518;
LABEL_1675:
                      uint64_t v29 = (uint64_t)sub_1CCFDED5C(v522, v523, (const llvm::APInt *)&v3789, (llvm *)v524, v525, (uint64_t)v514, v526, a8, v3647, v3652, v3657);
                      goto LABEL_2210;
                    }
                  }
                }
              }
            }
LABEL_1521:
            unsigned int v1406 = *((unsigned __int16 *)v1400 + 12);
LABEL_1522:
            if (v1406 != 215) {
              goto LABEL_1530;
            }
            uint64_t v1412 = v1400[6];
            if (!v1412) {
              goto LABEL_3081;
            }
            int v1413 = 1;
            do
            {
              if (*(_DWORD *)(v1412 + 8) == v1401)
              {
                if (!v1413) {
                  goto LABEL_1530;
                }
                --v1413;
              }
              uint64_t v1412 = *(void *)(v1412 + 32);
            }
            while (v1412);
            if (v1413)
            {
LABEL_1530:
              if (v34 == 1830 && *(int *)(a3 + 8) >= 2 && v1406 == 192)
              {
                uint64_t v1414 = v1400[6];
                if (!v1414) {
                  goto LABEL_3081;
                }
                int v1415 = 1;
                do
                {
                  if (*(_DWORD *)(v1414 + 8) == v1401)
                  {
                    if (!v1415) {
                      goto LABEL_1542;
                    }
                    --v1415;
                  }
                  uint64_t v1414 = *(void *)(v1414 + 32);
                }
                while (v1414);
                if (!v1415)
                {
                  v1416 = (void *)v1400[4];
                  uint64_t v1418 = v1416[10];
                  uint64_t v1417 = v1416[11];
                  uint64_t v1419 = v1416[16];
                  if (sub_1CB8C57D0(v1418, v1417, 0, 0))
                  {
                    uint64_t v1420 = v1416[15];
                    if (sub_1CB8C57D0(v1420, v1419, 0, 0))
                    {
                      uint64_t v3533 = *(void *)(a3 + 16);
                      v3535 = sub_1CD7EBF14(v3533, 1830, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                      __int16 v3537 = 0;
                      uint64_t v3538 = *(void *)(v3533 + 832);
                      if (v3538) {
                        __int16 v3537 = *(_WORD *)(v3538 + 8);
                      }
                      v3539 = sub_1CCFDED5C(v3533, 46, (const llvm::APInt *)&v3789, v1404, v1405, (uint64_t)v3535, v3534, v3536, v1418, v1417, v3537);
                      int v3541 = v3540;
                      uint64_t v3542 = *(void *)(a3 + 16);
                      v3544 = sub_1CD7EBF14(v3542, 1830, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                      __int16 v3546 = 0;
                      uint64_t v3547 = *(void *)(v3542 + 832);
                      if (v3547) {
                        __int16 v3546 = *(_WORD *)(v3547 + 8);
                      }
                      v3548 = sub_1CCFDED5C(v3542, 46, (const llvm::APInt *)&v3789, v1404, v1405, (uint64_t)v3544, v3543, v3545, v1420, v1419, v3546);
                      int v3550 = v3549;
                      sub_1CCEF0788(*(void *)a3, (uint64_t)v3539);
                      sub_1CCEF0788(*(void *)a3, (uint64_t)v3548);
                      v3551 = (uint64_t *)v1400[4];
                      uint64_t v29 = (uint64_t)sub_1CD7F6564(*(void **)(a3 + 16), (const char *)0xC0, (const llvm::APInt *)&v3789, v1404, v1405, *v3551, v3551[1], v3552, v3551[5], v3551[6], (uint64_t)v3539, v3541, (uint64_t)v3548, v3550, v3551[20], v3551[21]);
                      goto LABEL_2210;
                    }
                  }
                }
              }
LABEL_1542:
              v1421 = v1400;
              if (v1406 == 212)
              {
                v1421 = *(uint64_t **)v1400[4];
                unsigned int v1406 = *((unsigned __int16 *)v1421 + 12);
              }
              if (v1406 == 46)
              {
                uint64_t v1422 = *(void *)(*(void *)v1421[4] + 80);
                v1423 = (void *)(v1422 + 24);
                if (*(_DWORD *)(v1422 + 32) >= 0x41u) {
                  v1423 = (void *)*v1423;
                }
                if ((unint64_t)(*v1423 - 2095) <= 1)
                {
                  *(void *)&long long v3791 = v1400;
                  *((void *)&v3791 + 1) = v1401;
                  goto LABEL_3082;
                }
              }
              goto LABEL_3081;
            }
            v3292 = (uint64_t *)v1400[4];
            uint64_t v3293 = *v3292;
            uint64_t v3294 = v3292[1];
            uint64_t v3295 = *(void *)(a3 + 16);
            v3297 = sub_1CD7EBF14(v3295, v34, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            __int16 v3299 = 0;
            uint64_t v3300 = *(void *)(v3295 + 832);
            if (v3300) {
              __int16 v3299 = *(_WORD *)(v3300 + 8);
            }
            v3301 = sub_1CCFDED5C(v3295, 46, (const llvm::APInt *)&v3789, (llvm *)9, 0, (uint64_t)v3297, v3296, v3298, v3293, v3294, v3299);
            v3303 = v3302;
            sub_1CCEF0788(*(void *)a3, (uint64_t)v3301);
            __int16 v39 = 0;
            int v41 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v3304 = *((void *)v41 + 104);
            if (v3304) {
              __int16 v39 = *(_WORD *)(v3304 + 8);
            }
            uint64_t v42 = 215;
            uint64_t v43 = 10;
            v1311 = 0;
            uint64_t v36 = v3301;
            uint64_t v38 = v3303;
            goto LABEL_2209;
          }
          uint64_t v2119 = *(void *)(a3 + 16);
          uint64_t v2121 = *v1402;
          uint64_t v2120 = v1402[1];
          v2122 = (unsigned __int8 *)v1400[8];
          *(void *)&long long v3821 = v2122;
          if (v2122) {
            llvm::MetadataTracking::track((uint64_t)&v3821, v2122, 2);
          }
          DWORD2(v3821) = *((_DWORD *)v1400 + 15);
          uint64_t v2123 = v1400[10];
          v2124 = (llvm::detail::DoubleAPFloat *)(v2123 + 32);
          if (*(_UNKNOWN **)(v2123 + 32) == &unk_1CFB2E344) {
            char v2125 = *(unsigned char *)(*(void *)(v2123 + 40) + 28);
          }
          else {
            char v2125 = *(unsigned char *)(v2123 + 52);
          }
          if ((v2125 & 7) == 1 || (v2125 & 8) != 0)
          {
            double v3033 = 0.0;
          }
          else
          {
            if ((v2125 & 7) != 0)
            {
              DWORD2(v3813) = 32;
              *(void *)&long long v3813 = 1065353216;
              llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v3815, (const llvm::APInt **)&v3813);
              *(_OWORD *)&v3793[1] = v3815;
              LODWORD(v3794) = v3816;
              BYTE4(v3794) = BYTE4(v3794) & 0xF0 | BYTE4(v3816) & 0xF;
              if (v2121 == 9) {
                llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E2E0, 1, &v3815);
              }
              if (*(_UNKNOWN **)v2124 == &unk_1CFB2E344) {
                int v2631 = llvm::detail::DoubleAPFloat::compare(v2124, (const llvm::detail::DoubleAPFloat *)&v3793[1]);
              }
              else {
                int v2631 = llvm::detail::IEEEFloat::compare(v2124, (const llvm::detail::IEEEFloat *)&v3793[1]);
              }
              if (v2631 == 2)
              {
                v1400 = sub_1CD7ECDC4(v2119, (uint64_t)&v3821, v2121, v2120, 0, 1.0);
                unsigned int v2632 = v3305;
                unint64_t v2633 = v3305 & 0xFFFFFFFF00000000;
              }
              else
              {
                unsigned int v2632 = 0;
                unint64_t v2633 = 0;
              }
              if (v3793[1] == &unk_1CFB2E344)
              {
                sub_1CB845718((uint64_t *)&v3793[2]);
              }
              else if ((*((_DWORD *)v3793[1] + 2) - 64) <= 0xFFFFFF7F && v3793[2])
              {
                MEMORY[0x1D25D9CB0](v3793[2], 0x1000C8000313F17);
              }
LABEL_2672:
              if ((void)v3821)
              {
                int v2634 = *(unsigned __int8 *)v3821;
                if ((v2634 - 4) > 0x1E)
                {
                  if ((v2634 - 3) >= 0xFFFFFFFE) {
                    uint64_t v2787 = v3821;
                  }
                  else {
                    uint64_t v2787 = 0;
                  }
                  if ((v2634 - 3) < 0xFFFFFFFE)
                  {
                    if (v2634 == 3) {
                      *(void *)(v3821 + 8) = 0;
                    }
                    goto LABEL_2676;
                  }
                  unint64_t v2788 = v2787 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v3821 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3821 + 12)) {
                    goto LABEL_2676;
                  }
                  uint64_t v3633 = *(void *)(v3821 + 16);
                  if ((v3633 & 4) == 0) {
                    goto LABEL_2676;
                  }
                  unint64_t v2788 = v3633 & 0xFFFFFFFFFFFFFFF8;
                  if (!v2788) {
                    goto LABEL_2676;
                  }
                }
                v3793[0] = &v3821;
                sub_1CC5FA668(v2788 + 16, v3793);
              }
LABEL_2676:
              *(void *)&long long v3791 = v1400;
              *((void *)&v3791 + 1) = v2633 | v2632;
              goto LABEL_3082;
            }
            double v3033 = 1.0;
          }
          v1400 = sub_1CD7ECDC4(v2119, (uint64_t)&v3821, v2121, v2120, 0, v3033);
          unsigned int v2632 = v3280;
          unint64_t v2633 = v3280 & 0xFFFFFFFF00000000;
          goto LABEL_2672;
        case 1839:
        case 1840:
        case 1841:
        case 1842:
        case 1843:
        case 1844:
        case 1845:
        case 1846:
          uint64_t v1933 = *(void *)(v31[5] + 80);
          v1934 = (unsigned int *)(v1933 + 24);
          if (*(_DWORD *)(v1933 + 32) >= 0x41u) {
            v1934 = *(unsigned int **)v1934;
          }
          v1935 = sub_1CD7EBF14(*(void *)(a3 + 16), *v1934, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          uint64_t v1937 = v1936;
          uint64_t v1938 = *(void *)(v8 + 32);
          uint64_t v1939 = *(void *)(v1938 + 80);
          LODWORD(v3787) = 0;
          HIDWORD(v3758) = 0;
          sub_1CB8DA7DC(v34, (int *)&v3787, (int *)&v3792, (int *)&v3758 + 1, (int *)&v3758);
          unsigned int v1940 = *(unsigned __int16 *)(v1939 + 24);
          BOOL v273 = v1940 > 0x26;
          uint64_t v1941 = (1 << v1940) & 0x6000006000;
          if (v273 || v1941 == 0) {
            goto LABEL_3081;
          }
          int v1943 = HIDWORD(v3758);
          if (HIDWORD(v3758))
          {
            uint64_t v1944 = *(void *)(v1938 + 120);
            unsigned int v1945 = *(unsigned __int16 *)(v1944 + 24);
            if (v1945 > 0x26 || ((1 << v1945) & 0x6000006000) == 0) {
              goto LABEL_3081;
            }
          }
          else
          {
            uint64_t v1944 = 0;
          }
          uint64_t v3200 = *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344);
          uint64_t v3201 = (*(uint64_t (**)(uint64_t))(*(void *)v3200 + 336))(v3200);
          unsigned int v3202 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3201 + 24))(v3201, 16);
          uint64_t v3203 = sub_1CB8C4588(v1939, *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344))
                / v3202;
          v3204 = sub_1CD7EBF14(*(void *)(a3 + 16), v3203, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          *(void *)&long long v3815 = &v3816;
          v3816 = v1935;
          uint64_t v3817 = v1937;
          uint64_t v3818 = (uint64_t)v3204;
          uint64_t v3819 = v3205;
          *((void *)&v3815 + 1) = 0x300000002;
          if (v1943)
          {
            unsigned int v3477 = sub_1CB8C4588(v1944, *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344));
            v3479 = sub_1CD7EBF14(*(void *)(a3 + 16), v3477 / v3202, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            if (DWORD2(v3815) >= HIDWORD(v3815)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v3480 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
            *v3480 = v3479;
            v3480[1] = v3478;
            ++DWORD2(v3815);
            uint64_t v3206 = 398;
          }
          else
          {
            uint64_t v3206 = 397;
          }
          v3793[0] = &v3793[2];
          v3793[1] = (void *)0x400000000;
          int v3207 = (int)v3787;
          if (!v3787) {
            goto LABEL_3405;
          }
          int v3208 = (int)v3787;
          do
          {
            v3209 = sub_1CD7EBF14(*(void *)(a3 + 16), v3203, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            uint64_t v3210 = v3815;
            *(void *)(v3815 + 16) = v3209;
            *(_DWORD *)(v3210 + 24) = v3211;
            v3212 = *(void **)(a3 + 16);
            v3213 = *(unsigned __int8 **)(v8 + 64);
            *(void *)&long long v3813 = v3213;
            if (v3213)
            {
              llvm::MetadataTracking::track((uint64_t)&v3813, v3213, 2);
              uint64_t v3210 = v3815;
            }
            DWORD2(v3813) = *(_DWORD *)(v8 + 60);
            uint64_t v3214 = v3212[104];
            if (v3214) {
              uint64_t v3215 = *(unsigned __int16 *)(v3214 + 8);
            }
            else {
              uint64_t v3215 = 0;
            }
            v3216 = sub_1CD7FF4E8(v3212, (const char *)v3206, (const llvm::APInt *)&v3813, (llvm *)0xA, 0, (uint64_t *)v3210, DWORD2(v3815), v3215);
            v3218 = v3217;
            if ((void)v3813)
            {
              int v3219 = *(unsigned __int8 *)v3813;
              if ((v3219 - 4) > 0x1E)
              {
                if ((v3219 - 3) >= 0xFFFFFFFE) {
                  uint64_t v3221 = v3813;
                }
                else {
                  uint64_t v3221 = 0;
                }
                if ((v3219 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v3222 = v3221 + 8;
LABEL_3182:
                  *(void *)&long long v3821 = &v3813;
                  sub_1CC5FA668(v3222 + 16, &v3821);
                  goto LABEL_3174;
                }
                if (v3219 == 3) {
                  *(void *)(v3813 + 8) = 0;
                }
              }
              else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
              {
                uint64_t v3223 = *(void *)(v3813 + 16);
                if ((v3223 & 4) != 0)
                {
                  unint64_t v3222 = v3223 & 0xFFFFFFFFFFFFFFF8;
                  if (v3222) {
                    goto LABEL_3182;
                  }
                }
              }
            }
LABEL_3174:
            if (LODWORD(v3793[1]) >= (unint64_t)HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v3220 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v3220 = v3216;
            v3220[1] = v3218;
            ++LODWORD(v3793[1]);
            LODWORD(v3203) = v3203 + 4;
            --v3208;
          }
          while (v3208);
          if (v3207 == 1)
          {
            v3224 = (void **)v3793[0];
            long long v3791 = *(_OWORD *)v3793[0];
            goto LABEL_3191;
          }
          if (v3207 == 3)
          {
            uint64_t v3405 = *(void *)(a3 + 16);
            v3406 = *(unsigned __int8 **)(v8 + 64);
            *(void *)&long long v3813 = v3406;
            if (v3406) {
              llvm::MetadataTracking::track((uint64_t)&v3813, v3406, 2);
            }
            DWORD2(v3813) = *(_DWORD *)(v8 + 60);
            v3408 = sub_1CD7F330C(v3405, 51, (uint64_t)&v3813, (llvm *)0xA, 0);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v3409 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v3409 = v3408;
            v3409[1] = v3407;
            ++LODWORD(v3793[1]);
            if ((void)v3813)
            {
              int v3410 = *(unsigned __int8 *)v3813;
              if ((v3410 - 4) > 0x1E)
              {
                if ((v3410 - 3) >= 0xFFFFFFFE) {
                  uint64_t v3586 = v3813;
                }
                else {
                  uint64_t v3586 = 0;
                }
                if ((v3410 - 3) >= 0xFFFFFFFE)
                {
                  unint64_t v3587 = v3586 + 8;
                  goto LABEL_3672;
                }
                if (v3410 == 3) {
                  *(void *)(v3813 + 8) = 0;
                }
              }
              else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
              {
                uint64_t v3646 = *(void *)(v3813 + 16);
                if ((v3646 & 4) != 0)
                {
                  unint64_t v3587 = v3646 & 0xFFFFFFFFFFFFFFF8;
                  if (v3587)
                  {
LABEL_3672:
                    *(void *)&long long v3821 = &v3813;
                    sub_1CC5FA668(v3587 + 16, &v3821);
                  }
                }
              }
            }
          }
LABEL_3405:
          v3411 = *(void **)(a3 + 16);
          v3412 = *(unsigned __int8 **)(v8 + 64);
          *(void *)&long long v3813 = v3412;
          if (v3412) {
            llvm::MetadataTracking::track((uint64_t)&v3813, v3412, 2);
          }
          DWORD2(v3813) = *(_DWORD *)(v8 + 60);
          uint64_t v3413 = *(void *)(v8 + 40);
          v3414 = *(llvm **)v3413;
          uint64_t v3415 = *(void *)(v3413 + 8);
          uint64_t v3416 = v3411[104];
          if (v3416) {
            uint64_t v3417 = *(unsigned __int16 *)(v3416 + 8);
          }
          else {
            uint64_t v3417 = 0;
          }
          *(void *)&long long v3791 = sub_1CD7FF4E8(v3411, (const char *)0x92, (const llvm::APInt *)&v3813, v3414, v3415, (uint64_t *)v3793[0], LODWORD(v3793[1]), v3417);
          *((void *)&v3791 + 1) = v3461;
          if ((void)v3813)
          {
            int v3462 = *(unsigned __int8 *)v3813;
            if ((v3462 - 4) > 0x1E)
            {
              if ((v3462 - 3) >= 0xFFFFFFFE) {
                uint64_t v3531 = v3813;
              }
              else {
                uint64_t v3531 = 0;
              }
              if ((v3462 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v3532 = v3531 + 8;
                goto LABEL_3571;
              }
              if (v3462 == 3) {
                *(void *)(v3813 + 8) = 0;
              }
            }
            else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
            {
              uint64_t v3643 = *(void *)(v3813 + 16);
              if ((v3643 & 4) != 0)
              {
                unint64_t v3532 = v3643 & 0xFFFFFFFFFFFFFFF8;
                if (v3532)
                {
LABEL_3571:
                  *(void *)&long long v3821 = &v3813;
                  sub_1CC5FA668(v3532 + 16, &v3821);
                }
              }
            }
          }
          v3224 = (void **)v3793[0];
LABEL_3191:
          if (v3224 != &v3793[2]) {
            free(v3224);
          }
          v989 = (void **)v3815;
          if ((uint64_t **)v3815 != &v3816) {
            goto LABEL_1061;
          }
LABEL_3082:
          if (v3789)
          {
            int v3110 = *v3789;
            if ((v3110 - 4) > 0x1E)
            {
              if ((v3110 - 3) >= 0xFFFFFFFE) {
                v3112 = v3789;
              }
              else {
                v3112 = 0;
              }
              if ((v3110 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v3113 = (unint64_t)(v3112 + 8);
                goto LABEL_3092;
              }
              if (v3110 == 3) {
                *((void *)v3789 + 1) = 0;
              }
            }
            else if ((v3789[1] & 0x7F) == 2 || *((_DWORD *)v3789 + 3))
            {
              uint64_t v3114 = *((void *)v3789 + 2);
              if ((v3114 & 4) != 0)
              {
                unint64_t v3113 = v3114 & 0xFFFFFFFFFFFFFFF8;
                if (v3113)
                {
LABEL_3092:
                  v3793[0] = &v3789;
                  sub_1CC5FA668(v3113 + 16, v3793);
                }
              }
            }
          }
          return v3791;
        case 1850:
          uint64_t v1646 = v31[5];
          int v1647 = *(unsigned __int16 *)(v1646 + 24);
          if (v1647 != 35 && v1647 != 11) {
            goto LABEL_3081;
          }
          uint64_t v1649 = *(void *)(v1646 + 80);
          v1650 = (unsigned int *)(v1649 + 24);
          if (*(_DWORD *)(v1649 + 32) >= 0x41u) {
            v1650 = *(unsigned int **)v1650;
          }
          uint64_t v476 = *(void *)(a3 + 16);
          uint64_t v478 = 31 - __clz(*v1650);
          v1651 = *(uint64_t **)(v8 + 40);
          uint64_t v884 = *v1651;
          uint64_t v885 = v1651[1];
          goto LABEL_1311;
        case 1853:
          uint64_t v2806 = *(void *)(a3 + 16);
          uint64_t v2820 = *(void *)(v8 + 40);
          v1088 = *(llvm **)v2820;
          uint64_t v1089 = *(void *)(v2820 + 8);
          v1294 = (uint64_t *)v31[5];
          uint64_t v1296 = v31[6];
          uint64_t v2808 = v2806;
          uint64_t v2809 = 0;
          goto LABEL_2842;
        case 1854:
          uint64_t v2806 = *(void *)(a3 + 16);
          uint64_t v2807 = *(void *)(v8 + 40);
          v1088 = *(llvm **)v2807;
          uint64_t v1089 = *(void *)(v2807 + 8);
          v1294 = (uint64_t *)v31[5];
          uint64_t v1296 = v31[6];
          uint64_t v2808 = v2806;
          uint64_t v2809 = 1;
LABEL_2842:
          v2821 = sub_1CD7EBF14(v2808, v2809, (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
          uint64_t v2823 = *(void *)(v2806 + 832);
          if (v2823) {
            LOWORD(v2823) = *(_WORD *)(v2823 + 8);
          }
          uint64_t v3652 = v2822;
          __int16 v3657 = v2823;
          uint64_t v3647 = (uint64_t)v2821;
          uint64_t v522 = v2806;
          uint64_t v523 = 430;
          goto LABEL_1424;
        case 1856:
          uint64_t v2802 = *(void *)(a3 + 16);
          uint64_t v2810 = *(void *)(v8 + 40);
          v1088 = *(llvm **)v2810;
          uint64_t v1089 = *(void *)(v2810 + 8);
          v1294 = (uint64_t *)v31[5];
          uint64_t v1296 = v31[6];
          uint64_t v2804 = v2802;
          uint64_t v2805 = 0;
          goto LABEL_2834;
        case 1857:
          uint64_t v2802 = *(void *)(a3 + 16);
          uint64_t v2803 = *(void *)(v8 + 40);
          v1088 = *(llvm **)v2803;
          uint64_t v1089 = *(void *)(v2803 + 8);
          v1294 = (uint64_t *)v31[5];
          uint64_t v1296 = v31[6];
          uint64_t v2804 = v2802;
          uint64_t v2805 = 1;
LABEL_2834:
          v2811 = sub_1CD7EBF14(v2804, v2805, (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
          uint64_t v2813 = *(void *)(v2802 + 832);
          if (v2813) {
            LOWORD(v2813) = *(_WORD *)(v2813 + 8);
          }
          uint64_t v3652 = v2812;
          __int16 v3657 = v2813;
          uint64_t v3647 = (uint64_t)v2811;
          uint64_t v522 = v2802;
          uint64_t v523 = 431;
          goto LABEL_1424;
        case 1859:
          uint64_t v29 = (uint64_t)sub_1CD7FF26C(*(llvm::APFloatBase **)(a3 + 16), (const char *)0x1B0, (const llvm::APInt *)&v3789, (llvm *)4, 0, v31 + 5, *(unsigned __int16 *)(v8 + 56) - 1, a8);
          goto LABEL_2210;
        case 1886:
        case 1887:
        case 1888:
        case 1889:
        case 1890:
        case 1891:
        case 1892:
        case 1893:
        case 1894:
        case 1895:
        case 1896:
        case 1897:
        case 1898:
        case 1899:
        case 1900:
        case 1901:
        case 1902:
        case 1903:
        case 1904:
        case 1905:
        case 1906:
        case 1907:
        case 1908:
        case 1909:
        case 1927:
        case 1928:
        case 1929:
        case 1930:
        case 1931:
        case 1932:
        case 1933:
        case 1934:
        case 1935:
        case 1936:
        case 1937:
        case 1938:
        case 1939:
        case 1940:
        case 1941:
        case 1942:
        case 1943:
        case 1944:
        case 1945:
        case 1946:
        case 1947:
        case 1948:
        case 1949:
        case 1950:
          uint64_t v742 = v31[5];
          uint64_t v743 = v31[6];
          LODWORD(v3787) = 0;
          LODWORD(v3792) = 0;
          uint64_t v3758 = 0;
          sub_1CB8DA7DC(v34, (int *)&v3787, (int *)&v3792, (int *)&v3758 + 1, (int *)&v3758);
          v744 = sub_1CD7EBF14(*(void *)(a3 + 16), (int)v3792, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          uint64_t v746 = v745;
          uint64_t v747 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a3 + 16) + 40) + 344) + 336))();
          unsigned int v748 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v747 + 24))(v747, 16);
          unsigned int v749 = *(unsigned __int16 *)(v742 + 24);
          if (v749 <= 0x26 && ((1 << v749) & 0x6000006000) != 0)
          {
            uint64_t v752 = sub_1CB8C4588(v742, *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344))
                 / v748;
            v758 = sub_1CD7EBF14(*(void *)(a3 + 16), v752, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          }
          else
          {
            if (*(unsigned char *)(*(void *)(a1 + 184296) + 280)) {
              goto LABEL_3081;
            }
            uint64_t v750 = sub_1CD7EB67C(*(void *)(a3 + 16), v742, v743, (uint64_t)&v3789, 4, 0);
            uint64_t v752 = v751;
            uint64_t v753 = *(void *)(a3 + 16);
            v754 = sub_1CD7EBF14(v753, 31 - __clz(v748), (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
            uint64_t v757 = *(void *)(v753 + 832);
            if (v757) {
              LOWORD(v757) = *(_WORD *)(v757 + 8);
            }
            v758 = sub_1CCFDED5C(v753, 177, (const llvm::APInt *)&v3789, (llvm *)4, 0, v750, v752, v756, (uint64_t)v754, v755, v757);
            LODWORD(v752) = 0;
          }
          if (HIDWORD(v3758) == 1)
          {
            uint64_t v1910 = *(void *)(*(void *)(v8 + 32) + 80);
            unsigned int v1911 = *(unsigned __int16 *)(v1910 + 24);
            if (v1911 > 0x26 || ((1 << v1911) & 0x6000006000) == 0) {
              goto LABEL_3081;
            }
            uint64_t v1912 = v8;
          }
          else
          {
            uint64_t v1912 = v8;
            uint64_t v1910 = 0;
          }
          *(void *)&long long v3815 = &v3816;
          v3816 = v744;
          uint64_t v3817 = v746;
          uint64_t v3818 = (uint64_t)v758;
          uint64_t v3819 = v759;
          *((void *)&v3815 + 1) = 0x300000002;
          if (HIDWORD(v3758) == 1)
          {
            unsigned int v2986 = sub_1CB8C4588(v1910, *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344));
            v2988 = sub_1CD7EBF14(*(void *)(a3 + 16), v2986 / v748, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            if (DWORD2(v3815) >= HIDWORD(v3815)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2989 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
            *v2989 = v2988;
            v2989[1] = v2987;
            unsigned int v2990 = ++DWORD2(v3815);
          }
          else
          {
            unsigned int v2990 = 2;
          }
          unsigned int v2991 = **(unsigned __int8 **)(v1912 + 40);
          int v2992 = 1;
          uint64_t v2993 = 9;
          if (v2991 > 0x4D)
          {
            if (v2991 == 78)
            {
LABEL_2925:
              int v2994 = (int)v3787;
              if (v3787 == 1)
              {
                v2995 = *(void **)(a3 + 16);
                v2996 = (const char *)v3758;
                v2997 = *(void **)(v1912 + 64);
                v3793[0] = v2997;
                if (v2997)
                {
                  llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v2997, 2);
                  unsigned int v2990 = DWORD2(v3815);
                }
                LODWORD(v3793[1]) = *(_DWORD *)(v1912 + 60);
                uint64_t v2998 = v2990;
                uint64_t v2999 = v2995[104];
                if (v2999) {
                  uint64_t v3000 = *(unsigned __int16 *)(v2999 + 8);
                }
                else {
                  uint64_t v3000 = 0;
                }
                *(void *)&long long v3791 = sub_1CD7FF4E8(v2995, v2996, (const llvm::APInt *)v3793, (llvm *)v2993, 0, (uint64_t *)v3815, v2998, v3000);
                *((void *)&v3791 + 1) = v3009;
                if (!v3793[0]) {
                  goto LABEL_3269;
                }
                int v3010 = *(unsigned __int8 *)v3793[0];
                if ((v3010 - 4) > 0x1E)
                {
                  if ((v3010 - 3) >= 0xFFFFFFFE) {
                    v3353 = v3793[0];
                  }
                  else {
                    v3353 = 0;
                  }
                  if ((v3010 - 3) < 0xFFFFFFFE)
                  {
                    if (v3010 == 3) {
                      *((void *)v3793[0] + 1) = 0;
                    }
                    goto LABEL_3269;
                  }
                  unint64_t v3012 = (unint64_t)v3353 + 8;
                }
                else
                {
                  if ((*((unsigned char *)v3793[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3793[0] + 3)) {
                    goto LABEL_3269;
                  }
                  uint64_t v3011 = *((void *)v3793[0] + 2);
                  if ((v3011 & 4) == 0) {
                    goto LABEL_3269;
                  }
                  unint64_t v3012 = v3011 & 0xFFFFFFFFFFFFFFF8;
                  if (!v3012) {
                    goto LABEL_3269;
                  }
                }
                *(void *)&long long v3813 = v3793;
                sub_1CC5FA668(v3012 + 16, &v3813);
LABEL_3269:
                v989 = (void **)v3815;
                goto LABEL_1889;
              }
              if (!*(unsigned char *)(*(void *)(a1 + 184296) + 280))
              {
                v3001 = (unsigned int *)&unk_1CD936054;
                if (v2992) {
                  v3001 = (unsigned int *)&unk_1CD936048;
                }
                v3002 = (unsigned int *)&unk_1CD93603C;
                if (v2992) {
                  v3002 = (unsigned int *)&unk_1CD936030;
                }
                if (v3758 == 397) {
                  v3001 = v3002;
                }
                v3003 = (const char *)v3001[v3787 - 2];
                v3004 = *(void **)(a3 + 16);
                v3005 = *(void **)(v1912 + 64);
                v3793[0] = v3005;
                if (v3005)
                {
                  llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v3005, 2);
                  unsigned int v2990 = DWORD2(v3815);
                }
                LODWORD(v3793[1]) = *(_DWORD *)(v1912 + 60);
                uint64_t v3006 = v2990;
                uint64_t v3007 = v3004[104];
                if (v3007) {
                  uint64_t v3008 = *(unsigned __int16 *)(v3007 + 8);
                }
                else {
                  uint64_t v3008 = 0;
                }
                v3242 = sub_1CD7FF4E8(v3004, v3003, (const llvm::APInt *)v3793, (llvm *)0xAE, 0, (uint64_t *)v3815, v3006, v3008);
                int v3244 = v3243;
                if (v3793[0])
                {
                  int v3245 = *(unsigned __int8 *)v3793[0];
                  if ((v3245 - 4) <= 0x1E)
                  {
                    if ((*((unsigned char *)v3793[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3793[0] + 3)) {
                      goto LABEL_3221;
                    }
                    uint64_t v3639 = *((void *)v3793[0] + 2);
                    if ((v3639 & 4) == 0) {
                      goto LABEL_3221;
                    }
                    unint64_t v3476 = v3639 & 0xFFFFFFFFFFFFFFF8;
                    if (!v3476) {
                      goto LABEL_3221;
                    }
                    goto LABEL_3496;
                  }
                  if ((v3245 - 3) >= 0xFFFFFFFE) {
                    v3475 = v3793[0];
                  }
                  else {
                    v3475 = 0;
                  }
                  if ((v3245 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v3476 = (unint64_t)v3475 + 8;
LABEL_3496:
                    *(void *)&long long v3813 = v3793;
                    sub_1CC5FA668(v3476 + 16, &v3813);
                    goto LABEL_3221;
                  }
                  if (v3245 == 3) {
                    *((void *)v3793[0] + 1) = 0;
                  }
                }
LABEL_3221:
                v3793[0] = &v3793[2];
                v3793[1] = (void *)0x400000000;
                if (v2992) {
                  int v3246 = 1;
                }
                else {
                  int v3246 = 33;
                }
                if (v2994)
                {
                  for (int k = 0; k != v2994; ++k)
                  {
                    v3249 = sub_1CD8015C0(*(void *)(a3 + 16), v3246 + k, (const llvm::APInt *)&v3789, (llvm *)v2993, 0, (uint64_t)v3242, v3244);
                    if (LODWORD(v3793[1]) >= (unint64_t)HIDWORD(v3793[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v3250 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
                    *v3250 = v3249;
                    v3250[1] = v3248;
                    ++LODWORD(v3793[1]);
                  }
                  if (v2994 == 3)
                  {
                    uint64_t v3262 = *(void *)(a3 + 16);
                    v3263 = *(unsigned __int8 **)(v1912 + 64);
                    *(void *)&long long v3813 = v3263;
                    if (v3263) {
                      llvm::MetadataTracking::track((uint64_t)&v3813, v3263, 2);
                    }
                    DWORD2(v3813) = *(_DWORD *)(v1912 + 60);
                    v3265 = sub_1CD7F330C(v3262, 51, (uint64_t)&v3813, (llvm *)v2993, 0);
                    if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v3266 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
                    *v3266 = v3265;
                    v3266[1] = v3264;
                    ++LODWORD(v3793[1]);
                    if ((void)v3813)
                    {
                      int v3267 = *(unsigned __int8 *)v3813;
                      if ((v3267 - 4) > 0x1E)
                      {
                        if ((v3267 - 3) >= 0xFFFFFFFE) {
                          uint64_t v3584 = v3813;
                        }
                        else {
                          uint64_t v3584 = 0;
                        }
                        if ((v3267 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v3585 = v3584 + 8;
LABEL_3658:
                          *(void *)&long long v3821 = &v3813;
                          sub_1CC5FA668(v3585 + 16, &v3821);
                          goto LABEL_3251;
                        }
                        if (v3267 == 3) {
                          *(void *)(v3813 + 8) = 0;
                        }
                      }
                      else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
                      {
                        uint64_t v3645 = *(void *)(v3813 + 16);
                        if ((v3645 & 4) != 0)
                        {
                          unint64_t v3585 = v3645 & 0xFFFFFFFFFFFFFFF8;
                          if (v3585) {
                            goto LABEL_3658;
                          }
                        }
                      }
                    }
                  }
                }
LABEL_3251:
                v3268 = *(void **)(a3 + 16);
                v3269 = *(unsigned __int8 **)(v1912 + 64);
                *(void *)&long long v3813 = v3269;
                if (v3269) {
                  llvm::MetadataTracking::track((uint64_t)&v3813, v3269, 2);
                }
                DWORD2(v3813) = *(_DWORD *)(v1912 + 60);
                uint64_t v3270 = *(void *)(v1912 + 40);
                v3271 = *(llvm **)v3270;
                uint64_t v3272 = *(void *)(v3270 + 8);
                uint64_t v3273 = v3268[104];
                if (v3273) {
                  uint64_t v3274 = *(unsigned __int16 *)(v3273 + 8);
                }
                else {
                  uint64_t v3274 = 0;
                }
                *(void *)&long long v3791 = sub_1CD7FF4E8(v3268, (const char *)0x92, (const llvm::APInt *)&v3813, v3271, v3272, (uint64_t *)v3793[0], LODWORD(v3793[1]), v3274);
                *((void *)&v3791 + 1) = v3278;
                if ((void)v3813)
                {
                  int v3279 = *(unsigned __int8 *)v3813;
                  if ((v3279 - 4) > 0x1E)
                  {
                    if ((v3279 - 3) >= 0xFFFFFFFE) {
                      uint64_t v3465 = v3813;
                    }
                    else {
                      uint64_t v3465 = 0;
                    }
                    if ((v3279 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v3466 = v3465 + 8;
LABEL_3485:
                      *(void *)&long long v3821 = &v3813;
                      sub_1CC5FA668(v3466 + 16, &v3821);
                      goto LABEL_3267;
                    }
                    if (v3279 == 3) {
                      *(void *)(v3813 + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
                  {
                    uint64_t v3638 = *(void *)(v3813 + 16);
                    if ((v3638 & 4) != 0)
                    {
                      unint64_t v3466 = v3638 & 0xFFFFFFFFFFFFFFF8;
                      if (v3466) {
                        goto LABEL_3485;
                      }
                    }
                  }
                }
LABEL_3267:
                v3277 = v3793[0];
                if (v3793[0] == &v3793[2]) {
                  goto LABEL_3269;
                }
                goto LABEL_3268;
              }
              v3793[0] = &v3793[2];
              v3793[1] = (void *)0x400000000;
              if ((int)v3787 < 1) {
                goto LABEL_3238;
              }
              int v3013 = 0;
              v3014 = (const char *)v3758;
              while (1)
              {
                v3015 = *(void **)(a3 + 16);
                if (v3013)
                {
                  v3016 = sub_1CD7EBF14(*(void *)(a3 + 16), v752, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
                  uint64_t v3017 = v3815;
                  *(void *)(v3815 + 16) = v3016;
                  *(_DWORD *)(v3017 + 24) = v3018;
                  v3015 = *(void **)(a3 + 16);
                }
                v3019 = *(unsigned __int8 **)(v1912 + 64);
                *(void *)&long long v3813 = v3019;
                if (v3019) {
                  llvm::MetadataTracking::track((uint64_t)&v3813, v3019, 2);
                }
                DWORD2(v3813) = *(_DWORD *)(v1912 + 60);
                uint64_t v3020 = v3015[104];
                if (v3020) {
                  uint64_t v3021 = *(unsigned __int16 *)(v3020 + 8);
                }
                else {
                  uint64_t v3021 = 0;
                }
                v3022 = sub_1CD7FF4E8(v3015, v3014, (const llvm::APInt *)&v3813, (llvm *)v2993, 0, (uint64_t *)v3815, DWORD2(v3815), v3021);
                v3024 = v3023;
                if (!(void)v3813) {
                  goto LABEL_2962;
                }
                int v3025 = *(unsigned __int8 *)v3813;
                if ((v3025 - 4) > 0x1E)
                {
                  if ((v3025 - 3) >= 0xFFFFFFFE) {
                    uint64_t v3027 = v3813;
                  }
                  else {
                    uint64_t v3027 = 0;
                  }
                  if ((v3025 - 3) < 0xFFFFFFFE)
                  {
                    if (v3025 == 3) {
                      *(void *)(v3813 + 8) = 0;
                    }
                    goto LABEL_2962;
                  }
                  unint64_t v3028 = v3027 + 8;
                }
                else
                {
                  if ((*(unsigned char *)(v3813 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3813 + 12)) {
                    goto LABEL_2962;
                  }
                  uint64_t v3029 = *(void *)(v3813 + 16);
                  if ((v3029 & 4) == 0) {
                    goto LABEL_2962;
                  }
                  unint64_t v3028 = v3029 & 0xFFFFFFFFFFFFFFF8;
                  if (!v3028) {
                    goto LABEL_2962;
                  }
                }
                *(void *)&long long v3821 = &v3813;
                sub_1CC5FA668(v3028 + 16, &v3821);
LABEL_2962:
                if (LODWORD(v3793[1]) >= (unint64_t)HIDWORD(v3793[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v3026 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
                *v3026 = v3022;
                v3026[1] = v3024;
                ++LODWORD(v3793[1]);
                ++v3013;
                LODWORD(v752) = v752 + 4;
                if (v2994 == v3013)
                {
                  v3251 = *(void **)(a3 + 16);
                  v3252 = *(unsigned __int8 **)(v1912 + 64);
                  if (v2994 == 3)
                  {
                    *(void *)&long long v3813 = *(void *)(v1912 + 64);
                    if (v3252) {
                      llvm::MetadataTracking::track((uint64_t)&v3813, v3252, 2);
                    }
                    DWORD2(v3813) = *(_DWORD *)(v1912 + 60);
                    v3254 = sub_1CD7F330C((uint64_t)v3251, 51, (uint64_t)&v3813, (llvm *)v2993, 0);
                    if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
                      llvm::SmallVectorBase<unsigned int>::grow_pod();
                    }
                    v3255 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
                    *v3255 = v3254;
                    v3255[1] = v3253;
                    ++LODWORD(v3793[1]);
                    if ((void)v3813)
                    {
                      int v3256 = *(unsigned __int8 *)v3813;
                      if ((v3256 - 4) > 0x1E)
                      {
                        if ((v3256 - 3) >= 0xFFFFFFFE) {
                          uint64_t v3582 = v3813;
                        }
                        else {
                          uint64_t v3582 = 0;
                        }
                        if ((v3256 - 3) >= 0xFFFFFFFE)
                        {
                          unint64_t v3583 = v3582 + 8;
                          goto LABEL_3652;
                        }
                        if (v3256 == 3) {
                          *(void *)(v3813 + 8) = 0;
                        }
                      }
                      else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
                      {
                        uint64_t v3644 = *(void *)(v3813 + 16);
                        if ((v3644 & 4) != 0)
                        {
                          unint64_t v3583 = v3644 & 0xFFFFFFFFFFFFFFF8;
                          if (v3583)
                          {
LABEL_3652:
                            *(void *)&long long v3821 = &v3813;
                            sub_1CC5FA668(v3583 + 16, &v3821);
                          }
                        }
                      }
                    }
LABEL_3238:
                    v3251 = *(void **)(a3 + 16);
                    v3252 = *(unsigned __int8 **)(v1912 + 64);
                  }
                  *(void *)&long long v3813 = v3252;
                  if (v3252) {
                    llvm::MetadataTracking::track((uint64_t)&v3813, v3252, 2);
                  }
                  DWORD2(v3813) = *(_DWORD *)(v1912 + 60);
                  uint64_t v3257 = *(void *)(v1912 + 40);
                  v3258 = *(llvm **)v3257;
                  uint64_t v3259 = *(void *)(v3257 + 8);
                  uint64_t v3260 = v3251[104];
                  if (v3260) {
                    uint64_t v3261 = *(unsigned __int16 *)(v3260 + 8);
                  }
                  else {
                    uint64_t v3261 = 0;
                  }
                  *(void *)&long long v3791 = sub_1CD7FF4E8(v3251, (const char *)0x92, (const llvm::APInt *)&v3813, v3258, v3259, (uint64_t *)v3793[0], LODWORD(v3793[1]), v3261);
                  *((void *)&v3791 + 1) = v3275;
                  if ((void)v3813)
                  {
                    int v3276 = *(unsigned __int8 *)v3813;
                    if ((v3276 - 4) > 0x1E)
                    {
                      if ((v3276 - 3) >= 0xFFFFFFFE) {
                        uint64_t v3463 = v3813;
                      }
                      else {
                        uint64_t v3463 = 0;
                      }
                      if ((v3276 - 3) >= 0xFFFFFFFE)
                      {
                        unint64_t v3464 = v3463 + 8;
                        goto LABEL_3479;
                      }
                      if (v3276 == 3) {
                        *(void *)(v3813 + 8) = 0;
                      }
                    }
                    else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
                    {
                      uint64_t v3637 = *(void *)(v3813 + 16);
                      if ((v3637 & 4) != 0)
                      {
                        unint64_t v3464 = v3637 & 0xFFFFFFFFFFFFFFF8;
                        if (v3464)
                        {
LABEL_3479:
                          *(void *)&long long v3821 = &v3813;
                          sub_1CC5FA668(v3464 + 16, &v3821);
                        }
                      }
                    }
                  }
                  v3277 = v3793[0];
                  if (v3793[0] == &v3793[2]) {
                    goto LABEL_3269;
                  }
LABEL_3268:
                  free(v3277);
                  goto LABEL_3269;
                }
              }
            }
          }
          else if (v2991 != 10)
          {
            goto LABEL_2925;
          }
          int v2992 = 0;
          uint64_t v2993 = 10;
          goto LABEL_2925;
        case 1910:
        case 1911:
        case 1912:
        case 1913:
        case 1914:
        case 1915:
        case 1916:
        case 1917:
        case 1951:
        case 1952:
        case 1953:
        case 1954:
        case 1955:
        case 1956:
        case 1957:
        case 1958:
          LODWORD(v3787) = 0;
          LODWORD(v3792) = 0;
          uint64_t v3758 = 0;
          sub_1CB8DA7DC(v34, (int *)&v3787, (int *)&v3792, (int *)&v3758 + 1, (int *)&v3758);
          v1660 = sub_1CD7EBF14(*(void *)(a3 + 16), (int)v3792, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          int v321 = (void **)&v3816;
          *(void *)&long long v3815 = &v3816;
          v3816 = v1660;
          uint64_t v3817 = v1661;
          uint64_t v1662 = *(void *)(v8 + 32);
          uint64_t v1663 = *(void *)(v1662 + 40);
          uint64_t v1664 = *(void *)(v1662 + 48);
          uint64_t v3818 = v1663;
          uint64_t v3819 = v1664;
          *((void *)&v3815 + 1) = 0x300000002;
          if (HIDWORD(v3758) == 1)
          {
            long long v3820 = *(_OWORD *)(v1662 + 80);
            unsigned int v1665 = 3;
            DWORD2(v3815) = 3;
          }
          else
          {
            unsigned int v1665 = 2;
          }
          unsigned int v1946 = **(unsigned __int8 **)(v8 + 40);
          uint64_t v1947 = 9;
          uint64_t v1948 = v8;
          if (v1946 > 0x4D)
          {
            if (v1946 == 78) {
              goto LABEL_2084;
            }
          }
          else if (v1946 != 10)
          {
            goto LABEL_2084;
          }
          uint64_t v1947 = 10;
LABEL_2084:
          uint64_t v1949 = v3787;
          if (v3787 == 1)
          {
            v1950 = *(void **)(a3 + 16);
            v1951 = (const char *)v3758;
            v1952 = *(void **)(v8 + 64);
            v3793[0] = v1952;
            v1953 = (uint64_t *)&v3816;
            if (v1952)
            {
              llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1952, 2);
              v1953 = (uint64_t *)v3815;
              unsigned int v1665 = DWORD2(v3815);
            }
            LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
            uint64_t v1954 = v1665;
            uint64_t v1955 = v1950[104];
            if (v1955) {
              uint64_t v1956 = *(unsigned __int16 *)(v1955 + 8);
            }
            else {
              uint64_t v1956 = 0;
            }
            *(void *)&long long v3791 = sub_1CD7FF4E8(v1950, v1951, (const llvm::APInt *)v3793, (llvm *)v1947, 0, v1953, v1954, v1956);
            *((void *)&v3791 + 1) = v2206;
            if (v3793[0])
            {
              int v2207 = *(unsigned __int8 *)v3793[0];
              if ((v2207 - 4) > 0x1E)
              {
                if ((v2207 - 3) >= 0xFFFFFFFE) {
                  v2765 = v3793[0];
                }
                else {
                  v2765 = 0;
                }
                if ((v2207 - 3) < 0xFFFFFFFE)
                {
                  if (v2207 == 3) {
                    *((void *)v3793[0] + 1) = 0;
                  }
                  goto LABEL_2392;
                }
                unint64_t v2209 = (unint64_t)v2765 + 8;
              }
              else
              {
                if ((*((unsigned char *)v3793[0] + 1) & 0x7F) != 2 && !*((_DWORD *)v3793[0] + 3)) {
                  goto LABEL_2392;
                }
                uint64_t v2208 = *((void *)v3793[0] + 2);
                if ((v2208 & 4) == 0) {
                  goto LABEL_2392;
                }
                unint64_t v2209 = v2208 & 0xFFFFFFFFFFFFFFF8;
                if (!v2209) {
                  goto LABEL_2392;
                }
              }
              *(void *)&long long v3813 = v3793;
              sub_1CC5FA668(v2209 + 16, &v3813);
            }
LABEL_2392:
            v989 = (void **)v3815;
            goto LABEL_1060;
          }
          v3793[0] = &v3793[2];
          v3793[1] = (void *)0x400000000;
          if (!v3787) {
            goto LABEL_2090;
          }
          uint64_t v2210 = 0;
          v2211 = (const char *)v3758;
          while (1)
          {
            uint64_t v2212 = *(void *)(a3 + 16);
            v2213 = sub_1CD7EBF14(v2212, v2210, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
            __int16 v2216 = 0;
            uint64_t v2217 = *(void *)(v2212 + 832);
            if (v2217) {
              __int16 v2216 = *(_WORD *)(v2217 + 8);
            }
            v2218 = sub_1CCFDED5C(v2212, 148, (const llvm::APInt *)&v3789, (llvm *)0xA, 0, v1663, v1664, v2215, (uint64_t)v2213, v2214, v2216);
            uint64_t v2219 = v3815;
            *(void *)(v3815 + 16) = v2218;
            *(_DWORD *)(v2219 + 24) = v2220;
            v2221 = *(void **)(a3 + 16);
            v2222 = *(unsigned __int8 **)(v8 + 64);
            *(void *)&long long v3813 = v2222;
            if (v2222)
            {
              llvm::MetadataTracking::track((uint64_t)&v3813, v2222, 2);
              uint64_t v2219 = v3815;
            }
            DWORD2(v3813) = *(_DWORD *)(v8 + 60);
            uint64_t v2223 = v2221[104];
            if (v2223) {
              uint64_t v2224 = *(unsigned __int16 *)(v2223 + 8);
            }
            else {
              uint64_t v2224 = 0;
            }
            v2225 = sub_1CD7FF4E8(v2221, v2211, (const llvm::APInt *)&v3813, (llvm *)v1947, 0, (uint64_t *)v2219, DWORD2(v3815), v2224);
            v2227 = v2226;
            if (!(void)v3813) {
              goto LABEL_2355;
            }
            int v2228 = *(unsigned __int8 *)v3813;
            if ((v2228 - 4) > 0x1E)
            {
              if ((v2228 - 3) >= 0xFFFFFFFE) {
                uint64_t v2230 = v3813;
              }
              else {
                uint64_t v2230 = 0;
              }
              if ((v2228 - 3) < 0xFFFFFFFE)
              {
                if (v2228 == 3) {
                  *(void *)(v3813 + 8) = 0;
                }
                goto LABEL_2355;
              }
              unint64_t v2231 = v2230 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v3813 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3813 + 12)) {
                goto LABEL_2355;
              }
              uint64_t v2232 = *(void *)(v3813 + 16);
              if ((v2232 & 4) == 0) {
                goto LABEL_2355;
              }
              unint64_t v2231 = v2232 & 0xFFFFFFFFFFFFFFF8;
              if (!v2231) {
                goto LABEL_2355;
              }
            }
            *(void *)&long long v3821 = &v3813;
            sub_1CC5FA668(v2231 + 16, &v3821);
LABEL_2355:
            if (LODWORD(v3793[1]) >= (unint64_t)HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2229 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2229 = v2225;
            v2229[1] = v2227;
            ++LODWORD(v3793[1]);
            if (v1949 == ++v2210)
            {
              v1957 = *(void **)(a3 + 16);
              uint64_t v1948 = v8;
              v1958 = *(unsigned __int8 **)(v8 + 64);
              if (v1949 == 3)
              {
                *(void *)&long long v3813 = *(void *)(v8 + 64);
                if (v1958) {
                  llvm::MetadataTracking::track((uint64_t)&v3813, v1958, 2);
                }
                DWORD2(v3813) = *(_DWORD *)(v8 + 60);
                v2234 = sub_1CD7F330C((uint64_t)v1957, 51, (uint64_t)&v3813, (llvm *)v1947, 0);
                if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                v2235 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
                *v2235 = v2234;
                v2235[1] = v2233;
                ++LODWORD(v3793[1]);
                if ((void)v3813)
                {
                  int v2236 = *(unsigned __int8 *)v3813;
                  if ((v2236 - 4) > 0x1E)
                  {
                    if ((v2236 - 3) >= 0xFFFFFFFE) {
                      uint64_t v3341 = v3813;
                    }
                    else {
                      uint64_t v3341 = 0;
                    }
                    if ((v2236 - 3) >= 0xFFFFFFFE)
                    {
                      unint64_t v2238 = v3341 + 8;
                      goto LABEL_3327;
                    }
                    if (v2236 == 3) {
                      *(void *)(v3813 + 8) = 0;
                    }
                  }
                  else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
                  {
                    uint64_t v2237 = *(void *)(v3813 + 16);
                    if ((v2237 & 4) != 0)
                    {
                      unint64_t v2238 = v2237 & 0xFFFFFFFFFFFFFFF8;
                      if (v2238)
                      {
LABEL_3327:
                        *(void *)&long long v3821 = &v3813;
                        sub_1CC5FA668(v2238 + 16, &v3821);
                      }
                    }
                  }
                }
LABEL_2090:
                v1957 = *(void **)(a3 + 16);
                v1958 = *(unsigned __int8 **)(v1948 + 64);
              }
              *(void *)&long long v3813 = v1958;
              if (v1958) {
                llvm::MetadataTracking::track((uint64_t)&v3813, v1958, 2);
              }
              DWORD2(v3813) = *(_DWORD *)(v1948 + 60);
              uint64_t v2239 = *(void *)(v1948 + 40);
              v2240 = *(llvm **)v2239;
              uint64_t v2241 = *(void *)(v2239 + 8);
              uint64_t v2242 = v1957[104];
              if (v2242) {
                uint64_t v2243 = *(unsigned __int16 *)(v2242 + 8);
              }
              else {
                uint64_t v2243 = 0;
              }
              *(void *)&long long v3791 = sub_1CD7FF4E8(v1957, (const char *)0x92, (const llvm::APInt *)&v3813, v2240, v2241, (uint64_t *)v3793[0], LODWORD(v3793[1]), v2243);
              *((void *)&v3791 + 1) = v2244;
              if ((void)v3813)
              {
                int v2245 = *(unsigned __int8 *)v3813;
                if ((v2245 - 4) > 0x1E)
                {
                  if ((v2245 - 3) >= 0xFFFFFFFE) {
                    uint64_t v2766 = v3813;
                  }
                  else {
                    uint64_t v2766 = 0;
                  }
                  if ((v2245 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v2767 = v2766 + 8;
                    goto LABEL_2796;
                  }
                  if (v2245 == 3) {
                    *(void *)(v3813 + 8) = 0;
                  }
                }
                else if ((*(unsigned char *)(v3813 + 1) & 0x7F) == 2 || *(_DWORD *)(v3813 + 12))
                {
                  uint64_t v3632 = *(void *)(v3813 + 16);
                  if ((v3632 & 4) != 0)
                  {
                    unint64_t v2767 = v3632 & 0xFFFFFFFFFFFFFFF8;
                    if (v2767)
                    {
LABEL_2796:
                      *(void *)&long long v3821 = &v3813;
                      sub_1CC5FA668(v2767 + 16, &v3821);
                    }
                  }
                }
              }
              if (v3793[0] != &v3793[2]) {
                free(v3793[0]);
              }
              goto LABEL_2392;
            }
          }
        case 1918:
        case 1919:
        case 1920:
        case 1921:
        case 1922:
        case 1923:
          uint64_t v2104 = v31[5];
          uint64_t v2105 = v31[6];
          LODWORD(v3821) = 0;
          LODWORD(v3787) = 0;
          LODWORD(v3792) = 0;
          HIDWORD(v3758) = 0;
          sub_1CB8DA7DC(v34, (int *)&v3821, (int *)&v3787, (int *)&v3792, (int *)&v3758 + 1);
          v2106 = sub_1CD7EBF14(*(void *)(a3 + 16), (int)v3787, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          uint64_t v2108 = v2107;
          uint64_t v2109 = (*(uint64_t (**)(void))(**(void **)(*(void *)(*(void *)(a3 + 16) + 40) + 344) + 336))();
          unsigned int v2110 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2109 + 24))(v2109, 16);
          unsigned int v2111 = *(unsigned __int16 *)(v2104 + 24);
          if (v2111 <= 0x26 && ((1 << v2111) & 0x6000006000) != 0)
          {
            unsigned int v2112 = sub_1CB8C4588(v2104, *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344));
            v2113 = sub_1CD7EBF14(*(void *)(a3 + 16), v2112 / v2110, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          }
          else
          {
            uint64_t v2771 = sub_1CD7EB67C(*(void *)(a3 + 16), v2104, v2105, (uint64_t)&v3789, 4, 0);
            uint64_t v2773 = v2772;
            uint64_t v2774 = *(void *)(a3 + 16);
            v2775 = sub_1CD7EBF14(v2774, 31 - __clz(v2110), (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
            __int16 v2778 = 0;
            uint64_t v2779 = *(void *)(v2774 + 832);
            if (v2779) {
              __int16 v2778 = *(_WORD *)(v2779 + 8);
            }
            v2113 = sub_1CCFDED5C(v2774, 177, (const llvm::APInt *)&v3789, (llvm *)4, 0, v2771, v2773, v2777, (uint64_t)v2775, v2776, v2778);
          }
          uint64_t v2115 = v2114;
          unsigned int v2116 = **(unsigned __int8 **)(v8 + 40);
          int v2117 = 1;
          uint64_t v2118 = 9;
          if (v2116 > 0x4D)
          {
            if (v2116 == 78) {
              goto LABEL_2499;
            }
          }
          else if (v2116 != 10)
          {
            goto LABEL_2499;
          }
          int v2117 = 0;
          uint64_t v2118 = 10;
LABEL_2499:
          *(void *)&long long v3815 = &v3816;
          v3816 = v2106;
          uint64_t v3817 = v2108;
          v2337 = *(void **)(a3 + 16);
          v2338 = *(void **)(v8 + 64);
          uint64_t v3818 = (uint64_t)v2113;
          uint64_t v3819 = v2115;
          *((void *)&v3815 + 1) = 0x200000002;
          v2339 = (const char *)HIDWORD(v3758);
          v3793[0] = v2338;
          if (v2338)
          {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v2338, 2);
            v2341 = (uint64_t *)v3815;
            unsigned int v2340 = DWORD2(v3815);
          }
          else
          {
            unsigned int v2340 = 2;
            v2341 = (uint64_t *)&v3816;
          }
          LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
          uint64_t v2342 = v2340;
          uint64_t v2343 = v2337[104];
          if (v2343) {
            uint64_t v2344 = *(unsigned __int16 *)(v2343 + 8);
          }
          else {
            uint64_t v2344 = 0;
          }
          v2345 = sub_1CD7FF4E8(v2337, v2339, (const llvm::APInt *)v3793, (llvm *)0xAE, 0, v2341, v2342, v2344);
          int v2347 = v2346;
          if (!v3793[0]) {
            goto LABEL_2509;
          }
          int v2348 = *(unsigned __int8 *)v3793[0];
          if ((v2348 - 4) > 0x1E)
          {
            if ((v2348 - 3) >= 0xFFFFFFFE) {
              v2877 = v3793[0];
            }
            else {
              v2877 = 0;
            }
            if ((v2348 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v2878 = (unint64_t)v2877 + 8;
LABEL_2874:
              *(void *)&long long v3813 = v3793;
              sub_1CC5FA668(v2878 + 16, &v3813);
              goto LABEL_2509;
            }
            if (v2348 == 3) {
              *((void *)v3793[0] + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v3793[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3793[0] + 3))
          {
            uint64_t v3634 = *((void *)v3793[0] + 2);
            if ((v3634 & 4) != 0)
            {
              unint64_t v2878 = v3634 & 0xFFFFFFFFFFFFFFF8;
              if (v2878) {
                goto LABEL_2874;
              }
            }
          }
LABEL_2509:
          v3793[0] = &v3793[2];
          v3793[1] = (void *)0x400000000;
          if (v2117)
          {
            v2350 = sub_1CD8015C0(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3789, (llvm *)v2118, 0, (uint64_t)v2345, v2347);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2351 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2351 = v2350;
            v2351[1] = v2349;
            ++LODWORD(v3793[1]);
            v2353 = sub_1CD8015C0(*(void *)(a3 + 16), 2, (const llvm::APInt *)&v3789, (llvm *)v2118, 0, (uint64_t)v2345, v2347);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2354 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2354 = v2353;
            v2354[1] = v2352;
            ++LODWORD(v3793[1]);
            v2356 = sub_1CD8015C0(*(void *)(a3 + 16), 3, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2345, v2347);
            __int16 v2357 = 0;
            v2358 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2359 = *((void *)v2358 + 104);
            if (v2359) {
              __int16 v2357 = *(_WORD *)(v2359 + 8);
            }
            v2361 = sub_1CD7F3564(v2358, (const char *)0xD8, (uint64_t)&v3789, (llvm *)9, 0, (uint64_t)v2356, v2355, v2357);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2362 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2362 = v2361;
            v2362[1] = v2360;
            ++LODWORD(v3793[1]);
            v2364 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)9, 0);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2365 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2365 = v2364;
            v2365[1] = v2363;
            uint64_t v2366 = ++LODWORD(v3793[1]);
            v2367 = *(void **)(a3 + 16);
            uint64_t v2368 = v2367[104];
            if (v2368) {
              uint64_t v2369 = *(unsigned __int16 *)(v2368 + 8);
            }
            else {
              uint64_t v2369 = 0;
            }
            *(void *)&long long v3791 = sub_1CD7FF4E8(v2367, (const char *)0x92, (const llvm::APInt *)&v3789, (llvm *)0x4E, 0, (uint64_t *)v3793[0], v2366, v2369);
            *((void *)&v3791 + 1) = v2747;
          }
          else
          {
            *(void *)&long long v3813 = v3814;
            *((void *)&v3813 + 1) = 0x200000000;
            v2371 = sub_1CD8015C0(*(void *)(a3 + 16), 33, (const llvm::APInt *)&v3789, (llvm *)v2118, 0, (uint64_t)v2345, v2347);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2372 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2372 = v2371;
            v2372[1] = v2370;
            ++LODWORD(v3793[1]);
            v2374 = sub_1CD8015C0(*(void *)(a3 + 16), 34, (const llvm::APInt *)&v3789, (llvm *)v2118, 0, (uint64_t)v2345, v2347);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2375 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2375 = v2374;
            v2375[1] = v2373;
            ++LODWORD(v3793[1]);
            v2377 = sub_1CD8015C0(*(void *)(a3 + 16), 5, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2345, v2347);
            __int16 v2378 = 0;
            v2379 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2380 = *((void *)v2379 + 104);
            if (v2380) {
              __int16 v2378 = *(_WORD *)(v2380 + 8);
            }
            v2382 = sub_1CD7F3564(v2379, (const char *)0xD8, (uint64_t)&v3789, (llvm *)9, 0, (uint64_t)v2377, v2376, v2378);
            if (DWORD2(v3813) >= HIDWORD(v3813)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2383 = (uint64_t **)(v3813 + 16 * DWORD2(v3813));
            *v2383 = v2382;
            v2383[1] = v2381;
            ++DWORD2(v3813);
            v2385 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)9, 0);
            if (DWORD2(v3813) >= HIDWORD(v3813)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2386 = (uint64_t **)(v3813 + 16 * DWORD2(v3813));
            *v2386 = v2385;
            v2386[1] = v2384;
            uint64_t v2387 = ++DWORD2(v3813);
            v2388 = *(void **)(a3 + 16);
            uint64_t v2389 = v2388[104];
            if (v2389) {
              uint64_t v2390 = *(unsigned __int16 *)(v2389 + 8);
            }
            else {
              uint64_t v2390 = 0;
            }
            v2749 = sub_1CD7FF4E8(v2388, (const char *)0x92, (const llvm::APInt *)&v3789, (llvm *)0x4C, 0, (uint64_t *)v3813, v2387, v2390);
            __int16 v2750 = 0;
            v2751 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v2752 = *((void *)v2751 + 104);
            if (v2752) {
              __int16 v2750 = *(_WORD *)(v2752 + 8);
            }
            v2754 = sub_1CD7F3564(v2751, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0xA, 0, (uint64_t)v2749, v2748, v2750);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2755 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2755 = v2754;
            v2755[1] = v2753;
            ++LODWORD(v3793[1]);
            v2757 = sub_1CD3DD4D8(*(void *)(a3 + 16), (llvm *)0xA, 0);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v2758 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v2758 = v2757;
            v2758[1] = v2756;
            uint64_t v2759 = ++LODWORD(v3793[1]);
            v2760 = *(void **)(a3 + 16);
            uint64_t v2761 = v2760[104];
            if (v2761) {
              uint64_t v2762 = *(unsigned __int16 *)(v2761 + 8);
            }
            else {
              uint64_t v2762 = 0;
            }
            *(void *)&long long v3791 = sub_1CD7FF4E8(v2760, (const char *)0x92, (const llvm::APInt *)&v3789, (llvm *)0x61, 0, (uint64_t *)v3793[0], v2759, v2762);
            *((void *)&v3791 + 1) = v2763;
            if ((uint64_t *)v3813 != v3814) {
              free((void *)v3813);
            }
          }
          if (v3793[0] != &v3793[2]) {
            free(v3793[0]);
          }
          v989 = (void **)v3815;
          if ((uint64_t **)v3815 == &v3816) {
            goto LABEL_3082;
          }
          goto LABEL_1061;
        case 1924:
        case 1925:
          uint64_t v1395 = v31[5];
          uint64_t v1396 = v31[6];
          v3756 = v3789;
          if (v3789)
          {
            llvm::MetadataTracking::track((uint64_t)&v3756, v3789, 2);
            int v12 = v3790;
          }
          int v3757 = v12;
          *(void *)&long long v3791 = sub_1CB8DAC0C(v34, (const llvm::APInt *)&v3756, v1395, v1396, *(llvm::APFloatBase **)(a3 + 16));
          *((void *)&v3791 + 1) = v1397;
          v858 = v3756;
          if (!v3756) {
            goto LABEL_3082;
          }
          int v859 = *v3756;
          if ((v859 - 4) > 0x1E)
          {
            if ((v859 - 3) >= 0xFFFFFFFE) {
              v2126 = v3756;
            }
            else {
              v2126 = 0;
            }
            if ((v859 - 3) < 0xFFFFFFFE) {
              goto LABEL_3395;
            }
            unint64_t v1399 = (unint64_t)(v2126 + 8);
          }
          else
          {
            if ((v3756[1] & 0x7F) != 2 && !*((_DWORD *)v3756 + 3)) {
              goto LABEL_3082;
            }
            uint64_t v1398 = *((void *)v3756 + 2);
            if ((v1398 & 4) == 0) {
              goto LABEL_3082;
            }
            unint64_t v1399 = v1398 & 0xFFFFFFFFFFFFFFF8;
            if (!v1399) {
              goto LABEL_3082;
            }
          }
          v1523 = &v3756;
          goto LABEL_1703;
        case 1926:
          uint64_t v1635 = v31[5];
          uint64_t v1636 = v31[6];
          v1637 = (void *)v31[10];
          uint64_t v1638 = v31[11];
          uint64_t v1639 = v31[15];
          uint64_t v1640 = v31[16];
          uint64_t v1641 = v31[20];
          uint64_t v1642 = v31[21];
          v3754 = v3789;
          if (v3789)
          {
            llvm::MetadataTracking::track((uint64_t)&v3754, v3789, 2);
            int v12 = v3790;
          }
          int v3755 = v12;
          *(void *)&long long v3791 = sub_1CB8DB464((const llvm::APInt *)&v3754, v1635, v1636, v1637, v1638, v1639, v1640, a8, v1641, v1642, *(llvm::APFloatBase **)(a3 + 16));
          *((void *)&v3791 + 1) = v1643;
          v858 = v3754;
          if (!v3754) {
            goto LABEL_3082;
          }
          int v859 = *v3754;
          if ((v859 - 4) > 0x1E)
          {
            if ((v859 - 3) >= 0xFFFFFFFE) {
              v2394 = v3754;
            }
            else {
              v2394 = 0;
            }
            if ((v859 - 3) < 0xFFFFFFFE) {
              goto LABEL_3395;
            }
            unint64_t v1399 = (unint64_t)(v2394 + 8);
          }
          else
          {
            if ((v3754[1] & 0x7F) != 2 && !*((_DWORD *)v3754 + 3)) {
              goto LABEL_3082;
            }
            uint64_t v1644 = *((void *)v3754 + 2);
            if ((v1644 & 4) == 0) {
              goto LABEL_3082;
            }
            unint64_t v1399 = v1644 & 0xFFFFFFFFFFFFFFF8;
            if (!v1399) {
              goto LABEL_3082;
            }
          }
          v1523 = &v3754;
          goto LABEL_1703;
        case 1959:
          uint64_t v2797 = v31[5];
          unint64_t v2796 = v31[6];
          v2798 = *(llvm::APFloatBase **)(a3 + 16);
          v2799 = *(void **)(v2797 + 64);
          v3793[0] = v2799;
          if (v2799) {
            llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v2799, 2);
          }
          LODWORD(v3793[1]) = *(_DWORD *)(v2797 + 60);
          uint64_t v2800 = *((void *)v2798 + 104);
          if (v2800) {
            __int16 v2801 = *(_WORD *)(v2800 + 8);
          }
          else {
            __int16 v2801 = 0;
          }
          v3118 = sub_1CD7F3564(v2798, (const char *)0xC9, (uint64_t)v3793, (llvm *)5, 0, v2797, (void *)v2796, v2801);
          v3120 = (void *)(v2796 & 0xFFFFFFFF00000000 | v3119);
          if (!v3793[0]) {
            goto LABEL_3112;
          }
          int v3121 = *(unsigned __int8 *)v3793[0];
          if ((v3121 - 4) > 0x1E)
          {
            if ((v3121 - 3) >= 0xFFFFFFFE) {
              v3447 = v3793[0];
            }
            else {
              v3447 = 0;
            }
            if ((v3121 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v3448 = (unint64_t)v3447 + 8;
LABEL_3450:
              *(void *)&long long v3815 = v3793;
              sub_1CC5FA668(v3448 + 16, &v3815);
              goto LABEL_3112;
            }
            if (v3121 == 3) {
              *((void *)v3793[0] + 1) = 0;
            }
          }
          else if ((*((unsigned char *)v3793[0] + 1) & 0x7F) == 2 || *((_DWORD *)v3793[0] + 3))
          {
            uint64_t v3636 = *((void *)v3793[0] + 2);
            if ((v3636 & 4) != 0)
            {
              unint64_t v3448 = v3636 & 0xFFFFFFFFFFFFFFF8;
              if (v3448) {
                goto LABEL_3450;
              }
            }
          }
LABEL_3112:
          v3793[0] = &v3793[2];
          v3793[2] = v3118;
          *(void *)&long long v3794 = v3120;
          v3793[1] = (void *)0x800000001;
          v3122 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v3123 = *((void *)v3122 + 104);
          if (v3123) {
            __int16 v3124 = *(_WORD *)(v3123 + 8);
          }
          else {
            __int16 v3124 = 0;
          }
          v3125 = sub_1CD7F3564(v3122, (const char *)0x1BA, (uint64_t)&v3789, (llvm *)0xAE, 0, (uint64_t)v3118, v3120, v3124);
          int v3127 = v3126;
          *(void *)&long long v3815 = sub_1CD8015C0(*(void *)(a3 + 16), 33, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v3125, v3126);
          *((void *)&v3815 + 1) = v3128;
          v3129 = sub_1CD8015C0(*(void *)(a3 + 16), 34, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v3125, v3127);
          uint64_t v3130 = 0;
          v3816 = v3129;
          uint64_t v3817 = v3131;
          v3132 = *(void **)(a3 + 16);
          uint64_t v3133 = v3132[104];
          if (v3133) {
            uint64_t v3130 = *(unsigned __int16 *)(v3133 + 8);
          }
          v3135 = sub_1CD7FF4E8(v3132, (const char *)0x92, (const llvm::APInt *)&v3789, (llvm *)0x31, 0, (uint64_t *)&v3815, 2, v3130);
          __int16 v3136 = 0;
          v3137 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v3138 = *(void *)(v8 + 40);
          v3139 = *(llvm **)v3138;
          uint64_t v3140 = *(void *)(v3138 + 8);
          uint64_t v3141 = *((void *)v3137 + 104);
          if (v3141) {
            __int16 v3136 = *(_WORD *)(v3141 + 8);
          }
          *(void *)&long long v3791 = sub_1CD7F3564(v3137, (const char *)0xD8, (uint64_t)&v3789, v3139, v3140, (uint64_t)v3135, v3134, v3136);
          *((void *)&v3791 + 1) = v3142;
          v989 = (void **)v3793[0];
          if (v3793[0] == &v3793[2]) {
            goto LABEL_3082;
          }
LABEL_1061:
          free(v989);
          goto LABEL_3082;
        case 1968:
        case 1969:
          v3759 = v3789;
          if (v3789)
          {
            llvm::MetadataTracking::track((uint64_t)&v3759, v3789, 2);
            int v12 = v3790;
          }
          int v3760 = v12;
          v2635 = sub_1CB8DA6DC(2 * (v34 != 1968), (const llvm::APInt *)&v3759, *(void *)(a3 + 16));
          v2637 = v2636;
          if (!v3759) {
            goto LABEL_2683;
          }
          int v2638 = *v3759;
          if ((v2638 - 4) > 0x1E)
          {
            if ((v2638 - 3) >= 0xFFFFFFFE) {
              v3339 = v3759;
            }
            else {
              v3339 = 0;
            }
            if ((v2638 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v3340 = (unint64_t)(v3339 + 8);
LABEL_3321:
              v3793[0] = &v3759;
              sub_1CC5FA668(v3340 + 16, v3793);
              goto LABEL_2683;
            }
            if (v2638 == 3) {
              *((void *)v3759 + 1) = 0;
            }
          }
          else if ((v3759[1] & 0x7F) == 2 || *((_DWORD *)v3759 + 3))
          {
            uint64_t v3635 = *((void *)v3759 + 2);
            if ((v3635 & 4) != 0)
            {
              unint64_t v3340 = v3635 & 0xFFFFFFFFFFFFFFF8;
              if (v3340) {
                goto LABEL_3321;
              }
            }
          }
LABEL_2683:
          v2639 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v2640 = *((void *)v2639 + 104);
          if (v2640) {
            __int16 v2641 = *(_WORD *)(v2640 + 8);
          }
          else {
            __int16 v2641 = 0;
          }
          v2824 = sub_1CD7F3564(v2639, (const char *)0xC9, (uint64_t)&v3789, (llvm *)4, 0, (uint64_t)v2635, v2637, v2641);
          uint64_t v2826 = v2825;
          uint64_t v2827 = *(void *)(a3 + 16);
          v2828 = sub_1CD7EBF14(v2827, 4, (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
          __int16 v2831 = 0;
          uint64_t v2832 = *(void *)(v2827 + 832);
          if (v2832) {
            __int16 v2831 = *(_WORD *)(v2832 + 8);
          }
          v2833 = sub_1CCFDED5C(v2827, 177, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2824, v2826, v2830, (uint64_t)v2828, v2829, v2831);
          uint64_t v2835 = v2834;
          uint64_t v2836 = *(void *)(a3 + 16);
          v2837 = sub_1CD7EBF14(v2836, 15, (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
          __int16 v2840 = 0;
          uint64_t v2841 = *(void *)(v2836 + 832);
          if (v2841) {
            __int16 v2840 = *(_WORD *)(v2841 + 8);
          }
          v3749 = sub_1CCFDED5C(v2836, 171, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2833, v2835, v2839, (uint64_t)v2837, v2838, v2840);
          int v3730 = v2842;
          uint64_t v2843 = *(void *)(a3 + 16);
          v2844 = sub_1CD7EBF14(v2843, 31, (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
          __int16 v2847 = 0;
          uint64_t v2848 = *(void *)(v2843 + 832);
          if (v2848) {
            __int16 v2847 = *(_WORD *)(v2848 + 8);
          }
          v2849 = sub_1CCFDED5C(v2843, 171, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2833, v2835, v2846, (uint64_t)v2844, v2845, v2847);
          int v2851 = v2850;
          v2852 = sub_1CD3D6670(*(void **)(a3 + 16), *(void *)(a3 + 16) + 112, 0, (const llvm::APInt *)&v3789, 272, (llvm *)5, 0);
          int v2854 = v2853;
          v2855 = sub_1CD7EBF14(*(void *)(a3 + 16), 3, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          int v2857 = v2856;
          v2858 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          v2860 = *(void **)(a3 + 16);
          if (v34 == 1968)
          {
            uint64_t v3669 = sub_1CD7EE368(v2860, 0x11u);
            int v3670 = v2861;
            uint64_t v3667 = (uint64_t)v2849;
            int v3668 = v2851;
            uint64_t v3660 = (uint64_t)v3749;
            int v3664 = v3730;
            uint64_t v3650 = (uint64_t)v2855;
            int v3655 = v2857;
          }
          else
          {
            v2863 = v2858;
            int v2864 = v2859;
            uint64_t v3669 = sub_1CD7EE368(v2860, 0x12u);
            int v3670 = v2865;
            uint64_t v3667 = (uint64_t)v2849;
            int v3668 = v2851;
            uint64_t v3660 = (uint64_t)v3749;
            int v3664 = v3730;
            uint64_t v3650 = (uint64_t)v2863;
            int v3655 = v2864;
          }
          uint64_t v29 = (uint64_t)sub_1CD7F6564(v2860, (const char *)0xC0, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2852, v2854, v2862, v3650, v3655, v3660, v3664, v3667, v3668, v3669, v3670);
          goto LABEL_2210;
        case 1985:
        case 1987:
          v1424 = *(unsigned __int8 **)(v8 + 64);
          *(void *)&long long v3815 = v1424;
          if (v1424)
          {
            llvm::MetadataTracking::track((uint64_t)&v3815, v1424, 2);
            int v12 = *(_DWORD *)(v8 + 60);
            int v31 = *(uint64_t **)(v8 + 32);
          }
          DWORD2(v3815) = v12;
          uint64_t v1425 = v31[5];
          int v1426 = *(unsigned __int16 *)(v1425 + 24);
          if (v1426 != 36 && v1426 != 12)
          {
            long long v166 = (void *)v3815;
            if (!(void)v3815) {
              goto LABEL_3081;
            }
            int v167 = *(unsigned __int8 *)v3815;
            if ((v167 - 4) > 0x1E)
            {
              if ((v167 - 3) >= 0xFFFFFFFE) {
                uint64_t v2160 = v3815;
              }
              else {
                uint64_t v2160 = 0;
              }
              if ((v167 - 3) < 0xFFFFFFFE) {
                goto LABEL_2273;
              }
              unint64_t v1429 = v2160 + 8;
            }
            else
            {
              if ((*(unsigned char *)(v3815 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3815 + 12)) {
                goto LABEL_3081;
              }
              uint64_t v1428 = *(void *)(v3815 + 16);
              if ((v1428 & 4) == 0) {
                goto LABEL_3081;
              }
              unint64_t v1429 = v1428 & 0xFFFFFFFFFFFFFFF8;
              if (!v1429) {
                goto LABEL_3081;
              }
            }
            v3793[0] = &v3815;
            uint64_t v797 = v1429 + 16;
            v798 = v3793;
LABEL_879:
            sub_1CC5FA668(v797, v798);
            goto LABEL_3081;
          }
          if (**(unsigned char **)(v1425 + 40) == 9)
          {
            float v2278 = llvm::APFloat::convertToFloat((llvm::APFloat *)(*(void *)(v1425 + 80) + 24));
          }
          else
          {
            uint64_t v2725 = *(void *)(v1425 + 80);
            v2727 = *(void **)(v2725 + 32);
            v2726 = (const llvm::detail::DoubleAPFloat *)(v2725 + 32);
            if (v2727 == &unk_1CFB2E344) {
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v3793[1], v2726);
            }
            else {
              llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v3793[1], v2726);
            }
            llvm::APFloat::convert((uint64_t)v3793, &unk_1CFB2E308, 1, &v3813);
            float v2278 = llvm::APFloat::convertToFloat((llvm::APFloat *)v3793);
            if (v3793[1] == &unk_1CFB2E344)
            {
              sub_1CB845718((uint64_t *)&v3793[2]);
            }
            else if ((*((_DWORD *)v3793[1] + 2) - 64) <= 0xFFFFFF7F && v3793[2])
            {
              MEMORY[0x1D25D9CB0](v3793[2], 0x1000C8000313F17);
            }
          }
          if (v34 == 1987)
          {
            if (v2278 > 1.0)
            {
              float v2728 = 65535.0;
LABEL_3145:
              v1519 = sub_1CD7EBF14(*(void *)(a3 + 16), (unsigned __int16)(uint64_t)rintf(v2728), (const llvm::APInt *)&v3815, **(llvm ***)(v8 + 40), *(void *)(*(void *)(v8 + 40) + 8), 0, 0);
              goto LABEL_1689;
            }
            float v2728 = v2278 * 65535.0;
            BOOL v3182 = v2278 < 0.0;
            float v3183 = 0.0;
          }
          else
          {
            if (v2278 > 1.0)
            {
              float v2728 = 32767.0;
              goto LABEL_3145;
            }
            float v2728 = v2278 * 32767.0;
            BOOL v3182 = v2278 < -1.0;
            float v3183 = -32767.0;
          }
          if (v3182) {
            float v2728 = v3183;
          }
          goto LABEL_3145;
        case 1999:
        case 2001:
          v3761 = v3789;
          if (v3789)
          {
            llvm::MetadataTracking::track((uint64_t)&v3761, v3789, 2);
            int v12 = v3790;
          }
          int v3762 = v12;
          v2643 = sub_1CB8DA6DC(2 * (v34 != 1999), (const llvm::APInt *)&v3761, *(void *)(a3 + 16));
          v2645 = v2650;
          v2646 = v3761;
          if (!v3761) {
            goto LABEL_3343;
          }
          int v2647 = *v3761;
          if ((v2647 - 4) > 0x1E)
          {
            if ((v2647 - 3) >= 0xFFFFFFFE) {
              v3344 = v3761;
            }
            else {
              v3344 = 0;
            }
            if ((v2647 - 3) >= 0xFFFFFFFE)
            {
              unint64_t v2649 = (unint64_t)(v3344 + 8);
LABEL_3339:
              v3343 = &v3761;
              goto LABEL_3340;
            }
LABEL_3341:
            if (v2647 == 3) {
              *((void *)v2646 + 1) = 0;
            }
          }
          else if ((v3761[1] & 0x7F) == 2 || *((_DWORD *)v3761 + 3))
          {
            uint64_t v2651 = *((void *)v3761 + 2);
            if ((v2651 & 4) != 0)
            {
              unint64_t v2649 = v2651 & 0xFFFFFFFFFFFFFFF8;
              if (v2649) {
                goto LABEL_3339;
              }
            }
          }
LABEL_3343:
          v3345 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v3346 = *((void *)v3345 + 104);
          if (v3346) {
            __int16 v3347 = *(_WORD *)(v3346 + 8);
          }
          else {
            __int16 v3347 = 0;
          }
          uint64_t v503 = sub_1CD7F3564(v3345, (const char *)0xCB, (uint64_t)&v3789, (llvm *)0xA, 0, (uint64_t)v2643, v2645, v3347);
          uint64_t v518 = v3348;
          uint64_t v3349 = *(void *)(a3 + 16);
          v3350 = sub_1CD7ECDC4(v3349, (uint64_t)&v3789, 10, 0, 0, 0.0625);
          uint64_t v3352 = *(void *)(v3349 + 832);
          if (v3352) {
            LOWORD(v3352) = *(_WORD *)(v3352 + 8);
          }
          uint64_t v3652 = v3351;
          __int16 v3657 = v3352;
          uint64_t v3647 = (uint64_t)v3350;
          uint64_t v522 = v3349;
          uint64_t v523 = 98;
          uint64_t v524 = 10;
          goto LABEL_518;
        case 2000:
        case 2002:
          if (v34 == 2000) {
            unsigned int v2642 = 4;
          }
          else {
            unsigned int v2642 = 6;
          }
          v3763 = v3789;
          if (v3789)
          {
            llvm::MetadataTracking::track((uint64_t)&v3763, v3789, 2);
            int v12 = v3790;
          }
          int v3764 = v12;
          v2643 = sub_1CB8DA6DC(v2642, (const llvm::APInt *)&v3763, *(void *)(a3 + 16));
          v2645 = v2644;
          v2646 = v3763;
          if (!v3763) {
            goto LABEL_3343;
          }
          int v2647 = *v3763;
          if ((v2647 - 4) > 0x1E)
          {
            if ((v2647 - 3) >= 0xFFFFFFFE) {
              v3342 = v3763;
            }
            else {
              v3342 = 0;
            }
            if ((v2647 - 3) < 0xFFFFFFFE) {
              goto LABEL_3341;
            }
            unint64_t v2649 = (unint64_t)(v3342 + 8);
          }
          else
          {
            if ((v3763[1] & 0x7F) != 2 && !*((_DWORD *)v3763 + 3)) {
              goto LABEL_3343;
            }
            uint64_t v2648 = *((void *)v3763 + 2);
            if ((v2648 & 4) == 0) {
              goto LABEL_3343;
            }
            unint64_t v2649 = v2648 & 0xFFFFFFFFFFFFFFF8;
            if (!v2649) {
              goto LABEL_3343;
            }
          }
          v3343 = &v3763;
LABEL_3340:
          v3793[0] = v3343;
          sub_1CC5FA668(v2649 + 16, v3793);
          goto LABEL_3343;
        case 2009:
          uint64_t v1628 = v31[5];
          int v1629 = *(unsigned __int16 *)(v1628 + 24);
          if (v1629 != 35 && v1629 != 11) {
            goto LABEL_3081;
          }
          uint64_t v1631 = *(void *)(a3 + 16);
          llvm::APInt::reverseBits((unsigned int *)(*(void *)(v1628 + 80) + 24), (llvm::APInt *)v3793);
          *(void *)&long long v3791 = sub_1CD7EBB14(v1631, (llvm::LLVMContext *)v3793, (const llvm::APInt *)&v3789, 5, 0, 0, 0);
          *((void *)&v3791 + 1) = v1632;
          if (LODWORD(v3793[1]) < 0x41) {
            goto LABEL_3082;
          }
          __int16 v545 = v3793[0];
          if (!v3793[0]) {
            goto LABEL_3082;
          }
          goto LABEL_547;
        case 2015:
          if (!*(unsigned char *)(*(void *)(a1 + 184296) + 280)) {
            goto LABEL_3774;
          }
          uint64_t v1633 = *(void *)(a3 + 16);
          v1634 = sub_1CB8DA6A4;
LABEL_1826:
          *(void *)&long long v3791 = sub_1CB8DA494(v1633, v8, v1634);
          *((void *)&v3791 + 1) = v1645;
          if (!((unint64_t)v3791 | v1645)) {
            goto LABEL_3081;
          }
          goto LABEL_3082;
        case 2016:
          if (*(unsigned char *)(*(void *)(a1 + 184296) + 281))
          {
            uint64_t v29 = (uint64_t)sub_1CB8DA494(*(void *)(a3 + 16), v8, sub_1CB8DA6A4);
            if (v29 | v30) {
              goto LABEL_2210;
            }
            v1652 = *(void **)(v8 + 64);
            v3793[0] = v1652;
            if (v1652) {
              llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1652, 2);
            }
            LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
            uint64_t v1653 = *(void *)(v8 + 32);
            v1654 = *(uint64_t **)(v1653 + 40);
            unint64_t v1655 = *(void *)(v1653 + 48);
            uint64_t v1656 = **(unsigned __int8 **)(v8 + 40);
            if (v1656 == 9)
            {
              v1657 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v1658 = *((void *)v1657 + 104);
              if (v1658) {
                __int16 v1659 = *(_WORD *)(v1658 + 8);
              }
              else {
                __int16 v1659 = 0;
              }
              v1654 = sub_1CD7F3564(v1657, (const char *)0xD7, (uint64_t)v3793, (llvm *)0xA, 0, (uint64_t)v1654, (void *)v1655, v1659);
              unint64_t v1655 = v1655 & 0xFFFFFFFF00000000 | v3376;
            }
            v3377 = *(llvm::APFloatBase **)(a3 + 16);
            uint64_t v3378 = *((void *)v3377 + 104);
            if (v3378) {
              __int16 v3379 = *(_WORD *)(v3378 + 8);
            }
            else {
              __int16 v3379 = 0;
            }
            v3380 = sub_1CD7F3564(v3377, (const char *)0x1A9, (uint64_t)v3793, (llvm *)0xA, 0, (uint64_t)v1654, (void *)v1655, v3379);
            uint64_t v3382 = v3381;
            uint64_t v3383 = *(void *)(a3 + 16);
            v3385 = sub_1CD7EBF14(v3383, 2017, (const llvm::APInt *)v3793, (llvm *)5, 0, 0, 0);
            uint64_t v3387 = *(void *)(v3383 + 832);
            if (v3387) {
              LOWORD(v3387) = *(_WORD *)(v3387 + 8);
            }
            v3388 = sub_1CCFDED5C(v3383, 46, (const llvm::APInt *)v3793, (llvm *)0xA, 0, (uint64_t)v3385, v3384, v3386, (uint64_t)v3380, v3382, v3387);
            uint64_t v3391 = *(void *)(a3 + 16);
            uint64_t v3392 = *(void *)(v3391 + 832);
            if (v3392) {
              LOWORD(v3392) = *(_WORD *)(v3392 + 8);
            }
            v3393 = sub_1CCFDED5C(v3391, 98, (const llvm::APInt *)v3793, (llvm *)0xA, 0, (uint64_t)v3380, v3382, v3390, (uint64_t)v3388, v3389, v3392);
            *(void *)&long long v3791 = v3393;
            *((void *)&v3791 + 1) = v3394;
            if (v1656 == 9)
            {
              uint64_t v3395 = (uint64_t)v3393;
              uint64_t v3396 = v3394;
              uint64_t v3397 = *(void *)(a3 + 16);
              v3398 = sub_1CD7EBF14(v3397, 0, (const llvm::APInt *)v3793, (llvm *)5, 0, 0, 0);
              uint64_t v3401 = *(void *)(v3397 + 832);
              if (v3401) {
                LOWORD(v3401) = *(_WORD *)(v3401 + 8);
              }
              *(void *)&long long v3791 = sub_1CCFDED5C(v3397, 212, (const llvm::APInt *)v3793, (llvm *)9, 0, v3395, v3396, v3400, (uint64_t)v3398, v3399, v3401);
              DWORD2(v3791) = v3402;
            }
            goto LABEL_1916;
          }
LABEL_3774:
          v3631 = "Invalid sin intrinsic for architecture!";
          goto LABEL_3748;
        default:
          switch((int)v34)
          {
            case 2093:
            case 2095:
              uint64_t v1165 = v31[10];
              int v1166 = *(unsigned __int16 *)(v1165 + 24);
              if (v1166 != 35 && v1166 != 11) {
                uint64_t v1165 = 0;
              }
              uint64_t v1168 = v31[5];
              if (*(_WORD *)(v1168 + 24) == 153) {
                uint64_t v1169 = v1168;
              }
              else {
                uint64_t v1169 = 0;
              }
              if (!v1165
                || !v1169
                || *(unsigned char *)(*(void *)(**(void **)(v1169 + 32) + 40)
                            + 16 * *(unsigned int *)(*(void *)(v1169 + 32) + 8)) != 38)
              {
                goto LABEL_3081;
              }
              uint64_t v1170 = *(void *)(v1165 + 80);
              v1171 = (unsigned int *)(v1170 + 24);
              if (*(_DWORD *)(v1170 + 32) >= 0x41u) {
                v1171 = *(unsigned int **)v1171;
              }
              uint64_t v1172 = *(unsigned int *)(*(void *)(v1169 + 80) + 4 * *v1171);
              if (v1172 > 1) {
                goto LABEL_3081;
              }
              break;
            case 2094:
            case 2096:
              uint64_t v1439 = v31[10];
              int v1440 = *(unsigned __int16 *)(v1439 + 24);
              if (v1440 != 35 && v1440 != 11) {
                uint64_t v1439 = 0;
              }
              uint64_t v1442 = v31[5];
              if (*(_WORD *)(v1442 + 24) == 153) {
                uint64_t v1169 = v1442;
              }
              else {
                uint64_t v1169 = 0;
              }
              if (!v1439
                || !v1169
                || *(unsigned char *)(*(void *)(**(void **)(v1169 + 32) + 40)
                            + 16 * *(unsigned int *)(*(void *)(v1169 + 32) + 8)) != 28)
              {
                goto LABEL_3081;
              }
              uint64_t v1443 = *(void *)(v1439 + 80);
              v1444 = (unsigned int *)(v1443 + 24);
              if (*(_DWORD *)(v1443 + 32) >= 0x41u) {
                v1444 = *(unsigned int **)v1444;
              }
              uint64_t v1172 = *(unsigned int *)(*(void *)(v1169 + 80) + 4 * *v1444);
              if (v1172 > 3) {
                goto LABEL_3081;
              }
              break;
            default:
              if (v34 != 1281) {
                goto LABEL_3081;
              }
              uint64_t v1926 = v8;
              v1927 = *(void **)(v8 + 64);
              v3793[0] = v1927;
              if (v1927)
              {
                llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v1927, 2);
                int v12 = *(_DWORD *)(v8 + 60);
                int v31 = *(uint64_t **)(v8 + 32);
              }
              LODWORD(v3793[1]) = v12;
              v1929 = sub_1CD3DC75C(a1, v31[5], *(llvm::APFloatBase **)(a3 + 16));
              v1930 = *(llvm::APFloatBase **)(a3 + 16);
              uint64_t v1931 = *((void *)v1930 + 104);
              if (v1931) {
                __int16 v1932 = *(_WORD *)(v1931 + 8);
              }
              else {
                __int16 v1932 = 0;
              }
              v3143 = sub_1CD7F3564(v1930, (const char *)0xC9, (uint64_t)v3793, (llvm *)5, 0, (uint64_t)v1929, v1928, v1932);
              uint64_t v3145 = v3159;
              uint64_t v3146 = a3;
              uint64_t v3147 = *(void *)(a3 + 16);
              uint64_t v3148 = v3147;
              uint64_t v3149 = 8;
              goto LABEL_3132;
          }
          v1445 = sub_1CD7EBF14(*(void *)(a3 + 16), v1172, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          __int16 v1448 = 0;
          v1449 = *(void **)(a3 + 16);
          v1451 = *(uint64_t **)(v8 + 32);
          uint64_t v1450 = *(void *)(v8 + 40);
          v1452 = *(llvm **)v1450;
          uint64_t v1453 = *(void *)(v1450 + 8);
          uint64_t v1454 = *v1451;
          uint64_t v1455 = v1451[1];
          v1456 = *(uint64_t **)(v1169 + 32);
          uint64_t v1457 = *v1456;
          uint64_t v1458 = v1456[1];
          uint64_t v1459 = v1449[104];
          if (v1459) {
            __int16 v1448 = *(_WORD *)(v1459 + 8);
          }
          uint64_t v29 = (uint64_t)sub_1CD7F5D38(v1449, (const char *)0x2E, (const llvm::APInt *)&v3789, v1452, v1453, v1454, v1455, v1447, v1457, v1458, (uint64_t)v1445, v1446, SHIDWORD(v1446), v1448);
          goto LABEL_2210;
      }
    case '/':
      v317 = *(void **)(v8 + 32);
      uint64_t v318 = *(void *)(v317[5] + 80);
      uint64_t v319 = (unsigned int *)(v318 + 24);
      if (*(_DWORD *)(v318 + 32) >= 0x41u) {
        uint64_t v319 = *(unsigned int **)v319;
      }
      uint64_t v320 = *v319;
      int v321 = (void **)v3822;
      *(void *)&long long v3821 = v3822;
      *((void *)&v3821 + 1) = 0x100000000;
      if ((v320 - 1282) < 0x190)
      {
        if (*(unsigned char *)(*(void *)(a1 + 184296) + 281))
        {
          llvm::GPUSDISel::ExpandIntrinsicSample(v8, *(llvm::APFloatBase **)(a3 + 16), v320, &v3821, 2, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB8C42A4, (void (*)(_OWORD *, uint64_t, llvm::APFloatBase *, void **, uint64_t (*)(void)))sub_1CB8D7124, 1, 33);
          switch(DWORD2(v3821))
          {
            case 0:
              goto LABEL_1058;
            case 1:
              goto LABEL_694;
            case 2:
              goto LABEL_2050;
            case 3:
              int v322 = *(void **)(a3 + 16);
              uint64_t v323 = (uint64_t *)(*(void *)(*(void *)v3821 + 40) + 16 * *(unsigned int *)(v3821 + 8));
              uint64_t v324 = *v323;
              uint64_t v325 = v323[1];
              __int16 v326 = (uint64_t *)(*(void *)(*(void *)(v3821 + 16) + 40) + 16 * *(unsigned int *)(v3821 + 24));
              uint64_t v327 = (uint64_t *)(*(void *)(*(void *)(v3821 + 32) + 40) + 16 * *(unsigned int *)(v3821 + 40));
              uint64_t v328 = sub_1CD7FAB44((uint64_t)v322, v324, v325, *v326, v326[1], *v327, v327[1]);
              int v331 = sub_1CD7FFB94(v322, (const char *)0x37, (const llvm::APInt *)&v3789, v328, v329, *(void *)v3821, *(void *)(v3821 + 8), v330, *(void *)(v3821 + 16), *(_OWORD *)(v3821 + 24), *(void *)(v3821 + 32), *(void *)(v3821 + 40));
              goto LABEL_2051;
            default:
              goto LABEL_3747;
          }
        }
        goto LABEL_3081;
      }
      break;
    case '0':
      uint64_t v366 = *(void *)(v8 + 32);
      uint64_t v367 = *(void *)(*(void *)(v366 + 40) + 80);
      v368 = (void *)(v367 + 24);
      if (*(_DWORD *)(v367 + 32) >= 0x41u) {
        v368 = (void *)*v368;
      }
      int v369 = *(_DWORD *)v368;
      switch(*(_DWORD *)v368)
      {
        case 0x724:
          uint64_t v733 = *(void *)(a3 + 16);
          int v734 = *(unsigned __int8 *)(*(void *)(a1 + 184296) + 281);
          uint64_t v735 = v8;
          int v736 = 0;
          goto LABEL_779;
        case 0x725:
          uint64_t v733 = *(void *)(a3 + 16);
          int v734 = *(unsigned __int8 *)(*(void *)(a1 + 184296) + 281);
          uint64_t v735 = v8;
          int v736 = 1;
LABEL_779:
          uint64_t v29 = (uint64_t)sub_1CB8D7788(v733, v735, v736, v734);
          goto LABEL_2210;
        case 0x726:
        case 0x727:
        case 0x728:
        case 0x729:
        case 0x72A:
        case 0x72B:
        case 0x72E:
        case 0x72F:
        case 0x730:
        case 0x731:
        case 0x732:
        case 0x733:
        case 0x734:
        case 0x735:
        case 0x736:
        case 0x737:
        case 0x738:
        case 0x739:
        case 0x73A:
        case 0x73B:
        case 0x73C:
        case 0x73D:
        case 0x73E:
        case 0x73F:
        case 0x740:
        case 0x741:
        case 0x743:
          goto LABEL_3081;
        case 0x72C:
          unsigned int v1529 = sub_1CB8C4588(*(void *)(v366 + 80), *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344));
          v3793[0] = sub_1CD7ED9FC(*(void *)(a3 + 16), 64, (llvm *)5, 0, v1529 >> 1, 12);
          LODWORD(v3793[1]) = v1530;
          v3793[2] = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          *(void *)&long long v3794 = v1531;
          *((void *)&v3794 + 1) = sub_1CD7EEB94(*(void *)(a3 + 16), 0, (llvm *)5, 0);
          v3795 = v1532;
          uint64_t v1533 = *(void *)(v8 + 32);
          int v1534 = *(_DWORD *)(v1533 + 8);
          v3796 = *(const char **)v1533;
          LODWORD(v3797) = v1534;
          uint64_t v1535 = *(void *)(*(void *)(v1533 + 120) + 80);
          v1536 = (void *)(v1535 + 24);
          if (*(_DWORD *)(v1535 + 32) >= 0x41u) {
            v1536 = (void *)*v1536;
          }
          uint64_t v1537 = *(void *)(a3 + 16);
          if (*v1536) {
            int v1538 = 814;
          }
          else {
            int v1538 = 815;
          }
          uint64_t v1539 = 4;
          goto LABEL_2093;
        case 0x72D:
          v1540 = *(uint64_t **)(v366 + 80);
          int v1541 = *((unsigned __int16 *)v1540 + 12);
          BOOL v1543 = v1541 == 11 || v1541 == 35;
          uint64_t v1544 = *(void *)(*(void *)(v366 + 160) + 80);
          v1545 = (void *)(v1544 + 24);
          if (*(_DWORD *)(v1544 + 32) >= 0x41u) {
            v1545 = (void *)*v1545;
          }
          uint64_t v1546 = *(void *)(*(void *)(v366 + 200) + 80);
          v1547 = (void *)(v1546 + 24);
          if (*(_DWORD *)(v1546 + 32) >= 0x41u) {
            v1547 = (void *)*v1547;
          }
          v1548 = (void *)*v1545;
          v1549 = (void *)*v1547;
          uint64_t v1550 = *(void *)(*(void *)(v366 + 240) + 80);
          v1551 = (void *)(v1550 + 24);
          if (*(_DWORD *)(v1550 + 32) >= 0x41u) {
            v1551 = (void *)*v1551;
          }
          unint64_t v1552 = (v1543 | (2 * ((v1548 & 7) != 2))) & 0xFFFFFFFFFFFFFFF3 | (8
                                                                                                  * (v1549 & 1)) | (4 * (*(_DWORD *)v1551 & 1));
          if (v1541 == 35 || v1541 == 11)
          {
            uint64_t v1553 = v1540[10];
            v1554 = (uint64_t *)(v1553 + 24);
            if (*(_DWORD *)(v1553 + 32) >= 0x41u) {
              v1554 = (uint64_t *)*v1554;
            }
            v1540 = sub_1CD7EBF14(*(void *)(a3 + 16), *v1554, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
            int v1556 = v1555;
            uint64_t v366 = *(void *)(v8 + 32);
          }
          else
          {
            int v1556 = *(_DWORD *)(v366 + 88);
          }
          unsigned int v1959 = sub_1CB8C4588(*(void *)(v366 + 120), *(void *)(*(void *)(*(void *)(a3 + 16) + 40) + 344));
          v1960 = sub_1CD7ED9FC(*(void *)(a3 + 16), 64, (llvm *)5, 0, v1959 >> 1, 24);
          v3793[0] = v1540;
          LODWORD(v3793[1]) = v1556;
          v3793[2] = v1960;
          LODWORD(v3794) = v1961;
          *((void *)&v3794 + 1) = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          v3795 = v1962;
          v3796 = (const char *)sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          uint64_t v3797 = v1963;
          v3798 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          uint64_t v3799 = v1964;
          v3800 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          uint64_t v3801 = v1965;
          uint64_t v3802 = sub_1CD7EEB94(*(void *)(a3 + 16), 0, (llvm *)5, 0);
          uint64_t v3803 = v1966;
          uint64_t v1967 = *(void *)(v8 + 32);
          uint64_t v1968 = *(void *)v1967;
          LODWORD(v3805) = *(_DWORD *)(v1967 + 8);
          uint64_t v3804 = v1968;
          uint64_t v1537 = *(void *)(a3 + 16);
          int v1538 = dword_1CD935FF0[v1552];
          uint64_t v1539 = 8;
LABEL_2093:
          v1096 = sub_1CD801450(v1537, v1538, (uint64_t)&v3789, (llvm *)1, 0, (uint64_t *)v3793, v1539);
LABEL_2094:
          *(void *)&long long v3791 = v1096;
          goto LABEL_2095;
        case 0x742:
          uint64_t v29 = (uint64_t)sub_1CD3DDEA0(a1, v8, a3);
          goto LABEL_2210;
        case 0x744:
        case 0x745:
        case 0x746:
        case 0x747:
        case 0x748:
        case 0x749:
        case 0x74A:
        case 0x74B:
        case 0x74C:
        case 0x74D:
        case 0x74E:
        case 0x74F:
        case 0x750:
        case 0x751:
        case 0x752:
        case 0x753:
        case 0x754:
        case 0x755:
        case 0x756:
        case 0x757:
        case 0x758:
        case 0x759:
        case 0x75A:
        case 0x75B:
          sub_1CD3E5144((uint64_t)v3793, v369, *(void *)(a1 + 184296));
          uint64_t v29 = (uint64_t)sub_1CD3DF070((uint64_t)v3793, *(llvm::APFloatBase **)(a3 + 16), v8);
          goto LABEL_2210;
        default:
          int v706 = 0;
          int v707 = 11957;
          uint64_t v708 = 10;
          uint64_t v709 = 6;
          uint64_t v710 = 33;
          uint64_t v3735 = 1;
          switch(v369)
          {
            case 1971:
              break;
            case 1972:
              int v706 = 0;
              uint64_t v709 = 0;
              int v707 = 11959;
              uint64_t v708 = 9;
              uint64_t v711 = 1;
              goto LABEL_1848;
            case 1973:
              int v706 = 1;
              int v707 = 11961;
              uint64_t v708 = 10;
              uint64_t v709 = 27;
              uint64_t v710 = 33;
              uint64_t v1666 = 2;
              goto LABEL_1853;
            case 1974:
              int v706 = 1;
              int v707 = 11963;
              uint64_t v708 = 9;
              uint64_t v709 = 7;
              uint64_t v711 = 2;
LABEL_1848:
              uint64_t v3735 = v711;
              uint64_t v710 = 1;
              break;
            case 1975:
              int v706 = 1;
              int v707 = 11965;
              uint64_t v708 = 10;
              uint64_t v709 = 45;
              uint64_t v710 = 33;
              uint64_t v1666 = 3;
              goto LABEL_1853;
            case 1976:
              uint64_t v710 = 1;
              int v707 = 11967;
              uint64_t v708 = 9;
              uint64_t v709 = 17;
              uint64_t v1667 = 3;
              goto LABEL_1851;
            case 1977:
              int v706 = 1;
              int v707 = 11969;
              uint64_t v708 = 10;
              uint64_t v709 = 63;
              uint64_t v710 = 33;
              uint64_t v1666 = 4;
LABEL_1853:
              uint64_t v3735 = v1666;
              break;
            case 1978:
              uint64_t v710 = 1;
              int v707 = 11971;
              uint64_t v708 = 9;
              uint64_t v709 = 26;
              uint64_t v1667 = 4;
LABEL_1851:
              uint64_t v3735 = v1667;
              int v706 = 1;
              break;
            case 1979:
              uint64_t v29 = (uint64_t)sub_1CD3DE658(a1, v8, a3);
              goto LABEL_2210;
            default:
              goto LABEL_3081;
          }
          int v3711 = v707;
          uint64_t v1668 = *(void *)(*(void *)(v366 + 80) + 80);
          v1669 = (unsigned int *)(v1668 + 24);
          if (*(_DWORD *)(v1668 + 32) >= 0x41u) {
            v1669 = *(unsigned int **)v1669;
          }
          unint64_t v1670 = *(void *)(v366 + 128);
          uint64_t v1671 = *(void *)(*(void *)(v366 + 200) + 80);
          v1672 = (unsigned int *)(v1671 + 24);
          if (*(_DWORD *)(v1671 + 32) >= 0x41u) {
            v1672 = *(unsigned int **)v1672;
          }
          uint64_t v1673 = *(void *)(*(void *)(v366 + 240) + 80);
          v1674 = (unsigned int *)(v1673 + 24);
          if (*(_DWORD *)(v1673 + 32) >= 0x41u) {
            v1674 = *(unsigned int **)v1674;
          }
          int v3683 = v706;
          uint64_t v3674 = v709;
          v1675 = *(llvm::APFloatBase **)(a3 + 16);
          uint64_t v1676 = *((void *)v1675 + 104);
          if (v1676) {
            __int16 v1677 = *(_WORD *)(v1676 + 8);
          }
          else {
            __int16 v1677 = 0;
          }
          uint64_t v3686 = *v1669;
          uint64_t v1679 = *(void *)(v366 + 160);
          uint64_t v1678 = *(void *)(v366 + 168);
          uint64_t v3692 = *v1672;
          uint64_t v3700 = *v1674;
          v1680 = *(uint64_t **)(v366 + 280);
          uint64_t v1681 = *(void *)(v366 + 288);
          v1682 = sub_1CD7F3564(v1675, (const char *)0xC9, (uint64_t)&v3789, (llvm *)4, 0, *(void *)(v366 + 120), (void *)v1670, v1677);
          unint64_t v1684 = v1670 & 0xFFFFFFFF00000000 | v1683;
          uint64_t v1685 = *(void *)(a3 + 16);
          v1686 = sub_1CD7EBF14(v1685, 1, (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
          __int16 v1689 = 0;
          uint64_t v1690 = *(void *)(v1685 + 832);
          if (v1690) {
            __int16 v1689 = *(_WORD *)(v1690 + 8);
          }
          v3677 = sub_1CCFDED5C(v1685, 177, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v1682, v1684, v1688, (uint64_t)v1686, v1687, v1689);
          int v3680 = v1691;
          *(void *)&long long v3815 = &v3816;
          *((void *)&v3815 + 1) = 0x500000000;
          v1693 = sub_1CD7EBF14(*(void *)(a3 + 16), 7, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          if (DWORD2(v3815) >= HIDWORD(v3815)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1694 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
          *v1694 = v1693;
          v1694[1] = v1692;
          ++DWORD2(v3815);
          uint64_t v1695 = *(void *)(a3 + 16);
          v1696 = sub_1CD7EBF14(v1695, 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          __int16 v1699 = 0;
          uint64_t v1700 = *(void *)(v1695 + 832);
          if (v1700) {
            __int16 v1699 = *(_WORD *)(v1700 + 8);
          }
          v1702 = sub_1CCFDED5C(v1695, 148, (const llvm::APInt *)&v3789, (llvm *)4, 0, v1679, v1678, v1698, (uint64_t)v1696, v1697, v1699);
          if (DWORD2(v3815) >= HIDWORD(v3815)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1703 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
          *v1703 = v1702;
          v1703[1] = v1701;
          ++DWORD2(v3815);
          v1705 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          if (DWORD2(v3815) >= HIDWORD(v3815)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1706 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
          *v1706 = v1705;
          v1706[1] = v1704;
          ++DWORD2(v3815);
          uint64_t v1707 = *(void *)(a3 + 16);
          v1708 = sub_1CD7EBF14(v1707, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
          __int16 v1711 = 0;
          uint64_t v1712 = *(void *)(v1707 + 832);
          if (v1712) {
            __int16 v1711 = *(_WORD *)(v1712 + 8);
          }
          v1714 = sub_1CCFDED5C(v1707, 148, (const llvm::APInt *)&v3789, (llvm *)4, 0, v1679, v1678, v1710, (uint64_t)v1708, v1709, v1711);
          v1715 = (llvm *)v708;
          if (DWORD2(v3815) >= HIDWORD(v3815)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1716 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
          *v1716 = v1714;
          v1716[1] = v1713;
          ++DWORD2(v3815);
          v1718 = sub_1CD7EBF14(*(void *)(a3 + 16), 2, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          if (DWORD2(v3815) >= HIDWORD(v3815)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1719 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
          *v1719 = v1718;
          v1719[1] = v1717;
          ++DWORD2(v3815);
          v1720 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v3789, (llvm *)0xAE, 0, (uint64_t *)v3815, DWORD2(v3815));
          if (v3683)
          {
            v3793[0] = &v3793[2];
            v3793[1] = (void *)0x900000000;
            v1722 = sub_1CD7EBF14(*(void *)(a3 + 16), v3674, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
            if (LODWORD(v3793[1]) >= HIDWORD(v3793[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v1723 = 0;
            v1724 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
            *v1724 = v1722;
            v1724[1] = v1721;
            ++LODWORD(v3793[1]);
            do
            {
              uint64_t v1725 = *(void *)(a3 + 16);
              v1726 = sub_1CD7EBF14(v1725, v1723, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
              __int16 v1729 = 0;
              uint64_t v1730 = *(void *)(v1725 + 832);
              if (v1730) {
                __int16 v1729 = *(_WORD *)(v1730 + 8);
              }
              v1732 = sub_1CCFDED5C(v1725, 148, (const llvm::APInt *)&v3789, v1715, 0, (uint64_t)v1680, v1681, v1728, (uint64_t)v1726, v1727, v1729);
              if (LODWORD(v3793[1]) >= (unint64_t)HIDWORD(v3793[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1733 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
              *v1733 = v1732;
              v1733[1] = v1731;
              ++LODWORD(v3793[1]);
              v1735 = sub_1CD7EBF14(*(void *)(a3 + 16), v710 + v1723, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
              if (LODWORD(v3793[1]) >= (unint64_t)HIDWORD(v3793[1])) {
                llvm::SmallVectorBase<unsigned int>::grow_pod();
              }
              v1736 = (uint64_t **)((char *)v3793[0] + 16 * LODWORD(v3793[1]));
              *v1736 = v1735;
              v1736[1] = v1734;
              uint64_t v1737 = ++LODWORD(v3793[1]);
              ++v1723;
            }
            while (v3735 != v1723);
            v1680 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v3789, (llvm *)0xAE, 0, (uint64_t *)v3793[0], v1737);
            if (v3793[0] != &v3793[2]) {
              free(v3793[0]);
            }
            LODWORD(v1681) = 0;
          }
          v3793[0] = v1680;
          LODWORD(v3793[1]) = v1681;
          v3793[2] = v3677;
          LODWORD(v3794) = v3680;
          *((void *)&v3794 + 1) = v1720;
          LODWORD(v3795) = 0;
          v3796 = (const char *)sub_1CD7EBF14(*(void *)(a3 + 16), v3686, (const llvm::APInt *)&v3789, (llvm *)4, 0, 1, 0);
          uint64_t v3797 = v1738;
          v3798 = sub_1CD7EBF14(*(void *)(a3 + 16), v3692, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          uint64_t v3799 = v1739;
          v3800 = sub_1CD7EBF14(*(void *)(a3 + 16), v3700, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          uint64_t v3801 = v1740;
          uint64_t v3802 = (uint64_t)sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          uint64_t v3803 = v1741;
          uint64_t v3804 = (uint64_t)sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
          uint64_t v3805 = v1742;
          uint64_t v3806 = sub_1CD7EEB94(*(void *)(a3 + 16), 0, (llvm *)5, 0);
          uint64_t v3807 = v1743;
          v1744 = *(uint64_t **)(v8 + 32);
          uint64_t v1745 = *v1744;
          int v3809 = *((_DWORD *)v1744 + 2);
          uint64_t v3808 = v1745;
          *(void *)&long long v3791 = sub_1CD801450(*(void *)(a3 + 16), v3711, (uint64_t)&v3789, (llvm *)1, 0, (uint64_t *)v3793, 10);
          DWORD2(v3791) = 0;
          v989 = (void **)v3815;
LABEL_1889:
          if (v989 != (void **)&v3816) {
            goto LABEL_1061;
          }
          goto LABEL_3082;
      }
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
      goto LABEL_3081;
    case '8':
      v333 = *(_OWORD **)(v8 + 32);
      uint64_t v334 = *(void *)(v8 + 40);
      uint64_t v336 = *(llvm **)v334;
      uint64_t v335 = *(void *)(v334 + 8);
      long long v3815 = *v333;
      long long v3813 = *(_OWORD *)((char *)v333 + 40);
      if (*(_DWORD *)(a3 + 8))
      {
        if (*(_WORD *)(v3815 + 24) == 57)
        {
          uint64_t v337 = (char *)v333 + 40;
          *(_OWORD *)v3793 = v3815;
          DWORD2(v3815) = *((_DWORD *)v337 + 2);
          *(void *)&long long v3815 = *(void *)v337;
          *(void **)&long long v3813 = v3793[0];
          DWORD2(v3813) = v3793[1];
        }
        uint64_t v338 = (void *)v3813;
        int v339 = *(unsigned __int16 *)(v3813 + 24);
        if (v339 != 57) {
          goto LABEL_340;
        }
        uint64_t v340 = *(void *)(v3813 + 48);
        if (!v340) {
          goto LABEL_340;
        }
        int v341 = 1;
        do
        {
          if (*(_DWORD *)(v340 + 8) == DWORD2(v3813))
          {
            if (!v341) {
              goto LABEL_340;
            }
            --v341;
          }
          uint64_t v340 = *(void *)(v340 + 32);
        }
        while (v340);
        if (v341) {
          goto LABEL_340;
        }
        int v342 = *(uint64_t **)(v3813 + 32);
        uint64_t v343 = v342[5];
        if (*(_WORD *)(v343 + 24) != 58) {
          goto LABEL_340;
        }
        uint64_t v344 = *(void *)(v343 + 48);
        if (!v344) {
          goto LABEL_340;
        }
        int v345 = 1;
        uint64_t v346 = v342[6];
        do
        {
          if (*(_DWORD *)(v344 + 8) == v346)
          {
            if (!v345) {
              goto LABEL_340;
            }
            --v345;
          }
          uint64_t v344 = *(void *)(v344 + 32);
        }
        while (v344);
        if (!v345)
        {
          uint64_t v1969 = *(void *)(a3 + 16);
          uint64_t v1970 = *(void *)(v1969 + 832);
          if (v1970) {
            LOWORD(v1970) = *(_WORD *)(v1970 + 8);
          }
          v1971 = sub_1CCFDED5C(v1969, 57, (const llvm::APInt *)&v3789, v336, v335, v343, v346, a8, *v342, v342[1], v1970);
          uint64_t v1974 = *(void *)(a3 + 16);
          uint64_t v1975 = *(void *)(v1974 + 832);
          if (v1975) {
            LOWORD(v1975) = *(_WORD *)(v1975 + 8);
          }
          v364 = sub_1CCFDED5C(v1974, 57, (const llvm::APInt *)&v3789, v336, v335, v3815, *((uint64_t *)&v3815 + 1), v1973, (uint64_t)v1971, v1972, v1975);
        }
        else
        {
LABEL_340:
          if (*(_WORD *)(v3815 + 24) == 56)
          {
            uint64_t v347 = *(void *)(v3815 + 48);
            if (v347)
            {
              int v348 = 1;
              do
              {
                if (*(_DWORD *)(v347 + 8) == DWORD2(v3815))
                {
                  if (!v348) {
                    goto LABEL_351;
                  }
                  --v348;
                }
                uint64_t v347 = *(void *)(v347 + 32);
              }
              while (v347);
              if (!v348)
              {
                uint64_t v349 = *(void **)(v3815 + 32);
                if (*(_WORD *)(*v349 + 24) == 58 && *(_WORD *)(v349[5] + 24) == 58)
                {
                  *(_OWORD *)v3793 = v3815;
                  DWORD2(v3815) = DWORD2(v3813);
                  *(void *)&long long v3815 = v3813;
                  uint64_t v338 = v3793[0];
                  *(void **)&long long v3813 = v3793[0];
                  DWORD2(v3813) = v3793[1];
                  int v339 = *((unsigned __int16 *)v3793[0] + 12);
                }
              }
            }
          }
LABEL_351:
          if (v339 != 56) {
            goto LABEL_3081;
          }
          uint64_t v350 = v338[6];
          if (!v350) {
            goto LABEL_3081;
          }
          int v351 = 1;
          do
          {
            if (*(_DWORD *)(v350 + 8) == DWORD2(v3813))
            {
              if (!v351) {
                goto LABEL_3081;
              }
              --v351;
            }
            uint64_t v350 = *(void *)(v350 + 32);
          }
          while (v350);
          if (v351) {
            goto LABEL_3081;
          }
          uint64_t v352 = (uint64_t *)v338[4];
          uint64_t v353 = *v352;
          if (*(_WORD *)(*v352 + 24) != 58) {
            goto LABEL_3081;
          }
          uint64_t v354 = v352[5];
          if (*(_WORD *)(v354 + 24) != 58) {
            goto LABEL_3081;
          }
          uint64_t v355 = v352[1];
          uint64_t v356 = v352[6];
          uint64_t v357 = *(void *)(a3 + 16);
          uint64_t v358 = *(void *)(v357 + 832);
          if (v358) {
            LOWORD(v358) = *(_WORD *)(v358 + 8);
          }
          int v360 = sub_1CCFDED5C(v357, 56, (const llvm::APInt *)&v3789, v336, v335, v3815, *((uint64_t *)&v3815 + 1), a8, v353, v355, v358);
          uint64_t v362 = *(void *)(a3 + 16);
          uint64_t v363 = *(void *)(v362 + 832);
          if (v363) {
            LOWORD(v363) = *(_WORD *)(v363 + 8);
          }
          v364 = sub_1CCFDED5C(v362, 56, (const llvm::APInt *)&v3789, v336, v335, (uint64_t)v360, v359, v361, v354, v356, v363);
        }
        v1976 = *(uint64_t **)a3;
        v3793[0] = v364;
        v3793[1] = v365;
        uint64_t v29 = sub_1CCEF083C(v1976, v8, (uint64_t *)v3793, 1, 0);
        goto LABEL_2210;
      }
      uint64_t v642 = a1 + 184296;
      if (*(unsigned char *)(*(void *)(a1 + 184296) + 280)) {
        BOOL v643 = v336 == 6;
      }
      else {
        BOOL v643 = 0;
      }
      if (!v643) {
        goto LABEL_3081;
      }
      v644 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      uint64_t v646 = v645;
      uint64_t v647 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      uint64_t v649 = v648;
      v3793[0] = 0;
      sub_1CB8D67B0((unsigned int *)&v3815, (unsigned int **)v3793);
      sub_1CB8D67B0((unsigned int *)&v3813, (unsigned int **)v3793);
      unint64_t v651 = (long long *)v3793[0];
      if (!v3793[0])
      {
        if (*(_WORD *)(v3815 + 24) == 199
          && (v2401 = *(unsigned int **)(v3815 + 32),
              v2402 = *(uint64_t **)v2401,
              uint64_t v2403 = v2401[2],
              *(unsigned char *)(*(void *)(*(void *)v2401 + 40) + 16 * v2403) == 5))
        {
          v3747 = v644;
          unsigned int v2404 = v646;
        }
        else
        {
          uint64_t v2652 = *(void *)(a3 + 16);
          uint64_t v2653 = *(void *)(v2652 + 832);
          if (v2653) {
            LOWORD(v2653) = *(_WORD *)(v2653 + 8);
          }
          v2402 = sub_1CCFDED5C(v2652, 53, (const llvm::APInt *)&v3789, (llvm *)5, 0, v3815, *((uint64_t *)&v3815 + 1), v650, (uint64_t)v644, v646, v2653);
          __int16 v2655 = 0;
          uint64_t v2403 = v2656;
          uint64_t v2657 = *(void *)(a3 + 16);
          uint64_t v2658 = *(void *)(v2657 + 832);
          if (v2658) {
            __int16 v2655 = *(_WORD *)(v2658 + 8);
          }
          v3747 = sub_1CCFDED5C(v2657, 53, (const llvm::APInt *)&v3789, (llvm *)5, 0, v3815, *((uint64_t *)&v3815 + 1), v2654, (uint64_t)v647, v649, v2655);
          unsigned int v2404 = v2659;
        }
        if (*(_WORD *)(v3813 + 24) != 199
          || (v2660 = *(unsigned int **)(v3813 + 32),
              v2661 = *(uint64_t **)v2660,
              uint64_t v2662 = v2660[2],
              *(unsigned char *)(*(void *)(*(void *)v2660 + 40) + 16 * v2662) != 5))
        {
          uint64_t v2663 = *(void *)(a3 + 16);
          uint64_t v2664 = *(void *)(v2663 + 832);
          if (v2664) {
            LOWORD(v2664) = *(_WORD *)(v2664 + 8);
          }
          v2661 = sub_1CCFDED5C(v2663, 53, (const llvm::APInt *)&v3789, (llvm *)5, 0, v3813, *((uint64_t *)&v3813 + 1), v650, (uint64_t)v644, v646, v2664);
          __int16 v2666 = 0;
          uint64_t v2662 = v2667;
          uint64_t v2668 = *(void *)(a3 + 16);
          uint64_t v2669 = *(void *)(v2668 + 832);
          if (v2669) {
            __int16 v2666 = *(_WORD *)(v2669 + 8);
          }
          v644 = sub_1CCFDED5C(v2668, 53, (const llvm::APInt *)&v3789, (llvm *)5, 0, v3813, *((uint64_t *)&v3813 + 1), v2665, (uint64_t)v647, v649, v2666);
          LODWORD(v646) = v2670;
        }
        uint64_t v2671 = *(void *)(a3 + 16);
        uint64_t v2672 = *(void *)(v2671 + 832);
        if (v2672) {
          LOWORD(v2672) = *(_WORD *)(v2672 + 8);
        }
        v3729 = sub_1CCFDED5C(v2671, 56, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v2402, v2403, v650, (uint64_t)v2661, v2662, v2672);
        uint64_t v2675 = v2674;
        __int16 v2676 = 0;
        uint64_t v2677 = *(void *)(a3 + 16);
        uint64_t v2678 = *(void *)(v2677 + 832);
        if (v2678) {
          __int16 v2676 = *(_WORD *)(v2678 + 8);
        }
        v2680 = sub_1CCFDED5C(v2677, 427, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v2402, v2403, v2673, (uint64_t)v2661, v2662, v2676);
        unint64_t v2681 = (unint64_t)v2679;
        __int16 v2682 = 0;
        v2683 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v2684 = *((void *)v2683 + 104);
        if (v2684) {
          __int16 v2682 = *(_WORD *)(v2684 + 8);
        }
        uint64_t v2685 = v646;
        v2686 = sub_1CD7F3564(v2683, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, (uint64_t)v2680, v2679, v2682);
        __int16 v2688 = 0;
        unint64_t v2689 = v2681 & 0xFFFFFFFF00000000;
        unint64_t v2691 = v2681 & 0xFFFFFFFF00000000 | v2690;
        uint64_t v2692 = *(void *)(a3 + 16);
        uint64_t v2693 = *(void *)(v2692 + 832);
        if (v2693) {
          __int16 v2688 = *(_WORD *)(v2693 + 8);
        }
        v2695 = sub_1CCFDED5C(v2692, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2686, v2691, v2687, (uint64_t)v647, v649, v2688);
        __int16 v2696 = 0;
        v2697 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v2698 = *((void *)v2697 + 104);
        if (v2698) {
          __int16 v2696 = *(_WORD *)(v2698 + 8);
        }
        v2700 = sub_1CD7F3564(v2697, (const char *)0xC7, (uint64_t)&v3789, (llvm *)5, 0, (uint64_t)v2695, (void *)(v2694 | v2689), v2696);
        uint64_t v2702 = v2701 | v2689;
        uint64_t v2703 = *(void *)(a3 + 16);
        uint64_t v2704 = *(void *)(v2703 + 832);
        if (v2704) {
          LOWORD(v2704) = *(_WORD *)(v2704 + 8);
        }
        v2706 = sub_1CCFDED5C(v2703, 56, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v3747, v2404, v2699, (uint64_t)v644, v2685, v2704);
        uint64_t v2708 = v2705;
        uint64_t v2709 = *(void *)(a3 + 16);
        uint64_t v2710 = *(void *)(v2709 + 832);
        if (v2710) {
          LOWORD(v2710) = *(_WORD *)(v2710 + 8);
        }
        v2711 = sub_1CCFDED5C(v2709, 56, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v2706, v2705, v2707, (uint64_t)v2700, v2702, v2710);
        unint64_t v2714 = v2708 & 0xFFFFFFFF00000000 | v2713;
        uint64_t v2715 = *(void *)(a3 + 16);
        uint64_t v2716 = *(void *)(v2715 + 832);
        if (v2716) {
          LOWORD(v2716) = *(_WORD *)(v2716 + 8);
        }
        uint64_t v29 = (uint64_t)sub_1CCFDED5C(v2715, 54, (const llvm::APInt *)&v3789, (llvm *)6, 0, (uint64_t)v3729, v2675, v2712, (uint64_t)v2711, v2714, v2716);
        goto LABEL_2210;
      }
      if (*(unsigned char *)(*(void *)v642 + 281))
      {
        uint64_t v30 = 0;
        uint64_t v29 = 0;
        goto LABEL_2210;
      }
      v2428 = (uint64_t *)&v3813;
      if (v3793[0] == &v3813) {
        v2428 = (uint64_t *)&v3815;
      }
      v3675 = v2428;
      v3748 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      uint64_t v2430 = v2429;
      v2431 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      uint64_t v2433 = v2432;
      __int16 v2434 = 0;
      v2435 = *(void **)(*(void *)v651 + 32);
      v2436 = *(uint64_t **)(*v2435 + 32);
      uint64_t v2437 = *v2436;
      v2438 = (void *)v2436[1];
      v2439 = *(uint64_t **)(v2435[5] + 32);
      v2440 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2441 = *((void *)v2440 + 104);
      if (v2441) {
        __int16 v2434 = *(_WORD *)(v2441 + 8);
      }
      uint64_t v2442 = *v2439;
      v2443 = (void *)v2439[1];
      v2445 = sub_1CD7F3564(v2440, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, v2437, v2438, v2434);
      __int16 v2447 = 0;
      uint64_t v2448 = *(void *)(a3 + 16);
      uint64_t v2449 = *(void *)(v2448 + 832);
      if (v2449) {
        __int16 v2447 = *(_WORD *)(v2449 + 8);
      }
      v2450 = sub_1CCFDED5C(v2448, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2445, v2444, v2446, (uint64_t)v3748, v2430, v2447);
      v3671 = v2451;
      uint64_t v3672 = (uint64_t)v2450;
      __int16 v2452 = 0;
      v2453 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2454 = *((void *)v2453 + 104);
      if (v2454) {
        __int16 v2452 = *(_WORD *)(v2454 + 8);
      }
      v2456 = sub_1CD7F3564(v2453, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, v2437, v2438, v2452);
      __int16 v2458 = 0;
      uint64_t v2459 = *(void *)(a3 + 16);
      uint64_t v2460 = *(void *)(v2459 + 832);
      if (v2460) {
        __int16 v2458 = *(_WORD *)(v2460 + 8);
      }
      v2461 = sub_1CCFDED5C(v2459, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2456, v2455, v2457, (uint64_t)v2431, v2433, v2458);
      v3684 = v2462;
      uint64_t v3689 = (uint64_t)v2461;
      __int16 v2463 = 0;
      v2464 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2465 = *((void *)v2464 + 104);
      if (v2465) {
        __int16 v2463 = *(_WORD *)(v2465 + 8);
      }
      v2467 = sub_1CD7F3564(v2464, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, v2442, v2443, v2463);
      __int16 v2469 = 0;
      uint64_t v2470 = *(void *)(a3 + 16);
      uint64_t v2471 = *(void *)(v2470 + 832);
      if (v2471) {
        __int16 v2469 = *(_WORD *)(v2471 + 8);
      }
      v2472 = sub_1CCFDED5C(v2470, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2467, v2466, v2468, (uint64_t)v3748, v2430, v2469);
      v2474 = v2473;
      __int16 v2475 = 0;
      v2476 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2477 = *((void *)v2476 + 104);
      if (v2477) {
        __int16 v2475 = *(_WORD *)(v2477 + 8);
      }
      v2479 = sub_1CD7F3564(v2476, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, v2442, v2443, v2475);
      __int16 v2481 = 0;
      uint64_t v2482 = *(void *)(a3 + 16);
      uint64_t v2483 = *(void *)(v2482 + 832);
      if (v2483) {
        __int16 v2481 = *(_WORD *)(v2483 + 8);
      }
      v2484 = sub_1CCFDED5C(v2482, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2479, v2478, v2480, (uint64_t)v2431, v2433, v2481);
      v2486 = v2485;
      __int16 v2487 = 0;
      v2488 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2489 = *((void *)v2488 + 104);
      if (v2489) {
        __int16 v2487 = *(_WORD *)(v2489 + 8);
      }
      v2490 = sub_1CD7F3564(v2488, (const char *)0xC7, (uint64_t)&v3789, (llvm *)5, 0, v3672, v3671, v2487);
      uint64_t v2492 = v2491;
      __int16 v2493 = 0;
      v2494 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2495 = *((void *)v2494 + 104);
      if (v2495) {
        __int16 v2493 = *(_WORD *)(v2495 + 8);
      }
      v2496 = sub_1CD7F3564(v2494, (const char *)0xC7, (uint64_t)&v3789, (llvm *)5, 0, (uint64_t)v2472, v2474, v2493);
      uint64_t v3696 = v2497;
      uint64_t v3704 = (uint64_t)v2496;
      __int16 v2498 = 0;
      v2499 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2500 = *((void *)v2499 + 104);
      if (v2500) {
        __int16 v2498 = *(_WORD *)(v2500 + 8);
      }
      v2501 = sub_1CD7F3564(v2499, (const char *)0xC7, (uint64_t)&v3789, (llvm *)5, 0, v3689, v3684, v2498);
      uint64_t v3716 = v2502;
      uint64_t v3728 = (uint64_t)v2501;
      __int16 v2503 = 0;
      v2504 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2505 = *((void *)v2504 + 104);
      if (v2505) {
        __int16 v2503 = *(_WORD *)(v2505 + 8);
      }
      v2506 = sub_1CD7F3564(v2504, (const char *)0xC7, (uint64_t)&v3789, (llvm *)5, 0, (uint64_t)v2484, v2486, v2503);
      uint64_t v3678 = v2508;
      uint64_t v3681 = (uint64_t)v2506;
      __int16 v2509 = 0;
      uint64_t v2510 = *(void *)(a3 + 16);
      if (v651 == &v3813) {
        v2511 = &v3815;
      }
      else {
        v2511 = &v3813;
      }
      uint64_t v2512 = *(void *)(v2510 + 832);
      if (v2512) {
        __int16 v2509 = *(_WORD *)(v2512 + 8);
      }
      v2514 = sub_1CCFDED5C(v2510, 53, (const llvm::APInt *)&v3789, (llvm *)5, 0, *v3675, *((void *)v2511 + 1), v2507, (uint64_t)v3748, v2430, v2509);
      __int16 v2515 = 0;
      unint64_t v2517 = v2516;
      uint64_t v2518 = *(void *)(a3 + 16);
      uint64_t v2519 = *(void *)(v2518 + 832);
      if (v2519) {
        __int16 v2515 = *(_WORD *)(v2519 + 8);
      }
      v2521 = sub_1CCFDED5C(v2518, 53, (const llvm::APInt *)&v3789, (llvm *)5, 0, *v3675, *((void *)v2511 + 1), v2513, (uint64_t)v2431, v2433, v2515);
      unsigned int v3676 = v2522;
      __int16 v2523 = 0;
      uint64_t v2524 = *(void *)(a3 + 16);
      uint64_t v2525 = *(void *)(v2524 + 832);
      if (v2525) {
        __int16 v2523 = *(_WORD *)(v2525 + 8);
      }
      v2526 = sub_1CCFDED5C(v2524, 58, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2472, (uint64_t)v2474, v2520, v3672, (uint64_t)v3671, v2523);
      uint64_t v2528 = v2527;
      __int16 v2529 = 0;
      v2530 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2531 = *((void *)v2530 + 104);
      if (v2531) {
        __int16 v2529 = *(_WORD *)(v2531 + 8);
      }
      v2533 = sub_1CD7F3564(v2530, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, (uint64_t)v2514, (void *)v2517, v2529);
      __int16 v2535 = 0;
      uint64_t v2536 = *(void *)(a3 + 16);
      uint64_t v2537 = *(void *)(v2536 + 832);
      if (v2537) {
        __int16 v2535 = *(_WORD *)(v2537 + 8);
      }
      v2538 = sub_1CCFDED5C(v2536, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2533, v2532, v2534, (uint64_t)v3748, v2430, v2535);
      __int16 v2541 = 0;
      uint64_t v2542 = *(void *)(a3 + 16);
      uint64_t v2543 = *(void *)(v2542 + 832);
      if (v2543) {
        __int16 v2541 = *(_WORD *)(v2543 + 8);
      }
      v2545 = sub_1CCFDED5C(v2542, 56, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2526, v2528, v2540, (uint64_t)v2538, v2539, v2541);
      uint64_t v3673 = v2546;
      __int16 v2547 = 0;
      v2548 = *(void **)(a3 + 16);
      uint64_t v2549 = v2548[104];
      if (v2549) {
        __int16 v2547 = *(_WORD *)(v2549 + 8);
      }
      v2551 = sub_1CD7F5D38(v2548, (const char *)0x1B0, (const llvm::APInt *)&v3789, (llvm *)5, 0, v3704, v3696, v2544, (uint64_t)v2490, v2492, (uint64_t)v2514, v2517, SHIDWORD(v2517), v2547);
      uint64_t v2553 = v2552;
      __int16 v2554 = 0;
      uint64_t v2555 = *(void *)(a3 + 16);
      uint64_t v2556 = *(void *)(v2555 + 832);
      if (v2556) {
        __int16 v2554 = *(_WORD *)(v2556 + 8);
      }
      v2558 = sub_1CCFDED5C(v2555, 58, (const llvm::APInt *)&v3789, (llvm *)5, 0, v3681, v3678, v2550, (uint64_t)v2490, v2492, v2554);
      __int16 v2560 = 0;
      uint64_t v2561 = *(void *)(a3 + 16);
      uint64_t v2562 = *(void *)(v2561 + 832);
      if (v2562) {
        __int16 v2560 = *(_WORD *)(v2562 + 8);
      }
      v2564 = sub_1CCFDED5C(v2561, 56, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v2558, v2557, v2559, (uint64_t)v2551, v2553, v2560);
      v2566 = v2565;
      __int16 v2567 = 0;
      uint64_t v2568 = *(void *)(a3 + 16);
      uint64_t v2569 = *(void *)(v2568 + 832);
      if (v2569) {
        __int16 v2567 = *(_WORD *)(v2569 + 8);
      }
      v2570 = sub_1CCFDED5C(v2568, 58, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2472, (uint64_t)v2474, v2563, v3689, (uint64_t)v3684, v2567);
      uint64_t v2572 = v2571;
      __int16 v2573 = 0;
      v2574 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2575 = *((void *)v2574 + 104);
      if (v2575) {
        __int16 v2573 = *(_WORD *)(v2575 + 8);
      }
      v2577 = sub_1CD7F3564(v2574, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, (uint64_t)v2564, v2566, v2573);
      __int16 v2579 = 0;
      uint64_t v2580 = *(void *)(a3 + 16);
      uint64_t v2581 = *(void *)(v2580 + 832);
      if (v2581) {
        __int16 v2579 = *(_WORD *)(v2581 + 8);
      }
      v2582 = sub_1CCFDED5C(v2580, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2577, v2576, v2578, (uint64_t)v3748, v2430, v2579);
      __int16 v2585 = 0;
      uint64_t v2586 = *(void *)(a3 + 16);
      uint64_t v2587 = *(void *)(v2586 + 832);
      if (v2587) {
        __int16 v2585 = *(_WORD *)(v2587 + 8);
      }
      v2588 = sub_1CCFDED5C(v2586, 56, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2570, v2572, v2584, (uint64_t)v2582, v2583, v2585);
      __int16 v2591 = 0;
      uint64_t v2592 = *(void *)(a3 + 16);
      uint64_t v2593 = *(void *)(v2592 + 832);
      if (v2593) {
        __int16 v2591 = *(_WORD *)(v2593 + 8);
      }
      v2595 = sub_1CCFDED5C(v2592, 146, (const llvm::APInt *)&v3789, (llvm *)0x26, 0, (uint64_t)v2545, v3673, v2590, (uint64_t)v2588, v2589, v2591);
      __int16 v2596 = 0;
      v2597 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2598 = *((void *)v2597 + 104);
      if (v2598) {
        __int16 v2596 = *(_WORD *)(v2598 + 8);
      }
      uint64_t v503 = sub_1CD7F3564(v2597, (const char *)0xD8, (uint64_t)&v3789, (llvm *)5, 0, (uint64_t)v2595, v2594, v2596);
      uint64_t v518 = v2600;
      __int16 v2601 = 0;
      v2602 = *(void **)(a3 + 16);
      uint64_t v2603 = v2602[104];
      if (v2603) {
        __int16 v2601 = *(_WORD *)(v2603 + 8);
      }
      v2605 = sub_1CD7F5D38(v2602, (const char *)0x1B0, (const llvm::APInt *)&v3789, (llvm *)5, 0, v3704, v3696, v2599, v3728, v3716, (uint64_t)v2564, (int)v2566, SHIDWORD(v2566), v2601);
      uint64_t v2607 = v2606;
      uint64_t v2608 = *(void *)(a3 + 16);
      uint64_t v2609 = *(void *)(v2608 + 832);
      if (v2609) {
        LOWORD(v2609) = *(_WORD *)(v2609 + 8);
      }
      v2611 = sub_1CCFDED5C(v2608, 58, (const llvm::APInt *)&v3789, (llvm *)5, 0, v3681, v3678, v2604, v3728, v3716, v2609);
      uint64_t v2613 = *(void *)(a3 + 16);
      uint64_t v2614 = *(void *)(v2613 + 832);
      if (v2614) {
        LOWORD(v2614) = *(_WORD *)(v2614 + 8);
      }
      v2616 = sub_1CCFDED5C(v2613, 56, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v2611, v2610, v2612, (uint64_t)v2605, v2607, v2614);
      uint64_t v2618 = *(void *)(a3 + 16);
      uint64_t v2619 = *(void *)(v2618 + 832);
      if (v2619) {
        LOWORD(v2619) = *(_WORD *)(v2619 + 8);
      }
      v2620 = sub_1CCFDED5C(v2618, 56, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v2616, v2615, v2617, (uint64_t)v2521, v3676, v2619);
      uint64_t v2622 = *(void *)(*(void *)(a3 + 16) + 832);
      if (v2622) {
        LOWORD(v2622) = *(_WORD *)(v2622 + 8);
      }
      uint64_t v3652 = v2621;
      __int16 v3657 = v2622;
      uint64_t v3647 = (uint64_t)v2620;
      uint64_t v522 = *(void *)(a3 + 16);
      uint64_t v523 = 54;
      uint64_t v524 = 6;
      goto LABEL_518;
    case '9':
      if (*(_DWORD *)(a3 + 8)) {
        goto LABEL_3081;
      }
      if (!*(unsigned char *)(*(void *)(a1 + 184296) + 280) || **(unsigned char **)(v8 + 40) != 6) {
        goto LABEL_3081;
      }
      uint64_t v300 = *(void **)(v8 + 64);
      v3793[0] = v300;
      if (v300)
      {
        llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v300, 2);
        int v12 = *(_DWORD *)(v8 + 60);
      }
      LODWORD(v3793[1]) = v12;
      int v301 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)v3793, (llvm *)5, 0, 0, 0);
      uint64_t v303 = v302;
      uint64_t v305 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)v3793, (llvm *)5, 0, 0, 0);
      uint64_t v307 = v306;
      int v308 = *(uint64_t **)(v8 + 32);
      uint64_t v309 = *v308;
      uint64_t v310 = v308[1];
      uint64_t v311 = v308[5];
      uint64_t v312 = v308[6];
      if (*(_WORD *)(*v308 + 24) == 199
        && (uint64_t v313 = *(unsigned int **)(v309 + 32),
            int v314 = *(uint64_t **)v313,
            uint64_t v315 = v313[2],
            *(unsigned char *)(*(void *)(*(void *)v313 + 40) + 16 * v315) == 5))
      {
        int v316 = v301;
        unsigned int v3717 = v303;
      }
      else
      {
        uint64_t v1324 = *(void *)(a3 + 16);
        uint64_t v1325 = *(void *)(v1324 + 832);
        if (v1325) {
          LOWORD(v1325) = *(_WORD *)(v1325 + 8);
        }
        int v314 = sub_1CCFDED5C(v1324, 53, (const llvm::APInt *)v3793, (llvm *)5, 0, v309, v310, v304, (uint64_t)v301, v303, v1325);
        __int16 v1327 = 0;
        uint64_t v315 = v1328;
        uint64_t v1329 = *(void *)(a3 + 16);
        uint64_t v1330 = *(void *)(v1329 + 832);
        if (v1330) {
          __int16 v1327 = *(_WORD *)(v1330 + 8);
        }
        int v316 = sub_1CCFDED5C(v1329, 53, (const llvm::APInt *)v3793, (llvm *)5, 0, v309, v310, v1326, (uint64_t)v305, v307, v1327);
        unsigned int v3717 = v1331;
      }
      uint64_t v3741 = (uint64_t)v316;
      if (*(_WORD *)(v311 + 24) != 199
        || (v1332 = *(unsigned int **)(v311 + 32),
            v1333 = *(uint64_t **)v1332,
            uint64_t v1334 = v1332[2],
            *(unsigned char *)(*(void *)(*(void *)v1332 + 40) + 16 * v1334) != 5))
      {
        uint64_t v1335 = *(void *)(a3 + 16);
        uint64_t v1336 = *(void *)(v1335 + 832);
        if (v1336) {
          LOWORD(v1336) = *(_WORD *)(v1336 + 8);
        }
        v1333 = sub_1CCFDED5C(v1335, 53, (const llvm::APInt *)v3793, (llvm *)5, 0, v311, v312, v304, (uint64_t)v301, v303, v1336);
        __int16 v1338 = 0;
        uint64_t v1334 = v1339;
        uint64_t v1340 = *(void *)(a3 + 16);
        uint64_t v1341 = *(void *)(v1340 + 832);
        if (v1341) {
          __int16 v1338 = *(_WORD *)(v1341 + 8);
        }
        int v301 = sub_1CCFDED5C(v1340, 53, (const llvm::APInt *)v3793, (llvm *)5, 0, v311, v312, v1337, (uint64_t)v305, v307, v1338);
        LODWORD(v303) = v1342;
      }
      uint64_t v1343 = *(void *)(a3 + 16);
      uint64_t v1344 = *(void *)(v1343 + 832);
      if (v1344) {
        LOWORD(v1344) = *(_WORD *)(v1344 + 8);
      }
      v1346 = sub_1CCFDED5C(v1343, 57, (const llvm::APInt *)v3793, (llvm *)5, 0, (uint64_t)v314, v315, v304, (uint64_t)v1333, v1334, v1344);
      uint64_t v1348 = v1347;
      __int16 v1349 = 0;
      uint64_t v1350 = *(void *)(a3 + 16);
      uint64_t v1351 = *(void *)(v1350 + 832);
      if (v1351) {
        __int16 v1349 = *(_WORD *)(v1351 + 8);
      }
      v1353 = sub_1CCFDED5C(v1350, 428, (const llvm::APInt *)v3793, (llvm *)5, 0, (uint64_t)v314, v315, v1345, (uint64_t)v1333, v1334, v1349);
      unint64_t v1354 = (unint64_t)v1352;
      __int16 v1355 = 0;
      v1356 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v1357 = *((void *)v1356 + 104);
      if (v1357) {
        __int16 v1355 = *(_WORD *)(v1357 + 8);
      }
      v1358 = sub_1CD7F3564(v1356, (const char *)0xD8, (uint64_t)v3793, (llvm *)0x26, 0, (uint64_t)v1353, v1352, v1355);
      __int16 v1360 = 0;
      unint64_t v1361 = v1354 & 0xFFFFFFFF00000000;
      unint64_t v1363 = v1354 & 0xFFFFFFFF00000000 | v1362;
      uint64_t v1364 = *(void *)(a3 + 16);
      uint64_t v1365 = *(void *)(v1364 + 832);
      if (v1365) {
        __int16 v1360 = *(_WORD *)(v1365 + 8);
      }
      v1367 = sub_1CCFDED5C(v1364, 437, (const llvm::APInt *)v3793, (llvm *)4, 0, (uint64_t)v1358, v1363, v1359, (uint64_t)v305, v307, v1360);
      __int16 v1368 = 0;
      v1369 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v1370 = *((void *)v1369 + 104);
      if (v1370) {
        __int16 v1368 = *(_WORD *)(v1370 + 8);
      }
      v1372 = sub_1CD7F3564(v1369, (const char *)0xC6, (uint64_t)v3793, (llvm *)5, 0, (uint64_t)v1367, (void *)(v1366 | v1361), v1368);
      uint64_t v1374 = *(void *)(a3 + 16);
      uint64_t v1375 = *(void *)(v1374 + 832);
      if (v1375) {
        LOWORD(v1375) = *(_WORD *)(v1375 + 8);
      }
      v1377 = sub_1CCFDED5C(v1374, 56, (const llvm::APInt *)v3793, (llvm *)5, 0, (uint64_t)v1372, v1371 | v1361, v1373, v3741, v3717, v1375);
      uint64_t v1379 = *(void *)(a3 + 16);
      uint64_t v1380 = *(void *)(v1379 + 832);
      if (v1380) {
        LOWORD(v1380) = *(_WORD *)(v1380 + 8);
      }
      v1381 = sub_1CCFDED5C(v1379, 57, (const llvm::APInt *)v3793, (llvm *)5, 0, (uint64_t)v1377, v1376, v1378, (uint64_t)v301, v303, v1380);
      uint64_t v1384 = *(void *)(a3 + 16);
      uint64_t v1385 = *(void *)(v1384 + 832);
      if (v1385) {
        LOWORD(v1385) = *(_WORD *)(v1385 + 8);
      }
      uint64_t v557 = sub_1CCFDED5C(v1384, 54, (const llvm::APInt *)v3793, (llvm *)6, 0, (uint64_t)v1346, v1348, v1383, (uint64_t)v1381, v1382, v1385);
      goto LABEL_1915;
    case ':':
      if (!*(_DWORD *)(a3 + 8)) {
        goto LABEL_3081;
      }
      int v290 = *(unsigned __int8 *)(*(void *)(a1 + 184296) + 281);
      uint64_t v29 = (uint64_t)sub_1CB8C35C4(a1, v8, *(void *)(a3 + 16), v290);
      if (v29 | v30) {
        goto LABEL_2210;
      }
      if (**(unsigned char **)(v8 + 40) != 5) {
        goto LABEL_3081;
      }
      int v291 = *(uint64_t ***)(v8 + 32);
      int v292 = *v291;
      int v293 = v291[5];
      int v294 = *((unsigned __int16 *)*v291 + 12);
      BOOL v295 = v294 == 199;
      int v296 = *((unsigned __int16 *)v293 + 12);
      BOOL v297 = v296 == 199;
      if (v294 == 35 || v294 == 11) {
        v1051 = *v291;
      }
      else {
        v1051 = 0;
      }
      if (v296 == 35 || v296 == 11) {
        v1053 = v291[5];
      }
      else {
        v1053 = 0;
      }
      if (v1051)
      {
        uint64_t v1054 = v1051[10];
        v1051 = (uint64_t *)(v1054 + 24);
        if (*(_DWORD *)(v1054 + 32) >= 0x41u) {
          v1051 = (uint64_t *)*v1051;
        }
        LODWORD(v1051) = (unint64_t)*v1051 < 0x10000;
      }
      if (v1053)
      {
        uint64_t v1055 = v1053[10];
        v1053 = (uint64_t *)(v1055 + 24);
        if (*(_DWORD *)(v1055 + 32) >= 0x41u) {
          v1053 = (uint64_t *)*v1053;
        }
        LODWORD(v1053) = (unint64_t)*v1053 < 0x10000;
      }
      if (v294 == 171)
      {
        uint64_t v1056 = *(void *)(v292[4] + 40);
        int v1057 = *(unsigned __int16 *)(v1056 + 24);
        if (v1057 == 35 || v1057 == 11)
        {
          uint64_t v1059 = *(void *)(v1056 + 80);
          v1060 = (void *)(v1059 + 24);
          if (*(_DWORD *)(v1059 + 32) >= 0x41u) {
            v1060 = (void *)*v1060;
          }
          BOOL v295 = *v1060 < 0x10000uLL;
        }
      }
      if (v296 == 171)
      {
        uint64_t v1061 = *(void *)(v293[4] + 40);
        int v1062 = *(unsigned __int16 *)(v1061 + 24);
        if (v1062 == 35 || v1062 == 11)
        {
          uint64_t v1064 = *(void *)(v1061 + 80);
          v1065 = (void *)(v1064 + 24);
          if (*(_DWORD *)(v1064 + 32) >= 0x41u) {
            v1065 = (void *)*v1065;
          }
          BOOL v297 = *v1065 < 0x10000uLL;
        }
      }
      int v1066 = v294 == 198 || v295;
      unsigned int v1067 = v1066 | v1051;
      int v1068 = v296 == 198 || v297;
      unsigned int v1069 = v1068 | v1053;
      if (v1067 == 1 && v1069 != 0) {
        goto LABEL_1196;
      }
      v1071 = v291[1];
      v1072 = v291[6];
      if (!v290) {
        goto LABEL_1704;
      }
      if (((v1067 | v1069) & 1) == 0) {
        goto LABEL_1196;
      }
      uint64_t v1073 = *(void *)(v8 + 48);
      if (!v1073) {
        goto LABEL_1704;
      }
      int v1074 = 1;
      uint64_t v1075 = *(void *)(v8 + 48);
      do
      {
        if (!*(_DWORD *)(v1075 + 8))
        {
          if (!v1074) {
            goto LABEL_1704;
          }
          --v1074;
        }
        uint64_t v1075 = *(void *)(v1075 + 32);
      }
      while (v1075);
      if (!v1074)
      {
        uint64_t v1076 = *(void *)(v1073 + 16);
        int v1077 = *(unsigned __int16 *)(v1076 + 24);
        if (v1077 == 56
          || v1077 == 57 && (uint64_t v1078 = *(void *)(v1076 + 32), *(void *)v1078 == v8) && !*(_DWORD *)(v1078 + 8))
        {
LABEL_1196:
          *(void *)&long long v3791 = v8;
LABEL_2095:
          DWORD2(v3791) = 0;
          goto LABEL_3082;
        }
      }
LABEL_1704:
      v1526 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v1527 = *((void *)v1526 + 104);
      if (v1527) {
        __int16 v1528 = *(_WORD *)(v1527 + 8);
      }
      else {
        __int16 v1528 = 0;
      }
      v1782 = sub_1CD7F3564(v1526, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, (uint64_t)v292, v1071, v1528);
      uint64_t v1784 = v1783;
      __int16 v1785 = 0;
      v1786 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v1787 = *((void *)v1786 + 104);
      if (v1787) {
        __int16 v1785 = *(_WORD *)(v1787 + 8);
      }
      v1788 = sub_1CD7F3564(v1786, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, (uint64_t)v293, v1072, v1785);
      uint64_t v3701 = v1789;
      uint64_t v1790 = *(void *)(a3 + 16);
      v1791 = sub_1CD7EBF14(v1790, 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      __int16 v1794 = 0;
      uint64_t v1795 = *(void *)(v1790 + 832);
      if (v1795) {
        __int16 v1794 = *(_WORD *)(v1795 + 8);
      }
      v3743 = sub_1CCFDED5C(v1790, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v1782, v1784, v1793, (uint64_t)v1791, v1792, v1794);
      v3724 = v1796;
      uint64_t v1797 = *(void *)(a3 + 16);
      v1798 = sub_1CD7EBF14(v1797, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      __int16 v1801 = 0;
      uint64_t v1802 = *(void *)(v1797 + 832);
      if (v1802) {
        __int16 v1801 = *(_WORD *)(v1802 + 8);
      }
      v1803 = sub_1CCFDED5C(v1797, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v1782, v1784, v1800, (uint64_t)v1798, v1799, v1801);
      uint64_t v3687 = v1804;
      uint64_t v3693 = (uint64_t)v1803;
      uint64_t v1805 = *(void *)(a3 + 16);
      v1806 = sub_1CD7EBF14(v1805, 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      __int16 v1809 = 0;
      uint64_t v1810 = *(void *)(v1805 + 832);
      if (v1810) {
        __int16 v1809 = *(_WORD *)(v1810 + 8);
      }
      v3712 = sub_1CCFDED5C(v1805, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v1788, v3701, v1808, (uint64_t)v1806, v1807, v1809);
      v1812 = v1811;
      uint64_t v1813 = *(void *)(a3 + 16);
      v1814 = sub_1CD7EBF14(v1813, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      __int16 v1817 = 0;
      uint64_t v1818 = *(void *)(v1813 + 832);
      if (v1818) {
        __int16 v1817 = *(_WORD *)(v1818 + 8);
      }
      v1820 = sub_1CCFDED5C(v1813, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v1788, v3701, v1816, (uint64_t)v1814, v1815, v1817);
      uint64_t v1822 = v1821;
      if ((v1067 & 1) == 0)
      {
        v1823 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v1824 = *((void *)v1823 + 104);
        if (v1824) {
          __int16 v1825 = *(_WORD *)(v1824 + 8);
        }
        else {
          __int16 v1825 = 0;
        }
        int v292 = sub_1CD7F3564(v1823, (const char *)0xC7, (uint64_t)&v3789, (llvm *)5, 0, (uint64_t)v3743, v3724, v1825);
        v1071 = v2052;
      }
      if ((v1069 & 1) == 0)
      {
        v2053 = *(llvm::APFloatBase **)(a3 + 16);
        uint64_t v2054 = *((void *)v2053 + 104);
        if (v2054) {
          __int16 v2055 = *(_WORD *)(v2054 + 8);
        }
        else {
          __int16 v2055 = 0;
        }
        int v293 = sub_1CD7F3564(v2053, (const char *)0xC7, (uint64_t)&v3789, (llvm *)5, 0, (uint64_t)v3712, v1812, v2055);
        v1072 = v2056;
      }
      uint64_t v2057 = *(void *)(a3 + 16);
      uint64_t v2058 = *(void *)(v2057 + 832);
      if (v2058) {
        LOWORD(v2058) = *(_WORD *)(v2058 + 8);
      }
      v2060 = sub_1CCFDED5C(v2057, 429, (const llvm::APInt *)&v3789, (llvm *)5, 0, (uint64_t)v292, (uint64_t)v1071, v1819, (uint64_t)v293, (uint64_t)v1072, v2058);
      uint64_t v2061 = (uint64_t)v2059;
      __int16 v2062 = 0;
      v2063 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2064 = *((void *)v2063 + 104);
      if (v2064) {
        __int16 v2062 = *(_WORD *)(v2064 + 8);
      }
      v2065 = sub_1CD7F3564(v2063, (const char *)0xD8, (uint64_t)&v3789, (llvm *)0x26, 0, (uint64_t)v2060, v2059, v2062);
      uint64_t v2067 = v2066;
      uint64_t v2068 = *(void *)(a3 + 16);
      v2069 = sub_1CD7EBF14(v2068, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      __int16 v2072 = 0;
      uint64_t v2073 = *(void *)(v2068 + 832);
      if (v2073) {
        __int16 v2072 = *(_WORD *)(v2073 + 8);
      }
      v2075 = sub_1CCFDED5C(v2068, 437, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2065, v2067, v2071, (uint64_t)v2069, v2070, v2072);
      unint64_t v2077 = v2076;
      if ((v1069 & 1) == 0)
      {
        uint64_t v2078 = *(void *)(a3 + 16);
        uint64_t v2079 = *(void *)(v2078 + 832);
        if (v2079) {
          LOWORD(v2079) = *(_WORD *)(v2079 + 8);
        }
        v2081 = sub_1CCFDED5C(v2078, 58, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v3743, (uint64_t)v3724, v2074, (uint64_t)v1820, v1822, v2079);
        __int16 v2083 = 0;
        uint64_t v2084 = *(void *)(a3 + 16);
        uint64_t v2085 = *(void *)(v2084 + 832);
        if (v2085) {
          __int16 v2083 = *(_WORD *)(v2085 + 8);
        }
        v2075 = sub_1CCFDED5C(v2084, 56, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2081, v2080, v2082, (uint64_t)v2075, v2077, v2083);
        unint64_t v2077 = v2077 & 0xFFFFFFFF00000000 | v2086;
      }
      if ((v1067 & 1) == 0)
      {
        uint64_t v2087 = *(void *)(a3 + 16);
        uint64_t v2088 = *(void *)(v2087 + 832);
        if (v2088) {
          LOWORD(v2088) = *(_WORD *)(v2088 + 8);
        }
        v2090 = sub_1CCFDED5C(v2087, 58, (const llvm::APInt *)&v3789, (llvm *)4, 0, v3693, v3687, v2074, (uint64_t)v3712, (uint64_t)v1812, v2088);
        __int16 v2092 = 0;
        uint64_t v2093 = *(void *)(a3 + 16);
        uint64_t v2094 = *(void *)(v2093 + 832);
        if (v2094) {
          __int16 v2092 = *(_WORD *)(v2094 + 8);
        }
        v2075 = sub_1CCFDED5C(v2093, 56, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2090, v2089, v2091, (uint64_t)v2075, v2077, v2092);
        unint64_t v2077 = v2077 & 0xFFFFFFFF00000000 | v2095;
      }
      v2096 = *(void **)(a3 + 16);
      v2097 = sub_1CD7EBF14((uint64_t)v2096, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      __int16 v2100 = 0;
      uint64_t v2101 = v2096[104];
      if (v2101) {
        __int16 v2100 = *(_WORD *)(v2101 + 8);
      }
      uint64_t v36 = sub_1CD7F5D38(v2096, (const char *)0x1B4, (const llvm::APInt *)&v3789, (llvm *)0x26, 0, (uint64_t)v2060, v2061, v2099, (uint64_t)v2075, v2077, (uint64_t)v2097, v2098, SHIDWORD(v2098), v2100);
      uint64_t v38 = v2102;
      __int16 v39 = 0;
      int v41 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2103 = *((void *)v41 + 104);
      if (v2103) {
        __int16 v39 = *(_WORD *)(v2103 + 8);
      }
      uint64_t v42 = 216;
      uint64_t v43 = 5;
      goto LABEL_2208;
    default:
      if (v13 != 15 || **(unsigned char **)(v8 + 40) != 6) {
        goto LABEL_3081;
      }
      uint64_t v260 = sub_1CD7ED208(*(void *)(a3 + 16), *(_DWORD *)(v8 + 76), (llvm *)5, 0, 0);
      uint64_t v262 = v261;
      int v263 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v264 = *(void **)(v8 + 64);
      v3793[0] = v264;
      if (v264) {
        llvm::MetadataTracking::track((uint64_t)v3793, (unsigned __int8 *)v264, 2);
      }
      LODWORD(v3793[1]) = *(_DWORD *)(v8 + 60);
      uint64_t v265 = *((void *)v263 + 104);
      if (v265) {
        __int16 v216 = *(_WORD *)(v265 + 8);
      }
      else {
        __int16 v216 = 0;
      }
      v1173 = v263;
      uint64_t v1174 = 199;
      uint64_t v210 = 6;
      goto LABEL_1913;
  }
  switch((int)v320)
  {
    case 1682:
    case 1683:
    case 1684:
    case 1685:
    case 1686:
    case 1687:
    case 1688:
    case 1689:
    case 1690:
    case 1691:
    case 1692:
    case 1693:
    case 1694:
    case 1695:
    case 1696:
    case 1697:
    case 1698:
    case 1699:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1708:
    case 1709:
    case 1710:
    case 1711:
    case 1712:
    case 1713:
    case 1714:
    case 1715:
    case 1716:
    case 1717:
    case 1718:
    case 1719:
    case 1720:
    case 1721:
    case 1722:
    case 1723:
    case 1724:
    case 1725:
    case 1726:
    case 1727:
    case 1728:
    case 1729:
    case 1730:
    case 1731:
    case 1732:
    case 1733:
    case 1734:
    case 1735:
    case 1736:
    case 1737:
    case 1738:
    case 1739:
    case 1740:
    case 1741:
    case 1742:
    case 1743:
    case 1744:
    case 1745:
    case 1746:
    case 1747:
    case 1748:
    case 1749:
    case 1750:
    case 1751:
    case 1752:
    case 1753:
    case 1754:
    case 1755:
    case 1756:
    case 1757:
    case 1758:
    case 1759:
    case 1760:
    case 1761:
    case 1762:
    case 1763:
    case 1764:
    case 1765:
    case 1766:
    case 1767:
    case 1768:
    case 1769:
    case 1770:
    case 1771:
    case 1772:
    case 1773:
    case 1774:
    case 1775:
    case 1776:
    case 1777:
    case 1778:
    case 1779:
    case 1780:
    case 1781:
    case 1782:
    case 1783:
    case 1784:
    case 1785:
    case 1786:
    case 1787:
    case 1788:
    case 1789:
    case 1790:
    case 1791:
    case 1792:
    case 1793:
    case 1794:
    case 1795:
    case 1796:
    case 1797:
    case 1798:
    case 1799:
    case 1800:
    case 1801:
    case 1802:
    case 1803:
    case 1804:
    case 1805:
    case 1806:
    case 1807:
    case 1808:
    case 1809:
    case 1810:
    case 1811:
    case 1812:
    case 1813:
    case 1814:
    case 1815:
    case 1816:
    case 1817:
    case 1818:
    case 1819:
    case 1820:
    case 1821:
      if (!*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
        goto LABEL_3081;
      }
      llvm::GPUSDISel::ExpandIntrinsicSample(v8, *(llvm::APFloatBase **)(a3 + 16), v320, &v3821, 2, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB8C42A4, (void (*)(_OWORD *, uint64_t, llvm::APFloatBase *, void **, uint64_t (*)(void)))sub_1CB8D7124, 1, 33);
      int v663 = DWORD2(v3821);
      if (!DWORD2(v3821)) {
        goto LABEL_1058;
      }
      if (DWORD2(v3821) != 1) {
        goto LABEL_2049;
      }
LABEL_694:
      long long v3791 = *(_OWORD *)v3821;
      goto LABEL_1059;
    case 1960:
    case 1961:
    case 1962:
    case 1963:
    case 1964:
    case 1965:
    case 1966:
    case 1967:
      uint64_t v2730 = *(void *)(v317[10] + 80);
      v2731 = (unsigned int *)(v2730 + 24);
      if (*(_DWORD *)(v2730 + 32) >= 0x41u) {
        v2731 = *(unsigned int **)v2731;
      }
      unint64_t v2732 = v317[16];
      uint64_t v2733 = *(void *)(v317[25] + 80);
      v2734 = (unsigned int *)(v2733 + 24);
      if (*(_DWORD *)(v2733 + 32) >= 0x41u) {
        v2734 = *(unsigned int **)v2734;
      }
      uint64_t v2735 = (int)v320 - 1960;
      uint64_t v2736 = *(void *)(v317[30] + 80);
      v2737 = (unsigned int *)(v2736 + 24);
      if (*(_DWORD *)(v2736 + 32) >= 0x41u) {
        v2737 = *(unsigned int **)v2737;
      }
      v2738 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2739 = *((void *)v2738 + 104);
      if (v2739) {
        __int16 v2740 = *(_WORD *)(v2739 + 8);
      }
      else {
        __int16 v2740 = 0;
      }
      int v2879 = dword_1CD936170[v2735];
      int v2880 = dword_1CD936190[(int)v2735];
      v2881 = (llvm *)qword_1CD9361F0[(int)v2735];
      v3750 = (llvm *)qword_1CD936230[(int)v2735];
      uint64_t v3685 = *v2731;
      uint64_t v2882 = v317[20];
      uint64_t v3731 = v317[21];
      uint64_t v3690 = *v2734;
      uint64_t v3697 = *v2737;
      uint64_t v3705 = qword_1CD9361B0[(int)v2735];
      v2883 = sub_1CD7F3564(v2738, (const char *)0xC9, (uint64_t)&v3789, (llvm *)4, 0, v317[15], (void *)v2732, v2740);
      unint64_t v2885 = v2732 & 0xFFFFFFFF00000000 | v2884;
      uint64_t v2886 = *(void *)(a3 + 16);
      v2887 = sub_1CD7EBF14(v2886, 1, (const llvm::APInt *)&v3789, (llvm *)4, 0, 0, 0);
      __int16 v2890 = 0;
      uint64_t v2891 = *(void *)(v2886 + 832);
      if (v2891) {
        __int16 v2890 = *(_WORD *)(v2891 + 8);
      }
      v3679 = sub_1CCFDED5C(v2886, 177, (const llvm::APInt *)&v3789, (llvm *)4, 0, (uint64_t)v2883, v2885, v2889, (uint64_t)v2887, v2888, v2890);
      int v3682 = v2892;
      *(void *)&long long v3815 = &v3816;
      *((void *)&v3815 + 1) = 0x500000000;
      v2894 = sub_1CD7EBF14(*(void *)(a3 + 16), 7, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
      if (DWORD2(v3815) >= HIDWORD(v3815)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v2895 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
      *v2895 = v2894;
      v2895[1] = v2893;
      ++DWORD2(v3815);
      uint64_t v2896 = *(void *)(a3 + 16);
      v2897 = sub_1CD7EBF14(v2896, 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      __int16 v2900 = 0;
      uint64_t v2901 = *(void *)(v2896 + 832);
      if (v2901) {
        __int16 v2900 = *(_WORD *)(v2901 + 8);
      }
      v2903 = sub_1CCFDED5C(v2896, 148, (const llvm::APInt *)&v3789, (llvm *)4, 0, v2882, v3731, v2899, (uint64_t)v2897, v2898, v2900);
      if (DWORD2(v3815) >= HIDWORD(v3815)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v2904 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
      *v2904 = v2903;
      v2904[1] = v2902;
      ++DWORD2(v3815);
      v2906 = sub_1CD7EBF14(*(void *)(a3 + 16), 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
      if (DWORD2(v3815) >= HIDWORD(v3815)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v2907 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
      *v2907 = v2906;
      v2907[1] = v2905;
      ++DWORD2(v3815);
      uint64_t v2908 = *(void *)(a3 + 16);
      v2909 = sub_1CD7EBF14(v2908, 1, (const llvm::APInt *)&v3789, (llvm *)5, 0, 0, 0);
      __int16 v2912 = 0;
      uint64_t v2913 = *(void *)(v2908 + 832);
      if (v2913) {
        __int16 v2912 = *(_WORD *)(v2913 + 8);
      }
      v2915 = sub_1CCFDED5C(v2908, 148, (const llvm::APInt *)&v3789, (llvm *)4, 0, v2882, v3731, v2911, (uint64_t)v2909, v2910, v2912);
      if (DWORD2(v3815) >= HIDWORD(v3815)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v2916 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
      *v2916 = v2915;
      v2916[1] = v2914;
      ++DWORD2(v3815);
      v2918 = sub_1CD7EBF14(*(void *)(a3 + 16), 2, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
      if (DWORD2(v3815) >= HIDWORD(v3815)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      v2919 = (uint64_t **)(v3815 + 16 * DWORD2(v3815));
      *v2919 = v2918;
      v2919[1] = v2917;
      ++DWORD2(v3815);
      v2920 = sub_1CD801450(*(void *)(a3 + 16), 18, (uint64_t)&v3789, (llvm *)0xAE, 0, (uint64_t *)v3815, DWORD2(v3815));
      v3793[0] = v3679;
      LODWORD(v3793[1]) = v3682;
      v3793[2] = v2920;
      LODWORD(v3794) = 0;
      *((void *)&v3794 + 1) = sub_1CD7EBF14(*(void *)(a3 + 16), v3685, (const llvm::APInt *)&v3789, (llvm *)4, 0, 1, 0);
      v3795 = v2921;
      v3796 = (const char *)sub_1CD7EBF14(*(void *)(a3 + 16), v3690, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
      uint64_t v3797 = v2922;
      v3798 = sub_1CD7EBF14(*(void *)(a3 + 16), v3697, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
      uint64_t v3799 = v2923;
      v3800 = sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
      uint64_t v3801 = v2924;
      uint64_t v3802 = (uint64_t)sub_1CD7EBF14(*(void *)(a3 + 16), 0, (const llvm::APInt *)&v3789, (llvm *)5, 0, 1, 0);
      uint64_t v3803 = v2925;
      uint64_t v3804 = sub_1CD7EEB94(*(void *)(a3 + 16), 0, (llvm *)5, 0);
      uint64_t v3805 = v2926;
      uint64_t v2927 = *(void *)(v8 + 32);
      uint64_t v2928 = *(void *)v2927;
      LODWORD(v3807) = *(_DWORD *)(v2927 + 8);
      uint64_t v3806 = v2928;
      uint64_t v2929 = *(void *)(a3 + 16);
      uint64_t v2930 = sub_1CD7F95FC(v2929, v3705, 0, 1, 0);
      v2932 = sub_1CD801044(v2929, 2 * (int)v2735 + 11852, (uint64_t)&v3789, v2930, v2931, (uint64_t *)v3793, 9);
      *(void *)&long long v3813 = v3814;
      *((void *)&v3813 + 1) = 0x400000000;
      do
      {
        v2934 = sub_1CD8015C0(*(void *)(a3 + 16), v2880, (const llvm::APInt *)&v3789, v2881, 0, (uint64_t)v2932, 0);
        if (DWORD2(v3813) >= (unint64_t)HIDWORD(v3813)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v2935 = (uint64_t **)(v3813 + 16 * DWORD2(v3813));
        *v2935 = v2934;
        v2935[1] = v2933;
        uint64_t v2936 = ++DWORD2(v3813);
        ++v2880;
        --v2879;
      }
      while (v2879);
      v2937 = *(void **)(a3 + 16);
      uint64_t v2938 = v2937[104];
      if (v2938) {
        uint64_t v2939 = *(unsigned __int16 *)(v2938 + 8);
      }
      else {
        uint64_t v2939 = 0;
      }
      v2941 = sub_1CD7FF4E8(v2937, (const char *)0x92, (const llvm::APInt *)&v3789, v3750, 0, (uint64_t *)v3813, v2936, v2939);
      __int16 v2942 = 0;
      v2943 = *(llvm::APFloatBase **)(a3 + 16);
      uint64_t v2944 = *((void *)v2943 + 104);
      if (v2944) {
        __int16 v2942 = *(_WORD *)(v2944 + 8);
      }
      v2945 = sub_1CD7F3564(v2943, (const char *)0xD8, (uint64_t)&v3789, v3750, 0, (uint64_t)v2941, v2940, v2942);
      *(void *)&long long v3791 = sub_1CD7FFB18(*(void **)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v3789, *(void *)(v8 + 40), *(unsigned __int16 *)(v8 + 58), (uint64_t)v2945, v2946, v2947, (uint64_t)v2932, 1);
      *((void *)&v3791 + 1) = v2948;
      if ((uint64_t *)v3813 != v3814) {
        free((void *)v3813);
      }
      if ((uint64_t **)v3815 != &v3816) {
        free((void *)v3815);
      }
      goto LABEL_1059;
    case 1994:
      uint64_t v2295 = *(void *)(v8 + 48);
      if (!v2295) {
        goto LABEL_2453;
      }
      do
      {
        if (!*(_DWORD *)(v2295 + 8)) {
          goto LABEL_3081;
        }
        uint64_t v2295 = *(void *)(v2295 + 32);
      }
      while (v2295);
LABEL_2453:
      uint64_t v2296 = *(void *)(a3 + 16);
      v2297 = *(unsigned __int8 **)(v8 + 64);
      *(void *)&long long v3815 = v2297;
      if (v2297)
      {
        llvm::MetadataTracking::track((uint64_t)&v3815, v2297, 2);
        int v12 = *(_DWORD *)(v8 + 60);
      }
      DWORD2(v3815) = v12;
      v2298 = sub_1CD7F330C(v2296, 51, (uint64_t)&v3815, (llvm *)5, 0);
      uint64_t v2299 = *(void *)(v8 + 32);
      v2300 = *(void **)v2299;
      uint64_t v2301 = *(void *)(v2299 + 8);
      v2302 = *(uint64_t **)a3;
      v3793[0] = v2298;
      LODWORD(v3793[1]) = v2303;
      v3793[2] = v2300;
      LODWORD(v3794) = v2301;
      *(void *)&long long v3791 = sub_1CCEF083C(v2302, v8, (uint64_t *)v3793, 2, 1);
      *((void *)&v3791 + 1) = v2304;
      if (!(void)v3815) {
        goto LABEL_1059;
      }
      int v2305 = *(unsigned __int8 *)v3815;
      if ((v2305 - 4) > 0x1E)
      {
        if ((v2305 - 3) >= 0xFFFFFFFE) {
          uint64_t v3518 = v3815;
        }
        else {
          uint64_t v3518 = 0;
        }
        if ((v2305 - 3) < 0xFFFFFFFE)
        {
          if (v2305 == 3) {
            *(void *)(v3815 + 8) = 0;
          }
          goto LABEL_1059;
        }
        unint64_t v2307 = v3518 + 8;
      }
      else
      {
        if ((*(unsigned char *)(v3815 + 1) & 0x7F) != 2 && !*(_DWORD *)(v3815 + 12)) {
          goto LABEL_1059;
        }
        uint64_t v2306 = *(void *)(v3815 + 16);
        if ((v2306 & 4) == 0) {
          goto LABEL_1059;
        }
        unint64_t v2307 = v2306 & 0xFFFFFFFFFFFFFFF8;
        if (!v2307) {
          goto LABEL_1059;
        }
      }
      v3793[0] = &v3815;
      sub_1CC5FA668(v2307 + 16, v3793);
LABEL_1059:
      v989 = (void **)v3821;
LABEL_1060:
      if (v989 == v321) {
        goto LABEL_3082;
      }
      goto LABEL_1061;
    case 2022:
    case 2023:
    case 2024:
    case 2025:
    case 2026:
    case 2027:
    case 2030:
    case 2031:
    case 2032:
    case 2035:
    case 2036:
    case 2037:
    case 2038:
    case 2039:
    case 2040:
    case 2041:
    case 2042:
    case 2043:
    case 2046:
    case 2047:
    case 2048:
    case 2051:
    case 2052:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2057:
    case 2058:
    case 2059:
    case 2062:
    case 2063:
    case 2064:
    case 2067:
    case 2068:
    case 2069:
    case 2070:
    case 2071:
    case 2072:
    case 2073:
    case 2074:
    case 2075:
    case 2078:
    case 2079:
    case 2080:
    case 2083:
    case 2084:
    case 2085:
      uint64_t v988 = *(void *)(a1 + 184296);
      if (!*(unsigned char *)(v988 + 281)) {
        goto LABEL_3081;
      }
      sub_1CD3DD534(v8, *(llvm::APFloatBase **)(a3 + 16), v320, (uint64_t)&v3821, v988);
      int v663 = DWORD2(v3821);
      if (DWORD2(v3821))
      {
        if (DWORD2(v3821) == 1)
        {
          long long v3791 = *(_OWORD *)v3821;
        }
        else
        {
LABEL_2049:
          if (v663 != 2)
          {
LABEL_3747:
            v3631 = "Not yet supported!";
LABEL_3748:
            llvm::report_fatal_error((llvm *)v3631, (const llvm::Twine *)1);
          }
LABEL_2050:
          v1913 = *(void **)(a3 + 16);
          v1914 = (uint64_t *)(*(void *)(*(void *)v3821 + 40) + 16 * *(unsigned int *)(v3821 + 8));
          v1915 = (uint64_t *)(*(void *)(*(void *)(v3821 + 16) + 40) + 16 * *(unsigned int *)(v3821 + 24));
          uint64_t v1916 = sub_1CD7F95FC((uint64_t)v1913, *v1914, v1914[1], *v1915, v1915[1]);
          int v331 = sub_1CD7FFB18(v1913, (const char *)0x37, (const llvm::APInt *)&v3789, v1916, v1917, *(void *)v3821, *(void *)(v3821 + 8), v1918, *(void *)(v3821 + 16), *(void *)(v3821 + 24));
LABEL_2051:
          *(void *)&long long v3791 = v331;
          *((void *)&v3791 + 1) = v332;
        }
      }
      else
      {
LABEL_1058:
        *(void *)&long long v3791 = v8;
        DWORD2(v3791) = 0;
      }
      goto LABEL_1059;
    default:
      goto LABEL_3081;
  }
}

uint64_t sub_1CB8D66E8(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v3 = *(void *)(a1 + 48);
  if (!v3) {
    return 1;
  }
  while (1)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    int v5 = *(unsigned __int16 *)(v4 + 24);
    long long v12 = *(_OWORD *)*(void *)(v4 + 40);
    if (v5 != 201) {
      break;
    }
    if ((unint64_t)sub_1CD3E12F4((unsigned __int8 *)&v12, a2, a3) <= 0xF)
    {
      int v5 = *(unsigned __int16 *)(v4 + 24);
      break;
    }
LABEL_12:
    uint64_t v3 = *(void *)(v3 + 32);
    if (!v3) {
      return 1;
    }
  }
  if (v5 == 171)
  {
    uint64_t v6 = *(void *)(*(void *)(v4 + 32) + 40);
    int v7 = *(unsigned __int16 *)(v6 + 24);
    if (v7 == 35 || v7 == 11)
    {
      uint64_t v9 = *(void *)(v6 + 80);
      int v10 = (void *)(v9 + 24);
      if (*(_DWORD *)(v9 + 32) >= 0x41u) {
        int v10 = (void *)*v10;
      }
      if (*v10 == 0xFFFFLL) {
        goto LABEL_12;
      }
    }
  }
  return 0;
}

unsigned int *sub_1CB8D67B0(unsigned int *result, unsigned int **a2)
{
  uint64_t v2 = *(void **)result;
  if (*(_WORD *)(*(void *)result + 24) == 58)
  {
    uint64_t v3 = result[2];
    if (*(unsigned char *)(v2[5] + 16 * v3) == 6)
    {
      uint64_t v4 = v2[6];
      if (v4)
      {
        int v5 = 1;
        do
        {
          if (*(_DWORD *)(v4 + 8) == v3)
          {
            if (!v5) {
              return result;
            }
            --v5;
          }
          uint64_t v4 = *(void *)(v4 + 32);
        }
        while (v4);
        if (!v5)
        {
          uint64_t v6 = (void *)v2[4];
          if (*(_WORD *)(*v6 + 24) == 199)
          {
            uint64_t v7 = v6[5];
            if (*(_WORD *)(v7 + 24) == 199)
            {
              uint64_t v8 = (unsigned __int8 *)(*(void *)(**(void **)(*v6 + 32) + 40)
                                     + 16 * *(unsigned int *)(*(void *)(*v6 + 32) + 8));
              uint64_t v9 = *v8;
              int v10 = (unsigned __int8 *)(*(void *)(**(void **)(v7 + 32) + 40)
                                      + 16 * *(unsigned int *)(*(void *)(v7 + 32) + 8));
              if (v9 == *v10)
              {
                uint64_t v11 = *((void *)v10 + 1);
                uint64_t v12 = *((void *)v8 + 1);
                if (v9) {
                  BOOL v13 = 1;
                }
                else {
                  BOOL v13 = v12 == v11;
                }
                int v14 = v13;
                if (v9 == 5 && v14 != 0) {
                  *a2 = result;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1CB8D688C(uint64_t a1, unsigned int a2, llvm::APFloatBase *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(unsigned __int8 **)(a1 + 64);
  unint64_t v81 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v81, v6, 2);
  }
  int v82 = *(_DWORD *)(a1 + 60);
  int v7 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 16 * v5);
  if (v7 == 5)
  {
    uint64_t v16 = *(uint64_t **)(a1 + 32);
    uint64_t v17 = *v16;
    if (*(unsigned char *)(*(void *)(*v16 + 40) + 16 * *((unsigned int *)v16 + 2)) == 5)
    {
      uint64_t v18 = v16[5];
      if (*(unsigned char *)(*(void *)(v18 + 40) + 16 * *((unsigned int *)v16 + 12)) == 6)
      {
        uint64_t v70 = *(unsigned __int16 *)(a1 + 24);
        uint64_t v71 = v16[1];
        uint64_t v72 = (void *)v16[6];
        uint64_t v73 = *((void *)a3 + 104);
        if (v73) {
          __int16 v74 = *(_WORD *)(v73 + 8);
        }
        else {
          __int16 v74 = 0;
        }
        uint64_t v75 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v81, (llvm *)5, 0, v18, v72, v74);
        uint64_t v78 = *((void *)a3 + 104);
        if (v78) {
          LOWORD(v78) = *(_WORD *)(v78 + 8);
        }
        uint64_t v79 = sub_1CCFDED5C((uint64_t)a3, v70, (const llvm::APInt *)&v81, (llvm *)5, 0, v17, v71, v77, (uint64_t)v75, v76, v78);
        goto LABEL_63;
      }
    }
LABEL_15:
    uint64_t v19 = 0;
    goto LABEL_16;
  }
  if (v7 != 6) {
    goto LABEL_15;
  }
  uint64_t v8 = *(uint64_t **)(a1 + 32);
  int v9 = *(unsigned __int16 *)(v8[5] + 24);
  if (v9 == 35 || v9 == 11) {
    uint64_t v11 = v8[5];
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *v8;
  BOOL v13 = (void *)v8[1];
  uint64_t v14 = *((void *)a3 + 104);
  if (v14) {
    __int16 v15 = *(_WORD *)(v14 + 8);
  }
  else {
    __int16 v15 = 0;
  }
  uint64_t v24 = sub_1CD7F3564(a3, (const char *)0xD8, (uint64_t)&v81, (llvm *)0x31, 0, v12, v13, v15);
  uint64_t v26 = v25;
  uint64_t v27 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v81, (llvm *)5, 0, 0, 0);
  __int16 v30 = 0;
  uint64_t v31 = *((void *)a3 + 104);
  if (v31) {
    __int16 v30 = *(_WORD *)(v31 + 8);
  }
  uint64_t v32 = sub_1CCFDED5C((uint64_t)a3, 437, (const llvm::APInt *)&v81, (llvm *)5, 0, (uint64_t)v24, v26, v29, (uint64_t)v27, v28, v30);
  int v34 = v33;
  unint64_t v35 = sub_1CD7EBF14((uint64_t)a3, 1, (const llvm::APInt *)&v81, (llvm *)5, 0, 0, 0);
  __int16 v38 = 0;
  uint64_t v39 = *((void *)a3 + 104);
  if (v39) {
    __int16 v38 = *(_WORD *)(v39 + 8);
  }
  uint64_t v40 = sub_1CCFDED5C((uint64_t)a3, 437, (const llvm::APInt *)&v81, (llvm *)5, 0, (uint64_t)v24, v26, v37, (uint64_t)v35, v36, v38);
  uint64_t v42 = v41;
  if (!v11) {
    goto LABEL_43;
  }
  uint64_t v43 = *(void *)(v11 + 80);
  unint64_t v44 = (void *)(v43 + 24);
  if (*(_DWORD *)(v43 + 32) >= 0x41u) {
    unint64_t v44 = (void *)*v44;
  }
  if (*v44 == 32)
  {
    if (*(_WORD *)(a1 + 24) == 177) {
      uint64_t v45 = 199;
    }
    else {
      uint64_t v45 = 198;
    }
    uint64_t v46 = *((void *)a3 + 104);
    if (v46) {
      __int16 v47 = *(_WORD *)(v46 + 8);
    }
    else {
      __int16 v47 = 0;
    }
    double v69 = a3;
    uint64_t v65 = v40;
    char v67 = v42;
  }
  else
  {
LABEL_43:
    int v48 = *(unsigned __int16 *)(a1 + 24);
    if (v48 == 177) {
      unsigned int v49 = 197;
    }
    else {
      unsigned int v49 = 0;
    }
    if (v48 == 176) {
      uint64_t v50 = 196;
    }
    else {
      uint64_t v50 = v49;
    }
    uint64_t v51 = sub_1CD7F95FC((uint64_t)a3, 5, 0, 5, 0);
    int v54 = sub_1CD7FFB94(a3, (const char *)v50, (const llvm::APInt *)&v81, v51, v52, (uint64_t)v32, v34, v53, (uint64_t)v40, (int)v42, *(void *)(*(void *)(a1 + 32) + 40), *(void *)(*(void *)(a1 + 32) + 48));
    uint64_t v56 = sub_1CB8E41A0((uint64_t)v54, v55, a3);
    __int16 v58 = 0;
    uint64_t v59 = (uint64_t *)v56[4];
    uint64_t v60 = *v59;
    uint64_t v61 = v59[1];
    uint64_t v62 = v59[5];
    uint64_t v63 = v59[6];
    uint64_t v64 = *((void *)a3 + 104);
    if (v64) {
      __int16 v58 = *(_WORD *)(v64 + 8);
    }
    uint64_t v65 = sub_1CCFDED5C((uint64_t)a3, 146, (const llvm::APInt *)&v81, (llvm *)0x31, 0, v60, v61, v57, v62, v63, v58);
    char v67 = v66;
    __int16 v47 = 0;
    uint64_t v68 = *((void *)a3 + 104);
    if (v68) {
      __int16 v47 = *(_WORD *)(v68 + 8);
    }
    double v69 = a3;
    uint64_t v45 = 216;
  }
  uint64_t v79 = sub_1CD7F3564(v69, (const char *)v45, (uint64_t)&v81, (llvm *)6, 0, (uint64_t)v65, v67, v47);
LABEL_63:
  uint64_t v19 = v79;
LABEL_16:
  if (v81)
  {
    int v20 = *v81;
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        uint64_t v22 = v81;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((v20 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v23 = (unint64_t)(v22 + 8);
LABEL_26:
        int v83 = &v81;
        sub_1CC5FA668(v23 + 16, &v83);
        return v19;
      }
      if (v20 == 3) {
        *((void *)v81 + 1) = 0;
      }
    }
    else if ((v81[1] & 0x7F) == 2 || *((_DWORD *)v81 + 3))
    {
      uint64_t v80 = *((void *)v81 + 2);
      if ((v80 & 4) != 0)
      {
        unint64_t v23 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v23) {
          goto LABEL_26;
        }
      }
    }
  }
  return v19;
}

uint64_t *sub_1CB8D6CA8(uint64_t a1, unsigned int a2, llvm::APFloatBase *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v79 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v79, v6, 2);
  }
  int v80 = *(_DWORD *)(a1 + 60);
  int v7 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 16 * v5);
  if (v7 == 5)
  {
    uint64_t v16 = *(uint64_t **)(a1 + 32);
    uint64_t v17 = *v16;
    if (*(unsigned char *)(*(void *)(*v16 + 40) + 16 * *((unsigned int *)v16 + 2)) == 5)
    {
      uint64_t v18 = v16[5];
      if (*(unsigned char *)(*(void *)(v18 + 40) + 16 * *((unsigned int *)v16 + 12)) == 6)
      {
        uint64_t v69 = *(unsigned __int16 *)(a1 + 24);
        uint64_t v70 = v16[1];
        uint64_t v71 = (void *)v16[6];
        uint64_t v72 = *((void *)a3 + 104);
        if (v72) {
          __int16 v73 = *(_WORD *)(v72 + 8);
        }
        else {
          __int16 v73 = 0;
        }
        __int16 v74 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v79, (llvm *)5, 0, v18, v71, v73);
        uint64_t v77 = *((void *)a3 + 104);
        if (v77) {
          LOWORD(v77) = *(_WORD *)(v77 + 8);
        }
        uint64_t v68 = sub_1CCFDED5C((uint64_t)a3, v69, (const llvm::APInt *)&v79, (llvm *)5, 0, v17, v70, v76, (uint64_t)v74, v75, v77);
        goto LABEL_53;
      }
    }
LABEL_15:
    uint64_t v19 = 0;
    goto LABEL_16;
  }
  if (v7 != 6) {
    goto LABEL_15;
  }
  uint64_t v8 = *(uint64_t **)(a1 + 32);
  int v9 = *(unsigned __int16 *)(v8[5] + 24);
  if (v9 == 35 || v9 == 11) {
    uint64_t v11 = v8[5];
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *v8;
  BOOL v13 = (void *)v8[1];
  uint64_t v14 = *((void *)a3 + 104);
  if (v14) {
    __int16 v15 = *(_WORD *)(v14 + 8);
  }
  else {
    __int16 v15 = 0;
  }
  uint64_t v24 = sub_1CD7F3564(a3, (const char *)0xD8, (uint64_t)&v79, (llvm *)0x31, 0, v12, v13, v15);
  uint64_t v26 = v25;
  uint64_t v27 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v79, (llvm *)5, 0, 0, 0);
  __int16 v30 = 0;
  uint64_t v31 = *((void *)a3 + 104);
  if (v31) {
    __int16 v30 = *(_WORD *)(v31 + 8);
  }
  uint64_t v32 = sub_1CCFDED5C((uint64_t)a3, 437, (const llvm::APInt *)&v79, (llvm *)5, 0, (uint64_t)v24, v26, v29, (uint64_t)v27, v28, v30);
  uint64_t v34 = v33;
  unint64_t v35 = sub_1CD7EBF14((uint64_t)a3, 1, (const llvm::APInt *)&v79, (llvm *)5, 0, 0, 0);
  __int16 v38 = 0;
  uint64_t v39 = *((void *)a3 + 104);
  if (v39) {
    __int16 v38 = *(_WORD *)(v39 + 8);
  }
  uint64_t v40 = sub_1CCFDED5C((uint64_t)a3, 437, (const llvm::APInt *)&v79, (llvm *)5, 0, (uint64_t)v24, v26, v37, (uint64_t)v35, v36, v38);
  int v42 = v41;
  if (!v11) {
    goto LABEL_41;
  }
  uint64_t v43 = *(void *)(v11 + 80);
  unint64_t v44 = (void *)(v43 + 24);
  if (*(_DWORD *)(v43 + 32) >= 0x41u) {
    unint64_t v44 = (void *)*v44;
  }
  if (*v44 == 32)
  {
    uint64_t v46 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v79, (llvm *)5, 0, 0, 0);
    __int16 v48 = 0;
    uint64_t v49 = *((void *)a3 + 104);
    if (v49) {
      __int16 v48 = *(_WORD *)(v49 + 8);
    }
    uint64_t v50 = sub_1CCFDED5C((uint64_t)a3, 146, (const llvm::APInt *)&v79, (llvm *)0x31, 0, (uint64_t)v46, v45, v47, (uint64_t)v32, v34, v48);
  }
  else
  {
LABEL_41:
    uint64_t v52 = sub_1CD7F95FC((uint64_t)a3, 5, 0, 5, 0);
    unsigned int v55 = sub_1CD7FFB94(a3, (const char *)0xC3, (const llvm::APInt *)&v79, v52, v53, (uint64_t)v32, v34, v54, (uint64_t)v40, v42, *(void *)(*(void *)(a1 + 32) + 40), *(void *)(*(void *)(a1 + 32) + 48));
    uint64_t v57 = sub_1CB8E48EC((uint64_t)v55, v56, a3);
    __int16 v59 = 0;
    uint64_t v60 = (uint64_t *)v57[4];
    uint64_t v61 = *v60;
    uint64_t v62 = v60[1];
    uint64_t v63 = v60[5];
    uint64_t v64 = v60[6];
    uint64_t v65 = *((void *)a3 + 104);
    if (v65) {
      __int16 v59 = *(_WORD *)(v65 + 8);
    }
    uint64_t v50 = sub_1CCFDED5C((uint64_t)a3, 146, (const llvm::APInt *)&v79, (llvm *)0x31, 0, v61, v62, v58, v63, v64, v59);
  }
  __int16 v66 = 0;
  uint64_t v67 = *((void *)a3 + 104);
  if (v67) {
    __int16 v66 = *(_WORD *)(v67 + 8);
  }
  uint64_t v68 = sub_1CD7F3564(a3, (const char *)0xD8, (uint64_t)&v79, (llvm *)6, 0, (uint64_t)v50, v51, v66);
LABEL_53:
  uint64_t v19 = v68;
LABEL_16:
  if (v79)
  {
    int v20 = *v79;
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        uint64_t v22 = v79;
      }
      else {
        uint64_t v22 = 0;
      }
      if ((v20 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v23 = (unint64_t)(v22 + 8);
LABEL_26:
        unint64_t v81 = &v79;
        sub_1CC5FA668(v23 + 16, &v81);
        return v19;
      }
      if (v20 == 3) {
        *((void *)v79 + 1) = 0;
      }
    }
    else if ((v79[1] & 0x7F) == 2 || *((_DWORD *)v79 + 3))
    {
      uint64_t v78 = *((void *)v79 + 2);
      if ((v78 & 4) != 0)
      {
        unint64_t v23 = v78 & 0xFFFFFFFFFFFFFFF8;
        if (v23) {
          goto LABEL_26;
        }
      }
    }
  }
  return v19;
}

uint64_t sub_1CB8D70B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  if (!v1) {
    return 1;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    int v4 = *(unsigned __int16 *)(v3 + 24);
    if (v4 != 192)
    {
      uint64_t result = sub_1CB8C5B2C(v4);
      if (!result) {
        return result;
      }
      goto LABEL_7;
    }
    uint64_t v5 = *(void *)(v3 + 32);
    if (*(void *)(v5 + 80) == a1 || *(void *)(v5 + 120) == a1) {
      return 0;
    }
LABEL_7:
    uint64_t v1 = *(void *)(v1 + 32);
    if (!v1) {
      return 1;
    }
  }
}

void sub_1CB8D7124(uint64_t a1, uint64_t a2, llvm::APFloatBase *a3, void *a4, uint64_t (*a5)(uint64_t *, uint64_t, llvm::APFloatBase *, uint64_t, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(unsigned __int8 **)(a2 + 64);
  int v92 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v92, v11, 2);
  }
  int v12 = *(_DWORD *)(a2 + 60);
  int v93 = v12;
  unsigned int v13 = *(_DWORD *)(a1 + 72);
  uint64_t v14 = *(void *)(a2 + 32);
  __int16 v15 = (uint64_t *)(v14 + 40 * *(unsigned int *)(a1 + 44));
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  if (v13 == -1)
  {
    uint64_t v84 = v92;
    if (v92)
    {
      llvm::MetadataTracking::track((uint64_t)&v84, v92, 2);
      int v12 = v93;
    }
    int v85 = v12;
    uint64_t v18 = sub_1CB8DAC0C(1924, (const llvm::APInt *)&v84, v16, v17, a3);
    uint64_t v20 = v19;
    if (!v84) {
      goto LABEL_10;
    }
    int v21 = *v84;
    if ((v21 - 4) > 0x1E)
    {
      if ((v21 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = v84;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v21 - 3) < 0xFFFFFFFE)
      {
        if (v21 == 3) {
          *((void *)v84 + 1) = 0;
        }
        goto LABEL_10;
      }
      unint64_t v30 = (unint64_t)(v29 + 8);
    }
    else
    {
      if ((v84[1] & 0x7F) != 2 && !*((_DWORD *)v84 + 3)) {
        goto LABEL_10;
      }
      uint64_t v79 = *((void *)v84 + 2);
      if ((v79 & 4) == 0) {
        goto LABEL_10;
      }
      unint64_t v30 = v79 & 0xFFFFFFFFFFFFFFF8;
      if (!v30) {
        goto LABEL_10;
      }
    }
    uint64_t v95 = &v84;
    sub_1CC5FA668(v30 + 16, &v95);
LABEL_10:
    if (*(unsigned char *)(a1 + 2)) {
      uint64_t v22 = 10;
    }
    else {
      uint64_t v22 = 5;
    }
    uint64_t v23 = a5(v18, v20, a3, 3, v22);
    uint64_t v24 = *a4 + 16 * *(unsigned int *)(a1 + 44);
    *(void *)uint64_t v24 = v23;
    *(_DWORD *)(v24 + 8) = v25;
    goto LABEL_14;
  }
  uint64_t v31 = (uint64_t *)(v14 + 40 * v13);
  uint64_t v32 = *v31;
  uint64_t v33 = v31[1];
  uint64_t v34 = (uint64_t *)(v14 + 40 * (v13 + 1));
  uint64_t v35 = *v34;
  uint64_t v36 = v34[1];
  uint64_t v37 = v14 + 40 * (v13 + 2);
  __int16 v38 = *(void **)v37;
  uint64_t v39 = *(void *)(v37 + 8);
  uint64_t v90 = v92;
  if (v92)
  {
    llvm::MetadataTracking::track((uint64_t)&v90, v92, 2);
    int v12 = v93;
  }
  int v91 = v12;
  uint64_t v40 = sub_1CB8DB464((const llvm::APInt *)&v90, v16, v17, v38, v39, v32, v33, a8, v35, v36, a3);
  uint64_t v42 = v41;
  if (!v90) {
    goto LABEL_41;
  }
  int v43 = *v90;
  if ((v43 - 4) > 0x1E)
  {
    if ((v43 - 3) >= 0xFFFFFFFE) {
      uint64_t v76 = v90;
    }
    else {
      uint64_t v76 = 0;
    }
    if ((v43 - 3) < 0xFFFFFFFE)
    {
      if (v43 == 3) {
        *((void *)v90 + 1) = 0;
      }
      goto LABEL_41;
    }
    unint64_t v77 = (unint64_t)(v76 + 8);
  }
  else
  {
    if ((v90[1] & 0x7F) != 2 && !*((_DWORD *)v90 + 3)) {
      goto LABEL_41;
    }
    uint64_t v81 = *((void *)v90 + 2);
    if ((v81 & 4) == 0) {
      goto LABEL_41;
    }
    unint64_t v77 = v81 & 0xFFFFFFFFFFFFFFF8;
    if (!v77) {
      goto LABEL_41;
    }
  }
  uint64_t v95 = &v90;
  sub_1CC5FA668(v77 + 16, &v95);
LABEL_41:
  uint64_t v44 = a5(v40, v42, a3, 3, 10);
  char v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = *a4 + 16 * *(unsigned int *)(a1 + 44);
  *(void *)uint64_t v47 = v44;
  *(_DWORD *)(v47 + 8) = v48;
  do
  {
    char v49 = 0;
    uint64_t v50 = 0;
    char v51 = v45;
    uint64_t v95 = &v97;
    uint64_t v96 = 0x400000000;
    do
    {
      char v52 = v49;
      uint64_t v53 = sub_1CD7EBF14((uint64_t)a3, 2 * v46 + 3 + v50, (const llvm::APInt *)&v92, (llvm *)5, 0, 0, 0);
      uint64_t v56 = *((void *)a3 + 104);
      if (v56) {
        LOWORD(v56) = *(_WORD *)(v56 + 8);
      }
      uint64_t v58 = sub_1CCFDED5C((uint64_t)a3, 148, (const llvm::APInt *)&v92, (llvm *)0xA, 0, (uint64_t)v40, v42, v55, (uint64_t)v53, v54, v56);
      if (v96 >= (unint64_t)HIDWORD(v96)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      __int16 v59 = (uint64_t **)((char *)v95 + 16 * v96);
      *__int16 v59 = v58;
      v59[1] = v57;
      LODWORD(v96) = v96 + 1;
      char v49 = 1;
      uint64_t v50 = 1;
    }
    while ((v52 & 1) == 0);
    uint64_t v60 = v95;
    uint64_t v88 = v92;
    if (v92) {
      llvm::MetadataTracking::track((uint64_t)&v88, v92, 2);
    }
    int v89 = v93;
    uint64_t v61 = sub_1CD3F7F0C(v60, 2u, 10, (uint64_t)a3, (const llvm::APInt *)&v88);
    uint64_t v62 = *a4 + 16 * (*(_DWORD *)(a1 + 72) + v46);
    *(void *)uint64_t v62 = v61;
    *(_DWORD *)(v62 + 8) = v63;
    if (v88)
    {
      int v64 = *v88;
      if ((v64 - 4) > 0x1E)
      {
        if ((v64 - 3) >= 0xFFFFFFFE) {
          uint64_t v65 = v88;
        }
        else {
          uint64_t v65 = 0;
        }
        if ((v64 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v66 = (unint64_t)(v65 + 8);
LABEL_64:
          uint64_t v94 = &v88;
          sub_1CC5FA668(v66 + 16, &v94);
          goto LABEL_55;
        }
        if (v64 == 3) {
          *((void *)v88 + 1) = 0;
        }
      }
      else if ((v88[1] & 0x7F) == 2 || *((_DWORD *)v88 + 3))
      {
        uint64_t v67 = *((void *)v88 + 2);
        if ((v67 & 4) != 0)
        {
          unint64_t v66 = v67 & 0xFFFFFFFFFFFFFFF8;
          if (v66) {
            goto LABEL_64;
          }
        }
      }
    }
LABEL_55:
    if (v95 != &v97) {
      free(v95);
    }
    char v45 = 1;
    uint64_t v46 = 1;
  }
  while ((v51 & 1) == 0);
  uint64_t v68 = sub_1CD3DD4D8((uint64_t)a3, (llvm *)0xA, 0);
  uint64_t v95 = &v97;
  *(void *)&long long v97 = v68;
  *((void *)&v97 + 1) = v69;
  uint64_t v98 = v68;
  uint64_t v99 = v69;
  uint64_t v96 = 0x400000002;
  uint64_t v86 = v92;
  if (v92) {
    llvm::MetadataTracking::track((uint64_t)&v86, v92, 2);
  }
  int v87 = v93;
  uint64_t v70 = sub_1CD3F7F0C(&v97, 2u, 10, (uint64_t)a3, (const llvm::APInt *)&v86);
  uint64_t v71 = *a4 + 16 * (*(_DWORD *)(a1 + 72) + 2);
  *(void *)uint64_t v71 = v70;
  *(_DWORD *)(v71 + 8) = v72;
  if (v86)
  {
    int v73 = *v86;
    if ((v73 - 4) > 0x1E)
    {
      if ((v73 - 3) >= 0xFFFFFFFE) {
        __int16 v74 = v86;
      }
      else {
        __int16 v74 = 0;
      }
      if ((v73 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v75 = (unint64_t)(v74 + 8);
        goto LABEL_83;
      }
      if (v73 == 3) {
        *((void *)v86 + 1) = 0;
      }
    }
    else if ((v86[1] & 0x7F) == 2 || *((_DWORD *)v86 + 3))
    {
      uint64_t v80 = *((void *)v86 + 2);
      if ((v80 & 4) != 0)
      {
        unint64_t v75 = v80 & 0xFFFFFFFFFFFFFFF8;
        if (v75)
        {
LABEL_83:
          uint64_t v94 = &v86;
          sub_1CC5FA668(v75 + 16, &v94);
        }
      }
    }
  }
  if (v95 != &v97) {
    free(v95);
  }
LABEL_14:
  if (v92)
  {
    int v26 = *v92;
    if ((v26 - 4) > 0x1E)
    {
      if ((v26 - 3) >= 0xFFFFFFFE) {
        uint64_t v27 = v92;
      }
      else {
        uint64_t v27 = 0;
      }
      if ((v26 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v28 = (unint64_t)(v27 + 8);
        goto LABEL_24;
      }
      if (v26 == 3) {
        *((void *)v92 + 1) = 0;
      }
    }
    else if ((v92[1] & 0x7F) == 2 || *((_DWORD *)v92 + 3))
    {
      uint64_t v78 = *((void *)v92 + 2);
      if ((v78 & 4) != 0)
      {
        unint64_t v28 = v78 & 0xFFFFFFFFFFFFFFF8;
        if (v28)
        {
LABEL_24:
          uint64_t v95 = &v92;
          sub_1CC5FA668(v28 + 16, &v95);
        }
      }
    }
  }
}

uint64_t *sub_1CB8D7788(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v80 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v80, v8, 2);
  }
  int v81 = *(_DWORD *)(a2 + 60);
  int v9 = *(uint64_t **)(a2 + 32);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = v9[10];
  uint64_t v13 = v9[11];
  uint64_t v14 = v9[15];
  uint64_t v15 = v9[16];
  uint64_t v16 = v9[20];
  uint64_t v17 = v9[21];
  uint64_t v84 = v86;
  uint64_t v85 = 0x700000000;
  sub_1CB8F0E50((uint64_t)&v84, v12, v13, v14, v15, v16, v17, a1);
  uint64_t v18 = sub_1CD7FAB44(a1, 5, 0, 4, 0, 1, 0);
  uint64_t v20 = v18;
  uint64_t v22 = v21;
  if (!a3)
  {
    int v27 = 264;
    goto LABEL_20;
  }
  if (!a4)
  {
    uint64_t v28 = sub_1CD7FFD7C(a1, 5, 0, 4, 0, 174, 0, v19, 1, 0);
    uint64_t v22 = v29;
    uint64_t v30 = *(void *)(a2 + 32);
    uint64_t v31 = *(void *)(v30 + 200);
    uint64_t v24 = *(void *)(v30 + 208);
    uint64_t v32 = *(unsigned __int8 **)(v31 + 64);
    int v82 = v32;
    if (v32) {
      llvm::MetadataTracking::track((uint64_t)&v82, v32, 2);
    }
    int v83 = *(_DWORD *)(v31 + 60);
    uint64_t v33 = sub_1CD7EBF14(a1, 0, (const llvm::APInt *)&v82, (llvm *)5, 0, 0, 0);
    __int16 v36 = 0;
    uint64_t v37 = *(void *)(a1 + 832);
    if (v37) {
      __int16 v36 = *(_WORD *)(v37 + 8);
    }
    uint64_t v78 = v10;
    uint64_t v79 = v28;
    uint64_t v77 = v11;
    unint64_t v75 = sub_1CCFDED5C(a1, 53, (const llvm::APInt *)&v82, (llvm *)5, 0, v31, v24, v35, (uint64_t)v33, v34, v36);
    int v76 = v38;
    uint64_t v39 = sub_1CD7EBF14(a1, 1, (const llvm::APInt *)&v82, (llvm *)5, 0, 0, 0);
    __int16 v42 = 0;
    uint64_t v43 = *(void *)(a1 + 832);
    if (v43) {
      __int16 v42 = *(_WORD *)(v43 + 8);
    }
    uint64_t v44 = sub_1CCFDED5C(a1, 53, (const llvm::APInt *)&v82, (llvm *)5, 0, v31, v24, v41, (uint64_t)v39, v40, v42);
    int v46 = v45;
    uint64_t v47 = sub_1CD7EBF14(a1, 27, (const llvm::APInt *)&v82, (llvm *)5, 0, 1, 0);
    int v49 = v48;
    uint64_t v50 = sub_1CD7EBF14(a1, 33, (const llvm::APInt *)&v82, (llvm *)5, 0, 1, 0);
    int v52 = v51;
    uint64_t v53 = sub_1CD7EBF14(a1, 34, (const llvm::APInt *)&v82, (llvm *)5, 0, 1, 0);
    int v87 = v47;
    int v88 = v49;
    int v89 = v75;
    int v90 = v76;
    int v91 = v50;
    int v92 = v52;
    int v93 = v44;
    int v94 = v46;
    uint64_t v95 = v53;
    int v96 = v54;
    int v25 = sub_1CD801450(a1, 18, (uint64_t)&v82, (llvm *)0xAE, 0, (uint64_t *)&v87, 5);
    uint64_t v11 = v77;
    uint64_t v10 = v78;
    if (!v82) {
      goto LABEL_17;
    }
    int v55 = *v82;
    if ((v55 - 4) > 0x1E)
    {
      if ((v55 - 3) >= 0xFFFFFFFE) {
        uint64_t v71 = v82;
      }
      else {
        uint64_t v71 = 0;
      }
      if ((v55 - 3) < 0xFFFFFFFE)
      {
        if (v55 == 3) {
          *((void *)v82 + 1) = 0;
        }
        goto LABEL_17;
      }
      unint64_t v72 = (unint64_t)(v71 + 8);
    }
    else
    {
      if ((v82[1] & 0x7F) != 2 && !*((_DWORD *)v82 + 3)) {
        goto LABEL_17;
      }
      uint64_t v74 = *((void *)v82 + 2);
      if ((v74 & 4) == 0) {
        goto LABEL_17;
      }
      unint64_t v72 = v74 & 0xFFFFFFFFFFFFFFF8;
      if (!v72) {
        goto LABEL_17;
      }
    }
    int v87 = (uint64_t *)&v82;
    sub_1CC5FA668(v72 + 16, &v87);
LABEL_17:
    uint64_t v26 = 0;
    int v27 = 262;
    goto LABEL_18;
  }
  uint64_t v79 = v18;
  uint64_t v23 = *(void *)(a2 + 32);
  int v25 = *(uint64_t **)(v23 + 200);
  uint64_t v24 = *(void *)(v23 + 208);
  uint64_t v26 = v24;
  int v27 = 263;
LABEL_18:
  unint64_t v56 = v26 | v24 & 0xFFFFFFFF00000000;
  if (v85 >= HIDWORD(v85)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v57 = (uint64_t **)((char *)v84 + 16 * v85);
  *uint64_t v57 = v25;
  v57[1] = (uint64_t *)v56;
  LODWORD(v85) = v85 + 1;
  uint64_t v20 = v79;
LABEL_20:
  __int16 v59 = sub_1CD7EBF14(a1, 0, (const llvm::APInt *)&v80, (llvm *)5, 0, 1, 0);
  if (v85 >= HIDWORD(v85)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v60 = (uint64_t **)((char *)v84 + 16 * v85);
  *uint64_t v60 = v59;
  v60[1] = v58;
  LODWORD(v85) = v85 + 1;
  uint64_t v62 = sub_1CD7EEB94(a1, 0, (llvm *)5, 0);
  if (v85 >= HIDWORD(v85)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v63 = (uint64_t *)((char *)v84 + 16 * v85);
  uint64_t *v63 = v62;
  v63[1] = v61;
  unsigned int v64 = v85 + 1;
  LODWORD(v85) = v64;
  if (v64 >= HIDWORD(v85)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v65 = (char *)v84 + 16 * v64;
  void *v65 = v10;
  v65[1] = v11;
  LODWORD(v85) = v85 + 1;
  unint64_t v66 = sub_1CD801044(a1, v27, (uint64_t)&v80, v20, v22, (uint64_t *)v84, v85);
  if (v84 != v86) {
    free(v84);
  }
  if (v80)
  {
    int v67 = *v80;
    if ((v67 - 4) > 0x1E)
    {
      if ((v67 - 3) >= 0xFFFFFFFE) {
        uint64_t v69 = v80;
      }
      else {
        uint64_t v69 = 0;
      }
      if ((v67 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v70 = (unint64_t)(v69 + 8);
LABEL_35:
        uint64_t v84 = &v80;
        sub_1CC5FA668(v70 + 16, &v84);
        return v66;
      }
      if (v67 == 3) {
        *((void *)v80 + 1) = 0;
      }
    }
    else if ((v80[1] & 0x7F) == 2 || *((_DWORD *)v80 + 3))
    {
      uint64_t v73 = *((void *)v80 + 2);
      if ((v73 & 4) != 0)
      {
        unint64_t v70 = v73 & 0xFFFFFFFFFFFFFFF8;
        if (v70) {
          goto LABEL_35;
        }
      }
    }
  }
  return v66;
}

uint64_t *sub_1CB8D7D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v136 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 40);
  int v7 = *(llvm **)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  unsigned int v9 = *(unsigned __int16 *)(a2 + 26);
  uint64_t v10 = *(void *)(a2 + 96);
  if ((*(void *)(v10 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v12 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v10 + 24)) + 7) >> 3;
    if (v11 == 1) {
  }
    }
  else
  {
    unint64_t v12 = -1;
  }
  unsigned __int8 v13 = 63
      - __clz(((1 << *(unsigned char *)(v10 + 34)) | *(void *)(v10 + 8)) & -((1 << *(unsigned char *)(v10 + 34)) | *(void *)(v10 + 8)));
  uint64_t v14 = *(unsigned __int8 **)(v4 + 64);
  int v116 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v116, v14, 2);
  }
  int v117 = *(_DWORD *)(v4 + 60);
  if (v13 <= 1u && (1 << v13) % v12)
  {
    uint64_t v93 = v8;
    int v92 = (v9 >> 10) & 3;
    uint64_t v28 = *(uint64_t **)(v4 + 32);
    uint64_t v99 = v28[1];
    uint64_t v100 = *v28;
    uint64_t v29 = (llvm *)sub_1CB8E5DAC(*(llvm::LLVMContext **)(*(void *)(a3 + 16) + 56), 3, 0, v12, 0);
    uint64_t v102 = a3;
    uint64_t v97 = v30;
    uint64_t v98 = v29;
    uint64_t v31 = sub_1CD3DD4D8(*(void *)(a3 + 16), v29, v30);
    unint64_t v33 = v32;
    uint64_t v34 = *(void *)(v4 + 32);
    unint64_t v35 = *(void *)(v34 + 48);
    uint64_t v103 = *(uint64_t **)(v34 + 40);
    unsigned int v120 = &v122;
    uint64_t v121 = 0x800000000;
    *(void *)&long long v134 = v135;
    *((void *)&v134 + 1) = 0x800000000;
    if (v12)
    {
      uint64_t v95 = v4;
      unint64_t v96 = v12;
      uint64_t v48 = 0;
      unsigned int v49 = 1;
      uint64_t v94 = a1;
      do
      {
        uint64_t v101 = (uint64_t)v31;
        uint64_t v50 = *(void *)(v102 + 16);
        sub_1CB8F0264(*(uint64_t **)(v4 + 96), v48, (uint64_t)&v114);
        __int16 v51 = *(_WORD *)(*(void *)(v4 + 96) + 32);
        memset(v104, 0, sizeof(v104));
        long long v118 = v114;
        uint64_t v119 = v115;
        int v52 = sub_1CD7F00F8(v50, 3, 0, (uint64_t)&v116, v100, v99, (uint64_t)v103, v35, &v118, 256, 0, v51, v104, 0);
        unint64_t v54 = v53;
        uint64_t v55 = sub_1CB8D7D2C(a1, v52, v102);
        if (v55) {
          uint64_t v57 = v55;
        }
        else {
          uint64_t v57 = (uint64_t)v52;
        }
        if (v55) {
          unint64_t v58 = v54 & 0xFFFFFFFF00000000 | v56;
        }
        else {
          unint64_t v58 = v54;
        }
        uint64_t v59 = v103[5] + 16 * v35;
        uint64_t v60 = *(llvm **)v59;
        uint64_t v61 = *(void *)(v59 + 8);
        uint64_t v62 = *(void *)(v102 + 16);
        int v63 = sub_1CD7EBF14(v62, 1, (const llvm::APInt *)&v116, *(llvm **)v59, v61, 0, 0);
        __int16 v66 = 0;
        uint64_t v67 = *(void *)(v62 + 832);
        if (v67) {
          __int16 v66 = *(_WORD *)(v67 + 8);
        }
        uint64_t v103 = sub_1CCFDED5C(v62, 56, (const llvm::APInt *)&v116, v60, v61, (uint64_t)v103, v35, v65, (uint64_t)v63, v64, v66);
        unsigned int v69 = v68;
        unint64_t v70 = *(void **)(v102 + 16);
        uint64_t v71 = sub_1CD7EBF14((uint64_t)v70, v48, (const llvm::APInt *)&v116, (llvm *)5, 0, 0, 0);
        __int16 v74 = 0;
        uint64_t v75 = v70[104];
        if (v75) {
          __int16 v74 = *(_WORD *)(v75 + 8);
        }
        uint64_t v31 = sub_1CD7F5D38(v70, (const char *)0x93, (const llvm::APInt *)&v116, v98, v97, v101, v33, v73, v57, v58, (uint64_t)v71, v72, SHIDWORD(v72), v74);
        if (v121 >= (unint64_t)HIDWORD(v121)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        a1 = v94;
        uint64_t v4 = v95;
        uint64_t v77 = (uint64_t *)((char *)v120 + 16 * v121);
        *uint64_t v77 = v57;
        v77[1] = 0;
        LODWORD(v121) = v121 + 1;
        if (DWORD2(v134) >= (unint64_t)HIDWORD(v134)) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        unint64_t v35 = v35 & 0xFFFFFFFF00000000 | v69;
        unint64_t v33 = v33 & 0xFFFFFFFF00000000 | v76;
        uint64_t v78 = (uint64_t *)(v134 + 16 * DWORD2(v134));
        *uint64_t v78 = v57;
        v78[1] = 1;
        ++DWORD2(v134);
        uint64_t v48 = v49;
      }
      while (v96 > v49++);
    }
    uint64_t v112 = v116;
    if (v116) {
      llvm::MetadataTracking::track((uint64_t)&v112, v116, 2);
    }
    int v113 = v117;
    __int16 v36 = sub_1CD3E3318(a1, (uint64_t)v31, (void *)v33, v7, v93, v92, (const llvm::APInt *)&v112, v102);
    uint64_t v38 = v37;
    uint64_t v39 = (void *)(v33 & 0xFFFFFFFF00000000 | v37);
    if (v112)
    {
      int v40 = *v112;
      if ((v40 - 4) > 0x1E)
      {
        if ((v40 - 3) >= 0xFFFFFFFE) {
          int v88 = v112;
        }
        else {
          int v88 = 0;
        }
        if ((v40 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v89 = (unint64_t)(v88 + 8);
LABEL_90:
          *(void *)&v104[0] = &v112;
          sub_1CC5FA668(v89 + 16, v104);
          goto LABEL_50;
        }
        if (v40 == 3) {
          *((void *)v112 + 1) = 0;
        }
      }
      else if ((v112[1] & 0x7F) == 2 || *((_DWORD *)v112 + 3))
      {
        uint64_t v91 = *((void *)v112 + 2);
        if ((v91 & 4) != 0)
        {
          unint64_t v89 = v91 & 0xFFFFFFFFFFFFFFF8;
          if (v89) {
            goto LABEL_90;
          }
        }
      }
    }
LABEL_50:
    uint64_t v41 = (unsigned __int8 *)(v36[5] + 16 * v38);
    int v42 = *v41;
    if (v42 != v7 || ((uint64_t v43 = *((void *)v41 + 1), !v42) ? (v44 = v43 == v93) : (v44 = 1), !v44))
    {
      int v45 = *(llvm::APFloatBase **)(v102 + 16);
      uint64_t v46 = *((void *)v45 + 104);
      if (v46) {
        __int16 v47 = *(_WORD *)(v46 + 8);
      }
      else {
        __int16 v47 = 0;
      }
      __int16 v36 = sub_1CD7F3564(v45, (const char *)0xD8, (uint64_t)&v116, v7, v93, (uint64_t)v36, v39, v47);
      LODWORD(v39) = v80;
    }
    int v81 = *(void **)(v102 + 16);
    uint64_t v82 = v81[104];
    if (v82) {
      uint64_t v83 = *(unsigned __int16 *)(v82 + 8);
    }
    else {
      uint64_t v83 = 0;
    }
    uint64_t v84 = sub_1CD7FF4E8(v81, (const char *)2, (const llvm::APInt *)&v116, (llvm *)1, 0, (uint64_t *)v134, DWORD2(v134), v83);
    uint64_t v16 = sub_1CD7FFB18(*(void **)(v102 + 16), (const char *)0x37, (const llvm::APInt *)&v116, *(void *)(v4 + 40), *(unsigned __int16 *)(v4 + 58), (uint64_t)v36, (int)v39, v86, (uint64_t)v84, v85);
    if ((_WORD *)v134 != v135) {
      free((void *)v134);
    }
    int v87 = v120;
    if (v120 != &v122) {
      goto LABEL_82;
    }
    goto LABEL_30;
  }
  int v15 = *(_DWORD *)(*(void *)(v4 + 96) + 16);
  if (v15 > 2)
  {
    if (v15 == 3)
    {
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2208))(a1, v4, a3);
      goto LABEL_29;
    }
    if (v15 == 64)
    {
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2216))(a1, v4, a3);
LABEL_29:
      uint64_t v16 = (uint64_t *)v23;
      goto LABEL_30;
    }
LABEL_100:
    *(void *)&long long v134 = "Load from unsupported address space: ";
    v135[8] = 259;
    __int16 v105 = 264;
    LODWORD(v104[0]) = v15;
    sub_1CD3E3950((uint64_t *)&v134, (uint64_t *)v104, (uint64_t)&v120);
    llvm::report_fatal_error((llvm *)&v120, (const llvm::Twine *)1);
  }
  if ((v15 - 1) >= 2)
  {
    if (!v15)
    {
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 2192))(a1, v4, a3);
      goto LABEL_29;
    }
    goto LABEL_100;
  }
  LOBYTE(v104[0]) = 0;
  uint64_t v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)a1 + 2200))(a1, v4, a3, v104);
  if (LOBYTE(v104[0]))
  {
    uint64_t v17 = *(void *)(*(void *)(a3 + 16) + 16);
    llvm::DiagnosticLocation::DiagnosticLocation(&v134, (const llvm::DebugLoc *)&v116);
    uint64_t v18 = *(void *)(*(void *)(v17 + 640) + 16);
    uint64_t v19 = *(void *)(v18 + 56);
    LODWORD(v121) = 11;
    BYTE4(v121) = 2;
    long long v123 = v134;
    uint64_t v122 = v19;
    uint64_t v124 = "agx1-lower";
    uint64_t v125 = "DeviceLoadAddrMode";
    uint64_t v126 = 18;
    char v127 = 0;
    char v128 = 0;
    uint64_t v129 = v131;
    uint64_t v130 = 0x400000000;
    v131[256] = 0;
    int v132 = -1;
    uint64_t v133 = v18;
    unsigned int v120 = &unk_1F26165E0;
    char v107 = 6;
    strcpy((char *)v106, "String");
    __p = operator new(0x38uLL);
    long long v109 = xmmword_1CD935EE0;
    strcpy((char *)__p, "Zero-extended device memory load cannot fold addr mode");
    uint64_t v110 = 0;
    uint64_t v111 = 0;
    sub_1CD3D6290((uint64_t)&v120, (long long *)v106);
    if (SHIBYTE(v109) < 0) {
      operator delete(__p);
    }
    if (v107 < 0) {
      operator delete(v106[0]);
    }
    llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(*(void *)(a3 + 16) + 88), (llvm::DiagnosticInfoOptimizationBase *)&v120);
    unsigned int v120 = &unk_1F2616800;
    uint64_t v20 = v129;
    if (v130)
    {
      unint64_t v21 = (unint64_t)v130 << 6;
      do
      {
        uint64_t v22 = (void **)&v20[v21];
        if ((char)v20[v21 - 17] < 0) {
          operator delete(*(v22 - 5));
        }
        if (*((char *)v22 - 41) < 0) {
          operator delete(*(v22 - 8));
        }
        v21 -= 64;
      }
      while (v21);
      uint64_t v20 = v129;
    }
    if (v20 != v131)
    {
      int v87 = v20;
LABEL_82:
      free(v87);
    }
  }
LABEL_30:
  if (v116)
  {
    int v24 = *v116;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        uint64_t v26 = v116;
      }
      else {
        uint64_t v26 = 0;
      }
      if ((v24 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v27 = (unint64_t)(v26 + 8);
LABEL_40:
        unsigned int v120 = &v116;
        sub_1CC5FA668(v27 + 16, &v120);
        return v16;
      }
      if (v24 == 3) {
        *((void *)v116 + 1) = 0;
      }
    }
    else if ((v116[1] & 0x7F) == 2 || *((_DWORD *)v116 + 3))
    {
      uint64_t v90 = *((void *)v116 + 2);
      if ((v90 & 4) != 0)
      {
        unint64_t v27 = v90 & 0xFFFFFFFFFFFFFFF8;
        if (v27) {
          goto LABEL_40;
        }
      }
    }
  }
  return v16;
}

void sub_1CB8D86C0(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, const char *a7)
{
  uint64_t v239 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = *(unsigned __int8 **)(a5 + 64);
  int v228 = v14;
  if (v14) {
    llvm::MetadataTracking::track((uint64_t)&v228, v14, 2);
  }
  int v229 = *(_DWORD *)(a5 + 60);
  uint64_t v15 = *(void *)(a1[2][5] + 344);
  __int16 v16 = (*(uint64_t (**)(uint64_t, void))(*(void *)v15 + 400))(v15, *(void *)(a2 + 80));
  uint64_t v18 = v17;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 336))(v15);
  __int16 v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 24))(v19, v18);
  int v24 = sub_1CD7EBF14((uint64_t)a1[2], (unsigned __int16)(*(_WORD *)(a2 + 88) + v20 * v16), (const llvm::APInt *)&v228, (llvm *)4, 0, 0, 0);
  unint64_t v26 = v25;
  if (!a3) {
    goto LABEL_4;
  }
  __int16 v66 = (llvm::APFloatBase *)a1[2];
  uint64_t v67 = *(void **)(a5 + 64);
  uint64_t v231 = v67;
  if (v67) {
    llvm::MetadataTracking::track((uint64_t)&v231, (unsigned __int8 *)v67, 2);
  }
  LODWORD(v232) = *(_DWORD *)(a5 + 60);
  uint64_t v68 = *((void *)v66 + 104);
  if (v68) {
    __int16 v69 = *(_WORD *)(v68 + 8);
  }
  else {
    __int16 v69 = 0;
  }
  uint64_t v77 = sub_1CD7F3564(v66, (const char *)0xC9, (uint64_t)&v231, (llvm *)4, 0, a3, a4, v69);
  uint64_t v79 = v78;
  if (v231)
  {
    int v80 = *(unsigned __int8 *)v231;
    if ((v80 - 4) > 0x1E)
    {
      if ((v80 - 3) >= 0xFFFFFFFE) {
        uint64_t v129 = v231;
      }
      else {
        uint64_t v129 = 0;
      }
      if ((v80 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v130 = (unint64_t)v129 + 8;
LABEL_138:
        uint64_t v235 = (unsigned __int8 **)&v231;
        sub_1CC5FA668(v130 + 16, &v235);
        goto LABEL_84;
      }
      if (v80 == 3) {
        *((void *)v231 + 1) = 0;
      }
    }
    else if ((*((unsigned char *)v231 + 1) & 0x7F) == 2 || *((_DWORD *)v231 + 3))
    {
      uint64_t v210 = *((void *)v231 + 2);
      if ((v210 & 4) != 0)
      {
        unint64_t v130 = v210 & 0xFFFFFFFFFFFFFFF8;
        if (v130) {
          goto LABEL_138;
        }
      }
    }
  }
LABEL_84:
  uint64_t v81 = (uint64_t)a1[2];
  uint64_t v82 = *(void **)(a5 + 64);
  uint64_t v231 = v82;
  if (v82) {
    llvm::MetadataTracking::track((uint64_t)&v231, (unsigned __int8 *)v82, 2);
  }
  LODWORD(v232) = *(_DWORD *)(a5 + 60);
  uint64_t v83 = *(void *)(v81 + 832);
  if (v83) {
    LOWORD(v83) = *(_WORD *)(v83 + 8);
  }
  int v24 = sub_1CCFDED5C(v81, 56, (const llvm::APInt *)&v231, (llvm *)4, 0, (uint64_t)v24, v26, v76, (uint64_t)v77, v79, v83);
  unint64_t v26 = v26 & 0xFFFFFFFF00000000 | v84;
  if (v231)
  {
    int v85 = *(unsigned __int8 *)v231;
    if ((v85 - 4) > 0x1E)
    {
      if ((v85 - 3) >= 0xFFFFFFFE) {
        uint64_t v131 = v231;
      }
      else {
        uint64_t v131 = 0;
      }
      if ((v85 - 3) < 0xFFFFFFFE)
      {
        if (v85 == 3) {
          *((void *)v231 + 1) = 0;
        }
        goto LABEL_4;
      }
      unint64_t v87 = (unint64_t)v131 + 8;
    }
    else
    {
      if ((*((unsigned char *)v231 + 1) & 0x7F) != 2 && !*((_DWORD *)v231 + 3)) {
        goto LABEL_4;
      }
      uint64_t v86 = *((void *)v231 + 2);
      if ((v86 & 4) == 0) {
        goto LABEL_4;
      }
      unint64_t v87 = v86 & 0xFFFFFFFFFFFFFFF8;
      if (!v87) {
        goto LABEL_4;
      }
    }
    uint64_t v235 = (unsigned __int8 **)&v231;
    sub_1CC5FA668(v87 + 16, &v235);
  }
LABEL_4:
  unint64_t v27 = *(llvm ***)(a5 + 40);
  uint64_t v29 = *v27;
  uint64_t v28 = (uint64_t)v27[1];
  uint64_t v226 = v29;
  uint64_t v227 = v28;
  if ((_BYTE)v29)
  {
    if (v29 - 15 < 0x9C)
    {
      LOBYTE(EVT) = sub_1CB8C2FBC((unsigned __int8 *)&v226);
      unint64_t v31 = 0;
      unint64_t v32 = 0;
      goto LABEL_102;
    }
LABEL_8:
    unint64_t v33 = *(llvm **)(a5 + 80);
    if (v33 != 3)
    {
      if (v33 == 6)
      {
        uint64_t v34 = sub_1CB8F13A8((uint64_t)a1, a5, (uint64_t)v24, (void *)v26, a6, a7, v22, v23);
LABEL_11:
        __int16 v36 = v34;
        LODWORD(v37) = v35;
        goto LABEL_42;
      }
      uint64_t v41 = *(void *)(a5 + 88);
      int v42 = (llvm::APFloatBase *)a1[2];
      double v224 = v228;
      if (v228) {
        llvm::MetadataTracking::track((uint64_t)&v224, v228, 2);
      }
      int v225 = v229;
      __int16 v36 = sub_1CB8F17C4(v42, a7, (uint64_t)&v224, v33, v41, (uint64_t)v24, (void *)v26, v23, (uint64_t)v33, v41);
      unint64_t v37 = v43;
      if (v224)
      {
        int v44 = *v224;
        if ((v44 - 4) > 0x1E)
        {
          if ((v44 - 3) >= 0xFFFFFFFE) {
            __int16 v74 = v224;
          }
          else {
            __int16 v74 = 0;
          }
          if ((v44 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v75 = (unint64_t)(v74 + 8);
LABEL_78:
            uint64_t v231 = &v224;
            sub_1CC5FA668(v75 + 16, &v231);
            goto LABEL_21;
          }
          if (v44 == 3) {
            *((void *)v224 + 1) = 0;
          }
        }
        else if ((v224[1] & 0x7F) == 2 || *((_DWORD *)v224 + 3))
        {
          uint64_t v207 = *((void *)v224 + 2);
          if ((v207 & 4) != 0)
          {
            unint64_t v75 = v207 & 0xFFFFFFFFFFFFFFF8;
            if (v75) {
              goto LABEL_78;
            }
          }
        }
      }
LABEL_21:
      int v45 = (*(unsigned __int16 *)(a5 + 26) >> 10) & 3;
      if (v45 != 1)
      {
        if (v45 == 3)
        {
          uint64_t v46 = (llvm::APFloatBase *)a1[2];
          __int16 v47 = v226;
          uint64_t v48 = v227;
          uint64_t v117 = *((void *)v46 + 104);
          if (v117) {
            __int16 v50 = *(_WORD *)(v117 + 8);
          }
          else {
            __int16 v50 = 0;
          }
          uint64_t v144 = 199;
          goto LABEL_171;
        }
        if (v45 == 2)
        {
          uint64_t v46 = (llvm::APFloatBase *)a1[2];
          __int16 v47 = v226;
          uint64_t v48 = v227;
          uint64_t v49 = *((void *)v46 + 104);
          if (v49) {
            __int16 v50 = *(_WORD *)(v49 + 8);
          }
          else {
            __int16 v50 = 0;
          }
          uint64_t v144 = 198;
          goto LABEL_171;
        }
LABEL_42:
        uint64_t v59 = *(uint64_t **)(a5 + 32);
        uint64_t v61 = *v59;
        uint64_t v60 = v59[1];
        uint64_t v62 = *a1;
        uint64_t v231 = v36;
        LODWORD(v232) = v37;
LABEL_43:
        uint64_t v233 = v61;
        int v234 = v60;
        sub_1CCEF083C(v62, a5, (uint64_t *)&v231, 2, 1);
        goto LABEL_44;
      }
      if ((_BYTE)v226)
      {
        if (((_BYTE)v226 + 104) < 0x13u
          || ((_BYTE)v226 - 8) < 7u
          || ((_BYTE)v226 - 75) < 0x2Du)
        {
LABEL_162:
          uint64_t v144 = 215;
LABEL_163:
          uint64_t v46 = (llvm::APFloatBase *)a1[2];
          __int16 v47 = v226;
          uint64_t v48 = v227;
          uint64_t v145 = *((void *)v46 + 104);
          if (v145) {
            __int16 v50 = *(_WORD *)(v145 + 8);
          }
          else {
            __int16 v50 = 0;
          }
LABEL_171:
          uint64_t v34 = sub_1CD7F3564(v46, (const char *)v144, (uint64_t)&v228, v47, v48, (uint64_t)v36, (void *)v37, v50);
          goto LABEL_11;
        }
      }
      else
      {
        int v124 = *(_DWORD *)(v227 + 8);
        if ((v124 & 0xFE) == 0x12) {
          int v124 = *(_DWORD *)(**(void **)(v227 + 16) + 8);
        }
        if (v124 <= 6u) {
          goto LABEL_162;
        }
      }
      uint64_t v144 = 200;
      goto LABEL_163;
    }
    uint64_t v38 = *(void **)(a5 + 64);
    uint64_t v231 = v38;
    if (v38)
    {
      llvm::MetadataTracking::track((uint64_t)&v231, (unsigned __int8 *)v38, 2);
      int v39 = *(_DWORD *)(a5 + 60);
      LODWORD(v232) = v39;
      int v40 = (llvm::APFloatBase *)a1[2];
      uint64_t v235 = (unsigned __int8 **)v231;
      if (v231)
      {
        llvm::MetadataTracking::track((uint64_t)&v235, (unsigned __int8 *)v231, 2);
        int v39 = v232;
      }
    }
    else
    {
      int v39 = *(_DWORD *)(a5 + 60);
      LODWORD(v232) = v39;
      int v40 = (llvm::APFloatBase *)a1[2];
      uint64_t v235 = 0;
    }
    int v236 = v39;
    __int16 v36 = sub_1CB8F17C4(v40, a7, (uint64_t)&v235, (llvm *)4, 0, (uint64_t)v24, (void *)v26, v23, 3, 0);
    unint64_t v52 = v51;
    if (v235)
    {
      int v53 = *(unsigned __int8 *)v235;
      if ((v53 - 4) > 0x1E)
      {
        if ((v53 - 3) >= 0xFFFFFFFE) {
          uint64_t v70 = (uint64_t)v235;
        }
        else {
          uint64_t v70 = 0;
        }
        if ((v53 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v71 = v70 + 8;
LABEL_66:
          unsigned int v222 = (void **)&v235;
          sub_1CC5FA668(v71 + 16, &v222);
          goto LABEL_31;
        }
        if (v53 == 3) {
          v235[1] = 0;
        }
      }
      else if ((*((unsigned char *)v235 + 1) & 0x7F) == 2 || *((_DWORD *)v235 + 3))
      {
        unint64_t v208 = (unint64_t)v235[2];
        if ((v208 & 4) != 0)
        {
          unint64_t v71 = v208 & 0xFFFFFFFFFFFFFFF8;
          if (v71) {
            goto LABEL_66;
          }
        }
      }
    }
LABEL_31:
    int v54 = (*(unsigned __int16 *)(a5 + 26) >> 10) & 3;
    uint64_t v55 = *(void *)(a5 + 40);
    unsigned int v56 = *(llvm **)v55;
    uint64_t v57 = *(void *)(v55 + 8);
    if (a7 == 395)
    {
      uint64_t v106 = (llvm::APFloatBase *)a1[2];
      uint64_t v107 = *((void *)v106 + 104);
      if (v107) {
        __int16 v108 = *(_WORD *)(v107 + 8);
      }
      else {
        __int16 v108 = 0;
      }
      uint64_t v219 = sub_1CD7F3564(v106, (const char *)0xD8, (uint64_t)&v231, (llvm *)0x1B, 0, (uint64_t)v36, (void *)v52, v108);
      unsigned int v215 = v133;
      uint64_t v134 = v24[5] + 16 * v26;
      int v135 = *(llvm **)v134;
      uint64_t v136 = *(void *)(v134 + 8);
      int v137 = *((unsigned __int16 *)v24 + 12);
      if (v137 == 35 || v137 == 11)
      {
        uint64_t v139 = v24[10];
        uint64_t v140 = (void *)(v139 + 24);
        if (*(_DWORD *)(v139 + 32) >= 0x41u) {
          uint64_t v140 = (void *)*v140;
        }
        uint64_t v141 = sub_1CD7EBF14((uint64_t)a1[2], *v140 & 1, (const llvm::APInt *)&v231, v135, v136, 0, 0);
      }
      else
      {
        uint64_t v146 = sub_1CD7EBF14((uint64_t)a1[2], 1, (const llvm::APInt *)&v231, v135, v136, 0, 0);
        uint64_t v149 = (uint64_t)a1[2];
        uint64_t v150 = *(void *)(v149 + 832);
        if (v150) {
          LOWORD(v150) = *(_WORD *)(v150 + 8);
        }
        uint64_t v141 = sub_1CCFDED5C(v149, 171, (const llvm::APInt *)&v231, v135, v136, (uint64_t)v24, v26, v148, (uint64_t)v146, v147, v150);
      }
      uint64_t v151 = (uint64_t)a1[2];
      uint64_t v152 = *(void *)(v151 + 832);
      if (v152) {
        LOWORD(v152) = *(_WORD *)(v152 + 8);
      }
      __int16 v36 = sub_1CCFDED5C(v151, 437, (const llvm::APInt *)&v231, (llvm *)4, 0, (uint64_t)v219, v215 | v52 & 0xFFFFFFFF00000000, v143, (uint64_t)v141, v142, v152);
      LODWORD(v37) = v153;
    }
    else
    {
      LODWORD(v37) = v52;
    }
    if ((v54 - 1) <= 2 && v56 != 4)
    {
      uint64_t v103 = (llvm::APFloatBase *)a1[2];
      uint64_t v104 = *((void *)v103 + 104);
      if (v104) {
        __int16 v105 = *(_WORD *)(v104 + 8);
      }
      else {
        __int16 v105 = 0;
      }
      __int16 v36 = sub_1CD7F3564(v103, (const char *)0xC8, (uint64_t)&v231, v56, v57, (uint64_t)v36, (void *)(v52 & 0xFFFFFFFF00000000 | v37), v105);
      LODWORD(v37) = v132;
    }
    if (v54 == 3)
    {
      uint64_t v118 = (uint64_t)a1[2];
      unint64_t v119 = v52 & 0xFFFFFFFF00000000 | v37;
      unsigned int v120 = sub_1CD7EBF14(v118, 255, (const llvm::APInt *)&v231, v56, v57, 0, 0);
      uint64_t v123 = *(void *)(v118 + 832);
      if (v123) {
        LOWORD(v123) = *(_WORD *)(v123 + 8);
      }
      uint64_t v115 = sub_1CCFDED5C(v118, 171, (const llvm::APInt *)&v231, v56, v57, (uint64_t)v36, v119, v122, (uint64_t)v120, v121, v123);
    }
    else if (v54 == 2)
    {
      uint64_t v109 = (uint64_t)a1[2];
      unint64_t v110 = v52 & 0xFFFFFFFF00000000 | v37;
      uint64_t v111 = sub_1CD7EDE1C(v109, 3, 0);
      uint64_t v114 = *(void *)(v109 + 832);
      if (v114) {
        LOWORD(v114) = *(_WORD *)(v114 + 8);
      }
      uint64_t v115 = sub_1CCFDED5C(v109, 204, (const llvm::APInt *)&v231, v56, v57, (uint64_t)v36, v110, v113, v111, v112, v114);
    }
    else
    {
      if (v54) {
        goto LABEL_38;
      }
      uint64_t v125 = (llvm::APFloatBase *)a1[2];
      uint64_t v126 = (void *)(v52 & 0xFFFFFFFF00000000 | v37);
      uint64_t v127 = *((void *)v125 + 104);
      if (v127) {
        __int16 v128 = *(_WORD *)(v127 + 8);
      }
      else {
        __int16 v128 = 0;
      }
      uint64_t v115 = sub_1CD7F3564(v125, (const char *)0xC9, (uint64_t)&v231, (llvm *)3, 0, (uint64_t)v36, v126, v128);
    }
    __int16 v36 = v115;
    LODWORD(v37) = v116;
LABEL_38:
    if (!v231) {
      goto LABEL_42;
    }
    int v58 = *(unsigned __int8 *)v231;
    if ((v58 - 4) > 0x1E)
    {
      if ((v58 - 3) >= 0xFFFFFFFE) {
        uint64_t v72 = v231;
      }
      else {
        uint64_t v72 = 0;
      }
      if ((v58 - 3) < 0xFFFFFFFE)
      {
        if (v58 == 3) {
          *((void *)v231 + 1) = 0;
        }
        goto LABEL_42;
      }
      unint64_t v73 = (unint64_t)v72 + 8;
    }
    else
    {
      if ((*((unsigned char *)v231 + 1) & 0x7F) != 2 && !*((_DWORD *)v231 + 3)) {
        goto LABEL_42;
      }
      uint64_t v209 = *((void *)v231 + 2);
      if ((v209 & 4) == 0) {
        goto LABEL_42;
      }
      unint64_t v73 = v209 & 0xFFFFFFFFFFFFFFF8;
      if (!v73) {
        goto LABEL_42;
      }
    }
    unsigned int v222 = &v231;
    sub_1CC5FA668(v73 + 16, &v222);
    goto LABEL_42;
  }
  if ((*(_DWORD *)(v28 + 8) & 0xFE) != 0x12) {
    goto LABEL_8;
  }
  unint64_t EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v28 + 24), 0, v21);
  unint64_t v31 = EVT & 0xFFFFFFFFFFFFFF00;
LABEL_102:
  unsigned int v222 = (void **)(v31 | EVT);
  uint64_t v223 = v32;
  unint64_t v89 = (unint64_t)v226;
  uint64_t v88 = v227;
  int v90 = sub_1CD3DB440((llvm::EVT *)&v226, v32);
  uint64_t v218 = 4;
  int v94 = 146;
  int v95 = v90;
  switch((char)v222)
  {
    case 4:
      LOBYTE(v222) = 38;
      uint64_t v223 = 0;
      int v95 = (v90 + 1) >> 1;
      int v204 = (llvm::LLVMContext *)a1[2][7];
      unsigned int v201 = sub_1CD3DB440((llvm::EVT *)&v222, v91) * v95;
      uint64_t v218 = 4;
      unint64_t v202 = v204;
      uint64_t v203 = 4;
      goto LABEL_257;
    case 5:
    case 10:
      goto LABEL_104;
    case 6:
      uint64_t v218 = 8;
      goto LABEL_104;
    case 7:
    case 8:
      __break(1u);
      JUMPOUT(0x1CB8D97B0);
    case 9:
      LOBYTE(v222) = 76;
      uint64_t v223 = 0;
      int v95 = (v90 + 1) >> 1;
      unint64_t v195 = (llvm::LLVMContext *)a1[2][7];
      int v196 = sub_1CD3DB440((llvm::EVT *)&v222, v91);
      unint64_t v89 = sub_1CB8E5DAC(v195, 9, 0, v196 * v95, 0);
      uint64_t v88 = v197;
      uint64_t v218 = 4;
      goto LABEL_258;
    default:
      if (v226 == 27) {
        char v198 = 27;
      }
      else {
        char v198 = 28;
      }
      if (v226 == 27) {
        uint64_t v199 = 2;
      }
      else {
        uint64_t v199 = 4;
      }
      uint64_t v218 = v199;
      if (v226 == 27) {
        int v95 = 1;
      }
      else {
        int v95 = (v90 + 3) >> 2;
      }
      LOBYTE(v222) = v198;
      uint64_t v223 = 0;
      unint64_t v200 = (llvm::LLVMContext *)a1[2][7];
      unsigned int v201 = sub_1CD3DB440((llvm::EVT *)&v222, v91) * v95;
      unint64_t v202 = v200;
      uint64_t v203 = 3;
LABEL_257:
      unint64_t v89 = sub_1CB8E5DAC(v202, v203, 0, v201, 0);
      uint64_t v88 = v205;
LABEL_258:
      int v94 = 149;
LABEL_104:
      if (v95 == 1)
      {
        if (v222 == 6)
        {
          unint64_t v96 = sub_1CB8F13A8((uint64_t)a1, a5, (uint64_t)v24, (void *)v26, a6, a7, v92, v93);
          int v98 = v97;
        }
        else
        {
          uint64_t v99 = (llvm::APFloatBase *)a1[2];
          uint64_t v231 = v228;
          if (v228) {
            llvm::MetadataTracking::track((uint64_t)&v231, v228, 2);
          }
          LODWORD(v232) = v229;
          unint64_t v96 = sub_1CB8F17C4(v99, a7, (uint64_t)&v231, (llvm *)v222, (uint64_t)v223, (uint64_t)v24, (void *)v26, v93, (uint64_t)v222, (uint64_t)v223);
          int v98 = v100;
          if (!v231) {
            goto LABEL_113;
          }
          int v101 = *(unsigned __int8 *)v231;
          if ((v101 - 4) > 0x1E)
          {
            if ((v101 - 3) >= 0xFFFFFFFE) {
              unsigned int v154 = v231;
            }
            else {
              unsigned int v154 = 0;
            }
            if ((v101 - 3) < 0xFFFFFFFE)
            {
              if (v101 == 3) {
                *((void *)v231 + 1) = 0;
              }
              goto LABEL_113;
            }
            unint64_t v155 = (unint64_t)v154 + 8;
          }
          else
          {
            if ((*((unsigned char *)v231 + 1) & 0x7F) != 2 && !*((_DWORD *)v231 + 3)) {
              goto LABEL_113;
            }
            uint64_t v211 = *((void *)v231 + 2);
            if ((v211 & 4) == 0) {
              goto LABEL_113;
            }
            unint64_t v155 = v211 & 0xFFFFFFFFFFFFFFF8;
            if (!v155) {
              goto LABEL_113;
            }
          }
          uint64_t v235 = (unsigned __int8 **)&v231;
          sub_1CC5FA668(v155 + 16, &v235);
        }
LABEL_113:
        uint64_t v102 = *(uint64_t **)(a5 + 32);
        uint64_t v61 = *v102;
        uint64_t v60 = v102[1];
        uint64_t v62 = *a1;
        uint64_t v231 = v96;
        LODWORD(v232) = v98;
        goto LABEL_43;
      }
      unsigned int v212 = v94;
      uint64_t v213 = (llvm *)v89;
      uint64_t v214 = v88;
      char v216 = a6;
      uint64_t v156 = 0;
      uint64_t v231 = &v233;
      uint64_t v232 = 0x400000000;
      int v157 = *((unsigned __int16 *)v24 + 12);
      uint64_t v217 = (uint64_t (*)(uint64_t *, uint64_t *, unint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, unsigned __int8 **))sub_1CB8F191C;
      uint64_t v158 = 0;
      if (v157 != 11 && v157 != 35)
      {
        uint64_t v156 = sub_1CD7EBF14((uint64_t)a1[2], v218, (const llvm::APInt *)&v228, (llvm *)4, 0, 0, 0);
        uint64_t v158 = v159;
        uint64_t v217 = (uint64_t (*)(uint64_t *, uint64_t *, unint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, unsigned __int8 **))sub_1CB8F18D0;
      }
      if (v95 >= 1)
      {
        do
        {
          if (v222 == 6)
          {
            double v160 = sub_1CB8F13A8((uint64_t)a1, a5, (uint64_t)v24, (void *)v26, v216, a7, v92, v93);
            uint64_t v162 = v161;
            goto LABEL_200;
          }
          unsigned int v163 = (llvm::APFloatBase *)a1[2];
          uint64_t v235 = (unsigned __int8 **)v228;
          if (v228) {
            llvm::MetadataTracking::track((uint64_t)&v235, v228, 2);
          }
          int v236 = v229;
          double v160 = sub_1CB8F17C4(v163, a7, (uint64_t)&v235, (llvm *)v222, (uint64_t)v223, (uint64_t)v24, (void *)v26, v93, (uint64_t)v222, (uint64_t)v223);
          uint64_t v162 = v164;
          if (v235)
          {
            int v165 = *(unsigned __int8 *)v235;
            if ((v165 - 4) > 0x1E)
            {
              if ((v165 - 3) >= 0xFFFFFFFE) {
                uint64_t v173 = (uint64_t)v235;
              }
              else {
                uint64_t v173 = 0;
              }
              if ((v165 - 3) >= 0xFFFFFFFE)
              {
                unint64_t v174 = v173 + 8;
LABEL_220:
                uint64_t v230 = (uint64_t *)&v235;
                sub_1CC5FA668(v174 + 16, &v230);
                goto LABEL_200;
              }
              if (v165 == 3) {
                v235[1] = 0;
              }
            }
            else if ((*((unsigned char *)v235 + 1) & 0x7F) == 2 || *((_DWORD *)v235 + 3))
            {
              unint64_t v176 = (unint64_t)v235[2];
              if ((v176 & 4) != 0)
              {
                unint64_t v174 = v176 & 0xFFFFFFFFFFFFFFF8;
                if (v174) {
                  goto LABEL_220;
                }
              }
            }
          }
LABEL_200:
          if (v232 >= (unint64_t)HIDWORD(v232)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          long long v166 = (uint64_t **)((char *)v231 + 16 * v232);
          *long long v166 = v160;
          v166[1] = v162;
          LODWORD(v232) = v232 + 1;
          int v167 = a1[2];
          __int16 v220 = v228;
          if (v228) {
            llvm::MetadataTracking::track((uint64_t)&v220, v228, 2);
          }
          int v221 = v229;
          int v24 = (uint64_t *)v217(v167, v24, v26, v156, v158, v218, a5, &v220);
          unsigned int v169 = v168;
          if (!v220) {
            goto LABEL_207;
          }
          int v170 = *v220;
          if ((v170 - 4) > 0x1E)
          {
            if ((v170 - 3) >= 0xFFFFFFFE) {
              uint64_t v171 = v220;
            }
            else {
              uint64_t v171 = 0;
            }
            if ((v170 - 3) < 0xFFFFFFFE)
            {
              if (v170 == 3) {
                *((void *)v220 + 1) = 0;
              }
              goto LABEL_207;
            }
            unint64_t v172 = (unint64_t)(v171 + 8);
          }
          else
          {
            if ((v220[1] & 0x7F) != 2 && !*((_DWORD *)v220 + 3)) {
              goto LABEL_207;
            }
            uint64_t v175 = *((void *)v220 + 2);
            if ((v175 & 4) == 0) {
              goto LABEL_207;
            }
            unint64_t v172 = v175 & 0xFFFFFFFFFFFFFFF8;
            if (!v172) {
              goto LABEL_207;
            }
          }
          uint64_t v235 = &v220;
          sub_1CC5FA668(v172 + 16, &v235);
LABEL_207:
          unint64_t v26 = v26 & 0xFFFFFFFF00000000 | v169;
          --v95;
        }
        while (v95);
      }
      int v177 = a1[2];
      uint64_t v178 = v177[104];
      if (v178) {
        uint64_t v179 = *(unsigned __int16 *)(v178 + 8);
      }
      else {
        uint64_t v179 = 0;
      }
      unsigned int v180 = sub_1CD7FF4E8(v177, (const char *)v212, (const llvm::APInt *)&v228, v213, v214, (uint64_t *)v231, v232, v179);
      uint64_t v182 = v181;
      uint64_t v183 = v226;
      uint64_t v184 = v227;
      if (v213 != v226 || !(_BYTE)v213 && v214 != v227)
      {
        uint64_t v185 = (uint64_t)a1[2];
        uint64_t v186 = sub_1CD7EBF14(v185, 0, (const llvm::APInt *)&v228, (llvm *)5, 0, 0, 0);
        uint64_t v189 = *(void *)(v185 + 832);
        if (v189) {
          LOWORD(v189) = *(_WORD *)(v189 + 8);
        }
        unsigned int v180 = sub_1CCFDED5C(v185, 151, (const llvm::APInt *)&v228, v183, v184, (uint64_t)v180, v182, v188, (uint64_t)v186, v187, v189);
        LODWORD(v182) = v190;
      }
      unint64_t v191 = *(uint64_t **)(a5 + 32);
      uint64_t v193 = *v191;
      uint64_t v192 = v191[1];
      uint64_t v194 = *a1;
      uint64_t v235 = (unsigned __int8 **)v180;
      int v236 = v182;
      uint64_t v237 = v193;
      int v238 = v192;
      sub_1CCEF083C(v194, a5, (uint64_t *)&v235, 2, 1);
      if (v231 != &v233) {
        free(v231);
      }
      break;
  }
LABEL_44:
  if (v228)
  {
    int v63 = *v228;
    if ((v63 - 4) > 0x1E)
    {
      if ((v63 - 3) >= 0xFFFFFFFE) {
        uint64_t v64 = v228;
      }
      else {
        uint64_t v64 = 0;
      }
      if ((v63 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v65 = (unint64_t)(v64 + 8);
LABEL_54:
        uint64_t v231 = &v228;
        sub_1CC5FA668(v65 + 16, &v231);
        return;
      }
      if (v63 == 3) {
        *((void *)v228 + 1) = 0;
      }
    }
    else if ((v228[1] & 0x7F) == 2 || *((_DWORD *)v228 + 3))
    {
      uint64_t v206 = *((void *)v228 + 2);
      if ((v206 & 4) != 0)
      {
        unint64_t v65 = v206 & 0xFFFFFFFFFFFFFFF8;
        if (v65) {
          goto LABEL_54;
        }
      }
    }
  }
}

uint64_t *sub_1CB8D97D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v113 = v6;
  if (v6) {
    llvm::MetadataTracking::track((uint64_t)&v113, v6, 2);
  }
  int v114 = *(_DWORD *)(a2 + 60);
  int v7 = *(unsigned __int16 *)(a2 + 24);
  if (v7 == 291)
  {
    uint64_t v15 = *(void *)(a2 + 32);
    uint64_t v98 = *(void *)v15;
    int v9 = *(_DWORD *)(v15 + 8);
    uint64_t v10 = *(uint64_t **)(v15 + 80);
    uint64_t v11 = *(unsigned int *)(v15 + 88);
    goto LABEL_12;
  }
  if (v7 != 254) {
    llvm::report_fatal_error((llvm *)"Unknown store opcode!", (const llvm::Twine *)1);
  }
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v98 = *(void *)v8;
  int v9 = *(_DWORD *)(v8 + 8);
  uint64_t v10 = *(uint64_t **)(v8 + 40);
  uint64_t v11 = *(unsigned int *)(v8 + 48);
  if ((*(_WORD *)(a2 + 26) & 0x400) != 0)
  {
    unint64_t v12 = *(llvm **)(a2 + 80);
    uint64_t v13 = *(void *)(a2 + 88);
    if ((_BYTE)v12)
    {
      BOOL v81 = v12 - 120 >= 0x20 && v12 - 2 >= 6;
      if (!v81 || v12 - 15 < 0x3C) {
        goto LABEL_86;
      }
    }
    else
    {
      if ((*(_DWORD *)(v13 + 8) & 0xFE) == 0x12) {
        int v14 = *(unsigned __int8 *)(**(void **)(v13 + 16) + 8);
      }
      else {
        int v14 = *(_DWORD *)(v13 + 8);
      }
      if (v14 == 13)
      {
LABEL_86:
        unint64_t v89 = (llvm::APFloatBase *)a3[2];
        uint64_t v90 = *((void *)v89 + 104);
        if (v90) {
          __int16 v91 = *(_WORD *)(v90 + 8);
        }
        else {
          __int16 v91 = 0;
        }
        uint64_t v10 = sub_1CD7F3564(v89, (const char *)0xC9, (uint64_t)&v113, *(llvm **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)v10, (void *)v11, v91);
        uint64_t v11 = v92;
        goto LABEL_12;
      }
    }
    uint64_t v82 = a3;
    uint64_t v83 = a3[2];
    unsigned int v84 = sub_1CD7EBF14(v83, 0, (const llvm::APInt *)&v113, (llvm *)5, 0, 0, 0);
    uint64_t v87 = *(void *)(v83 + 832);
    if (v87) {
      LOWORD(v87) = *(_WORD *)(v87 + 8);
    }
    uint64_t v10 = sub_1CCFDED5C(v83, 212, (const llvm::APInt *)&v113, v12, v13, (uint64_t)v10, v11, v86, (uint64_t)v84, v85, v87);
    uint64_t v11 = v88;
    a3 = v82;
  }
LABEL_12:
  uint64_t v16 = *(void *)(a2 + 96);
  if ((*(void *)(v16 + 24) & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    unint64_t v18 = (unint64_t)(sub_1CB8F1DC4((unint64_t *)(v16 + 24)) + 7) >> 3;
    if (v17 == 1) {
  }
    }
  else
  {
    unint64_t v18 = -1;
  }
  uint64_t v19 = (1 << *(unsigned char *)(v16 + 34)) | *(void *)(v16 + 8);
  unsigned int v20 = (63 - __clz(v19 & -v19));
  if ((1 << v20) % v18) {
    BOOL v21 = v20 > 1;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    unint64_t v35 = sub_1CB8E5DAC(*(llvm::LLVMContext **)(a3[2] + 56), 3, 0, v18, 0);
    unint64_t v37 = (llvm *)v35;
    __int16 v38 = 0;
    int v39 = (llvm::APFloatBase *)a3[2];
    uint64_t v40 = *((void *)v39 + 104);
    if (v40) {
      __int16 v38 = *(_WORD *)(v40 + 8);
    }
    uint64_t v41 = sub_1CD7F3564(v39, (const char *)0xD8, (uint64_t)&v113, v37, v36, (uint64_t)v10, (void *)v11, v38);
    uint64_t v96 = v42;
    uint64_t v97 = (uint64_t)v41;
    uint64_t v43 = sub_1CD3E3954(a2);
    int v45 = *(uint64_t **)v43;
    unint64_t v44 = *(void *)(v43 + 8);
    uint64_t v115 = &v117;
    uint64_t v116 = 0x800000000;
    uint64_t v95 = a1;
    uint64_t v99 = a3;
    uint64_t v46 = 0;
    unsigned int v47 = 1;
    int v94 = v9;
    do
    {
      uint64_t v48 = v99[2];
      uint64_t v49 = sub_1CD7EB364(v48, v46, (const llvm::APInt *)&v113, 0);
      uint64_t v52 = *(void *)(v48 + 832);
      if (v52) {
        LOWORD(v52) = *(_WORD *)(v52 + 8);
      }
      int v53 = sub_1CCFDED5C(v48, 148, (const llvm::APInt *)&v113, (llvm *)3, 0, v97, v96, v51, (uint64_t)v49, v50, v52);
      unsigned int v55 = v54;
      uint64_t v56 = v99[2];
      sub_1CB8F0264(*(uint64_t **)(a2 + 96), v46, (uint64_t)&v111);
      __int16 v57 = *(_WORD *)(*(void *)(a2 + 96) + 32);
      memset(v103, 0, sizeof(v103));
      long long v100 = v111;
      uint64_t v101 = v112;
      int v58 = (uint64_t *)(v53[5] + 16 * v55);
      sub_1CD7EA9CC(v56, *v58, v58[1]);
      uint64_t v59 = sub_1CD7FB188(v56, v98, v94, (uint64_t)&v113, (uint64_t)v53, v55, (uint64_t)v45, v44, (uint64_t)&v100, 0, 0, v57, v103);
      unint64_t v61 = v60;
      uint64_t v62 = sub_1CB8D97D0(v95, v59, v99);
      if (v62) {
        uint64_t v64 = v62;
      }
      else {
        uint64_t v64 = (uint64_t)v59;
      }
      if (v62) {
        unint64_t v61 = v61 & 0xFFFFFFFF00000000 | v63;
      }
      uint64_t v65 = v45[5] + 16 * v44;
      __int16 v66 = *(llvm **)v65;
      uint64_t v67 = *(void *)(v65 + 8);
      uint64_t v68 = v99[2];
      __int16 v69 = sub_1CD7EBF14(v68, 1, (const llvm::APInt *)&v113, *(llvm **)v65, v67, 0, 0);
      __int16 v72 = 0;
      uint64_t v73 = *(void *)(v68 + 832);
      if (v73) {
        __int16 v72 = *(_WORD *)(v73 + 8);
      }
      int v45 = sub_1CCFDED5C(v68, 56, (const llvm::APInt *)&v113, v66, v67, (uint64_t)v45, v44, v71, (uint64_t)v69, v70, v72);
      if (v116 >= (unint64_t)HIDWORD(v116)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unint64_t v44 = v44 & 0xFFFFFFFF00000000 | v74;
      unint64_t v75 = (uint64_t *)((char *)v115 + 16 * v116);
      uint64_t *v75 = v64;
      v75[1] = v61;
      uint64_t v76 = (v116 + 1);
      LODWORD(v116) = v116 + 1;
      uint64_t v46 = v47;
      BOOL v21 = v18 > v47++;
    }
    while (v21);
    uint64_t v77 = (void *)v99[2];
    uint64_t v78 = v77[104];
    if (v78) {
      uint64_t v79 = *(unsigned __int16 *)(v78 + 8);
    }
    else {
      uint64_t v79 = 0;
    }
    uint64_t v23 = sub_1CD7FF4E8(v77, (const char *)2, (const llvm::APInt *)&v113, (llvm *)1, 0, (uint64_t *)v115, v76, v79);
    int v80 = v115;
    if (v115 != &v117) {
      goto LABEL_76;
    }
    goto LABEL_43;
  }
  int v22 = *(_DWORD *)(*(void *)(a2 + 96) + 16);
  if (v22 > 2)
  {
    if (v22 == 3)
    {
      if (*(_WORD *)(a2 + 24) == 291) {
        uint64_t v30 = sub_1CD3DB4E4(a1, a2, a3);
      }
      else {
        uint64_t v30 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 2240))(a1, a2, a3);
      }
    }
    else
    {
      if (v22 != 64)
      {
LABEL_98:
        *(void *)&v103[0] = "Store from unsupported address space: ";
        __int16 v104 = 259;
        __int16 v102 = 264;
        LODWORD(v100) = v22;
        sub_1CD3E3950((uint64_t *)v103, (uint64_t *)&v100, (uint64_t)&v115);
        llvm::report_fatal_error((llvm *)&v115, (const llvm::Twine *)1);
      }
      uint64_t v30 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 2248))(a1, a2, a3);
    }
LABEL_42:
    uint64_t v23 = v30;
    goto LABEL_43;
  }
  if (!v22)
  {
    uint64_t v30 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 2224))(a1, a2, a3);
    goto LABEL_42;
  }
  if (v22 != 1) {
    goto LABEL_98;
  }
  LOBYTE(v100) = 0;
  uint64_t v23 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, long long *))(*(void *)a1 + 2232))(a1, a2, a3, &v100);
  if ((_BYTE)v100)
  {
    uint64_t v24 = *(void *)(a3[2] + 16);
    llvm::DiagnosticLocation::DiagnosticLocation(v103, (const llvm::DebugLoc *)&v113);
    uint64_t v25 = *(void *)(*(void *)(v24 + 640) + 16);
    uint64_t v26 = *(void *)(v25 + 56);
    LODWORD(v116) = 11;
    BYTE4(v116) = 2;
    uint64_t v117 = v26;
    long long v118 = v103[0];
    unint64_t v119 = "agx1-lower";
    unsigned int v120 = "DeviceStoreAddrMode";
    uint64_t v121 = 19;
    char v122 = 0;
    char v123 = 0;
    int v124 = v126;
    uint64_t v125 = 0x400000000;
    v126[256] = 0;
    int v127 = -1;
    uint64_t v128 = v25;
    uint64_t v115 = &unk_1F26165E0;
    char v106 = 6;
    strcpy((char *)v105, "String");
    __p = operator new(0x38uLL);
    long long v108 = xmmword_1CD935EF0;
    strcpy((char *)__p, "Zero-extended device memory store cannot fold addr mode");
    uint64_t v109 = 0;
    uint64_t v110 = 0;
    sub_1CD3D6290((uint64_t)&v115, (long long *)v105);
    if (SHIBYTE(v108) < 0) {
      operator delete(__p);
    }
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    llvm::OptimizationRemarkEmitter::emit(*(uint64_t ****)(a3[2] + 88), (llvm::DiagnosticInfoOptimizationBase *)&v115);
    uint64_t v115 = &unk_1F2616800;
    unint64_t v27 = v124;
    if (v125)
    {
      unint64_t v28 = (unint64_t)v125 << 6;
      do
      {
        uint64_t v29 = (void **)&v27[v28];
        if ((char)v27[v28 - 17] < 0) {
          operator delete(*(v29 - 5));
        }
        if (*((char *)v29 - 41) < 0) {
          operator delete(*(v29 - 8));
        }
        v28 -= 64;
      }
      while (v28);
      unint64_t v27 = v124;
    }
    if (v27 != v126)
    {
      int v80 = v27;
LABEL_76:
      free(v80);
    }
  }
LABEL_43:
  if (v113)
  {
    int v31 = *v113;
    if ((v31 - 4) > 0x1E)
    {
      if ((v31 - 3) >= 0xFFFFFFFE) {
        unint64_t v33 = v113;
      }
      else {
        unint64_t v33 = 0;
      }
      if ((v31 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v34 = (unint64_t)(v33 + 8);
LABEL_53:
        uint64_t v115 = &v113;
        sub_1CC5FA668(v34 + 16, &v115);
        return v23;
      }
      if (v31 == 3) {
        *((void *)v113 + 1) = 0;
      }
    }
    else if ((v113[1] & 0x7F) == 2 || *((_DWORD *)v113 + 3))
    {
      uint64_t v93 = *((void *)v113 + 2);
      if ((v93 & 4) != 0)
      {
        unint64_t v34 = v93 & 0xFFFFFFFFFFFFFFF8;
        if (v34) {
          goto LABEL_53;
        }
      }
    }
  }
  return v23;
}

uint64_t sub_1CB8DA0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  uint64_t v6 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  int v7 = (llvm::detail::DoubleAPFloat *)(a3 + 8);
  if (v5 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::fusedMultiplyAdd(v4, v6, v7, a4);
  }
  return llvm::detail::IEEEFloat::fusedMultiplyAdd(v4, v6, v7, a4);
}

BOOL sub_1CB8DA118(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a3 > 6) {
    return 0;
  }
  LODWORD(v5) = a3;
  while (1)
  {
    unsigned int v7 = *(unsigned __int16 *)(a1 + 24);
    if (v7 > 0xD6)
    {
      if (v7 != 215 && v7 != 223)
      {
        unsigned int v25 = v7 - 400;
        BOOL v26 = v25 > 0xA;
        int v27 = (1 << v25) & 0x787;
        return !v26 && v27 != 0;
      }
      goto LABEL_13;
    }
    if (*(unsigned __int16 *)(a1 + 24) <= 0x61u) {
      break;
    }
    switch(v7)
    {
      case 0x62u:
        uint64_t v5 = (v5 + 1);
        if (!sub_1CB8DA118(**(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), v5)) {
          return 0;
        }
        uint64_t v8 = (uint64_t *)(*(void *)(a1 + 32) + 40);
        break;
      case 0xC0u:
        uint64_t v5 = (v5 + 1);
        if (!sub_1CB8DA118(*(void *)(*(void *)(a1 + 32) + 80), *(void *)(*(void *)(a1 + 32) + 88), v5))return 0; {
        uint64_t v8 = (uint64_t *)(*(void *)(a1 + 32) + 120);
        }
        break;
      case 0xD4u:
LABEL_13:
        uint64_t v8 = *(uint64_t **)(a1 + 32);
        LODWORD(v5) = v5 + 1;
        break;
      default:
        return 0;
    }
    a1 = *v8;
    if (v5 > 6) {
      return 0;
    }
  }
  if (v7 == 12 || v7 == 36)
  {
    uint64_t v13 = *(void *)(a1 + 80);
    if (*(_UNKNOWN **)(v13 + 32) == &unk_1CFB2E344) {
      uint64_t v14 = *(void *)(v13 + 40);
    }
    else {
      uint64_t v14 = v13 + 24;
    }
    if ((*(unsigned char *)(v14 + 28) & 8) != 0) {
      return 0;
    }
    LODWORD(v30) = 32;
    uint64_t v29 = 0;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v35, &v29);
    uint64_t v41 = v35;
    uint64_t v42 = v36;
    int v43 = v37;
    char v44 = BYTE4(v37) & 0xF;
    int v34 = 32;
    uint64_t v33 = 1065353216;
    llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v29, (const llvm::APInt **)&v33);
    uint64_t v36 = v29;
    uint64_t v37 = v30;
    int v38 = v31;
    char v39 = v32 & 0xF;
    llvm::APFloat::convert((uint64_t)v40, *(void **)(*(void *)(a1 + 80) + 32), 1, &v29);
    llvm::APFloat::convert((uint64_t)&v35, *(void **)(*(void *)(a1 + 80) + 32), 1, &v29);
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v17 = *(void **)(v15 + 32);
    uint64_t v16 = (llvm::detail::DoubleAPFloat *)(v15 + 32);
    if (v17 == &unk_1CFB2E344) {
      int v18 = llvm::detail::DoubleAPFloat::compare(v16, (const llvm::detail::DoubleAPFloat *)&v41);
    }
    else {
      int v18 = llvm::detail::IEEEFloat::compare(v16, (const llvm::detail::IEEEFloat *)&v41);
    }
    int v19 = v18;
    uint64_t v20 = *(void *)(a1 + 80);
    int v22 = *(void **)(v20 + 32);
    BOOL v21 = (llvm::detail::DoubleAPFloat *)(v20 + 32);
    if (v22 == &unk_1CFB2E344) {
      unsigned int v23 = llvm::detail::DoubleAPFloat::compare(v21, (const llvm::detail::DoubleAPFloat *)&v36);
    }
    else {
      unsigned int v23 = llvm::detail::IEEEFloat::compare(v21, (const llvm::detail::IEEEFloat *)&v36);
    }
    BOOL v3 = (v19 - 1) < 2 && v23 < 2;
    if (v36 == (const llvm::APInt *)&unk_1CFB2E344)
    {
      sub_1CB845718(&v37);
    }
    else if ((*((_DWORD *)v36 + 2) - 64) <= 0xFFFFFF7F && v37)
    {
      MEMORY[0x1D25D9CB0](v37, 0x1000C8000313F17);
    }
    if ((_UNKNOWN *)v41 == &unk_1CFB2E344)
    {
      sub_1CB845718((uint64_t *)&v42);
    }
    else if ((*(_DWORD *)(v41 + 8) - 64) <= 0xFFFFFF7F && v42)
    {
      MEMORY[0x1D25D9CB0](v42, 0x1000C8000313F17);
    }
  }
  else
  {
    if (v7 != 46) {
      return 0;
    }
    uint64_t v9 = *(void *)(**(void **)(a1 + 32) + 80);
    uint64_t v10 = (void *)(v9 + 24);
    if (*(_DWORD *)(v9 + 32) >= 0x41u) {
      uint64_t v10 = (void *)*v10;
    }
    int v11 = *(_DWORD *)v10;
    BOOL v3 = 1;
    BOOL v12 = (v11 - 2095) > 0x24 || ((1 << (v11 - 47)) & 0x1000000003) == 0;
    if (v12 && v11 != 1830 && v11 != 1851) {
      return 0;
    }
  }
  return v3;
}

uint64_t *sub_1CB8DA494(uint64_t a1, uint64_t a2, double (*a3)(double))
{
  v30[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(a2 + 32) + 40);
  int v4 = *(unsigned __int16 *)(v3 + 24);
  if (v4 != 36 && v4 != 12) {
    return 0;
  }
  int v11 = *(uint64_t **)(a2 + 40);
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = *(void *)(v3 + 80);
  uint64_t v16 = *(void **)(v14 + 32);
  uint64_t v15 = (const llvm::detail::DoubleAPFloat *)(v14 + 32);
  if (v16 == &unk_1CFB2E344) {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v29, v15);
  }
  else {
    llvm::detail::IEEEFloat::IEEEFloat((uint64_t)&v29, v15);
  }
  char v26 = 0;
  llvm::APFloat::convert((uint64_t)v28, &unk_1CFB2E31C, 1, &v26);
  double v17 = llvm::APFloat::convertToDouble((llvm::APFloat *)v28);
  double v18 = a3(v17);
  int v19 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v24 = v19;
  if (v19) {
    llvm::MetadataTracking::track((uint64_t)&v24, v19, 2);
  }
  int v25 = *(_DWORD *)(a2 + 60);
  uint64_t v6 = sub_1CD7ECDC4(a1, (uint64_t)&v24, v12, v13, 0, v18);
  if (v24)
  {
    int v20 = *v24;
    if ((v20 - 4) > 0x1E)
    {
      if ((v20 - 3) >= 0xFFFFFFFE) {
        BOOL v21 = v24;
      }
      else {
        BOOL v21 = 0;
      }
      if ((v20 - 3) < 0xFFFFFFFE)
      {
        if (v20 == 3) {
          *((void *)v24 + 1) = 0;
        }
        goto LABEL_15;
      }
      unint64_t v22 = (unint64_t)(v21 + 8);
    }
    else
    {
      if ((v24[1] & 0x7F) != 2 && !*((_DWORD *)v24 + 3)) {
        goto LABEL_15;
      }
      uint64_t v23 = *((void *)v24 + 2);
      if ((v23 & 4) == 0) {
        goto LABEL_15;
      }
      unint64_t v22 = v23 & 0xFFFFFFFFFFFFFFF8;
      if (!v22) {
        goto LABEL_15;
      }
    }
    int v27 = &v24;
    sub_1CC5FA668(v22 + 16, &v27);
  }
LABEL_15:
  if ((_UNKNOWN *)v29 == &unk_1CFB2E344)
  {
    sub_1CB845718(v30);
  }
  else if ((*(_DWORD *)(v29 + 8) - 64) <= 0xFFFFFF7F && v30[0])
  {
    MEMORY[0x1D25D9CB0](v30[0], 0x1000C8000313F17);
  }
  return v6;
}

double sub_1CB8DA6A4(double a1)
{
  return sin(a1 * 1.57079633);
}

long double sub_1CB8DA6B4(long double a1)
{
  return atan(a1) * a1;
}

uint64_t *sub_1CB8DA6DC(unsigned int a1, const llvm::APInt *a2, uint64_t a3)
{
  v10[8] = *MEMORY[0x1E4F143B8];
  v10[0] = (uint64_t)sub_1CD7EBF14(a3, a1, a2, (llvm *)4, 0, 1, 0);
  v10[1] = v5;
  v10[2] = (uint64_t)sub_1CD7EBF14(a3, 0, a2, (llvm *)5, 0, 1, 0);
  v10[3] = v6;
  v10[4] = (uint64_t)sub_1CD7EBF14(a3, 0, a2, (llvm *)5, 0, 1, 0);
  v10[5] = v7;
  v10[6] = sub_1CD7EEB94(a3, 0, (llvm *)5, 0);
  v10[7] = v8;
  return sub_1CD801450(a3, 12152, (uint64_t)a2, (llvm *)5, 0, v10, 4);
}

uint64_t sub_1CB8DA7DC(uint64_t result, int *a2, int *a3, int *a4, int *a5)
{
  int v5 = 397;
  int v6 = -1;
  int v7 = 1;
  int v8 = 0;
  switch((int)result)
  {
    case 1840:
      goto LABEL_31;
    case 1841:
      goto LABEL_16;
    case 1842:
      goto LABEL_33;
    case 1843:
      goto LABEL_9;
    case 1844:
      goto LABEL_25;
    case 1845:
      goto LABEL_38;
    case 1846:
      goto LABEL_27;
    case 1847:
    case 1848:
    case 1849:
    case 1850:
    case 1851:
    case 1852:
    case 1853:
    case 1854:
    case 1855:
    case 1856:
    case 1857:
    case 1858:
    case 1859:
    case 1860:
    case 1861:
    case 1862:
    case 1863:
    case 1864:
    case 1865:
    case 1866:
    case 1867:
    case 1868:
    case 1869:
    case 1870:
    case 1871:
    case 1872:
    case 1873:
    case 1874:
    case 1875:
    case 1876:
    case 1877:
    case 1878:
    case 1879:
    case 1880:
    case 1881:
    case 1882:
    case 1883:
    case 1884:
    case 1885:
      __break(1u);
      JUMPOUT(0x1CB8DAA2CLL);
    case 1886:
    case 1887:
      int v8 = 0;
      goto LABEL_13;
    case 1888:
    case 1889:
      int v8 = 0;
      goto LABEL_12;
    case 1890:
    case 1891:
      int v8 = 0;
      goto LABEL_50;
    case 1892:
    case 1893:
      int v8 = 0;
      goto LABEL_53;
    case 1894:
    case 1895:
      int v6 = 0;
      int v8 = 0;
      break;
    case 1896:
    case 1897:
      int v6 = 0;
LABEL_31:
      int v8 = 0;
      goto LABEL_42;
    case 1898:
    case 1899:
      int v6 = 0;
LABEL_16:
      int v8 = 0;
      goto LABEL_51;
    case 1900:
    case 1901:
      int v6 = 0;
LABEL_33:
      int v8 = 0;
      goto LABEL_54;
    case 1902:
    case 1903:
      int v8 = 0;
      int v6 = 1;
      break;
    case 1904:
    case 1905:
      int v8 = 0;
      int v6 = 1;
      goto LABEL_42;
    case 1906:
    case 1907:
      int v8 = 0;
      goto LABEL_36;
    case 1908:
    case 1909:
      int v8 = 0;
      int v6 = 1;
      goto LABEL_54;
    case 1910:
    case 1911:
      int v8 = 0;
      int v5 = 403;
      goto LABEL_48;
    case 1912:
    case 1913:
      int v8 = 0;
      int v5 = 403;
      goto LABEL_41;
    case 1914:
    case 1915:
      int v8 = 0;
      int v5 = 403;
      goto LABEL_47;
    case 1916:
    case 1917:
      int v8 = 0;
      int v5 = 403;
      goto LABEL_45;
    case 1918:
    case 1919:
      int v5 = 399;
      int v6 = 2;
      int v7 = 3;
      int v8 = 2;
      break;
    case 1920:
    case 1921:
      int v6 = 0;
      int v5 = 399;
      int v8 = 2;
      goto LABEL_51;
    case 1922:
    case 1923:
      int v5 = 399;
      int v8 = 2;
LABEL_36:
      int v6 = 1;
      goto LABEL_51;
    case 1924:
    case 1925:
      int v5 = 405;
      int v8 = 2;
      goto LABEL_47;
    case 1926:
      int v5 = 406;
      int v7 = 3;
      int v6 = 3;
      int v8 = 3;
      break;
    case 1927:
    case 1928:
      int v5 = 398;
      int v6 = 2;
      goto LABEL_57;
    case 1929:
    case 1930:
      int v5 = 398;
      int v8 = 1;
LABEL_12:
      int v7 = 2;
LABEL_13:
      int v6 = 2;
      break;
    case 1931:
    case 1932:
      int v5 = 398;
      int v8 = 1;
LABEL_50:
      int v6 = 2;
      goto LABEL_51;
    case 1933:
    case 1934:
      int v5 = 398;
      int v8 = 1;
LABEL_53:
      int v6 = 2;
      goto LABEL_54;
    case 1935:
    case 1936:
      int v6 = 0;
LABEL_9:
      int v5 = 398;
      goto LABEL_57;
    case 1937:
    case 1938:
      int v6 = 0;
LABEL_25:
      int v5 = 398;
      int v8 = 1;
      goto LABEL_42;
    case 1939:
    case 1940:
      int v6 = 0;
LABEL_38:
      int v5 = 398;
      int v8 = 1;
LABEL_51:
      int v7 = 3;
      break;
    case 1941:
    case 1942:
      int v6 = 0;
LABEL_27:
      int v5 = 398;
      int v8 = 1;
      goto LABEL_54;
    case 1943:
    case 1944:
      int v5 = 398;
      int v6 = 1;
      goto LABEL_57;
    case 1945:
    case 1946:
      int v5 = 398;
      int v6 = 1;
      int v7 = 2;
      goto LABEL_57;
    case 1947:
    case 1948:
      int v5 = 398;
      int v6 = 1;
      int v7 = 3;
      goto LABEL_57;
    case 1949:
    case 1950:
      int v5 = 398;
      int v6 = 1;
      int v7 = 4;
      goto LABEL_57;
    case 1951:
    case 1952:
      int v5 = 404;
      int v6 = 3;
LABEL_57:
      int v8 = 1;
      break;
    case 1953:
    case 1954:
      int v5 = 404;
      int v8 = 1;
LABEL_41:
      int v6 = 3;
LABEL_42:
      int v7 = 2;
      break;
    case 1955:
    case 1956:
      int v5 = 404;
      int v8 = 1;
LABEL_47:
      int v7 = 3;
LABEL_48:
      int v6 = 3;
      break;
    case 1957:
    case 1958:
      int v5 = 404;
      int v8 = 1;
LABEL_45:
      int v6 = 3;
LABEL_54:
      int v7 = 4;
      break;
    default:
      break;
  }
  *a2 = v7;
  *a3 = v6;
  *a4 = v8;
  *a5 = v5;
  return result;
}

uint64_t *sub_1CB8DAC0C(uint64_t a1, const llvm::APInt *a2, uint64_t a3, uint64_t a4, llvm::APFloatBase *a5)
{
  int v9 = a1;
  v102[4] = *MEMORY[0x1E4F143B8];
  uint64_t v89 = 0;
  uint64_t v90 = 0;
  sub_1CB8DA7DC(a1, (int *)&v90 + 1, (int *)&v90, (int *)&v89 + 1, (int *)&v89);
  uint64_t v10 = sub_1CD7EBF14((uint64_t)a5, (int)v90, a2, (llvm *)5, 0, 0, 0);
  long long v100 = v102;
  v102[0] = v10;
  v102[1] = v11;
  v102[2] = a3;
  v102[3] = a4;
  uint64_t v101 = 0x200000002;
  uint64_t v97 = v99;
  uint64_t v98 = 0x800000000;
  uint64_t v13 = sub_1CD7EBF14((uint64_t)a5, 45, a2, (llvm *)5, 0, 1, 0);
  if (v98 >= HIDWORD(v98)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v14 = (uint64_t **)((char *)v97 + 16 * v98);
  *uint64_t v14 = v13;
  v14[1] = v12;
  unsigned int v15 = v98 + 1;
  LODWORD(v98) = v98 + 1;
  uint64_t v16 = HIDWORD(v90);
  if (HIDWORD(v90))
  {
    uint64_t v43 = 0;
    do
    {
      char v44 = sub_1CD7EBF14((uint64_t)a5, v43, a2, (llvm *)5, 0, 0, 0);
      __int16 v47 = 0;
      uint64_t v48 = *((void *)a5 + 104);
      if (v48) {
        __int16 v47 = *(_WORD *)(v48 + 8);
      }
      uint64_t v50 = sub_1CCFDED5C((uint64_t)a5, 148, a2, (llvm *)0xA, 0, a3, a4, v46, (uint64_t)v44, v45, v47);
      if (v98 >= (unint64_t)HIDWORD(v98)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v51 = (uint64_t **)((char *)v97 + 16 * v98);
      void *v51 = v50;
      v51[1] = v49;
      LODWORD(v98) = v98 + 1;
      int v53 = sub_1CD7EBF14((uint64_t)a5, (v43 + 33), a2, (llvm *)5, 0, 1, 0);
      if (v98 >= (unint64_t)HIDWORD(v98)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      unsigned int v54 = (uint64_t **)((char *)v97 + 16 * v98);
      uint64_t *v54 = v53;
      v54[1] = v52;
      unsigned int v15 = v98 + 1;
      LODWORD(v98) = v98 + 1;
      ++v43;
    }
    while (v16 != v43);
  }
  double v17 = sub_1CD801450((uint64_t)a5, 18, (uint64_t)a2, (llvm *)0xAE, 0, (uint64_t *)v97, v15);
  uint64_t v18 = 0;
  int v19 = v100;
  v100[2] = (uint64_t)v17;
  *((_DWORD *)v19 + 6) = 0;
  uint64_t v20 = *((void *)a5 + 104);
  if (v20) {
    uint64_t v18 = *(unsigned __int16 *)(v20 + 8);
  }
  unint64_t v22 = sub_1CD7FF4E8(a5, (const char *)v89, a2, (llvm *)0xAE, 0, v19, v101, v18);
  int v23 = v21;
  int v94 = v96;
  uint64_t v95 = 0x400000000;
  if (v9 == 1925)
  {
    int v25 = sub_1CD8015C0((uint64_t)a5, 1, a2, (llvm *)9, 0, (uint64_t)v22, v21);
    if (v95 >= HIDWORD(v95)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    char v26 = (uint64_t **)((char *)v94 + 16 * v95);
    *char v26 = v25;
    v26[1] = v24;
    LODWORD(v95) = v95 + 1;
    unint64_t v28 = sub_1CD8015C0((uint64_t)a5, 2, a2, (llvm *)9, 0, (uint64_t)v22, v23);
    if (v95 >= HIDWORD(v95)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v29 = (uint64_t **)((char *)v94 + 16 * v95);
    *uint64_t v29 = v28;
    v29[1] = v27;
    LODWORD(v95) = v95 + 1;
    int v31 = sub_1CD8015C0((uint64_t)a5, 3, a2, (llvm *)4, 0, (uint64_t)v22, v23);
    __int16 v32 = 0;
    uint64_t v33 = *((void *)a5 + 104);
    if (v33) {
      __int16 v32 = *(_WORD *)(v33 + 8);
    }
    uint64_t v35 = sub_1CD7F3564(a5, (const char *)0xD8, (uint64_t)a2, (llvm *)9, 0, (uint64_t)v31, v30, v32);
    if (v95 >= HIDWORD(v95)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v36 = (uint64_t **)((char *)v94 + 16 * v95);
    const llvm::APInt *v36 = v35;
    v36[1] = v34;
    LODWORD(v95) = v95 + 1;
    int v38 = sub_1CD3DD4D8((uint64_t)a5, (llvm *)9, 0);
    if (v95 >= HIDWORD(v95)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    char v39 = (uint64_t **)((char *)v94 + 16 * v95);
    *char v39 = v38;
    v39[1] = v37;
    uint64_t v40 = (v95 + 1);
    LODWORD(v95) = v95 + 1;
    uint64_t v41 = *((void *)a5 + 104);
    if (v41) {
      uint64_t v42 = *(unsigned __int16 *)(v41 + 8);
    }
    else {
      uint64_t v42 = 0;
    }
    unsigned int v74 = sub_1CD7FF4E8(a5, (const char *)0x92, a2, (llvm *)0x4E, 0, (uint64_t *)v94, v40, v42);
  }
  else
  {
    __int16 v91 = v93;
    uint64_t v92 = 0x200000000;
    uint64_t v56 = sub_1CD8015C0((uint64_t)a5, 33, a2, (llvm *)0xA, 0, (uint64_t)v22, v21);
    if (v95 >= HIDWORD(v95)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    __int16 v57 = (uint64_t **)((char *)v94 + 16 * v95);
    *__int16 v57 = v56;
    v57[1] = v55;
    LODWORD(v95) = v95 + 1;
    uint64_t v59 = sub_1CD8015C0((uint64_t)a5, 34, a2, (llvm *)0xA, 0, (uint64_t)v22, v23);
    if (v95 >= HIDWORD(v95)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unint64_t v60 = (uint64_t **)((char *)v94 + 16 * v95);
    *unint64_t v60 = v59;
    v60[1] = v58;
    LODWORD(v95) = v95 + 1;
    uint64_t v62 = sub_1CD8015C0((uint64_t)a5, 5, a2, (llvm *)4, 0, (uint64_t)v22, v23);
    __int16 v63 = 0;
    uint64_t v64 = *((void *)a5 + 104);
    if (v64) {
      __int16 v63 = *(_WORD *)(v64 + 8);
    }
    __int16 v66 = sub_1CD7F3564(a5, (const char *)0xD8, (uint64_t)a2, (llvm *)9, 0, (uint64_t)v62, v61, v63);
    if (v92 >= HIDWORD(v92)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v67 = (uint64_t **)((char *)v91 + 16 * v92);
    *uint64_t v67 = v66;
    v67[1] = v65;
    LODWORD(v92) = v92 + 1;
    __int16 v69 = sub_1CD3DD4D8((uint64_t)a5, (llvm *)9, 0);
    if (v92 >= HIDWORD(v92)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v70 = (uint64_t **)((char *)v91 + 16 * v92);
    void *v70 = v69;
    v70[1] = v68;
    uint64_t v71 = (v92 + 1);
    LODWORD(v92) = v92 + 1;
    uint64_t v72 = *((void *)a5 + 104);
    if (v72) {
      uint64_t v73 = *(unsigned __int16 *)(v72 + 8);
    }
    else {
      uint64_t v73 = 0;
    }
    uint64_t v76 = sub_1CD7FF4E8(a5, (const char *)0x92, a2, (llvm *)0x4C, 0, (uint64_t *)v91, v71, v73);
    __int16 v77 = 0;
    uint64_t v78 = *((void *)a5 + 104);
    if (v78) {
      __int16 v77 = *(_WORD *)(v78 + 8);
    }
    int v80 = sub_1CD7F3564(a5, (const char *)0xD8, (uint64_t)a2, (llvm *)0xA, 0, (uint64_t)v76, v75, v77);
    if (v95 >= HIDWORD(v95)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    BOOL v81 = (uint64_t **)((char *)v94 + 16 * v95);
    void *v81 = v80;
    v81[1] = v79;
    LODWORD(v95) = v95 + 1;
    uint64_t v83 = sub_1CD3DD4D8((uint64_t)a5, (llvm *)0xA, 0);
    if (v95 >= HIDWORD(v95)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    unsigned int v84 = (uint64_t **)((char *)v94 + 16 * v95);
    uint64_t *v84 = v83;
    v84[1] = v82;
    uint64_t v85 = (v95 + 1);
    LODWORD(v95) = v95 + 1;
    uint64_t v86 = *((void *)a5 + 104);
    if (v86) {
      uint64_t v87 = *(unsigned __int16 *)(v86 + 8);
    }
    else {
      uint64_t v87 = 0;
    }
    unsigned int v74 = sub_1CD7FF4E8(a5, (const char *)0x92, a2, (llvm *)0x61, 0, (uint64_t *)v94, v85, v87);
    if (v91 != v93) {
      free(v91);
    }
  }
  if (v94 != v96) {
    free(v94);
  }
  if (v97 != v99) {
    free(v97);
  }
  if (v100 != v102) {
    free(v100);
  }
  return v74;
}

uint64_t *sub_1CB8DB464(const llvm::APInt *a1, uint64_t a2, uint64_t a3, void *a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, int a10, llvm::APFloatBase *a11)
{
  v121[8] = *MEMORY[0x1E4F143B8];
  unint64_t v119 = v121;
  v121[0] = sub_1CD7EBF14((uint64_t)a11, 3, a1, (llvm *)5, 0, 0, 0);
  v121[1] = v15;
  v121[2] = a2;
  v121[3] = a3;
  v121[4] = 0;
  v121[5] = 0;
  uint64_t v120 = 0x400000003;
  uint64_t v115 = &v117;
  uint64_t v116 = 0x800000001;
  uint64_t v16 = 0;
  uint64_t v117 = sub_1CD7EBF14((uint64_t)a11, 45, a1, (llvm *)5, 0, 1, 0);
  uint64_t v118 = v17;
  do
  {
    uint64_t v18 = sub_1CD7EBF14((uint64_t)a11, v16, a1, (llvm *)5, 0, 0, 0);
    __int16 v21 = 0;
    uint64_t v22 = *((void *)a11 + 104);
    if (v22) {
      __int16 v21 = *(_WORD *)(v22 + 8);
    }
    uint64_t v24 = sub_1CCFDED5C((uint64_t)a11, 148, a1, (llvm *)0xA, 0, a2, a3, v20, (uint64_t)v18, v19, v21);
    if (v116 >= (unint64_t)HIDWORD(v116)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    int v25 = (uint64_t **)((char *)v115 + 16 * v116);
    uint64_t *v25 = v24;
    v25[1] = v23;
    LODWORD(v116) = v116 + 1;
    uint64_t v26 = v16 + 33;
    unint64_t v28 = sub_1CD7EBF14((uint64_t)a11, v26, a1, (llvm *)5, 0, 1, 0);
    if (v116 >= (unint64_t)HIDWORD(v116)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v29 = (uint64_t **)((char *)v115 + 16 * v116);
    *uint64_t v29 = v28;
    v29[1] = v27;
    uint64_t v30 = (v116 + 1);
    LODWORD(v116) = v116 + 1;
    uint64_t v16 = v26 - 32;
  }
  while (v16 != 3);
  int v31 = sub_1CD801450((uint64_t)a11, 18, (uint64_t)a1, (llvm *)0xAE, 0, (uint64_t *)v115, v30);
  __int16 v32 = v119;
  v119[2] = v31;
  v32[6] = 0;
  if (v115 != &v117) {
    free(v115);
  }
  uint64_t v115 = &v117;
  uint64_t v116 = 0x800000001;
  uint64_t v33 = 0;
  uint64_t v117 = sub_1CD7EBF14((uint64_t)a11, 99, a1, (llvm *)5, 0, 1, 0);
  uint64_t v118 = v34;
  uint64_t v109 = a4;
  LODWORD(v110) = a5;
  uint64_t v111 = a6;
  int v112 = a7;
  uint64_t v113 = a9;
  int v114 = a10;
  do
  {
    char v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = (uint64_t *)(&v109 + 2 * v33);
    uint64_t v38 = *v37;
    uint64_t v39 = v37[1];
    do
    {
      char v40 = v35;
      uint64_t v41 = sub_1CD7EBF14((uint64_t)a11, v36, a1, (llvm *)5, 0, 0, 0);
      __int16 v44 = 0;
      uint64_t v45 = *((void *)a11 + 104);
      if (v45) {
        __int16 v44 = *(_WORD *)(v45 + 8);
      }
      __int16 v47 = sub_1CCFDED5C((uint64_t)a11, 148, a1, (llvm *)0xA, 0, v38, v39, v43, (uint64_t)v41, v42, v44);
      if (v116 >= (unint64_t)HIDWORD(v116)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v48 = (uint64_t **)((char *)v115 + 16 * v116);
      *uint64_t v48 = v47;
      v48[1] = v46;
      LODWORD(v116) = v116 + 1;
      uint64_t v50 = sub_1CD7EBF14((uint64_t)a11, 2 * v33 + 33 + v36, a1, (llvm *)5, 0, 1, 0);
      if (v116 >= (unint64_t)HIDWORD(v116)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v51 = (uint64_t **)((char *)v115 + 16 * v116);
      void *v51 = v50;
      v51[1] = v49;
      uint64_t v52 = (v116 + 1);
      LODWORD(v116) = v116 + 1;
      char v35 = 1;
      uint64_t v36 = 1;
    }
    while ((v40 & 1) == 0);
    ++v33;
  }
  while (v33 != 3);
  int v53 = sub_1CD801450((uint64_t)a11, 18, (uint64_t)a1, (llvm *)0xAE, 0, (uint64_t *)v115, v52);
  unsigned int v54 = v119;
  v119[4] = v53;
  *((_DWORD *)v54 + 10) = 0;
  if (v115 != &v117)
  {
    free(v115);
    unsigned int v54 = v119;
  }
  uint64_t v55 = *((void *)a11 + 104);
  if (v55) {
    uint64_t v56 = *(unsigned __int16 *)(v55 + 8);
  }
  else {
    uint64_t v56 = 0;
  }
  __int16 v57 = sub_1CD7FF4E8(a11, (const char *)0x196, a1, (llvm *)0xAE, 0, v54, v120, v56);
  int v59 = v58;
  uint64_t v115 = &v117;
  uint64_t v116 = 0x400000000;
  uint64_t v109 = &v111;
  uint64_t v110 = 0x200000000;
  unint64_t v61 = sub_1CD8015C0((uint64_t)a11, 33, a1, (llvm *)0xA, 0, (uint64_t)v57, v58);
  if (v116 >= HIDWORD(v116)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v62 = (uint64_t **)((char *)v115 + 16 * v116);
  *uint64_t v62 = v61;
  v62[1] = v60;
  LODWORD(v116) = v116 + 1;
  uint64_t v64 = sub_1CD8015C0((uint64_t)a11, 34, a1, (llvm *)0xA, 0, (uint64_t)v57, v59);
  if (v116 >= HIDWORD(v116)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v65 = (uint64_t **)((char *)v115 + 16 * v116);
  uint64_t *v65 = v64;
  v65[1] = v63;
  LODWORD(v116) = v116 + 1;
  uint64_t v67 = sub_1CD8015C0((uint64_t)a11, 5, a1, (llvm *)4, 0, (uint64_t)v57, v59);
  __int16 v68 = 0;
  uint64_t v69 = *((void *)a11 + 104);
  if (v69) {
    __int16 v68 = *(_WORD *)(v69 + 8);
  }
  uint64_t v71 = sub_1CD7F3564(a11, (const char *)0xD8, (uint64_t)a1, (llvm *)9, 0, (uint64_t)v67, v66, v68);
  if (v110 >= HIDWORD(v110)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v72 = (uint64_t **)((char *)v109 + 16 * v110);
  *uint64_t v72 = v71;
  v72[1] = v70;
  LODWORD(v110) = v110 + 1;
  unsigned int v74 = sub_1CD3DD4D8((uint64_t)a11, (llvm *)9, 0);
  if (v110 >= HIDWORD(v110)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unint64_t v75 = (uint64_t **)((char *)v109 + 16 * v110);
  void *v75 = v74;
  v75[1] = v73;
  uint64_t v76 = (v110 + 1);
  LODWORD(v110) = v110 + 1;
  uint64_t v77 = *((void *)a11 + 104);
  if (v77) {
    uint64_t v78 = *(unsigned __int16 *)(v77 + 8);
  }
  else {
    uint64_t v78 = 0;
  }
  int v80 = sub_1CD7FF4E8(a11, (const char *)0x92, a1, (llvm *)0x4C, 0, (uint64_t *)v109, v76, v78);
  __int16 v81 = 0;
  uint64_t v82 = *((void *)a11 + 104);
  if (v82) {
    __int16 v81 = *(_WORD *)(v82 + 8);
  }
  unsigned int v84 = sub_1CD7F3564(a11, (const char *)0xD8, (uint64_t)a1, (llvm *)0xA, 0, (uint64_t)v80, v79, v81);
  if (v116 >= HIDWORD(v116)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v85 = (uint64_t **)((char *)v115 + 16 * v116);
  llvm *v85 = v84;
  v85[1] = v83;
  LODWORD(v116) = v116 + 1;
  uint64_t v87 = sub_1CD8015C0((uint64_t)a11, 36, a1, (llvm *)0xA, 0, (uint64_t)v57, v59);
  if (v116 >= HIDWORD(v116)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  unsigned int v88 = (uint64_t **)((char *)v115 + 16 * v116);
  *unsigned int v88 = v87;
  v88[1] = v86;
  LODWORD(v116) = v116 + 1;
  uint64_t v90 = sub_1CD8015C0((uint64_t)a11, 37, a1, (llvm *)0xA, 0, (uint64_t)v57, v59);
  if (v116 >= HIDWORD(v116)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  __int16 v91 = (uint64_t **)((char *)v115 + 16 * v116);
  *__int16 v91 = v90;
  v91[1] = v89;
  LODWORD(v116) = v116 + 1;
  uint64_t v93 = sub_1CD8015C0((uint64_t)a11, 38, a1, (llvm *)0xA, 0, (uint64_t)v57, v59);
  if (v116 >= HIDWORD(v116)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v94 = (uint64_t **)((char *)v115 + 16 * v116);
  *int v94 = v93;
  v94[1] = v92;
  LODWORD(v116) = v116 + 1;
  uint64_t v96 = sub_1CD8015C0((uint64_t)a11, 39, a1, (llvm *)0xA, 0, (uint64_t)v57, v59);
  if (v116 >= HIDWORD(v116)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  uint64_t v97 = (uint64_t **)((char *)v115 + 16 * v116);
  *uint64_t v97 = v96;
  v97[1] = v95;
  LODWORD(v116) = v116 + 1;
  uint64_t v99 = sub_1CD3DD4D8((uint64_t)a11, (llvm *)0xA, 0);
  if (v116 >= HIDWORD(v116)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  long long v100 = (uint64_t **)((char *)v115 + 16 * v116);
  uint64_t *v100 = v99;
  v100[1] = v98;
  uint64_t v101 = (v116 + 1);
  LODWORD(v116) = v116 + 1;
  uint64_t v102 = *((void *)a11 + 104);
  if (v102) {
    uint64_t v103 = *(unsigned __int16 *)(v102 + 8);
  }
  else {
    uint64_t v103 = 0;
  }
  __int16 v104 = sub_1CD7FF4E8(a11, (const char *)0x92, a1, (llvm *)0x65, 0, (uint64_t *)v115, v101, v103);
  if (v109 != &v111) {
    free(v109);
  }
  if (v115 != &v117) {
    free(v115);
  }
  if (v119 != v121) {
    free(v119);
  }
  return v104;
}

uint64_t *sub_1CB8DC540(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8 = (uint64_t *)a2;
  uint64_t v1912 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(unsigned __int16 *)(a2 + 24);
  if (*(unsigned __int16 *)(a2 + 24) <= 0x91u)
  {
    if (*(unsigned __int16 *)(a2 + 24) > 0x39u)
    {
      if (*(unsigned __int16 *)(a2 + 24) <= 0x3Fu)
      {
        if (v10 == 58)
        {
          uint64_t v11 = sub_1CB8C35C4(a1, a2, a4, *(unsigned __int8 *)(*(void *)(a1 + 184296) + 281));
          if (!((unint64_t)v11 | v12))
          {
            int v13 = *(unsigned __int8 *)(v8[5] + 16 * a3);
            if (v13 != 6)
            {
              if (v13 != 5) {
                return 0;
              }
              uint64_t v14 = (void *)v8[8];
              __src[0] = v14;
              if (!v14) {
                return v8;
              }
              llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v14, 2);
              uint64_t v15 = (unsigned __int8 *)__src[0];
              LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
              if (!__src[0]) {
                return v8;
              }
              goto LABEL_732;
            }
            uint64_t v396 = (void *)v8[8];
            __src[0] = v396;
            if (v396) {
              llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v396, 2);
            }
            LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
            uint64_t v397 = (uint64_t *)v8[4];
            uint64_t v398 = *v397;
            uint64_t v399 = v397[5];
            int v400 = *(unsigned __int16 *)(*v397 + 24);
            int v401 = *(unsigned __int16 *)(v399 + 24);
            if (v400 == 35 || v400 == 11) {
              uint64_t v403 = *v397;
            }
            else {
              uint64_t v403 = 0;
            }
            if (v401 != 35 && v401 != 11) {
              uint64_t v399 = 0;
            }
            if (!v403)
            {
LABEL_709:
              if (!v399) {
                goto LABEL_718;
              }
              uint64_t v1198 = *(void *)(v399 + 80);
              unsigned int v1199 = *(_DWORD *)(v1198 + 32);
              if (v1199 > 0x40)
              {
                uint64_t v399 = **(void **)(v1198 + 24);
                if (HIDWORD(v399))
                {
                  if (v399 > 0x7FFFFFFF) {
                    goto LABEL_713;
                  }
LABEL_717:
                  LODWORD(v399) = v399 > (uint64_t)0xFFFFFFFF7FFFFFFFLL;
LABEL_718:
                  if ((v400 & 0xFFFE) == 0xC6) {
                    int v1201 = 1;
                  }
                  else {
                    int v1201 = v403;
                  }
                  int v1202 = v399 ^ 1;
                  if (v401 == 198) {
                    int v1202 = 0;
                  }
                  if (v401 == 199) {
                    int v1203 = 0;
                  }
                  else {
                    int v1203 = v1202;
                  }
                  if (v1201 != 1 || v1203 != 0)
                  {
                    uint64_t v1428 = (void *)v397[1];
                    uint64_t v1429 = *(void *)(a4 + 832);
                    if (v1429) {
                      __int16 v1430 = *(_WORD *)(v1429 + 8);
                    }
                    else {
                      __int16 v1430 = 0;
                    }
                    BOOL v1543 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x31, 0, v398, v1428, v1430);
                    uint64_t v1545 = v1544;
                    __int16 v1546 = 0;
                    uint64_t v1547 = v8[4];
                    uint64_t v1548 = *(void *)(v1547 + 40);
                    v1549 = *(void **)(v1547 + 48);
                    uint64_t v1550 = *(void *)(a4 + 832);
                    if (v1550) {
                      __int16 v1546 = *(_WORD *)(v1550 + 8);
                    }
                    v1551 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x31, 0, v1548, v1549, v1546);
                    uint64_t v1553 = v1552;
                    v1554 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
                    __int16 v1557 = 0;
                    uint64_t v1558 = *(void *)(a4 + 832);
                    if (v1558) {
                      __int16 v1557 = *(_WORD *)(v1558 + 8);
                    }
                    uint64_t v1559 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1543, v1545, v1556, (uint64_t)v1554, v1555, v1557);
                    uint64_t v1561 = v1560;
                    v1562 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
                    __int16 v1565 = 0;
                    uint64_t v1566 = *(void *)(a4 + 832);
                    if (v1566) {
                      __int16 v1565 = *(_WORD *)(v1566 + 8);
                    }
                    v1887 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1543, v1545, v1564, (uint64_t)v1562, v1563, v1565);
                    uint64_t v1568 = v1567;
                    v1569 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
                    __int16 v1572 = 0;
                    uint64_t v1573 = *(void *)(a4 + 832);
                    if (v1573) {
                      __int16 v1572 = *(_WORD *)(v1573 + 8);
                    }
                    v1574 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1551, v1553, v1571, (uint64_t)v1569, v1570, v1572);
                    uint64_t v1576 = v1575;
                    int v1577 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
                    __int16 v1580 = 0;
                    uint64_t v1581 = *(void *)(a4 + 832);
                    if (v1581) {
                      __int16 v1580 = *(_WORD *)(v1581 + 8);
                    }
                    uint64_t v1582 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1551, v1553, v1579, (uint64_t)v1577, v1578, v1580);
                    uint64_t v1584 = v1583;
                    uint64_t v1585 = sub_1CD7F95FC(a4, 5, 0, 5, 0);
                    v1589 = sub_1CD7FFB18((void *)a4, (const char *)0x40, (const llvm::APInt *)__src, v1585, v1586, (uint64_t)v1559, v1561, v1587, (uint64_t)v1574, v1576);
                    uint64_t v1591 = v1590;
                    __int16 v1592 = 0;
                    uint64_t v1593 = *(void *)(a4 + 832);
                    if (v1593) {
                      __int16 v1592 = *(_WORD *)(v1593 + 8);
                    }
                    uint64_t v1595 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1559, v1561, v1588, (uint64_t)v1582, v1584, v1592);
                    __int16 v1596 = 0;
                    unint64_t v1598 = v1584 & 0xFFFFFFFF00000000 | v1597;
                    uint64_t v1599 = *(void *)(a4 + 832);
                    if (v1599) {
                      __int16 v1596 = *(_WORD *)(v1599 + 8);
                    }
                    __int16 v1601 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1887, v1568, v1594, (uint64_t)v1574, v1576, v1596);
                    __int16 v1602 = 0;
                    unint64_t v1604 = v1568 & 0xFFFFFFFF00000000 | v1603;
                    uint64_t v1605 = *(void *)(a4 + 832);
                    if (v1605) {
                      __int16 v1602 = *(_WORD *)(v1605 + 8);
                    }
                    v1607 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1589, 1, v1600, (uint64_t)v1595, v1598, v1602);
                    __int16 v1609 = 0;
                    uint64_t v1610 = *(void *)(a4 + 832);
                    if (v1610) {
                      __int16 v1609 = *(_WORD *)(v1610 + 8);
                    }
                    v1611 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1607, v1606, v1608, (uint64_t)v1601, v1604, v1609);
                    __int16 v1614 = 0;
                    uint64_t v1615 = *(void *)(a4 + 832);
                    if (v1615) {
                      __int16 v1614 = *(_WORD *)(v1615 + 8);
                    }
                    uint64_t v1617 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)__src, (llvm *)0x31, 0, (uint64_t)v1589, v1591, v1613, (uint64_t)v1611, v1612, v1614);
                    __int16 v1618 = 0;
                    uint64_t v1619 = *(void *)(a4 + 832);
                    if (v1619) {
                      __int16 v1618 = *(_WORD *)(v1619 + 8);
                    }
                    int v8 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)6, 0, (uint64_t)v1617, v1616, v1618);
                  }
                  uint64_t v15 = (unsigned __int8 *)__src[0];
                  if (!__src[0]) {
                    return v8;
                  }
LABEL_732:
                  int v847 = *v15;
                  if ((v847 - 4) <= 0x1E)
                  {
                    if ((v15[1] & 0x7F) != 2 && !*((_DWORD *)v15 + 3)) {
                      return v8;
                    }
                    uint64_t v1205 = *((void *)v15 + 2);
                    if ((v1205 & 4) == 0) {
                      return v8;
                    }
                    unint64_t v1206 = v1205 & 0xFFFFFFFFFFFFFFF8;
                    if (!v1206) {
                      return v8;
                    }
                    goto LABEL_743;
                  }
                  if ((v847 - 3) >= 0xFFFFFFFE) {
                    uint64_t v1207 = v15;
                  }
                  else {
                    uint64_t v1207 = 0;
                  }
                  if ((v847 - 3) >= 0xFFFFFFFE)
                  {
                    unint64_t v1206 = (unint64_t)(v1207 + 8);
LABEL_743:
                    *(void *)&long long v1908 = __src;
                    uint64_t v850 = v1206 + 16;
                    uint64_t v851 = (void **)&v1908;
                    goto LABEL_469;
                  }
LABEL_744:
                  if (v847 == 3) {
                    *((void *)v15 + 1) = 0;
                  }
                  return v8;
                }
              }
              else
              {
                unint64_t v1200 = *(void *)(v1198 + 24);
                if (HIDWORD(v1200))
                {
                  uint64_t v399 = (uint64_t)(v1200 << -(char)v1199) >> -(char)v1199;
                  if (v399 >= 0x80000000)
                  {
LABEL_713:
                    LODWORD(v399) = 0;
                    goto LABEL_718;
                  }
                  goto LABEL_717;
                }
              }
              LODWORD(v399) = 1;
              goto LABEL_718;
            }
            uint64_t v405 = *(void *)(v403 + 80);
            unsigned int v406 = *(_DWORD *)(v405 + 32);
            if (v406 > 0x40)
            {
              uint64_t v403 = **(void **)(v405 + 24);
              if (HIDWORD(v403))
              {
                if (v403 > 0x7FFFFFFF) {
                  goto LABEL_252;
                }
LABEL_708:
                LODWORD(v403) = v403 > (uint64_t)0xFFFFFFFF7FFFFFFFLL;
                goto LABEL_709;
              }
            }
            else
            {
              unint64_t v407 = *(void *)(v405 + 24);
              if (HIDWORD(v407))
              {
                uint64_t v403 = (uint64_t)(v407 << -(char)v406) >> -(char)v406;
                if (v403 >= 0x80000000)
                {
LABEL_252:
                  LODWORD(v403) = 0;
                  goto LABEL_709;
                }
                goto LABEL_708;
              }
            }
            LODWORD(v403) = 1;
            goto LABEL_709;
          }
          return v11;
        }
        int v128 = *(unsigned __int8 *)(*(void *)(a1 + 184296) + 280);
        uint64_t v129 = *(uint64_t **)(a2 + 32);
        uint64_t v131 = *v129;
        unint64_t v130 = v129[1];
        uint64_t v133 = v129[5];
        unint64_t v132 = v129[6];
        uint64_t v134 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1908 = v134;
        if (v134) {
          llvm::MetadataTracking::track((uint64_t)&v1908, v134, 2);
        }
        DWORD2(v1908) = *((_DWORD *)v8 + 15);
        if (v128
          || *(unsigned char *)(v8[5] + 16 * a3) != 5
          || (uint64_t v135 = v8[4], *(unsigned char *)(*(void *)(*(void *)v135 + 40) + 16 * *(unsigned int *)(v135 + 8)) != 5)
          || *(unsigned char *)(*(void *)(*(void *)(v135 + 40) + 40) + 16 * *(unsigned int *)(v135 + 48)) != 5)
        {
          uint64_t v136 = *(void *)(a4 + 832);
          if (v136) {
            __int16 v137 = *(_WORD *)(v136 + 8);
          }
          else {
            __int16 v137 = 0;
          }
          uint64_t v563 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, v131, (void *)v130, v137);
          __int16 v564 = 0;
          uint64_t v566 = (void *)(v130 & 0xFFFFFFFF00000000 | v565);
          uint64_t v567 = *(void *)(a4 + 832);
          if (v567) {
            __int16 v564 = *(_WORD *)(v567 + 8);
          }
          unint64_t v568 = v130 & 0xFFFFFFFF00000000;
          v569 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, v133, (void *)v132, v564);
          __int16 v570 = 0;
          int v572 = (void *)(v132 & 0xFFFFFFFF00000000 | v571);
          uint64_t v573 = *(void *)(a4 + 832);
          if (v573) {
            __int16 v570 = *(_WORD *)(v573 + 8);
          }
          unint64_t v574 = v132 & 0xFFFFFFFF00000000;
          uint64_t v575 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, (uint64_t)v563, v566, v570);
          __int16 v576 = 0;
          uint64_t v578 = v577 | v568;
          uint64_t v579 = *(void *)(a4 + 832);
          if (v579) {
            __int16 v576 = *(_WORD *)(v579 + 8);
          }
          v580 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, (uint64_t)v569, v572, v576);
          uint64_t v582 = v581 | v574;
          uint64_t v583 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v586 = 0;
          uint64_t v587 = *(void *)(a4 + 832);
          if (v587) {
            __int16 v586 = *(_WORD *)(v587 + 8);
          }
          uint64_t v588 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v575, v578, v585, (uint64_t)v583, v584, v586);
          uint64_t v590 = v589;
          __int16 v591 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v594 = 0;
          uint64_t v595 = *(void *)(a4 + 832);
          if (v595) {
            __int16 v594 = *(_WORD *)(v595 + 8);
          }
          __int16 v596 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v575, v578, v593, (uint64_t)v591, v592, v594);
          uint64_t v598 = v597;
          int v599 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v602 = 0;
          uint64_t v603 = *(void *)(a4 + 832);
          if (v603) {
            __int16 v602 = *(_WORD *)(v603 + 8);
          }
          int v604 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v580, v582, v601, (uint64_t)v599, v600, v602);
          uint64_t v606 = v605;
          uint64_t v607 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v610 = 0;
          uint64_t v611 = *(void *)(a4 + 832);
          if (v611) {
            __int16 v610 = *(_WORD *)(v611 + 8);
          }
          uint64_t v612 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v580, v582, v609, (uint64_t)v607, v608, v610);
          uint64_t v1852 = v613;
          uint64_t v1863 = (uint64_t)v612;
          __int16 v614 = 0;
          uint64_t v615 = *(void *)(a4 + 832);
          if (v615) {
            __int16 v614 = *(_WORD *)(v615 + 8);
          }
          uint64_t v1839 = (uint64_t)v590;
          uint64_t v1845 = (uint64_t)v588;
          int v616 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v588, v590, v614);
          uint64_t v618 = v617;
          __int16 v619 = 0;
          uint64_t v620 = *(void *)(a4 + 832);
          if (v620) {
            __int16 v619 = *(_WORD *)(v620 + 8);
          }
          uint64_t v621 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v604, v606, v619);
          uint64_t v623 = v622;
          __int16 v624 = 0;
          uint64_t v625 = *(void *)(a4 + 832);
          if (v625) {
            __int16 v624 = *(_WORD *)(v625 + 8);
          }
          int v626 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC6, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v596, v598, v624);
          uint64_t v1878 = v627;
          __int16 v628 = 0;
          uint64_t v629 = *(void *)(a4 + 832);
          if (v629) {
            __int16 v628 = *(_WORD *)(v629 + 8);
          }
          unsigned int v630 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC6, (uint64_t)&v1908, (llvm *)5, 0, v1863, v1852, v628);
          uint64_t v1820 = v632;
          uint64_t v1823 = (uint64_t)v630;
          __int16 v633 = 0;
          uint64_t v634 = *(void *)(a4 + 832);
          if (v634) {
            __int16 v633 = *(_WORD *)(v634 + 8);
          }
          uint64_t v636 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v616, v618, v631, (uint64_t)v621, v623, v633);
          __int16 v637 = 0;
          uint64_t v638 = *(void *)(a4 + 832);
          if (v638) {
            __int16 v637 = *(_WORD *)(v638 + 8);
          }
          unint64_t v1817 = (unint64_t)v635;
          uint64_t v639 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, (uint64_t)v636, v635, v637);
          uint64_t v641 = v640;
          uint64_t v642 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v645 = 0;
          uint64_t v646 = *(void *)(a4 + 832);
          if (v646) {
            __int16 v645 = *(_WORD *)(v646 + 8);
          }
          uint64_t v1829 = v618;
          uint64_t v647 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v639, v641, v644, (uint64_t)v642, v643, v645);
          uint64_t v1813 = v648;
          uint64_t v1815 = (uint64_t)v647;
          uint64_t v649 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v652 = 0;
          uint64_t v653 = *(void *)(a4 + 832);
          if (v653) {
            __int16 v652 = *(_WORD *)(v653 + 8);
          }
          uint64_t v1834 = (uint64_t)v616;
          uint64_t v655 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v639, v641, v651, (uint64_t)v649, v650, v652);
          unint64_t v657 = v656;
          __int16 v658 = 0;
          uint64_t v659 = *(void *)(a4 + 832);
          if (v659) {
            __int16 v658 = *(_WORD *)(v659 + 8);
          }
          uint64_t v660 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v626, v1878, v654, (uint64_t)v621, v623, v658);
          uint64_t v662 = v661;
          __int16 v663 = 0;
          uint64_t v664 = *(void *)(a4 + 832);
          if (v664) {
            __int16 v663 = *(_WORD *)(v664 + 8);
          }
          uint64_t v665 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v655, (void *)v657, v663);
          __int16 v668 = 0;
          uint64_t v669 = *(void *)(a4 + 832);
          if (v669) {
            __int16 v668 = *(_WORD *)(v669 + 8);
          }
          uint64_t v670 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v660, v662, v667, (uint64_t)v665, v666, v668);
          __int16 v671 = 0;
          uint64_t v673 = (void *)(v662 & 0xFFFFFFFF00000000 | v672);
          uint64_t v674 = *(void *)(a4 + 832);
          if (v674) {
            __int16 v671 = *(_WORD *)(v674 + 8);
          }
          uint64_t v675 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, (uint64_t)v670, v673, v671);
          unint64_t v677 = v641 & 0xFFFFFFFF00000000 | v676;
          v678 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v681 = 0;
          uint64_t v682 = *(void *)(a4 + 832);
          if (v682) {
            __int16 v681 = *(_WORD *)(v682 + 8);
          }
          uint64_t v1826 = (uint64_t)v626;
          char v684 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v675, v677, v680, (uint64_t)v678, v679, v681);
          uint64_t v686 = v685;
          __int16 v687 = 0;
          uint64_t v688 = *(void *)(a4 + 832);
          if (v688) {
            __int16 v687 = *(_WORD *)(v688 + 8);
          }
          int v689 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1908, (llvm *)4, 0, v1845, v1839, v683, v1863, (uint64_t)v1852, v687);
          __int16 v691 = 0;
          unint64_t v692 = v657 & 0xFFFFFFFF00000000;
          unint64_t v694 = v657 & 0xFFFFFFFF00000000 | v693;
          uint64_t v695 = *(void *)(a4 + 832);
          if (v695) {
            __int16 v691 = *(_WORD *)(v695 + 8);
          }
          v696 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v689, v694, v690, (uint64_t)v684, v686, v691);
          __int16 v699 = 0;
          uint64_t v700 = *(void *)(a4 + 832);
          if (v700) {
            __int16 v699 = *(_WORD *)(v700 + 8);
          }
          v702 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1908, (llvm *)0x26, 0, v1815, v1813, v698, (uint64_t)v696, v697 | v692, v699);
          __int16 v703 = 0;
          uint64_t v704 = *(void *)(a4 + 832);
          if (v704) {
            __int16 v703 = *(_WORD *)(v704 + 8);
          }
          unint64_t v705 = v662 & 0xFFFFFFFF00000000;
          unint64_t v553 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v702, (void *)(v1817 & 0xFFFFFFFF00000000 | v701), v703);
          int v555 = v707;
          __int16 v708 = 0;
          uint64_t v709 = *(void *)(a4 + 832);
          if (v709) {
            __int16 v708 = *(_WORD *)(v709 + 8);
          }
          unint64_t v710 = v641 & 0xFFFFFFFF00000000;
          uint64_t v562 = sub_1CD7F5D38((void *)a4, (const char *)0x1B2, (const llvm::APInt *)&v1908, (llvm *)5, 0, v1834, v1829, v706, v1823, v1820, (uint64_t)v670, (int)v673, SHIDWORD(v673), v708);
          __int16 v712 = 0;
          uint64_t v714 = v713 | v705;
          uint64_t v715 = *(void *)(a4 + 832);
          if (v715) {
            __int16 v712 = *(_WORD *)(v715 + 8);
          }
          uint64_t v716 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1908, (llvm *)5, 0, v1826, v1878, v711, v1823, v1820, v712);
LABEL_453:
          __int16 v839 = 0;
          uint64_t v840 = *(void *)(a4 + 832);
          if (v840) {
            __int16 v839 = *(_WORD *)(v840 + 8);
          }
          int v841 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v562, v714, v718, (uint64_t)v716, v717 | v710, v839);
          __int16 v842 = 0;
          uint64_t v843 = v8[5];
          uint64_t v844 = *((unsigned __int16 *)v8 + 29);
          __src[0] = v553;
          LODWORD(__src[1]) = v555;
          uint64_t v1900 = v841;
          LODWORD(v1901) = v845;
          uint64_t v846 = *(void *)(a4 + 832);
          if (v846) {
            __int16 v842 = *(_WORD *)(v846 + 8);
          }
          int v8 = sub_1CD7FF854((void *)a4, (const char *)0x37, (const llvm::APInt *)&v1908, v843, v844, (uint64_t *)__src, 2, v842);
          goto LABEL_458;
        }
        goto LABEL_458;
      }
      if (v10 == 64)
      {
        int v118 = *(unsigned __int8 *)(*(void *)(a1 + 184296) + 280);
        unint64_t v119 = *(uint64_t **)(a2 + 32);
        uint64_t v121 = *v119;
        unint64_t v120 = v119[1];
        uint64_t v123 = v119[5];
        unint64_t v122 = v119[6];
        int v124 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1908 = v124;
        if (v124) {
          llvm::MetadataTracking::track((uint64_t)&v1908, v124, 2);
        }
        DWORD2(v1908) = *((_DWORD *)v8 + 15);
        if (v118
          || *(unsigned char *)(v8[5] + 16 * a3) != 5
          || (uint64_t v125 = v8[4], *(unsigned char *)(*(void *)(*(void *)v125 + 40) + 16 * *(unsigned int *)(v125 + 8)) != 5)
          || *(unsigned char *)(*(void *)(*(void *)(v125 + 40) + 40) + 16 * *(unsigned int *)(v125 + 48)) != 5)
        {
          uint64_t v126 = *(void *)(a4 + 832);
          if (v126) {
            __int16 v127 = *(_WORD *)(v126 + 8);
          }
          else {
            __int16 v127 = 0;
          }
          int v410 = *(unsigned __int16 *)(v121 + 24);
          int v1862 = *(unsigned __int16 *)(v123 + 24);
          uint64_t v411 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, v121, (void *)v120, v127);
          __int16 v412 = 0;
          unint64_t v414 = v120 & 0xFFFFFFFF00000000 | v413;
          uint64_t v415 = *(void *)(a4 + 832);
          if (v415) {
            __int16 v412 = *(_WORD *)(v415 + 8);
          }
          uint64_t v416 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, v123, (void *)v122, v412);
          unint64_t v418 = v122 & 0xFFFFFFFF00000000 | v417;
          uint64_t v419 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v422 = 0;
          uint64_t v423 = *(void *)(a4 + 832);
          if (v423) {
            __int16 v422 = *(_WORD *)(v423 + 8);
          }
          uint64_t v424 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v411, v414, v421, (uint64_t)v419, v420, v422);
          uint64_t v1851 = v425;
          int v426 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v429 = 0;
          uint64_t v430 = *(void *)(a4 + 832);
          if (v430) {
            __int16 v429 = *(_WORD *)(v430 + 8);
          }
          uint64_t v431 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v411, v414, v428, (uint64_t)v426, v427, v429);
          unint64_t v433 = v432;
          unint64_t v434 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v437 = 0;
          uint64_t v438 = *(void *)(a4 + 832);
          if (v438) {
            __int16 v437 = *(_WORD *)(v438 + 8);
          }
          unsigned int v439 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v416, v418, v436, (uint64_t)v434, v435, v437);
          unsigned int v441 = v440;
          uint64_t v442 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v445 = 0;
          uint64_t v446 = *(void *)(a4 + 832);
          if (v446) {
            __int16 v445 = *(_WORD *)(v446 + 8);
          }
          uint64_t v1877 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v416, v418, v444, (uint64_t)v442, v443, v445);
          unint64_t v448 = v447;
          if (v410 == 199)
          {
            uint64_t v431 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)4, 0, 0, 0);
            unint64_t v433 = v433 & 0xFFFFFFFF00000000 | v449;
          }
          if (v1862 == 199)
          {
            uint64_t v1877 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)4, 0, 0, 0);
            unint64_t v448 = v448 & 0xFFFFFFFF00000000 | v450;
          }
          uint64_t v451 = *(void *)(a4 + 832);
          if (v451) {
            __int16 v452 = *(_WORD *)(v451 + 8);
          }
          else {
            __int16 v452 = 0;
          }
          uint64_t v1844 = (void *)v448;
          uint64_t v453 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v424, v1851, v452);
          uint64_t v1838 = v454;
          __int16 v455 = 0;
          uint64_t v456 = *(void *)(a4 + 832);
          if (v456) {
            __int16 v455 = *(_WORD *)(v456 + 8);
          }
          uint64_t v457 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v439, v441, v455);
          uint64_t v459 = v458;
          __int16 v460 = 0;
          uint64_t v461 = *(void *)(a4 + 832);
          if (v461) {
            __int16 v460 = *(_WORD *)(v461 + 8);
          }
          uint64_t v462 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v431, (void *)v433, v460);
          uint64_t v464 = v463;
          __int16 v465 = 0;
          uint64_t v466 = *(void *)(a4 + 832);
          if (v466) {
            __int16 v465 = *(_WORD *)(v466 + 8);
          }
          long long v467 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v1877, v1844, v465);
          uint64_t v1819 = v469;
          uint64_t v1822 = (uint64_t)v467;
          __int16 v470 = 0;
          uint64_t v471 = *(void *)(a4 + 832);
          if (v471) {
            __int16 v470 = *(_WORD *)(v471 + 8);
          }
          uint64_t v1811 = (uint64_t)v453;
          int v473 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v453, v1838, v468, (uint64_t)v457, v459, v470);
          unint64_t v474 = (unint64_t)v472;
          __int16 v475 = 0;
          uint64_t v476 = *(void *)(a4 + 832);
          if (v476) {
            __int16 v475 = *(_WORD *)(v476 + 8);
          }
          unint64_t v477 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, (uint64_t)v473, v472, v475);
          uint64_t v479 = v478;
          uint64_t v480 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v483 = 0;
          uint64_t v484 = *(void *)(a4 + 832);
          if (v484) {
            __int16 v483 = *(_WORD *)(v484 + 8);
          }
          uint64_t v1833 = (uint64_t)v424;
          uint64_t v485 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v477, v479, v482, (uint64_t)v480, v481, v483);
          uint64_t v1812 = v486;
          uint64_t v1814 = (uint64_t)v485;
          v487 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v490 = 0;
          uint64_t v491 = *(void *)(a4 + 832);
          if (v491) {
            __int16 v490 = *(_WORD *)(v491 + 8);
          }
          int v493 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v477, v479, v489, (uint64_t)v487, v488, v490);
          unint64_t v495 = v494;
          __int16 v496 = 0;
          uint64_t v497 = *(void *)(a4 + 832);
          if (v497) {
            __int16 v496 = *(_WORD *)(v497 + 8);
          }
          uint64_t v1828 = (uint64_t)v462;
          int v498 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v462, v464, v492, (uint64_t)v457, v459, v496);
          uint64_t v500 = v499;
          __int16 v501 = 0;
          uint64_t v502 = *(void *)(a4 + 832);
          if (v502) {
            __int16 v501 = *(_WORD *)(v502 + 8);
          }
          uint64_t v503 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v493, (void *)v495, v501);
          __int16 v506 = 0;
          uint64_t v507 = *(void *)(a4 + 832);
          if (v507) {
            __int16 v506 = *(_WORD *)(v507 + 8);
          }
          uint64_t v1825 = v464;
          int v508 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v498, v500, v505, (uint64_t)v503, v504, v506);
          __int16 v509 = 0;
          int v511 = (void *)(v500 & 0xFFFFFFFF00000000 | v510);
          uint64_t v512 = *(void *)(a4 + 832);
          if (v512) {
            __int16 v509 = *(_WORD *)(v512 + 8);
          }
          uint64_t v1810 = (uint64_t)v508;
          uint64_t v513 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x26, 0, (uint64_t)v508, v511, v509);
          uint64_t v1816 = v479;
          unint64_t v515 = v479 & 0xFFFFFFFF00000000 | v514;
          uint64_t v516 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v519 = 0;
          uint64_t v520 = *(void *)(a4 + 832);
          if (v520) {
            __int16 v519 = *(_WORD *)(v520 + 8);
          }
          uint64_t v521 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v513, v515, v518, (uint64_t)v516, v517, v519);
          uint64_t v523 = v522;
          uint64_t v524 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
          __int16 v527 = 0;
          uint64_t v528 = *(void *)(a4 + 832);
          if (v528) {
            __int16 v527 = *(_WORD *)(v528 + 8);
          }
          uint64_t v530 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v513, v515, v526, (uint64_t)v524, v525, v527);
          __int16 v1809 = v531;
          __int16 v532 = 0;
          uint64_t v533 = *(void *)(a4 + 832);
          if (v533) {
            __int16 v532 = *(_WORD *)(v533 + 8);
          }
          uint64_t v534 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1908, (llvm *)4, 0, v1833, (uint64_t)v1851, v529, (uint64_t)v1877, (uint64_t)v1844, v532);
          __int16 v536 = 0;
          unint64_t v537 = v495 & 0xFFFFFFFF00000000;
          unint64_t v539 = v495 & 0xFFFFFFFF00000000 | v538;
          uint64_t v540 = *(void *)(a4 + 832);
          if (v540) {
            __int16 v536 = *(_WORD *)(v540 + 8);
          }
          unsigned int v541 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)&v1908, (llvm *)4, 0, (uint64_t)v534, v539, v535, (uint64_t)v521, v523, v536);
          __int16 v544 = 0;
          uint64_t v545 = *(void *)(a4 + 832);
          if (v545) {
            __int16 v544 = *(_WORD *)(v545 + 8);
          }
          uint64_t v546 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1908, (llvm *)0x26, 0, v1814, v1812, v543, (uint64_t)v541, v542 | v537, v544);
          __int16 v547 = 0;
          int v549 = (void *)(v474 & 0xFFFFFFFF00000000 | v548);
          uint64_t v550 = *(void *)(a4 + 832);
          if (v550) {
            __int16 v547 = *(_WORD *)(v550 + 8);
          }
          unint64_t v551 = v500 & 0xFFFFFFFF00000000;
          unint64_t v553 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v546, v549, v547);
          int v555 = v554;
          uint64_t v556 = *(void *)(a4 + 832);
          if (v1862 == 199)
          {
            uint64_t v557 = v1822;
            if (v556) {
              __int16 v558 = *(_WORD *)(v556 + 8);
            }
            else {
              __int16 v558 = 0;
            }
            uint64_t v562 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)&v1908, (llvm *)5, 0, (uint64_t)v530, v1809, v558);
            uint64_t v559 = v1819;
          }
          else
          {
            uint64_t v557 = v1822;
            if (v556) {
              LOWORD(v556) = *(_WORD *)(v556 + 8);
            }
            uint64_t v559 = v1819;
            uint64_t v562 = sub_1CD7F5D38((void *)a4, (const char *)0x1B0, (const llvm::APInt *)&v1908, (llvm *)5, 0, v1811, v1838, v552, v1822, v1819, v1810, (int)v511, SHIDWORD(v511), v556);
          }
          unint64_t v710 = v1816 & 0xFFFFFFFF00000000;
          uint64_t v714 = v560 | v551;
          uint64_t v838 = *(void *)(a4 + 832);
          if (v838) {
            LOWORD(v838) = *(_WORD *)(v838 + 8);
          }
          uint64_t v716 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)&v1908, (llvm *)5, 0, v1828, v1825, v561, v557, v559, v838);
          goto LABEL_453;
        }
LABEL_458:
        uint64_t v15 = (unsigned __int8 *)v1908;
        if (!(void)v1908) {
          return v8;
        }
        int v847 = *(unsigned __int8 *)v1908;
        if ((v847 - 4) > 0x1E)
        {
          if ((v847 - 3) >= 0xFFFFFFFE) {
            uint64_t v848 = v1908;
          }
          else {
            uint64_t v848 = 0;
          }
          if ((v847 - 3) < 0xFFFFFFFE) {
            goto LABEL_744;
          }
          unint64_t v849 = v848 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v1908 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1908 + 12)) {
            return v8;
          }
          uint64_t v1793 = *(void *)(v1908 + 16);
          if ((v1793 & 4) == 0) {
            return v8;
          }
          unint64_t v849 = v1793 & 0xFFFFFFFFFFFFFFF8;
          if (!v849) {
            return v8;
          }
        }
        __src[0] = &v1908;
        uint64_t v850 = v849 + 16;
        uint64_t v851 = __src;
LABEL_469:
        sub_1CC5FA668(v850, v851);
        return v8;
      }
      uint64_t v747 = *(void **)(a2 + 64);
      __src[0] = v747;
      if (v747) {
        llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v747, 2);
      }
      LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
      uint64_t v748 = v8[4];
      uint64_t v749 = v8[5] + 16 * a3;
      uint64_t v750 = *(llvm **)v749;
      uint64_t v1879 = *(void *)(v749 + 8);
      uint64_t v752 = *(void *)v748;
      unint64_t v751 = *(void *)(v748 + 8);
      uint64_t v753 = *(uint64_t **)(v748 + 40);
      unint64_t v754 = *(void *)(v748 + 48);
      int v755 = *((unsigned __int16 *)v753 + 12);
      if (*(unsigned char *)(*(void *)(a1 + 184296) + 293))
      {
        uint64_t v756 = *(void *)(v749 + 8);
        if ((*(_WORD *)(*(void *)a4 + 1020) & 1) == 0 && *(void *)v749 == 10)
        {
          if (v755 == 36 || v755 == 12)
          {
            if (fabsf(llvm::APFloat::convertToFloat((llvm::APFloat *)(v753[10] + 24))) <= 8.5071e37) {
              goto LABEL_1147;
            }
            uint64_t v1866 = v752;
            uint64_t v886 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v1879, 0, 0.25);
            uint64_t v888 = v887;
            float v889 = llvm::APFloat::convertToFloat((llvm::APFloat *)(v753[10] + 24));
            uint64_t v753 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v1879, 0, v889 * 0.25);
            unint64_t v754 = v754 & 0xFFFFFFFF00000000 | v891;
            uint64_t v892 = *(void *)(a4 + 832);
            if (v892) {
              LOWORD(v892) = *(_WORD *)(v892 + 8);
            }
            uint64_t v756 = v1879;
            uint64_t v893 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)__src, v750, v1879, v1866, v751, v890, (uint64_t)v886, v888, v892);
          }
          else
          {
            uint64_t v1540 = *(void *)(a4 + 832);
            uint64_t v1541 = *(void *)v748;
            if (v1540) {
              __int16 v1542 = *(_WORD *)(v1540 + 8);
            }
            else {
              __int16 v1542 = 0;
            }
            uint64_t v1664 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDF, (uint64_t)__src, v750, v1879, *(void *)(v748 + 40), *(void **)(v748 + 48), v1542);
            int v1858 = v1665;
            uint64_t v1871 = (uint64_t)v1664;
            uint64_t v1666 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v1879, 0, 8.50705917e37);
            int v1842 = v1667;
            uint64_t v1849 = (uint64_t)v1666;
            uint64_t v1668 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v1879, 0, 0.25);
            unsigned int v1670 = v1669;
            uint64_t v1671 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v1879, 0, 1.0);
            v1674 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)__src, v1871, v1858, v1849, v1842, (uint64_t)v1668, v1670, (uint64_t)v1671, v1672, v1673, 0x12u);
            __int16 v1677 = v1674;
            uint64_t v1678 = v1675;
            uint64_t v1679 = *(void *)(a4 + 832);
            if (v1679) {
              LOWORD(v1679) = *(_WORD *)(v1679 + 8);
            }
            uint64_t v753 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)__src, v750, v1879, (uint64_t)v753, v754, v1676, (uint64_t)v1674, v1675, v1679);
            unint64_t v754 = v754 & 0xFFFFFFFF00000000 | v1681;
            uint64_t v1682 = *(void *)(a4 + 832);
            if (v1682) {
              LOWORD(v1682) = *(_WORD *)(v1682 + 8);
            }
            uint64_t v1807 = (uint64_t)v1677;
            uint64_t v756 = v1879;
            uint64_t v893 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)__src, v750, v1879, v1541, v751, v1680, v1807, v1678, v1682);
          }
          uint64_t v752 = (uint64_t)v893;
          unint64_t v751 = v751 & 0xFFFFFFFF00000000 | v894;
        }
      }
      else
      {
        uint64_t v756 = *(void *)(v749 + 8);
      }
LABEL_1147:
      if (v755 == 36 || v755 == 12)
      {
        unint64_t v1684 = v751;
        uint64_t v1685 = v753[10];
        if (*(_UNKNOWN **)(v1685 + 32) == &unk_1CFB2E344) {
          char v1686 = *(unsigned char *)(*(void *)(v1685 + 40) + 28);
        }
        else {
          char v1686 = *(unsigned char *)(v1685 + 52);
        }
        if ((v1686 & 7) == 3)
        {
          uint64_t v1687 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v756, 0, 0.0);
          int v1859 = v1688;
          uint64_t v1872 = (uint64_t)v1687;
          __int16 v1689 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v756, 0, NAN);
          uint64_t v1690 = v753;
          unint64_t v1691 = v754;
          unsigned int v1693 = v1692;
          double v1694 = -INFINITY;
          if ((v1686 & 8) == 0) {
            double v1694 = INFINITY;
          }
          uint64_t v1695 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v1879, 0, v1694);
          unint64_t v751 = v1684;
          unsigned int v1696 = v1693;
          unint64_t v754 = v1691;
          uint64_t v753 = v1690;
          uint64_t v756 = v1879;
          __int16 v1699 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)__src, v752, v1684, v1872, v1859, (uint64_t)v1689, v1696, (uint64_t)v1695, v1697, v1698, 9u);
        }
        else
        {
          v1703 = sub_1CD7ECDC4(a4, (uint64_t)__src, (BOOL)v750, v756, 0, 1.0);
          uint64_t v1705 = *(void *)(a4 + 832);
          if (v1705) {
            LOWORD(v1705) = *(_WORD *)(v1705 + 8);
          }
          unint64_t v751 = v1684;
          __int16 v1699 = sub_1CCFDED5C(a4, 99, (const llvm::APInt *)__src, v750, v756, (uint64_t)v1703, v1702, v1704, (uint64_t)v753, v754, v1705);
        }
      }
      else
      {
        uint64_t v1706 = *(void *)(a4 + 832);
        if (v1706) {
          __int16 v1707 = *(_WORD *)(v1706 + 8);
        }
        else {
          __int16 v1707 = 0;
        }
        __int16 v1699 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0x1A7, (uint64_t)__src, v750, v756, (uint64_t)v753, (void *)v754, v1707);
      }
      if (v750 == 9)
      {
        uint64_t v1711 = *(void *)(a4 + 832);
        if (v1711) {
          __int16 v1712 = *(_WORD *)(v1711 + 8);
        }
        else {
          __int16 v1712 = 0;
        }
        v1722 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)__src, (llvm *)0xA, 0, v752, (void *)v751, v1712);
        uint64_t v1724 = v1723;
        __int16 v1725 = 0;
        uint64_t v1726 = *(void *)(a4 + 832);
        if (v1726) {
          __int16 v1725 = *(_WORD *)(v1726 + 8);
        }
        uint64_t v1728 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v753, (void *)v754, v1725);
        __int16 v1729 = 0;
        uint64_t v1730 = *(void *)(a4 + 832);
        if (v1730) {
          __int16 v1729 = *(_WORD *)(v1730 + 8);
        }
        v1731 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0x1A7, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v1728, v1727, v1729);
        uint64_t v1357 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v1722, v1724, v1733, (uint64_t)v1731, v1732, *((_WORD *)v8 + 36));
LABEL_885:
        uint64_t v1359 = (uint64_t)v1357;
        uint64_t v1360 = v1358;
        unint64_t v1361 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        uint64_t v1364 = *(void *)(a4 + 832);
        if (v1364) {
          LOWORD(v1364) = *(_WORD *)(v1364 + 8);
        }
        uint64_t v117 = sub_1CCFDED5C(a4, 212, (const llvm::APInt *)__src, (llvm *)9, 0, v1359, v1360, v1363, (uint64_t)v1361, v1362, v1364);
      }
      else
      {
        uint64_t v117 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)__src, v750, v756, v752, v751, v1701, (uint64_t)v1699, v1700, *((_WORD *)v8 + 36));
      }
      goto LABEL_1168;
    }
    if (v10 != 47)
    {
      if (v10 != 53) {
        return sub_1CD3DC75C(a1, a2, (llvm::APFloatBase *)a4);
      }
      if (*(unsigned char *)(*(void *)(a1 + 184296) + 280)) {
        return 0;
      }
      if (*(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) != 5) {
        return 0;
      }
      uint64_t v30 = *(unsigned int **)(a2 + 32);
      uint64_t v31 = *(void *)v30;
      if (*(unsigned char *)(*(void *)(*(void *)v30 + 40) + 16 * v30[2]) != 6) {
        return 0;
      }
      __int16 v32 = *(void **)(a2 + 64);
      __src[0] = v32;
      if (v32)
      {
        llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v32, 2);
        uint64_t v30 = (unsigned int *)v8[4];
        uint64_t v31 = *(void *)v30;
      }
      LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
      uint64_t v33 = (void *)*((void *)v30 + 1);
      uint64_t v34 = *(void *)(a4 + 832);
      if (v34) {
        __int16 v35 = *(_WORD *)(v34 + 8);
      }
      else {
        __int16 v35 = 0;
      }
      v1532 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x31, 0, v31, v33, v35);
      uint64_t v1534 = v8[4];
      uint64_t v1535 = *(void *)(v1534 + 40);
      uint64_t v1536 = *(void *)(v1534 + 48);
      uint64_t v1537 = *(void *)(a4 + 832);
      if (v1537) {
        LOWORD(v1537) = *(_WORD *)(v1537 + 8);
      }
      uint64_t v117 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1532, v1531, v1533, v1535, v1536, v1537);
LABEL_1168:
      int v4 = v117;
      goto LABEL_1169;
    }
    uint64_t v138 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
    uint64_t v139 = (unsigned int *)(v138 + 24);
    if (*(_DWORD *)(v138 + 32) >= 0x41u) {
      uint64_t v139 = *(unsigned int **)v139;
    }
    uint64_t v140 = *v139;
    uint64_t v10 = (v140 - 1282);
    if (v10 < 0x190)
    {
      uint64_t v141 = *(void *)(a1 + 184296);
      if (*(unsigned char *)(v141 + 281))
      {
        int v142 = 2;
      }
      else if (*(unsigned char *)(v141 + 282))
      {
        int v142 = 3;
      }
      else
      {
        int v142 = 1;
      }
      __src[0] = &v1900;
      __src[1] = (void *)0x200000000;
      llvm::GPUSDISel::ExpandIntrinsicSample(a2, (llvm::APFloatBase *)a4, v140, __src, v142, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB8C42A4, (void (*)(_OWORD *, uint64_t, llvm::APFloatBase *, void **, uint64_t (*)(void)))sub_1CB8D7124, 1, 33);
      unsigned int v379 = __src[1];
      if (LODWORD(__src[1]) == 1)
      {
        int v380 = (uint64_t *)__src[0];
        int v4 = *(uint64_t **)__src[0];
        goto LABEL_220;
      }
      uint64_t v860 = (unsigned __int8 *)v8[8];
      *(void *)&long long v1908 = v860;
      if (v860)
      {
        llvm::MetadataTracking::track((uint64_t)&v1908, v860, 2);
        unsigned int v379 = __src[1];
      }
      DWORD2(v1908) = *((_DWORD *)v8 + 15);
      uint64_t v861 = v379;
      uint64_t v862 = *(void *)(a4 + 832);
      if (v862) {
        __int16 v863 = *(_WORD *)(v862 + 8);
      }
      else {
        __int16 v863 = 0;
      }
      int v4 = sub_1CD7FF854((void *)a4, (const char *)0x37, (const llvm::APInt *)&v1908, v8[5], *((unsigned __int16 *)v8 + 29), (uint64_t *)__src[0], v861, v863);
      uint64_t v915 = v1908;
      if ((void)v1908)
      {
        int v916 = *(unsigned __int8 *)v1908;
        if ((v916 - 4) > 0x1E)
        {
          if ((v916 - 3) >= 0xFFFFFFFE) {
            uint64_t v1433 = v1908;
          }
          else {
            uint64_t v1433 = 0;
          }
          if ((v916 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1209 = v1433 + 8;
            goto LABEL_957;
          }
LABEL_959:
          if (v916 == 3) {
            *(void *)(v915 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v1908 + 1) & 0x7F) == 2 || *(_DWORD *)(v1908 + 12))
        {
          uint64_t v1208 = *(void *)(v1908 + 16);
          if ((v1208 & 4) != 0)
          {
            unint64_t v1209 = v1208 & 0xFFFFFFFFFFFFFFF8;
            if (v1209)
            {
LABEL_957:
              *(void *)&long long v1898 = &v1908;
              uint64_t v1414 = v1209 + 16;
              int v1415 = &v1898;
LABEL_958:
              sub_1CC5FA668(v1414, v1415);
            }
          }
        }
      }
LABEL_961:
      int v380 = (uint64_t *)__src[0];
LABEL_220:
      if (v380 == (uint64_t *)&v1900) {
        return v4;
      }
      goto LABEL_221;
    }
    switch((int)v140)
    {
      case 1822:
      case 1823:
      case 1824:
      case 1825:
      case 1826:
      case 1827:
      case 1828:
      case 1829:
      case 1830:
      case 1831:
      case 1832:
      case 1833:
      case 1834:
      case 1835:
      case 1836:
      case 1837:
      case 1838:
      case 1839:
      case 1840:
      case 1841:
      case 1842:
      case 1843:
      case 1844:
      case 1845:
      case 1846:
      case 1847:
      case 1848:
      case 1849:
      case 1850:
      case 1851:
      case 1852:
      case 1853:
      case 1854:
      case 1855:
      case 1856:
      case 1857:
      case 1858:
      case 1859:
      case 1860:
      case 1861:
      case 1862:
      case 1863:
      case 1864:
      case 1865:
      case 1866:
      case 1867:
      case 1868:
      case 1869:
      case 1870:
      case 1871:
      case 1872:
      case 1873:
      case 1874:
      case 1875:
      case 1876:
      case 1877:
      case 1878:
      case 1879:
      case 1880:
      case 1881:
      case 1882:
      case 1883:
      case 1884:
      case 1885:
      case 1886:
      case 1887:
      case 1888:
      case 1889:
      case 1890:
      case 1891:
      case 1892:
      case 1893:
      case 1894:
      case 1895:
      case 1896:
      case 1897:
      case 1898:
      case 1899:
      case 1900:
      case 1901:
      case 1902:
      case 1903:
      case 1904:
      case 1905:
      case 1906:
      case 1907:
      case 1908:
      case 1909:
      case 1910:
      case 1911:
      case 1912:
      case 1913:
      case 1914:
      case 1915:
      case 1916:
      case 1917:
      case 1918:
      case 1919:
      case 1920:
      case 1921:
      case 1922:
      case 1923:
      case 1924:
      case 1925:
      case 1926:
      case 1927:
      case 1928:
      case 1929:
      case 1930:
      case 1931:
      case 1932:
      case 1933:
      case 1934:
      case 1935:
      case 1936:
      case 1937:
      case 1938:
      case 1939:
      case 1940:
      case 1941:
      case 1942:
      case 1943:
      case 1944:
      case 1945:
      case 1946:
      case 1947:
      case 1948:
      case 1949:
      case 1950:
      case 1951:
      case 1952:
      case 1953:
      case 1954:
      case 1955:
      case 1956:
      case 1957:
      case 1958:
      case 1959:
      case 1960:
      case 1961:
      case 1962:
      case 1963:
      case 1964:
      case 1965:
      case 1966:
      case 1967:
      case 1968:
      case 1969:
      case 1970:
      case 1971:
      case 1972:
      case 1973:
      case 1974:
      case 1975:
      case 1976:
      case 1977:
      case 1978:
      case 1979:
      case 1980:
      case 1981:
      case 1982:
      case 1983:
      case 1984:
      case 1985:
      case 1986:
      case 1987:
      case 1988:
      case 1989:
      case 1990:
      case 1991:
      case 1992:
      case 1993:
      case 1994:
      case 1995:
      case 1996:
      case 1997:
      case 1998:
      case 1999:
      case 2000:
      case 2001:
      case 2002:
      case 2003:
      case 2004:
      case 2005:
      case 2006:
      case 2007:
      case 2008:
      case 2009:
      case 2010:
      case 2011:
      case 2012:
      case 2013:
      case 2014:
      case 2015:
      case 2016:
      case 2017:
      case 2018:
      case 2019:
      case 2020:
      case 2021:
      case 2022:
      case 2023:
      case 2024:
      case 2025:
      case 2026:
      case 2027:
      case 2031:
      case 2032:
      case 2036:
      case 2037:
      case 2038:
      case 2039:
      case 2040:
      case 2041:
      case 2042:
      case 2043:
      case 2047:
      case 2048:
      case 2052:
      case 2053:
      case 2054:
      case 2055:
      case 2056:
      case 2057:
      case 2058:
      case 2059:
      case 2063:
      case 2064:
      case 2068:
      case 2069:
      case 2070:
      case 2071:
      case 2072:
      case 2073:
      case 2074:
      case 2075:
      case 2079:
      case 2080:
LABEL_1308:
        __break(1u);
        goto LABEL_1309;
      case 2028:
      case 2029:
      case 2030:
      case 2033:
      case 2034:
      case 2035:
      case 2044:
      case 2045:
      case 2046:
      case 2049:
      case 2050:
      case 2051:
      case 2060:
      case 2061:
      case 2062:
      case 2065:
      case 2066:
      case 2067:
      case 2076:
      case 2077:
      case 2078:
      case 2081:
      case 2082:
      case 2083:
        int v5 = (void **)&v1900;
        __src[0] = &v1900;
        __src[1] = (void *)0x200000000;
        sub_1CD3DD534(a2, (llvm::APFloatBase *)a4, v140, (uint64_t)__src, *(void *)(a1 + 184296));
        unsigned int v1663 = __src[1];
        if (LODWORD(__src[1]) == 1)
        {
          int v380 = (uint64_t *)__src[0];
          int v4 = *(uint64_t **)__src[0];
          goto LABEL_1138;
        }
        uint64_t v1789 = (unsigned __int8 *)v8[8];
        *(void *)&long long v1908 = v1789;
        if (v1789)
        {
          llvm::MetadataTracking::track((uint64_t)&v1908, v1789, 2);
          unsigned int v1663 = __src[1];
        }
        DWORD2(v1908) = *((_DWORD *)v8 + 15);
        uint64_t v1790 = v1663;
        uint64_t v1791 = *(void *)(a4 + 832);
        if (v1791) {
          __int16 v1792 = *(_WORD *)(v1791 + 8);
        }
        else {
          __int16 v1792 = 0;
        }
        int v4 = sub_1CD7FF854((void *)a4, (const char *)0x37, (const llvm::APInt *)&v1908, v8[5], *((unsigned __int16 *)v8 + 29), (uint64_t *)__src[0], v1790, v1792);
        uint64_t v10 = v1908;
        if (!(void)v1908) {
          goto LABEL_1251;
        }
        int v1795 = *(unsigned __int8 *)v1908;
        if ((v1795 - 4) > 0x1E)
        {
          if ((v1795 - 3) >= 0xFFFFFFFE) {
            uint64_t v1797 = v1908;
          }
          else {
            uint64_t v1797 = 0;
          }
          if ((v1795 - 3) < 0xFFFFFFFE)
          {
            if (v1795 == 3) {
              *(void *)(v1908 + 8) = 0;
            }
            goto LABEL_1251;
          }
          unint64_t v1798 = v1797 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v1908 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1908 + 12)) {
            goto LABEL_1251;
          }
LABEL_1309:
          uint64_t v1805 = *(void *)(v10 + 16);
          if ((v1805 & 4) == 0 || (unint64_t v1798 = v1805 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
LABEL_1251:
            int v380 = (uint64_t *)__src[0];
LABEL_1138:
            if (v380 == (uint64_t *)v5) {
              return v4;
            }
LABEL_221:
            free(v380);
            return v4;
          }
        }
        *(void *)&long long v1898 = &v1908;
        sub_1CC5FA668(v1798 + 16, &v1898);
        goto LABEL_1251;
      default:
        uint64_t v381 = *(void *)(a1 + 184296);
        if (*(unsigned char *)(v381 + 281))
        {
          int v382 = 2;
        }
        else if (*(unsigned char *)(v381 + 282))
        {
          int v382 = 3;
        }
        else
        {
          int v382 = 1;
        }
        __src[0] = &v1900;
        __src[1] = (void *)0x200000000;
        llvm::GPUSDISel::ExpandIntrinsicSample(a2, (llvm::APFloatBase *)a4, v140, __src, v382, (uint64_t (*)(uint64_t *, unint64_t, llvm::APFloatBase *, uint64_t, uint64_t))sub_1CB8C42A4, (void (*)(_OWORD *, uint64_t, llvm::APFloatBase *, void **, uint64_t (*)(void)))sub_1CB8D7124, 1, 33);
        int v719 = (int)__src[1];
        if (LODWORD(__src[1]) == 1) {
          int v4 = *(uint64_t **)__src[0];
        }
        if (__src[0] != &v1900) {
          free(__src[0]);
        }
        if (v719 != 1) {
          return 0;
        }
        return v4;
    }
  }
  if (*(unsigned __int16 *)(a2 + 24) <= 0xE4u)
  {
    int v5 = __src;
    switch(*(_WORD *)(a2 + 24))
    {
      case 0x92:
        uint64_t v245 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
        uint64_t v247 = *v245;
        uint64_t v246 = v245[1];
        *(void *)&long long v1908 = v247;
        *((void *)&v1908 + 1) = v246;
        if ((_BYTE)v247) {
          char EVT = sub_1CB8C2FBC((unsigned __int8 *)&v1908);
        }
        else {
          char EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v246 + 24), 0, a3);
        }
        if (EVT != 10) {
          return 0;
        }
        int v376 = (unsigned __int8 *)v8[8];
        *(void *)&long long v1898 = v376;
        if (v376) {
          llvm::MetadataTracking::track((uint64_t)&v1898, v376, 2);
        }
        DWORD2(v1898) = *((_DWORD *)v8 + 15);
        __src[0] = &v1900;
        __src[1] = (void *)0x800000000;
        if (v1908 == 97)
        {
          uint64_t v377 = a4;
          uint64_t v378 = 63;
        }
        else
        {
          if (v1908 != 95) {
            llvm::report_fatal_error((llvm *)"Unsupported vector width!", (const llvm::Twine *)1);
          }
          uint64_t v377 = a4;
          uint64_t v378 = 27;
        }
        unsigned int v1187 = sub_1CD7EBF14(v377, v378, (const llvm::APInt *)&v1898, (llvm *)5, 0, 1, 0);
        if (LODWORD(__src[1]) >= HIDWORD(__src[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v1188 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
        *uint64_t v1188 = v1187;
        v1188[1] = v1186;
        unsigned int v1189 = ++LODWORD(__src[1]);
        if (*((_WORD *)v8 + 28))
        {
          unsigned int v1194 = 0;
          do
          {
            if (v1189 >= HIDWORD(__src[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *((_OWORD *)__src[0] + v1189) = *(_OWORD *)(v8[4] + 40 * v1194);
            ++LODWORD(__src[1]);
            v1196 = sub_1CD7EBF14(a4, v1194 + 33, (const llvm::APInt *)&v1898, (llvm *)5, 0, 1, 0);
            if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            unint64_t v1197 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
            *unint64_t v1197 = v1196;
            v1197[1] = v1195;
            unsigned int v1189 = ++LODWORD(__src[1]);
            ++v1194;
          }
          while (v1194 != *((unsigned __int16 *)v8 + 28));
        }
        int v4 = sub_1CD801450(a4, 18, (uint64_t)&v1898, (llvm *)0xAE, 0, (uint64_t *)__src[0], v1189);
        if (__src[0] != &v1900) {
          free(__src[0]);
        }
        uint64_t v1190 = v1898;
        if (!(void)v1898) {
          return v4;
        }
        int v1191 = *(unsigned __int8 *)v1898;
        if ((v1191 - 4) <= 0x1E)
        {
          if ((*(unsigned char *)(v1898 + 1) & 0x7F) == 2 || *(_DWORD *)(v1898 + 12))
          {
            uint64_t v1192 = *(void *)(v1898 + 16);
            if ((v1192 & 4) != 0)
            {
              unint64_t v1193 = v1192 & 0xFFFFFFFFFFFFFFF8;
              if (v1193) {
                goto LABEL_939;
              }
            }
          }
          return v4;
        }
        if ((v1191 - 3) >= 0xFFFFFFFE) {
          uint64_t v1427 = v1898;
        }
        else {
          uint64_t v1427 = 0;
        }
        if ((v1191 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1193 = v1427 + 8;
LABEL_939:
          uint64_t v1410 = &v1898;
          goto LABEL_940;
        }
        goto LABEL_941;
      case 0x93:
        unsigned int v154 = *(void **)(a2 + 64);
        __src[0] = v154;
        if (v154) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v154, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        uint64_t v155 = v8[5] + 16 * a3;
        uint64_t v156 = *(llvm **)v155;
        unsigned int v157 = *(void *)v155 - 27;
        BOOL v158 = v157 > 0x31;
        uint64_t v159 = (1 << v157) & 0x2000000400803;
        if (v158 || v159 == 0) {
          goto LABEL_153;
        }
        int v161 = (uint64_t *)v8[4];
        uint64_t v162 = v161[10];
        int v163 = *(unsigned __int16 *)(v162 + 24);
        if (v163 != 35 && v163 != 11) {
          goto LABEL_153;
        }
        uint64_t v165 = *(void *)(v155 + 8);
        uint64_t v166 = *v161;
        uint64_t v167 = v161[1];
        uint64_t v168 = v161[5];
        uint64_t v169 = v161[6];
        uint64_t v170 = *(void *)(v162 + 80);
        uint64_t v171 = (uint64_t *)(v170 + 24);
        if (*(_DWORD *)(v170 + 32) >= 0x41u) {
          uint64_t v171 = (uint64_t *)*v171;
        }
        unint64_t v172 = sub_1CD7EBF14(a4, *v171, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v175 = 0;
        uint64_t v176 = *(void *)(a4 + 832);
        if (v176) {
          __int16 v175 = *(_WORD *)(v176 + 8);
        }
        uint64_t v177 = (uint64_t)sub_1CD7F5D38((void *)a4, (const char *)0x1B4, (const llvm::APInt *)__src, v156, v165, v166, v167, v174, v168, v169, (uint64_t)v172, v173, SHIDWORD(v173), v175);
        goto LABEL_504;
      case 0x94:
        int v221 = *(void **)(a2 + 64);
        __src[0] = v221;
        if (v221) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v221, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        unsigned int v222 = (uint64_t **)v8[4];
        int v4 = *v222;
        uint64_t v223 = (uint64_t)v222[1];
        uint64_t v224 = v8[5] + 16 * a3;
        int v225 = *(llvm **)v224;
        uint64_t v226 = *(void *)(v224 + 8);
        int v227 = *(unsigned __int8 *)((*v222)[5] + 16 * v223);
        BOOL v228 = (v227 - 38) > 0x39 || ((1 << (v227 - 38)) & 0x200004000000801) == 0;
        if (v228 && (v227 - 27) >= 2
          || ((v229 = v222[5], int v230 = *((unsigned __int16 *)v229 + 12), v230 != 35) ? (v231 = v230 == 11) : (v231 = 1),
              !v231))
        {
LABEL_153:
          char v240 = 1;
          goto LABEL_506;
        }
        if (*((_WORD *)v4 + 12) != 146)
        {
          uint64_t v867 = v229[10];
          v868 = (uint64_t *)(v867 + 24);
          if (*(_DWORD *)(v867 + 32) >= 0x41u) {
            v868 = (uint64_t *)*v868;
          }
          uint64_t v869 = sub_1CD7EBF14(a4, *v868, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          uint64_t v872 = *(void *)(a4 + 832);
          if (v872) {
            LOWORD(v872) = *(_WORD *)(v872 + 8);
          }
          uint64_t v177 = (uint64_t)sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, v225, v226, (uint64_t)v4, v223, v871, (uint64_t)v869, v870, v872);
          goto LABEL_504;
        }
        uint64_t v232 = v229[10];
        uint64_t v233 = (unsigned int *)(v232 + 24);
        if (*(_DWORD *)(v232 + 32) >= 0x41u) {
          uint64_t v233 = *(unsigned int **)v233;
        }
        int v234 = (uint64_t **)(v4[4] + 40 * *v233);
        int v4 = *v234;
        uint64_t v235 = (uint64_t)v234[1];
        int v236 = (unsigned __int8 *)((*v234)[5] + 16 * v235);
        int v237 = *v236;
        if (v237 != v225
          || ((uint64_t v238 = *((void *)v236 + 1), !v237) ? (v239 = v238 == v226) : (v239 = 1), !v239))
        {
          uint64_t v177 = sub_1CD7EB67C(a4, (uint64_t)v4, v235, (uint64_t)__src, (uint64_t)v225, v226);
LABEL_504:
          int v4 = (uint64_t *)v177;
        }
        char v240 = 0;
LABEL_506:
        if (!__src[0]) {
          goto LABEL_510;
        }
        int v873 = *(unsigned __int8 *)__src[0];
        if ((v873 - 4) > 0x1E)
        {
          if ((v873 - 3) >= 0xFFFFFFFE) {
            uint64_t v875 = __src[0];
          }
          else {
            uint64_t v875 = 0;
          }
          if ((v873 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v876 = (unint64_t)v875 + 8;
LABEL_518:
            *(void *)&long long v1908 = __src;
            sub_1CC5FA668(v876 + 16, &v1908);
            goto LABEL_510;
          }
          if (v873 == 3) {
            *((void *)__src[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)__src[0] + 1) & 0x7F) == 2 || *((_DWORD *)__src[0] + 3))
        {
          uint64_t v1794 = *((void *)__src[0] + 2);
          if ((v1794 & 4) != 0)
          {
            unint64_t v876 = v1794 & 0xFFFFFFFFFFFFFFF8;
            if (v876) {
              goto LABEL_518;
            }
          }
        }
LABEL_510:
        if (v240) {
          return 0;
        }
        return v4;
      case 0x95:
        if (*(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) != 28) {
          return 0;
        }
        uint64_t v178 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1908 = v178;
        if (v178) {
          llvm::MetadataTracking::track((uint64_t)&v1908, v178, 2);
        }
        DWORD2(v1908) = *((_DWORD *)v8 + 15);
        uint64_t v179 = (uint64_t *)v8[4];
        uint64_t v180 = *v179;
        uint64_t v181 = v179[1];
        uint64_t v182 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
        __int16 v185 = 0;
        uint64_t v186 = *(void *)(a4 + 832);
        if (v186) {
          __int16 v185 = *(_WORD *)(v186 + 8);
        }
        __src[0] = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, v180, v181, v184, (uint64_t)v182, v183, v185);
        __src[1] = v187;
        uint64_t v188 = (uint64_t *)v8[4];
        uint64_t v189 = *v188;
        uint64_t v190 = v188[1];
        unint64_t v191 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
        __int16 v194 = 0;
        uint64_t v195 = *(void *)(a4 + 832);
        if (v195) {
          __int16 v194 = *(_WORD *)(v195 + 8);
        }
        uint64_t v1900 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, v189, v190, v193, (uint64_t)v191, v192, v194);
        uint64_t v1901 = v196;
        uint64_t v197 = v8[4];
        uint64_t v198 = *(void *)(v197 + 40);
        uint64_t v199 = *(void *)(v197 + 48);
        unint64_t v200 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
        __int16 v203 = 0;
        uint64_t v204 = *(void *)(a4 + 832);
        if (v204) {
          __int16 v203 = *(_WORD *)(v204 + 8);
        }
        int v1902 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, v198, v199, v202, (uint64_t)v200, v201, v203);
        uint64_t v1903 = v205;
        uint64_t v206 = v8[4];
        uint64_t v207 = *(void *)(v206 + 40);
        uint64_t v208 = *(void *)(v206 + 48);
        uint64_t v209 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
        __int16 v212 = 0;
        uint64_t v213 = *(void *)(a4 + 832);
        if (v213) {
          __int16 v212 = *(_WORD *)(v213 + 8);
        }
        uint64_t v214 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)4, 0, v207, v208, v211, (uint64_t)v209, v210, v212);
        uint64_t v29 = 0;
        uint64_t v1904 = v214;
        uint64_t v1905 = v215;
        uint64_t v216 = *(void *)(a4 + 832);
        if (v216) {
          uint64_t v29 = *(unsigned __int16 *)(v216 + 8);
        }
        uint64_t v217 = (void *)a4;
        uint64_t v218 = 146;
        uint64_t v219 = 28;
        uint64_t v220 = 4;
        goto LABEL_792;
      case 0x96:
      case 0x98:
      case 0x9A:
      case 0x9B:
      case 0x9C:
      case 0x9D:
      case 0x9E:
      case 0xA1:
      case 0xA2:
      case 0xA3:
      case 0xA4:
      case 0xA5:
      case 0xA6:
      case 0xA7:
      case 0xA8:
      case 0xA9:
      case 0xAA:
      case 0xAE:
      case 0xB2:
      case 0xB4:
      case 0xB5:
      case 0xB6:
      case 0xB7:
      case 0xB9:
      case 0xBA:
      case 0xBB:
      case 0xBC:
      case 0xBE:
      case 0xBF:
      case 0xC2:
      case 0xC6:
      case 0xC7:
      case 0xC8:
        goto LABEL_1308;
      case 0x97:
        __src[0] = &v1900;
        __src[1] = (void *)0x800000000;
        uint64_t v793 = *(void *)(*(void *)(*(void *)(a2 + 32) + 40) + 80);
        uint64_t v794 = (void *)(v793 + 24);
        if (*(_DWORD *)(v793 + 32) >= 0x41u) {
          uint64_t v794 = (void *)*v794;
        }
        unsigned int v795 = *(_DWORD *)v794;
        v796 = (uint64_t *)(*(void *)(a2 + 40) + 16 * a3);
        uint64_t v798 = *v796;
        uint64_t v797 = v796[1];
        *(void *)&long long v1908 = v798;
        *((void *)&v1908 + 1) = v797;
        if ((_BYTE)v798)
        {
          unsigned __int8 v803 = sub_1CB8C2FBC((unsigned __int8 *)&v1908);
          unint64_t v802 = 0;
          uint64_t v801 = 0;
        }
        else
        {
          unint64_t v799 = llvm::EVT::getEVT(*(llvm::EVT **)(v797 + 24), 0, a3);
          uint64_t v801 = v800;
          unint64_t v802 = v799 & 0xFFFFFFFFFFFFFF00;
          unsigned __int8 v803 = v799;
        }
        unint64_t v895 = v802 | v803;
        if (v803 == 3) {
          uint64_t v896 = 4;
        }
        else {
          uint64_t v896 = v895;
        }
        char v897 = (unsigned __int8 *)v8[8];
        *(void *)&long long v1898 = v897;
        if (v897) {
          llvm::MetadataTracking::track((uint64_t)&v1898, v897, 2);
        }
        DWORD2(v1898) = *((_DWORD *)v8 + 15);
        int v898 = sub_1CD3DB440((llvm::EVT *)&v1908, (const char *)v897);
        if (v898)
        {
          int v902 = v898;
          if (v803 == 3) {
            uint64_t v801 = 0;
          }
          do
          {
            uint64_t v903 = (uint64_t *)v8[4];
            uint64_t v904 = *v903;
            uint64_t v905 = v903[1];
            uint64_t v906 = sub_1CD7EBF14(a4, v795, (const llvm::APInt *)&v1898, (llvm *)5, 0, 0, 0);
            __int16 v909 = 0;
            uint64_t v910 = *(void *)(a4 + 832);
            if (v910) {
              __int16 v909 = *(_WORD *)(v910 + 8);
            }
            char v912 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1898, (llvm *)v896, v801, v904, v905, v908, (uint64_t)v906, v907, v909);
            if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            v913 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
            uint64_t *v913 = v912;
            v913[1] = v911;
            ++LODWORD(__src[1]);
            ++v795;
            --v902;
          }
          while (v902);
        }
        int64_t v899 = (unsigned __int8 *)v8[8];
        *(void *)&long long v1897 = v899;
        if (v899) {
          llvm::MetadataTracking::track((uint64_t)&v1897, v899, 2);
        }
        DWORD2(v1897) = *((_DWORD *)v8 + 15);
        uint64_t v900 = *(void *)(a4 + 832);
        if (v900) {
          uint64_t v901 = *(unsigned __int16 *)(v900 + 8);
        }
        else {
          uint64_t v901 = 0;
        }
        int v4 = sub_1CD7FF4E8((void *)a4, (const char *)0x92, (const llvm::APInt *)&v1897, (llvm *)v1908, *((uint64_t *)&v1908 + 1), (uint64_t *)__src[0], LODWORD(__src[1]), v901);
        if (!(void)v1897) {
          goto LABEL_563;
        }
        int v914 = *(unsigned __int8 *)v1897;
        if ((v914 - 4) > 0x1E)
        {
          if ((v914 - 3) >= 0xFFFFFFFE) {
            uint64_t v1411 = v1897;
          }
          else {
            uint64_t v1411 = 0;
          }
          if ((v914 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1412 = v1411 + 8;
LABEL_912:
            *(void *)&long long v1896 = &v1897;
            sub_1CC5FA668(v1412 + 16, &v1896);
            goto LABEL_563;
          }
          if (v914 == 3) {
            *(void *)(v1897 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v1897 + 1) & 0x7F) == 2 || *(_DWORD *)(v1897 + 12))
        {
          uint64_t v1800 = *(void *)(v1897 + 16);
          if ((v1800 & 4) != 0)
          {
            unint64_t v1412 = v1800 & 0xFFFFFFFFFFFFFFF8;
            if (v1412) {
              goto LABEL_912;
            }
          }
        }
LABEL_563:
        uint64_t v915 = v1898;
        if (!(void)v1898) {
          goto LABEL_961;
        }
        int v916 = *(unsigned __int8 *)v1898;
        if ((v916 - 4) <= 0x1E)
        {
          if ((*(unsigned char *)(v1898 + 1) & 0x7F) == 2 || *(_DWORD *)(v1898 + 12))
          {
            uint64_t v917 = *(void *)(v1898 + 16);
            if ((v917 & 4) != 0)
            {
              unint64_t v918 = v917 & 0xFFFFFFFFFFFFFFF8;
              if (v918) {
                goto LABEL_918;
              }
            }
          }
          goto LABEL_961;
        }
        if ((v916 - 3) >= 0xFFFFFFFE) {
          uint64_t v1413 = v1898;
        }
        else {
          uint64_t v1413 = 0;
        }
        if ((v916 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v918 = v1413 + 8;
LABEL_918:
          *(void *)&long long v1897 = &v1898;
          uint64_t v1414 = v918 + 16;
          int v1415 = &v1897;
          goto LABEL_958;
        }
        goto LABEL_959;
      case 0x99:
        long long v1908 = *(_OWORD *)*(void *)(a2 + 40);
        uint64_t v804 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1898 = v804;
        if (v804) {
          llvm::MetadataTracking::track((uint64_t)&v1898, v804, 2);
        }
        DWORD2(v1898) = *((_DWORD *)v8 + 15);
        __src[0] = &v1900;
        __src[1] = (void *)0x800000000;
        v805 = (uint64_t *)(*(void *)(*(void *)v8[4] + 40) + 16 * *(unsigned int *)(v8[4] + 8));
        uint64_t v807 = *v805;
        uint64_t v806 = v805[1];
        *(void *)&long long v1897 = v807;
        *((void *)&v1897 + 1) = v806;
        if ((_BYTE)v807)
        {
          unsigned __int8 v810 = sub_1CB8C2FBC((unsigned __int8 *)&v1897);
          unint64_t v812 = 0;
          uint64_t v811 = 0;
        }
        else
        {
          unint64_t v808 = llvm::EVT::getEVT(*(llvm::EVT **)(v806 + 24), 0, a3);
          unsigned __int8 v810 = v808;
          uint64_t v811 = (uint64_t)v809;
          unint64_t v812 = v808 & 0xFFFFFFFFFFFFFF00;
        }
        unsigned int v919 = sub_1CD3DB440((llvm::EVT *)&v1897, v809);
        unsigned int v921 = sub_1CD3DB440((llvm::EVT *)&v1908, v920);
        if (v921)
        {
          uint64_t v923 = 0;
          BOOL v924 = v810 == 3;
          if (v810 == 3) {
            uint64_t v925 = 4;
          }
          else {
            uint64_t v925 = v812 | v810;
          }
          if (v924) {
            uint64_t v811 = 0;
          }
          uint64_t v926 = 4 * v921;
          do
          {
            unsigned int v927 = *(_DWORD *)(v8[10] + v923);
            v928 = (uint64_t *)(v8[4] + 40 * (v927 >= v919));
            uint64_t v929 = *v928;
            uint64_t v930 = v928[1];
            uint64_t v931 = sub_1CD7EBF14(a4, v927 % v919, (const llvm::APInt *)&v1898, (llvm *)5, 0, 0, 0);
            __int16 v934 = 0;
            uint64_t v935 = *(void *)(a4 + 832);
            if (v935) {
              __int16 v934 = *(_WORD *)(v935 + 8);
            }
            int v937 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1898, (llvm *)v925, v811, v929, v930, v933, (uint64_t)v931, v932, v934);
            if (LODWORD(__src[1]) >= (unint64_t)HIDWORD(__src[1])) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            uint64_t v938 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
            *uint64_t v938 = v937;
            v938[1] = v936;
            unsigned int v922 = ++LODWORD(__src[1]);
            v923 += 4;
          }
          while (v926 != v923);
        }
        else
        {
          unsigned int v922 = __src[1];
        }
        uint64_t v939 = v922;
        uint64_t v940 = *(void *)(a4 + 832);
        if (v940) {
          uint64_t v941 = *(unsigned __int16 *)(v940 + 8);
        }
        else {
          uint64_t v941 = 0;
        }
        int v4 = sub_1CD7FF4E8((void *)a4, (const char *)0x92, (const llvm::APInt *)&v1898, (llvm *)v1908, *((uint64_t *)&v1908 + 1), (uint64_t *)__src[0], v939, v941);
        if (__src[0] != &v1900) {
          free(__src[0]);
        }
        goto LABEL_1044;
      case 0x9F:
        v830 = *(uint64_t **)(a2 + 32);
        uint64_t v831 = *v830;
        unint64_t v832 = v830[1];
        uint64_t v834 = v830[5];
        unint64_t v833 = v830[6];
        v835 = *(void **)(a2 + 64);
        __src[0] = v835;
        if (v835) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v835, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        uint64_t v836 = *(void *)(a4 + 832);
        if (v836) {
          __int16 v837 = *(_WORD *)(v836 + 8);
        }
        else {
          __int16 v837 = 0;
        }
        int v1061 = *(unsigned __int16 *)(v831 + 24);
        int v1882 = *(unsigned __int16 *)(v834 + 24);
        int v1062 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, v831, (void *)v832, v837);
        __int16 v1063 = 0;
        unint64_t v1065 = v832 & 0xFFFFFFFF00000000 | v1064;
        uint64_t v1066 = *(void *)(a4 + 832);
        if (v1066) {
          __int16 v1063 = *(_WORD *)(v1066 + 8);
        }
        unsigned int v1067 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, v834, (void *)v833, v1063);
        unint64_t v1069 = v833 & 0xFFFFFFFF00000000 | v1068;
        v1070 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1073 = 0;
        uint64_t v1074 = *(void *)(a4 + 832);
        if (v1074) {
          __int16 v1073 = *(_WORD *)(v1074 + 8);
        }
        uint64_t v1075 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1062, v1065, v1072, (uint64_t)v1070, v1071, v1073);
        int v1077 = v1076;
        uint64_t v1078 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1081 = 0;
        uint64_t v1082 = *(void *)(a4 + 832);
        if (v1082) {
          __int16 v1081 = *(_WORD *)(v1082 + 8);
        }
        uint64_t v1083 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1062, v1065, v1080, (uint64_t)v1078, v1079, v1081);
        unint64_t v1085 = v1084;
        v1086 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1089 = 0;
        uint64_t v1090 = *(void *)(a4 + 832);
        if (v1090) {
          __int16 v1089 = *(_WORD *)(v1090 + 8);
        }
        v1091 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1067, v1069, v1088, (uint64_t)v1086, v1087, v1089);
        v1093 = v1092;
        uint64_t v1094 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1097 = 0;
        uint64_t v1098 = *(void *)(a4 + 832);
        if (v1098) {
          __int16 v1097 = *(_WORD *)(v1098 + 8);
        }
        unsigned int v1099 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1067, v1069, v1096, (uint64_t)v1094, v1095, v1097);
        unint64_t v1101 = v1100;
        if (v1061 == 199)
        {
          uint64_t v1083 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)4, 0, 0, 0);
          unint64_t v1085 = v1085 & 0xFFFFFFFF00000000 | v1102;
        }
        if (v1882 == 199)
        {
          unsigned int v1099 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)4, 0, 0, 0);
          unint64_t v1101 = v1101 & 0xFFFFFFFF00000000 | v1103;
        }
        uint64_t v1104 = *(void *)(a4 + 832);
        if (v1104) {
          __int16 v1105 = *(_WORD *)(v1104 + 8);
        }
        else {
          __int16 v1105 = 0;
        }
        v1106 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v1075, v1077, v1105);
        uint64_t v1868 = v1107;
        __int16 v1108 = 0;
        uint64_t v1109 = *(void *)(a4 + 832);
        if (v1109) {
          __int16 v1108 = *(_WORD *)(v1109 + 8);
        }
        uint64_t v1110 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v1091, v1093, v1108);
        uint64_t v1112 = v1111;
        __int16 v1113 = 0;
        uint64_t v1114 = *(void *)(a4 + 832);
        if (v1114) {
          __int16 v1113 = *(_WORD *)(v1114 + 8);
        }
        uint64_t v1115 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v1083, (void *)v1085, v1113);
        uint64_t v1117 = v1116;
        __int16 v1118 = 0;
        uint64_t v1119 = *(void *)(a4 + 832);
        if (v1119) {
          __int16 v1118 = *(_WORD *)(v1119 + 8);
        }
        uint64_t v1855 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v1099, (void *)v1101, v1118);
        uint64_t v1122 = v1121;
        __int16 v1123 = 0;
        uint64_t v1124 = *(void *)(a4 + 832);
        if (v1124) {
          __int16 v1123 = *(_WORD *)(v1124 + 8);
        }
        uint64_t v1126 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1106, v1868, v1120, (uint64_t)v1110, v1112, v1123);
        __int16 v1127 = 0;
        uint64_t v1128 = *(void *)(a4 + 832);
        if (v1128) {
          __int16 v1127 = *(_WORD *)(v1128 + 8);
        }
        uint64_t v1846 = (uint64_t)v1106;
        uint64_t v1129 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, (uint64_t)v1126, v1125, v1127);
        uint64_t v1131 = v1130;
        uint64_t v1132 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1135 = 0;
        uint64_t v1136 = *(void *)(a4 + 832);
        if (v1136) {
          __int16 v1135 = *(_WORD *)(v1136 + 8);
        }
        uint64_t v1138 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1129, v1131, v1134, (uint64_t)v1132, v1133, v1135);
        v1140 = v1139;
        __int16 v1141 = 0;
        uint64_t v1142 = *(void *)(a4 + 832);
        if (v1142) {
          __int16 v1141 = *(_WORD *)(v1142 + 8);
        }
        uint64_t v1144 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1115, v1117, v1137, (uint64_t)v1110, v1112, v1141);
        uint64_t v1145 = v1143;
        __int16 v1146 = 0;
        uint64_t v1147 = *(void *)(a4 + 832);
        if (v1147) {
          __int16 v1146 = *(_WORD *)(v1147 + 8);
        }
        unint64_t v1148 = v1143 & 0xFFFFFFFF00000000;
        v1149 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v1138, v1140, v1146);
        __int16 v1152 = 0;
        uint64_t v1153 = *(void *)(a4 + 832);
        if (v1153) {
          __int16 v1152 = *(_WORD *)(v1153 + 8);
        }
        uint64_t v1154 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1144, v1145, v1151, (uint64_t)v1149, v1150, v1152);
        __int16 v1155 = 0;
        uint64_t v1157 = (void *)(v1156 | v1148);
        uint64_t v1158 = *(void *)(a4 + 832);
        if (v1158) {
          __int16 v1155 = *(_WORD *)(v1158 + 8);
        }
        int v1159 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, (uint64_t)v1154, v1157, v1155);
        unint64_t v1161 = v1131 & 0xFFFFFFFF00000000 | v1160;
        v1162 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1165 = 0;
        uint64_t v1166 = *(void *)(a4 + 832);
        if (v1166) {
          __int16 v1165 = *(_WORD *)(v1166 + 8);
        }
        v1167 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1159, v1161, v1164, (uint64_t)v1162, v1163, v1165);
        uint64_t v1170 = *(void *)(a4 + 832);
        if (v1882 == 199)
        {
          if (v1170) {
            __int16 v1171 = *(_WORD *)(v1170 + 8);
          }
          else {
            __int16 v1171 = 0;
          }
          uint64_t v1172 = (uint64_t)v1855;
          v1173 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v1167, v1168, v1171);
        }
        else
        {
          if (v1170) {
            LOWORD(v1170) = *(_WORD *)(v1170 + 8);
          }
          uint64_t v1808 = v1157;
          uint64_t v1172 = (uint64_t)v1855;
          v1173 = sub_1CD7F5D38((void *)a4, (const char *)0x1B0, (const llvm::APInt *)__src, (llvm *)5, 0, v1846, v1868, v1169, (uint64_t)v1855, v1122, (uint64_t)v1154, (int)v1808, SHIDWORD(v1808), v1170);
        }
        uint64_t v1317 = (uint64_t)v1173;
        unsigned int v1318 = v1174;
        uint64_t v1319 = *(void *)(a4 + 832);
        if (v1319) {
          LOWORD(v1319) = *(_WORD *)(v1319 + 8);
        }
        v1320 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1115, v1117, v1175, v1172, v1122, v1319);
        uint64_t v1323 = *(void *)(a4 + 832);
        if (v1323) {
          LOWORD(v1323) = *(_WORD *)(v1323 + 8);
        }
        v1060 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, v1317, v1318 | v1148, v1322, (uint64_t)v1320, v1321 | v1131 & 0xFFFFFFFF00000000, v1323);
        goto LABEL_851;
      case 0xA0:
        v822 = *(uint64_t **)(a2 + 32);
        uint64_t v824 = *v822;
        unint64_t v823 = v822[1];
        uint64_t v826 = v822[5];
        unint64_t v825 = v822[6];
        v827 = *(void **)(a2 + 64);
        __src[0] = v827;
        if (v827) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v827, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        uint64_t v828 = *(void *)(a4 + 832);
        if (v828) {
          __int16 v829 = *(_WORD *)(v828 + 8);
        }
        else {
          __int16 v829 = 0;
        }
        v942 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, v824, (void *)v823, v829);
        __int16 v943 = 0;
        v945 = (void *)(v823 & 0xFFFFFFFF00000000 | v944);
        uint64_t v946 = *(void *)(a4 + 832);
        if (v946) {
          __int16 v943 = *(_WORD *)(v946 + 8);
        }
        unint64_t v947 = v823 & 0xFFFFFFFF00000000;
        uint64_t v948 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, v826, (void *)v825, v943);
        __int16 v949 = 0;
        uint64_t v951 = (void *)(v825 & 0xFFFFFFFF00000000 | v950);
        uint64_t v952 = *(void *)(a4 + 832);
        if (v952) {
          __int16 v949 = *(_WORD *)(v952 + 8);
        }
        unint64_t v953 = v825 & 0xFFFFFFFF00000000;
        uint64_t v954 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, (uint64_t)v942, v945, v949);
        __int16 v955 = 0;
        uint64_t v957 = v956 | v947;
        uint64_t v958 = *(void *)(a4 + 832);
        if (v958) {
          __int16 v955 = *(_WORD *)(v958 + 8);
        }
        uint64_t v959 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, (uint64_t)v948, v951, v955);
        uint64_t v961 = v960 | v953;
        v962 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v965 = 0;
        uint64_t v966 = *(void *)(a4 + 832);
        if (v966) {
          __int16 v965 = *(_WORD *)(v966 + 8);
        }
        v967 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v954, v957, v964, (uint64_t)v962, v963, v965);
        v969 = v968;
        uint64_t v970 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v973 = 0;
        uint64_t v974 = *(void *)(a4 + 832);
        if (v974) {
          __int16 v973 = *(_WORD *)(v974 + 8);
        }
        v975 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v954, v957, v972, (uint64_t)v970, v971, v973);
        uint64_t v977 = v976;
        __int16 v978 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v981 = 0;
        uint64_t v982 = *(void *)(a4 + 832);
        if (v982) {
          __int16 v981 = *(_WORD *)(v982 + 8);
        }
        __int16 v983 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v959, v961, v980, (uint64_t)v978, v979, v981);
        uint64_t v985 = v984;
        v986 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v989 = 0;
        uint64_t v990 = *(void *)(a4 + 832);
        if (v990) {
          __int16 v989 = *(_WORD *)(v990 + 8);
        }
        uint64_t v991 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v959, v961, v988, (uint64_t)v986, v987, v989);
        v993 = v992;
        __int16 v994 = 0;
        uint64_t v995 = *(void *)(a4 + 832);
        if (v995) {
          __int16 v994 = *(_WORD *)(v995 + 8);
        }
        v996 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v967, v969, v994);
        uint64_t v1881 = v997;
        __int16 v998 = 0;
        uint64_t v999 = *(void *)(a4 + 832);
        if (v999) {
          __int16 v998 = *(_WORD *)(v999 + 8);
        }
        uint64_t v1000 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v983, v985, v998);
        uint64_t v1002 = v1001;
        __int16 v1003 = 0;
        uint64_t v1004 = *(void *)(a4 + 832);
        if (v1004) {
          __int16 v1003 = *(_WORD *)(v1004 + 8);
        }
        v1005 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC6, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v975, v977, v1003);
        uint64_t v1854 = v1006;
        uint64_t v1867 = (uint64_t)v1005;
        __int16 v1007 = 0;
        uint64_t v1008 = *(void *)(a4 + 832);
        if (v1008) {
          __int16 v1007 = *(_WORD *)(v1008 + 8);
        }
        uint64_t v1010 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC6, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v991, v993, v1007);
        uint64_t v1012 = v1011;
        __int16 v1013 = 0;
        uint64_t v1014 = *(void *)(a4 + 832);
        if (v1014) {
          __int16 v1013 = *(_WORD *)(v1014 + 8);
        }
        uint64_t v1016 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v996, v1881, v1009, (uint64_t)v1000, v1002, v1013);
        __int16 v1017 = 0;
        uint64_t v1018 = *(void *)(a4 + 832);
        if (v1018) {
          __int16 v1017 = *(_WORD *)(v1018 + 8);
        }
        uint64_t v1019 = (uint64_t)v996;
        v1020 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x26, 0, (uint64_t)v1016, v1015, v1017);
        uint64_t v1022 = v1021;
        uint64_t v1023 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1026 = 0;
        uint64_t v1027 = *(void *)(a4 + 832);
        if (v1027) {
          __int16 v1026 = *(_WORD *)(v1027 + 8);
        }
        uint64_t v1029 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)__src, (llvm *)4, 0, (uint64_t)v1020, v1022, v1025, (uint64_t)v1023, v1024, v1026);
        uint64_t v1031 = v1030;
        __int16 v1032 = 0;
        uint64_t v1033 = *(void *)(a4 + 832);
        if (v1033) {
          __int16 v1032 = *(_WORD *)(v1033 + 8);
        }
        int v1035 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, v1867, v1854, v1028, (uint64_t)v1000, v1002, v1032);
        uint64_t v1036 = v1034;
        __int16 v1037 = 0;
        uint64_t v1038 = *(void *)(a4 + 832);
        if (v1038) {
          __int16 v1037 = *(_WORD *)(v1038 + 8);
        }
        unint64_t v1039 = v1034 & 0xFFFFFFFF00000000;
        uint64_t v1040 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC7, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v1029, v1031, v1037);
        __int16 v1043 = 0;
        uint64_t v1044 = *(void *)(a4 + 832);
        if (v1044) {
          __int16 v1043 = *(_WORD *)(v1044 + 8);
        }
        uint64_t v1045 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1035, v1036, v1042, (uint64_t)v1040, v1041, v1043);
        __int16 v1048 = 0;
        uint64_t v1049 = *(void *)(a4 + 832);
        if (v1049) {
          __int16 v1048 = *(_WORD *)(v1049 + 8);
        }
        v1051 = sub_1CD7F5D38((void *)a4, (const char *)0x1B2, (const llvm::APInt *)__src, (llvm *)5, 0, v1019, v1881, v1047, (uint64_t)v1010, v1012, (uint64_t)v1045, v1046 | v1039, SHIDWORD(v1039), v1048);
        unsigned int v1053 = v1052;
        uint64_t v1054 = *(void *)(a4 + 832);
        if (v1054) {
          LOWORD(v1054) = *(_WORD *)(v1054 + 8);
        }
        uint64_t v1055 = sub_1CCFDED5C(a4, 58, (const llvm::APInt *)__src, (llvm *)5, 0, v1867, v1854, v1050, (uint64_t)v1010, v1012, v1054);
        unint64_t v1058 = v1022 & 0xFFFFFFFF00000000 | v1057;
        uint64_t v1059 = *(void *)(a4 + 832);
        if (v1059) {
          LOWORD(v1059) = *(_WORD *)(v1059 + 8);
        }
        v1060 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1051, v1053 | v1039, v1056, (uint64_t)v1055, v1058, v1059);
LABEL_851:
        int v4 = v1060;
        if (!__src[0]) {
          return v4;
        }
        int v1324 = *(unsigned __int8 *)__src[0];
        if ((v1324 - 4) > 0x1E)
        {
          if ((v1324 - 3) >= 0xFFFFFFFE) {
            uint64_t v1325 = __src[0];
          }
          else {
            uint64_t v1325 = 0;
          }
          if ((v1324 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1326 = (unint64_t)v1325 + 8;
LABEL_861:
            *(void *)&long long v1908 = __src;
            sub_1CC5FA668(v1326 + 16, &v1908);
            return v4;
          }
          if (v1324 == 3) {
            *((void *)__src[0] + 1) = 0;
          }
        }
        else if ((*((unsigned char *)__src[0] + 1) & 0x7F) == 2 || *((_DWORD *)__src[0] + 3))
        {
          uint64_t v1799 = *((void *)__src[0] + 2);
          if ((v1799 & 4) != 0)
          {
            unint64_t v1326 = v1799 & 0xFFFFFFFFFFFFFFF8;
            if (v1326) {
              goto LABEL_861;
            }
          }
        }
        return v4;
      case 0xAB:
      case 0xAC:
      case 0xAD:
        uint64_t v392 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1898 = v392;
        if (v392) {
          llvm::MetadataTracking::track((uint64_t)&v1898, v392, 2);
        }
        DWORD2(v1898) = *((_DWORD *)v8 + 15);
        uint64_t v393 = *(llvm::IntegerType **)(a4 + 56);
        *(_OWORD *)__src = *(_OWORD *)(v8[5] + 16 * a3);
        if (LOBYTE(__src[0])) {
          uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)__src);
        }
        else {
          uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
        }
        v720 = (llvm::LLVMContext *)ExtendedSizeInBits;
        if (v395 == 1) {
        if ((int)v720 <= 31)
        }
        {
          switch(v720)
          {
            case 1:
              uint64_t v721 = 0;
              char v722 = 0;
              uint64_t v723 = 2;
              goto LABEL_980;
            case 0x10:
              uint64_t v721 = 0;
              char v722 = 0;
              uint64_t v723 = 4;
              goto LABEL_980;
            case 8:
              uint64_t v721 = 0;
              char v722 = 0;
              uint64_t v723 = 3;
              goto LABEL_980;
          }
        }
        else
        {
          switch(v720)
          {
            case 0x20:
              uint64_t v721 = 0;
              char v722 = 0;
              uint64_t v723 = 5;
              goto LABEL_980;
            case 0x40:
              uint64_t v721 = 0;
              char v722 = 1;
              uint64_t v723 = 6;
              goto LABEL_980;
            case 0x80:
              uint64_t v721 = 0;
              char v722 = 0;
              uint64_t v723 = 7;
              goto LABEL_980;
          }
        }
        uint64_t v721 = llvm::IntegerType::get(v393, v720);
        char v722 = 0;
        uint64_t v723 = 0;
LABEL_980:
        v1445 = (uint64_t *)v8[4];
        uint64_t v1446 = *v1445;
        uint64_t v1447 = (void *)v1445[1];
        uint64_t v1448 = *(void *)(a4 + 832);
        if (v1448) {
          __int16 v1449 = *(_WORD *)(v1448 + 8);
        }
        else {
          __int16 v1449 = 0;
        }
        uint64_t v1450 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1898, (llvm *)v723, v721, v1446, v1447, v1449);
        uint64_t v1451 = v8[4];
        uint64_t v1452 = *(void *)(v1451 + 40);
        uint64_t v1453 = *(void **)(v1451 + 48);
        uint64_t v1454 = *(void *)(a4 + 832);
        uint64_t v1870 = (uint64_t)v1450;
        uint64_t v1885 = v1455;
        if (v1454) {
          __int16 v1456 = *(_WORD *)(v1454 + 8);
        }
        else {
          __int16 v1456 = 0;
        }
        uint64_t v1457 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1898, (llvm *)v723, v721, v1452, v1453, v1456);
        uint64_t v1459 = v1458;
        int v1460 = *((unsigned __int16 *)v8 + 12);
        v1461 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1898, (llvm *)5, 0, 0, 0);
        uint64_t v1848 = v1462;
        uint64_t v1857 = (uint64_t)v1461;
        uint64_t v1463 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1898, (llvm *)5, 0, 0, 0);
        if ((v722 & 1) == 0)
        {
          uint64_t v1470 = *(void *)(a4 + 832);
LABEL_1020:
          if (v1470) {
            LOWORD(v1470) = *(_WORD *)(v1470 + 8);
          }
          BOOL v1476 = sub_1CCFDED5C(a4, *((unsigned __int16 *)v8 + 12), (const llvm::APInt *)&v1898, (llvm *)v723, v721, v1870, v1885, v1465, (uint64_t)v1457, v1459, v1470);
          v1478 = v1477;
          v1479 = (uint64_t *)(v8[5] + 16 * a3);
          uint64_t v1480 = *v1479;
          uint64_t v1481 = v1479[1];
          uint64_t v1482 = *(void *)(a4 + 832);
          if (v1482) {
            __int16 v1483 = *(_WORD *)(v1482 + 8);
          }
          else {
            __int16 v1483 = 0;
          }
          uint64_t v1484 = (llvm::APFloatBase *)a4;
          goto LABEL_1043;
        }
        uint64_t v1836 = v1464;
        uint64_t v1841 = (uint64_t)v1463;
        if (*(unsigned char *)(*(void *)(a1 + 184296) + 281) && v1460 == 172)
        {
          for (uint64_t i = 0; i != 8; i += 4)
          {
            uint64_t v1467 = &__src[i];
            *((_DWORD *)v1467 + 2) = 1;
            *uint64_t v1467 = 0;
            *((_DWORD *)v1467 + 6) = 1;
            v1467[2] = 0;
          }
          sub_1CD7F121C(a4, *(void *)v8[4], *(void *)(v8[4] + 8), 0, (uint64_t)&v1908);
          if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
            MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
          }
          __src[0] = (void *)v1908;
          LODWORD(__src[1]) = DWORD2(v1908);
          DWORD2(v1908) = 0;
          if (v1901 >= 0x41 && v1900)
          {
            MEMORY[0x1D25D9CB0](v1900, 0x1000C8000313F17);
            uint64_t v1900 = v1909;
            LODWORD(v1901) = v1910;
            int v1910 = 0;
            if (DWORD2(v1908) >= 0x41 && (void)v1908) {
              MEMORY[0x1D25D9CB0](v1908, 0x1000C8000313F17);
            }
          }
          else
          {
            uint64_t v1900 = v1909;
            LODWORD(v1901) = v1910;
          }
          sub_1CD7F121C(a4, *(void *)(v8[4] + 40), *(void *)(v8[4] + 48), 0, (uint64_t)&v1908);
          if (v1903 >= 0x41 && v1902) {
            MEMORY[0x1D25D9CB0](v1902, 0x1000C8000313F17);
          }
          int v1902 = (void *)v1908;
          LODWORD(v1903) = DWORD2(v1908);
          DWORD2(v1908) = 0;
          unint64_t v1831 = v1457;
          if (v1905 >= 0x41 && v1904)
          {
            MEMORY[0x1D25D9CB0](v1904, 0x1000C8000313F17);
            uint64_t v1904 = v1909;
            LODWORD(v1905) = v1910;
            int v1910 = 0;
            if (DWORD2(v1908) >= 0x41 && (void)v1908) {
              MEMORY[0x1D25D9CB0](v1908, 0x1000C8000313F17);
            }
          }
          else
          {
            uint64_t v1904 = v1909;
            LODWORD(v1905) = v1910;
          }
          if (LODWORD(__src[1]) > 0x40) {
            operator new[]();
          }
          if (LODWORD(__src[1])) {
            unint64_t v1468 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
          }
          else {
            unint64_t v1468 = 0;
          }
          uint64_t v1469 = v1468 & ~(uint64_t)__src[0];
          if (v1903 > 0x40) {
            operator new[]();
          }
          if (v1903) {
            unint64_t v1471 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1903;
          }
          else {
            unint64_t v1471 = 0;
          }
          if ((v1471 & ~(unint64_t)v1902 & v1469) != 0) {
            int v1460 = 172;
          }
          else {
            int v1460 = 56;
          }
          for (uint64_t j = 0; j != -8; j -= 4)
          {
            int v1473 = &__src[j];
            if (*(_DWORD *)((char *)&v1905 + j * 8) >= 0x41u)
            {
              int v1474 = v1473[6];
              if (v1474) {
                MEMORY[0x1D25D9CB0](v1474, 0x1000C8000313F17);
              }
            }
            if (*((_DWORD *)v1473 + 10) >= 0x41u)
            {
              v1475 = v1473[4];
              if (v1475) {
                MEMORY[0x1D25D9CB0](v1475, 0x1000C8000313F17);
              }
            }
          }
          uint64_t v1457 = v1831;
        }
        uint64_t v1470 = *(void *)(a4 + 832);
        if (v1460 == 56) {
          goto LABEL_1020;
        }
        if (v1470) {
          LOWORD(v1470) = *(_WORD *)(v1470 + 8);
        }
        uint64_t v1485 = v1459;
        uint64_t v1487 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1898, (llvm *)5, 0, v1870, v1885, v1465, v1857, v1848, v1470);
        uint64_t v1489 = v1488;
        __int16 v1490 = 0;
        uint64_t v1491 = *(void *)(a4 + 832);
        if (v1491) {
          __int16 v1490 = *(_WORD *)(v1491 + 8);
        }
        __int16 v1886 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1898, (llvm *)5, 0, v1870, v1885, v1486, v1841, v1836, v1490);
        uint64_t v1494 = v1493;
        __int16 v1495 = 0;
        uint64_t v1496 = *(void *)(a4 + 832);
        if (v1496) {
          __int16 v1495 = *(_WORD *)(v1496 + 8);
        }
        uint64_t v1498 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1898, (llvm *)5, 0, (uint64_t)v1457, v1459, v1492, v1857, v1848, v1495);
        uint64_t v1500 = v1499;
        __int16 v1501 = 0;
        uint64_t v1502 = *(void *)(a4 + 832);
        if (v1502) {
          __int16 v1501 = *(_WORD *)(v1502 + 8);
        }
        BOOL v1504 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1898, (llvm *)5, 0, (uint64_t)v1457, v1485, v1497, v1841, v1836, v1501);
        uint64_t v1506 = v1505;
        __int16 v1507 = 0;
        uint64_t v1508 = v1489;
        uint64_t v1509 = v1487[5] + 16 * v1489;
        v1510 = *(llvm **)v1509;
        uint64_t v1511 = *(void *)(v1509 + 8);
        uint64_t v1512 = *(void *)(a4 + 832);
        if (v1512) {
          __int16 v1507 = *(_WORD *)(v1512 + 8);
        }
        uint64_t v1514 = sub_1CCFDED5C(a4, *((unsigned __int16 *)v8 + 12), (const llvm::APInt *)&v1898, v1510, v1511, (uint64_t)v1487, v1489, v1503, (uint64_t)v1498, v1500, v1507);
        uint64_t v1516 = v1515;
        uint64_t v1517 = v1487[5] + 16 * v1508;
        uint64_t v1518 = *(llvm **)v1517;
        uint64_t v1519 = *(void *)(v1517 + 8);
        uint64_t v1520 = *(void *)(a4 + 832);
        if (v1520) {
          LOWORD(v1520) = *(_WORD *)(v1520 + 8);
        }
        uint64_t v1521 = sub_1CCFDED5C(a4, *((unsigned __int16 *)v8 + 12), (const llvm::APInt *)&v1898, v1518, v1519, (uint64_t)v1886, v1494, v1513, (uint64_t)v1504, v1506, v1520);
        uint64_t v1524 = *(void *)(a4 + 832);
        if (v1524) {
          LOWORD(v1524) = *(_WORD *)(v1524 + 8);
        }
        BOOL v1476 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1898, (llvm *)0x31, 0, (uint64_t)v1514, v1516, v1523, (uint64_t)v1521, v1522, v1524);
        v1478 = v1525;
        __int16 v1483 = 0;
        uint64_t v1526 = *(void *)(a4 + 832);
        if (v1526) {
          __int16 v1483 = *(_WORD *)(v1526 + 8);
        }
        uint64_t v1484 = (llvm::APFloatBase *)a4;
        uint64_t v1480 = 6;
        uint64_t v1481 = 0;
LABEL_1043:
        int v4 = sub_1CD7F3564(v1484, (const char *)0xD8, (uint64_t)&v1898, (llvm *)v1480, v1481, (uint64_t)v1476, v1478, v1483);
        goto LABEL_1044;
      case 0xAF:
        return sub_1CB8D6CA8(a2, a3, (llvm::APFloatBase *)a4);
      case 0xB0:
      case 0xB1:
        return sub_1CB8D688C(a2, a3, (llvm::APFloatBase *)a4);
      case 0xB3:
        long long v1898 = *(_OWORD *)(*(void *)(a2 + 40) + 16 * a3);
        unsigned int v757 = sub_1CD3E12F4((unsigned __int8 *)&v1898, a2, a3);
        v758 = (uint64_t *)v8[4];
        uint64_t v760 = *v758;
        uint64_t v759 = v758[1];
        uint64_t v761 = v758[5];
        uint64_t v762 = v758[6];
        uint64_t v763 = *(void *)(v761 + 40) + 16 * v762;
        BOOL v764 = *(llvm **)v763;
        uint64_t v765 = *(void *)(v763 + 8);
        uint64_t v766 = (unsigned __int8 *)v8[8];
        *(void *)&long long v1897 = v766;
        if (v766) {
          llvm::MetadataTracking::track((uint64_t)&v1897, v766, 2);
        }
        DWORD2(v1897) = *((_DWORD *)v8 + 15);
        uint64_t v767 = sub_1CD7EBF14(a4, v757 - 1, (const llvm::APInt *)&v1897, v764, v765, 0, 0);
        uint64_t v770 = *(void *)(v761 + 40) + 16 * v762;
        int v771 = *(llvm **)v770;
        uint64_t v772 = *(void *)(v770 + 8);
        uint64_t v773 = *(void *)(a4 + 832);
        if (v773) {
          LOWORD(v773) = *(_WORD *)(v773 + 8);
        }
        uint64_t v774 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)&v1897, v771, v772, v761, v762, v769, (uint64_t)v767, v768, v773);
        uint64_t v1864 = v775;
        int v776 = *(unsigned __int16 *)(v760 + 24);
        BOOL v778 = v776 == 11 || v776 == 35;
        int v779 = *(unsigned __int16 *)(v761 + 24);
        BOOL v781 = v779 == 11 || v779 == 35;
        int v1880 = dword_1CD935FA0[2 * v778 + v781];
        __src[0] = &v1900;
        __src[1] = (void *)0x800000000;
        BOOL v783 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1897, (llvm *)5, 0, 1, 0);
        uint64_t v784 = v782;
        if (LODWORD(__src[1]) >= HIDWORD(__src[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v785 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
        *uint64_t v785 = v783;
        v785[1] = v782;
        unsigned int v786 = ++LODWORD(__src[1]);
        if (v776 == 35 || v776 == 11)
        {
          v788 = sub_1CD3D62F0(a4, v760, v759, 0);
          v789 = v787;
          if (LODWORD(__src[1]) >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v790 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
          *unint64_t v790 = v788;
          v790[1] = v787;
          unsigned int v791 = LODWORD(__src[1]) + 1;
          LODWORD(__src[1]) = v791;
          if (v791 >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v792 = (char *)__src[0] + 16 * v791;
          *(void *)int v792 = v788;
        }
        else
        {
          if (v786 >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          unint64_t v1210 = (uint64_t *)((char *)__src[0] + 16 * v786);
          *unint64_t v1210 = v760;
          v1210[1] = v759;
          unsigned int v1211 = LODWORD(__src[1]) + 1;
          LODWORD(__src[1]) = v1211;
          if (v1211 >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1212 = (uint64_t **)((char *)__src[0] + 16 * v1211);
          void *v1212 = v783;
          v1212[1] = v782;
          unsigned int v1213 = LODWORD(__src[1]) + 1;
          LODWORD(__src[1]) = v1213;
          if (v1213 >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v1214 = (uint64_t *)((char *)__src[0] + 16 * v1213);
          *uint64_t v1214 = v760;
          v1214[1] = v759;
          unsigned int v1215 = LODWORD(__src[1]) + 1;
          LODWORD(__src[1]) = v1215;
          if (v1215 >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          int v792 = (char *)__src[0] + 16 * v1215;
          *(void *)int v792 = v783;
          v789 = v782;
        }
        *((void *)v792 + 1) = v789;
        unsigned int v1216 = ++LODWORD(__src[1]);
        if (v779 == 35 || v779 == 11)
        {
          uint64_t v1217 = sub_1CD3D62F0(a4, (uint64_t)v774, v1864, 0);
          uint64_t v784 = v1218;
          if (LODWORD(__src[1]) >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1219 = (char *)__src[0] + 16 * LODWORD(__src[1]);
          *(void *)v1219 = v1217;
        }
        else
        {
          if (v1216 >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          uint64_t v1220 = (uint64_t **)((char *)__src[0] + 16 * v1216);
          *uint64_t v1220 = v774;
          v1220[1] = v1864;
          unsigned int v1221 = LODWORD(__src[1]) + 1;
          LODWORD(__src[1]) = v1221;
          if (v1221 >= HIDWORD(__src[1])) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          v1219 = (char *)__src[0] + 16 * v1221;
          *(void *)v1219 = v783;
        }
        *((void *)v1219 + 1) = v784;
        ++LODWORD(__src[1]);
        uint64_t v1223 = sub_1CD7EBF14(a4, v757, (const llvm::APInt *)&v1897, (llvm *)5, 0, 1, 0);
        if (LODWORD(__src[1]) >= HIDWORD(__src[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v1224 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
        void *v1224 = v1223;
        v1224[1] = v1222;
        ++LODWORD(__src[1]);
        long long v1908 = 0uLL;
        int v1226 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 1, 0);
        if (LODWORD(__src[1]) >= HIDWORD(__src[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        v1227 = (uint64_t **)((char *)__src[0] + 16 * LODWORD(__src[1]));
        void *v1227 = v1226;
        v1227[1] = v1225;
        ++LODWORD(__src[1]);
        if (!(void)v1908) {
          goto LABEL_774;
        }
        int v1228 = *(unsigned __int8 *)v1908;
        if ((v1228 - 4) > 0x1E)
        {
          if ((v1228 - 3) >= 0xFFFFFFFE) {
            uint64_t v1431 = v1908;
          }
          else {
            uint64_t v1431 = 0;
          }
          if ((v1228 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1432 = v1431 + 8;
LABEL_951:
            *(void *)&long long v1896 = &v1908;
            sub_1CC5FA668(v1432 + 16, &v1896);
            goto LABEL_774;
          }
          if (v1228 == 3) {
            *(void *)(v1908 + 8) = 0;
          }
        }
        else if ((*(unsigned char *)(v1908 + 1) & 0x7F) == 2 || *(_DWORD *)(v1908 + 12))
        {
          uint64_t v1801 = *(void *)(v1908 + 16);
          if ((v1801 & 4) != 0)
          {
            unint64_t v1432 = v1801 & 0xFFFFFFFFFFFFFFF8;
            if (v1432) {
              goto LABEL_951;
            }
          }
        }
LABEL_774:
        uint64_t v1230 = sub_1CD7EEB94(a4, 0, (llvm *)5, 0);
        if (LODWORD(__src[1]) >= HIDWORD(__src[1])) {
          llvm::SmallVectorBase<unsigned int>::grow_pod();
        }
        uint64_t v1231 = (uint64_t *)((char *)__src[0] + 16 * LODWORD(__src[1]));
        *uint64_t v1231 = v1230;
        v1231[1] = v1229;
        ++LODWORD(__src[1]);
        int v4 = sub_1CD801450(a4, v1880, (uint64_t)&v1897, (llvm *)v1898, *((uint64_t *)&v1898 + 1), (uint64_t *)__src[0], LODWORD(__src[1]));
        if (__src[0] != &v1900) {
          free(__src[0]);
        }
        uint64_t v1190 = v1897;
        if (!(void)v1897) {
          return v4;
        }
        int v1191 = *(unsigned __int8 *)v1897;
        if ((v1191 - 4) > 0x1E)
        {
          if ((v1191 - 3) >= 0xFFFFFFFE) {
            uint64_t v1409 = v1897;
          }
          else {
            uint64_t v1409 = 0;
          }
          if ((v1191 - 3) < 0xFFFFFFFE)
          {
LABEL_941:
            if (v1191 == 3) {
              *(void *)(v1190 + 8) = 0;
            }
            return v4;
          }
          unint64_t v1193 = v1409 + 8;
        }
        else
        {
          if ((*(unsigned char *)(v1897 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1897 + 12)) {
            return v4;
          }
          uint64_t v1232 = *(void *)(v1897 + 16);
          if ((v1232 & 4) == 0) {
            return v4;
          }
          unint64_t v1193 = v1232 & 0xFFFFFFFFFFFFFFF8;
          if (!v1193) {
            return v4;
          }
        }
        uint64_t v1410 = &v1897;
LABEL_940:
        __src[0] = v1410;
        sub_1CC5FA668(v1193 + 16, __src);
        return v4;
      case 0xB8:
      case 0xBD:
        int v4 = (uint64_t *)a2;
        if (*(unsigned char *)(*(void *)(**(void **)(a2 + 32) + 40) + 16
                                                                   * *(unsigned int *)(*(void *)(a2 + 32) + 8)) != 6)
          return v4;
        uint64_t v36 = *(void **)(a2 + 64);
        __src[0] = v36;
        if (v36) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v36, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        uint64_t v37 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        int v1860 = v38;
        uint64_t v1874 = (uint64_t)v37;
        __int16 v39 = 0;
        char v40 = (uint64_t *)v8[4];
        uint64_t v41 = *v40;
        uint64_t v42 = (void *)v40[1];
        uint64_t v43 = *(void *)(a4 + 832);
        if (v43) {
          __int16 v39 = *(_WORD *)(v43 + 8);
        }
        __int16 v44 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)0x31, 0, v41, v42, v39);
        uint64_t v46 = v45;
        __int16 v47 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v50 = 0;
        uint64_t v51 = *(void *)(a4 + 832);
        if (v51) {
          __int16 v50 = *(_WORD *)(v51 + 8);
        }
        uint64_t v52 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v44, v46, v49, (uint64_t)v47, v48, v50);
        uint64_t v54 = v53;
        uint64_t v56 = sub_1CD7EBF14(a4, 1850, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v58 = 0;
        uint64_t v59 = *(void *)(a4 + 832);
        if (v59) {
          __int16 v58 = *(_WORD *)(v59 + 8);
        }
        unint64_t v60 = sub_1CCFDED5C(a4, 46, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v56, v55, v57, (uint64_t)v52, v54, v58);
        uint64_t v62 = v61;
        uint64_t v64 = sub_1CD7EBF14(a4, 31, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v66 = 0;
        uint64_t v67 = *(void *)(a4 + 832);
        if (v67) {
          __int16 v66 = *(_WORD *)(v67 + 8);
        }
        __int16 v68 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v64, v63, v65, (uint64_t)v60, v62, v66);
        int v70 = v69;
        uint64_t v71 = sub_1CD7EBF14(a4, 1850, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        uint64_t v73 = v72;
        unsigned int v74 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v77 = 0;
        uint64_t v78 = *(void *)(a4 + 832);
        if (v78) {
          __int16 v77 = *(_WORD *)(v78 + 8);
        }
        uint64_t v79 = sub_1CCFDED5C(a4, 148, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v44, v46, v76, (uint64_t)v74, v75, v77);
        __int16 v82 = 0;
        uint64_t v83 = *(void *)(a4 + 832);
        if (v83) {
          __int16 v82 = *(_WORD *)(v83 + 8);
        }
        unsigned int v84 = sub_1CCFDED5C(a4, 46, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v71, v73, v81, (uint64_t)v79, v80, v82);
        uint64_t v86 = v85;
        unsigned int v88 = sub_1CD7EBF14(a4, 31, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v90 = 0;
        uint64_t v91 = *(void *)(a4 + 832);
        if (v91) {
          __int16 v90 = *(_WORD *)(v91 + 8);
        }
        uint64_t v92 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v88, v87, v89, (uint64_t)v84, v86, v90);
        unint64_t v94 = v86 & 0xFFFFFFFF00000000 | v93;
        uint64_t v95 = sub_1CD7EBF14(a4, 32, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v98 = 0;
        uint64_t v99 = *(void *)(a4 + 832);
        if (v99) {
          __int16 v98 = *(_WORD *)(v99 + 8);
        }
        long long v100 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v92, v94, v97, (uint64_t)v95, v96, v98);
        int v102 = v101;
        uint64_t v103 = v100[5] + 16 * v101;
        __int16 v104 = *(llvm **)v103;
        uint64_t v105 = *(void *)(v103 + 8);
        uint64_t v106 = sub_1CD7EE368((void *)a4, 0x11u);
        uint64_t v109 = sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)__src, v104, v105, (uint64_t)v52, v54, v108, v1874, v1860, (uint64_t)v100, v102, (uint64_t)v68, v70, v106, v107);
        uint64_t v111 = v110;
        __int16 v112 = 0;
        uint64_t v113 = *(void *)(a4 + 832);
        if (v113) {
          __int16 v112 = *(_WORD *)(v113 + 8);
        }
        int v114 = (llvm::APFloatBase *)a4;
        uint64_t v115 = 199;
        uint64_t v116 = 6;
        goto LABEL_61;
      case 0xC0:
        uint64_t v241 = *(void *)(a2 + 32);
        uint64_t v242 = *(unsigned int *)(v241 + 8);
        uint64_t v243 = *(void *)(*(void *)v241 + 40);
        unsigned int v244 = (unsigned __int8 *)(v243 + 16 * v242);
        if (*v244)
        {
          if (*v244 - 15 < 0x9C) {
            return sub_1CD8032A8(a4, a2, 0);
          }
        }
        else if ((*(_DWORD *)(*((void *)v244 + 1) + 8) & 0xFE) == 0x12)
        {
          return sub_1CD8032A8(a4, a2, 0);
        }
        uint64_t v368 = *(void *)(a1 + 184296);
        if (*(unsigned char *)(v368 + 280)) {
          return v8;
        }
        if (!*(unsigned char *)(v368 + 281)) {
          return 0;
        }
        int v369 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1908 = v369;
        if (v369)
        {
          llvm::MetadataTracking::track((uint64_t)&v1908, v369, 2);
          uint64_t v241 = v8[4];
          uint64_t v242 = *(unsigned int *)(v241 + 8);
          uint64_t v243 = *(void *)(*(void *)v241 + 40);
        }
        int v370 = *((_DWORD *)v8 + 15);
        DWORD2(v1908) = v370;
        uint64_t v371 = v8[5] + 16 * a3;
        uint64_t v372 = *(llvm **)v371;
        uint64_t v373 = *(void *)(v371 + 8);
        *(void *)&long long v1898 = *(void *)v371;
        *((void *)&v1898 + 1) = v373;
        int v4 = v8;
        if (*(unsigned char *)(v243 + 16 * v242) != 6) {
          goto LABEL_206;
        }
        long long v1434 = *(_OWORD *)v241;
        long long v1896 = *(_OWORD *)(v241 + 40);
        long long v1897 = v1434;
        unsigned int v1435 = *(_DWORD *)(*(void *)(v241 + 160) + 76);
        unsigned int v1895 = v1435;
        v1893 = (unsigned __int8 *)v1908;
        if ((void)v1908)
        {
          llvm::MetadataTracking::track((uint64_t)&v1893, (unsigned __int8 *)v1908, 2);
          int v370 = DWORD2(v1908);
        }
        int v1894 = v370;
        sub_1CD3E07C8((unsigned int *)a1, (uint64_t)&v1897, (uint64_t)&v1896, &v1895, (const llvm::APInt *)&v1893, a4);
        if (!v1893) {
          goto LABEL_968;
        }
        int v1436 = *v1893;
        if ((v1436 - 4) > 0x1E)
        {
          if ((v1436 - 3) >= 0xFFFFFFFE) {
            uint64_t v1787 = v1893;
          }
          else {
            uint64_t v1787 = 0;
          }
          if ((v1436 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1788 = (unint64_t)(v1787 + 8);
LABEL_1231:
            __src[0] = &v1893;
            sub_1CC5FA668(v1788 + 16, __src);
            goto LABEL_968;
          }
          if (v1436 == 3) {
            *((void *)v1893 + 1) = 0;
          }
        }
        else if ((v1893[1] & 0x7F) == 2 || *((_DWORD *)v1893 + 3))
        {
          uint64_t v1804 = *((void *)v1893 + 2);
          if ((v1804 & 4) != 0)
          {
            unint64_t v1788 = v1804 & 0xFFFFFFFFFFFFFFF8;
            if (v1788) {
              goto LABEL_1231;
            }
          }
        }
LABEL_968:
        if (!(void)v1896)
        {
          uint64_t v1437 = *(void *)(v1897 + 40) + 16 * DWORD2(v1897);
          *(void *)&long long v1896 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, *(llvm **)v1437, *(void *)(v1437 + 8), 0, 0);
          DWORD2(v1896) = v1438;
          unsigned int v1435 = 22;
        }
        __src[0] = (void *)v1897;
        LODWORD(__src[1]) = DWORD2(v1897);
        uint64_t v1900 = (void *)v1896;
        LODWORD(v1901) = DWORD2(v1896);
        uint64_t v1439 = v8[4];
        LODWORD(v1903) = *(_DWORD *)(v1439 + 88);
        int v1902 = *(void **)(v1439 + 80);
        LODWORD(v1905) = *(_DWORD *)(v1439 + 128);
        uint64_t v1904 = *(uint64_t **)(v1439 + 120);
        uint64_t v1906 = sub_1CD7EE368((void *)a4, v1435);
        uint64_t v1907 = v1440;
        uint64_t v1441 = *(void *)(a4 + 832);
        if (v1441) {
          uint64_t v1442 = *(unsigned __int16 *)(v1441 + 8);
        }
        else {
          uint64_t v1442 = 0;
        }
        int v4 = sub_1CD7FF4E8((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1908, v372, v373, (uint64_t *)__src, 5, v1442);
LABEL_206:
        if ((_BYTE)v372) {
          uint64_t v374 = sub_1CB87E200((unsigned __int8 *)&v1898);
        }
        else {
          uint64_t v374 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1898);
        }
        uint64_t v852 = v374;
        if (v375 == 1) {
        if (v852 != 64)
        }
          goto LABEL_794;
        uint64_t v853 = (void *)v4[4];
        uint64_t v855 = (uint64_t *)v853[10];
        unint64_t v854 = v853[11];
        uint64_t v857 = (uint64_t *)v853[15];
        unint64_t v856 = v853[16];
        if (v1898 != 49)
        {
          uint64_t v858 = *(void *)(a4 + 832);
          if (v858) {
            __int16 v859 = *(_WORD *)(v858 + 8);
          }
          else {
            __int16 v859 = 0;
          }
          uint64_t v855 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x31, 0, (uint64_t)v855, (void *)v854, v859);
          __int16 v1738 = 0;
          unint64_t v854 = v854 & 0xFFFFFFFF00000000 | v1739;
          uint64_t v1740 = *(void *)(a4 + 832);
          if (v1740) {
            __int16 v1738 = *(_WORD *)(v1740 + 8);
          }
          uint64_t v857 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)0x31, 0, (uint64_t)v857, (void *)v856, v1738);
          unint64_t v856 = v856 & 0xFFFFFFFF00000000 | v1741;
        }
        uint64_t v1742 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
        __int16 v1745 = 0;
        uint64_t v1746 = *(void *)(a4 + 832);
        if (v1746) {
          __int16 v1745 = *(_WORD *)(v1746 + 8);
        }
        unint64_t v1747 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v855, v854, v1744, (uint64_t)v1742, v1743, v1745);
        int v1873 = v1748;
        uint64_t v1888 = (uint64_t)v1747;
        v1749 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
        __int16 v1752 = 0;
        uint64_t v1753 = *(void *)(a4 + 832);
        if (v1753) {
          __int16 v1752 = *(_WORD *)(v1753 + 8);
        }
        uint64_t v1754 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v855, v854, v1751, (uint64_t)v1749, v1750, v1752);
        int v1756 = v1755;
        uint64_t v1757 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
        __int16 v1760 = 0;
        uint64_t v1761 = *(void *)(a4 + 832);
        if (v1761) {
          __int16 v1760 = *(_WORD *)(v1761 + 8);
        }
        uint64_t v1762 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v857, v856, v1759, (uint64_t)v1757, v1758, v1760);
        int v1764 = v1763;
        v1765 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)&v1908, (llvm *)5, 0, 0, 0);
        __int16 v1768 = 0;
        uint64_t v1769 = *(void *)(a4 + 832);
        if (v1769) {
          __int16 v1768 = *(_WORD *)(v1769 + 8);
        }
        int v1770 = sub_1CCFDED5C(a4, 437, (const llvm::APInt *)&v1908, (llvm *)5, 0, (uint64_t)v857, v856, v1767, (uint64_t)v1765, v1766, v1768);
        int v1772 = v1771;
        uint64_t v1773 = (uint64_t *)v4[4];
        v1775 = sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1908, (llvm *)5, 0, *v1773, v1773[1], v1774, v1773[5], v1773[6], v1888, v1873, (uint64_t)v1762, v1764, v1773[20], v1773[21]);
        uint64_t v1777 = v1776;
        uint64_t v1778 = (uint64_t *)v4[4];
        v1780 = sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)&v1908, (llvm *)5, 0, *v1778, v1778[1], v1779, v1778[5], v1778[6], (uint64_t)v1754, v1756, (uint64_t)v1770, v1772, v1778[20], v1778[21]);
        uint64_t v1783 = *(void *)(a4 + 832);
        if (v1783) {
          LOWORD(v1783) = *(_WORD *)(v1783 + 8);
        }
        int v4 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)&v1908, (llvm *)0x31, 0, (uint64_t)v1775, v1777, v1782, (uint64_t)v1780, v1781, v1783);
        if (v1898 == 49) {
          goto LABEL_794;
        }
        uint64_t v1785 = *(void *)(a4 + 832);
        if (v1785) {
          __int16 v1786 = *(_WORD *)(v1785 + 8);
        }
        else {
          __int16 v1786 = 0;
        }
        v1237 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)&v1908, (llvm *)v1898, *((uint64_t *)&v1898 + 1), (uint64_t)v4, v1784, v1786);
        goto LABEL_793;
      case 0xC1:
        if (!*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
          return 0;
        }
        uint64_t v143 = *(unsigned __int8 **)(a2 + 64);
        __src[0] = v143;
        if (v143)
        {
          llvm::MetadataTracking::track((uint64_t)__src, v143, 2);
          uint64_t v143 = (unsigned __int8 *)__src[0];
        }
        int v144 = *((_DWORD *)v8 + 15);
        LODWORD(__src[1]) = v144;
        uint64_t v145 = v8[4];
        long long v1908 = *(_OWORD *)v145;
        long long v1898 = *(_OWORD *)(v145 + 40);
        uint64_t v146 = *(unsigned __int8 *)(*(void *)(v1908 + 40) + 16 * DWORD2(v1908));
        if (v146 != 6)
        {
          if (!v143) {
            goto LABEL_94;
          }
          goto LABEL_91;
        }
        unsigned int v864 = *(_DWORD *)(*(void *)(v145 + 80) + 76);
        LODWORD(v1896) = v864;
        v1891 = v143;
        if (v143)
        {
          llvm::MetadataTracking::track((uint64_t)&v1891, v143, 2);
          int v144 = (int)__src[1];
        }
        int v1892 = v144;
        sub_1CD3E07C8((unsigned int *)a1, (uint64_t)&v1908, (uint64_t)&v1898, (unsigned int *)&v1896, (const llvm::APInt *)&v1891, a4);
        if (!v1891) {
          goto LABEL_495;
        }
        int v865 = *v1891;
        if ((v865 - 4) > 0x1E)
        {
          if ((v865 - 3) >= 0xFFFFFFFE) {
            uint64_t v1443 = v1891;
          }
          else {
            uint64_t v1443 = 0;
          }
          if ((v865 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v1444 = (unint64_t)(v1443 + 8);
LABEL_977:
            *(void *)&long long v1897 = &v1891;
            sub_1CC5FA668(v1444 + 16, &v1897);
            goto LABEL_495;
          }
          if (v865 == 3) {
            *((void *)v1891 + 1) = 0;
          }
        }
        else if ((v1891[1] & 0x7F) == 2 || *((_DWORD *)v1891 + 3))
        {
          uint64_t v1802 = *((void *)v1891 + 2);
          if ((v1802 & 4) != 0)
          {
            unint64_t v1444 = v1802 & 0xFFFFFFFFFFFFFFF8;
            if (v1444) {
              goto LABEL_977;
            }
          }
        }
LABEL_495:
        uint64_t v866 = v1898;
        if ((void)v1898)
        {
          uint64_t v1713 = v8[5] + 16 * a3;
          v1714 = *(llvm **)v1713;
          uint64_t v1715 = *(void *)(v1713 + 8);
          long long v1716 = v1908;
          uint64_t v1717 = *((void *)&v1898 + 1);
          uint64_t v1718 = sub_1CD7EE368((void *)a4, v864);
          uint64_t v1721 = *(void *)(a4 + 832);
          if (v1721) {
            LOWORD(v1721) = *(_WORD *)(v1721 + 8);
          }
          int v4 = sub_1CD7F5D38((void *)a4, (const char *)0xC1, (const llvm::APInt *)__src, v1714, v1715, v1716, *((uint64_t *)&v1716 + 1), v1720, v866, v1717, v1718, v1719, SHIDWORD(v1719), v1721);
        }
        else
        {
          int v4 = (uint64_t *)v1908;
        }
        uint64_t v143 = (unsigned __int8 *)__src[0];
        if (!__src[0]) {
          goto LABEL_94;
        }
LABEL_91:
        int v147 = *v143;
        if ((v147 - 4) > 0x1E)
        {
          if ((v147 - 3) >= 0xFFFFFFFE) {
            uint64_t v408 = v143;
          }
          else {
            uint64_t v408 = 0;
          }
          if ((v147 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v409 = (unint64_t)(v408 + 8);
LABEL_258:
            *(void *)&long long v1908 = __src;
            sub_1CC5FA668(v409 + 16, &v1908);
            goto LABEL_94;
          }
          if (v147 == 3) {
            *((void *)v143 + 1) = 0;
          }
        }
        else if ((v143[1] & 0x7F) == 2 || *((_DWORD *)v143 + 3))
        {
          uint64_t v1796 = *((void *)v143 + 2);
          if ((v1796 & 4) != 0)
          {
            unint64_t v409 = v1796 & 0xFFFFFFFFFFFFFFF8;
            if (v409) {
              goto LABEL_258;
            }
          }
        }
LABEL_94:
        if (v146 == 6) {
          return v4;
        }
        return 0;
      case 0xC3:
        return sub_1CB8E48EC(a2, a3, (llvm::APFloatBase *)a4);
      case 0xC4:
      case 0xC5:
        return sub_1CB8E41A0(a2, a3, (llvm::APFloatBase *)a4);
      case 0xC9:
        return 0;
      case 0xCA:
        int v4 = (uint64_t *)a2;
        if (*(unsigned char *)(*(void *)(**(void **)(a2 + 32) + 40) + 16
                                                                   * *(unsigned int *)(*(void *)(a2 + 32) + 8)) != 6)
          return v4;
        int v361 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
        if ((v361 - 11) < 0xFFFFFFFE) {
          return 0;
        }
        uint64_t v362 = *(void **)(a2 + 64);
        __src[0] = v362;
        if (v362) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v362, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        if (v361 == 9) {
          goto LABEL_198;
        }
        uint64_t v1365 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        int v1367 = v1366;
        __int16 v1368 = (uint64_t *)v8[4];
        uint64_t v1369 = *v1368;
        uint64_t v1370 = v1368[1];
        unsigned int v1371 = sub_1CD7EBF14(a4, 63, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1374 = 0;
        uint64_t v1375 = *(void *)(a4 + 832);
        if (v1375) {
          __int16 v1374 = *(_WORD *)(v1375 + 8);
        }
        uint64_t v1376 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)__src, (llvm *)6, 0, v1369, v1370, v1373, (uint64_t)v1371, v1372, v1374);
        uint64_t v1379 = (uint64_t)v1376;
        uint64_t v1380 = (void *)v1377;
        __int16 v1381 = 0;
        uint64_t v1382 = (uint64_t *)v8[4];
        uint64_t v1383 = *v1382;
        uint64_t v1384 = v1382[1];
        uint64_t v1385 = *(void *)(a4 + 832);
        if (v1385) {
          __int16 v1381 = *(_WORD *)(v1385 + 8);
        }
        v1387 = sub_1CCFDED5C(a4, 173, (const llvm::APInt *)__src, (llvm *)6, 0, v1383, v1384, v1378, (uint64_t)v1376, v1377, v1381);
        uint64_t v1389 = v1386;
        __int16 v1390 = 0;
        uint64_t v1391 = *(void *)(a4 + 832);
        if (v1391) {
          __int16 v1390 = *(_WORD *)(v1391 + 8);
        }
        unsigned __int8 v1392 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v1387, v1386, v1388, v1379, (uint64_t)v1380, v1390);
        __int16 v1393 = 0;
        uint64_t v1395 = (void *)(v1389 & 0xFFFFFFFF00000000 | v1394);
        uint64_t v1396 = *(void *)(a4 + 832);
        if (v1396) {
          __int16 v1393 = *(_WORD *)(v1396 + 8);
        }
        uint64_t v1398 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xCB, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v1392, v1395, v1393);
        unsigned int v1399 = v1397;
        __int16 v1400 = 0;
        uint64_t v1401 = *(void *)(a4 + 832);
        if (v1401) {
          __int16 v1400 = *(_WORD *)(v1401 + 8);
        }
        v1402 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDE, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v1398, v1397, v1400);
        uint64_t v1404 = v1403;
        __int16 v1405 = 0;
        uint64_t v1406 = *(void *)(a4 + 832);
        if (v1406) {
          __int16 v1405 = *(_WORD *)(v1406 + 8);
        }
        v1407 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC9, (uint64_t)__src, (llvm *)5, 0, v1379, v1380, v1405);
        uint64_t v117 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)__src, (uint64_t)v1407, v1408, (uint64_t)v1365, v1367, (uint64_t)v1398, v1399, (uint64_t)v1402, v1404, SHIDWORD(v1404), 0x11u);
        goto LABEL_1168;
      case 0xCB:
        int v4 = (uint64_t *)a2;
        if (*(unsigned char *)(*(void *)(**(void **)(a2 + 32) + 40) + 16
                                                                   * *(unsigned int *)(*(void *)(a2 + 32) + 8)) != 6)
          return v4;
        int v249 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
        if ((v249 - 11) < 0xFFFFFFFE) {
          return 0;
        }
        uint64_t v250 = *(void **)(a2 + 64);
        __src[0] = v250;
        if (v250) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v250, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        if (v249 == 9)
        {
LABEL_198:
          uint64_t v363 = (uint64_t *)v8[4];
          uint64_t v364 = *v363;
          v365 = (void *)v363[1];
          uint64_t v366 = *(void *)(a4 + 832);
          if (v366) {
            __int16 v367 = *(_WORD *)(v366 + 8);
          }
          else {
            __int16 v367 = 0;
          }
          uint64_t v1357 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)*((unsigned __int16 *)v8 + 12), (uint64_t)__src, (llvm *)0xA, 0, v364, v365, v367);
          goto LABEL_885;
        }
        uint64_t v251 = (uint64_t *)v8[4];
        uint64_t v252 = *v251;
        uint64_t v253 = (void *)v251[1];
        uint64_t v1850 = (llvm *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)a1 + 400))(a1, *(void *)(**(void **)(a4 + 40) + 40) + 272, *(void *)(a4 + 56), 10, 0);
        uint64_t v255 = v254;
        uint64_t v256 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        uint64_t v1861 = v257;
        uint64_t v1876 = (uint64_t)v256;
        uint64_t v258 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        uint64_t v260 = v259;
        __int16 v261 = 0;
        uint64_t v262 = *(void *)(a4 + 832);
        if (v262) {
          __int16 v261 = *(_WORD *)(v262 + 8);
        }
        uint64_t v264 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xBD, (uint64_t)__src, (llvm *)6, 0, v252, v253, v261);
        unint64_t v265 = (unint64_t)v263;
        __int16 v266 = 0;
        uint64_t v267 = *(void *)(a4 + 832);
        if (v267) {
          __int16 v266 = *(_WORD *)(v267 + 8);
        }
        uint64_t v268 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC9, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v264, v263, v266);
        unint64_t v270 = v265 & 0xFFFFFFFF00000000 | v269;
        uint64_t v271 = sub_1CD7EBF14(a4, 190, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        uint64_t v273 = v272;
        int v275 = sub_1CD3DC614((void *)a4, (const llvm::APInt *)__src, v1850, v255, v252, (uint64_t)v253, (uint64_t)v258, v260, 0x16u, 0, 0, 0, 0);
        uint64_t v277 = v276;
        __int16 v278 = 0;
        uint64_t v279 = *(void *)(a4 + 832);
        if (v279) {
          __int16 v278 = *(_WORD *)(v279 + 8);
        }
        uint64_t v280 = sub_1CCFDED5C(a4, 57, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v271, v273, v274, (uint64_t)v268, v270, v278);
        uint64_t v283 = sub_1CD3E1260((void *)a4, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v275, v277, (uint64_t)v280, v281, v1876, v1861, SHIDWORD(v1861));
        uint64_t v285 = v284;
        __int16 v286 = 0;
        uint64_t v287 = *(void *)(a4 + 832);
        if (v287) {
          __int16 v286 = *(_WORD *)(v287 + 8);
        }
        uint64_t v288 = sub_1CCFDED5C(a4, 175, (const llvm::APInt *)__src, (llvm *)6, 0, v252, (uint64_t)v253, v282, (uint64_t)v268, v270, v286);
        uint64_t v290 = v289;
        int v291 = sub_1CD7EBF14(a4, 0x7FFFFFFFFFFFFFFFLL, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        __int16 v294 = 0;
        uint64_t v295 = *(void *)(a4 + 832);
        if (v295) {
          __int16 v294 = *(_WORD *)(v295 + 8);
        }
        int v296 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v288, v290, v293, (uint64_t)v291, v292, v294);
        uint64_t v298 = v297;
        v299 = sub_1CD7EBF14(a4, 0xFFFFFFFFFFLL, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        __int16 v302 = 0;
        uint64_t v303 = *(void *)(a4 + 832);
        if (v303) {
          __int16 v302 = *(_WORD *)(v303 + 8);
        }
        uint64_t v304 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v296, v298, v301, (uint64_t)v299, v300, v302);
        uint64_t v1837 = v305;
        uint64_t v1843 = (uint64_t)v304;
        uint64_t v306 = sub_1CD7EBF14(a4, 40, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        __int16 v309 = 0;
        uint64_t v310 = *(void *)(a4 + 832);
        if (v310) {
          __int16 v309 = *(_WORD *)(v310 + 8);
        }
        uint64_t v311 = sub_1CCFDED5C(a4, 177, (const llvm::APInt *)__src, (llvm *)6, 0, (uint64_t)v296, v298, v308, (uint64_t)v306, v307, v309);
        uint64_t v313 = v312;
        int v314 = sub_1CD7EBF14(a4, 23, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v317 = 0;
        uint64_t v318 = *(void *)(a4 + 832);
        if (v318) {
          __int16 v317 = *(_WORD *)(v318 + 8);
        }
        uint64_t v319 = sub_1CCFDED5C(a4, 175, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v283, v285, v316, (uint64_t)v314, v315, v317);
        uint64_t v321 = v320;
        __int16 v322 = 0;
        uint64_t v323 = *(void *)(a4 + 832);
        if (v323) {
          __int16 v322 = *(_WORD *)(v323 + 8);
        }
        uint64_t v324 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC9, (uint64_t)__src, (llvm *)5, 0, (uint64_t)v311, v313, v322);
        __int16 v327 = 0;
        uint64_t v328 = *(void *)(a4 + 832);
        if (v328) {
          __int16 v327 = *(_WORD *)(v328 + 8);
        }
        uint64_t v329 = sub_1CCFDED5C(a4, 172, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v319, v321, v326, (uint64_t)v324, v325, v327);
        uint64_t v1832 = v330;
        int v331 = sub_1CD7EBF14(a4, 0x8000000000, (const llvm::APInt *)__src, (llvm *)6, 0, 0, 0);
        uint64_t v333 = v332;
        uint64_t v334 = sub_1CD3DC614((void *)a4, (const llvm::APInt *)__src, v1850, v255, v1843, v1837, (uint64_t)v331, v332, 0xAu, 0, 0, 0, 0);
        uint64_t v336 = v335;
        uint64_t v337 = sub_1CD3DC614((void *)a4, (const llvm::APInt *)__src, v1850, v255, v1843, v1837, (uint64_t)v331, v333, 0x11u, 0, 0, 0, 0);
        uint64_t v339 = v338;
        uint64_t v340 = sub_1CD7EBF14(a4, 1, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        uint64_t v343 = (uint64_t)v340;
        uint64_t v344 = v341;
        __int16 v345 = 0;
        uint64_t v346 = *(void *)(a4 + 832);
        if (v346) {
          __int16 v345 = *(_WORD *)(v346 + 8);
        }
        uint64_t v347 = sub_1CCFDED5C(a4, 171, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v329, v1832, v342, (uint64_t)v340, v341, v345);
        uint64_t v349 = sub_1CD3E1260((void *)a4, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v337, v339, (uint64_t)v347, v348, v1876, v1861, SHIDWORD(v1861));
        uint64_t v352 = sub_1CD3E1260((void *)a4, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v334, v336, v343, v344, (uint64_t)v349, v350, v351);
        uint64_t v355 = v353;
        __int16 v356 = 0;
        uint64_t v357 = *(void *)(a4 + 832);
        if (v357) {
          __int16 v356 = *(_WORD *)(v357 + 8);
        }
        uint64_t v109 = sub_1CCFDED5C(a4, 56, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v329, v1832, v354, (uint64_t)v352, v353, v356);
        __int16 v112 = 0;
        unint64_t v359 = v355 & 0xFFFFFFFF00000000 | v358;
        uint64_t v360 = *(void *)(a4 + 832);
        if (v360) {
          __int16 v112 = *(_WORD *)(v360 + 8);
        }
        int v114 = (llvm::APFloatBase *)a4;
        uint64_t v115 = 216;
        uint64_t v116 = 10;
        uint64_t v111 = (void *)v359;
LABEL_61:
        uint64_t v117 = sub_1CD7F3564(v114, (const char *)v115, (uint64_t)__src, (llvm *)v116, 0, (uint64_t)v109, v111, v112);
        goto LABEL_1168;
      case 0xCC:
        int v4 = (uint64_t *)a2;
        if (*(unsigned char *)(*(void *)(a2 + 40) + 16 * a3) != 6) {
          return v4;
        }
        uint64_t v148 = *(void **)(a2 + 64);
        __src[0] = v148;
        if (v148) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v148, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        uint64_t v149 = (uint64_t *)v8[4];
        uint64_t v150 = *v149;
        uint64_t v151 = (void *)v149[1];
        long long v1875 = *(_OWORD *)(v149[5] + 80);
        long long v1908 = v1875;
        uint64_t v152 = *(void *)(a4 + 832);
        if (v152) {
          __int16 v153 = *(_WORD *)(v152 + 8);
        }
        else {
          __int16 v153 = 0;
        }
        v1176 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xC9, (uint64_t)__src, (llvm *)5, 0, v150, v151, v153);
        unint64_t v1178 = v1177;
        if ((_BYTE)v1875) {
          uint64_t v1179 = sub_1CB87E200((unsigned __int8 *)&v1908);
        }
        else {
          uint64_t v1179 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1908);
        }
        unint64_t v1181 = v1179;
        if (v1180 == 1) {
        if (v1181 > 0x1F)
        }
        {
          uint64_t v1184 = v1176;
          unsigned int v1185 = v1178;
        }
        else
        {
          if ((_BYTE)v1908) {
            uint64_t v1182 = sub_1CB87E200((unsigned __int8 *)&v1908);
          }
          else {
            uint64_t v1182 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1908);
          }
          uint64_t v1327 = v1182;
          if (v1183 == 1) {
          unsigned int v1328 = sub_1CD7EBF14(a4, 32 - v1327, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          }
          __int16 v1331 = 0;
          uint64_t v1332 = *(void *)(a4 + 832);
          if (v1332) {
            __int16 v1331 = *(_WORD *)(v1332 + 8);
          }
          v1176 = sub_1CCFDED5C(a4, 175, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1176, v1178, v1330, (uint64_t)v1328, v1329, v1331);
          unint64_t v1178 = v1178 & 0xFFFFFFFF00000000 | v1333;
          if ((_BYTE)v1908) {
            uint64_t v1334 = sub_1CB87E200((unsigned __int8 *)&v1908);
          }
          else {
            uint64_t v1334 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v1908);
          }
          uint64_t v1336 = v1334;
          if (v1335 == 1) {
          uint64_t v1337 = sub_1CD7EBF14(a4, 32 - v1336, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          }
          __int16 v1340 = 0;
          uint64_t v1341 = *(void *)(a4 + 832);
          if (v1341) {
            __int16 v1340 = *(_WORD *)(v1341 + 8);
          }
          uint64_t v1184 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1176, v1178, v1339, (uint64_t)v1337, v1338, v1340);
          unsigned int v1185 = v1342;
        }
        uint64_t v1343 = sub_1CD7EBF14(a4, 31, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
        __int16 v1346 = 0;
        uint64_t v1347 = *(void *)(a4 + 832);
        if (v1347) {
          __int16 v1346 = *(_WORD *)(v1347 + 8);
        }
        uint64_t v1348 = sub_1CCFDED5C(a4, 176, (const llvm::APInt *)__src, (llvm *)5, 0, (uint64_t)v1176, v1178, v1345, (uint64_t)v1343, v1344, v1346);
        __int16 v1351 = 0;
        uint64_t v1352 = *(void *)(a4 + 832);
        if (v1352) {
          __int16 v1351 = *(_WORD *)(v1352 + 8);
        }
        unint64_t v1354 = sub_1CCFDED5C(a4, 146, (const llvm::APInt *)__src, (llvm *)0x31, 0, (uint64_t)v1184, v1185, v1350, (uint64_t)v1348, v1349, v1351);
        __int16 v1355 = 0;
        uint64_t v1356 = *(void *)(a4 + 832);
        if (v1356) {
          __int16 v1355 = *(_WORD *)(v1356 + 8);
        }
        int v1316 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD8, (uint64_t)__src, (llvm *)6, 0, (uint64_t)v1354, v1353, v1355);
        goto LABEL_882;
      default:
        uint64_t v813 = *(unsigned __int8 **)(a2 + 64);
        *(void *)&long long v1898 = v813;
        if (v813) {
          llvm::MetadataTracking::track((uint64_t)&v1898, v813, 2);
        }
        DWORD2(v1898) = *((_DWORD *)v8 + 15);
        uint64_t v814 = (uint64_t *)v8[4];
        uint64_t v816 = *v814;
        unint64_t v815 = v814[1];
        v817 = (llvm **)(v8[5] + 16 * a3);
        int v818 = *v817;
        uint64_t v819 = (uint64_t)v817[1];
        int v820 = *(unsigned __int16 *)(v816 + 24);
        uint64_t v1835 = v819;
        uint64_t v1840 = v818;
        if (v820 == 212)
        {
          if (*(_WORD *)(*(void *)a4 + 1020))
          {
            uint64_t v1416 = *(void *)(v816 + 32);
            uint64_t v816 = *(void *)v1416;
            unint64_t v815 = v815 & 0xFFFFFFFF00000000 | *(unsigned int *)(v1416 + 8);
            uint64_t v1853 = 10;
            uint64_t v1865 = 0;
            goto LABEL_922;
          }
        }
        else if (v820 == 215)
        {
          uint64_t v821 = *(void *)(v816 + 32);
          uint64_t v816 = *(void *)v821;
          unint64_t v815 = v815 & 0xFFFFFFFF00000000 | *(unsigned int *)(v821 + 8);
          uint64_t v1853 = 9;
          uint64_t v1865 = 0;
LABEL_786:
          BOOL v1233 = v818 == 9;
          uint64_t v1234 = &unk_1CFB2E308;
          if (v818 == 9) {
            uint64_t v1234 = &unk_1CFB2E2E0;
          }
          unsigned int v1830 = v1234;
          uint64_t v1235 = *(void *)(a4 + 832);
          if (v1235) {
            __int16 v1236 = *(_WORD *)(v1235 + 8);
          }
          else {
            __int16 v1236 = 0;
          }
          v1244 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)&v1898, (llvm *)0xA, 0, v816, (void *)v815, v1236);
          v1246 = (void *)(v815 & 0xFFFFFFFF00000000 | v1245);
          uint64_t v1847 = &unk_1CFB2E2E0;
          goto LABEL_925;
        }
        uint64_t v1853 = (uint64_t)v818;
        uint64_t v1865 = v819;
        if (v818 == 9) {
          goto LABEL_786;
        }
LABEL_922:
        BOOL v1233 = v818 == 9;
        uint64_t v1417 = &unk_1CFB2E2E0;
        uint64_t v1847 = &unk_1CFB2E308;
        if (v818 != 9) {
          uint64_t v1417 = &unk_1CFB2E308;
        }
        unsigned int v1830 = v1417;
        v1244 = (uint64_t *)v816;
        v1246 = (void *)v815;
LABEL_925:
        uint64_t v1418 = *(void *)(a4 + 832);
        BOOL v1884 = v1233;
        if (v1418) {
          __int16 v1419 = *(_WORD *)(v1418 + 8);
        }
        else {
          __int16 v1419 = 0;
        }
        uint64_t v1420 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0x1AA, (uint64_t)&v1898, (llvm *)0xA, 0, (uint64_t)v1244, v1246, v1419);
        unint64_t v1422 = v1421;
        if ((sub_1CB8E4F88(v816, v815, 0) & 1) == 0)
        {
          uint64_t v1620 = sub_1CD7ECDC4(a4, (uint64_t)&v1898, 10, 0, 0, 0.0);
          uint64_t v1824 = v1621;
          uint64_t v1827 = (uint64_t)v1620;
          __src[1] = v1847;
          if ((v1847[2] + 64) >= 0x80) {
            operator new[]();
          }
          BYTE4(v1901) = BYTE4(v1901) & 0xF0 | 3;
          LODWORD(v1901) = v1847[1] - 1;
          int v1622 = v1847[2];
          if ((v1622 - 64) < 0xFFFFFF80)
          {
            v1806 = v1900;
            *uint64_t v1900 = 0;
            bzero(v1806 + 1, 8 * (((v1622 + 64) >> 6) - 2) + 8);
          }
          else
          {
            uint64_t v1900 = 0;
          }
          sub_1CB87E670((uint64_t)__src, 0);
          uint64_t v1818 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)__src, (const llvm::APFloat *)&v1898, (llvm *)v1853, v1865, 0);
          int v1821 = v1623;
          uint64_t v1624 = *(void *)(a4 + 832);
          if (v1624) {
            __int16 v1625 = *(_WORD *)(v1624 + 8);
          }
          else {
            __int16 v1625 = 0;
          }
          v1735 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDF, (uint64_t)&v1898, (llvm *)v1853, v1865, v816, (void *)v815, v1625);
          if (*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
            v1736 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1898, (uint64_t)v1735, v1734, (uint64_t)v1818, v1821, (uint64_t)v1420, v1422, v1827, v1824, SHIDWORD(v1824), 3u);
          }
          else {
            v1736 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1898, (uint64_t)v1735, v1734, (uint64_t)v1818, v1821, v1827, v1824, (uint64_t)v1420, v1422, SHIDWORD(v1422), 4u);
          }
          uint64_t v1420 = v1736;
          unint64_t v1422 = v1737 | v1422 & 0xFFFFFFFF00000000;
          if (__src[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1900);
          }
          else if ((*((_DWORD *)__src[1] + 2) - 64) <= 0xFFFFFF7F && v1900)
          {
            MEMORY[0x1D25D9CB0](v1900, 0x1000C8000313F17);
          }
        }
        uint64_t v1424 = *(void *)(a4 + 832);
        if (v1424) {
          LOWORD(v1424) = *(_WORD *)(v1424 + 8);
        }
        int v4 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1898, (llvm *)0xA, 0, (uint64_t)v1420, v1422, v1423, (uint64_t)v1244, (uint64_t)v1246, v1424);
        unint64_t v1426 = v1425;
        if (*(_WORD *)(*(void *)a4 + 1020))
        {
          if (v1884)
          {
            __int16 v1659 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1898, (llvm *)5, 0, 0, 0);
            uint64_t v1662 = *(void *)(a4 + 832);
            if (v1662) {
              LOWORD(v1662) = *(_WORD *)(v1662 + 8);
            }
            int v4 = sub_1CCFDED5C(a4, 212, (const llvm::APInt *)&v1898, (llvm *)9, 0, (uint64_t)v4, v1426, v1661, (uint64_t)v1659, v1660, v1662);
          }
        }
        else
        {
          if (*(unsigned char *)(*(void *)(a1 + 184296) + 300))
          {
            if (*(unsigned char *)(v8[5] + 16 * a3) == 10)
            {
              uint64_t v1626 = v8[6];
              if (!v1626 || *(void *)(v1626 + 32) || *(_WORD *)(*(void *)(v1626 + 16) + 24) != 212)
              {
                uint64_t v1628 = sub_1CD7ECDC4(a4, (uint64_t)&v1898, 10, 0, 0, -0.5);
                __int16 v1630 = 0;
                uint64_t v1631 = *(void *)(a4 + 832);
                if (v1631) {
                  __int16 v1630 = *(_WORD *)(v1631 + 8);
                }
                uint64_t v1632 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)&v1898, (llvm *)0xA, 0, (uint64_t)v1628, v1627, v1629, (uint64_t)v1420, v1422, v1630);
                uint64_t v1634 = v1633;
                uint64_t v1635 = sub_1CD7ECDC4(a4, (uint64_t)&v1898, 10, 0, 0, 0.5);
                __int16 v1638 = 0;
                uint64_t v1639 = *(void *)(a4 + 832);
                if (v1639) {
                  __int16 v1638 = *(_WORD *)(v1639 + 8);
                }
                uint64_t v1640 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1898, (llvm *)0xA, 0, (uint64_t)v1632, v1634, v1637, (uint64_t)v4, v1426, (uint64_t)v1635, v1636, SHIDWORD(v1636), v1638);
                __int16 v1643 = 0;
                uint64_t v1644 = *(void *)(a4 + 832);
                if (v1644) {
                  __int16 v1643 = *(_WORD *)(v1644 + 8);
                }
                int v4 = sub_1CD7F5D38((void *)a4, (const char *)0x8D, (const llvm::APInt *)&v1898, (llvm *)0xA, 0, (uint64_t)v4, v1426, v1642, (uint64_t)v1640, v1641, (uint64_t)v4, v1426, SHIDWORD(v1426), v1643);
                unint64_t v1426 = v1426 & 0xFFFFFFFF00000000 | v1645;
              }
            }
          }
          if (v1884)
          {
            uint64_t v1646 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1898, (llvm *)5, 0, 0, 0);
            __int16 v1649 = 0;
            uint64_t v1650 = *(void *)(a4 + 832);
            if (v1650) {
              __int16 v1649 = *(_WORD *)(v1650 + 8);
            }
            int v4 = sub_1CCFDED5C(a4, 212, (const llvm::APInt *)&v1898, (llvm *)9, 0, (uint64_t)v4, v1426, v1648, (uint64_t)v1646, v1647, v1649);
            unint64_t v1426 = v1426 & 0xFFFFFFFF00000000 | v1651;
          }
          __src[1] = v1847;
          if ((v1847[2] + 64) > 0x7F) {
            operator new[]();
          }
          BYTE4(v1901) = 3;
          LODWORD(v1901) = v1847[1] - 1;
          uint64_t v1900 = 0;
          sub_1CB87E774((uint64_t)__src, 0);
          v1652 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)__src, (const llvm::APFloat *)&v1898, (llvm *)v1853, v1865, 0);
          int v1654 = v1653;
          char v1911 = 3;
          if (v1884) {
            int v1655 = -15;
          }
          else {
            int v1655 = -127;
          }
          int v1910 = v1655;
          *((void *)&v1908 + 1) = v1830;
          unint64_t v1909 = 0;
          sub_1CB87E790((uint64_t)&v1908, 0);
          uint64_t v1656 = sub_1CD7ECA8C(a4, (llvm::LLVMContext *)&v1908, (const llvm::APFloat *)&v1898, v1840, v1835, 0);
          unsigned int v1658 = v1657;
          if (*((_UNKNOWN **)&v1908 + 1) == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1909);
          }
          else if ((*(_DWORD *)(*((void *)&v1908 + 1) + 8) - 64) <= 0xFFFFFF7F && v1909)
          {
            MEMORY[0x1D25D9CB0](v1909, 0x1000C8000313F17);
          }
          int v4 = sub_1CD3D6058((void *)a4, (const llvm::APInt *)&v1898, v816, v815, (uint64_t)v1652, v1654, (uint64_t)v1656, v1658, (uint64_t)v4, v1426, SHIDWORD(v1426), 2u);
          if (__src[1] == &unk_1CFB2E344)
          {
            sub_1CB845718((uint64_t *)&v1900);
          }
          else if ((*((_DWORD *)__src[1] + 2) - 64) <= 0xFFFFFF7F && v1900)
          {
            MEMORY[0x1D25D9CB0](v1900, 0x1000C8000313F17);
          }
        }
LABEL_1044:
        v1238 = (void *)v1898;
        if (!(void)v1898) {
          return v4;
        }
        int v1239 = *(unsigned __int8 *)v1898;
        if ((v1239 - 4) <= 0x1E)
        {
          if ((*(unsigned char *)(v1898 + 1) & 0x7F) == 2 || *(_DWORD *)(v1898 + 12))
          {
            uint64_t v1527 = *(void *)(v1898 + 16);
            if ((v1527 & 4) != 0)
            {
              unint64_t v1241 = v1527 & 0xFFFFFFFFFFFFFFF8;
              if (v1241) {
                goto LABEL_1056;
              }
            }
          }
          return v4;
        }
        if ((v1239 - 3) >= 0xFFFFFFFE) {
          uint64_t v1528 = v1898;
        }
        else {
          uint64_t v1528 = 0;
        }
        if ((v1239 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v1241 = v1528 + 8;
LABEL_1056:
          v1243 = &v1898;
          goto LABEL_1057;
        }
        break;
    }
    goto LABEL_1183;
  }
  int v4 = (uint64_t *)a2;
  if ((v10 - 246) < 2) {
    return v4;
  }
  if (v10 != 260)
  {
    switch(*(_WORD *)(a2 + 24))
    {
      case 0xE6:
        uint64_t v733 = *(void **)(a2 + 64);
        __src[0] = v733;
        if (v733) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v733, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        uint64_t v734 = v8[4];
        uint64_t v735 = *(unsigned __int8 *)(v8[5] + 16 * a3);
        uint64_t v737 = *(uint64_t **)v734;
        unint64_t v736 = *(void *)(v734 + 8);
        if (v735 == 9)
        {
          uint64_t v738 = *(void *)(a4 + 832);
          if (v738) {
            __int16 v739 = *(_WORD *)(v738 + 8);
          }
          else {
            __int16 v739 = 0;
          }
          uint64_t v737 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)__src, (llvm *)0xA, 0, *(void *)v734, *(void **)(v734 + 8), v739);
          unint64_t v736 = v736 & 0xFFFFFFFF00000000 | v1289;
        }
        uint64_t v1290 = sub_1CD7ECDC4(a4, (uint64_t)__src, 10, 0, 0, 0.693147181);
        uint64_t v1292 = v1291;
        __int16 v1293 = 0;
        uint64_t v1294 = *(void *)(a4 + 832);
        if (v1294) {
          __int16 v1293 = *(_WORD *)(v1294 + 8);
        }
        uint64_t v1296 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xE7, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v737, (void *)v736, v1293);
        uint64_t v1298 = *(void *)(a4 + 832);
        if (v1298) {
          LOWORD(v1298) = *(_WORD *)(v1298 + 8);
        }
        int v4 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v1296, v1295, v1297, (uint64_t)v1290, v1292, v1298);
        uint64_t v1300 = v1299;
        if (v735 != 9) {
          goto LABEL_1169;
        }
        break;
      case 0xE7:
      case 0xE8:
      case 0xEA:
      case 0xEB:
        goto LABEL_1308;
      case 0xE9:
        v740 = *(void **)(a2 + 64);
        __src[0] = v740;
        if (v740) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v740, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        uint64_t v741 = v8[4];
        uint64_t v742 = *(unsigned __int8 *)(v8[5] + 16 * a3);
        v744 = *(uint64_t **)v741;
        unint64_t v743 = *(void *)(v741 + 8);
        if (v742 == 9)
        {
          uint64_t v745 = *(void *)(a4 + 832);
          if (v745) {
            __int16 v746 = *(_WORD *)(v745 + 8);
          }
          else {
            __int16 v746 = 0;
          }
          v744 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)__src, (llvm *)0xA, 0, *(void *)v741, *(void **)(v741 + 8), v746);
          unint64_t v743 = v743 & 0xFFFFFFFF00000000 | v1301;
        }
        __int16 v1302 = sub_1CD7ECDC4(a4, (uint64_t)__src, 10, 0, 0, 1.44269504);
        __int16 v1305 = 0;
        uint64_t v1306 = *(void *)(a4 + 832);
        if (v1306) {
          __int16 v1305 = *(_WORD *)(v1306 + 8);
        }
        __int16 v1308 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v744, v743, v1304, (uint64_t)v1302, v1303, v1305);
        __int16 v1309 = 0;
        uint64_t v1310 = *(void *)(a4 + 832);
        if (v1310) {
          __int16 v1309 = *(_WORD *)(v1310 + 8);
        }
        int v4 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xEA, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v1308, v1307, v1309);
        uint64_t v1300 = v1311;
        if (v742 != 9) {
          goto LABEL_1169;
        }
        break;
      case 0xEC:
        v724 = *(uint64_t **)(a2 + 32);
        uint64_t v725 = *v724;
        uint64_t v726 = (void *)v724[1];
        uint64_t v727 = *(void *)(*v724 + 40) + 16 * v726;
        uint64_t v728 = *(llvm **)v727;
        uint64_t v729 = *(void *)(v727 + 8);
        v730 = *(void **)(a2 + 64);
        __src[0] = v730;
        if (v730) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v730, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        uint64_t v731 = *(void *)(a4 + 832);
        if (v731) {
          __int16 v732 = *(_WORD *)(v731 + 8);
        }
        else {
          __int16 v732 = 0;
        }
        unint64_t v878 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xDF, (uint64_t)__src, v728, v729, v725, v726, v732);
        uint64_t v879 = *(void *)(a4 + 832);
        if (v879) {
          __int16 v880 = *(_WORD *)(v879 + 8);
        }
        else {
          __int16 v880 = 0;
        }
        unint64_t v882 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xF1, (uint64_t)__src, v728, v729, (uint64_t)v878, v877, v880);
        uint64_t v884 = *(void *)(a4 + 832);
        if (v884) {
          LOWORD(v884) = *(_WORD *)(v884 + 8);
        }
        uint64_t v117 = sub_1CCFDED5C(a4, 143, (const llvm::APInt *)__src, v728, v729, (uint64_t)v882, v881, v883, v725, (uint64_t)v726, v884);
        goto LABEL_1168;
      default:
        uint64_t v383 = *(void *)(a2 + 32);
        uint64_t v384 = *(unsigned __int8 *)(*(void *)(a2 + 40) + 16 * a3);
        uint64_t v386 = *(uint64_t **)v383;
        unint64_t v385 = *(void *)(v383 + 8);
        BOOL v388 = *(uint64_t **)(v383 + 40);
        unint64_t v387 = *(void *)(v383 + 48);
        uint64_t v389 = *(void **)(a2 + 64);
        __src[0] = v389;
        if (v389) {
          llvm::MetadataTracking::track((uint64_t)__src, (unsigned __int8 *)v389, 2);
        }
        LODWORD(__src[1]) = *((_DWORD *)v8 + 15);
        if (v384 == 9)
        {
          uint64_t v390 = *(void *)(a4 + 832);
          if (v390) {
            __int16 v391 = *(_WORD *)(v390 + 8);
          }
          else {
            __int16 v391 = 0;
          }
          uint64_t v386 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v386, (void *)v385, v391);
          __int16 v1247 = 0;
          unint64_t v385 = v385 & 0xFFFFFFFF00000000 | v1248;
          uint64_t v1249 = *(void *)(a4 + 832);
          if (v1249) {
            __int16 v1247 = *(_WORD *)(v1249 + 8);
          }
          BOOL v388 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xD7, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v388, (void *)v387, v1247);
          unint64_t v387 = v387 & 0xFFFFFFFF00000000 | v1250;
        }
        uint64_t v1251 = *(void *)(a4 + 832);
        if (v1251) {
          __int16 v1252 = *(_WORD *)(v1251 + 8);
        }
        else {
          __int16 v1252 = 0;
        }
        unint64_t v1253 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xE7, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v386, (void *)v385, v1252);
        __int16 v1256 = 0;
        uint64_t v1257 = *(void *)(a4 + 832);
        if (v1257) {
          __int16 v1256 = *(_WORD *)(v1257 + 8);
        }
        uint64_t v1883 = v384;
        uint64_t v1856 = (uint64_t)v388;
        uint64_t v1259 = sub_1CCFDED5C(a4, 98, (const llvm::APInt *)__src, (llvm *)0xA, 0, (uint64_t)v388, v387, v1255, (uint64_t)v1253, v1254, v1256);
        __int16 v1260 = 0;
        uint64_t v1261 = *(void *)(a4 + 832);
        if (v1261) {
          __int16 v1260 = *(_WORD *)(v1261 + 8);
        }
        int v1869 = v387;
        v1262 = sub_1CD7F3564((llvm::APFloatBase *)a4, (const char *)0xEA, (uint64_t)__src, (llvm *)0xA, 0, (uint64_t)v1259, v1258, v1260);
        unint64_t v1264 = v1263;
        unint64_t v1265 = v1263;
        if (!*(unsigned char *)(*(void *)(a1 + 184296) + 280))
        {
          uint64_t v1266 = sub_1CD7ECDC4(a4, (uint64_t)__src, 10, 0, 0, 0.0);
          int v1268 = v1267;
          v1269 = sub_1CD7ECDC4(a4, (uint64_t)__src, 10, 0, 0, 0.0);
          sub_1CD3D6058((void *)a4, (const llvm::APInt *)__src, (uint64_t)v386, v385, (uint64_t)v1266, v1268, (uint64_t)v1269, v1270, (uint64_t)v1262, v1264, SHIDWORD(v1264), 1u);
          unint64_t v1265 = v1264 & 0xFFFFFFFF00000000;
        }
        v1271 = sub_1CD7ECDC4(a4, (uint64_t)__src, 10, 0, 0, 0.0);
        int v1273 = v1272;
        uint64_t v1274 = sub_1CD7ECDC4(a4, (uint64_t)__src, 10, 0, 0, 1.0);
        int v1276 = v1275;
        uint64_t v1277 = v1274[5] + 16 * v1275;
        v1279 = *(llvm **)v1277;
        uint64_t v1278 = *(void *)(v1277 + 8);
        uint64_t v1280 = sub_1CD7EE368((void *)a4, 1u);
        int v4 = sub_1CD7F6564((void *)a4, (const char *)0xC0, (const llvm::APInt *)__src, v1279, v1278, v1856, v1869, v1282, (uint64_t)v1271, v1273, (uint64_t)v1274, v1276, (uint64_t)v1262, v1264, v1280, v1281);
        unint64_t v1284 = v1265 & 0xFFFFFFFF00000000 | v1283;
        if (v1883 == 9)
        {
          v1285 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
          uint64_t v1288 = *(void *)(a4 + 832);
          if (v1288) {
            LOWORD(v1288) = *(_WORD *)(v1288 + 8);
          }
          int v4 = sub_1CCFDED5C(a4, 212, (const llvm::APInt *)__src, (llvm *)9, 0, (uint64_t)v4, v1284, v1287, (uint64_t)v1285, v1286, v1288);
        }
        goto LABEL_1169;
    }
    uint64_t v1312 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)__src, (llvm *)5, 0, 0, 0);
    uint64_t v1315 = *(void *)(a4 + 832);
    if (v1315) {
      LOWORD(v1315) = *(_WORD *)(v1315 + 8);
    }
    int v1316 = sub_1CCFDED5C(a4, 212, (const llvm::APInt *)__src, (llvm *)9, 0, (uint64_t)v4, v1300, v1314, (uint64_t)v1312, v1313, v1315);
LABEL_882:
    int v4 = v1316;
LABEL_1169:
    v1238 = __src[0];
    if (!__src[0]) {
      return v4;
    }
    int v1239 = *(unsigned __int8 *)__src[0];
    if ((v1239 - 4) > 0x1E)
    {
      if ((v1239 - 3) >= 0xFFFFFFFE) {
        uint64_t v1710 = __src[0];
      }
      else {
        uint64_t v1710 = 0;
      }
      if ((v1239 - 3) < 0xFFFFFFFE) {
        goto LABEL_1183;
      }
      unint64_t v1709 = (unint64_t)v1710 + 8;
    }
    else
    {
      if ((*((unsigned char *)__src[0] + 1) & 0x7F) != 2 && !*((_DWORD *)__src[0] + 3)) {
        return v4;
      }
      uint64_t v1708 = *((void *)__src[0] + 2);
      if ((v1708 & 4) == 0) {
        return v4;
      }
      unint64_t v1709 = v1708 & 0xFFFFFFFFFFFFFFF8;
      if (!v1709) {
        return v4;
      }
    }
    *(void *)&long long v1908 = __src;
    uint64_t v1529 = v1709 + 16;
    int v1530 = (void **)&v1908;
LABEL_1182:
    sub_1CC5FA668(v1529, v1530);
    return v4;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 184296) + 281)) {
    return 0;
  }
  uint64_t v16 = *(void *)(a2 + 32);
  if (*(unsigned char *)(*(void *)(*(void *)(v16 + 80) + 40) + 16 * *(unsigned int *)(v16 + 88)) != 6) {
    return 0;
  }
  uint64_t v17 = *(unsigned __int8 **)(a2 + 64);
  *(void *)&long long v1908 = v17;
  if (v17)
  {
    llvm::MetadataTracking::track((uint64_t)&v1908, v17, 2);
    uint64_t v16 = v8[4];
    uint64_t v17 = (unsigned __int8 *)v1908;
  }
  int v18 = *((_DWORD *)v8 + 15);
  DWORD2(v1908) = v18;
  long long v19 = *(_OWORD *)(v16 + 80);
  long long v1897 = *(_OWORD *)(v16 + 120);
  long long v1898 = v19;
  unsigned int v20 = *(_DWORD *)(*(void *)(v16 + 40) + 76);
  LODWORD(v1896) = v20;
  v1889 = v17;
  if (v17)
  {
    llvm::MetadataTracking::track((uint64_t)&v1889, v17, 2);
    int v18 = DWORD2(v1908);
  }
  int v1890 = v18;
  sub_1CD3E07C8((unsigned int *)a1, (uint64_t)&v1898, (uint64_t)&v1897, (unsigned int *)&v1896, (const llvm::APInt *)&v1889, a4);
  if (!v1889) {
    goto LABEL_26;
  }
  int v21 = *v1889;
  if ((v21 - 4) > 0x1E)
  {
    if ((v21 - 3) >= 0xFFFFFFFE) {
      int v1538 = v1889;
    }
    else {
      int v1538 = 0;
    }
    if ((v21 - 3) < 0xFFFFFFFE)
    {
      if (v21 == 3) {
        *((void *)v1889 + 1) = 0;
      }
      goto LABEL_26;
    }
    unint64_t v1539 = (unint64_t)(v1538 + 8);
  }
  else
  {
    if ((v1889[1] & 0x7F) != 2 && !*((_DWORD *)v1889 + 3)) {
      goto LABEL_26;
    }
    uint64_t v1803 = *((void *)v1889 + 2);
    if ((v1803 & 4) == 0) {
      goto LABEL_26;
    }
    unint64_t v1539 = v1803 & 0xFFFFFFFFFFFFFFF8;
    if (!v1539) {
      goto LABEL_26;
    }
  }
  __src[0] = &v1889;
  sub_1CC5FA668(v1539 + 16, __src);
LABEL_26:
  if (!(void)v1897)
  {
    uint64_t v22 = *(void *)(v1898 + 40) + 16 * DWORD2(v1898);
    *(void *)&long long v1897 = sub_1CD7EBF14(a4, 0, (const llvm::APInt *)&v1908, *(llvm **)v22, *(void *)(v22 + 8), 0, 0);
    DWORD2(v1897) = v23;
    unsigned int v20 = 22;
  }
  uint64_t v24 = v8[4];
  int v25 = *(_DWORD *)(v24 + 8);
  __src[0] = *(void **)v24;
  LODWORD(__src[1]) = v25;
  uint64_t v1900 = (void *)sub_1CD7EE368((void *)a4, v20);
  uint64_t v1901 = v26;
  int v1902 = (void *)v1898;
  LODWORD(v1903) = DWORD2(v1898);
  uint64_t v1904 = (uint64_t *)v1897;
  LODWORD(v1905) = DWORD2(v1897);
  uint64_t v27 = v8[4];
  LODWORD(v1907) = *(_DWORD *)(v27 + 168);
  uint64_t v1906 = *(void *)(v27 + 160);
  uint64_t v28 = *(void *)(a4 + 832);
  if (v28) {
    uint64_t v29 = *(unsigned __int16 *)(v28 + 8);
  }
  else {
    uint64_t v29 = 0;
  }
  uint64_t v217 = (void *)a4;
  uint64_t v218 = 260;
  uint64_t v219 = 1;
  uint64_t v220 = 5;
LABEL_792:
  v1237 = sub_1CD7FF4E8(v217, (const char *)v218, (const llvm::APInt *)&v1908, (llvm *)v219, 0, (uint64_t *)__src, v220, v29);
LABEL_793:
  int v4 = v1237;
LABEL_794:
  v1238 = (void *)v1908;
  if ((void)v1908)
  {
    int v1239 = *(unsigned __int8 *)v1908;
    if ((v1239 - 4) <= 0x1E)
    {
      if ((*(unsigned char *)(v1908 + 1) & 0x7F) != 2 && !*(_DWORD *)(v1908 + 12)) {
        return v4;
      }
      uint64_t v1240 = *(void *)(v1908 + 16);
      if ((v1240 & 4) == 0) {
        return v4;
      }
      unint64_t v1241 = v1240 & 0xFFFFFFFFFFFFFFF8;
      if (!v1241) {
        return v4;
      }
      goto LABEL_806;
    }
    if ((v1239 - 3) >= 0xFFFFFFFE) {
      uint64_t v1242 = v1908;
    }
    else {
      uint64_t v1242 = 0;
    }
    if ((v1239 - 3) >= 0xFFFFFFFE)
    {
      unint64_t v1241 = v1242 + 8;
LABEL_806:
      v1243 = &v1908;
LABEL_1057:
      __src[0] = v1243;
      uint64_t v1529 = v1241 + 16;
      int v1530 = __src;
      goto LABEL_1182;
    }
LABEL_1183:
    if (v1239 == 3) {
      v1238[1] = 0;
    }
  }
  return v4;
}

uint64_t sub_1CB8E40FC(llvm::IntegerType *a1, llvm::LLVMContext *a2)
{
  if ((int)a2 <= 31)
  {
    switch(a2)
    {
      case 1:
        return 2;
      case 0x10:
        return 4;
      case 8:
        return 3;
    }
  }
  else
  {
    switch(a2)
    {
      case 0x20:
        return 5;
      case 0x40:
        return 6;
      case 0x80:
        return 7;
    }
  }
  llvm::IntegerType::get(a1, a2);
  return 0;
}

uint64_t *sub_1CB8E41A0(uint64_t a1, unsigned int a2, llvm::APFloatBase *a3)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  long long v146 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * a2);
  if ((_BYTE)v146) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v146);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v146);
  }
  unsigned int v7 = ExtendedSizeInBits;
  if (v6 == 1) {
  int v8 = *(unsigned __int8 **)(a1 + 64);
  }
  int v144 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v144, v8, 2);
  }
  int v145 = *(_DWORD *)(a1 + 60);
  int v9 = *(uint64_t **)(a1 + 32);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = v9[6];
  uint64_t v143 = v9[10];
  uint64_t v140 = v9[5];
  unint64_t v142 = v9[11];
  long long v147 = *(_OWORD *)(*(void *)(v143 + 40) + 16 * v142);
  if ((_BYTE)v147) {
    uint64_t v13 = sub_1CB87E200((unsigned __int8 *)&v147);
  }
  else {
    uint64_t v13 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v147);
  }
  unint64_t v15 = v13;
  if (v14 == 1) {
  uint64_t v16 = v7;
  }
  unsigned int v127 = v7;
  if (v15 >= v7)
  {
    long long v147 = *(_OWORD *)(*(void *)(v143 + 40) + 16 * v142);
    if ((_BYTE)v147) {
      uint64_t v22 = sub_1CB87E200((unsigned __int8 *)&v147);
    }
    else {
      uint64_t v22 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v147);
    }
    unint64_t v26 = v22;
    if (v23 == 1) {
    if (v26 <= v7)
    }
    {
      uint64_t v20 = v12;
      goto LABEL_30;
    }
    uint64_t v18 = *((void *)&v146 + 1);
    uint64_t v17 = (llvm *)v146;
    uint64_t v27 = *((void *)a3 + 104);
    uint64_t v20 = v12;
    if (v27) {
      __int16 v21 = *(_WORD *)(v27 + 8);
    }
    else {
      __int16 v21 = 0;
    }
    uint64_t v24 = a3;
    uint64_t v25 = 201;
  }
  else
  {
    uint64_t v18 = *((void *)&v146 + 1);
    uint64_t v17 = (llvm *)v146;
    uint64_t v19 = *((void *)a3 + 104);
    uint64_t v20 = v12;
    if (v19) {
      __int16 v21 = *(_WORD *)(v19 + 8);
    }
    else {
      __int16 v21 = 0;
    }
    uint64_t v24 = a3;
    uint64_t v25 = 199;
  }
  uint64_t v28 = sub_1CD7F3564(v24, (const char *)v25, (uint64_t)&v144, v17, v18, v143, (void *)v142, v21);
  unint64_t v142 = v142 & 0xFFFFFFFF00000000 | v29;
  uint64_t v143 = (uint64_t)v28;
LABEL_30:
  int v30 = *(unsigned __int16 *)(a1 + 24);
  if (v30 == 196) {
    int v31 = 176;
  }
  else {
    int v31 = 177;
  }
  unsigned int v132 = v31;
  long long v32 = v146;
  uint64_t v34 = sub_1CD7EBF14((uint64_t)a3, v16, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), 0, 0);
  uint64_t v36 = *((void *)a3 + 104);
  if (v36) {
    LOWORD(v36) = *(_WORD *)(v36 + 8);
  }
  uint64_t v37 = v20;
  __int16 v39 = sub_1CCFDED5C((uint64_t)a3, 57, (const llvm::APInt *)&v144, (llvm *)v32, *((uint64_t *)&v32 + 1), (uint64_t)v34, v33, v35, v143, v142, v36);
  uint64_t v41 = v40;
  uint64_t v42 = *((void *)a3 + 104);
  if (v42) {
    LOWORD(v42) = *(_WORD *)(v42 + 8);
  }
  unsigned int v138 = v11;
  uint64_t v139 = v10;
  uint64_t v43 = sub_1CCFDED5C((uint64_t)a3, 177, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), v10, v11, v38, v143, v142, v42);
  uint64_t v45 = v44;
  long long v46 = v146;
  __int16 v47 = sub_1CD7EBF14((uint64_t)a3, v16, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), 0, 0);
  uint64_t v50 = *((void *)a3 + 104);
  if (v50) {
    LOWORD(v50) = *(_WORD *)(v50 + 8);
  }
  uint64_t v52 = sub_1CCFDED5C((uint64_t)a3, 57, (const llvm::APInt *)&v144, (llvm *)v46, *((uint64_t *)&v46 + 1), v143, v142, v49, (uint64_t)v47, v48, v50);
  uint64_t v54 = v53;
  uint64_t v55 = *((void *)a3 + 104);
  if (v55) {
    LOWORD(v55) = *(_WORD *)(v55 + 8);
  }
  uint64_t v56 = sub_1CCFDED5C((uint64_t)a3, 175, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), v140, v37, v51, (uint64_t)v39, v41, v55);
  uint64_t v59 = *((void *)a3 + 104);
  if (v59) {
    LOWORD(v59) = *(_WORD *)(v59 + 8);
  }
  unint64_t v60 = sub_1CCFDED5C((uint64_t)a3, 172, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), (uint64_t)v43, v45, v58, (uint64_t)v56, v57, v59);
  int v130 = v62;
  uint64_t v131 = (uint64_t)v60;
  uint64_t v63 = *((void *)a3 + 104);
  if (v63) {
    LOWORD(v63) = *(_WORD *)(v63 + 8);
  }
  uint64_t v64 = v132;
  uint64_t v133 = sub_1CCFDED5C((uint64_t)a3, v132, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), v140, v37, v61, (uint64_t)v52, v54, v63);
  int v134 = v54;
  unsigned int v129 = v66;
  uint64_t v67 = *((void *)a3 + 104);
  uint64_t v136 = (uint64_t)v52;
  if (v67) {
    LOWORD(v67) = *(_WORD *)(v67 + 8);
  }
  __int16 v68 = sub_1CCFDED5C((uint64_t)a3, v64, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), v140, v37, v65, v143, v142, v67);
  int v70 = v69;
  long long v71 = v146;
  if (v30 == 196)
  {
    uint64_t v72 = sub_1CD7EBF14((uint64_t)a3, v127 - 1, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), 0, 0);
    uint64_t v75 = *((void *)a3 + 104);
    if (v75) {
      LOWORD(v75) = *(_WORD *)(v75 + 8);
    }
    uint64_t v76 = sub_1CCFDED5C((uint64_t)a3, 176, (const llvm::APInt *)&v144, (llvm *)v71, *((uint64_t *)&v71 + 1), v140, v37, v74, (uint64_t)v72, v73, v75);
  }
  else
  {
    uint64_t v76 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), 0, 0);
  }
  uint64_t v78 = (uint64_t)v76;
  unsigned int v79 = v77;
  int v80 = v77;
  uint64_t v81 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), 0, 0);
  int v83 = v82;
  uint64_t v84 = *(void *)(v78 + 40) + 16 * v79;
  uint64_t v86 = *(llvm **)v84;
  uint64_t v85 = *(void *)(v84 + 8);
  uint64_t v87 = sub_1CD7EE368(a3, 0x13u);
  int v128 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v144, v86, v85, v136, v134, v89, (uint64_t)v81, v83, v78, v80, (uint64_t)v68, v70, v87, v88);
  int v91 = v90;
  uint64_t v92 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), 0, 0);
  LODWORD(v78) = v93;
  uint64_t v94 = v133[5] + 16 * v129;
  uint64_t v95 = *(llvm **)v94;
  uint64_t v96 = *(void *)(v94 + 8);
  uint64_t v97 = sub_1CD7EE368(a3, 0x13u);
  long long v100 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v144, v95, v96, v136, v134, v99, (uint64_t)v92, v78, (uint64_t)v133, v129, v131, v130, v97, v98);
  int v135 = v101;
  uint64_t v137 = (uint64_t)v100;
  int v102 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), 0, 0);
  LODWORD(v96) = v103;
  uint64_t v104 = *(void *)(v140 + 40) + 16 * v37;
  uint64_t v106 = *(llvm **)v104;
  uint64_t v105 = *(void *)(v104 + 8);
  uint64_t v107 = sub_1CD7EE368(a3, 0x11u);
  uint64_t v110 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v144, v106, v105, v143, v142, v109, (uint64_t)v102, v96, v140, v37, (uint64_t)v128, v91, v107, v108);
  int v141 = v111;
  __int16 v112 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v144, (llvm *)v146, *((uint64_t *)&v146 + 1), 0, 0);
  LODWORD(v102) = v113;
  uint64_t v114 = *(void *)(v139 + 40) + 16 * v138;
  uint64_t v115 = *(llvm **)v114;
  uint64_t v116 = *(void *)(v114 + 8);
  uint64_t v117 = sub_1CD7EE368(a3, 0x11u);
  *(void *)&long long v147 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v144, v115, v116, v143, v142, v119, (uint64_t)v112, (int)v102, v139, v138, v137, v135, v117, v118);
  DWORD2(v147) = v120;
  uint64_t v148 = v110;
  int v149 = v141;
  uint64_t v121 = sub_1CD7F9858(a3, (uint64_t *)&v147, 2uLL, (const llvm::APInt *)&v144);
  if (v144)
  {
    int v122 = *v144;
    if ((v122 - 4) > 0x1E)
    {
      if ((v122 - 3) >= 0xFFFFFFFE) {
        int v124 = v144;
      }
      else {
        int v124 = 0;
      }
      if ((v122 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v125 = (unint64_t)(v124 + 8);
LABEL_62:
        *(void *)&long long v147 = &v144;
        sub_1CC5FA668(v125 + 16, &v147);
        return v121;
      }
      if (v122 == 3) {
        *((void *)v144 + 1) = 0;
      }
    }
    else if ((v144[1] & 0x7F) == 2 || *((_DWORD *)v144 + 3))
    {
      uint64_t v126 = *((void *)v144 + 2);
      if ((v126 & 4) != 0)
      {
        unint64_t v125 = v126 & 0xFFFFFFFFFFFFFFF8;
        if (v125) {
          goto LABEL_62;
        }
      }
    }
  }
  return v121;
}

uint64_t *sub_1CB8E48EC(uint64_t a1, unsigned int a2, llvm::APFloatBase *a3)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  long long v131 = *(_OWORD *)(*(void *)(a1 + 40) + 16 * a2);
  if ((_BYTE)v131) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v131);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v131);
  }
  unsigned int v7 = ExtendedSizeInBits;
  if (v6 == 1) {
  int v8 = *(unsigned __int8 **)(a1 + 64);
  }
  unsigned int v129 = v8;
  if (v8) {
    llvm::MetadataTracking::track((uint64_t)&v129, v8, 2);
  }
  int v130 = *(_DWORD *)(a1 + 60);
  int v9 = *(uint64_t **)(a1 + 32);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = v9[5];
  uint64_t v127 = v9[6];
  uint64_t v13 = (uint64_t *)v9[10];
  unint64_t v14 = v9[11];
  long long v132 = *(_OWORD *)(v13[5] + 16 * v14);
  if ((_BYTE)v132) {
    uint64_t v15 = sub_1CB87E200((unsigned __int8 *)&v132);
  }
  else {
    uint64_t v15 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v132);
  }
  unint64_t v17 = v15;
  if (v16 == 1) {
  unint64_t v18 = v7;
  }
  if (v17 < v7)
  {
    uint64_t v20 = *((void *)&v131 + 1);
    uint64_t v19 = (llvm *)v131;
    uint64_t v21 = *((void *)a3 + 104);
    if (v21) {
      __int16 v22 = *(_WORD *)(v21 + 8);
    }
    else {
      __int16 v22 = 0;
    }
    uint64_t v25 = a3;
    uint64_t v26 = 199;
LABEL_28:
    uint64_t v13 = sub_1CD7F3564(v25, (const char *)v26, (uint64_t)&v129, v19, v20, (uint64_t)v13, (void *)v14, v22);
    unint64_t v14 = v14 & 0xFFFFFFFF00000000 | v29;
    goto LABEL_29;
  }
  long long v132 = *(_OWORD *)(v13[5] + 16 * v14);
  if ((_BYTE)v132) {
    uint64_t v23 = sub_1CB87E200((unsigned __int8 *)&v132);
  }
  else {
    uint64_t v23 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v132);
  }
  unint64_t v27 = v23;
  if (v24 == 1) {
  if (v27 > v18)
  }
  {
    uint64_t v20 = *((void *)&v131 + 1);
    uint64_t v19 = (llvm *)v131;
    uint64_t v28 = *((void *)a3 + 104);
    if (v28) {
      __int16 v22 = *(_WORD *)(v28 + 8);
    }
    else {
      __int16 v22 = 0;
    }
    uint64_t v25 = a3;
    uint64_t v26 = 201;
    goto LABEL_28;
  }
LABEL_29:
  long long v30 = v131;
  long long v32 = sub_1CD7EBF14((uint64_t)a3, v18, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), 0, 0);
  uint64_t v34 = *((void *)a3 + 104);
  if (v34) {
    LOWORD(v34) = *(_WORD *)(v34 + 8);
  }
  uint64_t v35 = sub_1CCFDED5C((uint64_t)a3, 57, (const llvm::APInt *)&v129, (llvm *)v30, *((uint64_t *)&v30 + 1), (uint64_t)v32, v31, v33, (uint64_t)v13, v14, v34);
  uint64_t v38 = *((void *)a3 + 104);
  if (v38) {
    LOWORD(v38) = *(_WORD *)(v38 + 8);
  }
  __int16 v39 = sub_1CCFDED5C((uint64_t)a3, 177, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), v10, v11, v37, (uint64_t)v35, v36, v38);
  uint64_t v121 = v40;
  long long v41 = v131;
  uint64_t v42 = sub_1CD7EBF14((uint64_t)a3, v18, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), 0, 0);
  uint64_t v45 = *((void *)a3 + 104);
  if (v45) {
    LOWORD(v45) = *(_WORD *)(v45 + 8);
  }
  __int16 v47 = sub_1CCFDED5C((uint64_t)a3, 57, (const llvm::APInt *)&v129, (llvm *)v41, *((uint64_t *)&v41 + 1), (uint64_t)v13, v14, v44, (uint64_t)v42, v43, v45);
  uint64_t v126 = v48;
  uint64_t v49 = *((void *)a3 + 104);
  if (v49) {
    LOWORD(v49) = *(_WORD *)(v49 + 8);
  }
  uint64_t v51 = sub_1CCFDED5C((uint64_t)a3, 175, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), v12, v127, v46, (uint64_t)v13, v14, v49);
  uint64_t v53 = v52;
  uint64_t v54 = *((void *)a3 + 104);
  if (v54) {
    LOWORD(v54) = *(_WORD *)(v54 + 8);
  }
  uint64_t v55 = sub_1CCFDED5C((uint64_t)a3, 175, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), v10, v11, v50, (uint64_t)v47, v126, v54);
  unsigned int v123 = v57;
  uint64_t v124 = (uint64_t)v55;
  uint64_t v58 = *((void *)a3 + 104);
  if (v58) {
    LOWORD(v58) = *(_WORD *)(v58 + 8);
  }
  uint64_t v59 = sub_1CCFDED5C((uint64_t)a3, 172, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), (uint64_t)v39, v121, v56, (uint64_t)v51, v53, v58);
  int v118 = v61;
  uint64_t v119 = (uint64_t)v59;
  uint64_t v62 = *((void *)a3 + 104);
  uint64_t v125 = (uint64_t)v47;
  if (v62) {
    LOWORD(v62) = *(_WORD *)(v62 + 8);
  }
  uint64_t v63 = sub_1CCFDED5C((uint64_t)a3, 175, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), v10, v11, v60, (uint64_t)v13, v14, v62);
  int v65 = v64;
  unsigned int v66 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), 0, 0);
  unsigned int v68 = v67;
  uint64_t v116 = (uint64_t)v13;
  int v69 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), 0, 0);
  int v114 = v14;
  unsigned int v120 = v11;
  uint64_t v122 = v10;
  int v71 = v70;
  uint64_t v72 = v66[5] + 16 * v68;
  uint64_t v74 = *(llvm **)v72;
  uint64_t v73 = *(void *)(v72 + 8);
  uint64_t v75 = sub_1CD7EE368(a3, 0x13u);
  uint64_t v117 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v129, v74, v73, v125, v126, v77, (uint64_t)v69, v71, (uint64_t)v66, v68, (uint64_t)v63, v65, v75, v76);
  int v115 = v78;
  unsigned int v79 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), 0, 0);
  LODWORD(v73) = v80;
  uint64_t v81 = *(void *)(v124 + 40) + 16 * v123;
  int v82 = *(llvm **)v81;
  uint64_t v83 = *(void *)(v81 + 8);
  uint64_t v84 = sub_1CD7EE368(a3, 0x13u);
  uint64_t v87 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v129, v82, v83, v125, v126, v86, (uint64_t)v79, v73, v124, v123, v119, v118, v84, v85);
  LODWORD(v73) = v88;
  uint64_t v89 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), 0, 0);
  LODWORD(v83) = v90;
  uint64_t v91 = *(void *)(v12 + 40) + 16 * v127;
  uint64_t v92 = *(llvm **)v91;
  uint64_t v93 = *(void *)(v91 + 8);
  uint64_t v94 = sub_1CD7EE368(a3, 0x11u);
  uint64_t v97 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v129, v92, v93, v116, v114, v96, (uint64_t)v89, v83, v12, v127, (uint64_t)v87, v73, v94, v95);
  int v128 = v98;
  uint64_t v99 = sub_1CD7EBF14((uint64_t)a3, 0, (const llvm::APInt *)&v129, (llvm *)v131, *((uint64_t *)&v131 + 1), 0, 0);
  LODWORD(v83) = v100;
  uint64_t v101 = *(void *)(v122 + 40) + 16 * v120;
  int v102 = *(llvm **)v101;
  uint64_t v103 = *(void *)(v101 + 8);
  uint64_t v104 = sub_1CD7EE368(a3, 0x11u);
  *(void *)&long long v132 = sub_1CD7F6564(a3, (const char *)0xC0, (const llvm::APInt *)&v129, v102, v103, v116, v114, v106, (uint64_t)v99, v83, v122, v120, (uint64_t)v117, v115, v104, v105);
  DWORD2(v132) = v107;
  uint64_t v133 = v97;
  int v134 = v128;
  int v108 = sub_1CD7F9858(a3, (uint64_t *)&v132, 2uLL, (const llvm::APInt *)&v129);
  if (v129)
  {
    int v109 = *v129;
    if ((v109 - 4) > 0x1E)
    {
      if ((v109 - 3) >= 0xFFFFFFFE) {
        int v111 = v129;
      }
      else {
        int v111 = 0;
      }
      if ((v109 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v112 = (unint64_t)(v111 + 8);
LABEL_53:
        *(void *)&long long v132 = &v129;
        sub_1CC5FA668(v112 + 16, &v132);
        return v108;
      }
      if (v109 == 3) {
        *((void *)v129 + 1) = 0;
      }
    }
    else if ((v129[1] & 0x7F) == 2 || *((_DWORD *)v129 + 3))
    {
      uint64_t v113 = *((void *)v129 + 2);
      if ((v113 & 4) != 0)
      {
        unint64_t v112 = v113 & 0xFFFFFFFFFFFFFFF8;
        if (v112) {
          goto LABEL_53;
        }
      }
    }
  }
  return v108;
}

uint64_t sub_1CB8E4F88(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 3)
  {
    LODWORD(v4) = a3;
    while (1)
    {
      if (!v4)
      {
        uint64_t result = sub_1CB8F1B54(a1, a2, 0);
        if (!result) {
          return result;
        }
      }
      int v6 = *(unsigned __int16 *)(a1 + 24);
      if (v6 == 36 || v6 == 12)
      {
        uint64_t v8 = *(void *)(a1 + 80);
        if (*(_UNKNOWN **)(v8 + 32) == &unk_1CFB2E344)
        {
          char v9 = *(unsigned char *)(*(void *)(v8 + 40) + 28);
          if ((v9 & 8) != 0) {
            goto LABEL_18;
          }
        }
        else
        {
          char v9 = *(unsigned char *)(v8 + 52);
          if ((v9 & 8) != 0) {
            goto LABEL_18;
          }
        }
        if ((v9 & 7) != 3)
        {
          if (!sub_1CB8456FC(v8 + 24)) {
            return 1;
          }
          int v6 = *(unsigned __int16 *)(a1 + 24);
        }
      }
LABEL_18:
      if (v6 == 141)
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v11 = (uint64_t *)(v13 + 80);
        uint64_t v12 = (uint64_t *)(v13 + 88);
        LODWORD(v4) = v4 + 1;
      }
      else
      {
        if (v6 != 96) {
          return 0;
        }
        uint64_t v4 = (v4 + 1);
        if (sub_1CB8E4F88(**(void **)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8), v4)) {
          return 1;
        }
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = (uint64_t *)(v10 + 40);
        uint64_t v12 = (uint64_t *)(v10 + 48);
      }
      a2 = *v12;
      a1 = *v11;
      if (v4 > 3) {
        return 0;
      }
    }
  }
  return 0;
}

llvm::raw_ostream *sub_1CB8E509C(llvm::raw_ostream *a1, char *__s)
{
  if (__s)
  {
    size_t v4 = strlen(__s);
    int v5 = (void *)*((void *)a1 + 4);
    if (v4 <= *((void *)a1 + 3) - (void)v5)
    {
      if (v4)
      {
        memcpy(v5, __s, v4);
        *((void *)a1 + 4) += v4;
      }
    }
    else
    {
      llvm::raw_ostream::write(a1, __s, v4);
    }
  }
  return a1;
}

unint64_t sub_1CB8E5DAC(llvm::LLVMContext *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  if (a5) {
    LOBYTE(ExtendedVectorVT) = sub_1CB882CA4(a2, a4);
  }
  else {
    LOBYTE(ExtendedVectorVT) = sub_1CB883124(a2, a4);
  }
  if ((_BYTE)ExtendedVectorVT)
  {
    unint64_t v11 = 0;
  }
  else
  {
    uint64_t ExtendedVectorVT = llvm::EVT::getExtendedVectorVT(a1, a2, a3, a4, a5);
    unint64_t v11 = ExtendedVectorVT & 0xFFFFFFFFFFFFFF00;
  }
  return v11 | ExtendedVectorVT;
}

void sub_1CB8E5EB0(llvm::MachineInstr *a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v10 = (unsigned __int8 *)*((void *)a1 + 7);
  uint64_t v45 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v45, v10, 2);
  }
  uint64_t v11 = *((void *)a1 + 4);
  uint64_t v13 = (const llvm::MachineOperand *)(v11 + 64);
  unsigned int v12 = *(_DWORD *)(v11 + 64);
  if ((_BYTE)v12)
  {
    int v42 = 0;
    uint64_t v14 = *(void *)(v11 + 112);
  }
  else
  {
    int v42 = ((v12 >> 26) & ~HIBYTE(v12) & 1) << 26;
    uint64_t v14 = *(void *)(v11 + 112);
    *(_DWORD *)(v11 + 64) = v12 & 0xFBFFFFFF;
  }
  unsigned int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a4, "", 0);
  *(void *)(a4[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v16 = a4[1];
  if (v16) {
    (*(void (**)(uint64_t, void))(*(void *)v16 + 24))(v16, IncompleteVirtualRegister);
  }
  uint64_t v44 = a3;
  unint64_t v17 = sub_1CB84B030(a2, (uint64_t)a1, &v45, *(void *)(a3 + 8) + 62928, IncompleteVirtualRegister);
  uint64_t v19 = v18;
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v46);
  llvm::MachineInstr::addOperand(v19, v17, v13);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = v14;
  llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v46);
  long long v46 = 0u;
  long long v47 = 0u;
  llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v46);
  if (!*(_DWORD *)v13) {
    *(_DWORD *)uint64_t v13 = *(_DWORD *)v13 & 0xFBFFFFFF | v42;
  }
  unsigned int v43 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a4, "", 0);
  *(void *)(a4[3] + 16 * (v43 & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v20 = a4[1];
  if (v20) {
    (*(void (**)(uint64_t, void))(*(void *)v20 + 24))(v20, v43);
  }
  uint64_t v21 = sub_1CB84B030(a2, (uint64_t)a1, &v45, *(void *)(v44 + 8) + 58416, v43);
  uint64_t v23 = v22;
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v22, v21, (const llvm::MachineOperand *)&v46);
  llvm::MachineInstr::addOperand(v23, v21, v13);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = v14 ^ 2;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v46);
  *((void *)&v46 + 1) = 0;
  long long v47 = 0uLL;
  LODWORD(v46) = 0;
  DWORD1(v46) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0x100003C00;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v46);
  long long v46 = 0u;
  long long v47 = 0u;
  llvm::MachineInstr::addOperand(v23, v21, (const llvm::MachineOperand *)&v46);
  unsigned int v24 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a4, "", 0);
  LODWORD(v13) = v24;
  *(void *)(a4[3] + 16 * (v24 & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v25 = a4[1];
  if (v25) {
    (*(void (**)(uint64_t, void))(*(void *)v25 + 24))(v25, v24);
  }
  uint64_t v26 = sub_1CB84B030(a2, (uint64_t)a1, &v45, *(void *)(v44 + 8) + 58320, v24);
  uint64_t v28 = v27;
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v46);
  *((void *)&v46 + 1) = 0;
  long long v47 = 0uLL;
  LODWORD(v46) = 0;
  DWORD1(v46) = v43;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v46);
  *((void *)&v46 + 1) = 0;
  long long v47 = 0uLL;
  LODWORD(v46) = 0;
  DWORD1(v46) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v46);
  *((void *)&v46 + 1) = 0;
  long long v47 = 0uLL;
  LODWORD(v46) = 0;
  DWORD1(v46) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v46);
  LODWORD(v46) = 1;
  *((void *)&v46 + 1) = 0;
  *(void *)&long long v47 = 0;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v46);
  long long v46 = 0u;
  long long v47 = 0u;
  llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v46);
  if ((a5 & 1) == 0)
  {
    uint64_t v13 = (const llvm::MachineOperand *)llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a4, "", 0);
    *(void *)(a4[3] + 16 * (v13 & 0x7FFFFFFF)) = &off_1E66A4340;
    uint64_t v29 = a4[1];
    if (v29) {
      (*(void (**)(uint64_t, const llvm::MachineOperand *))(*(void *)v29 + 24))(v29, v13);
    }
    long long v30 = sub_1CB84B030(a2, (uint64_t)a1, &v45, *(void *)(v44 + 8) + 231216, (int)v13);
    long long v32 = v31;
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 0;
    llvm::MachineInstr::addOperand(v31, v30, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 2143289344;
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v46);
    *((void *)&v46 + 1) = 0;
    long long v47 = 0uLL;
    LODWORD(v46) = 0;
    DWORD1(v46) = v24;
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 0;
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v46);
    *((void *)&v46 + 1) = 0;
    long long v47 = 0uLL;
    LODWORD(v46) = 0;
    DWORD1(v46) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 0;
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v46);
    long long v46 = 0u;
    long long v47 = 0u;
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v46);
    LODWORD(v46) = 1;
    *((void *)&v46 + 1) = 0;
    *(void *)&long long v47 = 0;
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v46);
    long long v46 = 0u;
    long long v47 = 0u;
    llvm::MachineInstr::addOperand(v32, v30, (const llvm::MachineOperand *)&v46);
  }
  uint64_t v33 = *(unsigned int *)(*((void *)a1 + 4) + 4);
  uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(*a4 + 16) + 176))(*(void *)(*a4 + 16));
  if ((v33 & 0x80000000) != 0) {
    uint64_t v35 = (uint64_t *)(a4[3] + 16 * (v33 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v35 = (uint64_t *)(a4[34] + 8 * v33);
  }
  uint64_t v36 = *v35;
  if (*v35)
  {
    do
    {
      uint64_t v37 = *(void *)(v36 + 24);
      if ((v13 - 1) <= 0x3FFFFFFE) {
        llvm::MachineOperand::substPhysReg((unsigned int *)v36, v13, v34);
      }
      else {
        llvm::MachineOperand::setReg(v36, v13);
      }
      uint64_t v36 = v37;
    }
    while (v37);
  }
  llvm::MachineInstr::eraseFromParent(a1);
  if (v45)
  {
    int v38 = *v45;
    if ((v38 - 4) > 0x1E)
    {
      if ((v38 - 3) >= 0xFFFFFFFE) {
        __int16 v39 = v45;
      }
      else {
        __int16 v39 = 0;
      }
      if ((v38 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v40 = (unint64_t)(v39 + 8);
LABEL_36:
        *(void *)&long long v46 = &v45;
        sub_1CC5FA668(v40 + 16, &v46);
        return;
      }
      if (v38 == 3) {
        *((void *)v45 + 1) = 0;
      }
    }
    else if ((v45[1] & 0x7F) == 2 || *((_DWORD *)v45 + 3))
    {
      uint64_t v41 = *((void *)v45 + 2);
      if ((v41 & 4) != 0)
      {
        unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFF8;
        if (v40) {
          goto LABEL_36;
        }
      }
    }
  }
}

void sub_1CB8E6604(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(a3, "", 0);
  uint64_t v10 = (void *)(*(void *)(a3 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF));
  if (a4)
  {
    *uint64_t v10 = &off_1E66A4180;
    uint64_t v11 = *(void *)(a3 + 8);
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
    }
    uint64_t v12 = *(void *)(a1 + 24);
    uint64_t v13 = *(void *)(a2 + 8) + 48192;
    if ((*(_WORD *)(a1 + 44) & 4) == 0)
    {
      uint64_t v14 = *(llvm::MachineFunction **)(v12 + 32);
      uint64_t v15 = *(unsigned __int8 **)(a1 + 56);
      v90[0] = v15;
      if (v15) {
        llvm::MetadataTracking::track((uint64_t)v90, v15, 2);
      }
      uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v14, v13, v90, 0);
      if (!v90[0]) {
        goto LABEL_8;
      }
      int v72 = *v90[0];
      if ((v72 - 4) > 0x1E)
      {
        if ((v72 - 3) >= 0xFFFFFFFE) {
          uint64_t v86 = v90[0];
        }
        else {
          uint64_t v86 = 0;
        }
        if ((v72 - 3) < 0xFFFFFFFE)
        {
          if (v72 == 3) {
            *((void *)v90[0] + 1) = 0;
          }
          goto LABEL_8;
        }
        unint64_t v74 = (unint64_t)(v86 + 8);
      }
      else
      {
        if ((v90[0][1] & 0x7F) != 2 && !*((_DWORD *)v90[0] + 3)) {
          goto LABEL_8;
        }
        uint64_t v73 = *((void *)v90[0] + 2);
        if ((v73 & 4) == 0) {
          goto LABEL_8;
        }
        unint64_t v74 = v73 & 0xFFFFFFFFFFFFFFF8;
        if (!v74) {
          goto LABEL_8;
        }
      }
      *(void *)&long long v92 = v90;
      sub_1CC5FA668(v74 + 16, &v92);
LABEL_8:
      uint64_t v17 = *(void *)(v12 + 40);
      *(void *)(MachineInstr + 24) = v17;
      uint64_t v18 = *(void *)(v17 + 32);
      uint64_t v19 = *(unsigned int *)(MachineInstr + 40);
      if (v19)
      {
        uint64_t v52 = *(void *)(MachineInstr + 32);
        uint64_t v53 = *(void *)(v18 + 40);
        uint64_t v54 = 32 * v19;
        do
        {
          if (!*(unsigned char *)v52)
          {
            uint64_t v55 = *(unsigned int *)(v52 + 4);
            if ((int)v55 >= 0) {
              uint64_t v56 = (uint64_t *)(*(void *)(v53 + 272) + 8 * v55);
            }
            else {
              uint64_t v56 = (uint64_t *)(*(void *)(v53 + 24) + 16 * (v55 & 0x7FFFFFFF) + 8);
            }
            uint64_t v57 = *v56;
            if (*v56)
            {
              uint64_t v58 = *(void *)(v57 + 16);
              *(void *)(v57 + 16) = v52;
              *(void *)(v52 + 16) = v58;
              if (*(unsigned char *)(v52 + 3))
              {
                *(void *)(v52 + 24) = v57;
              }
              else
              {
                *(void *)(v52 + 24) = 0;
                uint64_t v56 = (uint64_t *)(v58 + 24);
              }
            }
            else
            {
              *(void *)(v52 + 16) = v52;
              *(void *)(v52 + 24) = 0;
            }
            uint64_t *v56 = v52;
          }
          v52 += 32;
          v54 -= 32;
        }
        while (v54);
      }
      uint64_t v20 = *(void *)(v18 + 728);
      if (v20) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 24))(v20, MachineInstr);
      }
      unint64_t v21 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t MachineInstr = v21 | *(void *)MachineInstr & 7;
      *(void *)(MachineInstr + 8) = a1;
      *(void *)(v21 + 8) = MachineInstr;
      *(void *)a1 = *(void *)a1 & 7 | MachineInstr;
LABEL_29:
      *((void *)&v92 + 1) = 0;
      long long v93 = 0uLL;
      LODWORD(v92) = 0x1000000;
      DWORD1(v92) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
      LODWORD(v92) = 1;
      *((void *)&v92 + 1) = 0;
      *(void *)&long long v93 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)(v8 + 64));
      LODWORD(v92) = 1;
      *((void *)&v92 + 1) = 0;
      *(void *)&long long v93 = 2;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)(v8 + 64));
      LODWORD(v92) = 1;
      *((void *)&v92 + 1) = 0;
      *(void *)&long long v93 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)(v8 + 64));
      LODWORD(v92) = 1;
      *((void *)&v92 + 1) = 0;
      *(void *)&long long v93 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
      LODWORD(v92) = 1;
      *((void *)&v92 + 1) = 0;
      *(void *)&long long v93 = 0x100000000;
      goto LABEL_38;
    }
    uint64_t v14 = *(llvm::MachineFunction **)(v12 + 32);
    uint64_t v31 = *(unsigned __int8 **)(a1 + 56);
    v90[0] = v31;
    if (v31) {
      llvm::MetadataTracking::track((uint64_t)v90, v31, 2);
    }
    uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v14, v13, v90, 0);
    if (v90[0])
    {
      int v78 = *v90[0];
      if ((v78 - 4) > 0x1E)
      {
        if ((v78 - 3) >= 0xFFFFFFFE) {
          int v88 = v90[0];
        }
        else {
          int v88 = 0;
        }
        if ((v78 - 3) < 0xFFFFFFFE)
        {
          if (v78 == 3) {
            *((void *)v90[0] + 1) = 0;
          }
          goto LABEL_25;
        }
        unint64_t v80 = (unint64_t)(v88 + 8);
      }
      else
      {
        if ((v90[0][1] & 0x7F) != 2 && !*((_DWORD *)v90[0] + 3)) {
          goto LABEL_25;
        }
        uint64_t v79 = *((void *)v90[0] + 2);
        if ((v79 & 4) == 0) {
          goto LABEL_25;
        }
        unint64_t v80 = v79 & 0xFFFFFFFFFFFFFFF8;
        if (!v80) {
          goto LABEL_25;
        }
      }
      *(void *)&long long v92 = v90;
      sub_1CC5FA668(v80 + 16, &v92);
    }
LABEL_25:
    if (v12 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
      *(_WORD *)(MachineInstr + 44) |= 0xCu;
    }
    sub_1CC31973C((uint64_t *)(v12 + 40), (uint64_t *)a1, MachineInstr);
    goto LABEL_29;
  }
  *uint64_t v10 = &off_1E66A4340;
  uint64_t v22 = *(void *)(a3 + 8);
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a2 + 8) + 66336;
  if ((*(_WORD *)(a1 + 44) & 4) != 0)
  {
    uint64_t v14 = *(llvm::MachineFunction **)(v23 + 32);
    long long v32 = *(unsigned __int8 **)(a1 + 56);
    v90[0] = v32;
    if (v32) {
      llvm::MetadataTracking::track((uint64_t)v90, v32, 2);
    }
    uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v14, v24, v90, 0);
    if (!v90[0]) {
      goto LABEL_33;
    }
    int v81 = *v90[0];
    if ((v81 - 4) > 0x1E)
    {
      if ((v81 - 3) >= 0xFFFFFFFE) {
        uint64_t v89 = v90[0];
      }
      else {
        uint64_t v89 = 0;
      }
      if ((v81 - 3) < 0xFFFFFFFE)
      {
        if (v81 == 3) {
          *((void *)v90[0] + 1) = 0;
        }
        goto LABEL_33;
      }
      unint64_t v83 = (unint64_t)(v89 + 8);
    }
    else
    {
      if ((v90[0][1] & 0x7F) != 2 && !*((_DWORD *)v90[0] + 3)) {
        goto LABEL_33;
      }
      uint64_t v82 = *((void *)v90[0] + 2);
      if ((v82 & 4) == 0) {
        goto LABEL_33;
      }
      unint64_t v83 = v82 & 0xFFFFFFFFFFFFFFF8;
      if (!v83) {
        goto LABEL_33;
      }
    }
    *(void *)&long long v92 = v90;
    sub_1CC5FA668(v83 + 16, &v92);
LABEL_33:
    if (v23 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
      *(_WORD *)(MachineInstr + 44) |= 0xCu;
    }
    sub_1CC31973C((uint64_t *)(v23 + 40), (uint64_t *)a1, MachineInstr);
    goto LABEL_37;
  }
  uint64_t v14 = *(llvm::MachineFunction **)(v23 + 32);
  uint64_t v25 = *(unsigned __int8 **)(a1 + 56);
  v90[0] = v25;
  if (v25) {
    llvm::MetadataTracking::track((uint64_t)v90, v25, 2);
  }
  uint64_t MachineInstr = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v14, v24, v90, 0);
  if (!v90[0]) {
    goto LABEL_18;
  }
  int v75 = *v90[0];
  if ((v75 - 4) > 0x1E)
  {
    if ((v75 - 3) >= 0xFFFFFFFE) {
      uint64_t v87 = v90[0];
    }
    else {
      uint64_t v87 = 0;
    }
    if ((v75 - 3) < 0xFFFFFFFE)
    {
      if (v75 == 3) {
        *((void *)v90[0] + 1) = 0;
      }
      goto LABEL_18;
    }
    unint64_t v77 = (unint64_t)(v87 + 8);
  }
  else
  {
    if ((v90[0][1] & 0x7F) != 2 && !*((_DWORD *)v90[0] + 3)) {
      goto LABEL_18;
    }
    uint64_t v76 = *((void *)v90[0] + 2);
    if ((v76 & 4) == 0) {
      goto LABEL_18;
    }
    unint64_t v77 = v76 & 0xFFFFFFFFFFFFFFF8;
    if (!v77) {
      goto LABEL_18;
    }
  }
  *(void *)&long long v92 = v90;
  sub_1CC5FA668(v77 + 16, &v92);
LABEL_18:
  uint64_t v26 = *(void *)(v23 + 40);
  *(void *)(MachineInstr + 24) = v26;
  uint64_t v27 = *(void *)(v26 + 32);
  uint64_t v28 = *(unsigned int *)(MachineInstr + 40);
  if (v28)
  {
    uint64_t v59 = *(void *)(MachineInstr + 32);
    uint64_t v60 = *(void *)(v27 + 40);
    uint64_t v61 = 32 * v28;
    do
    {
      if (!*(unsigned char *)v59)
      {
        uint64_t v62 = *(unsigned int *)(v59 + 4);
        if ((int)v62 >= 0) {
          uint64_t v63 = (uint64_t *)(*(void *)(v60 + 272) + 8 * v62);
        }
        else {
          uint64_t v63 = (uint64_t *)(*(void *)(v60 + 24) + 16 * (v62 & 0x7FFFFFFF) + 8);
        }
        uint64_t v64 = *v63;
        if (*v63)
        {
          uint64_t v65 = *(void *)(v64 + 16);
          *(void *)(v64 + 16) = v59;
          *(void *)(v59 + 16) = v65;
          if (*(unsigned char *)(v59 + 3))
          {
            *(void *)(v59 + 24) = v64;
          }
          else
          {
            *(void *)(v59 + 24) = 0;
            uint64_t v63 = (uint64_t *)(v65 + 24);
          }
        }
        else
        {
          *(void *)(v59 + 16) = v59;
          *(void *)(v59 + 24) = 0;
        }
        uint64_t *v63 = v59;
      }
      v59 += 32;
      v61 -= 32;
    }
    while (v61);
  }
  uint64_t v29 = *(void *)(v27 + 728);
  if (v29) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 24))(v29, MachineInstr);
  }
  unint64_t v30 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t MachineInstr = v30 | *(void *)MachineInstr & 7;
  *(void *)(MachineInstr + 8) = a1;
  *(void *)(v30 + 8) = MachineInstr;
  *(void *)a1 = *(void *)a1 & 7 | MachineInstr;
LABEL_37:
  *((void *)&v92 + 1) = 0;
  long long v93 = 0uLL;
  LODWORD(v92) = 0x1000000;
  DWORD1(v92) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)(v8 + 64));
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 2;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)(v8 + 64));
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)(v8 + 64));
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
LABEL_38:
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
  long long v92 = 0u;
  long long v93 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
  long long v92 = 0u;
  long long v93 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)MachineInstr, v14, (const llvm::MachineOperand *)&v92);
  memset(&v90[1], 0, 24);
  LODWORD(v90[0]) = 0x4000000;
  HIDWORD(v90[0]) = IncompleteVirtualRegister;
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v34 = *(void *)(a2 + 8) + 48 * **(unsigned __int16 **)(a1 + 16);
  if ((*(_WORD *)(a1 + 44) & 4) == 0)
  {
    uint64_t v35 = *(llvm::MachineFunction **)(v33 + 32);
    uint64_t v36 = *(unsigned __int8 **)(a1 + 56);
    uint64_t v91 = v36;
    if (v36) {
      llvm::MetadataTracking::track((uint64_t)&v91, v36, 2);
    }
    uint64_t v37 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v35, v34, &v91, 0);
    if (!v91) {
      goto LABEL_42;
    }
    int v66 = *v91;
    if ((v66 - 4) > 0x1E)
    {
      if ((v66 - 3) >= 0xFFFFFFFE) {
        uint64_t v84 = v91;
      }
      else {
        uint64_t v84 = 0;
      }
      if ((v66 - 3) < 0xFFFFFFFE)
      {
        if (v66 == 3) {
          *((void *)v91 + 1) = 0;
        }
        goto LABEL_42;
      }
      unint64_t v68 = (unint64_t)(v84 + 8);
    }
    else
    {
      if ((v91[1] & 0x7F) != 2 && !*((_DWORD *)v91 + 3)) {
        goto LABEL_42;
      }
      uint64_t v67 = *((void *)v91 + 2);
      if ((v67 & 4) == 0) {
        goto LABEL_42;
      }
      unint64_t v68 = v67 & 0xFFFFFFFFFFFFFFF8;
      if (!v68) {
        goto LABEL_42;
      }
    }
    *(void *)&long long v92 = &v91;
    sub_1CC5FA668(v68 + 16, &v92);
LABEL_42:
    uint64_t v38 = *(void *)(v33 + 40);
    *(void *)(v37 + 24) = v38;
    uint64_t v39 = *(void *)(v38 + 32);
    uint64_t v40 = *(unsigned int *)(v37 + 40);
    if (v40)
    {
      uint64_t v45 = *(void *)(v37 + 32);
      uint64_t v46 = *(void *)(v39 + 40);
      uint64_t v47 = 32 * v40;
      do
      {
        if (!*(unsigned char *)v45)
        {
          uint64_t v48 = *(unsigned int *)(v45 + 4);
          if ((int)v48 >= 0) {
            uint64_t v49 = (uint64_t *)(*(void *)(v46 + 272) + 8 * v48);
          }
          else {
            uint64_t v49 = (uint64_t *)(*(void *)(v46 + 24) + 16 * (v48 & 0x7FFFFFFF) + 8);
          }
          uint64_t v50 = *v49;
          if (*v49)
          {
            uint64_t v51 = *(void *)(v50 + 16);
            *(void *)(v50 + 16) = v45;
            *(void *)(v45 + 16) = v51;
            if (*(unsigned char *)(v45 + 3))
            {
              *(void *)(v45 + 24) = v50;
            }
            else
            {
              *(void *)(v45 + 24) = 0;
              uint64_t v49 = (uint64_t *)(v51 + 24);
            }
          }
          else
          {
            *(void *)(v45 + 16) = v45;
            *(void *)(v45 + 24) = 0;
          }
          *uint64_t v49 = v45;
        }
        v45 += 32;
        v47 -= 32;
      }
      while (v47);
    }
    uint64_t v41 = *(void *)(v39 + 728);
    if (v41) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 24))(v41, v37);
    }
    unint64_t v42 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v37 = v42 | *(void *)v37 & 7;
    *(void *)(v37 + 8) = a1;
    *(void *)(v42 + 8) = v37;
    *(void *)a1 = *(void *)a1 & 7 | v37;
    goto LABEL_53;
  }
  uint64_t v35 = *(llvm::MachineFunction **)(v33 + 32);
  unsigned int v43 = *(unsigned __int8 **)(a1 + 56);
  uint64_t v91 = v43;
  if (v43) {
    llvm::MetadataTracking::track((uint64_t)&v91, v43, 2);
  }
  uint64_t v37 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v35, v34, &v91, 0);
  if (v91)
  {
    int v69 = *v91;
    if ((v69 - 4) > 0x1E)
    {
      if ((v69 - 3) >= 0xFFFFFFFE) {
        int v85 = v91;
      }
      else {
        int v85 = 0;
      }
      if ((v69 - 3) < 0xFFFFFFFE)
      {
        if (v69 == 3) {
          *((void *)v91 + 1) = 0;
        }
        goto LABEL_49;
      }
      unint64_t v71 = (unint64_t)(v85 + 8);
    }
    else
    {
      if ((v91[1] & 0x7F) != 2 && !*((_DWORD *)v91 + 3)) {
        goto LABEL_49;
      }
      uint64_t v70 = *((void *)v91 + 2);
      if ((v70 & 4) == 0) {
        goto LABEL_49;
      }
      unint64_t v71 = v70 & 0xFFFFFFFFFFFFFFF8;
      if (!v71) {
        goto LABEL_49;
      }
    }
    *(void *)&long long v92 = &v91;
    sub_1CC5FA668(v71 + 16, &v92);
  }
LABEL_49:
  if (v33 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
    *(_WORD *)(v37 + 44) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(v33 + 40), (uint64_t *)a1, v37);
LABEL_53:
  int v44 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  *((void *)&v92 + 1) = 0;
  long long v93 = 0uLL;
  LODWORD(v92) = 0x1000000;
  DWORD1(v92) = v44;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v92);
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v92);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)v90);
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v92);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)(v8 + 128));
  if (!*(unsigned char *)(v8 + 128))
  {
    LODWORD(v92) = 1;
    *((void *)&v92 + 1) = 0;
    *(void *)&long long v93 = 0;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v92);
  }
  LODWORD(v92) = 1;
  *((void *)&v92 + 1) = 0;
  *(void *)&long long v93 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v92);
  long long v92 = 0u;
  long long v93 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v35, (const llvm::MachineOperand *)&v92);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
}

void sub_1CB8E71B4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 24);
  int v9 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  if ((*(_WORD *)(a1 + 44) & 4) == 0)
  {
    uint64_t v10 = *(llvm::MachineFunction **)(v8 + 32);
    uint64_t v11 = *(unsigned __int8 **)(a1 + 56);
    uint64_t v65 = v11;
    if (v11) {
      llvm::MetadataTracking::track((uint64_t)&v65, v11, 2);
    }
    uint64_t v12 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v10, a2, &v65, 0);
    if (!v65) {
      goto LABEL_5;
    }
    int v47 = *v65;
    if ((v47 - 4) > 0x1E)
    {
      if ((v47 - 3) >= 0xFFFFFFFE) {
        uint64_t v59 = v65;
      }
      else {
        uint64_t v59 = 0;
      }
      if ((v47 - 3) < 0xFFFFFFFE)
      {
        if (v47 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_5;
      }
      unint64_t v49 = (unint64_t)(v59 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_5;
      }
      uint64_t v48 = *((void *)v65 + 2);
      if ((v48 & 4) == 0) {
        goto LABEL_5;
      }
      unint64_t v49 = v48 & 0xFFFFFFFFFFFFFFF8;
      if (!v49) {
        goto LABEL_5;
      }
    }
    *(void *)&long long v63 = &v65;
    sub_1CC5FA668(v49 + 16, &v63);
LABEL_5:
    uint64_t v13 = *(void *)(v8 + 40);
    *(void *)(v12 + 24) = v13;
    uint64_t v14 = *(void *)(v13 + 32);
    uint64_t v15 = *(unsigned int *)(v12 + 40);
    if (v15)
    {
      uint64_t v33 = *(void *)(v12 + 32);
      uint64_t v34 = *(void *)(v14 + 40);
      uint64_t v35 = 32 * v15;
      do
      {
        if (!*(unsigned char *)v33)
        {
          uint64_t v36 = *(unsigned int *)(v33 + 4);
          if ((int)v36 >= 0) {
            uint64_t v37 = (uint64_t *)(*(void *)(v34 + 272) + 8 * v36);
          }
          else {
            uint64_t v37 = (uint64_t *)(*(void *)(v34 + 24) + 16 * (v36 & 0x7FFFFFFF) + 8);
          }
          uint64_t v38 = *v37;
          if (*v37)
          {
            uint64_t v39 = *(void *)(v38 + 16);
            *(void *)(v38 + 16) = v33;
            *(void *)(v33 + 16) = v39;
            if (*(unsigned char *)(v33 + 3))
            {
              *(void *)(v33 + 24) = v38;
            }
            else
            {
              *(void *)(v33 + 24) = 0;
              uint64_t v37 = (uint64_t *)(v39 + 24);
            }
          }
          else
          {
            *(void *)(v33 + 16) = v33;
            *(void *)(v33 + 24) = 0;
          }
          *uint64_t v37 = v33;
        }
        v33 += 32;
        v35 -= 32;
      }
      while (v35);
    }
    uint64_t v16 = *(void *)(v14 + 728);
    if (v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 24))(v16, v12);
    }
    unint64_t v17 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v12 = v17 | *(void *)v12 & 7;
    *(void *)(v12 + 8) = a1;
    *(void *)(v17 + 8) = v12;
    *(void *)a1 = *(void *)a1 & 7 | v12;
    goto LABEL_16;
  }
  uint64_t v10 = *(llvm::MachineFunction **)(v8 + 32);
  uint64_t v18 = *(unsigned __int8 **)(a1 + 56);
  uint64_t v65 = v18;
  if (v18) {
    llvm::MetadataTracking::track((uint64_t)&v65, v18, 2);
  }
  uint64_t v12 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v10, a2, &v65, 0);
  if (v65)
  {
    int v50 = *v65;
    if ((v50 - 4) > 0x1E)
    {
      if ((v50 - 3) >= 0xFFFFFFFE) {
        uint64_t v60 = v65;
      }
      else {
        uint64_t v60 = 0;
      }
      if ((v50 - 3) < 0xFFFFFFFE)
      {
        if (v50 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_12;
      }
      unint64_t v52 = (unint64_t)(v60 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_12;
      }
      uint64_t v51 = *((void *)v65 + 2);
      if ((v51 & 4) == 0) {
        goto LABEL_12;
      }
      unint64_t v52 = v51 & 0xFFFFFFFFFFFFFFF8;
      if (!v52) {
        goto LABEL_12;
      }
    }
    *(void *)&long long v63 = &v65;
    sub_1CC5FA668(v52 + 16, &v63);
  }
LABEL_12:
  if (v8 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
    *(_WORD *)(v12 + 44) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(v8 + 40), (uint64_t *)a1, v12);
LABEL_16:
  *((void *)&v63 + 1) = 0;
  long long v64 = 0uLL;
  LODWORD(v63) = 0x1000000;
  DWORD1(v63) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v63);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 32));
  int v19 = *(_DWORD *)(*(void *)(a1 + 32) + 68);
  *((void *)&v63 + 1) = 0;
  long long v64 = 0uLL;
  LODWORD(v63) = 0;
  DWORD1(v63) = v19;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v63);
  uint64_t v20 = *(void *)(*(void *)(a1 + 32) + 112);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = v20;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v63);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v63);
  long long v63 = 0u;
  long long v64 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v63);
  long long v64 = 0uLL;
  long long v63 = 0x203000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, v10, (const llvm::MachineOperand *)&v63);
  uint64_t v21 = *(void *)(a1 + 24);
  if ((*(_WORD *)(a1 + 44) & 4) == 0)
  {
    uint64_t v22 = *(llvm::MachineFunction **)(v21 + 32);
    uint64_t v23 = *(unsigned __int8 **)(a1 + 56);
    uint64_t v65 = v23;
    if (v23) {
      llvm::MetadataTracking::track((uint64_t)&v65, v23, 2);
    }
    uint64_t v24 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v22, a3, &v65, 0);
    if (!v65) {
      goto LABEL_20;
    }
    int v53 = *v65;
    if ((v53 - 4) > 0x1E)
    {
      if ((v53 - 3) >= 0xFFFFFFFE) {
        uint64_t v61 = v65;
      }
      else {
        uint64_t v61 = 0;
      }
      if ((v53 - 3) < 0xFFFFFFFE)
      {
        if (v53 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_20;
      }
      unint64_t v55 = (unint64_t)(v61 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_20;
      }
      uint64_t v54 = *((void *)v65 + 2);
      if ((v54 & 4) == 0) {
        goto LABEL_20;
      }
      unint64_t v55 = v54 & 0xFFFFFFFFFFFFFFF8;
      if (!v55) {
        goto LABEL_20;
      }
    }
    *(void *)&long long v63 = &v65;
    sub_1CC5FA668(v55 + 16, &v63);
LABEL_20:
    uint64_t v25 = *(void *)(v21 + 40);
    *(void *)(v24 + 24) = v25;
    uint64_t v26 = *(void *)(v25 + 32);
    uint64_t v27 = *(unsigned int *)(v24 + 40);
    if (v27)
    {
      uint64_t v40 = *(void *)(v24 + 32);
      uint64_t v41 = *(void *)(v26 + 40);
      uint64_t v42 = 32 * v27;
      do
      {
        if (!*(unsigned char *)v40)
        {
          uint64_t v43 = *(unsigned int *)(v40 + 4);
          if ((int)v43 >= 0) {
            int v44 = (uint64_t *)(*(void *)(v41 + 272) + 8 * v43);
          }
          else {
            int v44 = (uint64_t *)(*(void *)(v41 + 24) + 16 * (v43 & 0x7FFFFFFF) + 8);
          }
          uint64_t v45 = *v44;
          if (*v44)
          {
            uint64_t v46 = *(void *)(v45 + 16);
            *(void *)(v45 + 16) = v40;
            *(void *)(v40 + 16) = v46;
            if (*(unsigned char *)(v40 + 3))
            {
              *(void *)(v40 + 24) = v45;
            }
            else
            {
              *(void *)(v40 + 24) = 0;
              int v44 = (uint64_t *)(v46 + 24);
            }
          }
          else
          {
            *(void *)(v40 + 16) = v40;
            *(void *)(v40 + 24) = 0;
          }
          uint64_t *v44 = v40;
        }
        v40 += 32;
        v42 -= 32;
      }
      while (v42);
    }
    uint64_t v28 = *(void *)(v26 + 728);
    if (v28) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v28 + 24))(v28, v24);
    }
    unint64_t v29 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v24 = v29 | *(void *)v24 & 7;
    *(void *)(v24 + 8) = a1;
    *(void *)(v29 + 8) = v24;
    *(void *)a1 = *(void *)a1 & 7 | v24;
    goto LABEL_31;
  }
  uint64_t v22 = *(llvm::MachineFunction **)(v21 + 32);
  unint64_t v30 = *(unsigned __int8 **)(a1 + 56);
  uint64_t v65 = v30;
  if (v30) {
    llvm::MetadataTracking::track((uint64_t)&v65, v30, 2);
  }
  uint64_t v24 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v22, a3, &v65, 0);
  if (v65)
  {
    int v56 = *v65;
    if ((v56 - 4) > 0x1E)
    {
      if ((v56 - 3) >= 0xFFFFFFFE) {
        uint64_t v62 = v65;
      }
      else {
        uint64_t v62 = 0;
      }
      if ((v56 - 3) < 0xFFFFFFFE)
      {
        if (v56 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_27;
      }
      unint64_t v58 = (unint64_t)(v62 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_27;
      }
      uint64_t v57 = *((void *)v65 + 2);
      if ((v57 & 4) == 0) {
        goto LABEL_27;
      }
      unint64_t v58 = v57 & 0xFFFFFFFFFFFFFFF8;
      if (!v58) {
        goto LABEL_27;
      }
    }
    *(void *)&long long v63 = &v65;
    sub_1CC5FA668(v58 + 16, &v63);
  }
LABEL_27:
  if (v21 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
    *(_WORD *)(v24 + 44) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(v21 + 40), (uint64_t *)a1, v24);
LABEL_31:
  *((void *)&v63 + 1) = 0;
  long long v64 = 0uLL;
  LODWORD(v63) = 0x1000000;
  DWORD1(v63) = v9;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v63);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 32));
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 64));
  uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 112);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = v31;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v63);
  *((void *)&v63 + 1) = 0;
  long long v64 = 0uLL;
  LODWORD(v63) = 0x4000000;
  DWORD1(v63) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v63);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v63);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v63);
  long long v64 = 0uLL;
  long long v63 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v63);
  *((void *)&v63 + 1) = 0;
  long long v64 = 0uLL;
  LODWORD(v63) = 0x2000000;
  DWORD1(v63) = a4;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v24, v22, (const llvm::MachineOperand *)&v63);
  long long v32 = *(unsigned int **)(v24 + 32);
  v32[64] = v32[64] & 0xFF0FFFFF | 0x100000;
  *long long v32 = *v32 & 0xFF0FFFFF | 0x900000;
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
}

void sub_1CB8E7940(uint64_t a1, unsigned int a2, unsigned int a3, void *a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 32);
  int v11 = *(_DWORD *)(v10 + 112);
  if (*(unsigned __int8 *)(v10 + 64) | v11 & 2) {
    goto LABEL_13;
  }
  uint64_t v10 = *(unsigned int *)(v10 + 68);
  if ((v10 & 0x80000000) != 0) {
    uint64_t v12 = (uint64_t *)(a4[3] + 16 * (v10 & 0x7FFFFFFF) + 8);
  }
  else {
LABEL_189:
  }
    uint64_t v12 = (uint64_t *)(a4[34] + 8 * v10);
  if ((uint64_t v10 = *v12) == 0
    || (*(unsigned char *)(v10 + 3) & 1) == 0 && ((uint64_t v10 = *(void *)(v10 + 24)) == 0 || (*(unsigned char *)(v10 + 3) & 1) == 0)
    || (uint64_t v13 = *(void *)(v10 + 8)) == 0)
  {
LABEL_13:
    switch(v11 & 6)
    {
      case 1:
      case 3:
      case 5:
        __break(1u);
        goto LABEL_189;
      case 2:
        int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a4, "", 0);
        int v15 = IncompleteVirtualRegister;
        if (a3) {
          uint64_t v42 = 0x10000F800;
        }
        else {
          uint64_t v42 = 4286578688;
        }
        uint64_t v43 = &off_1E66A4340;
        if (a3) {
          uint64_t v43 = &off_1E66A4180;
        }
        *(void *)(a4[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v43;
        uint64_t v44 = a4[1];
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 24))(v44);
        }
        uint64_t v45 = *(void *)(a1 + 24);
        uint64_t v46 = a2;
        uint64_t v47 = a3;
        uint64_t v48 = *(void *)(a5 + 8) + 48 * dword_1CD935FC0[2 * a2 + a3];
        if ((*(_WORD *)(a1 + 44) & 4) == 0)
        {
          unint64_t v49 = *(llvm::MachineFunction **)(v45 + 32);
          int v50 = *(unsigned __int8 **)(a1 + 56);
          uint64_t v166 = v50;
          if (v50) {
            llvm::MetadataTracking::track((uint64_t)&v166, v50, 2);
          }
          uint64_t v51 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v49, v48, &v166, 0);
          if (!v166) {
            goto LABEL_48;
          }
          int v130 = *v166;
          if ((v130 - 4) > 0x1E)
          {
            if ((v130 - 3) >= 0xFFFFFFFE) {
              uint64_t v156 = v166;
            }
            else {
              uint64_t v156 = 0;
            }
            if ((v130 - 3) < 0xFFFFFFFE)
            {
              if (v130 == 3) {
                *((void *)v166 + 1) = 0;
              }
              goto LABEL_48;
            }
            unint64_t v132 = (unint64_t)(v156 + 8);
          }
          else
          {
            if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
              goto LABEL_48;
            }
            uint64_t v131 = *((void *)v166 + 2);
            if ((v131 & 4) == 0) {
              goto LABEL_48;
            }
            unint64_t v132 = v131 & 0xFFFFFFFFFFFFFFF8;
            if (!v132) {
              goto LABEL_48;
            }
          }
          *(void *)&long long v164 = &v166;
          sub_1CC5FA668(v132 + 16, &v164);
LABEL_48:
          uint64_t v52 = *(void *)(v45 + 40);
          *(void *)(v51 + 24) = v52;
          uint64_t v53 = *(void *)(v52 + 32);
          uint64_t v54 = *(unsigned int *)(v51 + 40);
          if (v54)
          {
            uint64_t v110 = *(void *)(v51 + 32);
            uint64_t v111 = *(void *)(v53 + 40);
            uint64_t v112 = 32 * v54;
            do
            {
              if (!*(unsigned char *)v110)
              {
                uint64_t v113 = *(unsigned int *)(v110 + 4);
                if ((int)v113 >= 0) {
                  int v114 = (uint64_t *)(*(void *)(v111 + 272) + 8 * v113);
                }
                else {
                  int v114 = (uint64_t *)(*(void *)(v111 + 24) + 16 * (v113 & 0x7FFFFFFF) + 8);
                }
                uint64_t v115 = *v114;
                if (*v114)
                {
                  uint64_t v116 = *(void *)(v115 + 16);
                  *(void *)(v115 + 16) = v110;
                  *(void *)(v110 + 16) = v116;
                  if (*(unsigned char *)(v110 + 3))
                  {
                    *(void *)(v110 + 24) = v115;
                  }
                  else
                  {
                    *(void *)(v110 + 24) = 0;
                    int v114 = (uint64_t *)(v116 + 24);
                  }
                }
                else
                {
                  *(void *)(v110 + 16) = v110;
                  *(void *)(v110 + 24) = 0;
                }
                *int v114 = v110;
              }
              v110 += 32;
              v112 -= 32;
            }
            while (v112);
          }
          uint64_t v55 = *(void *)(v53 + 728);
          if (v55) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v55 + 24))(v55, v51);
          }
          unint64_t v56 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v51 = v56 | *(void *)v51 & 7;
          *(void *)(v51 + 8) = a1;
          *(void *)(v56 + 8) = v51;
          *(void *)a1 = *(void *)a1 & 7 | v51;
          goto LABEL_99;
        }
        unint64_t v49 = *(llvm::MachineFunction **)(v45 + 32);
        uint64_t v76 = *(unsigned __int8 **)(a1 + 56);
        uint64_t v166 = v76;
        if (v76) {
          llvm::MetadataTracking::track((uint64_t)&v166, v76, 2);
        }
        uint64_t v51 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v49, v48, &v166, 0);
        if (!v166) {
          goto LABEL_95;
        }
        int v145 = *v166;
        if ((v145 - 4) > 0x1E)
        {
          if ((v145 - 3) >= 0xFFFFFFFE) {
            int v161 = v166;
          }
          else {
            int v161 = 0;
          }
          if ((v145 - 3) < 0xFFFFFFFE)
          {
            if (v145 == 3) {
              *((void *)v166 + 1) = 0;
            }
            goto LABEL_95;
          }
          unint64_t v147 = (unint64_t)(v161 + 8);
        }
        else
        {
          if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
            goto LABEL_95;
          }
          uint64_t v146 = *((void *)v166 + 2);
          if ((v146 & 4) == 0) {
            goto LABEL_95;
          }
          unint64_t v147 = v146 & 0xFFFFFFFFFFFFFFF8;
          if (!v147) {
            goto LABEL_95;
          }
        }
        *(void *)&long long v164 = &v166;
        sub_1CC5FA668(v147 + 16, &v164);
LABEL_95:
        if (v45 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
          *(_WORD *)(v51 + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)(v45 + 40), (uint64_t *)a1, v51);
LABEL_99:
        *((void *)&v164 + 1) = 0;
        long long v165 = 0uLL;
        LODWORD(v164) = 0x1000000;
        DWORD1(v164) = v15;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0x100000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v164);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 64));
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = v42;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v164);
        long long v165 = 0uLL;
        long long v164 = 0x201000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v164);
        long long v164 = 0u;
        long long v165 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v164);
        uint64_t v77 = *(void *)(v51 + 32);
        if (!*(_DWORD *)(v77 + 96)) {
          *(_DWORD *)(v77 + 96) &= ~0x4000000u;
        }
        uint64_t v78 = *(void *)(a1 + 24);
        uint64_t v79 = *(void *)(a5 + 8) + 48 * dword_1CD935FD0[2 * v46 + v47];
        if ((*(_WORD *)(a1 + 44) & 4) == 0)
        {
          int v66 = *(llvm::MachineFunction **)(v78 + 32);
          unint64_t v80 = *(unsigned __int8 **)(a1 + 56);
          uint64_t v166 = v80;
          if (v80) {
            llvm::MetadataTracking::track((uint64_t)&v166, v80, 2);
          }
          uint64_t v68 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v66, v79, &v166, 0);
          if (!v166) {
            goto LABEL_105;
          }
          int v148 = *v166;
          if ((v148 - 4) > 0x1E)
          {
            if ((v148 - 3) >= 0xFFFFFFFE) {
              uint64_t v162 = v166;
            }
            else {
              uint64_t v162 = 0;
            }
            if ((v148 - 3) < 0xFFFFFFFE)
            {
              if (v148 == 3) {
                *((void *)v166 + 1) = 0;
              }
              goto LABEL_105;
            }
            unint64_t v150 = (unint64_t)(v162 + 8);
          }
          else
          {
            if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
              goto LABEL_105;
            }
            uint64_t v149 = *((void *)v166 + 2);
            if ((v149 & 4) == 0) {
              goto LABEL_105;
            }
            unint64_t v150 = v149 & 0xFFFFFFFFFFFFFFF8;
            if (!v150) {
              goto LABEL_105;
            }
          }
          *(void *)&long long v164 = &v166;
          sub_1CC5FA668(v150 + 16, &v164);
LABEL_105:
          uint64_t v81 = *(void *)(v78 + 40);
          *(void *)(v68 + 24) = v81;
          uint64_t v82 = *(void *)(v81 + 32);
          uint64_t v83 = *(unsigned int *)(v68 + 40);
          if (v83)
          {
            uint64_t v117 = *(void *)(v68 + 32);
            uint64_t v118 = *(void *)(v82 + 40);
            uint64_t v119 = 32 * v83;
            do
            {
              if (!*(unsigned char *)v117)
              {
                uint64_t v120 = *(unsigned int *)(v117 + 4);
                if ((int)v120 >= 0) {
                  uint64_t v121 = (uint64_t *)(*(void *)(v118 + 272) + 8 * v120);
                }
                else {
                  uint64_t v121 = (uint64_t *)(*(void *)(v118 + 24) + 16 * (v120 & 0x7FFFFFFF) + 8);
                }
                uint64_t v122 = *v121;
                if (*v121)
                {
                  uint64_t v123 = *(void *)(v122 + 16);
                  *(void *)(v122 + 16) = v117;
                  *(void *)(v117 + 16) = v123;
                  if (*(unsigned char *)(v117 + 3))
                  {
                    *(void *)(v117 + 24) = v122;
                  }
                  else
                  {
                    *(void *)(v117 + 24) = 0;
                    uint64_t v121 = (uint64_t *)(v123 + 24);
                  }
                }
                else
                {
                  *(void *)(v117 + 16) = v117;
                  *(void *)(v117 + 24) = 0;
                }
                uint64_t *v121 = v117;
              }
              v117 += 32;
              v119 -= 32;
            }
            while (v119);
          }
          uint64_t v84 = *(void *)(v82 + 728);
          if (v84) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v84 + 24))(v84, v68);
          }
          unint64_t v85 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v68 = v85 | *(void *)v68 & 7;
          *(void *)(v68 + 8) = a1;
          *(void *)(v85 + 8) = v68;
          *(void *)a1 = *(void *)a1 & 7 | v68;
LABEL_116:
          int v87 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
          *((void *)&v164 + 1) = 0;
          long long v165 = 0uLL;
          LODWORD(v164) = 0x1000000;
          DWORD1(v164) = v87;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v164);
          LODWORD(v164) = 1;
          *((void *)&v164 + 1) = 0;
          *(void *)&long long v165 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v164);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 64));
          LODWORD(v164) = 1;
          *((void *)&v164 + 1) = 0;
          *(void *)&long long v165 = 2;
          goto LABEL_117;
        }
        int v66 = *(llvm::MachineFunction **)(v78 + 32);
        uint64_t v86 = *(unsigned __int8 **)(a1 + 56);
        uint64_t v166 = v86;
        if (v86) {
          llvm::MetadataTracking::track((uint64_t)&v166, v86, 2);
        }
        uint64_t v68 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v66, v79, &v166, 0);
        if (v166)
        {
          int v151 = *v166;
          if ((v151 - 4) > 0x1E)
          {
            if ((v151 - 3) >= 0xFFFFFFFE) {
              int v163 = v166;
            }
            else {
              int v163 = 0;
            }
            if ((v151 - 3) < 0xFFFFFFFE)
            {
              if (v151 == 3) {
                *((void *)v166 + 1) = 0;
              }
              goto LABEL_112;
            }
            unint64_t v153 = (unint64_t)(v163 + 8);
          }
          else
          {
            if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
              goto LABEL_112;
            }
            uint64_t v152 = *((void *)v166 + 2);
            if ((v152 & 4) == 0) {
              goto LABEL_112;
            }
            unint64_t v153 = v152 & 0xFFFFFFFFFFFFFFF8;
            if (!v153) {
              goto LABEL_112;
            }
          }
          *(void *)&long long v164 = &v166;
          sub_1CC5FA668(v153 + 16, &v164);
        }
LABEL_112:
        if (v78 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
          *(_WORD *)(v68 + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)(v78 + 40), (uint64_t *)a1, v68);
        goto LABEL_116;
      case 4:
        return;
      case 6:
        uint64_t v31 = *(void *)(a1 + 24);
        uint64_t v32 = *(void *)(a5 + 8) + 48 * dword_1CD935FE0[2 * a2 + a3];
        if ((*(_WORD *)(a1 + 44) & 4) == 0)
        {
          uint64_t v33 = *(llvm::MachineFunction **)(v31 + 32);
          uint64_t v34 = *(unsigned __int8 **)(a1 + 56);
          uint64_t v166 = v34;
          if (v34) {
            llvm::MetadataTracking::track((uint64_t)&v166, v34, 2);
          }
          uint64_t v35 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v33, v32, &v166, 0);
          if (!v166) {
            goto LABEL_33;
          }
          int v127 = *v166;
          if ((v127 - 4) > 0x1E)
          {
            if ((v127 - 3) >= 0xFFFFFFFE) {
              uint64_t v155 = v166;
            }
            else {
              uint64_t v155 = 0;
            }
            if ((v127 - 3) < 0xFFFFFFFE)
            {
              if (v127 == 3) {
                *((void *)v166 + 1) = 0;
              }
              goto LABEL_33;
            }
            unint64_t v129 = (unint64_t)(v155 + 8);
          }
          else
          {
            if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
              goto LABEL_33;
            }
            uint64_t v128 = *((void *)v166 + 2);
            if ((v128 & 4) == 0) {
              goto LABEL_33;
            }
            unint64_t v129 = v128 & 0xFFFFFFFFFFFFFFF8;
            if (!v129) {
              goto LABEL_33;
            }
          }
          *(void *)&long long v164 = &v166;
          sub_1CC5FA668(v129 + 16, &v164);
LABEL_33:
          uint64_t v36 = *(void *)(v31 + 40);
          *(void *)(v35 + 24) = v36;
          uint64_t v37 = *(void *)(v36 + 32);
          uint64_t v38 = *(unsigned int *)(v35 + 40);
          if (v38)
          {
            uint64_t v89 = *(void *)(v35 + 32);
            uint64_t v90 = *(void *)(v37 + 40);
            uint64_t v91 = 32 * v38;
            do
            {
              if (!*(unsigned char *)v89)
              {
                uint64_t v92 = *(unsigned int *)(v89 + 4);
                if ((int)v92 >= 0) {
                  long long v93 = (uint64_t *)(*(void *)(v90 + 272) + 8 * v92);
                }
                else {
                  long long v93 = (uint64_t *)(*(void *)(v90 + 24) + 16 * (v92 & 0x7FFFFFFF) + 8);
                }
                uint64_t v94 = *v93;
                if (*v93)
                {
                  uint64_t v95 = *(void *)(v94 + 16);
                  *(void *)(v94 + 16) = v89;
                  *(void *)(v89 + 16) = v95;
                  if (*(unsigned char *)(v89 + 3))
                  {
                    *(void *)(v89 + 24) = v94;
                  }
                  else
                  {
                    *(void *)(v89 + 24) = 0;
                    long long v93 = (uint64_t *)(v95 + 24);
                  }
                }
                else
                {
                  *(void *)(v89 + 16) = v89;
                  *(void *)(v89 + 24) = 0;
                }
                *long long v93 = v89;
              }
              v89 += 32;
              v91 -= 32;
            }
            while (v91);
          }
          uint64_t v39 = *(void *)(v37 + 728);
          if (v39) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 24))(v39, v35);
          }
          unint64_t v40 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v35 = v40 | *(void *)v35 & 7;
          *(void *)(v35 + 8) = a1;
          *(void *)(v40 + 8) = v35;
          *(void *)a1 = *(void *)a1 & 7 | v35;
          goto LABEL_59;
        }
        uint64_t v33 = *(llvm::MachineFunction **)(v31 + 32);
        uint64_t v57 = *(unsigned __int8 **)(a1 + 56);
        uint64_t v166 = v57;
        if (v57) {
          llvm::MetadataTracking::track((uint64_t)&v166, v57, 2);
        }
        uint64_t v35 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v33, v32, &v166, 0);
        if (!v166) {
          goto LABEL_55;
        }
        int v133 = *v166;
        if ((v133 - 4) > 0x1E)
        {
          if ((v133 - 3) >= 0xFFFFFFFE) {
            unsigned int v157 = v166;
          }
          else {
            unsigned int v157 = 0;
          }
          if ((v133 - 3) >= 0xFFFFFFFE)
          {
            unint64_t v135 = (unint64_t)(v157 + 8);
LABEL_273:
            *(void *)&long long v164 = &v166;
            sub_1CC5FA668(v135 + 16, &v164);
            goto LABEL_55;
          }
          if (v133 == 3) {
            *((void *)v166 + 1) = 0;
          }
        }
        else if ((v166[1] & 0x7F) == 2 || *((_DWORD *)v166 + 3))
        {
          uint64_t v134 = *((void *)v166 + 2);
          if ((v134 & 4) != 0)
          {
            unint64_t v135 = v134 & 0xFFFFFFFFFFFFFFF8;
            if (v135) {
              goto LABEL_273;
            }
          }
        }
LABEL_55:
        if (v31 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
          *(_WORD *)(v35 + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)(v31 + 40), (uint64_t *)a1, v35);
LABEL_59:
        int v58 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
        *((void *)&v164 + 1) = 0;
        long long v165 = 0uLL;
        LODWORD(v164) = 0x1000000;
        DWORD1(v164) = v58;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v164);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 64));
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 6;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v164);
        uint64_t v59 = 0x10000FC00;
        LODWORD(v164) = 1;
        if (!a3) {
          uint64_t v59 = 4286578688;
        }
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = v59;
        if (a3) {
          uint64_t v60 = 0x100007E00;
        }
        else {
          uint64_t v60 = 2143289344;
        }
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = v60;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v164);
        long long v164 = 0u;
        long long v165 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v164);
        long long v164 = 0u;
        long long v165 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v35, v33, (const llvm::MachineOperand *)&v164);
        goto LABEL_118;
      default:
        int v14 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)a4, "", 0);
        int v15 = v14;
        if (a3) {
          uint64_t v16 = 0x10000F800;
        }
        else {
          uint64_t v16 = 4286578688;
        }
        unint64_t v17 = &off_1E66A4340;
        if (a3) {
          unint64_t v17 = &off_1E66A4180;
        }
        *(void *)(a4[3] + 16 * (v14 & 0x7FFFFFFF)) = v17;
        uint64_t v18 = a4[1];
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 24))(v18);
        }
        uint64_t v19 = *(void *)(a1 + 24);
        uint64_t v20 = a2;
        uint64_t v21 = a3;
        uint64_t v22 = *(void *)(a5 + 8) + 48 * dword_1CD935FB0[2 * a2 + a3];
        if ((*(_WORD *)(a1 + 44) & 4) == 0)
        {
          uint64_t v23 = *(llvm::MachineFunction **)(v19 + 32);
          uint64_t v24 = *(unsigned __int8 **)(a1 + 56);
          uint64_t v166 = v24;
          if (v24) {
            llvm::MetadataTracking::track((uint64_t)&v166, v24, 2);
          }
          uint64_t v25 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v23, v22, &v166, 0);
          if (!v166) {
            goto LABEL_25;
          }
          int v124 = *v166;
          if ((v124 - 4) > 0x1E)
          {
            if ((v124 - 3) >= 0xFFFFFFFE) {
              unsigned int v154 = v166;
            }
            else {
              unsigned int v154 = 0;
            }
            if ((v124 - 3) < 0xFFFFFFFE)
            {
              if (v124 == 3) {
                *((void *)v166 + 1) = 0;
              }
              goto LABEL_25;
            }
            unint64_t v126 = (unint64_t)(v154 + 8);
          }
          else
          {
            if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
              goto LABEL_25;
            }
            uint64_t v125 = *((void *)v166 + 2);
            if ((v125 & 4) == 0) {
              goto LABEL_25;
            }
            unint64_t v126 = v125 & 0xFFFFFFFFFFFFFFF8;
            if (!v126) {
              goto LABEL_25;
            }
          }
          *(void *)&long long v164 = &v166;
          sub_1CC5FA668(v126 + 16, &v164);
LABEL_25:
          uint64_t v26 = *(void *)(v19 + 40);
          *(void *)(v25 + 24) = v26;
          uint64_t v27 = *(void *)(v26 + 32);
          uint64_t v28 = *(unsigned int *)(v25 + 40);
          if (v28)
          {
            uint64_t v96 = *(void *)(v25 + 32);
            uint64_t v97 = *(void *)(v27 + 40);
            uint64_t v98 = 32 * v28;
            do
            {
              if (!*(unsigned char *)v96)
              {
                uint64_t v99 = *(unsigned int *)(v96 + 4);
                if ((int)v99 >= 0) {
                  int v100 = (uint64_t *)(*(void *)(v97 + 272) + 8 * v99);
                }
                else {
                  int v100 = (uint64_t *)(*(void *)(v97 + 24) + 16 * (v99 & 0x7FFFFFFF) + 8);
                }
                uint64_t v101 = *v100;
                if (*v100)
                {
                  uint64_t v102 = *(void *)(v101 + 16);
                  *(void *)(v101 + 16) = v96;
                  *(void *)(v96 + 16) = v102;
                  if (*(unsigned char *)(v96 + 3))
                  {
                    *(void *)(v96 + 24) = v101;
                  }
                  else
                  {
                    *(void *)(v96 + 24) = 0;
                    int v100 = (uint64_t *)(v102 + 24);
                  }
                }
                else
                {
                  *(void *)(v96 + 16) = v96;
                  *(void *)(v96 + 24) = 0;
                }
                uint64_t *v100 = v96;
              }
              v96 += 32;
              v98 -= 32;
            }
            while (v98);
          }
          uint64_t v29 = *(void *)(v27 + 728);
          if (v29) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 24))(v29, v25);
          }
          unint64_t v30 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v25 = v30 | *(void *)v25 & 7;
          *(void *)(v25 + 8) = a1;
          *(void *)(v30 + 8) = v25;
          *(void *)a1 = *(void *)a1 & 7 | v25;
          goto LABEL_72;
        }
        uint64_t v23 = *(llvm::MachineFunction **)(v19 + 32);
        uint64_t v61 = *(unsigned __int8 **)(a1 + 56);
        uint64_t v166 = v61;
        if (v61) {
          llvm::MetadataTracking::track((uint64_t)&v166, v61, 2);
        }
        uint64_t v25 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v23, v22, &v166, 0);
        if (!v166) {
          goto LABEL_68;
        }
        int v136 = *v166;
        if ((v136 - 4) > 0x1E)
        {
          if ((v136 - 3) >= 0xFFFFFFFE) {
            BOOL v158 = v166;
          }
          else {
            BOOL v158 = 0;
          }
          if ((v136 - 3) < 0xFFFFFFFE)
          {
            if (v136 == 3) {
              *((void *)v166 + 1) = 0;
            }
            goto LABEL_68;
          }
          unint64_t v138 = (unint64_t)(v158 + 8);
        }
        else
        {
          if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
            goto LABEL_68;
          }
          uint64_t v137 = *((void *)v166 + 2);
          if ((v137 & 4) == 0) {
            goto LABEL_68;
          }
          unint64_t v138 = v137 & 0xFFFFFFFFFFFFFFF8;
          if (!v138) {
            goto LABEL_68;
          }
        }
        *(void *)&long long v164 = &v166;
        sub_1CC5FA668(v138 + 16, &v164);
LABEL_68:
        if (v19 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
          *(_WORD *)(v25 + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)(v19 + 40), (uint64_t *)a1, v25);
LABEL_72:
        *((void *)&v164 + 1) = 0;
        long long v165 = 0uLL;
        LODWORD(v164) = 0x1000000;
        DWORD1(v164) = v15;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)&v164);
        uint64_t v62 = 0x100008000;
        LODWORD(v164) = 1;
        if (!a2) {
          uint64_t v62 = 0x80000000;
        }
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = v62;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)&v164);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 64));
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = v16;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)&v164);
        long long v165 = 0uLL;
        long long v164 = 0x201000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)&v164);
        LODWORD(v164) = 1;
        *((void *)&v164 + 1) = 0;
        *(void *)&long long v165 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)&v164);
        long long v164 = 0u;
        long long v165 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v25, v23, (const llvm::MachineOperand *)&v164);
        uint64_t v63 = *(void *)(v25 + 32);
        if (!*(_DWORD *)(v63 + 96)) {
          *(_DWORD *)(v63 + 96) &= ~0x4000000u;
        }
        uint64_t v64 = *(void *)(a1 + 24);
        uint64_t v65 = *(void *)(a5 + 8) + 48 * dword_1CD935FD0[2 * v20 + v21];
        if ((*(_WORD *)(a1 + 44) & 4) == 0)
        {
          int v66 = *(llvm::MachineFunction **)(v64 + 32);
          uint64_t v67 = *(unsigned __int8 **)(a1 + 56);
          uint64_t v166 = v67;
          if (v67) {
            llvm::MetadataTracking::track((uint64_t)&v166, v67, 2);
          }
          uint64_t v68 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v66, v65, &v166, 0);
          if (!v166) {
            goto LABEL_80;
          }
          int v139 = *v166;
          if ((v139 - 4) > 0x1E)
          {
            if ((v139 - 3) >= 0xFFFFFFFE) {
              uint64_t v159 = v166;
            }
            else {
              uint64_t v159 = 0;
            }
            if ((v139 - 3) < 0xFFFFFFFE)
            {
              if (v139 == 3) {
                *((void *)v166 + 1) = 0;
              }
              goto LABEL_80;
            }
            unint64_t v141 = (unint64_t)(v159 + 8);
          }
          else
          {
            if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
              goto LABEL_80;
            }
            uint64_t v140 = *((void *)v166 + 2);
            if ((v140 & 4) == 0) {
              goto LABEL_80;
            }
            unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFF8;
            if (!v141) {
              goto LABEL_80;
            }
          }
          *(void *)&long long v164 = &v166;
          sub_1CC5FA668(v141 + 16, &v164);
LABEL_80:
          uint64_t v69 = *(void *)(v64 + 40);
          *(void *)(v68 + 24) = v69;
          uint64_t v70 = *(void *)(v69 + 32);
          uint64_t v71 = *(unsigned int *)(v68 + 40);
          if (v71)
          {
            uint64_t v103 = *(void *)(v68 + 32);
            uint64_t v104 = *(void *)(v70 + 40);
            uint64_t v105 = 32 * v71;
            do
            {
              if (!*(unsigned char *)v103)
              {
                uint64_t v106 = *(unsigned int *)(v103 + 4);
                if ((int)v106 >= 0) {
                  int v107 = (uint64_t *)(*(void *)(v104 + 272) + 8 * v106);
                }
                else {
                  int v107 = (uint64_t *)(*(void *)(v104 + 24) + 16 * (v106 & 0x7FFFFFFF) + 8);
                }
                uint64_t v108 = *v107;
                if (*v107)
                {
                  uint64_t v109 = *(void *)(v108 + 16);
                  *(void *)(v108 + 16) = v103;
                  *(void *)(v103 + 16) = v109;
                  if (*(unsigned char *)(v103 + 3))
                  {
                    *(void *)(v103 + 24) = v108;
                  }
                  else
                  {
                    *(void *)(v103 + 24) = 0;
                    int v107 = (uint64_t *)(v109 + 24);
                  }
                }
                else
                {
                  *(void *)(v103 + 16) = v103;
                  *(void *)(v103 + 24) = 0;
                }
                *int v107 = v103;
              }
              v103 += 32;
              v105 -= 32;
            }
            while (v105);
          }
          uint64_t v72 = *(void *)(v70 + 728);
          if (v72) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 24))(v72, v68);
          }
          unint64_t v73 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v68 = v73 | *(void *)v68 & 7;
          *(void *)(v68 + 8) = a1;
          *(void *)(v73 + 8) = v68;
          *(void *)a1 = *(void *)a1 & 7 | v68;
LABEL_91:
          int v75 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
          *((void *)&v164 + 1) = 0;
          long long v165 = 0uLL;
          LODWORD(v164) = 0x1000000;
          DWORD1(v164) = v75;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v164);
          LODWORD(v164) = 1;
          *((void *)&v164 + 1) = 0;
          *(void *)&long long v165 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v164);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 64));
          LODWORD(v164) = 1;
          *((void *)&v164 + 1) = 0;
          *(void *)&long long v165 = 0;
LABEL_117:
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v164);
          LODWORD(v164) = 1;
          *((void *)&v164 + 1) = 0;
          *(void *)&long long v165 = 3;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v164);
          long long v165 = 0uLL;
          long long v164 = 0x200000000uLL;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v164);
          *((void *)&v164 + 1) = 0;
          long long v165 = 0uLL;
          LODWORD(v164) = 0x2000000;
          DWORD1(v164) = v15;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v68, v66, (const llvm::MachineOperand *)&v164);
          int v88 = *(unsigned int **)(v68 + 32);
          v88[48] = v88[48] & 0xFF0FFFFF | 0x100000;
          *int v88 = *v88 & 0xFF0FFFFF | 0x700000;
LABEL_118:
          llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
          return;
        }
        int v66 = *(llvm::MachineFunction **)(v64 + 32);
        unint64_t v74 = *(unsigned __int8 **)(a1 + 56);
        uint64_t v166 = v74;
        if (v74) {
          llvm::MetadataTracking::track((uint64_t)&v166, v74, 2);
        }
        uint64_t v68 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v66, v65, &v166, 0);
        if (v166)
        {
          int v142 = *v166;
          if ((v142 - 4) > 0x1E)
          {
            if ((v142 - 3) >= 0xFFFFFFFE) {
              double v160 = v166;
            }
            else {
              double v160 = 0;
            }
            if ((v142 - 3) < 0xFFFFFFFE)
            {
              if (v142 == 3) {
                *((void *)v166 + 1) = 0;
              }
              goto LABEL_87;
            }
            unint64_t v144 = (unint64_t)(v160 + 8);
          }
          else
          {
            if ((v166[1] & 0x7F) != 2 && !*((_DWORD *)v166 + 3)) {
              goto LABEL_87;
            }
            uint64_t v143 = *((void *)v166 + 2);
            if ((v143 & 4) == 0) {
              goto LABEL_87;
            }
            unint64_t v144 = v143 & 0xFFFFFFFFFFFFFFF8;
            if (!v144) {
              goto LABEL_87;
            }
          }
          *(void *)&long long v164 = &v166;
          sub_1CC5FA668(v144 + 16, &v164);
        }
LABEL_87:
        if (v64 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
          *(_WORD *)(v68 + 44) |= 0xCu;
        }
        sub_1CC31973C((uint64_t *)(v64 + 40), (uint64_t *)a1, v68);
        goto LABEL_91;
    }
  }
  uint64_t v10 = **(unsigned __int16 **)(v13 + 16);
  if ((v10 - 945) >= 0x3A)
  {
    switch(**(_WORD **)(v13 + 16))
    {
      case 0x4BF:
      case 0x4C0:
      case 0x4C1:
      case 0x4CB:
      case 0x4CC:
      case 0x4CD:
        if (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(void *)(v13 + 32) + 64), (const llvm::MachineOperand *)(*(void *)(v13 + 32) + 128))&& llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(void *)(v13 + 32) + 96), (const llvm::MachineOperand *)(*(void *)(v13 + 32) + 160)))
        {
          return;
        }
        goto LABEL_13;
      case 0x4C2:
      case 0x4C3:
      case 0x4C4:
      case 0x4C5:
      case 0x4C6:
      case 0x4C7:
      case 0x4C8:
      case 0x4C9:
      case 0x4CA:
      case 0x4CE:
      case 0x4CF:
      case 0x4D0:
      case 0x4D1:
      case 0x4D2:
      case 0x4D3:
      case 0x4D4:
      case 0x4D5:
      case 0x4D6:
      case 0x4D7:
      case 0x4D8:
      case 0x4D9:
      case 0x4F5:
      case 0x4F6:
      case 0x4F7:
      case 0x4F8:
      case 0x4F9:
      case 0x4FA:
      case 0x4FB:
      case 0x4FC:
      case 0x4FD:
      case 0x4FE:
      case 0x4FF:
      case 0x500:
      case 0x501:
      case 0x502:
      case 0x503:
      case 0x504:
      case 0x505:
      case 0x506:
      case 0x507:
      case 0x508:
      case 0x509:
      case 0x50A:
      case 0x50B:
      case 0x50C:
      case 0x50D:
      case 0x50E:
      case 0x50F:
        goto LABEL_13;
      case 0x4DA:
      case 0x4DB:
      case 0x4DC:
      case 0x4DD:
      case 0x4DE:
      case 0x4DF:
      case 0x4E0:
      case 0x4E1:
      case 0x4E2:
      case 0x4E3:
      case 0x4E4:
      case 0x4E5:
      case 0x4E6:
      case 0x4E7:
      case 0x4E8:
      case 0x4E9:
      case 0x4EA:
      case 0x4EB:
      case 0x4EC:
      case 0x4ED:
      case 0x4EE:
      case 0x4EF:
      case 0x4F0:
      case 0x4F1:
      case 0x4F2:
      case 0x4F3:
      case 0x4F4:
      case 0x510:
      case 0x511:
      case 0x512:
      case 0x513:
      case 0x514:
      case 0x515:
      case 0x516:
      case 0x517:
      case 0x518:
        return;
      default:
        uint64_t v10 = (v10 - 1078);
        if (v10 >= 9) {
          goto LABEL_13;
        }
        return;
    }
  }
}

void *sub_1CB8E8F88(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5 = *(unsigned __int8 **)(a1 + 56);
  uint64_t v938 = v5;
  if (v5) {
    llvm::MetadataTracking::track((uint64_t)&v938, v5, 2);
  }
  int v6 = (const llvm::BasicBlock *)a2[2];
  unsigned int v7 = (llvm::MachineFunction *)a2[4];
  uint64_t v916 = *((void *)v7 + 5);
  MachineBasicBlocint k = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  unsigned int v927 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  int v9 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  uint64_t v923 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  unint64_t v913 = llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  unsigned int v921 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  uint64_t v10 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  int v11 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  uint64_t v12 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  uint64_t v13 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  int v14 = (void *)llvm::MachineFunction::CreateMachineBasicBlock(v7, v6);
  int v15 = (unint64_t *)a2[1];
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v9);
  unint64_t v16 = *v15;
  void *v9 = *v15;
  v9[1] = v15;
  *(void *)(v16 + 8) = v9;
  v928 = v9;
  *int v15 = (unint64_t)v9;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)MachineBasicBlock);
  unint64_t v17 = *v15;
  *MachineBasicBlocint k = *v15;
  MachineBasicBlock[1] = v15;
  *(void *)(v17 + 8) = MachineBasicBlock;
  unsigned int v922 = MachineBasicBlock;
  *int v15 = (unint64_t)MachineBasicBlock;
  if (*(unsigned char *)(a4 + 292))
  {
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v927);
    unint64_t v18 = *v15;
    *unsigned int v927 = *v15;
    v927[1] = v15;
    *(void *)(v18 + 8) = v927;
    *int v15 = (unint64_t)v927;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v921);
    unint64_t v19 = *v15;
    void *v921 = *v15;
    v921[1] = v15;
    *(void *)(v19 + 8) = v921;
    *int v15 = (unint64_t)v921;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v10);
    unint64_t v20 = *v15;
    *uint64_t v10 = *v15;
    v10[1] = v15;
    *(void *)(v20 + 8) = v10;
    *int v15 = (unint64_t)v10;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v11);
    unint64_t v21 = *v15;
    *int v11 = *v15;
    v11[1] = v15;
    *(void *)(v21 + 8) = v11;
    *int v15 = (unint64_t)v11;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v12);
    unint64_t v22 = *v15;
    *uint64_t v12 = *v15;
    v12[1] = v15;
    *(void *)(v22 + 8) = v12;
    *int v15 = (unint64_t)v12;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v13);
    unint64_t v23 = *v15;
    *uint64_t v13 = *v15;
    v13[1] = v15;
    *(void *)(v23 + 8) = v13;
    *int v15 = (unint64_t)v13;
    llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v14);
    unint64_t v24 = *v15;
    *int v14 = *v15;
    v14[1] = v15;
    *(void *)(v24 + 8) = v14;
    *int v15 = (unint64_t)v14;
  }
  uint64_t v917 = v10;
  unint64_t v918 = v11;
  uint64_t v910 = v12;
  uint64_t v911 = v13;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, (uint64_t)v923);
  unint64_t v25 = *v15;
  *uint64_t v923 = *v15;
  v923[1] = v15;
  *(void *)(v25 + 8) = v923;
  *int v15 = (unint64_t)v923;
  uint64_t v26 = (void *)v913;
  llvm::ilist_callback_traits<llvm::MachineBasicBlock>::addNodeToList((uint64_t)v7 + 320, v913);
  unint64_t v27 = *v15;
  *(void *)unint64_t v913 = *v15;
  *(void *)(v913 + 8) = v15;
  *(void *)(v27 + 8) = v913;
  *int v15 = v913;
  uint64_t v28 = *(unint64_t **)(v913 + 56);
  uint64_t v29 = a1;
  if ((*(unsigned char *)a1 & 4) == 0)
  {
    uint64_t v29 = a1;
    if ((*(_WORD *)(a1 + 44) & 8) != 0)
    {
      uint64_t v29 = a1;
      do
        uint64_t v29 = *(void *)(v29 + 8);
      while ((*(_WORD *)(v29 + 44) & 8) != 0);
    }
  }
  unint64_t v30 = *(unint64_t **)(v29 + 8);
  uint64_t v31 = (llvm::MachineBasicBlock *)a2;
  uint64_t v32 = a2 + 6;
  BOOL v33 = v30 == a2 + 6 || v28 == v32;
  uint64_t v34 = a4;
  if (!v33)
  {
    if ((unint64_t *)v913 != a2)
    {
      unint64_t v194 = *(void *)(v913 + 40);
      uint64_t v195 = v30;
      do
      {
        v195[3] = v194;
        uint64_t v195 = (unint64_t *)v195[1];
      }
      while (v195 != v32);
    }
    unint64_t v35 = *v32;
    unint64_t v36 = *v32 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v37 = *v30 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v37 + 8) = v32;
    *uint64_t v32 = v37 | v35 & 7;
    unint64_t v38 = *v28 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v36 + 8) = v28;
    unint64_t *v30 = v38 | *v30 & 7;
    *(void *)(v38 + 8) = v30;
    *uint64_t v28 = v35 & 0xFFFFFFFFFFFFFFF8 | *v28 & 7;
    uint64_t v31 = (llvm::MachineBasicBlock *)a2;
  }
  uint64_t v915 = v14;
  llvm::MachineBasicBlock::transferSuccessorsAndUpdatePHIs((unsigned int *)v913, v31);
  llvm::MachineBasicBlock::addSuccessor(v31, v9, -1);
  llvm::MachineBasicBlock::addSuccessor(v9, v922, -1);
  if (*(unsigned char *)((*(uint64_t (**)(void, void))(**((void **)v7 + 1) + 16))(*((void *)v7 + 1), *(void *)v7)+ 292))
  {
    llvm::MachineBasicBlock::addSuccessor(v922, v927, -1);
    uint64_t v39 = v923;
    llvm::MachineBasicBlock::addSuccessor(v922, v923, -1);
    llvm::MachineBasicBlock::addSuccessor(v927, v921, -1);
    llvm::MachineBasicBlock::addSuccessor(v927, v14, -1);
    llvm::MachineBasicBlock::addSuccessor(v921, v10, -1);
    llvm::MachineBasicBlock::addSuccessor(v10, v11, -1);
    llvm::MachineBasicBlock::addSuccessor(v11, v910, -1);
    llvm::MachineBasicBlock::addSuccessor(v11, v10, -1);
    llvm::MachineBasicBlock::addSuccessor(v910, v911, -1);
    uint64_t v26 = (void *)v913;
    llvm::MachineBasicBlock::addSuccessor(v911, v14, -1);
    unint64_t v40 = v14;
    uint64_t v41 = v9;
  }
  else
  {
    llvm::MachineBasicBlock::addSuccessor(v922, v9, -1);
    unint64_t v40 = v922;
    uint64_t v39 = v923;
    uint64_t v41 = v923;
  }
  llvm::MachineBasicBlock::addSuccessor(v40, v41, -1);
  uint64_t v42 = a3;
  llvm::MachineBasicBlock::addSuccessor(v39, v26, -1);
  int v43 = *(_DWORD *)(*(void *)(a1 + 32) + 4);
  int IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v916, "", 0);
  *(void *)(*(void *)(v916 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v45 = *(void *)(v916 + 8);
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 24))(v45);
  }
  uint64_t v46 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v916, "", 0);
  *(void *)(*(void *)(v916 + 24) + 16 * (v46 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v47 = *(void *)(v916 + 8);
  uint64_t v48 = v922;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 24))(v47);
  }
  int v912 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v916, "", 0);
  *(void *)(*(void *)(v916 + 24) + 16 * (v912 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v49 = *(void *)(v916 + 8);
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 24))(v49);
  }
  int v914 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v916, "", 0);
  *(void *)(*(void *)(v916 + 24) + 16 * (v914 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v50 = *(void *)(v916 + 8);
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 24))(v50);
  }
  int v909 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v916, "", 0);
  *(void *)(*(void *)(v916 + 24) + 16 * (v909 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v51 = *(void *)(v916 + 8);
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 24))(v51);
  }
  int v908 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v916, "", 0);
  *(void *)(*(void *)(v916 + 24) + 16 * (v908 & 0x7FFFFFFF)) = &off_1E66A4180;
  uint64_t v52 = *(void *)(v916 + 8);
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 24))(v52);
  }
  if (*(unsigned char *)(a4 + 292))
  {
    uint64_t v53 = *(void *)(a3 + 8) + 252336;
    uint64_t v54 = (llvm::MachineFunction *)a2[4];
    *(void *)&long long v936 = v938;
    if (v938) {
      llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
    }
    uint64_t MachineInstr = llvm::MachineFunction::CreateMachineInstr(v54, v53, (unsigned __int8 **)&v936, 0);
    if (!(void)v936) {
      goto LABEL_34;
    }
    int v733 = *(unsigned __int8 *)v936;
    if ((v733 - 4) > 0x1E)
    {
      if ((v733 - 3) >= 0xFFFFFFFE) {
        uint64_t v830 = v936;
      }
      else {
        uint64_t v830 = 0;
      }
      if ((v733 - 3) < 0xFFFFFFFE)
      {
        uint64_t v42 = a3;
        uint64_t v34 = a4;
        if (v733 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_34;
      }
      unint64_t v735 = v830 + 8;
    }
    else
    {
      uint64_t v42 = a3;
      uint64_t v34 = a4;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_34;
      }
      uint64_t v734 = *(void *)(v936 + 16);
      if ((v734 & 4) == 0) {
        goto LABEL_34;
      }
      unint64_t v735 = v734 & 0xFFFFFFFFFFFFFFF8;
      if (!v735) {
        goto LABEL_34;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v735 + 16, &v940);
    uint64_t v42 = a3;
    uint64_t v34 = a4;
LABEL_34:
    unint64_t v56 = a2[5];
    *((void *)MachineInstr + 3) = v56;
    uint64_t v57 = *(void *)(v56 + 32);
    uint64_t v58 = *((unsigned int *)MachineInstr + 10);
    if (v58)
    {
      uint64_t v477 = *((void *)MachineInstr + 4);
      uint64_t v478 = *(void *)(v57 + 40);
      uint64_t v479 = 32 * v58;
      do
      {
        if (!*(unsigned char *)v477)
        {
          uint64_t v480 = *(unsigned int *)(v477 + 4);
          if ((int)v480 >= 0) {
            uint64_t v481 = (uint64_t *)(*(void *)(v478 + 272) + 8 * v480);
          }
          else {
            uint64_t v481 = (uint64_t *)(*(void *)(v478 + 24) + 16 * (v480 & 0x7FFFFFFF) + 8);
          }
          uint64_t v482 = *v481;
          if (*v481)
          {
            uint64_t v483 = *(void *)(v482 + 16);
            *(void *)(v482 + 16) = v477;
            *(void *)(v477 + 16) = v483;
            if (*(unsigned char *)(v477 + 3))
            {
              *(void *)(v477 + 24) = v482;
            }
            else
            {
              *(void *)(v477 + 24) = 0;
              uint64_t v481 = (uint64_t *)(v483 + 24);
            }
          }
          else
          {
            *(void *)(v477 + 16) = v477;
            *(void *)(v477 + 24) = 0;
          }
          uint64_t *v481 = v477;
        }
        v477 += 32;
        v479 -= 32;
      }
      while (v479);
    }
    uint64_t v59 = *(void *)(v57 + 728);
    if (v59) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v59 + 24))(v59, MachineInstr);
    }
    unint64_t v60 = *v32 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t MachineInstr = v60 | *(void *)MachineInstr & 7;
    *((void *)MachineInstr + 1) = v32;
    *(void *)(v60 + 8) = MachineInstr;
    *uint64_t v32 = *v32 & 7 | (unint64_t)MachineInstr;
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0x1000000;
    DWORD1(v940) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(MachineInstr, v54, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v54, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v54, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v54, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v54, (const llvm::MachineOperand *)&v940);
    long long v940 = 0u;
    long long v941 = 0u;
    llvm::MachineInstr::addOperand(MachineInstr, v54, (const llvm::MachineOperand *)&v940);
    LODWORD(v940) = 1;
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = 0;
    llvm::MachineInstr::addOperand(MachineInstr, v54, (const llvm::MachineOperand *)&v940);
    long long v940 = 0u;
    long long v941 = 0u;
    llvm::MachineInstr::addOperand(MachineInstr, v54, (const llvm::MachineOperand *)&v940);
    uint64_t v48 = v922;
  }
  uint64_t v61 = *(void *)(v42 + 8) + 555600;
  uint64_t v62 = (llvm::MachineFunction *)a2[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v63 = llvm::MachineFunction::CreateMachineInstr(v62, v61, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v730 = *(unsigned __int8 *)v936;
    if ((v730 - 4) > 0x1E)
    {
      if ((v730 - 3) >= 0xFFFFFFFE) {
        uint64_t v805 = v936;
      }
      else {
        uint64_t v805 = 0;
      }
      if ((v730 - 3) < 0xFFFFFFFE)
      {
        uint64_t v42 = a3;
        uint64_t v34 = a4;
        uint64_t v48 = v922;
        if (v730 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_41;
      }
      unint64_t v732 = v805 + 8;
    }
    else
    {
      uint64_t v42 = a3;
      uint64_t v34 = a4;
      uint64_t v48 = v922;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_41;
      }
      uint64_t v731 = *(void *)(v936 + 16);
      if ((v731 & 4) == 0) {
        goto LABEL_41;
      }
      unint64_t v732 = v731 & 0xFFFFFFFFFFFFFFF8;
      if (!v732) {
        goto LABEL_41;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v732 + 16, &v940);
    uint64_t v42 = a3;
    uint64_t v34 = a4;
    uint64_t v48 = v922;
  }
LABEL_41:
  unint64_t v64 = a2[5];
  *((void *)v63 + 3) = v64;
  uint64_t v65 = *(void *)(v64 + 32);
  uint64_t v66 = *((unsigned int *)v63 + 10);
  if (v66)
  {
    uint64_t v187 = *((void *)v63 + 4);
    uint64_t v188 = *(void *)(v65 + 40);
    uint64_t v189 = 32 * v66;
    do
    {
      if (!*(unsigned char *)v187)
      {
        uint64_t v190 = *(unsigned int *)(v187 + 4);
        if ((int)v190 >= 0) {
          unint64_t v191 = (uint64_t *)(*(void *)(v188 + 272) + 8 * v190);
        }
        else {
          unint64_t v191 = (uint64_t *)(*(void *)(v188 + 24) + 16 * (v190 & 0x7FFFFFFF) + 8);
        }
        uint64_t v192 = *v191;
        if (*v191)
        {
          uint64_t v193 = *(void *)(v192 + 16);
          *(void *)(v192 + 16) = v187;
          *(void *)(v187 + 16) = v193;
          if (*(unsigned char *)(v187 + 3))
          {
            *(void *)(v187 + 24) = v192;
          }
          else
          {
            *(void *)(v187 + 24) = 0;
            unint64_t v191 = (uint64_t *)(v193 + 24);
          }
        }
        else
        {
          *(void *)(v187 + 16) = v187;
          *(void *)(v187 + 24) = 0;
        }
        *unint64_t v191 = v187;
      }
      v187 += 32;
      v189 -= 32;
    }
    while (v189);
  }
  uint64_t v67 = *(void *)(v65 + 728);
  if (v67) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v67 + 24))(v67, v63);
  }
  unint64_t v68 = *v32 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v63 = v68 | *(void *)v63 & 7;
  *((void *)v63 + 1) = v32;
  *(void *)(v68 + 8) = v63;
  *uint64_t v32 = *v32 & 7 | (unint64_t)v63;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v928;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v63, v62, (const llvm::MachineOperand *)&v940);
  uint64_t v69 = (llvm::MachineInstr *)a1;
  int v906 = v46;
  if ((**(_WORD **)(a1 + 16) & 0xFFFE) != 0x104)
  {
    uint64_t v97 = *(_OWORD **)(a1 + 32);
    long long v98 = v97[3];
    long long v936 = v97[2];
    long long v937 = v98;
    long long v99 = v97[3];
    long long v934 = v97[2];
    long long v935 = v99;
    long long v100 = v97[5];
    long long v932 = v97[4];
    long long v933 = v100;
    uint64_t v101 = 6;
    uint64_t v102 = 4;
    if (!a5) {
      uint64_t v102 = 6;
    }
    uint64_t v103 = &v97[v102];
    long long v104 = v103[1];
    long long v930 = *v103;
    long long v931 = v104;
    if (!a5) {
      uint64_t v101 = 8;
    }
    uint64_t v105 = &v97[v101];
    long long v106 = v105[1];
    v929[0] = *v105;
    v929[1] = v106;
    uint64_t v77 = v11;
    if (!(_BYTE)v936) {
      LODWORD(v936) = v936 & 0xFBFFFFFF;
    }
    if (!(_BYTE)v934) {
      LODWORD(v934) = v934 & 0xFBFFFFFF;
    }
    if (!(_BYTE)v932) {
      LODWORD(v932) = v932 & 0xFBFFFFFF;
    }
    if (!(_BYTE)v930) {
      LODWORD(v930) = v930 & 0xFBFFFFFF;
    }
    if (!LOBYTE(v929[0])) {
      LODWORD(v929[0]) &= ~0x4000000u;
    }
    if (!*(unsigned char *)(v34 + 292))
    {
LABEL_93:
      LODWORD(v89) = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v916, "", 0);
      *(void *)(*(void *)(v916 + 24) + 16 * (v89 & 0x7FFFFFFF)) = &off_1E66A4340;
      uint64_t v116 = *(void *)(v916 + 8);
      if (v116) {
        (*(void (**)(uint64_t))(*(void *)v116 + 24))(v116);
      }
      if (a5)
      {
        uint64_t v117 = *(void *)(v42 + 8) + 569760;
        uint64_t v118 = (llvm::MachineFunction *)v928[4];
        uint64_t v939 = v938;
        if (v938) {
          llvm::MetadataTracking::track((uint64_t)&v939, v938, 2);
        }
        uint64_t v119 = llvm::MachineFunction::CreateMachineInstr(v118, v117, &v939, 0);
        if (!v939) {
          goto LABEL_99;
        }
        int v809 = *v939;
        if ((v809 - 4) > 0x1E)
        {
          if ((v809 - 3) >= 0xFFFFFFFE) {
            uint64_t v855 = v939;
          }
          else {
            uint64_t v855 = 0;
          }
          if ((v809 - 3) < 0xFFFFFFFE)
          {
            uint64_t v34 = a4;
            uint64_t v69 = (llvm::MachineInstr *)a1;
            uint64_t v42 = a3;
            uint64_t v77 = v918;
            uint64_t v48 = v922;
            if (v809 == 3) {
              *((void *)v939 + 1) = 0;
            }
            goto LABEL_99;
          }
          unint64_t v811 = (unint64_t)(v855 + 8);
        }
        else
        {
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          if ((v939[1] & 0x7F) != 2 && !*((_DWORD *)v939 + 3)) {
            goto LABEL_99;
          }
          uint64_t v810 = *((void *)v939 + 2);
          if ((v810 & 4) == 0) {
            goto LABEL_99;
          }
          unint64_t v811 = v810 & 0xFFFFFFFFFFFFFFF8;
          if (!v811) {
            goto LABEL_99;
          }
        }
        *(void *)&long long v940 = &v939;
        sub_1CC5FA668(v811 + 16, &v940);
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
LABEL_99:
        uint64_t v120 = v928 + 6;
        uint64_t v121 = v928[5];
        *((void *)v119 + 3) = v121;
        uint64_t v122 = *(void *)(v121 + 32);
        uint64_t v123 = *((unsigned int *)v119 + 10);
        if (v123)
        {
          uint64_t v652 = *((void *)v119 + 4);
          uint64_t v653 = *(void *)(v122 + 40);
          uint64_t v654 = 32 * v123;
          do
          {
            if (!*(unsigned char *)v652)
            {
              uint64_t v655 = *(unsigned int *)(v652 + 4);
              if ((int)v655 >= 0) {
                unint64_t v656 = (uint64_t *)(*(void *)(v653 + 272) + 8 * v655);
              }
              else {
                unint64_t v656 = (uint64_t *)(*(void *)(v653 + 24) + 16 * (v655 & 0x7FFFFFFF) + 8);
              }
              uint64_t v657 = *v656;
              if (*v656)
              {
                uint64_t v658 = *(void *)(v657 + 16);
                *(void *)(v657 + 16) = v652;
                *(void *)(v652 + 16) = v658;
                if (*(unsigned char *)(v652 + 3))
                {
                  *(void *)(v652 + 24) = v657;
                }
                else
                {
                  *(void *)(v652 + 24) = 0;
                  unint64_t v656 = (uint64_t *)(v658 + 24);
                }
              }
              else
              {
                *(void *)(v652 + 16) = v652;
                *(void *)(v652 + 24) = 0;
              }
              *unint64_t v656 = v652;
            }
            v652 += 32;
            v654 -= 32;
          }
          while (v654);
        }
        uint64_t v124 = *(void *)(v122 + 728);
        if (v124) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v124 + 24))(v124, v119);
        }
        unint64_t v125 = *v120 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v119 = v125 | *(void *)v119 & 7;
        *((void *)v119 + 1) = v120;
        *(void *)(v125 + 8) = v119;
        *uint64_t v120 = *v120 & 7 | (unint64_t)v119;
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0x1000000;
        DWORD1(v940) = v43;
        llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v940);
        unint64_t v126 = (const llvm::MachineOperand *)&v936;
        goto LABEL_143;
      }
      uint64_t v154 = 569904;
      if (!(_BYTE)v932) {
        uint64_t v154 = 569952;
      }
      uint64_t v155 = *(void *)(v42 + 8) + v154;
      uint64_t v118 = (llvm::MachineFunction *)v928[4];
      uint64_t v939 = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)&v939, v938, 2);
      }
      uint64_t v119 = llvm::MachineFunction::CreateMachineInstr(v118, v155, &v939, 0);
      if (v939)
      {
        int v815 = *v939;
        if ((v815 - 4) > 0x1E)
        {
          if ((v815 - 3) >= 0xFFFFFFFE) {
            uint64_t v857 = v939;
          }
          else {
            uint64_t v857 = 0;
          }
          if ((v815 - 3) < 0xFFFFFFFE)
          {
            uint64_t v34 = a4;
            uint64_t v69 = (llvm::MachineInstr *)a1;
            uint64_t v42 = a3;
            uint64_t v77 = v918;
            uint64_t v48 = v922;
            if (v815 == 3) {
              *((void *)v939 + 1) = 0;
            }
            goto LABEL_139;
          }
          unint64_t v817 = (unint64_t)(v857 + 8);
        }
        else
        {
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          if ((v939[1] & 0x7F) != 2 && !*((_DWORD *)v939 + 3)) {
            goto LABEL_139;
          }
          uint64_t v816 = *((void *)v939 + 2);
          if ((v816 & 4) == 0) {
            goto LABEL_139;
          }
          unint64_t v817 = v816 & 0xFFFFFFFFFFFFFFF8;
          if (!v817) {
            goto LABEL_139;
          }
        }
        *(void *)&long long v940 = &v939;
        sub_1CC5FA668(v817 + 16, &v940);
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
      }
LABEL_139:
      uint64_t v156 = v928 + 6;
      uint64_t v157 = v928[5];
      *((void *)v119 + 3) = v157;
      uint64_t v158 = *(void *)(v157 + 32);
      uint64_t v159 = *((unsigned int *)v119 + 10);
      if (v159)
      {
        uint64_t v666 = *((void *)v119 + 4);
        uint64_t v667 = *(void *)(v158 + 40);
        uint64_t v668 = 32 * v159;
        do
        {
          if (!*(unsigned char *)v666)
          {
            uint64_t v669 = *(unsigned int *)(v666 + 4);
            if ((int)v669 >= 0) {
              uint64_t v670 = (uint64_t *)(*(void *)(v667 + 272) + 8 * v669);
            }
            else {
              uint64_t v670 = (uint64_t *)(*(void *)(v667 + 24) + 16 * (v669 & 0x7FFFFFFF) + 8);
            }
            uint64_t v671 = *v670;
            if (*v670)
            {
              uint64_t v672 = *(void *)(v671 + 16);
              *(void *)(v671 + 16) = v666;
              *(void *)(v666 + 16) = v672;
              if (*(unsigned char *)(v666 + 3))
              {
                *(void *)(v666 + 24) = v671;
              }
              else
              {
                *(void *)(v666 + 24) = 0;
                uint64_t v670 = (uint64_t *)(v672 + 24);
              }
            }
            else
            {
              *(void *)(v666 + 16) = v666;
              *(void *)(v666 + 24) = 0;
            }
            *uint64_t v670 = v666;
          }
          v666 += 32;
          v668 -= 32;
        }
        while (v668);
      }
      uint64_t v160 = *(void *)(v158 + 728);
      if (v160) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v160 + 24))(v160, v119);
      }
      unint64_t v161 = *v156 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v119 = v161 | *(void *)v119 & 7;
      *((void *)v119 + 1) = v156;
      *(void *)(v161 + 8) = v119;
      *uint64_t v156 = *v156 & 7 | (unint64_t)v119;
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0x1000000;
      DWORD1(v940) = v43;
      llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v940);
      llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v934);
      unint64_t v126 = (const llvm::MachineOperand *)&v932;
LABEL_143:
      llvm::MachineInstr::addOperand(v119, v118, v126);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 2;
      llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v940);
      long long v940 = 0u;
      long long v941 = 0u;
      llvm::MachineInstr::addOperand(v119, v118, (const llvm::MachineOperand *)&v940);
      uint64_t v162 = *(void *)(v42 + 8) + 227376;
      unint64_t v135 = (llvm::MachineFunction *)v928[4];
      uint64_t v939 = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)&v939, v938, 2);
      }
      uint64_t v46 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v135, v162, &v939, 0);
      unint64_t v138 = v939;
      if (!v939)
      {
LABEL_146:
        int v163 = v928 + 6;
        uint64_t v164 = v928[5];
        *(void *)(v46 + 24) = v164;
        uint64_t v165 = *(void *)(v164 + 32);
        uint64_t v166 = *(unsigned int *)(v46 + 40);
        if (v166)
        {
          uint64_t v610 = *(void *)(v46 + 32);
          uint64_t v611 = *(void *)(v165 + 40);
          uint64_t v612 = 32 * v166;
          do
          {
            if (!*(unsigned char *)v610)
            {
              uint64_t v613 = *(unsigned int *)(v610 + 4);
              if ((int)v613 >= 0) {
                __int16 v614 = (uint64_t *)(*(void *)(v611 + 272) + 8 * v613);
              }
              else {
                __int16 v614 = (uint64_t *)(*(void *)(v611 + 24) + 16 * (v613 & 0x7FFFFFFF) + 8);
              }
              uint64_t v615 = *v614;
              if (*v614)
              {
                uint64_t v616 = *(void *)(v615 + 16);
                *(void *)(v615 + 16) = v610;
                *(void *)(v610 + 16) = v616;
                if (*(unsigned char *)(v610 + 3))
                {
                  *(void *)(v610 + 24) = v615;
                }
                else
                {
                  *(void *)(v610 + 24) = 0;
                  __int16 v614 = (uint64_t *)(v616 + 24);
                }
              }
              else
              {
                *(void *)(v610 + 16) = v610;
                *(void *)(v610 + 24) = 0;
              }
              *__int16 v614 = v610;
            }
            v610 += 32;
            v612 -= 32;
          }
          while (v612);
        }
        uint64_t v167 = *(void *)(v165 + 728);
        if (v167) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v167 + 24))(v167, v46);
        }
        unint64_t v168 = *v163 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v46 = v168 | *(void *)v46 & 7;
        *(void *)(v46 + 8) = v163;
        *(void *)(v168 + 8) = v46;
        uint64_t *v163 = *v163 & 7 | v46;
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0x1000000;
        DWORD1(v940) = v89;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)v929);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0;
        DWORD1(v940) = v43;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v930);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        long long v941 = 0uLL;
        long long v940 = 0x201000000uLL;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        long long v940 = 0u;
        long long v941 = 0u;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v46, v135, (const llvm::MachineOperand *)&v940);
        if (a5)
        {
          uint64_t v169 = *(void *)(v42 + 8) + 573648;
          uint64_t v170 = (llvm::MachineFunction *)v48[4];
          uint64_t v939 = v938;
          if (v938) {
            llvm::MetadataTracking::track((uint64_t)&v939, v938, 2);
          }
          uint64_t v171 = llvm::MachineFunction::CreateMachineInstr(v170, v169, &v939, 0);
          if (!v939) {
            goto LABEL_153;
          }
          int v818 = *v939;
          if ((v818 - 4) > 0x1E)
          {
            if ((v818 - 3) >= 0xFFFFFFFE) {
              uint64_t v858 = v939;
            }
            else {
              uint64_t v858 = 0;
            }
            if ((v818 - 3) < 0xFFFFFFFE)
            {
              uint64_t v34 = a4;
              uint64_t v69 = (llvm::MachineInstr *)a1;
              uint64_t v42 = a3;
              uint64_t v77 = v918;
              uint64_t v48 = v922;
              if (v818 == 3) {
                *((void *)v939 + 1) = 0;
              }
              goto LABEL_153;
            }
            unint64_t v820 = (unint64_t)(v858 + 8);
          }
          else
          {
            uint64_t v34 = a4;
            uint64_t v69 = (llvm::MachineInstr *)a1;
            uint64_t v42 = a3;
            uint64_t v77 = v918;
            uint64_t v48 = v922;
            if ((v939[1] & 0x7F) != 2 && !*((_DWORD *)v939 + 3)) {
              goto LABEL_153;
            }
            uint64_t v819 = *((void *)v939 + 2);
            if ((v819 & 4) == 0) {
              goto LABEL_153;
            }
            unint64_t v820 = v819 & 0xFFFFFFFFFFFFFFF8;
            if (!v820) {
              goto LABEL_153;
            }
          }
          *(void *)&long long v940 = &v939;
          sub_1CC5FA668(v820 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
LABEL_153:
          unint64_t v172 = v48 + 6;
          uint64_t v173 = v48[5];
          *((void *)v171 + 3) = v173;
          uint64_t v174 = *(void *)(v173 + 32);
          uint64_t v175 = *((unsigned int *)v171 + 10);
          if (v175)
          {
            uint64_t v673 = *((void *)v171 + 4);
            uint64_t v674 = *(void *)(v174 + 40);
            uint64_t v675 = 32 * v175;
            do
            {
              if (!*(unsigned char *)v673)
              {
                uint64_t v676 = *(unsigned int *)(v673 + 4);
                if ((int)v676 >= 0) {
                  unint64_t v677 = (uint64_t *)(*(void *)(v674 + 272) + 8 * v676);
                }
                else {
                  unint64_t v677 = (uint64_t *)(*(void *)(v674 + 24) + 16 * (v676 & 0x7FFFFFFF) + 8);
                }
                uint64_t v678 = *v677;
                if (*v677)
                {
                  uint64_t v679 = *(void *)(v678 + 16);
                  *(void *)(v678 + 16) = v673;
                  *(void *)(v673 + 16) = v679;
                  if (*(unsigned char *)(v673 + 3))
                  {
                    *(void *)(v673 + 24) = v678;
                  }
                  else
                  {
                    *(void *)(v673 + 24) = 0;
                    unint64_t v677 = (uint64_t *)(v679 + 24);
                  }
                }
                else
                {
                  *(void *)(v673 + 16) = v673;
                  *(void *)(v673 + 24) = 0;
                }
                uint64_t *v677 = v673;
              }
              v673 += 32;
              v675 -= 32;
            }
            while (v675);
          }
          uint64_t v176 = *(void *)(v174 + 728);
          if (v176) {
            (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v176 + 24))(v176, v171);
          }
          unint64_t v177 = *v172 & 0xFFFFFFFFFFFFFFF8;
          *(void *)uint64_t v171 = v177 | *(void *)v171 & 7;
          *((void *)v171 + 1) = v172;
          *(void *)(v177 + 8) = v171;
          unint64_t *v172 = *v172 & 7 | (unint64_t)v171;
          *((void *)&v940 + 1) = 0;
          long long v941 = 0uLL;
          LODWORD(v940) = 0;
          DWORD1(v940) = v89;
          llvm::MachineInstr::addOperand(v171, v170, (const llvm::MachineOperand *)&v940);
          uint64_t v178 = (const llvm::MachineOperand *)&v936;
LABEL_166:
          llvm::MachineInstr::addOperand(v171, v170, v178);
          LODWORD(v940) = 1;
          *((void *)&v940 + 1) = 0;
          *(void *)&long long v941 = 2;
          llvm::MachineInstr::addOperand(v171, v170, (const llvm::MachineOperand *)&v940);
          LODWORD(v940) = 1;
          *((void *)&v940 + 1) = 0;
          *(void *)&long long v941 = 0;
          llvm::MachineInstr::addOperand(v171, v170, (const llvm::MachineOperand *)&v940);
          long long v940 = 0u;
          long long v941 = 0u;
          llvm::MachineInstr::addOperand(v171, v170, (const llvm::MachineOperand *)&v940);
          uint64_t v137 = v917;
          goto LABEL_335;
        }
        uint64_t v179 = 573792;
        if (!(_BYTE)v932) {
          uint64_t v179 = 573840;
        }
        uint64_t v180 = *(void *)(v42 + 8) + v179;
        uint64_t v170 = (llvm::MachineFunction *)v48[4];
        uint64_t v939 = v938;
        if (v938) {
          llvm::MetadataTracking::track((uint64_t)&v939, v938, 2);
        }
        uint64_t v171 = llvm::MachineFunction::CreateMachineInstr(v170, v180, &v939, 0);
        if (v939)
        {
          int v821 = *v939;
          if ((v821 - 4) > 0x1E)
          {
            if ((v821 - 3) >= 0xFFFFFFFE) {
              __int16 v859 = v939;
            }
            else {
              __int16 v859 = 0;
            }
            if ((v821 - 3) < 0xFFFFFFFE)
            {
              uint64_t v34 = a4;
              uint64_t v69 = (llvm::MachineInstr *)a1;
              uint64_t v42 = a3;
              uint64_t v77 = v918;
              uint64_t v48 = v922;
              if (v821 == 3) {
                *((void *)v939 + 1) = 0;
              }
              goto LABEL_162;
            }
            unint64_t v823 = (unint64_t)(v859 + 8);
          }
          else
          {
            uint64_t v34 = a4;
            uint64_t v69 = (llvm::MachineInstr *)a1;
            uint64_t v42 = a3;
            uint64_t v77 = v918;
            uint64_t v48 = v922;
            if ((v939[1] & 0x7F) != 2 && !*((_DWORD *)v939 + 3)) {
              goto LABEL_162;
            }
            uint64_t v822 = *((void *)v939 + 2);
            if ((v822 & 4) == 0) {
              goto LABEL_162;
            }
            unint64_t v823 = v822 & 0xFFFFFFFFFFFFFFF8;
            if (!v823) {
              goto LABEL_162;
            }
          }
          *(void *)&long long v940 = &v939;
          sub_1CC5FA668(v823 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
        }
LABEL_162:
        uint64_t v181 = v48 + 6;
        uint64_t v182 = v48[5];
        *((void *)v171 + 3) = v182;
        uint64_t v183 = *(void *)(v182 + 32);
        uint64_t v184 = *((unsigned int *)v171 + 10);
        if (v184)
        {
          uint64_t v680 = *((void *)v171 + 4);
          uint64_t v681 = *(void *)(v183 + 40);
          uint64_t v682 = 32 * v184;
          do
          {
            if (!*(unsigned char *)v680)
            {
              uint64_t v683 = *(unsigned int *)(v680 + 4);
              if ((int)v683 >= 0) {
                char v684 = (uint64_t *)(*(void *)(v681 + 272) + 8 * v683);
              }
              else {
                char v684 = (uint64_t *)(*(void *)(v681 + 24) + 16 * (v683 & 0x7FFFFFFF) + 8);
              }
              uint64_t v685 = *v684;
              if (*v684)
              {
                uint64_t v686 = *(void *)(v685 + 16);
                *(void *)(v685 + 16) = v680;
                *(void *)(v680 + 16) = v686;
                if (*(unsigned char *)(v680 + 3))
                {
                  *(void *)(v680 + 24) = v685;
                }
                else
                {
                  *(void *)(v680 + 24) = 0;
                  char v684 = (uint64_t *)(v686 + 24);
                }
              }
              else
              {
                *(void *)(v680 + 16) = v680;
                *(void *)(v680 + 24) = 0;
              }
              uint64_t *v684 = v680;
            }
            v680 += 32;
            v682 -= 32;
          }
          while (v682);
        }
        uint64_t v185 = *(void *)(v183 + 728);
        if (v185) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v185 + 24))(v185, v171);
        }
        unint64_t v186 = *v181 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v171 = v186 | *(void *)v171 & 7;
        *((void *)v171 + 1) = v181;
        *(void *)(v186 + 8) = v171;
        *uint64_t v181 = *v181 & 7 | (unint64_t)v171;
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0;
        DWORD1(v940) = v89;
        llvm::MachineInstr::addOperand(v171, v170, (const llvm::MachineOperand *)&v940);
        llvm::MachineInstr::addOperand(v171, v170, (const llvm::MachineOperand *)&v934);
        uint64_t v178 = (const llvm::MachineOperand *)&v932;
        goto LABEL_166;
      }
LABEL_1072:
      int v790 = *v138;
      if ((v790 - 4) > 0x1E)
      {
        if ((v790 - 3) >= 0xFFFFFFFE) {
          unint64_t v849 = v138;
        }
        else {
          unint64_t v849 = 0;
        }
        if ((v790 - 3) < 0xFFFFFFFE)
        {
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          if (v790 == 3) {
            *((void *)v138 + 1) = 0;
          }
          goto LABEL_146;
        }
        unint64_t v792 = (unint64_t)(v849 + 8);
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if ((v138[1] & 0x7F) != 2 && !*((_DWORD *)v138 + 3)) {
          goto LABEL_146;
        }
        uint64_t v791 = *((void *)v138 + 2);
        if ((v791 & 4) == 0) {
          goto LABEL_146;
        }
        unint64_t v792 = v791 & 0xFFFFFFFFFFFFFFF8;
        if (!v792) {
          goto LABEL_146;
        }
      }
      *(void *)&long long v940 = &v939;
      sub_1CC5FA668(v792 + 16, &v940);
      uint64_t v34 = a4;
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v77 = v918;
      uint64_t v48 = v922;
      goto LABEL_146;
    }
    uint64_t v107 = *(void *)(v42 + 8);
    uint64_t v108 = (llvm::MachineFunction *)v928[4];
    uint64_t v939 = v938;
    if (v938) {
      llvm::MetadataTracking::track((uint64_t)&v939, v938, 2);
    }
    uint64_t v109 = llvm::MachineFunction::CreateMachineInstr(v108, v107, &v939, 0);
    if (v939)
    {
      int v802 = *v939;
      if ((v802 - 4) > 0x1E)
      {
        if ((v802 - 3) >= 0xFFFFFFFE) {
          uint64_t v853 = v939;
        }
        else {
          uint64_t v853 = 0;
        }
        if ((v802 - 3) < 0xFFFFFFFE)
        {
          uint64_t v42 = a3;
          uint64_t v34 = a4;
          uint64_t v48 = v922;
          if (v802 == 3) {
            *((void *)v939 + 1) = 0;
          }
          goto LABEL_89;
        }
        unint64_t v804 = (unint64_t)(v853 + 8);
      }
      else
      {
        uint64_t v42 = a3;
        uint64_t v34 = a4;
        uint64_t v48 = v922;
        if ((v939[1] & 0x7F) != 2 && !*((_DWORD *)v939 + 3)) {
          goto LABEL_89;
        }
        uint64_t v803 = *((void *)v939 + 2);
        if ((v803 & 4) == 0) {
          goto LABEL_89;
        }
        unint64_t v804 = v803 & 0xFFFFFFFFFFFFFFF8;
        if (!v804) {
          goto LABEL_89;
        }
      }
      *(void *)&long long v940 = &v939;
      sub_1CC5FA668(v804 + 16, &v940);
      uint64_t v42 = a3;
      uint64_t v34 = a4;
      uint64_t v48 = v922;
    }
LABEL_89:
    uint64_t v110 = v928 + 6;
    uint64_t v111 = v928[5];
    *((void *)v109 + 3) = v111;
    uint64_t v112 = *(void *)(v111 + 32);
    uint64_t v113 = *((unsigned int *)v109 + 10);
    if (v113)
    {
      uint64_t v638 = *((void *)v109 + 4);
      uint64_t v639 = *(void *)(v112 + 40);
      uint64_t v640 = 32 * v113;
      do
      {
        if (!*(unsigned char *)v638)
        {
          uint64_t v641 = *(unsigned int *)(v638 + 4);
          if ((int)v641 >= 0) {
            uint64_t v642 = (uint64_t *)(*(void *)(v639 + 272) + 8 * v641);
          }
          else {
            uint64_t v642 = (uint64_t *)(*(void *)(v639 + 24) + 16 * (v641 & 0x7FFFFFFF) + 8);
          }
          uint64_t v643 = *v642;
          if (*v642)
          {
            uint64_t v644 = *(void *)(v643 + 16);
            *(void *)(v643 + 16) = v638;
            *(void *)(v638 + 16) = v644;
            if (*(unsigned char *)(v638 + 3))
            {
              *(void *)(v638 + 24) = v643;
            }
            else
            {
              *(void *)(v638 + 24) = 0;
              uint64_t v642 = (uint64_t *)(v644 + 24);
            }
          }
          else
          {
            *(void *)(v638 + 16) = v638;
            *(void *)(v638 + 24) = 0;
          }
          *uint64_t v642 = v638;
        }
        v638 += 32;
        v640 -= 32;
      }
      while (v640);
    }
    uint64_t v114 = *(void *)(v112 + 728);
    if (v114) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v114 + 24))(v114, v109);
    }
    unint64_t v115 = *v110 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v109 = v115 | *(void *)v109 & 7;
    *((void *)v109 + 1) = v110;
    *(void *)(v115 + 8) = v109;
    unint64_t *v110 = *v110 & 7 | (unint64_t)v109;
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0x1000000;
    DWORD1(v940) = v46;
    llvm::MachineInstr::addOperand(v109, v108, (const llvm::MachineOperand *)&v940);
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0;
    DWORD1(v940) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v109, v108, (const llvm::MachineOperand *)&v940);
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = a2;
    LODWORD(v940) = 4;
    llvm::MachineInstr::addOperand(v109, v108, (const llvm::MachineOperand *)&v940);
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0;
    DWORD1(v940) = v912;
    llvm::MachineInstr::addOperand(v109, v108, (const llvm::MachineOperand *)&v940);
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = v915;
    LODWORD(v940) = 4;
    llvm::MachineInstr::addOperand(v109, v108, (const llvm::MachineOperand *)&v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    uint64_t v77 = v11;
    goto LABEL_93;
  }
  uint64_t v70 = *(_OWORD **)(a1 + 32);
  long long v71 = v70[5];
  long long v936 = v70[4];
  long long v937 = v71;
  long long v72 = v70[5];
  long long v934 = v70[4];
  long long v935 = v72;
  long long v73 = v70[7];
  long long v932 = v70[6];
  long long v933 = v73;
  uint64_t v74 = 8;
  if (a5) {
    uint64_t v74 = 6;
  }
  int v75 = &v70[v74];
  long long v76 = v75[1];
  long long v930 = *v75;
  long long v931 = v76;
  uint64_t v77 = v11;
  if (!(_BYTE)v936) {
    LODWORD(v936) = v936 & 0xFBFFFFFF;
  }
  if (!(_BYTE)v934) {
    LODWORD(v934) = v934 & 0xFBFFFFFF;
  }
  if (!(_BYTE)v932) {
    LODWORD(v932) = v932 & 0xFBFFFFFF;
  }
  if (!(_BYTE)v930) {
    LODWORD(v930) = v930 & 0xFBFFFFFF;
  }
  if (*(unsigned char *)(v34 + 292))
  {
    uint64_t v78 = *(void *)(v42 + 8);
    uint64_t v79 = (llvm::MachineFunction *)v928[4];
    *(void *)&v929[0] = v938;
    if (v938) {
      llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
    }
    unint64_t v80 = llvm::MachineFunction::CreateMachineInstr(v79, v78, (unsigned __int8 **)v929, 0);
    if (!*(void *)&v929[0]) {
      goto LABEL_59;
    }
    int v799 = **(unsigned char **)&v929[0];
    if ((v799 - 4) > 0x1E)
    {
      if ((v799 - 3) >= 0xFFFFFFFE) {
        uint64_t v852 = *(void *)&v929[0];
      }
      else {
        uint64_t v852 = 0;
      }
      if ((v799 - 3) < 0xFFFFFFFE)
      {
        uint64_t v42 = a3;
        uint64_t v34 = a4;
        uint64_t v48 = v922;
        if (v799 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
        goto LABEL_59;
      }
      unint64_t v801 = v852 + 8;
    }
    else
    {
      uint64_t v42 = a3;
      uint64_t v34 = a4;
      uint64_t v48 = v922;
      if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v929[0] + 12)) {
        goto LABEL_59;
      }
      uint64_t v800 = *(void *)(*(void *)&v929[0] + 16);
      if ((v800 & 4) == 0) {
        goto LABEL_59;
      }
      unint64_t v801 = v800 & 0xFFFFFFFFFFFFFFF8;
      if (!v801) {
        goto LABEL_59;
      }
    }
    *(void *)&long long v940 = v929;
    sub_1CC5FA668(v801 + 16, &v940);
    uint64_t v42 = a3;
    uint64_t v34 = a4;
    uint64_t v48 = v922;
LABEL_59:
    uint64_t v81 = v928 + 6;
    uint64_t v82 = v928[5];
    *((void *)v80 + 3) = v82;
    uint64_t v83 = *(void *)(v82 + 32);
    uint64_t v84 = *((unsigned int *)v80 + 10);
    if (v84)
    {
      uint64_t v631 = *((void *)v80 + 4);
      uint64_t v632 = *(void *)(v83 + 40);
      uint64_t v633 = 32 * v84;
      do
      {
        if (!*(unsigned char *)v631)
        {
          uint64_t v634 = *(unsigned int *)(v631 + 4);
          if ((int)v634 >= 0) {
            v635 = (uint64_t *)(*(void *)(v632 + 272) + 8 * v634);
          }
          else {
            v635 = (uint64_t *)(*(void *)(v632 + 24) + 16 * (v634 & 0x7FFFFFFF) + 8);
          }
          uint64_t v636 = *v635;
          if (*v635)
          {
            uint64_t v637 = *(void *)(v636 + 16);
            *(void *)(v636 + 16) = v631;
            *(void *)(v631 + 16) = v637;
            if (*(unsigned char *)(v631 + 3))
            {
              *(void *)(v631 + 24) = v636;
            }
            else
            {
              *(void *)(v631 + 24) = 0;
              v635 = (uint64_t *)(v637 + 24);
            }
          }
          else
          {
            *(void *)(v631 + 16) = v631;
            *(void *)(v631 + 24) = 0;
          }
          uint64_t *v635 = v631;
        }
        v631 += 32;
        v633 -= 32;
      }
      while (v633);
    }
    uint64_t v85 = *(void *)(v83 + 728);
    if (v85) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v85 + 24))(v85, v80);
    }
    unint64_t v86 = *v81 & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v80 = v86 | *(void *)v80 & 7;
    *((void *)v80 + 1) = v81;
    *(void *)(v86 + 8) = v80;
    unint64_t *v81 = *v81 & 7 | (unint64_t)v80;
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0x1000000;
    DWORD1(v940) = v46;
    llvm::MachineInstr::addOperand(v80, v79, (const llvm::MachineOperand *)&v940);
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0;
    DWORD1(v940) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand(v80, v79, (const llvm::MachineOperand *)&v940);
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = a2;
    LODWORD(v940) = 4;
    llvm::MachineInstr::addOperand(v80, v79, (const llvm::MachineOperand *)&v940);
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0;
    DWORD1(v940) = v912;
    llvm::MachineInstr::addOperand(v80, v79, (const llvm::MachineOperand *)&v940);
    *((void *)&v940 + 1) = 0;
    *(void *)&long long v941 = v915;
    LODWORD(v940) = 4;
    llvm::MachineInstr::addOperand(v80, v79, (const llvm::MachineOperand *)&v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    uint64_t v77 = v11;
  }
  if (a5)
  {
    uint64_t v87 = *(void *)(v42 + 8) + 569760;
    int v88 = (llvm::MachineFunction *)v928[4];
    *(void *)&v929[0] = v938;
    if (v938) {
      llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
    }
    uint64_t v89 = llvm::MachineFunction::CreateMachineInstr(v88, v87, (unsigned __int8 **)v929, 0);
    if (!*(void *)&v929[0]) {
      goto LABEL_67;
    }
    int v806 = **(unsigned char **)&v929[0];
    if ((v806 - 4) > 0x1E)
    {
      if ((v806 - 3) >= 0xFFFFFFFE) {
        uint64_t v854 = *(void *)&v929[0];
      }
      else {
        uint64_t v854 = 0;
      }
      if ((v806 - 3) < 0xFFFFFFFE)
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v806 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
        goto LABEL_67;
      }
      unint64_t v808 = v854 + 8;
    }
    else
    {
      uint64_t v34 = a4;
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v77 = v918;
      uint64_t v48 = v922;
      if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v929[0] + 12)) {
        goto LABEL_67;
      }
      uint64_t v807 = *(void *)(*(void *)&v929[0] + 16);
      if ((v807 & 4) == 0) {
        goto LABEL_67;
      }
      unint64_t v808 = v807 & 0xFFFFFFFFFFFFFFF8;
      if (!v808) {
        goto LABEL_67;
      }
    }
    *(void *)&long long v940 = v929;
    sub_1CC5FA668(v808 + 16, &v940);
    uint64_t v34 = a4;
    uint64_t v69 = (llvm::MachineInstr *)a1;
    uint64_t v42 = a3;
    uint64_t v77 = v918;
    uint64_t v48 = v922;
LABEL_67:
    uint64_t v90 = v928 + 6;
    uint64_t v91 = v928[5];
    *((void *)v89 + 3) = v91;
    uint64_t v92 = *(void *)(v91 + 32);
    uint64_t v93 = *((unsigned int *)v89 + 10);
    if (v93)
    {
      uint64_t v645 = *((void *)v89 + 4);
      uint64_t v646 = *(void *)(v92 + 40);
      uint64_t v647 = 32 * v93;
      do
      {
        if (!*(unsigned char *)v645)
        {
          uint64_t v648 = *(unsigned int *)(v645 + 4);
          if ((int)v648 >= 0) {
            uint64_t v649 = (uint64_t *)(*(void *)(v646 + 272) + 8 * v648);
          }
          else {
            uint64_t v649 = (uint64_t *)(*(void *)(v646 + 24) + 16 * (v648 & 0x7FFFFFFF) + 8);
          }
          uint64_t v650 = *v649;
          if (*v649)
          {
            uint64_t v651 = *(void *)(v650 + 16);
            *(void *)(v650 + 16) = v645;
            *(void *)(v645 + 16) = v651;
            if (*(unsigned char *)(v645 + 3))
            {
              *(void *)(v645 + 24) = v650;
            }
            else
            {
              *(void *)(v645 + 24) = 0;
              uint64_t v649 = (uint64_t *)(v651 + 24);
            }
          }
          else
          {
            *(void *)(v645 + 16) = v645;
            *(void *)(v645 + 24) = 0;
          }
          *uint64_t v649 = v645;
        }
        v645 += 32;
        v647 -= 32;
      }
      while (v647);
    }
    uint64_t v94 = *(void *)(v92 + 728);
    if (v94) {
      (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v94 + 24))(v94, v89);
    }
    unint64_t v95 = *v90 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v89 = v95 | *(void *)v89 & 7;
    *((void *)v89 + 1) = v90;
    *(void *)(v95 + 8) = v89;
    *uint64_t v90 = *v90 & 7 | (unint64_t)v89;
    *((void *)&v940 + 1) = 0;
    long long v941 = 0uLL;
    LODWORD(v940) = 0x1000000;
    DWORD1(v940) = v43;
    llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v940);
    uint64_t v96 = (const llvm::MachineOperand *)&v936;
    goto LABEL_112;
  }
  uint64_t v127 = 569904;
  if (!(_BYTE)v932) {
    uint64_t v127 = 569952;
  }
  uint64_t v128 = *(void *)(v42 + 8) + v127;
  int v88 = (llvm::MachineFunction *)v928[4];
  *(void *)&v929[0] = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
  }
  uint64_t v89 = llvm::MachineFunction::CreateMachineInstr(v88, v128, (unsigned __int8 **)v929, 0);
  if (*(void *)&v929[0])
  {
    int v812 = **(unsigned char **)&v929[0];
    if ((v812 - 4) > 0x1E)
    {
      if ((v812 - 3) >= 0xFFFFFFFE) {
        uint64_t v856 = *(void *)&v929[0];
      }
      else {
        uint64_t v856 = 0;
      }
      if ((v812 - 3) < 0xFFFFFFFE)
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v812 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
        goto LABEL_108;
      }
      unint64_t v814 = v856 + 8;
    }
    else
    {
      uint64_t v34 = a4;
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v77 = v918;
      uint64_t v48 = v922;
      if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v929[0] + 12)) {
        goto LABEL_108;
      }
      uint64_t v813 = *(void *)(*(void *)&v929[0] + 16);
      if ((v813 & 4) == 0) {
        goto LABEL_108;
      }
      unint64_t v814 = v813 & 0xFFFFFFFFFFFFFFF8;
      if (!v814) {
        goto LABEL_108;
      }
    }
    *(void *)&long long v940 = v929;
    sub_1CC5FA668(v814 + 16, &v940);
    uint64_t v34 = a4;
    uint64_t v69 = (llvm::MachineInstr *)a1;
    uint64_t v42 = a3;
    uint64_t v77 = v918;
    uint64_t v48 = v922;
  }
LABEL_108:
  unint64_t v129 = v928 + 6;
  uint64_t v130 = v928[5];
  *((void *)v89 + 3) = v130;
  uint64_t v131 = *(void *)(v130 + 32);
  uint64_t v132 = *((unsigned int *)v89 + 10);
  if (v132)
  {
    uint64_t v659 = *((void *)v89 + 4);
    uint64_t v660 = *(void *)(v131 + 40);
    uint64_t v661 = 32 * v132;
    do
    {
      if (!*(unsigned char *)v659)
      {
        uint64_t v662 = *(unsigned int *)(v659 + 4);
        if ((int)v662 >= 0) {
          __int16 v663 = (uint64_t *)(*(void *)(v660 + 272) + 8 * v662);
        }
        else {
          __int16 v663 = (uint64_t *)(*(void *)(v660 + 24) + 16 * (v662 & 0x7FFFFFFF) + 8);
        }
        uint64_t v664 = *v663;
        if (*v663)
        {
          uint64_t v665 = *(void *)(v664 + 16);
          *(void *)(v664 + 16) = v659;
          *(void *)(v659 + 16) = v665;
          if (*(unsigned char *)(v659 + 3))
          {
            *(void *)(v659 + 24) = v664;
          }
          else
          {
            *(void *)(v659 + 24) = 0;
            __int16 v663 = (uint64_t *)(v665 + 24);
          }
        }
        else
        {
          *(void *)(v659 + 16) = v659;
          *(void *)(v659 + 24) = 0;
        }
        *__int16 v663 = v659;
      }
      v659 += 32;
      v661 -= 32;
    }
    while (v661);
  }
  uint64_t v133 = *(void *)(v131 + 728);
  if (v133) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v133 + 24))(v133, v89);
  }
  unint64_t v134 = *v129 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v89 = v134 | *(void *)v89 & 7;
  *((void *)v89 + 1) = v129;
  *(void *)(v134 + 8) = v89;
  unint64_t *v129 = *v129 & 7 | (unint64_t)v89;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v43;
  llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v940);
  llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v934);
  uint64_t v96 = (const llvm::MachineOperand *)&v932;
LABEL_112:
  llvm::MachineInstr::addOperand(v89, v88, v96);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 2;
  llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v89, v88, (const llvm::MachineOperand *)&v940);
  unint64_t v135 = (llvm::MachineFunction *)v916;
  int v926 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v916, "", 0);
  *(void *)(*(void *)(v916 + 24) + 16 * (v926 & 0x7FFFFFFF)) = &off_1E66A4340;
  uint64_t v136 = *(void *)(v916 + 8);
  uint64_t v137 = v917;
  if (v136) {
    (*(void (**)(uint64_t))(*(void *)v136 + 24))(v136);
  }
  unint64_t v138 = (unsigned __int8 *)*((void *)v69 + 4);
  switch(*((void *)v138 + 6))
  {
    case 1:
      uint64_t v237 = 496176;
      if (a5) {
        uint64_t v237 = 492912;
      }
      uint64_t v238 = *(void *)(v42 + 8) + v237;
      unint64_t v141 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v142 = llvm::MachineFunction::CreateMachineInstr(v141, v238, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_246;
      }
      int v877 = **(unsigned char **)&v929[0];
      if ((v877 - 4) > 0x1E)
      {
        if ((v877 - 3) >= 0xFFFFFFFE) {
          uint64_t v900 = *(void *)&v929[0];
        }
        else {
          uint64_t v900 = 0;
        }
        if ((v877 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v879 = v900 + 8;
LABEL_1515:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v879 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          goto LABEL_246;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v877 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v878 = *(void *)(*(void *)&v929[0] + 16);
          if ((v878 & 4) != 0)
          {
            unint64_t v879 = v878 & 0xFFFFFFFFFFFFFFF8;
            if (v879) {
              goto LABEL_1515;
            }
          }
        }
      }
LABEL_246:
      uint64_t v143 = v928 + 6;
      uint64_t v239 = v928[5];
      *((void *)v142 + 3) = v239;
      uint64_t v145 = *(void *)(v239 + 32);
      uint64_t v240 = *((unsigned int *)v142 + 10);
      if (v240)
      {
        uint64_t v241 = *((void *)v142 + 4);
        uint64_t v242 = *(void *)(v145 + 40);
        uint64_t v243 = 32 * v240;
        do
        {
          if (!*(unsigned char *)v241)
          {
            uint64_t v244 = *(unsigned int *)(v241 + 4);
            if ((int)v244 >= 0) {
              uint64_t v245 = (uint64_t *)(*(void *)(v242 + 272) + 8 * v244);
            }
            else {
              uint64_t v245 = (uint64_t *)(*(void *)(v242 + 24) + 16 * (v244 & 0x7FFFFFFF) + 8);
            }
            uint64_t v246 = *v245;
            if (*v245)
            {
              uint64_t v247 = *(void *)(v246 + 16);
              *(void *)(v246 + 16) = v241;
              *(void *)(v241 + 16) = v247;
              if (*(unsigned char *)(v241 + 3))
              {
                *(void *)(v241 + 24) = v246;
              }
              else
              {
                *(void *)(v241 + 24) = 0;
                uint64_t v245 = (uint64_t *)(v247 + 24);
              }
            }
            else
            {
              *(void *)(v241 + 16) = v241;
              *(void *)(v241 + 24) = 0;
            }
            *uint64_t v245 = v241;
          }
          v241 += 32;
          v243 -= 32;
        }
        while (v243);
      }
      goto LABEL_298;
    case 2:
      uint64_t v216 = *(void *)(v42 + 8) + 35520;
      unint64_t v141 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v142 = llvm::MachineFunction::CreateMachineInstr(v141, v216, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_220;
      }
      int v871 = **(unsigned char **)&v929[0];
      if ((v871 - 4) > 0x1E)
      {
        if ((v871 - 3) >= 0xFFFFFFFE) {
          uint64_t v898 = *(void *)&v929[0];
        }
        else {
          uint64_t v898 = 0;
        }
        if ((v871 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v873 = v898 + 8;
LABEL_1503:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v873 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          goto LABEL_220;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v871 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v872 = *(void *)(*(void *)&v929[0] + 16);
          if ((v872 & 4) != 0)
          {
            unint64_t v873 = v872 & 0xFFFFFFFFFFFFFFF8;
            if (v873) {
              goto LABEL_1503;
            }
          }
        }
      }
LABEL_220:
      uint64_t v217 = v928 + 6;
      uint64_t v218 = v928[5];
      *((void *)v142 + 3) = v218;
      uint64_t v219 = *(void *)(v218 + 32);
      uint64_t v220 = *((unsigned int *)v142 + 10);
      if (v220)
      {
        uint64_t v701 = *((void *)v142 + 4);
        uint64_t v702 = *(void *)(v219 + 40);
        uint64_t v703 = 32 * v220;
        do
        {
          if (!*(unsigned char *)v701)
          {
            uint64_t v704 = *(unsigned int *)(v701 + 4);
            if ((int)v704 >= 0) {
              unint64_t v705 = (uint64_t *)(*(void *)(v702 + 272) + 8 * v704);
            }
            else {
              unint64_t v705 = (uint64_t *)(*(void *)(v702 + 24) + 16 * (v704 & 0x7FFFFFFF) + 8);
            }
            uint64_t v706 = *v705;
            if (*v705)
            {
              uint64_t v707 = *(void *)(v706 + 16);
              *(void *)(v706 + 16) = v701;
              *(void *)(v701 + 16) = v707;
              if (*(unsigned char *)(v701 + 3))
              {
                *(void *)(v701 + 24) = v706;
              }
              else
              {
                *(void *)(v701 + 24) = 0;
                unint64_t v705 = (uint64_t *)(v707 + 24);
              }
            }
            else
            {
              *(void *)(v701 + 16) = v701;
              *(void *)(v701 + 24) = 0;
            }
            *unint64_t v705 = v701;
          }
          v701 += 32;
          v703 -= 32;
        }
        while (v703);
      }
      uint64_t v221 = *(void *)(v219 + 728);
      if (v221) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v221 + 24))(v221, v142);
      }
      unint64_t v222 = *v217 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v142 = v222 | *(void *)v142 & 7;
      *((void *)v142 + 1) = v217;
      *(void *)(v222 + 8) = v142;
      unint64_t *v217 = *v217 & 7 | (unint64_t)v142;
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0x1000000;
      DWORD1(v940) = v926;
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v940);
      goto LABEL_301;
    case 3:
      __break(1u);
      goto LABEL_1072;
    case 4:
      uint64_t v280 = *(void *)(v42 + 8) + 458928;
      uint64_t v224 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v225 = llvm::MachineFunction::CreateMachineInstr(v224, v280, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_312;
      }
      int v892 = **(unsigned char **)&v929[0];
      if ((v892 - 4) > 0x1E)
      {
        if ((v892 - 3) >= 0xFFFFFFFE) {
          uint64_t v905 = *(void *)&v929[0];
        }
        else {
          uint64_t v905 = 0;
        }
        if ((v892 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v894 = v905 + 8;
LABEL_1545:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v894 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          goto LABEL_312;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v892 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v893 = *(void *)(*(void *)&v929[0] + 16);
          if ((v893 & 4) != 0)
          {
            unint64_t v894 = v893 & 0xFFFFFFFFFFFFFFF8;
            if (v894) {
              goto LABEL_1545;
            }
          }
        }
      }
LABEL_312:
      uint64_t v226 = v928 + 6;
      uint64_t v281 = v928[5];
      *((void *)v225 + 3) = v281;
      uint64_t v228 = *(void *)(v281 + 32);
      uint64_t v282 = *((unsigned int *)v225 + 10);
      if (v282)
      {
        uint64_t v722 = *((void *)v225 + 4);
        uint64_t v723 = *(void *)(v228 + 40);
        uint64_t v724 = 32 * v282;
        do
        {
          if (!*(unsigned char *)v722)
          {
            uint64_t v725 = *(unsigned int *)(v722 + 4);
            if ((int)v725 >= 0) {
              uint64_t v726 = (uint64_t *)(*(void *)(v723 + 272) + 8 * v725);
            }
            else {
              uint64_t v726 = (uint64_t *)(*(void *)(v723 + 24) + 16 * (v725 & 0x7FFFFFFF) + 8);
            }
            uint64_t v727 = *v726;
            if (*v726)
            {
              uint64_t v728 = *(void *)(v727 + 16);
              *(void *)(v727 + 16) = v722;
              *(void *)(v722 + 16) = v728;
              if (*(unsigned char *)(v722 + 3))
              {
                *(void *)(v722 + 24) = v727;
              }
              else
              {
                *(void *)(v722 + 24) = 0;
                uint64_t v726 = (uint64_t *)(v728 + 24);
              }
            }
            else
            {
              *(void *)(v722 + 16) = v722;
              *(void *)(v722 + 24) = 0;
            }
            *uint64_t v726 = v722;
          }
          v722 += 32;
          v724 -= 32;
        }
        while (v724);
      }
      goto LABEL_313;
    case 5:
      uint64_t v273 = *(void *)(v42 + 8) + 356016;
      uint64_t v224 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v225 = llvm::MachineFunction::CreateMachineInstr(v224, v273, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_305;
      }
      int v889 = **(unsigned char **)&v929[0];
      if ((v889 - 4) > 0x1E)
      {
        if ((v889 - 3) >= 0xFFFFFFFE) {
          uint64_t v904 = *(void *)&v929[0];
        }
        else {
          uint64_t v904 = 0;
        }
        if ((v889 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v891 = v904 + 8;
LABEL_1539:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v891 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          goto LABEL_305;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v889 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v890 = *(void *)(*(void *)&v929[0] + 16);
          if ((v890 & 4) != 0)
          {
            unint64_t v891 = v890 & 0xFFFFFFFFFFFFFFF8;
            if (v891) {
              goto LABEL_1539;
            }
          }
        }
      }
LABEL_305:
      uint64_t v274 = v928 + 6;
      uint64_t v275 = v928[5];
      *((void *)v225 + 3) = v275;
      uint64_t v276 = *(void *)(v275 + 32);
      uint64_t v277 = *((unsigned int *)v225 + 10);
      if (v277)
      {
        uint64_t v715 = *((void *)v225 + 4);
        uint64_t v716 = *(void *)(v276 + 40);
        uint64_t v717 = 32 * v277;
        do
        {
          if (!*(unsigned char *)v715)
          {
            uint64_t v718 = *(unsigned int *)(v715 + 4);
            if ((int)v718 >= 0) {
              int v719 = (uint64_t *)(*(void *)(v716 + 272) + 8 * v718);
            }
            else {
              int v719 = (uint64_t *)(*(void *)(v716 + 24) + 16 * (v718 & 0x7FFFFFFF) + 8);
            }
            uint64_t v720 = *v719;
            if (*v719)
            {
              uint64_t v721 = *(void *)(v720 + 16);
              *(void *)(v720 + 16) = v715;
              *(void *)(v715 + 16) = v721;
              if (*(unsigned char *)(v715 + 3))
              {
                *(void *)(v715 + 24) = v720;
              }
              else
              {
                *(void *)(v715 + 24) = 0;
                int v719 = (uint64_t *)(v721 + 24);
              }
            }
            else
            {
              *(void *)(v715 + 16) = v715;
              *(void *)(v715 + 24) = 0;
            }
            uint64_t *v719 = v715;
          }
          v715 += 32;
          v717 -= 32;
        }
        while (v717);
      }
      uint64_t v278 = *(void *)(v276 + 728);
      if (v278) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v278 + 24))(v278, v225);
      }
      unint64_t v279 = *v274 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v225 = v279 | *(void *)v225 & 7;
      *((void *)v225 + 1) = v274;
      *(void *)(v279 + 8) = v225;
      *uint64_t v274 = *v274 & 7 | (unint64_t)v225;
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0x1000000;
      DWORD1(v940) = v926;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0x4000000;
      DWORD1(v940) = v43;
      goto LABEL_316;
    case 6:
      uint64_t v223 = *(void *)(v42 + 8) + 407472;
      uint64_t v224 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v225 = llvm::MachineFunction::CreateMachineInstr(v224, v223, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_227;
      }
      int v874 = **(unsigned char **)&v929[0];
      if ((v874 - 4) > 0x1E)
      {
        if ((v874 - 3) >= 0xFFFFFFFE) {
          uint64_t v899 = *(void *)&v929[0];
        }
        else {
          uint64_t v899 = 0;
        }
        if ((v874 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v876 = v899 + 8;
LABEL_1509:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v876 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          goto LABEL_227;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v874 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v875 = *(void *)(*(void *)&v929[0] + 16);
          if ((v875 & 4) != 0)
          {
            unint64_t v876 = v875 & 0xFFFFFFFFFFFFFFF8;
            if (v876) {
              goto LABEL_1509;
            }
          }
        }
      }
LABEL_227:
      uint64_t v226 = v928 + 6;
      uint64_t v227 = v928[5];
      *((void *)v225 + 3) = v227;
      uint64_t v228 = *(void *)(v227 + 32);
      uint64_t v229 = *((unsigned int *)v225 + 10);
      if (v229)
      {
        uint64_t v230 = *((void *)v225 + 4);
        uint64_t v231 = *(void *)(v228 + 40);
        uint64_t v232 = 32 * v229;
        do
        {
          if (!*(unsigned char *)v230)
          {
            uint64_t v233 = *(unsigned int *)(v230 + 4);
            if ((int)v233 >= 0) {
              int v234 = (uint64_t *)(*(void *)(v231 + 272) + 8 * v233);
            }
            else {
              int v234 = (uint64_t *)(*(void *)(v231 + 24) + 16 * (v233 & 0x7FFFFFFF) + 8);
            }
            uint64_t v235 = *v234;
            if (*v234)
            {
              uint64_t v236 = *(void *)(v235 + 16);
              *(void *)(v235 + 16) = v230;
              *(void *)(v230 + 16) = v236;
              if (*(unsigned char *)(v230 + 3))
              {
                *(void *)(v230 + 24) = v235;
              }
              else
              {
                *(void *)(v230 + 24) = 0;
                int v234 = (uint64_t *)(v236 + 24);
              }
            }
            else
            {
              *(void *)(v230 + 16) = v230;
              *(void *)(v230 + 24) = 0;
            }
            *int v234 = v230;
          }
          v230 += 32;
          v232 -= 32;
        }
        while (v232);
      }
      goto LABEL_313;
    case 7:
      uint64_t v248 = *(void *)(v42 + 8) + 304560;
      uint64_t v224 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v225 = llvm::MachineFunction::CreateMachineInstr(v224, v248, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_263;
      }
      int v880 = **(unsigned char **)&v929[0];
      if ((v880 - 4) > 0x1E)
      {
        if ((v880 - 3) >= 0xFFFFFFFE) {
          uint64_t v901 = *(void *)&v929[0];
        }
        else {
          uint64_t v901 = 0;
        }
        if ((v880 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v882 = v901 + 8;
LABEL_1521:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v882 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          goto LABEL_263;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v880 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v881 = *(void *)(*(void *)&v929[0] + 16);
          if ((v881 & 4) != 0)
          {
            unint64_t v882 = v881 & 0xFFFFFFFFFFFFFFF8;
            if (v882) {
              goto LABEL_1521;
            }
          }
        }
      }
LABEL_263:
      uint64_t v226 = v928 + 6;
      uint64_t v249 = v928[5];
      *((void *)v225 + 3) = v249;
      uint64_t v228 = *(void *)(v249 + 32);
      uint64_t v250 = *((unsigned int *)v225 + 10);
      if (v250)
      {
        uint64_t v251 = *((void *)v225 + 4);
        uint64_t v252 = *(void *)(v228 + 40);
        uint64_t v253 = 32 * v250;
        do
        {
          if (!*(unsigned char *)v251)
          {
            uint64_t v254 = *(unsigned int *)(v251 + 4);
            if ((int)v254 >= 0) {
              uint64_t v255 = (uint64_t *)(*(void *)(v252 + 272) + 8 * v254);
            }
            else {
              uint64_t v255 = (uint64_t *)(*(void *)(v252 + 24) + 16 * (v254 & 0x7FFFFFFF) + 8);
            }
            uint64_t v256 = *v255;
            if (*v255)
            {
              uint64_t v257 = *(void *)(v256 + 16);
              *(void *)(v256 + 16) = v251;
              *(void *)(v251 + 16) = v257;
              if (*(unsigned char *)(v251 + 3))
              {
                *(void *)(v251 + 24) = v256;
              }
              else
              {
                *(void *)(v251 + 24) = 0;
                uint64_t v255 = (uint64_t *)(v257 + 24);
              }
            }
            else
            {
              *(void *)(v251 + 16) = v251;
              *(void *)(v251 + 24) = 0;
            }
            uint64_t *v255 = v251;
          }
          v251 += 32;
          v253 -= 32;
        }
        while (v253);
      }
LABEL_313:
      uint64_t v283 = *(void *)(v228 + 728);
      if (v283) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v283 + 24))(v283, v225);
      }
      unint64_t v284 = *v226 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v225 = v284 | *(void *)v225 & 7;
      *((void *)v225 + 1) = v226;
      *(void *)(v284 + 8) = v225;
      *uint64_t v226 = *v226 & 7 | (unint64_t)v225;
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0x1000000;
      DWORD1(v940) = v926;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0;
      DWORD1(v940) = v43;
LABEL_316:
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v930);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0;
      DWORD1(v940) = v43;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      long long v940 = 0u;
      long long v941 = 0u;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      long long v940 = 0u;
      long long v941 = 0u;
      llvm::MachineInstr::addOperand(v225, v224, (const llvm::MachineOperand *)&v940);
      goto LABEL_317;
    case 8:
      uint64_t v206 = *(void *)(v42 + 8) + 16992;
      unint64_t v141 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v142 = llvm::MachineFunction::CreateMachineInstr(v141, v206, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_203;
      }
      int v868 = **(unsigned char **)&v929[0];
      if ((v868 - 4) > 0x1E)
      {
        if ((v868 - 3) >= 0xFFFFFFFE) {
          uint64_t v897 = *(void *)&v929[0];
        }
        else {
          uint64_t v897 = 0;
        }
        if ((v868 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v870 = v897 + 8;
LABEL_1497:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v870 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          goto LABEL_203;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v868 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v869 = *(void *)(*(void *)&v929[0] + 16);
          if ((v869 & 4) != 0)
          {
            unint64_t v870 = v869 & 0xFFFFFFFFFFFFFFF8;
            if (v870) {
              goto LABEL_1497;
            }
          }
        }
      }
LABEL_203:
      uint64_t v143 = v928 + 6;
      uint64_t v207 = v928[5];
      *((void *)v142 + 3) = v207;
      uint64_t v145 = *(void *)(v207 + 32);
      uint64_t v208 = *((unsigned int *)v142 + 10);
      if (v208)
      {
        uint64_t v209 = *((void *)v142 + 4);
        uint64_t v210 = *(void *)(v145 + 40);
        uint64_t v211 = 32 * v208;
        do
        {
          if (!*(unsigned char *)v209)
          {
            uint64_t v212 = *(unsigned int *)(v209 + 4);
            if ((int)v212 >= 0) {
              uint64_t v213 = (uint64_t *)(*(void *)(v210 + 272) + 8 * v212);
            }
            else {
              uint64_t v213 = (uint64_t *)(*(void *)(v210 + 24) + 16 * (v212 & 0x7FFFFFFF) + 8);
            }
            uint64_t v214 = *v213;
            if (*v213)
            {
              uint64_t v215 = *(void *)(v214 + 16);
              *(void *)(v214 + 16) = v209;
              *(void *)(v209 + 16) = v215;
              if (*(unsigned char *)(v209 + 3))
              {
                *(void *)(v209 + 24) = v214;
              }
              else
              {
                *(void *)(v209 + 24) = 0;
                uint64_t v213 = (uint64_t *)(v215 + 24);
              }
            }
            else
            {
              *(void *)(v209 + 16) = v209;
              *(void *)(v209 + 24) = 0;
            }
            uint64_t *v213 = v209;
          }
          v209 += 32;
          v211 -= 32;
        }
        while (v211);
      }
      goto LABEL_298;
    case 9:
      uint64_t v268 = *(void *)(v42 + 8) + 580560;
      unint64_t v141 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v142 = llvm::MachineFunction::CreateMachineInstr(v141, v268, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_297;
      }
      int v886 = **(unsigned char **)&v929[0];
      if ((v886 - 4) > 0x1E)
      {
        if ((v886 - 3) >= 0xFFFFFFFE) {
          uint64_t v903 = *(void *)&v929[0];
        }
        else {
          uint64_t v903 = 0;
        }
        if ((v886 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v888 = v903 + 8;
LABEL_1533:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v888 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          goto LABEL_297;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v886 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v887 = *(void *)(*(void *)&v929[0] + 16);
          if ((v887 & 4) != 0)
          {
            unint64_t v888 = v887 & 0xFFFFFFFFFFFFFFF8;
            if (v888) {
              goto LABEL_1533;
            }
          }
        }
      }
LABEL_297:
      uint64_t v143 = v928 + 6;
      uint64_t v269 = v928[5];
      *((void *)v142 + 3) = v269;
      uint64_t v145 = *(void *)(v269 + 32);
      uint64_t v270 = *((unsigned int *)v142 + 10);
      if (v270)
      {
        uint64_t v708 = *((void *)v142 + 4);
        uint64_t v709 = *(void *)(v145 + 40);
        uint64_t v710 = 32 * v270;
        do
        {
          if (!*(unsigned char *)v708)
          {
            uint64_t v711 = *(unsigned int *)(v708 + 4);
            if ((int)v711 >= 0) {
              __int16 v712 = (uint64_t *)(*(void *)(v709 + 272) + 8 * v711);
            }
            else {
              __int16 v712 = (uint64_t *)(*(void *)(v709 + 24) + 16 * (v711 & 0x7FFFFFFF) + 8);
            }
            uint64_t v713 = *v712;
            if (*v712)
            {
              uint64_t v714 = *(void *)(v713 + 16);
              *(void *)(v713 + 16) = v708;
              *(void *)(v708 + 16) = v714;
              if (*(unsigned char *)(v708 + 3))
              {
                *(void *)(v708 + 24) = v713;
              }
              else
              {
                *(void *)(v708 + 24) = 0;
                __int16 v712 = (uint64_t *)(v714 + 24);
              }
            }
            else
            {
              *(void *)(v708 + 16) = v708;
              *(void *)(v708 + 24) = 0;
            }
            uint64_t *v712 = v708;
          }
          v708 += 32;
          v710 -= 32;
        }
        while (v710);
      }
      goto LABEL_298;
    case 0xALL:
      uint64_t v196 = *(void *)(v42 + 8) + 645888;
      unint64_t v141 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v142 = llvm::MachineFunction::CreateMachineInstr(v141, v196, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_186;
      }
      int v865 = **(unsigned char **)&v929[0];
      if ((v865 - 4) > 0x1E)
      {
        if ((v865 - 3) >= 0xFFFFFFFE) {
          uint64_t v896 = *(void *)&v929[0];
        }
        else {
          uint64_t v896 = 0;
        }
        if ((v865 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v867 = v896 + 8;
LABEL_1491:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v867 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          goto LABEL_186;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v865 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v866 = *(void *)(*(void *)&v929[0] + 16);
          if ((v866 & 4) != 0)
          {
            unint64_t v867 = v866 & 0xFFFFFFFFFFFFFFF8;
            if (v867) {
              goto LABEL_1491;
            }
          }
        }
      }
LABEL_186:
      uint64_t v143 = v928 + 6;
      uint64_t v197 = v928[5];
      *((void *)v142 + 3) = v197;
      uint64_t v145 = *(void *)(v197 + 32);
      uint64_t v198 = *((unsigned int *)v142 + 10);
      if (v198)
      {
        uint64_t v199 = *((void *)v142 + 4);
        uint64_t v200 = *(void *)(v145 + 40);
        uint64_t v201 = 32 * v198;
        do
        {
          if (!*(unsigned char *)v199)
          {
            uint64_t v202 = *(unsigned int *)(v199 + 4);
            if ((int)v202 >= 0) {
              __int16 v203 = (uint64_t *)(*(void *)(v200 + 272) + 8 * v202);
            }
            else {
              __int16 v203 = (uint64_t *)(*(void *)(v200 + 24) + 16 * (v202 & 0x7FFFFFFF) + 8);
            }
            uint64_t v204 = *v203;
            if (*v203)
            {
              uint64_t v205 = *(void *)(v204 + 16);
              *(void *)(v204 + 16) = v199;
              *(void *)(v199 + 16) = v205;
              if (*(unsigned char *)(v199 + 3))
              {
                *(void *)(v199 + 24) = v204;
              }
              else
              {
                *(void *)(v199 + 24) = 0;
                __int16 v203 = (uint64_t *)(v205 + 24);
              }
            }
            else
            {
              *(void *)(v199 + 16) = v199;
              *(void *)(v199 + 24) = 0;
            }
            *__int16 v203 = v199;
          }
          v199 += 32;
          v201 -= 32;
        }
        while (v201);
      }
      goto LABEL_298;
    case 0xBLL:
      uint64_t v258 = *(void *)(v42 + 8) + 575904;
      unint64_t v141 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v142 = llvm::MachineFunction::CreateMachineInstr(v141, v258, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_280;
      }
      int v883 = **(unsigned char **)&v929[0];
      if ((v883 - 4) > 0x1E)
      {
        if ((v883 - 3) >= 0xFFFFFFFE) {
          uint64_t v902 = *(void *)&v929[0];
        }
        else {
          uint64_t v902 = 0;
        }
        if ((v883 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v885 = v902 + 8;
LABEL_1527:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v885 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          goto LABEL_280;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v883 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v884 = *(void *)(*(void *)&v929[0] + 16);
          if ((v884 & 4) != 0)
          {
            unint64_t v885 = v884 & 0xFFFFFFFFFFFFFFF8;
            if (v885) {
              goto LABEL_1527;
            }
          }
        }
      }
LABEL_280:
      uint64_t v143 = v928 + 6;
      uint64_t v259 = v928[5];
      *((void *)v142 + 3) = v259;
      uint64_t v145 = *(void *)(v259 + 32);
      uint64_t v260 = *((unsigned int *)v142 + 10);
      if (v260)
      {
        uint64_t v261 = *((void *)v142 + 4);
        uint64_t v262 = *(void *)(v145 + 40);
        uint64_t v263 = 32 * v260;
        do
        {
          if (!*(unsigned char *)v261)
          {
            uint64_t v264 = *(unsigned int *)(v261 + 4);
            if ((int)v264 >= 0) {
              unint64_t v265 = (uint64_t *)(*(void *)(v262 + 272) + 8 * v264);
            }
            else {
              unint64_t v265 = (uint64_t *)(*(void *)(v262 + 24) + 16 * (v264 & 0x7FFFFFFF) + 8);
            }
            uint64_t v266 = *v265;
            if (*v265)
            {
              uint64_t v267 = *(void *)(v266 + 16);
              *(void *)(v266 + 16) = v261;
              *(void *)(v261 + 16) = v267;
              if (*(unsigned char *)(v261 + 3))
              {
                *(void *)(v261 + 24) = v266;
              }
              else
              {
                *(void *)(v261 + 24) = 0;
                unint64_t v265 = (uint64_t *)(v267 + 24);
              }
            }
            else
            {
              *(void *)(v261 + 16) = v261;
              *(void *)(v261 + 24) = 0;
            }
            uint64_t *v265 = v261;
          }
          v261 += 32;
          v263 -= 32;
        }
        while (v263);
      }
      goto LABEL_298;
    default:
      uint64_t v139 = 135936;
      if (a5) {
        uint64_t v139 = 132672;
      }
      uint64_t v140 = *(void *)(v42 + 8) + v139;
      unint64_t v141 = (llvm::MachineFunction *)v928[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      int v142 = llvm::MachineFunction::CreateMachineInstr(v141, v140, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_120;
      }
      int v862 = **(unsigned char **)&v929[0];
      if ((v862 - 4) > 0x1E)
      {
        if ((v862 - 3) >= 0xFFFFFFFE) {
          uint64_t v895 = *(void *)&v929[0];
        }
        else {
          uint64_t v895 = 0;
        }
        if ((v862 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v864 = v895 + 8;
LABEL_1485:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v864 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          goto LABEL_120;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v862 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v863 = *(void *)(*(void *)&v929[0] + 16);
          if ((v863 & 4) != 0)
          {
            unint64_t v864 = v863 & 0xFFFFFFFFFFFFFFF8;
            if (v864) {
              goto LABEL_1485;
            }
          }
        }
      }
LABEL_120:
      uint64_t v143 = v928 + 6;
      uint64_t v144 = v928[5];
      *((void *)v142 + 3) = v144;
      uint64_t v145 = *(void *)(v144 + 32);
      uint64_t v146 = *((unsigned int *)v142 + 10);
      if (v146)
      {
        uint64_t v147 = *((void *)v142 + 4);
        uint64_t v148 = *(void *)(v145 + 40);
        uint64_t v149 = 32 * v146;
        do
        {
          if (!*(unsigned char *)v147)
          {
            uint64_t v150 = *(unsigned int *)(v147 + 4);
            if ((int)v150 >= 0) {
              int v151 = (uint64_t *)(*(void *)(v148 + 272) + 8 * v150);
            }
            else {
              int v151 = (uint64_t *)(*(void *)(v148 + 24) + 16 * (v150 & 0x7FFFFFFF) + 8);
            }
            uint64_t v152 = *v151;
            if (*v151)
            {
              uint64_t v153 = *(void *)(v152 + 16);
              *(void *)(v152 + 16) = v147;
              *(void *)(v147 + 16) = v153;
              if (*(unsigned char *)(v147 + 3))
              {
                *(void *)(v147 + 24) = v152;
              }
              else
              {
                *(void *)(v147 + 24) = 0;
                int v151 = (uint64_t *)(v153 + 24);
              }
            }
            else
            {
              *(void *)(v147 + 16) = v147;
              *(void *)(v147 + 24) = 0;
            }
            uint64_t *v151 = v147;
          }
          v147 += 32;
          v149 -= 32;
        }
        while (v149);
      }
LABEL_298:
      uint64_t v271 = *(void *)(v145 + 728);
      if (v271) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v271 + 24))(v271, v142);
      }
      unint64_t v272 = *v143 & 0xFFFFFFFFFFFFFFF8;
      *(void *)int v142 = v272 | *(void *)v142 & 7;
      *((void *)v142 + 1) = v143;
      *(void *)(v272 + 8) = v142;
      *uint64_t v143 = *v143 & 7 | (unint64_t)v142;
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0x1000000;
      DWORD1(v940) = v926;
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v940);
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0;
      DWORD1(v940) = v43;
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v940);
LABEL_301:
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v940);
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v930);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v940);
      long long v940 = 0u;
      long long v941 = 0u;
      llvm::MachineInstr::addOperand(v142, v141, (const llvm::MachineOperand *)&v940);
      uint64_t v48 = v922;
LABEL_317:
      if (a5)
      {
        uint64_t v285 = *(void *)(v42 + 8) + 573648;
        __int16 v286 = (llvm::MachineFunction *)v48[4];
        *(void *)&v929[0] = v938;
        if (v938) {
          llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
        }
        uint64_t v287 = llvm::MachineFunction::CreateMachineInstr(v286, v285, (unsigned __int8 **)v929, 0);
        if (!*(void *)&v929[0]) {
          goto LABEL_321;
        }
        int v824 = **(unsigned char **)&v929[0];
        if ((v824 - 4) > 0x1E)
        {
          if ((v824 - 3) >= 0xFFFFFFFE) {
            uint64_t v860 = *(void *)&v929[0];
          }
          else {
            uint64_t v860 = 0;
          }
          if ((v824 - 3) < 0xFFFFFFFE)
          {
            uint64_t v34 = a4;
            uint64_t v69 = (llvm::MachineInstr *)a1;
            uint64_t v42 = a3;
            uint64_t v137 = v917;
            uint64_t v77 = v918;
            uint64_t v48 = v922;
            if (v824 == 3) {
              *(void *)(*(void *)&v929[0] + 8) = 0;
            }
            goto LABEL_321;
          }
          unint64_t v826 = v860 + 8;
        }
        else
        {
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) != 2 && !*(_DWORD *)(*(void *)&v929[0] + 12)) {
            goto LABEL_321;
          }
          uint64_t v825 = *(void *)(*(void *)&v929[0] + 16);
          if ((v825 & 4) == 0) {
            goto LABEL_321;
          }
          unint64_t v826 = v825 & 0xFFFFFFFFFFFFFFF8;
          if (!v826) {
            goto LABEL_321;
          }
        }
        *(void *)&long long v940 = v929;
        sub_1CC5FA668(v826 + 16, &v940);
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
LABEL_321:
        uint64_t v288 = v48 + 6;
        uint64_t v289 = v48[5];
        *((void *)v287 + 3) = v289;
        uint64_t v290 = *(void *)(v289 + 32);
        uint64_t v291 = *((unsigned int *)v287 + 10);
        if (v291)
        {
          uint64_t v687 = *((void *)v287 + 4);
          uint64_t v688 = *(void *)(v290 + 40);
          uint64_t v689 = 32 * v291;
          do
          {
            if (!*(unsigned char *)v687)
            {
              uint64_t v690 = *(unsigned int *)(v687 + 4);
              if ((int)v690 >= 0) {
                __int16 v691 = (uint64_t *)(*(void *)(v688 + 272) + 8 * v690);
              }
              else {
                __int16 v691 = (uint64_t *)(*(void *)(v688 + 24) + 16 * (v690 & 0x7FFFFFFF) + 8);
              }
              uint64_t v692 = *v691;
              if (*v691)
              {
                uint64_t v693 = *(void *)(v692 + 16);
                *(void *)(v692 + 16) = v687;
                *(void *)(v687 + 16) = v693;
                if (*(unsigned char *)(v687 + 3))
                {
                  *(void *)(v687 + 24) = v692;
                }
                else
                {
                  *(void *)(v687 + 24) = 0;
                  __int16 v691 = (uint64_t *)(v693 + 24);
                }
              }
              else
              {
                *(void *)(v687 + 16) = v687;
                *(void *)(v687 + 24) = 0;
              }
              *__int16 v691 = v687;
            }
            v687 += 32;
            v689 -= 32;
          }
          while (v689);
        }
        uint64_t v292 = *(void *)(v290 + 728);
        if (v292) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v292 + 24))(v292, v287);
        }
        unint64_t v293 = *v288 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v287 = v293 | *(void *)v287 & 7;
        *((void *)v287 + 1) = v288;
        *(void *)(v293 + 8) = v287;
        *uint64_t v288 = *v288 & 7 | (unint64_t)v287;
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0x4000000;
        DWORD1(v940) = v926;
        llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v940);
        __int16 v294 = (const llvm::MachineOperand *)&v936;
        goto LABEL_334;
      }
      uint64_t v295 = 573792;
      if (!(_BYTE)v932) {
        uint64_t v295 = 573840;
      }
      uint64_t v296 = *(void *)(v42 + 8) + v295;
      __int16 v286 = (llvm::MachineFunction *)v48[4];
      *(void *)&v929[0] = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)v929, v938, 2);
      }
      uint64_t v287 = llvm::MachineFunction::CreateMachineInstr(v286, v296, (unsigned __int8 **)v929, 0);
      if (!*(void *)&v929[0]) {
        goto LABEL_330;
      }
      int v827 = **(unsigned char **)&v929[0];
      if ((v827 - 4) > 0x1E)
      {
        if ((v827 - 3) >= 0xFFFFFFFE) {
          uint64_t v861 = *(void *)&v929[0];
        }
        else {
          uint64_t v861 = 0;
        }
        if ((v827 - 3) >= 0xFFFFFFFE)
        {
          unint64_t v829 = v861 + 8;
LABEL_1387:
          *(void *)&long long v940 = v929;
          sub_1CC5FA668(v829 + 16, &v940);
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          goto LABEL_330;
        }
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v827 == 3) {
          *(void *)(*(void *)&v929[0] + 8) = 0;
        }
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if ((*(unsigned char *)(*(void *)&v929[0] + 1) & 0x7F) == 2 || *(_DWORD *)(*(void *)&v929[0] + 12))
        {
          uint64_t v828 = *(void *)(*(void *)&v929[0] + 16);
          if ((v828 & 4) != 0)
          {
            unint64_t v829 = v828 & 0xFFFFFFFFFFFFFFF8;
            if (v829) {
              goto LABEL_1387;
            }
          }
        }
      }
LABEL_330:
      uint64_t v297 = v48 + 6;
      uint64_t v298 = v48[5];
      *((void *)v287 + 3) = v298;
      uint64_t v299 = *(void *)(v298 + 32);
      uint64_t v300 = *((unsigned int *)v287 + 10);
      if (v300)
      {
        uint64_t v694 = *((void *)v287 + 4);
        uint64_t v695 = *(void *)(v299 + 40);
        uint64_t v696 = 32 * v300;
        do
        {
          if (!*(unsigned char *)v694)
          {
            uint64_t v697 = *(unsigned int *)(v694 + 4);
            if ((int)v697 >= 0) {
              uint64_t v698 = (uint64_t *)(*(void *)(v695 + 272) + 8 * v697);
            }
            else {
              uint64_t v698 = (uint64_t *)(*(void *)(v695 + 24) + 16 * (v697 & 0x7FFFFFFF) + 8);
            }
            uint64_t v699 = *v698;
            if (*v698)
            {
              uint64_t v700 = *(void *)(v699 + 16);
              *(void *)(v699 + 16) = v694;
              *(void *)(v694 + 16) = v700;
              if (*(unsigned char *)(v694 + 3))
              {
                *(void *)(v694 + 24) = v699;
              }
              else
              {
                *(void *)(v694 + 24) = 0;
                uint64_t v698 = (uint64_t *)(v700 + 24);
              }
            }
            else
            {
              *(void *)(v694 + 16) = v694;
              *(void *)(v694 + 24) = 0;
            }
            uint64_t *v698 = v694;
          }
          v694 += 32;
          v696 -= 32;
        }
        while (v696);
      }
      uint64_t v301 = *(void *)(v299 + 728);
      if (v301) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v301 + 24))(v301, v287);
      }
      unint64_t v302 = *v297 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v287 = v302 | *(void *)v287 & 7;
      *((void *)v287 + 1) = v297;
      *(void *)(v302 + 8) = v287;
      unint64_t *v297 = *v297 & 7 | (unint64_t)v287;
      *((void *)&v940 + 1) = 0;
      long long v941 = 0uLL;
      LODWORD(v940) = 0x4000000;
      DWORD1(v940) = v926;
      llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v940);
      llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v934);
      __int16 v294 = (const llvm::MachineOperand *)&v932;
LABEL_334:
      llvm::MachineInstr::addOperand(v287, v286, v294);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 2;
      llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v940);
      long long v940 = 0u;
      long long v941 = 0u;
      llvm::MachineInstr::addOperand(v287, v286, (const llvm::MachineOperand *)&v940);
      break;
  }
LABEL_335:
  uint64_t v303 = *(void *)(v42 + 8);
  uint64_t v304 = v48 + 6;
  if (*(unsigned char *)(v34 + 292))
  {
    uint64_t v305 = v303 + 644592;
    uint64_t v306 = (llvm::MachineFunction *)v48[4];
    *(void *)&long long v936 = v938;
    if (v938) {
      llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
    }
    uint64_t v307 = llvm::MachineFunction::CreateMachineInstr(v306, v305, (unsigned __int8 **)&v936, 0);
    if (!(void)v936)
    {
LABEL_339:
      uint64_t v308 = v48[5];
      *((void *)v307 + 3) = v308;
      uint64_t v309 = *(void *)(v308 + 32);
      uint64_t v310 = *((unsigned int *)v307 + 10);
      if (v310)
      {
        uint64_t v484 = *((void *)v307 + 4);
        uint64_t v485 = *(void *)(v309 + 40);
        uint64_t v486 = 32 * v310;
        do
        {
          if (!*(unsigned char *)v484)
          {
            uint64_t v487 = *(unsigned int *)(v484 + 4);
            if ((int)v487 >= 0) {
              uint64_t v488 = (uint64_t *)(*(void *)(v485 + 272) + 8 * v487);
            }
            else {
              uint64_t v488 = (uint64_t *)(*(void *)(v485 + 24) + 16 * (v487 & 0x7FFFFFFF) + 8);
            }
            uint64_t v489 = *v488;
            if (*v488)
            {
              uint64_t v490 = *(void *)(v489 + 16);
              *(void *)(v489 + 16) = v484;
              *(void *)(v484 + 16) = v490;
              if (*(unsigned char *)(v484 + 3))
              {
                *(void *)(v484 + 24) = v489;
              }
              else
              {
                *(void *)(v484 + 24) = 0;
                uint64_t v488 = (uint64_t *)(v490 + 24);
              }
            }
            else
            {
              *(void *)(v484 + 16) = v484;
              *(void *)(v484 + 24) = 0;
            }
            uint64_t *v488 = v484;
          }
          v484 += 32;
          v486 -= 32;
        }
        while (v486);
      }
      uint64_t v311 = *(void *)(v309 + 728);
      if (v311) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v311 + 24))(v311, v307);
      }
      unint64_t v312 = v48[6] & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v307 = v312 | *(void *)v307 & 7;
      *((void *)v307 + 1) = v304;
      *(void *)(v312 + 8) = v307;
      v48[6] = v48[6] & 7 | (unint64_t)v307;
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      llvm::MachineInstr::addOperand(v307, v306, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 1;
      uint64_t v48 = v922;
      llvm::MachineInstr::addOperand(v307, v306, (const llvm::MachineOperand *)&v940);
      long long v941 = 0uLL;
      long long v940 = 0x200000000uLL;
      llvm::MachineInstr::addOperand(v307, v306, (const llvm::MachineOperand *)&v940);
      uint64_t v313 = *(void *)(v42 + 8) + 555648;
      int v314 = (llvm::MachineFunction *)v922[4];
      *(void *)&long long v936 = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
      }
      uint64_t v315 = llvm::MachineFunction::CreateMachineInstr(v314, v313, (unsigned __int8 **)&v936, 0);
      if (!(void)v936) {
        goto LABEL_345;
      }
      int v739 = *(unsigned __int8 *)v936;
      if ((v739 - 4) > 0x1E)
      {
        if ((v739 - 3) >= 0xFFFFFFFE) {
          uint64_t v832 = v936;
        }
        else {
          uint64_t v832 = 0;
        }
        if ((v739 - 3) < 0xFFFFFFFE)
        {
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          uint64_t v48 = v922;
          if (v739 == 3) {
            *(void *)(v936 + 8) = 0;
          }
          goto LABEL_345;
        }
        unint64_t v741 = v832 + 8;
      }
      else
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
          goto LABEL_345;
        }
        uint64_t v740 = *(void *)(v936 + 16);
        if ((v740 & 4) == 0) {
          goto LABEL_345;
        }
        unint64_t v741 = v740 & 0xFFFFFFFFFFFFFFF8;
        if (!v741) {
          goto LABEL_345;
        }
      }
      *(void *)&long long v940 = &v936;
      sub_1CC5FA668(v741 + 16, &v940);
      uint64_t v34 = a4;
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      uint64_t v48 = v922;
LABEL_345:
      uint64_t v316 = v48[5];
      *((void *)v315 + 3) = v316;
      uint64_t v317 = *(void *)(v316 + 32);
      uint64_t v318 = *((unsigned int *)v315 + 10);
      if (v318)
      {
        uint64_t v491 = *((void *)v315 + 4);
        uint64_t v492 = *(void *)(v317 + 40);
        uint64_t v493 = 32 * v318;
        do
        {
          if (!*(unsigned char *)v491)
          {
            uint64_t v494 = *(unsigned int *)(v491 + 4);
            if ((int)v494 >= 0) {
              unint64_t v495 = (uint64_t *)(*(void *)(v492 + 272) + 8 * v494);
            }
            else {
              unint64_t v495 = (uint64_t *)(*(void *)(v492 + 24) + 16 * (v494 & 0x7FFFFFFF) + 8);
            }
            uint64_t v496 = *v495;
            if (*v495)
            {
              uint64_t v497 = *(void *)(v496 + 16);
              *(void *)(v496 + 16) = v491;
              *(void *)(v491 + 16) = v497;
              if (*(unsigned char *)(v491 + 3))
              {
                *(void *)(v491 + 24) = v496;
              }
              else
              {
                *(void *)(v491 + 24) = 0;
                unint64_t v495 = (uint64_t *)(v497 + 24);
              }
            }
            else
            {
              *(void *)(v491 + 16) = v491;
              *(void *)(v491 + 24) = 0;
            }
            *unint64_t v495 = v491;
          }
          v491 += 32;
          v493 -= 32;
        }
        while (v493);
      }
      uint64_t v319 = *(void *)(v317 + 728);
      if (v319) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v319 + 24))(v319, v315);
      }
      unint64_t v320 = *v304 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v315 = v320 | *(void *)v315 & 7;
      *((void *)v315 + 1) = v304;
      *(void *)(v320 + 8) = v315;
      unint64_t *v304 = *v304 & 7 | (unint64_t)v315;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = v923;
      LODWORD(v940) = 4;
      llvm::MachineInstr::addOperand(v315, v314, (const llvm::MachineOperand *)&v940);
      LODWORD(v940) = 1;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = 0;
      goto LABEL_356;
    }
    int v736 = *(unsigned __int8 *)v936;
    if ((v736 - 4) > 0x1E)
    {
      if ((v736 - 3) >= 0xFFFFFFFE) {
        uint64_t v831 = v936;
      }
      else {
        uint64_t v831 = 0;
      }
      if ((v736 - 3) < 0xFFFFFFFE)
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v736 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_339;
      }
      unint64_t v738 = v831 + 8;
    }
    else
    {
      uint64_t v34 = a4;
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      uint64_t v48 = v922;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_339;
      }
      uint64_t v737 = *(void *)(v936 + 16);
      if ((v737 & 4) == 0) {
        goto LABEL_339;
      }
      unint64_t v738 = v737 & 0xFFFFFFFFFFFFFFF8;
      if (!v738) {
        goto LABEL_339;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v738 + 16, &v940);
    uint64_t v34 = a4;
    uint64_t v69 = (llvm::MachineInstr *)a1;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
    uint64_t v48 = v922;
    goto LABEL_339;
  }
  uint64_t v321 = v303 + 555648;
  int v314 = (llvm::MachineFunction *)v48[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v315 = llvm::MachineFunction::CreateMachineInstr(v314, v321, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v793 = *(unsigned __int8 *)v936;
    if ((v793 - 4) > 0x1E)
    {
      if ((v793 - 3) >= 0xFFFFFFFE) {
        uint64_t v850 = v936;
      }
      else {
        uint64_t v850 = 0;
      }
      if ((v793 - 3) < 0xFFFFFFFE)
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v793 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_352;
      }
      unint64_t v795 = v850 + 8;
    }
    else
    {
      uint64_t v34 = a4;
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      uint64_t v48 = v922;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_352;
      }
      uint64_t v794 = *(void *)(v936 + 16);
      if ((v794 & 4) == 0) {
        goto LABEL_352;
      }
      unint64_t v795 = v794 & 0xFFFFFFFFFFFFFFF8;
      if (!v795) {
        goto LABEL_352;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v795 + 16, &v940);
    uint64_t v34 = a4;
    uint64_t v69 = (llvm::MachineInstr *)a1;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
    uint64_t v48 = v922;
  }
LABEL_352:
  uint64_t v322 = v48[5];
  *((void *)v315 + 3) = v322;
  uint64_t v323 = *(void *)(v322 + 32);
  uint64_t v324 = *((unsigned int *)v315 + 10);
  if (v324)
  {
    uint64_t v617 = *((void *)v315 + 4);
    uint64_t v618 = *(void *)(v323 + 40);
    uint64_t v619 = 32 * v324;
    do
    {
      if (!*(unsigned char *)v617)
      {
        uint64_t v620 = *(unsigned int *)(v617 + 4);
        if ((int)v620 >= 0) {
          uint64_t v621 = (uint64_t *)(*(void *)(v618 + 272) + 8 * v620);
        }
        else {
          uint64_t v621 = (uint64_t *)(*(void *)(v618 + 24) + 16 * (v620 & 0x7FFFFFFF) + 8);
        }
        uint64_t v622 = *v621;
        if (*v621)
        {
          uint64_t v623 = *(void *)(v622 + 16);
          *(void *)(v622 + 16) = v617;
          *(void *)(v617 + 16) = v623;
          if (*(unsigned char *)(v617 + 3))
          {
            *(void *)(v617 + 24) = v622;
          }
          else
          {
            *(void *)(v617 + 24) = 0;
            uint64_t v621 = (uint64_t *)(v623 + 24);
          }
        }
        else
        {
          *(void *)(v617 + 16) = v617;
          *(void *)(v617 + 24) = 0;
        }
        *uint64_t v621 = v617;
      }
      v617 += 32;
      v619 -= 32;
    }
    while (v619);
  }
  uint64_t v325 = *(void *)(v323 + 728);
  if (v325) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v325 + 24))(v325, v315);
  }
  unint64_t v326 = *v304 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v315 = v326 | *(void *)v315 & 7;
  *((void *)v315 + 1) = v304;
  *(void *)(v326 + 8) = v315;
  unint64_t *v304 = *v304 & 7 | (unint64_t)v315;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v928;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v315, v314, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
LABEL_356:
  llvm::MachineInstr::addOperand(v315, v314, (const llvm::MachineOperand *)&v940);
  uint64_t v327 = *(void *)(v42 + 8) + 555600;
  if (*(unsigned char *)(v34 + 292))
  {
    uint64_t v328 = (llvm::MachineFunction *)v48[4];
    *(void *)&long long v936 = v938;
    if (v938) {
      llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
    }
    uint64_t v329 = llvm::MachineFunction::CreateMachineInstr(v328, v327, (unsigned __int8 **)&v936, 0);
    if (!(void)v936)
    {
LABEL_360:
      uint64_t v330 = v48[5];
      *((void *)v329 + 3) = v330;
      uint64_t v331 = *(void *)(v330 + 32);
      uint64_t v332 = *((unsigned int *)v329 + 10);
      if (v332)
      {
        uint64_t v498 = *((void *)v329 + 4);
        uint64_t v499 = *(void *)(v331 + 40);
        uint64_t v500 = 32 * v332;
        do
        {
          if (!*(unsigned char *)v498)
          {
            uint64_t v501 = *(unsigned int *)(v498 + 4);
            if ((int)v501 >= 0) {
              uint64_t v502 = (uint64_t *)(*(void *)(v499 + 272) + 8 * v501);
            }
            else {
              uint64_t v502 = (uint64_t *)(*(void *)(v499 + 24) + 16 * (v501 & 0x7FFFFFFF) + 8);
            }
            uint64_t v503 = *v502;
            if (*v502)
            {
              uint64_t v504 = *(void *)(v503 + 16);
              *(void *)(v503 + 16) = v498;
              *(void *)(v498 + 16) = v504;
              if (*(unsigned char *)(v498 + 3))
              {
                *(void *)(v498 + 24) = v503;
              }
              else
              {
                *(void *)(v498 + 24) = 0;
                uint64_t v502 = (uint64_t *)(v504 + 24);
              }
            }
            else
            {
              *(void *)(v498 + 16) = v498;
              *(void *)(v498 + 24) = 0;
            }
            *uint64_t v502 = v498;
          }
          v498 += 32;
          v500 -= 32;
        }
        while (v500);
      }
      uint64_t v333 = *(void *)(v331 + 728);
      if (v333) {
        (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v333 + 24))(v333, v329);
      }
      unint64_t v334 = *v304 & 0xFFFFFFFFFFFFFFF8;
      *(void *)uint64_t v329 = v334 | *(void *)v329 & 7;
      *((void *)v329 + 1) = v304;
      *(void *)(v334 + 8) = v329;
      unint64_t *v304 = *v304 & 7 | (unint64_t)v329;
      *((void *)&v940 + 1) = 0;
      *(void *)&long long v941 = v927;
      LODWORD(v940) = 4;
      llvm::MachineInstr::addOperand(v329, v328, (const llvm::MachineOperand *)&v940);
      uint64_t v335 = 138480;
      if (a5) {
        uint64_t v335 = 133392;
      }
      uint64_t v336 = *(void *)(v42 + 8) + v335;
      uint64_t v337 = (llvm::MachineFunction *)v927[4];
      *(void *)&long long v936 = v938;
      if (v938) {
        llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
      }
      uint64_t v338 = llvm::MachineFunction::CreateMachineInstr(v337, v336, (unsigned __int8 **)&v936, 0);
      if (!(void)v936)
      {
LABEL_368:
        uint64_t v339 = v927 + 6;
        uint64_t v340 = v927[5];
        *((void *)v338 + 3) = v340;
        uint64_t v341 = *(void *)(v340 + 32);
        uint64_t v342 = *((unsigned int *)v338 + 10);
        if (v342)
        {
          uint64_t v505 = *((void *)v338 + 4);
          uint64_t v506 = *(void *)(v341 + 40);
          uint64_t v507 = 32 * v342;
          do
          {
            if (!*(unsigned char *)v505)
            {
              uint64_t v508 = *(unsigned int *)(v505 + 4);
              if ((int)v508 >= 0) {
                __int16 v509 = (uint64_t *)(*(void *)(v506 + 272) + 8 * v508);
              }
              else {
                __int16 v509 = (uint64_t *)(*(void *)(v506 + 24) + 16 * (v508 & 0x7FFFFFFF) + 8);
              }
              uint64_t v510 = *v509;
              if (*v509)
              {
                uint64_t v511 = *(void *)(v510 + 16);
                *(void *)(v510 + 16) = v505;
                *(void *)(v505 + 16) = v511;
                if (*(unsigned char *)(v505 + 3))
                {
                  *(void *)(v505 + 24) = v510;
                }
                else
                {
                  *(void *)(v505 + 24) = 0;
                  __int16 v509 = (uint64_t *)(v511 + 24);
                }
              }
              else
              {
                *(void *)(v505 + 16) = v505;
                *(void *)(v505 + 24) = 0;
              }
              *__int16 v509 = v505;
            }
            v505 += 32;
            v507 -= 32;
          }
          while (v507);
        }
        uint64_t v343 = *(void *)(v341 + 728);
        if (v343) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v343 + 24))(v343, v338);
        }
        unint64_t v344 = v927[6] & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v338 = v344 | *(void *)v338 & 7;
        *((void *)v338 + 1) = v339;
        *(void *)(v344 + 8) = v338;
        v927[6] = v927[6] & 7 | (unint64_t)v338;
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0x1000000;
        DWORD1(v940) = v912;
        llvm::MachineInstr::addOperand(v338, v337, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand(v338, v337, (const llvm::MachineOperand *)&v940);
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0;
        DWORD1(v940) = v906;
        llvm::MachineInstr::addOperand(v338, v337, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand(v338, v337, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 1;
        llvm::MachineInstr::addOperand(v338, v337, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand(v338, v337, (const llvm::MachineOperand *)&v940);
        long long v940 = 0u;
        long long v941 = 0u;
        llvm::MachineInstr::addOperand(v338, v337, (const llvm::MachineOperand *)&v940);
        uint64_t v345 = *(void *)(v42 + 8) + 470640;
        uint64_t v346 = (llvm::MachineFunction *)v927[4];
        *(void *)&long long v936 = v938;
        if (v938) {
          llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
        }
        uint64_t v347 = llvm::MachineFunction::CreateMachineInstr(v346, v345, (unsigned __int8 **)&v936, 0);
        uint64_t v34 = a4;
        if (!(void)v936) {
          goto LABEL_374;
        }
        int v748 = *(unsigned __int8 *)v936;
        if ((v748 - 4) > 0x1E)
        {
          if ((v748 - 3) >= 0xFFFFFFFE) {
            uint64_t v835 = v936;
          }
          else {
            uint64_t v835 = 0;
          }
          if ((v748 - 3) < 0xFFFFFFFE)
          {
            uint64_t v34 = a4;
            uint64_t v69 = (llvm::MachineInstr *)a1;
            uint64_t v42 = a3;
            uint64_t v137 = v917;
            uint64_t v77 = v918;
            if (v748 == 3) {
              *(void *)(v936 + 8) = 0;
            }
            goto LABEL_374;
          }
          unint64_t v750 = v835 + 8;
        }
        else
        {
          uint64_t v34 = a4;
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
            goto LABEL_374;
          }
          uint64_t v749 = *(void *)(v936 + 16);
          if ((v749 & 4) == 0) {
            goto LABEL_374;
          }
          unint64_t v750 = v749 & 0xFFFFFFFFFFFFFFF8;
          if (!v750) {
            goto LABEL_374;
          }
        }
        *(void *)&long long v940 = &v936;
        sub_1CC5FA668(v750 + 16, &v940);
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
LABEL_374:
        uint64_t v348 = v927[5];
        *((void *)v347 + 3) = v348;
        uint64_t v349 = *(void *)(v348 + 32);
        uint64_t v350 = *((unsigned int *)v347 + 10);
        if (v350)
        {
          uint64_t v512 = *((void *)v347 + 4);
          uint64_t v513 = *(void *)(v349 + 40);
          uint64_t v514 = 32 * v350;
          do
          {
            if (!*(unsigned char *)v512)
            {
              uint64_t v515 = *(unsigned int *)(v512 + 4);
              if ((int)v515 >= 0) {
                uint64_t v516 = (uint64_t *)(*(void *)(v513 + 272) + 8 * v515);
              }
              else {
                uint64_t v516 = (uint64_t *)(*(void *)(v513 + 24) + 16 * (v515 & 0x7FFFFFFF) + 8);
              }
              uint64_t v517 = *v516;
              if (*v516)
              {
                uint64_t v518 = *(void *)(v517 + 16);
                *(void *)(v517 + 16) = v512;
                *(void *)(v512 + 16) = v518;
                if (*(unsigned char *)(v512 + 3))
                {
                  *(void *)(v512 + 24) = v517;
                }
                else
                {
                  *(void *)(v512 + 24) = 0;
                  uint64_t v516 = (uint64_t *)(v518 + 24);
                }
              }
              else
              {
                *(void *)(v512 + 16) = v512;
                *(void *)(v512 + 24) = 0;
              }
              *uint64_t v516 = v512;
            }
            v512 += 32;
            v514 -= 32;
          }
          while (v514);
        }
        uint64_t v351 = *(void *)(v349 + 728);
        if (v351) {
          (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v351 + 24))(v351, v347);
        }
        unint64_t v352 = *v339 & 0xFFFFFFFFFFFFFFF8;
        *(void *)uint64_t v347 = v352 | *(void *)v347 & 7;
        *((void *)v347 + 1) = v339;
        *(void *)(v352 + 8) = v347;
        *uint64_t v339 = *v339 & 7 | (unint64_t)v347;
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0x1000000;
        DWORD1(v940) = v908;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 64;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0;
        DWORD1(v940) = v912;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        *((void *)&v940 + 1) = 0;
        long long v941 = 0uLL;
        LODWORD(v940) = 0;
        DWORD1(v940) = v912;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        long long v941 = 0uLL;
        long long v940 = 0x201000000uLL;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        LODWORD(v940) = 1;
        *((void *)&v940 + 1) = 0;
        *(void *)&long long v941 = 0;
        llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
        long long v940 = 0u;
        long long v941 = 0u;
        goto LABEL_385;
      }
      int v745 = *(unsigned __int8 *)v936;
      if ((v745 - 4) > 0x1E)
      {
        if ((v745 - 3) >= 0xFFFFFFFE) {
          uint64_t v834 = v936;
        }
        else {
          uint64_t v834 = 0;
        }
        if ((v745 - 3) < 0xFFFFFFFE)
        {
          uint64_t v69 = (llvm::MachineInstr *)a1;
          uint64_t v42 = a3;
          uint64_t v137 = v917;
          uint64_t v77 = v918;
          if (v745 == 3) {
            *(void *)(v936 + 8) = 0;
          }
          goto LABEL_368;
        }
        unint64_t v747 = v834 + 8;
      }
      else
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
          goto LABEL_368;
        }
        uint64_t v746 = *(void *)(v936 + 16);
        if ((v746 & 4) == 0) {
          goto LABEL_368;
        }
        unint64_t v747 = v746 & 0xFFFFFFFFFFFFFFF8;
        if (!v747) {
          goto LABEL_368;
        }
      }
      *(void *)&long long v940 = &v936;
      sub_1CC5FA668(v747 + 16, &v940);
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      goto LABEL_368;
    }
    int v742 = *(unsigned __int8 *)v936;
    if ((v742 - 4) > 0x1E)
    {
      if ((v742 - 3) >= 0xFFFFFFFE) {
        uint64_t v833 = v936;
      }
      else {
        uint64_t v833 = 0;
      }
      if ((v742 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v742 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_360;
      }
      unint64_t v744 = v833 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      uint64_t v48 = v922;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_360;
      }
      uint64_t v743 = *(void *)(v936 + 16);
      if ((v743 & 4) == 0) {
        goto LABEL_360;
      }
      unint64_t v744 = v743 & 0xFFFFFFFFFFFFFFF8;
      if (!v744) {
        goto LABEL_360;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v744 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
    uint64_t v48 = v922;
    goto LABEL_360;
  }
  uint64_t v346 = (llvm::MachineFunction *)v48[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v347 = llvm::MachineFunction::CreateMachineInstr(v346, v327, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v796 = *(unsigned __int8 *)v936;
    if ((v796 - 4) > 0x1E)
    {
      if ((v796 - 3) >= 0xFFFFFFFE) {
        uint64_t v851 = v936;
      }
      else {
        uint64_t v851 = 0;
      }
      if ((v796 - 3) < 0xFFFFFFFE)
      {
        uint64_t v34 = a4;
        uint64_t v69 = (llvm::MachineInstr *)a1;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        uint64_t v48 = v922;
        if (v796 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_381;
      }
      unint64_t v798 = v851 + 8;
    }
    else
    {
      uint64_t v34 = a4;
      uint64_t v69 = (llvm::MachineInstr *)a1;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      uint64_t v48 = v922;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_381;
      }
      uint64_t v797 = *(void *)(v936 + 16);
      if ((v797 & 4) == 0) {
        goto LABEL_381;
      }
      unint64_t v798 = v797 & 0xFFFFFFFFFFFFFFF8;
      if (!v798) {
        goto LABEL_381;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v798 + 16, &v940);
    uint64_t v34 = a4;
    uint64_t v69 = (llvm::MachineInstr *)a1;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
    uint64_t v48 = v922;
  }
LABEL_381:
  uint64_t v353 = v48[5];
  *((void *)v347 + 3) = v353;
  uint64_t v354 = *(void *)(v353 + 32);
  uint64_t v355 = *((unsigned int *)v347 + 10);
  if (v355)
  {
    uint64_t v624 = *((void *)v347 + 4);
    uint64_t v625 = *(void *)(v354 + 40);
    uint64_t v626 = 32 * v355;
    do
    {
      if (!*(unsigned char *)v624)
      {
        uint64_t v627 = *(unsigned int *)(v624 + 4);
        if ((int)v627 >= 0) {
          __int16 v628 = (uint64_t *)(*(void *)(v625 + 272) + 8 * v627);
        }
        else {
          __int16 v628 = (uint64_t *)(*(void *)(v625 + 24) + 16 * (v627 & 0x7FFFFFFF) + 8);
        }
        uint64_t v629 = *v628;
        if (*v628)
        {
          uint64_t v630 = *(void *)(v629 + 16);
          *(void *)(v629 + 16) = v624;
          *(void *)(v624 + 16) = v630;
          if (*(unsigned char *)(v624 + 3))
          {
            *(void *)(v624 + 24) = v629;
          }
          else
          {
            *(void *)(v624 + 24) = 0;
            __int16 v628 = (uint64_t *)(v630 + 24);
          }
        }
        else
        {
          *(void *)(v624 + 16) = v624;
          *(void *)(v624 + 24) = 0;
        }
        *__int16 v628 = v624;
      }
      v624 += 32;
      v626 -= 32;
    }
    while (v626);
  }
  uint64_t v356 = *(void *)(v354 + 728);
  if (v356) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v356 + 24))(v356, v347);
  }
  unint64_t v357 = *v304 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v347 = v357 | *(void *)v347 & 7;
  *((void *)v347 + 1) = v304;
  *(void *)(v357 + 8) = v347;
  unint64_t *v304 = *v304 & 7 | (unint64_t)v347;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v923;
  LODWORD(v940) = 4;
LABEL_385:
  llvm::MachineInstr::addOperand(v347, v346, (const llvm::MachineOperand *)&v940);
  if (!*(unsigned char *)(v34 + 292)) {
    goto LABEL_467;
  }
  uint64_t v358 = *(void *)(v42 + 8) + 555648;
  unint64_t v359 = (llvm::MachineFunction *)v927[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v360 = llvm::MachineFunction::CreateMachineInstr(v359, v358, (unsigned __int8 **)&v936, 0);
  int v361 = v915;
  if ((void)v936)
  {
    int v751 = *(unsigned __int8 *)v936;
    if ((v751 - 4) > 0x1E)
    {
      if ((v751 - 3) >= 0xFFFFFFFE) {
        uint64_t v836 = v936;
      }
      else {
        uint64_t v836 = 0;
      }
      if ((v751 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v751 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_389;
      }
      unint64_t v753 = v836 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_389;
      }
      uint64_t v752 = *(void *)(v936 + 16);
      if ((v752 & 4) == 0) {
        goto LABEL_389;
      }
      unint64_t v753 = v752 & 0xFFFFFFFFFFFFFFF8;
      if (!v753) {
        goto LABEL_389;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v753 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
  }
LABEL_389:
  uint64_t v362 = v927 + 6;
  uint64_t v363 = v927[5];
  *((void *)v360 + 3) = v363;
  uint64_t v364 = *(void *)(v363 + 32);
  uint64_t v365 = *((unsigned int *)v360 + 10);
  if (v365)
  {
    uint64_t v519 = *((void *)v360 + 4);
    uint64_t v520 = *(void *)(v364 + 40);
    uint64_t v521 = 32 * v365;
    do
    {
      if (!*(unsigned char *)v519)
      {
        uint64_t v522 = *(unsigned int *)(v519 + 4);
        if ((int)v522 >= 0) {
          uint64_t v523 = (uint64_t *)(*(void *)(v520 + 272) + 8 * v522);
        }
        else {
          uint64_t v523 = (uint64_t *)(*(void *)(v520 + 24) + 16 * (v522 & 0x7FFFFFFF) + 8);
        }
        uint64_t v524 = *v523;
        if (*v523)
        {
          uint64_t v525 = *(void *)(v524 + 16);
          *(void *)(v524 + 16) = v519;
          *(void *)(v519 + 16) = v525;
          if (*(unsigned char *)(v519 + 3))
          {
            *(void *)(v519 + 24) = v524;
          }
          else
          {
            *(void *)(v519 + 24) = 0;
            uint64_t v523 = (uint64_t *)(v525 + 24);
          }
        }
        else
        {
          *(void *)(v519 + 16) = v519;
          *(void *)(v519 + 24) = 0;
        }
        *uint64_t v523 = v519;
      }
      v519 += 32;
      v521 -= 32;
    }
    while (v521);
  }
  uint64_t v366 = *(void *)(v364 + 728);
  if (v366) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v366 + 24))(v366, v360);
  }
  unint64_t v367 = v927[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v360 = v367 | *(void *)v360 & 7;
  *((void *)v360 + 1) = v362;
  *(void *)(v367 + 8) = v360;
  v927[6] = v927[6] & 7 | (unint64_t)v360;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v361;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v360, v359, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v360, v359, (const llvm::MachineOperand *)&v940);
  uint64_t v368 = *(void *)(v42 + 8) + 555600;
  int v369 = (llvm::MachineFunction *)v927[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  int v370 = llvm::MachineFunction::CreateMachineInstr(v369, v368, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v754 = *(unsigned __int8 *)v936;
    if ((v754 - 4) > 0x1E)
    {
      if ((v754 - 3) >= 0xFFFFFFFE) {
        uint64_t v837 = v936;
      }
      else {
        uint64_t v837 = 0;
      }
      if ((v754 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v754 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_395;
      }
      unint64_t v756 = v837 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_395;
      }
      uint64_t v755 = *(void *)(v936 + 16);
      if ((v755 & 4) == 0) {
        goto LABEL_395;
      }
      unint64_t v756 = v755 & 0xFFFFFFFFFFFFFFF8;
      if (!v756) {
        goto LABEL_395;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v756 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
  }
LABEL_395:
  uint64_t v371 = v927[5];
  *((void *)v370 + 3) = v371;
  uint64_t v372 = *(void *)(v371 + 32);
  uint64_t v373 = *((unsigned int *)v370 + 10);
  if (v373)
  {
    uint64_t v526 = *((void *)v370 + 4);
    uint64_t v527 = *(void *)(v372 + 40);
    uint64_t v528 = 32 * v373;
    do
    {
      if (!*(unsigned char *)v526)
      {
        uint64_t v529 = *(unsigned int *)(v526 + 4);
        if ((int)v529 >= 0) {
          uint64_t v530 = (uint64_t *)(*(void *)(v527 + 272) + 8 * v529);
        }
        else {
          uint64_t v530 = (uint64_t *)(*(void *)(v527 + 24) + 16 * (v529 & 0x7FFFFFFF) + 8);
        }
        uint64_t v531 = *v530;
        if (*v530)
        {
          uint64_t v532 = *(void *)(v531 + 16);
          *(void *)(v531 + 16) = v526;
          *(void *)(v526 + 16) = v532;
          if (*(unsigned char *)(v526 + 3))
          {
            *(void *)(v526 + 24) = v531;
          }
          else
          {
            *(void *)(v526 + 24) = 0;
            uint64_t v530 = (uint64_t *)(v532 + 24);
          }
        }
        else
        {
          *(void *)(v526 + 16) = v526;
          *(void *)(v526 + 24) = 0;
        }
        *uint64_t v530 = v526;
      }
      v526 += 32;
      v528 -= 32;
    }
    while (v528);
  }
  uint64_t v374 = *(void *)(v372 + 728);
  if (v374) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v374 + 24))(v374, v370);
  }
  unint64_t v375 = *v362 & 0xFFFFFFFFFFFFFFF8;
  *(void *)int v370 = v375 | *(void *)v370 & 7;
  *((void *)v370 + 1) = v362;
  *(void *)(v375 + 8) = v370;
  *uint64_t v362 = *v362 & 7 | (unint64_t)v370;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v921;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v370, v369, (const llvm::MachineOperand *)&v940);
  uint64_t v376 = *(void *)(v42 + 8) + 555600;
  uint64_t v377 = (llvm::MachineFunction *)v921[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v378 = llvm::MachineFunction::CreateMachineInstr(v377, v376, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v757 = *(unsigned __int8 *)v936;
    if ((v757 - 4) > 0x1E)
    {
      if ((v757 - 3) >= 0xFFFFFFFE) {
        uint64_t v838 = v936;
      }
      else {
        uint64_t v838 = 0;
      }
      if ((v757 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v757 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_401;
      }
      unint64_t v759 = v838 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_401;
      }
      uint64_t v758 = *(void *)(v936 + 16);
      if ((v758 & 4) == 0) {
        goto LABEL_401;
      }
      unint64_t v759 = v758 & 0xFFFFFFFFFFFFFFF8;
      if (!v759) {
        goto LABEL_401;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v759 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
  }
LABEL_401:
  unsigned int v379 = v921 + 6;
  uint64_t v380 = v921[5];
  *((void *)v378 + 3) = v380;
  uint64_t v381 = *(void *)(v380 + 32);
  uint64_t v382 = *((unsigned int *)v378 + 10);
  if (v382)
  {
    uint64_t v533 = *((void *)v378 + 4);
    uint64_t v534 = *(void *)(v381 + 40);
    uint64_t v535 = 32 * v382;
    do
    {
      if (!*(unsigned char *)v533)
      {
        uint64_t v536 = *(unsigned int *)(v533 + 4);
        if ((int)v536 >= 0) {
          unint64_t v537 = (uint64_t *)(*(void *)(v534 + 272) + 8 * v536);
        }
        else {
          unint64_t v537 = (uint64_t *)(*(void *)(v534 + 24) + 16 * (v536 & 0x7FFFFFFF) + 8);
        }
        uint64_t v538 = *v537;
        if (*v537)
        {
          uint64_t v539 = *(void *)(v538 + 16);
          *(void *)(v538 + 16) = v533;
          *(void *)(v533 + 16) = v539;
          if (*(unsigned char *)(v533 + 3))
          {
            *(void *)(v533 + 24) = v538;
          }
          else
          {
            *(void *)(v533 + 24) = 0;
            unint64_t v537 = (uint64_t *)(v539 + 24);
          }
        }
        else
        {
          *(void *)(v533 + 16) = v533;
          *(void *)(v533 + 24) = 0;
        }
        *unint64_t v537 = v533;
      }
      v533 += 32;
      v535 -= 32;
    }
    while (v535);
  }
  uint64_t v383 = *(void *)(v381 + 728);
  if (v383) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v383 + 24))(v383, v378);
  }
  unint64_t v384 = *v379 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v378 = v384 | *(void *)v378 & 7;
  *((void *)v378 + 1) = v379;
  *(void *)(v384 + 8) = v378;
  unint64_t *v379 = *v379 & 7 | (unint64_t)v378;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v137;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v378, v377, (const llvm::MachineOperand *)&v940);
  uint64_t v385 = *(void *)(v42 + 8);
  uint64_t v386 = (llvm::MachineFunction *)v137[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  unint64_t v387 = llvm::MachineFunction::CreateMachineInstr(v386, v385, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v760 = *(unsigned __int8 *)v936;
    if ((v760 - 4) > 0x1E)
    {
      if ((v760 - 3) >= 0xFFFFFFFE) {
        uint64_t v839 = v936;
      }
      else {
        uint64_t v839 = 0;
      }
      if ((v760 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v760 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_407;
      }
      unint64_t v762 = v839 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_407;
      }
      uint64_t v761 = *(void *)(v936 + 16);
      if ((v761 & 4) == 0) {
        goto LABEL_407;
      }
      unint64_t v762 = v761 & 0xFFFFFFFFFFFFFFF8;
      if (!v762) {
        goto LABEL_407;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v762 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
  }
LABEL_407:
  BOOL v388 = v137 + 6;
  uint64_t v389 = v137[5];
  *((void *)v387 + 3) = v389;
  uint64_t v390 = *(void *)(v389 + 32);
  uint64_t v391 = *((unsigned int *)v387 + 10);
  if (v391)
  {
    uint64_t v540 = *((void *)v387 + 4);
    uint64_t v541 = *(void *)(v390 + 40);
    uint64_t v542 = 32 * v391;
    do
    {
      if (!*(unsigned char *)v540)
      {
        uint64_t v543 = *(unsigned int *)(v540 + 4);
        if ((int)v543 >= 0) {
          __int16 v544 = (uint64_t *)(*(void *)(v541 + 272) + 8 * v543);
        }
        else {
          __int16 v544 = (uint64_t *)(*(void *)(v541 + 24) + 16 * (v543 & 0x7FFFFFFF) + 8);
        }
        uint64_t v545 = *v544;
        if (*v544)
        {
          uint64_t v546 = *(void *)(v545 + 16);
          *(void *)(v545 + 16) = v540;
          *(void *)(v540 + 16) = v546;
          if (*(unsigned char *)(v540 + 3))
          {
            *(void *)(v540 + 24) = v545;
          }
          else
          {
            *(void *)(v540 + 24) = 0;
            __int16 v544 = (uint64_t *)(v546 + 24);
          }
        }
        else
        {
          *(void *)(v540 + 16) = v540;
          *(void *)(v540 + 24) = 0;
        }
        *__int16 v544 = v540;
      }
      v540 += 32;
      v542 -= 32;
    }
    while (v542);
  }
  uint64_t v392 = *(void *)(v390 + 728);
  if (v392) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v392 + 24))(v392, v387);
  }
  unint64_t v393 = v137[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v387 = v393 | *(void *)v387 & 7;
  *((void *)v387 + 1) = v388;
  *(void *)(v393 + 8) = v387;
  v137[6] = v137[6] & 7 | (unint64_t)v387;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v909;
  llvm::MachineInstr::addOperand(v387, v386, (const llvm::MachineOperand *)&v940);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v908;
  llvm::MachineInstr::addOperand(v387, v386, (const llvm::MachineOperand *)&v940);
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v921;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v387, v386, (const llvm::MachineOperand *)&v940);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v914;
  llvm::MachineInstr::addOperand(v387, v386, (const llvm::MachineOperand *)&v940);
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v77;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v387, v386, (const llvm::MachineOperand *)&v940);
  uint64_t v394 = *(void *)(v42 + 8) + 555600;
  uint64_t v395 = (llvm::MachineFunction *)v137[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v396 = llvm::MachineFunction::CreateMachineInstr(v395, v394, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v763 = *(unsigned __int8 *)v936;
    if ((v763 - 4) > 0x1E)
    {
      if ((v763 - 3) >= 0xFFFFFFFE) {
        uint64_t v840 = v936;
      }
      else {
        uint64_t v840 = 0;
      }
      if ((v763 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v137 = v917;
        uint64_t v77 = v918;
        if (v763 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_413;
      }
      unint64_t v765 = v840 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v137 = v917;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_413;
      }
      uint64_t v764 = *(void *)(v936 + 16);
      if ((v764 & 4) == 0) {
        goto LABEL_413;
      }
      unint64_t v765 = v764 & 0xFFFFFFFFFFFFFFF8;
      if (!v765) {
        goto LABEL_413;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v765 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v137 = v917;
    uint64_t v77 = v918;
  }
LABEL_413:
  uint64_t v397 = v137[5];
  *((void *)v396 + 3) = v397;
  uint64_t v398 = *(void *)(v397 + 32);
  uint64_t v399 = *((unsigned int *)v396 + 10);
  if (v399)
  {
    uint64_t v547 = *((void *)v396 + 4);
    uint64_t v548 = *(void *)(v398 + 40);
    uint64_t v549 = 32 * v399;
    do
    {
      if (!*(unsigned char *)v547)
      {
        uint64_t v550 = *(unsigned int *)(v547 + 4);
        if ((int)v550 >= 0) {
          unint64_t v551 = (uint64_t *)(*(void *)(v548 + 272) + 8 * v550);
        }
        else {
          unint64_t v551 = (uint64_t *)(*(void *)(v548 + 24) + 16 * (v550 & 0x7FFFFFFF) + 8);
        }
        uint64_t v552 = *v551;
        if (*v551)
        {
          uint64_t v553 = *(void *)(v552 + 16);
          *(void *)(v552 + 16) = v547;
          *(void *)(v547 + 16) = v553;
          if (*(unsigned char *)(v547 + 3))
          {
            *(void *)(v547 + 24) = v552;
          }
          else
          {
            *(void *)(v547 + 24) = 0;
            unint64_t v551 = (uint64_t *)(v553 + 24);
          }
        }
        else
        {
          *(void *)(v547 + 16) = v547;
          *(void *)(v547 + 24) = 0;
        }
        *unint64_t v551 = v547;
      }
      v547 += 32;
      v549 -= 32;
    }
    while (v549);
  }
  uint64_t v400 = *(void *)(v398 + 728);
  if (v400) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v400 + 24))(v400, v396);
  }
  unint64_t v401 = *v388 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v396 = v401 | *(void *)v396 & 7;
  *((void *)v396 + 1) = v388;
  *(void *)(v401 + 8) = v396;
  *BOOL v388 = *v388 & 7 | (unint64_t)v396;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v77;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v396, v395, (const llvm::MachineOperand *)&v940);
  uint64_t v402 = *(void *)(v42 + 8) + 586320;
  uint64_t v403 = (llvm::MachineFunction *)v77[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v404 = llvm::MachineFunction::CreateMachineInstr(v403, v402, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v766 = *(unsigned __int8 *)v936;
    if ((v766 - 4) > 0x1E)
    {
      if ((v766 - 3) >= 0xFFFFFFFE) {
        uint64_t v841 = v936;
      }
      else {
        uint64_t v841 = 0;
      }
      if ((v766 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v77 = v918;
        if (v766 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_419;
      }
      unint64_t v768 = v841 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_419;
      }
      uint64_t v767 = *(void *)(v936 + 16);
      if ((v767 & 4) == 0) {
        goto LABEL_419;
      }
      unint64_t v768 = v767 & 0xFFFFFFFFFFFFFFF8;
      if (!v768) {
        goto LABEL_419;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v768 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v77 = v918;
  }
LABEL_419:
  uint64_t v405 = v77 + 6;
  uint64_t v406 = v77[5];
  *((void *)v404 + 3) = v406;
  uint64_t v407 = *(void *)(v406 + 32);
  uint64_t v408 = *((unsigned int *)v404 + 10);
  if (v408)
  {
    uint64_t v554 = *((void *)v404 + 4);
    uint64_t v555 = *(void *)(v407 + 40);
    uint64_t v556 = 32 * v408;
    do
    {
      if (!*(unsigned char *)v554)
      {
        uint64_t v557 = *(unsigned int *)(v554 + 4);
        if ((int)v557 >= 0) {
          __int16 v558 = (uint64_t *)(*(void *)(v555 + 272) + 8 * v557);
        }
        else {
          __int16 v558 = (uint64_t *)(*(void *)(v555 + 24) + 16 * (v557 & 0x7FFFFFFF) + 8);
        }
        uint64_t v559 = *v558;
        if (*v558)
        {
          uint64_t v560 = *(void *)(v559 + 16);
          *(void *)(v559 + 16) = v554;
          *(void *)(v554 + 16) = v560;
          if (*(unsigned char *)(v554 + 3))
          {
            *(void *)(v554 + 24) = v559;
          }
          else
          {
            *(void *)(v554 + 24) = 0;
            __int16 v558 = (uint64_t *)(v560 + 24);
          }
        }
        else
        {
          *(void *)(v554 + 16) = v554;
          *(void *)(v554 + 24) = 0;
        }
        uint64_t *v558 = v554;
      }
      v554 += 32;
      v556 -= 32;
    }
    while (v556);
  }
  uint64_t v409 = *(void *)(v407 + 728);
  if (v409) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v409 + 24))(v409, v404);
  }
  unint64_t v410 = v77[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v404 = v410 | *(void *)v404 & 7;
  *((void *)v404 + 1) = v405;
  *(void *)(v410 + 8) = v404;
  v77[6] = v77[6] & 7 | (unint64_t)v404;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v404, v403, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v404, v403, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v404, v403, (const llvm::MachineOperand *)&v940);
  uint64_t v411 = 498720;
  if (a5) {
    uint64_t v411 = 493632;
  }
  uint64_t v412 = *(void *)(v42 + 8) + v411;
  unsigned int v413 = (llvm::MachineFunction *)v77[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  unint64_t v414 = llvm::MachineFunction::CreateMachineInstr(v413, v412, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v769 = *(unsigned __int8 *)v936;
    if ((v769 - 4) > 0x1E)
    {
      if ((v769 - 3) >= 0xFFFFFFFE) {
        uint64_t v842 = v936;
      }
      else {
        uint64_t v842 = 0;
      }
      if ((v769 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v77 = v918;
        if (v769 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_427;
      }
      unint64_t v771 = v842 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_427;
      }
      uint64_t v770 = *(void *)(v936 + 16);
      if ((v770 & 4) == 0) {
        goto LABEL_427;
      }
      unint64_t v771 = v770 & 0xFFFFFFFFFFFFFFF8;
      if (!v771) {
        goto LABEL_427;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v771 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v77 = v918;
  }
LABEL_427:
  uint64_t v415 = v77[5];
  *((void *)v414 + 3) = v415;
  uint64_t v416 = *(void *)(v415 + 32);
  uint64_t v417 = *((unsigned int *)v414 + 10);
  if (v417)
  {
    uint64_t v561 = *((void *)v414 + 4);
    uint64_t v562 = *(void *)(v416 + 40);
    uint64_t v563 = 32 * v417;
    do
    {
      if (!*(unsigned char *)v561)
      {
        uint64_t v564 = *(unsigned int *)(v561 + 4);
        if ((int)v564 >= 0) {
          unsigned int v565 = (uint64_t *)(*(void *)(v562 + 272) + 8 * v564);
        }
        else {
          unsigned int v565 = (uint64_t *)(*(void *)(v562 + 24) + 16 * (v564 & 0x7FFFFFFF) + 8);
        }
        uint64_t v566 = *v565;
        if (*v565)
        {
          uint64_t v567 = *(void *)(v566 + 16);
          *(void *)(v566 + 16) = v561;
          *(void *)(v561 + 16) = v567;
          if (*(unsigned char *)(v561 + 3))
          {
            *(void *)(v561 + 24) = v566;
          }
          else
          {
            *(void *)(v561 + 24) = 0;
            unsigned int v565 = (uint64_t *)(v567 + 24);
          }
        }
        else
        {
          *(void *)(v561 + 16) = v561;
          *(void *)(v561 + 24) = 0;
        }
        *unsigned int v565 = v561;
      }
      v561 += 32;
      v563 -= 32;
    }
    while (v563);
  }
  uint64_t v418 = *(void *)(v416 + 728);
  if (v418) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v418 + 24))(v418, v414);
  }
  unint64_t v419 = v77[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v414 = v419 | *(void *)v414 & 7;
  *((void *)v414 + 1) = v405;
  *(void *)(v419 + 8) = v414;
  v77[6] = v77[6] & 7 | (unint64_t)v414;
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0x1000000;
  DWORD1(v940) = v914;
  llvm::MachineInstr::addOperand(v414, v413, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v414, v413, (const llvm::MachineOperand *)&v940);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v909;
  llvm::MachineInstr::addOperand(v414, v413, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v414, v413, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 1;
  llvm::MachineInstr::addOperand(v414, v413, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v414, v413, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v414, v413, (const llvm::MachineOperand *)&v940);
  uint64_t v420 = *(void *)(v42 + 8) + 420000;
  uint64_t v421 = (llvm::MachineFunction *)v77[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  __int16 v422 = llvm::MachineFunction::CreateMachineInstr(v421, v420, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v772 = *(unsigned __int8 *)v936;
    if ((v772 - 4) > 0x1E)
    {
      if ((v772 - 3) >= 0xFFFFFFFE) {
        uint64_t v843 = v936;
      }
      else {
        uint64_t v843 = 0;
      }
      if ((v772 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v77 = v918;
        if (v772 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_433;
      }
      unint64_t v774 = v843 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_433;
      }
      uint64_t v773 = *(void *)(v936 + 16);
      if ((v773 & 4) == 0) {
        goto LABEL_433;
      }
      unint64_t v774 = v773 & 0xFFFFFFFFFFFFFFF8;
      if (!v774) {
        goto LABEL_433;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v774 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v77 = v918;
  }
LABEL_433:
  uint64_t v423 = v77[5];
  *((void *)v422 + 3) = v423;
  uint64_t v424 = *(void *)(v423 + 32);
  uint64_t v425 = *((unsigned int *)v422 + 10);
  if (v425)
  {
    uint64_t v568 = *((void *)v422 + 4);
    uint64_t v569 = *(void *)(v424 + 40);
    uint64_t v570 = 32 * v425;
    do
    {
      if (!*(unsigned char *)v568)
      {
        uint64_t v571 = *(unsigned int *)(v568 + 4);
        if ((int)v571 >= 0) {
          int v572 = (uint64_t *)(*(void *)(v569 + 272) + 8 * v571);
        }
        else {
          int v572 = (uint64_t *)(*(void *)(v569 + 24) + 16 * (v571 & 0x7FFFFFFF) + 8);
        }
        uint64_t v573 = *v572;
        if (*v572)
        {
          uint64_t v574 = *(void *)(v573 + 16);
          *(void *)(v573 + 16) = v568;
          *(void *)(v568 + 16) = v574;
          if (*(unsigned char *)(v568 + 3))
          {
            *(void *)(v568 + 24) = v573;
          }
          else
          {
            *(void *)(v568 + 24) = 0;
            int v572 = (uint64_t *)(v574 + 24);
          }
        }
        else
        {
          *(void *)(v568 + 16) = v568;
          *(void *)(v568 + 24) = 0;
        }
        *int v572 = v568;
      }
      v568 += 32;
      v570 -= 32;
    }
    while (v570);
  }
  uint64_t v426 = *(void *)(v424 + 728);
  if (v426) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v426 + 24))(v426, v422);
  }
  unint64_t v427 = v77[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)__int16 v422 = v427 | *(void *)v422 & 7;
  *((void *)v422 + 1) = v405;
  *(void *)(v427 + 8) = v422;
  v77[6] = v77[6] & 7 | (unint64_t)v422;
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v422, v421, (const llvm::MachineOperand *)&v940);
  *((void *)&v940 + 1) = 0;
  long long v941 = 0uLL;
  LODWORD(v940) = 0;
  DWORD1(v940) = v914;
  llvm::MachineInstr::addOperand(v422, v421, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v422, v421, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 64;
  llvm::MachineInstr::addOperand(v422, v421, (const llvm::MachineOperand *)&v940);
  long long v941 = 0uLL;
  long long v940 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v422, v421, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v422, v421, (const llvm::MachineOperand *)&v940);
  long long v940 = 0u;
  long long v941 = 0u;
  llvm::MachineInstr::addOperand(v422, v421, (const llvm::MachineOperand *)&v940);
  uint64_t v428 = *(void *)(v42 + 8) + 555648;
  __int16 v429 = (llvm::MachineFunction *)v77[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v430 = llvm::MachineFunction::CreateMachineInstr(v429, v428, (unsigned __int8 **)&v936, 0);
  unint64_t v432 = v910;
  uint64_t v431 = v911;
  if ((void)v936)
  {
    int v775 = *(unsigned __int8 *)v936;
    if ((v775 - 4) > 0x1E)
    {
      if ((v775 - 3) >= 0xFFFFFFFE) {
        uint64_t v844 = v936;
      }
      else {
        uint64_t v844 = 0;
      }
      if ((v775 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        unint64_t v432 = v910;
        uint64_t v431 = v911;
        uint64_t v77 = v918;
        if (v775 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_439;
      }
      unint64_t v777 = v844 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      unint64_t v432 = v910;
      uint64_t v431 = v911;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_439;
      }
      uint64_t v776 = *(void *)(v936 + 16);
      if ((v776 & 4) == 0) {
        goto LABEL_439;
      }
      unint64_t v777 = v776 & 0xFFFFFFFFFFFFFFF8;
      if (!v777) {
        goto LABEL_439;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v777 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    unint64_t v432 = v910;
    uint64_t v431 = v911;
    uint64_t v77 = v918;
  }
LABEL_439:
  uint64_t v433 = v77[5];
  *((void *)v430 + 3) = v433;
  uint64_t v434 = *(void *)(v433 + 32);
  uint64_t v435 = *((unsigned int *)v430 + 10);
  if (v435)
  {
    uint64_t v575 = *((void *)v430 + 4);
    uint64_t v576 = *(void *)(v434 + 40);
    uint64_t v577 = 32 * v435;
    do
    {
      if (!*(unsigned char *)v575)
      {
        uint64_t v578 = *(unsigned int *)(v575 + 4);
        if ((int)v578 >= 0) {
          uint64_t v579 = (uint64_t *)(*(void *)(v576 + 272) + 8 * v578);
        }
        else {
          uint64_t v579 = (uint64_t *)(*(void *)(v576 + 24) + 16 * (v578 & 0x7FFFFFFF) + 8);
        }
        uint64_t v580 = *v579;
        if (*v579)
        {
          uint64_t v581 = *(void *)(v580 + 16);
          *(void *)(v580 + 16) = v575;
          *(void *)(v575 + 16) = v581;
          if (*(unsigned char *)(v575 + 3))
          {
            *(void *)(v575 + 24) = v580;
          }
          else
          {
            *(void *)(v575 + 24) = 0;
            uint64_t v579 = (uint64_t *)(v581 + 24);
          }
        }
        else
        {
          *(void *)(v575 + 16) = v575;
          *(void *)(v575 + 24) = 0;
        }
        *uint64_t v579 = v575;
      }
      v575 += 32;
      v577 -= 32;
    }
    while (v577);
  }
  uint64_t v436 = *(void *)(v434 + 728);
  if (v436) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v436 + 24))(v436, v430);
  }
  unint64_t v437 = v77[6] & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v430 = v437 | *(void *)v430 & 7;
  *((void *)v430 + 1) = v405;
  *(void *)(v437 + 8) = v430;
  v77[6] = v77[6] & 7 | (unint64_t)v430;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v917;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v430, v429, (const llvm::MachineOperand *)&v940);
  LODWORD(v940) = 1;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = 0;
  llvm::MachineInstr::addOperand(v430, v429, (const llvm::MachineOperand *)&v940);
  uint64_t v438 = *(void *)(v42 + 8) + 555600;
  unsigned int v439 = (llvm::MachineFunction *)v77[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v440 = llvm::MachineFunction::CreateMachineInstr(v439, v438, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v778 = *(unsigned __int8 *)v936;
    if ((v778 - 4) > 0x1E)
    {
      if ((v778 - 3) >= 0xFFFFFFFE) {
        uint64_t v845 = v936;
      }
      else {
        uint64_t v845 = 0;
      }
      if ((v778 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        unint64_t v432 = v910;
        uint64_t v431 = v911;
        uint64_t v77 = v918;
        if (v778 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_445;
      }
      unint64_t v780 = v845 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      unint64_t v432 = v910;
      uint64_t v431 = v911;
      uint64_t v77 = v918;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_445;
      }
      uint64_t v779 = *(void *)(v936 + 16);
      if ((v779 & 4) == 0) {
        goto LABEL_445;
      }
      unint64_t v780 = v779 & 0xFFFFFFFFFFFFFFF8;
      if (!v780) {
        goto LABEL_445;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v780 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    unint64_t v432 = v910;
    uint64_t v431 = v911;
    uint64_t v77 = v918;
  }
LABEL_445:
  uint64_t v441 = v77[5];
  *((void *)v440 + 3) = v441;
  uint64_t v442 = *(void *)(v441 + 32);
  uint64_t v443 = *((unsigned int *)v440 + 10);
  if (v443)
  {
    uint64_t v582 = *((void *)v440 + 4);
    uint64_t v583 = *(void *)(v442 + 40);
    uint64_t v584 = 32 * v443;
    do
    {
      if (!*(unsigned char *)v582)
      {
        uint64_t v585 = *(unsigned int *)(v582 + 4);
        if ((int)v585 >= 0) {
          __int16 v586 = (uint64_t *)(*(void *)(v583 + 272) + 8 * v585);
        }
        else {
          __int16 v586 = (uint64_t *)(*(void *)(v583 + 24) + 16 * (v585 & 0x7FFFFFFF) + 8);
        }
        uint64_t v587 = *v586;
        if (*v586)
        {
          uint64_t v588 = *(void *)(v587 + 16);
          *(void *)(v587 + 16) = v582;
          *(void *)(v582 + 16) = v588;
          if (*(unsigned char *)(v582 + 3))
          {
            *(void *)(v582 + 24) = v587;
          }
          else
          {
            *(void *)(v582 + 24) = 0;
            __int16 v586 = (uint64_t *)(v588 + 24);
          }
        }
        else
        {
          *(void *)(v582 + 16) = v582;
          *(void *)(v582 + 24) = 0;
        }
        *__int16 v586 = v582;
      }
      v582 += 32;
      v584 -= 32;
    }
    while (v584);
  }
  uint64_t v444 = *(void *)(v442 + 728);
  if (v444) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v444 + 24))(v444, v440);
  }
  unint64_t v445 = *v405 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v440 = v445 | *(void *)v440 & 7;
  *((void *)v440 + 1) = v405;
  *(void *)(v445 + 8) = v440;
  unint64_t *v405 = *v405 & 7 | (unint64_t)v440;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v432;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v440, v439, (const llvm::MachineOperand *)&v940);
  uint64_t v446 = *(void *)(v42 + 8) + 555600;
  unint64_t v447 = (llvm::MachineFunction *)v432[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  unint64_t v448 = llvm::MachineFunction::CreateMachineInstr(v447, v446, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v781 = *(unsigned __int8 *)v936;
    if ((v781 - 4) > 0x1E)
    {
      if ((v781 - 3) >= 0xFFFFFFFE) {
        uint64_t v846 = v936;
      }
      else {
        uint64_t v846 = 0;
      }
      if ((v781 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        unint64_t v432 = v910;
        uint64_t v431 = v911;
        if (v781 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_451;
      }
      unint64_t v783 = v846 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      unint64_t v432 = v910;
      uint64_t v431 = v911;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_451;
      }
      uint64_t v782 = *(void *)(v936 + 16);
      if ((v782 & 4) == 0) {
        goto LABEL_451;
      }
      unint64_t v783 = v782 & 0xFFFFFFFFFFFFFFF8;
      if (!v783) {
        goto LABEL_451;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v783 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    unint64_t v432 = v910;
    uint64_t v431 = v911;
  }
LABEL_451:
  unsigned int v449 = v432 + 6;
  uint64_t v450 = v432[5];
  *((void *)v448 + 3) = v450;
  uint64_t v451 = *(void *)(v450 + 32);
  uint64_t v452 = *((unsigned int *)v448 + 10);
  if (v452)
  {
    uint64_t v589 = *((void *)v448 + 4);
    uint64_t v590 = *(void *)(v451 + 40);
    uint64_t v591 = 32 * v452;
    do
    {
      if (!*(unsigned char *)v589)
      {
        uint64_t v592 = *(unsigned int *)(v589 + 4);
        if ((int)v592 >= 0) {
          uint64_t v593 = (uint64_t *)(*(void *)(v590 + 272) + 8 * v592);
        }
        else {
          uint64_t v593 = (uint64_t *)(*(void *)(v590 + 24) + 16 * (v592 & 0x7FFFFFFF) + 8);
        }
        uint64_t v594 = *v593;
        if (*v593)
        {
          uint64_t v595 = *(void *)(v594 + 16);
          *(void *)(v594 + 16) = v589;
          *(void *)(v589 + 16) = v595;
          if (*(unsigned char *)(v589 + 3))
          {
            *(void *)(v589 + 24) = v594;
          }
          else
          {
            *(void *)(v589 + 24) = 0;
            uint64_t v593 = (uint64_t *)(v595 + 24);
          }
        }
        else
        {
          *(void *)(v589 + 16) = v589;
          *(void *)(v589 + 24) = 0;
        }
        *uint64_t v593 = v589;
      }
      v589 += 32;
      v591 -= 32;
    }
    while (v591);
  }
  uint64_t v453 = *(void *)(v451 + 728);
  if (v453) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v453 + 24))(v453, v448);
  }
  unint64_t v454 = *v449 & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v448 = v454 | *(void *)v448 & 7;
  *((void *)v448 + 1) = v449;
  *(void *)(v454 + 8) = v448;
  *unsigned int v449 = *v449 & 7 | (unint64_t)v448;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v431;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v448, v447, (const llvm::MachineOperand *)&v940);
  uint64_t v455 = *(void *)(v42 + 8) + 555600;
  uint64_t v456 = (llvm::MachineFunction *)v431[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v457 = llvm::MachineFunction::CreateMachineInstr(v456, v455, (unsigned __int8 **)&v936, 0);
  if ((void)v936)
  {
    int v784 = *(unsigned __int8 *)v936;
    if ((v784 - 4) > 0x1E)
    {
      if ((v784 - 3) >= 0xFFFFFFFE) {
        uint64_t v847 = v936;
      }
      else {
        uint64_t v847 = 0;
      }
      if ((v784 - 3) < 0xFFFFFFFE)
      {
        uint64_t v69 = (llvm::MachineInstr *)a1;
        int v361 = v915;
        uint64_t v42 = a3;
        uint64_t v431 = v911;
        if (v784 == 3) {
          *(void *)(v936 + 8) = 0;
        }
        goto LABEL_457;
      }
      unint64_t v786 = v847 + 8;
    }
    else
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      uint64_t v42 = a3;
      uint64_t v431 = v911;
      if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
        goto LABEL_457;
      }
      uint64_t v785 = *(void *)(v936 + 16);
      if ((v785 & 4) == 0) {
        goto LABEL_457;
      }
      unint64_t v786 = v785 & 0xFFFFFFFFFFFFFFF8;
      if (!v786) {
        goto LABEL_457;
      }
    }
    *(void *)&long long v940 = &v936;
    sub_1CC5FA668(v786 + 16, &v940);
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    uint64_t v42 = a3;
    uint64_t v431 = v911;
  }
LABEL_457:
  uint64_t v458 = v431 + 6;
  uint64_t v459 = v431[5];
  *((void *)v457 + 3) = v459;
  uint64_t v460 = *(void *)(v459 + 32);
  uint64_t v461 = *((unsigned int *)v457 + 10);
  if (v461)
  {
    uint64_t v596 = *((void *)v457 + 4);
    uint64_t v597 = *(void *)(v460 + 40);
    uint64_t v598 = 32 * v461;
    do
    {
      if (!*(unsigned char *)v596)
      {
        uint64_t v599 = *(unsigned int *)(v596 + 4);
        if ((int)v599 >= 0) {
          uint64_t v600 = (uint64_t *)(*(void *)(v597 + 272) + 8 * v599);
        }
        else {
          uint64_t v600 = (uint64_t *)(*(void *)(v597 + 24) + 16 * (v599 & 0x7FFFFFFF) + 8);
        }
        uint64_t v601 = *v600;
        if (*v600)
        {
          uint64_t v602 = *(void *)(v601 + 16);
          *(void *)(v601 + 16) = v596;
          *(void *)(v596 + 16) = v602;
          if (*(unsigned char *)(v596 + 3))
          {
            *(void *)(v596 + 24) = v601;
          }
          else
          {
            *(void *)(v596 + 24) = 0;
            uint64_t v600 = (uint64_t *)(v602 + 24);
          }
        }
        else
        {
          *(void *)(v596 + 16) = v596;
          *(void *)(v596 + 24) = 0;
        }
        *uint64_t v600 = v596;
      }
      v596 += 32;
      v598 -= 32;
    }
    while (v598);
  }
  uint64_t v462 = *(void *)(v460 + 728);
  if (v462) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v462 + 24))(v462, v457);
  }
  unint64_t v463 = *v458 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v457 = v463 | *(void *)v457 & 7;
  *((void *)v457 + 1) = v458;
  *(void *)(v463 + 8) = v457;
  *uint64_t v458 = *v458 & 7 | (unint64_t)v457;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v361;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v457, v456, (const llvm::MachineOperand *)&v940);
  uint64_t v464 = *(void *)(v42 + 8) + 555600;
  __int16 v465 = (llvm::MachineFunction *)v361[4];
  *(void *)&long long v936 = v938;
  if (v938) {
    llvm::MetadataTracking::track((uint64_t)&v936, v938, 2);
  }
  uint64_t v466 = llvm::MachineFunction::CreateMachineInstr(v465, v464, (unsigned __int8 **)&v936, 0);
  if (!(void)v936) {
    goto LABEL_463;
  }
  int v787 = *(unsigned __int8 *)v936;
  if ((v787 - 4) > 0x1E)
  {
    if ((v787 - 3) >= 0xFFFFFFFE) {
      uint64_t v848 = v936;
    }
    else {
      uint64_t v848 = 0;
    }
    if ((v787 - 3) < 0xFFFFFFFE)
    {
      uint64_t v69 = (llvm::MachineInstr *)a1;
      int v361 = v915;
      if (v787 == 3) {
        *(void *)(v936 + 8) = 0;
      }
      goto LABEL_463;
    }
    unint64_t v789 = v848 + 8;
  }
  else
  {
    uint64_t v69 = (llvm::MachineInstr *)a1;
    int v361 = v915;
    if ((*(unsigned char *)(v936 + 1) & 0x7F) != 2 && !*(_DWORD *)(v936 + 12)) {
      goto LABEL_463;
    }
    uint64_t v788 = *(void *)(v936 + 16);
    if ((v788 & 4) == 0) {
      goto LABEL_463;
    }
    unint64_t v789 = v788 & 0xFFFFFFFFFFFFFFF8;
    if (!v789) {
      goto LABEL_463;
    }
  }
  *(void *)&long long v940 = &v936;
  sub_1CC5FA668(v789 + 16, &v940);
  uint64_t v69 = (llvm::MachineInstr *)a1;
  int v361 = v915;
LABEL_463:
  long long v467 = v361 + 6;
  uint64_t v468 = v361[5];
  *((void *)v466 + 3) = v468;
  uint64_t v469 = *(void *)(v468 + 32);
  uint64_t v470 = *((unsigned int *)v466 + 10);
  if (v470)
  {
    uint64_t v603 = *((void *)v466 + 4);
    uint64_t v604 = *(void *)(v469 + 40);
    uint64_t v605 = 32 * v470;
    do
    {
      if (!*(unsigned char *)v603)
      {
        uint64_t v606 = *(unsigned int *)(v603 + 4);
        if ((int)v606 >= 0) {
          uint64_t v607 = (uint64_t *)(*(void *)(v604 + 272) + 8 * v606);
        }
        else {
          uint64_t v607 = (uint64_t *)(*(void *)(v604 + 24) + 16 * (v606 & 0x7FFFFFFF) + 8);
        }
        uint64_t v608 = *v607;
        if (*v607)
        {
          uint64_t v609 = *(void *)(v608 + 16);
          *(void *)(v608 + 16) = v603;
          *(void *)(v603 + 16) = v609;
          if (*(unsigned char *)(v603 + 3))
          {
            *(void *)(v603 + 24) = v608;
          }
          else
          {
            *(void *)(v603 + 24) = 0;
            uint64_t v607 = (uint64_t *)(v609 + 24);
          }
        }
        else
        {
          *(void *)(v603 + 16) = v603;
          *(void *)(v603 + 24) = 0;
        }
        *uint64_t v607 = v603;
      }
      v603 += 32;
      v605 -= 32;
    }
    while (v605);
  }
  uint64_t v471 = *(void *)(v469 + 728);
  if (v471) {
    (*(void (**)(uint64_t, llvm::MachineInstr *))(*(void *)v471 + 24))(v471, v466);
  }
  unint64_t v472 = *v467 & 0xFFFFFFFFFFFFFFF8;
  *(void *)uint64_t v466 = v472 | *(void *)v466 & 7;
  *((void *)v466 + 1) = v467;
  *(void *)(v472 + 8) = v466;
  *long long v467 = *v467 & 7 | (unint64_t)v466;
  *((void *)&v940 + 1) = 0;
  *(void *)&long long v941 = v928;
  LODWORD(v940) = 4;
  llvm::MachineInstr::addOperand(v466, v465, (const llvm::MachineOperand *)&v940);
LABEL_467:
  llvm::MachineInstr::eraseFromParent(v69);
  if (v938)
  {
    int v473 = *v938;
    if ((v473 - 4) > 0x1E)
    {
      if ((v473 - 3) >= 0xFFFFFFFE) {
        __int16 v475 = v938;
      }
      else {
        __int16 v475 = 0;
      }
      if ((v473 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v476 = (unint64_t)(v475 + 8);
LABEL_477:
        *(void *)&long long v940 = &v938;
        sub_1CC5FA668(v476 + 16, &v940);
        return v923;
      }
      if (v473 == 3) {
        *((void *)v938 + 1) = 0;
      }
    }
    else if ((v938[1] & 0x7F) == 2 || *((_DWORD *)v938 + 3))
    {
      uint64_t v729 = *((void *)v938 + 2);
      if ((v729 & 4) != 0)
      {
        unint64_t v476 = v729 & 0xFFFFFFFFFFFFFFF8;
        if (v476) {
          goto LABEL_477;
        }
      }
    }
  }
  return v923;
}

uint64_t sub_1CB8EFAB8(uint64_t a1, uint64_t a2)
{
  size_t v4 = *(unsigned __int8 **)(a1 + 56);
  uint64_t v62 = v4;
  if (v4) {
    llvm::MetadataTracking::track((uint64_t)&v62, v4, 2);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 8) + 239904;
  if ((*(_WORD *)(a1 + 44) & 4) == 0)
  {
    unsigned int v7 = *(llvm::MachineFunction **)(v5 + 32);
    uint64_t v65 = v62;
    if (v62) {
      llvm::MetadataTracking::track((uint64_t)&v65, v62, 2);
    }
    uint64_t v8 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v7, v6, &v65, 0);
    if (!v65) {
      goto LABEL_7;
    }
    int v46 = *v65;
    if ((v46 - 4) > 0x1E)
    {
      if ((v46 - 3) >= 0xFFFFFFFE) {
        uint64_t v58 = v65;
      }
      else {
        uint64_t v58 = 0;
      }
      if ((v46 - 3) < 0xFFFFFFFE)
      {
        if (v46 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_7;
      }
      unint64_t v48 = (unint64_t)(v58 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_7;
      }
      uint64_t v47 = *((void *)v65 + 2);
      if ((v47 & 4) == 0) {
        goto LABEL_7;
      }
      unint64_t v48 = v47 & 0xFFFFFFFFFFFFFFF8;
      if (!v48) {
        goto LABEL_7;
      }
    }
    *(void *)&long long v63 = &v65;
    sub_1CC5FA668(v48 + 16, &v63);
LABEL_7:
    uint64_t v9 = *(void *)(v5 + 40);
    *(void *)(v8 + 24) = v9;
    uint64_t v10 = *(void *)(v9 + 32);
    uint64_t v11 = *(unsigned int *)(v8 + 40);
    if (v11)
    {
      uint64_t v31 = *(void *)(v8 + 32);
      uint64_t v32 = *(void *)(v10 + 40);
      uint64_t v33 = 32 * v11;
      do
      {
        if (!*(unsigned char *)v31)
        {
          uint64_t v34 = *(unsigned int *)(v31 + 4);
          if ((int)v34 >= 0) {
            unint64_t v35 = (uint64_t *)(*(void *)(v32 + 272) + 8 * v34);
          }
          else {
            unint64_t v35 = (uint64_t *)(*(void *)(v32 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
          }
          uint64_t v36 = *v35;
          if (*v35)
          {
            uint64_t v37 = *(void *)(v36 + 16);
            *(void *)(v36 + 16) = v31;
            *(void *)(v31 + 16) = v37;
            if (*(unsigned char *)(v31 + 3))
            {
              *(void *)(v31 + 24) = v36;
            }
            else
            {
              *(void *)(v31 + 24) = 0;
              unint64_t v35 = (uint64_t *)(v37 + 24);
            }
          }
          else
          {
            *(void *)(v31 + 16) = v31;
            *(void *)(v31 + 24) = 0;
          }
          uint64_t *v35 = v31;
        }
        v31 += 32;
        v33 -= 32;
      }
      while (v33);
    }
    uint64_t v12 = *(void *)(v10 + 728);
    if (v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v8);
    }
    unint64_t v13 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v8 = v13 | *(void *)v8 & 7;
    *(void *)(v8 + 8) = a1;
    *(void *)(v13 + 8) = v8;
    *(void *)a1 = *(void *)a1 & 7 | v8;
    goto LABEL_18;
  }
  unsigned int v7 = *(llvm::MachineFunction **)(v5 + 32);
  uint64_t v65 = v62;
  if (v62) {
    llvm::MetadataTracking::track((uint64_t)&v65, v62, 2);
  }
  uint64_t v8 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v7, v6, &v65, 0);
  if (v65)
  {
    int v49 = *v65;
    if ((v49 - 4) > 0x1E)
    {
      if ((v49 - 3) >= 0xFFFFFFFE) {
        uint64_t v59 = v65;
      }
      else {
        uint64_t v59 = 0;
      }
      if ((v49 - 3) < 0xFFFFFFFE)
      {
        if (v49 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_14;
      }
      unint64_t v51 = (unint64_t)(v59 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_14;
      }
      uint64_t v50 = *((void *)v65 + 2);
      if ((v50 & 4) == 0) {
        goto LABEL_14;
      }
      unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
      if (!v51) {
        goto LABEL_14;
      }
    }
    *(void *)&long long v63 = &v65;
    sub_1CC5FA668(v51 + 16, &v63);
  }
LABEL_14:
  if (v5 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
    *(_WORD *)(v8 + 44) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(v5 + 40), (uint64_t *)a1, v8);
LABEL_18:
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v7, (const llvm::MachineOperand *)&v63);
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v7, (const llvm::MachineOperand *)(*(void *)(a1 + 32) + 32));
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v7, (const llvm::MachineOperand *)&v63);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 0x100000000;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v7, (const llvm::MachineOperand *)&v63);
  long long v64 = 0uLL;
  long long v63 = 0x201000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v7, (const llvm::MachineOperand *)&v63);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v7, (const llvm::MachineOperand *)&v63);
  long long v63 = 0u;
  long long v64 = 0u;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v8, v7, (const llvm::MachineOperand *)&v63);
  int v14 = *(unsigned __int8 **)(a1 + 32);
  int v15 = *v14;
  if (v15 == 1)
  {
    int v16 = 0;
    uint64_t v17 = *((void *)v14 + 2);
    unsigned int v18 = 11972;
  }
  else
  {
    uint64_t v17 = 0;
    int v16 = *((_DWORD *)v14 + 1);
    unsigned int v18 = 11973;
  }
  uint64_t v19 = *(void *)(a2 + 8) + 48 * v18;
  if ((*(_WORD *)(a1 + 44) & 4) == 0)
  {
    unint64_t v20 = *(llvm::MachineFunction **)(v5 + 32);
    uint64_t v65 = v62;
    if (v62) {
      llvm::MetadataTracking::track((uint64_t)&v65, v62, 2);
    }
    uint64_t v21 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v20, v19, &v65, 0);
    if (!v65) {
      goto LABEL_25;
    }
    int v52 = *v65;
    if ((v52 - 4) > 0x1E)
    {
      if ((v52 - 3) >= 0xFFFFFFFE) {
        unint64_t v60 = v65;
      }
      else {
        unint64_t v60 = 0;
      }
      if ((v52 - 3) < 0xFFFFFFFE)
      {
        if (v52 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_25;
      }
      unint64_t v54 = (unint64_t)(v60 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_25;
      }
      uint64_t v53 = *((void *)v65 + 2);
      if ((v53 & 4) == 0) {
        goto LABEL_25;
      }
      unint64_t v54 = v53 & 0xFFFFFFFFFFFFFFF8;
      if (!v54) {
        goto LABEL_25;
      }
    }
    *(void *)&long long v63 = &v65;
    sub_1CC5FA668(v54 + 16, &v63);
LABEL_25:
    uint64_t v22 = *(void *)(v5 + 40);
    *(void *)(v21 + 24) = v22;
    uint64_t v23 = *(void *)(v22 + 32);
    uint64_t v24 = *(unsigned int *)(v21 + 40);
    if (v24)
    {
      uint64_t v38 = *(void *)(v21 + 32);
      uint64_t v39 = *(void *)(v23 + 40);
      uint64_t v40 = 32 * v24;
      do
      {
        if (!*(unsigned char *)v38)
        {
          uint64_t v41 = *(unsigned int *)(v38 + 4);
          if ((int)v41 >= 0) {
            uint64_t v42 = (uint64_t *)(*(void *)(v39 + 272) + 8 * v41);
          }
          else {
            uint64_t v42 = (uint64_t *)(*(void *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
          }
          uint64_t v43 = *v42;
          if (*v42)
          {
            uint64_t v44 = *(void *)(v43 + 16);
            *(void *)(v43 + 16) = v38;
            *(void *)(v38 + 16) = v44;
            if (*(unsigned char *)(v38 + 3))
            {
              *(void *)(v38 + 24) = v43;
            }
            else
            {
              *(void *)(v38 + 24) = 0;
              uint64_t v42 = (uint64_t *)(v44 + 24);
            }
          }
          else
          {
            *(void *)(v38 + 16) = v38;
            *(void *)(v38 + 24) = 0;
          }
          *uint64_t v42 = v38;
        }
        v38 += 32;
        v40 -= 32;
      }
      while (v40);
    }
    uint64_t v25 = *(void *)(v23 + 728);
    if (v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 24))(v25, v21);
    }
    unint64_t v26 = *(void *)a1 & 0xFFFFFFFFFFFFFFF8;
    *(void *)uint64_t v21 = v26 | *(void *)v21 & 7;
    *(void *)(v21 + 8) = a1;
    *(void *)(v26 + 8) = v21;
    *(void *)a1 = *(void *)a1 & 7 | v21;
    goto LABEL_36;
  }
  unint64_t v20 = *(llvm::MachineFunction **)(v5 + 32);
  uint64_t v65 = v62;
  if (v62) {
    llvm::MetadataTracking::track((uint64_t)&v65, v62, 2);
  }
  uint64_t v21 = (uint64_t)llvm::MachineFunction::CreateMachineInstr(v20, v19, &v65, 0);
  if (v65)
  {
    int v55 = *v65;
    if ((v55 - 4) > 0x1E)
    {
      if ((v55 - 3) >= 0xFFFFFFFE) {
        uint64_t v61 = v65;
      }
      else {
        uint64_t v61 = 0;
      }
      if ((v55 - 3) < 0xFFFFFFFE)
      {
        if (v55 == 3) {
          *((void *)v65 + 1) = 0;
        }
        goto LABEL_32;
      }
      unint64_t v57 = (unint64_t)(v61 + 8);
    }
    else
    {
      if ((v65[1] & 0x7F) != 2 && !*((_DWORD *)v65 + 3)) {
        goto LABEL_32;
      }
      uint64_t v56 = *((void *)v65 + 2);
      if ((v56 & 4) == 0) {
        goto LABEL_32;
      }
      unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
      if (!v57) {
        goto LABEL_32;
      }
    }
    *(void *)&long long v63 = &v65;
    sub_1CC5FA668(v57 + 16, &v63);
  }
LABEL_32:
  if (v5 + 48 != a1 && (*(_WORD *)(a1 + 44) & 4) != 0) {
    *(_WORD *)(v21 + 44) |= 0xCu;
  }
  sub_1CC31973C((uint64_t *)(v5 + 40), (uint64_t *)a1, v21);
LABEL_36:
  if (v15 == 1)
  {
    LODWORD(v63) = 1;
    *((void *)&v63 + 1) = 0;
    *(void *)&long long v64 = v17;
  }
  else
  {
    *((void *)&v63 + 1) = 0;
    long long v64 = 0uLL;
    LODWORD(v63) = 0;
    DWORD1(v63) = v16;
  }
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v20, (const llvm::MachineOperand *)&v63);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 0;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v20, (const llvm::MachineOperand *)&v63);
  LODWORD(v63) = 1;
  *((void *)&v63 + 1) = 0;
  *(void *)&long long v64 = 1;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v20, (const llvm::MachineOperand *)&v63);
  long long v64 = 0uLL;
  long long v63 = 0x200000000uLL;
  llvm::MachineInstr::addOperand((llvm::MachineInstr *)v21, v20, (const llvm::MachineOperand *)&v63);
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a1);
  if (v62)
  {
    int v27 = *v62;
    if ((v27 - 4) > 0x1E)
    {
      if ((v27 - 3) >= 0xFFFFFFFE) {
        uint64_t v29 = v62;
      }
      else {
        uint64_t v29 = 0;
      }
      if ((v27 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v30 = (unint64_t)(v29 + 8);
LABEL_49:
        *(void *)&long long v63 = &v62;
        sub_1CC5FA668(v30 + 16, &v63);
        return v5;
      }
      if (v27 == 3) {
        *((void *)v62 + 1) = 0;
      }
    }
    else if ((v62[1] & 0x7F) == 2 || *((_DWORD *)v62 + 3))
    {
      uint64_t v45 = *((void *)v62 + 2);
      if ((v45 & 4) != 0)
      {
        unint64_t v30 = v45 & 0xFFFFFFFFFFFFFFF8;
        if (v30) {
          goto LABEL_49;
        }
      }
    }
  }
  return v5;
}

uint64_t *sub_1CB8F0264@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *result;
  if ((unint64_t)*result <= 7)
  {
    int v9 = *((_DWORD *)result + 4);
    uint64_t v10 = result[1] + a2;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = v10;
    *(_DWORD *)(a3 + 16) = v9;
    *(unsigned char *)(a3 + 20) = 0;
  }
  else
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v5 = result[1] + a2;
    char v6 = *((unsigned char *)result + 20);
    if ((v3 & 4) != 0)
    {
      *(void *)a3 = v4 | 4;
      *(void *)(a3 + 8) = v5;
      *(unsigned char *)(a3 + 20) = v6;
      if (v4) {
        LODWORD(v4) = *(_DWORD *)(v4 + 12);
      }
    }
    else
    {
      *(void *)a3 = v4;
      *(void *)(a3 + 8) = v5;
      *(unsigned char *)(a3 + 20) = v6;
      if (v4)
      {
        uint64_t v7 = *(void *)v4;
        unsigned int v8 = *(_DWORD *)(*(void *)v4 + 8);
        if ((v8 & 0xFE) == 0x12) {
          unsigned int v8 = *(_DWORD *)(**(void **)(v7 + 16) + 8);
        }
        LODWORD(v4) = v8 >> 8;
      }
    }
    *(_DWORD *)(a3 + 16) = v4;
  }
  return result;
}

uint64_t sub_1CB8F02F4@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *(_DWORD *)(result + 8);
  *(_DWORD *)(a3 + 8) = v4;
  if (v4 > 0x40) {
    operator new[]();
  }
  if (v4 == a2) {
    *(void *)a3 = 0;
  }
  else {
    *(void *)a3 = *(void *)result >> a2;
  }
  return result;
}

uint64_t sub_1CB8F03AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v22 = &v23;
  uint64_t v23 = 0;
  if (sub_1CC04C34C(&v22, a2) && v23) {
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(v2 + 16);
  if (v4 == 62)
  {
    uint64_t v6 = **(void **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
    int v7 = *(_DWORD *)(v6 + 8);
    if ((v7 & 0xFE) == 0x12) {
      int v7 = *(_DWORD *)(**(void **)(v6 + 16) + 8);
    }
    if ((v7 & 0xFFFFFF00) != 0x4000)
    {
      unsigned int v4 = 62;
      goto LABEL_17;
    }
    char v8 = sub_1CD0FF880(v2, 0);
    uint64_t result = 0;
    if ((v8 & 1) == 0)
    {
      unsigned int v4 = *(unsigned __int8 *)(v2 + 16);
      goto LABEL_17;
    }
    return result;
  }
  if (v4 != 84) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)(v2 - 32);
  if (!v5 || *(unsigned char *)(v5 + 16) || *(void *)(v5 + 24) != *(void *)(v2 + 72) || (*(unsigned char *)(v5 + 33) & 0x20) == 0)
  {
    unsigned int v4 = 84;
    goto LABEL_17;
  }
  uint64_t result = 0;
  int v21 = *(_DWORD *)(v5 + 36);
  unsigned int v4 = 84;
  if (v21 <= 2002)
  {
    if (v21 != 139 && v21 != 1884) {
      goto LABEL_17;
    }
    return result;
  }
  if (v21 == 2003 || v21 == 2007) {
    return result;
  }
  while (1)
  {
LABEL_17:
    uint64_t v9 = v4 - 54;
    if (v9 > 0x23) {
      return 1;
    }
    if (((1 << v9) & 0x800987000) == 0) {
      break;
    }
LABEL_19:
    int v10 = *(_DWORD *)(v2 + 20);
    if ((v10 & 0x40000000) != 0) {
      uint64_t v11 = *(uint64_t **)(v2 - 8);
    }
    else {
      uint64_t v11 = (uint64_t *)(v2 - 32 * (v10 & 0x7FFFFFF));
    }
    uint64_t v2 = *v11;
    unsigned int v4 = *(unsigned __int8 *)(*v11 + 16);
    if (v2) {
      BOOL v12 = v4 >= 0x1C;
    }
    else {
      BOOL v12 = 0;
    }
    if (!v12) {
      return 1;
    }
  }
  if (!v9)
  {
    int v13 = *(_DWORD *)(v2 + 20);
    if ((v13 & 0x40000000) != 0) {
      uint64_t v14 = *(void *)(v2 - 8);
    }
    else {
      uint64_t v14 = v2 - 32 * (v13 & 0x7FFFFFF);
    }
    uint64_t v15 = *(void *)(v14 + 32);
    if (v15) {
      BOOL v16 = *(unsigned char *)(v15 + 16) == 16;
    }
    else {
      BOOL v16 = 0;
    }
    if (!v16) {
      return 1;
    }
    uint64_t v17 = (void *)(v15 + 24);
    if (*(_DWORD *)(v15 + 32) >= 0x41u) {
      uint64_t v17 = (void *)*v17;
    }
    if (*v17 != 16) {
      return 1;
    }
    goto LABEL_19;
  }
  if (v9 != 6) {
    return 1;
  }
  uint64_t v18 = *(void *)(v2 - 32);
  int v19 = *(_DWORD *)(*(void *)v18 + 8);
  if ((v19 & 0xFE) == 0x12) {
    int v19 = *(_DWORD *)(**(void **)(*(void *)v18 + 16) + 8);
  }
  if ((v19 & 0xFFFFFF00) != 0x4000) {
    return 1;
  }
  char v20 = sub_1CD0FF880(v18, 0);
  uint64_t result = 0;
  if ((v20 & 1) == 0) {
    return 1;
  }
  return result;
}

uint64_t sub_1CB8F05D4()
{
  return 0;
}

uint64_t sub_1CB8F05DC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!a3) {
    goto LABEL_10;
  }
  uint64_t v3 = *(unsigned int *)(a2 + 240);
  uint64_t v4 = *(void *)(a2 + 232);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 232);
    unint64_t v5 = *(unsigned int *)(a2 + 240);
    do
    {
      unint64_t v6 = v5 >> 1;
      uint64_t v7 = v4 + 16 * (v5 >> 1);
      unsigned int v8 = *(_DWORD *)(v7 + 8);
      uint64_t v9 = v7 + 16;
      v5 += ~(v5 >> 1);
      if (v8 < a3) {
        uint64_t v4 = v9;
      }
      else {
        unint64_t v5 = v6;
      }
    }
    while (v5);
  }
  if (v4 == *(void *)(a2 + 232) + 16 * v3 || *(_DWORD *)(v4 + 8) != a3) {
LABEL_10:
  }
    uint64_t v4 = *(void *)(a2 + 232);
  int v10 = *(_DWORD *)(v4 + 4);
  if (v10 == 64) {
    return 6;
  }
  uint64_t result = 0;
  if (v10 <= 31)
  {
    switch(v10)
    {
      case 1:
        return 2;
      case 8:
        return 3;
      case 16:
        return 4;
    }
  }
  else if (v10 == 32)
  {
    return 5;
  }
  else if (v10 == 128)
  {
    return 7;
  }
  return result;
}

uint64_t sub_1CB8F06B0()
{
  return 0;
}

uint64_t sub_1CB8F06B8()
{
  return 1;
}

uint64_t sub_1CB8F06C0(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v6 = a2;
  int v2 = sub_1CB8C32B0(&v6);
  if ((v6 + 85) <= 0xCCu && v2 == 1) {
    return 5;
  }
  int v4 = sub_1CB8C32B0(&v6);
  if ((v4 & (v4 - 1)) != 0) {
    return 7;
  }
  else {
    return 1;
  }
}

uint64_t sub_1CB8F0720()
{
  return 0;
}

uint64_t sub_1CB8F0728()
{
  return 0;
}

uint64_t sub_1CB8F0730()
{
  return 0;
}

uint64_t sub_1CB8F0738()
{
  return 1;
}

uint64_t sub_1CB8F0740()
{
  return 0;
}

uint64_t sub_1CB8F0748()
{
  return 0;
}

uint64_t sub_1CB8F0750()
{
  return 0;
}

uint64_t sub_1CB8F0758()
{
  return 0;
}

uint64_t sub_1CB8F0760(uint64_t a1, unsigned __int8 a2)
{
  return *(void *)(a1 + 8 * a2 + 96);
}

BOOL sub_1CB8F076C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 112);
  if (!v2) {
    return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(unsigned char *)(a1 + 4509) & 0xFB) == 0;
  }
  if (!*(_DWORD *)(v2 + 8)) {
    return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(unsigned char *)(a1 + 4509) & 0xFB) == 0;
  }
  uint64_t v3 = *(void *)(v2 + 40);
  if (!v3) {
    return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(unsigned char *)(a1 + 4509) & 0xFB) == 0;
  }
  int v4 = *(_DWORD *)(v3 + 40);
  if (!v4) {
    return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(unsigned char *)(a1 + 4509) & 0xFB) == 0;
  }
  uint64_t v5 = *(void *)(v3 + 24);
  unsigned __int8 v6 = &unk_1EBCBE000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EBCBE588, memory_order_acquire) & 1) == 0)
  {
    uint64_t v22 = a1;
    uint64_t v21 = v5;
    int v20 = v4;
    int v17 = __cxa_guard_acquire(&qword_1EBCBE588);
    unsigned __int8 v6 = &unk_1EBCBE000;
    int v4 = v20;
    uint64_t v5 = v21;
    int v18 = v17;
    a1 = v22;
    if (v18)
    {
      unint64_t v19 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override) {
        unint64_t v19 = 0xFF51AFD7ED558CCDLL;
      }
      qword_1EBCBE580 = v19;
      __cxa_guard_release(&qword_1EBCBE588);
      unsigned __int8 v6 = (void *)&unk_1EBCBE000;
      int v4 = v20;
      uint64_t v5 = v21;
      a1 = v22;
    }
  }
  unint64_t v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6[176] ^ 0x9889A0E0DBA4EABELL)) ^ ((0x9DDFEA08EB382D69
                                                                    * (v6[176] ^ 0x9889A0E0DBA4EABELL)) >> 47) ^ 0xB5F9CD95B18985D0);
  unsigned int v8 = (-348639895 * ((v7 >> 47) ^ v7)) ^ 0x61742D70;
  int v9 = v4 - 1;
  for (int i = 1; ; ++i)
  {
    unsigned int v11 = v8 & v9;
    uint64_t v12 = v5 + 24 * v11;
    int v13 = *(void **)v12;
    if (*(void *)v12 == -1)
    {
      if ("no-jump-tables" == (char *)-1) {
        goto LABEL_19;
      }
      goto LABEL_9;
    }
    if (v13 != (void *)-2) {
      break;
    }
    if ("no-jump-tables" == (char *)-2) {
      goto LABEL_19;
    }
LABEL_9:
    if (v13 == (void *)-1) {
      return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(unsigned char *)(a1 + 4509) & 0xFB) == 0;
    }
    unsigned int v8 = i + v11;
  }
  if (*(void *)(v12 + 8) != 14) {
    goto LABEL_9;
  }
  if (*v13 != 0x2D706D756A2D6F6ELL || *(void *)((char *)v13 + 6) != 0x73656C6261742D70) {
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v16 = *(void *)(v12 + 16);
  if (v16 && *(_DWORD *)(v16 + 16) == 4 && *(_DWORD *)(v16 + *(unsigned int *)(v16 + 12) + 25) == *(_DWORD *)"true") {
    return 0;
  }
  return (*(unsigned __int8 *)(a1 + 4510) | 4) == 4 || (*(unsigned char *)(a1 + 4509) & 0xFB) == 0;
}

BOOL sub_1CB8F09A8(uint64_t a1, unsigned __int8 a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  if (a6)
  {
    if (a2 && *(void *)(a1 + 8 * a2 + 96) && a4) {
      return *(unsigned char *)(a1 + 179 * a2 + a4 + 137754) == 0;
    }
    return 0;
  }
  if (!a2 || !*(void *)(a1 + 8 * a2 + 96) || !a4) {
    return 0;
  }
  return (*(unsigned char *)(a1 + 179 * a2 + a4 + 137754) & 0xFB) == 0;
}

uint64_t sub_1CB8F0A30(unint64_t a1, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4)
{
  v16[0] = a3;
  v16[1] = a4;
  if ((_BYTE)a3) {
    return *(unsigned __int16 *)(a1 + 2 * a3 + 1528);
  }
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
  {
    LOBYTE(v15[0]) = 0;
    v15[1] = 0;
    unsigned __int8 v14 = 0;
    unsigned int v13 = 0;
    return llvm::TargetLoweringBase::getVectorTypeBreakdown(a1, a2, a3, a4, v15, &v13, &v14);
  }
  else
  {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
    if (v5 == 1) {
    LOBYTE(v15[0]) = sub_1CB87E160(a1, a2, a3, a4);
    }
    unsigned int v8 = sub_1CB87E200((unsigned __int8 *)v15);
    if (v7 == 1) {
    return (ExtendedSizeInBits + v8 - 1) / v8;
    }
  }
}

uint64_t sub_1CB8F0B14(unint64_t a1, llvm::LLVMContext *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1CB87E160(a1, a2, a4, a5);
}

uint64_t sub_1CB8F0B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 584))(a1, a2, a4, a5, 0);
}

uint64_t sub_1CB8F0B58()
{
  return 0;
}

uint64_t sub_1CB8F0B60()
{
  return 0;
}

uint64_t sub_1CB8F0B68()
{
  return 0;
}

uint64_t sub_1CB8F0B70()
{
  return 0;
}

uint64_t sub_1CB8F0B78()
{
  return 0;
}

uint64_t sub_1CB8F0B80()
{
  return 0;
}

uint64_t sub_1CB8F0B88()
{
  return 0;
}

BOOL sub_1CB8F0B90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = **(void **)(a3 + 40);
  return (_BYTE)v3
      && (v3 == 1 || !(BOOL v4 = *(void *)(a1 + 8 * v3 + 96) == 0))
      && *(unsigned char *)(a1 + 390 * v3 + 4004) == 0;
}

uint64_t sub_1CB8F0BE0(uint64_t a1, int a2, unsigned __int8 a3, uint64_t a4, unsigned int a5)
{
  if (a2 != 77) {
    return 0;
  }
  if (a3)
  {
    if ((a3 + 85) < 0x64u) {
      return a5;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    if (*(_DWORD *)(a4 + 8) & 0xFE) != 0x12 && (a5)
    {
      uint64_t v5 = a3;
      if (a3)
      {
        if (*(void *)(a1 + 8 * a3 + 96)) {
          return *(unsigned __int8 *)(a1 + 390 * a3 + 3939) != 2;
        }
        return 0;
      }
    }
  }
  return v5;
}

uint64_t sub_1CB8F0C54()
{
  return 0;
}

uint64_t sub_1CB8F0C5C()
{
  return 0;
}

uint64_t sub_1CB8F0C64()
{
  return 0;
}

uint64_t sub_1CB8F0C6C()
{
  return 0;
}

uint64_t sub_1CB8F0C74(uint64_t a1, llvm::GlobalValue *this, BOOL *a3)
{
  uint64_t v3 = *(void *)(a1 - 8 * *(unsigned int *)(a1 + 8));
  if (!v3) {
    return 0;
  }
  if (*(llvm::GlobalValue **)(v3 + 128) != this) {
    return 0;
  }
  Section = llvm::GlobalValue::getSection(this);
  if (v7 != 11) {
    return 0;
  }
  if (*(void *)Section != 0x74735F6567616D69 || *(void *)(Section + 3) != 0x65746174735F6567) {
    return 0;
  }
  uint64_t v9 = *(unsigned int *)(a1 + 8);
  if (v9 < 5) {
    return 0;
  }
  uint64_t v10 = -8 * v9;
  while (1)
  {
    uint64_t v11 = *(void *)(a1 + v10 + 24);
    if (!*(unsigned char *)v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (*(void *)v12 == 7)
      {
        int v13 = *(_DWORD *)(v12 + 24);
        int v14 = *(_DWORD *)(v12 + 27);
        if (v13 == 1601069926 && v14 == 1953063519) {
          break;
        }
      }
    }
    uint64_t result = 0;
    v10 += 8;
    if (v10 == -24) {
      return result;
    }
  }
  uint64_t v17 = *(void *)(*(void *)(a1 + v10 + 32) + 128);
  if (*(unsigned char *)(v17 + 16) == 16) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  unint64_t v19 = (void *)(v18 + 24);
  if (*(_DWORD *)(v18 + 32) >= 0x41u) {
    unint64_t v19 = (void *)*v19;
  }
  *a3 = *v19 == 0;
  return 1;
}

uint64_t sub_1CB8F0DA8(unsigned char *a1)
{
  return (*a1 < 0x23uLL) & (0x7FFFFFFF0uLL >> *a1);
}

uint64_t sub_1CB8F0DC4(uint64_t result)
{
  if (*(_DWORD *)(result + 24) >= 0x41u)
  {
    uint64_t v1 = *(void *)(result + 16);
    if (v1)
    {
      uint64_t v2 = result;
      MEMORY[0x1D25D9CB0](v1, 0x1000C8000313F17);
      uint64_t result = v2;
    }
  }
  if (*(_DWORD *)(result + 8) >= 0x41u)
  {
    if (*(void *)result)
    {
      uint64_t v3 = result;
      MEMORY[0x1D25D9CB0](*(void *)result, 0x1000C8000313F17);
      return v3;
    }
  }
  return result;
}

uint64_t sub_1CB8F0E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *(void *)(*(void *)(a8 + 40) + 344);
  int v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)v13 + 400))(v13, *(void *)(a2 + 80));
  uint64_t v16 = v15;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 336))(v13);
  unsigned int v18 = *(_DWORD *)(a2 + 88) + (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 24))(v17, v16) * v14;
  uint64_t v19 = *(void *)(*(void *)(a8 + 40) + 344);
  int v20 = (*(uint64_t (**)(uint64_t, void))(*(void *)v19 + 400))(v19, *(void *)(a4 + 80));
  uint64_t v22 = v21;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 336))(v19);
  unsigned int v24 = *(_DWORD *)(a4 + 88) + (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v23 + 24))(v23, v22) * v20;
  uint64_t v25 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v62 = v25;
  if (v25) {
    llvm::MetadataTracking::track((uint64_t)&v62, v25, 2);
  }
  uint64_t v26 = v24 >> 1;
  int v63 = *(_DWORD *)(a2 + 60);
  int v27 = sub_1CD7EBF14(a8, v18 >> 1, (const llvm::APInt *)&v62, (llvm *)4, 0, 1, 0);
  uint64_t v29 = v28;
  if (v62)
  {
    int v30 = *v62;
    if ((v30 - 4) > 0x1E)
    {
      if ((v30 - 3) >= 0xFFFFFFFE) {
        int v55 = v62;
      }
      else {
        int v55 = 0;
      }
      if ((v30 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v56 = (unint64_t)(v55 + 8);
LABEL_36:
        long long v64 = &v62;
        sub_1CC5FA668(v56 + 16, &v64);
        goto LABEL_7;
      }
      if (v30 == 3) {
        *((void *)v62 + 1) = 0;
      }
    }
    else if ((v62[1] & 0x7F) == 2 || *((_DWORD *)v62 + 3))
    {
      uint64_t v60 = *((void *)v62 + 2);
      if ((v60 & 4) != 0)
      {
        unint64_t v56 = v60 & 0xFFFFFFFFFFFFFFF8;
        if (v56) {
          goto LABEL_36;
        }
      }
    }
  }
LABEL_7:
  uint64_t v31 = *(unsigned __int8 **)(a4 + 64);
  uint64_t v62 = v31;
  if (v31) {
    llvm::MetadataTracking::track((uint64_t)&v62, v31, 2);
  }
  int v63 = *(_DWORD *)(a4 + 60);
  uint64_t v32 = sub_1CD7EBF14(a8, v26, (const llvm::APInt *)&v62, (llvm *)4, 0, 1, 0);
  uint64_t v34 = v33;
  if (v62)
  {
    int v35 = *v62;
    if ((v35 - 4) > 0x1E)
    {
      if ((v35 - 3) >= 0xFFFFFFFE) {
        unint64_t v57 = v62;
      }
      else {
        unint64_t v57 = 0;
      }
      if ((v35 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v58 = (unint64_t)(v57 + 8);
LABEL_42:
        long long v64 = &v62;
        sub_1CC5FA668(v58 + 16, &v64);
        goto LABEL_13;
      }
      if (v35 == 3) {
        *((void *)v62 + 1) = 0;
      }
    }
    else if ((v62[1] & 0x7F) == 2 || *((_DWORD *)v62 + 3))
    {
      uint64_t v61 = *((void *)v62 + 2);
      if ((v61 & 4) != 0)
      {
        unint64_t v58 = v61 & 0xFFFFFFFFFFFFFFF8;
        if (v58) {
          goto LABEL_42;
        }
      }
    }
  }
LABEL_13:
  uint64_t v36 = *(void *)(a6 + 80);
  uint64_t v37 = (uint64_t *)(v36 + 24);
  if (*(_DWORD *)(v36 + 32) >= 0x41u) {
    uint64_t v37 = (uint64_t *)*v37;
  }
  uint64_t v38 = *v37;
  uint64_t v39 = *(unsigned __int8 **)(a6 + 64);
  uint64_t v62 = v39;
  if (v39) {
    llvm::MetadataTracking::track((uint64_t)&v62, v39, 2);
  }
  int v63 = *(_DWORD *)(a6 + 60);
  uint64_t result = (uint64_t)sub_1CD7EBF14(a8, v38, (const llvm::APInt *)&v62, (llvm *)5, 0, 1, 0);
  uint64_t v41 = result;
  uint64_t v43 = v42;
  if (v62)
  {
    int v44 = *v62;
    if ((v44 - 4) > 0x1E)
    {
      if ((v44 - 3) >= 0xFFFFFFFE) {
        uint64_t v53 = v62;
      }
      else {
        uint64_t v53 = 0;
      }
      if ((v44 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v54 = (unint64_t)(v53 + 8);
LABEL_30:
        long long v64 = &v62;
        uint64_t result = sub_1CC5FA668(v54 + 16, &v64);
        goto LABEL_21;
      }
      if (v44 == 3) {
        *((void *)v62 + 1) = 0;
      }
    }
    else if ((v62[1] & 0x7F) == 2 || *((_DWORD *)v62 + 3))
    {
      uint64_t v59 = *((void *)v62 + 2);
      if ((v59 & 4) != 0)
      {
        unint64_t v54 = v59 & 0xFFFFFFFFFFFFFFF8;
        if (v54) {
          goto LABEL_30;
        }
      }
    }
  }
LABEL_21:
  unsigned int v45 = *(_DWORD *)(a1 + 8);
  if (v45 >= *(_DWORD *)(a1 + 12)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v46 = (uint64_t **)(*(void *)a1 + 16 * v45);
  *int v46 = v27;
  v46[1] = v29;
  unsigned int v47 = *(_DWORD *)(a1 + 12);
  unsigned int v48 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v48;
  if (v48 >= v47) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v49 = (uint64_t **)(*(void *)a1 + 16 * v48);
  *int v49 = v32;
  v49[1] = v34;
  unsigned int v50 = *(_DWORD *)(a1 + 12);
  unsigned int v51 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v51;
  if (v51 >= v50) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  int v52 = (uint64_t *)(*(void *)a1 + 16 * v51);
  *int v52 = v41;
  v52[1] = v43;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t *sub_1CB8F13A8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, const char *a6, uint64_t a7, uint64_t a8)
{
  int v14 = *(unsigned __int8 **)(a2 + 64);
  uint64_t v67 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v67, v14, 2);
    uint64_t v16 = (int *)(a2 + 60);
    int v15 = *(_DWORD *)(a2 + 60);
    uint64_t v19 = *(unsigned __int8 **)(a2 + 64);
    int v68 = v15;
    int v20 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v17 = (uint64_t *)(a1 + 16);
    unsigned int v18 = v20;
    uint64_t v65 = v19;
    if (v19)
    {
      llvm::MetadataTracking::track((uint64_t)&v65, v19, 2);
      int v15 = *v16;
    }
  }
  else
  {
    uint64_t v16 = (int *)(a2 + 60);
    int v15 = *(_DWORD *)(a2 + 60);
    int v68 = v15;
    uint64_t v17 = (uint64_t *)(a1 + 16);
    unsigned int v18 = *(llvm::APFloatBase **)(a1 + 16);
    uint64_t v65 = 0;
  }
  int v66 = v15;
  uint64_t v21 = sub_1CB8F17C4(v18, a6, (uint64_t)&v65, (llvm *)5, 0, a3, a4, a8, 5, 0);
  uint64_t v23 = v22;
  if (v65)
  {
    int v24 = *v65;
    if ((v24 - 4) > 0x1E)
    {
      if ((v24 - 3) >= 0xFFFFFFFE) {
        unint64_t v54 = v65;
      }
      else {
        unint64_t v54 = 0;
      }
      if ((v24 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v55 = (unint64_t)(v54 + 8);
LABEL_49:
        uint64_t v69 = &v65;
        sub_1CC5FA668(v55 + 16, &v69);
        goto LABEL_9;
      }
      if (v24 == 3) {
        *((void *)v65 + 1) = 0;
      }
    }
    else if ((v65[1] & 0x7F) == 2 || *((_DWORD *)v65 + 3))
    {
      uint64_t v62 = *((void *)v65 + 2);
      if ((v62 & 4) != 0)
      {
        unint64_t v55 = v62 & 0xFFFFFFFFFFFFFFF8;
        if (v55) {
          goto LABEL_49;
        }
      }
    }
  }
LABEL_9:
  int v25 = *(unsigned __int16 *)(a3 + 24);
  if (v25 == 35 || v25 == 11)
  {
    uint64_t v26 = *(void *)(a3 + 80);
    int v27 = (void *)(v26 + 24);
    if (*(_DWORD *)(v26 + 32) >= 0x41u) {
      int v27 = (void *)*v27;
    }
    uint64_t v28 = sub_1CD7EBF14(*v17, *v27 + 4, (const llvm::APInt *)&v67, (llvm *)4, 0, 0, 0);
  }
  else
  {
    uint64_t v31 = sub_1CD7EBF14(*v17, 4, (const llvm::APInt *)&v67, (llvm *)4, 0, 0, 0);
    uint64_t v34 = *(void *)(*v17 + 832);
    if (v34) {
      LOWORD(v34) = *(_WORD *)(v34 + 8);
    }
    uint64_t v28 = sub_1CCFDED5C(*v17, 56, (const llvm::APInt *)&v67, (llvm *)4, 0, a3, (uint64_t)a4, v33, (uint64_t)v31, v32, v34);
  }
  uint64_t v35 = (uint64_t)v28;
  unint64_t v36 = v29;
  uint64_t v37 = (llvm::APFloatBase *)*v17;
  uint64_t v38 = *(unsigned __int8 **)(a2 + 64);
  int v63 = v38;
  if (v38) {
    llvm::MetadataTracking::track((uint64_t)&v63, v38, 2);
  }
  int v64 = *v16;
  uint64_t v40 = sub_1CB8F17C4(v37, (const char *)0x18B, (uint64_t)&v63, (llvm *)5, 0, v35, (void *)v36, v30, 5, 0);
  uint64_t v42 = v41;
  if (v63)
  {
    int v43 = *v63;
    if ((v43 - 4) > 0x1E)
    {
      if ((v43 - 3) >= 0xFFFFFFFE) {
        unsigned int v50 = v63;
      }
      else {
        unsigned int v50 = 0;
      }
      if ((v43 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v51 = (unint64_t)(v50 + 8);
LABEL_37:
        uint64_t v69 = &v63;
        sub_1CC5FA668(v51 + 16, &v69);
        goto LABEL_23;
      }
      if (v43 == 3) {
        *((void *)v63 + 1) = 0;
      }
    }
    else if ((v63[1] & 0x7F) == 2 || *((_DWORD *)v63 + 3))
    {
      uint64_t v60 = *((void *)v63 + 2);
      if ((v60 & 4) != 0)
      {
        unint64_t v51 = v60 & 0xFFFFFFFFFFFFFFF8;
        if (v51) {
          goto LABEL_37;
        }
      }
    }
  }
LABEL_23:
  uint64_t v44 = *v17;
  uint64_t v45 = *(void *)(*v17 + 832);
  if (a5)
  {
    if (v45) {
      LOWORD(v45) = *(_WORD *)(v45 + 8);
    }
    unint64_t v57 = sub_1CCFDED5C(v44, 146, (const llvm::APInt *)&v67, (llvm *)0x31, 0, (uint64_t)v21, v23, v39, (uint64_t)v40, v42, v45);
    __int16 v58 = 0;
    uint64_t v59 = *(void *)(*v17 + 832);
    if (v59) {
      __int16 v58 = *(_WORD *)(v59 + 8);
    }
    int v46 = sub_1CD7F3564((llvm::APFloatBase *)*v17, (const char *)0xD8, (uint64_t)&v67, (llvm *)6, 0, (uint64_t)v57, v56, v58);
  }
  else
  {
    if (v45) {
      LOWORD(v45) = *(_WORD *)(v45 + 8);
    }
    int v46 = sub_1CCFDED5C(v44, 54, (const llvm::APInt *)&v67, (llvm *)6, 0, (uint64_t)v21, v23, v39, (uint64_t)v40, v42, v45);
  }
  unsigned int v47 = v46;
  if (v67)
  {
    int v48 = *v67;
    if ((v48 - 4) > 0x1E)
    {
      if ((v48 - 3) >= 0xFFFFFFFE) {
        int v52 = v67;
      }
      else {
        int v52 = 0;
      }
      if ((v48 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v53 = (unint64_t)(v52 + 8);
LABEL_43:
        uint64_t v69 = &v67;
        sub_1CC5FA668(v53 + 16, &v69);
        return v47;
      }
      if (v48 == 3) {
        *((void *)v67 + 1) = 0;
      }
    }
    else if ((v67[1] & 0x7F) == 2 || *((_DWORD *)v67 + 3))
    {
      uint64_t v61 = *((void *)v67 + 2);
      if ((v61 & 4) != 0)
      {
        unint64_t v53 = v61 & 0xFFFFFFFFFFFFFFF8;
        if (v53) {
          goto LABEL_43;
        }
      }
    }
  }
  return v47;
}

uint64_t *sub_1CB8F17C4(llvm::APFloatBase *a1, const char *a2, uint64_t a3, llvm *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v26[0] = a9;
  v26[1] = a10;
  uint64_t v17 = *(void *)(a6 + 80);
  unsigned int v18 = (unint64_t *)(v17 + 24);
  if (*(_DWORD *)(v17 + 32) >= 0x41u) {
    unsigned int v18 = (unint64_t *)*v18;
  }
  unint64_t v19 = *v18;
  if ((_BYTE)a9) {
    unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)v26);
  }
  else {
    unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v26);
  }
  if (v21 == 1)
  {
    unint64_t v25 = ExtendedSizeInBits;
    unint64_t ExtendedSizeInBits = v25;
  }
  if (v19 % (ExtendedSizeInBits >> 3)) {
    llvm::report_fatal_error((llvm *)"Unaligned shared/coeff register accesses are not supported", (const llvm::Twine *)1);
  }
  uint64_t v22 = *((void *)a1 + 104);
  if (v22) {
    __int16 v23 = *(_WORD *)(v22 + 8);
  }
  else {
    __int16 v23 = 0;
  }
  return sub_1CD7F3564(a1, a2, a3, a4, a5, a6, a7, v23);
}

uint64_t *sub_1CB8F18D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, const llvm::APInt *a8)
{
  uint64_t v8 = *(void *)(a1 + 832);
  if (v8) {
    LOWORD(v8) = *(_WORD *)(v8 + 8);
  }
  return sub_1CCFDED5C(a1, 56, a8, (llvm *)4, 0, a2, a3, (uint64_t)a8, a4, a5, v8);
}

uint64_t *sub_1CB8F191C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, const llvm::APInt *a8)
{
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = (void *)(v8 + 24);
  if (*(_DWORD *)(v8 + 32) >= 0x41u) {
    uint64_t v9 = (void *)*v9;
  }
  return sub_1CD7EBF14(a1, *v9 + a6, a8, (llvm *)4, 0, 0, 0);
}

uint64_t sub_1CB8F1954(uint64_t result, int a2, const llvm::APInt *a3, llvm::APFloatBase *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(int *)(a6 + 8) >= 1)
  {
    uint64_t v9 = a3;
    uint64_t v10 = result;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    int v14 = 0;
    int v15 = 0;
    uint64_t v37 = a4;
    uint64_t v34 = a6;
    do
    {
      uint64_t v16 = *(void *)a6 + v12;
      uint64_t v17 = (llvm *)*(unsigned __int8 *)(v16 + 10);
      int v18 = *(_DWORD *)(v16 + 4);
      uint64_t v19 = *a5 + v11;
      uint64_t v20 = *(void *)v19;
      uint64_t v21 = *(void *)(v19 + 8);
      if ((*(unsigned char *)(v16 + 8) & 0xFC) == 0x1C)
      {
        uint64_t v22 = *((void *)a4 + 104);
        if (v22) {
          __int16 v23 = *(_WORD *)(v22 + 8);
        }
        else {
          __int16 v23 = 0;
        }
        int v24 = sub_1CD7F3564(a4, (const char *)0xD8, (uint64_t)v9, v17, 0, v20, *(void **)(v19 + 8), v23);
        uint64_t v9 = a3;
        a4 = v37;
        uint64_t v20 = (uint64_t)v24;
        LODWORD(v21) = v25;
      }
      int v33 = v14;
      uint64_t v26 = (uint64_t)a4;
      int v15 = sub_1CD3E5420(a4, v10, a2, v9, v18, v20, v21, a8, (uint64_t)v15, v33);
      a2 = v27;
      uint64_t result = sub_1CD7EEB94(v26, v18, v17, 0);
      unint64_t v29 = *(unsigned int *)(a7 + 8);
      if (v29 >= *(unsigned int *)(a7 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v30 = (uint64_t *)(*(void *)a7 + 16 * v29);
      uint64_t *v30 = result;
      v30[1] = v28;
      unsigned int v31 = *(_DWORD *)(a7 + 8) + 1;
      *(_DWORD *)(a7 + 8) = v31;
      ++v13;
      v11 += 16;
      a6 = v34;
      v12 += 12;
      uint64_t v10 = (uint64_t)v15;
      int v14 = 1;
      uint64_t v9 = a3;
      a4 = v37;
    }
    while (v13 < *(int *)(v34 + 8));
    if (v15)
    {
      if (v31 >= *(_DWORD *)(a7 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      uint64_t v32 = (uint64_t **)(*(void *)a7 + 16 * v31);
      *uint64_t v32 = v15;
      v32[1] = (uint64_t *)1;
      ++*(_DWORD *)(a7 + 8);
    }
  }
  return result;
}

uint64_t sub_1CB8F1B54(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 > 3) {
    return 0;
  }
  LODWORD(v4) = a3;
  while (1)
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 24);
    if (v5 <= 0xBF) {
      break;
    }
    if (*(unsigned __int16 *)(a1 + 24) > 0xD6u)
    {
      if (v5 != 215) {
        return v5 == 223;
      }
    }
    else
    {
      if (v5 == 192)
      {
        uint64_t v9 = *(void **)(a1 + 32);
        uint64_t v4 = (v4 + 1);
        uint64_t result = sub_1CB8F1B54(v9[10], v9[11], v4);
        if (!result) {
          return result;
        }
        uint64_t v8 = v9 + 15;
        goto LABEL_29;
      }
      if (v5 != 212) {
        return 0;
      }
    }
    uint64_t v8 = *(uint64_t **)(a1 + 32);
    LODWORD(v4) = v4 + 1;
LABEL_29:
    a1 = *v8;
    if (v4 > 3) {
      return 0;
    }
  }
  if (*(unsigned __int16 *)(a1 + 24) > 0x5Fu)
  {
    switch(v5)
    {
      case 0x60u:
        uint64_t v10 = *(void **)(a1 + 32);
        uint64_t v4 = (v4 + 1);
        uint64_t result = sub_1CB8F1B54(*v10, v10[1], v4);
        if (!result) {
          return result;
        }
        uint64_t v8 = v10 + 5;
        break;
      case 0x62u:
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v8 = (uint64_t *)(v11 + 40);
        if (*(void *)v11 == *(void *)(v11 + 40) && *(_DWORD *)(v11 + 8) == *(_DWORD *)(v11 + 48)) {
          return 1;
        }
        uint64_t v4 = (v4 + 1);
        if ((sub_1CB8F1B54(*(void *)v11, *(void *)(v11 + 8), v4) & 1) == 0) {
          return 0;
        }
        break;
      case 0x8Du:
        unsigned __int8 v6 = *(void **)(a1 + 32);
        uint64_t v7 = v6[5];
        if (*v6 == v7 && *((_DWORD *)v6 + 2) == *((_DWORD *)v6 + 12))
        {
          LODWORD(v4) = v4 + 1;
        }
        else
        {
          uint64_t v4 = (v4 + 1);
          uint64_t result = sub_1CB8F1B54(*v6, v6[1], v4);
          if (!result) {
            return result;
          }
          uint64_t result = sub_1CB8F1B54(v7, v6[6], v4);
          if (!result) {
            return result;
          }
        }
        uint64_t v8 = v6 + 10;
        break;
      default:
        return 0;
    }
    goto LABEL_29;
  }
  if (v5 == 12 || v5 == 36)
  {
    uint64_t v14 = *(void *)(a1 + 80);
    if (*(_UNKNOWN **)(v14 + 32) == &unk_1CFB2E344) {
      uint64_t v15 = *(void *)(v14 + 40);
    }
    else {
      uint64_t v15 = v14 + 24;
    }
    return (*(unsigned char *)(v15 + 28) & 8) == 0;
  }
  else
  {
    if (v5 != 46) {
      return 0;
    }
    uint64_t v12 = *(void *)(**(void **)(a1 + 32) + 80);
    if (*(_DWORD *)(v12 + 32) > 0x40u) {
      uint64_t v13 = **(void **)(v12 + 24);
    }
    else {
      uint64_t v13 = *(void *)(v12 + 24);
    }
    if (v13 == 1830) {
      return 1;
    }
    return v13 == 1851;
  }
}

unint64_t *sub_1CB8F1D6C(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  if (result != a3 && a2 != a3)
  {
    unint64_t v3 = *a3;
    unint64_t v4 = *a3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v5 + 8) = a3;
    *a3 = v5 | v3 & 7;
    unint64_t v6 = *result & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v4 + 8) = result;
    *a2 = v6 | *a2 & 7;
    *(void *)(v6 + 8) = a2;
    *uint64_t result = v3 & 0xFFFFFFFFFFFFFFF8 | *result & 7;
  }
  return result;
}

uint64_t sub_1CB8F1DC4(unint64_t *a1)
{
  unint64_t v1 = *a1;
  BOOL v3 = (*a1 & 0xFFFFFFFFFFFFFFF9) == 0 || (*a1 & 6) != 2;
  if ((v1 & 1) != 0 || !v3)
  {
    uint64_t v8 = (unsigned __int16)(v1 >> 3);
    uint64_t v9 = (unsigned __int16)(v1 >> 19);
    if ((v1 & 2) == 0) {
      uint64_t v9 = (v1 >> 19);
    }
    if ((v1 & 4) != 0) {
      uint64_t v8 = v9;
    }
    if (v1) {
      return (v1 >> 3);
    }
    else {
      return v8;
    }
  }
  else
  {
    int v4 = (unsigned __int16)(v1 >> 3);
    int v5 = (unsigned __int16)(v1 >> 19);
    if ((v1 & 2) == 0) {
      int v5 = v1 >> 19;
    }
    if ((v1 & 4) != 0) {
      int v6 = v5;
    }
    else {
      int v6 = (unsigned __int16)(v1 >> 3);
    }
    return (v6 * v4);
  }
}

uint64_t *sub_1CB8F1E58@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *((unsigned __int8 *)result + 32);
  if (!*((unsigned char *)result + 32) || (int v4 = *((unsigned __int8 *)a2 + 32), !*((unsigned char *)a2 + 32)))
  {
    *(_WORD *)(a3 + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v5;
    uint64_t v6 = a2[4];
LABEL_8:
    *(void *)(a3 + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    long long v7 = *((_OWORD *)result + 1);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    uint64_t v6 = result[4];
    goto LABEL_8;
  }
  uint64_t v8 = *((unsigned __int8 *)result + 33);
  if (v8 == 1)
  {
    uint64_t v9 = result;
    uint64_t result = (uint64_t *)*result;
    uint64_t v8 = v9[1];
  }
  else
  {
    LOBYTE(v3) = 2;
  }
  uint64_t v10 = a2[1];
  if (*((unsigned char *)a2 + 33) == 1)
  {
    uint64_t v11 = (uint64_t *)*a2;
  }
  else
  {
    LOBYTE(v4) = 2;
    uint64_t v11 = a2;
  }
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v10;
  *(unsigned char *)(a3 + 32) = v3;
  *(unsigned char *)(a3 + 33) = v4;
  return result;
}

uint64_t sub_1CB8F1EEC(uint64_t result, unsigned int a2, uint64_t a3)
{
  *(_DWORD *)(result + 8) = a2;
  if (a2 > 0x40) {
    operator new[]();
  }
  unint64_t v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
  if (!a2) {
    unint64_t v3 = 0;
  }
  *(void *)uint64_t result = v3 & a3;
  return result;
}

BOOL sub_1CB8F2034(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  char v3 = a2;
  v11[0] = a2;
  v11[1] = a3;
  if (*a1) {
    uint64_t ExtendedSizeInBits = sub_1CB87E200(a1);
  }
  else {
    uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
  }
  unint64_t v6 = ExtendedSizeInBits;
  int v7 = v5;
  if (v3) {
    unint64_t v8 = sub_1CB87E200((unsigned __int8 *)v11);
  }
  else {
    unint64_t v8 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v11);
  }
  return (v7 != 1 || v9 == 1) && v6 < v8;
}

unint64_t sub_1CB8F20C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v1 = (unint64_t *)(a1 + 24);
  if ((v2 & 0xFFFFFFFFFFFFFFF9) == 0) {
    return -1;
  }
  unint64_t result = (unint64_t)(sub_1CB8F1DC4(v1) + 7) >> 3;
  if (v4 == 1)
  {
    unint64_t v5 = result;
    return v5;
  }
  return result;
}

llvm::LLVMContext *sub_1CB8F2120(llvm::LLVMContext *result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 == 64) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a3;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a7 + 52 * v7 + 4 * a4);
  switch(a4)
  {
    case 0u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 16;
      *(unsigned char *)(a2 + 64) = 102;
      int v10 = 164;
      goto LABEL_15;
    case 1u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 12;
      unint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 0xCu, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v11;
      int v12 = 152;
      goto LABEL_13;
    case 2u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 8;
      *(unsigned char *)(a2 + 64) = 101;
      int v10 = 135;
      goto LABEL_15;
    case 3u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 7;
      unint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 7u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v13;
      int v12 = 117;
      goto LABEL_13;
    case 4u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 6;
      unint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 6u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v14;
      int v12 = 99;
      goto LABEL_13;
    case 5u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 5;
      unint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 5u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v15;
      int v12 = 81;
      goto LABEL_13;
    case 6u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 4;
      *(unsigned char *)(a2 + 64) = 97;
      int v10 = 63;
      goto LABEL_15;
    case 7u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 3;
      unint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 3u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v16;
      int v12 = 45;
LABEL_13:
      *(_DWORD *)(a2 + 80) = v12;
      goto LABEL_45;
    case 8u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 2;
      *(unsigned char *)(a2 + 64) = 95;
      int v10 = 27;
LABEL_15:
      *(_DWORD *)(a2 + 80) = v10;
      int v17 = 33;
      *(void *)(a2 + 72) = 0;
      goto LABEL_46;
    case 9u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      int v17 = 1;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 9;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 3;
      unint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 3u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v18;
      if (a3) {
        int v19 = 26;
      }
      else {
        int v19 = 27;
      }
      *(_DWORD *)(a2 + 80) = v19;
      goto LABEL_46;
    case 0xAu:
      if (a3 == 64) {
        uint64_t v20 = a6;
      }
      else {
        uint64_t v20 = 0;
      }
      if (a3 == 64) {
        uint64_t v21 = a5;
      }
      else {
        uint64_t v21 = 5;
      }
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v20;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 5;
      goto LABEL_44;
    case 0xBu:
      unint64_t v22 = a5 & 0xFFFFFFFFFFFFFF00;
      if (a3 == 3) {
        unsigned __int8 v23 = 4;
      }
      else {
        unsigned __int8 v23 = 5;
      }
      if (a3 == 64) {
        uint64_t v24 = a6;
      }
      else {
        uint64_t v24 = 0;
      }
      if (a3 == 64) {
        unsigned __int8 v23 = a5;
      }
      else {
        unint64_t v22 = 0;
      }
      *(void *)a2 = v22 & 0xFFFFFFFFFFFFFF00 | v23;
      *(void *)(a2 + 8) = v24;
      int v17 = 1;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 4;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 1;
      unint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 1u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v25;
      goto LABEL_46;
    case 0xCu:
      if (a3 == 3 || a3 == 64) {
        char v27 = 4;
      }
      else {
        char v27 = 5;
      }
      *(unsigned char *)a2 = v27;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 3;
LABEL_44:
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 1;
      unint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 1u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v28;
LABEL_45:
      int v17 = 33;
LABEL_46:
      *(_DWORD *)(a2 + 84) = v17;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1CB8F2578(uint64_t a1)
{
  if (a1 > 23)
  {
    if (a1 == 32) {
      unsigned int v2 = 2;
    }
    else {
      unsigned int v2 = a1 == 48;
    }
    if (a1 == 24) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 3;
    }
    if (a1 <= 31) {
      return v3;
    }
    else {
      return v2;
    }
  }
  else
  {
    switch(a1)
    {
      case 2:
        uint64_t result = 11;
        break;
      case 3:
      case 5:
      case 7:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 17:
      case 18:
      case 19:
        __break(1u);
        JUMPOUT(0x1CB8F261CLL);
      case 4:
        uint64_t result = 10;
        break;
      case 6:
        uint64_t result = 9;
        break;
      case 8:
        uint64_t result = 8;
        break;
      case 12:
        uint64_t result = 7;
        break;
      case 16:
        uint64_t result = 6;
        break;
      case 20:
        uint64_t result = 5;
        break;
      default:
        uint64_t result = 12;
        break;
    }
  }
  return result;
}

uint64_t *sub_1CB8F266C(uint64_t a1, unint64_t a2, llvm::APFloatBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = (uint64_t *)a1;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  int v10 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v147 = v10;
  if (v10) {
    llvm::MetadataTracking::track((uint64_t)&v147, v10, 2);
  }
  int v148 = *((_DWORD *)v9 + 15);
  unsigned int v11 = *((unsigned __int16 *)v9 + 12);
  BOOL v12 = v11 > 0x26;
  uint64_t v13 = (1 << v11) & 0x6000006000;
  if (!v12 && v13 != 0)
  {
    uint64_t v94 = *(void *)(*((void *)a3 + 5) + 344);
    unint64_t v95 = v9;
    int v96 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v94 + 400))(v94, v9[10]);
    uint64_t v98 = v97;
    uint64_t v99 = (*(uint64_t (**)(uint64_t))(*(void *)v94 + 336))(v94);
    int v100 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v99 + 24))(v99, v98);
    int v9 = sub_1CD7EBF14((uint64_t)a3, (*((_DWORD *)v95 + 22) + v100 * v96) >> 1, (const llvm::APInt *)&v147, (llvm *)4, 0, 0, 0);
    goto LABEL_138;
  }
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = 1;
  int v142 = (void *)a2;
  uint64_t v143 = (uint64_t)v9;
  while (1)
  {
    while (1)
    {
      int v17 = *((unsigned __int16 *)v9 + 12);
      if ((v17 - 198) <= 2)
      {
        while (1)
        {
          *(_OWORD *)__src = *(_OWORD *)(*(void *)(*(void *)v9[4] + 40) + 16 * *(unsigned int *)(v9[4] + 8));
          if (LOBYTE(__src[0])) {
            uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)__src);
          }
          else {
            uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          }
          unint64_t v20 = ExtendedSizeInBits;
          if (v19 == 1) {
          if (v20 < 0x10)
          }
            break;
          uint64_t v21 = (unsigned int *)v9[4];
          int v9 = *(uint64_t **)v21;
          a2 = a2 & 0xFFFFFFFF00000000 | v21[2];
          int v17 = *(unsigned __int16 *)(*(void *)v21 + 24);
          if ((v17 - 198) >= 3) {
            goto LABEL_19;
          }
        }
        int v17 = *((unsigned __int16 *)v9 + 12);
      }
LABEL_19:
      if (v17 == 56)
      {
        unint64_t v22 = v16;
        unint64_t v23 = v15;
        uint64_t v24 = v9[4];
        uint64_t v25 = *(void *)v24;
        unsigned int v26 = *(unsigned __int16 *)(*(void *)v24 + 24);
        BOOL v12 = v26 > 0x26;
        uint64_t v27 = (1 << v26) & 0x6000006000;
        if (!v12 && v27 != 0)
        {
          uint64_t v29 = *(void *)(*((void *)a3 + 5) + 344);
          int v30 = (*(uint64_t (**)(uint64_t, void))(*(void *)v29 + 400))(v29, *(void *)(v25 + 80));
          uint64_t v32 = v31;
          uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 336))(v29);
          unint64_t v34 = *(_DWORD *)(v25 + 88)
              + (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v33 + 24))(v33, v32) * v30;
          uint64_t v35 = v9[4];
          int v9 = *(uint64_t **)(v35 + 40);
          unint64_t v36 = *(unsigned int *)(v35 + 48);
          unint64_t v37 = a2 & 0xFFFFFFFF00000000;
          unint64_t v15 = v23;
          unint64_t v16 = v22;
          goto LABEL_57;
        }
        uint64_t v38 = v9 + 3;
        goto LABEL_47;
      }
      uint64_t v38 = v9 + 3;
      if (v17 != 172) {
        break;
      }
      for (uint64_t i = 0; i != 8; i += 4)
      {
        uint64_t v67 = &__src[i];
        *((_DWORD *)v67 + 2) = 1;
        *uint64_t v67 = 0;
        *((_DWORD *)v67 + 6) = 1;
        v67[2] = 0;
      }
      sub_1CD7F121C((uint64_t)a3, *(void *)v9[4], *(void *)(v9[4] + 8), 0, (uint64_t)&v153);
      if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
        MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
      }
      __src[0] = v153;
      LODWORD(__src[1]) = v154;
      unsigned int v154 = 0;
      if (v159 >= 0x41 && v158)
      {
        MEMORY[0x1D25D9CB0](v158, 0x1000C8000313F17);
        uint64_t v158 = v155;
        unsigned int v159 = v156;
        unsigned int v156 = 0;
        if (v154 >= 0x41 && v153) {
          MEMORY[0x1D25D9CB0](v153, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v158 = v155;
        unsigned int v159 = v156;
      }
      sub_1CD7F121C((uint64_t)a3, *(void *)(v9[4] + 40), *(void *)(v9[4] + 48), 0, (uint64_t)&v153);
      if (v161 >= 0x41 && v160) {
        MEMORY[0x1D25D9CB0](v160, 0x1000C8000313F17);
      }
      uint64_t v160 = v153;
      unsigned int v161 = v154;
      unsigned int v154 = 0;
      if (v163[0] >= 0x41u && v162)
      {
        MEMORY[0x1D25D9CB0](v162, 0x1000C8000313F17);
        uint64_t v162 = v155;
        v163[0] = v156;
        unsigned int v156 = 0;
        if (v154 >= 0x41 && v153) {
          MEMORY[0x1D25D9CB0](v153, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v162 = v155;
        v163[0] = v156;
      }
      int v152 = (int)__src[1];
      if (LODWORD(__src[1]) > 0x40) {
        operator new[]();
      }
      if (LODWORD(__src[1])) {
        unint64_t v68 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
      }
      else {
        unint64_t v68 = 0;
      }
      uint64_t v69 = v68 & ~(uint64_t)__src[0];
      uint64_t v151 = v69;
      int v152 = 0;
      unsigned int v150 = v161;
      if (v161 > 0x40) {
        operator new[]();
      }
      if (v161) {
        unint64_t v83 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v161;
      }
      else {
        unint64_t v83 = 0;
      }
      unint64_t v149 = v83 & ~(unint64_t)v160;
      unsigned int v150 = 0;
      unint64_t v22 = v16;
      BOOL v84 = (v149 & v69) == 0;
      unint64_t v23 = v15;
      for (unint64_t j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
      {
        unint64_t v86 = &__src[j / 2];
        if (v163[j] >= 0x41u)
        {
          uint64_t v87 = v86[6];
          if (v87) {
            MEMORY[0x1D25D9CB0](v87, 0x1000C8000313F17);
          }
        }
        if (*((_DWORD *)v86 + 10) >= 0x41u)
        {
          int v88 = v86[4];
          if (v88) {
            MEMORY[0x1D25D9CB0](v88, 0x1000C8000313F17);
          }
        }
      }
      if (!v84)
      {
        unint64_t v15 = v23;
        unint64_t v16 = v22;
        break;
      }
      uint64_t v24 = v9[4];
LABEL_47:
      unint64_t v15 = v23;
      uint64_t v57 = 0;
      char v58 = 1;
      unint64_t v16 = v22;
      while (1)
      {
        char v59 = v58;
        uint64_t v60 = *(void *)(v24 + 40 * v57);
        int v61 = *(unsigned __int16 *)(v60 + 24);
        if (v61 == 35 || v61 == 11) {
          break;
        }
        char v58 = 0;
        uint64_t v57 = 1;
        if ((v59 & 1) == 0) {
          goto LABEL_26;
        }
      }
      uint64_t v63 = *(void *)(v60 + 80);
      int v64 = (unint64_t *)(v63 + 24);
      if (*(_DWORD *)(v63 + 32) >= 0x41u) {
        int v64 = (unint64_t *)*v64;
      }
      unint64_t v34 = *v64;
      uint64_t v65 = v24 + 40 * (v57 ^ 1);
      int v9 = *(uint64_t **)v65;
      unint64_t v36 = *(unsigned int *)(v65 + 8);
      unint64_t v37 = a2 & 0xFFFFFFFF00000000;
LABEL_57:
      a2 = v37 | v36;
      v15 += v34 * v16;
    }
LABEL_26:
    if (*v38 == 56)
    {
      uint64_t v39 = 0;
      uint64_t v40 = v9[4];
      char v41 = 1;
      while (1)
      {
        char v42 = v41;
        int v43 = (unsigned int *)(v40 + 40 * v39);
        uint64_t v44 = *(void *)v43;
        if (*(_WORD *)(*(void *)v43 + 24) == 56)
        {
          uint64_t v45 = *(uint64_t **)(v44 + 32);
          uint64_t v46 = v45[5];
          int v47 = *(unsigned __int16 *)(v46 + 24);
          if (v47 == 35 || v47 == 11) {
            break;
          }
        }
        char v41 = 0;
        uint64_t v39 = 1;
        if ((v42 & 1) == 0)
        {
          if (v16 == 1)
          {
            BOOL v49 = 1;
            if (!v145 && !v144)
            {
              unsigned int v50 = *(uint64_t **)v40;
              int v51 = *(unsigned __int16 *)(*(void *)v40 + 24);
              if (v51 == 175 || v51 == 58)
              {
                uint64_t v144 = (void *)*(unsigned int *)(v40 + 48);
                uint64_t v145 = *(void *)(v40 + 40);
                a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v40 + 8);
                uint64_t v40 = v50[4];
                int v9 = v50;
              }
              else
              {
                uint64_t v145 = 0;
              }
              int v70 = *(unsigned __int16 *)(*(void *)(v40 + 40) + 24);
              if (v70 == 175 || v70 == 58)
              {
                uint64_t v144 = (void *)*(unsigned int *)(v40 + 8);
                uint64_t v145 = *(void *)v40;
                a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v40 + 48);
                int v9 = *(uint64_t **)(v40 + 40);
              }
            }
          }
          else
          {
            BOOL v49 = 0;
          }
          goto LABEL_75;
        }
      }
      uint64_t v52 = *(void *)(v46 + 80);
      unint64_t v53 = (unint64_t *)(v52 + 24);
      if (*(_DWORD *)(v52 + 32) >= 0x41u) {
        unint64_t v53 = (unint64_t *)*v53;
      }
      uint64_t v54 = *((void *)a3 + 104);
      if (v54) {
        LOWORD(v54) = *(_WORD *)(v54 + 8);
      }
      unint64_t v34 = *v53;
      uint64_t v55 = *(void *)(v44 + 40) + 16 * v43[2];
      int v9 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v147, *(llvm **)v55, *(void *)(v55 + 8), *v45, v45[1], a8, *(void *)(v40 + 40 * (v39 ^ 1)), *(void *)(v40 + 40 * (v39 ^ 1) + 8), v54);
      unint64_t v37 = v56;
      unint64_t v36 = a2 & 0xFFFFFFFF00000000;
      goto LABEL_57;
    }
    BOOL v49 = v16 == 1;
LABEL_75:
    unsigned int v71 = *((unsigned __int16 *)v9 + 12);
    if (v71 <= 0xAE) {
      break;
    }
    if (v71 != 175) {
      goto LABEL_128;
    }
    uint64_t v72 = v9[4];
    uint64_t v78 = *(void *)(v72 + 40);
    int v79 = *(unsigned __int16 *)(v78 + 24);
    if (v79 != 35 && v79 != 11) {
      goto LABEL_128;
    }
    uint64_t v81 = *(void *)(v78 + 80);
    uint64_t v82 = (void *)(v81 + 24);
    if (*(_DWORD *)(v81 + 32) >= 0x41u) {
      uint64_t v82 = (void *)*v82;
    }
    v16 <<= *v82;
LABEL_94:
    a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v72 + 8);
    int v9 = *(uint64_t **)v72;
  }
  if (v71 == 58)
  {
    uint64_t v72 = v9[4];
    uint64_t v73 = *(void *)(v72 + 40);
    int v74 = *(unsigned __int16 *)(v73 + 24);
    if (v74 != 35 && v74 != 11) {
      goto LABEL_128;
    }
    uint64_t v76 = *(void *)(v73 + 80);
    uint64_t v77 = (void *)(v76 + 24);
    if (*(_DWORD *)(v76 + 32) >= 0x41u) {
      uint64_t v77 = (void *)*v77;
    }
    v16 *= *v77;
    goto LABEL_94;
  }
  if (v71 == 11 || v71 == 35)
  {
LABEL_129:
    if (*(unsigned char *)(v9[5] + 16 * a2) == 4)
    {
      if (!v49)
      {
LABEL_131:
        unint64_t v89 = (unsigned __int16)(v16 >> 1);
        if (v89 < 2)
        {
LABEL_132:
          if (v145 || v144)
          {
            uint64_t v107 = *((void *)a3 + 104);
            if (v107) {
              __int16 v108 = *(_WORD *)(v107 + 8);
            }
            else {
              __int16 v108 = 0;
            }
            uint64_t v122 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v147, (llvm *)4, 0, v145, v144, v108);
            uint64_t v124 = v123;
            unint64_t v125 = sub_1CD7EBF14((uint64_t)a3, 1, (const llvm::APInt *)&v147, (llvm *)5, 0, 0, 0);
            uint64_t v128 = *((void *)a3 + 104);
            if (v128) {
              LOWORD(v128) = *(_WORD *)(v128 + 8);
            }
            unint64_t v129 = sub_1CCFDED5C((uint64_t)a3, 176, (const llvm::APInt *)&v147, (llvm *)4, 0, (uint64_t)v122, v124, v127, (uint64_t)v125, v126, v128);
            uint64_t v132 = *((void *)a3 + 104);
            if (v132) {
              LOWORD(v132) = *(_WORD *)(v132 + 8);
            }
            int v9 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v147, (llvm *)4, 0, (uint64_t)v9, a2, v131, (uint64_t)v129, v130, v132);
            a2 = a2 & 0xFFFFFFFF00000000 | v133;
            if (!(unsigned __int16)(v15 >> 1)) {
              goto LABEL_138;
            }
          }
          else if (!(unsigned __int16)(v15 >> 1))
          {
            goto LABEL_138;
          }
          uint64_t v90 = sub_1CD7EBF14((uint64_t)a3, (unsigned __int16)(v15 >> 1), (const llvm::APInt *)&v147, (llvm *)4, 0, 0, 0);
          uint64_t v93 = *((void *)a3 + 104);
          if (v93) {
            LOWORD(v93) = *(_WORD *)(v93 + 8);
          }
          int v9 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v147, (llvm *)4, 0, (uint64_t)v9, a2, v92, (uint64_t)v90, v91, v93);
          goto LABEL_138;
        }
        uint64_t v109 = sub_1CD7EBF14((uint64_t)a3, v89, (const llvm::APInt *)&v147, (llvm *)4, 0, 0, 0);
        uint64_t v112 = *((void *)a3 + 104);
        if (v112) {
          LOWORD(v112) = *(_WORD *)(v112 + 8);
        }
        uint64_t v113 = sub_1CCFDED5C((uint64_t)a3, 58, (const llvm::APInt *)&v147, (llvm *)4, 0, (uint64_t)v9, a2, v111, (uint64_t)v109, v110, v112);
LABEL_165:
        int v9 = v113;
        a2 = a2 & 0xFFFFFFFF00000000 | v114;
        goto LABEL_132;
      }
    }
    else
    {
      uint64_t v105 = *((void *)a3 + 104);
      if (v105) {
        __int16 v106 = *(_WORD *)(v105 + 8);
      }
      else {
        __int16 v106 = 0;
      }
      int v9 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v147, (llvm *)4, 0, (uint64_t)v9, (void *)a2, v106);
      a2 = a2 & 0xFFFFFFFF00000000 | v117;
      if (!v49) {
        goto LABEL_131;
      }
    }
    uint64_t v118 = sub_1CD7EBF14((uint64_t)a3, 1, (const llvm::APInt *)&v147, (llvm *)5, 0, 0, 0);
    uint64_t v121 = *((void *)a3 + 104);
    if (v121) {
      LOWORD(v121) = *(_WORD *)(v121 + 8);
    }
    uint64_t v113 = sub_1CCFDED5C((uint64_t)a3, 177, (const llvm::APInt *)&v147, (llvm *)4, 0, (uint64_t)v9, a2, v120, (uint64_t)v118, v119, v121);
    goto LABEL_165;
  }
LABEL_128:
  if (((v15 | v16) & 1) == 0) {
    goto LABEL_129;
  }
  uint64_t v115 = *((void *)a3 + 104);
  if (v115) {
    __int16 v116 = *(_WORD *)(v115 + 8);
  }
  else {
    __int16 v116 = 0;
  }
  unint64_t v134 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v147, (llvm *)4, 0, v143, v142, v116);
  unint64_t v136 = a2 & 0xFFFFFFFF00000000 | v135;
  uint64_t v137 = sub_1CD7EBF14((uint64_t)a3, 1, (const llvm::APInt *)&v147, (llvm *)5, 0, 0, 0);
  uint64_t v140 = *((void *)a3 + 104);
  if (v140) {
    LOWORD(v140) = *(_WORD *)(v140 + 8);
  }
  int v9 = sub_1CCFDED5C((uint64_t)a3, 177, (const llvm::APInt *)&v147, (llvm *)4, 0, (uint64_t)v134, v136, v139, (uint64_t)v137, v138, v140);
LABEL_138:
  if (v147)
  {
    int v101 = *v147;
    if ((v101 - 4) > 0x1E)
    {
      if ((v101 - 3) >= 0xFFFFFFFE) {
        uint64_t v103 = v147;
      }
      else {
        uint64_t v103 = 0;
      }
      if ((v101 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v104 = (unint64_t)(v103 + 8);
        goto LABEL_148;
      }
      if (v101 == 3) {
        *((void *)v147 + 1) = 0;
      }
    }
    else if ((v147[1] & 0x7F) == 2 || *((_DWORD *)v147 + 3))
    {
      uint64_t v141 = *((void *)v147 + 2);
      if ((v141 & 4) != 0)
      {
        unint64_t v104 = v141 & 0xFFFFFFFFFFFFFFF8;
        if (v104)
        {
LABEL_148:
          __src[0] = &v147;
          sub_1CC5FA668(v104 + 16, __src);
        }
      }
    }
  }
  return v9;
}

llvm::LLVMContext *sub_1CB8F345C(llvm::LLVMContext *result, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 == 64) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = a3;
  }
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a7 + 28 * v7 + 4 * a4);
  switch(a4)
  {
    case 0u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 4;
      *(unsigned char *)(a2 + 64) = 97;
      int v9 = 63;
      goto LABEL_8;
    case 1u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 3;
      uint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 3u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v10;
      *(_DWORD *)(a2 + 80) = 45;
      goto LABEL_35;
    case 2u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 10;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 2;
      *(unsigned char *)(a2 + 64) = 95;
      int v9 = 27;
LABEL_8:
      *(_DWORD *)(a2 + 80) = v9;
      int v11 = 33;
      *(void *)(a2 + 72) = 0;
      goto LABEL_36;
    case 3u:
      *(unsigned char *)a2 = -82;
      *(void *)(a2 + 8) = 0;
      int v11 = 1;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 9;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 3;
      uint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 3u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v12;
      *(_DWORD *)(a2 + 80) = 27;
      goto LABEL_36;
    case 4u:
      if (a3 == 64) {
        uint64_t v13 = a6;
      }
      else {
        uint64_t v13 = 0;
      }
      if (a3 == 64) {
        uint64_t v14 = a5;
      }
      else {
        uint64_t v14 = 5;
      }
      *(void *)a2 = v14;
      *(void *)(a2 + 8) = v13;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 5;
      goto LABEL_34;
    case 5u:
      unint64_t v15 = a5 & 0xFFFFFFFFFFFFFF00;
      if (a3 == 3) {
        unsigned __int8 v16 = 4;
      }
      else {
        unsigned __int8 v16 = 5;
      }
      if (a3 == 64) {
        uint64_t v17 = a6;
      }
      else {
        uint64_t v17 = 0;
      }
      if (a3 == 64) {
        unsigned __int8 v16 = a5;
      }
      else {
        unint64_t v15 = 0;
      }
      *(void *)a2 = v15 & 0xFFFFFFFFFFFFFF00 | v16;
      *(void *)(a2 + 8) = v17;
      int v11 = 1;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 4;
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 1;
      uint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 1u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v18;
      goto LABEL_36;
    case 6u:
      if (a3 == 3 || a3 == 64) {
        char v20 = 4;
      }
      else {
        char v20 = 5;
      }
      *(unsigned char *)a2 = v20;
      *(void *)(a2 + 8) = 0;
      *(unsigned char *)(a2 + 16) = 1;
      *(void *)(a2 + 24) = 0;
      *(unsigned char *)(a2 + 40) = 3;
LABEL_34:
      *(void *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 1;
      uint64_t result = (llvm::LLVMContext *)sub_1CB8E5DAC(result, *(void *)(a2 + 40), 0, 1u, 0);
      *(void *)(a2 + 64) = result;
      *(void *)(a2 + 72) = v21;
LABEL_35:
      int v11 = 33;
LABEL_36:
      *(_DWORD *)(a2 + 84) = v11;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_1CB8F36E0(uint64_t a1, unint64_t a2, llvm::APFloatBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (uint64_t *)a1;
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  int v11 = *(unsigned __int8 **)(a1 + 64);
  unsigned int v130 = v11;
  if (v11) {
    llvm::MetadataTracking::track((uint64_t)&v130, v11, 2);
  }
  int v131 = *((_DWORD *)v10 + 15);
  unsigned int v12 = *((unsigned __int16 *)v10 + 12);
  BOOL v13 = v12 > 0x26;
  uint64_t v14 = (1 << v12) & 0x6000006000;
  if (!v13 && v14 != 0)
  {
    uint64_t v99 = *(void *)(*((void *)a3 + 5) + 344);
    int v100 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v99 + 400))(v99, v10[10]);
    uint64_t v102 = v101;
    uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 336))(v99);
    int v104 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v103 + 24))(v103, v102);
    uint64_t v10 = sub_1CD7EBF14((uint64_t)a3, (*((_DWORD *)v10 + 22) + v104 * v100), (const llvm::APInt *)&v130, (llvm *)4, 0, 0, 0);
    goto LABEL_135;
  }
  uint64_t v128 = 0;
  unint64_t v129 = 0;
  uint64_t v16 = 0;
LABEL_9:
  uint64_t v17 = 1;
  while (1)
  {
    while (1)
    {
      int v18 = *((unsigned __int16 *)v10 + 12);
      if ((v18 - 198) <= 2)
      {
        while (1)
        {
          *(_OWORD *)__src = *(_OWORD *)(*(void *)(*(void *)v10[4] + 40) + 16 * *(unsigned int *)(v10[4] + 8));
          if (LOBYTE(__src[0])) {
            uint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)__src);
          }
          else {
            uint64_t ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)__src);
          }
          unint64_t v21 = ExtendedSizeInBits;
          if (v20 == 1) {
          if (v21 < 0x10)
          }
            break;
          unint64_t v22 = (unsigned int *)v10[4];
          uint64_t v10 = *(uint64_t **)v22;
          a2 = a2 & 0xFFFFFFFF00000000 | v22[2];
          int v18 = *(unsigned __int16 *)(*(void *)v22 + 24);
          if ((v18 - 198) >= 3) {
            goto LABEL_20;
          }
        }
        int v18 = *((unsigned __int16 *)v10 + 12);
      }
LABEL_20:
      if (v18 != 56) {
        break;
      }
      uint64_t v23 = v17;
      uint64_t v24 = v10[4];
      uint64_t v25 = *(void *)v24;
      unsigned int v26 = *(unsigned __int16 *)(*(void *)v24 + 24);
      BOOL v13 = v26 > 0x26;
      uint64_t v27 = (1 << v26) & 0x6000006000;
      if (!v13 && v27 != 0)
      {
        uint64_t v29 = *(void *)(*((void *)a3 + 5) + 344);
        uint64_t v30 = v16;
        uint64_t v31 = a3;
        int v32 = (*(uint64_t (**)(uint64_t, void))(*(void *)v29 + 400))(v29, *(void *)(v25 + 80));
        uint64_t v34 = v33;
        uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 336))(v29);
        unint64_t v36 = *(_DWORD *)(v25 + 88)
            + (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v35 + 24))(v35, v34) * v32;
        a3 = v31;
        uint64_t v16 = v30;
        uint64_t v37 = v10[4];
        uint64_t v10 = *(uint64_t **)(v37 + 40);
        unint64_t v38 = *(unsigned int *)(v37 + 48);
        unint64_t v39 = a2 & 0xFFFFFFFF00000000;
        uint64_t v17 = v23;
        goto LABEL_52;
      }
      uint64_t v40 = (unsigned __int16 *)(v10 + 3);
LABEL_42:
      uint64_t v17 = v23;
      uint64_t v57 = 0;
      char v58 = 1;
      while (1)
      {
        char v59 = v58;
        uint64_t v60 = *(void *)(v24 + 40 * v57);
        int v61 = *(unsigned __int16 *)(v60 + 24);
        if (v61 == 35 || v61 == 11) {
          break;
        }
        char v58 = 0;
        uint64_t v57 = 1;
        if ((v59 & 1) == 0) {
          goto LABEL_27;
        }
      }
      uint64_t v63 = *(void *)(v60 + 80);
      int v64 = (unint64_t *)(v63 + 24);
      if (*(_DWORD *)(v63 + 32) >= 0x41u) {
        int v64 = (unint64_t *)*v64;
      }
      unint64_t v36 = *v64;
      uint64_t v65 = v24 + 40 * (v57 ^ 1);
      uint64_t v10 = *(uint64_t **)v65;
      unint64_t v38 = *(unsigned int *)(v65 + 8);
      unint64_t v39 = a2 & 0xFFFFFFFF00000000;
LABEL_52:
      a2 = v39 | v38;
      v16 += v36 * v17;
    }
    uint64_t v40 = (unsigned __int16 *)(v10 + 3);
    if (v18 == 172)
    {
      for (uint64_t i = 0; i != 8; i += 4)
      {
        uint64_t v73 = &__src[i];
        *((_DWORD *)v73 + 2) = 1;
        *uint64_t v73 = 0;
        *((_DWORD *)v73 + 6) = 1;
        v73[2] = 0;
      }
      sub_1CD7F121C((uint64_t)a3, *(void *)v10[4], *(void *)(v10[4] + 8), 0, (uint64_t)&v136);
      if (LODWORD(__src[1]) >= 0x41 && __src[0]) {
        MEMORY[0x1D25D9CB0](__src[0], 0x1000C8000313F17);
      }
      __src[0] = v136;
      LODWORD(__src[1]) = v137;
      unsigned int v137 = 0;
      if (v142 >= 0x41 && v141)
      {
        MEMORY[0x1D25D9CB0](v141, 0x1000C8000313F17);
        uint64_t v141 = v138;
        unsigned int v142 = v139;
        unsigned int v139 = 0;
        if (v137 >= 0x41 && v136) {
          MEMORY[0x1D25D9CB0](v136, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v141 = v138;
        unsigned int v142 = v139;
      }
      sub_1CD7F121C((uint64_t)a3, *(void *)(v10[4] + 40), *(void *)(v10[4] + 48), 0, (uint64_t)&v136);
      if (v144 >= 0x41 && v143) {
        MEMORY[0x1D25D9CB0](v143, 0x1000C8000313F17);
      }
      uint64_t v143 = v136;
      unsigned int v144 = v137;
      unsigned int v137 = 0;
      if (v146[0] >= 0x41u && v145)
      {
        MEMORY[0x1D25D9CB0](v145, 0x1000C8000313F17);
        uint64_t v145 = v138;
        v146[0] = v139;
        unsigned int v139 = 0;
        if (v137 >= 0x41 && v136) {
          MEMORY[0x1D25D9CB0](v136, 0x1000C8000313F17);
        }
      }
      else
      {
        uint64_t v145 = v138;
        v146[0] = v139;
      }
      int v135 = (int)__src[1];
      if (LODWORD(__src[1]) > 0x40) {
        operator new[]();
      }
      if (LODWORD(__src[1])) {
        unint64_t v74 = 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]);
      }
      else {
        unint64_t v74 = 0;
      }
      uint64_t v75 = v74 & ~(uint64_t)__src[0];
      uint64_t v134 = v75;
      int v135 = 0;
      unsigned int v133 = v144;
      if (v144 > 0x40) {
        operator new[]();
      }
      if (v144) {
        unint64_t v81 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v144;
      }
      else {
        unint64_t v81 = 0;
      }
      unint64_t v132 = v81 & ~(unint64_t)v143;
      unsigned int v133 = 0;
      uint64_t v82 = (v132 & v75) == 0;
      uint64_t v23 = v17;
      for (unint64_t j = 0; j != 0x3FFFFFFFFFFFFFF0; j -= 8)
      {
        BOOL v84 = &__src[j / 2];
        if (v146[j] >= 0x41u)
        {
          uint64_t v85 = v84[6];
          if (v85)
          {
            unsigned int v127 = v82;
            MEMORY[0x1D25D9CB0](v85, 0x1000C8000313F17);
            uint64_t v82 = v127;
          }
        }
        if (*((_DWORD *)v84 + 10) >= 0x41u)
        {
          unint64_t v86 = v84[4];
          if (v86)
          {
            uint64_t v87 = v82;
            MEMORY[0x1D25D9CB0](v86, 0x1000C8000313F17);
            uint64_t v82 = v87;
          }
        }
      }
      if (v82)
      {
        uint64_t v24 = v10[4];
        goto LABEL_42;
      }
      uint64_t v17 = v23;
    }
LABEL_27:
    int v41 = *v40;
    if (v41 == 56)
    {
      uint64_t v42 = 0;
      uint64_t v43 = v10[4];
      char v44 = 1;
      do
      {
        char v45 = v44;
        uint64_t v46 = (unsigned int *)(v43 + 40 * v42);
        uint64_t v47 = *(void *)v46;
        if (*(_WORD *)(*(void *)v46 + 24) == 56)
        {
          int v48 = *(uint64_t **)(v47 + 32);
          uint64_t v49 = v48[5];
          int v50 = *(unsigned __int16 *)(v49 + 24);
          if (v50 == 35 || v50 == 11)
          {
            uint64_t v52 = *(void *)(v49 + 80);
            unint64_t v53 = (unint64_t *)(v52 + 24);
            if (*(_DWORD *)(v52 + 32) >= 0x41u) {
              unint64_t v53 = (unint64_t *)*v53;
            }
            uint64_t v54 = *((void *)a3 + 104);
            if (v54) {
              LOWORD(v54) = *(_WORD *)(v54 + 8);
            }
            unint64_t v36 = *v53;
            uint64_t v55 = *(void *)(v47 + 40) + 16 * v46[2];
            uint64_t v10 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v130, *(llvm **)v55, *(void *)(v55 + 8), *v48, v48[1], a8, *(void *)(v43 + 40 * (v42 ^ 1)), *(void *)(v43 + 40 * (v42 ^ 1) + 8), v54);
            unint64_t v39 = v56;
            unint64_t v38 = a2 & 0xFFFFFFFF00000000;
            goto LABEL_52;
          }
        }
        char v44 = 0;
        uint64_t v42 = 1;
      }
      while ((v45 & 1) != 0);
      uint64_t v88 = v17;
      uint64_t v89 = (uint64_t)v129;
      if (v129 || v88 != 1) {
        goto LABEL_129;
      }
      uint64_t v90 = v10[6];
      if (!v90) {
        goto LABEL_128;
      }
      int v91 = 1;
      do
      {
        if (*(_DWORD *)(v90 + 8) == a2)
        {
          if (!v91) {
            goto LABEL_128;
          }
          --v91;
        }
        uint64_t v90 = *(void *)(v90 + 32);
      }
      while (v90);
      if (v91)
      {
LABEL_128:
        uint64_t v89 = 0;
        LOWORD(v88) = 1;
        goto LABEL_129;
      }
      uint64_t v92 = (void *)v10[4];
      uint64_t v10 = (uint64_t *)*v92;
      if (*(_WORD *)(*v92 + 24) == 175)
      {
        unint64_t v129 = (uint64_t *)v92[5];
        uint64_t v93 = (unsigned int *)(v92 + 6);
        uint64_t v94 = (unsigned int *)(v92 + 1);
      }
      else
      {
        uint64_t v93 = (unsigned int *)(v92 + 1);
        unint64_t v129 = (uint64_t *)*v92;
        uint64_t v10 = (uint64_t *)v92[5];
        uint64_t v94 = (unsigned int *)(v92 + 6);
      }
      a2 = a2 & 0xFFFFFFFF00000000 | *v94;
      uint64_t v128 = (void *)*v93;
      goto LABEL_9;
    }
    if (v41 == 58) {
      break;
    }
    if (v41 != 175) {
      goto LABEL_146;
    }
    uint64_t v66 = v10[4];
    uint64_t v67 = *(void *)(v66 + 40);
    int v68 = *(unsigned __int16 *)(v67 + 24);
    if (v68 != 35 && v68 != 11) {
      goto LABEL_146;
    }
    uint64_t v70 = *(void *)(v67 + 80);
    unsigned int v71 = (void *)(v70 + 24);
    if (*(_DWORD *)(v70 + 32) >= 0x41u) {
      unsigned int v71 = (void *)*v71;
    }
    v17 <<= *v71;
LABEL_83:
    a2 = a2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v66 + 8);
    uint64_t v10 = *(uint64_t **)v66;
  }
  uint64_t v66 = v10[4];
  uint64_t v76 = *(void *)(v66 + 40);
  int v77 = *(unsigned __int16 *)(v76 + 24);
  if (v77 == 35 || v77 == 11)
  {
    uint64_t v79 = *(void *)(v76 + 80);
    unint64_t v80 = (void *)(v79 + 24);
    if (*(_DWORD *)(v79 + 32) >= 0x41u) {
      unint64_t v80 = (void *)*v80;
    }
    v17 *= *v80;
    goto LABEL_83;
  }
LABEL_146:
  LOWORD(v88) = v17;
  uint64_t v89 = (uint64_t)v129;
LABEL_129:
  unint64_t v95 = (unsigned __int16)v88;
  if (*(unsigned char *)(v10[5] + 16 * a2) != 4)
  {
    uint64_t v109 = *((void *)a3 + 104);
    if (v109) {
      __int16 v110 = *(_WORD *)(v109 + 8);
    }
    else {
      __int16 v110 = 0;
    }
    uint64_t v10 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v130, (llvm *)4, 0, (uint64_t)v10, (void *)a2, v110);
    a2 = a2 & 0xFFFFFFFF00000000 | v125;
  }
  if (v95 >= 2)
  {
    uint64_t v111 = sub_1CD7EBF14((uint64_t)a3, v95, (const llvm::APInt *)&v130, (llvm *)4, 0, 0, 0);
    uint64_t v114 = *((void *)a3 + 104);
    if (v114) {
      LOWORD(v114) = *(_WORD *)(v114 + 8);
    }
    uint64_t v10 = sub_1CCFDED5C((uint64_t)a3, 58, (const llvm::APInt *)&v130, (llvm *)4, 0, (uint64_t)v10, a2, v113, (uint64_t)v111, v112, v114);
    a2 = a2 & 0xFFFFFFFF00000000 | v115;
  }
  uint64_t v96 = v89;
  if ((_WORD)v16)
  {
    __int16 v116 = sub_1CD7EBF14((uint64_t)a3, (unsigned __int16)v16, (const llvm::APInt *)&v130, (llvm *)4, 0, 0, 0);
    uint64_t v119 = *((void *)a3 + 104);
    if (v119) {
      LOWORD(v119) = *(_WORD *)(v119 + 8);
    }
    uint64_t v10 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v130, (llvm *)4, 0, (uint64_t)v10, a2, v118, (uint64_t)v116, v117, v119);
    a2 = a2 & 0xFFFFFFFF00000000 | v120;
    uint64_t v96 = v89;
    if (v89)
    {
LABEL_133:
      uint64_t v97 = *((void *)a3 + 104);
      if (v97) {
        __int16 v98 = *(_WORD *)(v97 + 8);
      }
      else {
        __int16 v98 = 0;
      }
      uint64_t v122 = sub_1CD7F3564(a3, (const char *)0xC9, (uint64_t)&v130, (llvm *)4, 0, v96, v128, v98);
      uint64_t v124 = *((void *)a3 + 104);
      if (v124) {
        LOWORD(v124) = *(_WORD *)(v124 + 8);
      }
      uint64_t v10 = sub_1CCFDED5C((uint64_t)a3, 56, (const llvm::APInt *)&v130, (llvm *)4, 0, (uint64_t)v122, v121, v123, (uint64_t)v10, a2, v124);
    }
  }
  else if (v89)
  {
    goto LABEL_133;
  }
LABEL_135:
  if (v130)
  {
    int v105 = *v130;
    if ((v105 - 4) > 0x1E)
    {
      if ((v105 - 3) >= 0xFFFFFFFE) {
        uint64_t v107 = v130;
      }
      else {
        uint64_t v107 = 0;
      }
      if ((v105 - 3) >= 0xFFFFFFFE)
      {
        unint64_t v108 = (unint64_t)(v107 + 8);
        goto LABEL_145;
      }
      if (v105 == 3) {
        *((void *)v130 + 1) = 0;
      }
    }
    else if ((v130[1] & 0x7F) == 2 || *((_DWORD *)v130 + 3))
    {
      uint64_t v126 = *((void *)v130 + 2);
      if ((v126 & 4) != 0)
      {
        unint64_t v108 = v126 & 0xFFFFFFFFFFFFFFF8;
        if (v108)
        {
LABEL_145:
          __src[0] = &v130;
          sub_1CC5FA668(v108 + 16, __src);
        }
      }
    }
  }
  return v10;
}

void sub_1CB8F4354(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  unint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    int v4 = a1;
    free(v1);
    a1 = v4;
  }
  unsigned int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    unint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  unsigned int v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    unint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB8F4408(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  unsigned int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  unsigned int v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  int v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB8F44B4()
{
  return "AGX1 iterator forwarding pass";
}

void sub_1CB8F44C4(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CB8F4520(uint64_t a1, uint64_t a2)
{
  v89[2] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v73 = a2 + 320;
  unsigned int v2 = *(void **)(a2 + 320);
  if (v2 != (void *)(a2 + 320))
  {
    int v3 = 0;
    while (1)
    {
      int v77 = v3;
      uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
      uint64_t v5 = v4;
      v84[0] = 0;
      v84[1] = 0;
      int v85 = 0;
      uint64_t v76 = v2;
      unint64_t v6 = v2 + 6;
      v82[0] = 0;
      v82[1] = 0;
      int v7 = -1;
      unint64_t v8 = v2 + 6;
      int v83 = 0;
      do
      {
        unint64_t v8 = (void *)v8[1];
        ++v7;
      }
      while (v8 != v6);
      unint64_t v9 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (!v9 || (*(unsigned char *)v9 & 4) == 0)
      {
        while ((*(_WORD *)(v9 + 44) & 4) != 0)
          unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((void *)v9 != v6) {
        break;
      }
      uint64_t v70 = 0;
      uint64_t v69 = 0;
      int v71 = 0;
LABEL_92:
      MEMORY[0x1D25D9CD0](v69, 8);
      MEMORY[0x1D25D9CD0](v70, 8);
      int v3 = v77 | v71;
      unsigned int v2 = (void *)*v76;
      if (*v76 == v73) {
        return v3 & 1;
      }
    }
    int v75 = 0;
    uint64_t v78 = v4;
    uint64_t v79 = v2 + 6;
    while ((*(unsigned char *)(*(void *)(v9 + 16) + 17) & 2) == 0)
    {
LABEL_43:
      unint64_t v42 = v9;
      if ((*(_WORD *)(v9 + 44) & 4) != 0)
      {
        unint64_t v42 = v9;
        do
          unint64_t v42 = *(void *)v42 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v42 + 44) & 4) != 0);
      }
      uint64_t v43 = *(void *)(v9 + 24) + 48;
      char v44 = *(int **)(v42 + 32);
      uint64_t v45 = *(unsigned int *)(v42 + 40);
      uint64_t v46 = &v44[8 * v45];
      if (!v45)
      {
        unint64_t v65 = *(void *)(v42 + 8);
        if (v65 == v43)
        {
          unint64_t v42 = *(void *)(v9 + 24) + 48;
          goto LABEL_45;
        }
        unint64_t v42 = *(void *)(v9 + 24) + 48;
        if ((*(_WORD *)(v65 + 44) & 4) != 0)
        {
          while (1)
          {
            unint64_t v67 = v65;
            uint64_t v68 = *(unsigned int *)(v65 + 40);
            if (v68) {
              break;
            }
            unint64_t v65 = *(void *)(v65 + 8);
            if (v65 == v43 || (*(_WORD *)(v65 + 44) & 4) == 0)
            {
              unint64_t v42 = *(void *)(v9 + 24) + 48;
LABEL_90:
              char v44 = *(int **)(v67 + 32);
              uint64_t v46 = &v44[8 * v68];
              uint64_t v5 = v78;
              goto LABEL_45;
            }
          }
          unint64_t v42 = v65;
          goto LABEL_90;
        }
      }
LABEL_45:
      while (v44 != v46)
      {
        int v47 = *v44;
        if (!*v44 && (v47 & 0x2000000) == 0)
        {
          unsigned int v51 = v44[1];
          if (v51)
          {
            uint64_t v52 = (unsigned __int16 *)(*(void *)(v5 + 56)
                                     + (((unint64_t)*(unsigned int *)(*(void *)(v5 + 8) + 24 * v51 + 16) >> 3) & 0x1FFFFFFE));
            int v54 = *v52;
            unint64_t v53 = v52 + 1;
            int v55 = v54 + (*(_DWORD *)(*(void *)(v5 + 8) + 24 * v51 + 16) & 0xF) * v51;
            if ((v47 & 0x1000000) != 0)
            {
              do
              {
                LODWORD(v86[0]) = (unsigned __int16)v55;
                uint64_t v58 = sub_1CB8F4ED0((uint64_t)v82, (int *)v86);
                *(_DWORD *)uint64_t v58 = v7;
                *(void *)(v58 + 8) = v9;
                int v59 = *v53++;
                v55 += v59;
              }
              while (v59);
            }
            else
            {
              do
              {
                LODWORD(v86[0]) = (unsigned __int16)v55;
                uint64_t v56 = sub_1CB8F4ED0((uint64_t)v84, (int *)v86);
                *(_DWORD *)uint64_t v56 = v7;
                *(void *)(v56 + 8) = v9;
                int v57 = *v53++;
                v55 += v57;
              }
              while (v57);
            }
          }
        }
        v44 += 8;
        if (v44 == v46)
        {
          unint64_t v48 = *(void *)(v42 + 8);
          if (v48 == v43) {
            break;
          }
          char v44 = v46;
          unint64_t v42 = v43;
          if ((*(_WORD *)(v48 + 44) & 4) != 0)
          {
            while (1)
            {
              unint64_t v49 = v48;
              uint64_t v50 = *(unsigned int *)(v48 + 40);
              if (v50) {
                break;
              }
              unint64_t v48 = *(void *)(v48 + 8);
              if (v48 == v43 || (*(_WORD *)(v48 + 44) & 4) == 0)
              {
                unint64_t v42 = v43;
                goto LABEL_62;
              }
            }
            unint64_t v42 = v48;
LABEL_62:
            char v44 = *(int **)(v49 + 32);
            uint64_t v46 = &v44[8 * v50];
          }
        }
      }
LABEL_63:
      unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
      if (!v9)
      {
        uint64_t v60 = v79;
LABEL_68:
        while ((*(_WORD *)(v9 + 44) & 4) != 0)
          unint64_t v9 = *(void *)v9 & 0xFFFFFFFFFFFFFFF8;
        goto LABEL_69;
      }
      uint64_t v60 = v79;
      if ((*(unsigned char *)v9 & 4) == 0) {
        goto LABEL_68;
      }
LABEL_69:
      --v7;
      if ((void *)v9 == v60)
      {
        uint64_t v69 = v82[0];
        uint64_t v70 = v84[0];
        int v71 = v75;
        goto LABEL_92;
      }
    }
    uint64_t v80 = 0;
    uint64_t v10 = v5;
    unsigned int v11 = *(_DWORD *)(*(void *)(v9 + 32) + 4);
    v86[0] = v87;
    v86[1] = (void *)0x1000000000;
    v89[0] = 0;
    v89[1] = 0;
    uint64_t v88 = v89;
    unint64_t v12 = *(unsigned int *)(*(void *)(v10 + 8) + 24 * v11 + 16);
    BOOL v13 = (_WORD *)(*(void *)(v10 + 56) + ((v12 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v14 = *v13 + (v12 & 0xF) * v11;
    uint64_t v15 = v84[0];
    int v16 = v85;
    int v17 = v85 - 1;
    unsigned int v18 = -1;
    do
    {
      int v19 = v14;
      unsigned int v81 = v14;
      sub_1CB8F4B90((uint64_t)v86, &v81);
      if (v16)
      {
        unsigned int v20 = (37 * v19) & v17;
        unint64_t v21 = (int *)(v15 + 24 * v20);
        int v22 = *v21;
        if (*v21 == v19)
        {
LABEL_16:
          if (v20 != v16 && v21[2] < v18)
          {
            uint64_t v80 = *((void *)v21 + 2);
            unsigned int v18 = v21[2];
          }
        }
        else
        {
          int v24 = 1;
          while (v22 != -1)
          {
            unsigned int v25 = v20 + v24++;
            unsigned int v20 = v25 & v17;
            unint64_t v21 = (int *)(v15 + 24 * v20);
            int v22 = *v21;
            if (*v21 == v19) {
              goto LABEL_16;
            }
          }
        }
      }
      int v23 = (unsigned __int16)v13[1];
      ++v13;
      unsigned __int16 v14 = v23 + v19;
    }
    while (v23);
    uint64_t v26 = *(void *)(v78 + 8);
    unint64_t v27 = *(unsigned int *)(v26 + 24 * v11 + 16);
    __int16 v28 = v27 & 0xF;
    uint64_t v29 = *(void *)(v78 + 56);
    uint64_t v30 = (_WORD *)(v29 + ((v27 >> 3) & 0x1FFFFFFE));
    unsigned __int16 v31 = *v30 + v28 * v11;
    int v32 = v83 - 1;
    unsigned int v33 = -1;
    do
    {
      if (v83)
      {
        unsigned int v34 = (37 * v31) & v32;
        int v35 = *(_DWORD *)(v82[0] + 24 * v34);
        if (v35 == v31)
        {
LABEL_27:
          if (v34 != v83)
          {
            unsigned int v36 = *(_DWORD *)(v82[0] + 24 * v34 + 8);
            if (v36 < v33) {
              unsigned int v33 = v36;
            }
          }
        }
        else
        {
          int v38 = 1;
          while (v35 != -1)
          {
            unsigned int v39 = v34 + v38++;
            unsigned int v34 = v39 & v32;
            int v35 = *(_DWORD *)(v82[0] + 24 * v34);
            if (v35 == v31) {
              goto LABEL_27;
            }
          }
        }
      }
      int v37 = (unsigned __int16)v30[1];
      ++v30;
      v31 += v37;
    }
    while (v37);
    int v40 = 1;
    uint64_t v5 = v78;
    if (v18 != -1 && v18 <= v33)
    {
      int v41 = *(unsigned __int16 **)(v80 + 16);
      if ((v41[8] & 0x20) == 0)
      {
LABEL_39:
        int v40 = 1;
        goto LABEL_40;
      }
      int v61 = *v41;
      unsigned int v62 = sub_1CD3D2308(v61, 7u);
      unsigned int v63 = sub_1CD3D2308(v61, 0xFu);
      uint64_t v64 = *(void *)(v80 + 32);
      if ((sub_1CB8F4E24((uint64_t)v86, *(_DWORD *)(v64 + 32 * v62 + 4), v26, v29) & 1) != 0
        || v63 != -1
        && *(void *)(v64 + 32 * sub_1CD3D2308(v61, 0xAu) + 16) == 7
        && !*(unsigned char *)(v64 + 32 * v63)
        && sub_1CB8F4E24((uint64_t)v86, *(_DWORD *)(v64 + 32 * v63 + 4), v26, v29))
      {
        unsigned int v66 = sub_1CD3D2308(**(unsigned __int16 **)(v9 + 16), 3u);
        if (v66 == -1) {
          goto LABEL_39;
        }
        int v40 = 1;
        *(void *)(*(void *)(v9 + 32) + 32 * v66 + 16) = 1;
        int v75 = 1;
      }
      else
      {
        int v40 = 0;
      }
    }
LABEL_40:
    sub_1CB833A08((uint64_t)&v88, v89[0]);
    if (v86[0] != v87) {
      free(v86[0]);
    }
    if (!v40) {
      goto LABEL_63;
    }
    goto LABEL_43;
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

uint64_t sub_1CB8F4B90(uint64_t a1, unsigned int *a2)
{
  if (*(void *)(a1 + 96))
  {
    uint64_t v10 = (void *)(a1 + 88);
    uint64_t v9 = *(void *)(a1 + 88);
    unsigned int v11 = *a2;
    if (v9)
    {
      uint64_t result = 1;
      do
      {
        while (1)
        {
          unint64_t v12 = (void *)v9;
          unsigned int v13 = *(_DWORD *)(v9 + 28);
          if (v11 >= v13) {
            break;
          }
          uint64_t v9 = *v12;
          uint64_t v10 = v12;
          if (!*v12) {
            goto LABEL_20;
          }
        }
        if (v13 >= v11) {
          return result;
        }
        uint64_t v9 = v12[1];
      }
      while (v9);
      uint64_t v10 = v12 + 1;
    }
    else
    {
      unint64_t v12 = (void *)(a1 + 88);
    }
LABEL_20:
    unsigned __int16 v14 = operator new(0x20uLL);
    v14[7] = v11;
    *(void *)unsigned __int16 v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v12;
    *uint64_t v10 = v14;
    uint64_t v15 = **(void **)(a1 + 80);
    if (v15)
    {
      *(void *)(a1 + 80) = v15;
      unsigned __int16 v14 = (_DWORD *)*v10;
    }
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a1 + 8);
    unsigned int v5 = *a2;
    if (!v4)
    {
LABEL_7:
      if (v4 >= *(_DWORD *)(a1 + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      *(_DWORD *)(*(void *)a1 + 4 * v4) = v5;
      ++*(_DWORD *)(a1 + 8);
      return 0x100000001;
    }
    uint64_t v6 = 4 * v4;
    int v7 = *(_DWORD **)a1;
    while (*v7 != v5)
    {
      ++v7;
      v6 -= 4;
      if (!v6) {
        goto LABEL_6;
      }
    }
    if (v6) {
      return 1;
    }
LABEL_6:
    if (v4 <= 0xF) {
      goto LABEL_7;
    }
    int v16 = (void *)(a1 + 88);
    do
    {
      uint64_t v17 = *(void *)a1 + 4 * v4;
      uint64_t v18 = *(void *)(a1 + 88);
      int v19 = (void *)(a1 + 88);
      unsigned int v20 = (void *)(a1 + 88);
      if (v18)
      {
        unsigned int v21 = *(_DWORD *)(v17 - 4);
        do
        {
          while (1)
          {
            unsigned int v20 = (void *)v18;
            unsigned int v22 = *(_DWORD *)(v18 + 28);
            if (v21 >= v22) {
              break;
            }
            uint64_t v18 = *v20;
            int v19 = v20;
            if (!*v20) {
              goto LABEL_32;
            }
          }
          if (v22 >= v21) {
            goto LABEL_35;
          }
          uint64_t v18 = v20[1];
        }
        while (v18);
        int v19 = v20 + 1;
      }
LABEL_32:
      int v23 = operator new(0x20uLL);
      v23[7] = *(_DWORD *)(v17 - 4);
      *(void *)int v23 = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = v20;
      *int v19 = v23;
      uint64_t v24 = **(void **)(a1 + 80);
      if (v24)
      {
        *(void *)(a1 + 80) = v24;
        int v23 = (_DWORD *)*v19;
      }
      sub_1CB8358B8(*(uint64_t **)(a1 + 88), (uint64_t *)v23);
      ++*(void *)(a1 + 96);
      LODWORD(v4) = *(_DWORD *)(a1 + 8);
LABEL_35:
      LODWORD(v4) = v4 - 1;
      *(_DWORD *)(a1 + 8) = v4;
    }
    while (v4);
    unsigned int v25 = (_DWORD *)*v16;
    unsigned int v26 = *a2;
    unint64_t v27 = (void *)(a1 + 88);
    if (*v16)
    {
      do
      {
        while (1)
        {
          unint64_t v27 = v25;
          unsigned int v28 = v25[7];
          if (v26 >= v28) {
            break;
          }
          unsigned int v25 = (_DWORD *)*v27;
          int v16 = v27;
          if (!*v27) {
            goto LABEL_42;
          }
        }
        if (v28 >= v26) {
          return 0x100000001;
        }
        unsigned int v25 = (_DWORD *)v27[1];
      }
      while (v25);
      int v16 = v27 + 1;
    }
LABEL_42:
    unsigned __int16 v14 = operator new(0x20uLL);
    v14[7] = v26;
    *(void *)unsigned __int16 v14 = 0;
    *((void *)v14 + 1) = 0;
    *((void *)v14 + 2) = v27;
    void *v16 = v14;
    uint64_t v29 = **(void **)(a1 + 80);
    if (v29)
    {
      *(void *)(a1 + 80) = v29;
      unsigned __int16 v14 = (_DWORD *)*v16;
    }
  }
  sub_1CB8358B8(*(uint64_t **)(a1 + 88), (uint64_t *)v14);
  ++*(void *)(a1 + 96);
  return 0x100000001;
}

uint64_t sub_1CB8F4E24(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(unsigned int *)(a3 + 24 * a2 + 16);
  __int16 v5 = v4 & 0xF;
  uint64_t v6 = (_WORD *)(a4 + ((v4 >> 3) & 0x1FFFFFFE));
  unsigned __int16 v7 = *v6 + v5 * a2;
  uint64_t v8 = *(unsigned int *)(a1 + 8);
  while (*(void *)(a1 + 96))
  {
    if (*(void *)(a1 + 88))
    {
      uint64_t v9 = *(uint64_t **)(a1 + 88);
      do
      {
        unsigned int v10 = *((_DWORD *)v9 + 7);
        if (v10 <= v7)
        {
          if (v10 >= v7) {
            return 1;
          }
          ++v9;
        }
        uint64_t v9 = (uint64_t *)*v9;
      }
      while (v9);
    }
LABEL_16:
    int v13 = (unsigned __int16)v6[1];
    ++v6;
    v7 += v13;
    if (!v13) {
      return 0;
    }
  }
  if (!v8) {
    goto LABEL_16;
  }
  uint64_t v11 = 4 * v8;
  unint64_t v12 = *(_DWORD **)a1;
  while (*v12 != v7)
  {
    ++v12;
    v11 -= 4;
    if (!v11) {
      goto LABEL_16;
    }
  }
  if (!v11) {
    goto LABEL_16;
  }
  return 1;
}

uint64_t sub_1CB8F4ED0(uint64_t a1, int *a2)
{
  uint64_t v24 = 0;
  char v4 = sub_1CB8F50CC(*(void *)a1, *(_DWORD *)(a1 + 16), *a2, &v24);
  uint64_t v5 = v24;
  if (v4) {
    return v5 + 8;
  }
  uint64_t v25 = v24;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    int v8 = 2 * v7;
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    uint64_t v10 = *(void *)a1;
    unint64_t v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    unint64_t v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    int v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 64;
    }
    *(_DWORD *)(a1 + 16) = v14;
    uint64_t v15 = operator new(24 * v14, (std::align_val_t)8uLL);
    *(void *)a1 = v15;
    if (v10)
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v16 = *(unsigned int *)(a1 + 16);
      if (v16)
      {
        uint64_t v17 = 24 * v16;
        do
        {
          *uint64_t v15 = -1;
          v15 += 6;
          v17 -= 24;
        }
        while (v17);
      }
      if (v7)
      {
        uint64_t v18 = 24 * v7;
        int v19 = (_OWORD *)(v10 + 8);
        do
        {
          unsigned int v20 = *((_DWORD *)v19 - 2);
          if (v20 <= 0xFFFFFFFD)
          {
            unsigned int v26 = 0;
            sub_1CB8F50CC(*(void *)a1, *(_DWORD *)(a1 + 16), v20, &v26);
            unsigned int v21 = v26;
            *unsigned int v26 = v20;
            *(_OWORD *)(v21 + 2) = *v19;
            ++*(_DWORD *)(a1 + 8);
          }
          int v19 = (_OWORD *)((char *)v19 + 24);
          v18 -= 24;
        }
        while (v18);
      }
      MEMORY[0x1D25D9CD0](v10, 8);
      uint64_t v15 = *(_DWORD **)a1;
      LODWORD(v22) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(void *)(a1 + 8) = 0;
      uint64_t v22 = *(unsigned int *)(a1 + 16);
      if (v22)
      {
        uint64_t v23 = 0;
        do
        {
          v15[v23] = -1;
          v23 += 6;
        }
        while (6 * v22 != v23);
      }
    }
    sub_1CB8F50CC((uint64_t)v15, v22, *a2, &v25);
    int v6 = *(_DWORD *)(a1 + 8);
    uint64_t v5 = v25;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*(_DWORD *)v5 != -1) {
    --*(_DWORD *)(a1 + 12);
  }
  *(_DWORD *)uint64_t v5 = *a2;
  *(_DWORD *)(v5 + 8) = -1;
  *(void *)(v5 + 16) = 0;
  return v5 + 8;
}

uint64_t sub_1CB8F50CC(uint64_t a1, int a2, int a3, void *a4)
{
  if (a2)
  {
    int v4 = a2 - 1;
    unsigned int v5 = (37 * a3) & (a2 - 1);
    int v6 = (_DWORD *)(a1 + 24 * v5);
    int v7 = *v6;
    if (*v6 == a3)
    {
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v10 = 0;
      int v11 = 1;
      while (v7 != -1)
      {
        if (v10) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v7 == -2;
        }
        if (v12) {
          uint64_t v10 = v6;
        }
        unsigned int v13 = v5 + v11++;
        unsigned int v5 = v13 & v4;
        int v6 = (_DWORD *)(a1 + 24 * (v13 & v4));
        int v7 = *v6;
        uint64_t v8 = 1;
        if (*v6 == a3) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = 0;
      if (v10) {
        int v6 = v10;
      }
    }
  }
  else
  {
    int v6 = 0;
    uint64_t v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

BOOL sub_1CB8F5164(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v6 = *(unsigned __int16 *)(a2 + 24);
  if (v6 == 56) {
    return (!a4 || (*(_WORD *)(a2 + 72) & 2) != 0) && (!a5 || (*(_WORD *)(a2 + 72) & 4) != 0);
  }
  if (v6 != 172) {
    return 0;
  }
  for (uint64_t i = 0; i != 64; i += 32)
  {
    int v11 = (char *)&v27 + i;
    *((_DWORD *)v11 + 2) = 1;
    *(void *)int v11 = 0;
    *((_DWORD *)v11 + 6) = 1;
    *((void *)v11 + 2) = 0;
  }
  sub_1CD7F121C(*(void *)(*(void *)(a1 + 96) + 16), **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0, (uint64_t)&v23);
  if (v28 >= 0x41 && v27) {
    MEMORY[0x1D25D9CB0](v27, 0x1000C8000313F17);
  }
  uint64_t v12 = v23;
  uint64_t v27 = v23;
  unsigned int v13 = v24;
  unsigned int v28 = v24;
  unsigned int v24 = 0;
  if (v30 >= 0x41 && v29)
  {
    MEMORY[0x1D25D9CB0](v29, 0x1000C8000313F17);
    uint64_t v29 = v25;
    unsigned int v30 = v26;
    unsigned int v26 = 0;
    if (v24 >= 0x41 && v23) {
      MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v29 = v25;
    unsigned int v30 = v26;
  }
  sub_1CD7F121C(*(void *)(*(void *)(a1 + 96) + 16), *(void *)(*(void *)(a2 + 32) + 40), *(void *)(*(void *)(a2 + 32) + 48), 0, (uint64_t)&v23);
  if (v32 >= 0x41 && v31) {
    MEMORY[0x1D25D9CB0](v31, 0x1000C8000313F17);
  }
  uint64_t v14 = v23;
  uint64_t v31 = v23;
  unsigned int v15 = v24;
  unsigned int v32 = v24;
  unsigned int v24 = 0;
  if (v34[0] >= 0x41u && v33)
  {
    MEMORY[0x1D25D9CB0](v33, 0x1000C8000313F17);
    uint64_t v33 = v25;
    v34[0] = v26;
    unsigned int v26 = 0;
    if (v24 >= 0x41 && v23) {
      MEMORY[0x1D25D9CB0](v23, 0x1000C8000313F17);
    }
  }
  else
  {
    uint64_t v33 = v25;
    v34[0] = v26;
  }
  if (v13 > 0x40) {
    operator new[]();
  }
  if (v13) {
    unint64_t v16 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v13;
  }
  else {
    unint64_t v16 = 0;
  }
  unint64_t v17 = v16 & ~v12;
  if (v15 > 0x40) {
    operator new[]();
  }
  if (v15) {
    unint64_t v18 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v15;
  }
  else {
    unint64_t v18 = 0;
  }
  BOOL v7 = (v18 & ~v14 & v17) == 0;
  for (uint64_t j = 0; j != -16; j -= 8)
  {
    unsigned int v20 = (char *)&v27 + j * 4;
    if (v34[j] >= 0x41u)
    {
      uint64_t v21 = *((void *)v20 + 6);
      if (v21) {
        MEMORY[0x1D25D9CB0](v21, 0x1000C8000313F17);
      }
    }
    if (*((_DWORD *)v20 + 10) >= 0x41u)
    {
      uint64_t v22 = *((void *)v20 + 4);
      if (v22) {
        MEMORY[0x1D25D9CB0](v22, 0x1000C8000313F17);
      }
    }
  }
  return v7;
}

BOOL sub_1CB8F55FC(uint64_t a1, uint64_t a2, BOOL a3, unsigned int a4)
{
  int v8 = *(unsigned __int16 *)(a2 + 24);
  if (v8 == 198 || (v8 - 199) <= 1)
  {
    long long v35 = *(_OWORD *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
    if ((_BYTE)v35) {
      unint64_t ExtendedSizeInBits = sub_1CB87E200((unsigned __int8 *)&v35);
    }
    else {
      unint64_t ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v35);
    }
    if (v11 == 1)
    {
      unint64_t v32 = ExtendedSizeInBits;
      unint64_t ExtendedSizeInBits = v32;
    }
    int v8 = *(unsigned __int16 *)(a2 + 24);
    if (ExtendedSizeInBits <= a4)
    {
      if (v8 != 199) {
        return 1;
      }
      BOOL v14 = sub_1CD7F1118(*(void *)(*(void *)(a1 + 96) + 16), **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0);
      BOOL result = 1;
      if (v14) {
        return result;
      }
      *(unsigned char *)(a1 + 104) = 1;
      int v8 = *(unsigned __int16 *)(a2 + 24);
    }
  }
  if (v8 == 198
    || v8 == 200
    || v8 == 199
    && sub_1CD7F1118(*(void *)(*(void *)(a1 + 96) + 16), **(void **)(a2 + 32), *(void *)(*(void *)(a2 + 32) + 8), 0))
  {
    long long v35 = *(_OWORD *)(*(void *)(**(void **)(a2 + 32) + 40) + 16 * *(unsigned int *)(*(void *)(a2 + 32) + 8));
    if ((_BYTE)v35) {
      unint64_t v12 = sub_1CB87E200((unsigned __int8 *)&v35);
    }
    else {
      unint64_t v12 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v35);
    }
    if (v13 == 1)
    {
      unint64_t v31 = v12;
      unint64_t v12 = v31;
    }
    if (v12 <= a4) {
      return 1;
    }
  }
  int v16 = *(unsigned __int16 *)(a2 + 24);
  if ((v16 - 3) <= 1)
  {
    uint64_t v17 = *(void *)(*(void *)(a2 + 32) + 40);
    BOOL v18 = v16 != 3;
    long long v35 = *(_OWORD *)(v17 + 80);
    if ((_BYTE)v35) {
      unint64_t v19 = sub_1CB87E200((unsigned __int8 *)&v35);
    }
    else {
      unint64_t v19 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v35);
    }
    unsigned int v21 = a4 - v18;
    if (v20 == 1)
    {
      unint64_t v34 = v19;
      unint64_t v19 = v34;
    }
    if (v19 <= v21) {
      return 1;
    }
    long long v35 = *(_OWORD *)(v17 + 80);
    if ((_BYTE)v35) {
      uint64_t v22 = sub_1CB87E200((unsigned __int8 *)&v35);
    }
    else {
      uint64_t v22 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v35);
    }
    if (v23 == 1)
    {
      uint64_t v33 = v22;
      uint64_t v22 = v33;
    }
    if (v22 == a4) {
      *(unsigned char *)(a1 + 104) = 1;
    }
  }
  sub_1CD7F121C(*(void *)(*(void *)(a1 + 96) + 16), a2, a3, 0, (uint64_t)&v35);
  uint64_t v24 = -1 << (a4 - 1);
  unsigned int v25 = DWORD2(v35);
  unsigned int v26 = (uint64_t *)v35;
  if (DWORD2(v35) < 0x41) {
    unsigned int v26 = (uint64_t *)&v35;
  }
  uint64_t v27 = *v26;
  BOOL result = (v27 & v24) == v24;
  if ((v27 & v24) != v24 && (unint64_t)~v27 >> a4 == 0) {
    *(unsigned char *)(a1 + 104) = 1;
  }
  if (v37 >= 0x41 && v36)
  {
    BOOL v30 = (v27 & v24) == v24;
    MEMORY[0x1D25D9CB0](v36, 0x1000C8000313F17);
    BOOL result = v30;
    unsigned int v25 = DWORD2(v35);
  }
  if (v25 >= 0x41)
  {
    if ((void)v35)
    {
      BOOL v29 = result;
      MEMORY[0x1D25D9CB0](v35, 0x1000C8000313F17);
      return v29;
    }
  }
  return result;
}

uint64_t sub_1CB8F5928(uint64_t a1, _DWORD *a2, unsigned int *a3, uint64_t *a4, unsigned char *a5, int a6)
{
  int v12 = *(unsigned __int8 *)(a1 + 32);
  int v11 = (unsigned __int8 *)(a1 + 32);
  int v13 = __clz(*((void *)v11 - 1) - 1);
  if (v12) {
    unsigned int ExtendedSizeInBits = sub_1CB87E200(v11);
  }
  else {
    unsigned int ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v11);
  }
  unsigned int v16 = ExtendedSizeInBits;
  if (v15 == 1) {
  unsigned int v262 = v16;
  }
  uint64_t v17 = (64 - v13);
  BOOL v18 = (unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48)) {
    unsigned int v19 = sub_1CB87E200(v18);
  }
  else {
    unsigned int v19 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v18);
  }
  unsigned int v22 = v19;
  if (v20 == 1) {
  *a5 = 0;
  }
  uint64_t v23 = *a4;
  int v24 = *(unsigned __int16 *)(*a4 + 24);
  if (v24 == 35 || v24 == 11)
  {
    unsigned int v26 = *(uint64_t **)a3;
    do
    {
LABEL_17:
      int v27 = *((unsigned __int16 *)v26 + 12);
      if (v27 == 56)
      {
        uint64_t v28 = v26[4];
        uint64_t v29 = *(void *)(v28 + 40);
        int v30 = *(unsigned __int16 *)(v29 + 24);
        if (v30 == 35 || v30 == 11)
        {
          uint64_t v32 = *(void *)(*(void *)(a1 + 96) + 16);
          uint64_t v33 = *(void *)(v32 + 832);
          if (v33) {
            LOWORD(v33) = *(_WORD *)(v33 + 8);
          }
          uint64_t v34 = v26[5] + 16 * a3[2];
          *a4 = (uint64_t)sub_1CCFDED5C(v32, 56, (const llvm::APInt *)(a1 + 8), *(llvm **)v34, *(void *)(v34 + 8), *a4, a4[1], v21, v29, *(void *)(v28 + 48), v33);
          *((_DWORD *)a4 + 2) = v35;
          uint64_t v36 = *(uint64_t **)(*(void *)a3 + 32);
          unsigned int v37 = *((_DWORD *)v36 + 2);
          uint64_t v38 = *v36;
          *(void *)a3 = v38;
          a3[2] = v37;
          unsigned int v26 = (uint64_t *)v38;
          int v27 = *(unsigned __int16 *)(v38 + 24);
          char v39 = 1;
        }
        else
        {
          char v39 = 0;
          int v27 = 56;
        }
      }
      else
      {
        char v39 = 0;
      }
      uint64_t v40 = 0;
      char v41 = 1;
      do
      {
        char v42 = v41;
        if (v27 == 56)
        {
          uint64_t v43 = *(void *)(v26[4] + 40 * v40);
          if (*(_WORD *)(v43 + 24) == 56)
          {
            uint64_t v44 = *(void *)(v43 + 32);
            uint64_t v45 = *(void *)(v44 + 40);
            int v46 = *(unsigned __int16 *)(v45 + 24);
            if (v46 == 35 || v46 == 11)
            {
              uint64_t v48 = *(void *)(*(void *)(a1 + 96) + 16);
              uint64_t v49 = *(void *)(v48 + 832);
              if (v49) {
                LOWORD(v49) = *(_WORD *)(v49 + 8);
              }
              uint64_t v50 = v26[5] + 16 * a3[2];
              *a4 = (uint64_t)sub_1CCFDED5C(v48, 56, (const llvm::APInt *)(a1 + 8), *(llvm **)v50, *(void *)(v50 + 8), *a4, a4[1], v21, v45, *(void *)(v44 + 48), v49);
              *((_DWORD *)a4 + 2) = v52;
              uint64_t v53 = *(void *)(*(void *)(a1 + 96) + 16);
              uint64_t v54 = *(void *)(v53 + 832);
              if (v54) {
                LOWORD(v54) = *(_WORD *)(v54 + 8);
              }
              uint64_t v55 = *(void *)(*(void *)a3 + 32);
              uint64_t v56 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
              int v57 = *(llvm **)v56;
              uint64_t v58 = *(void *)(v56 + 8);
              int v59 = (uint64_t *)(v55 + 40 * (v40 ^ 1));
              uint64_t v60 = *(uint64_t **)(*(void *)(v55 + 40 * v40) + 32);
              unsigned int v26 = sub_1CCFDED5C(v53, 56, (const llvm::APInt *)(a1 + 8), v57, v58, *v59, v59[1], v51, *v60, v60[1], v54);
              *(void *)a3 = v26;
              a3[2] = v61;
              goto LABEL_17;
            }
          }
        }
        char v41 = 0;
        uint64_t v40 = 1;
      }
      while ((v42 & 1) != 0);
    }
    while ((v39 & 1) != 0);
    uint64_t v23 = *a4;
  }
  if (a6)
  {
    unint64_t v89 = a4[1];
    uint64_t v260 = (const llvm::APInt *)(a1 + 8);
    uint64_t v90 = sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), 0, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
    unsigned int v92 = 32;
    unsigned int v268 = 32;
    uint64_t v267 = 0;
    if (*(_WORD *)(*a4 + 24) == 175)
    {
      uint64_t v93 = *(void *)(*a4 + 32);
      uint64_t v23 = *(void *)v93;
      unint64_t v89 = v89 & 0xFFFFFFFF00000000 | *(unsigned int *)(v93 + 8);
      uint64_t v94 = *(uint64_t **)(v93 + 40);
      uint64_t v95 = v94[10];
      unsigned int v92 = *(_DWORD *)(v95 + 32);
      if (v92 > 0x40)
      {
        unint64_t v255 = v91;
        llvm::APInt::reallocate((uint64_t)&v267, v92);
        unsigned int v92 = v268;
        if (v268 <= 0x40)
        {
          uint64_t v96 = *(unint64_t **)(v95 + 24);
          uint64_t v267 = v96;
        }
        else
        {
          unint64_t v252 = v89;
          __int16 v110 = v267;
          uint64_t v111 = *(const void **)(v95 + 24);
          unsigned int v112 = v268;
          memcpy(v267, v111, (((unint64_t)v268 + 63) >> 3) & 0x3FFFFFF8);
          uint64_t v96 = v110;
          unint64_t v89 = v252;
          unsigned int v92 = v112;
        }
        unint64_t v91 = v255;
        uint64_t v93 = *(void *)(*a4 + 32);
        uint64_t v94 = *(uint64_t **)(v93 + 40);
      }
      else
      {
        uint64_t v96 = *(unint64_t **)(v95 + 24);
        uint64_t v267 = v96;
        unsigned int v268 = v92;
      }
      unint64_t v91 = v91 & 0xFFFFFFFF00000000 | *(unsigned int *)(v93 + 48);
      unint64_t v108 = (unint64_t)v96;
    }
    else
    {
      uint64_t v94 = v90;
      uint64_t v96 = 0;
      unint64_t v108 = 0;
    }
    if (a6 != 2)
    {
      if (a6 == 1)
      {
        unint64_t v249 = v108;
        uint64_t v250 = (uint64_t)v94;
        unint64_t v256 = v91;
        uint64_t v258 = v96;
        unsigned int v113 = v92;
        unsigned int v266 = 1;
        __src = 0;
        unint64_t v253 = v89;
        if (sub_1CB8F5164(a1, v23, v89, 0, 0))
        {
          uint64_t v115 = *(void *)(v23 + 32);
          uint64_t v116 = *(void *)(v115 + 40);
          int v117 = *(unsigned __int16 *)(v116 + 24);
          if (v117 == 35 || v117 == 11)
          {
            uint64_t v181 = *(void *)(v116 + 80);
            uint64_t v182 = (void **)(v181 + 24);
            unsigned int v183 = *(_DWORD *)(v181 + 32);
            if (v183 > 0x40)
            {
              uint64_t v184 = v250;
              if (&__src != v182)
              {
                llvm::APInt::reallocate((uint64_t)&__src, v183);
                if (v266 <= 0x40) {
                  __src = *v182;
                }
                else {
                  memcpy(__src, *v182, (((unint64_t)v266 + 63) >> 3) & 0x3FFFFFF8);
                }
                uint64_t v184 = v250;
              }
              uint64_t v115 = *(void *)(v23 + 32);
            }
            else
            {
              __src = *v182;
              unsigned int v266 = v183;
              uint64_t v184 = v250;
            }
            uint64_t v185 = *(uint64_t **)v115;
            uint64_t v186 = v256;
            unint64_t v187 = v253 & 0xFFFFFFFF00000000 | *(unsigned int *)(v115 + 8);
LABEL_204:
            uint64_t v223 = *(void *)(*(void *)(a1 + 96) + 16);
            uint64_t v224 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
            int v225 = *(llvm **)v224;
            uint64_t v226 = *(void *)(v224 + 8);
            uint64_t v227 = *(void *)(v223 + 832);
            if (v227) {
              LOWORD(v227) = *(_WORD *)(v227 + 8);
            }
            uint64_t v229 = sub_1CCFDED5C(v223, 175, v260, v225, v226, (uint64_t)v185, v187, v114, v184, v186, v227);
            uint64_t v231 = *(void *)(*(void *)(a1 + 96) + 16);
            uint64_t v233 = *(void *)(v231 + 832);
            if (v233) {
              LOWORD(v233) = *(_WORD *)(v233 + 8);
            }
            uint64_t v232 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
            *(void *)a3 = sub_1CCFDED5C(v231, 56, v260, *(llvm **)v232, *(void *)(v232 + 8), (uint64_t)v229, v228, v230, *(void *)a3, *((void *)a3 + 1), v233);
            a3[2] = v234;
            uint64_t v235 = *(void *)(*(void *)(a1 + 96) + 16);
            unsigned int v236 = v266;
            unsigned int v264 = v266;
            if (v266 > 0x40) {
              operator new[]();
            }
            uint64_t v263 = __src;
            unint64_t v237 = v249;
            if (v113 >= 0x41)
            {
              int v242 = 0;
              int64_t v243 = ((unint64_t)v113 + 63) >> 6;
              do
              {
                if (v243-- < 1) {
                  break;
                }
                unint64_t v245 = v258[v243];
                v242 += __clz(v245);
              }
              while (!v245);
              unsigned int v246 = v113 | 0xFFFFFFC0;
              if ((v113 & 0x3F) == 0) {
                unsigned int v246 = 0;
              }
              if (v113 - v242 - v246 > 0x40) {
                goto LABEL_214;
              }
              unint64_t v237 = *v258;
            }
            if (v237 <= v266) {
              unsigned int v236 = v237;
            }
LABEL_214:
            uint64_t v238 = (void)__src << v236;
            if (v266 == v236) {
              uint64_t v238 = 0;
            }
            if (v266) {
              unint64_t v239 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v266;
            }
            else {
              unint64_t v239 = 0;
            }
            uint64_t v263 = (void *)(v239 & v238);
            uint64_t v240 = (uint64_t *)(*(void *)(*(void *)a3 + 40) + 16 * a3[2]);
            *a4 = sub_1CD7EBB14(v235, (llvm::LLVMContext *)&v263, v260, *v240, v240[1], 0, 0);
            *((_DWORD *)a4 + 2) = v241;
            if (v264 >= 0x41 && v263) {
              MEMORY[0x1D25D9CB0](v263, 0x1000C8000313F17);
            }
            unsigned int v92 = v113;
            uint64_t v96 = v258;
            if (v266 >= 0x41 && __src)
            {
              MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
              uint64_t v96 = v258;
              unsigned int v92 = v113;
            }
            goto LABEL_168;
          }
        }
        unsigned int v92 = v113;
        uint64_t v96 = v258;
        if (v262 > v22)
        {
          int v119 = *(unsigned __int16 *)(v23 + 24);
          if (v119 == 199)
          {
            if (sub_1CB8F5164(a1, **(void **)(v23 + 32), *(void *)(*(void *)(v23 + 32) + 8), 1, 0))
            {
              uint64_t v120 = **(void **)(v23 + 32);
              uint64_t v121 = *(void *)(*(void *)(v120 + 32) + 40);
              int v122 = *(unsigned __int16 *)(v121 + 24);
              if (v122 == 35 || v122 == 11)
              {
                uint64_t v188 = *(void *)(v121 + 80);
                uint64_t v189 = (void **)(v188 + 24);
                unsigned int v190 = *(_DWORD *)(v188 + 32);
                if (v190 > 0x40)
                {
                  if (&__src != v189)
                  {
                    uint64_t v248 = v120;
                    llvm::APInt::reallocate((uint64_t)&__src, v190);
                    if (v266 <= 0x40) {
                      __src = *v189;
                    }
                    else {
                      memcpy(__src, *v189, (((unint64_t)v266 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    uint64_t v120 = v248;
                  }
                }
                else
                {
                  __src = *v189;
                  unsigned int v266 = v190;
                }
                if (v262 > 0x40)
                {
                  uint64_t v247 = v120;
                  if (v266 != v262) {
                    operator new[]();
                  }
                  sub_1CD0463BC((uint64_t)&v263, (uint64_t)&__src);
                  uint64_t v120 = v247;
                }
                else
                {
                  unsigned int v264 = v262;
                  uint64_t v263 = (void *)((unint64_t)__src & (0xFFFFFFFFFFFFFFFFLL >> -(char)v262));
                }
                if (v266 >= 0x41 && __src)
                {
                  uint64_t v202 = v120;
                  MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
                  uint64_t v120 = v202;
                }
                __src = v263;
                unsigned int v266 = v264;
                __int16 v203 = *(llvm::APFloatBase **)(*(void *)(a1 + 96) + 16);
                uint64_t v204 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
                uint64_t v205 = *(llvm **)v204;
                uint64_t v206 = *(void *)(v204 + 8);
                uint64_t v207 = *(uint64_t **)(v120 + 32);
                uint64_t v208 = *v207;
                uint64_t v209 = (void *)v207[1];
                uint64_t v210 = *((void *)v203 + 104);
                if (v210) {
                  __int16 v211 = *(_WORD *)(v210 + 8);
                }
                else {
                  __int16 v211 = 0;
                }
                uint64_t v185 = sub_1CD7F3564(v203, (const char *)0xC7, (uint64_t)v260, v205, v206, v208, v209, v211);
                unint64_t v187 = v212 | v89 & 0xFFFFFFFF00000000;
LABEL_203:
                uint64_t v186 = v256;
                uint64_t v184 = v250;
                goto LABEL_204;
              }
            }
            int v119 = *(unsigned __int16 *)(v23 + 24);
            unsigned int v92 = v113;
            uint64_t v96 = v258;
          }
          if (v119 != 198) {
            goto LABEL_168;
          }
          BOOL v124 = sub_1CB8F5164(a1, **(void **)(v23 + 32), *(void *)(*(void *)(v23 + 32) + 8), 0, 1);
          uint64_t v96 = v258;
          unsigned int v92 = v113;
          if (!v124) {
            goto LABEL_168;
          }
          uint64_t v125 = **(void **)(v23 + 32);
          uint64_t v126 = *(void *)(*(void *)(v125 + 32) + 40);
          int v127 = *(unsigned __int16 *)(v126 + 24);
          if (v127 != 35 && v127 != 11) {
            goto LABEL_168;
          }
          uint64_t v129 = *(void *)(v126 + 80);
          unsigned int v130 = (void **)(v129 + 24);
          unsigned int v131 = *(_DWORD *)(v129 + 32);
          if (v131 > 0x40)
          {
            if (&__src != v130)
            {
              llvm::APInt::reallocate((uint64_t)&__src, v131);
              if (v266 <= 0x40) {
                __src = *v130;
              }
              else {
                memcpy(__src, *v130, (((unint64_t)v266 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
          }
          else
          {
            __src = *v130;
            unsigned int v266 = v131;
          }
          llvm::APInt::sext((uint64_t)&__src, v262, (uint64_t)&v263);
          if (v266 >= 0x41 && __src) {
            MEMORY[0x1D25D9CB0](__src, 0x1000C8000313F17);
          }
          __src = v263;
          unsigned int v266 = v264;
          uint64_t v213 = *(llvm::APFloatBase **)(*(void *)(a1 + 96) + 16);
          uint64_t v214 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
          uint64_t v215 = *(llvm **)v214;
          uint64_t v216 = *(void *)(v214 + 8);
          uint64_t v217 = *(uint64_t **)(v125 + 32);
          uint64_t v218 = *v217;
          uint64_t v219 = (void *)v217[1];
          uint64_t v220 = *((void *)v213 + 104);
          if (v220) {
            __int16 v221 = *(_WORD *)(v220 + 8);
          }
          else {
            __int16 v221 = 0;
          }
          uint64_t v185 = sub_1CD7F3564(v213, (const char *)0xC6, (uint64_t)v260, v215, v216, v218, v219, v221);
          unint64_t v187 = v222 | v253 & 0xFFFFFFFF00000000;
          goto LABEL_203;
        }
      }
LABEL_168:
      if (v92 >= 0x41 && v96) {
        MEMORY[0x1D25D9CB0](v96, 0x1000C8000313F17);
      }
      uint64_t v23 = *a4;
      goto LABEL_43;
    }
    if (v262 <= v22) {
      goto LABEL_168;
    }
    uint64_t v132 = v89;
    uint64_t v133 = v91;
    unsigned int v257 = v92;
    uint64_t v259 = v96;
    uint64_t v134 = (uint64_t)v94;
    BOOL v135 = sub_1CB8F5164(a1, v23, v132, 0, 0);
    unsigned int v92 = v257;
    uint64_t v96 = v259;
    if (!v135) {
      goto LABEL_168;
    }
    if (sub_1CB8F55FC(a1, **(void **)(v23 + 32), *(void *)(*(void *)(v23 + 32) + 8), v22))
    {
      uint64_t v137 = *(void *)(*(void *)(a1 + 96) + 16);
      uint64_t v138 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
      unsigned int v139 = *(llvm **)v138;
      uint64_t v140 = *(void *)(v138 + 8);
      uint64_t v141 = *(uint64_t **)(v23 + 32);
      uint64_t v142 = *v141;
      uint64_t v143 = v141[1];
      uint64_t v144 = *(void *)(v137 + 832);
      if (v144) {
        LOWORD(v144) = *(_WORD *)(v144 + 8);
      }
      uint64_t v251 = sub_1CCFDED5C(v137, 175, v260, v139, v140, v142, v143, v136, v134, v133, v144);
      int v254 = v145;
      uint64_t v147 = *(void *)(*(void *)(a1 + 96) + 16);
      uint64_t v148 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
      unint64_t v149 = *(llvm **)v148;
      uint64_t v150 = *(void *)(v148 + 8);
      uint64_t v151 = *(void *)(v23 + 32);
      uint64_t v152 = *(void *)(v151 + 40);
      uint64_t v153 = *(void *)(v151 + 48);
    }
    else
    {
      BOOL v158 = sub_1CB8F55FC(a1, *(void *)(*(void *)(v23 + 32) + 40), *(void *)(*(void *)(v23 + 32) + 48), v22);
      unsigned int v92 = v257;
      uint64_t v96 = v259;
      if (!v158) {
        goto LABEL_168;
      }
      uint64_t v160 = *(void *)(*(void *)(a1 + 96) + 16);
      uint64_t v161 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
      uint64_t v162 = *(llvm **)v161;
      uint64_t v163 = *(void *)(v161 + 8);
      uint64_t v164 = *(void *)(v23 + 32);
      uint64_t v165 = *(void *)(v164 + 40);
      uint64_t v166 = *(void *)(v164 + 48);
      uint64_t v167 = *(void *)(v160 + 832);
      if (v167) {
        LOWORD(v167) = *(_WORD *)(v167 + 8);
      }
      uint64_t v251 = sub_1CCFDED5C(v160, 175, v260, v162, v163, v165, v166, v159, v134, v133, v167);
      int v254 = v168;
      uint64_t v147 = *(void *)(*(void *)(a1 + 96) + 16);
      uint64_t v169 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
      unint64_t v149 = *(llvm **)v169;
      uint64_t v150 = *(void *)(v169 + 8);
      uint64_t v170 = *(uint64_t **)(v23 + 32);
      uint64_t v152 = *v170;
      uint64_t v153 = v170[1];
    }
    uint64_t v171 = *(void *)(v147 + 832);
    if (v171) {
      LOWORD(v171) = *(_WORD *)(v171 + 8);
    }
    unint64_t v172 = sub_1CCFDED5C(v147, 175, v260, v149, v150, v152, v153, v146, v134, v133, v171);
    uint64_t v175 = *(void *)(*(void *)(a1 + 96) + 16);
    uint64_t v176 = *(void *)(*(void *)a3 + 40) + 16 * a3[2];
    unint64_t v177 = *(llvm **)v176;
    uint64_t v178 = *(void *)(v176 + 8);
    uint64_t v179 = *(void *)(v175 + 832);
    if (v179) {
      LOWORD(v179) = *(_WORD *)(v179 + 8);
    }
    *(void *)a3 = sub_1CCFDED5C(v175, 56, v260, v177, v178, *(void *)a3, *((void *)a3 + 1), v174, (uint64_t)v172, v173, v179);
    a3[2] = v180;
    *a4 = (uint64_t)v251;
    unsigned int v92 = v257;
    *((_DWORD *)a4 + 2) = v254;
    uint64_t v96 = v259;
    goto LABEL_168;
  }
LABEL_43:
  uint64_t v62 = (1 << v17);
  unsigned int v63 = *(unsigned __int16 *)(v23 + 24);
  if (v63 > 0x39)
  {
    if (v63 == 58)
    {
      unsigned int v81 = *(uint64_t **)(v23 + 32);
      uint64_t v82 = v81[5];
      int v83 = *(unsigned __int16 *)(v82 + 24);
      if (v83 != 35 && v83 != 11) {
        goto LABEL_105;
      }
      if (*(unsigned char *)(a1 + 105))
      {
        uint64_t v85 = *(void *)(v82 + 80);
        unint64_t v86 = (void *)(v85 + 24);
        unsigned int v87 = *(_DWORD *)(v85 + 32);
        if (v87 >= 0x41) {
          unint64_t v86 = (void *)*v86;
        }
        if (*v86 == v62)
        {
          uint64_t v88 = *v81;
          *((_DWORD *)a4 + 2) = *((_DWORD *)v81 + 2);
          *a4 = v88;
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t v85 = *(void *)(v82 + 80);
        unsigned int v87 = *(_DWORD *)(v85 + 32);
      }
      uint64_t v99 = (void **)(v85 + 24);
      int v100 = v99;
      if (v87 >= 0x41) {
        int v100 = *v99;
      }
      if (*v100 == 4)
      {
        BOOL v80 = 1;
        *a5 = 1;
        uint64_t v101 = *v81;
        *((_DWORD *)a4 + 2) = *((_DWORD *)v81 + 2);
        *a4 = v101;
        goto LABEL_106;
      }
      if (a6 == 2)
      {
        uint64_t v102 = v99;
        if (v87 >= 0x41) {
          uint64_t v102 = *v99;
        }
        if ((*v102 & (v62 - 1)) == 0)
        {
          uint64_t v154 = *(void *)(*(void *)a2 + 48);
          if (v154)
          {
            int v155 = 1;
            do
            {
              if (*(_DWORD *)(v154 + 8) == a2[2])
              {
                if (!v155) {
                  goto LABEL_105;
                }
                --v155;
              }
              uint64_t v154 = *(void *)(v154 + 32);
            }
            while (v154);
            if (!v155)
            {
              if (v87 >= 0x41) {
                uint64_t v99 = (void **)*v99;
              }
              uint64_t v191 = (unint64_t)*v99 >> v17;
              uint64_t v192 = *(void *)(*(void *)(a1 + 96) + 16);
              uint64_t v193 = *(void *)(v23 + 40) + 16 * *((unsigned int *)a4 + 2);
              unint64_t v194 = *(llvm **)v193;
              uint64_t v195 = *(void *)(v193 + 8);
              uint64_t v196 = *v81;
              uint64_t v197 = v81[1];
              uint64_t v198 = sub_1CD7EBF14(v192, v191, (const llvm::APInt *)(a1 + 8), *(llvm **)v193, v195, 0, 0);
              uint64_t v201 = *(void *)(v192 + 832);
              if (v201) {
                LOWORD(v201) = *(_WORD *)(v201 + 8);
              }
              unsigned int v156 = sub_1CCFDED5C(v192, 58, (const llvm::APInt *)(a1 + 8), v194, v195, v196, v197, v200, (uint64_t)v198, v199, v201);
              goto LABEL_158;
            }
          }
        }
      }
    }
    else
    {
      if (v63 != 175) {
        goto LABEL_105;
      }
      uint64_t v67 = *(void *)(v23 + 32);
      uint64_t v68 = *(void *)(v67 + 40);
      int v69 = *(unsigned __int16 *)(v68 + 24);
      if (v69 != 35 && v69 != 11) {
        goto LABEL_105;
      }
      uint64_t v71 = *(void *)(v68 + 80);
      if (*(unsigned char *)(a1 + 105))
      {
        uint64_t v72 = (void *)(v71 + 24);
        unsigned int v73 = *(_DWORD *)(v71 + 32);
        if (v73 >= 0x41) {
          uint64_t v72 = (void *)*v72;
        }
        if (*v72 == v17)
        {
          uint64_t v74 = *(void *)v67;
          *((_DWORD *)a4 + 2) = *(_DWORD *)(v67 + 8);
          *a4 = v74;
LABEL_87:
          BOOL v80 = 1;
          goto LABEL_106;
        }
      }
      else
      {
        unsigned int v73 = *(_DWORD *)(v71 + 32);
      }
      uint64_t v97 = (void *)(v71 + 24);
      if (v73 >= 0x41) {
        uint64_t v97 = (void *)*v97;
      }
      if (*v97 == 2)
      {
        BOOL v80 = 1;
        *a5 = 1;
        uint64_t v98 = *(void *)v67;
        *((_DWORD *)a4 + 2) = *(_DWORD *)(v67 + 8);
        *a4 = v98;
        goto LABEL_106;
      }
    }
LABEL_105:
    BOOL v80 = *(void *)(a1 + 24) == 1;
    goto LABEL_106;
  }
  if (v63 != 11 && v63 != 35) {
    goto LABEL_105;
  }
  uint64_t v64 = *(void *)(v23 + 80);
  unsigned int v65 = *(_DWORD *)(v64 + 32);
  if (v65 > 0x40) {
    uint64_t v66 = **(void **)(v64 + 24);
  }
  else {
    uint64_t v66 = (uint64_t)(*(void *)(v64 + 24) << -(char)v65) >> -(char)v65;
  }
  if (*(unsigned char *)(a1 + 105))
  {
    uint64_t v75 = v66 / (1 << v17);
    BOOL v76 = (v66 & (v62 - 1)) != 0 || v75 == 0;
    if (!v76 && (unint64_t)(v75 + 0x80000000) >> 32 == 0)
    {
      unsigned int v156 = sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), v75, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
LABEL_158:
      *a4 = (uint64_t)v156;
      *((_DWORD *)a4 + 2) = v157;
      goto LABEL_87;
    }
  }
  if ((v66 & 3) != 0) {
    uint64_t v78 = 0;
  }
  else {
    uint64_t v78 = v66 / 4;
  }
  if (v78) {
    BOOL v79 = (unint64_t)(v78 + 0x80000000) >> 32 == 0;
  }
  else {
    BOOL v79 = 0;
  }
  if (v79)
  {
    *a4 = (uint64_t)sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), v78, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
    *((_DWORD *)a4 + 2) = v109;
    BOOL v80 = 1;
    *a5 = 1;
  }
  else
  {
    BOOL v80 = 0;
  }
LABEL_106:
  if (v262 <= v22 || (int v103 = *(unsigned __int16 *)(*a4 + 24), v103 == 11) || v103 == 35)
  {
    if (v80) {
      return 1;
    }
  }
  else if (sub_1CB8F55FC(a1, *a4, a4[1], v22) && v80)
  {
    return 1;
  }
  uint64_t v105 = *(void *)a2;
  a3[2] = a2[2];
  *(void *)a3 = v105;
  __int16 v106 = sub_1CD7EBF14(*(void *)(*(void *)(a1 + 96) + 16), 0, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 0, 0);
  uint64_t result = 0;
  *a4 = (uint64_t)v106;
  *((_DWORD *)a4 + 2) = v107;
  return result;
}

unsigned __int8 **sub_1CB8F69CC(unsigned __int8 **a1, unsigned __int8 **a2)
{
  if (a2 == a1) {
    return a1;
  }
  int v4 = *a1;
  if (*a1)
  {
    int v6 = *v4;
    if ((v6 - 4) > 0x1E)
    {
      if ((v6 - 3) >= 0xFFFFFFFE) {
        uint64_t v9 = *a1;
      }
      else {
        uint64_t v9 = 0;
      }
      if ((v6 - 3) < 0xFFFFFFFE)
      {
        if (v6 == 3) {
          *((void *)v4 + 1) = 0;
        }
        goto LABEL_3;
      }
      unint64_t v8 = (unint64_t)(v9 + 8);
    }
    else
    {
      if ((v4[1] & 0x7F) != 2 && !*((_DWORD *)v4 + 3)) {
        goto LABEL_3;
      }
      uint64_t v7 = *((void *)v4 + 2);
      if ((v7 & 4) == 0) {
        goto LABEL_3;
      }
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (!v8) {
        goto LABEL_3;
      }
    }
    uint64_t v10 = a1;
    sub_1CC5FA668(v8 + 16, &v10);
  }
LABEL_3:
  *a1 = *a2;
  if (*a2)
  {
    llvm::MetadataTracking::retrack((uint64_t)a2, *a2, (uint64_t)a1);
    *a2 = 0;
  }
  return a1;
}

uint64_t sub_1CB8F6AA4()
{
  return 0;
}

uint64_t sub_1CB8F6AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(unsigned __int16 **)(a2 + 16);
  int v5 = *v4;
  if ((*((unsigned char *)v4 + 17) & 2) != 0)
  {
    uint64_t result = 0;
    if (*v4 > 0x2B20u)
    {
      switch(*v4)
      {
        case 0x2B93u:
        case 0x2B94u:
        case 0x2B99u:
        case 0x2B9Au:
        case 0x2BA7u:
        case 0x2BA8u:
        case 0x2BB1u:
        case 0x2BB2u:
        case 0x2BB7u:
        case 0x2BB8u:
        case 0x2BC5u:
        case 0x2BC6u:
        case 0x2BCFu:
        case 0x2BD0u:
        case 0x2BD5u:
        case 0x2BD6u:
        case 0x2BE3u:
        case 0x2BE4u:
        case 0x2BEDu:
        case 0x2BEEu:
        case 0x2BF3u:
        case 0x2BF4u:
        case 0x2C01u:
        case 0x2C02u:
        case 0x2C0Bu:
        case 0x2C0Cu:
        case 0x2C11u:
        case 0x2C12u:
        case 0x2C1Fu:
        case 0x2C20u:
        case 0x2C29u:
        case 0x2C2Au:
        case 0x2C2Fu:
        case 0x2C30u:
        case 0x2C3Du:
        case 0x2C3Eu:
        case 0x2C47u:
        case 0x2C48u:
        case 0x2C4Du:
        case 0x2C4Eu:
        case 0x2C57u:
        case 0x2C58u:
        case 0x2C5Bu:
        case 0x2C5Cu:
        case 0x2C5Fu:
        case 0x2C60u:
        case 0x2C63u:
        case 0x2C64u:
        case 0x2C65u:
        case 0x2C66u:
        case 0x2C69u:
        case 0x2C6Au:
        case 0x2C6Du:
        case 0x2C6Eu:
        case 0x2C71u:
        case 0x2C72u:
        case 0x2C73u:
        case 0x2C74u:
        case 0x2C77u:
        case 0x2C78u:
        case 0x2C7Bu:
        case 0x2C7Cu:
        case 0x2C7Fu:
        case 0x2C80u:
        case 0x2C81u:
        case 0x2C82u:
        case 0x2C85u:
        case 0x2C86u:
        case 0x2C89u:
        case 0x2C8Au:
        case 0x2C8Du:
        case 0x2C8Eu:
        case 0x2C8Fu:
        case 0x2C90u:
        case 0x2C93u:
        case 0x2C94u:
        case 0x2C97u:
        case 0x2C98u:
        case 0x2C9Bu:
        case 0x2C9Cu:
        case 0x2C9Du:
        case 0x2C9Eu:
        case 0x2CA1u:
        case 0x2CA2u:
        case 0x2CA5u:
        case 0x2CA6u:
        case 0x2CA9u:
        case 0x2CAAu:
        case 0x2CABu:
        case 0x2CACu:
        case 0x2CAFu:
        case 0x2CB0u:
        case 0x2CB3u:
        case 0x2CB4u:
        case 0x2CB7u:
        case 0x2CB8u:
        case 0x2CB9u:
        case 0x2CBAu:
        case 0x2CBDu:
        case 0x2CBEu:
        case 0x2CC1u:
        case 0x2CC2u:
        case 0x2CC5u:
        case 0x2CC6u:
        case 0x2CC7u:
        case 0x2CC8u:
        case 0x2CCBu:
        case 0x2CCCu:
        case 0x2CCFu:
        case 0x2CD0u:
        case 0x2CD3u:
        case 0x2CD4u:
        case 0x2CD5u:
        case 0x2CD6u:
        case 0x2CD9u:
        case 0x2CDAu:
        case 0x2CDDu:
        case 0x2CDEu:
        case 0x2CE1u:
        case 0x2CE2u:
        case 0x2CE3u:
        case 0x2CE4u:
        case 0x2CE7u:
        case 0x2CE8u:
        case 0x2CEBu:
        case 0x2CECu:
        case 0x2CEFu:
        case 0x2CF0u:
        case 0x2CF1u:
        case 0x2CF2u:
        case 0x2CF5u:
        case 0x2CF6u:
        case 0x2CF9u:
        case 0x2CFAu:
        case 0x2CFDu:
        case 0x2CFEu:
        case 0x2CFFu:
        case 0x2D00u:
        case 0x2D03u:
        case 0x2D04u:
        case 0x2D07u:
        case 0x2D08u:
        case 0x2D0Bu:
        case 0x2D0Cu:
        case 0x2D0Du:
        case 0x2D0Eu:
        case 0x2D11u:
        case 0x2D12u:
        case 0x2D15u:
        case 0x2D16u:
        case 0x2D19u:
        case 0x2D1Au:
        case 0x2D1Bu:
        case 0x2D1Cu:
        case 0x2D1Fu:
        case 0x2D20u:
        case 0x2D23u:
        case 0x2D24u:
        case 0x2D27u:
        case 0x2D28u:
        case 0x2D29u:
        case 0x2D2Au:
        case 0x2D2Du:
        case 0x2D2Eu:
        case 0x2D31u:
        case 0x2D32u:
        case 0x2D35u:
        case 0x2D36u:
          return result;
        case 0x2B95u:
        case 0x2B96u:
        case 0x2B97u:
        case 0x2B98u:
        case 0x2B9Bu:
        case 0x2B9Cu:
        case 0x2B9Du:
        case 0x2B9Eu:
        case 0x2B9Fu:
        case 0x2BA0u:
        case 0x2BA1u:
        case 0x2BA2u:
        case 0x2BA3u:
        case 0x2BA4u:
        case 0x2BA5u:
        case 0x2BA6u:
        case 0x2BA9u:
        case 0x2BAAu:
        case 0x2BABu:
        case 0x2BACu:
        case 0x2BADu:
        case 0x2BAEu:
        case 0x2BAFu:
        case 0x2BB0u:
        case 0x2BB3u:
        case 0x2BB4u:
        case 0x2BB5u:
        case 0x2BB6u:
        case 0x2BB9u:
        case 0x2BBAu:
        case 0x2BBBu:
        case 0x2BBCu:
        case 0x2BBDu:
        case 0x2BBEu:
        case 0x2BBFu:
        case 0x2BC0u:
        case 0x2BC1u:
        case 0x2BC2u:
        case 0x2BC3u:
        case 0x2BC4u:
        case 0x2BC7u:
        case 0x2BC8u:
        case 0x2BC9u:
        case 0x2BCAu:
        case 0x2BCBu:
        case 0x2BCCu:
        case 0x2BCDu:
        case 0x2BCEu:
        case 0x2BD1u:
        case 0x2BD2u:
        case 0x2BD3u:
        case 0x2BD4u:
        case 0x2BD7u:
        case 0x2BD8u:
        case 0x2BD9u:
        case 0x2BDAu:
        case 0x2BDBu:
        case 0x2BDCu:
        case 0x2BDDu:
        case 0x2BDEu:
        case 0x2BDFu:
        case 0x2BE0u:
        case 0x2BE1u:
        case 0x2BE2u:
        case 0x2BE5u:
        case 0x2BE6u:
        case 0x2BE7u:
        case 0x2BE8u:
        case 0x2BE9u:
        case 0x2BEAu:
        case 0x2BEBu:
        case 0x2BECu:
        case 0x2BEFu:
        case 0x2BF0u:
        case 0x2BF1u:
        case 0x2BF2u:
        case 0x2BF5u:
        case 0x2BF6u:
        case 0x2BF7u:
        case 0x2BF8u:
        case 0x2BF9u:
        case 0x2BFAu:
        case 0x2BFBu:
        case 0x2BFCu:
        case 0x2BFDu:
        case 0x2BFEu:
        case 0x2BFFu:
        case 0x2C00u:
        case 0x2C03u:
        case 0x2C04u:
        case 0x2C05u:
        case 0x2C06u:
        case 0x2C07u:
        case 0x2C08u:
        case 0x2C09u:
        case 0x2C0Au:
        case 0x2C0Du:
        case 0x2C0Eu:
        case 0x2C0Fu:
        case 0x2C10u:
        case 0x2C13u:
        case 0x2C14u:
        case 0x2C15u:
        case 0x2C16u:
        case 0x2C17u:
        case 0x2C18u:
        case 0x2C19u:
        case 0x2C1Au:
        case 0x2C1Bu:
        case 0x2C1Cu:
        case 0x2C1Du:
        case 0x2C1Eu:
        case 0x2C21u:
        case 0x2C22u:
        case 0x2C23u:
        case 0x2C24u:
        case 0x2C25u:
        case 0x2C26u:
        case 0x2C27u:
        case 0x2C28u:
        case 0x2C2Bu:
        case 0x2C2Cu:
        case 0x2C2Du:
        case 0x2C2Eu:
        case 0x2C31u:
        case 0x2C32u:
        case 0x2C33u:
        case 0x2C34u:
        case 0x2C35u:
        case 0x2C36u:
        case 0x2C37u:
        case 0x2C38u:
        case 0x2C39u:
        case 0x2C3Au:
        case 0x2C3Bu:
        case 0x2C3Cu:
        case 0x2C3Fu:
        case 0x2C40u:
        case 0x2C41u:
        case 0x2C42u:
        case 0x2C43u:
        case 0x2C44u:
        case 0x2C45u:
        case 0x2C46u:
        case 0x2C49u:
        case 0x2C4Au:
        case 0x2C4Bu:
        case 0x2C4Cu:
        case 0x2C4Fu:
        case 0x2C50u:
        case 0x2C51u:
        case 0x2C52u:
        case 0x2C53u:
        case 0x2C54u:
        case 0x2C55u:
        case 0x2C56u:
        case 0x2C59u:
        case 0x2C5Au:
        case 0x2C5Du:
        case 0x2C5Eu:
        case 0x2C61u:
        case 0x2C62u:
        case 0x2C67u:
        case 0x2C68u:
        case 0x2C6Bu:
        case 0x2C6Cu:
        case 0x2C6Fu:
        case 0x2C70u:
        case 0x2C75u:
        case 0x2C76u:
        case 0x2C79u:
        case 0x2C7Au:
        case 0x2C7Du:
        case 0x2C7Eu:
        case 0x2C83u:
        case 0x2C84u:
        case 0x2C87u:
        case 0x2C88u:
        case 0x2C8Bu:
        case 0x2C8Cu:
        case 0x2C91u:
        case 0x2C92u:
        case 0x2C95u:
        case 0x2C96u:
        case 0x2C99u:
        case 0x2C9Au:
        case 0x2C9Fu:
        case 0x2CA0u:
        case 0x2CA3u:
        case 0x2CA4u:
        case 0x2CA7u:
        case 0x2CA8u:
        case 0x2CADu:
        case 0x2CAEu:
        case 0x2CB1u:
        case 0x2CB2u:
        case 0x2CB5u:
        case 0x2CB6u:
        case 0x2CBBu:
        case 0x2CBCu:
        case 0x2CBFu:
        case 0x2CC0u:
        case 0x2CC3u:
        case 0x2CC4u:
        case 0x2CC9u:
        case 0x2CCAu:
        case 0x2CCDu:
        case 0x2CCEu:
        case 0x2CD1u:
        case 0x2CD2u:
        case 0x2CD7u:
        case 0x2CD8u:
        case 0x2CDBu:
        case 0x2CDCu:
        case 0x2CDFu:
        case 0x2CE0u:
        case 0x2CE5u:
        case 0x2CE6u:
        case 0x2CE9u:
        case 0x2CEAu:
        case 0x2CEDu:
        case 0x2CEEu:
        case 0x2CF3u:
        case 0x2CF4u:
        case 0x2CF7u:
        case 0x2CF8u:
        case 0x2CFBu:
        case 0x2CFCu:
        case 0x2D01u:
        case 0x2D02u:
        case 0x2D05u:
        case 0x2D06u:
        case 0x2D09u:
        case 0x2D0Au:
        case 0x2D0Fu:
        case 0x2D10u:
        case 0x2D13u:
        case 0x2D14u:
        case 0x2D17u:
        case 0x2D18u:
        case 0x2D1Du:
        case 0x2D1Eu:
        case 0x2D21u:
        case 0x2D22u:
        case 0x2D25u:
        case 0x2D26u:
        case 0x2D2Bu:
        case 0x2D2Cu:
        case 0x2D2Fu:
        case 0x2D30u:
        case 0x2D33u:
        case 0x2D34u:
          goto LABEL_69;
        default:
          if ((v5 - 11041) <= 0x3D && ((1 << (v5 - 33)) & 0x30C03000C300C003) != 0) {
            return result;
          }
          uint64_t v3 = 3221425155;
          if ((v5 - 11115) <= 0x1F && ((1 << (v5 - 107)) & 0xC0030C03) != 0) {
            return result;
          }
          goto LABEL_69;
      }
    }
    if (*v4 <= 0x29C4u)
    {
      if (*v4 > 0x28F2u)
      {
        if ((v5 - 10483) <= 0x39 && ((1 << (v5 + 13)) & 0x3000C003000C003) != 0) {
          return result;
        }
        uint64_t v3 = 1 << (v5 - 57);
        if ((v5 - 10553) <= 0x39 && (v3 & 0x3000C003000C003) != 0) {
          return result;
        }
        int v14 = -10623;
        goto LABEL_36;
      }
      BOOL v23 = (v5 - 10407) > 0x3F;
      uint64_t v24 = 1 << (v5 + 89);
      uint64_t v3 = 0xC003000C0030FFFFLL;
    }
    else
    {
      if (*v4 <= 0x2A98u)
      {
        if ((v5 - 10833) <= 0x3B && ((1 << (v5 - 81)) & 0xC300C003000C003) != 0) {
          return result;
        }
        uint64_t v3 = 0x3000C003000C003;
        if ((v5 - 10693) <= 0x39 && ((1 << (v5 + 59)) & 0x3000C003000C003) != 0) {
          return result;
        }
        int v14 = -10763;
LABEL_36:
        unsigned int v17 = v5 + v14;
        if (v17 <= 0x39)
        {
          uint64_t v3 = 0x3000C003000C003;
          if (((1 << v17) & 0x3000C003000C003) != 0) {
            return result;
          }
        }
LABEL_69:
        uint64_t result = 0;
        unsigned int v29 = -11081;
        int v30 = v5 - 11081;
        switch(v5)
        {
          case 11081:
          case 11082:
          case 11083:
          case 11084:
          case 11085:
          case 11086:
          case 11087:
          case 11088:
          case 11089:
          case 11090:
          case 11091:
          case 11092:
          case 11093:
          case 11094:
          case 11095:
          case 11096:
          case 11351:
          case 11352:
          case 11353:
          case 11354:
          case 11355:
          case 11356:
          case 11357:
          case 11358:
          case 11359:
          case 11360:
          case 11361:
          case 11362:
          case 11363:
          case 11364:
          case 11407:
          case 11408:
          case 11409:
          case 11410:
          case 11411:
          case 11412:
          case 11413:
          case 11414:
          case 11415:
          case 11416:
          case 11417:
          case 11418:
          case 11419:
          case 11420:
          case 11463:
          case 11464:
          case 11465:
          case 11466:
          case 11467:
          case 11468:
          case 11469:
          case 11470:
          case 11471:
          case 11472:
          case 11473:
          case 11474:
          case 11475:
          case 11476:
          case 11519:
          case 11520:
          case 11521:
          case 11522:
          case 11523:
          case 11524:
          case 11525:
          case 11526:
          case 11527:
          case 11528:
          case 11529:
          case 11530:
          case 11531:
          case 11532:
            goto LABEL_70;
          case 11097:
          case 11098:
          case 11099:
          case 11100:
          case 11101:
          case 11102:
          case 11103:
          case 11104:
          case 11105:
          case 11106:
          case 11107:
          case 11108:
          case 11109:
          case 11110:
          case 11127:
          case 11128:
          case 11129:
          case 11130:
          case 11131:
          case 11132:
          case 11133:
          case 11134:
          case 11135:
          case 11136:
          case 11137:
          case 11138:
          case 11139:
          case 11140:
          case 11141:
          case 11142:
          case 11143:
          case 11144:
          case 11145:
          case 11146:
          case 11147:
          case 11148:
          case 11149:
          case 11150:
          case 11151:
          case 11152:
          case 11153:
          case 11154:
          case 11155:
          case 11156:
          case 11157:
          case 11158:
          case 11159:
          case 11160:
          case 11161:
          case 11162:
          case 11163:
          case 11164:
          case 11165:
          case 11166:
          case 11167:
          case 11168:
          case 11169:
          case 11170:
          case 11171:
          case 11172:
          case 11173:
          case 11174:
          case 11175:
          case 11176:
          case 11177:
          case 11178:
          case 11179:
          case 11180:
          case 11181:
          case 11182:
          case 11183:
          case 11184:
          case 11185:
          case 11186:
          case 11187:
          case 11188:
          case 11189:
          case 11190:
          case 11191:
          case 11192:
          case 11193:
          case 11194:
          case 11195:
          case 11196:
          case 11197:
          case 11198:
          case 11199:
          case 11200:
          case 11201:
          case 11202:
          case 11203:
          case 11204:
          case 11205:
          case 11206:
          case 11207:
          case 11208:
          case 11209:
          case 11210:
          case 11211:
          case 11212:
          case 11213:
          case 11214:
          case 11215:
          case 11216:
          case 11217:
          case 11218:
          case 11219:
          case 11220:
          case 11221:
          case 11222:
          case 11223:
          case 11224:
          case 11225:
          case 11226:
          case 11227:
          case 11228:
          case 11229:
          case 11230:
          case 11231:
          case 11232:
          case 11233:
          case 11234:
          case 11235:
          case 11236:
          case 11237:
          case 11238:
          case 11239:
          case 11240:
          case 11241:
          case 11242:
          case 11243:
          case 11244:
          case 11245:
          case 11246:
          case 11247:
          case 11248:
          case 11249:
          case 11250:
          case 11251:
          case 11252:
          case 11253:
          case 11254:
          case 11255:
          case 11256:
          case 11257:
          case 11258:
          case 11259:
          case 11260:
          case 11261:
          case 11262:
          case 11263:
          case 11264:
          case 11265:
          case 11266:
          case 11267:
          case 11268:
          case 11269:
          case 11270:
          case 11271:
          case 11272:
          case 11273:
          case 11274:
          case 11275:
          case 11276:
          case 11277:
          case 11278:
          case 11279:
          case 11280:
          case 11281:
          case 11282:
          case 11283:
          case 11284:
          case 11285:
          case 11286:
          case 11287:
          case 11288:
          case 11289:
          case 11290:
          case 11291:
          case 11292:
          case 11293:
          case 11294:
          case 11295:
          case 11296:
          case 11297:
          case 11298:
          case 11299:
          case 11300:
          case 11301:
          case 11302:
          case 11303:
          case 11304:
          case 11305:
          case 11306:
          case 11307:
          case 11308:
          case 11309:
          case 11310:
          case 11311:
          case 11312:
          case 11313:
          case 11314:
          case 11315:
          case 11316:
          case 11317:
          case 11318:
          case 11319:
          case 11320:
          case 11321:
          case 11322:
          case 11323:
          case 11324:
          case 11325:
          case 11326:
          case 11327:
          case 11328:
          case 11329:
          case 11330:
          case 11331:
          case 11332:
          case 11333:
          case 11334:
          case 11335:
          case 11336:
          case 11337:
          case 11338:
          case 11339:
          case 11340:
          case 11341:
          case 11342:
          case 11343:
          case 11344:
          case 11345:
          case 11346:
          case 11347:
          case 11348:
          case 11349:
          case 11350:
LABEL_104:
            __break(1u);
            switch(v30)
            {
              case 0:
              case 1:
              case 2:
              case 3:
                goto LABEL_105;
              case 4:
              case 5:
                goto LABEL_107;
              case 6:
              case 7:
              case 8:
              case 9:
                goto LABEL_108;
              case 10:
              case 11:
              case 12:
              case 13:
                goto LABEL_106;
              default:
                goto LABEL_109;
            }
          case 11111:
          case 11112:
          case 11113:
          case 11114:
          case 11115:
          case 11116:
          case 11117:
          case 11118:
          case 11119:
          case 11120:
          case 11121:
          case 11122:
          case 11123:
          case 11124:
          case 11125:
          case 11126:
          case 11365:
          case 11366:
          case 11367:
          case 11368:
          case 11369:
          case 11370:
          case 11371:
          case 11372:
          case 11373:
          case 11374:
          case 11375:
          case 11376:
          case 11377:
          case 11378:
          case 11379:
          case 11380:
          case 11381:
          case 11382:
          case 11383:
          case 11384:
          case 11385:
          case 11386:
          case 11387:
          case 11388:
          case 11389:
          case 11390:
          case 11391:
          case 11392:
          case 11393:
          case 11394:
          case 11395:
          case 11396:
          case 11397:
          case 11398:
          case 11399:
          case 11400:
          case 11401:
          case 11402:
          case 11403:
          case 11404:
          case 11405:
          case 11406:
          case 11421:
          case 11422:
          case 11423:
          case 11424:
          case 11425:
          case 11426:
          case 11427:
          case 11428:
          case 11429:
          case 11430:
          case 11431:
          case 11432:
          case 11433:
          case 11434:
          case 11435:
          case 11436:
          case 11437:
          case 11438:
          case 11439:
          case 11440:
          case 11441:
          case 11442:
          case 11443:
          case 11444:
          case 11445:
          case 11446:
          case 11447:
          case 11448:
          case 11449:
          case 11450:
          case 11451:
          case 11452:
          case 11453:
          case 11454:
          case 11455:
          case 11456:
          case 11457:
          case 11458:
          case 11459:
          case 11460:
          case 11461:
          case 11462:
          case 11477:
          case 11478:
          case 11479:
          case 11480:
          case 11481:
          case 11482:
          case 11483:
          case 11484:
          case 11485:
          case 11486:
          case 11487:
          case 11488:
          case 11489:
          case 11490:
          case 11491:
          case 11492:
          case 11493:
          case 11494:
          case 11495:
          case 11496:
          case 11497:
          case 11498:
          case 11499:
          case 11500:
          case 11501:
          case 11502:
          case 11503:
          case 11504:
          case 11505:
          case 11506:
          case 11507:
          case 11508:
          case 11509:
          case 11510:
          case 11511:
          case 11512:
          case 11513:
          case 11514:
          case 11515:
          case 11516:
          case 11517:
          case 11518:
          case 11533:
          case 11534:
          case 11535:
          case 11536:
          case 11537:
          case 11538:
          case 11539:
          case 11540:
          case 11541:
          case 11542:
          case 11543:
          case 11544:
          case 11545:
          case 11546:
          case 11547:
          case 11548:
          case 11549:
          case 11550:
          case 11551:
          case 11552:
          case 11553:
          case 11554:
          case 11555:
          case 11556:
          case 11557:
          case 11558:
          case 11559:
          case 11560:
          case 11561:
          case 11562:
          case 11563:
          case 11564:
          case 11565:
          case 11566:
          case 11567:
          case 11568:
          case 11569:
          case 11570:
          case 11571:
          case 11572:
          case 11573:
          case 11574:
            return result;
          default:
            if (((1 << (v5 - 123)) & 0x3FFF0000000) != 0) {
              return result;
            }
LABEL_70:
            unsigned int v29 = 1;
            if (v5 > 11406)
            {
              if ((v5 - 11407) < 0xE) {
                goto LABEL_76;
              }
              goto LABEL_75;
            }
            if ((v5 - 11081) <= 0xF)
            {
              int v31 = 1 << (v5 - 73);
              int v32 = 54645;
            }
            else
            {
              if ((v5 - 10619) > 0xD) {
                goto LABEL_76;
              }
              int v31 = 1 << (v5 - 123);
              int v32 = 5493;
            }
            if ((v31 & v32) == 0) {
LABEL_75:
            }
              unsigned int v29 = 0;
LABEL_76:
            uint64_t v3 = 0;
            if (v5 > 11350)
            {
              int v30 = v5 - 11463;
              switch(v5)
              {
                case 11464:
                case 11466:
                case 11468:
                case 11470:
                case 11472:
                case 11474:
                case 11476:
                case 11520:
                case 11522:
                case 11524:
                case 11526:
                case 11528:
                case 11530:
                case 11532:
                  goto LABEL_87;
                case 11477:
                case 11478:
                case 11479:
                case 11480:
                case 11481:
                case 11482:
                case 11483:
                case 11484:
                case 11485:
                case 11486:
                case 11487:
                case 11488:
                case 11489:
                case 11490:
                case 11491:
                case 11492:
                case 11493:
                case 11494:
                case 11495:
                case 11496:
                case 11497:
                case 11498:
                case 11499:
                case 11500:
                case 11501:
                case 11502:
                case 11503:
                case 11504:
                case 11505:
                case 11506:
                case 11507:
                case 11508:
                case 11509:
                case 11510:
                case 11511:
                case 11512:
                case 11513:
                case 11514:
                case 11515:
                case 11516:
                case 11517:
                case 11518:
                  goto LABEL_104;
                default:
                  goto LABEL_88;
              }
            }
            if ((v5 - 11081) > 0xF)
            {
              int v33 = 1 << (v5 - 123);
              int v34 = 3283;
            }
            else
            {
              int v33 = 1 << (v5 - 73);
              int v34 = 19667;
            }
            if ((v33 & v34) == 0) {
LABEL_87:
            }
              LODWORD(v3) = 1;
LABEL_88:
            if (v29)
            {
              int v5 = 0;
            }
            else
            {
              if (v3) {
                LODWORD(v3) = 3;
              }
              else {
                LODWORD(v3) = 2;
              }
              *(void *)(a3 + 32) = *(void *)(*(void *)(a2 + 32) + 80);
              int v5 = 1;
            }
            *(void *)a3 = a2;
            int v35 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | v3;
            *(_DWORD *)(a3 + 24) = v35;
            *(_DWORD *)(a3 + 20) = *(void *)(*(void *)(a2 + 32) + 48);
            *(_DWORD *)(a3 + 28) = 0;
            unsigned int v36 = **(unsigned __int16 **)(a2 + 16);
            int v37 = 0x2000;
            if (v36 > 0x2C8E)
            {
              if (v36 - 11407 < 0xE || v36 - 11463 >= 0xE) {
                goto LABEL_100;
              }
            }
            else if (v36 - 11081 < 0x10)
            {
              goto LABEL_100;
            }
            int v37 = 4096;
LABEL_100:
            uint64_t v3 = 0;
            unsigned int v29 = v37 | v35 & 0xFFFF0003;
            *(_DWORD *)(a3 + 24) = v29;
            unsigned int v38 = **(unsigned __int16 **)(a2 + 16);
            if (v38 <= 0x2CC6)
            {
              int v30 = v38 - 11351;
              switch(**(_WORD **)(a2 + 16))
              {
                case 0x2C57:
                case 0x2C58:
                case 0x2C59:
                case 0x2C5A:
                case 0x2C8F:
                case 0x2C90:
                case 0x2C91:
                case 0x2C92:
                  goto LABEL_105;
                case 0x2C5B:
                case 0x2C5C:
                case 0x2C5D:
                case 0x2C5E:
                case 0x2C93:
                case 0x2C94:
                case 0x2C95:
                case 0x2C96:
                  goto LABEL_108;
                case 0x2C5F:
                case 0x2C60:
                case 0x2C61:
                case 0x2C62:
                case 0x2C97:
                case 0x2C98:
                case 0x2C99:
                case 0x2C9A:
                  goto LABEL_106;
                case 0x2C63:
                case 0x2C64:
                case 0x2C9B:
                case 0x2C9C:
                  goto LABEL_107;
                case 0x2C65:
                case 0x2C66:
                case 0x2C67:
                case 0x2C68:
                case 0x2C69:
                case 0x2C6A:
                case 0x2C6B:
                case 0x2C6C:
                case 0x2C6D:
                case 0x2C6E:
                case 0x2C6F:
                case 0x2C70:
                case 0x2C71:
                case 0x2C72:
                case 0x2C73:
                case 0x2C74:
                case 0x2C75:
                case 0x2C76:
                case 0x2C77:
                case 0x2C78:
                case 0x2C79:
                case 0x2C7A:
                case 0x2C7B:
                case 0x2C7C:
                case 0x2C7D:
                case 0x2C7E:
                case 0x2C7F:
                case 0x2C80:
                case 0x2C81:
                case 0x2C82:
                case 0x2C83:
                case 0x2C84:
                case 0x2C85:
                case 0x2C86:
                case 0x2C87:
                case 0x2C88:
                case 0x2C89:
                case 0x2C8A:
                case 0x2C8B:
                case 0x2C8C:
                case 0x2C8D:
                case 0x2C8E:
                  goto LABEL_104;
                default:
LABEL_109:
                  JUMPOUT(0);
              }
            }
            int v30 = v38 - 11463;
            switch(**(_WORD **)(a2 + 16))
            {
              case 0x2CCB:
              case 0x2CCC:
              case 0x2CCD:
              case 0x2CCE:
              case 0x2D03:
              case 0x2D04:
              case 0x2D05:
              case 0x2D06:
                goto LABEL_108;
              case 0x2CCF:
              case 0x2CD0:
              case 0x2CD1:
              case 0x2CD2:
              case 0x2D07:
              case 0x2D08:
              case 0x2D09:
              case 0x2D0A:
LABEL_106:
                uint64_t v3 = 1;
                goto LABEL_108;
              case 0x2CD3:
              case 0x2CD4:
              case 0x2D0B:
              case 0x2D0C:
LABEL_107:
                uint64_t v3 = 3;
                goto LABEL_108;
              case 0x2CD5:
              case 0x2CD6:
              case 0x2CD7:
              case 0x2CD8:
              case 0x2CD9:
              case 0x2CDA:
              case 0x2CDB:
              case 0x2CDC:
              case 0x2CDD:
              case 0x2CDE:
              case 0x2CDF:
              case 0x2CE0:
              case 0x2CE1:
              case 0x2CE2:
              case 0x2CE3:
              case 0x2CE4:
              case 0x2CE5:
              case 0x2CE6:
              case 0x2CE7:
              case 0x2CE8:
              case 0x2CE9:
              case 0x2CEA:
              case 0x2CEB:
              case 0x2CEC:
              case 0x2CED:
              case 0x2CEE:
              case 0x2CEF:
              case 0x2CF0:
              case 0x2CF1:
              case 0x2CF2:
              case 0x2CF3:
              case 0x2CF4:
              case 0x2CF5:
              case 0x2CF6:
              case 0x2CF7:
              case 0x2CF8:
              case 0x2CF9:
              case 0x2CFA:
              case 0x2CFB:
              case 0x2CFC:
              case 0x2CFD:
              case 0x2CFE:
                goto LABEL_104;
              default:
LABEL_105:
                uint64_t v3 = 2;
LABEL_108:
                *(void *)(a3 + 8 * v5 + 32) = v3;
                *(_DWORD *)(a3 + 24) = (v29 & 0xFF003003 | (v5 << 16)) + 0x10000;
                break;
            }
            return 1;
        }
      }
      if ((v5 - 10905) <= 0x3D && ((1 << (v5 + 103)) & 0x3000C300C0030C03) != 0) {
        return result;
      }
      BOOL v23 = (v5 - 10975) > 0x3D;
      uint64_t v24 = 1 << (v5 + 33);
      uint64_t v3 = 0x300C0030C03000C3;
    }
    uint64_t v25 = v24 & v3;
    if (!v23 && v25 != 0) {
      return result;
    }
    goto LABEL_69;
  }
  uint64_t result = 0;
  if (*v4 <= 0x2DF2u)
  {
    if ((v5 - 291) < 2)
    {
      *(void *)a3 = a2;
      unsigned int v18 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 4;
      *(_DWORD *)(a3 + 24) = v18;
      unsigned int v11 = v18 & 0xFF0000FF;
    }
    else
    {
      if ((v5 - 314) >= 2) {
        return result;
      }
      *(void *)a3 = a2;
      unsigned int v10 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 5;
      *(_DWORD *)(a3 + 24) = v10;
      unsigned int v11 = v10 & 0xFF000005;
    }
    uint64_t v19 = *(void *)(*(void *)(a2 + 32) + 48);
    *(_DWORD *)(a3 + 24) = v11 | 0x12000;
    *(_DWORD *)(a3 + 28) = 0;
    *(_DWORD *)(a3 + 20) = v19;
    *(void *)(a3 + 32) = *(void *)(*(void *)(a2 + 32) + 48) / *(uint64_t *)(*(void *)(a2 + 32) + 80);
    *(void *)(a3 + 40) = 0;
    return 1;
  }
  if ((v5 - 11763) < 2)
  {
    *(void *)a3 = a2;
    unsigned int v20 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 4;
    *(_DWORD *)(a3 + 24) = v20;
    uint64_t v8 = *(void *)(*(void *)(a2 + 32) + 48);
    *(_DWORD *)(a3 + 28) = 0;
    unsigned int v9 = v20 & 0xFF0000FF;
    goto LABEL_44;
  }
  if ((v5 - 13390) < 2)
  {
    *(void *)a3 = a2;
    unsigned int v7 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 5;
    *(_DWORD *)(a3 + 24) = v7;
    uint64_t v8 = *(void *)(*(void *)(a2 + 32) + 48);
    *(_DWORD *)(a3 + 28) = 0;
    unsigned int v9 = v7 & 0xFF000005;
LABEL_44:
    *(_DWORD *)(a3 + 20) = v8;
    *(_DWORD *)(a3 + 24) = v9 | 0x2000;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    return 1;
  }
  if (v5 == 12152)
  {
    unsigned int v21 = *(_DWORD *)(a3 + 24) & 0xFFFFFF00 | 6;
    *(_DWORD *)(a3 + 24) = v21;
    unsigned int v9 = v21 & 0xFF000006;
    *(void *)a3 = a2;
    uint64_t v8 = *(void *)(*(void *)(a2 + 32) + 48);
    *(_DWORD *)(a3 + 28) = 0;
    goto LABEL_44;
  }
  return result;
}

uint64_t sub_1CB8F871C()
{
  return __cxa_atexit((void (*)(void *))llvm::GPUIterateCombiner::~GPUIterateCombiner, off_1EC7DF9C0, &dword_1CB82C000);
}

uint64_t sub_1CB8F8740(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4 && ((*(unsigned __int8 *)(v4 + a2 / 8 + 12) >> (a2 & 7)) & 1) != 0) {
    return 1;
  }
  if (sub_1CB8F87D0(a1, a2)) {
    return 0;
  }

  return llvm::CallBase::hasFnAttrOnCalledFunction(a1, a2);
}

BOOL sub_1CB8F87D0(uint64_t a1, int a2)
{
  BOOL result = 0;
  uint64_t v4 = (a2 - 3);
  if (v4 <= 0x3F)
  {
    if (((1 << (a2 - 3)) & 0x8000020000000301) != 0)
    {
      __int32 v16 = 7;
      BOOL result = sub_1CC5CB59C(a1, &v16, 1uLL);
      if (!result) {
        return result;
      }
      uint64_t v6 = *(void *)(a1 - 32);
      if (v6 && !*(unsigned char *)(v6 + 16) && *(void *)(v6 + 24) == *(void *)(a1 + 72)) {
        return *(_DWORD *)(v6 + 36) != 7;
      }
      return 1;
    }
    if (v4 == 42)
    {
      int v5 = *(_DWORD *)(a1 + 20);
      if ((v5 & 0x80000000) == 0) {
        return 0;
      }
      uint64_t v7 = a1 - 32 * (v5 & 0x7FFFFFF);
      uint64_t v10 = *(void *)(v7 - 8);
      uint64_t v8 = v7 - 8;
      uint64_t v9 = v10;
      if (!v10) {
        return 0;
      }
      uint64_t v11 = -v9;
      while (1)
      {
        unsigned int v12 = *(_DWORD *)(*(void *)(v8 + v11) + 8);
        BOOL v13 = v12 > 7;
        int v14 = (1 << v12) & 0x83;
        if (v13 || v14 == 0) {
          break;
        }
        BOOL result = 0;
        v11 += 16;
        if (!v11) {
          return result;
        }
      }
      return 1;
    }
  }
  return result;
}

void sub_1CB8F8904(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  unint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  unsigned int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    int v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB8F89B8(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  unsigned int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB8F8A64()
{
  return "AGX1 post-RA peephole pass";
}

void sub_1CB8F8A74(uint64_t a1, uint64_t a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  v5[0] = &unk_1F2617E40;
  v5[1] = a2 + 112;
  atomic_ullong PassRegistry = llvm::PassRegistry::getPassRegistry(v3);
  llvm::PassRegistry::enumerateWith(PassRegistry, (uint64_t)v5);
}

uint64_t sub_1CB8F8AD0(void *a1, uint64_t a2)
{
  a1[31] = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 104))(*(void *)(a2 + 16));
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 176))(*(void *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  a1[32] = v4;
  a1[33] = v5;
  uint64_t v6 = (void *)(a2 + 320);
  uint64_t v7 = *(void **)(a2 + 328);
  if (v7 == (void *)(a2 + 320))
  {
    char v8 = 0;
  }
  else
  {
    char v8 = 0;
    do
    {
      if (((v7[12] - v7[11]) & 0x7FFFFFFF8) == 0)
      {
        uint64_t v10 = 0;
        unint64_t v11 = (unint64_t)(v7 + 6);
        while (1)
        {
          unsigned int v12 = v10;
          unint64_t v11 = *(void *)v11 & 0xFFFFFFFFFFFFFFF8;
          if (v7 + 6 == (void *)v11) {
            break;
          }
          int v13 = **(unsigned __int16 **)(v11 + 16);
          uint64_t v10 = (llvm::MachineInstr *)v11;
          if (v13 != 13424)
          {
            if ((v13 - 13427) > 1) {
              break;
            }
            if (!v12) {
              break;
            }
            int NumExplicitOperands = llvm::MachineInstr::getNumExplicitOperands(v11);
            uint64_t v15 = (NumExplicitOperands - 2);
            if (*(void *)(*(void *)(v11 + 32) + 32 * v15 + 16)) {
              break;
            }
            uint64_t v16 = 644448;
            if (v13 == 13427) {
              uint64_t v16 = 644400;
            }
            *(void *)(v11 + 16) = *(void *)(a1[31] + 8) + v16;
            llvm::MachineInstr::removeOperand((char *)v11, NumExplicitOperands - 1);
            llvm::MachineInstr::removeOperand((char *)v11, v15);
            llvm::MachineInstr::eraseFromParent(v12);
            char v9 = 1;
            goto LABEL_5;
          }
        }
      }
      char v9 = 0;
LABEL_5:
      v8 |= v9;
      uint64_t v7 = (void *)v7[1];
    }
    while (v7 != v6);
  }
  return v8 & 1;
}

void sub_1CB8F8C70(llvm::Pass *a1)
{
  *(void *)a1 = &unk_1F260E110;
  unint64_t v1 = (void *)*((void *)a1 + 22);
  if (v1 != (void *)((char *)a1 + 192))
  {
    uint64_t v4 = a1;
    free(v1);
    a1 = v4;
  }
  unsigned int v2 = (void *)*((void *)a1 + 13);
  if (v2 != (void *)((char *)a1 + 120))
  {
    uint64_t v5 = a1;
    free(v2);
    a1 = v5;
  }
  uint64_t v3 = (void *)*((void *)a1 + 4);
  if (v3 != (void *)((char *)a1 + 48))
  {
    uint64_t v6 = a1;
    free(v3);
    a1 = v6;
  }

  llvm::Pass::~Pass(a1);
}

void sub_1CB8F8D24(llvm::Pass *this)
{
  *(void *)this = &unk_1F260E110;
  unsigned int v2 = (char *)*((void *)this + 22);
  if (v2 != (char *)this + 192) {
    free(v2);
  }
  uint64_t v3 = (char *)*((void *)this + 13);
  if (v3 != (char *)this + 120) {
    free(v3);
  }
  uint64_t v4 = (char *)*((void *)this + 4);
  if (v4 != (char *)this + 48) {
    free(v4);
  }
  llvm::Pass::~Pass(this);

  JUMPOUT(0x1D25D9CE0);
}

const char *sub_1CB8F8DD0()
{
  return "AGX1 pseudo wait placement pass";
}

BOOL sub_1CB8F8DE0(uint64_t a1, int a2)
{
  return (*(void *)&a2 & 0x10120) != 0;
}

uint64_t sub_1CB8F8DF4(uint64_t result, int a2, uint64_t a3)
{
  if ((*(_DWORD *)(result + 64) & 0x3F) != 0)
  {
    uint64_t v10 = -1 << (*(_DWORD *)(result + 64) & 0x3F);
    uint64_t v3 = *(unsigned int *)(result + 8);
    uint64_t v11 = *(void *)result + 8 * v3;
    if (a3) {
      uint64_t v12 = *(void *)(v11 - 8) | v10;
    }
    else {
      uint64_t v12 = *(void *)(v11 - 8) & ~v10;
    }
    *(void *)(v11 - 8) = v12;
  }
  else
  {
    uint64_t v3 = *(unsigned int *)(result + 8);
  }
  unsigned int v4 = v3;
  *(_DWORD *)(result + 64) = a2;
  unsigned int v5 = a2 + 63;
  if (v3 != (a2 + 63) >> 6)
  {
    uint64_t v6 = v5 >> 6;
    if (v3 > v6)
    {
      *(_DWORD *)(result + 8) = v6;
      unsigned int v4 = v5 >> 6;
    }
    else
    {
      if (v6 > *(_DWORD *)(result + 12)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v6 != v3)
      {
        uint64_t v7 = (uint64_t *)(*(void *)result + 8 * v3);
        uint64_t v8 = v3 - v6;
        do
          *v7++ = a3 << 63 >> 63;
        while (!__CFADD__(v8++, 1));
      }
      unsigned int v4 = v5 >> 6;
      *(_DWORD *)(result + 8) = v6;
      a2 = *(_DWORD *)(result + 64);
    }
  }
  if ((a2 & 0x3F) != 0) {
    *(void *)(*(void *)result + 8 * v4 - 8) &= ~(-1 << (a2 & 0x3F));
  }
  return result;
}

uint64_t sub_1CB8F8F2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (void *)(a3 + 16);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = 0x600000000;
  unsigned int v7 = *(_DWORD *)(a1 + 288);
  uint64_t v8 = (const void **)(a1 + 280);
  if (v7) {
    BOOL v9 = v8 == (const void **)a3;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    if (v7 >= 7) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    memcpy(v6, *v8, 8 * *(unsigned int *)(a1 + 288));
    *(_DWORD *)(a3 + 8) = v7;
  }
  *(_DWORD *)(a3 + 64) = *(_DWORD *)(a1 + 344);
  uint64_t v10 = a2[5];
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a2[2] + 176))(a2[2]);
  uint64_t v12 = *(llvm::Module **)(*a2 + 40);
  sub_1CD1157F4(v12, 0, (uint64_t)&v151);
  int v13 = (int)v151;
  if (v151 >= 0xF8) {
    int v13 = 248;
  }
  if (v152) {
    int v14 = v13;
  }
  else {
    int v14 = 248;
  }
  uint64_t v151 = "agx.sample_rate";
  __int16 v153 = 259;
  uint64_t NamedMetadata = llvm::Module::getNamedMetadata(v12, &v151);
  uint64_t v16 = *a2;
  uint64_t v148 = v10;
  if (NamedMetadata)
  {
    if (((*(unsigned __int16 *)(v16 + 18) >> 4) & 0x3FFu) - 103 <= 1)
    {
      uint64_t v17 = ***(void ***)(NamedMetadata + 48);
      if (v17)
      {
        uint64_t v18 = *(unsigned int *)(v17 + 8);
        if (v18)
        {
          uint64_t v19 = *(void *)(v17 - 8 * v18);
          if (*(unsigned char *)v19 == 1)
          {
            uint64_t v20 = *(void *)(v19 + 128);
            if (*(unsigned char *)(v20 + 16) == 16)
            {
              unsigned int v21 = (void *)(v20 + 24);
              if (*(_DWORD *)(v20 + 32) >= 0x41u) {
                unsigned int v21 = (void *)*v21;
              }
              unsigned int v22 = *(_DWORD *)v21;
              int v23 = (**(uint64_t (***)(uint64_t, void, void, uint64_t, uint64_t))a2[43])(a2[43], 0, 0, 1, 1);
              int v14 = (v14 - v23) / v22 + v23;
              uint64_t v16 = *a2;
            }
          }
        }
      }
    }
  }
  unint64_t v149 = a2;
  uint64_t v150 = (uint64_t *)a3;
  int v24 = v14 - 1;
  int v147 = (*(unsigned __int16 *)(v16 + 18) >> 4) & 0x3FF;
  int v25 = (1 << ((*(unsigned __int16 *)(v16 + 18) >> 4) - 102)) & 0x31;
  if ((v147 - 102) > 5 || v25 == 0)
  {
    int v141 = v14;
    int v144 = v14 - 1;
    int v27 = a2 + 40;
    uint64_t v28 = (uint64_t *)v149[41];
    if (v28 == v149 + 40)
    {
      char v30 = 0;
      char v29 = 0;
    }
    else
    {
      char v29 = 0;
      char v30 = 0;
      while (1)
      {
        for (uint64_t i = v28[7]; (uint64_t *)i != v28 + 6; uint64_t i = *(void *)(i + 8))
        {
          int v32 = *(unsigned __int16 **)(i + 16);
          int v33 = *v32;
          if ((*((unsigned char *)v32 + 17) & 0x20) != 0 || sub_1CB84E50C(v33)) {
            char v29 = 1;
          }
          v30 |= (v33 & 0xFFFE) == 11972;
          if (v30 & 1) != 0 && (v29)
          {
            char v30 = 1;
            char v29 = 1;
            break;
          }
          if ((*(unsigned char *)i & 4) == 0)
          {
            while ((*(_WORD *)(i + 44) & 8) != 0)
              uint64_t i = *(void *)(i + 8);
          }
        }
        if (v30 & 1) != 0 && (v29) {
          break;
        }
        uint64_t v28 = (uint64_t *)v28[1];
        if (v28 == v27) {
          goto LABEL_47;
        }
      }
      char v30 = 1;
      char v29 = 1;
    }
LABEL_47:
    int v24 = v144;
    if (v30 & v29) {
      int v24 = v141 - 3;
    }
  }
  uint64_t v34 = *(void *)(a1 + 56);
  if (v34)
  {
    uint64_t v35 = *(void *)(a1 + 8);
    int v145 = v24;
    unsigned int v36 = v24 + 1283;
    int v37 = (unsigned __int16 *)(v34 + 2 * *(unsigned int *)(v35 + 24 * v36 + 8));
    uint64_t v38 = *v150;
    while (1)
    {
      unint64_t v39 = (unsigned __int16)v36;
      uint64_t v40 = (unsigned __int16)v36 >> 6;
      unint64_t v41 = *(void *)(v38 + 8 * v40);
      if ((v41 >> v36)) {
        goto LABEL_66;
      }
      char v42 = 0;
      char v43 = v36 & 0x3F;
      uint64_t v44 = *(uint64_t ***)(v11 + 240);
      unint64_t v45 = v39 >> 3;
      do
      {
        if (v39)
        {
          uint64_t v46 = **v44;
          if (v45 < *(unsigned __int16 *)(v46 + 22)
            && ((1 << (v39 & 7)) & *(unsigned __int8 *)(*(void *)(v46 + 8) + v45)) != 0
            && (!v42
             || *v44 != v42
             && ((*(_DWORD *)(v42[1] + ((*(unsigned __int16 *)(v46 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v46 + 24)) & 1) != 0))
          {
            char v42 = *v44;
          }
        }
        ++v44;
      }
      while (v44 != *(uint64_t ***)(v11 + 248));
      unsigned int v47 = *(unsigned __int16 *)(*(void *)*v42 + 2 * *(unsigned __int16 *)(*v42 + 20) - 2);
      unsigned int v48 = v47 + 1;
      if (v47 + 1 == v39) {
        goto LABEL_66;
      }
      uint64_t v49 = -1 << v43;
      if (v40 == v48 >> 6)
      {
        uint64_t v50 = (1 << v48) + v49;
      }
      else
      {
        *(void *)(v38 + 8 * v40) = v41 | v49;
        unsigned int v52 = (v39 + 63) & 0x1FFC0;
        if (v52 + 64 <= v48)
        {
          uint64_t v142 = v35;
          memset((void *)(v38 + (((v39 + 63) >> 3) & 0x3FF8)), 255, (((v47 - v52 - 63) >> 3) & 0x1FFFFFF8) + 8);
          uint64_t v35 = v142;
          unsigned int v52 = ((v47 - 63 - ((v39 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v39 + 63) & 0x1FFC0) + 64;
        }
        if (v52 > v47) {
          goto LABEL_66;
        }
        uint64_t v50 = ~(-1 << v48);
        uint64_t v40 = v52 >> 6;
        unint64_t v41 = *(void *)(v38 + 8 * v40);
      }
      *(void *)(v38 + 8 * v40) = v41 | v50;
LABEL_66:
      int v51 = *v37++;
      LOWORD(v36) = v51 + v39;
      if (!v51)
      {
        unsigned __int16 v53 = v145 + 1027;
        uint64_t v54 = (unsigned __int16 *)(v34 + 2 * *(unsigned int *)(v35 + 24 * (v145 + 1027) + 8));
        while (1)
        {
          unint64_t v55 = v53;
          uint64_t v56 = v53 >> 6;
          unint64_t v57 = *(void *)(v38 + 8 * v56);
          if ((v57 >> v53)) {
            goto LABEL_87;
          }
          uint64_t v58 = 0;
          char v59 = v53 & 0x3F;
          uint64_t v60 = *(uint64_t ***)(v11 + 240);
          unint64_t v61 = v55 >> 3;
          do
          {
            if (v55)
            {
              uint64_t v62 = **v60;
              if (v61 < *(unsigned __int16 *)(v62 + 22)
                && ((1 << (v55 & 7)) & *(unsigned __int8 *)(*(void *)(v62 + 8) + v61)) != 0
                && (!v58
                 || *v60 != v58
                 && ((*(_DWORD *)(v58[1] + ((*(unsigned __int16 *)(v62 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v62 + 24)) & 1) != 0))
              {
                uint64_t v58 = *v60;
              }
            }
            ++v60;
          }
          while (v60 != *(uint64_t ***)(v11 + 248));
          unsigned int v63 = *(unsigned __int16 *)(*(void *)*v58 + 2 * *(unsigned __int16 *)(*v58 + 20) - 2);
          unsigned int v64 = v63 + 1;
          if (v63 + 1 == v55) {
            goto LABEL_87;
          }
          uint64_t v65 = -1 << v59;
          if (v56 == v64 >> 6)
          {
            uint64_t v66 = (1 << v64) + v65;
          }
          else
          {
            *(void *)(v38 + 8 * v56) = v57 | v65;
            unsigned int v68 = (v55 + 63) & 0x1FFC0;
            if (v68 + 64 <= v64)
            {
              memset((void *)(v38 + (((v55 + 63) >> 3) & 0x3FF8)), 255, (((v63 - v68 - 63) >> 3) & 0x1FFFFFF8) + 8);
              unsigned int v68 = ((v63 - 63 - ((v55 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v55 + 63) & 0x1FFC0) + 64;
            }
            if (v68 > v63) {
              goto LABEL_87;
            }
            uint64_t v66 = ~(-1 << v64);
            uint64_t v56 = v68 >> 6;
            unint64_t v57 = *(void *)(v38 + 8 * v56);
          }
          *(void *)(v38 + 8 * v56) = v57 | v66;
LABEL_87:
          int v67 = *v54++;
          unsigned __int16 v53 = v67 + v55;
          if (!v67) {
            goto LABEL_93;
          }
        }
      }
    }
  }
LABEL_93:
  int v69 = v149;
  uint64_t result = v149[6];
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v149[1] + 216))(v149[1], v149 + 16, v149);
    v149[6] = result;
    uint64_t v34 = *(void *)(a1 + 56);
  }
  if (v34)
  {
    int v71 = (*(_DWORD *)(result + 16) + 7) & 0x7FFFFFF8;
    uint64_t v72 = *(void *)(a1 + 8);
    unsigned __int16 v73 = v71 + 1795;
    uint64_t v74 = (unsigned __int16 *)(v34 + 2 * *(unsigned int *)(v72 + 24 * (v71 + 1795) + 8));
    uint64_t v75 = *v150;
    while (1)
    {
      unint64_t v76 = v73;
      uint64_t v77 = v73 >> 6;
      unint64_t v78 = *(void *)(v75 + 8 * v77);
      if ((v78 >> v73)) {
        goto LABEL_112;
      }
      BOOL v79 = 0;
      char v80 = v73 & 0x3F;
      unsigned int v81 = *(uint64_t ***)(v11 + 240);
      unint64_t v82 = v76 >> 3;
      do
      {
        if (v76)
        {
          uint64_t v83 = **v81;
          uint64_t result = *(unsigned __int16 *)(v83 + 22);
          if (v82 < result)
          {
            uint64_t result = *(unsigned __int8 *)(*(void *)(v83 + 8) + v82);
            if (((1 << (v76 & 7)) & result) != 0)
            {
              if (!v79
                || *v81 != v79
                && (unsigned int v84 = *(unsigned __int16 *)(v83 + 24),
                    uint64_t result = *(unsigned int *)(v79[1] + ((v84 >> 3) & 0x1FFCLL)),
                    ((result >> v84) & 1) != 0))
              {
                BOOL v79 = *v81;
              }
            }
          }
        }
        ++v81;
      }
      while (v81 != *(uint64_t ***)(v11 + 248));
      unsigned int v85 = *(unsigned __int16 *)(*(void *)*v79 + 2 * *(unsigned __int16 *)(*v79 + 20) - 2);
      unsigned int v86 = v85 + 1;
      if (v85 + 1 == v76) {
        goto LABEL_112;
      }
      uint64_t v87 = -1 << v80;
      if (v77 == v86 >> 6)
      {
        uint64_t v88 = (1 << v86) + v87;
      }
      else
      {
        *(void *)(v75 + 8 * v77) = v78 | v87;
        unsigned int v90 = (v76 + 63) & 0x1FFC0;
        if (v90 + 64 <= v86)
        {
          uint64_t v146 = v72;
          int v143 = v71;
          uint64_t result = (uint64_t)memset((void *)(v75 + (((v76 + 63) >> 3) & 0x3FF8)), 255, (((v85 - v90 - 63) >> 3) & 0x1FFFFFF8) + 8);
          int v71 = v143;
          uint64_t v72 = v146;
          unsigned int v90 = ((v85 - 63 - ((v76 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v76 + 63) & 0x1FFC0) + 64;
        }
        if (v90 > v85) {
          goto LABEL_112;
        }
        uint64_t v88 = ~(-1 << v86);
        uint64_t v77 = v90 >> 6;
        unint64_t v78 = *(void *)(v75 + 8 * v77);
      }
      *(void *)(v75 + 8 * v77) = v78 | v88;
LABEL_112:
      int v89 = *v74++;
      unsigned __int16 v73 = v89 + v76;
      if (!v89)
      {
        unsigned __int16 v91 = v71 + 1539;
        unsigned int v92 = (unsigned __int16 *)(v34 + 2 * *(unsigned int *)(v72 + 24 * (v71 + 1539) + 8));
        int v69 = v149;
        while (1)
        {
          unint64_t v93 = v91;
          uint64_t v94 = v91 >> 6;
          unint64_t v95 = *(void *)(v75 + 8 * v94);
          if ((v95 >> v91)) {
            goto LABEL_133;
          }
          uint64_t v96 = 0;
          char v97 = v91 & 0x3F;
          uint64_t v98 = *(uint64_t ***)(v11 + 240);
          unint64_t v99 = v93 >> 3;
          do
          {
            if (v93)
            {
              uint64_t v100 = **v98;
              uint64_t result = *(unsigned __int16 *)(v100 + 22);
              if (v99 < result)
              {
                uint64_t result = *(unsigned __int8 *)(*(void *)(v100 + 8) + v99);
                if (((1 << (v93 & 7)) & result) != 0)
                {
                  if (!v96
                    || *v98 != v96
                    && (unsigned int v101 = *(unsigned __int16 *)(v100 + 24),
                        uint64_t result = *(unsigned int *)(v96[1] + ((v101 >> 3) & 0x1FFCLL)),
                        ((result >> v101) & 1) != 0))
                  {
                    uint64_t v96 = *v98;
                  }
                }
              }
            }
            ++v98;
          }
          while (v98 != *(uint64_t ***)(v11 + 248));
          unsigned int v102 = *(unsigned __int16 *)(*(void *)*v96 + 2 * *(unsigned __int16 *)(*v96 + 20) - 2);
          unsigned int v103 = v102 + 1;
          if (v102 + 1 == v93) {
            goto LABEL_133;
          }
          uint64_t v104 = -1 << v97;
          if (v94 == v103 >> 6)
          {
            uint64_t v105 = (1 << v103) + v104;
          }
          else
          {
            *(void *)(v75 + 8 * v94) = v95 | v104;
            unsigned int v107 = (v93 + 63) & 0x1FFC0;
            if (v107 + 64 <= v103)
            {
              uint64_t result = (uint64_t)memset((void *)(v75 + (((v93 + 63) >> 3) & 0x3FF8)), 255, (((v102 - v107 - 63) >> 3) & 0x1FFFFFF8) + 8);
              int v69 = v149;
              unsigned int v107 = ((v102 - 63 - ((v93 + 63) & 0x1FFC0)) & 0xFFFFFFC0) + ((v93 + 63) & 0x1FFC0) + 64;
            }
            if (v107 > v102) {
              goto LABEL_133;
            }
            uint64_t v105 = ~(-1 << v103);
            uint64_t v94 = v107 >> 6;
            unint64_t v95 = *(void *)(v75 + 8 * v94);
          }
          *(void *)(v75 + 8 * v94) = v95 | v105;
LABEL_133:
          int v106 = *v92++;
          unsigned __int16 v91 = v106 + v93;
          if (!v106) {
            goto LABEL_139;
          }
        }
      }
    }
  }
LABEL_139:
  unint64_t v108 = *(int **)(v148 + 456);
  int v109 = *(int **)(v148 + 464);
  if (v108 == v109)
  {
    int8x8_t v110 = 0;
  }
  else
  {
    int8x8_t v110 = 0;
    do
    {
      int v111 = *v108;
      unsigned int v112 = *v108 - 1283;
      if (v112 > 0xFF && (unsigned int v112 = v111 - 1027, (v111 - 1027) > 0xFF))
      {
        unsigned int v113 = v111 - 3;
        unsigned int v114 = v111 - 9299;
        unsigned int v115 = (v111 - 9299) >> 2;
        unsigned int v116 = v111 - 9298;
        uint64_t result = v116 >> 2;
        BOOL v9 = v115 == v116 >> 2;
        uint64_t v117 = (1 << v115) | *(void *)&v110 | (1 << result);
        if (v9) {
          uint64_t v117 = (1 << v115) | *(void *)&v110;
        }
        if (v114 > 0xFE) {
          uint64_t v117 = (uint64_t)v110;
        }
        if (v113 <= 0xFF) {
          *(void *)&v110 |= 1 << (v113 >> 2);
        }
        else {
          int8x8_t v110 = (int8x8_t)v117;
        }
      }
      else
      {
        *(void *)&v110 |= 1 << (v112 >> 2);
      }
      v108 += 2;
    }
    while (v108 != v109);
  }
  if ((v147 - 103) < 2)
  {
    uint64_t result = (**(uint64_t (***)(uint64_t, void, void, uint64_t, uint64_t))v69[43])(v69[43], 0, 0, 1, 1);
    if (result)
    {
      if ((result - 257) < 0xFFFFFF00) {
        abort();
      }
      int v118 = (result + 1) & 0xFFFFFFFE;
      uint32x2_t v119 = (uint32x2_t)vdup_n_s32((int)result - 1);
      int8x16_t v120 = (int8x16_t)(unint64_t)v110;
      int32x2_t v121 = (int32x2_t)0x100000000;
      uint64x2_t v122 = (uint64x2_t)vdupq_n_s64(1uLL);
      do
      {
        int8x16_t v123 = v120;
        uint32x2_t v124 = (uint32x2_t)v121;
        uint32x2_t v125 = vshr_n_u32((uint32x2_t)v121, 2uLL);
        v126.i64[0] = v125.u32[0];
        v126.i64[1] = v125.u32[1];
        int8x16_t v120 = vorrq_s8((int8x16_t)vshlq_u64(v122, v126), v123);
        int32x2_t v121 = vadd_s32(v121, (int32x2_t)0x200000002);
        v118 -= 2;
      }
      while (v118);
      uint32x2_t v127 = vcgt_u32(v124, v119);
      v128.i64[0] = v127.i32[0];
      v128.i64[1] = v127.i32[1];
      int8x16_t v129 = vbslq_s8(v128, v123, v120);
      int8x8_t v110 = vorr_s8(*(int8x8_t *)v129.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v129, v129, 8uLL));
    }
  }
  for (uint64_t j = 0; j != 64; ++j)
  {
    if ((*(void *)&v110 >> j))
    {
      uint64_t v131 = 0;
      uint64_t v132 = 4 * j;
      uint64_t v133 = *(void *)(a1 + 56);
      uint64_t v134 = *(void *)(a1 + 8);
      uint64_t v135 = *v150;
      do
      {
        if (v133)
        {
          uint64_t v136 = (unsigned __int16 *)(v133 + 2 * *(unsigned int *)(v134 + 24 * (v131 + v132) + 30800));
          int v137 = v131 + v132 + 1283;
          do
          {
            *(void *)(v135 + 8 * ((unsigned __int16)v137 >> 6)) |= 1 << v137;
            int v138 = *v136++;
            v137 += v138;
          }
          while (v138);
          unsigned int v139 = (unsigned __int16 *)(v133 + 2 * *(unsigned int *)(v134 + 24 * (v131 + v132) + 24656));
          LODWORD(result) = v131 + v132 + 1027;
          do
          {
            *(void *)(v135 + 8 * ((unsigned __int16)result >> 6)) |= 1 << result;
            int v140 = *v139++;
            uint64_t result = (v140 + result);
          }
          while (v140);
        }
        ++v131;
      }
      while (v131 != 4);
    }
  }
  return result;
}

BOOL sub_1CB8F9CA0(uint64_t a1, int a2)
{
  unsigned int v2 = *(unsigned __int16 **)(a1 + 16);
  if (*v2 - 1 <= 1 && (*(unsigned char *)(*(void *)(a1 + 32) + 48) & 0x10) != 0) {
    return 1;
  }
  if (a2)
  {
    if ((*(_WORD *)(a1 + 44) & 0xC) != 0 && (*(_WORD *)(a1 + 44) & 4) == 0) {
      return llvm::MachineInstr::hasPropertyInBundle(a1, 0x100000, a2);
    }
  }
  return (*((unsigned __int8 *)v2 + 10) >> 4) & 1;
}

uint64_t sub_1CB8F9CFC(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9 = (void *)a7;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  v243[8] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  llvm::TargetRegisterInfo::getRegAllocationHints(a1, a2, a3, a4, a5, a6, a7);
  if (!v9 || !a8) {
    return 0;
  }
  uint64_t v16 = v9[31];
  uint64_t v233 = v9[33];
  uint64_t v17 = (*(uint64_t (**)(void, void))(**(void **)(a6 + 8) + 16))(*(void *)(a6 + 8), *(void *)a6);
  uint64_t v236 = 1;
  *(void *)&long long v18 = -1;
  *((void *)&v18 + 1) = -1;
  long long v237 = v18;
  long long v238 = v18;
  long long v239 = v18;
  long long v240 = v18;
  int v241 = v243;
  uint64_t v242 = 0x1000000000;
  uint64_t v19 = v9[31];
  uint64_t v20 = (void *)v9[33];
  uint64_t v226 = a1;
  if (*(unsigned char *)(v17 + 281))
  {
    uint64_t v221 = a8;
    if ((v13 & 0x80000000) != 0) {
      unsigned int v21 = (uint64_t *)(*(void *)(v19 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
    }
    else {
      unsigned int v21 = (uint64_t *)(*(void *)(v19 + 272) + 8 * v15);
    }
    uint64_t v22 = *v21;
    if (!*v21)
    {
LABEL_70:
      a8 = v221;
      goto LABEL_71;
    }
    while ((*(_DWORD *)v22 & 0x80000000) != 0)
    {
      uint64_t v22 = *(void *)(v22 + 24);
      if (!v22) {
        goto LABEL_70;
      }
    }
    uint64_t v222 = v11;
    uint64_t v220 = v16;
LABEL_12:
    for (unint64_t i = *(void *)(v22 + 8); (*(_WORD *)(i + 44) & 4) != 0; unint64_t i = *(void *)i & 0xFFFFFFFFFFFFFFF8)
      ;
    int v24 = *(unsigned __int16 **)(i + 16);
    int v25 = *v24;
    BOOL v27 = (v25 - 9) <= 0x3C && ((1 << (v25 - 9)) & 0x1000000000000605) != 0
       || v25 == 0;
    if (v27
      || (uint64_t v28 = *((void *)v24 + 2), *((void *)v24 + 1) & 0x10 | v28 & 0x21)
      || (v230 = *(void *)(i + 24), v227 = v20, v29 = sub_1CB8FB7C4(i), uint64_t v20 = v227, v30 = v29, (v29 & 1) == 0)
      && (v28 & 0x200) != 0)
    {
LABEL_25:
      uint64_t v11 = v222;
      uint64_t v16 = v220;
      while (1)
      {
        uint64_t v22 = *(void *)(v22 + 24);
        if (!v22) {
          break;
        }
        if ((*(_DWORD *)v22 & 0x80000000) == 0) {
          goto LABEL_12;
        }
      }
      uint64_t v19 = v9[31];
      uint64_t v20 = (void *)v9[33];
      goto LABEL_70;
    }
    int v31 = 0;
    uint64_t v32 = v230 + 48;
    int v224 = v29;
    while (1)
    {
      if (v30)
      {
        if ((*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            unint64_t i = *(void *)(i + 8);
        }
        unint64_t i = *(void *)(i + 8);
        if (i == v32) {
          goto LABEL_25;
        }
      }
      else
      {
        if (i == *(void *)(v230 + 56)) {
          goto LABEL_25;
        }
        unint64_t i = *(void *)i & 0xFFFFFFFFFFFFFFF8;
        if (!i || (*(unsigned char *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 4) != 0)
            unint64_t i = *(void *)i & 0xFFFFFFFFFFFFFFF8;
        }
      }
      int v33 = *(unsigned __int16 **)(i + 16);
      int v34 = *v33;
      if ((v34 - 9) <= 0x3C && ((1 << (v34 - 9)) & 0x1000000000000605) != 0
        || v34 == 0)
      {
        goto LABEL_25;
      }
      if ((v33[4] & 0x10) != 0) {
        goto LABEL_25;
      }
      uint64_t v37 = *((void *)v33 + 2);
      if (v37) {
        goto LABEL_25;
      }
      uint64_t v38 = v13;
      if (*(_DWORD *)(i + 40))
      {
        unint64_t v39 = *(unsigned int **)(i + 32);
        unsigned int v40 = *v39;
        if ((*v39 & 0x10000FF) == 0x1000000)
        {
          int v41 = sub_1CB8FB7C4(i);
          uint64_t v32 = v230 + 48;
          int v30 = v224;
          uint64_t v20 = v227;
          if ((v37 & 0x20) == 0 && v224 != v41 && ((v41 ^ 1) & (v37 >> 9) & 1) == 0)
          {
            unsigned __int32 v42 = v39[1];
            if ((v42 & 0x80000000) == 0) {
              goto LABEL_57;
            }
            unsigned __int32 v42 = *(_DWORD *)(v9[35] + 4 * (v42 & 0x7FFFFFFF));
            if (v42)
            {
              int v43 = (v40 >> 8) & 0xFFF;
              if (!v43) {
                goto LABEL_57;
              }
              uint64_t v44 = v227[1];
              uint64_t v45 = v227[7];
              uint64_t v46 = *(unsigned int *)(v44 + 24 * v42 + 4);
              if (*(_WORD *)(v45 + 2 * v46)) {
                break;
              }
            }
          }
        }
      }
LABEL_65:
      ++v31;
      uint64_t v13 = v38;
      if (v31 == 16) {
        goto LABEL_25;
      }
    }
    unsigned __int16 v47 = *(_WORD *)(v45 + 2 * v46) + v42;
    unsigned int v48 = (unsigned __int16 *)(v227[11] + 2 * *(unsigned int *)(v44 + 24 * v42 + 12));
    uint64_t v49 = (unsigned __int16 *)(v45 + 2 * v46 + 2);
    while (v43 != *v48)
    {
      int v50 = *v49++;
      v47 += v50;
      ++v48;
      if (!v50) {
        goto LABEL_65;
      }
    }
    unsigned __int32 v42 = v47;
LABEL_57:
    if (v42 - 1 <= 0x3FFFFFFE)
    {
      v234.i32[0] = v42;
      sub_1CB8FB8C0((uint64_t)&v236, &v234);
      uint64_t v32 = v230 + 48;
      int v30 = v224;
      uint64_t v20 = v227;
    }
    goto LABEL_65;
  }
LABEL_71:
  uint32x4_t v234 = 0u;
  uint32x4_t v235 = 0u;
  if ((v13 & 0x80000000) != 0) {
    int v51 = (int **)(*(void *)(v19 + 24) + 16 * (v13 & 0x7FFFFFFF) + 8);
  }
  else {
    int v51 = (int **)(*(void *)(v19 + 272) + 8 * v15);
  }
  unsigned int v52 = *v51;
  if (*v51)
  {
    while (1)
    {
      unsigned int v53 = *v52;
      if ((*v52 & 0x80000000) == 0) {
        break;
      }
      unsigned int v52 = (int *)*((void *)v52 + 3);
      if (!v52) {
        goto LABEL_77;
      }
    }
LABEL_150:
    unsigned int v96 = (v53 >> 8) & 0xFFF;
    if (v96)
    {
      if (v96 - 33 > 0xF)
      {
        if (v96 > 0x10)
        {
          uint64_t v98 = v20;
          uint64_t v232 = v9;
          uint64_t v99 = v13;
          uint64_t v100 = a8;
          uint64_t v101 = v11;
          uint64_t v102 = v16;
          uint64_t v103 = v19;
          __int16 v104 = (*(uint64_t (**)(void *))(*v20 + 208))(v20);
          uint64_t v19 = v103;
          uint64_t v16 = v102;
          uint64_t v11 = v101;
          a8 = v100;
          uint64_t v13 = v99;
          BOOL v9 = v232;
          uint64_t v20 = v98;
          __int16 v97 = v104 - 1;
        }
        else
        {
          __int16 v97 = v96 - 1;
        }
      }
      else
      {
        __int16 v97 = 2 * v96 - 66;
      }
    }
    else
    {
      __int16 v97 = 0;
    }
    for (unint64_t j = *((void *)v52 + 1); ; unint64_t j = *(void *)j & 0xFFFFFFFFFFFFFFF8)
    {
      __int16 v106 = *(_WORD *)(j + 44);
      if ((v106 & 4) == 0) {
        break;
      }
    }
    if ((*(unsigned char *)(*(void *)(j + 16) + 16) & 1) == 0) {
      goto LABEL_161;
    }
    if ((*((unsigned char *)v52 + 3) & 1) == 0)
    {
      uint64_t v107 = *(void *)(*(void *)(j + 24) + 56);
      if (v107 == j) {
        goto LABEL_200;
      }
      unint64_t v108 = *(void *)j & 0xFFFFFFFFFFFFFFF8;
      if (!v108 || (*(unsigned char *)v108 & 4) == 0)
      {
        while ((*(_WORD *)(v108 + 44) & 4) != 0)
          unint64_t v108 = *(void *)v108 & 0xFFFFFFFFFFFFFFF8;
      }
      if (v108 == v107 || (*(unsigned char *)(*(void *)(v108 + 16) + 16) & 1) == 0) {
        goto LABEL_200;
      }
      unint64_t v109 = *(void *)v108 & 0xFFFFFFFFFFFFFFF8;
      if (!v109 || (*(unsigned char *)v109 & 4) == 0)
      {
        while ((*(_WORD *)(v109 + 44) & 4) != 0)
          unint64_t v109 = *(void *)v109 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((*(unsigned char *)(*(void *)(v109 + 16) + 16) & 1) == 0) {
        goto LABEL_200;
      }
      int8x8_t v110 = *(unsigned int **)(v109 + 32);
      unsigned int v111 = *v110;
      if ((*v110 & 0x10000FF) != 0x1000000) {
        goto LABEL_200;
      }
      uint64_t v112 = v110[1];
      if (v112 == v13) {
        goto LABEL_200;
      }
      unsigned int v113 = (void *)v9[33];
      unsigned int v114 = v112;
      if ((v112 & 0x80000000) != 0)
      {
        unsigned int v114 = *(_DWORD *)(v9[35] + 4 * (v112 & 0x7FFFFFFF));
        if (!v114) {
          goto LABEL_200;
        }
        int v178 = (v111 >> 8) & 0xFFF;
        if (v178)
        {
          uint64_t v179 = v113[1];
          uint64_t v180 = v113[7];
          uint64_t v181 = *(unsigned int *)(v179 + 24 * v114 + 4);
          if (!*(_WORD *)(v180 + 2 * v181)) {
            goto LABEL_200;
          }
          unsigned __int16 v182 = *(_WORD *)(v180 + 2 * v181) + v114;
          unsigned int v183 = (unsigned __int16 *)(v113[11] + 2 * *(unsigned int *)(v179 + 24 * v114 + 12));
          uint64_t v184 = (unsigned __int16 *)(v180 + 2 * v181 + 2);
          while (v178 != *v183)
          {
            int v185 = *v184++;
            v182 += v185;
            ++v183;
            if (!v185) {
              goto LABEL_200;
            }
          }
          unsigned int v114 = v182;
        }
      }
      if (v114 - 0x40000000 < 0xC0000001 || v114 - 259 < 0x200) {
        goto LABEL_200;
      }
      uint64_t v115 = v9[31];
      unsigned int v116 = (int **)((v112 & 0x80000000) != 0
                    ? *(void *)(v115 + 24) + 16 * (v112 & 0x7FFFFFFF) + 8
                    : *(void *)(v115 + 272) + 8 * v112);
      uint64_t v186 = *v116;
      if (!v186) {
        goto LABEL_200;
      }
      while (1)
      {
        int v187 = *v186;
        if ((*v186 & 0x80000000) == 0) {
          break;
        }
        uint64_t v186 = (int *)*((void *)v186 + 3);
        if (!v186) {
          goto LABEL_200;
        }
      }
LABEL_322:
      uint64_t v188 = *((void *)v186 + 1);
      if ((*(_WORD *)(v188 + 44) & 4) != 0)
      {
        unint64_t v189 = *((void *)v186 + 1);
        do
          unint64_t v189 = *(void *)v189 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v189 + 44) & 4) != 0);
      }
      else
      {
        unint64_t v189 = *((void *)v186 + 1);
      }
      if ((*(unsigned char *)(*(void *)(v189 + 16) + 16) & 1) == 0)
      {
LABEL_320:
        while (1)
        {
          uint64_t v186 = (int *)*((void *)v186 + 3);
          if (!v186) {
            goto LABEL_200;
          }
          int v187 = *v186;
          if ((*v186 & 0x80000000) == 0) {
            goto LABEL_322;
          }
        }
      }
      if ((v187 & 0x1000000) != 0)
      {
        if (v109 == v189) {
          goto LABEL_320;
        }
      }
      else if (v188 == v108 || v188 == j)
      {
        goto LABEL_320;
      }
      unint64_t v191 = (unint64_t)v114 >> 3;
      if (v114 > 0x807)
      {
        if (v114 >> 7 > 0x92) {
          goto LABEL_200;
        }
        unint64_t v191 = v191;
        int v192 = 1 << (v114 & 7);
      }
      else
      {
        int v192 = 1 << (v114 & 7);
        if ((v192 & byte_1CDD6A15E[v191]) != 0)
        {
          __int16 v193 = *(_WORD *)(v113[14] + 2 * v114);
LABEL_384:
          char v219 = v193 - v97;
LABEL_385:
          ++v234.i32[v219 & 7];
          goto LABEL_200;
        }
        if (v114 <= 0x407 && (v192 & byte_1CDD6BEEA[v191]) != 0)
        {
          int v194 = v111 & 0xFFF00;
          if (v194 == 512)
          {
            __int16 v195 = *(_WORD *)(v113[14] + 2 * v114) - v97;
LABEL_388:
            char v219 = v195 + 1;
            goto LABEL_385;
          }
          __int16 v195 = *(_WORD *)(v113[14] + 2 * v114) - v97;
          ++v234.i32[v195 & 7];
          if (v194 != 256) {
            goto LABEL_388;
          }
LABEL_200:
          unint64_t v120 = j;
          if ((*(_WORD *)(j + 44) & 4) != 0)
          {
            unint64_t v120 = j;
            do
              unint64_t v120 = *(void *)v120 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v120 + 44) & 4) != 0);
          }
          uint64_t v121 = *(void *)(j + 24);
          uint64_t v122 = v121 + 48;
          int8x16_t v123 = *(_DWORD **)(v120 + 32);
          uint64_t v124 = *(unsigned int *)(v120 + 40);
          uint32x2_t v125 = &v123[8 * v124];
          if (!v124)
          {
            unint64_t v175 = *(void *)(v120 + 8);
            if (v175 == v122)
            {
              unint64_t v120 = v121 + 48;
              goto LABEL_202;
            }
            unint64_t v120 = v121 + 48;
            if ((*(_WORD *)(v175 + 44) & 4) == 0) {
              goto LABEL_202;
            }
            while (1)
            {
              unint64_t v176 = v175;
              uint64_t v177 = *(unsigned int *)(v175 + 40);
              if (v177) {
                break;
              }
              unint64_t v175 = *(void *)(v175 + 8);
              if (v175 == v122 || (*(_WORD *)(v175 + 44) & 4) == 0)
              {
                unint64_t v120 = v121 + 48;
LABEL_394:
                int8x16_t v123 = *(_DWORD **)(v176 + 32);
                uint32x2_t v125 = &v123[8 * v177];
                goto LABEL_202;
              }
            }
            unint64_t v120 = v175;
            goto LABEL_394;
          }
          while (1)
          {
LABEL_202:
            if (v123 == v125) {
              goto LABEL_161;
            }
            if ((*v123 & 0x10000FF) != 0) {
              goto LABEL_288;
            }
            int v126 = v123[1];
            if (v126 == v13) {
              goto LABEL_288;
            }
            unsigned int v127 = v123[1];
            if (v126 < 0)
            {
              unsigned int v127 = *(_DWORD *)(v9[35] + 4 * (v126 & 0x7FFFFFFF));
              if (!v127) {
                goto LABEL_288;
              }
              int v138 = (*v123 >> 8) & 0xFFF;
              if (v138)
              {
                uint64_t v139 = v20[1];
                uint64_t v140 = v20[7];
                uint64_t v141 = *(unsigned int *)(v139 + 24 * v127 + 4);
                if (!*(_WORD *)(v140 + 2 * v141)) {
                  goto LABEL_288;
                }
                unsigned __int16 v142 = *(_WORD *)(v140 + 2 * v141) + v127;
                int v143 = (unsigned __int16 *)(v20[11] + 2 * *(unsigned int *)(v139 + 24 * v127 + 12));
                int v144 = (unsigned __int16 *)(v140 + 2 * v141 + 2);
                while (v138 != *v143)
                {
                  int v145 = *v144++;
                  v142 += v145;
                  ++v143;
                  if (!v145) {
                    goto LABEL_288;
                  }
                }
                unsigned int v127 = v142;
              }
            }
            if (v127 - 1 > 0x3FFFFFFE) {
              goto LABEL_288;
            }
            char v128 = 0;
            char v129 = 0;
            unint64_t v130 = j;
            do
            {
              if (v130 == *(void *)(v121 + 56)) {
                break;
              }
              char v131 = v129;
              unint64_t v130 = *(void *)v130 & 0xFFFFFFFFFFFFFFF8;
              if (!v130 || (*(unsigned char *)v130 & 4) == 0)
              {
                while ((*(_WORD *)(v130 + 44) & 4) != 0)
                  unint64_t v130 = *(void *)v130 & 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v132 = *(void *)(v130 + 16);
              if ((*(unsigned char *)(v132 + 16) & 1) == 0) {
                break;
              }
              uint64_t v133 = *(unsigned __int8 *)(v132 + 4);
              if (v133)
              {
                uint64_t v134 = (_DWORD *)(*(void *)(v130 + 32) + 4);
                while ((*(v134 - 1) & 0x30000FF) != 0x1000000 || *v134 != v126)
                {
                  v134 += 8;
                  if (!--v133) {
                    goto LABEL_222;
                  }
                }
                char v128 = 1;
              }
LABEL_222:
              char v129 = 1;
            }
            while ((v131 & 1) == 0);
            if (v127 - 259 < 0x200 || (v128 & 1) != 0) {
              goto LABEL_288;
            }
            unint64_t v135 = (unint64_t)v127 >> 3;
            if (v127 > 0x807)
            {
              if (v127 >> 7 > 0x92) {
                goto LABEL_288;
              }
              unint64_t v135 = v135;
              int v136 = 1 << (v127 & 7);
            }
            else
            {
              int v136 = 1 << (v127 & 7);
              if ((v136 & byte_1CDD6A15E[v135]) != 0)
              {
                __int16 v137 = *(_WORD *)(v20[14] + 2 * v127);
                goto LABEL_286;
              }
              if (v127 <= 0x407 && (v136 & byte_1CDD6BEEA[v135]) != 0)
              {
                __int16 v146 = *(_WORD *)(v20[14] + 2 * v127) - v97;
                if ((*v52 & 0xFFF00) == 0x200 || (++v234.i32[v146 & 7], (*v52 & 0xFFF00) != 0x100))
                {
                  char v147 = v146 + 1;
                  goto LABEL_287;
                }
                goto LABEL_288;
              }
            }
            if ((v136 & byte_1CDD76C32[v135]) != 0)
            {
              uint64_t v148 = v20[1];
              uint64_t v149 = v20[7];
              uint64_t v150 = *(unsigned int *)(v148 + 24 * v127 + 4);
              if (*(_WORD *)(v149 + 2 * v150))
              {
                unsigned __int16 v151 = *(_WORD *)(v149 + 2 * v150) + v127;
                char v152 = (_WORD *)(v20[11] + 2 * *(unsigned int *)(v148 + 24 * v127 + 12));
                __int16 v153 = (unsigned __int16 *)(v149 + 2 * v150 + 2);
                uint64_t v154 = v153;
                int v155 = v152;
                unsigned __int16 v156 = v151;
                while (*v155 != 34)
                {
                  int v157 = *v154++;
                  v156 += v157;
                  ++v155;
                  if (!v157)
                  {
                    unsigned int v158 = 0;
                    goto LABEL_250;
                  }
                }
                unsigned int v158 = v156;
LABEL_250:
                while (*v152 != 33)
                {
                  int v159 = *v153++;
                  v151 += v159;
                  ++v152;
                  if (!v159) {
                    goto LABEL_298;
                  }
                }
                unsigned int v160 = v151;
              }
              else
              {
                unsigned int v158 = 0;
LABEL_298:
                unsigned int v160 = 0;
              }
              int v161 = (*v52 >> 8) & 0xFFF;
              BOOL v163 = v161 == 1 || v161 == 33;
              if ((((((*v52 >> 8) & 0xFFF) != 0) ^ v163) & 1) == 0) {
                ++v234.i32[(*(_WORD *)(v20[14] + 2 * v160) - (_BYTE)v97 + 1) & 7];
              }
              BOOL v165 = v161 == 2 || v161 == 33;
              if ((((v161 != 0) ^ v165) & 1) == 0)
              {
                int v166 = (*(_WORD *)(v20[14] + 2 * v160) - (_BYTE)v97) & 7;
                ++v234.i32[v166];
              }
              BOOL v168 = v161 == 3 || v161 == 34;
              if ((((v161 != 0) ^ v168) & 1) == 0) {
                ++v234.i32[(*(_WORD *)(v20[14] + 2 * v158) - (_BYTE)v97 + 1) & 7];
              }
              BOOL v169 = v161 != 0;
              BOOL v170 = v161 == 4 || v161 == 34;
              BOOL v171 = v170;
              if (((v169 ^ v171) & 1) == 0)
              {
                __int16 v137 = *(_WORD *)(v20[14] + 2 * v158);
LABEL_286:
                char v147 = v137 - v97;
LABEL_287:
                ++v234.i32[v147 & 7];
              }
            }
LABEL_288:
            v123 += 8;
            if (v123 == v125)
            {
              unint64_t v172 = *(void *)(v120 + 8);
              if (v172 == v122) {
                goto LABEL_161;
              }
              int8x16_t v123 = v125;
              unint64_t v120 = v121 + 48;
              if ((*(_WORD *)(v172 + 44) & 4) != 0)
              {
                while (1)
                {
                  unint64_t v173 = v172;
                  uint64_t v174 = *(unsigned int *)(v172 + 40);
                  if (v174) {
                    break;
                  }
                  unint64_t v172 = *(void *)(v172 + 8);
                  if (v172 == v122 || (*(_WORD *)(v172 + 44) & 4) == 0)
                  {
                    unint64_t v120 = v121 + 48;
                    goto LABEL_296;
                  }
                }
                unint64_t v120 = v172;
LABEL_296:
                int8x16_t v123 = *(_DWORD **)(v173 + 32);
                uint32x2_t v125 = &v123[8 * v174];
              }
            }
          }
        }
      }
      if ((v192 & byte_1CDD76C32[v191]) == 0) {
        goto LABEL_200;
      }
      uint64_t v196 = v113[1];
      uint64_t v197 = v113[7];
      uint64_t v198 = *(unsigned int *)(v196 + 24 * v114 + 4);
      unsigned int v199 = *(unsigned __int16 *)(v197 + 2 * v198);
      if (*(_WORD *)(v197 + 2 * v198))
      {
        LOWORD(v199) = v199 + v114;
        uint64_t v200 = (_WORD *)(v113[11] + 2 * *(unsigned int *)(v196 + 24 * v114 + 12));
        uint64_t v201 = (unsigned __int16 *)(v197 + 2 * v198 + 2);
        uint64_t v202 = v201;
        __int16 v203 = v200;
        unsigned __int16 v204 = v199;
        while (*v203 != 34)
        {
          int v205 = *v202++;
          v204 += v205;
          ++v203;
          if (!v205)
          {
            unsigned int v206 = 0;
            goto LABEL_348;
          }
        }
        unsigned int v206 = v204;
LABEL_348:
        while (*v200 != 33)
        {
          int v207 = *v201++;
          LOWORD(v199) = v207 + v199;
          ++v200;
          if (!v207)
          {
            unsigned int v199 = 0;
            goto LABEL_352;
          }
        }
        unsigned int v199 = (unsigned __int16)v199;
      }
      else
      {
        unsigned int v206 = 0;
      }
LABEL_352:
      int v208 = (v111 >> 8) & 0xFFF;
      BOOL v210 = v208 == 1 || v208 == 33;
      if ((((v208 != 0) ^ v210) & 1) == 0) {
        ++v234.i32[(*(_WORD *)(v113[14] + 2 * v199) - (_BYTE)v97 + 1) & 7];
      }
      BOOL v212 = v208 == 2 || v208 == 33;
      if ((((v208 != 0) ^ v212) & 1) == 0)
      {
        int v213 = (*(_WORD *)(v113[14] + 2 * v199) - (_BYTE)v97) & 7;
        ++v234.i32[v213];
      }
      BOOL v215 = v208 == 3 || v208 == 34;
      if ((((v208 != 0) ^ v215) & 1) == 0) {
        ++v234.i32[(*(_WORD *)(v113[14] + 2 * v206) - (_BYTE)v97 + 1) & 7];
      }
      BOOL v216 = v208 != 0;
      BOOL v217 = v208 == 4 || v208 == 34;
      BOOL v218 = v217;
      if ((v216 ^ v218)) {
        goto LABEL_200;
      }
      __int16 v193 = *(_WORD *)(v113[14] + 2 * v206);
      goto LABEL_384;
    }
    unint64_t v117 = j;
    if (j)
    {
      if ((v106 & 8) == 0 || (unint64_t v117 = j, (*(void *)j & 4) != 0))
      {
LABEL_193:
        uint64_t v118 = *(void *)(j + 24) + 48;
        uint64_t v119 = *(void *)(v117 + 8);
        if (v119 != v118 && (*(unsigned char *)(*(void *)(v119 + 16) + 16) & 1) != 0)
        {
          if ((*(unsigned char *)v119 & 4) == 0)
          {
            while ((*(_WORD *)(v119 + 44) & 8) != 0)
              uint64_t v119 = *(void *)(v119 + 8);
          }
          unint64_t j = *(void *)(v119 + 8);
          if (j != v118 && (*(unsigned char *)(*(void *)(j + 16) + 16) & 1) != 0) {
            goto LABEL_200;
          }
        }
LABEL_161:
        while (1)
        {
          unsigned int v52 = (int *)*((void *)v52 + 3);
          if (!v52) {
            goto LABEL_77;
          }
          unsigned int v53 = *v52;
          if ((*v52 & 0x80000000) == 0) {
            goto LABEL_150;
          }
        }
      }
    }
    else if ((v106 & 8) == 0)
    {
      goto LABEL_193;
    }
    unint64_t v117 = j;
    do
      unint64_t v117 = *(void *)(v117 + 8);
    while ((*(_WORD *)(v117 + 44) & 8) != 0);
    goto LABEL_193;
  }
LABEL_77:
  unint64_t v54 = *(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v19 + 24) + 16 * (v13 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                            + 24);
  unint64_t v55 = v54 >> 5;
  int v56 = dword_1CD938618[v54 >> 5];
  int v57 = 1 << v54;
  if ((v57 & v56) != 0
    || (dword_1CD93B768[v55] & v57) != 0
    || (dword_1CD93E000[v55] & v57) != 0
    || (dword_1CD940538[v55] & v57) != 0
    || (dword_1CD942710[v55] & v57) != 0
    || (dword_1CD944588[v55] & v57) != 0
    || (dword_1CD9460A0[v55] & v57) != 0
    || (dword_1CD947858[v55] & v57) != 0
    || (dword_1CD948110[v55] & v57) != 0
    || (dword_1CD948398[v55] & v57) != 0
    || (dword_1CD9485D8[v55] & v57) != 0
    || (dword_1CD9487D0[v55] & v57) != 0
    || (dword_1CD948980[v55] & v57) != 0
    || (dword_1CD948AE8[v55] & v57) != 0
    || (dword_1CD948C08[v55] & v57) != 0)
  {
    v234.i32[0] += v234.i32[1];
    v234.i32[1] = v234.i32[0];
    v234.i32[2] += v234.i32[3];
    v234.i32[3] = v234.i32[2];
    v235.i32[0] += v235.i32[1];
    v235.i32[1] = v235.i32[0];
    v235.i32[2] += v235.i32[3];
    v235.i32[3] = v235.i32[2];
  }
  unsigned int v58 = vminvq_u32(vminq_u32(v234, v235));
  unsigned int v59 = vmaxvq_u32(vmaxq_u32(v235, v234));
  unsigned int v60 = v59 - v58;
  BOOL v63 = (v58 < 2 || v60 > v58 >> 1) && v59 != v58;
  unsigned int v64 = v60 >> 1;
  unsigned int v225 = v60;
  if (v60 <= 0xF) {
    unsigned int v64 = 0;
  }
  uint64_t v65 = a5;
  uint64_t v66 = v226;
  if ((v63 || v242) && v11)
  {
    unsigned __int32 v231 = v64 + v58;
    int v67 = &v12[v11];
    int v223 = (*(_DWORD *)(*(void *)(v233 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*(void *)(*(void *)(*(void *)(v16 + 24) + 16 * (v13 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                             + 24)
                       + *(_DWORD *)(v233 + 272)
                       * ((*(void *)(v233 + 248) - *(void *)(v233 + 240)) >> 3))
                      + 4) >> 3)
         - 1;
    uint64_t v68 = 0xFFFFFFFFLL;
    uint64_t v228 = v67;
    do
    {
      uint64_t v69 = *v12;
      if (!v63) {
        goto LABEL_126;
      }
      int v70 = *(unsigned __int16 *)(*(void *)(v66 + 112) + 2 * v69);
      if ((v70 - 64) > 0x1BF)
      {
        uint64_t v71 = v68;
      }
      else if (llvm::LiveRegMatrix::isPhysRegUsed(a8, *v12))
      {
        uint64_t v71 = v68;
        int v67 = v228;
      }
      else
      {
        uint64_t v71 = ((v223 + v70) >> 1) & 0x7FFFFFF8;
        int v72 = v71 >= v68 ? v68 : ((v223 + v70) >> 1) & 0x7FFFFFF8;
        int v67 = v228;
        if (v225 > 3 || v71 >= v68)
        {
LABEL_122:
          if (v71 != v72) {
            break;
          }
        }
        else
        {
          uint64_t v73 = a8;
          uint64_t v74 = 0;
          while (!llvm::LiveRegMatrix::isPhysRegUsed(v73, (v71 | 3) + v74))
          {
            if (++v74 == 8)
            {
              int v72 = v68;
              a8 = v73;
              int v67 = v228;
              uint64_t v65 = a5;
              uint64_t v66 = v226;
              goto LABEL_122;
            }
          }
          a8 = v73;
          int v67 = v228;
          uint64_t v65 = a5;
          uint64_t v66 = v226;
        }
      }
      uint64_t v68 = v71;
      if (v234.i32[v70 & 7] <= v231)
      {
LABEL_126:
        if (v242)
        {
          uint64_t v75 = v241;
          uint64_t v76 = *(void *)(v233 + 8);
          uint64_t v77 = *(void *)(v233 + 56);
          unint64_t v78 = (unsigned __int16 *)(v77
                                   + (((unint64_t)*(unsigned int *)(v76 + 24 * v69 + 16) >> 3) & 0x1FFFFFFE));
          int v80 = *v78;
          BOOL v79 = v78 + 1;
          int v81 = v80 + (*(_DWORD *)(v76 + 24 * v69 + 16) & 0xF) * v69;
          while (1)
          {
            unint64_t v82 = (unsigned __int16 *)(v77
                                     + (((unint64_t)*(unsigned int *)(v76 + 24 * *v75 + 16) >> 3) & 0x1FFFFFFE));
            int v84 = *v82;
            uint64_t v83 = v82 + 1;
            int v85 = v84 + (*(_DWORD *)(v76 + 24 * *v75 + 16) & 0xF) * *v75;
            do
            {
              int v86 = v85;
              uint64_t v87 = v79;
              int v88 = v81;
              do
              {
                int v89 = v88;
                int v91 = *v87++;
                int v90 = v91;
                if (!v91) {
                  uint64_t v87 = 0;
                }
                if (!v90) {
                  break;
                }
                int v88 = v90 + v89;
              }
              while ((unsigned __int16)v86 != (unsigned __int16)v89);
              int v93 = *v83++;
              int v92 = v93;
              if (!v93) {
                uint64_t v83 = 0;
              }
              if (!v92) {
                break;
              }
              int v85 = v92 + v86;
            }
            while ((unsigned __int16)v86 != (unsigned __int16)v89);
            if ((unsigned __int16)v86 == (unsigned __int16)v89) {
              break;
            }
            if (++v75 == (_DWORD *)((char *)v241 + 4 * v242)) {
              goto LABEL_140;
            }
          }
        }
        else
        {
LABEL_140:
          uint64_t v94 = v65[1];
          if ((unint64_t)(v94 + 1) > v65[2]) {
            llvm::SmallVectorBase<unsigned long long>::grow_pod();
          }
          *(_WORD *)(*v65 + 2 * v94) = v69;
          ++v65[1];
        }
      }
      ++v12;
    }
    while (v12 != v67);
  }
  if (v241 != v243) {
    free(v241);
  }
  if ((v236 & 1) == 0) {
    MEMORY[0x1D25D9CD0](v237, 4);
  }
  return 0;
}

uint64_t sub_1CB8FB0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) + 32);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(v8 + 16) + 176))(*(void *)(v8 + 16));
  uint64_t v11 = *(unsigned int *)(*(void *)(a2 + 32) + 4);
  uint64_t v12 = v75;
  uint64_t v70 = v10;
  uint64_t v71 = v75;
  int v72 = v75;
  uint64_t v73 = 8;
  int v74 = 0;
  if ((v11 & 0x80000000) != 0) {
    uint64_t v13 = (uint64_t *)(*(void *)(v9 + 24) + 16 * (v11 & 0x7FFFFFFF) + 8);
  }
  else {
    uint64_t v13 = (uint64_t *)(*(void *)(v9 + 272) + 8 * v11);
  }
  uint64_t v14 = *v13;
  if (!*v13) {
    return 1;
  }
  while ((*(unsigned char *)(v14 + 3) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14) {
      return 1;
    }
  }
  uint64_t v68 = a5;
  unsigned int v16 = 0;
  unsigned int v17 = 8;
  uint64_t v18 = *(void *)(v14 + 8);
  uint64_t v19 = v75;
LABEL_8:
  uint64_t v20 = *(unsigned __int16 **)(v18 + 16);
  uint64_t v21 = *((void *)v20 + 2);
  if ((v21 & 1) == 0)
  {
    BOOL v22 = sub_1CB84E50C(*v20);
    if ((v21 & 0x320) != 0 || v22)
    {
      uint64_t v24 = *(void *)(v18 + 24);
      if (v19 == v12)
      {
        if (v16)
        {
          int v25 = 0;
          uint64_t v26 = 8 * v16;
          BOOL v27 = v12;
          do
          {
            if (*v27 == v24) {
              goto LABEL_43;
            }
            if (*v27 == -2) {
              int v25 = v27;
            }
            ++v27;
            v26 -= 8;
          }
          while (v26);
          if (v25)
          {
            void *v25 = v24;
            --v74;
            goto LABEL_43;
          }
        }
        if (v17 > v16)
        {
          HIDWORD(v73) = v16 + 1;
          *(void *)&v12[8 * v16] = v24;
          goto LABEL_43;
        }
      }
      if (3 * v17 <= 4 * (v16 - v74))
      {
        if (v17 >= 0x40) {
          v17 *= 2;
        }
        else {
          unsigned int v17 = 128;
        }
      }
      else if (v17 - v16 >= v17 >> 3)
      {
        goto LABEL_25;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v71, v17);
      unsigned int v17 = v73;
      uint64_t v19 = v72;
LABEL_25:
      unsigned int v28 = v17 - 1;
      unsigned int v29 = (v17 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      int v30 = &v19[8 * v29];
      uint64_t v31 = *v30;
      if (*v30 == -1)
      {
        uint64_t v32 = 0;
LABEL_37:
        if (v32) {
          int v30 = v32;
        }
        if (*v30 != v24)
        {
          if (*v30 == -2) {
            --v74;
          }
          else {
            ++HIDWORD(v73);
          }
          void *v30 = v24;
        }
      }
      else
      {
        uint64_t v32 = 0;
        int v33 = 1;
        while (v31 != v24)
        {
          if (v32) {
            BOOL v34 = 0;
          }
          else {
            BOOL v34 = v31 == -2;
          }
          if (v34) {
            uint64_t v32 = v30;
          }
          unsigned int v35 = v29 + v33++;
          unsigned int v29 = v35 & v28;
          int v30 = &v19[8 * (v35 & v28)];
          uint64_t v31 = *v30;
          if (*v30 == -1) {
            goto LABEL_37;
          }
        }
      }
LABEL_43:
      uint64_t v12 = v71;
      uint64_t v19 = v72;
      unsigned int v17 = v73;
      unsigned int v16 = HIDWORD(v73);
      uint64_t v18 = *(void *)(v14 + 8);
    }
  }
  while (1)
  {
    uint64_t v14 = *(void *)(v14 + 24);
    if (!v14) {
      break;
    }
    if ((*(unsigned char *)(v14 + 3) & 1) == 0 && *(void *)(v14 + 8) != v18)
    {
      uint64_t v18 = *(void *)(v14 + 8);
      goto LABEL_8;
    }
  }
  if (v16 != v74)
  {
    if (*(void *)(a3 + 24) <= 1uLL) {
      unint64_t v36 = 1;
    }
    else {
      unint64_t v36 = *(void *)(a3 + 24);
    }
    unint64_t v37 = *(void *)(v68 + 24);
    if (v37 <= 1) {
      unint64_t v38 = 1;
    }
    else {
      unint64_t v38 = *(void *)(v68 + 24);
    }
    unint64_t v39 = *(unsigned int **)(a2 + 32);
    unint64_t v40 = ((unint64_t)v39[8] >> 8) & 0xFFF;
    if (v40) {
      unint64_t v36 = *(void *)(*(void *)(v70 + 232) + 8 * v40);
    }
    unint64_t v41 = ((unint64_t)*v39 >> 8) & 0xFFF;
    if (v41) {
      unint64_t v38 = *(void *)(*(void *)(v70 + 232) + 8 * v41);
    }
    uint64_t v42 = v39[9];
    int v43 = (unsigned int **)((v42 & 0x80000000) != 0
                          ? *(void *)(v9 + 24) + 16 * (v42 & 0x7FFFFFFF) + 8
                          : *(void *)(v9 + 272) + 8 * v42);
    uint64_t v44 = *v43;
    if (*v43)
    {
      while (1)
      {
        unsigned int v45 = *v44;
        if ((*v44 & 0x1000000) == 0) {
          break;
        }
        uint64_t v44 = (unsigned int *)*((void *)v44 + 3);
        if (!v44) {
          goto LABEL_71;
        }
      }
      uint64_t v47 = (v37 << __clz(__rbit64(v36)) >> __clz(__rbit64(v38)));
      unsigned int v69 = v17 - 1;
      if (v19 == v12) {
        unsigned int v48 = v16;
      }
      else {
        unsigned int v48 = v17;
      }
      int v67 = &v19[8 * v48];
      uint64_t v49 = v12;
LABEL_79:
      uint64_t v50 = *((void *)v44 + 1);
      int v51 = *(unsigned __int16 **)(v50 + 16);
      uint64_t v52 = *((void *)v51 + 2);
      if ((v52 & 1) == 0)
      {
        BOOL v53 = sub_1CB84E50C(*v51);
        if ((v52 & 0x320) != 0 || v53)
        {
          uint64_t v55 = *(void *)(v50 + 24);
          if (v19 == (unsigned char *)v49)
          {
            int v56 = &v49[v16];
            if (v16)
            {
              uint64_t v57 = 8 * v16;
              while (*v49 != v55)
              {
                ++v49;
                v57 -= 8;
                if (!v57) {
                  goto LABEL_109;
                }
              }
              int v56 = v49;
            }
          }
          else
          {
            unsigned int v58 = v69 & ((v55 >> 4) ^ (v55 >> 9));
            int v56 = &v19[8 * v58];
            uint64_t v59 = *v56;
            if (*v56 == -1)
            {
              unsigned int v60 = 0;
LABEL_104:
              if (v60) {
                int v56 = v60;
              }
              uint64_t v64 = *v56;
            }
            else
            {
              unsigned int v60 = 0;
              int v61 = 1;
              while (v59 != v55)
              {
                if (v60) {
                  BOOL v62 = 0;
                }
                else {
                  BOOL v62 = v59 == -2;
                }
                if (v62) {
                  unsigned int v60 = v56;
                }
                unsigned int v63 = v58 + v61++;
                unsigned int v58 = v63 & v69;
                int v56 = &v19[8 * (v63 & v69)];
                uint64_t v59 = *v56;
                if (*v56 == -1) {
                  goto LABEL_104;
                }
              }
              uint64_t v64 = *(void *)(v50 + 24);
            }
            if (v64 != v55) {
              int v56 = v67;
            }
          }
LABEL_109:
          if (v19 == v12) {
            unsigned int v65 = v16;
          }
          else {
            unsigned int v65 = v17;
          }
          if (v56 == (void *)&v19[8 * v65]
            || (v47 & *(void *)(*(void *)(v70 + 232) + 8 * ((v45 >> 8) & 0xFFF))) == 0)
          {
            uint64_t v49 = v12;
            goto LABEL_118;
          }
          uint64_t v15 = 0;
          goto LABEL_72;
        }
      }
LABEL_118:
      while (1)
      {
        uint64_t v44 = (unsigned int *)*((void *)v44 + 3);
        if (!v44) {
          break;
        }
        unsigned int v45 = *v44;
        if ((*v44 & 0x1000000) == 0) {
          goto LABEL_79;
        }
      }
    }
  }
LABEL_71:
  uint64_t v15 = 1;
LABEL_72:
  if (v19 != v12) {
    free(v19);
  }
  return v15;
}

uint64_t sub_1CB8FB598()
{
  return 0;
}

uint64_t sub_1CB8FB5A4()
{
  return 0;
}

uint64_t sub_1CB8FB5AC()
{
  return 0;
}

uint64_t sub_1CB8FB5B4()
{
  return 0;
}

uint64_t sub_1CB8FB5BC()
{
  return 0;
}

uint64_t sub_1CB8FB5C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1CB8FB5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

float sub_1CB8FB5D4()
{
  return 1.0;
}

uint64_t sub_1CB8FB5E0()
{
  return 0;
}

uint64_t sub_1CB8FB5E8()
{
  return 0;
}

uint64_t sub_1CB8FB5F0()
{
  return 0;
}

uint64_t sub_1CB8FB5F8()
{
  return 0;
}

uint64_t sub_1CB8FB608(uint64_t result, unsigned int a2, void *a3, char a4)
{
  *(_DWORD *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(unsigned char *)(result + 16) = a4;
  *(_WORD *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  *(_WORD *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  unint64_t v4 = *(unsigned int *)(*a3 + 24 * a2 + 16);
  __int16 v5 = v4 & 0xF;
  uint64_t v6 = (_WORD *)(a3[6] + ((v4 >> 3) & 0x1FFFFFFE));
  __int16 v8 = *v6;
  unsigned int v7 = v6 + 1;
  unsigned __int16 v9 = v8 + v5 * a2;
  *(_WORD *)(result + 24) = v9;
  *(void *)(result + 32) = v7;
  while (1)
  {
    uint64_t v10 = (unsigned __int16 *)(a3[5] + 4 * v9);
    int v11 = *v10;
    int v12 = v10[1];
    *(_DWORD *)(result + 40) = v11 | (v12 << 16);
    if (v11) {
      break;
    }
LABEL_12:
    int v18 = *v7++;
    *(void *)(result + 32) = v7;
    v9 += v18;
    *(_WORD *)(result + 24) = v9;
    if (!v18)
    {
      *(void *)(result + 32) = 0;
      return result;
    }
  }
  while (1)
  {
    uint64_t v13 = a3[6];
    uint64_t v14 = *(unsigned int *)(*a3 + 24 * (unsigned __int16)v11 + 8);
    *(_WORD *)(result + 48) = v11;
    *(void *)(result + 56) = v13 + 2 * v14;
    if (v13) {
      break;
    }
LABEL_10:
    *(_WORD *)(result + 40) = v12;
    *(_WORD *)(result + 42) = 0;
    LOWORD(v11) = v12;
    BOOL v17 = (unsigned __int16)v12 == 0;
    LOWORD(v12) = 0;
    if (v17) {
      goto LABEL_12;
    }
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v15 = v13 + 2 * v14 + 2;
    while (a2 == (unsigned __int16)v11)
    {
      *(void *)(result + 56) = v15;
      int v16 = *(unsigned __int16 *)(v15 - 2);
      LOWORD(v11) = v16 + v11;
      *(_WORD *)(result + 48) = v11;
      v15 += 2;
      if (!v16)
      {
        *(void *)(result + 56) = 0;
        goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t sub_1CB8FB704(uint64_t result)
{
  unint64_t v1 = *(unsigned __int16 **)(result + 56);
  int v2 = *v1;
  *(void *)(result + 56) = v1 + 1;
  *(_WORD *)(result + 48) += v2;
  if (!v2)
  {
    *(void *)(result + 56) = 0;
    uint64_t v3 = *(unsigned __int16 *)(result + 42);
    *(_DWORD *)(result + 40) = (unsigned __int16)v3;
    if (v3)
    {
      uint64_t v11 = *(void *)(*(void *)(result + 8) + 48)
          + 2 * *(unsigned int *)(**(void **)(result + 8) + 24 * v3 + 8);
      *(_WORD *)(result + 48) = v3;
      *(void *)(result + 56) = v11;
    }
    else
    {
      unint64_t v4 = *(unsigned __int16 **)(result + 32);
      int v5 = *v4;
      *(void *)(result + 32) = v4 + 1;
      unsigned __int16 v6 = *(_WORD *)(result + 24) + v5;
      *(_WORD *)(result + 24) = v6;
      if (v5)
      {
        unsigned int v7 = *(void **)(result + 8);
        __int16 v8 = (unsigned __int16 *)(v7[5] + 4 * v6);
        unsigned int v9 = *v8;
        *(_DWORD *)(result + 40) = v9 | (v8[1] << 16);
        uint64_t v10 = v7[6] + 2 * *(unsigned int *)(*v7 + 24 * v9 + 8);
        *(_WORD *)(result + 48) = v9;
        *(void *)(result + 56) = v10;
      }
      else
      {
        *(void *)(result + 32) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1CB8FB7C4(uint64_t a1)
{
  if ((*(unsigned char *)(*(void *)(a1 + 16) + 17) & 2) != 0)
  {
    uint64_t v1 = a1;
    if ((*(unsigned char *)a1 & 4) == 0)
    {
      uint64_t v1 = a1;
      if ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        uint64_t v1 = a1;
        do
          uint64_t v1 = *(void *)(v1 + 8);
        while ((*(_WORD *)(v1 + 44) & 8) != 0);
      }
    }
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2 != *(void *)(a1 + 24) + 48 && (*(unsigned char *)(*(void *)(v2 + 16) + 16) & 0x20) != 0)
    {
      uint64_t v5 = *(unsigned int *)(v2 + 40);
      if (v5)
      {
        int v6 = 0;
        char v7 = 0;
        int v8 = 0;
        unsigned int v9 = (_DWORD *)(*(void *)(v2 + 32) + 4);
        do
        {
          unsigned int v10 = *(v9 - 1);
          if (!(_BYTE)v10 && *v9 == *(_DWORD *)(*(void *)(a1 + 32) + 4))
          {
            int v11 = (v10 >> 28) & 1;
            if ((v10 & 0xFFF00) == 0) {
              int v11 = 1;
            }
            int v12 = v11 | v8;
            int v13 = v11 ^ 1 | v6;
            if ((v10 & 0x1000000) != 0) {
              int v8 = v12;
            }
            else {
              v7 |= (v10 & 0x10000000) == 0;
            }
            if ((v10 & 0x1000000) != 0) {
              int v6 = v13;
            }
          }
          v9 += 8;
          --v5;
        }
        while (v5);
        if (v7)
        {
          char v3 = 1;
          return v3 & 1;
        }
      }
      else
      {
        LOBYTE(v6) = 0;
        LOBYTE(v8) = 0;
      }
      char v3 = v6 & (v8 ^ 1);
      return v3 & 1;
    }
  }
  char v3 = 0;
  return v3 & 1;
}

uint64_t sub_1CB8FB8C0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v5 = 16;
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      int v12 = 0;
      goto LABEL_9;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  int v6 = v5 - 1;
  unsigned int v7 = (37 * *a2) & v6;
  int v8 = (_DWORD *)(v4 + 4 * v7);
  int v9 = *v8;
  if (*a2 == *v8) {
    return 0;
  }
  unsigned int v10 = 0;
  int v11 = 1;
  while (v9 != -1)
  {
    if (v10) {
      BOOL v16 = 0;
    }
    else {
      BOOL v16 = v9 == -2;
    }
    if (v16) {
      unsigned int v10 = v8;
    }
    unsigned int v17 = v7 + v11++;
    unsigned int v7 = v17 & v6;
    int v8 = (_DWORD *)(v4 + 4 * v7);
    int v9 = *v8;
    if (*a2 == *v8) {
      return 0;
    }
  }
  if (v10) {
    int v12 = v10;
  }
  else {
    int v12 = v8;
  }
LABEL_9:
  *sub_1CB8FB9D8(a1, (uint64_t)a2, a2, v12) = *a2;
  int v13 = *a2;
  unsigned int v14 = *(_DWORD *)(a1 + 80);
  if (v14 >= *(_DWORD *)(a1 + 84)) {
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  *(_DWORD *)(*(void *)(a1 + 72) + 4 * v14) = v13;
  ++*(_DWORD *)(a1 + 80);
  return 1;
}

_DWORD *sub_1CB8FB9D8(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6 = *(_DWORD *)a1;
  int v7 = *(_DWORD *)a1 >> 1;
  if (*(_DWORD *)a1) {
    unsigned int v8 = 16;
  }
  else {
    unsigned int v8 = *(_DWORD *)(a1 + 16);
  }
  if (4 * v7 + 4 < 3 * v8)
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) > v8 >> 3)
    {
      int v9 = *(_DWORD *)a1 & 1;
      goto LABEL_6;
    }
    sub_1CB8FBBB0(a1, v8);
    uint64_t v18 = a1 + 8;
    int v6 = *(_DWORD *)a1;
    if (*(_DWORD *)a1)
    {
      int v19 = 16;
LABEL_20:
      int v9 = *(_DWORD *)a1 & 1;
      int v20 = v19 - 1;
      unsigned int v21 = (37 * *a3) & v20;
      a4 = (_DWORD *)(v18 + 4 * v21);
      int v22 = *a4;
      if (*a3 == *a4) {
        goto LABEL_6;
      }
      BOOL v16 = 0;
      int v23 = 1;
      while (v22 != -1)
      {
        if (v16) {
          BOOL v24 = 0;
        }
        else {
          BOOL v24 = v22 == -2;
        }
        if (v24) {
          BOOL v16 = a4;
        }
        unsigned int v25 = v21 + v23++;
        unsigned int v21 = v25 & v20;
        a4 = (_DWORD *)(v18 + 4 * v21);
        int v22 = *a4;
        if (*a3 == *a4) {
          goto LABEL_6;
        }
      }
      goto LABEL_15;
    }
    int v19 = *(_DWORD *)(a1 + 16);
    if (v19)
    {
      uint64_t v18 = *(void *)(a1 + 8);
      goto LABEL_20;
    }
LABEL_41:
    int v9 = 0;
    a4 = 0;
    goto LABEL_6;
  }
  sub_1CB8FBBB0(a1, 2 * v8);
  uint64_t v11 = a1 + 8;
  int v6 = *(_DWORD *)a1;
  if (*(_DWORD *)a1)
  {
    int v12 = 16;
  }
  else
  {
    int v12 = *(_DWORD *)(a1 + 16);
    if (!v12) {
      goto LABEL_41;
    }
    uint64_t v11 = *(void *)(a1 + 8);
  }
  int v9 = *(_DWORD *)a1 & 1;
  int v13 = v12 - 1;
  unsigned int v14 = (37 * *a3) & v13;
  a4 = (_DWORD *)(v11 + 4 * v14);
  int v15 = *a4;
  if (*a3 == *a4) {
    goto LABEL_6;
  }
  BOOL v16 = 0;
  int v17 = 1;
  while (v15 != -1)
  {
    if (v16) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v15 == -2;
    }
    if (v26) {
      BOOL v16 = a4;
    }
    unsigned int v27 = v14 + v17++;
    unsigned int v14 = v27 & v13;
    a4 = (_DWORD *)(v11 + 4 * v14);
    int v15 = *a4;
    if (*a3 == *a4) {
      goto LABEL_6;
    }
  }
LABEL_15:
  if (v16) {
    a4 = v16;
  }
LABEL_6:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -1) {
    --*(_DWORD *)(a1 + 4);
  }
  return a4;
}

void *sub_1CB8FBBB0(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 0x11)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(int **)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 <= 0x10)
    {
      *(_DWORD *)a1 |= 1u;
    }
    else
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
      *(void *)(a1 + 16) = v13;
    }
    sub_1CB8FBD28((void *)a1, v11, &v11[v12]);
    JUMPOUT(0x1D25D9CD0);
  }
  int v6 = v14;
  for (uint64_t i = 8; i != 72; i += 4)
  {
    unsigned int v8 = *(_DWORD *)(a1 + i);
    if (v8 <= 0xFFFFFFFD) {
      *v6++ = v8;
    }
  }
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(4 * a2, (std::align_val_t)4uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CB8FBD28((void *)a1, v14, v6);
}

void *sub_1CB8FBD28(void *result, int *a2, int *a3)
{
  int v5 = result;
  int v6 = *(_DWORD *)result;
  *uint64_t result = *(_DWORD *)result & 1;
  int v7 = (char *)(result + 1);
  if (v6)
  {
    size_t v10 = 64;
    uint64_t v9 = result + 1;
  }
  else
  {
    uint64_t v8 = *((unsigned int *)result + 4);
    if (!v8) {
      goto LABEL_5;
    }
    uint64_t v9 = (void *)result[1];
    size_t v10 = 4 * v8;
  }
  uint64_t result = memset(v9, 255, v10);
LABEL_5:
  while (a2 != a3)
  {
    int v11 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      if (*(unsigned char *)v5)
      {
        int v12 = 16;
        uint64_t v13 = v7;
      }
      else
      {
        uint64_t v13 = (char *)v5[1];
        int v12 = *((_DWORD *)v5 + 4);
      }
      int v14 = v12 - 1;
      unsigned int v15 = (v12 - 1) & (37 * v11);
      BOOL v16 = &v13[4 * v15];
      int v17 = *(_DWORD *)v16;
      if (v11 != *(_DWORD *)v16)
      {
        uint64_t v18 = 0;
        int v19 = 1;
        while (v17 != -1)
        {
          if (v18) {
            BOOL v20 = 0;
          }
          else {
            BOOL v20 = v17 == -2;
          }
          if (v20) {
            uint64_t v18 = v16;
          }
          unsigned int v21 = v15 + v19++;
          unsigned int v15 = v21 & v14;
          BOOL v16 = &v13[4 * (v21 & v14)];
          int v17 = *(_DWORD *)v16;
          if (v11 == *(_DWORD *)v16) {
            goto LABEL_14;
          }
        }
        if (v18) {
          BOOL v16 = v18;
        }
      }
LABEL_14:
      *(_DWORD *)BOOL v16 = v11;
      *(_DWORD *)v5 += 2;
    }
    ++a2;
  }
  return result;
}

double sub_1CB8FBE48(llvm::ScheduleDAGInstrs *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v4 = (char *)a1 + 2632;
  uint64_t v5 = *a3;
  *a3 = 0;
  int v6 = llvm::ScheduleDAGInstrs::ScheduleDAGInstrs(a1, *(const llvm::TargetSubtargetInfo ***)(a2 + 8), *(const llvm::MachineLoopInfo **)(a2 + 16), 0);
  *(_OWORD *)unint64_t v4 = *(_OWORD *)(a2 + 40);
  *((void *)v6 + 331) = v5;
  double result = 0.0;
  *((_OWORD *)v6 + 166) = 0u;
  *((_OWORD *)v6 + 167) = 0u;
  *((_OWORD *)v6 + 168) = 0u;
  *((void *)v6 + 338) = 0;
  *(void *)int v6 = &unk_1F260FAE8;
  *((void *)v6 + 339) = *(void *)(a2 + 56);
  *((void *)v6 + 340) = 0;
  *((void *)v6 + 341) = (char *)v6 + 2744;
  *((void *)v6 + 342) = 0x600000000;
  *((_DWORD *)v6 + 698) = 0;
  *((void *)v6 + 350) = 0;
  *((void *)v6 + 351) = (char *)v6 + 2824;
  *((void *)v6 + 352) = 0x800000000;
  *((void *)v6 + 385) = 0;
  *((_DWORD *)v6 + 772) = 0;
  *((_DWORD *)v6 + 774) = -1;
  *(void *)((char *)v6 + 3108) = 0;
  *(void *)((char *)v6 + 3100) = 0;
  *(void *)((char *)v6 + 3114) = 0;
  *((void *)v6 + 391) = 0;
  *((void *)v6 + 393) = 0;
  *((void *)v6 + 392) = 0;
  *((void *)v6 + 394) = (char *)v6 + 3168;
  *((void *)v6 + 395) = 0x800000000;
  *((void *)v6 + 412) = (char *)v6 + 3312;
  *((void *)v6 + 413) = 0x800000000;
  *((_OWORD *)v6 + 215) = 0u;
  *((_OWORD *)v6 + 216) = 0u;
  *((void *)v6 + 434) = 0;
  *((void *)v6 + 436) = 0;
  *((void *)v6 + 437) = 0;
  *((void *)v6 + 438) = (char *)v6 + 3128;
  *((_WORD *)v6 + 1756) = 1;
  *((unsigned char *)v6 + 3514) = 0;
  *((_OWORD *)v6 + 220) = 0u;
  *((_OWORD *)v6 + 221) = 0u;
  *((void *)v6 + 444) = (char *)v6 + 3568;
  *((void *)v6 + 445) = 0x800000000;
  *((void *)v6 + 462) = 0;
  *((_DWORD *)v6 + 926) = 0;
  *((void *)v6 + 465) = (char *)v6 + 3736;
  *((void *)v6 + 466) = 0x800000000;
  *((void *)v6 + 471) = 0;
  *((_DWORD *)v6 + 944) = 0;
  *((void *)v6 + 481) = 0;
  *(_OWORD *)((char *)v6 + 3816) = 0u;
  *(_OWORD *)((char *)v6 + 3832) = 0u;
  *(_OWORD *)((char *)v6 + 3784) = 0u;
  *(_OWORD *)((char *)v6 + 3800) = 0u;
  *((void *)v6 + 482) = (char *)v6 + 3872;
  *((void *)v6 + 483) = 0x800000000;
  *((void *)v6 + 500) = (char *)v6 + 4016;
  *((void *)v6 + 501) = 0x800000000;
  *((_OWORD *)v6 + 259) = 0u;
  *((_OWORD *)v6 + 260) = 0u;
  *((void *)v6 + 522) = 0;
  *((void *)v6 + 525) = 0;
  *((void *)v6 + 524) = 0;
  *((void *)v6 + 526) = (char *)v6 + 3832;
  *((_WORD *)v6 + 2108) = 1;
  v4[1586] = 0;
  *((_OWORD *)v6 + 265) = 0u;
  *((_OWORD *)v6 + 264) = 0u;
  *((void *)v6 + 532) = (char *)v6 + 4272;
  *((void *)v6 + 533) = 0x800000000;
  *((void *)v6 + 550) = 0;
  *((_DWORD *)v6 + 1102) = 0;
  *((void *)v6 + 553) = (char *)v6 + 4440;
  *((void *)v6 + 554) = 0x800000000;
  *((void *)v6 + 559) = 0;
  *((_DWORD *)v6 + 1120) = 0;
  *(_OWORD *)((char *)v6 + 4504) = 0u;
  *(_OWORD *)((char *)v6 + 4520) = 0u;
  *(_OWORD *)((char *)v6 + 4488) = 0u;
  *((void *)v6 + 567) = (char *)v6 + 4552;
  *((void *)v6 + 568) = 0x800000000;
  *((void *)v6 + 585) = (char *)v6 + 4696;
  *((void *)v6 + 586) = 0x800000000;
  *((void *)v6 + 607) = 0;
  *(_OWORD *)((char *)v6 + 4824) = 0u;
  *(_OWORD *)((char *)v6 + 4840) = 0u;
  *((void *)v6 + 610) = 0;
  *((void *)v6 + 609) = 0;
  *((void *)v6 + 611) = (char *)v6 + 4512;
  *((_WORD *)v6 + 2448) = 1;
  v4[2266] = 0;
  *(_OWORD *)((char *)v6 + 4904) = 0u;
  *(_OWORD *)((char *)v6 + 4920) = 0u;
  *((void *)v6 + 617) = (char *)v6 + 4952;
  *((void *)v6 + 618) = 0x800000000;
  *((void *)v6 + 635) = 0;
  *((_DWORD *)v6 + 1272) = 0;
  *((void *)v6 + 638) = (char *)v6 + 5120;
  *((void *)v6 + 639) = 0x800000000;
  *((void *)v6 + 644) = 0;
  *((_DWORD *)v6 + 1290) = 0;
  *((void *)v6 + 647) = 0;
  *((void *)v6 + 646) = 0;
  *((void *)v6 + 648) = 0;
  return result;
}

void sub_1CB8FC0D0(llvm::ScheduleDAGMILive *a1)
{
  llvm::ScheduleDAGMILive::~ScheduleDAGMILive(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB8FC108(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 2648) + 56))();
}

char *sub_1CB8FC134(char **a1, void *a2)
{
  uint64_t v2 = (a1[1] - *a1) >> 3;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 61) {
    abort();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 2 > v3) {
    unint64_t v3 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v3;
  }
  unsigned int v21 = a1 + 2;
  if (v7)
  {
    if (v7 >> 61) {
      sub_1CB833614();
    }
    uint64_t v8 = (char *)operator new(8 * v7);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = &v8[8 * v2];
  size_t v10 = &v8[8 * v7];
  *(void *)uint64_t v9 = *a2;
  int v11 = v9 + 8;
  *a2 = 0;
  v19.i64[1] = (uint64_t)(v9 + 8);
  BOOL v20 = v10;
  uint64_t v13 = *a1;
  int v12 = a1[1];
  if (v12 == *a1)
  {
    int64x2_t v15 = vdupq_n_s64((unint64_t)v12);
  }
  else
  {
    do
    {
      uint64_t v14 = *((void *)v12 - 1);
      v12 -= 8;
      *(void *)int v12 = 0;
      *((void *)v9 - 1) = v14;
      v9 -= 8;
    }
    while (v12 != v13);
    int64x2_t v15 = *(int64x2_t *)a1;
    int v11 = (char *)v19.i64[1];
    size_t v10 = v20;
  }
  *a1 = v9;
  a1[1] = v11;
  int64x2_t v19 = v15;
  BOOL v16 = a1[2];
  a1[2] = v10;
  BOOL v20 = v16;
  uint64_t v18 = v15.i64[0];
  sub_1CB8FC240((uint64_t)&v18);
  return v11;
}

uint64_t sub_1CB8FC240(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1CB8FC2BC(uint64_t a1)
{
  *(void *)a1 = &unk_1F25ED1A0;
  uint64_t v2 = *(void **)(a1 + 2408);
  if (v2)
  {
    *(void *)(a1 + 2416) = v2;
    operator delete(v2);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 2384), 4);
  int v23 = (void **)(a1 + 2360);
  sub_1CB837E88(&v23);
  int v23 = (void **)(a1 + 2336);
  sub_1CB837E88(&v23);
  uint64_t v3 = *(void **)(a1 + 2312);
  if (v3)
  {
    *(void *)(a1 + 2320) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 2240);
  if (v4 != (void *)(a1 + 2256)) {
    free(v4);
  }
  uint64_t v5 = *(void **)(a1 + 2216);
  if (v5)
  {
    *(void *)(a1 + 2224) = v5;
    operator delete(v5);
  }
  MEMORY[0x1D25D9CD0](*(void *)(a1 + 2192), 8);
  uint64_t v6 = *(void **)(a1 + 2120);
  if (v6 != (void *)(a1 + 2136)) {
    free(v6);
  }
  unint64_t v7 = *(void **)(a1 + 2088);
  if (v7)
  {
    *(void *)(a1 + 2096) = v7;
    operator delete(v7);
  }
  int v23 = (void **)(a1 + 2064);
  sub_1CB837E88(&v23);
  uint64_t v8 = *(void **)(a1 + 1960);
  if (v8 != (void *)(a1 + 1976)) {
    free(v8);
  }
  if ((*(unsigned char *)(a1 + 1152) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 1160), 8);
  }
  sub_1CB9012EC(a1 + 1112);
  sub_1CB90133C(a1 + 1072);
  uint64_t v9 = *(void **)(a1 + 976);
  if (v9 != (void *)(a1 + 992)) {
    free(v9);
  }
  size_t v10 = *(void **)(a1 + 880);
  if (v10 != (void *)(a1 + 896)) {
    free(v10);
  }
  int v11 = *(void **)(a1 + 800);
  if (v11 != (void *)(a1 + 816)) {
    free(v11);
  }
  int v12 = *(void **)(a1 + 776);
  if (v12)
  {
    *(void *)(a1 + 784) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 752);
  if (v13)
  {
    *(void *)(a1 + 760) = v13;
    operator delete(v13);
  }
  for (uint64_t i = 0; i != -96; i -= 48)
  {
    int64x2_t v15 = *(void **)(a1 + i + 696);
    if ((void *)(a1 + i + 712) != v15) {
      free(v15);
    }
  }
  BOOL v16 = *(void **)(a1 + 560);
  if (v16 != *(void **)(a1 + 552)) {
    free(v16);
  }
  int v17 = *(void **)(a1 + 464);
  if (v17 != *(void **)(a1 + 456)) {
    free(v17);
  }
  uint64_t v18 = *(void **)(a1 + 424);
  if (v18)
  {
    *(void *)(a1 + 432) = v18;
    operator delete(v18);
  }
  if (*(char *)(a1 + 423) < 0) {
    operator delete(*(void **)(a1 + 400));
  }
  int64x2_t v19 = *(void **)(a1 + 368);
  if (v19)
  {
    *(void *)(a1 + 376) = v19;
    operator delete(v19);
  }
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  BOOL v20 = *(void **)(a1 + 312);
  if (v20)
  {
    *(void *)(a1 + 320) = v20;
    operator delete(v20);
  }
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  unsigned int v21 = *(void **)(a1 + 256);
  if (v21)
  {
    *(void *)(a1 + 264) = v21;
    operator delete(v21);
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if ((*(unsigned char *)(a1 + 88) & 1) == 0) {
    MEMORY[0x1D25D9CD0](*(void *)(a1 + 96), 8);
  }
  return a1;
}

void sub_1CB8FC53C(uint64_t a1)
{
  sub_1CB8FC2BC(a1);

  JUMPOUT(0x1D25D9CE0);
}

uint64_t sub_1CB8FC574()
{
  return 1;
}

void sub_1CB8FC57C(uint64_t a1, int8x16_t *a2)
{
  uint64_t v457 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (char *)a2 + 632;
  *(int8x16_t *)(a1 + 24) = vextq_s8(a2[1], a2[1], 8uLL);
  uint64_t v5 = a2->i64[1];
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = (void *)a2[2].i64[0];
  *(void *)(a1 + 48) = v6[5];
  *(void *)(a1 + 56) = *(void *)(*v6 + 40) + 272;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(v7 + 281);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(v7 + 305) ^ 1;
  uint64_t v8 = *(void **)(a1 + 24);
  uint64_t v9 = *(void *)(v8[30] + 48);
  size_t v10 = (_DWORD *)(*(uint64_t (**)(void))(*v8 + 320))();
  *(_DWORD *)(a1 + 64) = *v10;
  unsigned int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 312))();
  if (v10[1] != -1)
  {
    unsigned int v12 = v11;
    uint64_t v13 = v10 + 2;
    do
    {
      unsigned int v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 312))(*(void *)(a1 + 24), a2[2].i64[0]);
      if (v14 > v12)
      {
        *(_DWORD *)(a1 + 64) = *(v13 - 1);
        unsigned int v12 = v14;
      }
      int v15 = *v13++;
    }
    while (v15 != -1);
  }
  BOOL v16 = (int *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 280))(*(void *)(a1 + 24), v9);
  int v17 = *v16;
  *(_DWORD *)(a1 + 68) = *v16;
  *(unsigned char *)(a1 + 1952) = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 3128) + 4 * *(unsigned int *)(a1 + 64)) >= (24 * v17);
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  *(void *)(a1 + 320) = *(void *)(a1 + 312);
  *(void *)(a1 + 376) = *(void *)(a1 + 368);
  *(void *)(a1 + 432) = *(void *)(a1 + 424);
  *(_DWORD *)(a1 + 448) = 0;
  for (uint64_t i = 656; i != 752; i += 48)
    *(_DWORD *)(a1 + i) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  uint64_t v19 = *(void *)(a1 + 16);
  *(void *)(a1 + 80) = *(void *)(v19 + 40)
                       + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 32) + 8) + 58326);
  *(_DWORD *)(a1 + 888) = 0;
  uint64_t v20 = *(unsigned int *)(v19 + 48);
  if (v20)
  {
    if (*(_DWORD *)(a1 + 892) < v20) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*(void **)(a1 + 880), 4 * v20);
    *(_DWORD *)(a1 + 888) = v20;
    LODWORD(v20) = *(_DWORD *)(*(void *)(a1 + 16) + 48);
  }
  *(_DWORD *)(a1 + 960) = 0;
  unint64_t v447 = v449;
  uint64_t v448 = 0x1000000000;
  *(_DWORD *)(a1 + 808) = 0;
  if (v20)
  {
    if (*(_DWORD *)(a1 + 812) < v20) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*(void **)(a1 + 800), 4 * v20);
    *(_DWORD *)(a1 + 808) = v20;
    uint64_t v21 = *(unsigned int *)(*(void *)(a1 + 16) + 48);
    LODWORD(v448) = 0;
    if (v21)
    {
      if (HIDWORD(v448) < v21) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      bzero(v447, 4 * v21);
      LODWORD(v448) = v21;
    }
  }
  uint64_t v22 = *(void *)(a1 + 8);
  uint64_t v23 = *(void *)(v22 + 48);
  uint64_t v24 = *(void *)(v22 + 56);
  if (v23 == v24)
  {
    uint64_t v27 = *(void *)(a1 + 16);
  }
  else
  {
    uint64_t v2 = 8190;
    do
    {
      unsigned int v25 = *(_WORD **)(v23 + 24);
      if (!v25)
      {
        if (byte_1EBD06248)
        {
          uint64_t v26 = *(void *)(a1 + 8);
          unsigned int v25 = *(_WORD **)(v26 + 672);
          if (v25)
          {
            v25 += 12 * *(unsigned __int16 *)(*(void *)(*(void *)(v23 + 8) + 16) + 6);
            if ((v25[4] & 0x1FFF) == 0x1FFE)
            {
              do
              {
                unsigned int v37 = (*(uint64_t (**)(void))(**(void **)(v26 + 808) + 200))(*(void *)(v26 + 808));
                uint64_t v38 = *(void *)(v26 + 672);
              }
              while ((*(_WORD *)(v38 + 24 * v37 + 8) & 0x1FFF) == 0x1FFE);
              unsigned int v25 = (_WORD *)(v38 + 24 * v37);
            }
            *(void *)(v23 + 24) = v25;
          }
        }
        else
        {
          unsigned int v25 = 0;
        }
      }
      uint64_t v27 = *(void *)(a1 + 16);
      if (v25[6])
      {
        unsigned int v28 = (unsigned __int16 *)(*(void *)(*(void *)(v27 + 176) + 136) + 4 * (unsigned __int16)v25[5]);
        unsigned int v29 = &v28[2 * (unsigned __int16)v25[6]];
        uint64_t v30 = *(void *)(v27 + 192);
        uint64_t v31 = *(void *)(a1 + 800);
        uint64_t v32 = *(_WORD **)(a1 + 80);
        int v33 = v447;
        do
        {
          uint64_t v34 = *v28;
          int v35 = *(_DWORD *)(v30 + 4 * v34);
          unsigned int v36 = v28[1];
          *(_DWORD *)(v31 + 4 * v34) += v35 * v36;
          if (v32 == v25) {
            unsigned int v36 = (43691 * v36) >> 17;
          }
          v33[v34] += v36 * v35;
          v28 += 2;
        }
        while (v28 != v29);
      }
      v23 += 272;
    }
    while (v23 != v24);
  }
  uint64_t v39 = *(unsigned int *)(v27 + 48);
  unint64_t v40 = v447;
  if (v39)
  {
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = *(void *)(a1 + 800);
    int v44 = *(_DWORD *)(v27 + 276);
    uint64_t v45 = *(unsigned int *)(a1 + 960);
    do
    {
      if (*(_DWORD *)(v43 + 4 * v41) - *(_DWORD *)(v43 + 4 * v45) >= v44)
      {
        *(_DWORD *)(a1 + 960) = v41;
        uint64_t v45 = v41;
      }
      if (v40[v41] - v40[v42] >= v44) {
        uint64_t v42 = v41;
      }
      ++v41;
    }
    while (v39 != v41);
  }
  else
  {
    uint64_t v42 = 0;
  }
  *(float *)(a1 + 1944) = (float)v40[v42] * 0.03125;
  uint64_t v46 = a1 + 88;
  sub_1CB901390((void *)(a1 + 88));
  uint64_t v47 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
  unsigned int v48 = *(unsigned __int16 **)(*((void *)v47 + 116) + 16);
  int v49 = *v48;
  BOOL v50 = (v49 - 9) > 0x3C || ((1 << (v49 - 9)) & 0x1000000000000605) == 0;
  BOOL v51 = !v50 || v49 == 0;
  BOOL v52 = !v51 && (v48[4] & 0x10) == 0 && (v48[8] & 1) == 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(void *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1050) = 0;
  uint64_t v53 = *((void *)v47 + 6);
  uint64_t v445 = *((void *)v47 + 7);
  if (v53 != v445)
  {
    int v54 = 0;
    uint64_t v441 = (uint64_t *)(a1 + 1072);
    uint64_t v434 = (void *)(a1 + 1088);
    while (1)
    {
      uint64_t v55 = *(void **)(v53 + 8);
      if (v55) {
        break;
      }
      BOOL v61 = v52;
LABEL_153:
      v53 += 272;
      BOOL v52 = v61;
      if (v53 == v445)
      {
        uint64_t v47 = *(llvm::ScheduleDAGMILive **)(a1 + 8);
        goto LABEL_158;
      }
    }
    int v56 = (unsigned __int16 *)v55[2];
    uint64_t v57 = *((void *)v56 + 2);
    int v58 = *v56;
    if ((v58 - 9) <= 0x3C && ((1 << (v58 - 9)) & 0x1000000000000605) != 0
      || v58 == 0)
    {
      BOOL v61 = 0;
    }
    else
    {
      BOOL v61 = (v56[4] & 0x10) == 0 && (*((void *)v56 + 2) & 1) == 0;
    }
    if ((v57 & 0x10120) != 0) {
      ++*(_DWORD *)(a1 + 1064);
    }
    if ((v57 & 0x20) == 0 || (uint64_t v62 = *((unsigned __int8 *)v56 + 4), v63 = v55[4], *(unsigned char *)(v63 + 32 * v62) != 7))
    {
LABEL_125:
      if ((v57 & 0x100) != 0)
      {
        unint64_t v83 = v55[6];
        if (v83 >= 8)
        {
          if ((v83 & 7) != 0)
          {
            if ((v55[6] & 7) != 3 || (v83 & 0xFFFFFFFFFFFFFFF8) == 0 || !*(_DWORD *)(v83 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_140;
            }
          }
          else
          {
            v83 &= 0xFFFFFFFFFFFFFFF8;
            v55[6] = v83;
          }
          if ((v83 & 7) != 0)
          {
            int v84 = *(uint64_t **)((v83 & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          else
          {
            int v84 = (uint64_t *)(v83 & 0xFFFFFFFFFFFFFFF8);
            v55[6] = v84;
          }
          uint64_t v85 = *v84;
          if ((v85 & 4) == 0 && (v85 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            int v86 = v54;
            UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v85 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
            int v54 = v86;
            if (UnderlyingObject)
            {
              *(void *)&long long v454 = UnderlyingObject;
              *((void *)&v454 + 1) = v53;
              sub_1CB90140C((void *)(a1 + 1112), &v454);
              int v54 = v86;
            }
          }
        }
      }
LABEL_140:
      v54 += v52 && !v61;
      if ((*(unsigned char *)(v55[2] + 17) & 2) != 0)
      {
        int v88 = v54;
        uint64_t v450 = (void *)v53;
        uint64_t v451 = 0;
        sub_1CB9019C0(v46, &v450, &v451, (uint64_t)&v454);
        uint64_t v89 = *(unsigned int *)(v53 + 120);
        if (v89)
        {
          uint64_t v90 = v454;
          int v91 = *(void **)(v53 + 112);
          uint64_t v92 = 16 * v89;
          int v54 = v88;
          while (1)
          {
            unint64_t v93 = *v91 & 0xFFFFFFFFFFFFFFF8;
            if ((*v91 & 6) != 0 || v93 == 0) {
              break;
            }
            uint64_t v95 = *(void *)(v93 + 8);
            if (!v95 || (*(unsigned char *)(*(void *)(v95 + 16) + 16) & 0x20) == 0) {
              break;
            }
            ++*(_DWORD *)(v90 + 8);
            v91 += 2;
            v92 -= 16;
            if (!v92) {
              goto LABEL_153;
            }
          }
          *(_DWORD *)(v90 + 8) = -1;
        }
        else
        {
          int v54 = v88;
        }
      }
      goto LABEL_153;
    }
    unint64_t v64 = *(unsigned int *)(v63 + 32 * v62 + 4);
    unint64_t v65 = *(void *)(a1 + 1080);
    if (v65)
    {
      uint8x8_t v66 = (uint8x8_t)vcnt_s8((int8x8_t)v65);
      v66.i16[0] = vaddlv_u8(v66);
      if (v66.u32[0] > 1uLL)
      {
        uint64_t v2 = *(unsigned int *)(v63 + 32 * v62 + 4);
        if (v65 <= v64) {
          uint64_t v2 = v64 % v65;
        }
      }
      else
      {
        uint64_t v2 = (v65 - 1) & v64;
      }
      int v67 = *(uint64_t ***)(*v441 + 8 * v2);
      if (v67)
      {
        for (unint64_t j = *v67; j; unint64_t j = (uint64_t *)*j)
        {
          unint64_t v69 = j[1];
          if (v69 == v64)
          {
            if (*((_DWORD *)j + 4) == v64) {
              goto LABEL_125;
            }
          }
          else
          {
            if (v66.u32[0] > 1uLL)
            {
              if (v69 >= v65) {
                v69 %= v65;
              }
            }
            else
            {
              v69 &= v65 - 1;
            }
            if (v69 != v2) {
              break;
            }
          }
        }
      }
    }
    int v443 = v54;
    uint64_t v70 = operator new(0x20uLL);
    void *v70 = 0;
    v70[1] = v64;
    *((_DWORD *)v70 + 4) = v64;
    v70[3] = v53;
    float v71 = (float)(unint64_t)(*(void *)(a1 + 1096) + 1);
    float v72 = *(float *)(a1 + 1104);
    if (v65 && (float)(v72 * (float)v65) >= v71)
    {
      int v54 = v443;
    }
    else
    {
      BOOL v73 = (v65 & (v65 - 1)) != 0;
      if (v65 < 3) {
        BOOL v73 = 1;
      }
      unint64_t v74 = v73 | (2 * v65);
      unint64_t v75 = vcvtps_u32_f32(v71 / v72);
      if (v74 <= v75) {
        size_t prime = v75;
      }
      else {
        size_t prime = v74;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v65 = *(void *)(a1 + 1080);
      }
      int v54 = v443;
      if (prime > v65) {
        goto LABEL_156;
      }
      if (prime < v65)
      {
        unint64_t v77 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 1096) / *(float *)(a1 + 1104));
        if (v65 < 3 || (uint8x8_t v78 = (uint8x8_t)vcnt_s8((int8x8_t)v65), v78.i16[0] = vaddlv_u8(v78), v78.u32[0] > 1uLL))
        {
          unint64_t v77 = std::__next_prime(v77);
          int v54 = v443;
        }
        else
        {
          uint64_t v79 = 1 << -(char)__clz(v77 - 1);
          if (v77 >= 2) {
            unint64_t v77 = v79;
          }
        }
        if (prime <= v77) {
          size_t prime = v77;
        }
        if (prime < v65)
        {
LABEL_156:
          sub_1CD3F1760((uint64_t)v441, prime);
          int v54 = v443;
        }
      }
      unint64_t v65 = *(void *)(a1 + 1080);
      if ((v65 & (v65 - 1)) != 0)
      {
        if (v65 <= v64) {
          uint64_t v2 = v64 % v65;
        }
        else {
          uint64_t v2 = v64;
        }
      }
      else
      {
        uint64_t v2 = (v65 - 1) & v64;
      }
    }
    uint64_t v80 = *v441;
    int v81 = *(void **)(*v441 + 8 * v2);
    if (v81)
    {
      void *v70 = *v81;
    }
    else
    {
      void *v70 = *v434;
      void *v434 = v70;
      *(void *)(v80 + 8 * v2) = v434;
      if (!*v70)
      {
LABEL_124:
        ++*(void *)(a1 + 1096);
        uint64_t v46 = a1 + 88;
        goto LABEL_125;
      }
      unint64_t v82 = *(void *)(*v70 + 8);
      if ((v65 & (v65 - 1)) != 0)
      {
        if (v82 >= v65) {
          v82 %= v65;
        }
      }
      else
      {
        v82 &= v65 - 1;
      }
      int v81 = (void *)(*v441 + 8 * v82);
    }
    void *v81 = v70;
    goto LABEL_124;
  }
  int v54 = 0;
LABEL_158:
  *(_DWORD *)(a1 + 1948) = v54;
  uint64_t v96 = *((void *)v47 + 77);
  int v97 = *(_DWORD *)(v96 + 264);
  if (v97)
  {
    uint64_t v98 = *(void *)(*((void *)v47 + 116) + 24);
    uint64_t v99 = *(void *)(v96 + 248);
    unsigned int v100 = v97 - 1;
    uint64_t v101 = ((v98 >> 4) ^ (v98 >> 9)) & (v97 - 1);
    uint64_t v102 = *(void *)(v99 + 16 * v101);
    if (v98 == v102)
    {
LABEL_163:
      uint64_t v105 = *(void *)(v99 + 16 * v101 + 8);
      *(unsigned char *)(a1 + 964) = 1;
      if (v105)
      {
        uint64_t v107 = v98 + 88;
        __int16 v106 = *(void **)(v98 + 88);
        if (((*(void *)(v107 + 8) - (void)v106) & 0x7FFFFFFF8) == 8 && *v106 == **(void **)(v105 + 32)) {
          *(unsigned char *)(a1 + 964) = 0;
        }
      }
      goto LABEL_168;
    }
    int v103 = 1;
    while (v102 != -4096)
    {
      int v104 = v101 + v103++;
      uint64_t v101 = v104 & v100;
      uint64_t v102 = *(void *)(v99 + 16 * v101);
      if (v98 == v102) {
        goto LABEL_163;
      }
    }
  }
  *(unsigned char *)(a1 + 964) = 1;
LABEL_168:
  llvm::ScheduleDAGMILive::computeDFSResult(v47);
  *(_DWORD *)(a1 + 984) = 0;
  uint64_t v108 = (*(void *)(*(void *)(*(void *)(a1 + 8) + 2720) + 208)
        - *(void *)(*(void *)(*(void *)(a1 + 8) + 2720) + 200)) >> 2;
  *(_DWORD *)(a1 + 1040) = v108;
  if ((v108 + 63) < 0x40)
  {
    unsigned int v110 = 0;
  }
  else
  {
    uint64_t v109 = (v108 + 63) >> 6;
    if (v109 > *(_DWORD *)(a1 + 988)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    bzero(*(void **)(a1 + 976), 8 * v109);
    unsigned int v110 = (v108 + 63) >> 6;
    *(_DWORD *)(a1 + 984) = v109;
  }
  if ((v108 & 0x3F) != 0)
  {
    uint64_t v111 = *(void *)(a1 + 976) + 8 * v110;
    *(void *)(v111 - 8) &= ~(-1 << (v108 & 0x3F));
  }
  if (!*(unsigned char *)(a1 + 2048)) {
    goto LABEL_174;
  }
  *(_DWORD *)(a1 + 2052) = -252645135
                         * ((*(void *)(*(void *)(a1 + 8) + 56) - *(void *)(*(void *)(a1 + 8) + 48)) >> 4);
  uint64_t v112 = (void **)(a1 + 1960);
  uint64_t v113 = *(unsigned int *)(a1 + 1968);
  if (v113) {
    bzero(*v112, 8 * v113);
  }
  uint64_t v442 = (uint64_t *)(a1 + 2192);
  sub_1CD3C7F68((_DWORD *)(a1 + 2192));
  uint64_t v444 = (void **)(a1 + 2240);
  uint64_t v114 = *(unsigned int *)(a1 + 2248);
  if (v114) {
    bzero(*v444, 8 * v114);
  }
  *(void *)(a1 + 2224) = *(void *)(a1 + 2216);
  sub_1CD3F1608((_OWORD *)(a1 + 1152));
  int v115 = *(_DWORD *)(a1 + 2052);
  uint64_t v116 = *(unsigned int *)(a1 + 1968);
  if ((*(_DWORD *)(a1 + 2024) & 0x3F) != 0)
  {
    uint64_t v429 = *(void *)(a1 + 1960) + 8 * v116;
    *(void *)(v429 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 2024) & 0x3F));
  }
  unsigned int v117 = v116;
  *(_DWORD *)(a1 + 2024) = v115;
  unsigned int v118 = v115 + 63;
  if (v116 != (v115 + 63) >> 6)
  {
    uint64_t v119 = v118 >> 6;
    if (v116 > v119)
    {
      *(_DWORD *)(a1 + 1968) = v119;
      unsigned int v117 = v118 >> 6;
    }
    else
    {
      if (v119 > *(_DWORD *)(a1 + 1972)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v119 != v116) {
        bzero((char *)*v112 + 8 * v116, 8 * (v119 - v116));
      }
      unsigned int v117 = v119;
      *(_DWORD *)(a1 + 1968) = v119;
      int v115 = *(_DWORD *)(a1 + 2024);
    }
  }
  int v120 = v115 & 0x3F;
  if (v120) {
    *((void *)*v112 + v117 - 1) &= ~(-1 << v120);
  }
  sub_1CD3C7FB8((uint64_t *)(a1 + 2064), *(unsigned int *)(a1 + 2052));
  int v121 = *(_DWORD *)(a1 + 2052);
  uint64_t v122 = *(unsigned int *)(a1 + 2248);
  if ((*(_DWORD *)(a1 + 2304) & 0x3F) != 0)
  {
    uint64_t v430 = *(void *)(a1 + 2240) + 8 * v122;
    *(void *)(v430 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 2304) & 0x3F));
  }
  unsigned int v123 = v122;
  *(_DWORD *)(a1 + 2304) = v121;
  unsigned int v124 = v121 + 63;
  if (v122 != (v121 + 63) >> 6)
  {
    uint64_t v125 = v124 >> 6;
    if (v122 > v125)
    {
      *(_DWORD *)(a1 + 2248) = v125;
      unsigned int v123 = v124 >> 6;
    }
    else
    {
      if (v125 > *(_DWORD *)(a1 + 2252)) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v125 != v122) {
        bzero((char *)*v444 + 8 * v122, 8 * (v125 - v122));
      }
      unsigned int v123 = v125;
      *(_DWORD *)(a1 + 2248) = v125;
      int v121 = *(_DWORD *)(a1 + 2304);
    }
  }
  int v126 = v121 & 0x3F;
  if (v126) {
    *((void *)*v444 + v123 - 1) &= ~(-1 << v126);
  }
  unint64_t v127 = *(unsigned int *)(a1 + 2052);
  uint64_t v128 = *(void *)(a1 + 2216);
  unint64_t v129 = (*(void *)(a1 + 2224) - v128) >> 2;
  if (v127 > v129)
  {
    sub_1CD3C83A4((char **)(a1 + 2216), v127 - v129);
  }
  else if (v127 < v129)
  {
    *(void *)(a1 + 2224) = v128 + 4 * v127;
  }
  uint64_t v130 = *(void *)(a1 + 8);
  uint64_t v131 = *(void *)(v130 + 48);
  uint64_t v132 = *(void *)(v130 + 56);
  if (v131 != v132)
  {
    while (1)
    {
      uint64_t v133 = *(void *)(v131 + 8);
      uint64_t v134 = *(unsigned __int16 **)(v133 + 16);
      int v135 = *v134;
      if ((v135 - 1) <= 1 && (*(unsigned char *)(*(void *)(v133 + 32) + 48) & 8) != 0) {
        goto LABEL_211;
      }
      uint64_t v136 = *((void *)v134 + 1);
      if ((*(_WORD *)(v133 + 44) & 0xC) != 0 && (*(_WORD *)(v133 + 44) & 4) == 0) {
        break;
      }
      if ((v136 & 0x80000) != 0) {
        goto LABEL_211;
      }
LABEL_214:
      v131 += 272;
      if (v131 == v132) {
        goto LABEL_222;
      }
    }
    if ((v136 & 0x80000) == 0)
    {
      while ((*(_WORD *)(v133 + 44) & 8) != 0)
      {
        uint64_t v133 = *(void *)(v133 + 8);
        if ((*(unsigned char *)(*(void *)(v133 + 16) + 10) & 8) != 0) {
          goto LABEL_211;
        }
      }
      goto LABEL_214;
    }
LABEL_211:
    if ((v135 & 0xFFFE) != 0x2EC4 && (*((void *)v134 + 2) & 0xC0) != 0)
    {
      *(void *)&long long v454 = v131;
      *((_DWORD *)sub_1CD3C84D0(v442, &v454) + 2) = 1065353216;
      *(void *)((char *)*v444 + (((unint64_t)*(unsigned int *)(v131 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v131 + 192);
    }
    goto LABEL_214;
  }
LABEL_222:
  uint64_t v138 = *(unsigned int *)(a1 + 2248);
  if (!v138)
  {
LABEL_226:
    *(unsigned char *)(a1 + 2048) = 0;
    goto LABEL_174;
  }
  uint64_t v139 = *(void **)(a1 + 2240);
  uint64_t v140 = 8 * v138;
  while (!*v139)
  {
    ++v139;
    v140 -= 8;
    if (!v140) {
      goto LABEL_226;
    }
  }
  *(void *)(a1 + 2112) = 0;
  if (!*(_DWORD *)(a1 + 2200)) {
    goto LABEL_174;
  }
  *(void *)(a1 + 2096) = *(void *)(a1 + 2088);
  unsigned int v141 = *(_DWORD *)(a1 + 2052);
  uint64_t v450 = v452;
  HIDWORD(v451) = 6;
  if (v141 + 63 >= 0x1C0)
  {
    LODWORD(v451) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod();
  }
  if (v141 + 63 >= 0x40) {
    bzero(v452, 8 * ((v141 + 63) >> 6));
  }
  LODWORD(v451) = (v141 + 63) >> 6;
  for (unsigned int k = v141; ; v141 = k)
  {
    unsigned int v142 = v141 >> 6;
    if (v141 < 0x40) {
      break;
    }
    uint64_t v143 = 0;
    int v144 = v450;
    if (v142 <= 1) {
      unsigned int v145 = 1;
    }
    else {
      unsigned int v145 = v141 >> 6;
    }
    uint64_t v146 = 8 * v145;
    while (*(void *)((char *)v450 + v143) == -1)
    {
      v143 += 8;
      if (v146 == v143) {
        goto LABEL_246;
      }
    }
LABEL_248:
    uint64_t v147 = *(void *)(a1 + 8);
    uint64_t v148 = v451;
    uint64_t v149 = 8 * v451;
    if (v451)
    {
      uint64_t v150 = 8 * v451;
      unsigned __int16 v151 = v144;
      do
      {
        void *v151 = ~*v151;
        ++v151;
        v150 -= 8;
      }
      while (v150);
    }
    char v152 = &v144[v148];
    char v153 = v141 & 0x3F;
    if ((v141 & 0x3F) != 0)
    {
      *(v152 - 1) &= ~(-1 << v153);
    }
    else if (!v141)
    {
LABEL_260:
      int v161 = -1;
      goto LABEL_262;
    }
    uint64_t v154 = 0;
    uint64_t v155 = (v141 - 1) & 0xFFFFFFC0;
    unsigned __int16 v156 = v144;
    while (1)
    {
      uint64_t v158 = *v156++;
      uint64_t v157 = v158;
      unint64_t v159 = v155 == v154 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v141 : -1;
      unint64_t v160 = v159 & v157;
      if (v160) {
        break;
      }
      v154 += 64;
      if (v155 + 64 == v154) {
        goto LABEL_260;
      }
    }
    int v161 = __clz(__rbit64(v160)) + v154;
LABEL_262:
    uint64_t v162 = *(void *)(v147 + 48);
    if (v148)
    {
      do
      {
        void *v144 = ~*v144;
        ++v144;
        v149 -= 8;
      }
      while (v149);
    }
    if ((v141 & 0x3F) != 0) {
      *(v152 - 1) &= ~(-1 << v153);
    }
    sub_1CB901E48((void *)a1, (uint64_t *)&v450, v162 + 272 * v161);
  }
LABEL_246:
  if ((v141 & 0x3F) != 0)
  {
    int v144 = v450;
    if (*((void *)v450 + v142) != ~(-1 << (v141 & 0x3F))) {
      goto LABEL_248;
    }
  }
  uint64_t v163 = *(void *)(a1 + 2072);
  uint64_t v164 = *(void *)(a1 + 2064);
  while (v163 != v164)
  {
    int v166 = *(void **)(v163 - 72);
    v163 -= 72;
    BOOL v165 = v166;
    if ((void *)(v163 + 16) != v166) {
      free(v165);
    }
  }
  *(void *)(a1 + 2072) = v164;
  uint64_t v167 = *(void *)(a1 + 2344);
  uint64_t v168 = *(void *)(a1 + 2336);
  while (v167 != v168)
  {
    BOOL v170 = *(void **)(v167 - 72);
    v167 -= 72;
    BOOL v169 = v170;
    if ((void *)(v167 + 16) != v170) {
      free(v169);
    }
  }
  BOOL v171 = (uint64_t *)(a1 + 2336);
  *(void *)(a1 + 2344) = v168;
  unsigned int v172 = *(_DWORD *)(a1 + 2052);
  if (v172)
  {
    for (unsigned int m = 0; m < v172; ++m)
    {
      *(void *)&long long v454 = v455;
      HIDWORD(v454) = 6;
      if (v172 + 63 >= 0x1C0)
      {
        DWORD2(v454) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      if (v172 + 63 >= 0x40) {
        bzero(v455, 8 * ((v172 + 63) >> 6));
      }
      DWORD2(v454) = (v172 + 63) >> 6;
      unsigned int v456 = v172;
      unint64_t v174 = *(void *)(a1 + 2072);
      if (v174 >= *(void *)(a1 + 2080))
      {
        uint64_t v176 = sub_1CB838200((uint64_t *)(a1 + 2064), (uint64_t)&v454);
      }
      else
      {
        *(void *)unint64_t v174 = v174 + 16;
        *(void *)(v174 + 8) = 0x600000000;
        if ((long long *)v174 != &v454)
        {
          int v175 = DWORD2(v454);
          if (DWORD2(v454))
          {
            if (DWORD2(v454) >= 7uLL) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v174 + 16), (const void *)v454, 8 * DWORD2(v454));
            *(_DWORD *)(v174 + 8) = v175;
            unsigned int v172 = v456;
          }
        }
        *(_DWORD *)(v174 + 64) = v172;
        uint64_t v176 = v174 + 72;
      }
      *(void *)(a1 + 2072) = v176;
      unint64_t v177 = *(void *)(a1 + 2344);
      if (v177 >= *(void *)(a1 + 2352))
      {
        BOOL v171 = (uint64_t *)(a1 + 2336);
        uint64_t v179 = sub_1CB838200((uint64_t *)(a1 + 2336), (uint64_t)&v454);
      }
      else
      {
        *(void *)unint64_t v177 = v177 + 16;
        *(void *)(v177 + 8) = 0x600000000;
        if ((long long *)v177 != &v454)
        {
          int v178 = DWORD2(v454);
          if (DWORD2(v454))
          {
            if (DWORD2(v454) >= 7uLL) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy((void *)(v177 + 16), (const void *)v454, 8 * DWORD2(v454));
            *(_DWORD *)(v177 + 8) = v178;
          }
        }
        *(_DWORD *)(v177 + 64) = v456;
        uint64_t v179 = v177 + 72;
        BOOL v171 = (uint64_t *)(a1 + 2336);
      }
      *(void *)(a1 + 2344) = v179;
      if ((unsigned char *)v454 != v455) {
        free((void *)v454);
      }
      unsigned int v172 = *(_DWORD *)(a1 + 2052);
    }
  }
  uint64_t v431 = (void *)(a1 + 2216);
  uint64_t v180 = *(uint64_t **)(a1 + 2088);
  uint64_t v435 = *(uint64_t **)(a1 + 2096);
  uint64_t v181 = (uint64_t *)(a1 + 2064);
  if (v180 != v435)
  {
    do
    {
      uint64_t v182 = *v180;
      uint64_t v183 = *(unsigned int *)(*v180 + 120);
      if (v183)
      {
        uint64_t v184 = *(void **)(v182 + 112);
        int v185 = &v184[2 * v183];
        do
        {
          unsigned int v186 = *(_DWORD *)((*v184 & 0xFFFFFFFFFFFFFFF8) + 192);
          if (v186 != -1)
          {
            uint64_t v187 = *v181;
            uint64_t v188 = *v181 + 72 * v186;
            unint64_t v189 = *(unsigned int *)(v182 + 192);
            unsigned int v190 = *(void **)v188;
            *(void *)(*(void *)v188 + ((v189 >> 3) & 0x1FFFFFF8)) |= 1 << v189;
            uint64_t v191 = v187 + 72 * v189;
            int v192 = (unsigned int *)(v188 + 64);
            unsigned int v193 = *(_DWORD *)(v191 + 64);
            if (*(_DWORD *)(v188 + 64) < v193)
            {
              int v198 = *(_DWORD *)(v188 + 64) & 0x3F;
              uint64_t v199 = *(unsigned int *)(v188 + 8);
              if (v198) {
                v190[v199 - 1] &= ~(-1 << v198);
              }
              unsigned int v200 = v199;
              *int v192 = v193;
              unsigned int v201 = v193 + 63;
              if (v199 != (v193 + 63) >> 6)
              {
                uint64_t v202 = v201 >> 6;
                if (v199 > v202)
                {
                  *(_DWORD *)(v188 + 8) = v202;
                  unsigned int v200 = v201 >> 6;
                  BOOL v171 = (uint64_t *)(a1 + 2336);
                }
                else
                {
                  if (v202 > *(_DWORD *)(v188 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v202 != v199)
                  {
                    __int16 v203 = v180;
                    int v438 = v199;
                    bzero((void *)(*(void *)v188 + 8 * v199), 8 * (v202 - v199));
                    LODWORD(v199) = v438;
                    uint64_t v180 = v203;
                  }
                  v200 += v202 - v199;
                  *(_DWORD *)(v188 + 8) = v200;
                  unsigned int v193 = *v192;
                  uint64_t v181 = (uint64_t *)(a1 + 2064);
                  BOOL v171 = (uint64_t *)(a1 + 2336);
                }
              }
              int v204 = v193 & 0x3F;
              if (v204) {
                *(void *)(*(void *)v188 + 8 * v200 - 8) &= ~(-1 << v204);
              }
            }
            uint64_t v194 = *(unsigned int *)(v191 + 8);
            if (v194)
            {
              __int16 v195 = *(uint64_t **)v191;
              uint64_t v196 = *(void **)v188;
              do
              {
                uint64_t v197 = *v195++;
                *v196++ |= v197;
                --v194;
              }
              while (v194);
            }
          }
          v184 += 2;
        }
        while (v184 != v185);
      }
      ++v180;
    }
    while (v180 != v435);
    uint64_t v205 = *(void *)(a1 + 2096);
    uint64_t v436 = *(void *)(a1 + 2088);
    while (v205 != v436)
    {
      uint64_t v207 = *(void *)(v205 - 8);
      v205 -= 8;
      uint64_t v206 = v207;
      uint64_t v208 = *(unsigned int *)(v207 + 40);
      if (v208)
      {
        uint64_t v209 = *(void **)(v206 + 32);
        BOOL v210 = &v209[2 * v208];
        do
        {
          unsigned int v211 = *(_DWORD *)((*v209 & 0xFFFFFFFFFFFFFFF8) + 192);
          if (v211 != -1)
          {
            uint64_t v212 = *v171;
            uint64_t v213 = *v171 + 72 * v211;
            unint64_t v214 = *(unsigned int *)(v206 + 192);
            BOOL v215 = *(void **)v213;
            *(void *)(*(void *)v213 + ((v214 >> 3) & 0x1FFFFFF8)) |= 1 << v214;
            uint64_t v216 = v212 + 72 * v214;
            BOOL v217 = (unsigned int *)(v213 + 64);
            unsigned int v218 = *(_DWORD *)(v216 + 64);
            if (*(_DWORD *)(v213 + 64) < v218)
            {
              int v223 = *(_DWORD *)(v213 + 64) & 0x3F;
              uint64_t v224 = *(unsigned int *)(v213 + 8);
              if (v223) {
                v215[v224 - 1] &= ~(-1 << v223);
              }
              unsigned int v225 = v224;
              unsigned int *v217 = v218;
              unsigned int v226 = v218 + 63;
              if (v224 != (v218 + 63) >> 6)
              {
                uint64_t v227 = v226 >> 6;
                if (v224 > v227)
                {
                  *(_DWORD *)(v213 + 8) = v227;
                  unsigned int v225 = v226 >> 6;
                }
                else
                {
                  if (v227 > *(_DWORD *)(v213 + 12)) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  if (v227 != v224)
                  {
                    uint64_t v228 = v205;
                    int v439 = v224;
                    bzero((void *)(*(void *)v213 + 8 * v224), 8 * (v227 - v224));
                    LODWORD(v224) = v439;
                    uint64_t v205 = v228;
                    uint64_t v181 = (uint64_t *)(a1 + 2064);
                  }
                  v225 += v227 - v224;
                  *(_DWORD *)(v213 + 8) = v225;
                  unsigned int v218 = *v217;
                }
                BOOL v171 = (uint64_t *)(a1 + 2336);
              }
              int v229 = v218 & 0x3F;
              if (v229) {
                *(void *)(*(void *)v213 + 8 * v225 - 8) &= ~(-1 << v229);
              }
            }
            uint64_t v219 = *(unsigned int *)(v216 + 8);
            if (v219)
            {
              uint64_t v220 = *(uint64_t **)v216;
              uint64_t v221 = *(void **)v213;
              do
              {
                uint64_t v222 = *v220++;
                *v221++ |= v222;
                --v219;
              }
              while (v219);
            }
          }
          v209 += 2;
        }
        while (v209 != v210);
      }
    }
  }
  if (*(_DWORD *)(a1 + 2052))
  {
    unint64_t v230 = 0;
    uint64_t v231 = *v181;
    do
    {
      uint64_t v232 = *v171 + 72 * v230;
      uint64_t v233 = v231 + 72 * v230;
      uint32x4_t v234 = (unsigned int *)(v233 + 64);
      unsigned int v235 = *(_DWORD *)(v232 + 64);
      if (*(_DWORD *)(v233 + 64) < v235)
      {
        int v245 = *(_DWORD *)(v233 + 64) & 0x3F;
        uint64_t v246 = *(unsigned int *)(v233 + 8);
        if (v245) {
          *(void *)(*(void *)v233 + 8 * v246 - 8) &= ~(-1 << v245);
        }
        unsigned int v247 = v246;
        *uint32x4_t v234 = v235;
        unsigned int v248 = v235 + 63;
        if (v246 != (v235 + 63) >> 6)
        {
          uint64_t v249 = v248 >> 6;
          if (v246 > v249)
          {
            *(_DWORD *)(v233 + 8) = v249;
            unsigned int v247 = v248 >> 6;
            BOOL v171 = (uint64_t *)(a1 + 2336);
          }
          else
          {
            if (v249 > *(_DWORD *)(v233 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            if (v249 != v246) {
              bzero((void *)(*(void *)v233 + 8 * v246), 8 * (v249 - v246));
            }
            unsigned int v247 = v249;
            *(_DWORD *)(v233 + 8) = v249;
            unsigned int v235 = *v234;
            uint64_t v181 = (uint64_t *)(a1 + 2064);
            BOOL v171 = (uint64_t *)(a1 + 2336);
          }
        }
        int v250 = v235 & 0x3F;
        if (v250) {
          *(void *)(*(void *)v233 + 8 * v247 - 8) &= ~(-1 << v250);
        }
      }
      uint64_t v236 = *(unsigned int *)(v232 + 8);
      if (v236)
      {
        long long v237 = *(uint64_t **)v232;
        long long v238 = *(void **)v233;
        do
        {
          uint64_t v239 = *v237++;
          *v238++ |= v239;
          --v236;
        }
        while (v236);
      }
      uint64_t v231 = *v181;
      uint64_t v240 = *v181 + 72 * v230;
      int v241 = *(void **)v240;
      uint64_t v242 = *(unsigned int *)(v240 + 8);
      if (v242)
      {
        uint64_t v243 = 8 * v242;
        uint64_t v244 = v241;
        do
        {
          *uint64_t v244 = ~*v244;
          ++v244;
          v243 -= 8;
        }
        while (v243);
      }
      if ((*(_DWORD *)(v231 + 72 * v230 + 64) & 0x3F) != 0) {
        v241[v242 - 1] &= ~(-1 << (*(_DWORD *)(v231 + 72 * v230 + 64) & 0x3F));
      }
      v241[v230 >> 6] &= ~(1 << v230);
      ++v230;
    }
    while (v230 < *(unsigned int *)(a1 + 2052));
  }
  uint64_t v251 = *(void *)(a1 + 2088);
  uint64_t v437 = *(void *)(a1 + 2096);
  if (v251 != v437)
  {
    uint64_t v433 = (void **)(a1 + 2120);
    unint64_t v432 = (_DWORD *)(a1 + 2384);
    do
    {
      uint64_t v252 = *(void *)(a1 + 2112);
      unsigned int v253 = *(_DWORD *)(*(void *)v251 + 192);
      uint64_t v254 = *(void *)(a1 + 2064);
      unint64_t v255 = (void **)(v254 + 72 * v253);
      *(void *)(a1 + 2112) = v255;
      uint64_t v256 = *((unsigned int *)v255 + 2);
      if (v256)
      {
        uint64_t v257 = 0;
        uint64_t v258 = (char *)*v255;
        while (!*(void *)&v258[v257])
        {
          v257 += 8;
          if (8 * v256 == v257) {
            goto LABEL_386;
          }
        }
        unsigned int v259 = *(_DWORD *)(a1 + 2248) >= v256 ? *((_DWORD *)v255 + 2) : *(_DWORD *)(a1 + 2248);
        if (v259)
        {
          uint64_t v260 = 0;
          uint64_t v261 = 8 * v259;
          while ((*(void *)((unsigned char *)*v444 + v260) & *(void *)&v258[v260]) == 0)
          {
            v260 += 8;
            if (v261 == v260) {
              goto LABEL_386;
            }
          }
          if (!v252
            || *(_DWORD *)(v254 + 72 * v253 + 64) != *(_DWORD *)(v252 + 64)
            || memcmp(*v255, *(const void **)v252, 8 * v256))
          {
            if (v433 != v255)
            {
              uint64_t v262 = *(unsigned int *)(a1 + 2128);
              if (v262 >= v256)
              {
                memmove(*v433, v258, 8 * v256);
              }
              else
              {
                if (*(_DWORD *)(a1 + 2132) < v256)
                {
                  *(_DWORD *)(a1 + 2128) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod();
                }
                if (v262) {
                  memmove(*v433, v258, 8 * v262);
                }
                else {
                  uint64_t v262 = 0;
                }
                uint64_t v263 = *((unsigned int *)v255 + 2);
                if (v262 != v263) {
                  memcpy((char *)*v433 + 8 * v262, (char *)*v255 + 8 * v262, (unsigned char *)*v255 + 8 * v263 - ((unsigned char *)*v255 + 8 * v262));
                }
              }
              *(_DWORD *)(a1 + 2128) = v256;
            }
            int v264 = *(_DWORD *)(v254 + 72 * v253 + 64);
            *(_DWORD *)(a1 + 2184) = v264;
            uint64_t v265 = *(void *)(a1 + 2368);
            uint64_t v266 = *(void *)(a1 + 2360);
            if (v265 == v266)
            {
              uint64_t v267 = (void *)(a1 + 2120);
            }
            else
            {
              uint64_t v267 = (void *)(a1 + 2120);
              do
              {
                uint64_t v269 = *(void **)(v265 - 72);
                v265 -= 72;
                unsigned int v268 = v269;
                if ((void *)(v265 + 16) != v269) {
                  free(v268);
                }
              }
              while (v265 != v266);
              int v264 = *(_DWORD *)(a1 + 2184);
            }
            *(void *)(a1 + 2368) = v266;
            if (v264)
            {
              unsigned int v270 = 0;
              do
              {
                unsigned int v271 = v270 >> 6;
                unsigned int v272 = v264 - 1;
                if (v270 >> 6 > (v264 - 1) >> 6) {
                  break;
                }
                uint64_t v273 = 0;
                uint64_t v274 = v272 >> 6;
                int v275 = v270 & 0x3F;
                BOOL v50 = v275 == 0;
                unint64_t v276 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v275;
                uint64_t v277 = v50 ? -1 : ~v276;
                unint64_t v278 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v272;
                unsigned int v279 = v271 << 6;
                uint64_t v280 = v274 - v271;
                uint64_t v281 = *v267 + 8 * v271;
                while (1)
                {
                  uint64_t v282 = v273 ? -1 : v277;
                  unint64_t v283 = v280 == v273 ? v278 : -1;
                  unint64_t v284 = v282 & v283 & *(void *)(v281 + 8 * v273);
                  if (v284) {
                    break;
                  }
                  v279 += 64;
                  if (v280 + 1 == ++v273) {
                    goto LABEL_469;
                  }
                }
                int v285 = __clz(__rbit64(v284));
                if (v285 + v279 == -1) {
                  break;
                }
                uint64_t v286 = *(void *)(*(void *)(a1 + 8) + 48);
                if (!v286) {
                  break;
                }
                unsigned int v287 = *(_DWORD *)(v286 + 272 * (int)(v285 + v279) + 192);
                uint64_t v288 = *v171;
                uint64_t v289 = *v171 + 72 * v287;
                uint64_t v290 = v455;
                *(void *)&long long v454 = v455;
                *((void *)&v454 + 1) = 0x600000000;
                unsigned int v291 = *(_DWORD *)(v289 + 8);
                if (&v454 == (long long *)v289 || v291 == 0)
                {
                  unsigned int v291 = 0;
                }
                else
                {
                  if (v291 >= 7) {
                    llvm::SmallVectorBase<unsigned int>::grow_pod();
                  }
                  memcpy(v455, *(const void **)v289, 8 * *(unsigned int *)(v289 + 8));
                  uint64_t v290 = (unsigned char *)v454;
                  DWORD2(v454) = v291;
                }
                unsigned int v293 = *(_DWORD *)(v288 + 72 * v287 + 64);
                unsigned int v456 = v293;
                uint64_t v294 = *(void *)(a1 + 2112);
                unsigned int v295 = *(_DWORD *)(v294 + 8);
                if (v295 >= v291) {
                  uint64_t v296 = v291;
                }
                else {
                  uint64_t v296 = v295;
                }
                if (v296)
                {
                  uint64_t v297 = *(uint64_t **)v294;
                  uint64_t v298 = v290;
                  uint64_t v299 = v296;
                  do
                  {
                    uint64_t v300 = *v297++;
                    *v298++ &= v300;
                    --v299;
                  }
                  while (v299);
                }
                if (v291 > v295)
                {
                  do
                  {
                    *(void *)&v290[8 * v296] = 0;
                    LODWORD(v296) = v296 + 1;
                  }
                  while (v291 != v296);
                }
                *(void *)&v290[8 * (v287 >> 6)] |= 1 << v287;
                unint64_t v301 = *(void *)(a1 + 2368);
                if (v301 >= *(void *)(a1 + 2376))
                {
                  uint64_t v303 = sub_1CB838200((uint64_t *)(a1 + 2360), (uint64_t)&v454);
                }
                else
                {
                  *(void *)unint64_t v301 = v301 + 16;
                  *(void *)(v301 + 8) = 0x600000000;
                  if ((long long *)v301 != &v454)
                  {
                    int v302 = DWORD2(v454);
                    if (DWORD2(v454))
                    {
                      if (DWORD2(v454) >= 7uLL) {
                        llvm::SmallVectorBase<unsigned int>::grow_pod();
                      }
                      memcpy((void *)(v301 + 16), (const void *)v454, 8 * DWORD2(v454));
                      *(_DWORD *)(v301 + 8) = v302;
                      unsigned int v293 = v456;
                    }
                  }
                  *(_DWORD *)(v301 + 64) = v293;
                  uint64_t v303 = v301 + 72;
                }
                *(void *)(a1 + 2368) = v303;
                uint64_t v304 = (uint64_t *)v454;
                uint64_t v305 = DWORD2(v454);
                if (DWORD2(v454))
                {
                  uint64_t v306 = 8 * DWORD2(v454);
                  uint64_t v307 = (void *)v454;
                  do
                  {
                    *uint64_t v307 = ~*v307;
                    ++v307;
                    v306 -= 8;
                  }
                  while (v306);
                }
                if ((v456 & 0x3F) != 0) {
                  v304[v305 - 1] &= ~(-1 << (v456 & 0x3F));
                }
                unsigned int v308 = *(_DWORD *)(a1 + 2128);
                if (v305 >= v308) {
                  uint64_t v309 = v308;
                }
                else {
                  uint64_t v309 = v305;
                }
                if (v309)
                {
                  uint64_t v310 = (void *)*v267;
                  uint64_t v311 = v304;
                  uint64_t v312 = v309;
                  do
                  {
                    uint64_t v313 = *v311++;
                    *v310++ &= v313;
                    --v312;
                  }
                  while (v312);
                }
                if (v308 > v305)
                {
                  int v314 = (void *)*v267;
                  do
                  {
                    v314[v309] = 0;
                    LODWORD(v309) = v309 + 1;
                  }
                  while (v308 != v309);
                }
                if (v304 != (uint64_t *)v455) {
                  free(v304);
                }
                unsigned int v270 = v285 + v279 + 1;
                int v264 = *(_DWORD *)(a1 + 2184);
              }
              while (v285 - v264 + v279 != -1);
            }
LABEL_469:
            int v315 = *(_DWORD *)(a1 + 2392);
            if (v315 || *(_DWORD *)(a1 + 2396))
            {
              uint64_t v316 = *(unsigned int *)(a1 + 2400);
              if (v316 <= 4 * v315 || v316 < 0x41)
              {
                if (v316)
                {
                  uint64_t v317 = *(_DWORD **)v432;
                  uint64_t v318 = 8 * v316;
                  do
                  {
                    _DWORD *v317 = -1;
                    v317 += 2;
                    v318 -= 8;
                  }
                  while (v318);
                }
                *(void *)(a1 + 2392) = 0;
              }
              else
              {
                sub_1CB83872C(v432);
              }
            }
            *(void *)(a1 + 2320) = *(void *)(a1 + 2312);
            uint64_t v319 = *(void *)(a1 + 2360);
            uint64_t v320 = *(void *)(a1 + 2368);
            uint64_t v440 = v320;
            while (2)
            {
              if (v319 == v320) {
                goto LABEL_386;
              }
              uint64_t v321 = *(unsigned int *)(v319 + 8);
              unsigned int v322 = *(_DWORD *)(a1 + 2248);
              if (v322 >= v321) {
                uint64_t v323 = v321;
              }
              else {
                uint64_t v323 = v322;
              }
              if (v323)
              {
                uint64_t v324 = (uint64_t *)*v444;
                uint64_t v325 = *(void **)v319;
                uint64_t v326 = v323;
                do
                {
                  uint64_t v327 = *v324++;
                  *v325++ &= v327;
                  --v326;
                }
                while (v326);
              }
              if (v321 > v322)
              {
                uint64_t v328 = *(void **)v319;
                do
                {
                  v328[v323] = 0;
                  LODWORD(v323) = v323 + 1;
                }
                while (v321 != v323);
              }
              int v329 = *(_DWORD *)(v319 + 64);
              if (v329)
              {
                uint64_t v330 = 0;
                uint64_t v331 = 0;
                uint64_t v332 = *(void **)v319;
                uint64_t v333 = (v329 - 1) & 0xFFFFFFC0;
                while (1)
                {
                  unint64_t v334 = v333 + v330 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v329;
                  unint64_t v335 = v334 & v332[v331];
                  if (v335) {
                    break;
                  }
                  ++v331;
                  v330 -= 64;
                  if (v333 + v330 == -64) {
                    goto LABEL_593;
                  }
                }
                int v336 = __clz(__rbit64(v335));
                if (v330 - v336 != 1)
                {
                  signed int v337 = v336 - v330;
                  *(void *)(a1 + 2416) = *(void *)(a1 + 2408);
                  uint64_t v338 = *(void *)(a1 + 2384);
                  uint64_t v339 = *(unsigned int *)(a1 + 2400);
                  if (v339)
                  {
                    LODWORD(v340) = (v339 - 1) & (37 * v337);
                    uint64_t v341 = (int *)(v338 + 8 * v340);
                    int v342 = *v341;
                    if (!(*v341 - v336 + v330))
                    {
LABEL_499:
                      if ((int *)(v338 + 8 * v339) == v341)
                      {
                        if (v433 != (void **)v319)
                        {
                          uint64_t v349 = *(unsigned int *)(a1 + 2128);
                          if (v349 >= v321)
                          {
                            if (v321) {
                              memmove(*v433, v332, 8 * v321);
                            }
                          }
                          else
                          {
                            if (*(_DWORD *)(a1 + 2132) < v321)
                            {
                              *(_DWORD *)(a1 + 2128) = 0;
                              llvm::SmallVectorBase<unsigned int>::grow_pod();
                            }
                            if (v349) {
                              memmove(*v433, v332, 8 * v349);
                            }
                            else {
                              uint64_t v349 = 0;
                            }
                            uint64_t v392 = *(unsigned int *)(v319 + 8);
                            if (v349 != v392) {
                              memcpy((char *)*v433 + 8 * v349, (const void *)(*(void *)v319 + 8 * v349), *(void *)v319 + 8 * v392 - (*(void *)v319 + 8 * v349));
                            }
                          }
                          *(_DWORD *)(a1 + 2128) = v321;
                          int v329 = *(_DWORD *)(v319 + 64);
                        }
                        *(_DWORD *)(a1 + 2184) = v329;
                        *(void *)(*(void *)(a1 + 2120) + v331 * 8) &= ~(1 << v336);
                        unsigned int v393 = sub_1CB902014((void *)a1, v337, v319);
                        uint64_t v394 = *(void **)(a1 + 2408);
                        uint64_t v395 = *(void **)(a1 + 2416);
                        if (v394 != v395)
                        {
                          float v396 = 1.0 / (double)v393;
                          do
                          {
                            *(void *)&long long v454 = 0;
                            *(void *)&long long v454 = *v394;
                            uint64_t v397 = (float *)sub_1CD3C84D0(v442, &v454);
                            v397[2] = v397[2] + v396;
                            uint64_t v398 = *(float **)(a1 + 2320);
                            unint64_t v399 = *(void *)(a1 + 2328);
                            if ((unint64_t)v398 >= v399)
                            {
                              unint64_t v401 = *(float **)(a1 + 2312);
                              uint64_t v402 = ((char *)v398 - (char *)v401) >> 4;
                              unint64_t v403 = v402 + 1;
                              if ((unint64_t)(v402 + 1) >> 60) {
LABEL_623:
                              }
                                abort();
                              uint64_t v404 = v399 - (void)v401;
                              if (v404 >> 3 > v403) {
                                unint64_t v403 = v404 >> 3;
                              }
                              if ((unint64_t)v404 >= 0x7FFFFFFFFFFFFFF0) {
                                unint64_t v405 = 0xFFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v405 = v403;
                              }
                              if (v405 >> 60) {
LABEL_624:
                              }
                                sub_1CB833614();
                              uint64_t v406 = (char *)operator new(16 * v405);
                              uint64_t v407 = (float *)&v406[16 * v402];
                              *(void *)uint64_t v407 = v454;
                              v407[2] = v396;
                              if (v398 == v401)
                              {
                                uint64_t v409 = &v406[16 * v402];
                                BOOL v171 = (uint64_t *)(a1 + 2336);
                              }
                              else
                              {
                                uint64_t v408 = &v406[16 * v402];
                                BOOL v171 = (uint64_t *)(a1 + 2336);
                                do
                                {
                                  uint64_t v409 = v408 - 16;
                                  *((_OWORD *)v408 - 1) = *((_OWORD *)v398 - 1);
                                  v398 -= 4;
                                  v408 -= 16;
                                }
                                while (v398 != v401);
                              }
                              *(void *)(a1 + 2312) = v409;
                              uint64_t v400 = v407 + 4;
                              *(void *)(a1 + 2320) = v407 + 4;
                              *(void *)(a1 + 2328) = &v406[16 * v405];
                              if (v401) {
                                operator delete(v401);
                              }
                            }
                            else
                            {
                              *(void *)uint64_t v398 = v454;
                              v398[2] = v396;
                              uint64_t v400 = v398 + 4;
                            }
                            *(void *)(a1 + 2320) = v400;
                            ++v394;
                          }
                          while (v394 != v395);
                        }
                      }
                      else
                      {
                        unsigned int v343 = v341[1];
                        uint64_t v344 = *v171;
                        uint64_t v345 = *v171 + 72 * v337;
                        uint64_t v346 = v455;
                        *(void *)&long long v454 = v455;
                        *((void *)&v454 + 1) = 0x600000000;
                        unsigned int v347 = *(_DWORD *)(v345 + 8);
                        if (&v454 == (long long *)v345 || v347 == 0)
                        {
                          unsigned int v347 = 0;
                        }
                        else
                        {
                          if (v347 >= 7) {
                            llvm::SmallVectorBase<unsigned int>::grow_pod();
                          }
                          memcpy(v455, *(const void **)v345, 8 * *(unsigned int *)(v345 + 8));
                          uint64_t v346 = (unsigned char *)v454;
                          DWORD2(v454) = v347;
                        }
                        unsigned int v350 = *(_DWORD *)(v344 + 72 * v337 + 64);
                        unsigned int v456 = v350;
                        uint64_t v351 = *(void *)(a1 + 2112);
                        unsigned int v352 = *(_DWORD *)(v351 + 8);
                        if (v352 >= v347) {
                          uint64_t v353 = v347;
                        }
                        else {
                          uint64_t v353 = v352;
                        }
                        BOOL v171 = (uint64_t *)(a1 + 2336);
                        if (v353)
                        {
                          uint64_t v354 = *(uint64_t **)v351;
                          uint64_t v355 = v346;
                          uint64_t v356 = v353;
                          do
                          {
                            uint64_t v357 = *v354++;
                            *v355++ &= v357;
                            --v356;
                          }
                          while (v356);
                        }
                        if (v347 > v352)
                        {
                          do
                          {
                            *(void *)&v346[8 * v353] = 0;
                            LODWORD(v353) = v353 + 1;
                          }
                          while (v347 != v353);
                        }
                        unsigned int v358 = *(_DWORD *)(a1 + 2248);
                        if (v358 >= v347) {
                          uint64_t v359 = v347;
                        }
                        else {
                          uint64_t v359 = v358;
                        }
                        if (v359)
                        {
                          uint64_t v360 = (uint64_t *)*v444;
                          int v361 = v346;
                          uint64_t v362 = v359;
                          do
                          {
                            uint64_t v363 = *v360++;
                            *v361++ &= v363;
                            --v362;
                          }
                          while (v362);
                        }
                        if (v347 > v358)
                        {
                          do
                          {
                            *(void *)&v346[8 * v359] = 0;
                            LODWORD(v359) = v359 + 1;
                          }
                          while (v347 != v359);
                        }
                        *(void *)&v346[v331 * 8] |= 1 << v336;
                        if (v350)
                        {
                          unsigned int v364 = 0;
                          float v365 = 1.0 / (double)v343;
                          while (1)
                          {
                            unsigned int v366 = v364 >> 6;
                            unsigned int v367 = v350 - 1;
                            uint64_t v346 = (unsigned char *)v454;
                            if (v364 >> 6 > (v350 - 1) >> 6) {
                              break;
                            }
                            uint64_t v368 = 0;
                            uint64_t v369 = v367 >> 6;
                            unint64_t v370 = 0xFFFFFFFFFFFFFFFFLL >> ~(_BYTE)v367;
                            unint64_t v371 = (v364 & 0x3F) != 0 ? ~(0xFFFFFFFFFFFFFFFFLL >> -(v364 & 0x3F)) : -1;
                            int v372 = (v366 << 6) | 1;
                            uint64_t v373 = v369 - v366;
                            uint64_t v374 = v454 + 8 * v366;
                            while (1)
                            {
                              uint64_t v375 = v368 ? -1 : v371;
                              unint64_t v376 = v373 == v368 ? v370 : -1;
                              unint64_t v377 = v375 & v376 & *(void *)(v374 + 8 * v368);
                              if (v377) {
                                break;
                              }
                              v372 += 64;
                              if (v373 + 1 == ++v368) {
                                goto LABEL_565;
                              }
                            }
                            int v378 = __clz(__rbit64(v377));
                            unsigned int v364 = v378 + v372;
                            if ((v378 + v372) < 2) {
                              break;
                            }
                            uint64_t v446 = *(void *)(*(void *)(a1 + 8) + 48) + 272 * (int)(v364 - 1);
                            unsigned int v379 = (float *)sub_1CD3C84D0(v442, &v446);
                            v379[2] = v379[2] + v365;
                            uint64_t v380 = *(float **)(a1 + 2320);
                            unint64_t v381 = *(void *)(a1 + 2328);
                            if ((unint64_t)v380 >= v381)
                            {
                              uint64_t v383 = *(float **)(a1 + 2312);
                              uint64_t v384 = ((char *)v380 - (char *)v383) >> 4;
                              unint64_t v385 = v384 + 1;
                              if ((unint64_t)(v384 + 1) >> 60) {
                                goto LABEL_623;
                              }
                              uint64_t v386 = v381 - (void)v383;
                              if (v386 >> 3 > v385) {
                                unint64_t v385 = v386 >> 3;
                              }
                              if ((unint64_t)v386 >= 0x7FFFFFFFFFFFFFF0) {
                                unint64_t v387 = 0xFFFFFFFFFFFFFFFLL;
                              }
                              else {
                                unint64_t v387 = v385;
                              }
                              if (v387 >> 60) {
                                goto LABEL_624;
                              }
                              BOOL v388 = (char *)operator new(16 * v387);
                              uint64_t v389 = (float *)&v388[16 * v384];
                              *(void *)uint64_t v389 = v446;
                              v389[2] = v365;
                              if (v380 == v383)
                              {
                                uint64_t v391 = &v388[16 * v384];
                              }
                              else
                              {
                                uint64_t v390 = &v388[16 * v384];
                                do
                                {
                                  uint64_t v391 = v390 - 16;
                                  *((_OWORD *)v390 - 1) = *((_OWORD *)v380 - 1);
                                  v380 -= 4;
                                  v390 -= 16;
                                }
                                while (v380 != v383);
                              }
                              *(void *)(a1 + 2312) = v391;
                              uint64_t v382 = v389 + 4;
                              *(void *)(a1 + 2320) = v389 + 4;
                              *(void *)(a1 + 2328) = &v388[16 * v387];
                              if (v383) {
                                operator delete(v383);
                              }
                            }
                            else
                            {
                              *(void *)uint64_t v380 = v446;
                              v380[2] = v365;
                              uint64_t v382 = v380 + 4;
                            }
                            *(void *)(a1 + 2320) = v382;
                            unsigned int v350 = v456;
                            BOOL v171 = (uint64_t *)(a1 + 2336);
                            if (!(v378 - v456 + v372))
                            {
                              uint64_t v346 = (unsigned char *)v454;
                              break;
                            }
                          }
                        }
LABEL_565:
                        if (v346 != v455) {
                          free(v346);
                        }
                      }
                      goto LABEL_593;
                    }
                    int v410 = v330 - v336;
                    int v411 = 1;
                    while (1)
                    {
                      BOOL v171 = (uint64_t *)(a1 + 2336);
                      if (v342 == -1) {
                        break;
                      }
                      int v412 = v340 + v411++;
                      uint64_t v340 = v412 & (v339 - 1);
                      int v342 = *(_DWORD *)(v338 + 8 * v340);
                      if (!(v410 + v342))
                      {
                        uint64_t v341 = (int *)(v338 + 8 * v340);
                        BOOL v171 = (uint64_t *)(a1 + 2336);
                        goto LABEL_499;
                      }
                    }
                  }
                  uint64_t v341 = (int *)(v338 + 8 * v339);
                  goto LABEL_499;
                }
              }
LABEL_593:
              v319 += 72;
              uint64_t v320 = v440;
              continue;
            }
          }
          uint64_t v413 = *(void *)(a1 + 2312);
          uint64_t v414 = *(void *)(a1 + 2320);
          while (v413 != v414)
          {
            float v415 = *(float *)(v413 + 8);
            uint64_t v416 = (float *)sub_1CD3C84D0(v442, (void *)v413);
            v416[2] = v415 + v416[2];
            v413 += 16;
          }
        }
      }
LABEL_386:
      v251 += 8;
    }
    while (v251 != v437);
  }
  if (v450 != v452) {
    free(v450);
  }
  if (*(_DWORD *)(a1 + 2200))
  {
    uint64_t v417 = *(void *)(a1 + 2096);
    uint64_t v418 = *(void *)(a1 + 2088);
    while (v417 != v418)
    {
      uint64_t v420 = *(void *)(v417 - 8);
      v417 -= 8;
      uint64_t v419 = v420;
      *(void *)&long long v454 = v420;
      float v421 = 0.0;
      float v422 = 0.0;
      if ((*(void *)((char *)*v444 + (((unint64_t)*(unsigned int *)(v420 + 192) >> 3) & 0x1FFFFFF8)) >> *(_DWORD *)(v420 + 192)))
      {
        float v422 = *((float *)sub_1CD3C84D0(v442, &v454) + 2);
        uint64_t v419 = v454;
      }
      uint64_t v423 = *(unsigned int *)(v419 + 120);
      if (v423)
      {
        uint64_t v424 = *(void **)(v419 + 112);
        uint64_t v425 = 16 * v423;
        do
        {
          uint64_t v426 = *(unsigned int *)((*v424 & 0xFFFFFFFFFFFFFFF8) + 192);
          if (v426 != -1 && *(float *)(*v431 + 4 * v426) > v421) {
            float v421 = *(float *)(*v431 + 4 * v426);
          }
          v424 += 2;
          v425 -= 16;
        }
        while (v425);
      }
      float v427 = v422 + v421;
      uint64_t v428 = *(unsigned int *)(v419 + 192);
      if (*(float *)(*v431 + 4 * v428) < v427) {
        *(float *)(*v431 + 4 * v428) = v427;
      }
    }
  }
LABEL_174:
  if (v447 != v449) {
    free(v447);
  }
}

double sub_1CB8FEBC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((*(unsigned char *)(v2 + 580) & 1) == 0) {
    llvm::SUnit::ComputeDepth((llvm::SUnit *)(v2 + 344));
  }
  unsigned int v3 = *(_DWORD *)(v2 + 584);
  uint64_t v4 = *(llvm::SUnit ***)(a1 + 256);
  uint64_t v5 = *(llvm::SUnit ***)(a1 + 264);
  while (v4 != v5)
  {
    uint64_t v6 = *v4;
    if ((*((unsigned char *)*v4 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(*v4);
    }
    if (*((_DWORD *)v6 + 60) > v3)
    {
      unsigned int v3 = *((_DWORD *)v6 + 60);
      if ((*((unsigned char *)v6 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v6);
        unsigned int v3 = *((_DWORD *)v6 + 60);
      }
    }
    ++v4;
  }
  uint64_t v7 = *(llvm::SUnit ***)(a1 + 312);
  uint64_t v8 = *(llvm::SUnit ***)(a1 + 320);
  while (v7 != v8)
  {
    uint64_t v9 = *v7;
    if ((*((unsigned char *)*v7 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(*v7);
    }
    if (*((_DWORD *)v9 + 60) > v3)
    {
      unsigned int v3 = *((_DWORD *)v9 + 60);
      if ((*((unsigned char *)v9 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v9);
        unsigned int v3 = *((_DWORD *)v9 + 60);
      }
    }
    ++v7;
  }
  size_t v10 = *(llvm::SUnit ***)(a1 + 368);
  unsigned int v11 = *(llvm::SUnit ***)(a1 + 376);
  while (v10 != v11)
  {
    unsigned int v12 = *v10;
    if ((*((unsigned char *)*v10 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(*v10);
    }
    if (*((_DWORD *)v12 + 60) > v3)
    {
      unsigned int v3 = *((_DWORD *)v12 + 60);
      if ((*((unsigned char *)v12 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v12);
        unsigned int v3 = *((_DWORD *)v12 + 60);
      }
    }
    ++v10;
  }
  uint64_t v13 = *(llvm::SUnit ***)(a1 + 424);
  unsigned int v14 = *(llvm::SUnit ***)(a1 + 432);
  while (v13 != v14)
  {
    int v15 = *v13;
    if ((*((unsigned char *)*v13 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(*v13);
    }
    if (*((_DWORD *)v15 + 60) > v3)
    {
      unsigned int v3 = *((_DWORD *)v15 + 60);
      if ((*((unsigned char *)v15 + 236) & 1) == 0)
      {
        llvm::SUnit::ComputeDepth(v15);
        unsigned int v3 = *((_DWORD *)v15 + 60);
      }
    }
    ++v13;
  }
  float v16 = *(float *)(a1 + 1944);
  float v17 = 0.0;
  float v18 = 0.0;
  if (v16 > 0.0) {
    float v18 = (float)(v3 + 30 * *(_DWORD *)(a1 + 1948)) / (float)(v16 * 32.0);
  }
  if ((float)(v18 - (float)(int)v18) != 0.0) {
    float v17 = 1.0;
  }
  unsigned int v19 = (float)(v18 + v17);
  if (v19 <= 1) {
    unsigned int v19 = 1;
  }
  if (v19 >= 0x20) {
    unsigned int v19 = 32;
  }
  unsigned int v20 = 8 * (0x70 / v19);
  if (v20 >= 0xF8) {
    unsigned int v20 = 248;
  }
  int v21 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 1936) = v20 * v21;
  *(_DWORD *)(a1 + 1940) = 32 * v21;
  double result = 0.0;
  *(_OWORD *)(a1 + 2032) = 0u;
  return result;
}

uint64_t sub_1CB8FEDD4(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = a1;
  v342[16] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 256) == *(void *)(a1 + 264)
    && *(void *)(a1 + 312) == *(void *)(a1 + 320)
    && *(void *)(a1 + 368) == *(void *)(a1 + 376)
    && *(void *)(a1 + 424) == *(void *)(a1 + 432))
  {
    return 0;
  }
  *a2 = 0;
  uint64_t v312 = 0;
  uint64_t v313 = 0;
  uint64_t v314 = -4294967271;
  __int16 v315 = 0;
  int v316 = 0;
  char v319 = 0;
  __int16 v320 = 0;
  char v321 = 0;
  int v322 = 0x7FFFFFFF;
  uint64_t v323 = -1;
  uint64_t v324 = -1;
  uint64_t v325 = -1;
  __int16 v326 = 0;
  uint64_t v299 = 0;
  uint64_t v300 = 0;
  uint64_t v301 = -4294967271;
  __int16 v302 = 0;
  int v303 = 0;
  char v304 = 0;
  __int16 v305 = 0;
  char v306 = 0;
  int v307 = 0x7FFFFFFF;
  uint64_t v308 = -1;
  uint64_t v309 = -1;
  uint64_t v310 = -1;
  __int16 v311 = 0;
  uint64_t v286 = 0;
  uint64_t v287 = 0;
  uint64_t v288 = -4294967271;
  __int16 v289 = 0;
  int v290 = 0;
  char v291 = 0;
  __int16 v292 = 0;
  char v293 = 0;
  int v294 = 0x7FFFFFFF;
  uint64_t v295 = -1;
  uint64_t v296 = -1;
  uint64_t v297 = -1;
  __int16 v298 = 0;
  uint64_t v273 = 0;
  uint64_t v274 = 0;
  uint64_t v275 = -4294967271;
  __int16 v276 = 0;
  int v277 = 0;
  char v278 = 0;
  __int16 v279 = 0;
  char v280 = 0;
  int v281 = 0x7FFFFFFF;
  uint64_t v282 = -1;
  uint64_t v283 = -1;
  uint64_t v284 = -1;
  __int16 v285 = 0;
  unsigned int v3 = *(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 4912) + 4 * *(unsigned int *)(a1 + 64));
  float v4 = (float)v3;
  unsigned int v5 = *(_DWORD *)(a1 + 1936);
  *(unsigned char *)(a1 + 1048) = (float)(*(float *)(a1 + 2432) * (float)v5) <= (float)v3;
  unsigned int v269 = v3;
  if (v3 > v5) {
    unsigned int v5 = v3;
  }
  *(_DWORD *)(a1 + 1936) = v5;
  uint64_t v6 = (llvm::SmallPtrSetImplBase *)(a1 + 456);
  uint64_t v8 = *(void **)(a1 + 456);
  uint64_t v7 = *(void **)(a1 + 464);
  if (v7 != v8)
  {
    uint64_t v225 = *(unsigned int *)(v2 + 472);
    if (v225 >= 0x21 && 4 * (*(_DWORD *)(v2 + 476) - *(_DWORD *)(v2 + 480)) < v225)
    {
      llvm::SmallPtrSetImplBase::shrink_and_clear((void **)(v2 + 456));
      goto LABEL_9;
    }
    memset(v7, 255, 8 * v225);
  }
  *(void *)(v2 + 476) = 0;
LABEL_9:
  unsigned int v270 = *(_DWORD *)(v2 + 572) - *(_DWORD *)(v2 + 576);
  uint64_t v9 = *(void *)(v2 + 560);
  uint64_t v10 = 568;
  if (v9 == *(void *)(v2 + 552)) {
    uint64_t v10 = 572;
  }
  uint64_t v11 = *(unsigned int *)(v2 + v10);
  uint64_t v272 = v2;
  if (v11)
  {
    uint64_t v12 = 8 * v11;
    uint64_t v13 = *(uint64_t **)(v2 + 560);
    while ((unint64_t)*v13 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v13;
      v12 -= 8;
      if (!v12) {
        goto LABEL_148;
      }
    }
  }
  else
  {
    uint64_t v13 = *(uint64_t **)(v2 + 560);
  }
  unsigned int v14 = (void *)(v9 + 8 * v11);
  if (v13 != v14)
  {
    uint64_t v15 = v2 + 88;
    uint64_t v16 = *v13;
    if (!*v13) {
      goto LABEL_33;
    }
LABEL_19:
    if ((*(unsigned char *)(*(void *)(*(void *)(v16 + 8) + 16) + 16) & 0x20) != 0)
    {
      uint64_t v17 = *(unsigned int *)(v16 + 40);
      if (v17)
      {
        float v18 = *(void **)(v16 + 32);
        uint64_t v19 = 16 * v17;
        do
        {
          unint64_t v20 = *v18 & 0xFFFFFFFFFFFFFFF8;
          if ((*v18 & 6) == 0 && v20 != 0)
          {
            uint64_t v22 = *(void *)(v20 + 8);
            if (v22)
            {
              if ((*(unsigned char *)(*(void *)(v22 + 16) + 17) & 2) != 0
                && (*(_DWORD *)(sub_1CB904224(v15, v20) + 8) + 1) > 1)
              {
                goto LABEL_101;
              }
            }
          }
          v18 += 2;
          v19 -= 16;
        }
        while (v19);
      }
    }
    while (1)
    {
LABEL_33:
      uint64_t v2 = v272;
      if (sub_1CB904354(v16, *(void *)(v272 + 2040))) {
        goto LABEL_135;
      }
      uint64_t v23 = *(void **)(v16 + 8);
      uint64_t v24 = *(void *)(v23[2] + 16);
      if ((*(unsigned char *)(v16 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth((llvm::SUnit *)v16);
      }
      unsigned int v25 = *(_DWORD *)(v16 + 240);
      if ((v24 & 0x20) != 0
        && (uint64_t v26 = *(unsigned __int8 *)(v23[2] + 4), v27 = v23[4], *(unsigned char *)(v27 + 32 * v26) == 7))
      {
        int8x8_t v28 = *(int8x8_t *)(v272 + 1080);
        if (v28)
        {
          unint64_t v29 = *(unsigned int *)(v27 + 32 * v26 + 4);
          uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28);
          v30.i16[0] = vaddlv_u8(v30);
          if (v30.u32[0] <= 1uLL)
          {
            unint64_t v31 = (v28.i32[0] - 1) & v29;
          }
          else
          {
            unint64_t v31 = v29;
            if (*(void *)&v28 <= v29) {
              unint64_t v31 = v29 % *(void *)&v28;
            }
          }
          uint64_t v32 = *(uint64_t ***)(*(void *)(v272 + 1072) + 8 * v31);
          if (v32)
          {
            int v33 = *v32;
            if (!*v32) {
              goto LABEL_53;
            }
            while (1)
            {
              unint64_t v34 = v33[1];
              if (v34 == v29)
              {
                if (*((_DWORD *)v33 + 4) == v29)
                {
                  uint64_t v38 = (uint64_t *)*v33;
                  while (v33 != v38)
                  {
                    uint64_t v39 = v33[3];
                    uint64_t v40 = v39;
                    if ((*(unsigned char *)(v39 + 236) & 1) == 0)
                    {
                      llvm::SUnit::ComputeDepth((llvm::SUnit *)v33[3]);
                      uint64_t v40 = v33[3];
                    }
                    if (*(_DWORD *)(v39 + 240) + *(unsigned __int16 *)(v40 + 226) >= v25) {
                      goto LABEL_101;
                    }
                    int v33 = (uint64_t *)*v33;
                  }
LABEL_53:
                  uint64_t v2 = v272;
                  break;
                }
              }
              else
              {
                if (v30.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&v28) {
                    v34 %= *(void *)&v28;
                  }
                }
                else
                {
                  v34 &= *(void *)&v28 - 1;
                }
                if (v34 != v31) {
                  goto LABEL_53;
                }
              }
              int v33 = (uint64_t *)*v33;
              if (!v33) {
                goto LABEL_53;
              }
            }
          }
        }
      }
      else if ((v24 & 0x100) != 0)
      {
        unint64_t v35 = v23[6];
        if (v35 >= 8)
        {
          if ((v35 & 7) == 0)
          {
            v35 &= 0xFFFFFFFFFFFFFFF8;
            v23[6] = v35;
LABEL_70:
            if ((v35 & 7) != 0)
            {
              uint64_t v41 = *(uint64_t **)((v35 & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            else
            {
              uint64_t v41 = (uint64_t *)(v35 & 0xFFFFFFFFFFFFFFF8);
              v23[6] = v41;
            }
            uint64_t v42 = *v41;
            if ((v42 & 4) == 0 && (v42 & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v42 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
              if (UnderlyingObject)
              {
                int8x8_t v44 = *(int8x8_t *)(v272 + 1120);
                if (v44)
                {
                  unint64_t v45 = 0x9DDFEA08EB382D69
                      * (((8 * UnderlyingObject) + 8) ^ ((unint64_t)UnderlyingObject >> 32));
                  unint64_t v46 = 0x9DDFEA08EB382D69 * (((unint64_t)UnderlyingObject >> 32) ^ (v45 >> 47) ^ v45);
                  unint64_t v47 = 0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47));
                  uint8x8_t v48 = (uint8x8_t)vcnt_s8(v44);
                  v48.i16[0] = vaddlv_u8(v48);
                  if (v48.u32[0] <= 1uLL) {
                    uint64_t v49 = (*(void *)&v44 - 1) & v47;
                  }
                  else {
                    uint64_t v49 = v47 < *(void *)&v44 ? v47 : v47 % *(void *)&v44;
                  }
                  BOOL v50 = *(uint64_t ***)(*(void *)(v272 + 1112) + 8 * v49);
                  if (v50)
                  {
                    BOOL v51 = *v50;
                    if (*v50)
                    {
                      while (1)
                      {
                        unint64_t v52 = v51[1];
                        if (v52 == v47)
                        {
                          if ((llvm *)v51[2] == UnderlyingObject)
                          {
                            uint64_t v53 = v51;
                            do
                              uint64_t v53 = (uint64_t *)*v53;
                            while (v53 && (llvm *)v53[2] == UnderlyingObject);
                            while (1)
                            {
                              if (v51 == v53) {
                                goto LABEL_53;
                              }
                              uint64_t v54 = v51[3];
                              uint64_t v55 = v54;
                              if ((*(unsigned char *)(v54 + 236) & 1) == 0)
                              {
                                llvm::SUnit::ComputeDepth((llvm::SUnit *)v51[3]);
                                uint64_t v55 = v51[3];
                              }
                              if (*(_DWORD *)(v54 + 240) + *(unsigned __int16 *)(v55 + 226) >= v25) {
                                break;
                              }
                              BOOL v51 = (uint64_t *)*v51;
                            }
LABEL_101:
                            uint64_t v2 = v272;
                            uint64_t v56 = *(void *)(v272 + 464);
                            uint64_t v57 = *(unsigned int *)(v272 + 476);
                            if (v56 == *(void *)(v272 + 456))
                            {
                              if (v57)
                              {
                                int v58 = 0;
                                uint64_t v59 = 8 * v57;
                                unsigned int v60 = *(uint64_t **)(v272 + 464);
                                do
                                {
                                  if (*v60 == v16) {
                                    goto LABEL_134;
                                  }
                                  if (*v60 == -2) {
                                    int v58 = v60;
                                  }
                                  ++v60;
                                  v59 -= 8;
                                }
                                while (v59);
                                if (v58)
                                {
                                  uint64_t *v58 = v16;
                                  --*(_DWORD *)(v272 + 480);
                                  goto LABEL_134;
                                }
                              }
                              unsigned int v61 = *(_DWORD *)(v272 + 472);
                              if (v57 < v61)
                              {
                                *(_DWORD *)(v272 + 476) = v57 + 1;
                                *(void *)(v56 + 8 * v57) = v16;
                                goto LABEL_134;
                              }
                            }
                            else
                            {
                              unsigned int v61 = *(_DWORD *)(v272 + 472);
                            }
                            if (3 * v61 <= 4 * ((int)v57 - *(_DWORD *)(v272 + 480)))
                            {
                              if (v61 >= 0x40) {
                                v61 *= 2;
                              }
                              else {
                                unsigned int v61 = 128;
                              }
                            }
                            else if (v61 - v57 >= v61 >> 3)
                            {
                              goto LABEL_114;
                            }
                            llvm::SmallPtrSetImplBase::Grow(v6, v61);
                            unsigned int v61 = *(_DWORD *)(v272 + 472);
                            uint64_t v56 = *(void *)(v272 + 464);
LABEL_114:
                            unsigned int v62 = v61 - 1;
                            unsigned int v63 = (v61 - 1) & ((v16 >> 4) ^ (v16 >> 9));
                            unint64_t v64 = (uint64_t *)(v56 + 8 * v63);
                            uint64_t v65 = *v64;
                            if (*v64 == -1)
                            {
                              uint8x8_t v66 = 0;
LABEL_127:
                              if (v66) {
                                uint64_t v70 = v66;
                              }
                              else {
                                uint64_t v70 = v64;
                              }
                              if (*v70 != v16)
                              {
                                if (*v70 == -2) {
                                  --*(_DWORD *)(v272 + 480);
                                }
                                else {
                                  ++*(_DWORD *)(v272 + 476);
                                }
                                uint64_t *v70 = v16;
                              }
                            }
                            else
                            {
                              uint8x8_t v66 = 0;
                              int v67 = 1;
                              while (v65 != v16)
                              {
                                if (v66) {
                                  BOOL v68 = 0;
                                }
                                else {
                                  BOOL v68 = v65 == -2;
                                }
                                if (v68) {
                                  uint8x8_t v66 = v64;
                                }
                                unsigned int v69 = v63 + v67++;
                                unsigned int v63 = v69 & v62;
                                unint64_t v64 = (uint64_t *)(v56 + 8 * (v69 & v62));
                                uint64_t v65 = *v64;
                                if (*v64 == -1) {
                                  goto LABEL_127;
                                }
                              }
                            }
LABEL_134:
                            --v270;
                            goto LABEL_135;
                          }
                        }
                        else
                        {
                          if (v48.u32[0] <= 1uLL)
                          {
                            v52 &= *(void *)&v44 - 1;
                          }
                          else if (v52 >= *(void *)&v44)
                          {
                            v52 %= *(void *)&v44;
                          }
                          if (v52 != v49) {
                            goto LABEL_135;
                          }
                        }
                        BOOL v51 = (uint64_t *)*v51;
                        if (!v51) {
                          goto LABEL_135;
                        }
                      }
                    }
                  }
                }
              }
            }
            goto LABEL_135;
          }
          unsigned int v36 = (_DWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
          BOOL v37 = (v23[6] & 7) != 3 || v36 == 0;
          if (!v37 && *v36) {
            goto LABEL_70;
          }
        }
      }
LABEL_135:
      float v71 = (unint64_t *)(v13 + 1);
      do
      {
        if (v71 == v14) {
          goto LABEL_148;
        }
        unint64_t v72 = *v71++;
        uint64_t v16 = v72;
      }
      while (v72 > 0xFFFFFFFFFFFFFFFDLL);
      uint64_t v13 = (uint64_t *)(v71 - 1);
      if (v16) {
        goto LABEL_19;
      }
    }
  }
LABEL_148:
  *(unsigned char *)(v2 + 1052) = 0;
  uint64_t v332 = (const llvm::SUnit *)v336;
  uint64_t v333 = v336;
  uint64_t v334 = 16;
  int v335 = 0;
  uint64_t v327 = v331;
  uint64_t v328 = v331;
  uint64_t v329 = 16;
  int v330 = 0;
  BOOL v73 = *(llvm::SUnit ***)(v2 + 256);
  unint64_t v74 = *(llvm::SUnit ***)(v2 + 264);
  int v75 = -1;
  while (v73 != v74)
  {
    uint64_t v76 = *v73;
    unint64_t v77 = *(unsigned __int16 **)(*((void *)*v73 + 1) + 16);
    unsigned int v78 = *v77;
    char v79 = v78 - 9;
    if (v78 - 9 <= 0x3C)
    {
      if (((1 << v79) & 0x404) != 0) {
        goto LABEL_168;
      }
      if (((1 << v79) & 0x1000000000000201) != 0) {
        goto LABEL_258;
      }
    }
    if (!*v77) {
      goto LABEL_258;
    }
    uint64_t v80 = *((void *)v77 + 1);
    if ((v80 & 0x10) == 0 && (v77[8] & 1) == 0)
    {
      if ((*((unsigned char *)v76 + 236) & 1) == 0) {
        llvm::SUnit::ComputeDepth(*v73);
      }
      if (v75 <= *((_DWORD *)v76 + 60) + *((unsigned __int16 *)v76 + 113)) {
        int v75 = *((_DWORD *)v76 + 60) + *((unsigned __int16 *)v76 + 113);
      }
      goto LABEL_258;
    }
    if (v78 <= 0x13)
    {
      if (((1 << v78) & 0x80800) != 0) {
        goto LABEL_168;
      }
      if (((1 << v78) & 0x40201) != 0) {
        goto LABEL_258;
      }
    }
    if ((v80 & 0x10) != 0 && v78 != 19 && v78 != 11) {
      goto LABEL_258;
    }
LABEL_168:
    unint64_t v82 = (char *)v333;
    uint64_t v83 = HIDWORD(v334);
    if (v333 != v332)
    {
      unsigned int v87 = v334;
      goto LABEL_179;
    }
    if (!HIDWORD(v334))
    {
LABEL_176:
      unsigned int v87 = v334;
      if (HIDWORD(v334) < v334)
      {
        ++HIDWORD(v334);
        *((void *)v333 + v83) = v76;
        goto LABEL_200;
      }
LABEL_179:
      if (3 * v87 <= 4 * (HIDWORD(v334) - v335))
      {
        if (v87 >= 0x40) {
          v87 *= 2;
        }
        else {
          unsigned int v87 = 128;
        }
      }
      else if (v87 - HIDWORD(v334) >= v87 >> 3)
      {
        goto LABEL_181;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v332, v87);
      unsigned int v87 = v334;
      unint64_t v82 = (char *)v333;
LABEL_181:
      unsigned int v88 = v87 - 1;
      unsigned int v89 = (v87 - 1) & ((v76 >> 4) ^ (v76 >> 9));
      uint64_t v90 = &v82[8 * v89];
      int v91 = *(llvm::SUnit **)v90;
      if (*(void *)v90 == -1)
      {
        uint64_t v92 = 0;
LABEL_193:
        if (v92) {
          uint64_t v96 = (llvm::SUnit **)v92;
        }
        else {
          uint64_t v96 = (llvm::SUnit **)v90;
        }
        if (*v96 != v76)
        {
          if (*v96 == (llvm::SUnit *)-2) {
            --v335;
          }
          else {
            ++HIDWORD(v334);
          }
          uint64_t *v96 = v76;
        }
      }
      else
      {
        uint64_t v92 = 0;
        int v93 = 1;
        while (v91 != v76)
        {
          if (v92) {
            BOOL v94 = 0;
          }
          else {
            BOOL v94 = v91 == (llvm::SUnit *)-2;
          }
          if (v94) {
            uint64_t v92 = v90;
          }
          unsigned int v95 = v89 + v93++;
          unsigned int v89 = v95 & v88;
          uint64_t v90 = &v82[8 * (v95 & v88)];
          int v91 = *(llvm::SUnit **)v90;
          if (*(void *)v90 == -1) {
            goto LABEL_193;
          }
        }
      }
      goto LABEL_200;
    }
    int v84 = 0;
    uint64_t v85 = 8 * HIDWORD(v334);
    int v86 = (llvm::SUnit **)v333;
    while (*v86 != v76)
    {
      if (*v86 == (llvm::SUnit *)-2) {
        int v84 = v86;
      }
      ++v86;
      v85 -= 8;
      if (!v85)
      {
        if (!v84) {
          goto LABEL_176;
        }
        uint64_t *v84 = v76;
        --v335;
        break;
      }
    }
LABEL_200:
    if ((*((unsigned char *)v76 + 236) & 1) == 0) {
      llvm::SUnit::ComputeDepth(v76);
    }
    int v97 = HIDWORD(v334) - v335;
    if ((HIDWORD(v334) - v335) > 7) {
      goto LABEL_481;
    }
    uint64_t v98 = *((unsigned int *)v76 + 10);
    if (v98)
    {
      uint64_t v99 = (void *)*((void *)v76 + 4);
      unsigned int v100 = &v99[2 * v98];
      do
      {
        unint64_t v101 = *v99 & 0xFFFFFFFFFFFFFFF8;
        if ((*(unsigned char *)(v101 + 236) & 1) == 0) {
          llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v99 & 0xFFFFFFFFFFFFFFF8));
        }
        uint64_t v102 = *(unsigned __int16 **)(*(void *)(v101 + 8) + 16);
        int v103 = *v102;
        BOOL v105 = (v103 - 9) <= 0x3C && ((1 << (v103 - 9)) & 0x1000000000000605) != 0
            || v103 == 0;
        if (v105 || (v102[4] & 0x10) != 0 || (v102[8] & 1) != 0)
        {
          __int16 v106 = v328;
          uint64_t v107 = HIDWORD(v329);
          if (v328 != v327)
          {
            unsigned int v111 = v329;
LABEL_229:
            if (3 * v111 <= 4 * (HIDWORD(v329) - v330))
            {
              if (v111 >= 0x40) {
                v111 *= 2;
              }
              else {
                unsigned int v111 = 128;
              }
            }
            else if (v111 - HIDWORD(v329) >= v111 >> 3)
            {
              goto LABEL_231;
            }
            llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v327, v111);
            unsigned int v111 = v329;
            __int16 v106 = v328;
LABEL_231:
            unsigned int v112 = v111 - 1;
            unsigned int v113 = (v111 - 1) & ((v101 >> 4) ^ (v101 >> 9));
            uint64_t v114 = &v106[8 * v113];
            unint64_t v115 = *(void *)v114;
            if (*(void *)v114 == -1)
            {
              uint64_t v116 = 0;
LABEL_243:
              if (v116) {
                int v120 = v116;
              }
              else {
                int v120 = (unint64_t *)v114;
              }
              if (*v120 != v101)
              {
                if (*v120 == -2) {
                  --v330;
                }
                else {
                  ++HIDWORD(v329);
                }
                *int v120 = v101;
              }
            }
            else
            {
              uint64_t v116 = 0;
              int v117 = 1;
              while (v115 != v101)
              {
                if (v116) {
                  BOOL v118 = 0;
                }
                else {
                  BOOL v118 = v115 == -2;
                }
                if (v118) {
                  uint64_t v116 = (unint64_t *)v114;
                }
                unsigned int v119 = v113 + v117++;
                unsigned int v113 = v119 & v112;
                uint64_t v114 = &v106[8 * (v119 & v112)];
                unint64_t v115 = *(void *)v114;
                if (*(void *)v114 == -1) {
                  goto LABEL_243;
                }
              }
            }
            goto LABEL_250;
          }
          if (HIDWORD(v329))
          {
            uint64_t v108 = 0;
            uint64_t v109 = 8 * HIDWORD(v329);
            unsigned int v110 = (unint64_t *)v328;
            while (*v110 != v101)
            {
              if (*v110 == -2) {
                uint64_t v108 = v110;
              }
              ++v110;
              v109 -= 8;
              if (!v109)
              {
                if (!v108) {
                  goto LABEL_226;
                }
                *uint64_t v108 = v101;
                --v330;
                goto LABEL_250;
              }
            }
            goto LABEL_250;
          }
LABEL_226:
          unsigned int v111 = v329;
          if (HIDWORD(v329) >= v329) {
            goto LABEL_229;
          }
          ++HIDWORD(v329);
          *(void *)&v328[8 * v107] = v101;
        }
        else if (v75 <= *(_DWORD *)(v101 + 240) + *(unsigned __int16 *)(v101 + 226))
        {
          int v75 = *(_DWORD *)(v101 + 240) + *(unsigned __int16 *)(v101 + 226);
        }
LABEL_250:
        v99 += 2;
      }
      while (v99 != v100);
    }
LABEL_258:
    ++v73;
  }
  int v271 = 0;
  int v121 = (char *)v342;
  char v122 = 1;
  do
  {
    if ((v122 & 1) == 0)
    {
      int v97 = HIDWORD(v334) - v335;
LABEL_481:
      int v271 = v97;
      break;
    }
    uint64_t v340 = v121;
    uint64_t v341 = 0x1000000000;
    signed int v337 = v339;
    uint64_t v338 = 0x1000000000;
    if (v328 == v327) {
      unsigned int v123 = (uint64_t *)((char *)&v329 + 4);
    }
    else {
      unsigned int v123 = &v329;
    }
    uint64_t v124 = *(unsigned int *)v123;
    if (v124)
    {
      uint64_t v125 = 8 * v124;
      int v126 = (unint64_t *)v328;
      while (*v126 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v126;
        v125 -= 8;
        if (!v125) {
          goto LABEL_395;
        }
      }
    }
    else
    {
      int v126 = (unint64_t *)v328;
    }
    unint64_t v127 = &v328[8 * v124];
    if (v126 == (unint64_t *)v127)
    {
LABEL_395:
      char v128 = 0;
      goto LABEL_430;
    }
    char v128 = 0;
    unint64_t v129 = *v126;
LABEL_279:
    uint64_t v130 = *(unsigned __int16 **)(*(void *)(v129 + 8) + 16);
    int v131 = *v130;
    char v132 = v131 - 9;
    if ((v131 - 9) <= 0x3C)
    {
      if (((1 << v132) & 0x404) != 0) {
        goto LABEL_289;
      }
      if (((1 << v132) & 0x1000000000000201) != 0) {
        goto LABEL_384;
      }
    }
    if (!*v130) {
      goto LABEL_384;
    }
    if ((v130[4] & 0x10) != 0 && v131 != 19 && v131 != 11) {
      goto LABEL_384;
    }
LABEL_289:
    uint64_t v134 = *(unsigned int *)(v129 + 120);
    int v135 = (char *)v333;
    uint64_t v136 = HIDWORD(v334);
    if (v134)
    {
      __int16 v137 = *(void **)(v129 + 112);
      uint64_t v138 = &v137[2 * v134];
      int v139 = v334 - 1;
      while (1)
      {
        unint64_t v140 = *v137 & 0xFFFFFFFFFFFFFFF8;
        if ((*v137 & 6) == 0 && (*(_WORD *)(v140 + 228) & 0x400) == 0)
        {
          if (v333 == v332)
          {
            if (HIDWORD(v334))
            {
              uint64_t v142 = 0;
              while (*(void *)((char *)v333 + v142) != v140)
              {
                v142 += 8;
                if (8 * HIDWORD(v334) == v142)
                {
                  unsigned int v143 = HIDWORD(v334);
                  goto LABEL_316;
                }
              }
              char v152 = (char *)v333 + v142;
              unsigned int v143 = HIDWORD(v334);
              char v153 = v333;
            }
            else
            {
              unsigned int v143 = 0;
LABEL_316:
              char v153 = v333;
              char v152 = (char *)v333 + 8 * HIDWORD(v334);
            }
          }
          else
          {
            unsigned int v144 = v139 & ((v140 >> 4) ^ (v140 >> 9));
            unsigned int v145 = (char *)v333 + 8 * v144;
            uint64_t v146 = *(void *)v145;
            if (*(void *)v145 == -1)
            {
              uint64_t v147 = 0;
LABEL_318:
              if (v147) {
                unsigned int v145 = v147;
              }
              unint64_t v151 = *(void *)v145;
            }
            else
            {
              uint64_t v147 = 0;
              int v148 = 1;
              while (v146 != v140)
              {
                if (v147) {
                  BOOL v149 = 0;
                }
                else {
                  BOOL v149 = v146 == -2;
                }
                if (v149) {
                  uint64_t v147 = v145;
                }
                unsigned int v150 = v144 + v148++;
                unsigned int v144 = v150 & v139;
                unsigned int v145 = (char *)v333 + 8 * (v150 & v139);
                uint64_t v146 = *(void *)v145;
                if (*(void *)v145 == -1) {
                  goto LABEL_318;
                }
              }
              unint64_t v151 = *v137 & 0xFFFFFFFFFFFFFFF8;
            }
            char v152 = v151 == v140 ? v145 : (char *)v333 + 8 * v334;
            unsigned int v143 = HIDWORD(v334);
            char v153 = v332;
          }
          if (v333 != v153) {
            unsigned int v143 = v334;
          }
          if (v152 == (char *)v333 + 8 * v143) {
            break;
          }
        }
        v137 += 2;
        if (v137 == v138) {
          goto LABEL_329;
        }
      }
LABEL_384:
      uint64_t v176 = v126 + 1;
      while (v176 != (unint64_t *)v127)
      {
        unint64_t v177 = *v176++;
        unint64_t v129 = v177;
        if (v177 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          int v126 = v176 - 1;
          goto LABEL_279;
        }
      }
      if (v341)
      {
        int v178 = v340;
        uint64_t v179 = &v340[8 * v341];
        int v180 = v330;
        do
        {
          uint64_t v181 = *(void *)v178;
          uint64_t v182 = v327;
          if (v328 == v327)
          {
            int v183 = HIDWORD(v329);
            uint64_t v184 = &v328[8 * HIDWORD(v329)];
            if (HIDWORD(v329))
            {
              uint64_t v185 = 0;
              while (*(void *)&v328[v185] != v181)
              {
                v185 += 8;
                if (8 * HIDWORD(v329) == v185) {
                  goto LABEL_417;
                }
              }
              uint64_t v184 = &v328[v185];
            }
LABEL_417:
            uint64_t v182 = v328;
          }
          else
          {
            int v186 = v329 - 1;
            unsigned int v187 = (v329 - 1) & ((v181 >> 4) ^ (v181 >> 9));
            uint64_t v184 = &v328[8 * v187];
            uint64_t v188 = *(void *)v184;
            if (*(void *)v184 == -1)
            {
              unint64_t v189 = 0;
LABEL_425:
              if (v189) {
                uint64_t v184 = v189;
              }
              int v183 = HIDWORD(v329);
              if (*(void *)v184 != v181) {
                uint64_t v184 = &v328[8 * v329];
              }
            }
            else
            {
              unint64_t v189 = 0;
              int v190 = 1;
              while (v188 != v181)
              {
                if (v189) {
                  BOOL v191 = 0;
                }
                else {
                  BOOL v191 = v188 == -2;
                }
                if (v191) {
                  unint64_t v189 = v184;
                }
                unsigned int v192 = v187 + v190++;
                unsigned int v187 = v192 & v186;
                uint64_t v184 = &v328[8 * (v192 & v186)];
                uint64_t v188 = *(void *)v184;
                if (*(void *)v184 == -1) {
                  goto LABEL_425;
                }
              }
              int v183 = HIDWORD(v329);
            }
          }
          int v193 = v329;
          if (v328 == v182) {
            int v193 = v183;
          }
          if (v184 != &v328[8 * v193])
          {
            *(void *)uint64_t v184 = -2;
            int v330 = ++v180;
          }
          v178 += 8;
        }
        while (v178 != v179);
      }
LABEL_430:
      if (!v338)
      {
LABEL_472:
        char v212 = 1;
        goto LABEL_473;
      }
      uint64_t v194 = (uint64_t *)v337;
      __int16 v195 = (char *)v337 + 8 * v338;
      uint64_t v196 = v328;
      while (1)
      {
        uint64_t v197 = *v194;
        uint64_t v198 = HIDWORD(v329);
        if (v196 != v327) {
          break;
        }
        if (HIDWORD(v329))
        {
          uint64_t v199 = 0;
          uint64_t v200 = 8 * HIDWORD(v329);
          unsigned int v201 = v196;
          while (*v201 != v197)
          {
            if (*v201 == -2) {
              uint64_t v199 = v201;
            }
            ++v201;
            v200 -= 8;
            if (!v200)
            {
              if (!v199) {
                goto LABEL_440;
              }
              *uint64_t v199 = v197;
              --v330;
              goto LABEL_464;
            }
          }
          goto LABEL_464;
        }
LABEL_440:
        unsigned int v202 = v329;
        if (HIDWORD(v329) >= v329) {
          goto LABEL_443;
        }
        ++HIDWORD(v329);
        *(void *)&v196[8 * v198] = v197;
LABEL_464:
        uint64_t v196 = v328;
        if (++v194 == (uint64_t *)v195) {
          goto LABEL_472;
        }
      }
      unsigned int v202 = v329;
LABEL_443:
      if (3 * v202 <= 4 * (HIDWORD(v329) - v330))
      {
        if (v202 >= 0x40) {
          v202 *= 2;
        }
        else {
          unsigned int v202 = 128;
        }
      }
      else if (v202 - HIDWORD(v329) >= v202 >> 3)
      {
        goto LABEL_445;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v327, v202);
      unsigned int v202 = v329;
      uint64_t v196 = v328;
LABEL_445:
      unsigned int v203 = v202 - 1;
      unsigned int v204 = (v202 - 1) & ((v197 >> 4) ^ (v197 >> 9));
      uint64_t v205 = &v196[8 * v204];
      uint64_t v206 = *(void *)v205;
      if (*(void *)v205 == -1)
      {
        uint64_t v207 = 0;
LABEL_457:
        if (v207) {
          unsigned int v211 = v207;
        }
        else {
          unsigned int v211 = v205;
        }
        if (*(void *)v211 != v197)
        {
          if (*(void *)v211 == -2) {
            --v330;
          }
          else {
            ++HIDWORD(v329);
          }
          *(void *)unsigned int v211 = v197;
        }
      }
      else
      {
        uint64_t v207 = 0;
        int v208 = 1;
        while (v206 != v197)
        {
          if (v207) {
            BOOL v209 = 0;
          }
          else {
            BOOL v209 = v206 == -2;
          }
          if (v209) {
            uint64_t v207 = v205;
          }
          unsigned int v210 = v204 + v208++;
          unsigned int v204 = v210 & v203;
          uint64_t v205 = &v196[8 * (v210 & v203)];
          uint64_t v206 = *(void *)v205;
          if (*(void *)v205 == -1) {
            goto LABEL_457;
          }
        }
      }
      goto LABEL_464;
    }
LABEL_329:
    if (v333 != v332)
    {
      unsigned int v157 = v334;
      goto LABEL_340;
    }
    if (!HIDWORD(v334))
    {
LABEL_337:
      unsigned int v157 = v334;
      if (HIDWORD(v334) < v334)
      {
        ++HIDWORD(v334);
        *((void *)v333 + v136) = v129;
        goto LABEL_361;
      }
LABEL_340:
      if (3 * v157 <= 4 * (HIDWORD(v334) - v335))
      {
        if (v157 >= 0x40) {
          v157 *= 2;
        }
        else {
          unsigned int v157 = 128;
        }
      }
      else if (v157 - HIDWORD(v334) >= v157 >> 3)
      {
        goto LABEL_342;
      }
      llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&v332, v157);
      unsigned int v157 = v334;
      int v135 = (char *)v333;
LABEL_342:
      unsigned int v158 = v157 - 1;
      unsigned int v159 = (v157 - 1) & ((v129 >> 4) ^ (v129 >> 9));
      unint64_t v160 = &v135[8 * v159];
      uint64_t v161 = *(void *)v160;
      if (*(void *)v160 == -1)
      {
        uint64_t v162 = 0;
LABEL_354:
        if (v162) {
          int v166 = v162;
        }
        else {
          int v166 = (unint64_t *)v160;
        }
        if (*v166 != v129)
        {
          if (*v166 == -2) {
            --v335;
          }
          else {
            ++HIDWORD(v334);
          }
          *int v166 = v129;
        }
      }
      else
      {
        uint64_t v162 = 0;
        int v163 = 1;
        while (v161 != v129)
        {
          if (v162) {
            BOOL v164 = 0;
          }
          else {
            BOOL v164 = v161 == -2;
          }
          if (v164) {
            uint64_t v162 = (unint64_t *)v160;
          }
          unsigned int v165 = v159 + v163++;
          unsigned int v159 = v165 & v158;
          unint64_t v160 = &v135[8 * (v165 & v158)];
          uint64_t v161 = *(void *)v160;
          if (*(void *)v160 == -1) {
            goto LABEL_354;
          }
        }
      }
      goto LABEL_361;
    }
    uint64_t v154 = 0;
    uint64_t v155 = 8 * HIDWORD(v334);
    unsigned __int16 v156 = (unint64_t *)v333;
    while (*v156 != v129)
    {
      if (*v156 == -2) {
        uint64_t v154 = v156;
      }
      ++v156;
      v155 -= 8;
      if (!v155)
      {
        if (!v154) {
          goto LABEL_337;
        }
        unint64_t *v154 = v129;
        --v335;
        break;
      }
    }
LABEL_361:
    if (v341 >= (unint64_t)HIDWORD(v341)) {
      llvm::SmallVectorBase<unsigned int>::grow_pod();
    }
    uint64_t v167 = v121;
    *(void *)&v340[8 * v341] = v129;
    LODWORD(v341) = v341 + 1;
    uint64_t v168 = *(unsigned int *)(v129 + 40);
    if (v168)
    {
      BOOL v169 = *(void **)(v129 + 32);
      uint64_t v170 = 16 * v168;
      do
      {
        unint64_t v171 = *v169 & 0xFFFFFFFFFFFFFFF8;
        if ((*(unsigned char *)(v171 + 236) & 1) == 0) {
          llvm::SUnit::ComputeDepth((llvm::SUnit *)(*v169 & 0xFFFFFFFFFFFFFFF8));
        }
        unsigned int v172 = *(unsigned __int16 **)(*(void *)(v171 + 8) + 16);
        int v173 = *v172;
        BOOL v175 = (v173 - 9) <= 0x3C && ((1 << (v173 - 9)) & 0x1000000000000605) != 0
            || v173 == 0;
        if (v175 || (v172[4] & 0x10) != 0 || (v172[8] & 1) != 0)
        {
          if (v338 >= (unint64_t)HIDWORD(v338)) {
            llvm::SmallVectorBase<unsigned int>::grow_pod();
          }
          *((void *)v337 + v338) = v171;
          LODWORD(v338) = v338 + 1;
        }
        else if (v75 <= *(_DWORD *)(v171 + 240) + *(unsigned __int16 *)(v171 + 226))
        {
          int v75 = *(_DWORD *)(v171 + 240) + *(unsigned __int16 *)(v171 + 226);
        }
        v169 += 2;
        v170 -= 16;
      }
      while (v170);
    }
    char v128 = 1;
    if ((HIDWORD(v334) - v335) <= 7)
    {
      int v121 = v167;
      goto LABEL_384;
    }
    char v212 = 0;
    int v271 = HIDWORD(v334) - v335;
    int v121 = v167;
LABEL_473:
    if (v337 != v339) {
      free(v337);
    }
    if (v340 != v121) {
      free(v340);
    }
    char v122 = v128;
  }
  while ((v212 & 1) != 0);
  if (v328 != v327) {
    free(v328);
  }
  uint64_t v213 = v272;
  if (v333 != v332) {
    free(v333);
  }
  BOOL v214 = v271 > 7;
  *(unsigned char *)(v272 + 1052) = v214;
  uint64_t v215 = *(void *)(v272 + 2032);
  if (v215
    && v75 == -1
    && ((*(void *)(*(void *)(*(void *)(v215 + 8) + 24) + 72)
       - *(void *)(*(void *)(*(void *)(v215 + 8) + 24) + 64)) & 0x7FFFFFFF8) != 0)
  {
    BOOL v214 = 1;
    *(unsigned char *)(v272 + 1052) = 1;
  }
  uint64_t v216 = v272 + 224;
  if (!*(unsigned char *)(v272 + 1050))
  {
    unsigned int v218 = *(_DWORD *)(v272 + 1928);
    if (v270 >= v218)
    {
      BOOL v217 = *(_DWORD *)(v272 + 572) - (v270 + *(_DWORD *)(v272 + 576)) + *(_DWORD *)(v272 + 1064) >= v218 && v214;
      goto LABEL_501;
    }
LABEL_494:
    BOOL v217 = 0;
LABEL_501:
    *(unsigned char *)(v272 + 1050) = v217;
    goto LABEL_502;
  }
  if (!v270) {
    goto LABEL_494;
  }
  BOOL v217 = 1;
LABEL_502:
  *(unsigned char *)(v272 + 1051) = v214;
  if (!v217 && !v214 && *(_DWORD *)(v272 + 1064) && v270)
  {
    uint64_t v220 = *(void *)(v272 + 560);
    uint64_t v221 = 568;
    if (v220 == *(void *)(v272 + 552)) {
      uint64_t v221 = 572;
    }
    uint64_t v222 = *(unsigned int *)(v272 + v221);
    if (v222)
    {
      uint64_t v223 = 8 * v222;
      uint64_t v224 = *(unint64_t **)(v272 + 560);
      while (*v224 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v224;
        v223 -= 8;
        if (!v223) {
          goto LABEL_542;
        }
      }
    }
    else
    {
      uint64_t v224 = *(unint64_t **)(v272 + 560);
    }
    unsigned int v226 = (unint64_t *)(v220 + 8 * v222);
    if (v224 == v226)
    {
LABEL_542:
      char v244 = 1;
    }
    else
    {
      uint64_t v227 = (void *)(v272 + 1128);
      uint64_t v228 = (unsigned char *)(v272 + 1152);
      int v229 = (const llvm::SUnit *)*v224;
LABEL_518:
      unint64_t v230 = v227;
      while (1)
      {
        uint64_t v227 = (void *)*v227;
        if (!v227) {
          break;
        }
        uint64_t v231 = (const llvm::SUnit *)v227[3];
        uint64_t v232 = sub_1CD3F198C((uint64_t)v228, (uint64_t)v229, (uint64_t)v231);
        if (*v228)
        {
          uint64_t v233 = v272 + 1160;
          unsigned int v234 = 32;
        }
        else
        {
          uint64_t v233 = *(void *)(v272 + 1160);
          unsigned int v234 = *(_DWORD *)(v272 + 1168);
        }
        if (v233 + 24 * v234 == v232)
        {
          BOOL IsReachable = llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(void *)(v272 + 8) + 2120), v229, v231);
          uint64_t v332 = v229;
          uint64_t v333 = v231;
          LOBYTE(v334) = IsReachable;
          sub_1CD3F1AF8((uint64_t)&v327, (uint64_t)v228, (uint64_t *)&v332, &v334);
          if (IsReachable)
          {
LABEL_595:
            char v244 = 0;
            goto LABEL_544;
          }
        }
        else if (*(unsigned char *)(v232 + 16))
        {
          goto LABEL_595;
        }
      }
      uint64_t v236 = (void *)(v272 + 1088);
      while (1)
      {
        uint64_t v236 = (void *)*v236;
        if (!v236) {
          break;
        }
        long long v237 = (const llvm::SUnit *)v236[3];
        uint64_t v238 = sub_1CD3F198C((uint64_t)v228, (uint64_t)v229, (uint64_t)v237);
        if (*v228)
        {
          uint64_t v239 = v272 + 1160;
          unsigned int v240 = 32;
        }
        else
        {
          uint64_t v239 = *(void *)(v272 + 1160);
          unsigned int v240 = *(_DWORD *)(v272 + 1168);
        }
        if (v239 + 24 * v240 == v238)
        {
          int v241 = llvm::ScheduleDAGTopologicalSort::IsReachable((llvm::ScheduleDAGTopologicalSort *)(*(void *)(v272 + 8) + 2120), v229, v237);
          uint64_t v332 = v229;
          uint64_t v333 = v237;
          LOBYTE(v334) = v241;
          sub_1CD3F1AF8((uint64_t)&v327, (uint64_t)v228, (uint64_t *)&v332, &v334);
        }
        else
        {
          int v241 = *(unsigned __int8 *)(v238 + 16);
        }
        if (v241) {
          goto LABEL_595;
        }
      }
      uint64_t v242 = v224 + 1;
      uint64_t v227 = v230;
      while (v242 != v226)
      {
        unint64_t v243 = *v242++;
        int v229 = (const llvm::SUnit *)v243;
        if (v243 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          uint64_t v224 = v242 - 1;
          goto LABEL_518;
        }
      }
      char v244 = 1;
LABEL_544:
      uint64_t v213 = v272;
    }
    *(unsigned char *)(v213 + 1051) |= v244;
  }
  unsigned int v245 = *(_DWORD *)(v213 + 1940);
  *(unsigned char *)(v213 + 1049) = (float)(*(float *)(v213 + 2436) * (float)v245) <= v4;
  if (v269 > v245) {
    unsigned int v245 = v269;
  }
  *(_DWORD *)(v213 + 1940) = v245;
  uint64_t v246 = v213 + 280;
  sub_1CB902388(v213, v213 + 280, (uint64_t)&v299);
  sub_1CB902388(v213, v213 + 336, (uint64_t)&v286);
  sub_1CB902388(v213, v213 + 392, (uint64_t)&v273);
  sub_1CB902388(v213, v216, (uint64_t)&v312);
  if (v274)
  {
    LODWORD(v275) = 25;
    LODWORD(v288) = 25;
    __n128 v247 = sub_1CB902E88(v213, (uint64_t)&v286, (uint64_t)&v273, v216, v247);
  }
  if (v287)
  {
    LODWORD(v288) = 25;
    LODWORD(v301) = 25;
    __n128 v247 = sub_1CB902E88(v213, (uint64_t)&v299, (uint64_t)&v286, v216, v247);
  }
  if (v300)
  {
    LODWORD(v301) = 25;
    LODWORD(v314) = 25;
    sub_1CB902E88(v213, (uint64_t)&v312, (uint64_t)&v299, v216, v247);
  }
  unsigned int v248 = *(unsigned __int16 **)(*(void *)(v313 + 8) + 16);
  uint64_t v249 = *((void *)v248 + 2);
  if ((v249 & 0x200) == 0)
  {
    uint64_t v246 = v213 + 336;
    if ((v249 & 0x20) == 0)
    {
      unsigned int v250 = *v248;
      uint64_t v246 = v213 + 392;
      if (v250 >> 1 != 5986)
      {
        if (sub_1CB9046B0(v250)) {
          uint64_t v246 = v213 + 392;
        }
        else {
          uint64_t v246 = v272 + 224;
        }
      }
    }
  }
  uint64_t v251 = v312;
  *(_DWORD *)(*v312 + 196) &= ~*(_DWORD *)v246;
  void *v251 = *(void *)(*(void *)(v246 + 40) - 8);
  *(void *)(v246 + 40) -= 8;
  if (v317)
  {
    uint64_t v252 = (unsigned int *)(v213 + 572);
    uint64_t v253 = *(void *)(v213 + 560);
    uint64_t v254 = *(void *)(v213 + 552);
    if (v253 == v254)
    {
      uint64_t v255 = *v252;
      uint64_t v256 = (void *)(v253 + 8 * v255);
      if (v255)
      {
        uint64_t v257 = 0;
        uint64_t v258 = 8 * v255;
        while (*(void *)(v253 + v257) != v313)
        {
          v257 += 8;
          if (v258 == v257) {
            goto LABEL_582;
          }
        }
        uint64_t v256 = (void *)(v253 + v257);
      }
LABEL_582:
      uint64_t v254 = *(void *)(v213 + 560);
    }
    else
    {
      uint64_t v259 = *(unsigned int *)(v213 + 568);
      int v260 = v259 - 1;
      unsigned int v261 = (v259 - 1) & ((v313 >> 4) ^ (v313 >> 9));
      uint64_t v256 = (void *)(v253 + 8 * v261);
      uint64_t v262 = *v256;
      if (*v256 == -1)
      {
        uint64_t v263 = 0;
LABEL_590:
        if (v263) {
          uint64_t v256 = v263;
        }
        if (*v256 != v313) {
          uint64_t v256 = (void *)(v253 + 8 * v259);
        }
      }
      else
      {
        uint64_t v263 = 0;
        int v264 = 1;
        while (v262 != v313)
        {
          if (v263) {
            BOOL v265 = 0;
          }
          else {
            BOOL v265 = v262 == -2;
          }
          if (v265) {
            uint64_t v263 = v256;
          }
          unsigned int v266 = v261 + v264++;
          unsigned int v261 = v266 & v260;
          uint64_t v256 = (void *)(v253 + 8 * (v266 & v260));
          uint64_t v262 = *v256;
          if (*v256 == -1) {
            goto LABEL_590;
          }
        }
      }
    }
    if (v253 != v254) {
      uint64_t v252 = (unsigned int *)(v213 + 568);
    }
    if (v256 != (void *)(v253 + 8 * *v252))
    {
      *uint64_t v256 = -2;
      ++*(_DWORD *)(v213 + 576);
    }
    *(int32x2_t *)(v213 + 1056) = vadd_s32(*(int32x2_t *)(v213 + 1056), (int32x2_t)0x100000001);
  }
  else if (v318)
  {
    ++*(_DWORD *)(v213 + 1060);
  }
  else
  {
    *(void *)(v213 + 1056) = 0;
  }
  int v267 = *(_DWORD *)(v213 + 448) + sub_1CB903FC4(v213, (uint64_t)&v312);
  *(_DWORD *)(v213 + 448) = v267;
  uint64_t result = v313;
  *(_DWORD *)(v313 + 252) = v267;
  return result;
}

uint64_t sub_1CB900740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v4 + 2720);
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6 == *(void *)(v5 + 16)) {
    unsigned int v7 = 0;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 8 * *(unsigned int *)(a2 + 192) + 4);
  }
  *(void *)(*(void *)(a1 + 976) + 8 * (v7 >> 6)) |= 1 << v7;
  uint64_t v8 = *(_WORD **)(a2 + 24);
  if (!v8)
  {
    uint64_t v8 = (_WORD *)(*(void *)(v4 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(a2 + 8) + 16) + 6));
    if ((v8[4] & 0x1FFF) == 0x1FFE)
    {
      do
      {
        unsigned int v58 = (*(uint64_t (**)(void))(**(void **)(v4 + 808) + 200))(*(void *)(v4 + 808));
        uint64_t v59 = *(void *)(v4 + 672);
      }
      while ((*(_WORD *)(v59 + 24 * v58 + 8) & 0x1FFF) == 0x1FFE);
      uint64_t v8 = (_WORD *)(v59 + 24 * v58);
    }
    *(void *)(a2 + 24) = v8;
  }
  uint64_t v9 = (unsigned __int16)v8[6];
  if (v8[6])
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v11 = (unsigned __int16 *)(*(void *)(*(void *)(v10 + 176) + 136) + 4 * (unsigned __int16)v8[5]);
    uint64_t v12 = &v11[2 * v9];
    uint64_t v13 = *(void *)(a1 + 880);
    uint64_t v14 = *(void *)(v10 + 192);
    uint64_t v15 = *(void *)(a1 + 800);
    do
    {
      uint64_t v16 = *v11;
      *(_DWORD *)(v13 + 4 * v16) = *(_DWORD *)(a1 + 448);
      *(_DWORD *)(v15 + 4 * v16) -= *(_DWORD *)(v14 + 4 * v16) * v11[1];
      if (*(_DWORD *)(a1 + 960) == v16)
      {
        uint64_t v17 = *(unsigned int *)(v10 + 48);
        if (v17)
        {
          uint64_t v18 = 0;
          int v19 = *(_DWORD *)(v10 + 276);
          do
          {
            if (*(_DWORD *)(v15 + 4 * v18) - *(_DWORD *)(v15 + 4 * v16) >= v19)
            {
              *(_DWORD *)(a1 + 960) = v18;
              uint64_t v16 = v18;
            }
            ++v18;
          }
          while (v17 != v18);
        }
      }
      v11 += 2;
    }
    while (v11 != v12);
  }
  unint64_t v20 = *(void *)(a2 + 8);
  int v21 = *(unsigned __int16 **)(v20 + 16);
  uint64_t v22 = *((void *)v21 + 2);
  uint64_t result = *v21;
  unsigned int v24 = result - 9;
  if ((result - 9) <= 0x3C)
  {
    if (((1 << v24) & 0x404) != 0)
    {
LABEL_31:
      BOOL v29 = 0;
      goto LABEL_32;
    }
    if (((1 << v24) & 0x1000000000000201) != 0) {
      return result;
    }
  }
  if (!*v21) {
    return result;
  }
  if ((v21[4] & 0x10) != 0)
  {
    if (result != 19) {
      return result;
    }
    goto LABEL_31;
  }
  BOOL v25 = v24 > 0x3C;
  uint64_t v26 = (1 << v24) & 0x1000000000000601;
  BOOL v29 = (v25 || v26 == 0) && result != 0 && (*((void *)v21 + 2) & 1) == 0;
LABEL_32:
  *(unsigned char *)(a1 + 964) = !v29;
  uint64_t result = sub_1CB904508(result, *(unsigned __int8 *)(a1 + 72));
  *(unsigned char *)(a1 + 965) = result;
  if (!v29 && (result & 1) == 0) {
    *(_DWORD *)(a1 + 968) = *(_DWORD *)(a2 + 252);
  }
  if (v29)
  {
    for (uint64_t i = 0; i != 96; i += 48)
      *(_DWORD *)(a1 + 656 + i) = 0;
  }
  else
  {
    BOOL v31 = (*(_DWORD *)(a1 + 744) & 1) == 0;
    *(_DWORD *)(a1 + 744) = v31;
    uint64_t v32 = a1 + 48 * v31;
    *(_DWORD *)(v32 + 656) = 0;
    unint64_t v33 = v20;
    if ((*(unsigned char *)(v20 + 44) & 4) != 0)
    {
      unint64_t v33 = v20;
      do
        unint64_t v33 = *(void *)v33 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v33 + 44) & 4) != 0);
    }
    uint64_t v34 = *(void *)(v20 + 24) + 48;
    unint64_t v35 = *(_DWORD **)(v33 + 32);
    uint64_t v36 = *(unsigned int *)(v33 + 40);
    BOOL v37 = &v35[8 * v36];
    if (!v36)
    {
      unint64_t v57 = *(void *)(v33 + 8);
      if (v57 == v34)
      {
        unint64_t v33 = *(void *)(v20 + 24) + 48;
      }
      else
      {
        unint64_t v33 = *(void *)(v20 + 24) + 48;
        if ((*(_WORD *)(v57 + 44) & 4) != 0)
        {
          do
          {
            unint64_t v60 = v57;
            uint64_t v61 = *(unsigned int *)(v57 + 40);
            if (v61)
            {
              unint64_t v33 = v57;
              goto LABEL_100;
            }
            unint64_t v57 = *(void *)(v57 + 8);
          }
          while (v57 != v34 && (*(_WORD *)(v57 + 44) & 4) != 0);
          unint64_t v33 = *(void *)(v20 + 24) + 48;
LABEL_100:
          unint64_t v35 = *(_DWORD **)(v60 + 32);
          BOOL v37 = &v35[8 * v61];
        }
      }
    }
    if (v35 != v37)
    {
      unsigned int v38 = 0;
      uint64_t v39 = v32 + 648;
      do
      {
        if (!*v35 && (*v35 & 0x1000000) == 0)
        {
          int v40 = v35[1];
          if (v40)
          {
            if (v38 >= *(_DWORD *)(v39 + 12)) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            *(_DWORD *)(*(void *)v39 + 4 * v38) = v40;
            unsigned int v38 = *(_DWORD *)(v39 + 8) + 1;
            *(_DWORD *)(v39 + 8) = v38;
          }
        }
        v35 += 8;
        if (v35 == v37)
        {
          unint64_t v41 = *(void *)(v33 + 8);
          if (v41 == v34) {
            break;
          }
          unint64_t v35 = v37;
          unint64_t v33 = v34;
          if ((*(_WORD *)(v41 + 44) & 4) != 0)
          {
            while (1)
            {
              unint64_t v42 = v41;
              uint64_t v43 = *(unsigned int *)(v41 + 40);
              if (v43) {
                break;
              }
              unint64_t v41 = *(void *)(v41 + 8);
              if (v41 == v34 || (*(_WORD *)(v41 + 44) & 4) == 0)
              {
                unint64_t v33 = v34;
                goto LABEL_56;
              }
            }
            unint64_t v33 = v41;
LABEL_56:
            unint64_t v35 = *(_DWORD **)(v42 + 32);
            BOOL v37 = &v35[8 * v43];
          }
        }
      }
      while (v35 != v37);
    }
  }
  ++*(_DWORD *)(a1 + 448);
  *(void *)(a1 + 2032) = a2;
  uint64_t v44 = a2;
  if ((v22 & 0x2120) != 0) {
    goto LABEL_71;
  }
  unint64_t v45 = *(unsigned __int16 **)(v20 + 16);
  int v46 = *v45;
  BOOL v48 = (v46 - 9) <= 0x3C && ((1 << (v46 - 9)) & 0x1000000000000605) != 0 || v46 == 0;
  if (v48 || (v45[4] & 0x10) != 0 || (v45[8] & 1) != 0)
  {
    uint64_t v44 = 0;
LABEL_71:
    *(void *)(a1 + 2040) = v44;
  }
  if (*(unsigned char *)(a1 + 2048))
  {
    *(void *)(*(void *)(a1 + 1960) + (((unint64_t)*(unsigned int *)(a2 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(a2 + 192);
    uint64_t v49 = *(unsigned __int16 **)(*(void *)(a2 + 8) + 16);
    int v50 = *v49;
    BOOL v51 = (v50 - 9) > 0x3C || ((1 << (v50 - 9)) & 0x1000000000000605) == 0;
    BOOL v52 = !v51 || v50 == 0;
    if (v52 || (v49[4] & 0x10) != 0 || (v49[8] & 1) != 0)
    {
      unsigned int v53 = *(_DWORD *)(a1 + 2056);
      if (v53)
      {
        unsigned int v54 = *(unsigned __int16 *)(a2 + 226);
        BOOL v55 = v53 >= v54;
        unsigned int v56 = v53 - v54;
        if (!v55) {
          unsigned int v56 = 0;
        }
        *(_DWORD *)(a1 + 2056) = v56;
      }
    }
  }
  return result;
}

void sub_1CB900C5C(int8x8_t *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int16 **)(*(void *)(a2 + 8) + 16);
  uint64_t v5 = *((void *)v4 + 2);
  if ((v5 & 0x200) != 0)
  {
    unsigned int v7 = a1 + 35;
  }
  else if ((v5 & 0x20) != 0)
  {
    unsigned int v7 = a1 + 42;
  }
  else
  {
    unsigned int v6 = *v4;
    if (v6 >> 1 == 5986 || sub_1CB9046B0(v6)) {
      unsigned int v7 = a1 + 49;
    }
    else {
      unsigned int v7 = a1 + 28;
    }
  }
  uint64_t v9 = (void *)v7[5];
  unint64_t v8 = (unint64_t)v7[6];
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = (void *)v7[4];
    uint64_t v12 = v9 - v11;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61) {
      abort();
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        sub_1CB833614();
      }
      uint64_t v16 = (char *)operator new(8 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    *(void *)uint64_t v17 = a2;
    uint64_t v10 = v17 + 8;
    if (v9 != v11)
    {
      do
      {
        uint64_t v18 = *--v9;
        *((void *)v17 - 1) = v18;
        v17 -= 8;
      }
      while (v9 != v11);
      uint64_t v9 = (void *)v7[4];
    }
    v7[4] = (int8x8_t)v17;
    v7[5] = (int8x8_t)v10;
    v7[6] = (int8x8_t)&v16[8 * v15];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    void *v9 = a2;
    uint64_t v10 = v9 + 1;
  }
  v7[5] = (int8x8_t)v10;
  *(_DWORD *)(a2 + 196) |= v7->i32[0];
  if ((v5 & 0x10120) == 0) {
    goto LABEL_59;
  }
  int8x8_t v19 = a1[70];
  uint64_t v20 = a1[71].u32[1];
  if (*(void *)&v19 != *(void *)&a1[69])
  {
    unsigned int v24 = a1[71].u32[0];
    goto LABEL_37;
  }
  if (v20)
  {
    int v21 = 0;
    uint64_t v22 = 8 * v20;
    uint64_t v23 = (void *)a1[70];
    while (*v23 != a2)
    {
      if (*v23 == -2) {
        int v21 = v23;
      }
      ++v23;
      v22 -= 8;
      if (!v22)
      {
        if (!v21) {
          goto LABEL_34;
        }
        *int v21 = a2;
        --a1[72].i32[0];
        goto LABEL_58;
      }
    }
    goto LABEL_58;
  }
LABEL_34:
  unsigned int v24 = a1[71].u32[0];
  if (v20 >= v24)
  {
LABEL_37:
    if (3 * v24 <= 4 * ((int)v20 - a1[72].i32[0]))
    {
      if (v24 >= 0x40) {
        v24 *= 2;
      }
      else {
        unsigned int v24 = 128;
      }
    }
    else if (v24 - v20 >= v24 >> 3)
    {
      goto LABEL_39;
    }
    llvm::SmallPtrSetImplBase::Grow((llvm::SmallPtrSetImplBase *)&a1[69], v24);
    unsigned int v24 = a1[71].u32[0];
    int8x8_t v19 = a1[70];
LABEL_39:
    unsigned int v25 = v24 - 1;
    unsigned int v26 = (v24 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    uint64_t v27 = (void *)(*(void *)&v19 + 8 * v26);
    uint64_t v28 = *v27;
    if (*v27 == -1)
    {
      BOOL v29 = 0;
LABEL_51:
      if (v29) {
        unint64_t v33 = v29;
      }
      else {
        unint64_t v33 = v27;
      }
      if (*v33 != a2)
      {
        if (*v33 == -2) {
          --a1[72].i32[0];
        }
        else {
          ++a1[71].i32[1];
        }
        *unint64_t v33 = a2;
      }
    }
    else
    {
      BOOL v29 = 0;
      int v30 = 1;
      while (v28 != a2)
      {
        if (v29) {
          BOOL v31 = 0;
        }
        else {
          BOOL v31 = v28 == -2;
        }
        if (v31) {
          BOOL v29 = v27;
        }
        unsigned int v32 = v26 + v30++;
        unsigned int v26 = v32 & v25;
        uint64_t v27 = (void *)(*(void *)&v19 + 8 * (v32 & v25));
        uint64_t v28 = *v27;
        if (*v27 == -1) {
          goto LABEL_51;
        }
      }
    }
    goto LABEL_58;
  }
  a1[71].i32[1] = v20 + 1;
  *(void *)(*(void *)&v19 + 8 * v20) = a2;
LABEL_58:
  --a1[133].i32[0];
LABEL_59:
  if ((v5 & 0x20) == 0)
  {
    uint64_t v34 = *(void *)(a2 + 8);
    if ((*(unsigned char *)(*(void *)(v34 + 16) + 17) & 1) == 0) {
      return;
    }
    unint64_t v35 = *(void *)(v34 + 48);
    if (v35 < 8) {
      goto LABEL_68;
    }
    if ((v35 & 7) != 0)
    {
      uint64_t v36 = (_DWORD *)(v35 & 0xFFFFFFFFFFFFFFF8);
      BOOL v37 = (*(void *)(v34 + 48) & 7) != 3 || v36 == 0;
      if (v37 || !*v36)
      {
LABEL_68:
        UnderlyingObject = 0;
        goto LABEL_69;
      }
    }
    else
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
      *(void *)(v34 + 48) = v35;
    }
    if ((v35 & 7) != 0)
    {
      unsigned int v69 = *(void **)((v35 & 0xFFFFFFFFFFFFFFF8) + 8);
    }
    else
    {
      unsigned int v69 = (void *)(v35 & 0xFFFFFFFFFFFFFFF8);
      *(void *)(v34 + 48) = v69;
    }
    UnderlyingObject = 0;
    if ((*v69 & 4) == 0 && (*v69 & 0xFFFFFFFFFFFFFFF8) != 0) {
      UnderlyingObject = llvm::getUnderlyingObject((llvm *)(*v69 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
    }
LABEL_69:
    int8x8_t v39 = a1[140];
    if (!*(void *)&v39) {
      return;
    }
    unint64_t v40 = 0x9DDFEA08EB382D69
        * (((8 * UnderlyingObject) + 8) ^ ((unint64_t)UnderlyingObject >> 32));
    unint64_t v41 = 0x9DDFEA08EB382D69 * (((unint64_t)UnderlyingObject >> 32) ^ (v40 >> 47) ^ v40);
    unint64_t v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
    uint8x8_t v43 = (uint8x8_t)vcnt_s8(v39);
    v43.i16[0] = vaddlv_u8(v43);
    if (v43.u32[0] <= 1uLL) {
      uint64_t v44 = v42 & (*(void *)&v39 - 1);
    }
    else {
      uint64_t v44 = v42 < *(void *)&v39 ? v42 : v42 % *(void *)&v39;
    }
    unint64_t v45 = *(void ***)(*(void *)&a1[139] + 8 * v44);
    if (!v45) {
      return;
    }
    int v46 = *v45;
    if (!*v45) {
      return;
    }
    while (1)
    {
      unint64_t v47 = v46[1];
      if (v47 == v42)
      {
        if ((llvm *)v46[2] == UnderlyingObject)
        {
          int v67 = v46;
          do
            int v67 = (void *)*v67;
          while (v67 && (llvm *)v67[2] == UnderlyingObject);
          while (v46 != v67)
          {
            if (v46[3] == a2)
            {
              sub_1CB904FC4(&a1[139], v46, (uint64_t)__p);
              goto LABEL_133;
            }
            int v46 = (void *)*v46;
          }
          return;
        }
      }
      else
      {
        if (v43.u32[0] <= 1uLL)
        {
          v47 &= *(void *)&v39 - 1;
        }
        else if (v47 >= *(void *)&v39)
        {
          v47 %= *(void *)&v39;
        }
        if (v47 != v44) {
          return;
        }
      }
      int v46 = (void *)*v46;
      if (!v46) {
        return;
      }
    }
  }
  uint64_t v48 = *(unsigned int *)(a2 + 40);
  if (v48)
  {
    uint64_t v49 = *(void **)(a2 + 32);
    uint64_t v50 = 16 * v48;
    do
    {
      unint64_t v51 = *v49 & 0xFFFFFFFFFFFFFFF8;
      if ((*v49 & 6) == 0 && v51 != 0)
      {
        uint64_t v53 = *(void *)(v51 + 8);
        if (v53)
        {
          if ((*(unsigned char *)(*(void *)(v53 + 16) + 17) & 2) != 0)
          {
            uint64_t v54 = sub_1CB904224((uint64_t)&a1[11], v51);
            int v55 = *(_DWORD *)(v54 + 8);
            if (v55 != -1) {
              *(_DWORD *)(v54 + 8) = v55 - 1;
            }
          }
        }
      }
      v49 += 2;
      v50 -= 16;
    }
    while (v50);
  }
  uint64_t v56 = *(void *)(a2 + 8);
  uint64_t v57 = *(unsigned __int8 *)(*(void *)(v56 + 16) + 4);
  uint64_t v58 = *(void *)(v56 + 32);
  if (*(unsigned char *)(v58 + 32 * v57) != 7) {
    return;
  }
  int8x8_t v59 = a1[135];
  if (!*(void *)&v59) {
    return;
  }
  unint64_t v60 = *(unsigned int *)(v58 + 32 * v57 + 4);
  uint64_t v61 = a1 + 134;
  uint8x8_t v62 = (uint8x8_t)vcnt_s8(v59);
  v62.i16[0] = vaddlv_u8(v62);
  if (v62.u32[0] <= 1uLL)
  {
    unint64_t v63 = (v59.i32[0] - 1) & v60;
  }
  else
  {
    unint64_t v63 = v60;
    if (*(void *)&v59 <= v60) {
      unint64_t v63 = v60 % *(void *)&v59;
    }
  }
  unint64_t v64 = *(uint64_t ***)(*(void *)v61 + 8 * v63);
  if (!v64) {
    return;
  }
  uint64_t v65 = *v64;
  if (!*v64) {
    return;
  }
  while (1)
  {
    unint64_t v66 = v65[1];
    if (v66 == v60) {
      break;
    }
    if (v62.u32[0] > 1uLL)
    {
      if (v66 >= *(void *)&v59) {
        v66 %= *(void *)&v59;
      }
    }
    else
    {
      v66 &= *(void *)&v59 - 1;
    }
    if (v66 != v63) {
      return;
    }
LABEL_113:
    uint64_t v65 = (uint64_t *)*v65;
    if (!v65) {
      return;
    }
  }
  if (*((_DWORD *)v65 + 4) != v60) {
    goto LABEL_113;
  }
  BOOL v68 = (uint64_t *)*v65;
  while (1)
  {
    if (v65 == v68) {
      return;
    }
    if (v65[3] == a2) {
      break;
    }
    uint64_t v65 = (uint64_t *)*v65;
  }
  sub_1CB904E74(v61, v65, (uint64_t)__p);
LABEL_133:
  uint64_t v70 = __p[0];
  __p[0] = 0;
  if (v70) {
    operator delete(v70);
  }
}

void *sub_1CB901268(void *a1, unsigned int a2)
{
  if (a2 <= 8)
  {
    *a1 = 1;
LABEL_3:
    uint64_t result = a1 + 1;
    uint64_t v4 = a1 + 17;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  uint64_t v5 = a2;
  uint64_t result = operator new(16 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  int v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if (v6) {
    goto LABEL_3;
  }
  uint64_t v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *uint64_t result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

uint64_t sub_1CB9012EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unsigned int v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1CB90133C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  unsigned int v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void *sub_1CB901390(void *result)
{
  int v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if (v1)
    {
      uint64_t v2 = result + 1;
      unsigned int v3 = result + 17;
      goto LABEL_5;
    }
    uint64_t v5 = *((unsigned int *)result + 4);
    if (((2 * v1) & 0xFFFFFFFC) >= v5 || v5 < 0x41)
    {
      if (!v5)
      {
        int v4 = 0;
LABEL_7:
        *(_DWORD *)uint64_t result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      uint64_t v2 = (void *)result[1];
      unsigned int v3 = &v2[2 * v5];
      do
      {
LABEL_5:
        *uint64_t v2 = -4096;
        v2 += 2;
      }
      while (v2 != v3);
      int v4 = *(_DWORD *)result & 1;
      goto LABEL_7;
    }
    return sub_1CD3F1684(result);
  }
  return result;
}

void *sub_1CB90140C(void *a1, _OWORD *a2)
{
  int v4 = operator new(0x20uLL);
  v4[1] = *a2;
  unint64_t v5 = *((void *)v4 + 2);
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  *(void *)int v4 = 0;
  *((void *)v4 + 1) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69
                                                                           * (v6 ^ (v7 >> 47) ^ v7)) >> 47));

  return sub_1CB901498(a1, v4);
}

void *sub_1CB901498(void *a1, void *a2)
{
  int v4 = a2 + 2;
  unint64_t v5 = a2[2];
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  uint64_t v9 = sub_1CB901518((uint64_t)a1, v8, v4);
  sub_1CB901674(a1, a2, v9);
  return a2;
}

void *sub_1CB901518(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_1CB901760(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t result = *(void **)(*(void *)a1 + 8 * v15);
  if (result)
  {
    uint64_t v17 = (void *)*result;
    if (*result)
    {
      int v18 = 0;
      do
      {
        int8x8_t v19 = v17;
        unint64_t v20 = v17[1];
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v21 = v20;
          if (v20 >= v6) {
            unint64_t v21 = v20 % v6;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v6 - 1);
        }
        if (v21 != v15) {
          break;
        }
        BOOL v22 = v20 == a2 && v19[2] == *a3;
        if ((v18 & !v22) == 1) {
          break;
        }
        v18 |= v22;
        uint64_t v17 = (void *)*v19;
        uint64_t result = v19;
      }
      while (*v19);
    }
  }
  return result;
}

void *sub_1CB901674(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] <= 1uLL)
  {
    v4 &= *(void *)&v3 - 1;
  }
  else if (v4 >= *(void *)&v3)
  {
    v4 %= *(void *)&v3;
  }
  if (a3)
  {
    *a2 = *a3;
    *a3 = a2;
    if (*a2)
    {
      unint64_t v6 = *(void *)(*a2 + 8);
      if (v5.u32[0] <= 1uLL)
      {
        v6 &= *(void *)&v3 - 1;
      }
      else if (v6 >= *(void *)&v3)
      {
        v6 %= *(void *)&v3;
      }
      if (v6 != v4) {
LABEL_16:
      }
        *(void *)(*result + 8 * v6) = a2;
    }
  }
  else
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (*a2)
    {
      unint64_t v6 = *(void *)(*a2 + 8);
      if (v5.u32[0] <= 1uLL)
      {
        v6 &= *(void *)&v3 - 1;
      }
      else if (v6 >= *(void *)&v3)
      {
        v6 %= *(void *)&v3;
      }
      goto LABEL_16;
    }
  }
  ++result[3];
  return result;
}

void sub_1CB901760(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1CB901850(a1, prime);
    }
  }
}

void sub_1CB901850(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1CB833614();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] <= 1uLL)
      {
        v8 &= a2 - 1;
      }
      else if (v8 >= a2)
      {
        v8 %= a2;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      while (1)
      {
        BOOL v10 = (void *)*v7;
        if (!*v7) {
          break;
        }
        unint64_t v11 = v10[1];
        if (v9.u32[0] <= 1uLL)
        {
          v11 &= a2 - 1;
        }
        else if (v11 >= a2)
        {
          v11 %= a2;
        }
        if (v11 == v8)
        {
          uint64_t v7 = (void *)*v7;
        }
        else
        {
          unint64_t v12 = (void *)*v7;
          if (*(void *)(*(void *)a1 + 8 * v11))
          {
            do
            {
              size_t v13 = v12;
              unint64_t v12 = (void *)*v12;
            }
            while (v12 && v10[2] == v12[2]);
            void *v7 = v12;
            *size_t v13 = **(void **)(*(void *)a1 + 8 * v11);
            **(void **)(*(void *)a1 + 8 * v11) = v10;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v11) = v7;
            uint64_t v7 = v10;
            unint64_t v8 = v11;
          }
        }
      }
    }
  }
  else
  {
    uint8x8_t v14 = *(void **)a1;
    *(void *)a1 = 0;
    if (v14) {
      operator delete(v14);
    }
    *(void *)(a1 + 8) = 0;
  }
}

uint64_t sub_1CB9019C0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = 0;
  uint64_t result = sub_1CB901A88(a1, a2, &v16);
  uint8x8_t v9 = v16;
  if (result)
  {
    uint64_t v14 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v15 = 8;
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v15 = *(unsigned int *)(a1 + 16);
    }
    char v13 = 0;
    uint64_t v12 = v14 + 16 * v15;
  }
  else
  {
    uint64_t result = (uint64_t)sub_1CB901B30((_DWORD *)a1, (uint64_t)a2, a2, v16);
    uint8x8_t v9 = (void *)result;
    *(void *)uint64_t result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    uint64_t v10 = a1 + 8;
    if (*(unsigned char *)a1)
    {
      uint64_t v11 = 8;
    }
    else
    {
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = *(unsigned int *)(a1 + 16);
    }
    uint64_t v12 = v10 + 16 * v11;
    char v13 = 1;
  }
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v12;
  *(unsigned char *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1CB901A88(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_17:
    uint64_t result = 1;
  }
  else
  {
    uint8x8_t v9 = 0;
    int v10 = 1;
    while (v8 != -4096)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        uint8x8_t v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_17;
      }
    }
    uint64_t result = 0;
    if (v9) {
      uint64_t v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void *sub_1CB901B30(_DWORD *a1, uint64_t a2, void *a3, void *a4)
{
  int v6 = *a1 >> 1;
  if (*a1) {
    unsigned int v7 = 8;
  }
  else {
    unsigned int v7 = a1[4];
  }
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1CB901BF4((uint64_t)a1, v7);
  uint8x8_t v9 = 0;
  sub_1CB901A88((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096) {
    --a1[1];
  }
  return a4;
}

uint64_t sub_1CB901BF4(uint64_t a1, unsigned int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    unint64_t v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    unint64_t v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    int v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40) {
      a2 = v5 + 1;
    }
    else {
      a2 = 64;
    }
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      uint64_t v13 = a2;
      *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(void *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1CB901D80(a1, v11, v11 + 16 * v12);
    JUMPOUT(0x1D25D9CD0);
  }
  uint64_t v6 = 0;
  unsigned int v7 = v14;
  do
  {
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(void *)unsigned int v7 = v8;
      *((_DWORD *)v7 + 2) = *(_DWORD *)(a1 + v6 + 16);
      v7 += 16;
    }
    v6 += 16;
  }
  while (v6 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    uint64_t v9 = a2;
    *(void *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(void *)(a1 + 16) = v9;
  }
  return sub_1CB901D80(a1, (uint64_t)v14, (uint64_t)v7);
}

uint64_t sub_1CB901D80(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v5 = (_DWORD *)result;
  int v6 = *(_DWORD *)result;
  *(void *)uint64_t result = *(_DWORD *)result & 1;
  if (v6)
  {
    uint64_t v8 = (void *)(result + 8);
    uint64_t v9 = (void *)(result + 136);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(result + 16);
    if (!v7) {
      goto LABEL_9;
    }
    uint64_t v8 = *(void **)(result + 8);
    uint64_t v9 = &v8[2 * v7];
  }
  do
  {
    *uint64_t v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    if ((*(void *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      uint64_t v11 = 0;
      uint64_t result = sub_1CB901A88((uint64_t)v5, (void *)a2, &v11);
      int v10 = v11;
      *uint64_t v11 = *(void *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1CB901E48(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(unsigned int *)(a3 + 40);
  uint64_t v7 = *a2;
  if (v6)
  {
    uint64_t v8 = *(void **)(a3 + 32);
    uint64_t v9 = 16 * v6;
    while (1)
    {
      unint64_t v10 = *(unsigned int *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 192);
      if (v10 != -1 && ((*(void *)(v7 + ((v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      v8 += 2;
      v9 -= 16;
      if (!v9) {
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    unint64_t v11 = *(unsigned int *)(a3 + 192);
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = 1 << v11;
    if (((1 << v11) & *(void *)(v7 + 8 * (v11 >> 6))) == 0)
    {
      uint64_t v14 = (void *)a1[262];
      unint64_t v15 = a1[263];
      if ((unint64_t)v14 >= v15)
      {
        uint64_t v17 = (void *)a1[261];
        uint64_t v18 = v14 - v17;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61) {
          abort();
        }
        uint64_t v20 = v15 - (void)v17;
        if (v20 >> 2 > v19) {
          unint64_t v19 = v20 >> 2;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          if (v21 >> 61) {
            sub_1CB833614();
          }
          BOOL v22 = (char *)operator new(8 * v21);
        }
        else
        {
          BOOL v22 = 0;
        }
        uint64_t v23 = &v22[8 * v18];
        *(void *)uint64_t v23 = a3;
        uint64_t v16 = v23 + 8;
        if (v14 != v17)
        {
          do
          {
            uint64_t v24 = *--v14;
            *((void *)v23 - 1) = v24;
            v23 -= 8;
          }
          while (v14 != v17);
          uint64_t v14 = (void *)a1[261];
        }
        a1[261] = v23;
        a1[262] = v16;
        a1[263] = &v22[8 * v21];
        if (v14)
        {
          operator delete(v14);
          unint64_t v25 = *(unsigned int *)(a3 + 192);
          uint64_t v13 = 1 << v25;
          unint64_t v12 = v25 >> 6;
        }
      }
      else
      {
        *uint64_t v14 = a3;
        uint64_t v16 = v14 + 1;
      }
      a1[262] = v16;
      *(void *)(*a2 + 8 * v12) |= v13;
      uint64_t v26 = *(unsigned int *)(a3 + 120);
      if (v26)
      {
        uint64_t v27 = *(void **)(a3 + 112);
        uint64_t v28 = 16 * v26;
        do
        {
          if (*(_DWORD *)((*v27 & 0xFFFFFFFFFFFFFFF8) + 192) != -1) {
            sub_1CB901E48(a1, a2);
          }
          v27 += 2;
          v28 -= 16;
        }
        while (v28);
      }
    }
  }
}

uint64_t sub_1CB902014(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  unsigned int v52 = a2;
  uint64_t v4 = a2 >> 6;
  uint64_t v5 = *(void *)(*(void *)a3 + 8 * v4);
  if ((v5 & (1 << a2)) == 0) {
    return 0;
  }
  *(void *)(*(void *)a3 + 8 * v4) = v5 & ~(1 << a2);
  uint64_t v8 = *(void *)(a1[1] + 48) + 272 * a2;
  uint64_t v9 = (uint64_t *)a1[302];
  unint64_t v10 = a1[303];
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v13 = (void *)a1[301];
    uint64_t v14 = v9 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 >> 61) {
        sub_1CB833614();
      }
      uint64_t v18 = (char *)operator new(8 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    unint64_t v19 = (uint64_t *)&v18[8 * v14];
    *unint64_t v19 = v8;
    unint64_t v11 = v19 + 1;
    if (v9 != v13)
    {
      do
      {
        uint64_t v20 = *--v9;
        *--unint64_t v19 = v20;
      }
      while (v9 != v13);
      uint64_t v9 = (uint64_t *)a1[301];
    }
    a1[301] = v19;
    a1[302] = v11;
    a1[303] = &v18[8 * v17];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    uint64_t *v9 = v8;
    unint64_t v11 = v9 + 1;
  }
  unsigned int v21 = 0;
  a1[302] = v11;
  __dst = v55;
  uint64_t v54 = 0x600000000;
  if (&__dst != (void **)a3)
  {
    unsigned int v22 = *(_DWORD *)(a3 + 8);
    if (v22)
    {
      if (v22 >= 7) {
        llvm::SmallVectorBase<unsigned int>::grow_pod();
      }
      memcpy(v55, *(const void **)a3, 8 * *(unsigned int *)(a3 + 8));
      LODWORD(v54) = v22;
      unsigned int v21 = v22;
    }
  }
  int v23 = *(_DWORD *)(a3 + 64);
  int v56 = v23;
  uint64_t v24 = a1[292] + 72 * a2;
  unsigned int v25 = *(_DWORD *)(v24 + 8);
  if (v25 >= v21) {
    uint64_t v26 = v21;
  }
  else {
    uint64_t v26 = v25;
  }
  if (v26)
  {
    uint64_t v27 = *(uint64_t **)v24;
    uint64_t v28 = __dst;
    uint64_t v29 = v26;
    do
    {
      uint64_t v30 = *v27++;
      *v28++ &= v30;
      --v29;
    }
    while (v29);
  }
  if (v21 > v25)
  {
    BOOL v31 = __dst;
    do
    {
      v31[v26] = 0;
      LODWORD(v26) = v26 + 1;
    }
    while (v21 != v26);
  }
  unsigned int v32 = 0;
  int v33 = -1;
LABEL_35:
  uint64_t v34 = (v23 - 1) >> 6;
  unint64_t v35 = __dst;
  while (1)
  {
    unsigned int v36 = (v33 + 1) >> 6;
    if (v33 + 1 == v23 || v36 > v34) {
      break;
    }
    uint64_t v38 = 0;
    unint64_t v39 = (((_BYTE)v33 + 1) & 0x3F) != 0 ? ~(0xFFFFFFFFFFFFFFFFLL >> -((v33 + 1) & 0x3F)) : -1;
    int v40 = -64 * v36;
    uint64_t v41 = v34 - v36;
    while (1)
    {
      uint64_t v42 = v38 ? -1 : v39;
      unint64_t v43 = v41 == v38 ? 0xFFFFFFFFFFFFFFFFLL >> -(char)v23 : -1;
      unint64_t v44 = v42 & v43 & *((void *)__dst + v36 + v38);
      if (v44) {
        break;
      }
      ++v38;
      v40 -= 64;
      if (v41 + 1 == v38) {
        goto LABEL_58;
      }
    }
    int v45 = __clz(__rbit64(v44));
    int v33 = v45 - v40;
    if ((v45 - v40 + 1) < 2) {
      break;
    }
    unsigned int v46 = v36 + v38;
    uint64_t v47 = a1[265];
    uint64_t v48 = *(void *)(v47 + 8 * v46);
    uint64_t v49 = 1 << v45;
    if ((v48 & (1 << v45)) != 0)
    {
      *(void *)(v47 + 8 * v46) = v48 & ~v49;
      v35[v46] &= ~v49;
      int v33 = v45 - v40;
      unsigned int v50 = sub_1CB902014(a1, (v45 - v40), a3);
      if (v50 > v32) {
        unsigned int v32 = v50;
      }
      int v23 = v56;
      goto LABEL_35;
    }
  }
LABEL_58:
  uint64_t v12 = v32 + 1;
  sub_1CB8387D8((uint64_t)(a1 + 298), &v52)[1] = v12;
  if (__dst != v55) {
    free(__dst);
  }
  return v12;
}

void sub_1CB902388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v168 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(uint64_t **)(a2 + 32);
  int v139 = *(uint64_t **)(a2 + 40);
  if (v3 == v139) {
    return;
  }
  uint64_t v142 = (unsigned int *)(a1 + 476);
  uint64_t v138 = (unsigned int *)(a1 + 472);
  do
  {
    uint64_t v145 = -4294967271;
    int v148 = 0;
    __int16 v156 = 0;
    char v158 = 0;
    int v159 = 0x7FFFFFFF;
    uint64_t v161 = -1;
    uint64_t v162 = -1;
    uint64_t v160 = -1;
    __int16 v163 = 0;
    unsigned int v143 = v3;
    uint64_t v5 = *v3;
    uint64_t v144 = v5;
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t v7 = *(unsigned __int16 **)(v6 + 16);
    unsigned int v8 = *v7;
    char v9 = sub_1CB904508(*v7, *(unsigned __int8 *)(a1 + 72));
    unsigned int v10 = v8 - 9;
    BOOL v11 = v8 - 9 > 0x3C || ((1 << (v8 - 9)) & 0x1000000000000605) == 0;
    BOOL v12 = !v11 || v8 == 0;
    BOOL v13 = !v12 && (v7[4] & 0x10) == 0 && (v7[8] & 1) == 0;
    BOOL v150 = v13;
    char v146 = v13 ^ (*(unsigned char *)(a1 + 964) != 0);
    char v147 = v9 ^ (*(unsigned char *)(a1 + 965) == 0);
    BOOL v151 = v8 >> 1 == 5986;
    BOOL v14 = sub_1CB9046B0(v8);
    BOOL v152 = v14;
    BOOL v118 = v8 - 740 < 6 || v8 == 19;
    BOOL v153 = v118;
    uint64_t v16 = *((void *)v7 + 1);
    BOOL v155 = (v16 & 0x2000) != 0;
    BOOL v149 = (*((void *)v7 + 2) & 0x10120) != 0;
    BOOL v18 = v10 <= 0x3C && ((1 << v10) & 0x1000000000000605) != 0 || v8 == 0;
    BOOL v19 = (v18 || (v16 & 0x10) != 0) && v8 != 19 && v8 != 11;
    BOOL v154 = v19;
    if (v13)
    {
      BOOL v157 = 0;
      if (v14) {
        goto LABEL_36;
      }
      goto LABEL_159;
    }
    uint64_t v165 = 1;
    for (uint64_t i = 8; i != 72; i += 8)
      *(_DWORD *)((char *)&v165 + i) = -1;
    uint64_t v23 = *((unsigned __int8 *)v7 + 4);
    unsigned int v24 = v7[1];
    if (v24 > v23)
    {
      while (1)
      {
        uint64_t v25 = *(void *)(v6 + 32);
        unsigned int v26 = *(_DWORD *)(v25 + 32 * v23);
        if (!(_BYTE)v26)
        {
          int v27 = *(_DWORD *)(v25 + 32 * v23 + 4);
          if (v27)
          {
            int v28 = v165;
            int v29 = v165 & 1;
            if (v165)
            {
              int v30 = 8;
              BOOL v31 = &v166;
            }
            else
            {
              int v30 = v167;
              if (!v167)
              {
                int v40 = 0;
                unsigned int v41 = 0;
                goto LABEL_61;
              }
              BOOL v31 = v166;
            }
            int v32 = v30 - 1;
            unsigned int v33 = v32 & (37 * v27);
            uint64_t v34 = &v31[v33];
            int v35 = *v34;
            if (v27 != *v34) {
              break;
            }
          }
        }
LABEL_41:
        if (++v23 >= (unint64_t)v24)
        {
          uint64_t v5 = v144;
          goto LABEL_102;
        }
      }
      unsigned int v36 = 0;
      int v37 = 1;
      while (v35 != -1)
      {
        if (v36) {
          BOOL v38 = 0;
        }
        else {
          BOOL v38 = v35 == -2;
        }
        if (v38) {
          unsigned int v36 = v34;
        }
        unsigned int v39 = v33 + v37++;
        unsigned int v33 = v39 & v32;
        uint64_t v34 = &v31[v33];
        int v35 = *v34;
        if (v27 == *v34) {
          goto LABEL_41;
        }
      }
      if (v36) {
        int v40 = v36;
      }
      else {
        int v40 = v34;
      }
      if (v165) {
        unsigned int v41 = 8;
      }
      else {
        unsigned int v41 = v167;
      }
LABEL_61:
      if (4 * (v165 >> 1) + 4 < 3 * v41)
      {
        if (v41 + ~(v165 >> 1) - HIDWORD(v165) > v41 >> 3)
        {
LABEL_63:
          LODWORD(v165) = (v28 & 0xFFFFFFFE | v29) + 2;
          if (*v40 != -1) {
            --HIDWORD(v165);
          }
          *int v40 = v27;
          v40[1] = (v26 >> 8) & 0xFFF;
          unsigned int v24 = v7[1];
          goto LABEL_41;
        }
        sub_1CD3F1F64((uint64_t)&v165, v41);
        int v28 = v165;
        if (v165)
        {
          int v51 = 8;
          unsigned int v52 = &v166;
LABEL_83:
          int v29 = v165 & 1;
          int v53 = v51 - 1;
          unsigned int v54 = (v51 - 1) & (37 * v27);
          int v40 = &v52[v54];
          int v55 = *v40;
          if (v27 == *v40) {
            goto LABEL_63;
          }
          uint64_t v47 = 0;
          int v56 = 1;
          while (v55 != -1)
          {
            if (v47) {
              BOOL v57 = 0;
            }
            else {
              BOOL v57 = v55 == -2;
            }
            if (v57) {
              uint64_t v47 = v40;
            }
            unsigned int v58 = v54 + v56++;
            unsigned int v54 = v58 & v53;
            int v40 = &v52[v58 & v53];
            int v55 = *v40;
            if (v27 == *v40) {
              goto LABEL_63;
            }
          }
          goto LABEL_93;
        }
        int v51 = v167;
        if (v167)
        {
          unsigned int v52 = v166;
          goto LABEL_83;
        }
LABEL_101:
        int v29 = 0;
        int v40 = 0;
        goto LABEL_63;
      }
      sub_1CD3F1F64((uint64_t)&v165, 2 * v41);
      int v28 = v165;
      if (v165)
      {
        int v42 = 8;
        unint64_t v43 = &v166;
      }
      else
      {
        int v42 = v167;
        if (!v167) {
          goto LABEL_101;
        }
        unint64_t v43 = v166;
      }
      int v29 = v165 & 1;
      int v44 = v42 - 1;
      unsigned int v45 = (v42 - 1) & (37 * v27);
      int v40 = &v43[v45];
      int v46 = *v40;
      if (v27 == *v40) {
        goto LABEL_63;
      }
      uint64_t v47 = 0;
      int v48 = 1;
      while (v46 != -1)
      {
        if (v47) {
          BOOL v49 = 0;
        }
        else {
          BOOL v49 = v46 == -2;
        }
        if (v49) {
          uint64_t v47 = v40;
        }
        unsigned int v50 = v45 + v48++;
        unsigned int v45 = v50 & v44;
        int v40 = &v43[v50 & v44];
        int v46 = *v40;
        if (v27 == *v40) {
          goto LABEL_63;
        }
      }
LABEL_93:
      if (v47) {
        int v40 = v47;
      }
      goto LABEL_63;
    }
LABEL_102:
    uint64_t v59 = *(unsigned int *)(v5 + 40);
    if (v59)
    {
      unint64_t v60 = *(uint64_t **)(v5 + 32);
      uint64_t v61 = &v60[2 * v59];
      while (1)
      {
        uint64_t v62 = *v60;
        if ((*v60 & 6) == 0)
        {
          unint64_t v63 = v62 & 0xFFFFFFFFFFFFFFF8;
          if (*(_DWORD *)((v62 & 0xFFFFFFFFFFFFFFF8) + 192) != -1)
          {
            uint64_t v64 = *(void *)(v63 + 8);
            uint64_t v65 = *(unsigned __int16 **)(v64 + 16);
            int v66 = *v65;
            BOOL v67 = (v66 - 9) > 0x3C || ((1 << (v66 - 9)) & 0x1000000000000605) == 0;
            if (v67 && v66 != 0 && (v65[4] & 0x10) == 0 && (v65[8] & 1) == 0)
            {
              unsigned int v69 = *(_DWORD **)(v64 + 32);
              if ((*v69 & 0x10000FF) == 0x1000000) {
                break;
              }
            }
          }
        }
LABEL_105:
        v60 += 2;
        if (v60 == v61) {
          goto LABEL_156;
        }
      }
      int v70 = v69[1];
      if (v165)
      {
        int v71 = 8;
        unint64_t v72 = &v166;
      }
      else
      {
        unint64_t v72 = v166;
        int v71 = v167;
        if (!v167)
        {
          uint64_t v74 = 0;
          goto LABEL_127;
        }
      }
      int v73 = v71 - 1;
      LODWORD(v74) = (v71 - 1) & (37 * v70);
      int v75 = (int *)&v72[v74];
      int v76 = *v75;
      if (v70 == *v75) {
        goto LABEL_128;
      }
      int v77 = 1;
      while (v76 != -1)
      {
        int v78 = v74 + v77++;
        uint64_t v74 = v78 & v73;
        int v76 = v72[v74];
        if (v70 == v76) {
          goto LABEL_127;
        }
      }
      if (v165)
      {
        unint64_t v72 = &v166;
        uint64_t v74 = 8;
      }
      else
      {
        unint64_t v72 = v166;
        uint64_t v74 = v167;
      }
LABEL_127:
      int v75 = (int *)&v72[v74];
LABEL_128:
      if (v165) {
        char v79 = &v166;
      }
      else {
        char v79 = v166;
      }
      unsigned int v80 = v167;
      if (v165) {
        unsigned int v80 = 8;
      }
      if (&v79[v80] != (void *)v75)
      {
        uint64_t v81 = *(unsigned int *)(v63 + 120);
        if (v81)
        {
          int v82 = v75[1];
          uint64_t v83 = *(void **)(v63 + 112);
          int v84 = &v83[2 * v81];
          while (1)
          {
            if ((*v83 & 6) == 0)
            {
              unint64_t v85 = *v83 & 0xFFFFFFFFFFFFFFF8;
              if (*(_DWORD *)(v85 + 192) != -1 && v144 != v85 && (*(_WORD *)(v85 + 228) & 0x400) == 0)
              {
                uint64_t v87 = *(void *)(v85 + 8);
                uint64_t v88 = *(void *)(v87 + 16);
                uint64_t v89 = *(unsigned __int8 *)(v88 + 4);
                uint64_t v90 = *(unsigned __int16 *)(v88 + 2);
                if (v90 > v89) {
                  break;
                }
              }
            }
LABEL_150:
            v83 += 2;
            if (v83 == v84) {
              goto LABEL_151;
            }
          }
          uint64_t v91 = *(void *)(v87 + 32);
          uint64_t v92 = v90 - v89;
          int v93 = (_DWORD *)(v91 + 32 * v89 + 4);
          while (*(v93 - 1) || *v93 != v70 || ((*(v93 - 1) >> 8) & 0xFFF) != v82)
          {
            v93 += 8;
            if (!--v92) {
              goto LABEL_150;
            }
          }
        }
        else
        {
LABEL_151:
          int v164 = v70;
          sub_1CB9046D8((uint64_t)&v165, &v164);
        }
      }
      goto LABEL_105;
    }
LABEL_156:
    BOOL v157 = v165 < 2;
    if ((v165 & 1) == 0) {
      MEMORY[0x1D25D9CD0](v166, 4, 0x1000000000000605);
    }
    if (v152)
    {
LABEL_36:
      int v21 = 2;
      goto LABEL_164;
    }
LABEL_159:
    if (v151)
    {
      int v21 = 3;
    }
    else if (v150)
    {
      int v21 = 1;
    }
    else
    {
      int v21 = 4;
    }
LABEL_164:
    int v148 = v21;
    uint64_t v95 = *(void *)(*(void *)(a1 + 8) + 2720);
    uint64_t v96 = *(void *)(v95 + 8);
    uint64_t v97 = *(unsigned int *)(v144 + 192);
    if (v96 == *(void *)(v95 + 16)) {
      unsigned int v98 = 0;
    }
    else {
      unsigned int v98 = *(_DWORD *)(v96 + 8 * v97 + 4);
    }
    char v158 = !v150 & ((*(void *)(*(void *)(a1 + 976) + 8 * (v98 >> 6)) >> v98) | (*(_DWORD *)(v96 + 8 * v97) < *(_DWORD *)(v95 + 4)));
    LOBYTE(v163) = sub_1CB904354(v144, *(void *)(a1 + 2040));
    if (!*(unsigned char *)(a1 + 72)) {
      goto LABEL_177;
    }
    char v100 = 0;
    if (!v144) {
      goto LABEL_178;
    }
    uint64_t v101 = *(void *)(a1 + 2032);
    if (!v101) {
      goto LABEL_178;
    }
    char v100 = 0;
    uint64_t v102 = *(void *)(v144 + 8);
    if ((*(unsigned char *)(*(void *)(v102 + 16) + 17) & 2) == 0) {
      goto LABEL_178;
    }
    uint64_t v103 = *(void *)(v101 + 8);
    if ((*(void *)(*(void *)(v103 + 16) + 16) & 0x20) == 0) {
      goto LABEL_178;
    }
    uint64_t v104 = *(void *)(a1 + 48);
    uint64_t v105 = *(unsigned int *)(*(void *)(v102 + 32) + 4);
    __int16 v106 = (uint64_t *)((v105 & 0x80000000) != 0
                     ? *(void *)(v104 + 24) + 16 * (v105 & 0x7FFFFFFF) + 8
                     : *(void *)(v104 + 272) + 8 * v105);
    uint64_t v107 = *v106;
    if (!v107) {
      goto LABEL_177;
    }
    while ((*(unsigned char *)(v107 + 3) & 1) != 0)
    {
      uint64_t v107 = *(void *)(v107 + 24);
      if (!v107) {
        goto LABEL_177;
      }
    }
    uint64_t v116 = *(void *)(v107 + 8);
    if (v116 != v103)
    {
      while (1)
      {
        uint64_t v107 = *(void *)(v107 + 24);
        if (!v107) {
          break;
        }
        if ((*(unsigned char *)(v107 + 3) & 1) == 0)
        {
          uint64_t v117 = *(void *)(v107 + 8);
          if (v117 != v116)
          {
            char v100 = 1;
            uint64_t v116 = *(void *)(v107 + 8);
            if (v117 == v103) {
              goto LABEL_178;
            }
          }
        }
      }
LABEL_177:
      char v100 = 0;
      goto LABEL_178;
    }
    char v100 = 1;
LABEL_178:
    LOBYTE(v156) = v100;
    if (*(void *)(a1 + 312) == *(void *)(a1 + 320) && *(void *)(a1 + 368) == *(void *)(a1 + 376)) {
      goto LABEL_200;
    }
    uint64_t v108 = *(void *)(a1 + 2032);
    BOOL v109 = !v144 || v108 == 0;
    if (v109
      || (uint64_t v110 = *(void *)(v144 + 8), (*(unsigned char *)(*(void *)(v110 + 16) + 16) & 1) == 0)
      || (uint64_t v111 = *(void *)(v108 + 8), (**(_WORD **)(v111 + 16) & 0xFFFE) != 0x2EC4)
      || (unsigned int v112 = *(_DWORD **)(v110 + 32), (*v112 & 0x10000FF) != 0x1000000)
      || ((v113 = *(void *)(a1 + 48), uint64_t v114 = v112[1], (v114 & 0x80000000) != 0)
        ? (unint64_t v115 = (uint64_t *)(*(void *)(v113 + 24) + 16 * (v114 & 0x7FFFFFFF) + 8))
        : (unint64_t v115 = (uint64_t *)(*(void *)(v113 + 272) + 8 * v114)),
          (uint64_t v119 = *v115) == 0))
    {
LABEL_200:
      char v120 = 0;
      goto LABEL_201;
    }
    while ((*(unsigned char *)(v119 + 3) & 1) != 0)
    {
      uint64_t v119 = *(void *)(v119 + 24);
      if (!v119) {
        goto LABEL_200;
      }
    }
    uint64_t v136 = *(void *)(v119 + 8);
    if (v136 != v111)
    {
      while (1)
      {
        uint64_t v119 = *(void *)(v119 + 24);
        if (!v119) {
          goto LABEL_200;
        }
        if ((*(unsigned char *)(v119 + 3) & 1) == 0)
        {
          uint64_t v137 = *(void *)(v119 + 8);
          if (v137 != v136)
          {
            char v120 = 1;
            uint64_t v136 = *(void *)(v119 + 8);
            if (v137 == v111) {
              goto LABEL_201;
            }
          }
        }
      }
    }
    char v120 = 1;
LABEL_201:
    HIBYTE(v156) = v120;
    if (v149)
    {
      uint64_t v122 = *(void *)(a1 + 456);
      uint64_t v121 = *(void *)(a1 + 464);
      if (v121 == v122)
      {
        uint64_t v123 = *v142;
        uint64_t v124 = (void *)(v121 + 8 * v123);
        if (v123)
        {
          uint64_t v125 = 0;
          uint64_t v126 = 8 * v123;
          while (*(void *)(v121 + v125) != v144)
          {
            v125 += 8;
            if (v126 == v125) {
              goto LABEL_220;
            }
          }
          uint64_t v124 = (void *)(v121 + v125);
        }
LABEL_220:
        uint64_t v122 = *(void *)(a1 + 464);
      }
      else
      {
        uint64_t v127 = *v138;
        int v128 = v127 - 1;
        unsigned int v129 = (v127 - 1) & ((v144 >> 4) ^ (v144 >> 9));
        uint64_t v124 = (void *)(v121 + 8 * v129);
        uint64_t v130 = *v124;
        if (*v124 == -1)
        {
          int v131 = 0;
LABEL_227:
          if (v131) {
            uint64_t v124 = v131;
          }
          if (*v124 != v144) {
            uint64_t v124 = (void *)(v121 + 8 * v127);
          }
        }
        else
        {
          int v131 = 0;
          int v132 = 1;
          while (v130 != v144)
          {
            if (v131) {
              BOOL v133 = 0;
            }
            else {
              BOOL v133 = v130 == -2;
            }
            if (v133) {
              int v131 = v124;
            }
            unsigned int v134 = v129 + v132++;
            unsigned int v129 = v134 & v128;
            uint64_t v124 = (void *)(v121 + 8 * (v134 & v128));
            uint64_t v130 = *v124;
            if (*v124 == -1) {
              goto LABEL_227;
            }
          }
        }
      }
      BOOL v11 = v121 == v122;
      int v135 = v142;
      if (!v11) {
        int v135 = v138;
      }
      HIBYTE(v163) = v124 != (void *)(v121 + 8 * *v135);
    }
    sub_1CB902E88(a1, a3, (uint64_t)&v143, a2, v99);
    ++v3;
  }
  while (v3 != v139);
}

__n128 sub_1CB902E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v195 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7)
  {
    unsigned int v8 = *(unsigned __int8 *)(a3 + 37);
    unsigned int v9 = *(unsigned __int8 *)(a2 + 37);
    if (v8 > v9)
    {
      int v10 = 4;
LABEL_4:
      *(_DWORD *)(a3 + 16) = v10;
      goto LABEL_36;
    }
    if (v8 < v9)
    {
      if (*(int *)(a2 + 16) < 5) {
        goto LABEL_36;
      }
      int v11 = 4;
      goto LABEL_35;
    }
    uint64_t v14 = *(void *)(v7 + 8);
    unint64_t v15 = *(unsigned __int16 **)(v14 + 16);
    int v16 = *v15;
    BOOL v17 = (v16 - 9) > 0x3C || ((1 << (v16 - 9)) & 0x1000000000000605) == 0;
    BOOL v18 = !v17 || v16 == 0;
    BOOL v19 = !v18 && (v15[4] & 0x10) == 0 && (v15[8] & 1) == 0;
    uint64_t v20 = *(void *)(*(void *)(a3 + 8) + 8);
    int v21 = *(unsigned __int16 **)(v20 + 16);
    int v22 = *v21;
    BOOL v24 = (v22 - 9) <= 0x3C && ((1 << (v22 - 9)) & 0x1000000000000605) != 0
       || v22 == 0;
    BOOL v25 = !v24 && (v21[4] & 0x10) == 0 && (v21[8] & 1) == 0;
    if (*(unsigned char *)(a1 + 2048))
    {
      if (!*(_DWORD *)(a2 + 16)) {
        goto LABEL_36;
      }
      if (*(_DWORD *)(a1 + 2056))
      {
        if (v19 && !v25)
        {
          *(_DWORD *)(a3 + 16) = 1;
LABEL_34:
          int v11 = 25;
LABEL_35:
          *(_DWORD *)(a2 + 16) = v11;
          goto LABEL_36;
        }
        if (v25 && !v19) {
          goto LABEL_34;
        }
      }
      uint64_t v28 = *(void *)(a1 + 2032);
      if (v28)
      {
        int v29 = *(unsigned __int16 **)(*(void *)(v28 + 8) + 16);
        int v30 = *v29;
        BOOL v31 = (v30 - 9) > 0x3C || ((1 << (v30 - 9)) & 0x1000000000000605) == 0;
        BOOL v32 = !v31 || v30 == 0;
        if (!v32
          && (v29[4] & 0x10) == 0
          && (v29[8] & 1) == 0
          && *(unsigned __int8 *)(a2 + 24) != *(unsigned __int8 *)(a3 + 24)
          && (sub_1CB904820(v14) || sub_1CB904820(v20)))
        {
          __dst = v193;
          uint64_t v192 = 0x600000000;
          unsigned int v33 = *(_DWORD *)(a1 + 1968);
          if (v33 && &__dst != (void **)(a1 + 1960))
          {
            if (v33 >= 7) {
              llvm::SmallVectorBase<unsigned int>::grow_pod();
            }
            memcpy(v193, *(const void **)(a1 + 1960), 8 * *(unsigned int *)(a1 + 1968));
            LODWORD(v192) = v33;
          }
          int v194 = *(_DWORD *)(a1 + 2024);
          long long v190 = 0u;
          memset(v189, 0, sizeof(v189));
          unsigned int v45 = *(unint64_t **)(a1 + 256);
          for (uint64_t i = *(unint64_t **)(a1 + 264); v45 != i; ++v45)
          {
            unint64_t v188 = *v45;
            uint64_t v47 = *(unsigned __int16 **)(*(void *)(v188 + 8) + 16);
            int v48 = *v47;
            BOOL v50 = (v48 - 9) <= 0x3C && ((1 << (v48 - 9)) & 0x1000000000000605) != 0
               || v48 == 0;
            if (v50 || (v47[4] & 0x10) != 0 || (v47[8] & 1) != 0) {
              sub_1CD3F21B0(v189, &v188);
            }
          }
          unsigned int v51 = 0;
          while (*((void *)&v190 + 1))
          {
            uint64_t v52 = *(void *)(*(void *)(*((void *)&v189[0] + 1)
                                        + (((unint64_t)v190 >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * (v190 & 0x1FF));
            *(void *)&long long v190 = v190 + 1;
            --*((void *)&v190 + 1);
            if ((unint64_t)v190 >= 0x400)
            {
              operator delete(**((void ***)&v189[0] + 1));
              *((void *)&v189[0] + 1) += 8;
              *(void *)&long long v190 = v190 - 512;
            }
            uint64_t v53 = *(unsigned int *)(v52 + 120);
            if (v53)
            {
              unsigned int v54 = *(void **)(v52 + 112);
              uint64_t v55 = 16 * v53;
              while (1)
              {
                unint64_t v56 = *(unsigned int *)((*v54 & 0xFFFFFFFFFFFFFFF8) + 192);
                if (v56 != -1 && ((*(void *)((char *)__dst + ((v56 >> 3) & 0x1FFFFFF8)) >> v56) & 1) == 0) {
                  break;
                }
                v54 += 2;
                v55 -= 16;
                if (!v55) {
                  goto LABEL_116;
                }
              }
            }
            else
            {
LABEL_116:
              v51 += *(unsigned __int16 *)(v52 + 226);
              *(void *)((char *)__dst + (((unint64_t)*(unsigned int *)(v52 + 192) >> 3) & 0x1FFFFFF8)) |= 1 << *(_DWORD *)(v52 + 192);
              uint64_t v57 = *(unsigned int *)(v52 + 40);
              if (v57)
              {
                unsigned int v58 = *(void **)(v52 + 32);
                uint64_t v59 = 16 * v57;
                do
                {
                  unint64_t v60 = *v58 & 0xFFFFFFFFFFFFFFF8;
                  if (*(_DWORD *)(v60 + 192) != -1)
                  {
                    uint64_t v61 = *(unsigned __int16 **)(*(void *)(v60 + 8) + 16);
                    int v62 = *v61;
                    BOOL v63 = (v62 - 9) > 0x3C
                       || ((1 << (v62 - 9)) & 0x1000000000000605) == 0;
                    BOOL v64 = !v63 || v62 == 0;
                    if (v64 || (v61[4] & 0x10) != 0 || (v61[8] & 1) != 0)
                    {
                      unint64_t v188 = *v58 & 0xFFFFFFFFFFFFFFF8;
                      sub_1CD3F21B0(v189, &v188);
                    }
                  }
                  v58 += 2;
                  v59 -= 16;
                }
                while (v59);
              }
            }
            if (v51 >= 0x10)
            {
              unsigned int v51 = 16;
              break;
            }
          }
          sub_1CB904DFC((void **)v189);
          if (__dst != v193) {
            free(__dst);
          }
          uint64_t v65 = *(unsigned __int16 **)(*(void *)(*(void *)(a2 + 8) + 8) + 16);
          int v66 = *v65;
          BOOL v68 = (v66 - 9) <= 0x3C && ((1 << (v66 - 9)) & 0x1000000000000605) != 0
             || v66 == 0;
          uint64_t v69 = a2;
          uint64_t v70 = a3;
          if (!v68)
          {
            uint64_t v69 = a2;
            uint64_t v70 = a3;
            if ((v65[4] & 0x10) == 0)
            {
              uint64_t v71 = *((void *)v65 + 2);
              if (v71) {
                uint64_t v69 = a2;
              }
              else {
                uint64_t v69 = a3;
              }
              if (v71) {
                uint64_t v70 = a3;
              }
              else {
                uint64_t v70 = a2;
              }
            }
          }
          if (v51 < 0x10)
          {
            *(_DWORD *)(v69 + 16) = 25;
            *(_DWORD *)(v70 + 16) = 0;
          }
          else
          {
            *(_DWORD *)(v69 + 16) = 1;
            *(_DWORD *)(v70 + 16) = 25;
            *(_DWORD *)(a1 + 2056) = v51;
          }
          goto LABEL_36;
        }
      }
    }
    if (*(unsigned char *)(a3 + 24) && *(unsigned char *)(a2 + 24))
    {
      unsigned int v34 = *(unsigned __int8 *)(a3 + 38);
      unsigned int v35 = *(unsigned __int8 *)(a2 + 38);
      if (v34 > v35)
      {
        int v10 = 3;
        goto LABEL_4;
      }
      if (v34 < v35)
      {
        if (*(int *)(a2 + 16) >= 4)
        {
          int v11 = 3;
          goto LABEL_35;
        }
LABEL_36:
        if (*(_DWORD *)(a3 + 16) == 25) {
          return result;
        }
        goto LABEL_37;
      }
    }
    if (!*(unsigned char *)(a2 + 36) && *(unsigned __int8 *)(a2 + 24) == *(unsigned __int8 *)(a3 + 24) && *(unsigned char *)(a3 + 36))
    {
      int v10 = 2;
      goto LABEL_4;
    }
    int v36 = sub_1CB9048C0(a1, a3);
    int v37 = sub_1CB9048C0(a1, a2);
    if (v36 < v37)
    {
LABEL_65:
      int v10 = 16;
      goto LABEL_4;
    }
    if (v36 > v37)
    {
LABEL_67:
      if (*(int *)(a2 + 16) >= 17)
      {
        int v11 = 16;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    unsigned int v38 = *(unsigned __int8 *)(a3 + 39);
    unsigned int v39 = *(unsigned __int8 *)(a2 + 39);
    if (v38 > v39)
    {
      int v10 = 17;
      goto LABEL_4;
    }
    if (v38 < v39)
    {
      if (*(int *)(a2 + 16) >= 18)
      {
        int v11 = 17;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (*(unsigned char *)(a1 + 2048) && (v19 || v25))
    {
      uint64_t v40 = *(void *)(a1 + 2216);
      int v41 = (int)*(float *)(v40 + 4 * *(unsigned int *)(*(void *)(a3 + 8) + 192));
      result.n128_u32[0] = *(_DWORD *)(v40 + 4 * *(unsigned int *)(*(void *)(a2 + 8) + 192));
      if (v41 < (int)result.n128_f32[0])
      {
LABEL_80:
        int v10 = 1;
        goto LABEL_4;
      }
      if (v41 > (int)result.n128_f32[0])
      {
LABEL_82:
        if (*(int *)(a2 + 16) >= 2)
        {
          int v11 = 1;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    if (*(unsigned char *)(a1 + 1049))
    {
      if (*(unsigned char *)(a3 + 34))
      {
        int v42 = 1;
        goto LABEL_156;
      }
    }
    else
    {
      int v42 = *(unsigned __int8 *)(a3 + 34);
      if (!*(unsigned char *)(a1 + 1952) || *(unsigned char *)(a3 + 34)) {
        goto LABEL_156;
      }
    }
    if (!*(unsigned char *)(a2 + 34) && *(unsigned __int8 *)(a3 + 24) == *(unsigned __int8 *)(a2 + 24))
    {
      unsigned int v43 = *(unsigned __int8 *)(a3 + 42);
      unsigned int v44 = *(unsigned __int8 *)(a2 + 42);
      if (v43 > v44)
      {
        int v10 = 14;
        goto LABEL_4;
      }
      if (v43 < v44)
      {
        if (*(int *)(a2 + 16) >= 15)
        {
          int v11 = 14;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    int v42 = 0;
LABEL_156:
    if (*(unsigned char *)(a1 + 1048))
    {
      int v72 = *(_DWORD *)(a3 + 52);
      if (v72 == -1)
      {
        uint64_t v73 = *(void *)(a3 + 8);
        uint64_t v74 = *(unsigned int *)(v73 + 40);
        if (v74)
        {
          int v72 = 0;
          int v75 = *(uint64_t **)(v73 + 32);
          uint64_t v76 = 16 * v74;
          do
          {
            uint64_t v77 = *v75;
            v75 += 2;
            if (*(_DWORD *)((v77 & 0xFFFFFFFFFFFFFFF8) + 212) == 1) {
              ++v72;
            }
            v76 -= 16;
          }
          while (v76);
        }
        else
        {
          int v72 = 0;
        }
        *(_DWORD *)(a3 + 52) = v72;
      }
      int v78 = *(_DWORD *)(a2 + 52);
      if (v78 == -1)
      {
        uint64_t v79 = *(void *)(a2 + 8);
        uint64_t v80 = *(unsigned int *)(v79 + 40);
        if (v80)
        {
          int v78 = 0;
          uint64_t v81 = *(uint64_t **)(v79 + 32);
          uint64_t v82 = 16 * v80;
          do
          {
            uint64_t v83 = *v81;
            v81 += 2;
            if (*(_DWORD *)((v83 & 0xFFFFFFFFFFFFFFF8) + 212) == 1) {
              ++v78;
            }
            v82 -= 16;
          }
          while (v82);
        }
        else
        {
          int v78 = 0;
        }
        *(_DWORD *)(a2 + 52) = v78;
      }
      if (v72 > v78)
      {
        int v10 = 21;
        goto LABEL_4;
      }
      if (v72 < v78)
      {
        if (*(int *)(a2 + 16) >= 22)
        {
          int v11 = 21;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    unsigned int v84 = *(unsigned __int8 *)(a3 + 40);
    unsigned int v85 = *(unsigned __int8 *)(a2 + 40);
    if (v84 > v85)
    {
      int v10 = 11;
      goto LABEL_4;
    }
    if (v84 < v85)
    {
      if (*(int *)(a2 + 16) >= 12)
      {
        int v11 = 11;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    unsigned int v86 = *(unsigned __int8 *)(a3 + 73);
    unsigned int v87 = *(unsigned __int8 *)(a2 + 73);
    if (v86 < v87)
    {
      int v10 = 12;
      goto LABEL_4;
    }
    if (v86 > v87)
    {
      if (*(int *)(a2 + 16) >= 13)
      {
        int v11 = 12;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    unsigned int v88 = *(unsigned __int8 *)(a3 + 72);
    unsigned int v89 = *(unsigned __int8 *)(a2 + 72);
    if (v88 > v89)
    {
LABEL_191:
      int v10 = 18;
      goto LABEL_4;
    }
    if (v88 < v89)
    {
LABEL_193:
      if (*(int *)(a2 + 16) >= 19)
      {
        int v11 = 18;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (*(unsigned char *)(a1 + 1050))
    {
      unsigned int v90 = *(unsigned __int8 *)(a3 + 33);
      unsigned int v91 = *(unsigned __int8 *)(a2 + 33);
      if (v90 <= v91)
      {
        if (v90 >= v91)
        {
LABEL_224:
          unsigned int v98 = *(_DWORD *)(a1 + 1932);
          if (*(_DWORD *)(a1 + 1060) < v98) {
            goto LABEL_244;
          }
          if (!*(unsigned char *)(a1 + 1052)) {
            goto LABEL_244;
          }
          unsigned int v99 = *(unsigned __int8 *)(a3 + 33);
          unsigned int v100 = *(unsigned __int8 *)(a2 + 33);
          if (v99 == v100) {
            goto LABEL_244;
          }
          unsigned int v101 = 0;
          uint64_t v102 = 0;
          __dst = (void *)(a1 + 224);
          uint64_t v192 = a1 + 280;
          v193[0] = a1 + 392;
          do
          {
            uint64_t v103 = (uint64_t)*(&__dst + v102);
            uint64_t v105 = *(void *)(v103 + 32);
            uint64_t v104 = *(void *)(v103 + 40);
            while (v105 != v104)
            {
              __int16 v106 = *(unsigned __int16 **)(*(void *)(*(void *)v105 + 8) + 16);
              int v107 = *v106;
              if (((v107 - 9) > 0x3C || ((1 << (v107 - 9)) & 0x1000000000000605) == 0)
                && v107 != 0
                && (v106[4] & 0x10) == 0)
              {
                uint64_t v110 = *((void *)v106 + 2);
                if ((v110 & 1) == 0 && (v110 & 0xC0) == 0) {
                  ++v101;
                }
              }
              v105 += 8;
            }
            ++v102;
          }
          while (v102 != 3);
          if (v101 < v98)
          {
LABEL_244:
            if (!v42 && !*(unsigned char *)(a2 + 34))
            {
              unsigned int v111 = *(unsigned __int8 *)(a3 + 24);
              unsigned int v112 = *(unsigned __int8 *)(a2 + 24);
              if (v111 > v112)
              {
                int v10 = 9;
                goto LABEL_4;
              }
              if (v111 < v112)
              {
                if (*(int *)(a2 + 16) >= 10)
                {
                  int v11 = 9;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            int v113 = *(_DWORD *)(a3 + 28);
            int v114 = *(_DWORD *)(a2 + 28);
            if (v113 > v114)
            {
              int v10 = 7;
              goto LABEL_4;
            }
            if (v113 < v114)
            {
              if (*(int *)(a2 + 16) >= 8)
              {
                int v11 = 7;
                goto LABEL_35;
              }
              goto LABEL_36;
            }
            int v185 = 0;
            int v186 = 0;
            uint64_t v115 = *(void *)(*(void *)(a3 + 8) + 8);
            uint64_t v116 = *(void *)(*(void *)(a2 + 8) + 8);
            uint64_t v117 = *(void *)(*(void *)(v115 + 16) + 16);
            uint64_t v118 = *(void *)(*(void *)(v116 + 16) + 16);
            if ((v117 & 0x100) != 0 && (v118 & 0x100) != 0 || (v117 & 0x2000) != 0 && (v118 & 0x2000) != 0)
            {
              int v187 = 0;
              LODWORD(v188) = 0;
              if (sub_1CD3D47BC(v115, (int *)&v188, &v186, (int *)&__dst))
              {
                if (sub_1CD3D47BC(v116, &v187, &v185, (int *)v189) && v188 == v187)
                {
                  if (v186 > v185) {
                    goto LABEL_191;
                  }
                  if (v186 < v185) {
                    goto LABEL_193;
                  }
                }
              }
            }
            unsigned int v119 = *(unsigned __int8 *)(a3 + 32);
            unsigned int v120 = *(unsigned __int8 *)(a2 + 32);
            if (v119 < v120)
            {
LABEL_261:
              int v10 = 6;
              goto LABEL_4;
            }
            if (v119 > v120)
            {
LABEL_266:
              if (*(int *)(a2 + 16) >= 7)
              {
                int v11 = 6;
                goto LABEL_35;
              }
              goto LABEL_36;
            }
            if (a1 + 224 == a4)
            {
              unsigned int v129 = sub_1CB903FC4(a1, a3);
              if (v129 >= 0x10 || *(unsigned char *)(a3 + 33) == 0) {
                signed int v131 = v129;
              }
              else {
                signed int v131 = 0;
              }
              unsigned int v132 = sub_1CB903FC4(a1, a2);
              if (v132 >= 0x10 || *(unsigned char *)(a2 + 33) == 0) {
                signed int v134 = v132;
              }
              else {
                signed int v134 = 0;
              }
              if (v131 < v134) {
                goto LABEL_261;
              }
              if (v131 > v134) {
                goto LABEL_266;
              }
            }
            else
            {
              int v122 = *(_DWORD *)(a3 + 68);
              if (v122 == -1)
              {
                unsigned int v123 = sub_1CB903FC4(a1, a3);
                unsigned int v124 = *(unsigned __int16 *)(*(void *)(a3 + 8) + 226);
                unsigned int v125 = v124 - v123;
                if (v124 < v123) {
                  unsigned int v125 = 0;
                }
                if (v123) {
                  int v122 = v125;
                }
                else {
                  int v122 = *(unsigned __int16 *)(*(void *)(a3 + 8) + 226);
                }
                *(_DWORD *)(a3 + 68) = v122;
              }
              signed int v126 = *(_DWORD *)(a2 + 68);
              if (v126 == -1)
              {
                unsigned int v127 = sub_1CB903FC4(a1, a2);
                signed int v126 = *(unsigned __int16 *)(*(void *)(a2 + 8) + 226);
                int v128 = v126 - v127;
                if (v126 < v127) {
                  int v128 = 0;
                }
                if (v127) {
                  signed int v126 = v128;
                }
                *(_DWORD *)(a2 + 68) = v126;
              }
              if (v122 > v126)
              {
                int v10 = 5;
                goto LABEL_4;
              }
              if (v122 < v126)
              {
                if (*(int *)(a2 + 16) >= 6)
                {
                  int v11 = 5;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            if (!*(unsigned char *)(a1 + 72))
            {
              unsigned int v137 = *(unsigned __int8 *)(a3 + 25);
              unsigned int v138 = *(unsigned __int8 *)(a2 + 25);
              if (v137 > v138)
              {
                int v10 = 10;
                goto LABEL_4;
              }
              if (v137 < v138)
              {
                if (*(int *)(a2 + 16) >= 11)
                {
                  int v11 = 10;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            unsigned int v135 = *(unsigned __int8 *)(a3 + 41);
            unsigned int v136 = *(unsigned __int8 *)(a2 + 41);
            if (v135 > v136)
            {
              int v10 = 24;
              goto LABEL_4;
            }
            if (v135 < v136)
            {
              if (*(int *)(a2 + 16) >= 25)
              {
                int v11 = 24;
                goto LABEL_35;
              }
              goto LABEL_36;
            }
            unsigned int v139 = sub_1CB90495C(a1, a3);
            unsigned int v182 = sub_1CB90495C(a1, a2);
            signed int v183 = v139;
            result.n128_f32[0] = (float)v139;
            BOOL v140 = (float)((float)v139 * 1.2) < (float)v182;
            if ((float)((float)v182 * 1.2) < (float)v139) {
              BOOL v140 = 1;
            }
            BOOL v184 = v140;
            if (v140 && !*(unsigned char *)(a1 + 1048) && !*(unsigned char *)(a1 + 1049) && *(unsigned char *)(a1 + 73))
            {
              int v180 = sub_1CB9049E0(a1, a3);
              int v181 = sub_1CB9049E0(a1, a2);
              if (v180 > v181)
              {
                int v10 = 13;
                goto LABEL_4;
              }
              if (v180 < v181)
              {
                if (*(int *)(a2 + 16) >= 14)
                {
                  int v11 = 13;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            uint64_t v141 = *(void *)(a3 + 8);
            if ((*(unsigned char *)(v141 + 236) & 1) == 0) {
              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
            }
            int v142 = *(_DWORD *)(v141 + 240);
            uint64_t v143 = *(void *)(a2 + 8);
            if ((*(unsigned char *)(v143 + 236) & 1) == 0) {
              llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
            }
            if (v142 - *(_DWORD *)(v143 + 240) >= 0) {
              unsigned int v144 = v142 - *(_DWORD *)(v143 + 240);
            }
            else {
              unsigned int v144 = *(_DWORD *)(v143 + 240) - v142;
            }
            int v145 = *(_DWORD *)(a1 + 572);
            int v146 = *(_DWORD *)(a1 + 576);
            BOOL v17 = v145 == v146;
            BOOL v147 = v145 != v146;
            if (!v17 && !*(unsigned char *)(a2 + 33) && !*(unsigned char *)(a3 + 33))
            {
              uint64_t v148 = *(void *)(a1 + 560);
              uint64_t v149 = 568;
              if (v148 == *(void *)(a1 + 552)) {
                uint64_t v149 = 572;
              }
              uint64_t v150 = *(unsigned int *)(a1 + v149);
              if (v150)
              {
                uint64_t v151 = 8 * v150;
                BOOL v152 = *(unint64_t **)(a1 + 560);
                while (*v152 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v152;
                  v151 -= 8;
                  if (!v151) {
                    goto LABEL_355;
                  }
                }
              }
              else
              {
                BOOL v152 = *(unint64_t **)(a1 + 560);
              }
              BOOL v153 = (unint64_t *)(v148 + 8 * v150);
              if (v152 == v153)
              {
LABEL_355:
                unsigned int v155 = -1;
              }
              else
              {
                unint64_t v154 = *v152;
                unsigned int v155 = -1;
LABEL_347:
                if ((*(unsigned char *)(v154 + 236) & 1) == 0) {
                  llvm::SUnit::ComputeDepth((llvm::SUnit *)v154);
                }
                if (v155 >= *(_DWORD *)(v154 + 240) + *(unsigned __int16 *)(v154 + 226)) {
                  unsigned int v155 = *(_DWORD *)(v154 + 240) + *(unsigned __int16 *)(v154 + 226);
                }
                __int16 v156 = v152 + 1;
                while (v156 != v153)
                {
                  unint64_t v157 = *v156++;
                  unint64_t v154 = v157;
                  if (v157 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    BOOL v152 = v156 - 1;
                    goto LABEL_347;
                  }
                }
              }
              uint64_t v158 = *(void *)(a2 + 8);
              if ((*(unsigned char *)(v158 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
              }
              if (*(_DWORD *)(v158 + 240) >= v155)
              {
                BOOL v147 = 1;
              }
              else
              {
                uint64_t v159 = *(void *)(a3 + 8);
                if ((*(unsigned char *)(v159 + 236) & 1) == 0) {
                  llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                }
                BOOL v147 = *(_DWORD *)(v159 + 240) >= v155;
              }
            }
            if (v144 <= 4) {
              BOOL v147 = 0;
            }
            if (!*(unsigned char *)(a1 + 1049) && !v147)
            {
              int v160 = *(_DWORD *)(a3 + 44);
              if (v160 == 0x7FFFFFFF)
              {
                uint64_t v161 = 0;
                unint64_t v162 = *(void *)(*(void *)(a1 + 8) + 3104)
                     + ((unint64_t)*(unsigned int *)(*(void *)(a3 + 8) + 192) << 6);
                while (!(unsigned __int16)*(_DWORD *)(v162 + v161)
                     || (unsigned __int16)*(_DWORD *)(v162 + v161) - 1 != *(_DWORD *)(a1 + 64))
                {
                  v161 += 4;
                  if (v161 == 64)
                  {
                    int v160 = 0;
                    goto LABEL_374;
                  }
                }
                int v160 = *(int *)(v162 + v161) >> 16;
LABEL_374:
                *(_DWORD *)(a3 + 44) = v160;
              }
              int v163 = *(_DWORD *)(a2 + 44);
              if (v163 == 0x7FFFFFFF)
              {
                uint64_t v164 = 0;
                unint64_t v165 = *(void *)(*(void *)(a1 + 8) + 3104)
                     + ((unint64_t)*(unsigned int *)(*(void *)(a2 + 8) + 192) << 6);
                while (!(unsigned __int16)*(_DWORD *)(v165 + v164)
                     || (unsigned __int16)*(_DWORD *)(v165 + v164) - 1 != *(_DWORD *)(a1 + 64))
                {
                  v164 += 4;
                  if (v164 == 64)
                  {
                    int v163 = 0;
                    goto LABEL_382;
                  }
                }
                int v163 = *(int *)(v165 + v164) >> 16;
LABEL_382:
                *(_DWORD *)(a2 + 44) = v163;
              }
              if (v160 < v163)
              {
                int v10 = 15;
                goto LABEL_4;
              }
              if (v160 > v163)
              {
                if (*(int *)(a2 + 16) >= 16)
                {
                  int v11 = 15;
                  goto LABEL_35;
                }
                goto LABEL_36;
              }
            }
            if (*(unsigned char *)(a1 + 2048)) {
              char v166 = v19;
            }
            else {
              char v166 = 1;
            }
            char v167 = v166 | v25;
            uint64_t v168 = *(void *)(a3 + 8);
            if (v167) {
              goto LABEL_392;
            }
            uint64_t v174 = *(void *)(a1 + 2216);
            int v175 = (int)*(float *)(v174 + 4 * *(unsigned int *)(v168 + 192));
            result.n128_u32[0] = *(_DWORD *)(v174 + 4 * *(unsigned int *)(*(void *)(a2 + 8) + 192));
            if (v175 < (int)result.n128_f32[0]) {
              goto LABEL_80;
            }
            if (v175 <= (int)result.n128_f32[0])
            {
LABEL_392:
              if ((*(unsigned char *)(v168 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
              }
              unsigned int v169 = *(_DWORD *)(v168 + 240);
              uint64_t v170 = *(void *)(a2 + 8);
              if ((*(unsigned char *)(v170 + 236) & 1) == 0) {
                llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
              }
              unsigned int v171 = *(_DWORD *)(v170 + 240);
              if (v169 > v171) {
                unsigned int v171 = v169;
              }
              if (*(_DWORD *)(*(void *)(a1 + 800) + 4 * *(unsigned int *)(a1 + 960)) > *(_DWORD *)(*(void *)(a1 + 16) + 276)
                                                                                          * v171)
              {
                int v172 = sub_1CB904BA0(a1, a3);
                int v173 = sub_1CB904BA0(a1, a2);
                if (v172 > v173)
                {
                  int v10 = 20;
                  goto LABEL_4;
                }
                if (v172 < v173)
                {
                  if (*(int *)(a2 + 16) >= 21)
                  {
                    int v11 = 20;
                    goto LABEL_35;
                  }
                  goto LABEL_36;
                }
              }
              if (!*(unsigned char *)(a1 + 1049))
              {
                uint64_t v176 = *(void *)(a3 + 8);
                if ((*(unsigned char *)(v176 + 236) & 1) == 0) {
                  llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a3 + 8));
                }
                int v177 = *(_DWORD *)(v176 + 240);
                uint64_t v178 = *(void *)(a2 + 8);
                if ((*(unsigned char *)(v178 + 236) & 1) == 0) {
                  llvm::SUnit::ComputeDepth(*(llvm::SUnit **)(a2 + 8));
                }
                int v179 = *(_DWORD *)(v178 + 240);
                if (v177 > v179)
                {
                  int v10 = 22;
                  goto LABEL_4;
                }
                if (v177 < v179)
                {
                  if (*(int *)(a2 + 16) >= 23)
                  {
                    int v11 = 22;
                    goto LABEL_35;
                  }
                  goto LABEL_36;
                }
              }
              if (!v184) {
                goto LABEL_411;
              }
              if (v183 < (int)v182) {
                goto LABEL_65;
              }
              if (v183 <= (int)v182)
              {
LABEL_411:
                if (*(_DWORD *)(*(void *)(a3 + 8) + 192) > *(_DWORD *)(*(void *)(a2 + 8) + 192))
                {
                  int v10 = 23;
                  goto LABEL_4;
                }
                goto LABEL_36;
              }
              goto LABEL_67;
            }
            goto LABEL_82;
          }
          if (v99 >= v100)
          {
            if (v99 <= v100) {
              goto LABEL_244;
            }
            uint64_t v121 = (_DWORD *)(a2 + 16);
            if (*(int *)(a2 + 16) <= 19) {
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t v121 = (_DWORD *)(a3 + 16);
          }
          _DWORD *v121 = 19;
          goto LABEL_36;
        }
LABEL_219:
        if (*(int *)(a2 + 16) >= 20)
        {
          int v11 = 19;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 1056) == 1
        || *(_DWORD *)(a1 + 572) + *(_DWORD *)(a1 + 1064) - *(_DWORD *)(a1 + 576) == 1
        || (v92 = *(unsigned __int8 *)(a3 + 32), unsigned int v93 = *(unsigned __int8 *)(a2 + 32), v92 == v93))
      {
        if (!*(unsigned char *)(a3 + 32) || !*(unsigned char *)(a2 + 32)) {
          goto LABEL_224;
        }
        unsigned int v93 = 1;
        unsigned int v92 = 1;
      }
      uint64_t v94 = *(void *)(a2 + 8);
      if (*(_DWORD *)(v94 + 200) == 1) {
        int v95 = (*(unsigned __int8 *)(*(void *)(*(void *)((**(void **)(v94 + 32) & 0xFFFFFFFFFFFFFFF8) + 8) + 16)
      }
                                  + 17) >> 1) & 1;
      else {
        int v95 = 0;
      }
      uint64_t v96 = *(void *)(a3 + 8);
      if (*(_DWORD *)(v96 + 200) == 1) {
        int v97 = (*(unsigned __int8 *)(*(void *)(*(void *)((**(void **)(v96 + 32) & 0xFFFFFFFFFFFFFFF8) + 8) + 16)
      }
                                  + 17) >> 1) & 1;
      else {
        int v97 = 0;
      }
      if (!v92) {
        int v97 = 0;
      }
      if (!v93) {
        int v95 = 0;
      }
      if (v95 != 1 || v97)
      {
        if ((v97 & (v95 ^ 1)) == 1) {
          goto LABEL_219;
        }
        if (!*(unsigned char *)(a1 + 1051)) {
          goto LABEL_224;
        }
        if (v92 >= v93)
        {
          if (v92 <= v93) {
            goto LABEL_224;
          }
          goto LABEL_219;
        }
      }
    }
    int v10 = 19;
    goto LABEL_4;
  }
LABEL_37:
  *(_OWORD *)a2 = *(_OWORD *)a3;
  uint64_t result = *(__n128 *)(a3 + 16);
  long long v26 = *(_OWORD *)(a3 + 32);
  long long v27 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 58) = *(_OWORD *)(a3 + 58);
  *(_OWORD *)(a2 + 32) = v26;
  *(_OWORD *)(a2 + 48) = v27;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

unint64_t sub_1CB903FC4(uint64_t a1, uint64_t a2)
{
  unint64_t result = *(unsigned int *)(a2 + 64);
  if (result == -1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    unsigned int v6 = *(_DWORD *)(v5 + 252);
    uint64_t v7 = *(_WORD **)(v5 + 24);
    if (!v7)
    {
      uint64_t v8 = *(void *)(a1 + 8);
      uint64_t v7 = (_WORD *)(*(void *)(v8 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 8) + 16) + 6));
      if ((v7[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          unsigned int v17 = (*(uint64_t (**)(void))(**(void **)(v8 + 808) + 200))(*(void *)(v8 + 808));
          uint64_t v18 = *(void *)(v8 + 672);
        }
        while ((*(_WORD *)(v18 + 24 * v17 + 8) & 0x1FFF) == 0x1FFE);
        uint64_t v7 = (_WORD *)(v18 + 24 * v17);
      }
      *(void *)(v5 + 24) = v7;
    }
    uint64_t v9 = (unsigned __int16)v7[6];
    if (v7[6])
    {
      int v10 = (unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 176) + 136)
                               + 4 * (unsigned __int16)v7[5]);
      int v11 = &v10[2 * v9];
      do
      {
        if (*(_DWORD *)(*(void *)(a1 + 880) + 4 * *v10) + v10[1] > v6) {
          unsigned int v6 = *(_DWORD *)(*(void *)(a1 + 880) + 4 * *v10) + v10[1];
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
    int v12 = *(_DWORD *)(a1 + 968);
    if ((int)v6 <= v12 + 1
      && sub_1CB904508(**(_WORD **)(*(void *)(v5 + 8) + 16), *(unsigned __int8 *)(a1 + 72)))
    {
      unsigned int v6 = v12 + 2;
    }
    unsigned int v13 = *(_DWORD *)(a1 + 448);
    if (v13 >= v6)
    {
      unint64_t result = 0;
    }
    else
    {
      uint64_t v14 = *(void *)(a2 + 8);
      uint64_t v15 = *(void *)(v14 + 24);
      if (!v15)
      {
        if (byte_1EBD06248)
        {
          uint64_t v16 = *(void *)(a1 + 8);
          uint64_t v15 = *(void *)(v16 + 672);
          if (v15)
          {
            v15 += 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v14 + 8) + 16) + 6);
            if ((*(_WORD *)(v15 + 8) & 0x1FFF) == 0x1FFE)
            {
              do
              {
                unsigned int v19 = (*(uint64_t (**)(void))(**(void **)(v16 + 808) + 200))(*(void *)(v16 + 808));
                uint64_t v20 = *(void *)(v16 + 672);
              }
              while ((*(_WORD *)(v20 + 24 * v19 + 8) & 0x1FFF) == 0x1FFE);
              uint64_t v15 = v20 + 24 * v19;
              unsigned int v13 = *(_DWORD *)(a1 + 448);
            }
            *(void *)(v14 + 24) = v15;
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
      }
      unint64_t result = v6 - v13;
      if (v15 == *(void *)(a1 + 80)) {
        unint64_t result = result / 3uLL;
      }
    }
    *(_DWORD *)(a2 + 64) = result;
  }
  return result;
}

uint64_t sub_1CB904224(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v8 = 0;
  int v3 = sub_1CB9042A4(a1, &v7, &v8);
  uint64_t v4 = a1 + 8;
  if (v3) {
    return v8;
  }
  if (*(_DWORD *)a1)
  {
    uint64_t v6 = 8;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

uint64_t sub_1CB9042A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      uint64_t v7 = 0;
      uint64_t result = 0;
      goto LABEL_6;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  uint64_t v7 = (void *)(v3 + 16 * v6);
  uint64_t v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    int v10 = 0;
    int v11 = 1;
    uint64_t result = 1;
    while (v8 != -4096)
    {
      if (v10) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -8192;
      }
      if (v12) {
        int v10 = v7;
      }
      unsigned int v13 = v6 + v11++;
      unsigned int v6 = v13 & v5;
      uint64_t v7 = (void *)(v3 + 16 * (v13 & v5));
      uint64_t v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_6;
      }
    }
    uint64_t result = 0;
    if (v10) {
      uint64_t v7 = v10;
    }
  }
LABEL_6:
  *a3 = v7;
  return result;
}

BOOL sub_1CB904354(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (!a1 || !a2) {
    return result;
  }
  int v4 = *(void **)(a1 + 8);
  int v5 = *(void **)(a2 + 8);
  uint64_t v6 = v4[2];
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = v5[2];
  uint64_t v9 = *(void *)(v8 + 16);
  if ((v7 & 0x100) != 0 && (v9 & 0x100) != 0 || (v7 & 0x2000) != 0 && (v9 & 0x2000) != 0)
  {
    unint64_t v10 = v4[6];
    if (v10 >= 8)
    {
      if ((v10 & 7) != 0)
      {
        int v11 = (_DWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
        BOOL v12 = (v4[6] & 7) != 3 || v11 == 0;
        if (v12 || !*v11) {
          goto LABEL_14;
        }
      }
      else
      {
        v10 &= 0xFFFFFFFFFFFFFFF8;
        v4[6] = v10;
      }
      if ((v10 & 7) != 0)
      {
        int v22 = *(uint64_t **)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      else
      {
        int v22 = (uint64_t *)(v10 & 0xFFFFFFFFFFFFFFF8);
        v4[6] = v22;
      }
      UnderlyingObject = 0;
      uint64_t v24 = *v22;
      if ((*v22 & 4) == 0 && (v24 & 0xFFFFFFFFFFFFFFF8) != 0) {
        UnderlyingObject = llvm::getUnderlyingObject((llvm *)(v24 & 0xFFFFFFFFFFFFFFF8), (const llvm::Value *)6);
      }
LABEL_15:
      unint64_t v14 = v5[6];
      if (v14 >= 8)
      {
        if ((v14 & 7) != 0)
        {
          uint64_t v15 = (_DWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
          BOOL v16 = (v5[6] & 7) != 3 || v15 == 0;
          if (v16 || !*v15) {
            goto LABEL_22;
          }
        }
        else
        {
          v14 &= 0xFFFFFFFFFFFFFFF8;
          v5[6] = v14;
        }
        if ((v14 & 7) != 0)
        {
          uint64_t v23 = *(uint64_t **)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        else
        {
          uint64_t v23 = (uint64_t *)(v14 & 0xFFFFFFFFFFFFFFF8);
          v5[6] = v23;
        }
        unsigned int v17 = 0;
        uint64_t v25 = *v23;
        if ((v25 & 4) == 0)
        {
          long long v26 = (llvm *)(v25 & 0xFFFFFFFFFFFFFFF8);
          if (v26) {
            unsigned int v17 = llvm::getUnderlyingObject(v26, (const llvm::Value *)6);
          }
        }
        goto LABEL_23;
      }
LABEL_22:
      unsigned int v17 = 0;
LABEL_23:
      if (UnderlyingObject) {
        BOOL v18 = v17 == 0;
      }
      else {
        BOOL v18 = 1;
      }
      return !v18 && UnderlyingObject == v17;
    }
LABEL_14:
    UnderlyingObject = 0;
    goto LABEL_15;
  }
  BOOL result = 0;
  if ((v7 & 0x20) != 0 && (v9 & 0x20) != 0)
  {
    uint64_t v20 = (llvm::MachineOperand *)(v4[4] + 32 * *(unsigned __int8 *)(v6 + 4));
    if (*(unsigned char *)v20 == 7
      && (int v21 = (const llvm::MachineOperand *)(v5[4] + 32 * *(unsigned __int8 *)(v8 + 4)), *(unsigned char *)v21 == 7))
    {
      return llvm::MachineOperand::isIdenticalTo(v20, v21);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1CB904508(unsigned __int16 a1, int a2)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0x43Fu:
    case 0x440u:
    case 0x442u:
    case 0x443u:
    case 0x455u:
    case 0x456u:
    case 0x458u:
    case 0x459u:
    case 0x45Fu:
    case 0x460u:
    case 0x462u:
    case 0x463u:
    case 0x465u:
    case 0x467u:
    case 0x469u:
    case 0x46Bu:
    case 0x46Du:
    case 0x46Fu:
    case 0x471u:
    case 0x473u:
    case 0x475u:
    case 0x476u:
    case 0x478u:
    case 0x479u:
    case 0x47Bu:
    case 0x47Du:
    case 0x47Fu:
    case 0x481u:
    case 0x483u:
    case 0x484u:
    case 0x486u:
    case 0x487u:
      goto LABEL_2;
    case 0x441u:
    case 0x444u:
    case 0x445u:
    case 0x446u:
    case 0x447u:
    case 0x448u:
    case 0x449u:
    case 0x44Au:
    case 0x44Bu:
    case 0x44Cu:
    case 0x44Du:
    case 0x44Eu:
    case 0x44Fu:
    case 0x450u:
    case 0x451u:
    case 0x452u:
    case 0x453u:
    case 0x454u:
    case 0x457u:
    case 0x45Au:
    case 0x45Bu:
    case 0x45Cu:
    case 0x45Du:
    case 0x45Eu:
    case 0x461u:
    case 0x464u:
    case 0x466u:
    case 0x468u:
    case 0x46Au:
    case 0x46Cu:
    case 0x46Eu:
    case 0x470u:
    case 0x472u:
    case 0x474u:
    case 0x477u:
    case 0x47Au:
    case 0x47Cu:
    case 0x47Eu:
    case 0x480u:
    case 0x482u:
    case 0x485u:
      return result;
    default:
      if (a1 - 1305 <= 0x16 && ((1 << (a1 - 25)) & 0x6C06DB) != 0)
      {
        uint64_t result = a2 ^ 1u;
      }
      else
      {
        unsigned int v4 = a1 - 2493;
        if (v4 <= 4 && v4 != 2) {
LABEL_2:
        }
          uint64_t result = 1;
      }
      break;
  }
  return result;
}

BOOL sub_1CB9046B0(unsigned __int16 a1)
{
  return a1 - 11747 < 0x20 || a1 - 291 < 0x10;
}

uint64_t sub_1CB9046D8(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v3 = 8;
  }
  else
  {
    int v3 = *(_DWORD *)(a1 + 16);
    if (!v3) {
      return 0;
    }
    uint64_t v2 = *(void *)(a1 + 8);
  }
  int v4 = v3 - 1;
  LODWORD(v5) = (37 * *a2) & (v3 - 1);
  uint64_t v6 = (int *)(v2 + 8 * v5);
  int v7 = *v6;
  if (*a2 == *v6)
  {
LABEL_8:
    int *v6 = -2;
    int v10 = *(_DWORD *)(a1 + 4) + 1;
    *(_DWORD *)a1 -= 2;
    *(_DWORD *)(a1 + 4) = v10;
    return 1;
  }
  int v8 = 1;
  while (v7 != -1)
  {
    int v9 = v5 + v8++;
    uint64_t v5 = v9 & v4;
    int v7 = *(_DWORD *)(v2 + 8 * v5);
    if (*a2 == v7)
    {
      uint64_t v6 = (int *)(v2 + 8 * v5);
      goto LABEL_8;
    }
  }
  return 0;
}

uint64_t sub_1CB904770(uint64_t a1, _DWORD *a2, void *a3)
{
  uint64_t v3 = a1 + 8;
  if (*(unsigned char *)a1)
  {
    int v4 = 8;
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      int v7 = 0;
      uint64_t result = 0;
      goto LABEL_8;
    }
    uint64_t v3 = *(void *)(a1 + 8);
  }
  int v5 = v4 - 1;
  unsigned int v6 = (37 * *a2) & (v4 - 1);
  int v7 = (_DWORD *)(v3 + 8 * v6);
  int v8 = *v7;
  if (*a2 == *v7)
  {
    uint64_t result = 1;
  }
  else
  {
    int v9 = 0;
    int v10 = 1;
    uint64_t result = 1;
    while (v8 != -1)
    {
      if (v9) {
        BOOL v12 = 0;
      }
      else {
        BOOL v12 = v8 == -2;
      }
      if (v12) {
        int v9 = v7;
      }
      unsigned int v13 = v6 + v10++;
      unsigned int v6 = v13 & v5;
      int v7 = (_DWORD *)(v3 + 8 * (v13 & v5));
      int v8 = *v7;
      if (*a2 == *v7) {
        goto LABEL_8;
      }
    }
    uint64_t result = 0;
    if (v9) {
      int v7 = v9;
    }
  }
LABEL_8:
  *a3 = v7;
  return result;
}

BOOL sub_1CB904820(uint64_t a1)
{
  int v1 = *(unsigned __int16 **)(a1 + 16);
  int v2 = *v1;
  if ((v2 - 9) <= 0x3C && ((1 << (v2 - 9)) & 0x1000000000000605) != 0 || v2 == 0) {
    return 0;
  }
  uint64_t v5 = *((void *)v1 + 1);
  if ((v5 & 0x10) != 0) {
    return 0;
  }
  uint64_t v6 = *((void *)v1 + 2);
  if (v6) {
    return 0;
  }
  if ((v2 - 1) <= 1 && (*(unsigned char *)(*(void *)(a1 + 32) + 48) & 8) != 0) {
    return (v6 & 0xC0) != 0;
  }
  __int16 v7 = *(_WORD *)(a1 + 44);
  if ((v7 & 0xC) != 0 && (v7 & 4) == 0)
  {
    if ((v5 & 0x80000) == 0)
    {
      while ((*(_WORD *)(a1 + 44) & 8) != 0)
      {
        a1 = *(void *)(a1 + 8);
        if ((*(unsigned char *)(*(void *)(a1 + 16) + 10) & 8) != 0) {
          return (v6 & 0xC0) != 0;
        }
      }
      return 0;
    }
  }
  else if ((v5 & 0x80000) == 0)
  {
    return 0;
  }
  return (v6 & 0xC0) != 0;
}

uint64_t sub_1CB9048C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 56);
  if (v2 == -1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(unsigned int *)(a1 + 64);
    int v5 = *(_DWORD *)(*(void *)(v3 + 4912) + 4 * v4);
    int v6 = *(_DWORD *)(a2 + 44);
    if (v6 == 0x7FFFFFFF)
    {
      uint64_t v7 = 0;
      unint64_t v8 = *(void *)(v3 + 3104) + ((unint64_t)*(unsigned int *)(*(void *)(a2 + 8) + 192) << 6);
      while (1)
      {
        int v9 = (unsigned __int16)*(_DWORD *)(v8 + v7);
        BOOL v10 = v9 != 0;
        int v11 = v9 - 1;
        if (v10 && v11 == v4) {
          break;
        }
        v7 += 4;
        if (v7 == 64)
        {
          int v6 = 0;
          goto LABEL_11;
        }
      }
      int v6 = *(int *)(v8 + v7) >> 16;
LABEL_11:
      *(_DWORD *)(a2 + 44) = v6;
    }
    LODWORD(v2) = v6 + v5;
    if ((float)(*(float *)(a1 + 2432) * (float)*(unsigned int *)(a1 + 1936)) <= (float)v2) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = 0;
    }
    *(_DWORD *)(a2 + 56) = v2;
  }
  return v2;
}

uint64_t sub_1CB90495C(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned int *)(a2 + 60);
  if (result == -1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(unsigned int *)(a1 + 64);
    int v6 = *(_DWORD *)(*(void *)(v4 + 4912) + 4 * v5);
    int v7 = *(_DWORD *)(a2 + 44);
    if (v7 == 0x7FFFFFFF)
    {
      uint64_t v8 = 0;
      unint64_t v9 = *(void *)(v4 + 3104) + ((unint64_t)*(unsigned int *)(*(void *)(a2 + 8) + 192) << 6);
      while (1)
      {
        int v10 = (unsigned __int16)*(_DWORD *)(v9 + v8);
        BOOL v11 = v10 != 0;
        int v12 = v10 - 1;
        if (v11 && v12 == v5) {
          break;
        }
        v8 += 4;
        if (v8 == 64)
        {
          int v7 = 0;
          goto LABEL_11;
        }
      }
      int v7 = *(int *)(v9 + v8) >> 16;
LABEL_11:
      *(_DWORD *)(a2 + 44) = v7;
    }
    uint64_t result = (v7 + v6);
    *(_DWORD *)(a2 + 60) = result;
  }
  return result;
}

uint64_t sub_1CB9049E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 20);
  if (v2 == -1)
  {
    if (*(unsigned char *)(a2 + 33)) {
      goto LABEL_3;
    }
    unint64_t v4 = *(void *)(*(void *)(a2 + 8) + 8);
    unint64_t v5 = v4;
    if ((*(_WORD *)(v4 + 44) & 4) != 0)
    {
      unint64_t v5 = *(void *)(*(void *)(a2 + 8) + 8);
      do
        unint64_t v5 = *(void *)v5 & 0xFFFFFFFFFFFFFFF8;
      while ((*(_WORD *)(v5 + 44) & 4) != 0);
    }
    uint64_t v6 = *(void *)(v4 + 24) + 48;
    int v7 = *(_DWORD **)(v5 + 32);
    uint64_t v8 = *(unsigned int *)(v5 + 40);
    unint64_t v9 = &v7[8 * v8];
    if (!v8)
    {
      unint64_t v24 = *(void *)(v5 + 8);
      if (v24 == v6)
      {
        unint64_t v5 = v6;
      }
      else
      {
        unint64_t v5 = v6;
        if ((*(_WORD *)(v24 + 44) & 4) != 0)
        {
          do
          {
            unint64_t v25 = v24;
            uint64_t v26 = *(unsigned int *)(v24 + 40);
            if (v26)
            {
              unint64_t v5 = v24;
              goto LABEL_44;
            }
            unint64_t v24 = *(void *)(v24 + 8);
          }
          while (v24 != v6 && (*(_WORD *)(v24 + 44) & 4) != 0);
          unint64_t v5 = v6;
LABEL_44:
          int v7 = *(_DWORD **)(v25 + 32);
          unint64_t v9 = &v7[8 * v26];
        }
      }
    }
    if (v7 == v9)
    {
LABEL_3:
      uint64_t v2 = 0;
      goto LABEL_4;
    }
    uint64_t v2 = 0;
LABEL_10:
    if (*v7) {
      goto LABEL_4;
    }
    if ((*v7 & 0x1000000) == 0) {
      goto LABEL_4;
    }
    int v10 = v7[1];
    if (!v10) {
      goto LABEL_4;
    }
    int v11 = 0;
    uint64_t v12 = *(unsigned int *)(a1 + 744);
    uint64_t v13 = v2;
    while (1)
    {
      int v14 = v11;
      uint64_t v15 = a1 + 48 * v12;
      uint64_t v16 = *(unsigned int *)(v15 + 656);
      if (v16)
      {
        uint64_t v17 = 0;
        BOOL v18 = *(int **)(v15 + 648);
        uint64_t v19 = 4 * v16;
        do
        {
          int v20 = *v18++;
          v17 += v20 == v10;
          v19 -= 4;
        }
        while (v19);
        int v11 = v14 + 1;
        uint64_t v2 = (v14 + 1);
        if (v17) {
          goto LABEL_21;
        }
      }
      else
      {
        int v11 = v14 + 1;
      }
      uint64_t v2 = v13;
LABEL_21:
      uint64_t v12 = (v12 & 1) == 0;
      uint64_t v13 = v2;
      if (v14)
      {
        v7 += 8;
        if (v7 != v9) {
          goto LABEL_31;
        }
        unint64_t v21 = *(void *)(v5 + 8);
        if (v21 == v6) {
          goto LABEL_4;
        }
        int v7 = v9;
        unint64_t v5 = v6;
        if ((*(_WORD *)(v21 + 44) & 4) != 0)
        {
          while (1)
          {
            unint64_t v22 = v21;
            uint64_t v23 = *(unsigned int *)(v21 + 40);
            if (v23) {
              break;
            }
            unint64_t v21 = *(void *)(v21 + 8);
            if (v21 == v6 || (*(_WORD *)(v21 + 44) & 4) == 0)
            {
              unint64_t v5 = v6;
              goto LABEL_30;
            }
          }
          unint64_t v5 = v21;
LABEL_30:
          int v7 = *(_DWORD **)(v22 + 32);
          unint64_t v9 = &v7[8 * v23];
        }
LABEL_31:
        if (v7 == v9)
        {
LABEL_4:
          *(_DWORD *)(a2 + 20) = v2;
          return v2;
        }
        goto LABEL_10;
      }
    }
  }
  return v2;
}

uint64_t sub_1CB904BA0(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(unsigned int *)(a2 + 48);
  if (result == -1)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(_WORD **)(v5 + 24);
    if (!v6)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v6 = (_WORD *)(*(void *)(v7 + 672) + 24 * *(unsigned __int16 *)(*(void *)(*(void *)(v5 + 8) + 16) + 6));
      if ((v6[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          unsigned int v10 = (*(uint64_t (**)(void))(**(void **)(v7 + 808) + 200))(*(void *)(v7 + 808));
          uint64_t v11 = *(void *)(v7 + 672);
        }
        while ((*(_WORD *)(v11 + 24 * v10 + 8) & 0x1FFF) == 0x1FFE);
        uint64_t v6 = (_WORD *)(v11 + 24 * v10);
      }
      *(void *)(v5 + 24) = v6;
    }
    if (v6[6])
    {
      uint64_t v8 = (unsigned __int16 *)(*(void *)(*(void *)(*(void *)(a1 + 16) + 176) + 136)
                              + 4 * (unsigned __int16)v6[5]
                              + 2);
      uint64_t v9 = 4 * (unsigned __int16)v6[6];
      while (*(_DWORD *)(a1 + 960) != *(v8 - 1))
      {
        v8 += 2;
        v9 -= 4;
        if (!v9) {
          goto LABEL_9;
        }
      }
      uint64_t result = *v8;
    }
    else
    {
LABEL_9:
      uint64_t result = 0;
    }
    *(_DWORD *)(a2 + 48) = result;
  }
  return result;
}

void sub_1CB904CD8(uint64_t a1, void *a2)
{
  unint64_t v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    uint64_t v6 = *(char **)a1;
    uint64_t v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(void *)a1)
    {
      if (v4 == v6) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = (v4 - v6) >> 2;
      }
      if (v14 >> 61) {
        sub_1CB833614();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
      uint64_t v16 = &v15[8 * (v14 >> 2)];
      uint64_t v18 = v4 - v5;
      BOOL v17 = v4 == v5;
      unint64_t v4 = v16;
      if (!v17)
      {
        unint64_t v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        int v20 = &v15[8 * (v14 >> 2)];
        do
        {
          uint64_t v21 = *(void *)v5;
          v5 += 8;
          *(void *)int v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = &v15[8 * v14];
      if (v6)
      {
        operator delete(v6);
        unint64_t v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      uint64_t v7 = (uint64_t)&v5[-*(void *)a1] >> 3;
      if (v7 >= -1) {
        uint64_t v8 = v7 + 1;
      }
      else {
        uint64_t v8 = v7 + 2;
      }
      uint64_t v9 = -(v8 >> 1);
      uint64_t v10 = v8 >> 1;
      uint64_t v11 = &v5[-8 * v10];
      int64_t v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v10], *(const void **)(a1 + 8), v4 - v5);
        unint64_t v4 = *(char **)(a1 + 8);
      }
      uint64_t v13 = &v4[8 * v9];
      unint64_t v4 = &v11[v12];
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = &v11[v12];
    }
  }
  *(void *)unint64_t v4 = *a2;
  *(void *)(a1 + 16) += 8;
}

void **sub_1CB904DFC(void **a1)
{
  sub_1CD3F260C(a1);
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      unint64_t v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    uint64_t v6 = a1[1];
    uint64_t v5 = a1[2];
    if (v5 != v6) {
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
    }
  }
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}